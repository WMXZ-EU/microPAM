
.vsteensy/build/microPAM_T4_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60001f8c l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
000132f0 l    d  .fini	00000000 .fini
000132f4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
20001ec0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60017534 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001400 l     F .text.code	00000016 memory_copy
60001418 l     F .text.code	00000010 memory_clear
00000000 l    df *ABS*	00000000 usb.c
0000a894 l     F .text.itcm	000000c8 endpoint0_receive
0000a95c l     F .text.itcm	00000088 schedule_transfer
0000a9e4 l     F .text.itcm	00000036 run_callbacks
0000aa1c l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
20007680 l     O .bss	00000008 endpoint0_buffer
20007688 l     O .bss	00000004 endpoint0_notify_mask
200052f8 l     O .bss	00000008 endpoint0_setupdata
2000768c l     O .bss	00000004 endpointN_notify_mask
20007cfc l     O .bss	00000008 reply_buffer
20007ded l     O .bss	00000001 sof_usage
20007dfb l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
20007d58 l     O .bss	00000004 s_hotCount
20007d5c l     O .bss	00000004 s_hotTemp
20007d60 l     O .bss	00000004 s_hot_ROOM
20007d64 l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 audiostream.cpp
00000000 l    df *ABS*	00000000 analog.c
20007de7 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
20007940 l     O .bss	00000000 object.0
60001f10 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000e88 l     F .text.itcm	00000654 storeData(int) [clone .part.0]
20200000 l     O .bss.dma	00003cf0 setup::data
00001704 l     F .text.itcm	00000174 _GLOBAL__sub_I_DirPrefix
20005c8c l     O .bss	00000400 i2s_rx_buffer_32
200062cc l     O .bss	00000004 loop::ic
200062d0 l     O .bss	00000004 loop::t0
20007dc8 l     O .bss	00000002 loop::status
00000000 l    df *ABS*	00000000 output_i2s_oct.cpp
00001878 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_pwm.cpp
00001890 l     F .text.itcm	0000001c __tcf_0
000018ac l     F .text.itcm	00000030 _GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE
00000000 l    df *ABS*	00000000 input_i2s.cpp
000018dc l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211_2.cpp
000018f4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
0000190c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 input_spdif3.cpp
00001924 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE
00000000 l    df *ABS*	00000000 input_tdm2.cpp
0000193c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE
00000000 l    df *ABS*	00000000 input_adc.cpp
00001954 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE
00000000 l    df *ABS*	00000000 input_pdm_i2s2.cpp
0000196c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE
00000000 l    df *ABS*	00000000 input_i2s2.cpp
00001984 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
0000199c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
000019b4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_tdm2.cpp
00001adc l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE
00000000 l    df *ABS*	00000000 output_i2s2.cpp
00001af4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s_hex.cpp
00001b0c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
00001b24 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 output_tdm.cpp
00001b3c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_tdm.cpp
00001b54 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
00001b6c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 output_spdif3.cpp
00001b84 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE
00000000 l    df *ABS*	00000000 output_mqs.cpp
00001b9c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE
00000000 l    df *ABS*	00000000 async_input_spdif3.cpp
00001ca8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE
00000000 l    df *ABS*	00000000 input_pdm.cpp
00001cc0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_i2s.cpp
00001cd8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif2.cpp
00001cf0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif.cpp
00001d08 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 wireimxrt.cpp
0000207c l     F .text.itcm	00000044 _GLOBAL__sub_I__ZN7TwoWire5beginEv
00000000 l    df *ABS*	00000000 spi.cpp
000020d8 l     F .text.itcm	00000060 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]
000025a0 l     F .text.itcm	00000048 _GLOBAL__sub_I__ZN8SPIClass5beginEv
00000000 l    df *ABS*	00000000 sd.cpp
00002cb4 l     F .text.itcm	0000008c _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 usb_desc.c
20001a10 l     O .data	00000012 device_descriptor
6000236c l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 serialevent.cpp
00000000 l    df *ABS*	00000000 effect_delay_ext.cpp
00000000 l    df *ABS*	00000000 record_queue.cpp
00000000 l    df *ABS*	00000000 time.cpp
20000764 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 fsstructs.cpp
00000000 l    df *ABS*	00000000 fscache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
20000564 l     O .data	0000012c lookupTable
20000690 l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 fsdatetime.cpp
00002f40 l     F .text.itcm	00000014 dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)
00000000 l    df *ABS*	00000000 exfatformatter.cpp
00002f6c l     F .text.itcm	00000020 Print::write(char const*) [clone .isra.0]
00000000 l    df *ABS*	00000000 exfatname.cpp
00000000 l    df *ABS*	00000000 exfatfile.cpp
00000000 l    df *ABS*	00000000 exfatpartition.cpp
00000000 l    df *ABS*	00000000 exfatfilewrite.cpp
00000000 l    df *ABS*	00000000 fatformatter.cpp
00000000 l    df *ABS*	00000000 fatname.cpp
00000000 l    df *ABS*	00000000 fatfile.cpp
0000570c l     F .text.itcm	000000bc FatFile::sync() [clone .part.0]
00000000 l    df *ABS*	00000000 fatpartition.cpp
00006734 l     F .text.itcm	00000068 FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]
0000679c l     F .text.itcm	0000005a FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]
00000000 l    df *ABS*	00000000 fatfilelfn.cpp
00000000 l    df *ABS*	00000000 fsfile.cpp
00000000 l    df *ABS*	00000000 fsvolume.cpp
00000000 l    df *ABS*	00000000 fsnew.cpp
00000000 l    df *ABS*	00000000 sdspicard.cpp
00000000 l    df *ABS*	00000000 sdioteensy.cpp
0000863c l     F .text.itcm	00000030 sdIrs()
0000866c l     F .text.itcm	00000014 isBusyDat()
00008680 l     F .text.itcm	0000000c isBusyDMA()
0000868c l     F .text.itcm	000000cc setSdclk(unsigned long)
000088a0 l     F .text.itcm	00000068 waitDmaStatus()
00008908 l     F .text.itcm	00000088 waitTransferComplete() [clone .part.0]
00008a44 l     F .text.itcm	00000098 cardCommand(unsigned long, unsigned long)
00008adc l     F .text.itcm	00000060 readReg16(unsigned long, void*)
00008bd8 l     F .text.itcm	0000002c isBusyCMD13()
00008e58 l     F .text.itcm	0000010c rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
20007dda l     O .bss	00000001 m_initDone
20005c84 l     O .bss	00000004 m_sdClkKhz
20007ddb l     O .bss	00000001 m_version2
20005c88 l     O .bss	00000004 m_errorLine
20007ddc l     O .bss	00000001 m_highCapacity
20007ddd l     O .bss	00000001 m_transferActive
2000608c l     O .bss	00000010 m_cid
2000609c l     O .bss	00000010 m_csd
200060ac l     O .bss	00000004 m_ocr
200060b0 l     O .bss	00000004 m_rca
200060b4 l     O .bss	00000008 m_scr
200060bc l     O .bss	00000040 m_sds
200060fc l     O .bss	00000004 m_busyFcn
20007dde l     O .bss	00000001 m_dmaBusy
20006100 l     O .bss	00000004 m_irqstat
20001a3a l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 sdspiteensy3.cpp
00000000 l    df *ABS*	00000000 sdspichipselect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
00009e64 l     F .text.itcm	00000060 rx_queue_transfer
20001f20 l     O .bss	00001000 rx_buffer
00009ec4 l     F .text.itcm	000000b4 rx_event
00009f78 l     F .text.itcm	00000090 usb_serial_flush_callback
20003240 l     O .bss	00002000 txbuffer
0000a008 l     F .text.itcm	000001b8 usb_serial_write.part.0
20007d04 l     O .bss	00000004 rx_available
20007d0c l     O .bss	00000010 rx_count
20007de9 l     O .bss	00000001 rx_head
20007d28 l     O .bss	00000010 rx_index
20007d44 l     O .bss	00000009 rx_list
20007dce l     O .bss	00000002 rx_packet_size
20007deb l     O .bss	00000001 rx_tail
20002f20 l     O .bss	00000100 rx_transfer
20007dee l     O .bss	00000001 transmit_previous_timeout
20007dd2 l     O .bss	00000002 tx_available
20007df0 l     O .bss	00000001 tx_head
20007df2 l     O .bss	00000001 tx_noautoflush
20007dd6 l     O .bss	00000002 tx_packet_size
20003120 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_midi.c
0000babc l     F .text.itcm	00000060 rx_queue_transfer
0000bb1c l     F .text.itcm	00000064 rx_event
20007d08 l     O .bss	00000004 rx_available
20007d1c l     O .bss	0000000c rx_count
20007dea l     O .bss	00000001 rx_head
20007d38 l     O .bss	0000000c rx_index
20007d50 l     O .bss	00000007 rx_list
20007dd0 l     O .bss	00000002 rx_packet_size
20007dec l     O .bss	00000001 rx_tail
20003020 l     O .bss	000000c0 rx_transfer
20007def l     O .bss	00000001 transmit_previous_timeout
20007dd4 l     O .bss	00000002 tx_available
20007df1 l     O .bss	00000001 tx_head
20007df3 l     O .bss	00000001 tx_noautoflush
20007dd8 l     O .bss	00000002 tx_packet_size
200031a0 l     O .bss	00000080 tx_transfer
20203d00 l     O .bss.dma	00000c00 rx_buffer
20204900 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
20007de5 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 eventresponder.cpp
00000000 l    df *ABS*	00000000 dmachannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 time.cpp
20000770 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 usb_audio.cpp
0000c5ac l     F .text.itcm	00000098 copy_to_buffers(unsigned long const*, short*, short*, unsigned int)
0000c644 l     F .text.itcm	0000005c sync_event(transfer_struct*)
0000c90c l     F .text.itcm	00000054 rx_event(transfer_struct*)
0000ca80 l     F .text.itcm	00000060 tx_event(transfer_struct*)
20001474 l     O .data	00000004 usb_audio_transmit_callback::count
20205280 l     O .bss.dma	000000b4 rx_buffer
20205340 l     O .bss.dma	000000b4 tx_buffer
00000000 l    df *ABS*	00000000 print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 intervaltimer.cpp
0000cd70 l     F .text.itcm	00000058 pit_isr()
20001ec0 l     O .bss	00000010 funct_table
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000d818 l     F .text.itcm	00000018 stdio_exit_handler
0000d830 l     F .text.itcm	00000040 cleanup_stdio
0000d870 l     F .text.itcm	000000d4 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-memset.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-strncpy.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libc_a-__atexit.o
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-fclose.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libm_a-s_frexp.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
00010ad8 l     F .text.itcm	00000126 quorem
00000000 l    df *ABS*	00000000 libc_a-wcrtomb.o
00000000 l    df *ABS*	00000000 libc_a-wcsrtombs.o
00000000 l    df *ABS*	00000000 libc_a-fiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiprintf.o
00000000 l    df *ABS*	00000000 libc_a-vfiprintf.o
00011a78 l     F .text.itcm	00000076 __sprint_r.part.0
00012a7c l     F .text.itcm	00000080 __sbprintf
00000000 l    df *ABS*	00000000 libc_a-fvwrite.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-fputwc.o
00000000 l    df *ABS*	00000000 libc_a-wcsnrtombs.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 libc_a-ctype_.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 libc_a-__call_atexit.o
00000000 l    df *ABS*	00000000 exfatvolume.cpp
00000000 l    df *ABS*	00000000 fatvolume.cpp
00000000 l    df *ABS*	00000000 hardwareserial.cpp
000132d8 l     F .text.itcm	00000008 ___init_veneer
000132e0 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
000132e8 l     F .text.itcm	00000008 ___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer
60001ec0 l     F .text.code	00000008 ____libc_init_array_veneer
60001ec8 l     F .text.code	00000008 __pwm_init_veneer
60001ed0 l     F .text.code	00000008 __set_arm_clock_veneer
60001ed8 l     F .text.code	00000008 __delay_veneer
60001ee0 l     F .text.code	00000008 ___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer
60001ee8 l     F .text.code	00000008 __memset_veneer
60001ef0 l     F .text.code	00000008 ___Znwj_veneer
60001ef8 l     F .text.code	00000008 __main_veneer
60001f00 l     F .text.code	00000008 __sm_set_pool_veneer
60001f08 l     F .text.code	00000008 __usb_init_serialnumber_veneer
00000318  w    F .text.itcm	0000006e SDFile::getModifyTime(DateTimeFields&)
200061b0 g     O .bss	00000004 AudioInputUSB::incoming_right
00002e88 g     F .text.itcm	000000b8 toUpcase(unsigned short)
00001bf4 g     F .text.itcm	00000016 AudioRecordQueue::available()
0000a3d4 g     F .text.itcm	00000018 usb_serial_available
200061f8 g     O .bss	00000004 AudioOutputUSB::left_2nd
200062bc g     O .bss	00000008 I2S_32::dma
000132b0 g     F .text.itcm	00000024 _isatty_r
200062ac g     O .bss	00000008 AsyncAudioInputSPDIF3::dma
20007dc2 g     O .bss	00000002 AudioInputUSB::incoming_count
6000178c g     F .text.code	00000002 startup_default_late_hook
0000de94 g     F .text.itcm	0000002c _lseek_r
2000610c g     O .bss	00000004 AudioStream::memory_pool
00008f64 g     F .text.itcm	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000bd40  w    F .text.itcm	000000f0 yield
00008cd8 g     F .text.itcm	000000c8 SdioCard::cardCMD6(unsigned long, unsigned char*)
0000768c  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
20007db4 g     O .bss	00000004 usb_timer1_callback
00006580 g     F .text.itcm	000001b4 FatFile::write(void const*, unsigned int)
20005240 g     O .bss	000000b4 usb_audio_transmit_buffer
600020a0 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
60001888 g     F .text.code	00000384 configure_external_ram
00007684  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
0000650c g     F .text.itcm	00000074 FatFile::truncate()
20005a04 g     O .bss	00000140 Wire1
00006cf0 g     F .text.itcm	00000168 FatFile::makeSFN(FatLfn_t*)
20007ddf g     O .bss	00000001 AudioStream::update_scheduled
20006104 g     O .bss	00000004 FsDateTime::callback
20006468 g     O .bss	00000001 __lock___atexit_recursive_mutex
000118ec g     F .text.itcm	0000004c _wcrtomb_r
20007df7 g     O .bss	00000001 usb_audio_transmit_setting
00006e58 g     F .text.itcm	000000b4 FatFile::makeUniqueSfn(FatLfn_t*)
00007e8c g     F .text.itcm	00000068 SharedSpiCard::writeStart(unsigned long)
0000511c g     F .text.itcm	00000056 FatFormatter::initPbs()
0000ccb8 g     F .text.itcm	0000001c Print::println()
00008604 g     F .text.itcm	00000026 DedicatedSpiCard::begin(SdSpiConfig)
00001fac g     F .text.itcm	000000ac TwoWire::isr()
200009dc g     O .data	00000074 vtable for DedicatedSpiCard
20007db8 g     O .bss	00000002 AudioStream::memory_used
0000da84 g     F .text.itcm	00000020 __sseek
0000d944 g     F .text.itcm	0000003c __sinit
00003a9c g     F .text.itcm	000000ea ExFatFile::seekSet(unsigned long long)
000131d4 g     F .text.itcm	000000b0 __swbuf_r
00000484  w    F .text.itcm	00000028 File::flush()
00000388  w    F .text.itcm	0000006e SDFile::getCreateTime(DateTimeFields&)
20007d9c g     O .bss	00000004 usb_audio_overrun_count
0000d428 g     F .text.itcm	0000000c __malloc_unlock
0000053c  w    F .text.itcm	000000b0 SDFile::openNextFile(unsigned char)
200062c4 g     O .bss	00000004 FsVolume::m_cwv
00005b98 g     F .text.itcm	000000f8 FatFile::open(FatFile*, char const*, int)
200058c0 g     O .bss	00000004 SerNum
00007678  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
60001e60 g     F .text.code	00000054 analog_init
000014dc g     F .text.itcm	0000005c storeBegin()
0000daac g     F .text.itcm	0000004a _vdprintf_r
00005908 g     F .text.itcm	00000020 FatFile::getCreateDateTime(unsigned short*, unsigned short*)
00007c38 g     F .text.itcm	00000076 SharedSpiCard::readOCR(unsigned long*)
20001448 g     O .data	00000004 F_CPU_ACTUAL
20000ad4  w    O .data	0000005c vtable for SDFile
200061a8 g     O .bss	00000004 AudioInputUSB::ready_right
0000dbd8 g     F .text.itcm	000000f8 memmove
000097e0 g     F .text.itcm	00000098 SdioCard::stopTransmission(bool)
0000e47c g     F .text.itcm	0000004c _Balloc
000132fc g       .ARM.exidx	00000000 __exidx_end
200076a4 g     O .bss	00000004 feedback_accumulator
00006904 g     F .text.itcm	0000004a FatPartition::freeChain(unsigned long)
20007de2 g     O .bss	00000001 EventResponder::runningFromYield
0000c960 g     F .text.itcm	0000001c AudioOutputUSB::begin()
00009c84 g     F .text.itcm	00000016 SdSpiArduinoDriver::receive()
0000b804 g     F .text.itcm	00000060 tempmonGetTemp
00005624 g     F .text.itcm	000000e4 FatFile::getName7(char*, unsigned int)
0000cc68 g     F .text.itcm	00000050 Print::write(unsigned char const*, unsigned int)
20001478 g     O .data	00000004 __atexit_recursive_mutex
0000df3c g     F .text.itcm	0000000c __errno
0000061c  w    F .text.itcm	00000026 SDFile::isDirectory()
00004b6c g     F .text.itcm	00000176 ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
00000804  w    F .text.itcm	00000044 File::write(unsigned char const*, unsigned int)
20003220 g     O .bss	00000020 tx_transfer
60001000 g     O .text.headers	00000020 ImageVectorTable
000022f0  w    F .text.itcm	0000002c SPIClass::SPIClass(unsigned int, unsigned int)
000009b4  w    F .text.itcm	000000a8 File::~File()
2000620c g     O .bss	00000004 EventResponder::firstInterrupt
0000b42c g     F .text.itcm	00000004 usb_transfer_status
2000796c g     O .bss	00000014 patchCord2
0000b77c g     F .text.itcm	00000084 sm_set_pool
00002ffc g     F .text.itcm	0000004c ExFatFormatter::writeUpcaseUnicode(unsigned short)
0000c6a0 g     F .text.itcm	0000011c AudioOutputUSB::update()
200065e0 g     O .bss	00000004 __stdio_exit_handler
00007364 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000458c g     F .text.itcm	00000018 ExFatPartition::rootLength()
20006294 g     O .bss	00000008 AudioOutputSPDIF3::dma
00000718  w    F .text.itcm	00000054 SDFile::setCreateTime(DateTimeFields const&)
0000c01c  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00013284 g     F .text.itcm	0000002c _fstat_r
20000eb0 g     O .data	00000370 digital_pin_to_info_PGM
20007690 g     O .bss	00000004 errno
00009c9c g     F .text.itcm	00000024 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
000042ec g     F .text.itcm	00000042 ExFatPartition::fatGet(unsigned long, unsigned long*)
60001fdc g     O .text.progmem	00000050 TwoWire::i2c3_hardware
000132f8 g       .text.itcm	00000000 _etext
00002214 g     F .text.itcm	000000dc _spi_dma_rxISR0()
000071a4 g     F .text.itcm	000000b0 FatFile::parsePathName(char const*, FatLfn_t*, char const**)
20001ec0 g       .bss	00000000 _sbss
00005174 g     F .text.itcm	0000005c FatFormatter::writeMbr()
00009d24 g     F .text.itcm	00000006 sdCsInit(unsigned char)
00002ac8 g     F .text.itcm	00000114 SDClass::mediaPresent()
00008764 g     F .text.itcm	0000000c SdioCard::errorData() const
00009afc g     F .text.itcm	000000f4 SdioCard::writeSector(unsigned long, unsigned char const*)
000030f8 g     F .text.itcm	0000052c ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)
0000b8b8 g     F .text.itcm	00000024 digitalRead
60002378 g       *ABS*	00000000 _stextload
00001580 g     F .text.itcm	00000184 loop
0000c348 g     F .text.itcm	00000018 AudioStream::receiveReadOnly(unsigned int)
0000b94c g     F .text.itcm	0000007a flexpwm_init
0000cc2c g     F .text.itcm	0000003c usb_audio_set_feature
0000bc44 g     F .text.itcm	000000a4 usb_midi_flush_output
20007dcc g     O .bss	00000002 haveSD
0000b220 g     F .text.itcm	00000064 usb_config_rx
00003830 g     F .text.itcm	000000a0 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00009610 g     F .text.itcm	000000fc SdioCard::readData(unsigned char*)
20006208 g     O .bss	00000004 EventResponder::lastInterrupt
000073e8 g     F .text.itcm	0000002e FsBaseFile::close()
00002558 g     F .text.itcm	00000048 SPIClass::end()
00009d30 g     F .text.itcm	00000134 memcpy
000003f8  w    F .text.itcm	00000060 File::available()
000076bc g     F .text.itcm	0000008c SharedSpiCard::writeStop()
20001ec0 g     O .data	00000000 .hidden __TMC_END__
200076bc g     O .bss	00000080 fileName
00004370 g     F .text.itcm	000000be ExFatPartition::freeChain(unsigned long)
00005ed8 g     F .text.itcm	00000028 FatFile::peek()
0000ec10 g     F .text.itcm	00001b44 _svfprintf_r
20007de6  w    O .bss	00000001 SDFile::name()::zeroterm
20007d70 g     O .bss	00000004 systick_millis_count
00004994 g     F .text.itcm	000000a2 ExFatFile::rename(ExFatFile*, char const*)
00000240  w    F .text.itcm	0000003c SDFile::truncate(unsigned long long)
200061f4 g     O .bss	00000004 AudioOutputUSB::left_1st
20007df9 g     O .bss	00000001 usb_configuration
0000766c  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000b730 g     F .text.itcm	0000004c sm_align_pool
00009878 g     F .text.itcm	00000030 SdioCard::syncDevice()
00008990 g     F .text.itcm	000000b4 SdioCard::writeData(unsigned char const*)
00000e00 g     F .text.itcm	00000088 makeHeader(char*)
000007b8  w    F .text.itcm	0000004c StreamFile<FsBaseFile, unsigned long long>::available()
00005f00 g     F .text.itcm	00000044 FatFile::readDirCache(bool)
00007d24 g     F .text.itcm	00000098 SharedSpiCard::sectorCount()
20006114 g     O .bss	00000070 AudioStream::memory_pool_available_mask
600020a0  w    O .text.progmem	00000018 usb_string_manufacturer_name
0000ce9c g     F .text.itcm	00000010 malloc
2000144c g     O .data	00000004 FilePrefix
60001f8c g     O .text.progmem	00000050 TwoWire::i2c1_hardware
000029e4 g     F .text.itcm	000000e2 SDClass::format(int, char, Print&)
20000aa4  w    O .data	00000024 vtable for FsFile
0000b6ec  w    F .text.itcm	0000000a _fstat
00001e9c  w    F .text.itcm	0000001e TwoWire::read()
00010a20 g     F .text.itcm	00000040 __assert_func
000020c0  w    F .text.itcm	00000016 EventResponder::triggerEvent(int, void*)
20007dc4 g     O .bss	00000002 AudioOutputUSB::offset_1st
200003a8 g     O .data	000000c8 __mprec_tens
60001648 g     F .text.code	000000e8 usb_init
20007dc0 g     O .bss	00000002 AudioStream::memory_pool_first_mask
20205260 g     O .bss.dma	00000004 usb_audio_sync_feedback
00007674  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
00000924  w    F .text.itcm	0000008e SDFile::seek(unsigned long long, int)
200064a4 g     O .bss	00000004 __malloc_top_pad
20005820 g     O .bss	00000050 SPI1
20007d74 g     O .bss	00000004 systick_safe_read
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00004ce4 g     F .text.itcm	000000e4 ExFatFile::truncate()
20001480 g     O .data	00000000 .hidden __dso_handle
000109a0 g     F .text.itcm	00000008 _localeconv_r
00009c2c g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
00012afc g     F .text.itcm	000002f4 __sfvwrite_r
0000e620 g     F .text.itcm	0000005c __i2b
20000000 g       .data	00000000 _sdata
000052ec g     F .text.itcm	000001c4 FatFormatter::makeFat32()
60002214 g     O .text.progmem	00000155 usb_config_descriptor_480
00009c7c g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
000057c8 g     F .text.itcm	00000034 FatFile::addCluster()
0000deec g     F .text.itcm	00000024 _sbrk_r
00008824 g     F .text.itcm	0000001c SdioCard::type() const
60001784 g     F .text.code	00000002 startup_default_early_hook
60001428 g     F .text.code	00000220 ResetHandler
0000a45c g     F .text.itcm	00000020 usb_serial_getchar
000001f0  w    F .text.itcm	00000050 SDFile::name()
20007da4 g     O .bss	00000008 usb_cdc_line_coding
0000b864 g     F .text.itcm	00000054 digitalWrite
20006210 g     O .bss	00000004 EventResponder::lastYield
00003808 g     F .text.itcm	00000028 ExFatFile::openRoot(ExFatVolume*)
0000dec0 g     F .text.itcm	0000002c _read_r
0000bb80 g     F .text.itcm	000000c4 usb_midi_configure
0000065c  w    F .text.itcm	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
00007688  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00002f8c g     F .text.itcm	0000002e ExFatFormatter::syncUpcase()
0000027c  w    F .text.itcm	00000054 SDFile::setModifyTime(DateTimeFields const&)
00010754 g     F .text.itcm	000000c6 _fclose_r
00008770 g     F .text.itcm	00000024 SdioCard::readCID(cid_t*)
20007694 g     O .bss	00000010 extmem_smalloc_pool
2000649c g     O .bss	00000004 __malloc_max_sbrked_mem
00008200 g     F .text.itcm	000000b6 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
20007de1 g     O .bss	00000001 AudioOutputUSB::update_responsibility
00000504  w    F .text.itcm	0000001a SDFile::position()
0000b8dc g     F .text.itcm	00000070 pinMode
200061a4 g     O .bss	00000004 AudioInputUSB::ready_left
200061c4 g     O .bss	00000008 AudioInputTDM2::dma
20005b44 g     O .bss	00000140 Wire2
60017800 g     O .text.csf	00000c00 hab_csf
00000458  w    F .text.itcm	0000002c File::peek()
00006950 g     F .text.itcm	000000a0 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
00002670  w    F .text.itcm	000000c8 SDClass::open(char const*, unsigned char)
000132f4 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
000001e4  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
0000b6f8  w    F .text.itcm	00000004 _isatty
20006204 g     O .bss	00000004 EventResponder::firstYield
20001440 g     O .data	00000004 DirPrefix
000006e4  w    F .text.itcm	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000d434 g     F .text.itcm	000003d8 _realloc_r
00000644  w    F .text.itcm	00000018 SDFile::read(void*, unsigned int)
0000df48 g     F .text.itcm	00000048 __libc_init_array
000002d0  w    F .text.itcm	00000046 SDFile::rewindDirectory()
00001e90  w    F .text.itcm	0000000c TwoWire::available()
00004044 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
000025ec g     F .text.itcm	00000084 SDClass::dateTime(unsigned short*, unsigned short*)
000048e4 g     F .text.itcm	000000ae ExFatFile::addDirCluster()
0000cbc8 g     F .text.itcm	00000064 usb_audio_get_feature
00012f68 g     F .text.itcm	00000066 _fputwc_r
000022f0  w    F .text.itcm	0000002c SPIClass::SPIClass(unsigned int, unsigned int)
20000380 g     O .data	00000028 __mprec_bigtens
0000b708  w    F .text.itcm	00000004 abort
0000c004  w    F .text.itcm	00000004 usb_serial_class::clear()
0000b6ac g     F .text.itcm	00000034 _sbrk
60015674 g       *ABS*	00000000 _sdataload
00000084 g     F .text.itcm	0000009c I2S_32::isr32()
0000e988 g     F .text.itcm	00000042 __mcmp
20000b54 g     O .data	00000030 vtable for SDClass
200061ec g     O .bss	00000008 AudioOutputTDM::dma
2000147c g     O .data	00000004 __brkval
20007df8 g     O .bss	00000001 usb_cdc_line_rtsdtr
60001eb4 g     F .text.code	00000000 _init
0000a1c0 g     F .text.itcm	00000002 usb_serial_reset
00005874 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
20000844 g     O .data	00000070 SPIClass::spiclass_lpspi1_hardware
20007df5 g     O .bss	00000001 usb_audio_sync_nbytes
60001d98 g     F .text.code	000000c8 AudioStream::initialize_memory(audio_block_struct*, unsigned int)
000027f0  w    F .text.itcm	00000054 SDClass::remove(char const*)
000001bc  w    F .text.itcm	00000028 SDFile::close()
0000089c  w    F .text.itcm	00000040 SDFile::~SDFile()
600020bc g     O .text.progmem	00000155 usb_config_descriptor_12
20000b84 g     O .data	00000024 vtable for TwoWire
00009c04 g     F .text.itcm	00000028 SdSpiArduinoDriver::begin(SdSpiConfig)
200065e4 g     O .bss	00000018 acq
20007e20 g       .bss	00000000 _ebss
00008fec g     F .text.itcm	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
2000793c g     O .bss	00000004 hour_
00000694  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
0000e580 g     F .text.itcm	00000040 __hi0bits
00003770 g     F .text.itcm	0000003c ExFatFile::dirCache(unsigned char, unsigned char)
00002064 g     F .text.itcm	0000000c lpi2c3_isr()
00002bdc g     F .text.itcm	000000d8 SDClass::begin(unsigned char)
00004a38 g     F .text.itcm	0000005e ExFatFile::mkdir(ExFatFile*, ExName_t*)
20205400 g       .bss.dma	00000000 _heap_start
2000646c g     O .bss	00000001 __lock___malloc_recursive_mutex
20007d7c g     O .bss	00000020 usb1
000025e8  w    F .text.itcm	00000002 SDClass::~SDClass()
6000202c g     O .text.progmem	00000050 TwoWire::i2c4_hardware
000001e4  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
200064a8 g     O .bss	00000138 __sf
2000667c g     O .bss	00001000 diskBuffer
200061fc g     O .bss	00000004 AudioOutputUSB::right_1st
00008110  w    F .text.itcm	00000076 SharedSpiCard::readCID(cid_t*)
000078dc g     F .text.itcm	000000ec SharedSpiCard::cardCommand(unsigned char, unsigned long)
000009b4  w    F .text.itcm	000000a8 File::~File()
00000003 g       *ABS*	00000000 _itcm_block_count
20001f00 g     O .bss	00000020 endpoint0_transfer_data
00005564 g     F .text.itcm	0000002a FatFile::getLfnChar(DirLfn_t*, unsigned char)
00002e38 g     F .text.itcm	0000004e FsCache::prepare(unsigned long, unsigned char)
0000cd08 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000b9c8 g     F .text.itcm	000000f4 pwm_init
0000c7bc g     F .text.itcm	00000150 usb_audio_receive_callback
200076a8 g     O .bss	00000014 file
00001f40  w    F .text.itcm	0000006c TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)
00000c08 g     F .text.itcm	000000d0 I2S_32::begin()
60018400 g       .text.csf	00000000 __text_csf_end
60001c0c g     F .text.code	0000005c usb_pll_start
0000e7d8 g     F .text.itcm	000000c0 __pow5mult
00006130 g     F .text.itcm	00000090 FatFile::rmdir()
200009d0 g     O .data	0000000c vtable for AudioRecordQueue
00002070 g     F .text.itcm	0000000c lpi2c4_isr()
00006884 g     F .text.itcm	00000080 FatPartition::allocateCluster(unsigned long, unsigned long*)
00001f40  w    F .text.itcm	0000006c TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)
00008638  w    F .text.itcm	00000002 SdioCard::end()
00002880  w    F .text.itcm	00000036 SDClass::exists(char const*)
20007d78 g     O .bss	00000004 tx_
20006184 g     O .bss	00000004 AudioStream::unused
20001ee0 g     O .bss	00000020 endpoint0_transfer_ack
20007dac g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000b3e8 g     F .text.itcm	00000028 usb_transmit
0000c1a0 g     F .text.itcm	00000064 software_isr()
0000befc g     F .text.itcm	00000020 systick_isr
00003688 g     F .text.itcm	00000082 ExFatFile::getName7(char*, unsigned int)
0000df9c g     F .text.itcm	00000002 __retarget_lock_release_recursive
20006110 g     O .bss	00000004 AudioStream::first_update
20001450 g     O .data	00000010 Serial
20007dba g     O .bss	00000002 AudioStream::memory_used_max
0000c534 g     F .text.itcm	00000034 AudioConnection::~AudioConnection()
0000c024  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
000074b8 g     F .text.itcm	00000072 FsBaseFile::openNext(FsBaseFile*, int)
60001784  w    F .text.code	00000002 startup_early_hook
20007df4 g     O .bss	00000001 usb_audio_receive_setting
000045a4 g     F .text.itcm	00000092 ExFatFile::addCluster()
20006108 g     O .bss	00000004 FsDateTime::callback2
20000a78  w    O .data	0000002c vtable for File
000077c8 g     F .text.itcm	0000008c SharedSpiCard::readData(unsigned char*, unsigned int)
000028b8  w    F .text.itcm	000000f0 SDClass::usedSize()
0000a390 g     F .text.itcm	00000044 usb_serial_peekchar
0000d980 g     F .text.itcm	0000000c __sfp_lock_acquire
0000dfa0 g     F .text.itcm	00000000 memchr
0000681c g     F .text.itcm	00000068 FatPartition::fatPut(unsigned long, unsigned long)
0000a5a4 g     F .text.itcm	000002f0 set_arm_clock
20007d6c g     O .bss	00000004 systick_cycle_count
20001a24 g     O .data	00000016 usb_string_serial_number_default
0000e244 g     F .text.itcm	0000020c _free_r
00007ef4 g     F .text.itcm	00000118 SharedSpiCard::erase(unsigned long, unsigned long)
00008358 g     F .text.itcm	00000066 SharedSpiCard::writeData(unsigned char, unsigned char const*)
00008da0 g     F .text.itcm	000000b8 SdioCard::readStop()
0000767c  w    F .text.itcm	00000004 SharedSpiCard::type() const
0000de64 g     F .text.itcm	0000000c __locale_mb_cur_max
00011938 g     F .text.itcm	00000016 _wcsrtombs_r
200062d8 g     O .bss	00000190 __atexit0
0000c014  w    F .text.itcm	00000004 usb_serial_class::flush()
0000800c g     F .text.itcm	00000080 SharedSpiCard::readSCR(scr_t*)
00003048 g     F .text.itcm	000000b0 ExFatFormatter::writeUpcase(unsigned long)
200019f8 g     O .data	00000004 __malloc_sbrk_base
0000c00c  w    F .text.itcm	00000004 usb_serial_class::read()
2000627c g     O .bss	00000008 AudioOutputI2SOct::dma
20007dc6 g     O .bss	00000002 I2S_32::block_offset
00007254 g     F .text.itcm	00000110 FatFile::remove()
0000b6fc  w    F .text.itcm	00000006 _lseek
0000b704  w    F .text.itcm	00000004 __cxa_pure_virtual
0000e898 g     F .text.itcm	000000f0 __lshift
00005ab4 g     F .text.itcm	000000e2 FatFile::mkdir(FatFile*, char const*, bool)
0000b3b8 g     F .text.itcm	00000030 usb_prepare_transfer
00007680  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000b52c g     F .text.itcm	00000180 unused_interrupt_vector
200061ac g     O .bss	00000004 AudioInputUSB::incoming_left
00011978 g     F .text.itcm	00000100 __ssprint_r
60001c68 g     F .text.code	00000130 tempmon_init
20007db0 g     O .bss	00000004 usb_timer0_callback
00006bd4 g     F .text.itcm	0000011c FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000db14 g     F .text.itcm	00000062 _vasnprintf_r
0000cd00  w    F .text.itcm	00000002 serialEvent()
200061dc g     O .bss	00000010 AudioOutputPWM::dma
0000e11c g     F .text.itcm	00000088 __register_exitproc
00003f50 g     F .text.itcm	000000f4 ExFatFile::open(ExFatFile*, char const*, int)
0000c360 g     F .text.itcm	00000046 AudioStream::receiveWritable(unsigned int)
0000dd74 g     F .text.itcm	0000008a strncmp
00006b10 g     F .text.itcm	000000c4 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
0000752c g     F .text.itcm	00000114 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)
00004a98 g     F .text.itcm	000000d2 ExFatFile::mkdir(ExFatFile*, char const*, bool)
000051d0 g     F .text.itcm	0000011c FatFormatter::makeFat16()
0000c478 g     F .text.itcm	00000028 AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)
0000a3ec g     F .text.itcm	00000070 usb_serial_flush_input
00004430 g     F .text.itcm	00000070 ExFatPartition::freeClusterCount()
20000ac8 g     O .data	0000000c vtable for I2S_32
0000e67c g     F .text.itcm	0000015c __multiply
0000a47c g     F .text.itcm	0000002c usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
000079c8 g     F .text.itcm	000001f8 SharedSpiCard::begin(SdSpiConfig)
20006234 g     O .bss	00000008 AudioOutputI2S2::dma
0000de00 g     F .text.itcm	00000064 strncpy
20006474 g     O .bss	00000028 __malloc_current_mallinfo
200061b4 g     O .bss	00000008 AudioInputI2S2::dma
20000924 g     O .data	00000070 SPIClass::spiclass_lpspi4_hardware
0000eb20 g     F .text.itcm	000000d4 __d2b
000083c0 g     F .text.itcm	00000068 SharedSpiCard::writeData(unsigned char const*)
20006214 g     O .bss	00000020 HardwareSerial::s_serials_with_serial_events
00008630  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001730 g     F .text.code	00000054 _reboot_Teensyduino_
0000cdc8 g     F .text.itcm	000000c8 IntervalTimer::beginCycles(void (*)(), unsigned long)
00008814  w    F .text.itcm	0000000e SdioCard::~SdioCard()
0000c478 g     F .text.itcm	00000028 AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)
00000b0c g     F .text.itcm	000000fc I2S_32::config_i2s()
60001788 g     F .text.code	00000002 startup_default_middle_hook
0000852c g     F .text.itcm	000000d8 DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00007cb0 g     F .text.itcm	00000074 SharedSpiCard::readRegister(unsigned char, void*)
00008c04 g     F .text.itcm	000000d4 SdioCard::writeStart(unsigned long)
0000aae0 g     F .text.itcm	00000740 usb_isr
0000d80c g     F .text.itcm	0000000c __cxa_atexit
000038d0 g     F .text.itcm	0000019e ExFatFile::read(void*, unsigned int)
0000c568 g     F .text.itcm	00000044 AudioStream::update_setup()
0000de70 g     F .text.itcm	00000024 _close_r
00007854 g     F .text.itcm	0000006e SharedSpiCard::readStop()
00000604  w    F .text.itcm	00000018 SDFile::peek()
00002de0 g     F .text.itcm	00000056 FsCache::sync()
200062a4 g     O .bss	00000008 AudioOutputPT8211_2::dma
200057d0 g     O .bss	00000050 SPI
0000db78 g     F .text.itcm	00000060 memcmp
200062b8 g     O .bss	00000004 I2S_32::block_right
20000a50  w    O .data	00000028 vtable for usb_serial_class
00009cc0 g     F .text.itcm	00000012 SdSpiArduinoDriver::send(unsigned char)
0000df94 g     F .text.itcm	00000002 __retarget_lock_close_recursive
00009d2c g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
20007d68 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
20005870 g     O .bss	00000050 SPI2
00012df0 g     F .text.itcm	000000cc __swsetup_r
000046ec g     F .text.itcm	0000005e ExFatFile::rmdir()
2000624c g     O .bss	00000008 AudioInputI2SHex::dma
00007dbc g     F .text.itcm	00000068 SharedSpiCard::readStart(unsigned long)
200015f0 g     O .data	00000408 __malloc_av_
200062d4 g     O .bss	00000004 __atexit
000006a8  w    F .text.itcm	00000014 SDFile::flush()
0000da20 g     F .text.itcm	00000022 __sread
200030e0 g     O .bss	00000020 rx_transfer
0000a510 g     F .text.itcm	00000094 usb_serial_flush_output
2000618c g     O .bss	00000008 AudioInputI2S::dma
0000d41c g     F .text.itcm	0000000c __malloc_lock
00002f54 g     F .text.itcm	00000018 FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))
200009c4 g     O .data	0000000c vtable for AudioOutputUSB
20001c00 g     O .data	000002c0 _VectorsRam
20007994 g     O .bss	00000368 queue1
00009cd4 g     F .text.itcm	0000004e SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00005048 g     F .text.itcm	000000d4 FatFormatter::initFatDir(unsigned char, unsigned long)
0001094c g     F .text.itcm	00000054 _fflush_r
00001bb4 g     F .text.itcm	0000003e AudioRecordQueue::update()
00010a60 g     F .text.itcm	00000078 _calloc_r
0000231c g     F .text.itcm	00000234 SPIClass::begin()
00006f0c g     F .text.itcm	00000298 FatFile::open(FatFile*, FatLfn_t*, int)
20001a3b g     O .data	00000001 yield_active_check_flags
00004884 g     F .text.itcm	0000005e ExFatFile::sync()
0000df98 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
20007dfa g     O .bss	00000001 usb_high_speed
00005f44 g     F .text.itcm	000001ea FatFile::rename(FatFile*, char const*)
00008b3c g     F .text.itcm	0000007c SdioCard::isBusy()
2000626c g     O .bss	00000008 AudioInputI2SQuad::dma
0000dcd0 g     F .text.itcm	000000a4 memset
0000c184 g     F .text.itcm	00000010 main
200061cc g     O .bss	00000008 AudioOutputI2S::dma
200064a0 g     O .bss	00000004 __malloc_max_total_mem
00004078 g     F .text.itcm	000000c0 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000df90 g     F .text.itcm	00000002 __retarget_lock_init_recursive
20205100 g     O .bss.dma	00000155 usb_descriptor_buffer
00008428 g     F .text.itcm	000000e8 SharedSpiCard::writeSector(unsigned long, unsigned char const*)
200062b4 g     O .bss	00000004 I2S_32::block_left
00004dc8 g     F .text.itcm	00000280 ExFatFile::write(void const*, unsigned int)
00002d40 g     F .text.itcm	000000a0 lbaToMbrChs(unsigned char*, unsigned long, unsigned long)
000058b4 g     F .text.itcm	00000052 FatFile::dirEntry(DirFat_t*)
0000076c  w    F .text.itcm	0000004c SDFile::available()
0000daa4 g     F .text.itcm	00000008 __sclose
0000bce8 g     F .text.itcm	00000058 usb_init_serialnumber
60001f8c g       .text.code	00000000 __init_array_end
00010c00 g     F .text.itcm	00000cec _dtoa_r
0000cebc g     F .text.itcm	00000560 _malloc_r
00007e24 g     F .text.itcm	00000068 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
20007de3 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000ebf4 g     F .text.itcm	0000001a __ascii_wctomb
20007df6 g     O .bss	00000001 usb_audio_sync_rshift
00000070  w    F .text.itcm	00000012 SDFile::isOpen()
00007364 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
200062c8 g     O .bss	00000004 FatVolume::m_cwv
20006254 g     O .bss	00000008 AudioInputI2SOct::dma
20000c1c  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000be30 g     F .text.itcm	00000084 EventResponder::triggerEventNotImmediate()
00002550 g     F .text.itcm	00000008 SPIClass::transfer(void const*, void*, unsigned int)
0000b4d8 g     F .text.itcm	00000054 micros
0000474c g     F .text.itcm	00000138 ExFatFile::syncDir()
0000808c g     F .text.itcm	00000082 SharedSpiCard::readSDS(sds_t*)
0000e1a4 g     F .text.itcm	000000a0 _malloc_trim_r
00012fd0 g     F .text.itcm	00000106 _wcsnrtombs_l
600020b8 g     O .text.progmem	00000004 string0
0000a4a8 g     F .text.itcm	00000018 usb_serial_write
6000178c  w    F .text.code	00000002 startup_late_hook
00008510 g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000c010  w    F .text.itcm	00000004 usb_serial_class::available()
60002376 g     O .text.progmem	00000001 _serialEvent_default
00006428 g     F .text.itcm	0000000c FatFile::sync()
000054b0 g     F .text.itcm	000000b4 FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)
00002844  w    F .text.itcm	0000003a SDClass::mkdir(char const*)
20000000 g     O .data	00000380 endpoint_queue_head
200065fc g     O .bss	00000080 dirName
6000207c  w    O .text.progmem	00000024 usb_string_product_name
0000b430 g     F .text.itcm	000000a8 delay
20007dca g     O .bss	00000002 dma_channel_allocated_mask
000037e4 g     F .text.itcm	00000022 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
000132f0 g     F .fini	00000000 _fini
00001ed8 g     F .text.itcm	0000002a TwoWire::write(unsigned char)
00007748 g     F .text.itcm	0000007e SharedSpiCard::isBusy()
20006284 g     O .bss	00000008 AudioOutputPT8211::dma
60001020 g     O .text.headers	0000000c BootData
200061d4 g     O .bss	00000008 AudioOutputMQS::dma
20007da0 g     O .bss	00000004 usb_audio_underrun_count
00004054 g     F .text.itcm	00000024 ExFatFile::openNext(ExFatFile*, int)
0000cce4 g     F .text.itcm	0000001c Print::printf(char const*, ...)
0000d9e0 g     F .text.itcm	00000040 sprintf
00001c0c g     F .text.itcm	00000048 AudioRecordQueue::clear()
00005894 g     F .text.itcm	0000001e FatFile::close()
0000b800 g     F .text.itcm	00000004 Panic_Temp_isr
000008dc  w    F .text.itcm	00000048 SDFile::~SDFile()
00005948 g     F .text.itcm	0000016a FatFile::mkdir(FatFile*, FatLfn_t*)
000130d8 g     F .text.itcm	00000024 _wcsnrtombs_r
00008810  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000005ec  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
00000848  w    F .text.itcm	00000054 File::write(unsigned char)
0000df10 g     F .text.itcm	0000002c _write_r
0000cae0 g     F .text.itcm	000000e8 usb_audio_configure
00000120 g     F .text.itcm	0000009c I2S_32::update()
20005300 g     O .bss	000004d0 SD
000098a8 g     F .text.itcm	00000144 SdioCard::erase(unsigned long, unsigned long)
20007de4 g     O .bss	00000001 I2S_32::update_responsibility
0000c2b0 g     F .text.itcm	00000050 AudioStream::release(audio_block_struct*)
20003100 g     O .bss	00000020 sync_transfer
20001a0c g     O .data	00000004 _impure_ptr
20000b30  w    O .data	00000024 vtable for Stream
00003a70 g     F .text.itcm	0000002c ExFatFile::peek()
0001081c g     F .text.itcm	00000130 __sflush_r
20000994  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
20006264 g     O .bss	00000008 AudioOutputSPDIF::dma
200058c4 g     O .bss	00000140 Wire
000006d0  w    F .text.itcm	00000014 SDFile::write(void const*, unsigned int)
0000c300 g     F .text.itcm	00000046 AudioStream::transmit(audio_block_struct*, unsigned char)
00007640 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000d998 g     F .text.itcm	00000046 _fwalk_sglue
00008758 g     F .text.itcm	0000000c SdioCard::errorCode() const
00005c90 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
000006bc  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
60001f10 g       .text.code	00000000 __preinit_array_end
2000619c g     O .bss	00000008 AudioInputTDM::dma
00000d70 g     F .text.itcm	00000090 newFileName(char*)
2000623c g     O .bss	00000008 AudioOutputTDM2::dma
00004230 g     F .text.itcm	00000036 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000e450 g     F .text.itcm	0000002a __ascii_mbtowc
0000c204 g     F .text.itcm	000000ac AudioStream::allocate()
2000773c g     O .bss	00000200 header
000069f0 g     F .text.itcm	00000120 FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
0000aab4 g     F .text.itcm	0000002c usb_stop_sof_interrupts
00001ebc  w    F .text.itcm	00000018 TwoWire::peek()
00001ed4  w    F .text.itcm	00000002 TwoWire::flush()
00001538 g     F .text.itcm	00000048 setup
20001294 g     O .data	0000006c usb_descriptor_list
00008bb8 g     F .text.itcm	00000020 SdioCard::status()
00005928 g     F .text.itcm	00000020 FatFile::getModifyDateTime(unsigned short*, unsigned short*)
0000b2e8 g     F .text.itcm	00000064 usb_config_rx_iso
0000006c  w    F .text.itcm	00000002 Print::flush()
00001c54 g     F .text.itcm	0000003a AudioRecordQueue::readBuffer()
20007958 g     O .bss	00000014 patchCord1
20007980 g     O .bss	00000014 patchCord4
00002738  w    F .text.itcm	00000052 SDClass::rmdir(char const*)
00005d30 g     F .text.itcm	000001a8 FatFile::read(void*, unsigned int)
00005cf8 g     F .text.itcm	00000036 FatFile::openRoot(FatVolume*)
20006188 g     O .bss	00000004 ExFatVolume::m_cwv
20068000 g       .text.csf	00000000 _estack
00007668 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000bfd0 g     F .text.itcm	00000034 DMAChannel::release()
000004ac  w    F .text.itcm	00000058 File::read()
00001c90 g     F .text.itcm	00000016 AudioRecordQueue::freeBuffer()
0000a4c0 g     F .text.itcm	00000050 usb_serial_write_buffer_free
0000c3a8 g     F .text.itcm	000000d0 AudioConnection::connect()
20001a00 g     O .data	0000000c __sglue
20006194 g     O .bss	00000008 AudioInputPDM::dma
0000a1c4 g     F .text.itcm	000000ec usb_serial_configure
00001f04 g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
20007de0 g     O .bss	00000001 AudioInputUSB::receive_flag
00000a5c  w    F .text.itcm	000000b0 File::~File()
0000ccd4  w    F .text.itcm	0000000e _write
200061bc g     O .bss	00000008 AudioInputPDM2::dma
20001ec0 g       .data	00000000 _edata
00004330 g     F .text.itcm	00000040 ExFatPartition::fatPut(unsigned long, unsigned long)
20007de8 g     O .bss	00000001 external_psram_size
00008810  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000044a0 g     F .text.itcm	000000ec ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
00007688  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
000082b8 g     F .text.itcm	000000a0 DedicatedSpiCard::setDedicatedSpi(bool)
0000370c g     F .text.itcm	00000064 ExFatFile::hashName(ExName_t*)
20001460 g     O .data	0000000c AudioInputUSB::features
000057fc g     F .text.itcm	00000078 FatFile::addDirCluster()
00012ebc g     F .text.itcm	000000aa __fputwc
0000c018  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
20001470 g     O .data	00000004 I2S_32::shift
00002058 g     F .text.itcm	0000000c lpi2c1_isr()
0000cd0c g     F .text.itcm	00000062 ultoa
000025e8  w    F .text.itcm	00000002 SDClass::~SDClass()
00007418 g     F .text.itcm	000000a0 FsBaseFile::open(FsVolume*, char const*, int)
0000da44 g     F .text.itcm	0000003e __swrite
0000cd04 g     F .text.itcm	00000004 operator new(unsigned int)
0000beb4 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
200019fc g     O .data	00000004 __malloc_trim_threshold
0000c4a0 g     F .text.itcm	00000094 AudioConnection::disconnect()
0000c008  w    F .text.itcm	00000004 usb_serial_class::peek()
00008634  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
00007bc0 g     F .text.itcm	00000078 SharedSpiCard::cardCMD6(unsigned long, unsigned char*)
00011950 g     F .text.itcm	00000028 fiprintf
0000c97c g     F .text.itcm	00000104 usb_audio_transmit_callback
00011af0 g     F .text.itcm	00000f8c _vfiprintf_r
000019cc  w    F .text.itcm	00000110 SPIClass::beginTransaction(SPISettings)
0000e9cc g     F .text.itcm	00000154 __mdiff
000087b8 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
200008b4 g     O .data	00000070 SPIClass::spiclass_lpspi3_hardware
00004268 g     F .text.itcm	00000082 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00002138 g     F .text.itcm	000000dc _spi_dma_rxISR1()
20006274 g     O .bss	00000008 AudioOutputI2SHex::dma
20001320 g     O .data	00000120 _impure_data
00003b88 g     F .text.itcm	000003c6 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
20007dbc g     O .bss	00000002 AudioStream::cpu_cycles_total
0000d98c g     F .text.itcm	0000000c __sfp_lock_release
00008da0 g     F .text.itcm	000000b8 SdioCard::writeStop()
000037ac g     F .text.itcm	00000014 ExFatFile::close()
20000cdc g     O .data	00000101 _ctype_
0000b6e0  w    F .text.itcm	00000004 _read
60001f10 g       .text.code	00000000 __init_array_start
20001444 g     O .data	00000004 F_BUS_ACTUAL
2000767c g     O .bss	00000004 disk_count
00002fbc g     F .text.itcm	00000040 ExFatFormatter::writeUpcaseByte(unsigned char)
0000278c  w    F .text.itcm	00000064 SDClass::rename(char const*, char const*)
000087c8 g     F .text.itcm	00000014 SdioCard::readSCR(scr_t*)
0000c194  w    F .text.itcm	0000000c AudioStream::update_all()
000130fc g     F .text.itcm	000000d8 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000bf1c g     F .text.itcm	000000b4 DMAChannel::begin(bool)
2000146c g     O .data	00000004 IntervalTimer::nvic_priorites
0000769c g     F .text.itcm	0000001e SharedSpiCard::end()
0000e040 g     F .text.itcm	000000dc strlen
00005ca0 g     F .text.itcm	00000056 FatFile::openCluster(FatFile*)
000061c0 g     F .text.itcm	000000ae FatFile::seekSet(unsigned long)
6000207c g     O .text.progmem	00000024 usb_string_product_name_default
2000629c g     O .bss	00000008 AudioOutputI2SQuad::dma
0000daf8 g     F .text.itcm	0000001c vdprintf
00008840 g     F .text.itcm	00000060 SdioCard::sectorCount()
000087dc g     F .text.itcm	00000034 SdioCard::readSDS(sds_t*)
0000635c g     F .text.itcm	000000ca FatFile::openNext(FatFile*, int)
20006200 g     O .bss	00000004 AudioOutputUSB::right_2nd
60001788  w    F .text.code	00000002 startup_middle_hook
20000ba8 g     O .data	00000074 vtable for SdioCard
00005708 g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
60001790 g     F .text.code	000000f8 configure_cache
0000862c  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
0000c02c g     F .text.itcm	00000158 breakTime(unsigned long, DateTimeFields&)
00008188  w    F .text.itcm	00000076 SharedSpiCard::readCSD(csd_t*)
2000628c g     O .bss	00000008 AudioOutputSPDIF2::dma
00000cd8 g     F .text.itcm	00000098 newDirectory(char*)
0000970c g     F .text.itcm	000000d4 SdioCard::readStart(unsigned long)
0000b34c g     F .text.itcm	0000006c usb_config_tx_iso
20006244 g     O .bss	00000008 AudioInputAnalog::dma
20007dbe g     O .bss	00000002 AudioStream::cpu_cycles_total_max
00009bf0 g     F .text.itcm	00000012 SdSpiArduinoDriver::activate()
60001f10 g       .text.code	00000000 __preinit_array_start
0000b410 g     F .text.itcm	0000001c usb_receive
200009b8  w    O .data	0000000c vtable for AudioStream
00004138 g     F .text.itcm	000000aa ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
0000e5c0 g     F .text.itcm	00000060 __lo0bits
000041e4 g     F .text.itcm	0000004c ExFatPartition::chainSize(unsigned long)
00006270 g     F .text.itcm	000000ea FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00018400 g       *ABS*	00000000 _flashimagelen
00006434 g     F .text.itcm	000000d8 FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
000078c4 g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000ce90 g     F .text.itcm	0000000a __aeabi_atexit
0000b70c g     F .text.itcm	00000024 rtc_get
00004638 g     F .text.itcm	000000b4 ExFatFile::remove()
000109a8 g     F .text.itcm	00000078 frexp
70000000 g       .bss.extram	00000000 _extram_start
0000bef8 g     F .text.itcm	00000004 pendablesrvreq_isr
000029a8  w    F .text.itcm	0000003c SDClass::totalSize()
2000625c g     O .bss	00000008 AudioInputSPDIF3::dma
0000c534 g     F .text.itcm	00000034 AudioConnection::~AudioConnection()
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
20001484 g     O .data	0000016c __global_locale
00009074 g     F .text.itcm	0000059c SdioCard::begin(SdioConfig)
00001d20 g     F .text.itcm	00000170 breakTime(long long, tmElements_t&)
000037c0 g     F .text.itcm	00000022 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000a2b0 g     F .text.itcm	000000e0 usb_serial_read
20006470 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000b284 g     F .text.itcm	00000064 usb_config_tx
0000b6e4  w    F .text.itcm	00000006 _close
000067f8 g     F .text.itcm	00000024 FatPartition::fatGet(unsigned long, unsigned long*)
0000ceac g     F .text.itcm	00000010 free
00003624 g     F .text.itcm	00000064 ExFatFile::cmpName(DirName_t const*, ExName_t*)
0000e4dc g     F .text.itcm	000000a4 __multadd
0000e4c8 g     F .text.itcm	00000012 _Bfree
00000520  w    F .text.itcm	0000001a SDFile::size()
00005590 g     F .text.itcm	00000094 FatFile::getSFN(char*, unsigned int)
0000089c  w    F .text.itcm	00000040 SDFile::~SDFile()
20001a24  w    O .data	00000016 usb_string_serial_number
000099ec g     F .text.itcm	00000110 SdioCard::readSector(unsigned long, unsigned char*)
00008794 g     F .text.itcm	00000024 SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	cmp	r0, r1
60001402:	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	cmp	r0, r2
60001406:	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	ldr.w	r3, [r1], #4
6000140c:	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	cmp	r2, r0
60001412:	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	bx	lr
60001416:	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	cmp	r0, r1
6000141a:	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	movs	r3, #0
6000141e:	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	cmp	r1, r0
60001424:	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	bx	lr

60001428 <ResetHandler>:
{
60001428:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000142c:	ldr	r2, [pc, #416]	; (600015d0 <ResetHandler+0x1a8>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000142e:	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001432:	ldr	r3, [pc, #416]	; (600015d4 <ResetHandler+0x1ac>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001434:	ldr	r0, [pc, #416]	; (600015d8 <ResetHandler+0x1b0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001436:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001438:	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143a:	ldr	r2, [pc, #416]	; (600015dc <ResetHandler+0x1b4>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000143c:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143e:	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001440:	dsb	sy
	__asm__ volatile("isb":::"memory");
60001444:	isb	sy
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001448:	bl	60001784 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000144c:	movs	r4, #8
6000144e:	ldr	r3, [pc, #400]	; (600015e0 <ResetHandler+0x1b8>)
	memory_copy(&_stext, &_stextload, &_etext);
60001450:	ldr	r2, [pc, #400]	; (600015e4 <ResetHandler+0x1bc>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001452:	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
60001456:	ldr	r1, [pc, #400]	; (600015e8 <ResetHandler+0x1c0>)
60001458:	ldr	r0, [pc, #400]	; (600015ec <ResetHandler+0x1c4>)
6000145a:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
6000145e:	ldr	r2, [pc, #400]	; (600015f0 <ResetHandler+0x1c8>)
60001460:	ldr	r1, [pc, #400]	; (600015f4 <ResetHandler+0x1cc>)
60001462:	ldr	r0, [pc, #404]	; (600015f8 <ResetHandler+0x1d0>)
60001464:	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001468:	ldr	r1, [pc, #400]	; (600015fc <ResetHandler+0x1d4>)
6000146a:	ldr	r0, [pc, #404]	; (60001600 <ResetHandler+0x1d8>)
6000146c:	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001470:	ldr	r4, [pc, #400]	; (60001604 <ResetHandler+0x1dc>)
60001472:	mov.w	r1, #3758153728	; 0xe000e000
60001476:	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	movs	r3, #0
6000147c:	ldr	r2, [pc, #392]	; (60001608 <ResetHandler+0x1e0>)
	SCB_CPACR = 0x00F00000;
6000147e:	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001482:	str.w	r2, [r4, r3, lsl #2]
60001486:	adds	r3, #1
60001488:	cmp	r3, #176	; 0xb0
6000148a:	bne.n	60001482 <ResetHandler+0x5a>
6000148c:	ldr	r3, [pc, #380]	; (6000160c <ResetHandler+0x1e4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000148e:	movs	r1, #128	; 0x80
60001490:	ldr	r2, [pc, #380]	; (60001610 <ResetHandler+0x1e8>)
60001492:	strb.w	r1, [r3], #1
60001496:	cmp	r3, r2
60001498:	bne.n	60001492 <ResetHandler+0x6a>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000149a:	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149e:	ldr	r6, [pc, #320]	; (600015e0 <ResetHandler+0x1b8>)
600014a0:	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014a4:	ldr.w	fp, [pc, #404]	; 6000163c <ResetHandler+0x214>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a8:	ldr.w	sl, [pc, #404]	; 60001640 <ResetHandler+0x218>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ac:	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014b0:	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014b4:	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b6:	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ba:	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014be:	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014c2:	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c6:	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ca:	ldr.w	r8, [pc, #376]	; 60001644 <ResetHandler+0x21c>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014ce:	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014d2:	ldr	r2, [pc, #256]	; (600015d4 <ResetHandler+0x1ac>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d4:	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d8:	ldr.w	r3, [r8, #28]
600014dc:	bic.w	r3, r3, #127	; 0x7f
600014e0:	orr.w	r3, r3, #64	; 0x40
600014e4:	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014e8:	ldr.w	r3, [r8, #36]	; 0x24
600014ec:	bic.w	r3, r3, #127	; 0x7f
600014f0:	orr.w	r3, r3, #64	; 0x40
600014f4:	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fa:	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fc:	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014fe:	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001500:	bl	60001790 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001504:	ldr	r3, [pc, #268]	; (60001614 <ResetHandler+0x1ec>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001506:	ldr	r1, [pc, #272]	; (60001618 <ResetHandler+0x1f0>)
	_VectorsRam[14] = pendablesrvreq_isr;
60001508:	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #272]	; (6000161c <ResetHandler+0x1f4>)
6000150c:	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	; 0x63
60001510:	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001512:	movs	r3, #3
	SYST_CVR = 0;
60001514:	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001516:	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001518:	ldr	r3, [pc, #260]	; (60001620 <ResetHandler+0x1f8>)
6000151a:	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000151e:	ldr.w	r3, [r5, #3580]	; 0xdfc
60001522:	orr.w	r3, r3, #16777216	; 0x1000000
60001526:	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152a:	ldr	r3, [pc, #248]	; (60001624 <ResetHandler+0x1fc>)
6000152c:	ldr	r2, [r3, #0]
6000152e:	orr.w	r2, r2, #1
60001532:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001534:	ldr	r3, [r3, #4]
60001536:	str	r3, [r1, #0]
	usb_pll_start();	
60001538:	bl	60001c0c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000153c:	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001540:	ldr	r0, [pc, #228]	; (60001628 <ResetHandler+0x200>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001542:	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001546:	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154a:	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
6000154e:	bl	60001ed0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001552:	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001556:	ldr	r3, [pc, #212]	; (6000162c <ResetHandler+0x204>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	ldr	r2, [pc, #212]	; (60001630 <ResetHandler+0x208>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000155a:	orr.w	r1, r1, #12288	; 0x3000
6000155e:	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001562:	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001564:	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001568:	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156c:	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001570:	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001574:	ldr	r3, [r2, #56]	; 0x38
60001576:	lsls	r3, r3, #31
60001578:	bmi.n	6000158c <ResetHandler+0x164>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000157a:	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157e:	ldr	r1, [pc, #180]	; (60001634 <ResetHandler+0x20c>)
60001580:	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001582:	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001584:	ldr	r3, [r2, #56]	; 0x38
60001586:	orr.w	r3, r3, #1
6000158a:	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158c:	ldr	r2, [pc, #160]	; (60001630 <ResetHandler+0x208>)
6000158e:	ldr	r4, [pc, #168]	; (60001638 <ResetHandler+0x210>)
60001590:	ldr	r3, [r2, #8]
60001592:	orr.w	r3, r3, #65537	; 0x10001
60001596:	str	r3, [r2, #8]
	configure_external_ram();
60001598:	bl	60001888 <configure_external_ram>
	analog_init();
6000159c:	bl	60001e60 <analog_init>
	pwm_init();
600015a0:	bl	60001ec8 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001c68 <tempmon_init>
	startup_middle_hook();
600015a8:	bl	60001788 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler+0x184>
	usb_init();
600015b2:	bl	60001648 <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	; 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler+0x18e>
	startup_late_hook();
600015be:	bl	6000178c <startup_default_late_hook>
	__libc_init_array();
600015c2:	bl	60001ec0 <____libc_init_array_veneer>
	main();
600015c6:	bl	60001ef8 <__main_veneer>
	while (1) asm("WFI");
600015ca:	wfi
600015cc:	b.n	600015ca <ResetHandler+0x1a2>
600015ce:	nop
600015d0:	.word	0xaaaaaabf
600015d4:	.word	0x400ac000
600015d8:	.word	0x00200007
600015dc:	.word	0x20068000
600015e0:	.word	0x400d8000
600015e4:	.word	0x000132f8
600015e8:	.word	0x60002378
600015ec:	.word	0x00000000
600015f0:	.word	0x20001ec0
600015f4:	.word	0x60015674
600015f8:	.word	0x20000000
600015fc:	.word	0x20007e20
60001600:	.word	0x20001ec0
60001604:	.word	0x20001c00
60001608:	.word	0x0000b52d
6000160c:	.word	0xe000e400
60001610:	.word	0xe000e4a0
60001614:	.word	0x0000bef9
60001618:	.word	0x20007d6c
6000161c:	.word	0x0000befd
60001620:	.word	0x20200000
60001624:	.word	0xe0001000
60001628:	.word	0x016e3600
6000162c:	.word	0x40084000
60001630:	.word	0x400d4000
60001634:	.word	0x56c00000
60001638:	.word	0x20007d70
6000163c:	.word	0x2018101b
60001640:	.word	0x13110d0c
60001644:	.word	0x400fc000

60001648 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001648:	ldr	r3, [pc, #196]	; (60001710 <usb_init+0xc8>)
6000164a:	movw	r2, #3937	; 0xf61
{
6000164e:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001650:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001654:	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001658:	bl	60001f08 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000165c:	ldr	r2, [pc, #180]	; (60001714 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
6000165e:	ldr	r1, [pc, #184]	; (60001718 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001660:	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001664:	ldr	r0, [pc, #180]	; (6000171c <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001666:	orr.w	r3, r3, #3
6000166a:	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000166e:	ldr	r3, [pc, #176]	; (60001720 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001670:	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001674:	ldr	r2, [r0, #0]
60001676:	tst	r2, r3
60001678:	bne.n	60001682 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000167a:	ldr.w	r3, [r1, #424]	; 0x1a8
6000167e:	lsls	r2, r3, #30
60001680:	beq.n	600016ba <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001682:	ldr	r2, [pc, #148]	; (60001718 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001684:	mov.w	r1, #2147483648	; 0x80000000
60001688:	ldr	r3, [pc, #144]	; (6000171c <usb_init+0xd4>)
6000168a:	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000168c:	ldr.w	r3, [r2, #320]	; 0x140
60001690:	orr.w	r3, r3, #2
60001694:	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001698:	ldr.w	r3, [r2, #320]	; 0x140
6000169c:	lsls	r3, r3, #30
6000169e:	bmi.n	60001698 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016a0:	mov.w	r0, #131072	; 0x20000
600016a4:	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016a8:	ldr	r3, [pc, #112]	; (6000171c <usb_init+0xd4>)
600016aa:	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016ae:	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016b2:	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016b4:	str	r2, [r3, #56]	; 0x38
		delay(25);
600016b6:	bl	60001ed8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016ba:	ldr	r2, [pc, #96]	; (6000171c <usb_init+0xd4>)
600016bc:	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016c0:	ldr	r4, [pc, #84]	; (60001718 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600016c2:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016c4:	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016c6:	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016c8:	ldr	r3, [pc, #88]	; (60001724 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600016ca:	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016cc:	mov.w	r2, #896	; 0x380
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016d0:	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016d4:	mov	r0, r3
600016d6:	bl	60001ee8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600016da:	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016de:	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016e0:	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016e4:	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016e8:	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600016ea:	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600016ee:	str	r2, [r3, #64]	; 0x40
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600016f0:	ldr	r3, [pc, #52]	; (60001728 <usb_init+0xe0>)
600016f2:	ldr	r2, [pc, #56]	; (6000172c <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016f4:	str.w	r1, [r4, #328]	; 0x148
600016f8:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600016fc:	mov.w	r2, #3758153728	; 0xe000e000
60001700:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001704:	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001706:	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
6000170a:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
6000170e:	pop	{r4, pc}
60001710:	.word	0x400d8000
60001714:	.word	0x400fc000
60001718:	.word	0x402e0000
6000171c:	.word	0x400d9000
60001720:	.word	0x001e1c00
60001724:	.word	0x20000000
60001728:	.word	0x20001c00
6000172c:	.word	0x0000aae1

60001730 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001730:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001732:	ldr	r3, [pc, #56]	; (6000176c <_reboot_Teensyduino_+0x3c>)
60001734:	ldr	r3, [r3, #96]	; 0x60
60001736:	lsls	r3, r3, #30
60001738:	bmi.n	6000173c <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
6000173a:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
6000173c:	cpsid	i
		USB1_USBCMD = 0;
6000173e:	ldr	r3, [pc, #48]	; (60001770 <_reboot_Teensyduino_+0x40>)
60001740:	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001742:	ldr	r2, [pc, #48]	; (60001774 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001744:	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001748:	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000174c:	ldr	r1, [pc, #40]	; (60001778 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000174e:	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001752:	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001754:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001756:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000175a:	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
6000175e:	ldr	r0, [pc, #28]	; (6000177c <_reboot_Teensyduino_+0x4c>)
60001760:	ldr	r2, [pc, #28]	; (60001780 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001762:	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001764:	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001766:	ldr	r3, [r3, #8]
60001768:	blx	r3
	}
	__builtin_unreachable();
6000176a:	nop
6000176c:	.word	0x401f4400
60001770:	.word	0x402e0000
60001774:	.word	0x400ac000
60001778:	.word	0x00200003
6000177c:	.word	0x20208000
60001780:	.word	0xeb120000

60001784 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001784:	bx	lr
60001786:	nop

60001788 <startup_default_middle_hook>:
60001788:	bx	lr
6000178a:	nop

6000178c <startup_default_late_hook>:
6000178c:	bx	lr
6000178e:	nop

60001790 <configure_cache>:
{
60001790:	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001792:	mov.w	r3, #3758153728	; 0xe000e000
60001796:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001798:	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000179a:	ldr	r0, [pc, #172]	; (60001848 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000179c:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017a0:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017a4:	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017a6:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017aa:	ldr	r0, [pc, #160]	; (6000184c <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017ac:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017b0:	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017b2:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017b6:	ldr	r0, [pc, #152]	; (60001850 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017b8:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017bc:	ldr	r2, [pc, #148]	; (60001854 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017be:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017c2:	ldr	r4, [pc, #148]	; (60001858 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017c4:	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017c8:	ldr	r0, [pc, #144]	; (6000185c <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017ca:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017ce:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017d2:	ldr	r4, [pc, #140]	; (60001860 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017d4:	ldr	r0, [pc, #140]	; (60001864 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017d6:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017da:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017de:	ldr	r4, [pc, #136]	; (60001868 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017e0:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017e4:	ldr	r0, [pc, #132]	; (6000186c <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017e6:	ldr	r2, [pc, #136]	; (60001870 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017e8:	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017ec:	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017f0:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017f4:	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017f8:	ldr	r4, [pc, #120]	; (60001874 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017fa:	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600017fc:	ldr	r0, [pc, #120]	; (60001878 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017fe:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001802:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001806:	ldr	r2, [pc, #116]	; (6000187c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001808:	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000180c:	ldr	r4, [pc, #112]	; (60001880 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000180e:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001812:	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001814:	ldr	r0, [pc, #108]	; (60001884 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001816:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000181a:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000181e:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001822:	dsb	sy
	asm("isb");
60001826:	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000182a:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000182e:	dsb	sy
	asm("isb");
60001832:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001836:	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000183a:	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000183e:	orr.w	r2, r2, #196608	; 0x30000
60001842:	str.w	r2, [r3, #3348]	; 0xd14
}
60001846:	bx	lr
60001848:	.word	0x1000003f
6000184c:	.word	0x03080025
60001850:	.word	0x00100009
60001854:	.word	0x20007e20
60001858:	.word	0x00200013
6000185c:	.word	0x07020021
60001860:	.word	0x20000014
60001864:	.word	0x13080025
60001868:	.word	0x10000009
6000186c:	.word	0x20200016
60001870:	.word	0x130b0027
60001874:	.word	0x40000017
60001878:	.word	0x60000018
6000187c:	.word	0x070b002f
60001880:	.word	0x70000019
60001884:	.word	0x130b002f

60001888 <configure_external_ram>:
{
60001888:	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000188a:	ldr	r3, [pc, #736]	; (60001b6c <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
6000188c:	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000188e:	ldr	r6, [pc, #736]	; (60001b70 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001890:	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001892:	ldr	r7, [pc, #736]	; (60001b74 <configure_external_ram+0x2ec>)
{
60001894:	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001896:	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000189a:	ldr	r1, [pc, #732]	; (60001b78 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000189c:	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018a0:	ldr	r5, [pc, #728]	; (60001b7c <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018a2:	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018a6:	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018aa:	ldr	r4, [pc, #724]	; (60001b80 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018ac:	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b0:	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b4:	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b8:	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018bc:	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600018c0:	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600018c4:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600018c6:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600018c8:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600018ca:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600018cc:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600018ce:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600018d2:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600018d6:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018da:	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018de:	ldr	r2, [pc, #676]	; (60001b84 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600018e0:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600018e4:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600018e8:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600018ec:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600018f0:	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018f4:	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600018f6:	ldr	r3, [pc, #656]	; (60001b88 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018f8:	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600018fa:	ldr	r0, [pc, #656]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600018fc:	ldr	r1, [pc, #656]	; (60001b90 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600018fe:	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001900:	ldr	r2, [pc, #656]	; (60001b94 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001902:	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001904:	ldr.w	r3, [r4, #132]	; 0x84
60001908:	orr.w	r3, r3, #12
6000190c:	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001910:	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001914:	ldr	r3, [r0, #0]
60001916:	orr.w	r3, r3, #2
6000191a:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000191c:	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000191e:	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001920:	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001924:	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001926:	ldr	r3, [pc, #624]	; (60001b98 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001928:	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000192a:	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000192c:	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000192e:	ldr	r4, [pc, #620]	; (60001b9c <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001930:	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001932:	ldr	r2, [pc, #620]	; (60001ba0 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001934:	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001938:	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000193a:	ldr	r3, [r0, #12]
6000193c:	bic.w	r3, r3, #120	; 0x78
60001940:	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001942:	ldr	r3, [r0, #32]
60001944:	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001946:	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001948:	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000194a:	ldr	r3, [r0, #32]
6000194c:	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000194e:	ldr	r2, [pc, #596]	; (60001ba4 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001950:	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001952:	ldr	r4, [pc, #596]	; (60001ba8 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001954:	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001956:	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001958:	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
6000195a:	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
6000195c:	ldr.w	r3, [r1, #184]	; 0xb8
60001960:	bic.w	r3, r3, #63	; 0x3f
60001964:	orr.w	r3, r3, #1
60001968:	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000196c:	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001970:	ldr	r1, [pc, #568]	; (60001bac <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001972:	bic.w	r3, r3, #63	; 0x3f
60001976:	orr.w	r3, r3, #1
6000197a:	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000197e:	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001982:	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001984:	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001986:	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001988:	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
6000198c:	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000198e:	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001990:	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001992:	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001996:	ldr	r3, [r0, #0]
60001998:	bic.w	r3, r3, #2
6000199c:	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000199e:	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019a0:	ldr	r3, [pc, #524]	; (60001bb0 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019a2:	ldr	r1, [pc, #528]	; (60001bb4 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019a4:	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019a6:	str.w	r2, [r3], #4
600019aa:	cmp	r3, r1
600019ac:	bne.n	600019a6 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019ae:	ldr	r2, [pc, #476]	; (60001b8c <configure_external_ram+0x304>)
600019b0:	ldr	r3, [r2, #0]
600019b2:	orr.w	r3, r3, #1
600019b6:	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600019b8:	ldr	r3, [r2, #0]
600019ba:	ands.w	r3, r3, #1
600019be:	bne.n	600019b8 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019c0:	ldr	r0, [pc, #488]	; (60001bac <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019c2:	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019c4:	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019c8:	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019ca:	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019ce:	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019d0:	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019d4:	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600019d8:	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019dc:	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600019e0:	ldr	r1, [pc, #468]	; (60001bb8 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019e2:	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600019e6:	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600019ea:	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600019ee:	ldr	r0, [pc, #460]	; (60001bbc <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600019f0:	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600019f4:	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600019f8:	ldr	r4, [pc, #452]	; (60001bc0 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600019fa:	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600019fe:	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a02:	ldr	r1, [pc, #448]	; (60001bc4 <configure_external_ram+0x33c>)
60001a04:	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a08:	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a0a:	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a0e:	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a12:	ldr	r0, [pc, #376]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a14:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a18:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a1c:	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a20:	ldr	r3, [r0, #20]
60001a22:	lsls	r2, r3, #31
60001a24:	bpl.n	60001a20 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a26:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a28:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a2a:	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a2e:	ldr	r1, [pc, #348]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a30:	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001a32:	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a36:	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a3a:	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a3e:	ldr	r3, [r1, #20]
60001a40:	lsls	r3, r3, #31
60001a42:	bpl.n	60001a3e <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a44:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a46:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a48:	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a4c:	ldr	r2, [pc, #316]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a4e:	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a50:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a54:	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a58:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a5c:	ldr	r3, [r2, #20]
60001a5e:	lsls	r7, r3, #31
60001a60:	bpl.n	60001a5c <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a62:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a64:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a66:	ldr	r0, [pc, #352]	; (60001bc8 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a68:	ldr	r1, [pc, #288]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a6a:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a6c:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a70:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a74:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a78:	ldr	r3, [r1, #20]
60001a7a:	lsls	r6, r3, #31
60001a7c:	bpl.n	60001a78 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001a7e:	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001a82:	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a86:	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a88:	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a8a:	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001a8c:	cmp	r3, r2
60001a8e:	bne.n	60001b5c <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001a90:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a92:	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a96:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a98:	ldr	r0, [pc, #240]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a9a:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a9e:	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aa2:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aa6:	ldr	r3, [r0, #20]
60001aa8:	lsls	r5, r3, #31
60001aaa:	bpl.n	60001aa6 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aac:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001aae:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab2:	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab4:	ldr	r2, [pc, #212]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ab6:	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001ab8:	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001abc:	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac0:	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac4:	ldr	r3, [r2, #20]
60001ac6:	lsls	r4, r3, #31
60001ac8:	bpl.n	60001ac4 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aca:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001acc:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ad0:	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ad4:	ldr	r1, [pc, #180]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ad6:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001ad8:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001adc:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ae0:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ae4:	ldr	r3, [r1, #20]
60001ae6:	lsls	r0, r3, #31
60001ae8:	bpl.n	60001ae4 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aea:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001aec:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001af0:	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af4:	ldr	r2, [pc, #148]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001af6:	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001af8:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001afc:	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b00:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b04:	ldr	r3, [r2, #20]
60001b06:	lsls	r1, r3, #31
60001b08:	bpl.n	60001b04 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b0a:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b0c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b10:	ldr	r0, [pc, #180]	; (60001bc8 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b12:	ldr	r1, [pc, #120]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b14:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b16:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b1a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b1e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b22:	ldr	r3, [r1, #20]
60001b24:	lsls	r2, r3, #31
60001b26:	bpl.n	60001b22 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001b28:	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b2c:	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b30:	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001b32:	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b34:	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b36:	cmp	r3, r2
60001b38:	beq.n	60001bdc <configure_external_ram+0x354>
60001b3a:	movs	r5, #8
60001b3c:	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001b40:	ldr	r1, [pc, #136]	; (60001bcc <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b42:	movs	r0, #0
			external_psram_size * 0x100000 -
60001b44:	ldr	r3, [pc, #136]	; (60001bd0 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001b46:	ldr	r2, [pc, #140]	; (60001bd4 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b48:	str	r0, [sp, #0]
			external_psram_size = 16;
60001b4a:	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001b4c:	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b4e:	movs	r3, #1
60001b50:	ldr	r0, [pc, #132]	; (60001bd8 <configure_external_ram+0x350>)
60001b52:	add	r2, r4
60001b54:	bl	60001f00 <__sm_set_pool_veneer>
}
60001b58:	add	sp, #12
60001b5a:	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b5c:	ldr	r3, [pc, #120]	; (60001bd8 <configure_external_ram+0x350>)
60001b5e:	movs	r2, #0
60001b60:	strd	r2, r2, [r3]
60001b64:	strd	r2, r2, [r3, #8]
}
60001b68:	add	sp, #12
60001b6a:	pop	{r4, r5, r6, r7, pc}
60001b6c:	.word	0x401f8000
60001b70:	.word	0x0001b0f9
60001b74:	.word	0x000110f9
60001b78:	.word	0x401f8400
60001b7c:	.word	0x000170f9
60001b80:	.word	0x400fc000
60001b84:	.word	0x1ffffcff
60001b88:	.word	0xa0000300
60001b8c:	.word	0x402a4000
60001b90:	.word	0x402a8000
60001b94:	.word	0xffff0012
60001b98:	.word	0x00f737ff
60001b9c:	.word	0x80000040
60001ba0:	.word	0x7cf0ff00
60001ba4:	.word	0x830f00ff
60001ba8:	.word	0x00020063
60001bac:	.word	0x5af05af0
60001bb0:	.word	0x402a4200
60001bb4:	.word	0x402a4300
60001bb8:	.word	0x3018049f
60001bbc:	.word	0x0a1806eb
60001bc0:	.word	0x0a180638
60001bc4:	.word	0x26013206
60001bc8:	.word	0x00030004
60001bcc:	.word	0x70000000
60001bd0:	.word	0x70000000
60001bd4:	.word	0x20007de8
60001bd8:	.word	0x20007694
	FLEXSPI2_IPCR0 = addr;
60001bdc:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001be0:	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001be4:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001be6:	ldr	r0, [pc, #32]	; (60001c08 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001be8:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bec:	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bf0:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bf4:	ldr	r3, [r0, #20]
60001bf6:	lsls	r3, r3, #31
60001bf8:	bpl.n	60001bf4 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bfa:	movs	r3, #1
60001bfc:	movs	r5, #16
60001bfe:	mov.w	r4, #16777216	; 0x1000000
60001c02:	str	r3, [r0, #20]
			external_psram_size = 16;
60001c04:	b.n	60001b40 <configure_external_ram+0x2b8>
60001c06:	nop
60001c08:	.word	0x402a4000

60001c0c <usb_pll_start>:
{
60001c0c:	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c0e:	ldr	r2, [pc, #84]	; (60001c64 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c10:	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c12:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c16:	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c1a:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c1e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c22:	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c26:	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c28:	tst.w	r3, #2
60001c2c:	bne.n	60001c4c <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c2e:	tst.w	r3, #8192	; 0x2000
60001c32:	beq.n	60001c54 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c34:	tst.w	r3, #4096	; 0x1000
60001c38:	beq.n	60001c58 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c3a:	cmp	r3, #0
60001c3c:	bge.n	60001c26 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c3e:	tst.w	r3, #65536	; 0x10000
60001c42:	bne.n	60001c5c <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c44:	lsls	r3, r3, #25
60001c46:	bpl.n	60001c60 <usb_pll_start+0x54>
}
60001c48:	pop	{r4, r5, r6, r7}
60001c4a:	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c4c:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c4e:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c50:	str	r0, [r2, #24]
			continue;
60001c52:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c54:	str	r5, [r2, #20]
			continue;
60001c56:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c58:	str	r6, [r2, #20]
			continue;
60001c5a:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c5c:	str	r1, [r2, #24]
			continue;
60001c5e:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c60:	str	r7, [r2, #20]
			continue;
60001c62:	b.n	60001c26 <usb_pll_start+0x1a>
60001c64:	.word	0x400d8000

60001c68 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c68:	ldr	r2, [pc, #252]	; (60001d68 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001c6a:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001c6c:	ldr	r1, [pc, #252]	; (60001d6c <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c6e:	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c72:	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c76:	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c7a:	vldr	s12, [pc, #244]	; 60001d70 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c7e:	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c82:	vldr	s10, [pc, #240]	; 60001d74 <tempmon_init+0x10c>
{
60001c86:	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c88:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001c8c:	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001c90:	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001c94:	ldr	r5, [pc, #224]	; (60001d78 <tempmon_init+0x110>)
60001c96:	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c98:	ldr	r4, [pc, #224]	; (60001d7c <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c9a:	ldr	r0, [pc, #228]	; (60001d80 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001c9c:	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c9e:	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001ca2:	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ca4:	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ca8:	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cac:	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cb0:	vmov	s14, r1
60001cb4:	ldr	r3, [pc, #204]	; (60001d84 <tempmon_init+0x11c>)
60001cb6:	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cba:	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cbc:	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001cc0:	ldr	r1, [pc, #196]	; (60001d88 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cc2:	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cc6:	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cca:	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cce:	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cd2:	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cd6:	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cda:	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001cde:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ce2:	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ce6:	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cea:	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cee:	ldr	r0, [pc, #156]	; (60001d8c <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf0:	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf4:	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf8:	vadd.f32	s11, s11, s14
60001cfc:	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d00:	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d04:	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d08:	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d0c:	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d10:	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d14:	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d18:	vmov	r3, s12
60001d1c:	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d20:	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d24:	and.w	r1, r1, r3, lsl #16
60001d28:	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d2a:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d2e:	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d32:	ubfx	r3, r3, #0, #12
60001d36:	ldr.w	r1, [r2, #400]	; 0x190
60001d3a:	orrs	r3, r1
60001d3c:	ldr	r1, [pc, #80]	; (60001d90 <tempmon_init+0x128>)
60001d3e:	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d42:	ldr.w	r3, [r2, #128]	; 0x80
60001d46:	orr.w	r3, r3, #2
60001d4a:	str.w	r3, [r2, #128]	; 0x80
60001d4e:	ldr	r3, [pc, #68]	; (60001d94 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d50:	strb.w	ip, [r0, #64]	; 0x40
60001d54:	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d58:	mov.w	r3, #3758153728	; 0xe000e000
60001d5c:	movs	r2, #1
}
60001d5e:	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d60:	str.w	r2, [r3, #264]	; 0x108
}
60001d64:	bx	lr
60001d66:	nop
60001d68:	.word	0x400d8100
60001d6c:	.word	0x401f4400
60001d70:	.word	0x42aa0000
60001d74:	.word	0x42b40000
60001d78:	.word	0x20007d5c
60001d7c:	.word	0x20007d58
60001d80:	.word	0x20007d60
60001d84:	.word	0x20007d64
60001d88:	.word	0x0fff0000
60001d8c:	.word	0xe000e400
60001d90:	.word	0x20001c00
60001d94:	.word	0x0000b801

60001d98 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:
	unsigned int i;
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
60001d98:	cmp.w	r1, #896	; 0x380
{
60001d9c:	push	{r3, r4, r5, r6, r7, lr}
60001d9e:	mov	r6, r1
60001da0:	mov	r7, r1
60001da2:	it	cs
60001da4:	movcs.w	r6, #896	; 0x380
60001da8:	mov	r5, r0
	__disable_irq();
60001daa:	cpsid	i
	memory_pool = data;
60001dac:	ldr	r3, [pc, #140]	; (60001e3c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa4>)
	memory_pool_first_mask = 0;
60001dae:	movs	r4, #0
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
60001db0:	movs	r2, #112	; 0x70
	memory_pool = data;
60001db2:	str	r0, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001db4:	mov	r1, r4
	memory_pool_first_mask = 0;
60001db6:	ldr	r3, [pc, #136]	; (60001e40 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa8>)
		memory_pool_available_mask[i] = 0;
60001db8:	ldr	r0, [pc, #136]	; (60001e44 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
	memory_pool_first_mask = 0;
60001dba:	strh	r4, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001dbc:	bl	60001ee8 <__memset_veneer>
	}
	for (i=0; i < num; i++) {
60001dc0:	cbz	r7, 60001df6 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5e>
60001dc2:	mov	r1, r4
60001dc4:	ldr	r0, [pc, #124]	; (60001e44 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001dc6:	mov.w	ip, #1
60001dca:	lsrs	r2, r1, #5
60001dcc:	and.w	r3, r1, #31
	for (i=0; i < num; i++) {
60001dd0:	adds	r1, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001dd2:	ldr.w	r4, [r0, r2, lsl #2]
60001dd6:	lsl.w	r3, ip, r3
	for (i=0; i < num; i++) {
60001dda:	cmp	r6, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001ddc:	orr.w	r3, r3, r4
60001de0:	str.w	r3, [r0, r2, lsl #2]
	for (i=0; i < num; i++) {
60001de4:	bhi.n	60001dca <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x32>
60001de6:	mov	r0, r5
60001de8:	movs	r3, #0
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
60001dea:	strh	r3, [r0, #2]
	for (i=0; i < num; i++) {
60001dec:	adds	r3, #1
60001dee:	add.w	r0, r0, #260	; 0x104
60001df2:	cmp	r6, r3
60001df4:	bhi.n	60001dea <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x52>
	}
	if (update_scheduled == false) {
60001df6:	ldr	r4, [pc, #80]	; (60001e48 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb0>)
60001df8:	ldrb	r5, [r4, #0]
60001dfa:	cbz	r5, 60001e00 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>
			float usec = 1e6 * AUDIO_BLOCK_SAMPLES / AUDIO_SAMPLE_RATE_EXACT;
			timer->begin(update_all, usec);
			update_setup();
		}
	}
	__enable_irq();
60001dfc:	cpsie	i
}
60001dfe:	pop	{r3, r4, r5, r6, r7, pc}
		IntervalTimer *timer = new IntervalTimer();
60001e00:	movs	r0, #8
60001e02:	bl	60001ef0 <___Znwj_veneer>
// some of these 4 possible instances may be in use by libraries.
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
60001e06:	movs	r2, #128	; 0x80
	// or false if all hardware timers are already in use.
	bool begin(void (*funct)(), float microseconds) {
		if (microseconds <= 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (float)(24000000 / 1000000) * microseconds - 0.5f;
		if (cycles < 17) return false;
		return beginCycles(funct, cycles);
60001e08:	ldr	r1, [pc, #64]	; (60001e4c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb4>)
	constexpr IntervalTimer() {
60001e0a:	strb	r2, [r0, #4]
60001e0c:	str	r5, [r0, #0]
		return beginCycles(funct, cycles);
60001e0e:	ldr	r2, [pc, #64]	; (60001e50 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb8>)
60001e10:	bl	60001ee0 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
60001e14:	ldrb	r3, [r4, #0]
60001e16:	cmp	r3, #0
60001e18:	bne.n	60001dfc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001e1a:	ldr	r3, [pc, #56]	; (60001e54 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xbc>)
60001e1c:	ldr	r2, [pc, #56]	; (60001e58 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc0>)
60001e1e:	str.w	r2, [r3, #344]	; 0x158
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
60001e22:	ldr	r1, [pc, #56]	; (60001e5c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc4>)
60001e24:	movs	r0, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
60001e26:	mov.w	r3, #3758153728	; 0xe000e000
60001e2a:	movs	r2, #64	; 0x40
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
60001e2c:	strb.w	r0, [r1, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
60001e30:	str.w	r2, [r3, #264]	; 0x108
	update_scheduled = true;
60001e34:	movs	r3, #1
60001e36:	strb	r3, [r4, #0]
	__enable_irq();
60001e38:	cpsie	i
}
60001e3a:	pop	{r3, r4, r5, r6, r7, pc}
60001e3c:	.word	0x2000610c
60001e40:	.word	0x20007dc0
60001e44:	.word	0x20006114
60001e48:	.word	0x20007ddf
60001e4c:	.word	0x0000c195
60001e50:	.word	0x0001101b
60001e54:	.word	0x20001c00
60001e58:	.word	0x0000c1a1
60001e5c:	.word	0xe000e400

60001e60 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001e60:	ldr	r3, [pc, #64]	; (60001ea4 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001e62:	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001e64:	ldr	r2, [pc, #64]	; (60001ea8 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001e66:	ldr	r1, [r3, #108]	; 0x6c
60001e68:	orr.w	r1, r1, #196608	; 0x30000
{
60001e6c:	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001e6e:	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001e70:	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001e74:	ldr	r1, [r3, #108]	; 0x6c
60001e76:	orr.w	r1, r1, #768	; 0x300
60001e7a:	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001e7c:	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001e7e:	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001e80:	ldr	r3, [r2, #72]	; 0x48
60001e82:	lsls	r3, r3, #24
60001e84:	bmi.n	60001e80 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e86:	ldr	r2, [pc, #36]	; (60001eac <analog_init+0x4c>)
60001e88:	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e8c:	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e8e:	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e90:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001e92:	ldr	r3, [r2, #72]	; 0x48
60001e94:	ands.w	r3, r3, #128	; 0x80
60001e98:	bne.n	60001e92 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001e9a:	ldr	r2, [pc, #20]	; (60001eb0 <analog_init+0x50>)
60001e9c:	strb	r3, [r2, #0]
}
60001e9e:	ldr.w	r4, [sp], #4
60001ea2:	bx	lr
60001ea4:	.word	0x400fc000
60001ea8:	.word	0x400c4000
60001eac:	.word	0x400c8000
60001eb0:	.word	0x20007de7

60001eb4 <_init>:
60001eb4:	push	{r3, r4, r5, r6, r7, lr}
60001eb6:	nop
60001eb8:	pop	{r3, r4, r5, r6, r7}
60001eba:	pop	{r3}
60001ebc:	mov	lr, r3
60001ebe:	bx	lr

60001ec0 <____libc_init_array_veneer>:
60001ec0:	ldr.w	pc, [pc]	; 60001ec4 <____libc_init_array_veneer+0x4>
60001ec4:	.word	0x0000df49

60001ec8 <__pwm_init_veneer>:
60001ec8:	ldr.w	pc, [pc]	; 60001ecc <__pwm_init_veneer+0x4>
60001ecc:	.word	0x0000b9c9

60001ed0 <__set_arm_clock_veneer>:
60001ed0:	ldr.w	pc, [pc]	; 60001ed4 <__set_arm_clock_veneer+0x4>
60001ed4:	.word	0x0000a5a5

60001ed8 <__delay_veneer>:
60001ed8:	ldr.w	pc, [pc]	; 60001edc <__delay_veneer+0x4>
60001edc:	.word	0x0000b431

60001ee0 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>:
60001ee0:	ldr.w	pc, [pc]	; 60001ee4 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer+0x4>
60001ee4:	.word	0x0000cdc9

60001ee8 <__memset_veneer>:
60001ee8:	ldr.w	pc, [pc]	; 60001eec <__memset_veneer+0x4>
60001eec:	.word	0x0000dcd1

60001ef0 <___Znwj_veneer>:
60001ef0:	ldr.w	pc, [pc]	; 60001ef4 <___Znwj_veneer+0x4>
60001ef4:	.word	0x0000cd05

60001ef8 <__main_veneer>:
60001ef8:	ldr.w	pc, [pc]	; 60001efc <__main_veneer+0x4>
60001efc:	.word	0x0000c185

60001f00 <__sm_set_pool_veneer>:
60001f00:	ldr.w	pc, [pc]	; 60001f04 <__sm_set_pool_veneer+0x4>
60001f04:	.word	0x0000b77d

60001f08 <__usb_init_serialnumber_veneer>:
60001f08:	ldr.w	pc, [pc]	; 60001f0c <__usb_init_serialnumber_veneer+0x4>
60001f0c:	.word	0x0000bce9

60001f10 <__frame_dummy_init_array_entry>:
60001f10:	E.......y.......
60001f20:	............%...
60001f30:	=...U...m.......
60001f40:	................
60001f50:	....%...=...U...
60001f60:	m...............
60001f70:	................
60001f80:	} ...%...,..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
}
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
	}
	__enable_irq();
      28:	add.w	r1, r1, r3, asr #2
}
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
      36:	bx	lr
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	.word	0x20001ec0
      3c:	.word	0x20001ec0
}
      40:	.word	0x00000000

00000044 <frame_dummy>:
      44:	push	{r3, lr}
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  }
  m_vwd = dir;
  return true;

fail:
  return false;
      48:	cbz	r3, 52 <frame_dummy+0xe>
}
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
		channel = 0;
	}
#endif
}
      52:	ldmia.w	sp!, {r3, lr}
      56:	b.w	20 <register_tm_clones>
	if (pin < NUM_DIGITAL_PINS) {
		cdPin_ = pin;
		pinMode(cdPin_, INPUT_PULLUP);
	} else {
		cdPin_ = 0xff;
		return false;
      5a:	nop
  m_vwd = dir;
  return true;

fail:
  return false;
}
      5c:	.word	0x00000000
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::open(uint32_t index, oflag_t oflag) {
  ExFatVolume* vol = ExFatVolume::cwv();
  return vol ? open(vol->vwd(), index, oflag) : false;
      60:	.word	0x20007940
  m_attributes = FILE_ATTR_CLOSED;
      64:	.word	0x60018400

00000068 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <Print::flush()>:
	virtual void flush()				{ }
      6c:	bx	lr
  return rtn;
      6e:	nop

00000070 <SDFile::isOpen()>:
    return m_fFile   ? m_fFile->isHidden()
           : m_xFile ? m_xFile->isHidden()
                     : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const { return m_fFile || m_xFile; }
      70:	ldr	r3, [r0, #80]	; 0x50
      72:	cbz	r3, 78 <SDFile::isOpen()+0x8>
      74:	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
      76:	bx	lr
      78:	ldr	r0, [r0, #84]	; 0x54
      7a:	subs	r0, #0
      7c:	it	ne
      7e:	movne	r0, #1
      80:	bx	lr
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      82:	nop

00000084 <I2S_32::isr32()>:
      84:	ldr	r2, [pc, #120]	; (100 <I2S_32::isr32()+0x7c>)
    char sign;
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      86:	ldr	r3, [pc, #124]	; (104 <I2S_32::isr32()+0x80>)
      88:	ldr	r1, [pc, #124]	; (108 <I2S_32::isr32()+0x84>)
}
      8a:	push	{r4, lr}
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	ldr	r4, [r2, #0]
      8e:	ldrb	r0, [r2, #4]
      90:	ldr	r2, [r4, #16]
      92:	strb	r0, [r1, #31]
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
      94:	cmp	r2, r3
  }
  return *this;
}
      96:	bcs.n	ae <I2S_32::isr32()+0x2a>
      98:	ldr	r2, [pc, #112]	; (10c <I2S_32::isr32()+0x88>)
	dma.enable();

	I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	dma.attachInterrupt(isr);	
#endif	
}
      9a:	ldrb	r2, [r2, #0]
      9c:	cbz	r2, f8 <I2S_32::isr32()+0x74>
      9e:	mov.w	r2, #3758153728	; 0xe000e000
      a2:	movs	r1, #64	; 0x40
      a4:	add.w	lr, r3, #512	; 0x200
      a8:	str.w	r1, [r2, #520]	; 0x208
      ac:	b.n	b4 <I2S_32::isr32()+0x30>
      ae:	mov	lr, r3
      b0:	sub.w	r3, r3, #512	; 0x200
      b4:	ldr	r1, [pc, #88]	; (110 <I2S_32::isr32()+0x8c>)
      b6:	ldr	r2, [pc, #92]	; (114 <I2S_32::isr32()+0x90>)
      b8:	ldr	r0, [r1, #0]
      ba:	ldr	r2, [r2, #0]
      bc:	cbz	r0, f6 <I2S_32::isr32()+0x72>
      be:	cbz	r2, f6 <I2S_32::isr32()+0x72>
      c0:	ldr	r4, [pc, #84]	; (118 <I2S_32::isr32()+0x94>)
      c2:	ldrh	r1, [r4, #0]
      c4:	cmp	r1, #64	; 0x40
      c6:	bhi.n	f6 <I2S_32::isr32()+0x72>
      c8:	add.w	ip, r1, #2
  // Maintain count of free clusters.
  updateFreeClusterCount(-count);

  // return first cluster number to caller
  *firstCluster = bgnCluster;
  return true;
      cc:	adds	r1, #64	; 0x40
	I2S1_RCSR = 0;
	I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	update_responsibility = update_setup();
	dma.attachInterrupt(isr);
#endif
}
      ce:	add.w	r0, r0, ip, lsl #1
      d2:	strh	r1, [r4, #0]

	I2S2_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	I2S2_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE;
	dma.attachInterrupt(isr);	

}
      d4:	add.w	ip, r2, ip, lsl #1
      }
    }
  }
  // don't try to delete root
  if (!isRoot()) {
    if (!rmdir()) {
      d8:	ldr	r2, [pc, #64]	; (11c <I2S_32::isr32()+0x98>)
      da:	ldr	r4, [r2, #0]
  return writeStop();

fail:
  spiStop();
  return false;
}
      dc:	ldr.w	r1, [r3], #8
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
  return (time_t)seconds; 
}
      e0:	ldr.w	r2, [r3, #-4]
      e4:	asrs	r1, r4
      e6:	cmp	lr, r3
      e8:	asr.w	r2, r2, r4
      ec:	strh.w	r1, [r0], #2
  seconds += (tm.mday-1) * SECS_PER_DAY;
  seconds += tm.hour * SECS_PER_HOUR;
  seconds += tm.min * SECS_PER_MIN;
  seconds += tm.sec;
  return /*(time_t)*/ seconds;
}
      f0:	strh.w	r2, [ip], #2
		table += 256;
		sum += table[(data2 >> 16) & 255];
		table += 256;
		sum += table[(data2 >> 8) & 255];
		table += 256;
		sum += table[data2 & 255];
      f4:	bhi.n	dc <I2S_32::isr32()+0x58>
		sum += table[(data2 >> 8) & 255];
      f6:	pop	{r4, pc}
      f8:	add.w	lr, r3, #512	; 0x200
		sum += table[data2 & 255];
      fc:	b.n	b4 <I2S_32::isr32()+0x30>
		sum += table[(data2 >> 16) & 255];
      fe:	nop
		sum += table[data2 & 255];
     100:	.word	0x200062bc
     104:	.word	0x20005e8c
		sum += table[(data2 >> 8) & 255];
     108:	.word	0x400e8000
		sum += table[data2 & 255];
     10c:	.word	0x20007de4
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
     110:	.word	0x200062b4
		table += 256;

	} while (--count > 0);
	return signed_saturate_rshift(sum, 16, RSHIFT);
}
     114:	.word	0x200062b8
     118:	.word	0x20007dc6
	#if IMXRT_CACHE_ENABLED >= 2
	uint32_t *dc = dest;
	#endif
	
	for (i=0; i < 16; i += 2) {
		src1 = block_input[i] ? (uint32_t *)(block_input[i]->data) : zeros;
     11c:	.word	0x20001470

00000120 <I2S_32::update()>:
		dest = tdm_tx_buffer;
	}
	if (update_responsibility) AudioStream::update_all();
	dc = dest;
	for (i=0; i < 16; i += 2) {
		src1 = block_input[i] ? (uint32_t *)(block_input[i]->data) : zeros;
     120:	push	{r3, r4, r5, r6, r7, lr}
     122:	mov	r6, r0
			block_ch1 = new1;
			block_ch2 = new2;
			block_ch3 = new3;
			block_ch4 = new4;
			block_offset = 0;
			__enable_irq();
     124:	bl	c204 <AudioStream::allocate()>
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
	}
}
     128:	cbz	r0, 15c <I2S_32::update()+0x3c>
     12a:	mov	r4, r0
     12c:	bl	c204 <AudioStream::allocate()>
     130:	mov	r5, r0
     132:	cbz	r0, 156 <I2S_32::update()+0x36>
     134:	cpsid	i
     136:	ldr	r3, [pc, #120]	; (1b0 <I2S_32::update()+0x90>)
     138:	ldrh	r2, [r3, #0]
     13a:	cmp	r2, #127	; 0x7f
     13c:	bhi.n	16e <I2S_32::update()+0x4e>
     13e:	ldr	r1, [pc, #116]	; (1b4 <I2S_32::update()+0x94>)
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockR) {
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else {
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);		
     140:	ldr	r2, [r1, #0]
     142:	cbz	r2, 1a2 <I2S_32::update()+0x82>
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     144:	cpsie	i
     146:	mov	r0, r4
     148:	bl	c2b0 <AudioStream::release(audio_block_struct*)>
     14c:	mov	r0, r5
     14e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
     152:	b.w	c2b0 <AudioStream::release(audio_block_struct*)>
     156:	mov	r0, r4
     158:	bl	c2b0 <AudioStream::release(audio_block_struct*)>

	CORE_PIN14_CONFIG = 3;  //3:SPDIF_OUT
	SPDIF_SCR |= SPDIF_SCR_DMA_TX_EN;
	SPDIF_STC |= SPDIF_STC_TX_ALL_CLK_EN;
//	pinMode(13, OUTPUT);
}
     15c:	cpsid	i
     15e:	ldr	r3, [pc, #80]	; (1b0 <I2S_32::update()+0x90>)
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     160:	ldrh	r2, [r3, #0]
     162:	cmp	r2, #127	; 0x7f
  dma.enable();

  I2S2_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;

  dma.attachInterrupt(isr);
}
     164:	bhi.n	16a <I2S_32::update()+0x4a>
     166:	cpsie	i
     168:	pop	{r3, r4, r5, r6, r7, pc}
     16a:	movs	r5, #0

				src++;
				*dest_right++ = (*src++) >> 8;

				src++;
				*dest_right++ = (*src++) >> 8;
     16c:	mov	r4, r5

			} while (src < end);
     16e:	ldr	r0, [pc, #68]	; (1b4 <I2S_32::update()+0x94>)
     170:	movs	r2, #0
     172:	ldr	r1, [pc, #68]	; (1b8 <I2S_32::update()+0x98>)
     174:	ldr	r7, [r0, #0]
     176:	strh	r2, [r3, #0]
     178:	str	r4, [r0, #0]
     17a:	ldr	r4, [r1, #0]
     17c:	str	r5, [r1, #0]
     17e:	cpsie	i
     180:	mov	r1, r7
     182:	mov	r0, r6
     184:	bl	c300 <AudioStream::transmit(audio_block_struct*, unsigned char)>
     188:	mov	r0, r7
     18a:	bl	c2b0 <AudioStream::release(audio_block_struct*)>
     18e:	mov	r0, r6
			ch1_offset = AUDIO_BLOCK_SAMPLES/2;
		} else {
			ch1_offset = 0;
			release(block_ch1_1st);
			block_ch1_1st = block_ch1_2nd;
			block_ch1_2nd = NULL;
     190:	mov	r1, r4
     192:	movs	r2, #1
     194:	bl	c300 <AudioStream::transmit(audio_block_struct*, unsigned char)>
     198:	mov	r0, r4
     19a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
     19e:	b.w	c2b0 <AudioStream::release(audio_block_struct*)>
     1a2:	str	r4, [r1, #0]
     1a4:	ldr	r1, [pc, #16]	; (1b8 <I2S_32::update()+0x98>)
     1a6:	strh	r2, [r3, #0]
     1a8:	str	r0, [r1, #0]
     1aa:	cpsie	i
     1ac:	pop	{r3, r4, r5, r6, r7, pc}
     1ae:	nop
     1b0:	.word	0x20007dc6
     1b4:	.word	0x200062b4
     1b8:	.word	0x200062b8

000001bc <SDFile::close()>:
	virtual void close() {
     1bc:	push	{r4, lr}
     1be:	mov	r4, r0
		if (filename) {
     1c0:	ldr	r0, [r0, #88]	; 0x58
     1c2:	cbz	r0, 1cc <SDFile::close()+0x10>
			free(filename);
     1c4:	bl	ceac <free>
			filename = nullptr;
     1c8:	movs	r3, #0
     1ca:	str	r3, [r4, #88]	; 0x58
     1cc:	ldr	r3, [r4, #80]	; 0x50
     1ce:	cbz	r3, 1dc <SDFile::close()+0x20>
			sdfatfile.close();
     1d0:	add.w	r0, r4, #24
	}
     1d4:	ldmia.w	sp!, {r4, lr}
			sdfatfile.close();
     1d8:	b.w	73e8 <FsBaseFile::close()>
     1dc:	ldr	r3, [r4, #84]	; 0x54
     1de:	cmp	r3, #0
     1e0:	bne.n	1d0 <SDFile::close()+0x14>
	}
     1e2:	pop	{r4, pc}

000001e4 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     1e4:	push	{r4, lr}
     1e6:	mov	r4, r0
		release();
     1e8:	bl	bfd0 <DMAChannel::release()>
	}
     1ec:	mov	r0, r4
     1ee:	pop	{r4, pc}

000001f0 <SDFile::name()>:
	virtual const char * name() {
     1f0:	push	{r4, lr}
     1f2:	mov	r4, r0
		if (!filename) {
     1f4:	ldr	r0, [r0, #88]	; 0x58
     1f6:	cbz	r0, 1fa <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     1f8:	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
     1fa:	mov.w	r0, #256	; 0x100
     1fe:	bl	ce9c <malloc>
     202:	str	r0, [r4, #88]	; 0x58
			if (filename) {
     204:	cbz	r0, 234 <SDFile::name()+0x44>
    *name = 0;
     206:	movs	r2, #0
    return m_fFile   ? m_fFile->getName(name, len)
     208:	ldr	r3, [r4, #80]	; 0x50
    *name = 0;
     20a:	strb	r2, [r0, #0]
    return m_fFile   ? m_fFile->getName(name, len)
     20c:	cbz	r3, 21e <SDFile::name()+0x2e>
     20e:	mov	r1, r0
     210:	mov.w	r2, #256	; 0x100
     214:	mov	r0, r3
     216:	bl	5708 <FatFile::getName(char*, unsigned int)>
		return filename;
     21a:	ldr	r0, [r4, #88]	; 0x58
	}
     21c:	pop	{r4, pc}
     21e:	ldr	r3, [r4, #84]	; 0x54
           : m_xFile ? m_xFile->getName(name, len)
     220:	cmp	r3, #0
     222:	beq.n	1f8 <SDFile::name()+0x8>
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
#else   // USE_UTF8_LONG_NAMES
    return getName7(name, size);
     224:	mov	r1, r0
     226:	mov.w	r2, #256	; 0x100
     22a:	mov	r0, r3
     22c:	bl	3688 <ExFatFile::getName7(char*, unsigned int)>
		return filename;
     230:	ldr	r0, [r4, #88]	; 0x58
	}
     232:	pop	{r4, pc}
				filename = &zeroterm;
     234:	ldr	r3, [pc, #4]	; (23c <SDFile::name()+0x4c>)
     236:	mov	r0, r3
     238:	str	r3, [r4, #88]	; 0x58
	}
     23a:	pop	{r4, pc}
     23c:	.word	0x20007de6

00000240 <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
     240:	push	{r3, r4, r5, lr}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile   ? length < (1ULL << 32) && m_fFile->truncate(length)
     242:	ldr	r5, [r0, #80]	; 0x50
     244:	cbz	r5, 262 <SDFile::truncate(unsigned long long)+0x22>
     246:	cbz	r3, 24c <SDFile::truncate(unsigned long long)+0xc>
	}
     248:	movs	r0, #0
     24a:	pop	{r3, r4, r5, pc}
   *
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) { return seekSet(length) && truncate(); }
     24c:	mov	r1, r2
     24e:	mov	r0, r5
     250:	bl	61c0 <FatFile::seekSet(unsigned long)>
     254:	cmp	r0, #0
     256:	beq.n	248 <SDFile::truncate(unsigned long long)+0x8>
     258:	mov	r0, r5
     25a:	ldmia.w	sp!, {r3, r4, r5, lr}
     25e:	b.w	650c <FatFile::truncate()>
     262:	ldr	r4, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->truncate(length)
     264:	cmp	r4, #0
     266:	beq.n	248 <SDFile::truncate(unsigned long long)+0x8>
   *
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
     268:	mov	r0, r4
     26a:	bl	3a9c <ExFatFile::seekSet(unsigned long long)>
     26e:	cmp	r0, #0
     270:	beq.n	248 <SDFile::truncate(unsigned long long)+0x8>
     272:	mov	r0, r4
     274:	ldmia.w	sp!, {r3, r4, r5, lr}
     278:	b.w	4ce4 <ExFatFile::truncate()>

0000027c <SDFile::setModifyTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     27c:	ldrb	r2, [r1, #6]
     27e:	sub.w	r3, r2, #80	; 0x50
     282:	lsls	r3, r3, #24
     284:	bmi.n	2cc <SDFile::setModifyTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     286:	addw	r2, r2, #1900	; 0x76c
	virtual bool setModifyTime(const DateTimeFields &tm) {
     28a:	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     28c:	ldrb	r3, [r1, #5]
	virtual bool setModifyTime(const DateTimeFields &tm) {
     28e:	sub	sp, #20
    return m_fFile   ? m_fFile->timestamp(flags, year, month, day, hour, minute,
     290:	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     292:	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     294:	ldrb	r5, [r1, #4]
     296:	ldrb	r6, [r1, #2]
     298:	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     29a:	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     29c:	ldrb	r1, [r1, #0]
     29e:	cbz	r4, 2b4 <SDFile::setModifyTime(DateTimeFields const&)+0x38>
     2a0:	mov	r0, r4
     2a2:	str	r6, [sp, #4]
     2a4:	str	r5, [sp, #0]
     2a6:	strd	r7, r1, [sp, #8]
     2aa:	movs	r1, #4
     2ac:	bl	6434 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     2b0:	add	sp, #20
     2b2:	pop	{r4, r5, r6, r7, pc}
     2b4:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->timestamp(flags, year, month, day, hour, minute,
     2b6:	cmp	r0, #0
     2b8:	beq.n	2b0 <SDFile::setModifyTime(DateTimeFields const&)+0x34>
     2ba:	str	r6, [sp, #4]
     2bc:	str	r5, [sp, #0]
     2be:	strd	r7, r1, [sp, #8]
     2c2:	movs	r1, #4
     2c4:	bl	4b6c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     2c8:	add	sp, #20
     2ca:	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     2cc:	movs	r0, #0
	}
     2ce:	bx	lr

000002d0 <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
     2d0:	push	{r4, lr}
     2d2:	mov	r4, r0
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
     2d4:	ldr	r0, [r0, #80]	; 0x50
     2d6:	cbz	r0, 2fa <SDFile::rewindDirectory()+0x2a>
   * If an error occurs or end of file is reached return -1.
   */
  int read() { return BaseFile::read(); }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     2d8:	ldrb	r3, [r0, #0]
     2da:	tst.w	r3, #208	; 0xd0
     2de:	bne.n	2e2 <SDFile::rewindDirectory()+0x12>
	}
     2e0:	pop	{r4, pc}
  void rewind() { seekSet(0); }
     2e2:	movs	r1, #0
     2e4:	bl	61c0 <FatFile::seekSet(unsigned long)>
    if (m_xFile) m_xFile->rewind();
     2e8:	ldr	r0, [r4, #84]	; 0x54
     2ea:	cmp	r0, #0
     2ec:	beq.n	2e0 <SDFile::rewindDirectory()+0x10>
  void rewind() { seekSet(0); }
     2ee:	movs	r2, #0
     2f0:	movs	r3, #0
     2f2:	ldmia.w	sp!, {r4, lr}
     2f6:	b.w	3a9c <ExFatFile::seekSet(unsigned long long)>
     2fa:	ldr	r0, [r4, #84]	; 0x54
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
     2fc:	cmp	r0, #0
     2fe:	beq.n	2e0 <SDFile::rewindDirectory()+0x10>
     300:	ldrb.w	r3, [r0, #49]	; 0x31
     304:	tst.w	r3, #80	; 0x50
     308:	beq.n	2e0 <SDFile::rewindDirectory()+0x10>
     30a:	movs	r2, #0
     30c:	movs	r3, #0
     30e:	ldmia.w	sp!, {r4, lr}
     312:	b.w	3a9c <ExFatFile::seekSet(unsigned long long)>
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     316:	nop

00000318 <SDFile::getModifyTime(DateTimeFields&)>:
    return m_fFile   ? m_fFile->getModifyDateTime(pdate, ptime)
     318:	ldr	r3, [r0, #80]	; 0x50
	virtual bool getModifyTime(DateTimeFields &tm) {
     31a:	push	{r4, lr}
     31c:	mov	r4, r1
     31e:	sub	sp, #8
     320:	cbz	r3, 36e <SDFile::getModifyTime(DateTimeFields&)+0x56>
     322:	add.w	r2, sp, #6
     326:	add	r1, sp, #4
     328:	mov	r0, r3
     32a:	bl	5928 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     32e:	cbz	r0, 380 <SDFile::getModifyTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     330:	ldrh.w	r3, [sp, #4]
     334:	ldrh.w	r2, [sp, #6]
     338:	orrs.w	r1, r3, r2
     33c:	beq.n	380 <SDFile::getModifyTime(DateTimeFields&)+0x68>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted minute [0,59]
 */
static inline uint8_t FS_MINUTE(uint16_t fatTime) {
  return (fatTime >> 5) & 0X3F;
     33e:	ubfx	ip, r2, #5, #6
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2 * (fatTime & 0X1F);
     342:	and.w	r0, r2, #31
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     346:	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     348:	ubfx	r1, r3, #5, #4
  return 2 * (fatTime & 0X1F);
     34c:	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     34e:	strb.w	ip, [r4, #1]
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     352:	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     354:	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     356:	subs	r1, #1
static inline uint8_t FS_DAY(uint16_t fatDate) { return fatDate & 0X1F; }
     358:	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     35c:	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     360:	strb	r0, [r4, #0]
		return true;
     362:	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     364:	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     366:	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     368:	strb	r2, [r4, #6]
	}
     36a:	add	sp, #8
     36c:	pop	{r4, pc}
     36e:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->getModifyDateTime(pdate, ptime)
     370:	cbz	r0, 380 <SDFile::getModifyTime(DateTimeFields&)+0x68>
     372:	add.w	r2, sp, #6
     376:	add	r1, sp, #4
     378:	bl	37e4 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     37c:	cmp	r0, #0
     37e:	bne.n	330 <SDFile::getModifyTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     380:	movs	r0, #0
	}
     382:	add	sp, #8
     384:	pop	{r4, pc}
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
     386:	nop

00000388 <SDFile::getCreateTime(DateTimeFields&)>:
    return m_fFile   ? m_fFile->getCreateDateTime(pdate, ptime)
     388:	ldr	r3, [r0, #80]	; 0x50
	virtual bool getCreateTime(DateTimeFields &tm) {
     38a:	push	{r4, lr}
     38c:	mov	r4, r1
     38e:	sub	sp, #8
     390:	cbz	r3, 3de <SDFile::getCreateTime(DateTimeFields&)+0x56>
     392:	add.w	r2, sp, #6
     396:	add	r1, sp, #4
     398:	mov	r0, r3
     39a:	bl	5908 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     39e:	cbz	r0, 3f0 <SDFile::getCreateTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     3a0:	ldrh.w	r3, [sp, #4]
     3a4:	ldrh.w	r2, [sp, #6]
     3a8:	orrs.w	r1, r3, r2
     3ac:	beq.n	3f0 <SDFile::getCreateTime(DateTimeFields&)+0x68>
  return (fatTime >> 5) & 0X3F;
     3ae:	ubfx	ip, r2, #5, #6
  return 2 * (fatTime & 0X1F);
     3b2:	and.w	r0, r2, #31
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     3b6:	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     3b8:	ubfx	r1, r3, #5, #4
  return 2 * (fatTime & 0X1F);
     3bc:	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     3be:	strb.w	ip, [r4, #1]
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     3c2:	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     3c4:	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     3c6:	subs	r1, #1
static inline uint8_t FS_DAY(uint16_t fatDate) { return fatDate & 0X1F; }
     3c8:	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     3cc:	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     3d0:	strb	r0, [r4, #0]
		return true;
     3d2:	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     3d4:	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     3d6:	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     3d8:	strb	r2, [r4, #6]
	}
     3da:	add	sp, #8
     3dc:	pop	{r4, pc}
     3de:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->getCreateDateTime(pdate, ptime)
     3e0:	cbz	r0, 3f0 <SDFile::getCreateTime(DateTimeFields&)+0x68>
     3e2:	add.w	r2, sp, #6
     3e6:	add	r1, sp, #4
     3e8:	bl	37c0 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     3ec:	cmp	r0, #0
     3ee:	bne.n	3a0 <SDFile::getCreateTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     3f0:	movs	r0, #0
	}
     3f2:	add	sp, #8
     3f4:	pop	{r4, pc}
			#endif //defined(AUDIO_PT8211_INTERPOLATION_LINEAR)
		#else
			memcpy_tointerleaveL(dest, blockL->data + offsetL);
			offsetL += (AUDIO_BLOCK_SAMPLES / 2);
		#endif //defined(AUDIO_PT8211_OVERSAMPLING)
	} else if (blockR) {
     3f6:	nop

000003f8 <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
     3f8:	ldr	r0, [r0, #16]
     3fa:	cbz	r0, 422 <File::available()+0x2a>
     3fc:	ldr	r3, [r0, #0]
     3fe:	ldr	r2, [pc, #84]	; (454 <File::available()+0x5c>)
     400:	ldr	r3, [r3, #16]
     402:	cmp	r3, r2
     404:	bne.n	452 <File::available()+0x5a>
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     406:	ldr	r3, [r0, #80]	; 0x50
     408:	cbz	r3, 424 <File::available()+0x2c>
    return isFile() ? fileSize() - curPosition() : 0;
     40a:	ldrb	r0, [r3, #0]
     40c:	ands.w	r0, r0, #8
     410:	beq.n	422 <File::available()+0x2a>
     412:	ldr	r0, [r3, #28]
     414:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     416:	subs	r0, r0, r3
     418:	it	mi
     41a:	mvnmi.w	r0, #2147483648	; 0x80000000
     41e:	bx	lr
     420:	mov	r0, r3
	}
     422:	bx	lr
     424:	ldr	r3, [r0, #84]	; 0x54
     426:	cmp	r3, #0
     428:	beq.n	420 <File::available()+0x28>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     42a:	ldrb.w	r0, [r3, #49]	; 0x31
     42e:	ands.w	r0, r0, #8
     432:	beq.n	422 <File::available()+0x2a>
     434:	ldr	r0, [r3, #16]
     436:	ldr	r1, [r3, #0]
     438:	ldr	r2, [r3, #20]
     43a:	subs	r0, r0, r1
     43c:	ldr	r3, [r3, #4]
     43e:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     442:	cmp.w	r0, #2147483648	; 0x80000000
     446:	sbcs.w	r3, r3, #0
     44a:	bcc.n	422 <File::available()+0x2a>
     44c:	mvn.w	r0, #2147483648	; 0x80000000
     450:	bx	lr
		return (f) ? f->available() : 0;
     452:	bx	r3
     454:	.word	0x0000076d

00000458 <File::peek()>:
	int peek() {
		return (f) ? f->peek() : -1;
     458:	ldr	r3, [r0, #16]
     45a:	cbz	r3, 47a <File::peek()+0x22>
     45c:	ldr	r2, [r3, #0]
     45e:	ldr	r1, [pc, #32]	; (480 <File::peek()+0x28>)
     460:	ldr	r2, [r2, #20]
     462:	cmp	r2, r1
     464:	bne.n	476 <File::peek()+0x1e>
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     466:	ldr	r0, [r3, #80]	; 0x50
     468:	cbz	r0, 46e <File::peek()+0x16>
     46a:	b.w	5ed8 <FatFile::peek()>
     46e:	ldr	r0, [r3, #84]	; 0x54
     470:	cbz	r0, 47a <File::peek()+0x22>
     472:	b.w	3a70 <ExFatFile::peek()>
     476:	mov	r0, r3
     478:	bx	r2
	}
     47a:	mov.w	r0, #4294967295
     47e:	bx	lr
     480:	.word	0x00000605

00000484 <File::flush()>:
	void flush() {
		if (f) f->flush();
     484:	ldr	r3, [r0, #16]
     486:	cbz	r3, 4a2 <File::flush()+0x1e>
     488:	ldr	r2, [r3, #0]
     48a:	ldr	r1, [pc, #28]	; (4a8 <File::flush()+0x24>)
     48c:	ldr	r2, [r2, #24]
     48e:	cmp	r2, r1
     490:	bne.n	4a4 <File::flush()+0x20>
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     492:	ldr	r0, [r3, #80]	; 0x50
     494:	cbz	r0, 49a <File::flush()+0x16>
     496:	b.w	6428 <FatFile::sync()>
     49a:	ldr	r0, [r3, #84]	; 0x54
     49c:	cbz	r0, 4a2 <File::flush()+0x1e>
     49e:	b.w	4884 <ExFatFile::sync()>
	}
     4a2:	bx	lr
		if (f) f->flush();
     4a4:	mov	r0, r3
     4a6:	bx	r2
     4a8:	.word	0x000006a9

000004ac <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     4ac:	ldr	r3, [r0, #16]
     4ae:	cbz	r3, 4fa <File::read()+0x4e>
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     4b0:	ldr	r1, [r3, #0]
     4b2:	ldr	r2, [pc, #76]	; (500 <File::read()+0x54>)
	int read() {
     4b4:	push	{r4, lr}
		if (f->read(&b, 1) < 1) return -1;
     4b6:	ldr	r4, [r1, #8]
	int read() {
     4b8:	sub	sp, #8
     4ba:	cmp	r4, r2
     4bc:	bne.n	4e8 <File::read()+0x3c>
    return m_fFile   ? m_fFile->read(buf, count)
     4be:	ldr	r0, [r3, #80]	; 0x50
     4c0:	cbz	r0, 4d6 <File::read()+0x2a>
     4c2:	movs	r2, #1
     4c4:	add.w	r1, sp, #7
     4c8:	bl	5d30 <FatFile::read(void*, unsigned int)>
		if (f->read(&b, 1) < 1) return -1;
     4cc:	cbz	r0, 4f4 <File::read()+0x48>
		return b;
     4ce:	ldrb.w	r0, [sp, #7]
	}
     4d2:	add	sp, #8
     4d4:	pop	{r4, pc}
     4d6:	ldr	r0, [r3, #84]	; 0x54
           : m_xFile ? m_xFile->read(buf, count)
     4d8:	cmp	r0, #0
     4da:	beq.n	4ce <File::read()+0x22>
     4dc:	movs	r2, #1
     4de:	add.w	r1, sp, #7
     4e2:	bl	38d0 <ExFatFile::read(void*, unsigned int)>
     4e6:	b.n	4cc <File::read()+0x20>
		if (f->read(&b, 1) < 1) return -1;
     4e8:	movs	r2, #1
     4ea:	add.w	r1, sp, #7
     4ee:	mov	r0, r3
     4f0:	blx	r4
     4f2:	b.n	4cc <File::read()+0x20>
		if (!f) return -1;
     4f4:	mov.w	r0, #4294967295
     4f8:	b.n	4d2 <File::read()+0x26>
     4fa:	mov.w	r0, #4294967295
	}
     4fe:	bx	lr
     500:	.word	0x00000645

00000504 <SDFile::position()>:
    return m_fFile   ? m_fFile->curPosition()
     504:	ldr	r3, [r0, #80]	; 0x50
     506:	cbz	r3, 50e <SDFile::position()+0xa>
     508:	ldr	r0, [r3, #20]
     50a:	movs	r1, #0
     50c:	bx	lr
     50e:	ldr	r3, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->curPosition()
     510:	cbz	r3, 518 <SDFile::position()+0x14>
  uint64_t curPosition() const { return m_curPosition; }
     512:	ldrd	r0, r1, [r3]
     516:	bx	lr
     518:	mov	r0, r3
     51a:	mov	r1, r3
	}
     51c:	bx	lr
			memcpy_tointerleaveR(dest, blockR->data + offsetR);
			offsetR += AUDIO_BLOCK_SAMPLES / 2;
		#endif //defined(AUDIO_PT8211_OVERSAMPLING)
	} else {
		#if defined(AUDIO_PT8211_OVERSAMPLING)
			memset(dest,0,AUDIO_BLOCK_SAMPLES*8);
     51e:	nop

00000520 <SDFile::size()>:
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
     520:	ldr	r3, [r0, #80]	; 0x50
     522:	cbz	r3, 52a <SDFile::size()+0xa>
     524:	ldr	r0, [r3, #28]
     526:	movs	r1, #0
     528:	bx	lr
     52a:	ldr	r3, [r0, #84]	; 0x54
     52c:	cbz	r3, 534 <SDFile::size()+0x14>
  uint64_t fileSize() const { return m_validLength; }
     52e:	ldrd	r0, r1, [r3, #16]
     532:	bx	lr
     534:	mov	r0, r3
     536:	mov	r1, r3
	}
     538:	bx	lr
		#else
			memcpy_tointerleaveR(dest, blockR->data + offsetR);
			offsetR += AUDIO_BLOCK_SAMPLES / 2;
		#endif //defined(AUDIO_PT8211_OVERSAMPLING)
	} else {
		memset(dest,0,sizeof(i2s_tx_buffer) / 2);
     53a:	nop

0000053c <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     53c:	push	{r4, r5, r6, r7, lr}
     53e:	sub	sp, #84	; 0x54
	constexpr Print() : write_error(0) {}
     540:	movs	r2, #0
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     542:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     546:	ldr	r7, [pc, #144]	; (5d8 <SDFile::openNextFile(unsigned char)+0x9c>)
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     548:	adds	r1, #24
     54a:	mov	r5, r0
     54c:	add	r0, sp, #16
     54e:	strb.w	r2, [sp, #4]
     552:	str	r4, [sp, #8]
     554:	strb.w	r2, [sp, #12]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     558:	str	r7, [sp, #0]
  FsBaseFile() = default;
     55a:	strd	r2, r2, [sp, #72]	; 0x48
    tmpFile.openNext(this, oflag);
     55e:	bl	74b8 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const { return m_fFile || m_xFile; }
     562:	ldr	r3, [sp, #72]	; 0x48
     564:	cbz	r3, 5c4 <SDFile::openNextFile(unsigned char)+0x88>
		if (file) return File(new SDFile(file));
     566:	movs	r0, #92	; 0x5c
class FileImpl {
     568:	movs	r6, #0
     56a:	bl	cd04 <operator new(unsigned int)>
class Print
     56e:	ldrb.w	r3, [sp, #4]
     572:	mov	r4, r0
     574:	str	r6, [r0, #4]
     576:	strb	r3, [r0, #12]
class StreamFile : public stream_t, public BaseFile {
     578:	add	r1, sp, #16
class Stream : public Print
     57a:	ldr	r3, [sp, #8]
     57c:	adds	r0, #24
     57e:	str.w	r3, [r0, #-8]
     582:	ldrb.w	r3, [sp, #12]
     586:	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     58a:	ldr	r3, [pc, #80]	; (5dc <SDFile::openNextFile(unsigned char)+0xa0>)
     58c:	str.w	r3, [r0, #-24]
     590:	ldr	r3, [pc, #76]	; (5e0 <SDFile::openNextFile(unsigned char)+0xa4>)
     592:	str.w	r3, [r0, #-16]
     596:	bl	7364 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
	File(FileImpl *file) {
     59a:	ldr	r3, [pc, #72]	; (5e4 <SDFile::openNextFile(unsigned char)+0xa8>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
     59c:	mov.w	r2, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     5a0:	str	r7, [r4, #8]
     5a2:	str	r3, [r5, #0]
		if (f) f->refcount++;
     5a4:	ldr	r3, [r4, #4]
     5a6:	str	r6, [r4, #88]	; 0x58
     5a8:	adds	r3, #1
	constexpr Print() : write_error(0) {}
     5aa:	strb	r6, [r5, #4]
     5ac:	strb	r6, [r5, #12]
     5ae:	str	r2, [r5, #8]
		f = file;
     5b0:	str	r4, [r5, #16]
		if (f) f->refcount++;
     5b2:	str	r3, [r4, #4]
     5b4:	ldr	r3, [pc, #48]	; (5e8 <SDFile::openNextFile(unsigned char)+0xac>)
  ~FsBaseFile() { close(); }
     5b6:	add	r0, sp, #16
     5b8:	str	r3, [sp, #0]
     5ba:	bl	73e8 <FsBaseFile::close()>
	}
     5be:	mov	r0, r5
     5c0:	add	sp, #84	; 0x54
     5c2:	pop	{r4, r5, r6, r7, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     5c4:	ldr	r3, [sp, #76]	; 0x4c
     5c6:	cmp	r3, #0
     5c8:	bne.n	566 <SDFile::openNextFile(unsigned char)+0x2a>
	constexpr File() : f(nullptr) { }
     5ca:	ldr	r2, [pc, #24]	; (5e4 <SDFile::openNextFile(unsigned char)+0xa8>)
     5cc:	strb	r3, [r5, #4]
     5ce:	str	r4, [r5, #8]
     5d0:	strb	r3, [r5, #12]
     5d2:	str	r2, [r5, #0]
     5d4:	str	r3, [r5, #16]
     5d6:	b.n	5b4 <SDFile::openNextFile(unsigned char)+0x78>
     5d8:	.word	0x20000aac
     5dc:	.word	0x20000adc
     5e0:	.word	0x20000b38
     5e4:	.word	0x20000a80
     5e8:	.word	0x2000099c

000005ec <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     5ec:	ldr	r3, [r0, #72]	; 0x48
     5ee:	cbz	r3, 5f6 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     5f0:	mov	r0, r3
     5f2:	b.w	5ed8 <FatFile::peek()>
     5f6:	ldr	r0, [r0, #76]	; 0x4c
     5f8:	cbz	r0, 5fe <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     5fa:	b.w	3a70 <ExFatFile::peek()>
  int peek() { return BaseFile::peek(); }
     5fe:	mov.w	r0, #4294967295
     602:	bx	lr

00000604 <SDFile::peek()>:
     604:	ldr	r3, [r0, #80]	; 0x50
     606:	cbz	r3, 60e <SDFile::peek()+0xa>
     608:	mov	r0, r3
     60a:	b.w	5ed8 <FatFile::peek()>
     60e:	ldr	r0, [r0, #84]	; 0x54
     610:	cbz	r0, 616 <SDFile::peek()+0x12>
     612:	b.w	3a70 <ExFatFile::peek()>
	}
     616:	mov.w	r0, #4294967295
     61a:	bx	lr

0000061c <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
     61c:	ldr	r3, [r0, #80]	; 0x50
     61e:	cbz	r3, 62e <SDFile::isDirectory()+0x12>
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
     620:	ldrb	r3, [r3, #0]
     622:	tst.w	r3, #208	; 0xd0
     626:	ite	ne
     628:	movne	r0, #1
     62a:	moveq	r0, #0
     62c:	bx	lr
     62e:	ldr	r0, [r0, #84]	; 0x54
     630:	cbz	r0, 640 <SDFile::isDirectory()+0x24>
     632:	ldrb.w	r3, [r0, #49]	; 0x31
     636:	tst.w	r3, #80	; 0x50
     63a:	ite	ne
     63c:	movne	r0, #1
     63e:	moveq	r0, #0
	}
     640:	bx	lr
     642:	nop

00000644 <SDFile::read(void*, unsigned int)>:
    return m_fFile   ? m_fFile->read(buf, count)
     644:	ldr	r3, [r0, #80]	; 0x50
     646:	cbz	r3, 64e <SDFile::read(void*, unsigned int)+0xa>
     648:	mov	r0, r3
     64a:	b.w	5d30 <FatFile::read(void*, unsigned int)>
     64e:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->read(buf, count)
     650:	cbz	r0, 656 <SDFile::read(void*, unsigned int)+0x12>
     652:	b.w	38d0 <ExFatFile::read(void*, unsigned int)>
	}
     656:	mov.w	r0, #4294967295
     65a:	bx	lr

0000065c <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile   ? m_fFile->read(buf, count)
     65c:	ldr	r3, [r0, #72]	; 0x48
  int read() { return BaseFile::read(); }
     65e:	push	{lr}
     660:	sub	sp, #12
     662:	cbz	r3, 67e <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     664:	movs	r2, #1
     666:	add.w	r1, sp, #7
     66a:	mov	r0, r3
     66c:	bl	5d30 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     670:	cmp	r0, #1
     672:	bne.n	68e <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     674:	ldrb.w	r0, [sp, #7]
     678:	add	sp, #12
     67a:	ldr.w	pc, [sp], #4
     67e:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->read(buf, count)
     680:	cbz	r0, 68e <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     682:	movs	r2, #1
     684:	add.w	r1, sp, #7
     688:	bl	38d0 <ExFatFile::read(void*, unsigned int)>
     68c:	b.n	670 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     68e:	mov.w	r0, #4294967295
     692:	b.n	678 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000694 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     694:	ldr	r3, [r0, #72]	; 0x48
     696:	cbz	r3, 69e <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     698:	mov	r0, r3
     69a:	b.w	6428 <FatFile::sync()>
     69e:	ldr	r0, [r0, #76]	; 0x4c
     6a0:	cbz	r0, 6a6 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     6a2:	b.w	4884 <ExFatFile::sync()>
  void flush() { BaseFile::sync(); }
     6a6:	bx	lr

000006a8 <SDFile::flush()>:
     6a8:	ldr	r3, [r0, #80]	; 0x50
     6aa:	cbz	r3, 6b2 <SDFile::flush()+0xa>
     6ac:	mov	r0, r3
     6ae:	b.w	6428 <FatFile::sync()>
     6b2:	ldr	r0, [r0, #84]	; 0x54
     6b4:	cbz	r0, 6ba <SDFile::flush()+0x12>
     6b6:	b.w	4884 <ExFatFile::sync()>
	}
     6ba:	bx	lr

000006bc <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile   ? m_fFile->write(buf, count)
     6bc:	ldr	r3, [r0, #72]	; 0x48
     6be:	cbz	r3, 6c6 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     6c0:	mov	r0, r3
     6c2:	b.w	6580 <FatFile::write(void const*, unsigned int)>
     6c6:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     6c8:	cbz	r0, 6ce <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     6ca:	b.w	4dc8 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     6ce:	bx	lr

000006d0 <SDFile::write(void const*, unsigned int)>:
    return m_fFile   ? m_fFile->write(buf, count)
     6d0:	ldr	r3, [r0, #80]	; 0x50
     6d2:	cbz	r3, 6da <SDFile::write(void const*, unsigned int)+0xa>
     6d4:	mov	r0, r3
     6d6:	b.w	6580 <FatFile::write(void const*, unsigned int)>
     6da:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     6dc:	cbz	r0, 6e2 <SDFile::write(void const*, unsigned int)+0x12>
     6de:	b.w	4dc8 <ExFatFile::write(void const*, unsigned int)>
	}
     6e2:	bx	lr

000006e4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) { return BaseFile::write(b); }
     6e4:	push	{lr}
    return m_fFile   ? m_fFile->write(buf, count)
     6e6:	ldr	r3, [r0, #72]	; 0x48
     6e8:	sub	sp, #12
     6ea:	strb.w	r1, [sp, #7]
     6ee:	cbz	r3, 702 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     6f0:	movs	r2, #1
     6f2:	add.w	r1, sp, #7
     6f6:	mov	r0, r3
     6f8:	bl	6580 <FatFile::write(void const*, unsigned int)>
     6fc:	add	sp, #12
     6fe:	ldr.w	pc, [sp], #4
     702:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     704:	cmp	r0, #0
     706:	beq.n	6fc <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     708:	movs	r2, #1
     70a:	add.w	r1, sp, #7
     70e:	bl	4dc8 <ExFatFile::write(void const*, unsigned int)>
     712:	add	sp, #12
     714:	ldr.w	pc, [sp], #4

00000718 <SDFile::setCreateTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
     718:	ldrb	r2, [r1, #6]
     71a:	sub.w	r3, r2, #80	; 0x50
     71e:	lsls	r3, r3, #24
     720:	bmi.n	768 <SDFile::setCreateTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     722:	addw	r2, r2, #1900	; 0x76c
	virtual bool setCreateTime(const DateTimeFields &tm) {
     726:	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     728:	ldrb	r3, [r1, #5]
	virtual bool setCreateTime(const DateTimeFields &tm) {
     72a:	sub	sp, #20
    return m_fFile   ? m_fFile->timestamp(flags, year, month, day, hour, minute,
     72c:	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     72e:	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     730:	ldrb	r5, [r1, #4]
     732:	ldrb	r6, [r1, #2]
     734:	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     736:	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     738:	ldrb	r1, [r1, #0]
     73a:	cbz	r4, 750 <SDFile::setCreateTime(DateTimeFields const&)+0x38>
     73c:	mov	r0, r4
     73e:	str	r6, [sp, #4]
     740:	str	r5, [sp, #0]
     742:	strd	r7, r1, [sp, #8]
     746:	movs	r1, #2
     748:	bl	6434 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     74c:	add	sp, #20
     74e:	pop	{r4, r5, r6, r7, pc}
     750:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->timestamp(flags, year, month, day, hour, minute,
     752:	cmp	r0, #0
     754:	beq.n	74c <SDFile::setCreateTime(DateTimeFields const&)+0x34>
     756:	str	r6, [sp, #4]
     758:	str	r5, [sp, #0]
     75a:	strd	r7, r1, [sp, #8]
     75e:	movs	r1, #2
     760:	bl	4b6c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     764:	add	sp, #20
     766:	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     768:	movs	r0, #0
	}
     76a:	bx	lr

0000076c <SDFile::available()>:
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     76c:	ldr	r3, [r0, #80]	; 0x50
     76e:	cbz	r3, 786 <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     770:	ldrb	r0, [r3, #0]
     772:	ands.w	r0, r0, #8
     776:	beq.n	794 <SDFile::available()+0x28>
     778:	ldr	r0, [r3, #28]
     77a:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     77c:	subs	r0, r0, r3
     77e:	it	mi
     780:	mvnmi.w	r0, #2147483648	; 0x80000000
     784:	bx	lr
     786:	ldr	r3, [r0, #84]	; 0x54
     788:	cbz	r3, 7b4 <SDFile::available()+0x48>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     78a:	ldrb.w	r0, [r3, #49]	; 0x31
     78e:	ands.w	r0, r0, #8
     792:	bne.n	796 <SDFile::available()+0x2a>
	}
     794:	bx	lr
     796:	ldr	r0, [r3, #16]
     798:	ldr	r1, [r3, #0]
     79a:	ldr	r2, [r3, #20]
     79c:	subs	r0, r0, r1
     79e:	ldr	r3, [r3, #4]
     7a0:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     7a4:	cmp.w	r0, #2147483648	; 0x80000000
     7a8:	sbcs.w	r3, r3, #0
     7ac:	bcc.n	794 <SDFile::available()+0x28>
     7ae:	mvn.w	r0, #2147483648	; 0x80000000
     7b2:	bx	lr
     7b4:	mov	r0, r3
		return sdfatfile.available();
     7b6:	b.n	794 <SDFile::available()+0x28>

000007b8 <StreamFile<FsBaseFile, unsigned long long>::available()>:
     7b8:	ldr	r3, [r0, #72]	; 0x48
     7ba:	cbz	r3, 7d2 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     7bc:	ldrb	r0, [r3, #0]
     7be:	ands.w	r0, r0, #8
     7c2:	beq.n	7e0 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     7c4:	ldr	r0, [r3, #28]
     7c6:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     7c8:	subs	r0, r0, r3
     7ca:	it	mi
     7cc:	mvnmi.w	r0, #2147483648	; 0x80000000
     7d0:	bx	lr
     7d2:	ldr	r3, [r0, #76]	; 0x4c
     7d4:	cbz	r3, 800 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     7d6:	ldrb.w	r0, [r3, #49]	; 0x31
     7da:	ands.w	r0, r0, #8
     7de:	bne.n	7e2 <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  int available() { return BaseFile::available(); }
     7e0:	bx	lr
     7e2:	ldr	r0, [r3, #16]
     7e4:	ldr	r1, [r3, #0]
     7e6:	ldr	r2, [r3, #20]
     7e8:	subs	r0, r0, r1
     7ea:	ldr	r3, [r3, #4]
     7ec:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     7f0:	cmp.w	r0, #2147483648	; 0x80000000
     7f4:	sbcs.w	r3, r3, #0
     7f8:	bcc.n	7e0 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     7fa:	mvn.w	r0, #2147483648	; 0x80000000
     7fe:	bx	lr
     800:	mov	r0, r3
     802:	b.n	7e0 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000804 <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->write((void*)buf, size) : 0;
     804:	ldr	r3, [r0, #16]
     806:	cbz	r3, 83e <File::write(unsigned char const*, unsigned int)+0x3a>
     808:	ldr	r0, [pc, #56]	; (844 <File::write(unsigned char const*, unsigned int)+0x40>)
	virtual size_t write(const uint8_t *buf, size_t size) {
     80a:	push	{r4}
		return (f) ? f->write((void*)buf, size) : 0;
     80c:	ldr	r4, [r3, #0]
     80e:	ldr	r4, [r4, #12]
     810:	cmp	r4, r0
     812:	bne.n	834 <File::write(unsigned char const*, unsigned int)+0x30>
    return m_fFile   ? m_fFile->write(buf, count)
     814:	ldr	r0, [r3, #80]	; 0x50
     816:	cbz	r0, 820 <File::write(unsigned char const*, unsigned int)+0x1c>
	}
     818:	ldr.w	r4, [sp], #4
     81c:	b.w	6580 <FatFile::write(void const*, unsigned int)>
     820:	ldr	r0, [r3, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     822:	cbz	r0, 82c <File::write(unsigned char const*, unsigned int)+0x28>
     824:	ldr.w	r4, [sp], #4
     828:	b.w	4dc8 <ExFatFile::write(void const*, unsigned int)>
     82c:	movs	r0, #0
     82e:	ldr.w	r4, [sp], #4
     832:	bx	lr
		return (f) ? f->write((void*)buf, size) : 0;
     834:	mov	r0, r3
     836:	mov	r3, r4
	}
     838:	ldr.w	r4, [sp], #4
		return (f) ? f->write((void*)buf, size) : 0;
     83c:	bx	r3
	}
     83e:	movs	r0, #0
     840:	bx	lr
     842:	nop
     844:	.word	0x000006d1

00000848 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     848:	push	{lr}
		return (f) ? f->write(&b, 1) : 0;
     84a:	ldr	r0, [r0, #16]
	size_t write(uint8_t b) {
     84c:	sub	sp, #12
     84e:	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
     852:	cbz	r0, 86e <File::write(unsigned char)+0x26>
     854:	ldr	r3, [r0, #0]
     856:	ldr	r2, [pc, #64]	; (898 <File::write(unsigned char)+0x50>)
     858:	ldr	r3, [r3, #12]
     85a:	cmp	r3, r2
     85c:	bne.n	88a <File::write(unsigned char)+0x42>
    return m_fFile   ? m_fFile->write(buf, count)
     85e:	ldr	r3, [r0, #80]	; 0x50
     860:	cbz	r3, 874 <File::write(unsigned char)+0x2c>
     862:	movs	r2, #1
     864:	add.w	r1, sp, #7
     868:	mov	r0, r3
     86a:	bl	6580 <FatFile::write(void const*, unsigned int)>
	}
     86e:	add	sp, #12
     870:	ldr.w	pc, [sp], #4
     874:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     876:	cmp	r0, #0
     878:	beq.n	86e <File::write(unsigned char)+0x26>
     87a:	movs	r2, #1
     87c:	add.w	r1, sp, #7
     880:	bl	4dc8 <ExFatFile::write(void const*, unsigned int)>
     884:	add	sp, #12
     886:	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
     88a:	movs	r2, #1
     88c:	add.w	r1, sp, #7
     890:	blx	r3
	}
     892:	add	sp, #12
     894:	ldr.w	pc, [sp], #4
     898:	.word	0x000006d1

0000089c <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     89c:	push	{r3, r4, r5, lr}
     89e:	mov	r4, r0
     8a0:	ldr	r3, [pc, #48]	; (8d4 <SDFile::~SDFile()+0x38>)
		if (filename) {
     8a2:	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     8a4:	str	r3, [r4, #0]
		if (filename) {
     8a6:	cbz	r0, 8b0 <SDFile::~SDFile()+0x14>
			free(filename);
     8a8:	bl	ceac <free>
			filename = nullptr;
     8ac:	movs	r3, #0
     8ae:	str	r3, [r4, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
     8b0:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     8b2:	add.w	r5, r4, #24
     8b6:	cbz	r3, 8cc <SDFile::~SDFile()+0x30>
     8b8:	mov	r0, r5
     8ba:	bl	73e8 <FsBaseFile::close()>
class StreamFile : public stream_t, public BaseFile {
     8be:	ldr	r3, [pc, #24]	; (8d8 <SDFile::~SDFile()+0x3c>)
  ~FsBaseFile() { close(); }
     8c0:	mov	r0, r5
     8c2:	str	r3, [r4, #8]
     8c4:	bl	73e8 <FsBaseFile::close()>
	}
     8c8:	mov	r0, r4
     8ca:	pop	{r3, r4, r5, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     8cc:	ldr	r3, [r4, #84]	; 0x54
     8ce:	cmp	r3, #0
     8d0:	bne.n	8b8 <SDFile::~SDFile()+0x1c>
     8d2:	b.n	8be <SDFile::~SDFile()+0x22>
     8d4:	.word	0x20000adc
     8d8:	.word	0x2000099c

000008dc <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     8dc:	push	{r3, r4, r5, lr}
     8de:	mov	r4, r0
     8e0:	ldr	r3, [pc, #56]	; (91c <SDFile::~SDFile()+0x40>)
		if (filename) {
     8e2:	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     8e4:	str	r3, [r4, #0]
		if (filename) {
     8e6:	cbz	r0, 8f0 <SDFile::~SDFile()+0x14>
			free(filename);
     8e8:	bl	ceac <free>
			filename = nullptr;
     8ec:	movs	r3, #0
     8ee:	str	r3, [r4, #88]	; 0x58
     8f0:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     8f2:	add.w	r5, r4, #24
     8f6:	cbz	r3, 914 <SDFile::~SDFile()+0x38>
     8f8:	mov	r0, r5
     8fa:	bl	73e8 <FsBaseFile::close()>
     8fe:	ldr	r3, [pc, #32]	; (920 <SDFile::~SDFile()+0x44>)
  ~FsBaseFile() { close(); }
     900:	mov	r0, r5
     902:	str	r3, [r4, #8]
     904:	bl	73e8 <FsBaseFile::close()>
	}
     908:	mov	r0, r4
     90a:	movs	r1, #92	; 0x5c
     90c:	bl	cd08 <operator delete(void*, unsigned int)>
     910:	mov	r0, r4
     912:	pop	{r3, r4, r5, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     914:	ldr	r3, [r4, #84]	; 0x54
     916:	cmp	r3, #0
     918:	bne.n	8f8 <SDFile::~SDFile()+0x1c>
     91a:	b.n	8fe <SDFile::~SDFile()+0x22>
     91c:	.word	0x20000adc
     920:	.word	0x2000099c

00000924 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     924:	push	{r4, r5}
     926:	ldr	r4, [sp, #8]
     928:	mov	r1, r2
     92a:	mov	ip, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     92c:	cbz	r4, 93c <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     92e:	cmp	r4, #1
     930:	beq.n	96c <SDFile::seek(unsigned long long, int)+0x48>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     932:	cmp	r4, #2
     934:	beq.n	954 <SDFile::seek(unsigned long long, int)+0x30>
	}
     936:	movs	r0, #0
     938:	pop	{r4, r5}
     93a:	bx	lr
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     93c:	ldr	r5, [r0, #80]	; 0x50
     93e:	cbz	r5, 97e <SDFile::seek(unsigned long long, int)+0x5a>
     940:	mov.w	r3, #4294967295
     944:	cmp	r3, r2
     946:	sbcs.w	r4, r4, ip
     94a:	bcc.n	936 <SDFile::seek(unsigned long long, int)+0x12>
     94c:	mov	r0, r5
     94e:	pop	{r4, r5}
     950:	b.w	61c0 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
     954:	ldr	r2, [r0, #80]	; 0x50
     956:	cbz	r2, 99c <SDFile::seek(unsigned long long, int)+0x78>
     958:	ldr	r3, [r2, #28]
  bool seekEnd(int64_t offset = 0) { return seekSet(fileSize() + offset); }
     95a:	adds	r1, r3, r1
     95c:	adc.w	r3, ip, #0
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     960:	cmp	r3, #0
     962:	bne.n	936 <SDFile::seek(unsigned long long, int)+0x12>
     964:	mov	r0, r2
     966:	pop	{r4, r5}
     968:	b.w	61c0 <FatFile::seekSet(unsigned long)>
    return m_fFile   ? m_fFile->curPosition()
     96c:	ldr	r2, [r0, #80]	; 0x50
     96e:	cbz	r2, 98a <SDFile::seek(unsigned long long, int)+0x66>
     970:	ldr	r3, [r2, #20]
  bool seekCur(int64_t offset) { return seekSet(curPosition() + offset); }
     972:	adds	r1, r3, r1
     974:	adc.w	r3, ip, #0
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     978:	cmp	r3, #0
     97a:	bne.n	936 <SDFile::seek(unsigned long long, int)+0x12>
     97c:	b.n	964 <SDFile::seek(unsigned long long, int)+0x40>
     97e:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->seekSet(pos)
     980:	cmp	r0, #0
     982:	beq.n	936 <SDFile::seek(unsigned long long, int)+0x12>
     984:	pop	{r4, r5}
     986:	b.w	3a9c <ExFatFile::seekSet(unsigned long long)>
     98a:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->curPosition()
     98c:	cmp	r0, #0
     98e:	beq.n	936 <SDFile::seek(unsigned long long, int)+0x12>
  bool seekCur(int64_t offset) { return seekSet(curPosition() + offset); }
     990:	ldrd	r2, r3, [r0]
     994:	adds	r2, r1, r2
           : m_xFile ? m_xFile->seekSet(pos)
     996:	adc.w	r3, ip, r3
     99a:	b.n	984 <SDFile::seek(unsigned long long, int)+0x60>
     99c:	ldr	r0, [r0, #84]	; 0x54
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
     99e:	cmp	r0, #0
     9a0:	beq.n	936 <SDFile::seek(unsigned long long, int)+0x12>
  bool seekEnd(int64_t offset = 0) { return seekSet(fileSize() + offset); }
     9a2:	ldrd	r2, r3, [r0, #16]
     9a6:	pop	{r4, r5}
     9a8:	adds	r2, r1, r2
           : m_xFile ? m_xFile->seekSet(pos)
     9aa:	adc.w	r3, ip, r3
     9ae:	b.w	3a9c <ExFatFile::seekSet(unsigned long long)>
     9b2:	nop

000009b4 <File::~File()>:
	virtual ~File() {
     9b4:	push	{r4, r5, r6, lr}
     9b6:	ldr	r3, [pc, #144]	; (a48 <File::~File()+0x94>)
     9b8:	mov	r4, r0
		if (f) dec_refcount();
     9ba:	ldr	r5, [r0, #16]
	virtual ~File() {
     9bc:	str	r3, [r0, #0]
		if (f) dec_refcount();
     9be:	cmp	r5, #0
     9c0:	beq.n	a28 <File::~File()+0x74>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
     9c2:	ldr	r6, [r5, #4]
     9c4:	subs	r6, #1
     9c6:	str	r6, [r5, #4]
     9c8:	cbnz	r6, a28 <File::~File()+0x74>
			f->close();
     9ca:	ldr	r3, [r5, #0]
     9cc:	ldr	r2, [pc, #124]	; (a4c <File::~File()+0x98>)
     9ce:	ldr	r3, [r3, #44]	; 0x2c
     9d0:	cmp	r3, r2
     9d2:	bne.n	a34 <File::~File()+0x80>
		if (filename) {
     9d4:	ldr	r0, [r5, #88]	; 0x58
     9d6:	cbz	r0, 9de <File::~File()+0x2a>
			free(filename);
     9d8:	bl	ceac <free>
			filename = nullptr;
     9dc:	str	r6, [r5, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
     9de:	ldr	r3, [r5, #80]	; 0x50
     9e0:	cbz	r3, a2c <File::~File()+0x78>
			sdfatfile.close();
     9e2:	add.w	r0, r5, #24
     9e6:	bl	73e8 <FsBaseFile::close()>
			delete f;
     9ea:	ldr	r5, [r4, #16]
     9ec:	cbz	r5, a28 <File::~File()+0x74>
     9ee:	ldr	r3, [r5, #0]
     9f0:	ldr	r2, [pc, #92]	; (a50 <File::~File()+0x9c>)
     9f2:	ldr	r3, [r3, #4]
     9f4:	cmp	r3, r2
     9f6:	bne.n	a42 <File::~File()+0x8e>
	virtual ~SDFile(void) {
     9f8:	ldr	r3, [pc, #88]	; (a54 <File::~File()+0xa0>)
		if (filename) {
     9fa:	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     9fc:	str	r3, [r5, #0]
		if (filename) {
     9fe:	cbz	r0, a08 <File::~File()+0x54>
			free(filename);
     a00:	bl	ceac <free>
			filename = nullptr;
     a04:	movs	r3, #0
     a06:	str	r3, [r5, #88]	; 0x58
     a08:	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     a0a:	add.w	r6, r5, #24
     a0e:	cbz	r3, a3a <File::~File()+0x86>
     a10:	mov	r0, r6
     a12:	bl	73e8 <FsBaseFile::close()>
     a16:	ldr	r3, [pc, #64]	; (a58 <File::~File()+0xa4>)
  ~FsBaseFile() { close(); }
     a18:	mov	r0, r6
     a1a:	str	r3, [r5, #8]
     a1c:	bl	73e8 <FsBaseFile::close()>
	}
     a20:	movs	r1, #92	; 0x5c
     a22:	mov	r0, r5
     a24:	bl	cd08 <operator delete(void*, unsigned int)>
	}
     a28:	mov	r0, r4
     a2a:	pop	{r4, r5, r6, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     a2c:	ldr	r3, [r5, #84]	; 0x54
     a2e:	cmp	r3, #0
     a30:	bne.n	9e2 <File::~File()+0x2e>
     a32:	b.n	9ea <File::~File()+0x36>
			f->close();
     a34:	mov	r0, r5
     a36:	blx	r3
     a38:	b.n	9ea <File::~File()+0x36>
     a3a:	ldr	r3, [r5, #84]	; 0x54
     a3c:	cmp	r3, #0
     a3e:	bne.n	a10 <File::~File()+0x5c>
     a40:	b.n	a16 <File::~File()+0x62>
			delete f;
     a42:	mov	r0, r5
     a44:	blx	r3
     a46:	b.n	a28 <File::~File()+0x74>
     a48:	.word	0x20000a80
     a4c:	.word	0x000001bd
     a50:	.word	0x000008dd
     a54:	.word	0x20000adc
     a58:	.word	0x2000099c

00000a5c <File::~File()>:
	virtual ~File() {
     a5c:	push	{r4, r5, r6, lr}
     a5e:	ldr	r3, [pc, #152]	; (af8 <File::~File()+0x9c>)
     a60:	mov	r4, r0
		if (f) dec_refcount();
     a62:	ldr	r5, [r0, #16]
	virtual ~File() {
     a64:	str	r3, [r0, #0]
		if (f) dec_refcount();
     a66:	cmp	r5, #0
     a68:	beq.n	ad0 <File::~File()+0x74>
		if (--(f->refcount) == 0) {
     a6a:	ldr	r6, [r5, #4]
     a6c:	subs	r6, #1
     a6e:	str	r6, [r5, #4]
     a70:	cbnz	r6, ad0 <File::~File()+0x74>
			f->close();
     a72:	ldr	r3, [r5, #0]
     a74:	ldr	r2, [pc, #132]	; (afc <File::~File()+0xa0>)
     a76:	ldr	r3, [r3, #44]	; 0x2c
     a78:	cmp	r3, r2
     a7a:	bne.n	ae4 <File::~File()+0x88>
		if (filename) {
     a7c:	ldr	r0, [r5, #88]	; 0x58
     a7e:	cbz	r0, a86 <File::~File()+0x2a>
			free(filename);
     a80:	bl	ceac <free>
			filename = nullptr;
     a84:	str	r6, [r5, #88]	; 0x58
     a86:	ldr	r3, [r5, #80]	; 0x50
     a88:	cbz	r3, adc <File::~File()+0x80>
			sdfatfile.close();
     a8a:	add.w	r0, r5, #24
     a8e:	bl	73e8 <FsBaseFile::close()>
			delete f;
     a92:	ldr	r5, [r4, #16]
     a94:	cbz	r5, ad0 <File::~File()+0x74>
     a96:	ldr	r3, [r5, #0]
     a98:	ldr	r2, [pc, #100]	; (b00 <File::~File()+0xa4>)
     a9a:	ldr	r3, [r3, #4]
     a9c:	cmp	r3, r2
     a9e:	bne.n	af2 <File::~File()+0x96>
	virtual ~SDFile(void) {
     aa0:	ldr	r3, [pc, #96]	; (b04 <File::~File()+0xa8>)
		if (filename) {
     aa2:	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     aa4:	str	r3, [r5, #0]
		if (filename) {
     aa6:	cbz	r0, ab0 <File::~File()+0x54>
			free(filename);
     aa8:	bl	ceac <free>
			filename = nullptr;
     aac:	movs	r3, #0
     aae:	str	r3, [r5, #88]	; 0x58
     ab0:	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     ab2:	add.w	r6, r5, #24
     ab6:	cbz	r3, aea <File::~File()+0x8e>
     ab8:	mov	r0, r6
     aba:	bl	73e8 <FsBaseFile::close()>
     abe:	ldr	r3, [pc, #72]	; (b08 <File::~File()+0xac>)
  ~FsBaseFile() { close(); }
     ac0:	mov	r0, r6
     ac2:	str	r3, [r5, #8]
     ac4:	bl	73e8 <FsBaseFile::close()>
	}
     ac8:	movs	r1, #92	; 0x5c
     aca:	mov	r0, r5
     acc:	bl	cd08 <operator delete(void*, unsigned int)>
	}
     ad0:	mov	r0, r4
     ad2:	movs	r1, #20
     ad4:	bl	cd08 <operator delete(void*, unsigned int)>
     ad8:	mov	r0, r4
     ada:	pop	{r4, r5, r6, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     adc:	ldr	r3, [r5, #84]	; 0x54
     ade:	cmp	r3, #0
     ae0:	bne.n	a8a <File::~File()+0x2e>
     ae2:	b.n	a92 <File::~File()+0x36>
			f->close();
     ae4:	mov	r0, r5
     ae6:	blx	r3
     ae8:	b.n	a92 <File::~File()+0x36>
     aea:	ldr	r3, [r5, #84]	; 0x54
     aec:	cmp	r3, #0
     aee:	bne.n	ab8 <File::~File()+0x5c>
     af0:	b.n	abe <File::~File()+0x62>
			delete f;
     af2:	mov	r0, r5
     af4:	blx	r3
     af6:	b.n	ad0 <File::~File()+0x74>
     af8:	.word	0x20000a80
     afc:	.word	0x000001bd
     b00:	.word	0x000008dd
     b04:	.word	0x20000adc
     b08:	.word	0x2000099c

00000b0c <I2S_32::config_i2s()>:

//#define AUDIO_SAMPLE_RATE_EXACT 44100 // used for initialization

void I2S_32::config_i2s(void)
{
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b0c:	ldr	r2, [pc, #200]	; (bd8 <I2S_32::config_i2s()+0xcc>)

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
     b0e:	ldr	r1, [pc, #204]	; (bdc <I2S_32::config_i2s()+0xd0>)
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b10:	ldr	r3, [r2, #124]	; 0x7c
     b12:	orr.w	r3, r3, #786432	; 0xc0000
     b16:	str	r3, [r2, #124]	; 0x7c
	if (I2S1_TCSR & I2S_TCSR_TE) return;
     b18:	ldr	r3, [r1, #8]
     b1a:	cmp	r3, #0
     b1c:	blt.n	bd4 <I2S_32::config_i2s()+0xc8>
	if (I2S1_RCSR & I2S_RCSR_RE) return;
     b1e:	ldr.w	r3, [r1, #136]	; 0x88
     b22:	cmp	r3, #0
     b24:	blt.n	bd4 <I2S_32::config_i2s()+0xc8>
 }

  FLASHMEM
  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b26:	ldr	r3, [pc, #184]	; (be0 <I2S_32::config_i2s()+0xd4>)
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     b28:	movw	r2, #10000	; 0x2710
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b2c:	ldr	r0, [pc, #180]	; (be4 <I2S_32::config_i2s()+0xd8>)
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     b2e:	mov.w	r1, #2240	; 0x8c0
{
     b32:	push	{r4, r5}
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b34:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     b36:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     b3a:	str.w	r2, [r3, #144]	; 0x90
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     b3e:	ldr	r2, [r3, #112]	; 0x70
     b40:	bic.w	r2, r2, #4096	; 0x1000
     b44:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     b46:	ldr	r2, [r3, #112]	; 0x70
     b48:	cmp	r2, #0
     b4a:	bge.n	b46 <I2S_32::config_i2s()+0x3a>
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     b4c:	ldr.w	r0, [r3, #368]	; 0x170
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
     b50:	movs	r5, #0
     b52:	ldr	r2, [pc, #148]	; (be8 <I2S_32::config_i2s()+0xdc>)
    int c2 = 10000;
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);

      // clear SAI1_CLK register locations
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     b54:	ldr	r1, [pc, #128]	; (bd8 <I2S_32::config_i2s()+0xcc>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     b56:	ands	r2, r0
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    // Select MCLK
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     b58:	ldr	r4, [pc, #144]	; (bec <I2S_32::config_i2s()+0xe0>)
	CORE_PIN23_CONFIG = 3;  //1:MCLK
     b5a:	ldr	r0, [pc, #148]	; (bf0 <I2S_32::config_i2s()+0xe4>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     b5c:	str.w	r2, [r3, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     b60:	ldr	r2, [r3, #112]	; 0x70
     b62:	bic.w	r2, r2, #65536	; 0x10000
     b66:	str	r2, [r3, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     b68:	ldr	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     b6a:	ldr	r3, [pc, #136]	; (bf4 <I2S_32::config_i2s()+0xe8>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     b6c:	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     b70:	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     b74:	str	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     b76:	ldr	r2, [r1, #40]	; 0x28
     b78:	ands	r3, r2
      & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     b7a:	ldr	r2, [pc, #124]	; (bf8 <I2S_32::config_i2s()+0xec>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     b7c:	orr.w	r3, r3, #206	; 0xce
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     b80:	str	r3, [r1, #40]	; 0x28
     b82:	movs	r1, #3
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     b84:	ldr	r3, [r4, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     b86:	ands	r2, r3
	I2S1_TMR = 0;
     b88:	ldr	r3, [pc, #80]	; (bdc <I2S_32::config_i2s()+0xd0>)
     b8a:	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     b8e:	str	r2, [r4, #4]
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
     b90:	movs	r4, #1
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
     b92:	ldr	r2, [pc, #104]	; (bfc <I2S_32::config_i2s()+0xf0>)
	CORE_PIN23_CONFIG = 3;  //1:MCLK
     b94:	str.w	r1, [r0, #288]	; 0x120
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     b98:	str.w	r1, [r0, #296]	; 0x128
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     b9c:	str.w	r1, [r0, #292]	; 0x124
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
     ba0:	mov.w	r0, #65536	; 0x10000
	I2S1_TMR = 0;
     ba4:	str	r5, [r3, #96]	; 0x60
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
     ba6:	ldr	r1, [pc, #88]	; (c00 <I2S_32::config_i2s()+0xf4>)
	I2S1_TCR1 = I2S_TCR1_RFW(1);
     ba8:	str	r4, [r3, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
     baa:	str	r2, [r3, #16]
		    | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
     bac:	ldr	r2, [pc, #84]	; (c04 <I2S_32::config_i2s()+0xf8>)
	I2S1_TCR3 = I2S_TCR3_TCE;
     bae:	str	r0, [r3, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
     bb0:	str	r1, [r3, #24]
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
     bb2:	str	r2, [r3, #28]

	I2S1_RMR = 0;
     bb4:	str.w	r5, [r3, #224]	; 0xe0
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
     bb8:	str.w	r4, [r3, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
     bbc:	add.w	r4, r4, #117440512	; 0x7000000
     bc0:	str.w	r4, [r3, #144]	; 0x90
  	    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
	I2S1_RCR3 = I2S_RCR3_RCE;
     bc4:	str.w	r0, [r3, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
     bc8:	str.w	r1, [r3, #152]	; 0x98
		    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
     bcc:	str.w	r2, [r3, #156]	; 0x9c
}
     bd0:	pop	{r4, r5}
     bd2:	bx	lr
     bd4:	bx	lr
     bd6:	nop
     bd8:	.word	0x400fc000
     bdc:	.word	0x40384000
     be0:	.word	0x400d8000
     be4:	.word	0x0011201c
     be8:	.word	0xff7f7fff
     bec:	.word	0x400ac000
     bf0:	.word	0x401f8000
     bf4:	.word	0xfffffe00
     bf8:	.word	0xfff7fff8
     bfc:	.word	0x47000001
     c00:	.word	0x00011f1b
     c04:	.word	0x1f1f1f00

00000c08 <I2S_32::begin()>:
{ 
     c08:	push	{r3, r4, r5, lr}
  dma.begin(true); // Allocate the DMA channel first
     c0a:	ldr	r4, [pc, #144]	; (c9c <I2S_32::begin()+0x94>)
{ 
     c0c:	mov	r5, r0
  dma.begin(true); // Allocate the DMA channel first
     c0e:	movs	r1, #1
     c10:	mov	r0, r4
     c12:	bl	bf1c <DMAChannel::begin(bool)>
  config_i2s();
     c16:	mov	r0, r5
     c18:	bl	b0c <I2S_32::config_i2s()>
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     c1c:	ldr	r1, [pc, #128]	; (ca0 <I2S_32::begin()+0x98>)
     c1e:	movs	r0, #3
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c20:	ldr	r3, [pc, #128]	; (ca4 <I2S_32::begin()+0x9c>)
     c22:	movs	r2, #2
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     c24:	movs	r5, #6
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     c26:	str.w	r0, [r1, #380]	; 0x17c
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c2a:	str.w	r2, [r3, #404]	; 0x194
  dma.TCD->NBYTES_MLNO = 4;
     c2e:	movs	r2, #4
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     c30:	ldr	r3, [r4, #0]
  dma.TCD->SOFF = 0;
     c32:	ldr	r1, [pc, #116]	; (ca8 <I2S_32::begin()+0xa0>)
  dma.TCD->NBYTES_MLNO = 4;
     c34:	str	r2, [r3, #8]
  dma.TCD->SOFF = 0;
     c36:	str	r1, [r3, #4]
  dma.TCD->DOFF = 4;
     c38:	strh	r2, [r3, #20]
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     c3a:	mov.w	r2, #256	; 0x100
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     c3e:	ldr	r0, [pc, #108]	; (cac <I2S_32::begin()+0xa4>)
  dma.TCD->DADDR = i2s_rx_buffer_32;
     c40:	ldr	r1, [pc, #108]	; (cb0 <I2S_32::begin()+0xa8>)
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     c42:	str	r0, [r3, #0]
  dma.TCD->SLAST = 0;
     c44:	movs	r0, #0
  dma.TCD->DADDR = i2s_rx_buffer_32;
     c46:	str	r1, [r3, #16]
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     c48:	strh	r2, [r3, #22]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     c4a:	ldrb	r1, [r4, #4]
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     c4c:	strh	r2, [r3, #30]
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     c4e:	strh	r5, [r3, #28]
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     c50:	subw	r5, r5, #1030	; 0x406
     c54:	ldr	r2, [pc, #92]	; (cb4 <I2S_32::begin()+0xac>)
  dma.TCD->SLAST = 0;
     c56:	str	r0, [r3, #12]
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     c58:	str	r5, [r3, #24]
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
     c5a:	str.w	r0, [r2, r1, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     c5e:	ldr	r0, [pc, #88]	; (cb8 <I2S_32::begin()+0xb0>)
  I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     c60:	ldr	r3, [pc, #88]	; (cbc <I2S_32::begin()+0xb4>)
     c62:	str.w	r0, [r2, r1, lsl #2]
     c66:	ldr	r2, [pc, #88]	; (cc0 <I2S_32::begin()+0xb8>)
     c68:	str.w	r2, [r3, #136]	; 0x88
  update_responsibility = update_setup();
     c6c:	bl	c568 <AudioStream::update_setup()>
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     c70:	ldrb	r3, [r4, #4]
     c72:	ldr	r4, [pc, #80]	; (cc4 <I2S_32::begin()+0xbc>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c74:	movs	r1, #1
     c76:	ldr	r2, [pc, #80]	; (cc8 <I2S_32::begin()+0xc0>)
     c78:	strb	r0, [r4, #0]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     c7a:	add.w	r0, r3, #16
		DMA_SERQ = channel;
     c7e:	ldr	r4, [pc, #76]	; (ccc <I2S_32::begin()+0xc4>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c80:	add.w	r2, r2, r3, lsr #5
		DMA_SERQ = channel;
     c84:	strb	r3, [r4, #27]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c86:	and.w	r3, r3, #31
     c8a:	lsls	r2, r2, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     c8c:	ldr	r4, [pc, #64]	; (cd0 <I2S_32::begin()+0xc8>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c8e:	lsls	r1, r3
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     c90:	ldr	r3, [pc, #64]	; (cd4 <I2S_32::begin()+0xcc>)
     c92:	str.w	r4, [r3, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c96:	str	r1, [r2, #0]
}
     c98:	pop	{r3, r4, r5, pc}
     c9a:	nop
     c9c:	.word	0x200062bc
     ca0:	.word	0x401f8000
     ca4:	.word	0x401f8400
     ca8:	.word	0x02020000
     cac:	.word	0x403840a0
     cb0:	.word	0x20005c8c
     cb4:	.word	0x400ec000
     cb8:	.word	0x80000013
     cbc:	.word	0x40384000
     cc0:	.word	0x92000001
     cc4:	.word	0x20007de4
     cc8:	.word	0x38003840
     ccc:	.word	0x400e8000
     cd0:	.word	0x00000085
     cd4:	.word	0x20001c00

00000cd8 <newDirectory(char*)>:
#else
  uint32_t getTeensySerial(void)  { return 0;}
#endif

int16_t newDirectory(char *dirName)
{ if(newHour())
     cd8:	push	{r4, r5, lr}
     cda:	sub	sp, #28
     cdc:	mov	r4, r0
{   uint32_t tx=rtc_get();
     cde:	bl	b70c <rtc_get>
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
     ce2:	ldr	r3, [pc, #116]	; (d58 <newDirectory(char*)+0x80>)
{   uint32_t tx=rtc_get();
     ce4:	mov	r2, r0
    if(hour_== h_) return 0;
     ce6:	ldr	r5, [pc, #116]	; (d5c <newDirectory(char*)+0x84>)
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
     ce8:	smull	r1, r3, r3, r2
     cec:	asrs	r1, r2, #31
    if(hour_== h_) return 0;
     cee:	ldr	r0, [r5, #0]
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
     cf0:	add	r3, r2
     cf2:	rsb	r3, r1, r3, asr #11
    if(hour_== h_) return 0;
     cf6:	cmp	r3, r0
     cf8:	beq.n	d50 <newDirectory(char*)+0x78>
    hour_ = h_;
     cfa:	str	r3, [r5, #0]
    {   
        tmElements_t tm;
        breakTime(rtc_get(), tm);
     cfc:	bl	b70c <rtc_get>
     d00:	add	r2, sp, #16
     d02:	movs	r1, #0
     d04:	bl	1d20 <breakTime(long long, tmElements_t&)>
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
                      DirPrefix,(unsigned int)SerNum,
                              tmYearToCalendar(tm.Year),tm.Month, tm.Day, tm.Hour);
     d08:	ldrb.w	r2, [sp, #22]
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
     d0c:	ldrb.w	r1, [sp, #20]
     d10:	ldrb.w	r0, [sp, #21]
     d14:	addw	r2, r2, #1970	; 0x7b2
     d18:	ldrb.w	r5, [sp, #18]
     d1c:	ldr	r3, [pc, #64]	; (d60 <newDirectory(char*)+0x88>)
     d1e:	strd	r1, r5, [sp, #8]
     d22:	ldr	r3, [r3, #0]
     d24:	ldr	r1, [pc, #60]	; (d64 <newDirectory(char*)+0x8c>)
     d26:	strd	r2, r0, [sp]
     d2a:	ldr	r2, [pc, #60]	; (d68 <newDirectory(char*)+0x90>)
     d2c:	mov	r0, r4
     d2e:	ldr	r2, [r2, #0]
     d30:	bl	d9e0 <sprintf>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     d34:	movs	r1, #1
     d36:	ldr	r0, [pc, #52]	; (d6c <newDirectory(char*)+0x94>)
     d38:	bl	a4a8 <usb_serial_write>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     d3c:	mov	r0, r4
     d3e:	bl	e040 <strlen>
     d42:	mov	r1, r0
     d44:	mov	r0, r4
     d46:	bl	a4a8 <usb_serial_write>
        //
        Serial.print("\n"); Serial.print(dirName);
        return 1;
     d4a:	movs	r0, #1
    }
    return 0;
}
     d4c:	add	sp, #28
     d4e:	pop	{r4, r5, pc}
    return 0;
     d50:	movs	r0, #0
}
     d52:	add	sp, #28
     d54:	pop	{r4, r5, pc}
     d56:	nop
     d58:	.word	0x91a2b3c5
     d5c:	.word	0x2000793c
     d60:	.word	0x200058c0
     d64:	.word	0x200004f8
     d68:	.word	0x20001440
     d6c:	.word	0x200007a0

00000d70 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
     d70:	push	{r4, r5, lr}
     d72:	sub	sp, #44	; 0x2c
     d74:	mov	r4, r0
    tmElements_t tm;
    breakTime(rtc_get(), tm);
     d76:	bl	b70c <rtc_get>
     d7a:	movs	r1, #0
     d7c:	add	r2, sp, #32
     d7e:	bl	1d20 <breakTime(long long, tmElements_t&)>
    
    sprintf(fileName, "/%s%06x_%04d%02d%02d/%02d/%s_%02d%02d%02d.bin", 
     d82:	ldrb.w	r0, [sp, #33]	; 0x21
     d86:	ldr	r3, [pc, #96]	; (de8 <newFileName(char*)+0x78>)
     d88:	str	r0, [sp, #24]
     d8a:	ldr	r0, [r3, #0]
     d8c:	ldrb.w	r1, [sp, #34]	; 0x22
     d90:	str	r0, [sp, #16]
     d92:	ldrb.w	r5, [sp, #32]
     d96:	ldrb.w	r0, [sp, #36]	; 0x24
            DirPrefix,(unsigned int)SerNum,
                      tmYearToCalendar(tm.Year),tm.Month, tm.Day, tm.Hour, 
     d9a:	ldrb.w	r2, [sp, #38]	; 0x26
    sprintf(fileName, "/%s%06x_%04d%02d%02d/%02d/%s_%02d%02d%02d.bin", 
     d9e:	ldr	r3, [pc, #76]	; (dec <newFileName(char*)+0x7c>)
     da0:	str	r5, [sp, #28]
     da2:	addw	r2, r2, #1970	; 0x7b2
     da6:	ldr	r3, [r3, #0]
     da8:	str	r1, [sp, #20]
     daa:	strd	r0, r1, [sp, #8]
     dae:	ldrb.w	r0, [sp, #37]	; 0x25
     db2:	ldr	r1, [pc, #60]	; (df0 <newFileName(char*)+0x80>)
     db4:	strd	r2, r0, [sp]
     db8:	ldr	r2, [pc, #56]	; (df4 <newFileName(char*)+0x84>)
     dba:	mov	r0, r4
     dbc:	ldr	r2, [r2, #0]
     dbe:	bl	d9e0 <sprintf>
     dc2:	movs	r1, #1
     dc4:	ldr	r0, [pc, #48]	; (df8 <newFileName(char*)+0x88>)
     dc6:	bl	a4a8 <usb_serial_write>
     dca:	movs	r1, #2
     dcc:	ldr	r0, [pc, #44]	; (dfc <newFileName(char*)+0x8c>)
     dce:	bl	a4a8 <usb_serial_write>
     dd2:	mov	r0, r4
     dd4:	bl	e040 <strlen>
     dd8:	mov	r1, r0
     dda:	mov	r0, r4
     ddc:	bl	a4a8 <usb_serial_write>
                      FilePrefix, tm.Hour, tm.Minute, tm.Second);
    //
    Serial.print("\n"); Serial.print(": ");Serial.print(fileName);
    return 1;
}
     de0:	movs	r0, #1
     de2:	add	sp, #44	; 0x2c
     de4:	pop	{r4, r5, pc}
     de6:	nop
     de8:	.word	0x2000144c
     dec:	.word	0x200058c0
     df0:	.word	0x200004c4
     df4:	.word	0x20001440
     df8:	.word	0x200007a0
     dfc:	.word	0x200004f4

00000e00 <makeHeader(char*)>:

int16_t makeHeader(char *header)
{
     e00:	push	{r4, r5, lr}
     * @param header is pointer to header
     * 
     */
    #define MAGIC "WMXZ"
    tmElements_t tm;
    breakTime(rtc_get(), tm);
     e02:	movs	r5, #0
{
     e04:	sub	sp, #36	; 0x24
     e06:	mov	r4, r0
    breakTime(rtc_get(), tm);
     e08:	bl	b70c <rtc_get>
     e0c:	add	r2, sp, #24
     e0e:	mov	r1, r5
     e10:	bl	1d20 <breakTime(long long, tmElements_t&)>

    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
     e14:	ldrb.w	r1, [sp, #24]
     e18:	ldrb.w	r2, [sp, #25]
     e1c:	mov	r0, r4
            MAGIC,tmYearToCalendar(tm.Year),tm.Month,tm.Day,tm.Hour,tm.Minute,tm.Second);
     e1e:	ldrb.w	r3, [sp, #30]
    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
     e22:	strd	r2, r1, [sp, #12]
     e26:	ldrb.w	r1, [sp, #26]
     e2a:	addw	r3, r3, #1970	; 0x7b2
     e2e:	ldrb.w	r2, [sp, #28]
     e32:	strd	r2, r1, [sp, #4]
     e36:	ldrb.w	r1, [sp, #29]
     e3a:	ldr	r2, [pc, #64]	; (e7c <makeHeader(char*)+0x7c>)
     e3c:	str	r1, [sp, #0]
     e3e:	ldr	r1, [pc, #64]	; (e80 <makeHeader(char*)+0x80>)
     e40:	bl	d9e0 <sprintf>
    char *ptr = header+(nd+1);
    int32_t *iptr = (int32_t *) ptr;
    //float *fptr = (float *) ptr;
    
    // to be filled in
    iptr[0] = 10;                   // SW version
     e44:	movs	r1, #10
    char *ptr = header+(nd+1);
     e46:	adds	r3, r0, #1
    iptr[1] = (int32_t)SerNum;      // serial number
     e48:	ldr	r2, [pc, #56]	; (e84 <makeHeader(char*)+0x84>)
    iptr[3] = nch;
    iptr[4] = t_acq;
    iptr[5] = t_on;
    iptr[6] = t_off;
    iptr[7] = DO_COMPRESS;
    iptr[8] = shift;
     e4a:	movs	r0, #14
    iptr[0] = 10;                   // SW version
     e4c:	str	r1, [r4, r3]
    char *ptr = header+(nd+1);
     e4e:	add	r3, r4
    iptr[1] = (int32_t)SerNum;      // serial number
     e50:	ldr	r1, [r2, #0]

    uint32_t *uptr = (uint32_t*) header;
    uptr[127] = 0x55555555;
     e52:	mov.w	r2, #1431655765	; 0x55555555
    iptr[8] = shift;
     e56:	str	r0, [r3, #32]
    iptr[4] = t_acq;
     e58:	movs	r0, #1
    iptr[1] = (int32_t)SerNum;      // serial number
     e5a:	str	r1, [r3, #4]
    iptr[2] = fsamp;
     e5c:	movw	r1, #44100	; 0xac44
     e60:	str	r1, [r3, #8]
    iptr[4] = t_acq;
     e62:	movs	r1, #60	; 0x3c
     e64:	strd	r0, r1, [r3, #12]
    iptr[5] = t_on;
     e68:	mov.w	r1, #300	; 0x12c
    iptr[7] = DO_COMPRESS;
     e6c:	strd	r5, r5, [r3, #24]
    iptr[5] = t_on;
     e70:	str	r1, [r3, #20]
    uptr[127] = 0x55555555;
     e72:	str.w	r2, [r4, #508]	; 0x1fc
    //
    return 1;
}
     e76:	add	sp, #36	; 0x24
     e78:	pop	{r4, r5, pc}
     e7a:	nop
     e7c:	.word	0x20000470
     e80:	.word	0x20000478
     e84:	.word	0x200058c0

00000e88 <storeData(int) [clone .part.0]>:
      break;
    }
  }
}

int16_t storeData(int status)
     e88:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e8c:	sub	sp, #80	; 0x50
{
  int32_t nbuf=sizeof(diskBuffer);

  if(!haveSD) return status;

  switch(status)
     e8e:	cmp	r0, #5
     e90:	bhi.w	1100 <storeData(int) [clone .part.0]+0x278>
     e94:	tbh	[pc, r0, lsl #1]
     e98:	.word	0x00960060
     e9c:	.word	0x00db00bb
     ea0:	.word	0x00060006
		if (f) {
     ea4:	ldr	r5, [pc, #612]	; (110c <storeData(int) [clone .part.0]+0x284>)
     ea6:	ldr	r4, [r5, #16]
     ea8:	cmp	r4, #0
     eaa:	beq.w	1100 <storeData(int) [clone .part.0]+0x278>
			f->close();
     eae:	ldr	r3, [r4, #0]
     eb0:	ldr	r6, [pc, #604]	; (1110 <storeData(int) [clone .part.0]+0x288>)
     eb2:	ldr	r3, [r3, #44]	; 0x2c
     eb4:	cmp	r3, r6
     eb6:	bne.w	13a2 <storeData(int) [clone .part.0]+0x51a>
		if (filename) {
     eba:	ldr	r0, [r4, #88]	; 0x58
     ebc:	cbz	r0, ec6 <storeData(int) [clone .part.0]+0x3e>
			free(filename);
     ebe:	bl	ceac <free>
			filename = nullptr;
     ec2:	movs	r3, #0
     ec4:	str	r3, [r4, #88]	; 0x58
     ec6:	ldr	r3, [r4, #80]	; 0x50
     ec8:	cmp	r3, #0
     eca:	beq.w	1358 <storeData(int) [clone .part.0]+0x4d0>
			sdfatfile.close();
     ece:	add.w	r0, r4, #24
     ed2:	bl	73e8 <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
     ed6:	ldr	r7, [r5, #16]
     ed8:	ldr	r4, [r7, #4]
     eda:	subs	r4, #1
     edc:	str	r4, [r7, #4]
     ede:	cmp	r4, #0
     ee0:	bne.n	f4a <storeData(int) [clone .part.0]+0xc2>
			f->close();
     ee2:	ldr	r3, [r7, #0]
     ee4:	ldr	r3, [r3, #44]	; 0x2c
     ee6:	cmp	r3, r6
     ee8:	bne.w	13c4 <storeData(int) [clone .part.0]+0x53c>
		if (filename) {
     eec:	ldr	r0, [r7, #88]	; 0x58
     eee:	cbz	r0, ef6 <storeData(int) [clone .part.0]+0x6e>
			free(filename);
     ef0:	bl	ceac <free>
			filename = nullptr;
     ef4:	str	r4, [r7, #88]	; 0x58
     ef6:	ldr	r3, [r7, #80]	; 0x50
     ef8:	cmp	r3, #0
     efa:	beq.w	13a8 <storeData(int) [clone .part.0]+0x520>
			sdfatfile.close();
     efe:	add.w	r0, r7, #24
     f02:	bl	73e8 <FsBaseFile::close()>
			delete f;
     f06:	ldr	r4, [r5, #16]
     f08:	cbz	r4, f4a <storeData(int) [clone .part.0]+0xc2>
     f0a:	ldr	r3, [r4, #0]
     f0c:	ldr	r2, [pc, #516]	; (1114 <storeData(int) [clone .part.0]+0x28c>)
     f0e:	ldr	r3, [r3, #4]
     f10:	cmp	r3, r2
     f12:	bne.w	13f2 <storeData(int) [clone .part.0]+0x56a>
	virtual ~SDFile(void) {
     f16:	ldr	r3, [pc, #512]	; (1118 <storeData(int) [clone .part.0]+0x290>)
		if (filename) {
     f18:	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
     f1a:	str	r3, [r4, #0]
		if (filename) {
     f1c:	cbz	r0, f26 <storeData(int) [clone .part.0]+0x9e>
			free(filename);
     f1e:	bl	ceac <free>
			filename = nullptr;
     f22:	movs	r3, #0
     f24:	str	r3, [r4, #88]	; 0x58
     f26:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     f28:	add.w	r6, r4, #24
     f2c:	cmp	r3, #0
     f2e:	beq.w	1348 <storeData(int) [clone .part.0]+0x4c0>
     f32:	mov	r0, r6
     f34:	bl	73e8 <FsBaseFile::close()>
     f38:	ldr	r3, [pc, #480]	; (111c <storeData(int) [clone .part.0]+0x294>)
  ~FsBaseFile() { close(); }
     f3a:	mov	r0, r6
     f3c:	str	r3, [r4, #8]
     f3e:	bl	73e8 <FsBaseFile::close()>
	}
     f42:	movs	r1, #92	; 0x5c
     f44:	mov	r0, r4
     f46:	bl	cd08 <operator delete(void*, unsigned int)>
		}
		f = nullptr;
     f4a:	movs	r3, #0
	}
     f4c:	mov.w	r0, #4294967295
		f = nullptr;
     f50:	str	r3, [r5, #16]
          break;
    default:
          status=-1;
  }
  return status;
}
     f52:	add	sp, #80	; 0x50
     f54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(newDirectory(dirName)) 
     f58:	ldr	r0, [pc, #452]	; (1120 <storeData(int) [clone .part.0]+0x298>)
     f5a:	bl	cd8 <newDirectory(char*)>
     f5e:	cmp	r0, #0
     f60:	beq.w	1162 <storeData(int) [clone .part.0]+0x2da>
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol   ? m_fVol->exists(path)
     f64:	ldr	r4, [pc, #444]	; (1124 <storeData(int) [clone .part.0]+0x29c>)
     f66:	ldr.w	r2, [r4, #1156]	; 0x484
     f6a:	cmp	r2, #0
     f6c:	beq.w	1144 <storeData(int) [clone .part.0]+0x2bc>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     f70:	mov	r5, sp
  FatFile() {}
     f72:	movs	r3, #0
     f74:	mov	r1, r2
     f76:	ldr	r2, [pc, #424]	; (1120 <storeData(int) [clone .part.0]+0x298>)
     f78:	mov	r0, r5
     f7a:	str	r3, [sp, #0]
     f7c:	bl	5c90 <FatFile::open(FatVolume*, char const*, int)>
          {   if( !SD.exists(dirName) && 
     f80:	cmp	r0, #0
     f82:	bne.w	1162 <storeData(int) [clone .part.0]+0x2da>
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
     f86:	ldr.w	r6, [r4, #1156]	; 0x484
     f8a:	cmp	r6, #0
     f8c:	beq.w	1486 <storeData(int) [clone .part.0]+0x5fe>
     f90:	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     f92:	movs	r3, #1
     f94:	ldr	r2, [pc, #392]	; (1120 <storeData(int) [clone .part.0]+0x298>)
     f96:	addw	r1, r6, #1092	; 0x444
     f9a:	mov	r0, r5
     f9c:	str	r4, [sp, #0]
     f9e:	bl	5ab4 <FatFile::mkdir(FatFile*, char const*, bool)>
     fa2:	cmp	r0, #0
     fa4:	bne.w	1162 <storeData(int) [clone .part.0]+0x2da>
{ Serial.println();
     fa8:	ldr	r0, [pc, #380]	; (1128 <storeData(int) [clone .part.0]+0x2a0>)
     faa:	bl	ccb8 <Print::println()>
     fae:	movs	r2, #9
     fb0:	ldr	r1, [pc, #376]	; (112c <storeData(int) [clone .part.0]+0x2a4>)
     fb2:	ldr	r0, [pc, #372]	; (1128 <storeData(int) [clone .part.0]+0x2a0>)
     fb4:	bl	c01c <usb_serial_class::write(unsigned char const*, unsigned int)>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     fb8:	ldr	r0, [pc, #364]	; (1128 <storeData(int) [clone .part.0]+0x2a0>)
     fba:	bl	ccb8 <Print::println()>
                  !SD.mkdir(dirName)) return ErrorMsg("Error Dir");
     fbe:	mov.w	r0, #4294967295
     fc2:	b.n	1104 <storeData(int) [clone .part.0]+0x27c>
          makeHeader(header);
     fc4:	ldr	r0, [pc, #360]	; (1130 <storeData(int) [clone .part.0]+0x2a8>)
     fc6:	bl	e00 <makeHeader(char*)>
          if(file.write((const void*)header,512) < 512) return ErrorMsg("Error Header");
     fca:	ldr	r3, [pc, #320]	; (110c <storeData(int) [clone .part.0]+0x284>)
     fcc:	ldr	r3, [r3, #16]
		return (f) ? f->write(buf, size) : 0;
     fce:	cbz	r3, ff4 <storeData(int) [clone .part.0]+0x16c>
     fd0:	ldr	r1, [r3, #0]
     fd2:	ldr	r2, [pc, #352]	; (1134 <storeData(int) [clone .part.0]+0x2ac>)
     fd4:	ldr	r4, [r1, #12]
     fd6:	cmp	r4, r2
     fd8:	bne.w	13ca <storeData(int) [clone .part.0]+0x542>
    return m_fFile   ? m_fFile->write(buf, count)
     fdc:	ldr	r0, [r3, #80]	; 0x50
     fde:	cmp	r0, #0
     fe0:	beq.w	1298 <storeData(int) [clone .part.0]+0x410>
     fe4:	mov.w	r2, #512	; 0x200
     fe8:	ldr	r1, [pc, #324]	; (1130 <storeData(int) [clone .part.0]+0x2a8>)
     fea:	bl	6580 <FatFile::write(void const*, unsigned int)>
     fee:	cmp.w	r0, #512	; 0x200
     ff2:	bcs.n	1046 <storeData(int) [clone .part.0]+0x1be>
{ Serial.println();
     ff4:	ldr	r0, [pc, #304]	; (1128 <storeData(int) [clone .part.0]+0x2a0>)
     ff6:	bl	ccb8 <Print::println()>
     ffa:	movs	r1, #12
     ffc:	ldr	r0, [pc, #312]	; (1138 <storeData(int) [clone .part.0]+0x2b0>)
     ffe:	bl	a4a8 <usb_serial_write>
    1002:	ldr	r0, [pc, #292]	; (1128 <storeData(int) [clone .part.0]+0x2a0>)
    1004:	bl	ccb8 <Print::println()>
          if(file.write((const void*)header,512) < 512) return ErrorMsg("Error Header");
    1008:	mov.w	r0, #4294967295
    100c:	b.n	1104 <storeData(int) [clone .part.0]+0x27c>
          disk_count++;
    100e:	ldr	r2, [pc, #300]	; (113c <storeData(int) [clone .part.0]+0x2b4>)
    1010:	ldr	r1, [pc, #248]	; (110c <storeData(int) [clone .part.0]+0x284>)
    1012:	ldr	r3, [r2, #0]
    1014:	ldr	r4, [r1, #16]
    1016:	adds	r3, #1
    1018:	str	r3, [r2, #0]
    101a:	cmp	r4, #0
    101c:	beq.w	127e <storeData(int) [clone .part.0]+0x3f6>
    1020:	ldr	r3, [r4, #0]
    1022:	ldr	r2, [pc, #272]	; (1134 <storeData(int) [clone .part.0]+0x2ac>)
    1024:	ldr	r3, [r3, #12]
    1026:	cmp	r3, r2
    1028:	bne.w	13dc <storeData(int) [clone .part.0]+0x554>
    102c:	ldr	r0, [r4, #80]	; 0x50
    102e:	cmp	r0, #0
    1030:	beq.w	12ac <storeData(int) [clone .part.0]+0x424>
    1034:	mov.w	r2, #4096	; 0x1000
    1038:	ldr	r1, [pc, #260]	; (1140 <storeData(int) [clone .part.0]+0x2b8>)
    103a:	bl	6580 <FatFile::write(void const*, unsigned int)>
          if(file.write((const void *)diskBuffer, nbuf) < (size_t) nbuf) return ErrorMsg("Error Data");
    103e:	cmp.w	r0, #4096	; 0x1000
    1042:	bcc.w	127e <storeData(int) [clone .part.0]+0x3f6>
  switch(status)
    1046:	movs	r0, #2
}
    1048:	add	sp, #80	; 0x50
    104a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (f) {
    104e:	ldr	r5, [pc, #188]	; (110c <storeData(int) [clone .part.0]+0x284>)
    1050:	ldr	r4, [r5, #16]
    1052:	cmp	r4, #0
    1054:	beq.w	1366 <storeData(int) [clone .part.0]+0x4de>
			f->close();
    1058:	ldr	r3, [r4, #0]
    105a:	ldr	r6, [pc, #180]	; (1110 <storeData(int) [clone .part.0]+0x288>)
    105c:	ldr	r3, [r3, #44]	; 0x2c
    105e:	cmp	r3, r6
    1060:	bne.w	13d6 <storeData(int) [clone .part.0]+0x54e>
		if (filename) {
    1064:	ldr	r0, [r4, #88]	; 0x58
    1066:	cbz	r0, 1070 <storeData(int) [clone .part.0]+0x1e8>
			free(filename);
    1068:	bl	ceac <free>
			filename = nullptr;
    106c:	movs	r3, #0
    106e:	str	r3, [r4, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
    1070:	ldr	r3, [r4, #80]	; 0x50
    1072:	cmp	r3, #0
    1074:	beq.w	13b2 <storeData(int) [clone .part.0]+0x52a>
			sdfatfile.close();
    1078:	add.w	r0, r4, #24
    107c:	bl	73e8 <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    1080:	ldr	r7, [r5, #16]
    1082:	ldr	r4, [r7, #4]
    1084:	subs	r4, #1
    1086:	str	r4, [r7, #4]
    1088:	cmp	r4, #0
    108a:	bne.n	10f4 <storeData(int) [clone .part.0]+0x26c>
			f->close();
    108c:	ldr	r3, [r7, #0]
    108e:	ldr	r3, [r3, #44]	; 0x2c
    1090:	cmp	r3, r6
    1092:	bne.w	1352 <storeData(int) [clone .part.0]+0x4ca>
		if (filename) {
    1096:	ldr	r0, [r7, #88]	; 0x58
    1098:	cbz	r0, 10a0 <storeData(int) [clone .part.0]+0x218>
			free(filename);
    109a:	bl	ceac <free>
			filename = nullptr;
    109e:	str	r4, [r7, #88]	; 0x58
    10a0:	ldr	r3, [r7, #80]	; 0x50
    10a2:	cmp	r3, #0
    10a4:	beq.w	1438 <storeData(int) [clone .part.0]+0x5b0>
			sdfatfile.close();
    10a8:	add.w	r0, r7, #24
    10ac:	bl	73e8 <FsBaseFile::close()>
			delete f;
    10b0:	ldr	r4, [r5, #16]
    10b2:	cbz	r4, 10f4 <storeData(int) [clone .part.0]+0x26c>
    10b4:	ldr	r3, [r4, #0]
    10b6:	ldr	r2, [pc, #92]	; (1114 <storeData(int) [clone .part.0]+0x28c>)
    10b8:	ldr	r3, [r3, #4]
    10ba:	cmp	r3, r2
    10bc:	bne.w	146c <storeData(int) [clone .part.0]+0x5e4>
	virtual ~SDFile(void) {
    10c0:	ldr	r3, [pc, #84]	; (1118 <storeData(int) [clone .part.0]+0x290>)
		if (filename) {
    10c2:	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    10c4:	str	r3, [r4, #0]
		if (filename) {
    10c6:	cbz	r0, 10d0 <storeData(int) [clone .part.0]+0x248>
			free(filename);
    10c8:	bl	ceac <free>
			filename = nullptr;
    10cc:	movs	r3, #0
    10ce:	str	r3, [r4, #88]	; 0x58
    10d0:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    10d2:	add.w	r6, r4, #24
    10d6:	cmp	r3, #0
    10d8:	beq.w	1456 <storeData(int) [clone .part.0]+0x5ce>
    10dc:	mov	r0, r6
    10de:	bl	73e8 <FsBaseFile::close()>
    10e2:	ldr	r3, [pc, #56]	; (111c <storeData(int) [clone .part.0]+0x294>)
  ~FsBaseFile() { close(); }
    10e4:	mov	r0, r6
    10e6:	str	r3, [r4, #8]
    10e8:	bl	73e8 <FsBaseFile::close()>
	}
    10ec:	movs	r1, #92	; 0x5c
    10ee:	mov	r0, r4
    10f0:	bl	cd08 <operator delete(void*, unsigned int)>
		f = nullptr;
    10f4:	movs	r3, #0
	}
    10f6:	mov	r0, r3
		f = nullptr;
    10f8:	str	r3, [r5, #16]
    10fa:	add	sp, #80	; 0x50
    10fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1100:	mov.w	r0, #4294967295
    1104:	add	sp, #80	; 0x50
    1106:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    110a:	nop
    110c:	.word	0x200076a8
    1110:	.word	0x000001bd
    1114:	.word	0x000008dd
    1118:	.word	0x20000adc
    111c:	.word	0x2000099c
    1120:	.word	0x200065fc
    1124:	.word	0x20005300
    1128:	.word	0x20001450
    112c:	.word	0x20000514
    1130:	.word	0x2000773c
    1134:	.word	0x000006d1
    1138:	.word	0x20000548
    113c:	.word	0x2000767c
    1140:	.word	0x2000667c
    1144:	ldr.w	r1, [r4, #1160]	; 0x488
           : m_xVol ? m_xVol->exists(path)
    1148:	cmp	r1, #0
    114a:	beq.w	fa8 <storeData(int) [clone .part.0]+0x120>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    114e:	mov	r5, sp
    1150:	mov	r3, r2
  ExFatFile() {}
    1152:	str	r2, [sp, #48]	; 0x30
    1154:	mov	r0, r5
    1156:	ldr	r2, [pc, #672]	; (13f8 <storeData(int) [clone .part.0]+0x570>)
    1158:	bl	4044 <ExFatFile::open(ExFatVolume*, char const*, int)>
    115c:	cmp	r0, #0
    115e:	beq.w	f86 <storeData(int) [clone .part.0]+0xfe>
          if(!newFileName(fileName))return ErrorMsg("Failing new file");
    1162:	ldr	r0, [pc, #664]	; (13fc <storeData(int) [clone .part.0]+0x574>)
    1164:	bl	d70 <newFileName(char*)>
    1168:	cmp	r0, #0
    116a:	beq.w	14b4 <storeData(int) [clone .part.0]+0x62c>
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    116e:	movw	r3, #514	; 0x202
    1172:	ldr	r2, [pc, #648]	; (13fc <storeData(int) [clone .part.0]+0x574>)
    1174:	ldr	r1, [pc, #648]	; (1400 <storeData(int) [clone .part.0]+0x578>)
    1176:	mov	r0, sp
    1178:	bl	7640 <FsVolume::open(char const*, int)>
  bool isOpen() const { return m_fFile || m_xFile; }
    117c:	ldr	r3, [sp, #72]	; 0x48
    117e:	cmp	r3, #0
    1180:	beq.w	1372 <storeData(int) [clone .part.0]+0x4ea>
		if (file) return File(new SDFile(file));
    1184:	movs	r0, #92	; 0x5c
class FileImpl {
    1186:	movs	r5, #0
    1188:	bl	cd04 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    118c:	ldr	r3, [pc, #628]	; (1404 <storeData(int) [clone .part.0]+0x57c>)
class Print
    118e:	ldrb.w	r6, [sp, #4]
		if (file) return File(new SDFile(file));
    1192:	mov	r4, r0
class Stream : public Print
    1194:	ldr	r1, [sp, #8]
    1196:	adds	r0, #24
    1198:	ldrb.w	r2, [sp, #12]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    119c:	str.w	r3, [r0, #-24]
    11a0:	ldr	r3, [pc, #612]	; (1408 <storeData(int) [clone .part.0]+0x580>)
    11a2:	strb.w	r6, [r0, #-12]
    11a6:	str.w	r1, [r0, #-8]
    11aa:	add	r1, sp, #16
    11ac:	str.w	r5, [r0, #-20]
    11b0:	strb.w	r2, [r0, #-4]
    11b4:	str.w	r3, [r0, #-16]
    11b8:	bl	7364 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		if (f) f->refcount++;
    11bc:	ldr	r3, [r4, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    11be:	ldr	r2, [pc, #588]	; (140c <storeData(int) [clone .part.0]+0x584>)
  ~FsBaseFile() { close(); }
    11c0:	add	r0, sp, #16
    11c2:	adds	r3, #1
    11c4:	ldr.w	r8, [pc, #620]	; 1434 <storeData(int) [clone .part.0]+0x5ac>
    11c8:	str	r5, [r4, #88]	; 0x58
    11ca:	str	r3, [r4, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    11cc:	str	r2, [r4, #8]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    11ce:	ldr	r5, [pc, #576]	; (1410 <storeData(int) [clone .part.0]+0x588>)
    11d0:	str.w	r8, [sp]
  ~FsBaseFile() { close(); }
    11d4:	bl	73e8 <FsBaseFile::close()>
		if (file.f) file.f->refcount++;
    11d8:	ldr	r7, [r4, #4]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    11da:	ldr	r6, [r5, #16]
		if (file.f) file.f->refcount++;
    11dc:	adds	r3, r7, #1
    11de:	str	r3, [r4, #4]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    11e0:	cmp	r6, #0
    11e2:	beq.w	1362 <storeData(int) [clone .part.0]+0x4da>
		if (--(f->refcount) == 0) {
    11e6:	ldr	r3, [r6, #4]
    11e8:	subs	r3, #1
    11ea:	str	r3, [r6, #4]
    11ec:	cmp	r3, #0
    11ee:	bne.n	12be <storeData(int) [clone .part.0]+0x436>
			f->close();
    11f0:	ldr	r3, [r6, #0]
    11f2:	ldr	r2, [pc, #544]	; (1414 <storeData(int) [clone .part.0]+0x58c>)
    11f4:	ldr	r3, [r3, #44]	; 0x2c
    11f6:	cmp	r3, r2
    11f8:	bne.w	1466 <storeData(int) [clone .part.0]+0x5de>
		if (filename) {
    11fc:	ldr	r0, [r6, #88]	; 0x58
    11fe:	cbz	r0, 1208 <storeData(int) [clone .part.0]+0x380>
			free(filename);
    1200:	bl	ceac <free>
			filename = nullptr;
    1204:	movs	r3, #0
    1206:	str	r3, [r6, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
    1208:	ldr	r3, [r6, #80]	; 0x50
    120a:	cmp	r3, #0
    120c:	beq.w	1442 <storeData(int) [clone .part.0]+0x5ba>
			sdfatfile.close();
    1210:	add.w	r0, r6, #24
    1214:	bl	73e8 <FsBaseFile::close()>
			delete f;
    1218:	ldr	r6, [r5, #16]
    121a:	cbz	r6, 125c <storeData(int) [clone .part.0]+0x3d4>
    121c:	ldr	r3, [r6, #0]
    121e:	ldr	r2, [pc, #504]	; (1418 <storeData(int) [clone .part.0]+0x590>)
    1220:	ldr	r3, [r3, #4]
    1222:	cmp	r3, r2
    1224:	bne.w	14a8 <storeData(int) [clone .part.0]+0x620>
	virtual ~SDFile(void) {
    1228:	ldr	r3, [pc, #472]	; (1404 <storeData(int) [clone .part.0]+0x57c>)
		if (filename) {
    122a:	ldr	r0, [r6, #88]	; 0x58
	virtual ~SDFile(void) {
    122c:	str	r3, [r6, #0]
		if (filename) {
    122e:	cbz	r0, 1238 <storeData(int) [clone .part.0]+0x3b0>
			free(filename);
    1230:	bl	ceac <free>
			filename = nullptr;
    1234:	movs	r3, #0
    1236:	str	r3, [r6, #88]	; 0x58
    1238:	ldr	r3, [r6, #80]	; 0x50
			sdfatfile.close();
    123a:	add.w	r7, r6, #24
    123e:	cmp	r3, #0
    1240:	beq.w	1472 <storeData(int) [clone .part.0]+0x5ea>
    1244:	mov	r0, r7
    1246:	bl	73e8 <FsBaseFile::close()>
  ~FsBaseFile() { close(); }
    124a:	mov	r0, r7
    124c:	str.w	r8, [r6, #8]
    1250:	bl	73e8 <FsBaseFile::close()>
	}
    1254:	movs	r1, #92	; 0x5c
    1256:	mov	r0, r6
    1258:	bl	cd08 <operator delete(void*, unsigned int)>
		f = file.f;
    125c:	str	r4, [r5, #16]
		if (f) dec_refcount();
    125e:	cmp	r4, #0
    1260:	bne.w	14ae <storeData(int) [clone .part.0]+0x626>
{ Serial.println();
    1264:	ldr	r0, [pc, #436]	; (141c <storeData(int) [clone .part.0]+0x594>)
    1266:	bl	ccb8 <Print::println()>
    126a:	movs	r1, #17
    126c:	ldr	r0, [pc, #432]	; (1420 <storeData(int) [clone .part.0]+0x598>)
    126e:	bl	a4a8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1272:	ldr	r0, [pc, #424]	; (141c <storeData(int) [clone .part.0]+0x594>)
    1274:	bl	ccb8 <Print::println()>
          if(!file) return ErrorMsg("Failing open file");
    1278:	mov.w	r0, #4294967295
    127c:	b.n	1104 <storeData(int) [clone .part.0]+0x27c>
{ Serial.println();
    127e:	ldr	r0, [pc, #412]	; (141c <storeData(int) [clone .part.0]+0x594>)
    1280:	bl	ccb8 <Print::println()>
    1284:	movs	r1, #10
    1286:	ldr	r0, [pc, #412]	; (1424 <storeData(int) [clone .part.0]+0x59c>)
    1288:	bl	a4a8 <usb_serial_write>
    128c:	ldr	r0, [pc, #396]	; (141c <storeData(int) [clone .part.0]+0x594>)
    128e:	bl	ccb8 <Print::println()>
          if(file.write((const void *)diskBuffer, nbuf) < (size_t) nbuf) return ErrorMsg("Error Data");
    1292:	mov.w	r0, #4294967295
    1296:	b.n	1104 <storeData(int) [clone .part.0]+0x27c>
    1298:	ldr	r0, [r3, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
    129a:	cmp	r0, #0
    129c:	beq.w	ff4 <storeData(int) [clone .part.0]+0x16c>
    12a0:	mov.w	r2, #512	; 0x200
    12a4:	ldr	r1, [pc, #384]	; (1428 <storeData(int) [clone .part.0]+0x5a0>)
    12a6:	bl	4dc8 <ExFatFile::write(void const*, unsigned int)>
    12aa:	b.n	fee <storeData(int) [clone .part.0]+0x166>
    12ac:	ldr	r0, [r4, #84]	; 0x54
    12ae:	cmp	r0, #0
    12b0:	beq.n	127e <storeData(int) [clone .part.0]+0x3f6>
    12b2:	mov.w	r2, #4096	; 0x1000
    12b6:	ldr	r1, [pc, #372]	; (142c <storeData(int) [clone .part.0]+0x5a4>)
    12b8:	bl	4dc8 <ExFatFile::write(void const*, unsigned int)>
    12bc:	b.n	103e <storeData(int) [clone .part.0]+0x1b6>
		if (--(f->refcount) == 0) {
    12be:	ldr	r7, [r4, #4]
		f = file.f;
    12c0:	str	r4, [r5, #16]
		if (--(f->refcount) == 0) {
    12c2:	subs	r7, #1
    12c4:	str	r7, [r4, #4]
    12c6:	cmp	r7, #0
    12c8:	bne.n	136e <storeData(int) [clone .part.0]+0x4e6>
			f->close();
    12ca:	ldr	r3, [r4, #0]
    12cc:	ldr	r2, [pc, #324]	; (1414 <storeData(int) [clone .part.0]+0x58c>)
    12ce:	ldr	r3, [r3, #44]	; 0x2c
    12d0:	cmp	r3, r2
    12d2:	bne.w	1460 <storeData(int) [clone .part.0]+0x5d8>
		if (filename) {
    12d6:	ldr	r0, [r4, #88]	; 0x58
    12d8:	cbz	r0, 12e0 <storeData(int) [clone .part.0]+0x458>
			free(filename);
    12da:	bl	ceac <free>
			filename = nullptr;
    12de:	str	r7, [r4, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
    12e0:	ldr	r3, [r4, #80]	; 0x50
    12e2:	cmp	r3, #0
    12e4:	beq.w	144c <storeData(int) [clone .part.0]+0x5c4>
			sdfatfile.close();
    12e8:	add.w	r0, r4, #24
    12ec:	bl	73e8 <FsBaseFile::close()>
			delete f;
    12f0:	ldr	r3, [r4, #0]
    12f2:	ldr	r2, [pc, #292]	; (1418 <storeData(int) [clone .part.0]+0x590>)
    12f4:	ldr	r3, [r3, #4]
    12f6:	cmp	r3, r2
    12f8:	bne.n	136a <storeData(int) [clone .part.0]+0x4e2>
	virtual ~SDFile(void) {
    12fa:	ldr	r3, [pc, #264]	; (1404 <storeData(int) [clone .part.0]+0x57c>)
		if (filename) {
    12fc:	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    12fe:	str	r3, [r4, #0]
		if (filename) {
    1300:	cbz	r0, 130a <storeData(int) [clone .part.0]+0x482>
			free(filename);
    1302:	bl	ceac <free>
			filename = nullptr;
    1306:	movs	r3, #0
    1308:	str	r3, [r4, #88]	; 0x58
    130a:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    130c:	add.w	r6, r4, #24
    1310:	cmp	r3, #0
    1312:	beq.w	147c <storeData(int) [clone .part.0]+0x5f4>
    1316:	mov	r0, r6
    1318:	bl	73e8 <FsBaseFile::close()>
  ~FsBaseFile() { close(); }
    131c:	mov	r0, r6
    131e:	str.w	r8, [r4, #8]
    1322:	bl	73e8 <FsBaseFile::close()>
	}
    1326:	mov	r0, r4
    1328:	movs	r1, #92	; 0x5c
    132a:	bl	cd08 <operator delete(void*, unsigned int)>
    132e:	ldr	r0, [r5, #16]
		return (f) ? f->isOpen() : false;
    1330:	cmp	r0, #0
    1332:	beq.n	1264 <storeData(int) [clone .part.0]+0x3dc>
    1334:	ldr	r3, [r0, #0]
    1336:	ldr	r2, [pc, #248]	; (1430 <storeData(int) [clone .part.0]+0x5a8>)
    1338:	ldr	r3, [r3, #48]	; 0x30
    133a:	cmp	r3, r2
    133c:	bne.n	13e8 <storeData(int) [clone .part.0]+0x560>
  bool isOpen() const { return m_fFile || m_xFile; }
    133e:	ldr	r3, [r0, #80]	; 0x50
    1340:	cmp	r3, #0
    1342:	beq.n	13bc <storeData(int) [clone .part.0]+0x534>
  switch(status)
    1344:	movs	r0, #1
    1346:	b.n	1104 <storeData(int) [clone .part.0]+0x27c>
    1348:	ldr	r3, [r4, #84]	; 0x54
    134a:	cmp	r3, #0
    134c:	bne.w	f32 <storeData(int) [clone .part.0]+0xaa>
    1350:	b.n	f38 <storeData(int) [clone .part.0]+0xb0>
			f->close();
    1352:	mov	r0, r7
    1354:	blx	r3
    1356:	b.n	10b0 <storeData(int) [clone .part.0]+0x228>
    1358:	ldr	r3, [r4, #84]	; 0x54
    135a:	cmp	r3, #0
    135c:	bne.w	ece <storeData(int) [clone .part.0]+0x46>
    1360:	b.n	ed6 <storeData(int) [clone .part.0]+0x4e>
		f = file.f;
    1362:	str	r4, [r5, #16]
		if (f) dec_refcount();
    1364:	b.n	12c4 <storeData(int) [clone .part.0]+0x43c>
    1366:	mov	r0, r4
    1368:	b.n	1104 <storeData(int) [clone .part.0]+0x27c>
			delete f;
    136a:	mov	r0, r4
    136c:	blx	r3
    136e:	ldr	r0, [r5, #16]
    1370:	b.n	1330 <storeData(int) [clone .part.0]+0x4a8>
    1372:	ldr	r4, [sp, #76]	; 0x4c
    1374:	cmp	r4, #0
    1376:	bne.w	1184 <storeData(int) [clone .part.0]+0x2fc>
    137a:	ldr.w	r8, [pc, #184]	; 1434 <storeData(int) [clone .part.0]+0x5ac>
  ~FsBaseFile() { close(); }
    137e:	add	r0, sp, #16
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    1380:	ldr	r5, [pc, #140]	; (1410 <storeData(int) [clone .part.0]+0x588>)
    1382:	str.w	r8, [sp]
    1386:	bl	73e8 <FsBaseFile::close()>
    138a:	ldr	r6, [r5, #16]
    138c:	cmp	r6, #0
    138e:	beq.w	1264 <storeData(int) [clone .part.0]+0x3dc>
		if (--(f->refcount) == 0) {
    1392:	ldr	r3, [r6, #4]
    1394:	subs	r3, #1
    1396:	str	r3, [r6, #4]
    1398:	cmp	r3, #0
    139a:	beq.w	11f0 <storeData(int) [clone .part.0]+0x368>
		f = nullptr;
    139e:	str	r4, [r5, #16]
		return (f) ? f->isOpen() : false;
    13a0:	b.n	1264 <storeData(int) [clone .part.0]+0x3dc>
			f->close();
    13a2:	mov	r0, r4
    13a4:	blx	r3
    13a6:	b.n	ed6 <storeData(int) [clone .part.0]+0x4e>
  bool isOpen() const { return m_fFile || m_xFile; }
    13a8:	ldr	r3, [r7, #84]	; 0x54
    13aa:	cmp	r3, #0
    13ac:	bne.w	efe <storeData(int) [clone .part.0]+0x76>
    13b0:	b.n	f06 <storeData(int) [clone .part.0]+0x7e>
    13b2:	ldr	r3, [r4, #84]	; 0x54
    13b4:	cmp	r3, #0
    13b6:	bne.w	1078 <storeData(int) [clone .part.0]+0x1f0>
    13ba:	b.n	1080 <storeData(int) [clone .part.0]+0x1f8>
    13bc:	ldr	r3, [r0, #84]	; 0x54
    13be:	cmp	r3, #0
    13c0:	bne.n	1344 <storeData(int) [clone .part.0]+0x4bc>
    13c2:	b.n	1264 <storeData(int) [clone .part.0]+0x3dc>
			f->close();
    13c4:	mov	r0, r7
    13c6:	blx	r3
    13c8:	b.n	f06 <storeData(int) [clone .part.0]+0x7e>
		return (f) ? f->write(buf, size) : 0;
    13ca:	mov.w	r2, #512	; 0x200
    13ce:	ldr	r1, [pc, #88]	; (1428 <storeData(int) [clone .part.0]+0x5a0>)
    13d0:	mov	r0, r3
    13d2:	blx	r4
    13d4:	b.n	fee <storeData(int) [clone .part.0]+0x166>
			f->close();
    13d6:	mov	r0, r4
    13d8:	blx	r3
    13da:	b.n	1080 <storeData(int) [clone .part.0]+0x1f8>
		return (f) ? f->write(buf, size) : 0;
    13dc:	mov.w	r2, #4096	; 0x1000
    13e0:	ldr	r1, [pc, #72]	; (142c <storeData(int) [clone .part.0]+0x5a4>)
    13e2:	mov	r0, r4
    13e4:	blx	r3
    13e6:	b.n	103e <storeData(int) [clone .part.0]+0x1b6>
		return (f) ? f->isOpen() : false;
    13e8:	blx	r3
    13ea:	cmp	r0, #0
    13ec:	beq.w	1264 <storeData(int) [clone .part.0]+0x3dc>
    13f0:	b.n	1344 <storeData(int) [clone .part.0]+0x4bc>
			delete f;
    13f2:	mov	r0, r4
    13f4:	blx	r3
    13f6:	b.n	f4a <storeData(int) [clone .part.0]+0xc2>
    13f8:	.word	0x200065fc
    13fc:	.word	0x200076bc
    1400:	.word	0x20005304
    1404:	.word	0x20000adc
    1408:	.word	0x20000b38
    140c:	.word	0x20000aac
    1410:	.word	0x200076a8
    1414:	.word	0x000001bd
    1418:	.word	0x000008dd
    141c:	.word	0x20001450
    1420:	.word	0x20000534
    1424:	.word	0x20000558
    1428:	.word	0x2000773c
    142c:	.word	0x2000667c
    1430:	.word	0x00000071
    1434:	.word	0x2000099c
    1438:	ldr	r3, [r7, #84]	; 0x54
    143a:	cmp	r3, #0
    143c:	bne.w	10a8 <storeData(int) [clone .part.0]+0x220>
    1440:	b.n	10b0 <storeData(int) [clone .part.0]+0x228>
    1442:	ldr	r3, [r6, #84]	; 0x54
    1444:	cmp	r3, #0
    1446:	bne.w	1210 <storeData(int) [clone .part.0]+0x388>
    144a:	b.n	1218 <storeData(int) [clone .part.0]+0x390>
    144c:	ldr	r3, [r4, #84]	; 0x54
    144e:	cmp	r3, #0
    1450:	bne.w	12e8 <storeData(int) [clone .part.0]+0x460>
    1454:	b.n	12f0 <storeData(int) [clone .part.0]+0x468>
    1456:	ldr	r3, [r4, #84]	; 0x54
    1458:	cmp	r3, #0
    145a:	bne.w	10dc <storeData(int) [clone .part.0]+0x254>
    145e:	b.n	10e2 <storeData(int) [clone .part.0]+0x25a>
			f->close();
    1460:	mov	r0, r4
    1462:	blx	r3
    1464:	b.n	12f0 <storeData(int) [clone .part.0]+0x468>
    1466:	mov	r0, r6
    1468:	blx	r3
    146a:	b.n	1218 <storeData(int) [clone .part.0]+0x390>
			delete f;
    146c:	mov	r0, r4
    146e:	blx	r3
    1470:	b.n	10f4 <storeData(int) [clone .part.0]+0x26c>
    1472:	ldr	r3, [r6, #84]	; 0x54
    1474:	cmp	r3, #0
    1476:	bne.w	1244 <storeData(int) [clone .part.0]+0x3bc>
    147a:	b.n	124a <storeData(int) [clone .part.0]+0x3c2>
    147c:	ldr	r3, [r4, #84]	; 0x54
    147e:	cmp	r3, #0
    1480:	bne.w	1316 <storeData(int) [clone .part.0]+0x48e>
    1484:	b.n	131c <storeData(int) [clone .part.0]+0x494>
    1486:	ldr.w	r1, [r4, #1160]	; 0x488
           : m_xVol ? m_xVol->mkdir(path, pFlag)
    148a:	cmp	r1, #0
    148c:	beq.w	fa8 <storeData(int) [clone .part.0]+0x120>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1490:	movs	r3, #1
    1492:	ldr	r2, [pc, #60]	; (14d0 <storeData(int) [clone .part.0]+0x648>)
    1494:	add.w	r1, r1, #1096	; 0x448
    1498:	mov	r0, r5
    149a:	str	r6, [sp, #48]	; 0x30
    149c:	bl	4a98 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    14a0:	cmp	r0, #0
    14a2:	beq.w	fa8 <storeData(int) [clone .part.0]+0x120>
    14a6:	b.n	1162 <storeData(int) [clone .part.0]+0x2da>
    14a8:	mov	r0, r6
    14aa:	blx	r3
    14ac:	b.n	125c <storeData(int) [clone .part.0]+0x3d4>
		if (--(f->refcount) == 0) {
    14ae:	ldr	r7, [r4, #4]
    14b0:	subs	r7, #1
    14b2:	b.n	12c4 <storeData(int) [clone .part.0]+0x43c>
{ Serial.println();
    14b4:	ldr	r0, [pc, #28]	; (14d4 <storeData(int) [clone .part.0]+0x64c>)
    14b6:	bl	ccb8 <Print::println()>
    14ba:	movs	r1, #16
    14bc:	ldr	r0, [pc, #24]	; (14d8 <storeData(int) [clone .part.0]+0x650>)
    14be:	bl	a4a8 <usb_serial_write>
    14c2:	ldr	r0, [pc, #16]	; (14d4 <storeData(int) [clone .part.0]+0x64c>)
    14c4:	bl	ccb8 <Print::println()>
          if(!newFileName(fileName))return ErrorMsg("Failing new file");
    14c8:	mov.w	r0, #4294967295
    14cc:	b.n	1104 <storeData(int) [clone .part.0]+0x27c>
    14ce:	nop
    14d0:	.word	0x200065fc
    14d4:	.word	0x20001450
    14d8:	.word	0x20000520

000014dc <storeBegin()>:
{
    14dc:	push	{r3, r4, r5, r6, r7, lr}
    14de:	movs	r4, #5
    if(!(SD.begin(BUILTIN_SDCARD))) 
    14e0:	ldr	r6, [pc, #64]	; (1524 <storeBegin()+0x48>)
    14e2:	ldr	r5, [pc, #68]	; (1528 <storeBegin()+0x4c>)
    14e4:	ldr	r7, [pc, #68]	; (152c <storeBegin()+0x50>)
    14e6:	movs	r1, #254	; 0xfe
    14e8:	mov	r0, r6
    14ea:	bl	2bdc <SDClass::begin(unsigned char)>
    14ee:	mov	r3, r0
    14f0:	movs	r1, #28
    14f2:	mov	r0, r5
    14f4:	cbnz	r3, 150c <storeBegin()+0x30>
    14f6:	bl	a4a8 <usb_serial_write>
    14fa:	mov	r0, r7
    14fc:	bl	ccb8 <Print::println()>
      delay(100);
    1500:	movs	r0, #100	; 0x64
    1502:	bl	b430 <delay>
  for(int ii=0;ii<5;ii++)
    1506:	subs	r4, #1
    1508:	bne.n	14e6 <storeBegin()+0xa>
}
    150a:	pop	{r3, r4, r5, r6, r7, pc}
    150c:	movs	r1, #13
    150e:	ldr	r0, [pc, #32]	; (1530 <storeBegin()+0x54>)
    1510:	bl	a4a8 <usb_serial_write>
    1514:	ldr	r0, [pc, #20]	; (152c <storeBegin()+0x50>)
    1516:	bl	ccb8 <Print::println()>
      haveSD=1;
    151a:	ldr	r3, [pc, #24]	; (1534 <storeBegin()+0x58>)
    151c:	movs	r2, #1
    151e:	strh	r2, [r3, #0]
}
    1520:	pop	{r3, r4, r5, r6, r7, pc}
    1522:	nop
    1524:	.word	0x20005300
    1528:	.word	0x20000494
    152c:	.word	0x20001450
    1530:	.word	0x200004b4
    1534:	.word	0x20007dcc

00001538 <setup>:
  AudioConnection          patchCord4(proc, 0, queue1, 0);
#else
  AudioConnection          patchCord4(acq, 0, queue1, 0);
#endif

void setup() {
    1538:	push	{r4, lr}
  // put your setup code here, to run once:
  AudioMemory(60);
    153a:	movs	r1, #60	; 0x3c
    153c:	ldr	r0, [pc, #44]	; (156c <setup+0x34>)
    153e:	bl	132e8 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
  void digitalShift(int32_t val){I2S_32::shift=val;}
    1542:	ldr	r1, [pc, #44]	; (1570 <setup+0x38>)
    1544:	movs	r0, #14
    num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1546:	ldr	r3, [pc, #44]	; (1574 <setup+0x3c>)
  acq.digitalShift(shift);

  SerNum=getTeensySerial();
    1548:	ldr	r2, [pc, #44]	; (1578 <setup+0x40>)
    154a:	str	r0, [r1, #0]
    154c:	ldr.w	r3, [r3, #544]	; 0x220
#endif
public:
	AudioRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
	void begin(void) {
		clear();
    1550:	ldr	r4, [pc, #40]	; (157c <setup+0x44>)
    1552:	bic.w	r3, r3, #4278190080	; 0xff000000
    1556:	str	r3, [r2, #0]
  
  #if START_MODE==-1
    while(!Serial);
  #endif

  storeBegin();
    1558:	bl	14dc <storeBegin()>
    155c:	mov	r0, r4
    155e:	bl	1c0c <AudioRecordQueue::clear()>
		enabled = 1;
    1562:	movs	r3, #1
    1564:	strb.w	r3, [r4, #870]	; 0x366

  queue1.begin();
}
    1568:	pop	{r4, pc}
    156a:	nop
    156c:	.word	0x20200000
    1570:	.word	0x20001470
    1574:	.word	0x401f4400
    1578:	.word	0x200058c0
    157c:	.word	0x20007994

00001580 <loop>:

extern int16_t tempData0[];
void loop() {
    1580:	push	{r4, r5, r6, r7, lr}
    1582:	sub	sp, #28
        virtual int available() { return usb_serial_available(); }
    1584:	bl	a3d4 <usb_serial_available>
  // put your main code here, to run repeatedly:

  static int16_t status=START_MODE;

  // basic menu to start and stop archiving
  if(Serial.available())
    1588:	cmp	r0, #0
    158a:	bne.n	1610 <loop+0x90>
    158c:	ldr	r6, [pc, #308]	; (16c4 <loop+0x144>)
    if(ch=='z') _reboot_Teensyduino_();
    while(Serial.available()) Serial.read();
  }

  // check end of file
  status=checkEndOfFile(status);
    158e:	ldrsh.w	r4, [r6]
{ uint32_t tx=rtc_get();
    1592:	bl	b70c <rtc_get>
  tx = tx % t_acq;
    1596:	ldr	r3, [pc, #304]	; (16c8 <loop+0x148>)
  if((status>1) && (tx_>0) && (tx < tx_)) status=3;
    1598:	cmp	r4, #1
  tx = tx % t_acq;
    159a:	umull	r2, r3, r3, r0
  if((status>1) && (tx_>0) && (tx < tx_)) status=3;
    159e:	ldr	r2, [pc, #300]	; (16cc <loop+0x14c>)
  tx = tx % t_acq;
    15a0:	mov.w	r3, r3, lsr #5
    15a4:	rsb	r3, r3, r3, lsl #4
    15a8:	sub.w	r3, r0, r3, lsl #2
  if((status>1) && (tx_>0) && (tx < tx_)) status=3;
    15ac:	ble.n	15b6 <loop+0x36>
    15ae:	ldr	r1, [r2, #0]
    15b0:	cmp	r3, r1
    15b2:	it	cc
    15b4:	movcc	r4, #3

  // if available transfer data to disk
  if(queue1.available()>=NBUF)
    15b6:	ldr	r0, [pc, #280]	; (16d0 <loop+0x150>)
  tx_=tx;
    15b8:	str	r3, [r2, #0]
  status=checkEndOfFile(status);
    15ba:	strh	r4, [r6, #0]
  if(queue1.available()>=NBUF)
    15bc:	bl	1bf4 <AudioRecordQueue::available()>
    15c0:	cmp	r0, #15
    15c2:	ble.n	15fc <loop+0x7c>
    15c4:	ldr	r4, [pc, #268]	; (16d4 <loop+0x154>)
  { // fetch data from buffer
    for(int ii=0; ii<NBUF; ii++)
    { int16_t *buffer= queue1.readBuffer();
    15c6:	ldr	r5, [pc, #264]	; (16d0 <loop+0x150>)
    15c8:	add.w	r7, r4, #4096	; 0x1000
    15cc:	mov	r0, r5
    15ce:	bl	1c54 <AudioRecordQueue::readBuffer()>
      memcpy(diskBuffer+ii*NSAMP, buffer, 2*NSAMP);
    15d2:	mov.w	r2, #256	; 0x100
    { int16_t *buffer= queue1.readBuffer();
    15d6:	mov	r1, r0
      memcpy(diskBuffer+ii*NSAMP, buffer, 2*NSAMP);
    15d8:	mov	r0, r4
    for(int ii=0; ii<NBUF; ii++)
    15da:	add	r4, r2
      memcpy(diskBuffer+ii*NSAMP, buffer, 2*NSAMP);
    15dc:	bl	9d30 <memcpy>
      queue1.freeBuffer();
    15e0:	mov	r0, r5
    15e2:	bl	1c90 <AudioRecordQueue::freeBuffer()>
    for(int ii=0; ii<NBUF; ii++)
    15e6:	cmp	r7, r4
    15e8:	bne.n	15cc <loop+0x4c>
  if(!haveSD) return status;
    15ea:	ldr	r3, [pc, #236]	; (16d8 <loop+0x158>)
    }

    // write data to disk
    //-------------------
    status=storeData(status);
    15ec:	ldrsh.w	r0, [r6]
    15f0:	ldrsh.w	r3, [r3]
    15f4:	cbz	r3, 15fa <loop+0x7a>
    15f6:	bl	e88 <storeData(int) [clone .part.0]>
    15fa:	strh	r0, [r6, #0]
    15fc:	ldr	r1, [pc, #220]	; (16dc <loop+0x15c>)
  #if DO_COMPRESS==1
    int32_t data = tempData0[0];
  #else
    int32_t data = diskBuffer[0];
  #endif
  if(millis()-t0>1000)
    15fe:	ldr	r2, [pc, #224]	; (16e0 <loop+0x160>)
    1600:	ldr	r3, [r1, #0]
    1602:	ldr	r0, [r2, #0]
    1604:	subs	r3, r3, r0
    1606:	cmp.w	r3, #1000	; 0x3e8
    160a:	bhi.n	1634 <loop+0xb4>
        ic++, rtc_get()%60, AudioMemoryUsageMax(), 
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), data, status);
    AudioMemoryUsageMaxReset();
    disk_count=0;
  }
}
    160c:	add	sp, #28
    160e:	pop	{r4, r5, r6, r7, pc}
        virtual int read() { return usb_serial_getchar(); }
    1610:	bl	a45c <usb_serial_getchar>
    char ch=Serial.read();
    1614:	uxtb	r0, r0
    if(ch=='s') status=0;
    1616:	cmp	r0, #115	; 0x73
    1618:	beq.n	169e <loop+0x11e>
    if(ch=='e') status=4;
    161a:	cmp	r0, #101	; 0x65
    161c:	bne.n	16a6 <loop+0x126>
    161e:	ldr	r6, [pc, #164]	; (16c4 <loop+0x144>)
    1620:	movs	r3, #4
    1622:	strh	r3, [r6, #0]
    if(ch=='z') _reboot_Teensyduino_();
    1624:	b.n	162a <loop+0xaa>
    1626:	bl	a45c <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    162a:	bl	a3d4 <usb_serial_available>
    while(Serial.available()) Serial.read();
    162e:	cmp	r0, #0
    1630:	bne.n	1626 <loop+0xa6>
    1632:	b.n	158e <loop+0xe>
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    1634:	ldr	r3, [pc, #172]	; (16e4 <loop+0x164>)
    1636:	ldr	r0, [r1, #0]
    1638:	ldr	r4, [r3, #0]
    int32_t data = diskBuffer[0];
    163a:	ldr	r1, [pc, #152]	; (16d4 <loop+0x154>)
  { t0=millis();
    163c:	str	r0, [r2, #0]
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    163e:	adds	r2, r4, #1
    int32_t data = diskBuffer[0];
    1640:	ldrsh.w	r7, [r1]
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), data, status);
    1644:	ldr	r5, [pc, #160]	; (16e8 <loop+0x168>)
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    1646:	str	r2, [r3, #0]
        ic++, rtc_get()%60, AudioMemoryUsageMax(), 
    1648:	bl	b70c <rtc_get>
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    164c:	ldrsh.w	r3, [r6]
    1650:	mov	r2, r4
    int32_t data = diskBuffer[0];
    1652:	str	r7, [sp, #16]
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    1654:	str	r3, [sp, #20]
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), data, status);
    1656:	ldr	r4, [r5, #0]
    1658:	vldr	s13, [pc, #144]	; 16ec <loop+0x16c>
    165c:	lsls	r4, r4, #11
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    165e:	ldr	r1, [pc, #104]	; (16c8 <loop+0x148>)
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), data, status);
    1660:	vmov	s15, r4
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    1664:	umull	r3, r1, r1, r0
    1668:	ldr	r4, [pc, #132]	; (16f0 <loop+0x170>)
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), data, status);
    166a:	vcvt.f32.u32	s15, s15
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    166e:	lsrs	r1, r1, #5
    1670:	rsb	r1, r1, r1, lsl #4
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), data, status);
    1674:	vdiv.f32	s14, s13, s15
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    1678:	sub.w	r3, r0, r1, lsl #2
    167c:	ldr	r1, [pc, #116]	; (16f4 <loop+0x174>)
    167e:	ldr	r0, [pc, #120]	; (16f8 <loop+0x178>)
    1680:	vcvt.f64.f32	d7, s14
    1684:	vstr	d7, [sp, #8]
    1688:	ldrh	r6, [r4, #0]
    168a:	str	r6, [sp, #0]
    168c:	bl	cce4 <Print::printf(char const*, ...)>
    AudioMemoryUsageMaxReset();
    1690:	ldr	r3, [pc, #104]	; (16fc <loop+0x17c>)
    disk_count=0;
    1692:	movs	r2, #0
    AudioMemoryUsageMaxReset();
    1694:	ldrh	r3, [r3, #0]
    disk_count=0;
    1696:	str	r2, [r5, #0]
    AudioMemoryUsageMaxReset();
    1698:	strh	r3, [r4, #0]
}
    169a:	add	sp, #28
    169c:	pop	{r4, r5, r6, r7, pc}
    if(ch=='s') status=0;
    169e:	ldr	r6, [pc, #36]	; (16c4 <loop+0x144>)
    16a0:	movs	r3, #0
    16a2:	strh	r3, [r6, #0]
    if(ch=='z') _reboot_Teensyduino_();
    16a4:	b.n	162a <loop+0xaa>
    if(ch=='b') CPU_RESTART;
    16a6:	cmp	r0, #98	; 0x62
    16a8:	bne.n	16b8 <loop+0x138>
    16aa:	mov.w	r3, #3758153728	; 0xe000e000
    16ae:	ldr	r2, [pc, #80]	; (1700 <loop+0x180>)
    16b0:	ldr	r6, [pc, #16]	; (16c4 <loop+0x144>)
    16b2:	str.w	r2, [r3, #3340]	; 0xd0c
    if(ch=='z') _reboot_Teensyduino_();
    16b6:	b.n	162a <loop+0xaa>
    16b8:	cmp	r0, #122	; 0x7a
    16ba:	bne.n	16c0 <loop+0x140>
    16bc:	bl	132e0 <___reboot_Teensyduino__veneer>
    16c0:	ldr	r6, [pc, #0]	; (16c4 <loop+0x144>)
    16c2:	b.n	162a <loop+0xaa>
    16c4:	.word	0x20007dc8
    16c8:	.word	0x88888889
    16cc:	.word	0x20007d78
    16d0:	.word	0x20007994
    16d4:	.word	0x2000667c
    16d8:	.word	0x20007dcc
    16dc:	.word	0x20007d70
    16e0:	.word	0x200062d0
    16e4:	.word	0x200062cc
    16e8:	.word	0x2000767c
    16ec:	.word	0x472c4400
    16f0:	.word	0x20007dba
    16f4:	.word	0x20001220
    16f8:	.word	0x20001450
    16fc:	.word	0x20007db8
    1700:	.word	0x05fa0004

00001704 <_GLOBAL__sub_I_DirPrefix>:
}
    1704:	push	{r4, r5, r6, lr}
DMAChannel I2S_32::dma(false);
    1706:	ldr	r2, [pc, #296]	; (1830 <_GLOBAL__sub_I_DirPrefix+0x12c>)
    1708:	sub	sp, #8
    170a:	ldr	r1, [pc, #296]	; (1834 <_GLOBAL__sub_I_DirPrefix+0x130>)
	constexpr Print() : write_error(0) {}
    170c:	movs	r4, #0
    170e:	ldr	r0, [pc, #296]	; (1838 <_GLOBAL__sub_I_DirPrefix+0x134>)
    1710:	bl	ce90 <__aeabi_atexit>
    1714:	ldr	r0, [pc, #292]	; (183c <_GLOBAL__sub_I_DirPrefix+0x138>)
	File(FileImpl *file) {
    1716:	ldr	r3, [pc, #296]	; (1840 <_GLOBAL__sub_I_DirPrefix+0x13c>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1718:	mov.w	r1, #1000	; 0x3e8
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    171c:	ldr	r5, [pc, #292]	; (1844 <_GLOBAL__sub_I_DirPrefix+0x140>)
File file=NULL; 
    171e:	ldr	r2, [pc, #272]	; (1830 <_GLOBAL__sub_I_DirPrefix+0x12c>)
    1720:	str	r1, [r0, #8]
    1722:	str	r3, [r0, #0]
    1724:	ldr	r1, [pc, #288]	; (1848 <_GLOBAL__sub_I_DirPrefix+0x144>)
    1726:	strb	r4, [r0, #4]
    1728:	strb	r4, [r0, #12]
		f = file;
    172a:	str	r4, [r0, #16]
    172c:	bl	ce90 <__aeabi_atexit>
		num_inputs(ninput), inputQueue(iqueue) {
    1730:	ldr	r6, [pc, #280]	; (184c <_GLOBAL__sub_I_DirPrefix+0x148>)
    1732:	ldr	r2, [pc, #284]	; (1850 <_GLOBAL__sub_I_DirPrefix+0x14c>)
			if (first_update == NULL) {
    1734:	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    1736:	str	r6, [r2, #0]
    1738:	str	r4, [r2, #16]
			active = false;
    173a:	strh	r4, [r2, #8]
			destination_list = NULL;
    173c:	str	r4, [r2, #12]
			if (first_update == NULL) {
    173e:	cmp	r3, #0
    1740:	beq.n	1824 <_GLOBAL__sub_I_DirPrefix+0x120>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    1742:	mov	r1, r3
    1744:	ldr	r3, [r3, #20]
    1746:	cmp	r3, #0
    1748:	bne.n	1742 <_GLOBAL__sub_I_DirPrefix+0x3e>
				p->next_update = this;
    174a:	str	r2, [r1, #20]
			}
			next_update = NULL;
    174c:	movs	r4, #0
	I2S_32(void) : AudioStream(0, NULL) {begin();}
    174e:	ldr	r3, [pc, #260]	; (1854 <_GLOBAL__sub_I_DirPrefix+0x150>)
    1750:	ldr	r0, [pc, #252]	; (1850 <_GLOBAL__sub_I_DirPrefix+0x14c>)
    1752:	str	r3, [r2, #0]
    1754:	str	r4, [r2, #20]
			cpu_cycles = 0;
    1756:	str	r4, [r2, #4]
			cpu_cycles_max = 0;
			numConnections = 0;
    1758:	strb	r4, [r2, #10]
    175a:	bl	c08 <I2S_32::begin()>
		num_inputs(ninput), inputQueue(iqueue) {
    175e:	ldr	r2, [pc, #248]	; (1858 <_GLOBAL__sub_I_DirPrefix+0x154>)
			if (first_update == NULL) {
    1760:	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    1762:	mov	r1, r2
			destination_list = NULL;
    1764:	str	r4, [r2, #12]
		num_inputs(ninput), inputQueue(iqueue) {
    1766:	str.w	r6, [r1], #24
    176a:	str	r1, [r2, #16]
			active = false;
    176c:	mov.w	r1, #512	; 0x200
				inputQueue[i] = NULL;
    1770:	strd	r4, r4, [r2, #24]
			active = false;
    1774:	strh	r1, [r2, #8]
			if (first_update == NULL) {
    1776:	cmp	r3, #0
    1778:	beq.n	182c <_GLOBAL__sub_I_DirPrefix+0x128>
				for (p=first_update; p->next_update; p = p->next_update) ;
    177a:	mov	r1, r3
    177c:	ldr	r3, [r3, #20]
    177e:	cmp	r3, #0
    1780:	bne.n	177a <_GLOBAL__sub_I_DirPrefix+0x76>
				p->next_update = this;
    1782:	str	r2, [r1, #20]
			next_update = NULL;
    1784:	movs	r4, #0
};

class AudioOutputUSB : public AudioStream
{
public:
	AudioOutputUSB(void) : AudioStream(2, inputQueueArray) { begin(); }
    1786:	ldr	r3, [pc, #212]	; (185c <_GLOBAL__sub_I_DirPrefix+0x158>)
    1788:	ldr	r0, [pc, #204]	; (1858 <_GLOBAL__sub_I_DirPrefix+0x154>)
    178a:	str	r3, [r2, #0]
    178c:	str	r4, [r2, #20]
			cpu_cycles = 0;
    178e:	str	r4, [r2, #4]
			numConnections = 0;
    1790:	strb	r4, [r2, #10]
    1792:	bl	c960 <AudioOutputUSB::begin()>
		num_inputs(ninput), inputQueue(iqueue) {
    1796:	ldr	r1, [pc, #200]	; (1860 <_GLOBAL__sub_I_DirPrefix+0x15c>)
			active = false;
    1798:	mov.w	r0, #256	; 0x100
			if (first_update == NULL) {
    179c:	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    179e:	mov	r2, r1
			destination_list = NULL;
    17a0:	str	r4, [r1, #12]
				inputQueue[i] = NULL;
    17a2:	str	r4, [r1, #24]
		num_inputs(ninput), inputQueue(iqueue) {
    17a4:	str.w	r6, [r2], #24
			active = false;
    17a8:	strh	r0, [r1, #8]
		num_inputs(ninput), inputQueue(iqueue) {
    17aa:	str	r2, [r1, #16]
			if (first_update == NULL) {
    17ac:	cmp	r3, #0
    17ae:	beq.n	1828 <_GLOBAL__sub_I_DirPrefix+0x124>
				for (p=first_update; p->next_update; p = p->next_update) ;
    17b0:	mov	r2, r3
    17b2:	ldr	r3, [r3, #20]
    17b4:	cmp	r3, #0
    17b6:	bne.n	17b0 <_GLOBAL__sub_I_DirPrefix+0xac>
				p->next_update = this;
    17b8:	str	r1, [r2, #20]
			next_update = NULL;
    17ba:	movs	r4, #0
		userblock(NULL), head(0), tail(0), enabled(0) { }
    17bc:	ldr	r0, [pc, #164]	; (1864 <_GLOBAL__sub_I_DirPrefix+0x160>)
AudioConnection          patchCord1(acq, 0, usb1, 0);
    17be:	ldr	r3, [pc, #152]	; (1858 <_GLOBAL__sub_I_DirPrefix+0x154>)
    17c0:	str	r4, [sp, #0]
    17c2:	mov	r2, r4
    17c4:	strb.w	r4, [r1, #868]	; 0x364
    17c8:	str	r4, [r1, #20]
    17ca:	strb.w	r4, [r1, #869]	; 0x365
			cpu_cycles = 0;
    17ce:	str	r4, [r1, #4]
			numConnections = 0;
    17d0:	strb	r4, [r1, #10]
    17d2:	str	r0, [r1, #0]
    17d4:	str.w	r4, [r1, #864]	; 0x360
    17d8:	strb.w	r4, [r1, #870]	; 0x366
    17dc:	ldr	r0, [pc, #136]	; (1868 <_GLOBAL__sub_I_DirPrefix+0x164>)
    17de:	ldr	r1, [pc, #112]	; (1850 <_GLOBAL__sub_I_DirPrefix+0x14c>)
    17e0:	bl	c478 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    17e4:	ldr	r2, [pc, #72]	; (1830 <_GLOBAL__sub_I_DirPrefix+0x12c>)
    17e6:	ldr	r1, [pc, #132]	; (186c <_GLOBAL__sub_I_DirPrefix+0x168>)
    17e8:	ldr	r0, [pc, #124]	; (1868 <_GLOBAL__sub_I_DirPrefix+0x164>)
    17ea:	bl	ce90 <__aeabi_atexit>
AudioConnection          patchCord2(acq, 1, usb1, 1);
    17ee:	movs	r2, #1
    17f0:	ldr	r3, [pc, #100]	; (1858 <_GLOBAL__sub_I_DirPrefix+0x154>)
    17f2:	str	r2, [sp, #0]
    17f4:	ldr	r1, [pc, #88]	; (1850 <_GLOBAL__sub_I_DirPrefix+0x14c>)
    17f6:	ldr	r0, [pc, #120]	; (1870 <_GLOBAL__sub_I_DirPrefix+0x16c>)
    17f8:	bl	c478 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    17fc:	ldr	r2, [pc, #48]	; (1830 <_GLOBAL__sub_I_DirPrefix+0x12c>)
    17fe:	ldr	r1, [pc, #108]	; (186c <_GLOBAL__sub_I_DirPrefix+0x168>)
    1800:	ldr	r0, [pc, #108]	; (1870 <_GLOBAL__sub_I_DirPrefix+0x16c>)
    1802:	bl	ce90 <__aeabi_atexit>
  AudioConnection          patchCord4(acq, 0, queue1, 0);
    1806:	mov	r2, r4
    1808:	ldr	r1, [pc, #68]	; (1850 <_GLOBAL__sub_I_DirPrefix+0x14c>)
    180a:	ldr	r3, [pc, #84]	; (1860 <_GLOBAL__sub_I_DirPrefix+0x15c>)
    180c:	str	r4, [sp, #0]
    180e:	ldr	r0, [pc, #100]	; (1874 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1810:	bl	c478 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    1814:	ldr	r2, [pc, #24]	; (1830 <_GLOBAL__sub_I_DirPrefix+0x12c>)
    1816:	ldr	r1, [pc, #84]	; (186c <_GLOBAL__sub_I_DirPrefix+0x168>)
    1818:	ldr	r0, [pc, #88]	; (1874 <_GLOBAL__sub_I_DirPrefix+0x170>)
}
    181a:	add	sp, #8
    181c:	ldmia.w	sp!, {r4, r5, r6, lr}
  AudioConnection          patchCord4(acq, 0, queue1, 0);
    1820:	b.w	ce90 <__aeabi_atexit>
				first_update = this;
    1824:	str	r2, [r5, #0]
    1826:	b.n	174c <_GLOBAL__sub_I_DirPrefix+0x48>
    1828:	str	r1, [r5, #0]
    182a:	b.n	17ba <_GLOBAL__sub_I_DirPrefix+0xb6>
    182c:	str	r2, [r5, #0]
    182e:	b.n	1784 <_GLOBAL__sub_I_DirPrefix+0x80>
    1830:	.word	0x20001480
    1834:	.word	0x000001e5
    1838:	.word	0x200062bc
    183c:	.word	0x200076a8
    1840:	.word	0x20000a80
    1844:	.word	0x20006110
    1848:	.word	0x000009b5
    184c:	.word	0x200009c0
    1850:	.word	0x200065e4
    1854:	.word	0x20000ad0
    1858:	.word	0x20007d7c
    185c:	.word	0x200009cc
    1860:	.word	0x20007994
    1864:	.word	0x200009d8
    1868:	.word	0x20007958
    186c:	.word	0x0000c535
    1870:	.word	0x2000796c
    1874:	.word	0x20007980

00001878 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
    1878:	ldr	r2, [pc, #8]	; (1884 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
    187a:	ldr	r1, [pc, #12]	; (1888 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    187c:	ldr	r0, [pc, #12]	; (188c <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    187e:	b.w	ce90 <__aeabi_atexit>
    1882:	nop
    1884:	.word	0x20001480
    1888:	.word	0x000001e5
    188c:	.word	0x2000627c

00001890 <__tcf_0>:

extern uint8_t analog_write_res;
extern const struct _pwm_pin_info_struct pwm_pin_info[];
volatile audio_block_t * AudioOutputPWM::block = NULL;
DMAMEM __attribute__((aligned(32))) static uint16_t pwm_tx_buffer[2][AUDIO_BLOCK_SAMPLES * 2];
DMAChannel AudioOutputPWM::dma[2];
    1890:	push	{r4, lr}
		release();
    1892:	ldr	r4, [pc, #20]	; (18a8 <__tcf_0+0x18>)
    1894:	add.w	r0, r4, #8
    1898:	bl	bfd0 <DMAChannel::release()>
    189c:	mov	r0, r4
    189e:	ldmia.w	sp!, {r4, lr}
    18a2:	b.w	bfd0 <DMAChannel::release()>
    18a6:	nop
    18a8:	.word	0x200061dc

000018ac <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
	old_block = (audio_block_t*)block ;  // block is defined as volatile
	block = new_block ;
	__enable_irq();
	if (old_block)
		release (old_block);
}
    18ac:	push	{r4, lr}
		begin();
    18ae:	ldr	r4, [pc, #32]	; (18d0 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x24>)
    18b0:	movs	r1, #0
    18b2:	mov	r0, r4
    18b4:	bl	bf1c <DMAChannel::begin(bool)>
    18b8:	add.w	r0, r4, #8
    18bc:	movs	r1, #0
    18be:	bl	bf1c <DMAChannel::begin(bool)>
DMAChannel AudioOutputPWM::dma[2];
    18c2:	ldr	r2, [pc, #16]	; (18d4 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x28>)
    18c4:	ldr	r1, [pc, #16]	; (18d8 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x2c>)
    18c6:	movs	r0, #0
}
    18c8:	ldmia.w	sp!, {r4, lr}
DMAChannel AudioOutputPWM::dma[2];
    18cc:	b.w	ce90 <__aeabi_atexit>
    18d0:	.word	0x200061dc
    18d4:	.word	0x20001480
    18d8:	.word	0x00001891

000018dc <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAChannel AudioInputI2S::dma(false);
    18dc:	ldr	r2, [pc, #8]	; (18e8 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    18de:	ldr	r1, [pc, #12]	; (18ec <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    18e0:	ldr	r0, [pc, #12]	; (18f0 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    18e2:	b.w	ce90 <__aeabi_atexit>
    18e6:	nop
    18e8:	.word	0x20001480
    18ec:	.word	0x000001e5
    18f0:	.word	0x2000618c

000018f4 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
DMAChannel AudioOutputPT8211_2::dma(false);
    18f4:	ldr	r2, [pc, #8]	; (1900 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
    18f6:	ldr	r1, [pc, #12]	; (1904 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    18f8:	ldr	r0, [pc, #12]	; (1908 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    18fa:	b.w	ce90 <__aeabi_atexit>
    18fe:	nop
    1900:	.word	0x20001480
    1904:	.word	0x000001e5
    1908:	.word	0x200062a4

0000190c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
DMAChannel AudioOutputPT8211::dma(false);
    190c:	ldr	r2, [pc, #8]	; (1918 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    190e:	ldr	r1, [pc, #12]	; (191c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    1910:	ldr	r0, [pc, #12]	; (1920 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    1912:	b.w	ce90 <__aeabi_atexit>
    1916:	nop
    1918:	.word	0x20001480
    191c:	.word	0x000001e5
    1920:	.word	0x20006284

00001924 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
DMAChannel AudioInputSPDIF3::dma(false);
    1924:	ldr	r2, [pc, #8]	; (1930 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
    1926:	ldr	r1, [pc, #12]	; (1934 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
    1928:	ldr	r0, [pc, #12]	; (1938 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
    192a:	b.w	ce90 <__aeabi_atexit>
    192e:	nop
    1930:	.word	0x20001480
    1934:	.word	0x000001e5
    1938:	.word	0x2000625c

0000193c <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
DMAChannel AudioInputTDM2::dma(false);
    193c:	ldr	r2, [pc, #8]	; (1948 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
    193e:	ldr	r1, [pc, #12]	; (194c <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
    1940:	ldr	r0, [pc, #12]	; (1950 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
    1942:	b.w	ce90 <__aeabi_atexit>
    1946:	nop
    1948:	.word	0x20001480
    194c:	.word	0x000001e5
    1950:	.word	0x200061c4

00001954 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:
#include <Arduino.h>
#include "input_adc.h"

extern "C" void xbar_connect(unsigned int input, unsigned int output);

DMAChannel AudioInputAnalog::dma(false);
    1954:	ldr	r2, [pc, #8]	; (1960 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
    1956:	ldr	r1, [pc, #12]	; (1964 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
    1958:	ldr	r0, [pc, #12]	; (1968 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
    195a:	b.w	ce90 <__aeabi_atexit>
    195e:	nop
    1960:	.word	0x20001480
    1964:	.word	0x000001e5
    1968:	.word	0x20006244

0000196c <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE>:
DMAChannel AudioInputPDM2::dma(false);
    196c:	ldr	r2, [pc, #8]	; (1978 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0xc>)
    196e:	ldr	r1, [pc, #12]	; (197c <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x10>)
    1970:	ldr	r0, [pc, #12]	; (1980 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x14>)
    1972:	b.w	ce90 <__aeabi_atexit>
    1976:	nop
    1978:	.word	0x20001480
    197c:	.word	0x000001e5
    1980:	.word	0x200061bc

00001984 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
    1984:	ldr	r2, [pc, #8]	; (1990 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
    1986:	ldr	r1, [pc, #12]	; (1994 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
    1988:	ldr	r0, [pc, #12]	; (1998 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
    198a:	b.w	ce90 <__aeabi_atexit>
    198e:	nop
    1990:	.word	0x20001480
    1994:	.word	0x000001e5
    1998:	.word	0x200061b4

0000199c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
DMAChannel AudioInputI2SQuad::dma(false);
    199c:	ldr	r2, [pc, #8]	; (19a8 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    199e:	ldr	r1, [pc, #12]	; (19ac <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    19a0:	ldr	r0, [pc, #12]	; (19b0 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    19a2:	b.w	ce90 <__aeabi_atexit>
    19a6:	nop
    19a8:	.word	0x20001480
    19ac:	.word	0x000001e5
    19b0:	.word	0x2000626c

000019b4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
DMAChannel AudioOutputI2SQuad::dma(false);
    19b4:	ldr	r2, [pc, #8]	; (19c0 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    19b6:	ldr	r1, [pc, #12]	; (19c4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    19b8:	ldr	r0, [pc, #12]	; (19c8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    19ba:	b.w	ce90 <__aeabi_atexit>
    19be:	nop
    19c0:	.word	0x20001480
    19c4:	.word	0x000001e5
    19c8:	.word	0x2000629c

000019cc <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    19cc:	push	{r4, r5}
    19ce:	sub	sp, #8
    19d0:	mov	r4, r1
    19d2:	add	r3, sp, #8
    19d4:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    19d8:	ldrb	r3, [r0, #19]
    19da:	cmp	r3, #0
    19dc:	beq.n	1a40 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    19de:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    19e0:	ldrb	r3, [r0, #19]
    19e2:	lsls	r2, r3, #31
    19e4:	bpl.n	19f8 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    19e6:	mov.w	r1, #3758153728	; 0xe000e000
    19ea:	ldr	r5, [r0, #20]
    19ec:	ldr.w	r2, [r1, #384]	; 0x180
    19f0:	ands	r2, r5
    19f2:	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    19f4:	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    19f8:	lsls	r5, r3, #30
    19fa:	bpl.n	1a0e <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    19fc:	mov.w	r1, #3758153728	; 0xe000e000
    1a00:	ldr	r5, [r0, #24]
    1a02:	ldr.w	r2, [r1, #388]	; 0x184
    1a06:	ands	r2, r5
    1a08:	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1a0a:	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    1a0e:	lsls	r1, r3, #29
    1a10:	bpl.n	1a24 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1a12:	mov.w	r1, #3758153728	; 0xe000e000
    1a16:	ldr	r5, [r0, #28]
    1a18:	ldr.w	r2, [r1, #392]	; 0x188
    1a1c:	ands	r2, r5
    1a1e:	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1a20:	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    1a24:	lsls	r2, r3, #28
    1a26:	bpl.n	1a3a <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1a28:	mov.w	r1, #3758153728	; 0xe000e000
    1a2c:	ldr	r5, [r0, #32]
    1a2e:	ldr.w	r2, [r1, #396]	; 0x18c
    1a32:	ands	r2, r5
    1a34:	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1a36:	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    1a3a:	lsls	r3, r3, #27
    1a3c:	bmi.n	1a9e <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    1a3e:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    1a40:	ldr	r3, [r0, #8]
    1a42:	cmp	r4, r3
    1a44:	beq.n	1ab2 <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    1a46:	ldr	r3, [pc, #136]	; (1ad0 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    1a48:	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    1a4a:	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1a4c:	ldr	r2, [pc, #132]	; (1ad4 <SPIClass::beginTransaction(SPISettings)+0x108>)
    1a4e:	ubfx	r1, r3, #4, #2
    1a52:	ubfx	r3, r3, #26, #3
    1a56:	ldr.w	r1, [r2, r1, lsl #2]
    1a5a:	adds	r3, #1
    1a5c:	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    1a60:	cbz	r4, 1a96 <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    1a62:	cmp	r4, r2
    1a64:	bhi.n	1ab6 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    1a66:	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    1a6a:	udiv	r2, r2, r3
    1a6e:	cmp	r4, r2
    1a70:	bcc.n	1acc <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    1a72:	cmp.w	r3, #258	; 0x102
    1a76:	bcc.n	1aba <SPIClass::beginTransaction(SPISettings)+0xee>
    1a78:	ldr	r4, [pc, #92]	; (1ad8 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1a7a:	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1a7c:	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1a7e:	movs	r2, #3
		port().CR = 0;
    1a80:	movs	r0, #0
		port().TCR = settings.tcr;
    1a82:	ldr	r1, [sp, #4]
		port().CR = 0;
    1a84:	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1a86:	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    1a88:	movs	r2, #1
		port().CCR = _ccr;
    1a8a:	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    1a8c:	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    1a8e:	str	r2, [r3, #16]
	}
    1a90:	add	sp, #8
    1a92:	pop	{r4, r5}
    1a94:	bx	lr
			if (d && clkhz/d > _clock) d++;
    1a96:	cmp	r1, r3
    1a98:	bcc.n	1a7a <SPIClass::beginTransaction(SPISettings)+0xae>
    1a9a:	adds	r3, r2, #1
    1a9c:	b.n	1a72 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1a9e:	mov.w	r2, #3758153728	; 0xe000e000
    1aa2:	ldr	r1, [r0, #36]	; 0x24
    1aa4:	ldr.w	r3, [r2, #400]	; 0x190
    1aa8:	ands	r3, r1
    1aaa:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1aac:	str.w	r3, [r2, #400]	; 0x190
    1ab0:	b.n	1a3e <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    1ab2:	ldr	r4, [r0, #12]
    1ab4:	b.n	1a7c <SPIClass::beginTransaction(SPISettings)+0xb0>
    1ab6:	movs	r4, #0
    1ab8:	b.n	1a7a <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    1aba:	cmp	r3, #2
    1abc:	bls.n	1ab6 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    1abe:	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1ac0:	lsrs	r2, r3, #1
    1ac2:	lsls	r4, r2, #8
    1ac4:	orr.w	r4, r4, r2, lsl #16
    1ac8:	orrs	r4, r3
    1aca:	b.n	1a7a <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    1acc:	mov	r2, r3
    1ace:	b.n	1a9a <SPIClass::beginTransaction(SPISettings)+0xce>
    1ad0:	.word	0x400fc000
    1ad4:	.word	0x20000c1c
    1ad8:	.word	0x007f7fff

00001adc <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
DMAChannel AudioOutputTDM2::dma(false);
    1adc:	ldr	r2, [pc, #8]	; (1ae8 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
    1ade:	ldr	r1, [pc, #12]	; (1aec <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
    1ae0:	ldr	r0, [pc, #12]	; (1af0 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
    1ae2:	b.w	ce90 <__aeabi_atexit>
    1ae6:	nop
    1ae8:	.word	0x20001480
    1aec:	.word	0x000001e5
    1af0:	.word	0x2000623c

00001af4 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
DMAChannel AudioOutputI2S2::dma(false);
    1af4:	ldr	r2, [pc, #8]	; (1b00 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
    1af6:	ldr	r1, [pc, #12]	; (1b04 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
    1af8:	ldr	r0, [pc, #12]	; (1b08 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
    1afa:	b.w	ce90 <__aeabi_atexit>
    1afe:	nop
    1b00:	.word	0x20001480
    1b04:	.word	0x000001e5
    1b08:	.word	0x20006234

00001b0c <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
    1b0c:	ldr	r2, [pc, #8]	; (1b18 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
    1b0e:	ldr	r1, [pc, #12]	; (1b1c <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    1b10:	ldr	r0, [pc, #12]	; (1b20 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    1b12:	b.w	ce90 <__aeabi_atexit>
    1b16:	nop
    1b18:	.word	0x20001480
    1b1c:	.word	0x000001e5
    1b20:	.word	0x20006274

00001b24 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    1b24:	ldr	r2, [pc, #8]	; (1b30 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    1b26:	ldr	r1, [pc, #12]	; (1b34 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    1b28:	ldr	r0, [pc, #12]	; (1b38 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    1b2a:	b.w	ce90 <__aeabi_atexit>
    1b2e:	nop
    1b30:	.word	0x20001480
    1b34:	.word	0x000001e5
    1b38:	.word	0x20006254

00001b3c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
DMAChannel AudioOutputTDM::dma(false);
    1b3c:	ldr	r2, [pc, #8]	; (1b48 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    1b3e:	ldr	r1, [pc, #12]	; (1b4c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    1b40:	ldr	r0, [pc, #12]	; (1b50 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    1b42:	b.w	ce90 <__aeabi_atexit>
    1b46:	nop
    1b48:	.word	0x20001480
    1b4c:	.word	0x000001e5
    1b50:	.word	0x200061ec

00001b54 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
DMAChannel AudioInputTDM::dma(false);
    1b54:	ldr	r2, [pc, #8]	; (1b60 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    1b56:	ldr	r1, [pc, #12]	; (1b64 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    1b58:	ldr	r0, [pc, #12]	; (1b68 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    1b5a:	b.w	ce90 <__aeabi_atexit>
    1b5e:	nop
    1b60:	.word	0x20001480
    1b64:	.word	0x000001e5
    1b68:	.word	0x2000619c

00001b6c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    1b6c:	ldr	r2, [pc, #8]	; (1b78 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    1b6e:	ldr	r1, [pc, #12]	; (1b7c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    1b70:	ldr	r0, [pc, #12]	; (1b80 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    1b72:	b.w	ce90 <__aeabi_atexit>
    1b76:	nop
    1b78:	.word	0x20001480
    1b7c:	.word	0x000001e5
    1b80:	.word	0x2000624c

00001b84 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
DMAChannel AudioOutputSPDIF3::dma(false);
    1b84:	ldr	r2, [pc, #8]	; (1b90 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
    1b86:	ldr	r1, [pc, #12]	; (1b94 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    1b88:	ldr	r0, [pc, #12]	; (1b98 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    1b8a:	b.w	ce90 <__aeabi_atexit>
    1b8e:	nop
    1b90:	.word	0x20001480
    1b94:	.word	0x000001e5
    1b98:	.word	0x20006294

00001b9c <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
    1b9c:	ldr	r2, [pc, #8]	; (1ba8 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
    1b9e:	ldr	r1, [pc, #12]	; (1bac <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    1ba0:	ldr	r0, [pc, #12]	; (1bb0 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    1ba2:	b.w	ce90 <__aeabi_atexit>
    1ba6:	nop
    1ba8:	.word	0x20001480
    1bac:	.word	0x000001e5
    1bb0:	.word	0x200061d4

00001bb4 <AudioRecordQueue::update()>:
	release(userblock);
	userblock = NULL;
}

void AudioRecordQueue::update(void)
{
    1bb4:	push	{r4, lr}
	audio_block_t *block;
	uint32_t h;

	block = receiveReadOnly();
    1bb6:	movs	r1, #0
{
    1bb8:	mov	r4, r0
	block = receiveReadOnly();
    1bba:	bl	c348 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
    1bbe:	cbz	r0, 1be8 <AudioRecordQueue::update()+0x34>
	if (!enabled) {
    1bc0:	ldrb.w	r3, [r4, #870]	; 0x366
    1bc4:	cbz	r3, 1bea <AudioRecordQueue::update()+0x36>
		release(block);
		return;
	}
	h = head + 1;
    1bc6:	ldrb.w	r3, [r4, #868]	; 0x364
	if (h >= max_buffers) h = 0;
	if (h == tail) {
    1bca:	ldrb.w	r1, [r4, #869]	; 0x365
	h = head + 1;
    1bce:	adds	r3, #1
	if (h >= max_buffers) h = 0;
    1bd0:	cmp	r3, #209	; 0xd1
    1bd2:	it	ge
    1bd4:	movge	r3, #0
	if (h == tail) {
    1bd6:	cmp	r1, r3
    1bd8:	beq.n	1bea <AudioRecordQueue::update()+0x36>
		release(block);
	} else {
		queue[h] = block;
    1bda:	adds	r1, r3, #6
		head = h;
    1bdc:	uxtb	r3, r3
		queue[h] = block;
    1bde:	add.w	r1, r4, r1, lsl #2
    1be2:	str	r0, [r1, #4]
		head = h;
    1be4:	strb.w	r3, [r4, #868]	; 0x364
	}
}
    1be8:	pop	{r4, pc}
    1bea:	ldmia.w	sp!, {r4, lr}
		release(block);
    1bee:	b.w	c2b0 <AudioStream::release(audio_block_struct*)>
    1bf2:	nop

00001bf4 <AudioRecordQueue::available()>:
	h = head;
    1bf4:	ldrb.w	r1, [r0, #868]	; 0x364
	t = tail;
    1bf8:	ldrb.w	r2, [r0, #869]	; 0x365
	h = head;
    1bfc:	uxtb	r3, r1
	if (h >= t) return h - t;
    1bfe:	cmp	r1, r2
	t = tail;
    1c00:	uxtb	r0, r2
	return max_buffers + h - t;
    1c02:	it	cc
    1c04:	addcc	r3, #209	; 0xd1
    1c06:	subs	r0, r3, r0
}
    1c08:	bx	lr
    1c0a:	nop

00001c0c <AudioRecordQueue::clear()>:
{
    1c0c:	push	{r3, r4, r5, lr}
    1c0e:	mov	r5, r0
	if (userblock) {
    1c10:	ldr.w	r0, [r0, #864]	; 0x360
    1c14:	cbz	r0, 1c20 <AudioRecordQueue::clear()+0x14>
		release(userblock);
    1c16:	bl	c2b0 <AudioStream::release(audio_block_struct*)>
		userblock = NULL;
    1c1a:	movs	r3, #0
    1c1c:	str.w	r3, [r5, #864]	; 0x360
	t = tail;
    1c20:	ldrb.w	r2, [r5, #869]	; 0x365
	while (t != head) {
    1c24:	ldrb.w	r3, [r5, #868]	; 0x364
	t = tail;
    1c28:	uxtb	r4, r2
	while (t != head) {
    1c2a:	cmp	r2, r3
    1c2c:	uxtb	r1, r3
    1c2e:	beq.n	1c4e <AudioRecordQueue::clear()+0x42>
		if (++t >= max_buffers) t = 0;
    1c30:	adds	r4, #1
    1c32:	cmp	r4, #209	; 0xd1
    1c34:	it	cs
    1c36:	movcs	r4, #0
		release(queue[t]);
    1c38:	adds	r3, r4, #6
    1c3a:	add.w	r3, r5, r3, lsl #2
    1c3e:	ldr	r0, [r3, #4]
    1c40:	bl	c2b0 <AudioStream::release(audio_block_struct*)>
	while (t != head) {
    1c44:	ldrb.w	r3, [r5, #868]	; 0x364
    1c48:	cmp	r3, r4
    1c4a:	bne.n	1c30 <AudioRecordQueue::clear()+0x24>
	tail = t;
    1c4c:	uxtb	r1, r4
    1c4e:	strb.w	r1, [r5, #869]	; 0x365
}
    1c52:	pop	{r3, r4, r5, pc}

00001c54 <AudioRecordQueue::readBuffer()>:
	if (userblock) return NULL;
    1c54:	ldr.w	r2, [r0, #864]	; 0x360
    1c58:	cbnz	r2, 1c88 <AudioRecordQueue::readBuffer()+0x34>
	t = tail;
    1c5a:	ldrb.w	r1, [r0, #869]	; 0x365
	if (t == head) return NULL;
    1c5e:	ldrb.w	ip, [r0, #868]	; 0x364
	t = tail;
    1c62:	uxtb	r3, r1
	if (t == head) return NULL;
    1c64:	cmp	r1, ip
    1c66:	beq.n	1c84 <AudioRecordQueue::readBuffer()+0x30>
	if (++t >= max_buffers) t = 0;
    1c68:	adds	r3, #1
    1c6a:	cmp	r3, #208	; 0xd0
    1c6c:	ite	hi
    1c6e:	movhi	r3, r2
	tail = t;
    1c70:	uxtbls	r2, r3
	userblock = queue[t];
    1c72:	adds	r3, #6
    1c74:	add.w	r3, r0, r3, lsl #2
    1c78:	ldr	r3, [r3, #4]
	tail = t;
    1c7a:	strb.w	r2, [r0, #869]	; 0x365
	return userblock->data;
    1c7e:	adds	r2, r3, #4
	userblock = queue[t];
    1c80:	str.w	r3, [r0, #864]	; 0x360
}
    1c84:	mov	r0, r2
    1c86:	bx	lr
	if (userblock) return NULL;
    1c88:	movs	r2, #0
}
    1c8a:	mov	r0, r2
    1c8c:	bx	lr
    1c8e:	nop

00001c90 <AudioRecordQueue::freeBuffer()>:
{
    1c90:	push	{r4, lr}
    1c92:	mov	r4, r0
	if (userblock == NULL) return;
    1c94:	ldr.w	r0, [r0, #864]	; 0x360
    1c98:	cbz	r0, 1ca4 <AudioRecordQueue::freeBuffer()+0x14>
	release(userblock);
    1c9a:	bl	c2b0 <AudioStream::release(audio_block_struct*)>
	userblock = NULL;
    1c9e:	movs	r3, #0
    1ca0:	str.w	r3, [r4, #864]	; 0x360
}
    1ca4:	pop	{r4, pc}
    1ca6:	nop

00001ca8 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE>:
static float bufferL[bufferLength];

volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

DMAChannel AsyncAudioInputSPDIF3::dma(false);
    1ca8:	ldr	r2, [pc, #8]	; (1cb4 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0xc>)
    1caa:	ldr	r1, [pc, #12]	; (1cb8 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x10>)
    1cac:	ldr	r0, [pc, #12]	; (1cbc <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x14>)
    1cae:	b.w	ce90 <__aeabi_atexit>
    1cb2:	nop
    1cb4:	.word	0x20001480
    1cb8:	.word	0x000001e5
    1cbc:	.word	0x200062ac

00001cc0 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:
DMAChannel AudioInputPDM::dma(false);
    1cc0:	ldr	r2, [pc, #8]	; (1ccc <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    1cc2:	ldr	r1, [pc, #12]	; (1cd0 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    1cc4:	ldr	r0, [pc, #12]	; (1cd4 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    1cc6:	b.w	ce90 <__aeabi_atexit>
    1cca:	nop
    1ccc:	.word	0x20001480
    1cd0:	.word	0x000001e5
    1cd4:	.word	0x20006194

00001cd8 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    1cd8:	ldr	r2, [pc, #8]	; (1ce4 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    1cda:	ldr	r1, [pc, #12]	; (1ce8 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    1cdc:	ldr	r0, [pc, #12]	; (1cec <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    1cde:	b.w	ce90 <__aeabi_atexit>
    1ce2:	nop
    1ce4:	.word	0x20001480
    1ce8:	.word	0x000001e5
    1cec:	.word	0x200061cc

00001cf0 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
    1cf0:	ldr	r2, [pc, #8]	; (1cfc <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
    1cf2:	ldr	r1, [pc, #12]	; (1d00 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    1cf4:	ldr	r0, [pc, #12]	; (1d04 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    1cf6:	b.w	ce90 <__aeabi_atexit>
    1cfa:	nop
    1cfc:	.word	0x20001480
    1d00:	.word	0x000001e5
    1d04:	.word	0x2000628c

00001d08 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    1d08:	ldr	r2, [pc, #8]	; (1d14 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    1d0a:	ldr	r1, [pc, #12]	; (1d18 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    1d0c:	ldr	r0, [pc, #12]	; (1d1c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    1d0e:	b.w	ce90 <__aeabi_atexit>
    1d12:	nop
    1d14:	.word	0x20001480
    1d18:	.word	0x000001e5
    1d1c:	.word	0x20006264

00001d20 <breakTime(long long, tmElements_t&)>:
  tm.Second = time % 60;
    1d20:	ldr	r1, [pc, #332]	; (1e70 <breakTime(long long, tmElements_t&)+0x150>)
void breakTime(time_t timeInput, tmElements_t &tm){
    1d22:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tm.Second = time % 60;
    1d26:	umull	r4, r3, r1, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1d2a:	movw	sl, #365	; 0x16d
    1d2e:	ldr	r7, [pc, #324]	; (1e74 <breakTime(long long, tmElements_t&)+0x154>)
  tm.Second = time % 60;
    1d30:	lsrs	r3, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1d32:	ldr.w	r8, [pc, #336]	; 1e84 <breakTime(long long, tmElements_t&)+0x164>
    1d36:	ldr.w	r9, [pc, #336]	; 1e88 <breakTime(long long, tmElements_t&)+0x168>
  tm.Minute = time % 60;
    1d3a:	umull	r4, r1, r1, r3
  tm.Second = time % 60;
    1d3e:	rsb	r4, r3, r3, lsl #4
  tm.Minute = time % 60;
    1d42:	lsrs	r1, r1, #5
  tm.Second = time % 60;
    1d44:	sub.w	r0, r0, r4, lsl #2
  tm.Hour = time % 24;
    1d48:	ldr	r4, [pc, #300]	; (1e78 <breakTime(long long, tmElements_t&)+0x158>)
  tm.Minute = time % 60;
    1d4a:	rsb	r5, r1, r1, lsl #4
  tm.Hour = time % 24;
    1d4e:	umull	r4, lr, r4, r1
  tm.Minute = time % 60;
    1d52:	sub.w	r3, r3, r5, lsl #2
  tm.Second = time % 60;
    1d56:	strb	r0, [r2, #0]
  tm.Hour = time % 24;
    1d58:	mov.w	lr, lr, lsr #4
  tm.Minute = time % 60;
    1d5c:	strb	r3, [r2, #1]
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    1d5e:	add.w	r4, lr, #4
  tm.Hour = time % 24;
    1d62:	add.w	r0, lr, lr, lsl #1
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    1d66:	ldr	r3, [pc, #276]	; (1e7c <breakTime(long long, tmElements_t&)+0x15c>)
  tm.Hour = time % 24;
    1d68:	sub.w	r1, r1, r0, lsl #3
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    1d6c:	umull	r0, r3, r3, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1d70:	movs	r0, #0
  tm.Hour = time % 24;
    1d72:	strb	r1, [r2, #2]
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    1d74:	subs	r1, r4, r3
    1d76:	add.w	r3, r3, r1, lsr #1
  days = 0;
    1d7a:	mov	r1, r0
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    1d7c:	lsrs	r3, r3, #2
    1d7e:	rsb	r3, r3, r3, lsl #3
    1d82:	subs	r4, r4, r3
    1d84:	adds	r4, #1
    1d86:	strb	r4, [r2, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1d88:	uxtb	r4, r0
    1d8a:	movw	ip, #365	; 0x16d
    1d8e:	addw	r3, r4, #1970	; 0x7b2
    1d92:	ands.w	r5, r3, #3
    1d96:	mul.w	r6, r7, r3
    1d9a:	bne.n	1dae <breakTime(long long, tmElements_t&)+0x8e>
    1d9c:	cmp.w	r8, r6, ror #2
    1da0:	mov.w	ip, #366	; 0x16e
    1da4:	bcc.n	1dae <breakTime(long long, tmElements_t&)+0x8e>
    1da6:	cmp.w	r9, r6, ror #4
    1daa:	it	cc
    1dac:	movcc	ip, sl
    1dae:	add	r1, ip
    1db0:	adds	r0, #1
    1db2:	cmp	lr, r1
    1db4:	bcs.n	1d88 <breakTime(long long, tmElements_t&)+0x68>
  days -= LEAP_YEAR(year) ? 366 : 365;
    1db6:	ldr	r6, [pc, #200]	; (1e80 <breakTime(long long, tmElements_t&)+0x160>)
  tm.Year = year; // year is offset from 1970 
    1db8:	strb	r4, [r2, #6]
  days -= LEAP_YEAR(year) ? 366 : 365;
    1dba:	umull	r0, r6, r6, r3
    1dbe:	cbz	r5, 1e26 <breakTime(long long, tmElements_t&)+0x106>
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1dc0:	lsrs	r7, r6, #5
    1dc2:	movs	r4, #100	; 0x64
    1dc4:	mov.w	r0, #400	; 0x190
    1dc8:	lsrs	r6, r6, #7
    1dca:	mls	r7, r4, r7, r3
    1dce:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    1dd2:	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    1dd6:	sub.w	lr, lr, r1
    1dda:	movs	r3, #0
    1ddc:	movs	r1, #1
    1dde:	add	r0, lr
      monthLength = monthDays[month];
    1de0:	ldr.w	lr, [pc, #168]	; 1e8c <breakTime(long long, tmElements_t&)+0x16c>
    1de4:	b.n	1dfc <breakTime(long long, tmElements_t&)+0xdc>
    if (time >= monthLength) {
    1de6:	ldrb.w	r4, [r3, lr]
    1dea:	cmp	r4, r0
    1dec:	bhi.n	1e54 <breakTime(long long, tmElements_t&)+0x134>
  for (month=0; month<12; month++) {
    1dee:	cmp	r1, #12
      time -= monthLength;
    1df0:	sub.w	r0, r0, r4
  for (month=0; month<12; month++) {
    1df4:	beq.n	1e16 <breakTime(long long, tmElements_t&)+0xf6>
    1df6:	adds	r1, #1
    1df8:	adds	r3, #1
    1dfa:	uxtb	r1, r1
    if (month==1) { // february
    1dfc:	cmp	r3, #1
    1dfe:	uxtb.w	ip, r3
    1e02:	bne.n	1de6 <breakTime(long long, tmElements_t&)+0xc6>
      if (LEAP_YEAR(year)) {
    1e04:	cbnz	r5, 1e0c <breakTime(long long, tmElements_t&)+0xec>
    1e06:	cbz	r7, 1e40 <breakTime(long long, tmElements_t&)+0x120>
    1e08:	movs	r4, #29
    1e0a:	b.n	1e0e <breakTime(long long, tmElements_t&)+0xee>
    1e0c:	movs	r4, #28
    if (time >= monthLength) {
    1e0e:	cmp	r0, r4
    1e10:	bcc.n	1e68 <breakTime(long long, tmElements_t&)+0x148>
      time -= monthLength;
    1e12:	subs	r0, r0, r4
  for (month=0; month<12; month++) {
    1e14:	b.n	1df6 <breakTime(long long, tmElements_t&)+0xd6>
    1e16:	mov.w	ip, #13
  tm.Day = time + 1;     // day of month
    1e1a:	adds	r0, #1
  tm.Month = month + 1;  // jan is month 1  
    1e1c:	strb.w	ip, [r2, #5]
  tm.Day = time + 1;     // day of month
    1e20:	strb	r0, [r2, #4]
}
    1e22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  days -= LEAP_YEAR(year) ? 366 : 365;
    1e26:	movs	r0, #100	; 0x64
    1e28:	lsrs	r7, r6, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1e2a:	lsrs	r6, r6, #7
  days -= LEAP_YEAR(year) ? 366 : 365;
    1e2c:	mls	r7, r0, r7, r3
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1e30:	mov.w	r0, #400	; 0x190
    1e34:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    1e38:	cbz	r7, 1e4a <breakTime(long long, tmElements_t&)+0x12a>
    1e3a:	mov.w	r0, #366	; 0x16e
    1e3e:	b.n	1dd6 <breakTime(long long, tmElements_t&)+0xb6>
      if (LEAP_YEAR(year)) {
    1e40:	cmp	r6, #0
    1e42:	ite	ne
    1e44:	movne	r4, #28
    1e46:	moveq	r4, #29
    1e48:	b.n	1e0e <breakTime(long long, tmElements_t&)+0xee>
  days -= LEAP_YEAR(year) ? 366 : 365;
    1e4a:	cmp	r6, #0
    1e4c:	bne.n	1dd2 <breakTime(long long, tmElements_t&)+0xb2>
    1e4e:	mov.w	r0, #366	; 0x16e
    1e52:	b.n	1dd6 <breakTime(long long, tmElements_t&)+0xb6>
  for (month=0; month<12; month++) {
    1e54:	add.w	ip, ip, #1
  tm.Day = time + 1;     // day of month
    1e58:	adds	r0, #1
  for (month=0; month<12; month++) {
    1e5a:	uxtb.w	ip, ip
  tm.Day = time + 1;     // day of month
    1e5e:	strb	r0, [r2, #4]
  tm.Month = month + 1;  // jan is month 1  
    1e60:	strb.w	ip, [r2, #5]
}
    1e64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (time >= monthLength) {
    1e68:	mov.w	ip, #2
    1e6c:	b.n	1e1a <breakTime(long long, tmElements_t&)+0xfa>
    1e6e:	nop
    1e70:	.word	0x88888889
    1e74:	.word	0xc28f5c29
    1e78:	.word	0xaaaaaaab
    1e7c:	.word	0x24924925
    1e80:	.word	0x51eb851f
    1e84:	.word	0x028f5c28
    1e88:	.word	0x00a3d70a
    1e8c:	.word	0x20000764

00001e90 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    1e90:	ldrb.w	r2, [r0, #163]	; 0xa3
    1e94:	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    1e98:	subs	r0, r2, r0
    1e9a:	bx	lr

00001e9c <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1e9c:	ldrb.w	r3, [r0, #162]	; 0xa2
    1ea0:	ldrb.w	r2, [r0, #163]	; 0xa3
    1ea4:	cmp	r2, r3
    1ea6:	bls.n	1eb4 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    1ea8:	adds	r2, r3, #1
    1eaa:	add	r3, r0
    1eac:	strb.w	r2, [r0, #162]	; 0xa2
    1eb0:	ldrb	r0, [r3, #26]
    1eb2:	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    1eb4:	mov.w	r0, #4294967295
	}
    1eb8:	bx	lr
    1eba:	nop

00001ebc <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1ebc:	ldrb.w	r3, [r0, #162]	; 0xa2
    1ec0:	ldrb.w	r2, [r0, #163]	; 0xa3
    1ec4:	cmp	r2, r3
    1ec6:	bls.n	1ece <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    1ec8:	add	r0, r3
    1eca:	ldrb	r0, [r0, #26]
    1ecc:	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    1ece:	mov.w	r0, #4294967295
	}
    1ed2:	bx	lr

00001ed4 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    1ed4:	bx	lr
    1ed6:	nop

00001ed8 <TwoWire::write(unsigned char)>:
{
}


size_t TwoWire::write(uint8_t data)
{
    1ed8:	mov	r3, r0
	if (transmitting || slave_mode) {
    1eda:	ldrh.w	r0, [r0, #304]	; 0x130
    1ede:	cbz	r0, 1f00 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    1ee0:	ldrb.w	r2, [r3, #303]	; 0x12f
    1ee4:	cmp	r2, #136	; 0x88
    1ee6:	bls.n	1ef0 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    1ee8:	movs	r2, #1
			setWriteError();
			return 0;
    1eea:	movs	r0, #0
    1eec:	strb	r2, [r3, #4]
    1eee:	bx	lr
		}
		txBuffer[txBufferLength++] = data;
    1ef0:	add.w	ip, r2, #1
		return 1;
    1ef4:	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    1ef6:	add	r2, r3
    1ef8:	strb.w	ip, [r3, #303]	; 0x12f
    1efc:	strb.w	r1, [r2, #165]	; 0xa5
	}
	return 0;
}
    1f00:	bx	lr
    1f02:	nop

00001f04 <TwoWire::write(unsigned char const*, unsigned int)>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    1f04:	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    1f06:	ldrh.w	r4, [r0, #304]	; 0x130
    1f0a:	cbnz	r4, 1f10 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
		memcpy(txBuffer + txBufferLength, data, quantity);
		txBufferLength += quantity;
		return quantity;
	}
	return 0;
}
    1f0c:	mov	r0, r4
    1f0e:	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    1f10:	ldrb.w	r3, [r0, #303]	; 0x12f
    1f14:	mov	r5, r0
    1f16:	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    1f1a:	cmp	r2, r4
    1f1c:	bhi.n	1f3a <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    1f1e:	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    1f20:	add.w	r0, r5, #165	; 0xa5
    1f24:	mov	r2, r4
    1f26:	add	r0, r3
    1f28:	bl	9d30 <memcpy>
		txBufferLength += quantity;
    1f2c:	ldrb.w	r3, [r5, #303]	; 0x12f
}
    1f30:	mov	r0, r4
		txBufferLength += quantity;
    1f32:	add	r3, r4
    1f34:	strb.w	r3, [r5, #303]	; 0x12f
}
    1f38:	pop	{r3, r4, r5, pc}
    1f3a:	movs	r2, #1
    1f3c:	strb	r2, [r0, #4]
    1f3e:	b.n	1f20 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00001f40 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    1f40:	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
    1f42:	movs	r5, #0
    1f44:	mov	r3, r2
    1f46:	mov.w	r2, #1000	; 0x3e8
    1f4a:	mov	r4, r0
    1f4c:	strb	r5, [r0, #4]
    1f4e:	str	r2, [r0, #8]
		: port(myport), hardware(myhardware) {
    1f50:	movs	r2, #136	; 0x88
    1f52:	ldr	r0, [pc, #84]	; (1fa8 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    1f54:	str	r1, [r4, #16]
    1f56:	mov	r1, r5
    1f58:	str	r0, [r4, #0]
    1f5a:	add.w	r0, r4, #26
    1f5e:	str	r3, [r4, #20]
    1f60:	strb	r5, [r4, #12]
    1f62:	strb	r5, [r4, #24]
    1f64:	strb	r5, [r4, #25]
    1f66:	bl	dcd0 <memset>
    1f6a:	movs	r2, #137	; 0x89
    1f6c:	mov	r1, r5
    1f6e:	add.w	r0, r4, #165	; 0xa5
    1f72:	strb.w	r5, [r4, #162]	; 0xa2
    1f76:	strb.w	r5, [r4, #163]	; 0xa3
    1f7a:	strb.w	r5, [r4, #164]	; 0xa4
    1f7e:	bl	dcd0 <memset>
	}
    1f82:	mov	r0, r4
		: port(myport), hardware(myhardware) {
    1f84:	strb.w	r5, [r4, #302]	; 0x12e
    1f88:	strb.w	r5, [r4, #303]	; 0x12f
    1f8c:	strb.w	r5, [r4, #304]	; 0x130
    1f90:	strb.w	r5, [r4, #305]	; 0x131
    1f94:	strb.w	r5, [r4, #306]	; 0x132
    1f98:	strb.w	r5, [r4, #307]	; 0x133
    1f9c:	strb.w	r5, [r4, #308]	; 0x134
    1fa0:	strd	r5, r5, [r4, #312]	; 0x138
	}
    1fa4:	pop	{r3, r4, r5, pc}
    1fa6:	nop
    1fa8:	.word	0x20000b8c

00001fac <TwoWire::isr()>:
}


void TwoWire::isr(void)
{
	uint32_t status = port->SSR;
    1fac:	ldr	r3, [r0, #16]
{
    1fae:	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    1fb0:	ldr.w	r5, [r3, #276]	; 0x114
{
    1fb4:	mov	r4, r0
	uint32_t w1c_bits = status & 0xF00;
	if (w1c_bits) port->SSR = w1c_bits;
    1fb6:	ands.w	r2, r5, #3840	; 0xf00
    1fba:	beq.n	1fc0 <TwoWire::isr()+0x14>
    1fbc:	str.w	r2, [r3, #276]	; 0x114

	//Serial.print("isr ");
	//Serial.println(status, HEX);

	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    1fc0:	lsls	r6, r5, #30
    1fc2:	bpl.n	1fdc <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    1fc4:	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    1fc8:	lsls	r0, r1, #16
    1fca:	bpl.n	204a <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
    1fcc:	movs	r2, #0
    1fce:	movs	r0, #1
    1fd0:	strb.w	r2, [r4, #162]	; 0xa2
			rxBufferLength = 0;
		}
		if (rxBufferLength < BUFFER_LENGTH) {
			rxBuffer[rxBufferLength++] = rx & 255;
    1fd4:	add	r2, r4
    1fd6:	strb.w	r0, [r4, #163]	; 0xa3
    1fda:	strb	r1, [r2, #26]
		}
		//Serial.print("rx = ");
		//Serial.println(rx, HEX);
	}
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    1fdc:	lsls	r2, r5, #31
    1fde:	bpl.n	2002 <TwoWire::isr()+0x56>
		if (!transmitting) {
    1fe0:	ldrb.w	r6, [r4, #304]	; 0x130
    1fe4:	cbz	r6, 2024 <TwoWire::isr()+0x78>
				(*user_onRequest)();
			}
			txBufferIndex = 0;
			transmitting = 1;
		}
		if (txBufferIndex < txBufferLength) {
    1fe6:	ldrb.w	r6, [r4, #302]	; 0x12e
    1fea:	ldrb.w	r2, [r4, #303]	; 0x12f
    1fee:	cmp	r2, r6
    1ff0:	bls.n	2042 <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    1ff2:	adds	r2, r6, #1
    1ff4:	add	r6, r4
    1ff6:	strb.w	r2, [r4, #302]	; 0x12e
    1ffa:	ldrb.w	r2, [r6, #165]	; 0xa5
    1ffe:	str.w	r2, [r3, #352]	; 0x160
			port->STDR = 0;
		}
		//Serial.println("tx");
	}

	if (status & LPI2C_SSR_SDF) { // Stop
    2002:	lsls	r3, r5, #22
    2004:	bpl.n	2022 <TwoWire::isr()+0x76>
		//Serial.println("Stop");
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    2006:	ldrb.w	r0, [r4, #163]	; 0xa3
    200a:	cbz	r0, 2014 <TwoWire::isr()+0x68>
    200c:	ldr.w	r3, [r4, #316]	; 0x13c
    2010:	cbz	r3, 2014 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    2012:	blx	r3
		}
		rxBufferIndex = 0;
    2014:	movs	r3, #0
    2016:	strh.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
		txBufferIndex = 0;
    201a:	strh.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
		transmitting = 0;
    201e:	strb.w	r3, [r4, #304]	; 0x130
	}
}
    2022:	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    2024:	ldr.w	r2, [r4, #312]	; 0x138
    2028:	cbz	r2, 202e <TwoWire::isr()+0x82>
				(*user_onRequest)();
    202a:	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    202c:	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    202e:	movs	r2, #0
    2030:	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    2034:	movs	r2, #1
    2036:	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    203a:	ldrb.w	r2, [r4, #303]	; 0x12f
    203e:	cmp	r2, r6
    2040:	bhi.n	1ff2 <TwoWire::isr()+0x46>
			port->STDR = 0;
    2042:	movs	r2, #0
    2044:	str.w	r2, [r3, #352]	; 0x160
    2048:	b.n	2002 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    204a:	ldrb.w	r2, [r4, #163]	; 0xa3
    204e:	cmp	r2, #135	; 0x87
    2050:	bhi.n	1fdc <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    2052:	adds	r0, r2, #1
    2054:	uxtb	r0, r0
    2056:	b.n	1fd4 <TwoWire::isr()+0x28>

00002058 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    2058:	ldr	r0, [pc, #4]	; (2060 <lpi2c1_isr()+0x8>)
    205a:	b.w	1fac <TwoWire::isr()>
    205e:	nop
    2060:	.word	0x200058c4

00002064 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    2064:	ldr	r0, [pc, #4]	; (206c <lpi2c3_isr()+0x8>)
    2066:	b.w	1fac <TwoWire::isr()>
    206a:	nop
    206c:	.word	0x20005a04

00002070 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    2070:	ldr	r0, [pc, #4]	; (2078 <lpi2c4_isr()+0x8>)
    2072:	b.w	1fac <TwoWire::isr()>
    2076:	nop
    2078:	.word	0x20005b44

0000207c <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    207c:	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    207e:	ldr	r4, [pc, #36]	; (20a4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    2080:	ldr	r1, [pc, #36]	; (20a8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    2082:	mov	r2, r4
    2084:	ldr	r0, [pc, #36]	; (20ac <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    2086:	bl	1f40 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    208a:	add.w	r2, r4, #80	; 0x50
    208e:	ldr	r1, [pc, #32]	; (20b0 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    2090:	ldr	r0, [pc, #32]	; (20b4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    2092:	bl	1f40 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    2096:	add.w	r2, r4, #160	; 0xa0
    209a:	ldr	r1, [pc, #28]	; (20b8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    209c:	ldr	r0, [pc, #28]	; (20bc <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    209e:	bl	1f40 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    20a2:	pop	{r4, pc}
    20a4:	.word	0x60001f8c
    20a8:	.word	0x403f0000
    20ac:	.word	0x200058c4
    20b0:	.word	0x403f8000
    20b4:	.word	0x20005a04
    20b8:	.word	0x403fc000
    20bc:	.word	0x20005b44

000020c0 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    20c0:	ldrb.w	ip, [r0, #28]
		_status = status;
    20c4:	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    20c6:	cmp.w	ip, #2
		_data = data;
    20ca:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    20cc:	bne.n	20d2 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    20ce:	ldr	r3, [r0, #8]
    20d0:	bx	r3
		} else {
			triggerEventNotImmediate();
    20d2:	b.w	be30 <EventResponder::triggerEventNotImmediate()>
    20d6:	nop

000020d8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    20d8:	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    20da:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    20dc:	movw	r5, #513	; 0x201

	while (count > 0) {
    20e0:	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    20e2:	str	r5, [r4, #16]
	while (count > 0) {
    20e4:	cbz	r3, 2110 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    20e6:	cbz	r1, 2132 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    20e8:	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    20ec:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    20ee:	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    20f0:	ldr	r5, [r4, #112]	; 0x70
    20f2:	lsls	r7, r5, #30
    20f4:	bmi.n	2106 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    20f6:	mov	r5, r2
				count_read--;
    20f8:	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    20fa:	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    20fc:	cbz	r2, 2106 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    20fe:	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    2102:	mov	r2, r5
    2104:	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    2106:	ldr	r5, [r4, #20]
    2108:	lsls	r5, r5, #31
    210a:	bpl.n	20f0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    210c:	cmp	r3, #0
    210e:	bne.n	20e6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    2110:	cbz	r6, 212e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    2112:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    2114:	ldr	r1, [r3, #112]	; 0x70
    2116:	lsls	r1, r1, #30
    2118:	bmi.n	2110 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    211a:	mov	r1, r2
			count_read--;
    211c:	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    211e:	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    2120:	cmp	r2, #0
    2122:	beq.n	2110 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    2124:	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    2128:	mov	r2, r1
	while (count_read) {
    212a:	cmp	r6, #0
    212c:	bne.n	2112 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    212e:	pop	{r4, r5, r6, r7}
    2130:	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    2132:	ldrb.w	r5, [r0, #60]	; 0x3c
    2136:	b.n	20ec <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00002138 <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    2138:	ldr	r3, [pc, #200]	; (2204 <_spi_dma_rxISR1()+0xcc>)
		DMA_CINT = channel;
    213a:	ldr	r1, [pc, #204]	; (2208 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    213c:	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    213e:	ldrd	r5, r4, [r3, #68]	; 0x44
    2142:	ldrb	r0, [r4, #4]
    2144:	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    2146:	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    2148:	ldrb.w	ip, [r5, #4]
    214c:	strb.w	ip, [r1, #28]
    2150:	strb	r0, [r1, #28]
    2152:	cbz	r2, 216a <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    2154:	cmp.w	r2, #32768	; 0x8000
    2158:	bcc.n	21a2 <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    215a:	ldr	r1, [pc, #176]	; (220c <_spi_dma_rxISR1()+0xd4>)
    215c:	add	r1, r2
		DMA_SERQ = channel;
    215e:	ldr	r2, [pc, #168]	; (2208 <_spi_dma_rxISR1()+0xd0>)
    2160:	str	r1, [r3, #64]	; 0x40
    2162:	strb	r0, [r2, #27]
    2164:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2168:	pop	{r4, r5, pc}
    216a:	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    216c:	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    216e:	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2170:	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2172:	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    2176:	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2178:	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    217a:	mov.w	r4, #16128	; 0x3f00
    217e:	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2180:	movs	r1, #3
		_dma_event_responder->triggerEvent();
    2182:	ldr	r4, [r0, #0]
    2184:	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2186:	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    218a:	ldr	r3, [pc, #132]	; (2210 <_spi_dma_rxISR1()+0xd8>)
    218c:	cmp	r4, r3
    218e:	bne.n	21de <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    2190:	ldrb	r3, [r0, #28]
		_status = status;
    2192:	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    2194:	cmp	r3, #2
		_data = data;
    2196:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2198:	bne.n	21e8 <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    219a:	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    219c:	ldmia.w	sp!, {r4, r5, lr}
    21a0:	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    21a2:	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    21a4:	ldrh	r1, [r5, #30]
    21a6:	lsls	r1, r1, #16
    21a8:	bmi.n	21f0 <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    21aa:	uxth	r2, r2
    21ac:	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    21ae:	ldr	r1, [r4, #0]
    21b0:	ldrh	r4, [r5, #30]
    21b2:	uxth	r4, r4
    21b4:	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    21b6:	ldrh	r4, [r1, #30]
    21b8:	lsls	r4, r4, #16
    21ba:	bpl.n	21c8 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    21bc:	ldrh	r4, [r1, #30]
    21be:	ubfx	r2, r2, #0, #9
    21c2:	and.w	r4, r4, #65024	; 0xfe00
    21c6:	orrs	r2, r4
    21c8:	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    21ca:	ldrh	r2, [r1, #30]
    21cc:	uxth	r2, r2
    21ce:	strh	r2, [r1, #22]
    21d0:	movs	r1, #0
    21d2:	ldr	r2, [pc, #52]	; (2208 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    21d4:	str	r1, [r3, #64]	; 0x40
    21d6:	strb	r0, [r2, #27]
    21d8:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    21dc:	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    21de:	mov	r3, r4
    21e0:	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    21e2:	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    21e6:	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    21e8:	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    21ec:	b.w	be30 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    21f0:	ldrh	r1, [r5, #30]
    21f2:	ubfx	lr, r2, #0, #9
    21f6:	uxth	r2, r2
    21f8:	and.w	r1, r1, #65024	; 0xfe00
    21fc:	orr.w	r1, r1, lr
    2200:	strh	r1, [r5, #30]
    2202:	b.n	21ae <_spi_dma_rxISR1()+0x76>
    2204:	.word	0x20005820
    2208:	.word	0x400e8000
    220c:	.word	0xffff8001
    2210:	.word	0x000020c1

00002214 <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    2214:	ldr	r3, [pc, #200]	; (22e0 <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    2216:	ldr	r1, [pc, #204]	; (22e4 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2218:	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    221a:	ldrd	r5, r4, [r3, #68]	; 0x44
    221e:	ldrb	r0, [r4, #4]
    2220:	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    2222:	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    2224:	ldrb.w	ip, [r5, #4]
    2228:	strb.w	ip, [r1, #28]
    222c:	strb	r0, [r1, #28]
    222e:	cbz	r2, 2246 <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    2230:	cmp.w	r2, #32768	; 0x8000
    2234:	bcc.n	227e <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    2236:	ldr	r1, [pc, #176]	; (22e8 <_spi_dma_rxISR0()+0xd4>)
    2238:	add	r1, r2
		DMA_SERQ = channel;
    223a:	ldr	r2, [pc, #168]	; (22e4 <_spi_dma_rxISR0()+0xd0>)
    223c:	str	r1, [r3, #64]	; 0x40
    223e:	strb	r0, [r2, #27]
    2240:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2244:	pop	{r4, r5, pc}
    2246:	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2248:	movs	r4, #15
		_dma_event_responder->triggerEvent();
    224a:	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    224c:	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    224e:	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    2252:	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2254:	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    2256:	mov.w	r4, #16128	; 0x3f00
    225a:	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    225c:	movs	r1, #3
		_dma_event_responder->triggerEvent();
    225e:	ldr	r4, [r0, #0]
    2260:	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2262:	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    2266:	ldr	r3, [pc, #132]	; (22ec <_spi_dma_rxISR0()+0xd8>)
    2268:	cmp	r4, r3
    226a:	bne.n	22ba <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    226c:	ldrb	r3, [r0, #28]
		_status = status;
    226e:	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    2270:	cmp	r3, #2
		_data = data;
    2272:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2274:	bne.n	22c4 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    2276:	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2278:	ldmia.w	sp!, {r4, r5, lr}
    227c:	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    227e:	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2280:	ldrh	r1, [r5, #30]
    2282:	lsls	r1, r1, #16
    2284:	bmi.n	22cc <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    2286:	uxth	r2, r2
    2288:	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    228a:	ldr	r1, [r4, #0]
    228c:	ldrh	r4, [r5, #30]
    228e:	uxth	r4, r4
    2290:	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2292:	ldrh	r4, [r1, #30]
    2294:	lsls	r4, r4, #16
    2296:	bpl.n	22a4 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2298:	ldrh	r4, [r1, #30]
    229a:	ubfx	r2, r2, #0, #9
    229e:	and.w	r4, r4, #65024	; 0xfe00
    22a2:	orrs	r2, r4
    22a4:	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    22a6:	ldrh	r2, [r1, #30]
    22a8:	uxth	r2, r2
    22aa:	strh	r2, [r1, #22]
    22ac:	movs	r1, #0
    22ae:	ldr	r2, [pc, #52]	; (22e4 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    22b0:	str	r1, [r3, #64]	; 0x40
    22b2:	strb	r0, [r2, #27]
    22b4:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    22b8:	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    22ba:	mov	r3, r4
    22bc:	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    22be:	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    22c2:	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    22c4:	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    22c8:	b.w	be30 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    22cc:	ldrh	r1, [r5, #30]
    22ce:	ubfx	lr, r2, #0, #9
    22d2:	uxth	r2, r2
    22d4:	and.w	r1, r1, #65024	; 0xfe00
    22d8:	orr.w	r1, r1, lr
    22dc:	strh	r1, [r5, #30]
    22de:	b.n	228a <_spi_dma_rxISR0()+0x76>
    22e0:	.word	0x200057d0
    22e4:	.word	0x400e8000
    22e8:	.word	0xffff8001
    22ec:	.word	0x000020c1

000022f0 <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    22f0:	movs	r3, #0
    22f2:	strd	r1, r2, [r0]
    22f6:	strd	r3, r3, [r0, #8]
    22fa:	strd	r3, r3, [r0, #16]
    22fe:	strd	r3, r3, [r0, #24]
    2302:	strd	r3, r3, [r0, #32]
    2306:	strd	r3, r3, [r0, #40]	; 0x28
    230a:	strd	r3, r3, [r0, #48]	; 0x30
    230e:	str	r3, [r0, #56]	; 0x38
    2310:	strh	r3, [r0, #60]	; 0x3c
    2312:	strd	r3, r3, [r0, #64]	; 0x40
    2316:	strd	r3, r3, [r0, #72]	; 0x48
	}
    231a:	bx	lr

0000231c <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    231c:	ldr	r3, [r0, #4]
{
    231e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    2322:	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    2326:	ldr	r5, [pc, #516]	; (252c <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    2328:	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    232c:	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
    232e:	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    2332:	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    2336:	ldr	r1, [pc, #504]	; (2530 <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    2338:	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    233a:	ldr	r2, [r5, #24]
    233c:	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    233e:	ldr	r2, [pc, #500]	; (2534 <SPIClass::begin()+0x218>)
    2340:	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    2342:	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    2344:	ldrb.w	lr, [r0, #16]
    2348:	ldr	r2, [pc, #492]	; (2538 <SPIClass::begin()+0x21c>)
    234a:	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    234e:	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    2352:	ldrb	r1, [r6, #16]
    2354:	add.w	r1, r2, r1, lsl #4
    2358:	ldr	r1, [r1, #8]
    235a:	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    235e:	ldrb.w	ip, [r0, #17]
    2362:	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    2366:	add.w	ip, ip, #10
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    236a:	ldrb.w	r1, [r5, #36]	; 0x24
    236e:	add.w	r1, r2, r1, lsl #4
    2372:	ldr	r1, [r1, #8]
    2374:	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    2378:	ldrb	r1, [r0, #18]
    237a:	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    237e:	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    2382:	ldrb.w	fp, [r9, #56]	; 0x38
    2386:	add.w	fp, r2, fp, lsl #4
    238a:	ldr.w	fp, [fp, #8]
    238e:	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    2392:	ldr.w	sl, [r4]
    2396:	ldr	r7, [r3, #4]
    2398:	orr.w	sl, sl, r7
    239c:	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    23a0:	ldrb	r4, [r6, #16]
    23a2:	ldr.w	lr, [lr, #20]
    23a6:	add.w	r4, r2, r4, lsl #4
    23aa:	ldr	r4, [r4, #4]
    23ac:	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    23b0:	ldrb.w	r4, [r5, #36]	; 0x24
    23b4:	ldr.w	ip, [r3, ip, lsl #2]
    23b8:	add.w	r4, r2, r4, lsl #4
    23bc:	ldr	r4, [r4, #4]
    23be:	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    23c2:	ldrb.w	r4, [r9, #56]	; 0x38
    23c6:	add.w	r2, r2, r4, lsl #4
    23ca:	ldr	r2, [r2, #4]
    23cc:	ldr	r1, [r1, #60]	; 0x3c
    23ce:	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    23d0:	ldr	r2, [r3, #72]	; 0x48
    23d2:	ldrb.w	r1, [r9, #68]	; 0x44
    23d6:	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    23d8:	ldr	r2, [r3, #32]
    23da:	ldrb	r1, [r6, #28]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    23dc:	ldr	r3, [r3, #52]	; 0x34
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    23de:	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    23e0:	ldrb.w	r2, [r5, #48]	; 0x30
    23e4:	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    23e6:	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    23e8:	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    23ea:	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    23ee:	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    23f0:	ldrb	r2, [r0, #19]
    23f2:	cmp	r2, #0
    23f4:	beq.n	245a <SPIClass::begin()+0x13e>
			__disable_irq();
    23f6:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    23f8:	ldrb	r3, [r0, #19]
    23fa:	lsls	r4, r3, #31
    23fc:	bpl.n	2410 <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    23fe:	mov.w	r1, #3758153728	; 0xe000e000
    2402:	ldr	r4, [r0, #20]
    2404:	ldr.w	r2, [r1, #384]	; 0x180
    2408:	ands	r2, r4
    240a:	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    240c:	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    2410:	lsls	r1, r3, #30
    2412:	bpl.n	2426 <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    2414:	mov.w	r1, #3758153728	; 0xe000e000
    2418:	ldr	r4, [r0, #24]
    241a:	ldr.w	r2, [r1, #388]	; 0x184
    241e:	ands	r2, r4
    2420:	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    2422:	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    2426:	lsls	r2, r3, #29
    2428:	bpl.n	243c <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    242a:	mov.w	r1, #3758153728	; 0xe000e000
    242e:	ldr	r4, [r0, #28]
    2430:	ldr.w	r2, [r1, #392]	; 0x188
    2434:	ands	r2, r4
    2436:	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    2438:	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    243c:	lsls	r7, r3, #28
    243e:	bpl.n	2452 <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    2440:	mov.w	r1, #3758153728	; 0xe000e000
    2444:	ldr	r4, [r0, #32]
    2446:	ldr.w	r2, [r1, #396]	; 0x18c
    244a:	ands	r2, r4
    244c:	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    244e:	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    2452:	lsls	r6, r3, #27
    2454:	bmi.n	2502 <SPIClass::begin()+0x1e6>
			__enable_irq();
    2456:	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2458:	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    245a:	ldr	r4, [pc, #224]	; (253c <SPIClass::begin()+0x220>)
    245c:	ldr	r2, [r0, #8]
    245e:	cmp	r2, r4
    2460:	beq.n	2516 <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    2462:	ldr	r2, [pc, #200]	; (252c <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    2464:	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    2466:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2468:	ldr	r1, [pc, #212]	; (2540 <SPIClass::begin()+0x224>)
    246a:	ubfx	r6, r2, #4, #2
    246e:	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    2472:	ldr	r5, [pc, #208]	; (2544 <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2474:	ldr.w	r1, [r1, r6, lsl #2]
    2478:	adds	r2, #1
    247a:	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    247e:	cmp	r2, r5
    2480:	bhi.n	24e6 <SPIClass::begin()+0x1ca>
    2482:	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2484:	str	r2, [r0, #12]
		port().CR = 0;
    2486:	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    2488:	movs	r1, #3
		port().CR = 0;
    248a:	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    248c:	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    248e:	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    2490:	movs	r1, #1
		port().CCR = _ccr;
    2492:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    2494:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    2496:	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    2498:	ldrb	r3, [r0, #19]
    249a:	cbz	r3, 24e2 <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    249c:	lsls	r5, r3, #31
    249e:	bpl.n	24aa <SPIClass::begin()+0x18e>
    24a0:	ldr	r1, [r0, #40]	; 0x28
    24a2:	mov.w	r2, #3758153728	; 0xe000e000
    24a6:	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    24aa:	lsls	r4, r3, #30
    24ac:	bpl.n	24b8 <SPIClass::begin()+0x19c>
    24ae:	ldr	r1, [r0, #44]	; 0x2c
    24b0:	mov.w	r2, #3758153728	; 0xe000e000
    24b4:	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    24b8:	lsls	r1, r3, #29
    24ba:	bpl.n	24c6 <SPIClass::begin()+0x1aa>
    24bc:	ldr	r1, [r0, #48]	; 0x30
    24be:	mov.w	r2, #3758153728	; 0xe000e000
    24c2:	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    24c6:	lsls	r2, r3, #28
    24c8:	bpl.n	24d4 <SPIClass::begin()+0x1b8>
    24ca:	ldr	r1, [r0, #52]	; 0x34
    24cc:	mov.w	r2, #3758153728	; 0xe000e000
    24d0:	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    24d4:	lsls	r3, r3, #27
    24d6:	bpl.n	24e2 <SPIClass::begin()+0x1c6>
    24d8:	ldr	r2, [r0, #56]	; 0x38
    24da:	mov.w	r3, #3758153728	; 0xe000e000
    24de:	str.w	r2, [r3, #272]	; 0x110
}
    24e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    24e6:	ldr	r1, [pc, #96]	; (2548 <SPIClass::begin()+0x22c>)
    24e8:	umull	r5, r1, r1, r2
    24ec:	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    24ee:	udiv	r2, r2, r1
    24f2:	cmp	r2, r4
    24f4:	it	hi
    24f6:	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    24f8:	cmp.w	r1, #258	; 0x102
    24fc:	bcc.n	251a <SPIClass::begin()+0x1fe>
    24fe:	ldr	r2, [pc, #76]	; (254c <SPIClass::begin()+0x230>)
				div = d-2;
    2500:	b.n	2484 <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    2502:	mov.w	r2, #3758153728	; 0xe000e000
    2506:	ldr	r1, [r0, #36]	; 0x24
    2508:	ldr.w	r3, [r2, #400]	; 0x190
    250c:	ands	r3, r1
    250e:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    2510:	str.w	r3, [r2, #400]	; 0x190
    2514:	b.n	2456 <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    2516:	ldr	r2, [r0, #12]
    2518:	b.n	2486 <SPIClass::begin()+0x16a>
			if (d > 2) {
    251a:	cmp	r1, #2
    251c:	bls.n	2482 <SPIClass::begin()+0x166>
				div = d-2;
    251e:	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2520:	lsrs	r4, r1, #1
    2522:	lsls	r2, r4, #8
    2524:	orr.w	r2, r2, r4, lsl #16
    2528:	orrs	r2, r1
    252a:	b.n	2484 <SPIClass::begin()+0x168>
    252c:	.word	0x400fc000
    2530:	.word	0xe3ffffcf
    2534:	.word	0x08000010
    2538:	.word	0x20000eb0
    253c:	.word	0x003d0900
    2540:	.word	0x20000c1c
    2544:	.word	0x003d08ff
    2548:	.word	0x431bde83
    254c:	.word	0x007f7fff

00002550 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    2550:	cbz	r3, 2556 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    2552:	b.w	20d8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    2556:	bx	lr

00002558 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    2558:	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    255a:	ldrd	r1, r2, [r3]
    255e:	ldr	r1, [r1, #0]
    2560:	tst	r1, r2
    2562:	bne.n	2566 <SPIClass::end()+0xe>
    2564:	bx	lr
void SPIClass::end() {
    2566:	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2568:	ldr	r2, [r0, #0]
    256a:	mov	r4, r0
		port().CR = 0;  // turn off the enable
    256c:	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    256e:	movs	r1, #5
		port().CR = 0;  // turn off the enable
    2570:	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    2572:	ldrb	r2, [r4, #16]
    2574:	add	r3, r2
    2576:	ldrb	r0, [r3, #16]
    2578:	bl	b8dc <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    257c:	ldrb	r2, [r4, #17]
    257e:	ldr	r3, [r4, #4]
    2580:	movs	r1, #5
    2582:	add	r3, r2
    2584:	ldrb.w	r0, [r3, #36]	; 0x24
    2588:	bl	b8dc <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    258c:	ldr	r3, [r4, #4]
    258e:	ldrb	r2, [r4, #18]
    2590:	movs	r1, #5
    2592:	add	r3, r2
}
    2594:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    2598:	ldrb.w	r0, [r3, #56]	; 0x38
    259c:	b.w	b8dc <pinMode>

000025a0 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    25a0:	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    25a2:	ldr	r2, [pc, #32]	; (25c4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    25a4:	ldr	r1, [pc, #32]	; (25c8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    25a6:	ldr	r0, [pc, #36]	; (25cc <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    25a8:	bl	22f0 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    25ac:	ldr	r2, [pc, #32]	; (25d0 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    25ae:	ldr	r1, [pc, #36]	; (25d4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    25b0:	ldr	r0, [pc, #36]	; (25d8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    25b2:	bl	22f0 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    25b6:	ldr	r2, [pc, #36]	; (25dc <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    25b8:	ldr	r1, [pc, #36]	; (25e0 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    25ba:	ldr	r0, [pc, #40]	; (25e4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    25bc:	bl	22f0 <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    25c0:	pop	{r3, pc}
    25c2:	nop
    25c4:	.word	0x20000924
    25c8:	.word	0x403a0000
    25cc:	.word	0x200057d0
    25d0:	.word	0x200008b4
    25d4:	.word	0x4039c000
    25d8:	.word	0x20005820
    25dc:	.word	0x20000844
    25e0:	.word	0x40394000
    25e4:	.word	0x20005870

000025e8 <SDClass::~SDClass()>:
class SDClass : public FS
    25e8:	bx	lr
    25ea:	nop

000025ec <SDClass::dateTime(unsigned short*, unsigned short*)>:
{
    25ec:	push	{r4, r5, lr}
    25ee:	sub	sp, #12
    25f0:	mov	r5, r0
    25f2:	mov	r4, r1
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    25f4:	bl	b70c <rtc_get>
	if (now < 315532800) { // before 1980
    25f8:	ldr	r3, [pc, #112]	; (266c <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    25fa:	cmp	r0, r3
    25fc:	bhi.n	2608 <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    25fe:	movs	r3, #0
    2600:	strh	r3, [r5, #0]
		*time = 0;
    2602:	strh	r3, [r4, #0]
}
    2604:	add	sp, #12
    2606:	pop	{r4, r5, pc}
		breakTime(now, datetime);
    2608:	mov	r1, sp
    260a:	bl	c02c <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    260e:	ldrb.w	r3, [sp, #5]
    2612:	ldrb.w	r2, [sp, #6]
    2616:	adds	r3, #1
    2618:	ldrb.w	r1, [sp, #4]
  year -= 1980;
    261c:	subs	r2, #80	; 0x50
    261e:	uxtb	r3, r3
    2620:	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0
    2622:	cmp	r1, #31
    2624:	it	ls
    2626:	cmpls	r3, #12
    2628:	bhi.n	262e <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    262a:	cmp	r2, #127	; 0x7f
    262c:	bls.n	2660 <SDClass::dateTime(unsigned short*, unsigned short*)+0x74>
                                              : year << 9 | month << 5 | day;
    262e:	movs	r1, #0
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    2630:	ldrb.w	r2, [sp, #2]
    2634:	ldrb.w	r3, [sp, #1]
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    2638:	strh	r1, [r5, #0]
  return hour > 23 || minute > 59 || second > 59
    263a:	cmp	r2, #23
    263c:	it	ls
    263e:	cmpls	r3, #59	; 0x3b
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    2640:	ldrb.w	r1, [sp]
    2644:	bhi.n	264a <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    2646:	cmp	r1, #59	; 0x3b
    2648:	bls.n	2652 <SDClass::dateTime(unsigned short*, unsigned short*)+0x66>
             : hour << 11 | minute << 5 | second >> 1;
    264a:	movs	r3, #0
    264c:	strh	r3, [r4, #0]
}
    264e:	add	sp, #12
    2650:	pop	{r4, r5, pc}
    2652:	lsls	r3, r3, #5
    2654:	orr.w	r3, r3, r2, lsl #11
    2658:	orr.w	r3, r3, r1, lsr #1
    265c:	uxth	r3, r3
    265e:	b.n	264c <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
                                              : year << 9 | month << 5 | day;
    2660:	orr.w	r1, r1, r3, lsl #5
    2664:	orr.w	r1, r1, r2, lsl #9
    2668:	uxth	r1, r1
    266a:	b.n	2630 <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
    266c:	.word	0x12cea5ff

00002670 <SDClass::open(char const*, unsigned char)>:
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2670:	cmp	r3, #1
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    2672:	push	{r4, r5, r6, r7, lr}
    2674:	mov	r5, r0
    2676:	sub	sp, #84	; 0x54
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2678:	beq.n	26f8 <SDClass::open(char const*, unsigned char)+0x88>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    267a:	cmp	r3, #2
    267c:	movw	r0, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2680:	add.w	r1, r1, #4
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    2684:	ite	eq
    2686:	moveq	r3, r0
    2688:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    268a:	mov	r0, sp
    268c:	bl	7640 <FsVolume::open(char const*, int)>
    2690:	ldr	r3, [sp, #72]	; 0x48
    2692:	cmp	r3, #0
    2694:	beq.n	270a <SDClass::open(char const*, unsigned char)+0x9a>
		if (file) return File(new SDFile(file));
    2696:	movs	r0, #92	; 0x5c
class FileImpl {
    2698:	movs	r6, #0
    269a:	bl	cd04 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    269e:	ldr	r3, [pc, #132]	; (2724 <SDClass::open(char const*, unsigned char)+0xb4>)
    26a0:	add	r7, sp, #16
		if (file) return File(new SDFile(file));
    26a2:	mov	r4, r0
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    26a4:	strd	r3, r6, [r0]
class Print
    26a8:	ldrb.w	r3, [sp, #4]
    26ac:	mov	r1, r7
    26ae:	adds	r0, #24
    26b0:	strb.w	r3, [r0, #-12]
class Stream : public Print
    26b4:	ldr	r3, [pc, #112]	; (2728 <SDClass::open(char const*, unsigned char)+0xb8>)
    26b6:	str.w	r3, [r0, #-16]
    26ba:	ldr	r3, [sp, #8]
    26bc:	str.w	r3, [r0, #-8]
    26c0:	ldrb.w	r3, [sp, #12]
    26c4:	strb.w	r3, [r0, #-4]
    26c8:	bl	7364 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    26cc:	ldr	r3, [pc, #92]	; (272c <SDClass::open(char const*, unsigned char)+0xbc>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    26ce:	mov.w	r2, #1000	; 0x3e8
    26d2:	str	r6, [r4, #88]	; 0x58
    26d4:	str	r3, [r4, #8]
	File(FileImpl *file) {
    26d6:	ldr	r3, [pc, #88]	; (2730 <SDClass::open(char const*, unsigned char)+0xc0>)
	constexpr Print() : write_error(0) {}
    26d8:	strb	r6, [r5, #4]
    26da:	str	r3, [r5, #0]
		if (f) f->refcount++;
    26dc:	ldr	r3, [r4, #4]
    26de:	strb	r6, [r5, #12]
    26e0:	adds	r3, #1
    26e2:	str	r2, [r5, #8]
		f = file;
    26e4:	str	r4, [r5, #16]
		if (f) f->refcount++;
    26e6:	str	r3, [r4, #4]
    26e8:	ldr	r3, [pc, #72]	; (2734 <SDClass::open(char const*, unsigned char)+0xc4>)
  ~FsBaseFile() { close(); }
    26ea:	mov	r0, r7
    26ec:	str	r3, [sp, #0]
    26ee:	bl	73e8 <FsBaseFile::close()>
		return File();
	}
    26f2:	mov	r0, r5
    26f4:	add	sp, #84	; 0x54
    26f6:	pop	{r4, r5, r6, r7, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    26f8:	movw	r3, #16898	; 0x4202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    26fc:	adds	r1, #4
    26fe:	mov	r0, sp
    2700:	bl	7640 <FsVolume::open(char const*, int)>
  bool isOpen() const { return m_fFile || m_xFile; }
    2704:	ldr	r3, [sp, #72]	; 0x48
    2706:	cmp	r3, #0
    2708:	bne.n	2696 <SDClass::open(char const*, unsigned char)+0x26>
    270a:	ldr	r3, [sp, #76]	; 0x4c
    270c:	cmp	r3, #0
    270e:	bne.n	2696 <SDClass::open(char const*, unsigned char)+0x26>
    2710:	mov.w	r1, #1000	; 0x3e8
	constexpr File() : f(nullptr) { }
    2714:	ldr	r2, [pc, #24]	; (2730 <SDClass::open(char const*, unsigned char)+0xc0>)
    2716:	add	r7, sp, #16
    2718:	strb	r3, [r5, #4]
    271a:	str	r1, [r5, #8]
    271c:	strb	r3, [r5, #12]
    271e:	str	r2, [r5, #0]
    2720:	str	r3, [r5, #16]
    2722:	b.n	26e8 <SDClass::open(char const*, unsigned char)+0x78>
    2724:	.word	0x20000adc
    2728:	.word	0x20000b38
    272c:	.word	0x20000aac
    2730:	.word	0x20000a80
    2734:	.word	0x2000099c

00002738 <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
    2738:	push	{r4, lr}
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    return m_fVol ? m_fVol->rmdir(path) : m_xVol ? m_xVol->rmdir(path) : false;
    273a:	ldr.w	r4, [r0, #1156]	; 0x484
    273e:	sub	sp, #56	; 0x38
    2740:	mov	r2, r1
    2742:	cbz	r4, 2756 <SDClass::rmdir(char const*)+0x1e>
    2744:	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    2746:	mov	r1, r4
    2748:	mov	r0, sp
    274a:	str	r3, [sp, #0]
    274c:	bl	5c90 <FatFile::open(FatVolume*, char const*, int)>
    2750:	cbnz	r0, 2774 <SDClass::rmdir(char const*)+0x3c>
		return sdfs.rmdir(filepath);
	}
    2752:	add	sp, #56	; 0x38
    2754:	pop	{r4, pc}
    2756:	ldr.w	r1, [r0, #1160]	; 0x488
    275a:	cbz	r1, 276e <SDClass::rmdir(char const*)+0x36>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    275c:	mov	r3, r4
    275e:	mov	r0, sp
    2760:	str	r4, [sp, #48]	; 0x30
    2762:	bl	4044 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2766:	cbnz	r0, 277e <SDClass::rmdir(char const*)+0x46>
    2768:	movs	r0, #0
    276a:	add	sp, #56	; 0x38
    276c:	pop	{r4, pc}
    276e:	mov	r0, r1
    2770:	add	sp, #56	; 0x38
    2772:	pop	{r4, pc}
    2774:	mov	r0, sp
    2776:	bl	6130 <FatFile::rmdir()>
    277a:	add	sp, #56	; 0x38
    277c:	pop	{r4, pc}
    277e:	mov	r0, sp
    2780:	bl	46ec <ExFatFile::rmdir()>
    2784:	cmp	r0, #0
    2786:	beq.n	2768 <SDClass::rmdir(char const*)+0x30>
    2788:	b.n	2752 <SDClass::rmdir(char const*)+0x1a>
    278a:	nop

0000278c <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    278c:	push	{r4, r5, r6, lr}
    return m_fVol   ? m_fVol->rename(oldPath, newPath)
    278e:	ldr.w	r5, [r0, #1156]	; 0x484
    2792:	sub	sp, #56	; 0x38
    2794:	mov	r6, r2
    2796:	cbz	r5, 27b0 <SDClass::rename(char const*, char const*)+0x24>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() { return m_cwv; }
  FatFile* vwd() { return &m_vwd; }
    2798:	addw	r5, r5, #1092	; 0x444
    279c:	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    279e:	mov	r2, r1
    27a0:	mov	r0, sp
    27a2:	mov	r1, r5
    27a4:	str	r3, [sp, #0]
    27a6:	bl	5b98 <FatFile::open(FatFile*, char const*, int)>
    27aa:	cbnz	r0, 27d2 <SDClass::rename(char const*, char const*)+0x46>
	}
    27ac:	add	sp, #56	; 0x38
    27ae:	pop	{r4, r5, r6, pc}
    27b0:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->rename(oldPath, newPath)
    27b4:	cmp	r0, #0
    27b6:	beq.n	27ac <SDClass::rename(char const*, char const*)+0x20>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() { return m_cwv; }
  ExFatFile* vwd() { return &m_vwd; }
    27b8:	add.w	r4, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    27bc:	mov	r2, r1
    27be:	mov	r3, r5
    27c0:	mov	r0, sp
    27c2:	mov	r1, r4
    27c4:	str	r5, [sp, #48]	; 0x30
    27c6:	bl	3f50 <ExFatFile::open(ExFatFile*, char const*, int)>
    27ca:	cbnz	r0, 27e0 <SDClass::rename(char const*, char const*)+0x54>
    27cc:	movs	r0, #0
    27ce:	add	sp, #56	; 0x38
    27d0:	pop	{r4, r5, r6, pc}
    27d2:	mov	r2, r6
    27d4:	mov	r1, r5
    27d6:	mov	r0, sp
    27d8:	bl	5f44 <FatFile::rename(FatFile*, char const*)>
    27dc:	add	sp, #56	; 0x38
    27de:	pop	{r4, r5, r6, pc}
    27e0:	mov	r2, r6
    27e2:	mov	r1, r4
    27e4:	mov	r0, sp
    27e6:	bl	4994 <ExFatFile::rename(ExFatFile*, char const*)>
    27ea:	cmp	r0, #0
    27ec:	beq.n	27cc <SDClass::rename(char const*, char const*)+0x40>
    27ee:	b.n	27ac <SDClass::rename(char const*, char const*)+0x20>

000027f0 <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    27f0:	push	{r4, lr}
    return m_fVol   ? m_fVol->remove(path)
    27f2:	ldr.w	r4, [r0, #1156]	; 0x484
    27f6:	sub	sp, #56	; 0x38
    27f8:	mov	r2, r1
    27fa:	cbz	r4, 2810 <SDClass::remove(char const*)+0x20>
    27fc:	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    27fe:	movs	r3, #1
    2800:	mov	r1, r4
    2802:	str	r0, [sp, #0]
    2804:	mov	r0, sp
    2806:	bl	5c90 <FatFile::open(FatVolume*, char const*, int)>
    280a:	cbnz	r0, 282e <SDClass::remove(char const*)+0x3e>
	}
    280c:	add	sp, #56	; 0x38
    280e:	pop	{r4, pc}
    2810:	ldr.w	r1, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->remove(path)
    2814:	cbz	r1, 2828 <SDClass::remove(char const*)+0x38>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    2816:	movs	r3, #1
    2818:	mov	r0, sp
    281a:	str	r4, [sp, #48]	; 0x30
    281c:	bl	4044 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2820:	cbnz	r0, 2838 <SDClass::remove(char const*)+0x48>
    2822:	movs	r0, #0
    2824:	add	sp, #56	; 0x38
    2826:	pop	{r4, pc}
    2828:	mov	r0, r1
    282a:	add	sp, #56	; 0x38
    282c:	pop	{r4, pc}
    282e:	mov	r0, sp
    2830:	bl	7254 <FatFile::remove()>
    2834:	add	sp, #56	; 0x38
    2836:	pop	{r4, pc}
    2838:	mov	r0, sp
    283a:	bl	4638 <ExFatFile::remove()>
    283e:	cmp	r0, #0
    2840:	beq.n	2822 <SDClass::remove(char const*)+0x32>
    2842:	b.n	280c <SDClass::remove(char const*)+0x1c>

00002844 <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    2844:	push	{r4, r5, lr}
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
    2846:	ldr.w	r4, [r0, #1156]	; 0x484
    284a:	sub	sp, #60	; 0x3c
    284c:	mov	r2, r1
    284e:	cbz	r4, 2864 <SDClass::mkdir(char const*)+0x20>
    2850:	movs	r5, #0
    return sub.mkdir(vwd(), path, pFlag);
    2852:	movs	r3, #1
    2854:	addw	r1, r4, #1092	; 0x444
    2858:	mov	r0, sp
    285a:	str	r5, [sp, #0]
    285c:	bl	5ab4 <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    2860:	add	sp, #60	; 0x3c
    2862:	pop	{r4, r5, pc}
    2864:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->mkdir(path, pFlag)
    2868:	cmp	r0, #0
    286a:	beq.n	2860 <SDClass::mkdir(char const*)+0x1c>
    return sub.mkdir(vwd(), path, pFlag);
    286c:	add.w	r1, r0, #1096	; 0x448
    2870:	movs	r3, #1
    2872:	mov	r0, sp
    2874:	str	r4, [sp, #48]	; 0x30
    2876:	bl	4a98 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    287a:	add	sp, #60	; 0x3c
    287c:	pop	{r4, r5, pc}
    287e:	nop

00002880 <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    2880:	push	{r4, lr}
    return m_fVol   ? m_fVol->exists(path)
    2882:	ldr.w	r4, [r0, #1156]	; 0x484
    2886:	sub	sp, #56	; 0x38
    2888:	mov	r2, r1
    288a:	cbz	r4, 289c <SDClass::exists(char const*)+0x1c>
    288c:	movs	r3, #0
    return tmp.open(this, path, O_RDONLY);
    288e:	mov	r1, r4
    2890:	mov	r0, sp
    2892:	str	r3, [sp, #0]
    2894:	bl	5c90 <FatFile::open(FatVolume*, char const*, int)>
	}
    2898:	add	sp, #56	; 0x38
    289a:	pop	{r4, pc}
    289c:	ldr.w	r1, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->exists(path)
    28a0:	cbz	r1, 28b0 <SDClass::exists(char const*)+0x30>
    return tmp.open(this, path, O_RDONLY);
    28a2:	mov	r3, r4
    28a4:	mov	r0, sp
    28a6:	str	r4, [sp, #48]	; 0x30
    28a8:	bl	4044 <ExFatFile::open(ExFatVolume*, char const*, int)>
    28ac:	add	sp, #56	; 0x38
    28ae:	pop	{r4, pc}
    28b0:	mov	r0, r1
    28b2:	add	sp, #56	; 0x38
    28b4:	pop	{r4, pc}
    28b6:	nop

000028b8 <SDClass::usedSize()>:
	uint64_t usedSize() {
    28b8:	push	{r3, r4, r5, r6, r7, lr}
    28ba:	mov	r5, r0
		if (!cardPreviouslyPresent) return (uint64_t)0;
    28bc:	ldrb.w	r0, [r0, #1228]	; 0x4cc
    28c0:	cbnz	r0, 28c6 <SDClass::usedSize()+0xe>
    28c2:	mov	r1, r0
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
    28c4:	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol   ? m_fVol->clusterCount()
    28c6:	ldr.w	r3, [r5, #1156]	; 0x484
    28ca:	cmp	r3, #0
    28cc:	beq.n	2966 <SDClass::usedSize()+0xae>
  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() { return m_cache.clear(); }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    28ce:	ldr	r4, [r3, #28]
    28d0:	ldr.w	r0, [r5, #1164]	; 0x48c
    28d4:	subs	r4, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() { return m_card ? m_card->hasDedicatedSpi() : false; }
    28d6:	cmp	r0, #0
    28d8:	beq.n	2992 <SDClass::usedSize()+0xda>
    28da:	ldr	r3, [r0, #0]
    28dc:	ldr	r3, [r3, #56]	; 0x38
    28de:	blx	r3
    28e0:	cbz	r0, 291c <SDClass::usedSize()+0x64>
    28e2:	ldr.w	r0, [r5, #1164]	; 0x48c
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_card ? m_card->isDedicatedSpi() : false; }
    28e6:	cbz	r0, 2948 <SDClass::usedSize()+0x90>
    28e8:	ldr	r3, [r0, #0]
    28ea:	ldr	r3, [r3, #60]	; 0x3c
    28ec:	blx	r3
    28ee:	cbnz	r0, 291c <SDClass::usedSize()+0x64>
    28f0:	ldr.w	r0, [r5, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    28f4:	cbz	r0, 2948 <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    28f6:	ldr	r3, [r0, #0]
    28f8:	movs	r1, #1
    28fa:	ldr	r3, [r3, #64]	; 0x40
    28fc:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    28fe:	mov	r7, r0
    2900:	cbz	r0, 2948 <SDClass::usedSize()+0x90>
    return m_fVol   ? m_fVol->freeClusterCount()
    2902:	ldr.w	r0, [r5, #1156]	; 0x484
    2906:	cbnz	r0, 2960 <SDClass::usedSize()+0xa8>
    2908:	ldr.w	r3, [r5, #1160]	; 0x488
           : m_xVol ? m_xVol->freeClusterCount()
    290c:	cbnz	r3, 292c <SDClass::usedSize()+0x74>
    290e:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    2912:	cmp	r0, #0
    2914:	beq.n	29a2 <SDClass::usedSize()+0xea>
    uint32_t rtn = Vol::freeClusterCount();
    2916:	mov.w	r6, #4294967295
    291a:	b.n	293c <SDClass::usedSize()+0x84>
    return m_fVol   ? m_fVol->freeClusterCount()
    291c:	ldr.w	r0, [r5, #1156]	; 0x484
    2920:	cbnz	r0, 295e <SDClass::usedSize()+0xa6>
    2922:	ldr.w	r3, [r5, #1160]	; 0x488
           : m_xVol ? m_xVol->freeClusterCount()
    2926:	cmp	r3, #0
    2928:	beq.n	29a2 <SDClass::usedSize()+0xea>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    292a:	mov	r7, r0
    292c:	mov	r0, r3
    292e:	bl	4430 <ExFatPartition::freeClusterCount()>
    uint32_t rtn = Vol::freeClusterCount();
    2932:	mov	r6, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    2934:	cbz	r7, 2946 <SDClass::usedSize()+0x8e>
    2936:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    293a:	cbz	r0, 2948 <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    293c:	ldr	r3, [r0, #0]
    293e:	movs	r1, #0
    2940:	ldr	r3, [r3, #64]	; 0x40
    2942:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    2944:	cbz	r0, 2948 <SDClass::usedSize()+0x90>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    2946:	subs	r4, r4, r6
    return m_fVol   ? m_fVol->bytesPerCluster()
    2948:	ldr.w	r3, [r5, #1156]	; 0x484
    294c:	cbz	r3, 2982 <SDClass::usedSize()+0xca>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    294e:	ldrb	r3, [r3, #6]
    2950:	mov.w	r1, #512	; 0x200
    2954:	lsls	r1, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    2956:	uxth	r1, r1
    2958:	umull	r0, r1, r1, r4
	}
    295c:	pop	{r3, r4, r5, r6, r7, pc}
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    295e:	movs	r7, #0
    return m_fVol   ? m_fVol->freeClusterCount()
    2960:	bl	6950 <FatPartition::freeClusterCount()>
    2964:	b.n	2932 <SDClass::usedSize()+0x7a>
    2966:	ldr.w	r3, [r5, #1160]	; 0x488
  uint32_t clusterCount() const {
    296a:	ldr.w	r0, [r5, #1164]	; 0x48c
           : m_xVol ? m_xVol->clusterCount()
    296e:	cbz	r3, 299c <SDClass::usedSize()+0xe4>
  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() { return m_dataCache.clear(); }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const { return m_clusterCount; }
    2970:	ldr.w	r4, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() { return m_card ? m_card->hasDedicatedSpi() : false; }
    2974:	cmp	r0, #0
    2976:	bne.n	28da <SDClass::usedSize()+0x22>
           : m_xVol ? m_xVol->freeClusterCount()
    2978:	mov	r0, r3
    297a:	bl	4430 <ExFatPartition::freeClusterCount()>
    297e:	mov	r6, r0
    2980:	b.n	2946 <SDClass::usedSize()+0x8e>
    2982:	ldr.w	r3, [r5, #1160]	; 0x488
           : m_xVol ? m_xVol->bytesPerCluster()
    2986:	cbz	r3, 29a2 <SDClass::usedSize()+0xea>
		  * (uint64_t)sdfs.bytesPerCluster();
    2988:	ldr.w	r1, [r3, #1084]	; 0x43c
    298c:	umull	r0, r1, r1, r4
	}
    2990:	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol   ? m_fVol->freeClusterCount()
    2992:	mov	r0, r3
    2994:	bl	6950 <FatPartition::freeClusterCount()>
    2998:	mov	r6, r0
    299a:	b.n	2946 <SDClass::usedSize()+0x8e>
    299c:	cbz	r0, 29a2 <SDClass::usedSize()+0xea>
           : m_xVol ? m_xVol->clusterCount()
    299e:	mov	r4, r3
    29a0:	b.n	28da <SDClass::usedSize()+0x22>
  uint32_t bytesPerCluster() const {
    29a2:	movs	r0, #0
    29a4:	mov	r1, r0
    29a6:	b.n	28c4 <SDClass::usedSize()+0xc>

000029a8 <SDClass::totalSize()>:
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    29a8:	ldrb.w	r3, [r0, #1228]	; 0x4cc
    29ac:	cbz	r3, 29c8 <SDClass::totalSize()+0x20>
    return m_fVol   ? m_fVol->clusterCount()
    29ae:	ldr.w	r3, [r0, #1156]	; 0x484
    29b2:	cbz	r3, 29ce <SDClass::totalSize()+0x26>
    29b4:	ldrb	r2, [r3, #6]
    29b6:	mov.w	r0, #512	; 0x200
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    29ba:	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    29bc:	lsls	r0, r2
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    29be:	subs	r1, #1
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    29c0:	uxth	r0, r0
    29c2:	umull	r0, r1, r0, r1
    29c6:	bx	lr
		if (!cardPreviouslyPresent) return (uint64_t)0;
    29c8:	mov	r0, r3
    29ca:	mov	r1, r0
	}
    29cc:	bx	lr
    29ce:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->clusterCount()
    29d2:	cmp	r0, #0
    29d4:	beq.n	29ca <SDClass::totalSize()+0x22>
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    29d6:	ldr.w	r1, [r0, #1084]	; 0x43c
    29da:	ldr.w	r0, [r0, #1072]	; 0x430
    29de:	umull	r0, r1, r1, r0
    29e2:	bx	lr

000029e4 <SDClass::format(int, char, Print&)>:
{
    29e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SdCard* card() { return m_card; }
    29e8:	ldr.w	r5, [r0, #1164]	; 0x48c
    29ec:	sub	sp, #60	; 0x3c
	if (!card) return false; // no SD card
    29ee:	cbz	r5, 2a04 <SDClass::format(int, char, Print&)+0x20>
    29f0:	mov	r8, r3
	uint32_t sectors = card->sectorCount();
    29f2:	ldr	r3, [r5, #0]
    29f4:	mov	r4, r0
    29f6:	mov	r0, r5
    29f8:	ldr	r3, [r3, #24]
    29fa:	blx	r3
	if (sectors <= 12288) return false; // card too small
    29fc:	cmp.w	r0, #12288	; 0x3000
	uint32_t sectors = card->sectorCount();
    2a00:	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    2a02:	bhi.n	2a0e <SDClass::format(int, char, Print&)+0x2a>
	if (!card) return false; // no SD card
    2a04:	movs	r6, #0
}
    2a06:	mov	r0, r6
    2a08:	add	sp, #60	; 0x3c
    2a0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    2a0e:	mov.w	r0, #512	; 0x200
    2a12:	bl	ce9c <malloc>
	if (!buf) return false; // unable to allocate memory
    2a16:	mov	r7, r0
    2a18:	cmp	r0, #0
    2a1a:	beq.n	2a04 <SDClass::format(int, char, Print&)+0x20>
		ret = exFatFormatter.format(card, buf, &pr);
    2a1c:	add.w	r9, sp, #12
	if (sectors > 67108864) {
    2a20:	cmp.w	r6, #67108864	; 0x4000000
		ret = exFatFormatter.format(card, buf, &pr);
    2a24:	mov	r2, r0
    2a26:	mov	r3, r8
    2a28:	mov	r1, r5
    2a2a:	mov	r0, r9
	if (sectors > 67108864) {
    2a2c:	bls.n	2a8e <SDClass::format(int, char, Print&)+0xaa>
		ret = exFatFormatter.format(card, buf, &pr);
    2a2e:	bl	30f8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    2a32:	mov	r6, r0
	free(buf);
    2a34:	mov	r0, r7
    2a36:	bl	ceac <free>
	if (ret) {
    2a3a:	cmp	r6, #0
    2a3c:	beq.n	2a04 <SDClass::format(int, char, Print&)+0x20>
		card->syncDevice();
    2a3e:	ldr	r3, [r5, #0]
    2a40:	mov	r0, r5
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    2a42:	adds	r7, r4, #4
		card->syncDevice();
    2a44:	ldr	r3, [r3, #28]
    2a46:	blx	r3
    if (spiConfigBackupPin == 255) {
    2a48:	ldrb.w	r3, [r4, #1212]	; 0x4bc
    2a4c:	cmp	r3, #255	; 0xff
    2a4e:	beq.n	2a96 <SDClass::format(int, char, Print&)+0xb2>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    2a50:	ldr.w	r3, [r4, #1216]	; 0x4c0
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    2a54:	addw	r5, r4, #1180	; 0x49c
    2a58:	str	r3, [sp, #16]
    2a5a:	mov	r0, r5
    2a5c:	ldr.w	r3, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    2a60:	str	r3, [sp, #20]
    2a62:	ldrh.w	r3, [r4, #1212]	; 0x4bc
    2a66:	strh.w	r3, [sp, #12]
    2a6a:	ldmia.w	r9, {r1, r2, r3}
    2a6e:	bl	8604 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2a72:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    2a76:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2a7a:	cmp	r2, #0
    2a7c:	bne.n	2a06 <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2a7e:	movs	r3, #1
    2a80:	str	r2, [sp, #0]
    2a82:	mov	r1, r5
    2a84:	mov	r0, r7
    2a86:	mov	r2, r3
    2a88:	bl	752c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2a8c:	b.n	2a06 <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    2a8e:	bl	54b0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    2a92:	mov	r6, r0
    2a94:	b.n	2a34 <SDClass::format(int, char, Print&)+0x50>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    2a96:	add.w	r5, r4, #1168	; 0x490
    2a9a:	ldrb.w	r1, [r4, #1224]	; 0x4c8
    2a9e:	mov	r0, r5
    2aa0:	bl	9074 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2aa4:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    2aa6:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2aaa:	bl	8758 <SdioCard::errorCode() const>
    2aae:	mov	r2, r0
    2ab0:	cmp	r0, #0
    2ab2:	bne.n	2a06 <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2ab4:	movs	r3, #1
    2ab6:	ldr.w	r1, [r4, #1164]	; 0x48c
    2aba:	mov	r0, r7
    2abc:	str	r2, [sp, #0]
    2abe:	mov	r2, r3
    2ac0:	bl	752c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2ac4:	b.n	2a06 <SDClass::format(int, char, Print&)+0x22>
    2ac6:	nop

00002ac8 <SDClass::mediaPresent()>:
{
    2ac8:	push	{r4, r5, r6, r7, lr}
  SdCard* card() { return m_card; }
    2aca:	ldr.w	r6, [r0, #1164]	; 0x48c
    2ace:	sub	sp, #28
    2ad0:	mov	r4, r0
	if (card) {
    2ad2:	cmp	r6, #0
    2ad4:	beq.n	2b5e <SDClass::mediaPresent()+0x96>
		if (cardPreviouslyPresent) {
    2ad6:	ldrb.w	r5, [r0, #1228]	; 0x4cc
			if (csPin_ == BUILTIN_SDCARD) {
    2ada:	ldrb.w	r3, [r0, #1229]	; 0x4cd
		if (cardPreviouslyPresent) {
    2ade:	cbz	r5, 2b02 <SDClass::mediaPresent()+0x3a>
			if (csPin_ == BUILTIN_SDCARD) {
    2ae0:	cmp	r3, #254	; 0xfe
    2ae2:	beq.n	2bb2 <SDClass::mediaPresent()+0xea>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2ae4:	ldrb.w	r0, [r4, #1230]	; 0x4ce
    2ae8:	cmp	r0, #54	; 0x36
    2aea:	bls.n	2b6a <SDClass::mediaPresent()+0xa2>
					ret = card->readCID(&cid);
    2aec:	ldr	r3, [r6, #0]
    2aee:	add	r1, sp, #8
    2af0:	mov	r0, r6
    2af2:	ldr	r3, [r3, #68]	; 0x44
    2af4:	blx	r3
    2af6:	mov	r5, r0
}
    2af8:	mov	r0, r5
	cardPreviouslyPresent = ret;
    2afa:	strb.w	r5, [r4, #1228]	; 0x4cc
}
    2afe:	add	sp, #28
    2b00:	pop	{r4, r5, r6, r7, pc}
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    2b02:	cmp	r3, #254	; 0xfe
    2b04:	beq.n	2b56 <SDClass::mediaPresent()+0x8e>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2b06:	ldrb.w	r0, [r0, #1230]	; 0x4ce
    2b0a:	cmp	r0, #54	; 0x36
    2b0c:	bls.n	2ba8 <SDClass::mediaPresent()+0xe0>
    if (spiConfigBackupPin == 255) {
    2b0e:	ldrb.w	r3, [r4, #1212]	; 0x4bc
				ret = sdfs.restart();
    2b12:	adds	r7, r4, #4
    2b14:	cmp	r3, #255	; 0xff
    2b16:	beq.n	2b76 <SDClass::mediaPresent()+0xae>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    2b18:	ldr.w	r3, [r4, #1216]	; 0x4c0
    m_spiCard.begin(config);
    2b1c:	addw	r6, r4, #1180	; 0x49c
    2b20:	ldr.w	r2, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    2b24:	str	r3, [sp, #12]
    2b26:	mov	r0, r6
    2b28:	ldrh.w	r3, [r4, #1212]	; 0x4bc
    2b2c:	str	r2, [sp, #16]
    2b2e:	strh.w	r3, [sp, #8]
    2b32:	add	r3, sp, #8
    2b34:	ldmia	r3, {r1, r2, r3}
    2b36:	bl	8604 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2b3a:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    2b3e:	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2b42:	cbnz	r2, 2b60 <SDClass::mediaPresent()+0x98>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2b44:	movs	r3, #1
    2b46:	str	r2, [sp, #0]
    2b48:	mov	r1, r6
    2b4a:	mov	r0, r7
    2b4c:	mov	r2, r3
    2b4e:	bl	752c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2b52:	mov	r5, r0
    2b54:	b.n	2b60 <SDClass::mediaPresent()+0x98>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    2b56:	ldr	r3, [pc, #128]	; (2bd8 <SDClass::mediaPresent()+0x110>)
    2b58:	ldr	r3, [r3, #8]
			if (ret)
    2b5a:	lsls	r3, r3, #14
    2b5c:	bmi.n	2b0e <SDClass::mediaPresent()+0x46>
		ret = false;
    2b5e:	movs	r5, #0
}
    2b60:	mov	r0, r5
	cardPreviouslyPresent = ret;
    2b62:	strb.w	r5, [r4, #1228]	; 0x4cc
}
    2b66:	add	sp, #28
    2b68:	pop	{r4, r5, r6, r7, pc}
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2b6a:	bl	b8b8 <digitalRead>
    2b6e:	subs	r5, r0, #0
    2b70:	it	ne
    2b72:	movne	r5, #1
    2b74:	b.n	2b60 <SDClass::mediaPresent()+0x98>
    m_sdioCard.begin(config);
    2b76:	add.w	r6, r4, #1168	; 0x490
    2b7a:	ldrb.w	r1, [r4, #1224]	; 0x4c8
    2b7e:	mov	r0, r6
    2b80:	bl	9074 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2b84:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    2b86:	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2b8a:	bl	8758 <SdioCard::errorCode() const>
    2b8e:	mov	r2, r0
    2b90:	cmp	r0, #0
    2b92:	bne.n	2b60 <SDClass::mediaPresent()+0x98>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2b94:	movs	r3, #1
    2b96:	str	r2, [sp, #0]
    2b98:	mov	r0, r7
    2b9a:	ldr.w	r1, [r4, #1164]	; 0x48c
    2b9e:	mov	r2, r3
    2ba0:	bl	752c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2ba4:	mov	r5, r0
    2ba6:	b.n	2b60 <SDClass::mediaPresent()+0x98>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2ba8:	bl	b8b8 <digitalRead>
			if (ret)
    2bac:	cmp	r0, #0
    2bae:	bne.n	2b0e <SDClass::mediaPresent()+0x46>
    2bb0:	b.n	2b5e <SDClass::mediaPresent()+0x96>
				s = card->status();
    2bb2:	ldr	r3, [r6, #0]
    2bb4:	mov	r0, r6
    2bb6:	ldr	r3, [r3, #88]	; 0x58
    2bb8:	blx	r3
			if (s == 0xFFFFFFFF) {
    2bba:	adds	r2, r0, #1
				s = card->status();
    2bbc:	mov	r3, r0
			if (s == 0xFFFFFFFF) {
    2bbe:	beq.n	2ae4 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    2bc0:	cmp	r0, #0
    2bc2:	bne.n	2b60 <SDClass::mediaPresent()+0x98>
				if (csPin_ == BUILTIN_SDCARD) 
    2bc4:	ldrb.w	r2, [r4, #1229]	; 0x4cd
    2bc8:	cmp	r2, #254	; 0xfe
    2bca:	bne.n	2b5e <SDClass::mediaPresent()+0x96>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2bcc:	movs	r1, #3
    2bce:	movs	r0, #46	; 0x2e
				ret = false;
    2bd0:	mov	r5, r3
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2bd2:	bl	b8dc <pinMode>
    2bd6:	b.n	2b60 <SDClass::mediaPresent()+0x98>
    2bd8:	.word	0x42008000

00002bdc <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    2bdc:	push	{r4, r5, r6, r7, lr}
    2bde:	mov	r5, r1
    2be0:	mov	r4, r0
    2be2:	sub	sp, #28
	FsDateTime::setCallback(dateTime);
    2be4:	ldr	r0, [pc, #196]	; (2cac <SDClass::begin(unsigned char)+0xd0>)
    2be6:	bl	2f54 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	if (csPin == BUILTIN_SDCARD) {
    2bea:	cmp	r5, #254	; 0xfe
	csPin_ = csPin; // remember which one passed in. 
    2bec:	strb.w	r5, [r4, #1229]	; 0x4cd
	if (csPin == BUILTIN_SDCARD) {
    2bf0:	beq.n	2c40 <SDClass::begin(unsigned char)+0x64>
	if (csPin < NUM_DIGITAL_PINS) {
    2bf2:	cmp	r5, #54	; 0x36
    2bf4:	bls.n	2bfc <SDClass::begin(unsigned char)+0x20>
	return false;
    2bf6:	movs	r0, #0
}
    2bf8:	add	sp, #28
    2bfa:	pop	{r4, r5, r6, r7, pc}
    spiConfigBackupOptions = spiConfig.options;
    2bfc:	movs	r6, #0
    spiConfigBackupClock = spiConfig.maxSck;
    2bfe:	ldr	r3, [pc, #176]	; (2cb0 <SDClass::begin(unsigned char)+0xd4>)
    m_spiCard.begin(config);
    2c00:	addw	r7, r4, #1180	; 0x49c
    2c04:	strb.w	r5, [sp, #12]
    2c08:	str.w	r3, [r4, #1216]	; 0x4c0
    2c0c:	strb.w	r6, [sp, #13]
    2c10:	mov	r0, r7
    spiConfigBackupPin = spiConfig.csPin; 
    2c12:	strb.w	r5, [r4, #1212]	; 0x4bc
    spiConfigBackupOptions = spiConfig.options;
    2c16:	strb.w	r6, [r4, #1213]	; 0x4bd
    spiConfigBackupPort = spiConfig.spiPort;
    2c1a:	str.w	r6, [r4, #1220]	; 0x4c4
    2c1e:	strd	r3, r6, [sp, #16]
    2c22:	add	r3, sp, #24
    2c24:	ldmdb	r3, {r1, r2, r3}
    2c28:	bl	8604 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2c2c:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    2c30:	str.w	r7, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2c34:	cbz	r2, 2c9c <SDClass::begin(unsigned char)+0xc0>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    2c36:	mov	r0, r6
		cardPreviouslyPresent = ret;
    2c38:	strb.w	r0, [r4, #1228]	; 0x4cc
}
    2c3c:	add	sp, #28
    2c3e:	pop	{r4, r5, r6, r7, pc}
    sdioConfigBackup = sdioConfig;
    2c40:	movs	r3, #0
    spiConfigBackupPin = 255; // Teensy
    2c42:	movs	r2, #255	; 0xff
    m_sdioCard.begin(config);
    2c44:	add.w	r5, r4, #1168	; 0x490
    2c48:	strb.w	r2, [r4, #1212]	; 0x4bc
    2c4c:	mov	r1, r3
    sdioConfigBackup = sdioConfig;
    2c4e:	strb.w	r3, [r4, #1224]	; 0x4c8
    2c52:	mov	r0, r5
    2c54:	bl	9074 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2c58:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    2c5a:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2c5e:	bl	8758 <SdioCard::errorCode() const>
    2c62:	mov	r2, r0
    2c64:	cbnz	r0, 2c86 <SDClass::begin(unsigned char)+0xaa>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2c66:	movs	r3, #1
    2c68:	ldr.w	r1, [r4, #1164]	; 0x48c
    2c6c:	adds	r0, r4, #4
    2c6e:	str	r2, [sp, #0]
    2c70:	mov	r2, r3
    2c72:	bl	752c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2c76:	cbz	r0, 2c86 <SDClass::begin(unsigned char)+0xaa>
		cardPreviouslyPresent = ret;
    2c78:	movs	r2, #1
		cdPin_ = _SD_DAT3;
    2c7a:	movs	r3, #46	; 0x2e
		cardPreviouslyPresent = ret;
    2c7c:	strb.w	r2, [r4, #1228]	; 0x4cc
		cdPin_ = _SD_DAT3;
    2c80:	strb.w	r3, [r4, #1230]	; 0x4ce
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2c84:	b.n	2bf8 <SDClass::begin(unsigned char)+0x1c>
		cdPin_ = _SD_DAT3;
    2c86:	movs	r0, #46	; 0x2e
		cardPreviouslyPresent = ret;
    2c88:	movs	r5, #0
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2c8a:	movs	r1, #3
		cdPin_ = _SD_DAT3;
    2c8c:	strb.w	r0, [r4, #1230]	; 0x4ce
		cardPreviouslyPresent = ret;
    2c90:	strb.w	r5, [r4, #1228]	; 0x4cc
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2c94:	bl	b8dc <pinMode>
    2c98:	mov	r0, r5
    2c9a:	b.n	2bf8 <SDClass::begin(unsigned char)+0x1c>
    2c9c:	movs	r3, #1
    2c9e:	str	r2, [sp, #0]
    2ca0:	mov	r1, r7
    2ca2:	adds	r0, r4, #4
    2ca4:	mov	r2, r3
    2ca6:	bl	752c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2caa:	b.n	2c38 <SDClass::begin(unsigned char)+0x5c>
    2cac:	.word	0x000025ed
    2cb0:	.word	0x017d7840

00002cb4 <_GLOBAL__sub_I_SD>:
	SDClass() { }
    2cb4:	ldr	r0, [pc, #108]	; (2d24 <_GLOBAL__sub_I_SD+0x70>)
  FsVolume() = default;
    2cb6:	movs	r3, #0
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2cb8:	ldr	r2, [pc, #108]	; (2d28 <_GLOBAL__sub_I_SD+0x74>)
    2cba:	mov.w	ip, #255	; 0xff
	SPISettings() : _clock(4000000) {
    2cbe:	ldr	r1, [pc, #108]	; (2d2c <_GLOBAL__sub_I_SD+0x78>)
	}
	return true;
}
    2cc0:	push	{r4}
    2cc2:	ldr	r4, [pc, #108]	; (2d30 <_GLOBAL__sub_I_SD+0x7c>)
    2cc4:	str.w	r2, [r0, #1168]	; 0x490
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    2cc8:	movs	r2, #7
    2cca:	str	r4, [r0, #0]
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() { initSharedSpiCard(); }
    2ccc:	mov.w	r4, #2752512	; 0x2a0000
	SPISettings() : _clock(4000000) {
    2cd0:	str.w	r1, [r0, #1188]	; 0x4a4
    2cd4:	mov.w	r1, #65280	; 0xff00
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    2cd8:	str.w	r2, [r0, #1192]	; 0x4a8
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    2cdc:	ldr	r2, [pc, #84]	; (2d34 <_GLOBAL__sub_I_SD+0x80>)
    2cde:	strh.w	r1, [r0, #1228]	; 0x4cc
  SdioConfig() {}
    2ce2:	strh.w	r3, [r0, #1176]	; 0x498
  SharedSpiCard() { initSharedSpiCard(); }
    2ce6:	str.w	r4, [r0, #1196]	; 0x4ac
    2cea:	strh.w	r3, [r0, #1200]	; 0x4b0
    m_type = 0;
    2cee:	strb.w	r3, [r0, #1202]	; 0x4b2
    2cf2:	strb.w	r3, [r0, #1224]	; 0x4c8
    2cf6:	strb.w	ip, [r0, #1230]	; 0x4ce
  DedicatedSpiCard() = default;
    2cfa:	str.w	r2, [r0, #1180]	; 0x49c
SDClass SD;
    2cfe:	ldr	r1, [pc, #56]	; (2d38 <_GLOBAL__sub_I_SD+0x84>)
    2d00:	ldr	r2, [pc, #56]	; (2d3c <_GLOBAL__sub_I_SD+0x88>)
}
    2d02:	ldr.w	r4, [sp], #4
    2d06:	str.w	r3, [r0, #1156]	; 0x484
    2d0a:	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    2d0e:	str.w	r3, [r0, #1164]	; 0x48c
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
    2d12:	str.w	r3, [r0, #1184]	; 0x4a0
    2d16:	str.w	r3, [r0, #1204]	; 0x4b4
    2d1a:	strb.w	r3, [r0, #1208]	; 0x4b8
SDClass SD;
    2d1e:	b.w	ce90 <__aeabi_atexit>
    2d22:	nop
    2d24:	.word	0x20005300
    2d28:	.word	0x20000bb0
    2d2c:	.word	0x003d0900
    2d30:	.word	0x20000b5c
    2d34:	.word	0x200009e4
    2d38:	.word	0x000025e9
    2d3c:	.word	0x20001480

00002d40 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    2d40:	cmp.w	r1, #256	; 0x100
    2d44:	bhi.n	2d8a <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4a>
  if (capacityMB <= 16) {
    2d46:	cmp	r1, #16
    2d48:	bhi.n	2da8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x68>
    2d4a:	movs	r3, #64	; 0x40
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    2d4c:	mov.w	ip, #32
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    2d50:	udiv	r1, r2, r3
  if (c <= 1023) {
    2d54:	cmp.w	r1, #1024	; 0x400
    2d58:	bcs.n	2d9c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x5c>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    2d5a:	mls	r3, r3, r1, r2
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    2d5e:	push	{lr}
    s = (lba % sectorsPerTrack) + 1;
    2d60:	udiv	lr, r2, ip
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    2d64:	udiv	r3, r3, ip
    s = (lba % sectorsPerTrack) + 1;
    2d68:	mls	r2, ip, lr, r2
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
    2d6c:	mov.w	ip, r1, lsr #2
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    2d70:	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    2d72:	adds	r2, #1
  chs[1] = ((c >> 2) & 0XC0) | s;
    2d74:	bic.w	ip, ip, #63	; 0x3f
  chs[2] = c;
    2d78:	uxtb	r1, r1
  chs[0] = h;
    2d7a:	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    2d7c:	orr.w	r2, r2, ip
  chs[2] = c;
    2d80:	strb	r1, [r0, #2]
  chs[1] = ((c >> 2) & 0XC0) | s;
    2d82:	uxtb	r2, r2
    2d84:	strb	r2, [r0, #1]
}
    2d86:	ldr.w	pc, [sp], #4
    2d8a:	movs	r3, #63	; 0x3f
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    2d8c:	mov	ip, r3
  } else if (capacityMB <= 128) {
    2d8e:	cmp	r1, #128	; 0x80
    2d90:	bls.n	2db4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x74>
  } else if (capacityMB <= 504) {
    2d92:	cmp.w	r1, #504	; 0x1f8
    2d96:	bhi.n	2db8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x78>
  c = lba / (numberOfHeads * sectorsPerTrack);
    2d98:	lsls	r3, r3, #4
    2d9a:	b.n	2d50 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    2d9c:	movs	r1, #255	; 0xff
    h = 254;
    2d9e:	movs	r3, #254	; 0xfe
  chs[1] = ((c >> 2) & 0XC0) | s;
    2da0:	strb	r1, [r0, #1]
  chs[0] = h;
    2da2:	strb	r3, [r0, #0]
  chs[2] = c;
    2da4:	strb	r1, [r0, #2]
    2da6:	bx	lr
  } else if (capacityMB <= 32) {
    2da8:	cmp	r1, #32
    2daa:	bhi.n	2dda <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x9a>
    2dac:	movs	r3, #128	; 0x80
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    2dae:	mov.w	ip, #32
    2db2:	b.n	2d50 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  c = lba / (numberOfHeads * sectorsPerTrack);
    2db4:	lsls	r3, r3, #3
    2db6:	b.n	2d50 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 1008) {
    2db8:	cmp.w	r1, #1008	; 0x3f0
    2dbc:	bls.n	2dc8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 2016) {
    2dbe:	cmp.w	r1, #2016	; 0x7e0
    2dc2:	bhi.n	2dcc <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x8c>
  c = lba / (numberOfHeads * sectorsPerTrack);
    2dc4:	lsls	r3, r3, #6
    2dc6:	b.n	2d50 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    2dc8:	lsls	r3, r3, #5
    2dca:	b.n	2d50 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 4032) {
    2dcc:	cmp.w	r1, #4032	; 0xfc0
  c = lba / (numberOfHeads * sectorsPerTrack);
    2dd0:	ite	ls
    2dd2:	lslls	r3, r3, #7
    2dd4:	rsbhi	r3, r3, r3, lsl #8
    2dd8:	b.n	2d50 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    2dda:	movs	r3, #32
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    2ddc:	mov	ip, r3
    2dde:	b.n	2d8e <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4e>

00002de0 <FsCache::sync()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    2de0:	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    2de2:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    2de4:	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    2de6:	lsls	r4, r3, #31
    2de8:	bpl.n	2e26 <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    2dea:	mov	r4, r0
    2dec:	ldr	r0, [r0, #4]
    2dee:	add.w	r2, r4, #16
    2df2:	ldr	r3, [r0, #0]
    2df4:	ldr	r1, [r4, #8]
    2df6:	str	r2, [sp, #4]
    2df8:	ldr	r3, [r3, #32]
    2dfa:	blx	r3
    2dfc:	ldr	r2, [sp, #4]
    2dfe:	mov	r5, r0
    2e00:	cbz	r0, 2e2e <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    2e02:	ldrb	r3, [r4, #0]
    2e04:	lsls	r1, r3, #30
    2e06:	bpl.n	2e1a <FsCache::sync()+0x3a>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
    2e08:	ldr	r3, [r4, #12]
    2e0a:	ldrd	r0, r1, [r4, #4]
    2e0e:	add	r1, r3
    2e10:	ldr	r3, [r0, #0]
    2e12:	ldr	r3, [r3, #32]
    2e14:	blx	r3
    2e16:	cbz	r0, 2e2e <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    2e18:	ldrb	r3, [r4, #0]
    2e1a:	bic.w	r3, r3, #1
  }
  return true;

fail:
  return false;
}
    2e1e:	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    2e20:	strb	r3, [r4, #0]
}
    2e22:	add	sp, #12
    2e24:	pop	{r4, r5, pc}
  return true;
    2e26:	movs	r5, #1
}
    2e28:	mov	r0, r5
    2e2a:	add	sp, #12
    2e2c:	pop	{r4, r5, pc}
  return false;
    2e2e:	movs	r5, #0
}
    2e30:	mov	r0, r5
    2e32:	add	sp, #12
    2e34:	pop	{r4, r5, pc}
    2e36:	nop

00002e38 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    2e38:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    2e3a:	ldr	r3, [r0, #4]
    2e3c:	cbz	r3, 2e82 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    2e3e:	ldr	r3, [r0, #8]
    2e40:	mov	r4, r0
    2e42:	mov	r7, r1
    2e44:	mov	r5, r2
    2e46:	cmp	r3, r1
    2e48:	bne.n	2e58 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    2e4a:	ldrb.w	r3, [r0], #16
    2e4e:	and.w	r5, r5, #3
    2e52:	orrs	r3, r5
    2e54:	strb	r3, [r4, #0]
}
    2e56:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    2e58:	bl	2de0 <FsCache::sync()>
    2e5c:	cbz	r0, 2e82 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    2e5e:	lsls	r3, r5, #29
    2e60:	bpl.n	2e6e <FsCache::prepare(unsigned long, unsigned char)+0x36>
    2e62:	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    2e66:	mov	r0, r6
    m_sector = sector;
    2e68:	movs	r3, #0
    2e6a:	str	r7, [r4, #8]
    2e6c:	b.n	2e4e <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    2e6e:	ldr	r0, [r4, #4]
    2e70:	add.w	r6, r4, #16
    2e74:	mov	r1, r7
    2e76:	ldr	r3, [r0, #0]
    2e78:	mov	r2, r6
    2e7a:	ldr	r3, [r3, #16]
    2e7c:	blx	r3
    2e7e:	cmp	r0, #0
    2e80:	bne.n	2e66 <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    2e82:	movs	r0, #0
}
    2e84:	pop	{r3, r4, r5, r6, r7, pc}
    2e86:	nop

00002e88 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    2e88:	cmp	r0, #126	; 0x7e
    2e8a:	bls.n	2f0a <toUpcase(unsigned short)+0x82>
  size_t right = size;
    2e8c:	mov.w	ip, #53	; 0x35
  size_t left = 0;
    2e90:	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    2e92:	push	{r4, r5}
    2e94:	ldr	r4, [pc, #160]	; (2f38 <toUpcase(unsigned short)+0xb0>)
    2e96:	b.n	2ea2 <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    2e98:	ldrh.w	r2, [r4, r1, lsl #2]
    2e9c:	cmp	r2, r0
    2e9e:	bhi.n	2ee2 <toUpcase(unsigned short)+0x5a>
    size_t mid = left + (right - left) / 2;
    2ea0:	mov	r3, r1
  while (right - left > 1) {
    2ea2:	sub.w	r2, ip, r3
    2ea6:	cmp	r2, #1
    size_t mid = left + (right - left) / 2;
    2ea8:	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    2eac:	bhi.n	2e98 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    2eae:	uxth	r3, r3
    2eb0:	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first) < readTable8(mapTable[i].count)) {
    2eb4:	cmp	r0, r2
    2eb6:	bcs.n	2ee6 <toUpcase(unsigned short)+0x5e>
    2eb8:	movs	r4, #75	; 0x4b
    2eba:	movs	r3, #0
    2ebc:	ldr	r5, [pc, #124]	; (2f3c <toUpcase(unsigned short)+0xb4>)
    2ebe:	b.n	2eca <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    2ec0:	ldrh.w	r2, [r5, r1, lsl #2]
    2ec4:	cmp	r2, r0
    2ec6:	bhi.n	2f06 <toUpcase(unsigned short)+0x7e>
    size_t mid = left + (right - left) / 2;
    2ec8:	mov	r3, r1
  while (right - left > 1) {
    2eca:	subs	r2, r4, r3
    2ecc:	cmp	r2, #1
    size_t mid = left + (right - left) / 2;
    2ece:	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    2ed2:	bhi.n	2ec0 <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    2ed4:	uxth	r3, r3
    2ed6:	ldrh.w	r2, [r5, r3, lsl #2]
    2eda:	cmp	r2, r0
    2edc:	beq.n	2f1e <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    2ede:	pop	{r4, r5}
    2ee0:	bx	lr
    size_t mid = left + (right - left) / 2;
    2ee2:	mov	ip, r1
    2ee4:	b.n	2ea2 <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first) < readTable8(mapTable[i].count)) {
    2ee6:	add.w	r4, r4, r3, lsl #2
    2eea:	subs	r2, r0, r2
    2eec:	ldrb	r3, [r4, #3]
    2eee:	cmp	r2, r3
    2ef0:	bge.n	2eb8 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    2ef2:	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    2ef6:	cmp	r3, #1
    2ef8:	beq.n	2f28 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    2efa:	cbz	r3, 2f32 <toUpcase(unsigned short)+0xaa>
    2efc:	uxth	r3, r3
    2efe:	add	r3, r0
}
    2f00:	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    2f02:	uxth	r0, r3
}
    2f04:	bx	lr
    size_t mid = left + (right - left) / 2;
    2f06:	mov	r4, r1
    2f08:	b.n	2eca <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    2f0a:	sub.w	r3, r0, #97	; 0x61
    2f0e:	cmp	r3, #25
    2f10:	ite	hi
    2f12:	movhi	r3, #0
    2f14:	movls	r3, #1
    2f16:	sub.w	r3, r0, r3, lsl #5
    2f1a:	uxth	r0, r3
}
    2f1c:	bx	lr
    return readTable16(lookupTable[i].val);
    2f1e:	add.w	r5, r5, r3, lsl #2
    2f22:	ldrh	r0, [r5, #2]
}
    2f24:	pop	{r4, r5}
    2f26:	bx	lr
      return chr - ((chr - first) & 1);
    2f28:	and.w	r2, r2, #1
    2f2c:	subs	r3, r0, r2
    2f2e:	uxth	r0, r3
    2f30:	b.n	2ede <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    2f32:	movw	r3, #58272	; 0xe3a0
    2f36:	b.n	2efe <toUpcase(unsigned short)+0x76>
    2f38:	.word	0x20000690
    2f3c:	.word	0x20000564

00002f40 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
  *ms10 = 0;
    2f40:	mov.w	ip, #0
  FsDateTime::callback2(date, time);
    2f44:	ldr	r3, [pc, #8]	; (2f50 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
  *ms10 = 0;
    2f46:	strb.w	ip, [r2]
  FsDateTime::callback2(date, time);
    2f4a:	ldr	r3, [r3, #0]
    2f4c:	bx	r3
    2f4e:	nop
    2f50:	.word	0x20006108

00002f54 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
  callback = dateTimeMs10;
    2f54:	ldr	r2, [pc, #8]	; (2f60 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
    2f56:	ldr	r1, [pc, #12]	; (2f64 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
  callback2 = dateTime;
    2f58:	ldr	r3, [pc, #12]	; (2f68 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
  callback = dateTimeMs10;
    2f5a:	str	r1, [r2, #0]
  callback2 = dateTime;
    2f5c:	str	r0, [r3, #0]
}
    2f5e:	bx	lr
    2f60:	.word	0x20006104
    2f64:	.word	0x00002f41
    2f68:	.word	0x20006108

00002f6c <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2f6c:	push	{r4, lr}
    2f6e:	mov	r4, r0
    2f70:	sub	sp, #8
    2f72:	mov	r0, r1
    2f74:	str	r1, [sp, #4]
    2f76:	bl	e040 <strlen>
    2f7a:	ldr	r3, [r4, #0]
    2f7c:	mov	r2, r0
    2f7e:	ldr	r1, [sp, #4]
    2f80:	mov	r0, r4
    2f82:	ldr	r3, [r3, #4]
    2f84:	add	sp, #8
    2f86:	ldmia.w	sp!, {r4, lr}
    2f8a:	bx	r3

00002f8c <ExFatFormatter::syncUpcase()>:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2f8c:	ldr	r3, [r0, #8]
    2f8e:	ubfx	r3, r3, #0, #9
  if (!index) {
    2f92:	cbz	r3, 2fb6 <ExFatFormatter::syncUpcase()+0x2a>
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    2f94:	movs	r1, #0
bool ExFatFormatter::syncUpcase() {
    2f96:	push	{r4}
    m_secBuf[i] = 0;
    2f98:	ldr	r2, [r0, #16]
    2f9a:	strb	r1, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    2f9c:	adds	r3, #1
    2f9e:	cmp.w	r3, #512	; 0x200
    2fa2:	bne.n	2f98 <ExFatFormatter::syncUpcase()+0xc>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    2fa4:	ldr	r1, [r0, #0]
    2fa6:	ldrd	r3, r2, [r0, #12]
    2faa:	ldr	r4, [r3, #0]
    2fac:	mov	r0, r3
    2fae:	ldr	r3, [r4, #32]
}
    2fb0:	ldr.w	r4, [sp], #4
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    2fb4:	bx	r3
}
    2fb6:	movs	r0, #1
    2fb8:	bx	lr
    2fba:	nop

00002fbc <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2fbc:	ldr	r2, [r0, #8]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    2fbe:	mov	r3, r0
  m_secBuf[index] = b;
    2fc0:	ldr	r0, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2fc2:	movw	ip, #511	; 0x1ff
    2fc6:	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    2fca:	strb	r1, [r0, r2]
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    2fcc:	cmp	r2, ip
  uint8_t mustBeZero2[2];
  uint8_t unicode3[4];
} DirLfn_t;
//==============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    2fce:	ldr	r0, [r3, #4]
    2fd0:	add.w	r1, r1, r0, ror #1
  m_upcaseSize++;
    2fd4:	ldr	r0, [r3, #8]
    2fd6:	add.w	r0, r0, #1
    2fda:	strd	r1, r0, [r3, #4]
  if (index == SECTOR_MASK) {
    2fde:	beq.n	2fe4 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x28>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
}
    2fe0:	movs	r0, #1
    2fe2:	bx	lr
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    2fe4:	ldr	r0, [r3, #12]
    2fe6:	ldr	r1, [r3, #0]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    2fe8:	push	{r4}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    2fea:	ldr	r4, [r0, #0]
    2fec:	adds	r2, r1, #1
    2fee:	ldr	r4, [r4, #32]
    2ff0:	str	r2, [r3, #0]
    2ff2:	ldr	r2, [r3, #16]
    2ff4:	mov	r3, r4
}
    2ff6:	ldr.w	r4, [sp], #4
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    2ffa:	bx	r3

00002ffc <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    2ffc:	push	{r3, r4, r5, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2ffe:	ldr	r3, [r0, #8]
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3000:	uxtb	r2, r1
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    3002:	mov	r5, r1
  m_secBuf[index] = b;
    3004:	ldr	r1, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3006:	ubfx	r3, r3, #0, #9
    300a:	movw	ip, #511	; 0x1ff
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    300e:	mov	r4, r0
  m_secBuf[index] = b;
    3010:	strb	r2, [r1, r3]
  if (index == SECTOR_MASK) {
    3012:	cmp	r3, ip
    3014:	ldr	r1, [r0, #4]
    3016:	add.w	r2, r2, r1, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    301a:	str	r2, [r0, #4]
  m_upcaseSize++;
    301c:	ldr	r2, [r0, #8]
    301e:	add.w	r2, r2, #1
    3022:	str	r2, [r0, #8]
  if (index == SECTOR_MASK) {
    3024:	beq.n	3032 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x36>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3026:	lsrs	r1, r5, #8
    3028:	mov	r0, r4
}
    302a:	ldmia.w	sp!, {r3, r4, r5, lr}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    302e:	b.w	2fbc <ExFatFormatter::writeUpcaseByte(unsigned char)>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    3032:	ldr	r1, [r0, #0]
    3034:	ldr	r0, [r0, #12]
    3036:	adds	r2, r1, #1
    3038:	ldr	r3, [r0, #0]
    303a:	ldr	r3, [r3, #32]
    303c:	str	r2, [r4, #0]
    303e:	ldr	r2, [r4, #16]
    3040:	blx	r3
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3042:	cmp	r0, #0
    3044:	bne.n	3026 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x2a>
}
    3046:	pop	{r3, r4, r5, pc}

00003048 <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    3048:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    304a:	movs	r3, #0
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    304c:	mov	r6, r0
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;
    304e:	str	r1, [r0, #0]
  uint32_t ch = 0;
    3050:	mov	r5, r3
  m_upcaseChecksum = 0;
    3052:	strd	r3, r3, [r0, #4]

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    3056:	uxth	r0, r5
    3058:	bl	2e88 <toUpcase(unsigned short)>
    if (uc != ch) {
    305c:	cmp	r0, r5
    uc = toUpcase(ch);
    305e:	mov	r4, r0
    if (uc != ch) {
    3060:	beq.n	3072 <ExFatFormatter::writeUpcase(unsigned long)+0x2a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3062:	uxtb	r1, r0
    3064:	mov	r0, r6
    3066:	bl	2fbc <ExFatFormatter::writeUpcaseByte(unsigned char)>
    306a:	cmp	r0, #0
    306c:	bne.n	30e6 <ExFatFormatter::writeUpcase(unsigned long)+0x9e>
  }
  return true;

fail:
  return false;
}
    306e:	movs	r0, #0
    3070:	pop	{r3, r4, r5, r6, r7, pc}
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {
    3072:	adds	r4, r5, #1
    3074:	cmp.w	r4, #65536	; 0x10000
    3078:	bne.n	3084 <ExFatFormatter::writeUpcase(unsigned long)+0x3c>
    307a:	b.n	30d2 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
    307c:	adds	r4, #1
    307e:	cmp.w	r4, #65536	; 0x10000
    3082:	beq.n	308e <ExFatFormatter::writeUpcase(unsigned long)+0x46>
    3084:	uxth	r0, r4
    3086:	bl	2e88 <toUpcase(unsigned short)>
    308a:	cmp	r0, r4
    308c:	beq.n	307c <ExFatFormatter::writeUpcase(unsigned long)+0x34>
      ns = n - ch;
    308e:	subs	r7, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    3090:	cmp.w	r7, #512	; 0x200
    3094:	bcc.n	30d2 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    3096:	movw	r1, #65535	; 0xffff
    309a:	mov	r0, r6
    309c:	bl	2ffc <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    30a0:	cmp	r0, #0
    30a2:	beq.n	306e <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    30a4:	uxth	r1, r7
    30a6:	mov	r0, r6
    30a8:	bl	2ffc <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    30ac:	cmp	r0, #0
    30ae:	beq.n	306e <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    30b0:	mov	r5, r4
  while (ch < 0X10000) {
    30b2:	cmp.w	r5, #65536	; 0x10000
    30b6:	bne.n	3056 <ExFatFormatter::writeUpcase(unsigned long)+0xe>
  if (!syncUpcase()) {
    30b8:	mov	r0, r6
}
    30ba:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (!syncUpcase()) {
    30be:	b.w	2f8c <ExFatFormatter::syncUpcase()>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    30c2:	ubfx	r1, r5, #8, #8
    30c6:	mov	r0, r6
    30c8:	adds	r5, #1
    30ca:	bl	2fbc <ExFatFormatter::writeUpcaseByte(unsigned char)>
    30ce:	cmp	r0, #0
    30d0:	beq.n	306e <ExFatFormatter::writeUpcase(unsigned long)+0x26>
        while (ch < n) {
    30d2:	cmp	r5, r4
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    30d4:	uxtb	r1, r5
    30d6:	mov	r0, r6
        while (ch < n) {
    30d8:	bcs.n	30b2 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    30da:	bl	2fbc <ExFatFormatter::writeUpcaseByte(unsigned char)>
    30de:	cmp	r0, #0
    30e0:	bne.n	30c2 <ExFatFormatter::writeUpcase(unsigned long)+0x7a>
}
    30e2:	movs	r0, #0
    30e4:	pop	{r3, r4, r5, r6, r7, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    30e6:	ubfx	r1, r4, #8, #8
    30ea:	mov	r0, r6
    30ec:	bl	2fbc <ExFatFormatter::writeUpcaseByte(unsigned char)>
    30f0:	cmp	r0, #0
    30f2:	beq.n	306e <ExFatFormatter::writeUpcase(unsigned long)+0x26>
      ch++;
    30f4:	adds	r5, #1
    30f6:	b.n	30b2 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>

000030f8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    30f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30fc:	mov	r7, r3
    30fe:	sub	sp, #36	; 0x24
  sectorCount = dev->sectorCount();
    3100:	ldr	r3, [r1, #0]
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    3102:	mov	r5, r1
    3104:	str	r0, [sp, #16]
    3106:	mov	r4, r2
  m_dev = dev;
    3108:	str	r1, [r0, #12]
  m_secBuf = secBuf;
    310a:	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    310c:	mov	r0, r1
    310e:	ldr	r3, [r3, #24]
    3110:	blx	r3
  if (sectorCount < 0X100000) {
    3112:	cmp.w	r0, #1048576	; 0x100000
  sectorCount = dev->sectorCount();
    3116:	str	r0, [sp, #0]
  if (sectorCount < 0X100000) {
    3118:	bcc.w	32cc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1d4>
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {
    311c:	movs	r3, #0
    311e:	movs	r2, #1
    3120:	ldr	r6, [sp, #0]
    3122:	adds	r3, #1
    3124:	lsls	r2, r2, #1
    3126:	uxtb	r3, r3
    3128:	beq.n	312e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36>
    312a:	cmp	r6, r2
    312c:	bhi.n	3122 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2a>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    312e:	cmp	r3, #28
    3130:	str	r6, [sp, #0]
    3132:	bls.w	32a4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ac>
    3136:	sub.w	r8, r3, #11
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    313a:	movs	r2, #1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    313c:	asr.w	r1, r8, r2
    3140:	ubfx	r8, r8, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    3144:	lsls	r2, r1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    3146:	str	r1, [sp, #8]
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    3148:	str	r2, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    314a:	adds	r3, #1
    314c:	movs	r2, #1
    314e:	asrs	r3, r3, #1
    3150:	lsls	r2, r3
    3152:	str	r2, [sp, #24]
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    3154:	movs	r2, #4
    3156:	lsls	r2, r3
    3158:	str	r2, [sp, #12]
  partitionOffset = 2 * fatLength;
    315a:	movs	r2, #2
    315c:	lsl.w	r3, r2, r3
    3160:	str	r3, [sp, #4]
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    3162:	ldr	r2, [sp, #0]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3164:	movs	r1, #0
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    3166:	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3168:	mov	r0, r4
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    316a:	ldr	r6, [sp, #8]
  mbr->part->beginCHS[0] = 1;
    316c:	mov.w	sl, #1
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    3170:	subs	r3, r2, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3172:	mov.w	r2, #512	; 0x200
  *reinterpret_cast<uint16_t*>(dst) = src;
    3176:	movw	fp, #43605	; 0xaa55
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    317a:	lsrs	r3, r6
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    317c:	lsl.w	r9, r3, r6
    3180:	str	r3, [sp, #20]
    3182:	ldr	r6, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3184:	bl	dcd0 <memset>
  mbr->part->endCHS[1] = 0XFF;
    3188:	movs	r3, #255	; 0xff
  mbr->part->beginCHS[0] = 1;
    318a:	strb.w	sl, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    318e:	strb.w	sl, [r4, #448]	; 0x1c0
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    3192:	add	r9, r6
  mbr->part->endCHS[1] = 0XFF;
    3194:	strb.w	r3, [r4, #452]	; 0x1c4
  if (!dev->writeSector(0, secBuf)) {
    3198:	mov	r2, r4
  mbr->part->endCHS[2] = 0XFF;
    319a:	strb.w	r3, [r4, #453]	; 0x1c5
  mbr->part->type = 7;
    319e:	movs	r3, #7
  if (!dev->writeSector(0, secBuf)) {
    31a0:	movs	r1, #0
    31a2:	mov	r0, r5
  mbr->part->type = 7;
    31a4:	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    31a8:	movs	r3, #254	; 0xfe
  *reinterpret_cast<uint32_t*>(dst) = src;
    31aa:	str.w	r6, [r4, #454]	; 0x1c6
    31ae:	strb.w	r3, [r4, #451]	; 0x1c3
  if (!dev->writeSector(0, secBuf)) {
    31b2:	ldr	r3, [r5, #0]
    31b4:	str.w	r9, [r4, #458]	; 0x1ca
    31b8:	ldr	r3, [r3, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    31ba:	strh.w	fp, [r4, #510]	; 0x1fe
    31be:	blx	r3
    31c0:	cmp	r0, #0
    31c2:	beq.n	328c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    31c4:	mov.w	r2, #512	; 0x200
    31c8:	movs	r1, #0
    31ca:	mov	r0, r4
    31cc:	bl	dcd0 <memset>
  *reinterpret_cast<uint32_t*>(dst) = src;
    31d0:	ldr	r3, [sp, #0]
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    31d2:	strb.w	r8, [r4, #109]	; 0x6d
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    31d6:	mov.w	r8, #0
    31da:	str	r3, [r4, #100]	; 0x64
    pbs->bootCode[i] = 0XF4;
    31dc:	movs	r1, #244	; 0xf4
    31de:	ldr	r3, [sp, #20]
    31e0:	add.w	r0, r4, #120	; 0x78
    31e4:	ldr	r2, [sp, #24]
    31e6:	str	r3, [r4, #92]	; 0x5c
  pbs->oemName[5] = ' ';
    31e8:	movs	r3, #32
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    31ea:	str	r6, [r4, #64]	; 0x40
  pbs->oemName[5] = ' ';
    31ec:	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    31ee:	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    31f0:	strb	r3, [r4, #10]
  pbs->jmpInstruction[0] = 0XEB;
    31f2:	movs	r3, #235	; 0xeb
    31f4:	str	r6, [r4, #88]	; 0x58
  uint32_t checksum = 0;
    31f6:	mov	r6, r8
  pbs->jmpInstruction[0] = 0XEB;
    31f8:	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    31fa:	movs	r3, #118	; 0x76
  setLe64(pbs->bpb.volumeLength, volumeLength);
    31fc:	str.w	r9, [r4, #72]	; 0x48
  pbs->jmpInstruction[1] = 0X76;
    3200:	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    3202:	movs	r3, #144	; 0x90
  pbs->bpb.numberOfFats = 1;
    3204:	strb.w	sl, [r4, #110]	; 0x6e
  pbs->jmpInstruction[2] = 0X90;
    3208:	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    320a:	movs	r3, #69	; 0x45
    320c:	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    320e:	movs	r3, #88	; 0x58
    3210:	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    3212:	movs	r3, #70	; 0x46
    3214:	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    3216:	movs	r3, #65	; 0x41
    3218:	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    321a:	movs	r3, #84	; 0x54
    321c:	strb	r3, [r4, #7]
    321e:	movs	r3, #4
    3220:	str	r3, [r4, #96]	; 0x60
  *reinterpret_cast<uint16_t*>(dst) = src;
    3222:	mov.w	r3, #256	; 0x100
    3226:	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    322a:	movs	r3, #9
    322c:	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.driveSelect = 0X80;
    3230:	movs	r3, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    3232:	strd	r2, r2, [r4, #80]	; 0x50
    3236:	strb.w	r3, [r4, #111]	; 0x6f
    pbs->bootCode[i] = 0XF4;
    323a:	mov.w	r2, #390	; 0x186
    323e:	bl	dcd0 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    3242:	strh.w	fp, [r4, #510]	; 0x1fe
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    3246:	sub.w	r3, r8, #106	; 0x6a
    324a:	cmp	r3, #1
    324c:	bls.n	325c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
    324e:	cmp.w	r8, #112	; 0x70
    3252:	beq.n	325c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
  return (sum << 31) + (sum >> 1) + data;
    3254:	ldrb.w	r3, [r4, r8]
    3258:	add.w	r6, r3, r6, ror #1
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    325c:	add.w	r8, r8, #1
    3260:	cmp.w	r8, #512	; 0x200
    3264:	bne.n	3246 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x14e>
  if (!dev->writeSector(sector, secBuf) ||
    3266:	ldr	r3, [r5, #0]
    3268:	mov	r2, r4
    326a:	ldr.w	r9, [sp, #4]
    326e:	mov	r0, r5
    3270:	ldr	r3, [r3, #32]
    3272:	mov	r1, r9
    3274:	blx	r3
    3276:	cbz	r0, 328c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    3278:	ldr	r3, [r5, #0]
    327a:	mov	r1, r9
    327c:	mov	r2, r4
    327e:	mov	r0, r5
    3280:	ldr	r3, [r3, #32]
    3282:	adds	r1, #12
    3284:	str.w	r9, [sp, #4]
    3288:	blx	r3
  if (!dev->writeSector(sector, secBuf) ||
    328a:	cbnz	r0, 32de <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e6>
  writeMsg(pr, "Format failed\r\n");
    328c:	cbz	r7, 329a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    328e:	ldr	r3, [r7, #0]
    3290:	movs	r2, #15
    3292:	ldr	r1, [pc, #736]	; (3574 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x47c>)
    3294:	mov	r0, r7
    3296:	ldr	r3, [r3, #4]
    3298:	blx	r3
  return false;
    329a:	movs	r6, #0
}
    329c:	mov	r0, r6
    329e:	add	sp, #36	; 0x24
    32a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    32a4:	cmp	r3, #26
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    32a6:	mov.w	r8, #8
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    32aa:	bhi.w	35fa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
    32ae:	mov.w	r3, #16384	; 0x4000
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    32b2:	str.w	r8, [sp, #8]
    32b6:	str	r3, [sp, #4]
    32b8:	mov.w	r3, #32768	; 0x8000
    32bc:	str	r3, [sp, #12]
    32be:	mov.w	r3, #256	; 0x100
    32c2:	str	r3, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    32c4:	mov.w	r3, #8192	; 0x2000
    32c8:	str	r3, [sp, #24]
    32ca:	b.n	3162 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
    writeMsg(pr, "Device is too small\r\n");
    32cc:	cmp	r7, #0
    32ce:	beq.n	329a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    32d0:	ldr	r3, [r7, #0]
    32d2:	movs	r2, #21
    32d4:	ldr	r1, [pc, #672]	; (3578 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x480>)
    32d6:	mov	r0, r7
    32d8:	ldr	r3, [r3, #4]
    32da:	blx	r3
  writeMsg(pr, "Format failed\r\n");
    32dc:	b.n	328e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    32de:	mov	r2, r8
    32e0:	movs	r1, #0
    32e2:	mov	r0, r4
  sector++;
    32e4:	add.w	sl, r9, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    32e8:	bl	dcd0 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    32ec:	movw	r3, #43605	; 0xaa55
    32f0:	add.w	r2, r9, #9
    32f4:	addw	r9, r4, #511	; 0x1ff
    32f8:	strh.w	r3, [r4, #510]	; 0x1fe
    32fc:	movs	r3, #0
    32fe:	mov	fp, r2
  uint32_t checksum = 0;
    3300:	mov	r8, r4
    3302:	b.n	3308 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x210>
      checksum = exFatChecksum(checksum, secBuf[i]);
    3304:	ldrb.w	r3, [r8, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    3308:	cmp	r9, r8
  return (sum << 31) + (sum >> 1) + data;
    330a:	add.w	r6, r3, r6, ror #1
    330e:	bne.n	3304 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x20c>
    if (!dev->writeSector(sector, secBuf) ||
    3310:	ldr	r3, [r5, #0]
    3312:	mov	r2, r4
    3314:	mov	r1, sl
    3316:	mov	r0, r5
    3318:	ldr	r3, [r3, #32]
    331a:	blx	r3
    331c:	cmp	r0, #0
    331e:	beq.n	328c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    3320:	ldr	r3, [r5, #0]
    3322:	mov	r2, r4
    3324:	add.w	r1, sl, #12
    3328:	mov	r0, r5
    332a:	ldr	r3, [r3, #32]
    332c:	blx	r3
    if (!dev->writeSector(sector, secBuf) ||
    332e:	cmp	r0, #0
    3330:	beq.n	328c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    3332:	add.w	r3, sl, #1
  for (int j = 0; j < 8; j++) {
    3336:	cmp	fp, r3
    3338:	beq.n	3340 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x248>
      checksum = exFatChecksum(checksum, secBuf[i]);
    333a:	mov	sl, r3
    333c:	ldrb	r3, [r4, #0]
    333e:	b.n	3300 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x208>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3340:	mov.w	r2, #512	; 0x200
    3344:	movs	r1, #0
    3346:	mov	r0, r4
    3348:	mov	fp, r3
    334a:	bl	dcd0 <memset>
    334e:	movs	r2, #0
    3350:	add.w	sl, sl, #3
    3354:	mov	r1, r2
  *reinterpret_cast<uint16_t*>(dst) = src;
    3356:	mov	r3, r4
    3358:	b.n	335e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x266>
      checksum = exFatChecksum(checksum, secBuf[i]);
    335a:	ldrb.w	r1, [r3, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    335e:	cmp	r8, r3
  return (sum << 31) + (sum >> 1) + data;
    3360:	add.w	r6, r1, r6, ror #1
    3364:	bne.n	335a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x262>
    if (!dev->writeSector(sector, secBuf) ||
    3366:	ldr	r3, [r5, #0]
    3368:	mov	r2, r4
    336a:	mov	r1, fp
    336c:	mov	r0, r5
    336e:	ldr	r3, [r3, #32]
    3370:	blx	r3
    3372:	cmp	r0, #0
    3374:	beq.n	328c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    3376:	ldr	r3, [r5, #0]
    3378:	mov	r2, r4
    337a:	add.w	r1, fp, #12
    337e:	mov	r0, r5
    3380:	ldr	r3, [r3, #32]
    3382:	blx	r3
    if (!dev->writeSector(sector, secBuf) ||
    3384:	cmp	r0, #0
    3386:	beq.n	328c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    3388:	add.w	r1, fp, #1
  for (int j = 0; j < 2; j++) {
    338c:	cmp	sl, r1
    338e:	bne.n	3466 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    3390:	subs	r3, r4, #4
    3392:	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    3396:	str.w	r6, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    339a:	cmp	r2, r3
    339c:	bne.n	3396 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x29e>
  if (!dev->writeSector(sector, secBuf) ||
    339e:	ldr	r3, [r5, #0]
    33a0:	mov	r2, r4
    33a2:	mov	r0, r5
    33a4:	ldr	r3, [r3, #32]
    33a6:	blx	r3
    33a8:	cmp	r0, #0
    33aa:	beq.w	328c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    33ae:	ldr	r3, [r5, #0]
    33b0:	add.w	r1, fp, #13
    33b4:	mov	r2, r4
    33b6:	mov	r0, r5
    33b8:	ldr	r3, [r3, #32]
    33ba:	blx	r3
  if (!dev->writeSector(sector, secBuf) ||
    33bc:	cmp	r0, #0
    33be:	beq.w	328c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  writeMsg(pr, "Writing FAT ");
    33c2:	cbz	r7, 33d0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d8>
    33c4:	ldr	r3, [r7, #0]
    33c6:	movs	r2, #12
    33c8:	ldr	r1, [pc, #432]	; (357c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x484>)
    33ca:	mov	r0, r7
    33cc:	ldr	r3, [r3, #4]
    33ce:	blx	r3
  sector = partitionOffset + fatOffset;
    33d0:	ldr	r2, [sp, #24]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    33d2:	movs	r1, #0
  sector = partitionOffset + fatOffset;
    33d4:	ldr	r3, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    33d6:	mov	r0, r4
  for (uint32_t i = 0; i < ns; i++) {
    33d8:	movs	r6, #0
  sector = partitionOffset + fatOffset;
    33da:	add	r3, r2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    33dc:	mov.w	r2, #512	; 0x200
  sector = partitionOffset + fatOffset;
    33e0:	mov	r9, r3
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    33e2:	ldr	r3, [sp, #20]
    33e4:	mov.w	r8, r3, lsl #2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    33e8:	bl	dcd0 <memset>
  secBuf[0] = 0XF8;
    33ec:	mov	r3, r4
    secBuf[i] = 0XFF;
    33ee:	mov.w	r2, #4294967295
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    33f2:	addw	r8, r8, #519	; 0x207
  secBuf[0] = 0XF8;
    33f6:	movs	r1, #248	; 0xf8
      writeMsg(pr, ".");
    33f8:	subs.w	fp, r7, #0
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    33fc:	mov.w	sl, r8, lsr #9
  secBuf[0] = 0XF8;
    3400:	strb.w	r1, [r3], #1
    if (i % (ns / 32) == 0) {
    3404:	mov.w	r8, r8, lsr #14
    secBuf[i] = 0XFF;
    3408:	str.w	r2, [r4, #1]
      writeMsg(pr, ".");
    340c:	it	ne
    340e:	movne.w	fp, #1
    secBuf[i] = 0XFF;
    3412:	str	r2, [r3, #12]
    3414:	str	r2, [r3, #4]
    3416:	str	r2, [r3, #8]
    3418:	str.w	r2, [r3, #15]
    341c:	b.n	3424 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x32c>
  for (uint32_t i = 0; i < ns; i++) {
    341e:	adds	r6, #1
    3420:	cmp	sl, r6
    3422:	beq.n	346c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (i % (ns / 32) == 0) {
    3424:	udiv	r3, r6, r8
    3428:	mls	r3, r8, r3, r6
      writeMsg(pr, ".");
    342c:	cbnz	r3, 3440 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    342e:	cmp.w	fp, #0
    3432:	beq.n	3440 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    3434:	ldr	r3, [r7, #0]
    3436:	movs	r2, #1
    3438:	ldr	r1, [pc, #324]	; (3580 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x488>)
    343a:	mov	r0, r7
    343c:	ldr	r3, [r3, #4]
    343e:	blx	r3
    if (!dev->writeSector(sector + i, secBuf)) {
    3440:	ldr	r3, [r5, #0]
    3442:	add.w	r1, r9, r6
    3446:	mov	r2, r4
    3448:	mov	r0, r5
    344a:	ldr	r3, [r3, #32]
    344c:	blx	r3
    344e:	cmp	r0, #0
    3450:	beq.w	328c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    3454:	cmp	r6, #0
    3456:	bne.n	341e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    3458:	mov	r1, r6
    345a:	mov.w	r2, #512	; 0x200
    345e:	mov	r0, r4
    3460:	bl	dcd0 <memset>
    3464:	b.n	341e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      checksum = exFatChecksum(checksum, secBuf[i]);
    3466:	mov	fp, r1
    3468:	ldrb	r1, [r4, #0]
    346a:	b.n	3356 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x25e>
  writeMsg(pr, "\r\n");
    346c:	cmp	r7, #0
    346e:	beq.n	34da <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3e2>
    3470:	ldr	r3, [r7, #0]
    3472:	movs	r2, #2
    3474:	ldr	r1, [pc, #268]	; (3584 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48c>)
    3476:	mov	r0, r7
    3478:	ldr	r3, [r3, #4]
    347a:	blx	r3
  bitmapSize = (clusterCount + 7) / 8;
    347c:	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    347e:	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7) / 8;
    3480:	adds	r6, #7
    3482:	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3484:	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    3488:	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    348c:	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    3490:	bcc.w	328e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3494:	mov.w	r2, #512	; 0x200
    3498:	movs	r1, #0
    349a:	mov	r0, r4
    349c:	bl	dcd0 <memset>
  secBuf[0] = 0X7;
    34a0:	movs	r3, #7
    34a2:	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    34a4:	cmp.w	r9, #0
    34a8:	beq.w	35c0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c8>
    34ac:	mov.w	r8, #0
    34b0:	b.n	34c4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3cc>
    if (i == 0) {
    34b2:	cmp.w	r8, #0
    34b6:	bne.n	34bc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c4>
      secBuf[0] = 0;
    34b8:	strb.w	r8, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    34bc:	add.w	r8, r8, #1
    34c0:	cmp	r9, r8
    34c2:	bls.n	35bc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c4>
    if (!dev->writeSector(sector + i, secBuf)) {
    34c4:	ldr	r2, [sp, #12]
    34c6:	mov	r0, r5
    34c8:	ldr	r3, [r5, #0]
    34ca:	add.w	r1, r2, r8
    34ce:	mov	r2, r4
    34d0:	ldr	r3, [r3, #32]
    34d2:	blx	r3
    34d4:	cmp	r0, #0
    34d6:	bne.n	34b2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ba>
    34d8:	b.n	328c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  bitmapSize = (clusterCount + 7) / 8;
    34da:	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    34dc:	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7) / 8;
    34de:	adds	r6, #7
    34e0:	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    34e2:	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    34e6:	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    34ea:	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    34ee:	bcc.w	329a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    34f2:	mov.w	r2, #512	; 0x200
    34f6:	mov	r1, r7
    34f8:	mov	r0, r4
    34fa:	bl	dcd0 <memset>
  secBuf[0] = 0X7;
    34fe:	movs	r3, #7
    3500:	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    3502:	cmp.w	r9, #0
    3506:	bne.n	34ac <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    3508:	ldr	r3, [sp, #12]
    350a:	ldr	r2, [sp, #28]
    350c:	ldr	r0, [sp, #16]
    350e:	adds	r1, r3, r2
    3510:	bl	3048 <ExFatFormatter::writeUpcase(unsigned long)>
    3514:	cmp	r0, #0
    3516:	beq.w	329a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  if (m_upcaseSize > BYTES_PER_SECTOR * sectorsPerCluster) {
    351a:	ldr	r2, [sp, #8]
    351c:	mov.w	r3, #512	; 0x200
    3520:	lsls	r3, r2
    3522:	ldr	r2, [sp, #16]
    3524:	ldr	r2, [r2, #8]
    3526:	cmp	r2, r3
    3528:	bhi.w	329a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    352c:	mov.w	r8, #2
    3530:	ldr	r3, [sp, #8]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3532:	mov.w	r2, #512	; 0x200
    3536:	movs	r1, #0
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    3538:	lsl.w	r9, r8, r3
    353c:	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    353e:	mov	r0, r4
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    3540:	add	r9, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3542:	bl	dcd0 <memset>
  dbm->type = EXFAT_TYPE_BITMAP;
    3546:	movs	r2, #129	; 0x81
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    3548:	movs	r3, #3
  setLe32(dup->checksum, m_upcaseChecksum);
    354a:	ldr	r1, [sp, #16]
    354c:	add.w	r9, r9, #4294967295
  dbm->type = EXFAT_TYPE_BITMAP;
    3550:	strb.w	r2, [r4, #32]
  dup->type = EXFAT_TYPE_UPCASE;
    3554:	movs	r2, #130	; 0x82
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    3556:	strb	r3, [r4, #0]
  dup->type = EXFAT_TYPE_UPCASE;
    3558:	strb.w	r2, [r4, #64]	; 0x40
  setLe64(dbm->size, bitmapSize);
    355c:	strd	r8, r6, [r4, #52]	; 0x34
  setLe32(dup->checksum, m_upcaseChecksum);
    3560:	ldr	r2, [r1, #4]
  *reinterpret_cast<uint64_t*>(dst) = src;
    3562:	mov.w	r8, #1
  *reinterpret_cast<uint32_t*>(dst) = src;
    3566:	str	r3, [r4, #84]	; 0x54
    3568:	str	r2, [r4, #68]	; 0x44
  setLe64(dup->size, m_upcaseSize);
    356a:	ldr	r3, [r1, #8]
    356c:	str	r3, [r4, #88]	; 0x58
  setLe64(dbm->size, bitmapSize);
    356e:	movs	r3, #0
  setLe64(dup->size, m_upcaseSize);
    3570:	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    3572:	b.n	3592 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x49a>
    3574:	.word	0x2000082c
    3578:	.word	0x200007c8
    357c:	.word	0x200007e0
    3580:	.word	0x200007f0
    3584:	.word	0x20000808
    3588:	ldr	r3, [sp, #28]
    358a:	cmp	r8, r3
    358c:	bcs.n	3606 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    358e:	add.w	r8, r8, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    3592:	ldr	r3, [r5, #0]
    3594:	add.w	r1, r9, r8
    3598:	mov	r2, r4
    359a:	mov	r0, r5
    359c:	ldr	r3, [r3, #32]
    359e:	blx	r3
    35a0:	mov	r6, r0
    35a2:	cmp	r0, #0
    35a4:	beq.w	328c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    35a8:	cmp.w	r8, #1
    35ac:	bne.n	3588 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x490>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    35ae:	mov.w	r2, #512	; 0x200
    35b2:	movs	r1, #0
    35b4:	mov	r0, r4
    35b6:	bl	dcd0 <memset>
  for (uint32_t i = 0; i < ns; i++) {
    35ba:	b.n	358e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x496>
  writeMsg(pr, "Writing upcase table\r\n");
    35bc:	cmp	r7, #0
    35be:	beq.n	3508 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x410>
    35c0:	ldr	r3, [r7, #0]
    35c2:	movs	r2, #22
    35c4:	ldr	r1, [pc, #80]	; (3618 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x520>)
    35c6:	mov	r0, r7
    35c8:	ldr	r3, [r3, #4]
    35ca:	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    35cc:	ldr	r3, [sp, #12]
    35ce:	ldr	r2, [sp, #28]
    35d0:	ldr	r0, [sp, #16]
    35d2:	adds	r1, r3, r2
    35d4:	bl	3048 <ExFatFormatter::writeUpcase(unsigned long)>
    35d8:	cmp	r0, #0
    35da:	beq.w	328e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  if (m_upcaseSize > BYTES_PER_SECTOR * sectorsPerCluster) {
    35de:	ldr	r2, [sp, #8]
    35e0:	mov.w	r3, #512	; 0x200
    35e4:	lsls	r3, r2
    35e6:	ldr	r2, [sp, #16]
    35e8:	ldr	r2, [r2, #8]
    35ea:	cmp	r2, r3
    35ec:	bhi.w	328e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  writeMsg(pr, "Writing root\r\n");
    35f0:	ldr	r1, [pc, #40]	; (361c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x524>)
    35f2:	mov	r0, r7
    35f4:	bl	2f6c <Print::write(char const*) [clone .isra.0]>
    35f8:	b.n	352c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x434>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    35fa:	mov.w	r2, #256	; 0x100
    35fe:	str.w	r8, [sp, #8]
    3602:	str	r2, [sp, #28]
    3604:	b.n	314a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
  writeMsg(pr, "Format done\r\n");
    3606:	cmp	r7, #0
    3608:	beq.w	329c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    360c:	ldr	r1, [pc, #16]	; (3620 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x528>)
    360e:	mov	r0, r7
    3610:	bl	2f6c <Print::write(char const*) [clone .isra.0]>
    3614:	b.n	329c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    3616:	nop
    3618:	.word	0x200007f4
    361c:	.word	0x2000080c
    3620:	.word	0x2000081c

00003624 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    3624:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* next;
  /** Position one beyond last LFN character. */
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
    3628:	ldrd	r3, r8, [r2, #4]
    362c:	add.w	r9, r3, #15
  return *reinterpret_cast<const uint16_t*>(src);
    3630:	ldrh.w	r0, [r1, #2]!
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2 * i);
    if (fname->atEnd()) {
    3634:	cmp	r8, r3
  /** Reset to start of LFN. */
  void reset() { next = begin; }
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
    3636:	add.w	r3, r3, #1
    if (toUpcase(cp) != toUpcase(u)) {
      return false;
    }
#else   // USE_UTF8_LONG_NAMES
    char c = fname->getch();
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    363a:	uxtb.w	ip, r0
    if (fname->atEnd()) {
    363e:	beq.n	367e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x5a>
    3640:	str	r3, [r2, #4]
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    3642:	cmp	r0, #126	; 0x7e
    3644:	ldrb.w	lr, [r3, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    3648:	sub.w	r4, ip, #97	; 0x61
    364c:	sub.w	r6, ip, #32
    3650:	sub.w	r5, lr, #97	; 0x61
    3654:	sub.w	r7, lr, #32
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    3658:	bhi.n	3678 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    365a:	cmp	r5, #25
    365c:	it	ls
    365e:	uxtbls.w	lr, r7
    3662:	cmp	r4, #25
    3664:	it	ls
    3666:	uxtbls.w	ip, r6
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    366a:	cmp	ip, lr
    366c:	bne.n	3678 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
  for (uint8_t i = 0; i < 15; i++) {
    366e:	cmp	r9, r3
    3670:	bne.n	3630 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    3672:	movs	r0, #1
}
    3674:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
    3678:	movs	r0, #0
}
    367a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return u == 0;
    367e:	clz	r0, r0
    3682:	lsrs	r0, r0, #5
}
    3684:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00003688 <ExFatFile::getName7(char*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::getName7(char* name, size_t count) {
    3688:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DirName_t* dn;
  size_t n = 0;
  if (!isOpen()) {
    368c:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName7(char* name, size_t count) {
    3690:	mov	r7, r1
  if (!isOpen()) {
    3692:	cbz	r3, 36fa <ExFatFile::getName7(char*, unsigned int)+0x72>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    3694:	ldrb.w	r3, [r0, #48]	; 0x30
    3698:	mov	r6, r0
    369a:	cmp	r3, #1
    369c:	bls.n	3706 <ExFatFile::getName7(char*, unsigned int)+0x7e>
    369e:	mov	r5, r2
    36a0:	mov.w	r8, #2
  size_t n = 0;
    36a4:	movs	r4, #0
    dn = reinterpret_cast<DirName_t*>(dirCache(is, FsCache::CACHE_FOR_READ));
    36a6:	movs	r2, #0
    36a8:	mov	r1, r8
    36aa:	mov	r0, r6
    36ac:	bl	3770 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    36b0:	mov	ip, r0
    36b2:	cbz	r0, 36fa <ExFatFile::getName7(char*, unsigned int)+0x72>
    36b4:	ldrb	r3, [r0, #0]
    36b6:	cmp	r3, #193	; 0xc1
    36b8:	bne.n	36fa <ExFatFile::getName7(char*, unsigned int)+0x72>
    36ba:	add.w	lr, r4, #4294967295
    36be:	add.w	r2, r4, #15
    36c2:	add	lr, r7
    36c4:	ldrh.w	r3, [ip, #2]!
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2 * in);
      if (c == 0) {
    36c8:	cbz	r3, 36ee <ExFatFile::getName7(char*, unsigned int)+0x66>
        goto done;
      }
      if ((n + 1) >= count) {
    36ca:	adds	r4, #1
    36cc:	cmp	r4, r5
    36ce:	bcs.n	36fa <ExFatFile::getName7(char*, unsigned int)+0x72>
        DBG_FAIL_MACRO;
        goto fail;
      }
      name[n++] = c < 0X7F ? c : '?';
    36d0:	cmp	r3, #127	; 0x7f
    36d2:	it	cs
    36d4:	movcs	r3, #63	; 0x3f
    for (uint8_t in = 0; in < 15; in++) {
    36d6:	cmp	r4, r2
      name[n++] = c < 0X7F ? c : '?';
    36d8:	strb.w	r3, [lr, #1]!
    for (uint8_t in = 0; in < 15; in++) {
    36dc:	bne.n	36c4 <ExFatFile::getName7(char*, unsigned int)+0x3c>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    36de:	add.w	r8, r8, #1
    36e2:	ldrb.w	r3, [r6, #48]	; 0x30
    36e6:	uxtb.w	r8, r8
    36ea:	cmp	r3, r8
    36ec:	bcs.n	36a6 <ExFatFile::getName7(char*, unsigned int)+0x1e>
    }
  }
done:
  name[n] = 0;
    36ee:	add	r7, r4
    36f0:	movs	r3, #0
  return n;

fail:
  *name = 0;
  return 0;
}
    36f2:	mov	r0, r4
  name[n] = 0;
    36f4:	strb	r3, [r7, #0]
}
    36f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  *name = 0;
    36fa:	movs	r3, #0
  return 0;
    36fc:	mov	r4, r3
  *name = 0;
    36fe:	strb	r3, [r7, #0]
}
    3700:	mov	r0, r4
    3702:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  size_t n = 0;
    3706:	movs	r4, #0
    3708:	b.n	36f0 <ExFatFile::getName7(char*, unsigned int)+0x68>
    370a:	nop

0000370c <ExFatFile::hashName(ExName_t*)>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    370c:	push	{r4, r5, lr}
  void reset() { next = begin; }
    370e:	ldr	r5, [r1, #0]
  bool atEnd() { return next == end; }
    3710:	ldr	r4, [r1, #8]
  void reset() { next = begin; }
    3712:	str	r5, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    3714:	cmp	r4, r5
    3716:	beq.n	3764 <ExFatFile::hashName(ExName_t*)+0x58>
    3718:	mov	r2, r5
  uint16_t hash = 0;
    371a:	movs	r3, #0
  char getch() { return atEnd() ? 0 : *next++; }
    371c:	adds	r2, #1
  hash = ((hash << 15) | (hash >> 1)) + u;
    371e:	lsls	r0, r3, #15
    3720:	str	r2, [r1, #4]
    3722:	orr.w	r3, r0, r3, lsr #1
    3726:	ldrb.w	r0, [r2, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    372a:	sub.w	ip, r0, #97	; 0x61
    372e:	sub.w	lr, r0, #32
    3732:	cmp.w	ip, #25
    3736:	it	ls
    3738:	uxtbls.w	r0, lr
  while (!fname->atEnd()) {
    373c:	cmp	r4, r2
  hash = ((hash << 15) | (hash >> 1)) + u;
    373e:	add	r3, r0
  hash = ((hash << 15) | (hash >> 1));
    3740:	mov.w	r0, r3, lsl #15
    3744:	ubfx	r3, r3, #1, #15
    3748:	and.w	r0, r0, #32768	; 0x8000
    374c:	orr.w	r3, r3, r0
  while (!fname->atEnd()) {
    3750:	bne.n	371c <ExFatFile::hashName(ExName_t*)+0x10>
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
    3752:	subs	r4, r4, r5
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    3754:	strh	r3, [r1, #16]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    3756:	subs	r0, r4, #1
  fname->nameLength = fname->end - fname->begin;
    3758:	str	r4, [r1, #12]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    375a:	cmp	r0, #254	; 0xfe
    375c:	ite	hi
    375e:	movhi	r0, #0
    3760:	movls	r0, #1
  }
  return true;

fail:
  return false;
}
    3762:	pop	{r4, r5, pc}
  while (!fname->atEnd()) {
    3764:	movs	r0, #0
    3766:	mov	r4, r0
  uint16_t hash = 0;
    3768:	mov	r3, r0
  fname->nameLength = fname->end - fname->begin;
    376a:	str	r4, [r1, #12]
  fname->nameHash = hash;
    376c:	strh	r3, [r1, #16]
}
    376e:	pop	{r4, r5, pc}

00003770 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3770:	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    3772:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3776:	sub	sp, #16
    3778:	mov	ip, r1
    377a:	mov	r4, r0
  DirPos_t pos = m_dirPos;
    377c:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    377e:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    3780:	ldmia.w	r3, {r0, r1, r2}
    3784:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    3788:	mov.w	r2, ip, lsl #5
    378c:	mov	r1, r5
    378e:	ldr	r0, [r4, #32]
    3790:	bl	4268 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3794:	cmp	r0, #1
    3796:	bne.n	37a6 <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    3798:	mov	r2, r6
    379a:	mov	r1, r5
    379c:	ldr	r0, [r4, #32]
    379e:	bl	4230 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    37a2:	add	sp, #16
    37a4:	pop	{r4, r5, r6, pc}
    return nullptr;
    37a6:	movs	r0, #0
}
    37a8:	add	sp, #16
    37aa:	pop	{r4, r5, r6, pc}

000037ac <ExFatFile::close()>:
bool ExFatFile::close() {
    37ac:	push	{r4, lr}
    37ae:	mov	r4, r0
  bool rtn = sync();
    37b0:	bl	4884 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    37b4:	movs	r3, #0
    37b6:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    37ba:	strb.w	r3, [r4, #51]	; 0x33
}
    37be:	pop	{r4, pc}

000037c0 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    37c0:	push	{r3, r4, r5, lr}
    37c2:	mov	r4, r2
    37c4:	mov	r5, r1
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    37c6:	movs	r2, #0
    37c8:	add.w	r1, r0, #36	; 0x24
    37cc:	ldr	r0, [r0, #32]
    37ce:	bl	4230 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    37d2:	mov	r3, r0
    37d4:	cbz	r0, 37e0 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
    37d6:	ldrh	r2, [r0, #10]
  return true;
    37d8:	movs	r0, #1
  *pdate = getLe16(df->createDate);
    37da:	strh	r2, [r5, #0]
    37dc:	ldrh	r3, [r3, #8]
  *ptime = getLe16(df->createTime);
    37de:	strh	r3, [r4, #0]
}
    37e0:	pop	{r3, r4, r5, pc}
    37e2:	nop

000037e4 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    37e4:	push	{r3, r4, r5, lr}
    37e6:	mov	r4, r2
    37e8:	mov	r5, r1
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    37ea:	movs	r2, #0
    37ec:	add.w	r1, r0, #36	; 0x24
    37f0:	ldr	r0, [r0, #32]
    37f2:	bl	4230 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    37f6:	mov	r3, r0
    37f8:	cbz	r0, 3804 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    37fa:	ldrh	r2, [r0, #14]
  return true;
    37fc:	movs	r0, #1
  *pdate = getLe16(df->modifyDate);
    37fe:	strh	r2, [r5, #0]
    3800:	ldrh	r3, [r3, #12]
  *ptime = getLe16(df->modifyTime);
    3802:	strh	r3, [r4, #0]
}
    3804:	pop	{r3, r4, r5, pc}
    3806:	nop

00003808 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    3808:	push	{r3, r4, r5, lr}
    380a:	mov	r5, r1
  if (isOpen()) {
    380c:	ldrb.w	r1, [r0, #49]	; 0x31
    3810:	cbz	r1, 3816 <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    3812:	movs	r0, #0
}
    3814:	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    3816:	movs	r2, #56	; 0x38
    3818:	mov	r4, r0
    381a:	bl	dcd0 <memset>
  m_flags = FILE_FLAG_READ;
    381e:	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    3820:	movs	r2, #64	; 0x40
  m_vol = vol;
    3822:	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    3824:	mov	r0, r3
    3826:	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    382a:	strb.w	r2, [r4, #49]	; 0x31
}
    382e:	pop	{r3, r4, r5, pc}

00003830 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
    3830:	push	{r4, r5, r6, r7}
    3832:	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    3834:	ldrb	r1, [r1, #0]
    3836:	cmp	r1, #32
    3838:	bne.n	3842 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    383a:	ldrb.w	r4, [r5, #1]!
    383e:	cmp	r4, #32
    3840:	beq.n	383a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    3842:	str	r5, [r2, #0]
  fname->end = path;
    3844:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    3846:	ldrb	r4, [r5, #0]
    3848:	cmp	r4, #47	; 0x2f
    384a:	beq.n	3870 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    384c:	cbz	r4, 3870 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    384e:	adds	r6, r5, #1
    3850:	cmp	r4, #60	; 0x3c
    3852:	ldr	r7, [pc, #120]	; (38cc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>)
    uint8_t c = *path++;
    3854:	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    3856:	bhi.n	38ae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    3858:	cmp	r4, #33	; 0x21
    385a:	bhi.n	3882 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    385c:	add.w	ip, r4, #4294967295
    3860:	cmp.w	ip, #30
    3864:	bhi.n	3894 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

fail:
  return false;
}
    3866:	movs	r0, #0
    3868:	pop	{r4, r5, r6, r7}
    386a:	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    386c:	ldrb.w	r4, [r5, #1]!
    3870:	cmp	r4, #32
    3872:	beq.n	386c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    3874:	cmp	r4, #47	; 0x2f
    3876:	beq.n	386c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    3878:	str	r5, [r3, #0]
  return hashName(fname);
    387a:	mov	r1, r2
}
    387c:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    387e:	b.w	370c <ExFatFile::hashName(ExName_t*)>
    3882:	sub.w	ip, r4, #34	; 0x22
    3886:	uxtb.w	ip, ip
    388a:	lsr.w	ip, r7, ip
    388e:	tst.w	ip, #1
    3892:	bne.n	3866 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    3894:	cmp	r4, #46	; 0x2e
    3896:	beq.n	389c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    3898:	cmp	r4, #32
    389a:	bne.n	38bc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
  while (*path && !isDirSeparator(*path)) {
    389c:	ldrb.w	r4, [r6], #1
    38a0:	cmp	r4, #0
    38a2:	beq.n	3870 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    38a4:	cmp	r4, #47	; 0x2f
    38a6:	beq.n	3870 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    38a8:	cmp	r4, #60	; 0x3c
    38aa:	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    38ac:	bls.n	3858 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    38ae:	cmp	r4, #92	; 0x5c
    38b0:	beq.n	3866 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    38b2:	bls.n	38c0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    38b4:	cmp	r4, #124	; 0x7c
    38b6:	beq.n	3866 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    38b8:	lsls	r1, r4, #24
    38ba:	bmi.n	3866 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    38bc:	str	r6, [r2, #8]
    38be:	b.n	389c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    38c0:	subs	r4, #62	; 0x3e
    38c2:	cmp	r4, #1
    38c4:	bhi.n	38bc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
}
    38c6:	movs	r0, #0
    38c8:	pop	{r4, r5, r6, r7}
    38ca:	bx	lr
    38cc:	.word	0x05002101

000038d0 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    38d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    38d4:	ldrb.w	r3, [r0, #51]	; 0x33
    38d8:	sub	sp, #12
    38da:	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    38dc:	lsls	r4, r3, #31
    38de:	bpl.n	39ca <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    38e0:	lsls	r0, r3, #25
    38e2:	mov	r7, r1
    38e4:	mov	r8, r2
    38e6:	bpl.w	3a4a <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    38ea:	ldrd	r2, r3, [r5]
    38ee:	ldrd	r1, r0, [r5, #16]
    38f2:	adds.w	r4, r8, r2
    38f6:	adc.w	r3, r3, #0
    38fa:	cmp	r1, r4
    38fc:	sbcs.w	r3, r0, r3
    3900:	bcc.w	3a56 <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3904:	cmp.w	r8, #0
    3908:	beq.n	39c2 <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    390a:	mov	r6, r8
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    390c:	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    3910:	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3914:	ldr.w	sl, [r5, #32]
    3918:	ldr.w	r4, [sl, #1080]	; 0x438
    391c:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    391e:	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    3922:	cmp	r4, #0
    3924:	bne.n	3a08 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    3926:	orrs	r3, r2
    3928:	bne.n	3a0c <ExFatFile::read(void*, unsigned int)+0x13c>
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    392a:	ldrb.w	r3, [r5, #49]	; 0x31
    392e:	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() { return m_blockDev->isBusy(); }
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    3930:	ite	mi
    3932:	ldrmi.w	r2, [sl, #1076]	; 0x434
    3936:	ldrpl	r2, [r5, #28]
        m_curCluster++;
    3938:	str	r2, [r5, #24]
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    393a:	ldrb.w	r0, [sl, #1093]	; 0x445
    393e:	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    3940:	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3944:	lsrs	r3, r4, #9
    3946:	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    3948:	add.w	r1, r1, r4, lsr #9
    394c:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    394e:	cmp.w	fp, #0
    3952:	bne.n	39e0 <ExFatFile::read(void*, unsigned int)+0x110>
    3954:	cmp.w	r6, #512	; 0x200
    3958:	bcc.n	39e0 <ExFatFile::read(void*, unsigned int)+0x110>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
    395a:	ldr.w	r2, [sl, #536]	; 0x218
    395e:	cmp	r1, r2
    3960:	beq.n	39e0 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    3962:	cmp.w	r6, #1024	; 0x400
    3966:	bcc.n	3a1a <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    3968:	mov.w	fp, #1
    396c:	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    3970:	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3974:	lsrs	r3, r6, #9
    3976:	cmp	fp, r3
    3978:	it	cs
    397a:	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    397c:	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    397e:	mov.w	r4, fp, lsl #9
    3982:	bhi.n	399a <ExFatFile::read(void*, unsigned int)+0xca>
    3984:	add.w	r3, r1, fp
    3988:	cmp	r2, r3
    398a:	bcs.n	399a <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    398c:	add.w	r0, sl, #528	; 0x210
    3990:	str	r1, [sp, #4]
    3992:	bl	2de0 <FsCache::sync()>
    3996:	ldr	r1, [sp, #4]
    3998:	cbz	r0, 39ca <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    399a:	ldr.w	r0, [sl, #532]	; 0x214
    399e:	mov	r3, fp
    39a0:	ldr	r2, [r0, #0]
    39a2:	ldr.w	sl, [r2, #20]
    39a6:	mov	r2, r7
    39a8:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    39aa:	cbz	r0, 39ca <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    39ac:	mov	r3, r4
    dst += n;
    39ae:	add	r7, r4
    m_curPosition += n;
    39b0:	ldrd	r1, r2, [r5]
    39b4:	adds	r3, r3, r1
    39b6:	adc.w	r2, r2, #0
  while (toRead) {
    39ba:	subs	r6, r6, r4
    m_curPosition += n;
    39bc:	strd	r3, r2, [r5]
  while (toRead) {
    39c0:	bne.n	3914 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    39c2:	mov	r0, r8

fail:
  m_error |= READ_ERROR;
  return -1;
}
    39c4:	add	sp, #12
    39c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    39ca:	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    39ce:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    39d2:	orr.w	r3, r3, #2
    39d6:	strb.w	r3, [r5, #50]	; 0x32
}
    39da:	add	sp, #12
    39dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    39e0:	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    39e4:	movs	r2, #0
    39e6:	add.w	r0, sl, #528	; 0x210
    39ea:	cmp	r4, r6
    39ec:	it	cs
    39ee:	movcs	r4, r6
    39f0:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    39f4:	cmp	r0, #0
    39f6:	beq.n	39ca <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    39f8:	add.w	r1, r0, fp
    39fc:	mov	r2, r4
    39fe:	mov	r0, r7
    3a00:	bl	9d30 <memcpy>
    m_curPosition += n;
    3a04:	mov	r3, r4
    3a06:	b.n	39ae <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    3a08:	ldr	r2, [r5, #24]
    3a0a:	b.n	393a <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    3a0c:	ldrb.w	r3, [r5, #51]	; 0x33
    3a10:	lsls	r3, r3, #25
    3a12:	bpl.n	3a32 <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    3a14:	ldr	r2, [r5, #24]
    3a16:	adds	r2, #1
    3a18:	b.n	3938 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    3a1a:	ldr.w	r0, [sl, #532]	; 0x214
    3a1e:	mov	r2, r7
    3a20:	ldr	r3, [r0, #0]
    3a22:	ldr	r3, [r3, #16]
    3a24:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    3a26:	cmp	r0, #0
    3a28:	beq.n	39ca <ExFatFile::read(void*, unsigned int)+0xfa>
    3a2a:	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    3a2e:	mov	r4, r3
    3a30:	b.n	39ae <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3a32:	mov	r2, r9
    3a34:	mov	r0, sl
    3a36:	ldr	r1, [r5, #24]
    3a38:	bl	42ec <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    3a3c:	cmp	r0, #0
    3a3e:	blt.n	39ca <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    3a40:	beq.n	3a5c <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    3a42:	ldr.w	sl, [r5, #32]
    3a46:	ldr	r2, [r5, #24]
    3a48:	b.n	393a <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    3a4a:	ldrb.w	r3, [r5, #49]	; 0x31
    3a4e:	lsls	r1, r3, #28
    3a50:	bpl.w	3904 <ExFatFile::read(void*, unsigned int)+0x34>
    3a54:	b.n	38ea <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    3a56:	sub.w	r8, r1, r2
    3a5a:	b.n	3904 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    3a5c:	ldrb.w	r3, [r5, #49]	; 0x31
    3a60:	tst.w	r3, #80	; 0x50
    3a64:	beq.n	39ca <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    3a66:	sub.w	r8, r8, r6
    3a6a:	mov	r0, r8
    3a6c:	b.n	39c4 <ExFatFile::read(void*, unsigned int)+0xf4>
    3a6e:	nop

00003a70 <ExFatFile::peek()>:
int ExFatFile::peek() {
    3a70:	push	{r4, r5, r6, r7, lr}
    3a72:	sub	sp, #12
    return read(&b, 1) == 1 ? b : -1;
    3a74:	movs	r2, #1
    3a76:	mov	r4, r0
  uint32_t saveCurCluster = m_curCluster;
    3a78:	ldr	r5, [r0, #24]
    3a7a:	add.w	r1, sp, #7
  uint64_t saveCurPosition = m_curPosition;
    3a7e:	ldrd	r6, r7, [r0]
    3a82:	bl	38d0 <ExFatFile::read(void*, unsigned int)>
    3a86:	cmp	r0, #1
  m_curCluster = saveCurCluster;
    3a88:	str	r5, [r4, #24]
    3a8a:	ite	eq
    3a8c:	ldrbeq.w	r0, [sp, #7]
    3a90:	movne.w	r0, #4294967295
  m_curPosition = saveCurPosition;
    3a94:	strd	r6, r7, [r4]
}
    3a98:	add	sp, #12
    3a9a:	pop	{r4, r5, r6, r7, pc}

00003a9c <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3a9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3aa0:	mov	r7, r3
  bool isOpen() const { return m_attributes; }
    3aa2:	ldrb.w	r3, [r0, #49]	; 0x31
    3aa6:	sub	sp, #12
    3aa8:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3aaa:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    3aae:	cmp	r3, #0
    3ab0:	beq.n	3b56 <ExFatFile::seekSet(unsigned long long)+0xba>
    3ab2:	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3ab4:	ldrd	r1, ip, [r0]
    3ab8:	cmp	ip, r7
    3aba:	it	eq
    3abc:	cmpeq	r1, r2
    3abe:	beq.n	3b7a <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    3ac0:	orrs.w	r2, r6, r7
    3ac4:	beq.n	3b62 <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    3ac6:	lsls	r5, r3, #28
    3ac8:	bpl.n	3ad4 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    3aca:	ldrd	r0, r2, [r0, #16]
    3ace:	cmp	r0, r6
    3ad0:	sbcs	r2, r7
    3ad2:	bcc.n	3b56 <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    3ad4:	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3ad8:	subs	r5, r6, #1
    3ada:	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    3ade:	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3ae0:	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    3ae4:	ldrb.w	r2, [sl, #1093]	; 0x445
    3ae8:	adds	r2, #9
    3aea:	uxtb	r2, r2
    3aec:	rsb	lr, r2, #32
    3af0:	lsrs	r5, r2
    3af2:	sub.w	r9, r2, #32
    3af6:	lsl.w	fp, r0, lr
    3afa:	lsr.w	r0, r0, r9
    3afe:	orr.w	r5, r5, fp
    3b02:	orrs	r5, r0
  if (isContiguous()) {
    3b04:	ldr	r0, [sp, #4]
    3b06:	lsls	r0, r0, #25
    3b08:	bmi.n	3b72 <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3b0a:	subs	r0, r1, #1
    3b0c:	lsr.w	r2, r0, r2
    3b10:	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    3b14:	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3b18:	lsl.w	lr, r0, lr
    3b1c:	lsr.w	r0, r0, r9
    3b20:	orr.w	r2, r2, lr
    3b24:	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    3b28:	beq.n	3b2e <ExFatFile::seekSet(unsigned long long)+0x92>
    3b2a:	cmp	r5, r2
    3b2c:	bcs.n	3b82 <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3b2e:	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    3b30:	ite	mi
    3b32:	ldrmi.w	r3, [sl, #1076]	; 0x434
    3b36:	ldrpl	r3, [r4, #28]
    3b38:	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3b3a:	add.w	r9, r4, #24
    3b3e:	b.n	3b4e <ExFatFile::seekSet(unsigned long long)+0xb2>
    3b40:	ldr	r1, [r4, #24]
    3b42:	subs	r5, #1
    3b44:	ldr	r0, [r4, #32]
    3b46:	bl	42ec <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3b4a:	cmp	r0, #0
    3b4c:	ble.n	3b56 <ExFatFile::seekSet(unsigned long long)+0xba>
    3b4e:	mov	r2, r9
  while (nNew--) {
    3b50:	cmp	r5, #0
    3b52:	bne.n	3b40 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

done:
    3b54:	b.n	3b66 <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    3b56:	movs	r0, #0
  m_curCluster = tmp;
    3b58:	str.w	r8, [r4, #24]
}
    3b5c:	add	sp, #12
    3b5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    3b62:	movs	r3, #0
    3b64:	str	r3, [r0, #24]
  return true;
    3b66:	movs	r0, #1
  m_curPosition = pos;
    3b68:	strd	r6, r7, [r4]
}
    3b6c:	add	sp, #12
    3b6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    3b72:	ldr	r3, [r4, #28]
    3b74:	add	r3, r5
    3b76:	str	r3, [r4, #24]
    goto done;
    3b78:	b.n	3b66 <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    3b7a:	movs	r0, #1
}
    3b7c:	add	sp, #12
    3b7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    3b82:	subs	r5, r5, r2
    3b84:	b.n	3b3a <ExFatFile::seekSet(unsigned long long)+0x9e>
    3b86:	nop

00003b88 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    3b88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b8c:	mov	r8, r2
    3b8e:	ldrb.w	r2, [r0, #49]	; 0x31
    3b92:	sub	sp, #60	; 0x3c
    3b94:	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    3b96:	cmp	r2, #0
    3b98:	bne.w	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
    3b9c:	mov	fp, r1
    3b9e:	ldrb.w	r1, [r1, #49]	; 0x31
    3ba2:	tst.w	r1, #80	; 0x50
    3ba6:	beq.w	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  switch (oflag & O_ACCMODE) {
    3baa:	and.w	r1, r3, #3
    3bae:	mov	sl, r3
    3bb0:	cmp	r1, #3
    3bb2:	beq.w	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    3bb6:	adds	r1, #1
    3bb8:	and.w	r0, r3, #8
    3bbc:	orr.w	r3, r1, r0
    3bc0:	str	r3, [sp, #8]
  if (fname) {
    3bc2:	cmp.w	r8, #0
    3bc6:	beq.w	3d5c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d4>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    3bca:	ldr.w	r1, [r8, #12]
    3bce:	add.w	r7, r1, #14
    3bd2:	ldr	r1, [pc, #756]	; (3ec8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x340>)
    3bd4:	umull	r1, r7, r1, r7
  if (pos == m_curPosition) {
    3bd8:	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    3bdc:	lsrs	r7, r7, #3
  if (pos == m_curPosition) {
    3bde:	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    3be0:	add.w	r7, r7, #2
    3be4:	uxtb	r7, r7
  if (pos == m_curPosition) {
    3be6:	beq.n	3bf4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    3be8:	movs	r0, #0
    3bea:	movs	r1, #0
    m_curCluster = 0;
    3bec:	str.w	r2, [fp, #24]
  m_curPosition = pos;
    3bf0:	strd	r0, r1, [fp]
        inSet = false;
    3bf4:	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    3bf6:	ldr	r3, [sp, #8]
        inSet = false;
    3bf8:	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    3bfa:	orr.w	r3, r3, #64	; 0x40
    3bfe:	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    3c00:	movs	r2, #32
    3c02:	add	r1, sp, #24
    3c04:	mov	r0, fp
    3c06:	bl	38d0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3c0a:	cbz	r0, 3c4e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    3c0c:	cmp	r0, #32
    3c0e:	bne.w	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (!(buf[0] & EXFAT_TYPE_USED)) {
    3c12:	ldrsb.w	r2, [sp, #24]
    3c16:	ldrb.w	r3, [sp, #24]
    3c1a:	cmp	r2, #0
    3c1c:	blt.w	3d60 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d8>
      if (freeCount == 0) {
    3c20:	cbnz	r4, 3c30 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    3c22:	ldr.w	r2, [fp]
    3c26:	sub.w	r9, r2, #32
  uint32_t curCluster() const { return m_curCluster; }
    3c2a:	ldr.w	r2, [fp, #24]
    3c2e:	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    3c30:	cmp	r4, r7
    3c32:	bcs.n	3c38 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    3c34:	adds	r4, #1
    3c36:	uxtb	r4, r4
      if (buf[0] == EXFAT_TYPE_END_DIR) {
    3c38:	cmp	r3, #0
    3c3a:	beq.w	3e30 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a8>
    n = dir->read(buf, FS_DIR_SIZE);
    3c3e:	movs	r2, #32
    3c40:	add	r1, sp, #24
    3c42:	mov	r0, fp
      inSet = false;
    3c44:	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    3c46:	bl	38d0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3c4a:	cmp	r0, #0
    3c4c:	bne.n	3c0c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    3c4e:	tst.w	sl, #512	; 0x200
    3c52:	beq.n	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    3c54:	ldr	r3, [sp, #8]
    3c56:	lsls	r3, r3, #30
    3c58:	bpl.n	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    3c5a:	cmp.w	r8, #0
    3c5e:	beq.n	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  while (freeCount < freeNeed) {
    3c60:	cmp	r4, r7
    3c62:	bcs.n	3c94 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
    3c64:	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    3c68:	movs	r2, #32
    3c6a:	add	r1, sp, #24
    3c6c:	mov	r0, fp
    3c6e:	bl	38d0 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    3c72:	adds	r3, r4, #1
    if (n == 0) {
    3c74:	cmp	r0, #0
    3c76:	beq.n	3d3a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    3c78:	cmp	r0, #32
    3c7a:	bne.n	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (freeCount == 0) {
    3c7c:	cbnz	r4, 3c8a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    3c7e:	ldr.w	r2, [fp]
    3c82:	ldr.w	sl, [fp, #24]
    3c86:	sub.w	r9, r2, #32
    freeCount++;
    3c8a:	uxtb	r4, r3
  while (freeCount < freeNeed) {
    3c8c:	cmp	r7, r4
    3c8e:	bhi.n	3c68 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xe0>
    3c90:	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    3c94:	movs	r2, #56	; 0x38
    3c96:	movs	r1, #0
    3c98:	mov	r0, r5
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    3c9a:	ldrb.w	r4, [fp, #51]	; 0x33
    3c9e:	bl	dcd0 <memset>
  bool hashName(ExName_t* fname);
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path, ExName_t* fname, const char** ptr);
  ExFatVolume* volume() const { return m_vol; }
    3ca2:	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    3ca6:	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    3caa:	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    3cac:	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    3cae:	movs	r3, #40	; 0x28
  m_dirPos = freePos;
    3cb0:	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    3cb4:	strb.w	r3, [r5, #49]	; 0x31
  void reset() { next = begin; }
    3cb8:	ldr.w	r3, [r8]
  m_dirPos = freePos;
    3cbc:	strd	r2, r9, [r5, #36]	; 0x24
    3cc0:	str.w	r3, [r8, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    3cc4:	cbz	r7, 3d30 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
    3cc6:	movs	r4, #0
      m_setCount = freeNeed - 1;
    3cc8:	subs	r6, r7, #1
      if (FsDateTime::callback) {
    3cca:	ldr.w	r9, [pc, #512]	; 3ecc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
      m_setCount = freeNeed - 1;
    3cce:	uxtb	r6, r6
      if (FsDateTime::callback) {
    3cd0:	mov	sl, r4
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    3cd2:	movs	r2, #1
    3cd4:	mov	r1, sl
    3cd6:	mov	r0, r5
    3cd8:	bl	3770 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    3cdc:	mov	fp, r0
    3cde:	cbz	r0, 3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    3ce0:	ldrsb.w	r2, [r0]
    3ce4:	cmp	r2, #0
    3ce6:	blt.n	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    memset(cache, 0, FS_DIR_SIZE);
    3ce8:	movs	r2, #32
    3cea:	movs	r1, #0
    3cec:	bl	dcd0 <memset>
    if (i == 0) {
    3cf0:	cmp	r4, #0
    3cf2:	beq.w	3e8c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x304>
    } else if (i == 1) {
    3cf6:	cmp.w	sl, #1
    3cfa:	beq.w	3ed0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x348>
      dirName->type = EXFAT_TYPE_NAME;
    3cfe:	movs	r3, #193	; 0xc1
    3d00:	mov	r2, fp
    3d02:	add.w	fp, fp, #32
    3d06:	strb.w	r3, [r2], #2
  bool atEnd() { return next == end; }
    3d0a:	ldrd	r3, r0, [r8, #4]
        if (fname->atEnd()) {
    3d0e:	cmp	r0, r3
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    3d10:	add.w	r3, r3, #1
    3d14:	beq.n	3d26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    3d16:	str.w	r3, [r8, #4]
    3d1a:	ldrb.w	r1, [r3, #-1]
    3d1e:	strh.w	r1, [r2], #2
      for (size_t k = 0; k < 15; k++) {
    3d22:	cmp	fp, r2
    3d24:	bne.n	3d0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x186>
  for (uint8_t i = 0; i < freeNeed; i++) {
    3d26:	adds	r4, #1
    3d28:	uxtb.w	sl, r4
    3d2c:	cmp	r7, sl
    3d2e:	bhi.n	3cd2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14a>
  return sync();
    3d30:	mov	r0, r5
    3d32:	bl	4884 <ExFatFile::sync()>
    3d36:	mov	r6, r0
    3d38:	b.n	3d54 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      if (!dir->addDirCluster()) {
    3d3a:	mov	r0, fp
      uint32_t saveCurCluster = dir->m_curCluster;
    3d3c:	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    3d40:	bl	48e4 <ExFatFile::addDirCluster()>
    3d44:	cmp	r0, #0
    3d46:	bne.n	3e3a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b2>
  m_attributes = FILE_ATTR_CLOSED;
    3d48:	movs	r3, #0
  return false;
    3d4a:	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    3d4c:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    3d50:	strb.w	r3, [r5, #51]	; 0x33
}
    3d54:	mov	r0, r6
    3d56:	add	sp, #60	; 0x3c
    3d58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    3d5c:	movs	r7, #3
    3d5e:	b.n	3bf4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    3d60:	cbnz	r6, 3db8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x230>
        freeCount = 0;
    3d62:	cmp	r4, r7
    3d64:	it	cc
    3d66:	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    3d68:	cmp	r3, #133	; 0x85
    3d6a:	bne.w	3c00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    3d6e:	mov	r1, r6
    3d70:	movs	r2, #56	; 0x38
    3d72:	mov	r0, r5
      inSet = true;
    3d74:	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    3d76:	bl	dcd0 <memset>
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    3d7a:	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    3d7e:	ldrb.w	r3, [sp, #25]
    3d82:	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    3d86:	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
    3d8a:	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    3d8c:	it	pl
    3d8e:	orrpl.w	r3, r3, #8
    3d92:	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    3d96:	ldr.w	r3, [fp]
    3d9a:	ldr.w	r2, [fp, #32]
    3d9e:	subs	r3, #32
      m_vol = dir->volume();
    3da0:	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    3da2:	ldr.w	r2, [fp, #24]
    3da6:	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    3daa:	ldrb.w	r3, [fp, #51]	; 0x33
    3dae:	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    3db2:	strb.w	r3, [r5, #44]	; 0x2c
    3db6:	b.n	3c00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    3db8:	cmp	r3, #192	; 0xc0
    3dba:	beq.n	3dda <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x252>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    3dbc:	cmp	r3, #193	; 0xc1
    3dbe:	bne.w	3c3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    3dc2:	mov	r2, r8
    3dc4:	add	r1, sp, #24
    3dc6:	mov	r0, r5
    3dc8:	bl	3624 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    3dcc:	cbz	r0, 3dd6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x24e>
      if (fname->atEnd()) {
    3dce:	ldrd	r3, r2, [r8, #4]
    3dd2:	cmp	r2, r3
    3dd4:	beq.n	3e40 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
        inSet = false;
    3dd6:	mov	r6, r0
    3dd8:	b.n	3c00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    3dda:	ldr	r3, [sp, #8]
    3ddc:	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    3de0:	ldrb.w	r3, [sp, #25]
    3de4:	lsls	r3, r3, #30
    3de6:	bpl.n	3dee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x266>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    3de8:	ldr	r3, [sp, #12]
    3dea:	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    3dee:	ldr	r3, [sp, #44]	; 0x2c
    3df0:	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    3df2:	ldrd	r2, r3, [sp, #32]
    3df6:	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    3dfa:	ldrd	r2, r3, [sp, #48]	; 0x30
    3dfe:	strd	r2, r3, [r5, #8]
      if (!fname) {
    3e02:	cmp.w	r8, #0
    3e06:	beq.n	3e40 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
  void reset() { next = begin; }
    3e08:	ldr.w	r3, [r8]
      if (fname->nameLength != dirStream->nameLength ||
    3e0c:	ldr.w	r2, [r8, #12]
    3e10:	str.w	r3, [r8, #4]
    3e14:	ldrb.w	r3, [sp, #27]
    3e18:	cmp	r2, r3
    3e1a:	bne.w	3c3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    3e1e:	ldrh.w	r6, [r8, #16]
    3e22:	ldrh.w	r3, [sp, #28]
    3e26:	subs	r6, r6, r3
    3e28:	clz	r6, r6
    3e2c:	lsrs	r6, r6, #5
    3e2e:	b.n	3c00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    3e30:	cmp.w	r8, #0
    3e34:	bne.w	3c4e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    3e38:	b.n	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
      dir->m_curCluster = saveCurCluster;
    3e3a:	str.w	r6, [fp, #24]
      continue;
    3e3e:	b.n	3c8c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x104>
  if (oflag & O_EXCL) {
    3e40:	tst.w	sl, #2048	; 0x800
    3e44:	bne.n	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    3e46:	tst.w	sl, #17408	; 0x4400
    3e4a:	bne.n	3f08 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
    3e4c:	ldrb.w	r3, [r5, #51]	; 0x33
    3e50:	lsls	r7, r3, #30
    3e52:	bmi.n	3f08 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
  if (oflag & O_TRUNC) {
    3e54:	tst.w	sl, #1024	; 0x400
    3e58:	bne.w	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    3e5c:	tst.w	sl, #16384	; 0x4000
    3e60:	beq.w	3d54 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    3e64:	mov	r0, r5
    3e66:	ldrd	r2, r3, [r5, #16]
    3e6a:	bl	3a9c <ExFatFile::seekSet(unsigned long long)>
    3e6e:	cmp	r0, #0
    3e70:	beq.w	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (isWritable()) {
    3e74:	ldrb.w	r3, [r5, #51]	; 0x33
    3e78:	lsls	r2, r3, #30
    3e7a:	bpl.w	3d54 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    3e7e:	ldrb.w	r3, [r5, #49]	; 0x31
    3e82:	orr.w	r3, r3, #32
    3e86:	strb.w	r3, [r5, #49]	; 0x31
    3e8a:	b.n	3d54 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      dirFile->type = EXFAT_TYPE_FILE;
    3e8c:	movs	r3, #133	; 0x85
    3e8e:	strb.w	r3, [fp]
      m_setCount = freeNeed - 1;
    3e92:	strb.w	r6, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    3e96:	strb.w	r6, [fp, #1]
      if (FsDateTime::callback) {
    3e9a:	ldr.w	r3, [r9]
    3e9e:	cbz	r3, 3ef6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x36e>
        FsDateTime::callback(&date, &time, &ms10);
    3ea0:	add.w	r2, sp, #19
    3ea4:	add.w	r1, sp, #22
    3ea8:	add	r0, sp, #20
    3eaa:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    3eac:	ldrh.w	r3, [sp, #20]
    3eb0:	strh.w	r3, [fp, #10]
    3eb4:	ldrh.w	r3, [sp, #22]
    3eb8:	strh.w	r3, [fp, #8]
        dirFile->createTimeMs = ms10;
    3ebc:	ldrb.w	r3, [sp, #19]
    3ec0:	strb.w	r3, [fp, #20]
    3ec4:	b.n	3d26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    3ec6:	nop
    3ec8:	.word	0x88888889
    3ecc:	.word	0x20006104
      dirStream->type = EXFAT_TYPE_STREAM;
    3ed0:	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    3ed2:	strb.w	sl, [fp, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    3ed6:	strb.w	r3, [fp]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    3eda:	ldr	r3, [sp, #8]
    3edc:	orn	r3, r3, #127	; 0x7f
    3ee0:	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    3ee4:	ldr.w	r3, [r8, #12]
    3ee8:	strb.w	r3, [fp, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    3eec:	ldrh.w	r3, [r8, #16]
    3ef0:	strh.w	r3, [fp, #4]
}
    3ef4:	b.n	3d26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    3ef6:	movw	r3, #22049	; 0x5621
    3efa:	strh.w	r3, [fp, #10]
    3efe:	strh.w	r3, [fp, #14]
    3f02:	strh.w	r3, [fp, #18]
        if (FS_DEFAULT_TIME) {
    3f06:	b.n	3d26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    3f08:	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    3f0c:	lsls	r4, r3, #27
    3f0e:	bmi.w	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    3f12:	lsls	r0, r3, #31
    3f14:	bmi.w	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (oflag & O_TRUNC) {
    3f18:	tst.w	sl, #1024	; 0x400
    3f1c:	beq.n	3f46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3be>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    3f1e:	ldrb.w	r3, [r5, #51]	; 0x33
    3f22:	lsls	r1, r3, #30
    3f24:	bpl.w	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
    3f28:	movs	r2, #0
    3f2a:	movs	r3, #0
    3f2c:	mov	r0, r5
    3f2e:	bl	3a9c <ExFatFile::seekSet(unsigned long long)>
    3f32:	cmp	r0, #0
    3f34:	beq.w	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    3f38:	mov	r0, r5
    3f3a:	bl	4ce4 <ExFatFile::truncate()>
    3f3e:	cmp	r0, #0
    3f40:	beq.w	3d48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    3f44:	b.n	3e74 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    3f46:	tst.w	sl, #16384	; 0x4000
    3f4a:	beq.n	3e74 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
    3f4c:	b.n	3e64 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    3f4e:	nop

00003f50 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    3f50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    3f54:	movs	r5, #0
    3f56:	sub	sp, #92	; 0x5c
    3f58:	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    3f5a:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    3f5e:	str	r2, [sp, #4]
    3f60:	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !dirFile->isDir()) {
    3f62:	cmp	r3, #0
    3f64:	bne.n	3fe4 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    3f66:	ldrb.w	r3, [r1, #49]	; 0x31
    3f6a:	mov	r7, r1
    3f6c:	tst.w	r3, #80	; 0x50
    3f70:	beq.n	3fe4 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
  if (isDirSeparator(*path)) {
    3f72:	ldrb	r3, [r2, #0]
    3f74:	mov	r4, r0
    3f76:	mov	r6, r2
    3f78:	cmp	r3, #47	; 0x2f
    3f7a:	beq.n	3fec <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    3f7c:	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    3f80:	add	r3, sp, #4
    3f82:	add	r2, sp, #12
    3f84:	mov	r1, r6
    3f86:	mov	r0, r4
    3f88:	bl	3830 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    3f8c:	cbz	r0, 3fe4 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    if (*path == 0) {
    3f8e:	ldr	r6, [sp, #4]
    3f90:	ldrb	r3, [r6, #0]
    3f92:	cmp	r3, #0
    3f94:	beq.n	4014 <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    3f96:	movs	r3, #0
    3f98:	add	r2, sp, #12
    3f9a:	mov	r1, r7
    3f9c:	mov	r0, r4
    3f9e:	bl	3b88 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    3fa2:	cbz	r0, 3fe4 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    tmpDir = *this;
    3fa4:	mov	ip, r4
    3fa6:	add	r5, sp, #32
    3fa8:	add.w	r7, r4, #48	; 0x30
    3fac:	ldr.w	r0, [ip]
    3fb0:	add.w	ip, ip, #16
    3fb4:	ldr.w	r1, [ip, #-12]
    3fb8:	mov	lr, r5
    3fba:	ldr.w	r2, [ip, #-8]
    3fbe:	adds	r5, #16
    3fc0:	ldr.w	r3, [ip, #-4]
    3fc4:	cmp	ip, r7
    3fc6:	stmia.w	lr!, {r0, r1, r2, r3}
    3fca:	bne.n	3fac <ExFatFile::open(ExFatFile*, char const*, int)+0x5c>
    3fcc:	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    3fd0:	add	r7, sp, #32
    tmpDir = *this;
    3fd2:	str	r0, [r5, #0]
  bool rtn = sync();
    3fd4:	mov	r0, r4
    3fd6:	bl	4884 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3fda:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    3fde:	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    3fe2:	b.n	3f80 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  return false;
    3fe4:	movs	r0, #0
}
    3fe6:	add	sp, #92	; 0x5c
    3fe8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    3fec:	ldrb.w	r1, [r6, #1]!
    3ff0:	cmp	r1, #47	; 0x2f
    3ff2:	beq.n	3fec <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    3ff4:	str	r6, [sp, #4]
    if (*path == 0) {
    3ff6:	cbnz	r1, 4026 <ExFatFile::open(ExFatFile*, char const*, int)+0xd6>
  memset(this, 0, sizeof(ExFatFile));
    3ff8:	movs	r2, #56	; 0x38
    3ffa:	mov	r0, r4
      return openRoot(dirFile->m_vol);
    3ffc:	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    3ffe:	bl	dcd0 <memset>
  m_flags = FILE_FLAG_READ;
    4002:	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    4004:	movs	r2, #64	; 0x40
  m_vol = vol;
    4006:	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    4008:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    400a:	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    400e:	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    4012:	b.n	3fe6 <ExFatFile::open(ExFatFile*, char const*, int)+0x96>
  return openPrivate(dirFile, &fname, oflag);
    4014:	mov	r3, r9
    4016:	add	r2, sp, #12
    4018:	mov	r1, r7
    401a:	mov	r0, r4
    401c:	bl	3b88 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    4020:	add	sp, #92	; 0x5c
    4022:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    4026:	movs	r2, #56	; 0x38
    4028:	movs	r1, #0
    402a:	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    402c:	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    402e:	bl	dcd0 <memset>
  m_flags = FILE_FLAG_READ;
    4032:	movs	r3, #1
    dirFile = &tmpDir;
    4034:	add	r7, sp, #32
  m_vol = vol;
    4036:	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    4038:	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    403c:	movs	r3, #64	; 0x40
    403e:	strb.w	r3, [sp, #81]	; 0x51
  return true;
    4042:	b.n	3f7c <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>

00004044 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    4044:	cbz	r1, 404e <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    4046:	add.w	r1, r1, #1096	; 0x448
    404a:	b.w	3f50 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    404e:	mov	r0, r1
    4050:	bx	lr
    4052:	nop

00004054 <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    4054:	ldrb.w	r3, [r0, #49]	; 0x31
    4058:	cbnz	r3, 4074 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    405a:	ldrb.w	r3, [r1, #49]	; 0x31
    405e:	tst.w	r3, #80	; 0x50
    4062:	beq.n	4074 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    4064:	ldr	r3, [r1, #0]
    4066:	ands.w	ip, r3, #31
    406a:	bne.n	4074 <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    406c:	mov	r3, r2
    406e:	mov	r2, ip
    4070:	b.w	3b88 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    4074:	movs	r0, #0
    4076:	bx	lr

00004078 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    4078:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    407c:	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    407e:	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    4080:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4082:	cmp	r1, #0
    4084:	beq.n	410c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    4086:	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    408a:	ldr.w	r3, [r7, #1072]	; 0x430
    408e:	cmp	r3, r8
    4090:	bls.n	4118 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    4092:	and.w	r3, r8, #7
    4096:	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    4098:	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    409c:	lsls	r5, r3
    409e:	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    40a0:	mov	r6, r8
  uint32_t endAlloc = start;
    40a2:	mov	r4, r8
  while (true) {
    uint32_t sector =
    40a4:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    40a8:	movs	r2, #0
    40aa:	mov	r0, r7
    40ac:	add.w	r1, r1, r4, lsr #12
    40b0:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    40b4:	cbz	r0, 40f2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    40b6:	add.w	fp, fp, #4294967295
    40ba:	add	fp, r0
    40bc:	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    40c0:	ldrb.w	r1, [fp, #1]!
    40c4:	b.n	40dc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    40c6:	cmp	r2, r9
    40c8:	beq.n	4122 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    40ca:	cmp	r8, r4
    40cc:	beq.n	40f0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    40ce:	ldr.w	r5, [r7, #1072]	; 0x430
    40d2:	cmp	r5, r4
    40d4:	bls.n	4100 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    40d6:	ands.w	r5, r3, #255	; 0xff
    40da:	beq.n	40f6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    40dc:	adds	r4, #1
        if (!(mask & cache[i])) {
    40de:	tst	r1, r5
      for (; mask; mask <<= 1) {
    40e0:	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    40e4:	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    40e8:	beq.n	40c6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    40ea:	cmp	r8, r4
        endAlloc++;
    40ec:	mov	r6, r4
        if (endAlloc == start) {
    40ee:	bne.n	40ce <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    40f0:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    40f2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    40f6:	cmp	r0, fp
      mask = 1;
    40f8:	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    40fc:	bne.n	40c0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    40fe:	b.n	4104 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    4100:	movs	r6, #0
    4102:	mov	r4, r6
  uint32_t endAlloc = start;
    4104:	movs	r5, #1
    i = 0;
    4106:	mov.w	fp, #0
    410a:	b.n	40a4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    410c:	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    4110:	ldr.w	r3, [r7, #1072]	; 0x430
    4114:	cmp	r3, r8
    4116:	bhi.n	4092 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    4118:	mov.w	r8, #0
    411c:	movs	r5, #1
    start = 0;
    411e:	mov	fp, r8
    4120:	b.n	40a0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    4122:	cmp.w	sl, #0
    4126:	bne.n	4132 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    4128:	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    412c:	it	eq
    412e:	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    4132:	adds	r0, r6, #2
}
    4134:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004138 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
    4138:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    413c:	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    413e:	subs	r0, r1, #2
                                  bool value) {
    4140:	mov	r5, r2
    4142:	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4144:	adds	r3, r0, r2
    4146:	ldr.w	r2, [r8, #1072]	; 0x430
    414a:	cmp	r3, r2
    414c:	bhi.n	41be <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    414e:	cbnz	r6, 41c4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    4150:	ldr.w	r3, [r8, #1056]	; 0x420
    4154:	cmp	r3, r0
      m_bitmapStart = start;
    4156:	it	hi
    4158:	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    415c:	and.w	r3, r0, #7
    4160:	movs	r4, #1
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    4162:	ldr.w	r7, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    4166:	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    416a:	lsls	r4, r3
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    416c:	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    4170:	uxtb	r4, r4
    4172:	movs	r2, #1
    4174:	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    4176:	adds	r7, r1, r2
    4178:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    417c:	cbz	r0, 41be <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    417e:	add.w	lr, r9, #4294967295
    4182:	add	lr, r0
    4184:	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    4188:	ldrb.w	ip, [lr, #1]!
    418c:	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4190:	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    4194:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    4198:	ite	ne
    419a:	movne	r2, #1
    419c:	moveq	r2, #0
    419e:	cmp	r2, r6
    41a0:	beq.n	41be <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    41a2:	subs	r5, #1
        cache[i] ^= mask;
    41a4:	strb.w	ip, [lr]
        if (--count == 0) {
    41a8:	beq.n	41dc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    41aa:	ands.w	r4, r4, #255	; 0xff
    41ae:	bne.n	418c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    41b0:	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    41b2:	mov	r9, r4
    41b4:	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    41b8:	bne.n	4188 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    41ba:	mov	r1, r7
    41bc:	b.n	4172 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

fail:
  return false;
    41be:	movs	r0, #0
}
    41c0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
    41c4:	ldr.w	r1, [r8, #1056]	; 0x420
    41c8:	cmp	r3, r1
    41ca:	bls.n	415c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    41cc:	cmp	r1, r0
    41ce:	bcc.n	415c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    41d0:	cmp	r3, r2
    41d2:	it	cs
    41d4:	movcs	r3, #0
    41d6:	str.w	r3, [r8, #1056]	; 0x420
    41da:	b.n	415c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    41dc:	movs	r0, #1
}
    41de:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    41e2:	nop

000041e4 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    41e4:	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    41e6:	ldr.w	r3, [r0, #1072]	; 0x430
    41ea:	adds	r3, #1
    41ec:	cmp	r3, r1
    41ee:	bcs.n	41f4 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    41f0:	movs	r0, #0
}
    41f2:	pop	{r3, r4, r5, r6, r7, pc}
    41f4:	mov	r7, r0
    41f6:	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    41f8:	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    41fc:	movs	r5, #0
    41fe:	b.n	420c <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    4200:	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    4204:	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    4206:	adds	r3, #1
    4208:	cmp	r3, r4
    420a:	bcc.n	41f0 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    420c:	ldr.w	r1, [r7, #1060]	; 0x424
    4210:	movs	r2, #0
    4212:	mov	r0, r6
    4214:	add.w	r1, r1, r4, lsr #7
    4218:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    421c:	lsls	r4, r4, #2
  if (!cache) {
    421e:	cmp	r0, #0
    4220:	beq.n	41f0 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4222:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    4226:	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    4228:	adds	r3, r4, #1
    422a:	bne.n	4200 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    422c:	adds	r0, r5, #1
}
    422e:	pop	{r3, r4, r5, r6, r7, pc}

00004230 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4230:	push	{r3, r4, r5, lr}
    4232:	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    4234:	ldr	r3, [r1, #0]
    4236:	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    423a:	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    423e:	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    4242:	subs	r3, #2
    4244:	ldr	r5, [r4, #4]
    4246:	lsl.w	r3, r3, ip
    424a:	ands	r1, r5
    424c:	add.w	r3, r3, r1, lsr #9
    4250:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    4254:	add	r1, r3
    4256:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    425a:	cbz	r0, 4264 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    425c:	ldr	r3, [r4, #4]
    425e:	ubfx	r3, r3, #0, #9
    4262:	add	r0, r3
}
    4264:	pop	{r3, r4, r5, pc}
    4266:	nop

00004268 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4268:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    426c:	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    426e:	ldr.w	r3, [r0, #1080]	; 0x438
    4272:	ldr	r1, [r1, #4]
    4274:	ands	r3, r1
  pos->position += offset;
    4276:	add	r1, r2
    4278:	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    427a:	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    427c:	ldrb.w	r1, [r0, #1093]	; 0x445
    4280:	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    4284:	uxtb	r2, r2
    4286:	lsrs	r3, r2
  while (tmp--) {
    4288:	cbz	r3, 42d6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    428a:	mov	r8, r0
    428c:	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    428e:	add.w	r9, r0, #528	; 0x210
    4292:	b.n	42a0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    4294:	ldr	r3, [r4, #0]
  while (tmp--) {
    4296:	subs	r5, #1
      pos->cluster++;
    4298:	add.w	r3, r3, #1
    429c:	str	r3, [r4, #0]
  while (tmp--) {
    429e:	bcc.n	42d6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    42a0:	ldrb	r6, [r4, #8]
    42a2:	cmp	r6, #0
    42a4:	bne.n	4294 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    42a6:	ldr.w	r3, [r8, #1072]	; 0x430
    42aa:	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    42ac:	ldr	r7, [r4, #0]
    42ae:	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    42b0:	adds	r3, #1
    42b2:	cmp	r7, r3
    42b4:	bhi.n	42dc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    42b6:	ldr.w	r1, [r8, #1060]	; 0x424
    42ba:	add.w	r1, r1, r7, lsr #7
    42be:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    42c2:	lsls	r7, r7, #2
  if (!cache) {
    42c4:	cbz	r0, 42dc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    42c6:	ubfx	r7, r7, #0, #9
    42ca:	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    42cc:	adds	r2, r3, #1
    42ce:	beq.n	42e4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    42d0:	subs	r5, #1
    return 0;
  }
  *value = next;
    42d2:	str	r3, [r4, #0]
  while (tmp--) {
    42d4:	bcs.n	42a0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    42d6:	movs	r0, #1
}
    42d8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    42dc:	mov.w	r0, #4294967295
}
    42e0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    42e4:	mov	r0, r6
}
    42e6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    42ea:	nop

000042ec <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    42ec:	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    42ee:	ldr.w	r3, [r0, #1072]	; 0x430
    42f2:	adds	r3, #1
    42f4:	cmp	r3, r1
    42f6:	bcs.n	42fe <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    42f8:	mov.w	r0, #4294967295
  return 1;
}
    42fc:	pop	{r3, r4, r5, pc}
    42fe:	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4300:	ldr.w	r1, [r0, #1060]	; 0x424
    4304:	mov	r5, r2
    4306:	add.w	r0, r0, #528	; 0x210
    430a:	movs	r2, #0
    430c:	add.w	r1, r1, r4, lsr #7
    4310:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    4314:	cmp	r0, #0
    4316:	beq.n	42f8 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4318:	lsls	r4, r4, #2
    431a:	ubfx	r4, r4, #0, #9
    431e:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    4320:	adds	r2, r3, #1
    4322:	beq.n	432a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    4324:	movs	r0, #1
  *value = next;
    4326:	str	r3, [r5, #0]
}
    4328:	pop	{r3, r4, r5, pc}
    return 0;
    432a:	movs	r0, #0
}
    432c:	pop	{r3, r4, r5, pc}
    432e:	nop

00004330 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4330:	cmp	r1, #1
    4332:	bls.n	436c <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4334:	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4336:	ldr.w	r3, [r0, #1072]	; 0x430
    433a:	mov	r4, r1
    433c:	adds	r3, #1
    433e:	cmp	r3, r1
    4340:	bcs.n	4346 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
    4342:	movs	r0, #0
}
    4344:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4346:	ldr.w	r1, [r0, #1060]	; 0x424
    434a:	mov	r5, r2
    434c:	add.w	r0, r0, #528	; 0x210
    4350:	movs	r2, #1
    4352:	add.w	r1, r1, r4, lsr #7
    4356:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    435a:	mov	r3, r0
    435c:	cmp	r0, #0
    435e:	beq.n	4342 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    4360:	lsls	r4, r4, #2
  return true;
    4362:	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    4364:	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    4368:	str	r5, [r3, r4]
}
    436a:	pop	{r3, r4, r5, pc}
  return false;
    436c:	movs	r0, #0
}
    436e:	bx	lr

00004370 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    4370:	ldr.w	r3, [r0, #1072]	; 0x430
    4374:	adds	r3, #1
    4376:	cmp	r1, r3
    4378:	bls.n	437e <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

fail:
  return false;
}
    437a:	movs	r0, #0
    437c:	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    437e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4382:	mov	r5, r0
    4384:	sub	sp, #12
    4386:	mov	r4, r1
    4388:	add.w	r9, r0, #528	; 0x210
    438c:	mov	r7, r1
    438e:	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4392:	ldr.w	r1, [r5, #1060]	; 0x424
    4396:	movs	r2, #0
    4398:	mov	r0, r9
    439a:	mov.w	fp, r4, lsr #7
    439e:	add.w	r1, r1, r4, lsr #7
    43a2:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    43a6:	cbz	r0, 43ce <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    43a8:	lsls	r3, r4, #2
    43aa:	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    43ae:	ldr	r2, [r0, r3]
    43b0:	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    43b2:	adds	r3, r2, #1
    43b4:	itet	ne
    43b6:	movne	r6, r2
    43b8:	moveq.w	sl, #0
    43bc:	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    43c0:	cmp	r4, #1
    43c2:	bls.n	43ce <ExFatPartition::freeChain(unsigned long)+0x5e>
    43c4:	ldr.w	r2, [r5, #1072]	; 0x430
    43c8:	adds	r2, #1
    43ca:	cmp	r4, r2
    43cc:	bls.n	43d6 <ExFatPartition::freeChain(unsigned long)+0x66>
}
    43ce:	movs	r0, #0
    43d0:	add	sp, #12
    43d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    43d6:	ldr.w	r1, [r5, #1060]	; 0x424
    43da:	movs	r2, #1
    43dc:	mov	r0, r9
    43de:	add	r1, fp
    43e0:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    43e4:	cmp	r0, #0
    43e6:	beq.n	43ce <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    43e8:	ldr	r3, [sp, #4]
    43ea:	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    43ee:	cmp.w	sl, #0
    43f2:	beq.n	441a <ExFatPartition::freeChain(unsigned long)+0xaa>
    43f4:	adds	r4, #1
    43f6:	cmp	r4, r6
    43f8:	beq.n	440c <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    43fa:	movs	r3, #0
    43fc:	subs	r2, r4, r7
    43fe:	mov	r1, r7
    4400:	mov	r0, r5
    4402:	bl	4138 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4406:	cmp	r0, #0
    4408:	beq.n	43ce <ExFatPartition::freeChain(unsigned long)+0x5e>
    440a:	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    440c:	ldr.w	r3, [r5, #1072]	; 0x430
    4410:	adds	r3, #1
    4412:	cmp	r3, r6
    4414:	bcc.n	43ce <ExFatPartition::freeChain(unsigned long)+0x5e>
    4416:	mov	r4, r6
    4418:	b.n	4392 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    441a:	adds	r2, r4, #1
    441c:	mov	r3, sl
    441e:	mov	r1, r7
    4420:	mov	r0, r5
    4422:	subs	r2, r2, r7
}
    4424:	add	sp, #12
    4426:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    442a:	b.w	4138 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    442e:	nop

00004430 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t ExFatPartition::freeClusterCount() {
    4430:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    4434:	movs	r5, #0
int32_t ExFatPartition::freeClusterCount() {
    4436:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    4438:	ldr.w	r1, [r0, #1068]	; 0x42c
    443c:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    4440:	mov	r4, r5
    4442:	movs	r2, #0
    4444:	mov	r0, r8
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    4446:	adds	r7, r1, #1
    4448:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    444c:	cbz	r0, 449a <ExFatPartition::freeClusterCount()+0x6a>
    444e:	add.w	lr, r0, #4294967295
    4452:	add.w	r9, r4, #4096	; 0x1000
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    4456:	ldr.w	r0, [r6, #1072]	; 0x430
    445a:	b.n	4468 <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    445c:	cbnz	r1, 447e <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    445e:	adds	r4, #8
      if (nc >= m_clusterCount) {
    4460:	cmp	r4, r0
    4462:	bcs.n	4478 <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    4464:	cmp	r4, r9
    4466:	beq.n	4496 <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    4468:	ldrb.w	r1, [lr, #1]!
    446c:	cmp	r1, #255	; 0xff
    446e:	bne.n	445c <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    4470:	adds	r4, #8
        usedCount += 8;
    4472:	adds	r5, #8
      if (nc >= m_clusterCount) {
    4474:	cmp	r4, r0
    4476:	bcc.n	4464 <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    4478:	subs	r0, r0, r5
      }
    }
  }
}
    447a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    447e:	movs	r2, #8
        for (uint8_t mask = 1; mask; mask <<= 1) {
    4480:	movs	r3, #1
          if ((mask & cache[i])) {
    4482:	tst	r1, r3
        for (uint8_t mask = 1; mask; mask <<= 1) {
    4484:	mov.w	ip, r3, lsl #1
            usedCount++;
    4488:	it	ne
    448a:	addne	r5, #1
        for (uint8_t mask = 1; mask; mask <<= 1) {
    448c:	subs	r2, #1
    448e:	uxtb.w	r3, ip
    4492:	bne.n	4482 <ExFatPartition::freeClusterCount()+0x52>
    4494:	b.n	445e <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    4496:	mov	r1, r7
    4498:	b.n	4442 <ExFatPartition::freeClusterCount()+0x12>
      return -1;
    449a:	mov.w	r0, #4294967295
    449e:	b.n	447a <ExFatPartition::freeClusterCount()+0x4a>

000044a0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    44a0:	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  m_fatType = 0;
    44a2:	mov.w	ip, #0
  m_blockDev = dev;
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    44a6:	mov	r5, r2
    m_sector = 0XFFFFFFFF;
    44a8:	mov.w	r2, #4294967295
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    44ac:	mov	r4, r0
  m_fatType = 0;
    44ae:	strb.w	ip, [r0, #1092]	; 0x444
  m_blockDev = dev;
    44b2:	str.w	r1, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
    44b6:	str	r1, [r0, #4]
    44b8:	str.w	r1, [r0, #532]	; 0x214
    m_status = 0;
    44bc:	strb.w	ip, [r0]
    44c0:	strb.w	ip, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    44c4:	str	r2, [r0, #8]
    44c6:	str.w	r2, [r0, #536]	; 0x218
  if (part) {
    44ca:	cbz	r5, 4506 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x66>
    if (part > 4) {
    44cc:	cmp	r5, #4
    44ce:	bls.n	44d4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
    44d0:	movs	r0, #0
}
    44d2:	pop	{r3, r4, r5, r6, r7, pc}
    44d4:	add.w	r7, r0, #528	; 0x210
    44d8:	mov	r2, ip
    44da:	mov	r1, ip
    44dc:	mov	r0, r7
    44de:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    44e2:	cmp	r0, #0
    44e4:	beq.n	44d0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    MbrPart_t* mp = mbr->part + part - 1;
    44e6:	mvn.w	r3, #4026531840	; 0xf0000000
    44ea:	add.w	r0, r0, #446	; 0x1be
    44ee:	add	r3, r5
    44f0:	lsls	r1, r3, #4
    44f2:	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    44f6:	ldrb	r2, [r3, #4]
    44f8:	cmp	r2, #0
    44fa:	beq.n	44d0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    44fc:	ldrb	r2, [r0, r1]
    44fe:	lsls	r2, r2, #25
    4500:	bne.n	44d0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  return *reinterpret_cast<const uint32_t*>(src);
    4502:	ldr	r6, [r3, #8]
    4504:	b.n	450c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x6c>
    4506:	mov	r6, r3
    4508:	add.w	r7, r0, #528	; 0x210
    450c:	movs	r2, #0
    450e:	mov	r1, r6
    4510:	mov	r0, r7
    4512:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    4516:	mov	r5, r0
    4518:	cmp	r0, #0
    451a:	beq.n	44d0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    451c:	movs	r2, #5
    451e:	ldr	r1, [pc, #104]	; (4588 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe8>)
    4520:	adds	r0, #3
    4522:	bl	dd74 <strncmp>
    4526:	cmp	r0, #0
    4528:	bne.n	44d0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    452a:	ldrb.w	r3, [r5, #108]	; 0x6c
    452e:	cmp	r3, #9
    4530:	bne.n	44d0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4532:	ldr	r3, [r5, #80]	; 0x50
  bitmapFind(0, 1);
    4534:	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4536:	add	r3, r6
    4538:	str.w	r3, [r4, #1060]	; 0x424
    453c:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    453e:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    4542:	ldr	r3, [r5, #88]	; 0x58
    4544:	add	r3, r6
    4546:	str.w	r3, [r4, #1068]	; 0x42c
    454a:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    454c:	str.w	r3, [r4, #1072]	; 0x430
    4550:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    4552:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4556:	ldrb.w	r2, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    455a:	movs	r5, #1
  m_bitmapStart = 0;
    455c:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    4560:	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4562:	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4566:	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    456a:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    456e:	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4570:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    4574:	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    4578:	mov	r2, r5
    457a:	bl	4078 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    457e:	movs	r3, #64	; 0x40
  return true;
    4580:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    4582:	strb.w	r3, [r4, #1092]	; 0x444
}
    4586:	pop	{r3, r4, r5, r6, r7, pc}
    4588:	.word	0x2000083c

0000458c <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    458c:	push	{r4, lr}
    458e:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    4590:	ldr.w	r1, [r0, #1076]	; 0x434
    4594:	bl	41e4 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    4598:	ldrb.w	r3, [r4, #1093]	; 0x445
    459c:	adds	r3, #9
  return nc << bytesPerClusterShift();
    459e:	uxtb	r3, r3
}
    45a0:	lsls	r0, r3
    45a2:	pop	{r4, pc}

000045a4 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    45a4:	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    45a6:	push	{r3, r4, r5, r6, r7, lr}
    45a8:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    45aa:	ldr	r0, [r0, #32]
    45ac:	cbz	r1, 45b0 <ExFatFile::addCluster()+0xc>
    45ae:	adds	r1, #1
    45b0:	movs	r2, #1
    45b2:	bl	4078 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    45b6:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    45b8:	mov	r5, r0
  if (find < 2) {
    45ba:	bls.n	4622 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    45bc:	movs	r3, #1
    45be:	mov	r1, r0
    45c0:	ldr	r0, [r4, #32]
    45c2:	mov	r2, r3
    45c4:	bl	4138 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    45c8:	mov	r6, r0
    45ca:	cbz	r0, 4622 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    45cc:	ldr	r3, [r4, #24]
    45ce:	cbz	r3, 4628 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    45d0:	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    45d4:	lsls	r1, r2, #25
    45d6:	bpl.n	45fe <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    45d8:	adds	r1, r3, #1
    45da:	cmp	r1, r5
    45dc:	beq.n	4610 <ExFatFile::addCluster()+0x6c>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    45de:	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    45e2:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    45e4:	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    45e8:	b.n	45f6 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    45ea:	ldr	r0, [r4, #32]
    45ec:	bl	4330 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    45f0:	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    45f2:	cbz	r0, 4622 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    45f4:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    45f6:	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    45f8:	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    45fa:	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    45fc:	bcc.n	45ea <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    45fe:	mov.w	r2, #4294967295
    4602:	mov	r1, r5
    4604:	ldr	r0, [r4, #32]
    4606:	bl	4330 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    460a:	cbz	r0, 4622 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    460c:	ldr	r1, [r4, #24]
    460e:	cbnz	r1, 4616 <ExFatFile::addCluster()+0x72>
  m_curCluster = find;
  return true;

fail:
  return false;
}
    4610:	mov	r0, r6
  m_curCluster = find;
    4612:	str	r5, [r4, #24]
}
    4614:	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    4616:	mov	r2, r5
    4618:	ldr	r0, [r4, #32]
    461a:	bl	4330 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    461e:	cmp	r0, #0
    4620:	bne.n	4610 <ExFatFile::addCluster()+0x6c>
  return false;
    4622:	movs	r6, #0
}
    4624:	mov	r0, r6
    4626:	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4628:	ldrb.w	r3, [r4, #51]	; 0x33
    462c:	orr.w	r3, r3, #64	; 0x40
    4630:	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    4634:	b.n	4610 <ExFatFile::addCluster()+0x6c>
    4636:	nop

00004638 <ExFatFile::remove()>:
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    4638:	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    463c:	lsls	r2, r3, #30
    463e:	bpl.n	46ae <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    4640:	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    4642:	push	{r4, r5, r6, lr}
    4644:	mov	r5, r0
  if (m_firstCluster) {
    4646:	cbnz	r1, 4672 <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    4648:	movs	r4, #0
    464a:	mov	r1, r4
    464c:	b.n	465e <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    464e:	ldrb	r3, [r0, #0]
    4650:	and.w	r3, r3, #127	; 0x7f
    4654:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4656:	ldrb.w	r3, [r5, #48]	; 0x30
    465a:	cmp	r3, r1
    465c:	bcc.n	46b2 <ExFatFile::remove()+0x7a>
    465e:	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    4660:	movs	r2, #1
    4662:	mov	r0, r5
    4664:	bl	3770 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4668:	uxtb	r1, r4
    if (!cache) {
    466a:	cmp	r0, #0
    466c:	bne.n	464e <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

fail:
  return false;
}
    466e:	movs	r0, #0
    4670:	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    4672:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4674:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    4676:	bpl.n	46e2 <ExFatFile::remove()+0xaa>
    4678:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    467c:	ldrd	r2, r4, [r5, #8]
    4680:	adds	r3, #9
    4682:	subs	r2, #1
    4684:	uxtb	r3, r3
    4686:	adc.w	r4, r4, #4294967295
    468a:	rsb	ip, r3, #32
    468e:	lsrs	r2, r3
    4690:	subs	r3, #32
    4692:	lsl.w	ip, r4, ip
    4696:	lsr.w	r3, r4, r3
    469a:	orr.w	r2, r2, ip
    469e:	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    46a0:	movs	r3, #0
    46a2:	adds	r2, #1
    46a4:	bl	4138 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    46a8:	cmp	r0, #0
    46aa:	bne.n	4648 <ExFatFile::remove()+0x10>
    46ac:	b.n	466e <ExFatFile::remove()+0x36>
}
    46ae:	movs	r0, #0
    46b0:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    46b2:	movs	r3, #0
  return m_vol->cacheSync();
    46b4:	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    46b6:	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    46ba:	mov	r0, r4
  m_flags = 0;
    46bc:	strb.w	r3, [r5, #51]	; 0x33
    46c0:	bl	2de0 <FsCache::sync()>
    46c4:	cmp	r0, #0
    46c6:	beq.n	466e <ExFatFile::remove()+0x36>
    46c8:	add.w	r0, r4, #528	; 0x210
    46cc:	bl	2de0 <FsCache::sync()>
    46d0:	cmp	r0, #0
    46d2:	beq.n	466e <ExFatFile::remove()+0x36>
    46d4:	ldr.w	r0, [r4, #1088]	; 0x440
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    46d8:	ldr	r3, [r0, #0]
}
    46da:	ldmia.w	sp!, {r4, r5, r6, lr}
    46de:	ldr	r3, [r3, #28]
    46e0:	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    46e2:	bl	4370 <ExFatPartition::freeChain(unsigned long)>
    46e6:	cmp	r0, #0
    46e8:	bne.n	4648 <ExFatFile::remove()+0x10>
    46ea:	b.n	466e <ExFatFile::remove()+0x36>

000046ec <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    46ec:	ldrb.w	r3, [r0, #49]	; 0x31
    46f0:	lsls	r3, r3, #27
    46f2:	bmi.n	46f8 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    46f4:	movs	r0, #0
}
    46f6:	bx	lr
bool ExFatFile::rmdir() {
    46f8:	push	{r4, lr}
  void rewind() { seekSet(0); }
    46fa:	movs	r2, #0
    46fc:	sub	sp, #32
    46fe:	movs	r3, #0
    4700:	mov	r4, r0
    4702:	bl	3a9c <ExFatFile::seekSet(unsigned long long)>
    4706:	b.n	471a <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    4708:	cmp	r0, #32
    470a:	bne.n	4744 <ExFatFile::rmdir()+0x58>
    470c:	ldrsb.w	r3, [sp]
    4710:	ldrb.w	r2, [sp]
    4714:	cmp	r3, #0
    4716:	blt.n	4744 <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    4718:	cbz	r2, 4728 <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    471a:	movs	r2, #32
    471c:	mov	r1, sp
    471e:	mov	r0, r4
    4720:	bl	38d0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4724:	cmp	r0, #0
    4726:	bne.n	4708 <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    4728:	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    472c:	movs	r2, #8
  return remove();
    472e:	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    4730:	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    4734:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    4738:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    473c:	bl	4638 <ExFatFile::remove()>
}
    4740:	add	sp, #32
    4742:	pop	{r4, pc}
  return false;
    4744:	movs	r0, #0
}
    4746:	add	sp, #32
    4748:	pop	{r4, pc}
    474a:	nop

0000474c <ExFatFile::syncDir()>:
fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    474c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4750:	mov.w	r8, #0
    4754:	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        if (FsDateTime::callback) {
    4756:	ldr	r7, [pc, #296]	; (4880 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    4758:	mov	r6, r0
  uint16_t checksum = 0;
    475a:	mov	r4, r8
    475c:	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    475e:	movs	r2, #0
    4760:	mov	r0, r6
    4762:	bl	3770 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    4766:	mov	r5, r0
    4768:	cbz	r0, 4778 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    476a:	ldrb	r1, [r0, #0]
    476c:	cmp	r1, #192	; 0xc0
    476e:	beq.n	4844 <ExFatFile::syncDir()+0xf8>
    4770:	cmp	r1, #193	; 0xc1
    4772:	beq.n	47cc <ExFatFile::syncDir()+0x80>
    4774:	cmp	r1, #133	; 0x85
    4776:	beq.n	478c <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
    4778:	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    477c:	movs	r0, #0
  m_error |= WRITE_ERROR;
    477e:	orr.w	r3, r3, #1
    4782:	strb.w	r3, [r6, #50]	; 0x32
}
    4786:	add	sp, #8
    4788:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    478c:	ldrb.w	r3, [r6, #49]	; 0x31
    4790:	and.w	r3, r3, #55	; 0x37
    4794:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    4796:	ldr	r3, [r7, #0]
    4798:	cbz	r3, 47bc <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    479a:	add.w	r2, sp, #3
    479e:	add.w	r1, sp, #6
    47a2:	add	r0, sp, #4
    47a4:	blx	r3
          setLe16(df->modifyTime, time);
    47a6:	ldrh.w	r3, [sp, #6]
  *reinterpret_cast<uint16_t*>(dst) = src;
    47aa:	strh	r3, [r5, #12]
    47ac:	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    47ae:	ldrh.w	r3, [sp, #4]
    47b2:	strh	r3, [r5, #14]
    47b4:	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    47b6:	ldrb.w	r3, [sp, #3]
    47ba:	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    47bc:	ldr	r2, [r6, #32]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    47be:	ldrb.w	r3, [r2, #528]	; 0x210
    47c2:	orr.w	r3, r3, #1
    47c6:	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    47ca:	ldrb	r1, [r5, #0]
    47cc:	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    47d0:	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    47d2:	clz	r0, r0
    47d6:	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    47d8:	b.n	47de <ExFatFile::syncDir()+0x92>
    47da:	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    47dc:	ldrb	r1, [r5, r2]
    47de:	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    47e0:	cmp	r2, #1
    47e2:	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    47e6:	orr.w	r3, r3, r4, lsr #1
    47ea:	uxtah	r3, r1, r3
    47ee:	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    47f0:	bne.n	47f6 <ExFatFile::syncDir()+0xaa>
    47f2:	cmp	r0, #0
    47f4:	bne.n	47da <ExFatFile::syncDir()+0x8e>
    47f6:	cmp	r2, #31
    47f8:	bls.n	47dc <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    47fa:	add.w	r8, r8, #1
    47fe:	ldrb.w	r3, [r6, #48]	; 0x30
    4802:	uxtb.w	r1, r8
    4806:	cmp	r3, r1
    4808:	bcs.n	475e <ExFatFile::syncDir()+0x12>
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    480a:	movs	r2, #1
    480c:	add.w	r1, r6, #36	; 0x24
    4810:	ldr	r0, [r6, #32]
    4812:	bl	4230 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4816:	cmp	r0, #0
    4818:	beq.n	4778 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    481a:	ldr	r5, [r6, #32]
    481c:	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    481e:	mov	r0, r5
    4820:	bl	2de0 <FsCache::sync()>
    4824:	cmp	r0, #0
    4826:	beq.n	4778 <ExFatFile::syncDir()+0x2c>
    4828:	add.w	r0, r5, #528	; 0x210
    482c:	bl	2de0 <FsCache::sync()>
    4830:	cmp	r0, #0
    4832:	beq.n	4778 <ExFatFile::syncDir()+0x2c>
    4834:	ldr.w	r0, [r5, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4838:	ldr	r3, [r0, #0]
    483a:	ldr	r3, [r3, #28]
    483c:	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    483e:	cmp	r0, #0
    4840:	bne.n	4786 <ExFatFile::syncDir()+0x3a>
    4842:	b.n	4778 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    4844:	ldrb.w	r3, [r6, #51]	; 0x33
    4848:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    484c:	ldrb	r3, [r0, #1]
    484e:	ite	ne
    4850:	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    4854:	andeq.w	r3, r3, #253	; 0xfd
    4858:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    485a:	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    485e:	ldrd	r3, r2, [r6, #28]
  *reinterpret_cast<uint64_t*>(dst) = src;
    4862:	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    4866:	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    486a:	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    486c:	strd	r0, r1, [r5, #24]
    4870:	ldrb.w	r3, [r2, #528]	; 0x210
    4874:	orr.w	r3, r3, #1
    4878:	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    487c:	ldrb	r1, [r5, #0]
  void dataCacheDirty() { m_dataCache.dirty(); }
    487e:	b.n	47cc <ExFatFile::syncDir()+0x80>
    4880:	.word	0x20006104

00004884 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    4884:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    4886:	ldrb.w	r3, [r0, #49]	; 0x31
    488a:	cbz	r3, 48de <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    488c:	ldrsb.w	r2, [r0, #51]	; 0x33
    4890:	mov	r4, r0
    4892:	ldrb.w	r3, [r0, #51]	; 0x33
    4896:	cmp	r2, #0
    4898:	blt.n	48b4 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    489a:	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    489c:	mov	r0, r5
    489e:	bl	2de0 <FsCache::sync()>
    48a2:	cbnz	r0, 48c4 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    48a4:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    48a8:	movs	r0, #0
  m_error |= WRITE_ERROR;
    48aa:	orr.w	r3, r3, #1
    48ae:	strb.w	r3, [r4, #50]	; 0x32
}
    48b2:	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    48b4:	and.w	r3, r3, #127	; 0x7f
    48b8:	strb.w	r3, [r0, #51]	; 0x33
}
    48bc:	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    48c0:	b.w	474c <ExFatFile::syncDir()>
    48c4:	add.w	r0, r5, #528	; 0x210
    48c8:	bl	2de0 <FsCache::sync()>
    48cc:	cmp	r0, #0
    48ce:	beq.n	48a4 <ExFatFile::sync()+0x20>
    48d0:	ldr.w	r0, [r5, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    48d4:	ldr	r3, [r0, #0]
    48d6:	ldr	r3, [r3, #28]
    48d8:	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    48da:	cmp	r0, #0
    48dc:	beq.n	48a4 <ExFatFile::sync()+0x20>
    return true;
    48de:	movs	r0, #1
}
    48e0:	pop	{r3, r4, r5, pc}
    48e2:	nop

000048e4 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    48e4:	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    48e6:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    48ea:	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    48ec:	lsls	r2, r3, #25
    48ee:	bmi.n	498a <ExFatFile::addDirCluster()+0xa6>
    48f0:	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const { return m_bytesPerCluster; }
    48f2:	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    48f4:	ldr.w	r3, [r3, #1084]	; 0x43c
    48f8:	add	r0, r3
  if (dl >= 0X4000000) {
    48fa:	cmp.w	r0, #67108864	; 0x4000000
    48fe:	bcc.n	4904 <ExFatFile::addDirCluster()+0x20>
}
    4900:	movs	r0, #0
    4902:	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    4904:	mov	r0, r5
    4906:	bl	45a4 <ExFatFile::addCluster()>
    490a:	cmp	r0, #0
    490c:	beq.n	4900 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    490e:	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4910:	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    4912:	ldr	r6, [r5, #24]
    4914:	ldrb.w	r3, [r0, #1093]	; 0x445
    4918:	subs	r6, #2
    491a:	lsls	r6, r3
    491c:	ldr.w	r3, [r0, #1068]	; 0x42c
    4920:	add	r6, r3
    return m_dataCache.prepare(sector, option);
    4922:	adds	r1, r6, r4
    4924:	movs	r2, #5
    4926:	add.w	r0, r0, #528	; 0x210
    492a:	adds	r4, #1
    492c:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    4930:	mov.w	r2, #512	; 0x200
    4934:	movs	r1, #0
    if (!cache) {
    4936:	cmp	r0, #0
    4938:	beq.n	4900 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    493a:	bl	dcd0 <memset>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    493e:	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    4940:	movs	r3, #1
    4942:	ldrb.w	r2, [r0, #1093]	; 0x445
    4946:	lsls	r3, r2
    4948:	cmp	r4, r3
    494a:	bcc.n	4922 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    494c:	ldrb.w	r3, [r5, #49]	; 0x31
    4950:	lsls	r3, r3, #25
    4952:	bmi.n	4980 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4954:	ldrb.w	r2, [r5, #51]	; 0x33
    4958:	orn	r2, r2, #127	; 0x7f
    m_dataLength += m_vol->bytesPerCluster();
    495c:	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4960:	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
    4964:	ldr.w	r2, [r0, #1084]	; 0x43c
    4968:	adds	r3, r3, r2
    496a:	adc.w	r0, r1, #0
    496e:	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    4970:	ldrd	r3, r1, [r5, #16]
    m_dataLength += m_vol->bytesPerCluster();
    4974:	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    4976:	adds	r3, r3, r2
    4978:	adc.w	r1, r1, #0
    497c:	strd	r3, r1, [r5, #16]
  return sync();
    4980:	mov	r0, r5
}
    4982:	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    4986:	b.w	4884 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    498a:	ldr	r0, [r0, #32]
    498c:	bl	458c <ExFatPartition::rootLength()>
    4990:	b.n	48f2 <ExFatFile::addDirCluster()+0xe>
    4992:	nop

00004994 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    4994:	push	{r4, r5, r6, lr}
    4996:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    4998:	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    499c:	sub	sp, #112	; 0x70
  ExFatFile() {}
    499e:	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    49a0:	tst.w	r0, #24
    49a4:	str	r3, [sp, #48]	; 0x30
    49a6:	str	r3, [sp, #104]	; 0x68
    49a8:	beq.n	49b2 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    49aa:	ldr	r0, [r4, #32]
    49ac:	ldr	r3, [r1, #32]
    49ae:	cmp	r0, r3
    49b0:	beq.n	49b8 <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    49b2:	movs	r0, #0
}
    49b4:	add	sp, #112	; 0x70
    49b6:	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    49b8:	movw	r3, #2561	; 0xa01
    49bc:	mov	r0, sp
    49be:	bl	3f50 <ExFatFile::open(ExFatFile*, char const*, int)>
    49c2:	cmp	r0, #0
    49c4:	beq.n	49b2 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    49c6:	mov	ip, r4
    49c8:	add.w	r6, r4, #48	; 0x30
    49cc:	add	r5, sp, #56	; 0x38
    49ce:	ldr.w	r0, [ip]
    49d2:	add.w	ip, ip, #16
    49d6:	ldr.w	r1, [ip, #-12]
    49da:	mov	lr, r5
    49dc:	ldr.w	r2, [ip, #-8]
    49e0:	adds	r5, #16
    49e2:	ldr.w	r3, [ip, #-4]
    49e6:	cmp	ip, r6
    49e8:	stmia.w	lr!, {r0, r1, r2, r3}
    49ec:	bne.n	49ce <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    49ee:	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    49f2:	add	r2, sp, #36	; 0x24
    49f4:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    49f8:	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    49fa:	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    49fe:	ldmia	r2, {r0, r1, r2}
    4a00:	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4a04:	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4a08:	mov	r0, r4
  m_setCount = file.m_setCount;
    4a0a:	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4a0e:	orn	r3, r3, #127	; 0x7f
    4a12:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4a16:	bl	4884 <ExFatFile::sync()>
    4a1a:	cmp	r0, #0
    4a1c:	beq.n	49b2 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    4a1e:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    4a20:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    4a22:	movs	r3, #8
  return oldFile.remove();
    4a24:	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    4a26:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    4a28:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    4a2c:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    4a30:	bl	4638 <ExFatFile::remove()>
    4a34:	b.n	49b4 <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    4a36:	nop

00004a38 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    4a38:	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    4a3a:	ldrb.w	r3, [r1, #49]	; 0x31
    4a3e:	tst.w	r3, #80	; 0x50
    4a42:	bne.n	4a4a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    4a44:	movs	r5, #0
}
    4a46:	mov	r0, r5
    4a48:	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    4a4a:	movw	r3, #2562	; 0xa02
    4a4e:	mov	r4, r0
    4a50:	bl	3b88 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4a54:	cmp	r0, #0
    4a56:	beq.n	4a44 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    4a58:	movs	r3, #48	; 0x30
  if (!addDirCluster()) {
    4a5a:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    4a5c:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    4a60:	bl	48e4 <ExFatFile::addDirCluster()>
    4a64:	mov	r5, r0
    4a66:	cmp	r0, #0
    4a68:	beq.n	4a44 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    4a6a:	ldr	r1, [r4, #24]
  void rewind() { seekSet(0); }
    4a6c:	movs	r2, #0
    4a6e:	movs	r3, #0
    4a70:	mov	r0, r4
    4a72:	str	r1, [r4, #28]
    4a74:	bl	3a9c <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4a78:	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    4a7a:	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4a7e:	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    4a82:	cmp	r3, #0
    4a84:	beq.n	4a46 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4a86:	movs	r3, #65	; 0x41
    return syncDir();
    4a88:	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4a8a:	strb.w	r3, [r4, #51]	; 0x33
}
    4a8e:	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    4a92:	b.w	474c <ExFatFile::syncDir()>
    4a96:	nop

00004a98 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    4a98:	push	{r4, r5, r6, r7, lr}
  ExFatFile() {}
    4a9a:	movs	r5, #0
    4a9c:	sub	sp, #92	; 0x5c
    4a9e:	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    4aa0:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    4aa4:	str	r2, [sp, #4]
    4aa6:	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    4aa8:	cmp	r3, #0
    4aaa:	bne.n	4b3a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    4aac:	ldrb.w	r3, [r1, #49]	; 0x31
    4ab0:	mov	r6, r1
    4ab2:	tst.w	r3, #80	; 0x50
    4ab6:	beq.n	4b3a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
  if (isDirSeparator(*path)) {
    4ab8:	ldrb	r3, [r2, #0]
    4aba:	mov	r4, r0
    4abc:	mov	r1, r2
    4abe:	cmp	r3, #47	; 0x2f
    4ac0:	beq.n	4b40 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!parsePathName(path, &fname, &path)) {
    4ac2:	add	r3, sp, #4
    4ac4:	add	r2, sp, #12
    4ac6:	mov	r0, r4
    4ac8:	bl	3830 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4acc:	cmp	r0, #0
    4ace:	beq.n	4b3a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!*path) {
    4ad0:	ldr	r3, [sp, #4]
    4ad2:	ldrb	r3, [r3, #0]
    4ad4:	cmp	r3, #0
    4ad6:	beq.n	4b5c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc4>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    4ad8:	movs	r3, #0
    4ada:	add	r2, sp, #12
    4adc:	mov	r1, r6
    4ade:	mov	r0, r4
    4ae0:	bl	3b88 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4ae4:	cbnz	r0, 4af4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5c>
      if (!pFlag || !mkdir(parent, &fname)) {
    4ae6:	cbz	r7, 4b3a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    4ae8:	add	r2, sp, #12
    4aea:	mov	r1, r6
    4aec:	mov	r0, r4
    4aee:	bl	4a38 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    4af2:	cbz	r0, 4b3a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    tmpDir = *this;
    4af4:	mov	ip, r4
    4af6:	add	r5, sp, #32
    4af8:	add.w	r6, r4, #48	; 0x30
    4afc:	ldr.w	r0, [ip]
    4b00:	add.w	ip, ip, #16
    4b04:	ldr.w	r1, [ip, #-12]
    4b08:	mov	lr, r5
    4b0a:	ldr.w	r2, [ip, #-8]
    4b0e:	adds	r5, #16
    4b10:	ldr.w	r3, [ip, #-4]
    4b14:	cmp	ip, r6
    4b16:	stmia.w	lr!, {r0, r1, r2, r3}
    4b1a:	bne.n	4afc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x64>
    4b1c:	ldr.w	r0, [ip]
    parent = &tmpDir;
    4b20:	add	r6, sp, #32
    tmpDir = *this;
    4b22:	str	r0, [r5, #0]
    close();
    4b24:	mov	r0, r4
    4b26:	bl	37ac <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    4b2a:	ldr	r1, [sp, #4]
    4b2c:	add	r3, sp, #4
    4b2e:	add	r2, sp, #12
    4b30:	mov	r0, r4
    4b32:	bl	3830 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4b36:	cmp	r0, #0
    4b38:	bne.n	4ad0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x38>
  return false;
    4b3a:	movs	r0, #0
}
    4b3c:	add	sp, #92	; 0x5c
    4b3e:	pop	{r4, r5, r6, r7, pc}
      path++;
    4b40:	adds	r1, #1
    4b42:	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    4b44:	ldrb	r3, [r1, #0]
    4b46:	cmp	r3, #47	; 0x2f
    4b48:	beq.n	4b40 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!tmpDir.openRoot(parent->m_vol)) {
    4b4a:	ldr	r1, [r6, #32]
    4b4c:	add	r0, sp, #32
    4b4e:	bl	3808 <ExFatFile::openRoot(ExFatVolume*)>
    4b52:	cmp	r0, #0
    4b54:	beq.n	4b3a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!parsePathName(path, &fname, &path)) {
    4b56:	ldr	r1, [sp, #4]
    parent = &tmpDir;
    4b58:	add	r6, sp, #32
    4b5a:	b.n	4ac2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2a>
  return mkdir(parent, &fname);
    4b5c:	add	r2, sp, #12
    4b5e:	mov	r1, r6
    4b60:	mov	r0, r4
    4b62:	bl	4a38 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    4b66:	add	sp, #92	; 0x5c
    4b68:	pop	{r4, r5, r6, r7, pc}
    4b6a:	nop

00004b6c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                          uint8_t day, uint8_t hour, uint8_t minute,
                          uint8_t second) {
    4b6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b70:	mov	r6, r1
  uint16_t date;
  uint16_t time;
  uint8_t ms10;

  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4b72:	ldrb.w	r1, [r0, #49]	; 0x31
                          uint8_t second) {
    4b76:	sub	sp, #12
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4b78:	lsls	r1, r1, #28
                          uint8_t second) {
    4b7a:	ldrb.w	fp, [sp, #48]	; 0x30
    4b7e:	ldrb.w	r9, [sp, #52]	; 0x34
    4b82:	ldrb.w	r8, [sp, #56]	; 0x38
    4b86:	ldrb.w	r7, [sp, #60]	; 0x3c
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4b8a:	bpl.w	4c98 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
    4b8e:	subw	r2, r2, #1980	; 0x7bc
    4b92:	uxth	r4, r2
    4b94:	cmp	r4, #127	; 0x7f
    4b96:	bhi.n	4c98 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4b98:	subs	r2, r3, #1
    4b9a:	cmp	r2, #11
    4b9c:	bhi.n	4c98 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4b9e:	add.w	r2, fp, #4294967295
    4ba2:	cmp	r2, #30
    4ba4:	bhi.n	4c98 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4ba6:	cmp.w	r8, #59	; 0x3b
    4baa:	it	ls
    4bac:	cmpls.w	r9, #23
    4bb0:	ite	hi
    4bb2:	movhi.w	sl, #1
    4bb6:	movls.w	sl, #0
    4bba:	cmp	r7, #59	; 0x3b
    4bbc:	it	hi
    4bbe:	orrhi.w	sl, sl, #1
    4bc2:	cmp.w	sl, #0
    4bc6:	bne.n	4c98 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    4bc8:	mov	r5, r0
    4bca:	str	r3, [sp, #4]
    4bcc:	bl	4884 <ExFatFile::sync()>
    4bd0:	cmp	r0, #0
    4bd2:	beq.n	4c98 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4bd4:	ldr	r3, [sp, #4]
    4bd6:	mov	r1, sl
    4bd8:	orr.w	fp, fp, r3, lsl #5
             : hour << 11 | minute << 5 | second >> 1;
    4bdc:	lsrs	r3, r7, #1
    goto fail;
  }

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;
    4bde:	ands.w	r7, r7, #1
                                              : year << 9 | month << 5 | day;
    4be2:	orr.w	r4, fp, r4, lsl #9
  uint16_t checksum = 0;
    4be6:	mov	fp, sl
             : hour << 11 | minute << 5 | second >> 1;
    4be8:	orr.w	r8, r3, r8, lsl #5
  ms10 = second & 1 ? 100 : 0;
    4bec:	it	ne
    4bee:	movne	r7, #100	; 0x64
                                              : year << 9 | month << 5 | day;
    4bf0:	uxth	r4, r4
             : hour << 11 | minute << 5 | second >> 1;
    4bf2:	orr.w	r8, r8, r9, lsl #11
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        m_vol->dataCacheDirty();
        if (flags & T_ACCESS) {
    4bf6:	and.w	r9, r6, #1
    4bfa:	uxth.w	r8, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    4bfe:	movs	r2, #0
    4c00:	mov	r0, r5
    4c02:	bl	3770 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    4c06:	cmp	r0, #0
    4c08:	beq.n	4c98 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    switch (cache[0]) {
    4c0a:	ldrb.w	ip, [r0]
    4c0e:	cmp.w	ip, #133	; 0x85
    4c12:	beq.n	4ca0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    4c14:	add.w	r3, ip, #64	; 0x40
    4c18:	uxtb	r3, r3
    4c1a:	cmp	r3, #1
    4c1c:	bhi.n	4c98 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4c1e:	sub.w	r1, ip, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4c22:	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4c24:	clz	r1, r1
    4c28:	lsrs	r1, r1, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4c2a:	b.n	4c32 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc6>
    4c2c:	movs	r3, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4c2e:	ldrb.w	ip, [r0, r3]
    4c32:	mov.w	r2, fp, lsl #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4c36:	cmp	r3, #1
    4c38:	add.w	r3, r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4c3c:	orr.w	r2, r2, fp, lsr #1
    4c40:	uxtah	r2, ip, r2
    4c44:	uxth.w	fp, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4c48:	bne.n	4c4e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe2>
    4c4a:	cmp	r1, #0
    4c4c:	bne.n	4c2c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
    4c4e:	cmp	r3, #31
    4c50:	bls.n	4c2e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4c52:	add.w	sl, sl, #1
    4c56:	ldrb.w	r3, [r5, #48]	; 0x30
    4c5a:	uxtb.w	r1, sl
    4c5e:	cmp	r3, r1
    4c60:	bcs.n	4bfe <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x92>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4c62:	movs	r2, #1
    4c64:	add.w	r1, r5, #36	; 0x24
    4c68:	ldr	r0, [r5, #32]
    4c6a:	bl	4230 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4c6e:	cbz	r0, 4c98 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    4c70:	ldr	r4, [r5, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    4c72:	strh.w	fp, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4c76:	mov	r0, r4
    4c78:	bl	2de0 <FsCache::sync()>
    4c7c:	cbz	r0, 4c98 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4c7e:	add.w	r0, r4, #528	; 0x210
    4c82:	bl	2de0 <FsCache::sync()>
    4c86:	cbz	r0, 4c98 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4c88:	ldr.w	r0, [r4, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4c8c:	ldr	r3, [r0, #0]
    4c8e:	ldr	r3, [r3, #28]
  }
  return true;

fail:
  return false;
}
    4c90:	add	sp, #12
    4c92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c96:	bx	r3
    4c98:	movs	r0, #0
    4c9a:	add	sp, #12
    4c9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    4ca0:	ldrb.w	r3, [r5, #49]	; 0x31
        m_vol->dataCacheDirty();
    4ca4:	ldr	r2, [r5, #32]
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    4ca6:	and.w	r3, r3, #55	; 0x37
    4caa:	strh	r3, [r0, #4]
    4cac:	ldrb.w	r3, [r2, #528]	; 0x210
    4cb0:	orr.w	r3, r3, #1
    4cb4:	strb.w	r3, [r2, #528]	; 0x210
        if (flags & T_ACCESS) {
    4cb8:	cmp.w	r9, #0
    4cbc:	beq.n	4cc4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x158>
    4cbe:	strh.w	r8, [r0, #16]
    4cc2:	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    4cc4:	lsls	r2, r6, #30
    4cc6:	bpl.n	4cd0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
          df->createTimeMs = ms10;
    4cc8:	strb	r7, [r0, #20]
    4cca:	strh.w	r8, [r0, #8]
    4cce:	strh	r4, [r0, #10]
        if (flags & T_WRITE) {
    4cd0:	lsls	r3, r6, #29
    4cd2:	bpl.n	4cdc <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
          df->modifyTimeMs = ms10;
    4cd4:	strb	r7, [r0, #21]
    4cd6:	strh.w	r8, [r0, #12]
    4cda:	strh	r4, [r0, #14]
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4cdc:	ldrb.w	ip, [r0]
}
    4ce0:	b.n	4c1e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb2>
    4ce2:	nop

00004ce4 <ExFatFile::truncate()>:
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    4ce4:	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    4ce8:	lsls	r2, r3, #30
    4cea:	bpl.n	4db2 <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    4cec:	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    4cee:	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    4cf0:	sub	sp, #8
    4cf2:	mov	r4, r0
  if (m_firstCluster == 0) {
    4cf4:	cbz	r5, 4d60 <ExFatFile::truncate()+0x7c>
    return true;
  }
  if (isContiguous()) {
    4cf6:	ands.w	r6, r3, #64	; 0x40
    4cfa:	beq.n	4d66 <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4cfc:	ldr	r0, [r0, #32]
    4cfe:	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    4d00:	ldrb.w	ip, [r0, #1093]	; 0x445
    4d04:	subs	r2, #1
    4d06:	ldr	r1, [r4, #12]
    4d08:	add.w	ip, ip, #9
    4d0c:	adc.w	r1, r1, #4294967295
    4d10:	uxtb.w	ip, ip
    4d14:	rsb	lr, ip, #32
    4d18:	lsr.w	r2, r2, ip
    4d1c:	sub.w	ip, ip, #32
    4d20:	lsl.w	lr, r1, lr
    4d24:	lsr.w	ip, r1, ip
    if (m_curCluster) {
    4d28:	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4d2a:	orr.w	r2, r2, lr
    4d2e:	orr.w	r2, r2, ip
    4d32:	adds	r2, #1
    if (m_curCluster) {
    4d34:	cbz	r1, 4d7e <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    4d36:	subs	r5, #1
    4d38:	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    4d3a:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    4d3c:	add	r2, r5
      toFree = m_curCluster + 1;
    4d3e:	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4d40:	cbnz	r2, 4da0 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4d42:	orn	r3, r3, #127	; 0x7f
  return sync();
    4d46:	mov	r0, r4
  m_dataLength = m_curPosition;
    4d48:	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4d4c:	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    4d50:	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    4d54:	vstr	d7, [r4, #16]
  return sync();
    4d58:	bl	4884 <ExFatFile::sync()>

fail:
  return false;
}
    4d5c:	add	sp, #8
    4d5e:	pop	{r4, r5, r6, pc}
    return true;
    4d60:	movs	r0, #1
}
    4d62:	add	sp, #8
    4d64:	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    4d66:	ldr	r1, [r0, #24]
    4d68:	cbnz	r1, 4d84 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    4d6a:	str	r5, [sp, #4]
      m_firstCluster = 0;
    4d6c:	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    4d6e:	mov	r1, r5
    4d70:	ldr	r0, [r4, #32]
    4d72:	bl	4370 <ExFatPartition::freeChain(unsigned long)>
    4d76:	cbz	r0, 4dac <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4d78:	ldrb.w	r3, [r4, #51]	; 0x33
    4d7c:	b.n	4d42 <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    4d7e:	str	r5, [sp, #4]
      m_firstCluster = 0;
    4d80:	str	r1, [r4, #28]
    4d82:	b.n	4d40 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4d84:	add	r2, sp, #4
    4d86:	ldr	r0, [r0, #32]
      toFree = 0;
    4d88:	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4d8a:	bl	42ec <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    4d8e:	cmp	r0, #0
    4d90:	blt.n	4dac <ExFatFile::truncate()+0xc8>
      if (fg) {
    4d92:	bne.n	4db6 <ExFatFile::truncate()+0xd2>
    if (toFree) {
    4d94:	ldr	r5, [sp, #4]
    4d96:	cmp	r5, #0
    4d98:	bne.n	4d6e <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4d9a:	ldrb.w	r3, [r4, #51]	; 0x33
    4d9e:	b.n	4d42 <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4da0:	movs	r3, #0
    4da2:	ldr	r1, [sp, #4]
    4da4:	bl	4138 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4da8:	cmp	r0, #0
    4daa:	bne.n	4d78 <ExFatFile::truncate()+0x94>
  return false;
    4dac:	movs	r0, #0
}
    4dae:	add	sp, #8
    4db0:	pop	{r4, r5, r6, pc}
  return false;
    4db2:	movs	r0, #0
}
    4db4:	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    4db6:	mov.w	r2, #4294967295
    4dba:	ldr	r1, [r4, #24]
    4dbc:	ldr	r0, [r4, #32]
    4dbe:	bl	4330 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4dc2:	cmp	r0, #0
    4dc4:	bne.n	4d94 <ExFatFile::truncate()+0xb0>
    4dc6:	b.n	4dac <ExFatFile::truncate()+0xc8>

00004dc8 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    4dc8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4dcc:	ldrb.w	r3, [r0, #51]	; 0x33
    4dd0:	sub	sp, #12
    4dd2:	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    4dd4:	lsls	r5, r3, #30
    4dd6:	bpl.w	4f1c <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    4dda:	mov	r9, r2
    4ddc:	lsls	r2, r3, #28
    4dde:	mov	r6, r1
    4de0:	bmi.w	4f0e <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    4de4:	cmp.w	r9, #0
    4de8:	beq.w	503c <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    4dec:	ldr	r3, [r4, #0]
    4dee:	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4df0:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    4df2:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4df4:	ldr.w	r2, [r0, #1080]	; 0x438
    4df8:	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    4dfc:	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    4e00:	cmp.w	r8, #0
    4e04:	bne.w	4f30 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    4e08:	cmp	r1, #0
    4e0a:	beq.w	4fb6 <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    4e0e:	ldrb.w	r3, [r4, #51]	; 0x33
    4e12:	lsls	r3, r3, #25
    4e14:	bpl.w	4ff0 <ExFatFile::write(void const*, unsigned int)+0x228>
    4e18:	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    4e1c:	ldrd	r3, r2, [r4, #8]
    4e20:	add.w	ip, ip, #9
    4e24:	subs	r3, #1
    4e26:	uxtb.w	ip, ip
    4e2a:	adc.w	r2, r2, #4294967295
    4e2e:	rsb	lr, ip, #32
    4e32:	lsr.w	r3, r3, ip
    4e36:	sub.w	ip, ip, #32
    4e3a:	lsl.w	lr, r2, lr
    4e3e:	lsr.w	ip, r2, ip
    4e42:	ldr	r2, [r4, #28]
    4e44:	orr.w	r3, r3, lr
    4e48:	orr.w	r3, r3, ip
    4e4c:	add	r3, r2
          if (m_curCluster < lc) {
    4e4e:	cmp	r1, r3
    4e50:	bcs.w	4ffe <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    4e54:	adds	r1, #1
    4e56:	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    4e58:	ldrb.w	r2, [r0, #1093]	; 0x445
    4e5c:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    4e5e:	ldr.w	r3, [r0, #1068]	; 0x42c
    4e62:	lsls	r1, r2
    4e64:	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    4e66:	cmp.w	r5, #512	; 0x200
    4e6a:	bcc.w	4f82 <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
    4e6e:	cmp.w	r5, #1024	; 0x400
    4e72:	bcc.w	4fc2 <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    4e76:	movs	r3, #1
    4e78:	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    4e7a:	lsrs	r2, r5, #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    4e7c:	sub.w	r3, r3, r8
    4e80:	cmp	r3, r2
    4e82:	it	cs
    4e84:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    4e86:	ldr.w	r2, [r0, #536]	; 0x218
    4e8a:	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    4e8c:	mov.w	r8, r3, lsl #9
    4e90:	bcc.n	4ea6 <ExFatFile::write(void const*, unsigned int)+0xde>
    4e92:	adds	r7, r3, r1
    4e94:	cmp	r2, r7
    4e96:	bcs.n	4ea6 <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    4e98:	movs	r2, #0
    4e9a:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    4e9e:	mov.w	r2, #4294967295
    4ea2:	str.w	r2, [r0, #536]	; 0x218
    return m_blockDev->writeSectors(sector, src, count);
    4ea6:	ldr.w	r0, [r0, #532]	; 0x214
    4eaa:	mov	r2, r6
    4eac:	ldr	r7, [r0, #0]
    4eae:	ldr	r7, [r7, #36]	; 0x24
    4eb0:	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    4eb2:	cbz	r0, 4f1c <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    4eb4:	mov	r3, r8
    src += n;
    4eb6:	add	r6, r8
    toWrite -= n;
    4eb8:	sub.w	r5, r5, r8
    m_curPosition += n;
    4ebc:	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    4ec0:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    4ec4:	adds	r3, r3, r7
    4ec6:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    4eca:	cmp	r0, r3
    4ecc:	sbcs	r1, r2
    m_curPosition += n;
    4ece:	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    4ed2:	bcs.n	4ee4 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4ed4:	ldrb.w	r1, [r4, #51]	; 0x33
    4ed8:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    4edc:	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4ee0:	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    4ee4:	cmp	r5, #0
    4ee6:	bne.n	4df0 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    4ee8:	ldrd	r0, r1, [r4, #8]
    4eec:	cmp	r0, r3
    4eee:	sbcs	r1, r2
    4ef0:	bcc.w	5020 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    4ef4:	ldr	r3, [pc, #332]	; (5044 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    4ef6:	ldr	r3, [r3, #0]
    4ef8:	cmp	r3, #0
    4efa:	beq.w	5038 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4efe:	ldrb.w	r3, [r4, #51]	; 0x33
    4f02:	mov	r0, r9
    4f04:	orn	r3, r3, #127	; 0x7f
    4f08:	strb.w	r3, [r4, #51]	; 0x33
    4f0c:	b.n	4f2a <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    4f0e:	ldrd	r2, r3, [r0, #16]
    4f12:	bl	3a9c <ExFatFile::seekSet(unsigned long long)>
    4f16:	cmp	r0, #0
    4f18:	bne.w	4de4 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    4f1c:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    4f20:	movs	r0, #0
  m_error |= WRITE_ERROR;
    4f22:	orr.w	r3, r3, #1
    4f26:	strb.w	r3, [r4, #50]	; 0x32
}
    4f2a:	add	sp, #12
    4f2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    4f30:	ldrb.w	r2, [r0, #1093]	; 0x445
    4f34:	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    4f36:	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    4f3a:	ldr.w	r3, [r0, #1068]	; 0x42c
    4f3e:	lsls	r1, r2
    4f40:	add	r1, r8
    4f42:	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    4f44:	cmp	r7, #0
    4f46:	beq.n	4e66 <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    4f48:	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    4f4c:	movs	r2, #1
    4f4e:	add.w	r0, r0, #528	; 0x210
    4f52:	cmp	r8, r5
    4f54:	it	cs
    4f56:	movcs	r8, r5
    4f58:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    4f5c:	cmp	r0, #0
    4f5e:	beq.n	4f1c <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    4f60:	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4f62:	add	r7, r8
      memcpy(dst, src, n);
    4f64:	mov	r2, r8
    4f66:	mov	r1, r6
    4f68:	bl	9d30 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4f6c:	cmp.w	r7, #512	; 0x200
    4f70:	ldr	r0, [r4, #32]
    4f72:	bne.n	4eb4 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() { return m_dataCache.sync(); }
    4f74:	add.w	r0, r0, #528	; 0x210
    4f78:	bl	2de0 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    4f7c:	cmp	r0, #0
    4f7e:	bne.n	4eb4 <ExFatFile::write(void const*, unsigned int)+0xec>
    4f80:	b.n	4f1c <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    4f82:	ldr	r2, [r4, #4]
    4f84:	ldr	r3, [r4, #20]
    4f86:	str	r2, [sp, #0]
    4f88:	str	r3, [sp, #4]
    4f8a:	ldr	r2, [r4, #16]
    4f8c:	ldr	r3, [r4, #0]
    4f8e:	cmp	r3, r2
    4f90:	ldrd	r2, r3, [sp]
    4f94:	sbcs	r2, r3
    4f96:	bcs.n	4fbe <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    4f98:	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    4f9a:	add.w	r0, r0, #528	; 0x210
    4f9e:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    4fa2:	cmp	r0, #0
    4fa4:	beq.n	4f1c <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    4fa6:	mov	r2, r5
    4fa8:	mov	r1, r6
    4faa:	add	r0, r7
    m_curPosition += n;
    4fac:	mov	r8, r5
      memcpy(dst, src, n);
    4fae:	bl	9d30 <memcpy>
    m_curPosition += n;
    4fb2:	mov	r3, r5
    4fb4:	b.n	4eb6 <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    4fb6:	ldr	r1, [r4, #28]
    4fb8:	cbz	r1, 500e <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    4fba:	str	r1, [r4, #24]
    4fbc:	b.n	4e58 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    4fbe:	movs	r2, #5
    4fc0:	b.n	4f9a <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    4fc2:	ldr.w	r3, [r0, #536]	; 0x218
    4fc6:	cmp	r3, r1
    4fc8:	bne.n	4fd8 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    4fca:	movs	r3, #0
    4fcc:	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    4fd0:	mov.w	r3, #4294967295
    4fd4:	str.w	r3, [r0, #536]	; 0x218
    return m_blockDev->writeSector(sector, src);
    4fd8:	ldr.w	r0, [r0, #532]	; 0x214
    4fdc:	mov	r2, r6
    4fde:	ldr	r3, [r0, #0]
    4fe0:	ldr	r3, [r3, #32]
    4fe2:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    4fe4:	cmp	r0, #0
    4fe6:	beq.n	4f1c <ExFatFile::write(void const*, unsigned int)+0x154>
    4fe8:	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    4fec:	mov	r8, r3
    4fee:	b.n	4eb6 <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4ff0:	add.w	r2, r4, #24
    4ff4:	bl	42ec <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    4ff8:	cmp	r0, #0
    4ffa:	blt.n	4f1c <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    4ffc:	bne.n	5008 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    4ffe:	mov	r0, r4
    5000:	bl	45a4 <ExFatFile::addCluster()>
    5004:	cmp	r0, #0
    5006:	beq.n	4f1c <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    5008:	ldr	r1, [r4, #24]
    500a:	ldr	r0, [r4, #32]
    500c:	b.n	4e58 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    500e:	mov	r0, r4
    5010:	bl	45a4 <ExFatFile::addCluster()>
    5014:	cmp	r0, #0
    5016:	beq.n	4f1c <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    5018:	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    501a:	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    501c:	str	r1, [r4, #28]
    501e:	b.n	4e58 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5020:	ldrb.w	r1, [r4, #51]	; 0x33
    5024:	mov	r0, r9
    m_dataLength = m_curPosition;
    5026:	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    502a:	orn	r3, r1, #127	; 0x7f
    502e:	strb.w	r3, [r4, #51]	; 0x33
}
    5032:	add	sp, #12
    5034:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5038:	mov	r0, r9
    503a:	b.n	4f2a <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    503c:	ldrd	r3, r2, [r4]
    5040:	b.n	4ee8 <ExFatFile::write(void const*, unsigned int)+0x120>
    5042:	nop
    5044:	.word	0x20006104

00005048 <FatFormatter::initFatDir(unsigned char, unsigned long)>:
    writeMsg("Format Failed\r\n");
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    5048:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    504c:	mov	r5, r0
    504e:	mov	r9, r1
    5050:	mov	r7, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5052:	movs	r1, #0
    5054:	mov.w	r2, #512	; 0x200
    5058:	ldr	r0, [r0, #36]	; 0x24
    505a:	bl	dcd0 <memset>
  writeMsg("Writing FAT ");
    505e:	ldr	r0, [r5, #32]
    5060:	cmp	r0, #0
    5062:	beq.n	5108 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xc0>
    5064:	ldr	r3, [r0, #0]
    5066:	movs	r2, #12
    5068:	ldr	r1, [pc, #164]	; (5110 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xc8>)
    506a:	ldr	r3, [r3, #4]
    506c:	blx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    506e:	cmp	r7, #1
    5070:	bls.n	50b4 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x6c>
    if (!m_dev->writeSector(m_fatStart + i, m_secBuf)) {
      return false;
    }
    if ((i % (sectorCount / 32)) == 0) {
    5072:	lsrs	r6, r7, #5
    5074:	movs	r4, #1
    5076:	ldr.w	r8, [pc, #160]	; 5118 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xd0>
    507a:	b.n	509c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x54>
    507c:	udiv	r3, r4, r6
    5080:	mls	r3, r6, r3, r4
  for (uint32_t i = 1; i < sectorCount; i++) {
    5084:	adds	r4, #1
    if ((i % (sectorCount / 32)) == 0) {
    5086:	cbnz	r3, 5098 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x50>
      writeMsg(".");
    5088:	ldr	r3, [r5, #32]
    508a:	movs	r2, #1
    508c:	mov	r1, r8
    508e:	mov	r0, r3
    5090:	cbz	r3, 5098 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x50>
    5092:	ldr	r3, [r3, #0]
    5094:	ldr	r3, [r3, #4]
    5096:	blx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    5098:	cmp	r7, r4
    509a:	bls.n	50b4 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x6c>
    if (!m_dev->writeSector(m_fatStart + i, m_secBuf)) {
    509c:	ldr	r0, [r5, #28]
    509e:	ldr	r1, [r5, #12]
    50a0:	ldr	r3, [r0, #0]
    50a2:	ldr	r2, [r5, #36]	; 0x24
    50a4:	add	r1, r4
    50a6:	ldr	r3, [r3, #32]
    50a8:	blx	r3
    50aa:	cmp	r0, #0
    50ac:	bne.n	507c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x34>
  for (size_t i = 1; i < n; i++) {
    m_secBuf[i] = 0XFF;
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
}
    50ae:	movs	r0, #0
    50b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  writeMsg("\r\n");
    50b4:	ldr	r0, [r5, #32]
    50b6:	cbz	r0, 50c2 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x7a>
    50b8:	ldr	r3, [r0, #0]
    50ba:	movs	r2, #2
    50bc:	ldr	r1, [pc, #84]	; (5114 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xcc>)
    50be:	ldr	r3, [r3, #4]
    50c0:	blx	r3
  n = fatType == 16 ? 4 : 12;
    50c2:	cmp.w	r9, #16
  m_secBuf[0] = 0XF8;
    50c6:	mov.w	r1, #248	; 0xf8
    50ca:	ldr	r2, [r5, #36]	; 0x24
  for (size_t i = 1; i < n; i++) {
    50cc:	mov.w	r3, #1
  n = fatType == 16 ? 4 : 12;
    50d0:	ite	eq
    50d2:	moveq	r0, #4
    50d4:	movne	r0, #12
  m_secBuf[0] = 0XF8;
    50d6:	strb	r1, [r2, #0]
    m_secBuf[i] = 0XFF;
    50d8:	movs	r1, #255	; 0xff
    50da:	ldr	r2, [r5, #36]	; 0x24
    50dc:	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
    50de:	adds	r3, #1
    50e0:	cmp	r0, r3
    50e2:	bne.n	50da <FatFormatter::initFatDir(unsigned char, unsigned long)+0x92>
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    50e4:	ldr	r0, [r5, #28]
    50e6:	ldr	r2, [r5, #36]	; 0x24
    50e8:	ldr	r3, [r0, #0]
    50ea:	ldr	r1, [r5, #12]
    50ec:	ldr	r3, [r3, #32]
    50ee:	blx	r3
    50f0:	cmp	r0, #0
    50f2:	beq.n	50ae <FatFormatter::initFatDir(unsigned char, unsigned long)+0x66>
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    50f4:	ldr	r0, [r5, #28]
    50f6:	ldr	r2, [r5, #36]	; 0x24
    50f8:	ldrd	r3, r1, [r5, #8]
}
    50fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    5100:	add	r1, r3
    5102:	ldr	r3, [r0, #0]
    5104:	ldr	r3, [r3, #32]
    5106:	bx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    5108:	cmp	r7, #1
    510a:	bhi.n	5072 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x2a>
    510c:	b.n	50c2 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x7a>
    510e:	nop
    5110:	.word	0x200007e0
    5114:	.word	0x20000808
    5118:	.word	0x200007f0

0000511c <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    511c:	push	{r3, r4, r5, lr}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    511e:	ldr	r3, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5120:	mov.w	r5, #512	; 0x200
void FatFormatter::initPbs() {
    5124:	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5126:	movs	r1, #0
    5128:	mov	r2, r5
    512a:	mov	r0, r3
    512c:	bl	dcd0 <memset>
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    5130:	mov.w	r1, #538976288	; 0x20202020
  pbs->jmpInstruction[0] = 0XEB;
    5134:	movs	r2, #235	; 0xeb
  *reinterpret_cast<uint16_t*>(dst) = src;
    5136:	strh.w	r5, [r0, #11]
    pbs->oemName[i] = ' ';
    513a:	str.w	r1, [r0, #3]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    513e:	mov	r3, r0
    pbs->oemName[i] = ' ';
    5140:	str.w	r1, [r0, #7]
  pbs->jmpInstruction[2] = 0X90;
    5144:	movs	r1, #144	; 0x90
  pbs->jmpInstruction[0] = 0XEB;
    5146:	strb	r2, [r0, #0]
  pbs->jmpInstruction[1] = 0X76;
    5148:	movs	r0, #118	; 0x76
  pbs->jmpInstruction[2] = 0X90;
    514a:	strb	r1, [r3, #2]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
  pbs->bpb.bpb16.fatCount = 2;
    514c:	movs	r2, #2
  pbs->jmpInstruction[1] = 0X76;
    514e:	strb	r0, [r3, #1]
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    5150:	ldrb.w	r1, [r4, #43]	; 0x2b
    5154:	strb	r1, [r3, #13]
    5156:	movw	r1, #43605	; 0xaa55
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    515a:	ldrh	r0, [r4, #40]	; 0x28
  pbs->bpb.bpb16.fatCount = 2;
    515c:	strb	r2, [r3, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    515e:	movs	r2, #248	; 0xf8
    5160:	strh	r0, [r3, #14]
    5162:	strb	r2, [r3, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    5164:	ldr	r2, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5166:	str	r2, [r3, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    5168:	ldr	r2, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    516a:	strh.w	r1, [r3, #510]	; 0x1fe
  *reinterpret_cast<uint32_t*>(dst) = src;
    516e:	str	r2, [r3, #32]
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
    5170:	pop	{r3, r4, r5, pc}
    5172:	nop

00005174 <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    5174:	push	{r4, r5, r6, lr}
    5176:	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5178:	mov.w	r2, #512	; 0x200
    517c:	movs	r1, #0
    517e:	ldr	r0, [r0, #36]	; 0x24
    5180:	bl	dcd0 <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    5184:	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    5186:	ldr	r2, [r4, #16]
    5188:	ldr	r1, [r4, #0]
    518a:	addw	r0, r5, #447	; 0x1bf
    518e:	bl	2d40 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors - 1);
    5192:	ldr	r3, [r4, #24]
    5194:	ldr	r2, [r4, #16]
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    5196:	addw	r0, r5, #451	; 0x1c3
    519a:	ldr	r1, [r4, #0]
              m_relativeSectors + m_totalSectors - 1);
    519c:	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    519e:	subs	r2, #1
    51a0:	bl	2d40 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    51a4:	ldrb.w	r2, [r4, #42]	; 0x2a
  *reinterpret_cast<uint16_t*>(dst) = src;
    51a8:	movw	r3, #43605	; 0xaa55
    51ac:	strb.w	r2, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    51b0:	ldr	r2, [r4, #16]
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    51b2:	ldr	r0, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    51b4:	str.w	r2, [r5, #454]	; 0x1c6
    51b8:	ldr	r2, [r4, #36]	; 0x24
  setLe32(mbr->part->totalSectors, m_totalSectors);
    51ba:	ldr	r1, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    51bc:	strh.w	r3, [r5, #510]	; 0x1fe
  return m_dev->writeSector(0, m_secBuf);
    51c0:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    51c2:	str.w	r1, [r5, #458]	; 0x1ca
    51c6:	movs	r1, #0
    51c8:	ldr	r3, [r3, #32]
}
    51ca:	ldmia.w	sp!, {r4, r5, r6, lr}
  return m_dev->writeSector(0, m_secBuf);
    51ce:	bx	r3

000051d0 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    51d0:	push	{r4, r5, r6, lr}
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    51d2:	ldr	r6, [r0, #20]
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    51d4:	mov.w	r3, #256	; 0x100
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    51d8:	ldrb.w	lr, [r0, #43]	; 0x2b
bool FatFormatter::makeFat16() {
    51dc:	mov	r4, r0
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    51de:	sub.w	r2, r6, #256	; 0x100
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    51e2:	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    51e4:	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    51e6:	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    51ea:	addw	ip, r2, #257	; 0x101
    51ee:	mov.w	r1, ip, lsr #8
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    51f2:	mov.w	ip, r1, lsl #1
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    51f6:	str	r1, [r0, #8]
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    51f8:	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    51fc:	cmp	r0, r3
    51fe:	bls.n	521e <FatFormatter::makeFat16()+0x4e>
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    5200:	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5202:	subs	r2, r6, r3
    5204:	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    5208:	addw	r1, r2, #257	; 0x101
    520c:	lsrs	r1, r1, #8
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    520e:	mov.w	ip, r1, lsl #1
    5212:	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    5216:	cmp	r3, r0
    5218:	bcc.n	5200 <FatFormatter::makeFat16()+0x30>
    521a:	strd	r3, r1, [r4, #4]
      m_relativeSectors = m_dataStart - r + BU16;
    521e:	subs	r3, r3, r0
  if (nc < 4085 || nc >= 65525) {
    5220:	subw	r1, r2, #4085	; 0xff5
      m_relativeSectors = m_dataStart - r + BU16;
    5224:	add.w	r0, r3, #128	; 0x80
  if (nc < 4085 || nc >= 65525) {
    5228:	cmp.w	r1, #61440	; 0xf000
      m_relativeSectors = m_dataStart - r + BU16;
    522c:	str	r0, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    522e:	bcs.n	52d0 <FatFormatter::makeFat16()+0x100>
      nc * m_sectorsPerCluster + 2 * m_fatSize + m_reservedSectorCount + 32;
    5230:	add.w	ip, ip, #33	; 0x21
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    5234:	adds	r3, #129	; 0x81
  if (!writeMbr()) {
    5236:	mov	r0, r4
      nc * m_sectorsPerCluster + 2 * m_fatSize + m_reservedSectorCount + 32;
    5238:	mla	r2, r2, lr, ip
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    523c:	str	r3, [r4, #12]
    m_partType = 0X06;
    523e:	cmp.w	r2, #65536	; 0x10000
  m_totalSectors =
    5242:	str	r2, [r4, #24]
    m_partType = 0X06;
    5244:	ite	cc
    5246:	movcc	r3, #4
    5248:	movcs	r3, #6
    524a:	strb.w	r3, [r4, #42]	; 0x2a
  m_reservedSectorCount = 1;
    524e:	movs	r3, #1
    5250:	strh	r3, [r4, #40]	; 0x28
  if (!writeMbr()) {
    5252:	bl	5174 <FatFormatter::writeMbr()>
    5256:	cbnz	r0, 525c <FatFormatter::makeFat16()+0x8c>
}
    5258:	movs	r0, #0
    525a:	pop	{r4, r5, r6, pc}
  initPbs();
    525c:	mov	r0, r4
    525e:	bl	511c <FatFormatter::initPbs()>
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    5262:	movs	r2, #41	; 0x29
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    5264:	ldr	r1, [r4, #8]
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    5266:	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    526a:	strb.w	r2, [r5, #38]	; 0x26
  pbs->bpb.bpb16.volumeType[0] = 'F';
    526e:	movs	r2, #70	; 0x46
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    5270:	str.w	r3, [r5, #47]	; 0x2f
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    5274:	movs	r0, #128	; 0x80
  pbs->bpb.bpb16.volumeType[0] = 'F';
    5276:	strb.w	r2, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[2] = 'T';
    527a:	movs	r2, #84	; 0x54
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    527c:	str.w	r3, [r5, #43]	; 0x2b
    5280:	str.w	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb16.volumeType[3] = '1';
    5284:	movs	r3, #49	; 0x31
  pbs->bpb.bpb16.volumeType[2] = 'T';
    5286:	strb.w	r2, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[4] = '6';
    528a:	movs	r2, #54	; 0x36
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    528c:	strh	r1, [r5, #22]
  pbs->bpb.bpb16.volumeType[1] = 'A';
    528e:	movs	r1, #65	; 0x41
  pbs->bpb.bpb16.volumeType[3] = '1';
    5290:	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[1] = 'A';
    5294:	strb.w	r1, [r5, #55]	; 0x37
  *reinterpret_cast<uint16_t*>(dst) = src;
    5298:	mov.w	r1, #512	; 0x200
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    529c:	strb.w	r0, [r5, #36]	; 0x24
  pbs->bpb.bpb16.volumeType[4] = '6';
    52a0:	strb.w	r2, [r5, #58]	; 0x3a
  *reinterpret_cast<uint32_t*>(dst) = src;
    52a4:	ldr	r3, [pc, #60]	; (52e4 <FatFormatter::makeFat16()+0x114>)
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    52a6:	ldr	r0, [r4, #28]
    52a8:	str.w	r3, [r5, #39]	; 0x27
    52ac:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint16_t*>(dst) = src;
    52ae:	strh.w	r1, [r5, #17]
    52b2:	ldr	r2, [r4, #36]	; 0x24
    52b4:	ldr	r1, [r4, #16]
    52b6:	ldr	r3, [r3, #32]
    52b8:	blx	r3
    52ba:	cmp	r0, #0
    52bc:	beq.n	5258 <FatFormatter::makeFat16()+0x88>
  return initFatDir(16, m_dataStart - m_fatStart);
    52be:	ldr	r2, [r4, #4]
    52c0:	mov	r0, r4
    52c2:	ldr	r3, [r4, #12]
    52c4:	movs	r1, #16
    52c6:	subs	r2, r2, r3
}
    52c8:	ldmia.w	sp!, {r4, r5, r6, lr}
  return initFatDir(16, m_dataStart - m_fatStart);
    52cc:	b.w	5048 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    52d0:	ldr	r0, [r4, #32]
    52d2:	cmp	r0, #0
    52d4:	beq.n	5258 <FatFormatter::makeFat16()+0x88>
    52d6:	ldr	r3, [r0, #0]
    52d8:	movs	r2, #19
    52da:	ldr	r1, [pc, #12]	; (52e8 <FatFormatter::makeFat16()+0x118>)
    52dc:	ldr	r3, [r3, #4]
    52de:	blx	r3
}
    52e0:	movs	r0, #0
    52e2:	pop	{r4, r5, r6, pc}
    52e4:	.word	0x0012d687
    52e8:	.word	0x200007b4

000052ec <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    52ec:	push	{r3, r4, r5, r6, r7, lr}
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    52ee:	ldr	r6, [r0, #20]
  m_relativeSectors = BU32;
    52f0:	mov.w	r3, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    52f4:	ldrb.w	ip, [r0, #43]	; 0x2b
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    52f8:	mov.w	r2, #16384	; 0x4000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    52fc:	sub.w	r1, r6, #16384	; 0x4000
  m_relativeSectors = BU32;
    5300:	str	r3, [r0, #16]
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    5302:	movw	lr, #8201	; 0x2009
bool FatFormatter::makeFat32() {
    5306:	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    5308:	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    530a:	str	r2, [r0, #4]
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    530c:	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 4) - 1) / (BYTES_PER_SECTOR / 4);
    5310:	add.w	r3, r1, #129	; 0x81
    5314:	lsrs	r3, r3, #7
    5316:	str	r3, [r0, #8]
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    5318:	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
    531c:	cmp	r0, r2
    531e:	bls.w	548e <FatFormatter::makeFat32()+0x1a2>
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    5322:	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5326:	subs	r1, r6, r2
    5328:	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 4) - 1) / (BYTES_PER_SECTOR / 4);
    532c:	add.w	r3, r1, #129	; 0x81
    5330:	lsrs	r3, r3, #7
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    5332:	add.w	r0, lr, r3, lsl #1
    5336:	lsls	r7, r3, #1
    if (m_dataStart >= r) {
    5338:	cmp	r2, r0
    533a:	bcc.n	5322 <FatFormatter::makeFat32()+0x36>
    533c:	strd	r2, r3, [r4, #4]
  if (nc < 65525) {
    5340:	movw	r3, #65524	; 0xfff4
    5344:	cmp	r1, r3
    5346:	bls.w	5478 <FatFormatter::makeFat32()+0x18c>
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    534a:	mla	ip, r1, ip, r2
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    534e:	sub.w	r2, r2, #8192	; 0x2000
  if (!writeMbr()) {
    5352:	mov	r0, r4
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    5354:	subs	r2, r2, r7
    5356:	uxth	r2, r2
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    5358:	add.w	r3, r2, #8192	; 0x2000
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    535c:	strh	r2, [r4, #40]	; 0x28
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    535e:	ldr	r2, [pc, #308]	; (5494 <FatFormatter::makeFat32()+0x1a8>)
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    5360:	str	r3, [r4, #12]
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    5362:	sub.w	r3, ip, #8192	; 0x2000
    m_partType = 0X0C;
    5366:	cmp	ip, r2
    5368:	ite	ls
    536a:	movls.w	ip, #11
    536e:	movhi.w	ip, #12
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    5372:	str	r3, [r4, #24]
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    5374:	strb.w	ip, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    5378:	bl	5174 <FatFormatter::writeMbr()>
    537c:	cbnz	r0, 5382 <FatFormatter::makeFat32()+0x96>
}
    537e:	movs	r0, #0
    5380:	pop	{r3, r4, r5, r6, r7, pc}
  initPbs();
    5382:	mov	r0, r4
    5384:	bl	511c <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    5388:	ldr	r1, [r4, #8]
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    538a:	movs	r2, #41	; 0x29
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    538c:	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    5390:	movs	r0, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    5392:	str	r1, [r5, #36]	; 0x24
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    5394:	strb.w	r2, [r5, #66]	; 0x42
  pbs->bpb.bpb32.volumeType[2] = 'T';
    5398:	movs	r1, #84	; 0x54
  pbs->bpb.bpb32.volumeType[0] = 'F';
    539a:	movs	r2, #70	; 0x46
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    539c:	str.w	r3, [r5, #75]	; 0x4b
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    53a0:	strb.w	r0, [r5, #64]	; 0x40
  pbs->bpb.bpb32.volumeType[1] = 'A';
    53a4:	movs	r0, #65	; 0x41
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    53a6:	str.w	r3, [r5, #71]	; 0x47
    53aa:	str.w	r3, [r5, #78]	; 0x4e
    53ae:	movs	r3, #2
  pbs->bpb.bpb32.volumeType[0] = 'F';
    53b0:	strb.w	r2, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[3] = '3';
    53b4:	movs	r2, #51	; 0x33
  pbs->bpb.bpb32.volumeType[2] = 'T';
    53b6:	strb.w	r1, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[4] = '2';
    53ba:	movs	r1, #50	; 0x32
  pbs->bpb.bpb32.volumeType[3] = '3';
    53bc:	strb.w	r2, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[1] = 'A';
    53c0:	strb.w	r0, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[4] = '2';
    53c4:	strb.w	r1, [r5, #86]	; 0x56
    53c8:	str	r3, [r5, #44]	; 0x2c
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf) ||
    53ca:	ldr	r0, [r4, #28]
  *reinterpret_cast<uint16_t*>(dst) = src;
    53cc:	ldr	r3, [pc, #200]	; (5498 <FatFormatter::makeFat32()+0x1ac>)
  *reinterpret_cast<uint32_t*>(dst) = src;
    53ce:	ldr	r2, [pc, #204]	; (549c <FatFormatter::makeFat32()+0x1b0>)
  *reinterpret_cast<uint16_t*>(dst) = src;
    53d0:	str	r3, [r5, #48]	; 0x30
    53d2:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    53d4:	str.w	r2, [r5, #67]	; 0x43
    53d8:	ldr	r3, [r3, #32]
    53da:	ldr	r2, [r4, #36]	; 0x24
    53dc:	ldr	r1, [r4, #16]
    53de:	blx	r3
    53e0:	cmp	r0, #0
    53e2:	beq.n	537e <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    53e4:	ldr	r0, [r4, #28]
    53e6:	ldr	r1, [r4, #16]
    53e8:	ldr	r3, [r0, #0]
    53ea:	adds	r1, #6
    53ec:	ldr	r2, [r4, #36]	; 0x24
    53ee:	ldr	r3, [r3, #32]
    53f0:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf) ||
    53f2:	cmp	r0, #0
    53f4:	beq.n	537e <FatFormatter::makeFat32()+0x92>
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    53f6:	mov.w	r2, #512	; 0x200
    53fa:	movs	r1, #0
    53fc:	ldr	r0, [r4, #36]	; 0x24
    53fe:	bl	dcd0 <memset>
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf) ||
    5402:	ldr	r0, [r4, #28]
    5404:	ldr	r2, [pc, #152]	; (54a0 <FatFormatter::makeFat32()+0x1b4>)
    5406:	ldr	r3, [r0, #0]
    5408:	str.w	r2, [r5, #508]	; 0x1fc
    540c:	ldr	r1, [r4, #16]
    540e:	ldr	r3, [r3, #32]
    5410:	adds	r1, #2
    5412:	ldr	r2, [r4, #36]	; 0x24
    5414:	blx	r3
    5416:	cmp	r0, #0
    5418:	beq.n	537e <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    541a:	ldr	r0, [r4, #28]
    541c:	ldr	r1, [r4, #16]
    541e:	ldr	r3, [r0, #0]
    5420:	adds	r1, #8
    5422:	ldr	r2, [r4, #36]	; 0x24
    5424:	ldr	r3, [r3, #32]
    5426:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf) ||
    5428:	cmp	r0, #0
    542a:	beq.n	537e <FatFormatter::makeFat32()+0x92>
    542c:	mov.w	r3, #4294967295
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf) ||
    5430:	ldr	r0, [r4, #28]
    5432:	ldr	r2, [pc, #112]	; (54a4 <FatFormatter::makeFat32()+0x1b8>)
    5434:	strd	r3, r3, [r5, #488]	; 0x1e8
    5438:	ldr	r3, [pc, #108]	; (54a8 <FatFormatter::makeFat32()+0x1bc>)
    543a:	str	r2, [r5, #0]
    543c:	str.w	r3, [r5, #484]	; 0x1e4
    5440:	ldr	r3, [r0, #0]
    5442:	ldr	r1, [r4, #16]
    5444:	ldr	r2, [r4, #36]	; 0x24
    5446:	ldr	r3, [r3, #32]
    5448:	adds	r1, #1
    544a:	blx	r3
    544c:	cmp	r0, #0
    544e:	beq.n	537e <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    5450:	ldr	r0, [r4, #28]
    5452:	ldr	r1, [r4, #16]
    5454:	ldr	r3, [r0, #0]
    5456:	ldr	r2, [r4, #36]	; 0x24
    5458:	adds	r1, #7
    545a:	ldr	r3, [r3, #32]
    545c:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf) ||
    545e:	cmp	r0, #0
    5460:	beq.n	537e <FatFormatter::makeFat32()+0x92>
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
    5462:	ldr	r2, [r4, #8]
    5464:	mov	r0, r4
    5466:	ldrb.w	r3, [r4, #43]	; 0x2b
    546a:	movs	r1, #32
    546c:	add.w	r2, r3, r2, lsl #1
}
    5470:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
    5474:	b.w	5048 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    5478:	ldr	r0, [r4, #32]
    547a:	cmp	r0, #0
    547c:	beq.w	537e <FatFormatter::makeFat32()+0x92>
    5480:	ldr	r3, [r0, #0]
    5482:	movs	r2, #19
    5484:	ldr	r1, [pc, #36]	; (54ac <FatFormatter::makeFat32()+0x1c0>)
    5486:	ldr	r3, [r3, #4]
    5488:	blx	r3
}
    548a:	movs	r0, #0
    548c:	pop	{r3, r4, r5, r6, r7, pc}
    548e:	lsls	r7, r3, #1
    5490:	b.n	5340 <FatFormatter::makeFat32()+0x54>
    5492:	nop
    5494:	.word	0x00fb0400
    5498:	.word	0x00060001
    549c:	.word	0x0012d687
    54a0:	.word	0xaa550000
    54a4:	.word	0x41615252
    54a8:	.word	0x61417272
    54ac:	.word	0x200007b4

000054b0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    54b0:	push	{r3, r4, r5, lr}
    54b2:	mov	r4, r0
  m_sectorCount = m_dev->sectorCount();
    54b4:	ldr	r5, [r1, #0]
  m_dev = dev;
    54b6:	str	r1, [r0, #28]
  m_sectorCount = m_dev->sectorCount();
    54b8:	mov	r0, r1
  m_secBuf = secBuf;
    54ba:	str	r2, [r4, #36]	; 0x24
  m_sectorCount = m_dev->sectorCount();
    54bc:	ldr	r2, [r5, #24]
  m_pr = pr;
    54be:	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    54c0:	blx	r2
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    54c2:	addw	r3, r0, #2047	; 0x7ff
  m_sectorCount = m_dev->sectorCount();
    54c6:	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    54c8:	lsrs	r3, r3, #11
  if (m_capacityMB <= 6) {
    54ca:	cmp	r3, #6
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    54cc:	str	r3, [r4, #0]
  if (m_capacityMB <= 6) {
    54ce:	bls.n	551a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  } else if (m_capacityMB <= 16) {
    54d0:	cmp	r3, #16
    54d2:	bhi.n	54fc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c>
    54d4:	movs	r3, #2
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    54d6:	cmp.w	r0, #4194304	; 0x400000
    m_sectorsPerCluster = 2;
    54da:	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    54de:	mov	r0, r4
    54e0:	bcs.n	5540 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
    54e2:	bl	51d0 <FatFormatter::makeFat16()>
    54e6:	mov	r5, r0
    writeMsg("Format Done\r\n");
    54e8:	ldr	r0, [r4, #32]
  if (rtn) {
    54ea:	cbz	r5, 552e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7e>
    writeMsg("Format Done\r\n");
    54ec:	cbz	r0, 54f8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48>
    54ee:	ldr	r3, [r0, #0]
    54f0:	movs	r2, #13
    54f2:	ldr	r1, [pc, #100]	; (5558 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa8>)
    54f4:	ldr	r3, [r3, #4]
    54f6:	blx	r3
}
    54f8:	mov	r0, r5
    54fa:	pop	{r3, r4, r5, pc}
  } else if (m_capacityMB <= 32) {
    54fc:	cmp	r3, #32
    54fe:	bls.n	5548 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x98>
  } else if (m_capacityMB <= 64) {
    5500:	cmp	r3, #64	; 0x40
    5502:	bls.n	554c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9c>
  } else if (m_capacityMB <= 128) {
    5504:	cmp	r3, #128	; 0x80
    5506:	bls.n	5550 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa0>
  } else if (m_capacityMB <= 1024) {
    5508:	cmp.w	r3, #1024	; 0x400
    550c:	bls.n	5554 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa4>
  } else if (m_capacityMB <= 32768) {
    550e:	cmp.w	r3, #32768	; 0x8000
    5512:	ite	hi
    5514:	movhi	r3, #128	; 0x80
    5516:	movls	r3, #64	; 0x40
    5518:	b.n	54d6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    writeMsg("Card is too small.\r\n");
    551a:	ldr	r0, [r4, #32]
    551c:	cbz	r0, 5528 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    551e:	ldr	r3, [r0, #0]
    5520:	movs	r2, #20
    5522:	ldr	r1, [pc, #56]	; (555c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xac>)
    5524:	ldr	r3, [r3, #4]
    5526:	blx	r3
    return false;
    5528:	movs	r5, #0
}
    552a:	mov	r0, r5
    552c:	pop	{r3, r4, r5, pc}
    writeMsg("Format Failed\r\n");
    552e:	cmp	r0, #0
    5530:	beq.n	5528 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    5532:	ldr	r3, [r0, #0]
    5534:	movs	r2, #15
    5536:	ldr	r1, [pc, #40]	; (5560 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb0>)
    5538:	ldr	r3, [r3, #4]
    553a:	blx	r3
}
    553c:	mov	r0, r5
    553e:	pop	{r3, r4, r5, pc}
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    5540:	bl	52ec <FatFormatter::makeFat32()>
    5544:	mov	r5, r0
    5546:	b.n	54e8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x38>
    5548:	movs	r3, #4
    554a:	b.n	54d6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    554c:	movs	r3, #8
    554e:	b.n	54d6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    5550:	movs	r3, #16
    5552:	b.n	54d6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    5554:	movs	r3, #32
    5556:	b.n	54d6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    5558:	.word	0x20000794
    555c:	.word	0x2000077c
    5560:	.word	0x200007a4

00005564 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    5564:	cmp	r2, #4
    5566:	bhi.n	5572 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    5568:	add.w	r2, r1, r2, lsl #1
    556c:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2 * i);
    5570:	bx	lr
  } else if (i < 11) {
    5572:	cmp	r2, #10
    5574:	bhi.n	557e <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    5576:	add.w	r2, r1, r2, lsl #1
    557a:	ldrh	r0, [r2, #4]
    return getLe16(ldir->unicode2 + 2 * (i - 5));
    557c:	bx	lr
  } else if (i < 13) {
    557e:	cmp	r2, #12
    5580:	bhi.n	558a <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    5582:	add.w	r1, r1, r2, lsl #1
    5586:	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
    5588:	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    558a:	movs	r0, #0
}
    558c:	bx	lr
    558e:	nop

00005590 <FatFile::getSFN(char*, unsigned int)>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    5590:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const { return m_attributes; }
    5592:	ldrb	r4, [r0, #0]
    5594:	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    5596:	cbz	r4, 55b8 <FatFile::getSFN(char*, unsigned int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    5598:	ands.w	r4, r4, #192	; 0xc0
    559c:	mov	r7, r2
    559e:	beq.n	55b0 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    55a0:	cmp	r2, #1
    55a2:	bls.n	55b8 <FatFile::getSFN(char*, unsigned int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    55a4:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    55a6:	movs	r3, #0
    return 1;
    55a8:	movs	r0, #1
    name[0] = '/';
    55aa:	strb	r2, [r1, #0]
    name[1] = '\0';
    55ac:	strb	r3, [r1, #1]
  return j;

fail:
  name[0] = '\0';
  return 0;
}
    55ae:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    55b0:	mov	r1, r4
    55b2:	bl	5874 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    55b6:	cbnz	r0, 55c0 <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
    55b8:	movs	r3, #0
  return 0;
    55ba:	mov	r0, r3
  name[0] = '\0';
    55bc:	strb	r3, [r6, #0]
}
    55be:	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
    55c0:	mov	r3, r0
    55c2:	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    55c4:	movs	r1, #8
    55c6:	b.n	55ec <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    55c8:	ldrb	r2, [r0, #12]
    55ca:	tst	r1, r2
    55cc:	beq.n	55d6 <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
    55ce:	add.w	lr, lr, #32
    55d2:	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
    55d6:	adds	r5, r4, #1
    55d8:	cmp	r5, r7
    55da:	bcs.n	55b8 <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
    55dc:	add.w	ip, ip, #1
    name[j++] = c;
    55e0:	strb.w	lr, [r6, r4]
    55e4:	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
    55e6:	cmp.w	ip, #12
    55ea:	beq.n	560e <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
    55ec:	cmp.w	ip, #8
    55f0:	beq.n	5616 <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
    55f2:	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    55f6:	sub.w	r2, lr, #65	; 0x41
    55fa:	cmp	r2, #25
    55fc:	bls.n	55c8 <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
    55fe:	cmp.w	lr, #32
    5602:	bne.n	55d6 <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
    5604:	add.w	ip, ip, #1
    5608:	cmp.w	ip, #12
    560c:	bne.n	55ec <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
    560e:	movs	r3, #0
    5610:	mov	r0, r4
    5612:	strb	r3, [r6, r4]
}
    5614:	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
    5616:	ldrb	r2, [r3, #0]
    5618:	cmp	r2, #32
    561a:	beq.n	560e <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
    561c:	movs	r1, #16
      c = '.';
    561e:	mov.w	lr, #46	; 0x2e
    5622:	b.n	55d6 <FatFile::getSFN(char*, unsigned int)+0x46>

00005624 <FatFile::getName7(char*, unsigned int)>:
size_t FatFile::getName7(char* name, size_t size) {
    5624:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile() {}
    5628:	movs	r5, #0
    562a:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    562c:	ldrb	r3, [r0, #0]
size_t FatFile::getName7(char* name, size_t size) {
    562e:	mov	r8, r1
    5630:	str	r5, [sp, #4]
  if (!isOpen()) {
    5632:	cmp	r3, #0
    5634:	beq.n	56d8 <FatFile::getName7(char*, unsigned int)+0xb4>
  if (!isLFN()) {
    5636:	ldrb	r3, [r0, #3]
    5638:	mov	r6, r0
    563a:	cmp	r3, #0
    563c:	beq.n	56e8 <FatFile::getName7(char*, unsigned int)+0xc4>
  if (!dir.openCluster(this)) {
    563e:	mov	r1, r0
    5640:	add	r0, sp, #4
    5642:	mov	r7, r2
    5644:	bl	5ca0 <FatFile::openCluster(FatFile*)>
    5648:	cmp	r0, #0
    564a:	beq.n	56d8 <FatFile::getName7(char*, unsigned int)+0xb4>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    564c:	ldrb	r3, [r6, #3]
    564e:	cmp	r3, #0
    5650:	beq.n	5704 <FatFile::getName7(char*, unsigned int)+0xe0>
    5652:	mov.w	r9, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    5656:	ldrh	r1, [r6, #4]
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    5658:	add	r0, sp, #4
    565a:	sub.w	r1, r1, r9
    565e:	uxth	r1, r1
    5660:	lsls	r1, r1, #5
    5662:	bl	61c0 <FatFile::seekSet(unsigned long)>
    5666:	cbz	r0, 56d8 <FatFile::getName7(char*, unsigned int)+0xb4>
    5668:	movs	r1, #0
    566a:	add	r0, sp, #4
    566c:	bl	5f00 <FatFile::readDirCache(bool)>
    if (!ldir) {
    5670:	cbz	r0, 56d8 <FatFile::getName7(char*, unsigned int)+0xb4>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    5672:	ldrb	r3, [r0, #11]
    5674:	cmp	r3, #15
    5676:	bne.n	56d8 <FatFile::getName7(char*, unsigned int)+0xb4>
    5678:	ldrb	r3, [r0, #0]
    567a:	uxtb.w	r2, r9
    567e:	and.w	r3, r3, #31
    5682:	cmp	r3, r2
    5684:	bne.n	56d8 <FatFile::getName7(char*, unsigned int)+0xb4>
    5686:	subs	r2, r5, #1
    5688:	add.w	ip, r0, #1
    for (uint8_t i = 0; i < 13; i++) {
    568c:	movs	r3, #0
    568e:	add	r2, r8
  if (i < 5) {
    5690:	cmp	r3, #4
    5692:	bhi.n	56f6 <FatFile::getName7(char*, unsigned int)+0xd2>
    5694:	ldrh.w	r4, [ip]
    for (uint8_t i = 0; i < 13; i++) {
    5698:	adds	r3, #1
    569a:	add.w	ip, ip, #2
      if (c == 0) {
    569e:	cbz	r4, 56c8 <FatFile::getName7(char*, unsigned int)+0xa4>
      if ((n + 1) >= size) {
    56a0:	adds	r5, #1
    for (uint8_t i = 0; i < 13; i++) {
    56a2:	uxtb	r3, r3
      if ((n + 1) >= size) {
    56a4:	cmp	r5, r7
    56a6:	bcs.n	56d8 <FatFile::getName7(char*, unsigned int)+0xb4>
      name[n++] = c >= 0X7F ? '?' : c;
    56a8:	cmp	r4, #127	; 0x7f
    56aa:	it	cs
    56ac:	movcs	r4, #63	; 0x3f
    for (uint8_t i = 0; i < 13; i++) {
    56ae:	cmp	r3, #13
      name[n++] = c >= 0X7F ? '?' : c;
    56b0:	strb.w	r4, [r2, #1]!
    for (uint8_t i = 0; i < 13; i++) {
    56b4:	bne.n	5690 <FatFile::getName7(char*, unsigned int)+0x6c>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    56b6:	add.w	r9, r9, #1
    56ba:	ldrb	r2, [r6, #3]
    56bc:	uxtb.w	r3, r9
    56c0:	uxth.w	r9, r9
    56c4:	cmp	r2, r3
    56c6:	bcs.n	5656 <FatFile::getName7(char*, unsigned int)+0x32>
  name[n] = 0;
    56c8:	add	r8, r5
    56ca:	movs	r3, #0
}
    56cc:	mov	r0, r5
  name[n] = 0;
    56ce:	strb.w	r3, [r8]
}
    56d2:	add	sp, #44	; 0x2c
    56d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  name[0] = '\0';
    56d8:	movs	r3, #0
  return 0;
    56da:	mov	r5, r3
  name[0] = '\0';
    56dc:	strb.w	r3, [r8]
}
    56e0:	mov	r0, r5
    56e2:	add	sp, #44	; 0x2c
    56e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return getSFN(name, size);
    56e8:	bl	5590 <FatFile::getSFN(char*, unsigned int)>
    56ec:	mov	r5, r0
}
    56ee:	mov	r0, r5
    56f0:	add	sp, #44	; 0x2c
    56f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  } else if (i < 11) {
    56f6:	cmp	r3, #10
    56f8:	ite	ls
    56fa:	ldrhls.w	r4, [ip, #3]
    56fe:	ldrhhi.w	r4, [ip, #5]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
    5702:	b.n	5698 <FatFile::getName7(char*, unsigned int)+0x74>
  size_t n = 0;
    5704:	mov	r5, r3
    5706:	b.n	56ca <FatFile::getName7(char*, unsigned int)+0xa6>

00005708 <FatFile::getName(char*, unsigned int)>:
  return getName7(name, size);
    5708:	b.w	5624 <FatFile::getName7(char*, unsigned int)>

0000570c <FatFile::sync() [clone .part.0]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    570c:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    570e:	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    5712:	sub	sp, #8
    5714:	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5716:	cmp	r3, #0
    5718:	blt.n	5736 <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    571a:	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    571c:	add.w	r0, r5, #36	; 0x24
    5720:	bl	2de0 <FsCache::sync()>
    5724:	cmp	r0, #0
    5726:	bne.n	57a8 <FatFile::sync() [clone .part.0]+0x9c>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    5728:	ldrb	r3, [r4, #1]
  return false;
    572a:	movs	r0, #0
  m_error |= WRITE_ERROR;
    572c:	orr.w	r3, r3, #1
    5730:	strb	r3, [r4, #1]
}
    5732:	add	sp, #8
    5734:	pop	{r4, r5, r6, pc}
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    5736:	ldr	r0, [r0, #8]
    5738:	movs	r2, #1
    573a:	ldr	r1, [r4, #24]
    573c:	adds	r0, #36	; 0x24
    573e:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5742:	cmp	r0, #0
    5744:	beq.n	5728 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    5746:	ldrh	r5, [r4, #4]
    5748:	and.w	r5, r5, #15
    574c:	lsls	r3, r5, #5
    574e:	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5752:	ldrb	r3, [r0, r3]
    5754:	cmp	r3, #229	; 0xe5
    5756:	beq.n	5728 <FatFile::sync() [clone .part.0]+0x1c>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
    5758:	ldrb	r3, [r4, #0]
    575a:	and.w	r3, r3, #55	; 0x37
    575e:	strb	r3, [r5, #11]
    if (isFile()) {
    5760:	ldrb	r3, [r4, #0]
    5762:	lsls	r3, r3, #28
    5764:	bpl.n	576a <FatFile::sync() [clone .part.0]+0x5e>
      setLe32(dir->fileSize, m_fileSize);
    5766:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5768:	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    576a:	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    576c:	ldr	r1, [pc, #84]	; (57c4 <FatFile::sync() [clone .part.0]+0xb8>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    576e:	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5770:	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    5772:	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    5774:	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    5776:	cbz	r6, 5792 <FatFile::sync() [clone .part.0]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    5778:	add.w	r2, sp, #3
    577c:	add.w	r1, sp, #6
    5780:	add	r0, sp, #4
    5782:	blx	r6
      setLe16(dir->modifyDate, date);
    5784:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5788:	ldrh.w	r2, [sp, #6]
    578c:	strh	r3, [r5, #24]
    578e:	strh	r3, [r5, #18]
    5790:	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5792:	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    5794:	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5796:	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    579a:	add.w	r0, r5, #36	; 0x24
    579e:	strb	r3, [r4, #2]
    57a0:	bl	2de0 <FsCache::sync()>
    57a4:	cmp	r0, #0
    57a6:	beq.n	5728 <FatFile::sync() [clone .part.0]+0x1c>
    57a8:	add.w	r0, r5, #564	; 0x234
    57ac:	bl	2de0 <FsCache::sync()>
    57b0:	cmp	r0, #0
    57b2:	beq.n	5728 <FatFile::sync() [clone .part.0]+0x1c>
    57b4:	ldr	r0, [r5, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    57b6:	ldr	r3, [r0, #0]
    57b8:	ldr	r3, [r3, #28]
    57ba:	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    57bc:	cmp	r0, #0
    57be:	beq.n	5728 <FatFile::sync() [clone .part.0]+0x1c>
    57c0:	b.n	5732 <FatFile::sync() [clone .part.0]+0x26>
    57c2:	nop
    57c4:	.word	0x20006104

000057c8 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    57c8:	mov	r2, r0
bool FatFile::addCluster() {
    57ca:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    57cc:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    57d0:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    57d2:	ldr	r0, [r0, #8]
    57d4:	mov	r1, r5
    57d6:	bl	6884 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    57da:	cbz	r0, 57f2 <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    57dc:	cbz	r5, 57f4 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    57de:	ldr	r3, [r4, #16]
    57e0:	adds	r5, #1
    57e2:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    57e4:	ldrb	r3, [r4, #2]
    57e6:	it	ne
    57e8:	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    57ec:	orn	r3, r3, #127	; 0x7f
    57f0:	strb	r3, [r4, #2]
}
    57f2:	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    57f4:	ldrb	r3, [r4, #2]
    57f6:	orr.w	r3, r3, #64	; 0x40
    57fa:	b.n	57ec <FatFile::addCluster()+0x24>

000057fc <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    57fc:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    57fe:	ldrb	r4, [r0, #0]
    5800:	ands.w	r4, r4, #64	; 0x40
    5804:	bne.n	5810 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL * 4095) {
    5806:	ldr	r3, [pc, #104]	; (5870 <FatFile::addDirCluster()+0x74>)
    5808:	mov	r5, r0
    580a:	ldr	r2, [r0, #20]
    580c:	cmp	r2, r3
    580e:	bcc.n	5816 <FatFile::addDirCluster()+0x1a>
  return false;
    5810:	movs	r7, #0
}
    5812:	mov	r0, r7
    5814:	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    5816:	bl	57c8 <FatFile::addCluster()>
    581a:	mov	r7, r0
    581c:	cmp	r0, #0
    581e:	beq.n	5810 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    5820:	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5822:	ldr	r6, [r5, #16]
    5824:	ldrb	r2, [r0, #6]
    5826:	subs	r6, #2
    5828:	ldr	r1, [r0, #20]
    582a:	lsls	r6, r2
    582c:	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    582e:	ldrb	r1, [r0, #4]
    5830:	cbz	r1, 585e <FatFile::addDirCluster()+0x62>
    5832:	mov	r1, r4
    5834:	b.n	5844 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    5836:	bl	dcd0 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    583a:	ldr	r0, [r5, #8]
    583c:	uxtb	r1, r4
    583e:	ldrb	r2, [r0, #4]
    5840:	cmp	r2, r1
    5842:	bls.n	585c <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    5844:	add	r1, r6
    5846:	movs	r2, #5
    5848:	adds	r0, #36	; 0x24
    584a:	adds	r4, #1
    584c:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    5850:	mov.w	r2, #512	; 0x200
    5854:	movs	r1, #0
    if (!pc) {
    5856:	cmp	r0, #0
    5858:	bne.n	5836 <FatFile::addDirCluster()+0x3a>
    585a:	b.n	5810 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    585c:	ldrb	r2, [r0, #6]
    585e:	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    5862:	ldr	r1, [r5, #20]
}
    5864:	mov	r0, r7
    5866:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    5868:	uxtah	r3, r1, r3
    586c:	str	r3, [r5, #20]
}
    586e:	pop	{r3, r4, r5, r6, r7, pc}
    5870:	.word	0x001ffe00

00005874 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    5874:	push	{r4, lr}
    5876:	mov	r4, r0
    return m_cache.prepare(sector, options);
    5878:	ldr	r0, [r0, #8]
    587a:	mov	r2, r1
    587c:	adds	r0, #36	; 0x24
    587e:	ldr	r1, [r4, #24]
    5880:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5884:	cbz	r0, 5890 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    5886:	ldrh	r3, [r4, #4]
    5888:	and.w	r3, r3, #15
    588c:	add.w	r0, r0, r3, lsl #5
}
    5890:	pop	{r4, pc}
    5892:	nop

00005894 <FatFile::close()>:
bool FatFile::close() {
    5894:	push	{r4, lr}
  if (!isOpen()) {
    5896:	ldrb	r3, [r0, #0]
bool FatFile::close() {
    5898:	mov	r4, r0
  if (!isOpen()) {
    589a:	cbz	r3, 58a8 <FatFile::close()+0x14>
    589c:	bl	570c <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    58a0:	movs	r3, #0
    58a2:	strb	r3, [r4, #0]
  m_flags = 0;
    58a4:	strb	r3, [r4, #2]
}
    58a6:	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    58a8:	movs	r3, #0
    return true;
    58aa:	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    58ac:	strb	r3, [r4, #0]
  m_flags = 0;
    58ae:	strb	r3, [r4, #2]
}
    58b0:	pop	{r4, pc}
    58b2:	nop

000058b4 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    58b4:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    58b6:	ldrb	r3, [r0, #0]
bool FatFile::dirEntry(DirFat_t* dst) {
    58b8:	mov	r5, r0
    58ba:	mov	r4, r1
  if (!isOpen()) {
    58bc:	cbz	r3, 58c4 <FatFile::dirEntry(DirFat_t*)+0x10>
    58be:	bl	570c <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    58c2:	cbz	r0, 5902 <FatFile::dirEntry(DirFat_t*)+0x4e>
    58c4:	ldr	r0, [r5, #8]
    58c6:	movs	r2, #0
    58c8:	ldr	r1, [r5, #24]
    58ca:	adds	r0, #36	; 0x24
    58cc:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    58d0:	cbz	r0, 5902 <FatFile::dirEntry(DirFat_t*)+0x4e>
  return dir + (m_dirIndex & 0XF);
    58d2:	ldrh	r2, [r5, #4]
    58d4:	and.w	r2, r2, #15
    58d8:	add.w	r3, r0, r2, lsl #5
    58dc:	lsls	r2, r2, #5
  memcpy(dst, dir, sizeof(DirFat_t));
    58de:	ldr	r5, [r3, #4]
    58e0:	ldr	r0, [r0, r2]
    58e2:	ldr	r1, [r3, #8]
    58e4:	ldr	r2, [r3, #12]
    58e6:	str	r0, [r4, #0]
    58e8:	str	r5, [r4, #4]
    58ea:	str	r1, [r4, #8]
    58ec:	str	r2, [r4, #12]
    58ee:	ldr	r0, [r3, #16]
    58f0:	ldr	r5, [r3, #20]
    58f2:	ldr	r1, [r3, #24]
    58f4:	ldr	r2, [r3, #28]
    58f6:	str	r0, [r4, #16]
  return true;
    58f8:	movs	r0, #1
  memcpy(dst, dir, sizeof(DirFat_t));
    58fa:	str	r5, [r4, #20]
    58fc:	str	r1, [r4, #24]
    58fe:	str	r2, [r4, #28]
}
    5900:	pop	{r3, r4, r5, pc}
  return false;
    5902:	movs	r0, #0
}
    5904:	pop	{r3, r4, r5, pc}
    5906:	nop

00005908 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    5908:	push	{r4, r5, lr}
    590a:	sub	sp, #36	; 0x24
    590c:	mov	r5, r1
    590e:	mov	r4, r2
  if (!dirEntry(&dir)) {
    5910:	mov	r1, sp
    5912:	bl	58b4 <FatFile::dirEntry(DirFat_t*)>
    5916:	cbz	r0, 5924 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    5918:	ldrh.w	r2, [sp, #16]
  *ptime = getLe16(dir.createTime);
    591c:	ldrh.w	r3, [sp, #14]
  *pdate = getLe16(dir.createDate);
    5920:	strh	r2, [r5, #0]
  *ptime = getLe16(dir.createTime);
    5922:	strh	r3, [r4, #0]
}
    5924:	add	sp, #36	; 0x24
    5926:	pop	{r4, r5, pc}

00005928 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5928:	push	{r4, r5, lr}
    592a:	sub	sp, #36	; 0x24
    592c:	mov	r5, r1
    592e:	mov	r4, r2
  if (!dirEntry(&dir)) {
    5930:	mov	r1, sp
    5932:	bl	58b4 <FatFile::dirEntry(DirFat_t*)>
    5936:	cbz	r0, 5944 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    5938:	ldrh.w	r2, [sp, #24]
  *ptime = getLe16(dir.modifyTime);
    593c:	ldrh.w	r3, [sp, #22]
  *pdate = getLe16(dir.modifyDate);
    5940:	strh	r2, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    5942:	strh	r3, [r4, #0]
}
    5944:	add	sp, #36	; 0x24
    5946:	pop	{r4, r5, pc}

00005948 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    5948:	ldrb	r3, [r1, #0]
    594a:	tst.w	r3, #208	; 0xd0
    594e:	bne.n	5954 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    5950:	movs	r0, #0
    5952:	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    5954:	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5956:	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    595a:	sub	sp, #36	; 0x24
    595c:	mov	r5, r1
    595e:	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5960:	bl	6f0c <FatFile::open(FatFile*, FatLfn_t*, int)>
    5964:	cbz	r0, 5976 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    5966:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    5968:	movs	r3, #16
  if (!addDirCluster()) {
    596a:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    596c:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    596e:	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    5970:	bl	57fc <FatFile::addDirCluster()>
    5974:	cbnz	r0, 597c <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    5976:	movs	r0, #0
    5978:	add	sp, #36	; 0x24
    597a:	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    597c:	ldr	r2, [r4, #16]
  if (!isOpen()) {
    597e:	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    5980:	str	r2, [r4, #32]
  if (!isOpen()) {
    5982:	cbz	r3, 59a0 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    5984:	ldr	r3, [r4, #20]
    5986:	cbz	r3, 5996 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5988:	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    598a:	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    598c:	bic.w	r3, r3, #32
  m_curPosition = pos;
    5990:	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5994:	strb	r3, [r4, #2]
  if (!isOpen()) {
    5996:	mov	r0, r4
    5998:	bl	570c <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    599c:	cmp	r0, #0
    599e:	beq.n	5976 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    59a0:	ldr	r0, [r4, #8]
    59a2:	movs	r2, #1
    59a4:	ldr	r1, [r4, #24]
    59a6:	adds	r0, #36	; 0x24
    59a8:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    59ac:	cmp	r0, #0
    59ae:	beq.n	5976 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    59b0:	ldrh.w	ip, [r4, #4]
  dir->attributes = FS_ATTRIB_DIRECTORY;
    59b4:	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    59b6:	and.w	ip, ip, #15
    59ba:	mov.w	r3, ip, lsl #5
    59be:	add.w	ip, r0, ip, lsl #5
  dir->attributes = FS_ATTRIB_DIRECTORY;
    59c2:	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    59c6:	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    59c8:	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    59ca:	ldr	r3, [r4, #32]
    59cc:	ldrb.w	lr, [r7, #6]
    59d0:	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    59d2:	ldr.w	r1, [ip, #4]
    59d6:	ldr.w	r2, [ip, #8]
    59da:	ldr.w	r3, [ip, #12]
    59de:	lsl.w	r6, r6, lr
    59e2:	mov	lr, sp
    59e4:	stmia.w	lr!, {r0, r1, r2, r3}
    59e8:	ldr.w	r0, [ip, #16]
    59ec:	ldr.w	r1, [ip, #20]
    59f0:	ldr.w	r2, [ip, #24]
    59f4:	ldr.w	r3, [ip, #28]
    59f8:	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    59fc:	ldr	r3, [r7, #20]
    59fe:	add.w	r0, r7, #36	; 0x24
    5a02:	movs	r2, #1
    5a04:	adds	r1, r6, r3
    dot.name[i] = ' ';
    5a06:	mov.w	r3, #538976288	; 0x20202020
    5a0a:	str.w	r3, [sp, #1]
    5a0e:	str.w	r3, [sp, #5]
    5a12:	strh.w	r3, [sp, #9]
    5a16:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5a1a:	mov	ip, r0
    5a1c:	cmp	r0, #0
    5a1e:	beq.n	5976 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    5a20:	movs	r7, #46	; 0x2e
    5a22:	mov	lr, sp
    5a24:	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    5a28:	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    5a2a:	ldmia.w	lr!, {r0, r1, r2, r3}
    5a2e:	str.w	r0, [ip]
    5a32:	str.w	r1, [ip, #4]
    5a36:	str.w	r2, [ip, #8]
    5a3a:	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    5a3e:	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    5a42:	ldmia.w	lr!, {r0, r1, r2, r3}
    5a46:	str.w	r0, [ip, #16]
    5a4a:	str.w	r1, [ip, #20]
    5a4e:	str.w	r2, [ip, #24]
    5a52:	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5a56:	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    5a58:	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5a5a:	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    5a5e:	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    5a62:	ldmia	r6!, {r0, r1, r2, r3}
    5a64:	str.w	r0, [ip, #32]
    5a68:	str.w	r1, [ip, #36]	; 0x24
    5a6c:	str.w	r2, [ip, #40]	; 0x28
    5a70:	str.w	r3, [ip, #44]	; 0x2c
    5a74:	ldmia	r6!, {r0, r1, r2, r3}
    5a76:	str.w	r0, [ip, #48]	; 0x30
    5a7a:	str.w	r1, [ip, #52]	; 0x34
    5a7e:	str.w	r2, [ip, #56]	; 0x38
    5a82:	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    5a86:	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5a88:	add.w	r0, r4, #36	; 0x24
    5a8c:	bl	2de0 <FsCache::sync()>
    5a90:	cmp	r0, #0
    5a92:	beq.w	5976 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    5a96:	add.w	r0, r4, #564	; 0x234
    5a9a:	bl	2de0 <FsCache::sync()>
    5a9e:	cmp	r0, #0
    5aa0:	beq.w	5976 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    5aa4:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    5aa6:	ldr	r3, [r0, #0]
    5aa8:	ldr	r3, [r3, #28]
}
    5aaa:	add	sp, #36	; 0x24
    5aac:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5ab0:	bx	r3
    5ab2:	nop

00005ab4 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5ab4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    5ab8:	movs	r6, #0
    5aba:	sub	sp, #80	; 0x50
    5abc:	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    5abe:	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5ac0:	str	r2, [sp, #4]
    5ac2:	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    5ac4:	cmp	r3, #0
    5ac6:	bne.n	5b4c <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    5ac8:	ldrb	r3, [r1, #0]
    5aca:	mov	r5, r1
    5acc:	tst.w	r3, #208	; 0xd0
    5ad0:	beq.n	5b4c <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
  if (isDirSeparator(*path)) {
    5ad2:	ldrb	r3, [r2, #0]
    5ad4:	mov	r4, r0
    5ad6:	mov	r6, r2
    5ad8:	cmp	r3, #47	; 0x2f
    5ada:	beq.n	5b54 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!open(parent, &fname, O_RDONLY)) {
    5adc:	movs	r7, #0
    5ade:	b.n	5b32 <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
    if (!*path) {
    5ae0:	ldr	r6, [sp, #4]
    5ae2:	ldrb	r6, [r6, #0]
    5ae4:	cmp	r6, #0
    5ae6:	beq.n	5b86 <FatFile::mkdir(FatFile*, char const*, bool)+0xd2>
    if (!open(parent, &fname, O_RDONLY)) {
    5ae8:	bl	6f0c <FatFile::open(FatFile*, FatLfn_t*, int)>
    5aec:	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    5aee:	add	r2, sp, #12
    5af0:	mov	r1, r5
    5af2:	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    5af4:	cbnz	r3, 5b02 <FatFile::mkdir(FatFile*, char const*, bool)+0x4e>
      if (!pFlag || !mkdir(parent, &fname)) {
    5af6:	cmp.w	r8, #0
    5afa:	beq.n	5b4c <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    5afc:	bl	5948 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    5b00:	cbz	r0, 5b4c <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    tmpDir = *this;
    5b02:	mov	lr, r4
    5b04:	add.w	ip, sp, #44	; 0x2c
    5b08:	ldmia.w	lr!, {r0, r1, r2, r3}
    5b0c:	stmia.w	ip!, {r0, r1, r2, r3}
    5b10:	ldmia.w	lr!, {r0, r1, r2, r3}
    5b14:	stmia.w	ip!, {r0, r1, r2, r3}
    5b18:	ldr.w	r5, [lr]
    5b1c:	mov	r0, r4
  if (!isOpen()) {
    5b1e:	ldrb	r3, [r4, #0]
    tmpDir = *this;
    5b20:	str.w	r5, [ip]
  if (!isOpen()) {
    5b24:	cbz	r3, 5b2a <FatFile::mkdir(FatFile*, char const*, bool)+0x76>
    5b26:	bl	570c <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    5b2a:	ldr	r6, [sp, #4]
    parent = &tmpDir;
    5b2c:	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    5b2e:	strb	r7, [r4, #0]
  m_flags = 0;
    5b30:	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    5b32:	mov	r1, r6
    5b34:	add	r3, sp, #4
    5b36:	add	r2, sp, #12
    5b38:	mov	r0, r4
    5b3a:	bl	71a4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    5b3e:	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    5b40:	add	r2, sp, #12
    5b42:	mov	r1, r5
    5b44:	movs	r3, #0
    5b46:	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    5b48:	cmp	r6, #0
    5b4a:	bne.n	5ae0 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  switch (vol->fatType()) {
    5b4c:	movs	r0, #0
}
    5b4e:	add	sp, #80	; 0x50
    5b50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    5b54:	adds	r6, #1
    5b56:	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    5b58:	ldrb	r3, [r6, #0]
    5b5a:	cmp	r3, #47	; 0x2f
    5b5c:	beq.n	5b54 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!tmpDir.openRoot(parent->m_vol)) {
    5b5e:	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    5b60:	movs	r2, #36	; 0x24
    5b62:	movs	r1, #0
    5b64:	add	r0, sp, #44	; 0x2c
    5b66:	bl	dcd0 <memset>
  m_vol = vol;
    5b6a:	str	r5, [sp, #52]	; 0x34
  uint8_t fatType() const { return m_fatType; }
    5b6c:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    5b6e:	cmp	r3, #16
    5b70:	beq.n	5b92 <FatFile::mkdir(FatFile*, char const*, bool)+0xde>
    5b72:	cmp	r3, #32
    5b74:	bne.n	5b4c <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    5b76:	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5b78:	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    5b7c:	movs	r3, #1
    parent = &tmpDir;
    5b7e:	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    5b80:	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    5b84:	b.n	5adc <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
  return mkdir(parent, &fname);
    5b86:	add	r2, sp, #12
    5b88:	bl	5948 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    5b8c:	add	sp, #80	; 0x50
    5b8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    5b92:	movs	r3, #64	; 0x40
    5b94:	b.n	5b78 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    5b96:	nop

00005b98 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5b98:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b9c:	movs	r5, #0
    5b9e:	sub	sp, #80	; 0x50
    5ba0:	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    5ba2:	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5ba4:	str	r2, [sp, #4]
    5ba6:	str	r5, [sp, #44]	; 0x2c
  if (isOpen() || !dirFile->isDir()) {
    5ba8:	cmp	r3, #0
    5baa:	bne.n	5c1c <FatFile::open(FatFile*, char const*, int)+0x84>
    5bac:	ldrb	r3, [r1, #0]
    5bae:	mov	r6, r1
    5bb0:	tst.w	r3, #208	; 0xd0
    5bb4:	beq.n	5c1c <FatFile::open(FatFile*, char const*, int)+0x84>
  if (isDirSeparator(*path)) {
    5bb6:	ldrb	r3, [r2, #0]
    5bb8:	mov	r4, r0
    5bba:	mov	r5, r2
    5bbc:	cmp	r3, #47	; 0x2f
    5bbe:	beq.n	5c24 <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
    5bc0:	movs	r7, #0
    5bc2:	b.n	5c02 <FatFile::open(FatFile*, char const*, int)+0x6a>
    if (*path == 0) {
    5bc4:	ldr	r5, [sp, #4]
    5bc6:	ldrb	r5, [r5, #0]
    5bc8:	cmp	r5, #0
    5bca:	beq.n	5c52 <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    5bcc:	bl	6f0c <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    5bd0:	mov	lr, r4
    5bd2:	add.w	ip, sp, #44	; 0x2c
    if (!open(dirFile, &fname, O_RDONLY)) {
    5bd6:	cbz	r0, 5c1c <FatFile::open(FatFile*, char const*, int)+0x84>
    dirFile = &tmpDir;
    5bd8:	mov	r6, ip
  if (!isOpen()) {
    5bda:	ldrb	r5, [r4, #0]
    tmpDir = *this;
    5bdc:	ldmia.w	lr!, {r0, r1, r2, r3}
    5be0:	stmia.w	ip!, {r0, r1, r2, r3}
    5be4:	ldmia.w	lr!, {r0, r1, r2, r3}
    5be8:	stmia.w	ip!, {r0, r1, r2, r3}
    5bec:	ldr.w	r3, [lr]
    5bf0:	mov	r0, r4
    5bf2:	str.w	r3, [ip]
  if (!isOpen()) {
    5bf6:	cbz	r5, 5bfc <FatFile::open(FatFile*, char const*, int)+0x64>
    5bf8:	bl	570c <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    5bfc:	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    5bfe:	strb	r7, [r4, #0]
  m_flags = 0;
    5c00:	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    5c02:	mov	r1, r5
    5c04:	add	r3, sp, #4
    5c06:	add	r2, sp, #12
    5c08:	mov	r0, r4
    5c0a:	bl	71a4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    5c0e:	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c10:	add	r2, sp, #12
    5c12:	mov	r1, r6
    5c14:	movs	r3, #0
    5c16:	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    5c18:	cmp	r5, #0
    5c1a:	bne.n	5bc4 <FatFile::open(FatFile*, char const*, int)+0x2c>
  return false;
    5c1c:	movs	r0, #0
}
    5c1e:	add	sp, #80	; 0x50
    5c20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    5c24:	adds	r5, #1
    5c26:	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    5c28:	ldrb	r1, [r5, #0]
    5c2a:	cmp	r1, #47	; 0x2f
    5c2c:	beq.n	5c24 <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (*path == 0) {
    5c2e:	cbnz	r1, 5c60 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    5c30:	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    5c32:	movs	r2, #36	; 0x24
    5c34:	mov	r0, r4
    5c36:	bl	dcd0 <memset>
  m_vol = vol;
    5c3a:	str	r5, [r4, #8]
    5c3c:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    5c3e:	cmp	r3, #16
    5c40:	beq.n	5c8c <FatFile::open(FatFile*, char const*, int)+0xf4>
    5c42:	cmp	r3, #32
    5c44:	bne.n	5c1c <FatFile::open(FatFile*, char const*, int)+0x84>
    5c46:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    5c48:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5c4a:	strb	r2, [r4, #0]
  return true;
    5c4c:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    5c4e:	strb	r3, [r4, #2]
  return true;
    5c50:	b.n	5c1e <FatFile::open(FatFile*, char const*, int)+0x86>
  return open(dirFile, &fname, oflag);
    5c52:	mov	r3, r8
    5c54:	add	r2, sp, #12
    5c56:	bl	6f0c <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    5c5a:	add	sp, #80	; 0x50
    5c5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5c60:	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    5c62:	movs	r2, #36	; 0x24
    5c64:	movs	r1, #0
    5c66:	add	r0, sp, #44	; 0x2c
    5c68:	bl	dcd0 <memset>
  m_vol = vol;
    5c6c:	str	r6, [sp, #52]	; 0x34
    5c6e:	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    5c70:	cmp	r3, #16
    5c72:	beq.n	5c88 <FatFile::open(FatFile*, char const*, int)+0xf0>
    5c74:	cmp	r3, #32
    5c76:	bne.n	5c1c <FatFile::open(FatFile*, char const*, int)+0x84>
    5c78:	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5c7a:	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    5c7e:	movs	r3, #1
    dirFile = &tmpDir;
    5c80:	add	r6, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    5c82:	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    5c86:	b.n	5bc0 <FatFile::open(FatFile*, char const*, int)+0x28>
  switch (vol->fatType()) {
    5c88:	movs	r3, #64	; 0x40
    5c8a:	b.n	5c7a <FatFile::open(FatFile*, char const*, int)+0xe2>
    5c8c:	movs	r2, #64	; 0x40
    5c8e:	b.n	5c48 <FatFile::open(FatFile*, char const*, int)+0xb0>

00005c90 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    5c90:	cbz	r1, 5c9a <FatFile::open(FatVolume*, char const*, int)+0xa>
    5c92:	addw	r1, r1, #1092	; 0x444
    5c96:	b.w	5b98 <FatFile::open(FatFile*, char const*, int)>
}
    5c9a:	mov	r0, r1
    5c9c:	bx	lr
    5c9e:	nop

00005ca0 <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    5ca0:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    5ca2:	push	{r4, r5, r6, lr}
    5ca4:	mov	r5, r1
    5ca6:	mov	r4, r0
  if (file->m_dirCluster == 0) {
    5ca8:	cbnz	r3, 5cd4 <FatFile::openCluster(FatFile*)+0x34>
  if (isOpen()) {
    5caa:	ldrb	r6, [r0, #0]
    5cac:	cbz	r6, 5cb2 <FatFile::openCluster(FatFile*)+0x12>
  return false;
    5cae:	mov	r0, r3
}
    5cb0:	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    5cb2:	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    5cb4:	movs	r2, #36	; 0x24
    5cb6:	mov	r1, r6
    5cb8:	bl	dcd0 <memset>
  m_vol = vol;
    5cbc:	str	r5, [r4, #8]
    5cbe:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    5cc0:	cmp	r3, #16
    5cc2:	beq.n	5cf2 <FatFile::openCluster(FatFile*)+0x52>
    5cc4:	cmp	r3, #32
    5cc6:	bne.n	5cee <FatFile::openCluster(FatFile*)+0x4e>
    5cc8:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    5cca:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5ccc:	strb	r2, [r4, #0]
  return true;
    5cce:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    5cd0:	strb	r3, [r4, #2]
}
    5cd2:	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    5cd4:	movs	r2, #36	; 0x24
    5cd6:	movs	r1, #0
    5cd8:	bl	dcd0 <memset>
  m_flags = FILE_FLAG_READ;
    5cdc:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    5cde:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    5ce0:	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    5ce2:	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    5ce4:	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    5ce8:	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    5cea:	str	r3, [r4, #32]
}
    5cec:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    5cee:	mov	r0, r6
}
    5cf0:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    5cf2:	movs	r2, #64	; 0x40
    5cf4:	b.n	5cca <FatFile::openCluster(FatFile*)+0x2a>
    5cf6:	nop

00005cf8 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    5cf8:	push	{r4, r5, r6, lr}
  if (isOpen()) {
    5cfa:	ldrb	r5, [r0, #0]
    5cfc:	cbz	r5, 5d02 <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    5cfe:	movs	r0, #0
}
    5d00:	pop	{r4, r5, r6, pc}
    5d02:	mov	r6, r1
    5d04:	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    5d06:	movs	r2, #36	; 0x24
    5d08:	mov	r1, r5
    5d0a:	bl	dcd0 <memset>
  m_vol = vol;
    5d0e:	str	r6, [r4, #8]
    5d10:	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    5d12:	cmp	r3, #16
    5d14:	beq.n	5d2a <FatFile::openRoot(FatVolume*)+0x32>
    5d16:	cmp	r3, #32
    5d18:	bne.n	5d26 <FatFile::openRoot(FatVolume*)+0x2e>
    5d1a:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    5d1c:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5d1e:	strb	r2, [r4, #0]
  return true;
    5d20:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    5d22:	strb	r3, [r4, #2]
}
    5d24:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    5d26:	mov	r0, r5
}
    5d28:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    5d2a:	movs	r2, #64	; 0x40
    5d2c:	b.n	5d1c <FatFile::openRoot(FatVolume*)+0x24>
    5d2e:	nop

00005d30 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    5d30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d34:	vpush	{d8}
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    5d38:	ldrb	r3, [r0, #2]
    5d3a:	sub	sp, #12
    5d3c:	mov	r5, r0
  if (!isReadable()) {
    5d3e:	lsls	r7, r3, #31
    5d40:	bpl.w	5e5c <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const { return m_attributes & FILE_ATTR_FILE; }
    5d44:	mov	r8, r1
    5d46:	ldrb	r1, [r0, #0]
    5d48:	mov	sl, r2
  if (isFile()) {
    5d4a:	lsls	r6, r1, #28
    5d4c:	bmi.w	5e72 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    5d50:	lsls	r4, r1, #25
    5d52:	bpl.n	5d66 <FatFile::read(void*, unsigned int)+0x36>
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    5d54:	ldr	r3, [r0, #8]
    5d56:	ldrh	r2, [r3, #8]
    5d58:	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    5d5a:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    5d5e:	uxth	r3, r3
    5d60:	cmp	sl, r3
    5d62:	it	cs
    5d64:	movcs	sl, r3
  while (toRead) {
    5d66:	cmp.w	sl, #0
    5d6a:	beq.w	5ecc <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    5d6e:	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5d70:	add.w	r3, r5, #16
    if (isRootFixed()) {
    5d74:	lsls	r0, r1, #25
    uint32_t tmp32 = m_fileSize - m_curPosition;
    5d76:	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    5d78:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5d7c:	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5d80:	ldr	r7, [r5, #8]
    5d82:	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    5d86:	bpl.n	5e04 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart() +
    5d88:	ldr	r1, [r7, #32]
    5d8a:	add.w	r1, r1, r2, lsr #9
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    5d8e:	cmp.w	fp, #0
    5d92:	bne.n	5e38 <FatFile::read(void*, unsigned int)+0x108>
    5d94:	cmp.w	r6, #512	; 0x200
    5d98:	bcc.n	5e38 <FatFile::read(void*, unsigned int)+0x108>
  uint32_t sector() { return m_sector; }
    5d9a:	ldr	r2, [r7, #44]	; 0x2c
    5d9c:	cmp	r1, r2
    5d9e:	beq.n	5e38 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    5da0:	cmp.w	r6, #1024	; 0x400
    5da4:	bcc.w	5eac <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    5da8:	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5daa:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    5dac:	lsls	r0, r0, #25
    5dae:	bmi.n	5dbc <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    5db0:	ldrb	r0, [r7, #4]
    5db2:	sub.w	r0, r0, r9
    5db6:	cmp	r3, r0
    5db8:	it	cs
    5dba:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    5dbc:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    5dbe:	mov.w	r4, r3, lsl #9
    5dc2:	bhi.n	5dde <FatFile::read(void*, unsigned int)+0xae>
    5dc4:	adds	r0, r1, r3
    5dc6:	cmp	r2, r0
    5dc8:	bcs.n	5dde <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    5dca:	add.w	r0, r7, #36	; 0x24
    5dce:	strd	r1, r3, [sp]
    5dd2:	bl	2de0 <FsCache::sync()>
    5dd6:	ldrd	r1, r3, [sp]
    5dda:	cmp	r0, #0
    5ddc:	beq.n	5e5c <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    5dde:	ldr	r0, [r7, #40]	; 0x28
    5de0:	ldr	r2, [r0, #0]
    5de2:	ldr	r7, [r2, #20]
    5de4:	mov	r2, r8
    5de6:	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5de8:	cmp	r0, #0
    5dea:	beq.n	5e5c <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    5dec:	ldr	r2, [r5, #20]
  while (toRead) {
    5dee:	subs	r6, r6, r4
    dst += n;
    5df0:	add	r8, r4
    m_curPosition += n;
    5df2:	add	r2, r4
    5df4:	str	r2, [r5, #20]
  while (toRead) {
    5df6:	beq.n	5ecc <FatFile::read(void*, unsigned int)+0x19c>
  bool isRootFixed() const { return m_attributes & FILE_ATTR_ROOT_FIXED; }
    5df8:	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5dfa:	ubfx	fp, r2, #0, #9
    5dfe:	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    5e00:	lsls	r0, r1, #25
    5e02:	bmi.n	5d88 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    5e04:	ldrb.w	r9, [r7, #5]
    5e08:	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    5e0c:	cmp.w	fp, #0
    5e10:	bne.n	5e80 <FatFile::read(void*, unsigned int)+0x150>
    5e12:	cmp.w	r9, #0
    5e16:	bne.n	5e80 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    5e18:	cmp	r2, #0
    5e1a:	bne.n	5e84 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5e1c:	lsls	r2, r1, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    5e1e:	ite	mi
    5e20:	ldrmi	r2, [r7, #32]
    5e22:	ldrpl	r2, [r5, #32]
          m_curCluster++;
    5e24:	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5e26:	subs	r2, #2
    5e28:	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    5e2a:	ldr	r1, [r7, #20]
    5e2c:	lsls	r2, r0
    5e2e:	add	r1, r9
    5e30:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    5e32:	cmp.w	fp, #0
    5e36:	beq.n	5d94 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    5e38:	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    5e3c:	movs	r2, #0
    5e3e:	add.w	r0, r7, #36	; 0x24
    5e42:	cmp	r4, r6
    5e44:	it	cs
    5e46:	movcs	r4, r6
    5e48:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    5e4c:	cbz	r0, 5e5c <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    5e4e:	add.w	r1, r0, fp
    5e52:	mov	r2, r4
    5e54:	mov	r0, r8
    5e56:	bl	9d30 <memcpy>
    5e5a:	b.n	5dec <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    5e5c:	ldrb	r3, [r5, #1]
  return -1;
    5e5e:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    5e62:	orr.w	r3, r3, #2
    5e66:	strb	r3, [r5, #1]
}
    5e68:	add	sp, #12
    5e6a:	vpop	{d8}
    5e6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    5e72:	ldr	r3, [r0, #28]
    5e74:	ldr	r2, [r0, #20]
    5e76:	subs	r3, r3, r2
    5e78:	cmp	sl, r3
    5e7a:	it	cs
    5e7c:	movcs	sl, r3
    5e7e:	b.n	5d66 <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    5e80:	ldr	r2, [r5, #16]
    5e82:	b.n	5e26 <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    5e84:	lsls	r3, r1, #28
    5e86:	bpl.n	5e94 <FatFile::read(void*, unsigned int)+0x164>
    5e88:	ldrb	r2, [r5, #2]
    5e8a:	lsls	r4, r2, #25
    5e8c:	bpl.n	5e94 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    5e8e:	ldr	r2, [r5, #16]
    5e90:	adds	r2, #1
    5e92:	b.n	5e24 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5e94:	vmov	r2, s16
    5e98:	mov	r0, r7
    5e9a:	ldr	r1, [r5, #16]
    5e9c:	bl	67f8 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5ea0:	cmp	r0, #0
    5ea2:	blt.n	5e5c <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    5ea4:	beq.n	5ec0 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    5ea6:	ldr	r7, [r5, #8]
    5ea8:	ldr	r2, [r5, #16]
    5eaa:	b.n	5e26 <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    5eac:	ldr	r0, [r7, #40]	; 0x28
    5eae:	mov	r2, r8
    5eb0:	ldr	r3, [r0, #0]
    5eb2:	ldr	r3, [r3, #16]
    5eb4:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    5eb6:	cmp	r0, #0
    5eb8:	beq.n	5e5c <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    5eba:	mov.w	r4, #512	; 0x200
    5ebe:	b.n	5dec <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    5ec0:	ldrb	r3, [r5, #0]
    5ec2:	tst.w	r3, #208	; 0xd0
    5ec6:	beq.n	5e5c <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    5ec8:	sub.w	sl, sl, r6
    5ecc:	mov	r0, sl
}
    5ece:	add	sp, #12
    5ed0:	vpop	{d8}
    5ed4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005ed8 <FatFile::peek()>:
int FatFile::peek() {
    5ed8:	push	{r4, r5, r6, lr}
    5eda:	sub	sp, #8
    return read(&b, 1) == 1 ? b : -1;
    5edc:	movs	r2, #1
    5ede:	mov	r4, r0
    5ee0:	add.w	r1, sp, #7
  uint32_t saveCurCluster = m_curCluster;
    5ee4:	ldrd	r5, r6, [r0, #16]
    5ee8:	bl	5d30 <FatFile::read(void*, unsigned int)>
    5eec:	cmp	r0, #1
    5eee:	ite	eq
    5ef0:	ldrbeq.w	r0, [sp, #7]
    5ef4:	movne.w	r0, #4294967295
  m_curCluster = saveCurCluster;
    5ef8:	strd	r5, r6, [r4, #16]
}
    5efc:	add	sp, #8
    5efe:	pop	{r4, r5, r6, pc}

00005f00 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    5f00:	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    5f02:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5f06:	push	{r4, r5, lr}
    5f08:	mov	r4, r0
    5f0a:	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    5f0c:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    5f10:	beq.n	5f26 <FatFile::readDirCache(bool)+0x26>
    5f12:	cmp	r1, #1
    5f14:	bne.n	5f26 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    5f16:	adds	r3, #32
    5f18:	str	r3, [r0, #20]
  uint8_t* cacheBuffer() { return m_buffer; }
    5f1a:	ldr	r0, [r4, #8]
    5f1c:	adds	r0, #52	; 0x34
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    5f1e:	add.w	r0, r0, r5, lsl #5
}
    5f22:	add	sp, #12
    5f24:	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    5f26:	movs	r2, #1
    5f28:	add.w	r1, sp, #7
    5f2c:	mov	r0, r4
    5f2e:	bl	5d30 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    5f32:	sxtb	r0, r0
    5f34:	cmp	r0, #1
    5f36:	bne.n	5f40 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    5f38:	ldr	r3, [r4, #20]
    5f3a:	adds	r3, #31
    5f3c:	str	r3, [r4, #20]
    5f3e:	b.n	5f1a <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    5f40:	movs	r0, #0
    5f42:	b.n	5f22 <FatFile::readDirCache(bool)+0x22>

00005f44 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    5f44:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    5f48:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    5f4a:	sub	sp, #104	; 0x68
  FatFile() {}
    5f4c:	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    5f4e:	tst.w	r3, #24
    5f52:	str	r6, [sp, #32]
    5f54:	str	r6, [sp, #68]	; 0x44
    5f56:	beq.n	5f66 <FatFile::rename(FatFile*, char const*)+0x22>
    5f58:	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    5f5a:	ldr	r3, [r0, #8]
    5f5c:	ldr	r2, [r1, #8]
    5f5e:	mov	r4, r0
    5f60:	mov	r5, r1
    5f62:	cmp	r2, r3
    5f64:	beq.n	5f6e <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    5f66:	movs	r0, #0
}
    5f68:	add	sp, #104	; 0x68
    5f6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f6e:	bl	570c <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    5f72:	mov	lr, r4
    5f74:	add.w	ip, sp, #68	; 0x44
    5f78:	ldmia.w	lr!, {r0, r1, r2, r3}
    5f7c:	stmia.w	ip!, {r0, r1, r2, r3}
    5f80:	ldmia.w	lr!, {r0, r1, r2, r3}
    5f84:	stmia.w	ip!, {r0, r1, r2, r3}
    5f88:	ldr.w	r3, [lr]
    5f8c:	mov	r2, r6
    5f8e:	ldr	r1, [r4, #24]
    5f90:	str.w	r3, [ip]
    5f94:	ldr	r3, [r4, #8]
    5f96:	add.w	r0, r3, #36	; 0x24
    5f9a:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5f9e:	cmp	r0, #0
    5fa0:	beq.n	5f66 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    5fa2:	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    5fa4:	mov	ip, sp
  if (isFile()) {
    5fa6:	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    5faa:	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    5fae:	add.w	lr, r0, r2, lsl #5
    5fb2:	lsls	r2, r2, #5
    5fb4:	ldr.w	r1, [lr, #4]
    5fb8:	ldr	r0, [r0, r2]
    5fba:	ldr.w	r3, [lr, #12]
    5fbe:	ldr.w	r2, [lr, #8]
    5fc2:	stmia.w	ip!, {r0, r1, r2, r3}
    5fc6:	ldr.w	r1, [lr, #20]
    5fca:	ldr.w	r2, [lr, #24]
    5fce:	ldr.w	r3, [lr, #28]
    5fd2:	ldr.w	r0, [lr, #16]
    5fd6:	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    5fda:	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    5fde:	mov	r2, r7
    5fe0:	mov	r1, r5
  if (isFile()) {
    5fe2:	bne.w	611c <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    5fe6:	add	r0, sp, #32
    5fe8:	bl	5ab4 <FatFile::mkdir(FatFile*, char const*, bool)>
    5fec:	cmp	r0, #0
    5fee:	beq.n	5f66 <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    5ff0:	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    5ff2:	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    5ff6:	movs	r5, #0
  m_dirSector = file.m_dirSector;
    5ff8:	ldr	r1, [sp, #56]	; 0x38
    5ffa:	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    5ffc:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    5ffe:	ldrb.w	r3, [sp, #35]	; 0x23
    6002:	ldr	r0, [r4, #8]
    6004:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    6006:	ldr	r3, [sp, #44]	; 0x2c
    6008:	adds	r0, #36	; 0x24
  m_dirSector = file.m_dirSector;
    600a:	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    600c:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    600e:	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    6012:	strb.w	r5, [sp, #34]	; 0x22
    6016:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    601a:	cmp	r0, #0
    601c:	beq.n	5f66 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    601e:	ldrh	r3, [r4, #4]
    6020:	and.w	r3, r3, #15
    6024:	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    6028:	ldr.w	r3, [sp, #13]
    602c:	str.w	r3, [r0, #13]
    6030:	ldr.w	r3, [sp, #17]
    6034:	str.w	r3, [r0, #17]
    6038:	ldr.w	r3, [sp, #21]
    603c:	str.w	r3, [r0, #21]
    6040:	ldr.w	r3, [sp, #25]
    6044:	str.w	r3, [r0, #25]
    6048:	ldrh.w	r3, [sp, #29]
    604c:	strh.w	r3, [r0, #29]
    6050:	ldrb.w	r3, [sp, #31]
    6054:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    6056:	ldrb.w	r3, [sp, #11]
    605a:	strb	r3, [r0, #11]
  if (dirCluster) {
    605c:	cmp	r6, #0
    605e:	beq.n	60d8 <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    6060:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6062:	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    6064:	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6066:	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    6068:	adds	r0, #36	; 0x24
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    606a:	lsls	r3, r1
    606c:	ldr.w	r1, [r0, #-16]
    return m_cache.prepare(sector, options);
    6070:	add	r1, r3
    6072:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    6076:	mov	r5, r0
    6078:	cmp	r0, #0
    607a:	beq.w	5f66 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    607e:	ldr	r0, [r0, #32]
    6080:	mov	r7, sp
    6082:	ldr	r1, [r5, #36]	; 0x24
    6084:	ldr	r2, [r5, #40]	; 0x28
    6086:	ldr	r3, [r5, #44]	; 0x2c
    6088:	stmia	r7!, {r0, r1, r2, r3}
    608a:	ldr	r0, [r5, #48]	; 0x30
    608c:	ldr	r1, [r5, #52]	; 0x34
    608e:	ldr	r2, [r5, #56]	; 0x38
    6090:	ldr	r3, [r5, #60]	; 0x3c
    6092:	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    6094:	mov	r1, r6
    6096:	ldr	r0, [r4, #8]
    6098:	bl	6904 <FatPartition::freeChain(unsigned long)>
    609c:	cmp	r0, #0
    609e:	beq.w	5f66 <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    60a2:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    60a4:	ldr	r3, [r4, #32]
    60a6:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    60a8:	adds	r0, #36	; 0x24
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    60aa:	subs	r3, #2
    60ac:	ldr.w	r1, [r0, #-16]
    60b0:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    60b2:	movs	r2, #1
    60b4:	add	r1, r3
    60b6:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    60ba:	mov	r6, r0
    60bc:	cmp	r0, #0
    60be:	beq.w	5f66 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    60c2:	mov	r5, sp
    60c4:	ldmia	r5!, {r0, r1, r2, r3}
    60c6:	str	r0, [r6, #32]
    60c8:	str	r1, [r6, #36]	; 0x24
    60ca:	str	r2, [r6, #40]	; 0x28
    60cc:	str	r3, [r6, #44]	; 0x2c
    60ce:	ldmia	r5!, {r0, r1, r2, r3}
    60d0:	str	r0, [r6, #48]	; 0x30
    60d2:	str	r1, [r6, #52]	; 0x34
    60d4:	str	r2, [r6, #56]	; 0x38
    60d6:	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    60d8:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    60da:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    60dc:	movs	r3, #8
  if (!oldFile.remove()) {
    60de:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    60e0:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    60e2:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    60e6:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    60ea:	bl	7254 <FatFile::remove()>
    60ee:	cmp	r0, #0
    60f0:	beq.w	5f66 <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    60f4:	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    60f6:	add.w	r0, r4, #36	; 0x24
    60fa:	bl	2de0 <FsCache::sync()>
    60fe:	cmp	r0, #0
    6100:	beq.w	5f66 <FatFile::rename(FatFile*, char const*)+0x22>
    6104:	add.w	r0, r4, #564	; 0x234
    6108:	bl	2de0 <FsCache::sync()>
    610c:	cmp	r0, #0
    610e:	beq.w	5f66 <FatFile::rename(FatFile*, char const*)+0x22>
    6112:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    6114:	ldr	r3, [r0, #0]
    6116:	ldr	r3, [r3, #28]
    6118:	blx	r3
    611a:	b.n	5f68 <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    611c:	movw	r3, #2561	; 0xa01
    6120:	mov	r0, ip
    6122:	bl	5b98 <FatFile::open(FatFile*, char const*, int)>
    6126:	cmp	r0, #0
    6128:	bne.w	5ff2 <FatFile::rename(FatFile*, char const*)+0xae>
    612c:	b.n	5f66 <FatFile::rename(FatFile*, char const*)+0x22>
    612e:	nop

00006130 <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    6130:	ldrb	r3, [r0, #0]
    6132:	lsls	r2, r3, #27
    6134:	bmi.n	613a <FatFile::rmdir()+0xa>
}
    6136:	movs	r0, #0
    6138:	bx	lr
  if (pos == m_curPosition) {
    613a:	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    613c:	push	{r4, r5, lr}
    613e:	mov	r4, r0
    6140:	sub	sp, #12
  if (pos == m_curPosition) {
    6142:	cbz	r3, 6152 <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6144:	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    6146:	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6148:	bic.w	r3, r3, #32
  m_curPosition = pos;
    614c:	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6150:	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    6152:	movs	r3, #0
    6154:	b.n	6176 <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
    6156:	str	r3, [r4, #20]
    6158:	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    615a:	lsls	r2, r5, #5
    615c:	adds	r3, #52	; 0x34
    if (dir->name[0] == FAT_NAME_FREE) {
    615e:	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6160:	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    6164:	cbz	r2, 61a2 <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6166:	cmp	r2, #229	; 0xe5
    6168:	beq.n	6174 <FatFile::rmdir()+0x44>
    616a:	cmp	r2, #46	; 0x2e
    616c:	beq.n	6174 <FatFile::rmdir()+0x44>
    if (isFatFileOrSubdir(dir)) {
    616e:	ldrb	r3, [r3, #11]
    6170:	lsls	r3, r3, #28
    6172:	bpl.n	61ba <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6174:	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
    6176:	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    617a:	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
    617e:	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
    6182:	bne.n	6156 <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
    6184:	movs	r2, #1
    6186:	add.w	r1, sp, #7
    618a:	mov	r0, r4
    618c:	bl	5d30 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    6190:	sxtb	r0, r0
    6192:	cmp	r0, #1
    6194:	bne.n	619e <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
    6196:	ldr	r3, [r4, #20]
    6198:	adds	r3, #31
    619a:	str	r3, [r4, #20]
    619c:	b.n	6158 <FatFile::rmdir()+0x28>
      if (!getError()) {
    619e:	ldrb	r3, [r4, #1]
    61a0:	cbnz	r3, 61ba <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
    61a2:	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    61a4:	movs	r2, #8
  return remove();
    61a6:	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    61a8:	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    61ac:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    61ae:	strb	r3, [r4, #2]
}
    61b0:	add	sp, #12
    61b2:	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    61b6:	b.w	7254 <FatFile::remove()>
}
    61ba:	movs	r0, #0
    61bc:	add	sp, #12
    61be:	pop	{r4, r5, pc}

000061c0 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    61c0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const { return m_attributes; }
    61c4:	ldrb	r3, [r0, #0]
    61c6:	mov	r4, r0
  uint32_t tmp = m_curCluster;
    61c8:	ldr	r7, [r0, #16]
  if (!isOpen()) {
    61ca:	cmp	r3, #0
    61cc:	beq.n	6242 <FatFile::seekSet(unsigned long)+0x82>
    61ce:	mov	r5, r1
  if (pos == m_curPosition) {
    61d0:	ldr	r1, [r0, #20]
    61d2:	cmp	r1, r5
    61d4:	beq.n	625c <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    61d6:	cmp	r5, #0
    61d8:	beq.n	624a <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    61da:	lsls	r0, r3, #28
    61dc:	bpl.n	6234 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    61de:	ldr	r2, [r4, #28]
    61e0:	cmp	r2, r5
    61e2:	bcc.n	6242 <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    61e4:	ldr.w	ip, [r4, #8]
    61e8:	subs	r6, r5, #1
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    61ea:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    61ec:	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    61f0:	tst.w	r2, #64	; 0x40
    61f4:	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    61f8:	uxtb	r0, r0
    61fa:	lsr.w	r6, r6, r0
  if (isContiguous()) {
    61fe:	bne.n	6262 <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    6200:	subs	r2, r1, #1
    6202:	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    6204:	cbz	r1, 620a <FatFile::seekSet(unsigned long)+0x4a>
    6206:	cmp	r6, r2
    6208:	bcs.n	626a <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    620a:	lsls	r3, r3, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    620c:	ite	mi
    620e:	ldrmi.w	r3, [ip, #32]
    6212:	ldrpl	r3, [r4, #32]
    6214:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6216:	add.w	r8, r4, #16
    621a:	b.n	622a <FatFile::seekSet(unsigned long)+0x6a>
    621c:	ldr	r1, [r4, #16]
    621e:	subs	r6, #1
    6220:	ldr	r0, [r4, #8]
    6222:	bl	67f8 <FatPartition::fatGet(unsigned long, unsigned long*)>
    6226:	cmp	r0, #0
    6228:	ble.n	6242 <FatFile::seekSet(unsigned long)+0x82>
    622a:	mov	r2, r8
  while (nNew--) {
    622c:	cmp	r6, #0
    622e:	bne.n	621c <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6230:	ldrb	r2, [r4, #2]
    6232:	b.n	624e <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    6234:	lsls	r2, r3, #25
    6236:	bpl.n	61e4 <FatFile::seekSet(unsigned long)+0x24>
  uint16_t rootDirEntryCount() const { return m_rootDirEntryCount; }
    6238:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
    623a:	ldrh	r3, [r3, #8]
    623c:	cmp.w	r5, r3, lsl #5
    6240:	bls.n	6230 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    6242:	movs	r0, #0
  m_curCluster = tmp;
    6244:	str	r7, [r4, #16]
}
    6246:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    624a:	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    624c:	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    624e:	bic.w	r2, r2, #32
  return true;
    6252:	movs	r0, #1
  m_curPosition = pos;
    6254:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6256:	strb	r2, [r4, #2]
}
    6258:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    625c:	movs	r0, #1
}
    625e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    6262:	ldr	r3, [r4, #32]
    6264:	add	r3, r6
    6266:	str	r3, [r4, #16]
    goto done;
    6268:	b.n	624e <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    626a:	subs	r6, r6, r2
    626c:	b.n	6216 <FatFile::seekSet(unsigned long)+0x56>
    626e:	nop

00006270 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    6270:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6274:	mov	r6, r1
    6276:	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    6278:	movs	r1, #0
    627a:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    627c:	mov	r4, r0
    627e:	mov	r8, r3
    6280:	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    6284:	bl	dcd0 <memset>
  m_vol = dirFile->m_vol;
    6288:	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    628a:	ldr	r3, [r6, #32]
    628c:	add.w	r2, r0, #52	; 0x34
  m_dirIndex = dirIndex;
    6290:	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    6292:	and.w	r5, r5, #15
    6296:	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    629a:	strd	r0, r3, [r4, #8]
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    629e:	ldrb	r1, [r2, #11]
  if (!isFatFileOrSubdir(dir)) {
    62a0:	lsls	r3, r1, #28
    62a2:	bmi.n	62c8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
    62a4:	and.w	r1, r1, #55	; 0x37
    62a8:	strb	r1, [r4, #0]
  if (isFatFile(dir)) {
    62aa:	ldrb	r3, [r2, #11]
    62ac:	tst.w	r3, #24
    62b0:	bne.n	62b8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    62b2:	orr.w	r1, r1, #8
    62b6:	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    62b8:	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    62bc:	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    62be:	cmp	r3, #1
    62c0:	beq.n	633c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xcc>
    62c2:	cmp	r3, #2
    62c4:	beq.n	62d4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    62c6:	cbz	r3, 630e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
  m_attributes = FILE_ATTR_CLOSED;
    62c8:	movs	r3, #0
  return false;
    62ca:	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    62cc:	strb	r3, [r4, #0]
  m_flags = 0;
    62ce:	strb	r3, [r4, #2]
}
    62d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    62d4:	movs	r3, #3
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    62d6:	ldrb	r1, [r4, #0]
      m_flags = FILE_FLAG_WRITE;
    62d8:	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
    62da:	lsls	r5, r1, #27
    62dc:	bmi.n	62c8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    62de:	lsls	r6, r1, #31
    62e0:	bmi.n	62c8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    62e2:	orr.w	r1, r1, #32
  if (oflag & O_TRUNC) {
    62e6:	tst.w	r8, #1024	; 0x400
    m_attributes |= FS_ATTRIB_ARCHIVE;
    62ea:	strb	r1, [r4, #0]
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    62ec:	and.w	r1, r8, #8
    62f0:	orr.w	r3, r3, r1
    62f4:	strb	r3, [r4, #2]
  uint32_t sector() { return m_sector; }
    62f6:	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    62f8:	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    62fa:	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    62fc:	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    62fe:	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    6302:	beq.n	632a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xba>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    6304:	cbnz	r1, 634e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xde>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6306:	orn	r3, r3, #127	; 0x7f
    630a:	strb	r3, [r4, #2]
    630c:	b.n	6330 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc0>
      if (oflag & O_TRUNC) {
    630e:	tst.w	r8, #1024	; 0x400
    6312:	bne.n	62c8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    6314:	and.w	r3, r8, #8
    6318:	orr.w	r3, r3, #1
    631c:	strb	r3, [r4, #2]
    631e:	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    6320:	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    6322:	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    6324:	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    6326:	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    632a:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    632c:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    632e:	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6330:	tst.w	r8, #16384	; 0x4000
    6334:	bne.n	6340 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
  return true;
    6336:	movs	r0, #1
}
    6338:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    633c:	movs	r3, #2
    633e:	b.n	62d6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6340:	ldr	r1, [r4, #28]
    6342:	mov	r0, r4
    6344:	bl	61c0 <FatFile::seekSet(unsigned long)>
    6348:	cmp	r0, #0
    634a:	bne.n	6336 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc6>
    634c:	b.n	62c8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    634e:	bl	6904 <FatPartition::freeChain(unsigned long)>
    6352:	cmp	r0, #0
    6354:	beq.n	62c8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6356:	ldrb	r3, [r4, #2]
    6358:	b.n	6306 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
    635a:	nop

0000635c <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const { return m_attributes; }
    635c:	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    635e:	cmp	r3, #0
    6360:	bne.n	63ee <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    6362:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    6366:	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    6368:	sub	sp, #16
    636a:	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    636c:	tst.w	r3, #208	; 0xd0
    6370:	beq.n	63d4 <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const { return m_curPosition; }
    6372:	ldr	r3, [r1, #20]
    6374:	ands.w	r5, r3, #31
    6378:	bne.n	63d4 <FatFile::openNext(FatFile*, int)+0x78>
    637a:	mov	r6, r0
    637c:	mov	r8, r2
    637e:	mov	r9, r5
    int8_t n = read(&n, 1);
    6380:	movs	r2, #1
    6382:	add.w	r1, sp, #15
    6386:	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6388:	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition() / FS_DIR_SIZE;
    638c:	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
    638e:	bl	5d30 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    6392:	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6394:	mov.w	r2, sl, lsl #5
    if (n != 1) {
    6398:	cmp	r0, #1
    639a:	bne.n	63d4 <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
    639c:	ldr	r3, [r4, #20]
  uint8_t* cacheBuffer() { return m_buffer; }
    639e:	ldr	r1, [r4, #8]
    63a0:	adds	r3, #31
    63a2:	add.w	ip, r1, #52	; 0x34
    63a6:	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
    63a8:	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    63ac:	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    63b0:	cbz	r2, 63d4 <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    63b2:	cmp	r2, #46	; 0x2e
    63b4:	beq.n	63dc <FatFile::openNext(FatFile*, int)+0x80>
    63b6:	sub.w	r0, r2, #229	; 0xe5
    63ba:	clz	r0, r0
    63be:	lsrs	r0, r0, #5
    63c0:	cbnz	r0, 63dc <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    63c2:	ldrb.w	r1, [ip, #11]
    } else if (isFatFileOrSubdir(dir)) {
    63c6:	ands.w	lr, r1, #8
    63ca:	beq.n	63f2 <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isFatLongName(dir)) {
    63cc:	cmp	r1, #15
    63ce:	beq.n	63e0 <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
    63d0:	mov	r5, r0
    63d2:	b.n	6380 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    63d4:	movs	r0, #0
}
    63d6:	add	sp, #16
    63d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
    63dc:	movs	r5, #0
    63de:	b.n	6380 <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    63e0:	lsls	r1, r2, #25
    63e2:	bpl.n	6380 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    63e4:	and.w	r5, r2, #31
        checksum = ldir->checksum;
    63e8:	ldrb.w	r9, [ip, #13]
    63ec:	b.n	6380 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    63ee:	movs	r0, #0
}
    63f0:	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    63f2:	cbz	r5, 6416 <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    63f4:	add.w	r1, ip, #10
    63f8:	b.n	63fe <FatFile::openNext(FatFile*, int)+0xa2>
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    63fa:	ldrb.w	r2, [ip, #1]!
    63fe:	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    6402:	cmp	r1, ip
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6404:	orr.w	r3, r3, lr, lsr #1
    6408:	uxtab	r3, r2, r3
    640c:	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
    6410:	bne.n	63fa <FatFile::openNext(FatFile*, int)+0x9e>
    6412:	cmp	lr, r9
    6414:	bne.n	63d4 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    6416:	mov	r3, r8
    6418:	uxth	r2, r7
    641a:	mov	r1, r4
    641c:	mov	r0, r6
    641e:	str	r5, [sp, #0]
    6420:	bl	6270 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6424:	b.n	63d6 <FatFile::openNext(FatFile*, int)+0x7a>
    6426:	nop

00006428 <FatFile::sync()>:
  if (!isOpen()) {
    6428:	ldrb	r3, [r0, #0]
    642a:	cbz	r3, 6430 <FatFile::sync()+0x8>
    642c:	b.w	570c <FatFile::sync() [clone .part.0]>
}
    6430:	movs	r0, #1
    6432:	bx	lr

00006434 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                        uint8_t day, uint8_t hour, uint8_t minute,
                        uint8_t second) {
    6434:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6438:	mov	r6, r1
  uint16_t dirDate;
  uint16_t dirTime;
  DirFat_t* dir;

  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    643a:	ldrb	r1, [r0, #0]
                        uint8_t second) {
    643c:	sub	sp, #8
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    643e:	lsls	r1, r1, #28
                        uint8_t second) {
    6440:	ldrb.w	r7, [sp, #40]	; 0x28
    6444:	ldrb.w	r9, [sp, #44]	; 0x2c
    6448:	ldrb.w	sl, [sp, #48]	; 0x30
    644c:	ldrb.w	r8, [sp, #52]	; 0x34
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    6450:	bpl.n	6484 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
    6452:	subw	r2, r2, #1980	; 0x7bc
    6456:	uxth	r4, r2
    6458:	cmp	r4, #127	; 0x7f
    645a:	bhi.n	6484 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    645c:	subs	r2, r3, #1
    645e:	str	r3, [sp, #4]
    6460:	cmp	r2, #11
    6462:	bhi.n	6484 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    6464:	subs	r2, r7, #1
    6466:	cmp	r2, #30
    6468:	bhi.n	6484 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    646a:	cmp.w	sl, #59	; 0x3b
    646e:	it	ls
    6470:	cmpls.w	r9, #23
    6474:	bhi.n	6484 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    6476:	cmp.w	r8, #59	; 0x3b
    647a:	bhi.n	6484 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    647c:	mov	r5, r0
  if (!isOpen()) {
    647e:	bl	570c <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    6482:	cbnz	r0, 648c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x58>
  }
  return m_vol->cacheSync();

fail:
  return false;
}
    6484:	movs	r0, #0
    6486:	add	sp, #8
    6488:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return m_cache.prepare(sector, options);
    648c:	ldr	r0, [r5, #8]
    648e:	movs	r2, #1
    6490:	ldr	r1, [r5, #24]
    6492:	adds	r0, #36	; 0x24
    6494:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    6498:	cmp	r0, #0
    649a:	beq.n	6484 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
                                              : year << 9 | month << 5 | day;
    649c:	ldr	r3, [sp, #4]
             : hour << 11 | minute << 5 | second >> 1;
    649e:	mov.w	r2, r8, lsr #1
  return dir + (m_dirIndex & 0XF);
    64a2:	ldrh	r1, [r5, #4]
                                              : year << 9 | month << 5 | day;
    64a4:	orr.w	r3, r7, r3, lsl #5
  if (flags & T_ACCESS) {
    64a8:	lsls	r7, r6, #31
  return dir + (m_dirIndex & 0XF);
    64aa:	and.w	r1, r1, #15
             : hour << 11 | minute << 5 | second >> 1;
    64ae:	orr.w	r2, r2, sl, lsl #5
                                              : year << 9 | month << 5 | day;
    64b2:	orr.w	r3, r3, r4, lsl #9
    64b6:	add.w	r0, r0, r1, lsl #5
    64ba:	uxth	r3, r3
             : hour << 11 | minute << 5 | second >> 1;
    64bc:	orr.w	r2, r2, r9, lsl #11
  *reinterpret_cast<uint16_t*>(dst) = src;
    64c0:	it	mi
    64c2:	strhmi	r3, [r0, #18]
  if (flags & T_CREATE) {
    64c4:	lsls	r4, r6, #30
    64c6:	uxth	r2, r2
    64c8:	bpl.n	64dc <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
    dir->createTimeMs = second & 1 ? 100 : 0;
    64ca:	ands.w	r8, r8, #1
    64ce:	strh	r3, [r0, #16]
    64d0:	strh	r2, [r0, #14]
    64d2:	it	ne
    64d4:	movne.w	r8, #100	; 0x64
    64d8:	strb.w	r8, [r0, #13]
  if (flags & T_WRITE) {
    64dc:	lsls	r1, r6, #29
    64de:	bpl.n	64e4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb0>
    64e0:	strh	r3, [r0, #24]
    64e2:	strh	r2, [r0, #22]
  return m_vol->cacheSync();
    64e4:	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    64e6:	add.w	r0, r4, #36	; 0x24
    64ea:	bl	2de0 <FsCache::sync()>
    64ee:	cmp	r0, #0
    64f0:	beq.n	6484 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    64f2:	add.w	r0, r4, #564	; 0x234
    64f6:	bl	2de0 <FsCache::sync()>
    64fa:	cmp	r0, #0
    64fc:	beq.n	6484 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    64fe:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    6500:	ldr	r3, [r0, #0]
    6502:	ldr	r3, [r3, #28]
}
    6504:	add	sp, #8
    6506:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    650a:	bx	r3

0000650c <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    650c:	ldrb	r3, [r0, #2]
    650e:	lsls	r3, r3, #30
    6510:	bpl.n	6562 <FatFile::truncate()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    6512:	ldr	r3, [r0, #32]
bool FatFile::truncate() {
    6514:	push	{r4, lr}
    6516:	mov	r4, r0
    6518:	sub	sp, #8
  if (m_firstCluster == 0) {
    651a:	cbz	r3, 6548 <FatFile::truncate()+0x3c>
    return true;
  }
  if (m_curCluster) {
    651c:	ldr	r1, [r0, #16]
    651e:	cbnz	r1, 6566 <FatFile::truncate()+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    6520:	str	r3, [sp, #4]
    m_firstCluster = 0;
    6522:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    6524:	mov	r1, r3
    6526:	ldr	r0, [r4, #8]
    6528:	bl	6904 <FatPartition::freeChain(unsigned long)>
    652c:	cbz	r0, 655c <FatFile::truncate()+0x50>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    652e:	ldrb	r3, [r4, #2]
  m_fileSize = m_curPosition;
    6530:	ldr	r1, [r4, #20]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6532:	orn	r3, r3, #127	; 0x7f
  if (!isOpen()) {
    6536:	ldrb	r2, [r4, #0]
  m_fileSize = m_curPosition;
    6538:	str	r1, [r4, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    653a:	strb	r3, [r4, #2]
  if (!isOpen()) {
    653c:	cbz	r2, 6548 <FatFile::truncate()+0x3c>
    653e:	mov	r0, r4
    6540:	bl	570c <FatFile::sync() [clone .part.0]>
  return sync();

fail:
  return false;
}
    6544:	add	sp, #8
    6546:	pop	{r4, pc}
    return true;
    6548:	movs	r0, #1
}
    654a:	add	sp, #8
    654c:	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    654e:	mvn.w	r2, #4026531840	; 0xf0000000
    6552:	ldr	r1, [r4, #16]
    6554:	ldr	r0, [r4, #8]
    6556:	bl	681c <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    655a:	cbnz	r0, 6578 <FatFile::truncate()+0x6c>
  return false;
    655c:	movs	r0, #0
}
    655e:	add	sp, #8
    6560:	pop	{r4, pc}
  return false;
    6562:	movs	r0, #0
}
    6564:	bx	lr
    toFree = 0;
    6566:	movs	r3, #0
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    6568:	add	r2, sp, #4
    656a:	ldr	r0, [r0, #8]
    toFree = 0;
    656c:	str	r3, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    656e:	bl	67f8 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6572:	cmp	r0, #0
    6574:	blt.n	655c <FatFile::truncate()+0x50>
    if (fg) {
    6576:	bne.n	654e <FatFile::truncate()+0x42>
  if (toFree) {
    6578:	ldr	r3, [sp, #4]
    657a:	cmp	r3, #0
    657c:	beq.n	652e <FatFile::truncate()+0x22>
    657e:	b.n	6524 <FatFile::truncate()+0x18>

00006580 <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    6580:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    6584:	ldrb	r3, [r0, #2]
    6586:	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    6588:	lsls	r4, r3, #30
    658a:	bpl.n	667c <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    658c:	mov	r8, r1
    658e:	lsls	r1, r3, #28
    6590:	mov	r9, r2
    6592:	bmi.w	6700 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    6596:	ldr	r3, [r5, #20]
    6598:	adds.w	r2, r3, r9
    659c:	bcs.n	667c <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    659e:	cmp.w	r9, #0
    65a2:	beq.n	6626 <FatFile::write(void const*, unsigned int)+0xa6>
    65a4:	mov	r7, r9
    m_status = 0;
    65a6:	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    65aa:	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    65ac:	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    65b0:	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    65b2:	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    65b4:	ands.w	r4, r4, r3, lsr #9
    65b8:	bne.n	663a <FatFile::write(void const*, unsigned int)+0xba>
    65ba:	cmp	r6, #0
    65bc:	bne.n	663a <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    65be:	cmp	r1, #0
    65c0:	beq.n	66a0 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    65c2:	ldrb	r2, [r5, #2]
    65c4:	lsls	r2, r2, #25
    65c6:	bpl.n	66b6 <FatFile::write(void const*, unsigned int)+0x136>
    65c8:	ldr	r2, [r5, #28]
    65ca:	cmp	r2, r3
    65cc:	bls.n	66b6 <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    65ce:	adds	r1, #1
    65d0:	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    65d2:	subs	r1, #2
    65d4:	ldrb	r2, [r0, #6]
    65d6:	ldr	r3, [r0, #20]
    65d8:	lsls	r1, r2
    65da:	add	r1, r3
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    65dc:	cmp.w	r7, #512	; 0x200
    65e0:	bcc.n	668a <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
    65e2:	cmp.w	r7, #1024	; 0x400
    65e6:	bcc.n	66ca <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    65e8:	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    65ea:	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    65ec:	subs	r3, r3, r4
    65ee:	cmp	r3, r2
    65f0:	it	cs
    65f2:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    65f4:	ldr	r2, [r0, #44]	; 0x2c
    65f6:	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    65f8:	mov.w	r4, r3, lsl #9
    65fc:	bcc.n	660e <FatFile::write(void const*, unsigned int)+0x8e>
    65fe:	adds	r6, r3, r1
    6600:	cmp	r2, r6
    6602:	bcs.n	660e <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    6604:	mov.w	r2, #4294967295
    m_status = 0;
    6608:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    660c:	str	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeSectors(sector, src, count);
    660e:	ldr	r0, [r0, #40]	; 0x28
    6610:	mov	r2, r8
    6612:	ldr	r6, [r0, #0]
    6614:	ldr	r6, [r6, #36]	; 0x24
    6616:	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    6618:	cbz	r0, 667c <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    661a:	ldr	r3, [r5, #20]
  while (nToWrite) {
    661c:	subs	r7, r7, r4
    src += n;
    661e:	add	r8, r4
    m_curPosition += n;
    6620:	add	r3, r4
    6622:	str	r3, [r5, #20]
  while (nToWrite) {
    6624:	bne.n	65aa <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    6626:	ldr	r2, [r5, #28]
    6628:	cmp	r2, r3
    662a:	bcs.n	671a <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    662c:	ldrb	r2, [r5, #2]
    662e:	mov	r0, r9
    m_fileSize = m_curPosition;
    6630:	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6632:	orn	r3, r2, #127	; 0x7f
    6636:	strb	r3, [r5, #2]
    6638:	b.n	6686 <FatFile::write(void const*, unsigned int)+0x106>
    663a:	ldrb	r2, [r0, #6]
    663c:	subs	r1, #2
    663e:	ldr	r3, [r0, #20]
    6640:	lsls	r1, r2
    6642:	add	r1, r3
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    6644:	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6646:	cmp	r6, #0
    6648:	beq.n	65dc <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    664a:	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    664e:	movs	r2, #1
    6650:	cmp	r4, r7
    6652:	it	cs
    6654:	movcs	r4, r7
    return m_cache.prepare(sector, options);
    6656:	adds	r0, #36	; 0x24
    6658:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    665c:	cbz	r0, 667c <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    665e:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6660:	add	r6, r4
      memcpy(dst, src, n);
    6662:	mov	r2, r4
    6664:	mov	r1, r8
    6666:	bl	9d30 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    666a:	cmp.w	r6, #512	; 0x200
    666e:	ldr	r0, [r5, #8]
    6670:	bne.n	661a <FatFile::write(void const*, unsigned int)+0x9a>
  bool cacheSyncData() { return m_cache.sync(); }
    6672:	adds	r0, #36	; 0x24
    6674:	bl	2de0 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    6678:	cmp	r0, #0
    667a:	bne.n	661a <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    667c:	ldrb	r3, [r5, #1]
  return 0;
    667e:	movs	r0, #0
  m_error |= WRITE_ERROR;
    6680:	orr.w	r3, r3, #1
    6684:	strb	r3, [r5, #1]
}
    6686:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    668a:	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    668e:	ldr	r2, [r5, #20]
    6690:	ldr	r3, [r5, #28]
    6692:	cmp	r4, r7
    6694:	it	cs
    6696:	movcs	r4, r7
    6698:	cmp	r2, r3
    669a:	bcc.n	66a8 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    669c:	movs	r2, #5
    669e:	b.n	6656 <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    66a0:	ldr	r1, [r5, #32]
    66a2:	cbz	r1, 66ee <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    66a4:	str	r1, [r5, #16]
    66a6:	b.n	65d2 <FatFile::write(void const*, unsigned int)+0x52>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    66a8:	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    66aa:	tst.w	r3, #32
    66ae:	ite	ne
    66b0:	movne	r2, #5
    66b2:	moveq	r2, #1
    66b4:	b.n	6656 <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    66b6:	add.w	r2, r5, #16
    66ba:	bl	67f8 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    66be:	cmp	r0, #0
    66c0:	blt.n	667c <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    66c2:	beq.n	670e <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    66c4:	ldr	r0, [r5, #8]
    66c6:	ldr	r1, [r5, #16]
    66c8:	b.n	65d2 <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    66ca:	ldr	r3, [r0, #44]	; 0x2c
    66cc:	cmp	r3, r1
    66ce:	bne.n	66da <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    66d0:	mov.w	r3, #4294967295
    m_status = 0;
    66d4:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    66d8:	str	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeSector(sector, src);
    66da:	ldr	r0, [r0, #40]	; 0x28
    66dc:	mov	r2, r8
    66de:	ldr	r3, [r0, #0]
    66e0:	ldr	r3, [r3, #32]
    66e2:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    66e4:	cmp	r0, #0
    66e6:	beq.n	667c <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    66e8:	mov.w	r4, #512	; 0x200
    66ec:	b.n	661a <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    66ee:	mov	r0, r5
    66f0:	bl	57c8 <FatFile::addCluster()>
    66f4:	cmp	r0, #0
    66f6:	beq.n	667c <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    66f8:	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    66fa:	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    66fc:	str	r1, [r5, #32]
    66fe:	b.n	65d2 <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    6700:	ldr	r1, [r0, #28]
    6702:	bl	61c0 <FatFile::seekSet(unsigned long)>
    6706:	cmp	r0, #0
    6708:	bne.w	6596 <FatFile::write(void const*, unsigned int)+0x16>
    670c:	b.n	667c <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    670e:	mov	r0, r5
    6710:	bl	57c8 <FatFile::addCluster()>
    6714:	cmp	r0, #0
    6716:	bne.n	66c4 <FatFile::write(void const*, unsigned int)+0x144>
    6718:	b.n	667c <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    671a:	ldr	r3, [pc, #20]	; (6730 <FatFile::write(void const*, unsigned int)+0x1b0>)
    671c:	ldr	r3, [r3, #0]
    671e:	cbz	r3, 672c <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6720:	ldrb	r3, [r5, #2]
    6722:	mov	r0, r9
    6724:	orn	r3, r3, #127	; 0x7f
    6728:	strb	r3, [r5, #2]
    672a:	b.n	6686 <FatFile::write(void const*, unsigned int)+0x106>
    672c:	mov	r0, r9
    672e:	b.n	6686 <FatFile::write(void const*, unsigned int)+0x106>
    6730:	.word	0x20006104

00006734 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6734:	push	{r4, r5, r6, lr}
  uint8_t fatType() const { return m_fatType; }
    6736:	ldrb	r3, [r0, #7]
    6738:	mov	r5, r0
    673a:	mov	r4, r1
    673c:	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    673e:	cmp	r3, #32
    6740:	beq.n	6776 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x42>
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    next = getLe32(pc + offset);
  } else if (fatType() == 16) {
    6742:	cmp	r3, #16
    6744:	beq.n	674c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x18>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6746:	mov.w	r0, #4294967295
}
    674a:	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    674c:	ldr	r3, [r0, #24]
    674e:	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    6752:	add.w	r0, r0, #564	; 0x234
    6756:	movs	r2, #2
    6758:	add	r1, r3
    675a:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    675e:	cmp	r0, #0
    6760:	beq.n	6746 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6762:	lsls	r1, r4, #1
  if (isEOC(next)) {
    6764:	ldr	r2, [r5, #28]
    next = getLe16(pc + offset);
    6766:	and.w	r1, r1, #510	; 0x1fe
    676a:	ldrh	r3, [r0, r1]
  if (isEOC(next)) {
    676c:	cmp	r2, r3
    676e:	bcc.n	6798 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x64>
  return 1;
    6770:	movs	r0, #1
  *value = next;
    6772:	str	r3, [r6, #0]
}
    6774:	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6776:	ldr	r1, [r0, #24]
    6778:	movs	r2, #2
    677a:	add.w	r0, r0, #564	; 0x234
    677e:	add.w	r1, r1, r4, lsr #7
    6782:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6786:	cmp	r0, #0
    6788:	beq.n	6746 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    678a:	lsls	r1, r4, #2
  if (isEOC(next)) {
    678c:	ldr	r2, [r5, #28]
    next = getLe32(pc + offset);
    678e:	and.w	r1, r1, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    6792:	ldr	r3, [r0, r1]
  if (isEOC(next)) {
    6794:	cmp	r2, r3
    6796:	bcs.n	6770 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x3c>
    return 0;
    6798:	movs	r0, #0
}
    679a:	pop	{r4, r5, r6, pc}

0000679c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    679c:	push	{r3, r4, r5, lr}
  uint8_t fatType() const { return m_fatType; }
    679e:	ldrb	r3, [r0, #7]
    67a0:	mov	r4, r1
    67a2:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    67a4:	cmp	r3, #32
    67a6:	beq.n	67d4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x38>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    setLe32(pc + offset, value);
    return true;
  }

  if (fatType() == 16) {
    67a8:	cmp	r3, #16
    67aa:	beq.n	67b0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    67ac:	movs	r0, #0
}
    67ae:	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    67b0:	ldr	r3, [r0, #24]
    67b2:	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    67b6:	add.w	r0, r0, #564	; 0x234
    67ba:	movs	r2, #3
    67bc:	add	r1, r3
    67be:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    67c2:	mov	r3, r0
    67c4:	cmp	r0, #0
    67c6:	beq.n	67ac <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    67c8:	lsls	r1, r4, #1
    return true;
    67ca:	movs	r0, #1
    setLe16(pc + offset, value);
    67cc:	and.w	r1, r1, #510	; 0x1fe
    67d0:	strh	r5, [r3, r1]
}
    67d2:	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    67d4:	ldr	r1, [r0, #24]
    67d6:	movs	r2, #3
    67d8:	add.w	r0, r0, #564	; 0x234
    67dc:	add.w	r1, r1, r4, lsr #7
    67e0:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    67e4:	mov	r3, r0
    67e6:	cmp	r0, #0
    67e8:	beq.n	67ac <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    67ea:	lsls	r1, r4, #2
    return true;
    67ec:	movs	r0, #1
    setLe32(pc + offset, value);
    67ee:	and.w	r1, r1, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    67f2:	str	r5, [r3, r1]
}
    67f4:	pop	{r3, r4, r5, pc}
    67f6:	nop

000067f8 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    67f8:	cmp	r1, #1
    67fa:	bls.n	6816 <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    67fc:	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    67fe:	ldr	r4, [r0, #28]
    6800:	cmp	r4, r1
    6802:	bcc.n	680c <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    6804:	ldr.w	r4, [sp], #4
    6808:	b.w	6734 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    680c:	mov.w	r0, #4294967295
    6810:	ldr.w	r4, [sp], #4
    6814:	bx	lr
    6816:	mov.w	r0, #4294967295
    681a:	bx	lr

0000681c <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    681c:	cmp	r1, #1
    681e:	bls.n	683a <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6820:	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > m_lastCluster) {
    6822:	ldr	r3, [r0, #28]
    6824:	mov	r4, r1
    6826:	cmp	r3, r1
    6828:	bcc.n	6836 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
  uint8_t fatType() const { return m_fatType; }
    682a:	ldrb	r3, [r0, #7]
    682c:	mov	r5, r2
  if (fatType() == 32) {
    682e:	cmp	r3, #32
    6830:	beq.n	6862 <FatPartition::fatPut(unsigned long, unsigned long)+0x46>
  if (fatType() == 16) {
    6832:	cmp	r3, #16
    6834:	beq.n	683e <FatPartition::fatPut(unsigned long, unsigned long)+0x22>
  return false;
    6836:	movs	r0, #0
}
    6838:	pop	{r3, r4, r5, pc}
  return false;
    683a:	movs	r0, #0
}
    683c:	bx	lr
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    683e:	ldr	r3, [r0, #24]
    6840:	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    6844:	add.w	r0, r0, #564	; 0x234
    6848:	movs	r2, #3
    684a:	add	r1, r3
    684c:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6850:	mov	r3, r0
    6852:	cmp	r0, #0
    6854:	beq.n	6836 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6856:	lsls	r4, r4, #1
    return true;
    6858:	movs	r0, #1
    setLe16(pc + offset, value);
    685a:	and.w	r4, r4, #510	; 0x1fe
    685e:	strh	r5, [r3, r4]
}
    6860:	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6862:	ldr	r1, [r0, #24]
    6864:	movs	r2, #3
    6866:	add.w	r0, r0, #564	; 0x234
    686a:	add.w	r1, r1, r4, lsr #7
    686e:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6872:	mov	r3, r0
    6874:	cmp	r0, #0
    6876:	beq.n	6836 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6878:	lsls	r4, r4, #2
    return true;
    687a:	movs	r0, #1
    setLe32(pc + offset, value);
    687c:	and.w	r4, r4, #508	; 0x1fc
    6880:	str	r5, [r3, r4]
}
    6882:	pop	{r3, r4, r5, pc}

00006884 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6884:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    6888:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    688a:	sub	sp, #8
    688c:	mov	r5, r0
    688e:	mov	r6, r1
  if (m_allocSearchStart < current) {
    6890:	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6892:	mov	r8, r2
  if (m_allocSearchStart < current) {
    6894:	bcc.n	68fe <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    setStart = true;
    6896:	movs	r7, #1
    find++;
    6898:	adds	r4, #1
    if (find > m_lastCluster) {
    689a:	ldr	r3, [r5, #28]
    689c:	add	r2, sp, #4
    689e:	mov	r0, r5
    68a0:	cmp	r3, r4
    68a2:	bcs.n	68b0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    68a4:	cbnz	r7, 68f4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
      find = m_allocSearchStart;
    68a6:	ldr	r4, [r5, #12]
      setStart = true;
    68a8:	movs	r7, #1
    find++;
    68aa:	add	r4, r7
    if (find > m_lastCluster) {
    68ac:	cmp	r3, r4
    68ae:	bcc.n	68f4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (cluster < 2 || cluster > m_lastCluster) {
    68b0:	cmp	r6, r4
    68b2:	it	ne
    68b4:	cmpne	r4, #1
    68b6:	mov	r1, r4
    68b8:	bls.n	68f4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    68ba:	bl	6734 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    68be:	cmp	r0, #0
    68c0:	blt.n	68f4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    if (fg && f == 0) {
    68c2:	beq.n	6898 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    68c4:	ldr	r3, [sp, #4]
    68c6:	cmp	r3, #0
    68c8:	bne.n	6898 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    68ca:	cbz	r7, 68ce <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    68cc:	str	r4, [r5, #12]
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    68ce:	mvn.w	r2, #4026531840	; 0xf0000000
    68d2:	mov	r1, r4
    68d4:	mov	r0, r5
    68d6:	bl	681c <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    68da:	mov	r7, r0
    68dc:	cbz	r0, 68f4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (current) {
    68de:	cbnz	r6, 68e6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  *next = find;
    68e0:	str.w	r4, [r8]
  return true;
    68e4:	b.n	68f6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (!fatPut(current, find)) {
    68e6:	mov	r1, r6
    68e8:	mov	r0, r5
    68ea:	mov	r2, r4
    68ec:	bl	681c <FatPartition::fatPut(unsigned long, unsigned long)>
    68f0:	cmp	r0, #0
    68f2:	bne.n	68e0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5c>
  return false;
    68f4:	movs	r7, #0
}
    68f6:	mov	r0, r7
    68f8:	add	sp, #8
    68fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68fe:	mov	r4, r1
    setStart = false;
    6900:	movs	r7, #0
    6902:	b.n	6898 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>

00006904 <FatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    6904:	push	{r4, r5, r6, lr}
    6906:	mov	r5, r0
    6908:	sub	sp, #8
    690a:	mov	r4, r1
    690c:	b.n	693e <FatPartition::freeChain(unsigned long)+0x3a>
  if (cluster < 2 || cluster > m_lastCluster) {
    690e:	ldr	r3, [r5, #28]
    6910:	cmp	r4, r3
    6912:	bhi.n	6948 <FatPartition::freeChain(unsigned long)+0x44>
    6914:	bl	6734 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    6918:	mov	r6, r0
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    691a:	mov	r1, r4
    691c:	movs	r2, #0
    691e:	cmp	r6, #0
    6920:	mov	r0, r5
    6922:	blt.n	6948 <FatPartition::freeChain(unsigned long)+0x44>
  if (cluster < 2 || cluster > m_lastCluster) {
    6924:	ldr	r3, [r5, #28]
    6926:	cmp	r4, r3
    6928:	bhi.n	6948 <FatPartition::freeChain(unsigned long)+0x44>
    692a:	bl	679c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    692e:	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    6930:	cbz	r0, 6948 <FatPartition::freeChain(unsigned long)+0x44>
    if (cluster < m_allocSearchStart) {
    6932:	ldr	r3, [r5, #12]
    6934:	cmp	r3, r4
    }
    cluster = next;
    6936:	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    6938:	it	hi
    693a:	strhi	r2, [r5, #12]
  } while (fg);
    693c:	cbz	r6, 694a <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    693e:	cmp	r4, #1
    6940:	mov	r1, r4
    6942:	add	r2, sp, #4
    6944:	mov	r0, r5
    6946:	bhi.n	690e <FatPartition::freeChain(unsigned long)+0xa>

  return true;

fail:
  return false;
    6948:	movs	r0, #0
}
    694a:	add	sp, #8
    694c:	pop	{r4, r5, r6, pc}
    694e:	nop

00006950 <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    6950:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t fatType() const { return m_fatType; }
    6954:	ldrb	r3, [r0, #7]
    6956:	mov	r6, r0
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6958:	ldr	r5, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    695a:	cmp	r3, #32
  uint32_t todo = m_lastCluster + 1;
    695c:	add.w	r5, r5, #1
  } else if (fatType() == 16 || fatType() == 32) {
    6960:	beq.n	6966 <FatPartition::freeClusterCount()+0x16>
    6962:	cmp	r3, #16
    6964:	bne.n	69e4 <FatPartition::freeClusterCount()+0x94>
    sector = m_fatStartSector;
    6966:	ldr.w	r8, [r6, #24]
    while (todo) {
    696a:	cmp	r5, #0
    696c:	beq.n	69ec <FatPartition::freeClusterCount()+0x9c>
    return m_fatCache.prepare(sector, options);
    696e:	add.w	r7, r6, #564	; 0x234
  uint32_t free = 0;
    6972:	movs	r4, #0
    6974:	mov	r1, r8
    6976:	movs	r2, #2
    6978:	mov	r0, r7
    697a:	add.w	r8, r8, #1
    697e:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
      uint8_t* pc = fatCachePrepare(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
    6982:	cbz	r0, 69e4 <FatPartition::freeClusterCount()+0x94>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    6984:	ldrb	r3, [r6, #7]
    6986:	cmp	r3, #16
    6988:	beq.n	69b2 <FatPartition::freeClusterCount()+0x62>
      if (todo < n) {
    698a:	cmp	r5, #127	; 0x7f
    698c:	bhi.n	69d8 <FatPartition::freeClusterCount()+0x88>
        n = todo;
    698e:	uxth	r3, r5
    6990:	mov	r1, r5
    6992:	subs	r2, r3, #1
    6994:	subs	r3, r0, #4
    6996:	uxth	r2, r2
    6998:	add.w	r0, r0, r2, lsl #2
          }
        }
      } else {
        uint32_t* p32 = reinterpret_cast<uint32_t*>(pc);
        for (uint16_t i = 0; i < n; i++) {
          if (p32[i] == 0) {
    699c:	ldr.w	r2, [r3, #4]!
    69a0:	cbnz	r2, 69a4 <FatPartition::freeClusterCount()+0x54>
            free++;
    69a2:	adds	r4, #1
        for (uint16_t i = 0; i < n; i++) {
    69a4:	cmp	r3, r0
    69a6:	bne.n	699c <FatPartition::freeClusterCount()+0x4c>
    while (todo) {
    69a8:	subs	r5, r5, r1
    69aa:	bne.n	6974 <FatPartition::freeClusterCount()+0x24>
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
    69ac:	mov	r0, r4
  return free;

fail:
  return -1;
}
    69ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (todo < n) {
    69b2:	cmp	r5, #255	; 0xff
    69b4:	bls.n	69de <FatPartition::freeClusterCount()+0x8e>
    69b6:	mov.w	r1, #256	; 0x100
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    69ba:	mov	r3, r1
    69bc:	subs	r2, r3, #1
    69be:	subs	r3, r0, #2
    69c0:	uxth	r2, r2
    69c2:	add.w	r0, r0, r2, lsl #1
          if (p16[i] == 0) {
    69c6:	ldrh.w	r2, [r3, #2]!
    69ca:	cbnz	r2, 69ce <FatPartition::freeClusterCount()+0x7e>
            free++;
    69cc:	adds	r4, #1
        for (uint16_t i = 0; i < n; i++) {
    69ce:	cmp	r0, r3
    69d0:	bne.n	69c6 <FatPartition::freeClusterCount()+0x76>
    while (todo) {
    69d2:	subs	r5, r5, r1
    69d4:	bne.n	6974 <FatPartition::freeClusterCount()+0x24>
    69d6:	b.n	69ac <FatPartition::freeClusterCount()+0x5c>
      if (todo < n) {
    69d8:	movs	r1, #128	; 0x80
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    69da:	mov	r3, r1
    69dc:	b.n	6992 <FatPartition::freeClusterCount()+0x42>
        n = todo;
    69de:	uxth	r3, r5
    69e0:	mov	r1, r5
    69e2:	b.n	69bc <FatPartition::freeClusterCount()+0x6c>
  return -1;
    69e4:	mov.w	r0, #4294967295
}
    69e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (todo) {
    69ec:	mov	r0, r5
  return free;
    69ee:	b.n	69ae <FatPartition::freeClusterCount()+0x5e>

000069f0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    69f0:	push	{r3, r4, r5, r6, r7, lr}
    69f2:	mov	r6, r3
    m_sector = 0XFFFFFFFF;
    69f4:	mov.w	r3, #4294967295
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    69f8:	mov.w	ip, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    69fc:	mov	r4, r0
    69fe:	str	r3, [r0, #44]	; 0x2c
  m_allocSearchStart = 1;
  m_cache.init(dev);
    6a00:	add.w	r7, r0, #36	; 0x24
    6a04:	str.w	r3, [r0, #572]	; 0x23c
  m_allocSearchStart = 1;
    6a08:	movs	r3, #1
  m_blockDev = dev;
    6a0a:	str	r1, [r0, #0]
  m_fatType = 0;
    6a0c:	strb.w	ip, [r0, #7]
    m_blockDev = blockDev;
    6a10:	str	r1, [r0, #40]	; 0x28
    6a12:	str.w	r1, [r0, #568]	; 0x238
    m_status = 0;
    6a16:	strb.w	ip, [r0, #36]	; 0x24
    6a1a:	strb.w	ip, [r0, #564]	; 0x234
  m_allocSearchStart = 1;
    6a1e:	str	r3, [r0, #12]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    6a20:	cbz	r2, 6a58 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x68>
    if (part > 4) {
    6a22:	cmp	r2, #4
    6a24:	mov	r5, r2
    6a26:	bls.n	6a2c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x3c>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    6a28:	movs	r0, #0
}
    6a2a:	pop	{r3, r4, r5, r6, r7, pc}
    return m_cache.prepare(sector, options);
    6a2c:	mov	r2, ip
    6a2e:	mov	r1, ip
    6a30:	mov	r0, r7
    6a32:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    6a36:	cmp	r0, #0
    6a38:	beq.n	6a28 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    MbrPart_t* mp = mbr->part + part - 1;
    6a3a:	mvn.w	r3, #4026531840	; 0xf0000000
    6a3e:	add.w	r0, r0, #446	; 0x1be
    6a42:	add	r3, r5
    6a44:	lsls	r1, r3, #4
    6a46:	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    6a4a:	ldrb	r2, [r3, #4]
    6a4c:	cmp	r2, #0
    6a4e:	beq.n	6a28 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    6a50:	ldrb	r2, [r0, r1]
    6a52:	lsls	r2, r2, #25
    6a54:	bne.n	6a28 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    6a56:	ldr	r6, [r3, #8]
    6a58:	movs	r2, #0
    6a5a:	mov	r1, r6
    6a5c:	mov	r0, r7
    6a5e:	bl	2e38 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    6a62:	cmp	r0, #0
    6a64:	beq.n	6a28 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    6a66:	ldrb	r3, [r0, #16]
    6a68:	cmp	r3, #2
    6a6a:	bne.n	6a28 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    6a6c:	ldrh.w	r3, [r0, #11]
    6a70:	cmp.w	r3, #512	; 0x200
    6a74:	bne.n	6a28 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6a76:	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6a78:	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6a7a:	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6a7c:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6a7e:	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    6a80:	mov.w	r3, #0
    6a84:	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6a86:	beq.n	6b0c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x11c>
    6a88:	movs	r2, #1
    6a8a:	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    6a8c:	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6a8e:	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    6a90:	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6a92:	cmp	r1, r2
    6a94:	beq.n	6aa0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb0>
    if (tmp == 0) {
    6a96:	cmp	r3, #8
    6a98:	bne.n	6a8a <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x9a>
  return false;
    6a9a:	movs	r0, #0
    6a9c:	strb	r3, [r4, #6]
}
    6a9e:	pop	{r3, r4, r5, r6, r7, pc}
  countOfClusters >>= m_sectorsPerClusterShift;
    6aa0:	mov	r5, r3
    6aa2:	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    6aa4:	ldrh	r1, [r0, #22]
    6aa6:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6aa8:	cbnz	r1, 6aae <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xbe>
    6aaa:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6aac:	str	r1, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    6aae:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    6ab0:	ldrh.w	r2, [r0, #17]
    6ab4:	add	r3, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    6ab6:	strh	r2, [r4, #8]
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    6ab8:	lsls	r2, r2, #5
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    6aba:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6abc:	add.w	r3, r3, r1, lsl #1
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    6ac0:	addw	r2, r2, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6ac4:	str	r3, [r4, #32]
      m_rootDirStart +
    6ac6:	add.w	r3, r3, r2, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    6aca:	ldrh.w	r2, [r0, #19]
  m_dataStartSector =
    6ace:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    6ad0:	cbnz	r2, 6ad4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe4>
  return *reinterpret_cast<const uint32_t*>(src);
    6ad2:	ldr	r2, [r0, #32]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
    6ad4:	subs	r3, r6, r3
    6ad6:	add	r3, r2
  countOfClusters >>= m_sectorsPerClusterShift;
    6ad8:	lsrs	r3, r5
  m_lastCluster = countOfClusters + 1;
    6ada:	adds	r2, r3, #1
    6adc:	str	r2, [r4, #28]
  if (countOfClusters < 4085) {
    6ade:	movw	r2, #4084	; 0xff4
    6ae2:	cmp	r3, r2
    6ae4:	bls.n	6b00 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x110>
  } else if (countOfClusters < 65525) {
    6ae6:	movw	r2, #65524	; 0xfff4
    6aea:	cmp	r3, r2
    6aec:	bls.n	6b08 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x118>
    6aee:	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    6af0:	movs	r3, #32
    6af2:	str	r2, [r4, #32]
  return true;
    6af4:	movs	r0, #1
    m_fatType = 16;
    6af6:	strb	r3, [r4, #7]
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
    6af8:	str	r1, [r4, #48]	; 0x30
    6afa:	str.w	r1, [r4, #576]	; 0x240
}
    6afe:	pop	{r3, r4, r5, r6, r7, pc}
    m_fatType = 12;
    6b00:	movs	r3, #12
  return false;
    6b02:	movs	r0, #0
    m_fatType = 12;
    6b04:	strb	r3, [r4, #7]
}
    6b06:	pop	{r3, r4, r5, r6, r7, pc}
    6b08:	movs	r3, #16
    6b0a:	b.n	6af4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x104>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6b0c:	mov	r5, r3
    6b0e:	b.n	6aa4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb4>

00006b10 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6b10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    6b14:	mov	lr, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6b16:	sub	sp, #40	; 0x28
    6b18:	mov	r5, r2
    6b1a:	ldr	r4, [r2, #0]
    6b1c:	mov	r6, r0
    6b1e:	mov	r8, r1
  FatFile dir = *this;
    6b20:	add.w	ip, sp, #4
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6b24:	mov	r7, r3
  FatFile dir = *this;
    6b26:	ldmia.w	lr!, {r0, r1, r2, r3}
    6b2a:	stmia.w	ip!, {r0, r1, r2, r3}
    6b2e:	ldmia.w	lr!, {r0, r1, r2, r3}
    6b32:	stmia.w	ip!, {r0, r1, r2, r3}
    6b36:	ldr.w	r3, [lr]
    6b3a:	str	r4, [r5, #4]
    6b3c:	str.w	r3, [ip]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6b40:	cmp	r7, #0
    6b42:	beq.n	6bbc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xac>
    6b44:	mov.w	r9, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    6b48:	sub.w	r1, r8, r9
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    6b4c:	add	r0, sp, #4
    6b4e:	uxth	r1, r1
    6b50:	lsls	r1, r1, #5
    6b52:	bl	61c0 <FatFile::seekSet(unsigned long)>
    6b56:	cbz	r0, 6bc0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    6b58:	movs	r1, #0
    6b5a:	add	r0, sp, #4
    6b5c:	bl	5f00 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6b60:	mov	sl, r0
    6b62:	cbz	r0, 6bc0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    6b64:	movs	r4, #0
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
    6b66:	uxtb	r2, r4
    6b68:	mov	r1, sl
    6b6a:	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    6b6c:	adds	r4, #1
      uint16_t u = getLfnChar(ldir, i);
    6b6e:	bl	5564 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
        return false;
      }
#else   // USE_UTF8_LONG_NAMES
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6b72:	uxtb	r3, r0
      if (fname->atEnd()) {
    6b74:	ldrd	r1, r2, [r5, #4]
    6b78:	cmp	r2, r1
  char getch() { return atEnd() ? 0 : *next++; }
    6b7a:	add.w	ip, r1, #1
    6b7e:	beq.n	6bc8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6b80:	cmp	r0, #127	; 0x7f
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    6b82:	sub.w	r2, r3, #97	; 0x61
    6b86:	sub.w	lr, r3, #32
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6b8a:	bhi.n	6bc0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    6b8c:	cmp	r2, #25
    6b8e:	str.w	ip, [r5, #4]
    6b92:	ldrb	r2, [r1, #0]
    6b94:	it	ls
    6b96:	uxtbls.w	r3, lr
    6b9a:	sub.w	r1, r2, #97	; 0x61
    6b9e:	sub.w	r0, r2, #32
    6ba2:	cmp	r1, #25
    6ba4:	it	ls
    6ba6:	uxtbls	r2, r0
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6ba8:	cmp	r2, r3
    6baa:	bne.n	6bc0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    for (uint8_t i = 0; i < 13; i++) {
    6bac:	cmp	r4, #13
    6bae:	bne.n	6b66 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x56>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6bb0:	add.w	r9, r9, #1
    6bb4:	uxtb.w	r9, r9
    6bb8:	cmp	r7, r9
    6bba:	bcs.n	6b48 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x38>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    6bbc:	movs	r0, #1
    6bbe:	b.n	6bc2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb2>

fail:
  return false;
    6bc0:	movs	r0, #0
}
    6bc2:	add	sp, #40	; 0x28
    6bc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return u == 0;
    6bc8:	clz	r0, r0
    6bcc:	lsrs	r0, r0, #5
}
    6bce:	add	sp, #40	; 0x28
    6bd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006bd4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6bd4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    6bd8:	mov	lr, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6bda:	sub	sp, #40	; 0x28
    6bdc:	mov	r4, r2
    6bde:	mov	r8, r1
    6be0:	mov	r6, r3
  FatFile dir = *this;
    6be2:	add.w	r9, sp, #4
    6be6:	add.w	r7, r2, #17
    6bea:	add.w	ip, r2, #28
    uint8_t sum = 0;
    6bee:	movs	r5, #0
    6bf0:	ldmia.w	lr!, {r0, r1, r2, r3}
    6bf4:	stmia.w	r9!, {r0, r1, r2, r3}
    6bf8:	ldmia.w	lr!, {r0, r1, r2, r3}
    6bfc:	stmia.w	r9!, {r0, r1, r2, r3}
    6c00:	ldr.w	r3, [lr]
    6c04:	str.w	r3, [r9]
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6c08:	lsls	r3, r5, #7
    6c0a:	ldrb.w	r2, [r7, #1]!
    6c0e:	orr.w	r3, r3, r5, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    6c12:	cmp	r7, ip
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6c14:	uxtab	r3, r2, r3
    6c18:	uxtb	r5, r3
    for (uint8_t i = 0; i < 11; i++) {
    6c1a:	bne.n	6c08 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
  void reset() { next = begin; }
    6c1c:	ldr	r3, [r4, #0]
    6c1e:	str	r3, [r4, #4]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6c20:	cmp	r6, #0
    6c22:	beq.n	6cd8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x104>
  uint8_t fc = 0;
    6c24:	mov.w	r9, #0
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6c28:	mov.w	sl, #1
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    6c2c:	mov	r7, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    6c2e:	sub.w	r1, r8, sl
    6c32:	add	r0, sp, #4
    6c34:	uxth	r1, r1
    6c36:	lsls	r1, r1, #5
    6c38:	bl	61c0 <FatFile::seekSet(unsigned long)>
    6c3c:	cmp	r0, #0
    6c3e:	beq.n	6ce8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    6c40:	movs	r1, #0
    6c42:	add	r0, sp, #4
    6c44:	bl	5f00 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6c48:	cmp	r0, #0
    6c4a:	beq.n	6ce8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    6c4c:	ldr	r2, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6c4e:	cmp	sl, r6
  bool atEnd() { return next == end; }
    6c50:	mov.w	ip, #1
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    6c54:	ldrb.w	r3, [r2, #36]	; 0x24
    6c58:	orr.w	r3, r3, #1
    6c5c:	strb.w	r3, [r2, #36]	; 0x24
    6c60:	ite	eq
    6c62:	orreq.w	r2, sl, #64	; 0x40
    6c66:	movne	r2, sl
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6c68:	movs	r3, #15
    ldir->mustBeZero1 = 0;
    6c6a:	strb	r7, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6c6c:	strb	r2, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6c6e:	adds	r2, r0, #1
    6c70:	strb	r3, [r0, #11]
    6c72:	movs	r3, #0
    ldir->checksum = checksum;
    6c74:	strb	r5, [r0, #13]
    6c76:	ldr	r1, [r4, #8]
  *reinterpret_cast<uint16_t*>(dst) = src;
    6c78:	strh	r7, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    6c7a:	b.n	6c8a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb6>
    6c7c:	strh	r0, [r2, #0]
    6c7e:	add.w	ip, ip, #1
    6c82:	adds	r3, #1
    6c84:	adds	r2, #2
    6c86:	uxtb.w	ip, ip
    6c8a:	ldr	r0, [r4, #4]
      uint16_t cp;
      if (fname->atEnd()) {
    6c8c:	cmp	r0, r1
    6c8e:	beq.n	6cae <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xda>
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    6c90:	add.w	lr, r0, #1
    6c94:	str.w	lr, [r4, #4]
    6c98:	ldrb	r0, [r0, #0]
  if (i < 5) {
    6c9a:	cmp	r3, #4
    6c9c:	uxtb.w	lr, r3
    6ca0:	bls.n	6c7c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>
  } else if (i < 11) {
    6ca2:	cmp.w	lr, #10
    6ca6:	bhi.n	6cc2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xee>
    6ca8:	strh.w	r0, [r2, #3]
}
    6cac:	b.n	6c7e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
        cp = fc++ ? 0XFFFF : 0;
    6cae:	cmp.w	r9, #0
    6cb2:	beq.n	6ce0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x10c>
    6cb4:	add.w	r9, r9, #1
    6cb8:	movw	r0, #65535	; 0xffff
    6cbc:	uxtb.w	r9, r9
    6cc0:	b.n	6c9a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    for (uint8_t i = 0; i < 13; i++) {
    6cc2:	cmp.w	ip, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    6cc6:	strh.w	r0, [r2, #5]
    6cca:	bne.n	6c7e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6ccc:	add.w	sl, sl, #1
    6cd0:	uxtb.w	sl, sl
    6cd4:	cmp	r6, sl
    6cd6:	bcs.n	6c2e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    6cd8:	movs	r0, #1

fail:
  return false;
}
    6cda:	add	sp, #40	; 0x28
    6cdc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        cp = fc++ ? 0XFFFF : 0;
    6ce0:	mov	r0, r9
    6ce2:	mov.w	r9, #1
    6ce6:	b.n	6c9a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
  return false;
    6ce8:	movs	r0, #0
}
    6cea:	add	sp, #40	; 0x28
    6cec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006cf0 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    6cf0:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    6cf2:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    6cf6:	ldr.w	r3, [r2], #18
bool FatFile::makeSFN(FatLfn_t* fname) {
    6cfa:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    6cfe:	str.w	r1, [r0, #18]
bool FatFile::makeSFN(FatLfn_t* fname) {
    6d02:	mov	lr, r0
  const char* end = fname->end;
    6d04:	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    6d06:	str	r1, [r2, #4]
    6d08:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    6d0c:	ldrb	r2, [r3, #0]
    6d0e:	cmp	r2, #46	; 0x2e
    6d10:	ite	ne
    6d12:	movne	r0, #1
    6d14:	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
    6d16:	bne.n	6d20 <FatFile::makeSFN(FatLfn_t*)+0x30>
    6d18:	ldrb.w	r2, [r3, #1]!
    6d1c:	cmp	r2, #46	; 0x2e
    6d1e:	beq.n	6d18 <FatFile::makeSFN(FatLfn_t*)+0x28>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
    6d20:	subs	r1, r4, #1
    6d22:	cmp	r1, r3
    6d24:	bls.n	6d3e <FatFile::makeSFN(FatLfn_t*)+0x4e>
    6d26:	mov	r2, r1
    6d28:	b.n	6d30 <FatFile::makeSFN(FatLfn_t*)+0x40>
    6d2a:	cmp	r3, r2
    6d2c:	mov	r1, r2
    6d2e:	beq.n	6d3e <FatFile::makeSFN(FatLfn_t*)+0x4e>
    6d30:	mov	r1, r2
    6d32:	subs	r2, #1
    6d34:	ldrb.w	ip, [r1]
    6d38:	cmp.w	ip, #46	; 0x2e
    6d3c:	bne.n	6d2a <FatFile::makeSFN(FatLfn_t*)+0x3a>
  }

  for (; ptr < end; ptr++) {
    6d3e:	cmp	r4, r3
    6d40:	mov.w	r5, #0
    6d44:	bls.w	6e54 <FatFile::makeSFN(FatLfn_t*)+0x164>
    6d48:	movs	r6, #7
    6d4a:	movs	r7, #8
    6d4c:	mov	r9, r5
    6d4e:	mov	r8, r5
    6d50:	b.n	6d60 <FatFile::makeSFN(FatLfn_t*)+0x70>
    6d52:	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;                // Max index for full 8.3 name.
    6d54:	movs	r6, #10
      i = 8;                  // Place for extension.
    6d56:	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    6d5a:	movs	r7, #16
  for (; ptr < end; ptr++) {
    6d5c:	cmp	r4, r3
    6d5e:	bls.n	6e18 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    6d60:	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    6d62:	cmp	r2, #46	; 0x2e
    6d64:	it	eq
    6d66:	cmpeq	r1, r3
    6d68:	beq.n	6d52 <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    6d6a:	cmp	r2, #34	; 0x22
    6d6c:	beq.n	6d8a <FatFile::makeSFN(FatLfn_t*)+0x9a>
    6d6e:	cmp	r2, #124	; 0x7c
    6d70:	beq.n	6d8a <FatFile::makeSFN(FatLfn_t*)+0x9a>
    6d72:	sub.w	ip, r2, #91	; 0x5b
    6d76:	cmp.w	ip, #2
    6d7a:	bls.n	6d8a <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    6d7c:	sub.w	ip, r2, #42	; 0x2a
    6d80:	cmp.w	ip, #5
    6d84:	bhi.n	6dca <FatFile::makeSFN(FatLfn_t*)+0xda>
    6d86:	cmp	r2, #45	; 0x2d
    6d88:	beq.n	6dca <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    6d8a:	and.w	r2, r2, #192	; 0xc0
    6d8e:	cmp	r2, #128	; 0x80
    6d90:	beq.n	6e4e <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    6d92:	cmp	r6, r9
    6d94:	bcs.n	6df6 <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    6d96:	cmp	r1, r3
    6d98:	ite	cs
    6d9a:	movcs	r0, #0
    6d9c:	movcc	r0, #1
    6d9e:	cmp	r6, #10
    6da0:	it	eq
    6da2:	orreq.w	r0, r0, #1
    6da6:	cmp	r0, #0
    6da8:	beq.n	6e3a <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    6daa:	ldrb.w	r3, [lr, #18]
    6dae:	cmp	r3, #32
    6db0:	beq.n	6e34 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    6db2:	ldrb.w	r3, [lr, #16]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    6db6:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    6db8:	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    6dba:	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    6dbc:	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    6dbe:	strb.w	r0, [lr, #17]
    fname->sfn[fname->seqPos] = '~';
    6dc2:	strb	r1, [r3, #18]
    fname->sfn[fname->seqPos + 1] = '1';
    6dc4:	strb	r2, [r3, #19]
  }
  return true;

fail:
  return false;
}
    6dc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6dca:	sub.w	ip, r2, #58	; 0x3a
    6dce:	cmp.w	ip, #5
    6dd2:	bls.n	6d8a <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    6dd4:	sub.w	ip, r2, #33	; 0x21
    6dd8:	cmp.w	ip, #93	; 0x5d
    6ddc:	bhi.n	6d8a <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    6dde:	cmp	r6, r9
    6de0:	bcc.n	6d96 <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    6de2:	sub.w	ip, r2, #97	; 0x61
    6de6:	cmp.w	ip, #25
    6dea:	bhi.n	6e3e <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    6dec:	subs	r2, #32
        lc |= bit;
    6dee:	orrs	r5, r7
        c += 'A' - 'a';
    6df0:	uxtb	r2, r2
        lc |= bit;
    6df2:	uxtb	r5, r5
    6df4:	b.n	6dfa <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    6df6:	movs	r0, #0
        c = '_';
    6df8:	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    6dfa:	add.w	ip, r9, #1
    6dfe:	add	r9, lr
  for (; ptr < end; ptr++) {
    6e00:	adds	r3, #1
      fname->sfn[i++] = c;
    6e02:	strb.w	r2, [r9, #18]
    6e06:	uxtb.w	r2, ip
      if (i < 7) {
    6e0a:	cmp	r2, #6
        fname->seqPos = i;
    6e0c:	mov	r9, r2
    6e0e:	it	ls
    6e10:	strbls.w	r2, [lr, #16]
  for (; ptr < end; ptr++) {
    6e14:	cmp	r4, r3
    6e16:	bhi.n	6d60 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    6e18:	ldrb.w	r3, [lr, #18]
    6e1c:	cmp	r3, #32
    6e1e:	beq.n	6e34 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    6e20:	cmp	r0, #0
    6e22:	beq.n	6db2 <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
    6e24:	tst.w	r8, r5
    6e28:	it	ne
    6e2a:	movne	r5, #2
    6e2c:	strb.w	r5, [lr, #17]
}
    6e30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    6e34:	movs	r0, #0
}
    6e36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6e3a:	mov	r3, r1
    6e3c:	b.n	6d5c <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    6e3e:	sub.w	ip, r2, #65	; 0x41
    6e42:	cmp.w	ip, #25
        uc |= bit;
    6e46:	it	ls
    6e48:	orrls.w	r8, r7, r8
    6e4c:	b.n	6dfa <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    6e4e:	adds	r3, #1
        is83 = false;
    6e50:	movs	r0, #0
    6e52:	b.n	6d5c <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    6e54:	mov	r8, r5
    6e56:	b.n	6e18 <FatFile::makeSFN(FatLfn_t*)+0x128>

00006e58 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    6e58:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    6e5c:	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    6e60:	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    6e62:	mov	r7, r1
    6e64:	mov	r4, r0
    6e66:	ldr.w	fp, [pc, #160]	; 6f08 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    6e6a:	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    6e6e:	ldrb.w	r8, [r1, #16]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6e72:	add.w	r6, r1, #18
	return systick_millis_count;
    6e76:	cmp.w	r8, #3
    6e7a:	ldr.w	r3, [fp]
    6e7e:	it	cs
    6e80:	movcs.w	r8, #3
    hex += millis();
    6e84:	add	r3, r5
    6e86:	uxth	r5, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    6e88:	add.w	r3, r8, #4
    6e8c:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    6e8e:	and.w	r2, r5, #15
    for (uint8_t i = pos + 4; i > pos; i--) {
    6e92:	subs	r0, r3, #1
      hex >>= 4;
    6e94:	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6e96:	cmp	r2, #9
    6e98:	add.w	r1, r2, #55	; 0x37
    6e9c:	it	ls
    6e9e:	addls.w	r1, r2, #48	; 0x30
    6ea2:	adds	r2, r7, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    6ea4:	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6ea6:	strb	r1, [r2, #18]
    for (uint8_t i = pos + 4; i > pos; i--) {
    6ea8:	cmp	r8, r3
    6eaa:	bne.n	6e8e <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    6eac:	add.w	r3, r7, r8
  void rewind() { seekSet(0); }
    6eb0:	movs	r1, #0
    6eb2:	mov	r0, r4
    6eb4:	strb.w	sl, [r3, #18]
    6eb8:	bl	61c0 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    6ebc:	movs	r1, #1
    6ebe:	mov	r0, r4
    6ec0:	bl	5f00 <FatFile::readDirCache(bool)>
    6ec4:	mov	r3, r0
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6ec6:	movs	r2, #11
    6ec8:	mov	r0, r6
      if (!dir) {
    6eca:	cbz	r3, 6ef4 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    6ecc:	ldrb.w	ip, [r3]
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6ed0:	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    6ed2:	cmp.w	ip, #0
    6ed6:	beq.n	6f00 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6ed8:	ldrb	r3, [r3, #11]
    6eda:	lsls	r3, r3, #28
    6edc:	bmi.n	6ebc <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    6ede:	bl	db78 <memcmp>
    6ee2:	cmp	r0, #0
    6ee4:	bne.n	6ebc <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    6ee6:	add.w	r9, r9, #4294967295
    6eea:	ands.w	r9, r9, #255	; 0xff
    6eee:	bne.n	6e76 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    6ef0:	mov	r0, r9
fail:
    6ef2:	b.n	6efc <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    6ef4:	ldrb	r0, [r4, #1]
    6ef6:	clz	r0, r0
    6efa:	lsrs	r0, r0, #5

done:
  return true;
}
    6efc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    6f00:	movs	r0, #1
}
    6f02:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f06:	nop
    6f08:	.word	0x20007d70

00006f0c <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    6f0c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f10:	vpush	{d8}
    6f14:	sub	sp, #44	; 0x2c
    6f16:	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    6f1a:	ldr	r3, [r1, #8]
    6f1c:	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    6f1e:	ldrb	r3, [r1, #0]
    6f20:	tst.w	r3, #208	; 0xd0
    6f24:	beq.n	6fce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const { return m_attributes; }
    6f26:	ldr	r3, [sp, #8]
    6f28:	ldrb	r3, [r3, #0]
    6f2a:	cmp	r3, #0
    6f2c:	bne.n	6fce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
    6f2e:	ldr	r3, [r2, #12]
    6f30:	mov	r8, r2
    6f32:	ldr	r2, [pc, #616]	; (719c <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    6f34:	mov	r6, r1
    6f36:	adds	r3, #12
    6f38:	umull	r2, r3, r2, r3
    6f3c:	ubfx	r2, r3, #2, #8
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    6f40:	ldrb.w	r3, [r8, #17]
    6f44:	lsls	r0, r3, #30
  nameOrd = (fname->len + 12) / 13;
    6f46:	str	r2, [sp, #16]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    6f48:	beq.w	709a <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    6f4c:	adds	r7, r2, #1
    6f4e:	uxtb	r7, r7
  uint8_t checksum = 0;
    6f50:	movs	r3, #0
  void rewind() { seekSet(0); }
    6f52:	mov	r0, r6
    6f54:	mov	r1, r3
    6f56:	mov	r4, r3
    6f58:	str	r3, [sp, #24]
    6f5a:	bl	61c0 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6f5e:	add.w	r3, r8, #18
  uint8_t order = 0;
    6f62:	mov	fp, r4
  uint8_t lfnOrd = 0;
    6f64:	mov	r9, r4
  uint16_t freeIndex = 0;
    6f66:	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6f68:	vmov	s16, r3
  bool fnameFound = false;
    6f6c:	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    6f6e:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    6f70:	movs	r1, #0
    6f72:	mov	r0, r6
    6f74:	bl	5f00 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    6f78:	ubfx	r5, r5, #5, #16
    if (!dir) {
    6f7c:	mov	r3, r0
    6f7e:	cbz	r0, 6fca <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    6f80:	ldrb	r2, [r0, #0]
    6f82:	cmp	r2, #229	; 0xe5
    6f84:	beq.n	6fda <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    6f86:	cbz	r2, 6fda <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    6f88:	cmp	r4, r7
    6f8a:	it	cc
    6f8c:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6f8e:	cmp	r2, #46	; 0x2e
    6f90:	beq.n	6fea <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    6f92:	ldrb.w	ip, [r0, #11]
    } else if (isFatLongName(dir)) {
    6f96:	cmp.w	ip, #15
    6f9a:	beq.n	7046 <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFatFileOrSubdir(dir)) {
    6f9c:	ands.w	ip, ip, #8
    6fa0:	bne.n	6fea <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    6fa2:	cmp.w	r9, #0
    6fa6:	bne.w	7154 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6faa:	movs	r2, #11
    6fac:	vmov	r1, s16
    6fb0:	bl	db78 <memcmp>
    6fb4:	cmp	r0, #0
    6fb6:	bne.n	6f6e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    6fb8:	ldrb.w	r3, [r8, #17]
    6fbc:	ands.w	r3, r3, #1
    6fc0:	beq.w	718c <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    6fc4:	movs	r3, #1
    6fc6:	str	r3, [sp, #20]
    6fc8:	b.n	6f6e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    6fca:	ldrb	r3, [r6, #1]
    6fcc:	cbz	r3, 6ff0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

fail:
  return false;
    6fce:	movs	r0, #0
}
    6fd0:	add	sp, #44	; 0x2c
    6fd2:	vpop	{d8}
    6fd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    6fda:	cmp	r4, #0
    6fdc:	it	eq
    6fde:	moveq	sl, r5
      if (freeFound < freeNeed) {
    6fe0:	cmp	r4, r7
    6fe2:	bcs.n	6fe8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    6fe4:	adds	r4, #1
    6fe6:	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    6fe8:	cbz	r2, 6ff0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    6fea:	mov.w	r9, #0
    6fee:	b.n	6f6e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    6ff0:	ldr	r3, [sp, #12]
    6ff2:	lsls	r2, r3, #22
    6ff4:	bpl.n	6fce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ O_RDONLY
#define O_WRITE O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    6ff6:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    6ffa:	subs	r3, #1
    6ffc:	cmp	r3, #1
    6ffe:	bhi.n	6fce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    7000:	cmp	r4, #0
    7002:	it	eq
    7004:	moveq	sl, r5
  while (freeFound < freeNeed) {
    7006:	cmp	r4, r7
    7008:	bcc.n	7012 <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    700a:	b.n	709e <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    700c:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    700e:	cmp	r7, r4
    7010:	beq.n	709e <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    7012:	movs	r1, #0
    7014:	mov	r0, r6
    7016:	bl	5f00 <FatFile::readDirCache(bool)>
    freeFound++;
    701a:	adds	r3, r4, #1
    if (!dir) {
    701c:	cmp	r0, #0
    701e:	bne.n	700c <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    7020:	ldrb	r3, [r6, #1]
    7022:	cmp	r3, #0
    7024:	bne.n	6fce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    7026:	cmp	r7, r4
    7028:	bls.n	709e <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    702a:	ldr	r5, [sp, #28]
    702c:	b.n	703a <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster * (m_bytesPerSector / FS_DIR_SIZE);
    702e:	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    7030:	add.w	r4, r4, r3, lsl #4
    7034:	uxtb	r4, r4
  while (freeFound < freeNeed) {
    7036:	cmp	r7, r4
    7038:	bls.n	709e <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    703a:	mov	r0, r6
    703c:	bl	57fc <FatFile::addDirCluster()>
    7040:	cmp	r0, #0
    7042:	bne.n	702e <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    7044:	b.n	6fce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    7046:	cmp.w	r9, #0
    704a:	bne.n	7080 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    704c:	and.w	fp, r2, #31
        if (order != nameOrd ||
    7050:	ldr	r1, [sp, #16]
    7052:	cmp	r1, fp
    7054:	bne.n	6f6e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    7056:	ands.w	r9, r2, #64	; 0x40
    705a:	beq.n	6f6e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    705c:	ldrb	r3, [r0, #13]
    705e:	mov	r9, r1
    7060:	str	r3, [sp, #24]
      if (order == 1) {
    7062:	cmp.w	fp, #1
    7066:	bne.n	6f6e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    7068:	adds	r1, r5, #1
    706a:	mov	r3, r9
    706c:	mov	r2, r8
    706e:	mov	r0, r6
    7070:	uxth	r1, r1
    7072:	bl	6b10 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    7076:	cmp	r0, #0
    7078:	it	eq
    707a:	moveq.w	r9, #0
    707e:	b.n	6f6e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    7080:	add.w	fp, fp, #4294967295
    7084:	uxtb.w	fp, fp
    7088:	cmp	r2, fp
    708a:	bne.n	6fea <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    708c:	ldrb	r3, [r0, #13]
    708e:	ldr	r2, [sp, #24]
    7090:	cmp	r3, r2
    7092:	beq.n	7062 <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    7094:	mov.w	r9, #0
    7098:	b.n	6f6e <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    709a:	movs	r7, #1
    709c:	b.n	6f50 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    709e:	ldr	r3, [sp, #20]
    70a0:	cbz	r3, 70ae <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    70a2:	mov	r1, r8
    70a4:	mov	r0, r6
    70a6:	bl	6e58 <FatFile::makeUniqueSfn(FatLfn_t*)>
    70aa:	cmp	r0, #0
    70ac:	beq.n	6fce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    70ae:	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    70b0:	mov	r2, r8
    70b2:	mov	r0, r6
  lfnOrd = freeNeed - 1;
    70b4:	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    70b6:	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    70ba:	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    70bc:	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    70be:	mov	r1, r5
    70c0:	bl	6bd4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    70c4:	cmp	r0, #0
    70c6:	beq.n	6fce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    70c8:	lsls	r1, r5, #5
    70ca:	mov	r0, r6
    70cc:	bl	61c0 <FatFile::seekSet(unsigned long)>
    70d0:	cmp	r0, #0
    70d2:	beq.w	6fce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    70d6:	movs	r1, #0
    70d8:	mov	r0, r6
    70da:	bl	5f00 <FatFile::readDirCache(bool)>
  if (!dir) {
    70de:	mov	r4, r0
    70e0:	cmp	r0, #0
    70e2:	beq.w	6fce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    70e6:	movs	r2, #32
    70e8:	movs	r1, #0
    70ea:	bl	dcd0 <memset>
  memcpy(dir->name, fname->sfn, 11);
    70ee:	ldr.w	r2, [r8, #18]
    70f2:	ldr.w	r3, [r8, #22]
    70f6:	str	r2, [r4, #0]
    70f8:	str	r3, [r4, #4]
    70fa:	ldrb.w	r3, [r8, #28]
    70fe:	ldrh.w	r2, [r8, #26]
    7102:	strb	r3, [r4, #10]
    7104:	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    7106:	ldrb.w	r3, [r8, #17]
    710a:	and.w	r3, r3, #24
    710e:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    7110:	ldr	r3, [pc, #140]	; (71a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    7112:	ldr	r3, [r3, #0]
    7114:	cmp	r3, #0
    7116:	beq.n	7190 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    7118:	add.w	r2, sp, #35	; 0x23
    711c:	add.w	r1, sp, #38	; 0x26
    7120:	add	r0, sp, #36	; 0x24
    7122:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    7124:	ldrh.w	r3, [sp, #36]	; 0x24
    7128:	strh	r3, [r4, #16]
    712a:	ldrh.w	r3, [sp, #38]	; 0x26
    712e:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    7130:	ldrb.w	r3, [sp, #35]	; 0x23
    7134:	strb	r3, [r4, #13]
    7136:	ldr	r2, [sp, #28]
    7138:	ldrb.w	r3, [r2, #36]	; 0x24
    713c:	orr.w	r3, r3, #1
    7140:	strb.w	r3, [r2, #36]	; 0x24
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    7144:	ldr	r3, [sp, #12]
    7146:	mov	r2, r5
    7148:	mov	r1, r6
    714a:	ldr	r0, [sp, #8]
    714c:	str	r7, [sp, #0]
    714e:	bl	6270 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    7152:	b.n	6fd0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7154:	cmp.w	fp, #1
    7158:	bne.w	6fce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    715c:	adds	r0, #10
    715e:	b.n	7164 <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7160:	ldrb.w	r2, [r3, #1]!
    7164:	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    7168:	cmp	r0, r3
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    716a:	orr.w	r1, r1, ip, lsr #1
    716e:	uxtab	r2, r2, r1
    7172:	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    7176:	bne.n	7160 <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    7178:	ldr	r3, [sp, #24]
    717a:	cmp	r3, ip
    717c:	bne.w	6fce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    7180:	mov	r7, r9
  if (oflag & O_EXCL) {
    7182:	ldr	r3, [sp, #12]
    7184:	lsls	r1, r3, #20
    7186:	bmi.w	6fce <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    718a:	b.n	7144 <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    718c:	mov	r7, r3
    718e:	b.n	7182 <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    7190:	movw	r3, #22049	; 0x5621
    7194:	strh	r3, [r4, #16]
    7196:	strh	r3, [r4, #24]
    7198:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    719a:	b.n	7136 <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    719c:	.word	0x4ec4ec4f
    71a0:	.word	0x20006104

000071a4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    71a4:	ldrb	r0, [r1, #0]
    71a6:	cmp	r0, #32
                            const char** ptr) {
    71a8:	push	{r4, r5}
  while (*path == ' ') {
    71aa:	bne.n	71b4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    71ac:	ldrb.w	r4, [r1, #1]!
    71b0:	cmp	r4, #32
    71b2:	beq.n	71ac <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
    71b4:	movs	r5, #0
  fname->begin = path;
    71b6:	str	r1, [r2, #0]
  fname->len = 0;
    71b8:	str	r5, [r2, #12]
  while (*path && !isDirSeparator(*path)) {
    71ba:	ldrb	r4, [r1, #0]
    71bc:	cmp	r4, #47	; 0x2f
    71be:	beq.n	71e0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    71c0:	cbz	r4, 71e0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    71c2:	ldr	r0, [pc, #140]	; (7250 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>)
      DBG_FAIL_MACRO;
      goto fail;
    }
#else   // USE_UTF8_LONG_NAMES
    uint8_t cp = *path++;
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    71c4:	tst.w	r4, #128	; 0x80
    uint8_t cp = *path++;
    71c8:	add.w	r1, r1, #1
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    71cc:	bne.n	71e0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    71ce:	cmp	r4, #60	; 0x3c
    71d0:	bhi.n	7232 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8e>
    71d2:	cmp	r4, #33	; 0x21
    71d4:	bhi.n	71e6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x42>
    71d6:	add.w	ip, r4, #4294967295
    71da:	cmp.w	ip, #30
    71de:	bhi.n	71f8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  *ptr = path;
  return makeSFN(fname);

fail:
  return false;
}
    71e0:	movs	r0, #0
    71e2:	pop	{r4, r5}
    71e4:	bx	lr
    71e6:	sub.w	ip, r4, #34	; 0x22
    71ea:	uxtb.w	ip, ip
    71ee:	lsr.w	ip, r0, ip
    71f2:	tst.w	ip, #1
    71f6:	bne.n	71e0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    if (cp != '.' && cp != ' ') {
    71f8:	cmp	r4, #46	; 0x2e
    len++;
    71fa:	add.w	r5, r5, #1
    if (cp != '.' && cp != ' ') {
    71fe:	beq.n	7204 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    7200:	cmp	r4, #32
    7202:	bne.n	723e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
  while (*path && !isDirSeparator(*path)) {
    7204:	ldrb	r4, [r1, #0]
    7206:	cbz	r4, 720c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
    7208:	cmp	r4, #47	; 0x2f
    720a:	bne.n	71c4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x20>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    720c:	ldr	r0, [r2, #12]
    720e:	subs	r0, #1
    7210:	cmp	r0, #254	; 0xfe
    7212:	bhi.n	71e0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    7214:	cmp	r4, #32
    7216:	beq.n	721c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    7218:	cmp	r4, #47	; 0x2f
    721a:	bne.n	7228 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x84>
    721c:	ldrb.w	r0, [r1, #1]!
    7220:	cmp	r0, #32
    7222:	beq.n	721c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    7224:	cmp	r0, #47	; 0x2f
    7226:	beq.n	721c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
  return makeSFN(fname);
    7228:	mov	r0, r2
  *ptr = path;
    722a:	str	r1, [r3, #0]
}
    722c:	pop	{r4, r5}
  return makeSFN(fname);
    722e:	b.w	6cf0 <FatFile::makeSFN(FatLfn_t*)>
    7232:	cmp	r4, #92	; 0x5c
    7234:	beq.n	71e0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    7236:	bls.n	7244 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa0>
    7238:	cmp	r4, #124	; 0x7c
    723a:	beq.n	71e0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    len++;
    723c:	adds	r5, #1
      fname->end = path;
    723e:	strd	r1, r5, [r2, #8]
    7242:	b.n	7204 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    7244:	subs	r4, #62	; 0x3e
    7246:	cmp	r4, #1
    7248:	bhi.n	723c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x98>
}
    724a:	movs	r0, #0
    724c:	pop	{r4, r5}
    724e:	bx	lr
    7250:	.word	0x05002101

00007254 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    7254:	push	{r4, r5, r6, r7, lr}
  FatFile() {}
    7256:	movs	r3, #0
    7258:	sub	sp, #44	; 0x2c
    725a:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    725c:	ldrb	r3, [r0, #2]
    725e:	lsls	r2, r3, #30
    7260:	bpl.n	72ac <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    7262:	ldr	r1, [r0, #32]
    7264:	mov	r5, r0
    7266:	cbz	r1, 7270 <FatFile::remove()+0x1c>
    7268:	ldr	r0, [r0, #8]
    726a:	bl	6904 <FatPartition::freeChain(unsigned long)>
    726e:	cbz	r0, 72ac <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7270:	movs	r1, #1
    7272:	mov	r0, r5
    7274:	bl	5874 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7278:	cbz	r0, 72ac <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
    727a:	subs	r2, r0, #1
    727c:	add.w	ip, r0, #10
    uint8_t sum = 0;
    7280:	movs	r4, #0
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7282:	lsls	r3, r4, #7
    7284:	ldrb.w	r1, [r2, #1]!
    7288:	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    728c:	cmp	ip, r2
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    728e:	uxtab	r3, r1, r3
    7292:	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    7294:	bne.n	7282 <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    7296:	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    7298:	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
    729a:	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    729c:	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
    729e:	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    72a0:	add.w	r0, r7, #36	; 0x24
  m_flags = 0;
    72a4:	strb	r3, [r5, #2]
    72a6:	bl	2de0 <FsCache::sync()>
    72aa:	cbnz	r0, 72b2 <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    72ac:	movs	r0, #0
}
    72ae:	add	sp, #44	; 0x2c
    72b0:	pop	{r4, r5, r6, r7, pc}
    72b2:	add.w	r0, r7, #564	; 0x234
    72b6:	bl	2de0 <FsCache::sync()>
    72ba:	cmp	r0, #0
    72bc:	beq.n	72ac <FatFile::remove()+0x58>
    72be:	ldr	r0, [r7, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    72c0:	ldr	r3, [r0, #0]
    72c2:	ldr	r3, [r3, #28]
    72c4:	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    72c6:	cmp	r0, #0
    72c8:	beq.n	72ac <FatFile::remove()+0x58>
  if (!isLFN()) {
    72ca:	ldrb	r3, [r5, #3]
    72cc:	cmp	r3, #0
    72ce:	beq.n	72ae <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
    72d0:	mov	r1, r5
    72d2:	add	r0, sp, #4
    72d4:	bl	5ca0 <FatFile::openCluster(FatFile*)>
    72d8:	cmp	r0, #0
    72da:	beq.n	72ac <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    72dc:	ldrb	r3, [r5, #3]
    72de:	cmp	r3, #0
    72e0:	beq.n	72ac <FatFile::remove()+0x58>
    72e2:	movs	r7, #1
    72e4:	b.n	732a <FatFile::remove()+0xd6>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    72e6:	add	r0, sp, #4
    72e8:	bl	5f00 <FatFile::readDirCache(bool)>
    72ec:	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    72ee:	uxtb	r1, r7
    if (!ldir) {
    72f0:	cmp	r0, #0
    72f2:	beq.n	72ac <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    72f4:	ldrb	r2, [r0, #11]
    72f6:	cmp	r2, #15
    72f8:	bne.n	72ac <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
    72fa:	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    72fc:	uxtb.w	ip, r3
    7300:	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7302:	and.w	r3, r2, #31
    7306:	cmp	r3, r1
    7308:	bne.n	72ac <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
    730a:	ldrb	r3, [r0, #13]
    730c:	cmp	r3, r4
    730e:	bne.n	72ac <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
    7310:	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    7312:	ldr	r1, [r5, #8]
    7314:	ldrb.w	r3, [r1, #36]	; 0x24
    7318:	orr.w	r3, r3, #1
    731c:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    7320:	lsls	r3, r2, #25
    7322:	bmi.n	7340 <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7324:	ldrb	r3, [r5, #3]
    7326:	cmp	r3, ip
    7328:	bcc.n	72ac <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    732a:	ldrh	r1, [r5, #4]
    732c:	add	r0, sp, #4
    732e:	subs	r1, r1, r7
    7330:	uxth	r1, r1
    7332:	lsls	r1, r1, #5
    7334:	bl	61c0 <FatFile::seekSet(unsigned long)>
    7338:	movs	r1, #0
    733a:	cmp	r0, #0
    733c:	bne.n	72e6 <FatFile::remove()+0x92>
    733e:	b.n	72ac <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
    7340:	ldr	r4, [r5, #8]
    7342:	add.w	r0, r4, #36	; 0x24
    7346:	bl	2de0 <FsCache::sync()>
    734a:	cmp	r0, #0
    734c:	beq.n	72ac <FatFile::remove()+0x58>
    734e:	add.w	r0, r4, #564	; 0x234
    7352:	bl	2de0 <FsCache::sync()>
    7356:	cmp	r0, #0
    7358:	beq.n	72ac <FatFile::remove()+0x58>
    735a:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    735c:	ldr	r3, [r0, #0]
    735e:	ldr	r3, [r3, #28]
    7360:	blx	r3
    7362:	b.n	72ae <FatFile::remove()+0x5a>

00007364 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7364:	push	{r3, r4, r5, r6, r7, lr}
    7366:	movs	r6, #0
  if (from.m_fFile) {
    7368:	ldr	r7, [r1, #56]	; 0x38
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    736a:	mov	r5, r1
    736c:	mov	r4, r0
    736e:	strd	r6, r6, [r0, #56]	; 0x38
  if (from.m_fFile) {
    7372:	cbz	r7, 739c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
    7374:	mov	r1, r0
    7376:	movs	r0, #36	; 0x24
    7378:	bl	7668 <operator new(unsigned int, unsigned long*)>
  FatFile() {}
    737c:	strh	r6, [r0, #0]
    737e:	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
    7380:	mov	ip, r0
    7382:	ldr	r5, [r5, #56]	; 0x38
    m_fFile = new (m_fileMem) FatFile;
    7384:	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    7386:	ldmia	r5!, {r0, r1, r2, r3}
    7388:	stmia.w	ip!, {r0, r1, r2, r3}
    738c:	ldmia	r5!, {r0, r1, r2, r3}
    738e:	stmia.w	ip!, {r0, r1, r2, r3}
    7392:	ldr	r3, [r5, #0]
    7394:	str.w	r3, [ip]
}
    7398:	mov	r0, r4
    739a:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (from.m_xFile) {
    739c:	ldr	r3, [r1, #60]	; 0x3c
    739e:	cmp	r3, #0
    73a0:	beq.n	7398 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
    73a2:	mov	r1, r0
    73a4:	movs	r0, #56	; 0x38
    73a6:	bl	7668 <operator new(unsigned int, unsigned long*)>
  ExFatFile() {}
    73aa:	strb.w	r7, [r0, #49]	; 0x31
    73ae:	strh	r7, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    73b0:	mov	r2, r0
    73b2:	ldr	r3, [r5, #60]	; 0x3c
    m_xFile = new (m_fileMem) ExFatFile;
    73b4:	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    73b6:	add.w	r7, r3, #48	; 0x30
    73ba:	ldr	r6, [r3, #0]
    73bc:	adds	r3, #16
    73be:	ldr.w	r5, [r3, #-12]
    73c2:	adds	r2, #16
    73c4:	ldr.w	r0, [r3, #-8]
    73c8:	ldr.w	r1, [r3, #-4]
    73cc:	cmp	r3, r7
    73ce:	str.w	r6, [r2, #-16]
    73d2:	str.w	r5, [r2, #-12]
    73d6:	str.w	r0, [r2, #-8]
    73da:	str.w	r1, [r2, #-4]
    73de:	bne.n	73ba <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x56>
    73e0:	ldr	r3, [r3, #0]
}
    73e2:	mov	r0, r4
    *m_xFile = *from.m_xFile;
    73e4:	str	r3, [r2, #0]
}
    73e6:	pop	{r3, r4, r5, r6, r7, pc}

000073e8 <FsBaseFile::close()>:
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    73e8:	push	{r4, lr}
    73ea:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    73ec:	ldr	r0, [r0, #56]	; 0x38
    73ee:	cbz	r0, 73fc <FsBaseFile::close()+0x14>
    73f0:	bl	5894 <FatFile::close()>
  m_fFile = nullptr;
    73f4:	movs	r3, #0
  m_xFile = nullptr;
    73f6:	strd	r3, r3, [r4, #56]	; 0x38
  return rtn;
}
    73fa:	pop	{r4, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    73fc:	ldr	r0, [r4, #60]	; 0x3c
    73fe:	cbz	r0, 740c <FsBaseFile::close()+0x24>
    7400:	bl	37ac <ExFatFile::close()>
  m_fFile = nullptr;
    7404:	movs	r3, #0
  m_xFile = nullptr;
    7406:	strd	r3, r3, [r4, #56]	; 0x38
}
    740a:	pop	{r4, pc}
  m_fFile = nullptr;
    740c:	movs	r3, #0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    740e:	movs	r0, #1
  m_xFile = nullptr;
    7410:	strd	r3, r3, [r4, #56]	; 0x38
}
    7414:	pop	{r4, pc}
    7416:	nop

00007418 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    7418:	cmp	r1, #0
    741a:	beq.n	74b4 <FsBaseFile::open(FsVolume*, char const*, int)+0x9c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    741c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7420:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7422:	ldr	r0, [r0, #56]	; 0x38
    7424:	mov	r5, r1
    7426:	mov	r8, r2
    7428:	mov	r7, r3
    742a:	cbz	r0, 7462 <FsBaseFile::open(FsVolume*, char const*, int)+0x4a>
    742c:	bl	5894 <FatFile::close()>
  m_fFile = nullptr;
    7430:	movs	r6, #0
    return false;
  }
  close();
  if (vol->m_fVol) {
    7432:	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    7436:	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    743a:	cmp.w	r9, #0
    743e:	beq.n	747c <FsBaseFile::open(FsVolume*, char const*, int)+0x64>
    m_fFile = new (m_fileMem) FatFile;
    7440:	mov	r1, r4
    7442:	movs	r0, #36	; 0x24
    7444:	bl	7668 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7448:	mov	r3, r7
    744a:	strh	r6, [r0, #0]
    744c:	mov	r2, r8
    744e:	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    7450:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7452:	ldr.w	r1, [r5, #1152]	; 0x480
    7456:	bl	5c90 <FatFile::open(FatVolume*, char const*, int)>
    745a:	cbnz	r0, 74ae <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
      return true;
    }
    m_fFile = nullptr;
    745c:	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    745e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7462:	ldr	r0, [r4, #60]	; 0x3c
    7464:	cmp	r0, #0
    7466:	beq.n	7430 <FsBaseFile::open(FsVolume*, char const*, int)+0x18>
    7468:	bl	37ac <ExFatFile::close()>
  m_fFile = nullptr;
    746c:	movs	r6, #0
  if (vol->m_fVol) {
    746e:	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    7472:	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    7476:	cmp.w	r9, #0
    747a:	bne.n	7440 <FsBaseFile::open(FsVolume*, char const*, int)+0x28>
  } else if (vol->m_xVol) {
    747c:	ldr.w	r3, [r5, #1156]	; 0x484
    7480:	cbz	r3, 74a8 <FsBaseFile::open(FsVolume*, char const*, int)+0x90>
    m_xFile = new (m_fileMem) ExFatFile;
    7482:	mov	r1, r4
    7484:	movs	r0, #56	; 0x38
    7486:	bl	7668 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    748a:	mov	r3, r7
    748c:	strb.w	r9, [r0, #49]	; 0x31
    7490:	mov	r2, r8
    7492:	strh.w	r9, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    7496:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7498:	ldr.w	r1, [r5, #1156]	; 0x484
    749c:	bl	4044 <ExFatFile::open(ExFatVolume*, char const*, int)>
    74a0:	cbnz	r0, 74ae <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
    m_xFile = nullptr;
    74a2:	str	r0, [r4, #60]	; 0x3c
}
    74a4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    74a8:	movs	r0, #0
}
    74aa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return true;
    74ae:	movs	r0, #1
}
    74b0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    74b4:	movs	r0, #0
}
    74b6:	bx	lr

000074b8 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    74b8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74bc:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    74be:	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    74c0:	mov	r5, r1
    74c2:	mov	r8, r2
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    74c4:	cbz	r0, 7518 <FsBaseFile::openNext(FsBaseFile*, int)+0x60>
    74c6:	bl	5894 <FatFile::close()>
  m_fFile = nullptr;
    74ca:	movs	r6, #0
    74cc:	str	r6, [r4, #56]	; 0x38
  close();
  if (dir->m_fFile) {
    74ce:	ldr	r7, [r5, #56]	; 0x38
  m_xFile = nullptr;
    74d0:	str	r6, [r4, #60]	; 0x3c
  if (dir->m_fFile) {
    74d2:	cbz	r7, 74f2 <FsBaseFile::openNext(FsBaseFile*, int)+0x3a>
    m_fFile = new (m_fileMem) FatFile;
    74d4:	mov	r1, r4
    74d6:	movs	r0, #36	; 0x24
    74d8:	bl	7668 <operator new(unsigned int, unsigned long*)>
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    74dc:	mov	r2, r8
    74de:	strh	r6, [r0, #0]
    74e0:	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    74e2:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    74e4:	ldr	r1, [r5, #56]	; 0x38
    74e6:	bl	635c <FatFile::openNext(FatFile*, int)>
    74ea:	cbnz	r0, 7512 <FsBaseFile::openNext(FsBaseFile*, int)+0x5a>
      return true;
    }
    m_fFile = nullptr;
    74ec:	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    74ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (dir->m_xFile) {
    74f2:	ldr	r0, [r5, #60]	; 0x3c
    74f4:	cmp	r0, #0
    74f6:	beq.n	74ee <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_xFile = new (m_fileMem) ExFatFile;
    74f8:	mov	r1, r4
    74fa:	movs	r0, #56	; 0x38
    74fc:	bl	7668 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7500:	mov	r2, r8
    7502:	strb.w	r7, [r0, #49]	; 0x31
    7506:	strh	r7, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    7508:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    750a:	ldr	r1, [r5, #60]	; 0x3c
    750c:	bl	4054 <ExFatFile::openNext(ExFatFile*, int)>
    7510:	cbz	r0, 7524 <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
      return true;
    7512:	movs	r0, #1
}
    7514:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7518:	ldr	r0, [r4, #60]	; 0x3c
    751a:	cmp	r0, #0
    751c:	beq.n	74ca <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    751e:	bl	37ac <ExFatFile::close()>
    7522:	b.n	74ca <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    m_xFile = nullptr;
    7524:	str	r0, [r4, #60]	; 0x3c
}
    7526:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    752a:	nop

0000752c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    752c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_fVol = nullptr;
    7530:	movs	r5, #0
                     uint32_t volStart) {
    7532:	mov	r6, r0
    7534:	mov	r7, r1
  m_xVol = new (m_volMem) ExFatVolume;
    7536:	mov	r1, r0
  m_fVol = nullptr;
    7538:	str.w	r5, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    753c:	mov.w	r0, #1152	; 0x480
                     uint32_t volStart) {
    7540:	mov	r8, r3
    7542:	ldr.w	sl, [sp, #32]
    7546:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    7548:	bl	7668 <operator new(unsigned int, unsigned long*)>
    m_sector = 0XFFFFFFFF;
    754c:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    7550:	str	r5, [r0, #4]
    m_status = 0;
    7552:	strb	r5, [r0, #0]
    if (!init(dev, part, volStart)) {
    7554:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    7556:	str	r3, [r0, #8]
    7558:	mov	r1, r7
    755a:	str.w	r3, [r0, #536]	; 0x218
    755e:	mov	r3, sl
    m_blockDev = blockDev;
    7560:	str.w	r5, [r0, #532]	; 0x214
    7564:	mov	r4, r0
    m_status = 0;
    7566:	strb.w	r5, [r0, #528]	; 0x210
  ExFatPartition() = default;
    756a:	strb.w	r5, [r0, #1092]	; 0x444
    756e:	strb.w	r5, [r0, #1145]	; 0x479
    7572:	strh.w	r5, [r0, #1146]	; 0x47a
    7576:	str.w	r0, [r6, #1156]	; 0x484
    757a:	bl	44a0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    757e:	cmp	r0, #0
    7580:	bne.n	7600 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xd4>
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_xVol = nullptr;
    7582:	movs	r5, #0
  m_fVol = new (m_volMem) FatVolume;
    7584:	mov	r1, r6
    7586:	mov.w	r0, #1128	; 0x468
  m_xVol = nullptr;
    758a:	str.w	r5, [r6, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    758e:	bl	7668 <operator new(unsigned int, unsigned long*)>
  FatPartition() = default;
    7592:	strb	r5, [r0, #7]
    m_blockDev = blockDev;
    7594:	str	r5, [r0, #40]	; 0x28
    if (!init(dev, part, volStart)) {
    7596:	mov	r3, sl
    m_status = 0;
    7598:	strb.w	r5, [r0, #36]	; 0x24
    759c:	mov	r2, r8
    m_blockDev = blockDev;
    759e:	str.w	r5, [r0, #568]	; 0x238
    75a2:	mov	r1, r7
    m_status = 0;
    75a4:	strb.w	r5, [r0, #564]	; 0x234
    75a8:	mov	r4, r0
    75aa:	strh.w	r5, [r0, #1092]	; 0x444
    75ae:	strb.w	r5, [r0, #1094]	; 0x446
    m_sector = 0XFFFFFFFF;
    75b2:	mov.w	r5, #4294967295
    75b6:	str	r5, [r0, #44]	; 0x2c
    75b8:	str.w	r5, [r0, #572]	; 0x23c
    75bc:	str.w	r0, [r6, #1152]	; 0x480
    75c0:	bl	69f0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    75c4:	cbnz	r0, 75d2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xa6>
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_fVol = nullptr;
    75c6:	movs	r3, #0
  return false;
    75c8:	mov	r0, r3
  m_fVol = nullptr;
    75ca:	str.w	r3, [r6, #1152]	; 0x480
done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    75ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    75d2:	addw	r5, r4, #1092	; 0x444
    75d6:	mov	r0, r5
    75d8:	bl	5894 <FatFile::close()>
    return m_vwd.openRoot(this);
    75dc:	mov	r1, r4
    75de:	mov	r0, r5
    75e0:	bl	5cf8 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    75e4:	cmp	r0, #0
    75e6:	beq.n	75c6 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x9a>
    if (setCwv || !m_cwv) {
    75e8:	ldr	r3, [pc, #72]	; (7634 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x108>)
    75ea:	ldr	r2, [r3, #0]
    75ec:	cbnz	r2, 761e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xf2>
      m_cwv = this;
    75ee:	str	r4, [r3, #0]
  if (setCwv || !m_cwv) {
    75f0:	ldr	r3, [pc, #68]	; (7638 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    75f2:	cmp.w	r9, #0
    75f6:	beq.n	7626 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xfa>
  return true;
    75f8:	movs	r0, #1
    m_cwv = this;
    75fa:	str	r6, [r3, #0]
}
    75fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    7600:	add.w	r5, r4, #1096	; 0x448
    7604:	mov	r0, r5
    7606:	bl	37ac <ExFatFile::close()>
    return m_vwd.openRoot(this);
    760a:	mov	r1, r4
    760c:	mov	r0, r5
    760e:	bl	3808 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    7612:	cmp	r0, #0
    7614:	beq.n	7582 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x56>
    if (setCwv || !m_cwv) {
    7616:	ldr	r3, [pc, #36]	; (763c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x110>)
    7618:	ldr	r2, [r3, #0]
    761a:	cmp	r2, #0
    761c:	beq.n	75ee <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xc2>
  if (setCwv || !m_cwv) {
    761e:	ldr	r3, [pc, #24]	; (7638 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    7620:	cmp.w	r9, #0
    7624:	bne.n	75f8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
    7626:	ldr	r2, [r3, #0]
    7628:	cmp	r2, #0
    762a:	beq.n	75f8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
  return true;
    762c:	movs	r0, #1
}
    762e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7632:	nop
    7634:	.word	0x200062c8
    7638:	.word	0x200062c4
    763c:	.word	0x20006188

00007640 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
    7640:	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    7642:	movs	r5, #0
    7644:	mov.w	r6, #1000	; 0x3e8
    7648:	mov	r4, r0
    764a:	strb	r5, [r0, #4]
    764c:	strb	r5, [r0, #12]
    764e:	str	r6, [r0, #8]
  FsBaseFile() = default;
    7650:	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    7654:	ldr	r5, [pc, #12]	; (7664 <FsVolume::open(char const*, int)+0x24>)
    7656:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    765a:	bl	7418 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    765e:	mov	r0, r4
    7660:	pop	{r4, r5, r6, pc}
    7662:	nop
    7664:	.word	0x20000aac

00007668 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    7668:	mov	r0, r1
    766a:	bx	lr

0000766c <SdCardInterface::status()>:
   * \param[out] sds location for 64 status bytes.
   * \return true for success or false for failure.
   */
  virtual bool readSDS(sds_t* sds) = 0;
  /** \return card status. */
  virtual uint32_t status() { return 0XFFFFFFFF; }
    766c:	mov.w	r0, #4294967295
    7670:	bx	lr
    7672:	nop

00007674 <SharedSpiCard::errorCode() const>:
  uint8_t errorCode() const { return m_errorCode; }
    7674:	ldrb	r0, [r0, #18]
    7676:	bx	lr

00007678 <SharedSpiCard::errorData() const>:
  uint32_t errorData() const { return m_status; }
    7678:	ldrb	r0, [r0, #21]
    767a:	bx	lr

0000767c <SharedSpiCard::type() const>:
  uint8_t type() const { return m_type; }
    767c:	ldrb	r0, [r0, #22]
    767e:	bx	lr

00007680 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() { return true; }
    7680:	movs	r0, #1
    7682:	bx	lr

00007684 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_dedicatedSpi; }
    7684:	ldrb	r0, [r0, #28]
    7686:	bx	lr

00007688 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    7688:	bx	lr
    768a:	nop

0000768c <DedicatedSpiCard::~DedicatedSpiCard()>:
    768c:	push	{r4, lr}
    768e:	mov	r4, r0
    7690:	movs	r1, #32
    7692:	bl	cd08 <operator delete(void*, unsigned int)>
    7696:	mov	r0, r4
    7698:	pop	{r4, pc}
    769a:	nop

0000769c <SharedSpiCard::end()>:
void SharedSpiCard::end() {
    769c:	push	{r3, r4, r5, lr}
  if (m_beginCalled) {
    769e:	ldrb	r3, [r0, #16]
    76a0:	cbz	r3, 76b8 <SharedSpiCard::end()+0x1c>
    syncDevice();
    76a2:	mov	r5, r0
    76a4:	mov	r4, r0
    76a6:	ldr.w	r3, [r5], #4
    76aa:	ldr	r3, [r3, #28]
    76ac:	blx	r3
  void spiEnd() { m_spiDriver.end(); }
    76ae:	mov	r0, r5
    76b0:	bl	9c7c <SdSpiArduinoDriver::end()>
    m_beginCalled = false;
    76b4:	movs	r3, #0
    76b6:	strb	r3, [r4, #16]
}
    76b8:	pop	{r3, r4, r5, pc}
    76ba:	nop

000076bc <SharedSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStop() {
    76bc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76c0:	ldr	r6, [pc, #128]	; (7744 <SharedSpiCard::writeStop()+0x88>)
    76c2:	mov	r7, r0
    return m_spiDriver.receive();
    76c4:	add.w	r8, r0, #4
    76c8:	ldr	r5, [r6, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    76ca:	add.w	r5, r5, #600	; 0x258
    76ce:	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    76d0:	b.n	76da <SharedSpiCard::writeStop()+0x1e>
    76d2:	ldr	r3, [r6, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    76d4:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    76d6:	lsls	r3, r3, #16
    76d8:	bmi.n	76fc <SharedSpiCard::writeStop()+0x40>
    76da:	mov	r0, r8
    76dc:	bl	9c84 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    76e0:	cmp	r0, #255	; 0xff
    76e2:	mov	r4, r0
    76e4:	bne.n	76d2 <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    76e6:	movs	r1, #253	; 0xfd
    76e8:	mov	r0, r8
    76ea:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    76ee:	ldrb	r3, [r7, #19]
    76f0:	cbnz	r3, 7726 <SharedSpiCard::writeStop()+0x6a>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    76f2:	movs	r3, #0
    76f4:	movs	r0, #1
    76f6:	strb	r3, [r7, #20]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    76f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    76fc:	movs	r3, #31
  if (m_spiActive) {
    76fe:	ldrb	r0, [r7, #19]
    7700:	strb	r3, [r7, #18]
    7702:	cmp	r0, #0
    7704:	beq.n	76f8 <SharedSpiCard::writeStop()+0x3c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7706:	ldrb	r0, [r7, #17]
    7708:	movs	r1, #1
    770a:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    770e:	movs	r1, #255	; 0xff
    7710:	mov	r0, r8
    7712:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7716:	mov	r0, r8
    7718:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    771c:	movs	r3, #0
  return false;
    771e:	mov	r0, r3
    m_spiActive = false;
    7720:	strb	r3, [r7, #19]
}
    7722:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7726:	movs	r1, #1
    7728:	ldrb	r0, [r7, #17]
    772a:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    772e:	mov	r1, r4
    7730:	mov	r0, r8
    7732:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7736:	mov	r0, r8
    7738:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    773c:	movs	r3, #0
    773e:	strb	r3, [r7, #19]
}
    7740:	b.n	76f2 <SharedSpiCard::writeStop()+0x36>
    7742:	nop
    7744:	.word	0x20007d70

00007748 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    7748:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    774c:	ldrb	r3, [r0, #20]
    774e:	cmp	r3, #1
    7750:	beq.n	77be <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    7752:	ldrb	r6, [r0, #19]
    7754:	mov	r4, r0
    7756:	cbz	r6, 776c <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    7758:	adds	r0, #4
    775a:	bl	9c84 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    775e:	subs.w	r5, r0, #255	; 0xff
    7762:	it	ne
    7764:	movne	r5, #1
}
    7766:	mov	r0, r5
    7768:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    776c:	adds	r7, r0, #4
    m_spiActive = true;
    776e:	mov.w	r8, #1
    7772:	mov	r0, r7
    7774:	bl	9bf0 <SdSpiArduinoDriver::activate()>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7778:	mov	r1, r6
    777a:	ldrb	r0, [r4, #17]
    777c:	strb.w	r8, [r4, #19]
    7780:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7784:	movs	r1, #255	; 0xff
    7786:	mov	r0, r7
    7788:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    778c:	mov	r0, r7
    778e:	bl	9c84 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    7792:	ldrb	r3, [r4, #19]
  bool rtn = 0XFF != spiReceive();
    7794:	subs.w	r5, r0, #255	; 0xff
    7798:	it	ne
    779a:	movne	r5, #1
  if (m_spiActive) {
    779c:	cmp	r3, #0
    779e:	beq.n	7766 <SharedSpiCard::isBusy()+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    77a0:	mov	r1, r8
    77a2:	ldrb	r0, [r4, #17]
    77a4:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    77a8:	movs	r1, #255	; 0xff
    77aa:	mov	r0, r7
    77ac:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    77b0:	mov	r0, r7
    77b2:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
}
    77b6:	mov	r0, r5
    m_spiActive = false;
    77b8:	strb	r6, [r4, #19]
}
    77ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    77be:	movs	r5, #0
}
    77c0:	mov	r0, r5
    77c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77c6:	nop

000077c8 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    77c8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    77cc:	ldr	r7, [pc, #128]	; (7850 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    77ce:	mov	r4, r0
    77d0:	mov	r8, r1
    77d2:	mov	r9, r2
    77d4:	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    77d6:	adds	r6, r0, #4
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    77d8:	add.w	r5, r5, #300	; 0x12c
    77dc:	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    77de:	b.n	77e8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    77e0:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    77e2:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    77e4:	lsls	r3, r3, #16
    77e6:	bmi.n	7804 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    77e8:	mov	r0, r6
    77ea:	bl	9c84 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    77ee:	cmp	r0, #255	; 0xff
    77f0:	strb	r0, [r4, #21]
    77f2:	beq.n	77e0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    77f4:	cmp	r0, #254	; 0xfe
    77f6:	beq.n	782e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    77f8:	movs	r3, #25
  if (m_spiActive) {
    77fa:	ldrb	r0, [r4, #19]
    m_errorCode = code;
    77fc:	strb	r3, [r4, #18]
    77fe:	cbnz	r0, 780e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    7800:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7804:	movs	r3, #30
  if (m_spiActive) {
    7806:	ldrb	r0, [r4, #19]
    7808:	strb	r3, [r4, #18]
    780a:	cmp	r0, #0
    780c:	beq.n	7800 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    780e:	ldrb	r0, [r4, #17]
    7810:	movs	r1, #1
    7812:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7816:	movs	r1, #255	; 0xff
    7818:	mov	r0, r6
    781a:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    781e:	mov	r0, r6
    7820:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7824:	movs	r3, #0
  return false;
    7826:	mov	r0, r3
    m_spiActive = false;
    7828:	strb	r3, [r4, #19]
}
    782a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    782e:	mov	r2, r9
    7830:	mov	r1, r8
    7832:	mov	r0, r6
    7834:	bl	9c9c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    7838:	strb	r0, [r4, #21]
    783a:	cbnz	r0, 784c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    783c:	mov	r0, r6
    783e:	bl	9c84 <SdSpiArduinoDriver::receive()>
    7842:	mov	r0, r6
    7844:	bl	9c84 <SdSpiArduinoDriver::receive()>
  return true;
    7848:	movs	r0, #1
    784a:	b.n	7800 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    784c:	movs	r3, #38	; 0x26
    784e:	b.n	77fa <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    7850:	.word	0x20007d70

00007854 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    7854:	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    7856:	movs	r7, #0
bool SharedSpiCard::readStop() {
    7858:	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    785a:	movs	r1, #12
bool SharedSpiCard::readStop() {
    785c:	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    785e:	mov	r2, r7
  m_state = IDLE_STATE;
    7860:	strb	r7, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    7862:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7866:	cbnz	r0, 7896 <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    7868:	ldrb	r6, [r4, #19]
    786a:	cbnz	r6, 7874 <SharedSpiCard::readStop()+0x20>
  return true;
    786c:	movs	r6, #1
}
    786e:	mov	r0, r6
    7870:	add	sp, #12
    7872:	pop	{r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7874:	mov	r5, r0
    7876:	movs	r1, #1
    7878:	ldrb	r0, [r4, #17]
    787a:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    787e:	adds	r0, r4, #4
    7880:	movs	r1, #255	; 0xff
    7882:	str	r0, [sp, #4]
    7884:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7888:	ldr	r0, [sp, #4]
    788a:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    788e:	mov	r0, r6
    m_spiActive = false;
    7890:	strb	r5, [r4, #19]
}
    7892:	add	sp, #12
    7894:	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    7896:	movs	r3, #9
  if (m_spiActive) {
    7898:	ldrb	r6, [r4, #19]
    789a:	strb	r3, [r4, #18]
    789c:	cmp	r6, #0
    789e:	beq.n	786e <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    78a0:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    78a2:	ldrb	r0, [r4, #17]
    78a4:	movs	r1, #1
}
    78a6:	mov	r6, r7
    78a8:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    78ac:	movs	r1, #255	; 0xff
    78ae:	mov	r0, r5
    78b0:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    78b4:	mov	r0, r5
    78b6:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
}
    78ba:	mov	r0, r6
    m_spiActive = false;
    78bc:	strb	r7, [r4, #19]
}
    78be:	add	sp, #12
    78c0:	pop	{r4, r5, r6, r7, pc}
    78c2:	nop

000078c4 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    78c4:	ldrb	r2, [r0, #20]
    78c6:	cmp	r2, #2
    78c8:	beq.n	78d2 <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    78ca:	cmp	r2, #1
    78cc:	beq.n	78d8 <SharedSpiCard::syncDevice()+0x14>
}
    78ce:	movs	r0, #1
    78d0:	bx	lr
    return writeStop();
    78d2:	ldr	r3, [r0, #0]
    78d4:	ldr	r3, [r3, #104]	; 0x68
    78d6:	bx	r3
    return readStop();
    78d8:	b.w	7854 <SharedSpiCard::readStop()>

000078dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    78dc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    78e0:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    78e2:	sub	sp, #8
    78e4:	mov	r7, r1
    78e6:	ldr	r1, [pc, #216]	; (79c0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>)
    78e8:	str	r2, [sp, #4]
    78ea:	mov	r6, r0
  if (!syncDevice()) {
    78ec:	ldr	r2, [r3, #28]
    78ee:	cmp	r2, r1
    78f0:	bne.n	79ae <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd2>
  if (m_state == WRITE_STATE) {
    78f2:	ldrb	r2, [r0, #20]
    78f4:	cmp	r2, #2
    78f6:	beq.n	7980 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
  if (m_state == READ_STATE) {
    78f8:	cmp	r2, #1
    78fa:	beq.n	79b6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xda>
  if (!m_spiActive) {
    78fc:	ldrb	r4, [r6, #19]
    78fe:	cmp	r4, #0
    7900:	beq.n	7990 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb4>
  void spiActivate() { m_spiDriver.activate(); }
    7902:	adds	r5, r6, #4
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
    7904:	cbz	r7, 792e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    7906:	cmp	r7, #12
    7908:	beq.n	792e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    790a:	ldr.w	r8, [pc, #184]	; 79c4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe8>
    790e:	ldr.w	r4, [r8]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7912:	add.w	r4, r4, #300	; 0x12c
    7916:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    7918:	b.n	7924 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
    791a:	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    791e:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    7920:	lsls	r1, r3, #16
    7922:	bmi.n	7988 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    return m_spiDriver.receive();
    7924:	mov	r0, r5
    7926:	bl	9c84 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    792a:	cmp	r0, #255	; 0xff
    792c:	bne.n	791a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3e>
    m_spiDriver.send(data);
    792e:	add.w	r8, sp, #4
    7932:	add	r4, sp, #8
    7934:	orr.w	r1, r7, #64	; 0x40
    7938:	mov	r0, r5
    793a:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
    793e:	ldrb.w	r1, [r4, #-1]!
    7942:	mov	r0, r5
    7944:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    7948:	cmp	r4, r8
    794a:	bne.n	793e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    794c:	cmp	r7, #0
    794e:	mov	r0, r5
    return m_spiDriver.receive();
    7950:	mov.w	r4, #10
    m_spiDriver.send(data);
    7954:	ite	eq
    7956:	moveq	r1, #149	; 0x95
    7958:	movne	r1, #135	; 0x87
    795a:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    795e:	mov	r0, r5
    7960:	bl	9c84 <SdSpiArduinoDriver::receive()>
    7964:	mov	r0, r5
    7966:	bl	9c84 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    796a:	lsls	r2, r0, #24
    796c:	add.w	r3, r4, #4294967295
    m_status = spiReceive();
    7970:	strb	r0, [r6, #21]
  } while (m_status & 0X80 && ++n < 10);
    7972:	bpl.n	797a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9e>
    7974:	ands.w	r4, r3, #255	; 0xff
    7978:	bne.n	7964 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x88>
}
    797a:	add	sp, #8
    797c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    7980:	ldr	r3, [r3, #104]	; 0x68
    7982:	blx	r3
  if (!syncDevice()) {
    7984:	cmp	r0, #0
    7986:	bne.n	78fc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    7988:	movs	r0, #255	; 0xff
}
    798a:	add	sp, #8
    798c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    7990:	adds	r5, r6, #4
    7992:	mov	r0, r5
    7994:	bl	9bf0 <SdSpiArduinoDriver::activate()>
    m_spiActive = true;
    7998:	movs	r3, #1
  void spiSelect() { sdCsWrite(m_csPin, false); }
    799a:	mov	r1, r4
    799c:	ldrb	r0, [r6, #17]
    799e:	strb	r3, [r6, #19]
    79a0:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    79a4:	movs	r1, #255	; 0xff
    79a6:	mov	r0, r5
    79a8:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
}
    79ac:	b.n	7904 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    79ae:	blx	r2
    79b0:	cmp	r0, #0
    79b2:	beq.n	7988 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    79b4:	b.n	78fc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return readStop();
    79b6:	bl	7854 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    79ba:	cmp	r0, #0
    79bc:	beq.n	7988 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    79be:	b.n	78fc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    79c0:	.word	0x000078c5
    79c4:	.word	0x20007d70

000079c8 <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    79c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    79cc:	sub	sp, #32
    79ce:	mov	r5, r0
    79d0:	mov	sl, r2
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    79d2:	ldr	r6, [pc, #480]	; (7bb4 <SharedSpiCard::begin(SdSpiConfig)+0x1ec>)
    79d4:	add	r4, sp, #4
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
    79d6:	adds	r7, r5, #4
    79d8:	stmia.w	r4, {r1, r2, r3}
    m_beginCalled = false;
    79dc:	movs	r3, #0
    79de:	ldrb.w	r0, [sp, #4]
    79e2:	strb	r3, [r5, #16]
  m_errorCode = SD_CARD_ERROR_NONE;
    79e4:	strh	r3, [r5, #18]
    m_state = IDLE_STATE;
    79e6:	strh	r3, [r5, #20]
    m_type = 0;
    79e8:	strb	r3, [r5, #22]
  m_csPin = spiConfig.csPin;
    79ea:	strb	r0, [r5, #17]
  sdCsInit(m_csPin);
    79ec:	bl	9d24 <sdCsInit(unsigned char)>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    79f0:	movs	r1, #1
    79f2:	ldrb	r0, [r5, #17]
    79f4:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    79f8:	movs	r2, #7
    79fa:	add	r3, sp, #20
    79fc:	strd	r6, r2, [r5, #8]
  spiBegin(spiConfig);
    7a00:	ldmia.w	r4, {r0, r1, r2}
    7a04:	stmia.w	r3, {r0, r1, r2}
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
    7a08:	mov	r0, r7
  m_beginCalled = true;
    7a0a:	movs	r4, #1
    7a0c:	ldmia	r3, {r1, r2, r3}
    7a0e:	bl	9c04 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  if (!m_spiActive) {
    7a12:	ldrb	r6, [r5, #19]
  m_beginCalled = true;
    7a14:	strb	r4, [r5, #16]
  if (!m_spiActive) {
    7a16:	cmp	r6, #0
    7a18:	beq.w	7b36 <SharedSpiCard::begin(SdSpiConfig)+0x16e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7a1c:	movs	r4, #10
    7a1e:	movs	r1, #1
    7a20:	ldrb	r0, [r5, #17]
    7a22:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    return m_spiDriver.receive();
    7a26:	mov	r0, r7
    7a28:	bl	9c84 <SdSpiArduinoDriver::receive()>
  for (uint8_t i = 0; i < 10; i++) {
    7a2c:	subs	r1, r4, #1
    7a2e:	ands.w	r4, r1, #255	; 0xff
    7a32:	bne.n	7a26 <SharedSpiCard::begin(SdSpiConfig)+0x5e>
    7a34:	ldr.w	r9, [pc, #388]	; 7bbc <SharedSpiCard::begin(SdSpiConfig)+0x1f4>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7a38:	mov	r1, r4
    7a3a:	ldrb	r0, [r5, #17]
    7a3c:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    7a40:	ldr.w	r3, [r9]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7a44:	add.w	r8, r3, #2000	; 0x7d0
    7a48:	uxth.w	r8, r8
    7a4c:	b.n	7a5a <SharedSpiCard::begin(SdSpiConfig)+0x92>
    7a4e:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7a52:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    7a56:	lsls	r0, r3, #16
    7a58:	bmi.n	7ac6 <SharedSpiCard::begin(SdSpiConfig)+0xfe>
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    7a5a:	movs	r2, #0
    7a5c:	mov	r0, r5
    7a5e:	mov	r1, r2
    7a60:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7a64:	cmp	r0, #1
    7a66:	mov	r6, r0
    7a68:	bne.n	7a4e <SharedSpiCard::begin(SdSpiConfig)+0x86>
    if (cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND) {
    7a6a:	movs	r1, #8
    7a6c:	mov.w	r2, #426	; 0x1aa
    7a70:	mov	r0, r5
    7a72:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7a76:	lsls	r1, r0, #29
    7a78:	bmi.n	7ad8 <SharedSpiCard::begin(SdSpiConfig)+0x110>
    7a7a:	movs	r4, #4
    return m_spiDriver.receive();
    7a7c:	mov	r0, r7
    7a7e:	bl	9c84 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 4; i++) {
    7a82:	subs	r3, r4, #1
      m_status = spiReceive();
    7a84:	strb	r0, [r5, #21]
    for (uint8_t i = 0; i < 4; i++) {
    7a86:	ands.w	r4, r3, #255	; 0xff
    7a8a:	bne.n	7a7c <SharedSpiCard::begin(SdSpiConfig)+0xb4>
    if (m_status == 0XAA) {
    7a8c:	cmp	r0, #170	; 0xaa
    7a8e:	beq.n	7ad6 <SharedSpiCard::begin(SdSpiConfig)+0x10e>
    7a90:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7a94:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    7a98:	lsls	r2, r3, #16
    7a9a:	bpl.n	7a6a <SharedSpiCard::begin(SdSpiConfig)+0xa2>
    7a9c:	movs	r3, #6
  if (m_spiActive) {
    7a9e:	ldrb	r0, [r5, #19]
    m_errorCode = code;
    7aa0:	strb	r3, [r5, #18]
    7aa2:	cbz	r0, 7ad0 <SharedSpiCard::begin(SdSpiConfig)+0x108>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7aa4:	ldrb	r0, [r5, #17]
    7aa6:	movs	r1, #1
    7aa8:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7aac:	movs	r1, #255	; 0xff
    7aae:	mov	r0, r7
    7ab0:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7ab4:	mov	r0, r7
    7ab6:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7aba:	movs	r3, #0
  return false;
    7abc:	mov	r0, r3
    m_spiActive = false;
    7abe:	strb	r3, [r5, #19]
}
    7ac0:	add	sp, #32
    7ac2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7ac6:	movs	r3, #1
  if (m_spiActive) {
    7ac8:	ldrb	r0, [r5, #19]
    m_errorCode = code;
    7aca:	strb	r3, [r5, #18]
    7acc:	cmp	r0, #0
    7ace:	bne.n	7aa4 <SharedSpiCard::begin(SdSpiConfig)+0xdc>
}
    7ad0:	add	sp, #32
    7ad2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7ad6:	movs	r6, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7ad8:	ldr	r3, [r5, #0]
    7ada:	ldr	r4, [pc, #220]	; (7bb8 <SharedSpiCard::begin(SdSpiConfig)+0x1f0>)
  void type(uint8_t value) { m_type = value; }
    7adc:	strb	r6, [r5, #22]
    7ade:	ldr	r3, [r3, #92]	; 0x5c
    7ae0:	cmp	r3, r4
    7ae2:	bne.n	7b54 <SharedSpiCard::begin(SdSpiConfig)+0x18c>
    7ae4:	sub.w	r6, r6, #2
    7ae8:	clz	r6, r6
    7aec:	lsrs	r6, r6, #5
    7aee:	lsls	r6, r6, #30
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    7af0:	b.n	7afe <SharedSpiCard::begin(SdSpiConfig)+0x136>
    7af2:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7af6:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    7afa:	lsls	r3, r3, #16
    7afc:	bmi.n	7b50 <SharedSpiCard::begin(SdSpiConfig)+0x188>
    cardCommand(CMD55, 0);
    7afe:	movs	r1, #55	; 0x37
    7b00:	movs	r2, #0
    7b02:	mov	r0, r5
    7b04:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    7b08:	mov	r2, r6
    7b0a:	movs	r1, #41	; 0x29
    7b0c:	mov	r0, r5
    7b0e:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    7b12:	cmp	r0, #0
    7b14:	bne.n	7af2 <SharedSpiCard::begin(SdSpiConfig)+0x12a>
  if (type() == SD_CARD_TYPE_SD2) {
    7b16:	ldr	r3, [r5, #0]
    7b18:	ldr	r3, [r3, #92]	; 0x5c
    7b1a:	cmp	r3, r4
    7b1c:	bne.n	7baa <SharedSpiCard::begin(SdSpiConfig)+0x1e2>
  uint8_t type() const { return m_type; }
    7b1e:	ldrb	r0, [r5, #22]
    7b20:	cmp	r0, #2
    7b22:	beq.n	7b78 <SharedSpiCard::begin(SdSpiConfig)+0x1b0>
  if (m_spiActive) {
    7b24:	ldrb	r3, [r5, #19]
    7b26:	cbnz	r3, 7b5c <SharedSpiCard::begin(SdSpiConfig)+0x194>
    7b28:	movs	r3, #7
  return true;
    7b2a:	movs	r0, #1
    7b2c:	strd	sl, r3, [r5, #8]
}
    7b30:	add	sp, #32
    7b32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  void spiActivate() { m_spiDriver.activate(); }
    7b36:	mov	r0, r7
    7b38:	bl	9bf0 <SdSpiArduinoDriver::activate()>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7b3c:	mov	r1, r6
    7b3e:	ldrb	r0, [r5, #17]
    m_spiActive = true;
    7b40:	strb	r4, [r5, #19]
    7b42:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7b46:	movs	r1, #255	; 0xff
    7b48:	mov	r0, r7
    7b4a:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
}
    7b4e:	b.n	7a1c <SharedSpiCard::begin(SdSpiConfig)+0x54>
    7b50:	movs	r3, #23
    7b52:	b.n	7ac8 <SharedSpiCard::begin(SdSpiConfig)+0x100>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7b54:	mov	r0, r5
    7b56:	blx	r3
    7b58:	mov	r6, r0
    7b5a:	b.n	7ae4 <SharedSpiCard::begin(SdSpiConfig)+0x11c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7b5c:	movs	r1, #1
    7b5e:	ldrb	r0, [r5, #17]
    7b60:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7b64:	movs	r1, #255	; 0xff
    7b66:	mov	r0, r7
    7b68:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7b6c:	mov	r0, r7
    7b6e:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7b72:	movs	r3, #0
    7b74:	strb	r3, [r5, #19]
}
    7b76:	b.n	7b28 <SharedSpiCard::begin(SdSpiConfig)+0x160>
    if (cardCommand(CMD58, 0)) {
    7b78:	movs	r2, #0
    7b7a:	movs	r1, #58	; 0x3a
    7b7c:	mov	r0, r5
    7b7e:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7b82:	cbnz	r0, 7bb0 <SharedSpiCard::begin(SdSpiConfig)+0x1e8>
    return m_spiDriver.receive();
    7b84:	mov	r0, r7
    7b86:	bl	9c84 <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    7b8a:	and.w	r0, r0, #192	; 0xc0
    7b8e:	cmp	r0, #192	; 0xc0
    7b90:	bne.n	7b96 <SharedSpiCard::begin(SdSpiConfig)+0x1ce>
  void type(uint8_t value) { m_type = value; }
    7b92:	movs	r3, #3
    7b94:	strb	r3, [r5, #22]
    return m_spiDriver.receive();
    7b96:	mov	r0, r7
    7b98:	bl	9c84 <SdSpiArduinoDriver::receive()>
    7b9c:	mov	r0, r7
    7b9e:	bl	9c84 <SdSpiArduinoDriver::receive()>
    7ba2:	mov	r0, r7
    7ba4:	bl	9c84 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
    7ba8:	b.n	7b24 <SharedSpiCard::begin(SdSpiConfig)+0x15c>
  if (type() == SD_CARD_TYPE_SD2) {
    7baa:	mov	r0, r5
    7bac:	blx	r3
    7bae:	b.n	7b20 <SharedSpiCard::begin(SdSpiConfig)+0x158>
    7bb0:	movs	r3, #18
    7bb2:	b.n	7ac8 <SharedSpiCard::begin(SdSpiConfig)+0x100>
    7bb4:	.word	0x00061a80
    7bb8:	.word	0x0000767d
    7bbc:	.word	0x20007d70

00007bc0 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)>:
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    7bc0:	push	{r4, r5, r6, lr}
    7bc2:	mov	r4, r1
    7bc4:	sub	sp, #8
    7bc6:	mov	r6, r2
  if (cardCommand(CMD6, arg)) {
    7bc8:	movs	r1, #6
    7bca:	mov	r2, r4
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    7bcc:	mov	r4, r0
  if (cardCommand(CMD6, arg)) {
    7bce:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7bd2:	cbz	r0, 7c02 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x42>
    m_errorCode = code;
    7bd4:	movs	r3, #4
    7bd6:	strb	r3, [r4, #18]
  if (m_spiActive) {
    7bd8:	ldrb	r0, [r4, #19]
    7bda:	cbnz	r0, 7be0 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x20>
}
    7bdc:	add	sp, #8
    7bde:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    7be0:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7be2:	ldrb	r0, [r4, #17]
    7be4:	movs	r1, #1
    7be6:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7bea:	movs	r1, #255	; 0xff
    7bec:	mov	r0, r5
    7bee:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7bf2:	mov	r0, r5
    7bf4:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7bf8:	movs	r3, #0
  return false;
    7bfa:	mov	r0, r3
    m_spiActive = false;
    7bfc:	strb	r3, [r4, #19]
}
    7bfe:	add	sp, #8
    7c00:	pop	{r4, r5, r6, pc}
  if (!readData(status, 64)) {
    7c02:	mov	r5, r0
    7c04:	movs	r2, #64	; 0x40
    7c06:	mov	r1, r6
    7c08:	mov	r0, r4
    7c0a:	bl	77c8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    7c0e:	cmp	r0, #0
    7c10:	beq.n	7bd8 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x18>
  if (m_spiActive) {
    7c12:	ldrb	r6, [r4, #19]
    7c14:	cmp	r6, #0
    7c16:	beq.n	7bdc <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x1c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7c18:	ldrb	r0, [r4, #17]
    7c1a:	movs	r1, #1
    7c1c:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7c20:	adds	r0, r4, #4
    7c22:	movs	r1, #255	; 0xff
    7c24:	str	r0, [sp, #4]
    7c26:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7c2a:	ldr	r0, [sp, #4]
    7c2c:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
}
    7c30:	mov	r0, r6
    m_spiActive = false;
    7c32:	strb	r5, [r4, #19]
}
    7c34:	add	sp, #8
    7c36:	pop	{r4, r5, r6, pc}

00007c38 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7c38:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    7c3a:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7c3c:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    7c3e:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7c40:	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    7c42:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7c46:	cbnz	r0, 7c82 <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
    7c48:	adds	r7, r6, #4
    7c4a:	adds	r4, r5, #4
    return m_spiDriver.receive();
    7c4c:	mov	r0, r7
    7c4e:	bl	9c84 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    7c52:	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    7c56:	cmp	r5, r4
    7c58:	bne.n	7c4c <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    7c5a:	ldrb	r4, [r6, #19]
    7c5c:	cbnz	r4, 7c64 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    7c5e:	movs	r4, #1
}
    7c60:	mov	r0, r4
    7c62:	pop	{r3, r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7c64:	ldrb	r0, [r6, #17]
    7c66:	movs	r1, #1
    7c68:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7c6c:	movs	r1, #255	; 0xff
    7c6e:	mov	r0, r7
    7c70:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7c74:	mov	r0, r7
    7c76:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7c7a:	movs	r3, #0
}
    7c7c:	mov	r0, r4
    m_spiActive = false;
    7c7e:	strb	r3, [r6, #19]
}
    7c80:	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    7c82:	movs	r3, #18
  if (m_spiActive) {
    7c84:	ldrb	r4, [r6, #19]
    7c86:	strb	r3, [r6, #18]
    7c88:	cmp	r4, #0
    7c8a:	beq.n	7c60 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    7c8c:	adds	r4, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7c8e:	ldrb	r0, [r6, #17]
    7c90:	movs	r1, #1
    7c92:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7c96:	movs	r1, #255	; 0xff
    7c98:	mov	r0, r4
    7c9a:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7c9e:	mov	r0, r4
    7ca0:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7ca4:	movs	r3, #0
  return false;
    7ca6:	mov	r4, r3
    m_spiActive = false;
    7ca8:	strb	r3, [r6, #19]
}
    7caa:	mov	r0, r4
    7cac:	pop	{r3, r4, r5, r6, r7, pc}
    7cae:	nop

00007cb0 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    7cb0:	push	{r4, r5, r6, lr}
    7cb2:	mov	r6, r2
    7cb4:	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    7cb6:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    7cb8:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    7cba:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7cbe:	cbz	r0, 7cee <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    7cc0:	movs	r3, #28
    7cc2:	strb	r3, [r4, #18]
  if (m_spiActive) {
    7cc4:	ldrb	r0, [r4, #19]
    7cc6:	cbnz	r0, 7ccc <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    7cc8:	add	sp, #8
    7cca:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    7ccc:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7cce:	ldrb	r0, [r4, #17]
    7cd0:	movs	r1, #1
    7cd2:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7cd6:	movs	r1, #255	; 0xff
    7cd8:	mov	r0, r5
    7cda:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7cde:	mov	r0, r5
    7ce0:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7ce4:	movs	r3, #0
  return false;
    7ce6:	mov	r0, r3
    m_spiActive = false;
    7ce8:	strb	r3, [r4, #19]
}
    7cea:	add	sp, #8
    7cec:	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    7cee:	mov	r5, r0
    7cf0:	movs	r2, #16
    7cf2:	mov	r1, r6
    7cf4:	mov	r0, r4
    7cf6:	bl	77c8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    7cfa:	cmp	r0, #0
    7cfc:	beq.n	7cc4 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    7cfe:	ldrb	r6, [r4, #19]
    7d00:	cmp	r6, #0
    7d02:	beq.n	7cc8 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7d04:	ldrb	r0, [r4, #17]
    7d06:	movs	r1, #1
    7d08:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7d0c:	adds	r0, r4, #4
    7d0e:	movs	r1, #255	; 0xff
    7d10:	str	r0, [sp, #4]
    7d12:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7d16:	ldr	r0, [sp, #4]
    7d18:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
}
    7d1c:	mov	r0, r6
    m_spiActive = false;
    7d1e:	strb	r5, [r4, #19]
}
    7d20:	add	sp, #8
    7d22:	pop	{r4, r5, r6, pc}

00007d24 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? csd.capacity() : 0;
    7d24:	ldr	r3, [r0, #0]
    7d26:	ldr	r2, [pc, #144]	; (7db8 <SharedSpiCard::sectorCount()+0x94>)
    7d28:	ldr	r3, [r3, #72]	; 0x48
    7d2a:	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    7d2c:	push	{lr}
    7d2e:	sub	sp, #20
    7d30:	bne.n	7d50 <SharedSpiCard::sectorCount()+0x2c>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    7d32:	mov	r2, sp
    7d34:	movs	r1, #9
    7d36:	bl	7cb0 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? csd.capacity() : 0;
    7d3a:	cbz	r0, 7d4a <SharedSpiCard::sectorCount()+0x26>
  uint8_t csd[16];
  // Extract big endian fields.
  /** \return Capacity in sectors */
  uint32_t capacity() const {
    uint32_t c_size;
    uint8_t ver = csd[0] >> 6;
    7d3c:	ldrb.w	r3, [sp]
    if (ver == 0) {
    7d40:	lsrs	r3, r3, #6
    7d42:	beq.n	7d56 <SharedSpiCard::sectorCount()+0x32>
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
    7d44:	cmp	r3, #1
    7d46:	beq.n	7d98 <SharedSpiCard::sectorCount()+0x74>
    7d48:	movs	r0, #0
}
    7d4a:	add	sp, #20
    7d4c:	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? csd.capacity() : 0;
    7d50:	mov	r1, sp
    7d52:	blx	r3
    7d54:	b.n	7d3a <SharedSpiCard::sectorCount()+0x16>
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    7d56:	ldrb.w	r3, [sp, #9]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    7d5a:	ldrb.w	r2, [sp, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    7d5e:	ldrb.w	r0, [sp, #8]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    7d62:	lsls	r3, r3, #1
    7d64:	ldrb.w	r1, [sp, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    7d68:	lsls	r2, r2, #10
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    7d6a:	ldrb.w	ip, [sp, #7]
    7d6e:	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    7d70:	and.w	r3, r3, #6
      c_size = (uint32_t)(csd[6] & 3) << 10;
    7d74:	and.w	r2, r2, #3072	; 0xc00
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    7d78:	orr.w	r0, r0, ip, lsl #2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    7d7c:	orr.w	r3, r3, r1, lsr #7
      uint8_t read_bl_len = csd[5] & 15;
    7d80:	ldrb.w	r1, [sp, #5]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    7d84:	orrs	r0, r2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    7d86:	and.w	r2, r1, #15
    7d8a:	adds	r0, #1
    7d8c:	add	r3, r2
    7d8e:	subs	r3, #7
    7d90:	lsls	r0, r3
}
    7d92:	add	sp, #20
    7d94:	ldr.w	pc, [sp], #4
      c_size = (uint32_t)(csd[7] & 63) << 16;
    7d98:	ldrb.w	r3, [sp, #7]
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
    7d9c:	ldrh.w	r0, [sp, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    7da0:	lsls	r3, r3, #16
      c_size |= csd[9];
    7da2:	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    7da4:	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    7da8:	uxth	r0, r0
    7daa:	orrs	r0, r3
      return (c_size + 1) << 10;
    7dac:	adds	r0, #1
    7dae:	lsls	r0, r0, #10
    7db0:	add	sp, #20
    7db2:	ldr.w	pc, [sp], #4
    7db6:	nop
    7db8:	.word	0x00008189

00007dbc <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    7dbc:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    7dbe:	mov	r2, r1
    7dc0:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    7dc2:	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::readStart(uint32_t sector) {
    7dc4:	sub	sp, #12
    7dc6:	ldr	r5, [pc, #88]	; (7e20 <SharedSpiCard::readStart(unsigned long)+0x64>)
    7dc8:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    7dca:	cmp	r3, r5
    7dcc:	bne.n	7e18 <SharedSpiCard::readStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    7dce:	ldrb	r0, [r0, #22]
    7dd0:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    7dd2:	mov.w	r1, #18
    7dd6:	mov	r0, r4
    sector <<= 9;
    7dd8:	it	ne
    7dda:	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    7ddc:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7de0:	cbnz	r0, 7dec <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    7de2:	movs	r3, #1
  return true;
    7de4:	mov	r0, r3
  m_state = READ_STATE;
    7de6:	strb	r3, [r4, #20]
}
    7de8:	add	sp, #12
    7dea:	pop	{r4, r5, pc}
    m_errorCode = code;
    7dec:	movs	r3, #12
  if (m_spiActive) {
    7dee:	ldrb	r0, [r4, #19]
    7df0:	strb	r3, [r4, #18]
    7df2:	cmp	r0, #0
    7df4:	beq.n	7de8 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    7df6:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7df8:	ldrb	r0, [r4, #17]
    7dfa:	movs	r1, #1
    7dfc:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7e00:	movs	r1, #255	; 0xff
    7e02:	mov	r0, r5
    7e04:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7e08:	mov	r0, r5
    7e0a:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7e0e:	movs	r3, #0
}
    7e10:	mov	r0, r3
    m_spiActive = false;
    7e12:	strb	r3, [r4, #19]
}
    7e14:	add	sp, #12
    7e16:	pop	{r4, r5, pc}
    7e18:	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    7e1a:	blx	r3
    7e1c:	ldr	r2, [sp, #4]
    7e1e:	b.n	7dd0 <SharedSpiCard::readStart(unsigned long)+0x14>
    7e20:	.word	0x0000767d

00007e24 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    7e24:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    7e26:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    7e2a:	ldr	r7, [r3, #20]
    7e2c:	ldr	r3, [pc, #88]	; (7e88 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    7e2e:	cmp	r7, r3
    7e30:	bne.n	7e72 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
  if (sdState() != READ_STATE || sector != m_curSector) {
    7e32:	ldrb	r3, [r0, #20]
    7e34:	mov	r4, r0
    7e36:	mov	r5, r1
    7e38:	mov	r6, r2
    7e3a:	cmp	r3, #1
    7e3c:	bne.n	7e44 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    7e3e:	ldr	r3, [r0, #24]
    7e40:	cmp	r1, r3
    7e42:	beq.n	7e50 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    7e44:	mov	r1, r5
    7e46:	mov	r0, r4
    7e48:	bl	7dbc <SharedSpiCard::readStart(unsigned long)>
    7e4c:	cbz	r0, 7e6c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    7e4e:	str	r5, [r4, #24]
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    7e50:	mov.w	r2, #512	; 0x200
    7e54:	mov	r1, r6
    7e56:	mov	r0, r4
    7e58:	bl	77c8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst)) {
    7e5c:	cbz	r0, 7e6c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
  }
  m_curSector += ns;
    7e5e:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    7e60:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    7e62:	adds	r3, #1
    7e64:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    7e66:	cbz	r0, 7e7c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    7e68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

fail:
  return false;
    7e6c:	movs	r0, #0
}
    7e6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    7e72:	mov	ip, r7
    7e74:	movs	r3, #1
}
    7e76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    7e7a:	bx	ip
  return m_dedicatedSpi ? true : readStop();
    7e7c:	mov	r0, r4
}
    7e7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    7e82:	b.w	7854 <SharedSpiCard::readStop()>
    7e86:	nop
    7e88:	.word	0x00008201

00007e8c <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    7e8c:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    7e8e:	mov	r2, r1
    7e90:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    7e92:	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeStart(uint32_t sector) {
    7e94:	sub	sp, #12
    7e96:	ldr	r5, [pc, #88]	; (7ef0 <SharedSpiCard::writeStart(unsigned long)+0x64>)
    7e98:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    7e9a:	cmp	r3, r5
    7e9c:	bne.n	7ee8 <SharedSpiCard::writeStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    7e9e:	ldrb	r0, [r0, #22]
    7ea0:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    7ea2:	mov.w	r1, #25
    7ea6:	mov	r0, r4
    sector <<= 9;
    7ea8:	it	ne
    7eaa:	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    7eac:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7eb0:	cbnz	r0, 7ebc <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    7eb2:	movs	r3, #2
  return true;
    7eb4:	movs	r0, #1
  m_state = WRITE_STATE;
    7eb6:	strb	r3, [r4, #20]
}
    7eb8:	add	sp, #12
    7eba:	pop	{r4, r5, pc}
    m_errorCode = code;
    7ebc:	movs	r3, #14
  if (m_spiActive) {
    7ebe:	ldrb	r0, [r4, #19]
    7ec0:	strb	r3, [r4, #18]
    7ec2:	cmp	r0, #0
    7ec4:	beq.n	7eb8 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    7ec6:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7ec8:	ldrb	r0, [r4, #17]
    7eca:	movs	r1, #1
    7ecc:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7ed0:	movs	r1, #255	; 0xff
    7ed2:	mov	r0, r5
    7ed4:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7ed8:	mov	r0, r5
    7eda:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7ede:	movs	r3, #0
}
    7ee0:	mov	r0, r3
    m_spiActive = false;
    7ee2:	strb	r3, [r4, #19]
}
    7ee4:	add	sp, #12
    7ee6:	pop	{r4, r5, pc}
    7ee8:	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    7eea:	blx	r3
    7eec:	ldr	r2, [sp, #4]
    7eee:	b.n	7ea0 <SharedSpiCard::writeStart(unsigned long)+0x14>
    7ef0:	.word	0x0000767d

00007ef4 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    7ef4:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7ef6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    7efa:	ldr	r3, [r3, #72]	; 0x48
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7efc:	mov	r7, r2
    7efe:	ldr	r2, [pc, #260]	; (8004 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    7f00:	sub	sp, #20
    7f02:	mov	r4, r0
    7f04:	mov	r6, r1
    7f06:	cmp	r3, r2
    7f08:	bne.n	7f96 <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    7f0a:	mov	r2, sp
    7f0c:	movs	r1, #9
    7f0e:	bl	7cb0 <SharedSpiCard::readRegister(unsigned char, void*)>
    7f12:	mov	r5, r0
  if (!readCSD(&csd)) {
    7f14:	cbz	r5, 7f44 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    } else {
      return 0;
    }
  }
  /** \return true if erase granularity is single block. */
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    7f16:	ldrb.w	r3, [sp, #10]
  if (!csd.eraseSingleBlock()) {
    7f1a:	lsls	r2, r3, #25
    7f1c:	bpl.n	7f50 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    7f1e:	ldrb	r3, [r4, #22]
    7f20:	cmp	r3, #3
    7f22:	beq.n	7f28 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    7f24:	lsls	r6, r6, #9
    lastSector <<= 9;
    7f26:	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    7f28:	mov	r2, r6
    7f2a:	movs	r1, #32
    7f2c:	mov	r0, r4
    7f2e:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7f32:	cbnz	r0, 7f40 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    7f34:	mov	r2, r7
    7f36:	movs	r1, #33	; 0x21
    7f38:	mov	r0, r4
    7f3a:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7f3e:	cbz	r0, 7f9e <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    7f40:	movs	r3, #39	; 0x27
    7f42:	strb	r3, [r4, #18]
  if (m_spiActive) {
    7f44:	ldrb	r5, [r4, #19]
    7f46:	cbnz	r5, 7f70 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    7f48:	mov	r0, r5
    7f4a:	add	sp, #20
    7f4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  /** \return erase size in 512 byte blocks if eraseSingleBlock is false. */
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    7f50:	lsls	r3, r3, #1
    7f52:	ldrb.w	r2, [sp, #11]
    7f56:	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7f5a:	orr.w	r3, r3, r2, lsr #7
    7f5e:	adds	r2, r7, #1
    7f60:	orrs	r2, r6
    7f62:	tst	r3, r2
    7f64:	beq.n	7f1e <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    7f66:	movs	r3, #40	; 0x28
  if (m_spiActive) {
    7f68:	ldrb	r5, [r4, #19]
    7f6a:	strb	r3, [r4, #18]
    7f6c:	cmp	r5, #0
    7f6e:	beq.n	7f48 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    7f70:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7f72:	ldrb	r0, [r4, #17]
    7f74:	movs	r1, #1
    7f76:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7f7a:	movs	r1, #255	; 0xff
    7f7c:	mov	r0, r5
    7f7e:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7f82:	mov	r0, r5
    7f84:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7f88:	movs	r3, #0
  return false;
    7f8a:	mov	r5, r3
    m_spiActive = false;
    7f8c:	strb	r3, [r4, #19]
}
    7f8e:	mov	r0, r5
    7f90:	add	sp, #20
    7f92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    7f96:	mov	r1, sp
    7f98:	blx	r3
    7f9a:	mov	r5, r0
    7f9c:	b.n	7f14 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      cardCommand(CMD38, 0)) {
    7f9e:	mov	r2, r0
    7fa0:	movs	r1, #38	; 0x26
    7fa2:	mov	r0, r4
    7fa4:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    7fa8:	cmp	r0, #0
    7faa:	bne.n	7f40 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    7fac:	ldr.w	r8, [pc, #88]	; 8008 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7fb0:	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    7fb4:	add.w	r9, r4, #4
    7fb8:	ldr.w	r3, [r8]
    7fbc:	add	r7, r3
    7fbe:	uxth	r7, r7
  explicit Timeout(uint16_t ms) { set(ms); }
    7fc0:	b.n	7fcc <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    7fc2:	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7fc6:	subs	r3, r7, r3
    if (timeout.timedOut()) {
    7fc8:	lsls	r3, r3, #16
    7fca:	bmi.n	7ffc <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    7fcc:	mov	r0, r9
    7fce:	bl	9c84 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    7fd2:	cmp	r0, #255	; 0xff
    7fd4:	mov	r6, r0
    7fd6:	bne.n	7fc2 <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    7fd8:	ldrb	r3, [r4, #19]
    7fda:	cmp	r3, #0
    7fdc:	beq.n	7f48 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7fde:	movs	r1, #1
    7fe0:	ldrb	r0, [r4, #17]
  return true;
    7fe2:	mov	r5, r3
    7fe4:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7fe8:	mov	r1, r6
    7fea:	mov	r0, r9
    7fec:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7ff0:	mov	r0, r9
    7ff2:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7ff6:	movs	r3, #0
    7ff8:	strb	r3, [r4, #19]
}
    7ffa:	b.n	7f48 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    7ffc:	movs	r3, #41	; 0x29
    7ffe:	strb	r3, [r4, #18]
    goto fail;
    8000:	b.n	7f44 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    8002:	nop
    8004:	.word	0x00008189
    8008:	.word	0x20007d70

0000800c <SharedSpiCard::readSCR(scr_t*)>:
bool SharedSpiCard::readSCR(scr_t* scr) {
    800c:	push	{r4, r5, r6, lr}
    800e:	mov	r4, r0
    8010:	sub	sp, #8
    cardCommand(CMD55, 0);
    8012:	movs	r2, #0
    8014:	mov	r6, r1
    8016:	movs	r1, #55	; 0x37
    8018:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    801c:	movs	r2, #0
    801e:	movs	r1, #51	; 0x33
    8020:	mov	r0, r4
    8022:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD51, 0)) {
    8026:	cbz	r0, 8056 <SharedSpiCard::readSCR(scr_t*)+0x4a>
    m_errorCode = code;
    8028:	movs	r3, #24
    802a:	strb	r3, [r4, #18]
  if (m_spiActive) {
    802c:	ldrb	r0, [r4, #19]
    802e:	cbnz	r0, 8034 <SharedSpiCard::readSCR(scr_t*)+0x28>
}
    8030:	add	sp, #8
    8032:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    8034:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8036:	ldrb	r0, [r4, #17]
    8038:	movs	r1, #1
    803a:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    803e:	movs	r1, #255	; 0xff
    8040:	mov	r0, r5
    8042:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8046:	mov	r0, r5
    8048:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    804c:	movs	r3, #0
  return false;
    804e:	mov	r0, r3
    m_spiActive = false;
    8050:	strb	r3, [r4, #19]
}
    8052:	add	sp, #8
    8054:	pop	{r4, r5, r6, pc}
  if (!readData(dst, sizeof(scr_t))) {
    8056:	mov	r5, r0
    8058:	movs	r2, #8
    805a:	mov	r1, r6
    805c:	mov	r0, r4
    805e:	bl	77c8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    8062:	cmp	r0, #0
    8064:	beq.n	802c <SharedSpiCard::readSCR(scr_t*)+0x20>
  if (m_spiActive) {
    8066:	ldrb	r6, [r4, #19]
    8068:	cmp	r6, #0
    806a:	beq.n	8030 <SharedSpiCard::readSCR(scr_t*)+0x24>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    806c:	ldrb	r0, [r4, #17]
    806e:	movs	r1, #1
    8070:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8074:	adds	r0, r4, #4
    8076:	movs	r1, #255	; 0xff
    8078:	str	r0, [sp, #4]
    807a:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    807e:	ldr	r0, [sp, #4]
    8080:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
}
    8084:	mov	r0, r6
    m_spiActive = false;
    8086:	strb	r5, [r4, #19]
}
    8088:	add	sp, #8
    808a:	pop	{r4, r5, r6, pc}

0000808c <SharedSpiCard::readSDS(sds_t*)>:
bool SharedSpiCard::readSDS(sds_t* sds) {
    808c:	push	{r3, r4, r5, r6, r7, lr}
    808e:	mov	r4, r0
    cardCommand(CMD55, 0);
    8090:	movs	r2, #0
    8092:	mov	r5, r1
    8094:	movs	r1, #55	; 0x37
    8096:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    809a:	movs	r2, #0
    809c:	movs	r1, #13
    809e:	mov	r0, r4
    80a0:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    80a4:	cbz	r0, 80d0 <SharedSpiCard::readSDS(sds_t*)+0x44>
    m_errorCode = code;
    80a6:	movs	r3, #21
    80a8:	strb	r3, [r4, #18]
  if (m_spiActive) {
    80aa:	ldrb	r0, [r4, #19]
    80ac:	cbnz	r0, 80b0 <SharedSpiCard::readSDS(sds_t*)+0x24>
}
    80ae:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiDriver.send(data);
    80b0:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    80b2:	ldrb	r0, [r4, #17]
    80b4:	movs	r1, #1
    80b6:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    80ba:	movs	r1, #255	; 0xff
    80bc:	mov	r0, r5
    80be:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    80c2:	mov	r0, r5
    80c4:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    80c8:	movs	r3, #0
  return false;
    80ca:	mov	r0, r3
    m_spiActive = false;
    80cc:	strb	r3, [r4, #19]
}
    80ce:	pop	{r3, r4, r5, r6, r7, pc}
    return m_spiDriver.receive();
    80d0:	adds	r7, r4, #4
    80d2:	mov	r0, r7
    80d4:	bl	9c84 <SdSpiArduinoDriver::receive()>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    80d8:	mov	r6, r0
    80da:	cmp	r0, #0
    80dc:	bne.n	80a6 <SharedSpiCard::readSDS(sds_t*)+0x1a>
  if (!readData(dst, sizeof(sds_t))) {
    80de:	movs	r2, #64	; 0x40
    80e0:	mov	r1, r5
    80e2:	mov	r0, r4
    80e4:	bl	77c8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    80e8:	cmp	r0, #0
    80ea:	beq.n	80aa <SharedSpiCard::readSDS(sds_t*)+0x1e>
  if (m_spiActive) {
    80ec:	ldrb	r5, [r4, #19]
    80ee:	cmp	r5, #0
    80f0:	beq.n	80ae <SharedSpiCard::readSDS(sds_t*)+0x22>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    80f2:	ldrb	r0, [r4, #17]
    80f4:	movs	r1, #1
    80f6:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    80fa:	movs	r1, #255	; 0xff
    80fc:	mov	r0, r7
    80fe:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8102:	mov	r0, r7
    8104:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
  return true;
    8108:	mov	r0, r5
    m_spiActive = false;
    810a:	strb	r6, [r4, #19]
}
    810c:	pop	{r3, r4, r5, r6, r7, pc}
    810e:	nop

00008110 <SharedSpiCard::readCID(cid_t*)>:
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    8110:	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    8112:	movs	r2, #0
    8114:	sub	sp, #8
    8116:	mov	r6, r1
    8118:	movs	r1, #10
    811a:	mov	r4, r0
    811c:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8120:	cbz	r0, 8150 <SharedSpiCard::readCID(cid_t*)+0x40>
    m_errorCode = code;
    8122:	movs	r3, #28
    8124:	strb	r3, [r4, #18]
  if (m_spiActive) {
    8126:	ldrb	r0, [r4, #19]
    8128:	cbnz	r0, 812e <SharedSpiCard::readCID(cid_t*)+0x1e>
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    812a:	add	sp, #8
    812c:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    812e:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8130:	ldrb	r0, [r4, #17]
    8132:	movs	r1, #1
    8134:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8138:	movs	r1, #255	; 0xff
    813a:	mov	r0, r5
    813c:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8140:	mov	r0, r5
    8142:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8146:	movs	r3, #0
  return false;
    8148:	mov	r0, r3
    m_spiActive = false;
    814a:	strb	r3, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    814c:	add	sp, #8
    814e:	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    8150:	mov	r5, r0
    8152:	movs	r2, #16
    8154:	mov	r1, r6
    8156:	mov	r0, r4
    8158:	bl	77c8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    815c:	cmp	r0, #0
    815e:	beq.n	8126 <SharedSpiCard::readCID(cid_t*)+0x16>
  if (m_spiActive) {
    8160:	ldrb	r6, [r4, #19]
    8162:	cmp	r6, #0
    8164:	beq.n	812a <SharedSpiCard::readCID(cid_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8166:	ldrb	r0, [r4, #17]
    8168:	movs	r1, #1
    816a:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    816e:	adds	r0, r4, #4
    8170:	movs	r1, #255	; 0xff
    8172:	str	r0, [sp, #4]
    8174:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8178:	ldr	r0, [sp, #4]
    817a:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
}
    817e:	mov	r0, r6
    m_spiActive = false;
    8180:	strb	r5, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    8182:	add	sp, #8
    8184:	pop	{r4, r5, r6, pc}
    8186:	nop

00008188 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    8188:	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    818a:	movs	r2, #0
    818c:	sub	sp, #8
    818e:	mov	r6, r1
    8190:	movs	r1, #9
    8192:	mov	r4, r0
    8194:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8198:	cbz	r0, 81c8 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    819a:	movs	r3, #28
    819c:	strb	r3, [r4, #18]
  if (m_spiActive) {
    819e:	ldrb	r0, [r4, #19]
    81a0:	cbnz	r0, 81a6 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    81a2:	add	sp, #8
    81a4:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    81a6:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    81a8:	ldrb	r0, [r4, #17]
    81aa:	movs	r1, #1
    81ac:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    81b0:	movs	r1, #255	; 0xff
    81b2:	mov	r0, r5
    81b4:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    81b8:	mov	r0, r5
    81ba:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    81be:	movs	r3, #0
  return false;
    81c0:	mov	r0, r3
    m_spiActive = false;
    81c2:	strb	r3, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    81c4:	add	sp, #8
    81c6:	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    81c8:	mov	r5, r0
    81ca:	movs	r2, #16
    81cc:	mov	r1, r6
    81ce:	mov	r0, r4
    81d0:	bl	77c8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    81d4:	cmp	r0, #0
    81d6:	beq.n	819e <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    81d8:	ldrb	r6, [r4, #19]
    81da:	cmp	r6, #0
    81dc:	beq.n	81a2 <SharedSpiCard::readCSD(csd_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    81de:	ldrb	r0, [r4, #17]
    81e0:	movs	r1, #1
    81e2:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    81e6:	adds	r0, r4, #4
    81e8:	movs	r1, #255	; 0xff
    81ea:	str	r0, [sp, #4]
    81ec:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    81f0:	ldr	r0, [sp, #4]
    81f2:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
}
    81f6:	mov	r0, r6
    m_spiActive = false;
    81f8:	strb	r5, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    81fa:	add	sp, #8
    81fc:	pop	{r4, r5, r6, pc}
    81fe:	nop

00008200 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    8200:	push	{r4, r5, r6, r7, lr}
    8202:	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    8204:	ldrb	r2, [r0, #20]
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    8206:	sub	sp, #12
    8208:	mov	r6, r0
  if (sdState() != READ_STATE || sector != m_curSector) {
    820a:	cmp	r2, #1
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    820c:	mov	r5, r1
    820e:	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8210:	bne.n	8218 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x18>
    8212:	ldr	r3, [r0, #24]
    8214:	cmp	r3, r1
    8216:	beq.n	8224 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
    if (!readStart(sector)) {
    8218:	mov	r1, r5
    821a:	mov	r0, r6
    821c:	bl	7dbc <SharedSpiCard::readStart(unsigned long)>
    8220:	cbz	r0, 8244 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_curSector = sector;
    8222:	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8224:	cbz	r7, 824c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    if (!readStart(sector)) {
    8226:	movs	r5, #0
    8228:	b.n	822e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    822a:	cmp	r7, r5
    822c:	beq.n	824c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    822e:	mov	r1, r4
    8230:	mov.w	r2, #512	; 0x200
    8234:	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8236:	adds	r5, #1
    8238:	add.w	r4, r4, #512	; 0x200
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    823c:	bl	77c8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    8240:	cmp	r0, #0
    8242:	bne.n	822a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2a>
  return false;
    8244:	movs	r4, #0
}
    8246:	mov	r0, r4
    8248:	add	sp, #12
    824a:	pop	{r4, r5, r6, r7, pc}
  m_curSector += ns;
    824c:	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    824e:	ldrb	r4, [r6, #28]
  m_curSector += ns;
    8250:	add	r3, r7
    8252:	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    8254:	cbz	r4, 825e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
    8256:	movs	r4, #1
}
    8258:	mov	r0, r4
    825a:	add	sp, #12
    825c:	pop	{r4, r5, r6, r7, pc}
  if (cardCommand(CMD12, 0)) {
    825e:	mov	r2, r4
    8260:	movs	r1, #12
    8262:	mov	r0, r6
  m_state = IDLE_STATE;
    8264:	strb	r4, [r6, #20]
  if (cardCommand(CMD12, 0)) {
    8266:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    826a:	mov	r5, r0
    826c:	cbnz	r0, 8290 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x90>
  if (m_spiActive) {
    826e:	ldrb	r4, [r6, #19]
    8270:	cmp	r4, #0
    8272:	beq.n	8256 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8274:	movs	r1, #1
    8276:	ldrb	r0, [r6, #17]
    8278:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    827c:	adds	r0, r6, #4
    827e:	movs	r1, #255	; 0xff
    8280:	str	r0, [sp, #4]
    8282:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8286:	ldr	r0, [sp, #4]
    8288:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    828c:	strb	r5, [r6, #19]
}
    828e:	b.n	8246 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    m_errorCode = code;
    8290:	movs	r2, #9
  if (m_spiActive) {
    8292:	ldrb	r3, [r6, #19]
    8294:	strb	r2, [r6, #18]
    8296:	cmp	r3, #0
    8298:	beq.n	8244 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_spiDriver.send(data);
    829a:	adds	r5, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    829c:	movs	r1, #1
    829e:	ldrb	r0, [r6, #17]
    82a0:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    82a4:	movs	r1, #255	; 0xff
    82a6:	mov	r0, r5
    82a8:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    82ac:	mov	r0, r5
    82ae:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    82b2:	strb	r4, [r6, #19]
}
    82b4:	b.n	8246 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    82b6:	nop

000082b8 <DedicatedSpiCard::setDedicatedSpi(bool)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
  if (!syncDevice()) {
    82b8:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    82ba:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    82be:	ldr	r2, [r3, #28]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    82c0:	sub	sp, #8
    82c2:	ldr	r5, [pc, #144]	; (8354 <DedicatedSpiCard::setDedicatedSpi(bool)+0x9c>)
    82c4:	mov	r4, r0
    82c6:	mov	r6, r1
    82c8:	cmp	r2, r5
    82ca:	bne.n	82f0 <DedicatedSpiCard::setDedicatedSpi(bool)+0x38>
  if (m_state == WRITE_STATE) {
    82cc:	ldrb	r5, [r0, #20]
    82ce:	cmp	r5, #2
    82d0:	beq.n	82e0 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
  if (m_state == READ_STATE) {
    82d2:	cmp	r5, #1
    82d4:	beq.n	82f4 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>
    return false;
  }
  m_dedicatedSpi = value;
  return true;
    82d6:	movs	r0, #1
  m_dedicatedSpi = value;
    82d8:	strb	r6, [r4, #28]
}
    82da:	add	sp, #8
    82dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    82e0:	ldr	r3, [r3, #104]	; 0x68
    82e2:	blx	r3
  if (!syncDevice()) {
    82e4:	cmp	r0, #0
    82e6:	bne.n	82d6 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    return false;
    82e8:	movs	r0, #0
}
    82ea:	add	sp, #8
    82ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!syncDevice()) {
    82f0:	blx	r2
    82f2:	b.n	82e4 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2c>
  m_state = IDLE_STATE;
    82f4:	mov.w	r8, #0
  if (cardCommand(CMD12, 0)) {
    82f8:	movs	r1, #12
    82fa:	mov	r2, r8
  m_state = IDLE_STATE;
    82fc:	strb.w	r8, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    8300:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8304:	mov	r7, r0
    8306:	cbnz	r0, 832a <DedicatedSpiCard::setDedicatedSpi(bool)+0x72>
  if (m_spiActive) {
    8308:	ldrb	r3, [r4, #19]
    830a:	cmp	r3, #0
    830c:	beq.n	82d6 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    830e:	mov	r1, r5
    8310:	ldrb	r0, [r4, #17]
    8312:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8316:	adds	r0, r4, #4
    8318:	movs	r1, #255	; 0xff
    831a:	str	r0, [sp, #4]
    831c:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8320:	ldr	r0, [sp, #4]
    8322:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8326:	strb	r7, [r4, #19]
    8328:	b.n	82d6 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    m_errorCode = code;
    832a:	movs	r2, #9
  if (m_spiActive) {
    832c:	ldrb	r3, [r4, #19]
    832e:	strb	r2, [r4, #18]
    8330:	cmp	r3, #0
    8332:	beq.n	82e8 <DedicatedSpiCard::setDedicatedSpi(bool)+0x30>
    m_spiDriver.send(data);
    8334:	adds	r6, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8336:	mov	r1, r5
    8338:	ldrb	r0, [r4, #17]
    833a:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    833e:	movs	r1, #255	; 0xff
    8340:	mov	r0, r6
    8342:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8346:	mov	r0, r6
    8348:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    return false;
    834c:	mov	r0, r8
    m_spiActive = false;
    834e:	strb.w	r8, [r4, #19]
    8352:	b.n	82da <DedicatedSpiCard::setDedicatedSpi(bool)+0x22>
    8354:	.word	0x000078c5

00008358 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    8358:	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    835a:	adds	r5, r0, #4
    835c:	mov	r6, r2
    835e:	mov	r4, r0
    8360:	mov	r0, r5
    8362:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    8366:	mov.w	r2, #512	; 0x200
    836a:	mov	r1, r6
    836c:	mov	r0, r5
    836e:	bl	9cd4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    8372:	movs	r1, #255	; 0xff
    8374:	mov	r0, r5
    8376:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
    837a:	movs	r1, #255	; 0xff
    837c:	mov	r0, r5
    837e:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8382:	mov	r0, r5
    8384:	bl	9c84 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    8388:	and.w	r3, r0, #31
  m_status = spiReceive();
    838c:	strb	r0, [r4, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    838e:	cmp	r3, #5
    8390:	beq.n	839c <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    8392:	movs	r3, #33	; 0x21
  if (m_spiActive) {
    8394:	ldrb	r0, [r4, #19]
    8396:	strb	r3, [r4, #18]
    8398:	cbnz	r0, 83a0 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    839a:	pop	{r4, r5, r6, pc}
  return true;
    839c:	movs	r0, #1
}
    839e:	pop	{r4, r5, r6, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    83a0:	ldrb	r0, [r4, #17]
    83a2:	movs	r1, #1
    83a4:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    83a8:	movs	r1, #255	; 0xff
    83aa:	mov	r0, r5
    83ac:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    83b0:	mov	r0, r5
    83b2:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    83b6:	movs	r3, #0
}
    83b8:	mov	r0, r3
    m_spiActive = false;
    83ba:	strb	r3, [r4, #19]
}
    83bc:	pop	{r4, r5, r6, pc}
    83be:	nop

000083c0 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    83c0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    83c4:	ldr	r5, [pc, #92]	; (8424 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    83c6:	mov	r6, r0
    83c8:	mov	r7, r1
    return m_spiDriver.receive();
    83ca:	add.w	r8, r0, #4
    83ce:	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    83d0:	add.w	r4, r4, #600	; 0x258
    83d4:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    83d6:	b.n	83e0 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    83d8:	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    83da:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    83dc:	lsls	r3, r3, #16
    83de:	bmi.n	83fa <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    83e0:	mov	r0, r8
    83e2:	bl	9c84 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    83e6:	cmp	r0, #255	; 0xff
    83e8:	bne.n	83d8 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    83ea:	mov	r2, r7
    83ec:	movs	r1, #252	; 0xfc
    83ee:	mov	r0, r6
    83f0:	bl	8358 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    83f4:	cbz	r0, 83fe <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    83f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    83fa:	movs	r3, #37	; 0x25
    83fc:	strb	r3, [r6, #18]
  if (m_spiActive) {
    83fe:	ldrb	r0, [r6, #19]
    8400:	cmp	r0, #0
    8402:	beq.n	83f6 <SharedSpiCard::writeData(unsigned char const*)+0x36>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8404:	ldrb	r0, [r6, #17]
    8406:	movs	r1, #1
    8408:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    840c:	movs	r1, #255	; 0xff
    840e:	mov	r0, r8
    8410:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8414:	mov	r0, r8
    8416:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    841a:	movs	r3, #0
}
    841c:	mov	r0, r3
    m_spiActive = false;
    841e:	strb	r3, [r6, #19]
}
    8420:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8424:	.word	0x20007d70

00008428 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8428:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    842c:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    842e:	mov	r5, r2
    8430:	ldr	r2, [pc, #212]	; (8508 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    8432:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    8434:	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8436:	mov	r6, r1
    8438:	cmp	r3, r2
    843a:	bne.n	84f6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xce>
  uint8_t type() const { return m_type; }
    843c:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    843e:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    8440:	mov.w	r1, #24
    8444:	mov	r0, r4
    sector <<= 9;
    8446:	it	ne
    8448:	lslne	r6, r6, #9
  if (cardCommand(CMD24, sector)) {
    844a:	mov	r2, r6
    844c:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8450:	cbz	r0, 8466 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    m_errorCode = code;
    8452:	movs	r3, #13
    8454:	strb	r3, [r4, #18]
  if (m_spiActive) {
    8456:	ldrb.w	r9, [r4, #19]
    845a:	cmp.w	r9, #0
    845e:	bne.n	84d2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xaa>
}
    8460:	mov	r0, r9
    8462:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    8466:	mov	r2, r5
    8468:	movs	r1, #254	; 0xfe
    846a:	mov	r0, r4
    846c:	bl	8358 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8470:	mov	r9, r0
    8472:	cmp	r0, #0
    8474:	beq.n	8456 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    8476:	ldr	r7, [pc, #148]	; (850c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    return m_spiDriver.receive();
    8478:	add.w	r8, r4, #4
    847c:	ldr	r6, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    847e:	add.w	r6, r6, #600	; 0x258
    8482:	uxth	r6, r6
  explicit Timeout(uint16_t ms) { set(ms); }
    8484:	b.n	848e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x66>
    8486:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    8488:	subs	r3, r6, r3
    if (timeout.timedOut()) {
    848a:	lsls	r3, r3, #16
    848c:	bmi.n	8500 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd8>
    848e:	mov	r0, r8
    8490:	bl	9c84 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8494:	cmp	r0, #255	; 0xff
    8496:	mov	r5, r0
    8498:	bne.n	8486 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5e>
  if (cardCommand(CMD13, 0) || spiReceive()) {
    849a:	movs	r2, #0
    849c:	movs	r1, #13
    849e:	mov	r0, r4
    84a0:	bl	78dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    84a4:	cbnz	r0, 84fa <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
    84a6:	mov	r0, r8
    84a8:	bl	9c84 <SdSpiArduinoDriver::receive()>
    84ac:	mov	r6, r0
    84ae:	cbnz	r0, 84fa <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
  if (m_spiActive) {
    84b0:	ldrb	r3, [r4, #19]
    84b2:	cmp	r3, #0
    84b4:	beq.n	8460 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    84b6:	movs	r1, #1
    84b8:	ldrb	r0, [r4, #17]
  return true;
    84ba:	mov	r9, r3
    84bc:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    84c0:	mov	r1, r5
    84c2:	mov	r0, r8
    84c4:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    84c8:	mov	r0, r8
    84ca:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    84ce:	strb	r6, [r4, #19]
}
    84d0:	b.n	8460 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
    m_spiDriver.send(data);
    84d2:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    84d4:	ldrb	r0, [r4, #17]
    84d6:	movs	r1, #1
    84d8:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    84dc:	movs	r1, #255	; 0xff
    84de:	mov	r0, r5
    84e0:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    84e4:	mov	r0, r5
    84e6:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    84ea:	movs	r3, #0
  return false;
    84ec:	mov	r9, r3
    m_spiActive = false;
    84ee:	strb	r3, [r4, #19]
}
    84f0:	mov	r0, r9
    84f2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    84f6:	blx	r3
    84f8:	b.n	843e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    m_errorCode = code;
    84fa:	movs	r3, #10
    84fc:	strb	r3, [r4, #18]
    goto fail;
    84fe:	b.n	8456 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    8500:	movs	r3, #36	; 0x24
    8502:	strb	r3, [r4, #18]
    goto fail;
    8504:	b.n	8456 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    8506:	nop
    8508:	.word	0x0000767d
    850c:	.word	0x20007d70

00008510 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8510:	push	{r4}
  if (m_dedicatedSpi) {
    8512:	ldrb	r4, [r0, #28]
    8514:	cbz	r4, 8524 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    8516:	ldr	r4, [r0, #0]
    8518:	movs	r3, #1
    851a:	ldr	r4, [r4, #36]	; 0x24
    851c:	mov	ip, r4
  }
  return SharedSpiCard::writeSector(sector, src);
}
    851e:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    8522:	bx	ip
}
    8524:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    8528:	b.w	8428 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

0000852c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    852c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8530:	mov	sl, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8532:	ldrb	r3, [r0, #20]
                                    size_t ns) {
    8534:	sub	sp, #4
    8536:	mov	r7, r0
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8538:	cmp	r3, #2
                                    size_t ns) {
    853a:	mov	r4, r1
    853c:	mov	r8, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    853e:	beq.n	85f4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc8>
    if (!writeStart(sector)) {
    8540:	ldr	r3, [r7, #0]
    8542:	mov	r1, r4
    8544:	mov	r0, r7
    8546:	ldr	r3, [r3, #100]	; 0x64
    8548:	blx	r3
    854a:	cmp	r0, #0
    854c:	beq.n	85be <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
      goto fail;
    }
    m_curSector = sector;
    854e:	str	r4, [r7, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    8550:	cmp.w	sl, #0
    8554:	beq.n	859e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x72>
    if (!writeStart(sector)) {
    8556:	mov.w	r9, #0
    855a:	ldr.w	fp, [pc, #164]	; 8600 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd4>
    855e:	ldr	r5, [pc, #156]	; (85fc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd0>)
    return m_spiDriver.receive();
    8560:	adds	r6, r7, #4
    if (!writeData(src)) {
    8562:	ldr	r3, [r7, #0]
    8564:	ldr	r3, [r3, #96]	; 0x60
    8566:	cmp	r3, fp
    8568:	bne.n	85c6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x9a>
    856a:	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    856c:	add.w	r4, r4, #600	; 0x258
    8570:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    8572:	b.n	857c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
    8574:	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    8576:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    8578:	lsls	r3, r3, #16
    857a:	bmi.n	85b6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8a>
    857c:	mov	r0, r6
    857e:	bl	9c84 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8582:	cmp	r0, #255	; 0xff
    8584:	bne.n	8574 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    8586:	mov	r2, r8
    8588:	movs	r1, #252	; 0xfc
    858a:	mov	r0, r7
    858c:	bl	8358 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8590:	cbz	r0, 85ba <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8e>
  for (size_t i = 0; i < ns; i++, src += 512) {
    8592:	add.w	r9, r9, #1
    8596:	add.w	r8, r8, #512	; 0x200
    859a:	cmp	sl, r9
    859c:	bne.n	8562 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
      goto fail;
    }
  }
  m_curSector += ns;
    859e:	ldr	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    85a0:	ldrb	r0, [r7, #28]
  m_curSector += ns;
    85a2:	add	r3, sl
    85a4:	str	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    85a6:	cbnz	r0, 85c0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x94>
    85a8:	ldr	r3, [r7, #0]
    85aa:	mov	r0, r7
    85ac:	ldr	r3, [r3, #104]	; 0x68

fail:
  return false;
}
    85ae:	add	sp, #4
    85b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : writeStop();
    85b4:	bx	r3
    m_errorCode = code;
    85b6:	movs	r3, #37	; 0x25
    85b8:	strb	r3, [r7, #18]
  if (m_spiActive) {
    85ba:	ldrb	r3, [r7, #19]
    85bc:	cbnz	r3, 85d2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xa6>
  return false;
    85be:	movs	r0, #0
}
    85c0:	add	sp, #4
    85c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!writeData(src)) {
    85c6:	mov	r1, r8
    85c8:	mov	r0, r7
    85ca:	blx	r3
    85cc:	cmp	r0, #0
    85ce:	bne.n	8592 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x66>
    85d0:	b.n	85be <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    85d2:	ldrb	r0, [r7, #17]
    85d4:	movs	r1, #1
    85d6:	bl	9d2c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    85da:	movs	r1, #255	; 0xff
    85dc:	mov	r0, r6
    85de:	bl	9cc0 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    85e2:	mov	r0, r6
    85e4:	bl	9c2c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    85e8:	movs	r3, #0
  return false;
    85ea:	mov	r0, r3
    m_spiActive = false;
    85ec:	strb	r3, [r7, #19]
}
    85ee:	add	sp, #4
    85f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    85f4:	ldr	r3, [r0, #24]
    85f6:	cmp	r3, r1
    85f8:	bne.n	8540 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
    85fa:	b.n	8550 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
    85fc:	.word	0x20007d70
    8600:	.word	0x000083c1

00008604 <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    8604:	push	{r4, lr}
    8606:	sub	sp, #16
    8608:	mov	r4, r0
    860a:	add.w	ip, sp, #4
    860e:	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    8612:	ldmia.w	ip, {r1, r2, r3}
    8616:	bl	79c8 <SharedSpiCard::begin(SdSpiConfig)>
    861a:	cbz	r0, 8626 <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t USER_SPI_BEGIN = 2;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) { return opt & DEDICATED_SPI; }
    861c:	ldrb.w	r3, [sp, #5]
    8620:	and.w	r3, r3, #1
    8624:	strb	r3, [r4, #28]
}
    8626:	add	sp, #16
    8628:	pop	{r4, pc}
    862a:	nop

0000862c <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() { return false; }
    862c:	movs	r0, #0
    862e:	bx	lr

00008630 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() { return false; }
    8630:	movs	r0, #0
    8632:	bx	lr

00008634 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    8634:	movs	r0, #0
    8636:	bx	lr

00008638 <SdioCard::end()>:
   */
  bool cardCMD6(uint32_t arg, uint8_t* status);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    8638:	bx	lr
    863a:	nop

0000863c <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    863c:	ldr	r3, [pc, #32]	; (8660 <sdIrs()+0x24>)
    863e:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    8640:	ldr	r2, [pc, #32]	; (8664 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    8642:	ldr	r0, [pc, #36]	; (8668 <sdIrs()+0x2c>)
static void sdIrs() {
    8644:	push	{r4}
  SDHC_IRQSIGEN = 0;
    8646:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    8648:	ldr	r4, [r3, #48]	; 0x30
    864a:	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    864c:	ldr	r2, [r2, #0]
}
    864e:	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    8652:	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    8654:	ldr	r2, [r3, #72]	; 0x48
    8656:	bic.w	r2, r2, #129	; 0x81
    865a:	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    865c:	strb	r1, [r0, #0]
}
    865e:	bx	lr
    8660:	.word	0x402c0000
    8664:	.word	0x20006100
    8668:	.word	0x20007dde

0000866c <isBusyDat()>:
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
}
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
//------------------------------------------------------------------------------
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    866c:	ldr	r3, [pc, #12]	; (867c <isBusyDat()+0x10>)
    866e:	ldr	r0, [r3, #36]	; 0x24
    8670:	eor.w	r0, r0, #16777216	; 0x1000000
    8674:	ubfx	r0, r0, #24, #1
    8678:	bx	lr
    867a:	nop
    867c:	.word	0x402c0000

00008680 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() { return m_dmaBusy; }
    8680:	ldr	r3, [pc, #4]	; (8688 <isBusyDMA()+0x8>)
    8682:	ldrb	r0, [r3, #0]
    8684:	bx	lr
    8686:	nop
    8688:	.word	0x20007dde

0000868c <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    868c:	ldr	r2, [pc, #172]	; (873c <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    868e:	ldr	r3, [pc, #176]	; (8740 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8690:	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8692:	ldr.w	r3, [r3, #256]	; 0x100
    8696:	ldr	r1, [pc, #172]	; (8744 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8698:	ubfx	r2, r2, #11, #3
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    869c:	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    86a0:	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    86a2:	push	{r4, r5, r6, lr}
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    86a4:	ldr	r4, [pc, #160]	; (8748 <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    86a6:	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    86aa:	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000 * kHzMax;
    86ae:	mul.w	r0, r5, r0
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    86b2:	lsrs	r3, r3, #2
    86b4:	udiv	lr, r1, r3
    86b8:	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    86bc:	cmp.w	r0, lr, lsr #4
    86c0:	bcs.n	872e <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    86c2:	movs	r3, #1
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
    86c4:	mov	r6, r3
    86c6:	lsls	r3, r3, #1
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    86c8:	lsls	r2, r3, #4
    86ca:	udiv	r2, lr, r2
    86ce:	cmp	r2, r0
    86d0:	bls.n	86d6 <setSdclk(unsigned long)+0x4a>
    86d2:	cmp	r3, #255	; 0xff
    86d4:	bls.n	86c4 <setSdclk(unsigned long)+0x38>
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    86d6:	udiv	r2, lr, r3
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
                      SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
                SDHC_SYSCTL_SDCLKFS(sdclkfs);
    86da:	lsls	r6, r6, #8
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    86dc:	cmp	r0, r2
    86de:	bcs.n	8736 <setSdclk(unsigned long)+0xaa>
    86e0:	mov.w	ip, r3, lsl #1
    86e4:	movs	r2, #1
    86e6:	b.n	86ea <setSdclk(unsigned long)+0x5e>
    86e8:	mov	ip, r4
    dvs++;
    86ea:	mov	r5, r2
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    86ec:	add.w	r4, r3, ip
    dvs++;
    86f0:	adds	r2, #1
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    86f2:	udiv	r1, lr, ip
    86f6:	cmp	r1, r0
    86f8:	bls.n	872a <setSdclk(unsigned long)+0x9e>
    86fa:	cmp	r2, #16
    86fc:	bne.n	86e8 <setSdclk(unsigned long)+0x5c>
    86fe:	movs	r5, #240	; 0xf0
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    8700:	mov.w	r3, #1000	; 0x3e8
    8704:	ldr	r1, [pc, #68]	; (874c <setSdclk(unsigned long)+0xc0>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    8706:	ldr	r2, [pc, #72]	; (8750 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    8708:	mul.w	ip, r3, ip
    870c:	udiv	r3, lr, ip
    8710:	str	r3, [r1, #0]
                      SDHC_SYSCTL_SDCLKFS_MASK);
    8712:	ldr	r3, [pc, #64]	; (8754 <setSdclk(unsigned long)+0xc8>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    8714:	ldr	r1, [r2, #44]	; 0x2c
                      SDHC_SYSCTL_SDCLKFS_MASK);
    8716:	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    8718:	orrs	r3, r5
    871a:	orrs	r3, r6
    871c:	orr.w	r3, r3, #917504	; 0xe0000
    8720:	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8722:	ldr	r3, [r2, #36]	; 0x24
    8724:	lsls	r3, r3, #28
    8726:	bpl.n	8722 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    8728:	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    872a:	lsls	r5, r5, #4
    872c:	b.n	8700 <setSdclk(unsigned long)+0x74>
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    872e:	mov	r2, lr
    8730:	movs	r6, #0
  uint32_t sdclkfs = 1;
    8732:	movs	r3, #1
    8734:	b.n	86dc <setSdclk(unsigned long)+0x50>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8736:	mov	ip, r3
    8738:	movs	r5, #0
    873a:	b.n	8700 <setSdclk(unsigned long)+0x74>
    873c:	.word	0x400fc000
    8740:	.word	0x400d8000
    8744:	.word	0x5e69ec00
    8748:	.word	0xaaaaaaab
    874c:	.word	0x20005c84
    8750:	.word	0x402c0000
    8754:	.word	0xfff0000f

00008758 <SdioCard::errorCode() const>:
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const { return m_errorCode; }
    8758:	ldr	r3, [pc, #4]	; (8760 <SdioCard::errorCode() const+0x8>)
    875a:	ldrb	r0, [r3, #0]
    875c:	bx	lr
    875e:	nop
    8760:	.word	0x20001a3a

00008764 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const { return m_irqstat; }
    8764:	ldr	r3, [pc, #4]	; (876c <SdioCard::errorData() const+0x8>)
    8766:	ldr	r0, [r3, #0]
    8768:	bx	lr
    876a:	nop
    876c:	.word	0x20006100

00008770 <SdioCard::readCID(cid_t*)>:
  }
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    8770:	push	{r4}
  memcpy(cid, &m_cid, sizeof(cid_t));
    8772:	ldr	r4, [pc, #28]	; (8790 <SdioCard::readCID(cid_t*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    8774:	mov	ip, r1
  memcpy(cid, &m_cid, sizeof(cid_t));
    8776:	ldmia	r4!, {r0, r1, r2, r3}
    8778:	str.w	r0, [ip]
  return true;
}
    877c:	movs	r0, #1
  memcpy(cid, &m_cid, sizeof(cid_t));
    877e:	str.w	r1, [ip, #4]
    8782:	str.w	r2, [ip, #8]
    8786:	str.w	r3, [ip, #12]
}
    878a:	ldr.w	r4, [sp], #4
    878e:	bx	lr
    8790:	.word	0x2000608c

00008794 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    8794:	push	{r4}
  memcpy(csd, &m_csd, sizeof(csd_t));
    8796:	ldr	r4, [pc, #28]	; (87b4 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    8798:	mov	ip, r1
  memcpy(csd, &m_csd, sizeof(csd_t));
    879a:	ldmia	r4!, {r0, r1, r2, r3}
    879c:	str.w	r0, [ip]
  return true;
}
    87a0:	movs	r0, #1
  memcpy(csd, &m_csd, sizeof(csd_t));
    87a2:	str.w	r1, [ip, #4]
    87a6:	str.w	r2, [ip, #8]
    87aa:	str.w	r3, [ip, #12]
}
    87ae:	ldr.w	r4, [sp], #4
    87b2:	bx	lr
    87b4:	.word	0x2000609c

000087b8 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    87b8:	ldr	r3, [pc, #8]	; (87c4 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    87ba:	movs	r0, #1
  *ocr = m_ocr;
    87bc:	ldr	r3, [r3, #0]
    87be:	str	r3, [r1, #0]
}
    87c0:	bx	lr
    87c2:	nop
    87c4:	.word	0x200060ac

000087c8 <SdioCard::readSCR(scr_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
  memcpy(scr, &m_scr, sizeof(scr_t));
    87c8:	ldr	r2, [pc, #12]	; (87d8 <SdioCard::readSCR(scr_t*)+0x10>)
bool SdioCard::readSCR(scr_t* scr) {
    87ca:	mov	r3, r1
  memcpy(scr, &m_scr, sizeof(scr_t));
    87cc:	ldmia	r2!, {r0, r1}
    87ce:	str	r0, [r3, #0]
  return true;
}
    87d0:	movs	r0, #1
  memcpy(scr, &m_scr, sizeof(scr_t));
    87d2:	str	r1, [r3, #4]
}
    87d4:	bx	lr
    87d6:	nop
    87d8:	.word	0x200060b4

000087dc <SdioCard::readSDS(sds_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSDS(sds_t* sds) {
    87dc:	push	{r4, r5, lr}
  memcpy(sds, &m_sds, sizeof(sds_t));
    87de:	ldr	r4, [pc, #44]	; (880c <SdioCard::readSDS(sds_t*)+0x30>)
    87e0:	mov	ip, r1
    87e2:	add.w	r5, r4, #64	; 0x40
    87e6:	mov	lr, r4
    87e8:	add.w	ip, ip, #16
    87ec:	adds	r4, #16
    87ee:	ldmia.w	lr!, {r0, r1, r2, r3}
    87f2:	cmp	lr, r5
    87f4:	str.w	r0, [ip, #-16]
    87f8:	str.w	r1, [ip, #-12]
    87fc:	str.w	r2, [ip, #-8]
    8800:	str.w	r3, [ip, #-4]
    8804:	bne.n	87e6 <SdioCard::readSDS(sds_t*)+0xa>
  return true;
}
    8806:	movs	r0, #1
    8808:	pop	{r4, r5, pc}
    880a:	nop
    880c:	.word	0x200060bc

00008810 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    8810:	bx	lr
    8812:	nop

00008814 <SdioCard::~SdioCard()>:
    8814:	push	{r4, lr}
    8816:	mov	r4, r0
    8818:	movs	r1, #12
    881a:	bl	cd08 <operator delete(void*, unsigned int)>
    881e:	mov	r0, r4
    8820:	pop	{r4, pc}
    8822:	nop

00008824 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
    8824:	ldr	r3, [pc, #16]	; (8838 <SdioCard::type() const+0x14>)
    8826:	ldrb	r3, [r3, #0]
    8828:	cbz	r3, 8834 <SdioCard::type() const+0x10>
    882a:	ldr	r3, [pc, #16]	; (883c <SdioCard::type() const+0x18>)
    882c:	ldrb	r0, [r3, #0]
    882e:	adds	r0, #2
    8830:	uxtb	r0, r0
    8832:	bx	lr
    8834:	movs	r0, #1
                    : SD_CARD_TYPE_SD1;
}
    8836:	bx	lr
    8838:	.word	0x20007ddb
    883c:	.word	0x20007ddc

00008840 <SdioCard::sectorCount()>:
    uint8_t ver = csd[0] >> 6;
    8840:	ldr	r2, [pc, #88]	; (889c <SdioCard::sectorCount()+0x5c>)
    8842:	ldrb	r3, [r2, #0]
    if (ver == 0) {
    8844:	lsrs	r3, r3, #6
    8846:	beq.n	8866 <SdioCard::sectorCount()+0x26>
    } else if (ver == 1) {
    8848:	cmp	r3, #1
    884a:	beq.n	8850 <SdioCard::sectorCount()+0x10>
      return 0;
    884c:	movs	r0, #0
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
    884e:	bx	lr
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8850:	ldrb	r3, [r2, #7]
      c_size |= csd[9];
    8852:	ldrh	r0, [r2, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8854:	lsls	r3, r3, #16
      c_size |= csd[9];
    8856:	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8858:	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    885c:	uxth	r0, r0
    885e:	orrs	r0, r3
      return (c_size + 1) << 10;
    8860:	adds	r0, #1
    8862:	lsls	r0, r0, #10
    8864:	bx	lr
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8866:	ldrb	r3, [r2, #9]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8868:	ldrb	r0, [r2, #8]
    886a:	ldrb.w	ip, [r2, #7]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    886e:	lsls	r3, r3, #1
      c_size = (uint32_t)(csd[6] & 3) << 10;
    8870:	ldrb	r1, [r2, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8872:	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8874:	and.w	r3, r3, #6
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8878:	orr.w	r0, r0, ip, lsl #2
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    887c:	ldrb.w	ip, [r2, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    8880:	lsls	r1, r1, #10
      uint8_t read_bl_len = csd[5] & 15;
    8882:	ldrb	r2, [r2, #5]
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    8884:	orr.w	r3, r3, ip, lsr #7
      c_size = (uint32_t)(csd[6] & 3) << 10;
    8888:	and.w	r1, r1, #3072	; 0xc00
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    888c:	and.w	r2, r2, #15
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8890:	orrs	r0, r1
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    8892:	add	r3, r2
    8894:	adds	r0, #1
    8896:	subs	r3, #7
    8898:	lsls	r0, r3
    889a:	bx	lr
    889c:	.word	0x2000609c

000088a0 <waitDmaStatus()>:
static bool waitDmaStatus() {
    88a0:	push	{r3, r4, r5, r6, r7, lr}
  m_busyFcn = fcn;
    88a2:	ldr	r3, [pc, #76]	; (88f0 <waitDmaStatus()+0x50>)
    88a4:	ldr	r7, [pc, #76]	; (88f4 <waitDmaStatus()+0x54>)
static bool isBusyDMA() { return m_dmaBusy; }
    88a6:	ldr	r5, [pc, #80]	; (88f8 <waitDmaStatus()+0x58>)
  m_busyFcn = fcn;
    88a8:	str	r3, [r7, #0]
  uint32_t m = micros();
    88aa:	bl	b4d8 <micros>
static bool isBusyDMA() { return m_dmaBusy; }
    88ae:	ldrb	r3, [r5, #0]
  while (fcn()) {
    88b0:	cbz	r3, 88d2 <waitDmaStatus()+0x32>
    88b2:	mov	r4, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    88b4:	ldr	r6, [pc, #68]	; (88fc <waitDmaStatus()+0x5c>)
    88b6:	b.n	88c0 <waitDmaStatus()+0x20>
    yield();
    88b8:	bl	bd40 <yield>
static bool isBusyDMA() { return m_dmaBusy; }
    88bc:	ldrb	r3, [r5, #0]
  while (fcn()) {
    88be:	cbz	r3, 88d2 <waitDmaStatus()+0x32>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    88c0:	bl	b4d8 <micros>
    88c4:	subs	r0, r0, r4
    88c6:	cmp	r0, r6
    88c8:	bls.n	88b8 <waitDmaStatus()+0x18>
      m_busyFcn = 0;
    88ca:	movs	r3, #0
    return false;  // Caller will set errorCode.
    88cc:	mov	r0, r3
      m_busyFcn = 0;
    88ce:	str	r3, [r7, #0]
}
    88d0:	pop	{r3, r4, r5, r6, r7, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    88d2:	ldr	r3, [pc, #44]	; (8900 <waitDmaStatus()+0x60>)
  m_busyFcn = 0;
    88d4:	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    88d6:	ldr	r0, [r3, #0]
  m_busyFcn = 0;
    88d8:	str	r2, [r7, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    88da:	ands.w	r0, r0, #2
    88de:	beq.n	88d0 <waitDmaStatus()+0x30>
    88e0:	ldr	r2, [r3, #0]
    88e2:	ldr	r3, [pc, #32]	; (8904 <waitDmaStatus()+0x64>)
    88e4:	tst	r2, r3
    88e6:	ite	eq
    88e8:	moveq	r0, #1
    88ea:	movne	r0, #0
}
    88ec:	pop	{r3, r4, r5, r6, r7, pc}
    88ee:	nop
    88f0:	.word	0x00008681
    88f4:	.word	0x200060fc
    88f8:	.word	0x20007dde
    88fc:	.word	0x000f4240
    8900:	.word	0x20006100
    8904:	.word	0x117f0000

00008908 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    8908:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    890c:	bl	b4d8 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8910:	ldr	r6, [pc, #92]	; (8970 <waitTransferComplete() [clone .part.0]+0x68>)
    8912:	ldr	r5, [pc, #96]	; (8974 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    8914:	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8916:	ldr.w	r8, [pc, #116]	; 898c <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    891a:	b.n	8926 <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    891c:	bl	b4d8 <micros>
    8920:	subs	r0, r0, r7
    8922:	cmp	r0, r8
    8924:	bhi.n	895e <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8926:	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    8928:	ands	r4, r5
    892a:	beq.n	891c <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    892c:	ldr	r2, [pc, #72]	; (8978 <waitTransferComplete() [clone .part.0]+0x70>)
    892e:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    8930:	ldr	r3, [pc, #72]	; (897c <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    8932:	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    8934:	ldr	r2, [r6, #48]	; 0x30
    8936:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8938:	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    893a:	ldr	r2, [pc, #68]	; (8980 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    893c:	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    893e:	ldr	r3, [r3, #0]
    8940:	tst	r3, r2
    8942:	beq.n	8958 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    8944:	ldr	r1, [pc, #60]	; (8984 <waitTransferComplete() [clone .part.0]+0x7c>)
    8946:	movs	r4, #32
  m_errorLine = line;
    8948:	ldr	r3, [pc, #60]	; (8988 <waitTransferComplete() [clone .part.0]+0x80>)
    894a:	movw	r2, #682	; 0x2aa
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    894e:	movs	r0, #0
  m_errorCode = code;
    8950:	strb	r4, [r1, #0]
  m_errorLine = line;
    8952:	str	r2, [r3, #0]
}
    8954:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    8958:	movs	r0, #1
}
    895a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    895e:	ldr	r2, [pc, #24]	; (8978 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    8960:	ldr	r3, [pc, #24]	; (897c <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    8962:	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    8964:	ldr	r2, [r6, #48]	; 0x30
    8966:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8968:	ldr	r3, [r3, #0]
    896a:	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    896c:	b.n	8944 <waitTransferComplete() [clone .part.0]+0x3c>
    896e:	nop
    8970:	.word	0x402c0000
    8974:	.word	0x117f0002
    8978:	.word	0x20007ddd
    897c:	.word	0x20006100
    8980:	.word	0x117f0000
    8984:	.word	0x20001a3a
    8988:	.word	0x20005c88
    898c:	.word	0x000f4240

00008990 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8990:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    8994:	ldr	r4, [pc, #152]	; (8a30 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    8996:	mov	r7, r1
  if (!m_transferActive) {
    8998:	ldrb	r3, [r4, #0]
    899a:	cmp	r3, #0
    899c:	bne.n	8a10 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    899e:	ldr	r3, [pc, #148]	; (8a34 <SdioCard::writeData(unsigned char const*)+0xa4>)
    89a0:	ldr	r2, [r3, #36]	; 0x24
    89a2:	lsls	r2, r2, #23
    89a4:	bpl.n	89fe <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    89a6:	ldr	r5, [pc, #140]	; (8a34 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    89a8:	ldr.w	r8, [pc, #148]	; 8a40 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    89ac:	ldr	r3, [r5, #40]	; 0x28
    89ae:	orr.w	r3, r3, #65536	; 0x10000
    89b2:	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    89b4:	bl	b4d8 <micros>
    89b8:	mov	r6, r0
  while (fcn()) {
    89ba:	b.n	89c6 <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    89bc:	bl	b4d8 <micros>
    89c0:	subs	r0, r0, r6
    89c2:	cmp	r0, r8
    89c4:	bhi.n	8a1c <SdioCard::writeData(unsigned char const*)+0x8c>
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
    89c6:	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    89c8:	ands.w	r9, r3, #1024	; 0x400
    89cc:	beq.n	89bc <SdioCard::writeData(unsigned char const*)+0x2c>
    89ce:	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    89d2:	ldr	r0, [pc, #96]	; (8a34 <SdioCard::writeData(unsigned char const*)+0xa4>)
    89d4:	add.w	r7, r7, #572	; 0x23c
    89d8:	ldr	r3, [r0, #36]	; 0x24
    89da:	lsls	r3, r3, #21
    89dc:	bpl.n	89d8 <SdioCard::writeData(unsigned char const*)+0x48>
    89de:	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    89e2:	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    89e6:	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    89e8:	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    89ea:	bne.n	89e2 <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    89ec:	add.w	ip, ip, #64	; 0x40
    89f0:	cmp	ip, r7
    89f2:	bne.n	89d8 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    89f4:	movs	r3, #1
  return true;
    89f6:	mov	r0, r3
  m_transferActive = true;
    89f8:	strb	r3, [r4, #0]
}
    89fa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    89fe:	ldr	r2, [r3, #40]	; 0x28
    8a00:	bic.w	r2, r2, #65536	; 0x10000
    8a04:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8a06:	ldr	r2, [r3, #40]	; 0x28
    8a08:	orr.w	r2, r2, #131072	; 0x20000
    8a0c:	str	r2, [r3, #40]	; 0x28
    8a0e:	b.n	89a6 <SdioCard::writeData(unsigned char const*)+0x16>
    8a10:	bl	8908 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    8a14:	cmp	r0, #0
    8a16:	bne.n	899e <SdioCard::writeData(unsigned char const*)+0xe>
}
    8a18:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    8a1c:	ldr	r1, [pc, #24]	; (8a38 <SdioCard::writeData(unsigned char const*)+0xa8>)
    8a1e:	movs	r4, #34	; 0x22
  m_errorLine = line;
    8a20:	ldr	r3, [pc, #24]	; (8a3c <SdioCard::writeData(unsigned char const*)+0xac>)
    8a22:	movw	r2, #1055	; 0x41f
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    8a26:	mov	r0, r9
  m_errorCode = code;
    8a28:	strb	r4, [r1, #0]
  m_errorLine = line;
    8a2a:	str	r2, [r3, #0]
}
    8a2c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8a30:	.word	0x20007ddd
    8a34:	.word	0x402c0000
    8a38:	.word	0x20001a3a
    8a3c:	.word	0x20005c88
    8a40:	.word	0x000f4240

00008a44 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8a44:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a48:	mov	r7, r0
    8a4a:	mov	r8, r1
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    8a4c:	ldr	r4, [pc, #124]	; (8acc <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    8a4e:	bl	b4d8 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8a52:	ldr	r6, [pc, #124]	; (8ad0 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    8a54:	mov	r5, r0
  while (fcn()) {
    8a56:	b.n	8a62 <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8a58:	bl	b4d8 <micros>
    8a5c:	subs	r3, r0, r5
    8a5e:	cmp	r3, r6
    8a60:	bhi.n	8aac <cardCommand(unsigned long, unsigned long)+0x68>
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    8a62:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    8a64:	lsls	r1, r3, #31
    8a66:	bmi.n	8a58 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8a68:	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    8a6a:	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8a6e:	bmi.n	8ab2 <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    8a70:	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    8a74:	ldr	r4, [pc, #84]	; (8acc <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8a76:	ldr	r6, [pc, #92]	; (8ad4 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    8a78:	str	r3, [r4, #12]
  uint32_t m = micros();
    8a7a:	bl	b4d8 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8a7e:	ldr	r7, [pc, #80]	; (8ad0 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    8a80:	mov	r5, r0
  while (fcn()) {
    8a82:	b.n	8a8e <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8a84:	bl	b4d8 <micros>
    8a88:	subs	r0, r0, r5
    8a8a:	cmp	r0, r7
    8a8c:	bhi.n	8aac <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8a8e:	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    8a90:	tst	r3, r6
    8a92:	beq.n	8a84 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    8a94:	ldr	r2, [r4, #48]	; 0x30
    8a96:	ldr	r3, [pc, #64]	; (8ad8 <cardCommand(unsigned long, unsigned long)+0x94>)
    8a98:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8a9a:	ldr	r2, [r3, #0]
    8a9c:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    8a9e:	ldr	r2, [r3, #0]
    8aa0:	lsls	r2, r2, #31
    8aa2:	bpl.n	8aac <cardCommand(unsigned long, unsigned long)+0x68>
    8aa4:	ldr	r3, [r3, #0]
    8aa6:	tst.w	r3, #983040	; 0xf0000
    8aaa:	beq.n	8ac4 <cardCommand(unsigned long, unsigned long)+0x80>
    8aac:	movs	r0, #0
}
    8aae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    8ab2:	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8ab4:	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    8ab6:	bic.w	r2, r2, #255	; 0xff
    8aba:	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8abc:	ldr	r2, [r4, #72]	; 0x48
    8abe:	orrs	r3, r2
    8ac0:	str	r3, [r4, #72]	; 0x48
    8ac2:	b.n	8a70 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    8ac4:	movs	r0, #1
}
    8ac6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8aca:	nop
    8acc:	.word	0x402c0000
    8ad0:	.word	0x000f4240
    8ad4:	.word	0x000f0001
    8ad8:	.word	0x20006100

00008adc <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    8adc:	ldr	r3, [pc, #84]	; (8b34 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    8ade:	push	{r4, r5, lr}
    8ae0:	mov	r5, r1
    8ae2:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    8ae4:	ldr	r1, [r3, #0]
    8ae6:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    8aea:	cbz	r0, 8b30 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8aec:	ldr	r3, [pc, #72]	; (8b38 <readReg16(unsigned long, void*)+0x5c>)
    8aee:	add.w	r4, r5, #15
    8af2:	ldr	r2, [r3, #16]
    8af4:	str	r2, [sp, #0]
    8af6:	ldr	r1, [r3, #20]
    8af8:	str	r1, [sp, #4]
    8afa:	ldr	r1, [r3, #24]
    8afc:	str	r1, [sp, #8]
    8afe:	ldr	r3, [r3, #28]
    8b00:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    8b02:	movs	r3, #0
    8b04:	b.n	8b0a <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    8b06:	ldr.w	r2, [lr, #-16]
    8b0a:	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    8b0e:	adds	r3, #1
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    8b10:	mov.w	ip, ip, lsl #3
    8b14:	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    8b18:	cmp	r3, #15
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    8b1a:	lsr.w	r2, r2, ip
    8b1e:	add.w	r1, lr, #16
    8b22:	strb.w	r2, [r4, #-1]!
    8b26:	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    8b2a:	bne.n	8b06 <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    8b2c:	movs	r3, #0
    8b2e:	strb	r3, [r5, #15]
}
    8b30:	add	sp, #20
    8b32:	pop	{r4, r5, pc}
    8b34:	.word	0x200060b0
    8b38:	.word	0x402c0000

00008b3c <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    8b3c:	push	{r4, lr}
  bool useDma() { return m_options & DMA_SDIO; }
    8b3e:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    8b40:	lsls	r3, r3, #31
    8b42:	bpl.n	8b50 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8b44:	ldr	r3, [pc, #84]	; (8b9c <SdioCard::isBusy()+0x60>)
    8b46:	ldr	r3, [r3, #0]
    8b48:	cbz	r3, 8b78 <SdioCard::isBusy()+0x3c>
}
    8b4a:	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8b4e:	bx	r3
    if (m_transferActive) {
    8b50:	ldr	r3, [pc, #76]	; (8ba0 <SdioCard::isBusy()+0x64>)
    8b52:	ldrb	r3, [r3, #0]
    8b54:	cbnz	r3, 8b66 <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8b56:	ldr	r3, [pc, #76]	; (8ba4 <SdioCard::isBusy()+0x68>)
    8b58:	ldr	r4, [r3, #36]	; 0x24
    8b5a:	eor.w	r4, r4, #16777216	; 0x1000000
    8b5e:	ubfx	r4, r4, #24, #1
}
    8b62:	mov	r0, r4
    8b64:	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8b66:	ldr	r3, [pc, #60]	; (8ba4 <SdioCard::isBusy()+0x68>)
    8b68:	ldr	r4, [pc, #60]	; (8ba8 <SdioCard::isBusy()+0x6c>)
    8b6a:	ldr	r3, [r3, #48]	; 0x30
    8b6c:	ands	r4, r3
      if (isBusyTransferComplete()) {
    8b6e:	clz	r4, r4
    8b72:	lsrs	r4, r4, #5
}
    8b74:	mov	r0, r4
    8b76:	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8b78:	ldr	r3, [pc, #48]	; (8bac <SdioCard::isBusy()+0x70>)
    8b7a:	ldrb	r4, [r3, #0]
    8b7c:	cmp	r4, #0
    8b7e:	beq.n	8b62 <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8b80:	ldr	r3, [pc, #44]	; (8bb0 <SdioCard::isBusy()+0x74>)
    8b82:	ldr	r0, [pc, #48]	; (8bb4 <SdioCard::isBusy()+0x78>)
    8b84:	ldr	r1, [r3, #0]
    8b86:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    8b8a:	cmp	r0, #0
    8b8c:	beq.n	8b62 <SdioCard::isBusy()+0x26>
    8b8e:	ldr	r3, [pc, #20]	; (8ba4 <SdioCard::isBusy()+0x68>)
    8b90:	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8b92:	eor.w	r4, r4, #256	; 0x100
    8b96:	ubfx	r4, r4, #8, #1
    8b9a:	b.n	8b62 <SdioCard::isBusy()+0x26>
    8b9c:	.word	0x200060fc
    8ba0:	.word	0x20007ddd
    8ba4:	.word	0x402c0000
    8ba8:	.word	0x117f0002
    8bac:	.word	0x20007dda
    8bb0:	.word	0x200060b0
    8bb4:	.word	0x0d1a0000

00008bb8 <SdioCard::status()>:
uint32_t SdioCard::status() { return statusCMD13(); }
    8bb8:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8bba:	ldr	r3, [pc, #16]	; (8bcc <SdioCard::status()+0x14>)
    8bbc:	ldr	r0, [pc, #16]	; (8bd0 <SdioCard::status()+0x18>)
    8bbe:	ldr	r1, [r3, #0]
    8bc0:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    8bc4:	cbz	r0, 8bca <SdioCard::status()+0x12>
    8bc6:	ldr	r3, [pc, #12]	; (8bd4 <SdioCard::status()+0x1c>)
    8bc8:	ldr	r0, [r3, #16]
uint32_t SdioCard::status() { return statusCMD13(); }
    8bca:	pop	{r3, pc}
    8bcc:	.word	0x200060b0
    8bd0:	.word	0x0d1a0000
    8bd4:	.word	0x402c0000

00008bd8 <isBusyCMD13()>:
static bool isBusyCMD13() {
    8bd8:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8bda:	ldr	r3, [pc, #28]	; (8bf8 <isBusyCMD13()+0x20>)
    8bdc:	ldr	r0, [pc, #28]	; (8bfc <isBusyCMD13()+0x24>)
    8bde:	ldr	r1, [r3, #0]
    8be0:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    8be4:	cbz	r0, 8bf4 <isBusyCMD13()+0x1c>
    8be6:	ldr	r3, [pc, #24]	; (8c00 <isBusyCMD13()+0x28>)
    8be8:	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    8bea:	eor.w	r0, r0, #256	; 0x100
    8bee:	ubfx	r0, r0, #8, #1
}
    8bf2:	pop	{r3, pc}
    8bf4:	movs	r0, #1
    8bf6:	pop	{r3, pc}
    8bf8:	.word	0x200060b0
    8bfc:	.word	0x0d1a0000
    8c00:	.word	0x402c0000

00008c04 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    8c04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    8c08:	ldr	r3, [pc, #164]	; (8cb0 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    8c0a:	mov	r9, r1
  m_busyFcn = fcn;
    8c0c:	ldr.w	sl, [pc, #192]	; 8cd0 <SdioCard::writeStart(unsigned long)+0xcc>
    8c10:	ldr	r6, [pc, #160]	; (8cb4 <SdioCard::writeStart(unsigned long)+0xb0>)
    8c12:	str.w	r3, [sl]
  uint32_t m = micros();
    8c16:	bl	b4d8 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8c1a:	ldr	r5, [pc, #156]	; (8cb8 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    8c1c:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8c1e:	ldr.w	r8, [pc, #180]	; 8cd4 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8c22:	ldr	r7, [pc, #152]	; (8cbc <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    8c24:	b.n	8c34 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8c26:	bl	b4d8 <micros>
    8c2a:	subs	r0, r0, r4
    8c2c:	cmp	r0, r7
    8c2e:	bhi.n	8c84 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    8c30:	bl	bd40 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8c34:	ldr	r1, [r6, #0]
    8c36:	mov	r0, r5
    8c38:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    8c3c:	cmp	r0, #0
    8c3e:	beq.n	8c26 <SdioCard::writeStart(unsigned long)+0x22>
    8c40:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    8c44:	lsls	r3, r3, #23
    8c46:	bpl.n	8c26 <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    8c48:	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    8c4a:	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    8c4e:	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8c52:	ldr.w	r3, [r8, #40]	; 0x28
    8c56:	bic.w	r3, r3, #65536	; 0x10000
    8c5a:	str.w	r3, [r8, #40]	; 0x28
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    8c5e:	ldr	r3, [pc, #96]	; (8cc0 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    8c60:	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    8c64:	ldrb	r3, [r3, #0]
    8c66:	cbz	r3, 8c9c <SdioCard::writeStart(unsigned long)+0x98>
    8c68:	mov	r1, r9
    8c6a:	ldr	r0, [pc, #88]	; (8cc4 <SdioCard::writeStart(unsigned long)+0xc0>)
    8c6c:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    8c70:	cbnz	r0, 8c80 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    8c72:	ldr	r1, [pc, #84]	; (8cc8 <SdioCard::writeStart(unsigned long)+0xc4>)
    8c74:	movs	r4, #14
  m_errorLine = line;
    8c76:	ldr	r3, [pc, #84]	; (8ccc <SdioCard::writeStart(unsigned long)+0xc8>)
    8c78:	movw	r2, #1150	; 0x47e
  m_errorCode = code;
    8c7c:	strb	r4, [r1, #0]
  m_errorLine = line;
    8c7e:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    8c80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    8c84:	ldr	r2, [pc, #64]	; (8cc8 <SdioCard::writeStart(unsigned long)+0xc4>)
    8c86:	movs	r1, #10
      m_busyFcn = 0;
    8c88:	movs	r0, #0
  m_errorLine = line;
    8c8a:	ldr	r3, [pc, #64]	; (8ccc <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    8c8c:	strb	r1, [r2, #0]
  m_errorLine = line;
    8c8e:	movw	r2, #1138	; 0x472
      m_busyFcn = 0;
    8c92:	str.w	r0, [sl]
  m_errorLine = line;
    8c96:	str	r2, [r3, #0]
}
    8c98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    8c9c:	mov.w	r9, r9, lsl #9
    8ca0:	ldr	r0, [pc, #32]	; (8cc4 <SdioCard::writeStart(unsigned long)+0xc0>)
    8ca2:	mov	r1, r9
    8ca4:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    8ca8:	cmp	r0, #0
    8caa:	bne.n	8c80 <SdioCard::writeStart(unsigned long)+0x7c>
    8cac:	b.n	8c72 <SdioCard::writeStart(unsigned long)+0x6e>
    8cae:	nop
    8cb0:	.word	0x00008bd9
    8cb4:	.word	0x200060b0
    8cb8:	.word	0x0d1a0000
    8cbc:	.word	0x000f4240
    8cc0:	.word	0x20007ddc
    8cc4:	.word	0x193a0020
    8cc8:	.word	0x20001a3a
    8ccc:	.word	0x20005c88
    8cd0:	.word	0x200060fc
    8cd4:	.word	0x402c0000

00008cd8 <SdioCard::cardCMD6(unsigned long, unsigned char*)>:
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
    8cd8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8cdc:	mov	sl, r1
    8cde:	mov	r9, r2
    8ce0:	ldr	r6, [pc, #144]	; (8d74 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x9c>)
  uint32_t m = micros();
    8ce2:	bl	b4d8 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8ce6:	ldr	r5, [pc, #144]	; (8d78 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa0>)
  uint32_t m = micros();
    8ce8:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8cea:	ldr.w	r8, [pc, #176]	; 8d9c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc4>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8cee:	ldr	r7, [pc, #140]	; (8d7c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa4>)
  while (fcn()) {
    8cf0:	b.n	8cfc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8cf2:	bl	b4d8 <micros>
    8cf6:	subs	r0, r0, r4
    8cf8:	cmp	r0, r7
    8cfa:	bhi.n	8d48 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8cfc:	ldr	r1, [r6, #0]
    8cfe:	mov	r0, r5
    8d00:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    8d04:	cmp	r0, #0
    8d06:	beq.n	8cf2 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
    8d08:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    8d0c:	lsls	r3, r3, #23
    8d0e:	bpl.n	8cf2 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    8d10:	ldr	r3, [pc, #108]	; (8d80 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa8>)
    8d12:	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8d14:	mov	r1, sl
    8d16:	ldr	r0, [pc, #108]	; (8d84 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xac>)
  m_dmaBusy = true;
    8d18:	strb	r2, [r3, #0]
  m_irqstat = 0;
    8d1a:	movs	r2, #0
    8d1c:	ldr	r3, [pc, #104]	; (8d88 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb0>)
    8d1e:	str	r2, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8d20:	ldr	r2, [pc, #104]	; (8d8c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8d22:	ldr	r3, [pc, #108]	; (8d90 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb8>)
  SDHC_DSADDR = (uint32_t)status;
    8d24:	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8d28:	str.w	r2, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8d2c:	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8d30:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    8d34:	cbnz	r0, 8d5c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x84>
  m_errorCode = code;
    8d36:	ldr	r1, [pc, #92]	; (8d94 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    8d38:	movs	r4, #4
  m_errorLine = line;
    8d3a:	ldr	r3, [pc, #92]	; (8d98 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    8d3c:	movw	r2, #795	; 0x31b
  m_errorCode = code;
    8d40:	strb	r4, [r1, #0]
  m_errorLine = line;
    8d42:	str	r2, [r3, #0]
}
    8d44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    8d48:	ldr	r1, [pc, #72]	; (8d94 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    8d4a:	movs	r4, #10
  m_errorLine = line;
    8d4c:	ldr	r3, [pc, #72]	; (8d98 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    8d4e:	mov.w	r2, #788	; 0x314
    return sdError(SD_CARD_ERROR_CMD13);
    8d52:	movs	r0, #0
  m_errorCode = code;
    8d54:	strb	r4, [r1, #0]
  m_errorLine = line;
    8d56:	str	r2, [r3, #0]
}
    8d58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!waitDmaStatus()) {
    8d5c:	bl	88a0 <waitDmaStatus()>
    8d60:	cmp	r0, #0
    8d62:	bne.n	8d58 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
  m_errorCode = code;
    8d64:	ldr	r1, [pc, #44]	; (8d94 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    8d66:	movs	r4, #38	; 0x26
  m_errorLine = line;
    8d68:	ldr	r3, [pc, #44]	; (8d98 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    8d6a:	movw	r2, #798	; 0x31e
  m_errorCode = code;
    8d6e:	strb	r4, [r1, #0]
  m_errorLine = line;
    8d70:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    8d72:	b.n	8d58 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
    8d74:	.word	0x200060b0
    8d78:	.word	0x0d1a0000
    8d7c:	.word	0x000f4240
    8d80:	.word	0x20007dde
    8d84:	.word	0x063a0011
    8d88:	.word	0x20006100
    8d8c:	.word	0x00010040
    8d90:	.word	0x117f0002
    8d94:	.word	0x20001a3a
    8d98:	.word	0x20005c88
    8d9c:	.word	0x402c0000

00008da0 <SdioCard::readStop()>:
bool SdioCard::readStop() { return transferStop(); }
    8da0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8da4:	ldr	r4, [pc, #148]	; (8e3c <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8da6:	movs	r1, #0
    8da8:	ldr	r0, [pc, #148]	; (8e40 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8daa:	ldr	r3, [r4, #40]	; 0x28
    8dac:	bic.w	r3, r3, #65536	; 0x10000
    8db0:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8db2:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    8db6:	mov	r5, r0
    8db8:	cbnz	r0, 8dce <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    8dba:	ldr	r1, [pc, #136]	; (8e44 <SdioCard::readStop()+0xa4>)
    8dbc:	movs	r0, #9
  m_errorLine = line;
    8dbe:	ldr	r3, [pc, #136]	; (8e48 <SdioCard::readStop()+0xa8>)
    8dc0:	movw	r2, #621	; 0x26d
  m_errorCode = code;
    8dc4:	strb	r0, [r1, #0]
  m_errorLine = line;
    8dc6:	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    8dc8:	mov	r0, r5
    8dca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    8dce:	ldr	r3, [pc, #124]	; (8e4c <SdioCard::readStop()+0xac>)
    8dd0:	ldr.w	r8, [pc, #128]	; 8e54 <SdioCard::readStop()+0xb4>
    8dd4:	str.w	r3, [r8]
  uint32_t m = micros();
    8dd8:	bl	b4d8 <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    8ddc:	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    8dde:	mov	r6, r0
  while (fcn()) {
    8de0:	lsls	r0, r3, #7
    8de2:	bmi.n	8e16 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8de4:	ldr	r7, [pc, #104]	; (8e50 <SdioCard::readStop()+0xb0>)
    8de6:	b.n	8df2 <SdioCard::readStop()+0x52>
    yield();
    8de8:	bl	bd40 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    8dec:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    8dee:	lsls	r1, r3, #7
    8df0:	bmi.n	8e16 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8df2:	bl	b4d8 <micros>
    8df6:	subs	r3, r0, r6
    8df8:	cmp	r3, r7
    8dfa:	bls.n	8de8 <SdioCard::readStop()+0x48>
  m_errorCode = code;
    8dfc:	ldr	r2, [pc, #68]	; (8e44 <SdioCard::readStop()+0xa4>)
    8dfe:	movs	r1, #10
      m_busyFcn = 0;
    8e00:	movs	r5, #0
  m_errorLine = line;
    8e02:	ldr	r3, [pc, #68]	; (8e48 <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    8e04:	strb	r1, [r2, #0]
  m_errorLine = line;
    8e06:	mov.w	r2, #624	; 0x270
bool SdioCard::readStop() { return transferStop(); }
    8e0a:	mov	r0, r5
      m_busyFcn = 0;
    8e0c:	str.w	r5, [r8]
  m_errorLine = line;
    8e10:	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    8e12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    8e16:	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    8e18:	ldr	r3, [pc, #32]	; (8e3c <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    8e1a:	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    8e1e:	ldr	r2, [r3, #36]	; 0x24
    8e20:	lsls	r2, r2, #30
    8e22:	bpl.n	8dc8 <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    8e24:	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8e26:	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8e28:	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8e2a:	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8e2e:	orr.w	r1, r1, #67108864	; 0x4000000
    8e32:	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    8e34:	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    8e36:	str	r2, [r3, #40]	; 0x28
    8e38:	b.n	8dc8 <SdioCard::readStop()+0x28>
    8e3a:	nop
    8e3c:	.word	0x402c0000
    8e40:	.word	0x0cdb0000
    8e44:	.word	0x20001a3a
    8e48:	.word	0x20005c88
    8e4c:	.word	0x0000866d
    8e50:	.word	0x000f4240
    8e54:	.word	0x200060fc

00008e58 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                        size_t n) {
    8e58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e5c:	mov	r4, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    8e5e:	ands.w	r2, r2, #3
                        size_t n) {
    8e62:	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    8e64:	it	ne
    8e66:	movne	r2, #1
    8e68:	str	r3, [sp, #4]
    8e6a:	cmp	r3, #0
    8e6c:	it	eq
    8e6e:	orreq.w	r2, r2, #1
    8e72:	cbz	r2, 8e8a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x32>
  m_errorCode = code;
    8e74:	ldr	r1, [pc, #184]	; (8f30 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    8e76:	movs	r0, #38	; 0x26
  m_errorLine = line;
    8e78:	ldr	r3, [pc, #184]	; (8f34 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
    8e7a:	movw	r2, #547	; 0x223
  m_errorCode = code;
    8e7e:	strb	r0, [r1, #0]
  m_errorLine = line;
    8e80:	str	r2, [r3, #0]
}
    8e82:	movs	r0, #0
    8e84:	add	sp, #12
    8e86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    8e8a:	ldr	r3, [pc, #172]	; (8f38 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe0>)
    8e8c:	mov	r6, r0
    8e8e:	ldr	r2, [pc, #172]	; (8f3c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
    8e90:	mov	r5, r1
    8e92:	ldr.w	r9, [pc, #192]	; 8f54 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xfc>
    8e96:	str	r3, [r2, #0]
  uint32_t m = micros();
    8e98:	bl	b4d8 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8e9c:	ldr.w	r8, [pc, #184]	; 8f58 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
  uint32_t m = micros();
    8ea0:	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8ea2:	ldr.w	fp, [pc, #184]	; 8f5c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8ea6:	ldr.w	sl, [pc, #184]	; 8f60 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x108>
  while (fcn()) {
    8eaa:	b.n	8eba <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x62>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8eac:	bl	b4d8 <micros>
    8eb0:	subs	r0, r0, r7
    8eb2:	cmp	r0, sl
    8eb4:	bhi.n	8f16 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xbe>
    yield();
    8eb6:	bl	bd40 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8eba:	ldr.w	r1, [r9]
    8ebe:	mov	r0, r8
    8ec0:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    8ec4:	cmp	r0, #0
    8ec6:	beq.n	8eac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
    8ec8:	ldr.w	r3, [fp, #16]
  while (fcn()) {
    8ecc:	lsls	r3, r3, #23
    8ece:	bpl.n	8eac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8ed0:	ldr	r2, [sp, #4]
  m_dmaBusy = true;
    8ed2:	movs	r0, #1
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8ed4:	ldr	r3, [pc, #104]	; (8f40 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe8>)
  m_busyFcn = 0;
    8ed6:	ldr	r1, [pc, #100]	; (8f3c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8ed8:	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    8edc:	movs	r2, #0
    8ede:	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8ee0:	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    8ee4:	ldr	r1, [pc, #92]	; (8f44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xec>)
    8ee6:	strb	r0, [r1, #0]
  m_irqstat = 0;
    8ee8:	ldr	r1, [pc, #92]	; (8f48 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf0>)
    8eea:	str	r2, [r1, #0]
  SDHC_DSADDR = (uint32_t)buf;
    8eec:	str.w	r4, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8ef0:	str.w	r3, [fp, #4]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    8ef4:	ldr	r3, [pc, #84]	; (8f4c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8ef6:	ldr	r2, [pc, #88]	; (8f50 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf8>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    8ef8:	ldrb	r3, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8efa:	str.w	r2, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    8efe:	cbz	r3, 8f2c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd4>
    8f00:	mov	r1, r5
    8f02:	mov	r0, r6
    8f04:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    8f08:	cmp	r0, #0
    8f0a:	beq.n	8e82 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
}
    8f0c:	add	sp, #12
    8f0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return waitDmaStatus();
    8f12:	b.w	88a0 <waitDmaStatus()>
  m_errorCode = code;
    8f16:	ldr	r2, [pc, #24]	; (8f30 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    8f18:	movs	r1, #10
      m_busyFcn = 0;
    8f1a:	movs	r0, #0
  m_errorLine = line;
    8f1c:	ldr	r3, [pc, #20]	; (8f34 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
      m_busyFcn = 0;
    8f1e:	ldr	r4, [pc, #28]	; (8f3c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  m_errorCode = code;
    8f20:	strb	r1, [r2, #0]
  m_errorLine = line;
    8f22:	movw	r2, #550	; 0x226
      m_busyFcn = 0;
    8f26:	str	r0, [r4, #0]
  m_errorLine = line;
    8f28:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    8f2a:	b.n	8e82 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    8f2c:	lsls	r5, r5, #9
    8f2e:	b.n	8f00 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>
    8f30:	.word	0x20001a3a
    8f34:	.word	0x20005c88
    8f38:	.word	0x00008bd9
    8f3c:	.word	0x200060fc
    8f40:	.word	0x1fff0000
    8f44:	.word	0x20007dde
    8f48:	.word	0x20006100
    8f4c:	.word	0x20007ddc
    8f50:	.word	0x117f0002
    8f54:	.word	0x200060b0
    8f58:	.word	0x0d1a0000
    8f5c:	.word	0x402c0000
    8f60:	.word	0x000f4240

00008f64 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8f64:	push	{r3, r4, r5, r6, r7, lr}
    8f66:	mov	r6, r0
    8f68:	ldrb	r0, [r0, #8]
    8f6a:	mov	r4, r1
    8f6c:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    8f6e:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8f70:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    8f72:	bmi.n	8f9c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    8f74:	cbz	r3, 8f98 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    8f76:	add	r7, r1
    8f78:	b.n	8f7e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    8f7a:	cmp	r4, r7
    8f7c:	beq.n	8f98 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i * 512UL)) {
    8f7e:	ldr	r3, [r6, #0]
    8f80:	mov	r2, r5
    8f82:	mov	r1, r4
    8f84:	mov	r0, r6
    8f86:	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    8f88:	adds	r4, #1
    8f8a:	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i * 512UL)) {
    8f8e:	blx	r3
    8f90:	cmp	r0, #0
    8f92:	bne.n	8f7a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    8f94:	movs	r0, #0
}
    8f96:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    8f98:	movs	r0, #1
}
    8f9a:	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    8f9c:	lsls	r0, r2, #30
    8f9e:	beq.n	8fc6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    8fa0:	cmp	r3, #0
    8fa2:	beq.n	8f98 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    8fa4:	add	r7, r1
    8fa6:	b.n	8fac <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    8fa8:	cmp	r4, r7
    8faa:	beq.n	8f98 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    8fac:	ldr	r3, [r6, #0]
    8fae:	mov	r2, r5
    8fb0:	mov	r1, r4
    8fb2:	mov	r0, r6
    8fb4:	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    8fb6:	adds	r4, #1
    8fb8:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    8fbc:	blx	r3
    8fbe:	cmp	r0, #0
    8fc0:	bne.n	8fa8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    8fc2:	movs	r0, #0
    8fc4:	b.n	8f96 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    8fc6:	ldr	r0, [pc, #24]	; (8fe0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    8fc8:	bl	8e58 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8fcc:	cmp	r0, #0
    8fce:	bne.n	8f98 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    8fd0:	ldr	r1, [pc, #16]	; (8fe4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    8fd2:	movs	r4, #12
  m_errorLine = line;
    8fd4:	ldr	r3, [pc, #16]	; (8fe8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    8fd6:	movw	r2, #974	; 0x3ce
  m_errorCode = code;
    8fda:	strb	r4, [r1, #0]
  m_errorLine = line;
    8fdc:	str	r2, [r3, #0]
}
    8fde:	pop	{r3, r4, r5, r6, r7, pc}
    8fe0:	.word	0x123a0037
    8fe4:	.word	0x20001a3a
    8fe8:	.word	0x20005c88

00008fec <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    8fec:	push	{r3, r4, r5, r6, r7, lr}
    8fee:	mov	r6, r0
    8ff0:	ldrb	r0, [r0, #8]
    8ff2:	mov	r4, r1
    8ff4:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    8ff6:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    8ff8:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    8ffa:	bmi.n	9024 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    8ffc:	cbz	r3, 9020 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    8ffe:	add	r7, r1
    9000:	b.n	9006 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    9002:	cmp	r4, r7
    9004:	beq.n	9020 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i * 512UL)) {
    9006:	ldr	r3, [r6, #0]
    9008:	mov	r2, r5
    900a:	mov	r1, r4
    900c:	mov	r0, r6
    900e:	ldr	r3, [r3, #32]
    for (size_t i = 0; i < n; i++) {
    9010:	adds	r4, #1
    9012:	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i * 512UL)) {
    9016:	blx	r3
    9018:	cmp	r0, #0
    901a:	bne.n	9002 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    901c:	movs	r0, #0
}
    901e:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    9020:	movs	r0, #1
}
    9022:	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    9024:	lsls	r0, r2, #30
    9026:	beq.n	904e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9028:	cmp	r3, #0
    902a:	beq.n	9020 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    902c:	add	r7, r1
    902e:	b.n	9034 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    9030:	cmp	r4, r7
    9032:	beq.n	9020 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    9034:	ldr	r3, [r6, #0]
    9036:	mov	r2, r5
    9038:	mov	r1, r4
    903a:	mov	r0, r6
    903c:	ldr	r3, [r3, #32]
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    903e:	adds	r4, #1
    9040:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    9044:	blx	r3
    9046:	cmp	r0, #0
    9048:	bne.n	9030 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    904a:	movs	r0, #0
    904c:	b.n	901e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    904e:	ldr	r0, [pc, #24]	; (9068 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    9050:	bl	8e58 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9054:	cmp	r0, #0
    9056:	bne.n	9020 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    9058:	ldr	r1, [pc, #16]	; (906c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    905a:	movs	r4, #14
  m_errorLine = line;
    905c:	ldr	r3, [pc, #16]	; (9070 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    905e:	movw	r2, #1124	; 0x464
  m_errorCode = code;
    9062:	strb	r4, [r1, #0]
  m_errorLine = line;
    9064:	str	r2, [r3, #0]
}
    9066:	pop	{r3, r4, r5, r6, r7, pc}
    9068:	.word	0x193a0027
    906c:	.word	0x20001a3a
    9070:	.word	0x20005c88

00009074 <SdioCard::begin(SdioConfig)>:
  m_curState = IDLE_STATE;
    9074:	movs	r2, #0
  m_initDone = false;
    9076:	ldr	r3, [pc, #708]	; (933c <SdioCard::begin(SdioConfig)+0x2c8>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    9078:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_initDone = false;
    907c:	strb	r2, [r3, #0]
bool SdioCard::begin(SdioConfig sdioConfig) {
    907e:	mov	r6, r0
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9080:	ldr	r3, [pc, #700]	; (9340 <SdioCard::begin(SdioConfig)+0x2cc>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    9082:	sub	sp, #76	; 0x4c
  m_errorCode = SD_CARD_ERROR_NONE;
    9084:	ldr	r4, [pc, #700]	; (9344 <SdioCard::begin(SdioConfig)+0x2d0>)
  m_highCapacity = false;
    9086:	ldr.w	sl, [pc, #788]	; 939c <SdioCard::begin(SdioConfig)+0x328>
  m_version2 = false;
    908a:	ldr	r7, [pc, #700]	; (9348 <SdioCard::begin(SdioConfig)+0x2d4>)
  m_errorCode = SD_CARD_ERROR_NONE;
    908c:	strb	r2, [r4, #0]
  m_curState = IDLE_STATE;
    908e:	strb	r2, [r0, #9]
  m_highCapacity = false;
    9090:	strb.w	r2, [sl]
  m_version2 = false;
    9094:	strb	r2, [r7, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9096:	ldr.w	r2, [r3, #256]	; 0x100
  m_sdioConfig = sdioConfig;
    909a:	strb	r1, [r0, #8]
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    909c:	movs	r1, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    909e:	orr.w	r2, r2, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    90a2:	ldr.w	r8, [pc, #704]	; 9364 <SdioCard::begin(SdioConfig)+0x2f0>
  CCM_ANALOG_PFD_528 |= (1 << 7);
    90a6:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    90aa:	ldr.w	r2, [r3, #256]	; 0x100
    90ae:	bic.w	r2, r2, #63	; 0x3f
    90b2:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    90b6:	ldr.w	r2, [r3, #256]	; 0x100
    90ba:	orr.w	r2, r2, #24
    90be:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    90c2:	ldr.w	r2, [r3, #256]	; 0x100
    90c6:	bic.w	r2, r2, #128	; 0x80
    90ca:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    90ce:	add.w	r3, r3, #147456	; 0x24000
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    90d2:	ldr	r2, [pc, #632]	; (934c <SdioCard::begin(SdioConfig)+0x2d8>)
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    90d4:	ldr.w	r0, [r3, #128]	; 0x80
    90d8:	orr.w	r0, r0, #12
    90dc:	str.w	r0, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    90e0:	ldr	r0, [r3, #36]	; 0x24
    90e2:	bic.w	r0, r0, #14336	; 0x3800
    90e6:	str	r0, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;  // PLL2PFD0
    90e8:	ldr	r0, [r3, #28]
    90ea:	orr.w	r0, r0, #65536	; 0x10000
    90ee:	str	r0, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    90f0:	ldr	r0, [r3, #36]	; 0x24
    90f2:	orr.w	r0, r0, #2048	; 0x800
    90f6:	str	r0, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    90f8:	str.w	r1, [r2, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    90fc:	str.w	r1, [r2, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    9100:	str.w	r1, [r2, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9104:	str.w	r1, [r2, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    9108:	str.w	r1, [r2, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    910c:	str.w	r1, [r2, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    9110:	ldr.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    9114:	ldr	r3, [pc, #568]	; (9350 <SdioCard::begin(SdioConfig)+0x2dc>)
  SDHC_MIX_CTRL |= 0x80000000;
    9116:	orr.w	r2, r2, #2147483648	; 0x80000000
    911a:	str.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    911e:	ldr.w	r2, [r8, #44]	; 0x2c
    9122:	orrs	r3, r2
    9124:	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    9128:	ldr.w	r5, [r8, #44]	; 0x2c
    912c:	ands.w	r5, r5, #16777216	; 0x1000000
    9130:	bne.n	9128 <SdioCard::begin(SdioConfig)+0xb4>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    9132:	mov.w	r0, #400	; 0x190
    9136:	bl	868c <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    913a:	ldr	r3, [pc, #528]	; (934c <SdioCard::begin(SdioConfig)+0x2d8>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    913c:	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    9140:	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9144:	str.w	r5, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    9148:	str.w	r5, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    914c:	str.w	r5, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9150:	str.w	r5, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    9154:	str.w	r5, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    9158:	str.w	r5, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    915c:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    9160:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    9164:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    9168:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    916c:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    9170:	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    9174:	ldr	r3, [pc, #476]	; (9354 <SdioCard::begin(SdioConfig)+0x2e0>)
    9176:	ldr	r2, [pc, #480]	; (9358 <SdioCard::begin(SdioConfig)+0x2e4>)
    9178:	str.w	r3, [r8, #52]	; 0x34
    917c:	ldr	r3, [pc, #476]	; (935c <SdioCard::begin(SdioConfig)+0x2e8>)
    917e:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    9182:	ldr	r3, [pc, #476]	; (9360 <SdioCard::begin(SdioConfig)+0x2ec>)
    9184:	movs	r2, #96	; 0x60
    9186:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    918a:	mov.w	r3, #3758153728	; 0xe000e000
    918e:	mov.w	r2, #16384	; 0x4000
    9192:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    9196:	ldr.w	r3, [r8, #44]	; 0x2c
    919a:	orr.w	r3, r3, #134217728	; 0x8000000
    919e:	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    91a2:	ldr	r3, [pc, #448]	; (9364 <SdioCard::begin(SdioConfig)+0x2f0>)
    91a4:	ldr	r1, [r3, #44]	; 0x2c
    91a6:	ands.w	r1, r1, #134217728	; 0x8000000
    91aa:	bne.n	91a4 <SdioCard::begin(SdioConfig)+0x130>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    91ac:	mov	r0, r1
    91ae:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    91b2:	mov	fp, r0
    91b4:	cbnz	r0, 91ca <SdioCard::begin(SdioConfig)+0x156>
  m_errorCode = code;
    91b6:	movs	r1, #1
  m_errorLine = line;
    91b8:	ldr	r3, [pc, #428]	; (9368 <SdioCard::begin(SdioConfig)+0x2f4>)
    91ba:	movw	r2, #702	; 0x2be
  m_errorCode = code;
    91be:	strb	r1, [r4, #0]
  m_errorLine = line;
    91c0:	str	r2, [r3, #0]
}
    91c2:	mov	r0, fp
    91c4:	add	sp, #76	; 0x4c
    91c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91ca:	mov.w	r8, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    91ce:	ldr.w	r9, [pc, #464]	; 93a0 <SdioCard::begin(SdioConfig)+0x32c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    91d2:	ldr	r5, [pc, #400]	; (9364 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    91d4:	mov.w	r1, #426	; 0x1aa
    91d8:	mov	r0, r9
    91da:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    91de:	cmp	r0, #0
    91e0:	bne.n	9280 <SdioCard::begin(SdioConfig)+0x20c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    91e2:	ldr	r3, [r5, #44]	; 0x2c
    91e4:	orr.w	r3, r3, #16777216	; 0x1000000
    91e8:	str	r3, [r5, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    91ea:	ldr	r3, [r5, #44]	; 0x2c
    91ec:	lsls	r3, r3, #7
    91ee:	bmi.n	91ea <SdioCard::begin(SdioConfig)+0x176>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    91f0:	subs.w	r8, r8, #1
    91f4:	bne.n	91d4 <SdioCard::begin(SdioConfig)+0x160>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    91f6:	ldrb	r3, [r7, #0]
    91f8:	cmp	r3, #0
    91fa:	ldr	r3, [pc, #368]	; (936c <SdioCard::begin(SdioConfig)+0x2f8>)
    91fc:	ite	eq
    91fe:	moveq.w	r9, #3145728	; 0x300000
    9202:	movne	r9, r3
  int m = micros();
    9204:	bl	b4d8 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9208:	ldr	r7, [pc, #356]	; (9370 <SdioCard::begin(SdioConfig)+0x2fc>)
  int m = micros();
    920a:	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    920c:	ldr.w	fp, [pc, #404]	; 93a4 <SdioCard::begin(SdioConfig)+0x330>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9210:	ldr.w	r8, [pc, #404]	; 93a8 <SdioCard::begin(SdioConfig)+0x334>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9214:	movs	r1, #0
    9216:	mov	r0, r7
    9218:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    921c:	cbnz	r0, 9236 <SdioCard::begin(SdioConfig)+0x1c2>
      return sdError(SD_CARD_ERROR_ACMD41);
    921e:	mov.w	fp, #0
  m_errorCode = code;
    9222:	movs	r1, #23
  m_errorLine = line;
    9224:	ldr	r3, [pc, #320]	; (9368 <SdioCard::begin(SdioConfig)+0x2f4>)
    9226:	movw	r2, #723	; 0x2d3
}
    922a:	mov	r0, fp
  m_errorCode = code;
    922c:	strb	r1, [r4, #0]
  m_errorLine = line;
    922e:	str	r2, [r3, #0]
}
    9230:	add	sp, #76	; 0x4c
    9232:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9236:	mov	r1, r9
    9238:	mov	r0, fp
    923a:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    923e:	cmp	r0, #0
    9240:	beq.n	921e <SdioCard::begin(SdioConfig)+0x1aa>
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    9242:	bl	b4d8 <micros>
    9246:	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    9248:	ldr	r3, [pc, #280]	; (9364 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    924a:	cmp	r0, r8
    924c:	bhi.n	921e <SdioCard::begin(SdioConfig)+0x1aa>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    924e:	ldr	r2, [r3, #16]
    9250:	cmp	r2, #0
    9252:	bge.n	9214 <SdioCard::begin(SdioConfig)+0x1a0>
  m_ocr = SDHC_CMDRSP0;
    9254:	ldr	r1, [r3, #16]
    9256:	ldr	r2, [pc, #284]	; (9374 <SdioCard::begin(SdioConfig)+0x300>)
    9258:	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    925a:	ldr	r3, [r3, #16]
    925c:	lsls	r5, r3, #1
    925e:	bpl.n	9266 <SdioCard::begin(SdioConfig)+0x1f2>
    m_highCapacity = true;
    9260:	movs	r3, #1
    9262:	strb.w	r3, [sl]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9266:	movs	r1, #0
    9268:	ldr	r0, [pc, #268]	; (9378 <SdioCard::begin(SdioConfig)+0x304>)
    926a:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    926e:	mov	fp, r0
    9270:	cbnz	r0, 92a6 <SdioCard::begin(SdioConfig)+0x232>
  m_errorCode = code;
    9272:	movs	r1, #2
  m_errorLine = line;
    9274:	ldr	r3, [pc, #240]	; (9368 <SdioCard::begin(SdioConfig)+0x2f4>)
    9276:	mov.w	r2, #732	; 0x2dc
  m_errorCode = code;
    927a:	strb	r1, [r4, #0]
  m_errorLine = line;
    927c:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    927e:	b.n	91c2 <SdioCard::begin(SdioConfig)+0x14e>
      if (SDHC_CMDRSP0 != 0X1AA) {
    9280:	ldr	r3, [pc, #224]	; (9364 <SdioCard::begin(SdioConfig)+0x2f0>)
    9282:	ldr	r3, [r3, #16]
    9284:	cmp.w	r3, #426	; 0x1aa
    9288:	beq.n	929c <SdioCard::begin(SdioConfig)+0x228>
  m_errorCode = code;
    928a:	movs	r1, #6
  m_errorLine = line;
    928c:	ldr	r3, [pc, #216]	; (9368 <SdioCard::begin(SdioConfig)+0x2f4>)
    928e:	mov.w	r2, #708	; 0x2c4
        return sdError(SD_CARD_ERROR_CMD8);
    9292:	mov.w	fp, #0
  m_errorCode = code;
    9296:	strb	r1, [r4, #0]
  m_errorLine = line;
    9298:	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    929a:	b.n	91c2 <SdioCard::begin(SdioConfig)+0x14e>
      m_version2 = true;
    929c:	movs	r3, #1
  arg = m_version2 ? 0X40300000 : 0x00300000;
    929e:	ldr.w	r9, [pc, #204]	; 936c <SdioCard::begin(SdioConfig)+0x2f8>
      m_version2 = true;
    92a2:	strb	r3, [r7, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    92a4:	b.n	9204 <SdioCard::begin(SdioConfig)+0x190>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    92a6:	movs	r1, #0
    92a8:	ldr	r0, [pc, #208]	; (937c <SdioCard::begin(SdioConfig)+0x308>)
    92aa:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    92ae:	mov	fp, r0
    92b0:	cbnz	r0, 92c0 <SdioCard::begin(SdioConfig)+0x24c>
  m_errorCode = code;
    92b2:	movs	r1, #3
  m_errorLine = line;
    92b4:	ldr	r3, [pc, #176]	; (9368 <SdioCard::begin(SdioConfig)+0x2f4>)
    92b6:	movw	r2, #735	; 0x2df
  m_errorCode = code;
    92ba:	strb	r1, [r4, #0]
  m_errorLine = line;
    92bc:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    92be:	b.n	91c2 <SdioCard::begin(SdioConfig)+0x14e>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    92c0:	ldr.w	sl, [pc, #160]	; 9364 <SdioCard::begin(SdioConfig)+0x2f0>
    92c4:	ldr	r3, [pc, #184]	; (9380 <SdioCard::begin(SdioConfig)+0x30c>)
    92c6:	ldr.w	r2, [sl, #16]
    92ca:	ldr	r5, [pc, #184]	; (9384 <SdioCard::begin(SdioConfig)+0x310>)
    92cc:	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    92ce:	ldr	r1, [pc, #184]	; (9388 <SdioCard::begin(SdioConfig)+0x314>)
    92d0:	ldr	r0, [pc, #184]	; (938c <SdioCard::begin(SdioConfig)+0x318>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    92d2:	str	r3, [r5, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    92d4:	bl	8adc <readReg16(unsigned long, void*)>
    92d8:	mov	fp, r0
    92da:	cbnz	r0, 92ea <SdioCard::begin(SdioConfig)+0x276>
  m_errorCode = code;
    92dc:	movs	r1, #7
  m_errorLine = line;
    92de:	ldr	r3, [pc, #136]	; (9368 <SdioCard::begin(SdioConfig)+0x2f4>)
    92e0:	mov.w	r2, #740	; 0x2e4
  m_errorCode = code;
    92e4:	strb	r1, [r4, #0]
  m_errorLine = line;
    92e6:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    92e8:	b.n	91c2 <SdioCard::begin(SdioConfig)+0x14e>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    92ea:	ldr	r1, [pc, #164]	; (9390 <SdioCard::begin(SdioConfig)+0x31c>)
    92ec:	ldr	r0, [pc, #164]	; (9394 <SdioCard::begin(SdioConfig)+0x320>)
    92ee:	bl	8adc <readReg16(unsigned long, void*)>
    92f2:	mov	fp, r0
    92f4:	cbnz	r0, 9304 <SdioCard::begin(SdioConfig)+0x290>
  m_errorCode = code;
    92f6:	movs	r1, #8
  m_errorLine = line;
    92f8:	ldr	r3, [pc, #108]	; (9368 <SdioCard::begin(SdioConfig)+0x2f4>)
    92fa:	movw	r2, #743	; 0x2e7
  m_errorCode = code;
    92fe:	strb	r1, [r4, #0]
  m_errorLine = line;
    9300:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    9302:	b.n	91c2 <SdioCard::begin(SdioConfig)+0x14e>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    9304:	ldr	r1, [r5, #0]
    9306:	ldr	r0, [pc, #144]	; (9398 <SdioCard::begin(SdioConfig)+0x324>)
    9308:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    930c:	mov	fp, r0
    930e:	cbnz	r0, 931e <SdioCard::begin(SdioConfig)+0x2aa>
  m_errorCode = code;
    9310:	movs	r1, #5
  m_errorLine = line;
    9312:	ldr	r3, [pc, #84]	; (9368 <SdioCard::begin(SdioConfig)+0x2f4>)
    9314:	movw	r2, #746	; 0x2ea
  m_errorCode = code;
    9318:	strb	r1, [r4, #0]
  m_errorLine = line;
    931a:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    931c:	b.n	91c2 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    931e:	ldr	r1, [r5, #0]
    9320:	ldr	r0, [pc, #76]	; (9370 <SdioCard::begin(SdioConfig)+0x2fc>)
    9322:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    9326:	cmp	r0, #0
    9328:	bne.n	93ac <SdioCard::begin(SdioConfig)+0x338>
  m_errorCode = code;
    932a:	movs	r1, #20
  m_errorLine = line;
    932c:	ldr	r3, [pc, #56]	; (9368 <SdioCard::begin(SdioConfig)+0x2f4>)
    932e:	movw	r2, #750	; 0x2ee
    return sdError(SD_CARD_ERROR_ACMD6);
    9332:	mov.w	fp, #0
  m_errorCode = code;
    9336:	strb	r1, [r4, #0]
  m_errorLine = line;
    9338:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    933a:	b.n	91c2 <SdioCard::begin(SdioConfig)+0x14e>
    933c:	.word	0x20007dda
    9340:	.word	0x400d8000
    9344:	.word	0x20001a3a
    9348:	.word	0x20007ddb
    934c:	.word	0x401f8000
    9350:	.word	0x01008000
    9354:	.word	0x117f000b
    9358:	.word	0x0000863d
    935c:	.word	0x20001c00
    9360:	.word	0xe000e400
    9364:	.word	0x402c0000
    9368:	.word	0x20005c88
    936c:	.word	0x40300000
    9370:	.word	0x371a0000
    9374:	.word	0x200060ac
    9378:	.word	0x02090000
    937c:	.word	0x031a0000
    9380:	.word	0xffff0000
    9384:	.word	0x200060b0
    9388:	.word	0x2000609c
    938c:	.word	0x09090000
    9390:	.word	0x2000608c
    9394:	.word	0x0a090000
    9398:	.word	0x071b0000
    939c:	.word	0x20007ddc
    93a0:	.word	0x081a0000
    93a4:	.word	0x29020000
    93a8:	.word	0x000f4240
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    93ac:	movs	r1, #2
    93ae:	ldr	r0, [pc, #536]	; (95c8 <SdioCard::begin(SdioConfig)+0x554>)
    93b0:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    93b4:	cmp	r0, #0
    93b6:	beq.n	932a <SdioCard::begin(SdioConfig)+0x2b6>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    93b8:	ldr.w	r3, [sl, #40]	; 0x28
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    93bc:	ldr.w	r9, [pc, #576]	; 9600 <SdioCard::begin(SdioConfig)+0x58c>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    93c0:	bic.w	r3, r3, #6
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    93c4:	ldr.w	r8, [pc, #540]	; 95e4 <SdioCard::begin(SdioConfig)+0x570>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    93c8:	str.w	r3, [sl, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    93cc:	ldr.w	r3, [sl, #40]	; 0x28
    93d0:	orr.w	r3, r3, #2
    93d4:	str.w	r3, [sl, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    93d8:	mov.w	r3, #1048592	; 0x100010
    93dc:	str.w	r3, [sl, #68]	; 0x44
  uint32_t m = micros();
    93e0:	bl	b4d8 <micros>
    93e4:	mov	r7, r0
  while (fcn()) {
    93e6:	b.n	93f2 <SdioCard::begin(SdioConfig)+0x37e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    93e8:	bl	b4d8 <micros>
    93ec:	subs	r0, r0, r7
    93ee:	cmp	r0, r8
    93f0:	bhi.n	944a <SdioCard::begin(SdioConfig)+0x3d6>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    93f2:	ldr	r1, [r5, #0]
    93f4:	mov	r0, r9
    93f6:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    93fa:	cmp	r0, #0
    93fc:	beq.n	93e8 <SdioCard::begin(SdioConfig)+0x374>
    93fe:	ldr.w	r3, [sl, #16]
  while (fcn()) {
    9402:	lsls	r0, r3, #23
    9404:	bpl.n	93e8 <SdioCard::begin(SdioConfig)+0x374>
  m_dmaBusy = true;
    9406:	movs	r3, #1
    9408:	ldr.w	r8, [pc, #504]	; 9604 <SdioCard::begin(SdioConfig)+0x590>
  m_irqstat = 0;
    940c:	ldr	r7, [pc, #444]	; (95cc <SdioCard::begin(SdioConfig)+0x558>)
    940e:	mov.w	fp, #0
  m_dmaBusy = true;
    9412:	strb.w	r3, [r8]
  SDHC_DSADDR = (uint32_t)scr;
    9416:	ldr.w	r9, [pc, #496]	; 9608 <SdioCard::begin(SdioConfig)+0x594>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    941a:	ldr	r3, [pc, #436]	; (95d0 <SdioCard::begin(SdioConfig)+0x55c>)
  m_irqstat = 0;
    941c:	str.w	fp, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    9420:	str.w	r9, [sl]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    9424:	str.w	r3, [sl, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9428:	ldr	r3, [pc, #424]	; (95d4 <SdioCard::begin(SdioConfig)+0x560>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    942a:	ldr	r0, [pc, #428]	; (95d8 <SdioCard::begin(SdioConfig)+0x564>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    942c:	str.w	r3, [sl, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9430:	ldr	r1, [r5, #0]
    9432:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    9436:	cbnz	r0, 945c <SdioCard::begin(SdioConfig)+0x3e8>
  m_errorCode = code;
    9438:	movs	r1, #24
  m_errorLine = line;
    943a:	ldr	r3, [pc, #416]	; (95dc <SdioCard::begin(SdioConfig)+0x568>)
    943c:	movw	r2, #471	; 0x1d7
    return false;
    9440:	mov.w	fp, #0
  m_errorCode = code;
    9444:	strb	r1, [r4, #0]
  m_errorLine = line;
    9446:	str	r2, [r3, #0]
  return false;
    9448:	b.n	91c2 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    944a:	movs	r1, #10
  m_errorLine = line;
    944c:	ldr	r3, [pc, #396]	; (95dc <SdioCard::begin(SdioConfig)+0x568>)
    944e:	mov.w	r2, #464	; 0x1d0
    return false;
    9452:	mov.w	fp, #0
  m_errorCode = code;
    9456:	strb	r1, [r4, #0]
  m_errorLine = line;
    9458:	str	r2, [r3, #0]
  return false;
    945a:	b.n	91c2 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    945c:	mov	r1, fp
    945e:	ldr	r0, [pc, #384]	; (95e0 <SdioCard::begin(SdioConfig)+0x56c>)
    9460:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    9464:	cmp	r0, #0
    9466:	beq.n	9438 <SdioCard::begin(SdioConfig)+0x3c4>
  if (!waitDmaStatus()) {
    9468:	bl	88a0 <waitDmaStatus()>
    946c:	mov	fp, r0
    946e:	cbnz	r0, 947e <SdioCard::begin(SdioConfig)+0x40a>
  m_errorCode = code;
    9470:	movs	r1, #38	; 0x26
  m_errorLine = line;
    9472:	ldr	r3, [pc, #360]	; (95dc <SdioCard::begin(SdioConfig)+0x568>)
    9474:	mov.w	r2, #474	; 0x1da
  m_errorCode = code;
    9478:	strb	r1, [r4, #0]
  m_errorLine = line;
    947a:	str	r2, [r3, #0]
  return false;
    947c:	b.n	91c2 <SdioCard::begin(SdioConfig)+0x14e>
  uint32_t m = micros();
    947e:	bl	b4d8 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9482:	ldr.w	sl, [pc, #380]	; 9600 <SdioCard::begin(SdioConfig)+0x58c>
    9486:	ldr.w	fp, [pc, #388]	; 960c <SdioCard::begin(SdioConfig)+0x598>
  uint32_t m = micros();
    948a:	str	r0, [sp, #4]
  while (fcn()) {
    948c:	b.n	949c <SdioCard::begin(SdioConfig)+0x428>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    948e:	bl	b4d8 <micros>
    9492:	ldr	r3, [sp, #4]
    9494:	subs	r0, r0, r3
    9496:	ldr	r3, [pc, #332]	; (95e4 <SdioCard::begin(SdioConfig)+0x570>)
    9498:	cmp	r0, r3
    949a:	bhi.n	94ec <SdioCard::begin(SdioConfig)+0x478>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    949c:	ldr	r1, [r5, #0]
    949e:	mov	r0, sl
    94a0:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    94a4:	cmp	r0, #0
    94a6:	beq.n	948e <SdioCard::begin(SdioConfig)+0x41a>
    94a8:	ldr.w	r3, [fp, #16]
  while (fcn()) {
    94ac:	lsls	r1, r3, #23
    94ae:	bpl.n	948e <SdioCard::begin(SdioConfig)+0x41a>
  m_dmaBusy = true;
    94b0:	movs	r2, #1
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    94b2:	ldr	r0, [pc, #292]	; (95d8 <SdioCard::begin(SdioConfig)+0x564>)
  m_dmaBusy = true;
    94b4:	strb.w	r2, [r8]
  m_irqstat = 0;
    94b8:	mov.w	r8, #0
  SDHC_DSADDR = (uint32_t)scr;
    94bc:	ldr	r2, [pc, #296]	; (95e8 <SdioCard::begin(SdioConfig)+0x574>)
  m_irqstat = 0;
    94be:	str.w	r8, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    94c2:	str.w	r2, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    94c6:	ldr	r2, [pc, #292]	; (95ec <SdioCard::begin(SdioConfig)+0x578>)
    94c8:	str.w	r2, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    94cc:	ldr	r2, [pc, #260]	; (95d4 <SdioCard::begin(SdioConfig)+0x560>)
    94ce:	str.w	r2, [fp, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    94d2:	ldr	r1, [r5, #0]
    94d4:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    94d8:	cbnz	r0, 94fe <SdioCard::begin(SdioConfig)+0x48a>
  m_errorCode = code;
    94da:	movs	r1, #21
  m_errorLine = line;
    94dc:	ldr	r3, [pc, #252]	; (95dc <SdioCard::begin(SdioConfig)+0x568>)
    94de:	movw	r2, #453	; 0x1c5
    return false;
    94e2:	mov.w	fp, #0
  m_errorCode = code;
    94e6:	strb	r1, [r4, #0]
  m_errorLine = line;
    94e8:	str	r2, [r3, #0]
  return false;
    94ea:	b.n	91c2 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    94ec:	movs	r1, #10
  m_errorLine = line;
    94ee:	ldr	r3, [pc, #236]	; (95dc <SdioCard::begin(SdioConfig)+0x568>)
    94f0:	mov.w	r2, #446	; 0x1be
    return false;
    94f4:	mov.w	fp, #0
  m_errorCode = code;
    94f8:	strb	r1, [r4, #0]
  m_errorLine = line;
    94fa:	str	r2, [r3, #0]
  return false;
    94fc:	b.n	91c2 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    94fe:	mov	r1, r8
    9500:	ldr	r0, [pc, #236]	; (95f0 <SdioCard::begin(SdioConfig)+0x57c>)
    9502:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    9506:	cmp	r0, #0
    9508:	beq.n	94da <SdioCard::begin(SdioConfig)+0x466>
  if (!waitDmaStatus()) {
    950a:	bl	88a0 <waitDmaStatus()>
    950e:	mov	fp, r0
    9510:	cbnz	r0, 9520 <SdioCard::begin(SdioConfig)+0x4ac>
  m_errorCode = code;
    9512:	movs	r1, #38	; 0x26
  m_errorLine = line;
    9514:	ldr	r3, [pc, #196]	; (95dc <SdioCard::begin(SdioConfig)+0x568>)
    9516:	mov.w	r2, #456	; 0x1c8
  m_errorCode = code;
    951a:	strb	r1, [r4, #0]
  m_errorLine = line;
    951c:	str	r2, [r3, #0]
  return false;
    951e:	b.n	91c2 <SdioCard::begin(SdioConfig)+0x14e>
  /** Bytes 0-3 SD Association, bytes 4-7 reserved for manufacturer. */
  uint8_t scr[8];
  /** \return SCR_STRUCTURE field  - must be zero.*/
  uint8_t srcStructure() const { return scr[0] >> 4; }
  /** \return SD_SPEC field 0 - v1.0 or V1.01, 1 - 1.10, 2 - V2.00 or greater */
  uint8_t sdSpec() const { return scr[0] & 0XF; }
    9520:	ldrb.w	r3, [r9]
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    9524:	lsls	r2, r3, #28
    9526:	beq.n	955a <SdioCard::begin(SdioConfig)+0x4e6>
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    9528:	ldr	r3, [r6, #0]
    952a:	add	r2, sp, #8
    952c:	mvn.w	r1, #4278190080	; 0xff000000
    9530:	mov	r0, r6
    9532:	ldr	r3, [r3, #40]	; 0x28
    9534:	blx	r3
    9536:	cbz	r0, 955a <SdioCard::begin(SdioConfig)+0x4e6>
    9538:	ldrb.w	r3, [sp, #21]
    953c:	lsls	r3, r3, #30
    953e:	bpl.n	955a <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    9540:	ldr	r3, [r6, #0]
    9542:	add	r2, sp, #8
    9544:	mov	r0, r6
    9546:	ldr	r1, [pc, #172]	; (95f4 <SdioCard::begin(SdioConfig)+0x580>)
    9548:	ldr	r3, [r3, #40]	; 0x28
    954a:	blx	r3
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    954c:	cbz	r0, 955a <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    954e:	ldrb.w	r3, [sp, #24]
    9552:	and.w	r3, r3, #15
    9556:	cmp	r3, #1
    9558:	beq.n	95c0 <SdioCard::begin(SdioConfig)+0x54c>
    kHzSdClk = 25000;
    955a:	movw	r0, #25000	; 0x61a8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    955e:	ldr	r4, [pc, #152]	; (95f8 <SdioCard::begin(SdioConfig)+0x584>)
    9560:	movs	r3, #5
    9562:	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    9566:	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    956a:	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    956e:	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    9572:	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    9576:	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    957a:	bl	868c <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    957e:	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9580:	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9584:	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    9588:	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    958c:	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9590:	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    9594:	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    9598:	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    959c:	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    95a0:	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    95a4:	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    95a8:	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    95ac:	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    95b0:	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    95b2:	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    95b6:	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    95ba:	ldr	r2, [pc, #64]	; (95fc <SdioCard::begin(SdioConfig)+0x588>)
    95bc:	strb	r3, [r2, #0]
  return true;
    95be:	b.n	91c2 <SdioCard::begin(SdioConfig)+0x14e>
    kHzSdClk = 50000;
    95c0:	movw	r0, #50000	; 0xc350
    95c4:	b.n	955e <SdioCard::begin(SdioConfig)+0x4ea>
    95c6:	nop
    95c8:	.word	0x061a0000
    95cc:	.word	0x20006100
    95d0:	.word	0x00010008
    95d4:	.word	0x117f0002
    95d8:	.word	0x371a0000
    95dc:	.word	0x20005c88
    95e0:	.word	0x333a0011
    95e4:	.word	0x000f4240
    95e8:	.word	0x200060bc
    95ec:	.word	0x00010040
    95f0:	.word	0x0d3a0011
    95f4:	.word	0x80fffff1
    95f8:	.word	0x401f8000
    95fc:	.word	0x20007dda
    9600:	.word	0x0d1a0000
    9604:	.word	0x20007dde
    9608:	.word	0x200060b4
    960c:	.word	0x402c0000

00009610 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9610:	ldr	r3, [pc, #220]	; (96f0 <SdioCard::readData(unsigned char*)+0xe0>)
    9612:	ldr	r2, [r3, #36]	; 0x24
    9614:	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    9616:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    961a:	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    961c:	bmi.n	963a <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    961e:	ldr	r2, [r3, #40]	; 0x28
    9620:	bic.w	r2, r2, #65536	; 0x10000
    9624:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    9626:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    9628:	ldr	r2, [r3, #40]	; 0x28
    962a:	orr.w	r2, r2, #131072	; 0x20000
    962e:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9630:	ldr	r2, [r3, #40]	; 0x28
    9632:	orr.w	r2, r2, #65536	; 0x10000
    9636:	str	r2, [r3, #40]	; 0x28
    interrupts();
    9638:	cpsie	i
  uint32_t m = micros();
    963a:	bl	b4d8 <micros>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    963e:	ldr	r6, [pc, #176]	; (96f0 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9640:	ldr.w	r8, [pc, #196]	; 9708 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    9644:	mov	r5, r0
  while (fcn()) {
    9646:	b.n	9652 <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9648:	bl	b4d8 <micros>
    964c:	subs	r3, r0, r5
    964e:	cmp	r3, r8
    9650:	bhi.n	96c2 <SdioCard::readData(unsigned char*)+0xb2>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    9652:	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    9654:	ands.w	r4, r4, #2048	; 0x800
    9658:	beq.n	9648 <SdioCard::readData(unsigned char*)+0x38>
    965a:	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    965e:	ldr	r0, [pc, #144]	; (96f0 <SdioCard::readData(unsigned char*)+0xe0>)
    9660:	add.w	r7, r7, #572	; 0x23c
    9664:	ldr	r3, [r0, #36]	; 0x24
    9666:	lsls	r3, r3, #20
    9668:	bpl.n	9664 <SdioCard::readData(unsigned char*)+0x54>
    966a:	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    966e:	ldr	r2, [r0, #32]
    9670:	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9674:	cmp	ip, r3
    9676:	bne.n	966e <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    9678:	add.w	ip, ip, #64	; 0x40
    967c:	cmp	r7, ip
    967e:	bne.n	9664 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    9680:	bl	b4d8 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    9684:	ldr	r7, [pc, #104]	; (96f0 <SdioCard::readData(unsigned char*)+0xe0>)
    9686:	ldr	r5, [pc, #108]	; (96f4 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    9688:	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    968a:	ldr.w	r8, [pc, #124]	; 9708 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    968e:	b.n	969a <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9690:	bl	b4d8 <micros>
    9694:	subs	r3, r0, r6
    9696:	cmp	r3, r8
    9698:	bhi.n	96d6 <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    969a:	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    969c:	ands	r4, r5
    969e:	beq.n	9690 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    96a0:	ldr	r3, [r7, #48]	; 0x30
    96a2:	ldr	r2, [pc, #84]	; (96f8 <SdioCard::readData(unsigned char*)+0xe8>)
    96a4:	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    96a6:	ldr	r3, [r2, #0]
    96a8:	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    96aa:	ldr	r3, [r2, #0]
    96ac:	ands.w	r3, r3, #2
    96b0:	beq.n	96ea <SdioCard::readData(unsigned char*)+0xda>
    96b2:	ldr	r2, [r2, #0]
    96b4:	ldr	r3, [pc, #68]	; (96fc <SdioCard::readData(unsigned char*)+0xec>)
    96b6:	tst	r2, r3
    96b8:	ite	eq
    96ba:	moveq	r0, #1
    96bc:	movne	r0, #0
}
    96be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    96c2:	ldr	r1, [pc, #60]	; (9700 <SdioCard::readData(unsigned char*)+0xf0>)
    96c4:	movs	r5, #27
  m_errorLine = line;
    96c6:	ldr	r3, [pc, #60]	; (9704 <SdioCard::readData(unsigned char*)+0xf4>)
    96c8:	movw	r2, #889	; 0x379
    return sdError(SD_CARD_ERROR_READ_FIFO);
    96cc:	mov	r0, r4
  m_errorCode = code;
    96ce:	strb	r5, [r1, #0]
  m_errorLine = line;
    96d0:	str	r2, [r3, #0]
}
    96d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    96d6:	ldr	r1, [pc, #40]	; (9700 <SdioCard::readData(unsigned char*)+0xf0>)
    96d8:	movs	r5, #30
  m_errorLine = line;
    96da:	ldr	r3, [pc, #40]	; (9704 <SdioCard::readData(unsigned char*)+0xf4>)
    96dc:	mov.w	r2, #900	; 0x384
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    96e0:	mov	r0, r4
  m_errorCode = code;
    96e2:	strb	r5, [r1, #0]
  m_errorLine = line;
    96e4:	str	r2, [r3, #0]
}
    96e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    96ea:	mov	r0, r3
}
    96ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    96f0:	.word	0x402c0000
    96f4:	.word	0x117f0002
    96f8:	.word	0x20006100
    96fc:	.word	0x117f0000
    9700:	.word	0x20001a3a
    9704:	.word	0x20005c88
    9708:	.word	0x000f4240

0000970c <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    970c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    9710:	ldr	r3, [pc, #164]	; (97b8 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    9712:	mov	r9, r1
  m_busyFcn = fcn;
    9714:	ldr.w	sl, [pc, #192]	; 97d8 <SdioCard::readStart(unsigned long)+0xcc>
    9718:	ldr	r6, [pc, #160]	; (97bc <SdioCard::readStart(unsigned long)+0xb0>)
    971a:	str.w	r3, [sl]
  uint32_t m = micros();
    971e:	bl	b4d8 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9722:	ldr	r5, [pc, #156]	; (97c0 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    9724:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9726:	ldr.w	r8, [pc, #180]	; 97dc <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    972a:	ldr	r7, [pc, #152]	; (97c4 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    972c:	b.n	973c <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    972e:	bl	b4d8 <micros>
    9732:	subs	r0, r0, r4
    9734:	cmp	r0, r7
    9736:	bhi.n	978c <SdioCard::readStart(unsigned long)+0x80>
    yield();
    9738:	bl	bd40 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    973c:	ldr	r1, [r6, #0]
    973e:	mov	r0, r5
    9740:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    9744:	cmp	r0, #0
    9746:	beq.n	972e <SdioCard::readStart(unsigned long)+0x22>
    9748:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    974c:	lsls	r3, r3, #23
    974e:	bpl.n	972e <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    9750:	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9752:	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    9756:	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    975a:	ldr.w	r3, [r8, #40]	; 0x28
    975e:	orr.w	r3, r3, #65536	; 0x10000
    9762:	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9766:	ldr	r3, [pc, #96]	; (97c8 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9768:	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    976c:	ldrb	r3, [r3, #0]
    976e:	cbz	r3, 97a4 <SdioCard::readStart(unsigned long)+0x98>
    9770:	mov	r1, r9
    9772:	ldr	r0, [pc, #88]	; (97cc <SdioCard::readStart(unsigned long)+0xc0>)
    9774:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    9778:	cbnz	r0, 9788 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    977a:	ldr	r1, [pc, #84]	; (97d0 <SdioCard::readStart(unsigned long)+0xc4>)
    977c:	movs	r4, #12
  m_errorLine = line;
    977e:	ldr	r3, [pc, #84]	; (97d4 <SdioCard::readStart(unsigned long)+0xc8>)
    9780:	movw	r2, #1002	; 0x3ea
  m_errorCode = code;
    9784:	strb	r4, [r1, #0]
  m_errorLine = line;
    9786:	str	r2, [r3, #0]
}
    9788:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    978c:	ldr	r2, [pc, #64]	; (97d0 <SdioCard::readStart(unsigned long)+0xc4>)
    978e:	movs	r1, #10
      m_busyFcn = 0;
    9790:	movs	r0, #0
  m_errorLine = line;
    9792:	ldr	r3, [pc, #64]	; (97d4 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    9794:	strb	r1, [r2, #0]
  m_errorLine = line;
    9796:	movw	r2, #990	; 0x3de
      m_busyFcn = 0;
    979a:	str.w	r0, [sl]
  m_errorLine = line;
    979e:	str	r2, [r3, #0]
}
    97a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    97a4:	mov.w	r9, r9, lsl #9
    97a8:	ldr	r0, [pc, #32]	; (97cc <SdioCard::readStart(unsigned long)+0xc0>)
    97aa:	mov	r1, r9
    97ac:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    97b0:	cmp	r0, #0
    97b2:	bne.n	9788 <SdioCard::readStart(unsigned long)+0x7c>
    97b4:	b.n	977a <SdioCard::readStart(unsigned long)+0x6e>
    97b6:	nop
    97b8:	.word	0x00008bd9
    97bc:	.word	0x200060b0
    97c0:	.word	0x0d1a0000
    97c4:	.word	0x000f4240
    97c8:	.word	0x20007ddc
    97cc:	.word	0x123a0030
    97d0:	.word	0x20001a3a
    97d4:	.word	0x20005c88
    97d8:	.word	0x200060fc
    97dc:	.word	0x402c0000

000097e0 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    97e0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    97e4:	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    97e6:	ldr	r4, [pc, #116]	; (985c <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    97e8:	mov	r5, r1
  m_curState = IDLE_STATE;
    97ea:	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    97ec:	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    97ee:	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    97f0:	ldr	r0, [pc, #108]	; (9860 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    97f2:	bic.w	r3, r3, #65536	; 0x10000
    97f6:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    97f8:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    97fc:	cbnz	r0, 9810 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    97fe:	ldr	r1, [pc, #100]	; (9864 <SdioCard::stopTransmission(bool)+0x84>)
    9800:	movs	r4, #9
  m_errorLine = line;
    9802:	ldr	r3, [pc, #100]	; (9868 <SdioCard::stopTransmission(bool)+0x88>)
    9804:	movw	r2, #1018	; 0x3fa
  m_errorCode = code;
    9808:	strb	r4, [r1, #0]
  m_errorLine = line;
    980a:	str	r2, [r3, #0]
}
    980c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    9810:	cmp	r5, #0
    9812:	beq.n	980c <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    9814:	ldr	r3, [pc, #84]	; (986c <SdioCard::stopTransmission(bool)+0x8c>)
    9816:	ldr	r6, [pc, #88]	; (9870 <SdioCard::stopTransmission(bool)+0x90>)
    9818:	str	r3, [r6, #0]
  uint32_t m = micros();
    981a:	bl	b4d8 <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    981e:	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    9820:	mov	r7, r0
  while (fcn()) {
    9822:	lsls	r2, r3, #7
    9824:	bmi.n	9854 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9826:	ldr.w	r8, [pc, #76]	; 9874 <SdioCard::stopTransmission(bool)+0x94>
    982a:	b.n	9836 <SdioCard::stopTransmission(bool)+0x56>
    yield();
    982c:	bl	bd40 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9830:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    9832:	lsls	r3, r3, #7
    9834:	bmi.n	9854 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9836:	bl	b4d8 <micros>
    983a:	subs	r0, r0, r7
    983c:	cmp	r0, r8
    983e:	bls.n	982c <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    9840:	ldr	r2, [pc, #32]	; (9864 <SdioCard::stopTransmission(bool)+0x84>)
    9842:	movs	r1, #10
      m_busyFcn = 0;
    9844:	movs	r0, #0
  m_errorLine = line;
    9846:	ldr	r3, [pc, #32]	; (9868 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    9848:	strb	r1, [r2, #0]
  m_errorLine = line;
    984a:	movw	r2, #1022	; 0x3fe
      m_busyFcn = 0;
    984e:	str	r0, [r6, #0]
  m_errorLine = line;
    9850:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    9852:	b.n	980c <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    9854:	movs	r3, #0
  return true;
    9856:	mov	r0, r5
  m_busyFcn = 0;
    9858:	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    985a:	b.n	980c <SdioCard::stopTransmission(bool)+0x2c>
    985c:	.word	0x402c0000
    9860:	.word	0x0cdb0000
    9864:	.word	0x20001a3a
    9868:	.word	0x20005c88
    986c:	.word	0x0000866d
    9870:	.word	0x200060fc
    9874:	.word	0x000f4240

00009878 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    9878:	ldr	r3, [pc, #40]	; (98a4 <SdioCard::syncDevice()+0x2c>)
    987a:	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    987c:	push	{r4, lr}
    987e:	mov	r4, r0
  if (!m_transferActive) {
    9880:	cbnz	r3, 988a <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    9882:	ldrb	r3, [r4, #9]
    9884:	cbnz	r3, 9898 <SdioCard::syncDevice()+0x20>
  return true;
    9886:	movs	r0, #1
}
    9888:	pop	{r4, pc}
    988a:	bl	8908 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    988e:	cmp	r0, #0
    9890:	beq.n	9888 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    9892:	ldrb	r3, [r4, #9]
    9894:	cmp	r3, #0
    9896:	beq.n	9886 <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    9898:	mov	r0, r4
    989a:	movs	r1, #1
}
    989c:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    98a0:	b.w	97e0 <SdioCard::stopTransmission(bool)>
    98a4:	.word	0x20007ddd

000098a8 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    98a8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    98ac:	ldrb	r3, [r0, #9]
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    98ae:	mov	r5, r1
    98b0:	mov	r6, r2
  if (m_curState != IDLE_STATE && !syncDevice()) {
    98b2:	cbz	r3, 98e4 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    98b4:	ldr	r3, [r0, #0]
    98b6:	mov	r4, r0
    98b8:	ldr	r2, [pc, #252]	; (99b8 <SdioCard::erase(unsigned long, unsigned long)+0x110>)
    98ba:	ldr	r3, [r3, #28]
    98bc:	cmp	r3, r2
    98be:	bne.n	9956 <SdioCard::erase(unsigned long, unsigned long)+0xae>
  if (!m_transferActive) {
    98c0:	ldr	r3, [pc, #248]	; (99bc <SdioCard::erase(unsigned long, unsigned long)+0x114>)
    98c2:	ldrb	r3, [r3, #0]
    98c4:	cbnz	r3, 98d6 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
    return stopTransmission(true);
    98c6:	movs	r1, #1
    98c8:	mov	r0, r4
    98ca:	bl	97e0 <SdioCard::stopTransmission(bool)>
  if (m_curState != IDLE_STATE && !syncDevice()) {
    98ce:	cbnz	r0, 98e4 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return false;
    98d0:	movs	r0, #0
}
    98d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98d6:	bl	8908 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    98da:	cmp	r0, #0
    98dc:	beq.n	98d0 <SdioCard::erase(unsigned long, unsigned long)+0x28>
  if (m_curState != IDLE_STATE) {
    98de:	ldrb	r3, [r4, #9]
    98e0:	cmp	r3, #0
    98e2:	bne.n	98c6 <SdioCard::erase(unsigned long, unsigned long)+0x1e>
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    98e4:	ldr	r4, [pc, #216]	; (99c0 <SdioCard::erase(unsigned long, unsigned long)+0x118>)
    98e6:	ldrb	r3, [r4, #10]
  if (!m_csd.eraseSingleBlock()) {
    98e8:	ands.w	r0, r3, #64	; 0x40
    98ec:	bne.n	9914 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    98ee:	lsls	r3, r3, #1
    98f0:	ldrb	r2, [r4, #11]
    98f2:	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    98f6:	orr.w	r3, r3, r2, lsr #7
    98fa:	adds	r2, r6, #1
    98fc:	orrs	r2, r5
    98fe:	tst	r3, r2
    9900:	beq.n	9914 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  m_errorCode = code;
    9902:	ldr	r1, [pc, #192]	; (99c4 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9904:	movs	r4, #40	; 0x28
  m_errorLine = line;
    9906:	ldr	r3, [pc, #192]	; (99c8 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9908:	movw	r2, #813	; 0x32d
  m_errorCode = code;
    990c:	strb	r4, [r1, #0]
  m_errorLine = line;
    990e:	str	r2, [r3, #0]
}
    9910:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    9914:	ldr	r3, [pc, #180]	; (99cc <SdioCard::erase(unsigned long, unsigned long)+0x124>)
    9916:	ldrb	r3, [r3, #0]
    9918:	cbnz	r3, 991e <SdioCard::erase(unsigned long, unsigned long)+0x76>
    firstSector <<= 9;
    991a:	lsls	r5, r5, #9
    lastSector <<= 9;
    991c:	lsls	r6, r6, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    991e:	mov	r1, r5
    9920:	ldr	r0, [pc, #172]	; (99d0 <SdioCard::erase(unsigned long, unsigned long)+0x128>)
    9922:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    9926:	cbnz	r0, 993a <SdioCard::erase(unsigned long, unsigned long)+0x92>
  m_errorCode = code;
    9928:	ldr	r1, [pc, #152]	; (99c4 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    992a:	movs	r4, #15
  m_errorLine = line;
    992c:	ldr	r3, [pc, #152]	; (99c8 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    992e:	movw	r2, #821	; 0x335
  m_errorCode = code;
    9932:	strb	r4, [r1, #0]
  m_errorLine = line;
    9934:	str	r2, [r3, #0]
}
    9936:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    993a:	mov	r1, r6
    993c:	ldr	r0, [pc, #148]	; (99d4 <SdioCard::erase(unsigned long, unsigned long)+0x12c>)
    993e:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    9942:	cbnz	r0, 995e <SdioCard::erase(unsigned long, unsigned long)+0xb6>
  m_errorCode = code;
    9944:	ldr	r1, [pc, #124]	; (99c4 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9946:	movs	r4, #16
  m_errorLine = line;
    9948:	ldr	r3, [pc, #124]	; (99c8 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    994a:	mov.w	r2, #824	; 0x338
  m_errorCode = code;
    994e:	strb	r4, [r1, #0]
  m_errorLine = line;
    9950:	str	r2, [r3, #0]
}
    9952:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9956:	blx	r3
    9958:	cmp	r0, #0
    995a:	beq.n	98d0 <SdioCard::erase(unsigned long, unsigned long)+0x28>
    995c:	b.n	98e4 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    995e:	movs	r1, #0
    9960:	ldr	r0, [pc, #116]	; (99d8 <SdioCard::erase(unsigned long, unsigned long)+0x130>)
    9962:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    9966:	cbnz	r0, 9978 <SdioCard::erase(unsigned long, unsigned long)+0xd0>
  m_errorCode = code;
    9968:	ldr	r1, [pc, #88]	; (99c4 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    996a:	movs	r4, #17
  m_errorLine = line;
    996c:	ldr	r3, [pc, #88]	; (99c8 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    996e:	movw	r2, #827	; 0x33b
  m_errorCode = code;
    9972:	strb	r4, [r1, #0]
  m_errorLine = line;
    9974:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    9976:	b.n	9910 <SdioCard::erase(unsigned long, unsigned long)+0x68>
  uint32_t m = micros();
    9978:	bl	b4d8 <micros>
    997c:	ldr	r6, [pc, #92]	; (99dc <SdioCard::erase(unsigned long, unsigned long)+0x134>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    997e:	ldr	r5, [pc, #96]	; (99e0 <SdioCard::erase(unsigned long, unsigned long)+0x138>)
  uint32_t m = micros();
    9980:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9982:	ldr.w	r8, [pc, #100]	; 99e8 <SdioCard::erase(unsigned long, unsigned long)+0x140>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9986:	ldr	r7, [pc, #92]	; (99e4 <SdioCard::erase(unsigned long, unsigned long)+0x13c>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9988:	ldr	r1, [r6, #0]
    998a:	mov	r0, r5
    998c:	bl	8a44 <cardCommand(unsigned long, unsigned long)>
    9990:	cbz	r0, 999a <SdioCard::erase(unsigned long, unsigned long)+0xf2>
    9992:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    9996:	lsls	r3, r3, #23
    9998:	bmi.n	9910 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    999a:	bl	b4d8 <micros>
    999e:	subs	r0, r0, r4
    99a0:	cmp	r0, r7
    99a2:	bls.n	9988 <SdioCard::erase(unsigned long, unsigned long)+0xe0>
  m_errorCode = code;
    99a4:	ldr	r1, [pc, #28]	; (99c4 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    99a6:	movs	r4, #41	; 0x29
  m_errorLine = line;
    99a8:	ldr	r3, [pc, #28]	; (99c8 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    99aa:	movw	r2, #830	; 0x33e
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    99ae:	movs	r0, #0
  m_errorCode = code;
    99b0:	strb	r4, [r1, #0]
  m_errorLine = line;
    99b2:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    99b4:	b.n	9910 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    99b6:	nop
    99b8:	.word	0x00009879
    99bc:	.word	0x20007ddd
    99c0:	.word	0x2000609c
    99c4:	.word	0x20001a3a
    99c8:	.word	0x20005c88
    99cc:	.word	0x20007ddc
    99d0:	.word	0x201a0000
    99d4:	.word	0x211a0000
    99d8:	.word	0x261b0000
    99dc:	.word	0x200060b0
    99e0:	.word	0x0d1a0000
    99e4:	.word	0x000f4240
    99e8:	.word	0x402c0000

000099ec <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    99ec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99f0:	mov	r4, r0
    99f2:	ldrb	r0, [r0, #8]
    99f4:	sub.w	sp, sp, #512	; 0x200
    99f8:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    99fa:	ands.w	r5, r0, #1
    99fe:	beq.n	9a28 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9a00:	lsls	r3, r2, #30
    9a02:	beq.n	9a7e <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9a04:	movs	r3, #1
    9a06:	ldr	r0, [pc, #224]	; (9ae8 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    9a08:	mov	r2, sp
    9a0a:	bl	8e58 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9a0e:	cmp	r0, #0
    9a10:	beq.n	9a88 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    9a12:	mov.w	r2, #512	; 0x200
    9a16:	mov	r1, sp
    9a18:	mov	r0, r6
    9a1a:	bl	9d30 <memcpy>
}
    9a1e:	mov	r0, r5
    9a20:	add.w	sp, sp, #512	; 0x200
    9a24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    9a28:	ldr.w	r8, [pc, #204]	; 9af8 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    9a2c:	mov	r7, r1
    9a2e:	ldrb.w	r3, [r8]
    9a32:	cmp	r3, #0
    9a34:	bne.n	9aa2 <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9a36:	ldrb	r3, [r4, #9]
    9a38:	cmp	r3, #1
    9a3a:	beq.n	9ab0 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    9a3c:	ldr	r2, [r4, #0]
    9a3e:	ldr	r1, [pc, #172]	; (9aec <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    9a40:	ldr	r2, [r2, #28]
    9a42:	cmp	r2, r1
    9a44:	bne.n	9adc <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    9a46:	ldrb.w	r2, [r8]
    9a4a:	cmp	r2, #0
    9a4c:	bne.n	9ab8 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    9a4e:	cmp	r3, #0
    9a50:	bne.n	9ac6 <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    9a52:	mov	r1, r7
    9a54:	mov	r0, r4
    9a56:	bl	970c <SdioCard::readStart(unsigned long)>
    9a5a:	cbz	r0, 9a98 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    9a5c:	movs	r3, #1
      m_curSector = sector;
    9a5e:	str	r7, [r4, #4]
      m_curState = READ_STATE;
    9a60:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    9a62:	mov	r1, r6
    9a64:	mov	r0, r4
    9a66:	bl	9610 <SdioCard::readData(unsigned char*)>
    9a6a:	cbz	r0, 9a98 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    9a6c:	ldr	r3, [r4, #4]
  return true;
    9a6e:	mov	r5, r0
    m_curSector++;
    9a70:	adds	r3, #1
}
    9a72:	mov	r0, r5
    m_curSector++;
    9a74:	str	r3, [r4, #4]
}
    9a76:	add.w	sp, sp, #512	; 0x200
    9a7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9a7e:	movs	r3, #1
    9a80:	ldr	r0, [pc, #100]	; (9ae8 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    9a82:	bl	8e58 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9a86:	cbnz	r0, 9a98 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    9a88:	ldr	r1, [pc, #100]	; (9af0 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    9a8a:	movs	r0, #11
  m_errorLine = line;
    9a8c:	ldr	r3, [pc, #100]	; (9af4 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    9a8e:	movw	r2, #929	; 0x3a1
      return sdError(SD_CARD_ERROR_CMD17);
    9a92:	movs	r5, #0
  m_errorCode = code;
    9a94:	strb	r0, [r1, #0]
  m_errorLine = line;
    9a96:	str	r2, [r3, #0]
}
    9a98:	mov	r0, r5
    9a9a:	add.w	sp, sp, #512	; 0x200
    9a9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9aa2:	bl	8908 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    9aa6:	cmp	r0, #0
    9aa8:	beq.n	9a98 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9aaa:	ldrb	r3, [r4, #9]
    9aac:	cmp	r3, #1
    9aae:	bne.n	9a3c <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    9ab0:	ldr	r2, [r4, #4]
    9ab2:	cmp	r2, r7
    9ab4:	bne.n	9a3c <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    9ab6:	b.n	9a62 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    9ab8:	bl	8908 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9abc:	cmp	r0, #0
    9abe:	beq.n	9a98 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    9ac0:	ldrb	r3, [r4, #9]
    9ac2:	cmp	r3, #0
    9ac4:	beq.n	9a52 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    9ac6:	movs	r1, #1
    9ac8:	mov	r0, r4
    9aca:	bl	97e0 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    9ace:	cmp	r0, #0
    9ad0:	bne.n	9a52 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    9ad2:	mov	r0, r5
    9ad4:	add.w	sp, sp, #512	; 0x200
    9ad8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    9adc:	mov	r0, r4
    9ade:	blx	r2
    9ae0:	cmp	r0, #0
    9ae2:	beq.n	9ad2 <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    9ae4:	b.n	9a52 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    9ae6:	nop
    9ae8:	.word	0x113a0011
    9aec:	.word	0x00009879
    9af0:	.word	0x20001a3a
    9af4:	.word	0x20005c88
    9af8:	.word	0x20007ddd

00009afc <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9afc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b00:	ldrb	r4, [r0, #8]
    9b02:	sub.w	sp, sp, #512	; 0x200
    9b06:	mov	r7, r1
    9b08:	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    9b0a:	ands.w	r4, r4, #1
    9b0e:	beq.n	9b4c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    9b10:	tst.w	r2, #3
    9b14:	beq.n	9b24 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    9b16:	mov	r0, sp
    9b18:	mov	r1, r2
    9b1a:	mov.w	r2, #512	; 0x200
      ptr = aligned;
    9b1e:	mov	r8, r0
      memcpy(aligned, src, 512);
    9b20:	bl	9d30 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    9b24:	movs	r3, #1
    9b26:	mov	r2, r8
    9b28:	mov	r1, r7
    9b2a:	ldr	r0, [pc, #176]	; (9bdc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    9b2c:	bl	8e58 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9b30:	mov	r4, r0
    9b32:	cbnz	r0, 9b42 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    9b34:	ldr	r1, [pc, #168]	; (9be0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    9b36:	movs	r0, #13
  m_errorLine = line;
    9b38:	ldr	r3, [pc, #168]	; (9be4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    9b3a:	mov.w	r2, #1080	; 0x438
  m_errorCode = code;
    9b3e:	strb	r0, [r1, #0]
  m_errorLine = line;
    9b40:	str	r2, [r3, #0]
}
    9b42:	mov	r0, r4
    9b44:	add.w	sp, sp, #512	; 0x200
    9b48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    9b4c:	ldr	r5, [pc, #152]	; (9be8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    9b4e:	mov	r6, r0
    9b50:	ldrb	r3, [r5, #0]
    9b52:	cbnz	r3, 9ba0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9b54:	ldrb	r3, [r6, #9]
    9b56:	cmp	r3, #2
    9b58:	beq.n	9bae <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    9b5a:	ldr	r2, [r6, #0]
    9b5c:	ldr	r1, [pc, #140]	; (9bec <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    9b5e:	ldr	r2, [r2, #28]
    9b60:	cmp	r2, r1
    9b62:	bne.n	9bd2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    9b64:	ldrb	r2, [r5, #0]
    9b66:	cbnz	r2, 9bb6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    9b68:	cmp	r3, #0
    9b6a:	bne.n	9bc4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector)) {
    9b6c:	ldr	r3, [r6, #0]
    9b6e:	mov	r1, r7
    9b70:	mov	r0, r6
    9b72:	ldr	r3, [r3, #100]	; 0x64
    9b74:	blx	r3
    9b76:	cmp	r0, #0
    9b78:	beq.n	9b42 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    9b7a:	movs	r3, #2
      m_curSector = sector;
    9b7c:	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    9b7e:	strb	r3, [r6, #9]
    if (!writeData(src)) {
    9b80:	ldr	r3, [r6, #0]
    9b82:	mov	r1, r8
    9b84:	mov	r0, r6
    9b86:	ldr	r3, [r3, #96]	; 0x60
    9b88:	blx	r3
    9b8a:	cmp	r0, #0
    9b8c:	beq.n	9b42 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    9b8e:	ldr	r3, [r6, #4]
  return true;
    9b90:	mov	r4, r0
    m_curSector++;
    9b92:	adds	r3, #1
}
    9b94:	mov	r0, r4
    m_curSector++;
    9b96:	str	r3, [r6, #4]
}
    9b98:	add.w	sp, sp, #512	; 0x200
    9b9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ba0:	bl	8908 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    9ba4:	cmp	r0, #0
    9ba6:	beq.n	9b42 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9ba8:	ldrb	r3, [r6, #9]
    9baa:	cmp	r3, #2
    9bac:	bne.n	9b5a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    9bae:	ldr	r2, [r6, #4]
    9bb0:	cmp	r2, r7
    9bb2:	bne.n	9b5a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    9bb4:	b.n	9b80 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    9bb6:	bl	8908 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9bba:	cmp	r0, #0
    9bbc:	beq.n	9b42 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    9bbe:	ldrb	r3, [r6, #9]
    9bc0:	cmp	r3, #0
    9bc2:	beq.n	9b6c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    9bc4:	movs	r1, #1
    9bc6:	mov	r0, r6
    9bc8:	bl	97e0 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    9bcc:	cmp	r0, #0
    9bce:	beq.n	9b42 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    9bd0:	b.n	9b6c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    9bd2:	mov	r0, r6
    9bd4:	blx	r2
    9bd6:	cmp	r0, #0
    9bd8:	beq.n	9b42 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    9bda:	b.n	9b6c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    9bdc:	.word	0x183a0001
    9be0:	.word	0x20001a3a
    9be4:	.word	0x20005c88
    9be8:	.word	0x20007ddd
    9bec:	.word	0x00009879

00009bf0 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) && defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
    9bf0:	push	{r3, lr}
    9bf2:	mov	r3, r0
    9bf4:	ldr.w	r0, [r3], #4
    9bf8:	ldmia.w	r3, {r1, r2}
    9bfc:	bl	19cc <SPIClass::beginTransaction(SPISettings)>
    9c00:	pop	{r3, pc}
    9c02:	nop

00009c04 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    9c04:	sub	sp, #16
    9c06:	add.w	ip, sp, #16
    9c0a:	stmdb	ip, {r1, r2, r3}
    9c0e:	mov	r2, r0
  if (spiConfig.spiPort) {
    9c10:	cbz	r3, 9c1c <SdSpiArduinoDriver::begin(SdSpiConfig)+0x18>
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    9c12:	mov	r0, r3
    9c14:	str	r3, [r2, #0]
}
    9c16:	add	sp, #16
  m_spi->begin();
    9c18:	b.w	231c <SPIClass::begin()>
    m_spi = &SPI;
    9c1c:	ldr	r3, [pc, #8]	; (9c28 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
  m_spi->begin();
    9c1e:	mov	r0, r3
    9c20:	str	r3, [r2, #0]
}
    9c22:	add	sp, #16
  m_spi->begin();
    9c24:	b.w	231c <SPIClass::begin()>
    9c28:	.word	0x200057d0

00009c2c <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
    9c2c:	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    9c2e:	ldrb	r3, [r2, #19]
    9c30:	cbz	r3, 9c78 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    9c32:	lsls	r0, r3, #31
    9c34:	bpl.n	9c40 <SdSpiArduinoDriver::deactivate()+0x14>
    9c36:	ldr	r0, [r2, #40]	; 0x28
    9c38:	mov.w	r1, #3758153728	; 0xe000e000
    9c3c:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    9c40:	lsls	r1, r3, #30
    9c42:	bpl.n	9c4e <SdSpiArduinoDriver::deactivate()+0x22>
    9c44:	ldr	r0, [r2, #44]	; 0x2c
    9c46:	mov.w	r1, #3758153728	; 0xe000e000
    9c4a:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    9c4e:	lsls	r0, r3, #29
    9c50:	bpl.n	9c5c <SdSpiArduinoDriver::deactivate()+0x30>
    9c52:	ldr	r0, [r2, #48]	; 0x30
    9c54:	mov.w	r1, #3758153728	; 0xe000e000
    9c58:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    9c5c:	lsls	r1, r3, #28
    9c5e:	bpl.n	9c6a <SdSpiArduinoDriver::deactivate()+0x3e>
    9c60:	ldr	r0, [r2, #52]	; 0x34
    9c62:	mov.w	r1, #3758153728	; 0xe000e000
    9c66:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    9c6a:	lsls	r3, r3, #27
    9c6c:	bpl.n	9c78 <SdSpiArduinoDriver::deactivate()+0x4c>
    9c6e:	ldr	r2, [r2, #56]	; 0x38
    9c70:	mov.w	r3, #3758153728	; 0xe000e000
    9c74:	str.w	r2, [r3, #272]	; 0x110
    9c78:	bx	lr
    9c7a:	nop

00009c7c <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
    9c7c:	ldr	r0, [r0, #0]
    9c7e:	b.w	2558 <SPIClass::end()>
    9c82:	nop

00009c84 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9c84:	ldr	r2, [r0, #0]
		port().TDR = data;
    9c86:	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9c88:	ldr	r2, [r2, #0]
		port().TDR = data;
    9c8a:	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9c8c:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9c8e:	tst.w	r3, #2031616	; 0x1f0000
    9c92:	beq.n	9c8c <SdSpiArduinoDriver::receive()+0x8>
    9c94:	ldr	r0, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
    9c96:	uxtb	r0, r0
    9c98:	bx	lr
    9c9a:	nop

00009c9c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    9c9c:	push	{r4, r5, lr}
    9c9e:	mov	r4, r1
    9ca0:	sub	sp, #12
    9ca2:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    9ca4:	movs	r1, #255	; 0xff
    9ca6:	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    9ca8:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    9caa:	bl	dcd0 <memset>
		transfer(buf, buf, count);
    9cae:	ldr	r0, [r5, #0]
    9cb0:	ldr	r3, [sp, #4]
    9cb2:	mov	r2, r4
    9cb4:	mov	r1, r4
    9cb6:	bl	2550 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    9cba:	movs	r0, #0
    9cbc:	add	sp, #12
    9cbe:	pop	{r4, r5, pc}

00009cc0 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9cc0:	ldr	r3, [r0, #0]
    9cc2:	ldr	r2, [r3, #0]
		port().TDR = data;
    9cc4:	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9cc6:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9cc8:	tst.w	r3, #2031616	; 0x1f0000
    9ccc:	beq.n	9cc6 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    9cce:	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
    9cd0:	bx	lr
    9cd2:	nop

00009cd4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    9cd4:	subs	r3, r2, #1
    9cd6:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
    9cda:	push	{r4, r5, lr}
    9cdc:	mov	r4, r2
    9cde:	sub.w	sp, sp, #516	; 0x204
    9ce2:	mov	r5, r0
  if (0 < count && count <= 512) {
    9ce4:	bcc.n	9d0a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    9ce6:	cbz	r2, 9d04 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9ce8:	ldr	r3, [r0, #0]
    9cea:	subs	r0, r1, #1
    9cec:	ldr	r1, [r3, #0]
    9cee:	adds	r2, r0, r2
		port().TDR = data;
    9cf0:	ldrb.w	r3, [r0, #1]!
    9cf4:	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9cf6:	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9cf8:	tst.w	r3, #2031616	; 0x1f0000
    9cfc:	beq.n	9cf6 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    9cfe:	cmp	r0, r2
    9d00:	ldr	r3, [r1, #116]	; 0x74
    9d02:	bne.n	9cf0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    9d04:	add.w	sp, sp, #516	; 0x204
    9d08:	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    9d0a:	mov	r0, sp
    9d0c:	bl	9d30 <memcpy>
		transfer(buf, buf, count);
    9d10:	mov	r2, sp
    9d12:	mov	r3, r4
    9d14:	ldr	r0, [r5, #0]
    9d16:	mov	r1, r2
    9d18:	bl	2550 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    9d1c:	add.w	sp, sp, #516	; 0x204
    9d20:	pop	{r4, r5, pc}
    9d22:	nop

00009d24 <sdCsInit(unsigned char)>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
    9d24:	movs	r1, #1
    9d26:	b.w	b8dc <pinMode>
    9d2a:	nop

00009d2c <sdCsWrite(unsigned char, bool)>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) { digitalWrite(pin, level); }
    9d2c:	b.w	b864 <digitalWrite>

00009d30 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9d30:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9d32:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9d36:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9d3a:	bne.n	9e18 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9d3c:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9d3e:	bcc.n	9dc4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9d40:	ldr.w	r3, [r1], #4
    9d44:	str.w	r3, [r0], #4
    9d48:	ldr.w	r3, [r1], #4
    9d4c:	str.w	r3, [r0], #4
    9d50:	ldr.w	r3, [r1], #4
    9d54:	str.w	r3, [r0], #4
    9d58:	ldr.w	r3, [r1], #4
    9d5c:	str.w	r3, [r0], #4
    9d60:	ldr.w	r3, [r1], #4
    9d64:	str.w	r3, [r0], #4
    9d68:	ldr.w	r3, [r1], #4
    9d6c:	str.w	r3, [r0], #4
    9d70:	ldr.w	r3, [r1], #4
    9d74:	str.w	r3, [r0], #4
    9d78:	ldr.w	r3, [r1], #4
    9d7c:	str.w	r3, [r0], #4
    9d80:	ldr.w	r3, [r1], #4
    9d84:	str.w	r3, [r0], #4
    9d88:	ldr.w	r3, [r1], #4
    9d8c:	str.w	r3, [r0], #4
    9d90:	ldr.w	r3, [r1], #4
    9d94:	str.w	r3, [r0], #4
    9d98:	ldr.w	r3, [r1], #4
    9d9c:	str.w	r3, [r0], #4
    9da0:	ldr.w	r3, [r1], #4
    9da4:	str.w	r3, [r0], #4
    9da8:	ldr.w	r3, [r1], #4
    9dac:	str.w	r3, [r0], #4
    9db0:	ldr.w	r3, [r1], #4
    9db4:	str.w	r3, [r0], #4
    9db8:	ldr.w	r3, [r1], #4
    9dbc:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9dc0:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9dc2:	bcs.n	9d40 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9dc4:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9dc6:	bcc.n	9dec <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9dc8:	ldr.w	r3, [r1], #4
    9dcc:	str.w	r3, [r0], #4
    9dd0:	ldr.w	r3, [r1], #4
    9dd4:	str.w	r3, [r0], #4
    9dd8:	ldr.w	r3, [r1], #4
    9ddc:	str.w	r3, [r0], #4
    9de0:	ldr.w	r3, [r1], #4
    9de4:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9de8:	subs	r2, #16
	bhs	.Lmid_block_loop
    9dea:	bcs.n	9dc8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9dec:	adds	r2, #12
	blo	.Lcopy_less_than_4
    9dee:	bcc.n	9dfc <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9df0:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9df4:	str.w	r3, [r0], #4
	subs	r2, #4
    9df8:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9dfa:	bcs.n	9df0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9dfc:	adds	r2, #4
	beq	.Ldone
    9dfe:	beq.n	9e12 <memcpy+0xe2>

	lsls	r2, r2, #31
    9e00:	lsls	r2, r2, #31
	itt ne
    9e02:	itt	ne
	ldrbne  r3, [r1], #1
    9e04:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9e08:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9e0c:	bcc.n	9e12 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    9e0e:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9e10:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9e12:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9e14:	bx	lr
    9e16:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    9e18:	cmp	r2, #8
	blo	.Lbyte_copy
    9e1a:	bcc.n	9e44 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9e1c:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9e1e:	beq.n	9d3c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9e20:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9e24:	beq.n	9d3c <memcpy+0xc>

	rsb	r3, #4
    9e26:	rsb	r3, r3, #4
	subs	r2, r3
    9e2a:	subs	r2, r2, r3

	lsls    r3, r3, #31
    9e2c:	lsls	r3, r3, #31
	itt ne
    9e2e:	itt	ne
	ldrbne  r3, [r1], #1
    9e30:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9e34:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9e38:	bcc.n	9d3c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    9e3a:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    9e3e:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9e42:	b.n	9d3c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9e44:	subs	r2, #4
	blo	.Lcopy_less_than_4
    9e46:	bcc.n	9dfc <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9e48:	subs	r2, #1
	ldrb    r3, [r1], #1
    9e4a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9e4e:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9e52:	bcs.n	9e48 <memcpy+0x118>

	ldrb	r3, [r1]
    9e54:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9e56:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9e58:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9e5a:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9e5c:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9e5e:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9e60:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9e62:	bx	lr

00009e64 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9e64:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9e66:	ldr	r4, [pc, #80]	; (9eb8 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9e68:	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9e6c:	ldr	r6, [pc, #76]	; (9ebc <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9e6e:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9e72:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9e76:	ldr	r7, [pc, #72]	; (9ec0 <rx_queue_transfer+0x5c>)
    9e78:	add.w	r6, r6, r0, lsl #5
{
    9e7c:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9e7e:	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9e82:	mov	r1, r4
    9e84:	ldrh	r2, [r7, #0]
    9e86:	mov	r0, r6
    9e88:	bl	b3b8 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    9e8c:	ldrh	r3, [r7, #0]
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    9e8e:	add	r3, r4
	asm volatile("": : :"memory");
	asm("dsb");
    9e90:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    9e94:	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    9e98:	adds	r4, #32
	} while (location < end_addr);
    9e9a:	cmp	r3, r4
    9e9c:	bhi.n	9e94 <rx_queue_transfer+0x30>
	asm("dsb");
    9e9e:	dsb	sy
	asm("isb");
    9ea2:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    9ea6:	movs	r0, #3
    9ea8:	mov	r1, r6
    9eaa:	bl	b410 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9eae:	mov.w	r3, #131072	; 0x20000
    9eb2:	str.w	r3, [r5, #268]	; 0x10c
}
    9eb6:	pop	{r3, r4, r5, r6, r7, pc}
    9eb8:	.word	0x20001f20
    9ebc:	.word	0x20002f20
    9ec0:	.word	0x20007dce

00009ec4 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9ec4:	ldr	r3, [pc, #144]	; (9f58 <rx_event+0x94>)
{
    9ec6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9eca:	ldrh	r4, [r3, #0]
    9ecc:	ldr	r3, [r0, #4]
	int i = t->callback_param;
    9ece:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9ed0:	ubfx	r3, r3, #16, #15
    9ed4:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    9ed6:	cmp	r4, #0
    9ed8:	ble.n	9f24 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    9eda:	ldr	r1, [pc, #128]	; (9f5c <rx_event+0x98>)
		if (head != rx_tail) {
    9edc:	ldr	r0, [pc, #128]	; (9f60 <rx_event+0x9c>)
		uint32_t head = rx_head;
    9ede:	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    9ee0:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    9ee2:	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    9ee4:	ldr	r6, [pc, #124]	; (9f64 <rx_event+0xa0>)
		if (head != rx_tail) {
    9ee6:	cmp	r2, r0
			uint32_t ii = rx_list[head];
    9ee8:	ldr	r0, [pc, #124]	; (9f68 <rx_event+0xa4>)
		if (head != rx_tail) {
    9eea:	beq.n	9efc <rx_event+0x38>
			uint32_t ii = rx_list[head];
    9eec:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    9ef0:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    9ef4:	rsb	r2, r7, #512	; 0x200
    9ef8:	cmp	r4, r2
    9efa:	bls.n	9f2e <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    9efc:	adds	r3, #1
		rx_index[i] = 0;
    9efe:	movs	r2, #0
		rx_count[i] = len;
    9f00:	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    9f04:	cmp	r3, #8
		rx_index[i] = 0;
    9f06:	ldr	r6, [pc, #100]	; (9f6c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    9f08:	it	hi
    9f0a:	movhi	r3, r2
		rx_index[i] = 0;
    9f0c:	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    9f10:	it	ls
    9f12:	uxtbls	r2, r3
		rx_list[head] = i;
    9f14:	strb	r5, [r0, r3]
		rx_available += len;
    9f16:	ldr	r3, [pc, #88]	; (9f70 <rx_event+0xac>)
		rx_head = head;
    9f18:	strb	r2, [r1, #0]
		rx_available += len;
    9f1a:	ldr	r2, [r3, #0]
    9f1c:	add	r4, r2
    9f1e:	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    9f20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    9f24:	mov	r0, r5
}
    9f26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    9f2a:	b.w	9e64 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9f2e:	add.w	r0, r7, r8, lsl #9
    9f32:	ldr	r1, [pc, #64]	; (9f74 <rx_event+0xb0>)
    9f34:	mov	r2, r4
				rx_count[ii] = count + len;
    9f36:	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9f38:	add	r0, r1
    9f3a:	add.w	r1, r1, r5, lsl #9
    9f3e:	bl	9d30 <memcpy>
				rx_available += len;
    9f42:	ldr	r2, [pc, #44]	; (9f70 <rx_event+0xac>)
				rx_queue_transfer(i);
    9f44:	mov	r0, r5
				rx_count[ii] = count + len;
    9f46:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    9f4a:	ldr	r3, [r2, #0]
    9f4c:	add	r3, r4
}
    9f4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    9f52:	str	r3, [r2, #0]
				rx_queue_transfer(i);
    9f54:	b.w	9e64 <rx_queue_transfer>
    9f58:	.word	0x20007dce
    9f5c:	.word	0x20007de9
    9f60:	.word	0x20007deb
    9f64:	.word	0x20007d0c
    9f68:	.word	0x20007d44
    9f6c:	.word	0x20007d28
    9f70:	.word	0x20007d04
    9f74:	.word	0x20001f20

00009f78 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    9f78:	ldr	r3, [pc, #116]	; (9ff0 <usb_serial_flush_callback+0x78>)
    9f7a:	ldrb	r2, [r3, #0]
    9f7c:	cmp	r2, #0
    9f7e:	bne.n	9fee <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    9f80:	and.w	r3, r2, #255	; 0xff
    9f84:	ldr	r2, [pc, #108]	; (9ff4 <usb_serial_flush_callback+0x7c>)
    9f86:	ldrb	r2, [r2, #0]
    9f88:	cbz	r2, 9fee <usb_serial_flush_callback+0x76>
{
    9f8a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    9f8e:	ldr	r5, [pc, #104]	; (9ff8 <usb_serial_flush_callback+0x80>)
    9f90:	ldrh	r2, [r5, #0]
    9f92:	cbz	r2, 9fea <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9f94:	ldr	r6, [pc, #100]	; (9ffc <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    9f96:	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    9f9a:	ldr	r7, [pc, #100]	; (a000 <usb_serial_flush_callback+0x88>)
    9f9c:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9f9e:	ldr	r4, [pc, #100]	; (a004 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    9fa0:	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9fa4:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9fa8:	mov	r2, r8
    9faa:	mov	r0, r7
    9fac:	mov	r1, r4
    9fae:	bl	b3b8 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    9fb2:	add.w	r2, r4, r8
	asm volatile("": : :"memory");
	asm("dsb");
    9fb6:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    9fba:	mov.w	r3, #3758153728	; 0xe000e000
    9fbe:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    9fc2:	adds	r4, #32
	} while (location < end_addr);
    9fc4:	cmp	r2, r4
    9fc6:	bhi.n	9fbe <usb_serial_flush_callback+0x46>
	asm("dsb");
    9fc8:	dsb	sy
	asm("isb");
    9fcc:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9fd0:	movs	r0, #3
    9fd2:	mov	r1, r7
    9fd4:	bl	b3e8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9fd8:	ldrb	r3, [r6, #0]
    9fda:	adds	r3, #1
    9fdc:	uxtb	r3, r3
    9fde:	cmp	r3, #3
    9fe0:	it	hi
    9fe2:	movhi	r3, #0
    9fe4:	strb	r3, [r6, #0]
	tx_available = 0;
    9fe6:	movs	r3, #0
    9fe8:	strh	r3, [r5, #0]
}
    9fea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9fee:	bx	lr
    9ff0:	.word	0x20007df2
    9ff4:	.word	0x20007df9
    9ff8:	.word	0x20007dd2
    9ffc:	.word	0x20007df0
    a000:	.word	0x20003120
    a004:	.word	0x20003240

0000a008 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    a008:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a00c:	sub	sp, #20
	while (size > 0) {
    a00e:	strd	r1, r0, [sp, #4]
    a012:	cmp	r1, #0
    a014:	beq.w	a196 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    a018:	movs	r3, #0
    a01a:	ldr	r4, [pc, #384]	; (a19c <usb_serial_write.part.0+0x194>)
    a01c:	ldr.w	r8, [pc, #408]	; a1b8 <usb_serial_write.part.0+0x1b0>
    a020:	ldr.w	sl, [pc, #408]	; a1bc <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    a024:	ldr	r7, [pc, #376]	; (a1a0 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    a026:	str	r3, [sp, #0]
		tx_noautoflush = 1;
    a028:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    a02a:	ldr	r2, [pc, #376]	; (a1a4 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    a02c:	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    a02e:	ldr	r3, [pc, #376]	; (a1a8 <usb_serial_write.part.0+0x1a0>)
    a030:	ldrb	r1, [r3, #0]
		while (!tx_available) {
    a032:	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    a036:	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    a03a:	cmp	r3, #0
    a03c:	bne.w	a18e <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    a040:	mov	r6, r3
		int waiting=0;
    a042:	mov	r5, r3
			tx_noautoflush = 0;
    a044:	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    a046:	mov	r0, r9
    a048:	bl	b42c <usb_transfer_status>
			if (!(status & 0x80)) {
    a04c:	ands.w	r0, r0, #128	; 0x80
    a050:	beq.w	a16c <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    a054:	dsb	sy
			if (transmit_previous_timeout) return sent;
    a058:	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    a05c:	strb.w	fp, [r4]
			if (!waiting) {
    a060:	cbnz	r5, a064 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    a062:	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    a064:	cmp	r3, #0
    a066:	bne.n	a164 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a068:	ldr	r3, [r7, #0]
    a06a:	subs	r3, r3, r6
    a06c:	cmp	r3, #120	; 0x78
    a06e:	bhi.w	a180 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    a072:	ldr	r3, [pc, #312]	; (a1ac <usb_serial_write.part.0+0x1a4>)
    a074:	ldrb	r3, [r3, #0]
    a076:	cmp	r3, #0
    a078:	beq.n	a164 <usb_serial_write.part.0+0x15c>
			yield();
    a07a:	bl	bd40 <yield>
			tx_noautoflush = 1;
    a07e:	movs	r2, #1
		while (!tx_available) {
    a080:	ldrh.w	r3, [r8]
    a084:	mov	r5, r2
			tx_noautoflush = 1;
    a086:	strb	r2, [r4, #0]
		while (!tx_available) {
    a088:	cmp	r3, #0
    a08a:	beq.n	a046 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a08c:	ldr	r2, [pc, #280]	; (a1a8 <usb_serial_write.part.0+0x1a0>)
    a08e:	rsb	r0, r3, #2048	; 0x800
    a092:	ldrb	r1, [r2, #0]
    a094:	mov	r2, r3
    a096:	add.w	r0, r0, r1, lsl #11
    a09a:	ldr	r5, [pc, #276]	; (a1b0 <usb_serial_write.part.0+0x1a8>)
    a09c:	lsls	r1, r1, #11
    a09e:	add	r0, r5
		if (size >= tx_available) {
    a0a0:	ldr	r5, [sp, #4]
    a0a2:	cmp	r5, r2
    a0a4:	bcs.n	a0d6 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    a0a6:	str	r3, [sp, #12]
    a0a8:	ldrd	r5, r1, [sp, #4]
    a0ac:	mov	r2, r5
    a0ae:	bl	9d30 <memcpy>
			tx_available -= size;
    a0b2:	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a0b4:	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    a0b8:	subs	r3, r3, r5
    a0ba:	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a0be:	ldr	r3, [pc, #244]	; (a1b4 <usb_serial_write.part.0+0x1ac>)
    a0c0:	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    a0c4:	dsb	sy
			sent += size;
    a0c8:	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    a0ca:	movs	r3, #0
			sent += size;
    a0cc:	add	r0, r5
		tx_noautoflush = 0;
    a0ce:	strb	r3, [r4, #0]
}
    a0d0:	add	sp, #20
    a0d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a0d6:	ldr	r3, [pc, #216]	; (a1b0 <usb_serial_write.part.0+0x1a8>)
    a0d8:	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    a0da:	ldr	r1, [sp, #8]
    a0dc:	bl	9d30 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a0e0:	movs	r3, #0
    a0e2:	mov.w	r2, #2048	; 0x800
    a0e6:	mov	r1, r5
    a0e8:	mov	r0, r9
    a0ea:	bl	b3b8 <usb_prepare_transfer>
	asm("dsb");
    a0ee:	dsb	sy
    a0f2:	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    a0f6:	add.w	r3, r5, #2048	; 0x800
    a0fa:	cmp	r3, r2
    a0fc:	ite	cc
    a0fe:	movcc	r3, #1
    a100:	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    a102:	mov.w	r2, #3758153728	; 0xe000e000
    a106:	add.w	r3, r5, r3, lsl #5
    a10a:	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    a10e:	adds	r5, #32
	} while (location < end_addr);
    a110:	cmp	r3, r5
    a112:	bne.n	a10a <usb_serial_write.part.0+0x102>
	asm("dsb");
    a114:	dsb	sy
	asm("isb");
    a118:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a11c:	movs	r0, #3
    a11e:	mov	r1, r9
    a120:	bl	b3e8 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a124:	ldr	r2, [pc, #128]	; (a1a8 <usb_serial_write.part.0+0x1a0>)
    a126:	ldrb	r3, [r2, #0]
    a128:	adds	r3, #1
    a12a:	uxtb	r3, r3
    a12c:	cmp	r3, #3
    a12e:	itt	hi
    a130:	movhi	r3, #0
    a132:	ldrhi	r2, [pc, #116]	; (a1a8 <usb_serial_write.part.0+0x1a0>)
    a134:	strb	r3, [r2, #0]
			size -= tx_available;
    a136:	ldrh.w	r3, [r8]
    a13a:	ldr	r2, [sp, #4]
    a13c:	subs	r1, r2, r3
			sent += tx_available;
    a13e:	ldr	r2, [sp, #0]
    a140:	add	r2, r3
			size -= tx_available;
    a142:	str	r1, [sp, #4]
			sent += tx_available;
    a144:	str	r2, [sp, #0]
			data += tx_available;
    a146:	ldr	r2, [sp, #8]
    a148:	add	r2, r3
			tx_available = 0;
    a14a:	movs	r3, #0
			data += tx_available;
    a14c:	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    a14e:	ldr	r2, [pc, #100]	; (a1b4 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    a150:	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    a154:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    a158:	dsb	sy
		tx_noautoflush = 0;
    a15c:	strb	r3, [r4, #0]
	while (size > 0) {
    a15e:	cmp	r1, #0
    a160:	bne.w	a028 <usb_serial_write.part.0+0x20>
	return sent;
    a164:	ldr	r0, [sp, #0]
}
    a166:	add	sp, #20
    a168:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    a16c:	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a170:	ldr	r3, [pc, #52]	; (a1a8 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    a172:	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a176:	ldrb	r1, [r3, #0]
				break;
    a178:	mov	r3, r2
				tx_available = TX_SIZE;
    a17a:	strh.w	r2, [r8]
				break;
    a17e:	b.n	a096 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    a180:	movs	r3, #1
				return sent;
    a182:	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    a184:	strb.w	r3, [sl]
}
    a188:	add	sp, #20
    a18a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a18e:	mov	r2, r3
    a190:	rsb	r0, r3, #2048	; 0x800
    a194:	b.n	a096 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    a196:	ldr	r0, [sp, #4]
	return sent;
    a198:	b.n	a166 <usb_serial_write.part.0+0x15e>
    a19a:	nop
    a19c:	.word	0x20007df2
    a1a0:	.word	0x20007d70
    a1a4:	.word	0x20003120
    a1a8:	.word	0x20007df0
    a1ac:	.word	0x20007df9
    a1b0:	.word	0x20003240
    a1b4:	.word	0x402e0000
    a1b8:	.word	0x20007dd2
    a1bc:	.word	0x20007dee

0000a1c0 <usb_serial_reset>:
}
    a1c0:	bx	lr
    a1c2:	nop

0000a1c4 <usb_serial_configure>:
	if (usb_high_speed) {
    a1c4:	ldr	r3, [pc, #168]	; (a270 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a1c6:	movs	r1, #0
    a1c8:	movs	r2, #128	; 0x80
    a1ca:	ldr	r0, [pc, #168]	; (a274 <usb_serial_configure+0xb0>)
{
    a1cc:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    a1ce:	ldrb	r3, [r3, #0]
	tx_head = 0;
    a1d0:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    a1d2:	ldr	r5, [pc, #164]	; (a278 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    a1d4:	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    a1d6:	ldr	r6, [pc, #164]	; (a27c <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    a1d8:	ite	eq
    a1da:	moveq	r3, #64	; 0x40
    a1dc:	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    a1e0:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a1e2:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a1e4:	bl	dcd0 <memset>
	tx_head = 0;
    a1e8:	ldr	r2, [pc, #148]	; (a280 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a1ea:	mov	r1, r4
	tx_available = 0;
    a1ec:	ldr	r3, [pc, #148]	; (a284 <usb_serial_configure+0xc0>)
	tx_head = 0;
    a1ee:	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a1f0:	mov.w	r2, #256	; 0x100
    a1f4:	ldr	r0, [pc, #144]	; (a288 <usb_serial_configure+0xc4>)
	tx_available = 0;
    a1f6:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a1f8:	bl	dcd0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a1fc:	ldr	r2, [pc, #140]	; (a28c <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a1fe:	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    a200:	ldr	r3, [pc, #140]	; (a290 <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a202:	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    a204:	strd	r4, r4, [r2]
    a208:	strd	r4, r4, [r2, #8]
	rx_head = 0;
    a20c:	ldr	r2, [pc, #132]	; (a294 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    a20e:	strd	r4, r4, [r3]
	rx_head = 0;
    a212:	strb	r4, [r2, #0]
	rx_available = 0;
    a214:	ldr	r2, [pc, #128]	; (a298 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    a216:	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    a21a:	ldr	r3, [pc, #128]	; (a29c <usb_serial_configure+0xd8>)
    a21c:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a21e:	mov	r3, r4
	rx_available = 0;
    a220:	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a222:	mov	r2, r4
    a224:	bl	b284 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a228:	mov	r2, r4
    a22a:	ldrh	r1, [r6, #0]
    a22c:	movs	r0, #3
    a22e:	ldr	r3, [pc, #112]	; (a2a0 <usb_serial_configure+0xdc>)
    a230:	bl	b220 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a234:	mov	r3, r4
    a236:	movs	r2, #1
    a238:	ldrh	r1, [r5, #0]
    a23a:	movs	r0, #3
    a23c:	bl	b284 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a240:	mov	r0, r4
    a242:	adds	r4, #1
    a244:	bl	9e64 <rx_queue_transfer>
    a248:	cmp	r4, #8
    a24a:	bne.n	a240 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    a24c:	ldr	r3, [pc, #84]	; (a2a4 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    a24e:	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    a250:	ldr	r0, [pc, #84]	; (a2a8 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    a252:	movs	r1, #0
	usb_timer0_callback = callback;
    a254:	ldr	r4, [pc, #84]	; (a2ac <usb_serial_configure+0xe8>)
    a256:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    a258:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a25c:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a260:	ldr.w	r2, [r3, #328]	; 0x148
    a264:	orr.w	r2, r2, #16777216	; 0x1000000
    a268:	str.w	r2, [r3, #328]	; 0x148
}
    a26c:	pop	{r4, r5, r6, pc}
    a26e:	nop
    a270:	.word	0x20007dfa
    a274:	.word	0x20003120
    a278:	.word	0x20007dd6
    a27c:	.word	0x20007dce
    a280:	.word	0x20007df0
    a284:	.word	0x20007dd2
    a288:	.word	0x20002f20
    a28c:	.word	0x20007d0c
    a290:	.word	0x20007d28
    a294:	.word	0x20007de9
    a298:	.word	0x20007d04
    a29c:	.word	0x20007deb
    a2a0:	.word	0x00009ec5
    a2a4:	.word	0x402e0000
    a2a8:	.word	0x20007db0
    a2ac:	.word	0x00009f79

0000a2b0 <usb_serial_read>:
{
    a2b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a2b4:	mov.w	r3, #3758153728	; 0xe000e000
    a2b8:	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    a2bc:	ldr.w	sl, [pc, #200]	; a388 <usb_serial_read+0xd8>
{
    a2c0:	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a2c2:	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    a2c6:	mov	fp, r1
	uint32_t tail = rx_tail;
    a2c8:	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    a2cc:	cmp	r1, #0
    a2ce:	beq.n	a370 <usb_serial_read+0xc0>
    a2d0:	mov	r8, r0
    a2d2:	uxtb	r4, r4
	uint32_t count=0;
    a2d4:	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    a2d6:	ldr.w	r9, [pc, #180]	; a38c <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    a2da:	ldr	r3, [pc, #152]	; (a374 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a2dc:	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a2e0:	ldr	r1, [pc, #148]	; (a378 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    a2e2:	ldrb	r3, [r3, #0]
    a2e4:	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    a2e6:	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    a2ea:	beq.n	a36c <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    a2ec:	cmp	r4, #9
		uint32_t i = rx_list[tail];
    a2ee:	ldr	r3, [pc, #140]	; (a37c <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a2f0:	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    a2f2:	it	cs
    a2f4:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a2f6:	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a2f8:	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a2fc:	add.w	r3, ip, r6, lsl #9
    a300:	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    a302:	ldr	r3, [pc, #124]	; (a380 <usb_serial_read+0xd0>)
    a304:	ldrh.w	r5, [r3, r6, lsl #1]
    a308:	sub.w	r5, r5, ip
		if (avail > len) {
    a30c:	cmp	r2, r5
    a30e:	bcs.n	a34a <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a310:	add.w	ip, ip, r6, lsl #9
    a314:	ldr	r1, [pc, #96]	; (a378 <usb_serial_read+0xc8>)
			rx_available -= len;
    a316:	ldr	r4, [pc, #108]	; (a384 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a318:	add	r1, ip
    a31a:	str	r2, [sp, #4]
    a31c:	bl	9d30 <memcpy>
			rx_available -= len;
    a320:	ldr	r1, [r4, #0]
			rx_index[i] += len;
    a322:	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    a326:	mov	r0, fp
			rx_index[i] += len;
    a328:	ldr	r2, [sp, #4]
			rx_available -= len;
    a32a:	sub.w	r1, r1, fp
			rx_index[i] += len;
    a32e:	add	r2, r5
			rx_available -= len;
    a330:	add	r1, r7
			rx_index[i] += len;
    a332:	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    a336:	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a338:	mov.w	r3, #3758153728	; 0xe000e000
    a33c:	mov.w	r2, #131072	; 0x20000
    a340:	str.w	r2, [r3, #268]	; 0x10c
}
    a344:	add	sp, #12
    a346:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a34a:	mov	r2, r5
			count += avail;
    a34c:	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a34e:	bl	9d30 <memcpy>
			rx_available -= avail;
    a352:	ldr	r1, [pc, #48]	; (a384 <usb_serial_read+0xd4>)
			rx_tail = tail;
    a354:	uxtb	r3, r4
			rx_queue_transfer(i);
    a356:	mov	r0, r6
			rx_available -= avail;
    a358:	ldr	r2, [r1, #0]
			p += avail;
    a35a:	add	r8, r5
			rx_available -= avail;
    a35c:	subs	r2, r2, r5
    a35e:	str	r2, [r1, #0]
			rx_tail = tail;
    a360:	strb.w	r3, [sl]
			rx_queue_transfer(i);
    a364:	bl	9e64 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    a368:	cmp	fp, r7
    a36a:	bhi.n	a2da <usb_serial_read+0x2a>
	return count;
    a36c:	mov	r0, r7
    a36e:	b.n	a338 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    a370:	mov	r0, r1
    a372:	b.n	a338 <usb_serial_read+0x88>
    a374:	.word	0x20007de9
    a378:	.word	0x20001f20
    a37c:	.word	0x20007d44
    a380:	.word	0x20007d0c
    a384:	.word	0x20007d04
    a388:	.word	0x20007deb
    a38c:	.word	0x20007d28

0000a390 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    a390:	ldr	r3, [pc, #44]	; (a3c0 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    a392:	ldr	r2, [pc, #48]	; (a3c4 <usb_serial_peekchar+0x34>)
    a394:	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    a396:	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    a398:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a39a:	cmp	r2, r1
    a39c:	beq.n	a3ba <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a39e:	adds	r3, #1
	uint32_t i = rx_list[tail];
    a3a0:	ldr	r0, [pc, #36]	; (a3c8 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a3a2:	ldr	r2, [pc, #40]	; (a3cc <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    a3a4:	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a3a6:	ldr	r1, [pc, #40]	; (a3d0 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    a3a8:	it	cs
    a3aa:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a3ac:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a3ae:	ldrh.w	r1, [r1, r3, lsl #1]
    a3b2:	add.w	r3, r2, r3, lsl #9
    a3b6:	ldrb	r0, [r3, r1]
    a3b8:	bx	lr
	if (tail == rx_head) return -1;
    a3ba:	mov.w	r0, #4294967295
}
    a3be:	bx	lr
    a3c0:	.word	0x20007de9
    a3c4:	.word	0x20007deb
    a3c8:	.word	0x20007d44
    a3cc:	.word	0x20001f20
    a3d0:	.word	0x20007d28

0000a3d4 <usb_serial_available>:
	uint32_t n = rx_available;
    a3d4:	ldr	r3, [pc, #16]	; (a3e8 <usb_serial_available+0x14>)
{
    a3d6:	push	{r4, lr}
	uint32_t n = rx_available;
    a3d8:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a3da:	cbz	r4, a3e0 <usb_serial_available+0xc>
}
    a3dc:	mov	r0, r4
    a3de:	pop	{r4, pc}
	if (n == 0) yield();
    a3e0:	bl	bd40 <yield>
}
    a3e4:	mov	r0, r4
    a3e6:	pop	{r4, pc}
    a3e8:	.word	0x20007d04

0000a3ec <usb_serial_flush_input>:
{
    a3ec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    a3f0:	ldr	r6, [pc, #80]	; (a444 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    a3f2:	ldr	r5, [pc, #84]	; (a448 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    a3f4:	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    a3f6:	ldrb	r2, [r5, #0]
    a3f8:	cmp	r3, r2
    a3fa:	beq.n	a440 <usb_serial_flush_input+0x54>
    a3fc:	uxtb	r4, r3
    a3fe:	ldr.w	r9, [pc, #80]	; a450 <usb_serial_flush_input+0x64>
    a402:	ldr.w	fp, [pc, #80]	; a454 <usb_serial_flush_input+0x68>
    a406:	ldr.w	r8, [pc, #80]	; a458 <usb_serial_flush_input+0x6c>
    a40a:	ldr	r7, [pc, #64]	; (a44c <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    a40c:	adds	r4, #1
    a40e:	cmp	r4, #8
		rx_tail = tail;
    a410:	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    a414:	bls.n	a41a <usb_serial_flush_input+0x2e>
    a416:	movs	r4, #0
    a418:	mov	sl, r4
		uint32_t i = rx_list[tail];
    a41a:	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a41e:	ldr.w	r3, [fp]
    a422:	ldrh.w	r2, [r8, r0, lsl #1]
    a426:	ldrh.w	r1, [r7, r0, lsl #1]
    a42a:	subs	r2, r2, r1
    a42c:	subs	r3, r3, r2
    a42e:	str.w	r3, [fp]
		rx_queue_transfer(i);
    a432:	bl	9e64 <rx_queue_transfer>
		rx_tail = tail;
    a436:	strb.w	sl, [r6]
	while (tail != rx_head) {
    a43a:	ldrb	r3, [r5, #0]
    a43c:	cmp	r3, r4
    a43e:	bne.n	a40c <usb_serial_flush_input+0x20>
}
    a440:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a444:	.word	0x20007deb
    a448:	.word	0x20007de9
    a44c:	.word	0x20007d28
    a450:	.word	0x20007d44
    a454:	.word	0x20007d04
    a458:	.word	0x20007d0c

0000a45c <usb_serial_getchar>:
{
    a45c:	push	{lr}
    a45e:	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    a460:	movs	r1, #1
    a462:	add.w	r0, sp, #7
    a466:	bl	a2b0 <usb_serial_read>
    a46a:	cbz	r0, a476 <usb_serial_getchar+0x1a>
    a46c:	ldrb.w	r0, [sp, #7]
}
    a470:	add	sp, #12
    a472:	ldr.w	pc, [sp], #4
	return -1;
    a476:	mov.w	r0, #4294967295
    a47a:	b.n	a470 <usb_serial_getchar+0x14>

0000a47c <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    a47c:	ldr	r3, [pc, #36]	; (a4a4 <usb_serial_putchar+0x28>)
{
    a47e:	push	{lr}
    a480:	sub	sp, #12
	if (!usb_configuration) return 0;
    a482:	ldrb	r3, [r3, #0]
{
    a484:	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    a488:	cbz	r3, a49a <usb_serial_putchar+0x1e>
    a48a:	movs	r1, #1
    a48c:	add.w	r0, sp, #7
    a490:	bl	a008 <usb_serial_write.part.0>
}
    a494:	add	sp, #12
    a496:	ldr.w	pc, [sp], #4
    a49a:	and.w	r0, r3, #255	; 0xff
    a49e:	add	sp, #12
    a4a0:	ldr.w	pc, [sp], #4
    a4a4:	.word	0x20007df9

0000a4a8 <usb_serial_write>:
	if (!usb_configuration) return 0;
    a4a8:	ldr	r3, [pc, #16]	; (a4bc <usb_serial_write+0x14>)
    a4aa:	ldrb	r3, [r3, #0]
    a4ac:	and.w	r2, r3, #255	; 0xff
    a4b0:	cbz	r3, a4b6 <usb_serial_write+0xe>
    a4b2:	b.w	a008 <usb_serial_write.part.0>
}
    a4b6:	mov	r0, r2
    a4b8:	bx	lr
    a4ba:	nop
    a4bc:	.word	0x20007df9

0000a4c0 <usb_serial_write_buffer_free>:
{
    a4c0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a4c4:	movs	r4, #0
	tx_noautoflush = 1;
    a4c6:	ldr.w	r8, [pc, #68]	; a50c <usb_serial_write_buffer_free+0x4c>
    a4ca:	movs	r3, #1
    a4cc:	ldr	r5, [pc, #52]	; (a504 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a4ce:	mov	r7, r4
    a4d0:	ldr	r6, [pc, #52]	; (a508 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    a4d2:	strb.w	r3, [r8]
		if (i == tx_head) continue;
    a4d6:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a4d8:	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    a4da:	adds	r5, #32
		if (i == tx_head) continue;
    a4dc:	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    a4de:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a4e2:	beq.n	a4f0 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a4e4:	bl	b42c <usb_transfer_status>
    a4e8:	lsls	r3, r0, #24
    a4ea:	it	pl
    a4ec:	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a4f0:	cmp	r4, #4
    a4f2:	bne.n	a4d6 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    a4f4:	dsb	sy
	tx_noautoflush = 0;
    a4f8:	movs	r3, #0
}
    a4fa:	mov	r0, r7
	tx_noautoflush = 0;
    a4fc:	strb.w	r3, [r8]
}
    a500:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a504:	.word	0x20003120
    a508:	.word	0x20007df0
    a50c:	.word	0x20007df2

0000a510 <usb_serial_flush_output>:
{
    a510:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a514:	ldr	r3, [pc, #116]	; (a58c <usb_serial_flush_output+0x7c>)
    a516:	ldrb	r3, [r3, #0]
    a518:	cbz	r3, a520 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    a51a:	ldr	r5, [pc, #116]	; (a590 <usb_serial_flush_output+0x80>)
    a51c:	ldrh	r2, [r5, #0]
    a51e:	cbnz	r2, a524 <usb_serial_flush_output+0x14>
}
    a520:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    a524:	ldr	r6, [pc, #108]	; (a594 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a526:	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a52a:	ldr	r1, [pc, #108]	; (a598 <usb_serial_flush_output+0x88>)
    a52c:	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a52e:	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a530:	ldr	r4, [pc, #104]	; (a59c <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a532:	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    a536:	ldr	r7, [pc, #104]	; (a5a0 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a538:	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    a53c:	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a53e:	mov	r0, r8
	tx_noautoflush = 1;
    a540:	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a542:	mov	r1, r4
    a544:	movs	r3, #0
    a546:	bl	b3b8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    a54a:	add.w	r2, r4, r9
	asm("dsb");
    a54e:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a552:	mov.w	r3, #3758153728	; 0xe000e000
    a556:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a55a:	adds	r4, #32
	} while (location < end_addr);
    a55c:	cmp	r2, r4
    a55e:	bhi.n	a556 <usb_serial_flush_output+0x46>
	asm("dsb");
    a560:	dsb	sy
	asm("isb");
    a564:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a568:	movs	r0, #3
    a56a:	mov	r1, r8
    a56c:	bl	b3e8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a570:	ldrb	r3, [r6, #0]
    a572:	adds	r3, #1
    a574:	uxtb	r3, r3
    a576:	cmp	r3, #3
    a578:	it	hi
    a57a:	movhi	r3, #0
    a57c:	strb	r3, [r6, #0]
	tx_available = 0;
    a57e:	movs	r3, #0
    a580:	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    a582:	dsb	sy
	tx_noautoflush = 0;
    a586:	strb	r3, [r7, #0]
}
    a588:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a58c:	.word	0x20007df9
    a590:	.word	0x20007dd2
    a594:	.word	0x20007df0
    a598:	.word	0x20003120
    a59c:	.word	0x20003240
    a5a0:	.word	0x20007df2

0000a5a4 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a5a4:	ldr	r1, [pc, #648]	; (a830 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a5a6:	ldr	r3, [pc, #652]	; (a834 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    a5a8:	cmp	r0, r1
{
    a5aa:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    a5ae:	ldr	r4, [pc, #648]	; (a838 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a5b0:	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a5b2:	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a5b4:	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    a5b8:	bls.n	a5f2 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a5ba:	ldr	r3, [pc, #640]	; (a83c <set_arm_clock+0x298>)
    a5bc:	cmp	r0, r3
    a5be:	bls.w	a7c6 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a5c2:	subs	r3, r0, r3
    a5c4:	ldr	r1, [pc, #632]	; (a840 <set_arm_clock+0x29c>)
    a5c6:	lsrs	r3, r3, #8
    a5c8:	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a5cc:	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a5d0:	lsrs	r3, r3, #7
    a5d2:	add.w	r3, r3, r3, lsl #2
    a5d6:	add.w	r3, r3, r3, lsl #2
    a5da:	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a5de:	cmp	r3, r1
    a5e0:	it	cs
    a5e2:	movcs	r3, r1
    a5e4:	sub.w	r7, r3, #800	; 0x320
    a5e8:	ldr	r3, [pc, #600]	; (a844 <set_arm_clock+0x2a0>)
    a5ea:	umull	r3, r7, r3, r7
    a5ee:	lsrs	r7, r7, #3
    a5f0:	b.n	a5fc <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    a5f2:	ldr	r7, [pc, #596]	; (a848 <set_arm_clock+0x2a4>)
    a5f4:	cmp	r0, r7
    a5f6:	ite	hi
    a5f8:	movhi	r7, #14
    a5fa:	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a5fc:	ldr	r1, [pc, #564]	; (a834 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a5fe:	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a602:	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a606:	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a608:	orr.w	r3, r3, #192	; 0xc0
    a60c:	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a610:	bcs.n	a62c <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a612:	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a616:	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a61a:	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    a61e:	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a622:	ldr	r3, [r1, #0]
    a624:	cmp	r3, #0
    a626:	bge.n	a622 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a628:	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a62c:	ands.w	r3, r6, #33554432	; 0x2000000
    a630:	bne.n	a67c <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a632:	ldr	r1, [pc, #536]	; (a84c <set_arm_clock+0x2a8>)
    a634:	ldr	r4, [r1, #16]
    a636:	ldr	r1, [pc, #536]	; (a850 <set_arm_clock+0x2ac>)
    a638:	bics	r1, r4
    a63a:	beq.w	a812 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a63e:	eor.w	r1, r2, #4096	; 0x1000
    a642:	mov	r4, r6
    a644:	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a648:	tst.w	r4, #939524096	; 0x38000000
    a64c:	beq.n	a658 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a64e:	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a652:	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    a654:	ldr	r3, [pc, #476]	; (a834 <set_arm_clock+0x290>)
    a656:	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a658:	tst.w	r1, #12288	; 0x3000
    a65c:	beq.n	a66e <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a65e:	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    a662:	ldr	r1, [pc, #464]	; (a834 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a664:	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    a666:	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a668:	ldr	r3, [r1, #72]	; 0x48
    a66a:	lsls	r2, r3, #28
    a66c:	bmi.n	a668 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a66e:	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a672:	ldr	r2, [pc, #448]	; (a834 <set_arm_clock+0x290>)
    a674:	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a676:	ldr	r3, [r2, #72]	; 0x48
    a678:	lsls	r3, r3, #26
    a67a:	bmi.n	a676 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    a67c:	ldr	r4, [pc, #468]	; (a854 <set_arm_clock+0x2b0>)
    a67e:	cmp	r0, r4
    a680:	bhi.w	a820 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    a684:	mov.w	ip, #1
    a688:	mov	r1, r0
	uint32_t div_arm = 1;
    a68a:	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    a68c:	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    a690:	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    a694:	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a698:	cmp	r2, r4
    a69a:	bhi.n	a6ce <set_arm_clock+0x12a>
		if (div_arm < 8) {
    a69c:	cmp.w	lr, #8
				div_arm = 1;
    a6a0:	mov.w	r3, #1
		if (div_arm < 8) {
    a6a4:	bne.w	a7c2 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    a6a8:	cmp.w	ip, #4
    a6ac:	bhi.w	a7d2 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    a6b0:	adds	r2, r1, r0
    a6b2:	cmp	r2, r4
    a6b4:	bhi.w	a800 <set_arm_clock+0x25c>
    a6b8:	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    a6bc:	mov	ip, r5
			div_arm = div_arm + 1;
    a6be:	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a6c2:	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    a6c6:	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a6ca:	cmp	r2, r4
    a6cc:	bls.n	a69c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a6ce:	add.w	r1, ip, #4294967295
    a6d2:	lsls	r4, r1, #10
    a6d4:	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a6d8:	ldr	r0, [pc, #380]	; (a858 <set_arm_clock+0x2b4>)
    a6da:	add	r0, r2
	if (mult > 108) mult = 108;
    a6dc:	ldr	r2, [pc, #380]	; (a85c <set_arm_clock+0x2b8>)
    a6de:	cmp	r0, r2
    a6e0:	bls.n	a7e2 <set_arm_clock+0x23e>
    a6e2:	ldr.w	sl, [pc, #420]	; a888 <set_arm_clock+0x2e4>
    a6e6:	movs	r2, #108	; 0x6c
    a6e8:	ldr	r0, [pc, #372]	; (a860 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a6ea:	ldr	r5, [pc, #352]	; (a84c <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    a6ec:	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a6f0:	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    a6f4:	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a6f8:	ldr.w	ip, [pc, #400]	; a88c <set_arm_clock+0x2e8>
    a6fc:	and.w	ip, lr, ip
    a700:	cmp	ip, sl
    a702:	beq.n	a718 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a704:	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a708:	mov.w	ip, #4096	; 0x1000
    a70c:	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a710:	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a712:	ldr	r2, [r5, #0]
    a714:	cmp	r2, #0
    a716:	bge.n	a712 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a718:	ldr	r2, [pc, #280]	; (a834 <set_arm_clock+0x290>)
    a71a:	ldr	r5, [r2, #16]
    a71c:	and.w	r5, r5, #7
    a720:	cmp	r5, r3
    a722:	beq.n	a72c <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a724:	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a726:	ldr	r3, [r2, #72]	; 0x48
    a728:	lsls	r5, r3, #15
    a72a:	bmi.n	a726 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a72c:	tst.w	r1, #7168	; 0x1c00
    a730:	beq.n	a746 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a732:	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a736:	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    a73a:	ldr	r2, [pc, #248]	; (a834 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a73c:	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    a73e:	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a740:	ldr	r3, [r2, #72]	; 0x48
    a742:	lsls	r1, r3, #30
    a744:	bmi.n	a740 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a746:	ldr	r1, [pc, #284]	; (a864 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    a748:	ldr	r2, [pc, #284]	; (a868 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a74a:	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    a74c:	cmp	r1, r2
    a74e:	bhi.n	a7ca <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a750:	ldr	r3, [pc, #280]	; (a86c <set_arm_clock+0x2c8>)
    a752:	lsrs	r1, r1, #7
    a754:	umull	r3, r1, r3, r1
    a758:	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a75a:	subs	r3, r1, #1
    a75c:	lsls	r3, r3, #8
    a75e:	eor.w	r2, r6, r3
    a762:	tst.w	r2, #768	; 0x300
    a766:	beq.n	a776 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a768:	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a76c:	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    a770:	ldr	r2, [pc, #192]	; (a834 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a772:	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    a774:	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a776:	ldr	r2, [pc, #188]	; (a834 <set_arm_clock+0x290>)
    a778:	ldr	r3, [r2, #20]
    a77a:	bic.w	r3, r3, #33554432	; 0x2000000
    a77e:	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a780:	ldr	r3, [r2, #72]	; 0x48
    a782:	lsls	r3, r3, #26
    a784:	bmi.n	a780 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a786:	ldr	r3, [pc, #232]	; (a870 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a788:	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a78a:	umull	r2, r3, r3, r0
    a78e:	mov.w	r2, #4294967295
    a792:	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    a796:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a79a:	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    a79e:	ldr	r2, [pc, #212]	; (a874 <set_arm_clock+0x2d0>)
    a7a0:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    a7a2:	ldr	r2, [pc, #212]	; (a878 <set_arm_clock+0x2d4>)
    a7a4:	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a7a6:	ldr	r2, [pc, #212]	; (a87c <set_arm_clock+0x2d8>)
    a7a8:	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a7aa:	bcs.n	a7be <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a7ac:	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a7b0:	ldr	r2, [pc, #132]	; (a838 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a7b2:	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    a7b6:	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a7b8:	ldr	r3, [r2, #0]
    a7ba:	cmp	r3, #0
    a7bc:	bge.n	a7b8 <set_arm_clock+0x214>
	}

	return frequency;
}
    a7be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a7c2:	mov	r3, lr
    a7c4:	b.n	a68c <set_arm_clock+0xe8>
    a7c6:	movs	r7, #18
    a7c8:	b.n	a5fc <set_arm_clock+0x58>
    a7ca:	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    a7ce:	movs	r1, #4
    a7d0:	b.n	a75e <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a7d2:	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a7d6:	ldr	r0, [pc, #128]	; (a858 <set_arm_clock+0x2b4>)
    a7d8:	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a7da:	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a7dc:	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a7de:	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a7e2:	ldr	r2, [pc, #156]	; (a880 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a7e4:	ldr.w	sl, [pc, #168]	; a890 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a7e8:	umull	r2, r0, r2, r0
    a7ec:	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    a7ee:	ldr	r0, [pc, #148]	; (a884 <set_arm_clock+0x2e0>)
    a7f0:	cmp	r2, #54	; 0x36
    a7f2:	it	cc
    a7f4:	movcc	r2, #54	; 0x36
    a7f6:	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a7fa:	orr.w	sl, r2, sl
    a7fe:	b.n	a6ea <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a800:	mov.w	r4, ip, lsl #10
    a804:	movs	r3, #0
    a806:	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    a80a:	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    a80e:	mov	ip, r5
    a810:	b.n	a6d8 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a812:	mov	r5, r3
    a814:	eor.w	r4, r6, #402653184	; 0x18000000
    a818:	mov	r1, r2
    a81a:	mov.w	r3, #402653184	; 0x18000000
    a81e:	b.n	a648 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    a820:	movs	r4, #0
	uint32_t div_ahb = 1;
    a822:	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a826:	mov	r2, r0
    a828:	mov	r1, r6
    a82a:	mov	r3, r4
	uint32_t div_arm = 1;
    a82c:	mov	lr, ip
    a82e:	b.n	a6d8 <set_arm_clock+0x134>
    a830:	.word	0x1f78a400
    a834:	.word	0x400fc000
    a838:	.word	0x40080000
    a83c:	.word	0x23c34600
    a840:	.word	0x004cb223
    a844:	.word	0x51eb851f
    a848:	.word	0x016e3600
    a84c:	.word	0x400d8000
    a850:	.word	0x80003040
    a854:	.word	0x269fb1ff
    a858:	.word	0x005b8d80
    a85c:	.word	0x4df67eff
    a860:	.word	0x4d3f6400
    a864:	.word	0x08f0d17f
    a868:	.word	0x2cb4177f
    a86c:	.word	0x00e5109f
    a870:	.word	0x431bde83
    a874:	.word	0x20001448
    a878:	.word	0x20001444
    a87c:	.word	0x20007d68
    a880:	.word	0x165e9f81
    a884:	.word	0x00b71b00
    a888:	.word	0x8000206c
    a88c:	.word	0x8001307f
    a890:	.word	0x80002000

0000a894 <endpoint0_receive>:
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
    a894:	push	{r4, r5}
	//printf("rx %lu\n", len);
	if (len > 0) {
    a896:	cmp	r1, #0
    a898:	bne.n	a8fe <endpoint0_receive+0x6a>
    a89a:	ldr	r4, [pc, #172]	; (a948 <endpoint0_receive+0xb4>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a89c:	ldr	r3, [pc, #172]	; (a94c <endpoint0_receive+0xb8>)
    a89e:	movs	r1, #1
    a8a0:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a8a2:	cbz	r2, a8dc <endpoint0_receive+0x48>
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a8a4:	ldr	r1, [pc, #168]	; (a950 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.pointer0 = 0;
    a8a6:	movs	r2, #0
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a8a8:	movw	r5, #32896	; 0x8080
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a8ac:	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    a8b0:	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a8b2:	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    a8b4:	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a8b8:	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a8bc:	mov.w	r2, #65536	; 0x10000
	USB1_ENDPTPRIME |= (1<<16);
    a8c0:	ldr.w	r3, [r1, #432]	; 0x1b0
    a8c4:	orrs	r3, r2
    a8c6:	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a8ca:	ldr	r3, [pc, #136]	; (a954 <endpoint0_receive+0xc0>)
	while (USB1_ENDPTPRIME) ;
    a8cc:	ldr	r1, [pc, #128]	; (a950 <endpoint0_receive+0xbc>)
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a8ce:	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    a8d0:	ldr.w	r3, [r1, #432]	; 0x1b0
    a8d4:	cmp	r3, #0
    a8d6:	bne.n	a8d0 <endpoint0_receive+0x3c>
}
    a8d8:	pop	{r4, r5}
    a8da:	bx	lr
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a8dc:	ldr	r1, [pc, #112]	; (a950 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a8de:	movs	r5, #128	; 0x80
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a8e0:	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    a8e4:	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a8e6:	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    a8e8:	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a8ec:	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a8f0:	ldr.w	r3, [r1, #432]	; 0x1b0
    a8f4:	orr.w	r3, r3, #65536	; 0x10000
    a8f8:	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a8fc:	b.n	a8ca <endpoint0_receive+0x36>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a8fe:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    a900:	ldr	r3, [pc, #84]	; (a958 <endpoint0_receive+0xc4>)
    a902:	movs	r4, #1
		endpoint_queue_head[0].status = 0;
    a904:	movs	r5, #0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a906:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a90a:	str	r0, [r3, #8]
		endpoint0_transfer_data.next = 1;
    a90c:	str	r4, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a90e:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a910:	add.w	r1, r0, #4096	; 0x1000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    a914:	ldr	r4, [pc, #48]	; (a948 <endpoint0_receive+0xb4>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a916:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a918:	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[0].status = 0;
    a91c:	str	r5, [r4, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a91e:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a920:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a924:	add.w	r0, r0, #16384	; 0x4000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    a928:	str	r3, [r4, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a92a:	str	r1, [r3, #20]
		USB1_ENDPTPRIME |= (1<<0);
    a92c:	ldr	r1, [pc, #32]	; (a950 <endpoint0_receive+0xbc>)
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a92e:	str	r0, [r3, #24]
		USB1_ENDPTPRIME |= (1<<0);
    a930:	ldr.w	r3, [r1, #432]	; 0x1b0
    a934:	orr.w	r3, r3, #1
    a938:	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    a93c:	ldr.w	r3, [r1, #432]	; 0x1b0
    a940:	cmp	r3, #0
    a942:	bne.n	a93c <endpoint0_receive+0xa8>
    a944:	b.n	a89c <endpoint0_receive+0x8>
    a946:	nop
    a948:	.word	0x20000000
    a94c:	.word	0x20001ee0
    a950:	.word	0x402e0000
    a954:	.word	0x20007688
    a958:	.word	0x20001f00

0000a95c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a95c:	ldr	r3, [r0, #56]	; 0x38
{
    a95e:	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    a960:	cbz	r3, a96a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    a962:	ldr	r3, [r2, #4]
    a964:	orr.w	r3, r3, #32768	; 0x8000
    a968:	str	r3, [r2, #4]
	}
	__disable_irq();
    a96a:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    a96c:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    a96e:	cbz	r4, a9c0 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    a970:	ldr	r3, [pc, #104]	; (a9dc <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    a972:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    a974:	ldr.w	r4, [r3, #432]	; 0x1b0
    a978:	tst	r4, r1
    a97a:	bne.n	a9b8 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    a97c:	ldr	r6, [pc, #96]	; (a9e0 <schedule_transfer+0x84>)
    a97e:	ldr	r7, [r6, #4]
    a980:	b.n	a98c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    a982:	ldr	r4, [r6, #4]
    a984:	subs	r4, r4, r7
    a986:	cmp.w	r4, #2400	; 0x960
    a98a:	bcs.n	a9a4 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    a98c:	ldr.w	r4, [r3, #320]	; 0x140
    a990:	orr.w	r4, r4, #16384	; 0x4000
    a994:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    a998:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    a99c:	ldr.w	r4, [r3, #320]	; 0x140
    a9a0:	lsls	r4, r4, #17
    a9a2:	bpl.n	a982 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    a9a4:	ands	r5, r1
    a9a6:	bne.n	a9b8 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    a9a8:	ldr	r4, [pc, #48]	; (a9dc <schedule_transfer+0x80>)
		endpoint->status = 0;
    a9aa:	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    a9ae:	ldr.w	r3, [r4, #432]	; 0x1b0
    a9b2:	orrs	r3, r1
    a9b4:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    a9b8:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    a9ba:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    a9bc:	pop	{r4, r5, r6, r7}
    a9be:	bx	lr
	USB1_ENDPTPRIME |= epmask;
    a9c0:	ldr	r5, [pc, #24]	; (a9dc <schedule_transfer+0x80>)
	endpoint->status = 0;
    a9c2:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    a9c6:	ldr.w	r3, [r5, #432]	; 0x1b0
    a9ca:	orrs	r3, r1
    a9cc:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    a9d0:	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    a9d2:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    a9d4:	cpsie	i
}
    a9d6:	pop	{r4, r5, r6, r7}
    a9d8:	bx	lr
    a9da:	nop
    a9dc:	.word	0x402e0000
    a9e0:	.word	0xe0001000

0000a9e4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    a9e4:	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    a9e6:	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    a9e8:	cbz	r5, aa12 <run_callbacks+0x2e>
    a9ea:	mov	r6, r0
    a9ec:	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    a9ee:	movs	r4, #0
    a9f0:	b.n	a9fa <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    a9f2:	ldr	r2, [r2, #0]
		count++;
    a9f4:	adds	r4, #1
		if ((uint32_t)t == 1) {
    a9f6:	cmp	r2, #1
    a9f8:	beq.n	aa14 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    a9fa:	ldr	r3, [r2, #4]
    a9fc:	ands.w	r3, r3, #128	; 0x80
    aa00:	beq.n	a9f2 <run_callbacks+0xe>
			ep->first_transfer = t;
    aa02:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    aa04:	cbz	r4, aa12 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    aa06:	mov	r0, r5
		ep->callback_function(first);
    aa08:	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    aa0a:	ldr	r5, [r5, #0]
		ep->callback_function(first);
    aa0c:	blx	r3
	while (count) {
    aa0e:	subs	r4, #1
    aa10:	bne.n	aa06 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    aa12:	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    aa14:	strd	r3, r3, [r6, #48]	; 0x30
			break;
    aa18:	b.n	aa04 <run_callbacks+0x20>
    aa1a:	nop

0000aa1c <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    aa1c:	push	{r4, r5}
	if (len > 0) {
    aa1e:	cbnz	r1, aa58 <endpoint0_transmit.constprop.0+0x3c>
    aa20:	ldr	r4, [pc, #124]	; (aaa0 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    aa22:	ldr	r3, [pc, #128]	; (aaa4 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    aa24:	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    aa26:	ldr	r2, [pc, #128]	; (aaa8 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    aa28:	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    aa2a:	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    aa2e:	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    aa30:	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    aa32:	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aa36:	movs	r4, #128	; 0x80
    aa38:	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    aa3a:	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    aa3e:	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    aa42:	ldr	r0, [pc, #104]	; (aaac <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    aa44:	orrs	r3, r5
    aa46:	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    aa4a:	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    aa4c:	ldr.w	r3, [r2, #432]	; 0x1b0
    aa50:	cmp	r3, #0
    aa52:	bne.n	aa4c <endpoint0_transmit.constprop.0+0x30>
}
    aa54:	pop	{r4, r5}
    aa56:	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aa58:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    aa5a:	ldr	r3, [pc, #84]	; (aab0 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    aa5c:	ldr	r4, [pc, #64]	; (aaa0 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    aa5e:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aa60:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    aa64:	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    aa66:	ldr	r2, [pc, #64]	; (aaa8 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aa68:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    aa6a:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    aa6e:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    aa70:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    aa72:	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    aa76:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    aa78:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    aa7a:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    aa7e:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    aa82:	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    aa84:	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    aa86:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    aa88:	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    aa8a:	ldr.w	r3, [r2, #432]	; 0x1b0
    aa8e:	orr.w	r3, r3, #65536	; 0x10000
    aa92:	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    aa96:	ldr.w	r3, [r2, #432]	; 0x1b0
    aa9a:	cmp	r3, #0
    aa9c:	bne.n	aa96 <endpoint0_transmit.constprop.0+0x7a>
    aa9e:	b.n	aa22 <endpoint0_transmit.constprop.0+0x6>
    aaa0:	.word	0x20000000
    aaa4:	.word	0x20001ee0
    aaa8:	.word	0x402e0000
    aaac:	.word	0x20007688
    aab0:	.word	0x20001f00

0000aab4 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    aab4:	ldr	r1, [pc, #32]	; (aad8 <usb_stop_sof_interrupts+0x24>)
    aab6:	movs	r2, #1
    aab8:	ldrb	r3, [r1, #0]
    aaba:	lsl.w	r0, r2, r0
    aabe:	bic.w	r0, r3, r0
    aac2:	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    aac4:	cbnz	r0, aad4 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    aac6:	ldr	r2, [pc, #20]	; (aadc <usb_stop_sof_interrupts+0x28>)
    aac8:	ldr.w	r3, [r2, #328]	; 0x148
    aacc:	bic.w	r3, r3, #128	; 0x80
    aad0:	str.w	r3, [r2, #328]	; 0x148
}
    aad4:	bx	lr
    aad6:	nop
    aad8:	.word	0x20007ded
    aadc:	.word	0x402e0000

0000aae0 <usb_isr>:
{
    aae0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    aae4:	ldr	r4, [pc, #672]	; (ad88 <usb_isr+0x2a8>)
{
    aae6:	sub	sp, #28
	uint32_t status = USB1_USBSTS;
    aae8:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    aaec:	lsls	r1, r6, #31
	USB1_USBSTS = status;
    aaee:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    aaf2:	bpl.w	ac2e <usb_isr+0x14e>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    aaf6:	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    aafa:	cmp	r3, #0
    aafc:	beq.n	abc6 <usb_isr+0xe6>
    aafe:	ldr	r5, [pc, #652]	; (ad8c <usb_isr+0x2ac>)
    ab00:	ldr.w	r9, [pc, #656]	; ad94 <usb_isr+0x2b4>
		usb_configuration = setup.wValue;
    ab04:	ldr.w	fp, [pc, #684]	; adb4 <usb_isr+0x2d4>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    ab08:	ldr.w	r8, [pc, #684]	; adb8 <usb_isr+0x2d8>
			USB1_ENDPTSETUPSTAT = setupstatus;
    ab0c:	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    ab10:	ldrd	r7, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    ab14:	ldr.w	r3, [r4, #320]	; 0x140
    ab18:	orr.w	r3, r3, #8192	; 0x2000
    ab1c:	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    ab20:	ldr.w	r3, [r4, #320]	; 0x140
    ab24:	lsls	r3, r3, #18
    ab26:	bpl.n	ab14 <usb_isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    ab28:	ldr.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    ab2c:	mov.w	r2, #65537	; 0x10001
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    ab30:	bic.w	r3, r3, #8192	; 0x2000
    ab34:	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    ab38:	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    ab3c:	ldr.w	r3, [r4, #436]	; 0x1b4
    ab40:	ands.w	r3, r3, #65537	; 0x10001
    ab44:	bne.n	ab3c <usb_isr+0x5c>
			endpoint0_notify_mask = 0;
    ab46:	uxth	r2, r7
    ab48:	str.w	r3, [r9]
	switch (setup.wRequestAndType) {
    ab4c:	cmp.w	r2, #2304	; 0x900
	setup.bothwords = setupdata;
    ab50:	strd	r7, r0, [sp, #16]
	switch (setup.wRequestAndType) {
    ab54:	beq.w	aebc <usb_isr+0x3dc>
    ab58:	bhi.w	ace2 <usb_isr+0x202>
    ab5c:	movw	r1, #770	; 0x302
    ab60:	cmp	r2, r1
    ab62:	beq.w	afb2 <usb_isr+0x4d2>
    ab66:	bls.w	ad24 <usb_isr+0x244>
    ab6a:	movw	r1, #1665	; 0x681
    ab6e:	cmp	r2, r1
    ab70:	bhi.w	accc <usb_isr+0x1ec>
    ab74:	cmp.w	r2, #1664	; 0x680
    ab78:	bcs.w	af26 <usb_isr+0x446>
    ab7c:	cmp.w	r2, #1280	; 0x500
    ab80:	bne.w	acc0 <usb_isr+0x1e0>
	endpoint0_transfer_ack.next = 1;
    ab84:	ldr	r2, [pc, #520]	; (ad90 <usb_isr+0x2b0>)
	endpoint_queue_head[1].status = 0;
    ab86:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    ab88:	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    ab8a:	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ab8c:	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    ab8e:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ab90:	movs	r3, #128	; 0x80
    ab92:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ab94:	mov.w	r3, #65537	; 0x10001
    ab98:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ab9c:	ldr.w	r3, [r4, #432]	; 0x1b0
    aba0:	orr.w	r3, r3, #65536	; 0x10000
    aba4:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    aba8:	ldr.w	r3, [r4, #432]	; 0x1b0
    abac:	cmp	r3, #0
    abae:	bne.n	aba8 <usb_isr+0xc8>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    abb0:	ldrh.w	r3, [sp, #18]
    abb4:	lsls	r3, r3, #25
    abb6:	orr.w	r3, r3, #16777216	; 0x1000000
    abba:	str.w	r3, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    abbe:	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    abc2:	cmp	r3, #0
    abc4:	bne.n	ab0c <usb_isr+0x2c>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    abc6:	ldr	r3, [pc, #448]	; (ad88 <usb_isr+0x2a8>)
    abc8:	ldr.w	r4, [r3, #444]	; 0x1bc
		if (completestatus) {
    abcc:	cbz	r4, ac2e <usb_isr+0x14e>
			if (completestatus & endpoint0_notify_mask) {
    abce:	ldr	r2, [pc, #452]	; (ad94 <usb_isr+0x2b4>)
			USB1_ENDPTCOMPLETE = completestatus;
    abd0:	str.w	r4, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    abd4:	ldr	r1, [r2, #0]
    abd6:	tst	r4, r1
    abd8:	bne.w	b0ec <usb_isr+0x60c>
			completestatus &= endpointN_notify_mask;
    abdc:	ldr	r3, [pc, #440]	; (ad98 <usb_isr+0x2b8>)
    abde:	ldr	r3, [r3, #0]
			if (completestatus) {
    abe0:	ands	r4, r3
    abe2:	beq.n	ac2e <usb_isr+0x14e>
				while (tx) {
    abe4:	movs.w	r8, r4, lsr #16
    abe8:	beq.n	ac0c <usb_isr+0x12c>
    abea:	ldr	r5, [pc, #416]	; (ad8c <usb_isr+0x2ac>)
					tx &= ~(1<<p);
    abec:	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    abf0:	rbit	r7, r8
    abf4:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    abf8:	add.w	r0, r5, r7, lsl #7
					tx &= ~(1<<p);
    abfc:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    ac00:	adds	r0, #64	; 0x40
    ac02:	bl	a9e4 <run_callbacks>
				while (tx) {
    ac06:	bics.w	r8, r8, r7
    ac0a:	bne.n	abf0 <usb_isr+0x110>
				uint32_t rx = completestatus & 0xffff;
    ac0c:	uxth	r4, r4
				while(rx) {
    ac0e:	cbz	r4, ac2e <usb_isr+0x14e>
    ac10:	ldr	r5, [pc, #376]	; (ad8c <usb_isr+0x2ac>)
					rx &= ~(1<<p);
    ac12:	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    ac16:	rbit	r7, r4
    ac1a:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2);
    ac1e:	add.w	r0, r5, r7, lsl #7
					rx &= ~(1<<p);
    ac22:	lsl.w	r7, r8, r7
					run_callbacks(endpoint_queue_head + p * 2);
    ac26:	bl	a9e4 <run_callbacks>
				while(rx) {
    ac2a:	bics	r4, r7
    ac2c:	bne.n	ac16 <usb_isr+0x136>
	if (status & USB_USBSTS_URI) { // page 3164
    ac2e:	lsls	r2, r6, #25
    ac30:	bpl.n	ac60 <usb_isr+0x180>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    ac32:	ldr	r3, [pc, #340]	; (ad88 <usb_isr+0x2a8>)
    ac34:	ldr.w	r2, [r3, #428]	; 0x1ac
    ac38:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    ac3c:	ldr.w	r2, [r3, #444]	; 0x1bc
    ac40:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    ac44:	ldr.w	r4, [r3, #432]	; 0x1b0
    ac48:	cmp	r4, #0
    ac4a:	bne.n	ac44 <usb_isr+0x164>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    ac4c:	mov.w	r2, #4294967295
    ac50:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    ac54:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    ac58:	bl	a1c0 <usb_serial_reset>
		endpointN_notify_mask = 0;
    ac5c:	ldr	r3, [pc, #312]	; (ad98 <usb_isr+0x2b8>)
    ac5e:	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    ac60:	lsls	r4, r6, #7
    ac62:	bpl.n	ac6c <usb_isr+0x18c>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    ac64:	ldr	r3, [pc, #308]	; (ad9c <usb_isr+0x2bc>)
    ac66:	ldr	r3, [r3, #0]
    ac68:	cbz	r3, ac6c <usb_isr+0x18c>
    ac6a:	blx	r3
	if (status & USB_USBSTS_TI1) {
    ac6c:	lsls	r0, r6, #6
    ac6e:	bpl.n	ac78 <usb_isr+0x198>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    ac70:	ldr	r3, [pc, #300]	; (ada0 <usb_isr+0x2c0>)
    ac72:	ldr	r3, [r3, #0]
    ac74:	cbz	r3, ac78 <usb_isr+0x198>
    ac76:	blx	r3
	if (status & USB_USBSTS_PCI) {
    ac78:	lsls	r1, r6, #29
    ac7a:	bpl.n	ac90 <usb_isr+0x1b0>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    ac7c:	ldr	r3, [pc, #264]	; (ad88 <usb_isr+0x2a8>)
    ac7e:	ldr.w	r3, [r3, #388]	; 0x184
    ac82:	ands.w	r3, r3, #512	; 0x200
    ac86:	beq.w	aeaa <usb_isr+0x3ca>
			usb_high_speed = 1;
    ac8a:	ldr	r3, [pc, #280]	; (ada4 <usb_isr+0x2c4>)
    ac8c:	movs	r2, #1
    ac8e:	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    ac90:	ldr	r3, [pc, #244]	; (ad88 <usb_isr+0x2a8>)
    ac92:	ldr.w	r3, [r3, #328]	; 0x148
    ac96:	lsls	r2, r3, #24
    ac98:	bpl.n	acba <usb_isr+0x1da>
    ac9a:	lsls	r3, r6, #24
    ac9c:	bpl.n	acba <usb_isr+0x1da>
		if (usb_reboot_timer) {
    ac9e:	ldr	r2, [pc, #264]	; (ada8 <usb_isr+0x2c8>)
    aca0:	ldrb	r3, [r2, #0]
    aca2:	cbz	r3, acb0 <usb_isr+0x1d0>
			if (--usb_reboot_timer == 0) {
    aca4:	subs	r3, #1
    aca6:	uxtb	r3, r3
    aca8:	strb	r3, [r2, #0]
    acaa:	cmp	r3, #0
    acac:	beq.w	b1e2 <usb_isr+0x702>
}
    acb0:	add	sp, #28
    acb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_midi_flush_output();
    acb6:	b.w	bc44 <usb_midi_flush_output>
}
    acba:	add	sp, #28
    acbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (setup.wRequestAndType) {
    acc0:	bls.n	adbc <usb_isr+0x2dc>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    acc2:	mov.w	r3, #65537	; 0x10001
    acc6:	str.w	r3, [r4, #448]	; 0x1c0
    acca:	b.n	abbe <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    accc:	cmp.w	r2, #2176	; 0x880
    acd0:	bne.n	acc2 <usb_isr+0x1e2>
		reply_buffer[0] = usb_configuration;
    acd2:	ldr	r0, [pc, #216]	; (adac <usb_isr+0x2cc>)
		endpoint0_transmit(reply_buffer, 1, 0);
    acd4:	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    acd6:	ldrb.w	r3, [fp]
    acda:	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    acdc:	bl	aa1c <endpoint0_transmit.constprop.0>
		return;
    ace0:	b.n	abbe <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    ace2:	movw	r1, #8737	; 0x2221
    ace6:	cmp	r2, r1
    ace8:	beq.w	b092 <usb_isr+0x5b2>
    acec:	bls.w	ae22 <usb_isr+0x342>
    acf0:	movw	r1, #33186	; 0x81a2
    acf4:	cmp	r2, r1
    acf6:	beq.w	b078 <usb_isr+0x598>
    acfa:	bls.n	adea <usb_isr+0x30a>
    acfc:	movw	r3, #33953	; 0x84a1
    ad00:	cmp	r2, r3
    ad02:	bne.w	ae72 <usb_isr+0x392>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    ad06:	cmp.w	r0, #589824	; 0x90000
    ad0a:	bcs.n	acc2 <usb_isr+0x1e2>
			if (usb_audio_get_feature(&setup, endpoint0_buffer, &len)) {
    ad0c:	add	r2, sp, #12
    ad0e:	ldr	r1, [pc, #160]	; (adb0 <usb_isr+0x2d0>)
    ad10:	add	r0, sp, #16
    ad12:	bl	cbc8 <usb_audio_get_feature>
    ad16:	cmp	r0, #0
    ad18:	beq.n	acc2 <usb_isr+0x1e2>
				endpoint0_transmit(endpoint0_buffer, len, 0);
    ad1a:	ldr	r1, [sp, #12]
    ad1c:	ldr	r0, [pc, #144]	; (adb0 <usb_isr+0x2d0>)
    ad1e:	bl	aa1c <endpoint0_transmit.constprop.0>
				return;
    ad22:	b.n	abbe <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    ad24:	cmp	r2, #130	; 0x82
    ad26:	beq.w	b04c <usb_isr+0x56c>
    ad2a:	bls.w	ae98 <usb_isr+0x3b8>
    ad2e:	cmp.w	r2, #258	; 0x102
    ad32:	bne.w	ae82 <usb_isr+0x3a2>
		if (endpoint > 7) break;
    ad36:	tst.w	r0, #120	; 0x78
    ad3a:	uxth	r3, r0
    ad3c:	bne.n	acc2 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    ad3e:	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    ad42:	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    ad46:	ldr.w	r3, [r8, r2, lsl #2]
    ad4a:	ite	ne
    ad4c:	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    ad50:	biceq.w	r3, r3, #1
    ad54:	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    ad58:	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    ad5a:	ldr	r3, [pc, #52]	; (ad90 <usb_isr+0x2b0>)
	endpoint_queue_head[1].status = 0;
    ad5c:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    ad5e:	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    ad60:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ad62:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    ad64:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ad66:	movs	r2, #128	; 0x80
    ad68:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ad6a:	mov.w	r3, #65537	; 0x10001
    ad6e:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ad72:	ldr.w	r3, [r4, #432]	; 0x1b0
    ad76:	orr.w	r3, r3, #65536	; 0x10000
    ad7a:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    ad7e:	ldr.w	r3, [r4, #432]	; 0x1b0
    ad82:	cmp	r3, #0
    ad84:	bne.n	ad7e <usb_isr+0x29e>
    ad86:	b.n	abbe <usb_isr+0xde>
    ad88:	.word	0x402e0000
    ad8c:	.word	0x20000000
    ad90:	.word	0x20001ee0
    ad94:	.word	0x20007688
    ad98:	.word	0x2000768c
    ad9c:	.word	0x20007db0
    ada0:	.word	0x20007db4
    ada4:	.word	0x20007dfa
    ada8:	.word	0x20007dfb
    adac:	.word	0x20007cfc
    adb0:	.word	0x20007680
    adb4:	.word	0x20007df9
    adb8:	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    adbc:	movw	r3, #801	; 0x321
    adc0:	cmp	r2, r3
    adc2:	beq.n	adce <usb_isr+0x2ee>
    adc4:	movw	r3, #1057	; 0x421
    adc8:	cmp	r2, r3
    adca:	bne.w	acc2 <usb_isr+0x1e2>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    adce:	cmp.w	r0, #589824	; 0x90000
    add2:	mov.w	r1, r0, lsr #16
    add6:	bcs.w	acc2 <usb_isr+0x1e2>
			endpoint0_setupdata.bothwords = setupdata;
    adda:	ldr	r3, [pc, #724]	; (b0b0 <usb_isr+0x5d0>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    addc:	movs	r2, #1
			endpoint0_setupdata.bothwords = setupdata;
    adde:	strd	r7, r0, [r3]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    ade2:	ldr	r0, [pc, #720]	; (b0b4 <usb_isr+0x5d4>)
    ade4:	bl	a894 <endpoint0_receive>
			return; // handle these after ACK
    ade8:	b.n	abbe <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    adea:	movw	r3, #8993	; 0x2321
    adee:	cmp	r2, r3
    adf0:	bne.n	ae3e <usb_isr+0x35e>
	endpoint0_transfer_ack.next = 1;
    adf2:	ldr	r3, [pc, #708]	; (b0b8 <usb_isr+0x5d8>)
	endpoint0_transfer_ack.pointer0 = 0;
    adf4:	movs	r2, #0
    adf6:	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    adf8:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    adfa:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    adfc:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    adfe:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ae00:	movs	r2, #128	; 0x80
    ae02:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ae04:	mov.w	r3, #65537	; 0x10001
    ae08:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ae0c:	ldr.w	r3, [r4, #432]	; 0x1b0
    ae10:	orr.w	r3, r3, #65536	; 0x10000
    ae14:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    ae18:	ldr.w	r3, [r4, #432]	; 0x1b0
    ae1c:	cmp	r3, #0
    ae1e:	bne.n	ae18 <usb_isr+0x338>
    ae20:	b.n	abbe <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    ae22:	movw	r1, #2817	; 0xb01
    ae26:	cmp	r2, r1
    ae28:	beq.w	b006 <usb_isr+0x526>
    ae2c:	movw	r3, #8225	; 0x2021
    ae30:	cmp	r2, r3
    ae32:	bne.n	ae4a <usb_isr+0x36a>
		if (setup.wLength != 7) break;
    ae34:	lsrs	r1, r0, #16
    ae36:	cmp	r1, #7
    ae38:	bne.w	acc2 <usb_isr+0x1e2>
    ae3c:	b.n	adda <usb_isr+0x2fa>
	switch (setup.wRequestAndType) {
    ae3e:	movw	r3, #33185	; 0x81a1
    ae42:	cmp	r2, r3
    ae44:	beq.w	ad06 <usb_isr+0x226>
    ae48:	b.n	acc2 <usb_isr+0x1e2>
    ae4a:	movw	r3, #2689	; 0xa81
    ae4e:	cmp	r2, r3
    ae50:	bne.w	acc2 <usb_isr+0x1e2>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    ae54:	uxth	r0, r0
    ae56:	cmp	r0, #4
    ae58:	beq.w	b1d0 <usb_isr+0x6f0>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    ae5c:	cmp	r0, #5
    ae5e:	bne.w	acc2 <usb_isr+0x1e2>
			endpoint0_buffer[0] = usb_audio_receive_setting;
    ae62:	ldr	r3, [pc, #600]	; (b0bc <usb_isr+0x5dc>)
    ae64:	ldrb	r3, [r3, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    ae66:	movs	r1, #1
			endpoint0_buffer[0] = usb_audio_receive_setting;
    ae68:	ldr	r0, [pc, #584]	; (b0b4 <usb_isr+0x5d4>)
    ae6a:	strb	r3, [r0, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    ae6c:	bl	aa1c <endpoint0_transmit.constprop.0>
			return;
    ae70:	b.n	abbe <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    ae72:	bic.w	r2, r2, #256	; 0x100
    ae76:	movw	r3, #33441	; 0x82a1
    ae7a:	cmp	r2, r3
    ae7c:	beq.w	ad06 <usb_isr+0x226>
    ae80:	b.n	acc2 <usb_isr+0x1e2>
    ae82:	bcc.w	acc2 <usb_isr+0x1e2>
    ae86:	movw	r3, #289	; 0x121
    ae8a:	cmp	r2, r3
    ae8c:	beq.n	adce <usb_isr+0x2ee>
    ae8e:	movw	r3, #545	; 0x221
    ae92:	cmp	r2, r3
    ae94:	beq.n	adce <usb_isr+0x2ee>
    ae96:	b.n	acc2 <usb_isr+0x1e2>
    ae98:	cmp	r2, #128	; 0x80
    ae9a:	bne.w	acc2 <usb_isr+0x1e2>
		reply_buffer[0] = 0;
    ae9e:	ldr	r0, [pc, #544]	; (b0c0 <usb_isr+0x5e0>)
		endpoint0_transmit(reply_buffer, 2, 0);
    aea0:	movs	r1, #2
		reply_buffer[0] = 0;
    aea2:	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    aea4:	bl	aa1c <endpoint0_transmit.constprop.0>
		return;
    aea8:	b.n	abbe <usb_isr+0xde>
			usb_high_speed = 0;
    aeaa:	ldr	r2, [pc, #536]	; (b0c4 <usb_isr+0x5e4>)
    aeac:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    aeae:	ldr	r3, [pc, #536]	; (b0c8 <usb_isr+0x5e8>)
    aeb0:	ldr.w	r3, [r3, #328]	; 0x148
    aeb4:	lsls	r2, r3, #24
    aeb6:	bpl.w	acba <usb_isr+0x1da>
    aeba:	b.n	ac9a <usb_isr+0x1ba>
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    aebc:	ldr	r1, [pc, #524]	; (b0cc <usb_isr+0x5ec>)
		usb_configuration = setup.wValue;
    aebe:	ubfx	ip, r7, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    aec2:	mov.w	r2, #13107400	; 0xc800c8
    aec6:	str	r3, [sp, #4]
		usb_configuration = setup.wValue;
    aec8:	strb.w	ip, [fp]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    aecc:	str.w	r1, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    aed0:	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    aed4:	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    aed8:	mov.w	r2, #12845252	; 0xc400c4
    aedc:	str.w	r2, [r4, #468]	; 0x1d4
		USB1_ENDPTCTRL6 = ENDPOINT6_CONFIG;
    aee0:	subs	r2, #194	; 0xc2
    aee2:	str.w	r2, [r4, #472]	; 0x1d8
		usb_serial_configure();
    aee6:	bl	a1c4 <usb_serial_configure>
		usb_midi_configure();
    aeea:	bl	bb80 <usb_midi_configure>
		usb_audio_configure();
    aeee:	bl	cae0 <usb_audio_configure>
	endpoint0_transfer_ack.next = 1;
    aef2:	ldr	r2, [pc, #452]	; (b0b8 <usb_isr+0x5d8>)
    aef4:	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    aef6:	ldr	r3, [sp, #4]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    aef8:	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    aefa:	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aefc:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    aefe:	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    af00:	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    af02:	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
    af06:	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    af08:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    af0c:	ldr.w	r2, [r4, #432]	; 0x1b0
    af10:	orr.w	r2, r2, #65536	; 0x10000
    af14:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    af18:	str.w	r3, [r9]
	while (USB1_ENDPTPRIME) ;
    af1c:	ldr.w	r3, [r4, #432]	; 0x1b0
    af20:	cmp	r3, #0
    af22:	bne.n	af1c <usb_isr+0x43c>
    af24:	b.n	abbe <usb_isr+0xde>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    af26:	ldr	r3, [pc, #424]	; (b0d0 <usb_isr+0x5f0>)
    af28:	ldr	r1, [r3, #4]
    af2a:	cmp	r1, #0
    af2c:	beq.w	acc2 <usb_isr+0x1e2>
    af30:	mov.w	ip, r7, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    af34:	uxth.w	lr, r0
    af38:	b.n	af44 <usb_isr+0x464>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    af3a:	ldr	r1, [r3, #16]
    af3c:	adds	r3, #12
    af3e:	cmp	r1, #0
    af40:	beq.w	acc2 <usb_isr+0x1e2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    af44:	ldrh	r2, [r3, #0]
    af46:	cmp	r2, ip
    af48:	bne.n	af3a <usb_isr+0x45a>
    af4a:	ldrh	r2, [r3, #2]
    af4c:	cmp	r2, lr
    af4e:	bne.n	af3a <usb_isr+0x45a>
				if ((setup.wValue >> 8) == 3) {
    af50:	mov.w	r2, ip, lsr #8
    af54:	cmp	r2, #3
    af56:	beq.w	b11e <usb_isr+0x63e>
					datalen = list->length;
    af5a:	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    af5c:	lsrs	r0, r0, #16
    af5e:	cmp	r2, r0
    af60:	it	cs
    af62:	movcs	r2, r0
				if (setup.wValue == 0x200) {
    af64:	cmp.w	ip, #512	; 0x200
    af68:	mov	r7, r2
    af6a:	bne.w	b12a <usb_isr+0x64a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    af6e:	ldr	r3, [pc, #340]	; (b0c4 <usb_isr+0x5e4>)
    af70:	ldr	r1, [pc, #352]	; (b0d4 <usb_isr+0x5f4>)
    af72:	ldrb	r0, [r3, #0]
    af74:	ldr	r3, [pc, #352]	; (b0d8 <usb_isr+0x5f8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    af76:	ldr.w	sl, [pc, #356]	; b0dc <usb_isr+0x5fc>
    af7a:	cmp	r0, #0
    af7c:	it	ne
    af7e:	movne	r1, r3
    af80:	ldr	r0, [pc, #344]	; (b0dc <usb_isr+0x5fc>)
    af82:	bl	9d30 <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    af86:	bic.w	r3, sl, #31
	uint32_t end_addr = (uint32_t)addr + size;
    af8a:	add.w	r1, sl, r7
	asm("dsb");
    af8e:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    af92:	mov.w	r0, #3758153728	; 0xe000e000
    af96:	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    af9a:	adds	r3, #32
	} while (location < end_addr);
    af9c:	cmp	r1, r3
    af9e:	bhi.n	af96 <usb_isr+0x4b6>
	asm("dsb");
    afa0:	dsb	sy
	asm("isb");
    afa4:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    afa8:	ldr	r0, [pc, #304]	; (b0dc <usb_isr+0x5fc>)
    afaa:	mov	r1, r7
    afac:	bl	aa1c <endpoint0_transmit.constprop.0>
				return;
    afb0:	b.n	abbe <usb_isr+0xde>
		if (endpoint > 7) break;
    afb2:	tst.w	r0, #120	; 0x78
    afb6:	uxth	r3, r0
    afb8:	bne.w	acc2 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    afbc:	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    afc0:	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    afc4:	ldr.w	r3, [r8, r2, lsl #2]
    afc8:	ite	ne
    afca:	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    afce:	orreq.w	r3, r3, #1
    afd2:	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    afd6:	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    afd8:	ldr	r3, [pc, #220]	; (b0b8 <usb_isr+0x5d8>)
	endpoint_queue_head[1].status = 0;
    afda:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    afdc:	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    afde:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    afe0:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    afe2:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    afe4:	movs	r2, #128	; 0x80
    afe6:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    afe8:	mov.w	r3, #65537	; 0x10001
    afec:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    aff0:	ldr.w	r3, [r4, #432]	; 0x1b0
    aff4:	orr.w	r3, r3, #65536	; 0x10000
    aff8:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    affc:	ldr.w	r3, [r4, #432]	; 0x1b0
    b000:	cmp	r3, #0
    b002:	bne.n	affc <usb_isr+0x51c>
    b004:	b.n	abbe <usb_isr+0xde>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    b006:	uxth	r0, r0
    b008:	cmp	r0, #4
    b00a:	beq.w	b198 <usb_isr+0x6b8>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    b00e:	cmp	r0, #5
    b010:	bne.w	acc2 <usb_isr+0x1e2>
	endpoint0_transfer_ack.next = 1;
    b014:	ldr	r2, [pc, #160]	; (b0b8 <usb_isr+0x5d8>)
			usb_audio_receive_setting = setup.wValue;
    b016:	ubfx	ip, r7, #16, #16
	endpoint_queue_head[1].status = 0;
    b01a:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b01c:	str	r3, [r2, #8]
			usb_audio_receive_setting = setup.wValue;
    b01e:	ldr	r3, [pc, #156]	; (b0bc <usb_isr+0x5dc>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b020:	str	r2, [r5, #72]	; 0x48
			usb_audio_receive_setting = setup.wValue;
    b022:	strb.w	ip, [r3]
	endpoint0_transfer_ack.next = 1;
    b026:	movs	r3, #1
    b028:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b02a:	movs	r3, #128	; 0x80
    b02c:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b02e:	mov.w	r3, #65537	; 0x10001
    b032:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b036:	ldr.w	r3, [r4, #432]	; 0x1b0
    b03a:	orr.w	r3, r3, #65536	; 0x10000
    b03e:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b042:	ldr.w	r3, [r4, #432]	; 0x1b0
    b046:	cmp	r3, #0
    b048:	bne.n	b042 <usb_isr+0x562>
    b04a:	b.n	abbe <usb_isr+0xde>
		endpoint = setup.wIndex & 0x7F;
    b04c:	uxth	r3, r0
		if (endpoint > 7) break;
    b04e:	ands.w	r0, r0, #120	; 0x78
    b052:	bne.w	acc2 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    b056:	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b05a:	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    b05e:	ldr	r2, [pc, #96]	; (b0c0 <usb_isr+0x5e0>)
    b060:	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b062:	lsls	r0, r3, #24
    b064:	bmi.n	b118 <usb_isr+0x638>
    b066:	lsls	r7, r1, #31
    b068:	bpl.n	b06e <usb_isr+0x58e>
			reply_buffer[0] = 1;
    b06a:	movs	r3, #1
    b06c:	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    b06e:	movs	r1, #2
    b070:	ldr	r0, [pc, #76]	; (b0c0 <usb_isr+0x5e0>)
    b072:	bl	aa1c <endpoint0_transmit.constprop.0>
		return;
    b076:	b.n	abbe <usb_isr+0xde>
		if (setup.wLength >= 3) {
    b078:	cmp.w	r0, #196608	; 0x30000
    b07c:	bcc.w	acc2 <usb_isr+0x1e2>
			endpoint0_buffer[0] = 44100 & 255;
    b080:	ldr	r0, [pc, #48]	; (b0b4 <usb_isr+0x5d4>)
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    b082:	movs	r1, #3
			endpoint0_buffer[2] = 0;
    b084:	strb	r3, [r0, #2]
			endpoint0_buffer[0] = 44100 & 255;
    b086:	movw	r3, #44100	; 0xac44
    b08a:	strh	r3, [r0, #0]
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    b08c:	bl	aa1c <endpoint0_transmit.constprop.0>
			return;
    b090:	b.n	abbe <usb_isr+0xde>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    b092:	uxth	r0, r0
    b094:	cmp	r0, #0
    b096:	bne.w	adf2 <usb_isr+0x312>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b09a:	ldr	r3, [pc, #68]	; (b0e0 <usb_isr+0x600>)
			usb_cdc_line_rtsdtr = setup.wValue;
    b09c:	ubfx	ip, r7, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b0a0:	ldr	r2, [r3, #0]
    b0a2:	ldr	r3, [pc, #64]	; (b0e4 <usb_isr+0x604>)
    b0a4:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    b0a6:	ldr	r3, [pc, #64]	; (b0e8 <usb_isr+0x608>)
    b0a8:	strb.w	ip, [r3]
    b0ac:	b.n	adf2 <usb_isr+0x312>
    b0ae:	nop
    b0b0:	.word	0x200052f8
    b0b4:	.word	0x20007680
    b0b8:	.word	0x20001ee0
    b0bc:	.word	0x20007df4
    b0c0:	.word	0x20007cfc
    b0c4:	.word	0x20007dfa
    b0c8:	.word	0x402e0000
    b0cc:	.word	0x00cc0002
    b0d0:	.word	0x20001294
    b0d4:	.word	0x600020bc
    b0d8:	.word	0x60002214
    b0dc:	.word	0x20205100
    b0e0:	.word	0x20007d70
    b0e4:	.word	0x20007dac
    b0e8:	.word	0x20007df8
				endpoint0_notify_mask = 0;
    b0ec:	movs	r1, #0
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b0ee:	movw	r0, #8225	; 0x2021
				endpoint0_notify_mask = 0;
    b0f2:	str	r1, [r2, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    b0f4:	ldr	r1, [pc, #244]	; (b1ec <usb_isr+0x70c>)
    b0f6:	ldrd	r2, r1, [r1]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b0fa:	uxth	r5, r2
    b0fc:	cmp	r5, r0
    b0fe:	beq.n	b152 <usb_isr+0x672>
	if (setup.word1 == 0x02010121 || setup.word1 == 0x01000121 /* TODO: check setup.word2 */) {
    b100:	ldr	r3, [pc, #236]	; (b1f0 <usb_isr+0x710>)
    b102:	cmp	r2, r3
    b104:	beq.n	b10e <usb_isr+0x62e>
    b106:	ldr	r3, [pc, #236]	; (b1f4 <usb_isr+0x714>)
    b108:	cmp	r2, r3
    b10a:	bne.w	abdc <usb_isr+0xfc>
		usb_audio_set_feature(&endpoint0_setupdata, endpoint0_buffer);
    b10e:	ldr	r1, [pc, #232]	; (b1f8 <usb_isr+0x718>)
    b110:	ldr	r0, [pc, #216]	; (b1ec <usb_isr+0x70c>)
    b112:	bl	cc2c <usb_audio_set_feature>
    b116:	b.n	abdc <usb_isr+0xfc>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b118:	lsls	r3, r1, #15
    b11a:	bmi.n	b06a <usb_isr+0x58a>
    b11c:	b.n	b06e <usb_isr+0x58e>
					datalen = *(list->addr);
    b11e:	ldrb	r2, [r1, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;
    b120:	lsrs	r0, r0, #16
    b122:	cmp	r2, r0
    b124:	it	cs
    b126:	movcs	r2, r0
    b128:	mov	r7, r2
				} else if (setup.wValue == 0x700) {
    b12a:	cmp.w	ip, #1792	; 0x700
    b12e:	bne.n	b1d4 <usb_isr+0x6f4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    b130:	ldr	r3, [pc, #200]	; (b1fc <usb_isr+0x71c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b132:	mov	r2, r7
    b134:	ldr.w	sl, [pc, #228]	; b21c <usb_isr+0x73c>
					if (usb_high_speed) src = usb_config_descriptor_12;
    b138:	ldrb	r0, [r3, #0]
    b13a:	ldr	r1, [pc, #196]	; (b200 <usb_isr+0x720>)
    b13c:	ldr	r3, [pc, #196]	; (b204 <usb_isr+0x724>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b13e:	cmp	r0, #0
    b140:	it	ne
    b142:	movne	r1, r3
    b144:	mov	r0, sl
    b146:	bl	9d30 <memcpy>
					usb_descriptor_buffer[1] = 7;
    b14a:	movs	r3, #7
    b14c:	strb.w	r3, [sl, #1]
    b150:	b.n	af86 <usb_isr+0x4a6>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b152:	uxth	r1, r1
    b154:	cmp	r1, #0
    b156:	bne.n	b100 <usb_isr+0x620>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b158:	ldr	r1, [pc, #156]	; (b1f8 <usb_isr+0x718>)
    b15a:	ldr	r5, [pc, #172]	; (b208 <usb_isr+0x728>)
    b15c:	ldmia	r1, {r0, r1}
    b15e:	strh	r1, [r5, #4]
		if (usb_cdc_line_coding[0] == 134) {
    b160:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b162:	mov.w	r1, r1, lsr #16
    b166:	str	r0, [r5, #0]
    b168:	strb	r1, [r5, #6]
		if (usb_cdc_line_coding[0] == 134) {
    b16a:	bne.n	b100 <usb_isr+0x620>
	__disable_irq();
    b16c:	cpsid	i
	sof_usage |= (1 << interface);
    b16e:	ldr	r0, [pc, #156]	; (b20c <usb_isr+0x72c>)
    b170:	ldrb	r1, [r0, #0]
    b172:	orr.w	r1, r1, #64	; 0x40
    b176:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    b178:	ldr.w	r1, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    b17c:	lsls	r5, r1, #24
    b17e:	bmi.n	b18e <usb_isr+0x6ae>
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b180:	orr.w	r1, r1, #128	; 0x80
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    b184:	movs	r0, #128	; 0x80
    b186:	str.w	r0, [r3, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b18a:	str.w	r1, [r3, #328]	; 0x148
	__enable_irq();
    b18e:	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    b190:	ldr	r3, [pc, #124]	; (b210 <usb_isr+0x730>)
    b192:	movs	r1, #80	; 0x50
    b194:	strb	r1, [r3, #0]
    b196:	b.n	b100 <usb_isr+0x620>
	endpoint0_transfer_ack.next = 1;
    b198:	ldr	r2, [pc, #120]	; (b214 <usb_isr+0x734>)
			usb_audio_transmit_setting = setup.wValue;
    b19a:	ubfx	ip, r7, #16, #16
	endpoint_queue_head[1].status = 0;
    b19e:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b1a0:	str	r3, [r2, #8]
			usb_audio_transmit_setting = setup.wValue;
    b1a2:	ldr	r3, [pc, #116]	; (b218 <usb_isr+0x738>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b1a4:	str	r2, [r5, #72]	; 0x48
			usb_audio_transmit_setting = setup.wValue;
    b1a6:	strb.w	ip, [r3]
	endpoint0_transfer_ack.next = 1;
    b1aa:	movs	r3, #1
    b1ac:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b1ae:	movs	r3, #128	; 0x80
    b1b0:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b1b2:	mov.w	r3, #65537	; 0x10001
    b1b6:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b1ba:	ldr.w	r3, [r4, #432]	; 0x1b0
    b1be:	orr.w	r3, r3, #65536	; 0x10000
    b1c2:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b1c6:	ldr.w	r3, [r4, #432]	; 0x1b0
    b1ca:	cmp	r3, #0
    b1cc:	bne.n	b1c6 <usb_isr+0x6e6>
    b1ce:	b.n	abbe <usb_isr+0xde>
			endpoint0_buffer[0] = usb_audio_transmit_setting;
    b1d0:	ldr	r3, [pc, #68]	; (b218 <usb_isr+0x738>)
    b1d2:	b.n	ae64 <usb_isr+0x384>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b1d4:	ldr.w	sl, [pc, #68]	; b21c <usb_isr+0x73c>
    b1d8:	mov	r2, r7
    b1da:	mov	r0, sl
    b1dc:	bl	9d30 <memcpy>
    b1e0:	b.n	af86 <usb_isr+0x4a6>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    b1e2:	movs	r0, #6
    b1e4:	bl	aab4 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    b1e8:	bl	132e0 <___reboot_Teensyduino__veneer>
    b1ec:	.word	0x200052f8
    b1f0:	.word	0x02010121
    b1f4:	.word	0x01000121
    b1f8:	.word	0x20007680
    b1fc:	.word	0x20007dfa
    b200:	.word	0x60002214
    b204:	.word	0x600020bc
    b208:	.word	0x20007da4
    b20c:	.word	0x20007ded
    b210:	.word	0x20007dfb
    b214:	.word	0x20001ee0
    b218:	.word	0x20007df7
    b21c:	.word	0x20205100

0000b220 <usb_config_rx>:
{
    b220:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b224:	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b226:	subs	r3, r0, #2
    b228:	cmp	r3, #4
    b22a:	bls.n	b230 <usb_config_rx+0x10>
}
    b22c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b230:	ldr.w	r9, [pc, #76]	; b280 <usb_config_rx+0x60>
    b234:	mov	r5, r2
    b236:	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    b238:	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b23a:	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b23e:	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b240:	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b244:	movs	r1, #0
    b246:	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b24a:	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    b24c:	bl	dcd0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b250:	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    b254:	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b256:	lsrs	r2, r2, #5
    b258:	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    b25c:	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    b260:	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b264:	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    b268:	cmp	r7, #0
    b26a:	beq.n	b22c <usb_config_rx+0xc>
    b26c:	ldr	r2, [pc, #12]	; (b27c <usb_config_rx+0x5c>)
    b26e:	lsls	r3, r6
    b270:	ldr	r1, [r2, #0]
    b272:	orrs	r3, r1
    b274:	str	r3, [r2, #0]
}
    b276:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b27a:	nop
    b27c:	.word	0x2000768c
    b280:	.word	0x20000000

0000b284 <usb_config_tx>:
{
    b284:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b288:	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b28a:	subs	r1, r0, #2
    b28c:	cmp	r1, #4
    b28e:	bls.n	b294 <usb_config_tx+0x10>
}
    b290:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b294:	lsls	r7, r0, #7
    b296:	ldr.w	r9, [pc, #76]	; b2e4 <usb_config_tx+0x60>
    b29a:	mov	sl, r2
    b29c:	mov	r4, r0
    b29e:	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    b2a0:	movs	r2, #60	; 0x3c
    b2a2:	movs	r1, #0
    b2a4:	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b2a6:	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b2aa:	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    b2ac:	add.w	r0, r8, #4
    b2b0:	bl	dcd0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b2b4:	clz	r2, sl
    b2b8:	lsrs	r2, r2, #5
    b2ba:	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    b2be:	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    b2c2:	movs	r2, #1
	qh->callback_function = callback;
    b2c4:	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b2c8:	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b2cc:	cmp	r6, #0
    b2ce:	beq.n	b290 <usb_config_tx+0xc>
    b2d0:	ldr	r3, [pc, #12]	; (b2e0 <usb_config_tx+0x5c>)
    b2d2:	adds	r4, #16
    b2d4:	ldr	r1, [r3, #0]
    b2d6:	lsls	r2, r4
    b2d8:	orrs	r2, r1
    b2da:	str	r2, [r3, #0]
}
    b2dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b2e0:	.word	0x2000768c
    b2e4:	.word	0x20000000

0000b2e8 <usb_config_rx_iso>:
{
    b2e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b2ec:	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    b2ee:	subs	r2, #1
    b2f0:	cmp	r2, #2
    b2f2:	bhi.n	b2fe <usb_config_rx_iso+0x16>
    b2f4:	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b2f6:	subs	r3, r0, #2
    b2f8:	mov	r7, r0
    b2fa:	cmp	r3, #4
    b2fc:	bls.n	b302 <usb_config_rx_iso+0x1a>
}
    b2fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b302:	ldr.w	r9, [pc, #68]	; b348 <usb_config_rx_iso+0x60>
    b306:	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    b308:	lsls	r4, r4, #30
	memset(qh, 0, sizeof(endpoint_t));
    b30a:	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b30c:	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b310:	movs	r1, #0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b312:	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b316:	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (mult << 30);
    b31a:	orr.w	r4, r4, r6, lsl #16
	memset(qh, 0, sizeof(endpoint_t));
    b31e:	bl	dcd0 <memset>
	qh->next = 1; // Terminate bit = 1
    b322:	movs	r3, #1
	qh->config = config;
    b324:	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    b328:	str.w	r5, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b32c:	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    b330:	cmp	r5, #0
    b332:	beq.n	b2fe <usb_config_rx_iso+0x16>
    b334:	ldr	r2, [pc, #12]	; (b344 <usb_config_rx_iso+0x5c>)
    b336:	lsls	r3, r7
    b338:	ldr	r1, [r2, #0]
    b33a:	orrs	r3, r1
    b33c:	str	r3, [r2, #0]
}
    b33e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b342:	nop
    b344:	.word	0x2000768c
    b348:	.word	0x20000000

0000b34c <usb_config_tx_iso>:
{
    b34c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b350:	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    b352:	subs	r2, #1
    b354:	cmp	r2, #2
    b356:	bhi.n	b362 <usb_config_tx_iso+0x16>
    b358:	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b35a:	subs	r3, r0, #2
    b35c:	mov	r7, r0
    b35e:	cmp	r3, #4
    b360:	bls.n	b366 <usb_config_tx_iso+0x1a>
}
    b362:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b366:	mov.w	r8, r0, lsl #7
    b36a:	ldr.w	sl, [pc, #72]	; b3b4 <usb_config_tx_iso+0x68>
    b36e:	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    b370:	lsls	r4, r4, #30
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b372:	add.w	r8, r8, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    b376:	movs	r2, #60	; 0x3c
    b378:	movs	r1, #0
	uint32_t config = (packet_size << 16) | (mult << 30);
    b37a:	orr.w	r4, r4, r6, lsl #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b37e:	add.w	r9, sl, r8
	memset(qh, 0, sizeof(endpoint_t));
    b382:	add.w	r0, r9, #4
    b386:	bl	dcd0 <memset>
	qh->next = 1; // Terminate bit = 1
    b38a:	movs	r3, #1
	qh->config = config;
    b38c:	str.w	r4, [sl, r8]
	qh->callback_function = callback;
    b390:	str.w	r5, [r9, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b394:	str.w	r3, [r9, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b398:	cmp	r5, #0
    b39a:	beq.n	b362 <usb_config_tx_iso+0x16>
    b39c:	ldr	r2, [pc, #16]	; (b3b0 <usb_config_tx_iso+0x64>)
    b39e:	add.w	r0, r7, #16
    b3a2:	ldr	r1, [r2, #0]
    b3a4:	lsls	r3, r0
    b3a6:	orrs	r3, r1
    b3a8:	str	r3, [r2, #0]
}
    b3aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b3ae:	nop
    b3b0:	.word	0x2000768c
    b3b4:	.word	0x20000000

0000b3b8 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    b3b8:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    b3ba:	str	r1, [r0, #8]
	transfer->callback_param = param;
    b3bc:	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    b3be:	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    b3c2:	orr.w	r2, r2, #128	; 0x80
{
    b3c6:	push	{r4}
	transfer->next = 1;
    b3c8:	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    b3ca:	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    b3cc:	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    b3d0:	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    b3d2:	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    b3d6:	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    b3da:	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    b3dc:	str	r1, [r0, #24]
}
    b3de:	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    b3e2:	strd	r2, r3, [r0, #16]
}
    b3e6:	bx	lr

0000b3e8 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b3e8:	subs	r3, r0, #2
{
    b3ea:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b3ec:	cmp	r3, #4
    b3ee:	bls.n	b3f2 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    b3f0:	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b3f2:	ldr	r3, [pc, #24]	; (b40c <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    b3f4:	add.w	r1, r0, #16
    b3f8:	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b3fc:	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    b400:	lsl.w	r1, ip, r1
    b404:	adds	r0, #64	; 0x40
    b406:	b.w	a95c <schedule_transfer>
    b40a:	nop
    b40c:	.word	0x20000000

0000b410 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b410:	subs	r3, r0, #2
{
    b412:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b414:	cmp	r3, #4
    b416:	bls.n	b41a <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    b418:	bx	lr
	uint32_t mask = 1 << endpoint_number;
    b41a:	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    b41c:	ldr	r3, [pc, #8]	; (b428 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    b41e:	lsls	r1, r0
    b420:	add.w	r0, r3, r0, lsl #7
    b424:	b.w	a95c <schedule_transfer>
    b428:	.word	0x20000000

0000b42c <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    b42c:	ldr	r0, [r0, #4]
#endif
}
    b42e:	bx	lr

0000b430 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    b430:	cbnz	r0, b434 <delay+0x4>
    b432:	bx	lr
{
    b434:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b438:	movs	r1, #1
    b43a:	mov	r9, r0
    b43c:	ldr	r4, [pc, #132]	; (b4c4 <delay+0x94>)
    b43e:	ldr	r5, [pc, #136]	; (b4c8 <delay+0x98>)
    b440:	ldr	r6, [pc, #136]	; (b4cc <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b442:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    b446:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    b448:	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b44a:	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    b44e:	cmp	r3, #0
    b450:	bne.n	b442 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b452:	ldr	r1, [pc, #124]	; (b4d0 <delay+0xa0>)
    b454:	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    b456:	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b45a:	ldr.w	sl, [pc, #120]	; b4d4 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    b45e:	subs	r3, r3, r0
    b460:	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    b462:	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b466:	ldr.w	r2, [sl]
    b46a:	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    b46e:	cmp	r2, fp
    b470:	ite	ls
    b472:	addls	r8, r2
    b474:	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b476:	ldrex	r3, [r4]
		smc = systick_millis_count;
    b47a:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    b47c:	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b47e:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    b482:	cmp	r3, #0
    b484:	bne.n	b476 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b486:	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b488:	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    b48c:	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    b48e:	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b492:	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    b496:	cmp.w	ip, #1000	; 0x3e8
    b49a:	ite	ls
    b49c:	addls	r2, ip
    b49e:	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    b4a2:	sub.w	r2, r2, r8
    b4a6:	cmp.w	r2, #1000	; 0x3e8
    b4aa:	bcc.n	b4ba <delay+0x8a>
			if (--msec == 0) return;
    b4ac:	subs.w	r9, r9, #1
			start += 1000;
    b4b0:	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    b4b4:	bne.n	b476 <delay+0x46>
}
    b4b6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    b4ba:	bl	bd40 <yield>
		while ((micros() - start) >= 1000) {
    b4be:	ldr	r1, [pc, #16]	; (b4d0 <delay+0xa0>)
    b4c0:	b.n	b476 <delay+0x46>
    b4c2:	nop
    b4c4:	.word	0x20007d74
    b4c8:	.word	0x20007d70
    b4cc:	.word	0x20007d6c
    b4d0:	.word	0xe0001000
    b4d4:	.word	0x20007d68

0000b4d8 <micros>:
{
    b4d8:	push	{r4, r5}
    b4da:	ldr	r3, [pc, #60]	; (b518 <micros+0x40>)
    b4dc:	mov.w	ip, #1
    b4e0:	ldr	r5, [pc, #56]	; (b51c <micros+0x44>)
    b4e2:	ldr	r4, [pc, #60]	; (b520 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b4e4:	ldrex	r2, [r3]
		smc = systick_millis_count;
    b4e8:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    b4ea:	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b4ec:	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    b4f0:	cmp	r2, #0
    b4f2:	bne.n	b4e4 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b4f4:	ldr	r3, [pc, #44]	; (b524 <micros+0x4c>)
    b4f6:	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b4f8:	ldr	r2, [pc, #44]	; (b528 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    b4fa:	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    b4fc:	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b500:	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    b502:	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b506:	umull	r3, r2, r3, r2
	return usec;
}
    b50a:	pop	{r4, r5}
    b50c:	cmp	r2, r1
    b50e:	ite	ls
    b510:	addls	r0, r0, r2
    b512:	addhi	r0, r0, r1
    b514:	bx	lr
    b516:	nop
    b518:	.word	0x20007d74
    b51c:	.word	0x20007d70
    b520:	.word	0x20007d6c
    b524:	.word	0xe0001000
    b528:	.word	0x20007d68

0000b52c <unused_interrupt_vector>:
	__disable_irq();
    b52c:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    b52e:	mrs	r3, IPSR
	info->ipsr = ipsr;
    b532:	ldr	r4, [pc, #316]	; (b670 <unused_interrupt_vector+0x144>)
    b534:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    b538:	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    b53c:	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    b540:	ldr	r6, [pc, #304]	; (b674 <unused_interrupt_vector+0x148>)
	while (p < end) {
    b542:	ldr	r5, [pc, #308]	; (b678 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    b544:	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    b548:	ldr.w	r1, [r3, #3372]	; 0xd2c
    b54c:	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    b550:	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    b554:	ldr.w	r3, [r3, #3384]	; 0xd38
    b558:	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    b55c:	ldr	r3, [r2, #24]
    b55e:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    b562:	ldr	r3, [r2, #28]
    b564:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    b568:	bl	b804 <tempmonGetTemp>
    b56c:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    b570:	bl	b70c <rtc_get>
	info->len = sizeof(*info) / 4;
    b574:	movs	r1, #11
	crc = 0xFFFFFFFF;
    b576:	mov.w	r2, #4294967295
	info->time = rtc_get();
    b57a:	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    b57e:	mov	r3, r1
    b580:	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b584:	ldr	r1, [pc, #244]	; (b67c <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    b586:	adds	r0, r6, #4
    b588:	eors	r2, r3
    b58a:	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b58c:	and.w	r3, r2, #1
    b590:	subs	r4, #1
    b592:	mul.w	r3, r1, r3
    b596:	eor.w	r2, r3, r2, lsr #1
    b59a:	bne.n	b58c <unused_interrupt_vector+0x60>
	while (p < end) {
    b59c:	cmp	r0, r5
    b59e:	beq.n	b5a6 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    b5a0:	ldr	r3, [r6, #4]
    b5a2:	mov	r6, r0
    b5a4:	b.n	b586 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    b5a6:	ldr	r3, [pc, #200]	; (b670 <unused_interrupt_vector+0x144>)
    b5a8:	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    b5ac:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b5b0:	mov.w	r3, #3758153728	; 0xe000e000
    b5b4:	ldr	r1, [pc, #188]	; (b674 <unused_interrupt_vector+0x148>)
    b5b6:	ldr	r2, [pc, #200]	; (b680 <unused_interrupt_vector+0x154>)
    b5b8:	str.w	r1, [r3, #3952]	; 0xf70
    b5bc:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    b5c0:	dsb	sy
	asm("isb");
    b5c4:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b5c8:	ldr	r2, [pc, #184]	; (b684 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    b5ca:	movs	r5, #2
    b5cc:	ldr	r0, [pc, #184]	; (b688 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b5ce:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b5d0:	ldr	r1, [pc, #184]	; (b68c <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b5d2:	orr.w	r3, r3, #12288	; 0x3000
    b5d6:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    b5d8:	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b5da:	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b5dc:	ldr	r0, [pc, #176]	; (b690 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b5de:	bic.w	r3, r3, #127	; 0x7f
    b5e2:	orr.w	r3, r3, #64	; 0x40
    b5e6:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b5e8:	ldr	r3, [r1, #0]
    b5ea:	cmp	r3, r0
    b5ec:	bhi.n	b66a <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    b5ee:	ldr	r5, [pc, #152]	; (b688 <unused_interrupt_vector+0x15c>)
    b5f0:	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    b5f2:	mov.w	r3, #3758153728	; 0xe000e000
    b5f6:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    b5fa:	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b5fc:	movs	r6, #1
	PIT_TCTRL0 = 0;
    b5fe:	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    b602:	ldr	r1, [pc, #144]	; (b694 <unused_interrupt_vector+0x168>)
    b604:	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b608:	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    b60c:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    b610:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    b614:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    b618:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    b61c:	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    b620:	b.n	b626 <unused_interrupt_vector+0xfa>
		usb_isr();
    b622:	bl	aae0 <usb_isr>
		if (PIT_TFLG0) {
    b626:	ldr.w	r3, [r5, #268]	; 0x10c
    b62a:	cmp	r3, #0
    b62c:	beq.n	b622 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    b62e:	adds	r4, #1
			PIT_TFLG0 = 1;
    b630:	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    b634:	cmp	r4, #79	; 0x4f
    b636:	bls.n	b622 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b638:	ldr	r3, [pc, #92]	; (b698 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    b63a:	movs	r0, #2
    b63c:	ldr	r1, [pc, #92]	; (b69c <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b63e:	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    b642:	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b646:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b648:	ldr.w	r3, [r5, #268]	; 0x10c
    b64c:	cbnz	r3, b65e <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    b64e:	ldr	r0, [pc, #80]	; (b6a0 <unused_interrupt_vector+0x174>)
    b650:	ldr	r1, [pc, #80]	; (b6a4 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b652:	ldr	r2, [pc, #52]	; (b688 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    b654:	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b656:	ldr.w	r3, [r2, #268]	; 0x10c
    b65a:	cmp	r3, #0
    b65c:	beq.n	b654 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    b65e:	mov.w	r3, #3758153728	; 0xe000e000
    b662:	ldr	r2, [pc, #68]	; (b6a8 <unused_interrupt_vector+0x17c>)
    b664:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    b668:	b.n	b668 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b66a:	bl	a5a4 <set_arm_clock>
    b66e:	b.n	b5ee <unused_interrupt_vector+0xc2>
    b670:	.word	0x2027ff00
    b674:	.word	0x2027ff80
    b678:	.word	0x2027ffa8
    b67c:	.word	0xedb88320
    b680:	.word	0x2027ffa0
    b684:	.word	0x400fc000
    b688:	.word	0x40084000
    b68c:	.word	0x20001448
    b690:	.word	0x0bcd3d80
    b694:	.word	0x00249f00
    b698:	.word	0x400d9000
    b69c:	.word	0x402e0000
    b6a0:	.word	0x400f8000
    b6a4:	.word	0x0bad00f1
    b6a8:	.word	0x05fa0004

0000b6ac <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    b6ac:	ldr	r1, [pc, #40]	; (b6d8 <_sbrk+0x2c>)
    b6ae:	ldr	r2, [r1, #0]
        if (incr != 0) {
    b6b0:	cbz	r0, b6c2 <_sbrk+0x16>
{
    b6b2:	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    b6b4:	adds	r3, r2, r0
    b6b6:	ldr	r0, [pc, #36]	; (b6dc <_sbrk+0x30>)
    b6b8:	cmp	r3, r0
    b6ba:	bhi.n	b6c6 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    b6bc:	mov	r0, r2
                __brkval = prev + incr;
    b6be:	str	r3, [r1, #0]
}
    b6c0:	pop	{r3, pc}
    b6c2:	mov	r0, r2
    b6c4:	bx	lr
                        errno = ENOMEM;
    b6c6:	bl	df3c <__errno>
    b6ca:	movs	r3, #12
                        return (void *)-1;
    b6cc:	mov.w	r2, #4294967295
                        errno = ENOMEM;
    b6d0:	str	r3, [r0, #0]
}
    b6d2:	mov	r0, r2
    b6d4:	pop	{r3, pc}
    b6d6:	nop
    b6d8:	.word	0x2000147c
    b6dc:	.word	0x20280000

0000b6e0 <_read>:

__attribute__((weak))
int _read(int file, char *ptr, int len)
{
	return 0;
}
    b6e0:	movs	r0, #0
    b6e2:	bx	lr

0000b6e4 <_close>:

__attribute__((weak))
int _close(int fd)
{
	return -1;
}
    b6e4:	mov.w	r0, #4294967295
    b6e8:	bx	lr
    b6ea:	nop

0000b6ec <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    b6ec:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    b6f0:	movs	r0, #0
	st->st_mode = S_IFCHR;
    b6f2:	str	r3, [r1, #4]
}
    b6f4:	bx	lr
    b6f6:	nop

0000b6f8 <_isatty>:

__attribute__((weak))
int _isatty(int fd)
{
	return 1;
}
    b6f8:	movs	r0, #1
    b6fa:	bx	lr

0000b6fc <_lseek>:

__attribute__((weak))
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    b6fc:	mov.w	r0, #4294967295
    b700:	bx	lr
    b702:	nop

0000b704 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    b704:	wfi
    b706:	b.n	b704 <__cxa_pure_virtual>

0000b708 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    b708:	wfi
    b70a:	b.n	b708 <abort>

0000b70c <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    b70c:	ldr	r2, [pc, #28]	; (b72c <rtc_get+0x20>)
    b70e:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    b710:	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    b712:	mov	r1, r3
    b714:	mov	ip, r0
    b716:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    b718:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    b71a:	cmp	r1, r3
    b71c:	bne.n	b712 <rtc_get+0x6>
    b71e:	cmp	ip, r0
    b720:	bne.n	b712 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    b722:	lsrs	r3, r3, #15
}
    b724:	orr.w	r0, r3, r0, lsl #17
    b728:	bx	lr
    b72a:	nop
    b72c:	.word	0x400d4000

0000b730 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    b730:	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    b732:	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    b736:	cbz	r3, b750 <sm_align_pool+0x20>
    b738:	cbz	r2, b76a <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    b73a:	ldr	r3, [pc, #60]	; (b778 <sm_align_pool+0x48>)
    b73c:	umull	r1, r3, r3, r2
    b740:	lsrs	r3, r3, #3
    b742:	add.w	r3, r3, r3, lsl #1
    b746:	subs.w	r3, r2, r3, lsl #2
    b74a:	bne.n	b762 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    b74c:	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    b74e:	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    b750:	ldr	r3, [pc, #36]	; (b778 <sm_align_pool+0x48>)
    b752:	umull	r1, r3, r3, r2
    b756:	lsrs	r3, r3, #3
    b758:	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    b75c:	subs.w	r3, r2, r3, lsl #2
    b760:	beq.n	b766 <sm_align_pool+0x36>
    b762:	subs	r2, r2, r3
    b764:	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    b766:	cmp	r2, #240	; 0xf0
    b768:	bhi.n	b74c <sm_align_pool+0x1c>
		errno = ENOSPC;
    b76a:	bl	df3c <__errno>
    b76e:	movs	r2, #28
    b770:	mov	r3, r0
    b772:	movs	r0, #0
    b774:	str	r2, [r3, #0]
}
    b776:	pop	{r3, pc}
    b778:	.word	0xaaaaaaab

0000b77c <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    b77c:	push	{r4, r5, r6, lr}
	if (!spool) {
    b77e:	mov	r4, r0
    b780:	cbz	r0, b7d2 <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    b782:	cbz	r1, b78c <sm_set_pool+0x10>
    b784:	clz	r6, r2
    b788:	lsrs	r6, r6, #5
    b78a:	cbnz	r2, b7b6 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    b78c:	ldr	r0, [r4, #0]
    b78e:	cbz	r0, b7d2 <sm_set_pool+0x56>
    b790:	ldr	r2, [r4, #4]
    b792:	cbz	r2, b7d2 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    b794:	ldr	r3, [pc, #96]	; (b7f8 <sm_set_pool+0x7c>)
    b796:	ldr	r1, [pc, #100]	; (b7fc <sm_set_pool+0x80>)
    b798:	mul.w	r3, r2, r3
    b79c:	cmp.w	r1, r3, ror #2
    b7a0:	bcc.n	b7d2 <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    b7a2:	ldr	r3, [r4, #8]
    b7a4:	cbnz	r3, b7e0 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    b7a6:	movs	r2, #0
			return 1;
    b7a8:	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    b7aa:	str	r2, [r4, #0]
    b7ac:	str	r2, [r4, #4]
    b7ae:	str	r2, [r4, #8]
    b7b0:	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    b7b2:	mov	r0, r3
    b7b4:	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    b7b6:	mov	r5, r3
	spool->oomfn = oom_handler;
    b7b8:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    b7ba:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    b7be:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    b7c0:	bl	b730 <sm_align_pool>
    b7c4:	mov	r3, r0
    b7c6:	cmp	r0, #0
    b7c8:	beq.n	b7b2 <sm_set_pool+0x36>
	if (do_zero) {
    b7ca:	cbnz	r5, b7e8 <sm_set_pool+0x6c>
	return 1;
    b7cc:	movs	r3, #1
}
    b7ce:	mov	r0, r3
    b7d0:	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    b7d2:	bl	df3c <__errno>
    b7d6:	movs	r2, #22
		return 0;
    b7d8:	movs	r3, #0
		errno = EINVAL;
    b7da:	str	r2, [r0, #0]
}
    b7dc:	mov	r0, r3
    b7de:	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    b7e0:	movs	r1, #0
    b7e2:	bl	dcd0 <memset>
    b7e6:	b.n	b7a6 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    b7e8:	ldr	r2, [r4, #4]
    b7ea:	mov	r1, r6
    b7ec:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    b7ee:	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    b7f0:	bl	dcd0 <memset>
	return 1;
    b7f4:	movs	r3, #1
    b7f6:	b.n	b7b2 <sm_set_pool+0x36>
    b7f8:	.word	0xaaaaaaab
    b7fc:	.word	0x15555555

0000b800 <Panic_Temp_isr>:
  unused_interrupt_vector();
    b800:	b.w	b52c <unused_interrupt_vector>

0000b804 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    b804:	ldr	r2, [pc, #72]	; (b850 <tempmonGetTemp+0x4c>)
    b806:	ldr.w	r3, [r2, #128]	; 0x80
    b80a:	lsls	r3, r3, #29
    b80c:	bpl.n	b806 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    b80e:	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    b812:	ldr	r0, [pc, #64]	; (b854 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    b814:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    b818:	ldr	r1, [pc, #60]	; (b858 <tempmonGetTemp+0x54>)
    b81a:	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    b81e:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    b822:	vldr	s12, [r1]
    b826:	vcvt.f32.u32	s14, s14
    b82a:	ldr	r2, [pc, #48]	; (b85c <tempmonGetTemp+0x58>)
    b82c:	vcvt.f32.s32	s15, s15
    b830:	ldr	r3, [pc, #44]	; (b860 <tempmonGetTemp+0x5c>)
    b832:	vldr	s13, [r2]
    b836:	vsub.f32	s15, s15, s14
    b83a:	vldr	s14, [r3]
    b83e:	vcvt.f32.u32	s14, s14
    b842:	vmul.f32	s15, s15, s12
    b846:	vdiv.f32	s0, s15, s13

    return tmeas;
}
    b84a:	vsub.f32	s0, s14, s0
    b84e:	bx	lr
    b850:	.word	0x400d8100
    b854:	.word	0x20007d58
    b858:	.word	0x20007d60
    b85c:	.word	0x20007d64
    b860:	.word	0x20007d5c

0000b864 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    b864:	cmp	r0, #54	; 0x36
    b866:	bhi.n	b896 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    b868:	lsls	r2, r0, #4
    b86a:	ldr	r3, [pc, #64]	; (b8ac <digitalWrite+0x48>)
    b86c:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    b870:	ldr	r3, [r3, r2]
{
    b872:	push	{r4}
	mask = p->mask;
    b874:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    b876:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    b878:	tst	r4, r2
    b87a:	beq.n	b888 <digitalWrite+0x24>
		if (val) {
    b87c:	cbnz	r1, b898 <digitalWrite+0x34>
		}
	}
}
    b87e:	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    b882:	str.w	r2, [r3, #136]	; 0x88
}
    b886:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b888:	ldr	r3, [r0, #8]
		if (val) {
    b88a:	cbz	r1, b8a2 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b88c:	ldr	r2, [pc, #32]	; (b8b0 <digitalWrite+0x4c>)
}
    b88e:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b892:	str	r2, [r3, #0]
}
    b894:	bx	lr
    b896:	bx	lr
    b898:	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    b89c:	str.w	r2, [r3, #132]	; 0x84
}
    b8a0:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b8a2:	ldr	r2, [pc, #16]	; (b8b4 <digitalWrite+0x50>)
}
    b8a4:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b8a8:	str	r2, [r3, #0]
}
    b8aa:	bx	lr
    b8ac:	.word	0x20000eb0
    b8b0:	.word	0x0001f038
    b8b4:	.word	0x00013038

0000b8b8 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    b8b8:	cmp	r0, #54	; 0x36
    b8ba:	bhi.n	b8d4 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    b8bc:	ldr	r3, [pc, #24]	; (b8d8 <digitalRead+0x20>)
    b8be:	lsls	r2, r0, #4
    b8c0:	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    b8c4:	ldr	r2, [r3, r2]
    b8c6:	ldr	r3, [r0, #12]
    b8c8:	ldr	r2, [r2, #8]
    b8ca:	tst	r2, r3
    b8cc:	ite	ne
    b8ce:	movne	r0, #1
    b8d0:	moveq	r0, #0
    b8d2:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    b8d4:	movs	r0, #0
}
    b8d6:	bx	lr
    b8d8:	.word	0x20000eb0

0000b8dc <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    b8dc:	cmp	r0, #54	; 0x36
    b8de:	bhi.n	b934 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    b8e0:	ldr	r3, [pc, #88]	; (b93c <pinMode+0x60>)
    b8e2:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b8e4:	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    b8e6:	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b8ea:	ldr	r2, [r3, r2]
{
    b8ec:	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b8ee:	ldr	r3, [r2, #4]
    b8f0:	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b8f2:	beq.n	b912 <pinMode+0x36>
    b8f4:	cmp	r1, #4
    b8f6:	beq.n	b912 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b8f8:	bic.w	r3, r3, r4
    b8fc:	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b8fe:	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    b900:	cbz	r1, b92e <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    b902:	cmp	r1, #2
    b904:	beq.n	b936 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    b906:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b908:	ite	eq
    b90a:	ldreq	r2, [pc, #52]	; (b940 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    b90c:	ldrne	r2, [pc, #52]	; (b944 <pinMode+0x68>)
    b90e:	str	r2, [r3, #0]
    b910:	b.n	b922 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    b912:	orrs	r3, r4
		if (mode == OUTPUT) {
    b914:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    b916:	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b918:	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    b91a:	beq.n	b92e <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    b91c:	movw	r2, #2104	; 0x838
    b920:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    b922:	ldr	r3, [r0, #4]
    b924:	movs	r2, #21
}
    b926:	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    b92a:	str	r2, [r3, #0]
}
    b92c:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b92e:	movs	r2, #56	; 0x38
    b930:	str	r2, [r3, #0]
    b932:	b.n	b922 <pinMode+0x46>
    b934:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b936:	ldr	r2, [pc, #16]	; (b948 <pinMode+0x6c>)
    b938:	str	r2, [r3, #0]
    b93a:	b.n	b922 <pinMode+0x46>
    b93c:	.word	0x20000eb0
    b940:	.word	0x00013038
    b944:	.word	0x00010038
    b948:	.word	0x0001f038

0000b94c <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    b94c:	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    b94e:	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b950:	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    b954:	mov	r1, r3
{
    b956:	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b958:	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b95c:	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b960:	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b964:	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    b968:	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    b96c:	mov	r2, r1
	p->FFILT0 = 0;
    b96e:	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b972:	ldrh.w	r3, [r0, #392]	; 0x188
    b976:	uxth	r3, r3
    b978:	orr.w	r3, r3, #240	; 0xf0
    b97c:	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b980:	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    b984:	adds	r1, #1
    b986:	add.w	r3, r0, r3, lsl #5
    b98a:	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b98c:	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b98e:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b992:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b994:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b996:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b998:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b99a:	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    b99e:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b9a0:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b9a2:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b9a4:	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    b9a6:	bne.n	b980 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b9a8:	ldrh.w	r3, [r0, #392]	; 0x188
    b9ac:	uxth	r3, r3
    b9ae:	orr.w	r3, r3, #15
    b9b2:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b9b6:	ldrh.w	r3, [r0, #392]	; 0x188
    b9ba:	uxth	r3, r3
    b9bc:	orr.w	r3, r3, #3840	; 0xf00
    b9c0:	strh.w	r3, [r0, #392]	; 0x188
}
    b9c4:	pop	{r4, pc}
    b9c6:	nop

0000b9c8 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b9c8:	ldr	r3, [pc, #220]	; (baa8 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b9ca:	ldr	r2, [pc, #224]	; (baac <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b9cc:	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    b9ce:	ldr	r0, [pc, #224]	; (bab0 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b9d0:	orr.w	r1, r1, #16711680	; 0xff0000
{
    b9d4:	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b9d6:	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b9d8:	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b9dc:	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b9e0:	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b9e4:	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b9e8:	orrs	r2, r1
    b9ea:	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    b9ee:	bl	b94c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    b9f2:	add.w	r0, r0, #16384	; 0x4000
    b9f6:	bl	b94c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    b9fa:	add.w	r0, r0, #16384	; 0x4000
    b9fe:	bl	b94c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    ba02:	add.w	r0, r0, #16384	; 0x4000
    ba06:	bl	b94c <flexpwm_init>
	for (i=0; i < 4; i++) {
    ba0a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    ba0c:	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ba10:	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    ba14:	mov	r1, r2
    ba16:	add.w	r3, r0, r2, lsl #5
    ba1a:	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    ba1e:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    ba20:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    ba22:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    ba24:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ba26:	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ba2a:	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ba2c:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    ba2e:	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    ba32:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ba34:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    ba36:	bne.n	ba16 <pwm_init+0x4e>
    ba38:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    ba3a:	ldr	r0, [pc, #120]	; (bab4 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ba3c:	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ba40:	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    ba44:	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ba46:	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ba4a:	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    ba4e:	add.w	r3, r0, r2, lsl #5
    ba52:	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    ba56:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    ba58:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    ba5a:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    ba5c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ba5e:	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ba62:	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ba64:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    ba66:	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    ba6a:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ba6c:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    ba6e:	bne.n	ba4e <pwm_init+0x86>
    ba70:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    ba72:	ldr	r0, [pc, #68]	; (bab8 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ba74:	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ba76:	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    ba7a:	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ba7c:	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ba80:	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    ba84:	add.w	r3, r0, r2, lsl #5
    ba88:	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    ba8c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    ba8e:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    ba90:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    ba92:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ba94:	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ba96:	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ba98:	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    ba9a:	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    ba9e:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    baa0:	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    baa4:	bne.n	ba84 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    baa6:	pop	{r4, r5, r6, pc}
    baa8:	.word	0x400fc000
    baac:	.word	0xfc030000
    bab0:	.word	0x403dc000
    bab4:	.word	0x401e0000
    bab8:	.word	0x401e4000

0000babc <rx_queue_transfer>:
{
    babc:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    babe:	ldr	r4, [pc, #80]	; (bb10 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    bac0:	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    bac4:	ldr	r6, [pc, #76]	; (bb14 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    bac6:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    baca:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    bace:	ldr	r7, [pc, #72]	; (bb18 <rx_queue_transfer+0x5c>)
    bad0:	add.w	r6, r6, r0, lsl #5
{
    bad4:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    bad6:	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    bada:	mov	r1, r4
    badc:	ldrh	r2, [r7, #0]
    bade:	mov	r0, r6
    bae0:	bl	b3b8 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    bae4:	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    bae6:	add	r3, r4
	asm("dsb");
    bae8:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    baec:	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    baf0:	adds	r4, #32
	} while (location < end_addr);
    baf2:	cmp	r3, r4
    baf4:	bhi.n	baec <rx_queue_transfer+0x30>
	asm("dsb");
    baf6:	dsb	sy
	asm("isb");
    bafa:	isb	sy
	usb_receive(MIDI_RX_ENDPOINT, rx_transfer + i);
    bafe:	movs	r0, #4
    bb00:	mov	r1, r6
    bb02:	bl	b410 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    bb06:	mov.w	r3, #131072	; 0x20000
    bb0a:	str.w	r3, [r5, #268]	; 0x10c
}
    bb0e:	pop	{r3, r4, r5, r6, r7, pc}
    bb10:	.word	0x20203d00
    bb14:	.word	0x20003020
    bb18:	.word	0x20007dd0

0000bb1c <rx_event>:
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    bb1c:	ldr	r2, [r0, #4]
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
    bb1e:	movw	r1, #65532	; 0xfffc
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    bb22:	ldr	r3, [pc, #68]	; (bb68 <rx_event+0x4c>)
    bb24:	ubfx	r2, r2, #16, #15
	int i = t->callback_param;
    bb28:	ldr	r0, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    bb2a:	ldrh	r3, [r3, #0]
    bb2c:	subs	r3, r3, r2
	if (len > 0) {
    bb2e:	ands	r3, r1
    bb30:	beq.n	bb62 <rx_event+0x46>
		rx_count[i] = len;
    bb32:	ldr	r1, [pc, #56]	; (bb6c <rx_event+0x50>)
{
    bb34:	push	{r4, r5}
		uint32_t head = rx_head;
    bb36:	ldr	r4, [pc, #56]	; (bb70 <rx_event+0x54>)
		rx_index[i] = 0;
    bb38:	ldr	r5, [pc, #56]	; (bb74 <rx_event+0x58>)
		uint32_t head = rx_head;
    bb3a:	ldrb	r2, [r4, #0]
		rx_count[i] = len;
    bb3c:	strh.w	r3, [r1, r0, lsl #1]
		rx_index[i] = 0;
    bb40:	movs	r1, #0
		if (++head > RX_NUM) head = 0;
    bb42:	adds	r2, #1
		rx_index[i] = 0;
    bb44:	strh.w	r1, [r5, r0, lsl #1]
		if (++head > RX_NUM) head = 0;
    bb48:	cmp	r2, #6
		rx_head = head;
    bb4a:	ite	ls
    bb4c:	uxtbls	r1, r2
		if (++head > RX_NUM) head = 0;
    bb4e:	movhi	r2, r1
		rx_head = head;
    bb50:	strb	r1, [r4, #0]
		rx_available += len;
    bb52:	ldr	r1, [pc, #36]	; (bb78 <rx_event+0x5c>)
    bb54:	ldr	r4, [r1, #0]
    bb56:	add	r3, r4
    bb58:	str	r3, [r1, #0]
		rx_list[head] = i;
    bb5a:	ldr	r3, [pc, #32]	; (bb7c <rx_event+0x60>)
    bb5c:	strb	r0, [r3, r2]
}
    bb5e:	pop	{r4, r5}
    bb60:	bx	lr
		rx_queue_transfer(i);
    bb62:	b.w	babc <rx_queue_transfer>
    bb66:	nop
    bb68:	.word	0x20007dd0
    bb6c:	.word	0x20007d1c
    bb70:	.word	0x20007dea
    bb74:	.word	0x20007d38
    bb78:	.word	0x20007d08
    bb7c:	.word	0x20007d50

0000bb80 <usb_midi_configure>:
	if (usb_high_speed) {
    bb80:	ldr	r3, [pc, #132]	; (bc08 <usb_midi_configure+0x88>)
{
    bb82:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    bb84:	ldrb	r3, [r3, #0]
    bb86:	cmp	r3, #0
    bb88:	beq.n	bc02 <usb_midi_configure+0x82>
    bb8a:	mov.w	r3, #512	; 0x200
    bb8e:	mov	r6, r3
		rx_packet_size = MIDI_RX_SIZE_480;
    bb90:	ldr	r1, [pc, #120]	; (bc0c <usb_midi_configure+0x8c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bb92:	movs	r2, #128	; 0x80
		tx_packet_size = MIDI_TX_SIZE_480;
    bb94:	ldr	r5, [pc, #120]	; (bc10 <usb_midi_configure+0x90>)
	tx_head = 0;
    bb96:	movs	r4, #0
		rx_packet_size = MIDI_RX_SIZE_480;
    bb98:	strh	r3, [r1, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bb9a:	movs	r1, #0
    bb9c:	ldr	r0, [pc, #116]	; (bc14 <usb_midi_configure+0x94>)
		tx_packet_size = MIDI_TX_SIZE_480;
    bb9e:	strh	r3, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bba0:	bl	dcd0 <memset>
	tx_head = 0;
    bba4:	ldr	r2, [pc, #112]	; (bc18 <usb_midi_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bba6:	mov	r1, r4
	tx_available = 0;
    bba8:	ldr	r3, [pc, #112]	; (bc1c <usb_midi_configure+0x9c>)
	tx_head = 0;
    bbaa:	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bbac:	movs	r2, #192	; 0xc0
    bbae:	ldr	r0, [pc, #112]	; (bc20 <usb_midi_configure+0xa0>)
	tx_available = 0;
    bbb0:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bbb2:	bl	dcd0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    bbb6:	ldr	r2, [pc, #108]	; (bc24 <usb_midi_configure+0xa4>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bbb8:	mov	r1, r6
	memset(rx_index, 0, sizeof(rx_index));
    bbba:	ldr	r3, [pc, #108]	; (bc28 <usb_midi_configure+0xa8>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bbbc:	movs	r0, #4
	memset(rx_count, 0, sizeof(rx_count));
    bbbe:	str	r4, [r2, #8]
	memset(rx_index, 0, sizeof(rx_index));
    bbc0:	str	r4, [r3, #8]
	memset(rx_count, 0, sizeof(rx_count));
    bbc2:	strd	r4, r4, [r2]
	rx_head = 0;
    bbc6:	ldr	r2, [pc, #100]	; (bc2c <usb_midi_configure+0xac>)
	memset(rx_index, 0, sizeof(rx_index));
    bbc8:	strd	r4, r4, [r3]
	rx_head = 0;
    bbcc:	strb	r4, [r2, #0]
	rx_tail = 0;
    bbce:	ldr	r3, [pc, #96]	; (bc30 <usb_midi_configure+0xb0>)
	rx_available = 0;
    bbd0:	ldr	r2, [pc, #96]	; (bc34 <usb_midi_configure+0xb4>)
	rx_tail = 0;
    bbd2:	strb	r4, [r3, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bbd4:	ldr	r3, [pc, #96]	; (bc38 <usb_midi_configure+0xb8>)
	rx_available = 0;
    bbd6:	str	r4, [r2, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bbd8:	mov	r2, r4
    bbda:	bl	b220 <usb_config_rx>
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
    bbde:	mov	r3, r4
    bbe0:	mov	r2, r4
    bbe2:	ldrh	r1, [r5, #0]
    bbe4:	movs	r0, #4
    bbe6:	bl	b284 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    bbea:	mov	r0, r4
    bbec:	adds	r4, #1
    bbee:	bl	babc <rx_queue_transfer>
    bbf2:	cmp	r4, #6
    bbf4:	bne.n	bbea <usb_midi_configure+0x6a>
	transmit_previous_timeout = 0;
    bbf6:	movs	r3, #0
    bbf8:	ldr	r1, [pc, #64]	; (bc3c <usb_midi_configure+0xbc>)
	tx_noautoflush = 0;
    bbfa:	ldr	r2, [pc, #68]	; (bc40 <usb_midi_configure+0xc0>)
	transmit_previous_timeout = 0;
    bbfc:	strb	r3, [r1, #0]
	tx_noautoflush = 0;
    bbfe:	strb	r3, [r2, #0]
}
    bc00:	pop	{r4, r5, r6, pc}
    bc02:	movs	r3, #64	; 0x40
    bc04:	mov	r6, r3
    bc06:	b.n	bb90 <usb_midi_configure+0x10>
    bc08:	.word	0x20007dfa
    bc0c:	.word	0x20007dd0
    bc10:	.word	0x20007dd8
    bc14:	.word	0x200031a0
    bc18:	.word	0x20007df1
    bc1c:	.word	0x20007dd4
    bc20:	.word	0x20003020
    bc24:	.word	0x20007d1c
    bc28:	.word	0x20007d38
    bc2c:	.word	0x20007dea
    bc30:	.word	0x20007dec
    bc34:	.word	0x20007d08
    bc38:	.word	0x0000bb1d
    bc3c:	.word	0x20007def
    bc40:	.word	0x20007df3

0000bc44 <usb_midi_flush_output>:
{
    bc44:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tx_noautoflush == 0 && tx_available > 0) {
    bc48:	ldr	r3, [pc, #132]	; (bcd0 <usb_midi_flush_output+0x8c>)
    bc4a:	ldrb	r5, [r3, #0]
    bc4c:	cbnz	r5, bc54 <usb_midi_flush_output+0x10>
    bc4e:	ldr	r6, [pc, #132]	; (bcd4 <usb_midi_flush_output+0x90>)
    bc50:	ldrh	r3, [r6, #0]
    bc52:	cbnz	r3, bc58 <usb_midi_flush_output+0x14>
}
    bc54:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint32_t head = tx_head;
    bc58:	ldr.w	r8, [pc, #136]	; bce4 <usb_midi_flush_output+0xa0>
		transfer_t *xfer = tx_transfer + head;
    bc5c:	ldr	r2, [pc, #120]	; (bcd8 <usb_midi_flush_output+0x94>)
		uint32_t head = tx_head;
    bc5e:	ldrb.w	r7, [r8]
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    bc62:	ldr	r4, [pc, #120]	; (bcdc <usb_midi_flush_output+0x98>)
		transfer_t *xfer = tx_transfer + head;
    bc64:	add.w	r9, r2, r7, lsl #5
		uint32_t len = tx_packet_size - tx_available;
    bc68:	ldr	r2, [pc, #116]	; (bce0 <usb_midi_flush_output+0x9c>)
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    bc6a:	add.w	r4, r4, r7, lsl #9
		uint32_t len = tx_packet_size - tx_available;
    bc6e:	ldrh	r2, [r2, #0]
		usb_prepare_transfer(xfer, txbuf, len, 0);
    bc70:	mov	r0, r9
    bc72:	mov	r1, r4
    bc74:	subs	r2, r2, r3
    bc76:	mov	r3, r5
    bc78:	bl	b3b8 <usb_prepare_transfer>
	asm("dsb");
    bc7c:	dsb	sy
    bc80:	add.w	r2, r4, #32
	uint32_t end_addr = (uint32_t)addr + size;
    bc84:	add.w	r3, r4, #512	; 0x200
    bc88:	cmp	r3, r2
    bc8a:	ite	cc
    bc8c:	movcc	r3, #1
    bc8e:	movcs	r3, #16
		SCB_CACHE_DCCIMVAC = location;
    bc90:	mov.w	r2, #3758153728	; 0xe000e000
    bc94:	add.w	r3, r4, r3, lsl #5
    bc98:	str.w	r4, [r2, #3952]	; 0xf70
		location += 32;
    bc9c:	adds	r4, #32
	} while (location < end_addr);
    bc9e:	cmp	r4, r3
    bca0:	bne.n	bc98 <usb_midi_flush_output+0x54>
	asm("dsb");
    bca2:	dsb	sy
	asm("isb");
    bca6:	isb	sy
		if (++head >= TX_NUM) head = 0;
    bcaa:	adds	r7, #1
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
    bcac:	mov	r1, r9
    bcae:	movs	r0, #4
    bcb0:	bl	b3e8 <usb_transmit>
		if (++head >= TX_NUM) head = 0;
    bcb4:	cmp	r7, #3
		tx_available = 0;
    bcb6:	mov.w	r3, #0
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    bcba:	mov.w	r0, #2
		tx_head = head;
    bcbe:	it	ls
    bcc0:	uxtbls	r5, r7
		tx_available = 0;
    bcc2:	strh	r3, [r6, #0]
		tx_head = head;
    bcc4:	strb.w	r5, [r8]
}
    bcc8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    bccc:	b.w	aab4 <usb_stop_sof_interrupts>
    bcd0:	.word	0x20007df3
    bcd4:	.word	0x20007dd4
    bcd8:	.word	0x200031a0
    bcdc:	.word	0x20204900
    bce0:	.word	0x20007dd8
    bce4:	.word	0x20007df1

0000bce8 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    bce8:	ldr	r2, [pc, #72]	; (bd34 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    bcea:	ldr	r3, [pc, #76]	; (bd38 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    bcec:	ldr.w	r0, [r2, #544]	; 0x220
    bcf0:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    bcf4:	cmp	r0, r3
{
    bcf6:	push	{r4, lr}
    bcf8:	sub	sp, #16
	if (num < 10000000) num = num * 10;
    bcfa:	bcs.n	bd02 <usb_init_serialnumber+0x1a>
    bcfc:	add.w	r0, r0, r0, lsl #2
    bd00:	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    bd02:	ldr	r4, [pc, #56]	; (bd3c <usb_init_serialnumber+0x54>)
    bd04:	add	r1, sp, #4
    bd06:	movs	r2, #10
    bd08:	bl	cd0c <ultoa>
	for (i=0; i<10; i++) {
    bd0c:	add	r1, sp, #4
    bd0e:	movs	r3, #0
    bd10:	mov	r0, r4
		char c = buf[i];
    bd12:	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    bd16:	adds	r3, #1
		if (!c) break;
    bd18:	cbz	r2, bd2a <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    bd1a:	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    bd1c:	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    bd20:	bne.n	bd12 <usb_init_serialnumber+0x2a>
    bd22:	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    bd24:	strb	r3, [r4, #0]
}
    bd26:	add	sp, #16
    bd28:	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    bd2a:	lsls	r3, r3, #1
    bd2c:	uxtb	r3, r3
    bd2e:	strb	r3, [r4, #0]
}
    bd30:	add	sp, #16
    bd32:	pop	{r4, pc}
    bd34:	.word	0x401f4400
    bd38:	.word	0x00989680
    bd3c:	.word	0x20001a24

0000bd40 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    bd40:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    bd44:	ldr	r6, [pc, #200]	; (be10 <yield+0xd0>)
    bd46:	ldrb	r3, [r6, #0]
    bd48:	cbz	r3, bd64 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    bd4a:	ldr	r7, [pc, #200]	; (be14 <yield+0xd4>)
    bd4c:	ldrb	r2, [r7, #0]
    bd4e:	cbnz	r2, bd64 <yield+0x24>
	running = 1;
    bd50:	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    bd52:	lsls	r1, r3, #31
	running = 1;
    bd54:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    bd56:	bmi.n	bde2 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    bd58:	lsls	r2, r3, #30
    bd5a:	bmi.n	bdaa <yield+0x6a>

	running = 0;
    bd5c:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    bd5e:	lsls	r3, r3, #29
	running = 0;
    bd60:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    bd62:	bmi.n	bd68 <yield+0x28>
	
};
    bd64:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    bd68:	ldr	r3, [pc, #172]	; (be18 <yield+0xd8>)
    bd6a:	ldr	r2, [r3, #0]
    bd6c:	cmp	r2, #0
    bd6e:	beq.n	bd64 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    bd70:	mrs	r2, IPSR
		if (ipsr != 0) return;
    bd74:	cmp	r2, #0
    bd76:	bne.n	bd64 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bd78:	mrs	r5, PRIMASK
		__disable_irq();
    bd7c:	cpsid	i
		EventResponder *first = firstYield;
    bd7e:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    bd80:	cmp	r0, #0
    bd82:	beq.n	bdfc <yield+0xbc>
		if (runningFromYield) {
    bd84:	ldr	r4, [pc, #148]	; (be1c <yield+0xdc>)
    bd86:	ldrb	r1, [r4, #0]
    bd88:	cmp	r1, #0
    bd8a:	bne.n	bdfc <yield+0xbc>
		runningFromYield = true;
    bd8c:	movs	r2, #1
    bd8e:	strb	r2, [r4, #0]
		firstYield = first->_next;
    bd90:	ldr	r2, [r0, #20]
    bd92:	str	r2, [r3, #0]
		if (firstYield) {
    bd94:	cmp	r2, #0
    bd96:	beq.n	be0a <yield+0xca>
			firstYield->_prev = nullptr;
    bd98:	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    bd9a:	cbnz	r5, bd9e <yield+0x5e>
    bd9c:	cpsie	i
		first->_triggered = false;
    bd9e:	movs	r5, #0
		(*(first->_function))(*first);
    bda0:	ldr	r3, [r0, #8]
		first->_triggered = false;
    bda2:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    bda4:	blx	r3
		runningFromYield = false;
    bda6:	strb	r5, [r4, #0]
    bda8:	b.n	bd64 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    bdaa:	ldr.w	r8, [pc, #124]	; be28 <yield+0xe8>
    bdae:	ldrb.w	r2, [r8]
    bdb2:	cmp	r2, #0
    bdb4:	beq.n	bd5c <yield+0x1c>
    bdb6:	movs	r5, #0
    bdb8:	ldr.w	r9, [pc, #112]	; be2c <yield+0xec>
    bdbc:	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    bdbe:	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    bdc2:	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    bdc4:	ldr	r3, [r4, #0]
    bdc6:	mov	r0, r4
    bdc8:	ldr	r3, [r3, #16]
    bdca:	blx	r3
    bdcc:	cbz	r0, bdd4 <yield+0x94>
    bdce:	ldr	r3, [r4, #20]
    bdd0:	ldr	r3, [r3, #8]
    bdd2:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    bdd4:	ldrb.w	r2, [r8]
    bdd8:	uxtb	r3, r5
    bdda:	cmp	r2, r3
    bddc:	bhi.n	bdbe <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    bdde:	ldrb	r3, [r6, #0]
    bde0:	b.n	bd5c <yield+0x1c>
    bde2:	bl	a3d4 <usb_serial_available>
		if (Serial.available()) serialEvent();
    bde6:	cbnz	r0, be04 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    bde8:	ldr	r3, [pc, #52]	; (be20 <yield+0xe0>)
    bdea:	ldrb	r3, [r3, #0]
    bdec:	cbnz	r3, bdf2 <yield+0xb2>
    bdee:	ldrb	r3, [r6, #0]
    bdf0:	b.n	bd58 <yield+0x18>
    bdf2:	ldrb	r3, [r6, #0]
    bdf4:	and.w	r3, r3, #254	; 0xfe
    bdf8:	strb	r3, [r6, #0]
    bdfa:	b.n	bd58 <yield+0x18>
		if (doit) __enable_irq();
    bdfc:	cmp	r5, #0
    bdfe:	bne.n	bd64 <yield+0x24>
    be00:	cpsie	i
    be02:	b.n	bd64 <yield+0x24>
		if (Serial.available()) serialEvent();
    be04:	bl	cd00 <serialEvent()>
    be08:	b.n	bde8 <yield+0xa8>
			lastYield = nullptr;
    be0a:	ldr	r3, [pc, #24]	; (be24 <yield+0xe4>)
    be0c:	str	r2, [r3, #0]
    be0e:	b.n	bd9a <yield+0x5a>
    be10:	.word	0x20001a3b
    be14:	.word	0x20007de5
    be18:	.word	0x20006204
    be1c:	.word	0x20007de2
    be20:	.word	0x60002376
    be24:	.word	0x20006210
    be28:	.word	0x20007de3
    be2c:	.word	0x20006214

0000be30 <EventResponder::triggerEventNotImmediate()>:
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    be30:	mrs	r2, PRIMASK
		__disable_irq();
    be34:	cpsid	i
	if (_triggered == false) {
    be36:	ldrb	r3, [r0, #29]
    be38:	cbnz	r3, be52 <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    be3a:	ldrb	r1, [r0, #28]
    be3c:	cmp	r1, #1
{
    be3e:	push	{r4, r5}
		if (_type == EventTypeYield) {
    be40:	beq.n	be5a <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    be42:	cmp	r1, #3
    be44:	beq.n	be6e <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    be46:	movs	r3, #1
    be48:	strb	r3, [r0, #29]
		if (doit) __enable_irq();
    be4a:	cbnz	r2, be4e <EventResponder::triggerEventNotImmediate()+0x1e>
    be4c:	cpsie	i
}
    be4e:	pop	{r4, r5}
    be50:	bx	lr
    be52:	cbnz	r2, be58 <EventResponder::triggerEventNotImmediate()+0x28>
    be54:	cpsie	i
    be56:	bx	lr
    be58:	bx	lr
			if (firstYield == nullptr) {
    be5a:	ldr	r4, [pc, #72]	; (bea4 <EventResponder::triggerEventNotImmediate()+0x74>)
    be5c:	ldr	r1, [r4, #0]
    be5e:	cbz	r1, be8e <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    be60:	ldr	r1, [pc, #68]	; (bea8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    be62:	str	r3, [r0, #20]
				_prev = lastYield;
    be64:	ldr	r3, [r1, #0]
				lastYield = this;
    be66:	str	r0, [r1, #0]
				_prev = lastYield;
    be68:	str	r3, [r0, #24]
				_prev->_next = this;
    be6a:	str	r0, [r3, #20]
				lastYield = this;
    be6c:	b.n	be46 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    be6e:	ldr	r5, [pc, #60]	; (beac <EventResponder::triggerEventNotImmediate()+0x7c>)
    be70:	ldr	r1, [pc, #60]	; (beb0 <EventResponder::triggerEventNotImmediate()+0x80>)
    be72:	ldr	r4, [r5, #0]
    be74:	cbz	r4, be9a <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    be76:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    be78:	ldr	r3, [r1, #0]
    be7a:	str	r3, [r0, #24]
				_prev->_next = this;
    be7c:	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    be7e:	mov.w	r3, #3758153728	; 0xe000e000
    be82:	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    be86:	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    be88:	str.w	r4, [r3, #3332]	; 0xd04
    be8c:	b.n	be46 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    be8e:	ldr	r3, [pc, #24]	; (bea8 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    be90:	str	r0, [r4, #0]
				lastYield = this;
    be92:	str	r0, [r3, #0]
				_prev = nullptr;
    be94:	strd	r1, r1, [r0, #20]
				lastYield = this;
    be98:	b.n	be46 <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    be9a:	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    be9e:	str	r0, [r5, #0]
				lastInterrupt = this;
    bea0:	b.n	be7e <EventResponder::triggerEventNotImmediate()+0x4e>
    bea2:	nop
    bea4:	.word	0x20006204
    bea8:	.word	0x20006210
    beac:	.word	0x2000620c
    beb0:	.word	0x20006208

0000beb4 <EventResponder::runFromInterrupt()>:
{
    beb4:	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    beb6:	mrs	r2, PRIMASK
		__disable_irq();
    beba:	cpsid	i
		EventResponder *first = firstInterrupt;
    bebc:	ldr	r4, [pc, #48]	; (bef0 <EventResponder::runFromInterrupt()+0x3c>)
    bebe:	ldr	r0, [r4, #0]
		if (first) {
    bec0:	cbz	r0, bee4 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    bec2:	ldr	r6, [pc, #48]	; (bef4 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    bec4:	movs	r5, #0
			firstInterrupt = first->_next;
    bec6:	ldr	r3, [r0, #20]
    bec8:	str	r3, [r4, #0]
			if (firstInterrupt) {
    beca:	cbz	r3, beea <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    becc:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    bece:	cbnz	r2, bed2 <EventResponder::runFromInterrupt()+0x1e>
    bed0:	cpsie	i
			(*(first->_function))(*first);
    bed2:	ldr	r3, [r0, #8]
			first->_triggered = false;
    bed4:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    bed6:	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bed8:	mrs	r2, PRIMASK
		__disable_irq();
    bedc:	cpsid	i
		EventResponder *first = firstInterrupt;
    bede:	ldr	r0, [r4, #0]
		if (first) {
    bee0:	cmp	r0, #0
    bee2:	bne.n	bec6 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    bee4:	cbnz	r2, bee8 <EventResponder::runFromInterrupt()+0x34>
    bee6:	cpsie	i
}
    bee8:	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    beea:	str	r3, [r6, #0]
    beec:	b.n	bece <EventResponder::runFromInterrupt()+0x1a>
    beee:	nop
    bef0:	.word	0x2000620c
    bef4:	.word	0x20006208

0000bef8 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    bef8:	b.w	beb4 <EventResponder::runFromInterrupt()>

0000befc <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    befc:	ldr	r1, [pc, #16]	; (bf10 <systick_isr+0x14>)
	systick_millis_count++;
    befe:	ldr	r2, [pc, #20]	; (bf14 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    bf00:	ldr	r1, [r1, #4]
    bf02:	ldr	r3, [pc, #20]	; (bf18 <systick_isr+0x1c>)
    bf04:	str	r1, [r3, #0]
	systick_millis_count++;
    bf06:	ldr	r3, [r2, #0]
    bf08:	adds	r3, #1
    bf0a:	str	r3, [r2, #0]
}
    bf0c:	bx	lr
    bf0e:	nop
    bf10:	.word	0xe0001000
    bf14:	.word	0x20007d70
    bf18:	.word	0x20007d6c

0000bf1c <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    bf1c:	push	{r4, r5}
	uint32_t ch = 0;

	__disable_irq();
    bf1e:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    bf20:	cbnz	r1, bf2c <DMAChannel::begin(bool)+0x10>
    bf22:	ldr	r3, [r0, #0]
    bf24:	cbz	r3, bf2c <DMAChannel::begin(bool)+0x10>
    bf26:	ldrb	r2, [r0, #4]
    bf28:	cmp	r2, #15
    bf2a:	bls.n	bfa4 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    bf2c:	ldr	r4, [pc, #144]	; (bfc0 <DMAChannel::begin(bool)+0xa4>)
    bf2e:	ldrh	r1, [r4, #0]
{
    bf30:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    bf32:	asr.w	r2, r1, r3
    bf36:	ands.w	r2, r2, #1
    bf3a:	beq.n	bf4e <DMAChannel::begin(bool)+0x32>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    bf3c:	adds	r3, #1
    bf3e:	cmp	r3, #16
    bf40:	bne.n	bf32 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    bf42:	cpsie	i
			TCD = (TCD_t *)0;
    bf44:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    bf46:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    bf48:	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    bf4a:	pop	{r4, r5}
    bf4c:	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    bf4e:	mov.w	ip, #1
    bf52:	lsl.w	ip, ip, r3
    bf56:	orr.w	r1, r1, ip
    bf5a:	strh	r1, [r4, #0]
			__enable_irq();
    bf5c:	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    bf5e:	ldr	r1, [pc, #100]	; (bfc4 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    bf60:	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    bf64:	ldr	r4, [pc, #96]	; (bfc8 <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    bf66:	add	r1, r3
	channel = ch;
    bf68:	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    bf6c:	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    bf6e:	ldr	r1, [r4, #124]	; 0x7c
    bf70:	orr.w	r1, r1, #192	; 0xc0
    bf74:	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    bf76:	movw	r4, #1154	; 0x482
    bf7a:	ldr	r1, [pc, #80]	; (bfcc <DMAChannel::begin(bool)+0xb0>)
    bf7c:	str	r4, [r1, #0]
	DMA_CERQ = ch;
    bf7e:	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    bf82:	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    bf86:	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    bf8a:	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    bf8e:	str	r3, [r0, #0]
}
    bf90:	pop	{r4, r5}
	*p++ = 0;
    bf92:	strd	r2, r2, [r3]
	*p++ = 0;
    bf96:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    bf9a:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    bf9e:	strd	r2, r2, [r3, #24]
}
    bfa2:	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    bfa4:	ldr	r4, [pc, #24]	; (bfc0 <DMAChannel::begin(bool)+0xa4>)
    bfa6:	ldrh	r1, [r4, #0]
    bfa8:	asr.w	r5, r1, r2
    bfac:	lsls	r5, r5, #31
    bfae:	bpl.n	bf30 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    bfb0:	ldr	r5, [pc, #16]	; (bfc4 <DMAChannel::begin(bool)+0xa8>)
    bfb2:	add	r5, r2
    bfb4:	cmp.w	r3, r5, lsl #5
    bfb8:	bne.n	bf30 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    bfba:	cpsie	i
		return;
    bfbc:	b.n	bf4a <DMAChannel::begin(bool)+0x2e>
    bfbe:	nop
    bfc0:	.word	0x20007dca
    bfc4:	.word	0x02007480
    bfc8:	.word	0x400fc000
    bfcc:	.word	0x400e8000

0000bfd0 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    bfd0:	ldrb	r3, [r0, #4]
    bfd2:	cmp	r3, #15
    bfd4:	bhi.n	bffa <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    bfd6:	ldr	r2, [pc, #36]	; (bffc <DMAChannel::release()+0x2c>)
    bfd8:	strb	r3, [r2, #26]
	__disable_irq();
    bfda:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    bfdc:	ldr	r1, [pc, #32]	; (c000 <DMAChannel::release()+0x30>)
    bfde:	movs	r2, #1
    bfe0:	ldrb.w	ip, [r0, #4]
    bfe4:	ldrh	r3, [r1, #0]
    bfe6:	lsl.w	r2, r2, ip
    bfea:	bic.w	r3, r3, r2
    bfee:	strh	r3, [r1, #0]
	__enable_irq();
    bff0:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    bff2:	movs	r2, #16
	TCD = (TCD_t *)0;
    bff4:	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    bff6:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    bff8:	str	r3, [r0, #0]
}
    bffa:	bx	lr
    bffc:	.word	0x400e8000
    c000:	.word	0x20007dca

0000c004 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    c004:	b.w	a3ec <usb_serial_flush_input>

0000c008 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c008:	b.w	a390 <usb_serial_peekchar>

0000c00c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c00c:	b.w	a45c <usb_serial_getchar>

0000c010 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    c010:	b.w	a3d4 <usb_serial_available>

0000c014 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c014:	b.w	a510 <usb_serial_flush_output>

0000c018 <usb_serial_class::availableForWrite()>:
	size_t write(int n) { return write((uint8_t)n); }
	// Returns the number of bytes which may be transmitted by write() or print()
	// without waiting.  Typically programs which must maintain rapid checking
	// and response to sensors use availableForWrite() to decide whether to
	// transmit.
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c018:	b.w	a4c0 <usb_serial_write_buffer_free>

0000c01c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c01c:	mov	r0, r1
    c01e:	mov	r1, r2
    c020:	b.w	a4a8 <usb_serial_write>

0000c024 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c024:	mov	r0, r1
    c026:	b.w	a47c <usb_serial_putchar>
    c02a:	nop

0000c02c <breakTime(unsigned long, DateTimeFields&)>:
  tm.sec = time % 60;
    c02c:	ldr	r2, [pc, #308]	; (c164 <breakTime(unsigned long, DateTimeFields&)+0x138>)
{
    c02e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tm.sec = time % 60;
    c032:	umull	r4, r3, r2, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c036:	movw	sl, #365	; 0x16d
    c03a:	ldr	r7, [pc, #300]	; (c168 <breakTime(unsigned long, DateTimeFields&)+0x13c>)
  tm.sec = time % 60;
    c03c:	lsrs	r3, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c03e:	ldr.w	r8, [pc, #312]	; c178 <breakTime(unsigned long, DateTimeFields&)+0x14c>
    c042:	ldr.w	r9, [pc, #312]	; c17c <breakTime(unsigned long, DateTimeFields&)+0x150>
  tm.min = time % 60;
    c046:	umull	r4, r2, r2, r3
  tm.sec = time % 60;
    c04a:	rsb	r4, r3, r3, lsl #4
  tm.min = time % 60;
    c04e:	lsrs	r2, r2, #5
  tm.sec = time % 60;
    c050:	sub.w	r0, r0, r4, lsl #2
  tm.hour = time % 24;
    c054:	ldr	r4, [pc, #276]	; (c16c <breakTime(unsigned long, DateTimeFields&)+0x140>)
  tm.min = time % 60;
    c056:	rsb	r5, r2, r2, lsl #4
  tm.sec = time % 60;
    c05a:	strb	r0, [r1, #0]
  tm.min = time % 60;
    c05c:	sub.w	r3, r3, r5, lsl #2
  tm.hour = time % 24;
    c060:	umull	r5, r4, r4, r2
    c064:	lsrs	r4, r4, #4
  tm.min = time % 60;
    c066:	strb	r3, [r1, #1]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c068:	ldr	r3, [pc, #260]	; (c170 <breakTime(unsigned long, DateTimeFields&)+0x144>)
    c06a:	adds	r5, r4, #4
  tm.hour = time % 24;
    c06c:	add.w	r0, r4, r4, lsl #1
    c070:	sub.w	r2, r2, r0, lsl #3
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c074:	umull	r0, r3, r3, r5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c078:	movs	r0, #0
  tm.hour = time % 24;
    c07a:	strb	r2, [r1, #2]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c07c:	subs	r2, r5, r3
    c07e:	add.w	r3, r3, r2, lsr #1
  days = 0;
    c082:	mov	r2, r0
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c084:	lsrs	r3, r3, #2
    c086:	rsb	r3, r3, r3, lsl #3
    c08a:	subs	r5, r5, r3
    c08c:	strb	r5, [r1, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c08e:	uxtb.w	lr, r0
    c092:	movw	ip, #365	; 0x16d
    c096:	addw	r3, lr, #1970	; 0x7b2
    c09a:	ands.w	r5, r3, #3
    c09e:	mul.w	r6, r7, r3
    c0a2:	bne.n	c0b6 <breakTime(unsigned long, DateTimeFields&)+0x8a>
    c0a4:	cmp.w	r8, r6, ror #2
    c0a8:	mov.w	ip, #366	; 0x16e
    c0ac:	bcc.n	c0b6 <breakTime(unsigned long, DateTimeFields&)+0x8a>
    c0ae:	cmp.w	r9, r6, ror #4
    c0b2:	it	cc
    c0b4:	movcc	ip, sl
    c0b6:	add	r2, ip
    c0b8:	adds	r0, #1
    c0ba:	cmp	r4, r2
    c0bc:	bcs.n	c08e <breakTime(unsigned long, DateTimeFields&)+0x62>
  tm.year = year + 70; // year is offset from 1970
    c0be:	add.w	lr, lr, #70	; 0x46
  days -= LEAP_YEAR(year) ? 366 : 365;
    c0c2:	ldr	r6, [pc, #176]	; (c174 <breakTime(unsigned long, DateTimeFields&)+0x148>)
  tm.year = year + 70; // year is offset from 1970
    c0c4:	strb.w	lr, [r1, #6]
  days -= LEAP_YEAR(year) ? 366 : 365;
    c0c8:	umull	r0, r6, r6, r3
    c0cc:	cbz	r5, c130 <breakTime(unsigned long, DateTimeFields&)+0x104>
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c0ce:	lsrs	r7, r6, #5
    c0d0:	mov.w	ip, #100	; 0x64
    c0d4:	mov.w	r0, #400	; 0x190
    c0d8:	lsrs	r6, r6, #7
    c0da:	mls	r7, ip, r7, r3
    c0de:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    c0e2:	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    c0e6:	subs	r4, r4, r2
    c0e8:	movs	r3, #0
    c0ea:	movs	r2, #1
      monthLength = monthDays[month];
    c0ec:	ldr.w	lr, [pc, #144]	; c180 <breakTime(unsigned long, DateTimeFields&)+0x154>
  time  -= days; // now it is days in this year, starting at 0
    c0f0:	add	r0, r4
  for (month=0; month<12; month++) {
    c0f2:	b.n	c10a <breakTime(unsigned long, DateTimeFields&)+0xde>
    if (time >= monthLength) {
    c0f4:	ldrb.w	r4, [r3, lr]
    c0f8:	cmp	r4, r0
    c0fa:	bhi.n	c11a <breakTime(unsigned long, DateTimeFields&)+0xee>
  for (month=0; month<12; month++) {
    c0fc:	cmp	r2, #12
      time -= monthLength;
    c0fe:	sub.w	r0, r0, r4
  for (month=0; month<12; month++) {
    c102:	beq.n	c11c <breakTime(unsigned long, DateTimeFields&)+0xf0>
    c104:	adds	r2, #1
    c106:	adds	r3, #1
    c108:	uxtb	r2, r2
    if (month==1) { // february
    c10a:	cmp	r3, #1
    c10c:	uxtb.w	ip, r3
    c110:	bne.n	c0f4 <breakTime(unsigned long, DateTimeFields&)+0xc8>
      if (LEAP_YEAR(year)) {
    c112:	cbnz	r5, c126 <breakTime(unsigned long, DateTimeFields&)+0xfa>
    c114:	cbz	r7, c14a <breakTime(unsigned long, DateTimeFields&)+0x11e>
    c116:	movs	r4, #29
    c118:	b.n	c128 <breakTime(unsigned long, DateTimeFields&)+0xfc>
    c11a:	mov	r2, ip
  tm.mday = time + 1;     // day of month
    c11c:	adds	r0, #1
  tm.mon = month;  // jan is month 0
    c11e:	strb	r2, [r1, #5]
  tm.mday = time + 1;     // day of month
    c120:	strb	r0, [r1, #4]
}
    c122:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c126:	movs	r4, #28
    if (time >= monthLength) {
    c128:	cmp	r0, r4
    c12a:	bcc.n	c15e <breakTime(unsigned long, DateTimeFields&)+0x132>
      time -= monthLength;
    c12c:	subs	r0, r0, r4
  for (month=0; month<12; month++) {
    c12e:	b.n	c104 <breakTime(unsigned long, DateTimeFields&)+0xd8>
  days -= LEAP_YEAR(year) ? 366 : 365;
    c130:	movs	r0, #100	; 0x64
    c132:	lsrs	r7, r6, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c134:	lsrs	r6, r6, #7
  days -= LEAP_YEAR(year) ? 366 : 365;
    c136:	mls	r7, r0, r7, r3
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c13a:	mov.w	r0, #400	; 0x190
    c13e:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    c142:	cbz	r7, c154 <breakTime(unsigned long, DateTimeFields&)+0x128>
    c144:	mov.w	r0, #366	; 0x16e
    c148:	b.n	c0e6 <breakTime(unsigned long, DateTimeFields&)+0xba>
      if (LEAP_YEAR(year)) {
    c14a:	cmp	r6, #0
    c14c:	ite	ne
    c14e:	movne	r4, #28
    c150:	moveq	r4, #29
    c152:	b.n	c128 <breakTime(unsigned long, DateTimeFields&)+0xfc>
  days -= LEAP_YEAR(year) ? 366 : 365;
    c154:	cmp	r6, #0
    c156:	bne.n	c0e2 <breakTime(unsigned long, DateTimeFields&)+0xb6>
    c158:	mov.w	r0, #366	; 0x16e
    c15c:	b.n	c0e6 <breakTime(unsigned long, DateTimeFields&)+0xba>
    if (time >= monthLength) {
    c15e:	movs	r2, #1
    c160:	b.n	c11c <breakTime(unsigned long, DateTimeFields&)+0xf0>
    c162:	nop
    c164:	.word	0x88888889
    c168:	.word	0xc28f5c29
    c16c:	.word	0xaaaaaaab
    c170:	.word	0x24924925
    c174:	.word	0x51eb851f
    c178:	.word	0x028f5c28
    c17c:	.word	0x00a3d70a
    c180:	.word	0x20000770

0000c184 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    c184:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    c186:	bl	1538 <setup>
	while (1) {
		loop();
    c18a:	bl	1580 <loop>
		yield();
    c18e:	bl	bd40 <yield>
	while (1) {
    c192:	b.n	c18a <main+0x6>

0000c194 <AudioStream::update_all()>:
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    c194:	mov.w	r3, #3758153728	; 0xe000e000
    c198:	movs	r2, #64	; 0x40
    c19a:	str.w	r2, [r3, #520]	; 0x208
    c19e:	bx	lr

0000c1a0 <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    c1a0:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c1a2:	ldr	r3, [pc, #80]	; (c1f4 <software_isr()+0x54>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    c1a4:	ldr	r5, [pc, #80]	; (c1f8 <software_isr()+0x58>)
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c1a6:	ldr	r4, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    c1a8:	ldr	r6, [r5, #4]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c1aa:	cbz	r4, c1d4 <software_isr()+0x34>
		if (p->active) {
    c1ac:	ldrb	r3, [r4, #8]
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    c1ae:	mov	r0, r4
		if (p->active) {
    c1b0:	cbz	r3, c1ce <software_isr()+0x2e>
			p->update();
    c1b2:	ldr	r3, [r4, #0]
			uint32_t cycles = ARM_DWT_CYCCNT;
    c1b4:	ldr	r7, [r5, #4]
			p->update();
    c1b6:	ldr	r3, [r3, #0]
    c1b8:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    c1ba:	ldr	r3, [r5, #4]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    c1bc:	ldrh	r1, [r4, #6]
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    c1be:	subs	r3, r3, r7
			p->cpu_cycles = cycles;
    c1c0:	ubfx	r2, r3, #6, #16
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    c1c4:	cmp.w	r1, r3, lsr #6
			p->cpu_cycles = cycles;
    c1c8:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    c1ca:	it	cc
    c1cc:	strhcc	r2, [r4, #6]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c1ce:	ldr	r4, [r4, #20]
    c1d0:	cmp	r4, #0
    c1d2:	bne.n	c1ac <software_isr()+0xc>
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    c1d4:	ldr	r3, [pc, #32]	; (c1f8 <software_isr()+0x58>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    c1d6:	ldr	r2, [pc, #36]	; (c1fc <software_isr()+0x5c>)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    c1d8:	ldr	r3, [r3, #4]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    c1da:	ldrh	r0, [r2, #0]
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    c1dc:	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
    c1de:	ldr	r4, [pc, #32]	; (c200 <software_isr()+0x60>)
    c1e0:	ubfx	r1, r3, #6, #16
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    c1e4:	cmp.w	r0, r3, lsr #6
	AudioStream::cpu_cycles_total = totalcycles;
    c1e8:	strh	r1, [r4, #0]
		AudioStream::cpu_cycles_total_max = totalcycles;
    c1ea:	it	cc
    c1ec:	strhcc	r1, [r2, #0]

	asm("DSB");
    c1ee:	dsb	sy
}
    c1f2:	pop	{r3, r4, r5, r6, r7, pc}
    c1f4:	.word	0x20006110
    c1f8:	.word	0xe0001000
    c1fc:	.word	0x20007dbe
    c200:	.word	0x20007dbc

0000c204 <AudioStream::allocate()>:
{
    c204:	push	{r4, r5}
	__disable_irq();
    c206:	cpsid	i
	index = memory_pool_first_mask;
    c208:	ldr	r5, [pc, #144]	; (c29c <AudioStream::allocate()+0x98>)
	p += index;
    c20a:	ldr	r4, [pc, #148]	; (c2a0 <AudioStream::allocate()+0x9c>)
	index = memory_pool_first_mask;
    c20c:	ldrh	r2, [r5, #0]
		if (p >= end) {
    c20e:	add.w	r1, r4, #112	; 0x70
	p += index;
    c212:	add.w	r3, r4, r2, lsl #2
		if (p >= end) {
    c216:	cmp	r3, r1
    c218:	bcs.n	c294 <AudioStream::allocate()+0x90>
    c21a:	add.w	r1, r4, #111	; 0x6f
    c21e:	adds	r0, r2, #1
    c220:	subs	r1, r1, r3
    c222:	add.w	r0, r0, r1, lsr #2
    c226:	b.n	c22e <AudioStream::allocate()+0x2a>
		index++;
    c228:	adds	r2, #1
		if (p >= end) {
    c22a:	cmp	r2, r0
    c22c:	beq.n	c294 <AudioStream::allocate()+0x90>
		index++;
    c22e:	mov	ip, r3
		avail = *p;
    c230:	ldr.w	r1, [r3], #4
		if (avail) break;
    c234:	cmp	r1, #0
    c236:	beq.n	c228 <AudioStream::allocate()+0x24>
	n = __builtin_clz(avail);
    c238:	clz	r0, r1
	avail &= ~(0x80000000 >> n);
    c23c:	mov.w	r3, #2147483648	; 0x80000000
    c240:	lsrs	r3, r0
    c242:	bic.w	r1, r1, r3
	*p = avail;
    c246:	str.w	r1, [ip]
	if (!avail) index++;
    c24a:	cbnz	r1, c24e <AudioStream::allocate()+0x4a>
    c24c:	adds	r2, #1
	used = memory_used + 1;
    c24e:	ldr	r3, [pc, #84]	; (c2a4 <AudioStream::allocate()+0xa0>)
	memory_pool_first_mask = index;
    c250:	strh	r2, [r5, #0]
	used = memory_used + 1;
    c252:	ldrh	r2, [r3, #0]
	memory_used = used;
    c254:	adds	r2, #1
    c256:	uxth	r1, r2
    c258:	strh	r1, [r3, #0]
	__enable_irq();
    c25a:	cpsie	i
	index = p - memory_pool_available_mask;
    c25c:	sub.w	ip, ip, r4
	block = memory_pool + ((index << 5) + (31 - n));
    c260:	movw	r3, #8060	; 0x1f7c
    c264:	rsb	r4, r0, r0, lsl #24
	index = p - memory_pool_available_mask;
    c268:	mov.w	ip, ip, asr #2
	block = memory_pool + ((index << 5) + (31 - n));
    c26c:	rsb	r0, r0, r4, lsl #6
	block->ref_count = 1;
    c270:	movs	r4, #1
	block = memory_pool + ((index << 5) + (31 - n));
    c272:	add.w	ip, ip, ip, lsl #6
    c276:	add.w	r3, r3, ip, lsl #7
    c27a:	add.w	r3, r3, r0, lsl #2
    c27e:	ldr	r0, [pc, #40]	; (c2a8 <AudioStream::allocate()+0xa4>)
    c280:	ldr	r0, [r0, #0]
	block->ref_count = 1;
    c282:	strb	r4, [r0, r3]
	block = memory_pool + ((index << 5) + (31 - n));
    c284:	add	r0, r3
	if (used > memory_used_max) memory_used_max = used;
    c286:	ldr	r3, [pc, #36]	; (c2ac <AudioStream::allocate()+0xa8>)
    c288:	ldrh	r4, [r3, #0]
    c28a:	cmp	r4, r2
}
    c28c:	pop	{r4, r5}
	if (used > memory_used_max) memory_used_max = used;
    c28e:	it	cc
    c290:	strhcc	r1, [r3, #0]
}
    c292:	bx	lr
			__enable_irq();
    c294:	cpsie	i
			return NULL;
    c296:	movs	r0, #0
}
    c298:	pop	{r4, r5}
    c29a:	bx	lr
    c29c:	.word	0x20007dc0
    c2a0:	.word	0x20006114
    c2a4:	.word	0x20007db8
    c2a8:	.word	0x2000610c
    c2ac:	.word	0x20007dba

0000c2b0 <AudioStream::release(audio_block_struct*)>:
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    c2b0:	ldrh	r2, [r0, #2]
	__disable_irq();
    c2b2:	cpsid	i
	if (block->ref_count > 1) {
    c2b4:	ldrb	r3, [r0, #0]
    c2b6:	cmp	r3, #1
    c2b8:	bls.n	c2c2 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    c2ba:	subs	r3, #1
    c2bc:	strb	r3, [r0, #0]
	__enable_irq();
    c2be:	cpsie	i
}
    c2c0:	bx	lr
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    c2c2:	mvns	r1, r2
	uint32_t index = block->memory_pool_index >> 5;
    c2c4:	lsrs	r3, r2, #5
		memory_pool_available_mask[index] |= mask;
    c2c6:	ldr	r0, [pc, #44]	; (c2f4 <AudioStream::release(audio_block_struct*)+0x44>)
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    c2c8:	mov.w	r2, #2147483648	; 0x80000000
    c2cc:	and.w	r1, r1, #31
    c2d0:	lsrs	r2, r1
		memory_pool_available_mask[index] |= mask;
    c2d2:	ldr.w	r1, [r0, r3, lsl #2]
    c2d6:	orrs	r2, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    c2d8:	ldr	r1, [pc, #28]	; (c2f8 <AudioStream::release(audio_block_struct*)+0x48>)
    c2da:	ldrh.w	ip, [r1]
		memory_pool_available_mask[index] |= mask;
    c2de:	str.w	r2, [r0, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    c2e2:	cmp	ip, r3
		memory_used--;
    c2e4:	ldr	r2, [pc, #20]	; (c2fc <AudioStream::release(audio_block_struct*)+0x4c>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    c2e6:	it	hi
    c2e8:	strhhi	r3, [r1, #0]
		memory_used--;
    c2ea:	ldrh	r3, [r2, #0]
    c2ec:	subs	r3, #1
    c2ee:	strh	r3, [r2, #0]
	__enable_irq();
    c2f0:	cpsie	i
}
    c2f2:	bx	lr
    c2f4:	.word	0x20006114
    c2f8:	.word	0x20007dc0
    c2fc:	.word	0x20007db8

0000c300 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    c300:	ldr	r3, [r0, #12]
    c302:	cbnz	r3, c30a <AudioStream::transmit(audio_block_struct*, unsigned char)+0xa>
    c304:	b.n	c342 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x42>
    c306:	ldr	r3, [r3, #12]
    c308:	cbz	r3, c344 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x44>
		if (c->src_index == index) {
    c30a:	ldrb	r0, [r3, #8]
    c30c:	cmp	r0, r2
    c30e:	bne.n	c306 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x6>
{
    c310:	push	{r4}
			if (c->dst->inputQueue[c->dest_index] == NULL) {
    c312:	ldr	r0, [r3, #4]
    c314:	ldrb.w	ip, [r3, #9]
    c318:	ldr	r0, [r0, #16]
    c31a:	ldr.w	r4, [r0, ip, lsl #2]
    c31e:	cbz	r4, c336 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x36>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    c320:	ldr	r3, [r3, #12]
    c322:	cbz	r3, c330 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    c324:	ldrb	r0, [r3, #8]
    c326:	cmp	r0, r2
    c328:	beq.n	c312 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x12>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    c32a:	ldr	r3, [r3, #12]
    c32c:	cmp	r3, #0
    c32e:	bne.n	c324 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x24>
}
    c330:	ldr.w	r4, [sp], #4
    c334:	bx	lr
				c->dst->inputQueue[c->dest_index] = block;
    c336:	str.w	r1, [r0, ip, lsl #2]
				block->ref_count++;
    c33a:	ldrb	r0, [r1, #0]
    c33c:	adds	r0, #1
    c33e:	strb	r0, [r1, #0]
    c340:	b.n	c320 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x20>
    c342:	bx	lr
    c344:	bx	lr
    c346:	nop

0000c348 <AudioStream::receiveReadOnly(unsigned int)>:
	if (index >= num_inputs) return NULL;
    c348:	ldrb	r3, [r0, #9]
    c34a:	cmp	r3, r1
    c34c:	bls.n	c35c <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    c34e:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    c350:	movs	r2, #0
	in = inputQueue[index];
    c352:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    c356:	str.w	r2, [r3, r1, lsl #2]
	return in;
    c35a:	bx	lr
	if (index >= num_inputs) return NULL;
    c35c:	movs	r0, #0
}
    c35e:	bx	lr

0000c360 <AudioStream::receiveWritable(unsigned int)>:
{
    c360:	push	{r3, r4, r5, lr}
	if (index >= num_inputs) return NULL;
    c362:	ldrb	r3, [r0, #9]
    c364:	cmp	r3, r1
    c366:	bls.n	c3a0 <AudioStream::receiveWritable(unsigned int)+0x40>
	in = inputQueue[index];
    c368:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    c36a:	movs	r2, #0
	in = inputQueue[index];
    c36c:	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    c370:	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    c374:	cbz	r4, c3a0 <AudioStream::receiveWritable(unsigned int)+0x40>
    c376:	ldrb	r3, [r4, #0]
    c378:	cmp	r3, #1
    c37a:	bhi.n	c380 <AudioStream::receiveWritable(unsigned int)+0x20>
}
    c37c:	mov	r0, r4
    c37e:	pop	{r3, r4, r5, pc}
		p = allocate();
    c380:	bl	c204 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    c384:	mov	r5, r0
    c386:	cbz	r0, c394 <AudioStream::receiveWritable(unsigned int)+0x34>
    c388:	mov.w	r2, #256	; 0x100
    c38c:	adds	r1, r4, #4
    c38e:	adds	r0, #4
    c390:	bl	9d30 <memcpy>
		in->ref_count--;
    c394:	ldrb	r3, [r4, #0]
    c396:	subs	r3, #1
    c398:	strb	r3, [r4, #0]
		p = allocate();
    c39a:	mov	r4, r5
}
    c39c:	mov	r0, r4
    c39e:	pop	{r3, r4, r5, pc}
	if (index >= num_inputs) return NULL;
    c3a0:	movs	r4, #0
}
    c3a2:	mov	r0, r4
    c3a4:	pop	{r3, r4, r5, pc}
    c3a6:	nop

0000c3a8 <AudioConnection::connect()>:
		if (isConnected) // already connected
    c3a8:	ldrb	r3, [r0, #16]
    c3aa:	cbnz	r3, c3ec <AudioConnection::connect()+0x44>
		if (!src || !dst) // NULL src or dst - [old] Stream object destroyed
    c3ac:	ldr	r3, [r0, #0]
    c3ae:	mov	r1, r0
    c3b0:	cbz	r3, c3f2 <AudioConnection::connect()+0x4a>
    c3b2:	ldr	r3, [r0, #4]
    c3b4:	cbz	r3, c3f2 <AudioConnection::connect()+0x4a>
		if (dest_index >= dst->num_inputs) // input number too high
    c3b6:	ldrb	r2, [r0, #9]
    c3b8:	ldrb	r3, [r3, #9]
    c3ba:	cmp	r2, r3
    c3bc:	bcs.n	c3f8 <AudioConnection::connect()+0x50>
{
    c3be:	push	{r4, r5}
		__disable_irq();
    c3c0:	cpsid	i
		s = AudioStream::first_update; // first AudioStream in the stream list
    c3c2:	ldr	r3, [pc, #172]	; (c470 <AudioConnection::connect()+0xc8>)
    c3c4:	ldr	r4, [r3, #0]
		while (s) // go through all AudioStream objects
    c3c6:	cbz	r4, c404 <AudioConnection::connect()+0x5c>
			p = s->destination_list;	// first patchCord in this stream's list
    c3c8:	ldr	r3, [r4, #12]
			while (p)
    c3ca:	cbz	r3, c3fe <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    c3cc:	ldr	r0, [r1, #4]
    c3ce:	b.n	c3d4 <AudioConnection::connect()+0x2c>
				p = p->next_dest;
    c3d0:	ldr	r3, [r3, #12]
			while (p)
    c3d2:	cbz	r3, c3fe <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    c3d4:	ldr	r2, [r3, #4]
    c3d6:	cmp	r2, r0
    c3d8:	bne.n	c3d0 <AudioConnection::connect()+0x28>
    c3da:	ldrb.w	ip, [r3, #9]
    c3de:	ldrb	r2, [r1, #9]
    c3e0:	cmp	ip, r2
    c3e2:	bne.n	c3d0 <AudioConnection::connect()+0x28>
					__enable_irq();
    c3e4:	cpsie	i
					return 4;
    c3e6:	movs	r0, #4
}
    c3e8:	pop	{r4, r5}
    c3ea:	bx	lr
	int result = 1;
    c3ec:	movs	r0, #1
	__enable_irq();
    c3ee:	cpsie	i
}
    c3f0:	bx	lr
			result = 3;
    c3f2:	movs	r0, #3
	__enable_irq();
    c3f4:	cpsie	i
}
    c3f6:	bx	lr
			result = 2;
    c3f8:	movs	r0, #2
	__enable_irq();
    c3fa:	cpsie	i
}
    c3fc:	bx	lr
			s = s->next_update;
    c3fe:	ldr	r4, [r4, #20]
		while (s) // go through all AudioStream objects
    c400:	cmp	r4, #0
    c402:	bne.n	c3c8 <AudioConnection::connect()+0x20>
		pp = &AudioStream::unused;
    c404:	ldr	r4, [pc, #108]	; (c474 <AudioConnection::connect()+0xcc>)
    c406:	ldr	r3, [r4, #0]
		while (*pp && *pp != this)
    c408:	cbz	r3, c41c <AudioConnection::connect()+0x74>
    c40a:	cmp	r1, r3
    c40c:	bne.n	c414 <AudioConnection::connect()+0x6c>
    c40e:	b.n	c428 <AudioConnection::connect()+0x80>
    c410:	cmp	r1, r3
    c412:	beq.n	c424 <AudioConnection::connect()+0x7c>
			pp = &((*pp)->next_dest);
    c414:	mov	r2, r3
    c416:	ldr	r3, [r3, #12]
		while (*pp && *pp != this)
    c418:	cmp	r3, #0
    c41a:	bne.n	c410 <AudioConnection::connect()+0x68>
			result = 5;
    c41c:	movs	r0, #5
	__enable_irq();
    c41e:	cpsie	i
}
    c420:	pop	{r4, r5}
    c422:	bx	lr
			pp = &((*pp)->next_dest);
    c424:	add.w	r4, r2, #12
		p = src->destination_list; // first AudioConnection
    c428:	ldr	r5, [r1, #0]
    c42a:	ldr	r0, [r5, #12]
		if (p == NULL) 
    c42c:	cbz	r0, c46a <AudioConnection::connect()+0xc2>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    c42e:	ldr	r3, [r0, #12]
    c430:	cbnz	r3, c43a <AudioConnection::connect()+0x92>
    c432:	b.n	c446 <AudioConnection::connect()+0x9e>
    c434:	ldr	r2, [r3, #12]
    c436:	cbz	r2, c448 <AudioConnection::connect()+0xa0>
    c438:	mov	r3, r2
				if (&p->src == &this->src && &p->dst == &this->dst
    c43a:	cmp	r1, r0
    c43c:	mov	r0, r3
    c43e:	bne.n	c434 <AudioConnection::connect()+0x8c>
					__enable_irq();
    c440:	cpsie	i
					return 6;
    c442:	movs	r0, #6
    c444:	b.n	c3e8 <AudioConnection::connect()+0x40>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    c446:	mov	r3, r0
			p->next_dest = this; // end of list, can link ourselves in
    c448:	str	r1, [r3, #12]
		*pp = next_dest;  // remove ourselves from the unused list
    c44a:	ldr	r3, [r1, #12]
		next_dest = NULL; // we're last in the source's destination list
    c44c:	movs	r0, #0
		*pp = next_dest;  // remove ourselves from the unused list
    c44e:	str	r3, [r4, #0]
		src->active = true;
    c450:	movs	r3, #1
		next_dest = NULL; // we're last in the source's destination list
    c452:	str	r0, [r1, #12]
		src->numConnections++;
    c454:	ldrb	r2, [r5, #10]
		src->active = true;
    c456:	strb	r3, [r5, #8]
		src->numConnections++;
    c458:	add	r2, r3
    c45a:	strb	r2, [r5, #10]
		dst->numConnections++;
    c45c:	ldr	r2, [r1, #4]
    c45e:	ldrb	r4, [r2, #10]
		dst->active = true;
    c460:	strb	r3, [r2, #8]
		dst->numConnections++;
    c462:	add	r4, r3
    c464:	strb	r4, [r2, #10]
		isConnected = true;
    c466:	strb	r3, [r1, #16]
		result = 0;
    c468:	b.n	c41e <AudioConnection::connect()+0x76>
			src->destination_list = this;
    c46a:	str	r1, [r5, #12]
    c46c:	b.n	c44a <AudioConnection::connect()+0xa2>
    c46e:	nop
    c470:	.word	0x20006110
    c474:	.word	0x20006184

0000c478 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>:
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    c478:	push	{r4, lr}
		dst = &destination;
    c47a:	strd	r1, r3, [r0]
	next_dest = AudioStream::unused;
    c47e:	ldr	r3, [pc, #28]	; (c49c <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x24>)
	isConnected = false;	  
    c480:	movs	r1, #0
		src_index = sourceOutput;
    c482:	strb	r2, [r0, #8]
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    c484:	mov	r4, r0
	next_dest = AudioStream::unused;
    c486:	ldr	r2, [r3, #0]
	AudioStream::unused = this;
    c488:	str	r0, [r3, #0]
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    c48a:	ldrb.w	r3, [sp, #8]
	isConnected = false;	  
    c48e:	strb	r1, [r0, #16]
	next_dest = AudioStream::unused;
    c490:	str	r2, [r0, #12]
		dest_index = destinationInput;
    c492:	strb	r3, [r0, #9]
		result = connect();
    c494:	bl	c3a8 <AudioConnection::connect()>
}
    c498:	mov	r0, r4
    c49a:	pop	{r4, pc}
    c49c:	.word	0x20006184

0000c4a0 <AudioConnection::disconnect()>:
{
    c4a0:	push	{r3, r4, r5, lr}
	if (!isConnected) return 1;
    c4a2:	ldrb	r3, [r0, #16]
    c4a4:	cmp	r3, #0
    c4a6:	beq.n	c516 <AudioConnection::disconnect()+0x76>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    c4a8:	ldr	r3, [r0, #4]
    c4aa:	mov	r4, r0
    c4ac:	ldrb	r2, [r0, #9]
    c4ae:	ldrb	r3, [r3, #9]
    c4b0:	cmp	r2, r3
    c4b2:	bcs.n	c526 <AudioConnection::disconnect()+0x86>
	__disable_irq();
    c4b4:	cpsid	i
	p = src->destination_list;
    c4b6:	ldr	r1, [r0, #0]
    c4b8:	ldr	r3, [r1, #12]
	if (p == NULL) {
    c4ba:	cmp	r3, #0
    c4bc:	beq.n	c51a <AudioConnection::disconnect()+0x7a>
	} else if (p == this) {
    c4be:	cmp	r0, r3
    c4c0:	beq.n	c52a <AudioConnection::disconnect()+0x8a>
			if (p->next_dest == this) // found the parent of the disconnecting object
    c4c2:	mov	r2, r3
    c4c4:	ldr	r3, [r3, #12]
    c4c6:	cmp	r4, r3
    c4c8:	beq.n	c520 <AudioConnection::disconnect()+0x80>
		while (p)
    c4ca:	cmp	r3, #0
    c4cc:	bne.n	c4c2 <AudioConnection::disconnect()+0x22>
	if(dst->inputQueue[dest_index] != NULL) {
    c4ce:	ldr	r2, [r4, #4]
    c4d0:	ldrb	r0, [r4, #9]
    c4d2:	ldr	r3, [r2, #16]
    c4d4:	ldr.w	r0, [r3, r0, lsl #2]
    c4d8:	cbz	r0, c4ee <AudioConnection::disconnect()+0x4e>
		AudioStream::release(dst->inputQueue[dest_index]);
    c4da:	bl	c2b0 <AudioStream::release(audio_block_struct*)>
		__disable_irq();
    c4de:	cpsid	i
		dst->inputQueue[dest_index] = NULL;
    c4e0:	ldr	r2, [r4, #4]
    c4e2:	movs	r5, #0
    c4e4:	ldrb	r0, [r4, #9]
    c4e6:	ldr	r3, [r2, #16]
	src->numConnections--;
    c4e8:	ldr	r1, [r4, #0]
		dst->inputQueue[dest_index] = NULL;
    c4ea:	str.w	r5, [r3, r0, lsl #2]
	src->numConnections--;
    c4ee:	ldrb	r3, [r1, #10]
    c4f0:	subs	r3, #1
    c4f2:	uxtb	r3, r3
    c4f4:	strb	r3, [r1, #10]
	if (src->numConnections == 0) {
    c4f6:	cbnz	r3, c4fa <AudioConnection::disconnect()+0x5a>
		src->active = false;
    c4f8:	strb	r3, [r1, #8]
	dst->numConnections--;
    c4fa:	ldrb	r3, [r2, #10]
    c4fc:	subs	r3, #1
    c4fe:	uxtb	r3, r3
    c500:	strb	r3, [r2, #10]
	if (dst->numConnections == 0) {
    c502:	cbnz	r3, c506 <AudioConnection::disconnect()+0x66>
		dst->active = false;
    c504:	strb	r3, [r2, #8]
	next_dest = dst->unused;
    c506:	ldr	r3, [pc, #40]	; (c530 <AudioConnection::disconnect()+0x90>)
	isConnected = false;
    c508:	movs	r0, #0
	next_dest = dst->unused;
    c50a:	ldr	r2, [r3, #0]
	isConnected = false;
    c50c:	strb	r0, [r4, #16]
	dst->unused = this;
    c50e:	str	r4, [r3, #0]
	next_dest = dst->unused;
    c510:	str	r2, [r4, #12]
	__enable_irq();
    c512:	cpsie	i
}
    c514:	pop	{r3, r4, r5, pc}
	if (!isConnected) return 1;
    c516:	movs	r0, #1
}
    c518:	pop	{r3, r4, r5, pc}
		__enable_irq();
    c51a:	cpsie	i
		return 3;
    c51c:	movs	r0, #3
}
    c51e:	pop	{r3, r4, r5, pc}
				p-> next_dest = this->next_dest; // skip parent's link past us
    c520:	ldr	r3, [r4, #12]
    c522:	str	r3, [r2, #12]
				break;
    c524:	b.n	c4ce <AudioConnection::disconnect()+0x2e>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    c526:	movs	r0, #2
}
    c528:	pop	{r3, r4, r5, pc}
		if (p->next_dest) {
    c52a:	ldr	r3, [r0, #12]
			src->destination_list = NULL;
    c52c:	str	r3, [r1, #12]
    c52e:	b.n	c4ce <AudioConnection::disconnect()+0x2e>
    c530:	.word	0x20006184

0000c534 <AudioConnection::~AudioConnection()>:
AudioConnection::~AudioConnection()
    c534:	push	{r4, lr}
    c536:	mov	r4, r0
	disconnect(); // disconnect ourselves: puts us on the unused list
    c538:	bl	c4a0 <AudioConnection::disconnect()>
	pp = &AudioStream::unused;
    c53c:	ldr	r2, [pc, #36]	; (c564 <AudioConnection::~AudioConnection()+0x30>)
    c53e:	ldr	r3, [r2, #0]
	while (*pp && *pp != this)
    c540:	cbz	r3, c554 <AudioConnection::~AudioConnection()+0x20>
    c542:	cmp	r4, r3
    c544:	bne.n	c54c <AudioConnection::~AudioConnection()+0x18>
    c546:	b.n	c55a <AudioConnection::~AudioConnection()+0x26>
    c548:	cmp	r4, r3
    c54a:	beq.n	c558 <AudioConnection::~AudioConnection()+0x24>
		pp = &((*pp)->next_dest);
    c54c:	mov	r2, r3
    c54e:	ldr	r3, [r3, #12]
	while (*pp && *pp != this)
    c550:	cmp	r3, #0
    c552:	bne.n	c548 <AudioConnection::~AudioConnection()+0x14>
}
    c554:	mov	r0, r4
    c556:	pop	{r4, pc}
		pp = &((*pp)->next_dest);
    c558:	adds	r2, #12
		*pp = next_dest; // remove ourselves from the unused list
    c55a:	ldr	r3, [r4, #12]
}
    c55c:	mov	r0, r4
		*pp = next_dest; // remove ourselves from the unused list
    c55e:	str	r3, [r2, #0]
}
    c560:	pop	{r4, pc}
    c562:	nop
    c564:	.word	0x20006184

0000c568 <AudioStream::update_setup()>:
	if (update_scheduled) return false;
    c568:	ldr	r3, [pc, #48]	; (c59c <AudioStream::update_setup()+0x34>)
    c56a:	ldrb	r2, [r3, #0]
    c56c:	cbnz	r2, c596 <AudioStream::update_setup()+0x2e>
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    c56e:	ldr	r2, [pc, #48]	; (c5a0 <AudioStream::update_setup()+0x38>)
    c570:	ldr	r1, [pc, #48]	; (c5a4 <AudioStream::update_setup()+0x3c>)
{
    c572:	push	{r4}
    c574:	str.w	r1, [r2, #344]	; 0x158
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    c578:	ldr	r0, [pc, #44]	; (c5a8 <AudioStream::update_setup()+0x40>)
    c57a:	movs	r4, #208	; 0xd0
	update_scheduled = true;
    c57c:	movs	r2, #1
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    c57e:	mov.w	r1, #3758153728	; 0xe000e000
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    c582:	strb.w	r4, [r0, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    c586:	movs	r4, #64	; 0x40
	update_scheduled = true;
    c588:	mov	r0, r2
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    c58a:	str.w	r4, [r1, #264]	; 0x108
}
    c58e:	ldr.w	r4, [sp], #4
	update_scheduled = true;
    c592:	strb	r2, [r3, #0]
}
    c594:	bx	lr
	if (update_scheduled) return false;
    c596:	movs	r0, #0
}
    c598:	bx	lr
    c59a:	nop
    c59c:	.word	0x20007ddf
    c5a0:	.word	0x20001c00
    c5a4:	.word	0x0000c1a1
    c5a8:	.word	0xe000e400

0000c5ac <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>:
	update_responsibility = false;
}

static void copy_to_buffers(const uint32_t *src, int16_t *left, int16_t *right, unsigned int len)
{
	uint32_t *target = (uint32_t*) src + len; 
    c5ac:	add.w	r3, r0, r3, lsl #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c5b0:	cmp	r0, r3
{
    c5b2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c5b6:	bcc.n	c5cc <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x20>
    c5b8:	b.n	c5d0 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
		uint32_t n = *src++;
    c5ba:	ldr.w	r4, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    c5be:	lsrs	r5, r4, #16
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c5c0:	cmp	r3, r0
		*left++ = n & 0xFFFF;
    c5c2:	strh.w	r4, [r1], #2
		*right++ = n >> 16;
    c5c6:	strh.w	r5, [r2], #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c5ca:	bls.n	c5d0 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
    c5cc:	lsls	r4, r1, #30
    c5ce:	bmi.n	c5ba <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0xe>
	}

	while ((src < target - 2)) {
    c5d0:	sub.w	r4, r3, #8
    c5d4:	cmp	r0, r4
    c5d6:	bcs.n	c63a <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x8e>
    c5d8:	sub.w	r8, r3, #9
    c5dc:	add.w	ip, r0, #8
    c5e0:	mov	lr, r2
		uint32_t n1 = *src++;
		uint32_t n = *src++;
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
		left+=2;
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    c5e2:	ldr	r7, [pc, #92]	; (c640 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x94>)
    c5e4:	sub.w	r8, r8, r0
    c5e8:	mov.w	r8, r8, lsr #3
    c5ec:	add.w	r8, r8, #1
    c5f0:	mov.w	r9, r8, lsl #2
    c5f4:	add.w	r6, r1, r8, lsl #2
		uint32_t n = *src++;
    c5f8:	ldrd	sl, r4, [ip, #-8]
	while ((src < target - 2)) {
    c5fc:	add.w	ip, ip, #8
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    c600:	uxth.w	r5, sl
    c604:	orr.w	r5, r5, r4, lsl #16
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    c608:	ands	r4, r7
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    c60a:	str.w	r5, [r1], #4
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    c60e:	orr.w	r4, r4, sl, lsr #16
	while ((src < target - 2)) {
    c612:	cmp	r1, r6
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    c614:	str.w	r4, [lr], #4
	while ((src < target - 2)) {
    c618:	bne.n	c5f8 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x4c>
		uint32_t n = *src++;
    c61a:	add.w	r0, r0, r8, lsl #3
		right+=2;
    c61e:	add	r2, r9
	}

	while ((src < target)) {
    c620:	cmp	r3, r0
    c622:	bls.n	c636 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x8a>
		uint32_t n = *src++;
    c624:	ldr.w	r1, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    c628:	lsrs	r4, r1, #16
	while ((src < target)) {
    c62a:	cmp	r3, r0
		*left++ = n & 0xFFFF;
    c62c:	strh.w	r1, [r6], #2
		*right++ = n >> 16;
    c630:	strh.w	r4, [r2], #2
	while ((src < target)) {
    c634:	bhi.n	c624 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x78>
	}
}
    c636:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while ((src < target - 2)) {
    c63a:	mov	r6, r1
	while ((src < target)) {
    c63c:	b.n	c620 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x74>
    c63e:	nop
    c640:	.word	0xffff0000

0000c644 <sync_event(transfer_struct*)>:
{
    c644:	push	{r3, r4, r5, lr}
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    c646:	ldr	r2, [pc, #68]	; (c68c <sync_event(transfer_struct*)+0x48>)
    c648:	ldr	r3, [pc, #68]	; (c690 <sync_event(transfer_struct*)+0x4c>)
    c64a:	ldrb	r1, [r2, #0]
    c64c:	ldr	r2, [r3, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    c64e:	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    c650:	ldr	r4, [pc, #64]	; (c694 <sync_event(transfer_struct*)+0x50>)
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    c652:	ldr	r5, [pc, #68]	; (c698 <sync_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    c654:	lsrs	r2, r1
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    c656:	ldr	r0, [pc, #68]	; (c69c <sync_event(transfer_struct*)+0x58>)
    c658:	mov	r1, r4
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    c65a:	str	r2, [r4, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    c65c:	ldrb	r2, [r5, #0]
    c65e:	bl	b3b8 <usb_prepare_transfer>
	arm_dcache_flush(&usb_audio_sync_feedback, usb_audio_sync_nbytes);
    c662:	ldrb	r3, [r5, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    c664:	add	r3, r4
	asm("dsb");
    c666:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
    c66a:	mov.w	r2, #3758153728	; 0xe000e000
    c66e:	str.w	r4, [r2, #3944]	; 0xf68
		location += 32;
    c672:	adds	r4, #32
	} while (location < end_addr);
    c674:	cmp	r3, r4
    c676:	bhi.n	c66e <sync_event(transfer_struct*)+0x2a>
	asm("dsb");
    c678:	dsb	sy
	asm("isb");
    c67c:	isb	sy
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    c680:	ldr	r1, [pc, #24]	; (c69c <sync_event(transfer_struct*)+0x58>)
    c682:	movs	r0, #6
}
    c684:	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    c688:	b.w	b3e8 <usb_transmit>
    c68c:	.word	0x20007df6
    c690:	.word	0x200076a4
    c694:	.word	0x20205260
    c698:	.word	0x20007df5
    c69c:	.word	0x20003100

0000c6a0 <AudioOutputUSB::update()>:
		len--;
	}
}

void AudioOutputUSB::update(void)
{
    c6a0:	push	{r3, r4, r5, lr}
    c6a2:	mov	r5, r0
	audio_block_t *left, *right;

	// TODO: we shouldn't be writing to these......
	//left = receiveReadOnly(0); // input 0 = left channel
	//right = receiveReadOnly(1); // input 1 = right channel
	left = receiveWritable(0); // input 0 = left channel
    c6a4:	movs	r1, #0
    c6a6:	bl	c360 <AudioStream::receiveWritable(unsigned int)>
	right = receiveWritable(1); // input 1 = right channel
    c6aa:	movs	r1, #1
	left = receiveWritable(0); // input 0 = left channel
    c6ac:	mov	r4, r0
	right = receiveWritable(1); // input 1 = right channel
    c6ae:	mov	r0, r5
    c6b0:	bl	c360 <AudioStream::receiveWritable(unsigned int)>
	if (usb_audio_transmit_setting == 0) {
    c6b4:	ldr	r3, [pc, #236]	; (c7a4 <AudioOutputUSB::update()+0x104>)
	right = receiveWritable(1); // input 1 = right channel
    c6b6:	mov	r5, r0
	if (usb_audio_transmit_setting == 0) {
    c6b8:	ldrb	r3, [r3, #0]
    c6ba:	cbz	r3, c6fa <AudioOutputUSB::update()+0x5a>
		if (right_1st) { release(right_1st); right_1st = NULL; }
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
		offset_1st = 0;
		return;
	}
	if (left == NULL) {
    c6bc:	cmp	r4, #0
    c6be:	beq.n	c756 <AudioOutputUSB::update()+0xb6>
			if (right) release(right);
			return;
		}
		memset(left->data, 0, sizeof(left->data));
	}
	if (right == NULL) {
    c6c0:	cmp	r5, #0
    c6c2:	beq.n	c76e <AudioOutputUSB::update()+0xce>
			release(left);
			return;
		}
		memset(right->data, 0, sizeof(right->data));
	}
	__disable_irq();
    c6c4:	cpsid	i
	if (left_1st == NULL) {
    c6c6:	ldr	r3, [pc, #224]	; (c7a8 <AudioOutputUSB::update()+0x108>)
    c6c8:	ldr	r0, [r3, #0]
    c6ca:	cmp	r0, #0
    c6cc:	beq.n	c74a <AudioOutputUSB::update()+0xaa>
		left_1st = left;
		right_1st = right;
		offset_1st = 0;
	} else if (left_2nd == NULL) {
    c6ce:	ldr	r2, [pc, #220]	; (c7ac <AudioOutputUSB::update()+0x10c>)
    c6d0:	ldr	r1, [r2, #0]
    c6d2:	cmp	r1, #0
    c6d4:	beq.n	c784 <AudioOutputUSB::update()+0xe4>
		left_2nd = left;
		right_2nd = right;
	} else {
		// buffer overrun - PC is consuming too slowly
		audio_block_t *discard1 = left_1st;
		left_1st = left_2nd;
    c6d6:	str	r1, [r3, #0]
		left_2nd = left;
		audio_block_t *discard2 = right_1st;
		right_1st = right_2nd;
    c6d8:	ldr	r1, [pc, #212]	; (c7b0 <AudioOutputUSB::update()+0x110>)
		audio_block_t *discard2 = right_1st;
    c6da:	ldr	r3, [pc, #216]	; (c7b4 <AudioOutputUSB::update()+0x114>)
		left_2nd = left;
    c6dc:	str	r4, [r2, #0]
		right_2nd = right;
		offset_1st = 0; // TODO: discard part of this data?
    c6de:	movs	r4, #0
		right_1st = right_2nd;
    c6e0:	ldr	r2, [r1, #0]
		right_2nd = right;
    c6e2:	str	r5, [r1, #0]
		offset_1st = 0; // TODO: discard part of this data?
    c6e4:	ldr	r1, [pc, #208]	; (c7b8 <AudioOutputUSB::update()+0x118>)
    c6e6:	strh	r4, [r1, #0]
		audio_block_t *discard2 = right_1st;
    c6e8:	ldr	r4, [r3, #0]
		right_1st = right_2nd;
    c6ea:	str	r2, [r3, #0]
		//serial_print("*");
		release(discard1);
    c6ec:	bl	c2b0 <AudioStream::release(audio_block_struct*)>
		release(discard2);
    c6f0:	mov	r0, r4
    c6f2:	bl	c2b0 <AudioStream::release(audio_block_struct*)>
	}
	__enable_irq();
    c6f6:	cpsie	i
}
    c6f8:	pop	{r3, r4, r5, pc}
		if (left) release(left);
    c6fa:	cbz	r4, c702 <AudioOutputUSB::update()+0x62>
    c6fc:	mov	r0, r4
    c6fe:	bl	c2b0 <AudioStream::release(audio_block_struct*)>
		if (right) release(right);
    c702:	cbz	r5, c70a <AudioOutputUSB::update()+0x6a>
    c704:	mov	r0, r5
    c706:	bl	c2b0 <AudioStream::release(audio_block_struct*)>
		if (left_1st) { release(left_1st); left_1st = NULL; }
    c70a:	ldr	r4, [pc, #156]	; (c7a8 <AudioOutputUSB::update()+0x108>)
    c70c:	ldr	r0, [r4, #0]
    c70e:	cbz	r0, c718 <AudioOutputUSB::update()+0x78>
    c710:	bl	c2b0 <AudioStream::release(audio_block_struct*)>
    c714:	movs	r3, #0
    c716:	str	r3, [r4, #0]
		if (left_2nd) { release(left_2nd); left_2nd = NULL; }
    c718:	ldr	r4, [pc, #144]	; (c7ac <AudioOutputUSB::update()+0x10c>)
    c71a:	ldr	r0, [r4, #0]
    c71c:	cbz	r0, c726 <AudioOutputUSB::update()+0x86>
    c71e:	bl	c2b0 <AudioStream::release(audio_block_struct*)>
    c722:	movs	r3, #0
    c724:	str	r3, [r4, #0]
		if (right_1st) { release(right_1st); right_1st = NULL; }
    c726:	ldr	r4, [pc, #140]	; (c7b4 <AudioOutputUSB::update()+0x114>)
    c728:	ldr	r0, [r4, #0]
    c72a:	cbz	r0, c734 <AudioOutputUSB::update()+0x94>
    c72c:	bl	c2b0 <AudioStream::release(audio_block_struct*)>
    c730:	movs	r3, #0
    c732:	str	r3, [r4, #0]
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
    c734:	ldr	r4, [pc, #120]	; (c7b0 <AudioOutputUSB::update()+0x110>)
    c736:	ldr	r0, [r4, #0]
    c738:	cbz	r0, c742 <AudioOutputUSB::update()+0xa2>
    c73a:	bl	c2b0 <AudioStream::release(audio_block_struct*)>
    c73e:	movs	r3, #0
    c740:	str	r3, [r4, #0]
		offset_1st = 0;
    c742:	ldr	r3, [pc, #116]	; (c7b8 <AudioOutputUSB::update()+0x118>)
    c744:	movs	r2, #0
    c746:	strh	r2, [r3, #0]
}
    c748:	pop	{r3, r4, r5, pc}
		left_1st = left;
    c74a:	str	r4, [r3, #0]
		right_1st = right;
    c74c:	ldr	r2, [pc, #100]	; (c7b4 <AudioOutputUSB::update()+0x114>)
		offset_1st = 0;
    c74e:	ldr	r3, [pc, #104]	; (c7b8 <AudioOutputUSB::update()+0x118>)
		right_1st = right;
    c750:	str	r5, [r2, #0]
		offset_1st = 0;
    c752:	strh	r0, [r3, #0]
    c754:	b.n	c6f6 <AudioOutputUSB::update()+0x56>
		left = allocate();
    c756:	bl	c204 <AudioStream::allocate()>
		if (left == NULL) {
    c75a:	mov	r4, r0
    c75c:	cbz	r0, c78c <AudioOutputUSB::update()+0xec>
		memset(left->data, 0, sizeof(left->data));
    c75e:	mov.w	r2, #256	; 0x100
    c762:	movs	r1, #0
    c764:	adds	r0, #4
    c766:	bl	dcd0 <memset>
	if (right == NULL) {
    c76a:	cmp	r5, #0
    c76c:	bne.n	c6c4 <AudioOutputUSB::update()+0x24>
		right = allocate();
    c76e:	bl	c204 <AudioStream::allocate()>
		if (right == NULL) {
    c772:	mov	r5, r0
    c774:	cbz	r0, c79a <AudioOutputUSB::update()+0xfa>
		memset(right->data, 0, sizeof(right->data));
    c776:	mov.w	r2, #256	; 0x100
    c77a:	movs	r1, #0
    c77c:	adds	r0, #4
    c77e:	bl	dcd0 <memset>
    c782:	b.n	c6c4 <AudioOutputUSB::update()+0x24>
		right_2nd = right;
    c784:	ldr	r3, [pc, #40]	; (c7b0 <AudioOutputUSB::update()+0x110>)
		left_2nd = left;
    c786:	str	r4, [r2, #0]
		right_2nd = right;
    c788:	str	r5, [r3, #0]
    c78a:	b.n	c6f6 <AudioOutputUSB::update()+0x56>
			if (right) release(right);
    c78c:	cmp	r5, #0
    c78e:	beq.n	c6f8 <AudioOutputUSB::update()+0x58>
    c790:	mov	r0, r5
}
    c792:	ldmia.w	sp!, {r3, r4, r5, lr}
			if (right) release(right);
    c796:	b.w	c2b0 <AudioStream::release(audio_block_struct*)>
			release(left);
    c79a:	mov	r0, r4
}
    c79c:	ldmia.w	sp!, {r3, r4, r5, lr}
			release(left);
    c7a0:	b.w	c2b0 <AudioStream::release(audio_block_struct*)>
    c7a4:	.word	0x20007df7
    c7a8:	.word	0x200061f4
    c7ac:	.word	0x200061f8
    c7b0:	.word	0x20006200
    c7b4:	.word	0x200061fc
    c7b8:	.word	0x20007dc4

0000c7bc <usb_audio_receive_callback>:
{
    c7bc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	AudioInputUSB::receive_flag = 1;
    c7c0:	movs	r2, #1
    c7c2:	ldr	r3, [pc, #296]	; (c8ec <usb_audio_receive_callback+0x130>)
	left = AudioInputUSB::incoming_left;
    c7c4:	ldr.w	sl, [pc, #312]	; c900 <usb_audio_receive_callback+0x144>
	len >>= 2; // 1 sample = 4 bytes: 2 left, 2 right
    c7c8:	lsrs	r6, r0, #2
	AudioInputUSB::receive_flag = 1;
    c7ca:	strb	r2, [r3, #0]
	count = AudioInputUSB::incoming_count;
    c7cc:	ldr	r3, [pc, #288]	; (c8f0 <usb_audio_receive_callback+0x134>)
	left = AudioInputUSB::incoming_left;
    c7ce:	ldr.w	r4, [sl]
	count = AudioInputUSB::incoming_count;
    c7d2:	ldrh	r7, [r3, #0]
	right = AudioInputUSB::incoming_right;
    c7d4:	ldr	r3, [pc, #284]	; (c8f4 <usb_audio_receive_callback+0x138>)
	count = AudioInputUSB::incoming_count;
    c7d6:	mov	r9, r7
	right = AudioInputUSB::incoming_right;
    c7d8:	ldr	r5, [r3, #0]
	if (left == NULL) {
    c7da:	cmp	r4, #0
    c7dc:	beq.n	c874 <usb_audio_receive_callback+0xb8>
	if (right == NULL) {
    c7de:	cmp	r5, #0
    c7e0:	beq.n	c886 <usb_audio_receive_callback+0xca>
	while (len > 0) {
    c7e2:	cmp	r6, #0
    c7e4:	beq.n	c898 <usb_audio_receive_callback+0xdc>
		avail = AUDIO_BLOCK_SAMPLES - count;
    c7e6:	rsb	r3, r7, #128	; 0x80
		if (len < avail) {
    c7ea:	cmp	r6, r3
    c7ec:	bcc.n	c8e4 <usb_audio_receive_callback+0x128>
    c7ee:	ldr.w	fp, [pc, #276]	; c904 <usb_audio_receive_callback+0x148>
    c7f2:	ldr	r7, [pc, #260]	; (c8f8 <usb_audio_receive_callback+0x13c>)
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    c7f4:	ldr.w	r8, [pc, #272]	; c908 <usb_audio_receive_callback+0x14c>
		} else if (avail > 0) {
    c7f8:	cbnz	r3, c83a <usb_audio_receive_callback+0x7e>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    c7fa:	ldr	r3, [r7, #0]
    c7fc:	cmp	r3, #0
    c7fe:	bne.n	c870 <usb_audio_receive_callback+0xb4>
    c800:	ldr.w	r3, [r8]
    c804:	cmp	r3, #0
    c806:	bne.n	c870 <usb_audio_receive_callback+0xb4>
			AudioInputUSB::ready_left = left;
    c808:	str	r4, [r7, #0]
			AudioInputUSB::ready_right = right;
    c80a:	str.w	r5, [r8]
			left = AudioStream::allocate();
    c80e:	bl	c204 <AudioStream::allocate()>
			if (left == NULL) {
    c812:	mov	r4, r0
    c814:	cmp	r0, #0
    c816:	beq.n	c8a0 <usb_audio_receive_callback+0xe4>
			right = AudioStream::allocate();
    c818:	bl	c204 <AudioStream::allocate()>
			if (right == NULL) {
    c81c:	mov	r5, r0
    c81e:	cmp	r0, #0
    c820:	beq.n	c8b0 <usb_audio_receive_callback+0xf4>
			AudioInputUSB::incoming_right = right;
    c822:	ldr	r3, [pc, #208]	; (c8f4 <usb_audio_receive_callback+0x138>)
			AudioInputUSB::incoming_left = left;
    c824:	str.w	r4, [sl]
			AudioInputUSB::incoming_right = right;
    c828:	str	r0, [r3, #0]
	while (len > 0) {
    c82a:	cmp	r6, #0
    c82c:	beq.n	c896 <usb_audio_receive_callback+0xda>
		if (len < avail) {
    c82e:	cmp	r6, #127	; 0x7f
			count = 0;
    c830:	mov.w	r9, #0
		avail = AUDIO_BLOCK_SAMPLES - count;
    c834:	mov.w	r3, #128	; 0x80
		if (len < avail) {
    c838:	bls.n	c8c6 <usb_audio_receive_callback+0x10a>
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    c83a:	adds	r2, r5, #4
    c83c:	adds	r1, r4, #4
    c83e:	mov	r0, fp
    c840:	add	r6, r9
    c842:	add.w	r2, r2, r9, lsl #1
    c846:	add.w	r1, r1, r9, lsl #1
			len -= avail;
    c84a:	subs	r6, #128	; 0x80
			data += avail;
    c84c:	add.w	fp, fp, r3, lsl #2
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    c850:	bl	c5ac <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) {
    c854:	ldr	r3, [r7, #0]
    c856:	cbnz	r3, c860 <usb_audio_receive_callback+0xa4>
    c858:	ldr.w	r3, [r8]
    c85c:	cmp	r3, #0
    c85e:	beq.n	c808 <usb_audio_receive_callback+0x4c>
				AudioInputUSB::incoming_count = count + avail;
    c860:	movs	r3, #128	; 0x80
    c862:	ldr	r2, [pc, #140]	; (c8f0 <usb_audio_receive_callback+0x134>)
    c864:	strh	r3, [r2, #0]
				if (len > 0) {
    c866:	cbz	r6, c870 <usb_audio_receive_callback+0xb4>
					usb_audio_overrun_count++;
    c868:	ldr	r2, [pc, #144]	; (c8fc <usb_audio_receive_callback+0x140>)
    c86a:	ldr	r3, [r2, #0]
    c86c:	adds	r3, #1
    c86e:	str	r3, [r2, #0]
}
    c870:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		left = AudioStream::allocate();
    c874:	bl	c204 <AudioStream::allocate()>
		if (left == NULL) return;
    c878:	mov	r4, r0
    c87a:	cmp	r0, #0
    c87c:	beq.n	c870 <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_left = left;
    c87e:	str.w	r0, [sl]
	if (right == NULL) {
    c882:	cmp	r5, #0
    c884:	bne.n	c7e2 <usb_audio_receive_callback+0x26>
		right = AudioStream::allocate();
    c886:	bl	c204 <AudioStream::allocate()>
		if (right == NULL) return;
    c88a:	mov	r5, r0
    c88c:	cmp	r0, #0
    c88e:	beq.n	c870 <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_right = right;
    c890:	ldr	r3, [pc, #96]	; (c8f4 <usb_audio_receive_callback+0x138>)
    c892:	str	r0, [r3, #0]
    c894:	b.n	c7e2 <usb_audio_receive_callback+0x26>
    c896:	mov	r7, r6
	AudioInputUSB::incoming_count = count;
    c898:	ldr	r3, [pc, #84]	; (c8f0 <usb_audio_receive_callback+0x134>)
    c89a:	strh	r7, [r3, #0]
}
    c89c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioInputUSB::incoming_right = NULL;
    c8a0:	ldr	r3, [pc, #80]	; (c8f4 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    c8a2:	str.w	r0, [sl]
				AudioInputUSB::incoming_right = NULL;
    c8a6:	str	r0, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    c8a8:	ldr	r3, [pc, #68]	; (c8f0 <usb_audio_receive_callback+0x134>)
    c8aa:	strh	r0, [r3, #0]
}
    c8ac:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioStream::release(left);
    c8b0:	mov	r0, r4
    c8b2:	bl	c2b0 <AudioStream::release(audio_block_struct*)>
				AudioInputUSB::incoming_right = NULL;
    c8b6:	ldr	r3, [pc, #60]	; (c8f4 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    c8b8:	str.w	r5, [sl]
				AudioInputUSB::incoming_right = NULL;
    c8bc:	str	r5, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    c8be:	ldr	r3, [pc, #48]	; (c8f0 <usb_audio_receive_callback+0x134>)
    c8c0:	strh	r5, [r3, #0]
}
    c8c2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8c6:	mov	r7, r9
    c8c8:	mov	r3, r9
			copy_to_buffers(data, left->data + count, right->data + count, len);
    c8ca:	adds	r2, r5, #4
    c8cc:	adds	r1, r4, #4
    c8ce:	mov	r0, fp
			AudioInputUSB::incoming_count = count + len;
    c8d0:	add	r7, r6
			copy_to_buffers(data, left->data + count, right->data + count, len);
    c8d2:	add	r2, r3
    c8d4:	add	r1, r3
    c8d6:	mov	r3, r6
    c8d8:	bl	c5ac <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			AudioInputUSB::incoming_count = count + len;
    c8dc:	ldr	r3, [pc, #16]	; (c8f0 <usb_audio_receive_callback+0x134>)
    c8de:	strh	r7, [r3, #0]
}
    c8e0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_to_buffers(data, left->data + count, right->data + count, len);
    c8e4:	lsls	r3, r7, #1
    c8e6:	ldr.w	fp, [pc, #28]	; c904 <usb_audio_receive_callback+0x148>
    c8ea:	b.n	c8ca <usb_audio_receive_callback+0x10e>
    c8ec:	.word	0x20007de0
    c8f0:	.word	0x20007dc2
    c8f4:	.word	0x200061b0
    c8f8:	.word	0x200061a4
    c8fc:	.word	0x20007d9c
    c900:	.word	0x200061ac
    c904:	.word	0x20205280
    c908:	.word	0x200061a8

0000c90c <rx_event(transfer_struct*)>:
{
    c90c:	push	{r3, lr}
	if (t) {
    c90e:	cbz	r0, c920 <rx_event(transfer_struct*)+0x14>
		int len = AUDIO_RX_SIZE - ((rx_transfer.status >> 16) & 0x7FFF);
    c910:	ldr	r3, [pc, #68]	; (c958 <rx_event(transfer_struct*)+0x4c>)
    c912:	ldr	r0, [r3, #4]
    c914:	ubfx	r0, r0, #16, #15
		usb_audio_receive_callback(len);
    c918:	rsb	r0, r0, #180	; 0xb4
    c91c:	bl	c7bc <usb_audio_receive_callback>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    c920:	movs	r3, #0
    c922:	movs	r2, #180	; 0xb4
    c924:	ldr	r1, [pc, #52]	; (c95c <rx_event(transfer_struct*)+0x50>)
    c926:	ldr	r0, [pc, #48]	; (c958 <rx_event(transfer_struct*)+0x4c>)
    c928:	bl	b3b8 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c92c:	ldr	r3, [pc, #44]	; (c95c <rx_event(transfer_struct*)+0x50>)
	uint32_t end_addr = (uint32_t)addr + size;
    c92e:	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    c932:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    c936:	mov.w	r2, #3758153728	; 0xe000e000
    c93a:	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    c93e:	adds	r3, #32
	} while (location < end_addr);
    c940:	cmp	r1, r3
    c942:	bhi.n	c93a <rx_event(transfer_struct*)+0x2e>
	asm("dsb");
    c944:	dsb	sy
	asm("isb");
    c948:	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    c94c:	ldr	r1, [pc, #8]	; (c958 <rx_event(transfer_struct*)+0x4c>)
    c94e:	movs	r0, #5
}
    c950:	ldmia.w	sp!, {r3, lr}
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    c954:	b.w	b410 <usb_receive>
    c958:	.word	0x200030e0
    c95c:	.word	0x20205280

0000c960 <AudioOutputUSB::begin()>:
	update_responsibility = false;
    c960:	movs	r3, #0
    c962:	ldr	r0, [pc, #12]	; (c970 <AudioOutputUSB::begin()+0x10>)
	left_1st = NULL;
    c964:	ldr	r1, [pc, #12]	; (c974 <AudioOutputUSB::begin()+0x14>)
	right_1st = NULL;
    c966:	ldr	r2, [pc, #16]	; (c978 <AudioOutputUSB::begin()+0x18>)
	update_responsibility = false;
    c968:	strb	r3, [r0, #0]
	left_1st = NULL;
    c96a:	str	r3, [r1, #0]
	right_1st = NULL;
    c96c:	str	r3, [r2, #0]
}
    c96e:	bx	lr
    c970:	.word	0x20007de1
    c974:	.word	0x200061f4
    c978:	.word	0x200061fc

0000c97c <usb_audio_transmit_callback>:
{
	static uint32_t count=5;
	uint32_t avail, num, target, offset, len=0;
	audio_block_t *left, *right;

	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    c97c:	ldr	r2, [pc, #228]	; (ca64 <usb_audio_transmit_callback+0xe8>)
{
    c97e:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    c982:	ldr	r3, [r2, #0]
    c984:	adds	r3, #1
    c986:	cmp	r3, #9
{
    c988:	vpush	{d8}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    c98c:	bls.n	ca3a <usb_audio_transmit_callback+0xbe>
		target = 44;
	} else {
		count = 0;
    c98e:	movs	r1, #180	; 0xb4
    c990:	movs	r3, #0
		target = 45;
    c992:	mov.w	r9, #45	; 0x2d
		count = 0;
    c996:	vmov	s16, r1
    c99a:	str	r3, [r2, #0]
{
    c99c:	movs	r7, #0
    c99e:	ldr.w	fp, [pc, #216]	; ca78 <usb_audio_transmit_callback+0xfc>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
			//serial_print("%");
			break;
		}
		right = AudioOutputUSB::right_1st;
		offset = AudioOutputUSB::offset_1st;
    c9a2:	ldr.w	sl, [pc, #216]	; ca7c <usb_audio_transmit_callback+0x100>
		left = AudioOutputUSB::left_1st;
    c9a6:	ldr.w	r0, [fp]
		num = target - len;
    c9aa:	sub.w	r2, r9, r7
		if (left == NULL) {
    c9ae:	cmp	r0, #0
    c9b0:	beq.n	ca48 <usb_audio_transmit_callback+0xcc>
		offset = AudioOutputUSB::offset_1st;
    c9b2:	ldrh.w	ip, [sl]

		avail = AUDIO_BLOCK_SAMPLES - offset;
		if (num > avail) num = avail;

		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
			left->data + offset, right->data + offset, num);
    c9b6:	adds	r5, r0, #4
		right = AudioOutputUSB::right_1st;
    c9b8:	ldr	r3, [pc, #172]	; (ca68 <usb_audio_transmit_callback+0xec>)
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    c9ba:	add.w	r5, r5, ip, lsl #1
		right = AudioOutputUSB::right_1st;
    c9be:	ldr.w	r8, [r3]
		avail = AUDIO_BLOCK_SAMPLES - offset;
    c9c2:	rsb	r3, ip, #128	; 0x80
    c9c6:	cmp	r2, r3
			left->data + offset, right->data + offset, num);
    c9c8:	add.w	r4, r8, #4
    c9cc:	it	cs
    c9ce:	movcs	r2, r3
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    c9d0:	ldr	r3, [pc, #152]	; (ca6c <usb_audio_transmit_callback+0xf0>)
    c9d2:	add.w	r4, r4, ip, lsl #1
    c9d6:	add.w	r6, r3, r7, lsl #2
	while (len > 0) {
    c9da:	cbz	r2, c9f4 <usb_audio_transmit_callback+0x78>
    c9dc:	mov	r1, r2
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    c9de:	ldrsh.w	r3, [r5], #2
	while (len > 0) {
    c9e2:	subs	r1, #1
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    c9e4:	ldrsh.w	lr, [r4], #2
    c9e8:	uxth	r3, r3
    c9ea:	orr.w	r3, r3, lr, lsl #16
    c9ee:	str.w	r3, [r6], #4
	while (len > 0) {
    c9f2:	bne.n	c9de <usb_audio_transmit_callback+0x62>
		len += num;
		offset += num;
    c9f4:	add	ip, r2
		len += num;
    c9f6:	add	r7, r2
		if (offset >= AUDIO_BLOCK_SAMPLES) {
    c9f8:	cmp.w	ip, #127	; 0x7f
    c9fc:	bhi.n	ca16 <usb_audio_transmit_callback+0x9a>
			AudioOutputUSB::left_2nd = NULL;
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
			AudioOutputUSB::right_2nd = NULL;
			AudioOutputUSB::offset_1st = 0;
		} else {
			AudioOutputUSB::offset_1st = offset;
    c9fe:	uxth.w	ip, ip
	while (len < target) {
    ca02:	cmp	r7, r9
			AudioOutputUSB::offset_1st = offset;
    ca04:	strh.w	ip, [sl]
	while (len < target) {
    ca08:	bcc.n	c9a6 <usb_audio_transmit_callback+0x2a>
		}
	}
	return target * 4;
}
    ca0a:	vmov	r0, s16
    ca0e:	vpop	{d8}
    ca12:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			AudioStream::release(left);
    ca16:	bl	c2b0 <AudioStream::release(audio_block_struct*)>
			AudioStream::release(right);
    ca1a:	mov	r0, r8
    ca1c:	bl	c2b0 <AudioStream::release(audio_block_struct*)>
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    ca20:	ldr	r0, [pc, #76]	; (ca70 <usb_audio_transmit_callback+0xf4>)
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    ca22:	ldr	r3, [pc, #80]	; (ca74 <usb_audio_transmit_callback+0xf8>)
			AudioOutputUSB::left_2nd = NULL;
    ca24:	movs	r2, #0
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    ca26:	ldr	r1, [r0, #0]
    ca28:	mov	ip, r2
			AudioOutputUSB::left_2nd = NULL;
    ca2a:	str	r2, [r0, #0]
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    ca2c:	str.w	r1, [fp]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    ca30:	ldr	r1, [r3, #0]
			AudioOutputUSB::right_2nd = NULL;
    ca32:	str	r2, [r3, #0]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    ca34:	ldr	r3, [pc, #48]	; (ca68 <usb_audio_transmit_callback+0xec>)
    ca36:	str	r1, [r3, #0]
			AudioOutputUSB::offset_1st = 0;
    ca38:	b.n	ca02 <usb_audio_transmit_callback+0x86>
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    ca3a:	movs	r1, #176	; 0xb0
		target = 44;
    ca3c:	mov.w	r9, #44	; 0x2c
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    ca40:	str	r3, [r2, #0]
    ca42:	vmov	s16, r1
    ca46:	b.n	c99c <usb_audio_transmit_callback+0x20>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
    ca48:	ldr	r3, [pc, #32]	; (ca6c <usb_audio_transmit_callback+0xf0>)
    ca4a:	mov	r1, r0
    ca4c:	lsls	r2, r2, #2
    ca4e:	add.w	r0, r3, r7, lsl #1
    ca52:	bl	dcd0 <memset>
}
    ca56:	vmov	r0, s16
    ca5a:	vpop	{d8}
    ca5e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca62:	nop
    ca64:	.word	0x20001474
    ca68:	.word	0x200061fc
    ca6c:	.word	0x20005240
    ca70:	.word	0x200061f8
    ca74:	.word	0x20006200
    ca78:	.word	0x200061f4
    ca7c:	.word	0x20007dc4

0000ca80 <tx_event(transfer_struct*)>:
{
    ca80:	push	{r3, r4, r5, lr}
	int len = usb_audio_transmit_callback();
    ca82:	bl	c97c <usb_audio_transmit_callback>
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ca86:	ldr	r2, [pc, #68]	; (cacc <tx_event(transfer_struct*)+0x4c>)
    ca88:	ldr	r3, [pc, #68]	; (cad0 <tx_event(transfer_struct*)+0x50>)
	int len = usb_audio_transmit_callback();
    ca8a:	mov	r5, r0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ca8c:	ldr	r2, [r2, #0]
    ca8e:	ldrb	r3, [r3, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ca90:	ldr	r4, [pc, #64]	; (cad4 <tx_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ca92:	lsrs	r2, r3
    ca94:	ldr	r1, [pc, #64]	; (cad8 <tx_event(transfer_struct*)+0x58>)
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ca96:	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ca98:	str	r2, [r1, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ca9a:	mov	r2, r0
    ca9c:	mov	r1, r4
    ca9e:	ldr	r0, [pc, #60]	; (cadc <tx_event(transfer_struct*)+0x5c>)
    caa0:	bl	b3b8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    caa4:	adds	r0, r4, r5
	asm("dsb");
    caa6:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    caaa:	mov.w	r3, #3758153728	; 0xe000e000
    caae:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    cab2:	adds	r4, #32
	} while (location < end_addr);
    cab4:	cmp	r0, r4
    cab6:	bhi.n	caae <tx_event(transfer_struct*)+0x2e>
	asm("dsb");
    cab8:	dsb	sy
	asm("isb");
    cabc:	isb	sy
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    cac0:	ldr	r1, [pc, #24]	; (cadc <tx_event(transfer_struct*)+0x5c>)
    cac2:	movs	r0, #5
}
    cac4:	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    cac8:	b.w	b3e8 <usb_transmit>
    cacc:	.word	0x200076a4
    cad0:	.word	0x20007df6
    cad4:	.word	0x20005240
    cad8:	.word	0x20205260
    cadc:	.word	0x20003220

0000cae0 <usb_audio_configure>:
{
    cae0:	push	{r3, r4, r5, lr}
	usb_audio_overrun_count = 0;
    cae2:	ldr	r1, [pc, #172]	; (cb90 <usb_audio_configure+0xb0>)
	usb_audio_underrun_count = 0;
    cae4:	movs	r4, #0
    cae6:	ldr	r3, [pc, #172]	; (cb94 <usb_audio_configure+0xb4>)
	if (usb_high_speed) {
    cae8:	ldr	r2, [pc, #172]	; (cb98 <usb_audio_configure+0xb8>)
	usb_audio_underrun_count = 0;
    caea:	str	r4, [r3, #0]
	usb_audio_overrun_count = 0;
    caec:	str	r4, [r1, #0]
	if (usb_high_speed) {
    caee:	ldrb	r1, [r2, #0]
	feedback_accumulator = 739875226; // 44.1 * 2^24
    caf0:	ldr	r3, [pc, #168]	; (cb9c <usb_audio_configure+0xbc>)
	if (usb_high_speed) {
    caf2:	cmp	r1, r4
	feedback_accumulator = 739875226; // 44.1 * 2^24
    caf4:	ldr	r2, [pc, #168]	; (cba0 <usb_audio_configure+0xc0>)
		usb_audio_sync_nbytes = 4;
    caf6:	ldr	r5, [pc, #172]	; (cba4 <usb_audio_configure+0xc4>)
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    caf8:	mov	r1, r4
	feedback_accumulator = 739875226; // 44.1 * 2^24
    cafa:	str	r2, [r3, #0]
	if (usb_high_speed) {
    cafc:	itete	eq
    cafe:	moveq	r3, #3
    cb00:	movne	r3, #4
    cb02:	moveq	r0, #10
    cb04:	movne	r0, #8
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    cb06:	movs	r2, #32
		usb_audio_sync_nbytes = 4;
    cb08:	strb	r3, [r5, #0]
		usb_audio_sync_rshift = 8;
    cb0a:	ldr	r3, [pc, #156]	; (cba8 <usb_audio_configure+0xc8>)
    cb0c:	strb	r0, [r3, #0]
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    cb0e:	ldr	r0, [pc, #156]	; (cbac <usb_audio_configure+0xcc>)
    cb10:	bl	dcd0 <memset>
	usb_config_rx_iso(AUDIO_RX_ENDPOINT, AUDIO_RX_SIZE, 1, rx_event);
    cb14:	movs	r2, #1
    cb16:	movs	r1, #180	; 0xb4
    cb18:	movs	r0, #5
    cb1a:	ldr	r3, [pc, #148]	; (cbb0 <usb_audio_configure+0xd0>)
    cb1c:	bl	b2e8 <usb_config_rx_iso>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    cb20:	mov	r3, r4
    cb22:	movs	r2, #180	; 0xb4
    cb24:	ldr	r1, [pc, #140]	; (cbb4 <usb_audio_configure+0xd4>)
    cb26:	ldr	r0, [pc, #132]	; (cbac <usb_audio_configure+0xcc>)
    cb28:	bl	b3b8 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    cb2c:	ldr	r3, [pc, #132]	; (cbb4 <usb_audio_configure+0xd4>)
	uint32_t end_addr = (uint32_t)addr + size;
    cb2e:	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    cb32:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    cb36:	mov.w	r2, #3758153728	; 0xe000e000
    cb3a:	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    cb3e:	adds	r3, #32
	} while (location < end_addr);
    cb40:	cmp	r1, r3
    cb42:	bhi.n	cb3a <usb_audio_configure+0x5a>
	asm("dsb");
    cb44:	dsb	sy
	asm("isb");
    cb48:	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    cb4c:	ldr	r1, [pc, #92]	; (cbac <usb_audio_configure+0xcc>)
    cb4e:	movs	r0, #5
    cb50:	bl	b410 <usb_receive>
	memset(&sync_transfer, 0, sizeof(sync_transfer));
    cb54:	movs	r2, #32
    cb56:	movs	r1, #0
    cb58:	ldr	r0, [pc, #92]	; (cbb8 <usb_audio_configure+0xd8>)
    cb5a:	bl	dcd0 <memset>
	usb_config_tx_iso(AUDIO_SYNC_ENDPOINT, usb_audio_sync_nbytes, 1, sync_event);
    cb5e:	ldr	r3, [pc, #92]	; (cbbc <usb_audio_configure+0xdc>)
    cb60:	ldrb	r1, [r5, #0]
    cb62:	movs	r2, #1
    cb64:	movs	r0, #6
    cb66:	bl	b34c <usb_config_tx_iso>
	sync_event(NULL);
    cb6a:	movs	r0, #0
    cb6c:	bl	c644 <sync_event(transfer_struct*)>
	memset(&tx_transfer, 0, sizeof(tx_transfer));
    cb70:	movs	r2, #32
    cb72:	movs	r1, #0
    cb74:	ldr	r0, [pc, #72]	; (cbc0 <usb_audio_configure+0xe0>)
    cb76:	bl	dcd0 <memset>
	usb_config_tx_iso(AUDIO_TX_ENDPOINT, AUDIO_TX_SIZE, 1, tx_event);
    cb7a:	movs	r0, #5
    cb7c:	ldr	r3, [pc, #68]	; (cbc4 <usb_audio_configure+0xe4>)
    cb7e:	movs	r2, #1
    cb80:	movs	r1, #180	; 0xb4
    cb82:	bl	b34c <usb_config_tx_iso>
	tx_event(NULL);
    cb86:	movs	r0, #0
}
    cb88:	ldmia.w	sp!, {r3, r4, r5, lr}
	tx_event(NULL);
    cb8c:	b.w	ca80 <tx_event(transfer_struct*)>
    cb90:	.word	0x20007d9c
    cb94:	.word	0x20007da0
    cb98:	.word	0x20007dfa
    cb9c:	.word	0x200076a4
    cba0:	.word	0x2c19999a
    cba4:	.word	0x20007df5
    cba8:	.word	0x20007df6
    cbac:	.word	0x200030e0
    cbb0:	.word	0x0000c90d
    cbb4:	.word	0x20205280
    cbb8:	.word	0x20003100
    cbbc:	.word	0x0000c645
    cbc0:	.word	0x20003220
    cbc4:	.word	0x0000ca81

0000cbc8 <usb_audio_get_feature>:
};

int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen)
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0xA1) { // should check bRequest, bChannel, and UnitID
    cbc8:	ldrb	r3, [r0, #0]
    cbca:	cmp	r3, #161	; 0xa1
    cbcc:	beq.n	cbd2 <usb_audio_get_feature+0xa>
			if (setup.bCS==0x01) { // mute
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
				*datalen = 1;
				return 1;
			}
			else if (setup.bCS==0x02) { // volume
    cbce:	movs	r0, #0
				*datalen = 2;
				return 1;
			}
	}
	return 0;
}
    cbd0:	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    cbd2:	ldrb	r3, [r0, #3]
    cbd4:	ldrb	r0, [r0, #1]
			if (setup.bCS==0x01) { // mute
    cbd6:	cmp	r3, #1
    cbd8:	beq.n	cbec <usb_audio_get_feature+0x24>
			else if (setup.bCS==0x02) { // volume
    cbda:	cmp	r3, #2
    cbdc:	bne.n	cbce <usb_audio_get_feature+0x6>
				if (setup.bRequest==0x81) { // GET_CURR
    cbde:	subs	r0, #129	; 0x81
    cbe0:	cmp	r0, #3
    cbe2:	bhi.n	cbce <usb_audio_get_feature+0x6>
    cbe4:	tbb	[pc, r0]
    cbe8:	.word	0x0b13171b
{
    cbec:	push	{r4}
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    cbee:	ldr	r4, [pc, #56]	; (cc28 <usb_audio_get_feature+0x60>)
				return 1;
    cbf0:	mov	r0, r3
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    cbf2:	ldr	r4, [r4, #4]
    cbf4:	strb	r4, [r1, #0]
}
    cbf6:	ldr.w	r4, [sp], #4
				*datalen = 1;
    cbfa:	str	r3, [r2, #0]
}
    cbfc:	bx	lr
					data[0] = 1; // increment vol by by 1
    cbfe:	movs	r3, #1
    cc00:	movs	r0, #0
    cc02:	strb	r3, [r1, #0]
				*datalen = 2;
    cc04:	movs	r3, #2
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    cc06:	strb	r0, [r1, #1]
				return 1;
    cc08:	movs	r0, #1
				*datalen = 2;
    cc0a:	str	r3, [r2, #0]
				return 1;
    cc0c:	bx	lr
					data[0] = FEATURE_MAX_VOLUME;  // max level, for range of 0 to MAX
    cc0e:	movs	r3, #255	; 0xff
    cc10:	movs	r0, #0
    cc12:	strb	r3, [r1, #0]
					data[1] = 0;
    cc14:	b.n	cc04 <usb_audio_get_feature+0x3c>
					data[0] = 0;     // min level is 0
    cc16:	movs	r3, #0
    cc18:	mov	r0, r3
    cc1a:	strb	r3, [r1, #0]
					data[1] = 0;
    cc1c:	b.n	cc04 <usb_audio_get_feature+0x3c>
					data[0] = AudioInputUSB::features.volume & 0xFF;
    cc1e:	ldr	r3, [pc, #8]	; (cc28 <usb_audio_get_feature+0x60>)
    cc20:	ldr	r0, [r3, #8]
    cc22:	strb	r0, [r1, #0]
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    cc24:	ldrb	r0, [r3, #9]
    cc26:	b.n	cc04 <usb_audio_get_feature+0x3c>
    cc28:	.word	0x20001460

0000cc2c <usb_audio_set_feature>:

int usb_audio_set_feature(void *stp, uint8_t *buf) 
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0x21) { // should check bRequest, bChannel and UnitID
    cc2c:	ldrb	r3, [r0, #0]
    cc2e:	cmp	r3, #33	; 0x21
    cc30:	beq.n	cc36 <usb_audio_set_feature+0xa>
					AudioInputUSB::features.change = 1;
					return 1;
				}
			}
	}
	return 0;
    cc32:	movs	r0, #0
}
    cc34:	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    cc36:	ldrb	r3, [r0, #3]
    cc38:	ldrb	r2, [r0, #1]
			if (setup.bCS==0x01) { // mute
    cc3a:	cmp	r3, #1
    cc3c:	beq.n	cc52 <usb_audio_set_feature+0x26>
				if (setup.bRequest==0x01) { // SET_CUR
    cc3e:	cmp	r3, #2
    cc40:	bne.n	cc32 <usb_audio_set_feature+0x6>
    cc42:	cmp	r2, #1
    cc44:	bne.n	cc32 <usb_audio_set_feature+0x6>
					AudioInputUSB::features.volume = buf[0];
    cc46:	ldr	r3, [pc, #28]	; (cc64 <usb_audio_set_feature+0x38>)
					return 1;
    cc48:	mov	r0, r2
					AudioInputUSB::features.volume = buf[0];
    cc4a:	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    cc4c:	str	r2, [r3, #0]
					AudioInputUSB::features.volume = buf[0];
    cc4e:	str	r1, [r3, #8]
					return 1;
    cc50:	bx	lr
				if (setup.bRequest==0x01) { // SET_CUR
    cc52:	cmp	r2, #1
    cc54:	bne.n	cc32 <usb_audio_set_feature+0x6>
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    cc56:	ldr	r3, [pc, #12]	; (cc64 <usb_audio_set_feature+0x38>)
					return 1;
    cc58:	mov	r0, r2
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    cc5a:	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    cc5c:	strd	r2, r1, [r3]
					return 1;
    cc60:	bx	lr
    cc62:	nop
    cc64:	.word	0x20001460

0000cc68 <Print::write(unsigned char const*, unsigned int)>:
{
    cc68:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    cc6c:	mov	r4, r1
    cc6e:	cbz	r1, cca6 <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
    cc70:	cbz	r2, ccae <Print::write(unsigned char const*, unsigned int)+0x46>
    cc72:	mov	r8, r0
    cc74:	adds	r6, r1, r2
	size_t count = 0;
    cc76:	movs	r5, #0
    cc78:	ldr	r7, [pc, #56]	; (ccb4 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    cc7a:	b.n	cc86 <Print::write(unsigned char const*, unsigned int)+0x1e>
    cc7c:	bl	a47c <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    cc80:	cmp	r4, r6
    cc82:	add	r5, r0
    cc84:	beq.n	cca0 <Print::write(unsigned char const*, unsigned int)+0x38>
    cc86:	ldr.w	r3, [r8]
    cc8a:	ldrb.w	r0, [r4], #1
    cc8e:	ldr	r3, [r3, #0]
    cc90:	cmp	r3, r7
    cc92:	beq.n	cc7c <Print::write(unsigned char const*, unsigned int)+0x14>
    cc94:	mov	r1, r0
    cc96:	mov	r0, r8
    cc98:	blx	r3
    cc9a:	cmp	r4, r6
    cc9c:	add	r5, r0
    cc9e:	bne.n	cc86 <Print::write(unsigned char const*, unsigned int)+0x1e>
}
    cca0:	mov	r0, r5
    cca2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    cca6:	mov	r5, r1
}
    cca8:	mov	r0, r5
    ccaa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    ccae:	mov	r5, r2
    ccb0:	b.n	cca0 <Print::write(unsigned char const*, unsigned int)+0x38>
    ccb2:	nop
    ccb4:	.word	0x0000c025

0000ccb8 <Print::println()>:
{
    ccb8:	push	{lr}
	return write(buf, 2);
    ccba:	ldr	r3, [r0, #0]
{
    ccbc:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    ccbe:	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    ccc2:	movs	r2, #2
    ccc4:	add	r1, sp, #4
    ccc6:	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    ccc8:	strh.w	ip, [sp, #4]
	return write(buf, 2);
    cccc:	blx	r3
}
    ccce:	add	sp, #12
    ccd0:	ldr.w	pc, [sp], #4

0000ccd4 <_write>:
	((class Print *)file)->write((uint8_t *)ptr, len);
    ccd4:	ldr	r3, [r0, #0]
{
    ccd6:	push	{r4, lr}
    ccd8:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    ccda:	ldr	r3, [r3, #4]
    ccdc:	blx	r3
}
    ccde:	mov	r0, r4
    cce0:	pop	{r4, pc}
    cce2:	nop

0000cce4 <Print::printf(char const*, ...)>:
{
    cce4:	push	{r1, r2, r3}
    cce6:	push	{lr}
    cce8:	sub	sp, #8
    ccea:	add	r2, sp, #12
    ccec:	ldr.w	r1, [r2], #4
	va_start(ap, format);
    ccf0:	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    ccf2:	bl	daf8 <vdprintf>
}
    ccf6:	add	sp, #8
    ccf8:	ldr.w	lr, [sp], #4
    ccfc:	add	sp, #12
    ccfe:	bx	lr

0000cd00 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    cd00:	bx	lr
    cd02:	nop

0000cd04 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    cd04:	b.w	ce9c <malloc>

0000cd08 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size)
{
	free(ptr);
    cd08:	b.w	ceac <free>

0000cd0c <ultoa>:
	int i=0, j;
    cd0c:	add.w	ip, r1, #4294967295
{
    cd10:	push	{r4, r5, r6, lr}
		digit = val % radix;
    cd12:	mov	r6, ip
	int i=0, j;
    cd14:	movs	r4, #0
    cd16:	b.n	cd1a <ultoa+0xe>
		i++;
    cd18:	adds	r4, #1
		digit = val % radix;
    cd1a:	udiv	r5, r0, r2
    cd1e:	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cd22:	cmp	r3, #9
    cd24:	add.w	lr, r3, #55	; 0x37
    cd28:	add.w	r3, r3, #48	; 0x30
    cd2c:	uxtb.w	lr, lr
    cd30:	it	ls
    cd32:	uxtbls.w	lr, r3
		if (val == 0) break;
    cd36:	cmp	r0, r2
		val /= radix;
    cd38:	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cd3a:	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    cd3e:	bcs.n	cd18 <ultoa+0xc>
	buf[i + 1] = 0;
    cd40:	adds	r3, r4, #1
    cd42:	movs	r2, #0
    cd44:	adds	r0, r1, r3
    cd46:	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    cd48:	cbz	r4, cd6a <ultoa+0x5e>
		t = buf[j];
    cd4a:	mov	r2, ip
    cd4c:	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    cd50:	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    cd54:	sub.w	r3, r1, ip
    cd58:	adds	r2, #2
		buf[j] = buf[i];
    cd5a:	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    cd5e:	subs	r3, #1
    cd60:	subs	r2, r2, r1
		buf[i] = t;
    cd62:	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    cd64:	add	r3, r4
    cd66:	cmp	r2, r3
    cd68:	blt.n	cd4a <ultoa+0x3e>
}
    cd6a:	mov	r0, r1
    cd6c:	pop	{r4, r5, r6, pc}
    cd6e:	nop

0000cd70 <pit_isr()>:

//FASTRUN
static void pit_isr()
{
    cd70:	push	{r4, lr}

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    cd72:	ldr	r4, [pc, #76]	; (cdc0 <pit_isr()+0x50>)
    cd74:	ldr	r3, [r4, #0]
    cd76:	cbz	r3, cd7e <pit_isr()+0xe>
    cd78:	ldr	r2, [pc, #72]	; (cdc4 <pit_isr()+0x54>)
    cd7a:	ldr	r1, [r2, #12]
    cd7c:	cbnz	r1, cdb8 <pit_isr()+0x48>
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    cd7e:	ldr	r3, [r4, #4]
    cd80:	cbz	r3, cd88 <pit_isr()+0x18>
    cd82:	ldr	r2, [pc, #64]	; (cdc4 <pit_isr()+0x54>)
    cd84:	ldr	r1, [r2, #28]
    cd86:	cbnz	r1, cdb0 <pit_isr()+0x40>
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    cd88:	ldr	r3, [r4, #8]
    cd8a:	cbz	r3, cd92 <pit_isr()+0x22>
    cd8c:	ldr	r2, [pc, #52]	; (cdc4 <pit_isr()+0x54>)
    cd8e:	ldr	r1, [r2, #44]	; 0x2c
    cd90:	cbnz	r1, cda8 <pit_isr()+0x38>
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    cd92:	ldr	r3, [r4, #12]
    cd94:	cbz	r3, cda6 <pit_isr()+0x36>
    cd96:	ldr	r2, [pc, #44]	; (cdc4 <pit_isr()+0x54>)
    cd98:	ldr	r1, [r2, #60]	; 0x3c
    cd9a:	cbz	r1, cda6 <pit_isr()+0x36>
    cd9c:	movs	r1, #1
#endif
}
    cd9e:	ldmia.w	sp!, {r4, lr}
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    cda2:	str	r1, [r2, #60]	; 0x3c
    cda4:	bx	r3
}
    cda6:	pop	{r4, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    cda8:	movs	r1, #1
    cdaa:	str	r1, [r2, #44]	; 0x2c
    cdac:	blx	r3
    cdae:	b.n	cd92 <pit_isr()+0x22>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    cdb0:	movs	r1, #1
    cdb2:	str	r1, [r2, #28]
    cdb4:	blx	r3
    cdb6:	b.n	cd88 <pit_isr()+0x18>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    cdb8:	movs	r1, #1
    cdba:	str	r1, [r2, #12]
    cdbc:	blx	r3
    cdbe:	b.n	cd7e <pit_isr()+0xe>
    cdc0:	.word	0x20001ec0
    cdc4:	.word	0x40084100

0000cdc8 <IntervalTimer::beginCycles(void (*)(), unsigned long)>:
	if (channel) {
    cdc8:	ldr	r3, [r0, #0]
{
    cdca:	mov	ip, r0
    cdcc:	push	{r4}
	if (channel) {
    cdce:	cbz	r3, ce2e <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x66>
		channel->TCTRL = 0;
    cdd0:	movs	r0, #0
    cdd2:	str	r0, [r3, #8]
		channel->TFLG = 1;
    cdd4:	movs	r0, #1
    cdd6:	str	r0, [r3, #12]
	channel->LDVAL = cycles;
    cdd8:	str	r2, [r3, #0]
	int index = channel - IMXRT_PIT_CHANNELS;
    cdda:	ldr	r2, [pc, #140]	; (ce68 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa0>)
	funct_table[index] = funct;
    cddc:	ldr	r0, [pc, #140]	; (ce6c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa4>)
	int index = channel - IMXRT_PIT_CHANNELS;
    cdde:	add	r2, r3
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    cde0:	ldr	r4, [pc, #140]	; (ce70 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa8>)
    cde2:	asrs	r2, r2, #4
	funct_table[index] = funct;
    cde4:	str.w	r1, [r0, r2, lsl #2]
	channel->TCTRL = 3;
    cde8:	movs	r0, #3
	nvic_priorites[index] = nvic_priority;
    cdea:	ldr	r1, [pc, #136]	; (ce74 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xac>)
	channel->TCTRL = 3;
    cdec:	str	r0, [r3, #8]
	nvic_priorites[index] = nvic_priority;
    cdee:	ldrb.w	r3, [ip, #4]
    cdf2:	ldr	r0, [pc, #132]	; (ce78 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb0>)
    cdf4:	strb	r3, [r1, r2]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    cdf6:	ldrb	r3, [r1, #0]
    cdf8:	ldrb	r2, [r1, #1]
    cdfa:	str.w	r4, [r0, #552]	; 0x228
    cdfe:	cmp	r3, r2
    ce00:	ldrb	r0, [r1, #2]
    ce02:	it	cs
    ce04:	movcs	r3, r2
    ce06:	ldrb	r2, [r1, #3]
    ce08:	cmp	r3, r0
    ce0a:	it	cs
    ce0c:	movcs	r3, r0
    ce0e:	cmp	r3, r2
    ce10:	it	cs
    ce12:	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    ce14:	ldr	r4, [pc, #100]	; (ce7c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb4>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
    ce16:	mov.w	r2, #3758153728	; 0xe000e000
    ce1a:	mov.w	r1, #67108864	; 0x4000000
	return true;
    ce1e:	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    ce20:	strb.w	r3, [r4, #122]	; 0x7a
}
    ce24:	ldr.w	r4, [sp], #4
	NVIC_ENABLE_IRQ(IRQ_PIT);
    ce28:	str.w	r1, [r2, #268]	; 0x10c
}
    ce2c:	bx	lr
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    ce2e:	ldr	r0, [pc, #80]	; (ce80 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb8>)
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    ce30:	ldr	r4, [pc, #80]	; (ce84 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xbc>)
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    ce32:	ldr	r3, [r0, #108]	; 0x6c
    ce34:	orr.w	r3, r3, #12288	; 0x3000
    ce38:	str	r3, [r0, #108]	; 0x6c
		PIT_MCR = 1;
    ce3a:	movs	r0, #1
    ce3c:	ldr	r3, [pc, #72]	; (ce88 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc0>)
    ce3e:	str	r0, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
    ce40:	ldr	r0, [pc, #72]	; (ce8c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc4>)
    ce42:	mov	r3, r0
    ce44:	str.w	r0, [ip]
			if (channel->TCTRL == 0) break;
    ce48:	ldr	r0, [r3, #8]
    ce4a:	cmp	r0, #0
    ce4c:	beq.n	cdd8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x10>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    ce4e:	adds	r3, #16
    ce50:	cmp	r3, r4
    ce52:	str.w	r3, [ip]
    ce56:	bne.n	ce48 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x80>
				channel = NULL;
    ce58:	movs	r3, #0
}
    ce5a:	ldr.w	r4, [sp], #4
				return false;
    ce5e:	mov	r0, r3
				channel = NULL;
    ce60:	str.w	r3, [ip]
}
    ce64:	bx	lr
    ce66:	nop
    ce68:	.word	0xbff7bf00
    ce6c:	.word	0x20001ec0
    ce70:	.word	0x0000cd71
    ce74:	.word	0x2000146c
    ce78:	.word	0x20001c00
    ce7c:	.word	0xe000e400
    ce80:	.word	0x400fc000
    ce84:	.word	0x40084140
    ce88:	.word	0x40084000
    ce8c:	.word	0x40084100

0000ce90 <__aeabi_atexit>:
    ce90:	mov	r3, r0
    ce92:	mov	r0, r1
    ce94:	mov	r1, r3
    ce96:	b.w	d80c <__cxa_atexit>
    ce9a:	nop

0000ce9c <malloc>:
    ce9c:	ldr	r3, [pc, #8]	; (cea8 <malloc+0xc>)
    ce9e:	mov	r1, r0
    cea0:	ldr	r0, [r3, #0]
    cea2:	b.w	cebc <_malloc_r>
    cea6:	nop
    cea8:	.word	0x20001a0c

0000ceac <free>:
    ceac:	ldr	r3, [pc, #8]	; (ceb8 <free+0xc>)
    ceae:	mov	r1, r0
    ceb0:	ldr	r0, [r3, #0]
    ceb2:	b.w	e244 <_free_r>
    ceb6:	nop
    ceb8:	.word	0x20001a0c

0000cebc <_malloc_r>:
    cebc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cec0:	add.w	r6, r1, #11
    cec4:	cmp	r6, #22
    cec6:	sub	sp, #12
    cec8:	mov	r4, r0
    ceca:	bhi.n	cf16 <_malloc_r+0x5a>
    cecc:	cmp	r1, #16
    cece:	bhi.w	d046 <_malloc_r+0x18a>
    ced2:	bl	d41c <__malloc_lock>
    ced6:	movs	r6, #16
    ced8:	movs	r2, #24
    ceda:	movs	r0, #2
    cedc:	ldr	r7, [pc, #724]	; (d1b4 <_malloc_r+0x2f8>)
    cede:	add	r2, r7
    cee0:	sub.w	r1, r2, #8
    cee4:	ldr	r3, [r2, #4]
    cee6:	cmp	r3, r1
    cee8:	beq.w	d060 <_malloc_r+0x1a4>
    ceec:	ldr	r2, [r3, #4]
    ceee:	ldr	r1, [r3, #12]
    cef0:	bic.w	r2, r2, #3
    cef4:	add	r2, r3
    cef6:	ldr	r5, [r3, #8]
    cef8:	str	r1, [r5, #12]
    cefa:	str	r5, [r1, #8]
    cefc:	ldr	r1, [r2, #4]
    cefe:	orr.w	r1, r1, #1
    cf02:	mov	r0, r4
    cf04:	str	r1, [r2, #4]
    cf06:	add.w	r5, r3, #8
    cf0a:	bl	d428 <__malloc_unlock>
    cf0e:	mov	r0, r5
    cf10:	add	sp, #12
    cf12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf16:	bics.w	r6, r6, #7
    cf1a:	bmi.w	d046 <_malloc_r+0x18a>
    cf1e:	cmp	r1, r6
    cf20:	bhi.w	d046 <_malloc_r+0x18a>
    cf24:	bl	d41c <__malloc_lock>
    cf28:	cmp.w	r6, #504	; 0x1f8
    cf2c:	bcc.w	d264 <_malloc_r+0x3a8>
    cf30:	lsrs	r3, r6, #9
    cf32:	beq.w	d054 <_malloc_r+0x198>
    cf36:	cmp	r3, #4
    cf38:	bhi.w	d21a <_malloc_r+0x35e>
    cf3c:	lsrs	r3, r6, #6
    cf3e:	add.w	r0, r3, #57	; 0x39
    cf42:	add.w	ip, r3, #56	; 0x38
    cf46:	lsls	r3, r0, #3
    cf48:	ldr	r7, [pc, #616]	; (d1b4 <_malloc_r+0x2f8>)
    cf4a:	add	r3, r7
    cf4c:	sub.w	r5, r3, #8
    cf50:	ldr	r3, [r3, #4]
    cf52:	cmp	r5, r3
    cf54:	bne.n	cf64 <_malloc_r+0xa8>
    cf56:	b.n	cf72 <_malloc_r+0xb6>
    cf58:	cmp	r1, #0
    cf5a:	bge.w	d1ac <_malloc_r+0x2f0>
    cf5e:	ldr	r3, [r3, #12]
    cf60:	cmp	r5, r3
    cf62:	beq.n	cf72 <_malloc_r+0xb6>
    cf64:	ldr	r2, [r3, #4]
    cf66:	bic.w	r2, r2, #3
    cf6a:	subs	r1, r2, r6
    cf6c:	cmp	r1, #15
    cf6e:	ble.n	cf58 <_malloc_r+0x9c>
    cf70:	mov	r0, ip
    cf72:	ldr	r5, [r7, #16]
    cf74:	ldr.w	ip, [pc, #592]	; d1c8 <_malloc_r+0x30c>
    cf78:	cmp	r5, ip
    cf7a:	beq.n	d076 <_malloc_r+0x1ba>
    cf7c:	ldr	r2, [r5, #4]
    cf7e:	bic.w	r2, r2, #3
    cf82:	subs	r3, r2, r6
    cf84:	cmp	r3, #15
    cf86:	bgt.w	d280 <_malloc_r+0x3c4>
    cf8a:	cmp	r3, #0
    cf8c:	strd	ip, ip, [r7, #16]
    cf90:	bge.w	d26c <_malloc_r+0x3b0>
    cf94:	cmp.w	r2, #512	; 0x200
    cf98:	bcs.w	d1d0 <_malloc_r+0x314>
    cf9c:	lsrs	r3, r2, #3
    cf9e:	ldr	r1, [r7, #4]
    cfa0:	adds	r3, #1
    cfa2:	mov.w	lr, r2, lsr #5
    cfa6:	movs	r2, #1
    cfa8:	lsl.w	r2, r2, lr
    cfac:	orrs	r2, r1
    cfae:	ldr.w	lr, [r7, r3, lsl #3]
    cfb2:	str.w	lr, [r5, #8]
    cfb6:	add.w	r1, r7, r3, lsl #3
    cfba:	subs	r1, #8
    cfbc:	str	r1, [r5, #12]
    cfbe:	str	r2, [r7, #4]
    cfc0:	str.w	r5, [r7, r3, lsl #3]
    cfc4:	str.w	r5, [lr, #12]
    cfc8:	asrs	r3, r0, #2
    cfca:	movs	r1, #1
    cfcc:	lsls	r1, r3
    cfce:	cmp	r1, r2
    cfd0:	bhi.n	d082 <_malloc_r+0x1c6>
    cfd2:	tst	r1, r2
    cfd4:	bne.n	cfe4 <_malloc_r+0x128>
    cfd6:	bic.w	r0, r0, #3
    cfda:	lsls	r1, r1, #1
    cfdc:	tst	r1, r2
    cfde:	add.w	r0, r0, #4
    cfe2:	beq.n	cfda <_malloc_r+0x11e>
    cfe4:	add.w	r9, r7, r0, lsl #3
    cfe8:	mov	r5, r9
    cfea:	mov	lr, r0
    cfec:	ldr.w	r8, [r5, #12]
    cff0:	cmp	r5, r8
    cff2:	bne.n	d006 <_malloc_r+0x14a>
    cff4:	b.n	d232 <_malloc_r+0x376>
    cff6:	cmp	r3, #0
    cff8:	bge.w	d244 <_malloc_r+0x388>
    cffc:	ldr.w	r8, [r8, #12]
    d000:	cmp	r5, r8
    d002:	beq.w	d232 <_malloc_r+0x376>
    d006:	ldr.w	r2, [r8, #4]
    d00a:	bic.w	r2, r2, #3
    d00e:	subs	r3, r2, r6
    d010:	cmp	r3, #15
    d012:	ble.n	cff6 <_malloc_r+0x13a>
    d014:	mov	r0, r4
    d016:	ldrd	r5, r4, [r8, #8]
    d01a:	add.w	r1, r8, r6
    d01e:	orr.w	r6, r6, #1
    d022:	str.w	r6, [r8, #4]
    d026:	str	r4, [r5, #12]
    d028:	str	r5, [r4, #8]
    d02a:	orr.w	r4, r3, #1
    d02e:	strd	r1, r1, [r7, #16]
    d032:	strd	ip, ip, [r1, #8]
    d036:	str	r4, [r1, #4]
    d038:	str.w	r3, [r8, r2]
    d03c:	bl	d428 <__malloc_unlock>
    d040:	add.w	r5, r8, #8
    d044:	b.n	d04c <_malloc_r+0x190>
    d046:	movs	r3, #12
    d048:	str	r3, [r4, #0]
    d04a:	movs	r5, #0
    d04c:	mov	r0, r5
    d04e:	add	sp, #12
    d050:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d054:	mov.w	r3, #512	; 0x200
    d058:	movs	r0, #64	; 0x40
    d05a:	mov.w	ip, #63	; 0x3f
    d05e:	b.n	cf48 <_malloc_r+0x8c>
    d060:	ldr	r3, [r2, #12]
    d062:	cmp	r2, r3
    d064:	it	eq
    d066:	addeq	r0, #2
    d068:	bne.w	ceec <_malloc_r+0x30>
    d06c:	ldr	r5, [r7, #16]
    d06e:	ldr.w	ip, [pc, #344]	; d1c8 <_malloc_r+0x30c>
    d072:	cmp	r5, ip
    d074:	bne.n	cf7c <_malloc_r+0xc0>
    d076:	ldr	r2, [r7, #4]
    d078:	asrs	r3, r0, #2
    d07a:	movs	r1, #1
    d07c:	lsls	r1, r3
    d07e:	cmp	r1, r2
    d080:	bls.n	cfd2 <_malloc_r+0x116>
    d082:	ldr	r5, [r7, #8]
    d084:	ldr	r3, [r5, #4]
    d086:	bic.w	r9, r3, #3
    d08a:	cmp	r6, r9
    d08c:	bhi.n	d096 <_malloc_r+0x1da>
    d08e:	sub.w	r3, r9, r6
    d092:	cmp	r3, #15
    d094:	bgt.n	d18c <_malloc_r+0x2d0>
    d096:	ldr.w	fp, [pc, #308]	; d1cc <_malloc_r+0x310>
    d09a:	ldr	r3, [pc, #284]	; (d1b8 <_malloc_r+0x2fc>)
    d09c:	ldr.w	r2, [fp]
    d0a0:	ldr	r3, [r3, #0]
    d0a2:	adds	r2, #1
    d0a4:	add	r3, r6
    d0a6:	add.w	sl, r5, r9
    d0aa:	beq.w	d314 <_malloc_r+0x458>
    d0ae:	add.w	r3, r3, #4096	; 0x1000
    d0b2:	adds	r3, #15
    d0b4:	bic.w	r8, r3, #4080	; 0xff0
    d0b8:	bic.w	r8, r8, #15
    d0bc:	mov	r1, r8
    d0be:	mov	r0, r4
    d0c0:	bl	deec <_sbrk_r>
    d0c4:	adds	r1, r0, #1
    d0c6:	mov	r2, r0
    d0c8:	beq.w	d2b2 <_malloc_r+0x3f6>
    d0cc:	cmp	sl, r0
    d0ce:	bhi.w	d2ae <_malloc_r+0x3f2>
    d0d2:	ldr	r3, [pc, #232]	; (d1bc <_malloc_r+0x300>)
    d0d4:	ldr	r1, [r3, #0]
    d0d6:	add	r1, r8
    d0d8:	str	r1, [r3, #0]
    d0da:	mov	r0, r1
    d0dc:	beq.w	d37c <_malloc_r+0x4c0>
    d0e0:	ldr.w	r1, [fp]
    d0e4:	str	r3, [sp, #4]
    d0e6:	adds	r1, #1
    d0e8:	ittet	ne
    d0ea:	subne.w	r1, r2, sl
    d0ee:	addne	r1, r1, r0
    d0f0:	streq.w	r2, [fp]
    d0f4:	strne	r1, [r3, #0]
    d0f6:	ands.w	fp, r2, #7
    d0fa:	beq.w	d32c <_malloc_r+0x470>
    d0fe:	rsb	r1, fp, #8
    d102:	add	r2, r1
    d104:	rsb	r1, fp, #4096	; 0x1000
    d108:	add	r8, r2
    d10a:	adds	r1, #8
    d10c:	sub.w	r1, r1, r8
    d110:	ubfx	sl, r1, #0, #12
    d114:	mov	r1, sl
    d116:	mov	r0, r4
    d118:	str	r2, [sp, #0]
    d11a:	bl	deec <_sbrk_r>
    d11e:	adds	r2, r0, #1
    d120:	ldrd	r2, r3, [sp]
    d124:	beq.w	d3c6 <_malloc_r+0x50a>
    d128:	subs	r0, r0, r2
    d12a:	add.w	r8, r0, sl
    d12e:	ldr	r1, [r3, #0]
    d130:	str	r2, [r7, #8]
    d132:	orr.w	r0, r8, #1
    d136:	add	r1, sl
    d138:	cmp	r5, r7
    d13a:	str	r0, [r2, #4]
    d13c:	str	r1, [r3, #0]
    d13e:	beq.w	d394 <_malloc_r+0x4d8>
    d142:	cmp.w	r9, #15
    d146:	bls.w	d398 <_malloc_r+0x4dc>
    d14a:	ldr	r0, [r5, #4]
    d14c:	sub.w	ip, r9, #12
    d150:	bic.w	ip, ip, #7
    d154:	and.w	r0, r0, #1
    d158:	orr.w	r0, r0, ip
    d15c:	str	r0, [r5, #4]
    d15e:	mov.w	lr, #5
    d162:	add.w	r0, r5, ip
    d166:	cmp.w	ip, #15
    d16a:	strd	lr, lr, [r0, #4]
    d16e:	bhi.w	d3d6 <_malloc_r+0x51a>
    d172:	ldr	r0, [r2, #4]
    d174:	mov	r5, r2
    d176:	ldr	r3, [pc, #72]	; (d1c0 <_malloc_r+0x304>)
    d178:	ldr	r2, [r3, #0]
    d17a:	cmp	r2, r1
    d17c:	it	cc
    d17e:	strcc	r1, [r3, #0]
    d180:	ldr	r3, [pc, #64]	; (d1c4 <_malloc_r+0x308>)
    d182:	ldr	r2, [r3, #0]
    d184:	cmp	r2, r1
    d186:	it	cc
    d188:	strcc	r1, [r3, #0]
    d18a:	b.n	d2b6 <_malloc_r+0x3fa>
    d18c:	adds	r2, r5, r6
    d18e:	orr.w	r3, r3, #1
    d192:	orr.w	r6, r6, #1
    d196:	str	r6, [r5, #4]
    d198:	mov	r0, r4
    d19a:	str	r2, [r7, #8]
    d19c:	str	r3, [r2, #4]
    d19e:	bl	d428 <__malloc_unlock>
    d1a2:	adds	r5, #8
    d1a4:	mov	r0, r5
    d1a6:	add	sp, #12
    d1a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d1ac:	ldr	r1, [r3, #12]
    d1ae:	add	r2, r3
    d1b0:	b.n	cef6 <_malloc_r+0x3a>
    d1b2:	nop
    d1b4:	.word	0x200015f0
    d1b8:	.word	0x200064a4
    d1bc:	.word	0x20006474
    d1c0:	.word	0x2000649c
    d1c4:	.word	0x200064a0
    d1c8:	.word	0x200015f8
    d1cc:	.word	0x200019f8
    d1d0:	cmp.w	r2, #2560	; 0xa00
    d1d4:	mov.w	r3, r2, lsr #9
    d1d8:	bcc.n	d2a2 <_malloc_r+0x3e6>
    d1da:	cmp	r3, #20
    d1dc:	bhi.w	d34e <_malloc_r+0x492>
    d1e0:	add.w	r1, r3, #92	; 0x5c
    d1e4:	lsls	r1, r1, #3
    d1e6:	adds	r3, #91	; 0x5b
    d1e8:	add.w	lr, r7, r1
    d1ec:	ldr	r1, [r7, r1]
    d1ee:	sub.w	lr, lr, #8
    d1f2:	cmp	lr, r1
    d1f4:	beq.w	d31a <_malloc_r+0x45e>
    d1f8:	ldr	r3, [r1, #4]
    d1fa:	bic.w	r3, r3, #3
    d1fe:	cmp	r3, r2
    d200:	bls.n	d208 <_malloc_r+0x34c>
    d202:	ldr	r1, [r1, #8]
    d204:	cmp	lr, r1
    d206:	bne.n	d1f8 <_malloc_r+0x33c>
    d208:	ldr.w	lr, [r1, #12]
    d20c:	ldr	r2, [r7, #4]
    d20e:	strd	r1, lr, [r5, #8]
    d212:	str.w	r5, [lr, #8]
    d216:	str	r5, [r1, #12]
    d218:	b.n	cfc8 <_malloc_r+0x10c>
    d21a:	cmp	r3, #20
    d21c:	bls.n	d2d2 <_malloc_r+0x416>
    d21e:	cmp	r3, #84	; 0x54
    d220:	bhi.w	d35e <_malloc_r+0x4a2>
    d224:	lsrs	r3, r6, #12
    d226:	add.w	r0, r3, #111	; 0x6f
    d22a:	add.w	ip, r3, #110	; 0x6e
    d22e:	lsls	r3, r0, #3
    d230:	b.n	cf48 <_malloc_r+0x8c>
    d232:	add.w	lr, lr, #1
    d236:	tst.w	lr, #3
    d23a:	add.w	r5, r5, #8
    d23e:	bne.w	cfec <_malloc_r+0x130>
    d242:	b.n	d2e8 <_malloc_r+0x42c>
    d244:	add	r2, r8
    d246:	mov	r5, r8
    d248:	ldr	r3, [r2, #4]
    d24a:	ldr.w	r1, [r8, #12]
    d24e:	orr.w	r3, r3, #1
    d252:	str	r3, [r2, #4]
    d254:	ldr.w	r3, [r5, #8]!
    d258:	mov	r0, r4
    d25a:	str	r1, [r3, #12]
    d25c:	str	r3, [r1, #8]
    d25e:	bl	d428 <__malloc_unlock>
    d262:	b.n	d04c <_malloc_r+0x190>
    d264:	lsrs	r0, r6, #3
    d266:	add.w	r2, r6, #8
    d26a:	b.n	cedc <_malloc_r+0x20>
    d26c:	add	r2, r5
    d26e:	mov	r0, r4
    d270:	ldr	r3, [r2, #4]
    d272:	orr.w	r3, r3, #1
    d276:	str	r3, [r2, #4]
    d278:	adds	r5, #8
    d27a:	bl	d428 <__malloc_unlock>
    d27e:	b.n	d04c <_malloc_r+0x190>
    d280:	adds	r1, r5, r6
    d282:	mov	r0, r4
    d284:	orr.w	r6, r6, #1
    d288:	orr.w	r4, r3, #1
    d28c:	str	r6, [r5, #4]
    d28e:	strd	r1, r1, [r7, #16]
    d292:	strd	ip, ip, [r1, #8]
    d296:	str	r4, [r1, #4]
    d298:	str	r3, [r5, r2]
    d29a:	bl	d428 <__malloc_unlock>
    d29e:	adds	r5, #8
    d2a0:	b.n	d04c <_malloc_r+0x190>
    d2a2:	lsrs	r3, r2, #6
    d2a4:	add.w	r1, r3, #57	; 0x39
    d2a8:	lsls	r1, r1, #3
    d2aa:	adds	r3, #56	; 0x38
    d2ac:	b.n	d1e8 <_malloc_r+0x32c>
    d2ae:	cmp	r5, r7
    d2b0:	beq.n	d372 <_malloc_r+0x4b6>
    d2b2:	ldr	r5, [r7, #8]
    d2b4:	ldr	r0, [r5, #4]
    d2b6:	bic.w	r8, r0, #3
    d2ba:	cmp	r6, r8
    d2bc:	sub.w	r3, r8, r6
    d2c0:	bhi.n	d2c8 <_malloc_r+0x40c>
    d2c2:	cmp	r3, #15
    d2c4:	bgt.w	d18c <_malloc_r+0x2d0>
    d2c8:	mov	r0, r4
    d2ca:	bl	d428 <__malloc_unlock>
    d2ce:	movs	r5, #0
    d2d0:	b.n	d04c <_malloc_r+0x190>
    d2d2:	add.w	r0, r3, #92	; 0x5c
    d2d6:	add.w	ip, r3, #91	; 0x5b
    d2da:	lsls	r3, r0, #3
    d2dc:	b.n	cf48 <_malloc_r+0x8c>
    d2de:	ldr.w	r3, [r9], #-8
    d2e2:	cmp	r3, r9
    d2e4:	bne.w	d414 <_malloc_r+0x558>
    d2e8:	tst.w	r0, #3
    d2ec:	add.w	r0, r0, #4294967295
    d2f0:	bne.n	d2de <_malloc_r+0x422>
    d2f2:	ldr	r3, [r7, #4]
    d2f4:	bic.w	r3, r3, r1
    d2f8:	str	r3, [r7, #4]
    d2fa:	lsls	r1, r1, #1
    d2fc:	cmp	r1, r3
    d2fe:	bhi.w	d082 <_malloc_r+0x1c6>
    d302:	cbnz	r1, d30c <_malloc_r+0x450>
    d304:	b.n	d082 <_malloc_r+0x1c6>
    d306:	lsls	r1, r1, #1
    d308:	add.w	lr, lr, #4
    d30c:	tst	r1, r3
    d30e:	beq.n	d306 <_malloc_r+0x44a>
    d310:	mov	r0, lr
    d312:	b.n	cfe4 <_malloc_r+0x128>
    d314:	add.w	r8, r3, #16
    d318:	b.n	d0bc <_malloc_r+0x200>
    d31a:	asrs	r2, r3, #2
    d31c:	mov.w	r8, #1
    d320:	ldr	r3, [r7, #4]
    d322:	lsl.w	r2, r8, r2
    d326:	orrs	r2, r3
    d328:	str	r2, [r7, #4]
    d32a:	b.n	d20e <_malloc_r+0x352>
    d32c:	add.w	r1, r2, r8
    d330:	negs	r1, r1
    d332:	ubfx	sl, r1, #0, #12
    d336:	mov	r1, sl
    d338:	mov	r0, r4
    d33a:	str	r2, [sp, #0]
    d33c:	bl	deec <_sbrk_r>
    d340:	adds	r3, r0, #1
    d342:	ldrd	r2, r3, [sp]
    d346:	bne.w	d128 <_malloc_r+0x26c>
    d34a:	mov	sl, fp
    d34c:	b.n	d12e <_malloc_r+0x272>
    d34e:	cmp	r3, #84	; 0x54
    d350:	bhi.n	d39e <_malloc_r+0x4e2>
    d352:	lsrs	r3, r2, #12
    d354:	add.w	r1, r3, #111	; 0x6f
    d358:	lsls	r1, r1, #3
    d35a:	adds	r3, #110	; 0x6e
    d35c:	b.n	d1e8 <_malloc_r+0x32c>
    d35e:	cmp.w	r3, #340	; 0x154
    d362:	bhi.n	d3b0 <_malloc_r+0x4f4>
    d364:	lsrs	r3, r6, #15
    d366:	add.w	r0, r3, #120	; 0x78
    d36a:	add.w	ip, r3, #119	; 0x77
    d36e:	lsls	r3, r0, #3
    d370:	b.n	cf48 <_malloc_r+0x8c>
    d372:	ldr	r3, [pc, #164]	; (d418 <_malloc_r+0x55c>)
    d374:	ldr	r0, [r3, #0]
    d376:	add	r0, r8
    d378:	str	r0, [r3, #0]
    d37a:	b.n	d0e0 <_malloc_r+0x224>
    d37c:	ubfx	ip, sl, #0, #12
    d380:	cmp.w	ip, #0
    d384:	bne.w	d0e0 <_malloc_r+0x224>
    d388:	ldr	r5, [r7, #8]
    d38a:	add	r8, r9
    d38c:	orr.w	r0, r8, #1
    d390:	str	r0, [r5, #4]
    d392:	b.n	d176 <_malloc_r+0x2ba>
    d394:	mov	r5, r2
    d396:	b.n	d176 <_malloc_r+0x2ba>
    d398:	movs	r3, #1
    d39a:	str	r3, [r2, #4]
    d39c:	b.n	d2c8 <_malloc_r+0x40c>
    d39e:	cmp.w	r3, #340	; 0x154
    d3a2:	bhi.n	d3ec <_malloc_r+0x530>
    d3a4:	lsrs	r3, r2, #15
    d3a6:	add.w	r1, r3, #120	; 0x78
    d3aa:	lsls	r1, r1, #3
    d3ac:	adds	r3, #119	; 0x77
    d3ae:	b.n	d1e8 <_malloc_r+0x32c>
    d3b0:	movw	r2, #1364	; 0x554
    d3b4:	cmp	r3, r2
    d3b6:	bhi.n	d400 <_malloc_r+0x544>
    d3b8:	lsrs	r3, r6, #18
    d3ba:	add.w	r0, r3, #125	; 0x7d
    d3be:	add.w	ip, r3, #124	; 0x7c
    d3c2:	lsls	r3, r0, #3
    d3c4:	b.n	cf48 <_malloc_r+0x8c>
    d3c6:	sub.w	fp, fp, #8
    d3ca:	add	r8, fp
    d3cc:	sub.w	r8, r8, r2
    d3d0:	mov.w	sl, #0
    d3d4:	b.n	d12e <_malloc_r+0x272>
    d3d6:	add.w	r1, r5, #8
    d3da:	mov	r0, r4
    d3dc:	str	r3, [sp, #0]
    d3de:	bl	e244 <_free_r>
    d3e2:	ldr	r5, [r7, #8]
    d3e4:	ldr	r3, [sp, #0]
    d3e6:	ldr	r0, [r5, #4]
    d3e8:	ldr	r1, [r3, #0]
    d3ea:	b.n	d176 <_malloc_r+0x2ba>
    d3ec:	movw	r1, #1364	; 0x554
    d3f0:	cmp	r3, r1
    d3f2:	bhi.n	d40c <_malloc_r+0x550>
    d3f4:	lsrs	r3, r2, #18
    d3f6:	add.w	r1, r3, #125	; 0x7d
    d3fa:	lsls	r1, r1, #3
    d3fc:	adds	r3, #124	; 0x7c
    d3fe:	b.n	d1e8 <_malloc_r+0x32c>
    d400:	mov.w	r3, #1016	; 0x3f8
    d404:	movs	r0, #127	; 0x7f
    d406:	mov.w	ip, #126	; 0x7e
    d40a:	b.n	cf48 <_malloc_r+0x8c>
    d40c:	mov.w	r1, #1016	; 0x3f8
    d410:	movs	r3, #126	; 0x7e
    d412:	b.n	d1e8 <_malloc_r+0x32c>
    d414:	ldr	r3, [r7, #4]
    d416:	b.n	d2fa <_malloc_r+0x43e>
    d418:	.word	0x20006474

0000d41c <__malloc_lock>:
    d41c:	ldr	r0, [pc, #4]	; (d424 <__malloc_lock+0x8>)
    d41e:	b.w	df98 <__retarget_lock_acquire_recursive>
    d422:	nop
    d424:	.word	0x2000646c

0000d428 <__malloc_unlock>:
    d428:	ldr	r0, [pc, #4]	; (d430 <__malloc_unlock+0x8>)
    d42a:	b.w	df9c <__retarget_lock_release_recursive>
    d42e:	nop
    d430:	.word	0x2000646c

0000d434 <_realloc_r>:
    d434:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d438:	mov	r7, r2
    d43a:	cmp	r1, #0
    d43c:	beq.w	d570 <_realloc_r+0x13c>
    d440:	mov	r4, r1
    d442:	add.w	r5, r7, #11
    d446:	mov	r8, r0
    d448:	bl	d41c <__malloc_lock>
    d44c:	cmp	r5, #22
    d44e:	ldr.w	r1, [r4, #-4]
    d452:	bhi.n	d50c <_realloc_r+0xd8>
    d454:	movs	r5, #16
    d456:	mov	r2, r5
    d458:	cmp	r7, r5
    d45a:	bhi.n	d516 <_realloc_r+0xe2>
    d45c:	bic.w	r6, r1, #3
    d460:	cmp	r6, r2
    d462:	sub.w	r9, r4, #8
    d466:	bge.n	d52e <_realloc_r+0xfa>
    d468:	ldr	r3, [pc, #752]	; (d75c <_realloc_r+0x328>)
    d46a:	ldr.w	ip, [r3, #8]
    d46e:	add.w	r0, r9, r6
    d472:	cmp	ip, r0
    d474:	beq.w	d5a6 <_realloc_r+0x172>
    d478:	ldr.w	ip, [r0, #4]
    d47c:	bic.w	r3, ip, #1
    d480:	add	r3, r0
    d482:	ldr	r3, [r3, #4]
    d484:	lsls	r3, r3, #31
    d486:	bmi.n	d55a <_realloc_r+0x126>
    d488:	bic.w	ip, ip, #3
    d48c:	add.w	r3, r6, ip
    d490:	cmp	r3, r2
    d492:	bge.n	d524 <_realloc_r+0xf0>
    d494:	lsls	r3, r1, #31
    d496:	bmi.n	d4ba <_realloc_r+0x86>
    d498:	ldr.w	r3, [r4, #-8]
    d49c:	sub.w	sl, r9, r3
    d4a0:	ldr.w	r3, [sl, #4]
    d4a4:	bic.w	r1, r3, #3
    d4a8:	add	ip, r1
    d4aa:	add	ip, r6
    d4ac:	cmp	ip, r2
    d4ae:	bge.w	d6d4 <_realloc_r+0x2a0>
    d4b2:	adds	r3, r6, r1
    d4b4:	cmp	r3, r2
    d4b6:	bge.w	d68a <_realloc_r+0x256>
    d4ba:	mov	r1, r7
    d4bc:	mov	r0, r8
    d4be:	bl	cebc <_malloc_r>
    d4c2:	mov	r7, r0
    d4c4:	cbz	r0, d500 <_realloc_r+0xcc>
    d4c6:	ldr.w	r3, [r4, #-4]
    d4ca:	bic.w	r3, r3, #1
    d4ce:	add	r3, r9
    d4d0:	sub.w	r2, r0, #8
    d4d4:	cmp	r3, r2
    d4d6:	beq.w	d67e <_realloc_r+0x24a>
    d4da:	subs	r2, r6, #4
    d4dc:	cmp	r2, #36	; 0x24
    d4de:	bhi.w	d6cc <_realloc_r+0x298>
    d4e2:	cmp	r2, #19
    d4e4:	bhi.w	d640 <_realloc_r+0x20c>
    d4e8:	mov	r3, r0
    d4ea:	mov	r2, r4
    d4ec:	ldr	r1, [r2, #0]
    d4ee:	str	r1, [r3, #0]
    d4f0:	ldr	r1, [r2, #4]
    d4f2:	str	r1, [r3, #4]
    d4f4:	ldr	r2, [r2, #8]
    d4f6:	str	r2, [r3, #8]
    d4f8:	mov	r1, r4
    d4fa:	mov	r0, r8
    d4fc:	bl	e244 <_free_r>
    d500:	mov	r0, r8
    d502:	bl	d428 <__malloc_unlock>
    d506:	mov	r0, r7
    d508:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d50c:	bic.w	r5, r5, #7
    d510:	cmp	r5, #0
    d512:	mov	r2, r5
    d514:	bge.n	d458 <_realloc_r+0x24>
    d516:	movs	r3, #12
    d518:	str.w	r3, [r8]
    d51c:	movs	r7, #0
    d51e:	mov	r0, r7
    d520:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d524:	mov	r6, r3
    d526:	ldrd	r2, r3, [r0, #8]
    d52a:	str	r3, [r2, #12]
    d52c:	str	r2, [r3, #8]
    d52e:	subs	r3, r6, r5
    d530:	cmp	r3, #15
    d532:	bhi.n	d57a <_realloc_r+0x146>
    d534:	ldr.w	r3, [r9, #4]
    d538:	and.w	r3, r3, #1
    d53c:	orrs	r3, r6
    d53e:	add	r6, r9
    d540:	str.w	r3, [r9, #4]
    d544:	ldr	r3, [r6, #4]
    d546:	orr.w	r3, r3, #1
    d54a:	str	r3, [r6, #4]
    d54c:	mov	r0, r8
    d54e:	mov	r7, r4
    d550:	bl	d428 <__malloc_unlock>
    d554:	mov	r0, r7
    d556:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d55a:	lsls	r1, r1, #31
    d55c:	bmi.n	d4ba <_realloc_r+0x86>
    d55e:	ldr.w	r3, [r4, #-8]
    d562:	sub.w	sl, r9, r3
    d566:	ldr.w	r1, [sl, #4]
    d56a:	bic.w	r1, r1, #3
    d56e:	b.n	d4b2 <_realloc_r+0x7e>
    d570:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d574:	mov	r1, r2
    d576:	b.w	cebc <_malloc_r>
    d57a:	ldr.w	r2, [r9, #4]
    d57e:	add.w	r1, r9, r5
    d582:	and.w	r2, r2, #1
    d586:	add	r6, r9
    d588:	orr.w	r3, r3, #1
    d58c:	orrs	r2, r5
    d58e:	str.w	r2, [r9, #4]
    d592:	str	r3, [r1, #4]
    d594:	ldr	r3, [r6, #4]
    d596:	orr.w	r3, r3, #1
    d59a:	adds	r1, #8
    d59c:	str	r3, [r6, #4]
    d59e:	mov	r0, r8
    d5a0:	bl	e244 <_free_r>
    d5a4:	b.n	d54c <_realloc_r+0x118>
    d5a6:	ldr.w	r0, [ip, #4]
    d5aa:	bic.w	fp, r0, #3
    d5ae:	add.w	ip, r6, fp
    d5b2:	add.w	r0, r5, #16
    d5b6:	cmp	ip, r0
    d5b8:	bge.n	d656 <_realloc_r+0x222>
    d5ba:	lsls	r1, r1, #31
    d5bc:	bmi.w	d4ba <_realloc_r+0x86>
    d5c0:	ldr.w	r1, [r4, #-8]
    d5c4:	sub.w	sl, r9, r1
    d5c8:	ldr.w	r1, [sl, #4]
    d5cc:	bic.w	r1, r1, #3
    d5d0:	add	fp, r1
    d5d2:	add	fp, r6
    d5d4:	cmp	r0, fp
    d5d6:	bgt.w	d4b2 <_realloc_r+0x7e>
    d5da:	mov	r7, sl
    d5dc:	ldr.w	r1, [sl, #12]
    d5e0:	ldr.w	r0, [r7, #8]!
    d5e4:	subs	r2, r6, #4
    d5e6:	cmp	r2, #36	; 0x24
    d5e8:	str	r1, [r0, #12]
    d5ea:	str	r0, [r1, #8]
    d5ec:	bhi.w	d7a6 <_realloc_r+0x372>
    d5f0:	cmp	r2, #19
    d5f2:	bls.w	d7a2 <_realloc_r+0x36e>
    d5f6:	ldr	r1, [r4, #0]
    d5f8:	str.w	r1, [sl, #8]
    d5fc:	ldr	r1, [r4, #4]
    d5fe:	str.w	r1, [sl, #12]
    d602:	cmp	r2, #27
    d604:	bhi.w	d7c6 <_realloc_r+0x392>
    d608:	adds	r4, #8
    d60a:	add.w	r2, sl, #16
    d60e:	ldr	r1, [r4, #0]
    d610:	str	r1, [r2, #0]
    d612:	ldr	r1, [r4, #4]
    d614:	str	r1, [r2, #4]
    d616:	ldr	r1, [r4, #8]
    d618:	str	r1, [r2, #8]
    d61a:	add.w	r1, sl, r5
    d61e:	sub.w	r2, fp, r5
    d622:	orr.w	r2, r2, #1
    d626:	str	r1, [r3, #8]
    d628:	str	r2, [r1, #4]
    d62a:	ldr.w	r3, [sl, #4]
    d62e:	and.w	r3, r3, #1
    d632:	orrs	r3, r5
    d634:	mov	r0, r8
    d636:	str.w	r3, [sl, #4]
    d63a:	bl	d428 <__malloc_unlock>
    d63e:	b.n	d51e <_realloc_r+0xea>
    d640:	ldr	r3, [r4, #0]
    d642:	str	r3, [r0, #0]
    d644:	ldr	r3, [r4, #4]
    d646:	str	r3, [r0, #4]
    d648:	cmp	r2, #27
    d64a:	bhi.n	d71e <_realloc_r+0x2ea>
    d64c:	add.w	r2, r4, #8
    d650:	add.w	r3, r0, #8
    d654:	b.n	d4ec <_realloc_r+0xb8>
    d656:	add.w	r2, r9, r5
    d65a:	str	r2, [r3, #8]
    d65c:	sub.w	r3, ip, r5
    d660:	orr.w	r3, r3, #1
    d664:	str	r3, [r2, #4]
    d666:	ldr.w	r3, [r4, #-4]
    d66a:	and.w	r3, r3, #1
    d66e:	orrs	r3, r5
    d670:	mov	r0, r8
    d672:	str.w	r3, [r4, #-4]
    d676:	bl	d428 <__malloc_unlock>
    d67a:	mov	r7, r4
    d67c:	b.n	d51e <_realloc_r+0xea>
    d67e:	ldr.w	r3, [r0, #-4]
    d682:	bic.w	r3, r3, #3
    d686:	add	r6, r3
    d688:	b.n	d52e <_realloc_r+0xfa>
    d68a:	mov	r7, sl
    d68c:	ldr.w	r1, [sl, #12]
    d690:	ldr.w	r0, [r7, #8]!
    d694:	subs	r2, r6, #4
    d696:	cmp	r2, #36	; 0x24
    d698:	str	r1, [r0, #12]
    d69a:	str	r0, [r1, #8]
    d69c:	bhi.n	d738 <_realloc_r+0x304>
    d69e:	cmp	r2, #19
    d6a0:	bls.n	d734 <_realloc_r+0x300>
    d6a2:	ldr	r1, [r4, #0]
    d6a4:	str.w	r1, [sl, #8]
    d6a8:	ldr	r1, [r4, #4]
    d6aa:	str.w	r1, [sl, #12]
    d6ae:	cmp	r2, #27
    d6b0:	bhi.n	d760 <_realloc_r+0x32c>
    d6b2:	adds	r4, #8
    d6b4:	add.w	r2, sl, #16
    d6b8:	mov	r6, r3
    d6ba:	ldr	r3, [r4, #0]
    d6bc:	str	r3, [r2, #0]
    d6be:	ldr	r3, [r4, #4]
    d6c0:	str	r3, [r2, #4]
    d6c2:	ldr	r3, [r4, #8]
    d6c4:	str	r3, [r2, #8]
    d6c6:	mov	r9, sl
    d6c8:	mov	r4, r7
    d6ca:	b.n	d52e <_realloc_r+0xfa>
    d6cc:	mov	r1, r4
    d6ce:	bl	dbd8 <memmove>
    d6d2:	b.n	d4f8 <_realloc_r+0xc4>
    d6d4:	ldrd	r1, r3, [r0, #8]
    d6d8:	mov	r7, sl
    d6da:	str	r3, [r1, #12]
    d6dc:	str	r1, [r3, #8]
    d6de:	ldr.w	r1, [r7, #8]!
    d6e2:	ldr.w	r3, [sl, #12]
    d6e6:	str	r3, [r1, #12]
    d6e8:	subs	r2, r6, #4
    d6ea:	cmp	r2, #36	; 0x24
    d6ec:	str	r1, [r3, #8]
    d6ee:	bhi.n	d74c <_realloc_r+0x318>
    d6f0:	cmp	r2, #19
    d6f2:	bls.n	d748 <_realloc_r+0x314>
    d6f4:	ldr	r3, [r4, #0]
    d6f6:	str.w	r3, [sl, #8]
    d6fa:	ldr	r3, [r4, #4]
    d6fc:	str.w	r3, [sl, #12]
    d700:	cmp	r2, #27
    d702:	bhi.n	d78a <_realloc_r+0x356>
    d704:	adds	r4, #8
    d706:	add.w	r3, sl, #16
    d70a:	ldr	r2, [r4, #0]
    d70c:	str	r2, [r3, #0]
    d70e:	ldr	r2, [r4, #4]
    d710:	str	r2, [r3, #4]
    d712:	ldr	r2, [r4, #8]
    d714:	str	r2, [r3, #8]
    d716:	mov	r6, ip
    d718:	mov	r9, sl
    d71a:	mov	r4, r7
    d71c:	b.n	d52e <_realloc_r+0xfa>
    d71e:	ldr	r3, [r4, #8]
    d720:	str	r3, [r0, #8]
    d722:	ldr	r3, [r4, #12]
    d724:	str	r3, [r0, #12]
    d726:	cmp	r2, #36	; 0x24
    d728:	beq.n	d778 <_realloc_r+0x344>
    d72a:	add.w	r2, r4, #16
    d72e:	add.w	r3, r0, #16
    d732:	b.n	d4ec <_realloc_r+0xb8>
    d734:	mov	r2, r7
    d736:	b.n	d6b8 <_realloc_r+0x284>
    d738:	mov	r1, r4
    d73a:	mov	r0, r7
    d73c:	mov	r6, r3
    d73e:	mov	r9, sl
    d740:	bl	dbd8 <memmove>
    d744:	mov	r4, r7
    d746:	b.n	d52e <_realloc_r+0xfa>
    d748:	mov	r3, r7
    d74a:	b.n	d70a <_realloc_r+0x2d6>
    d74c:	mov	r1, r4
    d74e:	mov	r0, r7
    d750:	mov	r6, ip
    d752:	mov	r9, sl
    d754:	bl	dbd8 <memmove>
    d758:	mov	r4, r7
    d75a:	b.n	d52e <_realloc_r+0xfa>
    d75c:	.word	0x200015f0
    d760:	ldr	r1, [r4, #8]
    d762:	str.w	r1, [sl, #16]
    d766:	ldr	r1, [r4, #12]
    d768:	str.w	r1, [sl, #20]
    d76c:	cmp	r2, #36	; 0x24
    d76e:	beq.n	d7b2 <_realloc_r+0x37e>
    d770:	adds	r4, #16
    d772:	add.w	r2, sl, #24
    d776:	b.n	d6b8 <_realloc_r+0x284>
    d778:	ldr	r3, [r4, #16]
    d77a:	str	r3, [r0, #16]
    d77c:	ldr	r1, [r4, #20]
    d77e:	str	r1, [r0, #20]
    d780:	add.w	r2, r4, #24
    d784:	add.w	r3, r0, #24
    d788:	b.n	d4ec <_realloc_r+0xb8>
    d78a:	ldr	r3, [r4, #8]
    d78c:	str.w	r3, [sl, #16]
    d790:	ldr	r3, [r4, #12]
    d792:	str.w	r3, [sl, #20]
    d796:	cmp	r2, #36	; 0x24
    d798:	beq.n	d7de <_realloc_r+0x3aa>
    d79a:	adds	r4, #16
    d79c:	add.w	r3, sl, #24
    d7a0:	b.n	d70a <_realloc_r+0x2d6>
    d7a2:	mov	r2, r7
    d7a4:	b.n	d60e <_realloc_r+0x1da>
    d7a6:	mov	r1, r4
    d7a8:	mov	r0, r7
    d7aa:	bl	dbd8 <memmove>
    d7ae:	ldr	r3, [pc, #88]	; (d808 <_realloc_r+0x3d4>)
    d7b0:	b.n	d61a <_realloc_r+0x1e6>
    d7b2:	ldr	r2, [r4, #16]
    d7b4:	str.w	r2, [sl, #24]
    d7b8:	ldr	r2, [r4, #20]
    d7ba:	str.w	r2, [sl, #28]
    d7be:	adds	r4, #24
    d7c0:	add.w	r2, sl, #32
    d7c4:	b.n	d6b8 <_realloc_r+0x284>
    d7c6:	ldr	r1, [r4, #8]
    d7c8:	str.w	r1, [sl, #16]
    d7cc:	ldr	r1, [r4, #12]
    d7ce:	str.w	r1, [sl, #20]
    d7d2:	cmp	r2, #36	; 0x24
    d7d4:	beq.n	d7f2 <_realloc_r+0x3be>
    d7d6:	adds	r4, #16
    d7d8:	add.w	r2, sl, #24
    d7dc:	b.n	d60e <_realloc_r+0x1da>
    d7de:	ldr	r3, [r4, #16]
    d7e0:	str.w	r3, [sl, #24]
    d7e4:	ldr	r3, [r4, #20]
    d7e6:	str.w	r3, [sl, #28]
    d7ea:	adds	r4, #24
    d7ec:	add.w	r3, sl, #32
    d7f0:	b.n	d70a <_realloc_r+0x2d6>
    d7f2:	ldr	r2, [r4, #16]
    d7f4:	str.w	r2, [sl, #24]
    d7f8:	ldr	r2, [r4, #20]
    d7fa:	str.w	r2, [sl, #28]
    d7fe:	adds	r4, #24
    d800:	add.w	r2, sl, #32
    d804:	b.n	d60e <_realloc_r+0x1da>
    d806:	nop
    d808:	.word	0x200015f0

0000d80c <__cxa_atexit>:
    d80c:	mov	r3, r2
    d80e:	mov	r2, r1
    d810:	mov	r1, r0
    d812:	movs	r0, #2
    d814:	b.w	e11c <__register_exitproc>

0000d818 <stdio_exit_handler>:
    d818:	ldr	r2, [pc, #8]	; (d824 <stdio_exit_handler+0xc>)
    d81a:	ldr	r1, [pc, #12]	; (d828 <stdio_exit_handler+0x10>)
    d81c:	ldr	r0, [pc, #12]	; (d82c <stdio_exit_handler+0x14>)
    d81e:	b.w	d998 <_fwalk_sglue>
    d822:	nop
    d824:	.word	0x20001a00
    d828:	.word	0x00010755
    d82c:	.word	0x20001320

0000d830 <cleanup_stdio>:
    d830:	ldr	r3, [pc, #48]	; (d864 <cleanup_stdio+0x34>)
    d832:	ldr	r1, [r0, #4]
    d834:	cmp	r1, r3
    d836:	push	{r4, lr}
    d838:	mov	r4, r0
    d83a:	beq.n	d840 <cleanup_stdio+0x10>
    d83c:	bl	10754 <_fclose_r>
    d840:	ldr	r1, [r4, #8]
    d842:	ldr	r3, [pc, #36]	; (d868 <cleanup_stdio+0x38>)
    d844:	cmp	r1, r3
    d846:	beq.n	d84e <cleanup_stdio+0x1e>
    d848:	mov	r0, r4
    d84a:	bl	10754 <_fclose_r>
    d84e:	ldr	r1, [r4, #12]
    d850:	ldr	r3, [pc, #24]	; (d86c <cleanup_stdio+0x3c>)
    d852:	cmp	r1, r3
    d854:	beq.n	d860 <cleanup_stdio+0x30>
    d856:	mov	r0, r4
    d858:	ldmia.w	sp!, {r4, lr}
    d85c:	b.w	10754 <_fclose_r>
    d860:	pop	{r4, pc}
    d862:	nop
    d864:	.word	0x200064a8
    d868:	.word	0x20006510
    d86c:	.word	0x20006578

0000d870 <global_stdio_init.part.0>:
    d870:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d874:	ldr	r4, [pc, #168]	; (d920 <global_stdio_init.part.0+0xb0>)
    d876:	ldr	r3, [pc, #172]	; (d924 <global_stdio_init.part.0+0xb4>)
    d878:	ldr	r0, [pc, #172]	; (d928 <global_stdio_init.part.0+0xb8>)
    d87a:	ldr.w	r9, [pc, #192]	; d93c <global_stdio_init.part.0+0xcc>
    d87e:	ldr.w	r8, [pc, #192]	; d940 <global_stdio_init.part.0+0xd0>
    d882:	ldr	r7, [pc, #168]	; (d92c <global_stdio_init.part.0+0xbc>)
    d884:	str	r0, [r3, #0]
    d886:	movs	r5, #0
    d888:	movs	r3, #4
    d88a:	movs	r2, #8
    d88c:	mov	r1, r5
    d88e:	add.w	r0, r4, #92	; 0x5c
    d892:	ldr	r6, [pc, #156]	; (d930 <global_stdio_init.part.0+0xc0>)
    d894:	str	r5, [r4, #100]	; 0x64
    d896:	strd	r5, r3, [r4, #8]
    d89a:	strd	r5, r5, [r4]
    d89e:	strd	r5, r5, [r4, #16]
    d8a2:	str	r5, [r4, #24]
    d8a4:	bl	dcd0 <memset>
    d8a8:	ldr	r3, [pc, #136]	; (d934 <global_stdio_init.part.0+0xc4>)
    d8aa:	str	r3, [r4, #116]	; 0x74
    d8ac:	movs	r2, #8
    d8ae:	mov	r1, r5
    d8b0:	add.w	r0, r4, #196	; 0xc4
    d8b4:	strd	r4, r9, [r4, #28]
    d8b8:	strd	r8, r7, [r4, #36]	; 0x24
    d8bc:	strd	r5, r5, [r4, #104]	; 0x68
    d8c0:	strd	r5, r5, [r4, #120]	; 0x78
    d8c4:	str.w	r5, [r4, #204]	; 0xcc
    d8c8:	str	r5, [r4, #112]	; 0x70
    d8ca:	str.w	r5, [r4, #128]	; 0x80
    d8ce:	str	r6, [r4, #44]	; 0x2c
    d8d0:	bl	dcd0 <memset>
    d8d4:	ldr	r3, [pc, #96]	; (d938 <global_stdio_init.part.0+0xc8>)
    d8d6:	str.w	r3, [r4, #220]	; 0xdc
    d8da:	mov	r1, r5
    d8dc:	add.w	r3, r4, #104	; 0x68
    d8e0:	movs	r2, #8
    d8e2:	add.w	r0, r4, #300	; 0x12c
    d8e6:	str.w	r3, [r4, #132]	; 0x84
    d8ea:	strd	r9, r8, [r4, #136]	; 0x88
    d8ee:	strd	r7, r6, [r4, #144]	; 0x90
    d8f2:	strd	r5, r5, [r4, #208]	; 0xd0
    d8f6:	strd	r5, r5, [r4, #224]	; 0xe0
    d8fa:	str.w	r5, [r4, #308]	; 0x134
    d8fe:	str.w	r5, [r4, #216]	; 0xd8
    d902:	str.w	r5, [r4, #232]	; 0xe8
    d906:	bl	dcd0 <memset>
    d90a:	add.w	r3, r4, #208	; 0xd0
    d90e:	strd	r9, r8, [r4, #240]	; 0xf0
    d912:	strd	r7, r6, [r4, #248]	; 0xf8
    d916:	str.w	r3, [r4, #236]	; 0xec
    d91a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d91e:	nop
    d920:	.word	0x200064a8
    d924:	.word	0x200065e0
    d928:	.word	0x0000d819
    d92c:	.word	0x0000da85
    d930:	.word	0x0000daa5
    d934:	.word	0x00010009
    d938:	.word	0x00020012
    d93c:	.word	0x0000da21
    d940:	.word	0x0000da45

0000d944 <__sinit>:
    d944:	push	{r4, lr}
    d946:	mov	r4, r0
    d948:	ldr	r0, [pc, #40]	; (d974 <__sinit+0x30>)
    d94a:	bl	df98 <__retarget_lock_acquire_recursive>
    d94e:	ldr	r3, [r4, #52]	; 0x34
    d950:	cbnz	r3, d95c <__sinit+0x18>
    d952:	ldr	r3, [pc, #36]	; (d978 <__sinit+0x34>)
    d954:	ldr	r2, [pc, #36]	; (d97c <__sinit+0x38>)
    d956:	ldr	r3, [r3, #0]
    d958:	str	r2, [r4, #52]	; 0x34
    d95a:	cbz	r3, d966 <__sinit+0x22>
    d95c:	ldmia.w	sp!, {r4, lr}
    d960:	ldr	r0, [pc, #16]	; (d974 <__sinit+0x30>)
    d962:	b.w	df9c <__retarget_lock_release_recursive>
    d966:	bl	d870 <global_stdio_init.part.0>
    d96a:	ldmia.w	sp!, {r4, lr}
    d96e:	ldr	r0, [pc, #4]	; (d974 <__sinit+0x30>)
    d970:	b.w	df9c <__retarget_lock_release_recursive>
    d974:	.word	0x20006470
    d978:	.word	0x200065e0
    d97c:	.word	0x0000d831

0000d980 <__sfp_lock_acquire>:
    d980:	ldr	r0, [pc, #4]	; (d988 <__sfp_lock_acquire+0x8>)
    d982:	b.w	df98 <__retarget_lock_acquire_recursive>
    d986:	nop
    d988:	.word	0x20006470

0000d98c <__sfp_lock_release>:
    d98c:	ldr	r0, [pc, #4]	; (d994 <__sfp_lock_release+0x8>)
    d98e:	b.w	df9c <__retarget_lock_release_recursive>
    d992:	nop
    d994:	.word	0x20006470

0000d998 <_fwalk_sglue>:
    d998:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d99c:	mov	r8, r0
    d99e:	mov	r7, r1
    d9a0:	mov	r6, r2
    d9a2:	mov.w	r9, #0
    d9a6:	ldrd	r5, r4, [r6, #4]
    d9aa:	subs	r5, #1
    d9ac:	bmi.n	d9d2 <_fwalk_sglue+0x3a>
    d9ae:	ldrh	r3, [r4, #12]
    d9b0:	cmp	r3, #1
    d9b2:	add.w	r5, r5, #4294967295
    d9b6:	bls.n	d9ca <_fwalk_sglue+0x32>
    d9b8:	ldrsh.w	r3, [r4, #14]
    d9bc:	adds	r3, #1
    d9be:	mov	r1, r4
    d9c0:	beq.n	d9ca <_fwalk_sglue+0x32>
    d9c2:	mov	r0, r8
    d9c4:	blx	r7
    d9c6:	orr.w	r9, r9, r0
    d9ca:	adds	r3, r5, #1
    d9cc:	add.w	r4, r4, #104	; 0x68
    d9d0:	bne.n	d9ae <_fwalk_sglue+0x16>
    d9d2:	ldr	r6, [r6, #0]
    d9d4:	cmp	r6, #0
    d9d6:	bne.n	d9a6 <_fwalk_sglue+0xe>
    d9d8:	mov	r0, r9
    d9da:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d9de:	nop

0000d9e0 <sprintf>:
    d9e0:	push	{r1, r2, r3}
    d9e2:	push	{r4, lr}
    d9e4:	sub	sp, #116	; 0x74
    d9e6:	mvn.w	r1, #2147483648	; 0x80000000
    d9ea:	add	r3, sp, #124	; 0x7c
    d9ec:	strd	r0, r1, [sp, #24]
    d9f0:	str	r1, [sp, #16]
    d9f2:	ldr	r1, [pc, #36]	; (da18 <sprintf+0x38>)
    d9f4:	ldr.w	r2, [r3], #4
    d9f8:	str	r0, [sp, #8]
    d9fa:	ldr	r4, [pc, #32]	; (da1c <sprintf+0x3c>)
    d9fc:	ldr	r0, [r1, #0]
    d9fe:	str	r3, [sp, #4]
    da00:	add	r1, sp, #8
    da02:	str	r4, [sp, #20]
    da04:	bl	ec10 <_svfprintf_r>
    da08:	ldr	r3, [sp, #8]
    da0a:	movs	r2, #0
    da0c:	strb	r2, [r3, #0]
    da0e:	add	sp, #116	; 0x74
    da10:	ldmia.w	sp!, {r4, lr}
    da14:	add	sp, #12
    da16:	bx	lr
    da18:	.word	0x20001a0c
    da1c:	.word	0xffff0208

0000da20 <__sread>:
    da20:	push	{r4, lr}
    da22:	mov	r4, r1
    da24:	ldrsh.w	r1, [r1, #14]
    da28:	bl	dec0 <_read_r>
    da2c:	cmp	r0, #0
    da2e:	blt.n	da38 <__sread+0x18>
    da30:	ldr	r3, [r4, #80]	; 0x50
    da32:	add	r3, r0
    da34:	str	r3, [r4, #80]	; 0x50
    da36:	pop	{r4, pc}
    da38:	ldrh	r3, [r4, #12]
    da3a:	bic.w	r3, r3, #4096	; 0x1000
    da3e:	strh	r3, [r4, #12]
    da40:	pop	{r4, pc}
    da42:	nop

0000da44 <__swrite>:
    da44:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da48:	mov	r4, r1
    da4a:	ldrsh.w	r1, [r1, #12]
    da4e:	mov	r7, r3
    da50:	lsls	r3, r1, #23
    da52:	mov	r5, r0
    da54:	mov	r6, r2
    da56:	bmi.n	da70 <__swrite+0x2c>
    da58:	bic.w	r1, r1, #4096	; 0x1000
    da5c:	strh	r1, [r4, #12]
    da5e:	mov	r3, r7
    da60:	ldrsh.w	r1, [r4, #14]
    da64:	mov	r2, r6
    da66:	mov	r0, r5
    da68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    da6c:	b.w	df10 <_write_r>
    da70:	ldrsh.w	r1, [r4, #14]
    da74:	movs	r3, #2
    da76:	movs	r2, #0
    da78:	bl	de94 <_lseek_r>
    da7c:	ldrsh.w	r1, [r4, #12]
    da80:	b.n	da58 <__swrite+0x14>
    da82:	nop

0000da84 <__sseek>:
    da84:	push	{r4, lr}
    da86:	mov	r4, r1
    da88:	ldrsh.w	r1, [r1, #14]
    da8c:	bl	de94 <_lseek_r>
    da90:	ldrh	r3, [r4, #12]
    da92:	adds	r2, r0, #1
    da94:	itee	eq
    da96:	biceq.w	r3, r3, #4096	; 0x1000
    da9a:	orrne.w	r3, r3, #4096	; 0x1000
    da9e:	strne	r0, [r4, #80]	; 0x50
    daa0:	strh	r3, [r4, #12]
    daa2:	pop	{r4, pc}

0000daa4 <__sclose>:
    daa4:	ldrsh.w	r1, [r1, #14]
    daa8:	b.w	de70 <_close_r>

0000daac <_vdprintf_r>:
    daac:	push	{r4, r5, r6, r7, lr}
    daae:	sub.w	sp, sp, #532	; 0x214
    dab2:	add	r7, sp, #16
    dab4:	str	r3, [sp, #0]
    dab6:	mov	r3, r2
    dab8:	mov.w	r2, #512	; 0x200
    dabc:	mov	r6, r1
    dabe:	str	r2, [sp, #12]
    dac0:	mov	r1, r7
    dac2:	add	r2, sp, #12
    dac4:	mov	r5, r0
    dac6:	bl	db14 <_vasnprintf_r>
    daca:	cbz	r0, daf0 <_vdprintf_r+0x44>
    dacc:	mov	r4, r0
    dace:	mov	r2, r0
    dad0:	ldr	r3, [sp, #12]
    dad2:	mov	r1, r6
    dad4:	mov	r0, r5
    dad6:	bl	df10 <_write_r>
    dada:	cmp	r4, r7
    dadc:	str	r0, [sp, #12]
    dade:	beq.n	daea <_vdprintf_r+0x3e>
    dae0:	mov	r0, r5
    dae2:	mov	r1, r4
    dae4:	bl	e244 <_free_r>
    dae8:	ldr	r0, [sp, #12]
    daea:	add.w	sp, sp, #532	; 0x214
    daee:	pop	{r4, r5, r6, r7, pc}
    daf0:	mov.w	r0, #4294967295
    daf4:	b.n	daea <_vdprintf_r+0x3e>
    daf6:	nop

0000daf8 <vdprintf>:
    daf8:	push	{r4}
    dafa:	ldr	r4, [pc, #20]	; (db10 <vdprintf+0x18>)
    dafc:	mov	ip, r0
    dafe:	mov	r3, r2
    db00:	ldr	r0, [r4, #0]
    db02:	ldr.w	r4, [sp], #4
    db06:	mov	r2, r1
    db08:	mov	r1, ip
    db0a:	b.w	daac <_vdprintf_r>
    db0e:	nop
    db10:	.word	0x20001a0c

0000db14 <_vasnprintf_r>:
    db14:	push	{r4, r5, lr}
    db16:	ldr	r4, [r2, #0]
    db18:	mov	r5, r2
    db1a:	sub	sp, #108	; 0x6c
    db1c:	mov	r2, r3
    db1e:	cbz	r1, db24 <_vasnprintf_r+0x10>
    db20:	cmp	r4, #0
    db22:	bne.n	db58 <_vasnprintf_r+0x44>
    db24:	movs	r1, #0
    db26:	mov.w	r3, #648	; 0x288
    db2a:	strh.w	r3, [sp, #12]
    db2e:	str	r1, [sp, #0]
    db30:	str	r1, [sp, #16]
    db32:	movw	r3, #65535	; 0xffff
    db36:	str	r1, [sp, #8]
    db38:	str	r1, [sp, #20]
    db3a:	strh.w	r3, [sp, #14]
    db3e:	mov	r1, sp
    db40:	ldr	r3, [sp, #120]	; 0x78
    db42:	bl	ec10 <_svfprintf_r>
    db46:	cmp	r0, #0
    db48:	blt.n	db72 <_vasnprintf_r+0x5e>
    db4a:	ldr	r3, [sp, #0]
    db4c:	str	r0, [r5, #0]
    db4e:	movs	r2, #0
    db50:	strb	r2, [r3, #0]
    db52:	ldr	r0, [sp, #16]
    db54:	add	sp, #108	; 0x6c
    db56:	pop	{r4, r5, pc}
    db58:	mov.w	r3, #1544	; 0x608
    db5c:	str	r1, [sp, #0]
    db5e:	str	r1, [sp, #16]
    db60:	strh.w	r3, [sp, #12]
    db64:	mov	r1, r4
    db66:	bge.n	db32 <_vasnprintf_r+0x1e>
    db68:	movs	r3, #139	; 0x8b
    db6a:	str	r3, [r0, #0]
    db6c:	movs	r0, #0
    db6e:	add	sp, #108	; 0x6c
    db70:	pop	{r4, r5, pc}
    db72:	movs	r0, #0
    db74:	b.n	db54 <_vasnprintf_r+0x40>
    db76:	nop

0000db78 <memcmp>:
    db78:	cmp	r2, #3
    db7a:	push	{r4, r5, r6, lr}
    db7c:	bls.n	dba8 <memcmp+0x30>
    db7e:	orr.w	r3, r0, r1
    db82:	lsls	r3, r3, #30
    db84:	bne.n	dbcc <memcmp+0x54>
    db86:	mov	r4, r0
    db88:	mov	r3, r1
    db8a:	mov	r1, r3
    db8c:	mov	r0, r4
    db8e:	ldr	r6, [r1, #0]
    db90:	ldr	r5, [r0, #0]
    db92:	cmp	r5, r6
    db94:	add.w	r4, r4, #4
    db98:	add.w	r3, r3, #4
    db9c:	bne.n	dbcc <memcmp+0x54>
    db9e:	subs	r2, #4
    dba0:	cmp	r2, #3
    dba2:	mov	r0, r4
    dba4:	mov	r1, r3
    dba6:	bhi.n	db8a <memcmp+0x12>
    dba8:	subs	r4, r2, #1
    dbaa:	cbz	r2, dbd4 <memcmp+0x5c>
    dbac:	subs	r2, r0, #1
    dbae:	subs	r1, #1
    dbb0:	b.n	dbb6 <memcmp+0x3e>
    dbb2:	adds	r3, r0, r3
    dbb4:	beq.n	dbd0 <memcmp+0x58>
    dbb6:	ldrb.w	lr, [r2, #1]!
    dbba:	ldrb.w	ip, [r1, #1]!
    dbbe:	cmp	lr, ip
    dbc0:	sub.w	r3, r4, r2
    dbc4:	beq.n	dbb2 <memcmp+0x3a>
    dbc6:	sub.w	r0, lr, ip
    dbca:	pop	{r4, r5, r6, pc}
    dbcc:	subs	r4, r2, #1
    dbce:	b.n	dbac <memcmp+0x34>
    dbd0:	mov	r0, r3
    dbd2:	pop	{r4, r5, r6, pc}
    dbd4:	mov	r0, r2
    dbd6:	pop	{r4, r5, r6, pc}

0000dbd8 <memmove>:
    dbd8:	cmp	r0, r1
    dbda:	bls.n	dbf8 <memmove+0x20>
    dbdc:	adds	r3, r1, r2
    dbde:	cmp	r3, r0
    dbe0:	bls.n	dbf8 <memmove+0x20>
    dbe2:	add.w	ip, r0, r2
    dbe6:	cbz	r2, dc18 <memmove+0x40>
    dbe8:	mov	r2, ip
    dbea:	ldrb.w	ip, [r3, #-1]!
    dbee:	strb.w	ip, [r2, #-1]!
    dbf2:	cmp	r1, r3
    dbf4:	bne.n	dbea <memmove+0x12>
    dbf6:	bx	lr
    dbf8:	cmp	r2, #15
    dbfa:	bhi.n	dc1a <memmove+0x42>
    dbfc:	mov	r3, r0
    dbfe:	add.w	ip, r2, #4294967295
    dc02:	cbz	r2, dc18 <memmove+0x40>
    dc04:	add.w	ip, ip, #1
    dc08:	subs	r3, #1
    dc0a:	add	ip, r1
    dc0c:	ldrb.w	r2, [r1], #1
    dc10:	strb.w	r2, [r3, #1]!
    dc14:	cmp	r1, ip
    dc16:	bne.n	dc0c <memmove+0x34>
    dc18:	bx	lr
    dc1a:	orr.w	r3, r0, r1
    dc1e:	lsls	r3, r3, #30
    dc20:	bne.n	dcc4 <memmove+0xec>
    dc22:	sub.w	r3, r2, #16
    dc26:	push	{r4, r5, r6, lr}
    dc28:	add.w	ip, r1, #32
    dc2c:	bic.w	r5, r3, #15
    dc30:	add.w	lr, r1, #16
    dc34:	add.w	r4, r0, #16
    dc38:	add	ip, r5
    dc3a:	lsrs	r3, r3, #4
    dc3c:	ldr.w	r5, [lr, #-16]
    dc40:	str.w	r5, [r4, #-16]
    dc44:	ldr.w	r5, [lr, #-12]
    dc48:	str.w	r5, [r4, #-12]
    dc4c:	ldr.w	r5, [lr, #-8]
    dc50:	str.w	r5, [r4, #-8]
    dc54:	ldr.w	r5, [lr, #-4]
    dc58:	str.w	r5, [r4, #-4]
    dc5c:	add.w	lr, lr, #16
    dc60:	cmp	lr, ip
    dc62:	add.w	r4, r4, #16
    dc66:	bne.n	dc3c <memmove+0x64>
    dc68:	adds	r3, #1
    dc6a:	tst.w	r2, #12
    dc6e:	add.w	r1, r1, r3, lsl #4
    dc72:	and.w	r4, r2, #15
    dc76:	add.w	r3, r0, r3, lsl #4
    dc7a:	beq.n	dccc <memmove+0xf4>
    dc7c:	subs	r4, #4
    dc7e:	bic.w	r6, r4, #3
    dc82:	mov.w	ip, r4, lsr #2
    dc86:	add	r6, r3
    dc88:	subs	r4, r3, #4
    dc8a:	mov	lr, r1
    dc8c:	ldr.w	r5, [lr], #4
    dc90:	str.w	r5, [r4, #4]!
    dc94:	cmp	r4, r6
    dc96:	bne.n	dc8c <memmove+0xb4>
    dc98:	add.w	r4, ip, #1
    dc9c:	and.w	r2, r2, #3
    dca0:	add.w	r3, r3, r4, lsl #2
    dca4:	add.w	r1, r1, r4, lsl #2
    dca8:	add.w	ip, r2, #4294967295
    dcac:	cbz	r2, dcc2 <memmove+0xea>
    dcae:	add.w	ip, ip, #1
    dcb2:	subs	r3, #1
    dcb4:	add	ip, r1
    dcb6:	ldrb.w	r2, [r1], #1
    dcba:	strb.w	r2, [r3, #1]!
    dcbe:	cmp	r1, ip
    dcc0:	bne.n	dcb6 <memmove+0xde>
    dcc2:	pop	{r4, r5, r6, pc}
    dcc4:	add.w	ip, r2, #4294967295
    dcc8:	mov	r3, r0
    dcca:	b.n	dc04 <memmove+0x2c>
    dccc:	mov	r2, r4
    dcce:	b.n	dca8 <memmove+0xd0>

0000dcd0 <memset>:
    dcd0:	lsls	r3, r0, #30
    dcd2:	push	{r4, r5, lr}
    dcd4:	beq.n	dd68 <memset+0x98>
    dcd6:	subs	r4, r2, #1
    dcd8:	cmp	r2, #0
    dcda:	beq.n	dd5c <memset+0x8c>
    dcdc:	uxtb	r2, r1
    dcde:	mov	r3, r0
    dce0:	b.n	dce6 <memset+0x16>
    dce2:	subs	r4, #1
    dce4:	bcc.n	dd5c <memset+0x8c>
    dce6:	strb.w	r2, [r3], #1
    dcea:	lsls	r5, r3, #30
    dcec:	bne.n	dce2 <memset+0x12>
    dcee:	cmp	r4, #3
    dcf0:	bls.n	dd4e <memset+0x7e>
    dcf2:	uxtb	r5, r1
    dcf4:	orr.w	r5, r5, r5, lsl #8
    dcf8:	cmp	r4, #15
    dcfa:	orr.w	r5, r5, r5, lsl #16
    dcfe:	bls.n	dd6e <memset+0x9e>
    dd00:	sub.w	r2, r4, #16
    dd04:	bic.w	ip, r2, #15
    dd08:	add.w	lr, r3, #32
    dd0c:	add	lr, ip
    dd0e:	mov.w	ip, r2, lsr #4
    dd12:	add.w	r2, r3, #16
    dd16:	strd	r5, r5, [r2, #-16]
    dd1a:	strd	r5, r5, [r2, #-8]
    dd1e:	adds	r2, #16
    dd20:	cmp	r2, lr
    dd22:	bne.n	dd16 <memset+0x46>
    dd24:	add.w	r2, ip, #1
    dd28:	tst.w	r4, #12
    dd2c:	add.w	r2, r3, r2, lsl #4
    dd30:	and.w	ip, r4, #15
    dd34:	beq.n	dd5e <memset+0x8e>
    dd36:	sub.w	r3, ip, #4
    dd3a:	bic.w	r3, r3, #3
    dd3e:	adds	r3, #4
    dd40:	add	r3, r2
    dd42:	str.w	r5, [r2], #4
    dd46:	cmp	r3, r2
    dd48:	bne.n	dd42 <memset+0x72>
    dd4a:	and.w	r4, ip, #3
    dd4e:	cbz	r4, dd5c <memset+0x8c>
    dd50:	uxtb	r1, r1
    dd52:	add	r4, r3
    dd54:	strb.w	r1, [r3], #1
    dd58:	cmp	r4, r3
    dd5a:	bne.n	dd54 <memset+0x84>
    dd5c:	pop	{r4, r5, pc}
    dd5e:	mov	r4, ip
    dd60:	mov	r3, r2
    dd62:	cmp	r4, #0
    dd64:	bne.n	dd50 <memset+0x80>
    dd66:	b.n	dd5c <memset+0x8c>
    dd68:	mov	r3, r0
    dd6a:	mov	r4, r2
    dd6c:	b.n	dcee <memset+0x1e>
    dd6e:	mov	r2, r3
    dd70:	mov	ip, r4
    dd72:	b.n	dd36 <memset+0x66>

0000dd74 <strncmp>:
    dd74:	cmp	r2, #0
    dd76:	beq.n	ddf6 <strncmp+0x82>
    dd78:	orr.w	r3, r0, r1
    dd7c:	lsls	r3, r3, #30
    dd7e:	push	{r4, r5, lr}
    dd80:	mov	ip, r0
    dd82:	bne.n	dde4 <strncmp+0x70>
    dd84:	cmp	r2, #3
    dd86:	bls.n	dde4 <strncmp+0x70>
    dd88:	mov	r3, r1
    dd8a:	b.n	dd9e <strncmp+0x2a>
    dd8c:	subs	r2, #4
    dd8e:	mov	ip, r0
    dd90:	mov	r1, r3
    dd92:	beq.n	dde0 <strncmp+0x6c>
    dd94:	tst.w	lr, #2155905152	; 0x80808080
    dd98:	bne.n	dde0 <strncmp+0x6c>
    dd9a:	cmp	r2, #3
    dd9c:	bls.n	dde4 <strncmp+0x70>
    dd9e:	ldr	r4, [r0, #0]
    dda0:	mov	r1, r3
    dda2:	ldr.w	r5, [r3], #4
    dda6:	sub.w	lr, r4, #16843009	; 0x1010101
    ddaa:	cmp	r4, r5
    ddac:	mov	ip, r0
    ddae:	bic.w	lr, lr, r4
    ddb2:	add.w	r0, r0, #4
    ddb6:	beq.n	dd8c <strncmp+0x18>
    ddb8:	ldrb.w	r0, [ip]
    ddbc:	ldrb	r4, [r1, #0]
    ddbe:	cmp	r0, r4
    ddc0:	bne.n	ddfa <strncmp+0x86>
    ddc2:	mov	lr, ip
    ddc4:	cbz	r0, dde2 <strncmp+0x6e>
    ddc6:	ldrb.w	r0, [lr, #1]!
    ddca:	ldrb.w	r4, [r1, #1]!
    ddce:	sub.w	r3, r2, lr
    ddd2:	cmp	r0, r4
    ddd4:	add.w	r3, r3, #4294967295
    ddd8:	bne.n	ddfa <strncmp+0x86>
    ddda:	adds.w	r3, ip, r3
    ddde:	bne.n	ddc4 <strncmp+0x50>
    dde0:	movs	r0, #0
    dde2:	pop	{r4, r5, pc}
    dde4:	ldrb.w	r0, [ip]
    dde8:	ldrb	r4, [r1, #0]
    ddea:	cmp	r4, r0
    ddec:	bne.n	ddfa <strncmp+0x86>
    ddee:	cmp	r2, #1
    ddf0:	beq.n	dde0 <strncmp+0x6c>
    ddf2:	mov	lr, ip
    ddf4:	b.n	ddc4 <strncmp+0x50>
    ddf6:	mov	r0, r2
    ddf8:	bx	lr
    ddfa:	subs	r0, r0, r4
    ddfc:	pop	{r4, r5, pc}
    ddfe:	nop

0000de00 <strncpy>:
    de00:	orr.w	r3, r0, r1
    de04:	lsls	r3, r3, #30
    de06:	push	{r4, r5, lr}
    de08:	bne.n	de0e <strncpy+0xe>
    de0a:	cmp	r2, #3
    de0c:	bhi.n	de2e <strncpy+0x2e>
    de0e:	mov	ip, r0
    de10:	add.w	lr, r1, #4294967295
    de14:	b.n	de26 <strncpy+0x26>
    de16:	ldrb.w	r1, [lr, #1]!
    de1a:	strb.w	r1, [r3], #1
    de1e:	subs	r4, r2, #1
    de20:	cbz	r1, de54 <strncpy+0x54>
    de22:	mov	ip, r3
    de24:	mov	r2, r4
    de26:	mov	r3, ip
    de28:	cmp	r2, #0
    de2a:	bne.n	de16 <strncpy+0x16>
    de2c:	pop	{r4, r5, pc}
    de2e:	mov	r3, r1
    de30:	mov	ip, r0
    de32:	mov	r1, r3
    de34:	ldr.w	r5, [r3], #4
    de38:	sub.w	r4, r5, #16843009	; 0x1010101
    de3c:	bic.w	r4, r4, r5
    de40:	tst.w	r4, #2155905152	; 0x80808080
    de44:	bne.n	de10 <strncpy+0x10>
    de46:	subs	r2, #4
    de48:	cmp	r2, #3
    de4a:	str.w	r5, [ip], #4
    de4e:	mov	r1, r3
    de50:	bhi.n	de32 <strncpy+0x32>
    de52:	b.n	de10 <strncpy+0x10>
    de54:	add	ip, r2
    de56:	cmp	r4, #0
    de58:	beq.n	de2c <strncpy+0x2c>
    de5a:	strb.w	r1, [r3], #1
    de5e:	cmp	r3, ip
    de60:	bne.n	de5a <strncpy+0x5a>
    de62:	pop	{r4, r5, pc}

0000de64 <__locale_mb_cur_max>:
    de64:	ldr	r3, [pc, #4]	; (de6c <__locale_mb_cur_max+0x8>)
    de66:	ldrb.w	r0, [r3, #296]	; 0x128
    de6a:	bx	lr
    de6c:	.word	0x20001484

0000de70 <_close_r>:
    de70:	push	{r3, r4, r5, lr}
    de72:	ldr	r5, [pc, #28]	; (de90 <_close_r+0x20>)
    de74:	movs	r2, #0
    de76:	mov	r4, r0
    de78:	mov	r0, r1
    de7a:	str	r2, [r5, #0]
    de7c:	bl	b6e4 <_close>
    de80:	adds	r3, r0, #1
    de82:	beq.n	de86 <_close_r+0x16>
    de84:	pop	{r3, r4, r5, pc}
    de86:	ldr	r3, [r5, #0]
    de88:	cmp	r3, #0
    de8a:	beq.n	de84 <_close_r+0x14>
    de8c:	str	r3, [r4, #0]
    de8e:	pop	{r3, r4, r5, pc}
    de90:	.word	0x20007690

0000de94 <_lseek_r>:
    de94:	push	{r3, r4, r5, lr}
    de96:	mov	r4, r1
    de98:	ldr	r5, [pc, #32]	; (debc <_lseek_r+0x28>)
    de9a:	mov	ip, r0
    de9c:	mov	r1, r2
    de9e:	mov	r0, r4
    dea0:	mov	r2, r3
    dea2:	movs	r3, #0
    dea4:	str	r3, [r5, #0]
    dea6:	mov	r4, ip
    dea8:	bl	b6fc <_lseek>
    deac:	adds	r3, r0, #1
    deae:	beq.n	deb2 <_lseek_r+0x1e>
    deb0:	pop	{r3, r4, r5, pc}
    deb2:	ldr	r3, [r5, #0]
    deb4:	cmp	r3, #0
    deb6:	beq.n	deb0 <_lseek_r+0x1c>
    deb8:	str	r3, [r4, #0]
    deba:	pop	{r3, r4, r5, pc}
    debc:	.word	0x20007690

0000dec0 <_read_r>:
    dec0:	push	{r3, r4, r5, lr}
    dec2:	mov	r4, r1
    dec4:	ldr	r5, [pc, #32]	; (dee8 <_read_r+0x28>)
    dec6:	mov	ip, r0
    dec8:	mov	r1, r2
    deca:	mov	r0, r4
    decc:	mov	r2, r3
    dece:	movs	r3, #0
    ded0:	str	r3, [r5, #0]
    ded2:	mov	r4, ip
    ded4:	bl	b6e0 <_read>
    ded8:	adds	r3, r0, #1
    deda:	beq.n	dede <_read_r+0x1e>
    dedc:	pop	{r3, r4, r5, pc}
    dede:	ldr	r3, [r5, #0]
    dee0:	cmp	r3, #0
    dee2:	beq.n	dedc <_read_r+0x1c>
    dee4:	str	r3, [r4, #0]
    dee6:	pop	{r3, r4, r5, pc}
    dee8:	.word	0x20007690

0000deec <_sbrk_r>:
    deec:	push	{r3, r4, r5, lr}
    deee:	ldr	r5, [pc, #28]	; (df0c <_sbrk_r+0x20>)
    def0:	movs	r2, #0
    def2:	mov	r4, r0
    def4:	mov	r0, r1
    def6:	str	r2, [r5, #0]
    def8:	bl	b6ac <_sbrk>
    defc:	adds	r3, r0, #1
    defe:	beq.n	df02 <_sbrk_r+0x16>
    df00:	pop	{r3, r4, r5, pc}
    df02:	ldr	r3, [r5, #0]
    df04:	cmp	r3, #0
    df06:	beq.n	df00 <_sbrk_r+0x14>
    df08:	str	r3, [r4, #0]
    df0a:	pop	{r3, r4, r5, pc}
    df0c:	.word	0x20007690

0000df10 <_write_r>:
    df10:	push	{r3, r4, r5, lr}
    df12:	mov	r4, r1
    df14:	ldr	r5, [pc, #32]	; (df38 <_write_r+0x28>)
    df16:	mov	ip, r0
    df18:	mov	r1, r2
    df1a:	mov	r0, r4
    df1c:	mov	r2, r3
    df1e:	movs	r3, #0
    df20:	str	r3, [r5, #0]
    df22:	mov	r4, ip
    df24:	bl	ccd4 <_write>
    df28:	adds	r3, r0, #1
    df2a:	beq.n	df2e <_write_r+0x1e>
    df2c:	pop	{r3, r4, r5, pc}
    df2e:	ldr	r3, [r5, #0]
    df30:	cmp	r3, #0
    df32:	beq.n	df2c <_write_r+0x1c>
    df34:	str	r3, [r4, #0]
    df36:	pop	{r3, r4, r5, pc}
    df38:	.word	0x20007690

0000df3c <__errno>:
    df3c:	ldr	r3, [pc, #4]	; (df44 <__errno+0x8>)
    df3e:	ldr	r0, [r3, #0]
    df40:	bx	lr
    df42:	nop
    df44:	.word	0x20001a0c

0000df48 <__libc_init_array>:
    df48:	push	{r4, r5, r6, lr}
    df4a:	ldr	r6, [pc, #52]	; (df80 <__libc_init_array+0x38>)
    df4c:	ldr	r5, [pc, #52]	; (df84 <__libc_init_array+0x3c>)
    df4e:	subs	r6, r6, r5
    df50:	asrs	r6, r6, #2
    df52:	beq.n	df62 <__libc_init_array+0x1a>
    df54:	movs	r4, #0
    df56:	ldr.w	r3, [r5], #4
    df5a:	adds	r4, #1
    df5c:	blx	r3
    df5e:	cmp	r6, r4
    df60:	bne.n	df56 <__libc_init_array+0xe>
    df62:	ldr	r6, [pc, #36]	; (df88 <__libc_init_array+0x40>)
    df64:	ldr	r5, [pc, #36]	; (df8c <__libc_init_array+0x44>)
    df66:	subs	r6, r6, r5
    df68:	bl	132d8 <___init_veneer>
    df6c:	asrs	r6, r6, #2
    df6e:	beq.n	df7e <__libc_init_array+0x36>
    df70:	movs	r4, #0
    df72:	ldr.w	r3, [r5], #4
    df76:	adds	r4, #1
    df78:	blx	r3
    df7a:	cmp	r6, r4
    df7c:	bne.n	df72 <__libc_init_array+0x2a>
    df7e:	pop	{r4, r5, r6, pc}
    df80:	.word	0x60001f10
    df84:	.word	0x60001f10
    df88:	.word	0x60001f8c
    df8c:	.word	0x60001f10

0000df90 <__retarget_lock_init_recursive>:
    df90:	bx	lr
    df92:	nop

0000df94 <__retarget_lock_close_recursive>:
    df94:	bx	lr
    df96:	nop

0000df98 <__retarget_lock_acquire_recursive>:
    df98:	bx	lr
    df9a:	nop

0000df9c <__retarget_lock_release_recursive>:
    df9c:	bx	lr
    df9e:	nop

0000dfa0 <memchr>:
    dfa0:	and.w	r1, r1, #255	; 0xff
    dfa4:	cmp	r2, #16
    dfa6:	blt.n	e000 <memchr+0x60>
    dfa8:	tst.w	r0, #7
    dfac:	beq.n	dfc0 <memchr+0x20>
    dfae:	ldrb.w	r3, [r0], #1
    dfb2:	subs	r2, #1
    dfb4:	cmp	r3, r1
    dfb6:	beq.n	e014 <memchr+0x74>
    dfb8:	tst.w	r0, #7
    dfbc:	cbz	r2, e010 <memchr+0x70>
    dfbe:	bne.n	dfae <memchr+0xe>
    dfc0:	push	{r4, r5, r6, r7}
    dfc2:	orr.w	r1, r1, r1, lsl #8
    dfc6:	orr.w	r1, r1, r1, lsl #16
    dfca:	bic.w	r4, r2, #7
    dfce:	mvns.w	r7, #0
    dfd2:	movs	r3, #0
    dfd4:	ldrd	r5, r6, [r0], #8
    dfd8:	subs	r4, #8
    dfda:	eor.w	r5, r5, r1
    dfde:	eor.w	r6, r6, r1
    dfe2:	uadd8	r5, r5, r7
    dfe6:	sel	r5, r3, r7
    dfea:	uadd8	r6, r6, r7
    dfee:	sel	r6, r5, r7
    dff2:	cbnz	r6, e018 <memchr+0x78>
    dff4:	bne.n	dfd4 <memchr+0x34>
    dff6:	pop	{r4, r5, r6, r7}
    dff8:	and.w	r1, r1, #255	; 0xff
    dffc:	and.w	r2, r2, #7
    e000:	cbz	r2, e010 <memchr+0x70>
    e002:	ldrb.w	r3, [r0], #1
    e006:	subs	r2, #1
    e008:	eor.w	r3, r3, r1
    e00c:	cbz	r3, e014 <memchr+0x74>
    e00e:	bne.n	e002 <memchr+0x62>
    e010:	movs	r0, #0
    e012:	bx	lr
    e014:	subs	r0, #1
    e016:	bx	lr
    e018:	cmp	r5, #0
    e01a:	itte	eq
    e01c:	moveq	r5, r6
    e01e:	subeq	r0, #3
    e020:	subne	r0, #7
    e022:	tst.w	r5, #1
    e026:	bne.n	e038 <memchr+0x98>
    e028:	adds	r0, #1
    e02a:	tst.w	r5, #256	; 0x100
    e02e:	ittt	eq
    e030:	addeq	r0, #1
    e032:	tsteq.w	r5, #98304	; 0x18000
    e036:	addeq	r0, #1
    e038:	pop	{r4, r5, r6, r7}
    e03a:	subs	r0, #1
    e03c:	bx	lr
    e03e:	nop

0000e040 <strlen>:
    e040:	pld	[r0]
    e044:	strd	r4, r5, [sp, #-8]!
    e048:	bic.w	r1, r0, #7
    e04c:	mvn.w	ip, #0
    e050:	ands.w	r4, r0, #7
    e054:	pld	[r1, #32]
    e058:	bne.w	e0ee <strlen+0xae>
    e05c:	mov.w	r4, #0
    e060:	mvn.w	r0, #7
    e064:	ldrd	r2, r3, [r1]
    e068:	pld	[r1, #64]	; 0x40
    e06c:	add.w	r0, r0, #8
    e070:	uadd8	r2, r2, ip
    e074:	sel	r2, r4, ip
    e078:	uadd8	r3, r3, ip
    e07c:	sel	r3, r2, ip
    e080:	cbnz	r3, e0d6 <strlen+0x96>
    e082:	ldrd	r2, r3, [r1, #8]
    e086:	uadd8	r2, r2, ip
    e08a:	add.w	r0, r0, #8
    e08e:	sel	r2, r4, ip
    e092:	uadd8	r3, r3, ip
    e096:	sel	r3, r2, ip
    e09a:	cbnz	r3, e0d6 <strlen+0x96>
    e09c:	ldrd	r2, r3, [r1, #16]
    e0a0:	uadd8	r2, r2, ip
    e0a4:	add.w	r0, r0, #8
    e0a8:	sel	r2, r4, ip
    e0ac:	uadd8	r3, r3, ip
    e0b0:	sel	r3, r2, ip
    e0b4:	cbnz	r3, e0d6 <strlen+0x96>
    e0b6:	ldrd	r2, r3, [r1, #24]
    e0ba:	add.w	r1, r1, #32
    e0be:	uadd8	r2, r2, ip
    e0c2:	add.w	r0, r0, #8
    e0c6:	sel	r2, r4, ip
    e0ca:	uadd8	r3, r3, ip
    e0ce:	sel	r3, r2, ip
    e0d2:	cmp	r3, #0
    e0d4:	beq.n	e064 <strlen+0x24>
    e0d6:	cmp	r2, #0
    e0d8:	itt	eq
    e0da:	addeq	r0, #4
    e0dc:	moveq	r2, r3
    e0de:	rev	r2, r2
    e0e0:	clz	r2, r2
    e0e4:	ldrd	r4, r5, [sp], #8
    e0e8:	add.w	r0, r0, r2, lsr #3
    e0ec:	bx	lr
    e0ee:	ldrd	r2, r3, [r1]
    e0f2:	and.w	r5, r4, #3
    e0f6:	rsb	r0, r4, #0
    e0fa:	mov.w	r5, r5, lsl #3
    e0fe:	tst.w	r4, #4
    e102:	pld	[r1, #64]	; 0x40
    e106:	lsl.w	r5, ip, r5
    e10a:	orn	r2, r2, r5
    e10e:	itt	ne
    e110:	ornne	r3, r3, r5
    e114:	movne	r2, ip
    e116:	mov.w	r4, #0
    e11a:	b.n	e070 <strlen+0x30>

0000e11c <__register_exitproc>:
    e11c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e120:	ldr.w	sl, [pc, #124]	; e1a0 <__register_exitproc+0x84>
    e124:	mov	r6, r0
    e126:	ldr.w	r0, [sl]
    e12a:	mov	r8, r3
    e12c:	mov	r7, r1
    e12e:	mov	r9, r2
    e130:	bl	df98 <__retarget_lock_acquire_recursive>
    e134:	ldr	r3, [pc, #96]	; (e198 <__register_exitproc+0x7c>)
    e136:	ldr	r4, [r3, #0]
    e138:	cbz	r4, e184 <__register_exitproc+0x68>
    e13a:	ldr	r5, [r4, #4]
    e13c:	cmp	r5, #31
    e13e:	bgt.n	e18a <__register_exitproc+0x6e>
    e140:	cbnz	r6, e15a <__register_exitproc+0x3e>
    e142:	adds	r3, r5, #1
    e144:	adds	r5, #2
    e146:	ldr.w	r0, [sl]
    e14a:	str	r3, [r4, #4]
    e14c:	str.w	r7, [r4, r5, lsl #2]
    e150:	bl	df9c <__retarget_lock_release_recursive>
    e154:	movs	r0, #0
    e156:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e15a:	add.w	r1, r4, r5, lsl #2
    e15e:	movs	r3, #1
    e160:	str.w	r9, [r1, #136]	; 0x88
    e164:	ldr.w	r2, [r4, #392]	; 0x188
    e168:	lsls	r3, r5
    e16a:	orrs	r2, r3
    e16c:	cmp	r6, #2
    e16e:	str.w	r2, [r4, #392]	; 0x188
    e172:	str.w	r8, [r1, #264]	; 0x108
    e176:	bne.n	e142 <__register_exitproc+0x26>
    e178:	ldr.w	r2, [r4, #396]	; 0x18c
    e17c:	orrs	r2, r3
    e17e:	str.w	r2, [r4, #396]	; 0x18c
    e182:	b.n	e142 <__register_exitproc+0x26>
    e184:	ldr	r4, [pc, #20]	; (e19c <__register_exitproc+0x80>)
    e186:	str	r4, [r3, #0]
    e188:	b.n	e13a <__register_exitproc+0x1e>
    e18a:	ldr.w	r0, [sl]
    e18e:	bl	df9c <__retarget_lock_release_recursive>
    e192:	mov.w	r0, #4294967295
    e196:	b.n	e156 <__register_exitproc+0x3a>
    e198:	.word	0x200062d4
    e19c:	.word	0x200062d8
    e1a0:	.word	0x20001478

0000e1a4 <_malloc_trim_r>:
    e1a4:	push	{r3, r4, r5, r6, r7, lr}
    e1a6:	ldr	r7, [pc, #144]	; (e238 <_malloc_trim_r+0x94>)
    e1a8:	mov	r4, r1
    e1aa:	mov	r6, r0
    e1ac:	bl	d41c <__malloc_lock>
    e1b0:	ldr	r3, [r7, #8]
    e1b2:	ldr	r5, [r3, #4]
    e1b4:	rsb	r1, r4, #4064	; 0xfe0
    e1b8:	adds	r1, #15
    e1ba:	bic.w	r5, r5, #3
    e1be:	adds	r3, r1, r5
    e1c0:	bic.w	r3, r3, #4080	; 0xff0
    e1c4:	bic.w	r3, r3, #15
    e1c8:	sub.w	r4, r3, #4096	; 0x1000
    e1cc:	cmp.w	r4, #4096	; 0x1000
    e1d0:	blt.n	e1e2 <_malloc_trim_r+0x3e>
    e1d2:	movs	r1, #0
    e1d4:	mov	r0, r6
    e1d6:	bl	deec <_sbrk_r>
    e1da:	ldr	r3, [r7, #8]
    e1dc:	add	r3, r5
    e1de:	cmp	r0, r3
    e1e0:	beq.n	e1ec <_malloc_trim_r+0x48>
    e1e2:	mov	r0, r6
    e1e4:	bl	d428 <__malloc_unlock>
    e1e8:	movs	r0, #0
    e1ea:	pop	{r3, r4, r5, r6, r7, pc}
    e1ec:	negs	r1, r4
    e1ee:	mov	r0, r6
    e1f0:	bl	deec <_sbrk_r>
    e1f4:	adds	r0, #1
    e1f6:	beq.n	e214 <_malloc_trim_r+0x70>
    e1f8:	ldr	r2, [pc, #64]	; (e23c <_malloc_trim_r+0x98>)
    e1fa:	ldr	r3, [r7, #8]
    e1fc:	subs	r5, r5, r4
    e1fe:	orr.w	r5, r5, #1
    e202:	str	r5, [r3, #4]
    e204:	ldr	r3, [r2, #0]
    e206:	mov	r0, r6
    e208:	subs	r3, r3, r4
    e20a:	str	r3, [r2, #0]
    e20c:	bl	d428 <__malloc_unlock>
    e210:	movs	r0, #1
    e212:	pop	{r3, r4, r5, r6, r7, pc}
    e214:	movs	r1, #0
    e216:	mov	r0, r6
    e218:	bl	deec <_sbrk_r>
    e21c:	ldr	r2, [r7, #8]
    e21e:	subs	r3, r0, r2
    e220:	cmp	r3, #15
    e222:	ble.n	e1e2 <_malloc_trim_r+0x3e>
    e224:	orr.w	r3, r3, #1
    e228:	str	r3, [r2, #4]
    e22a:	ldr	r3, [pc, #20]	; (e240 <_malloc_trim_r+0x9c>)
    e22c:	ldr	r1, [pc, #12]	; (e23c <_malloc_trim_r+0x98>)
    e22e:	ldr	r3, [r3, #0]
    e230:	subs	r0, r0, r3
    e232:	str	r0, [r1, #0]
    e234:	b.n	e1e2 <_malloc_trim_r+0x3e>
    e236:	nop
    e238:	.word	0x200015f0
    e23c:	.word	0x20006474
    e240:	.word	0x200019f8

0000e244 <_free_r>:
    e244:	cmp	r1, #0
    e246:	beq.n	e30c <_free_r+0xc8>
    e248:	push	{r3, r4, r5, r6, r7, lr}
    e24a:	mov	r4, r1
    e24c:	mov	r6, r0
    e24e:	bl	d41c <__malloc_lock>
    e252:	ldr.w	r2, [r4, #-4]
    e256:	ldr	r7, [pc, #492]	; (e444 <_free_r+0x200>)
    e258:	sub.w	r5, r4, #8
    e25c:	bic.w	r1, r2, #1
    e260:	add.w	ip, r5, r1
    e264:	ldr	r0, [r7, #8]
    e266:	ldr.w	r3, [ip, #4]
    e26a:	cmp	r0, ip
    e26c:	bic.w	r3, r3, #3
    e270:	beq.w	e38a <_free_r+0x146>
    e274:	lsls	r2, r2, #31
    e276:	str.w	r3, [ip, #4]
    e27a:	bmi.n	e2e2 <_free_r+0x9e>
    e27c:	ldr.w	r2, [r4, #-8]
    e280:	subs	r5, r5, r2
    e282:	add	r1, r2
    e284:	ldr	r2, [r5, #8]
    e286:	add.w	r0, r7, #8
    e28a:	cmp	r2, r0
    e28c:	beq.n	e364 <_free_r+0x120>
    e28e:	add.w	r4, ip, r3
    e292:	ldr.w	lr, [r4, #4]
    e296:	ldr	r4, [r5, #12]
    e298:	str	r4, [r2, #12]
    e29a:	tst.w	lr, #1
    e29e:	str	r2, [r4, #8]
    e2a0:	beq.w	e3d2 <_free_r+0x18e>
    e2a4:	orr.w	r3, r1, #1
    e2a8:	str	r3, [r5, #4]
    e2aa:	str.w	r1, [ip]
    e2ae:	cmp.w	r1, #512	; 0x200
    e2b2:	bcs.n	e320 <_free_r+0xdc>
    e2b4:	ldr	r0, [r7, #4]
    e2b6:	lsrs	r3, r1, #3
    e2b8:	movs	r2, #1
    e2ba:	lsrs	r1, r1, #5
    e2bc:	adds	r3, #1
    e2be:	lsls	r2, r1
    e2c0:	orrs	r2, r0
    e2c2:	ldr.w	r1, [r7, r3, lsl #3]
    e2c6:	str	r2, [r7, #4]
    e2c8:	add.w	r2, r7, r3, lsl #3
    e2cc:	subs	r2, #8
    e2ce:	strd	r1, r2, [r5, #8]
    e2d2:	str.w	r5, [r7, r3, lsl #3]
    e2d6:	str	r5, [r1, #12]
    e2d8:	mov	r0, r6
    e2da:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e2de:	b.w	d428 <__malloc_unlock>
    e2e2:	add.w	r2, ip, r3
    e2e6:	ldr	r2, [r2, #4]
    e2e8:	lsls	r0, r2, #31
    e2ea:	bmi.n	e30e <_free_r+0xca>
    e2ec:	add	r1, r3
    e2ee:	add.w	r0, r7, #8
    e2f2:	ldr.w	r3, [ip, #8]
    e2f6:	cmp	r3, r0
    e2f8:	beq.n	e3e2 <_free_r+0x19e>
    e2fa:	ldr.w	r2, [ip, #12]
    e2fe:	str	r2, [r3, #12]
    e300:	str	r3, [r2, #8]
    e302:	orr.w	r3, r1, #1
    e306:	str	r3, [r5, #4]
    e308:	str	r1, [r5, r1]
    e30a:	b.n	e2ae <_free_r+0x6a>
    e30c:	bx	lr
    e30e:	orr.w	r3, r1, #1
    e312:	cmp.w	r1, #512	; 0x200
    e316:	str.w	r3, [r4, #-4]
    e31a:	str.w	r1, [ip]
    e31e:	bcc.n	e2b4 <_free_r+0x70>
    e320:	cmp.w	r1, #2560	; 0xa00
    e324:	mov.w	r3, r1, lsr #9
    e328:	bcs.n	e3bc <_free_r+0x178>
    e32a:	lsrs	r3, r1, #6
    e32c:	add.w	r0, r3, #57	; 0x39
    e330:	add.w	r2, r3, #56	; 0x38
    e334:	lsls	r3, r0, #3
    e336:	adds	r0, r7, r3
    e338:	ldr	r3, [r7, r3]
    e33a:	subs	r0, #8
    e33c:	cmp	r0, r3
    e33e:	beq.n	e3f4 <_free_r+0x1b0>
    e340:	ldr	r2, [r3, #4]
    e342:	bic.w	r2, r2, #3
    e346:	cmp	r2, r1
    e348:	bls.n	e350 <_free_r+0x10c>
    e34a:	ldr	r3, [r3, #8]
    e34c:	cmp	r0, r3
    e34e:	bne.n	e340 <_free_r+0xfc>
    e350:	ldr	r0, [r3, #12]
    e352:	strd	r3, r0, [r5, #8]
    e356:	str	r5, [r0, #8]
    e358:	str	r5, [r3, #12]
    e35a:	mov	r0, r6
    e35c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e360:	b.w	d428 <__malloc_unlock>
    e364:	add.w	r2, ip, r3
    e368:	ldr	r2, [r2, #4]
    e36a:	lsls	r2, r2, #31
    e36c:	bmi.n	e436 <_free_r+0x1f2>
    e36e:	add	r3, r1
    e370:	ldrd	r1, r2, [ip, #8]
    e374:	str	r2, [r1, #12]
    e376:	str	r1, [r2, #8]
    e378:	orr.w	r2, r3, #1
    e37c:	str	r2, [r5, #4]
    e37e:	mov	r0, r6
    e380:	str	r3, [r5, r3]
    e382:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e386:	b.w	d428 <__malloc_unlock>
    e38a:	add	r3, r1
    e38c:	lsls	r1, r2, #31
    e38e:	bmi.n	e3a0 <_free_r+0x15c>
    e390:	ldr.w	r2, [r4, #-8]
    e394:	subs	r5, r5, r2
    e396:	add	r3, r2
    e398:	ldrd	r1, r2, [r5, #8]
    e39c:	str	r2, [r1, #12]
    e39e:	str	r1, [r2, #8]
    e3a0:	orr.w	r2, r3, #1
    e3a4:	str	r2, [r5, #4]
    e3a6:	ldr	r2, [pc, #160]	; (e448 <_free_r+0x204>)
    e3a8:	str	r5, [r7, #8]
    e3aa:	ldr	r2, [r2, #0]
    e3ac:	cmp	r2, r3
    e3ae:	bhi.n	e2d8 <_free_r+0x94>
    e3b0:	ldr	r3, [pc, #152]	; (e44c <_free_r+0x208>)
    e3b2:	mov	r0, r6
    e3b4:	ldr	r1, [r3, #0]
    e3b6:	bl	e1a4 <_malloc_trim_r>
    e3ba:	b.n	e2d8 <_free_r+0x94>
    e3bc:	cmp	r3, #20
    e3be:	bls.n	e3d6 <_free_r+0x192>
    e3c0:	cmp	r3, #84	; 0x54
    e3c2:	bhi.n	e404 <_free_r+0x1c0>
    e3c4:	lsrs	r3, r1, #12
    e3c6:	add.w	r0, r3, #111	; 0x6f
    e3ca:	add.w	r2, r3, #110	; 0x6e
    e3ce:	lsls	r3, r0, #3
    e3d0:	b.n	e336 <_free_r+0xf2>
    e3d2:	add	r1, r3
    e3d4:	b.n	e2f2 <_free_r+0xae>
    e3d6:	add.w	r0, r3, #92	; 0x5c
    e3da:	add.w	r2, r3, #91	; 0x5b
    e3de:	lsls	r3, r0, #3
    e3e0:	b.n	e336 <_free_r+0xf2>
    e3e2:	orr.w	r3, r1, #1
    e3e6:	strd	r5, r5, [r7, #16]
    e3ea:	strd	r0, r0, [r5, #8]
    e3ee:	str	r3, [r5, #4]
    e3f0:	str	r1, [r5, r1]
    e3f2:	b.n	e2d8 <_free_r+0x94>
    e3f4:	ldr	r1, [r7, #4]
    e3f6:	asrs	r2, r2, #2
    e3f8:	movs	r4, #1
    e3fa:	lsl.w	r2, r4, r2
    e3fe:	orrs	r2, r1
    e400:	str	r2, [r7, #4]
    e402:	b.n	e352 <_free_r+0x10e>
    e404:	cmp.w	r3, #340	; 0x154
    e408:	bhi.n	e418 <_free_r+0x1d4>
    e40a:	lsrs	r3, r1, #15
    e40c:	add.w	r0, r3, #120	; 0x78
    e410:	add.w	r2, r3, #119	; 0x77
    e414:	lsls	r3, r0, #3
    e416:	b.n	e336 <_free_r+0xf2>
    e418:	movw	r2, #1364	; 0x554
    e41c:	cmp	r3, r2
    e41e:	bhi.n	e42e <_free_r+0x1ea>
    e420:	lsrs	r3, r1, #18
    e422:	add.w	r0, r3, #125	; 0x7d
    e426:	add.w	r2, r3, #124	; 0x7c
    e42a:	lsls	r3, r0, #3
    e42c:	b.n	e336 <_free_r+0xf2>
    e42e:	mov.w	r3, #1016	; 0x3f8
    e432:	movs	r2, #126	; 0x7e
    e434:	b.n	e336 <_free_r+0xf2>
    e436:	orr.w	r3, r1, #1
    e43a:	str	r3, [r5, #4]
    e43c:	str.w	r1, [ip]
    e440:	b.n	e2d8 <_free_r+0x94>
    e442:	nop
    e444:	.word	0x200015f0
    e448:	.word	0x200019fc
    e44c:	.word	0x200064a4

0000e450 <__ascii_mbtowc>:
    e450:	sub	sp, #8
    e452:	cbz	r1, e468 <__ascii_mbtowc+0x18>
    e454:	cbz	r2, e46e <__ascii_mbtowc+0x1e>
    e456:	cbz	r3, e474 <__ascii_mbtowc+0x24>
    e458:	ldrb	r3, [r2, #0]
    e45a:	str	r3, [r1, #0]
    e45c:	ldrb	r2, [r2, #0]
    e45e:	subs	r0, r2, #0
    e460:	it	ne
    e462:	movne	r0, #1
    e464:	add	sp, #8
    e466:	bx	lr
    e468:	add	r1, sp, #4
    e46a:	cmp	r2, #0
    e46c:	bne.n	e456 <__ascii_mbtowc+0x6>
    e46e:	mov	r0, r2
    e470:	add	sp, #8
    e472:	bx	lr
    e474:	mvn.w	r0, #1
    e478:	b.n	e464 <__ascii_mbtowc+0x14>
    e47a:	nop

0000e47c <_Balloc>:
    e47c:	ldr	r3, [r0, #68]	; 0x44
    e47e:	push	{r4, r5, r6, lr}
    e480:	mov	r5, r0
    e482:	mov	r4, r1
    e484:	cbz	r3, e49a <_Balloc+0x1e>
    e486:	ldr.w	r0, [r3, r4, lsl #2]
    e48a:	cbz	r0, e4ae <_Balloc+0x32>
    e48c:	ldr	r2, [r0, #0]
    e48e:	str.w	r2, [r3, r4, lsl #2]
    e492:	movs	r3, #0
    e494:	strd	r3, r3, [r0, #12]
    e498:	pop	{r4, r5, r6, pc}
    e49a:	movs	r2, #33	; 0x21
    e49c:	movs	r1, #4
    e49e:	bl	10a60 <_calloc_r>
    e4a2:	mov	r3, r0
    e4a4:	str	r0, [r5, #68]	; 0x44
    e4a6:	cmp	r0, #0
    e4a8:	bne.n	e486 <_Balloc+0xa>
    e4aa:	movs	r0, #0
    e4ac:	pop	{r4, r5, r6, pc}
    e4ae:	movs	r1, #1
    e4b0:	lsl.w	r6, r1, r4
    e4b4:	adds	r2, r6, #5
    e4b6:	lsls	r2, r2, #2
    e4b8:	mov	r0, r5
    e4ba:	bl	10a60 <_calloc_r>
    e4be:	cmp	r0, #0
    e4c0:	beq.n	e4aa <_Balloc+0x2e>
    e4c2:	strd	r4, r6, [r0, #4]
    e4c6:	b.n	e492 <_Balloc+0x16>

0000e4c8 <_Bfree>:
    e4c8:	cbz	r1, e4d8 <_Bfree+0x10>
    e4ca:	ldr	r3, [r0, #68]	; 0x44
    e4cc:	ldr	r2, [r1, #4]
    e4ce:	ldr.w	r0, [r3, r2, lsl #2]
    e4d2:	str	r0, [r1, #0]
    e4d4:	str.w	r1, [r3, r2, lsl #2]
    e4d8:	bx	lr
    e4da:	nop

0000e4dc <__multadd>:
    e4dc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4e0:	ldr	r6, [r1, #16]
    e4e2:	mov	r8, r0
    e4e4:	mov	r7, r1
    e4e6:	mov	r5, r3
    e4e8:	add.w	lr, r1, #20
    e4ec:	movs	r0, #0
    e4ee:	ldr.w	r1, [lr]
    e4f2:	uxth	r4, r1
    e4f4:	mla	r3, r2, r4, r5
    e4f8:	lsrs	r1, r1, #16
    e4fa:	mov.w	ip, r3, lsr #16
    e4fe:	mla	ip, r2, r1, ip
    e502:	adds	r0, #1
    e504:	uxth	r4, r3
    e506:	add.w	r4, r4, ip, lsl #16
    e50a:	cmp	r6, r0
    e50c:	str.w	r4, [lr], #4
    e510:	mov.w	r5, ip, lsr #16
    e514:	bgt.n	e4ee <__multadd+0x12>
    e516:	cbz	r5, e528 <__multadd+0x4c>
    e518:	ldr	r3, [r7, #8]
    e51a:	cmp	r3, r6
    e51c:	ble.n	e52e <__multadd+0x52>
    e51e:	add.w	r3, r7, r6, lsl #2
    e522:	adds	r6, #1
    e524:	str	r5, [r3, #20]
    e526:	str	r6, [r7, #16]
    e528:	mov	r0, r7
    e52a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e52e:	ldr	r1, [r7, #4]
    e530:	mov	r0, r8
    e532:	adds	r1, #1
    e534:	bl	e47c <_Balloc>
    e538:	mov	r4, r0
    e53a:	cbz	r0, e56a <__multadd+0x8e>
    e53c:	ldr	r2, [r7, #16]
    e53e:	adds	r2, #2
    e540:	add.w	r1, r7, #12
    e544:	lsls	r2, r2, #2
    e546:	adds	r0, #12
    e548:	bl	9d30 <memcpy>
    e54c:	ldr.w	r3, [r8, #68]	; 0x44
    e550:	ldr	r2, [r7, #4]
    e552:	ldr.w	r1, [r3, r2, lsl #2]
    e556:	str	r1, [r7, #0]
    e558:	str.w	r7, [r3, r2, lsl #2]
    e55c:	mov	r7, r4
    e55e:	add.w	r3, r7, r6, lsl #2
    e562:	adds	r6, #1
    e564:	str	r5, [r3, #20]
    e566:	str	r6, [r7, #16]
    e568:	b.n	e528 <__multadd+0x4c>
    e56a:	ldr	r3, [pc, #12]	; (e578 <__multadd+0x9c>)
    e56c:	ldr	r0, [pc, #12]	; (e57c <__multadd+0xa0>)
    e56e:	mov	r2, r4
    e570:	movs	r1, #186	; 0xba
    e572:	bl	10a20 <__assert_func>
    e576:	nop
    e578:	.word	0x20000c6c
    e57c:	.word	0x20000c80

0000e580 <__hi0bits>:
    e580:	lsrs	r3, r0, #16
    e582:	lsls	r3, r3, #16
    e584:	cbnz	r3, e5bc <__hi0bits+0x3c>
    e586:	lsls	r0, r0, #16
    e588:	movs	r3, #16
    e58a:	tst.w	r0, #4278190080	; 0xff000000
    e58e:	itt	eq
    e590:	lsleq	r0, r0, #8
    e592:	addeq	r3, #8
    e594:	tst.w	r0, #4026531840	; 0xf0000000
    e598:	itt	eq
    e59a:	lsleq	r0, r0, #4
    e59c:	addeq	r3, #4
    e59e:	tst.w	r0, #3221225472	; 0xc0000000
    e5a2:	itt	eq
    e5a4:	lsleq	r0, r0, #2
    e5a6:	addeq	r3, #2
    e5a8:	cmp	r0, #0
    e5aa:	blt.n	e5b8 <__hi0bits+0x38>
    e5ac:	tst.w	r0, #1073741824	; 0x40000000
    e5b0:	add.w	r3, r3, #1
    e5b4:	it	eq
    e5b6:	moveq	r3, #32
    e5b8:	mov	r0, r3
    e5ba:	bx	lr
    e5bc:	movs	r3, #0
    e5be:	b.n	e58a <__hi0bits+0xa>

0000e5c0 <__lo0bits>:
    e5c0:	ldr	r3, [r0, #0]
    e5c2:	ands.w	r2, r3, #7
    e5c6:	beq.n	e5da <__lo0bits+0x1a>
    e5c8:	lsls	r1, r3, #31
    e5ca:	bmi.n	e60c <__lo0bits+0x4c>
    e5cc:	lsls	r2, r3, #30
    e5ce:	bpl.n	e616 <__lo0bits+0x56>
    e5d0:	lsrs	r3, r3, #1
    e5d2:	str	r3, [r0, #0]
    e5d4:	movs	r2, #1
    e5d6:	mov	r0, r2
    e5d8:	bx	lr
    e5da:	uxth	r1, r3
    e5dc:	cbnz	r1, e5e2 <__lo0bits+0x22>
    e5de:	lsrs	r3, r3, #16
    e5e0:	movs	r2, #16
    e5e2:	uxtb	r1, r3
    e5e4:	cbnz	r1, e5ea <__lo0bits+0x2a>
    e5e6:	adds	r2, #8
    e5e8:	lsrs	r3, r3, #8
    e5ea:	lsls	r1, r3, #28
    e5ec:	itt	eq
    e5ee:	lsreq	r3, r3, #4
    e5f0:	addeq	r2, #4
    e5f2:	lsls	r1, r3, #30
    e5f4:	itt	eq
    e5f6:	lsreq	r3, r3, #2
    e5f8:	addeq	r2, #2
    e5fa:	lsls	r1, r3, #31
    e5fc:	bmi.n	e606 <__lo0bits+0x46>
    e5fe:	lsrs	r3, r3, #1
    e600:	add.w	r2, r2, #1
    e604:	beq.n	e612 <__lo0bits+0x52>
    e606:	str	r3, [r0, #0]
    e608:	mov	r0, r2
    e60a:	bx	lr
    e60c:	movs	r2, #0
    e60e:	mov	r0, r2
    e610:	bx	lr
    e612:	movs	r2, #32
    e614:	b.n	e5d6 <__lo0bits+0x16>
    e616:	lsrs	r3, r3, #2
    e618:	movs	r2, #2
    e61a:	str	r3, [r0, #0]
    e61c:	mov	r0, r2
    e61e:	bx	lr

0000e620 <__i2b>:
    e620:	push	{r3, r4, r5, lr}
    e622:	ldr	r3, [r0, #68]	; 0x44
    e624:	mov	r4, r0
    e626:	mov	r5, r1
    e628:	cbz	r3, e63e <__i2b+0x1e>
    e62a:	ldr	r0, [r3, #4]
    e62c:	cbz	r0, e65c <__i2b+0x3c>
    e62e:	ldr	r2, [r0, #0]
    e630:	str	r2, [r3, #4]
    e632:	movs	r2, #0
    e634:	movs	r3, #1
    e636:	strd	r3, r5, [r0, #16]
    e63a:	str	r2, [r0, #12]
    e63c:	pop	{r3, r4, r5, pc}
    e63e:	movs	r2, #33	; 0x21
    e640:	movs	r1, #4
    e642:	bl	10a60 <_calloc_r>
    e646:	mov	r3, r0
    e648:	str	r0, [r4, #68]	; 0x44
    e64a:	cmp	r0, #0
    e64c:	bne.n	e62a <__i2b+0xa>
    e64e:	ldr	r3, [pc, #36]	; (e674 <__i2b+0x54>)
    e650:	ldr	r0, [pc, #36]	; (e678 <__i2b+0x58>)
    e652:	movs	r2, #0
    e654:	movw	r1, #325	; 0x145
    e658:	bl	10a20 <__assert_func>
    e65c:	movs	r2, #28
    e65e:	movs	r1, #1
    e660:	mov	r0, r4
    e662:	bl	10a60 <_calloc_r>
    e666:	cmp	r0, #0
    e668:	beq.n	e64e <__i2b+0x2e>
    e66a:	movs	r2, #1
    e66c:	movs	r3, #2
    e66e:	strd	r2, r3, [r0, #4]
    e672:	b.n	e632 <__i2b+0x12>
    e674:	.word	0x20000c6c
    e678:	.word	0x20000c80

0000e67c <__multiply>:
    e67c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e680:	ldr	r6, [r1, #16]
    e682:	ldr	r5, [r2, #16]
    e684:	cmp	r6, r5
    e686:	sub	sp, #20
    e688:	mov	r8, r1
    e68a:	mov	r4, r2
    e68c:	blt.n	e69a <__multiply+0x1e>
    e68e:	mov	r2, r5
    e690:	mov	r3, r4
    e692:	mov	r5, r6
    e694:	mov	r4, r1
    e696:	mov	r6, r2
    e698:	mov	r8, r3
    e69a:	ldr	r3, [r4, #8]
    e69c:	ldr	r1, [r4, #4]
    e69e:	adds	r7, r5, r6
    e6a0:	cmp	r3, r7
    e6a2:	it	lt
    e6a4:	addlt	r1, #1
    e6a6:	bl	e47c <_Balloc>
    e6aa:	str	r0, [sp, #4]
    e6ac:	cmp	r0, #0
    e6ae:	beq.w	e7c0 <__multiply+0x144>
    e6b2:	ldr	r3, [sp, #4]
    e6b4:	add.w	r9, r3, #20
    e6b8:	add.w	sl, r9, r7, lsl #2
    e6bc:	cmp	r9, sl
    e6be:	bcs.n	e6cc <__multiply+0x50>
    e6c0:	mov	r3, r9
    e6c2:	movs	r2, #0
    e6c4:	str.w	r2, [r3], #4
    e6c8:	cmp	sl, r3
    e6ca:	bhi.n	e6c4 <__multiply+0x48>
    e6cc:	add.w	r8, r8, #20
    e6d0:	add.w	fp, r8, r6, lsl #2
    e6d4:	add.w	r3, r4, #20
    e6d8:	cmp	r8, fp
    e6da:	mov	r2, r3
    e6dc:	add.w	r5, r3, r5, lsl #2
    e6e0:	bcs.n	e7a2 <__multiply+0x126>
    e6e2:	subs	r3, r5, r4
    e6e4:	subs	r3, #21
    e6e6:	bic.w	r3, r3, #3
    e6ea:	adds	r3, #4
    e6ec:	adds	r4, #21
    e6ee:	cmp	r5, r4
    e6f0:	it	cc
    e6f2:	movcc	r3, #4
    e6f4:	strd	sl, r7, [sp, #8]
    e6f8:	mov	ip, r5
    e6fa:	mov	r7, r3
    e6fc:	mov	sl, r2
    e6fe:	b.n	e70c <__multiply+0x90>
    e700:	lsrs	r1, r1, #16
    e702:	bne.n	e758 <__multiply+0xdc>
    e704:	cmp	fp, r8
    e706:	add.w	r9, r9, #4
    e70a:	bls.n	e79e <__multiply+0x122>
    e70c:	ldr.w	r1, [r8], #4
    e710:	uxth	r5, r1
    e712:	cmp	r5, #0
    e714:	beq.n	e700 <__multiply+0x84>
    e716:	mov	r6, sl
    e718:	mov	r4, r9
    e71a:	movs	r3, #0
    e71c:	ldr.w	r1, [r6], #4
    e720:	ldr	r2, [r4, #0]
    e722:	uxth.w	lr, r1
    e726:	uxth	r0, r2
    e728:	lsrs	r1, r1, #16
    e72a:	mla	r0, r5, lr, r0
    e72e:	lsrs	r2, r2, #16
    e730:	add	r3, r0
    e732:	mla	r2, r5, r1, r2
    e736:	add.w	r2, r2, r3, lsr #16
    e73a:	uxth	r3, r3
    e73c:	orr.w	r3, r3, r2, lsl #16
    e740:	cmp	ip, r6
    e742:	str.w	r3, [r4], #4
    e746:	mov.w	r3, r2, lsr #16
    e74a:	bhi.n	e71c <__multiply+0xa0>
    e74c:	str.w	r3, [r9, r7]
    e750:	ldr.w	r1, [r8, #-4]
    e754:	lsrs	r1, r1, #16
    e756:	beq.n	e704 <__multiply+0x88>
    e758:	ldr.w	r3, [r9]
    e75c:	mov	r0, sl
    e75e:	mov	r2, r3
    e760:	mov	r4, r9
    e762:	movs	r6, #0
    e764:	ldrh	r5, [r0, #0]
    e766:	lsrs	r2, r2, #16
    e768:	mla	r2, r1, r5, r2
    e76c:	add	r6, r2
    e76e:	uxth	r3, r3
    e770:	orr.w	r3, r3, r6, lsl #16
    e774:	str.w	r3, [r4], #4
    e778:	ldr.w	r5, [r0], #4
    e77c:	ldr	r2, [r4, #0]
    e77e:	lsrs	r5, r5, #16
    e780:	uxth	r3, r2
    e782:	mla	r3, r1, r5, r3
    e786:	add.w	r3, r3, r6, lsr #16
    e78a:	cmp	ip, r0
    e78c:	mov.w	r6, r3, lsr #16
    e790:	bhi.n	e764 <__multiply+0xe8>
    e792:	cmp	fp, r8
    e794:	str.w	r3, [r9, r7]
    e798:	add.w	r9, r9, #4
    e79c:	bhi.n	e70c <__multiply+0x90>
    e79e:	ldrd	sl, r7, [sp, #8]
    e7a2:	cmp	r7, #0
    e7a4:	bgt.n	e7ac <__multiply+0x130>
    e7a6:	b.n	e7b4 <__multiply+0x138>
    e7a8:	subs	r7, #1
    e7aa:	beq.n	e7b4 <__multiply+0x138>
    e7ac:	ldr.w	r3, [sl, #-4]!
    e7b0:	cmp	r3, #0
    e7b2:	beq.n	e7a8 <__multiply+0x12c>
    e7b4:	ldr	r3, [sp, #4]
    e7b6:	mov	r0, r3
    e7b8:	str	r7, [r3, #16]
    e7ba:	add	sp, #20
    e7bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7c0:	ldr	r3, [pc, #12]	; (e7d0 <__multiply+0x154>)
    e7c2:	ldr	r0, [pc, #16]	; (e7d4 <__multiply+0x158>)
    e7c4:	ldr	r2, [sp, #4]
    e7c6:	mov.w	r1, #354	; 0x162
    e7ca:	bl	10a20 <__assert_func>
    e7ce:	nop
    e7d0:	.word	0x20000c6c
    e7d4:	.word	0x20000c80

0000e7d8 <__pow5mult>:
    e7d8:	ands.w	r3, r2, #3
    e7dc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7e0:	mov	r4, r2
    e7e2:	mov	r6, r0
    e7e4:	bne.n	e84c <__pow5mult+0x74>
    e7e6:	mov	r5, r1
    e7e8:	asrs	r4, r4, #2
    e7ea:	beq.n	e82e <__pow5mult+0x56>
    e7ec:	ldr.w	r8, [r6, #64]	; 0x40
    e7f0:	cmp.w	r8, #0
    e7f4:	beq.n	e85e <__pow5mult+0x86>
    e7f6:	lsls	r3, r4, #31
    e7f8:	mov.w	r7, #0
    e7fc:	bmi.n	e80e <__pow5mult+0x36>
    e7fe:	asrs	r4, r4, #1
    e800:	beq.n	e82e <__pow5mult+0x56>
    e802:	ldr.w	r0, [r8]
    e806:	cbz	r0, e834 <__pow5mult+0x5c>
    e808:	mov	r8, r0
    e80a:	lsls	r3, r4, #31
    e80c:	bpl.n	e7fe <__pow5mult+0x26>
    e80e:	mov	r2, r8
    e810:	mov	r1, r5
    e812:	mov	r0, r6
    e814:	bl	e67c <__multiply>
    e818:	cbz	r5, e848 <__pow5mult+0x70>
    e81a:	ldr	r1, [r5, #4]
    e81c:	ldr	r3, [r6, #68]	; 0x44
    e81e:	asrs	r4, r4, #1
    e820:	ldr.w	r2, [r3, r1, lsl #2]
    e824:	str	r2, [r5, #0]
    e826:	str.w	r5, [r3, r1, lsl #2]
    e82a:	mov	r5, r0
    e82c:	bne.n	e802 <__pow5mult+0x2a>
    e82e:	mov	r0, r5
    e830:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e834:	mov	r2, r8
    e836:	mov	r1, r8
    e838:	mov	r0, r6
    e83a:	bl	e67c <__multiply>
    e83e:	str.w	r0, [r8]
    e842:	str	r7, [r0, #0]
    e844:	mov	r8, r0
    e846:	b.n	e80a <__pow5mult+0x32>
    e848:	mov	r5, r0
    e84a:	b.n	e7fe <__pow5mult+0x26>
    e84c:	subs	r3, #1
    e84e:	ldr	r2, [pc, #60]	; (e88c <__pow5mult+0xb4>)
    e850:	ldr.w	r2, [r2, r3, lsl #2]
    e854:	movs	r3, #0
    e856:	bl	e4dc <__multadd>
    e85a:	mov	r5, r0
    e85c:	b.n	e7e8 <__pow5mult+0x10>
    e85e:	movs	r1, #1
    e860:	mov	r0, r6
    e862:	bl	e47c <_Balloc>
    e866:	mov	r8, r0
    e868:	cbz	r0, e87c <__pow5mult+0xa4>
    e86a:	movs	r3, #1
    e86c:	movw	r2, #625	; 0x271
    e870:	strd	r3, r2, [r0, #16]
    e874:	movs	r3, #0
    e876:	str	r0, [r6, #64]	; 0x40
    e878:	str	r3, [r0, #0]
    e87a:	b.n	e7f6 <__pow5mult+0x1e>
    e87c:	ldr	r3, [pc, #16]	; (e890 <__pow5mult+0xb8>)
    e87e:	ldr	r0, [pc, #20]	; (e894 <__pow5mult+0xbc>)
    e880:	mov	r2, r8
    e882:	movw	r1, #325	; 0x145
    e886:	bl	10a20 <__assert_func>
    e88a:	nop
    e88c:	.word	0x2000123c
    e890:	.word	0x20000c6c
    e894:	.word	0x20000c80

0000e898 <__lshift>:
    e898:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e89c:	mov	r5, r1
    e89e:	mov	r4, r2
    e8a0:	ldr	r7, [r5, #16]
    e8a2:	ldr	r3, [r5, #8]
    e8a4:	ldr	r1, [r1, #4]
    e8a6:	add.w	r7, r7, r2, asr #5
    e8aa:	adds	r6, r7, #1
    e8ac:	cmp	r6, r3
    e8ae:	mov	r8, r0
    e8b0:	mov.w	r9, r2, asr #5
    e8b4:	ble.n	e8c0 <__lshift+0x28>
    e8b6:	lsls	r3, r3, #1
    e8b8:	cmp	r6, r3
    e8ba:	add.w	r1, r1, #1
    e8be:	bgt.n	e8b6 <__lshift+0x1e>
    e8c0:	mov	r0, r8
    e8c2:	bl	e47c <_Balloc>
    e8c6:	mov	ip, r0
    e8c8:	cmp	r0, #0
    e8ca:	beq.n	e972 <__lshift+0xda>
    e8cc:	cmp.w	r9, #0
    e8d0:	add.w	r2, r0, #20
    e8d4:	ble.n	e8f4 <__lshift+0x5c>
    e8d6:	add.w	r1, r9, #5
    e8da:	mov.w	lr, r1, lsl #2
    e8de:	mov	r3, r2
    e8e0:	add.w	r1, r0, r1, lsl #2
    e8e4:	movs	r0, #0
    e8e6:	str.w	r0, [r3], #4
    e8ea:	cmp	r3, r1
    e8ec:	bne.n	e8e6 <__lshift+0x4e>
    e8ee:	sub.w	r3, lr, #20
    e8f2:	add	r2, r3
    e8f4:	ldr	r1, [r5, #16]
    e8f6:	add.w	r3, r5, #20
    e8fa:	ands.w	lr, r4, #31
    e8fe:	add.w	r1, r3, r1, lsl #2
    e902:	beq.n	e962 <__lshift+0xca>
    e904:	rsb	r9, lr, #32
    e908:	mov	r0, r2
    e90a:	mov.w	sl, #0
    e90e:	ldr	r4, [r3, #0]
    e910:	lsl.w	r4, r4, lr
    e914:	orr.w	r4, r4, sl
    e918:	str.w	r4, [r0], #4
    e91c:	ldr.w	r4, [r3], #4
    e920:	cmp	r1, r3
    e922:	lsr.w	sl, r4, r9
    e926:	bhi.n	e90e <__lshift+0x76>
    e928:	subs	r3, r1, r5
    e92a:	subs	r3, #21
    e92c:	bic.w	r3, r3, #3
    e930:	adds	r3, #4
    e932:	add.w	r0, r5, #21
    e936:	cmp	r1, r0
    e938:	it	cc
    e93a:	movcc	r3, #4
    e93c:	cmp.w	sl, #0
    e940:	it	ne
    e942:	movne	r7, r6
    e944:	str.w	sl, [r2, r3]
    e948:	ldr.w	r3, [r8, #68]	; 0x44
    e94c:	ldr	r2, [r5, #4]
    e94e:	str.w	r7, [ip, #16]
    e952:	ldr.w	r1, [r3, r2, lsl #2]
    e956:	str	r1, [r5, #0]
    e958:	mov	r0, ip
    e95a:	str.w	r5, [r3, r2, lsl #2]
    e95e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e962:	subs	r2, #4
    e964:	ldr.w	r0, [r3], #4
    e968:	str.w	r0, [r2, #4]!
    e96c:	cmp	r1, r3
    e96e:	bhi.n	e964 <__lshift+0xcc>
    e970:	b.n	e948 <__lshift+0xb0>
    e972:	ldr	r3, [pc, #12]	; (e980 <__lshift+0xe8>)
    e974:	ldr	r0, [pc, #12]	; (e984 <__lshift+0xec>)
    e976:	mov	r2, ip
    e978:	mov.w	r1, #478	; 0x1de
    e97c:	bl	10a20 <__assert_func>
    e980:	.word	0x20000c6c
    e984:	.word	0x20000c80

0000e988 <__mcmp>:
    e988:	ldr	r3, [r1, #16]
    e98a:	mov	ip, r0
    e98c:	ldr	r0, [r0, #16]
    e98e:	subs	r0, r0, r3
    e990:	bne.n	e9c0 <__mcmp+0x38>
    e992:	add.w	ip, ip, #20
    e996:	adds	r1, #20
    e998:	add.w	r2, ip, r3, lsl #2
    e99c:	push	{r4}
    e99e:	add.w	r3, r1, r3, lsl #2
    e9a2:	b.n	e9a8 <__mcmp+0x20>
    e9a4:	cmp	ip, r2
    e9a6:	bcs.n	e9ba <__mcmp+0x32>
    e9a8:	ldr.w	r4, [r2, #-4]!
    e9ac:	ldr.w	r1, [r3, #-4]!
    e9b0:	cmp	r4, r1
    e9b2:	beq.n	e9a4 <__mcmp+0x1c>
    e9b4:	bcs.n	e9c2 <__mcmp+0x3a>
    e9b6:	mov.w	r0, #4294967295
    e9ba:	ldr.w	r4, [sp], #4
    e9be:	bx	lr
    e9c0:	bx	lr
    e9c2:	movs	r0, #1
    e9c4:	ldr.w	r4, [sp], #4
    e9c8:	bx	lr
    e9ca:	nop

0000e9cc <__mdiff>:
    e9cc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9d0:	ldr	r7, [r1, #16]
    e9d2:	ldr	r3, [r2, #16]
    e9d4:	subs	r7, r7, r3
    e9d6:	cmp	r7, #0
    e9d8:	mov	r6, r1
    e9da:	mov	r8, r2
    e9dc:	bne.n	eade <__mdiff+0x112>
    e9de:	add.w	r5, r1, #20
    e9e2:	adds	r2, #20
    e9e4:	add.w	r2, r2, r3, lsl #2
    e9e8:	add.w	r3, r5, r3, lsl #2
    e9ec:	b.n	e9f2 <__mdiff+0x26>
    e9ee:	cmp	r5, r3
    e9f0:	bcs.n	eae4 <__mdiff+0x118>
    e9f2:	ldr.w	r1, [r3, #-4]!
    e9f6:	ldr.w	r4, [r2, #-4]!
    e9fa:	cmp	r1, r4
    e9fc:	beq.n	e9ee <__mdiff+0x22>
    e9fe:	bcc.n	ead4 <__mdiff+0x108>
    ea00:	ldr	r1, [r6, #4]
    ea02:	bl	e47c <_Balloc>
    ea06:	mov	r9, r0
    ea08:	cmp	r0, #0
    ea0a:	beq.n	eafc <__mdiff+0x130>
    ea0c:	ldr	r5, [r6, #16]
    ea0e:	ldr.w	r2, [r8, #16]
    ea12:	str	r7, [r0, #12]
    ea14:	add.w	lr, r8, #20
    ea18:	add.w	r0, r6, #20
    ea1c:	add.w	sl, r9, #20
    ea20:	add.w	r1, r6, #16
    ea24:	add.w	r2, lr, r2, lsl #2
    ea28:	add.w	r7, r0, r5, lsl #2
    ea2c:	mov	r6, sl
    ea2e:	mov.w	ip, #0
    ea32:	ldr.w	r4, [lr], #4
    ea36:	ldr.w	fp, [r1, #4]!
    ea3a:	uxth	r3, r4
    ea3c:	uxtah	ip, ip, fp
    ea40:	sub.w	r3, ip, r3
    ea44:	mov.w	ip, r4, lsr #16
    ea48:	rsb	ip, ip, fp, lsr #16
    ea4c:	add.w	ip, ip, r3, asr #16
    ea50:	uxth	r3, r3
    ea52:	orr.w	r3, r3, ip, lsl #16
    ea56:	cmp	r2, lr
    ea58:	str.w	r3, [r6], #4
    ea5c:	mov.w	ip, ip, asr #16
    ea60:	bhi.n	ea32 <__mdiff+0x66>
    ea62:	sub.w	r1, r2, r8
    ea66:	subs	r1, #21
    ea68:	add.w	r8, r8, #21
    ea6c:	cmp	r2, r8
    ea6e:	bic.w	r4, r1, #3
    ea72:	add.w	r4, r4, #4
    ea76:	it	cc
    ea78:	movcc	r4, #4
    ea7a:	add	r0, r4
    ea7c:	bic.w	r2, r1, #3
    ea80:	it	cc
    ea82:	movcc	r2, #0
    ea84:	cmp	r7, r0
    ea86:	add	r2, sl
    ea88:	add	r4, sl
    ea8a:	bls.n	eabe <__mdiff+0xf2>
    ea8c:	mov	r6, r4
    ea8e:	mov	r1, r0
    ea90:	ldr.w	r3, [r1], #4
    ea94:	uxtah	ip, ip, r3
    ea98:	mov.w	r2, ip, asr #16
    ea9c:	add.w	r2, r2, r3, lsr #16
    eaa0:	uxth.w	ip, ip
    eaa4:	orr.w	r3, ip, r2, lsl #16
    eaa8:	cmp	r7, r1
    eaaa:	str.w	r3, [r6], #4
    eaae:	mov.w	ip, r2, asr #16
    eab2:	bhi.n	ea90 <__mdiff+0xc4>
    eab4:	subs	r7, #1
    eab6:	subs	r7, r7, r0
    eab8:	bic.w	r7, r7, #3
    eabc:	adds	r2, r4, r7
    eabe:	cbnz	r3, eaca <__mdiff+0xfe>
    eac0:	ldr.w	r3, [r2, #-4]!
    eac4:	subs	r5, #1
    eac6:	cmp	r3, #0
    eac8:	beq.n	eac0 <__mdiff+0xf4>
    eaca:	str.w	r5, [r9, #16]
    eace:	mov	r0, r9
    ead0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ead4:	mov	r3, r6
    ead6:	movs	r7, #1
    ead8:	mov	r6, r8
    eada:	mov	r8, r3
    eadc:	b.n	ea00 <__mdiff+0x34>
    eade:	blt.n	ead4 <__mdiff+0x108>
    eae0:	movs	r7, #0
    eae2:	b.n	ea00 <__mdiff+0x34>
    eae4:	movs	r1, #0
    eae6:	bl	e47c <_Balloc>
    eaea:	mov	r9, r0
    eaec:	cbz	r0, eb0a <__mdiff+0x13e>
    eaee:	movs	r2, #1
    eaf0:	movs	r3, #0
    eaf2:	strd	r2, r3, [r9, #16]
    eaf6:	mov	r0, r9
    eaf8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eafc:	ldr	r3, [pc, #24]	; (eb18 <__mdiff+0x14c>)
    eafe:	ldr	r0, [pc, #28]	; (eb1c <__mdiff+0x150>)
    eb00:	mov	r2, r9
    eb02:	movw	r1, #581	; 0x245
    eb06:	bl	10a20 <__assert_func>
    eb0a:	ldr	r3, [pc, #12]	; (eb18 <__mdiff+0x14c>)
    eb0c:	ldr	r0, [pc, #12]	; (eb1c <__mdiff+0x150>)
    eb0e:	mov	r2, r9
    eb10:	movw	r1, #567	; 0x237
    eb14:	bl	10a20 <__assert_func>
    eb18:	.word	0x20000c6c
    eb1c:	.word	0x20000c80

0000eb20 <__d2b>:
    eb20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    eb24:	mov	r8, r1
    eb26:	sub	sp, #12
    eb28:	movs	r1, #1
    eb2a:	vmov	r6, r7, d0
    eb2e:	mov	r5, r2
    eb30:	bl	e47c <_Balloc>
    eb34:	mov	r4, r0
    eb36:	cmp	r0, #0
    eb38:	beq.n	ebde <__d2b+0xbe>
    eb3a:	ubfx	r9, r7, #20, #11
    eb3e:	ubfx	r3, r7, #0, #20
    eb42:	cmp.w	r9, #0
    eb46:	beq.n	eb4c <__d2b+0x2c>
    eb48:	orr.w	r3, r3, #1048576	; 0x100000
    eb4c:	cmp	r6, #0
    eb4e:	str	r3, [sp, #4]
    eb50:	bne.n	eb84 <__d2b+0x64>
    eb52:	add	r0, sp, #4
    eb54:	bl	e5c0 <__lo0bits>
    eb58:	ldr	r2, [sp, #4]
    eb5a:	str	r2, [r4, #20]
    eb5c:	movs	r2, #1
    eb5e:	add.w	r3, r0, #32
    eb62:	str	r2, [r4, #16]
    eb64:	cmp.w	r9, #0
    eb68:	beq.n	ebb6 <__d2b+0x96>
    eb6a:	subw	r9, r9, #1075	; 0x433
    eb6e:	add.w	r2, r9, r3
    eb72:	mov	r0, r4
    eb74:	rsb	r3, r3, #53	; 0x35
    eb78:	str.w	r2, [r8]
    eb7c:	str	r3, [r5, #0]
    eb7e:	add	sp, #12
    eb80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    eb84:	mov	r0, sp
    eb86:	str	r6, [sp, #0]
    eb88:	bl	e5c0 <__lo0bits>
    eb8c:	mov	r3, r0
    eb8e:	cbz	r0, ebd6 <__d2b+0xb6>
    eb90:	ldrd	r0, r2, [sp]
    eb94:	rsb	r1, r3, #32
    eb98:	lsl.w	r1, r2, r1
    eb9c:	orrs	r1, r0
    eb9e:	lsrs	r2, r3
    eba0:	str	r1, [r4, #20]
    eba2:	str	r2, [sp, #4]
    eba4:	cmp	r2, #0
    eba6:	str	r2, [r4, #24]
    eba8:	ite	ne
    ebaa:	movne	r2, #2
    ebac:	moveq	r2, #1
    ebae:	str	r2, [r4, #16]
    ebb0:	cmp.w	r9, #0
    ebb4:	bne.n	eb6a <__d2b+0x4a>
    ebb6:	subw	r3, r3, #1074	; 0x432
    ebba:	str.w	r3, [r8]
    ebbe:	add.w	r3, r4, r2, lsl #2
    ebc2:	ldr	r0, [r3, #16]
    ebc4:	bl	e580 <__hi0bits>
    ebc8:	rsb	r3, r0, r2, lsl #5
    ebcc:	mov	r0, r4
    ebce:	str	r3, [r5, #0]
    ebd0:	add	sp, #12
    ebd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ebd6:	ldr	r2, [sp, #0]
    ebd8:	str	r2, [r4, #20]
    ebda:	ldr	r2, [sp, #4]
    ebdc:	b.n	eba4 <__d2b+0x84>
    ebde:	ldr	r3, [pc, #12]	; (ebec <__d2b+0xcc>)
    ebe0:	ldr	r0, [pc, #12]	; (ebf0 <__d2b+0xd0>)
    ebe2:	mov	r2, r4
    ebe4:	movw	r1, #783	; 0x30f
    ebe8:	bl	10a20 <__assert_func>
    ebec:	.word	0x20000c6c
    ebf0:	.word	0x20000c80

0000ebf4 <__ascii_wctomb>:
    ebf4:	cbz	r1, ec0a <__ascii_wctomb+0x16>
    ebf6:	cmp	r2, #255	; 0xff
    ebf8:	bhi.n	ec00 <__ascii_wctomb+0xc>
    ebfa:	strb	r2, [r1, #0]
    ebfc:	movs	r0, #1
    ebfe:	bx	lr
    ec00:	movs	r3, #138	; 0x8a
    ec02:	str	r3, [r0, #0]
    ec04:	mov.w	r0, #4294967295
    ec08:	bx	lr
    ec0a:	mov	r0, r1
    ec0c:	bx	lr
    ec0e:	nop

0000ec10 <_svfprintf_r>:
    ec10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec14:	vpush	{d8-d11}
    ec18:	sub	sp, #324	; 0x144
    ec1a:	mov	r4, r1
    ec1c:	vmov	s22, r1
    ec20:	mov	r8, r2
    ec22:	str	r3, [sp, #32]
    ec24:	mov	fp, r0
    ec26:	bl	109a0 <_localeconv_r>
    ec2a:	ldr	r3, [r0, #0]
    ec2c:	str	r3, [sp, #72]	; 0x48
    ec2e:	mov	r0, r3
    ec30:	bl	e040 <strlen>
    ec34:	add	r7, sp, #128	; 0x80
    ec36:	str	r0, [sp, #64]	; 0x40
    ec38:	movs	r2, #8
    ec3a:	movs	r1, #0
    ec3c:	mov	r0, r7
    ec3e:	bl	dcd0 <memset>
    ec42:	ldrh	r3, [r4, #12]
    ec44:	lsls	r3, r3, #24
    ec46:	bpl.n	ec50 <_svfprintf_r+0x40>
    ec48:	ldr	r3, [r4, #16]
    ec4a:	cmp	r3, #0
    ec4c:	beq.w	fafa <_svfprintf_r+0xeea>
    ec50:	movs	r3, #0
    ec52:	vldr	d8, [pc, #524]	; ee60 <_svfprintf_r+0x250>
    ec56:	vldr	d9, [pc, #528]	; ee68 <_svfprintf_r+0x258>
    ec5a:	strd	r3, r3, [sp, #148]	; 0x94
    ec5e:	strd	r3, r3, [sp, #76]	; 0x4c
    ec62:	strd	r3, r3, [sp, #84]	; 0x54
    ec66:	add	r2, sp, #156	; 0x9c
    ec68:	str	r3, [sp, #56]	; 0x38
    ec6a:	str	r2, [sp, #144]	; 0x90
    ec6c:	mov	sl, r2
    ec6e:	str	r3, [sp, #68]	; 0x44
    ec70:	str	r3, [sp, #16]
    ec72:	mov	r4, r8
    ec74:	mov	r9, r4
    ec76:	ldr	r3, [pc, #504]	; (ee70 <_svfprintf_r+0x260>)
    ec78:	ldr.w	r5, [r3, #228]	; 0xe4
    ec7c:	bl	de64 <__locale_mb_cur_max>
    ec80:	mov	r2, r9
    ec82:	mov	r3, r0
    ec84:	add	r1, sp, #112	; 0x70
    ec86:	str	r7, [sp, #0]
    ec88:	mov	r0, fp
    ec8a:	blx	r5
    ec8c:	cmp	r0, #0
    ec8e:	beq.w	edf2 <_svfprintf_r+0x1e2>
    ec92:	blt.w	ede2 <_svfprintf_r+0x1d2>
    ec96:	ldr	r2, [sp, #112]	; 0x70
    ec98:	cmp	r2, #37	; 0x25
    ec9a:	mov	r3, r0
    ec9c:	beq.n	eca2 <_svfprintf_r+0x92>
    ec9e:	add	r9, r3
    eca0:	b.n	ec76 <_svfprintf_r+0x66>
    eca2:	subs.w	r5, r9, r4
    eca6:	mov	r6, r0
    eca8:	bne.w	edfa <_svfprintf_r+0x1ea>
    ecac:	movs	r3, #0
    ecae:	mov.w	r2, #4294967295
    ecb2:	strb.w	r3, [sp, #103]	; 0x67
    ecb6:	mov	r8, r3
    ecb8:	str	r3, [sp, #24]
    ecba:	add.w	r9, r9, #1
    ecbe:	ldrb.w	r3, [r9]
    ecc2:	str	r2, [sp, #12]
    ecc4:	movs	r5, #43	; 0x2b
    ecc6:	movs	r6, #32
    ecc8:	add.w	r9, r9, #1
    eccc:	sub.w	r2, r3, #32
    ecd0:	cmp	r2, #90	; 0x5a
    ecd2:	bhi.w	ee74 <_svfprintf_r+0x264>
    ecd6:	tbh	[pc, r2, lsl #1]
    ecda:	.short	0x02e8
    ecdc:	.word	0x00cd00cd
    ece0:	.word	0x00cd02e3
    ece4:	.word	0x00cd00cd
    ece8:	.word	0x00cd006a
    ecec:	.word	0x020500cd
    ecf0:	.word	0x00cd0284
    ecf4:	.word	0x02c90210
    ecf8:	.word	0x02bd00cd
    ecfc:	.word	0x005b005b
    ed00:	.word	0x005b005b
    ed04:	.word	0x005b005b
    ed08:	.word	0x005b005b
    ed0c:	.word	0x00cd005b
    ed10:	.word	0x00cd00cd
    ed14:	.word	0x00cd00cd
    ed18:	.word	0x00cd00cd
    ed1c:	.word	0x00cd0153
    ed20:	.word	0x021a0183
    ed24:	.word	0x01530153
    ed28:	.word	0x00cd0153
    ed2c:	.word	0x00cd00cd
    ed30:	.word	0x021500cd
    ed34:	.word	0x00cd00cd
    ed38:	.word	0x00cd0296
    ed3c:	.word	0x00cd00cd
    ed40:	.word	0x00cd01ab
    ed44:	.word	0x00cd02aa
    ed48:	.word	0x06e300cd
    ed4c:	.word	0x00cd00cd
    ed50:	.word	0x00cd00cd
    ed54:	.word	0x00cd00cd
    ed58:	.word	0x00cd00cd
    ed5c:	.word	0x00cd0153
    ed60:	.word	0x01de0183
    ed64:	.word	0x01530153
    ed68:	.word	0x02770153
    ed6c:	.word	0x007f01de
    ed70:	.word	0x028900cd
    ed74:	.word	0x025f00cd
    ed78:	.word	0x022f06e0
    ed7c:	.word	0x00cd007f
    ed80:	.word	0x007c01ab
    ed84:	.word	0x00cd06b8
    ed88:	.word	0x06bd00cd
    ed8c:	.word	0x007c00cd
    ed90:	sub.w	r2, r3, #48	; 0x30
    ed94:	movs	r1, #0
    ed96:	ldrb.w	r3, [r9], #1
    ed9a:	add.w	r1, r1, r1, lsl #2
    ed9e:	add.w	r1, r2, r1, lsl #1
    eda2:	sub.w	r2, r3, #48	; 0x30
    eda6:	cmp	r2, #9
    eda8:	bls.n	ed96 <_svfprintf_r+0x186>
    edaa:	str	r1, [sp, #24]
    edac:	b.n	eccc <_svfprintf_r+0xbc>
    edae:	mov	r0, fp
    edb0:	bl	109a0 <_localeconv_r>
    edb4:	ldr	r3, [r0, #4]
    edb6:	str	r3, [sp, #84]	; 0x54
    edb8:	mov	r0, r3
    edba:	bl	e040 <strlen>
    edbe:	str	r0, [sp, #88]	; 0x58
    edc0:	mov	r0, fp
    edc2:	bl	109a0 <_localeconv_r>
    edc6:	ldr	r3, [r0, #8]
    edc8:	str	r3, [sp, #76]	; 0x4c
    edca:	ldr	r3, [sp, #88]	; 0x58
    edcc:	cmp	r3, #0
    edce:	bne.w	fa2c <_svfprintf_r+0xe1c>
    edd2:	ldrb.w	r3, [r9]
    edd6:	b.n	ecc8 <_svfprintf_r+0xb8>
    edd8:	ldrb.w	r3, [r9]
    eddc:	orr.w	r8, r8, #32
    ede0:	b.n	ecc8 <_svfprintf_r+0xb8>
    ede2:	movs	r2, #8
    ede4:	movs	r1, #0
    ede6:	mov	r0, r7
    ede8:	bl	dcd0 <memset>
    edec:	movs	r3, #1
    edee:	add	r9, r3
    edf0:	b.n	ec76 <_svfprintf_r+0x66>
    edf2:	subs.w	r5, r9, r4
    edf6:	mov	r6, r0
    edf8:	beq.n	ee1e <_svfprintf_r+0x20e>
    edfa:	ldr	r3, [sp, #152]	; 0x98
    edfc:	add	r3, r5
    edfe:	str	r3, [sp, #152]	; 0x98
    ee00:	ldr	r3, [sp, #148]	; 0x94
    ee02:	adds	r3, #1
    ee04:	cmp	r3, #7
    ee06:	strd	r4, r5, [sl]
    ee0a:	str	r3, [sp, #148]	; 0x94
    ee0c:	bgt.n	ee48 <_svfprintf_r+0x238>
    ee0e:	add.w	sl, sl, #8
    ee12:	ldr	r3, [sp, #16]
    ee14:	add	r3, r5
    ee16:	str	r3, [sp, #16]
    ee18:	cmp	r6, #0
    ee1a:	bne.w	ecac <_svfprintf_r+0x9c>
    ee1e:	ldr	r3, [sp, #152]	; 0x98
    ee20:	cmp	r3, #0
    ee22:	bne.w	1023c <_svfprintf_r+0x162c>
    ee26:	vmov	r3, s22
    ee2a:	ldrsh.w	r3, [r3, #12]
    ee2e:	tst.w	r3, #64	; 0x40
    ee32:	ldr	r3, [sp, #16]
    ee34:	it	ne
    ee36:	movne.w	r3, #4294967295
    ee3a:	str	r3, [sp, #16]
    ee3c:	ldr	r0, [sp, #16]
    ee3e:	add	sp, #324	; 0x144
    ee40:	vpop	{d8-d11}
    ee44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee48:	vmov	r1, s22
    ee4c:	add	r2, sp, #144	; 0x90
    ee4e:	mov	r0, fp
    ee50:	bl	11978 <__ssprint_r>
    ee54:	cmp	r0, #0
    ee56:	bne.n	ee26 <_svfprintf_r+0x216>
    ee58:	add.w	sl, sp, #156	; 0x9c
    ee5c:	b.n	ee12 <_svfprintf_r+0x202>
    ee5e:	nop
	...
    ee68:	.word	0xffffffff
    ee6c:	.word	0x7fefffff
    ee70:	.word	0x20001484
    ee74:	str	r3, [sp, #44]	; 0x2c
    ee76:	cmp	r3, #0
    ee78:	beq.n	ee1e <_svfprintf_r+0x20e>
    ee7a:	movs	r1, #0
    ee7c:	strd	r1, r1, [sp, #48]	; 0x30
    ee80:	strb.w	r3, [sp, #220]	; 0xdc
    ee84:	movs	r3, #1
    ee86:	strb.w	r1, [sp, #103]	; 0x67
    ee8a:	str	r3, [sp, #8]
    ee8c:	str	r1, [sp, #28]
    ee8e:	str	r3, [sp, #20]
    ee90:	str	r1, [sp, #12]
    ee92:	str	r1, [sp, #60]	; 0x3c
    ee94:	add	r4, sp, #220	; 0xdc
    ee96:	ands.w	r3, r8, #2
    ee9a:	str	r3, [sp, #36]	; 0x24
    ee9c:	beq.n	eea4 <_svfprintf_r+0x294>
    ee9e:	ldr	r3, [sp, #8]
    eea0:	adds	r3, #2
    eea2:	str	r3, [sp, #8]
    eea4:	ands.w	r3, r8, #132	; 0x84
    eea8:	str	r3, [sp, #40]	; 0x28
    eeaa:	bne.n	eeb8 <_svfprintf_r+0x2a8>
    eeac:	ldr	r3, [sp, #24]
    eeae:	ldr	r2, [sp, #8]
    eeb0:	subs	r5, r3, r2
    eeb2:	cmp	r5, #0
    eeb4:	bgt.w	f58a <_svfprintf_r+0x97a>
    eeb8:	ldr	r2, [sp, #152]	; 0x98
    eeba:	cbz	r1, eee0 <_svfprintf_r+0x2d0>
    eebc:	ldr	r1, [sp, #148]	; 0x94
    eebe:	add.w	r0, sp, #103	; 0x67
    eec2:	adds	r1, #1
    eec4:	adds	r2, #1
    eec6:	str.w	r0, [sl]
    eeca:	cmp	r1, #7
    eecc:	mov.w	r0, #1
    eed0:	str	r2, [sp, #152]	; 0x98
    eed2:	str	r1, [sp, #148]	; 0x94
    eed4:	str.w	r0, [sl, #4]
    eed8:	bgt.w	f620 <_svfprintf_r+0xa10>
    eedc:	add.w	sl, sl, #8
    eee0:	ldr	r3, [sp, #36]	; 0x24
    eee2:	cbz	r3, ef06 <_svfprintf_r+0x2f6>
    eee4:	ldr	r3, [sp, #148]	; 0x94
    eee6:	add	r1, sp, #104	; 0x68
    eee8:	adds	r3, #1
    eeea:	adds	r2, #2
    eeec:	str.w	r1, [sl]
    eef0:	cmp	r3, #7
    eef2:	mov.w	r1, #2
    eef6:	str	r2, [sp, #152]	; 0x98
    eef8:	str	r3, [sp, #148]	; 0x94
    eefa:	str.w	r1, [sl, #4]
    eefe:	bgt.w	f648 <_svfprintf_r+0xa38>
    ef02:	add.w	sl, sl, #8
    ef06:	ldr	r3, [sp, #40]	; 0x28
    ef08:	cmp	r3, #128	; 0x80
    ef0a:	beq.w	f3e6 <_svfprintf_r+0x7d6>
    ef0e:	ldr	r3, [sp, #12]
    ef10:	ldr	r1, [sp, #20]
    ef12:	subs	r5, r3, r1
    ef14:	cmp	r5, #0
    ef16:	bgt.w	f464 <_svfprintf_r+0x854>
    ef1a:	tst.w	r8, #256	; 0x100
    ef1e:	bne.w	f33c <_svfprintf_r+0x72c>
    ef22:	ldr	r3, [sp, #20]
    ef24:	str.w	r3, [sl, #4]
    ef28:	add	r2, r3
    ef2a:	ldr	r3, [sp, #148]	; 0x94
    ef2c:	str.w	r4, [sl]
    ef30:	adds	r3, #1
    ef32:	cmp	r3, #7
    ef34:	str	r2, [sp, #152]	; 0x98
    ef36:	str	r3, [sp, #148]	; 0x94
    ef38:	bgt.w	f572 <_svfprintf_r+0x962>
    ef3c:	add.w	sl, sl, #8
    ef40:	tst.w	r8, #4
    ef44:	beq.n	ef52 <_svfprintf_r+0x342>
    ef46:	ldr	r3, [sp, #24]
    ef48:	ldr	r1, [sp, #8]
    ef4a:	subs	r4, r3, r1
    ef4c:	cmp	r4, #0
    ef4e:	bgt.w	f662 <_svfprintf_r+0xa52>
    ef52:	ldr	r3, [sp, #16]
    ef54:	ldr	r1, [sp, #24]
    ef56:	ldr	r0, [sp, #8]
    ef58:	cmp	r1, r0
    ef5a:	ite	ge
    ef5c:	addge	r3, r3, r1
    ef5e:	addlt	r3, r3, r0
    ef60:	str	r3, [sp, #16]
    ef62:	cmp	r2, #0
    ef64:	bne.w	f4c8 <_svfprintf_r+0x8b8>
    ef68:	movs	r3, #0
    ef6a:	str	r3, [sp, #148]	; 0x94
    ef6c:	ldr	r3, [sp, #28]
    ef6e:	cbz	r3, ef78 <_svfprintf_r+0x368>
    ef70:	ldr	r1, [sp, #28]
    ef72:	mov	r0, fp
    ef74:	bl	e244 <_free_r>
    ef78:	add.w	sl, sp, #156	; 0x9c
    ef7c:	mov	r4, r9
    ef7e:	b.n	ec74 <_svfprintf_r+0x64>
    ef80:	str	r3, [sp, #44]	; 0x2c
    ef82:	ldr	r3, [sp, #32]
    ef84:	adds	r3, #7
    ef86:	bic.w	r3, r3, #7
    ef8a:	vldmia	r3!, {d8}
    ef8e:	vabs.f64	d7, d8
    ef92:	vcmp.f64	d7, d9
    ef96:	vmrs	APSR_nzcv, fpscr
    ef9a:	str	r3, [sp, #32]
    ef9c:	ble.w	f972 <_svfprintf_r+0xd62>
    efa0:	vcmpe.f64	d8, #0.0
    efa4:	vmrs	APSR_nzcv, fpscr
    efa8:	bmi.w	1005e <_svfprintf_r+0x144e>
    efac:	ldrb.w	r1, [sp, #103]	; 0x67
    efb0:	ldr	r4, [pc, #684]	; (f260 <_svfprintf_r+0x650>)
    efb2:	ldr	r3, [pc, #688]	; (f264 <_svfprintf_r+0x654>)
    efb4:	bic.w	r8, r8, #128	; 0x80
    efb8:	ldr	r2, [sp, #44]	; 0x2c
    efba:	cmp	r2, #71	; 0x47
    efbc:	it	gt
    efbe:	movgt	r4, r3
    efc0:	movs	r3, #0
    efc2:	strd	r3, r3, [sp, #48]	; 0x30
    efc6:	movs	r2, #3
    efc8:	str	r3, [sp, #28]
    efca:	str	r2, [sp, #8]
    efcc:	str	r2, [sp, #20]
    efce:	str	r3, [sp, #12]
    efd0:	str	r3, [sp, #60]	; 0x3c
    efd2:	cmp	r1, #0
    efd4:	beq.w	ee96 <_svfprintf_r+0x286>
    efd8:	ldr	r3, [sp, #8]
    efda:	adds	r3, #1
    efdc:	str	r3, [sp, #8]
    efde:	b.n	ee96 <_svfprintf_r+0x286>
    efe0:	cmp	r3, #67	; 0x43
    efe2:	str	r3, [sp, #44]	; 0x2c
    efe4:	beq.n	efee <_svfprintf_r+0x3de>
    efe6:	tst.w	r8, #16
    efea:	beq.w	faa8 <_svfprintf_r+0xe98>
    efee:	ldr	r5, [sp, #32]
    eff0:	movs	r2, #8
    eff2:	movs	r1, #0
    eff4:	add	r0, sp, #136	; 0x88
    eff6:	add	r4, sp, #220	; 0xdc
    eff8:	bl	dcd0 <memset>
    effc:	add	r3, sp, #136	; 0x88
    effe:	ldr.w	r2, [r5], #4
    f002:	mov	r1, r4
    f004:	mov	r0, fp
    f006:	bl	118ec <_wcrtomb_r>
    f00a:	mov	r3, r0
    f00c:	adds	r3, #1
    f00e:	str	r0, [sp, #20]
    f010:	beq.w	105f0 <_svfprintf_r+0x19e0>
    f014:	ldr	r3, [sp, #20]
    f016:	str	r5, [sp, #32]
    f018:	bic.w	r3, r3, r3, asr #31
    f01c:	str	r3, [sp, #8]
    f01e:	movs	r1, #0
    f020:	strd	r1, r1, [sp, #48]	; 0x30
    f024:	strb.w	r1, [sp, #103]	; 0x67
    f028:	str	r1, [sp, #28]
    f02a:	str	r1, [sp, #12]
    f02c:	str	r1, [sp, #60]	; 0x3c
    f02e:	b.n	ee96 <_svfprintf_r+0x286>
    f030:	str	r3, [sp, #44]	; 0x2c
    f032:	ldr	r3, [sp, #32]
    f034:	mov	r2, r3
    f036:	movs	r3, #0
    f038:	strb.w	r3, [sp, #103]	; 0x67
    f03c:	mov	r3, r2
    f03e:	ldr.w	r4, [r3], #4
    f042:	str	r3, [sp, #32]
    f044:	cmp	r4, #0
    f046:	beq.w	fada <_svfprintf_r+0xeca>
    f04a:	ldr	r3, [sp, #44]	; 0x2c
    f04c:	cmp	r3, #83	; 0x53
    f04e:	beq.w	fe2a <_svfprintf_r+0x121a>
    f052:	ands.w	r3, r8, #16
    f056:	str	r3, [sp, #48]	; 0x30
    f058:	bne.w	fe2a <_svfprintf_r+0x121a>
    f05c:	ldr	r3, [sp, #12]
    f05e:	adds	r5, r3, #1
    f060:	beq.w	1022e <_svfprintf_r+0x161e>
    f064:	ldr	r1, [sp, #48]	; 0x30
    f066:	mov	r2, r3
    f068:	mov	r0, r4
    f06a:	bl	dfa0 <memchr>
    f06e:	str	r0, [sp, #28]
    f070:	cmp	r0, #0
    f072:	beq.w	106c6 <_svfprintf_r+0x1ab6>
    f076:	ldr	r3, [sp, #28]
    f078:	subs	r2, r3, r4
    f07a:	str	r2, [sp, #20]
    f07c:	ldr	r3, [sp, #48]	; 0x30
    f07e:	str	r3, [sp, #12]
    f080:	bic.w	r2, r2, r2, asr #31
    f084:	str	r3, [sp, #60]	; 0x3c
    f086:	str	r3, [sp, #52]	; 0x34
    f088:	str	r3, [sp, #28]
    f08a:	movs	r3, #115	; 0x73
    f08c:	ldrb.w	r1, [sp, #103]	; 0x67
    f090:	str	r2, [sp, #8]
    f092:	str	r3, [sp, #44]	; 0x2c
    f094:	b.n	efd2 <_svfprintf_r+0x3c2>
    f096:	tst.w	r8, #32
    f09a:	str	r3, [sp, #44]	; 0x2c
    f09c:	ldr	r3, [sp, #32]
    f09e:	beq.n	f11c <_svfprintf_r+0x50c>
    f0a0:	adds	r3, #7
    f0a2:	bic.w	r3, r3, #7
    f0a6:	mov	r2, r3
    f0a8:	mov	r1, r2
    f0aa:	ldr	r3, [r3, #4]
    f0ac:	ldr.w	r2, [r1], #8
    f0b0:	str	r1, [sp, #32]
    f0b2:	mov	r1, r3
    f0b4:	cmp	r3, #0
    f0b6:	blt.w	f8d2 <_svfprintf_r+0xcc2>
    f0ba:	ldr	r3, [sp, #12]
    f0bc:	adds	r3, #1
    f0be:	beq.w	f5fe <_svfprintf_r+0x9ee>
    f0c2:	bic.w	r0, r8, #128	; 0x80
    f0c6:	orrs.w	r3, r2, r1
    f0ca:	str	r0, [sp, #8]
    f0cc:	bne.w	f602 <_svfprintf_r+0x9f2>
    f0d0:	ldr	r3, [sp, #12]
    f0d2:	cmp	r3, #0
    f0d4:	bne.w	f60c <_svfprintf_r+0x9fc>
    f0d8:	mov	r8, r0
    f0da:	movs	r3, #0
    f0dc:	str	r3, [sp, #12]
    f0de:	str	r3, [sp, #20]
    f0e0:	add	r4, sp, #320	; 0x140
    f0e2:	b.n	f2f2 <_svfprintf_r+0x6e2>
    f0e4:	ldr	r3, [sp, #32]
    f0e6:	ldr.w	r2, [r3], #4
    f0ea:	str	r2, [sp, #24]
    f0ec:	cmp	r2, #0
    f0ee:	bge.w	f924 <_svfprintf_r+0xd14>
    f0f2:	ldr	r2, [sp, #24]
    f0f4:	str	r3, [sp, #32]
    f0f6:	negs	r2, r2
    f0f8:	str	r2, [sp, #24]
    f0fa:	ldrb.w	r3, [r9]
    f0fe:	orr.w	r8, r8, #4
    f102:	b.n	ecc8 <_svfprintf_r+0xb8>
    f104:	ldrb.w	r3, [r9]
    f108:	orr.w	r8, r8, #8
    f10c:	b.n	ecc8 <_svfprintf_r+0xb8>
    f10e:	orr.w	r8, r8, #16
    f112:	tst.w	r8, #32
    f116:	str	r3, [sp, #44]	; 0x2c
    f118:	ldr	r3, [sp, #32]
    f11a:	bne.n	f0a0 <_svfprintf_r+0x490>
    f11c:	tst.w	r8, #16
    f120:	bne.w	f93a <_svfprintf_r+0xd2a>
    f124:	tst.w	r8, #64	; 0x40
    f128:	beq.w	f932 <_svfprintf_r+0xd22>
    f12c:	ldrsh.w	r2, [r3], #4
    f130:	str	r3, [sp, #32]
    f132:	asrs	r1, r2, #31
    f134:	mov	r3, r1
    f136:	b.n	f0b4 <_svfprintf_r+0x4a4>
    f138:	ldr	r3, [sp, #32]
    f13a:	orr.w	r2, r8, #2
    f13e:	str	r2, [sp, #8]
    f140:	ldr.w	r2, [r3], #4
    f144:	str	r3, [sp, #32]
    f146:	movw	r3, #30768	; 0x7830
    f14a:	strh.w	r3, [sp, #104]	; 0x68
    f14e:	movs	r0, #120	; 0x78
    f150:	ldr	r3, [pc, #276]	; (f268 <_svfprintf_r+0x658>)
    f152:	str	r3, [sp, #68]	; 0x44
    f154:	movs	r1, #0
    f156:	movs	r3, #2
    f158:	str	r0, [sp, #44]	; 0x2c
    f15a:	movs	r0, #0
    f15c:	ldr	r4, [sp, #12]
    f15e:	strb.w	r0, [sp, #103]	; 0x67
    f162:	adds	r0, r4, #1
    f164:	beq.w	f2c2 <_svfprintf_r+0x6b2>
    f168:	ldr	r0, [sp, #8]
    f16a:	bic.w	r8, r0, #128	; 0x80
    f16e:	orrs.w	r0, r2, r1
    f172:	bne.w	f2be <_svfprintf_r+0x6ae>
    f176:	cmp	r4, #0
    f178:	bne.w	fed8 <_svfprintf_r+0x12c8>
    f17c:	cmp	r3, #0
    f17e:	bne.n	f0da <_svfprintf_r+0x4ca>
    f180:	ldr	r3, [sp, #8]
    f182:	ands.w	r3, r3, #1
    f186:	str	r3, [sp, #20]
    f188:	beq.w	f92e <_svfprintf_r+0xd1e>
    f18c:	movs	r3, #48	; 0x30
    f18e:	strb.w	r3, [sp, #319]	; 0x13f
    f192:	addw	r4, sp, #319	; 0x13f
    f196:	b.n	f2f2 <_svfprintf_r+0x6e2>
    f198:	tst.w	r8, #32
    f19c:	bne.w	f948 <_svfprintf_r+0xd38>
    f1a0:	tst.w	r8, #16
    f1a4:	bne.w	fee6 <_svfprintf_r+0x12d6>
    f1a8:	tst.w	r8, #64	; 0x40
    f1ac:	bne.w	100de <_svfprintf_r+0x14ce>
    f1b0:	tst.w	r8, #512	; 0x200
    f1b4:	beq.w	fee6 <_svfprintf_r+0x12d6>
    f1b8:	ldr	r3, [sp, #32]
    f1ba:	ldr	r1, [sp, #16]
    f1bc:	ldr.w	r2, [r3], #4
    f1c0:	str	r3, [sp, #32]
    f1c2:	strb	r1, [r2, #0]
    f1c4:	mov	r4, r9
    f1c6:	b.n	ec74 <_svfprintf_r+0x64>
    f1c8:	ldrb.w	r3, [r9]
    f1cc:	cmp	r3, #104	; 0x68
    f1ce:	ittte	eq
    f1d0:	ldrbeq.w	r3, [r9, #1]
    f1d4:	orreq.w	r8, r8, #512	; 0x200
    f1d8:	addeq.w	r9, r9, #1
    f1dc:	orrne.w	r8, r8, #64	; 0x40
    f1e0:	b.n	ecc8 <_svfprintf_r+0xb8>
    f1e2:	ldrb.w	r3, [r9]
    f1e6:	strb.w	r5, [sp, #103]	; 0x67
    f1ea:	b.n	ecc8 <_svfprintf_r+0xb8>
    f1ec:	ldrb.w	r3, [r9]
    f1f0:	cmp	r3, #108	; 0x6c
    f1f2:	ittte	eq
    f1f4:	ldrbeq.w	r3, [r9, #1]
    f1f8:	orreq.w	r8, r8, #32
    f1fc:	addeq.w	r9, r9, #1
    f200:	orrne.w	r8, r8, #16
    f204:	b.n	ecc8 <_svfprintf_r+0xb8>
    f206:	str	r3, [sp, #44]	; 0x2c
    f208:	orr.w	r8, r8, #16
    f20c:	ands.w	r1, r8, #32
    f210:	beq.w	f8b6 <_svfprintf_r+0xca6>
    f214:	ldr	r3, [sp, #32]
    f216:	adds	r3, #7
    f218:	bic.w	r3, r3, #7
    f21c:	ldr	r1, [r3, #4]
    f21e:	ldr.w	r2, [r3], #8
    f222:	str	r3, [sp, #32]
    f224:	bic.w	r3, r8, #1024	; 0x400
    f228:	str	r3, [sp, #8]
    f22a:	movs	r3, #0
    f22c:	b.n	f15a <_svfprintf_r+0x54a>
    f22e:	str	r3, [sp, #44]	; 0x2c
    f230:	orr.w	r3, r8, #16
    f234:	str	r3, [sp, #8]
    f236:	ldr	r3, [sp, #8]
    f238:	ands.w	r1, r3, #32
    f23c:	beq.w	f892 <_svfprintf_r+0xc82>
    f240:	ldr	r3, [sp, #32]
    f242:	adds	r3, #7
    f244:	bic.w	r3, r3, #7
    f248:	ldr	r1, [r3, #4]
    f24a:	ldr.w	r2, [r3], #8
    f24e:	str	r3, [sp, #32]
    f250:	movs	r3, #1
    f252:	b.n	f15a <_svfprintf_r+0x54a>
    f254:	ldrb.w	r3, [r9]
    f258:	orr.w	r8, r8, #128	; 0x80
    f25c:	b.n	ecc8 <_svfprintf_r+0xb8>
    f25e:	nop
    f260:	.word	0x20000e4c
    f264:	.word	0x20000e50
    f268:	.word	0x20000e5c
    f26c:	mov	r1, r9
    f26e:	ldrb.w	r3, [r1], #1
    f272:	cmp	r3, #42	; 0x2a
    f274:	beq.w	1070a <_svfprintf_r+0x1afa>
    f278:	sub.w	r2, r3, #48	; 0x30
    f27c:	cmp	r2, #9
    f27e:	mov	r9, r1
    f280:	it	ls
    f282:	movls	r1, #0
    f284:	bhi.w	10510 <_svfprintf_r+0x1900>
    f288:	ldrb.w	r3, [r9], #1
    f28c:	add.w	r1, r1, r1, lsl #2
    f290:	add.w	r1, r2, r1, lsl #1
    f294:	sub.w	r2, r3, #48	; 0x30
    f298:	cmp	r2, #9
    f29a:	bls.n	f288 <_svfprintf_r+0x678>
    f29c:	str	r1, [sp, #12]
    f29e:	b.n	eccc <_svfprintf_r+0xbc>
    f2a0:	ldrb.w	r3, [r9]
    f2a4:	orr.w	r8, r8, #1
    f2a8:	b.n	ecc8 <_svfprintf_r+0xb8>
    f2aa:	ldrb.w	r3, [sp, #103]	; 0x67
    f2ae:	cmp	r3, #0
    f2b0:	bne.w	edd2 <_svfprintf_r+0x1c2>
    f2b4:	ldrb.w	r3, [r9]
    f2b8:	strb.w	r6, [sp, #103]	; 0x67
    f2bc:	b.n	ecc8 <_svfprintf_r+0xb8>
    f2be:	str.w	r8, [sp, #8]
    f2c2:	cmp	r3, #1
    f2c4:	beq.w	f602 <_svfprintf_r+0x9f2>
    f2c8:	cmp	r3, #2
    f2ca:	add	r4, sp, #320	; 0x140
    f2cc:	bne.n	f310 <_svfprintf_r+0x700>
    f2ce:	ldr	r0, [sp, #68]	; 0x44
    f2d0:	and.w	r3, r2, #15
    f2d4:	lsrs	r2, r2, #4
    f2d6:	ldrb	r3, [r0, r3]
    f2d8:	strb.w	r3, [r4, #-1]!
    f2dc:	orr.w	r2, r2, r1, lsl #28
    f2e0:	lsrs	r1, r1, #4
    f2e2:	orrs.w	r3, r2, r1
    f2e6:	bne.n	f2d0 <_svfprintf_r+0x6c0>
    f2e8:	add	r3, sp, #320	; 0x140
    f2ea:	subs	r3, r3, r4
    f2ec:	ldr.w	r8, [sp, #8]
    f2f0:	str	r3, [sp, #20]
    f2f2:	ldr	r2, [sp, #20]
    f2f4:	ldr	r0, [sp, #12]
    f2f6:	ldrb.w	r1, [sp, #103]	; 0x67
    f2fa:	cmp	r2, r0
    f2fc:	mov.w	r3, #0
    f300:	it	lt
    f302:	movlt	r2, r0
    f304:	strd	r3, r3, [sp, #48]	; 0x30
    f308:	str	r3, [sp, #28]
    f30a:	str	r2, [sp, #8]
    f30c:	str	r3, [sp, #60]	; 0x3c
    f30e:	b.n	efd2 <_svfprintf_r+0x3c2>
    f310:	and.w	r3, r2, #7
    f314:	lsrs	r2, r2, #3
    f316:	orr.w	r2, r2, r1, lsl #29
    f31a:	lsrs	r1, r1, #3
    f31c:	adds	r3, #48	; 0x30
    f31e:	orrs.w	r5, r2, r1
    f322:	mov	r0, r4
    f324:	strb.w	r3, [r4, #-1]!
    f328:	bne.n	f310 <_svfprintf_r+0x700>
    f32a:	ldr	r2, [sp, #8]
    f32c:	lsls	r1, r2, #31
    f32e:	bmi.w	f7cc <_svfprintf_r+0xbbc>
    f332:	add	r3, sp, #320	; 0x140
    f334:	subs	r3, r3, r4
    f336:	mov	r8, r2
    f338:	str	r3, [sp, #20]
    f33a:	b.n	f2f2 <_svfprintf_r+0x6e2>
    f33c:	ldr	r3, [sp, #44]	; 0x2c
    f33e:	cmp	r3, #101	; 0x65
    f340:	ble.w	f4ec <_svfprintf_r+0x8dc>
    f344:	vcmp.f64	d8, #0.0
    f348:	vmrs	APSR_nzcv, fpscr
    f34c:	bne.w	f6d2 <_svfprintf_r+0xac2>
    f350:	ldr	r3, [sp, #148]	; 0x94
    f352:	ldr	r1, [pc, #744]	; (f63c <_svfprintf_r+0xa2c>)
    f354:	str.w	r1, [sl]
    f358:	adds	r3, #1
    f35a:	adds	r2, #1
    f35c:	movs	r1, #1
    f35e:	cmp	r3, #7
    f360:	str	r2, [sp, #152]	; 0x98
    f362:	str	r3, [sp, #148]	; 0x94
    f364:	str.w	r1, [sl, #4]
    f368:	bgt.w	fe0e <_svfprintf_r+0x11fe>
    f36c:	add.w	sl, sl, #8
    f370:	ldr	r3, [sp, #108]	; 0x6c
    f372:	ldr	r1, [sp, #56]	; 0x38
    f374:	cmp	r3, r1
    f376:	bge.w	f91a <_svfprintf_r+0xd0a>
    f37a:	ldr	r3, [sp, #64]	; 0x40
    f37c:	ldr	r1, [sp, #72]	; 0x48
    f37e:	add	r2, r3
    f380:	strd	r1, r3, [sl]
    f384:	ldr	r3, [sp, #148]	; 0x94
    f386:	str	r2, [sp, #152]	; 0x98
    f388:	adds	r3, #1
    f38a:	cmp	r3, #7
    f38c:	str	r3, [sp, #148]	; 0x94
    f38e:	bgt.w	fac0 <_svfprintf_r+0xeb0>
    f392:	add.w	sl, sl, #8
    f396:	ldr	r3, [sp, #56]	; 0x38
    f398:	subs	r4, r3, #1
    f39a:	cmp	r4, #0
    f39c:	ble.w	ef40 <_svfprintf_r+0x330>
    f3a0:	cmp	r4, #16
    f3a2:	ldr	r3, [sp, #148]	; 0x94
    f3a4:	ble.w	fe84 <_svfprintf_r+0x1274>
    f3a8:	vmov	r6, s22
    f3ac:	movs	r5, #16
    f3ae:	b.n	f3bc <_svfprintf_r+0x7ac>
    f3b0:	add.w	sl, sl, #8
    f3b4:	subs	r4, #16
    f3b6:	cmp	r4, #16
    f3b8:	ble.w	fe84 <_svfprintf_r+0x1274>
    f3bc:	adds	r3, #1
    f3be:	ldr	r1, [pc, #640]	; (f640 <_svfprintf_r+0xa30>)
    f3c0:	adds	r2, #16
    f3c2:	cmp	r3, #7
    f3c4:	strd	r1, r5, [sl]
    f3c8:	strd	r3, r2, [sp, #148]	; 0x94
    f3cc:	ble.n	f3b0 <_svfprintf_r+0x7a0>
    f3ce:	add	r2, sp, #144	; 0x90
    f3d0:	mov	r1, r6
    f3d2:	mov	r0, fp
    f3d4:	bl	11978 <__ssprint_r>
    f3d8:	cmp	r0, #0
    f3da:	bne.n	f4da <_svfprintf_r+0x8ca>
    f3dc:	ldrd	r3, r2, [sp, #148]	; 0x94
    f3e0:	add.w	sl, sp, #156	; 0x9c
    f3e4:	b.n	f3b4 <_svfprintf_r+0x7a4>
    f3e6:	ldr	r3, [sp, #24]
    f3e8:	ldr	r1, [sp, #8]
    f3ea:	subs	r5, r3, r1
    f3ec:	cmp	r5, #0
    f3ee:	ble.w	ef0e <_svfprintf_r+0x2fe>
    f3f2:	cmp	r5, #16
    f3f4:	ldr	r3, [sp, #148]	; 0x94
    f3f6:	ble.n	f43c <_svfprintf_r+0x82c>
    f3f8:	str	r4, [sp, #36]	; 0x24
    f3fa:	movs	r6, #16
    f3fc:	vmov	r4, s22
    f400:	b.n	f40c <_svfprintf_r+0x7fc>
    f402:	subs	r5, #16
    f404:	cmp	r5, #16
    f406:	add.w	sl, sl, #8
    f40a:	ble.n	f43a <_svfprintf_r+0x82a>
    f40c:	adds	r3, #1
    f40e:	ldr	r1, [pc, #560]	; (f640 <_svfprintf_r+0xa30>)
    f410:	adds	r2, #16
    f412:	cmp	r3, #7
    f414:	strd	r1, r6, [sl]
    f418:	strd	r3, r2, [sp, #148]	; 0x94
    f41c:	ble.n	f402 <_svfprintf_r+0x7f2>
    f41e:	add	r2, sp, #144	; 0x90
    f420:	mov	r1, r4
    f422:	mov	r0, fp
    f424:	add.w	sl, sp, #156	; 0x9c
    f428:	bl	11978 <__ssprint_r>
    f42c:	cmp	r0, #0
    f42e:	bne.n	f4da <_svfprintf_r+0x8ca>
    f430:	subs	r5, #16
    f432:	cmp	r5, #16
    f434:	ldrd	r3, r2, [sp, #148]	; 0x94
    f438:	bgt.n	f40c <_svfprintf_r+0x7fc>
    f43a:	ldr	r4, [sp, #36]	; 0x24
    f43c:	ldr	r1, [pc, #512]	; (f640 <_svfprintf_r+0xa30>)
    f43e:	str.w	r5, [sl, #4]
    f442:	adds	r3, #1
    f444:	add	r2, r5
    f446:	cmp	r3, #7
    f448:	strd	r3, r2, [sp, #148]	; 0x94
    f44c:	str.w	r1, [sl]
    f450:	bgt.w	fea0 <_svfprintf_r+0x1290>
    f454:	ldr	r3, [sp, #12]
    f456:	ldr	r1, [sp, #20]
    f458:	subs	r5, r3, r1
    f45a:	cmp	r5, #0
    f45c:	add.w	sl, sl, #8
    f460:	ble.w	ef1a <_svfprintf_r+0x30a>
    f464:	cmp	r5, #16
    f466:	ldr	r3, [sp, #148]	; 0x94
    f468:	ble.n	f4aa <_svfprintf_r+0x89a>
    f46a:	mov	r1, sl
    f46c:	movs	r6, #16
    f46e:	vmov	sl, s22
    f472:	b.n	f47e <_svfprintf_r+0x86e>
    f474:	subs	r5, #16
    f476:	cmp	r5, #16
    f478:	add.w	r1, r1, #8
    f47c:	ble.n	f4a8 <_svfprintf_r+0x898>
    f47e:	adds	r3, #1
    f480:	ldr	r0, [pc, #444]	; (f640 <_svfprintf_r+0xa30>)
    f482:	adds	r2, #16
    f484:	cmp	r3, #7
    f486:	strd	r0, r6, [r1]
    f48a:	strd	r3, r2, [sp, #148]	; 0x94
    f48e:	ble.n	f474 <_svfprintf_r+0x864>
    f490:	add	r2, sp, #144	; 0x90
    f492:	mov	r1, sl
    f494:	mov	r0, fp
    f496:	bl	11978 <__ssprint_r>
    f49a:	cbnz	r0, f4da <_svfprintf_r+0x8ca>
    f49c:	subs	r5, #16
    f49e:	cmp	r5, #16
    f4a0:	ldrd	r3, r2, [sp, #148]	; 0x94
    f4a4:	add	r1, sp, #156	; 0x9c
    f4a6:	bgt.n	f47e <_svfprintf_r+0x86e>
    f4a8:	mov	sl, r1
    f4aa:	adds	r3, #1
    f4ac:	ldr	r1, [pc, #400]	; (f640 <_svfprintf_r+0xa30>)
    f4ae:	str.w	r5, [sl, #4]
    f4b2:	add	r2, r5
    f4b4:	cmp	r3, #7
    f4b6:	strd	r3, r2, [sp, #148]	; 0x94
    f4ba:	str.w	r1, [sl]
    f4be:	bgt.w	f876 <_svfprintf_r+0xc66>
    f4c2:	add.w	sl, sl, #8
    f4c6:	b.n	ef1a <_svfprintf_r+0x30a>
    f4c8:	vmov	r1, s22
    f4cc:	add	r2, sp, #144	; 0x90
    f4ce:	mov	r0, fp
    f4d0:	bl	11978 <__ssprint_r>
    f4d4:	cmp	r0, #0
    f4d6:	beq.w	ef68 <_svfprintf_r+0x358>
    f4da:	ldr	r3, [sp, #28]
    f4dc:	cmp	r3, #0
    f4de:	beq.w	ee26 <_svfprintf_r+0x216>
    f4e2:	ldr	r1, [sp, #28]
    f4e4:	mov	r0, fp
    f4e6:	bl	e244 <_free_r>
    f4ea:	b.n	ee26 <_svfprintf_r+0x216>
    f4ec:	ldr	r3, [sp, #56]	; 0x38
    f4ee:	cmp	r3, #1
    f4f0:	ble.w	f7e8 <_svfprintf_r+0xbd8>
    f4f4:	ldr	r3, [sp, #148]	; 0x94
    f4f6:	str.w	r4, [sl]
    f4fa:	adds	r3, #1
    f4fc:	adds	r2, #1
    f4fe:	movs	r1, #1
    f500:	cmp	r3, #7
    f502:	str	r2, [sp, #152]	; 0x98
    f504:	str	r3, [sp, #148]	; 0x94
    f506:	str.w	r1, [sl, #4]
    f50a:	bgt.w	f8fe <_svfprintf_r+0xcee>
    f50e:	add.w	sl, sl, #8
    f512:	ldr	r1, [sp, #64]	; 0x40
    f514:	ldr	r0, [sp, #72]	; 0x48
    f516:	adds	r3, #1
    f518:	add	r2, r1
    f51a:	cmp	r3, #7
    f51c:	strd	r0, r1, [sl]
    f520:	strd	r3, r2, [sp, #148]	; 0x94
    f524:	bgt.w	f8e2 <_svfprintf_r+0xcd2>
    f528:	add.w	sl, sl, #8
    f52c:	vcmp.f64	d8, #0.0
    f530:	vmrs	APSR_nzcv, fpscr
    f534:	beq.w	f826 <_svfprintf_r+0xc16>
    f538:	ldr	r1, [sp, #56]	; 0x38
    f53a:	adds	r3, #1
    f53c:	subs	r1, #1
    f53e:	adds	r4, #1
    f540:	add	r2, r1
    f542:	cmp	r3, #7
    f544:	str.w	r4, [sl]
    f548:	str	r3, [sp, #148]	; 0x94
    f54a:	str.w	r1, [sl, #4]
    f54e:	str	r2, [sp, #152]	; 0x98
    f550:	bgt.w	f80a <_svfprintf_r+0xbfa>
    f554:	add.w	sl, sl, #8
    f558:	ldr	r1, [sp, #80]	; 0x50
    f55a:	str.w	r1, [sl, #4]
    f55e:	adds	r3, #1
    f560:	add	r2, r1
    f562:	cmp	r3, #7
    f564:	add	r1, sp, #120	; 0x78
    f566:	strd	r3, r2, [sp, #148]	; 0x94
    f56a:	str.w	r1, [sl]
    f56e:	ble.w	ef3c <_svfprintf_r+0x32c>
    f572:	vmov	r1, s22
    f576:	add	r2, sp, #144	; 0x90
    f578:	mov	r0, fp
    f57a:	bl	11978 <__ssprint_r>
    f57e:	cmp	r0, #0
    f580:	bne.n	f4da <_svfprintf_r+0x8ca>
    f582:	ldr	r2, [sp, #152]	; 0x98
    f584:	add.w	sl, sp, #156	; 0x9c
    f588:	b.n	ef40 <_svfprintf_r+0x330>
    f58a:	cmp	r5, #16
    f58c:	ldrd	r1, r2, [sp, #148]	; 0x94
    f590:	ldr	r6, [pc, #176]	; (f644 <_svfprintf_r+0xa34>)
    f592:	ble.n	f5de <_svfprintf_r+0x9ce>
    f594:	str	r4, [sp, #92]	; 0x5c
    f596:	movs	r3, #16
    f598:	vmov	r4, s22
    f59c:	mov	r0, r1
    f59e:	b.n	f5aa <_svfprintf_r+0x99a>
    f5a0:	subs	r5, #16
    f5a2:	cmp	r5, #16
    f5a4:	add.w	sl, sl, #8
    f5a8:	ble.n	f5da <_svfprintf_r+0x9ca>
    f5aa:	adds	r0, #1
    f5ac:	adds	r2, #16
    f5ae:	cmp	r0, #7
    f5b0:	strd	r6, r3, [sl]
    f5b4:	strd	r0, r2, [sp, #148]	; 0x94
    f5b8:	ble.n	f5a0 <_svfprintf_r+0x990>
    f5ba:	add	r2, sp, #144	; 0x90
    f5bc:	mov	r1, r4
    f5be:	mov	r0, fp
    f5c0:	add.w	sl, sp, #156	; 0x9c
    f5c4:	bl	11978 <__ssprint_r>
    f5c8:	cmp	r0, #0
    f5ca:	bne.n	f4da <_svfprintf_r+0x8ca>
    f5cc:	subs	r5, #16
    f5ce:	cmp	r5, #16
    f5d0:	ldrd	r0, r2, [sp, #148]	; 0x94
    f5d4:	mov.w	r3, #16
    f5d8:	bgt.n	f5aa <_svfprintf_r+0x99a>
    f5da:	ldr	r4, [sp, #92]	; 0x5c
    f5dc:	mov	r1, r0
    f5de:	adds	r1, #1
    f5e0:	add	r2, r5
    f5e2:	cmp	r1, #7
    f5e4:	strd	r1, r2, [sp, #148]	; 0x94
    f5e8:	str.w	r6, [sl]
    f5ec:	str.w	r5, [sl, #4]
    f5f0:	bgt.w	fd6e <_svfprintf_r+0x115e>
    f5f4:	ldrb.w	r1, [sp, #103]	; 0x67
    f5f8:	add.w	sl, sl, #8
    f5fc:	b.n	eeba <_svfprintf_r+0x2aa>
    f5fe:	str.w	r8, [sp, #8]
    f602:	cmp	r2, #10
    f604:	sbcs.w	r3, r1, #0
    f608:	bcs.w	fc96 <_svfprintf_r+0x1086>
    f60c:	adds	r2, #48	; 0x30
    f60e:	movs	r3, #1
    f610:	ldr.w	r8, [sp, #8]
    f614:	strb.w	r2, [sp, #319]	; 0x13f
    f618:	str	r3, [sp, #20]
    f61a:	addw	r4, sp, #319	; 0x13f
    f61e:	b.n	f2f2 <_svfprintf_r+0x6e2>
    f620:	vmov	r1, s22
    f624:	add	r2, sp, #144	; 0x90
    f626:	mov	r0, fp
    f628:	bl	11978 <__ssprint_r>
    f62c:	cmp	r0, #0
    f62e:	bne.w	f4da <_svfprintf_r+0x8ca>
    f632:	ldr	r2, [sp, #152]	; 0x98
    f634:	add.w	sl, sp, #156	; 0x9c
    f638:	b.n	eee0 <_svfprintf_r+0x2d0>
    f63a:	nop
    f63c:	.word	0x20000e8c
    f640:	.word	0x20001300
    f644:	.word	0x20000e90
    f648:	vmov	r1, s22
    f64c:	add	r2, sp, #144	; 0x90
    f64e:	mov	r0, fp
    f650:	bl	11978 <__ssprint_r>
    f654:	cmp	r0, #0
    f656:	bne.w	f4da <_svfprintf_r+0x8ca>
    f65a:	ldr	r2, [sp, #152]	; 0x98
    f65c:	add.w	sl, sp, #156	; 0x9c
    f660:	b.n	ef06 <_svfprintf_r+0x2f6>
    f662:	cmp	r4, #16
    f664:	ldr	r3, [sp, #148]	; 0x94
    f666:	ldr	r6, [pc, #760]	; (f960 <_svfprintf_r+0xd50>)
    f668:	ble.n	f6aa <_svfprintf_r+0xa9a>
    f66a:	vmov	r8, s22
    f66e:	movs	r5, #16
    f670:	b.n	f67c <_svfprintf_r+0xa6c>
    f672:	subs	r4, #16
    f674:	cmp	r4, #16
    f676:	add.w	sl, sl, #8
    f67a:	ble.n	f6aa <_svfprintf_r+0xa9a>
    f67c:	adds	r3, #1
    f67e:	adds	r2, #16
    f680:	cmp	r3, #7
    f682:	strd	r6, r5, [sl]
    f686:	strd	r3, r2, [sp, #148]	; 0x94
    f68a:	ble.n	f672 <_svfprintf_r+0xa62>
    f68c:	add	r2, sp, #144	; 0x90
    f68e:	mov	r1, r8
    f690:	mov	r0, fp
    f692:	add.w	sl, sp, #156	; 0x9c
    f696:	bl	11978 <__ssprint_r>
    f69a:	cmp	r0, #0
    f69c:	bne.w	f4da <_svfprintf_r+0x8ca>
    f6a0:	subs	r4, #16
    f6a2:	cmp	r4, #16
    f6a4:	ldrd	r3, r2, [sp, #148]	; 0x94
    f6a8:	bgt.n	f67c <_svfprintf_r+0xa6c>
    f6aa:	adds	r3, #1
    f6ac:	add	r2, r4
    f6ae:	cmp	r3, #7
    f6b0:	strd	r6, r4, [sl]
    f6b4:	strd	r3, r2, [sp, #148]	; 0x94
    f6b8:	ble.w	ef52 <_svfprintf_r+0x342>
    f6bc:	vmov	r1, s22
    f6c0:	add	r2, sp, #144	; 0x90
    f6c2:	mov	r0, fp
    f6c4:	bl	11978 <__ssprint_r>
    f6c8:	cmp	r0, #0
    f6ca:	bne.w	f4da <_svfprintf_r+0x8ca>
    f6ce:	ldr	r2, [sp, #152]	; 0x98
    f6d0:	b.n	ef52 <_svfprintf_r+0x342>
    f6d2:	ldr	r1, [sp, #108]	; 0x6c
    f6d4:	cmp	r1, #0
    f6d6:	ble.w	fd8e <_svfprintf_r+0x117e>
    f6da:	ldr	r6, [sp, #48]	; 0x30
    f6dc:	ldr	r3, [sp, #56]	; 0x38
    f6de:	cmp	r6, r3
    f6e0:	it	ge
    f6e2:	movge	r6, r3
    f6e4:	cmp	r6, #0
    f6e6:	ble.n	f700 <_svfprintf_r+0xaf0>
    f6e8:	ldr	r3, [sp, #148]	; 0x94
    f6ea:	adds	r3, #1
    f6ec:	add	r2, r6
    f6ee:	cmp	r3, #7
    f6f0:	strd	r4, r6, [sl]
    f6f4:	str	r2, [sp, #152]	; 0x98
    f6f6:	str	r3, [sp, #148]	; 0x94
    f6f8:	bgt.w	1040e <_svfprintf_r+0x17fe>
    f6fc:	add.w	sl, sl, #8
    f700:	ldr	r5, [sp, #48]	; 0x30
    f702:	cmp	r6, #0
    f704:	it	ge
    f706:	subge	r5, r5, r6
    f708:	cmp	r5, #0
    f70a:	bgt.w	fb14 <_svfprintf_r+0xf04>
    f70e:	ldr	r3, [sp, #48]	; 0x30
    f710:	tst.w	r8, #1024	; 0x400
    f714:	add	r3, r4
    f716:	str	r3, [sp, #20]
    f718:	bne.w	fb5a <_svfprintf_r+0xf4a>
    f71c:	ldr	r3, [sp, #108]	; 0x6c
    f71e:	ldr	r1, [sp, #56]	; 0x38
    f720:	cmp	r3, r1
    f722:	blt.n	f72c <_svfprintf_r+0xb1c>
    f724:	tst.w	r8, #1
    f728:	beq.w	100ca <_svfprintf_r+0x14ba>
    f72c:	ldr	r1, [sp, #64]	; 0x40
    f72e:	ldr	r0, [sp, #72]	; 0x48
    f730:	add	r2, r1
    f732:	strd	r0, r1, [sl]
    f736:	ldr	r1, [sp, #148]	; 0x94
    f738:	str	r2, [sp, #152]	; 0x98
    f73a:	adds	r1, #1
    f73c:	cmp	r1, #7
    f73e:	str	r1, [sp, #148]	; 0x94
    f740:	bgt.w	1048e <_svfprintf_r+0x187e>
    f744:	add.w	sl, sl, #8
    f748:	ldr	r1, [sp, #56]	; 0x38
    f74a:	adds	r5, r4, r1
    f74c:	subs	r4, r1, r3
    f74e:	ldr	r3, [sp, #20]
    f750:	subs	r5, r5, r3
    f752:	cmp	r5, r4
    f754:	it	ge
    f756:	movge	r5, r4
    f758:	cmp	r5, #0
    f75a:	ble.n	f778 <_svfprintf_r+0xb68>
    f75c:	str.w	r3, [sl]
    f760:	ldr	r3, [sp, #148]	; 0x94
    f762:	str.w	r5, [sl, #4]
    f766:	adds	r3, #1
    f768:	add	r2, r5
    f76a:	cmp	r3, #7
    f76c:	str	r2, [sp, #152]	; 0x98
    f76e:	str	r3, [sp, #148]	; 0x94
    f770:	bgt.w	104ea <_svfprintf_r+0x18da>
    f774:	add.w	sl, sl, #8
    f778:	cmp	r5, #0
    f77a:	it	ge
    f77c:	subge	r4, r4, r5
    f77e:	cmp	r4, #0
    f780:	ble.w	ef40 <_svfprintf_r+0x330>
    f784:	cmp	r4, #16
    f786:	ldr	r3, [sp, #148]	; 0x94
    f788:	ble.w	fe84 <_svfprintf_r+0x1274>
    f78c:	vmov	r6, s22
    f790:	movs	r5, #16
    f792:	b.n	f7a0 <_svfprintf_r+0xb90>
    f794:	add.w	sl, sl, #8
    f798:	subs	r4, #16
    f79a:	cmp	r4, #16
    f79c:	ble.w	fe84 <_svfprintf_r+0x1274>
    f7a0:	adds	r3, #1
    f7a2:	ldr	r1, [pc, #448]	; (f964 <_svfprintf_r+0xd54>)
    f7a4:	adds	r2, #16
    f7a6:	cmp	r3, #7
    f7a8:	strd	r1, r5, [sl]
    f7ac:	strd	r3, r2, [sp, #148]	; 0x94
    f7b0:	ble.n	f794 <_svfprintf_r+0xb84>
    f7b2:	add	r2, sp, #144	; 0x90
    f7b4:	mov	r1, r6
    f7b6:	mov	r0, fp
    f7b8:	bl	11978 <__ssprint_r>
    f7bc:	cmp	r0, #0
    f7be:	bne.w	f4da <_svfprintf_r+0x8ca>
    f7c2:	ldrd	r3, r2, [sp, #148]	; 0x94
    f7c6:	add.w	sl, sp, #156	; 0x9c
    f7ca:	b.n	f798 <_svfprintf_r+0xb88>
    f7cc:	cmp	r3, #48	; 0x30
    f7ce:	beq.w	f2e8 <_svfprintf_r+0x6d8>
    f7d2:	movs	r3, #48	; 0x30
    f7d4:	subs	r0, #2
    f7d6:	strb.w	r3, [r4, #-1]
    f7da:	add	r3, sp, #320	; 0x140
    f7dc:	subs	r3, r3, r0
    f7de:	ldr.w	r8, [sp, #8]
    f7e2:	str	r3, [sp, #20]
    f7e4:	mov	r4, r0
    f7e6:	b.n	f2f2 <_svfprintf_r+0x6e2>
    f7e8:	tst.w	r8, #1
    f7ec:	bne.w	f4f4 <_svfprintf_r+0x8e4>
    f7f0:	ldr	r3, [sp, #148]	; 0x94
    f7f2:	str.w	r4, [sl]
    f7f6:	adds	r3, #1
    f7f8:	adds	r2, #1
    f7fa:	movs	r1, #1
    f7fc:	cmp	r3, #7
    f7fe:	str	r2, [sp, #152]	; 0x98
    f800:	str	r3, [sp, #148]	; 0x94
    f802:	str.w	r1, [sl, #4]
    f806:	ble.w	f554 <_svfprintf_r+0x944>
    f80a:	vmov	r1, s22
    f80e:	add	r2, sp, #144	; 0x90
    f810:	mov	r0, fp
    f812:	bl	11978 <__ssprint_r>
    f816:	cmp	r0, #0
    f818:	bne.w	f4da <_svfprintf_r+0x8ca>
    f81c:	ldrd	r3, r2, [sp, #148]	; 0x94
    f820:	add.w	sl, sp, #156	; 0x9c
    f824:	b.n	f558 <_svfprintf_r+0x948>
    f826:	ldr	r1, [sp, #56]	; 0x38
    f828:	subs	r4, r1, #1
    f82a:	cmp	r4, #0
    f82c:	ble.w	f558 <_svfprintf_r+0x948>
    f830:	cmp	r4, #16
    f832:	ble.w	fef8 <_svfprintf_r+0x12e8>
    f836:	vmov	r6, s22
    f83a:	movs	r5, #16
    f83c:	b.n	f84a <_svfprintf_r+0xc3a>
    f83e:	add.w	sl, sl, #8
    f842:	subs	r4, #16
    f844:	cmp	r4, #16
    f846:	ble.w	fef8 <_svfprintf_r+0x12e8>
    f84a:	adds	r3, #1
    f84c:	ldr	r1, [pc, #276]	; (f964 <_svfprintf_r+0xd54>)
    f84e:	adds	r2, #16
    f850:	cmp	r3, #7
    f852:	strd	r1, r5, [sl]
    f856:	strd	r3, r2, [sp, #148]	; 0x94
    f85a:	ble.n	f83e <_svfprintf_r+0xc2e>
    f85c:	add	r2, sp, #144	; 0x90
    f85e:	mov	r1, r6
    f860:	mov	r0, fp
    f862:	bl	11978 <__ssprint_r>
    f866:	cmp	r0, #0
    f868:	bne.w	f4da <_svfprintf_r+0x8ca>
    f86c:	ldrd	r3, r2, [sp, #148]	; 0x94
    f870:	add.w	sl, sp, #156	; 0x9c
    f874:	b.n	f842 <_svfprintf_r+0xc32>
    f876:	vmov	r1, s22
    f87a:	add	r2, sp, #144	; 0x90
    f87c:	mov	r0, fp
    f87e:	bl	11978 <__ssprint_r>
    f882:	cmp	r0, #0
    f884:	bne.w	f4da <_svfprintf_r+0x8ca>
    f888:	ldr	r2, [sp, #152]	; 0x98
    f88a:	add.w	sl, sp, #156	; 0x9c
    f88e:	b.w	ef1a <_svfprintf_r+0x30a>
    f892:	ldr	r3, [sp, #8]
    f894:	ands.w	r3, r3, #16
    f898:	bne.w	fa1e <_svfprintf_r+0xe0e>
    f89c:	ldr	r2, [sp, #8]
    f89e:	ands.w	r2, r2, #64	; 0x40
    f8a2:	beq.w	ff9a <_svfprintf_r+0x138a>
    f8a6:	ldr	r0, [sp, #32]
    f8a8:	ldr.w	r2, [r0], #4
    f8ac:	str	r0, [sp, #32]
    f8ae:	mov	r1, r3
    f8b0:	uxth	r2, r2
    f8b2:	movs	r3, #1
    f8b4:	b.n	f15a <_svfprintf_r+0x54a>
    f8b6:	ands.w	r3, r8, #16
    f8ba:	bne.n	f968 <_svfprintf_r+0xd58>
    f8bc:	ands.w	r2, r8, #64	; 0x40
    f8c0:	beq.w	ff7e <_svfprintf_r+0x136e>
    f8c4:	ldr	r0, [sp, #32]
    f8c6:	ldr.w	r2, [r0], #4
    f8ca:	str	r0, [sp, #32]
    f8cc:	mov	r1, r3
    f8ce:	uxth	r2, r2
    f8d0:	b.n	f224 <_svfprintf_r+0x614>
    f8d2:	negs	r2, r2
    f8d4:	sbc.w	r1, r1, r1, lsl #1
    f8d8:	str.w	r8, [sp, #8]
    f8dc:	movs	r0, #45	; 0x2d
    f8de:	movs	r3, #1
    f8e0:	b.n	f15c <_svfprintf_r+0x54c>
    f8e2:	vmov	r1, s22
    f8e6:	add	r2, sp, #144	; 0x90
    f8e8:	mov	r0, fp
    f8ea:	bl	11978 <__ssprint_r>
    f8ee:	cmp	r0, #0
    f8f0:	bne.w	f4da <_svfprintf_r+0x8ca>
    f8f4:	ldrd	r3, r2, [sp, #148]	; 0x94
    f8f8:	add.w	sl, sp, #156	; 0x9c
    f8fc:	b.n	f52c <_svfprintf_r+0x91c>
    f8fe:	vmov	r1, s22
    f902:	add	r2, sp, #144	; 0x90
    f904:	mov	r0, fp
    f906:	bl	11978 <__ssprint_r>
    f90a:	cmp	r0, #0
    f90c:	bne.w	f4da <_svfprintf_r+0x8ca>
    f910:	ldrd	r3, r2, [sp, #148]	; 0x94
    f914:	add.w	sl, sp, #156	; 0x9c
    f918:	b.n	f512 <_svfprintf_r+0x902>
    f91a:	tst.w	r8, #1
    f91e:	beq.w	ef40 <_svfprintf_r+0x330>
    f922:	b.n	f37a <_svfprintf_r+0x76a>
    f924:	str	r3, [sp, #32]
    f926:	ldrb.w	r3, [r9]
    f92a:	b.w	ecc8 <_svfprintf_r+0xb8>
    f92e:	add	r4, sp, #320	; 0x140
    f930:	b.n	f2f2 <_svfprintf_r+0x6e2>
    f932:	tst.w	r8, #512	; 0x200
    f936:	bne.w	100f0 <_svfprintf_r+0x14e0>
    f93a:	ldr.w	r2, [r3], #4
    f93e:	str	r3, [sp, #32]
    f940:	asrs	r1, r2, #31
    f942:	mov	r3, r1
    f944:	b.w	f0b4 <_svfprintf_r+0x4a4>
    f948:	ldr	r3, [sp, #32]
    f94a:	ldr	r0, [sp, #16]
    f94c:	ldr.w	r1, [r3], #4
    f950:	str	r3, [sp, #32]
    f952:	asrs	r2, r0, #31
    f954:	strd	r0, r2, [r1]
    f958:	mov	r4, r9
    f95a:	b.w	ec74 <_svfprintf_r+0x64>
    f95e:	nop
    f960:	.word	0x20000e90
    f964:	.word	0x20001300
    f968:	ldr	r3, [sp, #32]
    f96a:	ldr.w	r2, [r3], #4
    f96e:	str	r3, [sp, #32]
    f970:	b.n	f224 <_svfprintf_r+0x614>
    f972:	vcmp.f64	d8, d8
    f976:	vmrs	APSR_nzcv, fpscr
    f97a:	bvs.w	106a6 <_svfprintf_r+0x1a96>
    f97e:	ldr	r3, [sp, #44]	; 0x2c
    f980:	cmp	r3, #97	; 0x61
    f982:	beq.w	1042a <_svfprintf_r+0x181a>
    f986:	cmp	r3, #65	; 0x41
    f988:	beq.w	1050c <_svfprintf_r+0x18fc>
    f98c:	ldr	r3, [sp, #12]
    f98e:	adds	r3, #1
    f990:	ldr	r3, [sp, #44]	; 0x2c
    f992:	bic.w	r5, r3, #32
    f996:	beq.w	1029a <_svfprintf_r+0x168a>
    f99a:	cmp	r5, #71	; 0x47
    f99c:	bne.n	f9a8 <_svfprintf_r+0xd98>
    f99e:	ldr	r3, [sp, #12]
    f9a0:	cmp	r3, #0
    f9a2:	it	eq
    f9a4:	moveq	r3, #1
    f9a6:	str	r3, [sp, #12]
    f9a8:	vmov	r3, s17
    f9ac:	cmp	r3, #0
    f9ae:	orr.w	r2, r8, #256	; 0x100
    f9b2:	mov	r6, r8
    f9b4:	blt.w	105e8 <_svfprintf_r+0x19d8>
    f9b8:	vmov.f64	d10, d8
    f9bc:	movs	r3, #0
    f9be:	mov	r8, r2
    f9c0:	str	r3, [sp, #36]	; 0x24
    f9c2:	str	r3, [sp, #28]
    f9c4:	ldr	r3, [sp, #44]	; 0x2c
    f9c6:	subs	r3, #65	; 0x41
    f9c8:	cmp	r3, #37	; 0x25
    f9ca:	bhi.w	100fe <_svfprintf_r+0x14ee>
    f9ce:	tbh	[pc, r3, lsl #1]
    f9d2:	.short	0x046f
    f9d4:	.word	0x03960396
    f9d8:	.word	0x04680396
    f9dc:	.word	0x0396046c
    f9e0:	.word	0x03960396
    f9e4:	.word	0x03960396
    f9e8:	.word	0x03960396
    f9ec:	.word	0x03960396
    f9f0:	.word	0x03960396
    f9f4:	.word	0x03960396
    f9f8:	.word	0x03960396
    f9fc:	.word	0x03960396
    fa00:	.word	0x03960396
    fa04:	.word	0x03960396
    fa08:	.word	0x03960396
    fa0c:	.word	0x03960396
    fa10:	.word	0x03960396
    fa14:	.word	0x03960396
    fa18:	.word	0x04680396
    fa1c:	.short	0x046c
    fa1e:	ldr	r3, [sp, #32]
    fa20:	ldr.w	r2, [r3], #4
    fa24:	str	r3, [sp, #32]
    fa26:	movs	r3, #1
    fa28:	b.w	f15a <_svfprintf_r+0x54a>
    fa2c:	ldr	r3, [sp, #76]	; 0x4c
    fa2e:	cmp	r3, #0
    fa30:	beq.w	edd2 <_svfprintf_r+0x1c2>
    fa34:	ldr	r3, [sp, #76]	; 0x4c
    fa36:	ldrb	r3, [r3, #0]
    fa38:	cmp	r3, #0
    fa3a:	beq.w	edd2 <_svfprintf_r+0x1c2>
    fa3e:	ldrb.w	r3, [r9]
    fa42:	orr.w	r8, r8, #1024	; 0x400
    fa46:	b.w	ecc8 <_svfprintf_r+0xb8>
    fa4a:	str	r3, [sp, #44]	; 0x2c
    fa4c:	str.w	r8, [sp, #8]
    fa50:	b.w	f236 <_svfprintf_r+0x626>
    fa54:	str	r3, [sp, #44]	; 0x2c
    fa56:	ldr	r3, [pc, #616]	; (fcc0 <_svfprintf_r+0x10b0>)
    fa58:	str	r3, [sp, #68]	; 0x44
    fa5a:	ands.w	r1, r8, #32
    fa5e:	beq.w	fc6c <_svfprintf_r+0x105c>
    fa62:	ldr	r3, [sp, #32]
    fa64:	adds	r3, #7
    fa66:	bic.w	r3, r3, #7
    fa6a:	ldr	r1, [r3, #4]
    fa6c:	ldr.w	r2, [r3], #8
    fa70:	str	r3, [sp, #32]
    fa72:	tst.w	r8, #1
    fa76:	beq.n	fa8e <_svfprintf_r+0xe7e>
    fa78:	orrs.w	r3, r2, r1
    fa7c:	beq.n	fa8e <_svfprintf_r+0xe7e>
    fa7e:	ldr	r3, [sp, #44]	; 0x2c
    fa80:	strb.w	r3, [sp, #105]	; 0x69
    fa84:	movs	r3, #48	; 0x30
    fa86:	orr.w	r8, r8, #2
    fa8a:	strb.w	r3, [sp, #104]	; 0x68
    fa8e:	bic.w	r3, r8, #1024	; 0x400
    fa92:	str	r3, [sp, #8]
    fa94:	movs	r3, #2
    fa96:	b.w	f15a <_svfprintf_r+0x54a>
    fa9a:	str	r3, [sp, #44]	; 0x2c
    fa9c:	b.w	f20c <_svfprintf_r+0x5fc>
    faa0:	str	r3, [sp, #44]	; 0x2c
    faa2:	ldr	r3, [pc, #544]	; (fcc4 <_svfprintf_r+0x10b4>)
    faa4:	str	r3, [sp, #68]	; 0x44
    faa6:	b.n	fa5a <_svfprintf_r+0xe4a>
    faa8:	ldr	r3, [sp, #32]
    faaa:	movs	r1, #1
    faac:	ldr.w	r2, [r3], #4
    fab0:	str	r1, [sp, #8]
    fab2:	strb.w	r2, [sp, #220]	; 0xdc
    fab6:	str	r3, [sp, #32]
    fab8:	str	r1, [sp, #20]
    faba:	add	r4, sp, #220	; 0xdc
    fabc:	b.w	f01e <_svfprintf_r+0x40e>
    fac0:	vmov	r1, s22
    fac4:	add	r2, sp, #144	; 0x90
    fac6:	mov	r0, fp
    fac8:	bl	11978 <__ssprint_r>
    facc:	cmp	r0, #0
    face:	bne.w	f4da <_svfprintf_r+0x8ca>
    fad2:	ldr	r2, [sp, #152]	; 0x98
    fad4:	add.w	sl, sp, #156	; 0x9c
    fad8:	b.n	f396 <_svfprintf_r+0x786>
    fada:	ldr	r3, [sp, #12]
    fadc:	str	r4, [sp, #28]
    fade:	cmp	r3, #6
    fae0:	mov	r2, r4
    fae2:	it	cs
    fae4:	movcs	r3, #6
    fae6:	str	r4, [sp, #12]
    fae8:	mov	r1, r4
    faea:	strd	r2, r2, [sp, #48]	; 0x30
    faee:	ldr	r4, [pc, #472]	; (fcc8 <_svfprintf_r+0x10b8>)
    faf0:	str	r3, [sp, #8]
    faf2:	str	r3, [sp, #20]
    faf4:	str	r2, [sp, #60]	; 0x3c
    faf6:	b.w	efd2 <_svfprintf_r+0x3c2>
    fafa:	movs	r1, #64	; 0x40
    fafc:	mov	r0, fp
    fafe:	bl	cebc <_malloc_r>
    fb02:	str	r0, [r4, #0]
    fb04:	str	r0, [r4, #16]
    fb06:	cmp	r0, #0
    fb08:	beq.w	1072a <_svfprintf_r+0x1b1a>
    fb0c:	movs	r3, #64	; 0x40
    fb0e:	str	r3, [r4, #20]
    fb10:	b.w	ec50 <_svfprintf_r+0x40>
    fb14:	cmp	r5, #16
    fb16:	ldr	r3, [sp, #148]	; 0x94
    fb18:	ble.w	ffd6 <_svfprintf_r+0x13c6>
    fb1c:	mov	r1, sl
    fb1e:	movs	r6, #16
    fb20:	vmov	sl, s22
    fb24:	b.n	fb30 <_svfprintf_r+0xf20>
    fb26:	adds	r1, #8
    fb28:	subs	r5, #16
    fb2a:	cmp	r5, #16
    fb2c:	ble.w	ffd4 <_svfprintf_r+0x13c4>
    fb30:	adds	r3, #1
    fb32:	ldr	r0, [pc, #408]	; (fccc <_svfprintf_r+0x10bc>)
    fb34:	adds	r2, #16
    fb36:	cmp	r3, #7
    fb38:	strd	r0, r6, [r1]
    fb3c:	strd	r3, r2, [sp, #148]	; 0x94
    fb40:	ble.n	fb26 <_svfprintf_r+0xf16>
    fb42:	add	r2, sp, #144	; 0x90
    fb44:	mov	r1, sl
    fb46:	mov	r0, fp
    fb48:	bl	11978 <__ssprint_r>
    fb4c:	cmp	r0, #0
    fb4e:	bne.w	f4da <_svfprintf_r+0x8ca>
    fb52:	ldrd	r3, r2, [sp, #148]	; 0x94
    fb56:	add	r1, sp, #156	; 0x9c
    fb58:	b.n	fb28 <_svfprintf_r+0xf18>
    fb5a:	ldr	r3, [sp, #56]	; 0x38
    fb5c:	str.w	r9, [sp, #36]	; 0x24
    fb60:	adds	r3, r4, r3
    fb62:	str	r3, [sp, #12]
    fb64:	ldr	r3, [sp, #52]	; 0x34
    fb66:	str.w	r8, [sp, #40]	; 0x28
    fb6a:	ldr	r6, [sp, #76]	; 0x4c
    fb6c:	ldr	r5, [sp, #20]
    fb6e:	ldr.w	r9, [sp, #88]	; 0x58
    fb72:	ldr.w	r8, [sp, #60]	; 0x3c
    fb76:	str	r4, [sp, #44]	; 0x2c
    fb78:	vmov	r1, s22
    fb7c:	mov	r0, sl
    fb7e:	cmp	r3, #0
    fb80:	beq.n	fbec <_svfprintf_r+0xfdc>
    fb82:	cmp.w	r8, #0
    fb86:	bne.n	fbf4 <_svfprintf_r+0xfe4>
    fb88:	ldr	r3, [sp, #52]	; 0x34
    fb8a:	subs	r3, #1
    fb8c:	subs	r6, #1
    fb8e:	str	r3, [sp, #52]	; 0x34
    fb90:	ldr	r3, [sp, #84]	; 0x54
    fb92:	strd	r3, r9, [r0]
    fb96:	ldr	r3, [sp, #148]	; 0x94
    fb98:	adds	r3, #1
    fb9a:	add	r2, r9
    fb9c:	cmp	r3, #7
    fb9e:	str	r2, [sp, #152]	; 0x98
    fba0:	str	r3, [sp, #148]	; 0x94
    fba2:	bgt.n	fc7e <_svfprintf_r+0x106e>
    fba4:	adds	r0, #8
    fba6:	ldr	r3, [sp, #12]
    fba8:	ldrb.w	ip, [r6]
    fbac:	subs	r3, r3, r5
    fbae:	cmp	r3, ip
    fbb0:	it	ge
    fbb2:	movge	r3, ip
    fbb4:	cmp	r3, #0
    fbb6:	mov	sl, r3
    fbb8:	ble.n	fbd4 <_svfprintf_r+0xfc4>
    fbba:	ldr	r4, [sp, #148]	; 0x94
    fbbc:	adds	r4, #1
    fbbe:	add	r2, r3
    fbc0:	cmp	r4, #7
    fbc2:	strd	r5, r3, [r0]
    fbc6:	str	r2, [sp, #152]	; 0x98
    fbc8:	str	r4, [sp, #148]	; 0x94
    fbca:	bgt.w	febc <_svfprintf_r+0x12ac>
    fbce:	ldrb.w	ip, [r6]
    fbd2:	adds	r0, #8
    fbd4:	cmp.w	sl, #0
    fbd8:	ite	ge
    fbda:	subge.w	r4, ip, sl
    fbde:	movlt	r4, ip
    fbe0:	cmp	r4, #0
    fbe2:	bgt.n	fbfa <_svfprintf_r+0xfea>
    fbe4:	add	r5, ip
    fbe6:	ldr	r3, [sp, #52]	; 0x34
    fbe8:	cmp	r3, #0
    fbea:	bne.n	fb82 <_svfprintf_r+0xf72>
    fbec:	cmp.w	r8, #0
    fbf0:	beq.w	1034c <_svfprintf_r+0x173c>
    fbf4:	add.w	r8, r8, #4294967295
    fbf8:	b.n	fb90 <_svfprintf_r+0xf80>
    fbfa:	cmp	r4, #16
    fbfc:	ldr.w	ip, [sp, #148]	; 0x94
    fc00:	ble.n	fc4c <_svfprintf_r+0x103c>
    fc02:	str	r5, [sp, #20]
    fc04:	mov.w	sl, #16
    fc08:	mov	r3, ip
    fc0a:	mov	r5, r1
    fc0c:	b.n	fc18 <_svfprintf_r+0x1008>
    fc0e:	subs	r4, #16
    fc10:	cmp	r4, #16
    fc12:	add.w	r0, r0, #8
    fc16:	ble.n	fc46 <_svfprintf_r+0x1036>
    fc18:	adds	r3, #1
    fc1a:	ldr	r1, [pc, #176]	; (fccc <_svfprintf_r+0x10bc>)
    fc1c:	adds	r2, #16
    fc1e:	cmp	r3, #7
    fc20:	strd	r1, sl, [r0]
    fc24:	strd	r3, r2, [sp, #148]	; 0x94
    fc28:	ble.n	fc0e <_svfprintf_r+0xffe>
    fc2a:	add	r2, sp, #144	; 0x90
    fc2c:	mov	r1, r5
    fc2e:	mov	r0, fp
    fc30:	bl	11978 <__ssprint_r>
    fc34:	cmp	r0, #0
    fc36:	bne.w	f4da <_svfprintf_r+0x8ca>
    fc3a:	subs	r4, #16
    fc3c:	cmp	r4, #16
    fc3e:	ldrd	r3, r2, [sp, #148]	; 0x94
    fc42:	add	r0, sp, #156	; 0x9c
    fc44:	bgt.n	fc18 <_svfprintf_r+0x1008>
    fc46:	mov	r1, r5
    fc48:	ldr	r5, [sp, #20]
    fc4a:	mov	ip, r3
    fc4c:	add.w	r3, ip, #1
    fc50:	add	r2, r4
    fc52:	str	r4, [r0, #4]
    fc54:	cmp	r3, #7
    fc56:	ldr	r4, [pc, #116]	; (fccc <_svfprintf_r+0x10bc>)
    fc58:	str	r4, [r0, #0]
    fc5a:	strd	r3, r2, [sp, #148]	; 0x94
    fc5e:	bgt.w	103ee <_svfprintf_r+0x17de>
    fc62:	ldrb.w	ip, [r6]
    fc66:	adds	r0, #8
    fc68:	add	r5, ip
    fc6a:	b.n	fbe6 <_svfprintf_r+0xfd6>
    fc6c:	ands.w	r3, r8, #16
    fc70:	beq.w	fdf8 <_svfprintf_r+0x11e8>
    fc74:	ldr	r3, [sp, #32]
    fc76:	ldr.w	r2, [r3], #4
    fc7a:	str	r3, [sp, #32]
    fc7c:	b.n	fa72 <_svfprintf_r+0xe62>
    fc7e:	add	r2, sp, #144	; 0x90
    fc80:	mov	r0, fp
    fc82:	str	r1, [sp, #20]
    fc84:	bl	11978 <__ssprint_r>
    fc88:	cmp	r0, #0
    fc8a:	bne.w	f4da <_svfprintf_r+0x8ca>
    fc8e:	ldr	r2, [sp, #152]	; 0x98
    fc90:	ldr	r1, [sp, #20]
    fc92:	add	r0, sp, #156	; 0x9c
    fc94:	b.n	fba6 <_svfprintf_r+0xf96>
    fc96:	ldr	r0, [sp, #8]
    fc98:	str.w	sl, [sp, #28]
    fc9c:	add	r4, sp, #320	; 0x140
    fc9e:	and.w	r0, r0, #1024	; 0x400
    fca2:	movs	r5, #0
    fca4:	vmov	s20, fp
    fca8:	ldr	r3, [pc, #36]	; (fcd0 <_svfprintf_r+0x10c0>)
    fcaa:	ldr.w	sl, [sp, #76]	; 0x4c
    fcae:	str.w	r9, [sp, #20]
    fcb2:	mov	fp, r4
    fcb4:	mov.w	r8, #5
    fcb8:	mov	ip, r5
    fcba:	mov	r4, r0
    fcbc:	b.n	fce0 <_svfprintf_r+0x10d0>
    fcbe:	nop
    fcc0:	.word	0x20000e5c
    fcc4:	.word	0x20000e70
    fcc8:	.word	0x20000e84
    fccc:	.word	0x20001300
    fcd0:	.word	0xcccccccd
    fcd4:	cmp	r2, #10
    fcd6:	sbcs.w	r1, r1, #0
    fcda:	bcc.n	fd4a <_svfprintf_r+0x113a>
    fcdc:	mov	r2, r9
    fcde:	mov	r1, r6
    fce0:	adds	r0, r2, r1
    fce2:	adc.w	r0, r0, #0
    fce6:	umull	r5, r6, r3, r0
    fcea:	bic.w	r5, r6, #3
    fcee:	add.w	r5, r5, r6, lsr #2
    fcf2:	subs	r0, r0, r5
    fcf4:	subs	r5, r2, r0
    fcf6:	mov.w	r6, #3435973836	; 0xcccccccc
    fcfa:	sbc.w	lr, r1, #0
    fcfe:	mul.w	r6, r6, r5
    fd02:	umull	r9, r5, r5, r3
    fd06:	mla	r6, r3, lr, r6
    fd0a:	and.w	lr, r9, #1
    fd0e:	add	r6, r5
    fd10:	umull	r5, lr, lr, r8
    fd14:	adds	r5, r5, r0
    fd16:	mov.w	r9, r9, lsr #1
    fd1a:	adds	r5, #48	; 0x30
    fd1c:	strb.w	r5, [fp, #-1]
    fd20:	orr.w	r9, r9, r6, lsl #31
    fd24:	add.w	ip, ip, #1
    fd28:	add.w	fp, fp, #4294967295
    fd2c:	lsrs	r6, r6, #1
    fd2e:	cmp	r4, #0
    fd30:	beq.n	fcd4 <_svfprintf_r+0x10c4>
    fd32:	ldrb.w	r0, [sl]
    fd36:	cmp	ip, r0
    fd38:	bne.n	fcd4 <_svfprintf_r+0x10c4>
    fd3a:	cmp.w	ip, #255	; 0xff
    fd3e:	beq.n	fcd4 <_svfprintf_r+0x10c4>
    fd40:	cmp	r2, #10
    fd42:	sbcs.w	r1, r1, #0
    fd46:	bcs.w	10068 <_svfprintf_r+0x1458>
    fd4a:	mov	r4, fp
    fd4c:	add	r3, sp, #320	; 0x140
    fd4e:	subs	r3, r3, r4
    fd50:	ldr.w	r9, [sp, #20]
    fd54:	str.w	sl, [sp, #76]	; 0x4c
    fd58:	vmov	fp, s20
    fd5c:	ldr.w	sl, [sp, #28]
    fd60:	ldr.w	r8, [sp, #8]
    fd64:	str.w	ip, [sp, #56]	; 0x38
    fd68:	str	r3, [sp, #20]
    fd6a:	b.w	f2f2 <_svfprintf_r+0x6e2>
    fd6e:	vmov	r1, s22
    fd72:	add	r2, sp, #144	; 0x90
    fd74:	mov	r0, fp
    fd76:	bl	11978 <__ssprint_r>
    fd7a:	cmp	r0, #0
    fd7c:	bne.w	f4da <_svfprintf_r+0x8ca>
    fd80:	ldrb.w	r1, [sp, #103]	; 0x67
    fd84:	ldr	r2, [sp, #152]	; 0x98
    fd86:	add.w	sl, sp, #156	; 0x9c
    fd8a:	b.w	eeba <_svfprintf_r+0x2aa>
    fd8e:	ldr	r3, [sp, #148]	; 0x94
    fd90:	ldr	r0, [pc, #760]	; (1008c <_svfprintf_r+0x147c>)
    fd92:	str.w	r0, [sl]
    fd96:	adds	r3, #1
    fd98:	adds	r2, #1
    fd9a:	movs	r0, #1
    fd9c:	cmp	r3, #7
    fd9e:	str	r2, [sp, #152]	; 0x98
    fda0:	str	r3, [sp, #148]	; 0x94
    fda2:	str.w	r0, [sl, #4]
    fda6:	bgt.w	10098 <_svfprintf_r+0x1488>
    fdaa:	add.w	sl, sl, #8
    fdae:	cmp	r1, #0
    fdb0:	bne.w	ff12 <_svfprintf_r+0x1302>
    fdb4:	ldr	r1, [sp, #56]	; 0x38
    fdb6:	and.w	r3, r8, #1
    fdba:	orrs	r3, r1
    fdbc:	beq.w	ef40 <_svfprintf_r+0x330>
    fdc0:	ldr	r3, [sp, #64]	; 0x40
    fdc2:	ldr	r1, [sp, #72]	; 0x48
    fdc4:	add	r2, r3
    fdc6:	strd	r1, r3, [sl]
    fdca:	ldr	r3, [sp, #148]	; 0x94
    fdcc:	str	r2, [sp, #152]	; 0x98
    fdce:	adds	r3, #1
    fdd0:	cmp	r3, #7
    fdd2:	str	r3, [sp, #148]	; 0x94
    fdd4:	bgt.w	1027c <_svfprintf_r+0x166c>
    fdd8:	add.w	sl, sl, #8
    fddc:	ldr	r1, [sp, #56]	; 0x38
    fdde:	str.w	r4, [sl]
    fde2:	adds	r3, #1
    fde4:	add	r2, r1
    fde6:	cmp	r3, #7
    fde8:	strd	r3, r2, [sp, #148]	; 0x94
    fdec:	str.w	r1, [sl, #4]
    fdf0:	ble.w	ef3c <_svfprintf_r+0x32c>
    fdf4:	b.w	f572 <_svfprintf_r+0x962>
    fdf8:	ands.w	r2, r8, #64	; 0x40
    fdfc:	beq.w	ffba <_svfprintf_r+0x13aa>
    fe00:	ldr	r0, [sp, #32]
    fe02:	ldr.w	r2, [r0], #4
    fe06:	str	r0, [sp, #32]
    fe08:	mov	r1, r3
    fe0a:	uxth	r2, r2
    fe0c:	b.n	fa72 <_svfprintf_r+0xe62>
    fe0e:	vmov	r1, s22
    fe12:	add	r2, sp, #144	; 0x90
    fe14:	mov	r0, fp
    fe16:	bl	11978 <__ssprint_r>
    fe1a:	cmp	r0, #0
    fe1c:	bne.w	f4da <_svfprintf_r+0x8ca>
    fe20:	ldr	r2, [sp, #152]	; 0x98
    fe22:	add.w	sl, sp, #156	; 0x9c
    fe26:	b.w	f370 <_svfprintf_r+0x760>
    fe2a:	add	r6, sp, #136	; 0x88
    fe2c:	movs	r2, #8
    fe2e:	movs	r1, #0
    fe30:	mov	r0, r6
    fe32:	str	r4, [sp, #116]	; 0x74
    fe34:	bl	dcd0 <memset>
    fe38:	ldr	r3, [sp, #12]
    fe3a:	adds	r2, r3, #1
    fe3c:	beq.w	fff6 <_svfprintf_r+0x13e6>
    fe40:	movs	r5, #0
    fe42:	str.w	r9, [sp, #8]
    fe46:	str.w	r8, [sp, #28]
    fe4a:	mov	r9, r3
    fe4c:	mov	r8, r5
    fe4e:	b.n	fe6a <_svfprintf_r+0x125a>
    fe50:	add	r1, sp, #220	; 0xdc
    fe52:	mov	r0, fp
    fe54:	bl	118ec <_wcrtomb_r>
    fe58:	adds	r3, r0, #1
    fe5a:	add	r0, r8
    fe5c:	beq.w	105f0 <_svfprintf_r+0x19e0>
    fe60:	cmp	r0, r9
    fe62:	bgt.n	fe76 <_svfprintf_r+0x1266>
    fe64:	beq.w	10698 <_svfprintf_r+0x1a88>
    fe68:	mov	r8, r0
    fe6a:	ldr	r2, [sp, #116]	; 0x74
    fe6c:	ldr	r2, [r2, r5]
    fe6e:	mov	r3, r6
    fe70:	adds	r5, #4
    fe72:	cmp	r2, #0
    fe74:	bne.n	fe50 <_svfprintf_r+0x1240>
    fe76:	str.w	r8, [sp, #20]
    fe7a:	ldr.w	r9, [sp, #8]
    fe7e:	ldr.w	r8, [sp, #28]
    fe82:	b.n	10010 <_svfprintf_r+0x1400>
    fe84:	adds	r3, #1
    fe86:	ldr	r1, [pc, #520]	; (10090 <_svfprintf_r+0x1480>)
    fe88:	str.w	r4, [sl, #4]
    fe8c:	add	r2, r4
    fe8e:	cmp	r3, #7
    fe90:	str.w	r1, [sl]
    fe94:	strd	r3, r2, [sp, #148]	; 0x94
    fe98:	ble.w	ef3c <_svfprintf_r+0x32c>
    fe9c:	b.w	f572 <_svfprintf_r+0x962>
    fea0:	vmov	r1, s22
    fea4:	add	r2, sp, #144	; 0x90
    fea6:	mov	r0, fp
    fea8:	bl	11978 <__ssprint_r>
    feac:	cmp	r0, #0
    feae:	bne.w	f4da <_svfprintf_r+0x8ca>
    feb2:	ldr	r2, [sp, #152]	; 0x98
    feb4:	add.w	sl, sp, #156	; 0x9c
    feb8:	b.w	ef0e <_svfprintf_r+0x2fe>
    febc:	add	r2, sp, #144	; 0x90
    febe:	mov	r0, fp
    fec0:	str	r1, [sp, #20]
    fec2:	bl	11978 <__ssprint_r>
    fec6:	cmp	r0, #0
    fec8:	bne.w	f4da <_svfprintf_r+0x8ca>
    fecc:	ldrb.w	ip, [r6]
    fed0:	ldr	r2, [sp, #152]	; 0x98
    fed2:	ldr	r1, [sp, #20]
    fed4:	add	r0, sp, #156	; 0x9c
    fed6:	b.n	fbd4 <_svfprintf_r+0xfc4>
    fed8:	cmp	r3, #1
    feda:	str.w	r8, [sp, #8]
    fede:	bne.w	f2c8 <_svfprintf_r+0x6b8>
    fee2:	b.w	f60c <_svfprintf_r+0x9fc>
    fee6:	ldr	r3, [sp, #32]
    fee8:	ldr	r1, [sp, #16]
    feea:	ldr.w	r2, [r3], #4
    feee:	mov	r4, r9
    fef0:	str	r1, [r2, #0]
    fef2:	str	r3, [sp, #32]
    fef4:	b.w	ec74 <_svfprintf_r+0x64>
    fef8:	adds	r3, #1
    fefa:	ldr	r1, [pc, #404]	; (10090 <_svfprintf_r+0x1480>)
    fefc:	str.w	r4, [sl, #4]
    ff00:	add	r2, r4
    ff02:	cmp	r3, #7
    ff04:	strd	r3, r2, [sp, #148]	; 0x94
    ff08:	str.w	r1, [sl]
    ff0c:	ble.w	f554 <_svfprintf_r+0x944>
    ff10:	b.n	f80a <_svfprintf_r+0xbfa>
    ff12:	ldr	r3, [sp, #64]	; 0x40
    ff14:	ldr	r0, [sp, #72]	; 0x48
    ff16:	add	r2, r3
    ff18:	strd	r0, r3, [sl]
    ff1c:	ldr	r3, [sp, #148]	; 0x94
    ff1e:	str	r2, [sp, #152]	; 0x98
    ff20:	adds	r3, #1
    ff22:	cmp	r3, #7
    ff24:	str	r3, [sp, #148]	; 0x94
    ff26:	bgt.w	1027c <_svfprintf_r+0x166c>
    ff2a:	add.w	sl, sl, #8
    ff2e:	cmp	r1, #0
    ff30:	bge.w	fddc <_svfprintf_r+0x11cc>
    ff34:	negs	r5, r1
    ff36:	adds	r1, #16
    ff38:	bge.w	1055a <_svfprintf_r+0x194a>
    ff3c:	vmov	r1, s22
    ff40:	movs	r6, #16
    ff42:	b.n	ff50 <_svfprintf_r+0x1340>
    ff44:	add.w	sl, sl, #8
    ff48:	subs	r5, #16
    ff4a:	cmp	r5, #16
    ff4c:	ble.w	1055a <_svfprintf_r+0x194a>
    ff50:	adds	r3, #1
    ff52:	ldr	r0, [pc, #316]	; (10090 <_svfprintf_r+0x1480>)
    ff54:	adds	r2, #16
    ff56:	cmp	r3, #7
    ff58:	strd	r0, r6, [sl]
    ff5c:	strd	r3, r2, [sp, #148]	; 0x94
    ff60:	ble.n	ff44 <_svfprintf_r+0x1334>
    ff62:	add	r2, sp, #144	; 0x90
    ff64:	mov	r0, fp
    ff66:	str	r1, [sp, #12]
    ff68:	bl	11978 <__ssprint_r>
    ff6c:	cmp	r0, #0
    ff6e:	bne.w	f4da <_svfprintf_r+0x8ca>
    ff72:	ldrd	r3, r2, [sp, #148]	; 0x94
    ff76:	ldr	r1, [sp, #12]
    ff78:	add.w	sl, sp, #156	; 0x9c
    ff7c:	b.n	ff48 <_svfprintf_r+0x1338>
    ff7e:	ldr	r3, [sp, #32]
    ff80:	ands.w	r1, r8, #512	; 0x200
    ff84:	itte	ne
    ff86:	movne	r1, r2
    ff88:	ldrne.w	r2, [r3], #4
    ff8c:	ldreq.w	r2, [r3], #4
    ff90:	str	r3, [sp, #32]
    ff92:	it	ne
    ff94:	uxtbne	r2, r2
    ff96:	b.w	f224 <_svfprintf_r+0x614>
    ff9a:	ldr	r3, [sp, #8]
    ff9c:	ands.w	r1, r3, #512	; 0x200
    ffa0:	ldr	r3, [sp, #32]
    ffa2:	itte	ne
    ffa4:	movne	r1, r2
    ffa6:	ldrne.w	r2, [r3], #4
    ffaa:	ldreq.w	r2, [r3], #4
    ffae:	str	r3, [sp, #32]
    ffb0:	it	ne
    ffb2:	uxtbne	r2, r2
    ffb4:	movs	r3, #1
    ffb6:	b.w	f15a <_svfprintf_r+0x54a>
    ffba:	ldr	r3, [sp, #32]
    ffbc:	ands.w	r1, r8, #512	; 0x200
    ffc0:	itte	ne
    ffc2:	movne	r1, r2
    ffc4:	ldrne.w	r2, [r3], #4
    ffc8:	ldreq.w	r2, [r3], #4
    ffcc:	str	r3, [sp, #32]
    ffce:	it	ne
    ffd0:	uxtbne	r2, r2
    ffd2:	b.n	fa72 <_svfprintf_r+0xe62>
    ffd4:	mov	sl, r1
    ffd6:	adds	r3, #1
    ffd8:	ldr	r1, [pc, #180]	; (10090 <_svfprintf_r+0x1480>)
    ffda:	str.w	r5, [sl, #4]
    ffde:	add	r2, r5
    ffe0:	cmp	r3, #7
    ffe2:	strd	r3, r2, [sp, #148]	; 0x94
    ffe6:	str.w	r1, [sl]
    ffea:	bgt.w	10260 <_svfprintf_r+0x1650>
    ffee:	add.w	sl, sl, #8
    fff2:	b.w	f70e <_svfprintf_r+0xafe>
    fff6:	movs	r3, #0
    fff8:	mov	r1, r3
    fffa:	str	r6, [sp, #0]
    fffc:	add	r2, sp, #116	; 0x74
    fffe:	mov	r0, fp
   10000:	bl	11938 <_wcsrtombs_r>
   10004:	mov	r3, r0
   10006:	adds	r3, #1
   10008:	str	r0, [sp, #20]
   1000a:	beq.w	105f0 <_svfprintf_r+0x19e0>
   1000e:	str	r4, [sp, #116]	; 0x74
   10010:	ldr	r3, [sp, #20]
   10012:	cmp	r3, #0
   10014:	beq.n	100b4 <_svfprintf_r+0x14a4>
   10016:	cmp	r3, #99	; 0x63
   10018:	bgt.w	1024c <_svfprintf_r+0x163c>
   1001c:	movs	r3, #0
   1001e:	str	r3, [sp, #28]
   10020:	add	r4, sp, #220	; 0xdc
   10022:	movs	r2, #8
   10024:	movs	r1, #0
   10026:	mov	r0, r6
   10028:	bl	dcd0 <memset>
   1002c:	ldr	r5, [sp, #20]
   1002e:	str	r6, [sp, #0]
   10030:	mov	r3, r5
   10032:	add	r2, sp, #116	; 0x74
   10034:	mov	r1, r4
   10036:	mov	r0, fp
   10038:	bl	11938 <_wcsrtombs_r>
   1003c:	cmp	r5, r0
   1003e:	bne.w	1073a <_svfprintf_r+0x1b2a>
   10042:	ldr	r2, [sp, #20]
   10044:	movs	r3, #0
   10046:	strb	r3, [r4, r2]
   10048:	bic.w	r2, r2, r2, asr #31
   1004c:	strd	r3, r3, [sp, #48]	; 0x30
   10050:	ldrb.w	r1, [sp, #103]	; 0x67
   10054:	str	r3, [sp, #12]
   10056:	str	r2, [sp, #8]
   10058:	str	r3, [sp, #60]	; 0x3c
   1005a:	b.w	efd2 <_svfprintf_r+0x3c2>
   1005e:	movs	r1, #45	; 0x2d
   10060:	strb.w	r1, [sp, #103]	; 0x67
   10064:	b.w	efb0 <_svfprintf_r+0x3a0>
   10068:	ldr	r3, [sp, #88]	; 0x58
   1006a:	ldr	r1, [sp, #84]	; 0x54
   1006c:	sub.w	fp, fp, r3
   10070:	mov	r2, r3
   10072:	mov	r0, fp
   10074:	bl	de00 <strncpy>
   10078:	ldrb.w	r2, [sl, #1]
   1007c:	ldr	r3, [pc, #20]	; (10094 <_svfprintf_r+0x1484>)
   1007e:	cbz	r2, 10084 <_svfprintf_r+0x1474>
   10080:	add.w	sl, sl, #1
   10084:	mov.w	ip, #0
   10088:	b.n	fcdc <_svfprintf_r+0x10cc>
   1008a:	nop
   1008c:	.word	0x20000e8c
   10090:	.word	0x20001300
   10094:	.word	0xcccccccd
   10098:	vmov	r1, s22
   1009c:	add	r2, sp, #144	; 0x90
   1009e:	mov	r0, fp
   100a0:	bl	11978 <__ssprint_r>
   100a4:	cmp	r0, #0
   100a6:	bne.w	f4da <_svfprintf_r+0x8ca>
   100aa:	ldr	r1, [sp, #108]	; 0x6c
   100ac:	ldr	r2, [sp, #152]	; 0x98
   100ae:	add.w	sl, sp, #156	; 0x9c
   100b2:	b.n	fdae <_svfprintf_r+0x119e>
   100b4:	ldr	r3, [sp, #20]
   100b6:	ldrb.w	r1, [sp, #103]	; 0x67
   100ba:	str	r3, [sp, #60]	; 0x3c
   100bc:	strd	r3, r3, [sp, #8]
   100c0:	strd	r3, r3, [sp, #48]	; 0x30
   100c4:	str	r3, [sp, #28]
   100c6:	b.w	efd2 <_svfprintf_r+0x3c2>
   100ca:	ldr	r1, [sp, #56]	; 0x38
   100cc:	ldr	r0, [sp, #20]
   100ce:	adds	r5, r4, r1
   100d0:	subs	r5, r5, r0
   100d2:	subs	r4, r1, r3
   100d4:	cmp	r5, r4
   100d6:	it	ge
   100d8:	movge	r5, r4
   100da:	b.w	f778 <_svfprintf_r+0xb68>
   100de:	ldr	r3, [sp, #32]
   100e0:	ldr	r1, [sp, #16]
   100e2:	ldr.w	r2, [r3], #4
   100e6:	str	r3, [sp, #32]
   100e8:	strh	r1, [r2, #0]
   100ea:	mov	r4, r9
   100ec:	b.w	ec74 <_svfprintf_r+0x64>
   100f0:	ldrsb.w	r2, [r3], #4
   100f4:	str	r3, [sp, #32]
   100f6:	asrs	r1, r2, #31
   100f8:	mov	r3, r1
   100fa:	b.w	f0b4 <_svfprintf_r+0x4a4>
   100fe:	ldr	r2, [sp, #12]
   10100:	movs	r1, #2
   10102:	add	r3, sp, #136	; 0x88
   10104:	str	r3, [sp, #4]
   10106:	add	r3, sp, #116	; 0x74
   10108:	str	r3, [sp, #0]
   1010a:	mov	r0, fp
   1010c:	add	r3, sp, #108	; 0x6c
   1010e:	vmov.f64	d0, d10
   10112:	str	r2, [sp, #8]
   10114:	bl	10c00 <_dtoa_r>
   10118:	cmp	r5, #71	; 0x47
   1011a:	ldr	r2, [sp, #8]
   1011c:	mov	r4, r0
   1011e:	beq.w	103e4 <_svfprintf_r+0x17d4>
   10122:	cmp	r5, #70	; 0x46
   10124:	add	r0, r2
   10126:	bne.n	10134 <_svfprintf_r+0x1524>
   10128:	ldrb	r3, [r4, #0]
   1012a:	cmp	r3, #48	; 0x30
   1012c:	beq.w	1060e <_svfprintf_r+0x19fe>
   10130:	ldr	r2, [sp, #108]	; 0x6c
   10132:	add	r0, r2
   10134:	vcmp.f64	d10, #0.0
   10138:	vmrs	APSR_nzcv, fpscr
   1013c:	bne.w	103cc <_svfprintf_r+0x17bc>
   10140:	mov	r3, r0
   10142:	subs	r3, r3, r4
   10144:	str	r3, [sp, #56]	; 0x38
   10146:	cmp	r5, #71	; 0x47
   10148:	beq.w	1036c <_svfprintf_r+0x175c>
   1014c:	cmp	r5, #70	; 0x46
   1014e:	beq.w	104bc <_svfprintf_r+0x18ac>
   10152:	ldr	r3, [sp, #108]	; 0x6c
   10154:	str	r3, [sp, #48]	; 0x30
   10156:	ldr	r3, [sp, #48]	; 0x30
   10158:	cmp	r5, #65	; 0x41
   1015a:	add.w	r3, r3, #4294967295
   1015e:	str	r3, [sp, #108]	; 0x6c
   10160:	beq.w	1052e <_svfprintf_r+0x191e>
   10164:	ldrb.w	r2, [sp, #44]	; 0x2c
   10168:	movs	r1, #0
   1016a:	cmp	r3, #0
   1016c:	it	lt
   1016e:	ldrlt	r3, [sp, #48]	; 0x30
   10170:	strb.w	r2, [sp, #120]	; 0x78
   10174:	itte	lt
   10176:	rsblt	r3, r3, #1
   1017a:	movlt	r2, #45	; 0x2d
   1017c:	movge	r2, #43	; 0x2b
   1017e:	cmp	r3, #9
   10180:	strb.w	r2, [sp, #121]	; 0x79
   10184:	ble.w	1053c <_svfprintf_r+0x192c>
   10188:	add.w	r5, sp, #143	; 0x8f
   1018c:	ldr.w	ip, [pc, #1052]	; 105ac <_svfprintf_r+0x199c>
   10190:	mov	r2, r5
   10192:	mov	r0, r2
   10194:	smull	r2, r1, ip, r3
   10198:	asrs	r2, r3, #31
   1019a:	rsb	r2, r2, r1, asr #2
   1019e:	add.w	r1, r2, r2, lsl #2
   101a2:	sub.w	r1, r3, r1, lsl #1
   101a6:	adds	r1, #48	; 0x30
   101a8:	strb.w	r1, [r0, #-1]
   101ac:	mov	r1, r3
   101ae:	cmp	r1, #99	; 0x63
   101b0:	mov	r3, r2
   101b2:	add.w	r2, r0, #4294967295
   101b6:	bgt.n	10192 <_svfprintf_r+0x1582>
   101b8:	adds	r3, #48	; 0x30
   101ba:	uxtb	r1, r3
   101bc:	subs	r3, r0, #2
   101be:	cmp	r5, r3
   101c0:	strb.w	r1, [r2, #-1]
   101c4:	bls.w	106de <_svfprintf_r+0x1ace>
   101c8:	mov	r3, r2
   101ca:	add.w	r2, sp, #122	; 0x7a
   101ce:	b.n	101d4 <_svfprintf_r+0x15c4>
   101d0:	ldrb.w	r1, [r3], #1
   101d4:	strb.w	r1, [r2], #1
   101d8:	cmp	r5, r3
   101da:	bne.n	101d0 <_svfprintf_r+0x15c0>
   101dc:	add.w	r3, sp, #145	; 0x91
   101e0:	add.w	r2, sp, #122	; 0x7a
   101e4:	subs	r3, r3, r0
   101e6:	add	r3, r2
   101e8:	add	r2, sp, #120	; 0x78
   101ea:	subs	r3, r3, r2
   101ec:	str	r3, [sp, #80]	; 0x50
   101ee:	ldr	r3, [sp, #56]	; 0x38
   101f0:	ldr	r2, [sp, #80]	; 0x50
   101f2:	cmp	r3, #1
   101f4:	add	r2, r3
   101f6:	str	r2, [sp, #20]
   101f8:	ble.w	10602 <_svfprintf_r+0x19f2>
   101fc:	ldr	r3, [sp, #20]
   101fe:	ldr	r2, [sp, #64]	; 0x40
   10200:	add	r3, r2
   10202:	str	r3, [sp, #20]
   10204:	bic.w	r3, r6, #1024	; 0x400
   10208:	ldr	r2, [sp, #20]
   1020a:	orr.w	r8, r3, #256	; 0x100
   1020e:	movs	r3, #0
   10210:	strd	r3, r3, [sp, #48]	; 0x30
   10214:	bic.w	r2, r2, r2, asr #31
   10218:	str	r3, [sp, #60]	; 0x3c
   1021a:	str	r2, [sp, #8]
   1021c:	ldr	r3, [sp, #36]	; 0x24
   1021e:	cmp	r3, #0
   10220:	bne.w	10386 <_svfprintf_r+0x1776>
   10224:	ldrb.w	r1, [sp, #103]	; 0x67
   10228:	str	r3, [sp, #12]
   1022a:	b.w	efd2 <_svfprintf_r+0x3c2>
   1022e:	mov	r0, r4
   10230:	bl	e040 <strlen>
   10234:	mov	r2, r0
   10236:	str	r0, [sp, #20]
   10238:	b.w	f07c <_svfprintf_r+0x46c>
   1023c:	vmov	r1, s22
   10240:	add	r2, sp, #144	; 0x90
   10242:	mov	r0, fp
   10244:	bl	11978 <__ssprint_r>
   10248:	b.w	ee26 <_svfprintf_r+0x216>
   1024c:	adds	r1, r3, #1
   1024e:	mov	r0, fp
   10250:	bl	cebc <_malloc_r>
   10254:	mov	r4, r0
   10256:	cmp	r0, #0
   10258:	beq.w	105f0 <_svfprintf_r+0x19e0>
   1025c:	str	r0, [sp, #28]
   1025e:	b.n	10022 <_svfprintf_r+0x1412>
   10260:	vmov	r1, s22
   10264:	add	r2, sp, #144	; 0x90
   10266:	mov	r0, fp
   10268:	bl	11978 <__ssprint_r>
   1026c:	cmp	r0, #0
   1026e:	bne.w	f4da <_svfprintf_r+0x8ca>
   10272:	ldr	r2, [sp, #152]	; 0x98
   10274:	add.w	sl, sp, #156	; 0x9c
   10278:	b.w	f70e <_svfprintf_r+0xafe>
   1027c:	vmov	r1, s22
   10280:	add	r2, sp, #144	; 0x90
   10282:	mov	r0, fp
   10284:	bl	11978 <__ssprint_r>
   10288:	cmp	r0, #0
   1028a:	bne.w	f4da <_svfprintf_r+0x8ca>
   1028e:	ldrd	r3, r2, [sp, #148]	; 0x94
   10292:	ldr	r1, [sp, #108]	; 0x6c
   10294:	add.w	sl, sp, #156	; 0x9c
   10298:	b.n	ff2e <_svfprintf_r+0x131e>
   1029a:	movs	r3, #6
   1029c:	str	r3, [sp, #12]
   1029e:	b.w	f9a8 <_svfprintf_r+0xd98>
   102a2:	ldr	r3, [sp, #12]
   102a4:	movs	r1, #2
   102a6:	adds	r2, r3, #1
   102a8:	b.n	10102 <_svfprintf_r+0x14f2>
   102aa:	ldr	r2, [sp, #12]
   102ac:	movs	r1, #3
   102ae:	b.n	10102 <_svfprintf_r+0x14f2>
   102b0:	add	r0, sp, #108	; 0x6c
   102b2:	vmov.f64	d0, d10
   102b6:	bl	109a8 <frexp>
   102ba:	vmov.f64	d7, #64	; 0x3e000000  0.125
   102be:	vmul.f64	d0, d0, d7
   102c2:	vcmp.f64	d0, #0.0
   102c6:	vmrs	APSR_nzcv, fpscr
   102ca:	bne.n	102d0 <_svfprintf_r+0x16c0>
   102cc:	movs	r3, #1
   102ce:	str	r3, [sp, #108]	; 0x6c
   102d0:	ldr	r0, [pc, #716]	; (105a0 <_svfprintf_r+0x1990>)
   102d2:	ldr	r3, [sp, #12]
   102d4:	vmov.f64	d5, #48	; 0x41800000  16.0
   102d8:	subs	r3, #1
   102da:	mov	r2, r4
   102dc:	b.n	102e8 <_svfprintf_r+0x16d8>
   102de:	vcmp.f64	d0, #0.0
   102e2:	vmrs	APSR_nzcv, fpscr
   102e6:	beq.n	10310 <_svfprintf_r+0x1700>
   102e8:	vmul.f64	d0, d0, d5
   102ec:	vcvt.s32.f64	s15, d0
   102f0:	cmp.w	r3, #4294967295
   102f4:	vmov	r1, s15
   102f8:	ldrb	r1, [r0, r1]
   102fa:	vcvt.f64.s32	d6, s15
   102fe:	mov	ip, r2
   10300:	vsub.f64	d0, d0, d6
   10304:	strb.w	r1, [r2], #1
   10308:	mov	r1, r3
   1030a:	add.w	r3, r3, #4294967295
   1030e:	bne.n	102de <_svfprintf_r+0x16ce>
   10310:	vmov.f64	d6, #96	; 0x3f000000  0.5
   10314:	vcmpe.f64	d0, d6
   10318:	vmrs	APSR_nzcv, fpscr
   1031c:	bgt.w	105b0 <_svfprintf_r+0x19a0>
   10320:	vcmp.f64	d0, d6
   10324:	vmrs	APSR_nzcv, fpscr
   10328:	bne.n	10334 <_svfprintf_r+0x1724>
   1032a:	vmov	r3, s15
   1032e:	lsls	r3, r3, #31
   10330:	bmi.w	105b0 <_svfprintf_r+0x19a0>
   10334:	cmp	r1, #0
   10336:	blt.n	10346 <_svfprintf_r+0x1736>
   10338:	adds	r3, r1, #1
   1033a:	add	r3, r2
   1033c:	movs	r1, #48	; 0x30
   1033e:	strb.w	r1, [r2], #1
   10342:	cmp	r3, r2
   10344:	bne.n	1033e <_svfprintf_r+0x172e>
   10346:	subs	r3, r2, r4
   10348:	str	r3, [sp, #56]	; 0x38
   1034a:	b.n	10146 <_svfprintf_r+0x1536>
   1034c:	ldr	r4, [sp, #44]	; 0x2c
   1034e:	ldr	r3, [sp, #56]	; 0x38
   10350:	ldr.w	r9, [sp, #36]	; 0x24
   10354:	ldr.w	r8, [sp, #40]	; 0x28
   10358:	str	r6, [sp, #76]	; 0x4c
   1035a:	adds	r3, r4, r3
   1035c:	cmp	r5, r3
   1035e:	mov	r1, r5
   10360:	it	cs
   10362:	movcs	r1, r3
   10364:	mov	sl, r0
   10366:	str	r1, [sp, #20]
   10368:	b.w	f71c <_svfprintf_r+0xb0c>
   1036c:	ldr	r3, [sp, #108]	; 0x6c
   1036e:	str	r3, [sp, #48]	; 0x30
   10370:	adds	r2, r3, #3
   10372:	blt.n	1037a <_svfprintf_r+0x176a>
   10374:	ldr	r2, [sp, #12]
   10376:	cmp	r3, r2
   10378:	ble.n	10394 <_svfprintf_r+0x1784>
   1037a:	ldr	r3, [sp, #44]	; 0x2c
   1037c:	subs	r3, #2
   1037e:	str	r3, [sp, #44]	; 0x2c
   10380:	bic.w	r5, r3, #32
   10384:	b.n	10156 <_svfprintf_r+0x1546>
   10386:	movs	r1, #45	; 0x2d
   10388:	movs	r3, #0
   1038a:	strb.w	r1, [sp, #103]	; 0x67
   1038e:	str	r3, [sp, #12]
   10390:	b.w	efd8 <_svfprintf_r+0x3c8>
   10394:	ldr	r3, [sp, #48]	; 0x30
   10396:	ldr	r2, [sp, #56]	; 0x38
   10398:	cmp	r3, r2
   1039a:	blt.w	10518 <_svfprintf_r+0x1908>
   1039e:	lsls	r0, r6, #31
   103a0:	ldr	r3, [sp, #48]	; 0x30
   103a2:	bpl.w	1060a <_svfprintf_r+0x19fa>
   103a6:	ldr	r2, [sp, #64]	; 0x40
   103a8:	add	r3, r2
   103aa:	str	r3, [sp, #20]
   103ac:	lsls	r1, r6, #21
   103ae:	bpl.n	103b8 <_svfprintf_r+0x17a8>
   103b0:	ldr	r3, [sp, #48]	; 0x30
   103b2:	cmp	r3, #0
   103b4:	bgt.w	10622 <_svfprintf_r+0x1a12>
   103b8:	ldr	r3, [sp, #20]
   103ba:	bic.w	r3, r3, r3, asr #31
   103be:	str	r3, [sp, #8]
   103c0:	movs	r3, #103	; 0x67
   103c2:	str	r3, [sp, #44]	; 0x2c
   103c4:	movs	r3, #0
   103c6:	str	r3, [sp, #60]	; 0x3c
   103c8:	str	r3, [sp, #52]	; 0x34
   103ca:	b.n	1021c <_svfprintf_r+0x160c>
   103cc:	ldr	r3, [sp, #136]	; 0x88
   103ce:	cmp	r3, r0
   103d0:	bcs.w	10142 <_svfprintf_r+0x1532>
   103d4:	movs	r1, #48	; 0x30
   103d6:	adds	r2, r3, #1
   103d8:	str	r2, [sp, #136]	; 0x88
   103da:	strb	r1, [r3, #0]
   103dc:	ldr	r3, [sp, #136]	; 0x88
   103de:	cmp	r0, r3
   103e0:	bhi.n	103d6 <_svfprintf_r+0x17c6>
   103e2:	b.n	10142 <_svfprintf_r+0x1532>
   103e4:	lsls	r3, r6, #31
   103e6:	bmi.w	10538 <_svfprintf_r+0x1928>
   103ea:	ldr	r3, [sp, #136]	; 0x88
   103ec:	b.n	10142 <_svfprintf_r+0x1532>
   103ee:	add	r2, sp, #144	; 0x90
   103f0:	mov	r0, fp
   103f2:	str	r1, [sp, #20]
   103f4:	bl	11978 <__ssprint_r>
   103f8:	cmp	r0, #0
   103fa:	bne.w	f4da <_svfprintf_r+0x8ca>
   103fe:	ldrb.w	ip, [r6]
   10402:	ldr	r2, [sp, #152]	; 0x98
   10404:	ldr	r1, [sp, #20]
   10406:	add	r0, sp, #156	; 0x9c
   10408:	add	r5, ip
   1040a:	b.w	fbe6 <_svfprintf_r+0xfd6>
   1040e:	vmov	r1, s22
   10412:	add	r2, sp, #144	; 0x90
   10414:	mov	r0, fp
   10416:	bl	11978 <__ssprint_r>
   1041a:	cmp	r0, #0
   1041c:	bne.w	f4da <_svfprintf_r+0x8ca>
   10420:	ldr	r2, [sp, #152]	; 0x98
   10422:	add.w	sl, sp, #156	; 0x9c
   10426:	b.w	f700 <_svfprintf_r+0xaf0>
   1042a:	movs	r3, #120	; 0x78
   1042c:	strb.w	r3, [sp, #105]	; 0x69
   10430:	movs	r3, #48	; 0x30
   10432:	strb.w	r3, [sp, #104]	; 0x68
   10436:	ldr	r3, [sp, #12]
   10438:	cmp	r3, #99	; 0x63
   1043a:	orr.w	r6, r8, #2
   1043e:	bgt.w	1058e <_svfprintf_r+0x197e>
   10442:	movs	r3, #0
   10444:	str	r3, [sp, #28]
   10446:	add	r4, sp, #220	; 0xdc
   10448:	vmov	r3, s17
   1044c:	cmp	r3, #0
   1044e:	orr.w	r8, r8, #258	; 0x102
   10452:	blt.n	104ac <_svfprintf_r+0x189c>
   10454:	vmov.f64	d10, d8
   10458:	ldr	r3, [sp, #44]	; 0x2c
   1045a:	bic.w	r5, r3, #32
   1045e:	movs	r3, #0
   10460:	str	r3, [sp, #36]	; 0x24
   10462:	ldr	r3, [sp, #44]	; 0x2c
   10464:	cmp	r3, #97	; 0x61
   10466:	bne.w	f9c4 <_svfprintf_r+0xdb4>
   1046a:	vmov.f64	d0, d10
   1046e:	add	r0, sp, #108	; 0x6c
   10470:	bl	109a8 <frexp>
   10474:	vmov.f64	d7, #64	; 0x3e000000  0.125
   10478:	vmul.f64	d0, d0, d7
   1047c:	vcmp.f64	d0, #0.0
   10480:	vmrs	APSR_nzcv, fpscr
   10484:	bne.n	1048a <_svfprintf_r+0x187a>
   10486:	movs	r3, #1
   10488:	str	r3, [sp, #108]	; 0x6c
   1048a:	ldr	r0, [pc, #280]	; (105a4 <_svfprintf_r+0x1994>)
   1048c:	b.n	102d2 <_svfprintf_r+0x16c2>
   1048e:	vmov	r1, s22
   10492:	add	r2, sp, #144	; 0x90
   10494:	mov	r0, fp
   10496:	bl	11978 <__ssprint_r>
   1049a:	cmp	r0, #0
   1049c:	bne.w	f4da <_svfprintf_r+0x8ca>
   104a0:	ldr	r3, [sp, #108]	; 0x6c
   104a2:	ldr	r2, [sp, #152]	; 0x98
   104a4:	add.w	sl, sp, #156	; 0x9c
   104a8:	b.w	f748 <_svfprintf_r+0xb38>
   104ac:	ldr	r3, [sp, #44]	; 0x2c
   104ae:	bic.w	r5, r3, #32
   104b2:	movs	r3, #45	; 0x2d
   104b4:	str	r3, [sp, #36]	; 0x24
   104b6:	vneg.f64	d10, d8
   104ba:	b.n	10462 <_svfprintf_r+0x1852>
   104bc:	ldr	r2, [sp, #108]	; 0x6c
   104be:	str	r2, [sp, #48]	; 0x30
   104c0:	cmp	r2, #0
   104c2:	and.w	r3, r6, #1
   104c6:	ble.w	106e4 <_svfprintf_r+0x1ad4>
   104ca:	ldr	r1, [sp, #12]
   104cc:	orrs	r3, r1
   104ce:	bne.w	10670 <_svfprintf_r+0x1a60>
   104d2:	ldr	r3, [sp, #48]	; 0x30
   104d4:	str	r3, [sp, #20]
   104d6:	movs	r3, #102	; 0x66
   104d8:	str	r3, [sp, #44]	; 0x2c
   104da:	lsls	r2, r6, #21
   104dc:	bmi.w	10626 <_svfprintf_r+0x1a16>
   104e0:	ldr	r3, [sp, #20]
   104e2:	bic.w	r3, r3, r3, asr #31
   104e6:	str	r3, [sp, #8]
   104e8:	b.n	103c4 <_svfprintf_r+0x17b4>
   104ea:	vmov	r1, s22
   104ee:	add	r2, sp, #144	; 0x90
   104f0:	mov	r0, fp
   104f2:	bl	11978 <__ssprint_r>
   104f6:	cmp	r0, #0
   104f8:	bne.w	f4da <_svfprintf_r+0x8ca>
   104fc:	ldr	r4, [sp, #108]	; 0x6c
   104fe:	ldr	r3, [sp, #56]	; 0x38
   10500:	ldr	r2, [sp, #152]	; 0x98
   10502:	subs	r4, r3, r4
   10504:	add.w	sl, sp, #156	; 0x9c
   10508:	b.w	f778 <_svfprintf_r+0xb68>
   1050c:	movs	r3, #88	; 0x58
   1050e:	b.n	1042c <_svfprintf_r+0x181c>
   10510:	movs	r2, #0
   10512:	str	r2, [sp, #12]
   10514:	b.w	eccc <_svfprintf_r+0xbc>
   10518:	ldr	r3, [sp, #56]	; 0x38
   1051a:	ldr	r2, [sp, #64]	; 0x40
   1051c:	adds	r2, r3, r2
   1051e:	ldr	r3, [sp, #48]	; 0x30
   10520:	str	r2, [sp, #20]
   10522:	cmp	r3, #0
   10524:	ble.w	1067e <_svfprintf_r+0x1a6e>
   10528:	movs	r3, #103	; 0x67
   1052a:	str	r3, [sp, #44]	; 0x2c
   1052c:	b.n	104da <_svfprintf_r+0x18ca>
   1052e:	ldr	r2, [sp, #44]	; 0x2c
   10530:	adds	r2, #15
   10532:	uxtb	r2, r2
   10534:	movs	r1, #1
   10536:	b.n	1016a <_svfprintf_r+0x155a>
   10538:	adds	r0, r4, r2
   1053a:	b.n	10134 <_svfprintf_r+0x1524>
   1053c:	cmp	r1, #0
   1053e:	bne.w	10692 <_svfprintf_r+0x1a82>
   10542:	movs	r2, #48	; 0x30
   10544:	strb.w	r2, [sp, #122]	; 0x7a
   10548:	add.w	r2, sp, #123	; 0x7b
   1054c:	adds	r3, #48	; 0x30
   1054e:	strb.w	r3, [r2], #1
   10552:	add	r3, sp, #120	; 0x78
   10554:	subs	r3, r2, r3
   10556:	str	r3, [sp, #80]	; 0x50
   10558:	b.n	101ee <_svfprintf_r+0x15de>
   1055a:	adds	r3, #1
   1055c:	ldr	r1, [pc, #72]	; (105a8 <_svfprintf_r+0x1998>)
   1055e:	str.w	r5, [sl, #4]
   10562:	add	r2, r5
   10564:	cmp	r3, #7
   10566:	strd	r3, r2, [sp, #148]	; 0x94
   1056a:	str.w	r1, [sl]
   1056e:	ble.w	fdd8 <_svfprintf_r+0x11c8>
   10572:	vmov	r1, s22
   10576:	add	r2, sp, #144	; 0x90
   10578:	mov	r0, fp
   1057a:	bl	11978 <__ssprint_r>
   1057e:	cmp	r0, #0
   10580:	bne.w	f4da <_svfprintf_r+0x8ca>
   10584:	ldrd	r3, r2, [sp, #148]	; 0x94
   10588:	add.w	sl, sp, #156	; 0x9c
   1058c:	b.n	fddc <_svfprintf_r+0x11cc>
   1058e:	adds	r1, r3, #1
   10590:	mov	r0, fp
   10592:	bl	cebc <_malloc_r>
   10596:	mov	r4, r0
   10598:	cbz	r0, 105f0 <_svfprintf_r+0x19e0>
   1059a:	str	r0, [sp, #28]
   1059c:	b.n	10448 <_svfprintf_r+0x1838>
   1059e:	nop
   105a0:	.word	0x20000e70
   105a4:	.word	0x20000e5c
   105a8:	.word	0x20001300
   105ac:	.word	0x66666667
   105b0:	str.w	ip, [sp, #136]	; 0x88
   105b4:	ldrb.w	r1, [r2, #-1]
   105b8:	ldrb.w	ip, [r0, #15]
   105bc:	cmp	r1, ip
   105be:	mov	r3, r2
   105c0:	bne.n	105d8 <_svfprintf_r+0x19c8>
   105c2:	mov.w	lr, #48	; 0x30
   105c6:	strb.w	lr, [r3, #-1]
   105ca:	ldr	r3, [sp, #136]	; 0x88
   105cc:	subs	r1, r3, #1
   105ce:	str	r1, [sp, #136]	; 0x88
   105d0:	ldrb.w	r1, [r3, #-1]
   105d4:	cmp	ip, r1
   105d6:	beq.n	105c6 <_svfprintf_r+0x19b6>
   105d8:	cmp	r1, #57	; 0x39
   105da:	itet	ne
   105dc:	addne	r1, #1
   105de:	ldrbeq	r1, [r0, #10]
   105e0:	uxtbne	r1, r1
   105e2:	strb.w	r1, [r3, #-1]
   105e6:	b.n	10346 <_svfprintf_r+0x1736>
   105e8:	movs	r3, #0
   105ea:	mov	r8, r2
   105ec:	str	r3, [sp, #28]
   105ee:	b.n	104b2 <_svfprintf_r+0x18a2>
   105f0:	vmov	r2, s22
   105f4:	ldrsh.w	r3, [r2, #12]
   105f8:	orr.w	r3, r3, #64	; 0x40
   105fc:	strh	r3, [r2, #12]
   105fe:	b.w	ee2e <_svfprintf_r+0x21e>
   10602:	lsls	r5, r6, #31
   10604:	bpl.w	10204 <_svfprintf_r+0x15f4>
   10608:	b.n	101fc <_svfprintf_r+0x15ec>
   1060a:	str	r3, [sp, #20]
   1060c:	b.n	103ac <_svfprintf_r+0x179c>
   1060e:	vcmp.f64	d10, #0.0
   10612:	vmrs	APSR_nzcv, fpscr
   10616:	beq.w	10130 <_svfprintf_r+0x1520>
   1061a:	rsb	r2, r2, #1
   1061e:	str	r2, [sp, #108]	; 0x6c
   10620:	b.n	10132 <_svfprintf_r+0x1522>
   10622:	movs	r3, #103	; 0x67
   10624:	str	r3, [sp, #44]	; 0x2c
   10626:	ldr	r1, [sp, #76]	; 0x4c
   10628:	ldrb	r3, [r1, #0]
   1062a:	cmp	r3, #255	; 0xff
   1062c:	beq.n	10722 <_svfprintf_r+0x1b12>
   1062e:	movs	r5, #0
   10630:	ldr	r2, [sp, #48]	; 0x30
   10632:	mov	r0, r5
   10634:	b.n	1063e <_svfprintf_r+0x1a2e>
   10636:	adds	r0, #1
   10638:	adds	r1, #1
   1063a:	cmp	r3, #255	; 0xff
   1063c:	beq.n	10650 <_svfprintf_r+0x1a40>
   1063e:	cmp	r3, r2
   10640:	bge.n	10650 <_svfprintf_r+0x1a40>
   10642:	subs	r2, r2, r3
   10644:	ldrb	r3, [r1, #1]
   10646:	cmp	r3, #0
   10648:	bne.n	10636 <_svfprintf_r+0x1a26>
   1064a:	ldrb	r3, [r1, #0]
   1064c:	adds	r5, #1
   1064e:	b.n	1063a <_svfprintf_r+0x1a2a>
   10650:	str	r2, [sp, #48]	; 0x30
   10652:	str	r1, [sp, #76]	; 0x4c
   10654:	str	r0, [sp, #52]	; 0x34
   10656:	str	r5, [sp, #60]	; 0x3c
   10658:	ldr	r2, [sp, #60]	; 0x3c
   1065a:	ldr	r3, [sp, #52]	; 0x34
   1065c:	ldr	r1, [sp, #88]	; 0x58
   1065e:	add	r3, r2
   10660:	ldr	r2, [sp, #20]
   10662:	mla	r3, r1, r3, r2
   10666:	str	r3, [sp, #20]
   10668:	bic.w	r3, r3, r3, asr #31
   1066c:	str	r3, [sp, #8]
   1066e:	b.n	1021c <_svfprintf_r+0x160c>
   10670:	ldr	r3, [sp, #64]	; 0x40
   10672:	adds	r3, r2, r3
   10674:	add	r1, r3
   10676:	movs	r3, #102	; 0x66
   10678:	str	r1, [sp, #20]
   1067a:	str	r3, [sp, #44]	; 0x2c
   1067c:	b.n	104da <_svfprintf_r+0x18ca>
   1067e:	rsb	r3, r3, #1
   10682:	add	r2, r3
   10684:	bic.w	r3, r2, r2, asr #31
   10688:	str	r3, [sp, #8]
   1068a:	movs	r3, #103	; 0x67
   1068c:	str	r2, [sp, #20]
   1068e:	str	r3, [sp, #44]	; 0x2c
   10690:	b.n	103c4 <_svfprintf_r+0x17b4>
   10692:	add.w	r2, sp, #122	; 0x7a
   10696:	b.n	1054c <_svfprintf_r+0x193c>
   10698:	ldr	r3, [sp, #12]
   1069a:	ldr.w	r9, [sp, #8]
   1069e:	ldr.w	r8, [sp, #28]
   106a2:	str	r3, [sp, #20]
   106a4:	b.n	10010 <_svfprintf_r+0x1400>
   106a6:	vmov	r3, s17
   106aa:	cmp	r3, #0
   106ac:	ite	lt
   106ae:	movlt	r1, #45	; 0x2d
   106b0:	ldrbge.w	r1, [sp, #103]	; 0x67
   106b4:	ldr	r4, [pc, #148]	; (1074c <_svfprintf_r+0x1b3c>)
   106b6:	ldr	r3, [pc, #152]	; (10750 <_svfprintf_r+0x1b40>)
   106b8:	it	lt
   106ba:	strblt.w	r1, [sp, #103]	; 0x67
   106be:	bic.w	r8, r8, #128	; 0x80
   106c2:	b.w	efb8 <_svfprintf_r+0x3a8>
   106c6:	ldr	r3, [sp, #12]
   106c8:	str	r3, [sp, #8]
   106ca:	str	r3, [sp, #20]
   106cc:	movs	r3, #115	; 0x73
   106ce:	ldrb.w	r1, [sp, #103]	; 0x67
   106d2:	str	r0, [sp, #12]
   106d4:	str	r0, [sp, #60]	; 0x3c
   106d6:	str	r0, [sp, #52]	; 0x34
   106d8:	str	r3, [sp, #44]	; 0x2c
   106da:	b.w	efd2 <_svfprintf_r+0x3c2>
   106de:	movs	r3, #2
   106e0:	str	r3, [sp, #80]	; 0x50
   106e2:	b.n	101ee <_svfprintf_r+0x15de>
   106e4:	ldr	r2, [sp, #12]
   106e6:	orrs	r3, r2
   106e8:	bne.n	106f6 <_svfprintf_r+0x1ae6>
   106ea:	movs	r3, #1
   106ec:	movs	r2, #102	; 0x66
   106ee:	str	r3, [sp, #8]
   106f0:	str	r2, [sp, #44]	; 0x2c
   106f2:	str	r3, [sp, #20]
   106f4:	b.n	103c4 <_svfprintf_r+0x17b4>
   106f6:	ldr	r3, [sp, #64]	; 0x40
   106f8:	adds	r3, #1
   106fa:	add	r2, r3
   106fc:	bic.w	r3, r2, r2, asr #31
   10700:	str	r3, [sp, #8]
   10702:	movs	r3, #102	; 0x66
   10704:	str	r2, [sp, #20]
   10706:	str	r3, [sp, #44]	; 0x2c
   10708:	b.n	103c4 <_svfprintf_r+0x17b4>
   1070a:	ldr	r2, [sp, #32]
   1070c:	ldrb.w	r3, [r9, #1]
   10710:	mov	r9, r1
   10712:	ldr.w	r1, [r2], #4
   10716:	str	r2, [sp, #32]
   10718:	orr.w	r1, r1, r1, asr #31
   1071c:	str	r1, [sp, #12]
   1071e:	b.w	ecc8 <_svfprintf_r+0xb8>
   10722:	movs	r3, #0
   10724:	str	r3, [sp, #60]	; 0x3c
   10726:	str	r3, [sp, #52]	; 0x34
   10728:	b.n	10658 <_svfprintf_r+0x1a48>
   1072a:	movs	r3, #12
   1072c:	str.w	r3, [fp]
   10730:	mov.w	r3, #4294967295
   10734:	str	r3, [sp, #16]
   10736:	b.w	ee3c <_svfprintf_r+0x22c>
   1073a:	vmov	r2, s22
   1073e:	ldrh	r3, [r2, #12]
   10740:	orr.w	r3, r3, #64	; 0x40
   10744:	strh	r3, [r2, #12]
   10746:	b.w	f4da <_svfprintf_r+0x8ca>
   1074a:	nop
   1074c:	.word	0x20000e54
   10750:	.word	0x20000e58

00010754 <_fclose_r>:
   10754:	push	{r4, r5, r6, lr}
   10756:	cmp	r1, #0
   10758:	beq.n	107f2 <_fclose_r+0x9e>
   1075a:	mov	r6, r0
   1075c:	mov	r4, r1
   1075e:	cbz	r0, 10766 <_fclose_r+0x12>
   10760:	ldr	r3, [r0, #52]	; 0x34
   10762:	cmp	r3, #0
   10764:	beq.n	107f8 <_fclose_r+0xa4>
   10766:	ldr	r3, [r4, #100]	; 0x64
   10768:	lsls	r0, r3, #31
   1076a:	bpl.n	107d6 <_fclose_r+0x82>
   1076c:	ldrsh.w	r3, [r4, #12]
   10770:	cmp	r3, #0
   10772:	beq.n	107f2 <_fclose_r+0x9e>
   10774:	mov	r1, r4
   10776:	mov	r0, r6
   10778:	bl	1081c <__sflush_r>
   1077c:	ldr	r3, [r4, #44]	; 0x2c
   1077e:	mov	r5, r0
   10780:	cbz	r3, 10790 <_fclose_r+0x3c>
   10782:	ldr	r1, [r4, #28]
   10784:	mov	r0, r6
   10786:	blx	r3
   10788:	cmp	r0, #0
   1078a:	it	lt
   1078c:	movlt.w	r5, #4294967295
   10790:	ldrh	r3, [r4, #12]
   10792:	lsls	r2, r3, #24
   10794:	bmi.n	10810 <_fclose_r+0xbc>
   10796:	ldr	r1, [r4, #48]	; 0x30
   10798:	cbz	r1, 107ac <_fclose_r+0x58>
   1079a:	add.w	r3, r4, #64	; 0x40
   1079e:	cmp	r1, r3
   107a0:	beq.n	107a8 <_fclose_r+0x54>
   107a2:	mov	r0, r6
   107a4:	bl	e244 <_free_r>
   107a8:	movs	r3, #0
   107aa:	str	r3, [r4, #48]	; 0x30
   107ac:	ldr	r1, [r4, #68]	; 0x44
   107ae:	cbz	r1, 107ba <_fclose_r+0x66>
   107b0:	mov	r0, r6
   107b2:	bl	e244 <_free_r>
   107b6:	movs	r3, #0
   107b8:	str	r3, [r4, #68]	; 0x44
   107ba:	bl	d980 <__sfp_lock_acquire>
   107be:	ldr	r3, [r4, #100]	; 0x64
   107c0:	movs	r2, #0
   107c2:	lsls	r3, r3, #31
   107c4:	strh	r2, [r4, #12]
   107c6:	bpl.n	10808 <_fclose_r+0xb4>
   107c8:	ldr	r0, [r4, #88]	; 0x58
   107ca:	bl	df94 <__retarget_lock_close_recursive>
   107ce:	bl	d98c <__sfp_lock_release>
   107d2:	mov	r0, r5
   107d4:	pop	{r4, r5, r6, pc}
   107d6:	ldrh	r3, [r4, #12]
   107d8:	lsls	r1, r3, #22
   107da:	bmi.n	10774 <_fclose_r+0x20>
   107dc:	ldr	r0, [r4, #88]	; 0x58
   107de:	bl	df98 <__retarget_lock_acquire_recursive>
   107e2:	ldrsh.w	r3, [r4, #12]
   107e6:	cmp	r3, #0
   107e8:	bne.n	10774 <_fclose_r+0x20>
   107ea:	ldr	r5, [r4, #100]	; 0x64
   107ec:	ands.w	r5, r5, #1
   107f0:	beq.n	107fe <_fclose_r+0xaa>
   107f2:	movs	r5, #0
   107f4:	mov	r0, r5
   107f6:	pop	{r4, r5, r6, pc}
   107f8:	bl	d944 <__sinit>
   107fc:	b.n	10766 <_fclose_r+0x12>
   107fe:	ldr	r0, [r4, #88]	; 0x58
   10800:	bl	df9c <__retarget_lock_release_recursive>
   10804:	mov	r0, r5
   10806:	pop	{r4, r5, r6, pc}
   10808:	ldr	r0, [r4, #88]	; 0x58
   1080a:	bl	df9c <__retarget_lock_release_recursive>
   1080e:	b.n	107c8 <_fclose_r+0x74>
   10810:	ldr	r1, [r4, #16]
   10812:	mov	r0, r6
   10814:	bl	e244 <_free_r>
   10818:	b.n	10796 <_fclose_r+0x42>
   1081a:	nop

0001081c <__sflush_r>:
   1081c:	ldrsh.w	r2, [r1, #12]
   10820:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10824:	mov	r4, r1
   10826:	lsls	r1, r2, #28
   10828:	mov	r8, r0
   1082a:	bmi.n	108bc <__sflush_r+0xa0>
   1082c:	ldr	r3, [r4, #4]
   1082e:	orr.w	r2, r2, #2048	; 0x800
   10832:	cmp	r3, #0
   10834:	strh	r2, [r4, #12]
   10836:	ble.n	108f6 <__sflush_r+0xda>
   10838:	ldr	r5, [r4, #40]	; 0x28
   1083a:	cmp	r5, #0
   1083c:	beq.n	108f0 <__sflush_r+0xd4>
   1083e:	movs	r3, #0
   10840:	ldr.w	r6, [r8]
   10844:	str.w	r3, [r8]
   10848:	uxth	r3, r2
   1084a:	ands.w	r2, r2, #4096	; 0x1000
   1084e:	bne.n	108fe <__sflush_r+0xe2>
   10850:	movs	r3, #1
   10852:	ldr	r1, [r4, #28]
   10854:	mov	r0, r8
   10856:	blx	r5
   10858:	adds	r3, r0, #1
   1085a:	beq.n	1092c <__sflush_r+0x110>
   1085c:	ldrh	r3, [r4, #12]
   1085e:	ldr	r5, [r4, #40]	; 0x28
   10860:	lsls	r7, r3, #29
   10862:	bpl.n	10870 <__sflush_r+0x54>
   10864:	ldr	r3, [r4, #4]
   10866:	subs	r0, r0, r3
   10868:	ldr	r3, [r4, #48]	; 0x30
   1086a:	cbz	r3, 10870 <__sflush_r+0x54>
   1086c:	ldr	r3, [r4, #60]	; 0x3c
   1086e:	subs	r0, r0, r3
   10870:	ldr	r1, [r4, #28]
   10872:	mov	r2, r0
   10874:	movs	r3, #0
   10876:	mov	r0, r8
   10878:	blx	r5
   1087a:	adds	r1, r0, #1
   1087c:	bne.n	10902 <__sflush_r+0xe6>
   1087e:	ldr.w	r3, [r8]
   10882:	cmp	r3, #0
   10884:	beq.n	10902 <__sflush_r+0xe6>
   10886:	cmp	r3, #29
   10888:	beq.n	1088e <__sflush_r+0x72>
   1088a:	cmp	r3, #22
   1088c:	bne.n	1093c <__sflush_r+0x120>
   1088e:	ldrh	r3, [r4, #12]
   10890:	ldr	r2, [r4, #16]
   10892:	str	r2, [r4, #0]
   10894:	bic.w	r3, r3, #2048	; 0x800
   10898:	movs	r1, #0
   1089a:	str	r1, [r4, #4]
   1089c:	strh	r3, [r4, #12]
   1089e:	ldr	r1, [r4, #48]	; 0x30
   108a0:	str.w	r6, [r8]
   108a4:	cbz	r1, 108f0 <__sflush_r+0xd4>
   108a6:	add.w	r3, r4, #64	; 0x40
   108aa:	cmp	r1, r3
   108ac:	beq.n	108b4 <__sflush_r+0x98>
   108ae:	mov	r0, r8
   108b0:	bl	e244 <_free_r>
   108b4:	movs	r0, #0
   108b6:	str	r0, [r4, #48]	; 0x30
   108b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   108bc:	ldr	r6, [r4, #16]
   108be:	cbz	r6, 108f0 <__sflush_r+0xd4>
   108c0:	uxth	r3, r2
   108c2:	ldr	r5, [r4, #0]
   108c4:	str	r6, [r4, #0]
   108c6:	lsls	r2, r3, #30
   108c8:	ite	eq
   108ca:	ldreq	r3, [r4, #20]
   108cc:	movne	r3, #0
   108ce:	subs	r5, r5, r6
   108d0:	str	r3, [r4, #8]
   108d2:	b.n	108ec <__sflush_r+0xd0>
   108d4:	mov	r3, r5
   108d6:	mov	r2, r6
   108d8:	ldr	r1, [r4, #28]
   108da:	ldr	r7, [r4, #36]	; 0x24
   108dc:	mov	r0, r8
   108de:	blx	r7
   108e0:	subs.w	ip, r0, #0
   108e4:	sub.w	r5, r5, ip
   108e8:	add	r6, ip
   108ea:	ble.n	1091c <__sflush_r+0x100>
   108ec:	cmp	r5, #0
   108ee:	bgt.n	108d4 <__sflush_r+0xb8>
   108f0:	movs	r0, #0
   108f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   108f6:	ldr	r3, [r4, #60]	; 0x3c
   108f8:	cmp	r3, #0
   108fa:	bgt.n	10838 <__sflush_r+0x1c>
   108fc:	b.n	108f0 <__sflush_r+0xd4>
   108fe:	ldr	r0, [r4, #80]	; 0x50
   10900:	b.n	10860 <__sflush_r+0x44>
   10902:	ldrsh.w	r3, [r4, #12]
   10906:	ldr	r2, [r4, #16]
   10908:	str	r2, [r4, #0]
   1090a:	bic.w	r3, r3, #2048	; 0x800
   1090e:	strh	r3, [r4, #12]
   10910:	movs	r2, #0
   10912:	lsls	r3, r3, #19
   10914:	str	r2, [r4, #4]
   10916:	bpl.n	1089e <__sflush_r+0x82>
   10918:	str	r0, [r4, #80]	; 0x50
   1091a:	b.n	1089e <__sflush_r+0x82>
   1091c:	ldrh	r3, [r4, #12]
   1091e:	orr.w	r3, r3, #64	; 0x40
   10922:	mov.w	r0, #4294967295
   10926:	strh	r3, [r4, #12]
   10928:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1092c:	ldr.w	r3, [r8]
   10930:	cmp	r3, #0
   10932:	beq.n	1085c <__sflush_r+0x40>
   10934:	cmp	r3, #29
   10936:	beq.n	10946 <__sflush_r+0x12a>
   10938:	cmp	r3, #22
   1093a:	beq.n	10946 <__sflush_r+0x12a>
   1093c:	ldrh	r3, [r4, #12]
   1093e:	orr.w	r3, r3, #64	; 0x40
   10942:	strh	r3, [r4, #12]
   10944:	b.n	108f2 <__sflush_r+0xd6>
   10946:	str.w	r6, [r8]
   1094a:	b.n	108f0 <__sflush_r+0xd4>

0001094c <_fflush_r>:
   1094c:	push	{r3, r4, r5, lr}
   1094e:	mov	r4, r1
   10950:	mov	r5, r0
   10952:	cbz	r0, 10958 <_fflush_r+0xc>
   10954:	ldr	r3, [r0, #52]	; 0x34
   10956:	cbz	r3, 1099a <_fflush_r+0x4e>
   10958:	ldrsh.w	r0, [r4, #12]
   1095c:	cbz	r0, 10982 <_fflush_r+0x36>
   1095e:	ldr	r3, [r4, #100]	; 0x64
   10960:	lsls	r3, r3, #31
   10962:	bmi.n	10968 <_fflush_r+0x1c>
   10964:	lsls	r1, r0, #22
   10966:	bpl.n	10988 <_fflush_r+0x3c>
   10968:	mov	r0, r5
   1096a:	mov	r1, r4
   1096c:	bl	1081c <__sflush_r>
   10970:	ldr	r3, [r4, #100]	; 0x64
   10972:	lsls	r2, r3, #31
   10974:	mov	r5, r0
   10976:	bmi.n	1097e <_fflush_r+0x32>
   10978:	ldrh	r3, [r4, #12]
   1097a:	lsls	r3, r3, #22
   1097c:	bpl.n	10990 <_fflush_r+0x44>
   1097e:	mov	r0, r5
   10980:	pop	{r3, r4, r5, pc}
   10982:	mov	r5, r0
   10984:	mov	r0, r5
   10986:	pop	{r3, r4, r5, pc}
   10988:	ldr	r0, [r4, #88]	; 0x58
   1098a:	bl	df98 <__retarget_lock_acquire_recursive>
   1098e:	b.n	10968 <_fflush_r+0x1c>
   10990:	ldr	r0, [r4, #88]	; 0x58
   10992:	bl	df9c <__retarget_lock_release_recursive>
   10996:	mov	r0, r5
   10998:	pop	{r3, r4, r5, pc}
   1099a:	bl	d944 <__sinit>
   1099e:	b.n	10958 <_fflush_r+0xc>

000109a0 <_localeconv_r>:
   109a0:	ldr	r0, [pc, #0]	; (109a4 <_localeconv_r+0x4>)
   109a2:	bx	lr
   109a4:	.word	0x20001574

000109a8 <frexp>:
   109a8:	push	{r4, r5}
   109aa:	sub	sp, #8
   109ac:	vstr	d0, [sp]
   109b0:	ldr	r2, [sp, #4]
   109b2:	ldr	r4, [pc, #100]	; (10a18 <frexp+0x70>)
   109b4:	bic.w	r3, r2, #2147483648	; 0x80000000
   109b8:	movs	r1, #0
   109ba:	cmp	r3, r4
   109bc:	str	r1, [r0, #0]
   109be:	bgt.n	10a04 <frexp+0x5c>
   109c0:	ldr	r4, [sp, #0]
   109c2:	orrs	r4, r3
   109c4:	beq.n	10a04 <frexp+0x5c>
   109c6:	ldr	r4, [pc, #84]	; (10a1c <frexp+0x74>)
   109c8:	ands	r4, r2
   109ca:	cbnz	r4, 109e2 <frexp+0x3a>
   109cc:	vldr	d7, [pc, #64]	; 10a10 <frexp+0x68>
   109d0:	vmul.f64	d7, d0, d7
   109d4:	vstr	d7, [sp]
   109d8:	ldr	r2, [sp, #4]
   109da:	mvn.w	r1, #53	; 0x35
   109de:	bic.w	r3, r2, #2147483648	; 0x80000000
   109e2:	bic.w	r2, r2, #2139095040	; 0x7f800000
   109e6:	ldrd	r4, r5, [sp]
   109ea:	bic.w	r2, r2, #7340032	; 0x700000
   109ee:	orr.w	r5, r2, #1069547520	; 0x3fc00000
   109f2:	asrs	r3, r3, #20
   109f4:	orr.w	r5, r5, #2097152	; 0x200000
   109f8:	subw	r3, r3, #1022	; 0x3fe
   109fc:	strd	r4, r5, [sp]
   10a00:	add	r3, r1
   10a02:	str	r3, [r0, #0]
   10a04:	vldr	d0, [sp]
   10a08:	add	sp, #8
   10a0a:	pop	{r4, r5}
   10a0c:	bx	lr
   10a0e:	nop
   10a10:	.word	0x00000000
   10a14:	.word	0x43500000
   10a18:	.word	0x7fefffff
   10a1c:	.word	0x7ff00000

00010a20 <__assert_func>:
   10a20:	push	{lr}
   10a22:	ldr	r4, [pc, #44]	; (10a50 <__assert_func+0x30>)
   10a24:	ldr	r5, [r4, #0]
   10a26:	mov	r4, r2
   10a28:	ldr	r6, [r5, #12]
   10a2a:	mov	r2, r3
   10a2c:	sub	sp, #20
   10a2e:	mov	r3, r0
   10a30:	mov	r5, r1
   10a32:	cbz	r4, 10a48 <__assert_func+0x28>
   10a34:	ldr	r1, [pc, #28]	; (10a54 <__assert_func+0x34>)
   10a36:	str	r5, [sp, #0]
   10a38:	strd	r1, r4, [sp, #4]
   10a3c:	mov	r0, r6
   10a3e:	ldr	r1, [pc, #24]	; (10a58 <__assert_func+0x38>)
   10a40:	bl	11950 <fiprintf>
   10a44:	bl	b708 <abort>
   10a48:	ldr	r1, [pc, #16]	; (10a5c <__assert_func+0x3c>)
   10a4a:	mov	r4, r1
   10a4c:	b.n	10a36 <__assert_func+0x16>
   10a4e:	nop
   10a50:	.word	0x20001a0c
   10a54:	.word	0x20000c2c
   10a58:	.word	0x20000c3c
   10a5c:	.word	0x20000790

00010a60 <_calloc_r>:
   10a60:	push	{r3, r4, r5, lr}
   10a62:	umull	r1, r4, r1, r2
   10a66:	cbnz	r4, 10acc <_calloc_r+0x6c>
   10a68:	bl	cebc <_malloc_r>
   10a6c:	mov	r5, r0
   10a6e:	cbz	r0, 10aaa <_calloc_r+0x4a>
   10a70:	ldr.w	r2, [r0, #-4]
   10a74:	bic.w	r2, r2, #3
   10a78:	subs	r2, #4
   10a7a:	cmp	r2, #36	; 0x24
   10a7c:	bhi.n	10aae <_calloc_r+0x4e>
   10a7e:	cmp	r2, #19
   10a80:	bls.n	10ab8 <_calloc_r+0x58>
   10a82:	cmp	r2, #27
   10a84:	strd	r4, r4, [r0]
   10a88:	bls.n	10ac6 <_calloc_r+0x66>
   10a8a:	cmp	r2, #36	; 0x24
   10a8c:	ite	ne
   10a8e:	addne.w	r2, r0, #16
   10a92:	addeq.w	r2, r0, #24
   10a96:	mov.w	r3, #0
   10a9a:	strd	r4, r4, [r0, #8]
   10a9e:	itt	eq
   10aa0:	streq	r4, [r0, #16]
   10aa2:	streq	r4, [r0, #20]
   10aa4:	strd	r3, r3, [r2]
   10aa8:	str	r3, [r2, #8]
   10aaa:	mov	r0, r5
   10aac:	pop	{r3, r4, r5, pc}
   10aae:	mov	r1, r4
   10ab0:	bl	dcd0 <memset>
   10ab4:	mov	r0, r5
   10ab6:	pop	{r3, r4, r5, pc}
   10ab8:	mov	r2, r0
   10aba:	movs	r3, #0
   10abc:	strd	r3, r3, [r2]
   10ac0:	str	r3, [r2, #8]
   10ac2:	mov	r0, r5
   10ac4:	pop	{r3, r4, r5, pc}
   10ac6:	add.w	r2, r0, #8
   10aca:	b.n	10aba <_calloc_r+0x5a>
   10acc:	bl	df3c <__errno>
   10ad0:	movs	r3, #12
   10ad2:	movs	r5, #0
   10ad4:	str	r3, [r0, #0]
   10ad6:	b.n	10aaa <_calloc_r+0x4a>

00010ad8 <quorem>:
   10ad8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10adc:	ldr	r3, [r0, #16]
   10ade:	ldr	r4, [r1, #16]
   10ae0:	cmp	r3, r4
   10ae2:	sub	sp, #12
   10ae4:	blt.w	10bf6 <quorem+0x11e>
   10ae8:	subs	r4, #1
   10aea:	add.w	r5, r1, #20
   10aee:	lsls	r3, r4, #2
   10af0:	add.w	r8, r0, #20
   10af4:	str	r3, [sp, #0]
   10af6:	ldr.w	r3, [r5, r4, lsl #2]
   10afa:	ldr.w	r2, [r8, r4, lsl #2]
   10afe:	adds	r3, #1
   10b00:	mov	r9, r0
   10b02:	cmp	r2, r3
   10b04:	add.w	r0, r8, r4, lsl #2
   10b08:	add.w	r7, r5, r4, lsl #2
   10b0c:	str	r0, [sp, #4]
   10b0e:	udiv	r6, r2, r3
   10b12:	bcc.n	10b8c <quorem+0xb4>
   10b14:	mov.w	ip, #0
   10b18:	mov	lr, r5
   10b1a:	mov	r0, r8
   10b1c:	mov	sl, ip
   10b1e:	mov	r3, ip
   10b20:	ldr.w	fp, [lr], #4
   10b24:	ldr	r2, [r0, #0]
   10b26:	uxth.w	ip, fp
   10b2a:	mla	r3, r6, ip, r3
   10b2e:	mov.w	ip, r3, lsr #16
   10b32:	mov.w	fp, fp, lsr #16
   10b36:	mla	ip, r6, fp, ip
   10b3a:	uxth	r3, r3
   10b3c:	sub.w	r3, sl, r3
   10b40:	uxth.w	sl, ip
   10b44:	uxtah	r3, r3, r2
   10b48:	rsb	r2, sl, r2, lsr #16
   10b4c:	add.w	r2, r2, r3, asr #16
   10b50:	uxth	r3, r3
   10b52:	orr.w	r3, r3, r2, lsl #16
   10b56:	cmp	r7, lr
   10b58:	str.w	r3, [r0], #4
   10b5c:	mov.w	sl, r2, asr #16
   10b60:	mov.w	r3, ip, lsr #16
   10b64:	bcs.n	10b20 <quorem+0x48>
   10b66:	ldr	r3, [sp, #0]
   10b68:	ldr.w	r3, [r8, r3]
   10b6c:	cbnz	r3, 10b8c <quorem+0xb4>
   10b6e:	ldr	r3, [sp, #4]
   10b70:	subs	r3, #4
   10b72:	cmp	r8, r3
   10b74:	bcc.n	10b80 <quorem+0xa8>
   10b76:	b.n	10b88 <quorem+0xb0>
   10b78:	cmp	r8, r3
   10b7a:	add.w	r4, r4, #4294967295
   10b7e:	bcs.n	10b88 <quorem+0xb0>
   10b80:	ldr.w	r2, [r3], #-4
   10b84:	cmp	r2, #0
   10b86:	beq.n	10b78 <quorem+0xa0>
   10b88:	str.w	r4, [r9, #16]
   10b8c:	mov	r0, r9
   10b8e:	bl	e988 <__mcmp>
   10b92:	cmp	r0, #0
   10b94:	blt.n	10bee <quorem+0x116>
   10b96:	adds	r6, #1
   10b98:	mov	r1, r8
   10b9a:	movs	r3, #0
   10b9c:	ldr.w	r0, [r5], #4
   10ba0:	ldr.w	ip, [r1]
   10ba4:	uxth	r2, r0
   10ba6:	subs	r2, r3, r2
   10ba8:	lsrs	r3, r0, #16
   10baa:	uxtah	r2, r2, ip
   10bae:	rsb	r3, r3, ip, lsr #16
   10bb2:	add.w	r3, r3, r2, asr #16
   10bb6:	uxth	r2, r2
   10bb8:	orr.w	r2, r2, r3, lsl #16
   10bbc:	cmp	r7, r5
   10bbe:	str.w	r2, [r1], #4
   10bc2:	mov.w	r3, r3, asr #16
   10bc6:	bcs.n	10b9c <quorem+0xc4>
   10bc8:	ldr.w	r2, [r8, r4, lsl #2]
   10bcc:	add.w	r3, r8, r4, lsl #2
   10bd0:	cbnz	r2, 10bee <quorem+0x116>
   10bd2:	subs	r3, #4
   10bd4:	cmp	r8, r3
   10bd6:	bcc.n	10be2 <quorem+0x10a>
   10bd8:	b.n	10bea <quorem+0x112>
   10bda:	cmp	r8, r3
   10bdc:	add.w	r4, r4, #4294967295
   10be0:	bcs.n	10bea <quorem+0x112>
   10be2:	ldr.w	r2, [r3], #-4
   10be6:	cmp	r2, #0
   10be8:	beq.n	10bda <quorem+0x102>
   10bea:	str.w	r4, [r9, #16]
   10bee:	mov	r0, r6
   10bf0:	add	sp, #12
   10bf2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bf6:	movs	r0, #0
   10bf8:	add	sp, #12
   10bfa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bfe:	nop

00010c00 <_dtoa_r>:
   10c00:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c04:	vpush	{d8}
   10c08:	sub	sp, #60	; 0x3c
   10c0a:	vstr	d0, [sp, #8]
   10c0e:	str	r1, [sp, #4]
   10c10:	ldr	r1, [r0, #56]	; 0x38
   10c12:	ldr	r5, [sp, #104]	; 0x68
   10c14:	str	r3, [sp, #20]
   10c16:	vmov	r6, r7, d0
   10c1a:	mov	r4, r0
   10c1c:	mov	fp, r2
   10c1e:	cbz	r1, 10c32 <_dtoa_r+0x32>
   10c20:	ldr	r2, [r0, #60]	; 0x3c
   10c22:	str	r2, [r1, #4]
   10c24:	movs	r3, #1
   10c26:	lsls	r3, r2
   10c28:	str	r3, [r1, #8]
   10c2a:	bl	e4c8 <_Bfree>
   10c2e:	movs	r3, #0
   10c30:	str	r3, [r4, #56]	; 0x38
   10c32:	subs.w	r8, r7, #0
   10c36:	ite	lt
   10c38:	movlt	r3, #1
   10c3a:	movge	r3, #0
   10c3c:	str	r3, [r5, #0]
   10c3e:	ldr	r3, [pc, #760]	; (10f38 <_dtoa_r+0x338>)
   10c40:	itt	lt
   10c42:	biclt.w	r8, r8, #2147483648	; 0x80000000
   10c46:	strlt.w	r8, [sp, #12]
   10c4a:	bics.w	r3, r3, r8
   10c4e:	beq.w	10d90 <_dtoa_r+0x190>
   10c52:	vldr	d8, [sp, #8]
   10c56:	vcmp.f64	d8, #0.0
   10c5a:	vmrs	APSR_nzcv, fpscr
   10c5e:	bne.n	10c84 <_dtoa_r+0x84>
   10c60:	ldr	r2, [sp, #20]
   10c62:	movs	r3, #1
   10c64:	str	r3, [r2, #0]
   10c66:	ldr	r3, [sp, #108]	; 0x6c
   10c68:	cmp	r3, #0
   10c6a:	beq.w	110ec <_dtoa_r+0x4ec>
   10c6e:	ldr	r3, [pc, #716]	; (10f3c <_dtoa_r+0x33c>)
   10c70:	ldr	r2, [sp, #108]	; 0x6c
   10c72:	str	r3, [r2, #0]
   10c74:	subs	r3, #1
   10c76:	str	r3, [sp, #0]
   10c78:	ldr	r0, [sp, #0]
   10c7a:	add	sp, #60	; 0x3c
   10c7c:	vpop	{d8}
   10c80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c84:	add	r2, sp, #48	; 0x30
   10c86:	add	r1, sp, #52	; 0x34
   10c88:	mov	r0, r4
   10c8a:	vmov.f64	d0, d8
   10c8e:	bl	eb20 <__d2b>
   10c92:	movs.w	r3, r8, lsr #20
   10c96:	mov	r5, r0
   10c98:	bne.w	10dc0 <_dtoa_r+0x1c0>
   10c9c:	ldrd	r1, r3, [sp, #48]	; 0x30
   10ca0:	add	r3, r1
   10ca2:	addw	r2, r3, #1074	; 0x432
   10ca6:	cmp	r2, #32
   10ca8:	ble.w	112a0 <_dtoa_r+0x6a0>
   10cac:	rsb	r2, r2, #64	; 0x40
   10cb0:	lsl.w	r8, r8, r2
   10cb4:	addw	r2, r3, #1042	; 0x412
   10cb8:	lsrs	r6, r2
   10cba:	orr.w	r2, r8, r6
   10cbe:	vmov	s14, r2
   10cc2:	vcvt.f64.u32	d7, s14
   10cc6:	subs	r0, r3, #1
   10cc8:	vmov	r6, s15
   10ccc:	vmov	r2, r3, d7
   10cd0:	mov.w	sl, #1
   10cd4:	sub.w	r3, r6, #32505856	; 0x1f00000
   10cd8:	vldr	d3, [pc, #580]	; 10f20 <_dtoa_r+0x320>
   10cdc:	vldr	d7, [pc, #584]	; 10f28 <_dtoa_r+0x328>
   10ce0:	vldr	d5, [pc, #588]	; 10f30 <_dtoa_r+0x330>
   10ce4:	vmov	s13, r0
   10ce8:	vmov	d2, r2, r3
   10cec:	vcvt.f64.s32	d4, s13
   10cf0:	vmov.f64	d6, #120	; 0x3fc00000  1.5
   10cf4:	vsub.f64	d6, d2, d6
   10cf8:	vfma.f64	d7, d6, d3
   10cfc:	vfma.f64	d7, d4, d5
   10d00:	vcvt.s32.f64	s13, d7
   10d04:	vcmpe.f64	d7, #0.0
   10d08:	vmrs	APSR_nzcv, fpscr
   10d0c:	vmov	r7, s13
   10d10:	bpl.n	10d24 <_dtoa_r+0x124>
   10d12:	vcvt.f64.s32	d6, s13
   10d16:	vcmp.f64	d6, d7
   10d1a:	vmrs	APSR_nzcv, fpscr
   10d1e:	it	ne
   10d20:	addne.w	r7, r7, #4294967295
   10d24:	cmp	r7, #22
   10d26:	bhi.w	10fb4 <_dtoa_r+0x3b4>
   10d2a:	ldr	r3, [pc, #532]	; (10f40 <_dtoa_r+0x340>)
   10d2c:	add.w	r3, r3, r7, lsl #3
   10d30:	vldr	d7, [r3]
   10d34:	vcmpe.f64	d8, d7
   10d38:	vmrs	APSR_nzcv, fpscr
   10d3c:	bpl.n	10dee <_dtoa_r+0x1ee>
   10d3e:	subs	r1, r1, r0
   10d40:	movs	r3, #0
   10d42:	subs.w	r8, r1, #1
   10d46:	add.w	r7, r7, #4294967295
   10d4a:	str	r3, [sp, #40]	; 0x28
   10d4c:	bmi.w	10fc2 <_dtoa_r+0x3c2>
   10d50:	movs	r3, #0
   10d52:	str	r3, [sp, #24]
   10d54:	cmp	r7, #0
   10d56:	bge.n	10dfe <_dtoa_r+0x1fe>
   10d58:	ldr	r3, [sp, #24]
   10d5a:	str	r7, [sp, #16]
   10d5c:	subs	r3, r3, r7
   10d5e:	str	r3, [sp, #24]
   10d60:	negs	r3, r7
   10d62:	str	r3, [sp, #32]
   10d64:	ldr	r3, [sp, #4]
   10d66:	cmp	r3, #9
   10d68:	mov.w	r7, #0
   10d6c:	bhi.n	10e0c <_dtoa_r+0x20c>
   10d6e:	cmp	r3, #5
   10d70:	ble.w	112ae <_dtoa_r+0x6ae>
   10d74:	subs	r3, #4
   10d76:	str	r3, [sp, #4]
   10d78:	movs	r6, #0
   10d7a:	ldr	r3, [sp, #4]
   10d7c:	subs	r2, r3, #2
   10d7e:	cmp	r2, #3
   10d80:	bhi.w	10fce <_dtoa_r+0x3ce>
   10d84:	tbh	[pc, r2, lsl #1]
   10d88:	.word	0x03a703aa
   10d8c:	.word	0x037e039d
   10d90:	ldr	r2, [sp, #20]
   10d92:	ubfx	r8, r8, #0, #20
   10d96:	movw	r3, #9999	; 0x270f
   10d9a:	orrs.w	r8, r8, r6
   10d9e:	str	r3, [r2, #0]
   10da0:	bne.n	10de0 <_dtoa_r+0x1e0>
   10da2:	ldr	r3, [sp, #108]	; 0x6c
   10da4:	cmp	r3, #0
   10da6:	beq.w	118cc <_dtoa_r+0xccc>
   10daa:	ldr	r3, [pc, #408]	; (10f44 <_dtoa_r+0x344>)
   10dac:	str	r3, [sp, #0]
   10dae:	adds	r3, #8
   10db0:	ldr	r2, [sp, #108]	; 0x6c
   10db2:	ldr	r0, [sp, #0]
   10db4:	str	r3, [r2, #0]
   10db6:	add	sp, #60	; 0x3c
   10db8:	vpop	{d8}
   10dbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10dc0:	vmov	r6, s17
   10dc4:	ubfx	r6, r6, #0, #20
   10dc8:	subw	r0, r3, #1023	; 0x3ff
   10dcc:	vmov	r2, r3, d8
   10dd0:	orr.w	r3, r6, #1069547520	; 0x3fc00000
   10dd4:	ldr	r1, [sp, #48]	; 0x30
   10dd6:	mov.w	sl, #0
   10dda:	orr.w	r3, r3, #3145728	; 0x300000
   10dde:	b.n	10cd8 <_dtoa_r+0xd8>
   10de0:	ldr	r3, [sp, #108]	; 0x6c
   10de2:	cmp	r3, #0
   10de4:	bne.w	1145e <_dtoa_r+0x85e>
   10de8:	ldr	r3, [pc, #348]	; (10f48 <_dtoa_r+0x348>)
   10dea:	str	r3, [sp, #0]
   10dec:	b.n	10c78 <_dtoa_r+0x78>
   10dee:	subs	r1, r1, r0
   10df0:	movs	r3, #0
   10df2:	subs.w	r8, r1, #1
   10df6:	str	r3, [sp, #40]	; 0x28
   10df8:	bmi.w	10fc2 <_dtoa_r+0x3c2>
   10dfc:	str	r3, [sp, #24]
   10dfe:	movs	r3, #0
   10e00:	str	r3, [sp, #32]
   10e02:	ldr	r3, [sp, #4]
   10e04:	str	r7, [sp, #16]
   10e06:	cmp	r3, #9
   10e08:	add	r8, r7
   10e0a:	bls.n	10d6e <_dtoa_r+0x16e>
   10e0c:	movs	r3, #0
   10e0e:	movs	r6, #1
   10e10:	str	r3, [sp, #4]
   10e12:	str	r6, [sp, #28]
   10e14:	mov.w	r9, #4294967295
   10e18:	mov	fp, r3
   10e1a:	movs	r1, #0
   10e1c:	str	r1, [r4, #60]	; 0x3c
   10e1e:	str.w	r9, [sp, #44]	; 0x2c
   10e22:	mov	r0, r4
   10e24:	bl	e47c <_Balloc>
   10e28:	str	r0, [sp, #0]
   10e2a:	cmp	r0, #0
   10e2c:	beq.w	118b0 <_dtoa_r+0xcb0>
   10e30:	ldr	r3, [sp, #0]
   10e32:	str	r3, [r4, #56]	; 0x38
   10e34:	cmp.w	r9, #14
   10e38:	bhi.w	10ff4 <_dtoa_r+0x3f4>
   10e3c:	cmp	r6, #0
   10e3e:	beq.w	10ff4 <_dtoa_r+0x3f4>
   10e42:	ldr	r3, [sp, #16]
   10e44:	cmp	r3, #0
   10e46:	ble.w	11606 <_dtoa_r+0xa06>
   10e4a:	ldr	r2, [pc, #244]	; (10f40 <_dtoa_r+0x340>)
   10e4c:	and.w	r1, r3, #15
   10e50:	add.w	r2, r2, r1, lsl #3
   10e54:	vldr	d7, [r2]
   10e58:	asrs	r2, r3, #4
   10e5a:	lsls	r3, r3, #23
   10e5c:	bpl.w	11564 <_dtoa_r+0x964>
   10e60:	ldr	r1, [pc, #232]	; (10f4c <_dtoa_r+0x34c>)
   10e62:	vldr	d6, [r1, #32]
   10e66:	and.w	r2, r2, #15
   10e6a:	movs	r0, #3
   10e6c:	vdiv.f64	d5, d8, d6
   10e70:	cbz	r2, 10e8a <_dtoa_r+0x28a>
   10e72:	ldr	r1, [pc, #216]	; (10f4c <_dtoa_r+0x34c>)
   10e74:	lsls	r6, r2, #31
   10e76:	bpl.n	10e82 <_dtoa_r+0x282>
   10e78:	vldr	d6, [r1]
   10e7c:	adds	r0, #1
   10e7e:	vmul.f64	d7, d7, d6
   10e82:	asrs	r2, r2, #1
   10e84:	add.w	r1, r1, #8
   10e88:	bne.n	10e74 <_dtoa_r+0x274>
   10e8a:	vdiv.f64	d6, d5, d7
   10e8e:	ldr	r3, [sp, #40]	; 0x28
   10e90:	cbz	r3, 10ea2 <_dtoa_r+0x2a2>
   10e92:	vmov.f64	d7, #112	; 0x3f800000  1.0
   10e96:	vcmpe.f64	d6, d7
   10e9a:	vmrs	APSR_nzcv, fpscr
   10e9e:	bmi.w	117fe <_dtoa_r+0xbfe>
   10ea2:	vmov	s15, r0
   10ea6:	vcvt.f64.s32	d5, s15
   10eaa:	vmov.f64	d7, #28	; 0x40e00000  7.0
   10eae:	vfma.f64	d7, d5, d6
   10eb2:	vmov	r2, s15
   10eb6:	vmov	r0, r1, d7
   10eba:	sub.w	r1, r2, #54525952	; 0x3400000
   10ebe:	cmp.w	r9, #0
   10ec2:	beq.w	115d6 <_dtoa_r+0x9d6>
   10ec6:	ldr	r6, [sp, #16]
   10ec8:	mov	r2, r9
   10eca:	ldr	r3, [sp, #28]
   10ecc:	cmp	r3, #0
   10ece:	beq.w	11760 <_dtoa_r+0xb60>
   10ed2:	vmov.f64	d3, #96	; 0x3f000000  0.5
   10ed6:	ldr	r3, [pc, #104]	; (10f40 <_dtoa_r+0x340>)
   10ed8:	vcvt.s32.f64	s9, d6
   10edc:	add.w	ip, r3, r2, lsl #3
   10ee0:	vcvt.f64.s32	d7, s9
   10ee4:	vsub.f64	d7, d6, d7
   10ee8:	vldr	d6, [ip, #-8]
   10eec:	vdiv.f64	d5, d3, d6
   10ef0:	vmov	d6, r0, r1
   10ef4:	vmov	r0, s9
   10ef8:	vsub.f64	d5, d5, d6
   10efc:	ldr	r1, [sp, #0]
   10efe:	vcmpe.f64	d5, d7
   10f02:	adds	r0, #48	; 0x30
   10f04:	vmrs	APSR_nzcv, fpscr
   10f08:	strb.w	r0, [r1], #1
   10f0c:	bgt.w	11868 <_dtoa_r+0xc68>
   10f10:	vmov.f64	d2, #112	; 0x3f800000  1.0
   10f14:	vmov.f64	d4, #36	; 0x41200000  10.0
   10f18:	mov.w	ip, #0
   10f1c:	b.n	10f82 <_dtoa_r+0x382>
   10f1e:	nop
   10f20:	.word	0x636f4361
   10f24:	.word	0x3fd287a7
   10f28:	.word	0x8b60c8b3
   10f2c:	.word	0x3fc68a28
   10f30:	.word	0x509f79fb
   10f34:	.word	0x3fd34413
   10f38:	.word	0x7ff00000
   10f3c:	.word	0x20000e8d
   10f40:	.word	0x200003a8
   10f44:	.word	0x20000de0
   10f48:	.word	0x20000dec
   10f4c:	.word	0x20000380
   10f50:	add.w	ip, ip, #1
   10f54:	cmp	ip, r2
   10f56:	bge.n	10ff4 <_dtoa_r+0x3f4>
   10f58:	vmul.f64	d7, d7, d4
   10f5c:	vmul.f64	d5, d5, d4
   10f60:	vcvt.s32.f64	s13, d7
   10f64:	vmov	r3, s13
   10f68:	vcvt.f64.s32	d3, s13
   10f6c:	adds	r3, #48	; 0x30
   10f6e:	vsub.f64	d7, d7, d3
   10f72:	vcmpe.f64	d7, d5
   10f76:	vmrs	APSR_nzcv, fpscr
   10f7a:	strb.w	r3, [r1], #1
   10f7e:	bmi.w	11868 <_dtoa_r+0xc68>
   10f82:	vsub.f64	d6, d2, d7
   10f86:	vcmpe.f64	d6, d5
   10f8a:	vmrs	APSR_nzcv, fpscr
   10f8e:	bpl.n	10f50 <_dtoa_r+0x350>
   10f90:	ldr	r2, [sp, #0]
   10f92:	str	r6, [sp, #16]
   10f94:	b.n	10f9c <_dtoa_r+0x39c>
   10f96:	cmp	r2, r1
   10f98:	beq.w	1183c <_dtoa_r+0xc3c>
   10f9c:	mov	r9, r1
   10f9e:	ldrb.w	r3, [r1, #-1]!
   10fa2:	cmp	r3, #57	; 0x39
   10fa4:	beq.n	10f96 <_dtoa_r+0x396>
   10fa6:	adds	r3, #1
   10fa8:	uxtb	r3, r3
   10faa:	strb	r3, [r1, #0]
   10fac:	ldr	r3, [sp, #16]
   10fae:	adds	r3, #1
   10fb0:	str	r3, [sp, #16]
   10fb2:	b.n	11260 <_dtoa_r+0x660>
   10fb4:	subs	r1, r1, r0
   10fb6:	movs	r3, #1
   10fb8:	subs.w	r8, r1, #1
   10fbc:	str	r3, [sp, #40]	; 0x28
   10fbe:	bpl.w	10d50 <_dtoa_r+0x150>
   10fc2:	rsb	r3, r1, #1
   10fc6:	str	r3, [sp, #24]
   10fc8:	mov.w	r8, #0
   10fcc:	b.n	10d54 <_dtoa_r+0x154>
   10fce:	movs	r6, #0
   10fd0:	str	r6, [r4, #60]	; 0x3c
   10fd2:	mov	r1, r6
   10fd4:	mov	r0, r4
   10fd6:	bl	e47c <_Balloc>
   10fda:	str	r0, [sp, #0]
   10fdc:	cmp	r0, #0
   10fde:	beq.w	118b0 <_dtoa_r+0xcb0>
   10fe2:	ldr	r3, [sp, #0]
   10fe4:	str	r3, [r4, #56]	; 0x38
   10fe6:	mov.w	r3, #4294967295
   10fea:	str	r3, [sp, #44]	; 0x2c
   10fec:	mov	r9, r3
   10fee:	movs	r3, #1
   10ff0:	mov	fp, r6
   10ff2:	str	r3, [sp, #28]
   10ff4:	ldr	r2, [sp, #52]	; 0x34
   10ff6:	cmp	r2, #0
   10ff8:	blt.n	110a6 <_dtoa_r+0x4a6>
   10ffa:	ldr	r1, [sp, #16]
   10ffc:	cmp	r1, #14
   10ffe:	bgt.n	110a6 <_dtoa_r+0x4a6>
   11000:	ldr	r3, [pc, #732]	; (112e0 <_dtoa_r+0x6e0>)
   11002:	cmp.w	fp, #0
   11006:	add.w	r3, r3, r1, lsl #3
   1100a:	vldr	d6, [r3]
   1100e:	bge.n	1103c <_dtoa_r+0x43c>
   11010:	cmp.w	r9, #0
   11014:	bgt.n	1103c <_dtoa_r+0x43c>
   11016:	bne.w	115fe <_dtoa_r+0x9fe>
   1101a:	vmov.f64	d7, #20	; 0x40a00000  5.0
   1101e:	vmul.f64	d7, d6, d7
   11022:	vcmpe.f64	d8, d7
   11026:	vmrs	APSR_nzcv, fpscr
   1102a:	mov	sl, r9
   1102c:	mov	r6, r9
   1102e:	bhi.w	1150c <_dtoa_r+0x90c>
   11032:	ldr.w	r8, [sp]
   11036:	mvn.w	fp, fp
   1103a:	b.n	1151e <_dtoa_r+0x91e>
   1103c:	vdiv.f64	d7, d8, d6
   11040:	vcvt.s32.f64	s14, d7
   11044:	ldr	r1, [sp, #0]
   11046:	vmov	r3, s14
   1104a:	cmp.w	r9, #1
   1104e:	add.w	r3, r3, #48	; 0x30
   11052:	vcvt.f64.s32	d5, s14
   11056:	strb.w	r3, [r1], #1
   1105a:	vfms.f64	d8, d5, d6
   1105e:	beq.w	116ca <_dtoa_r+0xaca>
   11062:	vmov.f64	d4, #36	; 0x41200000  10.0
   11066:	movs	r3, #1
   11068:	b.n	1108e <_dtoa_r+0x48e>
   1106a:	vdiv.f64	d7, d8, d6
   1106e:	vcvt.s32.f64	s14, d7
   11072:	adds	r3, #1
   11074:	vmov	r2, s14
   11078:	cmp	r3, r9
   1107a:	add.w	r2, r2, #48	; 0x30
   1107e:	vcvt.f64.s32	d5, s14
   11082:	strb.w	r2, [r1], #1
   11086:	vfms.f64	d8, d5, d6
   1108a:	beq.w	116ca <_dtoa_r+0xaca>
   1108e:	vmul.f64	d8, d8, d4
   11092:	vcmp.f64	d8, #0.0
   11096:	vmrs	APSR_nzcv, fpscr
   1109a:	bne.n	1106a <_dtoa_r+0x46a>
   1109c:	ldr	r3, [sp, #16]
   1109e:	adds	r3, #1
   110a0:	str	r3, [sp, #16]
   110a2:	mov	r9, r1
   110a4:	b.n	11260 <_dtoa_r+0x660>
   110a6:	ldr	r3, [sp, #28]
   110a8:	cbz	r3, 110fc <_dtoa_r+0x4fc>
   110aa:	ldr	r3, [sp, #4]
   110ac:	cmp	r3, #1
   110ae:	ble.w	1159e <_dtoa_r+0x99e>
   110b2:	ldr	r3, [sp, #32]
   110b4:	add.w	sl, r9, #4294967295
   110b8:	cmp	r3, sl
   110ba:	bge.w	1153c <_dtoa_r+0x93c>
   110be:	ldr	r3, [sp, #32]
   110c0:	str.w	sl, [sp, #32]
   110c4:	sub.w	r2, sl, r3
   110c8:	add	r7, r2
   110ca:	mov.w	sl, #0
   110ce:	cmp.w	r9, #0
   110d2:	blt.w	11720 <_dtoa_r+0xb20>
   110d6:	ldr	r3, [sp, #24]
   110d8:	str	r3, [sp, #36]	; 0x24
   110da:	add	r3, r9
   110dc:	add	r8, r9
   110de:	str	r3, [sp, #24]
   110e0:	movs	r1, #1
   110e2:	mov	r0, r4
   110e4:	bl	e620 <__i2b>
   110e8:	mov	r6, r0
   110ea:	b.n	11106 <_dtoa_r+0x506>
   110ec:	ldr	r3, [pc, #500]	; (112e4 <_dtoa_r+0x6e4>)
   110ee:	str	r3, [sp, #0]
   110f0:	ldr	r0, [sp, #0]
   110f2:	add	sp, #60	; 0x3c
   110f4:	vpop	{d8}
   110f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110fc:	ldr	r3, [sp, #24]
   110fe:	ldr.w	sl, [sp, #32]
   11102:	ldr	r6, [sp, #28]
   11104:	str	r3, [sp, #36]	; 0x24
   11106:	ldr	r3, [sp, #36]	; 0x24
   11108:	cbz	r3, 11126 <_dtoa_r+0x526>
   1110a:	cmp.w	r8, #0
   1110e:	ble.n	11126 <_dtoa_r+0x526>
   11110:	cmp	r3, r8
   11112:	ldr	r1, [sp, #24]
   11114:	mov	r2, r3
   11116:	it	ge
   11118:	movge	r2, r8
   1111a:	subs	r1, r1, r2
   1111c:	subs	r3, r3, r2
   1111e:	str	r1, [sp, #24]
   11120:	str	r3, [sp, #36]	; 0x24
   11122:	sub.w	r8, r8, r2
   11126:	ldr	r3, [sp, #32]
   11128:	cbz	r3, 11144 <_dtoa_r+0x544>
   1112a:	ldr	r3, [sp, #28]
   1112c:	cmp	r3, #0
   1112e:	beq.w	11680 <_dtoa_r+0xa80>
   11132:	cmp.w	sl, #0
   11136:	bgt.w	11542 <_dtoa_r+0x942>
   1113a:	ldr	r3, [sp, #32]
   1113c:	subs.w	r2, r3, sl
   11140:	bne.w	11742 <_dtoa_r+0xb42>
   11144:	movs	r1, #1
   11146:	mov	r0, r4
   11148:	bl	e620 <__i2b>
   1114c:	cmp	r7, #0
   1114e:	mov	sl, r0
   11150:	bgt.w	112b2 <_dtoa_r+0x6b2>
   11154:	ldr	r3, [sp, #4]
   11156:	cmp	r3, #1
   11158:	ble.w	1146a <_dtoa_r+0x86a>
   1115c:	movs	r3, #0
   1115e:	str	r3, [sp, #32]
   11160:	movs	r0, #1
   11162:	cmp	r7, #0
   11164:	bne.w	112ca <_dtoa_r+0x6ca>
   11168:	add	r0, r8
   1116a:	ands.w	r0, r0, #31
   1116e:	beq.w	11466 <_dtoa_r+0x866>
   11172:	rsb	r2, r0, #32
   11176:	cmp	r2, #4
   11178:	bgt.w	1128c <_dtoa_r+0x68c>
   1117c:	bne.w	1156c <_dtoa_r+0x96c>
   11180:	ldr	r3, [sp, #24]
   11182:	cmp	r3, #0
   11184:	ble.n	11192 <_dtoa_r+0x592>
   11186:	mov	r1, r5
   11188:	mov	r2, r3
   1118a:	mov	r0, r4
   1118c:	bl	e898 <__lshift>
   11190:	mov	r5, r0
   11192:	cmp.w	r8, #0
   11196:	ble.n	111a4 <_dtoa_r+0x5a4>
   11198:	mov	r1, sl
   1119a:	mov	r2, r8
   1119c:	mov	r0, r4
   1119e:	bl	e898 <__lshift>
   111a2:	mov	sl, r0
   111a4:	ldr	r3, [sp, #40]	; 0x28
   111a6:	cmp	r3, #0
   111a8:	bne.w	1142a <_dtoa_r+0x82a>
   111ac:	cmp.w	r9, #0
   111b0:	ble.w	113fe <_dtoa_r+0x7fe>
   111b4:	ldr	r3, [sp, #28]
   111b6:	cmp	r3, #0
   111b8:	bne.w	11302 <_dtoa_r+0x702>
   111bc:	ldr	r3, [sp, #16]
   111be:	adds	r3, #1
   111c0:	str	r3, [sp, #16]
   111c2:	ldr.w	r8, [sp]
   111c6:	movs	r7, #1
   111c8:	b.n	111da <_dtoa_r+0x5da>
   111ca:	mov	r1, r5
   111cc:	movs	r3, #0
   111ce:	movs	r2, #10
   111d0:	mov	r0, r4
   111d2:	bl	e4dc <__multadd>
   111d6:	adds	r7, #1
   111d8:	mov	r5, r0
   111da:	mov	r1, sl
   111dc:	mov	r0, r5
   111de:	bl	10ad8 <quorem>
   111e2:	cmp	r9, r7
   111e4:	add.w	r0, r0, #48	; 0x30
   111e8:	strb.w	r0, [r8], #1
   111ec:	bgt.n	111ca <_dtoa_r+0x5ca>
   111ee:	cmp.w	r9, #0
   111f2:	ldr	r2, [sp, #0]
   111f4:	ite	gt
   111f6:	movgt	fp, r9
   111f8:	movle.w	fp, #1
   111fc:	mov	r3, r0
   111fe:	add	fp, r2
   11200:	movs	r7, #0
   11202:	mov	r1, r5
   11204:	movs	r2, #1
   11206:	mov	r0, r4
   11208:	str	r3, [sp, #4]
   1120a:	bl	e898 <__lshift>
   1120e:	mov	r1, sl
   11210:	mov	r5, r0
   11212:	bl	e988 <__mcmp>
   11216:	cmp	r0, #0
   11218:	ble.w	1157a <_dtoa_r+0x97a>
   1121c:	ldrb.w	r3, [fp, #-1]
   11220:	ldr	r2, [sp, #0]
   11222:	add.w	fp, fp, #4294967295
   11226:	b.n	11232 <_dtoa_r+0x632>
   11228:	cmp	r2, fp
   1122a:	beq.w	11590 <_dtoa_r+0x990>
   1122e:	ldrb.w	r3, [fp, #-1]!
   11232:	cmp	r3, #57	; 0x39
   11234:	add.w	r9, fp, #1
   11238:	beq.n	11228 <_dtoa_r+0x628>
   1123a:	adds	r3, #1
   1123c:	strb.w	r3, [fp]
   11240:	mov	r1, sl
   11242:	mov	r0, r4
   11244:	bl	e4c8 <_Bfree>
   11248:	cbz	r6, 11260 <_dtoa_r+0x660>
   1124a:	cbz	r7, 11258 <_dtoa_r+0x658>
   1124c:	cmp	r7, r6
   1124e:	beq.n	11258 <_dtoa_r+0x658>
   11250:	mov	r1, r7
   11252:	mov	r0, r4
   11254:	bl	e4c8 <_Bfree>
   11258:	mov	r1, r6
   1125a:	mov	r0, r4
   1125c:	bl	e4c8 <_Bfree>
   11260:	mov	r1, r5
   11262:	mov	r0, r4
   11264:	bl	e4c8 <_Bfree>
   11268:	movs	r3, #0
   1126a:	strb.w	r3, [r9]
   1126e:	ldrd	r2, r3, [sp, #16]
   11272:	str	r2, [r3, #0]
   11274:	ldr	r3, [sp, #108]	; 0x6c
   11276:	cmp	r3, #0
   11278:	beq.w	10c78 <_dtoa_r+0x78>
   1127c:	ldr	r0, [sp, #0]
   1127e:	str.w	r9, [r3]
   11282:	add	sp, #60	; 0x3c
   11284:	vpop	{d8}
   11288:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1128c:	rsb	r0, r0, #28
   11290:	ldr	r3, [sp, #24]
   11292:	add	r3, r0
   11294:	str	r3, [sp, #24]
   11296:	ldr	r3, [sp, #36]	; 0x24
   11298:	add	r3, r0
   1129a:	str	r3, [sp, #36]	; 0x24
   1129c:	add	r8, r0
   1129e:	b.n	11180 <_dtoa_r+0x580>
   112a0:	rsb	r2, r2, #32
   112a4:	lsl.w	r2, r6, r2
   112a8:	vmov	s14, r2
   112ac:	b.n	10cc2 <_dtoa_r+0xc2>
   112ae:	movs	r6, #1
   112b0:	b.n	10d7a <_dtoa_r+0x17a>
   112b2:	mov	r1, r0
   112b4:	mov	r2, r7
   112b6:	mov	r0, r4
   112b8:	bl	e7d8 <__pow5mult>
   112bc:	ldr	r3, [sp, #4]
   112be:	cmp	r3, #1
   112c0:	mov	sl, r0
   112c2:	ble.w	11650 <_dtoa_r+0xa50>
   112c6:	movs	r3, #0
   112c8:	str	r3, [sp, #32]
   112ca:	ldr.w	r2, [sl, #16]
   112ce:	add.w	r2, sl, r2, lsl #2
   112d2:	ldr	r0, [r2, #16]
   112d4:	bl	e580 <__hi0bits>
   112d8:	rsb	r0, r0, #32
   112dc:	b.n	11168 <_dtoa_r+0x568>
   112de:	nop
   112e0:	.word	0x200003a8
   112e4:	.word	0x20000e8c
   112e8:	mov	r1, r6
   112ea:	movs	r3, #0
   112ec:	movs	r2, #10
   112ee:	mov	r0, r4
   112f0:	bl	e4dc <__multadd>
   112f4:	ldr	r3, [sp, #44]	; 0x2c
   112f6:	cmp	r3, #0
   112f8:	mov	r6, r0
   112fa:	ble.w	1189a <_dtoa_r+0xc9a>
   112fe:	str	r7, [sp, #16]
   11300:	mov	r9, r3
   11302:	ldr	r3, [sp, #36]	; 0x24
   11304:	cmp	r3, #0
   11306:	ble.n	11314 <_dtoa_r+0x714>
   11308:	mov	r1, r6
   1130a:	mov	r2, r3
   1130c:	mov	r0, r4
   1130e:	bl	e898 <__lshift>
   11312:	mov	r6, r0
   11314:	ldr	r3, [sp, #32]
   11316:	cmp	r3, #0
   11318:	bne.w	116f2 <_dtoa_r+0xaf2>
   1131c:	mov	r8, r6
   1131e:	ldr	r3, [sp, #8]
   11320:	ldr	r7, [sp, #0]
   11322:	and.w	r2, r3, #1
   11326:	subs	r3, r7, #1
   11328:	add	r3, r9
   1132a:	str	r3, [sp, #32]
   1132c:	ldr	r3, [sp, #4]
   1132e:	str	r2, [sp, #40]	; 0x28
   11330:	orrs	r3, r2
   11332:	str	r3, [sp, #36]	; 0x24
   11334:	mov	r1, sl
   11336:	mov	r0, r5
   11338:	bl	10ad8 <quorem>
   1133c:	mov	r1, r6
   1133e:	mov	fp, r0
   11340:	mov	r0, r5
   11342:	bl	e988 <__mcmp>
   11346:	mov	r2, r8
   11348:	mov	r1, sl
   1134a:	mov	r9, r0
   1134c:	mov	r0, r4
   1134e:	bl	e9cc <__mdiff>
   11352:	ldr	r2, [r0, #12]
   11354:	mov	r1, r0
   11356:	add.w	r3, fp, #48	; 0x30
   1135a:	cmp	r2, #0
   1135c:	bne.n	113e4 <_dtoa_r+0x7e4>
   1135e:	strd	r0, r3, [sp, #24]
   11362:	mov	r0, r5
   11364:	bl	e988 <__mcmp>
   11368:	ldr	r1, [sp, #24]
   1136a:	str	r0, [sp, #8]
   1136c:	mov	r0, r4
   1136e:	bl	e4c8 <_Bfree>
   11372:	ldr	r2, [sp, #8]
   11374:	ldr	r3, [sp, #28]
   11376:	cbnz	r2, 11380 <_dtoa_r+0x780>
   11378:	ldr	r1, [sp, #36]	; 0x24
   1137a:	cmp	r1, #0
   1137c:	beq.w	1187c <_dtoa_r+0xc7c>
   11380:	cmp.w	r9, #0
   11384:	blt.w	1168e <_dtoa_r+0xa8e>
   11388:	ldr	r1, [sp, #4]
   1138a:	orr.w	r9, r9, r1
   1138e:	ldr	r1, [sp, #40]	; 0x28
   11390:	orrs.w	r9, r1, r9
   11394:	beq.w	1168e <_dtoa_r+0xa8e>
   11398:	cmp	r2, #0
   1139a:	bgt.w	1172a <_dtoa_r+0xb2a>
   1139e:	ldr	r2, [sp, #32]
   113a0:	strb	r3, [r7, #0]
   113a2:	add.w	r9, r7, #1
   113a6:	cmp	r7, r2
   113a8:	mov	fp, r9
   113aa:	beq.w	11736 <_dtoa_r+0xb36>
   113ae:	mov	r1, r5
   113b0:	movs	r3, #0
   113b2:	movs	r2, #10
   113b4:	mov	r0, r4
   113b6:	bl	e4dc <__multadd>
   113ba:	cmp	r6, r8
   113bc:	mov	r5, r0
   113be:	mov	r1, r6
   113c0:	mov.w	r3, #0
   113c4:	mov.w	r2, #10
   113c8:	mov	r0, r4
   113ca:	beq.n	113f2 <_dtoa_r+0x7f2>
   113cc:	bl	e4dc <__multadd>
   113d0:	mov	r1, r8
   113d2:	mov	r6, r0
   113d4:	movs	r3, #0
   113d6:	movs	r2, #10
   113d8:	mov	r0, r4
   113da:	bl	e4dc <__multadd>
   113de:	mov	r7, r9
   113e0:	mov	r8, r0
   113e2:	b.n	11334 <_dtoa_r+0x734>
   113e4:	mov	r0, r4
   113e6:	str	r3, [sp, #8]
   113e8:	bl	e4c8 <_Bfree>
   113ec:	ldr	r3, [sp, #8]
   113ee:	movs	r2, #1
   113f0:	b.n	11380 <_dtoa_r+0x780>
   113f2:	bl	e4dc <__multadd>
   113f6:	mov	r7, r9
   113f8:	mov	r6, r0
   113fa:	mov	r8, r0
   113fc:	b.n	11334 <_dtoa_r+0x734>
   113fe:	ldr	r3, [sp, #4]
   11400:	cmp	r3, #2
   11402:	bgt.n	114e8 <_dtoa_r+0x8e8>
   11404:	ldr	r3, [sp, #28]
   11406:	cmp	r3, #0
   11408:	bne.w	11302 <_dtoa_r+0x702>
   1140c:	ldr	r3, [sp, #16]
   1140e:	mov	r1, sl
   11410:	adds	r3, #1
   11412:	mov	r0, r5
   11414:	str	r3, [sp, #16]
   11416:	bl	10ad8 <quorem>
   1141a:	ldr.w	fp, [sp]
   1141e:	add.w	r3, r0, #48	; 0x30
   11422:	strb.w	r3, [fp], #1
   11426:	movs	r7, #0
   11428:	b.n	11202 <_dtoa_r+0x602>
   1142a:	mov	r1, sl
   1142c:	mov	r0, r5
   1142e:	bl	e988 <__mcmp>
   11432:	cmp	r0, #0
   11434:	bge.w	111ac <_dtoa_r+0x5ac>
   11438:	mov	r1, r5
   1143a:	movs	r3, #0
   1143c:	movs	r2, #10
   1143e:	mov	r0, r4
   11440:	bl	e4dc <__multadd>
   11444:	ldr	r3, [sp, #16]
   11446:	subs	r7, r3, #1
   11448:	ldr	r3, [sp, #28]
   1144a:	mov	r5, r0
   1144c:	cmp	r3, #0
   1144e:	bne.w	112e8 <_dtoa_r+0x6e8>
   11452:	ldr	r3, [sp, #44]	; 0x2c
   11454:	cmp	r3, #0
   11456:	ble.w	1188a <_dtoa_r+0xc8a>
   1145a:	mov	r9, r3
   1145c:	b.n	111c2 <_dtoa_r+0x5c2>
   1145e:	ldr	r3, [pc, #752]	; (11750 <_dtoa_r+0xb50>)
   11460:	str	r3, [sp, #0]
   11462:	adds	r3, #3
   11464:	b.n	10db0 <_dtoa_r+0x1b0>
   11466:	movs	r0, #28
   11468:	b.n	11290 <_dtoa_r+0x690>
   1146a:	ldrd	r0, r1, [sp, #8]
   1146e:	cmp	r0, #0
   11470:	bne.w	1115c <_dtoa_r+0x55c>
   11474:	ubfx	r2, r1, #0, #20
   11478:	cmp	r2, #0
   1147a:	beq.w	11666 <_dtoa_r+0xa66>
   1147e:	ldr	r3, [sp, #8]
   11480:	str	r3, [sp, #32]
   11482:	b.n	11160 <_dtoa_r+0x560>
   11484:	movs	r3, #1
   11486:	str	r3, [sp, #28]
   11488:	ldr	r3, [sp, #16]
   1148a:	add	r3, fp
   1148c:	add.w	r9, r3, #1
   11490:	cmp.w	r9, #1
   11494:	mov	ip, r9
   11496:	str	r3, [sp, #44]	; 0x2c
   11498:	it	lt
   1149a:	movlt.w	ip, #1
   1149e:	movs	r1, #0
   114a0:	cmp.w	ip, #23
   114a4:	str	r1, [r4, #60]	; 0x3c
   114a6:	ble.w	10e22 <_dtoa_r+0x222>
   114aa:	movs	r0, #1
   114ac:	movs	r2, #4
   114ae:	lsls	r2, r2, #1
   114b0:	add.w	r3, r2, #20
   114b4:	cmp	r3, ip
   114b6:	mov	r1, r0
   114b8:	add.w	r0, r0, #1
   114bc:	bls.n	114ae <_dtoa_r+0x8ae>
   114be:	str	r1, [r4, #60]	; 0x3c
   114c0:	b.n	10e22 <_dtoa_r+0x222>
   114c2:	movs	r3, #1
   114c4:	str	r3, [sp, #28]
   114c6:	cmp.w	fp, #0
   114ca:	ble.n	11572 <_dtoa_r+0x972>
   114cc:	str.w	fp, [sp, #44]	; 0x2c
   114d0:	mov	r9, fp
   114d2:	mov	ip, fp
   114d4:	b.n	1149e <_dtoa_r+0x89e>
   114d6:	movs	r3, #0
   114d8:	str	r3, [sp, #28]
   114da:	b.n	11488 <_dtoa_r+0x888>
   114dc:	movs	r3, #0
   114de:	str	r3, [sp, #28]
   114e0:	b.n	114c6 <_dtoa_r+0x8c6>
   114e2:	ldr.w	r9, [sp, #44]	; 0x2c
   114e6:	str	r7, [sp, #16]
   114e8:	cmp.w	r9, #0
   114ec:	bne.w	11032 <_dtoa_r+0x432>
   114f0:	mov	r1, sl
   114f2:	mov	r3, r9
   114f4:	movs	r2, #5
   114f6:	mov	r0, r4
   114f8:	bl	e4dc <__multadd>
   114fc:	mov	r1, r0
   114fe:	mov	sl, r0
   11500:	mov	r0, r5
   11502:	bl	e988 <__mcmp>
   11506:	cmp	r0, #0
   11508:	ble.w	11032 <_dtoa_r+0x432>
   1150c:	ldr	r3, [sp, #16]
   1150e:	add.w	fp, r3, #1
   11512:	ldr	r3, [sp, #0]
   11514:	movs	r2, #49	; 0x31
   11516:	mov	r8, r3
   11518:	strb.w	r2, [r3], #1
   1151c:	str	r3, [sp, #0]
   1151e:	mov	r1, sl
   11520:	mov	r0, r4
   11522:	bl	e4c8 <_Bfree>
   11526:	add.w	r3, fp, #1
   1152a:	ldr.w	r9, [sp]
   1152e:	str	r3, [sp, #16]
   11530:	str.w	r8, [sp]
   11534:	cmp	r6, #0
   11536:	bne.w	11258 <_dtoa_r+0x658>
   1153a:	b.n	11260 <_dtoa_r+0x660>
   1153c:	sub.w	sl, r3, sl
   11540:	b.n	110ce <_dtoa_r+0x4ce>
   11542:	mov	r1, r6
   11544:	mov	r2, sl
   11546:	mov	r0, r4
   11548:	bl	e7d8 <__pow5mult>
   1154c:	mov	r2, r5
   1154e:	mov	r1, r0
   11550:	mov	r6, r0
   11552:	mov	r0, r4
   11554:	bl	e67c <__multiply>
   11558:	mov	r1, r5
   1155a:	mov	r5, r0
   1155c:	mov	r0, r4
   1155e:	bl	e4c8 <_Bfree>
   11562:	b.n	1113a <_dtoa_r+0x53a>
   11564:	movs	r0, #2
   11566:	vmov.f64	d5, d8
   1156a:	b.n	10e70 <_dtoa_r+0x270>
   1156c:	rsb	r0, r0, #60	; 0x3c
   11570:	b.n	11290 <_dtoa_r+0x690>
   11572:	mov.w	fp, #1
   11576:	mov	r9, fp
   11578:	b.n	10e1a <_dtoa_r+0x21a>
   1157a:	bne.n	11584 <_dtoa_r+0x984>
   1157c:	ldr	r3, [sp, #4]
   1157e:	lsls	r3, r3, #31
   11580:	bmi.w	1121c <_dtoa_r+0x61c>
   11584:	mov	r9, fp
   11586:	ldrb.w	r3, [fp, #-1]!
   1158a:	cmp	r3, #48	; 0x30
   1158c:	beq.n	11584 <_dtoa_r+0x984>
   1158e:	b.n	11240 <_dtoa_r+0x640>
   11590:	ldr	r3, [sp, #16]
   11592:	ldr	r2, [sp, #0]
   11594:	adds	r3, #1
   11596:	str	r3, [sp, #16]
   11598:	movs	r3, #49	; 0x31
   1159a:	strb	r3, [r2, #0]
   1159c:	b.n	11240 <_dtoa_r+0x640>
   1159e:	cmp.w	sl, #0
   115a2:	beq.w	117ec <_dtoa_r+0xbec>
   115a6:	addw	r2, r2, #1075	; 0x433
   115aa:	ldr	r3, [sp, #24]
   115ac:	str	r3, [sp, #36]	; 0x24
   115ae:	add	r3, r2
   115b0:	ldr.w	sl, [sp, #32]
   115b4:	str	r3, [sp, #24]
   115b6:	add	r8, r2
   115b8:	b.n	110e0 <_dtoa_r+0x4e0>
   115ba:	vmov	s15, r0
   115be:	vmov.f64	d5, #28	; 0x40e00000  7.0
   115c2:	vcvt.f64.s32	d7, s15
   115c6:	vfma.f64	d5, d6, d7
   115ca:	vmov	r2, s11
   115ce:	vmov	r0, r1, d5
   115d2:	sub.w	r1, r2, #54525952	; 0x3400000
   115d6:	vmov	d5, r0, r1
   115da:	vmov.f64	d7, #20	; 0x40a00000  5.0
   115de:	vsub.f64	d7, d6, d7
   115e2:	vcmpe.f64	d7, d5
   115e6:	vmrs	APSR_nzcv, fpscr
   115ea:	bgt.w	1185c <_dtoa_r+0xc5c>
   115ee:	vneg.f64	d5, d5
   115f2:	vcmpe.f64	d7, d5
   115f6:	vmrs	APSR_nzcv, fpscr
   115fa:	bpl.w	10ff4 <_dtoa_r+0x3f4>
   115fe:	mov.w	sl, #0
   11602:	mov	r6, sl
   11604:	b.n	11032 <_dtoa_r+0x432>
   11606:	beq.w	117f4 <_dtoa_r+0xbf4>
   1160a:	ldr	r3, [sp, #16]
   1160c:	ldr	r1, [pc, #324]	; (11754 <_dtoa_r+0xb54>)
   1160e:	negs	r2, r3
   11610:	and.w	r0, r2, #15
   11614:	add.w	r1, r1, r0, lsl #3
   11618:	vldr	d6, [r1]
   1161c:	asrs	r2, r2, #4
   1161e:	vmul.f64	d6, d8, d6
   11622:	beq.w	118aa <_dtoa_r+0xcaa>
   11626:	vmov.f64	d7, d6
   1162a:	ldr	r1, [pc, #300]	; (11758 <_dtoa_r+0xb58>)
   1162c:	movs	r6, #0
   1162e:	movs	r0, #2
   11630:	lsls	r3, r2, #31
   11632:	bpl.n	11640 <_dtoa_r+0xa40>
   11634:	vldr	d5, [r1]
   11638:	adds	r0, #1
   1163a:	movs	r6, #1
   1163c:	vmul.f64	d7, d7, d5
   11640:	asrs	r2, r2, #1
   11642:	add.w	r1, r1, #8
   11646:	bne.n	11630 <_dtoa_r+0xa30>
   11648:	cmp	r6, #0
   1164a:	vseleq.f64	d6, d6, d7
   1164e:	b.n	10e8e <_dtoa_r+0x28e>
   11650:	ldr	r3, [sp, #8]
   11652:	cmp	r3, #0
   11654:	bne.w	112c6 <_dtoa_r+0x6c6>
   11658:	ldrd	r0, r1, [sp, #8]
   1165c:	ubfx	r2, r1, #0, #20
   11660:	cmp	r2, #0
   11662:	bne.w	118d4 <_dtoa_r+0xcd4>
   11666:	ldr	r2, [pc, #244]	; (1175c <_dtoa_r+0xb5c>)
   11668:	ands	r2, r1
   1166a:	cmp	r2, #0
   1166c:	beq.w	11864 <_dtoa_r+0xc64>
   11670:	ldr	r3, [sp, #24]
   11672:	adds	r3, #1
   11674:	str	r3, [sp, #24]
   11676:	movs	r3, #1
   11678:	add.w	r8, r8, #1
   1167c:	str	r3, [sp, #32]
   1167e:	b.n	11160 <_dtoa_r+0x560>
   11680:	mov	r1, r5
   11682:	ldr	r2, [sp, #32]
   11684:	mov	r0, r4
   11686:	bl	e7d8 <__pow5mult>
   1168a:	mov	r5, r0
   1168c:	b.n	11144 <_dtoa_r+0x544>
   1168e:	cmp	r2, #0
   11690:	ble.n	116b8 <_dtoa_r+0xab8>
   11692:	mov	r1, r5
   11694:	movs	r2, #1
   11696:	mov	r0, r4
   11698:	str	r3, [sp, #4]
   1169a:	bl	e898 <__lshift>
   1169e:	mov	r1, sl
   116a0:	mov	r5, r0
   116a2:	bl	e988 <__mcmp>
   116a6:	cmp	r0, #0
   116a8:	ldr	r3, [sp, #4]
   116aa:	ble.w	11870 <_dtoa_r+0xc70>
   116ae:	cmp	r3, #57	; 0x39
   116b0:	beq.w	11848 <_dtoa_r+0xc48>
   116b4:	add.w	r3, fp, #49	; 0x31
   116b8:	mov	r9, r7
   116ba:	strb.w	r3, [r9], #1
   116be:	ldr	r3, [sp, #16]
   116c0:	adds	r3, #1
   116c2:	mov	r7, r6
   116c4:	str	r3, [sp, #16]
   116c6:	mov	r6, r8
   116c8:	b.n	11240 <_dtoa_r+0x640>
   116ca:	vadd.f64	d8, d8, d8
   116ce:	vcmpe.f64	d8, d6
   116d2:	vmrs	APSR_nzcv, fpscr
   116d6:	bgt.n	116ee <_dtoa_r+0xaee>
   116d8:	vcmp.f64	d8, d6
   116dc:	vmrs	APSR_nzcv, fpscr
   116e0:	bne.w	1109c <_dtoa_r+0x49c>
   116e4:	vmov	r3, s14
   116e8:	lsls	r0, r3, #31
   116ea:	bpl.w	1109c <_dtoa_r+0x49c>
   116ee:	ldr	r2, [sp, #0]
   116f0:	b.n	10f9c <_dtoa_r+0x39c>
   116f2:	ldr	r1, [r6, #4]
   116f4:	mov	r0, r4
   116f6:	bl	e47c <_Balloc>
   116fa:	mov	r7, r0
   116fc:	cmp	r0, #0
   116fe:	beq.w	118be <_dtoa_r+0xcbe>
   11702:	ldr	r3, [r6, #16]
   11704:	adds	r3, #2
   11706:	lsls	r2, r3, #2
   11708:	add.w	r1, r6, #12
   1170c:	adds	r0, #12
   1170e:	bl	9d30 <memcpy>
   11712:	mov	r1, r7
   11714:	movs	r2, #1
   11716:	mov	r0, r4
   11718:	bl	e898 <__lshift>
   1171c:	mov	r8, r0
   1171e:	b.n	1131e <_dtoa_r+0x71e>
   11720:	ldr	r3, [sp, #24]
   11722:	sub.w	r3, r3, r9
   11726:	str	r3, [sp, #36]	; 0x24
   11728:	b.n	110e0 <_dtoa_r+0x4e0>
   1172a:	cmp	r3, #57	; 0x39
   1172c:	beq.w	11848 <_dtoa_r+0xc48>
   11730:	mov	r9, r7
   11732:	adds	r3, #1
   11734:	b.n	116ba <_dtoa_r+0xaba>
   11736:	ldr	r2, [sp, #16]
   11738:	adds	r2, #1
   1173a:	mov	r7, r6
   1173c:	str	r2, [sp, #16]
   1173e:	mov	r6, r8
   11740:	b.n	11202 <_dtoa_r+0x602>
   11742:	mov	r1, r5
   11744:	mov	r0, r4
   11746:	bl	e7d8 <__pow5mult>
   1174a:	mov	r5, r0
   1174c:	b.n	11144 <_dtoa_r+0x544>
   1174e:	nop
   11750:	.word	0x20000dec
   11754:	.word	0x200003a8
   11758:	.word	0x20000380
   1175c:	.word	0x7ff00000
   11760:	ldr	r3, [pc, #376]	; (118dc <_dtoa_r+0xcdc>)
   11762:	vcvt.s32.f64	s11, d6
   11766:	add.w	ip, r3, r2, lsl #3
   1176a:	vldr	d3, [ip, #-8]
   1176e:	vcvt.f64.s32	d7, s11
   11772:	vsub.f64	d7, d6, d7
   11776:	vmov	d6, r0, r1
   1177a:	vmov	r1, s11
   1177e:	vmul.f64	d3, d3, d6
   11782:	ldr	r0, [sp, #0]
   11784:	adds	r1, #48	; 0x30
   11786:	cmp	r2, #1
   11788:	strb.w	r1, [r0], #1
   1178c:	beq.w	11896 <_dtoa_r+0xc96>
   11790:	vmov.f64	d4, #36	; 0x41200000  10.0
   11794:	ldr	r3, [sp, #0]
   11796:	adds	r1, r3, r2
   11798:	vmul.f64	d7, d7, d4
   1179c:	vcvt.s32.f64	s13, d7
   117a0:	vmov	r3, s13
   117a4:	adds	r3, #48	; 0x30
   117a6:	strb.w	r3, [r0], #1
   117aa:	cmp	r1, r0
   117ac:	vcvt.f64.s32	d5, s13
   117b0:	vsub.f64	d7, d7, d5
   117b4:	bne.n	11798 <_dtoa_r+0xb98>
   117b6:	vmov.f64	d6, #96	; 0x3f000000  0.5
   117ba:	vadd.f64	d5, d3, d6
   117be:	vcmpe.f64	d5, d7
   117c2:	vmrs	APSR_nzcv, fpscr
   117c6:	bmi.w	10f90 <_dtoa_r+0x390>
   117ca:	vsub.f64	d6, d6, d3
   117ce:	vcmpe.f64	d6, d7
   117d2:	vmrs	APSR_nzcv, fpscr
   117d6:	ble.w	10ff4 <_dtoa_r+0x3f4>
   117da:	mov	r9, r1
   117dc:	subs	r1, #1
   117de:	ldrb.w	r3, [r9, #-1]
   117e2:	cmp	r3, #48	; 0x30
   117e4:	beq.n	117da <_dtoa_r+0xbda>
   117e6:	adds	r3, r6, #1
   117e8:	str	r3, [sp, #16]
   117ea:	b.n	11260 <_dtoa_r+0x660>
   117ec:	ldr	r2, [sp, #48]	; 0x30
   117ee:	rsb	r2, r2, #54	; 0x36
   117f2:	b.n	115aa <_dtoa_r+0x9aa>
   117f4:	movs	r0, #2
   117f6:	vmov.f64	d6, d8
   117fa:	b.w	10e8e <_dtoa_r+0x28e>
   117fe:	cmp.w	r9, #0
   11802:	beq.w	115ba <_dtoa_r+0x9ba>
   11806:	ldr	r2, [sp, #44]	; 0x2c
   11808:	cmp	r2, #0
   1180a:	ble.w	10ff4 <_dtoa_r+0x3f4>
   1180e:	vmov.f64	d4, #36	; 0x41200000  10.0
   11812:	vmul.f64	d6, d6, d4
   11816:	adds	r0, #1
   11818:	vmov	s15, r0
   1181c:	ldr	r3, [sp, #16]
   1181e:	vcvt.f64.s32	d5, s15
   11822:	vmov.f64	d7, #28	; 0x40e00000  7.0
   11826:	vfma.f64	d7, d6, d5
   1182a:	vmov	ip, s15
   1182e:	vmov	r0, r1, d7
   11832:	subs	r6, r3, #1
   11834:	sub.w	r1, ip, #54525952	; 0x3400000
   11838:	b.w	10eca <_dtoa_r+0x2ca>
   1183c:	ldr	r3, [sp, #16]
   1183e:	adds	r3, #1
   11840:	str	r3, [sp, #16]
   11842:	movs	r3, #49	; 0x31
   11844:	b.w	10faa <_dtoa_r+0x3aa>
   11848:	ldr	r3, [sp, #16]
   1184a:	mov	fp, r7
   1184c:	adds	r3, #1
   1184e:	str	r3, [sp, #16]
   11850:	movs	r3, #57	; 0x39
   11852:	mov	r7, r6
   11854:	strb.w	r3, [fp], #1
   11858:	mov	r6, r8
   1185a:	b.n	11220 <_dtoa_r+0x620>
   1185c:	mov.w	sl, #0
   11860:	mov	r6, sl
   11862:	b.n	1150c <_dtoa_r+0x90c>
   11864:	str	r2, [sp, #32]
   11866:	b.n	11160 <_dtoa_r+0x560>
   11868:	adds	r3, r6, #1
   1186a:	str	r3, [sp, #16]
   1186c:	mov	r9, r1
   1186e:	b.n	11260 <_dtoa_r+0x660>
   11870:	bne.w	116b8 <_dtoa_r+0xab8>
   11874:	lsls	r2, r3, #31
   11876:	bpl.w	116b8 <_dtoa_r+0xab8>
   1187a:	b.n	116ae <_dtoa_r+0xaae>
   1187c:	cmp	r3, #57	; 0x39
   1187e:	beq.n	11848 <_dtoa_r+0xc48>
   11880:	cmp.w	r9, #0
   11884:	bgt.w	116b4 <_dtoa_r+0xab4>
   11888:	b.n	116b8 <_dtoa_r+0xab8>
   1188a:	ldr	r3, [sp, #4]
   1188c:	cmp	r3, #2
   1188e:	bgt.w	114e2 <_dtoa_r+0x8e2>
   11892:	str	r7, [sp, #16]
   11894:	b.n	1140c <_dtoa_r+0x80c>
   11896:	mov	r1, r0
   11898:	b.n	117b6 <_dtoa_r+0xbb6>
   1189a:	ldr	r3, [sp, #4]
   1189c:	cmp	r3, #2
   1189e:	bgt.w	114e2 <_dtoa_r+0x8e2>
   118a2:	ldr.w	r9, [sp, #44]	; 0x2c
   118a6:	str	r7, [sp, #16]
   118a8:	b.n	11302 <_dtoa_r+0x702>
   118aa:	movs	r0, #2
   118ac:	b.w	10e8e <_dtoa_r+0x28e>
   118b0:	ldr	r3, [pc, #44]	; (118e0 <_dtoa_r+0xce0>)
   118b2:	ldr	r0, [pc, #48]	; (118e4 <_dtoa_r+0xce4>)
   118b4:	movs	r2, #0
   118b6:	movw	r1, #431	; 0x1af
   118ba:	bl	10a20 <__assert_func>
   118be:	ldr	r3, [pc, #32]	; (118e0 <_dtoa_r+0xce0>)
   118c0:	ldr	r0, [pc, #32]	; (118e4 <_dtoa_r+0xce4>)
   118c2:	mov	r2, r7
   118c4:	movw	r1, #751	; 0x2ef
   118c8:	bl	10a20 <__assert_func>
   118cc:	ldr	r3, [pc, #24]	; (118e8 <_dtoa_r+0xce8>)
   118ce:	str	r3, [sp, #0]
   118d0:	b.w	10c78 <_dtoa_r+0x78>
   118d4:	ldr	r3, [sp, #8]
   118d6:	str	r3, [sp, #32]
   118d8:	b.n	112ca <_dtoa_r+0x6ca>
   118da:	nop
   118dc:	.word	0x200003a8
   118e0:	.word	0x20000c6c
   118e4:	.word	0x20000df0
   118e8:	.word	0x20000de0

000118ec <_wcrtomb_r>:
   118ec:	push	{r4, r5, r6, lr}
   118ee:	mov	r5, r0
   118f0:	sub	sp, #16
   118f2:	cbz	r3, 1190c <_wcrtomb_r+0x20>
   118f4:	mov	r4, r3
   118f6:	cbz	r1, 11914 <_wcrtomb_r+0x28>
   118f8:	ldr	r3, [pc, #56]	; (11934 <_wcrtomb_r+0x48>)
   118fa:	mov	r0, r5
   118fc:	ldr.w	r6, [r3, #224]	; 0xe0
   11900:	mov	r3, r4
   11902:	blx	r6
   11904:	adds	r3, r0, #1
   11906:	beq.n	11928 <_wcrtomb_r+0x3c>
   11908:	add	sp, #16
   1190a:	pop	{r4, r5, r6, pc}
   1190c:	add.w	r4, r0, #260	; 0x104
   11910:	cmp	r1, #0
   11912:	bne.n	118f8 <_wcrtomb_r+0xc>
   11914:	ldr	r2, [pc, #28]	; (11934 <_wcrtomb_r+0x48>)
   11916:	mov	r3, r4
   11918:	ldr.w	r6, [r2, #224]	; 0xe0
   1191c:	mov	r0, r5
   1191e:	mov	r2, r1
   11920:	add	r1, sp, #4
   11922:	blx	r6
   11924:	adds	r3, r0, #1
   11926:	bne.n	11908 <_wcrtomb_r+0x1c>
   11928:	movs	r2, #0
   1192a:	movs	r3, #138	; 0x8a
   1192c:	str	r2, [r4, #0]
   1192e:	str	r3, [r5, #0]
   11930:	add	sp, #16
   11932:	pop	{r4, r5, r6, pc}
   11934:	.word	0x20001484

00011938 <_wcsrtombs_r>:
   11938:	push	{r4, lr}
   1193a:	sub	sp, #8
   1193c:	ldr	r4, [sp, #16]
   1193e:	strd	r3, r4, [sp]
   11942:	mov.w	r3, #4294967295
   11946:	bl	130d8 <_wcsnrtombs_r>
   1194a:	add	sp, #8
   1194c:	pop	{r4, pc}
   1194e:	nop

00011950 <fiprintf>:
   11950:	push	{r1, r2, r3}
   11952:	push	{r4, lr}
   11954:	sub	sp, #12
   11956:	add	r3, sp, #20
   11958:	ldr	r4, [pc, #24]	; (11974 <fiprintf+0x24>)
   1195a:	ldr.w	r2, [r3], #4
   1195e:	str	r3, [sp, #4]
   11960:	mov	r1, r0
   11962:	ldr	r0, [r4, #0]
   11964:	bl	11af0 <_vfiprintf_r>
   11968:	add	sp, #12
   1196a:	ldmia.w	sp!, {r4, lr}
   1196e:	add	sp, #12
   11970:	bx	lr
   11972:	nop
   11974:	.word	0x20001a0c

00011978 <__ssprint_r>:
   11978:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1197c:	ldr	r3, [r2, #8]
   1197e:	ldr	r7, [r2, #0]
   11980:	sub	sp, #12
   11982:	mov	sl, r2
   11984:	cmp	r3, #0
   11986:	beq.n	11a6a <__ssprint_r+0xf2>
   11988:	mov	r9, r0
   1198a:	ldr	r2, [r1, #8]
   1198c:	ldr	r0, [r1, #0]
   1198e:	mov	r4, r1
   11990:	adds	r7, #8
   11992:	b.n	11a1c <__ssprint_r+0xa4>
   11994:	ldrh	r3, [r4, #12]
   11996:	tst.w	r3, #1152	; 0x480
   1199a:	beq.n	119fa <__ssprint_r+0x82>
   1199c:	ldrd	r1, r6, [r4, #16]
   119a0:	sub.w	r8, r0, r1
   119a4:	add.w	r6, r6, r6, lsl #1
   119a8:	add.w	r6, r6, r6, lsr #31
   119ac:	add.w	r0, r8, #1
   119b0:	asrs	r6, r6, #1
   119b2:	add	r0, r5
   119b4:	cmp	r0, r6
   119b6:	mov	r2, r6
   119b8:	itt	hi
   119ba:	movhi	r6, r0
   119bc:	movhi	r2, r6
   119be:	lsls	r3, r3, #21
   119c0:	bpl.n	11a32 <__ssprint_r+0xba>
   119c2:	mov	r1, r2
   119c4:	mov	r0, r9
   119c6:	bl	cebc <_malloc_r>
   119ca:	str	r0, [sp, #4]
   119cc:	cmp	r0, #0
   119ce:	beq.n	11a46 <__ssprint_r+0xce>
   119d0:	mov	r2, r8
   119d2:	ldr	r1, [r4, #16]
   119d4:	bl	9d30 <memcpy>
   119d8:	ldrh	r2, [r4, #12]
   119da:	ldr	r3, [sp, #4]
   119dc:	bic.w	r2, r2, #1152	; 0x480
   119e0:	orr.w	r2, r2, #128	; 0x80
   119e4:	strh	r2, [r4, #12]
   119e6:	sub.w	r2, r6, r8
   119ea:	add.w	r0, r3, r8
   119ee:	str	r6, [r4, #20]
   119f0:	str	r2, [r4, #8]
   119f2:	str	r3, [r4, #16]
   119f4:	str	r0, [r4, #0]
   119f6:	mov	r6, r5
   119f8:	mov	r8, r5
   119fa:	mov	r2, r8
   119fc:	mov	r1, fp
   119fe:	bl	dbd8 <memmove>
   11a02:	ldr.w	r3, [sl, #8]
   11a06:	ldr	r2, [r4, #8]
   11a08:	ldr	r0, [r4, #0]
   11a0a:	subs	r2, r2, r6
   11a0c:	add	r0, r8
   11a0e:	subs	r3, r3, r5
   11a10:	str	r2, [r4, #8]
   11a12:	str	r0, [r4, #0]
   11a14:	str.w	r3, [sl, #8]
   11a18:	cbz	r3, 11a6a <__ssprint_r+0xf2>
   11a1a:	adds	r7, #8
   11a1c:	ldrd	fp, r5, [r7, #-8]
   11a20:	cmp	r5, #0
   11a22:	beq.n	11a1a <__ssprint_r+0xa2>
   11a24:	cmp	r2, r5
   11a26:	mov	r6, r2
   11a28:	mov	r8, r2
   11a2a:	bls.n	11994 <__ssprint_r+0x1c>
   11a2c:	mov	r6, r5
   11a2e:	mov	r8, r5
   11a30:	b.n	119fa <__ssprint_r+0x82>
   11a32:	mov	r0, r9
   11a34:	bl	d434 <_realloc_r>
   11a38:	mov	r3, r0
   11a3a:	cmp	r0, #0
   11a3c:	bne.n	119e6 <__ssprint_r+0x6e>
   11a3e:	ldr	r1, [r4, #16]
   11a40:	mov	r0, r9
   11a42:	bl	e244 <_free_r>
   11a46:	ldrh	r3, [r4, #12]
   11a48:	movs	r2, #12
   11a4a:	orr.w	r3, r3, #64	; 0x40
   11a4e:	str.w	r2, [r9]
   11a52:	mov.w	r0, #4294967295
   11a56:	strh	r3, [r4, #12]
   11a58:	movs	r2, #0
   11a5a:	movs	r3, #0
   11a5c:	str.w	r2, [sl, #8]
   11a60:	str.w	r3, [sl, #4]
   11a64:	add	sp, #12
   11a66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a6a:	movs	r0, #0
   11a6c:	movs	r3, #0
   11a6e:	str.w	r3, [sl, #4]
   11a72:	add	sp, #12
   11a74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011a78 <__sprint_r.part.0>:
   11a78:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a7c:	ldr	r3, [r1, #100]	; 0x64
   11a7e:	lsls	r4, r3, #18
   11a80:	mov	r8, r2
   11a82:	bpl.n	11ae0 <__sprint_r.part.0+0x68>
   11a84:	ldr	r3, [r2, #8]
   11a86:	ldr	r2, [r2, #0]
   11a88:	cbz	r3, 11adc <__sprint_r.part.0+0x64>
   11a8a:	mov	fp, r1
   11a8c:	mov	r6, r0
   11a8e:	add.w	r9, r2, #8
   11a92:	ldrd	r5, sl, [r9, #-8]
   11a96:	movs.w	r7, sl, lsr #2
   11a9a:	beq.n	11ac8 <__sprint_r.part.0+0x50>
   11a9c:	subs	r5, #4
   11a9e:	movs	r4, #0
   11aa0:	b.n	11aa6 <__sprint_r.part.0+0x2e>
   11aa2:	cmp	r7, r4
   11aa4:	beq.n	11ac4 <__sprint_r.part.0+0x4c>
   11aa6:	ldr.w	r1, [r5, #4]!
   11aaa:	mov	r2, fp
   11aac:	mov	r0, r6
   11aae:	bl	12f68 <_fputwc_r>
   11ab2:	adds	r3, r0, #1
   11ab4:	add.w	r4, r4, #1
   11ab8:	bne.n	11aa2 <__sprint_r.part.0+0x2a>
   11aba:	movs	r3, #0
   11abc:	strd	r3, r3, [r8, #4]
   11ac0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ac4:	ldr.w	r3, [r8, #8]
   11ac8:	bic.w	sl, sl, #3
   11acc:	sub.w	r3, r3, sl
   11ad0:	str.w	r3, [r8, #8]
   11ad4:	add.w	r9, r9, #8
   11ad8:	cmp	r3, #0
   11ada:	bne.n	11a92 <__sprint_r.part.0+0x1a>
   11adc:	movs	r0, #0
   11ade:	b.n	11aba <__sprint_r.part.0+0x42>
   11ae0:	bl	12afc <__sfvwrite_r>
   11ae4:	movs	r3, #0
   11ae6:	strd	r3, r3, [r8, #4]
   11aea:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11aee:	nop

00011af0 <_vfiprintf_r>:
   11af0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11af4:	vpush	{d8}
   11af8:	sub	sp, #276	; 0x114
   11afa:	add.w	sl, sp, #80	; 0x50
   11afe:	mov	fp, r0
   11b00:	vmov	s16, r1
   11b04:	mov	r6, r2
   11b06:	movs	r1, #0
   11b08:	movs	r2, #8
   11b0a:	mov	r0, sl
   11b0c:	mov	r4, r3
   11b0e:	str	r3, [sp, #28]
   11b10:	bl	dcd0 <memset>
   11b14:	cmp.w	fp, #0
   11b18:	beq.n	11b24 <_vfiprintf_r+0x34>
   11b1a:	ldr.w	r3, [fp, #52]	; 0x34
   11b1e:	cmp	r3, #0
   11b20:	beq.w	12864 <_vfiprintf_r+0xd74>
   11b24:	vmov	r2, s16
   11b28:	ldr	r3, [r2, #100]	; 0x64
   11b2a:	lsls	r3, r3, #31
   11b2c:	bpl.w	12556 <_vfiprintf_r+0xa66>
   11b30:	ldrsh.w	r1, [r2, #12]
   11b34:	uxth	r2, r1
   11b36:	lsls	r5, r2, #18
   11b38:	bmi.n	11b52 <_vfiprintf_r+0x62>
   11b3a:	vmov	r3, s16
   11b3e:	orr.w	r1, r1, #8192	; 0x2000
   11b42:	strh	r1, [r3, #12]
   11b44:	ldr	r3, [r3, #100]	; 0x64
   11b46:	uxth	r2, r1
   11b48:	vmov	r1, s16
   11b4c:	bic.w	r3, r3, #8192	; 0x2000
   11b50:	str	r3, [r1, #100]	; 0x64
   11b52:	lsls	r0, r2, #28
   11b54:	bpl.w	11d62 <_vfiprintf_r+0x272>
   11b58:	vmov	r3, s16
   11b5c:	ldr	r3, [r3, #16]
   11b5e:	cmp	r3, #0
   11b60:	beq.w	11d62 <_vfiprintf_r+0x272>
   11b64:	and.w	r3, r2, #26
   11b68:	cmp	r3, #10
   11b6a:	beq.w	11d82 <_vfiprintf_r+0x292>
   11b6e:	movs	r3, #0
   11b70:	strd	r3, r3, [sp, #100]	; 0x64
   11b74:	strd	r3, r3, [sp, #52]	; 0x34
   11b78:	add	r2, sp, #108	; 0x6c
   11b7a:	str	r3, [sp, #48]	; 0x30
   11b7c:	str	r2, [sp, #96]	; 0x60
   11b7e:	mov	r9, r2
   11b80:	str	r3, [sp, #44]	; 0x2c
   11b82:	str	r3, [sp, #20]
   11b84:	mov	r8, r6
   11b86:	mov	r4, r8
   11b88:	ldr	r3, [pc, #672]	; (11e2c <_vfiprintf_r+0x33c>)
   11b8a:	ldr.w	r5, [r3, #228]	; 0xe4
   11b8e:	bl	de64 <__locale_mb_cur_max>
   11b92:	mov	r2, r4
   11b94:	mov	r3, r0
   11b96:	add	r1, sp, #72	; 0x48
   11b98:	str.w	sl, [sp]
   11b9c:	mov	r0, fp
   11b9e:	blx	r5
   11ba0:	cmp	r0, #0
   11ba2:	beq.w	11e30 <_vfiprintf_r+0x340>
   11ba6:	blt.w	11e1c <_vfiprintf_r+0x32c>
   11baa:	ldr	r2, [sp, #72]	; 0x48
   11bac:	cmp	r2, #37	; 0x25
   11bae:	mov	r3, r0
   11bb0:	beq.n	11bb6 <_vfiprintf_r+0xc6>
   11bb2:	add	r4, r3
   11bb4:	b.n	11b88 <_vfiprintf_r+0x98>
   11bb6:	subs.w	r6, r4, r8
   11bba:	mov	r5, r0
   11bbc:	bne.w	11e38 <_vfiprintf_r+0x348>
   11bc0:	movs	r3, #0
   11bc2:	ldrb	r1, [r4, #1]
   11bc4:	strb.w	r3, [sp, #67]	; 0x43
   11bc8:	add.w	r8, r4, #1
   11bcc:	str	r3, [sp, #24]
   11bce:	mov.w	r7, #4294967295
   11bd2:	mov	r6, r3
   11bd4:	movs	r4, #43	; 0x2b
   11bd6:	add.w	r8, r8, #1
   11bda:	sub.w	r3, r1, #32
   11bde:	cmp	r3, #90	; 0x5a
   11be0:	bhi.w	11ed4 <_vfiprintf_r+0x3e4>
   11be4:	tbh	[pc, r3, lsl #1]
   11be8:	.word	0x017602b5
   11bec:	.word	0x02b00176
   11bf0:	.word	0x01760176
   11bf4:	.word	0x006a0176
   11bf8:	.word	0x01760176
   11bfc:	.word	0x028d027d
   11c00:	.word	0x02880176
   11c04:	.word	0x01760297
   11c08:	.word	0x005b0292
   11c0c:	.word	0x005b005b
   11c10:	.word	0x005b005b
   11c14:	.word	0x005b005b
   11c18:	.word	0x005b005b
   11c1c:	.word	0x01760176
   11c20:	.word	0x01760176
   11c24:	.word	0x01760176
   11c28:	.word	0x01760176
   11c2c:	.word	0x025c0176
   11c30:	.word	0x01760084
   11c34:	.word	0x01760176
   11c38:	.word	0x01760176
   11c3c:	.word	0x01760176
   11c40:	.word	0x01760176
   11c44:	.word	0x00e80176
   11c48:	.word	0x01760176
   11c4c:	.word	0x02330176
   11c50:	.word	0x02da0176
   11c54:	.word	0x01760176
   11c58:	.word	0x0176058b
   11c5c:	.word	0x01760176
   11c60:	.word	0x01760176
   11c64:	.word	0x01760176
   11c68:	.word	0x01760176
   11c6c:	.word	0x025c0176
   11c70:	.word	0x01760086
   11c74:	.word	0x01760176
   11c78:	.word	0x008602cd
   11c7c:	.word	0x0176007f
   11c80:	.word	0x017602c0
   11c84:	.word	0x00ea02fd
   11c88:	.word	0x007f02ed
   11c8c:	.word	0x02330176
   11c90:	.word	0x0569007c
   11c94:	.word	0x01760176
   11c98:	.word	0x0176056b
   11c9c:	.short	0x007c
   11c9e:	sub.w	r3, r1, #48	; 0x30
   11ca2:	movs	r2, #0
   11ca4:	ldrb.w	r1, [r8], #1
   11ca8:	add.w	r2, r2, r2, lsl #2
   11cac:	add.w	r2, r3, r2, lsl #1
   11cb0:	sub.w	r3, r1, #48	; 0x30
   11cb4:	cmp	r3, #9
   11cb6:	bls.n	11ca4 <_vfiprintf_r+0x1b4>
   11cb8:	str	r2, [sp, #24]
   11cba:	b.n	11bda <_vfiprintf_r+0xea>
   11cbc:	mov	r0, fp
   11cbe:	bl	109a0 <_localeconv_r>
   11cc2:	ldr	r3, [r0, #4]
   11cc4:	str	r3, [sp, #52]	; 0x34
   11cc6:	mov	r0, r3
   11cc8:	bl	e040 <strlen>
   11ccc:	str	r0, [sp, #56]	; 0x38
   11cce:	mov	r5, r0
   11cd0:	mov	r0, fp
   11cd2:	bl	109a0 <_localeconv_r>
   11cd6:	ldr	r3, [r0, #8]
   11cd8:	str	r3, [sp, #44]	; 0x2c
   11cda:	cmp	r5, #0
   11cdc:	bne.w	1268c <_vfiprintf_r+0xb9c>
   11ce0:	ldrb.w	r1, [r8]
   11ce4:	b.n	11bd6 <_vfiprintf_r+0xe6>
   11ce6:	ldrb.w	r1, [r8]
   11cea:	orr.w	r6, r6, #32
   11cee:	b.n	11bd6 <_vfiprintf_r+0xe6>
   11cf0:	orr.w	r6, r6, #16
   11cf4:	lsls	r4, r6, #26
   11cf6:	bpl.w	12016 <_vfiprintf_r+0x526>
   11cfa:	ldr	r3, [sp, #28]
   11cfc:	adds	r3, #7
   11cfe:	bic.w	r3, r3, #7
   11d02:	mov	r2, r3
   11d04:	ldr	r1, [r3, #4]
   11d06:	ldr.w	r3, [r2], #8
   11d0a:	str	r2, [sp, #28]
   11d0c:	mov	r2, r1
   11d0e:	cmp	r1, #0
   11d10:	blt.w	125f4 <_vfiprintf_r+0xb04>
   11d14:	adds	r1, r7, #1
   11d16:	beq.w	1285e <_vfiprintf_r+0xd6e>
   11d1a:	bic.w	r1, r6, #128	; 0x80
   11d1e:	str	r1, [sp, #12]
   11d20:	orrs.w	r1, r3, r2
   11d24:	beq.w	125a6 <_vfiprintf_r+0xab6>
   11d28:	cmp	r3, #10
   11d2a:	sbcs.w	r1, r2, #0
   11d2e:	bcs.w	127b4 <_vfiprintf_r+0xcc4>
   11d32:	adds	r3, #48	; 0x30
   11d34:	strb.w	r3, [sp, #271]	; 0x10f
   11d38:	ldr	r6, [sp, #12]
   11d3a:	movs	r3, #1
   11d3c:	str	r3, [sp, #16]
   11d3e:	addw	r4, sp, #271	; 0x10f
   11d42:	ldr	r3, [sp, #16]
   11d44:	cmp	r3, r7
   11d46:	it	lt
   11d48:	movlt	r3, r7
   11d4a:	str	r3, [sp, #12]
   11d4c:	movs	r3, #0
   11d4e:	str	r3, [sp, #32]
   11d50:	ldrb.w	r3, [sp, #67]	; 0x43
   11d54:	cmp	r3, #0
   11d56:	beq.w	11ef0 <_vfiprintf_r+0x400>
   11d5a:	ldr	r3, [sp, #12]
   11d5c:	adds	r3, #1
   11d5e:	str	r3, [sp, #12]
   11d60:	b.n	11ef0 <_vfiprintf_r+0x400>
   11d62:	vmov	r1, s16
   11d66:	mov	r0, fp
   11d68:	vmov	r5, s16
   11d6c:	bl	12df0 <__swsetup_r>
   11d70:	cmp	r0, #0
   11d72:	bne.w	12a1a <_vfiprintf_r+0xf2a>
   11d76:	ldrh	r2, [r5, #12]
   11d78:	and.w	r3, r2, #26
   11d7c:	cmp	r3, #10
   11d7e:	bne.w	11b6e <_vfiprintf_r+0x7e>
   11d82:	vmov	r1, s16
   11d86:	ldrsh.w	r3, [r1, #14]
   11d8a:	cmp	r3, #0
   11d8c:	blt.w	11b6e <_vfiprintf_r+0x7e>
   11d90:	ldr	r3, [r1, #100]	; 0x64
   11d92:	lsls	r3, r3, #31
   11d94:	bmi.n	11d9c <_vfiprintf_r+0x2ac>
   11d96:	lsls	r7, r2, #22
   11d98:	bpl.w	129c0 <_vfiprintf_r+0xed0>
   11d9c:	vmov	r1, s16
   11da0:	mov	r3, r4
   11da2:	mov	r2, r6
   11da4:	mov	r0, fp
   11da6:	bl	12a7c <__sbprintf>
   11daa:	str	r0, [sp, #20]
   11dac:	ldr	r0, [sp, #20]
   11dae:	add	sp, #276	; 0x114
   11db0:	vpop	{d8}
   11db4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11db8:	orr.w	r6, r6, #16
   11dbc:	ands.w	r2, r6, #32
   11dc0:	beq.w	12030 <_vfiprintf_r+0x540>
   11dc4:	ldr	r3, [sp, #28]
   11dc6:	adds	r3, #7
   11dc8:	bic.w	r3, r3, #7
   11dcc:	mov	r1, r3
   11dce:	ldr	r2, [r3, #4]
   11dd0:	ldr.w	r3, [r1], #8
   11dd4:	str	r1, [sp, #28]
   11dd6:	bic.w	r1, r6, #1024	; 0x400
   11dda:	str	r1, [sp, #12]
   11ddc:	movs	r1, #0
   11dde:	movs	r0, #0
   11de0:	strb.w	r0, [sp, #67]	; 0x43
   11de4:	adds	r0, r7, #1
   11de6:	beq.w	1220a <_vfiprintf_r+0x71a>
   11dea:	ldr	r0, [sp, #12]
   11dec:	bic.w	r6, r0, #128	; 0x80
   11df0:	orrs.w	r0, r3, r2
   11df4:	bne.w	12208 <_vfiprintf_r+0x718>
   11df8:	cmp	r7, #0
   11dfa:	bne.w	1286e <_vfiprintf_r+0xd7e>
   11dfe:	cmp	r1, #0
   11e00:	bne.w	125ae <_vfiprintf_r+0xabe>
   11e04:	ldr	r3, [sp, #12]
   11e06:	ands.w	r3, r3, #1
   11e0a:	str	r3, [sp, #16]
   11e0c:	beq.w	12632 <_vfiprintf_r+0xb42>
   11e10:	movs	r3, #48	; 0x30
   11e12:	strb.w	r3, [sp, #271]	; 0x10f
   11e16:	addw	r4, sp, #271	; 0x10f
   11e1a:	b.n	11d42 <_vfiprintf_r+0x252>
   11e1c:	movs	r2, #8
   11e1e:	movs	r1, #0
   11e20:	mov	r0, sl
   11e22:	bl	dcd0 <memset>
   11e26:	movs	r3, #1
   11e28:	add	r4, r3
   11e2a:	b.n	11b88 <_vfiprintf_r+0x98>
   11e2c:	.word	0x20001484
   11e30:	subs.w	r6, r4, r8
   11e34:	mov	r5, r0
   11e36:	beq.n	11e70 <_vfiprintf_r+0x380>
   11e38:	ldr	r3, [sp, #100]	; 0x64
   11e3a:	ldr	r2, [sp, #104]	; 0x68
   11e3c:	adds	r3, #1
   11e3e:	add	r2, r6
   11e40:	cmp	r3, #7
   11e42:	strd	r8, r6, [r9]
   11e46:	str	r2, [sp, #104]	; 0x68
   11e48:	str	r3, [sp, #100]	; 0x64
   11e4a:	ble.n	11e86 <_vfiprintf_r+0x396>
   11e4c:	cmp	r2, #0
   11e4e:	beq.w	1259e <_vfiprintf_r+0xaae>
   11e52:	vmov	r1, s16
   11e56:	add	r2, sp, #96	; 0x60
   11e58:	mov	r0, fp
   11e5a:	bl	11a78 <__sprint_r.part.0>
   11e5e:	cbnz	r0, 11eaa <_vfiprintf_r+0x3ba>
   11e60:	add.w	r9, sp, #108	; 0x6c
   11e64:	ldr	r3, [sp, #20]
   11e66:	add	r3, r6
   11e68:	str	r3, [sp, #20]
   11e6a:	cmp	r5, #0
   11e6c:	bne.w	11bc0 <_vfiprintf_r+0xd0>
   11e70:	ldr	r3, [sp, #104]	; 0x68
   11e72:	cmp	r3, #0
   11e74:	bne.w	129fa <_vfiprintf_r+0xf0a>
   11e78:	vmov	r3, s16
   11e7c:	movs	r2, #0
   11e7e:	ldrsh.w	r3, [r3, #12]
   11e82:	str	r2, [sp, #100]	; 0x64
   11e84:	b.n	11eb2 <_vfiprintf_r+0x3c2>
   11e86:	add.w	r9, r9, #8
   11e8a:	b.n	11e64 <_vfiprintf_r+0x374>
   11e8c:	vmov	r1, s16
   11e90:	add	r2, sp, #96	; 0x60
   11e92:	mov	r0, fp
   11e94:	bl	11a78 <__sprint_r.part.0>
   11e98:	cmp	r0, #0
   11e9a:	beq.w	11fea <_vfiprintf_r+0x4fa>
   11e9e:	ldr	r3, [sp, #32]
   11ea0:	cbz	r3, 11eaa <_vfiprintf_r+0x3ba>
   11ea2:	ldr	r1, [sp, #32]
   11ea4:	mov	r0, fp
   11ea6:	bl	e244 <_free_r>
   11eaa:	vmov	r3, s16
   11eae:	ldrsh.w	r3, [r3, #12]
   11eb2:	vmov	r2, s16
   11eb6:	ldr	r2, [r2, #100]	; 0x64
   11eb8:	tst.w	r2, #1
   11ebc:	uxth	r2, r3
   11ebe:	beq.w	12002 <_vfiprintf_r+0x512>
   11ec2:	lsls	r0, r2, #25
   11ec4:	bmi.w	12a2c <_vfiprintf_r+0xf3c>
   11ec8:	ldr	r0, [sp, #20]
   11eca:	add	sp, #276	; 0x114
   11ecc:	vpop	{d8}
   11ed0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ed4:	cmp	r1, #0
   11ed6:	beq.n	11e70 <_vfiprintf_r+0x380>
   11ed8:	movs	r3, #0
   11eda:	strb.w	r3, [sp, #67]	; 0x43
   11ede:	movs	r3, #1
   11ee0:	strd	r3, r3, [sp, #12]
   11ee4:	strb.w	r1, [sp, #172]	; 0xac
   11ee8:	add	r4, sp, #172	; 0xac
   11eea:	movs	r3, #0
   11eec:	str	r3, [sp, #32]
   11eee:	mov	r7, r3
   11ef0:	ands.w	r3, r6, #2
   11ef4:	str	r3, [sp, #36]	; 0x24
   11ef6:	beq.n	11efe <_vfiprintf_r+0x40e>
   11ef8:	ldr	r3, [sp, #12]
   11efa:	adds	r3, #2
   11efc:	str	r3, [sp, #12]
   11efe:	ands.w	r3, r6, #132	; 0x84
   11f02:	str	r3, [sp, #40]	; 0x28
   11f04:	bne.n	11f12 <_vfiprintf_r+0x422>
   11f06:	ldr	r3, [sp, #24]
   11f08:	ldr	r2, [sp, #12]
   11f0a:	subs	r5, r3, r2
   11f0c:	cmp	r5, #0
   11f0e:	bgt.w	12408 <_vfiprintf_r+0x918>
   11f12:	ldrd	r0, r3, [sp, #100]	; 0x64
   11f16:	adds	r1, r0, #1
   11f18:	ldrb.w	r2, [sp, #67]	; 0x43
   11f1c:	cbz	r2, 11f40 <_vfiprintf_r+0x450>
   11f1e:	movs	r2, #1
   11f20:	adds	r3, #1
   11f22:	str.w	r2, [r9, #4]
   11f26:	cmp	r1, #7
   11f28:	add.w	r2, sp, #67	; 0x43
   11f2c:	strd	r1, r3, [sp, #100]	; 0x64
   11f30:	str.w	r2, [r9]
   11f34:	bgt.w	123cc <_vfiprintf_r+0x8dc>
   11f38:	mov	r0, r1
   11f3a:	add.w	r9, r9, #8
   11f3e:	adds	r1, #1
   11f40:	ldr	r2, [sp, #36]	; 0x24
   11f42:	cbz	r2, 11f7e <_vfiprintf_r+0x48e>
   11f44:	add	r2, sp, #68	; 0x44
   11f46:	adds	r3, #2
   11f48:	str.w	r2, [r9]
   11f4c:	cmp	r1, #7
   11f4e:	mov.w	r2, #2
   11f52:	strd	r1, r3, [sp, #100]	; 0x64
   11f56:	str.w	r2, [r9, #4]
   11f5a:	ble.w	123fe <_vfiprintf_r+0x90e>
   11f5e:	cmp	r3, #0
   11f60:	beq.w	125ea <_vfiprintf_r+0xafa>
   11f64:	vmov	r1, s16
   11f68:	add	r2, sp, #96	; 0x60
   11f6a:	mov	r0, fp
   11f6c:	bl	11a78 <__sprint_r.part.0>
   11f70:	cmp	r0, #0
   11f72:	bne.n	11e9e <_vfiprintf_r+0x3ae>
   11f74:	ldrd	r0, r3, [sp, #100]	; 0x64
   11f78:	add.w	r9, sp, #108	; 0x6c
   11f7c:	adds	r1, r0, #1
   11f7e:	ldr	r2, [sp, #40]	; 0x28
   11f80:	cmp	r2, #128	; 0x80
   11f82:	beq.w	1228e <_vfiprintf_r+0x79e>
   11f86:	ldr	r2, [sp, #16]
   11f88:	subs	r5, r7, r2
   11f8a:	cmp	r5, #0
   11f8c:	bgt.w	1233e <_vfiprintf_r+0x84e>
   11f90:	ldr	r2, [sp, #16]
   11f92:	str.w	r4, [r9]
   11f96:	add	r3, r2
   11f98:	cmp	r1, #7
   11f9a:	strd	r1, r3, [sp, #100]	; 0x64
   11f9e:	str.w	r2, [r9, #4]
   11fa2:	ble.w	12282 <_vfiprintf_r+0x792>
   11fa6:	cmp	r3, #0
   11fa8:	beq.w	12496 <_vfiprintf_r+0x9a6>
   11fac:	vmov	r1, s16
   11fb0:	add	r2, sp, #96	; 0x60
   11fb2:	mov	r0, fp
   11fb4:	bl	11a78 <__sprint_r.part.0>
   11fb8:	cmp	r0, #0
   11fba:	bne.w	11e9e <_vfiprintf_r+0x3ae>
   11fbe:	ldr	r3, [sp, #104]	; 0x68
   11fc0:	add.w	r9, sp, #108	; 0x6c
   11fc4:	lsls	r5, r6, #29
   11fc6:	bpl.n	11fd4 <_vfiprintf_r+0x4e4>
   11fc8:	ldr	r2, [sp, #24]
   11fca:	ldr	r1, [sp, #12]
   11fcc:	subs	r4, r2, r1
   11fce:	cmp	r4, #0
   11fd0:	bgt.w	124aa <_vfiprintf_r+0x9ba>
   11fd4:	ldrd	r2, r1, [sp, #20]
   11fd8:	ldr	r0, [sp, #12]
   11fda:	cmp	r1, r0
   11fdc:	ite	ge
   11fde:	addge	r2, r2, r1
   11fe0:	addlt	r2, r2, r0
   11fe2:	str	r2, [sp, #20]
   11fe4:	cmp	r3, #0
   11fe6:	bne.w	11e8c <_vfiprintf_r+0x39c>
   11fea:	ldr	r1, [sp, #32]
   11fec:	movs	r3, #0
   11fee:	str	r3, [sp, #100]	; 0x64
   11ff0:	cmp	r1, #0
   11ff2:	beq.w	12288 <_vfiprintf_r+0x798>
   11ff6:	mov	r0, fp
   11ff8:	bl	e244 <_free_r>
   11ffc:	add.w	r9, sp, #108	; 0x6c
   12000:	b.n	11b86 <_vfiprintf_r+0x96>
   12002:	lsls	r4, r3, #22
   12004:	bmi.w	11ec2 <_vfiprintf_r+0x3d2>
   12008:	vmov	r4, s16
   1200c:	ldr	r0, [r4, #88]	; 0x58
   1200e:	bl	df9c <__retarget_lock_release_recursive>
   12012:	ldrh	r2, [r4, #12]
   12014:	b.n	11ec2 <_vfiprintf_r+0x3d2>
   12016:	lsls	r0, r6, #27
   12018:	ldr	r2, [sp, #28]
   1201a:	bmi.w	1265c <_vfiprintf_r+0xb6c>
   1201e:	lsls	r1, r6, #25
   12020:	bpl.w	12656 <_vfiprintf_r+0xb66>
   12024:	ldrsh.w	r3, [r2], #4
   12028:	str	r2, [sp, #28]
   1202a:	asrs	r2, r3, #31
   1202c:	mov	r1, r2
   1202e:	b.n	11d0e <_vfiprintf_r+0x21e>
   12030:	ands.w	r3, r6, #16
   12034:	ldr	r1, [sp, #28]
   12036:	bne.w	1264c <_vfiprintf_r+0xb5c>
   1203a:	ands.w	r0, r6, #64	; 0x40
   1203e:	beq.w	12644 <_vfiprintf_r+0xb54>
   12042:	mov	r2, r3
   12044:	ldr.w	r3, [r1], #4
   12048:	str	r1, [sp, #28]
   1204a:	uxth	r3, r3
   1204c:	b.n	11dd6 <_vfiprintf_r+0x2e6>
   1204e:	ldr	r3, [sp, #28]
   12050:	mov	r2, r3
   12052:	movs	r3, #0
   12054:	strb.w	r3, [sp, #67]	; 0x43
   12058:	mov	r3, r2
   1205a:	ldr.w	r4, [r3], #4
   1205e:	str	r3, [sp, #12]
   12060:	cmp	r4, #0
   12062:	beq.w	1288a <_vfiprintf_r+0xd9a>
   12066:	cmp	r1, #83	; 0x53
   12068:	beq.w	12736 <_vfiprintf_r+0xc46>
   1206c:	ands.w	r5, r6, #16
   12070:	bne.w	12736 <_vfiprintf_r+0xc46>
   12074:	adds	r3, r7, #1
   12076:	beq.w	129e0 <_vfiprintf_r+0xef0>
   1207a:	mov	r2, r7
   1207c:	mov	r1, r5
   1207e:	mov	r0, r4
   12080:	bl	dfa0 <memchr>
   12084:	str	r0, [sp, #32]
   12086:	cmp	r0, #0
   12088:	beq.w	129ca <_vfiprintf_r+0xeda>
   1208c:	subs	r3, r0, r4
   1208e:	ldr	r2, [sp, #12]
   12090:	str	r3, [sp, #16]
   12092:	bic.w	r3, r3, r3, asr #31
   12096:	mov	r7, r5
   12098:	str	r2, [sp, #28]
   1209a:	str	r3, [sp, #12]
   1209c:	str	r5, [sp, #32]
   1209e:	b.n	11d50 <_vfiprintf_r+0x260>
   120a0:	cmp	r1, #67	; 0x43
   120a2:	beq.n	120aa <_vfiprintf_r+0x5ba>
   120a4:	lsls	r5, r6, #27
   120a6:	bpl.w	12704 <_vfiprintf_r+0xc14>
   120aa:	ldr	r5, [sp, #28]
   120ac:	movs	r2, #8
   120ae:	movs	r1, #0
   120b0:	add	r0, sp, #88	; 0x58
   120b2:	add	r4, sp, #172	; 0xac
   120b4:	bl	dcd0 <memset>
   120b8:	add	r3, sp, #88	; 0x58
   120ba:	ldr.w	r2, [r5], #4
   120be:	mov	r1, r4
   120c0:	mov	r0, fp
   120c2:	bl	118ec <_wcrtomb_r>
   120c6:	mov	r3, r0
   120c8:	adds	r3, #1
   120ca:	str	r0, [sp, #16]
   120cc:	beq.w	12a36 <_vfiprintf_r+0xf46>
   120d0:	ldr	r3, [sp, #16]
   120d2:	str	r5, [sp, #28]
   120d4:	bic.w	r3, r3, r3, asr #31
   120d8:	str	r3, [sp, #12]
   120da:	movs	r3, #0
   120dc:	strb.w	r3, [sp, #67]	; 0x43
   120e0:	b.n	11eea <_vfiprintf_r+0x3fa>
   120e2:	ldr	r3, [sp, #28]
   120e4:	ldr.w	r2, [r3], #4
   120e8:	str	r2, [sp, #24]
   120ea:	cmp	r2, #0
   120ec:	bge.w	12628 <_vfiprintf_r+0xb38>
   120f0:	ldr	r2, [sp, #24]
   120f2:	negs	r2, r2
   120f4:	strd	r2, r3, [sp, #24]
   120f8:	ldrb.w	r1, [r8]
   120fc:	orr.w	r6, r6, #4
   12100:	b.n	11bd6 <_vfiprintf_r+0xe6>
   12102:	ldrb.w	r1, [r8]
   12106:	strb.w	r4, [sp, #67]	; 0x43
   1210a:	b.n	11bd6 <_vfiprintf_r+0xe6>
   1210c:	ldrb.w	r1, [r8]
   12110:	orr.w	r6, r6, #128	; 0x80
   12114:	b.n	11bd6 <_vfiprintf_r+0xe6>
   12116:	mov	r2, r8
   12118:	ldrb.w	r1, [r2], #1
   1211c:	cmp	r1, #42	; 0x2a
   1211e:	beq.w	12a4e <_vfiprintf_r+0xf5e>
   12122:	sub.w	r3, r1, #48	; 0x30
   12126:	cmp	r3, #9
   12128:	mov	r8, r2
   1212a:	mov.w	r7, #0
   1212e:	bhi.w	11bda <_vfiprintf_r+0xea>
   12132:	ldrb.w	r1, [r8], #1
   12136:	add.w	r7, r7, r7, lsl #2
   1213a:	add.w	r7, r3, r7, lsl #1
   1213e:	sub.w	r3, r1, #48	; 0x30
   12142:	cmp	r3, #9
   12144:	bls.n	12132 <_vfiprintf_r+0x642>
   12146:	b.n	11bda <_vfiprintf_r+0xea>
   12148:	ldrb.w	r1, [r8]
   1214c:	orr.w	r6, r6, #1
   12150:	b.n	11bd6 <_vfiprintf_r+0xe6>
   12152:	ldrb.w	r3, [sp, #67]	; 0x43
   12156:	cmp	r3, #0
   12158:	bne.w	11ce0 <_vfiprintf_r+0x1f0>
   1215c:	movs	r3, #32
   1215e:	ldrb.w	r1, [r8]
   12162:	strb.w	r3, [sp, #67]	; 0x43
   12166:	b.n	11bd6 <_vfiprintf_r+0xe6>
   12168:	ldrb.w	r1, [r8]
   1216c:	cmp	r1, #108	; 0x6c
   1216e:	ittte	eq
   12170:	ldrbeq.w	r1, [r8, #1]
   12174:	orreq.w	r6, r6, #32
   12178:	addeq.w	r8, r8, #1
   1217c:	orrne.w	r6, r6, #16
   12180:	b.n	11bd6 <_vfiprintf_r+0xe6>
   12182:	ldrb.w	r1, [r8]
   12186:	cmp	r1, #104	; 0x68
   12188:	ittte	eq
   1218a:	ldrbeq.w	r1, [r8, #1]
   1218e:	orreq.w	r6, r6, #512	; 0x200
   12192:	addeq.w	r8, r8, #1
   12196:	orrne.w	r6, r6, #64	; 0x40
   1219a:	b.n	11bd6 <_vfiprintf_r+0xe6>
   1219c:	orr.w	r3, r6, #16
   121a0:	str	r3, [sp, #12]
   121a2:	ldr	r3, [sp, #12]
   121a4:	ands.w	r2, r3, #32
   121a8:	beq.w	125b8 <_vfiprintf_r+0xac8>
   121ac:	ldr	r3, [sp, #28]
   121ae:	adds	r3, #7
   121b0:	bic.w	r3, r3, #7
   121b4:	mov	r1, r3
   121b6:	ldr	r2, [r3, #4]
   121b8:	ldr.w	r3, [r1], #8
   121bc:	str	r1, [sp, #28]
   121be:	movs	r1, #1
   121c0:	b.n	11dde <_vfiprintf_r+0x2ee>
   121c2:	ldr	r2, [sp, #28]
   121c4:	orr.w	r3, r6, #2
   121c8:	str	r3, [sp, #12]
   121ca:	ldr.w	r3, [r2], #4
   121ce:	str	r2, [sp, #28]
   121d0:	movw	r2, #30768	; 0x7830
   121d4:	strh.w	r2, [sp, #68]	; 0x44
   121d8:	ldr	r2, [pc, #736]	; (124bc <_vfiprintf_r+0x9cc>)
   121da:	str	r2, [sp, #48]	; 0x30
   121dc:	movs	r1, #2
   121de:	movs	r2, #0
   121e0:	b.n	11dde <_vfiprintf_r+0x2ee>
   121e2:	lsls	r7, r6, #26
   121e4:	bmi.w	12678 <_vfiprintf_r+0xb88>
   121e8:	lsls	r5, r6, #27
   121ea:	bmi.w	1287a <_vfiprintf_r+0xd8a>
   121ee:	lsls	r4, r6, #25
   121f0:	bmi.w	1299e <_vfiprintf_r+0xeae>
   121f4:	lsls	r0, r6, #22
   121f6:	bpl.w	1287a <_vfiprintf_r+0xd8a>
   121fa:	ldr	r3, [sp, #28]
   121fc:	ldr	r1, [sp, #20]
   121fe:	ldr.w	r2, [r3], #4
   12202:	str	r3, [sp, #28]
   12204:	strb	r1, [r2, #0]
   12206:	b.n	11b86 <_vfiprintf_r+0x96>
   12208:	str	r6, [sp, #12]
   1220a:	cmp	r1, #1
   1220c:	beq.w	11d28 <_vfiprintf_r+0x238>
   12210:	cmp	r1, #2
   12212:	add	r4, sp, #272	; 0x110
   12214:	bne.n	1223a <_vfiprintf_r+0x74a>
   12216:	ldr	r0, [sp, #48]	; 0x30
   12218:	and.w	r1, r3, #15
   1221c:	lsrs	r3, r3, #4
   1221e:	ldrb	r1, [r0, r1]
   12220:	strb.w	r1, [r4, #-1]!
   12224:	orr.w	r3, r3, r2, lsl #28
   12228:	lsrs	r2, r2, #4
   1222a:	orrs.w	r1, r3, r2
   1222e:	bne.n	12218 <_vfiprintf_r+0x728>
   12230:	ldr	r6, [sp, #12]
   12232:	add	r3, sp, #272	; 0x110
   12234:	subs	r3, r3, r4
   12236:	str	r3, [sp, #16]
   12238:	b.n	11d42 <_vfiprintf_r+0x252>
   1223a:	and.w	r1, r3, #7
   1223e:	lsrs	r3, r3, #3
   12240:	orr.w	r3, r3, r2, lsl #29
   12244:	lsrs	r2, r2, #3
   12246:	adds	r1, #48	; 0x30
   12248:	orrs.w	r5, r3, r2
   1224c:	mov	r0, r4
   1224e:	strb.w	r1, [r4, #-1]!
   12252:	bne.n	1223a <_vfiprintf_r+0x74a>
   12254:	ldr	r6, [sp, #12]
   12256:	lsls	r3, r6, #31
   12258:	bpl.n	12232 <_vfiprintf_r+0x742>
   1225a:	cmp	r1, #48	; 0x30
   1225c:	beq.n	12230 <_vfiprintf_r+0x740>
   1225e:	movs	r3, #48	; 0x30
   12260:	subs	r0, #2
   12262:	strb.w	r3, [r4, #-1]
   12266:	add	r3, sp, #272	; 0x110
   12268:	subs	r3, r3, r0
   1226a:	ldr	r6, [sp, #12]
   1226c:	str	r3, [sp, #16]
   1226e:	mov	r4, r0
   12270:	b.n	11d42 <_vfiprintf_r+0x252>
   12272:	ldr	r3, [sp, #16]
   12274:	str	r4, [sp, #108]	; 0x6c
   12276:	movs	r2, #1
   12278:	str	r3, [sp, #112]	; 0x70
   1227a:	str	r3, [sp, #104]	; 0x68
   1227c:	str	r2, [sp, #100]	; 0x64
   1227e:	add.w	r9, sp, #108	; 0x6c
   12282:	add.w	r9, r9, #8
   12286:	b.n	11fc4 <_vfiprintf_r+0x4d4>
   12288:	add.w	r9, sp, #108	; 0x6c
   1228c:	b.n	11b86 <_vfiprintf_r+0x96>
   1228e:	ldr	r2, [sp, #24]
   12290:	ldr	r5, [sp, #12]
   12292:	subs	r5, r2, r5
   12294:	cmp	r5, #0
   12296:	ble.w	11f86 <_vfiprintf_r+0x496>
   1229a:	cmp	r5, #16
   1229c:	ble.w	12a16 <_vfiprintf_r+0xf26>
   122a0:	str	r4, [sp, #36]	; 0x24
   122a2:	vmov	r4, s16
   122a6:	b.n	122b8 <_vfiprintf_r+0x7c8>
   122a8:	add.w	ip, r0, #2
   122ac:	add.w	r9, r9, #8
   122b0:	mov	r0, r2
   122b2:	subs	r5, #16
   122b4:	cmp	r5, #16
   122b6:	ble.n	122f6 <_vfiprintf_r+0x806>
   122b8:	ldr	r1, [pc, #516]	; (124c0 <_vfiprintf_r+0x9d0>)
   122ba:	str.w	r1, [r9]
   122be:	adds	r2, r0, #1
   122c0:	adds	r3, #16
   122c2:	movs	r1, #16
   122c4:	cmp	r2, #7
   122c6:	strd	r2, r3, [sp, #100]	; 0x64
   122ca:	str.w	r1, [r9, #4]
   122ce:	ble.n	122a8 <_vfiprintf_r+0x7b8>
   122d0:	add	r2, sp, #96	; 0x60
   122d2:	cmp	r3, #0
   122d4:	beq.n	123c0 <_vfiprintf_r+0x8d0>
   122d6:	mov	r1, r4
   122d8:	mov	r0, fp
   122da:	add.w	r9, sp, #108	; 0x6c
   122de:	bl	11a78 <__sprint_r.part.0>
   122e2:	cmp	r0, #0
   122e4:	bne.w	11e9e <_vfiprintf_r+0x3ae>
   122e8:	ldrd	r0, r3, [sp, #100]	; 0x64
   122ec:	subs	r5, #16
   122ee:	cmp	r5, #16
   122f0:	add.w	ip, r0, #1
   122f4:	bgt.n	122b8 <_vfiprintf_r+0x7c8>
   122f6:	ldr	r4, [sp, #36]	; 0x24
   122f8:	ldr	r2, [pc, #452]	; (124c0 <_vfiprintf_r+0x9d0>)
   122fa:	str.w	r5, [r9, #4]
   122fe:	add	r3, r5
   12300:	cmp.w	ip, #7
   12304:	strd	ip, r3, [sp, #100]	; 0x64
   12308:	str.w	r2, [r9]
   1230c:	ble.w	12638 <_vfiprintf_r+0xb48>
   12310:	cmp	r3, #0
   12312:	beq.w	12954 <_vfiprintf_r+0xe64>
   12316:	vmov	r1, s16
   1231a:	add	r2, sp, #96	; 0x60
   1231c:	mov	r0, fp
   1231e:	bl	11a78 <__sprint_r.part.0>
   12322:	cmp	r0, #0
   12324:	bne.w	11e9e <_vfiprintf_r+0x3ae>
   12328:	ldr	r2, [sp, #16]
   1232a:	ldrd	r0, r3, [sp, #100]	; 0x64
   1232e:	subs	r5, r7, r2
   12330:	cmp	r5, #0
   12332:	add.w	r1, r0, #1
   12336:	add.w	r9, sp, #108	; 0x6c
   1233a:	ble.w	11f90 <_vfiprintf_r+0x4a0>
   1233e:	cmp	r5, #16
   12340:	ble.n	12396 <_vfiprintf_r+0x8a6>
   12342:	str	r4, [sp, #36]	; 0x24
   12344:	movs	r7, #16
   12346:	vmov	r4, s16
   1234a:	b.n	1235c <_vfiprintf_r+0x86c>
   1234c:	add.w	ip, r0, #2
   12350:	add.w	r9, r9, #8
   12354:	mov	r0, r2
   12356:	subs	r5, #16
   12358:	cmp	r5, #16
   1235a:	ble.n	12392 <_vfiprintf_r+0x8a2>
   1235c:	adds	r2, r0, #1
   1235e:	ldr	r1, [pc, #352]	; (124c0 <_vfiprintf_r+0x9d0>)
   12360:	adds	r3, #16
   12362:	cmp	r2, #7
   12364:	strd	r1, r7, [r9]
   12368:	strd	r2, r3, [sp, #100]	; 0x64
   1236c:	ble.n	1234c <_vfiprintf_r+0x85c>
   1236e:	add	r2, sp, #96	; 0x60
   12370:	cbz	r3, 123b4 <_vfiprintf_r+0x8c4>
   12372:	mov	r1, r4
   12374:	mov	r0, fp
   12376:	add.w	r9, sp, #108	; 0x6c
   1237a:	bl	11a78 <__sprint_r.part.0>
   1237e:	cmp	r0, #0
   12380:	bne.w	11e9e <_vfiprintf_r+0x3ae>
   12384:	ldrd	r0, r3, [sp, #100]	; 0x64
   12388:	subs	r5, #16
   1238a:	cmp	r5, #16
   1238c:	add.w	ip, r0, #1
   12390:	bgt.n	1235c <_vfiprintf_r+0x86c>
   12392:	ldr	r4, [sp, #36]	; 0x24
   12394:	mov	r1, ip
   12396:	ldr	r2, [pc, #296]	; (124c0 <_vfiprintf_r+0x9d0>)
   12398:	str.w	r5, [r9, #4]
   1239c:	add	r3, r5
   1239e:	cmp	r1, #7
   123a0:	strd	r1, r3, [sp, #100]	; 0x64
   123a4:	str.w	r2, [r9]
   123a8:	bgt.w	1257a <_vfiprintf_r+0xa8a>
   123ac:	add.w	r9, r9, #8
   123b0:	adds	r1, #1
   123b2:	b.n	11f90 <_vfiprintf_r+0x4a0>
   123b4:	mov.w	ip, #1
   123b8:	mov	r0, r3
   123ba:	add.w	r9, sp, #108	; 0x6c
   123be:	b.n	12356 <_vfiprintf_r+0x866>
   123c0:	mov.w	ip, #1
   123c4:	mov	r0, r3
   123c6:	add.w	r9, sp, #108	; 0x6c
   123ca:	b.n	122b2 <_vfiprintf_r+0x7c2>
   123cc:	cmp	r3, #0
   123ce:	beq.w	125da <_vfiprintf_r+0xaea>
   123d2:	vmov	r1, s16
   123d6:	add	r2, sp, #96	; 0x60
   123d8:	mov	r0, fp
   123da:	bl	11a78 <__sprint_r.part.0>
   123de:	cmp	r0, #0
   123e0:	bne.w	11e9e <_vfiprintf_r+0x3ae>
   123e4:	ldrd	r0, r3, [sp, #100]	; 0x64
   123e8:	add.w	r9, sp, #108	; 0x6c
   123ec:	adds	r1, r0, #1
   123ee:	b.n	11f40 <_vfiprintf_r+0x450>
   123f0:	movs	r3, #2
   123f2:	add	r2, sp, #68	; 0x44
   123f4:	str	r3, [sp, #112]	; 0x70
   123f6:	str	r2, [sp, #108]	; 0x6c
   123f8:	movs	r1, #1
   123fa:	add.w	r9, sp, #108	; 0x6c
   123fe:	mov	r0, r1
   12400:	add.w	r9, r9, #8
   12404:	adds	r1, r0, #1
   12406:	b.n	11f7e <_vfiprintf_r+0x48e>
   12408:	cmp	r5, #16
   1240a:	ble.w	129d8 <_vfiprintf_r+0xee8>
   1240e:	ldrd	r1, r3, [sp, #100]	; 0x64
   12412:	str	r4, [sp, #60]	; 0x3c
   12414:	mov	r0, r1
   12416:	vmov	r4, s16
   1241a:	b.n	1242c <_vfiprintf_r+0x93c>
   1241c:	add.w	ip, r0, #2
   12420:	add.w	r9, r9, #8
   12424:	mov	r0, r2
   12426:	subs	r5, #16
   12428:	cmp	r5, #16
   1242a:	ble.n	12468 <_vfiprintf_r+0x978>
   1242c:	ldr	r1, [pc, #148]	; (124c4 <_vfiprintf_r+0x9d4>)
   1242e:	str.w	r1, [r9]
   12432:	adds	r2, r0, #1
   12434:	adds	r3, #16
   12436:	movs	r1, #16
   12438:	cmp	r2, #7
   1243a:	strd	r2, r3, [sp, #100]	; 0x64
   1243e:	str.w	r1, [r9, #4]
   12442:	ble.n	1241c <_vfiprintf_r+0x92c>
   12444:	add	r2, sp, #96	; 0x60
   12446:	cbz	r3, 1248a <_vfiprintf_r+0x99a>
   12448:	mov	r1, r4
   1244a:	mov	r0, fp
   1244c:	add.w	r9, sp, #108	; 0x6c
   12450:	bl	11a78 <__sprint_r.part.0>
   12454:	cmp	r0, #0
   12456:	bne.w	11e9e <_vfiprintf_r+0x3ae>
   1245a:	ldrd	r0, r3, [sp, #100]	; 0x64
   1245e:	subs	r5, #16
   12460:	cmp	r5, #16
   12462:	add.w	ip, r0, #1
   12466:	bgt.n	1242c <_vfiprintf_r+0x93c>
   12468:	ldr	r4, [sp, #60]	; 0x3c
   1246a:	mov	r0, ip
   1246c:	ldr	r2, [pc, #84]	; (124c4 <_vfiprintf_r+0x9d4>)
   1246e:	str.w	r5, [r9, #4]
   12472:	add	r3, r5
   12474:	cmp	r0, #7
   12476:	strd	r0, r3, [sp, #100]	; 0x64
   1247a:	str.w	r2, [r9]
   1247e:	bgt.w	12604 <_vfiprintf_r+0xb14>
   12482:	add.w	r9, r9, #8
   12486:	adds	r1, r0, #1
   12488:	b.n	11f18 <_vfiprintf_r+0x428>
   1248a:	mov	r0, r3
   1248c:	mov.w	ip, #1
   12490:	add.w	r9, sp, #108	; 0x6c
   12494:	b.n	12426 <_vfiprintf_r+0x936>
   12496:	lsls	r6, r6, #29
   12498:	str	r3, [sp, #100]	; 0x64
   1249a:	bpl.n	12544 <_vfiprintf_r+0xa54>
   1249c:	ldr	r2, [sp, #24]
   1249e:	ldr	r1, [sp, #12]
   124a0:	subs	r4, r2, r1
   124a2:	cmp	r4, #0
   124a4:	ble.n	12544 <_vfiprintf_r+0xa54>
   124a6:	add.w	r9, sp, #108	; 0x6c
   124aa:	cmp	r4, #16
   124ac:	ble.w	12a10 <_vfiprintf_r+0xf20>
   124b0:	ldr	r1, [sp, #100]	; 0x64
   124b2:	vmov	r6, s16
   124b6:	movs	r5, #16
   124b8:	b.n	124d6 <_vfiprintf_r+0x9e6>
   124ba:	nop
   124bc:	.word	0x20000e5c
   124c0:	.word	0x20001310
   124c4:	.word	0x20000ea0
   124c8:	adds	r0, r1, #2
   124ca:	add.w	r9, r9, #8
   124ce:	mov	r1, r2
   124d0:	subs	r4, #16
   124d2:	cmp	r4, #16
   124d4:	ble.n	1250c <_vfiprintf_r+0xa1c>
   124d6:	adds	r2, r1, #1
   124d8:	ldr	r0, [pc, #716]	; (127a8 <_vfiprintf_r+0xcb8>)
   124da:	adds	r3, #16
   124dc:	cmp	r2, #7
   124de:	strd	r0, r5, [r9]
   124e2:	strd	r2, r3, [sp, #100]	; 0x64
   124e6:	ble.n	124c8 <_vfiprintf_r+0x9d8>
   124e8:	add	r2, sp, #96	; 0x60
   124ea:	cbz	r3, 1253a <_vfiprintf_r+0xa4a>
   124ec:	mov	r1, r6
   124ee:	mov	r0, fp
   124f0:	bl	11a78 <__sprint_r.part.0>
   124f4:	cmp	r0, #0
   124f6:	bne.w	11e9e <_vfiprintf_r+0x3ae>
   124fa:	ldrd	r1, r3, [sp, #100]	; 0x64
   124fe:	subs	r4, #16
   12500:	cmp	r4, #16
   12502:	add.w	r0, r1, #1
   12506:	add.w	r9, sp, #108	; 0x6c
   1250a:	bgt.n	124d6 <_vfiprintf_r+0x9e6>
   1250c:	ldr	r2, [pc, #664]	; (127a8 <_vfiprintf_r+0xcb8>)
   1250e:	str.w	r4, [r9, #4]
   12512:	add	r3, r4
   12514:	cmp	r0, #7
   12516:	strd	r0, r3, [sp, #100]	; 0x64
   1251a:	str.w	r2, [r9]
   1251e:	ble.w	11fd4 <_vfiprintf_r+0x4e4>
   12522:	cbz	r3, 12544 <_vfiprintf_r+0xa54>
   12524:	vmov	r1, s16
   12528:	add	r2, sp, #96	; 0x60
   1252a:	mov	r0, fp
   1252c:	bl	11a78 <__sprint_r.part.0>
   12530:	cmp	r0, #0
   12532:	bne.w	11e9e <_vfiprintf_r+0x3ae>
   12536:	ldr	r3, [sp, #104]	; 0x68
   12538:	b.n	11fd4 <_vfiprintf_r+0x4e4>
   1253a:	movs	r0, #1
   1253c:	mov	r1, r3
   1253e:	add.w	r9, sp, #108	; 0x6c
   12542:	b.n	124d0 <_vfiprintf_r+0x9e0>
   12544:	ldrd	r3, r2, [sp, #20]
   12548:	ldr	r1, [sp, #12]
   1254a:	cmp	r2, r1
   1254c:	ite	ge
   1254e:	addge	r3, r3, r2
   12550:	addlt	r3, r3, r1
   12552:	str	r3, [sp, #20]
   12554:	b.n	11fea <_vfiprintf_r+0x4fa>
   12556:	ldrsh.w	r1, [r2, #12]
   1255a:	lsls	r7, r1, #22
   1255c:	vmov	r3, s16
   12560:	uxth	r2, r1
   12562:	bmi.w	11b36 <_vfiprintf_r+0x46>
   12566:	vmov	r5, s16
   1256a:	ldr	r0, [r3, #88]	; 0x58
   1256c:	bl	df98 <__retarget_lock_acquire_recursive>
   12570:	ldrsh.w	r1, [r5, #12]
   12574:	uxth	r2, r1
   12576:	b.w	11b36 <_vfiprintf_r+0x46>
   1257a:	cmp	r3, #0
   1257c:	beq.w	12272 <_vfiprintf_r+0x782>
   12580:	vmov	r1, s16
   12584:	add	r2, sp, #96	; 0x60
   12586:	mov	r0, fp
   12588:	bl	11a78 <__sprint_r.part.0>
   1258c:	cmp	r0, #0
   1258e:	bne.w	11e9e <_vfiprintf_r+0x3ae>
   12592:	ldr	r1, [sp, #100]	; 0x64
   12594:	ldr	r3, [sp, #104]	; 0x68
   12596:	adds	r1, #1
   12598:	add.w	r9, sp, #108	; 0x6c
   1259c:	b.n	11f90 <_vfiprintf_r+0x4a0>
   1259e:	str	r2, [sp, #100]	; 0x64
   125a0:	add.w	r9, sp, #108	; 0x6c
   125a4:	b.n	11e64 <_vfiprintf_r+0x374>
   125a6:	cmp	r7, #0
   125a8:	bne.w	11d32 <_vfiprintf_r+0x242>
   125ac:	ldr	r6, [sp, #12]
   125ae:	movs	r7, #0
   125b0:	str	r7, [sp, #16]
   125b2:	add	r4, sp, #272	; 0x110
   125b4:	b.w	11d42 <_vfiprintf_r+0x252>
   125b8:	ldr	r3, [sp, #12]
   125ba:	ands.w	r3, r3, #16
   125be:	bne.n	1266a <_vfiprintf_r+0xb7a>
   125c0:	ldr	r2, [sp, #12]
   125c2:	ands.w	r0, r2, #64	; 0x40
   125c6:	beq.w	128a0 <_vfiprintf_r+0xdb0>
   125ca:	ldr	r1, [sp, #28]
   125cc:	mov	r2, r3
   125ce:	ldr.w	r3, [r1], #4
   125d2:	str	r1, [sp, #28]
   125d4:	uxth	r3, r3
   125d6:	movs	r1, #1
   125d8:	b.n	11dde <_vfiprintf_r+0x2ee>
   125da:	ldr	r2, [sp, #36]	; 0x24
   125dc:	cmp	r2, #0
   125de:	bne.n	126aa <_vfiprintf_r+0xbba>
   125e0:	mov	r0, r3
   125e2:	movs	r1, #1
   125e4:	add.w	r9, sp, #108	; 0x6c
   125e8:	b.n	11f7e <_vfiprintf_r+0x48e>
   125ea:	movs	r1, #1
   125ec:	mov	r0, r3
   125ee:	add.w	r9, sp, #108	; 0x6c
   125f2:	b.n	11f7e <_vfiprintf_r+0x48e>
   125f4:	negs	r3, r3
   125f6:	sbc.w	r2, r2, r2, lsl #1
   125fa:	str	r6, [sp, #12]
   125fc:	movs	r0, #45	; 0x2d
   125fe:	movs	r1, #1
   12600:	b.w	11de0 <_vfiprintf_r+0x2f0>
   12604:	cmp	r3, #0
   12606:	beq.w	1271a <_vfiprintf_r+0xc2a>
   1260a:	vmov	r1, s16
   1260e:	add	r2, sp, #96	; 0x60
   12610:	mov	r0, fp
   12612:	bl	11a78 <__sprint_r.part.0>
   12616:	cmp	r0, #0
   12618:	bne.w	11e9e <_vfiprintf_r+0x3ae>
   1261c:	ldrd	r0, r3, [sp, #100]	; 0x64
   12620:	add.w	r9, sp, #108	; 0x6c
   12624:	adds	r1, r0, #1
   12626:	b.n	11f18 <_vfiprintf_r+0x428>
   12628:	ldrb.w	r1, [r8]
   1262c:	str	r3, [sp, #28]
   1262e:	b.w	11bd6 <_vfiprintf_r+0xe6>
   12632:	add	r4, sp, #272	; 0x110
   12634:	b.w	11d42 <_vfiprintf_r+0x252>
   12638:	add.w	r9, r9, #8
   1263c:	add.w	r1, ip, #1
   12640:	mov	r0, ip
   12642:	b.n	11f86 <_vfiprintf_r+0x496>
   12644:	ands.w	r2, r6, #512	; 0x200
   12648:	bne.w	1297a <_vfiprintf_r+0xe8a>
   1264c:	ldr.w	r3, [r1], #4
   12650:	str	r1, [sp, #28]
   12652:	b.w	11dd6 <_vfiprintf_r+0x2e6>
   12656:	lsls	r3, r6, #22
   12658:	bmi.w	1296c <_vfiprintf_r+0xe7c>
   1265c:	ldr.w	r3, [r2], #4
   12660:	str	r2, [sp, #28]
   12662:	asrs	r2, r3, #31
   12664:	mov	r1, r2
   12666:	b.w	11d0e <_vfiprintf_r+0x21e>
   1266a:	ldr	r1, [sp, #28]
   1266c:	ldr.w	r3, [r1], #4
   12670:	str	r1, [sp, #28]
   12672:	movs	r1, #1
   12674:	b.w	11dde <_vfiprintf_r+0x2ee>
   12678:	ldr	r3, [sp, #28]
   1267a:	ldr	r0, [sp, #20]
   1267c:	ldr.w	r1, [r3], #4
   12680:	str	r3, [sp, #28]
   12682:	asrs	r2, r0, #31
   12684:	strd	r0, r2, [r1]
   12688:	b.w	11b86 <_vfiprintf_r+0x96>
   1268c:	ldr	r3, [sp, #44]	; 0x2c
   1268e:	cmp	r3, #0
   12690:	beq.w	11ce0 <_vfiprintf_r+0x1f0>
   12694:	ldr	r3, [sp, #44]	; 0x2c
   12696:	ldrb	r3, [r3, #0]
   12698:	cmp	r3, #0
   1269a:	beq.w	11ce0 <_vfiprintf_r+0x1f0>
   1269e:	ldrb.w	r1, [r8]
   126a2:	orr.w	r6, r6, #1024	; 0x400
   126a6:	b.w	11bd6 <_vfiprintf_r+0xe6>
   126aa:	movs	r3, #2
   126ac:	add	r2, sp, #68	; 0x44
   126ae:	str	r3, [sp, #112]	; 0x70
   126b0:	str	r2, [sp, #108]	; 0x6c
   126b2:	movs	r0, #1
   126b4:	add.w	r9, sp, #108	; 0x6c
   126b8:	b.n	12400 <_vfiprintf_r+0x910>
   126ba:	str	r6, [sp, #12]
   126bc:	b.n	121a2 <_vfiprintf_r+0x6b2>
   126be:	ldr	r3, [pc, #236]	; (127ac <_vfiprintf_r+0xcbc>)
   126c0:	str	r3, [sp, #48]	; 0x30
   126c2:	ands.w	r2, r6, #32
   126c6:	beq.n	1277c <_vfiprintf_r+0xc8c>
   126c8:	ldr	r3, [sp, #28]
   126ca:	adds	r3, #7
   126cc:	bic.w	r3, r3, #7
   126d0:	mov	r0, r3
   126d2:	ldr	r2, [r3, #4]
   126d4:	ldr.w	r3, [r0], #8
   126d8:	str	r0, [sp, #28]
   126da:	lsls	r4, r6, #31
   126dc:	bpl.n	126f2 <_vfiprintf_r+0xc02>
   126de:	orrs.w	r0, r3, r2
   126e2:	beq.n	126f2 <_vfiprintf_r+0xc02>
   126e4:	strb.w	r1, [sp, #69]	; 0x45
   126e8:	movs	r1, #48	; 0x30
   126ea:	orr.w	r6, r6, #2
   126ee:	strb.w	r1, [sp, #68]	; 0x44
   126f2:	bic.w	r1, r6, #1024	; 0x400
   126f6:	str	r1, [sp, #12]
   126f8:	movs	r1, #2
   126fa:	b.w	11dde <_vfiprintf_r+0x2ee>
   126fe:	ldr	r3, [pc, #176]	; (127b0 <_vfiprintf_r+0xcc0>)
   12700:	str	r3, [sp, #48]	; 0x30
   12702:	b.n	126c2 <_vfiprintf_r+0xbd2>
   12704:	ldr	r3, [sp, #28]
   12706:	movs	r1, #1
   12708:	ldr.w	r2, [r3], #4
   1270c:	str	r1, [sp, #12]
   1270e:	strb.w	r2, [sp, #172]	; 0xac
   12712:	str	r3, [sp, #28]
   12714:	str	r1, [sp, #16]
   12716:	add	r4, sp, #172	; 0xac
   12718:	b.n	120da <_vfiprintf_r+0x5ea>
   1271a:	ldrb.w	r2, [sp, #67]	; 0x43
   1271e:	cmp	r2, #0
   12720:	bne.w	12988 <_vfiprintf_r+0xe98>
   12724:	ldr	r2, [sp, #36]	; 0x24
   12726:	cmp	r2, #0
   12728:	bne.w	123f0 <_vfiprintf_r+0x900>
   1272c:	mov	r0, r3
   1272e:	movs	r1, #1
   12730:	add.w	r9, sp, #108	; 0x6c
   12734:	b.n	11f86 <_vfiprintf_r+0x496>
   12736:	movs	r1, #0
   12738:	movs	r2, #8
   1273a:	add	r0, sp, #88	; 0x58
   1273c:	str	r4, [sp, #76]	; 0x4c
   1273e:	bl	dcd0 <memset>
   12742:	adds	r1, r7, #1
   12744:	beq.w	128c0 <_vfiprintf_r+0xdd0>
   12748:	movs	r5, #0
   1274a:	str	r4, [sp, #28]
   1274c:	mov	r4, r5
   1274e:	b.n	1276a <_vfiprintf_r+0xc7a>
   12750:	add	r1, sp, #172	; 0xac
   12752:	mov	r0, fp
   12754:	bl	118ec <_wcrtomb_r>
   12758:	adds	r2, r0, #1
   1275a:	add	r0, r4
   1275c:	beq.w	12a36 <_vfiprintf_r+0xf46>
   12760:	cmp	r0, r7
   12762:	bgt.n	12776 <_vfiprintf_r+0xc86>
   12764:	beq.w	12a48 <_vfiprintf_r+0xf58>
   12768:	mov	r4, r0
   1276a:	ldr	r2, [sp, #76]	; 0x4c
   1276c:	ldr	r2, [r2, r5]
   1276e:	add	r3, sp, #88	; 0x58
   12770:	adds	r5, #4
   12772:	cmp	r2, #0
   12774:	bne.n	12750 <_vfiprintf_r+0xc60>
   12776:	str	r4, [sp, #16]
   12778:	ldr	r4, [sp, #28]
   1277a:	b.n	128dc <_vfiprintf_r+0xdec>
   1277c:	ands.w	r3, r6, #16
   12780:	ldr	r0, [sp, #28]
   12782:	bne.n	1279e <_vfiprintf_r+0xcae>
   12784:	ands.w	r4, r6, #64	; 0x40
   12788:	beq.n	12796 <_vfiprintf_r+0xca6>
   1278a:	mov	r2, r3
   1278c:	ldr.w	r3, [r0], #4
   12790:	str	r0, [sp, #28]
   12792:	uxth	r3, r3
   12794:	b.n	126da <_vfiprintf_r+0xbea>
   12796:	ands.w	r2, r6, #512	; 0x200
   1279a:	bne.w	12960 <_vfiprintf_r+0xe70>
   1279e:	ldr.w	r3, [r0], #4
   127a2:	str	r0, [sp, #28]
   127a4:	b.n	126da <_vfiprintf_r+0xbea>
   127a6:	nop
   127a8:	.word	0x20000ea0
   127ac:	.word	0x20000e5c
   127b0:	.word	0x20000e70
   127b4:	ldr	r1, [sp, #12]
   127b6:	str	r7, [sp, #16]
   127b8:	add	r4, sp, #272	; 0x110
   127ba:	mov	lr, r3
   127bc:	vmov	s17, fp
   127c0:	and.w	r6, r1, #1024	; 0x400
   127c4:	mov.w	ip, #0
   127c8:	mov	r3, r4
   127ca:	b.n	127da <_vfiprintf_r+0xcea>
   127cc:	cmp.w	lr, #10
   127d0:	sbcs.w	r2, r2, #0
   127d4:	bcc.n	1284a <_vfiprintf_r+0xd5a>
   127d6:	mov	lr, r4
   127d8:	mov	r2, r5
   127da:	ldr	r1, [pc, #664]	; (12a74 <_vfiprintf_r+0xf84>)
   127dc:	adds.w	r0, lr, r2
   127e0:	adc.w	r0, r0, #0
   127e4:	mov	r7, r1
   127e6:	umull	r1, r4, r1, r0
   127ea:	bic.w	r1, r4, #3
   127ee:	add.w	r1, r1, r4, lsr #2
   127f2:	subs	r0, r0, r1
   127f4:	subs.w	r1, lr, r0
   127f8:	mov.w	r5, #3435973836	; 0xcccccccc
   127fc:	sbc.w	r4, r2, #0
   12800:	mul.w	r5, r5, r1
   12804:	mla	r5, r7, r4, r5
   12808:	umull	r4, r1, r1, r7
   1280c:	add	r5, r1
   1280e:	movs	r7, #5
   12810:	and.w	r1, r4, #1
   12814:	umull	r1, fp, r1, r7
   12818:	adds	r1, r1, r0
   1281a:	lsrs	r4, r4, #1
   1281c:	adds	r1, #48	; 0x30
   1281e:	strb.w	r1, [r3, #-1]
   12822:	orr.w	r4, r4, r5, lsl #31
   12826:	add.w	ip, ip, #1
   1282a:	subs	r3, #1
   1282c:	lsrs	r5, r5, #1
   1282e:	cmp	r6, #0
   12830:	beq.n	127cc <_vfiprintf_r+0xcdc>
   12832:	ldr	r1, [sp, #44]	; 0x2c
   12834:	ldrb	r1, [r1, #0]
   12836:	cmp	r1, ip
   12838:	bne.n	127cc <_vfiprintf_r+0xcdc>
   1283a:	cmp.w	ip, #255	; 0xff
   1283e:	beq.n	127cc <_vfiprintf_r+0xcdc>
   12840:	cmp.w	lr, #10
   12844:	sbcs.w	r2, r2, #0
   12848:	bcs.n	12924 <_vfiprintf_r+0xe34>
   1284a:	mov	r4, r3
   1284c:	add	r3, sp, #272	; 0x110
   1284e:	subs	r3, r3, r4
   12850:	ldr	r7, [sp, #16]
   12852:	ldr	r6, [sp, #12]
   12854:	str	r3, [sp, #16]
   12856:	vmov	fp, s17
   1285a:	b.w	11d42 <_vfiprintf_r+0x252>
   1285e:	str	r6, [sp, #12]
   12860:	b.w	11d28 <_vfiprintf_r+0x238>
   12864:	mov	r0, fp
   12866:	bl	d944 <__sinit>
   1286a:	b.w	11b24 <_vfiprintf_r+0x34>
   1286e:	cmp	r1, #1
   12870:	str	r6, [sp, #12]
   12872:	bne.w	12210 <_vfiprintf_r+0x720>
   12876:	b.w	11d32 <_vfiprintf_r+0x242>
   1287a:	ldr	r3, [sp, #28]
   1287c:	ldr	r1, [sp, #20]
   1287e:	ldr.w	r2, [r3], #4
   12882:	str	r1, [r2, #0]
   12884:	str	r3, [sp, #28]
   12886:	b.w	11b86 <_vfiprintf_r+0x96>
   1288a:	cmp	r7, #6
   1288c:	mov	r3, r7
   1288e:	ldr	r2, [sp, #12]
   12890:	ldr	r4, [pc, #484]	; (12a78 <_vfiprintf_r+0xf88>)
   12892:	str	r2, [sp, #28]
   12894:	it	cs
   12896:	movcs	r3, #6
   12898:	str	r3, [sp, #16]
   1289a:	str	r3, [sp, #12]
   1289c:	b.w	11eea <_vfiprintf_r+0x3fa>
   128a0:	ldr	r3, [sp, #12]
   128a2:	ldr	r1, [sp, #28]
   128a4:	ands.w	r2, r3, #512	; 0x200
   128a8:	ite	ne
   128aa:	ldrne.w	r3, [r1], #4
   128ae:	ldreq.w	r3, [r1], #4
   128b2:	str	r1, [sp, #28]
   128b4:	itt	ne
   128b6:	movne	r2, r0
   128b8:	uxtbne	r3, r3
   128ba:	movs	r1, #1
   128bc:	b.w	11dde <_vfiprintf_r+0x2ee>
   128c0:	add	r3, sp, #88	; 0x58
   128c2:	str	r3, [sp, #0]
   128c4:	movs	r3, #0
   128c6:	mov	r1, r3
   128c8:	add	r2, sp, #76	; 0x4c
   128ca:	mov	r0, fp
   128cc:	bl	11938 <_wcsrtombs_r>
   128d0:	mov	r3, r0
   128d2:	adds	r3, #1
   128d4:	str	r0, [sp, #16]
   128d6:	beq.w	12a36 <_vfiprintf_r+0xf46>
   128da:	str	r4, [sp, #76]	; 0x4c
   128dc:	ldr	r3, [sp, #16]
   128de:	cmp	r3, #0
   128e0:	beq.n	12944 <_vfiprintf_r+0xe54>
   128e2:	cmp	r3, #99	; 0x63
   128e4:	bgt.n	129ae <_vfiprintf_r+0xebe>
   128e6:	movs	r3, #0
   128e8:	str	r3, [sp, #32]
   128ea:	add	r4, sp, #172	; 0xac
   128ec:	movs	r2, #8
   128ee:	movs	r1, #0
   128f0:	add	r0, sp, #88	; 0x58
   128f2:	bl	dcd0 <memset>
   128f6:	ldr	r5, [sp, #16]
   128f8:	add	r3, sp, #88	; 0x58
   128fa:	str	r3, [sp, #0]
   128fc:	add	r2, sp, #76	; 0x4c
   128fe:	mov	r3, r5
   12900:	mov	r1, r4
   12902:	mov	r0, fp
   12904:	bl	11938 <_wcsrtombs_r>
   12908:	cmp	r5, r0
   1290a:	bne.w	12a64 <_vfiprintf_r+0xf74>
   1290e:	ldr	r3, [sp, #12]
   12910:	ldr	r2, [sp, #16]
   12912:	str	r3, [sp, #28]
   12914:	movs	r3, #0
   12916:	strb	r3, [r4, r2]
   12918:	mov	r7, r3
   1291a:	bic.w	r3, r2, r2, asr #31
   1291e:	str	r3, [sp, #12]
   12920:	b.w	11d50 <_vfiprintf_r+0x260>
   12924:	ldr	r2, [sp, #56]	; 0x38
   12926:	ldr	r1, [sp, #52]	; 0x34
   12928:	subs	r3, r3, r2
   1292a:	mov	r0, r3
   1292c:	str	r3, [sp, #32]
   1292e:	bl	de00 <strncpy>
   12932:	ldr	r1, [sp, #44]	; 0x2c
   12934:	ldr	r3, [sp, #32]
   12936:	ldrb	r2, [r1, #1]
   12938:	cbz	r2, 1293e <_vfiprintf_r+0xe4e>
   1293a:	adds	r1, #1
   1293c:	str	r1, [sp, #44]	; 0x2c
   1293e:	mov.w	ip, #0
   12942:	b.n	127d6 <_vfiprintf_r+0xce6>
   12944:	ldr	r3, [sp, #12]
   12946:	str	r3, [sp, #28]
   12948:	ldr	r3, [sp, #16]
   1294a:	str	r3, [sp, #12]
   1294c:	mov	r7, r3
   1294e:	str	r3, [sp, #32]
   12950:	b.w	11d50 <_vfiprintf_r+0x260>
   12954:	movs	r1, #1
   12956:	mov	r0, r3
   12958:	add.w	r9, sp, #108	; 0x6c
   1295c:	b.w	11f86 <_vfiprintf_r+0x496>
   12960:	ldr.w	r3, [r0], #4
   12964:	str	r0, [sp, #28]
   12966:	mov	r2, r4
   12968:	uxtb	r3, r3
   1296a:	b.n	126da <_vfiprintf_r+0xbea>
   1296c:	ldrsb.w	r3, [r2], #4
   12970:	str	r2, [sp, #28]
   12972:	asrs	r2, r3, #31
   12974:	mov	r1, r2
   12976:	b.w	11d0e <_vfiprintf_r+0x21e>
   1297a:	ldr.w	r3, [r1], #4
   1297e:	str	r1, [sp, #28]
   12980:	mov	r2, r0
   12982:	uxtb	r3, r3
   12984:	b.w	11dd6 <_vfiprintf_r+0x2e6>
   12988:	movs	r3, #1
   1298a:	str	r3, [sp, #112]	; 0x70
   1298c:	movs	r1, #1
   1298e:	add.w	r3, sp, #67	; 0x43
   12992:	str	r3, [sp, #108]	; 0x6c
   12994:	add.w	r9, sp, #108	; 0x6c
   12998:	mov	r3, r1
   1299a:	b.w	11f38 <_vfiprintf_r+0x448>
   1299e:	ldr	r3, [sp, #28]
   129a0:	ldr	r1, [sp, #20]
   129a2:	ldr.w	r2, [r3], #4
   129a6:	str	r3, [sp, #28]
   129a8:	strh	r1, [r2, #0]
   129aa:	b.w	11b86 <_vfiprintf_r+0x96>
   129ae:	adds	r1, r3, #1
   129b0:	mov	r0, fp
   129b2:	bl	cebc <_malloc_r>
   129b6:	mov	r4, r0
   129b8:	cmp	r0, #0
   129ba:	beq.n	12a36 <_vfiprintf_r+0xf46>
   129bc:	str	r0, [sp, #32]
   129be:	b.n	128ec <_vfiprintf_r+0xdfc>
   129c0:	ldr	r0, [r1, #88]	; 0x58
   129c2:	bl	df9c <__retarget_lock_release_recursive>
   129c6:	b.w	11d9c <_vfiprintf_r+0x2ac>
   129ca:	ldr	r3, [sp, #12]
   129cc:	str	r3, [sp, #28]
   129ce:	strd	r7, r7, [sp, #12]
   129d2:	ldr	r7, [sp, #32]
   129d4:	b.w	11d50 <_vfiprintf_r+0x260>
   129d8:	ldr	r0, [sp, #100]	; 0x64
   129da:	ldr	r3, [sp, #104]	; 0x68
   129dc:	adds	r0, #1
   129de:	b.n	1246c <_vfiprintf_r+0x97c>
   129e0:	ldr	r3, [sp, #12]
   129e2:	str	r3, [sp, #28]
   129e4:	mov	r0, r4
   129e6:	bl	e040 <strlen>
   129ea:	bic.w	r3, r0, r0, asr #31
   129ee:	mov	r7, r5
   129f0:	str	r0, [sp, #16]
   129f2:	str	r3, [sp, #12]
   129f4:	str	r5, [sp, #32]
   129f6:	b.w	11d50 <_vfiprintf_r+0x260>
   129fa:	vmov	r1, s16
   129fe:	add	r2, sp, #96	; 0x60
   12a00:	mov	r0, fp
   12a02:	bl	11a78 <__sprint_r.part.0>
   12a06:	cmp	r0, #0
   12a08:	beq.w	11e78 <_vfiprintf_r+0x388>
   12a0c:	b.w	11eaa <_vfiprintf_r+0x3ba>
   12a10:	ldr	r0, [sp, #100]	; 0x64
   12a12:	adds	r0, #1
   12a14:	b.n	1250c <_vfiprintf_r+0xa1c>
   12a16:	mov	ip, r1
   12a18:	b.n	122f8 <_vfiprintf_r+0x808>
   12a1a:	ldr	r3, [r5, #100]	; 0x64
   12a1c:	lsls	r1, r3, #31
   12a1e:	bmi.n	12a2c <_vfiprintf_r+0xf3c>
   12a20:	ldrh	r3, [r5, #12]
   12a22:	lsls	r2, r3, #22
   12a24:	bmi.n	12a2c <_vfiprintf_r+0xf3c>
   12a26:	ldr	r0, [r5, #88]	; 0x58
   12a28:	bl	df9c <__retarget_lock_release_recursive>
   12a2c:	mov.w	r3, #4294967295
   12a30:	str	r3, [sp, #20]
   12a32:	b.w	11ec8 <_vfiprintf_r+0x3d8>
   12a36:	vmov	r2, s16
   12a3a:	ldrsh.w	r3, [r2, #12]
   12a3e:	orr.w	r3, r3, #64	; 0x40
   12a42:	strh	r3, [r2, #12]
   12a44:	b.w	11eb2 <_vfiprintf_r+0x3c2>
   12a48:	ldr	r4, [sp, #28]
   12a4a:	str	r7, [sp, #16]
   12a4c:	b.n	128dc <_vfiprintf_r+0xdec>
   12a4e:	ldr	r3, [sp, #28]
   12a50:	ldrb.w	r1, [r8, #1]
   12a54:	ldr.w	r7, [r3], #4
   12a58:	str	r3, [sp, #28]
   12a5a:	mov	r8, r2
   12a5c:	orr.w	r7, r7, r7, asr #31
   12a60:	b.w	11bd6 <_vfiprintf_r+0xe6>
   12a64:	vmov	r2, s16
   12a68:	ldrh	r3, [r2, #12]
   12a6a:	orr.w	r3, r3, #64	; 0x40
   12a6e:	strh	r3, [r2, #12]
   12a70:	b.w	11e9e <_vfiprintf_r+0x3ae>
   12a74:	.word	0xcccccccd
   12a78:	.word	0x20000e84

00012a7c <__sbprintf>:
   12a7c:	push	{r4, r5, r6, lr}
   12a7e:	mov	r4, r1
   12a80:	ldrh	r1, [r1, #12]
   12a82:	sub.w	sp, sp, #1136	; 0x470
   12a86:	bic.w	r1, r1, #2
   12a8a:	strh.w	r1, [sp, #20]
   12a8e:	ldr	r1, [r4, #100]	; 0x64
   12a90:	str	r1, [sp, #108]	; 0x6c
   12a92:	ldrh	r1, [r4, #14]
   12a94:	strh.w	r1, [sp, #22]
   12a98:	ldr	r1, [r4, #28]
   12a9a:	str	r1, [sp, #36]	; 0x24
   12a9c:	ldr	r1, [r4, #36]	; 0x24
   12a9e:	str	r1, [sp, #44]	; 0x2c
   12aa0:	add	r1, sp, #112	; 0x70
   12aa2:	str	r1, [sp, #8]
   12aa4:	str	r1, [sp, #24]
   12aa6:	mov.w	r1, #1024	; 0x400
   12aaa:	mov	r6, r0
   12aac:	str	r1, [sp, #16]
   12aae:	str	r1, [sp, #28]
   12ab0:	add	r0, sp, #96	; 0x60
   12ab2:	movs	r1, #0
   12ab4:	strd	r3, r2, [sp]
   12ab8:	str	r1, [sp, #32]
   12aba:	bl	df90 <__retarget_lock_init_recursive>
   12abe:	ldrd	r3, r2, [sp]
   12ac2:	add	r1, sp, #8
   12ac4:	mov	r0, r6
   12ac6:	bl	11af0 <_vfiprintf_r>
   12aca:	subs	r5, r0, #0
   12acc:	blt.n	12ade <__sbprintf+0x62>
   12ace:	add	r1, sp, #8
   12ad0:	mov	r0, r6
   12ad2:	bl	1094c <_fflush_r>
   12ad6:	cmp	r0, #0
   12ad8:	it	ne
   12ada:	movne.w	r5, #4294967295
   12ade:	ldrh.w	r3, [sp, #20]
   12ae2:	lsls	r3, r3, #25
   12ae4:	bpl.n	12aee <__sbprintf+0x72>
   12ae6:	ldrh	r3, [r4, #12]
   12ae8:	orr.w	r3, r3, #64	; 0x40
   12aec:	strh	r3, [r4, #12]
   12aee:	ldr	r0, [sp, #96]	; 0x60
   12af0:	bl	df94 <__retarget_lock_close_recursive>
   12af4:	mov	r0, r5
   12af6:	add.w	sp, sp, #1136	; 0x470
   12afa:	pop	{r4, r5, r6, pc}

00012afc <__sfvwrite_r>:
   12afc:	ldr	r3, [r2, #8]
   12afe:	cmp	r3, #0
   12b00:	beq.w	12c0e <__sfvwrite_r+0x112>
   12b04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b08:	ldrsh.w	r3, [r1, #12]
   12b0c:	mov	r4, r1
   12b0e:	lsls	r1, r3, #28
   12b10:	mov	r8, r0
   12b12:	sub	sp, #12
   12b14:	mov	r7, r2
   12b16:	uxth	r0, r3
   12b18:	bpl.n	12b66 <__sfvwrite_r+0x6a>
   12b1a:	ldr	r3, [r4, #16]
   12b1c:	cbz	r3, 12b66 <__sfvwrite_r+0x6a>
   12b1e:	ands.w	r3, r0, #2
   12b22:	ldr	r5, [r7, #0]
   12b24:	beq.n	12b82 <__sfvwrite_r+0x86>
   12b26:	mov.w	sl, #0
   12b2a:	ldr.w	fp, [pc, #704]	; 12dec <__sfvwrite_r+0x2f0>
   12b2e:	mov	r6, sl
   12b30:	mov	r9, r7
   12b32:	cmp	r6, fp
   12b34:	mov	r3, r6
   12b36:	mov	r2, sl
   12b38:	it	cs
   12b3a:	movcs	r3, fp
   12b3c:	mov	r0, r8
   12b3e:	cmp	r6, #0
   12b40:	beq.n	12be8 <__sfvwrite_r+0xec>
   12b42:	ldr	r1, [r4, #28]
   12b44:	ldr	r7, [r4, #36]	; 0x24
   12b46:	blx	r7
   12b48:	cmp	r0, #0
   12b4a:	ble.n	12bfa <__sfvwrite_r+0xfe>
   12b4c:	ldr.w	r3, [r9, #8]
   12b50:	subs	r3, r3, r0
   12b52:	add	sl, r0
   12b54:	subs	r6, r6, r0
   12b56:	str.w	r3, [r9, #8]
   12b5a:	cmp	r3, #0
   12b5c:	bne.n	12b32 <__sfvwrite_r+0x36>
   12b5e:	movs	r0, #0
   12b60:	add	sp, #12
   12b62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b66:	mov	r1, r4
   12b68:	mov	r0, r8
   12b6a:	bl	12df0 <__swsetup_r>
   12b6e:	cmp	r0, #0
   12b70:	bne.w	12de4 <__sfvwrite_r+0x2e8>
   12b74:	ldrsh.w	r3, [r4, #12]
   12b78:	ldr	r5, [r7, #0]
   12b7a:	uxth	r0, r3
   12b7c:	ands.w	r3, r0, #2
   12b80:	bne.n	12b26 <__sfvwrite_r+0x2a>
   12b82:	ands.w	r9, r0, #1
   12b86:	bne.n	12c12 <__sfvwrite_r+0x116>
   12b88:	mov	r6, r9
   12b8a:	str	r7, [sp, #0]
   12b8c:	cbz	r6, 12be0 <__sfvwrite_r+0xe4>
   12b8e:	lsls	r2, r0, #22
   12b90:	ldr.w	fp, [r4, #8]
   12b94:	bpl.w	12ca2 <__sfvwrite_r+0x1a6>
   12b98:	cmp	fp, r6
   12b9a:	mov	r2, fp
   12b9c:	bhi.w	12d08 <__sfvwrite_r+0x20c>
   12ba0:	tst.w	r0, #1152	; 0x480
   12ba4:	bne.w	12d2a <__sfvwrite_r+0x22e>
   12ba8:	ldr	r0, [r4, #0]
   12baa:	str	r2, [sp, #4]
   12bac:	mov	r1, r9
   12bae:	bl	dbd8 <memmove>
   12bb2:	ldr	r3, [r4, #8]
   12bb4:	ldr	r2, [sp, #4]
   12bb6:	sub.w	r1, r3, fp
   12bba:	ldr	r3, [r4, #0]
   12bbc:	str	r1, [r4, #8]
   12bbe:	add	r3, r2
   12bc0:	mov	sl, r6
   12bc2:	str	r3, [r4, #0]
   12bc4:	movs	r6, #0
   12bc6:	ldr	r2, [sp, #0]
   12bc8:	ldr	r3, [r2, #8]
   12bca:	sub.w	r3, r3, sl
   12bce:	add	r9, sl
   12bd0:	str	r3, [r2, #8]
   12bd2:	cmp	r3, #0
   12bd4:	beq.n	12b5e <__sfvwrite_r+0x62>
   12bd6:	ldrsh.w	r0, [r4, #12]
   12bda:	uxth	r0, r0
   12bdc:	cmp	r6, #0
   12bde:	bne.n	12b8e <__sfvwrite_r+0x92>
   12be0:	ldrd	r9, r6, [r5]
   12be4:	adds	r5, #8
   12be6:	b.n	12b8c <__sfvwrite_r+0x90>
   12be8:	ldrd	sl, r6, [r5]
   12bec:	adds	r5, #8
   12bee:	b.n	12b32 <__sfvwrite_r+0x36>
   12bf0:	mov	r1, r4
   12bf2:	mov	r0, r8
   12bf4:	bl	1094c <_fflush_r>
   12bf8:	cbz	r0, 12c5e <__sfvwrite_r+0x162>
   12bfa:	ldrsh.w	r3, [r4, #12]
   12bfe:	orr.w	r3, r3, #64	; 0x40
   12c02:	mov.w	r0, #4294967295
   12c06:	strh	r3, [r4, #12]
   12c08:	add	sp, #12
   12c0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c0e:	movs	r0, #0
   12c10:	bx	lr
   12c12:	mov	r6, r3
   12c14:	mov	sl, r7
   12c16:	mov	r9, r3
   12c18:	mov	r0, r3
   12c1a:	str	r5, [sp, #0]
   12c1c:	mov	r7, r3
   12c1e:	cbz	r6, 12c7a <__sfvwrite_r+0x17e>
   12c20:	cmp	r0, #0
   12c22:	beq.n	12c8a <__sfvwrite_r+0x18e>
   12c24:	mov	r2, r9
   12c26:	ldrd	r1, r3, [r4, #16]
   12c2a:	ldr	r0, [r4, #0]
   12c2c:	ldr	r5, [r4, #8]
   12c2e:	cmp	r2, r6
   12c30:	it	cs
   12c32:	movcs	r2, r6
   12c34:	cmp	r0, r1
   12c36:	bls.n	12c42 <__sfvwrite_r+0x146>
   12c38:	add.w	fp, r5, r3
   12c3c:	cmp	r2, fp
   12c3e:	bgt.w	12d90 <__sfvwrite_r+0x294>
   12c42:	cmp	r3, r2
   12c44:	bgt.n	12d10 <__sfvwrite_r+0x214>
   12c46:	ldr	r1, [r4, #28]
   12c48:	ldr	r5, [r4, #36]	; 0x24
   12c4a:	mov	r2, r7
   12c4c:	mov	r0, r8
   12c4e:	blx	r5
   12c50:	subs.w	fp, r0, #0
   12c54:	ble.n	12bfa <__sfvwrite_r+0xfe>
   12c56:	subs.w	r9, r9, fp
   12c5a:	beq.n	12bf0 <__sfvwrite_r+0xf4>
   12c5c:	movs	r0, #1
   12c5e:	ldr.w	r3, [sl, #8]
   12c62:	sub.w	r3, r3, fp
   12c66:	add	r7, fp
   12c68:	sub.w	r6, r6, fp
   12c6c:	str.w	r3, [sl, #8]
   12c70:	cmp	r3, #0
   12c72:	beq.w	12b5e <__sfvwrite_r+0x62>
   12c76:	cmp	r6, #0
   12c78:	bne.n	12c20 <__sfvwrite_r+0x124>
   12c7a:	ldr	r2, [sp, #0]
   12c7c:	ldr	r6, [r2, #4]
   12c7e:	mov	r3, r2
   12c80:	adds	r2, #8
   12c82:	str	r2, [sp, #0]
   12c84:	cmp	r6, #0
   12c86:	beq.n	12c7a <__sfvwrite_r+0x17e>
   12c88:	ldr	r7, [r3, #0]
   12c8a:	mov	r2, r6
   12c8c:	movs	r1, #10
   12c8e:	mov	r0, r7
   12c90:	bl	dfa0 <memchr>
   12c94:	cmp	r0, #0
   12c96:	beq.w	12dd2 <__sfvwrite_r+0x2d6>
   12c9a:	adds	r0, #1
   12c9c:	sub.w	r9, r0, r7
   12ca0:	b.n	12c24 <__sfvwrite_r+0x128>
   12ca2:	ldr	r0, [r4, #0]
   12ca4:	ldr	r3, [r4, #16]
   12ca6:	cmp	r0, r3
   12ca8:	bhi.n	12cd8 <__sfvwrite_r+0x1dc>
   12caa:	ldr	r2, [r4, #20]
   12cac:	cmp	r2, r6
   12cae:	bhi.n	12cd8 <__sfvwrite_r+0x1dc>
   12cb0:	mvn.w	r3, #2147483648	; 0x80000000
   12cb4:	cmp	r3, r6
   12cb6:	it	cs
   12cb8:	movcs	r3, r6
   12cba:	ldr	r1, [r4, #28]
   12cbc:	sdiv	r3, r3, r2
   12cc0:	ldr	r7, [r4, #36]	; 0x24
   12cc2:	mul.w	r3, r2, r3
   12cc6:	mov	r0, r8
   12cc8:	mov	r2, r9
   12cca:	blx	r7
   12ccc:	subs.w	sl, r0, #0
   12cd0:	ble.n	12bfa <__sfvwrite_r+0xfe>
   12cd2:	sub.w	r6, r6, sl
   12cd6:	b.n	12bc6 <__sfvwrite_r+0xca>
   12cd8:	cmp	fp, r6
   12cda:	mov	sl, fp
   12cdc:	it	cs
   12cde:	movcs	sl, r6
   12ce0:	mov	r2, sl
   12ce2:	mov	r1, r9
   12ce4:	bl	dbd8 <memmove>
   12ce8:	ldr	r3, [r4, #8]
   12cea:	ldr	r2, [r4, #0]
   12cec:	sub.w	r3, r3, sl
   12cf0:	add	r2, sl
   12cf2:	str	r3, [r4, #8]
   12cf4:	str	r2, [r4, #0]
   12cf6:	cmp	r3, #0
   12cf8:	bne.n	12cd2 <__sfvwrite_r+0x1d6>
   12cfa:	mov	r1, r4
   12cfc:	mov	r0, r8
   12cfe:	bl	1094c <_fflush_r>
   12d02:	cmp	r0, #0
   12d04:	beq.n	12cd2 <__sfvwrite_r+0x1d6>
   12d06:	b.n	12bfa <__sfvwrite_r+0xfe>
   12d08:	ldr	r0, [r4, #0]
   12d0a:	mov	fp, r6
   12d0c:	mov	r2, r6
   12d0e:	b.n	12baa <__sfvwrite_r+0xae>
   12d10:	mov	r1, r7
   12d12:	str	r2, [sp, #4]
   12d14:	bl	dbd8 <memmove>
   12d18:	ldr	r2, [sp, #4]
   12d1a:	ldr	r3, [r4, #8]
   12d1c:	subs	r3, r3, r2
   12d1e:	str	r3, [r4, #8]
   12d20:	ldr	r3, [r4, #0]
   12d22:	add	r3, r2
   12d24:	str	r3, [r4, #0]
   12d26:	mov	fp, r2
   12d28:	b.n	12c56 <__sfvwrite_r+0x15a>
   12d2a:	ldr	r3, [r4, #0]
   12d2c:	ldr	r1, [r4, #16]
   12d2e:	sub.w	fp, r3, r1
   12d32:	ldr	r3, [r4, #20]
   12d34:	add.w	sl, r3, r3, lsl #1
   12d38:	add.w	sl, sl, sl, lsr #31
   12d3c:	add.w	r3, fp, #1
   12d40:	mov.w	sl, sl, asr #1
   12d44:	add	r3, r6
   12d46:	cmp	r3, sl
   12d48:	mov	r2, sl
   12d4a:	itt	hi
   12d4c:	movhi	sl, r3
   12d4e:	movhi	r2, sl
   12d50:	lsls	r3, r0, #21
   12d52:	bpl.n	12dae <__sfvwrite_r+0x2b2>
   12d54:	mov	r1, r2
   12d56:	mov	r0, r8
   12d58:	bl	cebc <_malloc_r>
   12d5c:	cmp	r0, #0
   12d5e:	beq.n	12dd8 <__sfvwrite_r+0x2dc>
   12d60:	mov	r2, fp
   12d62:	ldr	r1, [r4, #16]
   12d64:	str	r0, [sp, #4]
   12d66:	bl	9d30 <memcpy>
   12d6a:	ldrh	r2, [r4, #12]
   12d6c:	ldr	r3, [sp, #4]
   12d6e:	bic.w	r2, r2, #1152	; 0x480
   12d72:	orr.w	r2, r2, #128	; 0x80
   12d76:	strh	r2, [r4, #12]
   12d78:	add.w	r0, r3, fp
   12d7c:	str	r3, [r4, #16]
   12d7e:	sub.w	r3, sl, fp
   12d82:	str.w	sl, [r4, #20]
   12d86:	str	r3, [r4, #8]
   12d88:	str	r0, [r4, #0]
   12d8a:	mov	fp, r6
   12d8c:	mov	r2, r6
   12d8e:	b.n	12baa <__sfvwrite_r+0xae>
   12d90:	mov	r1, r7
   12d92:	mov	r2, fp
   12d94:	bl	dbd8 <memmove>
   12d98:	ldr	r3, [r4, #0]
   12d9a:	add	r3, fp
   12d9c:	str	r3, [r4, #0]
   12d9e:	mov	r1, r4
   12da0:	mov	r0, r8
   12da2:	bl	1094c <_fflush_r>
   12da6:	cmp	r0, #0
   12da8:	beq.w	12c56 <__sfvwrite_r+0x15a>
   12dac:	b.n	12bfa <__sfvwrite_r+0xfe>
   12dae:	mov	r0, r8
   12db0:	bl	d434 <_realloc_r>
   12db4:	mov	r3, r0
   12db6:	cmp	r0, #0
   12db8:	bne.n	12d78 <__sfvwrite_r+0x27c>
   12dba:	ldr	r1, [r4, #16]
   12dbc:	mov	r0, r8
   12dbe:	bl	e244 <_free_r>
   12dc2:	ldrsh.w	r3, [r4, #12]
   12dc6:	movs	r2, #12
   12dc8:	bic.w	r3, r3, #128	; 0x80
   12dcc:	str.w	r2, [r8]
   12dd0:	b.n	12bfe <__sfvwrite_r+0x102>
   12dd2:	adds	r2, r6, #1
   12dd4:	mov	r9, r2
   12dd6:	b.n	12c26 <__sfvwrite_r+0x12a>
   12dd8:	movs	r2, #12
   12dda:	ldrsh.w	r3, [r4, #12]
   12dde:	str.w	r2, [r8]
   12de2:	b.n	12bfe <__sfvwrite_r+0x102>
   12de4:	mov.w	r0, #4294967295
   12de8:	b.n	12b60 <__sfvwrite_r+0x64>
   12dea:	nop
   12dec:	.word	0x7ffffc00

00012df0 <__swsetup_r>:
   12df0:	push	{r3, r4, r5, lr}
   12df2:	ldr	r3, [pc, #196]	; (12eb8 <__swsetup_r+0xc8>)
   12df4:	ldr	r3, [r3, #0]
   12df6:	mov	r5, r0
   12df8:	mov	r4, r1
   12dfa:	cbz	r3, 12e02 <__swsetup_r+0x12>
   12dfc:	ldr	r2, [r3, #52]	; 0x34
   12dfe:	cmp	r2, #0
   12e00:	beq.n	12ea0 <__swsetup_r+0xb0>
   12e02:	ldrsh.w	r3, [r4, #12]
   12e06:	lsls	r0, r3, #28
   12e08:	uxth	r2, r3
   12e0a:	bpl.n	12e46 <__swsetup_r+0x56>
   12e0c:	ldr	r1, [r4, #16]
   12e0e:	cbz	r1, 12e5c <__swsetup_r+0x6c>
   12e10:	ands.w	r0, r2, #1
   12e14:	beq.n	12e26 <__swsetup_r+0x36>
   12e16:	movs	r0, #0
   12e18:	str	r0, [r4, #8]
   12e1a:	ldr	r0, [r4, #20]
   12e1c:	negs	r0, r0
   12e1e:	str	r0, [r4, #24]
   12e20:	cbz	r1, 12e32 <__swsetup_r+0x42>
   12e22:	movs	r0, #0
   12e24:	pop	{r3, r4, r5, pc}
   12e26:	lsls	r5, r2, #30
   12e28:	it	pl
   12e2a:	ldrpl	r0, [r4, #20]
   12e2c:	str	r0, [r4, #8]
   12e2e:	cmp	r1, #0
   12e30:	bne.n	12e22 <__swsetup_r+0x32>
   12e32:	lsls	r2, r2, #24
   12e34:	it	pl
   12e36:	movpl	r0, r1
   12e38:	bpl.n	12e24 <__swsetup_r+0x34>
   12e3a:	orr.w	r3, r3, #64	; 0x40
   12e3e:	strh	r3, [r4, #12]
   12e40:	mov.w	r0, #4294967295
   12e44:	pop	{r3, r4, r5, pc}
   12e46:	lsls	r1, r2, #27
   12e48:	bpl.n	12ea8 <__swsetup_r+0xb8>
   12e4a:	lsls	r2, r2, #29
   12e4c:	bmi.n	12e78 <__swsetup_r+0x88>
   12e4e:	ldr	r1, [r4, #16]
   12e50:	orr.w	r3, r3, #8
   12e54:	strh	r3, [r4, #12]
   12e56:	uxth	r2, r3
   12e58:	cmp	r1, #0
   12e5a:	bne.n	12e10 <__swsetup_r+0x20>
   12e5c:	and.w	r0, r2, #640	; 0x280
   12e60:	cmp.w	r0, #512	; 0x200
   12e64:	beq.n	12e10 <__swsetup_r+0x20>
   12e66:	mov	r1, r4
   12e68:	mov	r0, r5
   12e6a:	bl	130fc <__smakebuf_r>
   12e6e:	ldrsh.w	r3, [r4, #12]
   12e72:	ldr	r1, [r4, #16]
   12e74:	uxth	r2, r3
   12e76:	b.n	12e10 <__swsetup_r+0x20>
   12e78:	ldr	r1, [r4, #48]	; 0x30
   12e7a:	cbz	r1, 12e92 <__swsetup_r+0xa2>
   12e7c:	add.w	r2, r4, #64	; 0x40
   12e80:	cmp	r1, r2
   12e82:	beq.n	12e8e <__swsetup_r+0x9e>
   12e84:	mov	r0, r5
   12e86:	bl	e244 <_free_r>
   12e8a:	ldrsh.w	r3, [r4, #12]
   12e8e:	movs	r2, #0
   12e90:	str	r2, [r4, #48]	; 0x30
   12e92:	ldr	r1, [r4, #16]
   12e94:	movs	r2, #0
   12e96:	strd	r1, r2, [r4]
   12e9a:	bic.w	r3, r3, #36	; 0x24
   12e9e:	b.n	12e50 <__swsetup_r+0x60>
   12ea0:	mov	r0, r3
   12ea2:	bl	d944 <__sinit>
   12ea6:	b.n	12e02 <__swsetup_r+0x12>
   12ea8:	movs	r2, #9
   12eaa:	orr.w	r3, r3, #64	; 0x40
   12eae:	str	r2, [r5, #0]
   12eb0:	mov.w	r0, #4294967295
   12eb4:	strh	r3, [r4, #12]
   12eb6:	pop	{r3, r4, r5, pc}
   12eb8:	.word	0x20001a0c

00012ebc <__fputwc>:
   12ebc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12ec0:	sub	sp, #8
   12ec2:	mov	sl, r0
   12ec4:	mov	r8, r1
   12ec6:	mov	r4, r2
   12ec8:	bl	de64 <__locale_mb_cur_max>
   12ecc:	cmp	r0, #1
   12ece:	bne.n	12ed8 <__fputwc+0x1c>
   12ed0:	add.w	r3, r8, #4294967295
   12ed4:	cmp	r3, #254	; 0xfe
   12ed6:	bls.n	12f46 <__fputwc+0x8a>
   12ed8:	add.w	r9, sp, #4
   12edc:	mov	r2, r8
   12ede:	add.w	r3, r4, #92	; 0x5c
   12ee2:	mov	r1, r9
   12ee4:	mov	r0, sl
   12ee6:	bl	118ec <_wcrtomb_r>
   12eea:	adds	r2, r0, #1
   12eec:	mov	r6, r0
   12eee:	beq.n	12f56 <__fputwc+0x9a>
   12ef0:	cbz	r0, 12f3c <__fputwc+0x80>
   12ef2:	ldrb.w	ip, [sp, #4]
   12ef6:	movs	r5, #0
   12ef8:	b.n	12f0e <__fputwc+0x52>
   12efa:	ldr	r3, [r4, #0]
   12efc:	adds	r2, r3, #1
   12efe:	str	r2, [r4, #0]
   12f00:	strb.w	ip, [r3]
   12f04:	adds	r5, #1
   12f06:	cmp	r5, r6
   12f08:	bcs.n	12f3c <__fputwc+0x80>
   12f0a:	ldrb.w	ip, [r9, #1]!
   12f0e:	ldr	r3, [r4, #8]
   12f10:	subs	r3, #1
   12f12:	cmp	r3, #0
   12f14:	str	r3, [r4, #8]
   12f16:	bge.n	12efa <__fputwc+0x3e>
   12f18:	ldr	r7, [r4, #24]
   12f1a:	cmp	r3, r7
   12f1c:	mov	r1, ip
   12f1e:	mov	r2, r4
   12f20:	mov	r0, sl
   12f22:	blt.n	12f2a <__fputwc+0x6e>
   12f24:	cmp.w	ip, #10
   12f28:	bne.n	12efa <__fputwc+0x3e>
   12f2a:	bl	131d4 <__swbuf_r>
   12f2e:	adds	r3, r0, #1
   12f30:	bne.n	12f04 <__fputwc+0x48>
   12f32:	mov	r6, r0
   12f34:	mov	r0, r6
   12f36:	add	sp, #8
   12f38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12f3c:	mov	r6, r8
   12f3e:	mov	r0, r6
   12f40:	add	sp, #8
   12f42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12f46:	uxtb.w	ip, r8
   12f4a:	strb.w	ip, [sp, #4]
   12f4e:	mov	r6, r0
   12f50:	add.w	r9, sp, #4
   12f54:	b.n	12ef6 <__fputwc+0x3a>
   12f56:	ldrh	r3, [r4, #12]
   12f58:	mov	r0, r6
   12f5a:	orr.w	r3, r3, #64	; 0x40
   12f5e:	strh	r3, [r4, #12]
   12f60:	add	sp, #8
   12f62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12f66:	nop

00012f68 <_fputwc_r>:
   12f68:	push	{r4, r5, lr}
   12f6a:	ldr	r3, [r2, #100]	; 0x64
   12f6c:	tst.w	r3, #1
   12f70:	ldrsh.w	r3, [r2, #12]
   12f74:	mov	r4, r2
   12f76:	sub	sp, #12
   12f78:	mov	r5, r0
   12f7a:	uxth	r2, r3
   12f7c:	bne.n	12f82 <_fputwc_r+0x1a>
   12f7e:	lsls	r0, r3, #22
   12f80:	bpl.n	12fbc <_fputwc_r+0x54>
   12f82:	lsls	r0, r2, #18
   12f84:	bmi.n	12f94 <_fputwc_r+0x2c>
   12f86:	ldr	r2, [r4, #100]	; 0x64
   12f88:	orr.w	r3, r3, #8192	; 0x2000
   12f8c:	orr.w	r2, r2, #8192	; 0x2000
   12f90:	strh	r3, [r4, #12]
   12f92:	str	r2, [r4, #100]	; 0x64
   12f94:	mov	r2, r4
   12f96:	mov	r0, r5
   12f98:	bl	12ebc <__fputwc>
   12f9c:	ldr	r3, [r4, #100]	; 0x64
   12f9e:	lsls	r2, r3, #31
   12fa0:	mov	r5, r0
   12fa2:	bmi.n	12faa <_fputwc_r+0x42>
   12fa4:	ldrh	r3, [r4, #12]
   12fa6:	lsls	r3, r3, #22
   12fa8:	bpl.n	12fb0 <_fputwc_r+0x48>
   12faa:	mov	r0, r5
   12fac:	add	sp, #12
   12fae:	pop	{r4, r5, pc}
   12fb0:	ldr	r0, [r4, #88]	; 0x58
   12fb2:	bl	df9c <__retarget_lock_release_recursive>
   12fb6:	mov	r0, r5
   12fb8:	add	sp, #12
   12fba:	pop	{r4, r5, pc}
   12fbc:	ldr	r0, [r4, #88]	; 0x58
   12fbe:	str	r1, [sp, #4]
   12fc0:	bl	df98 <__retarget_lock_acquire_recursive>
   12fc4:	ldrsh.w	r3, [r4, #12]
   12fc8:	ldr	r1, [sp, #4]
   12fca:	uxth	r2, r3
   12fcc:	b.n	12f82 <_fputwc_r+0x1a>
   12fce:	nop

00012fd0 <_wcsnrtombs_l>:
   12fd0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fd4:	sub	sp, #44	; 0x2c
   12fd6:	ldrd	r8, sl, [sp, #84]	; 0x54
   12fda:	ldr	r7, [sp, #80]	; 0x50
   12fdc:	str	r1, [sp, #12]
   12fde:	mov	r9, r0
   12fe0:	str	r2, [sp, #20]
   12fe2:	mov	r6, r3
   12fe4:	cmp.w	r8, #0
   12fe8:	beq.n	130a4 <_wcsnrtombs_l+0xd4>
   12fea:	ldr	r3, [sp, #12]
   12fec:	cmp	r3, #0
   12fee:	beq.n	130ae <_wcsnrtombs_l+0xde>
   12ff0:	ldr	r3, [sp, #20]
   12ff2:	ldr	r5, [r3, #0]
   12ff4:	cmp	r7, #0
   12ff6:	beq.n	130ce <_wcsnrtombs_l+0xfe>
   12ff8:	subs	r4, r6, #1
   12ffa:	cbz	r6, 13050 <_wcsnrtombs_l+0x80>
   12ffc:	ldr	r3, [sp, #12]
   12ffe:	str	r3, [sp, #16]
   13000:	subs	r5, #4
   13002:	movs	r6, #0
   13004:	str	r5, [sp, #4]
   13006:	b.n	13020 <_wcsnrtombs_l+0x50>
   13008:	ldr	r3, [sp, #12]
   1300a:	cbnz	r3, 13058 <_wcsnrtombs_l+0x88>
   1300c:	ldr	r3, [sp, #4]
   1300e:	ldr	r2, [r3, #0]
   13010:	cmp	r2, #0
   13012:	beq.n	1308a <_wcsnrtombs_l+0xba>
   13014:	cmp	ip, r7
   13016:	bcs.n	130d2 <_wcsnrtombs_l+0x102>
   13018:	subs	r4, #1
   1301a:	adds	r3, r4, #1
   1301c:	mov	r6, ip
   1301e:	beq.n	13050 <_wcsnrtombs_l+0x80>
   13020:	ldr.w	r3, [r8]
   13024:	str	r3, [sp, #8]
   13026:	ldr	r3, [sp, #4]
   13028:	ldr.w	r5, [sl, #224]	; 0xe0
   1302c:	ldr.w	r2, [r3, #4]!
   13030:	str	r3, [sp, #4]
   13032:	add	r1, sp, #28
   13034:	mov	r3, r8
   13036:	mov	r0, r9
   13038:	ldr.w	fp, [r8, #4]
   1303c:	blx	r5
   1303e:	adds	r2, r0, #1
   13040:	beq.n	130b8 <_wcsnrtombs_l+0xe8>
   13042:	add.w	ip, r0, r6
   13046:	cmp	ip, r7
   13048:	bls.n	13008 <_wcsnrtombs_l+0x38>
   1304a:	ldr	r3, [sp, #8]
   1304c:	strd	r3, fp, [r8]
   13050:	mov	r0, r6
   13052:	add	sp, #44	; 0x2c
   13054:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13058:	cmp	r0, #0
   1305a:	ble.n	1307a <_wcsnrtombs_l+0xaa>
   1305c:	ldr	r3, [sp, #16]
   1305e:	ldr	r5, [sp, #4]
   13060:	add	r0, r3
   13062:	subs	r2, r3, #1
   13064:	add	r1, sp, #28
   13066:	add.w	lr, r0, #4294967295
   1306a:	ldrb.w	r3, [r1], #1
   1306e:	strb.w	r3, [r2, #1]!
   13072:	cmp	r2, lr
   13074:	bne.n	1306a <_wcsnrtombs_l+0x9a>
   13076:	str	r5, [sp, #4]
   13078:	str	r0, [sp, #16]
   1307a:	ldr	r3, [sp, #20]
   1307c:	ldr	r2, [r3, #0]
   1307e:	adds	r2, #4
   13080:	str	r2, [r3, #0]
   13082:	ldr	r3, [sp, #4]
   13084:	ldr	r2, [r3, #0]
   13086:	cmp	r2, #0
   13088:	bne.n	13014 <_wcsnrtombs_l+0x44>
   1308a:	ldr	r3, [sp, #12]
   1308c:	cbz	r3, 13092 <_wcsnrtombs_l+0xc2>
   1308e:	ldr	r3, [sp, #20]
   13090:	str	r2, [r3, #0]
   13092:	add.w	r6, ip, #4294967295
   13096:	movs	r2, #0
   13098:	mov	r0, r6
   1309a:	str.w	r2, [r8]
   1309e:	add	sp, #44	; 0x2c
   130a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130a4:	ldr	r3, [sp, #12]
   130a6:	add.w	r8, r0, #268	; 0x10c
   130aa:	cmp	r3, #0
   130ac:	bne.n	12ff0 <_wcsnrtombs_l+0x20>
   130ae:	ldr	r3, [sp, #20]
   130b0:	mov.w	r7, #4294967295
   130b4:	ldr	r5, [r3, #0]
   130b6:	b.n	12ff8 <_wcsnrtombs_l+0x28>
   130b8:	mov	r6, r0
   130ba:	movs	r1, #138	; 0x8a
   130bc:	movs	r2, #0
   130be:	mov	r0, r6
   130c0:	str.w	r1, [r9]
   130c4:	str.w	r2, [r8]
   130c8:	add	sp, #44	; 0x2c
   130ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130ce:	mov	r6, r7
   130d0:	b.n	13050 <_wcsnrtombs_l+0x80>
   130d2:	mov	r6, ip
   130d4:	b.n	13050 <_wcsnrtombs_l+0x80>
   130d6:	nop

000130d8 <_wcsnrtombs_r>:
   130d8:	push	{r4, lr}
   130da:	sub	sp, #16
   130dc:	ldr	r4, [pc, #20]	; (130f4 <_wcsnrtombs_r+0x1c>)
   130de:	ldr	r0, [sp, #24]
   130e0:	str	r0, [sp, #0]
   130e2:	ldr	r0, [sp, #28]
   130e4:	str	r0, [sp, #4]
   130e6:	ldr	r0, [pc, #16]	; (130f8 <_wcsnrtombs_r+0x20>)
   130e8:	ldr	r0, [r0, #0]
   130ea:	str	r4, [sp, #8]
   130ec:	bl	12fd0 <_wcsnrtombs_l>
   130f0:	add	sp, #16
   130f2:	pop	{r4, pc}
   130f4:	.word	0x20001484
   130f8:	.word	0x20001a0c

000130fc <__smakebuf_r>:
   130fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13100:	ldrh	r3, [r1, #12]
   13102:	mov	r4, r1
   13104:	lsls	r1, r3, #30
   13106:	sub	sp, #88	; 0x58
   13108:	bpl.n	1311c <__smakebuf_r+0x20>
   1310a:	add.w	r3, r4, #67	; 0x43
   1310e:	movs	r2, #1
   13110:	strd	r3, r2, [r4, #16]
   13114:	str	r3, [r4, #0]
   13116:	add	sp, #88	; 0x58
   13118:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1311c:	ldrsh.w	r1, [r4, #14]
   13120:	cmp	r1, #0
   13122:	mov	r6, r0
   13124:	blt.n	13172 <__smakebuf_r+0x76>
   13126:	mov	r2, sp
   13128:	bl	13284 <_fstat_r>
   1312c:	cmp	r0, #0
   1312e:	blt.n	13170 <__smakebuf_r+0x74>
   13130:	ldr	r5, [sp, #4]
   13132:	and.w	r5, r5, #61440	; 0xf000
   13136:	sub.w	r5, r5, #8192	; 0x2000
   1313a:	clz	r5, r5
   1313e:	mov.w	r8, #1024	; 0x400
   13142:	lsrs	r5, r5, #5
   13144:	mov.w	r7, #2048	; 0x800
   13148:	mov	r1, r8
   1314a:	mov	r0, r6
   1314c:	bl	cebc <_malloc_r>
   13150:	cbz	r0, 1318c <__smakebuf_r+0x90>
   13152:	ldrsh.w	r3, [r4, #12]
   13156:	str.w	r8, [r4, #20]
   1315a:	orr.w	r3, r3, #128	; 0x80
   1315e:	str	r0, [r4, #0]
   13160:	str	r0, [r4, #16]
   13162:	strh	r3, [r4, #12]
   13164:	cbnz	r5, 131b4 <__smakebuf_r+0xb8>
   13166:	orrs	r3, r7
   13168:	strh	r3, [r4, #12]
   1316a:	add	sp, #88	; 0x58
   1316c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13170:	ldrh	r3, [r4, #12]
   13172:	ands.w	r5, r3, #128	; 0x80
   13176:	beq.n	131ac <__smakebuf_r+0xb0>
   13178:	mov.w	r8, #64	; 0x40
   1317c:	movs	r5, #0
   1317e:	mov	r1, r8
   13180:	mov	r0, r6
   13182:	mov	r7, r5
   13184:	bl	cebc <_malloc_r>
   13188:	cmp	r0, #0
   1318a:	bne.n	13152 <__smakebuf_r+0x56>
   1318c:	ldrsh.w	r3, [r4, #12]
   13190:	lsls	r2, r3, #22
   13192:	bmi.n	13116 <__smakebuf_r+0x1a>
   13194:	bic.w	r3, r3, #3
   13198:	add.w	r2, r4, #67	; 0x43
   1319c:	orr.w	r3, r3, #2
   131a0:	movs	r1, #1
   131a2:	strd	r2, r1, [r4, #16]
   131a6:	strh	r3, [r4, #12]
   131a8:	str	r2, [r4, #0]
   131aa:	b.n	13116 <__smakebuf_r+0x1a>
   131ac:	mov.w	r8, #1024	; 0x400
   131b0:	mov	r7, r5
   131b2:	b.n	13148 <__smakebuf_r+0x4c>
   131b4:	ldrsh.w	r1, [r4, #14]
   131b8:	mov	r0, r6
   131ba:	bl	132b0 <_isatty_r>
   131be:	cbnz	r0, 131c6 <__smakebuf_r+0xca>
   131c0:	ldrsh.w	r3, [r4, #12]
   131c4:	b.n	13166 <__smakebuf_r+0x6a>
   131c6:	ldrh	r3, [r4, #12]
   131c8:	bic.w	r3, r3, #3
   131cc:	orr.w	r3, r3, #1
   131d0:	sxth	r3, r3
   131d2:	b.n	13166 <__smakebuf_r+0x6a>

000131d4 <__swbuf_r>:
   131d4:	push	{r3, r4, r5, r6, r7, lr}
   131d6:	mov	r5, r1
   131d8:	mov	r4, r2
   131da:	mov	r6, r0
   131dc:	cbz	r0, 131e4 <__swbuf_r+0x10>
   131de:	ldr	r3, [r0, #52]	; 0x34
   131e0:	cmp	r3, #0
   131e2:	beq.n	1327e <__swbuf_r+0xaa>
   131e4:	ldrsh.w	r2, [r4, #12]
   131e8:	ldr	r3, [r4, #24]
   131ea:	str	r3, [r4, #8]
   131ec:	lsls	r7, r2, #28
   131ee:	uxth	r0, r2
   131f0:	bpl.n	1322a <__swbuf_r+0x56>
   131f2:	ldr	r3, [r4, #16]
   131f4:	cbz	r3, 1322a <__swbuf_r+0x56>
   131f6:	uxtb	r5, r5
   131f8:	lsls	r1, r0, #18
   131fa:	mov	r7, r5
   131fc:	bpl.n	13244 <__swbuf_r+0x70>
   131fe:	ldr	r2, [r4, #0]
   13200:	ldr	r1, [r4, #20]
   13202:	subs	r3, r2, r3
   13204:	cmp	r1, r3
   13206:	ble.n	1325c <__swbuf_r+0x88>
   13208:	adds	r3, #1
   1320a:	ldr	r1, [r4, #8]
   1320c:	subs	r1, #1
   1320e:	str	r1, [r4, #8]
   13210:	adds	r1, r2, #1
   13212:	str	r1, [r4, #0]
   13214:	strb	r5, [r2, #0]
   13216:	ldr	r2, [r4, #20]
   13218:	cmp	r2, r3
   1321a:	beq.n	1326c <__swbuf_r+0x98>
   1321c:	ldrh	r3, [r4, #12]
   1321e:	lsls	r3, r3, #31
   13220:	bpl.n	13226 <__swbuf_r+0x52>
   13222:	cmp	r5, #10
   13224:	beq.n	1326c <__swbuf_r+0x98>
   13226:	mov	r0, r7
   13228:	pop	{r3, r4, r5, r6, r7, pc}
   1322a:	mov	r1, r4
   1322c:	mov	r0, r6
   1322e:	bl	12df0 <__swsetup_r>
   13232:	cbnz	r0, 13278 <__swbuf_r+0xa4>
   13234:	ldrsh.w	r2, [r4, #12]
   13238:	ldr	r3, [r4, #16]
   1323a:	uxth	r0, r2
   1323c:	uxtb	r5, r5
   1323e:	lsls	r1, r0, #18
   13240:	mov	r7, r5
   13242:	bmi.n	131fe <__swbuf_r+0x2a>
   13244:	orr.w	r2, r2, #8192	; 0x2000
   13248:	strh	r2, [r4, #12]
   1324a:	ldr	r2, [r4, #100]	; 0x64
   1324c:	ldr	r1, [r4, #20]
   1324e:	bic.w	r2, r2, #8192	; 0x2000
   13252:	str	r2, [r4, #100]	; 0x64
   13254:	ldr	r2, [r4, #0]
   13256:	subs	r3, r2, r3
   13258:	cmp	r1, r3
   1325a:	bgt.n	13208 <__swbuf_r+0x34>
   1325c:	mov	r1, r4
   1325e:	mov	r0, r6
   13260:	bl	1094c <_fflush_r>
   13264:	cbnz	r0, 13278 <__swbuf_r+0xa4>
   13266:	ldr	r2, [r4, #0]
   13268:	movs	r3, #1
   1326a:	b.n	1320a <__swbuf_r+0x36>
   1326c:	mov	r1, r4
   1326e:	mov	r0, r6
   13270:	bl	1094c <_fflush_r>
   13274:	cmp	r0, #0
   13276:	beq.n	13226 <__swbuf_r+0x52>
   13278:	mov.w	r7, #4294967295
   1327c:	b.n	13226 <__swbuf_r+0x52>
   1327e:	bl	d944 <__sinit>
   13282:	b.n	131e4 <__swbuf_r+0x10>

00013284 <_fstat_r>:
   13284:	push	{r4, r5, r6, lr}
   13286:	mov	r4, r1
   13288:	ldr	r5, [pc, #32]	; (132ac <_fstat_r+0x28>)
   1328a:	mov	r3, r0
   1328c:	movs	r6, #0
   1328e:	mov	r0, r4
   13290:	mov	r1, r2
   13292:	mov	r4, r3
   13294:	str	r6, [r5, #0]
   13296:	bl	b6ec <_fstat>
   1329a:	adds	r3, r0, #1
   1329c:	beq.n	132a0 <_fstat_r+0x1c>
   1329e:	pop	{r4, r5, r6, pc}
   132a0:	ldr	r3, [r5, #0]
   132a2:	cmp	r3, #0
   132a4:	beq.n	1329e <_fstat_r+0x1a>
   132a6:	str	r3, [r4, #0]
   132a8:	pop	{r4, r5, r6, pc}
   132aa:	nop
   132ac:	.word	0x20007690

000132b0 <_isatty_r>:
   132b0:	push	{r3, r4, r5, lr}
   132b2:	ldr	r5, [pc, #28]	; (132d0 <_isatty_r+0x20>)
   132b4:	movs	r2, #0
   132b6:	mov	r4, r0
   132b8:	mov	r0, r1
   132ba:	str	r2, [r5, #0]
   132bc:	bl	b6f8 <_isatty>
   132c0:	adds	r3, r0, #1
   132c2:	beq.n	132c6 <_isatty_r+0x16>
   132c4:	pop	{r3, r4, r5, pc}
   132c6:	ldr	r3, [r5, #0]
   132c8:	cmp	r3, #0
   132ca:	beq.n	132c4 <_isatty_r+0x14>
   132cc:	str	r3, [r4, #0]
   132ce:	pop	{r3, r4, r5, pc}
   132d0:	.word	0x20007690
   132d4:	.word	0x00000000

000132d8 <___init_veneer>:
   132d8:	ldr.w	pc, [pc]	; 132dc <___init_veneer+0x4>
   132dc:	.word	0x60001eb5

000132e0 <___reboot_Teensyduino__veneer>:
   132e0:	ldr.w	pc, [pc]	; 132e4 <___reboot_Teensyduino__veneer+0x4>
   132e4:	.word	0x60001731

000132e8 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   132e8:	ldr.w	pc, [pc]	; 132ec <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   132ec:	.word	0x60001d99

Disassembly of section .fini:

000132f0 <_fini>:
   132f0:	push	{r3, r4, r5, r6, r7, lr}
   132f2:	nop

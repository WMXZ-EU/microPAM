
.vsteensy/build/microPAM_V2_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
6000258c l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000feb0 l    d  .fini	00000000 .fini
0000feb4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
200026c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60014c14 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001400 l     F .text.code	00000016 memory_copy
60001418 l     F .text.code	00000010 memory_clear
60001428 l     F .text.code	00000204 ResetHandler2
00000000 l    df *ABS*	00000000 usb.c
00007424 l     F .text.itcm	00000090 schedule_transfer
000074b4 l     F .text.itcm	00000036 run_callbacks
000074ec l     F .text.itcm	000000a0 endpoint0_transmit.constprop.1
20017680 l     O .bss	00000004 endpointN_notify_mask
20017cb2 l     O .bss	00000001 sof_usage
2001767c l     O .bss	00000004 endpoint0_notify_mask
20017cb9 l     O .bss	00000001 usb_reboot_timer
20005840 l     O .bss	00000008 endpoint0_setupdata
20017770 l     O .bss	00000008 reply_buffer
20017674 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 tempmon.c
200177ac l     O .bss	00000004 s_hotTemp
200177b0 l     O .bss	00000004 s_hot_ROOM
200177b4 l     O .bss	00000004 s_roomC_hotC
200177a8 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 CrashReport.cpp
60001dcc l     F .text.code	00000044 cleardata(arm_fault_info_struct*) [clone .constprop.1]
60001e10 l     F .text.code	00000044 isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]
00000000 l    df *ABS*	00000000 analog.c
20017cae l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 c:/users/zimme/appdata/local/arduino15.0/packages/teensy/tools/teensy-compile/1.56.1/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/appdata/local/arduino15.0/packages/teensy/tools/teensy-compile/1.56.1/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20005848 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
2000584c l       .bss	00000000 object.8610
60002580 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mAcq.cpp
00000af8 l     F .text.itcm	00000108 acq_isr()
00000e84 l     F .text.itcm	00000028 _GLOBAL__sub_I_procCount
20200000 l     O .bss.dma	00000800 i2s_buffer
20016a78 l     O .bss	00000008 dma
00000000 l    df *ABS*	00000000 mFiling.cpp
00001904 l     F .text.itcm	000000b0 _GLOBAL__sub_I_t_acq
200173d8 l     O .bss	00000004 checkEndOfFile(short)::tx_
20016f40 l     O .bss	00000200 wav_hdr
20017140 l     O .bss	00000050 fileName
20001bd8 l     O .data	00000004 newFolder(int)::ho
200173e8 l     O .bss	00000050 timeStamp()::date_time
2000586c l     O .bss	00001000 diskBuffer
20016cf0 l     O .bss	00000050 dirName
2000686c l     O .bss	00000200 fileHeader
00000000 l    df *ABS*	00000000 usb_desc.c
60002688 l     O .text.progmem	0000000a qualifier_descriptor
200021a0 l     O .data	00000012 microsoft_os_string_desc
20002178 l     O .data	00000028 microsoft_os_compatible_id_desc
20002160 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 mQueue.cpp
20006a70 l     O .bss	00000004 queue_busy
20006a74 l     O .bss	00010000 data_buffer
00000000 l    df *ABS*	00000000 menu.cpp
00000198 l     F .text.itcm	00000054 menuGetInt16(short*)
000001ec l     F .text.itcm	00000054 menuGetInt32(long*)
00000240 l     F .text.itcm	00000060 menuGet3Int(int*, int*, int*)
00000000 l    df *ABS*	00000000 mRTC.cpp
2000039c l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 mCompress.cpp
20017190 l     O .bss	00000200 tempData
20016d40 l     O .bss	00000200 outData
20016a80 l     O .bss	00000200 dout
200173e4 l     O .bss	00000004 compress(void*)::nout
00000000 l    df *ABS*	00000000 microPAM_V2.ino
20017c94 l     O .bss	00000002 loop::mxb
20005868 l     O .bss	00000004 guard variable for loop::status
20017c96 l     O .bss	00000002 loop::status
20017c98 l     O .bss	00000002 loop::monitor
200173e0 l     O .bss	00000004 loop::loopCount
200173dc l     O .bss	00000004 loop::t0
00000000 l    df *ABS*	00000000 SPI.cpp
00001dc0 l     F .text.itcm	00000058 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]
00000000 l    df *ABS*	00000000 FsCache.cpp
00001e68 l     F .text.itcm	00000046 FsCache::sync() [clone .part.0]
00000000 l    df *ABS*	00000000 ExFatFormatter.cpp
00000000 l    df *ABS*	00000000 ExFatName.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
000028e0 l     F .text.itcm	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatName.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
000034e0 l     F .text.itcm	00000032 FatFile::openRoot(FatVolume*) [clone .part.38]
000035e4 l     F .text.itcm	0000009c FatFile::sync() [clone .part.42]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00004ce8 l     F .text.itcm	00000024 SharedSpiCard::spiStart() [clone .part.11] [clone .constprop.35]
00004d0c l     F .text.itcm	00000022 SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]
00004d30 l     F .text.itcm	00000012 SharedSpiCard::readSector(unsigned long, unsigned char*) [clone .part.19] [clone .constprop.29]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
000054bc l     F .text.itcm	00000030 sdIrs()
000054ec l     F .text.itcm	00000018 isBusyCommandComplete()
00005504 l     F .text.itcm	00000010 isBusyCommandInhibit()
00005514 l     F .text.itcm	00000014 isBusyDat()
00005528 l     F .text.itcm	0000000c isBusyDMA()
00005534 l     F .text.itcm	00000014 isBusyFifoRead()
00005548 l     F .text.itcm	00000014 isBusyFifoWrite()
0000555c l     F .text.itcm	00000018 isBusyTransferComplete()
00005574 l     F .text.itcm	000000d0 setSdclk(unsigned long)
000056ec l     F .text.itcm	00000028 waitTimeout(bool (*)())
00005714 l     F .text.itcm	0000004c yieldTimeout(bool (*)())
00005770 l     F .text.itcm	00000044 enableGPIO(bool) [clone .part.0]
000057d4 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
0000583c l     F .text.itcm	0000002c isBusyCMD13()
00005888 l     F .text.itcm	0000005c readReg16(unsigned long, void*)
000058e4 l     F .text.itcm	00000024 cardAcmd(unsigned long, unsigned long, unsigned long)
00005908 l     F .text.itcm	00000030 waitDmaStatus()
00005938 l     F .text.itcm	000000ac rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00005c14 l     F .text.itcm	00000058 waitTransferComplete() [clone .part.13]
20017ca7 l     O .bss	00000001 m_version2
20016c80 l     O .bss	00000010 m_cid
20017390 l     O .bss	00000004 m_busyFcn
20017ca8 l     O .bss	00000001 m_highCapacity
20016ca0 l     O .bss	00000004 m_ocr
20016ca4 l     O .bss	00000004 m_rca
20017ca9 l     O .bss	00000001 m_transferActive
20017394 l     O .bss	00000004 m_irqstat
20016ca8 l     O .bss	00000008 m_scr
200021d6 l     O .data	00000001 m_errorCode
20017ca6 l     O .bss	00000001 m_initDone
20016cb0 l     O .bss	00000040 m_sds
20016c90 l     O .bss	00000010 m_csd
20017caa l     O .bss	00000001 m_dmaBusy
20006a6c l     O .bss	00000004 m_sdClkKhz
20016a74 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
000069f8 l     F .text.itcm	0000006c rx_queue_transfer
00006a64 l     F .text.itcm	000000b4 rx_event
00006b18 l     F .text.itcm	00000098 usb_serial_flush_callback
00006bb0 l     F .text.itcm	00000194 usb_serial_write.part.1
2001778c l     O .bss	00000010 rx_index
20017ca4 l     O .bss	00000002 tx_packet_size
20017cb5 l     O .bss	00000001 tx_noautoflush
20017cb4 l     O .bss	00000001 tx_head
200026c0 l     O .bss	00001000 rx_buffer
20003840 l     O .bss	00002000 txbuffer
20017cb1 l     O .bss	00000001 rx_tail
2001779c l     O .bss	00000009 rx_list
20017c9e l     O .bss	00000002 rx_packet_size
200036c0 l     O .bss	00000100 rx_transfer
2001777c l     O .bss	00000010 rx_count
20017778 l     O .bss	00000004 rx_available
20017cb0 l     O .bss	00000001 rx_head
20017cb3 l     O .bss	00000001 transmit_previous_timeout
20017ca2 l     O .bss	00000002 tx_available
200037c0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
000081ec l     F .text.itcm	0000004c digitalWrite.part.0
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 yield.cpp
20017cad l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
00008f48 l     F .text.itcm	00000018 __get_current_locale
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtod.c
00009ebc l     F .text.itcm	00000034 sulp
20000ac8 l     O .data	00000014 fpi.6173
20000adc l     O .data	00000014 fpinan.6209
20000370 l     O .data	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
0000ad80 l     F .text.itcm	00000136 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
2000177c l     O .data	00000010 zeroes.7258
20000748 l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfscanf.c
20000724 l     O .data	00000022 basefix.7328
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
0000d41c l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000e438 l     F .text.itcm	000000a8 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mprec.c
20000af0 l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strtoll.c
0000f59c l     F .text.itcm	000001ac _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoul.c
0000f76c l     F .text.itcm	00000168 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
0000f8f8 l     F .text.itcm	000001ec _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vfscanf.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20001790 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
60015c00 l       .text.csf	00000000 __text_csf_end
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
0000fe88 l     F .text.itcm	00000008 ___ZNK16CrashReportClass7printToER5Print_veneer
0000fe90 l     F .text.itcm	00000008 ___init_veneer
0000fe98 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
0000fea0 l     F .text.itcm	00000008 ___ZN16CrashReportClasscvbEv_veneer
60002508 l     F .text.code	00000008 __main_veneer
60002510 l     F .text.code	00000008 ___ZN5Print7printlnEPKc_veneer
60002518 l     F .text.code	00000008 ____libc_init_array_veneer
60002520 l     F .text.code	00000008 __pwm_init_veneer
60002528 l     F .text.code	00000008 __sm_set_pool_veneer
60002530 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60002538 l     F .text.code	00000008 __set_arm_clock_veneer
60002540 l     F .text.code	00000008 __delay_veneer
60002548 l     F .text.code	00000008 ___ZN5Print7printlnEmi_veneer
60002550 l     F .text.code	00000008 ___ZN5Print7printlnEv_veneer
60002558 l     F .text.code	00000008 ___ZN5Print5writeEPKc_veneer
60002560 l     F .text.code	00000008 ___ZN5Print10printFloatEdh_veneer
60002568 l     F .text.code	00000008 __memset_veneer
60002570 l     F .text.code	00000008 ___ZN5Print5printEl_veneer
60002578 l     F .text.code	00000008 ___ZN5Print11printNumberEmhh_veneer
00000c0c g     F .text.itcm	00000054 set_audioClock(int, long, unsigned long)
000000a8 g     F .text.itcm	00000084 pushData(unsigned long*)
00006f80 g     F .text.itcm	00000014 usb_serial_available
0000f4bc g     F .text.itcm	0000005e __any_on
00009c7c g     F .text.itcm	000000ba strcpy
600017a4 g     F .text.code	00000002 startup_default_late_hook
00005de0 g     F .text.itcm	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
000085d4  w    F .text.itcm	000000f0 yield
00005a9c g     F .text.itcm	0000008c SdioCard::cardCMD6(unsigned long, unsigned char*)
00004c50  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
2001770c g     O .bss	00000060 proc_stat
20017c90 g     O .bss	00000004 usb_timer1_callback
00003d58 g     F .text.itcm	000001f8 FatFile::write(void const*, unsigned int)
600025a4 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
20017c9c g     O .bss	00000002 proc
60001890 g     F .text.code	000003bc configure_external_ram
00004c24  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
00004440 g     F .text.itcm	0000015c FatFile::makeSFN(FatLfn_t*)
20017704 g     O .bss	00000004 procCount
60002692  w    O .text.progmem	00000001 _serialEventUSB2_default
20017398 g     O .bss	00000004 FsDateTime::callback
0000459c g     F .text.itcm	000000b0 FatFile::makeUniqueSfn(FatLfn_t*)
00004ee0 g     F .text.itcm	00000054 SharedSpiCard::writeStart(unsigned long)
00008900 g     F .text.itcm	00000020 Print::println()
200003d8 g     O .data	00000074 vtable for DedicatedSpiCard
20017708 g     O .bss	00000004 procMiss
000022f8 g     F .text.itcm	00000108 ExFatFile::seekSet(unsigned long long)
000097cc g     F .text.itcm	00000002 __malloc_unlock
200173d0 g     O .bss	00000004 FsVolume::m_cwv
000038d0 g     F .text.itcm	000000c8 FatFile::open(FatFile*, char const*, int)
20005864 g     O .bss	00000004 SerNum
00004c18  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
600024a0 g     F .text.code	00000058 analog_init
0000ad60 g     F .text.itcm	00000020 _strtod_r
0000d2cc g     F .text.itcm	0000004a _vdprintf_r
00004e94 g     F .text.itcm	0000004c SharedSpiCard::readOCR(unsigned long*)
00001850 g     F .text.itcm	000000b4 saveData(short)
20017ca0 g     O .bss	00000002 shift
20001bc4 g     O .data	00000004 F_CPU_ACTUAL
0000fcc8 g     F .text.itcm	00000082 _sfread_r
00009664 g     F .text.itcm	000000c6 memmove
200176fc g     O .bss	00000004 max_stat
00008f84 g     F .text.itcm	00000014 __locale_ctype_ptr
0000662c g     F .text.itcm	00000068 SdioCard::stopTransmission(bool)
0000ec38 g     F .text.itcm	0000004c _Balloc
0000febc g       .ARM.exidx	00000000 __exidx_end
000040b0 g     F .text.itcm	0000003a FatPartition::freeChain(unsigned long)
20017cab g     O .bss	00000001 EventResponder::runningFromYield
00006824 g     F .text.itcm	00000016 SdSpiArduinoDriver::receive()
0000818c g     F .text.itcm	00000060 tempmonGetTemp
00008eec g     F .text.itcm	0000000c __errno
60001000 g     O .text.headers	00000020 ImageVectorTable
200173a8 g     O .bss	00000004 EventResponder::firstInterrupt
00007d34 g     F .text.itcm	00000004 usb_transfer_status
0000ebbc g     F .text.itcm	00000004 __localeconv_l
000080f8 g     F .text.itcm	00000090 sm_set_pool
00002cb4 g     F .text.itcm	0000003a ExFatPartition::rootLength()
00008858  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000758 g     O .data	00000370 digital_pin_to_info_PGM
20017d20 g     O .bss	00000004 errno
0000683c g     F .text.itcm	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00002aa4 g     F .text.itcm	00000040 ExFatPartition::fatGet(unsigned long, unsigned long*)
00009c78 g     F .text.itcm	00000004 __seofread
0000feb8 g       .text.itcm	00000000 _etext
000048fc g     F .text.itcm	000000ac FatFile::parsePathName(char const*, FatLfn_t*, char const**)
200026c0 g       .bss	00000000 _sbss
00005650 g     F .text.itcm	0000000c SdioCard::errorData() const
20017c84 g     O .bss	00000004 tempData0
00005ef0 g     F .text.itcm	000000c0 SdioCard::writeSector(unsigned long, unsigned char const*)
60002698 g       *ABS*	00000000 _stextload
000019b4 g     F .text.itcm	00000278 loop
600017a8 g     F .text.code	00000004 startup_debug_reset
00007bec g     F .text.itcm	00000064 usb_config_rx
2001766c g     O .bss	00000004 acqbias
0000207c g     F .text.itcm	0000009c ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00006438 g     F .text.itcm	000000bc SdioCard::readData(unsigned char*)
200173a4 g     O .bss	00000004 EventResponder::lastInterrupt
000049a8 g     F .text.itcm	00000028 FsBaseFile::close()
00001e20 g     F .text.itcm	00000048 SPIClass::end()
000068c4 g     F .text.itcm	00000134 memcpy
0000ea20 g     F .text.itcm	00000180 __hexnan
00004d44 g     F .text.itcm	00000060 SharedSpiCard::writeStop()
00002b50 g     F .text.itcm	0000007a ExFatPartition::freeChain(unsigned long)
00003b50 g     F .text.itcm	00000028 FatFile::peek()
20017700 g     O .bss	00000004 nbuf
0000aee0 g     F .text.itcm	00001570 _svfprintf_r
20017c78 g     O .bss	00000004 systick_millis_count
00001c2c g     F .text.itcm	0000003c setup1()
00008bc8 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
20017cb7 g     O .bss	00000001 usb_configuration
00000ebc  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
000080a8 g     F .text.itcm	00000050 sm_align_pool
00006694 g     F .text.itcm	0000002c SdioCard::syncDevice()
00005ce4 g     F .text.itcm	00000090 SdioCard::writeData(unsigned char const*)
00000f88  w    F .text.itcm	0000005a StreamFile<FsBaseFile, unsigned long long>::available()
00003b78 g     F .text.itcm	00000042 FatFile::readDirCache(bool)
0000f418 g     F .text.itcm	0000005c __ratio
000050c0 g     F .text.itcm	00000094 SharedSpiCard::sectorCount()
600025a4  w    O .text.progmem	00000018 usb_string_manufacturer_name
00008f98 g     F .text.itcm	00000010 malloc
20000474  w    O .data	00000024 vtable for FsFile
0000eba0 g     F .text.itcm	0000001c iswspace
2001746c g     O .bss	00000200 acqBuffer
200002a8 g     O .data	000000c8 __mprec_tens
6000165c g     F .text.code	000000ec usb_init
000049d0 g     F .text.itcm	00000088 FsBaseFile::operator=(FsBaseFile const&)
00004c14  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
20017468 g     O .bss	00000004 __malloc_top_pad
00008058 g     F .text.itcm	00000050 rtc_set
0000fc8c g     F .text.itcm	0000003a __ssrefill_r
20017d0c g     O .bss	00000004 systick_safe_read
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
00003168 g     F .text.itcm	000000e2 ExFatFile::truncate()
20001bb8 g     O .data	00000000 .hidden __dso_handle
0000ebc0 g     F .text.itcm	0000001c _localeconv_r
0000fae4 g     F .text.itcm	00000024 _strtoull_r
000067c4 g     F .text.itcm	00000058 SdSpiArduinoDriver::deactivate()
0000ee4c g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
200021b8 g     O .data	00000004 t_on
60002624 g     O .text.progmem	00000062 usb_config_descriptor_480
00008bf8 g     F .text.itcm	000002e2 .hidden __udivmoddi4
0000681c g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00003514 g     F .text.itcm	00000034 FatFile::addCluster()
00009bb0 g     F .text.itcm	00000024 _sbrk_r
000057b4 g     F .text.itcm	00000020 SdioCard::type() const
6000179c g     F .text.code	00000002 startup_default_early_hook
6000162c g     F .text.code	00000030 ResetHandler
00007008 g     F .text.itcm	00000020 usb_serial_getchar
20017d00 g     O .bss	00000008 usb_cdc_line_coding
00008238 g     F .text.itcm	0000000a digitalWrite
200173ac g     O .bss	00000004 EventResponder::lastYield
00002054 g     F .text.itcm	00000028 ExFatFile::openRoot(ExFatVolume*)
00001f20  w    F .text.itcm	00000022 Print::write(char const*)
20017c88 g     O .bss	00000004 termon
00000f50  w    F .text.itcm	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
00004c4c  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
0000565c g     F .text.itcm	0000001c SdioCard::readCID(cid_t*)
20017d10 g     O .bss	00000010 extmem_smalloc_pool
20017460 g     O .bss	00000004 __malloc_max_sbrked_mem
000052dc g     F .text.itcm	0000005c DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
00008244 g     F .text.itcm	00000080 pinMode
000089f0 g     F .text.itcm	00000174 Print::printFloat(double, unsigned char)
0000c450 g     F .text.itcm	00000e7a __ssvfscanf_r
60002693  w    O .text.progmem	00000001 _serialEventUSB1_default
60015000 g     O .text.csf	00000c00 hab_csf
20280000 g       .text.csf	00000000 _heap_end
0000f28c g     F .text.itcm	000000d0 __b2d
0000feb4 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
00000c00  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
200173a0 g     O .bss	00000004 EventResponder::firstYield
20000720 g     O .data	00000004 _global_impure_ptr
00001024  w    F .text.itcm	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
000097d0 g     F .text.itcm	000003de _realloc_r
00008ef8 g     F .text.itcm	00000050 __libc_init_array
000028d0 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
2000051c g     O .data	00000100 __hexdig
00002f94 g     F .text.itcm	000000b4 ExFatFile::addDirCluster()
20000280 g     O .data	00000028 __mprec_bigtens
0000ed18 g     F .text.itcm	00000098 __s2b
00008840  w    F .text.itcm	00000004 usb_serial_class::clear()
00007ff8  w    F .text.itcm	00000030 _sbrk
60012554 g       *ABS*	00000000 _sdataload
0000f0e0 g     F .text.itcm	00000042 __mcmp
20001bdc g     O .data	00000004 __brkval
20017cb6 g     O .bss	00000001 usb_cdc_line_rtsdtr
600024f8 g     F .text.code	00000000 _init
00006d44 g     F .text.itcm	00000002 usb_serial_reset
000035c4 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
600025c0 g     O .text.progmem	00000062 usb_config_descriptor_12
00009ef0 g     F .text.itcm	00000e70 _strtod_l
0000e9f0 g     F .text.itcm	00000030 __match
20017d60 g       .bss	00000000 _ebss
00005e68 g     F .text.itcm	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00000ffc  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
000007a8 g     F .text.itcm	00000004 rtc_setup(unsigned char, unsigned char)
0000edb0 g     F .text.itcm	00000040 __hi0bits
00002004 g     F .text.itcm	0000003a ExFatFile::dirCache(unsigned char, unsigned char)
6000247c g     F .text.code	00000002 CrashReportClass::clear()
00003048 g     F .text.itcm	0000004c ExFatFile::mkdir(ExFatFile*, ExName_t*)
20200880 g       .bss.dma	00000000 _heap_start
00002cf0 g     F .text.itcm	00000064 ExFatVolume::chdir(char const*)
00000c00  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
20001bbc g     O .data	00000004 CrashReport
000050b8  w    F .text.itcm	00000008 SharedSpiCard::readCID(cid_t*)
00004de8 g     F .text.itcm	000000ac SharedSpiCard::cardCommand(unsigned char, unsigned long)
00000002 g       *ABS*	00000000 _itcm_block_count
20017c80 g     O .bss	00000004 tail
20017cc0 g     O .bss	00000020 endpoint0_transfer_data
000034b4 g     F .text.itcm	0000002a FatFile::getLfnChar(DirLfn_t*, unsigned char)
00001eb0 g     F .text.itcm	00000060 FsCache::prepare(unsigned long, unsigned char)
00008b68 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
000082c4 g     F .text.itcm	000002b8 pwm_init
20017684 g     O .bss	00000050 file
60001c4c g     F .text.code	00000064 usb_pll_start
0000ef90 g     F .text.itcm	000000a0 __pow5mult
200003cc g     O .data	0000000c vtable for CrashReportClass
0000402c g     F .text.itcm	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
200176d4 g     O .bss	00000004 haveStore
000054b8  w    F .text.itcm	00000002 SdioCard::end()
00000000  w      *UND*	00000000 __deregister_frame_info
20017ce0 g     O .bss	00000020 endpoint0_transfer_ack
20017d08 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00007ce8 g     F .text.itcm	00000028 usb_transmit
00008800  w    F .text.itcm	00000026 Print::println(char const*)
0000870c g     F .text.itcm	00000020 systick_isr
000007ac g     F .text.itcm	00000012 rtc_get_datetime(datetime_t*)
20001bc8 g     O .data	00000010 Serial
200176dc g     O .bss	00000020 logBuffer
200176d8 g     O .bss	00000004 head
00008860  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
6000179c  w    F .text.code	00000002 startup_early_hook
00002d54 g     F .text.itcm	0000008e ExFatFile::addCluster()
00004f34 g     F .text.itcm	00000074 SharedSpiCard::readData(unsigned char*, unsigned int)
00006f3c g     F .text.itcm	00000044 usb_serial_peekchar
00009560 g     F .text.itcm	00000000 memchr
00003fc4 g     F .text.itcm	00000068 FatPartition::fatPut(unsigned long, unsigned long)
00007160 g     F .text.itcm	000002c4 set_arm_clock
20017c74 g     O .bss	00000004 systick_cycle_count
200021c0 g     O .data	00000016 usb_string_serial_number_default
0000e268 g     F .text.itcm	000001d0 _free_r
00005154 g     F .text.itcm	000000dc SharedSpiCard::erase(unsigned long, unsigned long)
00005338 g     F .text.itcm	00000052 SharedSpiCard::writeData(unsigned char, unsigned char const*)
00005c6c g     F .text.itcm	00000078 SdioCard::readStop()
00004c1c  w    F .text.itcm	00000004 SharedSpiCard::type() const
00008f60 g     F .text.itcm	0000001c __locale_mb_cur_max
00008850  w    F .text.itcm	00000004 usb_serial_class::flush()
00004fa8 g     F .text.itcm	00000044 SharedSpiCard::readSCR(scr_t*)
0000fc08 g     F .text.itcm	00000082 _sungetc_r
20002154 g     O .data	00000004 __malloc_sbrk_base
00008848  w    F .text.itcm	00000004 usb_serial_class::read()
0000f748 g     F .text.itcm	00000024 _strtoll_r
0000f030 g     F .text.itcm	000000ae __lshift
00003804 g     F .text.itcm	000000ca FatFile::mkdir(FatFile*, char const*, bool)
000014e4 g     F .text.itcm	0000036c storeData(short)
00007cb8 g     F .text.itcm	0000002e usb_prepare_transfer
00004c20  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
00007e68 g     F .text.itcm	00000190 unused_interrupt_vector
0000fb08 g     F .text.itcm	00000100 __ssprint_r
60001cb0 g     F .text.code	0000011c tempmon_init
20017c8c g     O .bss	00000004 usb_timer0_callback
00004324 g     F .text.itcm	0000011c FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
00000ec4  w    F .text.itcm	00000002 SdFs::~SdFs()
0000fdc4 g     F .text.itcm	0000005e _vasnprintf_r
00008b64  w    F .text.itcm	00000002 serialEvent()
0000d378 g     F .text.itcm	000000a4 __register_exitproc
000027d8 g     F .text.itcm	000000f8 ExFatFile::open(ExFatFile*, char const*, int)
00009e1c g     F .text.itcm	000000a0 strncmp
00004260 g     F .text.itcm	000000c2 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
00003094 g     F .text.itcm	000000d2 ExFatFile::mkdir(ExFatFile*, char const*, bool)
00004ad8 g     F .text.itcm	00000110 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)
00006f94 g     F .text.itcm	00000074 usb_serial_flush_input
20002174 g     O .data	00000004 fsamp
0000ee60 g     F .text.itcm	00000130 __multiply
0000007c g     F .text.itcm	00000020 getDataCount()
00007028 g     F .text.itcm	0000002c usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
20017438 g     O .bss	00000028 __malloc_current_mallinfo
00000d24 g     F .text.itcm	00000090 i2s_setup()
0000f35c g     F .text.itcm	000000ba __d2b
0000538c g     F .text.itcm	0000005c SharedSpiCard::writeData(unsigned char const*)
200173b0 g     O .bss	00000020 HardwareSerial::s_serials_with_serial_events
00000eb4  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001748 g     F .text.code	00000054 _reboot_Teensyduino_
00005760  w    F .text.itcm	0000000e SdioCard::~SdioCard()
600017a0 g     F .text.code	00000002 startup_default_middle_hook
00000db4 g     F .text.itcm	000000a8 dma_setup()
00004c80 g     F .text.itcm	00000066 DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005078 g     F .text.itcm	00000038 SharedSpiCard::readRegister(unsigned char, void*)
00005d74 g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
0000f8d4 g     F .text.itcm	00000024 _strtoul_r
0000758c g     F .text.itcm	00000660 usb_isr
00008ee0 g     F .text.itcm	0000000c __cxa_atexit
00002118 g     F .text.itcm	000001b2 ExFatFile::read(void*, unsigned int)
00005284 g     F .text.itcm	0000003e SharedSpiCard::readStop()
00001f10 g     F .text.itcm	0000000e FsCache::sync()
00009600 g     F .text.itcm	00000062 memcmp
2000044c  w    O .data	00000028 vtable for usb_serial_class
0000685c g     F .text.itcm	00000012 SdSpiArduinoDriver::send(unsigned char)
000068c0 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
200177b8 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
00009c20 g     F .text.itcm	00000058 sscanf
00008edc  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00001158 g     F .text.itcm	000000c8 headerInit(long, long, long, int)
00005230 g     F .text.itcm	00000054 SharedSpiCard::readStart(unsigned long)
0000f474 g     F .text.itcm	00000046 __copybits
20001d4c g     O .data	00000408 __malloc_av_
000070bc g     F .text.itcm	000000a4 usb_serial_flush_output
000097c8 g     F .text.itcm	00000002 __malloc_lock
20002400 g     O .data	000002c0 _VectorsRam
00006870 g     F .text.itcm	0000004e SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
0000fe24 g     F .text.itcm	0000005e _calloc_r
000012c8 g     F .text.itcm	000000a4 makeHeader(long*)
0000464c g     F .text.itcm	000002b0 FatFile::open(FatFile*, FatLfn_t*, int)
200021b4 g     O .data	00000004 t_acq
200021d7 g     O .data	00000001 yield_active_check_flags
00002f34 g     F .text.itcm	0000005e ExFatFile::sync()
20017cb8 g     O .bss	00000001 usb_high_speed
00005a48 g     F .text.itcm	00000054 SdioCard::isBusy()
0000972c g     F .text.itcm	0000009a memset
00008868 g     F .text.itcm	00000010 main
00000ec4  w    F .text.itcm	00000002 SdFs::~SdFs()
20017464 g     O .bss	00000004 __malloc_max_total_mem
0000290c g     F .text.itcm	000000b2 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20200800 g     O .bss.dma	00000062 usb_descriptor_buffer
000053e8 g     F .text.itcm	000000b4 SharedSpiCard::writeSector(unsigned long, unsigned char const*)
0000324c g     F .text.itcm	00000268 ExFatFile::write(void const*, unsigned int)
0000857c g     F .text.itcm	00000058 usb_init_serialnumber
0000aeb8 g     F .text.itcm	00000024 _strtol_r
6000258c g       .text.code	00000000 __init_array_end
0000d548 g     F .text.itcm	00000c84 _dtoa_r
00008fb8 g     F .text.itcm	00000570 _malloc_r
00004c28 g     F .text.itcm	00000010 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
20017cac g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000d330 g     F .text.itcm	0000001a __ascii_wctomb
200173d4 g     O .bss	00000004 FatVolume::m_cwv
000002a0 g     F .text.itcm	00000012 menu1()
0000fd4c g     F .text.itcm	00000078 __submore
2000050c  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
000088a8 g     F .text.itcm	00000058 Stream::readBytesUntil(char, char*, unsigned int)
00001e18 g     F .text.itcm	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00007e04 g     F .text.itcm	00000064 micros
00002de4 g     F .text.itcm	00000150 ExFatFile::syncDir()
00004fec g     F .text.itcm	0000004e SharedSpiCard::readSDS(sds_t*)
0000e1cc g     F .text.itcm	0000009c _malloc_trim_r
600025bc g     O .text.progmem	00000004 string0
00007054 g     F .text.itcm	00000018 usb_serial_write
600017a4  w    F .text.code	00000002 startup_late_hook
0000549c g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000884c  w    F .text.itcm	00000004 usb_serial_class::available()
60002694  w    O .text.progmem	00000001 _serialEvent_default
00003d4c g     F .text.itcm	0000000c FatFile::sync()
20000000 g     O .data	00000280 endpoint_queue_head
6000258c  w    O .text.progmem	00000016 usb_string_product_name
00007d38 g     F .text.itcm	000000cc delay
20017c9a g     O .bss	00000002 dma_channel_allocated_mask
0000feb0 g     F .fini	00000000 _fini
00004da4 g     F .text.itcm	00000044 SharedSpiCard::isBusy()
60001020 g     O .text.headers	0000000c BootData
20017c7c g     O .bss	00000004 t_off
00009bd4 g     F .text.itcm	0000004c sprintf
00008934 g     F .text.itcm	0000001e Print::printf(char const*, ...)
000089d4 g     F .text.itcm	00000016 Print::print(long)
00003680 g     F .text.itcm	0000001e FatFile::close()
00008188 g     F .text.itcm	00000004 Panic_Temp_isr
00000c60 g     F .text.itcm	000000c4 setAudioFrequency(int)
0000009c g     F .text.itcm	0000000c queue_isBusy()
200177bc g     O .bss	000004b8 sd
000036a0 g     F .text.itcm	00000162 FatFile::mkdir(FatFile*, FatLfn_t*)
000056e8  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00000fe4  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000d34c g     F .text.itcm	0000002c _write_r
00005b28 g     F .text.itcm	000000ec SdioCard::erase(unsigned long, unsigned long)
00001058 g     F .text.itcm	000000c0 filing_init()
0000f590 g     F .text.itcm	0000000c nanf
2000215c g     O .data	00000004 _impure_ptr
000022cc g     F .text.itcm	0000002c ExFatFile::peek()
200003a8  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
0000ebdc g     F .text.itcm	0000005c _mbrtowc_r
00004be8 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
00005644 g     F .text.itcm	0000000c SdioCard::errorCode() const
00003998 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
00001010  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
60002580 g       .text.code	00000000 __preinit_array_end
60001e54 g     F .text.code	00000628 CrashReportClass::printTo(Print&) const
00000ec8 g     F .text.itcm	00000070 dateTime(unsigned short*, unsigned short*, unsigned char*)
0000145c g     F .text.itcm	00000088 newFileName(char*)
00000f38  w    F .text.itcm	00000018 FsFile::~FsFile()
00002a6c g     F .text.itcm	00000036 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00009528 g     F .text.itcm	0000002a __ascii_mbtowc
0000f238 g     F .text.itcm	00000054 __ulp
000040ec g     F .text.itcm	00000126 FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
00001c68 g     F .text.itcm	00000158 setup
200016f8 g     O .data	00000084 usb_descriptor_list
00005868 g     F .text.itcm	00000020 SdioCard::status()
000039b4 g     F .text.itcm	0000019a FatFile::read(void*, unsigned int)
000039a8 g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
2001739c g     O .bss	00000004 ExFatVolume::m_cwv
20070000 g       .text.csf	00000000 _estack
00004c10 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
000087cc g     F .text.itcm	00000034 DMAChannel::release()
0000706c g     F .text.itcm	00000050 usb_serial_write_buffer_free
00006d48 g     F .text.itcm	00000108 usb_serial_configure
00008920  w    F .text.itcm	00000014 _write
200026c0 g       .data	00000000 _edata
00002b2c g     F .text.itcm	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
20017caf g     O .bss	00000001 external_psram_size
000056e8  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00002bcc g     F .text.itcm	000000e8 ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
00004c4c  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00004c38 g     F .text.itcm	00000012 DedicatedSpiCard::setDedicatedSpi(bool)
00001fa8 g     F .text.itcm	0000005a ExFatFile::hashName(ExName_t*)
00003548 g     F .text.itcm	0000007c FatFile::addDirCluster()
00008854  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00000e5c g     F .text.itcm	00000028 acqModifyFrequency(unsigned long)
00008b6c g     F .text.itcm	0000004e ultoa
00004a58 g     F .text.itcm	00000080 FsBaseFile::open(FsVolume*, char const*, int)
000086c4 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20002158 g     O .data	00000004 __malloc_trim_threshold
00008844  w    F .text.itcm	00000004 usb_serial_class::peek()
00000eb8  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
000007c0 g     F .text.itcm	0000002e rtcSetDate(int, int, int)
0000503c g     F .text.itcm	0000003a SharedSpiCard::cardCMD6(unsigned long, unsigned char*)
000007f0 g     F .text.itcm	0000002e rtcSetTime(int, int, int)
0000f124 g     F .text.itcm	00000114 __mdiff
0000012c g     F .text.itcm	0000006c pullData(unsigned long*)
00005694 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
00002ae4 g     F .text.itcm	00000046 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
0000136c g     F .text.itcm	00000034 checkEndOfFile(short)
00002400 g     F .text.itcm	000003d8 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
00001220 g     F .text.itcm	000000a8 writeHeader(char*)
00000448 g     F .text.itcm	000000a0 menu3()
00008828  w    F .text.itcm	00000018 Print::println(unsigned long, int)
00001118 g     F .text.itcm	00000040 timeStamp()
00005c6c g     F .text.itcm	00000078 SdioCard::writeStop()
0000f51c g     F .text.itcm	00000072 __sccl
00002040 g     F .text.itcm	00000014 ExFatFile::close()
2000061c g     O .data	00000101 _ctype_
60002580 g       .text.code	00000000 __init_array_start
00008edc  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
60002480 g     F .text.code	00000020 CrashReportClass::operator bool()
20001bc0 g     O .data	00000004 F_BUS_ACTUAL
20017670 g     O .bss	00000004 disk_count
00004214 g     F .text.itcm	0000004c FatVolume::chdir(char const*)
000004e8 g     F .text.itcm	000001a4 time2date(unsigned long, datetime_t*)
0000068c g     F .text.itcm	0000011c date2time(datetime_t*)
000056a4 g     F .text.itcm	00000014 SdioCard::readSCR(scr_t*)
00008878 g     F .text.itcm	00000030 Stream::timedRead()
00000000 g       .text.itcm	00000000 _stext
0000872c g     F .text.itcm	000000a0 DMAChannel::begin(bool)
00004c60 g     F .text.itcm	00000020 SharedSpiCard::end()
00009d40 g     F .text.itcm	000000dc strlen
2001776c g     O .bss	00000004 ready
00008f7c g     F .text.itcm	00000006 __locale_ctype_ptr_l
00003bbc g     F .text.itcm	000000ae FatFile::seekSet(unsigned long)
0000e4e0 g     F .text.itcm	00000510 __gethex
6000258c g     O .text.progmem	00000016 usb_string_product_name_default
0000d318 g     F .text.itcm	00000018 vdprintf
000059e4 g     F .text.itcm	00000064 SdioCard::sectorCount()
000056b8 g     F .text.itcm	00000030 SdioCard::readSDS(sds_t*)
600017a0  w    F .text.code	00000002 startup_middle_hook
20000498 g     O .data	00000074 vtable for SdioCard
600017ac g     F .text.code	000000e4 configure_cache
00000eb0  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
000050b0  w    F .text.itcm	00000008 SharedSpiCard::readCSD(csd_t*)
000013a0 g     F .text.itcm	000000bc newDirectory(char*)
000064f4 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
000002b4 g     F .text.itcm	00000194 menu2()
000066c0 g     F .text.itcm	00000104 SdSpiArduinoDriver::activate()
00000820 g     F .text.itcm	000002d8 compress(void*)
60002580 g       .text.code	00000000 __preinit_array_start
00007d10 g     F .text.itcm	00000024 usb_receive
000029c0 g     F .text.itcm	000000aa ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
0000edf0 g     F .text.itcm	0000005a __lo0bits
200021bc g     O .data	00000004 tempDatai
00003c6c g     F .text.itcm	000000de FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00015c00 g       *ABS*	00000000 _flashimagelen
000052c4 g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
00008bbc g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
00000f38  w    F .text.itcm	00000018 FsFile::~FsFile()
00008028 g     F .text.itcm	00000030 rtc_get
70000000 g       .bss.extram	00000000 _extram_start
00008708 g     F .text.itcm	00000004 pendablesrvreq_isr
00000eac  w    F .text.itcm	00000004 Print::availableForWrite()
20001be0 g     O .data	0000016c __global_locale
00005fb0 g     F .text.itcm	00000488 SdioCard::begin(SdioConfig)
00006e50 g     F .text.itcm	000000ec usb_serial_read
00008954 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00007c50 g     F .text.itcm	00000068 usb_config_tx
00003f50 g     F .text.itcm	00000072 FatPartition::fatGet(unsigned long, unsigned long*)
00008fa8 g     F .text.itcm	00000010 free
00001f44 g     F .text.itcm	00000064 ExFatFile::cmpName(DirName_t const*, ExName_t*)
0000ec98 g     F .text.itcm	00000080 __multadd
0000ec84 g     F .text.itcm	00000012 _Bfree
200021c0  w    O .data	00000016 usb_string_serial_number
00006560 g     F .text.itcm	000000cc SdioCard::readSector(unsigned long, unsigned char*)
00005678 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	cmp	r0, r1
60001402:	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	cmp	r0, r2
60001406:	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	ldr.w	r3, [r1], #4
6000140c:	str.w	r3, [r0], #4

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001410:	cmp	r2, r0
60001412:	bhi.n	60001408 <memory_copy+0x8>
60001414:	bx	lr
60001416:	nop

60001418 <memory_clear>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	cmp	r0, r1
6000141a:	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	movs	r3, #0
6000141e:	str.w	r3, [r0], #4
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001422:	cmp	r1, r0
60001424:	bhi.n	6000141e <memory_clear+0x6>
60001426:	bx	lr

60001428 <ResetHandler2>:
	__builtin_unreachable();
}

__attribute__((section(".startup"), noinline, noreturn))
static void ResetHandler2(void)
{
60001428:	push	{r7, lr}
	unsigned int i;
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142a:	bl	6000179c <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000142e:	ldr	r3, [pc, #376]	; (600015a8 <ResetHandler2+0x180>)
60001430:	movs	r0, #8
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
60001432:	ldr	r2, [pc, #376]	; (600015ac <ResetHandler2+0x184>)
60001434:	ldr	r1, [pc, #376]	; (600015b0 <ResetHandler2+0x188>)
__attribute__((section(".startup"), noinline, noreturn))
static void ResetHandler2(void)
{
	unsigned int i;
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	str.w	r0, [r3, #340]	; 0x154
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	ldr	r0, [pc, #376]	; (600015b4 <ResetHandler2+0x18c>)
6000143c:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001440:	ldr	r2, [pc, #372]	; (600015b8 <ResetHandler2+0x190>)
60001442:	ldr	r1, [pc, #376]	; (600015bc <ResetHandler2+0x194>)
60001444:	ldr	r0, [pc, #376]	; (600015c0 <ResetHandler2+0x198>)
60001446:	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144a:	ldr	r1, [pc, #376]	; (600015c4 <ResetHandler2+0x19c>)
6000144c:	ldr	r0, [pc, #376]	; (600015c8 <ResetHandler2+0x1a0>)
6000144e:	bl	60001418 <memory_clear>
60001452:	ldr	r4, [pc, #376]	; (600015cc <ResetHandler2+0x1a4>)

	// enable FPU
	SCB_CPACR = 0x00F00000;
60001454:	ldr	r1, [pc, #376]	; (600015d0 <ResetHandler2+0x1a8>)
60001456:	mov.w	r0, #15728640	; 0xf00000

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145a:	movs	r3, #0
6000145c:	ldr	r2, [pc, #372]	; (600015d4 <ResetHandler2+0x1ac>)
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
6000145e:	str	r0, [r1, #0]

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001460:	str.w	r2, [r4, r3, lsl #2]
60001464:	adds	r3, #1
60001466:	cmp	r3, #176	; 0xb0
60001468:	bne.n	60001460 <ResetHandler2+0x38>
6000146a:	ldr	r3, [pc, #364]	; (600015d8 <ResetHandler2+0x1b0>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000146c:	movs	r1, #128	; 0x80
6000146e:	ldr	r2, [pc, #364]	; (600015dc <ResetHandler2+0x1b4>)
60001470:	strb.w	r1, [r3], #1
60001474:	cmp	r3, r2
60001476:	bne.n	60001470 <ResetHandler2+0x48>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001478:	ldr	r5, [pc, #300]	; (600015a8 <ResetHandler2+0x180>)
6000147a:	mov.w	r8, #2155905152	; 0x80808080
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
6000147e:	ldr	r1, [pc, #352]	; (600015e0 <ResetHandler2+0x1b8>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001480:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001484:	ldr	r3, [pc, #348]	; (600015e4 <ResetHandler2+0x1bc>)
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001486:	movs	r6, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	ldr.w	sl, [pc, #408]	; 60001624 <ResetHandler2+0x1fc>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	ldr.w	r9, [pc, #408]	; 60001628 <ResetHandler2+0x200>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001490:	str	r4, [r3, #0]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001492:	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001496:	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000149a:	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000149e:	str.w	r9, [r5, #240]	; 0xf0
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014a2:	ldr	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014a4:	ldr	r7, [pc, #320]	; (600015e8 <ResetHandler2+0x1c0>)
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014a6:	orr.w	r3, r3, #458752	; 0x70000
600014aa:	str	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ac:	ldr	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ae:	ldr	r1, [pc, #316]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014b0:	bic.w	r3, r3, #127	; 0x7f
600014b4:	orr.w	r3, r3, #64	; 0x40
600014b8:	str	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ba:	ldr	r3, [r7, #36]	; 0x24
600014bc:	bic.w	r3, r3, #127	; 0x7f
600014c0:	orr.w	r3, r3, #64	; 0x40
600014c4:	str	r3, [r7, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c6:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014c8:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014ca:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014cc:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
600014ce:	bl	600017ac <configure_cache>
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014d2:	ldr	r2, [pc, #284]	; (600015f0 <ResetHandler2+0x1c8>)
	_VectorsRam[15] = systick_isr;
600014d4:	ldr	r3, [pc, #284]	; (600015f4 <ResetHandler2+0x1cc>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014d6:	movs	r0, #99	; 0x63
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014d8:	str	r2, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014da:	movs	r1, #3

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
600014dc:	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014de:	ldr	r2, [pc, #280]	; (600015f8 <ResetHandler2+0x1d0>)
	SYST_CVR = 0;
600014e0:	ldr	r3, [pc, #280]	; (600015fc <ResetHandler2+0x1d4>)
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014e2:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014e4:	add.w	r0, r0, #3758096384	; 0xe0000000
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600014e8:	str	r6, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014ea:	str.w	r1, [r2, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ee:	addw	r0, r0, #4001	; 0xfa1
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
600014f2:	ldr	r1, [pc, #268]	; (60001600 <ResetHandler2+0x1d8>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014f4:	ldr	r2, [pc, #268]	; (60001604 <ResetHandler2+0x1dc>)
600014f6:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
600014fa:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
600014fc:	ldr	r2, [pc, #264]	; (60001608 <ResetHandler2+0x1e0>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
600014fe:	orr.w	r3, r3, #16777216	; 0x1000000
60001502:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001504:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001506:	ldr	r1, [pc, #260]	; (6000160c <ResetHandler2+0x1e4>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001508:	orr.w	r3, r3, #1
6000150c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000150e:	ldr	r3, [r0, #0]
60001510:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001512:	bl	60001c4c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001516:	str.w	r8, [r5, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000151a:	ldr	r0, [pc, #244]	; (60001610 <ResetHandler2+0x1e8>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000151c:	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001520:	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001524:	str.w	r9, [r5, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001528:	bl	60002538 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000152c:	ldr	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
6000152e:	ldr	r2, [pc, #228]	; (60001614 <ResetHandler2+0x1ec>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001530:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001534:	ldr	r3, [pc, #224]	; (60001618 <ResetHandler2+0x1f0>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	str	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
60001538:	str	r6, [r2, #0]
	PIT_TCTRL0 = 0;
6000153a:	str.w	r6, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000153e:	str.w	r6, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001542:	str.w	r6, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001546:	str.w	r6, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000154a:	ldr	r2, [r3, #56]	; 0x38
6000154c:	lsls	r2, r2, #31
6000154e:	bmi.n	60001562 <ResetHandler2+0x13a>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001550:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001554:	ldr	r1, [pc, #196]	; (6000161c <ResetHandler2+0x1f4>)
60001556:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001558:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000155a:	ldr	r2, [r3, #56]	; 0x38
6000155c:	orr.w	r2, r2, #1
60001560:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001562:	ldr	r2, [pc, #180]	; (60001618 <ResetHandler2+0x1f0>)
60001564:	ldr	r4, [pc, #184]	; (60001620 <ResetHandler2+0x1f8>)
60001566:	ldr	r3, [r2, #8]
60001568:	orr.w	r3, r3, #65537	; 0x10001
6000156c:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
6000156e:	bl	60001890 <configure_external_ram>
#endif
	analog_init();
60001572:	bl	600024a0 <analog_init>
	pwm_init();
60001576:	bl	60002520 <__pwm_init_veneer>
	tempmon_init();
6000157a:	bl	60001cb0 <tempmon_init>
	startup_middle_hook();
6000157e:	bl	600017a0 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001582:	ldr	r3, [r4, #0]
#endif
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290?p=87273&viewfull=1#post87273

	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001584:	cmp	r3, #19
60001586:	bls.n	60001582 <ResetHandler2+0x15a>
	usb_init();
60001588:	bl	6000165c <usb_init>
6000158c:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000158e:	cmp.w	r3, #300	; 0x12c
60001592:	bcc.n	6000158c <ResetHandler2+0x164>
	//printf("before C++ constructors\n");
	startup_debug_reset();
60001594:	bl	600017a8 <startup_debug_reset>
	startup_late_hook();
60001598:	bl	600017a4 <startup_default_late_hook>
	__libc_init_array();
6000159c:	bl	60002518 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
600015a0:	bl	60002508 <__main_veneer>
	
	while (1) asm("WFI");
600015a4:	wfi
600015a6:	b.n	600015a4 <ResetHandler2+0x17c>
600015a8:	.word	0x400d8000
600015ac:	.word	0x0000feb8
600015b0:	.word	0x60002698
600015b4:	.word	0x00000000
600015b8:	.word	0x200026c0
600015bc:	.word	0x60012554
600015c0:	.word	0x20000000
600015c4:	.word	0x20017d60
600015c8:	.word	0x200026c0
600015cc:	.word	0x20002400
600015d0:	.word	0xe000ed88
600015d4:	.word	0x00007e69
600015d8:	.word	0xe000e400
600015dc:	.word	0xe000e4a0
600015e0:	.word	0xe000ed24
600015e4:	.word	0xe000ed08
600015e8:	.word	0x400fc000
600015ec:	.word	0x400ac000
600015f0:	.word	0x00008709
600015f4:	.word	0x0000870d
600015f8:	.word	0xe000e014
600015fc:	.word	0xe000e018
60001600:	.word	0xe000edfc
60001604:	.word	0x20200000
60001608:	.word	0xe0001000
6000160c:	.word	0x20017c74
60001610:	.word	0x016e3600
60001614:	.word	0x40084000
60001618:	.word	0x400d4000
6000161c:	.word	0x56c00000
60001620:	.word	0x20017c78
60001624:	.word	0x2018101b
60001628:	.word	0x13110d0c

6000162c <ResetHandler>:
static void ResetHandler2(void);

__attribute__((section(".startup"), naked))
void ResetHandler(void)
{
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162c:	ldr	r3, [pc, #28]	; (6000164c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000162e:	mov.w	r1, #11141120	; 0xaa0000
static void ResetHandler2(void);

__attribute__((section(".startup"), naked))
void ResetHandler(void)
{
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001632:	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001634:	ldr	r0, [pc, #28]	; (60001654 <ResetHandler+0x28>)
static void ResetHandler2(void);

__attribute__((section(".startup"), naked))
void ResetHandler(void)
{
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001636:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001638:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000163a:	ldr	r2, [pc, #28]	; (60001658 <ResetHandler+0x2c>)
__attribute__((section(".startup"), naked))
void ResetHandler(void)
{
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000163c:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000163e:	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001640:	dsb	sy
	__asm__ volatile("isb":::"memory");
60001644:	isb	sy
	ResetHandler2();
60001648:	bl	60001428 <ResetHandler2>
6000164c:	.word	0x400ac000
60001650:	.word	0xaaaaaaaf
60001654:	.word	0x00200007
60001658:	.word	0x20070000

6000165c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000165c:	ldr	r3, [pc, #192]	; (60001720 <usb_init+0xc4>)
6000165e:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001662:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001664:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001668:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
6000166c:	bl	60002530 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001670:	ldr	r1, [pc, #176]	; (60001724 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001672:	ldr	r0, [pc, #180]	; (60001728 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001674:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001678:	ldr	r4, [pc, #176]	; (6000172c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000167a:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000167e:	ldr	r3, [pc, #176]	; (60001730 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001680:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001684:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001688:	ldr	r2, [r4, #0]
6000168a:	ands	r3, r2
6000168c:	cbnz	r3, 60001696 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000168e:	ldr.w	r3, [r0, #424]	; 0x1a8
60001692:	lsls	r2, r3, #30
60001694:	beq.n	600016cc <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001696:	ldr	r3, [pc, #144]	; (60001728 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001698:	mov.w	r1, #2147483648	; 0x80000000
6000169c:	ldr	r2, [pc, #140]	; (6000172c <usb_init+0xd0>)
6000169e:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600016a0:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600016a2:	ldr.w	r1, [r3, #320]	; 0x140
600016a6:	orr.w	r1, r1, #2
600016aa:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600016ae:	ldr.w	r3, [r2, #320]	; 0x140
600016b2:	lsls	r3, r3, #30
600016b4:	bmi.n	600016ae <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016b6:	mov.w	r0, #131072	; 0x20000
600016ba:	ldr	r1, [pc, #120]	; (60001734 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016bc:	ldr	r3, [pc, #108]	; (6000172c <usb_init+0xd0>)
600016be:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016c2:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016c4:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016c6:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016c8:	bl	60002540 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016cc:	ldr	r5, [pc, #104]	; (60001738 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600016ce:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016d0:	ldr	r3, [pc, #88]	; (6000172c <usb_init+0xd0>)
600016d2:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016d6:	ldr	r4, [pc, #80]	; (60001728 <usb_init+0xcc>)
600016d8:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016da:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016dc:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600016de:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016e0:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016e2:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016e6:	mov.w	r2, #640	; 0x280
600016ea:	bl	60002568 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016ee:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016f2:	movw	r1, #323	; 0x143
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600016f6:	mov.w	r0, #4194304	; 0x400000
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600016fa:	ldr	r3, [pc, #64]	; (6000173c <usb_init+0xe0>)
600016fc:	ldr	r2, [pc, #64]	; (60001740 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016fe:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001700:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001702:	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001706:	str.w	r1, [r4, #328]	; 0x148
6000170a:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000170e:	ldr	r2, [pc, #52]	; (60001744 <usb_init+0xe8>)
60001710:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001714:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001716:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001718:	str.w	r3, [r4, #320]	; 0x140
6000171c:	pop	{r4, r5, r6, pc}
6000171e:	nop
60001720:	.word	0x400d8000
60001724:	.word	0x400fc000
60001728:	.word	0x402e0000
6000172c:	.word	0x400d9000
60001730:	.word	0x001e1c00
60001734:	.word	0xe000e28c
60001738:	.word	0x20000000
6000173c:	.word	0x20002400
60001740:	.word	0x0000758d
60001744:	.word	0xe000e10c

60001748 <_reboot_Teensyduino_>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


FLASHMEM void _reboot_Teensyduino_(void)
{
60001748:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000174a:	ldr	r3, [pc, #56]	; (60001784 <_reboot_Teensyduino_+0x3c>)
6000174c:	ldr	r3, [r3, #96]	; 0x60
6000174e:	lsls	r3, r3, #30
60001750:	bmi.n	60001754 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001752:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001754:	cpsid	i
		USB1_USBCMD = 0;
60001756:	ldr	r3, [pc, #48]	; (60001788 <_reboot_Teensyduino_+0x40>)
60001758:	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
6000175a:	ldr	r2, [pc, #48]	; (6000178c <_reboot_Teensyduino_+0x44>)
{
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
6000175c:	str.w	r0, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001760:	add.w	r3, r3, #3758096384	; 0xe0000000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
60001764:	ldr	r1, [pc, #40]	; (60001790 <_reboot_Teensyduino_+0x48>)
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001766:	sub.w	r3, r3, #913408	; 0xdf000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
6000176a:	str	r1, [r2, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000176c:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
6000176e:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001772:	ldr	r2, [pc, #32]	; (60001794 <_reboot_Teensyduino_+0x4c>)
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001774:	add.w	r3, r3, #28672	; 0x7000
60001778:	ldr	r1, [pc, #28]	; (60001798 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000177a:	ldr	r2, [r2, #0]
6000177c:	mov	r0, r3
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
6000177e:	str	r1, [r3, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001780:	ldr	r3, [r2, #8]
60001782:	blx	r3
60001784:	.word	0x401f4400
60001788:	.word	0x402e0000
6000178c:	.word	0x400ac000
60001790:	.word	0x00200003
60001794:	.word	0x0020001c
60001798:	.word	0xeb120000

6000179c <startup_default_early_hook>:
6000179c:	bx	lr
6000179e:	nop

600017a0 <startup_default_middle_hook>:
600017a0:	bx	lr
600017a2:	nop

600017a4 <startup_default_late_hook>:
extern int main (void);
FLASHMEM void startup_default_early_hook(void) {}
void startup_early_hook(void)	__attribute__ ((weak, alias("startup_default_early_hook")));
FLASHMEM void startup_default_middle_hook(void) {}
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
600017a4:	bx	lr
600017a6:	nop

600017a8 <startup_debug_reset>:
void startup_late_hook(void)	__attribute__ ((weak, alias("startup_default_late_hook")));
extern void startup_debug_reset(void) __attribute__((noinline));
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600017a8:	nop
600017aa:	bx	lr

600017ac <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600017ac:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017ae:	ldr	r2, [pc, #144]	; (60001840 <configure_cache+0x94>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017b0:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017b2:	ldr	r3, [pc, #144]	; (60001844 <configure_cache+0x98>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017b4:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017b8:	ldr	r4, [pc, #140]	; (60001848 <configure_cache+0x9c>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017ba:	movs	r6, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017bc:	ldr.w	lr, [pc, #200]	; 60001888 <configure_cache+0xdc>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017c0:	movs	r7, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017c2:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600017c4:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017c6:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017ca:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017ce:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017d0:	ldr.w	lr, [pc, #184]	; 6000188c <configure_cache+0xe0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017d4:	ldr	r6, [pc, #116]	; (6000184c <configure_cache+0xa0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017d6:	str.w	lr, [r3]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017da:	ldr	r1, [pc, #116]	; (60001850 <configure_cache+0xa4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017dc:	str	r7, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017de:	str	r6, [r3, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017e0:	orr.w	r1, r1, #21
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017e4:	ldr	r7, [pc, #108]	; (60001854 <configure_cache+0xa8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017e6:	ldr	r6, [pc, #112]	; (60001858 <configure_cache+0xac>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017e8:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017ea:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017ec:	ldr	r7, [pc, #108]	; (6000185c <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017ee:	ldr	r6, [pc, #112]	; (60001860 <configure_cache+0xb4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017f0:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017f2:	str	r6, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017f4:	ldr	r7, [pc, #108]	; (60001864 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017f6:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017f8:	ldr	r6, [pc, #108]	; (60001868 <configure_cache+0xbc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017fa:	ldr	r1, [pc, #112]	; (6000186c <configure_cache+0xc0>)

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017fc:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017fe:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001800:	ldr	r7, [pc, #108]	; (60001870 <configure_cache+0xc4>)
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001802:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001804:	ldr	r6, [pc, #108]	; (60001874 <configure_cache+0xc8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001806:	ldr	r1, [pc, #112]	; (60001878 <configure_cache+0xcc>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001808:	str	r7, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000180a:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000180c:	ldr	r7, [pc, #108]	; (6000187c <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000180e:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001810:	ldr	r6, [pc, #108]	; (60001880 <configure_cache+0xd4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001812:	ldr	r1, [pc, #112]	; (60001884 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001814:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001816:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001818:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000181a:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
6000181c:	dsb	sy
	asm("isb");
60001820:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001824:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001828:	dsb	sy
	asm("isb");
6000182c:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001830:	ldr.w	r3, [r2, #-136]
60001834:	orr.w	r3, r3, #196608	; 0x30000
60001838:	str.w	r3, [r2, #-136]
6000183c:	pop	{r4, r5, r6, r7, pc}
6000183e:	nop
60001840:	.word	0xe000ed9c
60001844:	.word	0xe000eda0
60001848:	.word	0xe000ed94
6000184c:	.word	0x00100009
60001850:	.word	0x20017d60
60001854:	.word	0x00200013
60001858:	.word	0x07020021
6000185c:	.word	0x20000014
60001860:	.word	0x13080025
60001864:	.word	0x10000009
60001868:	.word	0x20200016
6000186c:	.word	0x130b0027
60001870:	.word	0x40000017
60001874:	.word	0x13100033
60001878:	.word	0x60000018
6000187c:	.word	0x070b002f
60001880:	.word	0x70000019
60001884:	.word	0x130b002f
60001888:	.word	0x1000003f
6000188c:	.word	0x03080025

60001890 <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
60001890:	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001892:	ldr	r3, [pc, #564]	; (60001ac8 <configure_external_ram+0x238>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001894:	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001896:	ldr	r6, [pc, #564]	; (60001acc <configure_external_ram+0x23c>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001898:	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000189a:	ldr	r1, [pc, #564]	; (60001ad0 <configure_external_ram+0x240>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000189c:	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018a0:	ldr	r5, [pc, #560]	; (60001ad4 <configure_external_ram+0x244>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600018a2:	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018a6:	ldr	r4, [pc, #560]	; (60001ad8 <configure_external_ram+0x248>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
600018a8:	sub	sp, #12
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018aa:	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018ae:	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600018b2:	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018b4:	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018b8:	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600018bc:	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018c0:	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018c4:	ldr	r1, [pc, #532]	; (60001adc <configure_external_ram+0x24c>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018c6:	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018ca:	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018ce:	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018d2:	ldr	r6, [pc, #524]	; (60001ae0 <configure_external_ram+0x250>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600018d4:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600018d6:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600018d8:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600018da:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600018dc:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600018de:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600018e2:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600018e6:	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018ea:	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018ee:	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600018f2:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600018f6:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600018fa:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600018fe:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001902:	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001906:	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001908:	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000190a:	ldr	r0, [pc, #472]	; (60001ae4 <configure_external_ram+0x254>)
6000190c:	ands	r0, r3
6000190e:	ldr	r3, [pc, #472]	; (60001ae8 <configure_external_ram+0x258>)
60001910:	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001912:	ldr	r0, [pc, #472]	; (60001aec <configure_external_ram+0x25c>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001914:	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001916:	ldr.w	r3, [r6, #132]	; 0x84
6000191a:	orr.w	r3, r3, #12
6000191e:	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001922:	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001924:	ldr	r3, [r0, #0]
60001926:	orrs	r3, r6
60001928:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000192a:	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000192c:	and.w	lr, r3, lr
60001930:	ldr	r3, [pc, #444]	; (60001af0 <configure_external_ram+0x260>)
60001932:	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001936:	ldr.w	lr, [pc, #496]	; 60001b28 <configure_external_ram+0x298>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000193a:	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000193c:	ldr	r3, [pc, #436]	; (60001af4 <configure_external_ram+0x264>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000193e:	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001940:	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001944:	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001946:	ldr	r7, [pc, #432]	; (60001af8 <configure_external_ram+0x268>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001948:	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000194c:	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000194e:	ldr	r3, [r0, #12]
60001950:	bic.w	r3, r3, #120	; 0x78
60001954:	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001956:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001958:	ands	r7, r3
6000195a:	ldr	r3, [pc, #416]	; (60001afc <configure_external_ram+0x26c>)
6000195c:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000195e:	ldr	r7, [pc, #408]	; (60001af8 <configure_external_ram+0x268>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001960:	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001962:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001964:	ands	r7, r3
60001966:	ldr	r3, [pc, #404]	; (60001afc <configure_external_ram+0x26c>)
60001968:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000196a:	ldr	r7, [pc, #404]	; (60001b00 <configure_external_ram+0x270>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000196c:	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000196e:	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001970:	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001972:	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001976:	ldr	r7, [pc, #396]	; (60001b04 <configure_external_ram+0x274>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001978:	bic.w	r3, r3, #63	; 0x3f
6000197c:	orr.w	r3, r3, #1
60001980:	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001984:	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001988:	ldr.w	lr, [pc, #388]	; 60001b10 <configure_external_ram+0x280>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000198c:	bic.w	r3, r3, #63	; 0x3f
60001990:	orr.w	r3, r3, #1
60001994:	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
60001998:	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000199a:	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000199c:	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000199e:	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600019a2:	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019a4:	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019a6:	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019aa:	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019ac:	ldr	r3, [pc, #344]	; (60001b08 <configure_external_ram+0x278>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019ae:	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019b2:	ldr	r2, [pc, #344]	; (60001b0c <configure_external_ram+0x27c>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019b4:	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019b6:	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019ba:	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019bc:	str.w	r1, [r3], #4
600019c0:	cmp	r3, r2
600019c2:	bne.n	600019bc <configure_external_ram+0x12c>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019c4:	ldr	r3, [pc, #292]	; (60001aec <configure_external_ram+0x25c>)
600019c6:	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600019c8:	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019ca:	orr.w	r2, r2, #1
600019ce:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600019d0:	ldr	r3, [r1, #0]
600019d2:	ldr	r2, [pc, #280]	; (60001aec <configure_external_ram+0x25c>)
600019d4:	ands.w	r3, r3, #1
600019d8:	bne.n	600019d0 <configure_external_ram+0x140>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019da:	ldr	r6, [pc, #308]	; (60001b10 <configure_external_ram+0x280>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019dc:	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019de:	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019e2:	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019e6:	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600019ea:	ldr	r7, [pc, #296]	; (60001b14 <configure_external_ram+0x284>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019ec:	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600019ee:	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019f2:	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600019f4:	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019f8:	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600019fc:	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a00:	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a04:	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a06:	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a0a:	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a0c:	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a10:	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a14:	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a18:	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a1c:	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a20:	ldr	r6, [pc, #244]	; (60001b18 <configure_external_ram+0x288>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a22:	ldr	r5, [pc, #248]	; (60001b1c <configure_external_ram+0x28c>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a24:	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a28:	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a2c:	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a30:	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a34:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a38:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a3c:	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a40:	ldr	r3, [r1, #20]
60001a42:	ldr	r2, [pc, #168]	; (60001aec <configure_external_ram+0x25c>)
60001a44:	lsls	r5, r3, #31
60001a46:	bpl.n	60001a40 <configure_external_ram+0x1b0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a48:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a4a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a4c:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a50:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a52:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a54:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a58:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a5c:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a60:	ldr	r3, [r1, #20]
60001a62:	ldr	r2, [pc, #136]	; (60001aec <configure_external_ram+0x25c>)
60001a64:	lsls	r4, r3, #31
60001a66:	bpl.n	60001a60 <configure_external_ram+0x1d0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a68:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a6a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a6c:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a70:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a72:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a74:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a78:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a7c:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a80:	ldr	r3, [r1, #20]
60001a82:	ldr	r2, [pc, #104]	; (60001aec <configure_external_ram+0x25c>)
60001a84:	lsls	r0, r3, #31
60001a86:	bpl.n	60001a80 <configure_external_ram+0x1f0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a88:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a8a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a8c:	ldr	r0, [pc, #144]	; (60001b20 <configure_external_ram+0x290>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a8e:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a90:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a92:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a96:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a9a:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a9e:	ldr	r3, [r1, #20]
60001aa0:	ldr	r2, [pc, #72]	; (60001aec <configure_external_ram+0x25c>)
60001aa2:	lsls	r3, r3, #31
60001aa4:	bpl.n	60001a9e <configure_external_ram+0x20e>
	uint32_t id = FLEXSPI2_RFDR0;
60001aa6:	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001aaa:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001aae:	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001ab0:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ab2:	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001ab4:	cmp	r3, r1
60001ab6:	beq.n	60001b2c <configure_external_ram+0x29c>
			external_psram_size * 0x100000 -
			((uint32_t)&_extram_end - (uint32_t)&_extram_start),
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001ab8:	ldr	r3, [pc, #104]	; (60001b24 <configure_external_ram+0x294>)
60001aba:	movs	r2, #0
60001abc:	str	r2, [r3, #0]
60001abe:	str	r2, [r3, #4]
60001ac0:	str	r2, [r3, #8]
60001ac2:	str	r2, [r3, #12]
	}
}
60001ac4:	add	sp, #12
60001ac6:	pop	{r4, r5, r6, r7, pc}
60001ac8:	.word	0x401f8000
60001acc:	.word	0x000170f9
60001ad0:	.word	0x0001b0f9
60001ad4:	.word	0x000110f9
60001ad8:	.word	0x000100f9
60001adc:	.word	0x401f8400
60001ae0:	.word	0x400fc000
60001ae4:	.word	0x1ffffcff
60001ae8:	.word	0xa0000300
60001aec:	.word	0x402a4000
60001af0:	.word	0xffff0012
60001af4:	.word	0x00f737ff
60001af8:	.word	0x7cf0ff00
60001afc:	.word	0x80000040
60001b00:	.word	0x830f00ff
60001b04:	.word	0x00020063
60001b08:	.word	0x402a4200
60001b0c:	.word	0x402a4300
60001b10:	.word	0x5af05af0
60001b14:	.word	0x3018049f
60001b18:	.word	0x26013206
60001b1c:	.word	0x0a180638
60001b20:	.word	0x00030004
60001b24:	.word	0x20017d10
60001b28:	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b2c:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b2e:	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b32:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b34:	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b36:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b3a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b3e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b42:	ldr	r3, [r1, #20]
60001b44:	ldr	r2, [pc, #236]	; (60001c34 <configure_external_ram+0x3a4>)
60001b46:	lsls	r7, r3, #31
60001b48:	bpl.n	60001b42 <configure_external_ram+0x2b2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b4a:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b4c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b50:	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b52:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b54:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b56:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b5a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b5e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b62:	ldr	r3, [r1, #20]
60001b64:	ldr	r2, [pc, #204]	; (60001c34 <configure_external_ram+0x3a4>)
60001b66:	lsls	r6, r3, #31
60001b68:	bpl.n	60001b62 <configure_external_ram+0x2d2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b6a:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b6c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b70:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b74:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b76:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b78:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b7c:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b80:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b84:	ldr	r3, [r1, #20]
60001b86:	ldr	r2, [pc, #172]	; (60001c34 <configure_external_ram+0x3a4>)
60001b88:	lsls	r5, r3, #31
60001b8a:	bpl.n	60001b84 <configure_external_ram+0x2f4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b8c:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b8e:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b92:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b96:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b98:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b9a:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b9e:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ba2:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ba6:	ldr	r3, [r1, #20]
60001ba8:	ldr	r2, [pc, #136]	; (60001c34 <configure_external_ram+0x3a4>)
60001baa:	lsls	r4, r3, #31
60001bac:	bpl.n	60001ba6 <configure_external_ram+0x316>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bae:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001bb0:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001bb4:	ldr	r0, [pc, #128]	; (60001c38 <configure_external_ram+0x3a8>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bb6:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bb8:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001bba:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001bbe:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bc2:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bc6:	ldr	r3, [r1, #20]
60001bc8:	ldr	r2, [pc, #104]	; (60001c34 <configure_external_ram+0x3a4>)
60001bca:	lsls	r0, r3, #31
60001bcc:	bpl.n	60001bc6 <configure_external_ram+0x336>
	uint32_t id = FLEXSPI2_RFDR0;
60001bce:	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bd2:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bd6:	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bd8:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bda:	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bdc:	cmp	r3, r1
60001bde:	beq.n	60001c02 <configure_external_ram+0x372>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
60001be0:	ldr	r3, [pc, #88]	; (60001c3c <configure_external_ram+0x3ac>)
60001be2:	movs	r2, #8
60001be4:	mov.w	r4, #8388608	; 0x800000
60001be8:	strb	r2, [r3, #0]
		}
		// TODO: zero uninitialized EXTMEM variables
		// TODO: copy from flash to initialize EXTMEM variables
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bea:	ldr	r1, [pc, #84]	; (60001c40 <configure_external_ram+0x3b0>)
60001bec:	movs	r0, #0
60001bee:	ldr	r2, [pc, #84]	; (60001c44 <configure_external_ram+0x3b4>)
60001bf0:	movs	r3, #1
60001bf2:	str	r0, [sp, #0]
60001bf4:	subs	r2, r2, r1
60001bf6:	ldr	r0, [pc, #80]	; (60001c48 <configure_external_ram+0x3b8>)
60001bf8:	add	r2, r4
60001bfa:	bl	60002528 <__sm_set_pool_veneer>
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
	}
}
60001bfe:	add	sp, #12
60001c00:	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001c02:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c06:	mov.w	r1, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c0a:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c0c:	mov	r0, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001c0e:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c12:	str.w	r1, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c16:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c1a:	ldr	r3, [r0, #20]
60001c1c:	ldr	r1, [pc, #20]	; (60001c34 <configure_external_ram+0x3a4>)
60001c1e:	lsls	r3, r3, #31
60001c20:	bpl.n	60001c1a <configure_external_ram+0x38a>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c22:	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001c24:	ldr	r3, [pc, #20]	; (60001c3c <configure_external_ram+0x3ac>)
60001c26:	movs	r2, #16
60001c28:	mov.w	r4, #16777216	; 0x1000000
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c2c:	str	r0, [r1, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001c2e:	strb	r2, [r3, #0]
60001c30:	b.n	60001bea <configure_external_ram+0x35a>
60001c32:	nop
60001c34:	.word	0x402a4000
60001c38:	.word	0x00030004
60001c3c:	.word	0x20017caf
60001c40:	.word	0x70000000
60001c44:	.word	0x70000000
60001c48:	.word	0x20017d10

60001c4c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001c4c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c4e:	ldr	r2, [pc, #92]	; (60001cac <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c50:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c52:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c56:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c5a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c5e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c62:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c66:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c68:	tst.w	r3, #2
60001c6c:	beq.n	60001c7c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c6e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c70:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c72:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c74:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c76:	tst.w	r3, #2
60001c7a:	bne.n	60001c6e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c7c:	tst.w	r3, #8192	; 0x2000
60001c80:	bne.n	60001c86 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c82:	str	r5, [r2, #20]
			continue;
60001c84:	b.n	60001c66 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c86:	tst.w	r3, #4096	; 0x1000
60001c8a:	bne.n	60001c90 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c8c:	str	r6, [r2, #20]
			continue;
60001c8e:	b.n	60001c66 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c90:	cmp	r3, #0
60001c92:	bge.n	60001c66 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c94:	tst.w	r3, #65536	; 0x10000
60001c98:	beq.n	60001c9e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c9a:	str	r1, [r2, #24]
			continue;
60001c9c:	b.n	60001c66 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c9e:	lsls	r3, r3, #25
60001ca0:	bmi.n	60001ca6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ca2:	str	r7, [r2, #20]
			continue;
60001ca4:	b.n	60001c66 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001ca6:	pop	{r4, r5, r6, r7}
60001ca8:	bx	lr
60001caa:	nop
60001cac:	.word	0x400d8000

60001cb0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cb0:	ldr	r2, [pc, #228]	; (60001d98 <tempmon_init+0xe8>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cb2:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cb4:	ldr	r1, [pc, #228]	; (60001d9c <tempmon_init+0xec>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cb6:	vmov.f32	s11, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cba:	ldr	r3, [r2, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001cbc:	vldr	s12, [pc, #224]	; 60001da0 <tempmon_init+0xf0>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cc0:	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001cc4:	vldr	s13, [pc, #220]	; 60001da4 <tempmon_init+0xf4>
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001cc8:	push	{r4, r5, r6, r7}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cca:	str	r3, [r2, #0]
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001ccc:	movs	r4, #0
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cce:	str	r0, [r2, #16]
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cd0:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cd4:	ldr	r7, [pc, #208]	; (60001da8 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cd6:	uxtb	r0, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cd8:	ubfx	r1, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cdc:	lsrs	r3, r3, #20
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cde:	ldr	r6, [pc, #204]	; (60001dac <tempmon_init+0xfc>)
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ce0:	vmov	s14, r0
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001ce4:	vmov	s10, r1
60001ce8:	vmov	s15, r3
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cec:	ldr	r3, [pc, #192]	; (60001db0 <tempmon_init+0x100>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cee:	vcvt.f32.s32	s10, s10
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cf2:	ldr	r5, [pc, #192]	; (60001db4 <tempmon_init+0x104>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cf4:	vcvt.f32.s32	s14, s14
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cf8:	str	r0, [r6, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cfa:	vcvt.f32.s32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cfe:	str	r1, [r5, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d00:	ldr	r1, [pc, #180]	; (60001db8 <tempmon_init+0x108>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d02:	vsub.f32	s12, s14, s12
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d06:	ldr	r6, [pc, #180]	; (60001dbc <tempmon_init+0x10c>)
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d08:	vsub.f32	s15, s15, s10
60001d0c:	ldr	r0, [pc, #176]	; (60001dc0 <tempmon_init+0x110>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d0e:	vsub.f32	s13, s14, s13
60001d12:	ldr	r5, [pc, #176]	; (60001dc4 <tempmon_init+0x114>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d14:	vsub.f32	s14, s14, s11
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d18:	vmul.f32	s12, s12, s15
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d1c:	vstr	s15, [r7]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d20:	vmul.f32	s13, s13, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d24:	ldr	r7, [r2, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d26:	vmul.f32	s15, s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d2a:	vstr	s14, [r3]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d2e:	vdiv.f32	s11, s12, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d32:	vdiv.f32	s12, s13, s14
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d36:	vdiv.f32	s13, s15, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d3a:	vadd.f32	s14, s11, s10
60001d3e:	vcvt.u32.f32	s15, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d42:	vadd.f32	s14, s12, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d46:	vmov	r3, s15
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d4a:	vcvt.u32.f32	s14, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d4e:	orr.w	r3, r7, r3, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d52:	vadd.f32	s15, s13, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d56:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d58:	vmov	r3, s14
60001d5c:	ldr.w	r7, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d60:	vcvt.u32.f32	s15, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d64:	and.w	r1, r1, r3, lsl #16
60001d68:	orrs	r1, r7
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d6a:	vmov	r3, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d6e:	str.w	r1, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d72:	ubfx	r3, r3, #0, #12
60001d76:	ldr.w	r1, [r2, #272]	; 0x110
60001d7a:	orrs	r3, r1
60001d7c:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d80:	ldr	r3, [r2, #0]
60001d82:	orr.w	r3, r3, #2
60001d86:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d88:	strb	r4, [r6, #0]
60001d8a:	str.w	r5, [r0, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d8e:	ldr	r3, [pc, #56]	; (60001dc8 <tempmon_init+0x118>)
60001d90:	movs	r2, #1
}
60001d92:	pop	{r4, r5, r6, r7}
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d94:	str	r2, [r3, #0]
}
60001d96:	bx	lr
60001d98:	.word	0x400d8180
60001d9c:	.word	0x401f4400
60001da0:	.word	0x42aa0000
60001da4:	.word	0x42b40000
60001da8:	.word	0x200177b4
60001dac:	.word	0x200177ac
60001db0:	.word	0x200177b0
60001db4:	.word	0x200177a8
60001db8:	.word	0x0fff0000
60001dbc:	.word	0xe000e440
60001dc0:	.word	0x20002400
60001dc4:	.word	0x00008189
60001dc8:	.word	0xe000e108

60001dcc <cleardata(arm_fault_info_struct*) [clone .constprop.1]>:
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001dcc:	ldr	r2, [pc, #48]	; (60001e00 <cleardata(arm_fault_info_struct*) [clone .constprop.1]+0x34>)
60001dce:	movs	r3, #0
60001dd0:	str	r3, [r2, #0]
	info->ipsr  = 0;
60001dd2:	str	r3, [r2, #4]
	info->cfsr  = 0;
60001dd4:	str	r3, [r2, #8]
	info->hfsr  = 0;
60001dd6:	str	r3, [r2, #12]
	info->mmfar = 0;
60001dd8:	str	r3, [r2, #16]
	info->bfar  = 0;
60001dda:	str	r3, [r2, #20]
	info->ret = 0;
60001ddc:	str	r3, [r2, #24]
	info->xpsr  = 0;
60001dde:	str	r3, [r2, #28]
	info->crc = 0;
60001de0:	str	r3, [r2, #40]	; 0x28
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001de2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001de6:	ldr	r1, [pc, #28]	; (60001e04 <cleardata(arm_fault_info_struct*) [clone .constprop.1]+0x38>)
60001de8:	ldr	r0, [pc, #28]	; (60001e08 <cleardata(arm_fault_info_struct*) [clone .constprop.1]+0x3c>)
60001dea:	str	r2, [r1, #0]
60001dec:	str	r0, [r1, #0]
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001dee:	dsb	sy
	asm("isb");
60001df2:	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001df6:	ldr	r2, [pc, #20]	; (60001e0c <cleardata(arm_fault_info_struct*) [clone .constprop.1]+0x40>)
60001df8:	ldr	r1, [r2, #8]
60001dfa:	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001dfc:	str	r3, [r2, #48]	; 0x30
60001dfe:	bx	lr
60001e00:	.word	0x2027ff80
60001e04:	.word	0xe000ef70
60001e08:	.word	0x2027ffa0
60001e0c:	.word	0x400f8000

60001e10 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]>:
	if (isvalid(info)) return true;
	return false;
}

FLASHMEM
static int isvalid(const struct arm_fault_info_struct *info)
60001e10:	push	{r4, r5}
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001e12:	mov.w	r2, #4294967295
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
	data = (uint32_t *)info;
60001e16:	ldr	r4, [pc, #48]	; (60001e48 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0x38>)
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e18:	ldr	r0, [pc, #48]	; (60001e4c <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0x3c>)

	if (info->len != sizeof(*info) / 4) return 0;
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
	while (data < end) {
60001e1a:	ldr	r5, [pc, #52]	; (60001e50 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0x40>)
		crc ^= *data++;
60001e1c:	ldr.w	r3, [r4], #4
60001e20:	movs	r1, #32
60001e22:	eors	r2, r3
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e24:	and.w	r3, r2, #1
60001e28:	subs	r1, #1
60001e2a:	mul.w	r3, r0, r3
60001e2e:	eor.w	r2, r3, r2, lsr #1
60001e32:	bne.n	60001e24 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0x14>

	if (info->len != sizeof(*info) / 4) return 0;
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
	while (data < end) {
60001e34:	cmp	r4, r5
60001e36:	bne.n	60001e1c <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0xc>
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
	}
	if (crc != info->crc) return 0;
60001e38:	ldr	r3, [pc, #12]	; (60001e48 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0x38>)
60001e3a:	ldr	r0, [r3, #40]	; 0x28
	return 1;
}
60001e3c:	subs	r0, r0, r2
60001e3e:	clz	r0, r0
60001e42:	pop	{r4, r5}
60001e44:	lsrs	r0, r0, #5
60001e46:	bx	lr
60001e48:	.word	0x2027ff80
60001e4c:	.word	0xedb88320
60001e50:	.word	0x2027ffa8

60001e54 <CrashReportClass::printTo(Print&) const>:
static int isvalid(const struct arm_fault_info_struct *info);
static void cleardata(struct arm_fault_info_struct *info);

FLASHMEM
size_t CrashReportClass::printTo(Print& p) const
{
60001e54:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001e58:	ldr	r6, [pc, #536]	; (60002074 <CrashReportClass::printTo(Print&) const+0x220>)
static int isvalid(const struct arm_fault_info_struct *info);
static void cleardata(struct arm_fault_info_struct *info);

FLASHMEM
size_t CrashReportClass::printTo(Print& p) const
{
60001e5a:	mov	r4, r1
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001e5c:	ldr	r3, [r6, #0]
60001e5e:	cmp	r3, #11
60001e60:	beq.w	600020e4 <CrashReportClass::printTo(Print&) const+0x290>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001e64:	ldr	r3, [r4, #0]
60001e66:	movs	r2, #23
60001e68:	ldr	r1, [pc, #524]	; (60002078 <CrashReportClass::printTo(Print&) const+0x224>)
60001e6a:	mov	r0, r4
60001e6c:	ldr	r3, [r3, #4]
60001e6e:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001e70:	mov	r0, r4
60001e72:	bl	60002550 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001e76:	ldr	r3, [r4, #0]
60001e78:	movs	r2, #72	; 0x48
60001e7a:	ldr	r1, [pc, #512]	; (6000207c <CrashReportClass::printTo(Print&) const+0x228>)
60001e7c:	ldr	r3, [r3, #4]
60001e7e:	mov	r0, r4
60001e80:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001e82:	mov	r0, r4
60001e84:	bl	60002550 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001e88:	ldr	r3, [r4, #0]
60001e8a:	movs	r2, #73	; 0x49
60001e8c:	ldr	r1, [pc, #496]	; (60002080 <CrashReportClass::printTo(Print&) const+0x22c>)
60001e8e:	ldr	r3, [r3, #4]
60001e90:	mov	r0, r4
60001e92:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001e94:	mov	r0, r4
60001e96:	bl	60002550 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001e9a:	ldr	r3, [r4, #0]
60001e9c:	movs	r2, #36	; 0x24
60001e9e:	ldr	r1, [pc, #484]	; (60002084 <CrashReportClass::printTo(Print&) const+0x230>)
60001ea0:	ldr	r3, [r3, #4]
60001ea2:	mov	r0, r4
60001ea4:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001ea6:	mov	r0, r4
60001ea8:	bl	60002550 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001eac:	ldr	r3, [r4, #0]
60001eae:	movs	r2, #71	; 0x47
60001eb0:	ldr	r1, [pc, #468]	; (60002088 <CrashReportClass::printTo(Print&) const+0x234>)
60001eb2:	ldr	r3, [r3, #4]
60001eb4:	mov	r0, r4
60001eb6:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001eb8:	mov	r0, r4
60001eba:	bl	60002550 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001ebe:	ldr	r3, [r4, #0]
60001ec0:	movs	r2, #63	; 0x3f
60001ec2:	ldr	r1, [pc, #456]	; (6000208c <CrashReportClass::printTo(Print&) const+0x238>)
60001ec4:	ldr	r3, [r3, #4]
60001ec6:	mov	r0, r4
60001ec8:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001eca:	mov	r0, r4
60001ecc:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    p.println("\tstuck in an infinite loop (technically, hardware still running properly)");
    p.println("\tremaining in a low power sleep mode");
    p.println("\taccess to certain peripherals without their clock enabled (eg, FlexIO)");
    p.println("\tchange of CPU or bus clock speed without use of glitchless mux");
  }
  uint32_t SRSR = SRC_SRSR;
60001ed0:	ldr	r3, [pc, #444]	; (60002090 <CrashReportClass::printTo(Print&) const+0x23c>)
60001ed2:	ldr	r5, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
60001ed4:	lsls	r2, r5, #30
60001ed6:	bpl.n	60001ef4 <CrashReportClass::printTo(Print&) const+0xa0>
    // use SRC_GPR5 to distinguish cases.  See pages 1290 & 1294 in ref manual
    uint32_t gpr5 = SRC_GPR5;
60001ed8:	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
60001eda:	ldr	r3, [pc, #440]	; (60002094 <CrashReportClass::printTo(Print&) const+0x240>)
60001edc:	cmp	r2, r3
60001ede:	beq.w	60002208 <CrashReportClass::printTo(Print&) const+0x3b4>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001ee2:	ldr	r3, [r4, #0]
60001ee4:	movs	r2, #64	; 0x40
60001ee6:	ldr	r1, [pc, #432]	; (60002098 <CrashReportClass::printTo(Print&) const+0x244>)
60001ee8:	mov	r0, r4
60001eea:	ldr	r3, [r3, #4]
60001eec:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001eee:	mov	r0, r4
60001ef0:	bl	60002550 <___ZN5Print7printlnEv_veneer>
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
    } else {
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
    }
  }
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
60001ef4:	lsls	r3, r5, #29
60001ef6:	bpl.n	60001f0a <CrashReportClass::printTo(Print&) const+0xb6>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001ef8:	ldr	r3, [r4, #0]
60001efa:	movs	r2, #39	; 0x27
60001efc:	ldr	r1, [pc, #412]	; (6000209c <CrashReportClass::printTo(Print&) const+0x248>)
60001efe:	mov	r0, r4
60001f00:	ldr	r3, [r3, #4]
60001f02:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f04:	mov	r0, r4
60001f06:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    p.println("  Reboot was caused by security monitor");
  }
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60001f0a:	lsls	r7, r5, #28
60001f0c:	bpl.n	60001f20 <CrashReportClass::printTo(Print&) const+0xcc>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f0e:	ldr	r3, [r4, #0]
60001f10:	movs	r2, #42	; 0x2a
60001f12:	ldr	r1, [pc, #396]	; (600020a0 <CrashReportClass::printTo(Print&) const+0x24c>)
60001f14:	mov	r0, r4
60001f16:	ldr	r3, [r3, #4]
60001f18:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f1a:	mov	r0, r4
60001f1c:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    // because the bootloader chip monitors 3.3V power
    // and manages DCDC_PSWITCH and RESET, causing the
    // power on event to appear as a normal reset.
    p.println("  Reboot was caused by power on/off button");
  }
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60001f20:	lsls	r6, r5, #27
60001f22:	bpl.n	60001f36 <CrashReportClass::printTo(Print&) const+0xe2>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f24:	ldr	r3, [r4, #0]
60001f26:	movs	r2, #38	; 0x26
60001f28:	ldr	r1, [pc, #376]	; (600020a4 <CrashReportClass::printTo(Print&) const+0x250>)
60001f2a:	mov	r0, r4
60001f2c:	ldr	r3, [r3, #4]
60001f2e:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f30:	mov	r0, r4
60001f32:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    p.println("  Reboot was caused by watchdog 1 or 2");
  }
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001f36:	lsls	r0, r5, #26
60001f38:	bpl.n	60001f4c <CrashReportClass::printTo(Print&) const+0xf8>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f3a:	ldr	r3, [r4, #0]
60001f3c:	movs	r2, #41	; 0x29
60001f3e:	ldr	r1, [pc, #360]	; (600020a8 <CrashReportClass::printTo(Print&) const+0x254>)
60001f40:	mov	r0, r4
60001f42:	ldr	r3, [r3, #4]
60001f44:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f46:	mov	r0, r4
60001f48:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    p.println("  Reboot was caused by JTAG boundary scan");
  }
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001f4c:	lsls	r1, r5, #25
60001f4e:	bpl.n	60001f62 <CrashReportClass::printTo(Print&) const+0x10e>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f50:	ldr	r3, [r4, #0]
60001f52:	movs	r2, #33	; 0x21
60001f54:	ldr	r1, [pc, #340]	; (600020ac <CrashReportClass::printTo(Print&) const+0x258>)
60001f56:	mov	r0, r4
60001f58:	ldr	r3, [r3, #4]
60001f5a:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f5c:	mov	r0, r4
60001f5e:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    p.println("  Reboot was caused by JTAG debug");
  }
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60001f62:	lsls	r2, r5, #24
60001f64:	bpl.n	60001f78 <CrashReportClass::printTo(Print&) const+0x124>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f66:	ldr	r3, [r4, #0]
60001f68:	movs	r2, #33	; 0x21
60001f6a:	ldr	r1, [pc, #324]	; (600020b0 <CrashReportClass::printTo(Print&) const+0x25c>)
60001f6c:	mov	r0, r4
60001f6e:	ldr	r3, [r3, #4]
60001f70:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f72:	mov	r0, r4
60001f74:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    p.println("  Reboot was caused by watchdog 3");
  }
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001f78:	lsls	r3, r5, #23
60001f7a:	bmi.n	6000201a <CrashReportClass::printTo(Print&) const+0x1c6>
	  IOMUXC_GPR_GPR16 = 0x00000007;
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
	  asm volatile ("dsb":::"memory");
	  while (1) asm ("wfi");
  }
  if (bc->bitmask) {
60001f7c:	ldr	r2, [pc, #308]	; (600020b4 <CrashReportClass::printTo(Print&) const+0x260>)
60001f7e:	ldr	r3, [r2, #0]
60001f80:	cmp	r3, #0
60001f82:	beq.n	60002010 <CrashReportClass::printTo(Print&) const+0x1bc>
60001f84:	mov	r7, r2
60001f86:	ldr	r6, [pc, #304]	; (600020b8 <CrashReportClass::printTo(Print&) const+0x264>)
60001f88:	movs	r5, #1
60001f8a:	b.n	60001f8e <CrashReportClass::printTo(Print&) const+0x13a>
60001f8c:	ldr	r3, [r7, #0]
    for (int i=0; i < 6; i++) {
      if (bc->bitmask & (1 << i)) {
60001f8e:	subs	r2, r5, #1
60001f90:	mov.w	r8, #1
60001f94:	lsl.w	r2, r8, r2
60001f98:	tst	r2, r3
60001f9a:	beq.n	60001ff2 <CrashReportClass::printTo(Print&) const+0x19e>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f9c:	ldr	r3, [r4, #0]
60001f9e:	movs	r2, #14
60001fa0:	ldr	r1, [pc, #280]	; (600020bc <CrashReportClass::printTo(Print&) const+0x268>)
60001fa2:	mov	r0, r4
60001fa4:	ldr	r3, [r3, #4]
60001fa6:	blx	r3
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	// Print a signed number
	size_t print(int n)				{ return print((long)n); }
60001fa8:	mov	r1, r5
60001faa:	mov	r0, r4
60001fac:	bl	60002570 <___ZN5Print5printEl_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001fb0:	ldr	r3, [r4, #0]
60001fb2:	movs	r2, #5
60001fb4:	ldr	r1, [pc, #264]	; (600020c0 <CrashReportClass::printTo(Print&) const+0x26c>)
60001fb6:	ldr	r3, [r3, #4]
60001fb8:	mov	r0, r4
60001fba:	blx	r3
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001fbc:	movs	r3, #0
60001fbe:	movs	r2, #10
60001fc0:	ldr	r1, [r6, #0]
60001fc2:	mov	r0, r4
60001fc4:	bl	60002578 <___ZN5Print11printNumberEmhh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001fc8:	ldr	r3, [r4, #0]
60001fca:	movs	r2, #4
60001fcc:	ldr	r1, [pc, #244]	; (600020c4 <CrashReportClass::printTo(Print&) const+0x270>)
60001fce:	ldr	r3, [r3, #4]
60001fd0:	mov	r0, r4
60001fd2:	blx	r3
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001fd4:	movs	r3, #0
60001fd6:	movs	r2, #16
60001fd8:	ldr	r1, [r6, #0]
60001fda:	mov	r0, r4
60001fdc:	bl	60002578 <___ZN5Print11printNumberEmhh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001fe0:	ldr	r3, [r4, #0]
60001fe2:	mov	r2, r8
60001fe4:	ldr	r1, [pc, #224]	; (600020c8 <CrashReportClass::printTo(Print&) const+0x274>)
60001fe6:	ldr	r3, [r3, #4]
60001fe8:	mov	r0, r4
60001fea:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001fec:	mov	r0, r4
60001fee:	bl	60002550 <___ZN5Print7printlnEv_veneer>
60001ff2:	adds	r5, #1
60001ff4:	adds	r6, #4
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
	  asm volatile ("dsb":::"memory");
	  while (1) asm ("wfi");
  }
  if (bc->bitmask) {
    for (int i=0; i < 6; i++) {
60001ff6:	cmp	r5, #7
60001ff8:	bne.n	60001f8c <CrashReportClass::printTo(Print&) const+0x138>
        p.print(" (0x");
        p.print(bc->value[i], HEX);
        p.println(")");
      }
    }
    *(volatile uint32_t *)(&bc->bitmask) = 0;
60001ffa:	ldr	r3, [pc, #184]	; (600020b4 <CrashReportClass::printTo(Print&) const+0x260>)
60001ffc:	movs	r2, #0
60001ffe:	str	r2, [r3, #0]
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60002000:	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
60002004:	ldr	r2, [pc, #196]	; (600020cc <CrashReportClass::printTo(Print&) const+0x278>)
60002006:	str	r3, [r2, #0]
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60002008:	dsb	sy
	asm("isb");
6000200c:	isb	sy
    arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
  }
  cleardata(info);
60002010:	bl	60001dcc <cleardata(arm_fault_info_struct*) [clone .constprop.1]>
  return 1;
}
60002014:	movs	r0, #1
60002016:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
6000201a:	ldr	r3, [r4, #0]
6000201c:	movs	r2, #41	; 0x29
6000201e:	ldr	r1, [pc, #176]	; (600020d0 <CrashReportClass::printTo(Print&) const+0x27c>)
60002020:	mov	r0, r4
60002022:	ldr	r3, [r3, #4]
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
    p.println("  Reboot was caused by watchdog 3");
  }
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
    p.println("  Reboot was caused by temperature sensor");
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60002024:	ldr	r5, [pc, #104]	; (60002090 <CrashReportClass::printTo(Print&) const+0x23c>)
60002026:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60002028:	mov	r0, r4
6000202a:	bl	60002550 <___ZN5Print7printlnEv_veneer>
6000202e:	ldr	r3, [r5, #8]
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60002030:	ldr	r1, [r4, #0]
60002032:	movs	r2, #33	; 0x21
60002034:	bic.w	r3, r3, #256	; 0x100
60002038:	mov	r0, r4
6000203a:	ldr	r6, [r1, #4]
6000203c:	str	r3, [r5, #8]
6000203e:	ldr	r1, [pc, #148]	; (600020d4 <CrashReportClass::printTo(Print&) const+0x280>)
60002040:	blx	r6
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60002042:	mov	r0, r4
60002044:	bl	60002550 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60002048:	ldr	r3, [r4, #0]
6000204a:	movs	r2, #66	; 0x42
6000204c:	ldr	r1, [pc, #136]	; (600020d8 <CrashReportClass::printTo(Print&) const+0x284>)
6000204e:	ldr	r3, [r3, #4]
60002050:	mov	r0, r4
60002052:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60002054:	mov	r0, r4
60002056:	bl	60002550 <___ZN5Print7printlnEv_veneer>
	  p.println("Panic Temp Exceeded Shutting Down");
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
	  IOMUXC_GPR_GPR16 = 0x00000007;
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
6000205a:	ldr	r2, [pc, #128]	; (600020dc <CrashReportClass::printTo(Print&) const+0x288>)
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
    p.println("  Reboot was caused by temperature sensor");
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
	  p.println("Panic Temp Exceeded Shutting Down");
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
	  IOMUXC_GPR_GPR16 = 0x00000007;
6000205c:	ldr	r3, [pc, #128]	; (600020e0 <CrashReportClass::printTo(Print&) const+0x28c>)
6000205e:	movs	r1, #7
60002060:	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60002062:	ldr	r3, [r2, #56]	; 0x38
60002064:	orr.w	r3, r3, #64	; 0x40
60002068:	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
6000206a:	dsb	sy
	  while (1) asm ("wfi");
6000206e:	wfi
60002070:	b.n	6000206e <CrashReportClass::printTo(Print&) const+0x21a>
60002072:	nop
60002074:	.word	0x2027ff80
60002078:	.word	0x200012e8
6000207c:	.word	0x20001300
60002080:	.word	0x2000134c
60002084:	.word	0x20001398
60002088:	.word	0x200013c0
6000208c:	.word	0x20001408
60002090:	.word	0x400f8000
60002094:	.word	0x0bad00f1
60002098:	.word	0x20001494
6000209c:	.word	0x200014d8
600020a0:	.word	0x20001500
600020a4:	.word	0x2000152c
600020a8:	.word	0x20001554
600020ac:	.word	0x20001580
600020b0:	.word	0x200015a4
600020b4:	.word	0x2027ffc0
600020b8:	.word	0x2027ffc4
600020bc:	.word	0x2000165c
600020c0:	.word	0x2000166c
600020c4:	.word	0x20001674
600020c8:	.word	0x20001394
600020cc:	.word	0xe000ef68
600020d0:	.word	0x200015c8
600020d4:	.word	0x200015f4
600020d8:	.word	0x20001618
600020dc:	.word	0x400d4000
600020e0:	.word	0x400ac000
600020e4:	bl	60001e10 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]>
size_t CrashReportClass::printTo(Print& p) const
{
  struct arm_fault_info_struct *info = (struct arm_fault_info_struct *)0x2027FF80;
  struct crashreport_breadcrumbs_struct *bc = (struct crashreport_breadcrumbs_struct *)0x2027FFC0;

  if (isvalid(info)) {
600020e8:	cmp	r0, #0
600020ea:	beq.w	60001e64 <CrashReportClass::printTo(Print&) const+0x10>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
600020ee:	ldr	r3, [r4, #0]
600020f0:	movs	r2, #12
600020f2:	ldr	r1, [pc, #712]	; (600023bc <CrashReportClass::printTo(Print&) const+0x568>)
600020f4:	mov	r0, r4
600020f6:	ldr	r3, [r3, #4]
600020f8:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
600020fa:	mov	r0, r4
600020fc:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    p.println("CrashReport:");
    uint8_t ss = info->time % 60;
    info->time /= 60;
    uint8_t mm = info->time % 60;
    info->time /= 60;
60002100:	ldr	r5, [pc, #700]	; (600023c0 <CrashReportClass::printTo(Print&) const+0x56c>)
  struct arm_fault_info_struct *info = (struct arm_fault_info_struct *)0x2027FF80;
  struct crashreport_breadcrumbs_struct *bc = (struct crashreport_breadcrumbs_struct *)0x2027FFC0;

  if (isvalid(info)) {
    p.println("CrashReport:");
    uint8_t ss = info->time % 60;
60002102:	ldr	r7, [r6, #36]	; 0x24
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60002104:	movs	r2, #38	; 0x26
60002106:	ldr	r3, [r4, #0]
60002108:	mov	r0, r4
    info->time /= 60;
    uint8_t mm = info->time % 60;
    info->time /= 60;
6000210a:	umull	r1, r5, r5, r7
6000210e:	ldr	r1, [pc, #692]	; (600023c4 <CrashReportClass::printTo(Print&) const+0x570>)
60002110:	ldr	r3, [r3, #4]
60002112:	lsrs	r5, r5, #11
60002114:	str	r5, [r6, #36]	; 0x24
60002116:	blx	r3
	// Print a string
	size_t print(const char s[])			{ return write(s); }
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60002118:	ldr	r1, [pc, #684]	; (600023c8 <CrashReportClass::printTo(Print&) const+0x574>)
6000211a:	movs	r3, #0
6000211c:	movs	r2, #10
6000211e:	umull	r0, r1, r1, r5
60002122:	mov	r0, r4
60002124:	lsrs	r1, r1, #4
60002126:	add.w	r1, r1, r1, lsl #1
6000212a:	sub.w	r1, r5, r1, lsl #3
6000212e:	bl	60002578 <___ZN5Print11printNumberEmhh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60002132:	ldr	r3, [r4, #0]
60002134:	movs	r2, #1
60002136:	ldr	r1, [pc, #660]	; (600023cc <CrashReportClass::printTo(Print&) const+0x578>)
60002138:	ldr	r3, [r3, #4]
6000213a:	mov	r0, r4
6000213c:	blx	r3
	// Print a string
	size_t print(const char s[])			{ return write(s); }
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
6000213e:	ldr	r1, [pc, #656]	; (600023d0 <CrashReportClass::printTo(Print&) const+0x57c>)
60002140:	movs	r3, #0
60002142:	movs	r2, #10
60002144:	umull	r0, r5, r1, r7
60002148:	mov	r0, r4
6000214a:	lsrs	r5, r5, #5
6000214c:	umull	lr, r1, r1, r5
60002150:	lsrs	r1, r1, #5
60002152:	rsb	r1, r1, r1, lsl #4
60002156:	sub.w	r1, r5, r1, lsl #2
6000215a:	bl	60002578 <___ZN5Print11printNumberEmhh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
6000215e:	ldr	r3, [r4, #0]
60002160:	movs	r2, #1
60002162:	ldr	r1, [pc, #616]	; (600023cc <CrashReportClass::printTo(Print&) const+0x578>)
60002164:	ldr	r3, [r3, #4]
60002166:	mov	r0, r4
60002168:	blx	r3
	// Print a string
	size_t print(const char s[])			{ return write(s); }
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
6000216a:	movs	r3, #0
6000216c:	rsb	r1, r5, r5, lsl #4
60002170:	movs	r2, #10
60002172:	mov	r0, r4
60002174:	sub.w	r1, r7, r1, lsl #2
60002178:	bl	60002578 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
6000217c:	mov	r0, r4
6000217e:	bl	60002550 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60002182:	ldr	r3, [r4, #0]
60002184:	movs	r2, #36	; 0x24
60002186:	ldr	r1, [pc, #588]	; (600023d4 <CrashReportClass::printTo(Print&) const+0x580>)
60002188:	ldr	r3, [r3, #4]
6000218a:	mov	r0, r4
6000218c:	blx	r3
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
6000218e:	movs	r3, #0
60002190:	movs	r2, #16
60002192:	ldr	r1, [r6, #24]
60002194:	mov	r0, r4
60002196:	bl	60002578 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
6000219a:	mov	r0, r4
6000219c:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    //p.print("  length: ");
    //p.println(info->len);
    //p.print("  IPSR: ");
    //p.println(info->ipsr, HEX);

    uint32_t _CFSR = info->cfsr;
600021a0:	ldr	r5, [r6, #8]
    if (_CFSR > 0) {
600021a2:	cmp	r5, #0
600021a4:	bne.n	60002238 <CrashReportClass::printTo(Print&) const+0x3e4>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
        p.println("\t(DIVBYZERO) Divide by zero");
      }
    }

    uint32_t _HFSR = info->hfsr;
600021a6:	ldr	r6, [pc, #560]	; (600023d8 <CrashReportClass::printTo(Print&) const+0x584>)
600021a8:	ldr	r5, [r6, #12]
    if (_HFSR > 0) {
600021aa:	cmp	r5, #0
600021ac:	bne.n	60002212 <CrashReportClass::printTo(Print&) const+0x3be>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
600021ae:	ldr	r3, [r4, #0]
600021b0:	movs	r2, #34	; 0x22
600021b2:	ldr	r1, [pc, #552]	; (600023dc <CrashReportClass::printTo(Print&) const+0x588>)
600021b4:	mov	r0, r4
600021b6:	ldr	r3, [r3, #4]
600021b8:	blx	r3
       p.println("\t(DEBUGEVT) Reserved for Debug");
      }
    }

    p.print("  Temperature inside the chip was ");
    p.print(info->temp);
600021ba:	ldr	r3, [pc, #540]	; (600023d8 <CrashReportClass::printTo(Print&) const+0x584>)
	size_t print(int64_t n, int base)		{ return (base == 10) ? print(n) : printNumber64(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	// Print a floating point (decimal) number
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
600021bc:	movs	r1, #2
600021be:	mov	r0, r4
600021c0:	vldr	s0, [r3, #32]
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600021c4:	ldr	r5, [pc, #536]	; (600023e0 <CrashReportClass::printTo(Print&) const+0x58c>)
	size_t print(int64_t n, int base)		{ return (base == 10) ? print(n) : printNumber64(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	// Print a floating point (decimal) number
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
600021c6:	vcvt.f64.f32	d0, s0
600021ca:	bl	60002560 <___ZN5Print10printFloatEdh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
600021ce:	ldr	r3, [r4, #0]
600021d0:	movs	r2, #5
600021d2:	ldr	r1, [pc, #528]	; (600023e4 <CrashReportClass::printTo(Print&) const+0x590>)
600021d4:	ldr	r3, [r3, #4]
600021d6:	mov	r0, r4
600021d8:	blx	r3
600021da:	ldr	r3, [r4, #0]
600021dc:	movs	r2, #29
600021de:	ldr	r1, [pc, #520]	; (600023e8 <CrashReportClass::printTo(Print&) const+0x594>)
600021e0:	ldr	r3, [r3, #4]
600021e2:	mov	r0, r4
600021e4:	blx	r3
    p.print(" ┬░C\n");

    // TODO: fault handler should read the CCM & PLL registers to log actual speed at crash
    p.print("  Startup CPU clock speed is ");
    p.print( F_CPU_ACTUAL/1000000);
600021e6:	ldr	r2, [pc, #516]	; (600023ec <CrashReportClass::printTo(Print&) const+0x598>)
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600021e8:	movs	r3, #0
600021ea:	mov	r0, r4
600021ec:	ldr	r1, [r2, #0]
600021ee:	movs	r2, #10
600021f0:	umull	r5, r1, r5, r1
600021f4:	lsrs	r1, r1, #18
600021f6:	bl	60002578 <___ZN5Print11printNumberEmhh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
600021fa:	ldr	r3, [r4, #0]
600021fc:	movs	r2, #4
600021fe:	ldr	r1, [pc, #496]	; (600023f0 <CrashReportClass::printTo(Print&) const+0x59c>)
60002200:	ldr	r3, [r3, #4]
60002202:	mov	r0, r4
60002204:	blx	r3
60002206:	b.n	60001ed0 <CrashReportClass::printTo(Print&) const+0x7c>
  uint32_t SRSR = SRC_SRSR;
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
    // use SRC_GPR5 to distinguish cases.  See pages 1290 & 1294 in ref manual
    uint32_t gpr5 = SRC_GPR5;
    if (gpr5 == 0x0BAD00F1) {
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
60002208:	ldr	r1, [pc, #488]	; (600023f4 <CrashReportClass::printTo(Print&) const+0x5a0>)
6000220a:	mov	r0, r4
6000220c:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
60002210:	b.n	60001ef4 <CrashReportClass::printTo(Print&) const+0xa0>
	// Print a string
	size_t print(const String &s);
	// Print a single character
	size_t print(char c)				{ return write((uint8_t)c); }
	// Print a string
	size_t print(const char s[])			{ return write(s); }
60002212:	ldr	r1, [pc, #484]	; (600023f8 <CrashReportClass::printTo(Print&) const+0x5a4>)
60002214:	mov	r0, r4
60002216:	bl	60002558 <___ZN5Print5writeEPKc_veneer>
    }

    uint32_t _HFSR = info->hfsr;
    if (_HFSR > 0) {
      p.print("  HTSR: ");
      p.println(info->hfsr, HEX);
6000221a:	ldr	r1, [r6, #12]
6000221c:	movs	r2, #16
6000221e:	mov	r0, r4
60002220:	bl	60002548 <___ZN5Print7printlnEmi_veneer>
      //Memory Management Faults
      if (((_HFSR & (0x02)) >> 1) == 1) {
60002224:	lsls	r0, r5, #30
60002226:	bmi.w	6000246a <CrashReportClass::printTo(Print&) const+0x616>
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
6000222a:	lsls	r1, r5, #1
6000222c:	bpl.n	600021ae <CrashReportClass::printTo(Print&) const+0x35a>
       p.println("\t(FORCED) Forced Hard Fault");
6000222e:	ldr	r1, [pc, #460]	; (600023fc <CrashReportClass::printTo(Print&) const+0x5a8>)
60002230:	mov	r0, r4
60002232:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
60002236:	b.n	600021ae <CrashReportClass::printTo(Print&) const+0x35a>
60002238:	ldr	r1, [pc, #452]	; (60002400 <CrashReportClass::printTo(Print&) const+0x5ac>)
6000223a:	mov	r0, r4
6000223c:	bl	60002558 <___ZN5Print5writeEPKc_veneer>
    //p.println(info->ipsr, HEX);

    uint32_t _CFSR = info->cfsr;
    if (_CFSR > 0) {
      p.print("  CFSR: ");
      p.println(info->cfsr, HEX);
60002240:	ldr	r1, [r6, #8]
60002242:	movs	r2, #16
60002244:	mov	r0, r4
60002246:	bl	60002548 <___ZN5Print7printlnEmi_veneer>
      //Memory Management Faults
      if ((_CFSR & 1) == 1) {
6000224a:	lsls	r0, r5, #31
6000224c:	bmi.w	60002460 <CrashReportClass::printTo(Print&) const+0x60c>
        p.println("\t(IACCVIOL) Instruction Access Violation");
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60002250:	lsls	r1, r5, #30
60002252:	bmi.w	600023b0 <CrashReportClass::printTo(Print&) const+0x55c>
        p.println("\t(DACCVIOL) Data Access Violation");
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60002256:	lsls	r2, r5, #28
60002258:	bmi.w	600023a6 <CrashReportClass::printTo(Print&) const+0x552>
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
6000225c:	lsls	r3, r5, #27
6000225e:	bmi.w	6000239c <CrashReportClass::printTo(Print&) const+0x548>
        p.println("\t(MSTKERR) MemMange Fault on stacking");
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60002262:	lsls	r7, r5, #26
60002264:	bpl.n	6000226e <CrashReportClass::printTo(Print&) const+0x41a>
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60002266:	ldr	r1, [pc, #412]	; (60002404 <CrashReportClass::printTo(Print&) const+0x5b0>)
60002268:	mov	r0, r4
6000226a:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
      }
      if (((_CFSR & (0x80)) >> 7) == 1) {
6000226e:	lsls	r6, r5, #24
60002270:	bmi.n	60002332 <CrashReportClass::printTo(Print&) const+0x4de>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
        }
        p.println();
      }
      //Bus Fault Status Register BFSR
      if (((_CFSR & 0x100) >> 8) == 1) {
60002272:	lsls	r0, r5, #23
60002274:	bmi.n	60002328 <CrashReportClass::printTo(Print&) const+0x4d4>
        p.println("\t(IBUSERR) Instruction Bus Error");
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60002276:	lsls	r1, r5, #22
60002278:	bmi.n	6000231e <CrashReportClass::printTo(Print&) const+0x4ca>
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
6000227a:	lsls	r2, r5, #21
6000227c:	bmi.n	60002314 <CrashReportClass::printTo(Print&) const+0x4c0>
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
6000227e:	lsls	r3, r5, #20
60002280:	bmi.n	6000230a <CrashReportClass::printTo(Print&) const+0x4b6>
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60002282:	lsls	r7, r5, #19
60002284:	bmi.n	600022ce <CrashReportClass::printTo(Print&) const+0x47a>
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60002286:	lsls	r6, r5, #18
60002288:	bpl.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
6000228a:	ldr	r1, [pc, #380]	; (60002408 <CrashReportClass::printTo(Print&) const+0x5b4>)
6000228c:	mov	r0, r4
6000228e:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
      }
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60002292:	lsls	r0, r5, #16
60002294:	bpl.n	600022aa <CrashReportClass::printTo(Print&) const+0x456>
60002296:	ldr	r1, [pc, #372]	; (6000240c <CrashReportClass::printTo(Print&) const+0x5b8>)
60002298:	mov	r0, r4
6000229a:	bl	60002558 <___ZN5Print5writeEPKc_veneer>
        p.print("\t(BFARVALID) Accessed Address: 0x");
        p.println(info->bfar, HEX);
6000229e:	ldr	r3, [pc, #312]	; (600023d8 <CrashReportClass::printTo(Print&) const+0x584>)
600022a0:	movs	r2, #16
600022a2:	mov	r0, r4
600022a4:	ldr	r1, [r3, #20]
600022a6:	bl	60002548 <___ZN5Print7printlnEmi_veneer>
      }
      //Usage Fault Status Register UFSR
      if (((_CFSR & 0x10000) >> 16) == 1) {
600022aa:	lsls	r1, r5, #15
600022ac:	bmi.n	60002300 <CrashReportClass::printTo(Print&) const+0x4ac>
        p.println("\t(UNDEFINSTR) Undefined instruction");
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
600022ae:	lsls	r2, r5, #14
600022b0:	bmi.n	600022f6 <CrashReportClass::printTo(Print&) const+0x4a2>
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
600022b2:	lsls	r3, r5, #13
600022b4:	bmi.n	600022ec <CrashReportClass::printTo(Print&) const+0x498>
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
600022b6:	lsls	r7, r5, #12
600022b8:	bmi.n	600022e2 <CrashReportClass::printTo(Print&) const+0x48e>
        p.println("\t(NOCP) No Coprocessor");
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
600022ba:	lsls	r6, r5, #7
600022bc:	bmi.n	600022d8 <CrashReportClass::printTo(Print&) const+0x484>
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
600022be:	lsls	r5, r5, #6
600022c0:	bpl.w	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
        p.println("\t(DIVBYZERO) Divide by zero");
600022c4:	ldr	r1, [pc, #328]	; (60002410 <CrashReportClass::printTo(Print&) const+0x5bc>)
600022c6:	mov	r0, r4
600022c8:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
600022cc:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
600022ce:	ldr	r1, [pc, #324]	; (60002414 <CrashReportClass::printTo(Print&) const+0x5c0>)
600022d0:	mov	r0, r4
600022d2:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
600022d6:	b.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
        p.println("\t(NOCP) No Coprocessor");
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
600022d8:	ldr	r1, [pc, #316]	; (60002418 <CrashReportClass::printTo(Print&) const+0x5c4>)
600022da:	mov	r0, r4
600022dc:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
600022e0:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
        p.println("\t(NOCP) No Coprocessor");
600022e2:	ldr	r1, [pc, #312]	; (6000241c <CrashReportClass::printTo(Print&) const+0x5c8>)
600022e4:	mov	r0, r4
600022e6:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
600022ea:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
      if (((_CFSR & 0x10000) >> 16) == 1) {
        p.println("\t(UNDEFINSTR) Undefined instruction");
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
600022ec:	ldr	r1, [pc, #304]	; (60002420 <CrashReportClass::printTo(Print&) const+0x5cc>)
600022ee:	mov	r0, r4
600022f0:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
600022f4:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
      }
      //Usage Fault Status Register UFSR
      if (((_CFSR & 0x10000) >> 16) == 1) {
        p.println("\t(UNDEFINSTR) Undefined instruction");
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
600022f6:	ldr	r1, [pc, #300]	; (60002424 <CrashReportClass::printTo(Print&) const+0x5d0>)
600022f8:	mov	r0, r4
600022fa:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
600022fe:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
        p.print("\t(BFARVALID) Accessed Address: 0x");
        p.println(info->bfar, HEX);
      }
      //Usage Fault Status Register UFSR
      if (((_CFSR & 0x10000) >> 16) == 1) {
        p.println("\t(UNDEFINSTR) Undefined instruction");
60002300:	ldr	r1, [pc, #292]	; (60002428 <CrashReportClass::printTo(Print&) const+0x5d4>)
60002302:	mov	r0, r4
60002304:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
60002308:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
6000230a:	ldr	r1, [pc, #288]	; (6000242c <CrashReportClass::printTo(Print&) const+0x5d8>)
6000230c:	mov	r0, r4
6000230e:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
60002312:	b.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
      if (((_CFSR & 0x100) >> 8) == 1) {
        p.println("\t(IBUSERR) Instruction Bus Error");
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
60002314:	ldr	r1, [pc, #280]	; (60002430 <CrashReportClass::printTo(Print&) const+0x5dc>)
60002316:	mov	r0, r4
60002318:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
6000231c:	b.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
      }
      //Bus Fault Status Register BFSR
      if (((_CFSR & 0x100) >> 8) == 1) {
        p.println("\t(IBUSERR) Instruction Bus Error");
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
6000231e:	ldr	r1, [pc, #276]	; (60002434 <CrashReportClass::printTo(Print&) const+0x5e0>)
60002320:	mov	r0, r4
60002322:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
60002326:	b.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
        }
        p.println();
      }
      //Bus Fault Status Register BFSR
      if (((_CFSR & 0x100) >> 8) == 1) {
        p.println("\t(IBUSERR) Instruction Bus Error");
60002328:	ldr	r1, [pc, #268]	; (60002438 <CrashReportClass::printTo(Print&) const+0x5e4>)
6000232a:	mov	r0, r4
6000232c:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
60002330:	b.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
      }
      if (((_CFSR & (0x80)) >> 7) == 1) {
        p.print("\t(MMARVALID) Accessed Address: 0x");
        p.print(info->mmfar, HEX);
60002332:	ldr	r6, [pc, #164]	; (600023d8 <CrashReportClass::printTo(Print&) const+0x584>)
60002334:	mov	r0, r4
60002336:	ldr	r1, [pc, #260]	; (6000243c <CrashReportClass::printTo(Print&) const+0x5e8>)
60002338:	bl	60002558 <___ZN5Print5writeEPKc_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
6000233c:	movs	r2, #16
6000233e:	ldr	r1, [r6, #16]
60002340:	movs	r3, #0
60002342:	mov	r0, r4
60002344:	bl	60002578 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60002348:	ldr	r2, [r6, #16]
6000234a:	cmp	r2, #31
6000234c:	bls.n	6000236a <CrashReportClass::printTo(Print&) const+0x516>
          p.print(info->ret, HEX);
          p.print("\" for filename & line number.");
            // TODO: in some perfect future, maybe we'll build part of the ELF debug_line
            // section (maybe just the .ino files) into CrashReport and be able to report
            // the actual filename and line number.  Wouldn't that be awesome?!
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
6000234e:	ldr	r3, [pc, #240]	; (60002440 <CrashReportClass::printTo(Print&) const+0x5ec>)
60002350:	cmp	r2, r3
60002352:	bcc.n	60002362 <CrashReportClass::printTo(Print&) const+0x50e>
60002354:	adds	r3, #32
60002356:	cmp	r2, r3
60002358:	bcs.n	60002362 <CrashReportClass::printTo(Print&) const+0x50e>
	// Print a string
	size_t print(const String &s);
	// Print a single character
	size_t print(char c)				{ return write((uint8_t)c); }
	// Print a string
	size_t print(const char s[])			{ return write(s); }
6000235a:	ldr	r1, [pc, #232]	; (60002444 <CrashReportClass::printTo(Print&) const+0x5f0>)
6000235c:	mov	r0, r4
6000235e:	bl	60002558 <___ZN5Print5writeEPKc_veneer>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
        }
        p.println();
60002362:	mov	r0, r4
60002364:	bl	60002550 <___ZN5Print7printlnEv_veneer>
60002368:	b.n	60002272 <CrashReportClass::printTo(Print&) const+0x41e>
6000236a:	ldr	r1, [pc, #220]	; (60002448 <CrashReportClass::printTo(Print&) const+0x5f4>)
6000236c:	mov	r0, r4
6000236e:	bl	60002558 <___ZN5Print5writeEPKc_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60002372:	movs	r3, #0
60002374:	movs	r2, #16
60002376:	ldr	r1, [r6, #24]
60002378:	mov	r0, r4
6000237a:	bl	60002578 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string
	size_t print(const String &s);
	// Print a single character
	size_t print(char c)				{ return write((uint8_t)c); }
	// Print a string
	size_t print(const char s[])			{ return write(s); }
6000237e:	ldr	r1, [pc, #204]	; (6000244c <CrashReportClass::printTo(Print&) const+0x5f8>)
60002380:	mov	r0, r4
60002382:	bl	60002558 <___ZN5Print5writeEPKc_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60002386:	ldr	r1, [r6, #24]
60002388:	movs	r3, #0
6000238a:	movs	r2, #16
6000238c:	mov	r0, r4
6000238e:	bl	60002578 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string
	size_t print(const String &s);
	// Print a single character
	size_t print(char c)				{ return write((uint8_t)c); }
	// Print a string
	size_t print(const char s[])			{ return write(s); }
60002392:	ldr	r1, [pc, #188]	; (60002450 <CrashReportClass::printTo(Print&) const+0x5fc>)
60002394:	mov	r0, r4
60002396:	bl	60002558 <___ZN5Print5writeEPKc_veneer>
6000239a:	b.n	60002362 <CrashReportClass::printTo(Print&) const+0x50e>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
        p.println("\t(DACCVIOL) Data Access Violation");
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
        p.println("\t(MSTKERR) MemMange Fault on stacking");
6000239c:	ldr	r1, [pc, #180]	; (60002454 <CrashReportClass::printTo(Print&) const+0x600>)
6000239e:	mov	r0, r4
600023a0:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
600023a4:	b.n	6000226e <CrashReportClass::printTo(Print&) const+0x41a>
      if ((_CFSR & 1) == 1) {
        p.println("\t(IACCVIOL) Instruction Access Violation");
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
        p.println("\t(DACCVIOL) Data Access Violation");
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
600023a6:	ldr	r1, [pc, #176]	; (60002458 <CrashReportClass::printTo(Print&) const+0x604>)
600023a8:	mov	r0, r4
600023aa:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
600023ae:	b.n	6000226e <CrashReportClass::printTo(Print&) const+0x41a>
      p.println(info->cfsr, HEX);
      //Memory Management Faults
      if ((_CFSR & 1) == 1) {
        p.println("\t(IACCVIOL) Instruction Access Violation");
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
        p.println("\t(DACCVIOL) Data Access Violation");
600023b0:	ldr	r1, [pc, #168]	; (6000245c <CrashReportClass::printTo(Print&) const+0x608>)
600023b2:	mov	r0, r4
600023b4:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
600023b8:	b.n	6000226e <CrashReportClass::printTo(Print&) const+0x41a>
600023ba:	nop
600023bc:	.word	0x20000dd0
600023c0:	.word	0x91a2b3c5
600023c4:	.word	0x20000de0
600023c8:	.word	0xaaaaaaab
600023cc:	.word	0x20000e08
600023d0:	.word	0x88888889
600023d4:	.word	0x20000e0c
600023d8:	.word	0x2027ff80
600023dc:	.word	0x20001294
600023e0:	.word	0x431bde83
600023e4:	.word	0x200012b8
600023e8:	.word	0x200012c0
600023ec:	.word	0x20001bc4
600023f0:	.word	0x200012e0
600023f4:	.word	0x20001448
600023f8:	.word	0x20001244
600023fc:	.word	0x20001278
60002400:	.word	0x20000e34
60002404:	.word	0x20000ee4
60002408:	.word	0x20001108
6000240c:	.word	0x2000113c
60002410:	.word	0x20001228
60002414:	.word	0x200010d4
60002418:	.word	0x200011fc
6000241c:	.word	0x200011e4
60002420:	.word	0x200011b8
60002424:	.word	0x20001184
60002428:	.word	0x20001160
6000242c:	.word	0x20001094
60002430:	.word	0x2000104c
60002434:	.word	0x2000101c
60002438:	.word	0x20000ff8
6000243c:	.word	0x20000f10
60002440:	.word	0x20017d60
60002444:	.word	0x20000fb4
60002448:	.word	0x20000f34
6000244c:	.word	0x20000f54
60002450:	.word	0x20000f94
60002454:	.word	0x20000ebc
60002458:	.word	0x20000e90
6000245c:	.word	0x20000e6c
    if (_CFSR > 0) {
      p.print("  CFSR: ");
      p.println(info->cfsr, HEX);
      //Memory Management Faults
      if ((_CFSR & 1) == 1) {
        p.println("\t(IACCVIOL) Instruction Access Violation");
60002460:	ldr	r1, [pc, #16]	; (60002474 <CrashReportClass::printTo(Print&) const+0x620>)
60002462:	mov	r0, r4
60002464:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
60002468:	b.n	6000226e <CrashReportClass::printTo(Print&) const+0x41a>
    if (_HFSR > 0) {
      p.print("  HTSR: ");
      p.println(info->hfsr, HEX);
      //Memory Management Faults
      if (((_HFSR & (0x02)) >> 1) == 1) {
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
6000246a:	ldr	r1, [pc, #12]	; (60002478 <CrashReportClass::printTo(Print&) const+0x624>)
6000246c:	mov	r0, r4
6000246e:	bl	60002510 <___ZN5Print7printlnEPKc_veneer>
60002472:	b.n	600021ae <CrashReportClass::printTo(Print&) const+0x35a>
60002474:	.word	0x20000e40
60002478:	.word	0x20001250

6000247c <CrashReportClass::clear()>:

FLASHMEM
void CrashReportClass::clear()
{
  struct arm_fault_info_struct *info = (struct arm_fault_info_struct *)0x2027FF80;
  cleardata(info);
6000247c:	b.n	60001dcc <cleardata(arm_fault_info_struct*) [clone .constprop.1]>
6000247e:	nop

60002480 <CrashReportClass::operator bool()>:
}

FLASHMEM
CrashReportClass::operator bool()
{
60002480:	push	{r3, lr}
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60002482:	ldr	r3, [pc, #24]	; (6000249c <CrashReportClass::operator bool()+0x1c>)
60002484:	ldr	r3, [r3, #0]
60002486:	cmp	r3, #11
60002488:	beq.n	6000248e <CrashReportClass::operator bool()+0xe>
FLASHMEM
CrashReportClass::operator bool()
{
	struct arm_fault_info_struct *info = (struct arm_fault_info_struct *)0x2027FF80;
	if (isvalid(info)) return true;
	return false;
6000248a:	movs	r0, #0
}
6000248c:	pop	{r3, pc}
6000248e:	bl	60001e10 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]>

FLASHMEM
CrashReportClass::operator bool()
{
	struct arm_fault_info_struct *info = (struct arm_fault_info_struct *)0x2027FF80;
	if (isvalid(info)) return true;
60002492:	adds	r0, #0
60002494:	it	ne
60002496:	movne	r0, #1
60002498:	pop	{r3, pc}
6000249a:	nop
6000249c:	.word	0x2027ff80

600024a0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600024a0:	ldr	r3, [pc, #68]	; (600024e8 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600024a2:	ldr	r1, [pc, #72]	; (600024ec <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600024a4:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600024a6:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600024a8:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600024ac:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600024ae:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600024b0:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600024b4:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600024b6:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600024b8:	orr.w	r0, r0, #768	; 0x300
600024bc:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600024be:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600024c0:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600024c2:	ldr	r3, [r2, #72]	; 0x48
600024c4:	lsls	r3, r3, #24
600024c6:	bmi.n	600024c2 <analog_init+0x22>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600024c8:	ldr	r3, [pc, #36]	; (600024f0 <analog_init+0x50>)
600024ca:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600024ce:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600024d0:	mov	r2, r3
	while (ADC1_GC & ADC_GC_CAL) {
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600024d2:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600024d4:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600024d6:	ldr	r3, [r2, #72]	; 0x48
600024d8:	ands.w	r3, r3, #128	; 0x80
600024dc:	bne.n	600024d6 <analog_init+0x36>
		//yield();
	}
	calibrating = 0;
600024de:	ldr	r2, [pc, #20]	; (600024f4 <analog_init+0x54>)
600024e0:	strb	r3, [r2, #0]
}
600024e2:	pop	{r4, r5}
600024e4:	bx	lr
600024e6:	nop
600024e8:	.word	0x400fc000
600024ec:	.word	0x400c4000
600024f0:	.word	0x400c8000
600024f4:	.word	0x20017cae

600024f8 <_init>:
600024f8:	push	{r3, r4, r5, r6, r7, lr}
600024fa:	nop
600024fc:	pop	{r3, r4, r5, r6, r7}
600024fe:	pop	{r3}
60002500:	mov	lr, r3
60002502:	bx	lr
60002504:	movs	r0, r0
	...

60002508 <__main_veneer>:
60002508:	ldr.w	pc, [pc]	; 6000250c <__main_veneer+0x4>
6000250c:	.word	0x00008869

60002510 <___ZN5Print7printlnEPKc_veneer>:
60002510:	ldr.w	pc, [pc]	; 60002514 <___ZN5Print7printlnEPKc_veneer+0x4>
60002514:	.word	0x00008801

60002518 <____libc_init_array_veneer>:
60002518:	ldr.w	pc, [pc]	; 6000251c <____libc_init_array_veneer+0x4>
6000251c:	.word	0x00008ef9

60002520 <__pwm_init_veneer>:
60002520:	ldr.w	pc, [pc]	; 60002524 <__pwm_init_veneer+0x4>
60002524:	.word	0x000082c5

60002528 <__sm_set_pool_veneer>:
60002528:	ldr.w	pc, [pc]	; 6000252c <__sm_set_pool_veneer+0x4>
6000252c:	.word	0x000080f9

60002530 <__usb_init_serialnumber_veneer>:
60002530:	ldr.w	pc, [pc]	; 60002534 <__usb_init_serialnumber_veneer+0x4>
60002534:	.word	0x0000857d

60002538 <__set_arm_clock_veneer>:
60002538:	ldr.w	pc, [pc]	; 6000253c <__set_arm_clock_veneer+0x4>
6000253c:	.word	0x00007161

60002540 <__delay_veneer>:
60002540:	ldr.w	pc, [pc]	; 60002544 <__delay_veneer+0x4>
60002544:	.word	0x00007d39

60002548 <___ZN5Print7printlnEmi_veneer>:
60002548:	ldr.w	pc, [pc]	; 6000254c <___ZN5Print7printlnEmi_veneer+0x4>
6000254c:	.word	0x00008829

60002550 <___ZN5Print7printlnEv_veneer>:
60002550:	ldr.w	pc, [pc]	; 60002554 <___ZN5Print7printlnEv_veneer+0x4>
60002554:	.word	0x00008901

60002558 <___ZN5Print5writeEPKc_veneer>:
60002558:	ldr.w	pc, [pc]	; 6000255c <___ZN5Print5writeEPKc_veneer+0x4>
6000255c:	.word	0x00001f21

60002560 <___ZN5Print10printFloatEdh_veneer>:
60002560:	ldr.w	pc, [pc]	; 60002564 <___ZN5Print10printFloatEdh_veneer+0x4>
60002564:	.word	0x000089f1

60002568 <__memset_veneer>:
60002568:	ldr.w	pc, [pc]	; 6000256c <__memset_veneer+0x4>
6000256c:	.word	0x0000972d

60002570 <___ZN5Print5printEl_veneer>:
60002570:	ldr.w	pc, [pc]	; 60002574 <___ZN5Print5printEl_veneer+0x4>
60002574:	.word	0x000089d5

60002578 <___ZN5Print11printNumberEmhh_veneer>:
60002578:	ldr.w	pc, [pc]	; 6000257c <___ZN5Print11printNumberEmhh_veneer+0x4>
6000257c:	.word	0x00008955

60002580 <__init_array_start>:
60002580:	.word	0x00000045
60002584:	.word	0x00000e85
60002588:	.word	0x00001905

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      26:	.short	0xb933
      28:	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x17>)
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1b>)
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	movs	r3, #1
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      34:	strb	r3, [r4, #0]
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
      36:	pop	{r4, pc}
      38:	ldr	r0, [r1, r1]
      3a:	movs	r0, #0
      3c:	movs	r0, r0
      3e:	movs	r0, r0
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
      40:	.word	0x60002698

00000044 <frame_dummy>:

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	.short	0xb510
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	cbnz	r3, 5a <frame_dummy+0x16>
      58:	.word	0x4b07bd10
      5c:	cmp	r3, #0
      5e:	beq.n	58 <frame_dummy+0x14>
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	nop
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      68:	movs	r0, r0
      6a:	movs	r0, r0
			yield(); // TODO: what happens if yield-called code uses analogRead()
      6c:	.word	0x2000584c
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      70:	movs	r6, #152	; 0x98
      72:	str	r0, [r0, #0]
      74:	movs	r6, #192	; 0xc0
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC2_R0;
      76:	movs	r0, #0
      78:	.word	0x00000000

0000007c <getDataCount()>:
  volatile static int queue_busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile int head=0;
  volatile int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
      7c:	ldr	r3, [pc, #20]	; (94 <getDataCount()+0x18>)
      7e:	ldr	r2, [pc, #24]	; (98 <getDataCount()+0x1c>)
      80:	ldr	r3, [r3, #0]
      82:	ldr	r0, [r2, #0]
      84:	subs	r3, r3, r0
      86:	.short	0xd401
      88:	uxth	r0, r3
      8a:	bx	lr
      8c:	add.w	r0, r3, #128	; 0x80
      90:	uxth	r0, r0
      92:	.short	0x4770
      94:	ldrb	r0, [r0, #18]
      96:	.short	0x2001
      98:	strb	r0, [r3, #27]
      9a:	movs	r0, #1

0000009c <queue_isBusy()>:

  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
      9c:	ldr	r3, [pc, #4]	; (a4 <queue_isBusy()+0x8>)
      9e:	.short	0x6818
      a0:	bx	lr
      a2:	nop
      a4:	ldr	r0, [r6, #36]	; 0x24
      a6:	.short	0x2000

000000a8 <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
      a8:	push	{r4, r5, r6, r7}
    if ( (tail+1)%MAXBUF == head ) return 0;
      aa:	ldr	r4, [pc, #108]	; (118 <pushData(unsigned long*)+0x70>)
      ac:	.word	0x68224b1b
      b0:	ldr	r1, [pc, #108]	; (120 <pushData(unsigned long*)+0x78>)
      b2:	.short	0x3201
      b4:	ldr	r1, [r1, #0]
      b6:	.short	0x4013
      b8:	cmp	r3, #0
      ba:	.short	0xdb1e
      bc:	cmp	r3, r1
      be:	.short	0xd022
    //while(busy); 
    queue_busy=1;
      c0:	ldr	r7, [pc, #96]	; (124 <pushData(unsigned long*)+0x7c>)
      c2:	.short	0x2201
      c4:	subs	r1, r0, #4
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
      c6:	movs	r3, #0
      c8:	.word	0x603a4e17
      cc:	ldr	r2, [r4, #0]
      ce:	.short	0xf851
      d0:	lsrs	r4, r0, #28
      d2:	add.w	r2, r3, r2, lsl #7
      d6:	.short	0x3301
      d8:	ldr	r5, [pc, #60]	; (118 <pushData(unsigned long*)+0x70>)
      da:	cmp	r3, #128	; 0x80
      dc:	str.w	r0, [r6, r2, lsl #2]
      e0:	.word	0x682ad1f4
    tail = (tail+1)%MAXBUF;
      e4:	ldr	r3, [pc, #52]	; (11c <pushData(unsigned long*)+0x74>)
      e6:	.short	0x3201
      e8:	ands	r3, r2
      ea:	.short	0x2b00
      ec:	blt.n	10c <pushData(unsigned long*)+0x64>
    queue_busy=0;
      ee:	.short	0x2200
  {
    if ( (tail+1)%MAXBUF == head ) return 0;
    //while(busy); 
    queue_busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    tail = (tail+1)%MAXBUF;
      f0:	str	r3, [r4, #0]
    queue_busy=0;
    return 1; // signal success.
      f2:	.short	0x2001
    if ( (tail+1)%MAXBUF == head ) return 0;
    //while(busy); 
    queue_busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    tail = (tail+1)%MAXBUF;
    queue_busy=0;
      f4:	str	r2, [r7, #0]
    return 1; // signal success.
  }
      f6:	.short	0xbcf0
      f8:	bx	lr

  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    if ( (tail+1)%MAXBUF == head ) return 0;
      fa:	.short	0x3b01
      fc:	orn	r3, r3, #127	; 0x7f
     100:	.word	0x428b3301
     104:	bne.n	c0 <pushData(unsigned long*)+0x18>
     106:	.short	0x2000
    queue_busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    tail = (tail+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
  }
     108:	pop	{r4, r5, r6, r7}
     10a:	.short	0x4770
  {
    if ( (tail+1)%MAXBUF == head ) return 0;
    //while(busy); 
    queue_busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    tail = (tail+1)%MAXBUF;
     10c:	subs	r3, #1
     10e:	.short	0xf063
     110:	lsls	r7, r7, #13
     112:	.short	0x3301
     114:	b.n	ee <pushData(unsigned long*)+0x46>
     116:	.short	0xbf00
     118:	ldrb	r0, [r0, #18]
     11a:	.short	0x2001
     11c:	lsls	r7, r7, #1
     11e:	strh	r0, [r0, #0]
     120:	.word	0x200176d8
     124:	ldr	r0, [r6, #36]	; 0x24
     126:	.short	0x2000
     128:	ldr	r4, [r6, #36]	; 0x24
     12a:	.short	0x2000

0000012c <pullData(unsigned long*)>:
    queue_busy=0;
    return 1; // signal success.
  }
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
     12c:	push	{r4, r5, r6}
    if ( head==tail ) return 0;
     12e:	.short	0x4b15
     130:	.word	0x68224c15
     134:	ldr	r3, [r3, #0]
     136:	.short	0x429a
     138:	beq.n	174 <pullData(unsigned long*)+0x48>
    //while(busy); 
    queue_busy=1;
     13a:	.short	0x4e14
     13c:	movs	r2, #1
     13e:	.short	0x1f01
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
     140:	movs	r3, #0
     142:	.short	0x4d13
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    //while(busy); 
    queue_busy=1;
     144:	str	r2, [r6, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
     146:	.short	0x6822
     148:	ldr	r0, [pc, #60]	; (188 <pullData(unsigned long*)+0x5c>)
     14a:	add.w	r2, r3, r2, lsl #7
     14e:	adds	r3, #1
     150:	ldr.w	r2, [r5, r2, lsl #2]
     154:	cmp	r3, #128	; 0x80
     156:	str.w	r2, [r1, #4]!
     15a:	.short	0xd1f4
    head = (head+1)%MAXBUF;
     15c:	ldr	r2, [r0, #0]
     15e:	.short	0x4b0d
     160:	adds	r2, #1
     162:	.short	0x4013
     164:	cmp	r3, #0
     166:	blt.n	17a <pullData(unsigned long*)+0x4e>
    queue_busy=0;
     168:	.word	0x60232200
    return 1;
     16c:	movs	r0, #1
    if ( head==tail ) return 0;
    //while(busy); 
    queue_busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    head = (head+1)%MAXBUF;
    queue_busy=0;
     16e:	str	r2, [r6, #0]
    return 1;
  }
     170:	pop	{r4, r5, r6}
     172:	bx	lr
    return 1; // signal success.
  }
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
     174:	movs	r0, #0
    queue_busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    head = (head+1)%MAXBUF;
    queue_busy=0;
    return 1;
  }
     176:	pop	{r4, r5, r6}
     178:	bx	lr
  {
    if ( head==tail ) return 0;
    //while(busy); 
    queue_busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    head = (head+1)%MAXBUF;
     17a:	subs	r3, #1
     17c:	.word	0x037ff063
     180:	adds	r3, #1
     182:	.short	0xe7f1
     184:	ldrb	r0, [r0, #18]
     186:	.short	0x2001
     188:	strb	r0, [r3, #27]
     18a:	.short	0x2001
     18c:	ldr	r0, [r6, #36]	; 0x24
     18e:	.short	0x2000
     190:	ldr	r4, [r6, #36]	; 0x24
     192:	movs	r0, #0
     194:	.word	0x8000007f

00000198 <menuGetInt16(short*)>:
#include "menu.h"
#include "mRTC.h"
#include "mAcq.h"

static int menuGetInt16(int16_t *val)
{ char buffer[40];
     198:	push	{r4, lr}
     19a:	.short	0x4604
     19c:	sub	sp, #48	; 0x30
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     19e:	.short	0xf006
     1a0:	cdp2	8, 14, cr2, cr15, cr0, {0}
  while(!Serial.available()) continue;
     1a4:	.word	0x210dd0fb
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
     1a8:	add	r2, sp, #8
     1aa:	movs	r3, #40	; 0x28
     1ac:	ldr	r0, [pc, #52]	; (1e4 <menuGetInt16(short*)+0x4c>)
     1ae:	bl	88a8 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
     1b2:	add	r3, sp, #48	; 0x30
     1b4:	movs	r2, #0
     1b6:	add	r3, r0
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
     1b8:	add	r0, sp, #8
     1ba:	strb.w	r2, [r3, #-40]
     1be:	.short	0xf009
     1c0:	ldc2	6, cr4, [pc, #4]!	; 1c8 <menuGetInt16(short*)+0x30>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     1c4:	add	r0, sp, #8
     1c6:	bl	7054 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     1ca:	ldr	r0, [pc, #24]	; (1e4 <menuGetInt16(short*)+0x4c>)
     1cc:	.word	0xfb98f008
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
     1d0:	add	r0, sp, #8
     1d2:	.short	0xaa01
     1d4:	ldr	r1, [pc, #16]	; (1e8 <menuGetInt16(short*)+0x50>)
     1d6:	bl	9c20 <sscanf>
     1da:	.short	0x9b01
  return 1;
}
     1dc:	movs	r0, #1
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
  buffer[count]=0;
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
     1de:	strh	r3, [r4, #0]
  return 1;
}
     1e0:	add	sp, #48	; 0x30
     1e2:	pop	{r4, pc}
     1e4:	subs	r0, r1, r7
     1e6:	movs	r0, #0
     1e8:	lsrs	r4, r0, #12
     1ea:	movs	r0, #0

000001ec <menuGetInt32(long*)>:

static int menuGetInt32(int32_t *val)
{ char buffer[40];
     1ec:	push	{r4, lr}
     1ee:	mov	r4, r0
     1f0:	sub	sp, #48	; 0x30
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     1f2:	bl	6f80 <usb_serial_available>
  while(!Serial.available()) continue;
     1f6:	.short	0x2800
     1f8:	beq.n	1f2 <menuGetInt32(long*)+0x6>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
     1fa:	.short	0x210d
     1fc:	add	r2, sp, #8
     1fe:	.short	0x2328
     200:	ldr	r0, [pc, #52]	; (238 <menuGetInt32(long*)+0x4c>)
     202:	bl	88a8 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
     206:	.short	0xab0c
     208:	movs	r2, #0
     20a:	.short	0x4403
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
     20c:	add	r0, sp, #8
     20e:	.short	0xf803
     210:	cmp	r4, #40	; 0x28
     212:	.short	0xf009
     214:	ldc2	6, cr4, [r5, #4]
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     218:	.word	0xf006a802
     21c:	vsub.i16	d4, d11, d6
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     220:	bl	8900 <Print::println()>
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
     224:	.word	0xaa01a802
     228:	ldr	r1, [pc, #16]	; (23c <menuGetInt32(long*)+0x50>)
     22a:	.short	0xf009
     22c:	ldc2l	11, cr9, [r9], #4
  return 1;
}
     230:	movs	r0, #1
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
  buffer[count]=0;
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
     232:	.short	0x6023
  return 1;
}
     234:	add	sp, #48	; 0x30
     236:	.short	0xbd10
     238:	subs	r0, r1, r7
     23a:	.short	0x2000
     23c:	lsrs	r4, r0, #12
     23e:	.short	0x2000

00000240 <menuGet3Int(int*, int*, int*)>:

static int menuGet3Int(int *val1, int *val2, int *val3)
{ char buffer[40];
     240:	push	{r4, r5, r6, lr}
     242:	.short	0x4604
     244:	sub	sp, #64	; 0x40
     246:	.short	0x460d
     248:	mov	r6, r2
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     24a:	.short	0xf006
     24c:	cdp2	8, 9, cr2, cr9, cr0, {0}
  while(!Serial.available()) continue;
     250:	.word	0x210dd0fb
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
     254:	add	r2, sp, #24
     256:	movs	r3, #40	; 0x28
     258:	.word	0xf008480f
     25c:	smladx	fp, r5, r0, sl
  buffer[count]=0;
     260:	.word	0x44032200
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
     264:	add	r0, sp, #24
     266:	strb.w	r2, [r3, #-40]
     26a:	.short	0xf009
     26c:	stc2l	6, cr4, [r9, #-4]!
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     270:	.word	0xf006a806
     274:	cdp2	8, 14, cr4, cr15, cr8, {0}
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     278:	.word	0xfb42f008
  Serial.println(buffer);
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
     27c:	add.w	r3, sp, #23
     280:	.word	0x49064622
     284:	str	r3, [sp, #4]
     286:	.short	0xf10d
     288:	lsls	r6, r2, #12
     28a:	add	r0, sp, #24
     28c:	.word	0x95009602
     290:	bl	9c20 <sscanf>
}
     294:	.word	0xbd70b010
     298:	subs	r0, r1, r7
     29a:	.short	0x2000
     29c:	lsrs	r4, r7, #11
     29e:	.short	0x2000

000002a0 <menu1()>:

void menu1(void)
{   // have ':'
     2a0:	push	{r3, lr}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     2a2:	.short	0xf006
     2a4:	cdp2	8, 6, cr2, cr13, cr0, {0}
    while(!Serial.available()) ;
     2a8:	.word	0xe8bdd0fb
    char ch;
    ch=Serial.read();
    if(ch=='x') return;
}
     2ac:	ands	r0, r1
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     2ae:	b.w	7008 <usb_serial_getchar>
     2b2:	.short	0xbf00

000002b4 <menu2()>:

void menu2(void)
{   // have '?'
     2b4:	push	{r4, r5, r6, lr}
     2b6:	.short	0xb088
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     2b8:	bl	6f80 <usb_serial_available>
    datetime_t t;

    while(!Serial.available()) ;
     2bc:	.word	0xd0fb2800
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     2c0:	bl	7008 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
     2c4:	.word	0x2870b2c0
    if(ch=='p') // get parameters
     2c8:	beq.n	2f8 <menu2()+0x44>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
      Serial.print("shift (s) = "); Serial.println(shift);
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    if(ch=='d') // get date
     2ca:	.short	0x2864
     2cc:	beq.n	3b0 <menu2()+0xfc>
    {
      rtc_get_datetime(&t);
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    }
    else if(ch=='t') // get time
     2ce:	cmp	r0, #116	; 0x74
     2d0:	.word	0x2861d07d
    {
      rtc_get_datetime(&t);
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    }
    else if(ch=='a')
     2d4:	beq.w	3ec <menu2()+0x138>
    {
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    }
    else if(ch=='f')
     2d8:	.word	0xd05c2866
    {
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    }
    else if(ch=='s')
     2dc:	cmp	r0, #115	; 0x73
     2de:	.short	0xf000
     2e0:	strh	r4, [r2, #4]
    {
      Serial.print("shift (s) = "); Serial.println(shift);
    }
    else if(ch=='c')
     2e2:	.short	0x2863
     2e4:	bne.n	2ec <menu2()+0x38>
     2e6:	b.n	37a <menu2()+0xc6>
     2e8:	bl	7008 <usb_serial_getchar>
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     2ec:	bl	6f80 <usb_serial_available>
    {
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    while(Serial.available()) ch=Serial.read();
     2f0:	cmp	r0, #0
     2f2:	bne.n	2e8 <menu2()+0x34>

}
     2f4:	add	sp, #32
     2f6:	pop	{r4, r5, r6, pc}
    while(!Serial.available()) ;
    char ch;
    ch=Serial.read();
    if(ch=='p') // get parameters
    {
      rtc_get_datetime(&t);
     2f8:	.word	0xf000a806
     2fc:	uxtab	r9, r7, sp, ror #8
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
                   t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw);
     300:	.word	0xf99d001d
     304:	asrs	r3, r3, #32
     306:	.short	0xf99d
     308:	str	r4, [r3, #0]
     30a:	.short	0xf99d
     30c:	str	r7, [r3, r0]
     30e:	.short	0xf99d
     310:	ands	r6, r3
     312:	.short	0xf99d
     314:	adds	r0, #26
     316:	.short	0xf9bd
     318:	movs	r0, #24
     31a:	.short	0x9001
     31c:	str	r1, [sp, #0]
     31e:	.short	0x9604
     320:	ldr	r1, [pc, #244]	; (418 <menu2()+0x164>)
     322:	.short	0x9503
     324:	str	r4, [sp, #8]
     326:	.short	0x483d
     328:	bl	8934 <Print::printf(char const*, ...)>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     32c:	.word	0x483c210c
     330:	bl	7054 <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
     334:	.word	0x220a493b
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     338:	movs	r3, #0
     33a:	.short	0x6809
     33c:	ldr	r0, [pc, #220]	; (41c <menu2()+0x168>)
     33e:	.short	0xf008
     340:			; <UNDEFINED> instruction: 0xfb094836
	// Print an unsigned number and newline
	size_t println(unsigned int n)			{ return print(n) + println(); }
	// Print a signed number and newline
	size_t println(long n)				{ return print(n) + println(); }
	// Print an unsigned number and newline
	size_t println(unsigned long n)			{ return print(n) + println(); }
     344:	.word	0xfadcf008
     348:	movs	r1, #12
     34a:	.short	0x4837
     34c:	bl	7054 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
     350:	.word	0x48324b36
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
	// Print an unsigned number and newline
	size_t println(unsigned int n)			{ return print(n) + println(); }
	// Print a signed number and newline
	size_t println(long n)				{ return print(n) + println(); }
     354:	ldr	r1, [r3, #0]
     356:	.short	0xf008
     358:			; <UNDEFINED> instruction: 0xfb3d4830
     35c:	.word	0xfad0f008
     360:	movs	r1, #12
     362:	.short	0x4833
     364:	bl	7054 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
     368:	.word	0x482c4b32
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	// Print a signed number
	size_t print(int n)				{ return print((long)n); }
     36c:	ldrsh.w	r1, [r3]
     370:	.word	0xfb30f008
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     374:	ldr	r0, [pc, #164]	; (41c <menu2()+0x168>)
     376:	.short	0xf008
     378:			; <UNDEFINED> instruction: 0xfac3210c
     37c:	.word	0xf006482e
     380:	vselge.f64	d20, d9, d30
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	// Print a signed number
	size_t print(int n)				{ return print((long)n); }
     384:	.word	0x1000f9b3
     388:	ldr	r0, [pc, #144]	; (41c <menu2()+0x168>)
     38a:	.short	0xf008
     38c:			; <UNDEFINED> instruction: 0xfb234823
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     390:	.word	0xfab6f008
     394:	b.n	2ec <menu2()+0x38>
     396:	.short	0x210c
     398:	ldr	r0, [pc, #140]	; (428 <menu2()+0x174>)
     39a:	bl	7054 <usb_serial_write>
    {
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    }
    else if(ch=='f')
    {
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
     39e:	.short	0x4b23
	// Print an unsigned number and newline
	size_t println(unsigned int n)			{ return print(n) + println(); }
	// Print a signed number and newline
	size_t println(long n)				{ return print(n) + println(); }
     3a0:	ldr	r0, [pc, #120]	; (41c <menu2()+0x168>)
     3a2:	.short	0x6819
     3a4:	bl	89d4 <Print::print(long)>
     3a8:	ldr	r0, [pc, #112]	; (41c <menu2()+0x168>)
     3aa:	.short	0xf008
     3ac:			; <UNDEFINED> instruction: 0xfaa9e79d
      Serial.print("shift (s) = "); Serial.println(shift);
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    if(ch=='d') // get date
    {
      rtc_get_datetime(&t);
     3b0:	.word	0xf000a806
     3b4:	ldr??.w	pc, [fp, #2461]	; 0x99d
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
     3b8:	.word	0xf99d001b
     3bc:	adds	r0, #26
     3be:	.short	0x9000
     3c0:	ldrsh.w	r2, [sp, #24]
     3c4:	.word	0x4815491e
     3c8:	bl	8934 <Print::printf(char const*, ...)>
     3cc:	.word	0xa806e78e
    }
    else if(ch=='t') // get time
    {
      rtc_get_datetime(&t);
     3d0:	bl	7ac <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
     3d4:	.word	0x001ff99d
     3d8:	ldrsb.w	r3, [sp, #30]
     3dc:	.word	0xf99d9000
     3e0:	movs	r0, #29
     3e2:	.short	0x4918
     3e4:	ldr	r0, [pc, #52]	; (41c <menu2()+0x168>)
     3e6:	.short	0xf008
     3e8:			; <UNDEFINED> instruction: 0xfaa5e77f
     3ec:	.word	0x480c210c
     3f0:	bl	7054 <usb_serial_write>
    }
    else if(ch=='a')
    {
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
     3f4:	.word	0x2300490b
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     3f8:	movs	r2, #10
     3fa:	.short	0x6809
     3fc:	ldr	r0, [pc, #28]	; (41c <menu2()+0x168>)
     3fe:	.short	0xf008
     400:			; <UNDEFINED> instruction: 0xfaa94806
	// Print an unsigned number and newline
	size_t println(unsigned int n)			{ return print(n) + println(); }
	// Print a signed number and newline
	size_t println(long n)				{ return print(n) + println(); }
	// Print an unsigned number and newline
	size_t println(unsigned long n)			{ return print(n) + println(); }
     404:	.word	0xfa7cf008
     408:	b.n	2ec <menu2()+0x38>
     40a:	.short	0x210c
     40c:	ldr	r0, [pc, #32]	; (430 <menu2()+0x17c>)
     40e:	bl	7054 <usb_serial_write>
    {
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    }
    else if(ch=='s')
    {
      Serial.print("shift (s) = "); Serial.println(shift);
     412:	ldr	r3, [pc, #32]	; (434 <menu2()+0x180>)
     414:	.word	0xbf00e7b6
     418:	lsrs	r0, r1, #12
     41a:	.short	0x2000
     41c:	subs	r0, r1, r7
     41e:	movs	r0, #0
     420:	lsrs	r4, r5, #12
     422:	movs	r0, #0
     424:	movs	r1, #180	; 0xb4
     426:	.short	0x2000
     428:	lsrs	r4, r7, #12
     42a:	.short	0x2000
     42c:	movs	r1, #116	; 0x74
     42e:	.short	0x2000
     430:	lsrs	r4, r1, #13
     432:	movs	r0, #0
     434:	ldrb	r0, [r4, #18]
     436:	movs	r0, #1
     438:	lsrs	r4, r3, #13
     43a:	movs	r0, #0
     43c:	ldrb	r4, [r3, #18]
     43e:	.short	0x2001
     440:	lsrs	r4, r5, #13
     442:	.short	0x2000
     444:	lsrs	r0, r1, #14
     446:	movs	r0, #0

00000448 <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
     448:	.word	0xb084b510
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     44c:	bl	6f80 <usb_serial_available>

    while(!Serial.available()) ;
     450:	cmp	r0, #0
     452:	.short	0xd0fb
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     454:	bl	7008 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
     458:	uxtb	r0, r0
    if(ch=='d') // set date
     45a:	cmp	r0, #100	; 0x64
     45c:	beq.n	496 <menu3()+0x4e>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    } 
    else if(ch=='t') // set time
     45e:	cmp	r0, #116	; 0x74
     460:	beq.n	4aa <menu3()+0x62>
    { int hour,minutes,seconds;
      menuGet3Int(&hour,&minutes,&seconds);
      //
      rtcSetTime(hour,minutes,seconds);
    } 
    else if(ch=='a')
     462:	cmp	r0, #97	; 0x61
     464:	beq.n	4be <menu3()+0x76>
    {
      menuGetInt32((int32_t *)&t_acq);
    }
    else if(ch=='f')
     466:	cmp	r0, #102	; 0x66
     468:	beq.n	4c6 <menu3()+0x7e>
    {
      menuGetInt32(&fsamp);
      acqModifyFrequency(fsamp);
    }
    else if(ch=='s')
     46a:	cmp	r0, #115	; 0x73
     46c:	beq.n	480 <menu3()+0x38>
    {
      menuGetInt16(&shift); if(shift<0) shift=0;
    }
    else if(ch=='c')
     46e:	cmp	r0, #99	; 0x63
     470:	beq.n	476 <menu3()+0x2e>
    {
      menuGetInt16(&proc);
    }
}
     472:	add	sp, #16
     474:	pop	{r4, pc}
    {
      menuGetInt16(&shift); if(shift<0) shift=0;
    }
    else if(ch=='c')
    {
      menuGetInt16(&proc);
     476:	.short	0x4818
     478:	bl	198 <menuGetInt16(short*)>
    }
}
     47c:	.word	0xbd10b004
      menuGetInt32(&fsamp);
      acqModifyFrequency(fsamp);
    }
    else if(ch=='s')
    {
      menuGetInt16(&shift); if(shift<0) shift=0;
     480:	ldr	r4, [pc, #88]	; (4dc <menu3()+0x94>)
     482:	mov	r0, r4
     484:	bl	198 <menuGetInt16(short*)>
     488:	ldrsh.w	r3, [r4]
     48c:	.word	0xdaf02b00
     490:	movs	r3, #0
     492:	.short	0x8023
     494:	b.n	472 <menu3()+0x2a>
    while(!Serial.available()) ;
    char ch;
    ch=Serial.read();
    if(ch=='d') // set date
    { int year,month,day;
      menuGet3Int(&year,&month,&day);
     496:	.short	0xaa03
     498:	add	r1, sp, #8
     49a:	add	r0, sp, #4
     49c:	bl	240 <menuGet3Int(int*, int*, int*)>

      rtcSetDate(year,month,day);
     4a0:	add	r0, sp, #4
     4a2:	ldmia	r0, {r0, r1, r2}
     4a4:	bl	7c0 <rtcSetDate(int, int, int)>
     4a8:	b.n	472 <menu3()+0x2a>
    } 
    else if(ch=='t') // set time
    { int hour,minutes,seconds;
      menuGet3Int(&hour,&minutes,&seconds);
     4aa:	add	r2, sp, #12
     4ac:	add	r1, sp, #8
     4ae:	add	r0, sp, #4
     4b0:	.word	0xfec6f7ff
      //
      rtcSetTime(hour,minutes,seconds);
     4b4:	add	r0, sp, #4
     4b6:	ldmia	r0, {r0, r1, r2}
     4b8:	bl	7f0 <rtcSetTime(int, int, int)>
     4bc:	b.n	472 <menu3()+0x2a>
    } 
    else if(ch=='a')
    {
      menuGetInt32((int32_t *)&t_acq);
     4be:	ldr	r0, [pc, #32]	; (4e0 <menu3()+0x98>)
     4c0:	bl	1ec <menuGetInt32(long*)>
     4c4:	b.n	472 <menu3()+0x2a>
    }
    else if(ch=='f')
    {
      menuGetInt32(&fsamp);
     4c6:	ldr	r4, [pc, #28]	; (4e4 <menu3()+0x9c>)
     4c8:	mov	r0, r4
     4ca:	bl	1ec <menuGetInt32(long*)>
      acqModifyFrequency(fsamp);
     4ce:	ldr	r0, [r4, #0]
     4d0:	bl	e5c <acqModifyFrequency(unsigned long)>
     4d4:	b.n	472 <menu3()+0x2a>
     4d6:	.short	0xbf00
     4d8:	ldrb	r4, [r3, #18]
     4da:	movs	r0, #1
     4dc:	.word	0x20017ca0
     4e0:	movs	r1, #180	; 0xb4
     4e2:	movs	r0, #0
     4e4:	movs	r1, #116	; 0x74
     4e6:	movs	r0, #0

000004e8 <time2date(unsigned long, datetime_t*)>:
  #define SECS_PER_DAY  ((uint32_t)(SECS_PER_HOUR * 24UL))

  static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
  void time2date(uint32_t time, datetime_t *tm)
  {
     4e8:	.word	0x4ff0e92d
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     4ec:	ldr	r6, [pc, #384]	; (670 <time2date(unsigned long, datetime_t*)+0x188>)

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     4ee:	movs	r4, #0

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     4f0:	ldr	r3, [pc, #384]	; (674 <time2date(unsigned long, datetime_t*)+0x18c>)
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     4f2:	umull	r2, r6, r6, r0
     4f6:	ldr	r2, [pc, #384]	; (678 <time2date(unsigned long, datetime_t*)+0x190>)

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     4f8:	umull	r7, r5, r3, r0
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     4fc:	.word	0x8184f8df
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     500:	lsrs	r6, r6, #16
     502:	umull	r7, r2, r2, r0

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     506:	lsrs	r5, r5, #5
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     508:	ldr.w	lr, [pc, #380]	; 688 <time2date(unsigned long, datetime_t*)+0x1a0>

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     50c:	.word	0x0ad21d37
    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
     510:	umull	ip, r3, r3, r5
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     514:	umull	r8, r9, r7, r8
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     518:	mov.w	r8, #100	; 0x64
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     51c:	umull	ip, lr, lr, r2
    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
     520:	lsrs	r3, r3, #5
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     522:	rsb	ip, r9, r7
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     526:	mov.w	lr, lr, lsr #4

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     52a:	add.w	ip, r9, ip, lsr #1
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     52e:	movw	r9, #365	; 0x16d
    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
     532:	rsb	r3, r3, r3, lsl #4
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     536:	mov.w	ip, ip, lsr #2
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     53a:	add.w	lr, lr, lr, lsl #1

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     53e:	.short	0xebcc
     540:	lsrs	r4, r1, #19
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     542:	sub.w	lr, r2, lr, lsl #3

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
     546:	mov	r2, r4
    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
     548:	sub.w	r3, r5, r3, lsl #2
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     54c:	.word	0x0707ebcc

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     550:	rsb	r5, r5, r5, lsl #4
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     554:	strb.w	lr, [r1, #5]

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     558:	mov.w	ip, #400	; 0x190
     55c:	ldr.w	lr, [pc, #284]	; 67c <time2date(unsigned long, datetime_t*)+0x194>

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     560:	sub.w	r0, r0, r5, lsl #2
    tm->min  = time % 60; time /= 60; // now it is hours
     564:	strb	r3, [r1, #6]
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     566:	strb	r7, [r1, #4]

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     568:	strb	r0, [r1, #7]
     56a:	uxtb	r3, r4

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     56c:	movw	r5, #365	; 0x16d
     570:	addw	r3, r3, #1970	; 0x7b2
     574:	smull	r0, sl, lr, r3
     578:	ands.w	r7, r3, #3
     57c:	.word	0x70e3ea4f
     580:	rsb	fp, r0, sl, asr #5
     584:	.word	0xebc0d10d
     588:	asrs	r2, r5, #3
     58a:	.short	0xfb08
     58c:	subs	r3, #27
     58e:	.short	0xf44f
     590:	strb	r7, [r6, #22]
     592:	.short	0xfb0c
     594:	adds	r0, #16
     596:	.short	0xf1bb
     598:	lsrs	r0, r0, #28
     59a:	.short	0xd102
     59c:	cmp	r0, #0
     59e:	.short	0xbf18
     5a0:	movne	r5, r9
     5a2:	.short	0x442a
     5a4:	adds	r4, #1
     5a6:	.short	0x4296
     5a8:	bcs.n	56a <time2date(unsigned long, datetime_t*)+0x82>
      year++;
    }
    tm->year = year+YEAR0;
     5aa:	.short	0x800b
    
    days -= LEAP_YEAR(year) ? 366 : 365;
     5ac:	cbnz	r7, 5ca <time2date(unsigned long, datetime_t*)+0xe2>
     5ae:	.short	0x4c33
     5b0:	asrs	r0, r3, #31
     5b2:	.short	0xf04f
     5b4:	lsrs	r4, r4, #25
     5b6:	.short	0xfb84
     5b8:	strb	r3, [r0, r0]
     5ba:	.short	0xebc0
     5bc:	asrs	r4, r4, #21
     5be:	mls	r5, lr, r5, r3
     5c2:	cbz	r5, 62e <time2date(unsigned long, datetime_t*)+0x146>
     5c4:	mov.w	r5, #366	; 0x16e
     5c8:	b.n	5d0 <time2date(unsigned long, datetime_t*)+0xe8>
     5ca:	movw	r5, #365	; 0x16d
     5ce:	asrs	r0, r3, #31
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
      if (month==1) { // february
        if (LEAP_YEAR(year)) {
     5d0:	.word	0x1b524c2a
     5d4:	mov.w	r8, #100	; 0x64
     5d8:	mov.w	r5, #400	; 0x190
     5dc:	smull	r4, lr, r4, r3
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    time  -= days; // now it is days in this year, starting at 0
     5e0:	subs	r2, r6, r2
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
      if (month==1) { // february
        if (LEAP_YEAR(year)) {
     5e2:	movs	r4, #1
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
     5e4:	ldr	r6, [pc, #152]	; (680 <time2date(unsigned long, datetime_t*)+0x198>)
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
      if (month==1) { // february
        if (LEAP_YEAR(year)) {
     5e6:	rsb	ip, r0, lr, asr #5
     5ea:	rsb	lr, r0, lr, asr #7
     5ee:	.short	0x2000
     5f0:	mls	ip, r8, ip, r3
     5f4:	.word	0x3e1efb05
     5f8:	b.n	600 <time2date(unsigned long, datetime_t*)+0x118>
     5fa:	.short	0x3401
     5fc:	adds	r0, #1
     5fe:	.short	0xb2e4
    
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
      if (month==1) { // february
     600:	cmp	r0, #1
     602:	.short	0xb2c5
     604:	beq.n	648 <time2date(unsigned long, datetime_t*)+0x160>
        }
      } else {
        monthLength = monthDays[month];
      }
      
      if (time >= monthLength) {
     606:	.short	0x5d83
     608:	cmp	r3, r2
     60a:	bhi.n	620 <time2date(unsigned long, datetime_t*)+0x138>
    time  -= days; // now it is days in this year, starting at 0
    
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
     60c:	.word	0xeba22c0c
      } else {
        monthLength = monthDays[month];
      }
      
      if (time >= monthLength) {
        time -= monthLength;
     610:	lsls	r3, r0, #8
    time  -= days; // now it is days in this year, starting at 0
    
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
     612:	.short	0xd1f2
     614:	movs	r5, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
     616:	adds	r2, #1
        time -= monthLength;
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
     618:	strb	r5, [r1, #2]
    tm->day = time + 1;     // day of month
     61a:	strb	r2, [r1, #3]
  }
     61c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     620:	.word	0x32013501
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
     624:	sxtb	r5, r5
     626:	.short	0x70ca
        time -= monthLength;
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
     628:	strb	r5, [r1, #2]
    tm->day = time + 1;     // day of month
  }
     62a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
     62e:	rsb	r4, r0, r4, asr #7
     632:	mov.w	lr, #400	; 0x190
     636:	movw	r5, #365	; 0x16d
     63a:	mls	r4, lr, r4, r3
     63e:	cmp	r4, #0
     640:	it	eq
     642:	moveq.w	r5, #366	; 0x16e
     646:	b.n	5d0 <time2date(unsigned long, datetime_t*)+0xe8>
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
      if (month==1) { // february
        if (LEAP_YEAR(year)) {
     648:	cbnz	r7, 662 <time2date(unsigned long, datetime_t*)+0x17a>
     64a:	cmp.w	ip, #0
     64e:	bne.n	66a <time2date(unsigned long, datetime_t*)+0x182>
     650:	cmp.w	lr, #0
     654:	ite	ne
     656:	movne	r3, #28
     658:	moveq	r3, #29
        }
      } else {
        monthLength = monthDays[month];
      }
      
      if (time >= monthLength) {
     65a:	cmp	r2, r3
     65c:	bcc.n	666 <time2date(unsigned long, datetime_t*)+0x17e>
        time -= monthLength;
     65e:	subs	r2, r2, r3
     660:	b.n	5fa <time2date(unsigned long, datetime_t*)+0x112>
     662:	movs	r3, #28
     664:	b.n	65a <time2date(unsigned long, datetime_t*)+0x172>
        }
      } else {
        monthLength = monthDays[month];
      }
      
      if (time >= monthLength) {
     666:	movs	r5, #2
     668:	b.n	616 <time2date(unsigned long, datetime_t*)+0x12e>
     66a:	movs	r3, #29
     66c:	b.n	65a <time2date(unsigned long, datetime_t*)+0x172>
     66e:	nop
     670:	.word	0xc22e4507
     674:	.word	0x88888889
     678:	.word	0x91a2b3c5
     67c:	.word	0x51eb851f
     680:	.word	0x2000039c
     684:	.word	0x24924925
     688:	.word	0xaaaaaaab

0000068c <date2time(datetime_t*)>:
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
  }

  uint32_t date2time(datetime_t *tm)
  {
     68c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
     690:	ldrb	r4, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
     692:	ldr	r2, [pc, #260]	; (798 <date2time(datetime_t*)+0x10c>)
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
     694:	adds	r4, #78	; 0x4e
     696:	uxtb.w	lr, r4
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
     69a:	mul.w	r2, r2, lr
    for (ii = 0; ii < year; ii++) {
     69e:	cmp.w	lr, #0
     6a2:	beq.n	6f6 <date2time(datetime_t*)+0x6a>
     6a4:	movw	r3, #1971	; 0x7b3
     6a8:	addw	r7, lr, #1970	; 0x7b2
      if (LEAP_YEAR(ii)) {
     6ac:	ldr	r6, [pc, #236]	; (79c <date2time(datetime_t*)+0x110>)
     6ae:	mov.w	ip, #100	; 0x64

    uint8_t year;
    year=tm->year-YEAR0;
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
     6b2:	cmp	r3, r7
      if (LEAP_YEAR(ii)) {
     6b4:	mov.w	r8, #400	; 0x190
     6b8:	smull	r1, r4, r6, r3
     6bc:	mov.w	r1, r3, asr #31
     6c0:	rsb	r5, r1, r4, asr #5

    uint8_t year;
    year=tm->year-YEAR0;
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
     6c4:	beq.n	6f6 <date2time(datetime_t*)+0x6a>
      if (LEAP_YEAR(ii)) {
     6c6:	tst.w	r3, #3
     6ca:	mls	r5, ip, r5, r3
     6ce:	bne.n	6e4 <date2time(datetime_t*)+0x58>
     6d0:	rsb	r1, r1, r4, asr #7
     6d4:	cbnz	r5, 6dc <date2time(datetime_t*)+0x50>
     6d6:	mls	r1, r8, r1, r3
     6da:	cbnz	r1, 6e4 <date2time(datetime_t*)+0x58>
        seconds += SECS_PER_DAY;   // add extra days for leap years
     6dc:	add.w	r2, r2, #86016	; 0x15000
     6e0:	add.w	r2, r2, #384	; 0x180
     6e4:	adds	r3, #1
    uint8_t year;
    year=tm->year-YEAR0;
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
      if (LEAP_YEAR(ii)) {
     6e6:	smull	r1, r4, r6, r3

    uint8_t year;
    year=tm->year-YEAR0;
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
     6ea:	cmp	r3, r7
      if (LEAP_YEAR(ii)) {
     6ec:	mov.w	r1, r3, asr #31
     6f0:	rsb	r5, r1, r4, asr #5

    uint8_t year;
    year=tm->year-YEAR0;
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
     6f4:	bne.n	6c6 <date2time(datetime_t*)+0x3a>
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
     6f6:	ldrsb.w	r7, [r0, #2]
     6fa:	cmp	r7, #1
     6fc:	ble.n	75c <date2time(datetime_t*)+0xd0>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
     6fe:	addw	r4, lr, #1970	; 0x7b2
     702:	ldr	r6, [pc, #152]	; (79c <date2time(datetime_t*)+0x110>)
     704:	mov.w	r5, #400	; 0x190
     708:	mov.w	r8, #100	; 0x64
     70c:	smull	r3, r6, r6, r4
     710:	asrs	r3, r4, #31
     712:	and.w	ip, r4, #3
     716:	ldr	r1, [pc, #136]	; (7a0 <date2time(datetime_t*)+0x114>)
     718:	rsb	lr, r3, r6, asr #5
     71c:	rsb	r6, r3, r6, asr #7
     720:	movs	r3, #1
     722:	mls	lr, r8, lr, r4
     726:	mls	r6, r5, r6, r4
        seconds += SECS_PER_DAY * 29;
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
     72a:	ldr	r5, [pc, #120]	; (7a4 <date2time(datetime_t*)+0x118>)
     72c:	b.n	73c <date2time(datetime_t*)+0xb0>
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
     72e:	adds	r3, #1
      if ( (ii == 2) && LEAP_YEAR(year)) { 
        seconds += SECS_PER_DAY * 29;
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
     730:	ldrb	r4, [r1, #0]
     732:	adds	r1, #1
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
     734:	cmp	r3, r7
      if ( (ii == 2) && LEAP_YEAR(year)) { 
        seconds += SECS_PER_DAY * 29;
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
     736:	mla	r2, r5, r4, r2
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
     73a:	beq.n	75c <date2time(datetime_t*)+0xd0>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
     73c:	cmp	r3, #2
     73e:	bne.n	72e <date2time(datetime_t*)+0xa2>
     740:	cmp.w	ip, #0
     744:	bne.n	72e <date2time(datetime_t*)+0xa2>
     746:	cmp.w	lr, #0
     74a:	beq.n	78a <date2time(datetime_t*)+0xfe>
        seconds += SECS_PER_DAY * 29;
     74c:	add.w	r2, r2, #2490368	; 0x260000
     750:	add.w	r2, r2, #15232	; 0x3b80
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
     754:	adds	r3, #1
     756:	adds	r1, #1
     758:	cmp	r3, r7
     75a:	bne.n	73c <date2time(datetime_t*)+0xb0>
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    seconds+= tm->sec;
    return seconds; 
     75c:	ldrsb.w	r3, [r0, #6]
     760:	mov.w	r6, #3600	; 0xe10
     764:	ldrsb.w	r5, [r0, #5]
     768:	rsb	r3, r3, r3, lsl #4
     76c:	ldrsb.w	r4, [r0, #7]
     770:	ldrsb.w	r1, [r0, #3]
     774:	lsls	r3, r3, #2
     776:	ldr	r0, [pc, #44]	; (7a4 <date2time(datetime_t*)+0x118>)
     778:	subs	r1, #1
     77a:	mla	r3, r6, r5, r3
     77e:	add	r3, r4
     780:	mla	r0, r0, r1, r3
  }
     784:	add	r0, r2
     786:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
      if ( (ii == 2) && LEAP_YEAR(year)) { 
     78a:	cmp	r6, #0
     78c:	bne.n	72e <date2time(datetime_t*)+0xa2>
        seconds += SECS_PER_DAY * 29;
     78e:	add.w	r2, r2, #2490368	; 0x260000
     792:	add.w	r2, r2, #15232	; 0x3b80
     796:	b.n	754 <date2time(datetime_t*)+0xc8>
     798:	.word	0x01e13380
     79c:	.word	0x51eb851f
     7a0:	.word	0x2000039c
     7a4:	.word	0x00015180

000007a8 <rtc_setup(unsigned char, unsigned char)>:
  }

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;
  }
     7a8:	movs	r0, #1
     7aa:	bx	lr

000007ac <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
     7ac:	push	{r4, lr}
     7ae:	mov	r4, r0
    time2date(rtc_get(), t);
     7b0:	bl	8028 <rtc_get>
     7b4:	mov	r1, r4
     7b6:	bl	4e8 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
     7ba:	movs	r0, #1
     7bc:	pop	{r4, pc}
     7be:	nop

000007c0 <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
     7c0:	push	{r4, r5, r6, lr}
     7c2:	sub	sp, #8
     7c4:	mov	r4, r2
     7c6:	mov	r5, r1
     7c8:	mov	r6, r0
    return 1;
  }

  bool rtc_get_datetime(datetime_t *t)
  {
    time2date(rtc_get(), t);
     7ca:	bl	8028 <rtc_get>
     7ce:	mov	r1, sp
     7d0:	bl	4e8 <time2date(unsigned long, datetime_t*)>
    return 1;
  }

  bool rtc_set_datetime(datetime_t *t)
  {
    rtc_set(date2time(t));
     7d4:	mov	r0, sp
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    rtc_get_datetime(&t);
    t.year=year;
     7d6:	strh.w	r6, [sp]
    t.month=month;
     7da:	strb.w	r5, [sp, #2]
    t.day=day;
     7de:	strb.w	r4, [sp, #3]
    return 1;
  }

  bool rtc_set_datetime(datetime_t *t)
  {
    rtc_set(date2time(t));
     7e2:	bl	68c <date2time(datetime_t*)>
     7e6:	bl	8058 <rtc_set>
    rtc_get_datetime(&t);
    t.year=year;
    t.month=month;
    t.day=day;
    rtc_set_datetime(&t);
  }
     7ea:	add	sp, #8
     7ec:	pop	{r4, r5, r6, pc}
     7ee:	nop

000007f0 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
     7f0:	push	{r4, r5, r6, lr}
     7f2:	sub	sp, #8
     7f4:	mov	r4, r2
     7f6:	mov	r5, r1
     7f8:	mov	r6, r0
    return 1;
  }

  bool rtc_get_datetime(datetime_t *t)
  {
    time2date(rtc_get(), t);
     7fa:	bl	8028 <rtc_get>
     7fe:	mov	r1, sp
     800:	bl	4e8 <time2date(unsigned long, datetime_t*)>
    return 1;
  }

  bool rtc_set_datetime(datetime_t *t)
  {
    rtc_set(date2time(t));
     804:	mov	r0, sp
  }

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    rtc_get_datetime(&t);
    t.hour=hour;
     806:	strb.w	r6, [sp, #5]
    t.min=minutes;
     80a:	strb.w	r5, [sp, #6]
    t.sec=seconds;
     80e:	strb.w	r4, [sp, #7]
    return 1;
  }

  bool rtc_set_datetime(datetime_t *t)
  {
    rtc_set(date2time(t));
     812:	bl	68c <date2time(datetime_t*)>
     816:	bl	8058 <rtc_set>
    rtc_get_datetime(&t);
    t.hour=hour;
    t.min=minutes;
    t.sec=seconds;
    rtc_set_datetime(&t);
  }
     81a:	add	sp, #8
     81c:	pop	{r4, r5, r6, pc}
     81e:	nop

00000820 <compress(void*)>:
int32_t tempData0[NCH];

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
     820:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     824:	sub	sp, #12
     826:	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
     828:	bl	8028 <rtc_get>
     82c:	mov	fp, r0
  uint32_t t1;
  t1 = micros();
     82e:	bl	7e04 <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy reference (first sample of all channels)
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     832:	ldr	r2, [pc, #656]	; (ac4 <compress(void*)+0x2a4>)
     834:	ldr	r3, [r4, #0]
     836:	mov	r1, r4
     838:	ldr	r6, [r2, #0]
     83a:	add.w	r7, r4, #508	; 0x1fc
     83e:	ldr	r2, [pc, #648]	; (ac8 <compress(void*)+0x2a8>)
     840:	mov	r4, r6
     842:	mov	r5, r6
     844:	str	r3, [r6, #0]
     846:	str	r3, [r2, #0]
  
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);
     848:	ldr.w	r3, [r1, #4]!
     84c:	ldr.w	r2, [r1, #-4]
     850:	cmp	r1, r7
     852:	sub.w	r3, r3, r2
     856:	str.w	r3, [r5, #4]!
     85a:	bne.n	848 <compress(void*)+0x28>
     85c:	add.w	r1, r6, #508	; 0x1fc
     860:	movs	r2, #0

  // find maximum in filtered data
  int32_t mx = 0;
  for (int ii = NCH; ii < NSAMP; ii++)
  {
    int32_t dd =  tempDatai[ii];
     862:	ldr.w	r5, [r4, #4]!
     866:	eor.w	r3, r5, r5, asr #31
     86a:	sub.w	r3, r3, r5, asr #31
     86e:	cmp	r2, r3
     870:	it	lt
     872:	movlt	r2, r3
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);

  // find maximum in filtered data
  int32_t mx = 0;
  for (int ii = NCH; ii < NSAMP; ii++)
     874:	cmp	r4, r1
     876:	bne.n	862 <compress(void*)+0x42>
     878:	mov.w	lr, #2
    if(dd>mx) mx = dd;
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     87c:	movs	r5, #1
     87e:	b.n	88c <compress(void*)+0x6c>
     880:	add.w	lr, lr, #1
     884:	cmp.w	lr, #24
     888:	beq.w	a16 <compress(void*)+0x1f6>
     88c:	add.w	r4, lr, #4294967295
     890:	movs	r1, #1
     892:	lsl.w	r3, r5, r4
     896:	cmp	r2, r3
     898:	bge.n	880 <compress(void*)+0x60>
     89a:	mov.w	r3, lr, lsl #2
     89e:	lsl.w	r1, r1, lr
     8a2:	adds	r2, r3, #7
     8a4:	add.w	r8, r3, #8
     8a8:	subs	r5, r1, #1
     8aa:	adds	r3, #1
     8ac:	str	r2, [sp, #4]
     8ae:	str	r3, [sp, #0]
  // compression factor (32/nb)
  proc_stat[nb-1]++;
     8b0:	ldr	r6, [pc, #536]	; (acc <compress(void*)+0x2ac>)
  if((uint32_t)nb>max_stat) max_stat=nb;
     8b2:	ldr	r7, [pc, #540]	; (ad0 <compress(void*)+0x2b0>)

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
  // compression factor (32/nb)
  proc_stat[nb-1]++;
     8b4:	ldr.w	r2, [r6, r4, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
     8b8:	ldr	r1, [r7, #0]

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
  // compression factor (32/nb)
  proc_stat[nb-1]++;
     8ba:	adds	r2, #1
  if((uint32_t)nb>max_stat) max_stat=nb;
     8bc:	cmp	r1, lr

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
  // compression factor (32/nb)
  proc_stat[nb-1]++;
     8be:	str.w	r2, [r6, r4, lsl #2]
     8c2:	ldr	r4, [pc, #528]	; (ad4 <compress(void*)+0x2b4>)
  if((uint32_t)nb>max_stat) max_stat=nb;
     8c4:	it	cc
     8c6:	strcc.w	lr, [r7]
    if(dd>mx) mx = dd;
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     8ca:	mov	r9, r4
     8cc:	add.w	r7, r4, #508	; 0x1fc
     8d0:	mov	r2, r4
  proc_stat[nb-1]++;
  if((uint32_t)nb>max_stat) max_stat=nb;

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }
     8d2:	ldr.w	r3, [r2, #4]!
     8d6:	ands	r3, r5
     8d8:	cmp	r2, r7
     8da:	str	r3, [r2, #0]
     8dc:	bne.n	8d2 <compress(void*)+0xb2>
     8de:	ldr	r6, [pc, #504]	; (ad8 <compress(void*)+0x2b8>)

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     8e0:	movs	r3, #0
     8e2:	add.w	r5, r6, #512	; 0x200
  proc_stat[nb-1]++;
  if((uint32_t)nb>max_stat) max_stat=nb;

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }
     8e6:	mov	r1, r6

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     8e8:	str.w	r3, [r1, #4]!
     8ec:	cmp	r1, r5
     8ee:	mov.w	r2, #0
     8f2:	bne.n	8e8 <compress(void*)+0xc8>

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
     8f4:	ldr	r5, [pc, #484]	; (adc <compress(void*)+0x2bc>)
     8f6:	mov.w	sl, #2779096485	; 0xa5a5a5a5
  *iptr++ = nb | shift<<16;
     8fa:	ldr	r1, [pc, #484]	; (ae0 <compress(void*)+0x2c0>)
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
     8fc:	ldr	r3, [sp, #0]
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
     8fe:	ldrsh.w	ip, [r1]
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     902:	mov	r1, r2
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
     904:	str	r3, [r5, #20]
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
     906:	movs	r3, #1

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
     908:	str.w	fp, [r5, #8]
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
     90c:	orr.w	ip, lr, ip, lsl #16
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;

  // pack data
  // 
  int nx = MBIT;
     910:	mov.w	fp, #32
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
     914:	str	r3, [r5, #16]
  *iptr++ = NCH+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     916:	ldr.w	r3, [r9]
  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
     91a:	str	r0, [r5, #12]
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     91c:	movs	r0, #7
     91e:	str	r3, [r5, #24]
     920:	mov	r3, fp
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
     922:	str.w	ip, [r5, #4]
    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
     926:	str.w	sl, [r5]
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     92a:	str.w	r2, [r9]
     92e:	b.n	942 <compress(void*)+0x122>
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NSAMP; ii ++)
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
     930:	ldr.w	r1, [r5, r0, lsl #2]
     934:	orrs	r2, r1
     936:	str.w	r2, [r5, r0, lsl #2]
  outData[kk++] = tempData[0]; tempData[0] = 0;

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NSAMP; ii ++)
     93a:	cmp	r4, r7
     93c:	beq.n	972 <compress(void*)+0x152>
     93e:	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
     942:	rsb	r3, lr, r3
      if(nx > 0)
     946:	cmp	r3, #0
      {   outData[kk] |= (tempData[ii] << nx);
     948:	lsl.w	r2, r1, r3
  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NSAMP; ii ++)
  {   nx -= nb;
      if(nx > 0)
     94c:	bgt.n	930 <compress(void*)+0x110>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     94e:	rsb	r2, r3, #0
     952:	add.w	r9, r0, #1
          nx += MBIT;
     956:	add.w	r3, r3, #32
  for (int ii = 0; ii < NSAMP; ii ++)
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
      }
      else if(nx==0) 
     95a:	bne.n	9a8 <compress(void*)+0x188>
      {   outData[kk++] |= tempData[ii];
     95c:	ldr.w	r2, [r5, r0, lsl #2]
  outData[kk++] = tempData[0]; tempData[0] = 0;

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NSAMP; ii ++)
     960:	cmp	r4, r7
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
      }
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
     962:	mov.w	r3, #32
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
      }
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
     966:	orr.w	r1, r1, r2
     96a:	str.w	r1, [r5, r0, lsl #2]
     96e:	mov	r0, r9
  outData[kk++] = tempData[0]; tempData[0] = 0;

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NSAMP; ii ++)
     970:	bne.n	93e <compress(void*)+0x11e>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBLOCK)
     972:	ldr	r4, [pc, #368]	; (ae4 <compress(void*)+0x2c4>)
     974:	ldr.w	lr, [r4]
     978:	add.w	r3, lr, r8
     97c:	cmp	r3, #128	; 0x80
     97e:	bgt.n	9c2 <compress(void*)+0x1a2>
     980:	ldr	r2, [pc, #356]	; (ae8 <compress(void*)+0x2c8>)
     982:	add.w	r0, lr, #1
     986:	movs	r3, #0
     988:	add.w	r2, r2, lr, lsl #2
     98c:	subs	r2, #4
     98e:	adds	r5, r0, r3
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     990:	adds	r3, #1
     992:	ldr.w	r1, [r6, #4]!
     996:	cmp	r3, r8
     998:	str.w	r1, [r2, #4]!
     99c:	blt.n	98e <compress(void*)+0x16e>

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
  int ret=1;
     99e:	movs	r0, #1
     9a0:	str	r5, [r4, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     9a2:	add	sp, #12
     9a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     9a8:	lsr.w	ip, r1, r2
     9ac:	ldr.w	r2, [r5, r0, lsl #2]
          nx += MBIT;
          outData[kk] = (tempData[ii] << nx);
     9b0:	lsls	r1, r3
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     9b2:	orr.w	r2, ip, r2
     9b6:	str.w	r2, [r5, r0, lsl #2]
     9ba:	mov	r0, r9
          nx += MBIT;
          outData[kk] = (tempData[ii] << nx);
     9bc:	str.w	r1, [r5, r9, lsl #2]
     9c0:	b.n	93a <compress(void*)+0x11a>

  if ((nout + ndat) <= NBLOCK)
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
  }
  else if ((nout + NH) > NBLOCK) //avoid partial header (special case)
     9c2:	cmp.w	lr, #122	; 0x7a
     9c6:	ble.n	a2a <compress(void*)+0x20a>
  {
      while(nout<NBLOCK) dout[nout++] = 0; // fill rest of block with zero
     9c8:	cmp.w	lr, #127	; 0x7f
     9cc:	bgt.n	9e6 <compress(void*)+0x1c6>
     9ce:	ldr	r3, [pc, #280]	; (ae8 <compress(void*)+0x2c8>)
     9d0:	movs	r1, #0
     9d2:	add.w	r2, r3, lr, lsl #2
     9d6:	add.w	r3, r3, #512	; 0x200
     9da:	str.w	r1, [r2], #4
     9de:	cmp	r2, r3
     9e0:	bne.n	9da <compress(void*)+0x1ba>
     9e2:	movs	r3, #128	; 0x80
     9e4:	str	r3, [r4, #0]
      // store data
      if(!pushData(dout)) ret = 0;
     9e6:	ldr	r0, [pc, #256]	; (ae8 <compress(void*)+0x2c8>)
     9e8:	bl	a8 <pushData(unsigned long*)>

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
  int ret=1;
     9ec:	adds	r0, #0
     9ee:	ldr	r2, [pc, #252]	; (aec <compress(void*)+0x2cc>)
      // store data
      if(!pushData(dout)) ret = 0;
      //
      // store data in next block
      nout=0;
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     9f0:	mov.w	r3, #0

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
  int ret=1;
     9f4:	it	ne
     9f6:	movne	r0, #1
      // store data
      if(!pushData(dout)) ret = 0;
      //
      // store data in next block
      nout=0;
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     9f8:	adds	r3, #1
     9fa:	ldr.w	r1, [r6, #4]!
     9fe:	cmp	r3, r8
     a00:	str.w	r1, [r2, #4]!
     a04:	blt.n	9f8 <compress(void*)+0x1d8>
     a06:	mov	r3, r8
     a08:	cmp	r3, #1
     a0a:	it	lt
     a0c:	movlt	r3, #1
     a0e:	str	r3, [r4, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     a10:	add	sp, #12
     a12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a16:	movs	r3, #97	; 0x61
     a18:	mov.w	r8, #104	; 0x68
     a1c:	mvn.w	r5, #4278190080	; 0xff000000
     a20:	movs	r4, #23
     a22:	str	r3, [sp, #0]
     a24:	movs	r3, #103	; 0x67
     a26:	str	r3, [sp, #4]
     a28:	b.n	8b0 <compress(void*)+0x90>
     a2a:	ldr	r7, [pc, #188]	; (ae8 <compress(void*)+0x2c8>)
      int ii=0;
      int nr;
      nr = NBLOCK-nout;  //remaining data
      uint32_t *iptr = (uint32_t *) outData;
      // correct header
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     a2c:	rsb	r2, lr, #122	; 0x7a
     a30:	ldr	r1, [r5, #20]
     a32:	add.w	r3, r7, lr, lsl #2
     a36:	add.w	r0, r7, #508	; 0x1fc
     a3a:	orr.w	r1, r2, r1, lsl #16
     a3e:	subs	r3, #4
     a40:	str	r1, [r5, #20]

      while (nout < NBLOCK) dout[nout++] = outData[ii++];
     a42:	ldr.w	r2, [r6, #4]!
     a46:	str.w	r2, [r3, #4]!
     a4a:	cmp	r3, r0
     a4c:	bne.n	a42 <compress(void*)+0x222>
     a4e:	movs	r3, #128	; 0x80
      // store data
      if(!pushData(dout)) ret = 0;
     a50:	ldr	r0, [pc, #148]	; (ae8 <compress(void*)+0x2c8>)
     a52:	rsb	r6, lr, r3
     a56:	str	r3, [r4, #0]
     a58:	bl	a8 <pushData(unsigned long*)>
      //
      // store rest in next block
      nr=ndat0-ii; // for header
      // add blockHeader continuation
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a5c:	ldr	r3, [sp, #4]
     a5e:	ldr	r2, [r5, #20]

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
  int ret=1;
     a60:	adds	r0, #0
      if(!pushData(dout)) ret = 0;
      //
      // store rest in next block
      nr=ndat0-ii; // for header
      // add blockHeader continuation
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a62:	sub.w	r1, r3, r6
     a66:	ldr	r3, [pc, #136]	; (af0 <compress(void*)+0x2d0>)
     a68:	ldr.w	ip, [pc, #124]	; ae8 <compress(void*)+0x2c8>

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
  int ret=1;
     a6c:	it	ne
     a6e:	movne	r0, #1
      if(!pushData(dout)) ret = 0;
      //
      // store rest in next block
      nr=ndat0-ii; // for header
      // add blockHeader continuation
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a70:	ands	r3, r2
     a72:	mov	r2, ip
     a74:	orrs	r1, r3
     a76:	str	r1, [r5, #20]
     a78:	ldr	r5, [pc, #96]	; (adc <compress(void*)+0x2bc>)
     a7a:	mov	r3, r5
     a7c:	add.w	lr, r5, #24
      // copy first header
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a80:	ldr.w	r1, [r3], #4
     a84:	cmp	r3, lr
     a86:	str.w	r1, [r2], #4
     a8a:	bne.n	a80 <compress(void*)+0x260>
     a8c:	movs	r3, #6
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
     a8e:	cmp	r6, r8
     a90:	str	r3, [r4, #0]
     a92:	bge.n	9a2 <compress(void*)+0x182>
     a94:	add.w	r1, r8, #5
     a98:	add.w	r3, r5, r6, lsl #2
     a9c:	ldr	r2, [pc, #84]	; (af4 <compress(void*)+0x2d4>)
     a9e:	subs	r1, r1, r6
     aa0:	subs	r3, #4
     aa2:	add.w	r7, r7, r1, lsl #2
     aa6:	ldr.w	r1, [r3, #4]!
     aaa:	str.w	r1, [r2, #4]!
     aae:	cmp	r2, r7
     ab0:	bne.n	aa6 <compress(void*)+0x286>
     ab2:	add.w	r8, r8, #6
     ab6:	rsb	r3, r6, r8
     aba:	str	r3, [r4, #0]
  }
  return ret;
}
     abc:	add	sp, #12
     abe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ac2:	nop
     ac4:	.word	0x200021bc
     ac8:	.word	0x20017c84
     acc:	.word	0x2001770c
     ad0:	.word	0x200176fc
     ad4:	.word	0x20017190
     ad8:	.word	0x20016d3c
     adc:	.word	0x20016d40
     ae0:	.word	0x20017ca0
     ae4:	.word	0x200173e4
     ae8:	.word	0x20016a80
     aec:	.word	0x20016a7c
     af0:	.word	0xffff0000
     af4:	.word	0x20016a94

00000af8 <acq_isr()>:
    #include "mAudioIF.h"
  #endif

  #define IMXRT_CACHE_ENABLED 2 // 0=disabled, 1=WT, 2= WB
  static void acq_isr(void)
  {
     af8:	push	{r3, r4, r5, lr}
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     afa:	ldr	r3, [pc, #200]	; (bc4 <acq_isr()+0xcc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     afc:	ldr	r1, [pc, #200]	; (bc8 <acq_isr()+0xd0>)
     afe:	ldr	r2, [r3, #0]
     b00:	ldrb	r0, [r3, #4]
     b02:	ldr	r3, [r2, #16]

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     b04:	ldr	r2, [pc, #196]	; (bcc <acq_isr()+0xd4>)
     b06:	strb	r0, [r1, #31]
     b08:	cmp	r3, r2
     b0a:	it	cs
     b0c:	subcs.w	r2, r2, #1024	; 0x400
    {
      // DMA is receiving to the first half of the buffer
      // need to remove data from the second half
      src = (int32_t *)&i2s_buffer[NBUF_I2S];
     b10:	mov	r1, r2
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     b12:	bic.w	r3, r2, #31
	uint32_t end_addr = (uint32_t)addr + size;
     b16:	add.w	r2, r2, #1024	; 0x400
	asm volatile("": : :"memory");
	asm("dsb");
     b1a:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
     b1e:	ldr	r0, [pc, #176]	; (bd0 <acq_isr()+0xd8>)
     b20:	str	r3, [r0, #0]
		location += 32;
     b22:	adds	r3, #32
	} while (location < end_addr);
     b24:	cmp	r2, r3
     b26:	bhi.n	b20 <acq_isr()+0x28>
	asm("dsb");
     b28:	dsb	sy
	asm("isb");
     b2c:	isb	sy
     b30:	ldr	r3, [pc, #160]	; (bd4 <acq_isr()+0xdc>)
        arm_dcache_delete((void*)src, sizeof(i2s_buffer) / 2);
    #endif

    // extract data
    #if NCH==1
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     b32:	movs	r2, #0
     b34:	ldrsh.w	r4, [r3]
     b38:	ldr.w	r0, [r1, r2, lsl #3]
     b3c:	ldr	r3, [pc, #152]	; (bd8 <acq_isr()+0xe0>)
     b3e:	add	r3, r0
     b40:	asrs	r3, r4
     b42:	str.w	r3, [r1, r2, lsl #3]
     b46:	adds	r2, #1
     b48:	cmp	r2, #128	; 0x80
     b4a:	bne.n	b38 <acq_isr()+0x40>
#endif

int32_t acqbias=0;
/***************************************************************************/
static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     b4c:	ldr	r5, [pc, #140]	; (bdc <acq_isr()+0xe4>)

  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
     b4e:	movs	r3, #0
     b50:	ldr	r2, [pc, #140]	; (be0 <acq_isr()+0xe8>)
#endif

int32_t acqbias=0;
/***************************************************************************/
static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     b52:	ldr	r4, [r5, #0]
     b54:	mov	r0, r2
     b56:	adds	r4, #1
     b58:	str	r4, [r5, #0]

  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
     b5a:	ldr.w	r4, [r1, r3, lsl #3]
     b5e:	adds	r3, #1
     b60:	cmp	r3, #128	; 0x80
     b62:	str.w	r4, [r0, #4]!
     b66:	bne.n	b5a <acq_isr()+0x62>
     b68:	ldr	r3, [pc, #120]	; (be4 <acq_isr()+0xec>)
     b6a:	vldr	s14, [pc, #124]	; be8 <acq_isr()+0xf0>
  
  float tmp=0.0f;
  for(int ii=0; ii<NBUF_ACQ; ii++) tmp +=(float)acqBuffer[ii];
     b6e:	ldr.w	r1, [r2, #4]!
     b72:	vmov	s15, r1
     b76:	cmp	r3, r2
     b78:	vcvt.f32.s32	s15, s15
     b7c:	vadd.f32	s14, s14, s15
     b80:	bne.n	b6e <acq_isr()+0x76>
  acqbias=(int32_t) (tmp/(float)NBUF_ACQ);
     b82:	vldr	s15, [pc, #104]	; bec <acq_isr()+0xf4>

  if(proc==0)
     b86:	ldr	r3, [pc, #104]	; (bf0 <acq_isr()+0xf8>)

  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
  
  float tmp=0.0f;
  for(int ii=0; ii<NBUF_ACQ; ii++) tmp +=(float)acqBuffer[ii];
  acqbias=(int32_t) (tmp/(float)NBUF_ACQ);
     b88:	vmul.f32	s14, s14, s15
     b8c:	ldr	r2, [pc, #100]	; (bf4 <acq_isr()+0xfc>)

  if(proc==0)
     b8e:	ldrsh.w	r3, [r3]

  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
  
  float tmp=0.0f;
  for(int ii=0; ii<NBUF_ACQ; ii++) tmp +=(float)acqBuffer[ii];
  acqbias=(int32_t) (tmp/(float)NBUF_ACQ);
     b92:	vcvt.s32.f32	s14, s14
     b96:	vstr	s14, [r2]

  if(proc==0)
     b9a:	cbz	r3, ba2 <acq_isr()+0xaa>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     b9c:	cmp	r3, #1
     b9e:	beq.n	bb6 <acq_isr()+0xbe>
     ba0:	pop	{r3, r4, r5, pc}
  for(int ii=0; ii<NBUF_ACQ; ii++) tmp +=(float)acqBuffer[ii];
  acqbias=(int32_t) (tmp/(float)NBUF_ACQ);

  if(proc==0)
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     ba2:	ldr	r0, [pc, #84]	; (bf8 <acq_isr()+0x100>)
     ba4:	bl	a8 <pushData(unsigned long*)>
     ba8:	cmp	r0, #0
     baa:	bne.n	ba0 <acq_isr()+0xa8>
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     bac:	ldr	r2, [pc, #76]	; (bfc <acq_isr()+0x104>)
     bae:	ldr	r3, [r2, #0]
     bb0:	adds	r3, #1
     bb2:	str	r3, [r2, #0]
     bb4:	pop	{r3, r4, r5, pc}
     bb6:	ldr	r0, [pc, #64]	; (bf8 <acq_isr()+0x100>)
     bb8:	bl	820 <compress(void*)>
     bbc:	cmp	r0, #0
     bbe:	beq.n	bac <acq_isr()+0xb4>
     bc0:	b.n	ba0 <acq_isr()+0xa8>
     bc2:	nop
     bc4:	.word	0x20016a78
     bc8:	.word	0x400e8000
     bcc:	.word	0x20200400
     bd0:	.word	0xe000ef5c
     bd4:	.word	0x20017ca0
     bd8:	.word	0x06978000
     bdc:	.word	0x20017704
     be0:	.word	0x20017468
     be4:	.word	0x20017668
     be8:	.word	0x00000000
     bec:	.word	0x3c000000
     bf0:	.word	0x20017c9c
     bf4:	.word	0x2001766c
     bf8:	.word	0x2001746c
     bfc:	.word	0x20017708

00000c00 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     c00:	push	{r4, lr}
     c02:	mov	r4, r0
		release();
     c04:	bl	87cc <DMAChannel::release()>
	}
     c08:	mov	r0, r4
     c0a:	pop	{r4, pc}

00000c0c <set_audioClock(int, long, unsigned long)>:

  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     c0c:	and.w	r0, r0, #63	; 0x3f
     c10:	ldr	r3, [pc, #68]	; (c58 <set_audioClock(int, long, unsigned long)+0x4c>)

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     c12:	bic.w	r2, r2, #3758096384	; 0xe0000000
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     c16:	bic.w	r1, r1, #3758096384	; 0xe0000000

  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     c1a:	orr.w	r0, r0, #1122304	; 0x112000

/*======================================================================================*/
#elif defined(__IMXRT1062__)

  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
     c1e:	push	{r4}
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     c20:	str	r0, [r3, #112]	; 0x70

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     c22:	mov	r4, r3
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     c24:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     c28:	str.w	r2, [r3, #144]	; 0x90
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     c2c:	ldr	r2, [r3, #112]	; 0x70
     c2e:	bic.w	r2, r2, #4096	; 0x1000
     c32:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     c34:	ldr	r3, [r4, #112]	; 0x70
     c36:	ldr	r2, [pc, #32]	; (c58 <set_audioClock(int, long, unsigned long)+0x4c>)
     c38:	cmp	r3, #0
     c3a:	bge.n	c34 <set_audioClock(int, long, unsigned long)+0x28>
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     c3c:	ldr.w	r1, [r2, #368]	; 0x170
     c40:	ldr	r3, [pc, #24]	; (c5c <set_audioClock(int, long, unsigned long)+0x50>)
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
  }
     c42:	ldr.w	r4, [sp], #4
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     c46:	ands	r3, r1
     c48:	str.w	r3, [r2, #368]	; 0x170
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     c4c:	ldr	r3, [r2, #112]	; 0x70
     c4e:	bic.w	r3, r3, #65536	; 0x10000
     c52:	str	r3, [r2, #112]	; 0x70
  }
     c54:	bx	lr
     c56:	nop
     c58:	.word	0x400d8000
     c5c:	.word	0xff7f7fff

00000c60 <setAudioFrequency(int)>:
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     c60:	vmov	s15, r0

  void setAudioFrequency(int fs)
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     c64:	lsls	r0, r0, #10

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     c66:	vmov.f64	d4, #16	; 0x40800000  4.0
    int c0 = C;
    int c2 = 10000;
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);
     c6a:	movw	r1, #10000	; 0x2710
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     c6e:	vcvt.f64.s32	d5, s15
    int c0 = C;
    int c2 = 10000;
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);
     c72:	mov	r2, r1
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     c74:	vldr	d6, [pc, #128]	; cf8 <setAudioFrequency(int)+0x98>
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
  }

  void setAudioFrequency(int fs)
  {
     c78:	push	{r3, r4, r5, lr}
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     c7a:	ldr	r3, [pc, #148]	; (d10 <setAudioFrequency(int)+0xb0>)

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     c7c:	vmul.f64	d6, d5, d6
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    // Select MCLK
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     c80:	ldr	r5, [pc, #144]	; (d14 <setAudioFrequency(int)+0xb4>)

  void setAudioFrequency(int fs)
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     c82:	sdiv	r4, r3, r0

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     c86:	adds	r3, r4, #1
     c88:	vmul.f64	d6, d6, d4
      // clear SAI1_CLK register locations
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     c8c:	and.w	r4, r4, #63	; 0x3f
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     c90:	vmov	s14, r3
     c94:	vcvt.f64.s32	d5, s14
     c98:	vldr	d3, [pc, #100]	; d00 <setAudioFrequency(int)+0xa0>
     c9c:	vmul.f64	d7, d6, d5
    int c0 = C;
    int c2 = 10000;
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);
     ca0:	vldr	d4, [pc, #100]	; d08 <setAudioFrequency(int)+0xa8>
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     ca4:	vdiv.f64	d6, d7, d3
    int c0 = C;
     ca8:	vcvt.s32.f64	s15, d6
     cac:	vmov	r0, s15
    int c2 = 10000;
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);
     cb0:	mul.w	r3, r1, r0
     cb4:	vmov	s14, r3
     cb8:	vcvt.f64.s32	d7, s14
     cbc:	vfnms.f64	d7, d6, d4
     cc0:	vcvt.s32.f64	s15, d7
     cc4:	vmov	r1, s15
     cc8:	bl	c0c <set_audioClock(int, long, unsigned long)>

      // clear SAI1_CLK register locations
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     ccc:	ldr	r0, [pc, #72]	; (d18 <setAudioFrequency(int)+0xb8>)
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     cce:	ldr	r2, [pc, #76]	; (d1c <setAudioFrequency(int)+0xbc>)
    int c2 = 10000;
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);

      // clear SAI1_CLK register locations
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     cd0:	ldr	r1, [r0, #28]
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    // Select MCLK
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
      & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     cd2:	ldr	r3, [pc, #76]	; (d20 <setAudioFrequency(int)+0xc0>)
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);

      // clear SAI1_CLK register locations
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     cd4:	bic.w	r1, r1, #3072	; 0xc00
     cd8:	orr.w	r1, r1, #2048	; 0x800
     cdc:	str	r1, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     cde:	ldr	r1, [r0, #40]	; 0x28
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     ce0:	ands	r2, r1
     ce2:	orr.w	r2, r2, #192	; 0xc0
     ce6:	orrs	r4, r2
     ce8:	str	r4, [r0, #40]	; 0x28
    // Select MCLK
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     cea:	ldr	r2, [r5, #4]
      & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     cec:	ands	r3, r2
     cee:	orr.w	r3, r3, #524288	; 0x80000
     cf2:	str	r3, [r5, #4]
     cf4:	pop	{r3, r4, r5, pc}
     cf6:	nop
     cf8:	.word	0x00000000
     cfc:	.word	0x40700000
     d00:	.word	0x00000000
     d04:	.word	0x4176e360
     d08:	.word	0x00000000
     d0c:	.word	0x40c38800
     d10:	.word	0x269fb200
     d14:	.word	0x400ac000
     d18:	.word	0x400fc000
     d1c:	.word	0xfffffe00
     d20:	.word	0xfff7fff8

00000d24 <i2s_setup()>:

  }

  void i2s_setup(void)
  {
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     d24:	ldr	r2, [pc, #104]	; (d90 <i2s_setup()+0x6c>)
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

  }

  void i2s_setup(void)
  {
     d26:	push	{r3, r4, r5, r6, r7, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     d28:	ldr	r3, [r2, #124]	; 0x7c

    // if receiver is enabled, do nothing
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     d2a:	ldr	r4, [pc, #104]	; (d94 <i2s_setup()+0x70>)

  }

  void i2s_setup(void)
  {
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     d2c:	orr.w	r3, r3, #786432	; 0xc0000
     d30:	str	r3, [r2, #124]	; 0x7c

    // if receiver is enabled, do nothing
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     d32:	ldr.w	r3, [r4, #136]	; 0x88
     d36:	cmp	r3, #0
     d38:	blt.n	d8e <i2s_setup()+0x6a>
  //PLL:
    int fs = fsamp;
     d3a:	ldr	r3, [pc, #92]	; (d98 <i2s_setup()+0x74>)
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

    I2S1_RMR = 0;
     d3c:	movs	r7, #0
    //I2S1_RCSR = (1<<25); //Reset
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     d3e:	movs	r6, #1
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
              | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
     d40:	ldr	r5, [pc, #88]	; (d9c <i2s_setup()+0x78>)
    // if receiver is enabled, do nothing
    if (I2S1_RCSR & I2S_RCSR_RE) return;
  //PLL:
    int fs = fsamp;
  
    setAudioFrequency(fs);
     d42:	ldr	r0, [r3, #0]
     d44:	bl	c60 <setAudioFrequency(int)>

    CORE_PIN23_CONFIG = 3;  //1:MCLK
     d48:	ldr	r3, [pc, #84]	; (da0 <i2s_setup()+0x7c>)
     d4a:	movs	r2, #3
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     d4c:	ldr.w	lr, [pc, #96]	; db0 <i2s_setup()+0x8c>
     d50:	mov.w	ip, #2
    I2S1_RMR = 0;
    //I2S1_RCSR = (1<<25); //Reset
    I2S1_RCR1 = I2S_RCR1_RFW(1);
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
              | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
    I2S1_RCR3 = I2S_RCR3_RCE;
     d54:	mov.w	r0, #65536	; 0x10000
  //PLL:
    int fs = fsamp;
  
    setAudioFrequency(fs);

    CORE_PIN23_CONFIG = 3;  //1:MCLK
     d58:	str.w	r2, [r3, #288]	; 0x120
    I2S1_RCR1 = I2S_RCR1_RFW(1);
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
              | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
    I2S1_RCR3 = I2S_RCR3_RCE;
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
          | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
     d5c:	ldr	r1, [pc, #68]	; (da4 <i2s_setup()+0x80>)
    int fs = fsamp;
  
    setAudioFrequency(fs);

    CORE_PIN23_CONFIG = 3;  //1:MCLK
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     d5e:	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     d62:	str.w	r2, [r3, #292]	; 0x124

  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     d66:	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
              | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
    I2S1_RCR3 = I2S_RCR3_RCE;
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
          | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     d6a:	ldr	r2, [pc, #60]	; (da8 <i2s_setup()+0x84>)

    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     d6c:	ldr	r3, [pc, #60]	; (dac <i2s_setup()+0x88>)
    CORE_PIN23_CONFIG = 3;  //1:MCLK
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     d6e:	str.w	ip, [lr, #404]	; 0x194

    I2S1_RMR = 0;
     d72:	str.w	r7, [r4, #224]	; 0xe0
    //I2S1_RCSR = (1<<25); //Reset
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     d76:	str.w	r6, [r4, #140]	; 0x8c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
              | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
     d7a:	str.w	r5, [r4, #144]	; 0x90
    I2S1_RCR3 = I2S_RCR3_RCE;
     d7e:	str.w	r0, [r4, #148]	; 0x94
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
          | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
     d82:	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     d86:	str.w	r2, [r4, #156]	; 0x9c

    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     d8a:	str.w	r3, [r4, #136]	; 0x88
     d8e:	pop	{r3, r4, r5, r6, r7, pc}
     d90:	.word	0x400fc000
     d94:	.word	0x40384000
     d98:	.word	0x20002174
     d9c:	.word	0x07000001
     da0:	.word	0x401f8000
     da4:	.word	0x00011f1b
     da8:	.word	0x1f1f1f00
     dac:	.word	0x92000001
     db0:	.word	0x401f8400

00000db4 <dma_setup()>:
  static DMAChannel dma;
  DMAMEM __attribute__((aligned(32))) static  uint32_t i2s_buffer[2*NBUF_I2S];
  static void acq_isr(void);

  void dma_setup(void)
  {
     db4:	push	{r3, r4, r5, r6, r7, lr}
    dma.begin(true); // Allocate the DMA channel first
     db6:	ldr	r4, [pc, #124]	; (e34 <dma_setup()+0x80>)
     db8:	movs	r1, #1

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     dba:	ldr	r5, [pc, #124]	; (e38 <dma_setup()+0x84>)
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     dbc:	movs	r6, #4
  DMAMEM __attribute__((aligned(32))) static  uint32_t i2s_buffer[2*NBUF_I2S];
  static void acq_isr(void);

  void dma_setup(void)
  {
    dma.begin(true); // Allocate the DMA channel first
     dbe:	mov	r0, r4
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     dc0:	movs	r7, #96	; 0x60
     dc2:	bl	872c <DMAChannel::begin(bool)>

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     dc6:	ldr	r3, [r4, #0]
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     dc8:	mov.w	r2, #512	; 0x200
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
     dcc:	ldr	r0, [pc, #108]	; (e3c <dma_setup()+0x88>)

  void dma_setup(void)
  {
    dma.begin(true); // Allocate the DMA channel first

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     dce:	str	r5, [r3, #0]
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
     dd0:	movw	r5, #514	; 0x202
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
     dd4:	str	r0, [r3, #16]
  void dma_setup(void)
  {
    dma.begin(true); // Allocate the DMA channel first

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
     dd6:	movs	r1, #0
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     dd8:	strh	r2, [r3, #22]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     dda:	mov.w	lr, #6
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     dde:	ldrh	r0, [r3, #22]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     de0:	movs	r2, #1
  {
    dma.begin(true); // Allocate the DMA channel first

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
     de2:	strh	r5, [r3, #6]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     de4:	subw	r5, r5, #2562	; 0xa02
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     de8:	uxth	r0, r0
  void dma_setup(void)
  {
    dma.begin(true); // Allocate the DMA channel first

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
     dea:	strh	r1, [r3, #4]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     dec:	str	r5, [r3, #24]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     dee:	strh	r0, [r3, #30]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     df0:	ldrb	r5, [r4, #4]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     df2:	strh.w	lr, [r3, #28]
     df6:	ldr	r0, [pc, #72]	; (e40 <dma_setup()+0x8c>)
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     df8:	ldr.w	lr, [pc, #92]	; e58 <dma_setup()+0xa4>

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
     dfc:	str	r1, [r3, #12]
    dma.begin(true); // Allocate the DMA channel first

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     dfe:	str	r6, [r3, #8]
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
     e00:	strh	r6, [r3, #20]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
     e02:	str.w	r1, [r0, r5, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     e06:	str.w	lr, [r0, r5, lsl #2]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     e0a:	ldrb	r3, [r4, #4]
     e0c:	ldr	r1, [pc, #52]	; (e44 <dma_setup()+0x90>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     e0e:	and.w	r0, r3, #31
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     e12:	add.w	r5, r3, #16
     e16:	ldr	r6, [pc, #48]	; (e48 <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     e18:	asrs	r3, r3, #5
     e1a:	lsls	r2, r0
     e1c:	ldr	r0, [pc, #44]	; (e4c <dma_setup()+0x98>)
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     e1e:	str.w	r6, [r1, r5, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     e22:	str.w	r2, [r0, r3, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     e26:	ldr	r1, [pc, #40]	; (e50 <dma_setup()+0x9c>)
     e28:	ldrb	r2, [r4, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     e2a:	ldr	r3, [pc, #40]	; (e54 <dma_setup()+0xa0>)
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     e2c:	strb	r7, [r2, r1]
     e2e:	ldrb	r2, [r4, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     e30:	strb	r2, [r3, #27]
     e32:	pop	{r3, r4, r5, r6, r7, pc}
     e34:	.word	0x20016a78
     e38:	.word	0x403840a0
     e3c:	.word	0x20200000
     e40:	.word	0x400ec000
     e44:	.word	0x20002400
     e48:	.word	0x00000af9
     e4c:	.word	0xe000e100
     e50:	.word	0xe000e400
     e54:	.word	0x400e8000
     e58:	.word	0x80000013

00000e5c <acqModifyFrequency(unsigned long)>:
      putAudio(src);
    #endif
  }

  void acqModifyFrequency(uint32_t fsamp)
  {
     e5c:	push	{r4, lr}
    // stop I2S
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     e5e:	ldr	r4, [pc, #32]	; (e80 <acqModifyFrequency(unsigned long)+0x24>)
     e60:	ldr.w	r3, [r4, #136]	; 0x88
     e64:	bic.w	r3, r3, #2415919104	; 0x90000000
     e68:	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     e6c:	bl	c60 <setAudioFrequency(int)>
    //restart I2S
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     e70:	ldr.w	r3, [r4, #136]	; 0x88
     e74:	orr.w	r3, r3, #2415919104	; 0x90000000
     e78:	str.w	r3, [r4, #136]	; 0x88
     e7c:	pop	{r4, pc}
     e7e:	nop
     e80:	.word	0x40384000

00000e84 <_GLOBAL__sub_I_procCount>:
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
  }
}
     e84:	push	{r4, lr}
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
     e86:	ldr	r4, [pc, #24]	; (ea0 <_GLOBAL__sub_I_procCount+0x1c>)
     e88:	movs	r1, #0
     e8a:	mov	r0, r4
     e8c:	bl	872c <DMAChannel::begin(bool)>
  }

  /***************************************************************************/
  #include "DMAChannel.h"

  static DMAChannel dma;
     e90:	mov	r0, r4
     e92:	ldr	r2, [pc, #16]	; (ea4 <_GLOBAL__sub_I_procCount+0x20>)
     e94:	ldr	r1, [pc, #16]	; (ea8 <_GLOBAL__sub_I_procCount+0x24>)
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
  }
}
     e96:	ldmia.w	sp!, {r4, lr}
  }

  /***************************************************************************/
  #include "DMAChannel.h"

  static DMAChannel dma;
     e9a:	b.w	8bbc <__aeabi_atexit>
     e9e:	nop
     ea0:	.word	0x20016a78
     ea4:	.word	0x20001bb8
     ea8:	.word	0x00000c01

00000eac <Print::availableForWrite()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     eac:	movs	r0, #0
     eae:	bx	lr

00000eb0 <SdCardInterface::hasDedicatedSpi()>:
  /** \return error code. */
  virtual uint8_t errorCode() const = 0;
  /** \return error data. */
  virtual uint32_t errorData() const = 0;
  /** \return false by default */
  virtual bool hasDedicatedSpi() { return false; }
     eb0:	movs	r0, #0
     eb2:	bx	lr

00000eb4 <SdCardInterface::isDedicatedSpi()>:
  /** \return false by default */
  bool virtual isDedicatedSpi() { return false; }
     eb4:	movs	r0, #0
     eb6:	bx	lr

00000eb8 <SdCardInterface::setDedicatedSpi(bool)>:
   * \return false by default.
   */
  virtual bool setDedicatedSpi(bool value) {
    (void)value;
    return false;
  }
     eb8:	movs	r0, #0
     eba:	bx	lr

00000ebc <SdCardInterface::status()>:
   * \param[out] sds location for 64 status bytes.
   * \return true for success or false for failure.
   */
  virtual bool readSDS(sds_t* sds) = 0;
  /** \return card status. */
  virtual uint32_t status() { return 0XFFFFFFFF; }
     ebc:	mov.w	r0, #4294967295
     ec0:	bx	lr
     ec2:	nop

00000ec4 <SdFs::~SdFs()>:
//------------------------------------------------------------------------------
/**
 * \class SdFs
 * \brief SD file system class for FAT16, FAT32, and exFAT volumes.
 */
class SdFs : public SdBase<FsVolume, FsFormatter> {
     ec4:	bx	lr
     ec6:	nop

00000ec8 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

uint32_t SerNum=0;

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
     ec8:	push	{r4, r5, r6, lr}
     eca:	sub	sp, #8
     ecc:	mov	r6, r0
     ece:	mov	r5, r2
     ed0:	mov	r4, r1
    datetime_t t;
    rtc_get_datetime(&t);
     ed2:	mov	r0, sp
     ed4:	bl	7ac <rtc_get_datetime(datetime_t*)>

    *date = FS_DATE(t.year,t.month,t.day);
     ed8:	ldrb.w	r2, [sp, #2]
     edc:	ldrb.w	r0, [sp, #3]
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     ee0:	ldrh.w	r3, [sp]
  return year > 127 || month > 12 || day > 31 ? 0
     ee4:	cmp	r2, #12
     ee6:	it	ls
     ee8:	cmpls	r0, #31
     eea:	bhi.n	f30 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x68>
     eec:	subw	r3, r3, #1980	; 0x7bc
     ef0:	uxth	r3, r3
     ef2:	cmp	r3, #127	; 0x7f
     ef4:	bhi.n	f30 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x68>
                                              : year << 9 | month << 5 | day;
     ef6:	orr.w	r0, r0, r2, lsl #5
     efa:	orr.w	r0, r0, r3, lsl #9
     efe:	uxth	r0, r0
    *time = FS_TIME(t.hour,t.min,t.sec);
     f00:	ldrb.w	r2, [sp, #5]
     f04:	ldrb.w	r3, [sp, #6]
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
    datetime_t t;
    rtc_get_datetime(&t);

    *date = FS_DATE(t.year,t.month,t.day);
     f08:	strh	r0, [r6, #0]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
     f0a:	cmp	r3, #59	; 0x3b
     f0c:	it	ls
     f0e:	cmpls	r2, #23
    *time = FS_TIME(t.hour,t.min,t.sec);
     f10:	ldrb.w	r1, [sp, #7]
     f14:	bhi.n	f34 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6c>
     f16:	cmp	r1, #59	; 0x3b
     f18:	bhi.n	f34 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6c>
             ? 0
             : hour << 11 | minute << 5 | second >> 1;
     f1a:	lsls	r0, r3, #5
     f1c:	orr.w	r3, r0, r2, lsl #11
     f20:	orr.w	r3, r3, r1, lsr #1
     f24:	uxth	r3, r3
    *ms10 = 0;
     f26:	movs	r2, #0
{
    datetime_t t;
    rtc_get_datetime(&t);

    *date = FS_DATE(t.year,t.month,t.day);
    *time = FS_TIME(t.hour,t.min,t.sec);
     f28:	strh	r3, [r4, #0]
    *ms10 = 0;
     f2a:	strb	r2, [r5, #0]
}
     f2c:	add	sp, #8
     f2e:	pop	{r4, r5, r6, pc}
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0
                                              : year << 9 | month << 5 | day;
     f30:	movs	r0, #0
     f32:	b.n	f00 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x38>
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
             ? 0
             : hour << 11 | minute << 5 | second >> 1;
     f34:	movs	r3, #0
     f36:	b.n	f26 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x5e>

00000f38 <FsFile::~FsFile()>:
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template <class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     f38:	ldr	r3, [pc, #16]	; (f4c <FsFile::~FsFile()+0x14>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f3a:	push	{r4, lr}
     f3c:	mov	r4, r0
     f3e:	str.w	r3, [r0], #16
   * \param[in] oflag Values for \a oflag are constructed by a bitwise-inclusive
   * OR of open flags. see FatFile::open(FatFile*, const char*, uint8_t).
   */
  FsBaseFile(const char* path, oflag_t oflag) { open(path, oflag); }

  ~FsBaseFile() { close(); }
     f42:	bl	49a8 <FsBaseFile::close()>
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f46:	mov	r0, r4
     f48:	pop	{r4, pc}
     f4a:	nop
     f4c:	.word	0x200003b0

00000f50 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() { return BaseFile::read(); }
     f50:	ldr	r3, [r0, #72]	; 0x48
     f52:	push	{lr}
     f54:	sub	sp, #12
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile   ? m_fFile->read(buf, count)
           : m_xFile ? m_xFile->read(buf, count)
                     : -1;
     f56:	cbz	r3, f72 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     f58:	mov	r0, r3
     f5a:	movs	r2, #1
     f5c:	add.w	r1, sp, #7
     f60:	bl	39b4 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     f64:	cmp	r0, #1
     f66:	bne.n	f82 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     f68:	ldrb.w	r0, [sp, #7]
     f6c:	add	sp, #12
     f6e:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile   ? m_fFile->read(buf, count)
           : m_xFile ? m_xFile->read(buf, count)
     f72:	ldr	r0, [r0, #76]	; 0x4c
                     : -1;
     f74:	cbz	r0, f82 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     f76:	movs	r2, #1
     f78:	add.w	r1, sp, #7
     f7c:	bl	2118 <ExFatFile::read(void*, unsigned int)>
     f80:	b.n	f64 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     f82:	mov.w	r0, #4294967295
     f86:	b.n	f6c <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000f88 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() { return BaseFile::available(); }
     f88:	ldr	r2, [r0, #72]	; 0x48
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     f8a:	cbz	r2, fa6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     f8c:	ldrb	r3, [r2, #0]
     f8e:	and.w	r3, r3, #8
     f92:	and.w	r0, r3, #255	; 0xff
     f96:	cbz	r3, fdc <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     f98:	ldr	r3, [r2, #28]
     f9a:	ldr	r0, [r2, #20]
     f9c:	subs	r0, r3, r0
     f9e:	it	mi
     fa0:	mvnmi.w	r0, #2147483648	; 0x80000000
     fa4:	bx	lr
     fa6:	ldr	r1, [r0, #76]	; 0x4c
     fa8:	cbz	r1, fde <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
    return n > INT_MAX ? INT_MAX : n;
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     faa:	ldrb.w	r3, [r1, #49]	; 0x31
     fae:	and.w	r3, r3, #8
     fb2:	and.w	r0, r3, #255	; 0xff
     fb6:	cbz	r3, fdc <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
     fb8:	ldrd	r2, r3, [r1, #16]
     fbc:	ldrd	r0, r1, [r1]
     fc0:	push	{r4, r5}
     fc2:	subs	r0, r2, r0
     fc4:	mov.w	r5, #0
     fc8:	mvn.w	r4, #2147483648	; 0x80000000
     fcc:	sbc.w	r1, r3, r1
     fd0:	cmp	r5, r1
     fd2:	it	eq
     fd4:	cmpeq	r4, r0
     fd6:	bcs.n	fda <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     fd8:	mov	r0, r4
     fda:	pop	{r4, r5}
     fdc:	bx	lr
     fde:	mov	r0, r1
     fe0:	bx	lr
     fe2:	nop

00000fe4 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() { return BaseFile::peek(); }
     fe4:	ldr	r3, [r0, #72]	; 0x48
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     fe6:	cbz	r3, fee <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     fe8:	mov	r0, r3
     fea:	b.w	3b50 <FatFile::peek()>
     fee:	ldr	r0, [r0, #76]	; 0x4c
     ff0:	cbz	r0, ff6 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     ff2:	b.w	22cc <ExFatFile::peek()>
     ff6:	mov.w	r0, #4294967295
     ffa:	bx	lr

00000ffc <StreamFile<FsBaseFile, unsigned long long>::flush()>:
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() { return BaseFile::available(); }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() { BaseFile::sync(); }
     ffc:	ldr	r3, [r0, #72]	; 0x48
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     ffe:	cbz	r3, 1006 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
    1000:	mov	r0, r3
    1002:	b.w	3d4c <FatFile::sync()>
    1006:	ldr	r0, [r0, #76]	; 0x4c
    1008:	cbz	r0, 100e <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
    100a:	b.w	2f34 <ExFatFile::sync()>
    100e:	bx	lr

00001010 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    1010:	ldr	r3, [r0, #72]	; 0x48
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
                     : 0;
    1012:	cbz	r3, 101a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
    1014:	mov	r0, r3
    1016:	b.w	3d58 <FatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
    101a:	ldr	r0, [r0, #76]	; 0x4c
                     : 0;
    101c:	cbz	r0, 1022 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
    101e:	b.w	324c <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
    1022:	bx	lr

00001024 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) { return BaseFile::write(b); }
    1024:	push	{lr}
    1026:	ldr	r3, [r0, #72]	; 0x48
    1028:	sub	sp, #12
    102a:	strb.w	r1, [sp, #7]
    102e:	cbz	r3, 1042 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
    1030:	mov	r0, r3
    1032:	movs	r2, #1
    1034:	add.w	r1, sp, #7
    1038:	bl	3d58 <FatFile::write(void const*, unsigned int)>
    103c:	add	sp, #12
    103e:	ldr.w	pc, [sp], #4
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
    1042:	ldr	r0, [r0, #76]	; 0x4c
                     : 0;
    1044:	cmp	r0, #0
    1046:	beq.n	103c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
    1048:	movs	r2, #1
    104a:	add.w	r1, sp, #7
    104e:	bl	324c <ExFatFile::write(void const*, unsigned int)>
    1052:	add	sp, #12
    1054:	ldr.w	pc, [sp], #4

00001058 <filing_init()>:
#    FsDateTime::callback = dateTime;

    flash_get_unique_id((uint8_t *) UniqueID);
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    1058:	ldr	r3, [pc, #144]	; (10ec <filing_init()+0x94>)
    105a:	ldr	r0, [pc, #148]	; (10f0 <filing_init()+0x98>)
    105c:	ldr.w	r3, [r3, #544]	; 0x220
  #endif

  FsDateTime::callback = dateTime;
    1060:	ldr	r2, [pc, #144]	; (10f4 <filing_init()+0x9c>)
#    FsDateTime::callback = dateTime;

    flash_get_unique_id((uint8_t *) UniqueID);
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    1062:	bic.w	r3, r3, #4278190080	; 0xff000000
  #endif

  FsDateTime::callback = dateTime;
    1066:	ldr	r1, [pc, #144]	; (10f8 <filing_init()+0xa0>)
    *time = FS_TIME(t.hour,t.min,t.sec);
    *ms10 = 0;
}

int16_t filing_init(void)
{
    1068:	push	{r4, r5, r6, r7, lr}
    106a:	ldr	r5, [pc, #144]	; (10fc <filing_init()+0xa4>)
    106c:	sub	sp, #12
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
  #endif

  FsDateTime::callback = dateTime;
    106e:	movs	r4, #5
#    FsDateTime::callback = dateTime;

    flash_get_unique_id((uint8_t *) UniqueID);
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    1070:	str	r3, [r0, #0]
    1072:	addw	r6, r5, #1164	; 0x48c
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    1076:	mov	r7, r5
  #endif

  FsDateTime::callback = dateTime;
    1078:	str	r1, [r2, #0]
    107a:	mov.w	r1, #0
    107e:	ldr	r0, [pc, #128]	; (1100 <filing_init()+0xa8>)
    1080:	bl	5fb0 <SdioCard::begin(SdioConfig)>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    return m_card && !m_card->errorCode();
    1084:	ldr	r0, [pc, #120]	; (1100 <filing_init()+0xa8>)
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    1086:	str.w	r6, [r5, #1160]	; 0x488
    return m_card && !m_card->errorCode();
    108a:	bl	5644 <SdioCard::errorCode() const>
    108e:	cbz	r0, 10bc <filing_init()+0x64>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1090:	movs	r1, #15
    1092:	ldr	r0, [pc, #112]	; (1104 <filing_init()+0xac>)
    1094:	bl	7054 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    1098:	ldr	r0, [pc, #108]	; (1108 <filing_init()+0xb0>)
    109a:	bl	8900 <Print::println()>
      haveStore=1;
      return 1;
    }
    else
    { Serial.println("still trying..."); 
      delay(100);
    109e:	movs	r0, #100	; 0x64
    10a0:	bl	7d38 <delay>
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
  #endif

  FsDateTime::callback = dateTime;

  for(int ii=0; ii<5;ii++)
    10a4:	subs	r4, #1
    10a6:	bne.n	107a <filing_init()+0x22>
    10a8:	movs	r1, #27
    10aa:	ldr	r0, [pc, #96]	; (110c <filing_init()+0xb4>)
    10ac:	bl	7054 <usb_serial_write>
    10b0:	ldr	r0, [pc, #84]	; (1108 <filing_init()+0xb0>)
    10b2:	bl	8900 <Print::println()>
    }
  }

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
    10b6:	mov	r0, r4
}
    10b8:	add	sp, #12
    10ba:	pop	{r4, r5, r6, r7, pc}
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    10bc:	movs	r3, #1
    10be:	ldr.w	r1, [r7, #1160]	; 0x488
    10c2:	str	r0, [sp, #0]
    10c4:	mov	r2, r3
    10c6:	ldr	r0, [pc, #52]	; (10fc <filing_init()+0xa4>)
    10c8:	bl	4ad8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    10cc:	cmp	r0, #0
    10ce:	beq.n	1090 <filing_init()+0x38>
    10d0:	movs	r1, #17
    10d2:	ldr	r0, [pc, #60]	; (1110 <filing_init()+0xb8>)
    10d4:	bl	7054 <usb_serial_write>
    10d8:	ldr	r0, [pc, #44]	; (1108 <filing_init()+0xb0>)
    10da:	bl	8900 <Print::println()>

  for(int ii=0; ii<5;ii++)
  {
    if (sd.begin(SD_CONFIG)) 
    { Serial.println("card initialized.");
      haveStore=1;
    10de:	movs	r3, #1
    10e0:	ldr	r2, [pc, #48]	; (1114 <filing_init()+0xbc>)
      return 1;
    10e2:	mov	r0, r3

  for(int ii=0; ii<5;ii++)
  {
    if (sd.begin(SD_CONFIG)) 
    { Serial.println("card initialized.");
      haveStore=1;
    10e4:	str	r3, [r2, #0]
  }

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
}
    10e6:	add	sp, #12
    10e8:	pop	{r4, r5, r6, r7, pc}
    10ea:	nop
    10ec:	.word	0x401f4400
    10f0:	.word	0x20005864
    10f4:	.word	0x20017398
    10f8:	.word	0x00000ec9
    10fc:	.word	0x200177bc
    1100:	.word	0x20017c48
    1104:	.word	0x20000ba4
    1108:	.word	0x20001bc8
    110c:	.word	0x20000bb4
    1110:	.word	0x20000bd0
    1114:	.word	0x200176d4

00001118 <timeStamp()>:

char * timeStamp(void)
{
    1118:	push	{r4, r5, r6, r7, lr}
    111a:	sub	sp, #28
  static char date_time[80];
  
  datetime_t t;
  rtc_get_datetime(&t);

  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    111c:	ldr	r4, [pc, #48]	; (1150 <timeStamp()+0x38>)
char * timeStamp(void)
{
  static char date_time[80];
  
  datetime_t t;
  rtc_get_datetime(&t);
    111e:	add	r0, sp, #16
    1120:	bl	7ac <rtc_get_datetime(datetime_t*)>

  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    1124:	ldrsb.w	r1, [sp, #19]
    1128:	ldrsb.w	r7, [sp, #23]
    112c:	mov	r0, r4
    112e:	ldrsb.w	r6, [sp, #22]
    1132:	ldrsb.w	r5, [sp, #21]
    1136:	ldrsb.w	r3, [sp, #18]
    113a:	ldrsh.w	r2, [sp, #16]
    113e:	stmia.w	sp, {r1, r5, r6, r7}
    1142:	ldr	r1, [pc, #16]	; (1154 <timeStamp()+0x3c>)
    1144:	bl	9bd4 <sprintf>
  return date_time;
}
    1148:	mov	r0, r4
    114a:	add	sp, #28
    114c:	pop	{r4, r5, r6, r7, pc}
    114e:	nop
    1150:	.word	0x200173e8
    1154:	.word	0x20000be4

00001158 <headerInit(long, long, long, int)>:

char * headerInit(int32_t fsamp, int32_t nchan, int32_t nbits, int serNum)
{
  int nbytes=nbits/8;
    1158:	cmp	r2, #0

  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
    115a:	ldr.w	ip, [pc, #188]	; 1218 <headerInit(long, long, long, int)+0xc0>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
  return date_time;
}

char * headerInit(int32_t fsamp, int32_t nchan, int32_t nbits, int serNum)
{
    115e:	push	{r3, r4, r5, r6, r7, lr}
  int nbytes=nbits/8;
    1160:	ite	lt
    1162:	addlt	r5, r2, #7
    1164:	movge	r5, r2

  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
    1166:	ldr	r4, [pc, #148]	; (11fc <headerInit(long, long, long, int)+0xa4>)
  strcpy(wav_hdr.wId,"WAVE");
  strcpy(wav_hdr.fId,"fmt ");
  strcpy(wav_hdr.dId,"data");
  strcpy(wav_hdr.iId,"info");

  wav_hdr.rLen=512-2*4; // will be updated at closing
    1168:	mov.w	lr, #504	; 0x1f8
  return date_time;
}

char * headerInit(int32_t fsamp, int32_t nchan, int32_t nbits, int serNum)
{
  int nbytes=nbits/8;
    116c:	asrs	r5, r5, #3
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
  return date_time;
}

char * headerInit(int32_t fsamp, int32_t nchan, int32_t nbits, int serNum)
{
    116e:	mov	r7, r3
  wav_hdr.iLen = 512 - 13*4;
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=1;
  wav_hdr.nSamplesPerSec=fsamp;
    1170:	str	r0, [r4, #24]
  strcpy(wav_hdr.iId,"info");

  wav_hdr.rLen=512-2*4; // will be updated at closing
  wav_hdr.fLen=0x10;
  wav_hdr.iLen = 512 - 13*4;
  wav_hdr.dLen = 0; // will be updated at closing
    1172:	movs	r3, #0

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=1;
  wav_hdr.nSamplesPerSec=fsamp;
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes;
  wav_hdr.nBlockAlign=nchan*nbytes;
    1174:	smulbb	r1, r1, r5
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=1;
  wav_hdr.nSamplesPerSec=fsamp;
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes;
    1178:	mul.w	r5, r0, r5
  strcpy(wav_hdr.dId,"data");
  strcpy(wav_hdr.iId,"info");

  wav_hdr.rLen=512-2*4; // will be updated at closing
  wav_hdr.fLen=0x10;
  wav_hdr.iLen = 512 - 13*4;
    117c:	mov.w	r0, #460	; 0x1cc
  strcpy(wav_hdr.wId,"WAVE");
  strcpy(wav_hdr.fId,"fmt ");
  strcpy(wav_hdr.dId,"data");
  strcpy(wav_hdr.iId,"info");

  wav_hdr.rLen=512-2*4; // will be updated at closing
    1180:	str.w	lr, [r4, #4]

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=1;
  wav_hdr.nSamplesPerSec=fsamp;
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes;
  wav_hdr.nBlockAlign=nchan*nbytes;
    1184:	strh	r1, [r4, #32]
  wav_hdr.rLen=512-2*4; // will be updated at closing
  wav_hdr.fLen=0x10;
  wav_hdr.iLen = 512 - 13*4;
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
    1186:	movs	r1, #1
  int nbytes=nbits/8;

  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
  strcpy(wav_hdr.wId,"WAVE");
    1188:	ldr.w	lr, [pc, #144]	; 121c <headerInit(long, long, long, int)+0xc4>
  strcpy(wav_hdr.fId,"fmt ");
  strcpy(wav_hdr.dId,"data");
  strcpy(wav_hdr.iId,"info");

  wav_hdr.rLen=512-2*4; // will be updated at closing
  wav_hdr.fLen=0x10;
    118c:	movs	r6, #16
  wav_hdr.iLen = 512 - 13*4;
    118e:	str	r0, [r4, #40]	; 0x28
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
    1190:	strh	r1, [r4, #20]
  wav_hdr.nChannels=1;
    1192:	strh	r1, [r4, #22]
  wav_hdr.nSamplesPerSec=fsamp;
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes;
  wav_hdr.nBlockAlign=nchan*nbytes;
  wav_hdr.nBitsPerSamples=nbits;
    1194:	strh	r2, [r4, #34]	; 0x22

  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
  strcpy(wav_hdr.wId,"WAVE");
  strcpy(wav_hdr.fId,"fmt ");
    1196:	ldr	r2, [pc, #104]	; (1200 <headerInit(long, long, long, int)+0xa8>)
  strcpy(wav_hdr.iId,"info");

  wav_hdr.rLen=512-2*4; // will be updated at closing
  wav_hdr.fLen=0x10;
  wav_hdr.iLen = 512 - 13*4;
  wav_hdr.dLen = 0; // will be updated at closing
    1198:	str.w	r3, [r4, #508]	; 0x1fc
  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
  strcpy(wav_hdr.wId,"WAVE");
  strcpy(wav_hdr.fId,"fmt ");
  strcpy(wav_hdr.dId,"data");
    119c:	ldr	r3, [pc, #100]	; (1204 <headerInit(long, long, long, int)+0xac>)
  strcpy(wav_hdr.iId,"info");

  wav_hdr.rLen=512-2*4; // will be updated at closing
  wav_hdr.fLen=0x10;
    119e:	str	r6, [r4, #16]

  strcpy(wav_hdr.rId,"RIFF");
  strcpy(wav_hdr.wId,"WAVE");
  strcpy(wav_hdr.fId,"fmt ");
  strcpy(wav_hdr.dId,"data");
  strcpy(wav_hdr.iId,"info");
    11a0:	ldr	r6, [pc, #100]	; (1208 <headerInit(long, long, long, int)+0xb0>)
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=1;
  wav_hdr.nSamplesPerSec=fsamp;
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes;
    11a2:	str	r5, [r4, #28]
  wav_hdr.nBlockAlign=nchan*nbytes;
  wav_hdr.nBitsPerSamples=nbits;

  strcpy(&wav_hdr.info[0], MAGIC);
    11a4:	ldr	r5, [pc, #100]	; (120c <headerInit(long, long, long, int)+0xb4>)
{
  int nbytes=nbits/8;

  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
    11a6:	ldmia.w	ip, {r0, r1}
    11aa:	str	r0, [r4, #0]
  strcpy(wav_hdr.wId,"WAVE");
    11ac:	ldmia.w	lr, {r0, r1}
    11b0:	str	r0, [r4, #8]
  strcpy(wav_hdr.fId,"fmt ");
    11b2:	ldmia.w	r2, {r0, r1}
    11b6:	str	r0, [r4, #12]
  strcpy(wav_hdr.dId,"data");
    11b8:	ldmia.w	r3, {r0, r1}
    11bc:	str.w	r0, [r4, #504]	; 0x1f8
  strcpy(wav_hdr.iId,"info");
    11c0:	ldmia.w	r6, {r0, r1}
    11c4:	str	r0, [r4, #36]	; 0x24
  wav_hdr.nSamplesPerSec=fsamp;
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes;
  wav_hdr.nBlockAlign=nchan*nbytes;
  wav_hdr.nBitsPerSamples=nbits;

  strcpy(&wav_hdr.info[0], MAGIC);
    11c6:	ldmia.w	r5, {r0, r1}
    11ca:	strb.w	r1, [r4, #48]	; 0x30
    11ce:	str	r0, [r4, #44]	; 0x2c
  strcpy(&wav_hdr.info[4], timeStamp());
    11d0:	bl	1118 <timeStamp()>
    11d4:	mov	r1, r0
    11d6:	add.w	r0, r4, #48	; 0x30
    11da:	bl	9c7c <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
    11de:	mov	r2, r7
    11e0:	add.w	r0, r4, #64	; 0x40
    11e4:	ldr	r1, [pc, #40]	; (1210 <headerInit(long, long, long, int)+0xb8>)
    11e6:	bl	9bd4 <sprintf>
  strcpy(&wav_hdr.info[30]," end");
    11ea:	ldr	r3, [pc, #40]	; (1214 <headerInit(long, long, long, int)+0xbc>)
    11ec:	ldr	r0, [r3, #0]
    11ee:	ldrb	r3, [r3, #4]
    11f0:	str.w	r0, [r4, #74]	; 0x4a

  return (char *)&wav_hdr;
}
    11f4:	mov	r0, r4
  wav_hdr.nBitsPerSamples=nbits;

  strcpy(&wav_hdr.info[0], MAGIC);
  strcpy(&wav_hdr.info[4], timeStamp());
  sprintf(&wav_hdr.info[20]," %8x",serNum);
  strcpy(&wav_hdr.info[30]," end");
    11f6:	strb.w	r3, [r4, #78]	; 0x4e

  return (char *)&wav_hdr;
}
    11fa:	pop	{r3, r4, r5, r6, r7, pc}
    11fc:	.word	0x20016f40
    1200:	.word	0x20000c10
    1204:	.word	0x20000c18
    1208:	.word	0x20000c20
    120c:	.word	0x20000c28
    1210:	.word	0x20000c30
    1214:	.word	0x20000c38
    1218:	.word	0x20000c00
    121c:	.word	0x20000c08

00001220 <writeHeader(char*)>:
  wav_hdr.rLen += wav_hdr.dLen;
  return (char *)&wav_hdr;
}

void writeHeader(char * wav_hdr) 
{ 
    1220:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1224:	ldr	r4, [pc, #148]	; (12bc <writeHeader(char*)+0x9c>)
    1226:	mov	r8, r0
    1228:	ldr	r3, [r4, #72]	; 0x48
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile   ? m_fFile->curPosition()
           : m_xFile ? m_xFile->curPosition()
                     : 0;
    122a:	cmp	r3, #0
    122c:	beq.n	1294 <writeHeader(char*)+0x74>
    122e:	ldr	r5, [r3, #20]
    1230:	movs	r7, #0
    1232:	mov	r6, r5
  uint32_t fpos;
  fpos = file.curPosition();
  Serial.printf(" fpos=%d ",fpos);
    1234:	mov	r2, r5
    1236:	ldr	r1, [pc, #136]	; (12c0 <writeHeader(char*)+0xa0>)
    1238:	ldr	r0, [pc, #136]	; (12c4 <writeHeader(char*)+0xa4>)
    123a:	bl	8934 <Print::printf(char const*, ...)>
    123e:	ldr	r0, [r4, #72]	; 0x48
    1240:	ldr	r3, [pc, #120]	; (12bc <writeHeader(char*)+0x9c>)
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
           : m_xFile ? m_xFile->seekSet(pos)
                     : false;
    1242:	cbz	r0, 12a2 <writeHeader(char*)+0x82>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
    1244:	movs	r1, #0
    1246:	bl	3bbc <FatFile::seekSet(unsigned long)>
    124a:	ldr	r0, [r4, #72]	; 0x48
    124c:	ldr	r3, [pc, #108]	; (12bc <writeHeader(char*)+0x9c>)
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
                     : 0;
    124e:	cbz	r0, 1274 <writeHeader(char*)+0x54>
    1250:	mov	r1, r8
    1252:	mov.w	r2, #512	; 0x200
    1256:	bl	3d58 <FatFile::write(void const*, unsigned int)>
    125a:	ldr	r0, [r4, #72]	; 0x48
    125c:	ldr	r3, [pc, #92]	; (12bc <writeHeader(char*)+0x9c>)
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
           : m_xFile ? m_xFile->seekSet(pos)
                     : false;
    125e:	cbnz	r0, 128a <writeHeader(char*)+0x6a>
    1260:	ldr	r0, [r3, #76]	; 0x4c
    1262:	cbz	r0, 1270 <writeHeader(char*)+0x50>
    1264:	mov	r2, r6
    1266:	mov	r3, r7
  file.seek(0);
  file.write(wav_hdr,512);
  file.seek(fpos);
}
    1268:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    126c:	b.w	22f8 <ExFatFile::seekSet(unsigned long long)>
    1270:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1274:	ldr	r0, [r3, #76]	; 0x4c
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
                     : 0;
    1276:	cbz	r0, 12b2 <writeHeader(char*)+0x92>
    1278:	mov	r1, r8
    127a:	mov.w	r2, #512	; 0x200
    127e:	bl	324c <ExFatFile::write(void const*, unsigned int)>
    1282:	ldr	r0, [r4, #72]	; 0x48
    1284:	ldr	r3, [pc, #52]	; (12bc <writeHeader(char*)+0x9c>)
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
           : m_xFile ? m_xFile->seekSet(pos)
                     : false;
    1286:	cmp	r0, #0
    1288:	beq.n	1260 <writeHeader(char*)+0x40>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
    128a:	mov	r1, r5
    128c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1290:	b.w	3bbc <FatFile::seekSet(unsigned long)>
                     : 0;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile   ? m_fFile->curPosition()
           : m_xFile ? m_xFile->curPosition()
    1294:	ldr	r5, [r4, #76]	; 0x4c
                     : 0;
    1296:	cbz	r5, 12b6 <writeHeader(char*)+0x96>
    1298:	ldrd	r6, r7, [r5]
    129c:	movs	r7, #0
    129e:	mov	r5, r6
    12a0:	b.n	1234 <writeHeader(char*)+0x14>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
           : m_xFile ? m_xFile->seekSet(pos)
    12a2:	ldr	r0, [r3, #76]	; 0x4c
                     : false;
    12a4:	cmp	r0, #0
    12a6:	beq.n	1270 <writeHeader(char*)+0x50>
    12a8:	movs	r2, #0
    12aa:	movs	r3, #0
    12ac:	bl	22f8 <ExFatFile::seekSet(unsigned long long)>
    12b0:	b.n	124a <writeHeader(char*)+0x2a>
    12b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile   ? m_fFile->curPosition()
           : m_xFile ? m_xFile->curPosition()
                     : 0;
    12b6:	movs	r6, #0
    12b8:	movs	r7, #0
    12ba:	b.n	1234 <writeHeader(char*)+0x14>
    12bc:	.word	0x20017684
    12c0:	.word	0x20000c40
    12c4:	.word	0x20001bc8

000012c8 <makeHeader(long*)>:
   return wheader;
}
*/

int16_t makeHeader(int32_t *header)
{
    12c8:	push	{r4, r5, r6, r7, lr}
    12ca:	sub	sp, #36	; 0x24
    12cc:	mov	r4, r0
     * @param header is pointer to header
     * 
     */
    #define MAGIC "WMXZ"
    datetime_t t;
    rtc_get_datetime(&t);
    12ce:	add	r0, sp, #24
    12d0:	bl	7ac <rtc_get_datetime(datetime_t*)>

    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);
    12d4:	ldrsb.w	r7, [sp, #31]
    12d8:	ldrsb.w	r6, [sp, #30]
    12dc:	mov	r0, r4
    12de:	ldrsb.w	r5, [sp, #29]
    12e2:	ldrsb.w	r1, [sp, #27]
    12e6:	ldrsb.w	r2, [sp, #26]
    12ea:	ldrsh.w	r3, [sp, #24]
    12ee:	str	r7, [sp, #16]
    12f0:	str	r6, [sp, #12]
    12f2:	str	r5, [sp, #8]
    12f4:	str	r1, [sp, #4]
    12f6:	str	r2, [sp, #0]
    12f8:	ldr	r1, [pc, #76]	; (1348 <makeHeader(long*)+0x80>)
    12fa:	ldr	r2, [pc, #80]	; (134c <makeHeader(long*)+0x84>)
    12fc:	bl	9bd4 <sprintf>

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    1300:	ldr	r1, [pc, #76]	; (1350 <makeHeader(long*)+0x88>)
    header[7] = fsamp;
    1302:	ldr	r0, [pc, #80]	; (1354 <makeHeader(long*)+0x8c>)
    header[8] = NCH;
    1304:	movs	r3, #1

    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    1306:	ldr	r1, [r1, #0]
    rtc_get_datetime(&t);

    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    1308:	mov.w	ip, #20
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    130c:	ldr	r7, [pc, #72]	; (1358 <makeHeader(long*)+0x90>)
    header[10] = t_on;
    header[11] = t_off;
    header[12] = proc;
    header[13] = shift;

    header[127]=0x55555555;
    130e:	mov.w	r2, #1431655765	; 0x55555555
    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    header[10] = t_on;
    1312:	ldr	r6, [pc, #72]	; (135c <makeHeader(long*)+0x94>)
    header[11] = t_off;
    1314:	ldr	r5, [pc, #72]	; (1360 <makeHeader(long*)+0x98>)

    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    1316:	str	r1, [r4, #24]
    header[7] = fsamp;
    1318:	ldr	r1, [r0, #0]
    header[8] = NCH;
    header[9] = t_acq;
    131a:	ldr	r0, [r7, #0]
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    131c:	str	r1, [r4, #28]
    header[8] = NCH;
    header[9] = t_acq;
    header[10] = t_on;
    131e:	ldr	r7, [r6, #0]
    header[11] = t_off;
    header[12] = proc;
    header[13] = shift;
    1320:	ldr	r1, [pc, #64]	; (1364 <makeHeader(long*)+0x9c>)
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    header[10] = t_on;
    header[11] = t_off;
    1322:	ldr	r6, [r5, #0]
    header[12] = proc;
    1324:	ldr	r5, [pc, #64]	; (1368 <makeHeader(long*)+0xa0>)
    header[13] = shift;
    1326:	ldrsh.w	r1, [r1]
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    header[10] = t_on;
    header[11] = t_off;
    header[12] = proc;
    132a:	ldrsh.w	r5, [r5]

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    132e:	str	r0, [r4, #36]	; 0x24
    header[12] = proc;
    header[13] = shift;

    header[127]=0x55555555;
    return 1;
}
    1330:	mov	r0, r3
    rtc_get_datetime(&t);

    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    1332:	str.w	ip, [r4, #20]
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    header[10] = t_on;
    1336:	str	r7, [r4, #40]	; 0x28
    header[11] = t_off;
    1338:	str	r6, [r4, #44]	; 0x2c
    header[12] = proc;
    133a:	str	r5, [r4, #48]	; 0x30
    header[13] = shift;
    133c:	str	r1, [r4, #52]	; 0x34

    header[127]=0x55555555;
    133e:	str.w	r2, [r4, #508]	; 0x1fc
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    1342:	str	r3, [r4, #32]
    header[12] = proc;
    header[13] = shift;

    header[127]=0x55555555;
    return 1;
}
    1344:	add	sp, #36	; 0x24
    1346:	pop	{r4, r5, r6, r7, pc}
    1348:	.word	0x20000c4c
    134c:	.word	0x20000c28
    1350:	.word	0x20005864
    1354:	.word	0x20002174
    1358:	.word	0x200021b4
    135c:	.word	0x200021b8
    1360:	.word	0x20017c7c
    1364:	.word	0x20017ca0
    1368:	.word	0x20017c9c

0000136c <checkEndOfFile(short)>:

int16_t checkEndOfFile(int16_t status)
{ static volatile uint32_t tx_=0;
    136c:	push	{r4, lr}
    136e:	mov	r4, r0
  uint32_t tx;
  tx=rtc_get();
    1370:	bl	8028 <rtc_get>
  tx = tx % t_acq;
    1374:	ldr	r3, [pc, #32]	; (1398 <checkEndOfFile(short)+0x2c>)
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    1376:	cmp	r4, #1

int16_t checkEndOfFile(int16_t status)
{ static volatile uint32_t tx_=0;
  uint32_t tx;
  tx=rtc_get();
  tx = tx % t_acq;
    1378:	ldr	r3, [r3, #0]
    137a:	udiv	r2, r0, r3
    137e:	mls	r0, r2, r3, r0
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    1382:	ldr	r3, [pc, #24]	; (139c <checkEndOfFile(short)+0x30>)
    1384:	ble.n	1392 <checkEndOfFile(short)+0x26>
    1386:	ldr	r2, [r3, #0]
    1388:	cbz	r2, 1392 <checkEndOfFile(short)+0x26>
    138a:	ldr	r2, [r3, #0]
    138c:	cmp	r0, r2
    138e:	it	cc
    1390:	movcc	r4, #3
  tx_=tx;
    1392:	str	r0, [r3, #0]
  return status;  
}
    1394:	mov	r0, r4
    1396:	pop	{r4, pc}
    1398:	.word	0x200021b4
    139c:	.word	0x200173d8

000013a0 <newDirectory(char*)>:
  ho=h;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
    13a0:	push	{r4, r5, r6, r7, lr}
    13a2:	sub	sp, #28
    13a4:	mov	r4, r0
    return 0;
}

uint16_t newFolder(int h)
{ static int ho=-1;
  if(h==ho) return 0;
    13a6:	ldr	r6, [pc, #148]	; (143c <newDirectory(char*)+0x9c>)
}

int16_t newDirectory(char *dirName)
{   
    datetime_t t;
    rtc_get_datetime(&t);
    13a8:	add	r0, sp, #16
    13aa:	bl	7ac <rtc_get_datetime(datetime_t*)>

    if(t_acq<600)
    13ae:	ldr	r3, [pc, #144]	; (1440 <newDirectory(char*)+0xa0>)
    13b0:	ldr	r3, [r3, #0]
    13b2:	cmp.w	r3, #600	; 0x258
    13b6:	bcs.n	13e8 <newDirectory(char*)+0x48>
    {
      if(newFolder(t.hour))
    13b8:	ldrsb.w	r5, [sp, #21]
    return 0;
}

uint16_t newFolder(int h)
{ static int ho=-1;
  if(h==ho) return 0;
    13bc:	ldr	r3, [r6, #0]
    13be:	cmp	r5, r3
    13c0:	beq.n	1434 <newDirectory(char*)+0x94>
    if(t_acq<600)
    {
      if(newFolder(t.hour))
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
    13c2:	ldrsb.w	r1, [sp, #18]
    13c6:	mov	r0, r4
    13c8:	ldrsh.w	r2, [sp, #16]
    13cc:	ldrsb.w	r7, [sp, #19]

    if(t_acq<600)
    {
      if(newFolder(t.hour))
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    13d0:	ldr	r3, [pc, #112]	; (1444 <newDirectory(char*)+0xa4>)
}

uint16_t newFolder(int h)
{ static int ho=-1;
  if(h==ho) return 0;
  ho=h;
    13d2:	str	r5, [r6, #0]
    if(t_acq<600)
    {
      if(newFolder(t.hour))
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
    13d4:	ldr	r3, [r3, #0]
    13d6:	str	r1, [sp, #4]
    13d8:	str	r2, [sp, #0]
    13da:	str	r5, [sp, #12]
    13dc:	str	r7, [sp, #8]
    13de:	ldr	r2, [pc, #104]	; (1448 <newDirectory(char*)+0xa8>)
    13e0:	ldr	r1, [pc, #104]	; (144c <newDirectory(char*)+0xac>)
    13e2:	bl	9bd4 <sprintf>
    13e6:	b.n	1410 <newDirectory(char*)+0x70>
          return 1;   // have new directory
      }
    }
    else
    {
      if(newFolder(t.day))
    13e8:	ldrsb.w	r5, [sp, #19]
    return 0;
}

uint16_t newFolder(int h)
{ static int ho=-1;
  if(h==ho) return 0;
    13ec:	ldr	r3, [r6, #0]
    13ee:	cmp	r3, r5
    13f0:	beq.n	1434 <newDirectory(char*)+0x94>
    else
    {
      if(newFolder(t.day))
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/", 
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day);
    13f2:	ldrsb.w	r1, [sp, #18]
    13f6:	mov	r0, r4
    13f8:	ldrsh.w	r2, [sp, #16]
    }
    else
    {
      if(newFolder(t.day))
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/", 
    13fc:	ldr	r3, [pc, #68]	; (1444 <newDirectory(char*)+0xa4>)
}

uint16_t newFolder(int h)
{ static int ho=-1;
  if(h==ho) return 0;
  ho=h;
    13fe:	str	r5, [r6, #0]
    else
    {
      if(newFolder(t.day))
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/", 
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day);
    1400:	ldr	r3, [r3, #0]
    1402:	str	r1, [sp, #4]
    1404:	str	r2, [sp, #0]
    1406:	str	r5, [sp, #8]
    1408:	ldr	r2, [pc, #60]	; (1448 <newDirectory(char*)+0xa8>)
    140a:	ldr	r1, [pc, #68]	; (1450 <newDirectory(char*)+0xb0>)
    140c:	bl	9bd4 <sprintf>
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
    1410:	ldr	r0, [pc, #64]	; (1454 <newDirectory(char*)+0xb4>)
    1412:	bl	8900 <Print::println()>
    1416:	movs	r1, #2
    1418:	ldr	r0, [pc, #60]	; (1458 <newDirectory(char*)+0xb8>)
    141a:	bl	7054 <usb_serial_write>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    141e:	cbz	r4, 142e <newDirectory(char*)+0x8e>
							  return write((const uint8_t *)str, strlen(str)); }
    1420:	mov	r0, r4
    1422:	bl	9d40 <strlen>
    1426:	mov	r1, r0
    1428:	mov	r0, r4
    142a:	bl	7054 <usb_serial_write>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
          return 1;   // have new directory
    142e:	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
    1430:	add	sp, #28
    1432:	pop	{r4, r5, r6, r7, pc}
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory
    1434:	movs	r0, #0

}
    1436:	add	sp, #28
    1438:	pop	{r4, r5, r6, r7, pc}
    143a:	nop
    143c:	.word	0x20001bd8
    1440:	.word	0x200021b4
    1444:	.word	0x20005864
    1448:	.word	0x20000c68
    144c:	.word	0x20000c6c
    1450:	.word	0x20000c8c
    1454:	.word	0x20001bc8
    1458:	.word	0x20000c88

0000145c <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    145c:	push	{r4, lr}
    145e:	sub	sp, #16
    1460:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    1462:	add	r0, sp, #8
    1464:	bl	7ac <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    1468:	ldr	r3, [pc, #96]	; (14cc <newFileName(char*)+0x70>)
    146a:	ldrsh.w	r3, [r3]
    146e:	cbz	r3, 14ae <newFileName(char*)+0x52>
      sprintf(fileName, "%s_%02d%02d%02d.wav", FilePrefix, t.hour,t.min,t.sec);
    else
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    1470:	ldrsb.w	r1, [sp, #15]
    1474:	mov	r0, r4
    1476:	ldrsb.w	r2, [sp, #14]
    147a:	str	r1, [sp, #4]
    147c:	str	r2, [sp, #0]
    147e:	ldrsb.w	r3, [sp, #13]
    1482:	ldr	r2, [pc, #76]	; (14d0 <newFileName(char*)+0x74>)
    1484:	ldr	r1, [pc, #76]	; (14d4 <newFileName(char*)+0x78>)
    1486:	bl	9bd4 <sprintf>
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    148a:	ldr	r0, [pc, #76]	; (14d8 <newFileName(char*)+0x7c>)
    148c:	bl	8900 <Print::println()>
    1490:	movs	r1, #2
    1492:	ldr	r0, [pc, #72]	; (14dc <newFileName(char*)+0x80>)
    1494:	bl	7054 <usb_serial_write>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1498:	cbz	r4, 14a8 <newFileName(char*)+0x4c>
							  return write((const uint8_t *)str, strlen(str)); }
    149a:	mov	r0, r4
    149c:	bl	9d40 <strlen>
    14a0:	mov	r1, r0
    14a2:	mov	r0, r4
    14a4:	bl	7054 <usb_serial_write>
    return 1;
}
    14a8:	movs	r0, #1
    14aa:	add	sp, #16
    14ac:	pop	{r4, pc}
int16_t newFileName(char *fileName)
{
    datetime_t t;
    rtc_get_datetime(&t);
    if(proc==0)
      sprintf(fileName, "%s_%02d%02d%02d.wav", FilePrefix, t.hour,t.min,t.sec);
    14ae:	ldrsb.w	r1, [sp, #15]
    14b2:	mov	r0, r4
    14b4:	ldrsb.w	r2, [sp, #14]
    14b8:	str	r1, [sp, #4]
    14ba:	str	r2, [sp, #0]
    14bc:	ldrsb.w	r3, [sp, #13]
    14c0:	ldr	r2, [pc, #12]	; (14d0 <newFileName(char*)+0x74>)
    14c2:	ldr	r1, [pc, #28]	; (14e0 <newFileName(char*)+0x84>)
    14c4:	bl	9bd4 <sprintf>
    14c8:	b.n	148a <newFileName(char*)+0x2e>
    14ca:	nop
    14cc:	.word	0x20017c9c
    14d0:	.word	0x20000ca4
    14d4:	.word	0x20000cbc
    14d8:	.word	0x20001bc8
    14dc:	.word	0x20000c88
    14e0:	.word	0x20000ca8

000014e4 <storeData(short)>:
static int32_t fileHeader[128];
uint32_t nbuf;

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    14e4:	push	{r4, r5, r6, r7, lr}
    if(status==CLOSED) // file closed: should open
    14e6:	mov	r4, r0
static int32_t fileHeader[128];
uint32_t nbuf;

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    14e8:	sub	sp, #84	; 0x54
    if(status==CLOSED) // file closed: should open
    14ea:	cbz	r0, 1506 <storeData(short)+0x22>
        else
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    14ec:	cmp	r0, #1
    14ee:	beq.w	17c4 <storeData(short)+0x2e0>
        { status = DOCLOSE;
        } 
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    14f2:	cmp	r0, #2
    14f4:	beq.w	1840 <storeData(short)+0x35c>
    14f8:	subs	r5, r0, #3
    14fa:	uxth	r5, r5
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    }    

    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    14fc:	cmp	r5, #1
    14fe:	bls.n	15ca <storeData(short)+0xe6>
            file.close();
        }
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    }
    return status;
}
    1500:	mov	r0, r4
    1502:	add	sp, #84	; 0x54
    1504:	pop	{r4, r5, r6, r7, pc}
{
    if(status==CLOSED) // file closed: should open
    {   //doTransactions(true);
        //if(!checkDiskSpace()) {return STOPPED;}
        //
        if(newDirectory(dirName))
    1506:	ldr	r0, [pc, #716]	; (17d4 <storeData(short)+0x2f0>)
    1508:	bl	13a0 <newDirectory(char*)>
    150c:	cmp	r0, #0
    150e:	bne.n	15f2 <storeData(short)+0x10e>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
        }
        
        if(newFileName(fileName))
    1510:	ldr	r0, [pc, #708]	; (17d8 <storeData(short)+0x2f4>)
    1512:	bl	145c <newFileName(char*)>
    1516:	cmp	r0, #0
    1518:	beq.w	178e <storeData(short)+0x2aa>
        {   
            file = sd.open(fileName, FILE_WRITE); 
    151c:	movw	r3, #16898	; 0x4202
    1520:	ldr	r2, [pc, #692]	; (17d8 <storeData(short)+0x2f4>)
    1522:	ldr	r1, [pc, #696]	; (17dc <storeData(short)+0x2f8>)
    1524:	mov	r0, sp
    1526:	bl	4be8 <FsVolume::open(char const*, int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    152a:	ldr	r6, [pc, #692]	; (17e0 <storeData(short)+0x2fc>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    152c:	ldr	r2, [sp, #8]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template <class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
    152e:	add	r1, sp, #16
    1530:	ldrb.w	r3, [sp, #12]
    1534:	add.w	r0, r6, #16
    1538:	ldr	r4, [sp, #4]
    153a:	str	r2, [r6, #8]
    153c:	strb	r3, [r6, #12]
    153e:	str	r4, [r6, #4]
    1540:	bl	49d0 <FsBaseFile::operator=(FsBaseFile const&)>
    1544:	ldr	r3, [pc, #668]	; (17e4 <storeData(short)+0x300>)
   * \param[in] oflag Values for \a oflag are constructed by a bitwise-inclusive
   * OR of open flags. see FatFile::open(FatFile*, const char*, uint8_t).
   */
  FsBaseFile(const char* path, oflag_t oflag) { open(path, oflag); }

  ~FsBaseFile() { close(); }
    1546:	add	r0, sp, #16
    1548:	str	r3, [sp, #0]
    154a:	bl	49a8 <FsBaseFile::close()>
    return m_fFile   ? m_fFile->isHidden()
           : m_xFile ? m_xFile->isHidden()
                     : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const { return m_fFile || m_xFile; }
    154e:	ldr	r3, [r6, #72]	; 0x48
    1550:	cmp	r3, #0
    1552:	beq.w	1778 <storeData(short)+0x294>
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    {   nbuf=0;
        char *hdr=0;
        if(proc==0)
    1556:	ldr	r3, [pc, #656]	; (17e8 <storeData(short)+0x304>)
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    {   nbuf=0;
    1558:	movs	r2, #0
    155a:	ldr	r4, [pc, #656]	; (17ec <storeData(short)+0x308>)
        char *hdr=0;
        if(proc==0)
    155c:	ldrsh.w	r3, [r3]
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    {   nbuf=0;
    1560:	str	r2, [r4, #0]
        char *hdr=0;
        if(proc==0)
    1562:	cmp	r3, #0
    1564:	beq.n	1648 <storeData(short)+0x164>

          hdr = headerInit(fsamp, nchan, nbits, SerNum);
        }  
        else
        {
          makeHeader(fileHeader);
    1566:	ldr	r0, [pc, #648]	; (17f0 <storeData(short)+0x30c>)
    1568:	bl	12c8 <makeHeader(long*)>
    156c:	ldr	r0, [r6, #72]	; 0x48
          hdr=(char *)fileHeader;
    156e:	ldr	r1, [pc, #640]	; (17f0 <storeData(short)+0x30c>)
    1570:	ldr	r3, [pc, #620]	; (17e0 <storeData(short)+0x2fc>)
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
                     : 0;
    1572:	cmp	r0, #0
    1574:	beq.n	1662 <storeData(short)+0x17e>
    1576:	mov.w	r2, #512	; 0x200
    157a:	bl	3d58 <FatFile::write(void const*, unsigned int)>
        }
        if(file.write(hdr,512) < 512) 
    157e:	cmp.w	r0, #512	; 0x200
    1582:	bcc.n	1674 <storeData(short)+0x190>
    1584:	ldr	r0, [r6, #72]	; 0x48
    1586:	ldr	r3, [pc, #600]	; (17e0 <storeData(short)+0x2fc>)
    1588:	cmp	r0, #0
    158a:	beq.w	16b2 <storeData(short)+0x1ce>
    158e:	mov.w	r2, #4096	; 0x1000
    1592:	ldr	r1, [pc, #608]	; (17f4 <storeData(short)+0x310>)
    1594:	bl	3d58 <FatFile::write(void const*, unsigned int)>
    1598:	mov	r5, r0
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    159a:	cmp.w	r5, #4096	; 0x1000
    159e:	bcc.w	1722 <storeData(short)+0x23e>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
    15a2:	ldr	r3, [r4, #0]
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    15a4:	mov.w	r5, #1000	; 0x3e8
    15a8:	ldr	r2, [pc, #588]	; (17f8 <storeData(short)+0x314>)
    if(status==RUNNING) // file is open, header written: store data records
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
    15aa:	adds	r3, #1
        disk_count++;
    15ac:	ldr	r0, [pc, #588]	; (17fc <storeData(short)+0x318>)
        if((nbuf % 1000)==0 ) file.flush();
    15ae:	umull	r1, r2, r2, r3
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
    15b2:	ldr	r1, [r0, #0]
    if(status==RUNNING) // file is open, header written: store data records
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
    15b4:	str	r3, [r4, #0]
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    15b6:	lsrs	r2, r2, #6
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
    15b8:	adds	r1, #1
        if((nbuf % 1000)==0 ) file.flush();
    15ba:	mls	r3, r5, r2, r3
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
    15be:	str	r1, [r0, #0]
        if((nbuf % 1000)==0 ) file.flush();
    15c0:	cmp	r3, #0
    15c2:	beq.w	1838 <storeData(short)+0x354>
    15c6:	movs	r4, #2
    15c8:	b.n	1500 <storeData(short)+0x1c>
    15ca:	ldr	r6, [pc, #532]	; (17e0 <storeData(short)+0x2fc>)
    15cc:	subs	r4, #3
    15ce:	it	ne
    15d0:	movne.w	r4, #4294967295
    return m_fFile   ? m_fFile->isHidden()
           : m_xFile ? m_xFile->isHidden()
                     : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const { return m_fFile || m_xFile; }
    15d4:	ldr	r3, [r6, #72]	; 0x48
    15d6:	ldr	r2, [pc, #520]	; (17e0 <storeData(short)+0x2fc>)
    15d8:	cmp	r3, #0
    15da:	beq.n	16c6 <storeData(short)+0x1e2>
    }    

    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    {   if(file)
        {   if(proc==0)
    15dc:	ldr	r3, [pc, #520]	; (17e8 <storeData(short)+0x304>)
    15de:	ldrsh.w	r3, [r3]
    15e2:	cmp	r3, #0
    15e4:	beq.n	16ce <storeData(short)+0x1ea>
            {
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
              writeHeader(hdr);

            }
            file.close();
    15e6:	ldr	r0, [pc, #536]	; (1800 <storeData(short)+0x31c>)
    15e8:	bl	49a8 <FsBaseFile::close()>
        }
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    }
    return status;
}
    15ec:	mov	r0, r4
    15ee:	add	sp, #84	; 0x54
    15f0:	pop	{r4, r5, r6, r7, pc}
    15f2:	ldr	r6, [pc, #488]	; (17dc <storeData(short)+0x2f8>)
    15f4:	ldr.w	r5, [r6, #1152]	; 0x480
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol   ? m_fVol->exists(path)
           : m_xVol ? m_xVol->exists(path)
                    : false;
    15f8:	cmp	r5, #0
    15fa:	beq.n	1678 <storeData(short)+0x194>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    15fc:	mov	r3, r4
    15fe:	mov	r1, r5
    1600:	ldr	r2, [pc, #464]	; (17d4 <storeData(short)+0x2f0>)
    1602:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    1604:	strb.w	r4, [sp]
    1608:	mov	r7, sp
    160a:	strb.w	r4, [sp, #1]
    160e:	strb.w	r4, [sp, #2]
    1612:	bl	3998 <FatFile::open(FatVolume*, char const*, int)>
    1616:	mov	r4, r0
    if(status==CLOSED) // file closed: should open
    {   //doTransactions(true);
        //if(!checkDiskSpace()) {return STOPPED;}
        //
        if(newDirectory(dirName))
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    1618:	cmp	r4, #0
    161a:	beq.w	1794 <storeData(short)+0x2b0>
    161e:	ldr.w	r0, [r6, #1152]	; 0x480
    1622:	ldr	r3, [pc, #440]	; (17dc <storeData(short)+0x2f8>)
   * Set volume working directory.
   * \param[in] path Path for volume working directory.
   * \return true for success or false for failure.
   */
  bool chdir(const char* path) {
    return m_fVol ? m_fVol->chdir(path) : m_xVol ? m_xVol->chdir(path) : false;
    1624:	cmp	r0, #0
    1626:	beq.n	169c <storeData(short)+0x1b8>
    1628:	ldr	r1, [pc, #424]	; (17d4 <storeData(short)+0x2f0>)
    162a:	bl	4214 <FatVolume::chdir(char const*)>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    162e:	cmp	r0, #0
    1630:	bne.w	1510 <storeData(short)+0x2c>
    1634:	movs	r1, #11
    1636:	ldr	r0, [pc, #460]	; (1804 <storeData(short)+0x320>)
    1638:	bl	7054 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    163c:	ldr	r0, [pc, #456]	; (1808 <storeData(short)+0x324>)
    163e:	bl	8900 <Print::println()>
    1642:	mov.w	r4, #4294967295
    1646:	b.n	1500 <storeData(short)+0x1c>
        char *hdr=0;
        if(proc==0)
        { int nchan=NBUF_ACQ;
          int nbits = 32;

          hdr = headerInit(fsamp, nchan, nbits, SerNum);
    1648:	ldr	r3, [pc, #448]	; (180c <storeData(short)+0x328>)
    164a:	movs	r1, #128	; 0x80
    164c:	ldr	r0, [pc, #448]	; (1810 <storeData(short)+0x32c>)
    164e:	movs	r2, #32
    1650:	ldr	r3, [r3, #0]
    1652:	ldr	r0, [r0, #0]
    1654:	bl	1158 <headerInit(long, long, long, int)>
    1658:	mov	r1, r0
    165a:	ldr	r0, [r6, #72]	; 0x48
    165c:	ldr	r3, [pc, #384]	; (17e0 <storeData(short)+0x2fc>)
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
                     : 0;
    165e:	cmp	r0, #0
    1660:	bne.n	1576 <storeData(short)+0x92>
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
    1662:	ldr	r0, [r3, #76]	; 0x4c
                     : 0;
    1664:	cmp	r0, #0
    1666:	beq.w	17c0 <storeData(short)+0x2dc>
    166a:	mov.w	r2, #512	; 0x200
    166e:	bl	324c <ExFatFile::write(void const*, unsigned int)>
    1672:	b.n	157e <storeData(short)+0x9a>
        {
          makeHeader(fileHeader);
          hdr=(char *)fileHeader;
        }
        if(file.write(hdr,512) < 512) 
        { status = DOCLOSE;
    1674:	movs	r4, #0
    1676:	b.n	15d4 <storeData(short)+0xf0>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol   ? m_fVol->exists(path)
           : m_xVol ? m_xVol->exists(path)
    1678:	ldr.w	r1, [r6, #1156]	; 0x484
                    : false;
    167c:	cmp	r1, #0
    167e:	beq.n	170c <storeData(short)+0x228>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1680:	mov	r3, r5
    1682:	ldr	r2, [pc, #336]	; (17d4 <storeData(short)+0x2f0>)
    1684:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    1686:	strb.w	r5, [sp, #49]	; 0x31
    168a:	strb.w	r5, [sp, #50]	; 0x32
    168e:	mov	r7, sp
    1690:	strb.w	r5, [sp, #51]	; 0x33
    1694:	bl	28d0 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1698:	mov	r4, r0
    169a:	b.n	1618 <storeData(short)+0x134>
   * Set volume working directory.
   * \param[in] path Path for volume working directory.
   * \return true for success or false for failure.
   */
  bool chdir(const char* path) {
    return m_fVol ? m_fVol->chdir(path) : m_xVol ? m_xVol->chdir(path) : false;
    169c:	ldr.w	r0, [r3, #1156]	; 0x484
    16a0:	cmp	r0, #0
    16a2:	beq.n	1634 <storeData(short)+0x150>
    16a4:	ldr	r1, [pc, #300]	; (17d4 <storeData(short)+0x2f0>)
    16a6:	bl	2cf0 <ExFatVolume::chdir(char const*)>
    {   //doTransactions(true);
        //if(!checkDiskSpace()) {return STOPPED;}
        //
        if(newDirectory(dirName))
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    16aa:	cmp	r0, #0
    16ac:	bne.w	1510 <storeData(short)+0x2c>
    16b0:	b.n	1634 <storeData(short)+0x150>
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
    16b2:	ldr	r0, [r3, #76]	; 0x4c
                     : 0;
    16b4:	cmp	r0, #0
    16b6:	beq.n	1720 <storeData(short)+0x23c>
    16b8:	mov.w	r2, #4096	; 0x1000
    16bc:	ldr	r1, [pc, #308]	; (17f4 <storeData(short)+0x310>)
    16be:	bl	324c <ExFatFile::write(void const*, unsigned int)>
    16c2:	mov	r5, r0
    16c4:	b.n	159a <storeData(short)+0xb6>
    return m_fFile   ? m_fFile->isHidden()
           : m_xFile ? m_xFile->isHidden()
                     : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const { return m_fFile || m_xFile; }
    16c6:	ldr	r3, [r2, #76]	; 0x4c
    16c8:	cmp	r3, #0
    16ca:	bne.n	15dc <storeData(short)+0xf8>
    16cc:	b.n	1500 <storeData(short)+0x1c>
    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    {   if(file)
        {   if(proc==0)
            {
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    16ce:	ldr	r2, [pc, #284]	; (17ec <storeData(short)+0x308>)
  return (char *)&wav_hdr;
}

char * headerUpdate(int32_t nbytes)
{
  wav_hdr.dLen = nbytes;
    16d0:	ldr	r3, [pc, #320]	; (1814 <storeData(short)+0x330>)
    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    {   if(file)
        {   if(proc==0)
            {
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    16d2:	ldr	r2, [r2, #0]
}

char * headerUpdate(int32_t nbytes)
{
  wav_hdr.dLen = nbytes;
  wav_hdr.rLen += wav_hdr.dLen;
    16d4:	ldr	r1, [r3, #4]
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    {   if(file)
        {   if(proc==0)
            {
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
              writeHeader(hdr);
    16d6:	mov	r0, r3
    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    {   if(file)
        {   if(proc==0)
            {
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    16d8:	lsls	r2, r2, #12
}

char * headerUpdate(int32_t nbytes)
{
  wav_hdr.dLen = nbytes;
  wav_hdr.rLen += wav_hdr.dLen;
    16da:	add	r1, r2
  return (char *)&wav_hdr;
}

char * headerUpdate(int32_t nbytes)
{
  wav_hdr.dLen = nbytes;
    16dc:	str.w	r2, [r3, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    16e0:	str	r1, [r3, #4]
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    {   if(file)
        {   if(proc==0)
            {
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
              writeHeader(hdr);
    16e2:	bl	1220 <writeHeader(char*)>
    16e6:	b.n	15e6 <storeData(short)+0x102>
    16e8:	ldr.w	r1, [r3, #1156]	; 0x484
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
           : m_xVol ? m_xVol->mkdir(path, pFlag)
                    : false;
    16ec:	cbz	r1, 170c <storeData(short)+0x228>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    16ee:	add.w	r1, r1, #1096	; 0x448
    16f2:	mov	r0, r7
    16f4:	movs	r3, #1
    16f6:	ldr	r2, [pc, #220]	; (17d4 <storeData(short)+0x2f0>)
    16f8:	strb.w	r4, [sp, #49]	; 0x31
    16fc:	strb.w	r4, [sp, #50]	; 0x32
    1700:	strb.w	r4, [sp, #51]	; 0x33
    1704:	bl	3094 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    if(status==CLOSED) // file closed: should open
    {   //doTransactions(true);
        //if(!checkDiskSpace()) {return STOPPED;}
        //
        if(newDirectory(dirName))
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    1708:	cmp	r0, #0
    170a:	bne.n	161e <storeData(short)+0x13a>
    170c:	movs	r1, #11
    170e:	ldr	r0, [pc, #264]	; (1818 <storeData(short)+0x334>)
    1710:	bl	7054 <usb_serial_write>
    1714:	ldr	r0, [pc, #240]	; (1808 <storeData(short)+0x324>)
    1716:	bl	8900 <Print::println()>
    171a:	mov.w	r4, #4294967295
    171e:	b.n	1500 <storeData(short)+0x1c>
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
                     : 0;
    1720:	mov	r5, r0
    1722:	movs	r1, #1
    1724:	ldr	r0, [pc, #244]	; (181c <storeData(short)+0x338>)
    1726:	bl	7054 <usb_serial_write>
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    172a:	movs	r2, #10
    172c:	movs	r3, #0
    172e:	mov	r1, r5
    1730:	ldr	r0, [pc, #212]	; (1808 <storeData(short)+0x324>)
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    1732:	mov.w	r5, #1000	; 0x3e8
    1736:	bl	8954 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    173a:	movs	r1, #1
    173c:	ldr	r0, [pc, #224]	; (1820 <storeData(short)+0x33c>)
    173e:	bl	7054 <usb_serial_write>
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	// Print a signed number
	size_t print(int n)				{ return print((long)n); }
    1742:	movs	r1, #2
    1744:	ldr	r0, [pc, #192]	; (1808 <storeData(short)+0x324>)
    1746:	bl	89d4 <Print::print(long)>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
    174a:	ldr	r0, [pc, #188]	; (1808 <storeData(short)+0x324>)
    174c:	bl	8900 <Print::println()>
    1750:	ldr	r0, [r4, #0]
    1752:	ldr	r3, [pc, #164]	; (17f8 <storeData(short)+0x314>)
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
    1754:	ldr	r1, [pc, #164]	; (17fc <storeData(short)+0x318>)
        if((nbuf % 1000)==0 ) file.flush();
    1756:	umull	r2, r3, r3, r0
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
    175a:	ldr	r2, [r1, #0]
        if((nbuf % 1000)==0 ) file.flush();
    175c:	lsrs	r3, r3, #6
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
    175e:	adds	r2, #1
        if((nbuf % 1000)==0 ) file.flush();
    1760:	mls	r5, r5, r3, r0
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
    1764:	str	r2, [r1, #0]
        if((nbuf % 1000)==0 ) file.flush();
    1766:	cmp	r5, #0
    1768:	bne.n	1674 <storeData(short)+0x190>
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    176a:	movs	r4, #3
    176c:	ldr	r0, [r6, #72]	; 0x48
    176e:	ldr	r3, [pc, #112]	; (17e0 <storeData(short)+0x2fc>)
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    1770:	cbz	r0, 17c8 <storeData(short)+0x2e4>
    1772:	bl	3d4c <FatFile::sync()>
    1776:	b.n	14fc <storeData(short)+0x18>
    return m_fFile   ? m_fFile->isHidden()
           : m_xFile ? m_xFile->isHidden()
                     : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const { return m_fFile || m_xFile; }
    1778:	ldr	r3, [r6, #76]	; 0x4c
    177a:	cmp	r3, #0
    177c:	bne.w	1556 <storeData(short)+0x72>
    1780:	movs	r1, #17
    1782:	ldr	r0, [pc, #160]	; (1824 <storeData(short)+0x340>)
    1784:	bl	7054 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    1788:	ldr	r0, [pc, #124]	; (1808 <storeData(short)+0x324>)
    178a:	bl	8900 <Print::println()>
            if(file) 
            { status = OPENED; 
            }
            else 
            {   Serial.println("Failing open file");
                return STOPPED; 
    178e:	mov.w	r4, #4294967295
    1792:	b.n	1500 <storeData(short)+0x1c>
    1794:	ldr.w	r1, [r6, #1152]	; 0x480
    1798:	ldr	r3, [pc, #64]	; (17dc <storeData(short)+0x2f8>)
    179a:	cmp	r1, #0
    179c:	beq.n	16e8 <storeData(short)+0x204>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    179e:	addw	r1, r1, #1092	; 0x444
    17a2:	mov	r0, r7
    17a4:	movs	r3, #1
    17a6:	ldr	r2, [pc, #44]	; (17d4 <storeData(short)+0x2f0>)
    17a8:	strb.w	r4, [sp]
    17ac:	strb.w	r4, [sp, #1]
    17b0:	strb.w	r4, [sp, #2]
    17b4:	bl	3804 <FatFile::mkdir(FatFile*, char const*, bool)>
    if(status==CLOSED) // file closed: should open
    {   //doTransactions(true);
        //if(!checkDiskSpace()) {return STOPPED;}
        //
        if(newDirectory(dirName))
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    17b8:	cmp	r0, #0
    17ba:	bne.w	161e <storeData(short)+0x13a>
    17be:	b.n	170c <storeData(short)+0x228>
        {
          makeHeader(fileHeader);
          hdr=(char *)fileHeader;
        }
        if(file.write(hdr,512) < 512) 
        { status = DOCLOSE;
    17c0:	movs	r4, #3
    17c2:	b.n	15cc <storeData(short)+0xe8>
    17c4:	ldr	r6, [pc, #24]	; (17e0 <storeData(short)+0x2fc>)
    17c6:	b.n	1556 <storeData(short)+0x72>
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    17c8:	ldr	r0, [r3, #76]	; 0x4c
    17ca:	cbz	r0, 1828 <storeData(short)+0x344>
    17cc:	bl	2f34 <ExFatFile::sync()>
    17d0:	b.n	14fc <storeData(short)+0x18>
    17d2:	nop
    17d4:	.word	0x20016cf0
    17d8:	.word	0x20017140
    17dc:	.word	0x200177bc
    17e0:	.word	0x20017684
    17e4:	.word	0x200003b0
    17e8:	.word	0x20017c9c
    17ec:	.word	0x20017700
    17f0:	.word	0x2000686c
    17f4:	.word	0x2000586c
    17f8:	.word	0x10624dd3
    17fc:	.word	0x20017670
    1800:	.word	0x20017694
    1804:	.word	0x20000cdc
    1808:	.word	0x20001bc8
    180c:	.word	0x20005864
    1810:	.word	0x20002174
    1814:	.word	0x20016f40
    1818:	.word	0x20000cd0
    181c:	.word	0x20000ce8
    1820:	.word	0x20000c48
    1824:	.word	0x20000cec
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    }    

    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1828:	cmp	r5, #1
    182a:	bhi.w	1500 <storeData(short)+0x1c>
    182e:	subs	r4, #3
    1830:	it	ne
    1832:	movne.w	r4, #4294967295
    1836:	b.n	1500 <storeData(short)+0x1c>
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    1838:	movw	r5, #65535	; 0xffff
    183c:	movs	r4, #2
    183e:	b.n	176c <storeData(short)+0x288>
    1840:	ldr	r6, [pc, #4]	; (1848 <storeData(short)+0x364>)
    1842:	ldr	r4, [pc, #8]	; (184c <storeData(short)+0x368>)
    1844:	b.n	1584 <storeData(short)+0xa0>
    1846:	nop
    1848:	.word	0x20017684
    184c:	.word	0x20017700

00001850 <saveData(short)>:
    return status;
}
//
volatile uint32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    1850:	push	{r3, r4, r5, r6, r7, lr}
    if(status==STOPPED) 
    1852:	adds	r3, r0, #1
    1854:	beq.n	18ae <saveData(short)+0x5e>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    1856:	ldr	r4, [pc, #152]	; (18f0 <saveData(short)+0xa0>)
    1858:	movs	r7, #8
      digitalWriteFast(13,HIGH);
    }
    else
      digitalWriteFast(13,LOW);

    if(status<CLOSED) return status; // we are stopped: don't do anything
    185a:	cmp	r0, #0
    185c:	str.w	r7, [r4, #136]	; 0x88
    1860:	blt.n	18ee <saveData(short)+0x9e>

    status=checkEndOfFile(status);
    1862:	bl	136c <checkEndOfFile(short)>
    1866:	mov	r6, r0

    if(getDataCount()>=NDBL)
    1868:	bl	7c <getDataCount()>
    186c:	cmp	r0, #7
    186e:	bls.n	18de <saveData(short)+0x8e>
    1870:	ldr	r5, [pc, #128]	; (18f4 <saveData(short)+0xa4>)
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    1872:	str.w	r7, [r4, #132]	; 0x84
    1876:	add.w	r7, r5, #4096	; 0x1000
    { 
      digitalWriteFast(13,HIGH);
      for(int ii=0; ii<NDBL; ii++)
      { while(queue_isBusy()); //wait if acq writes to queue
    187a:	bl	9c <queue_isBusy()>
    187e:	mov	r4, r0
    1880:	cmp	r0, #0
    1882:	bne.n	187a <saveData(short)+0x2a>
        pullData(&diskBuffer[ii*NBUF_ACQ]);
    1884:	mov	r0, r5
    1886:	add.w	r5, r5, #512	; 0x200
    188a:	bl	12c <pullData(unsigned long*)>
    status=checkEndOfFile(status);

    if(getDataCount()>=NDBL)
    { 
      digitalWriteFast(13,HIGH);
      for(int ii=0; ii<NDBL; ii++)
    188e:	cmp	r5, r7
    1890:	bne.n	187a <saveData(short)+0x2a>
    1892:	ldr	r3, [pc, #100]	; (18f8 <saveData(short)+0xa8>)
    1894:	ldr	r2, [pc, #100]	; (18fc <saveData(short)+0xac>)
      { while(queue_isBusy()); //wait if acq writes to queue
        pullData(&diskBuffer[ii*NBUF_ACQ]);
      }
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    1896:	ldr.w	r1, [r3, #4]!
    189a:	str.w	r1, [r2, r4, lsl #2]
    189e:	adds	r4, #1
    18a0:	cmp	r4, #8
    18a2:	bne.n	1896 <saveData(short)+0x46>
      if(haveStore)
    18a4:	ldr	r3, [pc, #88]	; (1900 <saveData(short)+0xb0>)
        status=storeData(status);
    18a6:	mov	r0, r6
      for(int ii=0; ii<NDBL; ii++)
      { while(queue_isBusy()); //wait if acq writes to queue
        pullData(&diskBuffer[ii*NBUF_ACQ]);
      }
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
      if(haveStore)
    18a8:	ldr	r3, [r3, #0]
    18aa:	cbnz	r3, 18e6 <saveData(short)+0x96>
    }
    else
      digitalWriteFast(13,LOW);

    return status;
}
    18ac:	pop	{r3, r4, r5, r6, r7, pc}
volatile uint32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    if(status==STOPPED) 
    { 
      while(queue_isBusy()); //wait if acq writes to queue
    18ae:	bl	9c <queue_isBusy()>
    18b2:	mov	r4, r0
    18b4:	cmp	r0, #0
    18b6:	bne.n	18ae <saveData(short)+0x5e>
      pullData(diskBuffer);
    18b8:	ldr	r0, [pc, #56]	; (18f4 <saveData(short)+0xa4>)
    18ba:	bl	12c <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    18be:	mov	r3, r4
    18c0:	ldr	r1, [pc, #52]	; (18f8 <saveData(short)+0xa8>)
    18c2:	ldr	r2, [pc, #56]	; (18fc <saveData(short)+0xac>)
    18c4:	ldr.w	r0, [r1, #4]!
    18c8:	str.w	r0, [r2, r3, lsl #2]
    18cc:	adds	r3, #1
    18ce:	cmp	r3, #8
    18d0:	bne.n	18c4 <saveData(short)+0x74>
    18d2:	ldr	r2, [pc, #28]	; (18f0 <saveData(short)+0xa0>)
    18d4:	mov.w	r0, #4294967295
    18d8:	str.w	r3, [r2, #132]	; 0x84
    18dc:	pop	{r3, r4, r5, r6, r7, pc}
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    18de:	str.w	r7, [r4, #136]	; 0x88
    else
      digitalWriteFast(13,LOW);

    if(status<CLOSED) return status; // we are stopped: don't do anything

    status=checkEndOfFile(status);
    18e2:	mov	r0, r6
    18e4:	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
      digitalWriteFast(13,LOW);

    return status;
}
    18e6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      { while(queue_isBusy()); //wait if acq writes to queue
        pullData(&diskBuffer[ii*NBUF_ACQ]);
      }
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
      if(haveStore)
        status=storeData(status);
    18ea:	b.w	14e4 <storeData(short)>
    18ee:	pop	{r3, r4, r5, r6, r7, pc}
    18f0:	.word	0x42004000
    18f4:	.word	0x2000586c
    18f8:	.word	0x20005868
    18fc:	.word	0x200176dc
    1900:	.word	0x200176d4

00001904 <_GLOBAL__sub_I_t_acq>:
    }
    else
      digitalWriteFast(13,LOW);

    return status;
}
    1904:	push	{r3, r4, r5, r6, r7, lr}
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() = default;
    1906:	ldr	r3, [pc, #136]	; (1990 <_GLOBAL__sub_I_t_acq+0x8c>)
    1908:	movs	r4, #0
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    190a:	ldr	r6, [pc, #136]	; (1994 <_GLOBAL__sub_I_t_acq+0x90>)
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    190c:	movs	r1, #7

#elif defined(__IMXRT1062__)
  #define SD_CONFIG SdioConfig(FIFO_SDIO)
#endif

SdFs sd;
    190e:	ldr	r5, [pc, #136]	; (1998 <_GLOBAL__sub_I_t_acq+0x94>)

#endif  // SPI_DRIVER_SELECT < 2
  void initSharedSpiCard() {
    m_beginCalled = false;
    m_csPin = 0;
    m_errorCode = SD_CARD_ERROR_INIT_NOT_CALLED;
    1910:	movs	r7, #42	; 0x2a
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    1912:	str.w	r6, [r3, #1184]	; 0x4a0
    1916:	mov	r0, r3
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1918:	ldr	r2, [pc, #128]	; (199c <_GLOBAL__sub_I_t_acq+0x98>)
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    191a:	ldr	r6, [pc, #132]	; (19a0 <_GLOBAL__sub_I_t_acq+0x9c>)
    191c:	str.w	r2, [r3, #1164]	; 0x48c
    1920:	mov	r2, r5
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    1922:	str.w	r1, [r3, #1188]	; 0x4a4

#endif  // SPI_DRIVER_SELECT < 2
  void initSharedSpiCard() {
    m_beginCalled = false;
    m_csPin = 0;
    m_errorCode = SD_CARD_ERROR_INIT_NOT_CALLED;
    1926:	strb.w	r7, [r3, #1194]	; 0x4aa
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    192a:	mov.w	r7, #1000	; 0x3e8
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    192e:	str.w	r6, [r3, #1176]	; 0x498
    1932:	str.w	r4, [r3, #1152]	; 0x480
    1936:	str.w	r4, [r3, #1156]	; 0x484
/**
 * \class SdBase
 * \brief base SD file system template class.
 */
template <class Vol, class Fmt>
class SdBase : public Vol {
    193a:	str.w	r4, [r3, #1160]	; 0x488
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    193e:	strb.w	r4, [r3, #1172]	; 0x494
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1942:	strb.w	r4, [r3, #1173]	; 0x495
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
    1946:	str.w	r4, [r3, #1180]	; 0x49c
  void spiSetSckSpeed(uint32_t maxSck) { m_spiDriverPtr->setSckSpeed(maxSck); }
  SdSpiDriver* m_spiDriverPtr;

#endif  // SPI_DRIVER_SELECT < 2
  void initSharedSpiCard() {
    m_beginCalled = false;
    194a:	strb.w	r4, [r3, #1192]	; 0x4a8
    m_csPin = 0;
    194e:	strb.w	r4, [r3, #1193]	; 0x4a9
    m_errorCode = SD_CARD_ERROR_INIT_NOT_CALLED;
    m_spiActive = false;
    1952:	strb.w	r4, [r3, #1195]	; 0x4ab
    m_state = IDLE_STATE;
    1956:	strb.w	r4, [r3, #1196]	; 0x4ac
    m_status = 0;
    195a:	strb.w	r4, [r3, #1197]	; 0x4ad
    m_type = 0;
    195e:	strb.w	r4, [r3, #1198]	; 0x4ae
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    1962:	str.w	r4, [r3, #1200]	; 0x4b0
    1966:	strb.w	r4, [r3, #1204]	; 0x4b4
    196a:	ldr	r1, [pc, #56]	; (19a4 <_GLOBAL__sub_I_t_acq+0xa0>)
    196c:	bl	8bbc <__aeabi_atexit>
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1970:	ldr	r6, [pc, #52]	; (19a8 <_GLOBAL__sub_I_t_acq+0xa4>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1972:	ldr	r3, [pc, #56]	; (19ac <_GLOBAL__sub_I_t_acq+0xa8>)
FsFile file;
    1974:	mov	r2, r5
    1976:	ldr	r1, [pc, #56]	; (19b0 <_GLOBAL__sub_I_t_acq+0xac>)
    1978:	mov	r0, r3
    197a:	str	r4, [r3, #4]
    197c:	strb	r4, [r3, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() = default;
    197e:	str	r4, [r3, #72]	; 0x48
    1980:	str	r4, [r3, #76]	; 0x4c
    1982:	str	r7, [r3, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1984:	str	r6, [r3, #0]
    }
    else
      digitalWriteFast(13,LOW);

    return status;
}
    1986:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#elif defined(__IMXRT1062__)
  #define SD_CONFIG SdioConfig(FIFO_SDIO)
#endif

SdFs sd;
FsFile file;
    198a:	b.w	8bbc <__aeabi_atexit>
    198e:	nop
    1990:	.word	0x200177bc
    1994:	.word	0x003d0900
    1998:	.word	0x20001bb8
    199c:	.word	0x200004a0
    19a0:	.word	0x200003e0
    19a4:	.word	0x00000ec5
    19a8:	.word	0x2000047c
    19ac:	.word	0x20017684
    19b0:	.word	0x00000f39

000019b4 <loop>:
    pinMode(13,OUTPUT);
  #endif
}

void loop() 
{
    19b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // put your main code here, to run repeatedly:
  static uint32_t loopCount=0;
  loopCount++;
    19b8:	ldr	r5, [pc, #516]	; (1bc0 <loop+0x20c>)
    pinMode(13,OUTPUT);
  #endif
}

void loop() 
{
    19ba:	sub	sp, #52	; 0x34

  // obtain some statistics on Queue usage
  static uint16_t mxb=0;
  uint16_t nb;
  nb = getDataCount();
  if(nb>mxb) mxb=nb;
    19bc:	ldr	r6, [pc, #516]	; (1bc4 <loop+0x210>)

void loop() 
{
  // put your main code here, to run repeatedly:
  static uint32_t loopCount=0;
  loopCount++;
    19be:	ldr	r3, [r5, #0]
    19c0:	adds	r3, #1
    19c2:	str	r3, [r5, #0]
  static int16_t monitor=0;

  // obtain some statistics on Queue usage
  static uint16_t mxb=0;
  uint16_t nb;
  nb = getDataCount();
    19c4:	bl	7c <getDataCount()>
  if(nb>mxb) mxb=nb;
    19c8:	ldrh	r3, [r6, #0]
    19ca:	cmp	r3, r0

  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
    19cc:	ldr	r3, [pc, #504]	; (1bc8 <loop+0x214>)
    19ce:	ldr	r2, [r3, #0]

  // obtain some statistics on Queue usage
  static uint16_t mxb=0;
  uint16_t nb;
  nb = getDataCount();
  if(nb>mxb) mxb=nb;
    19d0:	it	cc
    19d2:	strhcc	r0, [r6, #0]

  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
    19d4:	lsls	r2, r2, #31
    19d6:	bpl.n	1a06 <loop+0x52>
    19d8:	ldr	r4, [pc, #496]	; (1bcc <loop+0x218>)
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
    19da:	bl	6f80 <usb_serial_available>
  // basic menu to start and stop archiving  
  if(Serial.available())
    19de:	cbnz	r0, 1a24 <loop+0x70>
    if(ch=='?') menu2(); // returns only when menu2 gets not handled character
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
  }

  // save data (filing will be handled inside saveData)
  status=saveData(status);  
    19e0:	ldrh	r0, [r4, #0]

//  if(status<0) return;
  // once a second provide some information to User
  static uint32_t t0=0;
  uint32_t t1;
  if((t1=millis())>(t0+1000))
    19e2:	ldr.w	r8, [pc, #576]	; 1c24 <loop+0x270>
    if(ch=='?') menu2(); // returns only when menu2 gets not handled character
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
  }

  // save data (filing will be handled inside saveData)
  status=saveData(status);  
    19e6:	sxth	r0, r0
    19e8:	bl	1850 <saveData(short)>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
    19ec:	ldr	r2, [pc, #480]	; (1bd0 <loop+0x21c>)

//  if(status<0) return;
  // once a second provide some information to User
  static uint32_t t0=0;
  uint32_t t1;
  if((t1=millis())>(t0+1000))
    19ee:	ldr.w	r3, [r8]
    if(ch=='?') menu2(); // returns only when menu2 gets not handled character
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
  }

  // save data (filing will be handled inside saveData)
  status=saveData(status);  
    19f2:	strh	r0, [r4, #0]

//  if(status<0) return;
  // once a second provide some information to User
  static uint32_t t0=0;
  uint32_t t1;
  if((t1=millis())>(t0+1000))
    19f4:	add.w	r3, r3, #1000	; 0x3e8
    19f8:	ldr.w	r9, [r2]
    19fc:	cmp	r3, r9
    19fe:	bcc.n	1a46 <loop+0x92>
    mxb=0;
    disk_count=0;

    t0=t1;
  }
}
    1a00:	add	sp, #52	; 0x34
    1a02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  static uint16_t mxb=0;
  uint16_t nb;
  nb = getDataCount();
  if(nb>mxb) mxb=nb;

  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
    1a06:	ldr	r2, [pc, #460]	; (1bd4 <loop+0x220>)
    1a08:	movs	r1, #1
    1a0a:	ldr	r4, [pc, #448]	; (1bcc <loop+0x218>)
    1a0c:	ldr	r2, [r2, #0]
    1a0e:	str	r1, [r3, #0]
    1a10:	mov.w	r3, #4294967295
    1a14:	cmp	r2, r1
    1a16:	it	ne
    1a18:	movne	r3, #0
    1a1a:	strh	r3, [r4, #0]
    1a1c:	bl	6f80 <usb_serial_available>
  // basic menu to start and stop archiving  
  if(Serial.available())
    1a20:	cmp	r0, #0
    1a22:	beq.n	19e0 <loop+0x2c>
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
    1a24:	bl	7008 <usb_serial_getchar>
  {
    char ch=Serial.read();
    1a28:	uxtb	r0, r0
    if(ch=='s') status=CLOSED;
    1a2a:	cmp	r0, #115	; 0x73
    1a2c:	beq.w	1b60 <loop+0x1ac>
    if(ch=='e') status=MUSTSTOP;
    1a30:	cmp	r0, #101	; 0x65
    1a32:	beq.n	1a7c <loop+0xc8>
    if(ch=='m') monitor=1-monitor;
    1a34:	cmp	r0, #109	; 0x6d
    1a36:	bne.w	1ba0 <loop+0x1ec>
    1a3a:	ldr	r2, [pc, #412]	; (1bd8 <loop+0x224>)
    1a3c:	ldrh	r3, [r2, #0]
    1a3e:	rsb	r3, r3, #1
    1a42:	strh	r3, [r2, #0]
    1a44:	b.n	19e0 <loop+0x2c>
  // once a second provide some information to User
  static uint32_t t0=0;
  uint32_t t1;
  if((t1=millis())>(t0+1000))
  { datetime_t t;
    rtc_get_datetime(&t);
    1a46:	add	r0, sp, #40	; 0x28
    1a48:	bl	7ac <rtc_get_datetime(datetime_t*)>

    if(monitor)
    1a4c:	ldr	r3, [pc, #392]	; (1bd8 <loop+0x224>)
    1a4e:	ldrsh.w	r3, [r3]
    1a52:	cbnz	r3, 1a82 <loop+0xce>
    1a54:	ldr	r3, [pc, #388]	; (1bdc <loop+0x228>)
    1a56:	ldr.w	fp, [pc, #464]	; 1c28 <loop+0x274>
    1a5a:	str	r3, [sp, #32]
    1a5c:	ldr	r3, [pc, #384]	; (1be0 <loop+0x22c>)
    1a5e:	str	r3, [sp, #28]
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
        max_stat=0;        
      }
    }

    loopCount=0;
    1a60:	movs	r3, #0
    procCount=0;
    procMiss=0;
    1a62:	ldr	r2, [sp, #32]
    mxb=0;
    disk_count=0;

    t0=t1;
    1a64:	str.w	r9, [r8]
      }
    }

    loopCount=0;
    procCount=0;
    procMiss=0;
    1a68:	str	r3, [r2, #0]
    mxb=0;
    disk_count=0;
    1a6a:	ldr	r2, [sp, #28]
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
        max_stat=0;        
      }
    }

    loopCount=0;
    1a6c:	str	r3, [r5, #0]
    procCount=0;
    1a6e:	str.w	r3, [fp]
    procMiss=0;
    mxb=0;
    1a72:	strh	r3, [r6, #0]
    disk_count=0;
    1a74:	str	r3, [r2, #0]

    t0=t1;
  }
}
    1a76:	add	sp, #52	; 0x34
    1a78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // basic menu to start and stop archiving  
  if(Serial.available())
  {
    char ch=Serial.read();
    if(ch=='s') status=CLOSED;
    if(ch=='e') status=MUSTSTOP;
    1a7c:	movs	r3, #4
    1a7e:	strh	r3, [r4, #0]
    1a80:	b.n	19e0 <loop+0x2c>
    rtc_get_datetime(&t);

    if(monitor)
    {
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");
    1a82:	ldrsb.w	lr, [sp, #44]	; 0x2c
    1a86:	ldrsb.w	r7, [sp, #47]	; 0x2f
    1a8a:	ldrsb.w	r4, [sp, #46]	; 0x2e
    1a8e:	ldrsb.w	r0, [sp, #45]	; 0x2d
    1a92:	ldrsb.w	r1, [sp, #43]	; 0x2b
    1a96:	str.w	lr, [sp, #16]
    1a9a:	ldrsb.w	r3, [sp, #42]	; 0x2a
    1a9e:	ldrsh.w	r2, [sp, #40]	; 0x28
    1aa2:	str	r7, [sp, #12]
    1aa4:	str	r4, [sp, #8]
    1aa6:	str	r0, [sp, #4]
    1aa8:	str	r1, [sp, #0]
    1aaa:	ldr	r0, [pc, #312]	; (1be4 <loop+0x230>)
    1aac:	ldr	r1, [pc, #312]	; (1be8 <loop+0x234>)
    1aae:	bl	8934 <Print::printf(char const*, ...)>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1ab2:	movs	r1, #3
    1ab4:	ldr	r0, [pc, #308]	; (1bec <loop+0x238>)
    1ab6:	bl	7054 <usb_serial_write>
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1aba:	movs	r3, #0
    1abc:	movs	r2, #10
    1abe:	ldr	r1, [r5, #0]
    1ac0:	ldr	r0, [pc, #288]	; (1be4 <loop+0x230>)
    1ac2:	bl	8954 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1ac6:	movs	r1, #1
    1ac8:	ldr	r0, [pc, #292]	; (1bf0 <loop+0x23c>)
    1aca:	bl	7054 <usb_serial_write>

      Serial.print(loopCount); Serial.print(" ");
      Serial.print(procCount); Serial.print(" ");
    1ace:	ldr.w	fp, [pc, #344]	; 1c28 <loop+0x274>
      Serial.print(procMiss); Serial.print(" ");
    1ad2:	ldr	r3, [pc, #264]	; (1bdc <loop+0x228>)
    1ad4:	movs	r2, #10
    1ad6:	ldr.w	r1, [fp]
    1ada:	mov	r4, r3
    1adc:	str	r3, [sp, #32]
    1ade:	ldr	r0, [pc, #260]	; (1be4 <loop+0x230>)
    1ae0:	movs	r3, #0
    1ae2:	bl	8954 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1ae6:	movs	r1, #1
    1ae8:	ldr	r0, [pc, #260]	; (1bf0 <loop+0x23c>)
    1aea:	bl	7054 <usb_serial_write>
    1aee:	movs	r3, #0
    1af0:	ldr	r1, [r4, #0]
    1af2:	movs	r2, #10
    1af4:	ldr	r0, [pc, #236]	; (1be4 <loop+0x230>)
    1af6:	bl	8954 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1afa:	movs	r1, #1
    1afc:	ldr	r0, [pc, #240]	; (1bf0 <loop+0x23c>)
    1afe:	bl	7054 <usb_serial_write>
      Serial.printf("%3d",mxb); Serial.print("  ");
    1b02:	ldrh	r2, [r6, #0]
    1b04:	ldr	r1, [pc, #236]	; (1bf4 <loop+0x240>)
    1b06:	ldr	r0, [pc, #220]	; (1be4 <loop+0x230>)
    1b08:	bl	8934 <Print::printf(char const*, ...)>
    1b0c:	movs	r1, #2
    1b0e:	ldr	r0, [pc, #232]	; (1bf8 <loop+0x244>)
    1b10:	bl	7054 <usb_serial_write>
      Serial.printf("%4d",acqbias); Serial.print(" ");
    1b14:	ldr	r3, [pc, #228]	; (1bfc <loop+0x248>)
    1b16:	ldr	r1, [pc, #232]	; (1c00 <loop+0x24c>)
    1b18:	ldr	r2, [r3, #0]
      Serial.print(disk_count); Serial.print("  ; ");
    1b1a:	ldr	r3, [pc, #196]	; (1be0 <loop+0x22c>)

      Serial.print(loopCount); Serial.print(" ");
      Serial.print(procCount); Serial.print(" ");
      Serial.print(procMiss); Serial.print(" ");
      Serial.printf("%3d",mxb); Serial.print("  ");
      Serial.printf("%4d",acqbias); Serial.print(" ");
    1b1c:	ldr	r0, [pc, #196]	; (1be4 <loop+0x230>)
      Serial.print(disk_count); Serial.print("  ; ");
    1b1e:	mov	r4, r3
    1b20:	str	r3, [sp, #28]

      Serial.print(loopCount); Serial.print(" ");
      Serial.print(procCount); Serial.print(" ");
      Serial.print(procMiss); Serial.print(" ");
      Serial.printf("%3d",mxb); Serial.print("  ");
      Serial.printf("%4d",acqbias); Serial.print(" ");
    1b22:	bl	8934 <Print::printf(char const*, ...)>
    1b26:	movs	r1, #1
    1b28:	ldr	r0, [pc, #196]	; (1bf0 <loop+0x23c>)
    1b2a:	bl	7054 <usb_serial_write>
    1b2e:	movs	r3, #0
    1b30:	ldr	r1, [r4, #0]
    1b32:	movs	r2, #10
    1b34:	ldr	r0, [pc, #172]	; (1be4 <loop+0x230>)
    1b36:	bl	8954 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b3a:	movs	r1, #4
    1b3c:	ldr	r0, [pc, #196]	; (1c04 <loop+0x250>)
    1b3e:	bl	7054 <usb_serial_write>
      Serial.print(disk_count); Serial.print("  ; ");

      if(proc==0)
    1b42:	ldr	r3, [pc, #196]	; (1c08 <loop+0x254>)
    1b44:	ldrsh.w	r7, [r3]
    1b48:	cbnz	r7, 1b66 <loop+0x1b2>
    1b4a:	ldr	r4, [pc, #192]	; (1c0c <loop+0x258>)
      {
        for(int ii=0; ii<8;ii++){ Serial.printf("%8X ",logBuffer[ii]);}        
    1b4c:	ldr.w	r2, [r4, r7, lsl #2]
    1b50:	adds	r7, #1
    1b52:	ldr	r1, [pc, #188]	; (1c10 <loop+0x25c>)
    1b54:	ldr	r0, [pc, #140]	; (1be4 <loop+0x230>)
    1b56:	bl	8934 <Print::printf(char const*, ...)>
    1b5a:	cmp	r7, #8
    1b5c:	bne.n	1b4c <loop+0x198>
    1b5e:	b.n	1a60 <loop+0xac>
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
  // basic menu to start and stop archiving  
  if(Serial.available())
  {
    char ch=Serial.read();
    if(ch=='s') status=CLOSED;
    1b60:	movs	r3, #0
    1b62:	strh	r3, [r4, #0]
    1b64:	b.n	19e0 <loop+0x2c>
    1b66:	ldr	r4, [pc, #172]	; (1c14 <loop+0x260>)
    1b68:	add.w	r7, r4, #96	; 0x60
      Serial.print(procMiss); Serial.print(" ");
      Serial.printf("%3d",mxb); Serial.print("  ");
      Serial.printf("%4d",acqbias); Serial.print(" ");
      Serial.print(disk_count); Serial.print("  ; ");

      if(proc==0)
    1b6c:	mov	sl, r4
      {
        for(int ii=0; ii<8;ii++){ Serial.printf("%8X ",logBuffer[ii]);}        
      }
      else
      {
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
    1b6e:	ldr.w	r2, [sl, #4]!
    1b72:	ldr	r1, [pc, #164]	; (1c18 <loop+0x264>)
    1b74:	ldr	r0, [pc, #108]	; (1be4 <loop+0x230>)
    1b76:	bl	8934 <Print::printf(char const*, ...)>
    1b7a:	cmp	r7, sl
    1b7c:	bne.n	1b6e <loop+0x1ba>
        Serial.printf("%2d",max_stat);
    1b7e:	ldr	r3, [pc, #156]	; (1c1c <loop+0x268>)
    1b80:	ldr	r1, [pc, #156]	; (1c20 <loop+0x26c>)
    1b82:	ldr	r2, [r3, #0]
    1b84:	ldr	r0, [pc, #92]	; (1be4 <loop+0x230>)
    1b86:	str	r3, [sp, #36]	; 0x24
    1b88:	bl	8934 <Print::printf(char const*, ...)>

        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
    1b8c:	movs	r1, #0
    1b8e:	ldr	r3, [sp, #36]	; 0x24
    1b90:	str.w	r1, [r4, #4]!
    1b94:	cmp	r4, r7
    1b96:	mov.w	r2, #0
    1b9a:	bne.n	1b90 <loop+0x1dc>
        max_stat=0;        
    1b9c:	str	r2, [r3, #0]
    1b9e:	b.n	1a60 <loop+0xac>
  {
    char ch=Serial.read();
    if(ch=='s') status=CLOSED;
    if(ch=='e') status=MUSTSTOP;
    if(ch=='m') monitor=1-monitor;
    if(ch==':') menu1(); // returns only when menu1 gets not handled character
    1ba0:	cmp	r0, #58	; 0x3a
    1ba2:	bne.n	1baa <loop+0x1f6>
    1ba4:	bl	2a0 <menu1()>
    1ba8:	b.n	19e0 <loop+0x2c>
    if(ch=='?') menu2(); // returns only when menu2 gets not handled character
    1baa:	cmp	r0, #63	; 0x3f
    1bac:	bne.n	1bb4 <loop+0x200>
    1bae:	bl	2b4 <menu2()>
    1bb2:	b.n	19e0 <loop+0x2c>
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
    1bb4:	cmp	r0, #33	; 0x21
    1bb6:	bne.w	19e0 <loop+0x2c>
    1bba:	bl	448 <menu3()>
    1bbe:	b.n	19e0 <loop+0x2c>
    1bc0:	.word	0x200173e0
    1bc4:	.word	0x20017c94
    1bc8:	.word	0x20005868
    1bcc:	.word	0x20017c96
    1bd0:	.word	0x20017c78
    1bd4:	.word	0x20017c88
    1bd8:	.word	0x20017c98
    1bdc:	.word	0x20017708
    1be0:	.word	0x20017670
    1be4:	.word	0x20001bc8
    1be8:	.word	0x20000d00
    1bec:	.word	0x20000d24
    1bf0:	.word	0x20000c48
    1bf4:	.word	0x20000d28
    1bf8:	.word	0x20000d2c
    1bfc:	.word	0x2001766c
    1c00:	.word	0x20000d30
    1c04:	.word	0x20000d34
    1c08:	.word	0x20017c9c
    1c0c:	.word	0x200176dc
    1c10:	.word	0x20000d3c
    1c14:	.word	0x20017708
    1c18:	.word	0x20000d44
    1c1c:	.word	0x200176fc
    1c20:	.word	0x20000d4c
    1c24:	.word	0x200173dc
    1c28:	.word	0x20017704

00001c2c <setup1()>:
  }
}
/**********************************************************************************/
// rp2040 has dial core. let acq run on its own core
void setup1()
{ while(!ready) {delay(1);} // wait for setup() to finish
    1c2c:	push	{r4, lr}
    1c2e:	ldr	r4, [pc, #44]	; (1c5c <setup1()+0x30>)
    1c30:	ldr	r3, [r4, #0]
    1c32:	cbnz	r3, 1c40 <setup1()+0x14>
    1c34:	movs	r0, #1
    1c36:	bl	7d38 <delay>
    1c3a:	ldr	r3, [r4, #0]
    1c3c:	cmp	r3, #0
    1c3e:	beq.n	1c34 <setup1()+0x8>
  i2s_setup();
    1c40:	bl	d24 <i2s_setup()>
  dma_setup();
    1c44:	bl	db4 <dma_setup()>
    1c48:	movs	r1, #11
    1c4a:	ldr	r0, [pc, #20]	; (1c60 <setup1()+0x34>)
    1c4c:	bl	7054 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    1c50:	ldr	r0, [pc, #16]	; (1c64 <setup1()+0x38>)

  Serial.println("Setup1 done");
}
    1c52:	ldmia.w	sp!, {r4, lr}
    1c56:	b.w	8900 <Print::println()>
    1c5a:	nop
    1c5c:	.word	0x2001776c
    1c60:	.word	0x20000d50
    1c64:	.word	0x20001bc8

00001c68 <setup>:
volatile int ready=0;
volatile int termon=0;
void setup1();
//
void setup() 
{
    1c68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
    1c6c:	ldr	r5, [pc, #284]	; (1d8c <setup+0x124>)
    1c6e:	sub	sp, #28
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
    1c70:	movw	r8, #750	; 0x2ee
    1c74:	ldr	r4, [pc, #280]	; (1d90 <setup+0x128>)
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
    1c76:	ldr	r6, [r5, #0]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1c78:	ldr	r7, [pc, #280]	; (1d94 <setup+0x12c>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1c7a:	ldr.w	r9, [pc, #284]	; 1d98 <setup+0x130>
    1c7e:	b.n	1c8a <setup+0x22>
		uint32_t millis_begin = systick_millis_count;
		while (!(*this)) {
			uint32_t elapsed = systick_millis_count - millis_begin;
			if (usb_configuration) {
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
    1c80:	cmp.w	r3, #2000	; 0x7d0
    1c84:	bhi.n	1cb2 <setup+0x4a>
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
			}
			yield();
    1c86:	bl	85d4 <yield>
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
    1c8a:	bl	85d4 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1c8e:	ldrb	r3, [r4, #0]
    1c90:	cbz	r3, 1ca4 <setup+0x3c>
    1c92:	ldrb	r3, [r7, #0]
    1c94:	lsls	r2, r3, #31
    1c96:	bpl.n	1ca4 <setup+0x3c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1c98:	ldr	r3, [r5, #0]
    1c9a:	ldr.w	r2, [r9]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1c9e:	subs	r3, r3, r2
    1ca0:	cmp	r3, #14
    1ca2:	bhi.n	1cb2 <setup+0x4a>
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
		while (!(*this)) {
			uint32_t elapsed = systick_millis_count - millis_begin;
    1ca4:	ldr	r3, [r5, #0]
			if (usb_configuration) {
    1ca6:	ldrb	r2, [r4, #0]
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
		while (!(*this)) {
			uint32_t elapsed = systick_millis_count - millis_begin;
    1ca8:	subs	r3, r3, r6
			if (usb_configuration) {
    1caa:	cmp	r2, #0
    1cac:	bne.n	1c80 <setup+0x18>
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
    1cae:	cmp	r3, r8
    1cb0:	bls.n	1c86 <setup+0x1e>
    1cb2:	ldr.w	r8, [pc, #216]	; 1d8c <setup+0x124>
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1cb6:	ldr	r6, [pc, #220]	; (1d94 <setup+0x12c>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1cb8:	ldr	r7, [pc, #220]	; (1d98 <setup+0x130>)
    1cba:	ldr	r2, [r5, #0]
    set_sys_clock_khz(48000, true);
  #endif

  Serial.begin(115200);
  // wait for 10 s to allow USB-Serial connection
  while(millis()<10000) if(Serial) { termon=1; break;}
    1cbc:	movw	r3, #9999	; 0x270f
    1cc0:	cmp	r2, r3
    1cc2:	bhi.n	1ce6 <setup+0x7e>
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
    1cc4:	bl	85d4 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1cc8:	ldrb	r3, [r4, #0]
    1cca:	cmp	r3, #0
    1ccc:	beq.n	1cba <setup+0x52>
    1cce:	ldrb	r3, [r6, #0]
    1cd0:	lsls	r3, r3, #31
    1cd2:	bpl.n	1cba <setup+0x52>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1cd4:	ldr.w	r3, [r8]
    1cd8:	ldr	r2, [r7, #0]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1cda:	subs	r3, r3, r2
    1cdc:	cmp	r3, #14
    1cde:	bls.n	1cba <setup+0x52>
    1ce0:	ldr	r3, [pc, #184]	; (1d9c <setup+0x134>)
    1ce2:	movs	r2, #1
    1ce4:	str	r2, [r3, #0]

  // Teensy has a crash report
  #if defined(__IMXRT1062__)
    if(CrashReport) Serial.print(CrashReport);
    1ce6:	ldr	r0, [pc, #184]	; (1da0 <setup+0x138>)
    1ce8:	bl	fea0 <___ZN16CrashReportClasscvbEv_veneer>
    1cec:	cmp	r0, #0
    1cee:	bne.n	1d82 <setup+0x11a>
    #if defined(AUDIO_INTERFACE)
      AudioMemory(8);
    #endif
  #endif

  rtc_setup();
    1cf0:	movs	r1, #19
    1cf2:	movs	r0, #18
    1cf4:	bl	7a8 <rtc_setup(unsigned char, unsigned char)>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1cf8:	movs	r1, #16
    1cfa:	ldr	r0, [pc, #168]	; (1da4 <setup+0x13c>)
    1cfc:	bl	7054 <usb_serial_write>
    1d00:	ldr	r0, [pc, #164]	; (1da8 <setup+0x140>)
    1d02:	bl	8900 <Print::println()>
  Serial.println("rtc_setup() done");

  datetime_t t;
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
    1d06:	add	r0, sp, #16
    1d08:	bl	7ac <rtc_get_datetime(datetime_t*)>
    1d0c:	cbnz	r0, 1d1c <setup+0xb4>
    1d0e:	movs	r1, #20
    1d10:	ldr	r0, [pc, #152]	; (1dac <setup+0x144>)
    1d12:	bl	7054 <usb_serial_write>
    1d16:	ldr	r0, [pc, #144]	; (1da8 <setup+0x140>)
    1d18:	bl	8900 <Print::println()>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
                      t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
    1d1c:	ldrsb.w	r0, [sp, #21]
  #endif

  Serial.println("filing_init");
  filing_init();
  Serial.println("Setup done");
  ready=1;
    1d20:	movs	r4, #1
  Serial.println("rtc_setup() done");

  datetime_t t;
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
                      t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
    1d22:	ldrsb.w	r1, [sp, #19]
    1d26:	ldrsb.w	r6, [sp, #23]
    1d2a:	ldrsb.w	r5, [sp, #22]
    1d2e:	ldrsh.w	r2, [sp, #16]
    1d32:	ldrsb.w	r3, [sp, #18]
    1d36:	str	r0, [sp, #4]
    1d38:	str	r1, [sp, #0]
    1d3a:	str	r6, [sp, #12]
    1d3c:	ldr	r1, [pc, #112]	; (1db0 <setup+0x148>)
    1d3e:	str	r5, [sp, #8]
    1d40:	ldr	r0, [pc, #100]	; (1da8 <setup+0x140>)
    1d42:	bl	8934 <Print::printf(char const*, ...)>
    1d46:	ldr	r0, [pc, #96]	; (1da8 <setup+0x140>)
    1d48:	bl	8900 <Print::println()>
    1d4c:	movs	r1, #11
    1d4e:	ldr	r0, [pc, #100]	; (1db4 <setup+0x14c>)
    1d50:	bl	7054 <usb_serial_write>
    1d54:	ldr	r0, [pc, #80]	; (1da8 <setup+0x140>)
    1d56:	bl	8900 <Print::println()>

    Serial.print("Bias "); Serial.println(BIAS);
  #endif

  Serial.println("filing_init");
  filing_init();
    1d5a:	bl	1058 <filing_init()>
    1d5e:	movs	r1, #10
    1d60:	ldr	r0, [pc, #84]	; (1db8 <setup+0x150>)
    1d62:	bl	7054 <usb_serial_write>
    1d66:	ldr	r0, [pc, #64]	; (1da8 <setup+0x140>)
    1d68:	bl	8900 <Print::println()>
  Serial.println("Setup done");
  ready=1;
    1d6c:	ldr	r3, [pc, #76]	; (1dbc <setup+0x154>)
    1d6e:	str	r4, [r3, #0]

  // in case of single core teensy 4.1 start acquisition
  #if defined(__IMXRT1062__)
    setup1();
    1d70:	bl	1c2c <setup1()>
    pinMode(13,OUTPUT);
    1d74:	mov	r1, r4
    1d76:	movs	r0, #13
    1d78:	bl	8244 <pinMode>
  #endif
}
    1d7c:	add	sp, #28
    1d7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	// Print a floating point (decimal) number
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	// Print an object instance in human readable format
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
    1d82:	ldr	r1, [pc, #36]	; (1da8 <setup+0x140>)
    1d84:	ldr	r0, [pc, #24]	; (1da0 <setup+0x138>)
    1d86:	bl	fe88 <___ZNK16CrashReportClass7printToER5Print_veneer>
    1d8a:	b.n	1cf0 <setup+0x88>
    1d8c:	.word	0x20017c78
    1d90:	.word	0x20017cb7
    1d94:	.word	0x20017cb6
    1d98:	.word	0x20017d08
    1d9c:	.word	0x20017c88
    1da0:	.word	0x20001bbc
    1da4:	.word	0x20000d5c
    1da8:	.word	0x20001bc8
    1dac:	.word	0x20000d70
    1db0:	.word	0x20000d88
    1db4:	.word	0x20000db0
    1db8:	.word	0x20000dbc
    1dbc:	.word	0x2001776c

00001dc0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    1dc0:	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    1dc2:	movw	r5, #513	; 0x201
    1dc6:	ldr	r4, [r0, #0]
    1dc8:	str	r5, [r4, #16]

	while (count > 0) {
    1dca:	cbz	r3, 1e14 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    1dcc:	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1dce:	cbz	r1, 1e0e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    1dd0:	ldrb	r5, [r1, #0]
    1dd2:	adds	r1, #1
		count--; // how many bytes left to output.
    1dd4:	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1dd6:	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1dd8:	ldr	r5, [r4, #112]	; 0x70
    1dda:	lsls	r5, r5, #30
    1ddc:	bmi.n	1dec <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1dde:	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    1de0:	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1de2:	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    1de4:	cbz	r2, 1dec <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    1de6:	strb	r5, [r2, #0]
    1de8:	adds	r2, #1
    1dea:	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    1dec:	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    1dee:	lsls	r5, r5, #31
    1df0:	bpl.n	1dd8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    1df2:	cmp	r3, #0
    1df4:	bne.n	1dce <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    1df6:	cbz	r6, 1e14 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1df8:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1dfa:	ldr	r3, [r1, #112]	; 0x70
    1dfc:	lsls	r3, r3, #30
    1dfe:	bmi.n	1dfa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    1e00:	ldr	r3, [r1, #116]	; 0x74
    1e02:	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    1e04:	cbz	r2, 1e0a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    1e06:	strb	r3, [r2, #0]
    1e08:	adds	r2, #1
			count_read--;
    1e0a:	subs	r6, #1
    1e0c:	b.n	1df6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1e0e:	ldrb.w	r5, [r0, #60]	; 0x3c
    1e12:	b.n	1dd4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    1e14:	pop	{r4, r5, r6}
    1e16:	bx	lr

00001e18 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    1e18:	cbz	r3, 1e1e <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    1e1a:	b.w	1dc0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    1e1e:	bx	lr

00001e20 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    1e20:	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    1e22:	ldmia.w	r3, {r1, r2}
    1e26:	ldr	r1, [r1, #0]
    1e28:	tst	r1, r2
    1e2a:	bne.n	1e2e <SPIClass::end()+0xe>
    1e2c:	bx	lr
    
    port().TCR = tcr;    // restore back
}


void SPIClass::end() {
    1e2e:	push	{r4, lr}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1e30:	ldr	r2, [r0, #0]
    1e32:	mov	r4, r0
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
		port().CR = 0;  // turn off the enable
    1e34:	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    1e36:	movs	r1, #5


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
		port().CR = 0;  // turn off the enable
    1e38:	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    1e3a:	ldrb	r2, [r4, #16]
    1e3c:	add	r3, r2
    1e3e:	ldrb	r0, [r3, #16]
    1e40:	bl	8244 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    1e44:	ldr	r2, [r4, #4]
    1e46:	ldrb	r3, [r4, #17]
    1e48:	movs	r1, #5
    1e4a:	add	r3, r2
    1e4c:	ldrb.w	r0, [r3, #36]	; 0x24
    1e50:	bl	8244 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    1e54:	ldr	r2, [r4, #4]
    1e56:	ldrb	r3, [r4, #18]
    1e58:	movs	r1, #5
    1e5a:	add	r3, r2
	}
}
    1e5c:	ldmia.w	sp!, {r4, lr}
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
		port().CR = 0;  // turn off the enable
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    1e60:	ldrb.w	r0, [r3, #56]	; 0x38
    1e64:	b.w	8244 <pinMode>

00001e68 <FsCache::sync() [clone .part.0]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    1e68:	push	{r4, r5, r6, lr}
    1e6a:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    1e6c:	ldr	r0, [r0, #4]
    1e6e:	add.w	r6, r4, #16
    1e72:	ldr	r3, [r0, #0]
    1e74:	ldr	r1, [r4, #8]
    1e76:	mov	r2, r6
    1e78:	ldr	r3, [r3, #32]
    1e7a:	blx	r3
    1e7c:	cbz	r0, 1e90 <FsCache::sync() [clone .part.0]+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    1e7e:	ldrb	r3, [r4, #0]
    1e80:	mov	r5, r0
    1e82:	lsls	r2, r3, #30
    1e84:	bmi.n	1e96 <FsCache::sync() [clone .part.0]+0x2e>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    1e86:	bic.w	r3, r3, #1
  }
  return true;

fail:
  return false;
}
    1e8a:	mov	r0, r5
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    1e8c:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    1e8e:	pop	{r4, r5, r6, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    1e90:	movs	r5, #0
}
    1e92:	mov	r0, r5
    1e94:	pop	{r4, r5, r6, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
    1e96:	ldr	r0, [r4, #4]
    1e98:	mov	r2, r6
    1e9a:	ldr	r1, [r4, #12]
    1e9c:	ldr	r6, [r4, #8]
    1e9e:	ldr	r3, [r0, #0]
    1ea0:	add	r1, r6
    1ea2:	ldr	r3, [r3, #32]
    1ea4:	blx	r3
    1ea6:	cmp	r0, #0
    1ea8:	beq.n	1e90 <FsCache::sync() [clone .part.0]+0x28>
    1eaa:	ldrb	r3, [r4, #0]
    1eac:	b.n	1e86 <FsCache::sync() [clone .part.0]+0x1e>
    1eae:	nop

00001eb0 <FsCache::prepare(unsigned long, unsigned char)>:
#define DBG_FILE "FsCache.cpp"
#include "FsCache.h"

#include "DebugMacros.h"
//------------------------------------------------------------------------------
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    1eb0:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    1eb2:	ldr	r3, [r0, #4]
    1eb4:	cbz	r3, 1ef6 <FsCache::prepare(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    1eb6:	ldr	r3, [r0, #8]
    1eb8:	mov	r4, r0
    1eba:	mov	r5, r2
    1ebc:	mov	r7, r1
    1ebe:	cmp	r3, r1
    1ec0:	beq.n	1ee0 <FsCache::prepare(unsigned long, unsigned char)+0x30>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    1ec2:	ldrb	r3, [r0, #0]
    1ec4:	lsls	r2, r3, #31
    1ec6:	bmi.n	1eee <FsCache::prepare(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    1ec8:	lsls	r3, r5, #29
    1eca:	bpl.n	1efa <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    1ecc:	add.w	r6, r4, #16
    1ed0:	movs	r2, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    1ed2:	and.w	r5, r5, #3
    1ed6:	mov	r0, r6
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    1ed8:	str	r7, [r4, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
    1eda:	orrs	r5, r2
    1edc:	strb	r5, [r4, #0]
  return m_buffer;

fail:
  return nullptr;
}
    1ede:	pop	{r3, r4, r5, r6, r7, pc}
    1ee0:	ldrsb.w	r2, [r0], #16
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    1ee4:	and.w	r5, r5, #3
    1ee8:	orrs	r5, r2
    1eea:	strb	r5, [r4, #0]
  return m_buffer;

fail:
  return nullptr;
}
    1eec:	pop	{r3, r4, r5, r6, r7, pc}
    1eee:	bl	1e68 <FsCache::sync() [clone .part.0]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    1ef2:	cmp	r0, #0
    1ef4:	bne.n	1ec8 <FsCache::prepare(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

fail:
  return nullptr;
    1ef6:	movs	r0, #0
    1ef8:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_buffer)) {
    1efa:	ldr	r0, [r4, #4]
    1efc:	add.w	r6, r4, #16
    1f00:	mov	r1, r7
    1f02:	ldr	r3, [r0, #0]
    1f04:	mov	r2, r6
    1f06:	ldr	r3, [r3, #16]
    1f08:	blx	r3
    1f0a:	cmp	r0, #0
    1f0c:	bne.n	1ed0 <FsCache::prepare(unsigned long, unsigned char)+0x20>
    1f0e:	b.n	1ef6 <FsCache::prepare(unsigned long, unsigned char)+0x46>

00001f10 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    1f10:	ldrb	r3, [r0, #0]
    1f12:	lsls	r3, r3, #31
    1f14:	bmi.n	1f1a <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    1f16:	movs	r0, #1
    1f18:	bx	lr
    1f1a:	b.w	1e68 <FsCache::sync() [clone .part.0]>
    1f1e:	nop

00001f20 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1f20:	cbz	r1, 1f3e <Print::write(char const*)+0x1e>
    1f22:	push	{r4, r5, r6, lr}
    1f24:	mov	r5, r0
							  return write((const uint8_t *)str, strlen(str)); }
    1f26:	mov	r0, r1
    1f28:	mov	r4, r1
    1f2a:	bl	9d40 <strlen>
    1f2e:	ldr	r3, [r5, #0]
    1f30:	mov	r2, r0
    1f32:	mov	r1, r4
    1f34:	mov	r0, r5
    1f36:	ldr	r3, [r3, #4]
    1f38:	ldmia.w	sp!, {r4, r5, r6, lr}
    1f3c:	bx	r3
    1f3e:	mov	r0, r1
    1f40:	bx	lr
    1f42:	nop

00001f44 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    1f44:	ldr	r3, [r2, #4]
    1f46:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f4a:	ldr	r6, [r2, #8]
    1f4c:	add.w	r7, r3, #15
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//------------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    1f50:	ldrh.w	r0, [r1, #2]!
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2 * i);
    if (fname->atEnd()) {
    1f54:	cmp	r3, r6
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
    1f56:	add.w	r3, r3, #1
    if (toUpcase(cp) != toUpcase(u)) {
      return false;
    }
#else   // USE_UTF8_LONG_NAMES
    char c = fname->getch();
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    1f5a:	uxtb	r4, r0
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2 * i);
    if (fname->atEnd()) {
    1f5c:	beq.n	1f9e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x5a>
    if (toUpcase(cp) != toUpcase(u)) {
      return false;
    }
#else   // USE_UTF8_LONG_NAMES
    char c = fname->getch();
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    1f5e:	cmp	r0, #126	; 0x7e
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "../common/upcase.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    1f60:	sub.w	r5, r4, #97	; 0x61
    1f64:	str	r3, [r2, #4]
    if (toUpcase(cp) != toUpcase(u)) {
      return false;
    }
#else   // USE_UTF8_LONG_NAMES
    char c = fname->getch();
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    1f66:	bhi.n	1f8e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x4a>
    1f68:	ldrb.w	r0, [r3, #-1]
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "../common/upcase.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    1f6c:	sub.w	ip, r4, #32
    1f70:	sub.w	lr, r0, #97	; 0x61
    1f74:	sub.w	r8, r0, #32
    1f78:	cmp.w	lr, #25
    1f7c:	it	ls
    1f7e:	uxtbls.w	r0, r8
    1f82:	cmp	r5, #25
    1f84:	it	ls
    1f86:	uxtbls.w	r4, ip
    if (toUpcase(cp) != toUpcase(u)) {
      return false;
    }
#else   // USE_UTF8_LONG_NAMES
    char c = fname->getch();
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    1f8a:	cmp	r4, r0
    1f8c:	beq.n	1f94 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x50>
      return false;
    1f8e:	movs	r0, #0
    1f90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
  for (uint8_t i = 0; i < 15; i++) {
    1f94:	cmp	r3, r7
    1f96:	bne.n	1f50 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    1f98:	movs	r0, #1
    1f9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2 * i);
    if (fname->atEnd()) {
      return u == 0;
    1f9e:	clz	r0, r0
    1fa2:	lsrs	r0, r0, #5
    1fa4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001fa8 <ExFatFile::hashName(ExName_t*)>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    1fa8:	push	{r4, r5, r6, r7}
    1faa:	ldr	r7, [r1, #0]
    1fac:	ldr	r5, [r1, #8]
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
    1fae:	str	r7, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    1fb0:	cmp	r5, r7
    1fb2:	beq.n	1ffa <ExFatFile::hashName(ExName_t*)+0x52>
    1fb4:	mov	r0, r7
    1fb6:	movs	r3, #0
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
    1fb8:	adds	r0, #1
//------------------------------------------------------------------------------
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
//------------------------------------------------------------------------------
inline uint16_t exFatHash(char c, uint16_t hash) {
  uint8_t u = toUpper(c);
  hash = ((hash << 15) | (hash >> 1)) + u;
    1fba:	lsls	r2, r3, #15
    1fbc:	str	r0, [r1, #4]
    1fbe:	orr.w	r2, r2, r3, lsr #1
    1fc2:	ldrb.w	r3, [r0, #-1]
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "../common/upcase.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    1fc6:	sub.w	r4, r3, #97	; 0x61
    1fca:	sub.w	r6, r3, #32
    1fce:	cmp	r4, #25
    1fd0:	it	ls
    1fd2:	uxtbls	r3, r6
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    1fd4:	cmp	r5, r0
//------------------------------------------------------------------------------
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
//------------------------------------------------------------------------------
inline uint16_t exFatHash(char c, uint16_t hash) {
  uint8_t u = toUpper(c);
  hash = ((hash << 15) | (hash >> 1)) + u;
    1fd6:	add	r3, r2
    1fd8:	uxth	r3, r3
    1fda:	mov.w	r2, r3, lsl #15
    1fde:	orr.w	r3, r2, r3, lsr #1
    1fe2:	uxth	r3, r3
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    1fe4:	bne.n	1fb8 <ExFatFile::hashName(ExName_t*)+0x10>
    1fe6:	subs	r5, r5, r7
    1fe8:	subs	r0, r5, #1
    1fea:	cmp	r0, #254	; 0xfe
    1fec:	ite	hi
    1fee:	movhi	r0, #0
    1ff0:	movls	r0, #1
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
    1ff2:	str	r5, [r1, #12]
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    1ff4:	strh	r3, [r1, #16]
  }
  return true;

fail:
  return false;
}
    1ff6:	pop	{r4, r5, r6, r7}
    1ff8:	bx	lr
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    1ffa:	movs	r0, #0
    1ffc:	mov	r5, r0
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
  uint16_t hash = 0;
    1ffe:	mov	r3, r0
    2000:	b.n	1ff2 <ExFatFile::hashName(ExName_t*)+0x4a>
    2002:	nop

00002004 <ExFatFile::dirCache(unsigned char, unsigned char)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    2004:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    2006:	add.w	r3, r0, #36	; 0x24

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    200a:	sub	sp, #20
    200c:	mov	r5, r0
    200e:	mov	r6, r1
  DirPos_t pos = m_dirPos;
    2010:	add	r4, sp, #4

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    2012:	mov	r7, r2
  DirPos_t pos = m_dirPos;
    2014:	ldmia.w	r3, {r0, r1, r2}
    2018:	stmia.w	r4, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    201c:	lsls	r2, r6, #5
    201e:	mov	r1, r4
    2020:	ldr	r0, [r5, #32]
    2022:	bl	2ae4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    2026:	cmp	r0, #1
    2028:	bne.n	2038 <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    202a:	mov	r2, r7
    202c:	mov	r1, r4
    202e:	ldr	r0, [r5, #32]
    2030:	bl	2a6c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    2034:	add	sp, #20
    2036:	pop	{r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
  DirPos_t pos = m_dirPos;
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    return nullptr;
    2038:	movs	r0, #0
  }
  return m_vol->dirCache(&pos, options);
}
    203a:	add	sp, #20
    203c:	pop	{r4, r5, r6, r7, pc}
    203e:	nop

00002040 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    2040:	push	{r4, lr}
    2042:	mov	r4, r0
  bool rtn = sync();
    2044:	bl	2f34 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    2048:	movs	r3, #0
    204a:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    204e:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    2052:	pop	{r4, pc}

00002054 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    2054:	ldrb.w	r2, [r0, #49]	; 0x31
    2058:	cbz	r2, 205e <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    205a:	movs	r0, #0
    205c:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    205e:	push	{r3, r4, r5, lr}
    2060:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    2062:	mov	r1, r2
    2064:	movs	r2, #56	; 0x38
    2066:	mov	r4, r0
    2068:	bl	972c <memset>
  m_attributes = FILE_ATTR_ROOT;
    206c:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    206e:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    2070:	str	r5, [r4, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    2072:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    2076:	strb.w	r0, [r4, #51]	; 0x33
    207a:	pop	{r3, r4, r5, pc}

0000207c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
    207c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2080:	mov	r8, r3
  // Skip leading spaces.
  while (*path == ' ') {
    2082:	ldrb	r3, [r1, #0]
    2084:	cmp	r3, #32
    2086:	bne.n	2090 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x14>
    2088:	ldrb.w	r3, [r1, #1]!
    208c:	cmp	r3, #32
    208e:	beq.n	2088 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc>
    2090:	mov	r3, r1
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
    2092:	ldr.w	ip, [pc, #128]	; 2114 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>
    path++;
  }
  fname->begin = path;
    2096:	str	r1, [r2, #0]
  fname->end = path;
    2098:	str	r1, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    209a:	ldrb	r4, [r3, #0]
    209c:	mov.w	lr, #1
    20a0:	mov	r6, r3
    20a2:	sub.w	r5, r4, #34	; 0x22
    20a6:	cmp	r4, #47	; 0x2f
    20a8:	it	ne
    20aa:	cmpne	r4, #0
    20ac:	sub.w	r7, r4, #32
    20b0:	add	r3, lr
    20b2:	uxtb	r5, r5
    20b4:	beq.n	20ea <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    20b6:	cmp	r7, #95	; 0x5f
    20b8:	lsr.w	r6, ip, r5
    20bc:	and.w	r1, r4, #191	; 0xbf
    20c0:	ite	ls
    20c2:	movls	r7, #0
    20c4:	movhi	r7, #1
    20c6:	cmp	r5, #29
    20c8:	and.w	r5, r6, #1
    20cc:	it	ls
    20ce:	eorls.w	lr, r5, #1
         c == '>' || c == '?' || c == '\\' || c == '|';
    20d2:	cmp	r7, lr
    20d4:	bcs.n	210c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
    20d6:	cmp	r1, #60	; 0x3c
    20d8:	beq.n	210c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
         c == '>' || c == '?' || c == '\\' || c == '|';
    20da:	cmp	r4, #92	; 0x5c
    20dc:	beq.n	210c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    uint8_t c = *path++;
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (c != '.' && c != ' ') {
    20de:	cmp	r4, #46	; 0x2e
    20e0:	beq.n	209a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    20e2:	cmp	r4, #32
    20e4:	beq.n	209a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
      // Need to trim trailing dots spaces.
      fname->end = path;
    20e6:	str	r3, [r2, #8]
    20e8:	b.n	209a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    20ea:	cmp	r4, #32
    20ec:	beq.n	20f2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    20ee:	cmp	r4, #47	; 0x2f
    20f0:	bne.n	20fe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x82>
    20f2:	ldrb.w	r3, [r6, #1]!
    20f6:	cmp	r3, #32
    20f8:	beq.n	20f2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    20fa:	cmp	r3, #47	; 0x2f
    20fc:	beq.n	20f2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
  }
  *ptr = path;
    20fe:	str.w	r6, [r8]
  return hashName(fname);
    2102:	mov	r1, r2

fail:
  return false;
}
    2104:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
  }
  *ptr = path;
  return hashName(fname);
    2108:	b.w	1fa8 <ExFatFile::hashName(ExName_t*)>

fail:
  return false;
}
    210c:	movs	r0, #0
    210e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2112:	nop
    2114:	.word	0x31000101

00002118 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    2118:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    211c:	ldrb.w	r3, [r0, #51]	; 0x33
    2120:	sub	sp, #12
    2122:	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    2124:	lsls	r6, r3, #31
    2126:	bpl.n	21ea <ExFatFile::read(void*, unsigned int)+0xd2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    2128:	lsls	r4, r3, #25
    212a:	mov	r6, r1
    212c:	mov	r9, r2
    212e:	bpl.w	22ac <ExFatFile::read(void*, unsigned int)+0x194>
    if ((m_curPosition + count) > m_validLength) {
    2132:	ldrd	r0, r1, [r5]
    2136:	ldrd	r2, r3, [r5, #16]
    213a:	adds.w	sl, r0, r9
    213e:	adc.w	fp, r1, #0
    2142:	cmp	r3, fp
    2144:	it	eq
    2146:	cmpeq	r2, sl
    2148:	bcc.w	22b8 <ExFatFile::read(void*, unsigned int)+0x1a0>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    214c:	cmp.w	r9, #0
    2150:	beq.n	223c <ExFatFile::read(void*, unsigned int)+0x124>
    2152:	mov	sl, r5
    2154:	mov	r4, r9
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    2156:	movw	r7, #511	; 0x1ff
    215a:	ldrd	r0, r1, [sl], #24
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    215e:	ldr	r3, [r5, #32]
    2160:	ldr.w	r2, [r3, #1080]	; 0x438
    2164:	and.w	r8, r2, r0
    sectorOffset = clusterOffset & m_vol->sectorMask();
    2168:	ubfx	fp, r8, #0, #9
    if (clusterOffset == 0) {
    216c:	cmp.w	r8, #0
    2170:	bne.n	2248 <ExFatFile::read(void*, unsigned int)+0x130>
      if (m_curPosition == 0) {
    2172:	orrs.w	r2, r0, r1
    2176:	bne.n	226c <ExFatFile::read(void*, unsigned int)+0x154>
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    2178:	ldrb.w	r2, [r5, #49]	; 0x31
    217c:	lsls	r1, r2, #25
    217e:	ite	mi
    2180:	ldrmi.w	r1, [r3, #1076]	; 0x434
    2184:	ldrpl	r1, [r5, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    2186:	str	r1, [r5, #24]
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    2188:	mov.w	r0, r8, lsr #9
    218c:	subs	r1, #2
    218e:	ldr.w	r2, [r3, #1068]	; 0x42c
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    2192:	cmp	r4, r7
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    2194:	ldrb.w	lr, [r3, #1093]	; 0x445
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    2198:	add	r2, r0
    219a:	lsl.w	r1, r1, lr
    219e:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    21a0:	bls.n	2200 <ExFatFile::read(void*, unsigned int)+0xe8>
    21a2:	cmp.w	fp, #0
    21a6:	bne.n	2200 <ExFatFile::read(void*, unsigned int)+0xe8>
    21a8:	ldr.w	r2, [r3, #536]	; 0x218
    21ac:	cmp	r1, r2
    21ae:	beq.n	2200 <ExFatFile::read(void*, unsigned int)+0xe8>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    21b0:	cmp.w	r4, #1024	; 0x400
    21b4:	bcc.n	227a <ExFatFile::read(void*, unsigned int)+0x162>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    21b6:	mov.w	ip, #1
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    21ba:	mov.w	r8, r4, lsr #9
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    21be:	lsl.w	lr, ip, lr
    21c2:	rsb	r0, r0, lr
    21c6:	cmp	r8, r0
    21c8:	it	cs
    21ca:	movcs	r8, r0
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    21cc:	cmp	r1, r2
    21ce:	bhi.n	224c <ExFatFile::read(void*, unsigned int)+0x134>
    21d0:	add.w	r0, r1, r8
    21d4:	cmp	r2, r0
    21d6:	bcs.n	224c <ExFatFile::read(void*, unsigned int)+0x134>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    21d8:	add.w	r0, r3, #528	; 0x210
    21dc:	str	r1, [sp, #4]
    21de:	str	r3, [sp, #0]
    21e0:	bl	1f10 <FsCache::sync()>
    21e4:	ldr	r3, [sp, #0]
    21e6:	ldr	r1, [sp, #4]
    21e8:	cbnz	r0, 224c <ExFatFile::read(void*, unsigned int)+0x134>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    21ea:	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    21ee:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    21f2:	orr.w	r3, r3, #2
    21f6:	strb.w	r3, [r5, #50]	; 0x32
  return -1;
}
    21fa:	add	sp, #12
    21fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() { m_dataCache.dirty(); }
  void dataCacheInvalidate() { m_dataCache.invalidate(); }
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    2200:	add.w	r0, r3, #528	; 0x210
    2204:	movs	r2, #0
    2206:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    220a:	cmp	r0, #0
    220c:	beq.n	21ea <ExFatFile::read(void*, unsigned int)+0xd2>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
        sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    220e:	rsb	r8, fp, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    2212:	add.w	r1, r0, fp
    2216:	mov	r0, r6
    2218:	cmp	r8, r4
    221a:	it	cs
    221c:	movcs	r8, r4
    221e:	mov	r2, r8
    2220:	bl	68c4 <memcpy>
    2224:	mov	r0, r8
    2226:	movs	r1, #0
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    2228:	add	r6, r8
    m_curPosition += n;
    222a:	ldrd	r2, r3, [r5]
    222e:	adds	r0, r0, r2
    2230:	adcs	r1, r3
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    2232:	subs.w	r4, r4, r8
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    2236:	strd	r0, r1, [r5]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    223a:	bne.n	215e <ExFatFile::read(void*, unsigned int)+0x46>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    223c:	movs	r4, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    223e:	rsb	r0, r4, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    2242:	add	sp, #12
    2244:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2248:	ldr	r1, [r5, #24]
    224a:	b.n	2188 <ExFatFile::read(void*, unsigned int)+0x70>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    224c:	ldr.w	r0, [r3, #532]	; 0x214
    2250:	mov	r2, r6
    2252:	mov	r3, r8
    2254:	ldr.w	lr, [r0]
    2258:	ldr.w	fp, [lr, #20]
    225c:	blx	fp
                       (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    225e:	cmp	r0, #0
    2260:	beq.n	21ea <ExFatFile::read(void*, unsigned int)+0xd2>
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    2262:	mov.w	r8, r8, lsl #9
    2266:	movs	r1, #0
    2268:	mov	r0, r8
    226a:	b.n	2228 <ExFatFile::read(void*, unsigned int)+0x110>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    226c:	ldrb.w	r2, [r5, #51]	; 0x33
    2270:	lsls	r2, r2, #25
    2272:	bpl.n	2296 <ExFatFile::read(void*, unsigned int)+0x17e>
        m_curCluster++;
    2274:	ldr	r1, [r5, #24]
    2276:	adds	r1, #1
    2278:	b.n	2186 <ExFatFile::read(void*, unsigned int)+0x6e>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    227a:	ldr.w	r0, [r3, #532]	; 0x214
    227e:	mov	r2, r6
    2280:	ldr	r3, [r0, #0]
    2282:	ldr	r3, [r3, #16]
    2284:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    2286:	cmp	r0, #0
    2288:	beq.n	21ea <ExFatFile::read(void*, unsigned int)+0xd2>
    228a:	mov.w	r0, #512	; 0x200
    228e:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    2290:	mov.w	r8, #512	; 0x200
    2294:	b.n	2228 <ExFatFile::read(void*, unsigned int)+0x110>
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    2296:	mov	r0, r3
    2298:	mov	r2, sl
    229a:	ldr	r1, [r5, #24]
    229c:	bl	2aa4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    22a0:	cmp	r0, #0
    22a2:	blt.n	21ea <ExFatFile::read(void*, unsigned int)+0xd2>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    22a4:	beq.n	22be <ExFatFile::read(void*, unsigned int)+0x1a6>
    22a6:	ldr	r3, [r5, #32]
    22a8:	ldr	r1, [r5, #24]
    22aa:	b.n	2188 <ExFatFile::read(void*, unsigned int)+0x70>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    22ac:	ldrb.w	r3, [r0, #49]	; 0x31
    22b0:	lsls	r0, r3, #28
    22b2:	bmi.w	2132 <ExFatFile::read(void*, unsigned int)+0x1a>
    22b6:	b.n	214c <ExFatFile::read(void*, unsigned int)+0x34>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    22b8:	rsb	r9, r0, r2
    22bc:	b.n	214c <ExFatFile::read(void*, unsigned int)+0x34>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
    22be:	ldrb.w	r3, [r5, #49]	; 0x31
    22c2:	tst.w	r3, #80	; 0x50
    22c6:	bne.n	223e <ExFatFile::read(void*, unsigned int)+0x126>
    22c8:	b.n	21ea <ExFatFile::read(void*, unsigned int)+0xd2>
    22ca:	nop

000022cc <ExFatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
    22cc:	push	{r4, r5, r6, r7, lr}
    22ce:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    22d0:	movs	r2, #1
    22d2:	mov	r4, r0
  uint64_t saveCurPosition = m_curPosition;
  uint32_t saveCurCluster = m_curCluster;
    22d4:	ldr	r5, [r0, #24]
    22d6:	add.w	r1, sp, #7
fail:
  return false;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t saveCurPosition = m_curPosition;
    22da:	ldrd	r6, r7, [r0]
    22de:	bl	2118 <ExFatFile::read(void*, unsigned int)>
    22e2:	cmp	r0, #1
  uint32_t saveCurCluster = m_curCluster;
  int c = read();
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
    22e4:	str	r5, [r4, #24]
    22e6:	ite	eq
    22e8:	ldrbeq.w	r0, [sp, #7]
    22ec:	movne.w	r0, #4294967295
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t saveCurPosition = m_curPosition;
  uint32_t saveCurCluster = m_curCluster;
  int c = read();
  m_curPosition = saveCurPosition;
    22f0:	strd	r6, r7, [r4]
  m_curCluster = saveCurCluster;
  return c;
}
    22f4:	add	sp, #12
    22f6:	pop	{r4, r5, r6, r7, pc}

000022f8 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    22f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22fc:	ldrb.w	lr, [r0, #49]	; 0x31
    2300:	sub	sp, #20
    2302:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    2304:	ldr	r5, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    2306:	cmp.w	lr, #0
    230a:	beq.n	237a <ExFatFile::seekSet(unsigned long long)+0x82>
    230c:	mov	r6, r2
    230e:	mov	r7, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    2310:	ldrd	r0, r1, [r0]
    2314:	cmp	r1, r3
    2316:	it	eq
    2318:	cmpeq	r0, r2
    231a:	beq.n	23e8 <ExFatFile::seekSet(unsigned long long)+0xf0>
    return true;
  }
  if (pos == 0) {
    231c:	orrs.w	r3, r6, r7
    2320:	bne.n	2384 <ExFatFile::seekSet(unsigned long long)+0x8c>
    // set position to start of file
    m_curCluster = 0;
    2322:	movs	r3, #0
    2324:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    2326:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    2328:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    232c:	add	sp, #20
    232e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    2332:	adds.w	r2, r0, #4294967295
    2336:	adc.w	r3, r1, #4294967295
    233a:	lsr.w	ip, r2, ip
    233e:	lsl.w	r8, r3, r8
    2342:	lsr.w	sl, r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    2346:	orrs.w	r3, r0, r1
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    234a:	orr.w	ip, ip, r8
    234e:	orr.w	ip, ip, sl
  if (nNew < nCur || m_curPosition == 0) {
    2352:	beq.n	23ec <ExFatFile::seekSet(unsigned long long)+0xf4>
    2354:	cmp	fp, ip
    2356:	bcc.n	23ec <ExFatFile::seekSet(unsigned long long)+0xf4>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    2358:	rsb	fp, ip, fp
    235c:	mov	r9, r5
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    235e:	add.w	r8, r4, #24
    2362:	mov	r5, fp
    2364:	mov	r2, r8
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    2366:	cmp	r5, #0
    2368:	beq.n	2326 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    236a:	ldr	r1, [r4, #24]
    236c:	subs	r5, #1
    236e:	ldr	r0, [r4, #32]
    2370:	bl	2aa4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    2374:	cmp	r0, #0
    2376:	bgt.n	2364 <ExFatFile::seekSet(unsigned long long)+0x6c>
    2378:	mov	r5, r9
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    237a:	movs	r0, #0
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    237c:	str	r5, [r4, #24]
  return false;
}
    237e:	add	sp, #20
    2380:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    2384:	tst.w	lr, #8
    2388:	bne.n	23da <ExFatFile::seekSet(unsigned long long)+0xe2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    238a:	ldr	r3, [r4, #32]
    238c:	adds.w	r8, r6, #4294967295
    2390:	ldrb.w	ip, [r3, #1093]	; 0x445
    2394:	adc.w	r9, r7, #4294967295
    2398:	mov	sl, r8
    239a:	str	r3, [sp, #12]
    239c:	add.w	ip, ip, #9
    23a0:	mov	fp, r9
  if (isContiguous()) {
    23a2:	ldrb.w	r9, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    23a6:	uxtb.w	ip, ip
  if (isContiguous()) {
    23aa:	tst.w	r9, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    23ae:	rsb	r8, ip, #32
    23b2:	lsr.w	r2, sl, ip
    23b6:	strd	sl, fp, [sp]
    23ba:	ldr	r3, [sp, #4]
    23bc:	sub.w	sl, ip, #32
    23c0:	lsl.w	fp, r3, r8
    23c4:	lsr.w	r3, r3, sl
    23c8:	orr.w	r2, r2, fp
    23cc:	orr.w	fp, r2, r3
  if (isContiguous()) {
    23d0:	beq.n	2332 <ExFatFile::seekSet(unsigned long long)+0x3a>
    m_curCluster = m_firstCluster + nNew;
    23d2:	ldr	r3, [r4, #28]
    23d4:	add	r3, fp
    23d6:	str	r3, [r4, #24]
    goto done;
    23d8:	b.n	2326 <ExFatFile::seekSet(unsigned long long)+0x2e>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_validLength) {
    23da:	ldrd	r2, r3, [r4, #16]
    23de:	cmp	r3, r7
    23e0:	it	eq
    23e2:	cmpeq	r2, r6
    23e4:	bcc.n	237a <ExFatFile::seekSet(unsigned long long)+0x82>
    23e6:	b.n	238a <ExFatFile::seekSet(unsigned long long)+0x92>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    23e8:	movs	r0, #1
    23ea:	b.n	237e <ExFatFile::seekSet(unsigned long long)+0x86>
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    23ec:	tst.w	lr, #64	; 0x40
    23f0:	bne.n	23f8 <ExFatFile::seekSet(unsigned long long)+0x100>
    23f2:	ldr	r3, [r4, #28]
    23f4:	str	r3, [r4, #24]
    23f6:	b.n	235c <ExFatFile::seekSet(unsigned long long)+0x64>
    23f8:	ldr	r3, [sp, #12]
    23fa:	ldr.w	r3, [r3, #1076]	; 0x434
    23fe:	b.n	23f4 <ExFatFile::seekSet(unsigned long long)+0xfc>

00002400 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    2400:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2404:	mov	fp, r3
  uint8_t freeCount = 0;
  uint8_t freeNeed = 3;
  bool inSet = false;

  // error if already open, no access mode, or no directory.
  if (isOpen() || !dir->isDir()) {
    2406:	ldrb.w	r3, [r0, #49]	; 0x31

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    240a:	sub	sp, #60	; 0x3c
    240c:	mov	r8, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed = 3;
  bool inSet = false;

  // error if already open, no access mode, or no directory.
  if (isOpen() || !dir->isDir()) {
    240e:	cbnz	r3, 241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    2410:	ldrb.w	r3, [r1, #49]	; 0x31
    2414:	mov	r4, r1
    2416:	tst.w	r3, #80	; 0x50
    241a:	bne.n	242e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e>
  return sync();
#endif  // EXFAT_READ_ONLY

fail:
  // close file
  m_attributes = FILE_ATTR_CLOSED;
    241c:	movs	r3, #0
  m_flags = 0;
  return false;
    241e:	mov	r0, r3
  return sync();
#endif  // EXFAT_READ_ONLY

fail:
  // close file
  m_attributes = FILE_ATTR_CLOSED;
    2420:	strb.w	r3, [r8, #49]	; 0x31
  m_flags = 0;
    2424:	strb.w	r3, [r8, #51]	; 0x33
  return false;
}
    2428:	add	sp, #60	; 0x3c
    242a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  switch (oflag & O_ACCMODE) {
    242e:	and.w	r3, fp, #3
    2432:	mov	r9, r2
    2434:	cmp	r3, #1
    2436:	beq.n	247c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x7c>
    2438:	cmp	r3, #2
    243a:	beq.w	264e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x24e>
    243e:	cmp	r3, #0
    2440:	bne.n	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    2442:	movs	r2, #1
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    2444:	and.w	r3, fp, #8
    2448:	orrs	r3, r2
    244a:	str	r3, [sp, #8]

  if (fname) {
    244c:	cmp.w	r9, #0
    2450:	beq.n	248c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8c>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    2452:	ldr.w	r3, [r9, #12]
    2456:	ldr	r5, [pc, #776]	; (2760 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x360>)
    2458:	adds	r3, #14
    245a:	umull	r3, r5, r5, r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    245e:	ldrd	r2, r3, [r4]
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;

  if (fname) {
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    2462:	lsrs	r5, r5, #3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    2464:	orrs	r3, r2
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;

  if (fname) {
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    2466:	add.w	r5, r5, #2
    246a:	uxtb	r5, r5
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    246c:	beq.n	248e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8e>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    246e:	movs	r1, #0
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    2470:	movs	r2, #0
    2472:	movs	r3, #0
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    2474:	str	r1, [r4, #24]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    2476:	strd	r2, r3, [r4]
    247a:	b.n	248e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8e>
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  switch (oflag & O_ACCMODE) {
    247c:	movs	r2, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    247e:	and.w	r3, fp, #8
    2482:	orrs	r3, r2
    2484:	str	r3, [sp, #8]

  if (fname) {
    2486:	cmp.w	r9, #0
    248a:	bne.n	2452 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x52>
  DirFile_t* dirFile;
  DirStream_t* dirStream;
  DirName_t* dirName;
  uint8_t buf[FS_DIR_SIZE];
  uint8_t freeCount = 0;
  uint8_t freeNeed = 3;
    248c:	movs	r5, #3
        }
        // Likely openNext call.
        DBG_WARN_MACRO;
        goto fail;
      }
      inSet = false;
    248e:	movs	r6, #0
      m_dirPos.isContiguous = dir->isContiguous();
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
        m_flags |= FILE_FLAG_CONTIGUOUS;
    2490:	ldr	r3, [sp, #8]
        }
        // Likely openNext call.
        DBG_WARN_MACRO;
        goto fail;
      }
      inSet = false;
    2492:	mov	r7, r6
      m_dirPos.isContiguous = dir->isContiguous();
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
        m_flags |= FILE_FLAG_CONTIGUOUS;
    2494:	orr.w	r3, r3, #64	; 0x40
    2498:	str	r3, [sp, #12]
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    dir->rewind();
  }

  while (1) {
    n = dir->read(buf, FS_DIR_SIZE);
    249a:	movs	r2, #32
    249c:	add	r1, sp, #24
    249e:	mov	r0, r4
    24a0:	bl	2118 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    24a4:	cbz	r0, 24dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xdc>
      goto create;
    }
    if (n != FS_DIR_SIZE) {
    24a6:	cmp	r0, #32
    24a8:	bne.n	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & EXFAT_TYPE_USED)) {
    24aa:	ldrb.w	r3, [sp, #24]
    24ae:	lsls	r2, r3, #24
    24b0:	bmi.n	2534 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x134>
      // Unused entry.
      if (freeCount == 0) {
    24b2:	cbnz	r7, 24be <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xbe>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    24b4:	ldr	r2, [r4, #0]
    24b6:	ldr.w	sl, [r4, #24]
    24ba:	subs	r2, #32
    24bc:	str	r2, [sp, #4]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    24be:	cmp	r7, r5
    24c0:	bcs.n	24c6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
        freeCount++;
    24c2:	adds	r7, #1
    24c4:	uxtb	r7, r7
      }
      if (buf[0] == EXFAT_TYPE_END_DIR) {
    24c6:	cmp	r3, #0
    24c8:	beq.w	2652 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x252>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    dir->rewind();
  }

  while (1) {
    n = dir->read(buf, FS_DIR_SIZE);
    24cc:	movs	r2, #32
    24ce:	add	r1, sp, #24
    24d0:	mov	r0, r4
      }
      if (fname->atEnd()) {
        goto found;
      }
    } else {
      inSet = false;
    24d2:	movs	r6, #0
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    dir->rewind();
  }

  while (1) {
    n = dir->read(buf, FS_DIR_SIZE);
    24d4:	bl	2118 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    24d8:	cmp	r0, #0
    24da:	bne.n	24a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa6>
#if EXFAT_READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else   // EXFAT_READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    24dc:	tst.w	fp, #512	; 0x200
    24e0:	beq.n	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    24e2:	ldr	r3, [sp, #8]
    24e4:	lsls	r2, r3, #30
    24e6:	bpl.n	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    24e8:	cmp.w	r9, #0
    24ec:	beq.n	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    DBG_WARN_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    24ee:	cmp	r7, r5
    24f0:	bcs.w	2662 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x262>
    24f4:	ldr	r6, [sp, #4]
    24f6:	b.n	250e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10e>
        goto fail;
      }
      dir->m_curCluster = saveCurCluster;
      continue;
    }
    if (n != FS_DIR_SIZE) {
    24f8:	cmp	r0, #32
    24fa:	bne.n	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    24fc:	cbnz	r7, 2506 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x106>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    24fe:	ldr	r6, [r4, #0]
    2500:	ldr.w	sl, [r4, #24]
    2504:	subs	r6, #32
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    2506:	uxtb	r7, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    DBG_WARN_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    2508:	cmp	r5, r7
    250a:	bls.w	2660 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x260>
    n = dir->read(buf, FS_DIR_SIZE);
    250e:	movs	r2, #32
    2510:	add	r1, sp, #24
    2512:	mov	r0, r4
    2514:	bl	2118 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    2518:	adds	r3, r7, #1
    DBG_WARN_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, FS_DIR_SIZE);
    if (n == 0) {
    251a:	cmp	r0, #0
    251c:	bne.n	24f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xf8>
      uint32_t saveCurCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    251e:	mov	r0, r4
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, FS_DIR_SIZE);
    if (n == 0) {
      uint32_t saveCurCluster = dir->m_curCluster;
    2520:	ldr.w	fp, [r4, #24]
      if (!dir->addDirCluster()) {
    2524:	bl	2f94 <ExFatFile::addDirCluster()>
    2528:	cmp	r0, #0
    252a:	beq.w	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = saveCurCluster;
    252e:	str.w	fp, [r4, #24]
      continue;
    2532:	b.n	2508 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x108>
        // Likely openNext call.
        DBG_WARN_MACRO;
        goto fail;
      }
      inSet = false;
    } else if (!inSet) {
    2534:	cbnz	r6, 258a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
      if (freeCount < freeNeed) {
        freeCount = 0;
    2536:	cmp	r7, r5
    2538:	it	cc
    253a:	movcc	r7, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    253c:	cmp	r3, #133	; 0x85
    253e:	bne.n	249a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
        continue;
      }
      inSet = true;
      memset(this, 0, sizeof(ExFatFile));
    2540:	mov	r1, r6
    2542:	movs	r2, #56	; 0x38
    2544:	mov	r0, r8
        freeCount = 0;
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    2546:	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    2548:	bl	972c <memset>
      dirFile = reinterpret_cast<DirFile_t*>(buf);
      m_setCount = dirFile->setCount;
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    254c:	ldrb.w	r3, [sp, #28]
        continue;
      }
      inSet = true;
      memset(this, 0, sizeof(ExFatFile));
      dirFile = reinterpret_cast<DirFile_t*>(buf);
      m_setCount = dirFile->setCount;
    2550:	ldrb.w	r2, [sp, #25]
    2554:	strb.w	r2, [r8, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    2558:	and.w	r2, r3, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
    255c:	lsls	r3, r3, #27
        m_attributes |= FILE_ATTR_FILE;
    255e:	it	pl
    2560:	orrpl.w	r2, r2, #8
    2564:	strb.w	r2, [r8, #49]	; 0x31
      }
      m_vol = dir->volume();
      m_dirPos.cluster = dir->curCluster();
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    2568:	ldr	r3, [r4, #0]
    256a:	ldr	r2, [r4, #32]
    256c:	ldr	r1, [r4, #24]
    256e:	subs	r3, #32
      m_setCount = dirFile->setCount;
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
        m_attributes |= FILE_ATTR_FILE;
      }
      m_vol = dir->volume();
    2570:	str.w	r2, [r8, #32]
      m_dirPos.cluster = dir->curCluster();
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    2574:	str.w	r3, [r8, #40]	; 0x28
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
        m_attributes |= FILE_ATTR_FILE;
      }
      m_vol = dir->volume();
      m_dirPos.cluster = dir->curCluster();
    2578:	str.w	r1, [r8, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
      m_dirPos.isContiguous = dir->isContiguous();
    257c:	ldrb.w	r3, [r4, #51]	; 0x33
    2580:	ubfx	r3, r3, #6, #1
    2584:	strb.w	r3, [r8, #44]	; 0x2c
    2588:	b.n	249a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    258a:	cmp	r3, #192	; 0xc0
    258c:	beq.n	25f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1f2>
      fname->reset();
      if (fname->nameLength != dirStream->nameLength ||
          fname->nameHash != getLe16(dirStream->nameHash)) {
        inSet = false;
      }
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    258e:	cmp	r3, #193	; 0xc1
    2590:	bne.n	24cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xcc>
      dirName = reinterpret_cast<DirName_t*>(buf);
      if (!cmpName(dirName, fname)) {
    2592:	mov	r2, r9
    2594:	add	r1, sp, #24
    2596:	mov	r0, r8
    2598:	bl	1f44 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    259c:	cmp	r0, #0
    259e:	beq.n	265c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25c>
        inSet = false;
        continue;
      }
      if (fname->atEnd()) {
    25a0:	ldr.w	r2, [r9, #4]
    25a4:	ldr.w	r3, [r9, #8]
    25a8:	cmp	r2, r3
    25aa:	bne.w	249a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    25ae:	tst.w	fp, #2048	; 0x800
    25b2:	bne.w	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    25b6:	tst.w	fp, #17408	; 0x4400
    25ba:	bne.w	270e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30e>
    25be:	ldrb.w	r3, [r8, #51]	; 0x33
    25c2:	lsls	r0, r3, #30
    25c4:	bmi.w	270e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30e>
      goto fail;
    }
  }

#if !EXFAT_READ_ONLY
  if (oflag & O_TRUNC) {
    25c8:	tst.w	fp, #1024	; 0x400
    25cc:	bne.w	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    25d0:	tst.w	fp, #16384	; 0x4000
    25d4:	bne.w	274e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isWritable()) {
    25d8:	ldrb.w	r3, [r8, #51]	; 0x33
    25dc:	lsls	r3, r3, #30
    25de:	bpl.w	274a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34a>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    25e2:	ldrb.w	r3, [r8, #49]	; 0x31
  }
#endif  // !EXFAT_READ_ONLY
  return true;
    25e6:	movs	r0, #1
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isWritable()) {
    m_attributes |= FS_ATTRIB_ARCHIVE;
    25e8:	orr.w	r3, r3, #32
    25ec:	strb.w	r3, [r8, #49]	; 0x31
    25f0:	b.n	2428 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28>
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
      m_dirPos.isContiguous = dir->isContiguous();
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    25f2:	ldrb.w	r3, [sp, #25]
      m_dirPos.cluster = dir->curCluster();
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
      m_dirPos.isContiguous = dir->isContiguous();
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
    25f6:	ldrb.w	r2, [sp, #8]
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    25fa:	lsls	r6, r3, #30
      m_dirPos.cluster = dir->curCluster();
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
      m_dirPos.isContiguous = dir->isContiguous();
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
    25fc:	strb.w	r2, [r8, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    2600:	bpl.n	260a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x20a>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    2602:	ldrb.w	r3, [sp, #12]
    2606:	strb.w	r3, [r8, #51]	; 0x33
      }
      m_validLength = getLe64(dirStream->validLength);
      m_firstCluster = getLe32(dirStream->firstCluster);
    260a:	ldr	r1, [sp, #44]	; 0x2c
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
        m_flags |= FILE_FLAG_CONTIGUOUS;
      }
      m_validLength = getLe64(dirStream->validLength);
    260c:	ldrd	r2, r3, [sp, #32]
      m_firstCluster = getLe32(dirStream->firstCluster);
    2610:	str.w	r1, [r8, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    2614:	ldrd	r0, r1, [sp, #48]	; 0x30
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
        m_flags |= FILE_FLAG_CONTIGUOUS;
      }
      m_validLength = getLe64(dirStream->validLength);
    2618:	strd	r2, r3, [r8, #16]
      m_firstCluster = getLe32(dirStream->firstCluster);
      m_dataLength = getLe64(dirStream->dataLength);
    261c:	strd	r0, r1, [r8, #8]
      if (!fname) {
    2620:	cmp.w	r9, #0
    2624:	beq.n	25ae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ae>
        goto found;
      }
      fname->reset();
      if (fname->nameLength != dirStream->nameLength ||
    2626:	ldrb.w	r3, [sp, #27]
    262a:	ldr.w	r2, [r9, #12]
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
    262e:	ldr.w	r1, [r9]
    2632:	cmp	r2, r3
    2634:	str.w	r1, [r9, #4]
    2638:	bne.w	24cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xcc>
    263c:	ldrh.w	r6, [sp, #28]
    2640:	ldrh.w	r3, [r9, #16]
    2644:	subs	r6, r6, r3
    2646:	clz	r6, r6
    264a:	lsrs	r6, r6, #5
    264c:	b.n	249a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  switch (oflag & O_ACCMODE) {
    264e:	movs	r2, #3
    2650:	b.n	247e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x7e>
      }
      if (freeCount < freeNeed) {
        freeCount++;
      }
      if (buf[0] == EXFAT_TYPE_END_DIR) {
        if (fname) {
    2652:	cmp.w	r9, #0
    2656:	bne.w	24dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xdc>
    265a:	b.n	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
        inSet = false;
      }
    } else if (buf[0] == EXFAT_TYPE_NAME) {
      dirName = reinterpret_cast<DirName_t*>(buf);
      if (!cmpName(dirName, fname)) {
        inSet = false;
    265c:	mov	r6, r0
    265e:	b.n	249a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
    2660:	str	r6, [sp, #4]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
    2662:	movs	r2, #56	; 0x38
    2664:	movs	r1, #0
    2666:	mov	r0, r8
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
    2668:	ldrb.w	r6, [r4, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    266c:	bl	972c <memset>
    2670:	ldr	r2, [r4, #32]
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    2672:	movs	r3, #40	; 0x28
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
    2674:	ubfx	r6, r6, #6, #1
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    2678:	str.w	r2, [r8, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
  m_dirPos = freePos;
    267c:	ldr	r2, [sp, #4]
    267e:	strb.w	r6, [r8, #44]	; 0x2c
    2682:	str.w	sl, [r8, #36]	; 0x24
    2686:	str.w	r2, [r8, #40]	; 0x28
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    268a:	strb.w	r3, [r8, #49]	; 0x31
    268e:	ldr.w	r3, [r9]
    2692:	str.w	r3, [r9, #4]
  m_dirPos = freePos;
  fname->reset();
  for (uint8_t i = 0; i < freeNeed; i++) {
    2696:	cbz	r5, 2706 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x306>
    2698:	movs	r7, #0
    }
    memset(cache, 0, FS_DIR_SIZE);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    269a:	subs	r4, r5, #1
      dirFile->setCount = m_setCount;

      if (FsDateTime::callback) {
    269c:	ldr	r6, [pc, #196]	; (2764 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x364>)
    269e:	mov	fp, r7
    }
    memset(cache, 0, FS_DIR_SIZE);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    26a0:	uxtb	r4, r4
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
  m_dirPos = freePos;
  fname->reset();
  for (uint8_t i = 0; i < freeNeed; i++) {
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    26a2:	movs	r2, #1
    26a4:	mov	r1, fp
    26a6:	mov	r0, r8
    26a8:	bl	2004 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    26ac:	mov	sl, r0
    26ae:	cmp	r0, #0
    26b0:	beq.w	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    26b4:	ldrsb.w	r3, [r0]
    26b8:	cmp	r3, #0
    26ba:	blt.w	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0, FS_DIR_SIZE);
    26be:	movs	r2, #32
    26c0:	movs	r1, #0
    26c2:	bl	972c <memset>
    if (i == 0) {
    26c6:	cmp	r7, #0
    26c8:	beq.n	278e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38e>
          setLe16(dirFile->createTime, FS_DEFAULT_TIME);
          setLe16(dirFile->modifyTime, FS_DEFAULT_TIME);
          setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
        }
      }
    } else if (i == 1) {
    26ca:	cmp.w	fp, #1
    26ce:	beq.n	2768 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x368>
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
      dirStream->nameLength = fname->nameLength;
      setLe16(dirStream->nameHash, fname->nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    26d0:	movs	r3, #193	; 0xc1
    26d2:	mov	r2, sl
    26d4:	add.w	lr, sl, #30
    26d8:	strb.w	r3, [sl]
    26dc:	ldr.w	r3, [r9, #4]
    26e0:	ldr.w	r0, [r9, #8]
      for (size_t k = 0; k < 15; k++) {
        if (fname->atEnd()) {
    26e4:	cmp	r3, r0
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    26e6:	add.w	r3, r3, #1
    26ea:	beq.n	26fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fc>
    26ec:	str.w	r3, [r9, #4]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    26f0:	ldrb.w	r1, [r3, #-1]
    26f4:	strh.w	r1, [r2, #2]!
      dirStream->nameLength = fname->nameLength;
      setLe16(dirStream->nameHash, fname->nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
      for (size_t k = 0; k < 15; k++) {
    26f8:	cmp	r2, lr
    26fa:	bne.n	26e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
    26fc:	adds	r7, #1
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
  m_dirPos = freePos;
  fname->reset();
  for (uint8_t i = 0; i < freeNeed; i++) {
    26fe:	uxtb.w	fp, r7
    2702:	cmp	fp, r5
    2704:	bcc.n	26a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a2>
        uint16_t u = fname->get16();
        setLe16(dirName->unicode + 2 * k, u);
      }
    }
  }
  return sync();
    2706:	mov	r0, r8
    2708:	bl	2f34 <ExFatFile::sync()>
    270c:	b.n	2428 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    270e:	ldrb.w	r3, [r8, #49]	; 0x31
    2712:	tst.w	r3, #17
    2716:	bne.w	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
      goto fail;
    }
  }

#if !EXFAT_READ_ONLY
  if (oflag & O_TRUNC) {
    271a:	tst.w	fp, #1024	; 0x400
    271e:	beq.w	25d0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d0>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    2722:	ldrb.w	r3, [r8, #51]	; 0x33
    2726:	lsls	r1, r3, #30
    2728:	bpl.w	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
   *
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
    272c:	movs	r2, #0
    272e:	movs	r3, #0
    2730:	mov	r0, r8
    2732:	bl	22f8 <ExFatFile::seekSet(unsigned long long)>
    2736:	cmp	r0, #0
    2738:	beq.w	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    273c:	mov	r0, r8
    273e:	bl	3168 <ExFatFile::truncate()>
    2742:	cmp	r0, #0
    2744:	beq.w	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    2748:	b.n	25d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d8>
  }
  if (isWritable()) {
    m_attributes |= FS_ATTRIB_ARCHIVE;
  }
#endif  // !EXFAT_READ_ONLY
  return true;
    274a:	movs	r0, #1
    274c:	b.n	2428 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    274e:	mov	r0, r8
    2750:	ldrd	r2, r3, [r8, #16]
    2754:	bl	22f8 <ExFatFile::seekSet(unsigned long long)>
    2758:	cmp	r0, #0
    275a:	bne.w	25d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d8>
    275e:	b.n	241c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    2760:	.word	0x88888889
    2764:	.word	0x20017398
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    2768:	ldr	r3, [sp, #8]
          setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
        }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    276a:	movs	r2, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    276c:	strb.w	fp, [sl, #1]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    2770:	orn	r3, r3, #127	; 0x7f
          setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
        }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    2774:	strb.w	r2, [sl]
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    2778:	strb.w	r3, [r8, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    277c:	ldr.w	r3, [r9, #12]
    2780:	strb.w	r3, [sl, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    2784:	ldrh.w	r3, [r9, #16]
    2788:	strh.w	r3, [sl, #4]
    278c:	b.n	26fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fc>
      goto fail;
    }
    memset(cache, 0, FS_DIR_SIZE);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    278e:	movs	r3, #133	; 0x85
    2790:	strb.w	r3, [sl]
      m_setCount = freeNeed - 1;
    2794:	strb.w	r4, [r8, #48]	; 0x30
      dirFile->setCount = m_setCount;
    2798:	strb.w	r4, [sl, #1]

      if (FsDateTime::callback) {
    279c:	ldr	r3, [r6, #0]
    279e:	cbz	r3, 27c6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c6>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    27a0:	add.w	r2, sp, #19
    27a4:	add.w	r1, sp, #22
    27a8:	add	r0, sp, #20
    27aa:	blx	r3
    27ac:	ldrh.w	r1, [sp, #20]
    27b0:	ldrh.w	r2, [sp, #22]
        setLe16(dirFile->createDate, date);
        setLe16(dirFile->createTime, time);
        dirFile->createTimeMs = ms10;
    27b4:	ldrb.w	r3, [sp, #19]
    27b8:	strh.w	r1, [sl, #10]
    27bc:	strh.w	r2, [sl, #8]
    27c0:	strb.w	r3, [sl, #20]
    27c4:	b.n	26fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fc>
    27c6:	movw	r3, #22049	; 0x5621
    27ca:	strh.w	r3, [sl, #10]
    27ce:	strh.w	r3, [sl, #14]
    27d2:	strh.w	r3, [sl, #18]
    27d6:	b.n	26fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fc>

000027d8 <ExFatFile::open(ExFatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    27d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    27dc:	mov	r6, r0
    27de:	sub	sp, #92	; 0x5c
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    27e0:	movs	r0, #0
    27e2:	mov	r5, r1
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    27e4:	ldrb.w	r1, [r6, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    27e8:	str	r2, [sp, #4]
    27ea:	strb.w	r0, [sp, #81]	; 0x51
    27ee:	strb.w	r0, [sp, #82]	; 0x52
    27f2:	strb.w	r0, [sp, #83]	; 0x53
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    27f6:	cbnz	r1, 2804 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    27f8:	mov	r9, r3
    27fa:	ldrb.w	r3, [r5, #49]	; 0x31
    27fe:	tst.w	r3, #80	; 0x50
    2802:	bne.n	280c <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return openPrivate(dirFile, &fname, oflag);

fail:
  return false;
    2804:	movs	r0, #0
}
    2806:	add	sp, #92	; 0x5c
    2808:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    280c:	ldrb	r3, [r2, #0]
    280e:	mov	r4, r2
    2810:	cmp	r3, #47	; 0x2f
    2812:	beq.n	287a <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    2814:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    2818:	mov	r1, r4
    281a:	add	r3, sp, #4
    281c:	add	r2, sp, #12
    281e:	mov	r0, r6
    2820:	bl	207c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2824:	cmp	r0, #0
    2826:	beq.n	2804 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    2828:	ldr	r3, [sp, #4]
    282a:	ldrb	r3, [r3, #0]
    282c:	cmp	r3, #0
    282e:	beq.n	28a4 <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
      break;
    }
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    2830:	mov	r1, r5
    2832:	movs	r3, #0
    2834:	add	r2, sp, #12
    2836:	mov	r0, r6
    2838:	bl	2400 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    283c:	cmp	r0, #0
    283e:	beq.n	2804 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    2840:	mov	r4, r6
    2842:	add	r7, sp, #32
    2844:	add.w	lr, r6, #48	; 0x30
    2848:	ldr	r0, [r4, #0]
    284a:	adds	r4, #16
    284c:	ldr.w	r1, [r4, #-12]
    2850:	mov	r5, r7
    2852:	ldr.w	r2, [r4, #-8]
    2856:	adds	r7, #16
    2858:	ldr.w	r3, [r4, #-4]
    285c:	cmp	r4, lr
    285e:	stmia	r5!, {r0, r1, r2, r3}
    2860:	bne.n	2848 <ExFatFile::open(ExFatFile*, char const*, int)+0x70>
    2862:	ldr	r0, [r4, #0]
    dirFile = &tmpDir;
    2864:	add	r5, sp, #32
    }
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    2866:	str	r0, [r7, #0]
  }
  return m_vol->dirCache(&pos, options);
}
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    2868:	mov	r0, r6
    286a:	bl	2f34 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    286e:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    2872:	strb.w	r8, [r6, #51]	; 0x33
    2876:	ldr	r4, [sp, #4]
    2878:	b.n	2818 <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    287a:	adds	r4, #1
    287c:	str	r4, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    287e:	ldrb	r1, [r4, #0]
    2880:	cmp	r1, #47	; 0x2f
    2882:	beq.n	287a <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      path++;
    }
    if (*path == 0) {
    2884:	cbz	r1, 28b6 <ExFatFile::open(ExFatFile*, char const*, int)+0xde>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    2886:	add	r0, sp, #32
    2888:	movs	r2, #56	; 0x38
    288a:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    288c:	ldr	r7, [r5, #32]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    288e:	mov	r5, r0
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    2890:	bl	972c <memset>
  m_attributes = FILE_ATTR_ROOT;
    2894:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    2896:	movs	r3, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    2898:	str	r7, [sp, #64]	; 0x40
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    289a:	strb.w	r2, [sp, #81]	; 0x51
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    289e:	strb.w	r3, [sp, #83]	; 0x53
    28a2:	b.n	2814 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return openPrivate(dirFile, &fname, oflag);
    28a4:	mov	r3, r9
    28a6:	add	r2, sp, #12
    28a8:	mov	r1, r5
    28aa:	mov	r0, r6
    28ac:	bl	2400 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>

fail:
  return false;
}
    28b0:	add	sp, #92	; 0x5c
    28b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    28b6:	movs	r2, #56	; 0x38
    28b8:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    28ba:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    28bc:	bl	972c <memset>
  m_attributes = FILE_ATTR_ROOT;
    28c0:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    28c2:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    28c4:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    28c6:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    28ca:	strb.w	r0, [r6, #51]	; 0x33
    28ce:	b.n	2806 <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>

000028d0 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const char* path, oflag_t oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    28d0:	cbz	r1, 28da <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    28d2:	add.w	r1, r1, #1096	; 0x448
    28d6:	b.w	27d8 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    28da:	mov	r0, r1
    28dc:	bx	lr
    28de:	nop

000028e0 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  *value = next;
  return 1;
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    28e0:	push	{r3, r4, r5, lr}
    28e2:	mov	r4, r1
    28e4:	ldr.w	r1, [r0, #1060]	; 0x424
    28e8:	mov	r5, r2
    28ea:	add.w	r0, r0, #528	; 0x210
    28ee:	movs	r2, #1
    28f0:	add.w	r1, r1, r4, lsr #7
    28f4:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    28f8:	mov	r3, r0
    28fa:	cbz	r0, 2908 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    28fc:	lsls	r4, r4, #2
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    28fe:	movs	r0, #1
    2900:	ubfx	r4, r4, #0, #9
    2904:	str	r5, [r3, r4]
    2906:	pop	{r3, r4, r5, pc}

fail:
  return false;
}
    2908:	pop	{r3, r4, r5, pc}
    290a:	nop

0000290c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    290c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2910:	mov	r8, r0
    2912:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2914:	mov	fp, r1
    2916:	cmp	r1, #0
    2918:	beq.n	29a2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x96>
    291a:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    291c:	ldr.w	r3, [r8, #1072]	; 0x430
    2920:	cmp	r7, r3
    2922:	bcs.n	299a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8e>
    2924:	and.w	r5, r7, #7
    2928:	movs	r3, #1
    292a:	ubfx	sl, r7, #3, #9
    292e:	lsl.w	r5, r3, r5
    2932:	uxtb	r5, r5
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    2934:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    2936:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCachePrepare(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.prepare(sector, option);
    2938:	ldr.w	r1, [r8, #1068]	; 0x42c
    293c:	movs	r2, #0
    293e:	mov	r0, r8
    2940:	add.w	r1, r1, r4, lsr #12
    2944:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector =
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    2948:	cbz	r0, 297c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    294a:	ldrb.w	r1, [r0, sl]
    294e:	b.n	2966 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    2950:	cmp	r2, r9
    2952:	beq.n	29a8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9c>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    2954:	cmp	r7, r4
    2956:	beq.n	297a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    2958:	ldr.w	r2, [r8, #1072]	; 0x430
    295c:	cmp	r4, r2
    295e:	bcs.n	298e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    2960:	ands.w	r5, r3, #255	; 0xff
    2964:	beq.n	2980 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    2966:	adds	r4, #1
        if (!(mask & cache[i])) {
    2968:	tst	r5, r1
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    296a:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    296e:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    2972:	beq.n	2950 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    2974:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    2976:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    2978:	bne.n	2958 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    297a:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    297c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2980:	add.w	sl, sl, #1
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    2984:	movs	r5, #1
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    2986:	cmp.w	sl, #512	; 0x200
    298a:	bne.n	294a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    298c:	b.n	2992 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x86>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    298e:	movs	r6, #0
    2990:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    2992:	mov.w	sl, #0
    2996:	movs	r5, #1
    2998:	b.n	2938 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    299a:	movs	r7, #0
    299c:	movs	r5, #1
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    299e:	mov	sl, r7
    29a0:	b.n	2934 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    29a2:	ldr.w	r7, [r0, #1056]	; 0x420
    29a6:	b.n	291c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    29a8:	cmp.w	fp, #0
    29ac:	bne.n	29b8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
    29ae:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    29b2:	it	eq
    29b4:	streq.w	r6, [r8, #1056]	; 0x420
            }
            return bgnAlloc + 2;
    29b8:	adds	r0, r6, #2
    29ba:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29be:	nop

000029c0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
    29c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    29c4:	subs	r1, #2
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
    29c6:	mov	r5, r2
    29c8:	mov	sl, r3
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    29ca:	ldr.w	r2, [r0, #1072]	; 0x430
    29ce:	adds	r3, r1, r5
    29d0:	cmp	r3, r2
    29d2:	bhi.n	2a46 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    29d4:	mov	r8, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    29d6:	cmp.w	sl, #0
    29da:	bne.n	2a4c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    29dc:	ldr.w	r3, [r0, #1056]	; 0x420
    29e0:	cmp	r1, r3
      m_bitmapStart = start;
    29e2:	it	cc
    29e4:	strcc.w	r1, [r0, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    29e8:	and.w	r4, r1, #7
    29ec:	movs	r2, #1
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    29ee:	ldr.w	r3, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    29f2:	ubfx	r6, r1, #3, #9
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    29f6:	lsl.w	r4, r2, r4
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    29fa:	add.w	r9, r3, r1, lsr #12
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    29fe:	uxtb	r4, r4
    2a00:	movs	r2, #1
    2a02:	mov	r1, r9
    2a04:	mov	r0, r8
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2a06:	add	r9, r2
    2a08:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    2a0c:	cbz	r0, 2a46 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    2a0e:	adds	r7, r0, r6
    2a10:	add.w	r0, r0, #512	; 0x200
    2a14:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    2a18:	tst	r2, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    2a1a:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    2a1e:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    2a22:	ite	ne
    2a24:	movne	r6, #1
    2a26:	moveq	r6, #0
    2a28:	cmp	r6, sl
    2a2a:	beq.n	2a46 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    2a2c:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    2a2e:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    2a32:	beq.n	2a64 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    2a34:	ands.w	r4, r4, #255	; 0xff
    2a38:	bne.n	2a18 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    2a3a:	cmp	r7, r0
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    2a3c:	mov	r6, r4
    2a3e:	mov.w	r4, #1
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    2a42:	bne.n	2a14 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    2a44:	b.n	2a00 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

fail:
  return false;
    2a46:	movs	r0, #0
    2a48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
    2a4c:	ldr.w	r0, [r0, #1056]	; 0x420
    2a50:	cmp	r3, r0
    2a52:	bls.n	29e8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    2a54:	cmp	r1, r0
    2a56:	bhi.n	29e8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    2a58:	cmp	r3, r2
    2a5a:	it	cs
    2a5c:	movcs	r3, #0
    2a5e:	str.w	r3, [r8, #1056]	; 0x420
    2a62:	b.n	29e8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    2a64:	movs	r0, #1
    i = 0;
  }

fail:
  return false;
}
    2a66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2a6a:	nop

00002a6c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    2a6c:	push	{r4, r5, r6, lr}
    2a6e:	mov	r6, r1
    2a70:	mov	r4, r0
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() { m_dataCache.dirty(); }
  void dataCacheInvalidate() { m_dataCache.invalidate(); }
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    2a72:	ldr.w	r5, [r0, #1080]	; 0x438
    2a76:	add.w	r0, r0, #528	; 0x210
    2a7a:	ldr	r1, [r1, #4]
    2a7c:	ldr	r3, [r6, #0]
    2a7e:	ands	r1, r5
    2a80:	ldr.w	r5, [r4, #1068]	; 0x42c
    2a84:	subs	r3, #2
    2a86:	ldrb.w	r4, [r4, #1093]	; 0x445
    2a8a:	add.w	r1, r5, r1, lsr #9
    2a8e:	lsls	r3, r4
    2a90:	add	r1, r3
    2a92:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    2a96:	cbz	r0, 2aa0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    2a98:	ldr	r3, [r6, #4]
    2a9a:	ubfx	r3, r3, #0, #9
    2a9e:	add	r0, r3
}
    2aa0:	pop	{r4, r5, r6, pc}
    2aa2:	nop

00002aa4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    2aa4:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    2aa6:	ldr.w	r3, [r0, #1072]	; 0x430
    2aaa:	adds	r3, #1
    2aac:	cmp	r3, r1
    2aae:	bcc.n	2ade <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
    2ab0:	mov	r4, r1
    2ab2:	ldr.w	r1, [r0, #1060]	; 0x424
    2ab6:	mov	r5, r2
    2ab8:	add.w	r0, r0, #528	; 0x210
    2abc:	movs	r2, #0
    2abe:	add.w	r1, r1, r4, lsr #7
    2ac2:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    2ac6:	cbz	r0, 2ade <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    2ac8:	lsls	r1, r4, #2
    2aca:	ubfx	r1, r1, #0, #9
    2ace:	ldr	r3, [r0, r1]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
  if (next == EXFAT_EOC) {
    2ad0:	adds	r2, r3, #1
    2ad2:	beq.n	2ada <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x36>
    return 0;
  }
  *value = next;
    2ad4:	str	r3, [r5, #0]
  return 1;
    2ad6:	movs	r0, #1
    2ad8:	pop	{r3, r4, r5, pc}
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
  if (next == EXFAT_EOC) {
    return 0;
    2ada:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    2adc:	pop	{r3, r4, r5, pc}
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
    2ade:	mov.w	r0, #4294967295
    2ae2:	pop	{r3, r4, r5, pc}

00002ae4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    2ae4:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2ae6:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    2ae8:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2aea:	ldr.w	r3, [r0, #1080]	; 0x438
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    2aee:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    2af0:	adds	r1, r4, r2
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2af2:	ands	r3, r4
  pos->position += offset;
    2af4:	str	r1, [r5, #4]
  tmp >>= bytesPerClusterShift();
    2af6:	ldrb.w	r4, [r0, #1093]	; 0x445
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2afa:	add	r2, r3
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    2afc:	adds	r4, #9
    2afe:	uxtb	r4, r4
    2b00:	lsr.w	r4, r2, r4
  while (tmp--) {
    2b04:	cbz	r4, 2b16 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    2b06:	ldrb	r3, [r5, #8]
    2b08:	cbz	r3, 2b1a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    2b0a:	ldr	r3, [r5, #0]
    2b0c:	adds	r3, #1
    2b0e:	str	r3, [r5, #0]
    2b10:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    2b12:	cmp	r4, #0
    2b14:	bne.n	2b06 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    2b16:	movs	r0, #1
}
    2b18:	pop	{r4, r5, r6, pc}
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    2b1a:	mov	r2, r5
    2b1c:	ldr	r1, [r5, #0]
    2b1e:	mov	r0, r6
    2b20:	bl	2aa4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    2b24:	cmp	r0, #1
    2b26:	beq.n	2b10 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    2b28:	pop	{r4, r5, r6, pc}
    2b2a:	nop

00002b2c <ExFatPartition::fatPut(unsigned long, unsigned long)>:
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2b2c:	cmp	r1, #1
    2b2e:	bls.n	2b4c <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    2b30:	ldr.w	r3, [r0, #1072]	; 0x430
    2b34:	adds	r3, #1
    2b36:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    2b38:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2b3a:	bls.n	2b44 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
}
    2b3c:	movs	r0, #0
    2b3e:	ldr.w	r4, [sp], #4
    2b42:	bx	lr
    2b44:	ldr.w	r4, [sp], #4
    2b48:	b.w	28e0 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.3]>
    2b4c:	movs	r0, #0
    2b4e:	bx	lr

00002b50 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    2b50:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b54:	mov	r4, r1
    2b56:	sub	sp, #8
    2b58:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    2b5a:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    2b5c:	mov	r1, r4
    2b5e:	add	r2, sp, #4
    2b60:	mov	r0, r5
    2b62:	bl	2aa4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2b66:	cmp	r4, #1
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    2b68:	mov	r7, r0
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2b6a:	ubfx	r6, r0, #7, #1
    2b6e:	mov	r1, r4
    2b70:	mov	r0, r5
    2b72:	bls.n	2bc2 <ExFatPartition::freeChain(unsigned long)+0x72>
    2b74:	mov	r2, r6
    2b76:	cbnz	r6, 2bc2 <ExFatPartition::freeChain(unsigned long)+0x72>
    2b78:	ldr.w	r3, [r5, #1072]	; 0x430
    2b7c:	adds	r3, #1
    2b7e:	cmp	r4, r3
    2b80:	bhi.n	2bc2 <ExFatPartition::freeChain(unsigned long)+0x72>
    2b82:	bl	28e0 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.3]>
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (status == 0 || (cluster + 1) != next) {
    2b86:	add.w	lr, r4, #1
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2b8a:	mov	r1, r8
    2b8c:	mov	r3, r6
    2b8e:	rsb	r2, r8, lr
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    2b92:	cbz	r0, 2bc2 <ExFatPartition::freeChain(unsigned long)+0x72>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (status == 0 || (cluster + 1) != next) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2b94:	mov	r0, r5
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (status == 0 || (cluster + 1) != next) {
    2b96:	cbz	r7, 2baa <ExFatPartition::freeChain(unsigned long)+0x5a>
    2b98:	ldr	r4, [sp, #4]
    2b9a:	cmp	lr, r4
    2b9c:	beq.n	2b5c <ExFatPartition::freeChain(unsigned long)+0xc>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2b9e:	bl	29c0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2ba2:	cbz	r0, 2bc2 <ExFatPartition::freeChain(unsigned long)+0x72>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    2ba4:	ldr	r4, [sp, #4]
    2ba6:	mov	r8, r4
    2ba8:	b.n	2b5c <ExFatPartition::freeChain(unsigned long)+0xc>
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (status == 0 || (cluster + 1) != next) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2baa:	adds	r2, r4, #1
    2bac:	mov	r3, r7
    2bae:	mov	r1, r8
    2bb0:	mov	r0, r5
    2bb2:	rsb	r2, r8, r2
    2bb6:	bl	29c0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2bba:	cbz	r0, 2bc2 <ExFatPartition::freeChain(unsigned long)+0x72>

  return true;

fail:
  return false;
}
    2bbc:	add	sp, #8
    2bbe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } while (status);

  return true;

fail:
  return false;
    2bc2:	movs	r0, #0
}
    2bc4:	add	sp, #8
    2bc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bca:	nop

00002bcc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    2bcc:	push	{r3, r4, r5, r6, r7, lr}
    2bce:	mov	r4, r0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    2bd0:	mov.w	r5, #4294967295
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  m_fatType = 0;
    2bd4:	movs	r0, #0
  m_blockDev = dev;
    2bd6:	str.w	r1, [r4, #1088]	; 0x440
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(FsBlockDevice* blockDev) {
    m_blockDev = blockDev;
    2bda:	str	r1, [r4, #4]
    2bdc:	str.w	r1, [r4, #532]	; 0x214
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  m_fatType = 0;
    2be0:	strb.w	r0, [r4, #1092]	; 0x444
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    2be4:	strb	r0, [r4, #0]
    2be6:	strb.w	r0, [r4, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2bea:	str	r5, [r4, #8]
    2bec:	str.w	r5, [r4, #536]	; 0x218
  m_blockDev = dev;
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    2bf0:	cbz	r2, 2c2c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x60>
    if (part > 4) {
    2bf2:	cmp	r2, #4
    2bf4:	mov	r6, r2
    2bf6:	bls.n	2bfc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
    2bf8:	movs	r0, #0
    2bfa:	pop	{r3, r4, r5, r6, r7, pc}
    2bfc:	add.w	r5, r4, #528	; 0x210
    2c00:	mov	r2, r0
    2c02:	mov	r1, r0
    2c04:	mov	r0, r5
    2c06:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>(
        dataCachePrepare(0, FsCache::CACHE_FOR_READ));
    if (!mbr) {
    2c0a:	cmp	r0, #0
    2c0c:	beq.n	2bf8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    MbrPart_t* mp = mbr->part + part - 1;
    2c0e:	mvn.w	r3, #4026531840	; 0xf0000000
    2c12:	add.w	r0, r0, #446	; 0x1be
    2c16:	add	r3, r6
    2c18:	lsls	r3, r3, #4
    2c1a:	adds	r2, r0, r3
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    2c1c:	ldrb	r1, [r2, #4]
    2c1e:	cmp	r1, #0
    2c20:	beq.n	2bf8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2c>
    2c22:	ldrb	r3, [r0, r3]
    2c24:	lsls	r3, r3, #25
    2c26:	bne.n	2bf8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2c>
    2c28:	ldr	r7, [r2, #8]
    2c2a:	b.n	2c32 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x66>
    2c2c:	mov	r7, r3
    2c2e:	add.w	r5, r4, #528	; 0x210
    2c32:	mov	r0, r5
    2c34:	movs	r2, #0
    2c36:	mov	r1, r7
    2c38:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
    }
    volStart = getLe32(mp->relativeSectors);
  }
  pbs = reinterpret_cast<pbs_t*>(
      dataCachePrepare(volStart, FsCache::CACHE_FOR_READ));
  if (!pbs) {
    2c3c:	mov	r6, r0
    2c3e:	cmp	r0, #0
    2c40:	beq.n	2bf8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    2c42:	movs	r2, #5
    2c44:	ldr	r1, [pc, #104]	; (2cb0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe4>)
    2c46:	adds	r0, #3
    2c48:	bl	9e1c <strncmp>
    2c4c:	mov	lr, r0
    2c4e:	cmp	r0, #0
    2c50:	bne.n	2bf8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    2c52:	ldrb.w	r3, [r6, #108]	; 0x6c
    2c56:	cmp	r3, #9
    2c58:	bne.n	2bf8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    2c5a:	ldr	r3, [r6, #80]	; 0x50
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    2c5c:	movs	r5, #1
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    2c5e:	mov	r1, r0
    2c60:	mov	r0, r4
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    2c62:	add	r3, r7
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    2c64:	mov	r2, r5
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    2c66:	str.w	r3, [r4, #1060]	; 0x424
    2c6a:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    2c6c:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    2c70:	ldr	r3, [r6, #88]	; 0x58
    2c72:	add	r3, r7
    2c74:	str.w	r3, [r4, #1068]	; 0x42c
    2c78:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    2c7a:	str.w	r3, [r4, #1072]	; 0x430
    2c7e:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    2c80:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    2c84:	ldrb.w	r6, [r6, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    2c88:	str.w	lr, [r4, #1056]	; 0x420
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    2c8c:	add.w	r3, r6, #9
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    2c90:	strb.w	r6, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    2c94:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    2c98:	subs	r6, r3, #1
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    2c9a:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    2c9e:	str.w	r6, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    2ca2:	bl	290c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    2ca6:	movs	r3, #64	; 0x40
  return true;
    2ca8:	mov	r0, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
    2caa:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    2cae:	pop	{r3, r4, r5, r6, r7, pc}
    2cb0:	.word	0x20000dc8

00002cb4 <ExFatPartition::rootLength()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    2cb4:	push	{r4, r5, r6, lr}
    2cb6:	sub	sp, #8
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    2cb8:	ldr.w	r1, [r0, #1076]	; 0x434

fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    2cbc:	mov	r5, r0
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
    2cbe:	movs	r4, #0
    2cc0:	add	r6, sp, #8
    2cc2:	str.w	r1, [r6, #-4]!
    2cc6:	b.n	2ccc <ExFatPartition::rootLength()+0x18>
  int8_t status;
  do {
    2cc8:	beq.n	2cde <ExFatPartition::rootLength()+0x2a>
    2cca:	ldr	r1, [sp, #4]
    status = fatGet(cluster, &cluster);
    2ccc:	mov	r2, r6
    2cce:	mov	r0, r5
    2cd0:	bl	2aa4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    2cd4:	cmp	r0, #0
    n++;
    2cd6:	add.w	r4, r4, #1
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, &cluster);
    if (status < 0) return 0;
    2cda:	bge.n	2cc8 <ExFatPartition::rootLength()+0x14>
    2cdc:	movs	r4, #0
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
  uint32_t nc = chainSize(m_rootDirectoryCluster);
  return nc << bytesPerClusterShift();
    2cde:	ldrb.w	r0, [r5, #1093]	; 0x445
    2ce2:	adds	r0, #9
    2ce4:	uxtb	r0, r0
}
    2ce6:	lsl.w	r0, r4, r0
    2cea:	add	sp, #8
    2cec:	pop	{r4, r5, r6, pc}
    2cee:	nop

00002cf0 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    2cf0:	push	{r4, r5, r6, r7, lr}
    2cf2:	movs	r5, #0
    2cf4:	sub	sp, #60	; 0x3c
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() { return m_cwv; }
  ExFatFile* vwd() { return &m_vwd; }
    2cf6:	add.w	r4, r0, #1096	; 0x448
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    2cfa:	mov	r2, r1
    2cfc:	mov	r3, r5
    2cfe:	mov	r0, sp
    2d00:	mov	r1, r4
    2d02:	strb.w	r5, [sp, #49]	; 0x31
    2d06:	strb.w	r5, [sp, #50]	; 0x32
    2d0a:	strb.w	r5, [sp, #51]	; 0x33
    2d0e:	bl	27d8 <ExFatFile::open(ExFatFile*, char const*, int)>
    2d12:	mov	r6, r0
    2d14:	cbz	r0, 2d46 <ExFatVolume::chdir(char const*)+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    2d16:	ldrb.w	r3, [sp, #49]	; 0x31
    2d1a:	ands.w	r3, r3, #80	; 0x50
    2d1e:	beq.n	2d4c <ExFatVolume::chdir(char const*)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    2d20:	mov	r5, sp
    2d22:	add.w	lr, sp, #48	; 0x30
    2d26:	mov	r7, r5
    2d28:	adds	r4, #16
    2d2a:	adds	r5, #16
    2d2c:	ldmia	r7!, {r0, r1, r2, r3}
    2d2e:	cmp	r7, lr
    2d30:	str.w	r0, [r4, #-16]
    2d34:	str.w	r1, [r4, #-12]
    2d38:	str.w	r2, [r4, #-8]
    2d3c:	str.w	r3, [r4, #-4]
    2d40:	bne.n	2d26 <ExFatVolume::chdir(char const*)+0x36>
    2d42:	ldr	r0, [r5, #0]
    2d44:	str	r0, [r4, #0]
  return true;

fail:
  return false;
}
    2d46:	mov	r0, r6
    2d48:	add	sp, #60	; 0x3c
    2d4a:	pop	{r4, r5, r6, r7, pc}
  }
  m_vwd = dir;
  return true;

fail:
  return false;
    2d4c:	mov	r6, r3
}
    2d4e:	mov	r0, r6
    2d50:	add	sp, #60	; 0x3c
    2d52:	pop	{r4, r5, r6, r7, pc}

00002d54 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    2d54:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    2d56:	push	{r3, r4, r5, r6, r7, lr}
    2d58:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    2d5a:	ldr	r0, [r0, #32]
    2d5c:	cbz	r1, 2d60 <ExFatFile::addCluster()+0xc>
    2d5e:	adds	r1, #1
    2d60:	movs	r2, #1
    2d62:	bl	290c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    2d66:	cmp	r0, #1
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    2d68:	mov	r6, r0
  if (find < 2) {
    2d6a:	bls.n	2dca <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    2d6c:	movs	r3, #1
    2d6e:	mov	r1, r0
    2d70:	ldr	r0, [r4, #32]
    2d72:	mov	r2, r3
    2d74:	bl	29c0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2d78:	mov	r7, r0
    2d7a:	cbz	r0, 2dca <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    2d7c:	ldr	r3, [r4, #24]
    2d7e:	cbz	r3, 2dd0 <ExFatFile::addCluster()+0x7c>
    2d80:	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    2d84:	lsls	r1, r2, #25
    2d86:	bpl.n	2dae <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    2d88:	adds	r1, r3, #1
    2d8a:	cmp	r6, r1
    2d8c:	beq.n	2ddc <ExFatFile::addCluster()+0x88>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    2d8e:	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2d92:	ldr	r1, [r4, #28]
  if (isContiguous()) {
    if (find == (m_curCluster + 1)) {
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    2d94:	strb.w	r2, [r4, #51]	; 0x33
    2d98:	b.n	2da6 <ExFatFile::addCluster()+0x52>

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
    2d9a:	ldr	r0, [r4, #32]
    2d9c:	bl	2b2c <ExFatPartition::fatPut(unsigned long, unsigned long)>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2da0:	mov	r1, r5
      if (!m_vol->fatPut(c, c + 1)) {
    2da2:	cbz	r0, 2dca <ExFatFile::addCluster()+0x76>
    2da4:	ldr	r3, [r4, #24]
    2da6:	adds	r5, r1, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2da8:	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    2daa:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2dac:	bcc.n	2d9a <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    2dae:	mov.w	r2, #4294967295
    2db2:	mov	r1, r6
    2db4:	ldr	r0, [r4, #32]
    2db6:	bl	2b2c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2dba:	cbz	r0, 2dca <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    2dbc:	ldr	r1, [r4, #24]
    2dbe:	cbz	r1, 2ddc <ExFatFile::addCluster()+0x88>
    if (!m_vol->fatPut(m_curCluster, find)) {
    2dc0:	mov	r2, r6
    2dc2:	ldr	r0, [r4, #32]
    2dc4:	bl	2b2c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2dc8:	cbnz	r0, 2ddc <ExFatFile::addCluster()+0x88>
done:
  m_curCluster = find;
  return true;

fail:
  return false;
    2dca:	movs	r7, #0
}
    2dcc:	mov	r0, r7
    2dce:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    2dd0:	ldrb.w	r3, [r4, #51]	; 0x33
    2dd4:	orr.w	r3, r3, #64	; 0x40
    2dd8:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

done:
  m_curCluster = find;
    2ddc:	str	r6, [r4, #24]
  return true;

fail:
  return false;
}
    2dde:	mov	r0, r7
    2de0:	pop	{r3, r4, r5, r6, r7, pc}
    2de2:	nop

00002de4 <ExFatFile::syncDir()>:
fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    2de4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;

  for (uint8_t is = 0; is <= m_setCount; is++) {
    2de8:	movs	r5, #0
fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    2dea:	sub	sp, #12
    2dec:	mov	r7, r0
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        if (FsDateTime::callback) {
    2dee:	ldr.w	r9, [pc, #320]	; 2f30 <ExFatFile::syncDir()+0x14c>
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    2df2:	mov	r8, r5

  for (uint8_t is = 0; is <= m_setCount; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    2df4:	movs	r2, #0
    2df6:	mov	r1, r5
    2df8:	mov	r0, r7
    2dfa:	bl	2004 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    2dfe:	mov	r4, r0
    2e00:	cbz	r0, 2e10 <ExFatFile::syncDir()+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    2e02:	ldrb	r3, [r0, #0]
    2e04:	cmp	r3, #192	; 0xc0
    2e06:	beq.n	2ef2 <ExFatFile::syncDir()+0x10e>
    2e08:	cmp	r3, #193	; 0xc1
    2e0a:	beq.n	2e66 <ExFatFile::syncDir()+0x82>
    2e0c:	cmp	r3, #133	; 0x85
    2e0e:	beq.n	2e24 <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
    2e10:	ldrb.w	r3, [r7, #50]	; 0x32
  return false;
    2e14:	movs	r0, #0
    goto fail;
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
    2e16:	orr.w	r3, r3, #1
    2e1a:	strb.w	r3, [r7, #50]	; 0x32
  return false;
}
    2e1e:	add	sp, #12
    2e20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    2e24:	ldrb.w	r3, [r7, #49]	; 0x31
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        if (FsDateTime::callback) {
    2e28:	ldr.w	r6, [r9]
    2e2c:	and.w	r3, r3, #55	; 0x37
    2e30:	strh	r3, [r0, #4]
    2e32:	cbz	r6, 2e56 <ExFatFile::syncDir()+0x72>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    2e34:	add.w	r2, sp, #3
    2e38:	add.w	r1, sp, #6
    2e3c:	add	r0, sp, #4
    2e3e:	blx	r6
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    2e40:	ldrh.w	r2, [sp, #6]
          setLe16(df->modifyDate, date);
    2e44:	ldrh.w	r3, [sp, #4]
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        if (FsDateTime::callback) {
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    2e48:	ldrb.w	r1, [sp, #3]
    2e4c:	strh	r2, [r4, #12]
    2e4e:	strb	r1, [r4, #21]
    2e50:	strh	r2, [r4, #16]
    2e52:	strh	r3, [r4, #14]
    2e54:	strh	r3, [r4, #18]
          setLe16(df->modifyTime, time);
          setLe16(df->modifyDate, date);
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        m_vol->dataCacheDirty();
    2e56:	ldr	r2, [r7, #32]
    }
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    2e58:	ldrb.w	r3, [r2, #528]	; 0x210
    2e5c:	orr.w	r3, r3, #1
    2e60:	strb.w	r3, [r2, #528]	; 0x210
    2e64:	ldrb	r3, [r4, #0]
    2e66:	mov.w	r0, r8, lsl #15
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2e6a:	sub.w	r6, r3, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2e6e:	movs	r2, #0
    2e70:	movs	r1, #1
    2e72:	orr.w	r8, r0, r8, lsr #1
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2e76:	clz	r6, r6
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2e7a:	uxtah	r3, r3, r8
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2e7e:	lsrs	r6, r6, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2e80:	uxth.w	r8, r3
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2e84:	add	r2, r1
    2e86:	mov.w	r3, r8, lsl #15
    2e8a:	movs	r1, #3
    2e8c:	cmp	r2, #31
    2e8e:	orr.w	r3, r3, r8, lsr #1
    2e92:	bhi.n	2eaa <ExFatFile::syncDir()+0xc6>
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2e94:	ldrb	r0, [r4, r2]
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2e96:	cmp	r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2e98:	uxtah	r3, r0, r3
    2e9c:	uxth.w	r8, r3
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2ea0:	bne.n	2ea6 <ExFatFile::syncDir()+0xc2>
    2ea2:	cmp	r6, #0
    2ea4:	bne.n	2e84 <ExFatFile::syncDir()+0xa0>
    2ea6:	movs	r1, #1
    2ea8:	b.n	2e84 <ExFatFile::syncDir()+0xa0>
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;

  for (uint8_t is = 0; is <= m_setCount; is++) {
    2eaa:	adds	r5, #1
    2eac:	ldrb.w	r3, [r7, #48]	; 0x30
    2eb0:	uxtb	r5, r5
    2eb2:	cmp	r3, r5
    2eb4:	bcs.n	2df4 <ExFatFile::syncDir()+0x10>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    2eb6:	movs	r2, #1
    2eb8:	add.w	r1, r7, #36	; 0x24
    2ebc:	ldr	r0, [r7, #32]
    2ebe:	bl	2a6c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    2ec2:	cmp	r0, #0
    2ec4:	beq.n	2e10 <ExFatFile::syncDir()+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    2ec6:	ldr	r4, [r7, #32]
    2ec8:	strh.w	r8, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2ecc:	mov	r0, r4
    2ece:	bl	1f10 <FsCache::sync()>
    2ed2:	cmp	r0, #0
    2ed4:	beq.n	2e10 <ExFatFile::syncDir()+0x2c>
    2ed6:	add.w	r0, r4, #528	; 0x210
    2eda:	bl	1f10 <FsCache::sync()>
    2ede:	cmp	r0, #0
    2ee0:	beq.n	2e10 <ExFatFile::syncDir()+0x2c>
    2ee2:	ldr.w	r0, [r4, #1088]	; 0x440
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    2ee6:	ldr	r3, [r0, #0]
    2ee8:	ldr	r3, [r3, #28]
    2eea:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2eec:	cmp	r0, #0
    2eee:	beq.n	2e10 <ExFatFile::syncDir()+0x2c>
    2ef0:	b.n	2e1e <ExFatFile::syncDir()+0x3a>
        m_vol->dataCacheDirty();
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    2ef2:	ldrb.w	r3, [r7, #51]	; 0x33
    2ef6:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    2efa:	ldrb	r3, [r0, #1]
    2efc:	ite	ne
    2efe:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    2f02:	biceq.w	r3, r3, #2
    2f06:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    2f08:	ldr	r0, [r7, #32]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    2f0a:	ldr	r1, [r7, #28]
        if (isContiguous()) {
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
    2f0c:	ldrd	r2, r3, [r7, #16]
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    2f10:	str	r1, [r4, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    2f12:	strd	r2, r3, [r4, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    2f16:	ldrd	r2, r3, [r7, #8]
    2f1a:	strd	r2, r3, [r4, #24]
    2f1e:	ldrb.w	r3, [r0, #528]	; 0x210
    2f22:	orr.w	r3, r3, #1
    2f26:	strb.w	r3, [r0, #528]	; 0x210
    2f2a:	ldrb	r3, [r4, #0]
    2f2c:	b.n	2e66 <ExFatFile::syncDir()+0x82>
    2f2e:	nop
    2f30:	.word	0x20017398

00002f34 <ExFatFile::sync()>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    2f34:	ldrb.w	r2, [r0, #49]	; 0x31
    2f38:	cbz	r2, 2f60 <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
    2f3a:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    2f3c:	ldrb.w	r2, [r0, #51]	; 0x33
    2f40:	lsls	r1, r2, #24
    2f42:	bmi.n	2f64 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    2f44:	ldr	r5, [r0, #32]
    2f46:	mov	r4, r0
    2f48:	mov	r0, r5
    2f4a:	bl	1f10 <FsCache::sync()>
    2f4e:	cbnz	r0, 2f74 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
    2f50:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    2f54:	movs	r0, #0
    goto fail;
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
    2f56:	orr.w	r3, r3, #1
    2f5a:	strb.w	r3, [r4, #50]	; 0x32
  return false;
}
    2f5e:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    2f60:	movs	r0, #1
  return true;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    2f62:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    2f64:	and.w	r2, r2, #127	; 0x7f
    2f68:	strb.w	r2, [r0, #51]	; 0x33
  return true;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    2f6c:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    2f70:	b.w	2de4 <ExFatFile::syncDir()>
    2f74:	add.w	r0, r5, #528	; 0x210
    2f78:	bl	1f10 <FsCache::sync()>
    2f7c:	cmp	r0, #0
    2f7e:	beq.n	2f50 <ExFatFile::sync()+0x1c>
    2f80:	ldr.w	r0, [r5, #1088]	; 0x440
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    2f84:	ldr	r3, [r0, #0]
    2f86:	ldr	r3, [r3, #28]
    2f88:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2f8a:	cmp	r0, #0
    2f8c:	beq.n	2f50 <ExFatFile::sync()+0x1c>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    2f8e:	movs	r0, #1
    2f90:	pop	{r3, r4, r5, pc}
    2f92:	nop

00002f94 <ExFatFile::addDirCluster()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    2f94:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    2f96:	ldrb.w	r3, [r0, #49]	; 0x31

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    2f9a:	mov	r5, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    2f9c:	lsls	r2, r3, #25
    2f9e:	bmi.n	3040 <ExFatFile::addDirCluster()+0xac>
    2fa0:	ldr	r0, [r0, #8]
    2fa2:	ldr	r3, [r5, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    2fa4:	ldr.w	r3, [r3, #1084]	; 0x43c
    2fa8:	add	r0, r3
    2faa:	cmp.w	r0, #67108864	; 0x4000000
    2fae:	bcc.n	2fb4 <ExFatFile::addDirCluster()+0x20>
  }
  return sync();

fail:
  return false;
}
    2fb0:	movs	r0, #0
    2fb2:	pop	{r3, r4, r5, r6, r7, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    2fb4:	mov	r0, r5
    2fb6:	bl	2d54 <ExFatFile::addCluster()>
    2fba:	cmp	r0, #0
    2fbc:	beq.n	2fb0 <ExFatFile::addDirCluster()+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    2fbe:	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    2fc0:	movs	r2, #1
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    2fc2:	ldr	r6, [r5, #24]
    2fc4:	ldrb.w	r3, [r0, #1093]	; 0x445
    2fc8:	subs	r6, #2
    2fca:	ldr.w	r1, [r0, #1068]	; 0x42c
    2fce:	lsls	r6, r3
    2fd0:	lsls.w	r3, r2, r3
    2fd4:	add	r6, r1
    2fd6:	beq.n	3004 <ExFatFile::addDirCluster()+0x70>
    2fd8:	movs	r4, #0
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() { m_dataCache.dirty(); }
  void dataCacheInvalidate() { m_dataCache.invalidate(); }
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    2fda:	adds	r1, r6, r4
    2fdc:	movs	r2, #5
    2fde:	add.w	r0, r0, #528	; 0x210
    2fe2:	adds	r4, #1
    2fe4:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
        m_vol->dataCachePrepare(sector + i, FsCache::CACHE_RESERVE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0, m_vol->bytesPerSector());
    2fe8:	mov.w	r2, #512	; 0x200
    2fec:	movs	r1, #0
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    cache =
        m_vol->dataCachePrepare(sector + i, FsCache::CACHE_RESERVE_FOR_WRITE);
    if (!cache) {
    2fee:	cmp	r0, #0
    2ff0:	beq.n	2fb0 <ExFatFile::addDirCluster()+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0, m_vol->bytesPerSector());
    2ff2:	bl	972c <memset>
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    2ff6:	ldr	r0, [r5, #32]
    2ff8:	movs	r3, #1
    2ffa:	ldrb.w	r2, [r0, #1093]	; 0x445
    2ffe:	lsls	r3, r2
    3000:	cmp	r3, r4
    3002:	bhi.n	2fda <ExFatFile::addDirCluster()+0x46>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0, m_vol->bytesPerSector());
  }
  if (!isRoot()) {
    3004:	ldrb.w	r3, [r5, #49]	; 0x31
    3008:	lsls	r3, r3, #25
    300a:	bmi.n	3036 <ExFatFile::addDirCluster()+0xa2>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    300c:	ldrb.w	r3, [r5, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
    3010:	movs	r7, #0
      goto fail;
    }
    memset(cache, 0, m_vol->bytesPerSector());
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3012:	orn	r3, r3, #127	; 0x7f
    3016:	strb.w	r3, [r5, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
    301a:	ldr.w	r6, [r0, #1084]	; 0x43c
    301e:	ldrd	r2, r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    3022:	ldrd	r0, r1, [r5, #16]
    }
    memset(cache, 0, m_vol->bytesPerSector());
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength += m_vol->bytesPerCluster();
    3026:	adds	r2, r2, r6
    3028:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    302a:	adds	r0, r0, r6
    302c:	adcs	r1, r7
    }
    memset(cache, 0, m_vol->bytesPerSector());
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength += m_vol->bytesPerCluster();
    302e:	strd	r2, r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    3032:	strd	r0, r1, [r5, #16]
  }
  return sync();
    3036:	mov	r0, r5

fail:
  return false;
}
    3038:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    303c:	b.w	2f34 <ExFatFile::sync()>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    3040:	ldr	r0, [r0, #32]
    3042:	bl	2cb4 <ExFatPartition::rootLength()>
    3046:	b.n	2fa2 <ExFatFile::addDirCluster()+0xe>

00003048 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    3048:	push	{r4, lr}
  if (!parent->isDir()) {
    304a:	ldrb.w	r4, [r1, #49]	; 0x31
    304e:	tst.w	r4, #80	; 0x50
    3052:	bne.n	3058 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x10>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    3054:	movs	r0, #0
    3056:	pop	{r4, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    3058:	movw	r3, #2562	; 0xa02
    305c:	mov	r4, r0
    305e:	bl	2400 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    3062:	cmp	r0, #0
    3064:	beq.n	3054 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    3066:	movs	r3, #48	; 0x30

  // allocate and zero first cluster
  if (!addDirCluster()) {
    3068:	mov	r0, r4
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    306a:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    306e:	bl	2f94 <ExFatFile::addDirCluster()>
    3072:	cmp	r0, #0
    3074:	beq.n	3054 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    3076:	ldr	r1, [r4, #24]
   *
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() { seekSet(0); }
    3078:	movs	r3, #0
    307a:	mov	r0, r4
    307c:	movs	r2, #0
    307e:	str	r1, [r4, #28]
    3080:	bl	22f8 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    3084:	movs	r3, #193	; 0xc1
  return sync();
    3086:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    3088:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    308c:	ldmia.w	sp!, {r4, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    3090:	b.w	2f34 <ExFatFile::sync()>

00003094 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    3094:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3098:	mov	r6, r0
    309a:	sub	sp, #88	; 0x58
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    309c:	movs	r0, #0
    309e:	mov	r4, r1
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    30a0:	ldrb.w	r1, [r6, #49]	; 0x31

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    30a4:	str	r2, [sp, #4]
    30a6:	strb.w	r0, [sp, #81]	; 0x51
    30aa:	strb.w	r0, [sp, #82]	; 0x52
    30ae:	strb.w	r0, [sp, #83]	; 0x53
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    30b2:	cbnz	r1, 30c0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    30b4:	mov	r8, r3
    30b6:	ldrb.w	r3, [r4, #49]	; 0x31
    30ba:	tst.w	r3, #80	; 0x50
    30be:	bne.n	30c8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    30c0:	movs	r0, #0
}
    30c2:	add	sp, #88	; 0x58
    30c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    30c8:	ldrb	r3, [r2, #0]
    30ca:	mov	r1, r2
    30cc:	cmp	r3, #47	; 0x2f
    30ce:	beq.n	313a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    30d0:	add	r3, sp, #4
    30d2:	add	r2, sp, #12
    30d4:	mov	r0, r6
    30d6:	bl	207c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    30da:	cmp	r0, #0
    30dc:	beq.n	30c0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    30de:	ldr	r3, [sp, #4]
    30e0:	ldrb	r3, [r3, #0]
    30e2:	cmp	r3, #0
    30e4:	beq.n	3156 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc2>
      break;
    }
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    30e6:	movs	r3, #0
    30e8:	add	r2, sp, #12
    30ea:	mov	r1, r4
    30ec:	mov	r0, r6
    30ee:	bl	2400 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    30f2:	cbnz	r0, 3108 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>
      if (!pFlag || !mkdir(parent, &fname)) {
    30f4:	cmp.w	r8, #0
    30f8:	beq.n	30c0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    30fa:	mov	r1, r4
    30fc:	add	r2, sp, #12
    30fe:	mov	r0, r6
    3100:	bl	3048 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    3104:	cmp	r0, #0
    3106:	beq.n	30c0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    3108:	mov	r4, r6
    310a:	add	r7, sp, #32
    310c:	add.w	lr, r6, #48	; 0x30
    3110:	ldr	r0, [r4, #0]
    3112:	adds	r4, #16
    3114:	ldr.w	r1, [r4, #-12]
    3118:	mov	r5, r7
    311a:	ldr.w	r2, [r4, #-8]
    311e:	adds	r7, #16
    3120:	ldr.w	r3, [r4, #-4]
    3124:	cmp	r4, lr
    3126:	stmia	r5!, {r0, r1, r2, r3}
    3128:	bne.n	3110 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7c>
    312a:	ldr	r0, [r4, #0]
    parent = &tmpDir;
    312c:	add	r4, sp, #32
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    312e:	str	r0, [r7, #0]
    parent = &tmpDir;
    close();
    3130:	mov	r0, r6
    3132:	bl	2040 <ExFatFile::close()>
    3136:	ldr	r1, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    3138:	b.n	30d0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    313a:	adds	r1, #1
    313c:	str	r1, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    313e:	ldrb	r3, [r1, #0]
    3140:	cmp	r3, #47	; 0x2f
    3142:	beq.n	313a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    3144:	ldr	r1, [r4, #32]
    3146:	add	r0, sp, #32
    3148:	bl	2054 <ExFatFile::openRoot(ExFatVolume*)>
    314c:	cmp	r0, #0
    314e:	beq.n	30c0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    3150:	add	r4, sp, #32
    3152:	ldr	r1, [sp, #4]
    3154:	b.n	30d0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    3156:	add	r2, sp, #12
    3158:	mov	r1, r4
    315a:	mov	r0, r6
    315c:	bl	3048 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

fail:
  return false;
}
    3160:	add	sp, #88	; 0x58
    3162:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3166:	nop

00003168 <ExFatFile::truncate()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    3168:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    316c:	lsls	r2, r3, #30
    316e:	bpl.n	31a2 <ExFatFile::truncate()+0x3a>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    3170:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    3172:	ldr	r5, [r0, #28]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    3174:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    3176:	cbz	r5, 319c <ExFatFile::truncate()+0x34>
    return true;
  }
  if (isContiguous()) {
    3178:	and.w	r3, r3, #64	; 0x40
    317c:	mov	r4, r0
    317e:	and.w	r6, r3, #255	; 0xff
    3182:	cbnz	r3, 31a6 <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    3184:	ldr	r1, [r0, #24]
    3186:	cmp	r1, #0
    3188:	bne.n	3210 <ExFatFile::truncate()+0xa8>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    318a:	str	r5, [sp, #4]
      m_firstCluster = 0;
    318c:	str	r1, [r0, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    318e:	mov	r1, r5
    3190:	ldr	r0, [r4, #32]
    3192:	bl	2b50 <ExFatPartition::freeChain(unsigned long)>
    3196:	cbnz	r0, 31e8 <ExFatFile::truncate()+0x80>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
    3198:	movs	r0, #0
    319a:	b.n	319e <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    return true;
    319c:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    319e:	add	sp, #12
    31a0:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
    31a2:	movs	r0, #0
}
    31a4:	bx	lr
    31a6:	ldr	r0, [r0, #32]
  if (m_firstCluster == 0) {
    return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    31a8:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
    return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    31aa:	ldrb.w	r2, [r0, #1093]	; 0x445
    31ae:	ldrd	r6, r7, [r4, #8]
    31b2:	adds	r2, #9
    31b4:	adds.w	r6, r6, #4294967295
    31b8:	uxtb	r2, r2
    31ba:	adc.w	r7, r7, #4294967295
    31be:	rsb	lr, r2, #32
    31c2:	sub.w	r3, r2, #32
    31c6:	lsr.w	r2, r6, r2
    31ca:	lsl.w	lr, r7, lr
    31ce:	lsr.w	r3, r7, r3
    31d2:	orr.w	r2, r2, lr
    31d6:	orrs	r2, r3
    31d8:	adds	r2, #1
    if (m_curCluster) {
    31da:	cbz	r1, 320a <ExFatFile::truncate()+0xa2>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    31dc:	subs	r5, #1
    return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    31de:	adds	r3, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    31e0:	subs	r1, r5, r1
    return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    31e2:	str	r3, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    31e4:	add	r2, r1
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    31e6:	cbnz	r2, 322a <ExFatFile::truncate()+0xc2>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    31e8:	ldrb.w	r3, [r4, #51]	; 0x33
  return sync();
    31ec:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    31ee:	ldrd	r6, r7, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    31f2:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    31f6:	strd	r6, r7, [r4, #8]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    31fa:	strb.w	r3, [r4, #51]	; 0x33
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
    31fe:	strd	r6, r7, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();
    3202:	bl	2f34 <ExFatFile::sync()>

fail:
  return false;
}
    3206:	add	sp, #12
    3208:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    320a:	str	r5, [sp, #4]
      m_firstCluster = 0;
    320c:	str	r1, [r4, #28]
    320e:	b.n	31e6 <ExFatFile::truncate()+0x7e>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    3210:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    3212:	ldr	r0, [r0, #32]
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    3214:	str.w	r6, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    3218:	bl	2aa4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    321c:	cmp	r0, #0
    321e:	blt.n	3198 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    3220:	bne.n	3238 <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    3222:	ldr	r5, [sp, #4]
    3224:	cmp	r5, #0
    3226:	beq.n	31e8 <ExFatFile::truncate()+0x80>
    3228:	b.n	318e <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    322a:	movs	r3, #0
    322c:	ldr	r1, [sp, #4]
    322e:	bl	29c0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    3232:	cmp	r0, #0
    3234:	bne.n	31e8 <ExFatFile::truncate()+0x80>
    3236:	b.n	3198 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    3238:	mov.w	r2, #4294967295
    323c:	ldr	r1, [r4, #24]
    323e:	ldr	r0, [r4, #32]
    3240:	bl	2b2c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    3244:	cmp	r0, #0
    3246:	bne.n	3222 <ExFatFile::truncate()+0xba>
    3248:	b.n	3198 <ExFatFile::truncate()+0x30>
    324a:	nop

0000324c <ExFatFile::write(void const*, unsigned int)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    324c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3250:	ldrb.w	r3, [r0, #51]	; 0x33
    3254:	sub	sp, #12
    3256:	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    3258:	lsls	r5, r3, #30

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    325a:	str	r2, [sp, #0]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    325c:	bpl.w	33c6 <ExFatFile::write(void const*, unsigned int)+0x17a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    3260:	lsls	r2, r3, #28
    3262:	mov	r8, r1
    3264:	bmi.w	33b8 <ExFatFile::write(void const*, unsigned int)+0x16c>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    3268:	ldr	r3, [sp, #0]
    326a:	cmp	r3, #0
    326c:	beq.w	34aa <ExFatFile::write(void const*, unsigned int)+0x25e>
    3270:	mov	r1, r4
    3272:	ldr	r5, [sp, #0]
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3274:	mov.w	sl, #1
    3278:	ldrd	r2, r3, [r1], #24
    327c:	mov	fp, r2
    327e:	str	r1, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3280:	ldr	r0, [r4, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    3282:	ldr	r1, [r4, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3284:	ldr.w	r6, [r0, #1080]	; 0x438
    3288:	and.w	r6, r6, fp
    sectorOffset = clusterOffset & m_vol->sectorMask();
    328c:	ubfx	r9, r6, #0, #9
    if (clusterOffset == 0) {
    3290:	cbnz	r6, 32e8 <ExFatFile::write(void const*, unsigned int)+0x9c>
      // start of new cluster
      if (m_curCluster != 0) {
    3292:	cmp	r1, #0
    3294:	beq.w	3430 <ExFatFile::write(void const*, unsigned int)+0x1e4>
        int fg;

        if (isContiguous()) {
    3298:	ldrb.w	r3, [r4, #51]	; 0x33
    329c:	lsls	r3, r3, #25
    329e:	bpl.w	3462 <ExFatFile::write(void const*, unsigned int)+0x216>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    32a2:	ldrb.w	r2, [r0, #1093]	; 0x445
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    32a6:	ldr	r3, [r4, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    32a8:	adds	r2, #9
    32aa:	ldrd	fp, ip, [r4, #8]
    32ae:	uxtb	r2, r2
    32b0:	adds.w	fp, fp, #4294967295
    32b4:	rsb	lr, r2, #32
    32b8:	sub.w	r7, r2, #32
    32bc:	adc.w	ip, ip, #4294967295
    32c0:	lsr.w	r2, fp, r2
    32c4:	lsl.w	lr, ip, lr
    32c8:	lsr.w	r7, ip, r7
    32cc:	orr.w	r2, r2, lr
    32d0:	orrs	r2, r7
    32d2:	add	r2, r3
    32d4:	cmp	r1, r2
    32d6:	bcc.w	345c <ExFatFile::write(void const*, unsigned int)+0x210>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    32da:	mov	r0, r4
    32dc:	bl	2d54 <ExFatFile::addCluster()>
    32e0:	cmp	r0, #0
    32e2:	beq.n	33c6 <ExFatFile::write(void const*, unsigned int)+0x17a>
    32e4:	ldr	r0, [r4, #32]
    32e6:	ldr	r1, [r4, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    32e8:	lsrs	r6, r6, #9
    32ea:	subs	r1, #2
    32ec:	ldr.w	r7, [r0, #1068]	; 0x42c
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    32f0:	ldrb.w	lr, [r0, #1093]	; 0x445
    32f4:	add	r7, r6
    32f6:	lsl.w	r1, r1, lr
    32fa:	add	r1, r7

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    32fc:	cmp.w	r9, #0
    3300:	bne.n	33da <ExFatFile::write(void const*, unsigned int)+0x18e>
    3302:	cmp.w	r5, #512	; 0x200
    3306:	ite	cs
    3308:	movcs	r2, #0
    330a:	movcc	r2, #1
    330c:	cmp	r2, #0
    330e:	bne.n	33da <ExFatFile::write(void const*, unsigned int)+0x18e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
    3310:	cmp.w	r5, #1024	; 0x400
    3314:	bcc.w	3438 <ExFatFile::write(void const*, unsigned int)+0x1ec>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    3318:	lsl.w	lr, sl, lr
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    331c:	lsrs	r3, r5, #9
    331e:	ldr.w	ip, [r0, #536]	; 0x218
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    3322:	rsb	r6, r6, lr
    3326:	cmp	r3, r6
    3328:	it	cs
    332a:	movcs	r3, r6
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    332c:	cmp	r1, ip
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    332e:	mov.w	r7, r3, lsl #9
    3332:	bhi.n	3346 <ExFatFile::write(void const*, unsigned int)+0xfa>
    3334:	adds	r6, r3, r1
    3336:	cmp	ip, r6
    3338:	bcs.n	3346 <ExFatFile::write(void const*, unsigned int)+0xfa>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    333a:	mov.w	r6, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    333e:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    3342:	str.w	r6, [r0, #536]	; 0x218
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
    if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    3346:	ldr.w	r0, [r0, #532]	; 0x214
    334a:	mov	r2, r8
    334c:	ldr	r6, [r0, #0]
    334e:	ldr	r6, [r6, #36]	; 0x24
    3350:	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    3352:	cmp	r0, #0
    3354:	beq.n	33c6 <ExFatFile::write(void const*, unsigned int)+0x17a>
    3356:	mov	r0, r7
    3358:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    335a:	add	r8, r7
    toWrite -= n;
    335c:	subs	r5, r5, r7
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    335e:	ldrd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    3362:	ldrd	r6, r7, [r4, #16]
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    3366:	adds.w	fp, r2, r0
    336a:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    336e:	cmp	r7, ip
    3370:	it	eq
    3372:	cmpeq	r6, fp
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    3374:	strd	fp, ip, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    3378:	bcs.n	338a <ExFatFile::write(void const*, unsigned int)+0x13e>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    337a:	ldrb.w	r1, [r4, #51]	; 0x33
    337e:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    3382:	strd	fp, ip, [r4, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    3386:	strb.w	r1, [r4, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    338a:	cmp	r5, #0
    338c:	bne.w	3280 <ExFatFile::write(void const*, unsigned int)+0x34>
    3390:	mov	r2, fp
    3392:	mov	r3, ip
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    3394:	ldrd	r0, r1, [r4, #8]
    3398:	cmp	r1, r3
    339a:	it	eq
    339c:	cmpeq	r0, r2
    339e:	bcc.n	3492 <ExFatFile::write(void const*, unsigned int)+0x246>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    33a0:	ldr	r3, [pc, #268]	; (34b0 <ExFatFile::write(void const*, unsigned int)+0x264>)
    33a2:	ldr	r3, [r3, #0]
    33a4:	cmp	r3, #0
    33a6:	beq.n	34a6 <ExFatFile::write(void const*, unsigned int)+0x25a>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    33a8:	ldrb.w	r3, [r4, #51]	; 0x33
    33ac:	ldr	r0, [sp, #0]
    33ae:	orn	r3, r3, #127	; 0x7f
    33b2:	strb.w	r3, [r4, #51]	; 0x33
    33b6:	b.n	33d4 <ExFatFile::write(void const*, unsigned int)+0x188>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    33b8:	ldrd	r2, r3, [r0, #16]
    33bc:	bl	22f8 <ExFatFile::seekSet(unsigned long long)>
    33c0:	cmp	r0, #0
    33c2:	bne.w	3268 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    33c6:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    33ca:	movs	r0, #0
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    33cc:	orr.w	r3, r3, #1
    33d0:	strb.w	r3, [r4, #50]	; 0x32
  return 0;
}
    33d4:	add	sp, #12
    33d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    33da:	cmp.w	r9, #0
    33de:	bne.n	342c <ExFatFile::write(void const*, unsigned int)+0x1e0>
    33e0:	ldrd	r2, r3, [r4, #16]
    33e4:	ldrd	r6, r7, [r4]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    33e8:	cmp	r7, r3
    33ea:	it	eq
    33ec:	cmpeq	r6, r2
    33ee:	ite	cc
    33f0:	movcc	r2, #1
    33f2:	movcs	r2, #5
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() { m_dataCache.dirty(); }
  void dataCacheInvalidate() { m_dataCache.invalidate(); }
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    33f4:	add.w	r0, r0, #528	; 0x210
    33f8:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCachePrepare(sector, cacheOption);
      if (!cache) {
    33fc:	cmp	r0, #0
    33fe:	beq.n	33c6 <ExFatFile::write(void const*, unsigned int)+0x17a>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    3400:	rsb	r7, r9, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    3404:	add	r0, r9
    3406:	mov	r1, r8
    3408:	cmp	r7, r5
    340a:	it	cs
    340c:	movcs	r7, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    340e:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    3410:	mov	r2, r7
    3412:	bl	68c4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3416:	cmp.w	r9, #512	; 0x200
    341a:	bne.n	3356 <ExFatFile::write(void const*, unsigned int)+0x10a>
  }
  uint32_t dataCacheSector() { return m_dataCache.sector(); }
  bool dataCacheSync() { return m_dataCache.sync(); }
    341c:	ldr	r0, [r4, #32]
    341e:	add.w	r0, r0, #528	; 0x210
    3422:	bl	1f10 <FsCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    3426:	cmp	r0, #0
    3428:	bne.n	3356 <ExFatFile::write(void const*, unsigned int)+0x10a>
    342a:	b.n	33c6 <ExFatFile::write(void const*, unsigned int)+0x17a>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    342c:	movs	r2, #1
    342e:	b.n	33f4 <ExFatFile::write(void const*, unsigned int)+0x1a8>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    3430:	ldr	r1, [r4, #28]
    3432:	cbz	r1, 3472 <ExFatFile::write(void const*, unsigned int)+0x226>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    3434:	str	r1, [r4, #24]
    3436:	b.n	32e8 <ExFatFile::write(void const*, unsigned int)+0x9c>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    3438:	ldr.w	r3, [r0, #536]	; 0x218
    343c:	cmp	r1, r3
    343e:	beq.n	3484 <ExFatFile::write(void const*, unsigned int)+0x238>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    3440:	ldr.w	r0, [r0, #532]	; 0x214
    3444:	mov	r2, r8
    3446:	ldr	r3, [r0, #0]
    3448:	ldr	r3, [r3, #32]
    344a:	blx	r3
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    344c:	cmp	r0, #0
    344e:	beq.n	33c6 <ExFatFile::write(void const*, unsigned int)+0x17a>
    3450:	mov.w	r0, #512	; 0x200
    3454:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    3456:	mov.w	r7, #512	; 0x200
    345a:	b.n	335a <ExFatFile::write(void const*, unsigned int)+0x10e>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    345c:	adds	r1, #1
    345e:	str	r1, [r4, #24]
    3460:	b.n	32e8 <ExFatFile::write(void const*, unsigned int)+0x9c>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3462:	ldr	r2, [sp, #4]
    3464:	bl	2aa4 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3468:	cmp	r0, #0
    346a:	blt.n	33c6 <ExFatFile::write(void const*, unsigned int)+0x17a>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    346c:	bne.w	32e4 <ExFatFile::write(void const*, unsigned int)+0x98>
    3470:	b.n	32da <ExFatFile::write(void const*, unsigned int)+0x8e>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    3472:	mov	r0, r4
    3474:	bl	2d54 <ExFatFile::addCluster()>
    3478:	cmp	r0, #0
    347a:	beq.n	33c6 <ExFatFile::write(void const*, unsigned int)+0x17a>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    347c:	ldr	r1, [r4, #24]
    347e:	ldr	r0, [r4, #32]
    3480:	str	r1, [r4, #28]
    3482:	b.n	32e8 <ExFatFile::write(void const*, unsigned int)+0x9c>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    3484:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    3488:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    348c:	str.w	r3, [r0, #536]	; 0x218
    3490:	b.n	3440 <ExFatFile::write(void const*, unsigned int)+0x1f4>
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3492:	ldrb.w	r1, [r4, #51]	; 0x33
    3496:	ldr	r0, [sp, #0]
    3498:	orn	r1, r1, #127	; 0x7f
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    349c:	strd	r2, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    34a0:	strb.w	r1, [r4, #51]	; 0x33
    34a4:	b.n	33d4 <ExFatFile::write(void const*, unsigned int)+0x188>
    34a6:	ldr	r0, [sp, #0]
    34a8:	b.n	33d4 <ExFatFile::write(void const*, unsigned int)+0x188>
    34aa:	ldrd	r2, r3, [r4]
    34ae:	b.n	3394 <ExFatFile::write(void const*, unsigned int)+0x148>
    34b0:	.word	0x20017398

000034b4 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    34b4:	cmp	r2, #4
    34b6:	bls.n	34d0 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1c>
    return getLe16(ldir->unicode1 + 2 * i);
  } else if (i < 11) {
    34b8:	cmp	r2, #10
    34ba:	bls.n	34c8 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x14>
    return getLe16(ldir->unicode2 + 2 * (i - 5));
  } else if (i < 13) {
    34bc:	cmp	r2, #12
    34be:	bhi.n	34da <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//------------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    34c0:	add.w	r2, r1, r2, lsl #1
    34c4:	ldrh	r0, [r2, #6]
    34c6:	bx	lr
    34c8:	add.w	r2, r1, r2, lsl #1
    34cc:	ldrh	r0, [r2, #4]
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2 * i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2 * (i - 5));
    34ce:	bx	lr
    34d0:	add.w	r2, r1, r2, lsl #1
    34d4:	ldrh.w	r0, [r2, #1]
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2 * i);
    34d8:	bx	lr
    return getLe16(ldir->unicode2 + 2 * (i - 5));
  } else if (i < 13) {
    return getLe16(ldir->unicode3 + 2 * (i - 11));
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    34da:	movs	r0, #0
}
    34dc:	bx	lr
    34de:	nop

000034e0 <FatFile::openRoot(FatVolume*) [clone .part.38]>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    34e0:	push	{r3, r4, r5, lr}
    34e2:	mov	r5, r1
    34e4:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    34e6:	movs	r2, #36	; 0x24
    34e8:	movs	r1, #0
    34ea:	bl	972c <memset>

  m_vol = vol;
    34ee:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    34f0:	ldrb	r3, [r5, #7]
    34f2:	cmp	r3, #16
    34f4:	beq.n	3508 <FatFile::openRoot(FatVolume*) [clone .part.38]+0x28>
    34f6:	cmp	r3, #32
    34f8:	bne.n	3504 <FatFile::openRoot(FatVolume*) [clone .part.38]+0x24>
    case 16:
      m_attributes = FILE_ATTR_ROOT_FIXED;
      break;

    case 32:
      m_attributes = FILE_ATTR_ROOT32;
    34fa:	movs	r3, #128	; 0x80
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    34fc:	movs	r0, #1
    case 16:
      m_attributes = FILE_ATTR_ROOT_FIXED;
      break;

    case 32:
      m_attributes = FILE_ATTR_ROOT32;
    34fe:	strb	r3, [r4, #0]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    3500:	strb	r0, [r4, #2]
    3502:	pop	{r3, r4, r5, pc}
  return true;

fail:
  return false;
    3504:	movs	r0, #0
}
    3506:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
    case 12:
#endif  // FAT12_SUPPORT
    case 16:
      m_attributes = FILE_ATTR_ROOT_FIXED;
    3508:	movs	r3, #64	; 0x40
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    350a:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
    case 12:
#endif  // FAT12_SUPPORT
    case 16:
      m_attributes = FILE_ATTR_ROOT_FIXED;
    350c:	strb	r3, [r4, #0]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    350e:	strb	r0, [r4, #2]
    3510:	pop	{r3, r4, r5, pc}
    3512:	nop

00003514 <FatFile::addCluster()>:
#include "FatLib.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    3514:	mov	r2, r0
#define DBG_FILE "FatFile.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    3516:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    3518:	ldr.w	r5, [r2, #16]!
#define DBG_FILE "FatFile.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    351c:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    351e:	ldr	r0, [r0, #8]
    3520:	mov	r1, r5
    3522:	bl	402c <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    3526:	cbz	r0, 353e <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    3528:	cbz	r5, 3540 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    352a:	ldr	r3, [r4, #16]
    352c:	adds	r5, #1
    352e:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    3530:	ldrb	r3, [r4, #2]
    3532:	it	ne
    3534:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    3538:	orn	r3, r3, #127	; 0x7f
    353c:	strb	r3, [r4, #2]
  return false;
#else   // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    353e:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    3540:	ldrb	r3, [r4, #2]
    3542:	orr.w	r3, r3, #64	; 0x40
    3546:	b.n	3538 <FatFile::addCluster()+0x24>

00003548 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    3548:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sector;
  uint8_t* pc;

  if (isRootFixed()) {
    354a:	ldrb	r3, [r0, #0]
    354c:	and.w	r3, r3, #64	; 0x40
    3550:	cbnz	r3, 355e <FatFile::addDirCluster()+0x16>
    3552:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL * 4095) {
    3556:	ldr	r1, [r0, #20]
    3558:	ldr	r3, [pc, #100]	; (35c0 <FatFile::addDirCluster()+0x78>)
    355a:	cmp	r1, r3
    355c:	bls.n	3564 <FatFile::addDirCluster()+0x1c>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    355e:	movs	r6, #0
}
    3560:	mov	r0, r6
    3562:	pop	{r3, r4, r5, r6, r7, pc}
    3564:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL * 4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    3566:	bl	3514 <FatFile::addCluster()>
    356a:	mov	r6, r0
    356c:	cmp	r0, #0
    356e:	beq.n	355e <FatFile::addDirCluster()+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    3570:	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3572:	ldr	r7, [r5, #16]
    3574:	ldrb	r3, [r0, #6]
    3576:	subs	r7, #2
    3578:	ldr	r2, [r0, #20]
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    357a:	ldrb	r1, [r0, #4]
    357c:	lsls	r7, r3
    357e:	add	r7, r2
    3580:	cbnz	r1, 3594 <FatFile::addDirCluster()+0x4c>
    3582:	b.n	35ac <FatFile::addDirCluster()+0x64>
    pc = m_vol->dataCachePrepare(sector + i, FsCache::CACHE_RESERVE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(pc, 0, m_vol->bytesPerSector());
    3584:	bl	972c <memset>
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    3588:	adds	r4, #1
    358a:	ldr	r0, [r5, #8]
    358c:	uxtb	r4, r4
    358e:	ldrb	r3, [r0, #4]
    3590:	cmp	r3, r4
    3592:	bls.n	35aa <FatFile::addDirCluster()+0x62>
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    3594:	movs	r2, #5
    3596:	adds	r1, r4, r7
    3598:	adds	r0, #36	; 0x24
    359a:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
    pc = m_vol->dataCachePrepare(sector + i, FsCache::CACHE_RESERVE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(pc, 0, m_vol->bytesPerSector());
    359e:	mov.w	r2, #512	; 0x200
    35a2:	movs	r1, #0
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    pc = m_vol->dataCachePrepare(sector + i, FsCache::CACHE_RESERVE_FOR_WRITE);
    if (!pc) {
    35a4:	cmp	r0, #0
    35a6:	bne.n	3584 <FatFile::addDirCluster()+0x3c>
    35a8:	b.n	355e <FatFile::addDirCluster()+0x16>
    35aa:	ldrb	r3, [r0, #6]
      goto fail;
    }
    memset(pc, 0, m_vol->bytesPerSector());
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    35ac:	mov.w	r2, #512	; 0x200
    35b0:	ldr	r1, [r5, #20]
    35b2:	lsl.w	r3, r2, r3
    35b6:	uxtah	r3, r1, r3
    35ba:	str	r3, [r5, #20]
    35bc:	b.n	3560 <FatFile::addDirCluster()+0x18>
    35be:	nop
    35c0:	.word	0x001ffdff

000035c4 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    35c4:	push	{r4, lr}
    35c6:	mov	r4, r0
    35c8:	ldr	r0, [r0, #8]
    35ca:	mov	r2, r1
    35cc:	adds	r0, #36	; 0x24
    35ce:	ldr	r1, [r4, #24]
    35d0:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* pc = m_vol->dataCachePrepare(m_dirSector, action);
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(pc);
  if (!dir) {
    35d4:	cbz	r0, 35e0 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return dir + (m_dirIndex & 0XF);
    35d6:	ldrh	r3, [r4, #4]
    35d8:	and.w	r3, r3, #15
    35dc:	add.w	r0, r0, r3, lsl #5

fail:
  return nullptr;
}
    35e0:	pop	{r4, pc}
    35e2:	nop

000035e4 <FatFile::sync() [clone .part.42]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    35e4:	push	{r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    35e6:	ldrsb.w	r3, [r0, #2]
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    35ea:	sub	sp, #12
    35ec:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    35ee:	cmp	r3, #0
    35f0:	blt.n	3626 <FatFile::sync() [clone .part.42]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    35f2:	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    35f4:	add.w	r0, r5, #36	; 0x24
    35f8:	bl	1f10 <FsCache::sync()>
    35fc:	cbnz	r0, 360c <FatFile::sync() [clone .part.42]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    35fe:	ldrb	r3, [r4, #1]
  return false;
    3600:	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    3602:	orr.w	r3, r3, #1
    3606:	strb	r3, [r4, #1]
  return false;
}
    3608:	add	sp, #12
    360a:	pop	{r4, r5, pc}
    360c:	add.w	r0, r5, #564	; 0x234
    3610:	bl	1f10 <FsCache::sync()>
    3614:	cmp	r0, #0
    3616:	beq.n	35fe <FatFile::sync() [clone .part.42]+0x1a>
    3618:	ldr	r0, [r5, #0]
    return m_cache.cacheSafeWrite(sector, dst);
  }
  bool cacheSafeWrite(uint32_t sector, const uint8_t* dst, size_t count) {
    return m_cache.cacheSafeWrite(sector, dst, count);
  }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    361a:	ldr	r3, [r0, #0]
    361c:	ldr	r3, [r3, #28]
    361e:	blx	r3
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3620:	cmp	r0, #0
    3622:	beq.n	35fe <FatFile::sync() [clone .part.42]+0x1a>
    3624:	b.n	3608 <FatFile::sync() [clone .part.42]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    3626:	movs	r1, #1
    3628:	bl	35c4 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    362c:	mov	r5, r0
    362e:	cmp	r0, #0
    3630:	beq.n	35fe <FatFile::sync() [clone .part.42]+0x1a>
    3632:	ldrb	r3, [r0, #0]
    3634:	cmp	r3, #229	; 0xe5
    3636:	beq.n	35fe <FatFile::sync() [clone .part.42]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
    3638:	ldrb	r3, [r4, #0]
    363a:	and.w	r3, r3, #55	; 0x37
    363e:	strb	r3, [r0, #11]
    // do not set filesize for dir files
    if (isFile()) {
    3640:	ldrb	r3, [r4, #0]
    3642:	lsls	r3, r3, #28
    3644:	bpl.n	364a <FatFile::sync() [clone .part.42]+0x66>
      setLe32(dir->fileSize, m_fileSize);
    3646:	ldr	r3, [r4, #28]
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    3648:	str	r3, [r0, #28]
    }
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    364a:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    364c:	ldr	r1, [pc, #44]	; (367c <FatFile::sync() [clone .part.42]+0x98>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    364e:	lsrs	r2, r3, #16
    3650:	strh	r3, [r5, #26]
    3652:	ldr	r3, [r1, #0]
    3654:	strh	r2, [r5, #20]
    3656:	cbz	r3, 3672 <FatFile::sync() [clone .part.42]+0x8e>
      FsDateTime::callback(&date, &time, &ms10);
    3658:	add.w	r2, sp, #3
    365c:	add.w	r1, sp, #6
    3660:	add	r0, sp, #4
    3662:	blx	r3
      setLe16(dir->modifyDate, date);
    3664:	ldrh.w	r3, [sp, #4]
    3668:	ldrh.w	r2, [sp, #6]
    366c:	strh	r3, [r5, #24]
    366e:	strh	r3, [r5, #18]
    3670:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    3672:	ldrb	r3, [r4, #2]
    3674:	and.w	r3, r3, #127	; 0x7f
    3678:	strb	r3, [r4, #2]
    367a:	b.n	35f2 <FatFile::sync() [clone .part.42]+0xe>
    367c:	.word	0x20017398

00003680 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    3680:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    3682:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    3684:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    3686:	cbnz	r3, 3692 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    3688:	movs	r3, #0
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    368a:	movs	r0, #1
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    368c:	strb	r3, [r4, #0]
  m_flags = 0;
    368e:	strb	r3, [r4, #2]
  return rtn;
}
    3690:	pop	{r4, pc}
    3692:	bl	35e4 <FatFile::sync() [clone .part.42]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    3696:	movs	r3, #0
    3698:	strb	r3, [r4, #0]
  m_flags = 0;
    369a:	strb	r3, [r4, #2]
  return rtn;
}
    369c:	pop	{r4, pc}
    369e:	nop

000036a0 <FatFile::mkdir(FatFile*, FatLfn_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    36a0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  uint8_t* pc;

  if (!parent->isDir()) {
    36a4:	ldrb	r4, [r1, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    36a6:	sub	sp, #32
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  uint8_t* pc;

  if (!parent->isDir()) {
    36a8:	tst.w	r4, #208	; 0xd0
    36ac:	bne.n	36b6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    36ae:	movs	r0, #0
    36b0:	add	sp, #32
    36b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    36b6:	movw	r3, #2562	; 0xa02
    36ba:	mov	r5, r0
    36bc:	mov	r4, r1
    36be:	bl	464c <FatFile::open(FatFile*, FatLfn_t*, int)>
    36c2:	cmp	r0, #0
    36c4:	beq.n	36ae <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    36c6:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    36c8:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    36ca:	mov	r0, r5
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    36cc:	strb	r2, [r5, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    36ce:	strb	r3, [r5, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    36d0:	bl	3548 <FatFile::addDirCluster()>
    36d4:	cmp	r0, #0
    36d6:	beq.n	36ae <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    36d8:	ldr	r2, [r5, #16]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    36da:	ldrb	r3, [r5, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    36dc:	str	r2, [r5, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    36de:	cmp	r3, #0
    36e0:	bne.n	37e2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x142>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    36e2:	movs	r1, #1
    36e4:	mov	r0, r5
    36e6:	bl	35c4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    36ea:	mov	r7, r0
    36ec:	cmp	r0, #0
    36ee:	beq.n	36ae <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry attribute
  dir->attributes = FS_ATTRIB_DIRECTORY;
    36f0:	movs	r3, #16

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    36f2:	ldr	r0, [r0, #0]
    36f4:	ldr	r1, [r7, #4]
    36f6:	mov	lr, sp
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry attribute
  dir->attributes = FS_ATTRIB_DIRECTORY;
    36f8:	strb	r3, [r7, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
    36fa:	mov.w	ip, #46	; 0x2e
  }
  // change directory entry attribute
  dir->attributes = FS_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    36fe:	ldr	r2, [r7, #8]
  dot.name[0] = '.';
    3700:	add	r6, sp, #32
  }
  // change directory entry attribute
  dir->attributes = FS_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    3702:	ldr	r3, [r7, #12]
    3704:	ldrh.w	r8, [r7, #20]
    3708:	stmia.w	lr!, {r0, r1, r2, r3}
    370c:	ldr	r2, [r7, #24]
    370e:	ldr	r3, [r7, #28]
    3710:	ldr	r0, [r7, #16]
    3712:	ldr	r1, [r7, #20]
  dot.name[0] = '.';
    3714:	strb.w	ip, [r6, #-32]!
    3718:	add.w	ip, sp, #10
  }
  // change directory entry attribute
  dir->attributes = FS_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    371c:	ldrh	r7, [r7, #26]
    371e:	stmia.w	lr!, {r0, r1, r2, r3}
    3722:	mov	r3, r6
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    3724:	movs	r2, #32
    3726:	strb.w	r2, [r3, #1]!
  dir->attributes = FS_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    372a:	cmp	r3, ip
    372c:	bne.n	3726 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x86>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    372e:	ldr	r0, [r5, #8]
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    3730:	movs	r2, #1
    3732:	ldr	r3, [r5, #32]
    3734:	ldrb.w	lr, [r0, #6]
    3738:	adds	r0, #36	; 0x24
    373a:	subs	r3, #2
    373c:	ldr.w	r1, [r0, #-16]
    3740:	lsl.w	r3, r3, lr
    3744:	add	r1, r3
    3746:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
  pc = m_vol->dataCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
  dir = reinterpret_cast<DirFat_t*>(pc);
  if (!dir) {
    374a:	mov	lr, r0
    374c:	cmp	r0, #0
    374e:	beq.n	36ae <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&dir[0], &dot, sizeof(dot));
    3750:	strh.w	r8, [sp, #20]
  // make entry for '..'
  dot.name[1] = '.';
    3754:	mov.w	r8, #46	; 0x2e
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&dir[0], &dot, sizeof(dot));
    3758:	strh.w	r7, [sp, #26]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&dir[1], &dot, sizeof(dot));
    375c:	mov	r7, r6
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&dir[0], &dot, sizeof(dot));
    375e:	ldmia	r6!, {r0, r1, r2, r3}
    3760:	str.w	r0, [lr]
    3764:	str.w	r1, [lr, #4]
    3768:	str.w	r2, [lr, #8]
    376c:	str.w	r3, [lr, #12]
  // make entry for '..'
  dot.name[1] = '.';
    3770:	strb.w	r8, [sp, #1]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&dir[0], &dot, sizeof(dot));
    3774:	ldmia	r6!, {r0, r1, r2, r3}
    3776:	str.w	r0, [lr, #16]
    377a:	str.w	r1, [lr, #20]
    377e:	str.w	r2, [lr, #24]
    3782:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    3786:	ldr	r3, [r4, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&dir[1], &dot, sizeof(dot));
    3788:	lsrs	r2, r3, #16
    378a:	strh.w	r3, [sp, #26]
    378e:	strh.w	r2, [sp, #20]
    3792:	ldmia	r7!, {r0, r1, r2, r3}
    3794:	str.w	r0, [lr, #32]
    3798:	str.w	r1, [lr, #36]	; 0x24
    379c:	str.w	r2, [lr, #40]	; 0x28
    37a0:	str.w	r3, [lr, #44]	; 0x2c
    37a4:	ldmia	r7!, {r0, r1, r2, r3}
    37a6:	str.w	r0, [lr, #48]	; 0x30
    37aa:	str.w	r1, [lr, #52]	; 0x34
    37ae:	str.w	r2, [lr, #56]	; 0x38
    37b2:	str.w	r3, [lr, #60]	; 0x3c
  // write first sector
  return m_vol->cacheSync();
    37b6:	ldr	r4, [r5, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    37b8:	add.w	r0, r4, #36	; 0x24
    37bc:	bl	1f10 <FsCache::sync()>
    37c0:	cmp	r0, #0
    37c2:	beq.w	36ae <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    37c6:	add.w	r0, r4, #564	; 0x234
    37ca:	bl	1f10 <FsCache::sync()>
    37ce:	cmp	r0, #0
    37d0:	beq.w	36ae <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    37d4:	ldr	r0, [r4, #0]
    return m_cache.cacheSafeWrite(sector, dst);
  }
  bool cacheSafeWrite(uint32_t sector, const uint8_t* dst, size_t count) {
    return m_cache.cacheSafeWrite(sector, dst, count);
  }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    37d6:	ldr	r3, [r0, #0]
    37d8:	ldr	r3, [r3, #28]

fail:
  return false;
}
    37da:	add	sp, #32
    37dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    37e0:	bx	r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    37e2:	ldr	r3, [r5, #20]
    37e4:	cbz	r3, 37f4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x154>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    37e6:	ldrb	r3, [r5, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    37e8:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    37ea:	bic.w	r3, r3, #32
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    37ee:	str	r2, [r5, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    37f0:	str	r2, [r5, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    37f2:	strb	r3, [r5, #2]
    37f4:	mov	r0, r5
    37f6:	bl	35e4 <FatFile::sync() [clone .part.42]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    37fa:	cmp	r0, #0
    37fc:	beq.w	36ae <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    3800:	b.n	36e2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x42>
    3802:	nop

00003804 <FatFile::mkdir(FatFile*, char const*, bool)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::isBusy() { return m_vol->isBusy(); }
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    3804:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3808:	mov	r6, r0
    380a:	sub	sp, #80	; 0x50
    380c:	movs	r0, #0
    380e:	mov	r4, r1
  FatName_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    3810:	ldrb	r1, [r6, #0]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::isBusy() { return m_vol->isBusy(); }
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    3812:	str	r2, [sp, #4]
    3814:	strb.w	r0, [sp, #44]	; 0x2c
    3818:	strb.w	r0, [sp, #45]	; 0x2d
    381c:	strb.w	r0, [sp, #46]	; 0x2e
  FatName_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    3820:	cbnz	r1, 382c <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    3822:	mov	r8, r3
    3824:	ldrb	r3, [r4, #0]
    3826:	tst.w	r3, #208	; 0xd0
    382a:	bne.n	3834 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    382c:	movs	r0, #0
}
    382e:	add	sp, #80	; 0x50
    3830:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    3834:	ldrb	r3, [r2, #0]
    3836:	mov	r1, r2
    3838:	cmp	r3, #47	; 0x2f
    383a:	beq.n	389a <FatFile::mkdir(FatFile*, char const*, bool)+0x96>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    383c:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    383e:	add	r3, sp, #4
    3840:	add	r2, sp, #12
    3842:	mov	r0, r6
    3844:	bl	48fc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    3848:	add	r2, sp, #12
    384a:	mov	r1, r4
    384c:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    384e:	cmp	r0, #0
    3850:	beq.n	382c <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    3852:	ldr	r5, [sp, #4]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    3854:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    3856:	ldrb	r5, [r5, #0]
    3858:	cmp	r5, #0
    385a:	beq.n	38be <FatFile::mkdir(FatFile*, char const*, bool)+0xba>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    385c:	bl	464c <FatFile::open(FatFile*, FatLfn_t*, int)>
    3860:	cbnz	r0, 3876 <FatFile::mkdir(FatFile*, char const*, bool)+0x72>
      if (!pFlag || !mkdir(parent, &fname)) {
    3862:	cmp.w	r8, #0
    3866:	beq.n	382c <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    3868:	mov	r1, r4
    386a:	add	r2, sp, #12
    386c:	mov	r0, r6
    386e:	bl	36a0 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    3872:	cmp	r0, #0
    3874:	beq.n	382c <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    3876:	mov	r5, r6
    3878:	add	r4, sp, #44	; 0x2c
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    387a:	ldrb.w	lr, [r6]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    387e:	ldmia	r5!, {r0, r1, r2, r3}
    3880:	stmia	r4!, {r0, r1, r2, r3}
    3882:	ldmia	r5!, {r0, r1, r2, r3}
    3884:	ldr	r5, [r5, #0]
    3886:	stmia	r4!, {r0, r1, r2, r3}
    3888:	str	r5, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    388a:	cmp.w	lr, #0
    388e:	bne.n	38b6 <FatFile::mkdir(FatFile*, char const*, bool)+0xb2>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    3890:	strb	r7, [r6, #0]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    3892:	add	r4, sp, #44	; 0x2c
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    3894:	strb	r7, [r6, #2]
    3896:	ldr	r1, [sp, #4]
    3898:	b.n	383e <FatFile::mkdir(FatFile*, char const*, bool)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    389a:	adds	r1, #1
    389c:	str	r1, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    389e:	ldrb	r3, [r1, #0]
    38a0:	cmp	r3, #47	; 0x2f
    38a2:	beq.n	389a <FatFile::mkdir(FatFile*, char const*, bool)+0x96>
    38a4:	ldr	r1, [r4, #8]
    38a6:	add	r0, sp, #44	; 0x2c
    38a8:	bl	34e0 <FatFile::openRoot(FatVolume*) [clone .part.38]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    38ac:	cmp	r0, #0
    38ae:	beq.n	382c <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    38b0:	add	r4, sp, #44	; 0x2c
    38b2:	ldr	r1, [sp, #4]
    38b4:	b.n	383c <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    38b6:	mov	r0, r6
    38b8:	bl	35e4 <FatFile::sync() [clone .part.42]>
    38bc:	b.n	3890 <FatFile::mkdir(FatFile*, char const*, bool)+0x8c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    38be:	add	r2, sp, #12
    38c0:	mov	r1, r4
    38c2:	mov	r0, r6
    38c4:	bl	36a0 <FatFile::mkdir(FatFile*, FatLfn_t*)>

fail:
  return false;
}
    38c8:	add	sp, #80	; 0x50
    38ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38ce:	nop

000038d0 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    38d0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38d4:	mov	r6, r0
    38d6:	sub	sp, #80	; 0x50
    38d8:	movs	r0, #0
    38da:	mov	r5, r1
  FatFile tmpDir;
  FatName_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    38dc:	ldrb	r1, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    38de:	str	r2, [sp, #4]
    38e0:	strb.w	r0, [sp, #44]	; 0x2c
    38e4:	strb.w	r0, [sp, #45]	; 0x2d
    38e8:	strb.w	r0, [sp, #46]	; 0x2e
  FatFile tmpDir;
  FatName_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    38ec:	cbnz	r1, 38f8 <FatFile::open(FatFile*, char const*, int)+0x28>
    38ee:	mov	r8, r3
    38f0:	ldrb	r3, [r5, #0]
    38f2:	tst.w	r3, #208	; 0xd0
    38f6:	bne.n	3900 <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    38f8:	movs	r0, #0
}
    38fa:	add	sp, #80	; 0x50
    38fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    3900:	ldrb	r3, [r2, #0]
    3902:	mov	r1, r2
    3904:	cmp	r3, #47	; 0x2f
    3906:	beq.n	395e <FatFile::open(FatFile*, char const*, int)+0x8e>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    3908:	movs	r7, #0
    390a:	b.n	3912 <FatFile::open(FatFile*, char const*, int)+0x42>
    390c:	ldr	r1, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    390e:	strb	r7, [r6, #0]
  m_flags = 0;
    3910:	strb	r7, [r6, #2]
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    3912:	add	r3, sp, #4
    3914:	add	r2, sp, #12
    3916:	mov	r0, r6
    3918:	bl	48fc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    391c:	add	r2, sp, #12
    391e:	mov	r1, r5
    3920:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    3922:	cmp	r0, #0
    3924:	beq.n	38f8 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    3926:	ldr	r4, [sp, #4]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    3928:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    392a:	ldrb	r4, [r4, #0]
    392c:	cbz	r4, 397c <FatFile::open(FatFile*, char const*, int)+0xac>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    392e:	bl	464c <FatFile::open(FatFile*, FatLfn_t*, int)>
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    3932:	mov	r5, r6
    3934:	add	r4, sp, #44	; 0x2c
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    3936:	cmp	r0, #0
    3938:	beq.n	38f8 <FatFile::open(FatFile*, char const*, int)+0x28>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    393a:	ldrb.w	lr, [r6]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    393e:	ldmia	r5!, {r0, r1, r2, r3}
    3940:	stmia	r4!, {r0, r1, r2, r3}
    3942:	ldmia	r5!, {r0, r1, r2, r3}
    3944:	ldr.w	ip, [r5]
    dirFile = &tmpDir;
    3948:	add	r5, sp, #44	; 0x2c
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    394a:	stmia	r4!, {r0, r1, r2, r3}
    394c:	str.w	ip, [r4]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    3950:	cmp.w	lr, #0
    3954:	beq.n	390c <FatFile::open(FatFile*, char const*, int)+0x3c>
    3956:	mov	r0, r6
    3958:	bl	35e4 <FatFile::sync() [clone .part.42]>
    395c:	b.n	390c <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    395e:	adds	r1, #1
    3960:	str	r1, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    3962:	ldrb	r3, [r1, #0]
    3964:	cmp	r3, #47	; 0x2f
    3966:	beq.n	395e <FatFile::open(FatFile*, char const*, int)+0x8e>
      path++;
    }
    if (*path == 0) {
    3968:	cbz	r3, 398e <FatFile::open(FatFile*, char const*, int)+0xbe>
    396a:	ldr	r1, [r5, #8]
    396c:	add	r0, sp, #44	; 0x2c
    396e:	bl	34e0 <FatFile::openRoot(FatVolume*) [clone .part.38]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    3972:	cmp	r0, #0
    3974:	beq.n	38f8 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    3976:	add	r5, sp, #44	; 0x2c
    3978:	ldr	r1, [sp, #4]
    397a:	b.n	3908 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    397c:	mov	r3, r8
    397e:	add	r2, sp, #12
    3980:	mov	r1, r5
    3982:	mov	r0, r6
    3984:	bl	464c <FatFile::open(FatFile*, FatLfn_t*, int)>

fail:
  return false;
}
    3988:	add	sp, #80	; 0x50
    398a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    398e:	ldr	r1, [r5, #8]
    3990:	mov	r0, r6
    3992:	bl	34e0 <FatFile::openRoot(FatVolume*) [clone .part.38]>
    3996:	b.n	38fa <FatFile::open(FatFile*, char const*, int)+0x2a>

00003998 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    3998:	cbz	r1, 39a2 <FatFile::open(FatVolume*, char const*, int)+0xa>
    399a:	addw	r1, r1, #1092	; 0x444
    399e:	b.w	38d0 <FatFile::open(FatFile*, char const*, int)>
}
    39a2:	mov	r0, r1
    39a4:	bx	lr
    39a6:	nop

000039a8 <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    39a8:	ldrb	r3, [r0, #0]
    39aa:	cbz	r3, 39b0 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
    39ac:	movs	r0, #0
    39ae:	bx	lr
    39b0:	b.w	34e0 <FatFile::openRoot(FatVolume*) [clone .part.38]>

000039b4 <FatFile::read(void*, unsigned int)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    39b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    39b8:	ldrb	r3, [r0, #2]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    39ba:	sub	sp, #12
    39bc:	mov	r5, r0
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    39be:	lsls	r7, r3, #31
    39c0:	bpl.w	3ae4 <FatFile::read(void*, unsigned int)+0x130>
    39c4:	mov	r7, r1
    39c6:	ldrb	r1, [r0, #0]
    39c8:	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    39ca:	lsls	r6, r1, #28
    39cc:	bmi.w	3af6 <FatFile::read(void*, unsigned int)+0x142>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    39d0:	lsls	r4, r1, #25
    39d2:	bpl.n	39e6 <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 =
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    39d4:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    39d6:	ldr	r3, [r0, #20]
    39d8:	ldrh	r2, [r2, #8]
    39da:	rsb	r3, r3, r2, lsl #5
    39de:	uxth	r3, r3
    39e0:	cmp	r9, r3
    39e2:	it	cs
    39e4:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    39e6:	cmp.w	r9, #0
    39ea:	beq.w	3b42 <FatFile::read(void*, unsigned int)+0x18e>
    39ee:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    if (isRootFixed()) {
    39f0:	lsls	r0, r1, #25
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    39f2:	mov	r6, r9
    39f4:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    39f8:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    39fc:	ldr	r2, [r5, #8]
    39fe:	ubfx	r4, r3, #0, #9
    if (isRootFixed()) {
    3a02:	bpl.n	3a86 <FatFile::read(void*, unsigned int)+0xd2>
      sector = m_vol->rootDirStart() +
               (m_curPosition >> m_vol->bytesPerSectorShift());
    3a04:	ldr	r1, [r2, #32]
    3a06:	add.w	r1, r1, r3, lsr #9
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    3a0a:	cmp	r4, #0
    3a0c:	bne.n	3ab8 <FatFile::read(void*, unsigned int)+0x104>
    3a0e:	cmp.w	r6, #512	; 0x200
    3a12:	bcc.n	3ab8 <FatFile::read(void*, unsigned int)+0x104>
    3a14:	ldr	r3, [r2, #44]	; 0x2c
    3a16:	cmp	r1, r3
    3a18:	beq.n	3ab8 <FatFile::read(void*, unsigned int)+0x104>
        goto fail;
      }
      uint8_t* src = pc + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    3a1a:	cmp.w	r6, #1024	; 0x400
    3a1e:	bcc.n	3b08 <FatFile::read(void*, unsigned int)+0x154>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    3a20:	ldrb	r0, [r5, #0]
      }
      uint8_t* src = pc + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3a22:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    3a26:	lsls	r0, r0, #25
    3a28:	bmi.n	3a36 <FatFile::read(void*, unsigned int)+0x82>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    3a2a:	ldrb	r0, [r2, #4]
    3a2c:	rsb	r0, r8, r0
    3a30:	cmp	fp, r0
    3a32:	it	cs
    3a34:	movcs	fp, r0
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    3a36:	cmp	r1, r3
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    3a38:	mov.w	r4, fp, lsl #9
    3a3c:	bhi.n	3a5a <FatFile::read(void*, unsigned int)+0xa6>
    3a3e:	add.w	r0, r1, fp
    3a42:	cmp	r3, r0
    3a44:	bcs.n	3a5a <FatFile::read(void*, unsigned int)+0xa6>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    3a46:	add.w	r0, r2, #36	; 0x24
    3a4a:	str	r1, [sp, #4]
    3a4c:	str	r2, [sp, #0]
    3a4e:	bl	1f10 <FsCache::sync()>
    3a52:	ldr	r2, [sp, #0]
    3a54:	ldr	r1, [sp, #4]
    3a56:	cmp	r0, #0
    3a58:	beq.n	3ae4 <FatFile::read(void*, unsigned int)+0x130>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    3a5a:	ldr	r0, [r2, #40]	; 0x28
    3a5c:	mov	r3, fp
    3a5e:	mov	r2, r7
    3a60:	ldr.w	lr, [r0]
    3a64:	ldr.w	fp, [lr, #20]
    3a68:	blx	fp
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    3a6a:	cmp	r0, #0
    3a6c:	beq.n	3ae4 <FatFile::read(void*, unsigned int)+0x130>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    3a6e:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    3a70:	subs	r6, r6, r4
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    3a72:	add	r7, r4
    m_curPosition += n;
    3a74:	add	r3, r4
    3a76:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    3a78:	beq.n	3b42 <FatFile::read(void*, unsigned int)+0x18e>
    3a7a:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    3a7c:	ubfx	r4, r3, #0, #9
    3a80:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    3a82:	lsls	r0, r1, #25
    3a84:	bmi.n	3a04 <FatFile::read(void*, unsigned int)+0x50>
  void cacheDirty() { m_cache.dirty(); }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    3a86:	ldrb.w	r8, [r2, #5]
    3a8a:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart() +
               (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    3a8e:	cmp	r4, #0
    3a90:	bne.n	3b04 <FatFile::read(void*, unsigned int)+0x150>
    3a92:	cmp.w	r8, #0
    3a96:	bne.n	3b04 <FatFile::read(void*, unsigned int)+0x150>
        // start of new cluster
        if (m_curPosition == 0) {
    3a98:	cmp	r3, #0
    3a9a:	bne.n	3b1c <FatFile::read(void*, unsigned int)+0x168>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    3a9c:	lsls	r0, r1, #24
    3a9e:	ite	mi
    3aa0:	ldrmi	r3, [r2, #32]
    3aa2:	ldrpl	r3, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    3aa4:	str	r3, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3aa6:	ldrb	r1, [r2, #6]
    3aa8:	subs	r3, #2
    3aaa:	ldr	r0, [r2, #20]
    3aac:	lsls	r3, r1
    3aae:	add.w	r1, r8, r0
    3ab2:	add	r1, r3
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    3ab4:	cmp	r4, #0
    3ab6:	beq.n	3a0e <FatFile::read(void*, unsigned int)+0x5a>
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    3ab8:	add.w	r0, r2, #36	; 0x24
    3abc:	movs	r2, #0
    3abe:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
      if (!pc) {
    3ac2:	cbz	r0, 3ae4 <FatFile::read(void*, unsigned int)+0x130>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
        sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    3ac4:	rsb	r3, r4, #512	; 0x200
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc + offset;
      memcpy(dst, src, n);
    3ac8:	adds	r1, r0, r4
    3aca:	mov	r0, r7
    3acc:	cmp	r3, r6
    3ace:	it	cs
    3ad0:	movcs	r3, r6
    3ad2:	mov	r2, r3
    3ad4:	mov	r4, r3
    3ad6:	bl	68c4 <memcpy>
    3ada:	b.n	3a6e <FatFile::read(void*, unsigned int)+0xba>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    3adc:	ldrb	r3, [r5, #0]
    3ade:	tst.w	r3, #208	; 0xd0
    3ae2:	bne.n	3b44 <FatFile::read(void*, unsigned int)+0x190>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    3ae4:	ldrb	r3, [r5, #1]
  return -1;
    3ae6:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    3aea:	orr.w	r3, r3, #2
    3aee:	strb	r3, [r5, #1]
  return -1;
}
    3af0:	add	sp, #12
    3af2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    3af6:	ldr	r3, [r0, #28]
    3af8:	ldr	r2, [r0, #20]
    3afa:	subs	r3, r3, r2
    3afc:	cmp	r9, r3
    3afe:	it	cs
    3b00:	movcs	r9, r3
    3b02:	b.n	39e6 <FatFile::read(void*, unsigned int)+0x32>
    3b04:	ldr	r3, [r5, #16]
    3b06:	b.n	3aa6 <FatFile::read(void*, unsigned int)+0xf2>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    3b08:	ldr	r0, [r2, #40]	; 0x28
    3b0a:	mov	r2, r7
    3b0c:	ldr	r3, [r0, #0]
    3b0e:	ldr	r3, [r3, #16]
    3b10:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    3b12:	cmp	r0, #0
    3b14:	beq.n	3ae4 <FatFile::read(void*, unsigned int)+0x130>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3b16:	mov.w	r4, #512	; 0x200
    3b1a:	b.n	3a6e <FatFile::read(void*, unsigned int)+0xba>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    3b1c:	lsls	r1, r1, #28
    3b1e:	bpl.n	3b2c <FatFile::read(void*, unsigned int)+0x178>
    3b20:	ldrb	r3, [r5, #2]
    3b22:	lsls	r3, r3, #25
    3b24:	bpl.n	3b2c <FatFile::read(void*, unsigned int)+0x178>
          m_curCluster++;
    3b26:	ldr	r3, [r5, #16]
    3b28:	adds	r3, #1
    3b2a:	b.n	3aa4 <FatFile::read(void*, unsigned int)+0xf0>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3b2c:	mov	r0, r2
    3b2e:	ldr	r1, [r5, #16]
    3b30:	mov	r2, sl
    3b32:	bl	3f50 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3b36:	cmp	r0, #0
    3b38:	blt.n	3ae4 <FatFile::read(void*, unsigned int)+0x130>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    3b3a:	beq.n	3adc <FatFile::read(void*, unsigned int)+0x128>
    3b3c:	ldr	r2, [r5, #8]
    3b3e:	ldr	r3, [r5, #16]
    3b40:	b.n	3aa6 <FatFile::read(void*, unsigned int)+0xf2>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3b42:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    3b44:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    3b48:	add	sp, #12
    3b4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b4e:	nop

00003b50 <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    3b50:	push	{r4, r5, r6, lr}
    3b52:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3b54:	movs	r2, #1
    3b56:	mov	r4, r0
  uint32_t saveCurPosition = m_curPosition;
    3b58:	ldr	r6, [r0, #20]
    3b5a:	add.w	r1, sp, #7
  uint32_t saveCurCluster = m_curCluster;
    3b5e:	ldr	r5, [r0, #16]
    3b60:	bl	39b4 <FatFile::read(void*, unsigned int)>
    3b64:	cmp	r0, #1
  int c = read();
  m_curPosition = saveCurPosition;
    3b66:	str	r6, [r4, #20]
    3b68:	ite	eq
    3b6a:	ldrbeq.w	r0, [sp, #7]
    3b6e:	movne.w	r0, #4294967295
  m_curCluster = saveCurCluster;
    3b72:	str	r5, [r4, #16]
  return c;
}
    3b74:	add	sp, #8
    3b76:	pop	{r4, r5, r6, pc}

00003b78 <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3b78:	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    3b7a:	push	{r4, r5, lr}
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3b7c:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    3b80:	sub	sp, #12
    3b82:	mov	r4, r0
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    3b84:	clz	r2, r5
    3b88:	lsrs	r2, r2, #5
    3b8a:	cmp	r2, r1
    3b8c:	bcs.n	3b9e <FatFile::readDirCache(bool)+0x26>
      }
      goto fail;
    }
    m_curPosition += FS_DIR_SIZE - 1;
  } else {
    m_curPosition += FS_DIR_SIZE;
    3b8e:	adds	r3, #32
    3b90:	str	r3, [r0, #20]
      CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  //----------------------------------------------------------------------------
  /** Cobstructor. */
  FsCache() { init(nullptr); }
  /** \return Cache buffer address. */
  uint8_t* cacheBuffer() { return m_buffer; }
    3b92:	ldr	r0, [r4, #8]
    3b94:	adds	r0, #52	; 0x34
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    3b96:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    3b9a:	add	sp, #12
    3b9c:	pop	{r4, r5, pc}
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    3b9e:	movs	r2, #1
    3ba0:	add.w	r1, sp, #7
    3ba4:	bl	39b4 <FatFile::read(void*, unsigned int)>
    3ba8:	sxtb	r0, r0
    if (n != 1) {
    3baa:	cmp	r0, #1
    3bac:	bne.n	3bb6 <FatFile::readDirCache(bool)+0x3e>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += FS_DIR_SIZE - 1;
    3bae:	ldr	r3, [r4, #20]
    3bb0:	adds	r3, #31
    3bb2:	str	r3, [r4, #20]
    3bb4:	b.n	3b92 <FatFile::readDirCache(bool)+0x1a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    3bb6:	movs	r0, #0
    3bb8:	b.n	3b9a <FatFile::readDirCache(bool)+0x22>
    3bba:	nop

00003bbc <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    3bbc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3bc0:	ldrb	r3, [r0, #0]
    3bc2:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3bc4:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    3bc6:	cbz	r3, 3bf6 <FatFile::seekSet(unsigned long)+0x3a>
    3bc8:	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3bca:	ldr	r1, [r0, #20]
    3bcc:	cmp	r1, r5
    3bce:	beq.n	3c2a <FatFile::seekSet(unsigned long)+0x6e>
    return true;
  }
  if (pos == 0) {
    3bd0:	cbnz	r5, 3be4 <FatFile::seekSet(unsigned long)+0x28>
    3bd2:	ldrb	r3, [r0, #2]
    // set position to start of file
    m_curCluster = 0;
    3bd4:	str	r5, [r0, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3bd6:	bic.w	r3, r3, #32
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    3bda:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;
    3bdc:	movs	r0, #1
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3bde:	strb	r3, [r4, #2]
  return true;
    3be0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    3be4:	lsls	r0, r3, #28
    3be6:	bmi.n	3bfe <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    3be8:	lsls	r2, r3, #25
    3bea:	bpl.n	3c04 <FatFile::seekSet(unsigned long)+0x48>
    3bec:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
    3bee:	ldrh	r3, [r3, #8]
    3bf0:	cmp.w	r5, r3, lsl #5
    3bf4:	bls.n	3c58 <FatFile::seekSet(unsigned long)+0x9c>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    3bf6:	str	r7, [r4, #16]
  return false;
    3bf8:	movs	r0, #0
    3bfa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    3bfe:	ldr	r2, [r4, #28]
    3c00:	cmp	r5, r2
    3c02:	bhi.n	3bf6 <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    3c04:	ldr.w	lr, [r4, #8]
    3c08:	subs	r6, r5, #1
    3c0a:	ldrb	r2, [r4, #2]
    3c0c:	ldrb.w	r0, [lr, #6]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    3c10:	tst.w	r2, #64	; 0x40
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    3c14:	add.w	r0, r0, #9
    3c18:	uxtb	r0, r0
    3c1a:	lsr.w	r6, r6, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    3c1e:	beq.n	3c30 <FatFile::seekSet(unsigned long)+0x74>
    m_curCluster = m_firstCluster + nNew;
    3c20:	ldr	r1, [r4, #32]
    goto done;
    3c22:	mov	r3, r2
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    3c24:	add	r6, r1
    3c26:	str	r6, [r4, #16]
    goto done;
    3c28:	b.n	3bd6 <FatFile::seekSet(unsigned long)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    3c2a:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    3c2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    3c30:	subs	r2, r1, #1
    3c32:	lsr.w	r0, r2, r0

  if (nNew < nCur || m_curPosition == 0) {
    3c36:	cmp	r6, r0
    3c38:	bcc.n	3c5c <FatFile::seekSet(unsigned long)+0xa0>
    3c3a:	cbz	r1, 3c5c <FatFile::seekSet(unsigned long)+0xa0>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    3c3c:	subs	r6, r6, r0
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3c3e:	add.w	r8, r4, #16
    3c42:	b.n	3c52 <FatFile::seekSet(unsigned long)+0x96>
    3c44:	ldr	r1, [r4, #16]
    3c46:	subs	r6, #1
    3c48:	ldr	r0, [r4, #8]
    3c4a:	bl	3f50 <FatPartition::fatGet(unsigned long, unsigned long*)>
    3c4e:	cmp	r0, #0
    3c50:	ble.n	3bf6 <FatFile::seekSet(unsigned long)+0x3a>
    3c52:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    3c54:	cmp	r6, #0
    3c56:	bne.n	3c44 <FatFile::seekSet(unsigned long)+0x88>
    3c58:	ldrb	r3, [r4, #2]
    3c5a:	b.n	3bd6 <FatFile::seekSet(unsigned long)+0x1a>
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());

  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    3c5c:	lsls	r3, r3, #24
    3c5e:	ite	mi
    3c60:	ldrmi.w	r3, [lr, #32]
    3c64:	ldrpl	r3, [r4, #32]
    3c66:	str	r3, [r4, #16]
    3c68:	b.n	3c3e <FatFile::seekSet(unsigned long)+0x82>
    3c6a:	nop

00003c6c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    3c6c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c70:	mov	r5, r1
    3c72:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    3c74:	movs	r1, #0
    3c76:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    3c78:	mov	r4, r0
    3c7a:	mov	r7, r3
    3c7c:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    3c80:	bl	972c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    3c84:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    3c86:	and.w	r3, r8, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    3c8a:	ldr	r1, [r5, #32]
    3c8c:	add.w	r2, r0, #52	; 0x34
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    3c90:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    3c92:	str	r1, [r4, #12]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    3c94:	add.w	r2, r2, r3, lsl #5
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
    3c98:	strh.w	r8, [r4, #4]
    3c9c:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFatFileOrSubdir(dir)) {
    3c9e:	lsls	r5, r1, #28
    3ca0:	bmi.n	3cc6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
    3ca2:	and.w	r1, r1, #55	; 0x37
    3ca6:	strb	r1, [r4, #0]
  if (isFatFile(dir)) {
    3ca8:	ldrb	r3, [r2, #11]
    3caa:	tst.w	r3, #24
    3cae:	bne.n	3cb6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x4a>
    m_attributes |= FILE_ATTR_FILE;
    3cb0:	orr.w	r1, r1, #8
    3cb4:	strb	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    3cb6:	and.w	r3, r7, #3
  }
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
  if (isFatFile(dir)) {
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    3cba:	strb	r6, [r4, #3]

  switch (oflag & O_ACCMODE) {
    3cbc:	cmp	r3, #1
    3cbe:	beq.n	3cd2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    3cc0:	cmp	r3, #2
    3cc2:	beq.n	3d22 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb6>
    3cc4:	cbz	r3, 3d18 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    3cc6:	movs	r3, #0
    3cc8:	strb	r3, [r4, #0]
  m_flags = 0;
  return false;
    3cca:	mov	r0, r3
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    3ccc:	strb	r3, [r4, #2]
  return false;
    3cce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    3cd2:	movs	r3, #2
    3cd4:	strb	r3, [r4, #2]
    3cd6:	ldrb	r1, [r4, #0]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    3cd8:	tst.w	r1, #17
    3cdc:	bne.n	3cc6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_attributes |= FS_ATTRIB_ARCHIVE;
    3cde:	orr.w	r5, r1, #32
    3ce2:	and.w	lr, r7, #1024	; 0x400
    3ce6:	sxtb	r1, r3
    3ce8:	strb	r5, [r4, #0]
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3cea:	and.w	r3, r7, #8
    3cee:	orrs	r3, r1
    3cf0:	uxtb	r3, r3
    3cf2:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
                 getLe16(dir->firstClusterLow);
    3cf4:	ldrh	r5, [r2, #20]
    3cf6:	ldrh	r1, [r2, #26]
    }
    m_attributes |= FS_ATTRIB_ARCHIVE;
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    3cf8:	ldr	r6, [r0, #44]	; 0x2c

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
                 getLe16(dir->firstClusterLow);
    3cfa:	orr.w	r1, r1, r5, lsl #16
    }
    m_attributes |= FS_ATTRIB_ARCHIVE;
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    3cfe:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
                 getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    3d00:	cmp.w	lr, #0
    3d04:	beq.n	3d28 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3d06:	cbnz	r1, 3d3e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3d08:	orn	r3, r3, #127	; 0x7f
    3d0c:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3d0e:	lsls	r3, r7, #17
    3d10:	bmi.n	3d30 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    3d12:	movs	r0, #1
    3d14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    3d18:	ands.w	lr, r7, #1024	; 0x400
    3d1c:	bne.n	3cc6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    3d1e:	movs	r1, #1
    3d20:	b.n	3cea <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x7e>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    3d22:	movs	r3, #3
    3d24:	strb	r3, [r4, #2]
      break;
    3d26:	b.n	3cd6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
      goto fail;
    }
    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    3d28:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    3d2a:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    3d2c:	str	r3, [r4, #28]
    3d2e:	b.n	3d0e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa2>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3d30:	ldr	r1, [r4, #28]
    3d32:	mov	r0, r4
    3d34:	bl	3bbc <FatFile::seekSet(unsigned long)>
    3d38:	cmp	r0, #0
    3d3a:	bne.n	3d12 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa6>
    3d3c:	b.n	3cc6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
                 getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3d3e:	bl	40b0 <FatPartition::freeChain(unsigned long)>
    3d42:	cmp	r0, #0
    3d44:	beq.n	3cc6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    3d46:	ldrb	r3, [r4, #2]
    3d48:	b.n	3d08 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9c>
    3d4a:	nop

00003d4c <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    3d4c:	ldrb	r3, [r0, #0]
    3d4e:	cbz	r3, 3d54 <FatFile::sync()+0x8>
    3d50:	b.w	35e4 <FatFile::sync() [clone .part.42]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    3d54:	movs	r0, #1
    3d56:	bx	lr

00003d58 <FatFile::write(void const*, unsigned int)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    3d58:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d5c:	ldrb	r3, [r0, #2]
    3d5e:	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    3d60:	lsls	r4, r3, #30
    3d62:	bpl.n	3e40 <FatFile::write(void const*, unsigned int)+0xe8>
    3d64:	mov	r8, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    3d66:	lsls	r2, r3, #28
    3d68:	mov	r7, r1
    3d6a:	bmi.n	3e36 <FatFile::write(void const*, unsigned int)+0xde>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    3d6c:	ldr	r2, [r5, #20]
    3d6e:	mvns	r3, r2
    3d70:	cmp	r8, r3
    3d72:	bhi.n	3e40 <FatFile::write(void const*, unsigned int)+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    3d74:	cmp.w	r8, #0
    3d78:	beq.w	3f1c <FatFile::write(void const*, unsigned int)+0x1c4>
    3d7c:	mov	r6, r8
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    3d7e:	mov.w	sl, #0
    m_sector = 0XFFFFFFFF;
    3d82:	mov.w	r9, #4294967295
    3d86:	b.n	3e02 <FatFile::write(void const*, unsigned int)+0xaa>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    3d88:	cmp.w	fp, #0
    3d8c:	bne.n	3e10 <FatFile::write(void const*, unsigned int)+0xb8>
      // start of new cluster
      if (m_curCluster != 0) {
    3d8e:	ldr	r1, [r5, #16]
    3d90:	cmp	r1, #0
    3d92:	beq.n	3e92 <FatFile::write(void const*, unsigned int)+0x13a>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    3d94:	ldrb	r3, [r5, #2]
    3d96:	lsls	r3, r3, #25
    3d98:	bpl.w	3ed2 <FatFile::write(void const*, unsigned int)+0x17a>
    3d9c:	ldr	r3, [r5, #28]
    3d9e:	cmp	r3, r2
    3da0:	bls.w	3ed2 <FatFile::write(void const*, unsigned int)+0x17a>
          m_curCluster++;
    3da4:	adds	r3, r1, #1
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3da6:	subs	r1, #1
      // start of new cluster
      if (m_curCluster != 0) {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
    3da8:	str	r3, [r5, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3daa:	ldrb.w	lr, [r0, #6]
    3dae:	ldr	r3, [r0, #20]
    3db0:	lsl.w	r1, r1, lr
    3db4:	add	r3, r4
    3db6:	add	r1, r3

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3db8:	cmp.w	r6, #512	; 0x200
    3dbc:	bcs.n	3e4e <FatFile::write(void const*, unsigned int)+0xf6>
    3dbe:	cmp.w	r6, #512	; 0x200
    3dc2:	mov	r4, r6
    3dc4:	it	cs
    3dc6:	movcs.w	r4, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    3dca:	ldr	r3, [r5, #28]
    3dcc:	cmp	r3, r2
    3dce:	bls.n	3dd6 <FatFile::write(void const*, unsigned int)+0x7e>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    3dd0:	ldrb	r3, [r5, #2]
    3dd2:	lsls	r3, r3, #26
    3dd4:	bpl.n	3e32 <FatFile::write(void const*, unsigned int)+0xda>
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    3dd6:	movs	r2, #5
    3dd8:	adds	r0, #36	; 0x24
    3dda:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->dataCachePrepare(sector, cacheOption);
      if (!pc) {
    3dde:	cbz	r0, 3e40 <FatFile::write(void const*, unsigned int)+0xe8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc + sectorOffset;
      memcpy(dst, src, n);
    3de0:	add	r0, fp
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3de2:	add	fp, r4
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc + sectorOffset;
      memcpy(dst, src, n);
    3de4:	mov	r2, r4
    3de6:	mov	r1, r7
    3de8:	bl	68c4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3dec:	cmp.w	fp, #512	; 0x200
    3df0:	beq.w	3f0c <FatFile::write(void const*, unsigned int)+0x1b4>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    3df4:	ldr	r2, [r5, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    3df6:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    3df8:	add	r7, r4
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    3dfa:	add	r2, r4
    3dfc:	str	r2, [r5, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    3dfe:	beq.w	3f1c <FatFile::write(void const*, unsigned int)+0x1c4>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    3e02:	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    3e04:	ubfx	fp, r2, #0, #9
  void cacheDirty() { m_cache.dirty(); }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    3e08:	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    3e0a:	ands.w	r4, r4, r2, lsr #9
    3e0e:	beq.n	3d88 <FatFile::write(void const*, unsigned int)+0x30>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3e10:	ldr	r3, [r5, #16]
    3e12:	ldrb.w	lr, [r0, #6]
    3e16:	subs	r1, r3, #2
    3e18:	ldr	r3, [r0, #20]
    3e1a:	lsl.w	lr, r1, lr
    3e1e:	adds	r1, r4, r3
    3e20:	add	r1, lr

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3e22:	cmp.w	fp, #0
    3e26:	beq.n	3db8 <FatFile::write(void const*, unsigned int)+0x60>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    3e28:	rsb	r4, fp, #512	; 0x200
    3e2c:	cmp	r4, r6
    3e2e:	it	cs
    3e30:	movcs	r4, r6
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3e32:	movs	r2, #1
    3e34:	b.n	3dd8 <FatFile::write(void const*, unsigned int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    3e36:	ldr	r1, [r0, #28]
    3e38:	bl	3bbc <FatFile::seekSet(unsigned long)>
    3e3c:	cmp	r0, #0
    3e3e:	bne.n	3d6c <FatFile::write(void const*, unsigned int)+0x14>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    3e40:	ldrb	r3, [r5, #1]
  return 0;
    3e42:	movs	r0, #0
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    3e44:	orr.w	r3, r3, #1
    3e48:	strb	r3, [r5, #1]
  return 0;
    3e4a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
    3e4e:	cmp.w	r6, #1024	; 0x400
    3e52:	bcc.n	3eb8 <FatFile::write(void const*, unsigned int)+0x160>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3e54:	ldrb.w	lr, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    3e58:	lsrs	r3, r6, #9
    3e5a:	ldr	r2, [r0, #44]	; 0x2c
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3e5c:	rsb	r4, r4, lr
    3e60:	cmp	r3, r4
    3e62:	it	cs
    3e64:	movcs	r3, r4
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    3e66:	cmp	r2, r1
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    3e68:	mov.w	r4, r3, lsl #9
    3e6c:	bcc.n	3e7e <FatFile::write(void const*, unsigned int)+0x126>
    3e6e:	add.w	lr, r3, r1
    3e72:	cmp	r2, lr
    3e74:	bcs.n	3e7e <FatFile::write(void const*, unsigned int)+0x126>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    3e76:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    3e7a:	str.w	r9, [r0, #44]	; 0x2c
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
    if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    3e7e:	ldr	r0, [r0, #40]	; 0x28
    3e80:	mov	r2, r7
    3e82:	ldr.w	lr, [r0]
    3e86:	ldr.w	fp, [lr, #36]	; 0x24
    3e8a:	blx	fp
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    3e8c:	cmp	r0, #0
    3e8e:	bne.n	3df4 <FatFile::write(void const*, unsigned int)+0x9c>
    3e90:	b.n	3e40 <FatFile::write(void const*, unsigned int)+0xe8>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    3e92:	ldr	r1, [r5, #32]
    3e94:	cbz	r1, 3ef0 <FatFile::write(void const*, unsigned int)+0x198>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    3e96:	str	r1, [r5, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3e98:	subs	r1, #2
    3e9a:	ldrb	r2, [r0, #6]
    3e9c:	ldr	r3, [r0, #20]

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3e9e:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3ea2:	lsl.w	r1, r1, r2
    3ea6:	add	r1, r3

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3ea8:	bcs.n	3e4e <FatFile::write(void const*, unsigned int)+0xf6>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    3eaa:	rsb	r4, fp, #512	; 0x200
    3eae:	ldr	r2, [r5, #20]
    3eb0:	cmp	r4, r6
    3eb2:	it	cs
    3eb4:	movcs	r4, r6
    3eb6:	b.n	3dca <FatFile::write(void const*, unsigned int)+0x72>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    3eb8:	ldr	r3, [r0, #44]	; 0x2c
    3eba:	cmp	r3, r1
    3ebc:	beq.n	3f02 <FatFile::write(void const*, unsigned int)+0x1aa>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    3ebe:	ldr	r0, [r0, #40]	; 0x28
    3ec0:	mov	r2, r7
    3ec2:	ldr	r3, [r0, #0]
    3ec4:	ldr	r3, [r3, #32]
    3ec6:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    3ec8:	cmp	r0, #0
    3eca:	beq.n	3e40 <FatFile::write(void const*, unsigned int)+0xe8>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    3ecc:	mov.w	r4, #512	; 0x200
    3ed0:	b.n	3df4 <FatFile::write(void const*, unsigned int)+0x9c>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3ed2:	add.w	r2, r5, #16
    3ed6:	bl	3f50 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3eda:	cmp	r0, #0
    3edc:	blt.n	3e40 <FatFile::write(void const*, unsigned int)+0xe8>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    3ede:	bne.n	3eea <FatFile::write(void const*, unsigned int)+0x192>
          // add cluster if at end of chain
          if (!addCluster()) {
    3ee0:	mov	r0, r5
    3ee2:	bl	3514 <FatFile::addCluster()>
    3ee6:	cmp	r0, #0
    3ee8:	beq.n	3e40 <FatFile::write(void const*, unsigned int)+0xe8>
    3eea:	ldr	r1, [r5, #16]
    3eec:	ldr	r0, [r5, #8]
    3eee:	b.n	3e98 <FatFile::write(void const*, unsigned int)+0x140>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    3ef0:	mov	r0, r5
    3ef2:	bl	3514 <FatFile::addCluster()>
    3ef6:	cmp	r0, #0
    3ef8:	beq.n	3e40 <FatFile::write(void const*, unsigned int)+0xe8>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    3efa:	ldr	r1, [r5, #16]
    3efc:	ldr	r0, [r5, #8]
    3efe:	str	r1, [r5, #32]
    3f00:	b.n	3e98 <FatFile::write(void const*, unsigned int)+0x140>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    3f02:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    3f06:	str.w	r9, [r0, #44]	; 0x2c
    3f0a:	b.n	3ebe <FatFile::write(void const*, unsigned int)+0x166>
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
  }
  bool cacheSyncData() { return m_cache.sync(); }
    3f0c:	ldr	r0, [r5, #8]
    3f0e:	adds	r0, #36	; 0x24
    3f10:	bl	1f10 <FsCache::sync()>
      }
      uint8_t* dst = pc + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    3f14:	cmp	r0, #0
    3f16:	bne.w	3df4 <FatFile::write(void const*, unsigned int)+0x9c>
    3f1a:	b.n	3e40 <FatFile::write(void const*, unsigned int)+0xe8>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    3f1c:	ldr	r3, [r5, #28]
    3f1e:	cmp	r3, r2
    3f20:	bcc.n	3f3c <FatFile::write(void const*, unsigned int)+0x1e4>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    3f22:	ldr	r3, [pc, #40]	; (3f4c <FatFile::write(void const*, unsigned int)+0x1f4>)
    3f24:	ldr	r3, [r3, #0]
    3f26:	cbz	r3, 3f36 <FatFile::write(void const*, unsigned int)+0x1de>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3f28:	ldrb	r3, [r5, #2]
    3f2a:	mov	r0, r8
    3f2c:	orn	r3, r3, #127	; 0x7f
    3f30:	strb	r3, [r5, #2]
    3f32:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f36:	mov	r0, r8
    3f38:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3f3c:	ldrb	r3, [r5, #2]
    3f3e:	mov	r0, r8
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    3f40:	str	r2, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3f42:	orn	r3, r3, #127	; 0x7f
    3f46:	strb	r3, [r5, #2]
    3f48:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f4c:	.word	0x20017398

00003f50 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    3f50:	cmp	r1, #1
    3f52:	bls.n	3fbc <FatPartition::fatGet(unsigned long, unsigned long*)+0x6c>
    3f54:	ldr	r3, [r0, #28]
    3f56:	cmp	r1, r3
    3f58:	bhi.n	3fbc <FatPartition::fatGet(unsigned long, unsigned long*)+0x6c>
fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    3f5a:	push	{r4, r5, r6, lr}
    3f5c:	ldrb	r3, [r0, #7]
    3f5e:	mov	r6, r2
    3f60:	mov	r5, r0
    3f62:	mov	r4, r1
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    3f64:	cmp	r3, #32
    3f66:	beq.n	3f9e <FatPartition::fatGet(unsigned long, unsigned long*)+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    next = getLe32(pc + offset);
  } else if (fatType() == 16) {
    3f68:	cmp	r3, #16
    3f6a:	bne.n	3f98 <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
  FsCache* dataCache() { return &m_cache; }
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
    3f6c:	ldr	r3, [r0, #24]
    3f6e:	ubfx	r1, r1, #8, #8
    3f72:	movs	r2, #2
    3f74:	add.w	r0, r0, #564	; 0x234
    3f78:	add	r1, r3
    3f7a:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    3f7e:	cbz	r0, 3f98 <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//------------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    3f80:	lsls	r1, r4, #1
    3f82:	and.w	r1, r1, #510	; 0x1fe
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 1) & m_sectorMask;
    next = getLe16(pc + offset);
    3f86:	ldrh	r3, [r0, r1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    3f88:	ldr	r2, [r5, #28]
    3f8a:	cmp	r3, r2
    3f8c:	bhi.n	3f94 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
    return 0;
  }
  *value = next;
    3f8e:	str	r3, [r6, #0]
  return 1;
    3f90:	movs	r0, #1
    3f92:	pop	{r4, r5, r6, pc}
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    3f94:	movs	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    3f96:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    3f98:	mov.w	r0, #4294967295
    3f9c:	pop	{r4, r5, r6, pc}
    3f9e:	ldr	r1, [r0, #24]
    3fa0:	movs	r2, #2
    3fa2:	add.w	r0, r0, #564	; 0x234
    3fa6:	add.w	r1, r1, r4, lsr #7
    3faa:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    3fae:	cmp	r0, #0
    3fb0:	beq.n	3f98 <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    3fb2:	lsls	r1, r4, #2
    3fb4:	and.w	r1, r1, #508	; 0x1fc
    3fb8:	ldr	r3, [r0, r1]
    3fba:	b.n	3f88 <FatPartition::fatGet(unsigned long, unsigned long*)+0x38>
  }
  *value = next;
  return 1;

fail:
  return -1;
    3fbc:	mov.w	r0, #4294967295
}
    3fc0:	bx	lr
    3fc2:	nop

00003fc4 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    3fc4:	cmp	r1, #1
    3fc6:	bls.n	4006 <FatPartition::fatPut(unsigned long, unsigned long)+0x42>
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    3fc8:	push	{r3, r4, r5, lr}
  uint32_t sector;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    3fca:	ldr	r3, [r0, #28]
    3fcc:	cmp	r1, r3
    3fce:	bhi.n	3fde <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    3fd0:	ldrb	r3, [r0, #7]
    3fd2:	mov	r5, r2
    3fd4:	mov	r4, r1
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    3fd6:	cmp	r3, #32
    3fd8:	beq.n	400a <FatPartition::fatPut(unsigned long, unsigned long)+0x46>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    setLe32(pc + offset, value);
    return true;
  }

  if (fatType() == 16) {
    3fda:	cmp	r3, #16
    3fdc:	beq.n	3fe2 <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    3fde:	movs	r0, #0
    3fe0:	pop	{r3, r4, r5, pc}
    3fe2:	ldr	r3, [r0, #24]
    3fe4:	ubfx	r1, r1, #8, #8
    3fe8:	add.w	r0, r0, #564	; 0x234
    3fec:	movs	r2, #3
    3fee:	add	r1, r3
    3ff0:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    3ff4:	mov	r3, r0
    3ff6:	cmp	r0, #0
    3ff8:	beq.n	3fde <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    3ffa:	lsls	r1, r4, #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 1) & m_sectorMask;
    setLe16(pc + offset, value);
    return true;
    3ffc:	movs	r0, #1
    3ffe:	and.w	r1, r1, #510	; 0x1fe
    4002:	strh	r5, [r3, r1]
    goto fail;
  }

fail:
  return false;
}
    4004:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    4006:	movs	r0, #0
}
    4008:	bx	lr
    400a:	ldr	r1, [r0, #24]
    400c:	movs	r2, #3
    400e:	add.w	r0, r0, #564	; 0x234
    4012:	add.w	r1, r1, r4, lsr #7
    4016:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    401a:	mov	r3, r0
    401c:	cmp	r0, #0
    401e:	beq.n	3fde <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4020:	lsls	r1, r4, #2
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    setLe32(pc + offset, value);
    return true;
    4022:	movs	r0, #1
    4024:	and.w	r1, r1, #508	; 0x1fc
    4028:	str	r5, [r3, r1]
    402a:	pop	{r3, r4, r5, pc}

0000402c <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
#include <string.h>
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    402c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    4030:	ldr	r4, [r0, #12]
#include <string.h>
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    4032:	sub	sp, #8
    4034:	mov	r5, r0
    4036:	mov	r7, r1
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    4038:	cmp	r4, r1
#include <string.h>
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    403a:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    403c:	bcs.n	40aa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7e>
    403e:	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    4040:	movs	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    4042:	adds	r4, #1
    4044:	ldr	r3, [r5, #28]
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    4046:	add	r2, sp, #4
    4048:	mov	r0, r5
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    404a:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    404c:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    404e:	bls.n	4062 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x36>
      if (setStart) {
    4050:	cbnz	r6, 40a0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    4052:	ldr	r4, [r5, #12]
      setStart = true;
    4054:	movs	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    4056:	add	r2, sp, #4
    4058:	mov	r0, r5
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    405a:	adds	r4, #1
    if (find > m_lastCluster) {
    405c:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    405e:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    4060:	bhi.n	4050 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    4062:	cmp	r7, r4
    4064:	beq.n	40a0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    4066:	bl	3f50 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    406a:	cmp	r0, #0
    406c:	blt.n	40a0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    406e:	beq.n	4042 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    4070:	ldr	r3, [sp, #4]
    4072:	cmp	r3, #0
    4074:	bne.n	4042 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
      break;
    }
  }
  if (setStart) {
    4076:	cbz	r6, 407a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4e>
    m_allocSearchStart = find;
    4078:	str	r4, [r5, #12]
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    407a:	mvn.w	r2, #4026531840	; 0xf0000000
    407e:	mov	r1, r4
    4080:	mov	r0, r5
    4082:	bl	3fc4 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    4086:	mov	r6, r0
    4088:	cbz	r0, 40a0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    408a:	cbnz	r7, 4092 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    408c:	str.w	r4, [r8]
  return true;
    4090:	b.n	40a2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    4092:	mov	r1, r7
    4094:	mov	r0, r5
    4096:	mov	r2, r4
    4098:	bl	3fc4 <FatPartition::fatPut(unsigned long, unsigned long)>
    409c:	cmp	r0, #0
    409e:	bne.n	408c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    40a0:	movs	r6, #0
}
    40a2:	mov	r0, r6
    40a4:	add	sp, #8
    40a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
  } else {
    find = m_allocSearchStart;
    setStart = true;
    40aa:	movs	r6, #1
    40ac:	b.n	4042 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    40ae:	nop

000040b0 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    40b0:	push	{r4, r5, r6, lr}
    40b2:	mov	r5, r0
    40b4:	sub	sp, #8
    40b6:	mov	r4, r1
    40b8:	b.n	40ce <FatPartition::freeChain(unsigned long)+0x1e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    40ba:	bl	3fc4 <FatPartition::fatPut(unsigned long, unsigned long)>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    40be:	subs	r2, r4, #1
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    40c0:	cbz	r0, 40e4 <FatPartition::freeChain(unsigned long)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    40c2:	ldr	r3, [r5, #12]
    40c4:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    }
    cluster = next;
    40c6:	ldr	r4, [sp, #4]
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    40c8:	it	cc
    40ca:	strcc	r2, [r5, #12]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    40cc:	cbz	r6, 40e6 <FatPartition::freeChain(unsigned long)+0x36>
    fg = fatGet(cluster, &next);
    40ce:	add	r2, sp, #4
    40d0:	mov	r1, r4
    40d2:	mov	r0, r5
    40d4:	bl	3f50 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    40d8:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    40da:	mov	r1, r4
    40dc:	mov.w	r2, #0
    40e0:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    40e2:	bge.n	40ba <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

fail:
  return false;
    40e4:	movs	r0, #0
}
    40e6:	add	sp, #8
    40e8:	pop	{r4, r5, r6, pc}
    40ea:	nop

000040ec <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    40ec:	push	{r3, r4, r5, r6, r7, lr}
    40ee:	mov	r4, r0
    40f0:	mov.w	r6, #4294967295
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    40f4:	movs	r0, #0
  m_allocSearchStart = 1;
    40f6:	mov.w	lr, #1
}
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
  uint32_t countOfClusters;
  uint32_t totalSectors;
  m_blockDev = dev;
    40fa:	str	r1, [r4, #0]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(FsBlockDevice* blockDev) {
    m_blockDev = blockDev;
    40fc:	str	r1, [r4, #40]	; 0x28
    40fe:	str.w	r1, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    4102:	str.w	lr, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    4106:	strb	r0, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4108:	strb.w	r0, [r4, #36]	; 0x24
    410c:	strb.w	r0, [r4, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
    4110:	str	r6, [r4, #44]	; 0x2c
    4112:	str.w	r6, [r4, #572]	; 0x23c
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    4116:	cbz	r2, 4152 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x66>
    if (part > 4) {
    4118:	cmp	r2, #4
    411a:	mov	r7, r2
    411c:	bls.n	4122 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    411e:	movs	r0, #0
    4120:	pop	{r3, r4, r5, r6, r7, pc}
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    4122:	add.w	r6, r4, #36	; 0x24
    4126:	mov	r2, r0
    4128:	mov	r1, r0
    412a:	mov	r0, r6
    412c:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>(
        dataCachePrepare(0, FsCache::CACHE_FOR_READ));
    if (!mbr) {
    4130:	cmp	r0, #0
    4132:	beq.n	411e <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    MbrPart_t* mp = mbr->part + part - 1;
    4134:	mvn.w	r3, #4026531840	; 0xf0000000
    4138:	add.w	r0, r0, #446	; 0x1be
    413c:	add	r3, r7
    413e:	lsls	r3, r3, #4
    4140:	adds	r2, r0, r3
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    4142:	ldrb	r1, [r2, #4]
    4144:	cmp	r1, #0
    4146:	beq.n	411e <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x32>
    4148:	ldrb	r3, [r0, r3]
    414a:	lsls	r3, r3, #25
    414c:	bne.n	411e <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x32>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    414e:	ldr	r5, [r2, #8]
    4150:	b.n	4158 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x6c>
    4152:	mov	r5, r3
    4154:	add.w	r6, r4, #36	; 0x24
    4158:	mov	r0, r6
    415a:	movs	r2, #0
    415c:	mov	r1, r5
    415e:	bl	1eb0 <FsCache::prepare(unsigned long, unsigned char)>
    }
    volStart = getLe32(mp->relativeSectors);
  }
  pbs = reinterpret_cast<pbs_t*>(
      dataCachePrepare(volStart, FsCache::CACHE_FOR_READ));
  if (!pbs) {
    4162:	cmp	r0, #0
    4164:	beq.n	411e <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    4166:	ldrb	r3, [r0, #16]
    4168:	cmp	r3, #2
    416a:	bne.n	411e <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x32>
    416c:	ldrh.w	r3, [r0, #11]
    4170:	cmp.w	r3, #512	; 0x200
    4174:	bne.n	411e <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    4176:	ldrb	r6, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    4178:	movs	r3, #0
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    417a:	subs	r2, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    417c:	cmp	r6, #1
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    417e:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    4180:	strb	r3, [r4, #6]
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    4182:	strb	r2, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4184:	beq.n	41a6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xba>
    4186:	movs	r3, #1
    4188:	mov	r1, r3
    418a:	b.n	418e <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xa2>
    418c:	mov	r3, r2
    418e:	lsls	r1, r1, #1
    4190:	adds	r2, r3, #1
    4192:	uxtb	r1, r1
    4194:	uxtb	r2, r2
    4196:	cmp	r6, r1
    4198:	beq.n	41a4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb8>
    if (tmp == 0) {
    419a:	cmp	r2, #9
    419c:	bne.n	418c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xa0>
    419e:	strb	r3, [r4, #6]
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    41a0:	movs	r0, #0
    41a2:	pop	{r3, r4, r5, r6, r7, pc}
    41a4:	strb	r3, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    41a6:	ldrh	r7, [r0, #22]
    41a8:	str	r7, [r4, #16]
  if (m_sectorsPerFat == 0) {
    41aa:	cbnz	r7, 41b0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xc4>
    41ac:	ldr	r7, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    41ae:	str	r7, [r4, #16]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//------------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    41b0:	ldrh.w	r6, [r0, #17]
  }
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    41b4:	ldrh	r2, [r0, #14]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector =
      m_rootDirStart +
    41b6:	lsls	r1, r6, #5
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    41b8:	strh	r6, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    41ba:	add	r2, r5

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector =
      m_rootDirStart +
    41bc:	addw	r1, r1, #511	; 0x1ff

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    41c0:	add.w	r6, r2, r7, lsl #1
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    41c4:	str	r2, [r4, #24]
      m_rootDirStart +
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
       m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    41c6:	ldrh.w	r2, [r0, #19]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector =
      m_rootDirStart +
    41ca:	add.w	r1, r6, r1, lsr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    41ce:	str	r6, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector =
      m_rootDirStart +
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
       m_bytesPerSector);
    41d0:	str	r1, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    41d2:	cbnz	r2, 41d6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xea>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    41d4:	ldr	r2, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
    41d6:	subs	r5, r5, r1
  m_lastCluster = countOfClusters + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (countOfClusters < 4085) {
    41d8:	movw	r1, #4084	; 0xff4
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
    41dc:	add	r2, r5

  // divide by cluster size to get cluster count
  countOfClusters >>= m_sectorsPerClusterShift;
    41de:	lsr.w	r3, r2, r3
  m_lastCluster = countOfClusters + 1;
    41e2:	adds	r2, r3, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (countOfClusters < 4085) {
    41e4:	cmp	r3, r1
  // total data sectors
  countOfClusters = totalSectors - (m_dataStartSector - volStart);

  // divide by cluster size to get cluster count
  countOfClusters >>= m_sectorsPerClusterShift;
  m_lastCluster = countOfClusters + 1;
    41e6:	str	r2, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (countOfClusters < 4085) {
    41e8:	bls.n	4200 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x114>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (countOfClusters < 65525) {
    41ea:	movw	r2, #65524	; 0xfff4
    41ee:	cmp	r3, r2
    41f0:	bhi.n	4208 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x11c>
    m_fatType = 16;
    41f2:	movs	r3, #16
    41f4:	strb	r3, [r4, #7]
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
    41f6:	str	r7, [r4, #48]	; 0x30
  }
  m_cache.setMirrorOffset(m_sectorsPerFat);
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;
    41f8:	movs	r0, #1
    41fa:	str.w	r7, [r4, #576]	; 0x240
    41fe:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (countOfClusters < 4085) {
    m_fatType = 12;
    4200:	movs	r3, #12
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    4202:	movs	r0, #0

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (countOfClusters < 4085) {
    m_fatType = 12;
    4204:	strb	r3, [r4, #7]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    4206:	pop	{r3, r4, r5, r6, r7, pc}
    4208:	ldr	r2, [r0, #44]	; 0x2c
    }
  } else if (countOfClusters < 65525) {
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    420a:	movs	r3, #32
      goto fail;
    }
  } else if (countOfClusters < 65525) {
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    420c:	str	r2, [r4, #32]
    m_fatType = 32;
    420e:	strb	r3, [r4, #7]
    4210:	b.n	41f6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x10a>
    4212:	nop

00004214 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char* path) {
    4214:	push	{r4, r5, r6, lr}
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    4216:	movs	r5, #0
    4218:	sub	sp, #40	; 0x28
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() { return m_cwv; }
  FatFile* vwd() { return &m_vwd; }
    421a:	addw	r4, r0, #1092	; 0x444
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    421e:	mov	r2, r1
    4220:	mov	r3, r5
    4222:	add	r0, sp, #4
    4224:	mov	r1, r4
    4226:	strb.w	r5, [sp, #4]
    422a:	strb.w	r5, [sp, #5]
    422e:	strb.w	r5, [sp, #6]
    4232:	bl	38d0 <FatFile::open(FatFile*, char const*, int)>
    4236:	mov	r6, r0
    4238:	cbz	r0, 4252 <FatVolume::chdir(char const*)+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    423a:	ldrb.w	r3, [sp, #4]
    423e:	ands.w	r3, r3, #208	; 0xd0
    4242:	beq.n	4258 <FatVolume::chdir(char const*)+0x44>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    4244:	add	r5, sp, #4
    4246:	ldmia	r5!, {r0, r1, r2, r3}
    4248:	stmia	r4!, {r0, r1, r2, r3}
    424a:	ldmia	r5!, {r0, r1, r2, r3}
    424c:	ldr	r5, [r5, #0]
    424e:	stmia	r4!, {r0, r1, r2, r3}
    4250:	str	r5, [r4, #0]
  return true;

fail:
  return false;
}
    4252:	mov	r0, r6
    4254:	add	sp, #40	; 0x28
    4256:	pop	{r4, r5, r6, pc}
  }
  m_vwd = dir;
  return true;

fail:
  return false;
    4258:	mov	r6, r3
}
    425a:	mov	r0, r6
    425c:	add	sp, #40	; 0x28
    425e:	pop	{r4, r5, r6, pc}

00004260 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    4260:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    4264:	mov	r5, r0
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    4266:	sub	sp, #44	; 0x2c
    4268:	mov	fp, r2
    426a:	mov	r6, r0
    426c:	mov	sl, r1
    426e:	mov	r7, r3
  FatFile dir = *this;
    4270:	add	r4, sp, #4
    4272:	ldmia	r5!, {r0, r1, r2, r3}
    4274:	stmia	r4!, {r0, r1, r2, r3}
    4276:	ldmia	r5!, {r0, r1, r2, r3}
    4278:	ldr.w	lr, [r5]
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
    427c:	ldr.w	r5, [fp]
    4280:	stmia	r4!, {r0, r1, r2, r3}
    4282:	str.w	r5, [fp, #4]
    4286:	str.w	lr, [r4]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    428a:	cmp	r7, #0
    428c:	beq.n	4312 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb2>
    428e:	mov	r9, r7
    4290:	mov.w	r8, #1
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    4294:	rsb	r1, r8, sl
    4298:	add	r0, sp, #4
    429a:	uxth	r1, r1
    429c:	lsls	r1, r1, #5
    429e:	bl	3bbc <FatFile::seekSet(unsigned long)>
    42a2:	cbz	r0, 42f8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x98>
    42a4:	movs	r1, #0
    42a6:	add	r0, sp, #4
    42a8:	bl	3b78 <FatFile::readDirCache(bool)>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    if (!ldir) {
    42ac:	mov	r7, r0
    42ae:	cbz	r0, 42f8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x98>
    42b0:	movs	r4, #0
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
    42b2:	uxtb	r2, r4
    42b4:	mov	r1, r7
    42b6:	mov	r0, r6
    42b8:	bl	34b4 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    42bc:	ldr.w	r5, [fp, #4]
      if (fname->atEnd()) {
    42c0:	ldr.w	r3, [fp, #8]
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
        return false;
      }
#else   // USE_UTF8_LONG_NAMES
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    42c4:	uxtb	r2, r0
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
    42c6:	adds	r1, r5, #1
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
    42c8:	cmp	r5, r3
static bool isLower(char c) { return 'a' <= c && c <= 'z'; }
//------------------------------------------------------------------------------
static bool isUpper(char c) { return 'A' <= c && c <= 'Z'; }
//------------------------------------------------------------------------------
// A bit smaller than toupper in AVR 328.
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    42ca:	sub.w	lr, r2, #97	; 0x61
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
    42ce:	beq.n	4316 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb6>
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
        return false;
      }
#else   // USE_UTF8_LONG_NAMES
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    42d0:	cmp	r0, #127	; 0x7f
    42d2:	bhi.n	42f8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x98>
static bool isLower(char c) { return 'a' <= c && c <= 'z'; }
//------------------------------------------------------------------------------
static bool isUpper(char c) { return 'A' <= c && c <= 'Z'; }
//------------------------------------------------------------------------------
// A bit smaller than toupper in AVR 328.
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    42d4:	sub.w	r3, r2, #32
    42d8:	cmp.w	lr, #25
    42dc:	str.w	r1, [fp, #4]
    42e0:	it	ls
    42e2:	uxtbls	r2, r3
    42e4:	ldrb	r3, [r5, #0]
    42e6:	sub.w	r1, r3, #97	; 0x61
    42ea:	sub.w	r0, r3, #32
    42ee:	cmp	r1, #25
    42f0:	it	ls
    42f2:	uxtbls	r3, r0
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
        return false;
      }
#else   // USE_UTF8_LONG_NAMES
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    42f4:	cmp	r3, r2
    42f6:	beq.n	4300 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa0>
        return false;
    42f8:	movs	r0, #0
  }
  return true;

fail:
  return false;
}
    42fa:	add	sp, #44	; 0x2c
    42fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4300:	adds	r4, #1
      goto fail;
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
    4302:	cmp	r4, #13
    4304:	bne.n	42b2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x52>
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
  FatFile dir = *this;
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    4306:	add.w	r8, r8, #1
    430a:	uxtb.w	r8, r8
    430e:	cmp	r9, r8
    4310:	bcs.n	4294 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x34>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    4312:	movs	r0, #1
    4314:	b.n	42fa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9a>
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
    4316:	clz	r0, r0
    431a:	lsrs	r0, r0, #5
  }
  return true;

fail:
  return false;
}
    431c:	add	sp, #44	; 0x2c
    431e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4322:	nop

00004324 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    4324:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    4328:	mov	r7, r0

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    432a:	sub	sp, #44	; 0x2c
    432c:	mov	r4, r2
    432e:	mov	r8, r1
    4330:	mov	r6, r3
  FatFile dir = *this;
    4332:	add.w	lr, sp, #4
    4336:	add.w	r5, r2, #17
  DirFat_t* cacheDirEntry(uint8_t action);
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    433a:	mov.w	fp, #0
    433e:	ldmia	r7!, {r0, r1, r2, r3}
    4340:	stmia.w	lr!, {r0, r1, r2, r3}
    4344:	ldmia	r7!, {r0, r1, r2, r3}
    4346:	ldr.w	ip, [r7]
    434a:	add.w	r7, r4, #28
    434e:	stmia.w	lr!, {r0, r1, r2, r3}
    4352:	str.w	ip, [lr]
    4356:	mov.w	r3, fp, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    435a:	ldrb.w	r2, [r5, #1]!
    435e:	orr.w	fp, r3, fp, lsr #1
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    4362:	cmp	r5, r7
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    4364:	uxtab	fp, r2, fp
    4368:	uxtb.w	fp, fp
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    436c:	bne.n	4356 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x32>
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
    436e:	ldr	r3, [r4, #0]
    4370:	str	r3, [r4, #4]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    4372:	cmp	r6, #0
    4374:	beq.n	4414 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf0>
    4376:	mov.w	sl, #0
    437a:	movs	r5, #1
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    437c:	orr.w	r9, r6, #64	; 0x40
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    4380:	mov	r7, sl
    4382:	rsb	r1, r5, r8
    4386:	add	r0, sp, #4
    4388:	uxth	r1, r1
    438a:	lsls	r1, r1, #5
    438c:	bl	3bbc <FatFile::seekSet(unsigned long)>
    4390:	cmp	r0, #0
    4392:	beq.n	4438 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    4394:	movs	r1, #0
    4396:	add	r0, sp, #4
    4398:	bl	3b78 <FatFile::readDirCache(bool)>
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    if (!ldir) {
    439c:	cmp	r0, #0
    439e:	beq.n	4438 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    43a0:	ldr.w	ip, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    43a4:	cmp	r6, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    43a6:	mov.w	r2, #15
    43aa:	add.w	r1, r0, #4
    }
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    43ae:	ldrb.w	r3, [ip, #36]	; 0x24
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    43b2:	ite	ne
    43b4:	movne	lr, r5
    43b6:	moveq	lr, r9
    43b8:	orr.w	r3, r3, #1
    43bc:	strb.w	r3, [ip, #36]	; 0x24
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    43c0:	movs	r3, #0
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    43c2:	strb	r7, [r0, #12]
    ldir->checksum = checksum;
    43c4:	strb.w	fp, [r0, #13]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    43c8:	strb.w	lr, [r0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    43cc:	strb	r2, [r0, #11]
    43ce:	ldr.w	lr, [r4, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    43d2:	strh	r7, [r0, #26]
    43d4:	b.n	43ee <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xca>
 * \param[in] c The 16-bit character.
 */
static void putLfnChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    setLe16(ldir->unicode1 + 2 * i, c);
  } else if (i < 11) {
    43d6:	cmp	r3, #10
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    43d8:	add.w	r3, r3, #1
    43dc:	add.w	r1, r1, #2
    43e0:	uxtb	r3, r3
    43e2:	ite	ls
    43e4:	strhls.w	r2, [r1, #-2]
    43e8:	strhhi	r2, [r1, #0]
    43ea:	cmp	r3, #13
    43ec:	beq.n	440c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    43ee:	ldr	r2, [r4, #4]
      uint16_t cp;
      if (fname->atEnd()) {
    43f0:	cmp	r2, lr
    43f2:	beq.n	441c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    43f4:	adds	r0, r2, #1
    43f6:	str	r0, [r4, #4]
    43f8:	ldrb	r2, [r2, #0]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c The 16-bit character.
 */
static void putLfnChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    43fa:	cmp	r3, #4
    43fc:	bhi.n	43d6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb2>
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    43fe:	adds	r3, #1
    4400:	strh.w	r2, [r1, #-3]
    4404:	adds	r1, #2
    4406:	uxtb	r3, r3
    4408:	cmp	r3, #13
    440a:	bne.n	43ee <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xca>
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    440c:	adds	r5, #1
    440e:	uxtb	r5, r5
    4410:	cmp	r6, r5
    4412:	bcs.n	4382 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5e>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    4414:	movs	r0, #1

fail:
  return false;
}
    4416:	add	sp, #44	; 0x2c
    4418:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
    441c:	cmp.w	sl, #0
    4420:	beq.n	4430 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x10c>
    4422:	add.w	sl, sl, #1
    4426:	movw	r2, #65535	; 0xffff
    442a:	uxtb.w	sl, sl
    442e:	b.n	43fa <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd6>
    4430:	mov	r2, sl
    4432:	mov.w	sl, #1
    4436:	b.n	43fa <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd6>
    }
  }
  return true;

fail:
  return false;
    4438:	movs	r0, #0
}
    443a:	add	sp, #44	; 0x2c
    443c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004440 <FatFile::makeSFN(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeSFN(FatLfn_t* fname) {
    4440:	mov	ip, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    4442:	movs	r0, #32
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    4444:	mov	r2, ip
    4446:	add.w	r1, ip, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::makeSFN(FatLfn_t* fname) {
    444a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    444e:	ldr.w	r3, [r2], #17
  uint8_t lc = 0;
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
    4452:	ldr.w	r5, [ip, #8]
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    4456:	strb.w	r0, [r2, #1]!
  DBG_HALT_IF(end == ptr);
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    445a:	cmp	r2, r1
    445c:	bne.n	4456 <FatFile::makeSFN(FatLfn_t*)+0x16>
    fname->sfn[k] = ' ';
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    445e:	ldrb	r2, [r3, #0]
    4460:	cmp	r2, #46	; 0x2e
    4462:	ite	ne
    4464:	movne	r0, #1
    4466:	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
    4468:	bne.n	4472 <FatFile::makeSFN(FatLfn_t*)+0x32>
    446a:	ldrb.w	r2, [r3, #1]!
    446e:	cmp	r2, #46	; 0x2e
    4470:	beq.n	446a <FatFile::makeSFN(FatLfn_t*)+0x2a>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
    4472:	subs	r1, r5, #1
    4474:	cmp	r1, r3
    4476:	bls.n	4494 <FatFile::makeSFN(FatLfn_t*)+0x54>
    4478:	ldrb.w	r2, [r5, #-1]
    447c:	cmp	r2, #46	; 0x2e
    447e:	beq.n	4494 <FatFile::makeSFN(FatLfn_t*)+0x54>
    4480:	subs	r2, r5, #2
    4482:	b.n	448a <FatFile::makeSFN(FatLfn_t*)+0x4a>
    4484:	ldrb	r4, [r1, #0]
    4486:	cmp	r4, #46	; 0x2e
    4488:	beq.n	4494 <FatFile::makeSFN(FatLfn_t*)+0x54>
    448a:	cmp	r3, r2
    448c:	mov	r1, r2
    448e:	add.w	r2, r2, #4294967295
    4492:	bne.n	4484 <FatFile::makeSFN(FatLfn_t*)+0x44>
  }

  for (; ptr < end; ptr++) {
    4494:	cmp	r5, r3
    4496:	mov.w	r8, #0
    449a:	bls.n	4598 <FatFile::makeSFN(FatLfn_t*)+0x158>
    449c:	movs	r6, #7
    449e:	mov.w	lr, #8
    44a2:	mov	r4, r8
    44a4:	mov	r9, r8
    44a6:	b.n	44ba <FatFile::makeSFN(FatLfn_t*)+0x7a>
    c = *ptr;
    if (c == '.' && ptr == dot) {
    44a8:	cmp	r1, r3
    44aa:	bne.n	44c0 <FatFile::makeSFN(FatLfn_t*)+0x80>
      in = 10;                // Max index for full 8.3 name.
    44ac:	movs	r6, #10
      i = 8;                  // Place for extension.
    44ae:	movs	r4, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    44b0:	mov.w	lr, #16
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
  }

  for (; ptr < end; ptr++) {
    44b4:	adds	r3, #1
    44b6:	cmp	r5, r3
    44b8:	bls.n	4506 <FatFile::makeSFN(FatLfn_t*)+0xc6>
    c = *ptr;
    44ba:	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    44bc:	cmp	r2, #46	; 0x2e
    44be:	beq.n	44a8 <FatFile::makeSFN(FatLfn_t*)+0x68>
         c == '>' || c == '?' || c == '\\' || c == '|';
}
//------------------------------------------------------------------------------
// Reserved characters for FAT short 8.3 names.
inline bool sfnReservedChar(uint8_t c) {
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    44c0:	cmp	r2, #34	; 0x22
    44c2:	beq.n	44dc <FatFile::makeSFN(FatLfn_t*)+0x9c>
    44c4:	cmp	r2, #124	; 0x7c
    44c6:	beq.n	44dc <FatFile::makeSFN(FatLfn_t*)+0x9c>
    44c8:	sub.w	r7, r2, #91	; 0x5b
    44cc:	cmp	r7, #2
    44ce:	bls.n	44dc <FatFile::makeSFN(FatLfn_t*)+0x9c>
    return true;
  }
  //  *+,./ or :;<=>?
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    44d0:	sub.w	r7, r2, #42	; 0x2a
    44d4:	cmp	r7, #5
    44d6:	bhi.n	453a <FatFile::makeSFN(FatLfn_t*)+0xfa>
    44d8:	cmp	r2, #45	; 0x2d
    44da:	beq.n	453a <FatFile::makeSFN(FatLfn_t*)+0xfa>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    44dc:	and.w	r2, r2, #192	; 0xc0
    44e0:	cmp	r2, #128	; 0x80
    44e2:	beq.n	4560 <FatFile::makeSFN(FatLfn_t*)+0x120>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    44e4:	cmp	r4, r6
    44e6:	bhi.n	4526 <FatFile::makeSFN(FatLfn_t*)+0xe6>
      in = 10;                // Max index for full 8.3 name.
      i = 8;                  // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
    44e8:	movs	r0, #0
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
          continue;
        }
        c = '_';
    44ea:	movs	r2, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if (isUpper(c)) {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    44ec:	adds	r7, r4, #1
    44ee:	add.w	sl, ip, r4
    44f2:	uxtb	r4, r7
    44f4:	strb.w	r2, [sl, #18]
      if (i < 7) {
    44f8:	cmp	r4, #6
    44fa:	bhi.n	44b4 <FatFile::makeSFN(FatLfn_t*)+0x74>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
  }

  for (; ptr < end; ptr++) {
    44fc:	adds	r3, #1
      } else if (isUpper(c)) {
        uc |= bit;
      }
      fname->sfn[i++] = c;
      if (i < 7) {
        fname->seqPos = i;
    44fe:	strb.w	r4, [ip, #16]
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
  }

  for (; ptr < end; ptr++) {
    4502:	cmp	r5, r3
    4504:	bhi.n	44ba <FatFile::makeSFN(FatLfn_t*)+0x7a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    4506:	ldrb.w	r3, [ip, #18]
    450a:	cmp	r3, #32
    450c:	beq.n	4592 <FatFile::makeSFN(FatLfn_t*)+0x152>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    450e:	cbz	r0, 456c <FatFile::makeSFN(FatLfn_t*)+0x12c>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
    4510:	tst.w	r9, r8
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    4514:	mov.w	r0, #1
  if (fname->sfn[0] == ' ') {
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
    4518:	it	ne
    451a:	movne.w	r8, #2
    451e:	strb.w	r8, [ip, #17]
    4522:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }
        c = '_';
      }
      if (i > in) {
        is83 = false;
        if (in == 10 || ptr > dot) {
    4526:	cmp	r6, #10
    4528:	beq.n	4564 <FatFile::makeSFN(FatLfn_t*)+0x124>
    452a:	cmp	r1, r3
    452c:	ite	cs
    452e:	movcs	r3, #0
    4530:	movcc	r3, #1
    4532:	cbnz	r3, 4564 <FatFile::makeSFN(FatLfn_t*)+0x124>
          continue;
        }
        c = '_';
      }
      if (i > in) {
        is83 = false;
    4534:	mov	r0, r3
        if (in == 10 || ptr > dot) {
          // Done - extension longer than three characters or no extension.
          break;
        }
        // Skip to dot.
        ptr = dot - 1;
    4536:	subs	r3, r1, #1
        continue;
    4538:	b.n	44b4 <FatFile::makeSFN(FatLfn_t*)+0x74>
    453a:	sub.w	r7, r2, #58	; 0x3a
    453e:	cmp	r7, #5
    4540:	bls.n	44dc <FatFile::makeSFN(FatLfn_t*)+0x9c>
    if (c == '.' && ptr == dot) {
      in = 10;                // Max index for full 8.3 name.
      i = 8;                  // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (sfnReservedChar(c)) {
    4542:	sub.w	r7, r2, #33	; 0x21
    4546:	cmp	r7, #93	; 0x5d
    4548:	bhi.n	44dc <FatFile::makeSFN(FatLfn_t*)+0x9c>
        if ((c & 0XC0) == 0X80) {
          continue;
        }
        c = '_';
      }
      if (i > in) {
    454a:	cmp	r4, r6
    454c:	bhi.n	4526 <FatFile::makeSFN(FatLfn_t*)+0xe6>
        }
        // Skip to dot.
        ptr = dot - 1;
        continue;
      }
      if (isLower(c)) {
    454e:	sub.w	r7, r2, #97	; 0x61
    4552:	cmp	r7, #25
    4554:	bhi.n	4584 <FatFile::makeSFN(FatLfn_t*)+0x144>
        c += 'A' - 'a';
    4556:	subs	r2, #32
        lc |= bit;
    4558:	orr.w	r8, lr, r8
        // Skip to dot.
        ptr = dot - 1;
        continue;
      }
      if (isLower(c)) {
        c += 'A' - 'a';
    455c:	uxtb	r2, r2
    455e:	b.n	44ec <FatFile::makeSFN(FatLfn_t*)+0xac>
      in = 10;                // Max index for full 8.3 name.
      i = 8;                  // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
    4560:	movs	r0, #0
    4562:	b.n	44b4 <FatFile::makeSFN(FatLfn_t*)+0x74>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    4564:	ldrb.w	r3, [ip, #18]
    4568:	cmp	r3, #32
    456a:	beq.n	4592 <FatFile::makeSFN(FatLfn_t*)+0x152>
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    456c:	ldrb.w	r3, [ip, #16]
    goto fail;
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    4570:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    4572:	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    4574:	movs	r2, #49	; 0x31
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    4576:	add	r3, ip
    goto fail;
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    4578:	strb.w	r0, [ip, #17]
    fname->sfn[fname->seqPos] = '~';
    457c:	strb	r1, [r3, #18]
    fname->sfn[fname->seqPos + 1] = '1';
    457e:	strb	r2, [r3, #19]
    4580:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        continue;
      }
      if (isLower(c)) {
        c += 'A' - 'a';
        lc |= bit;
      } else if (isUpper(c)) {
    4584:	sub.w	r7, r2, #65	; 0x41
    4588:	cmp	r7, #25
        uc |= bit;
    458a:	it	ls
    458c:	orrls.w	r9, lr, r9
    4590:	b.n	44ec <FatFile::makeSFN(FatLfn_t*)+0xac>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

fail:
  return false;
    4592:	movs	r0, #0
    4594:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
  }

  for (; ptr < end; ptr++) {
    4598:	mov	r9, r8
    459a:	b.n	4506 <FatFile::makeSFN(FatLfn_t*)+0xc6>

0000459c <FatFile::makeUniqueSfn(FatLfn_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    459c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45a0:	mov	r8, r1
    45a2:	mov	r5, r0
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    45a4:	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    45a8:	movs	r4, #0
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    45aa:	ldrb	r7, [r1, #16]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    45ac:	add.w	r6, r1, #18
    45b0:	ldr.w	fp, [pc, #148]	; 4648 <FatFile::makeUniqueSfn(FatLfn_t*)+0xac>
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    45b4:	mov.w	sl, #126	; 0x7e
    45b8:	cmp	r7, #3
    45ba:	ldr.w	r2, [fp]
    45be:	it	cs
    45c0:	movcs	r7, #3
  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    DBG_WARN_IF(seq > FIRST_HASH_SEQ);
    hex += millis();
    45c2:	add	r4, r2
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4; i > pos; i--) {
    45c4:	adds	r3, r7, #4
  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    DBG_WARN_IF(seq > FIRST_HASH_SEQ);
    hex += millis();
    45c6:	uxth	r4, r4
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4; i > pos; i--) {
    45c8:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    45ca:	and.w	r2, r4, #15
    hex += millis();
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4; i > pos; i--) {
    45ce:	subs	r0, r3, #1
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    45d0:	lsrs	r4, r4, #4
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    45d2:	cmp	r2, #9
    45d4:	add.w	r1, r2, #55	; 0x37
    45d8:	it	ls
    45da:	addls.w	r1, r2, #48	; 0x30
    45de:	add.w	r2, r8, r3
    hex += millis();
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4; i > pos; i--) {
    45e2:	uxtb	r3, r0
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    45e4:	strb	r1, [r2, #18]
    hex += millis();
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4; i > pos; i--) {
    45e6:	cmp	r7, r3
    45e8:	bcc.n	45ca <FatFile::makeUniqueSfn(FatLfn_t*)+0x2e>
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    45ea:	add.w	r3, r8, r7
   *
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() { seekSet(0); }
    45ee:	movs	r1, #0
    45f0:	mov	r0, r5
    45f2:	strb.w	sl, [r3, #18]
    45f6:	bl	3bbc <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    45fa:	movs	r1, #1
    45fc:	mov	r0, r5
    45fe:	bl	3b78 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    4602:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    4604:	mov	r3, r0
    4606:	cbz	r0, 4634 <FatFile::makeUniqueSfn(FatLfn_t*)+0x98>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    4608:	ldrb.w	lr, [r0]
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    460c:	mov	r1, r0
    460e:	mov	r0, r6
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    4610:	cmp.w	lr, #0
    4614:	beq.n	4640 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    4616:	ldrb	r3, [r3, #11]
    4618:	lsls	r3, r3, #28
    461a:	bmi.n	45fa <FatFile::makeUniqueSfn(FatLfn_t*)+0x5e>
    461c:	bl	9600 <memcmp>
    4620:	cmp	r0, #0
    4622:	bne.n	45fa <FatFile::makeUniqueSfn(FatLfn_t*)+0x5e>
    4624:	add.w	r9, r9, #4294967295
  uint16_t hex = 0;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    4628:	ands.w	r9, r9, #255	; 0xff
    462c:	bne.n	45b8 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1c>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    462e:	mov	r0, r9
    4630:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    4634:	ldrb	r0, [r5, #1]
    4636:	clz	r0, r0
    463a:	lsrs	r0, r0, #5
    463c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

fail:
  return false;

done:
  return true;
    4640:	movs	r0, #1
    4642:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4646:	nop
    4648:	.word	0x20017c78

0000464c <FatFile::open(FatFile*, FatLfn_t*, int)>:
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    464c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;

  if (!dirFile->isDir() || isOpen()) {
    4650:	ldrb	r4, [r1, #0]

done:
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    4652:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;

  if (!dirFile->isDir() || isOpen()) {
    4654:	tst.w	r4, #208	; 0xd0
    4658:	beq.n	465e <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    465a:	ldrb	r4, [r0, #0]
    465c:	cbz	r4, 4666 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    465e:	movs	r0, #0
}
    4660:	add	sp, #52	; 0x34
    4662:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
    4666:	ldr	r4, [r2, #12]
    4668:	ldr	r6, [pc, #648]	; (48f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a8>)
    466a:	adds	r4, #12
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    466c:	ldrb	r5, [r2, #17]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
    466e:	umull	r6, r4, r6, r4
    4672:	ubfx	r4, r4, #2, #8
    4676:	str	r4, [sp, #12]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    4678:	lsls	r4, r5, #30
    467a:	bne.n	4704 <FatFile::open(FatFile*, FatLfn_t*, int)+0xb8>
    467c:	mov.w	r8, #1
  uint8_t checksum = 0;
  uint8_t ms10;
  uint8_t nameOrd;
  uint16_t curIndex;
  uint16_t date;
  uint16_t freeIndex = 0;
    4680:	movs	r7, #0
    4682:	mov	r6, r1
    4684:	mov	r5, r2
    4686:	str	r3, [sp, #24]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeFound = 0;
  uint8_t freeNeed;
  uint8_t order = 0;
    4688:	mov	sl, r7
  uint16_t freeIndex = 0;
  uint16_t freeTotal;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    468a:	ldr	r3, [r6, #8]
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeFound = 0;
    468c:	mov	r4, r7
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    468e:	mov	r9, r7
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    4690:	add.w	fp, r5, #18
    4694:	str	r0, [sp, #36]	; 0x24
    4696:	mov	r1, r7
    4698:	mov	r0, r6
    469a:	str	r2, [sp, #16]
  uint16_t freeIndex = 0;
  uint16_t freeTotal;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    469c:	str	r3, [sp, #32]
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeFound = 0;
  uint8_t freeNeed;
  uint8_t order = 0;
  uint8_t checksum = 0;
    469e:	str	r7, [sp, #28]
done:
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    46a0:	str	r7, [sp, #20]
    46a2:	bl	3bbc <FatFile::seekSet(unsigned long)>
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    46a6:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    46a8:	movs	r1, #0
    46aa:	mov	r0, r6
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    46ac:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache();
    46b0:	bl	3b78 <FatFile::readDirCache(bool)>
    if (!dir) {
    46b4:	cmp	r0, #0
    46b6:	beq.w	47e4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x198>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    46ba:	ldrb	r3, [r0, #0]
    46bc:	sub.w	r2, r3, #229	; 0xe5
    46c0:	clz	r2, r2
    46c4:	lsrs	r2, r2, #5
    46c6:	cbz	r3, 472a <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    46c8:	cbnz	r2, 472a <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    46ca:	cmp	r4, r8
    46cc:	it	cc
    46ce:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    46d0:	cmp	r3, #46	; 0x2e
    46d2:	beq.n	4724 <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
    46d4:	cbnz	r2, 4724 <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
    46d6:	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (isFatLongName(dir)) {
    46d8:	cmp	r1, #15
    46da:	beq.n	47a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x154>
      if (order == 1) {
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
          lfnOrd = 0;
        }
      }
    } else if (isFatFileOrSubdir(dir)) {
    46dc:	lsls	r3, r1, #28
    46de:	bmi.n	4724 <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
      if (lfnOrd) {
    46e0:	cmp.w	r9, #0
    46e4:	bne.w	48b4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x268>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    46e8:	movs	r2, #11
    46ea:	mov	r1, fp
    46ec:	bl	9600 <memcmp>
    46f0:	cmp	r0, #0
    46f2:	bne.n	46a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x5a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    46f4:	ldr	r3, [sp, #16]
    46f6:	ldrb	r3, [r3, #17]
    46f8:	lsls	r0, r3, #31
    46fa:	bpl.w	48e0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>
          goto found;
        }
        fnameFound = true;
    46fe:	movs	r3, #1
    4700:	str	r3, [sp, #20]
    4702:	b.n	46a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x5a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    4704:	ldr	r4, [sp, #12]
    4706:	add.w	r8, r4, #1
    470a:	uxtb.w	r8, r8
    470e:	b.n	4680 <FatFile::open(FatFile*, FatLfn_t*, int)+0x34>
            (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = nameOrd;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    4710:	add.w	sl, sl, #4294967295
    4714:	uxtb.w	sl, sl
    4718:	cmp	r3, sl
    471a:	bne.n	4724 <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
    471c:	ldrb	r3, [r0, #13]
    471e:	ldr	r1, [sp, #28]
    4720:	cmp	r1, r3
    4722:	beq.n	47c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x178>
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    4724:	mov.w	r9, #0
    4728:	b.n	46a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x5a>
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    472a:	cmp	r4, #0
    472c:	it	eq
    472e:	moveq	r7, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    4730:	cmp	r4, r8
    4732:	bcs.n	4738 <FatFile::open(FatFile*, FatLfn_t*, int)+0xec>
        freeFound++;
    4734:	adds	r4, #1
    4736:	uxtb	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    4738:	cmp	r3, #0
    473a:	bne.n	46d0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x84>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    473c:	ldr	r2, [sp, #24]
    473e:	mov	r3, r2
    4740:	lsls	r2, r3, #22
    4742:	bpl.n	465e <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    4744:	and.w	r3, r3, #3
    4748:	subs	r3, #1
    474a:	cmp	r3, #1
    474c:	bhi.n	465e <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    DBG_WARN_MACRO;
    goto fail;
  }
  // Keep found entries or start at current index if no free entries found.
  if (freeFound == 0) {
    474e:	cmp	r4, #0
    4750:	it	eq
    4752:	moveq	r7, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    4754:	cmp	r4, r8
    4756:	bcc.n	4760 <FatFile::open(FatFile*, FatLfn_t*, int)+0x114>
    4758:	b.n	4776 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12a>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    475a:	uxtb	r4, r3
  // Keep found entries or start at current index if no free entries found.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    475c:	cmp	r8, r4
    475e:	bls.n	4776 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12a>
    dir = dirFile->readDirCache();
    4760:	movs	r1, #0
    4762:	mov	r0, r6
    4764:	bl	3b78 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    4768:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    476a:	cmp	r0, #0
    476c:	bne.n	475a <FatFile::open(FatFile*, FatLfn_t*, int)+0x10e>
      if (dirFile->getError()) {
    476e:	ldrb	r3, [r6, #1]
    4770:	cmp	r3, #0
    4772:	bne.w	465e <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
      break;
    }
    freeFound++;
  }
  // Loop handles the case of huge filename and cluster size one.
  freeTotal = freeFound;
    4776:	uxth	r4, r4
  while (freeTotal < freeNeed) {
    4778:	uxth.w	r5, r8
    477c:	cmp	r4, r5
    477e:	bcs.n	47f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1ac>
    4780:	ldr.w	r9, [sp, #32]
    4784:	b.n	4794 <FatFile::open(FatFile*, FatLfn_t*, int)+0x148>
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // 16-bit freeTotal needed for large cluster size.
    freeTotal += vol->dirEntriesPerCluster();
    4786:	ldrb.w	r3, [r9, #4]
    478a:	add.w	r4, r4, r3, lsl #4
    478e:	uxth	r4, r4
    }
    freeFound++;
  }
  // Loop handles the case of huge filename and cluster size one.
  freeTotal = freeFound;
  while (freeTotal < freeNeed) {
    4790:	cmp	r4, r5
    4792:	bcs.n	47f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1ac>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    4794:	mov	r0, r6
    4796:	bl	3548 <FatFile::addDirCluster()>
    479a:	cmp	r0, #0
    479c:	bne.n	4786 <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    479e:	b.n	465e <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isFatLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    47a0:	cmp.w	r9, #0
    47a4:	bne.n	4710 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        order = ldir->order & 0X1F;
    47a6:	and.w	sl, r3, #31
        if (order != nameOrd ||
    47aa:	ldr	r2, [sp, #12]
    47ac:	cmp	r2, sl
    47ae:	bne.w	46a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x5a>
    47b2:	lsls	r1, r3, #25
    47b4:	bmi.n	47bc <FatFile::open(FatFile*, FatLfn_t*, int)+0x170>
    47b6:	ldr.w	sl, [sp, #12]
    47ba:	b.n	46a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x5a>
            (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = nameOrd;
        checksum = ldir->checksum;
    47bc:	ldrb	r3, [r0, #13]
    47be:	mov	r9, r2
    47c0:	mov	sl, r2
    47c2:	str	r3, [sp, #28]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      if (order == 1) {
    47c4:	cmp.w	sl, #1
    47c8:	bne.w	46a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x5a>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    47cc:	adds	r1, r5, #1
    47ce:	mov	r3, r9
    47d0:	ldr	r2, [sp, #16]
    47d2:	mov	r0, r6
    47d4:	uxth	r1, r1
    47d6:	bl	4260 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    47da:	cmp	r0, #0
    47dc:	it	eq
    47de:	moveq.w	r9, #0
    47e2:	b.n	46a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x5a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
    47e4:	ldrb	r3, [r6, #1]
    47e6:	cmp	r3, #0
    47e8:	bne.w	465e <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    47ec:	ldr	r2, [sp, #24]
    47ee:	mov	r3, r2
    47f0:	lsls	r2, r3, #22
    47f2:	bpl.w	465e <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    47f6:	b.n	4744 <FatFile::open(FatFile*, FatLfn_t*, int)+0xf8>
      goto fail;
    }
    // 16-bit freeTotal needed for large cluster size.
    freeTotal += vol->dirEntriesPerCluster();
  }
  if (fnameFound) {
    47f8:	ldr	r3, [sp, #20]
    47fa:	cbz	r3, 480a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1be>
    if (!dirFile->makeUniqueSfn(fname)) {
    47fc:	ldr	r1, [sp, #16]
    47fe:	mov	r0, r6
    4800:	bl	459c <FatFile::makeUniqueSfn(FatLfn_t*)>
    4804:	cmp	r0, #0
    4806:	beq.w	465e <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
    480a:	add.w	r8, r8, #4294967295
  curIndex = freeIndex + lfnOrd;
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    480e:	ldr	r2, [sp, #16]
    4810:	mov	r0, r6
  if (fnameFound) {
    if (!dirFile->makeUniqueSfn(fname)) {
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
    4812:	uxtb.w	r9, r8
  curIndex = freeIndex + lfnOrd;
    4816:	add.w	r5, r7, r9
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    481a:	mov	r3, r9
    if (!dirFile->makeUniqueSfn(fname)) {
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
  curIndex = freeIndex + lfnOrd;
    481c:	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    481e:	mov	r1, r5
    4820:	bl	4324 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    4824:	cmp	r0, #0
    4826:	beq.w	465e <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    482a:	lsls	r1, r5, #5
    482c:	mov	r0, r6
    482e:	bl	3bbc <FatFile::seekSet(unsigned long)>
    4832:	cmp	r0, #0
    4834:	beq.w	465e <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    4838:	movs	r1, #0
    483a:	mov	r0, r6
    483c:	bl	3b78 <FatFile::readDirCache(bool)>
    goto fail;
  }
  dir = dirFile->cacheDir(curIndex);
  if (!dir) {
    4840:	mov	r4, r0
    4842:	cmp	r0, #0
    4844:	beq.w	465e <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    4848:	movs	r2, #32
    484a:	movs	r1, #0
    484c:	bl	972c <memset>
  memcpy(dir->name, fname->sfn, 11);
    4850:	ldr	r7, [sp, #16]

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // Set timestamps.
  if (FsDateTime::callback) {
    4852:	ldr	r2, [pc, #164]	; (48f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2ac>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    4854:	mov	r3, r7
    4856:	ldr.w	r0, [r3, #18]!
    485a:	ldr	r1, [r3, #4]
    485c:	str	r0, [r4, #0]
    485e:	str	r1, [r4, #4]
    4860:	ldrh	r1, [r3, #8]
    4862:	ldrb	r3, [r3, #10]
    4864:	strh	r1, [r4, #8]
    4866:	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    4868:	ldrb	r3, [r7, #17]

  // Set timestamps.
  if (FsDateTime::callback) {
    486a:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    486c:	and.w	r3, r3, #24
    4870:	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    4872:	cmp	r7, #0
    4874:	beq.n	48e8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x29c>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    4876:	add.w	r2, sp, #43	; 0x2b
    487a:	add.w	r1, sp, #46	; 0x2e
    487e:	add	r0, sp, #44	; 0x2c
    4880:	blx	r7
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4882:	ldrh.w	r1, [sp, #44]	; 0x2c
    4886:	ldrh.w	r2, [sp, #46]	; 0x2e
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    488a:	ldrb.w	r3, [sp, #43]	; 0x2b
    488e:	strh	r1, [r4, #16]
    4890:	strh	r2, [r4, #14]
    4892:	strb	r3, [r4, #13]
    4894:	ldr	r2, [sp, #32]
    4896:	ldrb.w	r3, [r2, #36]	; 0x24
    489a:	orr.w	r3, r3, #1
    489e:	strb.w	r3, [r2, #36]	; 0x24
  // Force write of entry to device.
  vol->cacheDirty();

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    48a2:	str.w	r9, [sp]
    48a6:	mov	r2, r5
    48a8:	ldr	r3, [sp, #24]
    48aa:	mov	r1, r6
    48ac:	ldr	r0, [sp, #36]	; 0x24
    48ae:	bl	3c6c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    48b2:	b.n	4660 <FatFile::open(FatFile*, FatLfn_t*, int)+0x14>
          lfnOrd = 0;
        }
      }
    } else if (isFatFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    48b4:	cmp.w	sl, #1
    48b8:	bne.w	465e <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    48bc:	subs	r4, r0, #1
    48be:	mov	r3, r2
    48c0:	adds	r0, #10
    48c2:	lsls	r1, r3, #7
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    48c4:	ldrb.w	r2, [r4, #1]!
    48c8:	orr.w	r3, r1, r3, lsr #1
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    48cc:	cmp	r4, r0
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    48ce:	uxtab	r3, r2, r3
    48d2:	uxtb	r3, r3
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    48d4:	bne.n	48c2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    48d6:	mov	r2, r3
    48d8:	ldr	r3, [sp, #28]
    48da:	cmp	r3, r2
    48dc:	bne.w	465e <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    48e0:	ldr	r3, [sp, #24]
    48e2:	lsls	r1, r3, #20
    48e4:	bpl.n	48a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x256>
    48e6:	b.n	465e <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    48e8:	movw	r3, #22049	; 0x5621
    48ec:	strh	r3, [r4, #16]
    48ee:	strh	r3, [r4, #24]
    48f0:	strh	r3, [r4, #18]
    48f2:	b.n	4894 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
    48f4:	.word	0x4ec4ec4f
    48f8:	.word	0x20017398

000048fc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
    48fc:	push	{r4, r5, r6, r7}
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    48fe:	ldrb	r0, [r1, #0]
    4900:	cmp	r0, #32
    4902:	bne.n	490c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    4904:	ldrb.w	r4, [r1, #1]!
    4908:	cmp	r4, #32
    490a:	beq.n	4904 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
    490c:	movs	r4, #0
    490e:	mov	r6, r1
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
    4910:	ldr	r0, [pc, #144]	; (49a4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa8>)
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->begin = path;
    4912:	str	r1, [r2, #0]
  fname->len = 0;
    4914:	str	r4, [r2, #12]
    4916:	mov	r4, r6
  while (*path && !isDirSeparator(*path)) {
    4918:	ldrb.w	r5, [r6], #1
    491c:	cmp	r5, #47	; 0x2f
    491e:	it	ne
    4920:	cmpne	r5, #0
    4922:	beq.n	496a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6e>
    4924:	sub.w	r4, r5, #34	; 0x22
    4928:	uxtb	r4, r4
    492a:	cmp	r4, #29
    492c:	bls.n	4996 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
    492e:	movs	r4, #1
         c == '>' || c == '?' || c == '\\' || c == '|';
    4930:	sub.w	r7, r5, #32
    4934:	cmp	r7, #95	; 0x5f
    4936:	ite	ls
    4938:	movls	r7, #0
    493a:	movhi	r7, #1
    493c:	cmp	r7, r4
    493e:	bcs.n	4990 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x94>
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
    4940:	and.w	r4, r5, #191	; 0xbf
    4944:	cmp	r4, #60	; 0x3c
    4946:	beq.n	4990 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x94>
         c == '>' || c == '?' || c == '\\' || c == '|';
    4948:	cmp	r5, #92	; 0x5c
    494a:	beq.n	4990 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x94>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len++;
#endif  // USE_UTF8_LONG_NAMES
    if (cp != '.' && cp != ' ') {
    494c:	cmp	r5, #46	; 0x2e
    494e:	sub.w	r4, r6, r1
    4952:	beq.n	4916 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    4954:	cmp	r5, #32
    4956:	beq.n	4916 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
      // Need to trim trailing dots spaces.
      fname->len = len;
    4958:	str	r4, [r2, #12]
    495a:	mov	r4, r6
      fname->end = path;
    495c:	str	r6, [r2, #8]
  while (*path == ' ') {
    path++;
  }
  fname->begin = path;
  fname->len = 0;
  while (*path && !isDirSeparator(*path)) {
    495e:	ldrb.w	r5, [r6], #1
    4962:	cmp	r5, #47	; 0x2f
    4964:	it	ne
    4966:	cmpne	r5, #0
    4968:	bne.n	4924 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x28>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    496a:	ldr	r1, [r2, #12]
    496c:	subs	r1, #1
    496e:	cmp	r1, #254	; 0xfe
    4970:	bhi.n	4990 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x94>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    4972:	cmp	r5, #32
    4974:	beq.n	497a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7e>
    4976:	cmp	r5, #47	; 0x2f
    4978:	bne.n	4986 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8a>
    497a:	ldrb.w	r1, [r4, #1]!
    497e:	cmp	r1, #32
    4980:	beq.n	497a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7e>
    4982:	cmp	r1, #47	; 0x2f
    4984:	beq.n	497a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7e>
  }
  *ptr = path;
    4986:	str	r4, [r3, #0]
  return makeSFN(fname);
    4988:	mov	r0, r2

fail:
  return false;
}
    498a:	pop	{r4, r5, r6, r7}
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
  }
  *ptr = path;
  return makeSFN(fname);
    498c:	b.w	4440 <FatFile::makeSFN(FatLfn_t*)>

fail:
  return false;
}
    4990:	movs	r0, #0
    4992:	pop	{r4, r5, r6, r7}
    4994:	bx	lr
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
    4996:	lsr.w	r4, r0, r4
    499a:	and.w	r4, r4, #1
    499e:	eor.w	r4, r4, #1
    49a2:	b.n	4930 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x34>
    49a4:	.word	0x31000101

000049a8 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    49a8:	push	{r4, lr}
    49aa:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    49ac:	ldr	r0, [r0, #56]	; 0x38
    49ae:	cbz	r0, 49bc <FsBaseFile::close()+0x14>
    49b0:	bl	3680 <FatFile::close()>
  m_fFile = nullptr;
    49b4:	movs	r3, #0
    49b6:	str	r3, [r4, #56]	; 0x38
  m_xFile = nullptr;
    49b8:	str	r3, [r4, #60]	; 0x3c
  return rtn;
}
    49ba:	pop	{r4, pc}
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    49bc:	ldr	r0, [r4, #60]	; 0x3c
    49be:	cbz	r0, 49cc <FsBaseFile::close()+0x24>
    49c0:	bl	2040 <ExFatFile::close()>
  m_fFile = nullptr;
    49c4:	movs	r3, #0
    49c6:	str	r3, [r4, #56]	; 0x38
  m_xFile = nullptr;
    49c8:	str	r3, [r4, #60]	; 0x3c
  return rtn;
}
    49ca:	pop	{r4, pc}
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    49cc:	movs	r0, #1
    49ce:	b.n	49b4 <FsBaseFile::close()+0xc>

000049d0 <FsBaseFile::operator=(FsBaseFile const&)>:
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) {
    49d0:	cmp	r0, r1
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    49d2:	push	{r3, r4, r5, r6, r7, lr}
    49d4:	mov	r6, r0
  if (this == &from) {
    49d6:	beq.n	4a04 <FsBaseFile::operator=(FsBaseFile const&)+0x34>
    49d8:	mov	r5, r1
    return *this;
  }
  close();
    49da:	bl	49a8 <FsBaseFile::close()>
  if (from.m_fFile) {
    49de:	ldr	r4, [r5, #56]	; 0x38
    49e0:	cbz	r4, 4a08 <FsBaseFile::operator=(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
    49e2:	mov	r1, r6
    49e4:	movs	r0, #36	; 0x24
    49e6:	bl	4c10 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    49ea:	movs	r3, #0
    *m_fFile = *from.m_fFile;
    49ec:	mov	r4, r0
    49ee:	strb	r3, [r0, #0]
    49f0:	strb	r3, [r0, #1]
    49f2:	strb	r3, [r0, #2]
  if (this == &from) {
    return *this;
  }
  close();
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    49f4:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    49f6:	ldr	r5, [r5, #56]	; 0x38
    49f8:	ldmia	r5!, {r0, r1, r2, r3}
    49fa:	stmia	r4!, {r0, r1, r2, r3}
    49fc:	ldmia	r5!, {r0, r1, r2, r3}
    49fe:	stmia	r4!, {r0, r1, r2, r3}
    4a00:	ldr	r3, [r5, #0]
    4a02:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
    4a04:	mov	r0, r6
    4a06:	pop	{r3, r4, r5, r6, r7, pc}
  }
  close();
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    4a08:	ldr	r3, [r5, #60]	; 0x3c
    4a0a:	cmp	r3, #0
    4a0c:	beq.n	4a04 <FsBaseFile::operator=(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
    4a0e:	mov	r1, r6
    4a10:	movs	r0, #56	; 0x38
    4a12:	bl	4c10 <operator new(unsigned int, unsigned long*)>
    4a16:	strb.w	r4, [r0, #49]	; 0x31
    4a1a:	strb.w	r4, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    4a1e:	mov	r2, r0
    4a20:	strb.w	r4, [r0, #51]	; 0x33
  close();
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    4a24:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    4a26:	ldr	r3, [r5, #60]	; 0x3c
    4a28:	add.w	r1, r3, #48	; 0x30
    4a2c:	ldr	r7, [r3, #0]
    4a2e:	adds	r3, #16
    4a30:	ldr.w	r5, [r3, #-12]
    4a34:	adds	r2, #16
    4a36:	ldr.w	r4, [r3, #-8]
    4a3a:	ldr.w	r0, [r3, #-4]
    4a3e:	cmp	r3, r1
    4a40:	str.w	r7, [r2, #-16]
    4a44:	str.w	r5, [r2, #-12]
    4a48:	str.w	r4, [r2, #-8]
    4a4c:	str.w	r0, [r2, #-4]
    4a50:	bne.n	4a2c <FsBaseFile::operator=(FsBaseFile const&)+0x5c>
    4a52:	ldr	r3, [r3, #0]
    4a54:	str	r3, [r2, #0]
    4a56:	b.n	4a04 <FsBaseFile::operator=(FsBaseFile const&)+0x34>

00004a58 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    4a58:	cbz	r1, 4ace <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    4a5a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a5e:	mov	r4, r1
    4a60:	mov	r5, r0
    4a62:	mov	r8, r3
    4a64:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    4a66:	bl	49a8 <FsBaseFile::close()>
  if (vol->m_fVol) {
    4a6a:	ldr.w	r6, [r4, #1152]	; 0x480
    4a6e:	cbz	r6, 4a9c <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    4a70:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    4a72:	mov	r1, r5
    4a74:	movs	r0, #36	; 0x24
    4a76:	bl	4c10 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4a7a:	mov	r3, r8
    4a7c:	strb	r6, [r0, #0]
    4a7e:	mov	r2, r7
    4a80:	strb	r6, [r0, #1]
    4a82:	strb	r6, [r0, #2]
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    4a84:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4a86:	ldr.w	r1, [r4, #1152]	; 0x480
    4a8a:	bl	3998 <FatFile::open(FatVolume*, char const*, int)>
    4a8e:	cbz	r0, 4a96 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    4a90:	movs	r0, #1
    4a92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    4a96:	str	r0, [r5, #56]	; 0x38
    4a98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    4a9c:	ldr.w	r3, [r4, #1156]	; 0x484
    4aa0:	cbz	r3, 4ad2 <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    4aa2:	mov	r1, r5
    4aa4:	movs	r0, #56	; 0x38
    4aa6:	bl	4c10 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    4aaa:	mov	r3, r8
    4aac:	strb.w	r6, [r0, #49]	; 0x31
    4ab0:	mov	r2, r7
    4ab2:	strb.w	r6, [r0, #50]	; 0x32
    4ab6:	strb.w	r6, [r0, #51]	; 0x33
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    4aba:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    4abc:	ldr.w	r1, [r4, #1156]	; 0x484
    4ac0:	bl	28d0 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4ac4:	cmp	r0, #0
    4ac6:	bne.n	4a90 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    4ac8:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    4aca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    4ace:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    4ad0:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    4ad2:	movs	r0, #0
    4ad4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004ad8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    4ad8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  m_fVol = nullptr;
    4adc:	movs	r5, #0
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    4ade:	mov	r6, r0
    4ae0:	mov	r7, r1
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    4ae2:	mov.w	r0, #1152	; 0x480
    4ae6:	mov	r1, r6
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
  m_fVol = nullptr;
    4ae8:	str.w	r5, [r6, #1152]	; 0x480
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    4aec:	mov	r8, r3
    4aee:	mov	r9, r2
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    4af0:	bl	4c10 <operator new(unsigned int, unsigned long*)>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    4af4:	mov.w	lr, #4294967295
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(FsBlockDevice* blockDev) {
    m_blockDev = blockDev;
    4af8:	str	r5, [r0, #4]
   * \param[in] volStart Start sector of volume if part is zero.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1,
             uint32_t volStart = 0) {
    if (!init(dev, part, volStart)) {
    4afa:	mov	r2, r8
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4afc:	strb	r5, [r0, #0]
    4afe:	mov	r1, r7
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(FsBlockDevice* blockDev) {
    m_blockDev = blockDev;
    4b00:	str.w	r5, [r0, #532]	; 0x214
    4b04:	mov	r4, r0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4b06:	strb.w	r5, [r0, #528]	; 0x210
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() = default;
    4b0a:	strb.w	r5, [r0, #1092]	; 0x444
    4b0e:	strb.w	r5, [r0, #1145]	; 0x479
    4b12:	strb.w	r5, [r0, #1146]	; 0x47a
    4b16:	strb.w	r5, [r0, #1147]	; 0x47b
    m_sector = 0XFFFFFFFF;
    4b1a:	str.w	lr, [r0, #8]
    4b1e:	str.w	lr, [r0, #536]	; 0x218
    4b22:	ldr	r3, [sp, #32]
    4b24:	str.w	r0, [r6, #1156]	; 0x484
    4b28:	bl	2bcc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    4b2c:	cbnz	r0, 4b84 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xac>
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_xVol = nullptr;
    4b2e:	movs	r5, #0
  m_fVol = new (m_volMem) FatVolume;
    4b30:	mov	r1, r6
    4b32:	mov.w	r0, #1128	; 0x468
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_xVol = nullptr;
    4b36:	str.w	r5, [r6, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    4b3a:	bl	4c10 <operator new(unsigned int, unsigned long*)>
    4b3e:	mov.w	lr, #4294967295
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() = default;
    4b42:	strb	r5, [r0, #7]
   * \param[in] volStart Start sector of volume if part is zero.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1,
             uint32_t volStart = 0) {
    if (!init(dev, part, volStart)) {
    4b44:	mov	r2, r8
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(FsBlockDevice* blockDev) {
    m_blockDev = blockDev;
    4b46:	str	r5, [r0, #40]	; 0x28
    4b48:	mov	r1, r7
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4b4a:	strb.w	r5, [r0, #36]	; 0x24
    4b4e:	mov	r4, r0
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(FsBlockDevice* blockDev) {
    m_blockDev = blockDev;
    4b50:	str.w	r5, [r0, #568]	; 0x238
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4b54:	strb.w	r5, [r0, #564]	; 0x234
    4b58:	strb.w	r5, [r0, #1092]	; 0x444
    4b5c:	strb.w	r5, [r0, #1093]	; 0x445
    4b60:	strb.w	r5, [r0, #1094]	; 0x446
    m_sector = 0XFFFFFFFF;
    4b64:	str.w	lr, [r0, #44]	; 0x2c
    4b68:	str.w	lr, [r0, #572]	; 0x23c
    4b6c:	ldr	r3, [sp, #32]
    4b6e:	str.w	r0, [r6, #1152]	; 0x480
    4b72:	bl	40ec <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    4b76:	cbnz	r0, 4bb2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xda>
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_fVol = nullptr;
    4b78:	movs	r3, #0
  return false;
    4b7a:	mov	r0, r3
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_fVol = nullptr;
    4b7c:	str.w	r3, [r6, #1152]	; 0x480
done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    4b80:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    4b84:	add.w	r5, r4, #1096	; 0x448
    4b88:	mov	r0, r5
    4b8a:	bl	2040 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    4b8e:	mov	r1, r4
    4b90:	mov	r0, r5
    4b92:	bl	2054 <ExFatFile::openRoot(ExFatVolume*)>
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1,
             uint32_t volStart = 0) {
    if (!init(dev, part, volStart)) {
      return false;
    }
    if (!chdir()) {
    4b96:	cmp	r0, #0
    4b98:	beq.n	4b2e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x56>
      return false;
    }
    if (setCwv || !m_cwv) {
    4b9a:	ldr	r3, [pc, #64]	; (4bdc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x104>)
    4b9c:	ldr	r2, [r3, #0]
    4b9e:	cbz	r2, 4bd0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xf8>
    4ba0:	ldr	r3, [pc, #60]	; (4be0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x108>)
  }
  m_fVol = nullptr;
  return false;

done:
  if (setCwv || !m_cwv) {
    4ba2:	cmp.w	r9, #0
    4ba6:	bne.n	4bd4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xfc>
    4ba8:	ldr	r2, [r3, #0]
    4baa:	cbz	r2, 4bd4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xfc>
    m_cwv = this;
  }
  return true;
    4bac:	movs	r0, #1
    4bae:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    4bb2:	addw	r5, r4, #1092	; 0x444
    4bb6:	mov	r0, r5
    4bb8:	bl	3680 <FatFile::close()>
    return m_vwd.openRoot(this);
    4bbc:	mov	r1, r4
    4bbe:	mov	r0, r5
    4bc0:	bl	39a8 <FatFile::openRoot(FatVolume*)>
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1,
             uint32_t volStart = 0) {
    if (!init(dev, part, volStart)) {
      return false;
    }
    if (!chdir()) {
    4bc4:	cmp	r0, #0
    4bc6:	beq.n	4b78 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xa0>
      return false;
    }
    if (setCwv || !m_cwv) {
    4bc8:	ldr	r3, [pc, #24]	; (4be4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    4bca:	ldr	r2, [r3, #0]
    4bcc:	cmp	r2, #0
    4bce:	bne.n	4ba0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xc8>
      m_cwv = this;
    4bd0:	str	r4, [r3, #0]
    4bd2:	b.n	4ba0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xc8>
  m_fVol = nullptr;
  return false;

done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
    4bd4:	str	r6, [r3, #0]
  }
  return true;
    4bd6:	movs	r0, #1
    4bd8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4bdc:	.word	0x2001739c
    4be0:	.word	0x200173d0
    4be4:	.word	0x200173d4

00004be8 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
    4be8:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    4bea:	movs	r5, #0
    4bec:	mov.w	r7, #1000	; 0x3e8
    4bf0:	ldr	r6, [pc, #24]	; (4c0c <FsVolume::open(char const*, int)+0x24>)
    4bf2:	mov	r4, r0
    4bf4:	str	r7, [r0, #8]
    4bf6:	str	r5, [r0, #4]
    4bf8:	strb	r5, [r0, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() = default;
    4bfa:	str	r5, [r0, #72]	; 0x48
    4bfc:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    4bfe:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    4c02:	bl	4a58 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    4c06:	mov	r0, r4
    4c08:	pop	{r3, r4, r5, r6, r7, pc}
    4c0a:	nop
    4c0c:	.word	0x2000047c

00004c10 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    4c10:	mov	r0, r1
    4c12:	bx	lr

00004c14 <SharedSpiCard::errorCode() const>:
  }
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error
   * codes.
   */
  uint8_t errorCode() const { return m_errorCode; }
    4c14:	ldrb	r0, [r0, #18]
    4c16:	bx	lr

00004c18 <SharedSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const { return m_status; }
    4c18:	ldrb	r0, [r0, #21]
    4c1a:	bx	lr

00004c1c <SharedSpiCard::type() const>:
  /** \return success if sync successful. Not for user apps. */
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const { return m_type; }
    4c1c:	ldrb	r0, [r0, #22]
    4c1e:	bx	lr

00004c20 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() { return true; }
    4c20:	movs	r0, #1
    4c22:	bx	lr

00004c24 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_dedicatedSpi; }
    4c24:	ldrb	r0, [r0, #28]
    4c26:	bx	lr

00004c28 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  }
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    4c28:	push	{r4}
  return readSectors(sector, dst, 1);
    4c2a:	ldr	r4, [r0, #0]
    4c2c:	movs	r3, #1
    4c2e:	ldr	r4, [r4, #20]
    4c30:	mov	ip, r4
}
    4c32:	ldr.w	r4, [sp], #4
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    4c36:	bx	ip

00004c38 <DedicatedSpiCard::setDedicatedSpi(bool)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    4c38:	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    4c3a:	ldr	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    4c3c:	mov	r4, r0
    4c3e:	mov	r5, r1
  if (!syncDevice()) {
    4c40:	ldr	r3, [r3, #28]
    4c42:	blx	r3
    4c44:	cbz	r0, 4c48 <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    4c46:	strb	r5, [r4, #28]
  return true;
}
    4c48:	pop	{r3, r4, r5, pc}
    4c4a:	nop

00004c4c <DedicatedSpiCard::~DedicatedSpiCard()>:
//==============================================================================
/**
 * \class DedicatedSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
    4c4c:	bx	lr
    4c4e:	nop

00004c50 <DedicatedSpiCard::~DedicatedSpiCard()>:
    4c50:	push	{r4, lr}
    4c52:	mov	r4, r0
    4c54:	movs	r1, #32
    4c56:	bl	8b68 <operator delete(void*, unsigned int)>
    4c5a:	mov	r0, r4
    4c5c:	pop	{r4, pc}
    4c5e:	nop

00004c60 <SharedSpiCard::end()>:
  } while (m_status & 0X80 && ++n < 10);
  return m_status;
}
//------------------------------------------------------------------------------
void SharedSpiCard::end() {
  if (m_beginCalled) {
    4c60:	ldrb	r2, [r0, #16]
    4c62:	cbnz	r2, 4c66 <SharedSpiCard::end()+0x6>
    4c64:	bx	lr
    m_status = spiReceive();
  } while (m_status & 0X80 && ++n < 10);
  return m_status;
}
//------------------------------------------------------------------------------
void SharedSpiCard::end() {
    4c66:	push	{r3, r4, r5, lr}
  if (m_beginCalled) {
    syncDevice();
    4c68:	mov	r5, r0
    4c6a:	mov	r4, r0
    4c6c:	ldr.w	r3, [r5], #4
    4c70:	ldr	r3, [r3, #28]
    4c72:	blx	r3
  bool writeData(uint8_t token, const uint8_t* src);
#if SPI_DRIVER_SELECT < 2
  void spiActivate() { m_spiDriver.activate(); }
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
    4c74:	mov	r0, r5
    4c76:	bl	681c <SdSpiArduinoDriver::end()>
    spiEnd();
    m_beginCalled = false;
    4c7a:	movs	r3, #0
    4c7c:	strb	r3, [r4, #16]
    4c7e:	pop	{r3, r4, r5, pc}

00004c80 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    4c80:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c84:	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4c86:	ldrb	r3, [r0, #20]
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    4c88:	mov	r6, r0
    4c8a:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4c8c:	cmp	r3, #2
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    4c8e:	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4c90:	beq.n	4cd2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x52>
    if (!writeStart(sector)) {
    4c92:	ldr	r3, [r6, #0]
    4c94:	mov	r1, r5
    4c96:	mov	r0, r6
    4c98:	ldr	r3, [r3, #100]	; 0x64
    4c9a:	blx	r3
    4c9c:	cbz	r0, 4cbe <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
      goto fail;
    }
    m_curSector = sector;
    4c9e:	str	r5, [r6, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    4ca0:	cbz	r7, 4cc4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    4ca2:	movs	r5, #0
    4ca4:	b.n	4caa <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
    4ca6:	cmp	r7, r5
    4ca8:	beq.n	4cc4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    4caa:	ldr	r3, [r6, #0]
    4cac:	mov	r1, r4
    4cae:	mov	r0, r6
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    4cb0:	adds	r5, #1
    if (!writeData(src)) {
    4cb2:	ldr	r3, [r3, #96]	; 0x60
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    4cb4:	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    4cb8:	blx	r3
    4cba:	cmp	r0, #0
    4cbc:	bne.n	4ca6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

fail:
  return false;
    4cbe:	movs	r0, #0
    4cc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    4cc4:	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : writeStop();
    4cc6:	ldrb	r0, [r6, #28]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    4cc8:	add	r7, r3
    4cca:	str	r7, [r6, #24]
  return m_dedicatedSpi ? true : writeStop();
    4ccc:	cbz	r0, 4cda <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5a>

fail:
  return false;
}
    4cce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4cd2:	ldr	r3, [r0, #24]
    4cd4:	cmp	r3, r1
    4cd6:	bne.n	4c92 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    4cd8:	b.n	4ca0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();
    4cda:	ldr	r3, [r6, #0]
    4cdc:	mov	r0, r6
    4cde:	ldr	r3, [r3, #104]	; 0x68

fail:
  return false;
}
    4ce0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();
    4ce4:	bx	r3
    4ce6:	nop

00004ce8 <SharedSpiCard::spiStart() [clone .part.11] [clone .constprop.35]>:
uint32_t SharedSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? csd.capacity() : 0;
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStart() {
    4ce8:	push	{r3, r4, r5, lr}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
  void type(uint8_t value) { m_type = value; }
  bool waitReady(uint16_t ms);
  bool writeData(uint8_t token, const uint8_t* src);
#if SPI_DRIVER_SELECT < 2
  void spiActivate() { m_spiDriver.activate(); }
    4cea:	adds	r5, r0, #4
    4cec:	mov	r4, r0
    4cee:	mov	r0, r5
    4cf0:	bl	66c0 <SdSpiArduinoDriver::activate()>
  SPI_ASSERT_NOT_ACTIVE;
  if (!m_spiActive) {
    spiActivate();
    m_spiActive = true;
    4cf4:	movs	r3, #1
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() { sdCsWrite(m_csPin, false); }
    4cf6:	ldrb	r0, [r4, #17]
    4cf8:	movs	r1, #0
    4cfa:	strb	r3, [r4, #19]
    4cfc:	bl	68c0 <sdCsWrite(unsigned char, bool)>
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    SPI_ASSERT_ACTIVE;
    m_spiDriver.send(data);
    4d00:	mov	r0, r5
    4d02:	movs	r1, #255	; 0xff
    spiSelect();
    // Dummy byte to drive MISO busy status.
    spiSend(0XFF);
  }
}
    4d04:	ldmia.w	sp!, {r3, r4, r5, lr}
    4d08:	b.w	685c <SdSpiArduinoDriver::send(unsigned char)>

00004d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>:
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
    4d0c:	push	{r3, r4, r5, lr}
    4d0e:	adds	r5, r0, #4
    4d10:	mov	r4, r0
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() { sdCsWrite(m_csPin, false); }
  void spiStart();
  void spiStop();
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4d12:	movs	r1, #1
    4d14:	ldrb	r0, [r0, #17]
    4d16:	bl	68c0 <sdCsWrite(unsigned char, bool)>
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    SPI_ASSERT_ACTIVE;
    m_spiDriver.send(data);
    4d1a:	movs	r1, #255	; 0xff
    4d1c:	mov	r0, r5
    4d1e:	bl	685c <SdSpiArduinoDriver::send(unsigned char)>
  bool waitReady(uint16_t ms);
  bool writeData(uint8_t token, const uint8_t* src);
#if SPI_DRIVER_SELECT < 2
  void spiActivate() { m_spiDriver.activate(); }
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4d22:	mov	r0, r5
    4d24:	bl	67c4 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    // Insure MISO goes to low Z.
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    4d28:	movs	r3, #0
    4d2a:	strb	r3, [r4, #19]
    4d2c:	pop	{r3, r4, r5, pc}
    4d2e:	nop

00004d30 <SharedSpiCard::readSector(unsigned long, unsigned char*) [clone .part.19] [clone .constprop.29]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    4d30:	push	{r3, lr}
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4d32:	ldrb	r3, [r0, #19]
    4d34:	cbnz	r3, 4d3a <SharedSpiCard::readSector(unsigned long, unsigned char*) [clone .part.19] [clone .constprop.29]+0xa>
  return true;

fail:
  spiStop();
  return false;
}
    4d36:	movs	r0, #1
    4d38:	pop	{r3, pc}
    4d3a:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
    4d3e:	movs	r0, #1
    4d40:	pop	{r3, pc}
    4d42:	nop

00004d44 <SharedSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStop() {
    4d44:	push	{r3, r4, r5, r6, r7, lr}
    4d46:	ldr	r6, [pc, #88]	; (4da0 <SharedSpiCard::writeStop()+0x5c>)
    4d48:	mov	r7, r0
    4d4a:	adds	r5, r0, #4
    4d4c:	ldr	r4, [r6, #0]
class Timeout {
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) { set(ms); }
  uint16_t millis16() { return millis(); }
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4d4e:	add.w	r4, r4, #600	; 0x258
    4d52:	uxth	r4, r4
    4d54:	b.n	4d5e <SharedSpiCard::writeStop()+0x1a>
    4d56:	ldr	r3, [r6, #0]
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    if (timeout.timedOut()) {
    4d58:	subs	r3, r4, r3
    4d5a:	lsls	r3, r3, #16
    4d5c:	bmi.n	4d7c <SharedSpiCard::writeStop()+0x38>
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    4d5e:	mov	r0, r5
    4d60:	bl	6824 <SdSpiArduinoDriver::receive()>
  return true;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    4d64:	cmp	r0, #255	; 0xff
    4d66:	bne.n	4d56 <SharedSpiCard::writeStop()+0x12>
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    SPI_ASSERT_ACTIVE;
    m_spiDriver.send(data);
    4d68:	mov	r0, r5
    4d6a:	movs	r1, #253	; 0xfd
    4d6c:	bl	685c <SdSpiArduinoDriver::send(unsigned char)>
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4d70:	ldrb	r3, [r7, #19]
    4d72:	cbnz	r3, 4d90 <SharedSpiCard::writeStop()+0x4c>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    4d74:	movs	r3, #0
  return true;
    4d76:	movs	r0, #1
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    4d78:	strb	r3, [r7, #20]
  return true;
    4d7a:	pop	{r3, r4, r5, r6, r7, pc}
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    4d7c:	movs	r3, #31
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4d7e:	ldrb	r0, [r7, #19]
    4d80:	strb	r3, [r7, #18]
    4d82:	cbnz	r0, 4d86 <SharedSpiCard::writeStop()+0x42>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    4d84:	pop	{r3, r4, r5, r6, r7, pc}
    4d86:	mov	r0, r7
    4d88:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    4d8c:	movs	r0, #0
    4d8e:	pop	{r3, r4, r5, r6, r7, pc}
    4d90:	mov	r0, r7
    4d92:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    4d96:	movs	r3, #0
  return true;
    4d98:	movs	r0, #1
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    4d9a:	strb	r3, [r7, #20]
  return true;
    4d9c:	pop	{r3, r4, r5, r6, r7, pc}
    4d9e:	nop
    4da0:	.word	0x20017c78

00004da4 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.eraseSingleBlock() : false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::isBusy() {
    4da4:	push	{r3, r4, r5, lr}
  if (m_state == READ_STATE) {
    4da6:	ldrb	r3, [r0, #20]
    4da8:	cmp	r3, #1
    4daa:	beq.n	4dda <SharedSpiCard::isBusy()+0x36>
    return false;
  }
  bool spiActive = m_spiActive;
  if (!spiActive) {
    4dac:	ldrb	r3, [r0, #19]
    4dae:	mov	r4, r0
    4db0:	cbnz	r3, 4dcc <SharedSpiCard::isBusy()+0x28>
    4db2:	bl	4ce8 <SharedSpiCard::spiStart() [clone .part.11] [clone .constprop.35]>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    4db6:	adds	r0, r4, #4
    4db8:	bl	6824 <SdSpiArduinoDriver::receive()>
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4dbc:	ldrb	r3, [r4, #19]
  }
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  bool rtn = 0XFF != spiReceive();
    4dbe:	subs.w	r5, r0, #255	; 0xff
    4dc2:	it	ne
    4dc4:	movne	r5, #1
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4dc6:	cbnz	r3, 4dde <SharedSpiCard::isBusy()+0x3a>
  }
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  bool rtn = 0XFF != spiReceive();
    4dc8:	mov	r0, r5
    4dca:	pop	{r3, r4, r5, pc}
    4dcc:	adds	r0, #4
    4dce:	bl	6824 <SdSpiArduinoDriver::receive()>
    4dd2:	subs	r0, #255	; 0xff
    4dd4:	it	ne
    4dd6:	movne	r0, #1
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    4dd8:	pop	{r3, r4, r5, pc}
  return readCSD(&csd) ? csd.eraseSingleBlock() : false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::isBusy() {
  if (m_state == READ_STATE) {
    return false;
    4dda:	movs	r0, #0
    4ddc:	pop	{r3, r4, r5, pc}
    4dde:	mov	r0, r4
    4de0:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  }
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  bool rtn = 0XFF != spiReceive();
    4de4:	mov	r0, r5
    4de6:	pop	{r3, r4, r5, pc}

00004de8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4de8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    4dec:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4dee:	sub	sp, #8
    4df0:	mov	r5, r0
    4df2:	mov	r8, r1
    4df4:	str	r2, [sp, #4]
  if (!syncDevice()) {
    4df6:	ldr	r3, [r3, #28]
    4df8:	blx	r3
    4dfa:	cbnz	r0, 4e04 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1c>
    return 0XFF;
    4dfc:	movs	r0, #255	; 0xff
  uint8_t n = 0;
  do {
    m_status = spiReceive();
  } while (m_status & 0X80 && ++n < 10);
  return m_status;
}
    4dfe:	add	sp, #8
    4e00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
  if (!syncDevice()) {
    return 0XFF;
  }
  // select card
  if (!m_spiActive) {
    4e04:	ldrb	r3, [r5, #19]
    4e06:	cmp	r3, #0
    4e08:	beq.n	4e86 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9e>
    spiStart();
  }
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
    4e0a:	cmp.w	r8, #0
    4e0e:	beq.n	4e82 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    4e10:	cmp.w	r8, #12
    4e14:	beq.n	4e82 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    4e16:	ldr	r7, [pc, #120]	; (4e90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>)
    4e18:	adds	r4, r5, #4
    4e1a:	ldr	r6, [r7, #0]
class Timeout {
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) { set(ms); }
  uint16_t millis16() { return millis(); }
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4e1c:	add.w	r6, r6, #300	; 0x12c
    4e20:	uxth	r6, r6
    4e22:	b.n	4e2c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x44>
    4e24:	ldr	r3, [r7, #0]
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    if (timeout.timedOut()) {
    4e26:	subs	r3, r6, r3
    4e28:	lsls	r2, r3, #16
    4e2a:	bmi.n	4dfc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    4e2c:	mov	r0, r4
    4e2e:	bl	6824 <SdSpiArduinoDriver::receive()>
  return true;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    4e32:	cmp	r0, #255	; 0xff
    4e34:	bne.n	4e24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    SPI_ASSERT_ACTIVE;
    m_spiDriver.send(data);
    4e36:	orr.w	r1, r8, #64	; 0x40
    4e3a:	mov	r0, r4
    4e3c:	add	r7, sp, #4
    4e3e:	add	r6, sp, #8
    4e40:	bl	685c <SdSpiArduinoDriver::send(unsigned char)>
    4e44:	ldrb.w	r1, [r6, #-1]!
    4e48:	mov	r0, r4
    4e4a:	bl	685c <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t* pa = reinterpret_cast<uint8_t*>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    4e4e:	cmp	r7, r6
    4e50:	bne.n	4e44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x5c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    4e52:	cmp.w	r8, #0
    4e56:	mov	r0, r4
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    4e58:	mov.w	r6, #10
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    SPI_ASSERT_ACTIVE;
    m_spiDriver.send(data);
    4e5c:	ite	ne
    4e5e:	movne	r1, #135	; 0x87
    4e60:	moveq	r1, #149	; 0x95
    4e62:	bl	685c <SdSpiArduinoDriver::send(unsigned char)>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    4e66:	mov	r0, r4
    4e68:	bl	6824 <SdSpiArduinoDriver::receive()>
    4e6c:	mov	r0, r4
    4e6e:	bl	6824 <SdSpiArduinoDriver::receive()>

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  uint8_t n = 0;
  do {
    m_status = spiReceive();
  } while (m_status & 0X80 && ++n < 10);
    4e72:	lsls	r3, r0, #24
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  uint8_t n = 0;
  do {
    m_status = spiReceive();
    4e74:	strb	r0, [r5, #21]
  } while (m_status & 0X80 && ++n < 10);
    4e76:	bpl.n	4dfe <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x16>
    4e78:	subs	r3, r6, #1
    4e7a:	ands.w	r6, r3, #255	; 0xff
    4e7e:	bne.n	4e6c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x84>
    4e80:	b.n	4dfe <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x16>
    4e82:	adds	r4, r5, #4
    4e84:	b.n	4e36 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x4e>
    4e86:	mov	r0, r5
    4e88:	bl	4ce8 <SharedSpiCard::spiStart() [clone .part.11] [clone .constprop.35]>
    4e8c:	b.n	4e0a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    4e8e:	nop
    4e90:	.word	0x20017c78

00004e94 <SharedSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4e94:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    4e96:	movs	r2, #0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4e98:	mov	r5, r1
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    4e9a:	movs	r1, #58	; 0x3a
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4e9c:	mov	r6, r0
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    4e9e:	bl	4de8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4ea2:	cbnz	r0, 4ec0 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    4ea4:	adds	r7, r6, #4
    4ea6:	adds	r4, r5, #4
    4ea8:	mov	r0, r7
    4eaa:	bl	6824 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
    p[3 - i] = spiReceive();
    4eae:	strb.w	r0, [r4, #-1]!
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    4eb2:	cmp	r5, r4
    4eb4:	bne.n	4ea8 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4eb6:	ldrb	r4, [r6, #19]
    4eb8:	cbnz	r4, 4ed6 <SharedSpiCard::readOCR(unsigned long*)+0x42>
    4eba:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    4ebc:	mov	r0, r4
    4ebe:	pop	{r3, r4, r5, r6, r7, pc}
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    4ec0:	movs	r3, #18
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4ec2:	ldrb	r4, [r6, #19]
    4ec4:	strb	r3, [r6, #18]
    4ec6:	cmp	r4, #0
    4ec8:	beq.n	4ebc <SharedSpiCard::readOCR(unsigned long*)+0x28>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    4eca:	movs	r4, #0
    4ecc:	mov	r0, r6
    4ece:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
}
    4ed2:	mov	r0, r4
    4ed4:	pop	{r3, r4, r5, r6, r7, pc}
    4ed6:	mov	r0, r6
    4ed8:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
    4edc:	mov	r0, r4
    4ede:	pop	{r3, r4, r5, r6, r7, pc}

00004ee0 <SharedSpiCard::writeStart(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    4ee0:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStart(uint32_t sector) {
    4ee2:	mov	r2, r1
    4ee4:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    4ee6:	ldr	r3, [r3, #92]	; 0x5c
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStart(uint32_t sector) {
    4ee8:	sub	sp, #12
    4eea:	ldr	r5, [pc, #68]	; (4f30 <SharedSpiCard::writeStart(unsigned long)+0x50>)
    4eec:	mov	r4, r0
    4eee:	cmp	r3, r5
    4ef0:	bne.n	4f1c <SharedSpiCard::writeStart(unsigned long)+0x3c>
  /** \return success if sync successful. Not for user apps. */
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const { return m_type; }
    4ef2:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    4ef4:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    4ef6:	mov.w	r1, #25
    4efa:	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    4efc:	it	ne
    4efe:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    4f00:	bl	4de8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4f04:	cbz	r0, 4f12 <SharedSpiCard::writeStart(unsigned long)+0x32>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    4f06:	movs	r3, #14
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4f08:	ldrb	r0, [r4, #19]
    4f0a:	strb	r3, [r4, #18]
    4f0c:	cbnz	r0, 4f24 <SharedSpiCard::writeStart(unsigned long)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    4f0e:	add	sp, #12
    4f10:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  m_state = WRITE_STATE;
    4f12:	movs	r3, #2
  return true;
    4f14:	movs	r0, #1
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  m_state = WRITE_STATE;
    4f16:	strb	r3, [r4, #20]
  return true;

fail:
  spiStop();
  return false;
}
    4f18:	add	sp, #12
    4f1a:	pop	{r4, r5, pc}
    4f1c:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    4f1e:	blx	r3
    4f20:	ldr	r2, [sp, #4]
    4f22:	b.n	4ef4 <SharedSpiCard::writeStart(unsigned long)+0x14>
    4f24:	mov	r0, r4
    4f26:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
    4f2a:	movs	r0, #0
  return true;

fail:
  spiStop();
  return false;
}
    4f2c:	add	sp, #12
    4f2e:	pop	{r4, r5, pc}
    4f30:	.word	0x00004c1d

00004f34 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
  return rtn;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
//------------------------------------------------------------------------------
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    4f34:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4f38:	ldr	r6, [pc, #104]	; (4fa4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x70>)
    4f3a:	mov	r5, r0
    4f3c:	mov	r8, r1
    4f3e:	mov	r9, r2
    4f40:	ldr	r4, [r6, #0]
    4f42:	adds	r7, r0, #4
class Timeout {
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) { set(ms); }
  uint16_t millis16() { return millis(); }
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4f44:	add.w	r4, r4, #300	; 0x12c
    4f48:	uxth	r4, r4
    4f4a:	b.n	4f54 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    4f4c:	ldr	r3, [r6, #0]
#endif  // USE_SD_CRC

  // wait for start sector token
  Timeout timeout(SD_READ_TIMEOUT);
  while ((m_status = spiReceive()) == 0XFF) {
    if (timeout.timedOut()) {
    4f4e:	subs	r3, r4, r3
    4f50:	lsls	r3, r3, #16
    4f52:	bmi.n	4f78 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x44>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    4f54:	mov	r0, r7
    4f56:	bl	6824 <SdSpiArduinoDriver::receive()>
  uint16_t crc;
#endif  // USE_SD_CRC

  // wait for start sector token
  Timeout timeout(SD_READ_TIMEOUT);
  while ((m_status = spiReceive()) == 0XFF) {
    4f5a:	cmp	r0, #255	; 0xff
    4f5c:	strb	r0, [r5, #21]
    4f5e:	beq.n	4f4c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
    if (timeout.timedOut()) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_SECTOR) {
    4f60:	cmp	r0, #254	; 0xfe
    4f62:	beq.n	4f7e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4a>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    4f64:	movs	r3, #25
    4f66:	strb	r3, [r5, #18]
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4f68:	ldrb	r0, [r5, #19]
    4f6a:	cbz	r0, 4f74 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x40>
    4f6c:	mov	r0, r5
    4f6e:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    4f72:	movs	r0, #0
}
    4f74:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4f78:	movs	r3, #30
    4f7a:	strb	r3, [r5, #18]
    4f7c:	b.n	4f68 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x34>
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive(buf, n);
    4f7e:	mov	r2, r9
    4f80:	mov	r1, r8
    4f82:	mov	r0, r7
    4f84:	bl	683c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    4f88:	strb	r0, [r5, #21]
    4f8a:	cbz	r0, 4f92 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5e>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    4f8c:	movs	r3, #38	; 0x26
    4f8e:	strb	r3, [r5, #18]
    4f90:	b.n	4f68 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x34>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    4f92:	mov	r0, r7
    4f94:	bl	6824 <SdSpiArduinoDriver::receive()>
    4f98:	mov	r0, r7
    4f9a:	bl	6824 <SdSpiArduinoDriver::receive()>
#else   // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    4f9e:	movs	r0, #1
    4fa0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4fa4:	.word	0x20017c78

00004fa8 <SharedSpiCard::readSCR(scr_t*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readSCR(scr_t* scr) {
    4fa8:	push	{r3, r4, r5, lr}
    4faa:	mov	r4, r0
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    4fac:	movs	r2, #0
    4fae:	mov	r5, r1
    4fb0:	movs	r1, #55	; 0x37
    4fb2:	bl	4de8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    4fb6:	mov	r0, r4
    4fb8:	movs	r2, #0
    4fba:	movs	r1, #51	; 0x33
    4fbc:	bl	4de8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  uint8_t* dst = reinterpret_cast<uint8_t*>(scr);
  if (cardAcmd(ACMD51, 0)) {
    4fc0:	cbz	r0, 4fd4 <SharedSpiCard::readSCR(scr_t*)+0x2c>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    4fc2:	movs	r3, #24
    4fc4:	strb	r3, [r4, #18]
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4fc6:	ldrb	r3, [r4, #19]
    4fc8:	cbz	r3, 4fd0 <SharedSpiCard::readSCR(scr_t*)+0x28>
    4fca:	mov	r0, r4
    4fcc:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  return true;

fail:
  spiStop();
  return false;
}
    4fd0:	movs	r0, #0
    4fd2:	pop	{r3, r4, r5, pc}
  uint8_t* dst = reinterpret_cast<uint8_t*>(scr);
  if (cardAcmd(ACMD51, 0)) {
    error(SD_CARD_ERROR_ACMD51);
    goto fail;
  }
  if (!readData(dst, sizeof(scr_t))) {
    4fd4:	mov	r1, r5
    4fd6:	movs	r2, #8
    4fd8:	mov	r0, r4
    4fda:	bl	4f34 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    4fde:	cmp	r0, #0
    4fe0:	beq.n	4fc6 <SharedSpiCard::readSCR(scr_t*)+0x1e>
    4fe2:	mov	r0, r4
  return true;

fail:
  spiStop();
  return false;
}
    4fe4:	ldmia.w	sp!, {r3, r4, r5, lr}
    4fe8:	b.w	4d30 <SharedSpiCard::readSector(unsigned long, unsigned char*) [clone .part.19] [clone .constprop.29]>

00004fec <SharedSpiCard::readSDS(sds_t*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readSDS(sds_t* sds) {
    4fec:	push	{r3, r4, r5, lr}
    4fee:	mov	r4, r0
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    4ff0:	movs	r2, #0
    4ff2:	mov	r5, r1
    4ff4:	movs	r1, #55	; 0x37
    4ff6:	bl	4de8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    4ffa:	mov	r0, r4
    4ffc:	movs	r2, #0
    4ffe:	movs	r1, #13
    5000:	bl	4de8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  uint8_t* dst = reinterpret_cast<uint8_t*>(sds);
  // retrun is R2 so read extra status byte.
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    5004:	cbz	r0, 5018 <SharedSpiCard::readSDS(sds_t*)+0x2c>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    5006:	movs	r3, #21
    5008:	strb	r3, [r4, #18]
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    500a:	ldrb	r3, [r4, #19]
    500c:	cbz	r3, 5014 <SharedSpiCard::readSDS(sds_t*)+0x28>
    500e:	mov	r0, r4
    5010:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  return true;

fail:
  spiStop();
  return false;
}
    5014:	movs	r0, #0
    5016:	pop	{r3, r4, r5, pc}
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    5018:	adds	r0, r4, #4
    501a:	bl	6824 <SdSpiArduinoDriver::receive()>
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readSDS(sds_t* sds) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(sds);
  // retrun is R2 so read extra status byte.
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    501e:	cmp	r0, #0
    5020:	bne.n	5006 <SharedSpiCard::readSDS(sds_t*)+0x1a>
    error(SD_CARD_ERROR_ACMD13);
    goto fail;
  }
  if (!readData(dst, sizeof(sds_t))) {
    5022:	mov	r1, r5
    5024:	movs	r2, #64	; 0x40
    5026:	mov	r0, r4
    5028:	bl	4f34 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    502c:	cmp	r0, #0
    502e:	beq.n	500a <SharedSpiCard::readSDS(sds_t*)+0x1e>
    5030:	mov	r0, r4
  return true;

fail:
  spiStop();
  return false;
}
    5032:	ldmia.w	sp!, {r3, r4, r5, lr}
    5036:	b.w	4d30 <SharedSpiCard::readSector(unsigned long, unsigned char*) [clone .part.19] [clone .constprop.29]>
    503a:	nop

0000503c <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    503c:	push	{r3, r4, r5, lr}
    503e:	mov	r5, r2
  if (cardCommand(CMD6, arg)) {
    5040:	mov	r2, r1
    5042:	movs	r1, #6
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    5044:	mov	r4, r0
  if (cardCommand(CMD6, arg)) {
    5046:	bl	4de8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    504a:	cbz	r0, 505e <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x22>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    504c:	movs	r3, #4
    504e:	strb	r3, [r4, #18]
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    5050:	ldrb	r3, [r4, #19]
    5052:	cbz	r3, 505a <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x1e>
    5054:	mov	r0, r4
    5056:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  return true;

fail:
  spiStop();
  return false;
}
    505a:	movs	r0, #0
    505c:	pop	{r3, r4, r5, pc}
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
  if (cardCommand(CMD6, arg)) {
    error(SD_CARD_ERROR_CMD6);
    goto fail;
  }
  if (!readData(status, 64)) {
    505e:	mov	r1, r5
    5060:	movs	r2, #64	; 0x40
    5062:	mov	r0, r4
    5064:	bl	4f34 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5068:	cmp	r0, #0
    506a:	beq.n	5050 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x14>
    506c:	mov	r0, r4
  return true;

fail:
  spiStop();
  return false;
}
    506e:	ldmia.w	sp!, {r3, r4, r5, lr}
    5072:	b.w	4d30 <SharedSpiCard::readSector(unsigned long, unsigned char*) [clone .part.19] [clone .constprop.29]>
    5076:	nop

00005078 <SharedSpiCard::readRegister(unsigned char, void*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    5078:	push	{r3, r4, r5, lr}
    507a:	mov	r5, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    507c:	movs	r2, #0
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    507e:	mov	r4, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    5080:	bl	4de8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5084:	cbz	r0, 5098 <SharedSpiCard::readRegister(unsigned char, void*)+0x20>
    5086:	movs	r3, #28
    5088:	strb	r3, [r4, #18]
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    508a:	ldrb	r3, [r4, #19]
    508c:	cbz	r3, 5094 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
    508e:	mov	r0, r4
    5090:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  return true;

fail:
  spiStop();
  return false;
}
    5094:	movs	r0, #0
    5096:	pop	{r3, r4, r5, pc}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    5098:	mov	r1, r5
    509a:	movs	r2, #16
    509c:	mov	r0, r4
    509e:	bl	4f34 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    50a2:	cmp	r0, #0
    50a4:	beq.n	508a <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
    50a6:	mov	r0, r4
  return true;

fail:
  spiStop();
  return false;
}
    50a8:	ldmia.w	sp!, {r3, r4, r5, lr}
    50ac:	b.w	4d30 <SharedSpiCard::readSector(unsigned long, unsigned char*) [clone .part.19] [clone .constprop.29]>

000050b0 <SharedSpiCard::readCSD(csd_t*)>:
   *
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    50b0:	mov	r2, r1
    50b2:	movs	r1, #9
    50b4:	b.w	5078 <SharedSpiCard::readRegister(unsigned char, void*)>

000050b8 <SharedSpiCard::readCID(cid_t*)>:
   *
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    50b8:	mov	r2, r1
    50ba:	movs	r1, #10
    50bc:	b.w	5078 <SharedSpiCard::readRegister(unsigned char, void*)>

000050c0 <SharedSpiCard::sectorCount()>:
  return false;
}
//------------------------------------------------------------------------------
uint32_t SharedSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? csd.capacity() : 0;
    50c0:	ldr	r3, [r0, #0]
    50c2:	ldr	r2, [pc, #140]	; (5150 <SharedSpiCard::sectorCount()+0x90>)
    50c4:	ldr	r3, [r3, #72]	; 0x48
    50c6:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SharedSpiCard::sectorCount() {
    50c8:	push	{r4, r5, r6, lr}
    50ca:	sub	sp, #16
    50cc:	bne.n	512c <SharedSpiCard::sectorCount()+0x6c>
   *
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    50ce:	mov	r2, sp
    50d0:	movs	r1, #9
    50d2:	bl	5078 <SharedSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? csd.capacity() : 0;
    50d6:	cbz	r0, 50e6 <SharedSpiCard::sectorCount()+0x26>
  uint8_t csd[16];
  // Extract big endian fields.
  /** \return Capacity in sectors */
  uint32_t capacity() const {
    uint32_t c_size;
    uint8_t ver = csd[0] >> 6;
    50d8:	ldrb.w	r3, [sp]
    if (ver == 0) {
    50dc:	asrs	r3, r3, #6
    50de:	beq.n	50ea <SharedSpiCard::sectorCount()+0x2a>
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
    50e0:	cmp	r3, #1
    50e2:	beq.n	5132 <SharedSpiCard::sectorCount()+0x72>
    50e4:	movs	r0, #0
}
    50e6:	add	sp, #16
    50e8:	pop	{r4, r5, r6, pc}
    50ea:	ldrb.w	r2, [sp, #6]
    if (ver == 0) {
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    50ee:	ldrb.w	r4, [sp, #9]
    50f2:	lsls	r2, r2, #10
    50f4:	ldrb.w	r3, [sp, #8]
    50f8:	lsls	r4, r4, #1
    50fa:	ldrb.w	r6, [sp, #10]
    50fe:	and.w	r2, r2, #3072	; 0xc00
    5102:	ldrb.w	r1, [sp, #5]
    5106:	and.w	r4, r4, #6
    510a:	ldrb.w	r5, [sp, #7]
    510e:	orr.w	r3, r2, r3, lsr #6
    5112:	and.w	r1, r1, #15
    5116:	orr.w	r2, r4, r6, lsr #7
    511a:	orr.w	r0, r3, r5, lsl #2
    511e:	add	r2, r1
    5120:	adds	r3, r0, #1
    5122:	subs	r0, r2, #7
    5124:	lsl.w	r0, r3, r0
    5128:	add	sp, #16
    512a:	pop	{r4, r5, r6, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SharedSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? csd.capacity() : 0;
    512c:	mov	r1, sp
    512e:	blx	r3
    5130:	b.n	50d6 <SharedSpiCard::sectorCount()+0x16>
    } else if (ver == 1) {
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5132:	ldrb.w	r0, [sp, #7]
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
      return (c_size + 1) << 10;
    5136:	ldrh.w	r2, [sp, #8]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
      c_size = (uint32_t)(csd[7] & 63) << 16;
    513a:	lsls	r0, r0, #16
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
      return (c_size + 1) << 10;
    513c:	rev16	r2, r2
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
      c_size = (uint32_t)(csd[7] & 63) << 16;
    513e:	and.w	r3, r0, #4128768	; 0x3f0000
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
      return (c_size + 1) << 10;
    5142:	uxth	r0, r2
    5144:	orrs	r0, r3
    5146:	adds	r0, #1
    5148:	lsls	r0, r0, #10
}
    514a:	add	sp, #16
    514c:	pop	{r4, r5, r6, pc}
    514e:	nop
    5150:	.word	0x000050b1

00005154 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  }
}
//------------------------------------------------------------------------------
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    5154:	ldr	r3, [r0, #0]
    spiEnd();
    m_beginCalled = false;
  }
}
//------------------------------------------------------------------------------
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5156:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    515a:	ldr	r3, [r3, #72]	; 0x48
    spiEnd();
    m_beginCalled = false;
  }
}
//------------------------------------------------------------------------------
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    515c:	sub	sp, #16
    515e:	ldr	r4, [pc, #200]	; (5228 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd4>)
    5160:	mov	r5, r0
    5162:	mov	r7, r1
    5164:	mov	r6, r2
    5166:	cmp	r3, r4
    5168:	bne.n	51c8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x74>
    516a:	mov	r2, sp
    516c:	movs	r1, #9
    516e:	bl	5078 <SharedSpiCard::readRegister(unsigned char, void*)>
    5172:	mov	r4, r0
  csd_t csd;
  if (!readCSD(&csd)) {
    5174:	cbz	r4, 5198 <SharedSpiCard::erase(unsigned long, unsigned long)+0x44>
    5176:	ldrb.w	r3, [sp, #10]
    goto fail;
  }
  // check for single sector erase
  if (!csd.eraseSingleBlock()) {
    517a:	lsls	r2, r3, #25
    517c:	bpl.n	51ac <SharedSpiCard::erase(unsigned long, unsigned long)+0x58>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    517e:	ldrb	r3, [r5, #22]
    5180:	cmp	r3, #3
    5182:	beq.n	5188 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    5184:	lsls	r7, r7, #9
    lastSector <<= 9;
    5186:	lsls	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    5188:	mov	r2, r7
    518a:	movs	r1, #32
    518c:	mov	r0, r5
    518e:	bl	4de8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5192:	cbz	r0, 51d0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    5194:	movs	r3, #39	; 0x27
    5196:	strb	r3, [r5, #18]
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    5198:	ldrb	r4, [r5, #19]
    519a:	cbz	r4, 51a4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    519c:	mov	r0, r5
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    519e:	movs	r4, #0
    51a0:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
}
    51a4:	mov	r0, r4
    51a6:	add	sp, #16
    51a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  // check for single sector erase
  if (!csd.eraseSingleBlock()) {
    // erase size mask
    uint8_t m = csd.eraseSize() - 1;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    51ac:	lsls	r3, r3, #1
    51ae:	ldrb.w	r1, [sp, #11]
    51b2:	adds	r2, r6, #1
    51b4:	and.w	r3, r3, #126	; 0x7e
    51b8:	orrs	r2, r7
    51ba:	orr.w	r3, r3, r1, lsr #7
    51be:	tst	r3, r2
    51c0:	beq.n	517e <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    51c2:	movs	r3, #40	; 0x28
    51c4:	strb	r3, [r5, #18]
    51c6:	b.n	5198 <SharedSpiCard::erase(unsigned long, unsigned long)+0x44>
  }
}
//------------------------------------------------------------------------------
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    51c8:	mov	r1, sp
    51ca:	blx	r3
    51cc:	mov	r4, r0
    51ce:	b.n	5174 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    51d0:	mov	r2, r6
    51d2:	movs	r1, #33	; 0x21
    51d4:	mov	r0, r5
    51d6:	bl	4de8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    51da:	cmp	r0, #0
    51dc:	bne.n	5194 <SharedSpiCard::erase(unsigned long, unsigned long)+0x40>
      cardCommand(CMD38, 0)) {
    51de:	mov	r2, r0
    51e0:	movs	r1, #38	; 0x26
    51e2:	mov	r0, r5
    51e4:	bl	4de8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    51e8:	cmp	r0, #0
    51ea:	bne.n	5194 <SharedSpiCard::erase(unsigned long, unsigned long)+0x40>
    51ec:	ldr	r7, [pc, #60]	; (522c <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>)
class Timeout {
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) { set(ms); }
  uint16_t millis16() { return millis(); }
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    51ee:	movw	r6, #10000	; 0x2710
    51f2:	add.w	r8, r5, #4
    51f6:	ldr	r3, [r7, #0]
    51f8:	add	r6, r3
    51fa:	uxth	r6, r6
    51fc:	b.n	5206 <SharedSpiCard::erase(unsigned long, unsigned long)+0xb2>
    51fe:	ldr	r3, [r7, #0]
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    if (timeout.timedOut()) {
    5200:	subs	r3, r6, r3
    5202:	lsls	r3, r3, #16
    5204:	bmi.n	5220 <SharedSpiCard::erase(unsigned long, unsigned long)+0xcc>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    5206:	mov	r0, r8
    5208:	bl	6824 <SdSpiArduinoDriver::receive()>
  return true;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    520c:	cmp	r0, #255	; 0xff
    520e:	bne.n	51fe <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    5210:	ldrb	r3, [r5, #19]
    5212:	cmp	r3, #0
    5214:	beq.n	51a4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    5216:	mov	r0, r5
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  spiStop();
  return true;
    5218:	mov	r4, r3
    521a:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
    521e:	b.n	51a4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    5220:	movs	r3, #41	; 0x29
    5222:	strb	r3, [r5, #18]
    5224:	b.n	5198 <SharedSpiCard::erase(unsigned long, unsigned long)+0x44>
    5226:	nop
    5228:	.word	0x000050b1
    522c:	.word	0x20017c78

00005230 <SharedSpiCard::readStart(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    5230:	ldr	r3, [r0, #0]
  return readStop();
fail:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStart(uint32_t sector) {
    5232:	mov	r2, r1
    5234:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    5236:	ldr	r3, [r3, #92]	; 0x5c
  return readStop();
fail:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStart(uint32_t sector) {
    5238:	sub	sp, #12
    523a:	ldr	r5, [pc, #68]	; (5280 <SharedSpiCard::readStart(unsigned long)+0x50>)
    523c:	mov	r4, r0
    523e:	cmp	r3, r5
    5240:	bne.n	526c <SharedSpiCard::readStart(unsigned long)+0x3c>
  /** \return success if sync successful. Not for user apps. */
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const { return m_type; }
    5242:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    5244:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    5246:	mov.w	r1, #18
    524a:	mov	r0, r4
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    524c:	it	ne
    524e:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    5250:	bl	4de8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5254:	cbz	r0, 5262 <SharedSpiCard::readStart(unsigned long)+0x32>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    5256:	movs	r3, #12
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    5258:	ldrb	r0, [r4, #19]
    525a:	strb	r3, [r4, #18]
    525c:	cbnz	r0, 5274 <SharedSpiCard::readStart(unsigned long)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    525e:	add	sp, #12
    5260:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  m_state = READ_STATE;
    5262:	movs	r3, #1
  return true;
    5264:	mov	r0, r3
  }
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  m_state = READ_STATE;
    5266:	strb	r3, [r4, #20]
  return true;

fail:
  spiStop();
  return false;
}
    5268:	add	sp, #12
    526a:	pop	{r4, r5, pc}
    526c:	str	r1, [sp, #4]
fail:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    526e:	blx	r3
    5270:	ldr	r2, [sp, #4]
    5272:	b.n	5244 <SharedSpiCard::readStart(unsigned long)+0x14>
    5274:	mov	r0, r4
    5276:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
    527a:	movs	r0, #0
  return true;

fail:
  spiStop();
  return false;
}
    527c:	add	sp, #12
    527e:	pop	{r4, r5, pc}
    5280:	.word	0x00004c1d

00005284 <SharedSpiCard::readStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStop() {
    5284:	push	{r4, r5, r6, lr}
  m_state = IDLE_STATE;
    5286:	movs	r6, #0
  if (cardCommand(CMD12, 0)) {
    5288:	movs	r1, #12
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStop() {
    528a:	mov	r4, r0
  m_state = IDLE_STATE;
    528c:	strb	r6, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    528e:	mov	r2, r6
    5290:	bl	4de8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5294:	cbz	r0, 52a2 <SharedSpiCard::readStop()+0x1e>
    5296:	movs	r3, #9
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    5298:	ldrb	r5, [r4, #19]
    529a:	strb	r3, [r4, #18]
    529c:	cbnz	r5, 52b6 <SharedSpiCard::readStop()+0x32>
  return true;

fail:
  spiStop();
  return false;
}
    529e:	mov	r0, r5
    52a0:	pop	{r4, r5, r6, pc}
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    52a2:	ldrb	r5, [r4, #19]
    52a4:	cbnz	r5, 52ac <SharedSpiCard::readStop()+0x28>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    52a6:	movs	r5, #1

fail:
  spiStop();
  return false;
}
    52a8:	mov	r0, r5
    52aa:	pop	{r4, r5, r6, pc}
    52ac:	mov	r0, r4
    52ae:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
    52b2:	mov	r0, r5
    52b4:	pop	{r4, r5, r6, pc}
    52b6:	mov	r5, r6
    52b8:	mov	r0, r4
    52ba:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
    52be:	mov	r0, r5
    52c0:	pop	{r4, r5, r6, pc}
    52c2:	nop

000052c4 <SharedSpiCard::syncDevice()>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SharedSpiCard::syncDevice() {
  if (m_state == WRITE_STATE) {
    52c4:	ldrb	r3, [r0, #20]
    52c6:	cmp	r3, #2
    52c8:	beq.n	52d6 <SharedSpiCard::syncDevice()+0x12>
    return writeStop();
  }
  if (m_state == READ_STATE) {
    52ca:	cmp	r3, #1
    52cc:	beq.n	52d2 <SharedSpiCard::syncDevice()+0xe>
    return readStop();
  }
  return true;
}
    52ce:	movs	r0, #1
    52d0:	bx	lr
bool SharedSpiCard::syncDevice() {
  if (m_state == WRITE_STATE) {
    return writeStop();
  }
  if (m_state == READ_STATE) {
    return readStop();
    52d2:	b.w	5284 <SharedSpiCard::readStop()>
  }
}
//------------------------------------------------------------------------------
bool SharedSpiCard::syncDevice() {
  if (m_state == WRITE_STATE) {
    return writeStop();
    52d6:	ldr	r3, [r0, #0]
    52d8:	ldr	r3, [r3, #104]	; 0x68
    52da:	bx	r3

000052dc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    52dc:	push	{r3, r4, r5, r6, r7, lr}
    52de:	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    52e0:	ldrb	r3, [r0, #20]
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    52e2:	mov	r6, r0
    52e4:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    52e6:	cmp	r3, #1
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    52e8:	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    52ea:	beq.n	5326 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if (!readStart(sector)) {
    52ec:	mov	r1, r5
    52ee:	mov	r0, r6
    52f0:	bl	5230 <SharedSpiCard::readStart(unsigned long)>
    52f4:	cbz	r0, 5316 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3a>
      goto fail;
    }
    m_curSector = sector;
    52f6:	str	r5, [r6, #24]
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    52f8:	cbz	r7, 531a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3e>
    52fa:	movs	r5, #0
    52fc:	b.n	5302 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
    52fe:	cmp	r7, r5
    5300:	beq.n	531a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3e>
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    5302:	mov.w	r2, #512	; 0x200
    5306:	mov	r1, r4
    5308:	mov	r0, r6
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    530a:	adds	r5, #1
    530c:	add	r4, r2
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    530e:	bl	4f34 <SharedSpiCard::readData(unsigned char*, unsigned int)>
      goto fail;
    }
    m_curSector = sector;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst)) {
    5312:	cmp	r0, #0
    5314:	bne.n	52fe <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : readStop();

fail:
  return false;
    5316:	movs	r0, #0
    5318:	pop	{r3, r4, r5, r6, r7, pc}
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst)) {
      goto fail;
    }
  }
  m_curSector += ns;
    531a:	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    531c:	ldrb	r0, [r6, #28]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst)) {
      goto fail;
    }
  }
  m_curSector += ns;
    531e:	add	r7, r3
    5320:	str	r7, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    5322:	cbz	r0, 532e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x52>

fail:
  return false;
}
    5324:	pop	{r3, r4, r5, r6, r7, pc}
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
  if (sdState() != READ_STATE || sector != m_curSector) {
    5326:	ldr	r3, [r0, #24]
    5328:	cmp	r3, r1
    532a:	bne.n	52ec <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x10>
    532c:	b.n	52f8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
    if (!readData(dst)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : readStop();
    532e:	mov	r0, r6

fail:
  return false;
}
    5330:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (!readData(dst)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : readStop();
    5334:	b.w	5284 <SharedSpiCard::readStop()>

00005338 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    5338:	push	{r4, r5, r6, lr}
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    SPI_ASSERT_ACTIVE;
    m_spiDriver.send(data);
    533a:	adds	r4, r0, #4
    533c:	mov	r6, r2
    533e:	mov	r5, r0
    5340:	mov	r0, r4
    5342:	bl	685c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    SPI_ASSERT_ACTIVE;
    m_spiDriver.send(buf, n);
    5346:	mov.w	r2, #512	; 0x200
    534a:	mov	r1, r6
    534c:	mov	r0, r4
    534e:	bl	6870 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    SPI_ASSERT_ACTIVE;
    m_spiDriver.send(data);
    5352:	mov	r0, r4
    5354:	movs	r1, #255	; 0xff
    5356:	bl	685c <SdSpiArduinoDriver::send(unsigned char)>
    535a:	mov	r0, r4
    535c:	movs	r1, #255	; 0xff
    535e:	bl	685c <SdSpiArduinoDriver::send(unsigned char)>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    5362:	mov	r0, r4
    5364:	bl	6824 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    5368:	and.w	r3, r0, #31
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    536c:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    536e:	cmp	r3, #5
    5370:	beq.n	5386 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    5372:	movs	r3, #33	; 0x21
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    5374:	ldrb	r0, [r5, #19]
    5376:	strb	r3, [r5, #18]
    5378:	cbnz	r0, 537c <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    537a:	pop	{r4, r5, r6, pc}
    537c:	mov	r0, r5
    537e:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  }
  return true;

fail:
  spiStop();
  return false;
    5382:	movs	r0, #0
    5384:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    5386:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    5388:	pop	{r4, r5, r6, pc}
    538a:	nop

0000538c <SharedSpiCard::writeData(unsigned char const*)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeData(const uint8_t* src) {
    538c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5390:	ldr	r5, [pc, #80]	; (53e4 <SharedSpiCard::writeData(unsigned char const*)+0x58>)
    5392:	mov	r7, r0
    5394:	mov	r8, r1
    5396:	adds	r6, r0, #4
    5398:	ldr	r4, [r5, #0]
class Timeout {
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) { set(ms); }
  uint16_t millis16() { return millis(); }
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    539a:	add.w	r4, r4, #600	; 0x258
    539e:	uxth	r4, r4
    53a0:	b.n	53aa <SharedSpiCard::writeData(unsigned char const*)+0x1e>
    53a2:	ldr	r3, [r5, #0]
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    if (timeout.timedOut()) {
    53a4:	subs	r3, r4, r3
    53a6:	lsls	r3, r3, #16
    53a8:	bmi.n	53c8 <SharedSpiCard::writeData(unsigned char const*)+0x3c>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    53aa:	mov	r0, r6
    53ac:	bl	6824 <SdSpiArduinoDriver::receive()>
  return true;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    53b0:	cmp	r0, #255	; 0xff
    53b2:	bne.n	53a2 <SharedSpiCard::writeData(unsigned char const*)+0x16>
  // wait for previous write to finish
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    53b4:	mov	r2, r8
    53b6:	movs	r1, #252	; 0xfc
    53b8:	mov	r0, r7
    53ba:	bl	5338 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    53be:	cbnz	r0, 53de <SharedSpiCard::writeData(unsigned char const*)+0x52>
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    53c0:	ldrb	r0, [r7, #19]
    53c2:	cbnz	r0, 53d2 <SharedSpiCard::writeData(unsigned char const*)+0x46>
  return true;

fail:
  spiStop();
  return false;
}
    53c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    53c8:	movs	r3, #37	; 0x25
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    53ca:	ldrb	r0, [r7, #19]
    53cc:	strb	r3, [r7, #18]
    53ce:	cmp	r0, #0
    53d0:	beq.n	53c4 <SharedSpiCard::writeData(unsigned char const*)+0x38>
    53d2:	mov	r0, r7
    53d4:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  }
  return true;

fail:
  spiStop();
  return false;
    53d8:	movs	r0, #0
    53da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53e2:	nop
    53e4:	.word	0x20017c78

000053e8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    53e8:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    53ea:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    53ee:	ldr	r3, [r3, #92]	; 0x5c
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    53f0:	sub	sp, #8
    53f2:	ldr	r5, [pc, #160]	; (5494 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xac>)
    53f4:	mov	r4, r0
    53f6:	mov	r6, r2
    53f8:	cmp	r3, r5
    53fa:	bne.n	546c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x84>
  /** \return success if sync successful. Not for user apps. */
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const { return m_type; }
    53fc:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    53fe:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD24, sector)) {
    5400:	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    5402:	it	ne
    5404:	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, sector)) {
    5406:	mov	r2, r1
    5408:	movs	r1, #24
    540a:	bl	4de8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    540e:	cbz	r0, 5428 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x40>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    5410:	movs	r3, #13
    5412:	strb	r3, [r4, #18]
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    5414:	ldrb	r5, [r4, #19]
    5416:	cbz	r5, 5420 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
    5418:	mov	r0, r4
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    541a:	movs	r5, #0
    541c:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
}
    5420:	mov	r0, r5
    5422:	add	sp, #8
    5424:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  if (cardCommand(CMD24, sector)) {
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_SECTOR, src)) {
    5428:	mov	r2, r6
    542a:	movs	r1, #254	; 0xfe
    542c:	mov	r0, r4
    542e:	bl	5338 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    5432:	mov	r5, r0
    5434:	cmp	r0, #0
    5436:	beq.n	5414 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2c>
    5438:	ldr	r7, [pc, #92]	; (5498 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
    543a:	add.w	r8, r4, #4
    543e:	ldr	r6, [r7, #0]
class Timeout {
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) { set(ms); }
  uint16_t millis16() { return millis(); }
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    5440:	add.w	r6, r6, #600	; 0x258
    5444:	uxth	r6, r6
    5446:	b.n	5450 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x68>
    5448:	ldr	r3, [r7, #0]
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    if (timeout.timedOut()) {
    544a:	subs	r3, r6, r3
    544c:	lsls	r3, r3, #16
    544e:	bmi.n	5474 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8c>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    5450:	mov	r0, r8
    5452:	bl	6824 <SdSpiArduinoDriver::receive()>
  return true;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    5456:	cmp	r0, #255	; 0xff
    5458:	bne.n	5448 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x60>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
    545a:	movs	r2, #0
    545c:	movs	r1, #13
    545e:	mov	r0, r4
    5460:	bl	4de8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5464:	cbz	r0, 547a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x92>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    5466:	movs	r3, #10
    5468:	strb	r3, [r4, #18]
    546a:	b.n	5414 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2c>
    546c:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    546e:	blx	r3
    5470:	ldr	r1, [sp, #4]
    5472:	b.n	53fe <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    5474:	movs	r3, #36	; 0x24
    5476:	strb	r3, [r4, #18]
    5478:	b.n	5414 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2c>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    547a:	mov	r0, r8
    547c:	bl	6824 <SdSpiArduinoDriver::receive()>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
    5480:	cmp	r0, #0
    5482:	bne.n	5466 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x7e>
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    5484:	ldrb	r3, [r4, #19]
    5486:	cmp	r3, #0
    5488:	beq.n	5420 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
    548a:	mov	r0, r4
    goto fail;
  }
#endif  // CHECK_FLASH_PROGRAMMING

  spiStop();
  return true;
    548c:	mov	r5, r3
    548e:	bl	4d0c <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
    5492:	b.n	5420 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
    5494:	.word	0x00004c1d
    5498:	.word	0x20017c78

0000549c <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  }
  m_dedicatedSpi = value;
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    549c:	push	{r4}
  if (m_dedicatedSpi) {
    549e:	ldrb	r4, [r0, #28]
    54a0:	cbnz	r4, 54aa <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe>
    return writeSectors(sector, src, 1);
  }
  return SharedSpiCard::writeSector(sector, src);
}
    54a2:	ldr.w	r4, [sp], #4
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_dedicatedSpi) {
    return writeSectors(sector, src, 1);
  }
  return SharedSpiCard::writeSector(sector, src);
    54a6:	b.w	53e8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_dedicatedSpi) {
    return writeSectors(sector, src, 1);
    54aa:	ldr	r4, [r0, #0]
    54ac:	movs	r3, #1
    54ae:	ldr	r4, [r4, #36]	; 0x24
    54b0:	mov	ip, r4
  }
  return SharedSpiCard::writeSector(sector, src);
}
    54b2:	ldr.w	r4, [sp], #4
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_dedicatedSpi) {
    return writeSectors(sector, src, 1);
    54b6:	bx	ip

000054b8 <SdioCard::end()>:
   */
  bool cardCMD6(uint32_t arg, uint8_t* status);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    54b8:	bx	lr
    54ba:	nop

000054bc <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    54bc:	ldr	r3, [pc, #32]	; (54e0 <sdIrs()+0x24>)
    54be:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    54c0:	ldr	r2, [pc, #32]	; (54e4 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    54c2:	ldr	r0, [pc, #36]	; (54e8 <sdIrs()+0x2c>)
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    54c4:	push	{r4}
  SDHC_IRQSIGEN = 0;
    54c6:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    54c8:	ldr	r4, [r3, #48]	; 0x30
    54ca:	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    54cc:	ldr	r2, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    54ce:	ldr.w	r4, [sp], #4
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
    54d2:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    54d4:	ldr	r2, [r3, #72]	; 0x48
    54d6:	bic.w	r2, r2, #129	; 0x81
    54da:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    54dc:	strb	r1, [r0, #0]
}
    54de:	bx	lr
    54e0:	.word	0x402c0000
    54e4:	.word	0x20017394
    54e8:	.word	0x20017caa

000054ec <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    54ec:	ldr	r3, [pc, #12]	; (54fc <isBusyCommandComplete()+0x10>)
    54ee:	ldr	r0, [pc, #16]	; (5500 <isBusyCommandComplete()+0x14>)
    54f0:	ldr	r3, [r3, #48]	; 0x30
    54f2:	ands	r0, r3
}
    54f4:	clz	r0, r0
    54f8:	lsrs	r0, r0, #5
    54fa:	bx	lr
    54fc:	.word	0x402c0000
    5500:	.word	0x000f0001

00005504 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    5504:	ldr	r3, [pc, #8]	; (5510 <isBusyCommandInhibit()+0xc>)
    5506:	ldr	r0, [r3, #36]	; 0x24
    5508:	and.w	r0, r0, #1
    550c:	bx	lr
    550e:	nop
    5510:	.word	0x402c0000

00005514 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    5514:	ldr	r3, [pc, #12]	; (5524 <isBusyDat()+0x10>)
    5516:	ldr	r0, [r3, #36]	; 0x24
    5518:	eor.w	r0, r0, #16777216	; 0x1000000
    551c:	ubfx	r0, r0, #24, #1
    5520:	bx	lr
    5522:	nop
    5524:	.word	0x402c0000

00005528 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() { return m_dmaBusy; }
    5528:	ldr	r3, [pc, #4]	; (5530 <isBusyDMA()+0x8>)
    552a:	ldrb	r0, [r3, #0]
    552c:	bx	lr
    552e:	nop
    5530:	.word	0x20017caa

00005534 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    5534:	ldr	r3, [pc, #12]	; (5544 <isBusyFifoRead()+0x10>)
    5536:	ldr	r0, [r3, #36]	; 0x24
    5538:	eor.w	r0, r0, #2048	; 0x800
    553c:	ubfx	r0, r0, #11, #1
    5540:	bx	lr
    5542:	nop
    5544:	.word	0x402c0000

00005548 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
    5548:	ldr	r3, [pc, #12]	; (5558 <isBusyFifoWrite()+0x10>)
    554a:	ldr	r0, [r3, #36]	; 0x24
    554c:	eor.w	r0, r0, #1024	; 0x400
    5550:	ubfx	r0, r0, #10, #1
    5554:	bx	lr
    5556:	nop
    5558:	.word	0x402c0000

0000555c <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    555c:	ldr	r3, [pc, #12]	; (556c <isBusyTransferComplete()+0x10>)
    555e:	ldr	r0, [pc, #16]	; (5570 <isBusyTransferComplete()+0x14>)
    5560:	ldr	r3, [r3, #48]	; 0x30
    5562:	ands	r0, r3
}
    5564:	clz	r0, r0
    5568:	lsrs	r0, r0, #5
    556a:	bx	lr
    556c:	.word	0x402c0000
    5570:	.word	0x117f0002

00005574 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    5574:	mov.w	r2, #1000	; 0x3e8
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5578:	ldr	r3, [pc, #172]	; (5628 <setSdclk(unsigned long)+0xb4>)
  //  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    557a:	ldr	r1, [pc, #176]	; (562c <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    557c:	mul.w	r0, r2, r0
  //  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5580:	ldr	r1, [r1, #36]	; 0x24
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5582:	ldr.w	r2, [r3, #256]	; 0x100
    5586:	ldr	r3, [pc, #168]	; (5630 <setSdclk(unsigned long)+0xbc>)
    5588:	ubfx	r1, r1, #11, #3
    558c:	and.w	r2, r2, #63	; 0x3f
    5590:	adds	r1, #1
    5592:	umull	r2, r3, r3, r2
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    5596:	push	{r4, r5, r6, r7}
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5598:	lsrs	r3, r3, #2
    559a:	ldr	r5, [pc, #152]	; (5634 <setSdclk(unsigned long)+0xc0>)
    559c:	udiv	r5, r5, r3
    55a0:	udiv	r5, r5, r1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    55a4:	cmp.w	r0, r5, lsr #4
    55a8:	bcs.n	561c <setSdclk(unsigned long)+0xa8>
    55aa:	movs	r2, #1
    55ac:	b.n	55b2 <setSdclk(unsigned long)+0x3e>
    55ae:	cmp	r2, #255	; 0xff
    55b0:	bhi.n	55be <setSdclk(unsigned long)+0x4a>
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
    55b2:	lsls	r2, r2, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    55b4:	lsls	r3, r2, #4
    55b6:	udiv	r3, r5, r3
    55ba:	cmp	r0, r3
    55bc:	bcc.n	55ae <setSdclk(unsigned long)+0x3a>
    55be:	lsrs	r1, r2, #1
    55c0:	lsls	r7, r1, #8
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    55c2:	udiv	r3, r5, r2
    55c6:	cmp	r0, r3
    55c8:	bcs.n	5622 <setSdclk(unsigned long)+0xae>
    55ca:	lsls	r4, r2, #1
    55cc:	movs	r1, #1
    55ce:	b.n	55d2 <setSdclk(unsigned long)+0x5e>
    55d0:	mov	r4, r3
    dvs++;
    55d2:	adds	r6, r1, #1

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    55d4:	udiv	r3, r5, r4
    55d8:	cmp	r0, r3
    55da:	add.w	r3, r2, r4
    55de:	bcs.n	5618 <setSdclk(unsigned long)+0xa4>
    55e0:	cmp	r6, #16
    55e2:	mov	r1, r6
    55e4:	bne.n	55d0 <setSdclk(unsigned long)+0x5c>
    55e6:	movs	r3, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    55e8:	mov.w	r2, #1000	; 0x3e8
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    55ec:	ldr	r6, [pc, #72]	; (5638 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    55ee:	ldr	r1, [pc, #76]	; (563c <setSdclk(unsigned long)+0xc8>)
    55f0:	mul.w	r4, r2, r4
  // Change dividers.
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
                      SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    55f4:	ldr	r0, [pc, #72]	; (5640 <setSdclk(unsigned long)+0xcc>)
                SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    55f6:	mov	r2, r6
    sdclkfs <<= 1;
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    55f8:	udiv	r5, r5, r4
    55fc:	str	r5, [r1, #0]
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    55fe:	ldr	r1, [r6, #44]	; 0x2c
                      SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    5600:	ands	r0, r1
    5602:	orr.w	r0, r0, #917504	; 0xe0000
    5606:	orr.w	r1, r0, r7
    560a:	orrs	r1, r3
                SDHC_SYSCTL_SDCLKFS(sdclkfs);
    560c:	str	r1, [r6, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    560e:	ldr	r3, [r2, #36]	; 0x24
    5610:	lsls	r3, r3, #28
    5612:	bpl.n	560e <setSdclk(unsigned long)+0x9a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    5614:	pop	{r4, r5, r6, r7}
    5616:	bx	lr
    5618:	lsls	r3, r1, #4
    561a:	b.n	55e8 <setSdclk(unsigned long)+0x74>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    561c:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    561e:	movs	r2, #1
    5620:	b.n	55c2 <setSdclk(unsigned long)+0x4e>

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5622:	mov	r4, r2
    5624:	movs	r3, #0
    5626:	b.n	55e8 <setSdclk(unsigned long)+0x74>
    5628:	.word	0x400d8000
    562c:	.word	0x400fc000
    5630:	.word	0xaaaaaaab
    5634:	.word	0x5e69ec00
    5638:	.word	0x402c0000
    563c:	.word	0x20006a6c
    5640:	.word	0xfff0000f

00005644 <SdioCard::errorCode() const>:
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const { return m_errorCode; }
    5644:	ldr	r3, [pc, #4]	; (564c <SdioCard::errorCode() const+0x8>)
    5646:	ldrb	r0, [r3, #0]
    5648:	bx	lr
    564a:	nop
    564c:	.word	0x200021d6

00005650 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const { return m_irqstat; }
    5650:	ldr	r3, [pc, #4]	; (5658 <SdioCard::errorData() const+0x8>)
    5652:	ldr	r0, [r3, #0]
    5654:	bx	lr
    5656:	nop
    5658:	.word	0x20017394

0000565c <SdioCard::readCID(cid_t*)>:
  }
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    565c:	push	{r4, r5}
  memcpy(cid, &m_cid, sizeof(cid_t));
    565e:	ldr	r4, [pc, #20]	; (5674 <SdioCard::readCID(cid_t*)+0x18>)
  }
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    5660:	mov	r5, r1
  memcpy(cid, &m_cid, sizeof(cid_t));
    5662:	ldmia	r4!, {r0, r1, r2, r3}
    5664:	str	r0, [r5, #0]
  return true;
}
    5666:	movs	r0, #1
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, sizeof(cid_t));
    5668:	str	r1, [r5, #4]
    566a:	str	r2, [r5, #8]
    566c:	str	r3, [r5, #12]
  return true;
}
    566e:	pop	{r4, r5}
    5670:	bx	lr
    5672:	nop
    5674:	.word	0x20016c80

00005678 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    5678:	push	{r4, r5}
  memcpy(csd, &m_csd, sizeof(csd_t));
    567a:	ldr	r4, [pc, #20]	; (5690 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, sizeof(cid_t));
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    567c:	mov	r5, r1
  memcpy(csd, &m_csd, sizeof(csd_t));
    567e:	ldmia	r4!, {r0, r1, r2, r3}
    5680:	str	r0, [r5, #0]
  return true;
}
    5682:	movs	r0, #1
  memcpy(cid, &m_cid, sizeof(cid_t));
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, sizeof(csd_t));
    5684:	str	r1, [r5, #4]
    5686:	str	r2, [r5, #8]
    5688:	str	r3, [r5, #12]
  return true;
}
    568a:	pop	{r4, r5}
    568c:	bx	lr
    568e:	nop
    5690:	.word	0x20016c90

00005694 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    5694:	ldr	r3, [pc, #8]	; (56a0 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    5696:	movs	r0, #1
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    5698:	ldr	r3, [r3, #0]
    569a:	str	r3, [r1, #0]
  return true;
}
    569c:	bx	lr
    569e:	nop
    56a0:	.word	0x20016ca0

000056a4 <SdioCard::readSCR(scr_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
  memcpy(scr, &m_scr, sizeof(scr_t));
    56a4:	ldr	r3, [pc, #12]	; (56b4 <SdioCard::readSCR(scr_t*)+0x10>)
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
    56a6:	mov	r2, r1
  memcpy(scr, &m_scr, sizeof(scr_t));
    56a8:	ldmia	r3!, {r0, r1}
    56aa:	str	r0, [r2, #0]
  return true;
}
    56ac:	movs	r0, #1
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
  memcpy(scr, &m_scr, sizeof(scr_t));
    56ae:	str	r1, [r2, #4]
  return true;
}
    56b0:	bx	lr
    56b2:	nop
    56b4:	.word	0x20016ca8

000056b8 <SdioCard::readSDS(sds_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSDS(sds_t* sds) {
    56b8:	push	{r4, r5, r6, r7}
  memcpy(sds, &m_sds, sizeof(sds_t));
    56ba:	ldr	r6, [pc, #40]	; (56e4 <SdioCard::readSDS(sds_t*)+0x2c>)
    56bc:	mov	r5, r1
    56be:	add.w	r7, r6, #64	; 0x40
    56c2:	mov	r4, r6
    56c4:	adds	r5, #16
    56c6:	adds	r6, #16
    56c8:	ldmia	r4!, {r0, r1, r2, r3}
    56ca:	cmp	r4, r7
    56cc:	str.w	r0, [r5, #-16]
    56d0:	str.w	r1, [r5, #-12]
    56d4:	str.w	r2, [r5, #-8]
    56d8:	str.w	r3, [r5, #-4]
    56dc:	bne.n	56c2 <SdioCard::readSDS(sds_t*)+0xa>
  return true;
}
    56de:	movs	r0, #1
    56e0:	pop	{r4, r5, r6, r7}
    56e2:	bx	lr
    56e4:	.word	0x20016cb0

000056e8 <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    56e8:	bx	lr
    56ea:	nop

000056ec <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    56ec:	push	{r3, r4, r5, r6, r7, lr}
    56ee:	mov	r5, r0
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    56f0:	ldr	r7, [pc, #28]	; (5710 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    56f2:	bl	7e04 <micros>
    56f6:	mov	r6, r0
    56f8:	b.n	5704 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    56fa:	bl	7e04 <micros>
    56fe:	subs	r0, r0, r6
    5700:	cmp	r0, r7
    5702:	bhi.n	570c <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    5704:	blx	r5
    5706:	mov	r4, r0
    5708:	cmp	r0, #0
    570a:	bne.n	56fa <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    570c:	mov	r0, r4
    570e:	pop	{r3, r4, r5, r6, r7, pc}
    5710:	.word	0x000f4240

00005714 <yieldTimeout(bool (*)())>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    5714:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    5718:	ldr.w	r8, [pc, #64]	; 575c <yieldTimeout(bool (*)())+0x48>
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    571c:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    571e:	ldr	r7, [pc, #56]	; (5758 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    5720:	str.w	r0, [r8]
  uint32_t m = micros();
    5724:	bl	7e04 <micros>
    5728:	mov	r6, r0
    572a:	b.n	573a <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    572c:	bl	7e04 <micros>
    5730:	subs	r0, r0, r6
    5732:	cmp	r0, r7
    5734:	bhi.n	574c <yieldTimeout(bool (*)())+0x38>
      m_busyFcn = 0;
      return true;
    }
    yield();
    5736:	bl	85d4 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    573a:	blx	r5
    573c:	mov	r4, r0
    573e:	cmp	r0, #0
    5740:	bne.n	572c <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    5742:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    5746:	mov	r0, r4
    5748:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    574c:	movs	r3, #0
    }
    yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    574e:	mov	r0, r4
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    5750:	str.w	r3, [r8]
    }
    yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    5754:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5758:	.word	0x000f4240
    575c:	.word	0x20017390

00005760 <SdioCard::~SdioCard()>:
    5760:	push	{r4, lr}
    5762:	mov	r4, r0
    5764:	movs	r1, #12
    5766:	bl	8b68 <operator delete(void*, unsigned int)>
    576a:	mov	r0, r4
    576c:	pop	{r4, pc}
    576e:	nop

00005770 <enableGPIO(bool) [clone .part.0]>:
static uint32_t baseClock() { return F_CPU; }

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    5770:	ldr	r3, [pc, #60]	; (57b0 <enableGPIO(bool) [clone .part.0]+0x40>)
    5772:	movs	r2, #0

  const uint32_t DATA_MASK =
      CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    5774:	movw	r1, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    5778:	movw	r0, #4280	; 0x10b8
static uint32_t baseClock() { return F_CPU; }

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    577c:	str.w	r2, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    5780:	str.w	r2, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    5784:	str.w	r2, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    5788:	str.w	r2, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    578c:	str.w	r2, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    5790:	str.w	r2, [r3, #456]	; 0x1c8

  const uint32_t DATA_MASK =
      CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    5794:	str.w	r1, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    5798:	str.w	r1, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    579c:	str.w	r1, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    57a0:	str.w	r0, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    57a4:	str.w	r1, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    57a8:	str.w	r1, [r3, #952]	; 0x3b8
    57ac:	bx	lr
    57ae:	nop
    57b0:	.word	0x401f8000

000057b4 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
                    : SD_CARD_TYPE_SD1;
    57b4:	ldr	r3, [pc, #20]	; (57cc <SdioCard::type() const+0x18>)
    57b6:	ldrb	r3, [r3, #0]
    57b8:	cbz	r3, 57c8 <SdioCard::type() const+0x14>
    57ba:	ldr	r3, [pc, #20]	; (57d0 <SdioCard::type() const+0x1c>)
    57bc:	ldrb	r3, [r3, #0]
    57be:	cmp	r3, #0
    57c0:	ite	ne
    57c2:	movne	r0, #3
    57c4:	moveq	r0, #2
    57c6:	bx	lr
    57c8:	movs	r0, #1
}
    57ca:	bx	lr
    57cc:	.word	0x20017ca7
    57d0:	.word	0x20017ca8

000057d4 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    57d4:	push	{r3, r4, r5, lr}
    57d6:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    57d8:	ldr	r0, [pc, #80]	; (582c <cardCommand(unsigned long, unsigned long)+0x58>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    57da:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    57dc:	bl	56ec <waitTimeout(bool (*)())>
    57e0:	cbnz	r0, 5826 <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    57e2:	ldr	r3, [pc, #76]	; (5830 <cardCommand(unsigned long, unsigned long)+0x5c>)
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    57e4:	lsls	r1, r4, #10
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    57e6:	str	r5, [r3, #8]
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    57e8:	bpl.n	57fa <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    57ea:	ldr	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    57ec:	uxtb	r2, r4
  }
  SDHC_CMDARG = arg;
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    57ee:	bic.w	r1, r1, #255	; 0xff
    57f2:	str	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    57f4:	ldr	r1, [r3, #72]	; 0x48
    57f6:	orrs	r2, r1
    57f8:	str	r2, [r3, #72]	; 0x48
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    57fa:	bic.w	r4, r4, #255	; 0xff
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    57fe:	ldr	r5, [pc, #48]	; (5830 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    5800:	ldr	r0, [pc, #48]	; (5834 <cardCommand(unsigned long, unsigned long)+0x60>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    5802:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    5804:	bl	56ec <waitTimeout(bool (*)())>
    5808:	cbnz	r0, 5826 <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    580a:	ldr	r2, [r5, #48]	; 0x30
    580c:	ldr	r3, [pc, #40]	; (5838 <cardCommand(unsigned long, unsigned long)+0x64>)
    580e:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5810:	ldr	r2, [r3, #0]
    5812:	str	r2, [r5, #48]	; 0x30

  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5814:	ldr	r2, [r3, #0]
    5816:	lsls	r2, r2, #31
    5818:	bpl.n	5826 <cardCommand(unsigned long, unsigned long)+0x52>
    581a:	ldr	r3, [r3, #0]
    581c:	tst.w	r3, #983040	; 0xf0000
    5820:	bne.n	5826 <cardCommand(unsigned long, unsigned long)+0x52>
    5822:	movs	r0, #1
}
    5824:	pop	{r3, r4, r5, pc}
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5826:	movs	r0, #0
    5828:	pop	{r3, r4, r5, pc}
    582a:	nop
    582c:	.word	0x00005505
    5830:	.word	0x402c0000
    5834:	.word	0x000054ed
    5838:	.word	0x20017394

0000583c <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    583c:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    583e:	ldr	r3, [pc, #28]	; (585c <isBusyCMD13()+0x20>)
    5840:	ldr	r0, [pc, #28]	; (5860 <isBusyCMD13()+0x24>)
    5842:	ldr	r1, [r3, #0]
    5844:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    5848:	cbz	r0, 5858 <isBusyCMD13()+0x1c>
    584a:	ldr	r3, [pc, #24]	; (5864 <isBusyCMD13()+0x28>)
    584c:	ldr	r0, [r3, #16]
    584e:	eor.w	r0, r0, #256	; 0x100
    5852:	ubfx	r0, r0, #8, #1
    5856:	pop	{r3, pc}
    5858:	movs	r0, #1
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
    585a:	pop	{r3, pc}
    585c:	.word	0x20016ca4
    5860:	.word	0x0d1a0000
    5864:	.word	0x402c0000

00005868 <SdioCard::status()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() { return transferStop(); }
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
//------------------------------------------------------------------------------
uint32_t SdioCard::status() { return statusCMD13(); }
    5868:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    586a:	ldr	r3, [pc, #16]	; (587c <SdioCard::status()+0x14>)
    586c:	ldr	r0, [pc, #16]	; (5880 <SdioCard::status()+0x18>)
    586e:	ldr	r1, [r3, #0]
    5870:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    5874:	cbz	r0, 587a <SdioCard::status()+0x12>
    5876:	ldr	r3, [pc, #12]	; (5884 <SdioCard::status()+0x1c>)
    5878:	ldr	r0, [r3, #16]
//------------------------------------------------------------------------------
bool SdioCard::readStop() { return transferStop(); }
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
//------------------------------------------------------------------------------
uint32_t SdioCard::status() { return statusCMD13(); }
    587a:	pop	{r3, pc}
    587c:	.word	0x20016ca4
    5880:	.word	0x0d1a0000
    5884:	.word	0x402c0000

00005888 <readReg16(unsigned long, void*)>:
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    5888:	ldr	r3, [pc, #80]	; (58dc <readReg16(unsigned long, void*)+0x54>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    588a:	push	{r4, r5, r6, lr}
    588c:	mov	r6, r1
    588e:	sub	sp, #16
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    5890:	ldr	r1, [r3, #0]
    5892:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    5896:	cbz	r0, 58d6 <readReg16(unsigned long, void*)+0x4e>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    5898:	ldr	r1, [pc, #68]	; (58e0 <readReg16(unsigned long, void*)+0x58>)
    589a:	add.w	r5, r6, #15
  for (int i = 0; i < 15; i++) {
    589e:	movs	r3, #0
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    58a0:	ldr	r2, [r1, #16]
    58a2:	str	r2, [sp, #0]
    58a4:	ldr	r4, [r1, #20]
    58a6:	str	r4, [sp, #4]
    58a8:	ldr	r4, [r1, #24]
    58aa:	str	r4, [sp, #8]
    58ac:	ldr	r1, [r1, #28]
    58ae:	str	r1, [sp, #12]
    58b0:	b.n	58b6 <readReg16(unsigned long, void*)+0x2e>
    58b2:	ldr.w	r2, [r4, #-16]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    58b6:	and.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    58ba:	adds	r3, #1
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    58bc:	lsls	r1, r1, #3
    58be:	bic.w	r4, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    58c2:	cmp	r3, #15
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    58c4:	lsr.w	r2, r2, r1
    58c8:	add	r1, sp, #16
    58ca:	strb.w	r2, [r5, #-1]!
    58ce:	add	r4, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    58d0:	bne.n	58b2 <readReg16(unsigned long, void*)+0x2a>
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
  }
  d[15] = 0;
    58d2:	movs	r3, #0
    58d4:	strb	r3, [r6, #15]
  return true;
}
    58d6:	add	sp, #16
    58d8:	pop	{r4, r5, r6, pc}
    58da:	nop
    58dc:	.word	0x20016ca4
    58e0:	.word	0x402c0000

000058e4 <cardAcmd(unsigned long, unsigned long, unsigned long)>:
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
    58e4:	push	{r3, r4, r5, lr}
    58e6:	mov	r4, r1
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    58e8:	mov	r1, r0
    58ea:	ldr	r0, [pc, #24]	; (5904 <cardAcmd(unsigned long, unsigned long, unsigned long)+0x20>)
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
    58ec:	mov	r5, r2
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    58ee:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    58f2:	cbnz	r0, 58f6 <cardAcmd(unsigned long, unsigned long, unsigned long)+0x12>
}
    58f4:	pop	{r3, r4, r5, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    58f6:	mov	r1, r5
    58f8:	mov	r0, r4
}
    58fa:	ldmia.w	sp!, {r3, r4, r5, lr}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    58fe:	b.w	57d4 <cardCommand(unsigned long, unsigned long)>
    5902:	nop
    5904:	.word	0x371a0000

00005908 <waitDmaStatus()>:
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
    5908:	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    590a:	ldr	r0, [pc, #32]	; (592c <waitDmaStatus()+0x24>)
    590c:	bl	5714 <yieldTimeout(bool (*)())>
    5910:	cbnz	r0, 5928 <waitDmaStatus()+0x20>
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5912:	ldr	r3, [pc, #28]	; (5930 <waitDmaStatus()+0x28>)
    5914:	ldr	r2, [r3, #0]
    5916:	lsls	r2, r2, #30
    5918:	bpl.n	592a <waitDmaStatus()+0x22>
    591a:	ldr	r3, [r3, #0]
    591c:	ldr	r0, [pc, #20]	; (5934 <waitDmaStatus()+0x2c>)
    591e:	ands	r0, r3
    5920:	clz	r0, r0
    5924:	lsrs	r0, r0, #5
    5926:	pop	{r3, pc}
    5928:	movs	r0, #0
}
    592a:	pop	{r3, pc}
    592c:	.word	0x00005529
    5930:	.word	0x20017394
    5934:	.word	0x117f0000

00005938 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp, uint32_t sector, uint8_t* buf,
                        size_t n) {
    5938:	push	{r3, r4, r5, r6, r7, lr}
    593a:	ands.w	r4, r2, #3
    593e:	it	ne
    5940:	movne	r4, #1
    5942:	cmp	r3, #0
    5944:	it	eq
    5946:	orreq.w	r4, r4, #1
  if ((3 & (uint32_t)buf) || n == 0) {
    594a:	cbz	r4, 595e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x26>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    594c:	ldr	r1, [pc, #112]	; (59c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
    594e:	movs	r0, #38	; 0x26
  m_errorLine = line;
    5950:	ldr	r3, [pc, #112]	; (59c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
    5952:	movw	r2, #547	; 0x223
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5956:	strb	r0, [r1, #0]
  m_errorLine = line;
    5958:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    return false;
  }
  return waitDmaStatus();
}
    595a:	movs	r0, #0
    595c:	pop	{r3, r4, r5, r6, r7, pc}
    595e:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp, uint32_t sector, uint8_t* buf,
                        size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    5960:	ldr	r0, [pc, #100]	; (59c8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    5962:	mov	r5, r3
    5964:	mov	r7, r1
    5966:	mov	r4, r2
    5968:	bl	5714 <yieldTimeout(bool (*)())>
    596c:	cbnz	r0, 59aa <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    596e:	lsls	r3, r5, #16
    5970:	ldr	r2, [pc, #88]	; (59cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    5972:	ldr	r5, [pc, #92]	; (59d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    5974:	mov.w	lr, #1
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    5978:	ands	r2, r3
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    597a:	ldr	r1, [pc, #88]	; (59d4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    597c:	strb.w	lr, [r5]
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)buf;
    5980:	ldr	r3, [pc, #84]	; (59d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    5982:	orr.w	r2, r2, #512	; 0x200
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    5986:	str	r0, [r1, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5988:	ldr	r5, [pc, #80]	; (59dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    598a:	ldr	r1, [pc, #84]	; (59e0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)buf;
    598c:	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    598e:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5990:	str	r5, [r3, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    5992:	ldrb	r3, [r1, #0]
    5994:	cbnz	r3, 59ba <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    5996:	lsls	r1, r7, #9
    5998:	mov	r0, r6
    599a:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    599e:	cmp	r0, #0
    59a0:	beq.n	595a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
    return false;
  }
  return waitDmaStatus();
}
    59a2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    return false;
  }
  return waitDmaStatus();
    59a6:	b.w	5908 <waitDmaStatus()>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    59aa:	ldr	r1, [pc, #20]	; (59c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
    59ac:	movs	r0, #10
  m_errorLine = line;
    59ae:	ldr	r3, [pc, #20]	; (59c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
    59b0:	movw	r2, #550	; 0x226
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    59b4:	strb	r0, [r1, #0]
  m_errorLine = line;
    59b6:	str	r2, [r3, #0]
                        size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    59b8:	b.n	595a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    59ba:	mov	r1, r7
    59bc:	b.n	5998 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x60>
    59be:	nop
    59c0:	.word	0x200021d6
    59c4:	.word	0x20016a74
    59c8:	.word	0x0000583d
    59cc:	.word	0x1fff0000
    59d0:	.word	0x20017caa
    59d4:	.word	0x20017394
    59d8:	.word	0x402c0000
    59dc:	.word	0x117f0002
    59e0:	.word	0x20017ca8

000059e4 <SdioCard::sectorCount()>:
  uint8_t csd[16];
  // Extract big endian fields.
  /** \return Capacity in sectors */
  uint32_t capacity() const {
    uint32_t c_size;
    uint8_t ver = csd[0] >> 6;
    59e4:	ldr	r1, [pc, #92]	; (5a44 <SdioCard::sectorCount()+0x60>)
    59e6:	ldrb	r3, [r1, #0]
    if (ver == 0) {
    59e8:	asrs	r3, r3, #6
    59ea:	beq.n	5a0a <SdioCard::sectorCount()+0x26>
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
    59ec:	cmp	r3, #1
    59ee:	beq.n	59f4 <SdioCard::sectorCount()+0x10>
      c_size = (uint32_t)(csd[7] & 63) << 16;
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
      return (c_size + 1) << 10;
    } else {
      return 0;
    59f0:	movs	r0, #0
    59f2:	bx	lr
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
      c_size = (uint32_t)(csd[7] & 63) << 16;
    59f4:	ldrb	r0, [r1, #7]
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
      return (c_size + 1) << 10;
    59f6:	ldrh	r2, [r1, #8]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
      c_size = (uint32_t)(csd[7] & 63) << 16;
    59f8:	lsls	r0, r0, #16
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
      return (c_size + 1) << 10;
    59fa:	rev16	r2, r2
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
      c_size = (uint32_t)(csd[7] & 63) << 16;
    59fc:	and.w	r3, r0, #4128768	; 0x3f0000
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
      return (c_size + 1) << 10;
    5a00:	uxth	r0, r2
    5a02:	orrs	r0, r3
    5a04:	adds	r0, #1
    5a06:	lsls	r0, r0, #10
    5a08:	bx	lr
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() { return transferStop(); }
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
    5a0a:	push	{r4, r5, r6, r7}
    5a0c:	ldrb	r2, [r1, #6]
    if (ver == 0) {
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5a0e:	ldrb	r5, [r1, #9]
    5a10:	lsls	r2, r2, #10
    5a12:	ldrb	r7, [r1, #10]
    5a14:	lsls	r5, r5, #1
    5a16:	ldrb	r3, [r1, #8]
    5a18:	and.w	r2, r2, #3072	; 0xc00
    5a1c:	ldrb	r4, [r1, #5]
    5a1e:	and.w	r5, r5, #6
    5a22:	ldrb	r6, [r1, #7]
    5a24:	orr.w	r3, r2, r3, lsr #6
    5a28:	and.w	r1, r4, #15
    5a2c:	orr.w	r2, r5, r7, lsr #7
    5a30:	orr.w	r0, r3, r6, lsl #2
    5a34:	add	r2, r1
    5a36:	adds	r3, r0, #1
    5a38:	subs	r0, r2, #7
    5a3a:	pop	{r4, r5, r6, r7}
    5a3c:	lsl.w	r0, r3, r0
    5a40:	bx	lr
    5a42:	nop
    5a44:	.word	0x20016c90

00005a48 <SdioCard::isBusy()>:
uint32_t SdioCard::errorData() const { return m_irqstat; }
//------------------------------------------------------------------------------
uint32_t SdioCard::errorLine() const { return m_errorLine; }
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  if (m_sdioConfig.useDma()) {
    5a48:	ldrb	r3, [r0, #8]
    5a4a:	lsls	r3, r3, #31
    5a4c:	bpl.n	5a56 <SdioCard::isBusy()+0xe>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5a4e:	ldr	r3, [pc, #56]	; (5a88 <SdioCard::isBusy()+0x40>)
    5a50:	ldr	r3, [r3, #0]
    5a52:	cbz	r3, 5a7a <SdioCard::isBusy()+0x32>
    5a54:	bx	r3
  } else {
    if (m_transferActive) {
    5a56:	ldr	r3, [pc, #52]	; (5a8c <SdioCard::isBusy()+0x44>)
    5a58:	ldrb	r3, [r3, #0]
    5a5a:	cbnz	r3, 5a6a <SdioCard::isBusy()+0x22>
#else   // defined(__MK64FX512__) || defined(__MK66FX1M0__)
      return false;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    }
    // Use DAT0 low as busy.
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5a5c:	ldr	r3, [pc, #48]	; (5a90 <SdioCard::isBusy()+0x48>)
    5a5e:	ldr	r0, [r3, #36]	; 0x24
    5a60:	eor.w	r0, r0, #16777216	; 0x1000000
    5a64:	ubfx	r0, r0, #24, #1
  }
}
    5a68:	bx	lr
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5a6a:	ldr	r3, [pc, #36]	; (5a90 <SdioCard::isBusy()+0x48>)
bool SdioCard::isBusy() {
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    5a6c:	ldr	r0, [pc, #36]	; (5a94 <SdioCard::isBusy()+0x4c>)
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5a6e:	ldr	r3, [r3, #48]	; 0x30
bool SdioCard::isBusy() {
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    5a70:	ands	r0, r3
    5a72:	clz	r0, r0
    5a76:	lsrs	r0, r0, #5
    5a78:	bx	lr
//------------------------------------------------------------------------------
uint32_t SdioCard::errorLine() const { return m_errorLine; }
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5a7a:	ldr	r3, [pc, #28]	; (5a98 <SdioCard::isBusy()+0x50>)
    5a7c:	ldrb	r0, [r3, #0]
    5a7e:	cmp	r0, #0
    5a80:	beq.n	5a68 <SdioCard::isBusy()+0x20>
    5a82:	b.w	583c <isBusyCMD13()>
    5a86:	nop
    5a88:	.word	0x20017390
    5a8c:	.word	0x20017ca9
    5a90:	.word	0x402c0000
    5a94:	.word	0x117f0002
    5a98:	.word	0x20017ca6

00005a9c <SdioCard::cardCMD6(unsigned long, unsigned char*)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
    5a9c:	push	{r3, r4, r5, r6, r7, lr}
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    5a9e:	ldr	r0, [pc, #100]	; (5b04 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x68>)
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
    5aa0:	mov	r5, r1
    5aa2:	mov	r4, r2
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    5aa4:	bl	56ec <waitTimeout(bool (*)())>
    5aa8:	cbz	r0, 5abc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5aaa:	ldr	r1, [pc, #92]	; (5b08 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x6c>)
    5aac:	movs	r0, #10
  m_errorLine = line;
    5aae:	ldr	r3, [pc, #92]	; (5b0c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>)
    5ab0:	mov.w	r2, #788	; 0x314
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5ab4:	strb	r0, [r1, #0]
}
//------------------------------------------------------------------------------
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    5ab6:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5ab8:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    5aba:	pop	{r3, r4, r5, r6, r7, pc}
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    5abc:	ldr	r2, [pc, #80]	; (5b10 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x74>)
    5abe:	movs	r7, #1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)status;
    5ac0:	ldr	r3, [pc, #80]	; (5b14 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x78>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5ac2:	mov	r1, r5
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    5ac4:	strb	r7, [r2, #0]
  m_irqstat = 0;
    5ac6:	ldr	r6, [pc, #80]	; (5b18 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x7c>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5ac8:	ldr	r5, [pc, #80]	; (5b1c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5aca:	ldr	r2, [pc, #84]	; (5b20 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x84>)
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    5acc:	str	r0, [r6, #0]
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)status;
    5ace:	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5ad0:	ldr	r0, [pc, #80]	; (5b24 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x88>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5ad2:	str	r5, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5ad4:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5ad6:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    5ada:	cbnz	r0, 5aec <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x50>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5adc:	ldr	r1, [pc, #40]	; (5b08 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x6c>)
    5ade:	movs	r4, #4
  m_errorLine = line;
    5ae0:	ldr	r3, [pc, #40]	; (5b0c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>)
    5ae2:	movw	r2, #795	; 0x31b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5ae6:	strb	r4, [r1, #0]
  m_errorLine = line;
    5ae8:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    5aea:	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (!waitDmaStatus()) {
    5aec:	bl	5908 <waitDmaStatus()>
    5af0:	cbnz	r0, 5b00 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x64>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5af2:	ldr	r1, [pc, #20]	; (5b08 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x6c>)
    5af4:	movs	r4, #38	; 0x26
  m_errorLine = line;
    5af6:	ldr	r3, [pc, #20]	; (5b0c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>)
    5af8:	movw	r2, #798	; 0x31e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5afc:	strb	r4, [r1, #0]
  m_errorLine = line;
    5afe:	str	r2, [r3, #0]
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    5b00:	pop	{r3, r4, r5, r6, r7, pc}
    5b02:	nop
    5b04:	.word	0x0000583d
    5b08:	.word	0x200021d6
    5b0c:	.word	0x20016a74
    5b10:	.word	0x20017caa
    5b14:	.word	0x402c0000
    5b18:	.word	0x20017394
    5b1c:	.word	0x00010040
    5b20:	.word	0x117f0002
    5b24:	.word	0x063a0011

00005b28 <SdioCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5b28:	push	{r4, r5, r6, lr}
    5b2a:	mov	r6, r2
  if (m_curState != IDLE_STATE && !syncDevice()) {
    5b2c:	ldrb	r2, [r0, #9]
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5b2e:	mov	r5, r1
  if (m_curState != IDLE_STATE && !syncDevice()) {
    5b30:	cbnz	r2, 5b8e <SdioCard::erase(unsigned long, unsigned long)+0x66>
    5b32:	ldr	r2, [pc, #192]	; (5bf4 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    5b34:	ldrb	r3, [r2, #10]
    return false;
  }
  // check for single sector erase
  if (!m_csd.eraseSingleBlock()) {
    5b36:	and.w	r0, r3, #64	; 0x40
    5b3a:	and.w	r4, r0, #255	; 0xff
    5b3e:	cbz	r0, 5b68 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    5b40:	ldr	r3, [pc, #180]	; (5bf8 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    5b42:	ldrb	r3, [r3, #0]
    5b44:	cbnz	r3, 5b4a <SdioCard::erase(unsigned long, unsigned long)+0x22>
    firstSector <<= 9;
    5b46:	lsls	r5, r5, #9
    lastSector <<= 9;
    5b48:	lsls	r6, r6, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    5b4a:	mov	r1, r5
    5b4c:	ldr	r0, [pc, #172]	; (5bfc <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5b4e:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    5b52:	mov	r4, r0
    5b54:	cbnz	r0, 5b9e <SdioCard::erase(unsigned long, unsigned long)+0x76>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5b56:	ldr	r1, [pc, #168]	; (5c00 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5b58:	movs	r0, #15
  m_errorLine = line;
    5b5a:	ldr	r3, [pc, #168]	; (5c04 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    5b5c:	movw	r2, #821	; 0x335
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5b60:	strb	r0, [r1, #0]
  m_errorLine = line;
    5b62:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    5b64:	mov	r0, r4
    5b66:	pop	{r4, r5, r6, pc}
  }
  // check for single sector erase
  if (!m_csd.eraseSingleBlock()) {
    // erase size mask
    uint8_t m = m_csd.eraseSize() - 1;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    5b68:	lsls	r3, r3, #1
    5b6a:	ldrb	r1, [r2, #11]
    5b6c:	adds	r2, r6, #1
    5b6e:	and.w	r3, r3, #126	; 0x7e
    5b72:	orrs	r2, r5
    5b74:	orr.w	r3, r3, r1, lsr #7
    5b78:	tst	r3, r2
    5b7a:	beq.n	5b40 <SdioCard::erase(unsigned long, unsigned long)+0x18>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5b7c:	ldr	r1, [pc, #128]	; (5c00 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5b7e:	movs	r0, #40	; 0x28
  m_errorLine = line;
    5b80:	ldr	r3, [pc, #128]	; (5c04 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    5b82:	movw	r2, #813	; 0x32d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5b86:	strb	r0, [r1, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    5b88:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5b8a:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    5b8c:	pop	{r4, r5, r6, pc}
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  if (m_curState != IDLE_STATE && !syncDevice()) {
    5b8e:	ldr	r3, [r0, #0]
    5b90:	ldr	r3, [r3, #28]
    5b92:	blx	r3
    5b94:	mov	r4, r0
    5b96:	cmp	r0, #0
    5b98:	bne.n	5b32 <SdioCard::erase(unsigned long, unsigned long)+0xa>
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    5b9a:	mov	r0, r4
    5b9c:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    5b9e:	mov	r1, r6
    5ba0:	ldr	r0, [pc, #100]	; (5c08 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    5ba2:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    5ba6:	mov	r4, r0
    5ba8:	cbnz	r0, 5bba <SdioCard::erase(unsigned long, unsigned long)+0x92>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5baa:	ldr	r1, [pc, #84]	; (5c00 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5bac:	movs	r0, #16
  m_errorLine = line;
    5bae:	ldr	r3, [pc, #84]	; (5c04 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    5bb0:	mov.w	r2, #824	; 0x338
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5bb4:	strb	r0, [r1, #0]
  m_errorLine = line;
    5bb6:	str	r2, [r3, #0]
    5bb8:	b.n	5b64 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    5bba:	movs	r1, #0
    5bbc:	ldr	r0, [pc, #76]	; (5c0c <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    5bbe:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    5bc2:	mov	r4, r0
    5bc4:	cbnz	r0, 5bd6 <SdioCard::erase(unsigned long, unsigned long)+0xae>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5bc6:	ldr	r1, [pc, #56]	; (5c00 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5bc8:	movs	r0, #17
  m_errorLine = line;
    5bca:	ldr	r3, [pc, #56]	; (5c04 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    5bcc:	movw	r2, #827	; 0x33b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5bd0:	strb	r0, [r1, #0]
  m_errorLine = line;
    5bd2:	str	r2, [r3, #0]
    5bd4:	b.n	5b64 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    5bd6:	ldr	r0, [pc, #56]	; (5c10 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    5bd8:	bl	56ec <waitTimeout(bool (*)())>
    5bdc:	cmp	r0, #0
    5bde:	beq.n	5b64 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5be0:	ldr	r1, [pc, #28]	; (5c00 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5be2:	movs	r0, #41	; 0x29
  m_errorLine = line;
    5be4:	ldr	r3, [pc, #28]	; (5c04 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    5be6:	movw	r2, #830	; 0x33e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5bea:	strb	r0, [r1, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    5bec:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5bee:	str	r2, [r3, #0]
    5bf0:	b.n	5b64 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    5bf2:	nop
    5bf4:	.word	0x20016c90
    5bf8:	.word	0x20017ca8
    5bfc:	.word	0x201a0000
    5c00:	.word	0x200021d6
    5c04:	.word	0x20016a74
    5c08:	.word	0x211a0000
    5c0c:	.word	0x261b0000
    5c10:	.word	0x0000583d

00005c14 <waitTransferComplete() [clone .part.13]>:
    }
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
    5c14:	push	{r4, lr}
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
    5c16:	ldr	r0, [pc, #56]	; (5c50 <waitTransferComplete() [clone .part.13]+0x3c>)
  m_transferActive = false;
    5c18:	movs	r4, #0
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
    5c1a:	bl	56ec <waitTimeout(bool (*)())>
  m_transferActive = false;
    5c1e:	ldr	r1, [pc, #52]	; (5c54 <waitTransferComplete() [clone .part.13]+0x40>)
  m_irqstat = SDHC_IRQSTAT;
    5c20:	ldr	r2, [pc, #52]	; (5c58 <waitTransferComplete() [clone .part.13]+0x44>)
    5c22:	ldr	r3, [pc, #56]	; (5c5c <waitTransferComplete() [clone .part.13]+0x48>)
static bool waitTransferComplete() {
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
    5c24:	strb	r4, [r1, #0]
  m_irqstat = SDHC_IRQSTAT;
    5c26:	ldr	r1, [r2, #48]	; 0x30
    5c28:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5c2a:	ldr	r1, [r3, #0]
    5c2c:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5c2e:	cbnz	r0, 5c38 <waitTransferComplete() [clone .part.13]+0x24>
    5c30:	ldr	r2, [r3, #0]
    5c32:	ldr	r3, [pc, #44]	; (5c60 <waitTransferComplete() [clone .part.13]+0x4c>)
    5c34:	ands	r3, r2
    5c36:	cbz	r3, 5c4a <waitTransferComplete() [clone .part.13]+0x36>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c38:	ldr	r1, [pc, #40]	; (5c64 <waitTransferComplete() [clone .part.13]+0x50>)
    5c3a:	movs	r4, #32
  m_errorLine = line;
    5c3c:	ldr	r3, [pc, #40]	; (5c68 <waitTransferComplete() [clone .part.13]+0x54>)
    5c3e:	movw	r2, #682	; 0x2aa
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    5c42:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c44:	strb	r4, [r1, #0]
  m_errorLine = line;
    5c46:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
  }
  return true;
}
    5c48:	pop	{r4, pc}
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
  }
  return true;
    5c4a:	movs	r0, #1
    5c4c:	pop	{r4, pc}
    5c4e:	nop
    5c50:	.word	0x0000555d
    5c54:	.word	0x20017ca9
    5c58:	.word	0x402c0000
    5c5c:	.word	0x20017394
    5c60:	.word	0x117f0000
    5c64:	.word	0x200021d6
    5c68:	.word	0x20016a74

00005c6c <SdioCard::readStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() { return transferStop(); }
    5c6c:	push	{r3, r4, r5, lr}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5c6e:	ldr	r4, [pc, #96]	; (5cd0 <SdioCard::readStop()+0x64>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    5c70:	movs	r1, #0
    5c72:	ldr	r0, [pc, #96]	; (5cd4 <SdioCard::readStop()+0x68>)
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5c74:	ldr	r3, [r4, #40]	; 0x28
    5c76:	bic.w	r3, r3, #65536	; 0x10000
    5c7a:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    5c7c:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    5c80:	mov	r5, r0
    5c82:	cbnz	r0, 5c96 <SdioCard::readStop()+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c84:	ldr	r1, [pc, #80]	; (5cd8 <SdioCard::readStop()+0x6c>)
    5c86:	movs	r0, #9
  m_errorLine = line;
    5c88:	ldr	r3, [pc, #80]	; (5cdc <SdioCard::readStop()+0x70>)
    5c8a:	movw	r2, #621	; 0x26d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c8e:	strb	r0, [r1, #0]
  m_errorLine = line;
    5c90:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() { return transferStop(); }
    5c92:	mov	r0, r5
    5c94:	pop	{r3, r4, r5, pc}
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyDat)) {
    5c96:	ldr	r0, [pc, #72]	; (5ce0 <SdioCard::readStop()+0x74>)
    5c98:	bl	5714 <yieldTimeout(bool (*)())>
    5c9c:	cbnz	r0, 5cbc <SdioCard::readStop()+0x50>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    5c9e:	ldr	r3, [r4, #36]	; 0x24
    5ca0:	lsls	r3, r3, #30
    5ca2:	bpl.n	5c92 <SdioCard::readStop()+0x26>
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    5ca4:	ldr	r1, [r4, #52]	; 0x34
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() { return transferStop(); }
    5ca6:	mov	r0, r5
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    5ca8:	ldr	r3, [r4, #40]	; 0x28
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    5caa:	ldr	r2, [r4, #44]	; 0x2c
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    5cac:	bic.w	r3, r3, #65536	; 0x10000
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    5cb0:	orr.w	r2, r2, #67108864	; 0x4000000
    5cb4:	str	r2, [r4, #44]	; 0x2c
    // Restore registers.
    SDHC_IRQSTATEN = irqsststen;
    5cb6:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    5cb8:	str	r3, [r4, #40]	; 0x28
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() { return transferStop(); }
    5cba:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5cbc:	ldr	r1, [pc, #24]	; (5cd8 <SdioCard::readStop()+0x6c>)
    5cbe:	movs	r0, #10
  m_errorLine = line;
    5cc0:	ldr	r3, [pc, #24]	; (5cdc <SdioCard::readStop()+0x70>)
    5cc2:	mov.w	r2, #624	; 0x270
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyDat)) {
    return sdError(SD_CARD_ERROR_CMD13);
    5cc6:	movs	r5, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5cc8:	strb	r0, [r1, #0]
  m_errorLine = line;
    5cca:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() { return transferStop(); }
    5ccc:	mov	r0, r5
    5cce:	pop	{r3, r4, r5, pc}
    5cd0:	.word	0x402c0000
    5cd4:	.word	0x0cdb0000
    5cd8:	.word	0x200021d6
    5cdc:	.word	0x20016a74
    5ce0:	.word	0x00005515

00005ce4 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
                    : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    5ce4:	push	{r4, r5, r6, lr}
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    5ce6:	ldr	r6, [pc, #120]	; (5d60 <SdioCard::writeData(unsigned char const*)+0x7c>)
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
                    : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    5ce8:	mov	r5, r1
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    5cea:	ldrb	r3, [r6, #0]
    5cec:	cmp	r3, #0
    5cee:	bne.n	5d54 <SdioCard::writeData(unsigned char const*)+0x70>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    5cf0:	ldr	r3, [pc, #112]	; (5d64 <SdioCard::writeData(unsigned char const*)+0x80>)
    5cf2:	ldr	r2, [r3, #36]	; 0x24
    5cf4:	lsls	r1, r2, #23
    5cf6:	bmi.n	5d08 <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5cf8:	ldr	r2, [r3, #40]	; 0x28
    5cfa:	bic.w	r2, r2, #65536	; 0x10000
    5cfe:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    5d00:	ldr	r2, [r3, #40]	; 0x28
    5d02:	orr.w	r2, r2, #131072	; 0x20000
    5d06:	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5d08:	ldr	r4, [pc, #88]	; (5d64 <SdioCard::writeData(unsigned char const*)+0x80>)
  if (waitTimeout(isBusyFifoWrite)) {
    5d0a:	ldr	r0, [pc, #92]	; (5d68 <SdioCard::writeData(unsigned char const*)+0x84>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5d0c:	ldr	r3, [r4, #40]	; 0x28
    5d0e:	orr.w	r3, r3, #65536	; 0x10000
    5d12:	str	r3, [r4, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    5d14:	bl	56ec <waitTimeout(bool (*)())>
    5d18:	cbnz	r0, 5d42 <SdioCard::writeData(unsigned char const*)+0x5e>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    5d1a:	mov	r0, r4
    5d1c:	subs	r3, r5, #4
    5d1e:	add.w	r4, r5, #508	; 0x1fc
    5d22:	ldr	r2, [r0, #36]	; 0x24
    5d24:	lsls	r2, r2, #21
    5d26:	bpl.n	5d22 <SdioCard::writeData(unsigned char const*)+0x3e>
    5d28:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    5d2c:	ldr.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5d30:	cmp	r1, r3
      SDHC_DATPORT = p32[i];
    5d32:	str	r2, [r0, #32]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5d34:	bne.n	5d2c <SdioCard::writeData(unsigned char const*)+0x48>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    5d36:	cmp	r4, r1
    5d38:	mov	r3, r1
    5d3a:	bne.n	5d22 <SdioCard::writeData(unsigned char const*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    5d3c:	movs	r0, #1
    5d3e:	strb	r0, [r6, #0]
    5d40:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5d42:	ldr	r1, [pc, #40]	; (5d6c <SdioCard::writeData(unsigned char const*)+0x88>)
    5d44:	movs	r4, #34	; 0x22
  m_errorLine = line;
    5d46:	ldr	r3, [pc, #40]	; (5d70 <SdioCard::writeData(unsigned char const*)+0x8c>)
    5d48:	movw	r2, #1055	; 0x41f
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    5d4c:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5d4e:	strb	r4, [r1, #0]
  m_errorLine = line;
    5d50:	str	r2, [r3, #0]
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
  return true;
}
    5d52:	pop	{r4, r5, r6, pc}
    5d54:	bl	5c14 <waitTransferComplete() [clone .part.13]>
                    : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    5d58:	cmp	r0, #0
    5d5a:	bne.n	5cf0 <SdioCard::writeData(unsigned char const*)+0xc>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
  return true;
}
    5d5c:	pop	{r4, r5, r6, pc}
    5d5e:	nop
    5d60:	.word	0x20017ca9
    5d64:	.word	0x402c0000
    5d68:	.word	0x00005549
    5d6c:	.word	0x200021d6
    5d70:	.word	0x20016a74

00005d74 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    5d74:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    5d76:	ldr	r0, [pc, #80]	; (5dc8 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    5d78:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    5d7a:	bl	5714 <yieldTimeout(bool (*)())>
    5d7e:	cbnz	r0, 5db4 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5d80:	ldr	r3, [pc, #72]	; (5dcc <SdioCard::writeStart(unsigned long)+0x58>)

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5d82:	mov.w	r0, #512	; 0x200
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5d86:	ldr	r1, [pc, #72]	; (5dd0 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5d88:	ldr	r2, [r3, #40]	; 0x28
    5d8a:	bic.w	r2, r2, #65536	; 0x10000
    5d8e:	str	r2, [r3, #40]	; 0x28

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5d90:	str	r0, [r3, #4]
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5d92:	ldrb	r3, [r1, #0]
    5d94:	cbnz	r3, 5db0 <SdioCard::writeStart(unsigned long)+0x3c>
    5d96:	lsls	r1, r4, #9
    5d98:	ldr	r0, [pc, #56]	; (5dd4 <SdioCard::writeStart(unsigned long)+0x60>)
    5d9a:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    5d9e:	cbnz	r0, 5dae <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5da0:	ldr	r1, [pc, #52]	; (5dd8 <SdioCard::writeStart(unsigned long)+0x64>)
    5da2:	movs	r4, #14
  m_errorLine = line;
    5da4:	ldr	r3, [pc, #52]	; (5ddc <SdioCard::writeStart(unsigned long)+0x68>)
    5da6:	movw	r2, #1150	; 0x47e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5daa:	strb	r4, [r1, #0]
  m_errorLine = line;
    5dac:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    5dae:	pop	{r4, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5db0:	mov	r1, r4
    5db2:	b.n	5d98 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5db4:	ldr	r1, [pc, #32]	; (5dd8 <SdioCard::writeStart(unsigned long)+0x64>)
    5db6:	movs	r0, #10
  m_errorLine = line;
    5db8:	ldr	r3, [pc, #32]	; (5ddc <SdioCard::writeStart(unsigned long)+0x68>)
    5dba:	movw	r2, #1138	; 0x472
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5dbe:	strb	r0, [r1, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    5dc0:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5dc2:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    5dc4:	pop	{r4, pc}
    5dc6:	nop
    5dc8:	.word	0x0000583d
    5dcc:	.word	0x402c0000
    5dd0:	.word	0x20017ca8
    5dd4:	.word	0x193a0020
    5dd8:	.word	0x200021d6
    5ddc:	.word	0x20016a74

00005de0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    5de0:	push	{r3, r4, r5, r6, r7, lr}
    5de2:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    5de4:	ldrb	r0, [r0, #8]
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    5de6:	mov	r4, r1
    5de8:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    5dea:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    5dec:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    5dee:	bmi.n	5e18 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    5df0:	cbz	r3, 5e14 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    5df2:	add	r7, r1
    5df4:	b.n	5dfa <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    5df6:	cmp	r4, r7
    5df8:	beq.n	5e14 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i * 512UL)) {
    5dfa:	ldr	r3, [r6, #0]
    5dfc:	mov	r2, r5
    5dfe:	mov	r1, r4
    5e00:	mov	r0, r6
    5e02:	ldr	r3, [r3, #16]
    5e04:	add.w	r5, r5, #512	; 0x200
    5e08:	adds	r4, #1
    5e0a:	blx	r3
    5e0c:	cmp	r0, #0
    5e0e:	bne.n	5df6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    5e10:	movs	r0, #0
    5e12:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i * 512UL)) {
        return false;
      }
    }
  }
  return true;
    5e14:	movs	r0, #1
    5e16:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    5e18:	lsls	r0, r2, #30
    5e1a:	beq.n	5e42 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    5e1c:	cmp	r3, #0
    5e1e:	beq.n	5e14 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    5e20:	add	r7, r1
    5e22:	b.n	5e28 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    5e24:	cmp	r7, r4
    5e26:	beq.n	5e14 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    5e28:	ldr	r3, [r6, #0]
    5e2a:	mov	r2, r5
    5e2c:	mov	r1, r4
    5e2e:	mov	r0, r6
    5e30:	ldr	r3, [r3, #16]
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    5e32:	add.w	r5, r5, #512	; 0x200
    5e36:	adds	r4, #1
        if (!readSector(sector, dst)) {
    5e38:	blx	r3
    5e3a:	cmp	r0, #0
    5e3c:	bne.n	5e24 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    5e3e:	movs	r0, #0
    5e40:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    5e42:	ldr	r0, [pc, #24]	; (5e5c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    5e44:	bl	5938 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    5e48:	cmp	r0, #0
    5e4a:	bne.n	5e14 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5e4c:	ldr	r1, [pc, #16]	; (5e60 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    5e4e:	movs	r4, #12
  m_errorLine = line;
    5e50:	ldr	r3, [pc, #16]	; (5e64 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    5e52:	movw	r2, #974	; 0x3ce
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5e56:	strb	r4, [r1, #0]
  m_errorLine = line;
    5e58:	str	r2, [r3, #0]
    5e5a:	pop	{r3, r4, r5, r6, r7, pc}
    5e5c:	.word	0x123a0037
    5e60:	.word	0x200021d6
    5e64:	.word	0x20016a74

00005e68 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    5e68:	push	{r3, r4, r5, r6, r7, lr}
    5e6a:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    5e6c:	ldrb	r0, [r0, #8]
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    5e6e:	mov	r4, r1
    5e70:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    5e72:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    5e74:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    5e76:	bmi.n	5ea0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    5e78:	cbz	r3, 5e9c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    5e7a:	add	r7, r1
    5e7c:	b.n	5e82 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    5e7e:	cmp	r4, r7
    5e80:	beq.n	5e9c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i * 512UL)) {
    5e82:	ldr	r3, [r6, #0]
    5e84:	mov	r2, r5
    5e86:	mov	r1, r4
    5e88:	mov	r0, r6
    5e8a:	ldr	r3, [r3, #32]
    5e8c:	add.w	r5, r5, #512	; 0x200
    5e90:	adds	r4, #1
    5e92:	blx	r3
    5e94:	cmp	r0, #0
    5e96:	bne.n	5e7e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    5e98:	movs	r0, #0
    5e9a:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i * 512UL)) {
        return false;
      }
    }
  }
  return true;
    5e9c:	movs	r0, #1
    5e9e:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    5ea0:	lsls	r0, r2, #30
    5ea2:	beq.n	5eca <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    5ea4:	cmp	r3, #0
    5ea6:	beq.n	5e9c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    5ea8:	add	r7, r1
    5eaa:	b.n	5eb0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    5eac:	cmp	r7, r4
    5eae:	beq.n	5e9c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    5eb0:	ldr	r3, [r6, #0]
    5eb2:	mov	r2, r5
    5eb4:	mov	r1, r4
    5eb6:	mov	r0, r6
    5eb8:	ldr	r3, [r3, #32]
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    5eba:	add.w	r5, r5, #512	; 0x200
    5ebe:	adds	r4, #1
        if (!writeSector(sector, ptr)) {
    5ec0:	blx	r3
    5ec2:	cmp	r0, #0
    5ec4:	bne.n	5eac <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    5ec6:	movs	r0, #0
    5ec8:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    5eca:	ldr	r0, [pc, #24]	; (5ee4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    5ecc:	bl	5938 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    5ed0:	cmp	r0, #0
    5ed2:	bne.n	5e9c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5ed4:	ldr	r1, [pc, #16]	; (5ee8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    5ed6:	movs	r4, #14
  m_errorLine = line;
    5ed8:	ldr	r3, [pc, #16]	; (5eec <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    5eda:	movw	r2, #1124	; 0x464
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5ede:	strb	r4, [r1, #0]
  m_errorLine = line;
    5ee0:	str	r2, [r3, #0]
    5ee2:	pop	{r3, r4, r5, r6, r7, pc}
    5ee4:	.word	0x193a0027
    5ee8:	.word	0x200021d6
    5eec:	.word	0x20016a74

00005ef0 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  }
  m_transferActive = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    5ef0:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    5ef2:	ldrb	r3, [r0, #8]
  }
  m_transferActive = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    5ef4:	mov	r5, r2
    5ef6:	sub.w	sp, sp, #512	; 0x200
    5efa:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    5efc:	lsls	r2, r3, #31
    5efe:	bpl.n	5f34 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    5f00:	lsls	r3, r5, #30
    5f02:	beq.n	5f12 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    5f04:	mov	r1, r5
    5f06:	mov.w	r2, #512	; 0x200
    5f0a:	mov	r0, sp
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    5f0c:	mov	r5, sp
      memcpy(aligned, src, 512);
    5f0e:	bl	68c4 <memcpy>
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    5f12:	mov	r2, r5
    5f14:	mov	r1, r6
    5f16:	movs	r3, #1
    5f18:	ldr	r0, [pc, #132]	; (5fa0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
    5f1a:	bl	5938 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    5f1e:	cbnz	r0, 5f2e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5f20:	ldr	r1, [pc, #128]	; (5fa4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb4>)
    5f22:	movs	r4, #13
  m_errorLine = line;
    5f24:	ldr	r3, [pc, #128]	; (5fa8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb8>)
    5f26:	mov.w	r2, #1080	; 0x438
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5f2a:	strb	r4, [r1, #0]
  m_errorLine = line;
    5f2c:	str	r2, [r3, #0]
      return false;
    }
    m_curSector++;
  }
  return true;
}
    5f2e:	add.w	sp, sp, #512	; 0x200
    5f32:	pop	{r4, r5, r6, pc}
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    5f34:	ldr	r3, [pc, #116]	; (5fac <SdioCard::writeSector(unsigned long, unsigned char const*)+0xbc>)
    5f36:	mov	r4, r0
    5f38:	ldrb	r3, [r3, #0]
    5f3a:	cbnz	r3, 5f68 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x78>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    5f3c:	ldrb	r3, [r4, #9]
    5f3e:	cmp	r3, #2
    5f40:	beq.n	5f54 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
      if (!syncDevice()) {
    5f42:	ldr	r3, [r4, #0]
    5f44:	mov	r0, r4
    5f46:	ldr	r3, [r3, #28]
    5f48:	blx	r3
    5f4a:	cbnz	r0, 5f74 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (!waitTransferComplete()) {
      return false;
    5f4c:	movs	r0, #0
      return false;
    }
    m_curSector++;
  }
  return true;
}
    5f4e:	add.w	sp, sp, #512	; 0x200
    5f52:	pop	{r4, r5, r6, pc}
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    5f54:	ldr	r3, [r4, #4]
    5f56:	cmp	r6, r3
    5f58:	beq.n	5f88 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>
      if (!syncDevice()) {
    5f5a:	ldr	r3, [r4, #0]
    5f5c:	mov	r0, r4
    5f5e:	ldr	r3, [r3, #28]
    5f60:	blx	r3
    5f62:	cmp	r0, #0
    5f64:	beq.n	5f4c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
    5f66:	b.n	5f74 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    5f68:	bl	5c14 <waitTransferComplete() [clone .part.13]>
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (!waitTransferComplete()) {
    5f6c:	cmp	r0, #0
    5f6e:	bne.n	5f3c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
      return false;
    5f70:	movs	r0, #0
    5f72:	b.n	5f4e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector)) {
    5f74:	ldr	r3, [r4, #0]
    5f76:	mov	r1, r6
    5f78:	mov	r0, r4
    5f7a:	ldr	r3, [r3, #100]	; 0x64
    5f7c:	blx	r3
    5f7e:	cmp	r0, #0
    5f80:	beq.n	5f4c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    5f82:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector)) {
        return false;
      }
      m_curSector = sector;
    5f84:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    5f86:	strb	r3, [r4, #9]
    }
    if (!writeData(src)) {
    5f88:	ldr	r3, [r4, #0]
    5f8a:	mov	r1, r5
    5f8c:	mov	r0, r4
    5f8e:	ldr	r3, [r3, #96]	; 0x60
    5f90:	blx	r3
    5f92:	cmp	r0, #0
    5f94:	beq.n	5f4c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
      return false;
    }
    m_curSector++;
    5f96:	ldr	r3, [r4, #4]
    5f98:	adds	r3, #1
    5f9a:	str	r3, [r4, #4]
    5f9c:	b.n	5f2e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    5f9e:	nop
    5fa0:	.word	0x183a0001
    5fa4:	.word	0x200021d6
    5fa8:	.word	0x20016a74
    5fac:	.word	0x20017ca9

00005fb0 <SdioCard::begin(SdioConfig)>:
  return true;
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    5fb0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    5fb4:	ldr	r2, [pc, #680]	; (6260 <SdioCard::begin(SdioConfig)+0x2b0>)
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    5fb6:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    5fb8:	ldr	r4, [pc, #680]	; (6264 <SdioCard::begin(SdioConfig)+0x2b4>)
static uint32_t baseClock() { return F_CPU; }

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    5fba:	mov.w	lr, #5
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    5fbe:	strb	r3, [r0, #9]
  return true;
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    5fc0:	mov	r5, r0
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    5fc2:	strb	r3, [r4, #0]
  return true;
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    5fc4:	sub	sp, #76	; 0x4c
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    5fc6:	strb	r1, [r0, #8]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    5fc8:	ldr.w	r1, [r2, #256]	; 0x100
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    5fcc:	ldr.w	r8, [pc, #772]	; 62d4 <SdioCard::begin(SdioConfig)+0x324>
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    5fd0:	orr.w	r1, r1, #128	; 0x80
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    5fd4:	ldr	r7, [pc, #656]	; (6268 <SdioCard::begin(SdioConfig)+0x2b8>)
  m_version2 = false;
    5fd6:	ldr	r6, [pc, #660]	; (626c <SdioCard::begin(SdioConfig)+0x2bc>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    5fd8:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    5fdc:	strb	r3, [r7, #0]
  m_version2 = false;
    5fde:	strb	r3, [r6, #0]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    5fe0:	str.w	r1, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    5fe4:	ldr.w	r1, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
  CCM_ANALOG_PFD_528 &= ~(1 << 7);

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    5fe8:	ldr	r3, [pc, #644]	; (6270 <SdioCard::begin(SdioConfig)+0x2c0>)
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    5fea:	bic.w	r1, r1, #63	; 0x3f
static uint32_t baseClock() { return F_CPU; }

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    5fee:	ldr	r0, [pc, #644]	; (6274 <SdioCard::begin(SdioConfig)+0x2c4>)
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    5ff0:	str.w	r1, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    5ff4:	ldr.w	r1, [r2, #256]	; 0x100
    5ff8:	orr.w	r1, r1, #24
    5ffc:	str.w	r1, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    6000:	ldr.w	r1, [r2, #256]	; 0x100
    6004:	bic.w	r1, r1, #128	; 0x80
    6008:	str.w	r1, [r2, #256]	; 0x100

  // Disable GPIO clock.
  enableGPIO(false);

#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    600c:	add.w	r2, r2, #1998848	; 0x1e8000
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
  CCM_ANALOG_PFD_528 &= ~(1 << 7);

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    6010:	ldr.w	r1, [r3, #128]	; 0x80
    6014:	orr.w	r1, r1, #12
    6018:	str.w	r1, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    601c:	ldr	r1, [r3, #36]	; 0x24
    601e:	bic.w	r1, r1, #14336	; 0x3800
    6022:	str	r1, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;  // PLL2PFD0
    6024:	ldr	r1, [r3, #28]
    6026:	orr.w	r1, r1, #65536	; 0x10000
    602a:	str	r1, [r3, #28]
  //  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    602c:	ldr	r1, [r3, #36]	; 0x24
    602e:	orr.w	r1, r1, #2048	; 0x800
    6032:	str	r1, [r3, #36]	; 0x24
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    6034:	mov	r1, r2
static uint32_t baseClock() { return F_CPU; }

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6036:	str.w	lr, [r0, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    603a:	str.w	lr, [r0, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    603e:	str.w	lr, [r0, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    6042:	str.w	lr, [r0, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    6046:	str.w	lr, [r0, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    604a:	str.w	lr, [r0, #456]	; 0x1c8

  // Disable GPIO clock.
  enableGPIO(false);

#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    604e:	ldr	r0, [r2, #72]	; 0x48
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    6050:	ldr	r3, [pc, #548]	; (6278 <SdioCard::begin(SdioConfig)+0x2c8>)

  // Disable GPIO clock.
  enableGPIO(false);

#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    6052:	orr.w	r0, r0, #2147483648	; 0x80000000
    6056:	str	r0, [r2, #72]	; 0x48
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    6058:	ldr	r0, [r2, #44]	; 0x2c
    605a:	orrs	r3, r0
    605c:	str	r3, [r2, #44]	; 0x2c

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    605e:	ldr	r3, [r1, #44]	; 0x2c
    6060:	ldr	r2, [pc, #536]	; (627c <SdioCard::begin(SdioConfig)+0x2cc>)
    6062:	lsls	r3, r3, #7
    6064:	bmi.n	605e <SdioCard::begin(SdioConfig)+0xae>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    6066:	mov.w	r0, #400	; 0x190
    606a:	str	r2, [sp, #4]
    606c:	bl	5574 <setSdclk(unsigned long)>
    6070:	bl	5770 <enableGPIO(bool) [clone .part.0]>

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    6074:	ldr	r0, [pc, #520]	; (6280 <SdioCard::begin(SdioConfig)+0x2d0>)


#ifdef __cplusplus
extern "C" void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    6076:	ldr	r3, [pc, #524]	; (6284 <SdioCard::begin(SdioConfig)+0x2d4>)
    6078:	ldr	r1, [pc, #524]	; (6288 <SdioCard::begin(SdioConfig)+0x2d8>)
    607a:	ldr	r2, [sp, #4]
    607c:	str	r0, [r2, #52]	; 0x34
    607e:	str.w	r1, [r3, #504]	; 0x1f8

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    6082:	ldr	r3, [pc, #520]	; (628c <SdioCard::begin(SdioConfig)+0x2dc>)
    6084:	mov.w	lr, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    6088:	ldr	r1, [pc, #516]	; (6290 <SdioCard::begin(SdioConfig)+0x2e0>)
    608a:	mov.w	r0, #16384	; 0x4000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    608e:	strb.w	lr, [r3]
  NVIC_ENABLE_IRQ(IRQ_SDHC);

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    6092:	mov	r3, r2
  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    6094:	str	r0, [r1, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    6096:	ldr	r1, [r2, #44]	; 0x2c
    6098:	orr.w	r1, r1, #134217728	; 0x8000000
    609c:	str	r1, [r2, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    609e:	ldr	r1, [r3, #44]	; 0x2c
    60a0:	ands.w	r1, r1, #134217728	; 0x8000000
    60a4:	bne.n	609e <SdioCard::begin(SdioConfig)+0xee>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    60a6:	mov	r0, r1
    60a8:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    60ac:	mov	r9, r0
    60ae:	cmp	r0, #0
    60b0:	beq.n	6164 <SdioCard::begin(SdioConfig)+0x1b4>
    60b2:	mov.w	sl, #3
        return sdError(SD_CARD_ERROR_CMD8);
      }
      m_version2 = true;
      break;
    }
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    60b6:	ldr.w	r9, [pc, #452]	; 627c <SdioCard::begin(SdioConfig)+0x2cc>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    60ba:	mov.w	r1, #426	; 0x1aa
    60be:	ldr	r0, [pc, #468]	; (6294 <SdioCard::begin(SdioConfig)+0x2e4>)
    60c0:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    60c4:	cmp	r0, #0
    60c6:	bne.n	6192 <SdioCard::begin(SdioConfig)+0x1e2>
        return sdError(SD_CARD_ERROR_CMD8);
      }
      m_version2 = true;
      break;
    }
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    60c8:	ldr.w	r3, [r9, #44]	; 0x2c
    60cc:	orr.w	r3, r3, #16777216	; 0x1000000
    60d0:	str.w	r3, [r9, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    60d4:	ldr.w	r3, [r9, #44]	; 0x2c
    60d8:	lsls	r0, r3, #7
    60da:	bmi.n	60d4 <SdioCard::begin(SdioConfig)+0x124>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    60dc:	subs.w	sl, sl, #1
    60e0:	bne.n	60ba <SdioCard::begin(SdioConfig)+0x10a>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    }
  }
  // Must support 3.2-3.4 Volts
  arg = m_version2 ? 0X40300000 : 0x00300000;
    60e2:	ldrb	r2, [r6, #0]
    60e4:	ldr	r3, [pc, #432]	; (6298 <SdioCard::begin(SdioConfig)+0x2e8>)
    60e6:	cmp	r2, #0
    60e8:	ite	ne
    60ea:	movne	r9, r3
    60ec:	moveq.w	r9, #3145728	; 0x300000
  int m = micros();
    60f0:	bl	7e04 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    60f4:	ldr.w	sl, [pc, #480]	; 62d8 <SdioCard::begin(SdioConfig)+0x328>
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    }
  }
  // Must support 3.2-3.4 Volts
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    60f8:	mov	fp, r0
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    60fa:	ldr	r6, [pc, #384]	; (627c <SdioCard::begin(SdioConfig)+0x2cc>)
  }
  // Must support 3.2-3.4 Volts
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    60fc:	mov	r2, r9
    60fe:	ldr	r1, [pc, #412]	; (629c <SdioCard::begin(SdioConfig)+0x2ec>)
    6100:	movs	r0, #0
    6102:	bl	58e4 <cardAcmd(unsigned long, unsigned long, unsigned long)>
    6106:	cbnz	r0, 6120 <SdioCard::begin(SdioConfig)+0x170>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6108:	movs	r1, #23
  m_errorLine = line;
    610a:	ldr	r3, [pc, #404]	; (62a0 <SdioCard::begin(SdioConfig)+0x2f0>)
    610c:	movw	r2, #723	; 0x2d3
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    6110:	mov.w	r9, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6114:	strb	r1, [r4, #0]
  m_errorLine = line;
    6116:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    6118:	mov	r0, r9
    611a:	add	sp, #76	; 0x4c
    611c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // Must support 3.2-3.4 Volts
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    6120:	bl	7e04 <micros>
  }
  // Must support 3.2-3.4 Volts
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    6124:	rsb	r0, fp, r0
    6128:	cmp	r0, sl
    612a:	bhi.n	6108 <SdioCard::begin(SdioConfig)+0x158>
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    612c:	ldr	r3, [r6, #16]
    612e:	ldr	r2, [pc, #332]	; (627c <SdioCard::begin(SdioConfig)+0x2cc>)
    }
  }
  // Must support 3.2-3.4 Volts
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    6130:	cmp	r3, #0
    6132:	bge.n	60fc <SdioCard::begin(SdioConfig)+0x14c>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    6134:	ldr	r1, [r2, #16]
    6136:	ldr	r3, [pc, #364]	; (62a4 <SdioCard::begin(SdioConfig)+0x2f4>)
    6138:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    613a:	ldr	r3, [r2, #16]
    613c:	lsls	r1, r3, #1
    613e:	bpl.n	6144 <SdioCard::begin(SdioConfig)+0x194>
    // Is high capacity.
    m_highCapacity = true;
    6140:	movs	r3, #1
    6142:	strb	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    6144:	movs	r1, #0
    6146:	ldr	r0, [pc, #352]	; (62a8 <SdioCard::begin(SdioConfig)+0x2f8>)
    6148:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    614c:	mov	r9, r0
    614e:	cbnz	r0, 6178 <SdioCard::begin(SdioConfig)+0x1c8>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6150:	movs	r1, #2
  m_errorLine = line;
    6152:	ldr	r3, [pc, #332]	; (62a0 <SdioCard::begin(SdioConfig)+0x2f0>)
    6154:	mov.w	r2, #732	; 0x2dc

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    6158:	mov	r0, r9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    615a:	strb	r1, [r4, #0]
  m_errorLine = line;
    615c:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    615e:	add	sp, #76	; 0x4c
    6160:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6164:	movs	r1, #1
  m_errorLine = line;
    6166:	ldr	r3, [pc, #312]	; (62a0 <SdioCard::begin(SdioConfig)+0x2f0>)
    6168:	movw	r2, #702	; 0x2be

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    616c:	mov	r0, r9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    616e:	strb	r1, [r4, #0]
  m_errorLine = line;
    6170:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    6172:	add	sp, #76	; 0x4c
    6174:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    6178:	movs	r1, #0
    617a:	ldr	r0, [pc, #304]	; (62ac <SdioCard::begin(SdioConfig)+0x2fc>)
    617c:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    6180:	mov	r9, r0
    6182:	cbnz	r0, 61b8 <SdioCard::begin(SdioConfig)+0x208>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6184:	movs	r1, #3
  m_errorLine = line;
    6186:	ldr	r3, [pc, #280]	; (62a0 <SdioCard::begin(SdioConfig)+0x2f0>)
    6188:	movw	r2, #735	; 0x2df
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    618c:	strb	r1, [r4, #0]
  m_errorLine = line;
    618e:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    6190:	b.n	6118 <SdioCard::begin(SdioConfig)+0x168>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    6192:	ldr	r3, [pc, #232]	; (627c <SdioCard::begin(SdioConfig)+0x2cc>)
    6194:	ldr	r3, [r3, #16]
    6196:	cmp.w	r3, #426	; 0x1aa
    619a:	beq.n	61ae <SdioCard::begin(SdioConfig)+0x1fe>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    619c:	movs	r1, #6
  m_errorLine = line;
    619e:	ldr	r3, [pc, #256]	; (62a0 <SdioCard::begin(SdioConfig)+0x2f0>)
    61a0:	mov.w	r2, #708	; 0x2c4
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    61a4:	mov.w	r9, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    61a8:	strb	r1, [r4, #0]
  m_errorLine = line;
    61aa:	str	r2, [r3, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    61ac:	b.n	6118 <SdioCard::begin(SdioConfig)+0x168>
      }
      m_version2 = true;
    61ae:	movs	r3, #1
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    }
  }
  // Must support 3.2-3.4 Volts
  arg = m_version2 ? 0X40300000 : 0x00300000;
    61b0:	ldr.w	r9, [pc, #228]	; 6298 <SdioCard::begin(SdioConfig)+0x2e8>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
      }
      m_version2 = true;
    61b4:	strb	r3, [r6, #0]
    61b6:	b.n	60f0 <SdioCard::begin(SdioConfig)+0x140>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    61b8:	ldr	r6, [pc, #192]	; (627c <SdioCard::begin(SdioConfig)+0x2cc>)
    61ba:	ldr	r3, [pc, #244]	; (62b0 <SdioCard::begin(SdioConfig)+0x300>)
    61bc:	ldr	r2, [r6, #16]
    61be:	ldr	r7, [pc, #244]	; (62b4 <SdioCard::begin(SdioConfig)+0x304>)
    61c0:	ands	r3, r2

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    61c2:	ldr	r1, [pc, #244]	; (62b8 <SdioCard::begin(SdioConfig)+0x308>)
    61c4:	ldr	r0, [pc, #244]	; (62bc <SdioCard::begin(SdioConfig)+0x30c>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    61c6:	str	r3, [r7, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    61c8:	bl	5888 <readReg16(unsigned long, void*)>
    61cc:	mov	r9, r0
    61ce:	cbnz	r0, 61de <SdioCard::begin(SdioConfig)+0x22e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    61d0:	movs	r1, #7
  m_errorLine = line;
    61d2:	ldr	r3, [pc, #204]	; (62a0 <SdioCard::begin(SdioConfig)+0x2f0>)
    61d4:	mov.w	r2, #740	; 0x2e4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    61d8:	strb	r1, [r4, #0]
  m_errorLine = line;
    61da:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    61dc:	b.n	6118 <SdioCard::begin(SdioConfig)+0x168>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    61de:	ldr	r1, [pc, #224]	; (62c0 <SdioCard::begin(SdioConfig)+0x310>)
    61e0:	ldr	r0, [pc, #224]	; (62c4 <SdioCard::begin(SdioConfig)+0x314>)
    61e2:	bl	5888 <readReg16(unsigned long, void*)>
    61e6:	mov	r9, r0
    61e8:	cbnz	r0, 61f8 <SdioCard::begin(SdioConfig)+0x248>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    61ea:	movs	r1, #8
  m_errorLine = line;
    61ec:	ldr	r3, [pc, #176]	; (62a0 <SdioCard::begin(SdioConfig)+0x2f0>)
    61ee:	movw	r2, #743	; 0x2e7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    61f2:	strb	r1, [r4, #0]
  m_errorLine = line;
    61f4:	str	r2, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    61f6:	b.n	6118 <SdioCard::begin(SdioConfig)+0x168>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    61f8:	ldr	r1, [r7, #0]
    61fa:	ldr	r0, [pc, #204]	; (62c8 <SdioCard::begin(SdioConfig)+0x318>)
    61fc:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    6200:	mov	r9, r0
    6202:	cbnz	r0, 6212 <SdioCard::begin(SdioConfig)+0x262>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6204:	movs	r1, #5
  m_errorLine = line;
    6206:	ldr	r3, [pc, #152]	; (62a0 <SdioCard::begin(SdioConfig)+0x2f0>)
    6208:	movw	r2, #746	; 0x2ea
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    620c:	strb	r1, [r4, #0]
  m_errorLine = line;
    620e:	str	r2, [r3, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    6210:	b.n	6118 <SdioCard::begin(SdioConfig)+0x168>
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    6212:	movs	r2, #2
    6214:	ldr	r1, [pc, #180]	; (62cc <SdioCard::begin(SdioConfig)+0x31c>)
    6216:	ldr	r0, [r7, #0]
    6218:	bl	58e4 <cardAcmd(unsigned long, unsigned long, unsigned long)>
    621c:	mov	r9, r0
    621e:	cbnz	r0, 622e <SdioCard::begin(SdioConfig)+0x27e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6220:	movs	r1, #20
  m_errorLine = line;
    6222:	ldr	r3, [pc, #124]	; (62a0 <SdioCard::begin(SdioConfig)+0x2f0>)
    6224:	movw	r2, #750	; 0x2ee
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6228:	strb	r1, [r4, #0]
  m_errorLine = line;
    622a:	str	r2, [r3, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    622c:	b.n	6118 <SdioCard::begin(SdioConfig)+0x168>
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    622e:	ldr	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    6230:	mov.w	r2, #1048592	; 0x100010
  return true;
}
//------------------------------------------------------------------------------
static bool cardACMD51(scr_t* scr) {
  // ACMD51 returns 8 bytes.
  if (waitTimeout(isBusyCMD13)) {
    6234:	ldr	r0, [pc, #152]	; (62d0 <SdioCard::begin(SdioConfig)+0x320>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    6236:	bic.w	r3, r3, #6
    623a:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    623c:	ldr	r3, [r6, #40]	; 0x28
    623e:	orr.w	r3, r3, #2
    6242:	str	r3, [r6, #40]	; 0x28

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    6244:	str	r2, [r6, #68]	; 0x44
  return true;
}
//------------------------------------------------------------------------------
static bool cardACMD51(scr_t* scr) {
  // ACMD51 returns 8 bytes.
  if (waitTimeout(isBusyCMD13)) {
    6246:	bl	56ec <waitTimeout(bool (*)())>
    624a:	cmp	r0, #0
    624c:	beq.n	62dc <SdioCard::begin(SdioConfig)+0x32c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    624e:	movs	r1, #10
  m_errorLine = line;
    6250:	ldr	r3, [pc, #76]	; (62a0 <SdioCard::begin(SdioConfig)+0x2f0>)
    6252:	mov.w	r2, #464	; 0x1d0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6256:	strb	r1, [r4, #0]
  m_errorLine = line;
    6258:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  if (!cardACMD51(&m_scr)) {
    return false;
    625a:	mov.w	r9, #0
    625e:	b.n	6118 <SdioCard::begin(SdioConfig)+0x168>
    6260:	.word	0x400d8000
    6264:	.word	0x200021d6
    6268:	.word	0x20017ca8
    626c:	.word	0x20017ca7
    6270:	.word	0x400fc000
    6274:	.word	0x401f8000
    6278:	.word	0x01008000
    627c:	.word	0x402c0000
    6280:	.word	0x117f000b
    6284:	.word	0x20002400
    6288:	.word	0x000054bd
    628c:	.word	0xe000e46e
    6290:	.word	0xe000e10c
    6294:	.word	0x081a0000
    6298:	.word	0x40300000
    629c:	.word	0x29020000
    62a0:	.word	0x20016a74
    62a4:	.word	0x20016ca0
    62a8:	.word	0x02090000
    62ac:	.word	0x031a0000
    62b0:	.word	0xffff0000
    62b4:	.word	0x20016ca4
    62b8:	.word	0x20016c90
    62bc:	.word	0x09090000
    62c0:	.word	0x20016c80
    62c4:	.word	0x0a090000
    62c8:	.word	0x071b0000
    62cc:	.word	0x061a0000
    62d0:	.word	0x0000583d
    62d4:	.word	0x20017ca6
    62d8:	.word	0x000f4240
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    62dc:	movs	r3, #1
    62de:	ldr.w	fp, [pc, #332]	; 642c <SdioCard::begin(SdioConfig)+0x47c>
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)scr;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    62e2:	ldr	r1, [pc, #284]	; (6400 <SdioCard::begin(SdioConfig)+0x450>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardAcmd(m_rca, ACMD51_XFERTYP, 0)) {
    62e4:	mov	r2, r0
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    62e6:	strb.w	r3, [fp]
  m_irqstat = 0;
    62ea:	ldr.w	r9, [pc, #324]	; 6430 <SdioCard::begin(SdioConfig)+0x480>
  // ACMD51 returns 8 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)scr;
    62ee:	ldr.w	sl, [pc, #324]	; 6434 <SdioCard::begin(SdioConfig)+0x484>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    62f2:	ldr	r3, [pc, #272]	; (6404 <SdioCard::begin(SdioConfig)+0x454>)
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    62f4:	str.w	r0, [r9]
  // ACMD51 returns 8 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)scr;
    62f8:	str.w	sl, [r6]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    62fc:	str	r1, [r6, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    62fe:	str	r3, [r6, #56]	; 0x38
  if (!cardAcmd(m_rca, ACMD51_XFERTYP, 0)) {
    6300:	ldr	r1, [pc, #260]	; (6408 <SdioCard::begin(SdioConfig)+0x458>)
    6302:	ldr	r0, [r7, #0]
    6304:	bl	58e4 <cardAcmd(unsigned long, unsigned long, unsigned long)>
    6308:	cbnz	r0, 6318 <SdioCard::begin(SdioConfig)+0x368>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    630a:	movs	r1, #24
  m_errorLine = line;
    630c:	ldr	r3, [pc, #252]	; (640c <SdioCard::begin(SdioConfig)+0x45c>)
    630e:	movw	r2, #471	; 0x1d7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6312:	strb	r1, [r4, #0]
  m_errorLine = line;
    6314:	str	r2, [r3, #0]
    6316:	b.n	625a <SdioCard::begin(SdioConfig)+0x2aa>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardAcmd(m_rca, ACMD51_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_ACMD51);
  }
  if (!waitDmaStatus()) {
    6318:	bl	5908 <waitDmaStatus()>
    631c:	cbnz	r0, 632c <SdioCard::begin(SdioConfig)+0x37c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    631e:	movs	r1, #38	; 0x26
  m_errorLine = line;
    6320:	ldr	r3, [pc, #232]	; (640c <SdioCard::begin(SdioConfig)+0x45c>)
    6322:	mov.w	r2, #474	; 0x1da
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6326:	strb	r1, [r4, #0]
  m_errorLine = line;
    6328:	str	r2, [r3, #0]
    632a:	b.n	625a <SdioCard::begin(SdioConfig)+0x2aa>
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardACMD13(sds_t* scr) {
  // ACMD13 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    632c:	ldr	r0, [pc, #224]	; (6410 <SdioCard::begin(SdioConfig)+0x460>)
    632e:	bl	56ec <waitTimeout(bool (*)())>
    6332:	cbz	r0, 6342 <SdioCard::begin(SdioConfig)+0x392>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6334:	movs	r1, #10
  m_errorLine = line;
    6336:	ldr	r3, [pc, #212]	; (640c <SdioCard::begin(SdioConfig)+0x45c>)
    6338:	mov.w	r2, #446	; 0x1be
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    633c:	strb	r1, [r4, #0]
  m_errorLine = line;
    633e:	str	r2, [r3, #0]
    6340:	b.n	625a <SdioCard::begin(SdioConfig)+0x2aa>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    6342:	movs	r3, #0
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    6344:	movs	r2, #1
  // ACMD13 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)scr;
    6346:	ldr	r1, [pc, #204]	; (6414 <SdioCard::begin(SdioConfig)+0x464>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    6348:	strb.w	r2, [fp]
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)scr;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardAcmd(m_rca, ACMD13_XFERTYP, 0)) {
    634c:	mov	r2, r3
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    634e:	str.w	r3, [r9]
  // ACMD13 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)scr;
    6352:	ldr	r3, [pc, #196]	; (6418 <SdioCard::begin(SdioConfig)+0x468>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    6354:	ldr	r0, [pc, #196]	; (641c <SdioCard::begin(SdioConfig)+0x46c>)
  // ACMD13 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)scr;
    6356:	str	r1, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6358:	ldr	r1, [pc, #168]	; (6404 <SdioCard::begin(SdioConfig)+0x454>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)scr;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    635a:	str	r0, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    635c:	str	r1, [r3, #56]	; 0x38
  if (!cardAcmd(m_rca, ACMD13_XFERTYP, 0)) {
    635e:	ldr	r0, [r7, #0]
    6360:	ldr	r1, [pc, #188]	; (6420 <SdioCard::begin(SdioConfig)+0x470>)
    6362:	bl	58e4 <cardAcmd(unsigned long, unsigned long, unsigned long)>
    6366:	cbnz	r0, 6376 <SdioCard::begin(SdioConfig)+0x3c6>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6368:	movs	r1, #21
  m_errorLine = line;
    636a:	ldr	r3, [pc, #160]	; (640c <SdioCard::begin(SdioConfig)+0x45c>)
    636c:	movw	r2, #453	; 0x1c5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6370:	strb	r1, [r4, #0]
  m_errorLine = line;
    6372:	str	r2, [r3, #0]
    6374:	b.n	625a <SdioCard::begin(SdioConfig)+0x2aa>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardAcmd(m_rca, ACMD13_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_ACMD13);
  }
  if (!waitDmaStatus()) {
    6376:	bl	5908 <waitDmaStatus()>
    637a:	mov	r9, r0
    637c:	cbnz	r0, 638c <SdioCard::begin(SdioConfig)+0x3dc>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    637e:	movs	r1, #38	; 0x26
  m_errorLine = line;
    6380:	ldr	r3, [pc, #136]	; (640c <SdioCard::begin(SdioConfig)+0x45c>)
    6382:	mov.w	r2, #456	; 0x1c8
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6386:	strb	r1, [r4, #0]
  m_errorLine = line;
    6388:	str	r2, [r3, #0]
    638a:	b.n	625a <SdioCard::begin(SdioConfig)+0x2aa>
  }
  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    638c:	ldrb.w	r3, [sl]
    6390:	lsls	r3, r3, #28
    6392:	bne.n	63c4 <SdioCard::begin(SdioConfig)+0x414>
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    6394:	movw	r0, #25000	; 0x61a8
static uint32_t baseClock() { return F_CPU; }

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6398:	ldr	r3, [pc, #136]	; (6424 <SdioCard::begin(SdioConfig)+0x474>)
    639a:	movs	r2, #5
    639c:	str.w	r2, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    63a0:	str.w	r2, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    63a4:	str.w	r2, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    63a8:	str.w	r2, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    63ac:	str.w	r2, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    63b0:	str.w	r2, [r3, #456]	; 0x1c8
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    63b4:	bl	5574 <setSdclk(unsigned long)>
    63b8:	bl	5770 <enableGPIO(bool) [clone .part.0]>

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    63bc:	movs	r3, #1
    63be:	strb.w	r3, [r8]
  return true;
    63c2:	b.n	6118 <SdioCard::begin(SdioConfig)+0x168>
    return false;
  }
  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    63c4:	ldr	r3, [r5, #0]
    63c6:	mvn.w	r1, #4278190080	; 0xff000000
    63ca:	mov	r0, r5
    63cc:	add	r2, sp, #8
    63ce:	ldr	r3, [r3, #40]	; 0x28
    63d0:	blx	r3
    63d2:	cmp	r0, #0
    63d4:	beq.n	6394 <SdioCard::begin(SdioConfig)+0x3e4>
    63d6:	ldrb.w	r3, [sp, #21]
    63da:	lsls	r2, r3, #30
    63dc:	bpl.n	6394 <SdioCard::begin(SdioConfig)+0x3e4>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    63de:	ldr	r3, [r5, #0]
    63e0:	add	r2, sp, #8
    63e2:	mov	r0, r5
    63e4:	ldr	r1, [pc, #64]	; (6428 <SdioCard::begin(SdioConfig)+0x478>)
    63e6:	ldr	r3, [r3, #40]	; 0x28
    63e8:	blx	r3
    return false;
  }
  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    63ea:	cmp	r0, #0
    63ec:	beq.n	6394 <SdioCard::begin(SdioConfig)+0x3e4>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    63ee:	ldrb.w	r3, [sp, #24]
    63f2:	and.w	r3, r3, #15
    63f6:	cmp	r3, #1
    63f8:	bne.n	6394 <SdioCard::begin(SdioConfig)+0x3e4>
    kHzSdClk = 50000;
    63fa:	movw	r0, #50000	; 0xc350
    63fe:	b.n	6398 <SdioCard::begin(SdioConfig)+0x3e8>
    6400:	.word	0x00010008
    6404:	.word	0x117f0002
    6408:	.word	0x333a0011
    640c:	.word	0x20016a74
    6410:	.word	0x0000583d
    6414:	.word	0x20016cb0
    6418:	.word	0x402c0000
    641c:	.word	0x00010040
    6420:	.word	0x0d3a0011
    6424:	.word	0x401f8000
    6428:	.word	0x80fffff1
    642c:	.word	0x20017caa
    6430:	.word	0x20017394
    6434:	.word	0x20016ca8

00006438 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, sizeof(csd_t));
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    6438:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    643a:	ldr	r3, [pc, #156]	; (64d8 <SdioCard::readData(unsigned char*)+0xa0>)
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, sizeof(csd_t));
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    643c:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    643e:	ldr	r2, [r3, #36]	; 0x24
    6440:	lsls	r4, r2, #22
    6442:	bmi.n	6460 <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6444:	ldr	r2, [r3, #40]	; 0x28
    6446:	bic.w	r2, r2, #65536	; 0x10000
    644a:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    644c:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    644e:	ldr	r2, [r3, #40]	; 0x28
    6450:	orr.w	r2, r2, #131072	; 0x20000
    6454:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    6456:	ldr	r2, [r3, #40]	; 0x28
    6458:	orr.w	r2, r2, #65536	; 0x10000
    645c:	str	r2, [r3, #40]	; 0x28
    interrupts();
    645e:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    6460:	ldr	r0, [pc, #120]	; (64dc <SdioCard::readData(unsigned char*)+0xa4>)
    6462:	bl	56ec <waitTimeout(bool (*)())>
    6466:	cmp	r0, #0
    6468:	bne.n	64c6 <SdioCard::readData(unsigned char*)+0x8e>
    646a:	subs	r3, r5, #4
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    646c:	ldr	r1, [pc, #104]	; (64d8 <SdioCard::readData(unsigned char*)+0xa0>)
    646e:	add.w	r5, r5, #508	; 0x1fc
    6472:	ldr	r2, [r1, #36]	; 0x24
    6474:	lsls	r0, r2, #20
    6476:	bpl.n	6472 <SdioCard::readData(unsigned char*)+0x3a>
    6478:	add.w	r0, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    647c:	ldr	r2, [r1, #32]
    647e:	ldr	r4, [pc, #88]	; (64d8 <SdioCard::readData(unsigned char*)+0xa0>)
    6480:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    6484:	cmp	r0, r3
    6486:	bne.n	647c <SdioCard::readData(unsigned char*)+0x44>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    6488:	cmp	r5, r0
    648a:	mov	r3, r0
    648c:	bne.n	6472 <SdioCard::readData(unsigned char*)+0x3a>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    648e:	ldr	r0, [pc, #80]	; (64e0 <SdioCard::readData(unsigned char*)+0xa8>)
    6490:	bl	56ec <waitTimeout(bool (*)())>
    6494:	cbnz	r0, 64b4 <SdioCard::readData(unsigned char*)+0x7c>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    6496:	ldr	r2, [r4, #48]	; 0x30
    6498:	ldr	r3, [pc, #72]	; (64e4 <SdioCard::readData(unsigned char*)+0xac>)
    649a:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    649c:	ldr	r2, [r3, #0]
    649e:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    64a0:	ldr	r2, [r3, #0]
    64a2:	lsls	r2, r2, #30
    64a4:	bpl.n	64d6 <SdioCard::readData(unsigned char*)+0x9e>
    64a6:	ldr	r3, [r3, #0]
    64a8:	ldr	r0, [pc, #60]	; (64e8 <SdioCard::readData(unsigned char*)+0xb0>)
    64aa:	ands	r0, r3
    64ac:	clz	r0, r0
    64b0:	lsrs	r0, r0, #5
    64b2:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    64b4:	ldr	r1, [pc, #52]	; (64ec <SdioCard::readData(unsigned char*)+0xb4>)
    64b6:	movs	r0, #30
  m_errorLine = line;
    64b8:	ldr	r3, [pc, #52]	; (64f0 <SdioCard::readData(unsigned char*)+0xb8>)
    64ba:	mov.w	r2, #900	; 0x384
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    64be:	strb	r0, [r1, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    64c0:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    64c2:	str	r2, [r3, #0]
    64c4:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    64c6:	ldr	r1, [pc, #36]	; (64ec <SdioCard::readData(unsigned char*)+0xb4>)
    64c8:	movs	r4, #27
  m_errorLine = line;
    64ca:	ldr	r3, [pc, #36]	; (64f0 <SdioCard::readData(unsigned char*)+0xb8>)
    64cc:	movw	r2, #889	; 0x379
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    64d0:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    64d2:	strb	r4, [r1, #0]
  m_errorLine = line;
    64d4:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    64d6:	pop	{r3, r4, r5, pc}
    64d8:	.word	0x402c0000
    64dc:	.word	0x00005535
    64e0:	.word	0x0000555d
    64e4:	.word	0x20017394
    64e8:	.word	0x117f0000
    64ec:	.word	0x200021d6
    64f0:	.word	0x20016a74

000064f4 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    64f4:	push	{r4, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    64f6:	ldr	r0, [pc, #80]	; (6548 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    64f8:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    64fa:	bl	5714 <yieldTimeout(bool (*)())>
    64fe:	cbnz	r0, 6534 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    6500:	ldr	r3, [pc, #72]	; (654c <SdioCard::readStart(unsigned long)+0x58>)
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    6502:	mov.w	r0, #512	; 0x200
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    6506:	ldr	r1, [pc, #72]	; (6550 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    6508:	ldr	r2, [r3, #40]	; 0x28
    650a:	orr.w	r2, r2, #65536	; 0x10000
    650e:	str	r2, [r3, #40]	; 0x28
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    6510:	str	r0, [r3, #4]
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    6512:	ldrb	r3, [r1, #0]
    6514:	cbnz	r3, 6530 <SdioCard::readStart(unsigned long)+0x3c>
    6516:	lsls	r1, r4, #9
    6518:	ldr	r0, [pc, #56]	; (6554 <SdioCard::readStart(unsigned long)+0x60>)
    651a:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    651e:	cbnz	r0, 652e <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6520:	ldr	r1, [pc, #52]	; (6558 <SdioCard::readStart(unsigned long)+0x64>)
    6522:	movs	r4, #12
  m_errorLine = line;
    6524:	ldr	r3, [pc, #52]	; (655c <SdioCard::readStart(unsigned long)+0x68>)
    6526:	movw	r2, #1002	; 0x3ea
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    652a:	strb	r4, [r1, #0]
  m_errorLine = line;
    652c:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    652e:	pop	{r4, pc}
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    6530:	mov	r1, r4
    6532:	b.n	6518 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6534:	ldr	r1, [pc, #32]	; (6558 <SdioCard::readStart(unsigned long)+0x64>)
    6536:	movs	r0, #10
  m_errorLine = line;
    6538:	ldr	r3, [pc, #32]	; (655c <SdioCard::readStart(unsigned long)+0x68>)
    653a:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    653e:	strb	r0, [r1, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    6540:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    6542:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    6544:	pop	{r4, pc}
    6546:	nop
    6548:	.word	0x0000583d
    654c:	.word	0x402c0000
    6550:	.word	0x20017ca8
    6554:	.word	0x123a0030
    6558:	.word	0x200021d6
    655c:	.word	0x20016a74

00006560 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSDS(sds_t* sds) {
  memcpy(sds, &m_sds, sizeof(sds_t));
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    6560:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    6562:	ldrb	r3, [r0, #8]
bool SdioCard::readSDS(sds_t* sds) {
  memcpy(sds, &m_sds, sizeof(sds_t));
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    6564:	sub.w	sp, sp, #512	; 0x200
    6568:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    656a:	lsls	r4, r3, #31
    656c:	bpl.n	6592 <SdioCard::readSector(unsigned long, unsigned char*)+0x32>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    656e:	lsls	r3, r2, #30
    6570:	beq.n	65b4 <SdioCard::readSector(unsigned long, unsigned char*)+0x54>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6572:	movs	r3, #1
    6574:	ldr	r0, [pc, #164]	; (661c <SdioCard::readSector(unsigned long, unsigned char*)+0xbc>)
    6576:	mov	r2, sp
    6578:	bl	5938 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    657c:	cbz	r0, 65c0 <SdioCard::readSector(unsigned long, unsigned char*)+0x60>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    657e:	mov	r1, sp
    6580:	mov	r0, r5
    6582:	mov.w	r2, #512	; 0x200
    6586:	bl	68c4 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    658a:	movs	r0, #1
}
    658c:	add.w	sp, sp, #512	; 0x200
    6590:	pop	{r4, r5, r6, pc}
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    6592:	ldr	r3, [pc, #140]	; (6620 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    6594:	mov	r4, r0
    6596:	mov	r6, r1
    6598:	ldrb	r3, [r3, #0]
    659a:	cbnz	r3, 65ea <SdioCard::readSector(unsigned long, unsigned char*)+0x8a>
    }
  } else {
    if (!waitTransferComplete()) {
      return false;
    }
    if (m_curState != READ_STATE || sector != m_curSector) {
    659c:	ldrb	r3, [r4, #9]
    659e:	cmp	r3, #1
    65a0:	beq.n	65d6 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    65a2:	ldr	r3, [r4, #0]
    65a4:	mov	r0, r4
    65a6:	ldr	r3, [r3, #28]
    65a8:	blx	r3
    65aa:	cbnz	r0, 65f6 <SdioCard::readSector(unsigned long, unsigned char*)+0x96>
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (!waitTransferComplete()) {
      return false;
    65ac:	movs	r0, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    65ae:	add.w	sp, sp, #512	; 0x200
    65b2:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    65b4:	movs	r3, #1
    65b6:	ldr	r0, [pc, #100]	; (661c <SdioCard::readSector(unsigned long, unsigned char*)+0xbc>)
    65b8:	bl	5938 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    65bc:	cmp	r0, #0
    65be:	bne.n	658a <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    65c0:	movs	r0, #11
    65c2:	ldr	r1, [pc, #96]	; (6624 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    65c4:	ldr	r3, [pc, #96]	; (6628 <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
    65c6:	movw	r2, #929	; 0x3a1
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    65ca:	strb	r0, [r1, #0]
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    65cc:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    65ce:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    65d0:	add.w	sp, sp, #512	; 0x200
    65d4:	pop	{r4, r5, r6, pc}
    }
  } else {
    if (!waitTransferComplete()) {
      return false;
    }
    if (m_curState != READ_STATE || sector != m_curSector) {
    65d6:	ldr	r3, [r4, #4]
    65d8:	cmp	r6, r3
    65da:	beq.n	6608 <SdioCard::readSector(unsigned long, unsigned char*)+0xa8>
      if (!syncDevice()) {
    65dc:	ldr	r3, [r4, #0]
    65de:	mov	r0, r4
    65e0:	ldr	r3, [r3, #28]
    65e2:	blx	r3
    65e4:	cmp	r0, #0
    65e6:	beq.n	65ac <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
    65e8:	b.n	65f6 <SdioCard::readSector(unsigned long, unsigned char*)+0x96>
    65ea:	bl	5c14 <waitTransferComplete() [clone .part.13]>
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (!waitTransferComplete()) {
    65ee:	cmp	r0, #0
    65f0:	bne.n	659c <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
      return false;
    65f2:	movs	r0, #0
    65f4:	b.n	65ae <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
    }
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    65f6:	mov	r1, r6
    65f8:	mov	r0, r4
    65fa:	bl	64f4 <SdioCard::readStart(unsigned long)>
    65fe:	cmp	r0, #0
    6600:	beq.n	65ac <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    6602:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    6604:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    6606:	strb	r3, [r4, #9]
    }
    if (!readData(dst)) {
    6608:	mov	r1, r5
    660a:	mov	r0, r4
    660c:	bl	6438 <SdioCard::readData(unsigned char*)>
    6610:	cmp	r0, #0
    6612:	beq.n	65ac <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    6614:	ldr	r3, [r4, #4]
    6616:	adds	r3, #1
    6618:	str	r3, [r4, #4]
    661a:	b.n	65d0 <SdioCard::readSector(unsigned long, unsigned char*)+0x70>
    661c:	.word	0x113a0011
    6620:	.word	0x20017ca9
    6624:	.word	0x200021d6
    6628:	.word	0x20016a74

0000662c <SdioCard::stopTransmission(bool)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
//------------------------------------------------------------------------------
uint32_t SdioCard::status() { return statusCMD13(); }
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    662c:	push	{r4, r5, r6, lr}
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    662e:	ldr	r2, [pc, #80]	; (6680 <SdioCard::stopTransmission(bool)+0x54>)
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
//------------------------------------------------------------------------------
uint32_t SdioCard::status() { return statusCMD13(); }
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
    6630:	movs	r5, #0
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
//------------------------------------------------------------------------------
uint32_t SdioCard::status() { return statusCMD13(); }
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    6632:	mov	r6, r1
  m_curState = IDLE_STATE;
    6634:	strb	r5, [r0, #9]
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6636:	mov	r1, r5
uint32_t SdioCard::status() { return statusCMD13(); }
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6638:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    663a:	ldr	r0, [pc, #72]	; (6684 <SdioCard::stopTransmission(bool)+0x58>)
uint32_t SdioCard::status() { return statusCMD13(); }
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    663c:	bic.w	r3, r3, #65536	; 0x10000
    6640:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6642:	bl	57d4 <cardCommand(unsigned long, unsigned long)>
    6646:	mov	r4, r0
    6648:	cbz	r0, 666e <SdioCard::stopTransmission(bool)+0x42>
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    664a:	cbnz	r6, 6650 <SdioCard::stopTransmission(bool)+0x24>
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    664c:	mov	r0, r4
    664e:	pop	{r4, r5, r6, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    if (yieldTimeout(isBusyDat)) {
    6650:	ldr	r0, [pc, #52]	; (6688 <SdioCard::stopTransmission(bool)+0x5c>)
    6652:	bl	5714 <yieldTimeout(bool (*)())>
    6656:	cmp	r0, #0
    6658:	beq.n	664c <SdioCard::stopTransmission(bool)+0x20>
      return sdError(SD_CARD_ERROR_CMD13);
    665a:	mov	r4, r5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    665c:	ldr	r1, [pc, #44]	; (668c <SdioCard::stopTransmission(bool)+0x60>)
    665e:	movs	r0, #10
  m_errorLine = line;
    6660:	ldr	r3, [pc, #44]	; (6690 <SdioCard::stopTransmission(bool)+0x64>)
    6662:	movw	r2, #1022	; 0x3fe
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6666:	strb	r0, [r1, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    6668:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    666a:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    666c:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    666e:	ldr	r1, [pc, #28]	; (668c <SdioCard::stopTransmission(bool)+0x60>)
    6670:	movs	r0, #9
  m_errorLine = line;
    6672:	ldr	r3, [pc, #28]	; (6690 <SdioCard::stopTransmission(bool)+0x64>)
    6674:	movw	r2, #1018	; 0x3fa
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6678:	strb	r0, [r1, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    667a:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    667c:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    667e:	pop	{r4, r5, r6, pc}
    6680:	.word	0x402c0000
    6684:	.word	0x0cdb0000
    6688:	.word	0x00005515
    668c:	.word	0x200021d6
    6690:	.word	0x20016a74

00006694 <SdioCard::syncDevice()>:
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    6694:	ldr	r3, [pc, #36]	; (66bc <SdioCard::syncDevice()+0x28>)
    6696:	ldrb	r3, [r3, #0]
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
    6698:	push	{r4, lr}
    669a:	mov	r4, r0
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    669c:	cbnz	r3, 66b2 <SdioCard::syncDevice()+0x1e>
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    669e:	ldrb	r3, [r4, #9]
    66a0:	cbnz	r3, 66a6 <SdioCard::syncDevice()+0x12>
    return stopTransmission(true);
  }
  return true;
    66a2:	movs	r0, #1
    66a4:	pop	{r4, pc}
bool SdioCard::syncDevice() {
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    66a6:	mov	r0, r4
    66a8:	movs	r1, #1
  }
  return true;
}
    66aa:	ldmia.w	sp!, {r4, lr}
bool SdioCard::syncDevice() {
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    66ae:	b.w	662c <SdioCard::stopTransmission(bool)>
    66b2:	bl	5c14 <waitTransferComplete() [clone .part.13]>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (!waitTransferComplete()) {
    66b6:	cmp	r0, #0
    66b8:	bne.n	669e <SdioCard::syncDevice()+0xa>
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
  }
  return true;
}
    66ba:	pop	{r4, pc}
    66bc:	.word	0x20017ca9

000066c0 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) && defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
    66c0:	ldr	r3, [r0, #0]
    66c2:	ldr	r1, [r0, #4]
    66c4:	push	{r4, r5}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    66c6:	ldrb	r2, [r3, #19]
    66c8:	ldr	r4, [r0, #8]
    66ca:	cmp	r2, #0
    66cc:	beq.n	6720 <SdSpiArduinoDriver::activate()+0x60>
			__disable_irq();
    66ce:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    66d0:	ldrb	r2, [r3, #19]
    66d2:	lsls	r5, r2, #31
    66d4:	bpl.n	66e4 <SdSpiArduinoDriver::activate()+0x24>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    66d6:	ldr	r0, [pc, #204]	; (67a4 <SdSpiArduinoDriver::activate()+0xe4>)
    66d8:	ldr	r2, [r3, #20]
    66da:	ldr	r5, [r0, #0]
    66dc:	ands	r2, r5
    66de:	str	r2, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    66e0:	str	r2, [r0, #0]
    66e2:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x02) {
    66e4:	lsls	r0, r2, #30
    66e6:	bpl.n	66f6 <SdSpiArduinoDriver::activate()+0x36>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    66e8:	ldr	r0, [pc, #188]	; (67a8 <SdSpiArduinoDriver::activate()+0xe8>)
    66ea:	ldr	r2, [r3, #24]
    66ec:	ldr	r5, [r0, #0]
    66ee:	ands	r2, r5
    66f0:	str	r2, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    66f2:	str	r2, [r0, #0]
    66f4:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x04) {
    66f6:	lsls	r5, r2, #29
    66f8:	bpl.n	6708 <SdSpiArduinoDriver::activate()+0x48>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    66fa:	ldr	r0, [pc, #176]	; (67ac <SdSpiArduinoDriver::activate()+0xec>)
    66fc:	ldr	r2, [r3, #28]
    66fe:	ldr	r5, [r0, #0]
    6700:	ands	r2, r5
    6702:	str	r2, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    6704:	str	r2, [r0, #0]
    6706:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x08) {
    6708:	lsls	r0, r2, #28
    670a:	bpl.n	671a <SdSpiArduinoDriver::activate()+0x5a>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    670c:	ldr	r0, [pc, #160]	; (67b0 <SdSpiArduinoDriver::activate()+0xf0>)
    670e:	ldr	r2, [r3, #32]
    6710:	ldr	r5, [r0, #0]
    6712:	ands	r2, r5
    6714:	str	r2, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    6716:	str	r2, [r0, #0]
    6718:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x10) {
    671a:	lsls	r2, r2, #27
    671c:	bmi.n	6776 <SdSpiArduinoDriver::activate()+0xb6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    671e:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    6720:	ldr	r2, [r3, #8]
    6722:	cmp	r2, r1
    6724:	beq.n	6784 <SdSpiArduinoDriver::activate()+0xc4>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    6726:	ldr	r2, [pc, #140]	; (67b4 <SdSpiArduinoDriver::activate()+0xf4>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    6728:	str	r1, [r3, #8]

			uint32_t cbcmr = CCM_CBCMR;
    672a:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    672c:	ldr	r0, [pc, #136]	; (67b8 <SdSpiArduinoDriver::activate()+0xf8>)
    672e:	ubfx	r5, r2, #4, #2
    6732:	ubfx	r2, r2, #26, #3
    6736:	ldr.w	r0, [r0, r5, lsl #2]
    673a:	adds	r2, #1
    673c:	udiv	r0, r0, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    6740:	cbz	r1, 6772 <SdSpiArduinoDriver::activate()+0xb2>
    6742:	udiv	r2, r0, r1

			if (d && clkhz/d > _clock) d++;
    6746:	cbz	r2, 675a <SdSpiArduinoDriver::activate()+0x9a>
    6748:	udiv	r0, r0, r2
    674c:	cmp	r0, r1
    674e:	it	hi
    6750:	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    6752:	cmp.w	r2, #258	; 0x102
    6756:	bcc.n	6788 <SdSpiArduinoDriver::activate()+0xc8>
    6758:	ldr	r2, [pc, #96]	; (67bc <SdSpiArduinoDriver::activate()+0xfc>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    675a:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    675c:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    675e:	movs	r5, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6760:	movs	r0, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    6762:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    6764:	str	r5, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6766:	str	r0, [r3, #36]	; 0x24
		port().CCR = _ccr;
    6768:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    676a:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    676c:	str	r1, [r3, #16]
    676e:	pop	{r4, r5}
    6770:	bx	lr

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    6772:	mov	r2, r0
    6774:	b.n	6746 <SdSpiArduinoDriver::activate()+0x86>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    6776:	ldr	r0, [pc, #72]	; (67c0 <SdSpiArduinoDriver::activate()+0x100>)
    6778:	ldr	r2, [r3, #36]	; 0x24
    677a:	ldr	r5, [r0, #0]
    677c:	ands	r2, r5
    677e:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    6780:	str	r2, [r0, #0]
    6782:	b.n	671e <SdSpiArduinoDriver::activate()+0x5e>
    6784:	ldr	r2, [r3, #12]
    6786:	b.n	675c <SdSpiArduinoDriver::activate()+0x9c>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    6788:	cmp	r2, #2
    678a:	it	ls
    678c:	movls	r2, #0
    678e:	bls.n	675a <SdSpiArduinoDriver::activate()+0x9a>
    6790:	subs	r2, #2
    6792:	lsrs	r0, r2, #1
    6794:	lsls	r1, r0, #16
    6796:	orr.w	r2, r2, r0, lsl #8
    679a:	and.w	r1, r1, #16711680	; 0xff0000
    679e:	orrs	r2, r1
    67a0:	b.n	675a <SdSpiArduinoDriver::activate()+0x9a>
    67a2:	nop
    67a4:	.word	0xe000e180
    67a8:	.word	0xe000e184
    67ac:	.word	0xe000e188
    67b0:	.word	0xe000e18c
    67b4:	.word	0x400fc000
    67b8:	.word	0x2000050c
    67bc:	.word	0x007f7fff
    67c0:	.word	0xe000e190

000067c4 <SdSpiArduinoDriver::deactivate()>:
    m_spi = &SPI;
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
    67c4:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    67c6:	ldrb	r3, [r2, #19]
    67c8:	cbz	r3, 6804 <SdSpiArduinoDriver::deactivate()+0x40>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    67ca:	lsls	r0, r3, #31
    67cc:	bpl.n	67d6 <SdSpiArduinoDriver::deactivate()+0x12>
    67ce:	ldr	r3, [pc, #56]	; (6808 <SdSpiArduinoDriver::deactivate()+0x44>)
    67d0:	ldr	r1, [r2, #40]	; 0x28
    67d2:	str	r1, [r3, #0]
    67d4:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    67d6:	lsls	r1, r3, #30
    67d8:	bpl.n	67e2 <SdSpiArduinoDriver::deactivate()+0x1e>
    67da:	ldr	r3, [pc, #48]	; (680c <SdSpiArduinoDriver::deactivate()+0x48>)
    67dc:	ldr	r1, [r2, #44]	; 0x2c
    67de:	str	r1, [r3, #0]
    67e0:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    67e2:	lsls	r0, r3, #29
    67e4:	bpl.n	67ee <SdSpiArduinoDriver::deactivate()+0x2a>
    67e6:	ldr	r3, [pc, #40]	; (6810 <SdSpiArduinoDriver::deactivate()+0x4c>)
    67e8:	ldr	r1, [r2, #48]	; 0x30
    67ea:	str	r1, [r3, #0]
    67ec:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    67ee:	lsls	r1, r3, #28
    67f0:	bpl.n	67fa <SdSpiArduinoDriver::deactivate()+0x36>
    67f2:	ldr	r3, [pc, #32]	; (6814 <SdSpiArduinoDriver::deactivate()+0x50>)
    67f4:	ldr	r1, [r2, #52]	; 0x34
    67f6:	str	r1, [r3, #0]
    67f8:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    67fa:	lsls	r3, r3, #27
    67fc:	bpl.n	6804 <SdSpiArduinoDriver::deactivate()+0x40>
    67fe:	ldr	r2, [r2, #56]	; 0x38
    6800:	ldr	r3, [pc, #20]	; (6818 <SdSpiArduinoDriver::deactivate()+0x54>)
    6802:	str	r2, [r3, #0]
    6804:	bx	lr
    6806:	nop
    6808:	.word	0xe000e100
    680c:	.word	0xe000e104
    6810:	.word	0xe000e108
    6814:	.word	0xe000e10c
    6818:	.word	0xe000e110

0000681c <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
    681c:	ldr	r0, [r0, #0]
    681e:	b.w	1e20 <SPIClass::end()>
    6822:	nop

00006824 <SdSpiArduinoDriver::receive()>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
    6824:	ldr	r2, [r0, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    6826:	movs	r3, #255	; 0xff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6828:	ldr	r2, [r2, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    682a:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    682c:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    682e:	tst.w	r3, #2031616	; 0x1f0000
    6832:	beq.n	682c <SdSpiArduinoDriver::receive()+0x8>
    6834:	ldr	r0, [r2, #116]	; 0x74
    6836:	uxtb	r0, r0
    6838:	bx	lr
    683a:	nop

0000683c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    683c:	push	{r4, r5, r6, lr}
    683e:	mov	r4, r1
    6840:	mov	r6, r2
    6842:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    6844:	movs	r1, #255	; 0xff
    6846:	mov	r0, r4
    6848:	bl	972c <memset>
				transfer16(buf, buf, count >> 1);
				return;
			}
		}
#endif
		transfer(buf, buf, count);
    684c:	ldr	r0, [r5, #0]
    684e:	mov	r3, r6
    6850:	mov	r2, r4
    6852:	mov	r1, r4
    6854:	bl	1e18 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    6858:	movs	r0, #0
    685a:	pop	{r4, r5, r6, pc}

0000685c <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
    685c:	ldr	r3, [r0, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    685e:	ldr	r2, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    6860:	str	r1, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6862:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6864:	tst.w	r3, #2031616	; 0x1f0000
    6868:	beq.n	6862 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    686a:	ldr	r3, [r2, #116]	; 0x74
    686c:	bx	lr
    686e:	nop

00006870 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
    6870:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    6872:	subs	r5, r2, #1
  return 0;
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
    6874:	sub.w	sp, sp, #516	; 0x204
    6878:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    687a:	cmp.w	r5, #512	; 0x200
    687e:	bcc.n	68a2 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x32>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    6880:	cbz	r2, 689c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x2c>
    6882:	ldr	r2, [r0, #0]
    6884:	adds	r0, r1, r3
    6886:	ldr	r2, [r2, #0]
    m_spi->transfer(buf[i]);
    6888:	ldrb.w	r3, [r1], #1
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    688c:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    688e:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6890:	tst.w	r3, #2031616	; 0x1f0000
    6894:	beq.n	688e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1e>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    6896:	cmp	r1, r0
    6898:	ldr	r3, [r2, #116]	; 0x74
    689a:	bne.n	6888 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x18>
    m_spi->transfer(buf[i]);
  }
}
    689c:	add.w	sp, sp, #516	; 0x204
    68a0:	pop	{r4, r5, pc}
    68a2:	mov	r4, r2
    68a4:	mov	r5, r0
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    68a6:	mov	r0, sp
    68a8:	bl	68c4 <memcpy>
				transfer16(buf, buf, count >> 1);
				return;
			}
		}
#endif
		transfer(buf, buf, count);
    68ac:	mov	r3, r4
    68ae:	mov	r2, sp
    68b0:	mov	r1, sp
    68b2:	ldr	r0, [r5, #0]
    68b4:	bl	1e18 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    68b8:	add.w	sp, sp, #516	; 0x204
    68bc:	pop	{r4, r5, pc}
    68be:	nop

000068c0 <sdCsWrite(unsigned char, bool)>:
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) { digitalWrite(pin, level); }
    68c0:	b.w	8238 <digitalWrite>

000068c4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    68c4:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    68c6:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    68ca:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    68ce:	bne.n	69ac <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    68d0:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    68d2:	bcc.n	6958 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    68d4:	ldr.w	r3, [r1], #4
    68d8:	str.w	r3, [r0], #4
    68dc:	ldr.w	r3, [r1], #4
    68e0:	str.w	r3, [r0], #4
    68e4:	ldr.w	r3, [r1], #4
    68e8:	str.w	r3, [r0], #4
    68ec:	ldr.w	r3, [r1], #4
    68f0:	str.w	r3, [r0], #4
    68f4:	ldr.w	r3, [r1], #4
    68f8:	str.w	r3, [r0], #4
    68fc:	ldr.w	r3, [r1], #4
    6900:	str.w	r3, [r0], #4
    6904:	ldr.w	r3, [r1], #4
    6908:	str.w	r3, [r0], #4
    690c:	ldr.w	r3, [r1], #4
    6910:	str.w	r3, [r0], #4
    6914:	ldr.w	r3, [r1], #4
    6918:	str.w	r3, [r0], #4
    691c:	ldr.w	r3, [r1], #4
    6920:	str.w	r3, [r0], #4
    6924:	ldr.w	r3, [r1], #4
    6928:	str.w	r3, [r0], #4
    692c:	ldr.w	r3, [r1], #4
    6930:	str.w	r3, [r0], #4
    6934:	ldr.w	r3, [r1], #4
    6938:	str.w	r3, [r0], #4
    693c:	ldr.w	r3, [r1], #4
    6940:	str.w	r3, [r0], #4
    6944:	ldr.w	r3, [r1], #4
    6948:	str.w	r3, [r0], #4
    694c:	ldr.w	r3, [r1], #4
    6950:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    6954:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    6956:	bcs.n	68d4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    6958:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    695a:	bcc.n	6980 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    695c:	ldr.w	r3, [r1], #4
    6960:	str.w	r3, [r0], #4
    6964:	ldr.w	r3, [r1], #4
    6968:	str.w	r3, [r0], #4
    696c:	ldr.w	r3, [r1], #4
    6970:	str.w	r3, [r0], #4
    6974:	ldr.w	r3, [r1], #4
    6978:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    697c:	subs	r2, #16
	bhs	.Lmid_block_loop
    697e:	bcs.n	695c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    6980:	adds	r2, #12
	blo	.Lcopy_less_than_4
    6982:	bcc.n	6990 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    6984:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    6988:	str.w	r3, [r0], #4
	subs	r2, #4
    698c:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    698e:	bcs.n	6984 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    6990:	adds	r2, #4
	beq	.Ldone
    6992:	beq.n	69a6 <memcpy+0xe2>

	lsls	r2, r2, #31
    6994:	lsls	r2, r2, #31
	itt ne
    6996:	itt	ne
	ldrbne  r3, [r1], #1
    6998:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    699c:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    69a0:	bcc.n	69a6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    69a2:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    69a4:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    69a6:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    69a8:	bx	lr
    69aa:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    69ac:	cmp	r2, #8
	blo	.Lbyte_copy
    69ae:	bcc.n	69d8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    69b0:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    69b2:	beq.n	68d0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    69b4:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    69b8:	beq.n	68d0 <memcpy+0xc>

	rsb	r3, #4
    69ba:	rsb	r3, r3, #4
	subs	r2, r3
    69be:	subs	r2, r2, r3

	lsls    r3, r3, #31
    69c0:	lsls	r3, r3, #31
	itt ne
    69c2:	itt	ne
	ldrbne  r3, [r1], #1
    69c4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    69c8:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    69cc:	bcc.n	68d0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    69ce:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    69d2:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    69d6:	b.n	68d0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    69d8:	subs	r2, #4
	blo	.Lcopy_less_than_4
    69da:	bcc.n	6990 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    69dc:	subs	r2, #1
	ldrb    r3, [r1], #1
    69de:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    69e2:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    69e6:	bcs.n	69dc <memcpy+0x118>

	ldrb	r3, [r1]
    69e8:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    69ea:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    69ec:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    69ee:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    69f0:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    69f2:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    69f4:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    69f6:	bx	lr

000069f8 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    69f8:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    69fa:	ldr	r1, [pc, #80]	; (6a4c <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    69fc:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    6a00:	ldr	r5, [pc, #76]	; (6a50 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    6a02:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    6a04:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    6a08:	ldr	r6, [pc, #72]	; (6a54 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    6a0a:	ldr	r2, [pc, #76]	; (6a58 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    6a0c:	add.w	r5, r5, r0, lsl #5
    6a10:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    6a12:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    6a14:	mov	r0, r5
    6a16:	ldrh	r2, [r6, #0]
    6a18:	bl	7cb8 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    6a1c:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    6a1e:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    6a22:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    6a24:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    6a28:	ldr	r2, [pc, #48]	; (6a5c <rx_queue_transfer+0x64>)
    6a2a:	str	r3, [r2, #0]
		location += 32;
    6a2c:	adds	r3, #32
	} while (location < end_addr);
    6a2e:	cmp	r1, r3
    6a30:	bhi.n	6a2a <rx_queue_transfer+0x32>
	asm("dsb");
    6a32:	dsb	sy
	asm("isb");
    6a36:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    6a3a:	movs	r0, #3
    6a3c:	mov	r1, r5
    6a3e:	bl	7d10 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    6a42:	ldr	r3, [pc, #28]	; (6a60 <rx_queue_transfer+0x68>)
    6a44:	mov.w	r2, #131072	; 0x20000
    6a48:	str	r2, [r3, #0]
    6a4a:	pop	{r3, r4, r5, r6, r7, pc}
    6a4c:	.word	0x200026c0
    6a50:	.word	0x200036c0
    6a54:	.word	0x20017c9e
    6a58:	.word	0xe000e18c
    6a5c:	.word	0xe000ef5c
    6a60:	.word	0xe000e10c

00006a64 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    6a64:	ldr	r2, [pc, #144]	; (6af8 <rx_event+0x94>)
    6a66:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    6a68:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    6a6c:	ubfx	r3, r3, #16, #15
    6a70:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    6a72:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    6a74:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    6a76:	cmp	r4, #0
    6a78:	ble.n	6aec <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    6a7a:	ldr	r1, [pc, #128]	; (6afc <rx_event+0x98>)
		if (head != rx_tail) {
    6a7c:	ldr	r2, [pc, #128]	; (6b00 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    6a7e:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    6a80:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    6a82:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    6a84:	ldr	r0, [pc, #124]	; (6b04 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    6a86:	ldr	r6, [pc, #128]	; (6b08 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    6a88:	cmp	r3, r2
    6a8a:	beq.n	6a9c <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    6a8c:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    6a90:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    6a94:	rsb	r2, r7, #512	; 0x200
    6a98:	cmp	r4, r2
    6a9a:	bls.n	6ac2 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    6a9c:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    6a9e:	movs	r2, #0
    6aa0:	ldr	r7, [pc, #104]	; (6b0c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    6aa2:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    6aa4:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    6aa8:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    6aac:	ldr	r6, [pc, #96]	; (6b10 <rx_event+0xac>)
    6aae:	ite	ls
    6ab0:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    6ab2:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    6ab4:	strb	r2, [r1, #0]
		rx_available += len;
    6ab6:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    6ab8:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    6aba:	add	r4, r2
    6abc:	str	r4, [r6, #0]
    6abe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    6ac2:	ldr	r3, [pc, #80]	; (6b14 <rx_event+0xb0>)
    6ac4:	add.w	r0, r7, r8, lsl #9
    6ac8:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    6aca:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    6acc:	add.w	r1, r3, r5, lsl #9
    6ad0:	add	r0, r3
    6ad2:	bl	68c4 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    6ad6:	ldr	r2, [pc, #56]	; (6b10 <rx_event+0xac>)
				rx_queue_transfer(i);
    6ad8:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    6ada:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    6ade:	ldr	r3, [r2, #0]
    6ae0:	add	r4, r3
    6ae2:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    6ae4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    6ae8:	b.w	69f8 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    6aec:	mov	r0, r5
	}
}
    6aee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    6af2:	b.w	69f8 <rx_queue_transfer>
    6af6:	nop
    6af8:	.word	0x20017c9e
    6afc:	.word	0x20017cb0
    6b00:	.word	0x20017cb1
    6b04:	.word	0x2001779c
    6b08:	.word	0x2001777c
    6b0c:	.word	0x2001778c
    6b10:	.word	0x20017778
    6b14:	.word	0x200026c0

00006b18 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    6b18:	ldr	r3, [pc, #120]	; (6b94 <usb_serial_flush_callback+0x7c>)
    6b1a:	ldrb	r2, [r3, #0]
    6b1c:	cbnz	r2, 6b36 <usb_serial_flush_callback+0x1e>
    6b1e:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    6b22:	ldr	r2, [pc, #116]	; (6b98 <usb_serial_flush_callback+0x80>)
    6b24:	ldrb	r2, [r2, #0]
    6b26:	cbz	r2, 6b36 <usb_serial_flush_callback+0x1e>
	asm("dsb" ::: "memory");
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    6b28:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    6b2c:	ldr	r5, [pc, #108]	; (6b9c <usb_serial_flush_callback+0x84>)
    6b2e:	ldrh	r2, [r5, #0]
    6b30:	cbnz	r2, 6b38 <usb_serial_flush_callback+0x20>
    6b32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b36:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    6b38:	ldr	r6, [pc, #100]	; (6ba0 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    6b3a:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    6b3e:	ldr	r7, [pc, #100]	; (6ba4 <usb_serial_flush_callback+0x8c>)
    6b40:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    6b42:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    6b44:	ldr	r4, [pc, #96]	; (6ba8 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    6b46:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    6b4a:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    6b4e:	mov	r0, r7
    6b50:	mov	r1, r4
    6b52:	bl	7cb8 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    6b56:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    6b5a:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    6b5e:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    6b62:	ldr	r3, [pc, #72]	; (6bac <usb_serial_flush_callback+0x94>)
    6b64:	str	r1, [r3, #0]
		location += 32;
    6b66:	adds	r1, #32
	} while (location < end_addr);
    6b68:	cmp	r2, r1
    6b6a:	bhi.n	6b64 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    6b6c:	dsb	sy
	asm("isb");
    6b70:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    6b74:	movs	r0, #4
    6b76:	mov	r1, r7
    6b78:	bl	7ce8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    6b7c:	ldrb	r3, [r6, #0]
    6b7e:	ldr	r2, [pc, #32]	; (6ba0 <usb_serial_flush_callback+0x88>)
    6b80:	adds	r3, #1
    6b82:	uxtb	r3, r3
    6b84:	cmp	r3, #3
    6b86:	it	hi
    6b88:	movhi	r3, #0
    6b8a:	strb	r3, [r2, #0]
	tx_available = 0;
    6b8c:	movs	r3, #0
    6b8e:	strh	r3, [r5, #0]
    6b90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b94:	.word	0x20017cb5
    6b98:	.word	0x20017cb7
    6b9c:	.word	0x20017ca2
    6ba0:	.word	0x20017cb4
    6ba4:	.word	0x200037c0
    6ba8:	.word	0x20003840
    6bac:	.word	0xe000ef70

00006bb0 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    6bb0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bb4:	sub	sp, #20
    6bb6:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    6bb8:	str	r1, [sp, #0]
    6bba:	cmp	r1, #0
    6bbc:	beq.w	6d16 <usb_serial_write.part.1+0x166>
    6bc0:	movs	r3, #0
    6bc2:	ldr	r5, [pc, #344]	; (6d1c <usb_serial_write.part.1+0x16c>)
    6bc4:	ldr.w	r8, [pc, #372]	; 6d3c <usb_serial_write.part.1+0x18c>
    6bc8:	ldr.w	sl, [pc, #352]	; 6d2c <usb_serial_write.part.1+0x17c>
				break;
			}
			asm("dsb" ::: "memory");
			tx_noautoflush = 0;
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    6bcc:	ldr	r7, [pc, #336]	; (6d20 <usb_serial_write.part.1+0x170>)
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    6bce:	ldr.w	fp, [pc, #368]	; 6d40 <usb_serial_write.part.1+0x190>
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    6bd2:	str	r3, [sp, #4]
		tx_noautoflush = 1;
    6bd4:	movs	r2, #1
		transfer_t *xfer = tx_transfer + tx_head;
    6bd6:	ldr	r3, [pc, #332]	; (6d24 <usb_serial_write.part.1+0x174>)
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
    6bd8:	strb	r2, [r5, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    6bda:	ldrb	r4, [r3, #0]
    6bdc:	ldr	r2, [pc, #328]	; (6d28 <usb_serial_write.part.1+0x178>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    6bde:	ldrh.w	r3, [r8]
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
    6be2:	add.w	r9, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    6be6:	cbnz	r3, 6c32 <usb_serial_write.part.1+0x82>
    6be8:	mov	r6, r3
    6bea:	mov	r4, r3
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    6bec:	mov	r0, r9
    6bee:	bl	7d34 <usb_transfer_status>
			if (!(status & 0x80)) {
    6bf2:	ands.w	r0, r0, #128	; 0x80
    6bf6:	beq.n	6cf6 <usb_serial_write.part.1+0x146>
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			asm("dsb" ::: "memory");
    6bf8:	dsb	sy
			tx_noautoflush = 0;
    6bfc:	movs	r2, #0
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    6bfe:	ldrb.w	r3, [sl]
    6c02:	ldr	r1, [pc, #296]	; (6d2c <usb_serial_write.part.1+0x17c>)
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			asm("dsb" ::: "memory");
			tx_noautoflush = 0;
    6c04:	strb	r2, [r5, #0]
			if (!waiting) {
    6c06:	cbnz	r4, 6c0a <usb_serial_write.part.1+0x5a>
				wait_begin_at = systick_millis_count;
    6c08:	ldr	r6, [r7, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    6c0a:	cmp	r3, #0
    6c0c:	bne.n	6cc4 <usb_serial_write.part.1+0x114>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    6c0e:	ldr	r3, [r7, #0]
    6c10:	subs	r3, r3, r6
    6c12:	cmp	r3, #120	; 0x78
    6c14:	bhi.n	6d0a <usb_serial_write.part.1+0x15a>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    6c16:	ldrb.w	r3, [fp]
    6c1a:	cmp	r3, #0
    6c1c:	beq.n	6cc4 <usb_serial_write.part.1+0x114>
			yield();
    6c1e:	bl	85d4 <yield>
			tx_noautoflush = 1;
    6c22:	movs	r4, #1
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    6c24:	ldrh.w	r3, [r8]
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
    6c28:	strb	r4, [r5, #0]
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    6c2a:	cmp	r3, #0
    6c2c:	beq.n	6bec <usb_serial_write.part.1+0x3c>
    6c2e:	ldr	r2, [pc, #244]	; (6d24 <usb_serial_write.part.1+0x174>)
    6c30:	ldrb	r4, [r2, #0]
    6c32:	mov	r2, r3
    6c34:	rsb	r0, r3, #2048	; 0x800
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    6c38:	lsls	r4, r4, #11
		if (size >= tx_available) {
    6c3a:	ldr	r6, [sp, #0]
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    6c3c:	ldr	r1, [pc, #240]	; (6d30 <usb_serial_write.part.1+0x180>)
    6c3e:	add	r0, r4
		if (size >= tx_available) {
    6c40:	cmp	r6, r2
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    6c42:	add	r0, r1
		if (size >= tx_available) {
    6c44:	bcc.n	6ccc <usb_serial_write.part.1+0x11c>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    6c46:	add	r4, r1
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    6c48:	ldr	r1, [sp, #8]
    6c4a:	bl	68c4 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    6c4e:	movs	r3, #0
    6c50:	mov	r1, r4
    6c52:	mov.w	r2, #2048	; 0x800
    6c56:	mov	r0, r9
    6c58:	bl	7cb8 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    6c5c:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    6c60:	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    6c64:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    6c68:	ldr	r2, [pc, #200]	; (6d34 <usb_serial_write.part.1+0x184>)
    6c6a:	str	r3, [r2, #0]
		location += 32;
    6c6c:	adds	r3, #32
	} while (location < end_addr);
    6c6e:	cmp	r4, r3
    6c70:	bhi.n	6c68 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    6c72:	dsb	sy
	asm("isb");
    6c76:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    6c7a:	movs	r0, #4
    6c7c:	mov	r1, r9
    6c7e:	bl	7ce8 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    6c82:	ldr	r3, [pc, #160]	; (6d24 <usb_serial_write.part.1+0x174>)
    6c84:	ldr	r2, [pc, #156]	; (6d24 <usb_serial_write.part.1+0x174>)
    6c86:	ldrb	r3, [r3, #0]
			size -= tx_available;
    6c88:	ldr	r0, [sp, #0]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    6c8a:	adds	r3, #1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    6c8c:	ldr	r1, [pc, #168]	; (6d38 <usb_serial_write.part.1+0x188>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    6c8e:	uxtb	r3, r3
    6c90:	cmp	r3, #3
    6c92:	it	hi
    6c94:	movhi	r3, #0
    6c96:	strb	r3, [r2, #0]
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    6c98:	movs	r2, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
    6c9a:	ldrh.w	r3, [r8]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    6c9e:	strh.w	r2, [r8]
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
    6ca2:	subs	r0, r0, r3
    6ca4:	str	r0, [sp, #0]
			sent += tx_available;
    6ca6:	ldr	r0, [sp, #4]
    6ca8:	add	r0, r3
    6caa:	str	r0, [sp, #4]
			data += tx_available;
    6cac:	ldr	r0, [sp, #8]
    6cae:	add	r0, r3
    6cb0:	str	r0, [sp, #8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    6cb2:	str.w	r2, [r1, #132]	; 0x84
			tx_available -= size;
			sent += size;
			size = 0;
			timer_start_oneshot();
		}
		asm("dsb" ::: "memory");
    6cb6:	dsb	sy
		tx_noautoflush = 0;
    6cba:	movs	r3, #0
    6cbc:	strb	r3, [r5, #0]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    6cbe:	ldr	r3, [sp, #0]
    6cc0:	cmp	r3, #0
    6cc2:	bne.n	6bd4 <usb_serial_write.part.1+0x24>
    6cc4:	ldr	r0, [sp, #4]
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    6cc6:	add	sp, #20
    6cc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    6ccc:	ldr	r4, [sp, #0]
    6cce:	str	r3, [sp, #12]
			tx_available -= size;
			sent += size;
    6cd0:	ldr	r3, [sp, #4]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    6cd2:	mov	r2, r4
    6cd4:	ldr	r1, [sp, #8]
			tx_available -= size;
			sent += size;
    6cd6:	add	r3, r4
    6cd8:	str	r3, [sp, #4]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    6cda:	bl	68c4 <memcpy>
			tx_available -= size;
    6cde:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    6ce0:	mov.w	r1, #3221225472	; 0xc0000000
    6ce4:	ldr	r2, [pc, #80]	; (6d38 <usb_serial_write.part.1+0x188>)
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
			sent += size;
			size = 0;
    6ce6:	movs	r0, #0
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    6ce8:	subs	r3, r3, r4
			sent += size;
			size = 0;
    6cea:	str	r0, [sp, #0]
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    6cec:	strh.w	r3, [r8]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    6cf0:	str.w	r1, [r2, #132]	; 0x84
    6cf4:	b.n	6cb6 <usb_serial_write.part.1+0x106>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    6cf6:	mov.w	r3, #2048	; 0x800
    6cfa:	ldr	r2, [pc, #40]	; (6d24 <usb_serial_write.part.1+0x174>)
				transmit_previous_timeout = 0;
    6cfc:	strb.w	r0, [sl]
    6d00:	ldrb	r4, [r2, #0]
    6d02:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    6d04:	strh.w	r3, [r8]
    6d08:	b.n	6c38 <usb_serial_write.part.1+0x88>
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    6d0a:	movs	r3, #1
				return sent;
    6d0c:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    6d0e:	strb	r3, [r1, #0]
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    6d10:	add	sp, #20
    6d12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    6d16:	ldr	r0, [sp, #0]
    6d18:	b.n	6cc6 <usb_serial_write.part.1+0x116>
    6d1a:	nop
    6d1c:	.word	0x20017cb5
    6d20:	.word	0x20017c78
    6d24:	.word	0x20017cb4
    6d28:	.word	0x200037c0
    6d2c:	.word	0x20017cb3
    6d30:	.word	0x20003840
    6d34:	.word	0xe000ef70
    6d38:	.word	0x402e0000
    6d3c:	.word	0x20017ca2
    6d40:	.word	0x20017cb7

00006d44 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    6d44:	bx	lr
    6d46:	nop

00006d48 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    6d48:	ldr	r3, [pc, #196]	; (6e10 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    6d4a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    6d4e:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    6d50:	ldr	r7, [pc, #192]	; (6e14 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    6d52:	cmp	r3, #0
    6d54:	beq.n	6e00 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    6d56:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    6d5a:	ldr.w	r8, [pc, #236]	; 6e48 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    6d5e:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    6d60:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    6d64:	movs	r1, #0
    6d66:	movs	r2, #128	; 0x80
    6d68:	ldr	r0, [pc, #172]	; (6e18 <usb_serial_configure+0xd0>)
	tx_head = 0;
    6d6a:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    6d6c:	ldr	r6, [pc, #172]	; (6e1c <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    6d6e:	bl	972c <memset>
	tx_head = 0;
    6d72:	ldr	r4, [pc, #172]	; (6e20 <usb_serial_configure+0xd8>)
	tx_available = 0;
    6d74:	ldr	r3, [pc, #172]	; (6e24 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    6d76:	mov	r1, r5
    6d78:	mov.w	r2, #256	; 0x100
    6d7c:	ldr	r0, [pc, #168]	; (6e28 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    6d7e:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    6d80:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    6d82:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    6d84:	bl	972c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    6d88:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    6d8a:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    6d8c:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    6d8e:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    6d90:	str	r5, [r6, #8]
    6d92:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    6d94:	ldr	r1, [pc, #148]	; (6e2c <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    6d96:	ldr	r6, [pc, #152]	; (6e30 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    6d98:	ldr	r0, [pc, #152]	; (6e34 <usb_serial_configure+0xec>)
	rx_available = 0;
    6d9a:	ldr.w	lr, [pc, #176]	; 6e4c <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    6d9e:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    6da0:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    6da2:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    6da4:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    6da6:	str	r5, [r6, #0]
    6da8:	str	r5, [r6, #4]
    6daa:	str	r5, [r6, #8]
    6dac:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    6dae:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    6db2:	bl	7c50 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    6db6:	ldrh.w	r1, [r8]
    6dba:	mov	r2, r5
    6dbc:	ldr	r3, [pc, #120]	; (6e38 <usb_serial_configure+0xf0>)
    6dbe:	movs	r0, #3
    6dc0:	bl	7bec <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    6dc4:	mov	r3, r5
    6dc6:	ldrh	r1, [r7, #0]
    6dc8:	movs	r2, #1
    6dca:	movs	r0, #4
    6dcc:	bl	7c50 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    6dd0:	mov	r0, r4
    6dd2:	adds	r4, #1
    6dd4:	bl	69f8 <rx_queue_transfer>
    6dd8:	cmp	r4, #8
    6dda:	bne.n	6dd0 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    6ddc:	ldr	r3, [pc, #92]	; (6e3c <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    6dde:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    6de0:	ldr	r0, [pc, #92]	; (6e40 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    6de2:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    6de4:	ldr	r4, [pc, #92]	; (6e44 <usb_serial_configure+0xfc>)
    6de6:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    6de8:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    6dec:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    6df0:	ldr.w	r2, [r3, #328]	; 0x148
    6df4:	orr.w	r2, r2, #16777216	; 0x1000000
    6df8:	str.w	r2, [r3, #328]	; 0x148
    6dfc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    6e00:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    6e02:	ldr.w	r8, [pc, #68]	; 6e48 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    6e06:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    6e08:	strh.w	r3, [r8]
    6e0c:	b.n	6d64 <usb_serial_configure+0x1c>
    6e0e:	nop
    6e10:	.word	0x20017cb8
    6e14:	.word	0x20017ca4
    6e18:	.word	0x200037c0
    6e1c:	.word	0x2001777c
    6e20:	.word	0x20017cb4
    6e24:	.word	0x20017ca2
    6e28:	.word	0x200036c0
    6e2c:	.word	0x20017cb0
    6e30:	.word	0x2001778c
    6e34:	.word	0x20017cb1
    6e38:	.word	0x00006a65
    6e3c:	.word	0x402e0000
    6e40:	.word	0x20017c8c
    6e44:	.word	0x00006b19
    6e48:	.word	0x20017c9e
    6e4c:	.word	0x20017778

00006e50 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    6e50:	ldr	r3, [pc, #196]	; (6f18 <usb_serial_read+0xc8>)
    6e52:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    6e56:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    6e5a:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    6e5c:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    6e5e:	ldr	r3, [pc, #188]	; (6f1c <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    6e60:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    6e62:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    6e64:	cmp	r1, #0
    6e66:	beq.n	6f10 <usb_serial_read+0xc0>
    6e68:	ldr	r3, [pc, #180]	; (6f20 <usb_serial_read+0xd0>)
    6e6a:	uxtb	r4, r4
    6e6c:	ldrb	r3, [r3, #0]
    6e6e:	cmp	r4, r3
    6e70:	beq.n	6f14 <usb_serial_read+0xc4>
    6e72:	mov	sl, r0
    6e74:	movs	r7, #0
    6e76:	ldr.w	fp, [pc, #192]	; 6f38 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    6e7a:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    6e7c:	ldr	r3, [pc, #164]	; (6f24 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    6e7e:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    6e82:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    6e84:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    6e86:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    6e88:	ldr	r3, [pc, #156]	; (6f28 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    6e8a:	it	cs
    6e8c:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    6e8e:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    6e90:	ldr	r3, [pc, #144]	; (6f24 <usb_serial_read+0xd4>)
    6e92:	ldrh.w	lr, [r3, r5, lsl #1]
    6e96:	ldr	r3, [pc, #148]	; (6f2c <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    6e98:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    6e9c:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    6ea0:	ldr	r3, [pc, #140]	; (6f30 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    6ea2:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    6ea6:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    6ea8:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    6eaa:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    6eac:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    6eae:	bcs.n	6ee4 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    6eb0:	add.w	r1, lr, r5, lsl #9
    6eb4:	mov	r2, r8
    6eb6:	add	r1, r3
    6eb8:	bl	68c4 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    6ebc:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    6ebe:	ldr.w	r1, [fp]
    6ec2:	mov	r0, r9
			rx_index[i] += len;
    6ec4:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    6ec8:	rsb	r1, r8, r1
			rx_index[i] += len;
    6ecc:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    6ece:	str.w	r1, [fp]
			rx_index[i] += len;
    6ed2:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    6ed6:	ldr	r3, [pc, #92]	; (6f34 <usb_serial_read+0xe4>)
    6ed8:	mov.w	r2, #131072	; 0x20000
    6edc:	str	r2, [r3, #0]
	return count;
}
    6ede:	add	sp, #12
    6ee0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    6ee4:	bl	68c4 <memcpy>
			p += avail;
			rx_available -= avail;
    6ee8:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    6eec:	uxtb	r3, r4
			rx_queue_transfer(i);
    6eee:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    6ef0:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    6ef2:	add	sl, r6
			rx_available -= avail;
    6ef4:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    6ef8:	ldr	r2, [pc, #32]	; (6f1c <usb_serial_read+0xcc>)
    6efa:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    6efc:	bl	69f8 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    6f00:	cmp	r9, r7
    6f02:	bls.n	6f0c <usb_serial_read+0xbc>
    6f04:	ldr	r3, [pc, #24]	; (6f20 <usb_serial_read+0xd0>)
    6f06:	ldrb	r3, [r3, #0]
    6f08:	cmp	r4, r3
    6f0a:	bne.n	6e7a <usb_serial_read+0x2a>
    6f0c:	mov	r0, r7
    6f0e:	b.n	6ed6 <usb_serial_read+0x86>
    6f10:	mov	r0, r1
    6f12:	b.n	6ed6 <usb_serial_read+0x86>
    6f14:	movs	r0, #0
    6f16:	b.n	6ed6 <usb_serial_read+0x86>
    6f18:	.word	0xe000e18c
    6f1c:	.word	0x20017cb1
    6f20:	.word	0x20017cb0
    6f24:	.word	0x2001778c
    6f28:	.word	0x2001779c
    6f2c:	.word	0x2001777c
    6f30:	.word	0x200026c0
    6f34:	.word	0xe000e10c
    6f38:	.word	0x20017778

00006f3c <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    6f3c:	ldr	r3, [pc, #44]	; (6f6c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    6f3e:	ldr	r2, [pc, #48]	; (6f70 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    6f40:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    6f42:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    6f44:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    6f46:	cmp	r3, r2
    6f48:	beq.n	6f66 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    6f4a:	adds	r3, #1
	uint32_t i = rx_list[tail];
    6f4c:	ldr	r0, [pc, #36]	; (6f74 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    6f4e:	ldr	r2, [pc, #40]	; (6f78 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    6f50:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    6f52:	ldr	r1, [pc, #40]	; (6f7c <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    6f54:	it	cs
    6f56:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    6f58:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    6f5a:	ldrh.w	r1, [r1, r3, lsl #1]
    6f5e:	add.w	r3, r2, r3, lsl #9
    6f62:	ldrb	r0, [r3, r1]
    6f64:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    6f66:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    6f6a:	bx	lr
    6f6c:	.word	0x20017cb1
    6f70:	.word	0x20017cb0
    6f74:	.word	0x2001779c
    6f78:	.word	0x200026c0
    6f7c:	.word	0x2001778c

00006f80 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	uint32_t n = rx_available;
    6f80:	ldr	r3, [pc, #12]	; (6f90 <usb_serial_available+0x10>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
    6f82:	push	{r4, lr}
	uint32_t n = rx_available;
    6f84:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    6f86:	cbnz	r4, 6f8c <usb_serial_available+0xc>
    6f88:	bl	85d4 <yield>
	return n;
}
    6f8c:	mov	r0, r4
    6f8e:	pop	{r4, pc}
    6f90:	.word	0x20017778

00006f94 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    6f94:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    6f98:	ldr	r6, [pc, #84]	; (6ff0 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    6f9a:	ldr	r5, [pc, #88]	; (6ff4 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    6f9c:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    6f9e:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    6fa0:	uxtb	r4, r4
	while (tail != rx_head) {
    6fa2:	cmp	r4, r3
    6fa4:	beq.n	6fea <usb_serial_flush_input+0x56>
    6fa6:	ldr.w	r9, [pc, #84]	; 6ffc <usb_serial_flush_input+0x68>
    6faa:	ldr.w	fp, [pc, #84]	; 7000 <usb_serial_flush_input+0x6c>
    6fae:	ldr.w	r8, [pc, #84]	; 7004 <usb_serial_flush_input+0x70>
    6fb2:	ldr	r7, [pc, #68]	; (6ff8 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    6fb4:	adds	r4, #1
    6fb6:	cmp	r4, #8
    6fb8:	uxtb.w	sl, r4
    6fbc:	bls.n	6fc2 <usb_serial_flush_input+0x2e>
    6fbe:	movs	r4, #0
    6fc0:	mov	sl, r4
		uint32_t i = rx_list[tail];
    6fc2:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    6fc6:	ldr.w	r2, [fp]
    6fca:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    6fce:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    6fd0:	ldrh.w	r1, [r7, r1, lsl #1]
    6fd4:	subs	r3, r3, r1
    6fd6:	subs	r3, r2, r3
    6fd8:	str.w	r3, [fp]
		rx_queue_transfer(i);
    6fdc:	bl	69f8 <rx_queue_transfer>
		rx_tail = tail;
    6fe0:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    6fe4:	ldrb	r3, [r5, #0]
    6fe6:	cmp	r4, r3
    6fe8:	bne.n	6fb4 <usb_serial_flush_input+0x20>
    6fea:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fee:	nop
    6ff0:	.word	0x20017cb1
    6ff4:	.word	0x20017cb0
    6ff8:	.word	0x2001778c
    6ffc:	.word	0x2001779c
    7000:	.word	0x20017778
    7004:	.word	0x2001777c

00007008 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    7008:	push	{lr}
    700a:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    700c:	movs	r1, #1
    700e:	add.w	r0, sp, #7
    7012:	bl	6e50 <usb_serial_read>
    7016:	cbz	r0, 7022 <usb_serial_getchar+0x1a>
    7018:	ldrb.w	r0, [sp, #7]
	return -1;
}
    701c:	add	sp, #12
    701e:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    7022:	mov.w	r0, #4294967295
    7026:	b.n	701c <usb_serial_getchar+0x14>

00007028 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    7028:	ldr	r3, [pc, #36]	; (7050 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    702a:	push	{lr}
    702c:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    702e:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    7030:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    7034:	cbnz	r3, 7040 <usb_serial_putchar+0x18>
    7036:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    703a:	add	sp, #12
    703c:	ldr.w	pc, [sp], #4
    7040:	movs	r1, #1
    7042:	add.w	r0, sp, #7
    7046:	bl	6bb0 <usb_serial_write.part.1>
    704a:	add	sp, #12
    704c:	ldr.w	pc, [sp], #4
    7050:	.word	0x20017cb7

00007054 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    7054:	ldr	r3, [pc, #16]	; (7068 <usb_serial_write+0x14>)
    7056:	ldrb	r3, [r3, #0]
    7058:	and.w	r2, r3, #255	; 0xff
    705c:	cbz	r3, 7062 <usb_serial_write+0xe>
    705e:	b.w	6bb0 <usb_serial_write.part.1>
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    7062:	mov	r0, r2
    7064:	bx	lr
    7066:	nop
    7068:	.word	0x20017cb7

0000706c <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    706c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    7070:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    7072:	ldr.w	r8, [pc, #68]	; 70b8 <usb_serial_write_buffer_free+0x4c>
    7076:	movs	r3, #1
    7078:	ldr	r5, [pc, #52]	; (70b0 <usb_serial_write_buffer_free+0x44>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    707a:	mov	r7, r4
    707c:	ldr	r6, [pc, #52]	; (70b4 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    707e:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    7082:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    7084:	mov	r0, r5
    7086:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    7088:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    708a:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    708e:	beq.n	709c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    7090:	bl	7d34 <usb_transfer_status>
    7094:	lsls	r3, r0, #24
    7096:	it	pl
    7098:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    709c:	cmp	r4, #4
    709e:	bne.n	7082 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	asm("dsb" ::: "memory");
    70a0:	dsb	sy
	tx_noautoflush = 0;
    70a4:	movs	r3, #0
	return sum;
}
    70a6:	mov	r0, r7
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	asm("dsb" ::: "memory");
	tx_noautoflush = 0;
    70a8:	strb.w	r3, [r8]
	return sum;
}
    70ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70b0:	.word	0x200037c0
    70b4:	.word	0x20017cb4
    70b8:	.word	0x20017cb5

000070bc <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    70bc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    70c0:	ldr	r3, [pc, #128]	; (7144 <usb_serial_flush_output+0x88>)
    70c2:	ldrb	r3, [r3, #0]
    70c4:	cbz	r3, 70cc <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    70c6:	ldr	r5, [pc, #128]	; (7148 <usb_serial_flush_output+0x8c>)
    70c8:	ldrh	r2, [r5, #0]
    70ca:	cbnz	r2, 70d0 <usb_serial_flush_output+0x14>
    70cc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    70d0:	ldr.w	r8, [pc, #136]	; 715c <usb_serial_flush_output+0xa0>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    70d4:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    70d8:	ldr	r6, [pc, #112]	; (714c <usb_serial_flush_output+0x90>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    70da:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    70de:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    70e2:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    70e4:	ldr	r4, [pc, #104]	; (7150 <usb_serial_flush_output+0x94>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    70e6:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    70e8:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    70ec:	ldr	r7, [pc, #100]	; (7154 <usb_serial_flush_output+0x98>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    70ee:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    70f2:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    70f4:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    70f8:	mov	r1, r4
    70fa:	bl	7cb8 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    70fe:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    7102:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    7106:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    710a:	ldr	r3, [pc, #76]	; (7158 <usb_serial_flush_output+0x9c>)
    710c:	str	r1, [r3, #0]
		location += 32;
    710e:	adds	r1, #32
	} while (location < end_addr);
    7110:	cmp	r2, r1
    7112:	bhi.n	710c <usb_serial_flush_output+0x50>
	asm("dsb");
    7114:	dsb	sy
	asm("isb");
    7118:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    711c:	movs	r0, #4
    711e:	mov	r1, r6
    7120:	bl	7ce8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    7124:	ldrb.w	r3, [r8]
    7128:	ldr	r2, [pc, #48]	; (715c <usb_serial_flush_output+0xa0>)
    712a:	adds	r3, #1
    712c:	uxtb	r3, r3
    712e:	cmp	r3, #3
    7130:	it	hi
    7132:	movhi	r3, #0
    7134:	strb	r3, [r2, #0]
	tx_available = 0;
    7136:	movs	r3, #0
    7138:	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    713a:	dsb	sy
	tx_noautoflush = 0;
    713e:	strb	r3, [r7, #0]
    7140:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7144:	.word	0x20017cb7
    7148:	.word	0x20017ca2
    714c:	.word	0x200037c0
    7150:	.word	0x20003840
    7154:	.word	0x20017cb5
    7158:	.word	0xe000ef70
    715c:	.word	0x20017cb4

00007160 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    7160:	ldr	r2, [pc, #600]	; (73bc <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7162:	ldr	r3, [pc, #604]	; (73c0 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    7164:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    7166:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    716a:	ldr	r4, [pc, #600]	; (73c4 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    716c:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    7170:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    7172:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    7174:	bls.n	71b0 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    7176:	ldr	r3, [pc, #592]	; (73c8 <set_arm_clock+0x268>)
    7178:	cmp	r0, r3
    717a:	bls.w	73a8 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    717e:	ldr	r3, [pc, #588]	; (73cc <set_arm_clock+0x26c>)
    7180:	movw	r5, #1575	; 0x627
    7184:	ldr	r7, [pc, #584]	; (73d0 <set_arm_clock+0x270>)
    7186:	add	r3, r0
    7188:	ldr	r4, [pc, #584]	; (73d4 <set_arm_clock+0x274>)
    718a:	lsrs	r2, r3, #8
    718c:	umull	r3, r2, r7, r2
    7190:	lsrs	r3, r2, #7
    7192:	add.w	r3, r3, r3, lsl #2
    7196:	add.w	r2, r3, r3, lsl #2
    719a:	addw	r3, r2, #1250	; 0x4e2
    719e:	cmp	r3, r5
    71a0:	it	cs
    71a2:	movcs	r3, r5
    71a4:	sub.w	r3, r3, #800	; 0x320
    71a8:	umull	r3, r5, r4, r3
    71ac:	lsrs	r5, r5, #3
    71ae:	b.n	71ba <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    71b0:	ldr	r5, [pc, #548]	; (73d8 <set_arm_clock+0x278>)
    71b2:	cmp	r0, r5
    71b4:	ite	ls
    71b6:	movls	r5, #6
    71b8:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    71ba:	ldr	r2, [pc, #516]	; (73c0 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    71bc:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    71c0:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    71c4:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    71c6:	orr.w	r3, r3, #192	; 0xc0
    71ca:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    71ce:	bcs.n	71e6 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    71d0:	ldr	r3, [pc, #496]	; (73c4 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    71d2:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    71d6:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    71d8:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    71da:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    71dc:	ldr	r3, [r2, #0]
    71de:	cmp	r3, #0
    71e0:	bge.n	71dc <set_arm_clock+0x7c>
    71e2:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    71e6:	ands.w	r3, lr, #33554432	; 0x2000000
    71ea:	bne.n	7250 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    71ec:	ldr	r4, [pc, #492]	; (73dc <set_arm_clock+0x27c>)
    71ee:	ldr	r2, [pc, #496]	; (73e0 <set_arm_clock+0x280>)
    71f0:	ldr.w	ip, [r4, #16]
    71f4:	mov	r4, r2
    71f6:	and.w	r2, ip, r2
    71fa:	cmp	r2, r4
    71fc:	itet	eq
    71fe:	moveq.w	r3, #402653184	; 0x18000000
    7202:	movne.w	r2, #4096	; 0x1000
    7206:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    7208:	eor.w	r4, lr, r3
    720c:	tst.w	r4, #939524096	; 0x38000000
    7210:	beq.n	7224 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    7212:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    7216:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    721a:	ldr	r4, [pc, #420]	; (73c0 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    721c:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    7220:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7224:	eor.w	r3, r1, r2
    7228:	tst.w	r3, #12288	; 0x3000
    722c:	beq.n	7240 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    722e:	ldr	r3, [pc, #400]	; (73c0 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    7230:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    7234:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    7236:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    7238:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    723a:	ldr	r3, [r2, #72]	; 0x48
    723c:	lsls	r4, r3, #28
    723e:	bmi.n	723a <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    7240:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    7244:	ldr	r2, [pc, #376]	; (73c0 <set_arm_clock+0x260>)
    7246:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    724a:	ldr	r3, [r2, #72]	; 0x48
    724c:	lsls	r1, r3, #26
    724e:	bmi.n	724a <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    7250:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7252:	ldr	r4, [pc, #400]	; (73e4 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    7254:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    7256:	mul.w	r3, r1, r2
    725a:	mul.w	r3, r0, r3
    725e:	cmp	r3, r4
    7260:	bhi.n	7276 <set_arm_clock+0x116>
		if (div_arm < 8) {
    7262:	cmp	r2, #7
    7264:	bhi.w	7392 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    7268:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    726a:	mul.w	r3, r1, r2
    726e:	mul.w	r3, r0, r3
    7272:	cmp	r3, r4
    7274:	bls.n	7262 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7276:	ldr	r0, [pc, #368]	; (73e8 <set_arm_clock+0x288>)
    7278:	ldr	r4, [pc, #368]	; (73ec <set_arm_clock+0x28c>)
    727a:	add	r0, r3
    727c:	umull	r0, r3, r4, r0
    7280:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    7282:	cmp	r3, #108	; 0x6c
    7284:	bhi.w	739e <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    7288:	cmp	r3, #53	; 0x35
    728a:	bhi.w	73ac <set_arm_clock+0x24c>
    728e:	ldr.w	r8, [pc, #392]	; 7418 <set_arm_clock+0x2b8>
    7292:	movs	r3, #54	; 0x36
    7294:	ldr	r0, [pc, #344]	; (73f0 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7296:	ldr.w	ip, [pc, #324]	; 73dc <set_arm_clock+0x27c>
    729a:	ldr	r4, [pc, #344]	; (73f4 <set_arm_clock+0x294>)
    729c:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    72a0:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    72a4:	and.w	r4, r9, r4
    72a8:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    72aa:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    72ae:	beq.n	72c8 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    72b0:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    72b4:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    72b8:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    72ba:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    72be:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    72c2:	ldr	r3, [r4, #0]
    72c4:	cmp	r3, #0
    72c6:	bge.n	72c2 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    72c8:	ldr.w	ip, [pc, #244]	; 73c0 <set_arm_clock+0x260>
    72cc:	subs	r2, #1
    72ce:	ldr.w	r3, [ip, #16]
    72d2:	and.w	r3, r3, #7
    72d6:	cmp	r3, r2
    72d8:	beq.n	72ea <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    72da:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    72de:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    72e0:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    72e4:	ldr	r3, [r4, #72]	; 0x48
    72e6:	lsls	r3, r3, #15
    72e8:	bmi.n	72e4 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    72ea:	subs	r1, #1
    72ec:	lsls	r1, r1, #10
    72ee:	eor.w	r3, lr, r1
    72f2:	tst.w	r3, #7168	; 0x1c00
    72f6:	beq.n	7312 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    72f8:	ldr	r3, [pc, #196]	; (73c0 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    72fa:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    72fe:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    7302:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7304:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    7308:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    730c:	ldr	r3, [r2, #72]	; 0x48
    730e:	lsls	r1, r3, #30
    7310:	bmi.n	730c <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7312:	ldr	r3, [pc, #228]	; (73f8 <set_arm_clock+0x298>)
    7314:	ldr	r1, [pc, #228]	; (73fc <set_arm_clock+0x29c>)
    7316:	add	r3, r0
    7318:	lsrs	r3, r3, #7
    731a:	umull	r3, r1, r1, r3
    731e:	lsrs	r1, r1, #12
    7320:	cmp	r1, #4
    7322:	it	cs
    7324:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    7326:	subs	r3, r1, #1
    7328:	lsls	r3, r3, #8
    732a:	eor.w	r2, lr, r3
    732e:	tst.w	r2, #768	; 0x300
    7332:	beq.n	7344 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    7334:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    7338:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    733c:	ldr	r2, [pc, #128]	; (73c0 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    733e:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    7342:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    7344:	ldr	r3, [pc, #120]	; (73c0 <set_arm_clock+0x260>)
    7346:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7348:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    734a:	bic.w	r4, r4, #33554432	; 0x2000000
    734e:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7350:	ldr	r3, [r2, #72]	; 0x48
    7352:	lsls	r3, r3, #26
    7354:	bmi.n	7350 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7356:	ldr	r3, [pc, #168]	; (7400 <set_arm_clock+0x2a0>)
    7358:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    735c:	ldr	r4, [pc, #164]	; (7404 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    735e:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7360:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    7364:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7366:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    736a:	ldr	r4, [pc, #156]	; (7408 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    736c:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    7370:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7374:	ldr	r2, [pc, #148]	; (740c <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    7376:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7378:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    737a:	bcs.n	738e <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    737c:	ldr	r3, [pc, #68]	; (73c4 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    737e:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7382:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7384:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    7386:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7388:	ldr	r3, [r2, #0]
    738a:	cmp	r3, #0
    738c:	bge.n	7388 <set_arm_clock+0x228>
	}

	return frequency;
}
    738e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    7392:	cmp	r1, #4
    7394:	bhi.w	7276 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    7398:	adds	r1, #1
				div_arm = 1;
    739a:	movs	r2, #1
    739c:	b.n	7256 <set_arm_clock+0xf6>
    739e:	ldr.w	r8, [pc, #124]	; 741c <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    73a2:	movs	r3, #108	; 0x6c
    73a4:	ldr	r0, [pc, #104]	; (7410 <set_arm_clock+0x2b0>)
    73a6:	b.n	7296 <set_arm_clock+0x136>
    73a8:	movs	r5, #18
    73aa:	b.n	71ba <set_arm_clock+0x5a>
    73ac:	ldr	r0, [pc, #100]	; (7414 <set_arm_clock+0x2b4>)
    73ae:	ldr.w	r8, [pc, #112]	; 7420 <set_arm_clock+0x2c0>
    73b2:	mul.w	r0, r0, r3
    73b6:	orr.w	r8, r3, r8
    73ba:	b.n	7296 <set_arm_clock+0x136>
    73bc:	.word	0x1f78a400
    73c0:	.word	0x400fc000
    73c4:	.word	0x40080000
    73c8:	.word	0x23c34600
    73cc:	.word	0xdc3cba00
    73d0:	.word	0x004cb223
    73d4:	.word	0x51eb851f
    73d8:	.word	0x016e3600
    73dc:	.word	0x400d8000
    73e0:	.word	0x80003040
    73e4:	.word	0x269fb1ff
    73e8:	.word	0x005b8d80
    73ec:	.word	0x165e9f81
    73f0:	.word	0x269fb200
    73f4:	.word	0x8001307f
    73f8:	.word	0x08f0d17f
    73fc:	.word	0x00e5109f
    7400:	.word	0x431bde83
    7404:	.word	0x20001bc4
    7408:	.word	0x20001bc0
    740c:	.word	0x200177b8
    7410:	.word	0x4d3f6400
    7414:	.word	0x00b71b00
    7418:	.word	0x80002036
    741c:	.word	0x8000206c
    7420:	.word	0x80002000

00007424 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    7424:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    7426:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    7428:	cbz	r3, 7432 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    742a:	ldr	r3, [r2, #4]
    742c:	orr.w	r3, r3, #32768	; 0x8000
    7430:	str	r3, [r2, #4]
	}
	__disable_irq();
    7432:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    7434:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    7436:	cbz	r4, 7490 <schedule_transfer+0x6c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    7438:	ldr	r3, [pc, #112]	; (74ac <schedule_transfer+0x88>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    743a:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    743c:	ldr.w	r4, [r3, #432]	; 0x1b0
    7440:	tst	r4, r1
    7442:	bne.n	7470 <schedule_transfer+0x4c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    7444:	ldr	r6, [pc, #104]	; (74b0 <schedule_transfer+0x8c>)
    7446:	ldr	r7, [r6, #0]
    7448:	b.n	7454 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    744a:	ldr	r4, [r6, #0]
    744c:	subs	r4, r4, r7
    744e:	cmp.w	r4, #2400	; 0x960
    7452:	bcs.n	746c <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    7454:	ldr.w	r4, [r3, #320]	; 0x140
    7458:	orr.w	r4, r4, #16384	; 0x4000
    745c:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    7460:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    7464:	ldr.w	r4, [r3, #320]	; 0x140
    7468:	lsls	r4, r4, #17
    746a:	bpl.n	744a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    746c:	ands	r5, r1
    746e:	beq.n	7478 <schedule_transfer+0x54>
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    7470:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    7472:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    7474:	pop	{r4, r5, r6, r7}
    7476:	bx	lr
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    7478:	ldr	r4, [pc, #48]	; (74ac <schedule_transfer+0x88>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
    747a:	str	r2, [r0, #8]
		endpoint->status = 0;
    747c:	str	r5, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
    747e:	ldr.w	r3, [r4, #432]	; 0x1b0
    7482:	orrs	r1, r3
    7484:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    7488:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    748a:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    748c:	pop	{r4, r5, r6, r7}
    748e:	bx	lr
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
    7490:	ldr	r5, [pc, #24]	; (74ac <schedule_transfer+0x88>)
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    7492:	str	r2, [r0, #8]
	endpoint->status = 0;
    7494:	str	r4, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    7496:	ldr.w	r3, [r5, #432]	; 0x1b0
    749a:	orrs	r1, r3
    749c:	str.w	r1, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    74a0:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    74a2:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    74a4:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    74a6:	pop	{r4, r5, r6, r7}
    74a8:	bx	lr
    74aa:	nop
    74ac:	.word	0x402e0000
    74b0:	.word	0xe0001004

000074b4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    74b4:	push	{r4, r5, r6, lr}
    74b6:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    74b8:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    74ba:	cbz	r0, 74e2 <run_callbacks+0x2e>
    74bc:	mov	r2, r0
    74be:	movs	r4, #0
    74c0:	b.n	74ca <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    74c2:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    74c4:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    74c6:	cmp	r2, #1
    74c8:	beq.n	74e4 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    74ca:	ldr	r3, [r2, #4]
    74cc:	ands.w	r3, r3, #128	; 0x80
    74d0:	beq.n	74c2 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    74d2:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    74d4:	cbz	r4, 74e2 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    74d6:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    74d8:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    74da:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    74dc:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    74de:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    74e0:	bne.n	74d6 <run_callbacks+0x22>
    74e2:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    74e4:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    74e6:	str	r3, [r6, #52]	; 0x34
			break;
    74e8:	b.n	74d4 <run_callbacks+0x20>
    74ea:	nop

000074ec <endpoint0_transmit.constprop.1>:
	}
	printf("endpoint 0 stall\n");
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    74ec:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    74ee:	cbnz	r1, 752a <endpoint0_transmit.constprop.1+0x3e>
    74f0:	ldr	r4, [pc, #132]	; (7578 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    74f2:	ldr	r1, [pc, #136]	; (757c <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    74f4:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    74f6:	ldr	r3, [pc, #136]	; (7580 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    74f8:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    74fa:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    74fe:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    7500:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    7502:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    7504:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7506:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    7508:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    750a:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    750e:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    7512:	ldr	r5, [pc, #112]	; (7584 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    7514:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    7518:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    751a:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    751e:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    7520:	ldr.w	r3, [r2, #432]	; 0x1b0
    7524:	cmp	r3, #0
    7526:	bne.n	7520 <endpoint0_transmit.constprop.1+0x34>
}
    7528:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    752a:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    752c:	ldr	r3, [pc, #88]	; (7588 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    752e:	ldr	r5, [pc, #80]	; (7580 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    7530:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    7532:	ldr	r4, [pc, #68]	; (7578 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    7534:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    7538:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    753a:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    753c:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    753e:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    7542:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    7544:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    7548:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    754a:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    754e:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    7552:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    7556:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    7558:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    755a:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    755e:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    7562:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    7566:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    7568:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    756a:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    756e:	ldr.w	r3, [r2, #432]	; 0x1b0
    7572:	cmp	r3, #0
    7574:	bne.n	756e <endpoint0_transmit.constprop.1+0x82>
    7576:	b.n	74f2 <endpoint0_transmit.constprop.1+0x6>
    7578:	.word	0x20000000
    757c:	.word	0x20017ce0
    7580:	.word	0x402e0000
    7584:	.word	0x2001767c
    7588:	.word	0x20017cc0

0000758c <usb_isr>:
	__builtin_unreachable();
}


void usb_isr(void)
{
    758c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    7590:	ldr	r4, [pc, #728]	; (786c <usb_isr+0x2e0>)
	__builtin_unreachable();
}


void usb_isr(void)
{
    7592:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    7594:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    7598:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    759c:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    75a0:	beq.n	766c <usb_isr+0xe0>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    75a2:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    75a6:	cmp	r3, #0
    75a8:	beq.n	7662 <usb_isr+0xd6>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    75aa:	mov.w	fp, #65537	; 0x10001
    75ae:	ldr	r7, [pc, #704]	; (7870 <usb_isr+0x2e4>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    75b0:	mov	r6, r4
    75b2:	ldr.w	r9, [pc, #704]	; 7874 <usb_isr+0x2e8>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    75b6:	mov	sl, fp
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    75b8:	str.w	r8, [sp]
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    75bc:	str.w	r3, [r4, #428]	; 0x1ac
    75c0:	ldr	r2, [r7, #40]	; 0x28
    75c2:	ldr	r1, [r7, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    75c4:	ldr.w	r3, [r4, #320]	; 0x140
    75c8:	orr.w	r3, r3, #8192	; 0x2000
    75cc:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    75d0:	ldr.w	r3, [r4, #320]	; 0x140
    75d4:	lsls	r0, r3, #18
    75d6:	bpl.n	75c4 <usb_isr+0x38>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    75d8:	ldr.w	r3, [r6, #320]	; 0x140
    75dc:	bic.w	r3, r3, #8192	; 0x2000
    75e0:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    75e4:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    75e8:	ldr.w	r5, [r4, #436]	; 0x1b4
    75ec:	ands.w	r5, r5, #65537	; 0x10001
    75f0:	bne.n	75e8 <usb_isr+0x5c>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    75f2:	uxth	r0, r2
    75f4:	movw	ip, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    75f8:	str.w	r5, [r9]
{
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
    75fc:	mov	lr, r1
	switch (setup.wRequestAndType) {
    75fe:	cmp	r0, ip
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    7600:	ldr	r3, [pc, #624]	; (7874 <usb_isr+0x2e8>)
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    7602:	bhi.w	7764 <usb_isr+0x1d8>
    7606:	cmp.w	r0, #1664	; 0x680
    760a:	bcs.w	7902 <usb_isr+0x376>
    760e:	cmp.w	r0, #258	; 0x102
    7612:	beq.w	7994 <usb_isr+0x408>
    7616:	bhi.w	77a2 <usb_isr+0x216>
    761a:	cmp	r0, #128	; 0x80
    761c:	beq.w	79e6 <usb_isr+0x45a>
    7620:	cmp	r0, #130	; 0x82
    7622:	bne.w	778e <usb_isr+0x202>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    7626:	uxth	r1, r1
    7628:	and.w	r3, r1, #127	; 0x7f
		if (endpoint > 7) break;
    762c:	cmp	r3, #7
    762e:	bhi.w	778e <usb_isr+0x202>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    7632:	lsls	r3, r3, #2
    7634:	ldr	r2, [pc, #576]	; (7878 <usb_isr+0x2ec>)
		reply_buffer[0] = 0;
    7636:	ldr	r0, [pc, #580]	; (787c <usb_isr+0x2f0>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    7638:	add	r2, r3
    763a:	ldr	r3, [r2, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    763c:	lsls	r2, r1, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    763e:	strb	r5, [r0, #0]
		reply_buffer[1] = 0;
    7640:	strb	r5, [r0, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    7642:	bpl.w	7ae2 <usb_isr+0x556>
    7646:	lsls	r3, r3, #15
    7648:	bpl.n	764e <usb_isr+0xc2>
			reply_buffer[0] = 1;
    764a:	movs	r3, #1
    764c:	strb	r3, [r0, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    764e:	movs	r1, #2
    7650:	ldr	r0, [pc, #552]	; (787c <usb_isr+0x2f0>)
    7652:	bl	74ec <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    7656:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    765a:	cmp	r3, #0
    765c:	bne.n	75bc <usb_isr+0x30>
    765e:	ldr.w	r8, [sp]
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    7662:	ldr	r2, [pc, #520]	; (786c <usb_isr+0x2e0>)
    7664:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    7668:	cmp	r3, #0
    766a:	bne.n	7700 <usb_isr+0x174>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    766c:	tst.w	r8, #64	; 0x40
    7670:	beq.n	76a4 <usb_isr+0x118>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    7672:	ldr	r3, [pc, #504]	; (786c <usb_isr+0x2e0>)
    7674:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    7678:	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    767a:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    767e:	ldr.w	r1, [r3, #444]	; 0x1bc
    7682:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    7686:	ldr.w	r4, [r2, #432]	; 0x1b0
    768a:	ldr	r3, [pc, #480]	; (786c <usb_isr+0x2e0>)
    768c:	cmp	r4, #0
    768e:	bne.n	7686 <usb_isr+0xfa>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    7690:	mov.w	r2, #4294967295
    7694:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    7698:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    769c:	bl	6d44 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    76a0:	ldr	r3, [pc, #476]	; (7880 <usb_isr+0x2f4>)
    76a2:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    76a4:	tst.w	r8, #16777216	; 0x1000000
    76a8:	beq.n	76b2 <usb_isr+0x126>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    76aa:	ldr	r3, [pc, #472]	; (7884 <usb_isr+0x2f8>)
    76ac:	ldr	r3, [r3, #0]
    76ae:	cbz	r3, 76b2 <usb_isr+0x126>
    76b0:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    76b2:	tst.w	r8, #33554432	; 0x2000000
    76b6:	beq.n	76c0 <usb_isr+0x134>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    76b8:	ldr	r3, [pc, #460]	; (7888 <usb_isr+0x2fc>)
    76ba:	ldr	r3, [r3, #0]
    76bc:	cbz	r3, 76c0 <usb_isr+0x134>
    76be:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    76c0:	tst.w	r8, #4
    76c4:	beq.n	76d8 <usb_isr+0x14c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    76c6:	ldr	r3, [pc, #420]	; (786c <usb_isr+0x2e0>)
    76c8:	ldr.w	r3, [r3, #388]	; 0x184
    76cc:	ands.w	r3, r3, #512	; 0x200
    76d0:	beq.n	775e <usb_isr+0x1d2>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    76d2:	ldr	r3, [pc, #440]	; (788c <usb_isr+0x300>)
    76d4:	movs	r2, #1
    76d6:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    76d8:	ldr	r3, [pc, #400]	; (786c <usb_isr+0x2e0>)
    76da:	ldr.w	r2, [r3, #328]	; 0x148
    76de:	lsls	r2, r2, #24
    76e0:	bpl.n	76fa <usb_isr+0x16e>
    76e2:	tst.w	r8, #128	; 0x80
    76e6:	beq.n	76fa <usb_isr+0x16e>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    76e8:	ldr	r1, [pc, #420]	; (7890 <usb_isr+0x304>)
    76ea:	ldrb	r2, [r1, #0]
    76ec:	cbz	r2, 76fa <usb_isr+0x16e>
			if (--usb_reboot_timer == 0) {
    76ee:	subs	r2, #1
    76f0:	uxtb	r2, r2
    76f2:	strb	r2, [r1, #0]
    76f4:	cmp	r2, #0
    76f6:	beq.w	7b7e <usb_isr+0x5f2>
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    76fa:	add	sp, #12
    76fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    7700:	ldr	r1, [pc, #368]	; (7874 <usb_isr+0x2e8>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    7702:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    7706:	ldr	r0, [r1, #0]
    7708:	tst	r3, r0
    770a:	bne.w	7aea <usb_isr+0x55e>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    770e:	ldr	r2, [pc, #368]	; (7880 <usb_isr+0x2f4>)
    7710:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    7712:	ands	r5, r3
    7714:	beq.n	766c <usb_isr+0xe0>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    7716:	lsrs	r6, r5, #16
    7718:	beq.n	773a <usb_isr+0x1ae>
    771a:	ldr	r7, [pc, #340]	; (7870 <usb_isr+0x2e4>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    771c:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    7720:	rbit	r4, r6
    7724:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    7728:	add.w	r0, r7, r4, lsl #7
					tx &= ~(1<<p);
    772c:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    7730:	adds	r0, #64	; 0x40
    7732:	bl	74b4 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    7736:	bics	r6, r4
    7738:	bne.n	7720 <usb_isr+0x194>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    773a:	uxth	r5, r5
				while(rx) {
    773c:	cmp	r5, #0
    773e:	beq.n	766c <usb_isr+0xe0>
    7740:	ldr	r7, [pc, #300]	; (7870 <usb_isr+0x2e4>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    7742:	movs	r6, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    7744:	rbit	r4, r5
    7748:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    774c:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    7750:	lsl.w	r4, r6, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    7754:	bl	74b4 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    7758:	bics	r5, r4
    775a:	bne.n	7744 <usb_isr+0x1b8>
    775c:	b.n	766c <usb_isr+0xe0>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    775e:	ldr	r2, [pc, #300]	; (788c <usb_isr+0x300>)
    7760:	strb	r3, [r2, #0]
    7762:	b.n	76d8 <usb_isr+0x14c>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    7764:	movw	ip, #8225	; 0x2021
    7768:	cmp	r0, ip
    776a:	beq.w	7a48 <usb_isr+0x4bc>
    776e:	bls.n	77e8 <usb_isr+0x25c>
    7770:	movw	r3, #8993	; 0x2321
    7774:	cmp	r0, r3
    7776:	beq.w	78c4 <usb_isr+0x338>
    777a:	movw	r3, #63680	; 0xf8c0
    777e:	cmp	r0, r3
    7780:	beq.w	78f0 <usb_isr+0x364>
    7784:	movw	r3, #8737	; 0x2221
    7788:	cmp	r0, r3
    778a:	beq.w	78b0 <usb_isr+0x324>
		}
		break;
#endif
	}
	printf("endpoint 0 stall\n");
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    778e:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    7792:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    7796:	cmp	r3, #0
    7798:	bne.w	75bc <usb_isr+0x30>
    779c:	ldr.w	r8, [sp]
    77a0:	b.n	7662 <usb_isr+0xd6>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    77a2:	movw	r3, #770	; 0x302
    77a6:	cmp	r0, r3
    77a8:	beq.w	79f6 <usb_isr+0x46a>
    77ac:	cmp.w	r0, #1280	; 0x500
    77b0:	bne.n	778e <usb_isr+0x202>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    77b2:	ldr	r3, [pc, #224]	; (7894 <usb_isr+0x308>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    77b4:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    77b6:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    77b8:	str	r5, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    77ba:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    77bc:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    77be:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    77c0:	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    77c4:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    77c8:	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    77ca:	orr.w	r3, r1, #65536	; 0x10000
    77ce:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    77d2:	ldr.w	r3, [r4, #432]	; 0x1b0
    77d6:	cmp	r3, #0
    77d8:	bne.n	77d2 <usb_isr+0x246>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    77da:	lsrs	r3, r2, #16
    77dc:	lsls	r3, r3, #25
    77de:	orr.w	r3, r3, #16777216	; 0x1000000
    77e2:	str.w	r3, [r6, #340]	; 0x154
    77e6:	b.n	7792 <usb_isr+0x206>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    77e8:	cmp.w	r0, #2176	; 0x880
    77ec:	beq.w	7ad0 <usb_isr+0x544>
    77f0:	cmp.w	r0, #2304	; 0x900
    77f4:	bne.n	778e <usb_isr+0x202>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    77f6:	ubfx	lr, r2, #16, #8
    77fa:	ldr	r2, [pc, #156]	; (7898 <usb_isr+0x30c>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    77fc:	ldr	r0, [pc, #156]	; (789c <usb_isr+0x310>)
		#endif
		#if defined(MTP_INTERFACE)
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    77fe:	mov.w	r8, #128	; 0x80
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    7802:	strb.w	lr, [r2]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    7806:	ldr	r1, [pc, #152]	; (78a0 <usb_isr+0x314>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    7808:	ldr	r2, [pc, #152]	; (78a4 <usb_isr+0x318>)
    780a:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    780c:	str.w	r0, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    7810:	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    7814:	str.w	r2, [r6, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    7818:	bl	6d48 <usb_serial_configure>
		#endif
		#if defined(MTP_INTERFACE)
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    781c:	mov	r2, r8
    781e:	mov	r1, r5
    7820:	ldr	r0, [pc, #132]	; (78a8 <usb_isr+0x31c>)
    7822:	bl	972c <memset>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    7826:	ldr	r3, [pc, #132]	; (78ac <usb_isr+0x320>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    7828:	ldr	r2, [pc, #104]	; (7894 <usb_isr+0x308>)
    782a:	movs	r1, #1
		#if defined(MTP_INTERFACE)
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    782c:	str.w	r3, [r7, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    7830:	add.w	r3, r3, #3154116608	; 0xbc000000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7834:	str.w	r8, [r2, #4]
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    7838:	add.w	r3, r3, #966656	; 0xec000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    783c:	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    783e:	str	r1, [r2, #0]
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    7840:	add.w	r3, r3, #956	; 0x3bc
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    7844:	str	r5, [r7, #76]	; 0x4c
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    7846:	str.w	r3, [r7, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    784a:	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    784e:	ldr.w	r1, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    7852:	ldr	r3, [sp, #4]
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    7854:	str	r5, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    7856:	orr.w	r2, r1, #65536	; 0x10000
    785a:	str.w	r2, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    785e:	str	r5, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    7860:	ldr.w	r3, [r4, #432]	; 0x1b0
    7864:	cmp	r3, #0
    7866:	bne.n	7860 <usb_isr+0x2d4>
    7868:	b.n	7792 <usb_isr+0x206>
    786a:	nop
    786c:	.word	0x402e0000
    7870:	.word	0x20000000
    7874:	.word	0x2001767c
    7878:	.word	0x402e01c0
    787c:	.word	0x20017770
    7880:	.word	0x20017680
    7884:	.word	0x20017c8c
    7888:	.word	0x20017c90
    788c:	.word	0x20017cb8
    7890:	.word	0x20017cb9
    7894:	.word	0x20017ce0
    7898:	.word	0x20017cb7
    789c:	.word	0x00cc0002
    78a0:	.word	0x000200c8
    78a4:	.word	0x00c80002
    78a8:	.word	0x20000080
    78ac:	.word	0xb8c6cf5d
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    78b0:	uxth	r1, r1
    78b2:	cbnz	r1, 78c4 <usb_isr+0x338>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    78b4:	ldr	r3, [pc, #740]	; (7b9c <usb_isr+0x610>)
			usb_cdc_line_rtsdtr = setup.wValue;
    78b6:	ubfx	r2, r2, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    78ba:	ldr	r1, [pc, #740]	; (7ba0 <usb_isr+0x614>)
    78bc:	ldr	r0, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    78be:	ldr	r3, [pc, #740]	; (7ba4 <usb_isr+0x618>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    78c0:	str	r0, [r1, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    78c2:	strb	r2, [r3, #0]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    78c4:	ldr	r3, [pc, #736]	; (7ba8 <usb_isr+0x61c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    78c6:	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    78c8:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    78ca:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    78cc:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    78ce:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    78d0:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    78d2:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    78d4:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    78d8:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    78dc:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    78de:	orr.w	r3, r2, #65536	; 0x10000
    78e2:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    78e6:	ldr.w	r3, [r4, #432]	; 0x1b0
    78ea:	cmp	r3, #0
    78ec:	bne.n	78e6 <usb_isr+0x35a>
    78ee:	b.n	7792 <usb_isr+0x206>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
#ifdef EXPERIMENTAL_INTERFACE
	  case 0xF8C0: // GET_MS_DESCRIPTOR (bRequest=0xF8 because microsoft_os_string_desc)
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    78f0:	uxth	r3, r1
    78f2:	tst.w	r3, #65280	; 0xff00
    78f6:	bne.w	778e <usb_isr+0x202>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    78fa:	orr.w	r3, r3, #60928	; 0xee00
    78fe:	bfi	lr, r3, #0, #16
		__attribute__((fallthrough));
#endif
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    7902:	ldr	r3, [pc, #680]	; (7bac <usb_isr+0x620>)
    7904:	ldr	r1, [r3, #4]
    7906:	cmp	r1, #0
    7908:	beq.w	778e <usb_isr+0x202>
    790c:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    790e:	uxth.w	r5, lr
    7912:	b.n	791e <usb_isr+0x392>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
		__attribute__((fallthrough));
#endif
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    7914:	adds	r3, #12
    7916:	ldr	r1, [r3, #4]
    7918:	cmp	r1, #0
    791a:	beq.w	778e <usb_isr+0x202>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    791e:	ldrh	r0, [r3, #0]
    7920:	cmp	r0, r2
    7922:	bne.n	7914 <usb_isr+0x388>
    7924:	ldrh	r0, [r3, #2]
    7926:	cmp	r0, r5
    7928:	bne.n	7914 <usb_isr+0x388>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    792a:	lsrs	r0, r2, #8
    792c:	cmp	r0, #3
    792e:	beq.w	7b70 <usb_isr+0x5e4>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    7932:	ldrh	r5, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    7934:	mov.w	lr, lr, lsr #16
    7938:	cmp	r5, lr
    793a:	it	cs
    793c:	movcs	r5, lr

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    793e:	cmp.w	r2, #512	; 0x200
    7942:	beq.w	7b54 <usb_isr+0x5c8>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    7946:	cmp.w	r2, #1792	; 0x700
    794a:	bne.w	7b46 <usb_isr+0x5ba>
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    794e:	ldr	r3, [pc, #608]	; (7bb0 <usb_isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    7950:	mov	r2, r5
    7952:	ldr.w	r8, [pc, #620]	; 7bc0 <usb_isr+0x634>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    7956:	ldrb	r0, [r3, #0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    7958:	ldr	r1, [pc, #600]	; (7bb4 <usb_isr+0x628>)
    795a:	ldr	r3, [pc, #604]	; (7bb8 <usb_isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    795c:	cmp	r0, #0
    795e:	it	eq
    7960:	moveq	r1, r3
    7962:	mov	r0, r8
    7964:	bl	68c4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    7968:	movs	r3, #7
    796a:	strb.w	r3, [r8, #1]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    796e:	bic.w	r3, r8, #31
	uint32_t end_addr = (uint32_t)addr + size;
    7972:	add	r8, r5
	asm volatile("": : :"memory");
	asm("dsb");
    7974:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    7978:	ldr	r2, [pc, #576]	; (7bbc <usb_isr+0x630>)
    797a:	str	r3, [r2, #0]
		location += 32;
    797c:	adds	r3, #32
	} while (location < end_addr);
    797e:	cmp	r8, r3
    7980:	bhi.n	7978 <usb_isr+0x3ec>
	asm("dsb");
    7982:	dsb	sy
	asm("isb");
    7986:	isb	sy
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    798a:	ldr	r0, [pc, #564]	; (7bc0 <usb_isr+0x634>)
    798c:	mov	r1, r5
    798e:	bl	74ec <endpoint0_transmit.constprop.1>
    7992:	b.n	7792 <usb_isr+0x206>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    7994:	uxth	r1, r1
    7996:	and.w	r3, r1, #127	; 0x7f
		if (endpoint > 7) break;
    799a:	cmp	r3, #7
    799c:	bhi.w	778e <usb_isr+0x202>
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    79a0:	lsls	r3, r3, #2
    79a2:	ldr	r2, [pc, #544]	; (7bc4 <usb_isr+0x638>)
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
    79a4:	lsls	r5, r1, #24
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    79a6:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    79aa:	add	r2, r3
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    79ac:	mov.w	r1, #0
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    79b0:	ldr	r3, [r2, #0]
    79b2:	ite	mi
    79b4:	bicmi.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    79b8:	bicpl.w	r3, r3, #1
    79bc:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    79be:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    79c0:	ldr	r3, [pc, #484]	; (7ba8 <usb_isr+0x61c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    79c2:	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    79c4:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    79c6:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    79c8:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    79ca:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    79ce:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    79d2:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    79d4:	orr.w	r3, r2, #65536	; 0x10000
    79d8:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    79dc:	ldr.w	r3, [r4, #432]	; 0x1b0
    79e0:	cmp	r3, #0
    79e2:	bne.n	79dc <usb_isr+0x450>
    79e4:	b.n	7792 <usb_isr+0x206>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    79e6:	ldr	r3, [pc, #480]	; (7bc8 <usb_isr+0x63c>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    79e8:	movs	r1, #2
    79ea:	mov	r0, r3
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    79ec:	strb	r5, [r3, #0]
		reply_buffer[1] = 0;
    79ee:	strb	r5, [r3, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    79f0:	bl	74ec <endpoint0_transmit.constprop.1>
    79f4:	b.n	7792 <usb_isr+0x206>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    79f6:	uxth	r1, r1
    79f8:	and.w	r3, r1, #127	; 0x7f
		if (endpoint > 7) break;
    79fc:	cmp	r3, #7
    79fe:	bhi.w	778e <usb_isr+0x202>
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    7a02:	lsls	r3, r3, #2
    7a04:	ldr	r2, [pc, #444]	; (7bc4 <usb_isr+0x638>)
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
    7a06:	lsls	r1, r1, #24
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    7a08:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    7a0c:	add	r2, r3
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    7a0e:	mov.w	r1, #0
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    7a12:	ldr	r3, [r2, #0]
    7a14:	ite	mi
    7a16:	orrmi.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    7a1a:	orrpl.w	r3, r3, #1
    7a1e:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7a20:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    7a22:	ldr	r3, [pc, #388]	; (7ba8 <usb_isr+0x61c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    7a24:	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    7a26:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    7a28:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7a2a:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    7a2c:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    7a30:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    7a34:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    7a36:	orr.w	r3, r2, #65536	; 0x10000
    7a3a:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    7a3e:	ldr.w	r3, [r4, #432]	; 0x1b0
    7a42:	cmp	r3, #0
    7a44:	bne.n	7a3e <usb_isr+0x4b2>
    7a46:	b.n	7792 <usb_isr+0x206>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    7a48:	lsrs	r3, r1, #16
    7a4a:	cmp	r3, #7
    7a4c:	bne.w	778e <usb_isr+0x202>
		endpoint0_setupdata.bothwords = setupdata;
    7a50:	ldr.w	lr, [pc, #392]	; 7bdc <usb_isr+0x650>
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    7a54:	movs	r0, #1
    7a56:	ldr	r3, [pc, #372]	; (7bcc <usb_isr+0x640>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    7a58:	str.w	r2, [lr]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    7a5c:	ldr	r2, [pc, #368]	; (7bd0 <usb_isr+0x644>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    7a5e:	str	r5, [r7, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    7a60:	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    7a62:	str	r3, [r7, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    7a64:	ldr	r2, [pc, #364]	; (7bd4 <usb_isr+0x648>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    7a66:	str	r0, [r3, #0]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    7a68:	ldr.w	r0, [r6, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    7a6c:	add.w	r5, r2, #4096	; 0x1000
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    7a70:	str.w	r1, [lr, #4]
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    7a74:	add.w	lr, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    7a78:	orr.w	r1, r0, #1
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    7a7c:	str	r2, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    7a7e:	add.w	r0, r2, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    7a82:	add.w	r2, r2, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    7a86:	str.w	r1, [r6, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    7a8a:	str	r5, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    7a8c:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    7a90:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    7a92:	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    7a94:	ldr.w	r3, [r4, #432]	; 0x1b0
    7a98:	cmp	r3, #0
    7a9a:	bne.n	7a94 <usb_isr+0x508>
	}
	endpoint0_transfer_ack.next = 1;
    7a9c:	ldr	r2, [pc, #264]	; (7ba8 <usb_isr+0x61c>)
    7a9e:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7aa0:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    7aa4:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    7aa6:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    7aa8:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    7aac:	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7aae:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    7ab0:	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    7ab4:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    7ab8:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    7aba:	orr.w	r3, r1, r0
    7abe:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    7ac2:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    7ac6:	ldr.w	r3, [r4, #432]	; 0x1b0
    7aca:	cmp	r3, #0
    7acc:	bne.n	7ac6 <usb_isr+0x53a>
    7ace:	b.n	7792 <usb_isr+0x206>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    7ad0:	ldr	r2, [pc, #260]	; (7bd8 <usb_isr+0x64c>)
		endpoint0_transmit(reply_buffer, 1, 0);
    7ad2:	movs	r1, #1
		endpoint_queue_head[3].pointer4 = 0x74D59319;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    7ad4:	ldr	r3, [pc, #240]	; (7bc8 <usb_isr+0x63c>)
    7ad6:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    7ad8:	mov	r0, r3
		endpoint_queue_head[3].pointer4 = 0x74D59319;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    7ada:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    7adc:	bl	74ec <endpoint0_transmit.constprop.1>
    7ae0:	b.n	7792 <usb_isr+0x206>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    7ae2:	lsls	r5, r3, #31
    7ae4:	bpl.w	764e <usb_isr+0xc2>
    7ae8:	b.n	764a <usb_isr+0xbe>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    7aea:	ldr	r0, [pc, #240]	; (7bdc <usb_isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    7aec:	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    7af0:	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    7af2:	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    7af4:	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    7af6:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    7af8:	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    7afa:	bne.w	770e <usb_isr+0x182>
    7afe:	uxth	r1, r0
    7b00:	cmp	r1, #0
    7b02:	bne.w	770e <usb_isr+0x182>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    7b06:	ldr	r1, [pc, #204]	; (7bd4 <usb_isr+0x648>)
    7b08:	ldr	r4, [pc, #212]	; (7be0 <usb_isr+0x654>)
    7b0a:	ldmia	r1, {r0, r1}
    7b0c:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    7b0e:	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    7b10:	str	r0, [r4, #0]
    7b12:	strh	r1, [r4, #4]
    7b14:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    7b16:	bne.w	770e <usb_isr+0x182>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    7b1a:	cpsid	i
	sof_usage |= (1 << interface);
    7b1c:	ldr	r0, [pc, #196]	; (7be4 <usb_isr+0x658>)
    7b1e:	ldrb	r1, [r0, #0]
    7b20:	orr.w	r1, r1, #8
    7b24:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    7b26:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    7b2a:	lsls	r0, r1, #24
    7b2c:	bmi.n	7b3c <usb_isr+0x5b0>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    7b2e:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    7b32:	movs	r0, #128	; 0x80
    7b34:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    7b38:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    7b3c:	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    7b3e:	ldr	r2, [pc, #168]	; (7be8 <usb_isr+0x65c>)
    7b40:	movs	r1, #80	; 0x50
    7b42:	strb	r1, [r2, #0]
    7b44:	b.n	770e <usb_isr+0x182>
    7b46:	ldr.w	r8, [pc, #120]	; 7bc0 <usb_isr+0x634>
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    7b4a:	mov	r2, r5
    7b4c:	mov	r0, r8
    7b4e:	bl	68c4 <memcpy>
    7b52:	b.n	796e <usb_isr+0x3e2>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    7b54:	ldr	r3, [pc, #88]	; (7bb0 <usb_isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    7b56:	mov	r2, r5
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    7b58:	ldr	r1, [pc, #92]	; (7bb8 <usb_isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    7b5a:	ldrb	r0, [r3, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    7b5c:	ldr	r3, [pc, #84]	; (7bb4 <usb_isr+0x628>)
    7b5e:	ldr.w	r8, [pc, #96]	; 7bc0 <usb_isr+0x634>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    7b62:	cmp	r0, #0
    7b64:	it	eq
    7b66:	moveq	r1, r3
    7b68:	ldr	r0, [pc, #84]	; (7bc0 <usb_isr+0x634>)
    7b6a:	bl	68c4 <memcpy>
    7b6e:	b.n	796e <usb_isr+0x3e2>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    7b70:	mov.w	lr, lr, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    7b74:	ldrb	r5, [r1, #0]
    7b76:	cmp	r5, lr
    7b78:	it	cs
    7b7a:	movcs	r5, lr
    7b7c:	b.n	7946 <usb_isr+0x3ba>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    7b7e:	ldr	r1, [pc, #100]	; (7be4 <usb_isr+0x658>)
    7b80:	ldrb	r2, [r1, #0]
    7b82:	and.w	r2, r2, #247	; 0xf7
    7b86:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    7b88:	cbnz	r2, 7b96 <usb_isr+0x60a>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    7b8a:	ldr.w	r2, [r3, #328]	; 0x148
    7b8e:	bic.w	r2, r2, #128	; 0x80
    7b92:	str.w	r2, [r3, #328]	; 0x148
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				_reboot_Teensyduino_();
    7b96:	bl	fe98 <___reboot_Teensyduino__veneer>
    7b9a:	nop
    7b9c:	.word	0x20017c78
    7ba0:	.word	0x20017d08
    7ba4:	.word	0x20017cb6
    7ba8:	.word	0x20017ce0
    7bac:	.word	0x200016f8
    7bb0:	.word	0x20017cb8
    7bb4:	.word	0x600025c0
    7bb8:	.word	0x60002624
    7bbc:	.word	0xe000ef70
    7bc0:	.word	0x20200800
    7bc4:	.word	0x402e01c0
    7bc8:	.word	0x20017770
    7bcc:	.word	0x20017cc0
    7bd0:	.word	0x00070080
    7bd4:	.word	0x20017674
    7bd8:	.word	0x20017cb7
    7bdc:	.word	0x20005840
    7be0:	.word	0x20017d00
    7be4:	.word	0x20017cb2
    7be8:	.word	0x20017cb9

00007bec <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    7bec:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    7bee:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    7bf2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    7bf6:	ite	ne
    7bf8:	movne	r7, #0
    7bfa:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    7bfe:	cmp	r2, #2
    7c00:	bls.n	7c06 <usb_config_rx+0x1a>
    7c02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    7c06:	mov.w	r9, r0, lsl #7
    7c0a:	ldr.w	sl, [pc, #64]	; 7c4c <usb_config_rx+0x60>
    7c0e:	mov	r5, r1
    7c10:	mov	r4, r0
    7c12:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    7c16:	movs	r1, #0
    7c18:	movs	r2, #64	; 0x40
    7c1a:	mov	r8, r3
    7c1c:	mov	r0, r6
    7c1e:	bl	972c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    7c22:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    7c24:	orr.w	r1, r7, r5, lsl #16
    7c28:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    7c2c:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    7c30:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    7c32:	cmp.w	r8, #0
    7c36:	beq.n	7c02 <usb_config_rx+0x16>
    7c38:	ldr	r3, [pc, #12]	; (7c48 <usb_config_rx+0x5c>)
    7c3a:	lsls	r0, r4
    7c3c:	ldr	r4, [r3, #0]
    7c3e:	orrs	r0, r4
    7c40:	str	r0, [r3, #0]
    7c42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7c46:	nop
    7c48:	.word	0x20017680
    7c4c:	.word	0x20000000

00007c50 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    7c50:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    7c52:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    7c56:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    7c5a:	ite	ne
    7c5c:	movne	r7, #0
    7c5e:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    7c62:	cmp	r2, #2
    7c64:	bls.n	7c6a <usb_config_tx+0x1a>
    7c66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    7c6a:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    7c6c:	lsls	r5, r0, #7
    7c6e:	ldr.w	r9, [pc, #68]	; 7cb4 <usb_config_tx+0x64>
    7c72:	mov	r8, r1
    7c74:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    7c76:	movs	r1, #0
    7c78:	mov	r4, r0
    7c7a:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    7c7c:	add.w	sl, r9, r5
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    7c80:	mov	r0, sl
    7c82:	bl	972c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    7c86:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    7c88:	orr.w	r1, r7, r8, lsl #16
    7c8c:	str.w	r1, [r9, r5]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    7c90:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    7c94:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    7c98:	cmp	r6, #0
    7c9a:	beq.n	7c66 <usb_config_tx+0x16>
    7c9c:	add.w	r0, r4, #16
    7ca0:	ldr	r3, [pc, #12]	; (7cb0 <usb_config_tx+0x60>)
    7ca2:	lsls	r2, r0
    7ca4:	ldr	r0, [r3, #0]
    7ca6:	orrs	r2, r0
    7ca8:	str	r2, [r3, #0]
    7caa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7cae:	nop
    7cb0:	.word	0x20017680
    7cb4:	.word	0x20000000

00007cb8 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    7cb8:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    7cba:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    7cbc:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    7cbe:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    7cc2:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    7cc4:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    7cc6:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    7cc8:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    7ccc:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    7cd0:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    7cd4:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    7cd8:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    7cda:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    7cdc:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    7cde:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    7ce0:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    7ce2:	pop	{r4, r5, r6, r7}
    7ce4:	bx	lr
    7ce6:	nop

00007ce8 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    7ce8:	subs	r3, r0, #2
    7cea:	cmp	r3, #2
    7cec:	bls.n	7cf0 <usb_transmit+0x8>
    7cee:	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    7cf0:	ldr	r3, [pc, #24]	; (7d0c <usb_transmit+0x24>)
    7cf2:	mov	r2, r1
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    7cf4:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    7cf6:	add.w	r4, r0, #16
    7cfa:	movs	r5, #1
    7cfc:	add.w	r0, r3, r0, lsl #7
    7d00:	lsl.w	r1, r5, r4
    7d04:	adds	r0, #64	; 0x40
}
    7d06:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    7d08:	b.w	7424 <schedule_transfer>
    7d0c:	.word	0x20000000

00007d10 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    7d10:	subs	r3, r0, #2
    7d12:	cmp	r3, #2
    7d14:	bls.n	7d18 <usb_receive+0x8>
    7d16:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    7d18:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    7d1a:	ldr	r3, [pc, #20]	; (7d30 <usb_receive+0x20>)
    7d1c:	movs	r4, #1
    7d1e:	mov	r2, r1
    7d20:	lsl.w	r1, r4, r0
    7d24:	add.w	r0, r3, r0, lsl #7
}
    7d28:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    7d2c:	b.w	7424 <schedule_transfer>
    7d30:	.word	0x20000000

00007d34 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    7d34:	ldr	r0, [r0, #4]
#endif
}
    7d36:	bx	lr

00007d38 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    7d38:	cmp	r0, #0
    7d3a:	beq.n	7dec <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7d3c:	movs	r2, #1
// active, but the rest of your program becomes effectively stalled.  Usually
// delay() is used in very simple programs.  To achieve delay without waiting
// use millis() or elapsedMillis.  For shorter delay, use delayMicroseconds()
// or delayNanoseconds().
void delay(uint32_t msec)
{
    7d3e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d42:	sub	sp, #20
    7d44:	mov	fp, r0
    7d46:	ldr	r4, [pc, #168]	; (7df0 <delay+0xb8>)
    7d48:	ldr	r5, [pc, #168]	; (7df4 <delay+0xbc>)
    7d4a:	ldr	r6, [pc, #172]	; (7df8 <delay+0xc0>)
    7d4c:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7d50:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    7d54:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    7d56:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7d58:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    7d5c:	cmp	r1, #0
    7d5e:	bne.n	7d50 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7d60:	ldr	r7, [pc, #152]	; (7dfc <delay+0xc4>)
    7d62:	strd	r8, r9, [sp, #8]
    7d66:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    7d68:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7d6a:	ldr	r2, [pc, #148]	; (7e00 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    7d6c:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7d70:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7d72:	ldr	r2, [r2, #0]
    7d74:	movs	r7, #1
    7d76:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    7d7a:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7d7e:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    7d80:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7d82:	cmp	r3, r1
    7d84:	it	eq
    7d86:	cmpeq	r2, r8
    7d88:	ite	cs
    7d8a:	movcs	sl, r8
    7d8c:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    7d8e:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7d92:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    7d96:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    7d98:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7d9a:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    7d9e:	cmp	r3, #0
    7da0:	bne.n	7d92 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7da2:	ldr	r0, [sp, #4]
    7da4:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    7da6:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7da8:	ldr	r0, [pc, #84]	; (7e00 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    7daa:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7dae:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    7db0:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7db4:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    7db8:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    7dbc:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7dc0:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    7dc2:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7dc4:	cmp	r1, r3
    7dc6:	it	eq
    7dc8:	cmpeq	r0, r8
    7dca:	ite	cs
    7dcc:	movcs	r3, r8
    7dce:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    7dd0:	add	r2, r3
    7dd2:	cmp	r2, lr
    7dd4:	bcc.n	7de6 <delay+0xae>
			if (--msec == 0) return;
    7dd6:	subs.w	fp, fp, #1
			start += 1000;
    7dda:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    7dde:	bne.n	7d92 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    7de0:	add	sp, #20
    7de2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    7de6:	bl	85d4 <yield>
	}
    7dea:	b.n	7d92 <delay+0x5a>
    7dec:	bx	lr
    7dee:	nop
    7df0:	.word	0x20017d0c
    7df4:	.word	0x20017c78
    7df8:	.word	0x20017c74
    7dfc:	.word	0xe0001004
    7e00:	.word	0x200177b8

00007e04 <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    7e04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    7e08:	ldr	r2, [pc, #72]	; (7e54 <micros+0x50>)
    7e0a:	movs	r6, #1
    7e0c:	ldr	r5, [pc, #72]	; (7e58 <micros+0x54>)
    7e0e:	ldr	r4, [pc, #76]	; (7e5c <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7e10:	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    7e14:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    7e16:	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7e18:	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    7e1c:	cmp	r3, #0
    7e1e:	bne.n	7e10 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7e20:	ldr	r2, [pc, #60]	; (7e60 <micros+0x5c>)
    7e22:	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7e24:	ldr	r7, [pc, #60]	; (7e64 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    7e26:	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    7e28:	mov.w	r9, #0
    7e2c:	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7e30:	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    7e32:	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7e36:	cmp	r9, r3
    7e38:	umull	r6, r7, r2, r6
    7e3c:	it	eq
    7e3e:	cmpeq	r8, r7
    7e40:	mov	r4, r7
    7e42:	ite	cs
    7e44:	movcs	r4, r7
    7e46:	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    7e48:	mla	r0, r0, r1, r4
    7e4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    7e50:	bx	lr
    7e52:	nop
    7e54:	.word	0x20017d0c
    7e58:	.word	0x20017c78
    7e5c:	.word	0x20017c74
    7e60:	.word	0xe0001004
    7e64:	.word	0x200177b8

00007e68 <unused_interrupt_vector>:
	const uint32_t *stack;
	struct arm_fault_info_struct *info;
	const uint32_t *p, *end;

	// disallow any nested interrupts
	__disable_irq();
    7e68:	cpsid	i
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    7e6a:	mrs	r3, IPSR
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
    7e6e:	ldr	r5, [pc, #292]	; (7f94 <unused_interrupt_vector+0x12c>)
    7e70:	str	r3, [r5, #4]
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    7e72:	mrs	r3, MSP
	info->cfsr = SCB_CFSR;
    7e76:	ldr	r4, [pc, #288]	; (7f98 <unused_interrupt_vector+0x130>)
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
	info->len = sizeof(*info) / 4;
    7e78:	mov	r6, r5
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
    7e7a:	ldr	r0, [pc, #288]	; (7f9c <unused_interrupt_vector+0x134>)
	info->mmfar = SCB_MMFAR;
    7e7c:	ldr	r1, [pc, #288]	; (7fa0 <unused_interrupt_vector+0x138>)
	info->bfar = SCB_BFAR;
    7e7e:	ldr	r2, [pc, #292]	; (7fa4 <unused_interrupt_vector+0x13c>)
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    7e80:	ldr	r4, [r4, #0]
	info->hfsr = SCB_HFSR;
    7e82:	ldr	r0, [r0, #0]
	info->mmfar = SCB_MMFAR;
    7e84:	ldr	r1, [r1, #0]
	info->bfar = SCB_BFAR;
    7e86:	ldr	r2, [r2, #0]
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
    7e88:	str	r1, [r5, #16]
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    7e8a:	str	r4, [r5, #8]
	info->hfsr = SCB_HFSR;
    7e8c:	str	r0, [r5, #12]
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
    7e8e:	str	r2, [r5, #20]
	info->ret = stack[6];
    7e90:	ldr	r2, [r3, #24]
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    7e92:	ldr	r4, [pc, #276]	; (7fa8 <unused_interrupt_vector+0x140>)
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
    7e94:	str	r2, [r5, #24]
	info->xpsr = stack[7];
    7e96:	ldr	r3, [r3, #28]
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    7e98:	ldr	r7, [pc, #272]	; (7fac <unused_interrupt_vector+0x144>)
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
    7e9a:	str	r3, [r5, #28]
	info->temp = tempmonGetTemp();
    7e9c:	bl	818c <tempmonGetTemp>
    7ea0:	vstr	s0, [r5, #32]
	info->time = rtc_get();
    7ea4:	bl	8028 <rtc_get>
	info->len = sizeof(*info) / 4;
    7ea8:	movs	r3, #11
	// add CRC to crash report
	crc = 0xFFFFFFFF;
    7eaa:	mov.w	r2, #4294967295
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
    7eae:	str	r0, [r5, #36]	; 0x24
	info->len = sizeof(*info) / 4;
    7eb0:	mov	r1, r3
    7eb2:	str	r3, [r5, #0]
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
    7eb4:	eors	r2, r1
    7eb6:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    7eb8:	and.w	r3, r2, #1
    7ebc:	subs	r1, #1
    7ebe:	mul.w	r3, r4, r3
    7ec2:	eor.w	r2, r3, r2, lsr #1
    7ec6:	bne.n	7eb8 <unused_interrupt_vector+0x50>
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    7ec8:	cmp	r6, r7
    7eca:	beq.n	7ed2 <unused_interrupt_vector+0x6a>
    7ecc:	ldr.w	r1, [r6, #4]!
    7ed0:	b.n	7eb4 <unused_interrupt_vector+0x4c>
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
	}
	info->crc = crc;
    7ed2:	ldr	r1, [pc, #192]	; (7f94 <unused_interrupt_vector+0x12c>)
    7ed4:	str	r2, [r1, #40]	; 0x28
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    7ed6:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    7eda:	ldr	r3, [pc, #212]	; (7fb0 <unused_interrupt_vector+0x148>)
    7edc:	ldr	r2, [pc, #212]	; (7fb4 <unused_interrupt_vector+0x14c>)
    7ede:	str	r1, [r3, #0]
    7ee0:	str	r2, [r3, #0]
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    7ee2:	dsb	sy
	asm("isb");
    7ee6:	isb	sy
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7eea:	ldr	r2, [pc, #204]	; (7fb8 <unused_interrupt_vector+0x150>)
	PIT_MCR = PIT_MCR_MDIS;
    7eec:	movs	r5, #2
    7eee:	ldr	r4, [pc, #204]	; (7fbc <unused_interrupt_vector+0x154>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7ef0:	ldr	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    7ef2:	ldr	r1, [pc, #204]	; (7fc0 <unused_interrupt_vector+0x158>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7ef4:	orr.w	r3, r3, #12288	; 0x3000
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    7ef8:	ldr	r0, [pc, #200]	; (7fc4 <unused_interrupt_vector+0x15c>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7efa:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    7efc:	str	r5, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    7efe:	ldr	r3, [r2, #28]
    7f00:	bic.w	r3, r3, #127	; 0x7f
    7f04:	orr.w	r3, r3, #64	; 0x40
    7f08:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    7f0a:	ldr	r3, [r1, #0]
    7f0c:	cmp	r3, r0
    7f0e:	bhi.n	7f8e <unused_interrupt_vector+0x126>
	PIT_MCR = 0;
    7f10:	ldr	r2, [pc, #168]	; (7fbc <unused_interrupt_vector+0x154>)
    7f12:	movs	r1, #0
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    7f14:	movs	r0, #1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    7f16:	ldr	r6, [pc, #176]	; (7fc8 <unused_interrupt_vector+0x160>)
	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
    7f18:	str	r1, [r2, #0]
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    7f1a:	mov.w	r3, #4294967295
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
    7f1e:	str.w	r1, [r2, #264]	; 0x108
	NVIC_ICER4 = 0xFFFFFFFF;

	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
    7f22:	mov	r4, r1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    7f24:	str.w	r6, [r2, #256]	; 0x100
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    7f28:	mov	r5, r2
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    7f2a:	str.w	r0, [r2, #264]	; 0x108
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    7f2e:	mov	r7, r0
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    7f30:	ldr.w	lr, [pc, #192]	; 7ff4 <unused_interrupt_vector+0x18c>
	NVIC_ICER1 = 0xFFFFFFFF;
    7f34:	ldr	r6, [pc, #148]	; (7fcc <unused_interrupt_vector+0x164>)
	NVIC_ICER2 = 0xFFFFFFFF;
    7f36:	ldr	r0, [pc, #152]	; (7fd0 <unused_interrupt_vector+0x168>)
	NVIC_ICER3 = 0xFFFFFFFF;
    7f38:	ldr	r1, [pc, #152]	; (7fd4 <unused_interrupt_vector+0x16c>)
	NVIC_ICER4 = 0xFFFFFFFF;
    7f3a:	ldr	r2, [pc, #156]	; (7fd8 <unused_interrupt_vector+0x170>)
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    7f3c:	str.w	r3, [lr]
	NVIC_ICER1 = 0xFFFFFFFF;
    7f40:	str	r3, [r6, #0]
	NVIC_ICER2 = 0xFFFFFFFF;
    7f42:	str	r3, [r0, #0]
	NVIC_ICER3 = 0xFFFFFFFF;
    7f44:	str	r3, [r1, #0]
	NVIC_ICER4 = 0xFFFFFFFF;
    7f46:	str	r3, [r2, #0]
    7f48:	b.n	7f4e <unused_interrupt_vector+0xe6>
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
		}
		usb_isr();
    7f4a:	bl	758c <usb_isr>
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    7f4e:	ldr.w	r2, [r5, #268]	; 0x10c
    7f52:	ldr	r3, [pc, #104]	; (7fbc <unused_interrupt_vector+0x154>)
    7f54:	cmp	r2, #0
    7f56:	beq.n	7f4a <unused_interrupt_vector+0xe2>
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
    7f58:	adds	r4, #1
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    7f5a:	str.w	r7, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    7f5e:	cmp	r4, #79	; 0x4f
    7f60:	bls.n	7f4a <unused_interrupt_vector+0xe2>
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    7f62:	ldr	r2, [pc, #120]	; (7fdc <unused_interrupt_vector+0x174>)
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    7f64:	movs	r4, #2
    7f66:	ldr	r0, [pc, #120]	; (7fe0 <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    7f68:	mov.w	r1, #2147483648	; 0x80000000
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    7f6c:	str.w	r4, [r0, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    7f70:	str	r1, [r2, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    7f72:	ldr.w	r2, [r3, #268]	; 0x10c
    7f76:	cbnz	r2, 7f86 <unused_interrupt_vector+0x11e>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
    7f78:	ldr	r1, [pc, #104]	; (7fe4 <unused_interrupt_vector+0x17c>)
    7f7a:	ldr	r2, [pc, #108]	; (7fe8 <unused_interrupt_vector+0x180>)
    7f7c:	str	r2, [r1, #48]	; 0x30
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    7f7e:	ldr.w	r0, [r3, #268]	; 0x10c
    7f82:	cmp	r0, #0
    7f84:	beq.n	7f7c <unused_interrupt_vector+0x114>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
	SCB_AIRCR = 0x05FA0004;
    7f86:	ldr	r3, [pc, #100]	; (7fec <unused_interrupt_vector+0x184>)
    7f88:	ldr	r2, [pc, #100]	; (7ff0 <unused_interrupt_vector+0x188>)
    7f8a:	str	r2, [r3, #0]
    7f8c:	b.n	7f8c <unused_interrupt_vector+0x124>

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    7f8e:	bl	7160 <set_arm_clock>
    7f92:	b.n	7f10 <unused_interrupt_vector+0xa8>
    7f94:	.word	0x2027ff80
    7f98:	.word	0xe000ed28
    7f9c:	.word	0xe000ed2c
    7fa0:	.word	0xe000ed34
    7fa4:	.word	0xe000ed38
    7fa8:	.word	0xedb88320
    7fac:	.word	0x2027ffa4
    7fb0:	.word	0xe000ef70
    7fb4:	.word	0x2027ffa0
    7fb8:	.word	0x400fc000
    7fbc:	.word	0x40084000
    7fc0:	.word	0x20001bc4
    7fc4:	.word	0x0bcd3d80
    7fc8:	.word	0x00249f00
    7fcc:	.word	0xe000e184
    7fd0:	.word	0xe000e188
    7fd4:	.word	0xe000e18c
    7fd8:	.word	0xe000e190
    7fdc:	.word	0x400d9000
    7fe0:	.word	0x402e0000
    7fe4:	.word	0x400f8000
    7fe8:	.word	0x0bad00f1
    7fec:	.word	0xe000ed0c
    7ff0:	.word	0x05fa0004
    7ff4:	.word	0xe000e180

00007ff8 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    7ff8:	ldr	r2, [pc, #36]	; (8020 <_sbrk+0x28>)

char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
    7ffa:	push	{r3, lr}
        char *prev = __brkval;
    7ffc:	ldr	r3, [r2, #0]
        if (incr != 0) {
    7ffe:	cbz	r0, 800a <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    8000:	add	r0, r3
    8002:	ldr	r1, [pc, #32]	; (8024 <_sbrk+0x2c>)
    8004:	cmp	r0, r1
    8006:	bhi.n	800e <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    8008:	str	r0, [r2, #0]
        }
        return prev;
}
    800a:	mov	r0, r3
    800c:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    800e:	bl	8eec <__errno>
    8012:	movs	r2, #12
                        return (void *)-1;
    8014:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    8018:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    801a:	mov	r0, r3
    801c:	pop	{r3, pc}
    801e:	nop
    8020:	.word	0x20001bdc
    8024:	.word	0x20280000

00008028 <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    8028:	ldr	r3, [pc, #40]	; (8054 <rtc_get+0x2c>)
#include "imxrt.h"
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
    802a:	push	{r4, r5}
	uint32_t hi1 = SNVS_HPRTCMR;
    802c:	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    802e:	mov	r4, r3
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
    8030:	ldr	r1, [r3, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    8032:	ldr	r2, [r4, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    8034:	ldr	r3, [r4, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    8036:	cmp	r1, r3
    8038:	it	eq
    803a:	cmpeq	r0, r2
unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    803c:	mov	r0, r2
		uint32_t lo2 = SNVS_HPRTCLR;
    803e:	mov	r1, r3
		if (lo1 == lo2 && hi1 == hi2) {
    8040:	ite	eq
    8042:	moveq	r5, #1
    8044:	movne	r5, #0
    8046:	cmp	r5, #0
    8048:	beq.n	8032 <rtc_get+0xa>
			return (hi2 << 17) | (lo2 >> 15);
    804a:	lsrs	r1, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    804c:	pop	{r4, r5}
    804e:	orr.w	r0, r1, r2, lsl #17
    8052:	bx	lr
    8054:	.word	0x400d4000

00008058 <rtc_set>:

void rtc_set(unsigned long t)
{
	// stop the RTC
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    8058:	ldr	r3, [pc, #72]	; (80a4 <rtc_set+0x4c>)
    805a:	ldr	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    805c:	mov	r1, r3
}

void rtc_set(unsigned long t)
{
	// stop the RTC
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    805e:	bic.w	r2, r2, #65537	; 0x10001
    8062:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    8064:	ldr	r3, [r1, #8]
    8066:	ldr	r2, [pc, #60]	; (80a4 <rtc_set+0x4c>)
    8068:	lsls	r3, r3, #31
    806a:	bmi.n	8064 <rtc_set+0xc>
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    806c:	ldr	r3, [r2, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    806e:	mov	r1, r2
{
	// stop the RTC
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    8070:	bic.w	r3, r3, #1
    8074:	str	r3, [r2, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    8076:	ldr	r3, [r1, #56]	; 0x38
    8078:	ldr	r2, [pc, #40]	; (80a4 <rtc_set+0x4c>)
    807a:	lsls	r3, r3, #31
    807c:	bmi.n	8076 <rtc_set+0x1e>
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
    807e:	lsls	r3, r0, #15
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    8080:	mov	r1, r2
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
	SNVS_LPSRTCMR = t >> 17;
    8082:	lsrs	r0, r0, #17
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
    8084:	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    8086:	str	r0, [r2, #80]	; 0x50
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    8088:	ldr	r3, [r2, #56]	; 0x38
    808a:	orr.w	r3, r3, #1
    808e:	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    8090:	ldr	r3, [r1, #56]	; 0x38
    8092:	ldr	r2, [pc, #16]	; (80a4 <rtc_set+0x4c>)
    8094:	lsls	r3, r3, #31
    8096:	bpl.n	8090 <rtc_set+0x38>
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    8098:	ldr	r3, [r2, #8]
    809a:	orr.w	r3, r3, #65537	; 0x10001
    809e:	str	r3, [r2, #8]
    80a0:	bx	lr
    80a2:	nop
    80a4:	.word	0x400d4000

000080a8 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    80a8:	push	{r3, lr}

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    80aa:	ldr	r3, [r0, #0]
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    80ac:	ldr	r2, [r0, #4]

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    80ae:	cbz	r3, 80e0 <sm_align_pool+0x38>
    80b0:	cbz	r2, 80d2 <sm_align_pool+0x2a>
	if (spool->pool_size % HEADER_SZ) return 0;
    80b2:	ldr	r3, [pc, #64]	; (80f4 <sm_align_pool+0x4c>)
    80b4:	umull	r1, r3, r3, r2
    80b8:	lsrs	r3, r3, #3
    80ba:	add.w	r3, r3, r3, lsl #1
    80be:	subs.w	r3, r2, r3, lsl #2
    80c2:	beq.n	80cc <sm_align_pool+0x24>
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
    80c4:	subs	r2, r2, r3
    80c6:	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    80c8:	cmp	r2, #240	; 0xf0
    80ca:	bls.n	80d2 <sm_align_pool+0x2a>

int sm_align_pool(struct smalloc_pool *spool)
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    80cc:	movs	r3, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    80ce:	mov	r0, r3
    80d0:	pop	{r3, pc}
	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
	if (spool->pool_size <= MIN_POOL_SZ) {
		errno = ENOSPC;
    80d2:	bl	8eec <__errno>
    80d6:	movs	r2, #28
    80d8:	movs	r3, #0
    80da:	str	r2, [r0, #0]
		return 0;
	}

	return 1;
}
    80dc:	mov	r0, r3
    80de:	pop	{r3, pc}
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    80e0:	ldr	r3, [pc, #16]	; (80f4 <sm_align_pool+0x4c>)
    80e2:	umull	r1, r3, r3, r2
    80e6:	lsrs	r3, r3, #3
    80e8:	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    80ec:	subs.w	r3, r2, r3, lsl #2
    80f0:	bne.n	80c4 <sm_align_pool+0x1c>
    80f2:	b.n	80c8 <sm_align_pool+0x20>
    80f4:	.word	0xaaaaaaab

000080f8 <sm_set_pool>:

	return 1;
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    80f8:	push	{r4, r5, r6, lr}
	if (!spool) {
    80fa:	mov	r4, r0
    80fc:	cmp	r0, #0
    80fe:	beq.n	8176 <sm_set_pool+0x7e>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    8100:	cbz	r1, 810a <sm_set_pool+0x12>
    8102:	clz	r5, r2
    8106:	lsrs	r5, r5, #5
    8108:	cbz	r5, 814a <sm_set_pool+0x52>

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    810a:	ldr	r0, [r4, #0]
    810c:	cbz	r0, 8112 <sm_set_pool+0x1a>
    810e:	ldr	r2, [r4, #4]
    8110:	cbnz	r2, 8120 <sm_set_pool+0x28>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    8112:	bl	8eec <__errno>
    8116:	movs	r3, #22
		return 0;
    8118:	movs	r2, #0
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    811a:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    811c:	mov	r0, r2
    811e:	pop	{r4, r5, r6, pc}
struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
	if (spool->pool_size % HEADER_SZ) return 0;
    8120:	ldr	r1, [pc, #96]	; (8184 <sm_set_pool+0x8c>)
    8122:	umull	r3, r1, r1, r2
    8126:	lsrs	r1, r1, #3
    8128:	add.w	r1, r1, r1, lsl #1
    812c:	subs.w	r1, r2, r1, lsl #2
    8130:	bne.n	8112 <sm_set_pool+0x1a>
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    8132:	ldr	r3, [r4, #8]
    8134:	cbz	r3, 813a <sm_set_pool+0x42>
    8136:	bl	972c <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    813a:	movs	r3, #0
			return 1;
    813c:	movs	r2, #1
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    813e:	str	r3, [r4, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    8140:	mov	r0, r2
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    8142:	str	r3, [r4, #4]
    8144:	str	r3, [r4, #8]
    8146:	str	r3, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    8148:	pop	{r4, r5, r6, pc}
    814a:	mov	r6, r3
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
    814c:	ldr	r3, [sp, #16]
		errno = EINVAL;
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
    814e:	stmia.w	r0, {r1, r2}
	spool->oomfn = oom_handler;
    8152:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    8154:	bl	80a8 <sm_align_pool>
    8158:	mov	r2, r0
    815a:	cmp	r0, #0
    815c:	beq.n	811c <sm_set_pool+0x24>

	if (do_zero) {
    815e:	cbnz	r6, 8166 <sm_set_pool+0x6e>
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
    8160:	movs	r2, #1
}
    8162:	mov	r0, r2
    8164:	pop	{r4, r5, r6, pc}
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
    8166:	ldmia.w	r4, {r0, r2}
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
    816a:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    816c:	mov	r1, r5
    816e:	bl	972c <memset>
	}

	return 1;
    8172:	movs	r2, #1
    8174:	b.n	811c <sm_set_pool+0x24>
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    8176:	bl	8eec <__errno>
    817a:	movs	r3, #22
		return 0;
    817c:	mov	r2, r4
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    817e:	str	r3, [r0, #0]
		return 0;
    8180:	b.n	811c <sm_set_pool+0x24>
    8182:	nop
    8184:	.word	0xaaaaaaab

00008188 <Panic_Temp_isr>:
static float s_hot_ROOM, s_roomC_hotC;

extern void unused_interrupt_vector(void); // startup.c

void Panic_Temp_isr(void) {
  unused_interrupt_vector();
    8188:	b.w	7e68 <unused_interrupt_vector>

0000818c <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    818c:	ldr	r1, [pc, #72]	; (81d8 <tempmonGetTemp+0x4c>)
    818e:	ldr	r3, [r1, #0]
    8190:	ldr	r2, [pc, #68]	; (81d8 <tempmonGetTemp+0x4c>)
    8192:	lsls	r3, r3, #29
    8194:	bpl.n	818e <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8196:	ldr	r3, [r2, #0]
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8198:	ldr	r1, [pc, #64]	; (81dc <tempmonGetTemp+0x50>)

    return tmeas;
    819a:	ubfx	r3, r3, #8, #12
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    819e:	ldr	r2, [pc, #64]	; (81e0 <tempmonGetTemp+0x54>)

    return tmeas;
    81a0:	vmov	s15, r3
    81a4:	ldr	r3, [r1, #0]
    81a6:	vldr	s12, [r2]
    81aa:	vcvt.f32.s32	s14, s15
    81ae:	vmov	s15, r3
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    81b2:	ldr	r2, [pc, #48]	; (81e4 <tempmonGetTemp+0x58>)

    return tmeas;
    81b4:	vcvt.f32.u32	s15, s15
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    81b8:	ldr	r3, [pc, #44]	; (81e8 <tempmonGetTemp+0x5c>)

    return tmeas;
    81ba:	vldr	s13, [r2]
    81be:	vsub.f32	s15, s14, s15
    81c2:	vldr	s14, [r3]
    81c6:	vcvt.f32.u32	s14, s14
    81ca:	vmul.f32	s15, s15, s12
    81ce:	vdiv.f32	s0, s15, s13
}
    81d2:	vsub.f32	s0, s14, s0
    81d6:	bx	lr
    81d8:	.word	0x400d8180
    81dc:	.word	0x200177a8
    81e0:	.word	0x200177b0
    81e4:	.word	0x200177b4
    81e8:	.word	0x200177ac

000081ec <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    81ec:	lsls	r0, r0, #4
    81ee:	ldr	r3, [pc, #60]	; (822c <digitalWrite.part.0+0x40>)
    81f0:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    81f2:	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
    81f4:	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
    81f6:	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    81f8:	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    81fa:	tst	r4, r0
    81fc:	beq.n	820a <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
    81fe:	cbz	r1, 8218 <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
    8200:	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    8204:	ldr.w	r4, [sp], #4
    8208:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    820a:	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
    820c:	cbnz	r1, 8222 <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    820e:	ldr	r2, [pc, #32]	; (8230 <digitalWrite.part.0+0x44>)
		}
	}
}
    8210:	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8214:	str	r2, [r3, #0]
		}
	}
}
    8216:	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    8218:	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    821c:	ldr.w	r4, [sp], #4
    8220:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8222:	ldr	r2, [pc, #16]	; (8234 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    8224:	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8228:	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    822a:	bx	lr
    822c:	.word	0x20000758
    8230:	.word	0x00013038
    8234:	.word	0x0001f038

00008238 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    8238:	cmp	r0, #54	; 0x36
    823a:	bhi.n	8240 <digitalWrite+0x8>
    823c:	b.w	81ec <digitalWrite.part.0>
    8240:	bx	lr
    8242:	nop

00008244 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    8244:	cmp	r0, #54	; 0x36
    8246:	bhi.n	8282 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    8248:	lsls	r0, r0, #4
    824a:	ldr	r2, [pc, #104]	; (82b4 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    824c:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    824e:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8252:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    8254:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8256:	beq.n	8284 <pinMode+0x40>
    8258:	cmp	r1, #4
    825a:	beq.n	8284 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    825c:	ldr	r4, [r3, #12]
    825e:	ldr	r2, [r0, #4]
    8260:	bic.w	r2, r2, r4
    8264:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8266:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    8268:	cbz	r1, 82a6 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    826a:	cmp	r1, #2
    826c:	beq.n	82ac <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    826e:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    8270:	ldr	r3, [r3, #4]
}
    8272:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8276:	ite	eq
    8278:	ldreq	r1, [pc, #60]	; (82b8 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    827a:	ldrne	r1, [pc, #64]	; (82bc <pinMode+0x78>)
    827c:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    827e:	movs	r2, #21
    8280:	str	r2, [r3, #0]
}
    8282:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    8284:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    8286:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    8288:	ldr	r4, [r0, #4]
    828a:	orr.w	r2, r2, r4
    828e:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8290:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    8292:	beq.n	82a6 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    8294:	movw	r1, #2104	; 0x838
    8298:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    829a:	ldr	r3, [r3, #4]
    829c:	movs	r2, #21
}
    829e:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    82a2:	str	r2, [r3, #0]
}
    82a4:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    82a6:	movs	r1, #56	; 0x38
    82a8:	str	r1, [r2, #0]
    82aa:	b.n	829a <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    82ac:	ldr	r1, [pc, #16]	; (82c0 <pinMode+0x7c>)
    82ae:	str	r1, [r2, #0]
    82b0:	b.n	829a <pinMode+0x56>
    82b2:	nop
    82b4:	.word	0x20000758
    82b8:	.word	0x00013038
    82bc:	.word	0x00010038
    82c0:	.word	0x0001f038

000082c4 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    82c4:	ldr	r0, [pc, #656]	; (8558 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    82c6:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    82ca:	ldr	r3, [pc, #656]	; (855c <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    82cc:	ldr	r2, [r0, #120]	; 0x78
    82ce:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    82d2:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    82d4:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    82d6:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    82d8:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    82dc:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    82e0:	ldr	r4, [pc, #636]	; (8560 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    82e2:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    82e6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    82e8:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    82ec:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    82ee:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    82f0:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    82f4:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    82f8:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    82fc:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    8300:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    8304:	ldrh.w	r0, [r3, #392]	; 0x188
    8308:	uxth	r0, r0
    830a:	orr.w	r0, r0, #240	; 0xf0
    830e:	strh.w	r0, [r3, #392]	; 0x188
    8312:	add.w	r0, r1, r1, lsl #1
    8316:	ldr	r3, [pc, #580]	; (855c <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    8318:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    831a:	movs	r5, #0
    831c:	lsls	r0, r0, #5
    831e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    8320:	cmp	r1, #4
    8322:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    8324:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    8328:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    832a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    832c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    832e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    8330:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    8332:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    8334:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    8336:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    8338:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    833a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    833c:	bne.n	8312 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    833e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    8342:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    8346:	ldr	r3, [pc, #540]	; (8564 <pwm_init+0x2a0>)
    8348:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    834c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    834e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    8350:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    8354:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    8356:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    835a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    835e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    8362:	ldrh.w	r0, [r4, #392]	; 0x188
    8366:	uxth	r0, r0
    8368:	orr.w	r0, r0, #3840	; 0xf00
    836c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    8370:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    8374:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    8378:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    837c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    8380:	ldrh.w	r0, [r3, #392]	; 0x188
    8384:	uxth	r0, r0
    8386:	orr.w	r0, r0, #240	; 0xf0
    838a:	strh.w	r0, [r3, #392]	; 0x188
    838e:	add.w	r0, r1, r1, lsl #1
    8392:	ldr	r3, [pc, #464]	; (8564 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    8394:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    8396:	movs	r5, #0
    8398:	lsls	r0, r0, #5
    839a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    839c:	cmp	r1, #4
    839e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    83a0:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    83a2:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    83a6:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    83a8:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    83aa:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    83ac:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    83ae:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    83b0:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    83b2:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    83b4:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    83b6:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    83b8:	bne.n	838e <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    83ba:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    83be:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    83c2:	ldr	r3, [pc, #420]	; (8568 <pwm_init+0x2a4>)
    83c4:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    83c8:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    83ca:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    83cc:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    83d0:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    83d2:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    83d6:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    83da:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    83de:	ldrh.w	r0, [r4, #392]	; 0x188
    83e2:	uxth	r0, r0
    83e4:	orr.w	r0, r0, #3840	; 0xf00
    83e8:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    83ec:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    83f0:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    83f4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    83f8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    83fc:	ldrh.w	r0, [r3, #392]	; 0x188
    8400:	uxth	r0, r0
    8402:	orr.w	r0, r0, #240	; 0xf0
    8406:	strh.w	r0, [r3, #392]	; 0x188
    840a:	add.w	r0, r1, r1, lsl #1
    840e:	ldr	r3, [pc, #344]	; (8568 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    8410:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    8412:	movs	r5, #0
    8414:	lsls	r0, r0, #5
    8416:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    8418:	cmp	r1, #4
    841a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    841c:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    841e:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    8422:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    8424:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    8426:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    8428:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    842a:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    842c:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    842e:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    8430:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    8432:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    8434:	bne.n	840a <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    8436:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    843a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    843e:	ldr	r3, [pc, #300]	; (856c <pwm_init+0x2a8>)
    8440:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    8444:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    8446:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    8448:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    844c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    844e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    8452:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    8456:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    845a:	ldrh.w	r0, [r4, #392]	; 0x188
    845e:	uxth	r0, r0
    8460:	orr.w	r0, r0, #3840	; 0xf00
    8464:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    8468:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    846c:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    8470:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    8474:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    8478:	ldrh.w	r0, [r3, #392]	; 0x188
    847c:	uxth	r0, r0
    847e:	orr.w	r0, r0, #240	; 0xf0
    8482:	strh.w	r0, [r3, #392]	; 0x188
    8486:	add.w	r0, r1, r1, lsl #1
    848a:	ldr	r3, [pc, #224]	; (856c <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    848c:	adds	r1, #1
    848e:	lsls	r0, r0, #5
    8490:	mov	r4, r3
    8492:	cmp	r1, #4
    8494:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    8496:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    8498:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    849c:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    849e:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    84a0:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    84a2:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    84a4:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    84a6:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    84a8:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    84aa:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    84ac:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    84ae:	bne.n	8486 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    84b0:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    84b4:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    84b6:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    84b8:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    84bc:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    84be:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    84c2:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    84c4:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    84c8:	orrs	r3, r7
    84ca:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    84ce:	ldrh.w	r3, [r4, #392]	; 0x188
    84d2:	uxth	r3, r3
    84d4:	orr.w	r3, r3, #3840	; 0xf00
    84d8:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    84dc:	lsls	r0, r2, #5
    84de:	ldr	r3, [pc, #144]	; (8570 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    84e0:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    84e2:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    84e4:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    84e6:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    84e8:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    84ea:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    84ec:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    84ee:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    84f2:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    84f4:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    84f6:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    84f8:	bne.n	84dc <pwm_init+0x218>
    84fa:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    84fc:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    84fe:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    8502:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    8506:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    8508:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    850c:	lsls	r0, r2, #5
    850e:	ldr	r3, [pc, #100]	; (8574 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    8510:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    8512:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    8514:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    8516:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    8518:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    851a:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    851c:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    851e:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    8520:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    8522:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    8524:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    8526:	bne.n	850c <pwm_init+0x248>
    8528:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    852a:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    852c:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    8530:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    8534:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    8536:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    853a:	lsls	r0, r2, #5
    853c:	ldr	r3, [pc, #56]	; (8578 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    853e:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    8540:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    8542:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    8544:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    8546:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    8548:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    854a:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    854c:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    854e:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    8550:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    8552:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    8554:	bne.n	853a <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    8556:	pop	{r4, r5, r6, r7, pc}
    8558:	.word	0x400fc000
    855c:	.word	0x403dc000
    8560:	.word	0xfc030000
    8564:	.word	0x403e0000
    8568:	.word	0x403e4000
    856c:	.word	0x403e8000
    8570:	.word	0x401dc000
    8574:	.word	0x401e0000
    8578:	.word	0x401e4000

0000857c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    857c:	ldr	r2, [pc, #72]	; (85c8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    857e:	ldr	r3, [pc, #76]	; (85cc <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    8580:	ldr.w	r0, [r2, #544]	; 0x220
    8584:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    8588:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    858a:	push	{r4, lr}
    858c:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    858e:	bhi.n	8596 <usb_init_serialnumber+0x1a>
    8590:	add.w	r0, r0, r0, lsl #2
    8594:	lsls	r0, r0, #1
    8596:	ldr	r4, [pc, #56]	; (85d0 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    8598:	add	r1, sp, #4
    859a:	movs	r2, #10
    859c:	bl	8b6c <ultoa>
    85a0:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    85a2:	movs	r3, #0
    85a4:	mov	r0, r4
		char c = buf[i];
    85a6:	ldrb.w	r2, [r1], #1
    85aa:	adds	r3, #1
		if (!c) break;
    85ac:	cbz	r2, 85be <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    85ae:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    85b0:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    85b4:	bne.n	85a6 <usb_init_serialnumber+0x2a>
    85b6:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    85b8:	strb	r3, [r4, #0]
}
    85ba:	add	sp, #16
    85bc:	pop	{r4, pc}
    85be:	lsls	r3, r3, #1
    85c0:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    85c2:	strb	r3, [r4, #0]
}
    85c4:	add	sp, #16
    85c6:	pop	{r4, pc}
    85c8:	.word	0x401f4400
    85cc:	.word	0x0098967f
    85d0:	.word	0x200021c0

000085d4 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    85d4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    85d8:	ldr	r6, [pc, #200]	; (86a4 <yield+0xd0>)
    85da:	ldrb	r3, [r6, #0]
    85dc:	cbz	r3, 8604 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    85de:	ldr	r7, [pc, #200]	; (86a8 <yield+0xd4>)
    85e0:	ldrb	r2, [r7, #0]
    85e2:	cbnz	r2, 8604 <yield+0x30>
	running = 1;
    85e4:	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    85e6:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    85e8:	strb	r2, [r7, #0]


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    85ea:	bmi.n	865c <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    85ec:	lsls	r2, r3, #30
    85ee:	bmi.n	8624 <yield+0x50>

	running = 0;
    85f0:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    85f2:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    85f4:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    85f6:	bpl.n	8604 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    85f8:	ldr	r3, [pc, #176]	; (86ac <yield+0xd8>)
    85fa:	ldr	r2, [r3, #0]
    85fc:	cbz	r2, 8604 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    85fe:	mrs	r2, IPSR
		if (ipsr != 0) return;
    8602:	cbz	r2, 8608 <yield+0x34>
    8604:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8608:	mrs	r0, PRIMASK
		__disable_irq();
    860c:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    860e:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    8610:	cbz	r2, 861a <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    8612:	ldr	r4, [pc, #156]	; (86b0 <yield+0xdc>)
    8614:	ldrb	r1, [r4, #0]
    8616:	cmp	r1, #0
    8618:	beq.n	867a <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    861a:	cmp	r0, #0
    861c:	bne.n	8604 <yield+0x30>
    861e:	cpsie	i
    8620:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    8624:	ldr.w	r8, [pc, #148]	; 86bc <yield+0xe8>
    8628:	ldrb.w	r2, [r8]
    862c:	cmp	r2, #0
    862e:	beq.n	85f0 <yield+0x1c>
    8630:	movs	r4, #0
    8632:	ldr.w	r9, [pc, #140]	; 86c0 <yield+0xec>
    8636:	b.n	8644 <yield+0x70>
    8638:	adds	r4, #1
    863a:	ldrb.w	r3, [r8]
    863e:	uxtb	r4, r4
    8640:	cmp	r3, r4
    8642:	bls.n	866c <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    8644:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    8648:	ldr	r3, [r5, #0]
    864a:	mov	r0, r5
    864c:	ldr	r3, [r3, #16]
    864e:	blx	r3
    8650:	cmp	r0, #0
    8652:	beq.n	8638 <yield+0x64>
    8654:	ldr	r3, [r5, #20]
    8656:	ldr	r3, [r3, #8]
    8658:	blx	r3
    865a:	b.n	8638 <yield+0x64>
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
    865c:	bl	6f80 <usb_serial_available>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    8660:	cbnz	r0, 8698 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    8662:	ldr	r3, [pc, #80]	; (86b4 <yield+0xe0>)
    8664:	ldrb	r3, [r3, #0]
    8666:	cbnz	r3, 8670 <yield+0x9c>
    8668:	ldrb	r3, [r6, #0]
    866a:	b.n	85ec <yield+0x18>
    866c:	ldrb	r3, [r6, #0]
    866e:	b.n	85f0 <yield+0x1c>
    8670:	ldrb	r3, [r6, #0]
    8672:	and.w	r3, r3, #254	; 0xfe
    8676:	strb	r3, [r6, #0]
    8678:	b.n	85ec <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    867a:	movs	r6, #1
		firstYield = first->_next;
    867c:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    867e:	strb	r6, [r4, #0]
		firstYield = first->_next;
    8680:	str	r5, [r3, #0]
		if (firstYield) {
    8682:	cbz	r5, 869e <yield+0xca>
			firstYield->_prev = nullptr;
    8684:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    8686:	cbnz	r0, 868a <yield+0xb6>
    8688:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    868a:	movs	r5, #0
		(*(first->_function))(*first);
    868c:	ldr	r3, [r2, #8]
    868e:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    8690:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    8692:	blx	r3
		runningFromYield = false;
    8694:	strb	r5, [r4, #0]
    8696:	b.n	8604 <yield+0x30>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    8698:	bl	8b64 <serialEvent()>
    869c:	b.n	8662 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    869e:	ldr	r3, [pc, #24]	; (86b8 <yield+0xe4>)
    86a0:	str	r5, [r3, #0]
    86a2:	b.n	8686 <yield+0xb2>
    86a4:	.word	0x200021d7
    86a8:	.word	0x20017cad
    86ac:	.word	0x200173a0
    86b0:	.word	0x20017cab
    86b4:	.word	0x60002694
    86b8:	.word	0x200173ac
    86bc:	.word	0x20017cac
    86c0:	.word	0x200173b0

000086c4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    86c4:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    86c6:	mrs	r1, PRIMASK
		__disable_irq();
    86ca:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    86cc:	ldr	r4, [pc, #48]	; (8700 <EventResponder::runFromInterrupt()+0x3c>)
    86ce:	ldr	r3, [r4, #0]
		if (first) {
    86d0:	cbz	r3, 86f6 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    86d2:	ldr	r6, [pc, #48]	; (8704 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    86d4:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    86d6:	ldr	r2, [r3, #20]
    86d8:	str	r2, [r4, #0]
			if (firstInterrupt) {
    86da:	cbz	r2, 86fc <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    86dc:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    86de:	cbnz	r1, 86e2 <EventResponder::runFromInterrupt()+0x1e>
    86e0:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    86e2:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    86e4:	mov	r0, r3
    86e6:	ldr	r3, [r3, #8]
    86e8:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    86ea:	mrs	r1, PRIMASK
		__disable_irq();
    86ee:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    86f0:	ldr	r3, [r4, #0]
		if (first) {
    86f2:	cmp	r3, #0
    86f4:	bne.n	86d6 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    86f6:	cbnz	r1, 86fa <EventResponder::runFromInterrupt()+0x36>
    86f8:	cpsie	i
    86fa:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    86fc:	str	r2, [r6, #0]
    86fe:	b.n	86de <EventResponder::runFromInterrupt()+0x1a>
    8700:	.word	0x200173a8
    8704:	.word	0x200173a4

00008708 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    8708:	b.w	86c4 <EventResponder::runFromInterrupt()>

0000870c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    870c:	ldr	r2, [pc, #16]	; (8720 <systick_isr+0x14>)
    870e:	ldr	r3, [pc, #20]	; (8724 <systick_isr+0x18>)
    8710:	ldr	r1, [r2, #0]
	systick_millis_count++;
    8712:	ldr	r2, [pc, #20]	; (8728 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    8714:	str	r1, [r3, #0]
	systick_millis_count++;
    8716:	ldr	r3, [r2, #0]
    8718:	adds	r3, #1
    871a:	str	r3, [r2, #0]
    871c:	bx	lr
    871e:	nop
    8720:	.word	0xe0001004
    8724:	.word	0x20017c74
    8728:	.word	0x20017c78

0000872c <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    872c:	push	{r4, r5, r6, r7}
	uint32_t ch = 0;

	__disable_irq();
    872e:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    8730:	cbnz	r1, 8756 <DMAChannel::begin(bool)+0x2a>
    8732:	ldr	r2, [r0, #0]
    8734:	cbz	r2, 8756 <DMAChannel::begin(bool)+0x2a>
    8736:	ldrb	r3, [r0, #4]
    8738:	cmp	r3, #15
    873a:	bhi.n	8756 <DMAChannel::begin(bool)+0x2a>
	  && (dma_channel_allocated_mask & (1 << channel))
    873c:	ldr	r4, [pc, #124]	; (87bc <DMAChannel::begin(bool)+0x90>)
    873e:	ldrh	r1, [r4, #0]
    8740:	asr.w	r5, r1, r3
    8744:	lsls	r5, r5, #31
    8746:	bpl.n	875a <DMAChannel::begin(bool)+0x2e>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    8748:	ldr	r5, [pc, #116]	; (87c0 <DMAChannel::begin(bool)+0x94>)
    874a:	add	r5, r3
    874c:	cmp.w	r2, r5, lsl #5
    8750:	bne.n	875a <DMAChannel::begin(bool)+0x2e>
		// DMA channel already allocated
		__enable_irq();
    8752:	cpsie	i
		return;
    8754:	b.n	8774 <DMAChannel::begin(bool)+0x48>
    8756:	ldr	r4, [pc, #100]	; (87bc <DMAChannel::begin(bool)+0x90>)
    8758:	ldrh	r1, [r4, #0]
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    875a:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    875c:	asr.w	r2, r1, r3
    8760:	ands.w	r2, r2, #1
    8764:	beq.n	8778 <DMAChannel::begin(bool)+0x4c>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    8766:	adds	r3, #1
    8768:	cmp	r3, #16
    876a:	bne.n	875c <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    876c:	cpsie	i
			TCD = (TCD_t *)0;
    876e:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    8770:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    8772:	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    8774:	pop	{r4, r5, r6, r7}
    8776:	bx	lr
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    8778:	movs	r5, #1
    877a:	lsls	r5, r3
    877c:	orrs	r1, r5
    877e:	strh	r1, [r4, #0]
			__enable_irq();
    8780:	cpsie	i
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    8782:	ldr	r6, [pc, #64]	; (87c4 <DMAChannel::begin(bool)+0x98>)
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    8784:	uxtb	r4, r3
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    8786:	ldr	r1, [pc, #56]	; (87c0 <DMAChannel::begin(bool)+0x94>)
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    8788:	movw	r7, #1154	; 0x482
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    878c:	strb	r4, [r0, #4]
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    878e:	add	r1, r3
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    8790:	ldr	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    8792:	lsls	r3, r1, #5
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    8794:	orr.w	r5, r5, #192	; 0xc0
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    8798:	ldr	r1, [pc, #44]	; (87c8 <DMAChannel::begin(bool)+0x9c>)
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    879a:	str	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    879c:	str	r7, [r1, #0]
	DMA_CERQ = ch;
    879e:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    87a0:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    87a2:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    87a4:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    87a6:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    87a8:	str	r2, [r3, #0]
	*p++ = 0;
    87aa:	str	r2, [r3, #4]
	*p++ = 0;
    87ac:	str	r2, [r3, #8]
	*p++ = 0;
    87ae:	str	r2, [r3, #12]
	*p++ = 0;
    87b0:	str	r2, [r3, #16]
	*p++ = 0;
    87b2:	str	r2, [r3, #20]
	*p++ = 0;
    87b4:	str	r2, [r3, #24]
	*p++ = 0;
    87b6:	str	r2, [r3, #28]
}
    87b8:	pop	{r4, r5, r6, r7}
    87ba:	bx	lr
    87bc:	.word	0x20017c9a
    87c0:	.word	0x02007480
    87c4:	.word	0x400fc000
    87c8:	.word	0x400e8000

000087cc <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    87cc:	ldrb	r3, [r0, #4]
    87ce:	cmp	r3, #15
    87d0:	bhi.n	87f4 <DMAChannel::release()+0x28>
	DMA_CERQ = channel;
    87d2:	ldr	r2, [pc, #36]	; (87f8 <DMAChannel::release()+0x2c>)
    87d4:	strb	r3, [r2, #26]
	__disable_irq();
    87d6:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    87d8:	ldr	r1, [pc, #32]	; (87fc <DMAChannel::release()+0x30>)
    87da:	movs	r3, #1
    87dc:	ldrb	r2, [r0, #4]
    87de:	lsl.w	r2, r3, r2
    87e2:	ldrh	r3, [r1, #0]
    87e4:	bic.w	r3, r3, r2
    87e8:	strh	r3, [r1, #0]
	__enable_irq();
    87ea:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    87ec:	movs	r2, #16
	TCD = (TCD_t *)0;
    87ee:	movs	r3, #0
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    87f0:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    87f2:	str	r3, [r0, #0]
    87f4:	bx	lr
    87f6:	nop
    87f8:	.word	0x400e8000
    87fc:	.word	0x20017c9a

00008800 <Print::println(char const*)>:
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    8800:	push	{r3, r4, r5, lr}
    8802:	mov	r5, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    8804:	mov	r4, r1
    8806:	cbz	r1, 881c <Print::println(char const*)+0x1c>
							  return write((const uint8_t *)str, strlen(str)); }
    8808:	mov	r0, r1
    880a:	bl	9d40 <strlen>
    880e:	ldr	r3, [r5, #0]
    8810:	mov	r2, r0
    8812:	mov	r1, r4
    8814:	ldr	r3, [r3, #4]
    8816:	mov	r0, r5
    8818:	blx	r3
    881a:	mov	r4, r0
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    881c:	mov	r0, r5
    881e:	bl	8900 <Print::println()>
    8822:	add	r0, r4
    8824:	pop	{r3, r4, r5, pc}
    8826:	nop

00008828 <Print::println(unsigned long, int)>:
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    8828:	push	{r3, r4, r5, lr}
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    882a:	uxtb	r2, r2
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    882c:	mov	r5, r0
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    882e:	movs	r3, #0
    8830:	bl	8954 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    8834:	mov	r4, r0
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    8836:	mov	r0, r5
    8838:	bl	8900 <Print::println()>
    883c:	add	r0, r4
    883e:	pop	{r3, r4, r5, pc}

00008840 <usb_serial_class::clear()>:
	// returns early, when buffered data has been given to Teensy's USB device
	// controller, but before your PC's USB host controller actually transfers
	// the data across your USB cable.
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
    8840:	b.w	6f94 <usb_serial_flush_input>

00008844 <usb_serial_class::peek()>:
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
	// Returns the next received byte, but does not remove it from the receive
	// buffer.  Returns -1 if nothing has been received from your PC.
        virtual int peek() { return usb_serial_peekchar(); }
    8844:	b.w	6f3c <usb_serial_peekchar>

00008848 <usb_serial_class::read()>:
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
    8848:	b.w	7008 <usb_serial_getchar>

0000884c <usb_serial_class::available()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
    884c:	b.w	6f80 <usb_serial_available>

00008850 <usb_serial_class::flush()>:
	// Wait for all data written by print() or write() to actually transmit to
	// your PC.  On Teensy 4, this function has a known limitation where it
	// returns early, when buffered data has been given to Teensy's USB device
	// controller, but before your PC's USB host controller actually transfers
	// the data across your USB cable.
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    8850:	b.w	70bc <usb_serial_flush_output>

00008854 <usb_serial_class::availableForWrite()>:
	size_t write(int n) { return write((uint8_t)n); }
	// Returns the number of bytes which may be transmitted by write() or print()
	// without waiting.  Typically programs which must maintain rapid checking
	// and response to sensors use availableForWrite() to decide whether to
	// transmit.
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    8854:	b.w	706c <usb_serial_write_buffer_free>

00008858 <usb_serial_class::write(unsigned char const*, unsigned int)>:
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8858:	mov	r0, r1
    885a:	mov	r1, r2
    885c:	b.w	7054 <usb_serial_write>

00008860 <usb_serial_class::write(unsigned char)>:
	// the data across your USB cable.
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8860:	mov	r0, r1
    8862:	b.w	7028 <usb_serial_putchar>
    8866:	nop

00008868 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    8868:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    886a:	bl	1c68 <setup>
	while (1) {
		loop();
    886e:	bl	19b4 <loop>
		yield();
    8872:	bl	85d4 <yield>
    8876:	b.n	886e <main+0x6>

00008878 <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    8878:	push	{r4, r5, r6, lr}
    887a:	ldr	r5, [pc, #40]	; (88a4 <Stream::timedRead()+0x2c>)
    887c:	mov	r4, r0
    887e:	ldr	r6, [r5, #0]
    8880:	b.n	8890 <Stream::timedRead()+0x18>
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    if (c >= 0) return c;
    yield();
    8882:	bl	85d4 <yield>
    8886:	ldr	r3, [r5, #0]
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  unsigned long startMillis = millis();
  do {
    8888:	ldr	r2, [r4, #8]
    888a:	subs	r3, r3, r6
    888c:	cmp	r3, r2
    888e:	bcs.n	889e <Stream::timedRead()+0x26>
    c = read();
    8890:	ldr	r3, [r4, #0]
    8892:	mov	r0, r4
    8894:	ldr	r3, [r3, #20]
    8896:	blx	r3
    if (c >= 0) return c;
    8898:	cmp	r0, #0
    889a:	blt.n	8882 <Stream::timedRead()+0xa>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    889c:	pop	{r4, r5, r6, pc}
  do {
    c = read();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    889e:	mov.w	r0, #4294967295
}
    88a2:	pop	{r4, r5, r6, pc}
    88a4:	.word	0x20017c78

000088a8 <Stream::readBytesUntil(char, char*, unsigned int)>:
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    88a8:	cbz	r3, 88e4 <Stream::readBytesUntil(char, char*, unsigned int)+0x3c>
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    88aa:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    88ae:	clz	r4, r2
    88b2:	mov	r5, r2
    88b4:	lsrs	r4, r4, #5
    88b6:	cbnz	r4, 88e8 <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
	length--;
	size_t index = 0;
	while (index < length) {
    88b8:	subs	r6, r3, #1
    88ba:	mov	r7, r0
    88bc:	mov	r8, r1
    88be:	bne.n	88d0 <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    88c0:	b.n	88fc <Stream::readBytesUntil(char, char*, unsigned int)+0x54>
		int c = timedRead();
		if (c == terminator) break;
		if (c < 0) {
    88c2:	cmp	r0, #0
    88c4:	blt.n	88ee <Stream::readBytesUntil(char, char*, unsigned int)+0x46>
			setReadError();
			break;
		}
		*buffer++ = (char)c;
		index++;
    88c6:	adds	r4, #1
		if (c == terminator) break;
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    88c8:	strb.w	r0, [r5], #1
{
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
	length--;
	size_t index = 0;
	while (index < length) {
    88cc:	cmp	r6, r4
    88ce:	beq.n	88da <Stream::readBytesUntil(char, char*, unsigned int)+0x32>
		int c = timedRead();
    88d0:	mov	r0, r7
    88d2:	bl	8878 <Stream::timedRead()>
		if (c == terminator) break;
    88d6:	cmp	r8, r0
    88d8:	bne.n	88c2 <Stream::readBytesUntil(char, char*, unsigned int)+0x1a>
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    88da:	movs	r3, #0
	return index; // return number of characters, not including null terminator
    88dc:	mov	r0, r4
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    88de:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
    88e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    88e4:	movs	r0, #0
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
	return index; // return number of characters, not including null terminator
}
    88e6:	bx	lr
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    88e8:	movs	r0, #0
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
	return index; // return number of characters, not including null terminator
}
    88ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    88ee:	movs	r3, #1
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
	return index; // return number of characters, not including null terminator
    88f0:	mov	r0, r4
    88f2:	strb	r3, [r7, #12]
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    88f4:	movs	r3, #0
    88f6:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
    88f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
	length--;
	size_t index = 0;
    88fc:	mov	r4, r6
    88fe:	b.n	88da <Stream::readBytesUntil(char, char*, unsigned int)+0x32>

00008900 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    8900:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    8902:	ldr	r4, [pc, #24]	; (891c <Print::println()+0x1c>)
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    8904:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    8906:	ldr	r3, [r0, #0]
    8908:	movs	r2, #2
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    890a:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    890c:	add	r1, sp, #4
    890e:	ldr	r3, [r3, #4]
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    8910:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    8914:	blx	r3
}
    8916:	add	sp, #8
    8918:	pop	{r4, pc}
    891a:	nop
    891c:	.word	0x20000398

00008920 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	if (file >= 0 && file <= 2) file = (int)&Serial;
    8920:	ldr	r3, [pc, #12]	; (8930 <_write+0x10>)
    8922:	cmp	r0, #2
    8924:	it	ls
    8926:	movls	r0, r3
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    8928:	ldr	r3, [r0, #0]
    892a:	ldr	r3, [r3, #4]
    892c:	bx	r3
    892e:	nop
    8930:	.word	0x20001bc8

00008934 <Print::printf(char const*, ...)>:
}
}

int Print::printf(const char *format, ...)
{
    8934:	push	{r1, r2, r3}
    8936:	push	{lr}
    8938:	sub	sp, #8
    893a:	add	r3, sp, #12
    893c:	ldr.w	r1, [r3], #4
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    8940:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    8942:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    8944:	bl	d318 <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    8948:	add	sp, #8
    894a:	ldr.w	lr, [sp], #4
    894e:	add	sp, #12
    8950:	bx	lr
    8952:	nop

00008954 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return retval;
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    8954:	push	{r4, r5, r6, r7, lr}
    8956:	mov	r6, r0
    8958:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    895a:	cmp	r2, #0
    895c:	beq.n	89c6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    895e:	cmp	r2, #1
    8960:	it	eq
    8962:	moveq	r2, #10
	}


	if (n == 0) {
    8964:	cbz	r1, 89bc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    8966:	movs	r5, #33	; 0x21
    8968:	b.n	896c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    896a:	uxtb	r5, r7
    896c:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    896e:	udiv	r4, r1, r2
    8972:	mls	r1, r2, r4, r1
    8976:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8978:	cmp	r1, #9
    897a:	add.w	r1, r0, #55	; 0x37
    897e:	add.w	r0, r0, #48	; 0x30
    8982:	it	hi
    8984:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    8986:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8988:	add	r4, sp, #40	; 0x28
    898a:	it	ls
    898c:	uxtbls	r0, r0
    898e:	add	r4, r5
    8990:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    8994:	cmp	r1, #0
    8996:	bne.n	896a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    8998:	cbz	r3, 89a8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    899a:	subs	r5, #1
		buf[i] = '-';
    899c:	add	r3, sp, #40	; 0x28
    899e:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    89a0:	uxtb	r5, r5
		buf[i] = '-';
    89a2:	add	r3, r5
    89a4:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    89a8:	ldr	r3, [r6, #0]
    89aa:	add	r1, sp, #4
    89ac:	rsb	r2, r5, #34	; 0x22
    89b0:	mov	r0, r6
    89b2:	add	r1, r5
    89b4:	ldr	r3, [r3, #4]
    89b6:	blx	r3
}
    89b8:	add	sp, #44	; 0x2c
    89ba:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    89bc:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    89be:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    89c0:	strb.w	r2, [sp, #37]	; 0x25
    89c4:	b.n	8998 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    89c6:	ldr	r3, [r0, #0]
    89c8:	uxtb	r1, r1
    89ca:	ldr	r3, [r3, #0]
    89cc:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    89ce:	add	sp, #44	; 0x2c
    89d0:	pop	{r4, r5, r6, r7, pc}
    89d2:	nop

000089d4 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    89d4:	cmp	r1, #0
    89d6:	blt.n	89e0 <Print::print(long)+0xc>
	return count;
}

size_t Print::print(long n)
{
	uint8_t sign=0;
    89d8:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    89da:	movs	r2, #10
    89dc:	b.w	8954 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    89e0:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    89e2:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    89e4:	movs	r2, #10
    89e6:	b.w	8954 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    89ea:	nop
    89ec:	movs	r0, r0
	...

000089f0 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    89f0:	vcmp.f64	d0, d0
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    89f4:	push	{r4, r5, r6, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    89f6:	vmrs	APSR_nzcv, fpscr
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    89fa:	mov	r5, r0
    89fc:	vpush	{d8}
    8a00:	sub	sp, #24
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    8a02:	bvs.w	8b28 <Print::printFloat(double, unsigned char)+0x138>
    	if (isinf(number)) return print("inf");
    8a06:	vabs.f64	d7, d0
    8a0a:	vldr	d6, [pc, #300]	; 8b38 <Print::printFloat(double, unsigned char)+0x148>
    8a0e:	vcmp.f64	d7, d6
    8a12:	vmrs	APSR_nzcv, fpscr
    8a16:	ble.n	8a2e <Print::printFloat(double, unsigned char)+0x3e>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
    8a18:	ldr	r3, [r0, #0]
    8a1a:	movs	r2, #3
    8a1c:	ldr	r1, [pc, #312]	; (8b58 <Print::printFloat(double, unsigned char)+0x168>)
    8a1e:	ldr	r3, [r3, #4]
    8a20:	blx	r3
    8a22:	mov	r6, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    8a24:	mov	r0, r6
    8a26:	add	sp, #24
    8a28:	vpop	{d8}
    8a2c:	pop	{r4, r5, r6, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    8a2e:	vldr	d7, [pc, #272]	; 8b40 <Print::printFloat(double, unsigned char)+0x150>
    8a32:	vcmpe.f64	d0, d7
    8a36:	vmrs	APSR_nzcv, fpscr
    8a3a:	bgt.n	8aee <Print::printFloat(double, unsigned char)+0xfe>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    8a3c:	vldr	d7, [pc, #264]	; 8b48 <Print::printFloat(double, unsigned char)+0x158>
    8a40:	vcmpe.f64	d0, d7
    8a44:	vmrs	APSR_nzcv, fpscr
    8a48:	bmi.n	8aee <Print::printFloat(double, unsigned char)+0xfe>
	
	// Handle negative numbers
	if (number < 0.0) {
    8a4a:	vcmpe.f64	d0, #0.0
    8a4e:	mov	r4, r1
    8a50:	vmrs	APSR_nzcv, fpscr
    8a54:	bmi.n	8b04 <Print::printFloat(double, unsigned char)+0x114>
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    8a56:	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    8a58:	cmp	r4, #0
    8a5a:	beq.n	8b0c <Print::printFloat(double, unsigned char)+0x11c>
    8a5c:	vmov.f64	d8, #96	; 0x3f000000  0.5
    8a60:	movs	r2, #0
		rounding *= 0.1;
    8a62:	vldr	d7, [pc, #236]	; 8b50 <Print::printFloat(double, unsigned char)+0x160>
    8a66:	adds	r2, #1
    8a68:	vmul.f64	d8, d8, d7
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    8a6c:	uxtb	r1, r2
    8a6e:	cmp	r4, r1
    8a70:	bhi.n	8a66 <Print::printFloat(double, unsigned char)+0x76>
		rounding *= 0.1;
	}
	number += rounding;
    8a72:	vadd.f64	d0, d0, d8

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    8a76:	movs	r2, #10
    8a78:	mov	r0, r5
		rounding *= 0.1;
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    8a7a:	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    8a7e:	vcvt.f64.u32	d8, s15
	count += printNumber(int_part, 10, sign);
    8a82:	vmov	r1, s15
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    8a86:	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    8a8a:	bl	8954 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    8a8e:	cmp	r4, #15

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    8a90:	mov.w	r2, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    8a94:	vmov.f64	d7, #36	; 0x41200000  10.0
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    8a98:	mov.w	r3, #46	; 0x2e
    8a9c:	it	cs
    8a9e:	movcs	r4, #15
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    8aa0:	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    8aa2:	strb.w	r3, [sp, #8]
    8aa6:	add	r4, r2
    8aa8:	uxtb	r4, r4

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    8aaa:	vmul.f64	d0, d8, d7
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    8aae:	adds	r3, r2, #1
    8ab0:	add	r1, sp, #24
    8ab2:	add	r1, r2
    8ab4:	uxtb	r2, r3
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    8ab6:	cmp	r2, r4
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    8ab8:	vcvt.u32.f64	s13, d0
    8abc:	vstr	s13, [sp, #4]
    8ac0:	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    8ac4:	vmov	s13, r3
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    8ac8:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    8acc:	vcvt.f64.s32	d8, s13
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    8ad0:	strb.w	r3, [r1, #-16]
			remainder -= n; 
    8ad4:	vsub.f64	d8, d0, d8
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    8ad8:	bne.n	8aaa <Print::printFloat(double, unsigned char)+0xba>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    8ada:	ldr	r3, [r5, #0]
    8adc:	mov	r0, r5
    8ade:	add	r1, sp, #8
    8ae0:	ldr	r3, [r3, #4]
    8ae2:	blx	r3
	}
	return count;
}
    8ae4:	mov	r0, r6
    8ae6:	add	sp, #24
    8ae8:	vpop	{d8}
    8aec:	pop	{r4, r5, r6, pc}
    8aee:	ldr	r3, [r5, #0]
    8af0:	movs	r2, #3
    8af2:	ldr	r1, [pc, #104]	; (8b5c <Print::printFloat(double, unsigned char)+0x16c>)
    8af4:	ldr	r3, [r3, #4]
    8af6:	blx	r3
    8af8:	mov	r6, r0
    8afa:	mov	r0, r6
    8afc:	add	sp, #24
    8afe:	vpop	{d8}
    8b02:	pop	{r4, r5, r6, pc}
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    8b04:	vneg.f64	d0, d0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    8b08:	movs	r3, #1
    8b0a:	b.n	8a58 <Print::printFloat(double, unsigned char)+0x68>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    8b0c:	vmov.f64	d7, #96	; 0x3f000000  0.5
    8b10:	mov	r0, r5
    8b12:	movs	r2, #10
    8b14:	vadd.f64	d0, d0, d7
    8b18:	vcvt.u32.f64	s15, d0
    8b1c:	vmov	r1, s15
    8b20:	bl	8954 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    8b24:	mov	r6, r0
    8b26:	b.n	8a24 <Print::printFloat(double, unsigned char)+0x34>
    8b28:	ldr	r3, [r0, #0]
    8b2a:	movs	r2, #3
    8b2c:	ldr	r1, [pc, #48]	; (8b60 <Print::printFloat(double, unsigned char)+0x170>)
    8b2e:	ldr	r3, [r3, #4]
    8b30:	blx	r3
    8b32:	mov	r6, r0
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    8b34:	b.n	8a24 <Print::printFloat(double, unsigned char)+0x34>
    8b36:	nop
    8b38:	.word	0xffffffff
    8b3c:	.word	0x7fefffff
    8b40:	.word	0xe0000000
    8b44:	.word	0x41efffff
    8b48:	.word	0xe0000000
    8b4c:	.word	0xc1efffff
    8b50:	.word	0xa0000000
    8b54:	.word	0x3fb99999
    8b58:	.word	0x20001684
    8b5c:	.word	0x20001680
    8b60:	.word	0x2000167c

00008b64 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    8b64:	bx	lr
    8b66:	nop

00008b68 <operator delete(void*, unsigned int)>:
    8b68:	b.w	8fa8 <free>

00008b6c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    8b6c:	push	{r4, r5, r6, r7}
    8b6e:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    8b70:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    8b72:	mov	r7, r6
    8b74:	b.n	8b78 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    8b76:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    8b78:	udiv	r3, r0, r2
    8b7c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8b80:	add.w	r4, r0, #55	; 0x37
    8b84:	cmp	r0, #9
    8b86:	add.w	r0, r0, #48	; 0x30
    8b8a:	uxtb	r4, r4
    8b8c:	it	ls
    8b8e:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    8b90:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8b92:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    8b96:	cmp	r3, #0
    8b98:	bne.n	8b76 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    8b9a:	adds	r2, r1, r5
    8b9c:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    8b9e:	cbz	r5, 8bb4 <ultoa+0x48>
    8ba0:	adds	r3, #1
		t = buf[j];
    8ba2:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    8ba6:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    8ba8:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    8baa:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    8bac:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    8bae:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    8bb2:	blt.n	8ba0 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    8bb4:	mov	r0, r1
    8bb6:	pop	{r4, r5, r6, r7}
    8bb8:	bx	lr
    8bba:	nop

00008bbc <__aeabi_atexit>:
    8bbc:	mov	r3, r1
    8bbe:	mov	r1, r0
    8bc0:	mov	r0, r3
    8bc2:	b.w	8ee0 <__cxa_atexit>
    8bc6:	nop

00008bc8 <__aeabi_uldivmod>:
    8bc8:	cbnz	r3, 8be0 <__aeabi_uldivmod+0x18>
    8bca:	cbnz	r2, 8be0 <__aeabi_uldivmod+0x18>
    8bcc:	cmp	r1, #0
    8bce:	it	eq
    8bd0:	cmpeq	r0, #0
    8bd2:	itt	ne
    8bd4:	movne.w	r1, #4294967295
    8bd8:	movne.w	r0, #4294967295
    8bdc:	b.w	8edc <__aeabi_idiv0>
    8be0:	sub.w	ip, sp, #8
    8be4:	strd	ip, lr, [sp, #-16]!
    8be8:	bl	8bf8 <__udivmoddi4>
    8bec:	ldr.w	lr, [sp, #4]
    8bf0:	ldrd	r2, r3, [sp, #8]
    8bf4:	add	sp, #16
    8bf6:	bx	lr

00008bf8 <__udivmoddi4>:
    8bf8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8bfc:	mov	ip, r1
    8bfe:	mov	r6, r1
    8c00:	mov	r4, r0
    8c02:	ldr	r5, [sp, #32]
    8c04:	cmp	r3, #0
    8c06:	bne.n	8caa <__udivmoddi4+0xb2>
    8c08:	cmp	r2, r1
    8c0a:	mov	r7, r2
    8c0c:	bls.n	8ce8 <__udivmoddi4+0xf0>
    8c0e:	clz	lr, r2
    8c12:	cmp.w	lr, #0
    8c16:	beq.n	8c30 <__udivmoddi4+0x38>
    8c18:	rsb	r4, lr, #32
    8c1c:	lsr.w	r4, r0, r4
    8c20:	lsl.w	r6, r1, lr
    8c24:	orr.w	ip, r4, r6
    8c28:	lsl.w	r7, r2, lr
    8c2c:	lsl.w	r4, r0, lr
    8c30:	mov.w	r9, r7, lsr #16
    8c34:	lsrs	r2, r4, #16
    8c36:	udiv	r0, ip, r9
    8c3a:	uxth.w	r8, r7
    8c3e:	mls	r6, r9, r0, ip
    8c42:	orr.w	r6, r2, r6, lsl #16
    8c46:	mul.w	r3, r0, r8
    8c4a:	cmp	r3, r6
    8c4c:	bls.n	8c62 <__udivmoddi4+0x6a>
    8c4e:	adds	r6, r6, r7
    8c50:	add.w	r2, r0, #4294967295
    8c54:	bcs.w	8e9c <__udivmoddi4+0x2a4>
    8c58:	cmp	r3, r6
    8c5a:	bls.w	8e9c <__udivmoddi4+0x2a4>
    8c5e:	subs	r0, #2
    8c60:	add	r6, r7
    8c62:	subs	r6, r6, r3
    8c64:	uxth	r2, r4
    8c66:	udiv	r3, r6, r9
    8c6a:	mls	r6, r9, r3, r6
    8c6e:	orr.w	r4, r2, r6, lsl #16
    8c72:	mul.w	r8, r3, r8
    8c76:	cmp	r8, r4
    8c78:	bls.n	8c8e <__udivmoddi4+0x96>
    8c7a:	adds	r4, r4, r7
    8c7c:	add.w	r2, r3, #4294967295
    8c80:	bcs.w	8e98 <__udivmoddi4+0x2a0>
    8c84:	cmp	r8, r4
    8c86:	bls.w	8e98 <__udivmoddi4+0x2a0>
    8c8a:	subs	r3, #2
    8c8c:	add	r4, r7
    8c8e:	rsb	r4, r8, r4
    8c92:	orr.w	r0, r3, r0, lsl #16
    8c96:	movs	r1, #0
    8c98:	cmp	r5, #0
    8c9a:	beq.n	8d62 <__udivmoddi4+0x16a>
    8c9c:	lsr.w	r4, r4, lr
    8ca0:	movs	r3, #0
    8ca2:	str	r4, [r5, #0]
    8ca4:	str	r3, [r5, #4]
    8ca6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8caa:	cmp	r3, r1
    8cac:	bls.n	8cbe <__udivmoddi4+0xc6>
    8cae:	cmp	r5, #0
    8cb0:	beq.n	8d5e <__udivmoddi4+0x166>
    8cb2:	movs	r1, #0
    8cb4:	stmia.w	r5, {r0, r6}
    8cb8:	mov	r0, r1
    8cba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8cbe:	clz	r1, r3
    8cc2:	cmp	r1, #0
    8cc4:	bne.w	8de8 <__udivmoddi4+0x1f0>
    8cc8:	cmp	r3, r6
    8cca:	bcc.n	8cd2 <__udivmoddi4+0xda>
    8ccc:	cmp	r2, r0
    8cce:	bhi.w	8ec2 <__udivmoddi4+0x2ca>
    8cd2:	subs	r4, r0, r2
    8cd4:	sbc.w	r6, r6, r3
    8cd8:	movs	r0, #1
    8cda:	mov	ip, r6
    8cdc:	cmp	r5, #0
    8cde:	beq.n	8d62 <__udivmoddi4+0x16a>
    8ce0:	stmia.w	r5, {r4, ip}
    8ce4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8ce8:	cbnz	r2, 8cf0 <__udivmoddi4+0xf8>
    8cea:	movs	r7, #1
    8cec:	udiv	r7, r7, r2
    8cf0:	clz	lr, r7
    8cf4:	cmp.w	lr, #0
    8cf8:	bne.n	8d66 <__udivmoddi4+0x16e>
    8cfa:	subs	r3, r6, r7
    8cfc:	mov.w	r8, r7, lsr #16
    8d00:	uxth.w	ip, r7
    8d04:	movs	r1, #1
    8d06:	udiv	r0, r3, r8
    8d0a:	lsrs	r2, r4, #16
    8d0c:	mls	r6, r8, r0, r3
    8d10:	orr.w	r6, r2, r6, lsl #16
    8d14:	mul.w	r3, ip, r0
    8d18:	cmp	r3, r6
    8d1a:	bls.n	8d2c <__udivmoddi4+0x134>
    8d1c:	adds	r6, r6, r7
    8d1e:	add.w	r2, r0, #4294967295
    8d22:	bcs.n	8d2a <__udivmoddi4+0x132>
    8d24:	cmp	r3, r6
    8d26:	bhi.w	8ec6 <__udivmoddi4+0x2ce>
    8d2a:	mov	r0, r2
    8d2c:	subs	r6, r6, r3
    8d2e:	uxth	r2, r4
    8d30:	udiv	r3, r6, r8
    8d34:	mls	r6, r8, r3, r6
    8d38:	orr.w	r4, r2, r6, lsl #16
    8d3c:	mul.w	ip, ip, r3
    8d40:	cmp	ip, r4
    8d42:	bls.n	8d54 <__udivmoddi4+0x15c>
    8d44:	adds	r4, r4, r7
    8d46:	add.w	r2, r3, #4294967295
    8d4a:	bcs.n	8d52 <__udivmoddi4+0x15a>
    8d4c:	cmp	ip, r4
    8d4e:	bhi.w	8ebc <__udivmoddi4+0x2c4>
    8d52:	mov	r3, r2
    8d54:	rsb	r4, ip, r4
    8d58:	orr.w	r0, r3, r0, lsl #16
    8d5c:	b.n	8c98 <__udivmoddi4+0xa0>
    8d5e:	mov	r1, r5
    8d60:	mov	r0, r5
    8d62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8d66:	rsb	r1, lr, #32
    8d6a:	lsl.w	r3, r6, lr
    8d6e:	lsl.w	r7, r7, lr
    8d72:	lsr.w	r9, r0, r1
    8d76:	mov.w	r8, r7, lsr #16
    8d7a:	lsrs	r6, r1
    8d7c:	orr.w	r9, r9, r3
    8d80:	udiv	sl, r6, r8
    8d84:	mov.w	r4, r9, lsr #16
    8d88:	mls	r6, r8, sl, r6
    8d8c:	uxth.w	ip, r7
    8d90:	orr.w	r3, r4, r6, lsl #16
    8d94:	mul.w	r2, sl, ip
    8d98:	cmp	r2, r3
    8d9a:	lsl.w	r4, r0, lr
    8d9e:	bls.n	8db6 <__udivmoddi4+0x1be>
    8da0:	adds	r3, r3, r7
    8da2:	add.w	r1, sl, #4294967295
    8da6:	bcs.w	8eb8 <__udivmoddi4+0x2c0>
    8daa:	cmp	r2, r3
    8dac:	bls.w	8eb8 <__udivmoddi4+0x2c0>
    8db0:	sub.w	sl, sl, #2
    8db4:	add	r3, r7
    8db6:	subs	r3, r3, r2
    8db8:	uxth.w	r9, r9
    8dbc:	udiv	r1, r3, r8
    8dc0:	mls	r3, r8, r1, r3
    8dc4:	orr.w	r3, r9, r3, lsl #16
    8dc8:	mul.w	r6, r1, ip
    8dcc:	cmp	r6, r3
    8dce:	bls.n	8de0 <__udivmoddi4+0x1e8>
    8dd0:	adds	r3, r3, r7
    8dd2:	add.w	r2, r1, #4294967295
    8dd6:	bcs.n	8eb0 <__udivmoddi4+0x2b8>
    8dd8:	cmp	r6, r3
    8dda:	bls.n	8eb0 <__udivmoddi4+0x2b8>
    8ddc:	subs	r1, #2
    8dde:	add	r3, r7
    8de0:	subs	r3, r3, r6
    8de2:	orr.w	r1, r1, sl, lsl #16
    8de6:	b.n	8d06 <__udivmoddi4+0x10e>
    8de8:	rsb	lr, r1, #32
    8dec:	lsr.w	r4, r2, lr
    8df0:	lsls	r3, r1
    8df2:	orrs	r3, r4
    8df4:	lsr.w	r7, r0, lr
    8df8:	lsl.w	r4, r6, r1
    8dfc:	mov.w	ip, r3, lsr #16
    8e00:	lsr.w	r6, r6, lr
    8e04:	orrs	r4, r7
    8e06:	udiv	r9, r6, ip
    8e0a:	lsrs	r7, r4, #16
    8e0c:	mls	r6, ip, r9, r6
    8e10:	uxth.w	r8, r3
    8e14:	orr.w	r6, r7, r6, lsl #16
    8e18:	mul.w	r7, r9, r8
    8e1c:	cmp	r7, r6
    8e1e:	lsl.w	r2, r2, r1
    8e22:	lsl.w	sl, r0, r1
    8e26:	bls.n	8e3a <__udivmoddi4+0x242>
    8e28:	adds	r6, r6, r3
    8e2a:	add.w	r0, r9, #4294967295
    8e2e:	bcs.n	8eb4 <__udivmoddi4+0x2bc>
    8e30:	cmp	r7, r6
    8e32:	bls.n	8eb4 <__udivmoddi4+0x2bc>
    8e34:	sub.w	r9, r9, #2
    8e38:	add	r6, r3
    8e3a:	subs	r6, r6, r7
    8e3c:	uxth	r0, r4
    8e3e:	udiv	r4, r6, ip
    8e42:	mls	r6, ip, r4, r6
    8e46:	orr.w	r7, r0, r6, lsl #16
    8e4a:	mul.w	r8, r4, r8
    8e4e:	cmp	r8, r7
    8e50:	bls.n	8e62 <__udivmoddi4+0x26a>
    8e52:	adds	r7, r7, r3
    8e54:	add.w	r0, r4, #4294967295
    8e58:	bcs.n	8eac <__udivmoddi4+0x2b4>
    8e5a:	cmp	r8, r7
    8e5c:	bls.n	8eac <__udivmoddi4+0x2b4>
    8e5e:	subs	r4, #2
    8e60:	add	r7, r3
    8e62:	orr.w	r0, r4, r9, lsl #16
    8e66:	rsb	r7, r8, r7
    8e6a:	umull	r8, r9, r0, r2
    8e6e:	cmp	r7, r9
    8e70:	mov	r4, r8
    8e72:	mov	r6, r9
    8e74:	bcc.n	8ea0 <__udivmoddi4+0x2a8>
    8e76:	beq.n	8ecc <__udivmoddi4+0x2d4>
    8e78:	cbz	r5, 8ed4 <__udivmoddi4+0x2dc>
    8e7a:	subs.w	r3, sl, r4
    8e7e:	sbc.w	r7, r7, r6
    8e82:	lsl.w	lr, r7, lr
    8e86:	lsrs	r3, r1
    8e88:	lsrs	r7, r1
    8e8a:	orr.w	r3, lr, r3
    8e8e:	stmia.w	r5, {r3, r7}
    8e92:	movs	r1, #0
    8e94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8e98:	mov	r3, r2
    8e9a:	b.n	8c8e <__udivmoddi4+0x96>
    8e9c:	mov	r0, r2
    8e9e:	b.n	8c62 <__udivmoddi4+0x6a>
    8ea0:	subs.w	r4, r8, r2
    8ea4:	sbc.w	r6, r9, r3
    8ea8:	subs	r0, #1
    8eaa:	b.n	8e78 <__udivmoddi4+0x280>
    8eac:	mov	r4, r0
    8eae:	b.n	8e62 <__udivmoddi4+0x26a>
    8eb0:	mov	r1, r2
    8eb2:	b.n	8de0 <__udivmoddi4+0x1e8>
    8eb4:	mov	r9, r0
    8eb6:	b.n	8e3a <__udivmoddi4+0x242>
    8eb8:	mov	sl, r1
    8eba:	b.n	8db6 <__udivmoddi4+0x1be>
    8ebc:	subs	r3, #2
    8ebe:	add	r4, r7
    8ec0:	b.n	8d54 <__udivmoddi4+0x15c>
    8ec2:	mov	r0, r1
    8ec4:	b.n	8cdc <__udivmoddi4+0xe4>
    8ec6:	subs	r0, #2
    8ec8:	add	r6, r7
    8eca:	b.n	8d2c <__udivmoddi4+0x134>
    8ecc:	cmp	sl, r8
    8ece:	bcc.n	8ea0 <__udivmoddi4+0x2a8>
    8ed0:	mov	r6, r7
    8ed2:	b.n	8e78 <__udivmoddi4+0x280>
    8ed4:	mov	r1, r5
    8ed6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8eda:	nop

00008edc <__aeabi_idiv0>:
    8edc:	bx	lr
    8ede:	nop

00008ee0 <__cxa_atexit>:
    8ee0:	mov	r3, r2
    8ee2:	mov	r2, r1
    8ee4:	mov	r1, r0
    8ee6:	movs	r0, #2
    8ee8:	b.w	d378 <__register_exitproc>

00008eec <__errno>:
    8eec:	ldr	r3, [pc, #4]	; (8ef4 <__errno+0x8>)
    8eee:	ldr	r0, [r3, #0]
    8ef0:	bx	lr
    8ef2:	nop
    8ef4:	.word	0x2000215c

00008ef8 <__libc_init_array>:
    8ef8:	push	{r4, r5, r6, lr}
    8efa:	ldr	r6, [pc, #60]	; (8f38 <__libc_init_array+0x40>)
    8efc:	ldr	r5, [pc, #60]	; (8f3c <__libc_init_array+0x44>)
    8efe:	subs	r6, r6, r5
    8f00:	asrs	r6, r6, #2
    8f02:	it	ne
    8f04:	movne	r4, #0
    8f06:	beq.n	8f14 <__libc_init_array+0x1c>
    8f08:	adds	r4, #1
    8f0a:	ldr.w	r3, [r5], #4
    8f0e:	blx	r3
    8f10:	cmp	r6, r4
    8f12:	bne.n	8f08 <__libc_init_array+0x10>
    8f14:	ldr	r6, [pc, #40]	; (8f40 <__libc_init_array+0x48>)
    8f16:	ldr	r5, [pc, #44]	; (8f44 <__libc_init_array+0x4c>)
    8f18:	subs	r6, r6, r5
    8f1a:	bl	fe90 <___init_veneer>
    8f1e:	asrs	r6, r6, #2
    8f20:	it	ne
    8f22:	movne	r4, #0
    8f24:	beq.n	8f34 <__libc_init_array+0x3c>
    8f26:	adds	r4, #1
    8f28:	ldr.w	r3, [r5], #4
    8f2c:	blx	r3
    8f2e:	cmp	r6, r4
    8f30:	bne.n	8f26 <__libc_init_array+0x2e>
    8f32:	pop	{r4, r5, r6, pc}
    8f34:	pop	{r4, r5, r6, pc}
    8f36:	nop
    8f38:	.word	0x60002580
    8f3c:	.word	0x60002580
    8f40:	.word	0x6000258c
    8f44:	.word	0x60002580

00008f48 <__get_current_locale>:
    8f48:	ldr	r2, [pc, #12]	; (8f58 <__get_current_locale+0x10>)
    8f4a:	ldr	r3, [pc, #16]	; (8f5c <__get_current_locale+0x14>)
    8f4c:	ldr	r2, [r2, #0]
    8f4e:	ldr	r0, [r2, #52]	; 0x34
    8f50:	cmp	r0, #0
    8f52:	it	eq
    8f54:	moveq	r0, r3
    8f56:	bx	lr
    8f58:	.word	0x2000215c
    8f5c:	.word	0x20001be0

00008f60 <__locale_mb_cur_max>:
    8f60:	ldr	r3, [pc, #16]	; (8f74 <__locale_mb_cur_max+0x14>)
    8f62:	ldr	r2, [pc, #20]	; (8f78 <__locale_mb_cur_max+0x18>)
    8f64:	ldr	r3, [r3, #0]
    8f66:	ldr	r3, [r3, #52]	; 0x34
    8f68:	cmp	r3, #0
    8f6a:	it	eq
    8f6c:	moveq	r3, r2
    8f6e:	ldrb.w	r0, [r3, #296]	; 0x128
    8f72:	bx	lr
    8f74:	.word	0x2000215c
    8f78:	.word	0x20001be0

00008f7c <__locale_ctype_ptr_l>:
    8f7c:	ldr.w	r0, [r0, #236]	; 0xec
    8f80:	bx	lr
    8f82:	nop

00008f84 <__locale_ctype_ptr>:
    8f84:	push	{r3, lr}
    8f86:	ldr	r3, [pc, #12]	; (8f94 <__locale_ctype_ptr+0x10>)
    8f88:	ldr	r0, [r3, #0]
    8f8a:	bl	8f48 <__get_current_locale>
    8f8e:	ldr.w	r0, [r0, #236]	; 0xec
    8f92:	pop	{r3, pc}
    8f94:	.word	0x2000215c

00008f98 <malloc>:
    8f98:	ldr	r3, [pc, #8]	; (8fa4 <malloc+0xc>)
    8f9a:	mov	r1, r0
    8f9c:	ldr	r0, [r3, #0]
    8f9e:	b.w	8fb8 <_malloc_r>
    8fa2:	nop
    8fa4:	.word	0x2000215c

00008fa8 <free>:
    8fa8:	ldr	r3, [pc, #8]	; (8fb4 <free+0xc>)
    8faa:	mov	r1, r0
    8fac:	ldr	r0, [r3, #0]
    8fae:	b.w	e268 <_free_r>
    8fb2:	nop
    8fb4:	.word	0x2000215c

00008fb8 <_malloc_r>:
    8fb8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fbc:	add.w	r5, r1, #11
    8fc0:	cmp	r5, #22
    8fc2:	sub	sp, #12
    8fc4:	mov	r6, r0
    8fc6:	bls.w	9108 <_malloc_r+0x150>
    8fca:	bics.w	r5, r5, #7
    8fce:	bmi.w	9150 <_malloc_r+0x198>
    8fd2:	cmp	r1, r5
    8fd4:	bhi.w	9150 <_malloc_r+0x198>
    8fd8:	bl	97c8 <__malloc_lock>
    8fdc:	cmp.w	r5, #504	; 0x1f8
    8fe0:	bcc.w	951c <_malloc_r+0x564>
    8fe4:	lsrs	r3, r5, #9
    8fe6:	beq.w	915e <_malloc_r+0x1a6>
    8fea:	cmp	r3, #4
    8fec:	bhi.w	92f6 <_malloc_r+0x33e>
    8ff0:	lsrs	r0, r5, #6
    8ff2:	add.w	lr, r0, #57	; 0x39
    8ff6:	mov.w	r3, lr, lsl #1
    8ffa:	adds	r0, #56	; 0x38
    8ffc:	ldr	r7, [pc, #784]	; (9310 <_malloc_r+0x358>)
    8ffe:	add.w	r3, r7, r3, lsl #2
    9002:	sub.w	r1, r3, #8
    9006:	ldr	r4, [r3, #4]
    9008:	cmp	r1, r4
    900a:	bne.n	901c <_malloc_r+0x64>
    900c:	b.n	9168 <_malloc_r+0x1b0>
    900e:	cmp	r2, #0
    9010:	bge.w	916c <_malloc_r+0x1b4>
    9014:	ldr	r4, [r4, #12]
    9016:	cmp	r1, r4
    9018:	beq.w	9168 <_malloc_r+0x1b0>
    901c:	ldr	r3, [r4, #4]
    901e:	bic.w	r3, r3, #3
    9022:	subs	r2, r3, r5
    9024:	cmp	r2, #15
    9026:	ble.n	900e <_malloc_r+0x56>
    9028:	ldr	r1, [pc, #740]	; (9310 <_malloc_r+0x358>)
    902a:	ldr	r4, [r7, #16]
    902c:	add.w	lr, r1, #8
    9030:	cmp	r4, lr
    9032:	beq.w	939c <_malloc_r+0x3e4>
    9036:	ldr	r3, [r4, #4]
    9038:	bic.w	r3, r3, #3
    903c:	subs	r2, r3, r5
    903e:	cmp	r2, #15
    9040:	bgt.w	9376 <_malloc_r+0x3be>
    9044:	cmp	r2, #0
    9046:	str.w	lr, [r1, #20]
    904a:	str.w	lr, [r1, #16]
    904e:	bge.w	918e <_malloc_r+0x1d6>
    9052:	cmp.w	r3, #512	; 0x200
    9056:	bcs.w	9328 <_malloc_r+0x370>
    905a:	lsrs	r3, r3, #3
    905c:	add.w	ip, r3, #1
    9060:	movs	r2, #1
    9062:	asrs	r3, r3, #2
    9064:	lsl.w	r3, r2, r3
    9068:	ldr	r2, [r1, #4]
    906a:	ldr.w	r8, [r1, ip, lsl #3]
    906e:	str.w	r8, [r4, #8]
    9072:	add.w	r9, r1, ip, lsl #3
    9076:	orrs	r2, r3
    9078:	sub.w	r3, r9, #8
    907c:	str	r3, [r4, #12]
    907e:	str	r2, [r1, #4]
    9080:	str.w	r4, [r1, ip, lsl #3]
    9084:	str.w	r4, [r8, #12]
    9088:	asrs	r3, r0, #2
    908a:	movs	r4, #1
    908c:	lsls	r4, r3
    908e:	cmp	r4, r2
    9090:	bhi.w	91a8 <_malloc_r+0x1f0>
    9094:	tst	r4, r2
    9096:	bne.n	90a6 <_malloc_r+0xee>
    9098:	bic.w	r0, r0, #3
    909c:	lsls	r4, r4, #1
    909e:	tst	r4, r2
    90a0:	add.w	r0, r0, #4
    90a4:	beq.n	909c <_malloc_r+0xe4>
    90a6:	add.w	r9, r7, r0, lsl #3
    90aa:	mov	ip, r9
    90ac:	mov	r8, r0
    90ae:	ldr.w	r1, [ip, #12]
    90b2:	cmp	ip, r1
    90b4:	bne.n	90c6 <_malloc_r+0x10e>
    90b6:	b.n	93a0 <_malloc_r+0x3e8>
    90b8:	cmp	r2, #0
    90ba:	bge.w	93c0 <_malloc_r+0x408>
    90be:	ldr	r1, [r1, #12]
    90c0:	cmp	ip, r1
    90c2:	beq.w	93a0 <_malloc_r+0x3e8>
    90c6:	ldr	r3, [r1, #4]
    90c8:	bic.w	r3, r3, #3
    90cc:	subs	r2, r3, r5
    90ce:	cmp	r2, #15
    90d0:	ble.n	90b8 <_malloc_r+0x100>
    90d2:	mov	r4, r1
    90d4:	ldr.w	ip, [r1, #12]
    90d8:	ldr.w	r8, [r4, #8]!
    90dc:	adds	r3, r1, r5
    90de:	orr.w	r5, r5, #1
    90e2:	str	r5, [r1, #4]
    90e4:	orr.w	r1, r2, #1
    90e8:	str.w	ip, [r8, #12]
    90ec:	mov	r0, r6
    90ee:	str.w	r8, [ip, #8]
    90f2:	str	r3, [r7, #20]
    90f4:	str	r3, [r7, #16]
    90f6:	str.w	lr, [r3, #12]
    90fa:	str.w	lr, [r3, #8]
    90fe:	str	r1, [r3, #4]
    9100:	str	r2, [r3, r2]
    9102:	bl	97cc <__malloc_unlock>
    9106:	b.n	9148 <_malloc_r+0x190>
    9108:	cmp	r1, #16
    910a:	bhi.n	9150 <_malloc_r+0x198>
    910c:	bl	97c8 <__malloc_lock>
    9110:	movs	r5, #16
    9112:	movs	r3, #6
    9114:	movs	r0, #2
    9116:	ldr	r7, [pc, #504]	; (9310 <_malloc_r+0x358>)
    9118:	add.w	r3, r7, r3, lsl #2
    911c:	sub.w	r2, r3, #8
    9120:	ldr	r4, [r3, #4]
    9122:	cmp	r4, r2
    9124:	beq.w	93b2 <_malloc_r+0x3fa>
    9128:	ldr	r3, [r4, #4]
    912a:	ldr	r1, [r4, #12]
    912c:	ldr	r5, [r4, #8]
    912e:	bic.w	r3, r3, #3
    9132:	add	r3, r4
    9134:	mov	r0, r6
    9136:	ldr	r2, [r3, #4]
    9138:	str	r1, [r5, #12]
    913a:	orr.w	r2, r2, #1
    913e:	str	r5, [r1, #8]
    9140:	str	r2, [r3, #4]
    9142:	bl	97cc <__malloc_unlock>
    9146:	adds	r4, #8
    9148:	mov	r0, r4
    914a:	add	sp, #12
    914c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9150:	movs	r4, #0
    9152:	movs	r3, #12
    9154:	mov	r0, r4
    9156:	str	r3, [r6, #0]
    9158:	add	sp, #12
    915a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    915e:	movs	r3, #128	; 0x80
    9160:	mov.w	lr, #64	; 0x40
    9164:	movs	r0, #63	; 0x3f
    9166:	b.n	8ffc <_malloc_r+0x44>
    9168:	mov	r0, lr
    916a:	b.n	9028 <_malloc_r+0x70>
    916c:	add	r3, r4
    916e:	ldr	r1, [r4, #12]
    9170:	ldr	r2, [r3, #4]
    9172:	ldr	r5, [r4, #8]
    9174:	orr.w	r2, r2, #1
    9178:	str	r1, [r5, #12]
    917a:	mov	r0, r6
    917c:	str	r5, [r1, #8]
    917e:	str	r2, [r3, #4]
    9180:	bl	97cc <__malloc_unlock>
    9184:	adds	r4, #8
    9186:	mov	r0, r4
    9188:	add	sp, #12
    918a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    918e:	add	r3, r4
    9190:	mov	r0, r6
    9192:	ldr	r2, [r3, #4]
    9194:	orr.w	r2, r2, #1
    9198:	str	r2, [r3, #4]
    919a:	bl	97cc <__malloc_unlock>
    919e:	adds	r4, #8
    91a0:	mov	r0, r4
    91a2:	add	sp, #12
    91a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91a8:	ldr	r4, [r7, #8]
    91aa:	ldr	r3, [r4, #4]
    91ac:	bic.w	r8, r3, #3
    91b0:	cmp	r8, r5
    91b2:	bcc.n	91be <_malloc_r+0x206>
    91b4:	rsb	r3, r5, r8
    91b8:	cmp	r3, #15
    91ba:	bgt.w	92d6 <_malloc_r+0x31e>
    91be:	ldr	r3, [pc, #340]	; (9314 <_malloc_r+0x35c>)
    91c0:	ldr.w	r9, [pc, #352]	; 9324 <_malloc_r+0x36c>
    91c4:	ldr	r2, [r3, #0]
    91c6:	ldr.w	r3, [r9]
    91ca:	adds	r3, #1
    91cc:	add	r2, r5
    91ce:	add.w	sl, r4, r8
    91d2:	beq.w	9496 <_malloc_r+0x4de>
    91d6:	add.w	r2, r2, #4096	; 0x1000
    91da:	adds	r2, #15
    91dc:	bic.w	r2, r2, #4080	; 0xff0
    91e0:	bic.w	r2, r2, #15
    91e4:	mov	r1, r2
    91e6:	mov	r0, r6
    91e8:	str	r2, [sp, #4]
    91ea:	bl	9bb0 <_sbrk_r>
    91ee:	cmp.w	r0, #4294967295
    91f2:	mov	fp, r0
    91f4:	ldr	r2, [sp, #4]
    91f6:	beq.w	94aa <_malloc_r+0x4f2>
    91fa:	cmp	sl, r0
    91fc:	bhi.w	93f8 <_malloc_r+0x440>
    9200:	ldr	r3, [pc, #276]	; (9318 <_malloc_r+0x360>)
    9202:	ldr	r1, [r3, #0]
    9204:	cmp	sl, fp
    9206:	add	r1, r2
    9208:	str	r1, [r3, #0]
    920a:	beq.w	94b4 <_malloc_r+0x4fc>
    920e:	ldr.w	r0, [r9]
    9212:	ldr.w	lr, [pc, #272]	; 9324 <_malloc_r+0x36c>
    9216:	adds	r0, #1
    9218:	ittet	ne
    921a:	rsbne	sl, sl, fp
    921e:	addne	r1, sl
    9220:	streq.w	fp, [lr]
    9224:	strne	r1, [r3, #0]
    9226:	ands.w	r1, fp, #7
    922a:	beq.w	945c <_malloc_r+0x4a4>
    922e:	rsb	r0, r1, #8
    9232:	rsb	r1, r1, #4096	; 0x1000
    9236:	add	fp, r0
    9238:	adds	r1, #8
    923a:	add	r2, fp
    923c:	ubfx	r2, r2, #0, #12
    9240:	rsb	r9, r2, r1
    9244:	mov	r1, r9
    9246:	mov	r0, r6
    9248:	str	r3, [sp, #4]
    924a:	bl	9bb0 <_sbrk_r>
    924e:	adds	r3, r0, #1
    9250:	ldr	r3, [sp, #4]
    9252:	beq.w	94d4 <_malloc_r+0x51c>
    9256:	rsb	r2, fp, r0
    925a:	add	r2, r9
    925c:	orr.w	r2, r2, #1
    9260:	ldr	r1, [r3, #0]
    9262:	str.w	fp, [r7, #8]
    9266:	add	r1, r9
    9268:	cmp	r4, r7
    926a:	str.w	r2, [fp, #4]
    926e:	str	r1, [r3, #0]
    9270:	ldr.w	r9, [pc, #164]	; 9318 <_malloc_r+0x360>
    9274:	beq.n	92a4 <_malloc_r+0x2ec>
    9276:	cmp.w	r8, #15
    927a:	bls.w	9478 <_malloc_r+0x4c0>
    927e:	ldr	r2, [r4, #4]
    9280:	sub.w	r3, r8, #12
    9284:	bic.w	r3, r3, #7
    9288:	adds	r0, r4, r3
    928a:	and.w	r2, r2, #1
    928e:	mov.w	lr, #5
    9292:	orrs	r2, r3
    9294:	cmp	r3, #15
    9296:	str	r2, [r4, #4]
    9298:	str.w	lr, [r0, #4]
    929c:	str.w	lr, [r0, #8]
    92a0:	bhi.w	94dc <_malloc_r+0x524>
    92a4:	ldr	r3, [pc, #116]	; (931c <_malloc_r+0x364>)
    92a6:	ldr	r4, [r7, #8]
    92a8:	ldr	r2, [r3, #0]
    92aa:	cmp	r1, r2
    92ac:	it	hi
    92ae:	strhi	r1, [r3, #0]
    92b0:	ldr	r3, [pc, #108]	; (9320 <_malloc_r+0x368>)
    92b2:	ldr	r2, [r3, #0]
    92b4:	cmp	r1, r2
    92b6:	ldr	r2, [r4, #4]
    92b8:	it	hi
    92ba:	strhi	r1, [r3, #0]
    92bc:	bic.w	r2, r2, #3
    92c0:	cmp	r5, r2
    92c2:	sub.w	r3, r2, r5
    92c6:	bhi.n	92cc <_malloc_r+0x314>
    92c8:	cmp	r3, #15
    92ca:	bgt.n	92d6 <_malloc_r+0x31e>
    92cc:	mov	r0, r6
    92ce:	bl	97cc <__malloc_unlock>
    92d2:	movs	r4, #0
    92d4:	b.n	9148 <_malloc_r+0x190>
    92d6:	adds	r2, r4, r5
    92d8:	orr.w	r3, r3, #1
    92dc:	orr.w	r5, r5, #1
    92e0:	str	r5, [r4, #4]
    92e2:	mov	r0, r6
    92e4:	str	r2, [r7, #8]
    92e6:	str	r3, [r2, #4]
    92e8:	bl	97cc <__malloc_unlock>
    92ec:	adds	r4, #8
    92ee:	mov	r0, r4
    92f0:	add	sp, #12
    92f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    92f6:	cmp	r3, #20
    92f8:	bls.n	93de <_malloc_r+0x426>
    92fa:	cmp	r3, #84	; 0x54
    92fc:	bhi.w	9448 <_malloc_r+0x490>
    9300:	lsrs	r0, r5, #12
    9302:	add.w	lr, r0, #111	; 0x6f
    9306:	mov.w	r3, lr, lsl #1
    930a:	adds	r0, #110	; 0x6e
    930c:	b.n	8ffc <_malloc_r+0x44>
    930e:	nop
    9310:	.word	0x20001d4c
    9314:	.word	0x20017468
    9318:	.word	0x20017438
    931c:	.word	0x20017460
    9320:	.word	0x20017464
    9324:	.word	0x20002154
    9328:	lsrs	r2, r3, #9
    932a:	cmp	r2, #4
    932c:	bls.n	93ec <_malloc_r+0x434>
    932e:	cmp	r2, #20
    9330:	bhi.w	949a <_malloc_r+0x4e2>
    9334:	add.w	r1, r2, #92	; 0x5c
    9338:	lsls	r1, r1, #1
    933a:	adds	r2, #91	; 0x5b
    933c:	add.w	ip, r7, r1, lsl #2
    9340:	ldr.w	r1, [r7, r1, lsl #2]
    9344:	ldr.w	r8, [pc, #476]	; 9524 <_malloc_r+0x56c>
    9348:	sub.w	ip, ip, #8
    934c:	cmp	ip, r1
    934e:	beq.w	9462 <_malloc_r+0x4aa>
    9352:	ldr	r2, [r1, #4]
    9354:	bic.w	r2, r2, #3
    9358:	cmp	r3, r2
    935a:	bcs.n	9362 <_malloc_r+0x3aa>
    935c:	ldr	r1, [r1, #8]
    935e:	cmp	ip, r1
    9360:	bne.n	9352 <_malloc_r+0x39a>
    9362:	ldr.w	ip, [r1, #12]
    9366:	ldr	r2, [r7, #4]
    9368:	str.w	ip, [r4, #12]
    936c:	str	r1, [r4, #8]
    936e:	str.w	r4, [ip, #8]
    9372:	str	r4, [r1, #12]
    9374:	b.n	9088 <_malloc_r+0xd0>
    9376:	adds	r3, r4, r5
    9378:	orr.w	r7, r2, #1
    937c:	orr.w	r5, r5, #1
    9380:	str	r5, [r4, #4]
    9382:	mov	r0, r6
    9384:	str	r3, [r1, #20]
    9386:	str	r3, [r1, #16]
    9388:	str.w	lr, [r3, #12]
    938c:	str.w	lr, [r3, #8]
    9390:	str	r7, [r3, #4]
    9392:	str	r2, [r3, r2]
    9394:	adds	r4, #8
    9396:	bl	97cc <__malloc_unlock>
    939a:	b.n	9148 <_malloc_r+0x190>
    939c:	ldr	r2, [r1, #4]
    939e:	b.n	9088 <_malloc_r+0xd0>
    93a0:	add.w	r8, r8, #1
    93a4:	tst.w	r8, #3
    93a8:	add.w	ip, ip, #8
    93ac:	bne.w	90ae <_malloc_r+0xf6>
    93b0:	b.n	9414 <_malloc_r+0x45c>
    93b2:	ldr	r4, [r3, #12]
    93b4:	cmp	r3, r4
    93b6:	it	eq
    93b8:	addeq	r0, #2
    93ba:	beq.w	9028 <_malloc_r+0x70>
    93be:	b.n	9128 <_malloc_r+0x170>
    93c0:	add	r3, r1
    93c2:	mov	r4, r1
    93c4:	ldr	r2, [r3, #4]
    93c6:	ldr	r1, [r1, #12]
    93c8:	ldr.w	r5, [r4, #8]!
    93cc:	orr.w	r2, r2, #1
    93d0:	str	r2, [r3, #4]
    93d2:	mov	r0, r6
    93d4:	str	r1, [r5, #12]
    93d6:	str	r5, [r1, #8]
    93d8:	bl	97cc <__malloc_unlock>
    93dc:	b.n	9148 <_malloc_r+0x190>
    93de:	add.w	lr, r3, #92	; 0x5c
    93e2:	add.w	r0, r3, #91	; 0x5b
    93e6:	mov.w	r3, lr, lsl #1
    93ea:	b.n	8ffc <_malloc_r+0x44>
    93ec:	lsrs	r2, r3, #6
    93ee:	add.w	r1, r2, #57	; 0x39
    93f2:	lsls	r1, r1, #1
    93f4:	adds	r2, #56	; 0x38
    93f6:	b.n	933c <_malloc_r+0x384>
    93f8:	cmp	r4, r7
    93fa:	ldr	r3, [pc, #296]	; (9524 <_malloc_r+0x56c>)
    93fc:	beq.w	9200 <_malloc_r+0x248>
    9400:	ldr	r4, [r3, #8]
    9402:	ldr	r2, [r4, #4]
    9404:	bic.w	r2, r2, #3
    9408:	b.n	92c0 <_malloc_r+0x308>
    940a:	ldr.w	r3, [r9], #-8
    940e:	cmp	r9, r3
    9410:	bne.w	9518 <_malloc_r+0x560>
    9414:	tst.w	r0, #3
    9418:	add.w	r0, r0, #4294967295
    941c:	bne.n	940a <_malloc_r+0x452>
    941e:	ldr	r3, [r7, #4]
    9420:	bic.w	r3, r3, r4
    9424:	str	r3, [r7, #4]
    9426:	lsls	r4, r4, #1
    9428:	cmp	r4, r3
    942a:	bhi.w	91a8 <_malloc_r+0x1f0>
    942e:	cmp	r4, #0
    9430:	beq.w	91a8 <_malloc_r+0x1f0>
    9434:	tst	r4, r3
    9436:	mov	r0, r8
    9438:	bne.w	90a6 <_malloc_r+0xee>
    943c:	lsls	r4, r4, #1
    943e:	tst	r4, r3
    9440:	add.w	r0, r0, #4
    9444:	beq.n	943c <_malloc_r+0x484>
    9446:	b.n	90a6 <_malloc_r+0xee>
    9448:	cmp.w	r3, #340	; 0x154
    944c:	bhi.n	9480 <_malloc_r+0x4c8>
    944e:	lsrs	r0, r5, #15
    9450:	add.w	lr, r0, #120	; 0x78
    9454:	mov.w	r3, lr, lsl #1
    9458:	adds	r0, #119	; 0x77
    945a:	b.n	8ffc <_malloc_r+0x44>
    945c:	mov.w	r1, #4096	; 0x1000
    9460:	b.n	923a <_malloc_r+0x282>
    9462:	movs	r1, #1
    9464:	ldr.w	r3, [r8, #4]
    9468:	asrs	r2, r2, #2
    946a:	lsl.w	r2, r1, r2
    946e:	orrs	r2, r3
    9470:	str.w	r2, [r8, #4]
    9474:	mov	r1, ip
    9476:	b.n	9368 <_malloc_r+0x3b0>
    9478:	movs	r3, #1
    947a:	str.w	r3, [fp, #4]
    947e:	b.n	92cc <_malloc_r+0x314>
    9480:	movw	r2, #1364	; 0x554
    9484:	cmp	r3, r2
    9486:	bhi.n	94ca <_malloc_r+0x512>
    9488:	lsrs	r0, r5, #18
    948a:	add.w	lr, r0, #125	; 0x7d
    948e:	mov.w	r3, lr, lsl #1
    9492:	adds	r0, #124	; 0x7c
    9494:	b.n	8ffc <_malloc_r+0x44>
    9496:	adds	r2, #16
    9498:	b.n	91e4 <_malloc_r+0x22c>
    949a:	cmp	r2, #84	; 0x54
    949c:	bhi.n	94ec <_malloc_r+0x534>
    949e:	lsrs	r2, r3, #12
    94a0:	add.w	r1, r2, #111	; 0x6f
    94a4:	lsls	r1, r1, #1
    94a6:	adds	r2, #110	; 0x6e
    94a8:	b.n	933c <_malloc_r+0x384>
    94aa:	ldr	r4, [r7, #8]
    94ac:	ldr	r2, [r4, #4]
    94ae:	bic.w	r2, r2, #3
    94b2:	b.n	92c0 <_malloc_r+0x308>
    94b4:	ubfx	r0, sl, #0, #12
    94b8:	cmp	r0, #0
    94ba:	bne.w	920e <_malloc_r+0x256>
    94be:	add	r2, r8
    94c0:	ldr	r3, [r7, #8]
    94c2:	orr.w	r2, r2, #1
    94c6:	str	r2, [r3, #4]
    94c8:	b.n	92a4 <_malloc_r+0x2ec>
    94ca:	movs	r3, #254	; 0xfe
    94cc:	mov.w	lr, #127	; 0x7f
    94d0:	movs	r0, #126	; 0x7e
    94d2:	b.n	8ffc <_malloc_r+0x44>
    94d4:	movs	r2, #1
    94d6:	mov.w	r9, #0
    94da:	b.n	9260 <_malloc_r+0x2a8>
    94dc:	add.w	r1, r4, #8
    94e0:	mov	r0, r6
    94e2:	bl	e268 <_free_r>
    94e6:	ldr.w	r1, [r9]
    94ea:	b.n	92a4 <_malloc_r+0x2ec>
    94ec:	cmp.w	r2, #340	; 0x154
    94f0:	bhi.n	94fe <_malloc_r+0x546>
    94f2:	lsrs	r2, r3, #15
    94f4:	add.w	r1, r2, #120	; 0x78
    94f8:	lsls	r1, r1, #1
    94fa:	adds	r2, #119	; 0x77
    94fc:	b.n	933c <_malloc_r+0x384>
    94fe:	movw	r1, #1364	; 0x554
    9502:	cmp	r2, r1
    9504:	bhi.n	9512 <_malloc_r+0x55a>
    9506:	lsrs	r2, r3, #18
    9508:	add.w	r1, r2, #125	; 0x7d
    950c:	lsls	r1, r1, #1
    950e:	adds	r2, #124	; 0x7c
    9510:	b.n	933c <_malloc_r+0x384>
    9512:	movs	r1, #254	; 0xfe
    9514:	movs	r2, #126	; 0x7e
    9516:	b.n	933c <_malloc_r+0x384>
    9518:	ldr	r3, [r7, #4]
    951a:	b.n	9426 <_malloc_r+0x46e>
    951c:	lsrs	r0, r5, #3
    951e:	adds	r3, r0, #1
    9520:	lsls	r3, r3, #1
    9522:	b.n	9116 <_malloc_r+0x15e>
    9524:	.word	0x20001d4c

00009528 <__ascii_mbtowc>:
    9528:	sub	sp, #8
    952a:	cbz	r1, 9540 <__ascii_mbtowc+0x18>
    952c:	cbz	r2, 9546 <__ascii_mbtowc+0x1e>
    952e:	cbz	r3, 954c <__ascii_mbtowc+0x24>
    9530:	ldrb	r3, [r2, #0]
    9532:	str	r3, [r1, #0]
    9534:	ldrb	r2, [r2, #0]
    9536:	adds	r0, r2, #0
    9538:	it	ne
    953a:	movne	r0, #1
    953c:	add	sp, #8
    953e:	bx	lr
    9540:	add	r1, sp, #4
    9542:	cmp	r2, #0
    9544:	bne.n	952e <__ascii_mbtowc+0x6>
    9546:	mov	r0, r2
    9548:	add	sp, #8
    954a:	bx	lr
    954c:	mvn.w	r0, #1
    9550:	b.n	953c <__ascii_mbtowc+0x14>
    9552:	nop
	...

00009560 <memchr>:
    9560:	and.w	r1, r1, #255	; 0xff
    9564:	cmp	r2, #16
    9566:	blt.n	95c0 <memchr+0x60>
    9568:	tst.w	r0, #7
    956c:	beq.n	9580 <memchr+0x20>
    956e:	ldrb.w	r3, [r0], #1
    9572:	subs	r2, #1
    9574:	cmp	r3, r1
    9576:	beq.n	95d4 <memchr+0x74>
    9578:	tst.w	r0, #7
    957c:	cbz	r2, 95d0 <memchr+0x70>
    957e:	bne.n	956e <memchr+0xe>
    9580:	push	{r4, r5, r6, r7}
    9582:	orr.w	r1, r1, r1, lsl #8
    9586:	orr.w	r1, r1, r1, lsl #16
    958a:	bic.w	r4, r2, #7
    958e:	mvns.w	r7, #0
    9592:	movs	r3, #0
    9594:	ldrd	r5, r6, [r0], #8
    9598:	subs	r4, #8
    959a:	eor.w	r5, r5, r1
    959e:	eor.w	r6, r6, r1
    95a2:	uadd8	r5, r5, r7
    95a6:	sel	r5, r3, r7
    95aa:	uadd8	r6, r6, r7
    95ae:	sel	r6, r5, r7
    95b2:	cbnz	r6, 95d8 <memchr+0x78>
    95b4:	bne.n	9594 <memchr+0x34>
    95b6:	pop	{r4, r5, r6, r7}
    95b8:	and.w	r1, r1, #255	; 0xff
    95bc:	and.w	r2, r2, #7
    95c0:	cbz	r2, 95d0 <memchr+0x70>
    95c2:	ldrb.w	r3, [r0], #1
    95c6:	subs	r2, #1
    95c8:	eor.w	r3, r3, r1
    95cc:	cbz	r3, 95d4 <memchr+0x74>
    95ce:	bne.n	95c2 <memchr+0x62>
    95d0:	movs	r0, #0
    95d2:	bx	lr
    95d4:	subs	r0, #1
    95d6:	bx	lr
    95d8:	cmp	r5, #0
    95da:	itte	eq
    95dc:	moveq	r5, r6
    95de:	subeq	r0, #3
    95e0:	subne	r0, #7
    95e2:	tst.w	r5, #1
    95e6:	bne.n	95f8 <memchr+0x98>
    95e8:	adds	r0, #1
    95ea:	tst.w	r5, #256	; 0x100
    95ee:	ittt	eq
    95f0:	addeq	r0, #1
    95f2:	tsteq.w	r5, #98304	; 0x18000
    95f6:	addeq	r0, #1
    95f8:	pop	{r4, r5, r6, r7}
    95fa:	subs	r0, #1
    95fc:	bx	lr
    95fe:	nop

00009600 <memcmp>:
    9600:	cmp	r2, #3
    9602:	push	{r4, r5, r6}
    9604:	bls.n	9654 <memcmp+0x54>
    9606:	orr.w	r3, r0, r1
    960a:	lsls	r3, r3, #30
    960c:	beq.n	9632 <memcmp+0x32>
    960e:	ldrb	r4, [r0, #0]
    9610:	ldrb	r5, [r1, #0]
    9612:	cmp	r4, r5
    9614:	bne.n	965c <memcmp+0x5c>
    9616:	add	r2, r0
    9618:	adds	r3, r0, #1
    961a:	b.n	9628 <memcmp+0x28>
    961c:	ldrb.w	r4, [r3], #1
    9620:	ldrb.w	r5, [r1, #1]!
    9624:	cmp	r4, r5
    9626:	bne.n	965c <memcmp+0x5c>
    9628:	cmp	r3, r2
    962a:	bne.n	961c <memcmp+0x1c>
    962c:	movs	r0, #0
    962e:	pop	{r4, r5, r6}
    9630:	bx	lr
    9632:	mov	r4, r1
    9634:	mov	r3, r0
    9636:	ldr	r6, [r3, #0]
    9638:	ldr	r5, [r4, #0]
    963a:	cmp	r6, r5
    963c:	mov	r0, r3
    963e:	mov	r1, r4
    9640:	add.w	r3, r3, #4
    9644:	add.w	r4, r4, #4
    9648:	bne.n	960e <memcmp+0xe>
    964a:	subs	r2, #4
    964c:	cmp	r2, #3
    964e:	mov	r0, r3
    9650:	mov	r1, r4
    9652:	bhi.n	9636 <memcmp+0x36>
    9654:	cmp	r2, #0
    9656:	bne.n	960e <memcmp+0xe>
    9658:	mov	r0, r2
    965a:	b.n	962e <memcmp+0x2e>
    965c:	subs	r0, r4, r5
    965e:	pop	{r4, r5, r6}
    9660:	bx	lr
    9662:	nop

00009664 <memmove>:
    9664:	cmp	r0, r1
    9666:	push	{r4, r5, r6, r7, lr}
    9668:	bls.n	9686 <memmove+0x22>
    966a:	adds	r3, r1, r2
    966c:	cmp	r0, r3
    966e:	bcs.n	9686 <memmove+0x22>
    9670:	adds	r1, r0, r2
    9672:	cmp	r2, #0
    9674:	beq.n	971a <memmove+0xb6>
    9676:	subs	r2, r3, r2
    9678:	ldrb.w	r4, [r3, #-1]!
    967c:	strb.w	r4, [r1, #-1]!
    9680:	cmp	r3, r2
    9682:	bne.n	9678 <memmove+0x14>
    9684:	pop	{r4, r5, r6, r7, pc}
    9686:	cmp	r2, #15
    9688:	bls.n	971c <memmove+0xb8>
    968a:	orr.w	r3, r1, r0
    968e:	lsls	r3, r3, #30
    9690:	bne.n	9720 <memmove+0xbc>
    9692:	add.w	r4, r0, #16
    9696:	add.w	r3, r1, #16
    969a:	mov	r5, r2
    969c:	ldr.w	r6, [r3, #-16]
    96a0:	str.w	r6, [r4, #-16]
    96a4:	ldr.w	r6, [r3, #-12]
    96a8:	str.w	r6, [r4, #-12]
    96ac:	ldr.w	r6, [r3, #-8]
    96b0:	str.w	r6, [r4, #-8]
    96b4:	subs	r5, #16
    96b6:	ldr.w	r6, [r3, #-4]
    96ba:	str.w	r6, [r4, #-4]
    96be:	cmp	r5, #15
    96c0:	add.w	r3, r3, #16
    96c4:	add.w	r4, r4, #16
    96c8:	bhi.n	969c <memmove+0x38>
    96ca:	sub.w	r3, r2, #16
    96ce:	bic.w	r3, r3, #15
    96d2:	and.w	lr, r2, #15
    96d6:	adds	r3, #16
    96d8:	cmp.w	lr, #3
    96dc:	add	r1, r3
    96de:	add	r3, r0
    96e0:	bls.n	9726 <memmove+0xc2>
    96e2:	subs	r6, r3, #4
    96e4:	mov	r5, r1
    96e6:	mov	r4, lr
    96e8:	subs	r4, #4
    96ea:	ldr.w	r7, [r5], #4
    96ee:	str.w	r7, [r6, #4]!
    96f2:	cmp	r4, #3
    96f4:	bhi.n	96e8 <memmove+0x84>
    96f6:	sub.w	r4, lr, #4
    96fa:	bic.w	r4, r4, #3
    96fe:	adds	r4, #4
    9700:	add	r3, r4
    9702:	add	r1, r4
    9704:	and.w	r2, r2, #3
    9708:	cbz	r2, 9724 <memmove+0xc0>
    970a:	subs	r3, #1
    970c:	add	r2, r1
    970e:	ldrb.w	r4, [r1], #1
    9712:	strb.w	r4, [r3, #1]!
    9716:	cmp	r2, r1
    9718:	bne.n	970e <memmove+0xaa>
    971a:	pop	{r4, r5, r6, r7, pc}
    971c:	mov	r3, r0
    971e:	b.n	9708 <memmove+0xa4>
    9720:	mov	r3, r0
    9722:	b.n	970a <memmove+0xa6>
    9724:	pop	{r4, r5, r6, r7, pc}
    9726:	mov	r2, lr
    9728:	b.n	9708 <memmove+0xa4>
    972a:	nop

0000972c <memset>:
    972c:	push	{r4, r5, r6}
    972e:	lsls	r4, r0, #30
    9730:	beq.n	97c0 <memset+0x94>
    9732:	subs	r4, r2, #1
    9734:	cmp	r2, #0
    9736:	beq.n	97bc <memset+0x90>
    9738:	uxtb	r5, r1
    973a:	mov	r3, r0
    973c:	b.n	9744 <memset+0x18>
    973e:	subs	r2, r4, #1
    9740:	cbz	r4, 97bc <memset+0x90>
    9742:	mov	r4, r2
    9744:	strb.w	r5, [r3], #1
    9748:	lsls	r2, r3, #30
    974a:	bne.n	973e <memset+0x12>
    974c:	cmp	r4, #3
    974e:	bls.n	97ae <memset+0x82>
    9750:	uxtb	r5, r1
    9752:	orr.w	r5, r5, r5, lsl #8
    9756:	cmp	r4, #15
    9758:	orr.w	r5, r5, r5, lsl #16
    975c:	bls.n	9792 <memset+0x66>
    975e:	add.w	r2, r3, #16
    9762:	mov	r6, r4
    9764:	subs	r6, #16
    9766:	cmp	r6, #15
    9768:	str.w	r5, [r2, #-16]
    976c:	str.w	r5, [r2, #-12]
    9770:	str.w	r5, [r2, #-8]
    9774:	str.w	r5, [r2, #-4]
    9778:	add.w	r2, r2, #16
    977c:	bhi.n	9764 <memset+0x38>
    977e:	sub.w	r2, r4, #16
    9782:	bic.w	r2, r2, #15
    9786:	and.w	r4, r4, #15
    978a:	adds	r2, #16
    978c:	cmp	r4, #3
    978e:	add	r3, r2
    9790:	bls.n	97ae <memset+0x82>
    9792:	mov	r6, r3
    9794:	mov	r2, r4
    9796:	subs	r2, #4
    9798:	cmp	r2, #3
    979a:	str.w	r5, [r6], #4
    979e:	bhi.n	9796 <memset+0x6a>
    97a0:	subs	r2, r4, #4
    97a2:	bic.w	r2, r2, #3
    97a6:	adds	r2, #4
    97a8:	add	r3, r2
    97aa:	and.w	r4, r4, #3
    97ae:	cbz	r4, 97bc <memset+0x90>
    97b0:	uxtb	r1, r1
    97b2:	add	r4, r3
    97b4:	strb.w	r1, [r3], #1
    97b8:	cmp	r3, r4
    97ba:	bne.n	97b4 <memset+0x88>
    97bc:	pop	{r4, r5, r6}
    97be:	bx	lr
    97c0:	mov	r4, r2
    97c2:	mov	r3, r0
    97c4:	b.n	974c <memset+0x20>
    97c6:	nop

000097c8 <__malloc_lock>:
    97c8:	bx	lr
    97ca:	nop

000097cc <__malloc_unlock>:
    97cc:	bx	lr
    97ce:	nop

000097d0 <_realloc_r>:
    97d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97d4:	mov	r7, r2
    97d6:	sub	sp, #12
    97d8:	cmp	r1, #0
    97da:	beq.w	9960 <_realloc_r+0x190>
    97de:	mov	r6, r1
    97e0:	mov	r9, r0
    97e2:	add.w	r5, r7, #11
    97e6:	bl	97c8 <__malloc_lock>
    97ea:	ldr.w	lr, [r6, #-4]
    97ee:	cmp	r5, #22
    97f0:	bic.w	r4, lr, #3
    97f4:	sub.w	r8, r6, #8
    97f8:	bhi.n	987c <_realloc_r+0xac>
    97fa:	movs	r2, #16
    97fc:	mov	r5, r2
    97fe:	cmp	r7, r5
    9800:	bhi.n	9886 <_realloc_r+0xb6>
    9802:	cmp	r4, r2
    9804:	bge.n	98f2 <_realloc_r+0x122>
    9806:	ldr	r3, [pc, #804]	; (9b2c <_realloc_r+0x35c>)
    9808:	ldr	r1, [r3, #8]
    980a:	add.w	r0, r8, r4
    980e:	cmp	r0, r1
    9810:	ldr	r1, [r0, #4]
    9812:	beq.w	99c8 <_realloc_r+0x1f8>
    9816:	bic.w	r3, r1, #1
    981a:	add	r3, r0
    981c:	ldr	r3, [r3, #4]
    981e:	lsls	r3, r3, #31
    9820:	bpl.n	991e <_realloc_r+0x14e>
    9822:	tst.w	lr, #1
    9826:	beq.n	9894 <_realloc_r+0xc4>
    9828:	mov	r1, r7
    982a:	mov	r0, r9
    982c:	bl	8fb8 <_malloc_r>
    9830:	mov	r7, r0
    9832:	cbz	r0, 986e <_realloc_r+0x9e>
    9834:	ldr.w	r3, [r6, #-4]
    9838:	bic.w	r3, r3, #1
    983c:	add	r3, r8
    983e:	sub.w	r2, r0, #8
    9842:	cmp	r2, r3
    9844:	beq.w	9ad0 <_realloc_r+0x300>
    9848:	subs	r2, r4, #4
    984a:	cmp	r2, #36	; 0x24
    984c:	bhi.w	9ab2 <_realloc_r+0x2e2>
    9850:	cmp	r2, #19
    9852:	bhi.w	9a5e <_realloc_r+0x28e>
    9856:	mov	r3, r0
    9858:	mov	r2, r6
    985a:	ldr	r1, [r2, #0]
    985c:	str	r1, [r3, #0]
    985e:	ldr	r1, [r2, #4]
    9860:	str	r1, [r3, #4]
    9862:	ldr	r2, [r2, #8]
    9864:	str	r2, [r3, #8]
    9866:	mov	r1, r6
    9868:	mov	r0, r9
    986a:	bl	e268 <_free_r>
    986e:	mov	r0, r9
    9870:	bl	97cc <__malloc_unlock>
    9874:	mov	r0, r7
    9876:	add	sp, #12
    9878:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    987c:	bic.w	r5, r5, #7
    9880:	cmp	r5, #0
    9882:	mov	r2, r5
    9884:	bge.n	97fe <_realloc_r+0x2e>
    9886:	movs	r3, #12
    9888:	movs	r0, #0
    988a:	str.w	r3, [r9]
    988e:	add	sp, #12
    9890:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9894:	ldr.w	r3, [r6, #-8]
    9898:	rsb	sl, r3, r8
    989c:	ldr.w	r3, [sl, #4]
    98a0:	bic.w	ip, r3, #3
    98a4:	add.w	r3, r4, ip
    98a8:	cmp	r3, r2
    98aa:	blt.n	9828 <_realloc_r+0x58>
    98ac:	mov	r7, sl
    98ae:	ldr.w	r1, [sl, #12]
    98b2:	ldr.w	r0, [r7, #8]!
    98b6:	subs	r2, r4, #4
    98b8:	cmp	r2, #36	; 0x24
    98ba:	str	r1, [r0, #12]
    98bc:	str	r0, [r1, #8]
    98be:	bhi.w	9af0 <_realloc_r+0x320>
    98c2:	cmp	r2, #19
    98c4:	bls.w	9aec <_realloc_r+0x31c>
    98c8:	ldr	r1, [r6, #0]
    98ca:	str.w	r1, [sl, #8]
    98ce:	ldr	r1, [r6, #4]
    98d0:	str.w	r1, [sl, #12]
    98d4:	cmp	r2, #27
    98d6:	bhi.w	9b30 <_realloc_r+0x360>
    98da:	adds	r6, #8
    98dc:	add.w	r2, sl, #16
    98e0:	ldr	r1, [r6, #0]
    98e2:	str	r1, [r2, #0]
    98e4:	ldr	r1, [r6, #4]
    98e6:	str	r1, [r2, #4]
    98e8:	ldr	r1, [r6, #8]
    98ea:	str	r1, [r2, #8]
    98ec:	mov	r6, r7
    98ee:	mov	r4, r3
    98f0:	mov	r8, sl
    98f2:	subs	r3, r4, r5
    98f4:	cmp	r3, #15
    98f6:	bhi.n	9934 <_realloc_r+0x164>
    98f8:	ldr.w	r3, [r8, #4]
    98fc:	and.w	r3, r3, #1
    9900:	orrs	r3, r4
    9902:	add	r4, r8
    9904:	str.w	r3, [r8, #4]
    9908:	ldr	r3, [r4, #4]
    990a:	orr.w	r3, r3, #1
    990e:	str	r3, [r4, #4]
    9910:	mov	r0, r9
    9912:	bl	97cc <__malloc_unlock>
    9916:	mov	r0, r6
    9918:	add	sp, #12
    991a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    991e:	bic.w	r1, r1, #3
    9922:	add	r1, r4
    9924:	cmp	r1, r2
    9926:	blt.n	996c <_realloc_r+0x19c>
    9928:	ldr	r3, [r0, #12]
    992a:	ldr	r2, [r0, #8]
    992c:	mov	r4, r1
    992e:	str	r3, [r2, #12]
    9930:	str	r2, [r3, #8]
    9932:	b.n	98f2 <_realloc_r+0x122>
    9934:	ldr.w	r2, [r8, #4]
    9938:	add.w	r1, r8, r5
    993c:	and.w	r2, r2, #1
    9940:	orrs	r5, r2
    9942:	orr.w	r2, r3, #1
    9946:	add	r3, r1
    9948:	str.w	r5, [r8, #4]
    994c:	str	r2, [r1, #4]
    994e:	ldr	r2, [r3, #4]
    9950:	orr.w	r2, r2, #1
    9954:	adds	r1, #8
    9956:	str	r2, [r3, #4]
    9958:	mov	r0, r9
    995a:	bl	e268 <_free_r>
    995e:	b.n	9910 <_realloc_r+0x140>
    9960:	mov	r1, r2
    9962:	add	sp, #12
    9964:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9968:	b.w	8fb8 <_malloc_r>
    996c:	tst.w	lr, #1
    9970:	bne.w	9828 <_realloc_r+0x58>
    9974:	ldr.w	r3, [r6, #-8]
    9978:	rsb	sl, r3, r8
    997c:	ldr.w	r3, [sl, #4]
    9980:	bic.w	ip, r3, #3
    9984:	add.w	lr, r1, ip
    9988:	cmp	lr, r2
    998a:	blt.n	98a4 <_realloc_r+0xd4>
    998c:	ldr	r3, [r0, #12]
    998e:	ldr	r2, [r0, #8]
    9990:	mov	r7, sl
    9992:	str	r3, [r2, #12]
    9994:	str	r2, [r3, #8]
    9996:	ldr.w	r1, [r7, #8]!
    999a:	ldr.w	r3, [sl, #12]
    999e:	str	r3, [r1, #12]
    99a0:	subs	r2, r4, #4
    99a2:	cmp	r2, #36	; 0x24
    99a4:	str	r1, [r3, #8]
    99a6:	bhi.w	9adc <_realloc_r+0x30c>
    99aa:	cmp	r2, #19
    99ac:	bls.n	9a74 <_realloc_r+0x2a4>
    99ae:	ldr	r3, [r6, #0]
    99b0:	str.w	r3, [sl, #8]
    99b4:	ldr	r3, [r6, #4]
    99b6:	str.w	r3, [sl, #12]
    99ba:	cmp	r2, #27
    99bc:	bhi.w	9b00 <_realloc_r+0x330>
    99c0:	adds	r6, #8
    99c2:	add.w	r3, sl, #16
    99c6:	b.n	9a76 <_realloc_r+0x2a6>
    99c8:	bic.w	fp, r1, #3
    99cc:	add	fp, r4
    99ce:	add.w	r0, r5, #16
    99d2:	cmp	fp, r0
    99d4:	bge.n	9a8a <_realloc_r+0x2ba>
    99d6:	tst.w	lr, #1
    99da:	bne.w	9828 <_realloc_r+0x58>
    99de:	ldr.w	r1, [r6, #-8]
    99e2:	rsb	sl, r1, r8
    99e6:	ldr.w	r1, [sl, #4]
    99ea:	bic.w	ip, r1, #3
    99ee:	add	fp, ip
    99f0:	cmp	r0, fp
    99f2:	bgt.w	98a4 <_realloc_r+0xd4>
    99f6:	mov	r7, sl
    99f8:	ldr.w	r1, [sl, #12]
    99fc:	ldr.w	r0, [r7, #8]!
    9a00:	subs	r2, r4, #4
    9a02:	cmp	r2, #36	; 0x24
    9a04:	str	r1, [r0, #12]
    9a06:	str	r0, [r1, #8]
    9a08:	bhi.w	9b74 <_realloc_r+0x3a4>
    9a0c:	cmp	r2, #19
    9a0e:	bls.w	9b5c <_realloc_r+0x38c>
    9a12:	ldr	r1, [r6, #0]
    9a14:	str.w	r1, [sl, #8]
    9a18:	ldr	r1, [r6, #4]
    9a1a:	str.w	r1, [sl, #12]
    9a1e:	cmp	r2, #27
    9a20:	bhi.w	9b82 <_realloc_r+0x3b2>
    9a24:	adds	r6, #8
    9a26:	add.w	r2, sl, #16
    9a2a:	ldr	r1, [r6, #0]
    9a2c:	str	r1, [r2, #0]
    9a2e:	ldr	r1, [r6, #4]
    9a30:	str	r1, [r2, #4]
    9a32:	ldr	r1, [r6, #8]
    9a34:	str	r1, [r2, #8]
    9a36:	add.w	r1, sl, r5
    9a3a:	rsb	r2, r5, fp
    9a3e:	orr.w	r2, r2, #1
    9a42:	str	r1, [r3, #8]
    9a44:	str	r2, [r1, #4]
    9a46:	ldr.w	r3, [sl, #4]
    9a4a:	and.w	r3, r3, #1
    9a4e:	orrs	r5, r3
    9a50:	mov	r0, r9
    9a52:	str.w	r5, [sl, #4]
    9a56:	bl	97cc <__malloc_unlock>
    9a5a:	mov	r0, r7
    9a5c:	b.n	9918 <_realloc_r+0x148>
    9a5e:	ldr	r3, [r6, #0]
    9a60:	str	r3, [r0, #0]
    9a62:	ldr	r3, [r6, #4]
    9a64:	str	r3, [r0, #4]
    9a66:	cmp	r2, #27
    9a68:	bhi.n	9aba <_realloc_r+0x2ea>
    9a6a:	add.w	r3, r0, #8
    9a6e:	add.w	r2, r6, #8
    9a72:	b.n	985a <_realloc_r+0x8a>
    9a74:	mov	r3, r7
    9a76:	ldr	r2, [r6, #0]
    9a78:	str	r2, [r3, #0]
    9a7a:	ldr	r2, [r6, #4]
    9a7c:	str	r2, [r3, #4]
    9a7e:	ldr	r2, [r6, #8]
    9a80:	str	r2, [r3, #8]
    9a82:	mov	r6, r7
    9a84:	mov	r4, lr
    9a86:	mov	r8, sl
    9a88:	b.n	98f2 <_realloc_r+0x122>
    9a8a:	add.w	r1, r8, r5
    9a8e:	rsb	fp, r5, fp
    9a92:	orr.w	r2, fp, #1
    9a96:	str	r1, [r3, #8]
    9a98:	str	r2, [r1, #4]
    9a9a:	ldr.w	r3, [r6, #-4]
    9a9e:	and.w	r3, r3, #1
    9aa2:	orrs	r5, r3
    9aa4:	mov	r0, r9
    9aa6:	str.w	r5, [r6, #-4]
    9aaa:	bl	97cc <__malloc_unlock>
    9aae:	mov	r0, r6
    9ab0:	b.n	9918 <_realloc_r+0x148>
    9ab2:	mov	r1, r6
    9ab4:	bl	9664 <memmove>
    9ab8:	b.n	9866 <_realloc_r+0x96>
    9aba:	ldr	r3, [r6, #8]
    9abc:	str	r3, [r0, #8]
    9abe:	ldr	r3, [r6, #12]
    9ac0:	str	r3, [r0, #12]
    9ac2:	cmp	r2, #36	; 0x24
    9ac4:	beq.n	9b18 <_realloc_r+0x348>
    9ac6:	add.w	r3, r0, #16
    9aca:	add.w	r2, r6, #16
    9ace:	b.n	985a <_realloc_r+0x8a>
    9ad0:	ldr.w	r3, [r0, #-4]
    9ad4:	bic.w	r3, r3, #3
    9ad8:	add	r4, r3
    9ada:	b.n	98f2 <_realloc_r+0x122>
    9adc:	mov	r1, r6
    9ade:	mov	r0, r7
    9ae0:	mov	r4, lr
    9ae2:	mov	r8, sl
    9ae4:	bl	9664 <memmove>
    9ae8:	mov	r6, r7
    9aea:	b.n	98f2 <_realloc_r+0x122>
    9aec:	mov	r2, r7
    9aee:	b.n	98e0 <_realloc_r+0x110>
    9af0:	mov	r1, r6
    9af2:	mov	r0, r7
    9af4:	mov	r4, r3
    9af6:	mov	r8, sl
    9af8:	bl	9664 <memmove>
    9afc:	mov	r6, r7
    9afe:	b.n	98f2 <_realloc_r+0x122>
    9b00:	ldr	r3, [r6, #8]
    9b02:	str.w	r3, [sl, #16]
    9b06:	ldr	r3, [r6, #12]
    9b08:	str.w	r3, [sl, #20]
    9b0c:	cmp	r2, #36	; 0x24
    9b0e:	beq.n	9b48 <_realloc_r+0x378>
    9b10:	adds	r6, #16
    9b12:	add.w	r3, sl, #24
    9b16:	b.n	9a76 <_realloc_r+0x2a6>
    9b18:	ldr	r3, [r6, #16]
    9b1a:	str	r3, [r0, #16]
    9b1c:	ldr	r3, [r6, #20]
    9b1e:	str	r3, [r0, #20]
    9b20:	add.w	r2, r6, #24
    9b24:	add.w	r3, r0, #24
    9b28:	b.n	985a <_realloc_r+0x8a>
    9b2a:	nop
    9b2c:	.word	0x20001d4c
    9b30:	ldr	r1, [r6, #8]
    9b32:	str.w	r1, [sl, #16]
    9b36:	ldr	r1, [r6, #12]
    9b38:	str.w	r1, [sl, #20]
    9b3c:	cmp	r2, #36	; 0x24
    9b3e:	beq.n	9b60 <_realloc_r+0x390>
    9b40:	adds	r6, #16
    9b42:	add.w	r2, sl, #24
    9b46:	b.n	98e0 <_realloc_r+0x110>
    9b48:	ldr	r3, [r6, #16]
    9b4a:	str.w	r3, [sl, #24]
    9b4e:	ldr	r3, [r6, #20]
    9b50:	str.w	r3, [sl, #28]
    9b54:	adds	r6, #24
    9b56:	add.w	r3, sl, #32
    9b5a:	b.n	9a76 <_realloc_r+0x2a6>
    9b5c:	mov	r2, r7
    9b5e:	b.n	9a2a <_realloc_r+0x25a>
    9b60:	ldr	r2, [r6, #16]
    9b62:	str.w	r2, [sl, #24]
    9b66:	ldr	r2, [r6, #20]
    9b68:	str.w	r2, [sl, #28]
    9b6c:	adds	r6, #24
    9b6e:	add.w	r2, sl, #32
    9b72:	b.n	98e0 <_realloc_r+0x110>
    9b74:	mov	r1, r6
    9b76:	mov	r0, r7
    9b78:	str	r3, [sp, #4]
    9b7a:	bl	9664 <memmove>
    9b7e:	ldr	r3, [sp, #4]
    9b80:	b.n	9a36 <_realloc_r+0x266>
    9b82:	ldr	r1, [r6, #8]
    9b84:	str.w	r1, [sl, #16]
    9b88:	ldr	r1, [r6, #12]
    9b8a:	str.w	r1, [sl, #20]
    9b8e:	cmp	r2, #36	; 0x24
    9b90:	beq.n	9b9a <_realloc_r+0x3ca>
    9b92:	adds	r6, #16
    9b94:	add.w	r2, sl, #24
    9b98:	b.n	9a2a <_realloc_r+0x25a>
    9b9a:	ldr	r2, [r6, #16]
    9b9c:	str.w	r2, [sl, #24]
    9ba0:	ldr	r2, [r6, #20]
    9ba2:	str.w	r2, [sl, #28]
    9ba6:	adds	r6, #24
    9ba8:	add.w	r2, sl, #32
    9bac:	b.n	9a2a <_realloc_r+0x25a>
    9bae:	nop

00009bb0 <_sbrk_r>:
    9bb0:	push	{r3, r4, r5, lr}
    9bb2:	ldr	r4, [pc, #28]	; (9bd0 <_sbrk_r+0x20>)
    9bb4:	movs	r3, #0
    9bb6:	mov	r5, r0
    9bb8:	mov	r0, r1
    9bba:	str	r3, [r4, #0]
    9bbc:	bl	7ff8 <_sbrk>
    9bc0:	adds	r3, r0, #1
    9bc2:	beq.n	9bc6 <_sbrk_r+0x16>
    9bc4:	pop	{r3, r4, r5, pc}
    9bc6:	ldr	r3, [r4, #0]
    9bc8:	cmp	r3, #0
    9bca:	beq.n	9bc4 <_sbrk_r+0x14>
    9bcc:	str	r3, [r5, #0]
    9bce:	pop	{r3, r4, r5, pc}
    9bd0:	.word	0x20017d20

00009bd4 <sprintf>:
    9bd4:	push	{r1, r2, r3}
    9bd6:	push	{r4, r5, r6, r7, lr}
    9bd8:	sub	sp, #112	; 0x70
    9bda:	add	r3, sp, #132	; 0x84
    9bdc:	ldr	r1, [pc, #60]	; (9c1c <sprintf+0x48>)
    9bde:	ldr.w	r2, [r3], #4
    9be2:	str	r3, [sp, #4]
    9be4:	mov	r5, r0
    9be6:	mvn.w	r4, #2147483648	; 0x80000000
    9bea:	ldr	r0, [r1, #0]
    9bec:	str	r5, [sp, #8]
    9bee:	mov.w	r7, #520	; 0x208
    9bf2:	movw	r6, #65535	; 0xffff
    9bf6:	add	r1, sp, #8
    9bf8:	str	r5, [sp, #24]
    9bfa:	strh.w	r7, [sp, #20]
    9bfe:	str	r4, [sp, #16]
    9c00:	str	r4, [sp, #28]
    9c02:	strh.w	r6, [sp, #22]
    9c06:	bl	aee0 <_svfprintf_r>
    9c0a:	ldr	r3, [sp, #8]
    9c0c:	movs	r2, #0
    9c0e:	strb	r2, [r3, #0]
    9c10:	add	sp, #112	; 0x70
    9c12:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9c16:	add	sp, #12
    9c18:	bx	lr
    9c1a:	nop
    9c1c:	.word	0x2000215c

00009c20 <sscanf>:
    9c20:	push	{r1, r2, r3}
    9c22:	push	{r4, r5, r6, r7, lr}
    9c24:	sub	sp, #112	; 0x70
    9c26:	add	r4, sp, #132	; 0x84
    9c28:	mov.w	r2, #516	; 0x204
    9c2c:	ldr.w	r6, [r4], #4
    9c30:	strh.w	r2, [sp, #20]
    9c34:	str	r0, [sp, #8]
    9c36:	str	r0, [sp, #24]
    9c38:	bl	9d40 <strlen>
    9c3c:	ldr	r3, [pc, #48]	; (9c70 <sscanf+0x50>)
    9c3e:	str	r4, [sp, #4]
    9c40:	mov	r5, r0
    9c42:	mov	r2, r6
    9c44:	ldr	r7, [pc, #44]	; (9c74 <sscanf+0x54>)
    9c46:	ldr	r0, [r3, #0]
    9c48:	str	r5, [sp, #12]
    9c4a:	mov	r3, r4
    9c4c:	movw	r6, #65535	; 0xffff
    9c50:	movs	r4, #0
    9c52:	add	r1, sp, #8
    9c54:	str	r5, [sp, #28]
    9c56:	str	r7, [sp, #40]	; 0x28
    9c58:	str	r4, [sp, #56]	; 0x38
    9c5a:	str	r4, [sp, #76]	; 0x4c
    9c5c:	strh.w	r6, [sp, #22]
    9c60:	bl	c450 <__ssvfscanf_r>
    9c64:	add	sp, #112	; 0x70
    9c66:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9c6a:	add	sp, #12
    9c6c:	bx	lr
    9c6e:	nop
    9c70:	.word	0x2000215c
    9c74:	.word	0x00009c79

00009c78 <__seofread>:
    9c78:	movs	r0, #0
    9c7a:	bx	lr

00009c7c <strcpy>:
    9c7c:	eor.w	r2, r0, r1
    9c80:	mov	ip, r0
    9c82:	tst.w	r2, #3
    9c86:	bne.n	9d28 <strcpy+0xac>
    9c88:	tst.w	r1, #3
    9c8c:	bne.n	9cf4 <strcpy+0x78>
    9c8e:	str.w	r4, [sp, #-4]!
    9c92:	tst.w	r1, #4
    9c96:	ldr.w	r3, [r1], #4
    9c9a:	beq.n	9cb4 <strcpy+0x38>
    9c9c:	sub.w	r2, r3, #16843009	; 0x1010101
    9ca0:	bics	r2, r3
    9ca2:	tst.w	r2, #2155905152	; 0x80808080
    9ca6:	itt	eq
    9ca8:	streq.w	r3, [ip], #4
    9cac:	ldreq.w	r3, [r1], #4
    9cb0:	bne.n	9ce0 <strcpy+0x64>
    9cb2:	nop
    9cb4:	ldr.w	r4, [r1], #4
    9cb8:	sub.w	r2, r3, #16843009	; 0x1010101
    9cbc:	bics	r2, r3
    9cbe:	tst.w	r2, #2155905152	; 0x80808080
    9cc2:	sub.w	r2, r4, #16843009	; 0x1010101
    9cc6:	bne.n	9ce0 <strcpy+0x64>
    9cc8:	str.w	r3, [ip], #4
    9ccc:	bics	r2, r4
    9cce:	tst.w	r2, #2155905152	; 0x80808080
    9cd2:	itt	eq
    9cd4:	ldreq.w	r3, [r1], #4
    9cd8:	streq.w	r4, [ip], #4
    9cdc:	beq.n	9cb4 <strcpy+0x38>
    9cde:	mov	r3, r4
    9ce0:	strb.w	r3, [ip], #1
    9ce4:	tst.w	r3, #255	; 0xff
    9ce8:	mov.w	r3, r3, ror #8
    9cec:	bne.n	9ce0 <strcpy+0x64>
    9cee:	ldr.w	r4, [sp], #4
    9cf2:	bx	lr
    9cf4:	tst.w	r1, #1
    9cf8:	beq.n	9d08 <strcpy+0x8c>
    9cfa:	ldrb.w	r2, [r1], #1
    9cfe:	strb.w	r2, [ip], #1
    9d02:	cmp	r2, #0
    9d04:	it	eq
    9d06:	bxeq	lr
    9d08:	tst.w	r1, #2
    9d0c:	beq.n	9c8e <strcpy+0x12>
    9d0e:	ldrh.w	r2, [r1], #2
    9d12:	tst.w	r2, #255	; 0xff
    9d16:	itet	ne
    9d18:	strhne.w	r2, [ip], #2
    9d1c:	strbeq.w	r2, [ip]
    9d20:	tstne.w	r2, #65280	; 0xff00
    9d24:	bne.n	9c8e <strcpy+0x12>
    9d26:	bx	lr
    9d28:	ldrb.w	r2, [r1], #1
    9d2c:	strb.w	r2, [ip], #1
    9d30:	cmp	r2, #0
    9d32:	bne.n	9d28 <strcpy+0xac>
    9d34:	bx	lr
    9d36:	nop
	...

00009d40 <strlen>:
    9d40:	pld	[r0]
    9d44:	strd	r4, r5, [sp, #-8]!
    9d48:	bic.w	r1, r0, #7
    9d4c:	mvn.w	ip, #0
    9d50:	ands.w	r4, r0, #7
    9d54:	pld	[r1, #32]
    9d58:	bne.w	9dee <strlen+0xae>
    9d5c:	mov.w	r4, #0
    9d60:	mvn.w	r0, #7
    9d64:	ldrd	r2, r3, [r1]
    9d68:	pld	[r1, #64]	; 0x40
    9d6c:	add.w	r0, r0, #8
    9d70:	uadd8	r2, r2, ip
    9d74:	sel	r2, r4, ip
    9d78:	uadd8	r3, r3, ip
    9d7c:	sel	r3, r2, ip
    9d80:	cbnz	r3, 9dd6 <strlen+0x96>
    9d82:	ldrd	r2, r3, [r1, #8]
    9d86:	uadd8	r2, r2, ip
    9d8a:	add.w	r0, r0, #8
    9d8e:	sel	r2, r4, ip
    9d92:	uadd8	r3, r3, ip
    9d96:	sel	r3, r2, ip
    9d9a:	cbnz	r3, 9dd6 <strlen+0x96>
    9d9c:	ldrd	r2, r3, [r1, #16]
    9da0:	uadd8	r2, r2, ip
    9da4:	add.w	r0, r0, #8
    9da8:	sel	r2, r4, ip
    9dac:	uadd8	r3, r3, ip
    9db0:	sel	r3, r2, ip
    9db4:	cbnz	r3, 9dd6 <strlen+0x96>
    9db6:	ldrd	r2, r3, [r1, #24]
    9dba:	add.w	r1, r1, #32
    9dbe:	uadd8	r2, r2, ip
    9dc2:	add.w	r0, r0, #8
    9dc6:	sel	r2, r4, ip
    9dca:	uadd8	r3, r3, ip
    9dce:	sel	r3, r2, ip
    9dd2:	cmp	r3, #0
    9dd4:	beq.n	9d64 <strlen+0x24>
    9dd6:	cmp	r2, #0
    9dd8:	itt	eq
    9dda:	addeq	r0, #4
    9ddc:	moveq	r2, r3
    9dde:	rev	r2, r2
    9de0:	clz	r2, r2
    9de4:	ldrd	r4, r5, [sp], #8
    9de8:	add.w	r0, r0, r2, lsr #3
    9dec:	bx	lr
    9dee:	ldrd	r2, r3, [r1]
    9df2:	and.w	r5, r4, #3
    9df6:	rsb	r0, r4, #0
    9dfa:	mov.w	r5, r5, lsl #3
    9dfe:	tst.w	r4, #4
    9e02:	pld	[r1, #64]	; 0x40
    9e06:	lsl.w	r5, ip, r5
    9e0a:	orn	r2, r2, r5
    9e0e:	itt	ne
    9e10:	ornne	r3, r3, r5
    9e14:	movne	r2, ip
    9e16:	mov.w	r4, #0
    9e1a:	b.n	9d70 <strlen+0x30>

00009e1c <strncmp>:
    9e1c:	cmp	r2, #0
    9e1e:	beq.n	9ea4 <strncmp+0x88>
    9e20:	orr.w	r3, r0, r1
    9e24:	ands.w	r3, r3, #3
    9e28:	push	{r4, r5, r6, r7}
    9e2a:	bne.n	9e78 <strncmp+0x5c>
    9e2c:	cmp	r2, #3
    9e2e:	bls.n	9e78 <strncmp+0x5c>
    9e30:	ldr	r4, [r0, #0]
    9e32:	ldr	r5, [r1, #0]
    9e34:	cmp	r4, r5
    9e36:	bne.n	9e78 <strncmp+0x5c>
    9e38:	subs	r2, #4
    9e3a:	beq.n	9ea8 <strncmp+0x8c>
    9e3c:	sub.w	r5, r4, #16843009	; 0x1010101
    9e40:	bic.w	r4, r5, r4
    9e44:	tst.w	r4, #2155905152	; 0x80808080
    9e48:	bne.n	9eae <strncmp+0x92>
    9e4a:	adds	r7, r0, #4
    9e4c:	adds	r5, r1, #4
    9e4e:	b.n	9e6c <strncmp+0x50>
    9e50:	ldr.w	r3, [r7], #4
    9e54:	ldr	r6, [r1, #0]
    9e56:	sub.w	r4, r3, #16843009	; 0x1010101
    9e5a:	cmp	r3, r6
    9e5c:	bic.w	r4, r4, r3
    9e60:	bne.n	9e78 <strncmp+0x5c>
    9e62:	subs	r2, #4
    9e64:	beq.n	9ea8 <strncmp+0x8c>
    9e66:	tst.w	r4, #2155905152	; 0x80808080
    9e6a:	bne.n	9eb4 <strncmp+0x98>
    9e6c:	cmp	r2, #3
    9e6e:	mov	r1, r5
    9e70:	mov	r0, r7
    9e72:	add.w	r5, r5, #4
    9e76:	bhi.n	9e50 <strncmp+0x34>
    9e78:	ldrb	r3, [r0, #0]
    9e7a:	ldrb	r4, [r1, #0]
    9e7c:	cmp	r4, r3
    9e7e:	add.w	r2, r2, #4294967295
    9e82:	bne.n	9e9e <strncmp+0x82>
    9e84:	cbz	r2, 9ea8 <strncmp+0x8c>
    9e86:	cbnz	r4, 9e8e <strncmp+0x72>
    9e88:	b.n	9eb8 <strncmp+0x9c>
    9e8a:	cbz	r2, 9ea8 <strncmp+0x8c>
    9e8c:	cbz	r3, 9eae <strncmp+0x92>
    9e8e:	ldrb.w	r3, [r0, #1]!
    9e92:	ldrb.w	r4, [r1, #1]!
    9e96:	cmp	r3, r4
    9e98:	add.w	r2, r2, #4294967295
    9e9c:	beq.n	9e8a <strncmp+0x6e>
    9e9e:	subs	r0, r3, r4
    9ea0:	pop	{r4, r5, r6, r7}
    9ea2:	bx	lr
    9ea4:	mov	r0, r2
    9ea6:	bx	lr
    9ea8:	mov	r0, r2
    9eaa:	pop	{r4, r5, r6, r7}
    9eac:	bx	lr
    9eae:	mov	r0, r3
    9eb0:	pop	{r4, r5, r6, r7}
    9eb2:	bx	lr
    9eb4:	movs	r0, #0
    9eb6:	b.n	9ea0 <strncmp+0x84>
    9eb8:	mov	r0, r4
    9eba:	b.n	9ea0 <strncmp+0x84>

00009ebc <sulp>:
    9ebc:	push	{r4, r5, r6, lr}
    9ebe:	mov	r4, r0
    9ec0:	mov	r5, r1
    9ec2:	mov	r6, r2
    9ec4:	vmov	d0, r4, r5
    9ec8:	bl	f238 <__ulp>
    9ecc:	cbz	r6, 9eee <sulp+0x32>
    9ece:	ubfx	r3, r5, #20, #11
    9ed2:	rsb	r3, r3, #107	; 0x6b
    9ed6:	cmp	r3, #0
    9ed8:	ble.n	9eee <sulp+0x32>
    9eda:	lsls	r3, r3, #20
    9edc:	add.w	r1, r3, #1069547520	; 0x3fc00000
    9ee0:	movs	r0, #0
    9ee2:	add.w	r1, r1, #3145728	; 0x300000
    9ee6:	vmov	d7, r0, r1
    9eea:	vmul.f64	d0, d0, d7
    9eee:	pop	{r4, r5, r6, pc}

00009ef0 <_strtod_l>:
    9ef0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ef4:	vpush	{d8-d14}
    9ef8:	mov	r6, r3
    9efa:	sub	sp, #100	; 0x64
    9efc:	movs	r3, #0
    9efe:	mov	r9, r0
    9f00:	mov	r0, r6
    9f02:	mov	r8, r1
    9f04:	mov	sl, r2
    9f06:	str	r3, [sp, #80]	; 0x50
    9f08:	bl	ebbc <__localeconv_l>
    9f0c:	movs	r4, #0
    9f0e:	movs	r3, #0
    9f10:	mov	fp, r0
    9f12:	ldr	r0, [r0, #0]
    9f14:	strd	r3, r4, [sp, #24]
    9f18:	bl	9d40 <strlen>
    9f1c:	str.w	r8, [sp, #76]	; 0x4c
    9f20:	str	r0, [sp, #16]
    9f22:	mov	r3, r8
    9f24:	mov	r5, r3
    9f26:	ldrb.w	r4, [r3], #1
    9f2a:	cmp	r4, #45	; 0x2d
    9f2c:	bhi.w	a166 <_strtod_l+0x276>
    9f30:	tbh	[pc, r4, lsl #1]
    9f34:	.word	0x0119002e
    9f38:	.word	0x01190119
    9f3c:	.word	0x01190119
    9f40:	.word	0x01190119
    9f44:	.word	0x00ef0119
    9f48:	.word	0x00ef00ef
    9f4c:	.word	0x00ef00ef
    9f50:	.word	0x01190119
    9f54:	.word	0x01190119
    9f58:	.word	0x01190119
    9f5c:	.word	0x01190119
    9f60:	.word	0x01190119
    9f64:	.word	0x01190119
    9f68:	.word	0x01190119
    9f6c:	.word	0x01190119
    9f70:	.word	0x01190119
    9f74:	.word	0x011900ef
    9f78:	.word	0x01190119
    9f7c:	.word	0x01190119
    9f80:	.word	0x01190119
    9f84:	.word	0x01190119
    9f88:	.word	0x00490119
    9f8c:	.word	0x00ec0119
    9f90:	vldr	d7, [pc, #700]	; a250 <_strtod_l+0x360>
    9f94:	vstr	d7, [sp, #16]
    9f98:	cmp.w	sl, #0
    9f9c:	beq.n	9fb8 <_strtod_l+0xc8>
    9f9e:	movs	r2, #0
    9fa0:	mov	r3, r8
    9fa2:	str	r2, [sp, #32]
    9fa4:	str.w	r3, [sl]
    9fa8:	ldr	r3, [sp, #32]
    9faa:	cbz	r3, 9fb8 <_strtod_l+0xc8>
    9fac:	vldr	d7, [sp, #16]
    9fb0:	vneg.f64	d7, d7
    9fb4:	vstr	d7, [sp, #16]
    9fb8:	vldr	d0, [sp, #16]
    9fbc:	add	sp, #100	; 0x64
    9fbe:	vpop	{d8-d14}
    9fc2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9fc6:	movs	r3, #0
    9fc8:	str	r3, [sp, #32]
    9fca:	adds	r3, r5, #1
    9fcc:	str	r3, [sp, #76]	; 0x4c
    9fce:	ldrb	r4, [r5, #1]
    9fd0:	cmp	r4, #0
    9fd2:	beq.n	9f90 <_strtod_l+0xa0>
    9fd4:	cmp	r4, #48	; 0x30
    9fd6:	mov	r5, r3
    9fd8:	beq.w	a170 <_strtod_l+0x280>
    9fdc:	movs	r3, #0
    9fde:	str	r5, [sp, #40]	; 0x28
    9fe0:	str	r3, [sp, #36]	; 0x24
    9fe2:	sub.w	r3, r4, #48	; 0x30
    9fe6:	cmp	r3, #9
    9fe8:	bhi.w	a796 <_strtod_l+0x8a6>
    9fec:	movs	r7, #0
    9fee:	mov	r0, r5
    9ff0:	mov	r6, r7
    9ff2:	mov	r5, r7
    9ff4:	cmp	r5, #8
    9ff6:	it	gt
    9ff8:	addgt.w	r7, r7, r7, lsl #2
    9ffc:	add.w	r3, r6, r6, lsl #2
    a000:	add.w	r0, r0, #1
    a004:	add.w	r3, r4, r3, lsl #1
    a008:	str	r0, [sp, #76]	; 0x4c
    a00a:	itt	gt
    a00c:	addgt.w	r4, r4, r7, lsl #1
    a010:	subgt.w	r7, r4, #48	; 0x30
    a014:	ldrb	r4, [r0, #0]
    a016:	it	le
    a018:	suble.w	r6, r3, #48	; 0x30
    a01c:	sub.w	r3, r4, #48	; 0x30
    a020:	cmp	r3, #9
    a022:	add.w	r5, r5, #1
    a026:	bls.n	9ff4 <_strtod_l+0x104>
    a028:	ldr.w	r1, [fp]
    a02c:	ldr	r2, [sp, #16]
    a02e:	bl	9e1c <strncmp>
    a032:	cmp	r0, #0
    a034:	beq.n	a116 <_strtod_l+0x226>
    a036:	movs	r0, #0
    a038:	mov	ip, r0
    a03a:	mov	fp, r0
    a03c:	mov	r2, r5
    a03e:	cmp	r4, #101	; 0x65
    a040:	beq.w	a268 <_strtod_l+0x378>
    a044:	cmp	r4, #69	; 0x45
    a046:	beq.w	a268 <_strtod_l+0x378>
    a04a:	movs	r3, #0
    a04c:	cmp	r5, #0
    a04e:	bne.w	a1a6 <_strtod_l+0x2b6>
    a052:	cmp	r0, #0
    a054:	bne.w	a192 <_strtod_l+0x2a2>
    a058:	ldr	r3, [sp, #36]	; 0x24
    a05a:	cmp	r3, #0
    a05c:	bne.w	a192 <_strtod_l+0x2a2>
    a060:	cmp.w	fp, #0
    a064:	bne.n	9f90 <_strtod_l+0xa0>
    a066:	subs	r4, #73	; 0x49
    a068:	cmp	r4, #37	; 0x25
    a06a:	bhi.n	9f90 <_strtod_l+0xa0>
    a06c:	add	r3, pc, #4	; (adr r3, a074 <_strtod_l+0x184>)
    a06e:	ldr.w	pc, [r3, r4, lsl #2]
    a072:	nop
    a074:	.word	0x0000a21b
    a078:	.word	0x00009f91
    a07c:	.word	0x00009f91
    a080:	.word	0x00009f91
    a084:	.word	0x00009f91
    a088:	.word	0x0000a72f
    a08c:	.word	0x00009f91
    a090:	.word	0x00009f91
    a094:	.word	0x00009f91
    a098:	.word	0x00009f91
    a09c:	.word	0x00009f91
    a0a0:	.word	0x00009f91
    a0a4:	.word	0x00009f91
    a0a8:	.word	0x00009f91
    a0ac:	.word	0x00009f91
    a0b0:	.word	0x00009f91
    a0b4:	.word	0x00009f91
    a0b8:	.word	0x00009f91
    a0bc:	.word	0x00009f91
    a0c0:	.word	0x00009f91
    a0c4:	.word	0x00009f91
    a0c8:	.word	0x00009f91
    a0cc:	.word	0x00009f91
    a0d0:	.word	0x00009f91
    a0d4:	.word	0x00009f91
    a0d8:	.word	0x00009f91
    a0dc:	.word	0x00009f91
    a0e0:	.word	0x00009f91
    a0e4:	.word	0x00009f91
    a0e8:	.word	0x00009f91
    a0ec:	.word	0x00009f91
    a0f0:	.word	0x00009f91
    a0f4:	.word	0x0000a21b
    a0f8:	.word	0x00009f91
    a0fc:	.word	0x00009f91
    a100:	.word	0x00009f91
    a104:	.word	0x00009f91
    a108:	.word	0x0000a72f
    a10c:	movs	r3, #1
    a10e:	str	r3, [sp, #32]
    a110:	b.n	9fca <_strtod_l+0xda>
    a112:	str	r3, [sp, #76]	; 0x4c
    a114:	b.n	9f24 <_strtod_l+0x34>
    a116:	ldr	r3, [sp, #76]	; 0x4c
    a118:	ldr	r1, [sp, #16]
    a11a:	adds	r2, r3, r1
    a11c:	str	r2, [sp, #76]	; 0x4c
    a11e:	ldrb	r4, [r3, r1]
    a120:	mov	ip, r0
    a122:	mov	r2, r5
    a124:	sub.w	r3, r4, #48	; 0x30
    a128:	cmp	r3, #9
    a12a:	bhi.w	a5b6 <_strtod_l+0x6c6>
    a12e:	adds	r1, r0, #1
    a130:	mov	r4, r3
    a132:	cmp	r3, #0
    a134:	beq.w	ad46 <_strtod_l+0xe56>
    a138:	cmp	r1, #1
    a13a:	add	ip, r1
    a13c:	it	ne
    a13e:	addne	r0, r0, r5
    a140:	bne.n	a14e <_strtod_l+0x25e>
    a142:	b.w	ad2a <_strtod_l+0xe3a>
    a146:	lsls	r6, r1, #1
    a148:	cmp	r5, r0
    a14a:	beq.w	a9d2 <_strtod_l+0xae2>
    a14e:	adds	r5, #1
    a150:	subs	r1, r5, #1
    a152:	cmp	r1, #8
    a154:	add.w	r1, r6, r6, lsl #2
    a158:	ble.n	a146 <_strtod_l+0x256>
    a15a:	cmp	r5, #16
    a15c:	itt	le
    a15e:	addle.w	r7, r7, r7, lsl #2
    a162:	lslle	r7, r7, #1
    a164:	b.n	a148 <_strtod_l+0x258>
    a166:	movs	r3, #0
    a168:	cmp	r4, #48	; 0x30
    a16a:	str	r3, [sp, #32]
    a16c:	bne.w	9fdc <_strtod_l+0xec>
    a170:	ldrb	r3, [r5, #1]
    a172:	cmp	r3, #88	; 0x58
    a174:	beq.w	a75e <_strtod_l+0x86e>
    a178:	cmp	r3, #120	; 0x78
    a17a:	beq.w	a75e <_strtod_l+0x86e>
    a17e:	adds	r5, #1
    a180:	str	r5, [sp, #76]	; 0x4c
    a182:	ldrb	r4, [r5, #0]
    a184:	cmp	r4, #48	; 0x30
    a186:	beq.n	a17e <_strtod_l+0x28e>
    a188:	cbz	r4, a192 <_strtod_l+0x2a2>
    a18a:	movs	r3, #1
    a18c:	str	r5, [sp, #40]	; 0x28
    a18e:	str	r3, [sp, #36]	; 0x24
    a190:	b.n	9fe2 <_strtod_l+0xf2>
    a192:	vldr	d7, [pc, #188]	; a250 <_strtod_l+0x360>
    a196:	vstr	d7, [sp, #16]
    a19a:	cmp.w	sl, #0
    a19e:	beq.w	9fa8 <_strtod_l+0xb8>
    a1a2:	ldr	r3, [sp, #76]	; 0x4c
    a1a4:	b.n	9fa4 <_strtod_l+0xb4>
    a1a6:	vmov	s15, r6
    a1aa:	vcvt.f64.u32	d7, s15
    a1ae:	cmp	r5, #16
    a1b0:	vstr	d7, [sp, #16]
    a1b4:	rsb	r4, ip, r3
    a1b8:	ldrd	fp, ip, [sp, #16]
    a1bc:	mov	r1, r5
    a1be:	it	ge
    a1c0:	movge	r1, #16
    a1c2:	cmp	r2, #0
    a1c4:	it	eq
    a1c6:	moveq	r2, r5
    a1c8:	cmp	r1, #9
    a1ca:	strd	fp, ip, [sp, #24]
    a1ce:	ble.n	a1ee <_strtod_l+0x2fe>
    a1d0:	ldr	r3, [pc, #132]	; (a258 <_strtod_l+0x368>)
    a1d2:	add.w	r3, r3, r1, lsl #3
    a1d6:	vldr	d6, [r3, #-72]	; 0xffffffb8
    a1da:	vldr	d5, [sp, #16]
    a1de:	vmov	s15, r7
    a1e2:	vcvt.f64.u32	d7, s15
    a1e6:	vfma.f64	d7, d5, d6
    a1ea:	vstr	d7, [sp, #24]
    a1ee:	cmp	r5, #15
    a1f0:	bgt.w	a30a <_strtod_l+0x41a>
    a1f4:	cmp	r4, #0
    a1f6:	beq.n	a246 <_strtod_l+0x356>
    a1f8:	ble.w	aafe <_strtod_l+0xc0e>
    a1fc:	cmp	r4, #22
    a1fe:	bgt.w	aa04 <_strtod_l+0xb14>
    a202:	ldr	r3, [pc, #84]	; (a258 <_strtod_l+0x368>)
    a204:	add.w	r4, r3, r4, lsl #3
    a208:	vldr	d7, [r4]
    a20c:	vldr	d6, [sp, #24]
    a210:	vmul.f64	d7, d7, d6
    a214:	vstr	d7, [sp, #16]
    a218:	b.n	a19a <_strtod_l+0x2aa>
    a21a:	add	r0, sp, #76	; 0x4c
    a21c:	ldr	r1, [pc, #60]	; (a25c <_strtod_l+0x36c>)
    a21e:	bl	e9f0 <__match>
    a222:	cmp	r0, #0
    a224:	beq.w	9f90 <_strtod_l+0xa0>
    a228:	ldr	r3, [sp, #76]	; 0x4c
    a22a:	ldr	r1, [pc, #52]	; (a260 <_strtod_l+0x370>)
    a22c:	subs	r3, #1
    a22e:	add	r0, sp, #76	; 0x4c
    a230:	str	r3, [sp, #76]	; 0x4c
    a232:	bl	e9f0 <__match>
    a236:	cbnz	r0, a23e <_strtod_l+0x34e>
    a238:	ldr	r3, [sp, #76]	; 0x4c
    a23a:	adds	r3, #1
    a23c:	str	r3, [sp, #76]	; 0x4c
    a23e:	ldr	r3, [pc, #36]	; (a264 <_strtod_l+0x374>)
    a240:	str	r3, [sp, #28]
    a242:	movs	r3, #0
    a244:	str	r3, [sp, #24]
    a246:	vldr	d7, [sp, #24]
    a24a:	vstr	d7, [sp, #16]
    a24e:	b.n	a19a <_strtod_l+0x2aa>
	...
    a258:	.word	0x200002a8
    a25c:	.word	0x20001694
    a260:	.word	0x20001698
    a264:	.word	0x7ff00000
    a268:	cmp	r5, #0
    a26a:	beq.w	a5a0 <_strtod_l+0x6b0>
    a26e:	ldr.w	r8, [sp, #76]	; 0x4c
    a272:	add.w	r3, r8, #1
    a276:	str	r3, [sp, #76]	; 0x4c
    a278:	ldrb.w	r4, [r8, #1]
    a27c:	cmp	r4, #43	; 0x2b
    a27e:	beq.w	a758 <_strtod_l+0x868>
    a282:	cmp	r4, #45	; 0x2d
    a284:	beq.w	a5f2 <_strtod_l+0x702>
    a288:	movs	r3, #0
    a28a:	str	r3, [sp, #16]
    a28c:	sub.w	r3, r4, #48	; 0x30
    a290:	cmp	r3, #9
    a292:	bhi.w	a750 <_strtod_l+0x860>
    a296:	cmp	r4, #48	; 0x30
    a298:	bne.n	a2a6 <_strtod_l+0x3b6>
    a29a:	ldr	r3, [sp, #76]	; 0x4c
    a29c:	adds	r3, #1
    a29e:	str	r3, [sp, #76]	; 0x4c
    a2a0:	ldrb	r4, [r3, #0]
    a2a2:	cmp	r4, #48	; 0x30
    a2a4:	beq.n	a29c <_strtod_l+0x3ac>
    a2a6:	sub.w	r3, r4, #49	; 0x31
    a2aa:	cmp	r3, #8
    a2ac:	bhi.w	a04a <_strtod_l+0x15a>
    a2b0:	ldr	r3, [sp, #76]	; 0x4c
    a2b2:	str	r3, [sp, #48]	; 0x30
    a2b4:	adds	r1, r3, #1
    a2b6:	subs	r4, #48	; 0x30
    a2b8:	str	r1, [sp, #76]	; 0x4c
    a2ba:	str	r4, [sp, #44]	; 0x2c
    a2bc:	ldrb	r4, [r3, #1]
    a2be:	sub.w	lr, r4, #48	; 0x30
    a2c2:	cmp.w	lr, #9
    a2c6:	bhi.n	a2e8 <_strtod_l+0x3f8>
    a2c8:	ldr	r3, [sp, #44]	; 0x2c
    a2ca:	adds	r1, #1
    a2cc:	str	r1, [sp, #76]	; 0x4c
    a2ce:	add.w	r3, r3, r3, lsl #2
    a2d2:	add.w	r3, r4, r3, lsl #1
    a2d6:	ldrb	r4, [r1, #0]
    a2d8:	sub.w	lr, r4, #48	; 0x30
    a2dc:	cmp.w	lr, #9
    a2e0:	sub.w	r3, r3, #48	; 0x30
    a2e4:	bls.n	a2ca <_strtod_l+0x3da>
    a2e6:	str	r3, [sp, #44]	; 0x2c
    a2e8:	ldr	r3, [sp, #48]	; 0x30
    a2ea:	subs	r1, r1, r3
    a2ec:	cmp	r1, #8
    a2ee:	bgt.w	a9f4 <_strtod_l+0xb04>
    a2f2:	ldr	r3, [sp, #44]	; 0x2c
    a2f4:	movw	r1, #19999	; 0x4e1f
    a2f8:	cmp	r3, r1
    a2fa:	it	ge
    a2fc:	movge	r3, r1
    a2fe:	ldr	r1, [sp, #16]
    a300:	cmp	r1, #0
    a302:	beq.w	a04c <_strtod_l+0x15c>
    a306:	negs	r3, r3
    a308:	b.n	a04c <_strtod_l+0x15c>
    a30a:	subs	r3, r5, r1
    a30c:	add	r3, r4
    a30e:	cmp	r3, #0
    a310:	ble.w	a918 <_strtod_l+0xa28>
    a314:	ands.w	r0, r3, #15
    a318:	beq.n	a330 <_strtod_l+0x440>
    a31a:	ldr	r1, [pc, #780]	; (a628 <_strtod_l+0x738>)
    a31c:	add.w	r1, r1, r0, lsl #3
    a320:	vldr	d6, [sp, #24]
    a324:	vldr	d7, [r1]
    a328:	vmul.f64	d7, d7, d6
    a32c:	vstr	d7, [sp, #24]
    a330:	bics.w	r3, r3, #15
    a334:	bne.w	a644 <_strtod_l+0x754>
    a338:	movs	r3, #0
    a33a:	str	r3, [sp, #36]	; 0x24
    a33c:	str	r6, [sp, #0]
    a33e:	mov	r3, r5
    a340:	ldr	r1, [sp, #40]	; 0x28
    a342:	mov	r0, r9
    a344:	bl	ed18 <__s2b>
    a348:	mov	fp, r0
    a34a:	cmp	r0, #0
    a34c:	beq.w	a83c <_strtod_l+0x94c>
    a350:	cmp	r4, #0
    a352:	mov.w	r8, #0
    a356:	rsb	r3, r4, #0
    a35a:	vldr	d10, [pc, #684]	; a608 <_strtod_l+0x718>
    a35e:	it	ge
    a360:	movge	r3, r8
    a362:	vldr	d9, [pc, #684]	; a610 <_strtod_l+0x720>
    a366:	vldr	d11, [pc, #688]	; a618 <_strtod_l+0x728>
    a36a:	vldr	d8, [pc, #692]	; a620 <_strtod_l+0x730>
    a36e:	str	r3, [sp, #44]	; 0x2c
    a370:	bic.w	r3, r4, r4, asr #31
    a374:	str	r3, [sp, #40]	; 0x28
    a376:	mov	r4, r8
    a378:	str.w	sl, [sp, #60]	; 0x3c
    a37c:	ldr.w	r1, [fp, #4]
    a380:	mov	r0, r9
    a382:	bl	ec38 <_Balloc>
    a386:	mov	r6, r0
    a388:	cmp	r0, #0
    a38a:	beq.w	a8b8 <_strtod_l+0x9c8>
    a38e:	ldr.w	r2, [fp, #16]
    a392:	vldr	d7, [sp, #24]
    a396:	adds	r2, #2
    a398:	lsls	r2, r2, #2
    a39a:	add.w	r1, fp, #12
    a39e:	adds	r0, #12
    a3a0:	vstr	d7, [sp, #16]
    a3a4:	bl	68c4 <memcpy>
    a3a8:	vldr	d0, [sp, #16]
    a3ac:	add	r2, sp, #88	; 0x58
    a3ae:	add	r1, sp, #84	; 0x54
    a3b0:	mov	r0, r9
    a3b2:	bl	f35c <__d2b>
    a3b6:	str	r0, [sp, #80]	; 0x50
    a3b8:	cmp	r0, #0
    a3ba:	beq.w	ab20 <_strtod_l+0xc30>
    a3be:	movs	r1, #1
    a3c0:	mov	r0, r9
    a3c2:	bl	ee4c <__i2b>
    a3c6:	mov	r4, r0
    a3c8:	cmp	r0, #0
    a3ca:	beq.w	a8b8 <_strtod_l+0x9c8>
    a3ce:	ldr	r2, [sp, #84]	; 0x54
    a3d0:	cmp	r2, #0
    a3d2:	blt.w	a5ae <_strtod_l+0x6be>
    a3d6:	ldr	r3, [sp, #44]	; 0x2c
    a3d8:	ldr	r5, [sp, #40]	; 0x28
    a3da:	adds	r7, r3, r2
    a3dc:	ldr	r1, [sp, #36]	; 0x24
    a3de:	ldr	r3, [sp, #88]	; 0x58
    a3e0:	subs	r2, r2, r1
    a3e2:	add	r2, r3
    a3e4:	ldr	r1, [pc, #580]	; (a62c <_strtod_l+0x73c>)
    a3e6:	subs	r2, #1
    a3e8:	cmp	r2, r1
    a3ea:	rsb	r3, r3, #54	; 0x36
    a3ee:	bge.w	a57c <_strtod_l+0x68c>
    a3f2:	subs	r1, r1, r2
    a3f4:	cmp	r1, #31
    a3f6:	sub.w	r3, r3, r1
    a3fa:	bgt.w	a5bc <_strtod_l+0x6cc>
    a3fe:	movs	r2, #1
    a400:	lsls	r2, r1
    a402:	str	r2, [sp, #52]	; 0x34
    a404:	movs	r2, #0
    a406:	str	r2, [sp, #56]	; 0x38
    a408:	add.w	sl, r7, r3
    a40c:	add	r5, r3
    a40e:	ldr	r3, [sp, #36]	; 0x24
    a410:	cmp	r7, sl
    a412:	mov	r2, r7
    a414:	add	r5, r3
    a416:	it	ge
    a418:	movge	r2, sl
    a41a:	cmp	r2, r5
    a41c:	it	ge
    a41e:	movge	r2, r5
    a420:	cmp	r2, #0
    a422:	ble.n	a42c <_strtod_l+0x53c>
    a424:	rsb	sl, r2, sl
    a428:	subs	r5, r5, r2
    a42a:	subs	r7, r7, r2
    a42c:	ldr	r3, [sp, #44]	; 0x2c
    a42e:	cbz	r3, a460 <_strtod_l+0x570>
    a430:	mov	r1, r4
    a432:	mov	r2, r3
    a434:	mov	r0, r9
    a436:	bl	ef90 <__pow5mult>
    a43a:	mov	r4, r0
    a43c:	cmp	r0, #0
    a43e:	beq.w	a8b8 <_strtod_l+0x9c8>
    a442:	mov	r1, r0
    a444:	ldr	r2, [sp, #80]	; 0x50
    a446:	mov	r0, r9
    a448:	bl	ee60 <__multiply>
    a44c:	cmp	r0, #0
    a44e:	beq.w	a8b8 <_strtod_l+0x9c8>
    a452:	str	r0, [sp, #48]	; 0x30
    a454:	ldr	r1, [sp, #80]	; 0x50
    a456:	mov	r0, r9
    a458:	bl	ec84 <_Bfree>
    a45c:	ldr	r2, [sp, #48]	; 0x30
    a45e:	str	r2, [sp, #80]	; 0x50
    a460:	cmp.w	sl, #0
    a464:	ble.n	a478 <_strtod_l+0x588>
    a466:	mov	r2, sl
    a468:	ldr	r1, [sp, #80]	; 0x50
    a46a:	mov	r0, r9
    a46c:	bl	f030 <__lshift>
    a470:	str	r0, [sp, #80]	; 0x50
    a472:	cmp	r0, #0
    a474:	beq.w	ab20 <_strtod_l+0xc30>
    a478:	ldr	r3, [sp, #40]	; 0x28
    a47a:	cbz	r3, a48e <_strtod_l+0x59e>
    a47c:	mov	r1, r6
    a47e:	ldr	r2, [sp, #40]	; 0x28
    a480:	mov	r0, r9
    a482:	bl	ef90 <__pow5mult>
    a486:	mov	r6, r0
    a488:	cmp	r0, #0
    a48a:	beq.w	a8b8 <_strtod_l+0x9c8>
    a48e:	cmp	r5, #0
    a490:	ble.n	a4a4 <_strtod_l+0x5b4>
    a492:	mov	r1, r6
    a494:	mov	r2, r5
    a496:	mov	r0, r9
    a498:	bl	f030 <__lshift>
    a49c:	mov	r6, r0
    a49e:	cmp	r0, #0
    a4a0:	beq.w	a8b8 <_strtod_l+0x9c8>
    a4a4:	cmp	r7, #0
    a4a6:	ble.n	a4ba <_strtod_l+0x5ca>
    a4a8:	mov	r1, r4
    a4aa:	mov	r2, r7
    a4ac:	mov	r0, r9
    a4ae:	bl	f030 <__lshift>
    a4b2:	mov	r4, r0
    a4b4:	cmp	r0, #0
    a4b6:	beq.w	a8b8 <_strtod_l+0x9c8>
    a4ba:	mov	r2, r6
    a4bc:	ldr	r1, [sp, #80]	; 0x50
    a4be:	mov	r0, r9
    a4c0:	bl	f124 <__mdiff>
    a4c4:	mov	r8, r0
    a4c6:	cmp	r0, #0
    a4c8:	beq.w	a8b8 <_strtod_l+0x9c8>
    a4cc:	movs	r3, #0
    a4ce:	ldr	r5, [r0, #12]
    a4d0:	str	r3, [r0, #12]
    a4d2:	mov	r1, r4
    a4d4:	bl	f0e0 <__mcmp>
    a4d8:	cmp	r0, #0
    a4da:	blt.w	ab26 <_strtod_l+0xc36>
    a4de:	beq.w	abe8 <_strtod_l+0xcf8>
    a4e2:	mov	r1, r4
    a4e4:	mov	r0, r8
    a4e6:	bl	f418 <__ratio>
    a4ea:	vmov.f64	d7, #0	; 0x40000000  2.0
    a4ee:	vcmpe.f64	d0, d7
    a4f2:	vmrs	APSR_nzcv, fpscr
    a4f6:	bhi.n	a586 <_strtod_l+0x696>
    a4f8:	cmp	r5, #0
    a4fa:	beq.n	a5cc <_strtod_l+0x6dc>
    a4fc:	vmov.f64	d13, #112	; 0x3f800000  1.0
    a500:	ldr	r3, [pc, #300]	; (a630 <_strtod_l+0x740>)
    a502:	ldr	r1, [sp, #28]
    a504:	movs	r2, #0
    a506:	ldr	r7, [pc, #300]	; (a634 <_strtod_l+0x744>)
    a508:	ldr	r0, [pc, #300]	; (a638 <_strtod_l+0x748>)
    a50a:	ands	r7, r1
    a50c:	cmp	r7, r0
    a50e:	beq.w	a7f0 <_strtod_l+0x900>
    a512:	ldr	r1, [sp, #36]	; 0x24
    a514:	cbz	r1, a52e <_strtod_l+0x63e>
    a516:	cmp.w	r7, #111149056	; 0x6a00000
    a51a:	bhi.n	a52e <_strtod_l+0x63e>
    a51c:	vcmpe.f64	d13, d8
    a520:	vmrs	APSR_nzcv, fpscr
    a524:	bls.w	a70c <_strtod_l+0x81c>
    a528:	add.w	r1, r3, #112197632	; 0x6b00000
    a52c:	subs	r3, r1, r7
    a52e:	vldr	d0, [sp, #16]
    a532:	vmov	d12, r2, r3
    a536:	bl	f238 <__ulp>
    a53a:	vldr	d7, [sp, #16]
    a53e:	vfma.f64	d7, d12, d0
    a542:	vmov	r2, r3, d7
    a546:	strd	r2, r3, [sp, #24]
    a54a:	mov	r2, r3
    a54c:	ldr	r3, [sp, #36]	; 0x24
    a54e:	cbnz	r3, a55a <_strtod_l+0x66a>
    a550:	ldr	r3, [pc, #224]	; (a634 <_strtod_l+0x744>)
    a552:	ands	r3, r2
    a554:	cmp	r7, r3
    a556:	beq.w	a854 <_strtod_l+0x964>
    a55a:	ldr	r1, [sp, #80]	; 0x50
    a55c:	mov	r0, r9
    a55e:	bl	ec84 <_Bfree>
    a562:	mov	r1, r6
    a564:	mov	r0, r9
    a566:	bl	ec84 <_Bfree>
    a56a:	mov	r1, r4
    a56c:	mov	r0, r9
    a56e:	bl	ec84 <_Bfree>
    a572:	mov	r1, r8
    a574:	mov	r0, r9
    a576:	bl	ec84 <_Bfree>
    a57a:	b.n	a37c <_strtod_l+0x48c>
    a57c:	movs	r2, #0
    a57e:	str	r2, [sp, #56]	; 0x38
    a580:	movs	r2, #1
    a582:	str	r2, [sp, #52]	; 0x34
    a584:	b.n	a408 <_strtod_l+0x518>
    a586:	vmov.f64	d7, #96	; 0x3f000000  0.5
    a58a:	vmul.f64	d13, d0, d7
    a58e:	cbnz	r5, a5ec <_strtod_l+0x6fc>
    a590:	vneg.f64	d7, d13
    a594:	vmov	r2, r3, d7
    a598:	ldr	r1, [sp, #28]
    a59a:	b.n	a506 <_strtod_l+0x616>
    a59c:	mov.w	fp, #1
    a5a0:	cbnz	r0, a602 <_strtod_l+0x712>
    a5a2:	ldr	r3, [sp, #36]	; 0x24
    a5a4:	cmp	r3, #0
    a5a6:	beq.w	9f90 <_strtod_l+0xa0>
    a5aa:	mov	r5, r0
    a5ac:	b.n	a26e <_strtod_l+0x37e>
    a5ae:	ldr	r3, [sp, #40]	; 0x28
    a5b0:	ldr	r7, [sp, #44]	; 0x2c
    a5b2:	subs	r5, r3, r2
    a5b4:	b.n	a3dc <_strtod_l+0x4ec>
    a5b6:	mov.w	fp, #1
    a5ba:	b.n	a03e <_strtod_l+0x14e>
    a5bc:	ldr	r1, [pc, #124]	; (a63c <_strtod_l+0x74c>)
    a5be:	subs	r1, r1, r2
    a5c0:	movs	r2, #1
    a5c2:	lsl.w	r1, r2, r1
    a5c6:	str	r1, [sp, #56]	; 0x38
    a5c8:	str	r2, [sp, #52]	; 0x34
    a5ca:	b.n	a408 <_strtod_l+0x518>
    a5cc:	ldrd	r1, r2, [sp, #24]
    a5d0:	cmp	r1, #0
    a5d2:	beq.w	a6de <_strtod_l+0x7ee>
    a5d6:	ldrd	r1, r2, [sp, #24]
    a5da:	cmp	r1, #1
    a5dc:	beq.w	aabc <_strtod_l+0xbcc>
    a5e0:	mov	r1, r2
    a5e2:	vmov.f64	d13, #112	; 0x3f800000  1.0
    a5e6:	movs	r2, #0
    a5e8:	ldr	r3, [pc, #84]	; (a640 <_strtod_l+0x750>)
    a5ea:	b.n	a506 <_strtod_l+0x616>
    a5ec:	vmov	r2, r3, d13
    a5f0:	b.n	a598 <_strtod_l+0x6a8>
    a5f2:	movs	r3, #1
    a5f4:	str	r3, [sp, #16]
    a5f6:	add.w	r3, r8, #2
    a5fa:	str	r3, [sp, #76]	; 0x4c
    a5fc:	ldrb.w	r4, [r8, #2]
    a600:	b.n	a28c <_strtod_l+0x39c>
    a602:	movs	r5, #0
    a604:	b.n	a26e <_strtod_l+0x37e>
    a606:	nop
    a608:	.word	0x94a03595
    a60c:	.word	0x3fdfffff
    a610:	.word	0x35afe535
    a614:	.word	0x3fe00000
    a618:	.word	0x94a03595
    a61c:	.word	0x3fcfffff
    a620:	.word	0xffc00000
    a624:	.word	0x41dfffff
    a628:	.word	0x200002a8
    a62c:	.word	0xfffffc02
    a630:	.word	0x3ff00000
    a634:	.word	0x7ff00000
    a638:	.word	0x7fe00000
    a63c:	.word	0xfffffbe2
    a640:	.word	0xbff00000
    a644:	cmp.w	r3, #308	; 0x134
    a648:	bgt.w	a83c <_strtod_l+0x94c>
    a64c:	asrs	r3, r3, #4
    a64e:	cmp	r3, #1
    a650:	ldr.w	lr, [pc, #704]	; a914 <_strtod_l+0xa24>
    a654:	ble.w	ac52 <_strtod_l+0xd62>
    a658:	vldr	d7, [sp, #24]
    a65c:	vstr	d7, [sp, #16]
    a660:	movs	r7, #0
    a662:	mov	r1, lr
    a664:	mov	r0, r7
    a666:	tst.w	r3, #1
    a66a:	add.w	r0, r0, #1
    a66e:	mov.w	r3, r3, asr #1
    a672:	beq.n	a686 <_strtod_l+0x796>
    a674:	vldr	d6, [sp, #16]
    a678:	vldr	d7, [r1]
    a67c:	vmul.f64	d7, d6, d7
    a680:	vstr	d7, [sp, #16]
    a684:	movs	r7, #1
    a686:	cmp	r3, #1
    a688:	add.w	r1, r1, #8
    a68c:	bne.n	a666 <_strtod_l+0x776>
    a68e:	cmp	r7, #0
    a690:	bne.w	ad32 <_strtod_l+0xe42>
    a694:	ldr	r3, [sp, #28]
    a696:	ldr	r1, [pc, #608]	; (a8f8 <_strtod_l+0xa08>)
    a698:	sub.w	r3, r3, #55574528	; 0x3500000
    a69c:	str	r3, [sp, #28]
    a69e:	add.w	r0, lr, r0, lsl #3
    a6a2:	vldr	d6, [sp, #24]
    a6a6:	vldr	d7, [r0]
    a6aa:	vmul.f64	d7, d7, d6
    a6ae:	vmov	r7, r8, d7
    a6b2:	bic.w	r3, r8, #2147483648	; 0x80000000
    a6b6:	lsrs	r3, r3, #20
    a6b8:	lsls	r3, r3, #20
    a6ba:	cmp	r3, r1
    a6bc:	strd	r7, r8, [sp, #24]
    a6c0:	bhi.w	a83c <_strtod_l+0x94c>
    a6c4:	sub.w	r1, r1, #1048576	; 0x100000
    a6c8:	cmp	r3, r1
    a6ca:	bls.w	ac20 <_strtod_l+0xd30>
    a6ce:	ldr	r3, [pc, #556]	; (a8fc <_strtod_l+0xa0c>)
    a6d0:	str	r3, [sp, #28]
    a6d2:	movs	r3, #0
    a6d4:	str	r3, [sp, #36]	; 0x24
    a6d6:	mov.w	r3, #4294967295
    a6da:	str	r3, [sp, #24]
    a6dc:	b.n	a33c <_strtod_l+0x44c>
    a6de:	ubfx	r3, r2, #0, #20
    a6e2:	mov	r1, r2
    a6e4:	cmp	r3, #0
    a6e6:	bne.w	a5e2 <_strtod_l+0x6f2>
    a6ea:	vmov.f64	d7, #112	; 0x3f800000  1.0
    a6ee:	vcmpe.f64	d0, d7
    a6f2:	vmrs	APSR_nzcv, fpscr
    a6f6:	bmi.w	ac2a <_strtod_l+0xd3a>
    a6fa:	vmov.f64	d7, #96	; 0x3f000000  0.5
    a6fe:	vmul.f64	d13, d0, d7
    a702:	vneg.f64	d7, d13
    a706:	vmov	r2, r3, d7
    a70a:	b.n	a506 <_strtod_l+0x616>
    a70c:	vcvt.u32.f64	s0, d13
    a710:	vmov	r3, s0
    a714:	cmp	r3, #0
    a716:	beq.w	aa3a <_strtod_l+0xb4a>
    a71a:	vcvt.f64.u32	d13, s0
    a71e:	cmp	r5, #0
    a720:	bne.w	aab6 <_strtod_l+0xbc6>
    a724:	vneg.f64	d7, d13
    a728:	vmov	r2, r3, d7
    a72c:	b.n	a528 <_strtod_l+0x638>
    a72e:	add	r0, sp, #76	; 0x4c
    a730:	ldr	r1, [pc, #460]	; (a900 <_strtod_l+0xa10>)
    a732:	bl	e9f0 <__match>
    a736:	cmp	r0, #0
    a738:	beq.w	9f90 <_strtod_l+0xa0>
    a73c:	ldr	r3, [sp, #76]	; 0x4c
    a73e:	ldrb	r3, [r3, #0]
    a740:	cmp	r3, #40	; 0x28
    a742:	beq.w	acd4 <_strtod_l+0xde4>
    a746:	ldr	r3, [pc, #444]	; (a904 <_strtod_l+0xa14>)
    a748:	str	r3, [sp, #28]
    a74a:	movs	r3, #0
    a74c:	str	r3, [sp, #24]
    a74e:	b.n	a246 <_strtod_l+0x356>
    a750:	str.w	r8, [sp, #76]	; 0x4c
    a754:	movs	r3, #0
    a756:	b.n	a04c <_strtod_l+0x15c>
    a758:	movs	r3, #0
    a75a:	str	r3, [sp, #16]
    a75c:	b.n	a5f6 <_strtod_l+0x706>
    a75e:	ldr	r2, [sp, #32]
    a760:	str	r6, [sp, #8]
    a762:	add	r3, sp, #80	; 0x50
    a764:	str	r2, [sp, #4]
    a766:	str	r3, [sp, #0]
    a768:	ldr	r2, [pc, #412]	; (a908 <_strtod_l+0xa18>)
    a76a:	add	r3, sp, #84	; 0x54
    a76c:	add	r1, sp, #76	; 0x4c
    a76e:	mov	r0, r9
    a770:	bl	e4e0 <__gethex>
    a774:	ands.w	r6, r0, #7
    a778:	mov	r4, r0
    a77a:	beq.w	a192 <_strtod_l+0x2a2>
    a77e:	cmp	r6, #6
    a780:	bne.w	aa40 <_strtod_l+0xb50>
    a784:	vldr	d7, [pc, #360]	; a8f0 <_strtod_l+0xa00>
    a788:	adds	r5, #1
    a78a:	movs	r3, #0
    a78c:	str	r5, [sp, #76]	; 0x4c
    a78e:	vstr	d7, [sp, #16]
    a792:	str	r3, [sp, #32]
    a794:	b.n	a19a <_strtod_l+0x2aa>
    a796:	ldr.w	r1, [fp]
    a79a:	ldr	r2, [sp, #16]
    a79c:	mov	r0, r5
    a79e:	bl	9e1c <strncmp>
    a7a2:	cbz	r0, a7b4 <_strtod_l+0x8c4>
    a7a4:	movs	r2, #0
    a7a6:	mov	r7, r2
    a7a8:	mov	r6, r2
    a7aa:	mov	r0, r2
    a7ac:	mov	ip, r2
    a7ae:	mov	r5, r2
    a7b0:	mov	fp, r2
    a7b2:	b.n	a03e <_strtod_l+0x14e>
    a7b4:	ldr	r2, [sp, #76]	; 0x4c
    a7b6:	ldr	r1, [sp, #16]
    a7b8:	adds	r3, r2, r1
    a7ba:	str	r3, [sp, #76]	; 0x4c
    a7bc:	ldrb	r4, [r2, r1]
    a7be:	cmp	r4, #48	; 0x30
    a7c0:	bne.n	a7d0 <_strtod_l+0x8e0>
    a7c2:	adds	r3, #1
    a7c4:	str	r3, [sp, #76]	; 0x4c
    a7c6:	ldrb	r4, [r3, #0]
    a7c8:	cmp	r4, #48	; 0x30
    a7ca:	add.w	r0, r0, #1
    a7ce:	beq.n	a7c2 <_strtod_l+0x8d2>
    a7d0:	sub.w	r3, r4, #49	; 0x31
    a7d4:	cmp	r3, #8
    a7d6:	bls.w	aade <_strtod_l+0xbee>
    a7da:	movs	r2, #0
    a7dc:	cmp	r4, #101	; 0x65
    a7de:	mov	r7, r2
    a7e0:	mov	r6, r2
    a7e2:	mov	ip, r2
    a7e4:	beq.w	a59c <_strtod_l+0x6ac>
    a7e8:	mov	r5, r2
    a7ea:	mov.w	fp, #1
    a7ee:	b.n	a044 <_strtod_l+0x154>
    a7f0:	sub.w	r1, r1, #55574528	; 0x3500000
    a7f4:	str	r1, [sp, #28]
    a7f6:	vldr	d14, [sp, #24]
    a7fa:	vmov.f64	d0, d14
    a7fe:	vmov	d12, r2, r3
    a802:	bl	f238 <__ulp>
    a806:	vfma.f64	d14, d12, d0
    a80a:	vmov	r2, r3, d14
    a80e:	strd	r2, r3, [sp, #24]
    a812:	bic.w	r3, r3, #2147483648	; 0x80000000
    a816:	lsrs	r3, r3, #20
    a818:	ldr	r2, [pc, #240]	; (a90c <_strtod_l+0xa1c>)
    a81a:	ldrd	r0, r1, [sp, #16]
    a81e:	lsls	r3, r3, #20
    a820:	cmp	r3, r2
    a822:	strd	r0, r1, [sp, #64]	; 0x40
    a826:	bls.w	a9fa <_strtod_l+0xb0a>
    a82a:	ldr	r3, [pc, #208]	; (a8fc <_strtod_l+0xa0c>)
    a82c:	cmp	r1, r3
    a82e:	beq.n	a8b2 <_strtod_l+0x9c2>
    a830:	ldr	r3, [pc, #200]	; (a8fc <_strtod_l+0xa0c>)
    a832:	str	r3, [sp, #28]
    a834:	mov.w	r3, #4294967295
    a838:	str	r3, [sp, #24]
    a83a:	b.n	a55a <_strtod_l+0x66a>
    a83c:	ldr	r3, [pc, #208]	; (a910 <_strtod_l+0xa20>)
    a83e:	str	r3, [sp, #28]
    a840:	movs	r2, #0
    a842:	str	r2, [sp, #24]
    a844:	vldr	d7, [sp, #24]
    a848:	movs	r3, #34	; 0x22
    a84a:	vstr	d7, [sp, #16]
    a84e:	str.w	r3, [r9]
    a852:	b.n	a19a <_strtod_l+0x2aa>
    a854:	vcvt.s32.f64	s14, d13
    a858:	vcvt.f64.s32	d7, s14
    a85c:	vsub.f64	d7, d13, d7
    a860:	cmp	r5, #0
    a862:	bne.n	a8d6 <_strtod_l+0x9e6>
    a864:	ldr	r3, [sp, #24]
    a866:	cbnz	r3, a8d6 <_strtod_l+0x9e6>
    a868:	ubfx	r2, r2, #0, #20
    a86c:	cbnz	r2, a8d6 <_strtod_l+0x9e6>
    a86e:	vcmpe.f64	d7, d11
    a872:	vmrs	APSR_nzcv, fpscr
    a876:	bpl.w	a55a <_strtod_l+0x66a>
    a87a:	vldr	d7, [sp, #24]
    a87e:	vstr	d7, [sp, #16]
    a882:	ldr.w	sl, [sp, #60]	; 0x3c
    a886:	ldr	r0, [sp, #80]	; 0x50
    a888:	mov	r1, r0
    a88a:	mov	r0, r9
    a88c:	bl	ec84 <_Bfree>
    a890:	mov	r1, r6
    a892:	mov	r0, r9
    a894:	bl	ec84 <_Bfree>
    a898:	mov	r1, r4
    a89a:	mov	r0, r9
    a89c:	bl	ec84 <_Bfree>
    a8a0:	mov	r1, fp
    a8a2:	mov	r0, r9
    a8a4:	bl	ec84 <_Bfree>
    a8a8:	mov	r1, r8
    a8aa:	mov	r0, r9
    a8ac:	bl	ec84 <_Bfree>
    a8b0:	b.n	a19a <_strtod_l+0x2aa>
    a8b2:	ldr	r3, [sp, #64]	; 0x40
    a8b4:	adds	r3, #1
    a8b6:	bne.n	a830 <_strtod_l+0x940>
    a8b8:	ldr.w	sl, [sp, #60]	; 0x3c
    a8bc:	ldr	r0, [sp, #80]	; 0x50
    a8be:	ldr	r3, [pc, #80]	; (a910 <_strtod_l+0xa20>)
    a8c0:	str	r3, [sp, #28]
    a8c2:	movs	r2, #0
    a8c4:	str	r2, [sp, #24]
    a8c6:	vldr	d7, [sp, #24]
    a8ca:	movs	r3, #34	; 0x22
    a8cc:	vstr	d7, [sp, #16]
    a8d0:	str.w	r3, [r9]
    a8d4:	b.n	a888 <_strtod_l+0x998>
    a8d6:	vcmpe.f64	d7, d10
    a8da:	vmrs	APSR_nzcv, fpscr
    a8de:	bmi.n	a87a <_strtod_l+0x98a>
    a8e0:	vcmpe.f64	d7, d9
    a8e4:	vmrs	APSR_nzcv, fpscr
    a8e8:	ble.w	a55a <_strtod_l+0x66a>
    a8ec:	b.n	a87a <_strtod_l+0x98a>
    a8ee:	nop
	...
    a8f8:	.word	0x7ca00000
    a8fc:	.word	0x7fefffff
    a900:	.word	0x200016a0
    a904:	.word	0xfff80000
    a908:	.word	0x20000ac8
    a90c:	.word	0x7c9fffff
    a910:	.word	0x7ff00000
    a914:	.word	0x20000280
    a918:	beq.w	a338 <_strtod_l+0x448>
    a91c:	negs	r3, r3
    a91e:	ands.w	r0, r3, #15
    a922:	beq.n	a93a <_strtod_l+0xa4a>
    a924:	ldr	r1, [pc, #688]	; (abd8 <_strtod_l+0xce8>)
    a926:	add.w	r1, r1, r0, lsl #3
    a92a:	vldr	d5, [sp, #24]
    a92e:	vldr	d7, [r1]
    a932:	vdiv.f64	d6, d5, d7
    a936:	vstr	d6, [sp, #24]
    a93a:	asrs	r3, r3, #4
    a93c:	beq.w	a338 <_strtod_l+0x448>
    a940:	cmp	r3, #31
    a942:	bgt.n	a9c0 <_strtod_l+0xad0>
    a944:	ands.w	r1, r3, #16
    a948:	beq.w	acba <_strtod_l+0xdca>
    a94c:	cmp	r3, #0
    a94e:	ble.w	ad24 <_strtod_l+0xe34>
    a952:	movs	r1, #106	; 0x6a
    a954:	str	r1, [sp, #36]	; 0x24
    a956:	vldr	d7, [sp, #24]
    a95a:	vstr	d7, [sp, #16]
    a95e:	ldr	r1, [pc, #636]	; (abdc <_strtod_l+0xcec>)
    a960:	movs	r0, #0
    a962:	lsls	r7, r3, #31
    a964:	bpl.n	a978 <_strtod_l+0xa88>
    a966:	vldr	d6, [sp, #16]
    a96a:	vldr	d7, [r1]
    a96e:	vmul.f64	d7, d6, d7
    a972:	vstr	d7, [sp, #16]
    a976:	movs	r0, #1
    a978:	asrs	r3, r3, #1
    a97a:	add.w	r1, r1, #8
    a97e:	bne.n	a962 <_strtod_l+0xa72>
    a980:	cmp	r0, #0
    a982:	bne.w	ad3c <_strtod_l+0xe4c>
    a986:	ldr	r3, [sp, #36]	; 0x24
    a988:	cbz	r3, a9b0 <_strtod_l+0xac0>
    a98a:	ldrd	r0, r1, [sp, #24]
    a98e:	ubfx	r3, r1, #20, #11
    a992:	rsb	r3, r3, #107	; 0x6b
    a996:	cmp	r3, #0
    a998:	ble.n	a9b0 <_strtod_l+0xac0>
    a99a:	cmp	r3, #31
    a99c:	ble.w	acc4 <_strtod_l+0xdd4>
    a9a0:	movs	r0, #0
    a9a2:	cmp	r3, #52	; 0x34
    a9a4:	str	r0, [sp, #24]
    a9a6:	ble.w	ad0e <_strtod_l+0xe1e>
    a9aa:	mov.w	r3, #57671680	; 0x3700000
    a9ae:	str	r3, [sp, #28]
    a9b0:	vldr	d7, [sp, #24]
    a9b4:	vcmp.f64	d7, #0.0
    a9b8:	vmrs	APSR_nzcv, fpscr
    a9bc:	bne.w	a33c <_strtod_l+0x44c>
    a9c0:	vldr	d7, [pc, #524]	; abd0 <_strtod_l+0xce0>
    a9c4:	movs	r3, #34	; 0x22
    a9c6:	str.w	r3, [r9]
    a9ca:	vstr	d7, [sp, #16]
    a9ce:	b.w	a19a <_strtod_l+0x2aa>
    a9d2:	ldr	r1, [sp, #76]	; 0x4c
    a9d4:	adds	r5, #1
    a9d6:	cmp	r0, #8
    a9d8:	ble.w	aaf2 <_strtod_l+0xc02>
    a9dc:	cmp	r5, #16
    a9de:	itt	le
    a9e0:	addle.w	r7, r7, r7, lsl #2
    a9e4:	addle.w	r7, r3, r7, lsl #1
    a9e8:	movs	r0, #0
    a9ea:	adds	r3, r1, #1
    a9ec:	str	r3, [sp, #76]	; 0x4c
    a9ee:	ldrb	r4, [r1, #1]
    a9f0:	b.w	a124 <_strtod_l+0x234>
    a9f4:	movw	r3, #19999	; 0x4e1f
    a9f8:	b.n	a2fe <_strtod_l+0x40e>
    a9fa:	ldr	r3, [sp, #28]
    a9fc:	add.w	r2, r3, #55574528	; 0x3500000
    aa00:	str	r2, [sp, #28]
    aa02:	b.n	a54c <_strtod_l+0x65c>
    aa04:	rsb	r3, r5, #37	; 0x25
    aa08:	cmp	r4, r3
    aa0a:	bgt.w	a30a <_strtod_l+0x41a>
    aa0e:	rsb	r5, r5, #15
    aa12:	ldr	r3, [pc, #452]	; (abd8 <_strtod_l+0xce8>)
    aa14:	subs	r2, r4, r5
    aa16:	add.w	r2, r3, r2, lsl #3
    aa1a:	add.w	r3, r3, r5, lsl #3
    aa1e:	vldr	d6, [r2]
    aa22:	vldr	d7, [r3]
    aa26:	vldr	d5, [sp, #24]
    aa2a:	vmul.f64	d7, d7, d5
    aa2e:	vmul.f64	d7, d7, d6
    aa32:	vstr	d7, [sp, #16]
    aa36:	b.w	a19a <_strtod_l+0x2aa>
    aa3a:	vmov.f64	d13, #112	; 0x3f800000  1.0
    aa3e:	b.n	a71e <_strtod_l+0x82e>
    aa40:	ldr	r2, [sp, #80]	; 0x50
    aa42:	cbz	r2, aa54 <_strtod_l+0xb64>
    aa44:	movs	r1, #53	; 0x35
    aa46:	add	r0, sp, #88	; 0x58
    aa48:	bl	f474 <__copybits>
    aa4c:	mov	r0, r9
    aa4e:	ldr	r1, [sp, #80]	; 0x50
    aa50:	bl	ec84 <_Bfree>
    aa54:	cmp	r6, #6
    aa56:	bhi.n	aa70 <_strtod_l+0xb80>
    aa58:	tbb	[pc, r6]
    aa5c:	.word	0x13181d29
    aa60:	.short	0x1d04
    aa62:	.byte	0x29
    aa63:	.byte	0x00
    aa64:	mvn.w	r3, #2147483648	; 0x80000000
    aa68:	str	r3, [sp, #28]
    aa6a:	mov.w	r3, #4294967295
    aa6e:	str	r3, [sp, #24]
    aa70:	lsls	r3, r4, #28
    aa72:	bpl.w	a246 <_strtod_l+0x356>
    aa76:	ldr	r3, [sp, #28]
    aa78:	orr.w	r3, r3, #2147483648	; 0x80000000
    aa7c:	str	r3, [sp, #28]
    aa7e:	b.w	a246 <_strtod_l+0x356>
    aa82:	ldr	r3, [pc, #348]	; (abe0 <_strtod_l+0xcf0>)
    aa84:	str	r3, [sp, #28]
    aa86:	movs	r3, #0
    aa88:	str	r3, [sp, #24]
    aa8a:	b.n	aa70 <_strtod_l+0xb80>
    aa8c:	ldr	r3, [sp, #88]	; 0x58
    aa8e:	str	r3, [sp, #24]
    aa90:	ldr	r3, [sp, #92]	; 0x5c
    aa92:	str	r3, [sp, #28]
    aa94:	b.n	aa70 <_strtod_l+0xb80>
    aa96:	ldr	r2, [sp, #84]	; 0x54
    aa98:	ldr	r3, [sp, #92]	; 0x5c
    aa9a:	ldr	r1, [sp, #88]	; 0x58
    aa9c:	str	r1, [sp, #24]
    aa9e:	addw	r2, r2, #1075	; 0x433
    aaa2:	bic.w	r3, r3, #1048576	; 0x100000
    aaa6:	orr.w	r3, r3, r2, lsl #20
    aaaa:	str	r3, [sp, #28]
    aaac:	b.n	aa70 <_strtod_l+0xb80>
    aaae:	movs	r3, #0
    aab0:	str	r3, [sp, #28]
    aab2:	str	r3, [sp, #24]
    aab4:	b.n	aa70 <_strtod_l+0xb80>
    aab6:	vmov	r2, r3, d13
    aaba:	b.n	a528 <_strtod_l+0x638>
    aabc:	ldrd	r2, r3, [sp, #24]
    aac0:	mov	r1, r3
    aac2:	cmp	r3, #0
    aac4:	bne.w	a5e2 <_strtod_l+0x6f2>
    aac8:	ldr.w	sl, [sp, #60]	; 0x3c
    aacc:	ldr	r0, [sp, #80]	; 0x50
    aace:	vldr	d7, [pc, #256]	; abd0 <_strtod_l+0xce0>
    aad2:	movs	r3, #34	; 0x22
    aad4:	str.w	r3, [r9]
    aad8:	vstr	d7, [sp, #16]
    aadc:	b.n	a888 <_strtod_l+0x998>
    aade:	ldr	r3, [sp, #76]	; 0x4c
    aae0:	str	r3, [sp, #40]	; 0x28
    aae2:	movs	r6, #0
    aae4:	subs	r4, #48	; 0x30
    aae6:	add.w	ip, r0, #1
    aaea:	mov	r1, r3
    aaec:	mov	r2, r6
    aaee:	mov	r7, r6
    aaf0:	movs	r5, #1
    aaf2:	add.w	r6, r6, r6, lsl #2
    aaf6:	add.w	r6, r4, r6, lsl #1
    aafa:	movs	r0, #0
    aafc:	b.n	a9ea <_strtod_l+0xafa>
    aafe:	cmn.w	r4, #22
    ab02:	blt.w	a30a <_strtod_l+0x41a>
    ab06:	ldr	r3, [pc, #208]	; (abd8 <_strtod_l+0xce8>)
    ab08:	sub.w	r4, r3, r4, lsl #3
    ab0c:	vldr	d7, [r4]
    ab10:	vldr	d5, [sp, #24]
    ab14:	vdiv.f64	d6, d5, d7
    ab18:	vstr	d6, [sp, #16]
    ab1c:	b.w	a19a <_strtod_l+0x2aa>
    ab20:	ldr.w	sl, [sp, #60]	; 0x3c
    ab24:	b.n	a8be <_strtod_l+0x9ce>
    ab26:	ldr.w	sl, [sp, #60]	; 0x3c
    ab2a:	cbnz	r5, ab94 <_strtod_l+0xca4>
    ab2c:	ldrd	r1, r2, [sp, #24]
    ab30:	cbnz	r1, ab94 <_strtod_l+0xca4>
    ab32:	ubfx	r3, r2, #0, #20
    ab36:	mov	r7, r2
    ab38:	cbnz	r3, ab94 <_strtod_l+0xca4>
    ab3a:	bic.w	r3, r2, #2147483648	; 0x80000000
    ab3e:	lsrs	r3, r3, #20
    ab40:	lsls	r3, r3, #20
    ab42:	cmp.w	r3, #112197632	; 0x6b00000
    ab46:	bls.n	ab94 <_strtod_l+0xca4>
    ab48:	ldr.w	r3, [r8, #20]
    ab4c:	cbnz	r3, ab56 <_strtod_l+0xc66>
    ab4e:	ldr.w	r3, [r8, #16]
    ab52:	cmp	r3, #1
    ab54:	ble.n	ab94 <_strtod_l+0xca4>
    ab56:	mov	r1, r8
    ab58:	movs	r2, #1
    ab5a:	mov	r0, r9
    ab5c:	bl	f030 <__lshift>
    ab60:	mov	r1, r4
    ab62:	mov	r8, r0
    ab64:	bl	f0e0 <__mcmp>
    ab68:	cmp	r0, #0
    ab6a:	ble.n	ab94 <_strtod_l+0xca4>
    ab6c:	ldr	r3, [sp, #36]	; 0x24
    ab6e:	cmp	r3, #0
    ab70:	bne.w	acf8 <_strtod_l+0xe08>
    ab74:	ldr	r3, [pc, #104]	; (abe0 <_strtod_l+0xcf0>)
    ab76:	ands	r3, r7
    ab78:	sub.w	r3, r3, #1048576	; 0x100000
    ab7c:	mvn.w	r3, r3, lsr #20
    ab80:	mvn.w	r3, r3, lsl #20
    ab84:	str	r3, [sp, #28]
    ab86:	mov.w	r3, #4294967295
    ab8a:	str	r3, [sp, #24]
    ab8c:	vldr	d7, [sp, #24]
    ab90:	vstr	d7, [sp, #16]
    ab94:	ldr	r3, [sp, #36]	; 0x24
    ab96:	cbz	r3, abc8 <_strtod_l+0xcd8>
    ab98:	ldr	r3, [pc, #72]	; (abe4 <_strtod_l+0xcf4>)
    ab9a:	str	r3, [sp, #68]	; 0x44
    ab9c:	movs	r3, #0
    ab9e:	str	r3, [sp, #64]	; 0x40
    aba0:	vldr	d7, [sp, #16]
    aba4:	vldr	d6, [sp, #64]	; 0x40
    aba8:	vmul.f64	d7, d7, d6
    abac:	vstr	d7, [sp, #16]
    abb0:	ldrd	r2, r3, [sp, #16]
    abb4:	strd	r2, r3, [sp, #24]
    abb8:	cbnz	r3, abc8 <_strtod_l+0xcd8>
    abba:	ldr	r3, [sp, #24]
    abbc:	cbnz	r3, abc8 <_strtod_l+0xcd8>
    abbe:	movs	r3, #34	; 0x22
    abc0:	ldr	r0, [sp, #80]	; 0x50
    abc2:	str.w	r3, [r9]
    abc6:	b.n	a888 <_strtod_l+0x998>
    abc8:	ldr	r0, [sp, #80]	; 0x50
    abca:	b.n	a888 <_strtod_l+0x998>
    abcc:	nop.w
	...
    abd8:	.word	0x200002a8
    abdc:	.word	0x20000370
    abe0:	.word	0x7ff00000
    abe4:	.word	0x39500000
    abe8:	ldr.w	sl, [sp, #60]	; 0x3c
    abec:	cbz	r5, ac34 <_strtod_l+0xd44>
    abee:	ldr	r2, [sp, #28]
    abf0:	ldr	r3, [pc, #344]	; (ad4c <_strtod_l+0xe5c>)
    abf2:	ubfx	r1, r2, #0, #20
    abf6:	cmp	r1, r3
    abf8:	beq.n	ac56 <_strtod_l+0xd66>
    abfa:	ldr	r3, [sp, #56]	; 0x38
    abfc:	cbz	r3, ac48 <_strtod_l+0xd58>
    abfe:	ldr	r2, [sp, #28]
    ac00:	tst	r3, r2
    ac02:	beq.n	ab94 <_strtod_l+0xca4>
    ac04:	ldrd	r0, r1, [sp, #24]
    ac08:	ldr	r2, [sp, #36]	; 0x24
    ac0a:	cmp	r5, #0
    ac0c:	beq.n	ac96 <_strtod_l+0xda6>
    ac0e:	bl	9ebc <sulp>
    ac12:	vldr	d7, [sp, #16]
    ac16:	vadd.f64	d7, d7, d0
    ac1a:	vstr	d7, [sp, #16]
    ac1e:	b.n	ab94 <_strtod_l+0xca4>
    ac20:	add.w	r3, r8, #55574528	; 0x3500000
    ac24:	str	r3, [sp, #28]
    ac26:	b.w	a338 <_strtod_l+0x448>
    ac2a:	movs	r2, #0
    ac2c:	ldr	r3, [pc, #288]	; (ad50 <_strtod_l+0xe60>)
    ac2e:	vmov.f64	d13, #96	; 0x3f000000  0.5
    ac32:	b.n	a506 <_strtod_l+0x616>
    ac34:	ldrd	r1, r2, [sp, #24]
    ac38:	ubfx	r3, r2, #0, #20
    ac3c:	mov	r7, r2
    ac3e:	cmp	r3, #0
    ac40:	bne.n	abfa <_strtod_l+0xd0a>
    ac42:	cmp	r1, #0
    ac44:	bne.n	abfa <_strtod_l+0xd0a>
    ac46:	b.n	ab6c <_strtod_l+0xc7c>
    ac48:	ldr	r3, [sp, #52]	; 0x34
    ac4a:	ldr	r2, [sp, #24]
    ac4c:	tst	r3, r2
    ac4e:	beq.n	ab94 <_strtod_l+0xca4>
    ac50:	b.n	ac04 <_strtod_l+0xd14>
    ac52:	movs	r0, #0
    ac54:	b.n	a694 <_strtod_l+0x7a4>
    ac56:	ldr	r3, [sp, #36]	; 0x24
    ac58:	ldr	r1, [sp, #24]
    ac5a:	cbz	r3, acb4 <_strtod_l+0xdc4>
    ac5c:	ldr	r3, [pc, #244]	; (ad54 <_strtod_l+0xe64>)
    ac5e:	ands	r3, r2
    ac60:	cmp.w	r3, #111149056	; 0x6a00000
    ac64:	bhi.n	acb4 <_strtod_l+0xdc4>
    ac66:	lsrs	r3, r3, #20
    ac68:	rsb	r3, r3, #107	; 0x6b
    ac6c:	mov.w	r0, #4294967295
    ac70:	lsl.w	r3, r0, r3
    ac74:	cmp	r3, r1
    ac76:	bne.n	abfa <_strtod_l+0xd0a>
    ac78:	ldr	r1, [pc, #220]	; (ad58 <_strtod_l+0xe68>)
    ac7a:	cmp	r2, r1
    ac7c:	beq.n	ad1e <_strtod_l+0xe2e>
    ac7e:	ldr	r3, [pc, #212]	; (ad54 <_strtod_l+0xe64>)
    ac80:	ands	r3, r2
    ac82:	add.w	r3, r3, #1048576	; 0x100000
    ac86:	str	r3, [sp, #28]
    ac88:	movs	r3, #0
    ac8a:	str	r3, [sp, #24]
    ac8c:	vldr	d7, [sp, #24]
    ac90:	vstr	d7, [sp, #16]
    ac94:	b.n	ab94 <_strtod_l+0xca4>
    ac96:	bl	9ebc <sulp>
    ac9a:	vldr	d7, [sp, #16]
    ac9e:	vsub.f64	d7, d7, d0
    aca2:	vcmp.f64	d7, #0.0
    aca6:	vmrs	APSR_nzcv, fpscr
    acaa:	vstr	d7, [sp, #16]
    acae:	beq.w	aacc <_strtod_l+0xbdc>
    acb2:	b.n	ab94 <_strtod_l+0xca4>
    acb4:	mov.w	r3, #4294967295
    acb8:	b.n	ac74 <_strtod_l+0xd84>
    acba:	cmp	r3, #0
    acbc:	str	r1, [sp, #36]	; 0x24
    acbe:	bgt.w	a956 <_strtod_l+0xa66>
    acc2:	b.n	a9b0 <_strtod_l+0xac0>
    acc4:	mov.w	r1, #4294967295
    acc8:	lsl.w	r3, r1, r3
    accc:	ldr	r1, [sp, #24]
    acce:	ands	r1, r3
    acd0:	str	r1, [sp, #24]
    acd2:	b.n	a9b0 <_strtod_l+0xac0>
    acd4:	add	r0, sp, #76	; 0x4c
    acd6:	add	r2, sp, #88	; 0x58
    acd8:	ldr	r1, [pc, #128]	; (ad5c <_strtod_l+0xe6c>)
    acda:	bl	ea20 <__hexnan>
    acde:	cmp	r0, #5
    ace0:	bne.w	a746 <_strtod_l+0x856>
    ace4:	ldr	r3, [sp, #92]	; 0x5c
    ace6:	orr.w	r3, r3, #2139095040	; 0x7f800000
    acea:	orr.w	r3, r3, #7340032	; 0x700000
    acee:	str	r3, [sp, #28]
    acf0:	ldr	r3, [sp, #88]	; 0x58
    acf2:	str	r3, [sp, #24]
    acf4:	b.w	a246 <_strtod_l+0x356>
    acf8:	ldr	r3, [pc, #88]	; (ad54 <_strtod_l+0xe64>)
    acfa:	ands	r3, r7
    acfc:	cmp.w	r3, #112197632	; 0x6b00000
    ad00:	bgt.w	ab78 <_strtod_l+0xc88>
    ad04:	cmp.w	r3, #57671680	; 0x3700000
    ad08:	bgt.w	ab98 <_strtod_l+0xca8>
    ad0c:	b.n	aacc <_strtod_l+0xbdc>
    ad0e:	subs	r3, #32
    ad10:	mov.w	r0, #4294967295
    ad14:	lsl.w	r3, r0, r3
    ad18:	ands	r3, r1
    ad1a:	str	r3, [sp, #28]
    ad1c:	b.n	a9b0 <_strtod_l+0xac0>
    ad1e:	adds	r3, #1
    ad20:	bne.n	ac7e <_strtod_l+0xd8e>
    ad22:	b.n	a8bc <_strtod_l+0x9cc>
    ad24:	movs	r3, #106	; 0x6a
    ad26:	str	r3, [sp, #36]	; 0x24
    ad28:	b.n	a98a <_strtod_l+0xa9a>
    ad2a:	mov	r0, r5
    ad2c:	ldr	r1, [sp, #76]	; 0x4c
    ad2e:	adds	r5, #1
    ad30:	b.n	a9d6 <_strtod_l+0xae6>
    ad32:	ldrd	r7, r8, [sp, #16]
    ad36:	strd	r7, r8, [sp, #24]
    ad3a:	b.n	a694 <_strtod_l+0x7a4>
    ad3c:	ldrd	r0, r1, [sp, #16]
    ad40:	strd	r0, r1, [sp, #24]
    ad44:	b.n	a986 <_strtod_l+0xa96>
    ad46:	mov	r0, r1
    ad48:	ldr	r1, [sp, #76]	; 0x4c
    ad4a:	b.n	a9ea <_strtod_l+0xafa>
    ad4c:	.word	0x000fffff
    ad50:	.word	0xbfe00000
    ad54:	.word	0x7ff00000
    ad58:	.word	0x7fefffff
    ad5c:	.word	0x20000adc

0000ad60 <_strtod_r>:
    ad60:	ldr	r3, [pc, #20]	; (ad78 <_strtod_r+0x18>)
    ad62:	ldr	r3, [r3, #0]
    ad64:	push	{r4}
    ad66:	ldr	r3, [r3, #52]	; 0x34
    ad68:	ldr	r4, [pc, #16]	; (ad7c <_strtod_r+0x1c>)
    ad6a:	cmp	r3, #0
    ad6c:	it	eq
    ad6e:	moveq	r3, r4
    ad70:	ldr.w	r4, [sp], #4
    ad74:	b.w	9ef0 <_strtod_l>
    ad78:	.word	0x2000215c
    ad7c:	.word	0x20001be0

0000ad80 <_strtol_l.isra.0>:
    ad80:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad84:	ldr.w	r9, [sp, #40]	; 0x28
    ad88:	mov	r7, r1
    ad8a:	mov	r8, r0
    ad8c:	mov	r6, r2
    ad8e:	mov	r5, r3
    ad90:	mov	fp, r1
    ad92:	b.n	ad96 <_strtol_l.isra.0+0x16>
    ad94:	mov	fp, r4
    ad96:	mov	r4, fp
    ad98:	mov	r0, r9
    ad9a:	ldrb.w	sl, [r4], #1
    ad9e:	bl	8f7c <__locale_ctype_ptr_l>
    ada2:	add	r0, sl
    ada4:	ldrb	r1, [r0, #1]
    ada6:	and.w	r1, r1, #8
    adaa:	and.w	ip, r1, #255	; 0xff
    adae:	cmp	r1, #0
    adb0:	bne.n	ad94 <_strtol_l.isra.0+0x14>
    adb2:	mov	r2, sl
    adb4:	cmp	r2, #45	; 0x2d
    adb6:	beq.n	ae7c <_strtol_l.isra.0+0xfc>
    adb8:	cmp	r2, #43	; 0x2b
    adba:	itt	eq
    adbc:	ldrbeq.w	r2, [fp, #1]
    adc0:	addeq.w	r4, fp, #2
    adc4:	cmp	r5, #0
    adc6:	beq.n	ae50 <_strtol_l.isra.0+0xd0>
    adc8:	cmp	r5, #16
    adca:	beq.n	ae98 <_strtol_l.isra.0+0x118>
    adcc:	mov	r9, r5
    adce:	cmp.w	ip, #0
    add2:	ite	eq
    add4:	mvneq.w	sl, #2147483648	; 0x80000000
    add8:	movne.w	sl, #2147483648	; 0x80000000
    addc:	movs	r1, #0
    adde:	udiv	lr, sl, r9
    ade2:	mov	r0, r1
    ade4:	mls	sl, r9, lr, sl
    ade8:	b.n	adf6 <_strtol_l.isra.0+0x76>
    adea:	beq.n	ae40 <_strtol_l.isra.0+0xc0>
    adec:	mla	r0, r9, r0, r3
    adf0:	movs	r1, #1
    adf2:	ldrb.w	r2, [r4], #1
    adf6:	sub.w	r3, r2, #48	; 0x30
    adfa:	cmp	r3, #9
    adfc:	bls.n	ae0a <_strtol_l.isra.0+0x8a>
    adfe:	sub.w	r3, r2, #65	; 0x41
    ae02:	cmp	r3, #25
    ae04:	bhi.n	ae1c <_strtol_l.isra.0+0x9c>
    ae06:	sub.w	r3, r2, #55	; 0x37
    ae0a:	cmp	r5, r3
    ae0c:	ble.n	ae2c <_strtol_l.isra.0+0xac>
    ae0e:	adds	r2, r1, #1
    ae10:	beq.n	adf2 <_strtol_l.isra.0+0x72>
    ae12:	cmp	lr, r0
    ae14:	bcs.n	adea <_strtol_l.isra.0+0x6a>
    ae16:	mov.w	r1, #4294967295
    ae1a:	b.n	adf2 <_strtol_l.isra.0+0x72>
    ae1c:	sub.w	r3, r2, #97	; 0x61
    ae20:	cmp	r3, #25
    ae22:	bhi.n	ae2c <_strtol_l.isra.0+0xac>
    ae24:	sub.w	r3, r2, #87	; 0x57
    ae28:	cmp	r5, r3
    ae2a:	bgt.n	ae0e <_strtol_l.isra.0+0x8e>
    ae2c:	adds	r3, r1, #1
    ae2e:	beq.n	ae5c <_strtol_l.isra.0+0xdc>
    ae30:	cmp.w	ip, #0
    ae34:	bne.n	ae58 <_strtol_l.isra.0+0xd8>
    ae36:	cbz	r6, ae4c <_strtol_l.isra.0+0xcc>
    ae38:	cbnz	r1, ae74 <_strtol_l.isra.0+0xf4>
    ae3a:	str	r7, [r6, #0]
    ae3c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae40:	cmp	sl, r3
    ae42:	bge.n	adec <_strtol_l.isra.0+0x6c>
    ae44:	mov	r0, lr
    ae46:	mov.w	r1, #4294967295
    ae4a:	b.n	adf2 <_strtol_l.isra.0+0x72>
    ae4c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae50:	cmp	r2, #48	; 0x30
    ae52:	beq.n	ae8a <_strtol_l.isra.0+0x10a>
    ae54:	movs	r5, #10
    ae56:	b.n	adcc <_strtol_l.isra.0+0x4c>
    ae58:	negs	r0, r0
    ae5a:	b.n	ae36 <_strtol_l.isra.0+0xb6>
    ae5c:	cmp.w	ip, #0
    ae60:	mov.w	r3, #34	; 0x22
    ae64:	ite	eq
    ae66:	mvneq.w	r0, #2147483648	; 0x80000000
    ae6a:	movne.w	r0, #2147483648	; 0x80000000
    ae6e:	str.w	r3, [r8]
    ae72:	cbz	r6, aeb2 <_strtol_l.isra.0+0x132>
    ae74:	subs	r7, r4, #1
    ae76:	str	r7, [r6, #0]
    ae78:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae7c:	add.w	r4, fp, #2
    ae80:	ldrb.w	r2, [fp, #1]
    ae84:	mov.w	ip, #1
    ae88:	b.n	adc4 <_strtol_l.isra.0+0x44>
    ae8a:	ldrb	r3, [r4, #0]
    ae8c:	and.w	r3, r3, #223	; 0xdf
    ae90:	cmp	r3, #88	; 0x58
    ae92:	beq.n	aea6 <_strtol_l.isra.0+0x126>
    ae94:	movs	r5, #8
    ae96:	b.n	adcc <_strtol_l.isra.0+0x4c>
    ae98:	cmp	r2, #48	; 0x30
    ae9a:	bne.n	adcc <_strtol_l.isra.0+0x4c>
    ae9c:	ldrb	r3, [r4, #0]
    ae9e:	and.w	r3, r3, #223	; 0xdf
    aea2:	cmp	r3, #88	; 0x58
    aea4:	bne.n	adcc <_strtol_l.isra.0+0x4c>
    aea6:	mov.w	r9, #16
    aeaa:	ldrb	r2, [r4, #1]
    aeac:	mov	r5, r9
    aeae:	adds	r4, #2
    aeb0:	b.n	adce <_strtol_l.isra.0+0x4e>
    aeb2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aeb6:	nop

0000aeb8 <_strtol_r>:
    aeb8:	push	{r4, r5, lr}
    aeba:	ldr	r4, [pc, #24]	; (aed4 <_strtol_r+0x1c>)
    aebc:	ldr	r5, [pc, #24]	; (aed8 <_strtol_r+0x20>)
    aebe:	ldr	r4, [r4, #0]
    aec0:	ldr	r4, [r4, #52]	; 0x34
    aec2:	sub	sp, #12
    aec4:	cmp	r4, #0
    aec6:	it	eq
    aec8:	moveq	r4, r5
    aeca:	str	r4, [sp, #0]
    aecc:	bl	ad80 <_strtol_l.isra.0>
    aed0:	add	sp, #12
    aed2:	pop	{r4, r5, pc}
    aed4:	.word	0x2000215c
    aed8:	.word	0x20001be0
    aedc:	.word	0x00000000

0000aee0 <_svfprintf_r>:
    aee0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aee4:	vpush	{d8-d10}
    aee8:	sub	sp, #228	; 0xe4
    aeea:	mov	r4, r1
    aeec:	str	r1, [sp, #12]
    aeee:	mov	sl, r2
    aef0:	str	r3, [sp, #36]	; 0x24
    aef2:	str	r0, [sp, #20]
    aef4:	bl	ebc0 <_localeconv_r>
    aef8:	ldr	r3, [r0, #0]
    aefa:	str	r3, [sp, #64]	; 0x40
    aefc:	mov	r0, r3
    aefe:	bl	9d40 <strlen>
    af02:	ldrh	r3, [r4, #12]
    af04:	str	r0, [sp, #60]	; 0x3c
    af06:	lsls	r1, r3, #24
    af08:	bpl.n	af12 <_svfprintf_r+0x32>
    af0a:	ldr	r3, [r4, #16]
    af0c:	cmp	r3, #0
    af0e:	beq.w	c00c <_svfprintf_r+0x112c>
    af12:	movs	r3, #0
    af14:	vldr	d8, [pc, #656]	; b1a8 <_svfprintf_r+0x2c8>
    af18:	vldr	d9, [pc, #660]	; b1b0 <_svfprintf_r+0x2d0>
    af1c:	str	r3, [sp, #52]	; 0x34
    af1e:	str	r3, [sp, #116]	; 0x74
    af20:	str	r3, [sp, #112]	; 0x70
    af22:	str	r3, [sp, #68]	; 0x44
    af24:	str	r3, [sp, #24]
    af26:	add	r3, sp, #160	; 0xa0
    af28:	str	r3, [sp, #108]	; 0x6c
    af2a:	mov	r9, r3
    af2c:	ldrb.w	r3, [sl]
    af30:	mov	r4, sl
    af32:	cbz	r3, af70 <_svfprintf_r+0x90>
    af34:	cmp	r3, #37	; 0x25
    af36:	bne.n	af3e <_svfprintf_r+0x5e>
    af38:	b.n	af70 <_svfprintf_r+0x90>
    af3a:	cmp	r3, #37	; 0x25
    af3c:	beq.n	af46 <_svfprintf_r+0x66>
    af3e:	ldrb.w	r3, [r4, #1]!
    af42:	cmp	r3, #0
    af44:	bne.n	af3a <_svfprintf_r+0x5a>
    af46:	rsb	r5, sl, r4
    af4a:	cbz	r5, af70 <_svfprintf_r+0x90>
    af4c:	ldr	r3, [sp, #112]	; 0x70
    af4e:	ldr	r2, [sp, #116]	; 0x74
    af50:	str.w	sl, [r9]
    af54:	adds	r3, #1
    af56:	add	r2, r5
    af58:	cmp	r3, #7
    af5a:	str.w	r5, [r9, #4]
    af5e:	str	r2, [sp, #116]	; 0x74
    af60:	str	r3, [sp, #112]	; 0x70
    af62:	bgt.w	b0ac <_svfprintf_r+0x1cc>
    af66:	add.w	r9, r9, #8
    af6a:	ldr	r3, [sp, #24]
    af6c:	add	r3, r5
    af6e:	str	r3, [sp, #24]
    af70:	ldrb	r3, [r4, #0]
    af72:	cmp	r3, #0
    af74:	beq.w	b0be <_svfprintf_r+0x1de>
    af78:	movs	r3, #0
    af7a:	mov	r2, r3
    af7c:	strb.w	r3, [sp, #79]	; 0x4f
    af80:	mov	r1, r3
    af82:	str	r3, [sp, #28]
    af84:	mov	fp, r3
    af86:	mov.w	r8, #4294967295
    af8a:	ldrb	r3, [r4, #1]
    af8c:	add.w	sl, r4, #1
    af90:	mov	r5, r8
    af92:	add.w	sl, sl, #1
    af96:	sub.w	r0, r3, #32
    af9a:	cmp	r0, #88	; 0x58
    af9c:	bhi.w	b790 <_svfprintf_r+0x8b0>
    afa0:	tbh	[pc, r0, lsl #1]
    afa4:	.word	0x03f60363
    afa8:	.word	0x036b03f6
    afac:	.word	0x03f603f6
    afb0:	.word	0x03f603f6
    afb4:	.word	0x03f603f6
    afb8:	.word	0x037e0370
    afbc:	.word	0x005d03f6
    afc0:	.word	0x03f600df
    afc4:	.word	0x010c00fb
    afc8:	.word	0x010c010c
    afcc:	.word	0x010c010c
    afd0:	.word	0x010c010c
    afd4:	.word	0x010c010c
    afd8:	.word	0x03f603f6
    afdc:	.word	0x03f603f6
    afe0:	.word	0x03f603f6
    afe4:	.word	0x03f603f6
    afe8:	.word	0x03f603f6
    afec:	.word	0x015e011c
    aff0:	.word	0x015e03f6
    aff4:	.word	0x03f603f6
    aff8:	.word	0x03f603f6
    affc:	.word	0x03f602a1
    b000:	.word	0x02a603f6
    b004:	.word	0x03f603f6
    b008:	.word	0x03f603f6
    b00c:	.word	0x02d803f6
    b010:	.word	0x03f603f6
    b014:	.word	0x03f60305
    b018:	.word	0x03f603f6
    b01c:	.word	0x03f603f6
    b020:	.word	0x03f603f6
    b024:	.word	0x03f603f6
    b028:	.word	0x034303f6
    b02c:	.word	0x015e0356
    b030:	.word	0x015e015e
    b034:	.word	0x0356035e
    b038:	.word	0x03f603f6
    b03c:	.word	0x03f603a4
    b040:	.word	0x00a203b1
    b044:	.word	0x03c30062
    b048:	.word	0x03c803f6
    b04c:	.word	0x038303f6
    b050:	.word	0x03f603f6
    b054:	.short	0x038b
    b056:	ldr	r0, [sp, #28]
    b058:	str	r3, [sp, #36]	; 0x24
    b05a:	negs	r0, r0
    b05c:	str	r0, [sp, #28]
    b05e:	orr.w	fp, fp, #4
    b062:	ldrb.w	r3, [sl]
    b066:	b.n	af92 <_svfprintf_r+0xb2>
    b068:	mov	r8, r5
    b06a:	ldr	r0, [sp, #36]	; 0x24
    b06c:	movs	r1, #0
    b06e:	movs	r3, #48	; 0x30
    b070:	movs	r2, #120	; 0x78
    b072:	cmp	r8, r1
    b074:	strb.w	r3, [sp, #80]	; 0x50
    b078:	ldr	r4, [r0, #0]
    b07a:	strb.w	r2, [sp, #81]	; 0x51
    b07e:	add.w	r7, r0, #4
    b082:	mov.w	r5, #0
    b086:	strb.w	r1, [sp, #79]	; 0x4f
    b08a:	orr.w	r3, fp, #2
    b08e:	blt.w	b7ca <_svfprintf_r+0x8ea>
    b092:	bic.w	r3, fp, #128	; 0x80
    b096:	orr.w	fp, r3, #2
    b09a:	orrs.w	r3, r4, r5
    b09e:	str	r7, [sp, #36]	; 0x24
    b0a0:	beq.w	b776 <_svfprintf_r+0x896>
    b0a4:	mov	r7, r1
    b0a6:	str	r2, [sp, #48]	; 0x30
    b0a8:	ldr	r0, [pc, #268]	; (b1b8 <_svfprintf_r+0x2d8>)
    b0aa:	b.n	b60a <_svfprintf_r+0x72a>
    b0ac:	add	r2, sp, #108	; 0x6c
    b0ae:	ldr	r1, [sp, #12]
    b0b0:	ldr	r0, [sp, #20]
    b0b2:	bl	fb08 <__ssprint_r>
    b0b6:	cbnz	r0, b0cc <_svfprintf_r+0x1ec>
    b0b8:	add.w	r9, sp, #160	; 0xa0
    b0bc:	b.n	af6a <_svfprintf_r+0x8a>
    b0be:	ldr	r3, [sp, #116]	; 0x74
    b0c0:	cbz	r3, b0cc <_svfprintf_r+0x1ec>
    b0c2:	ldr	r0, [sp, #20]
    b0c4:	ldr	r1, [sp, #12]
    b0c6:	add	r2, sp, #108	; 0x6c
    b0c8:	bl	fb08 <__ssprint_r>
    b0cc:	ldr	r3, [sp, #12]
    b0ce:	ldrh	r3, [r3, #12]
    b0d0:	tst.w	r3, #64	; 0x40
    b0d4:	ldr	r3, [sp, #24]
    b0d6:	it	ne
    b0d8:	movne.w	r3, #4294967295
    b0dc:	mov	r0, r3
    b0de:	add	sp, #228	; 0xe4
    b0e0:	vpop	{d8-d10}
    b0e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0e8:	str	r3, [sp, #48]	; 0x30
    b0ea:	mov	r8, r5
    b0ec:	cmp	r2, #0
    b0ee:	bne.w	c426 <_svfprintf_r+0x1546>
    b0f2:	ands.w	r3, fp, #32
    b0f6:	beq.w	b506 <_svfprintf_r+0x626>
    b0fa:	ldr	r7, [sp, #36]	; 0x24
    b0fc:	adds	r7, #7
    b0fe:	bic.w	r3, r7, #7
    b102:	movs	r7, #0
    b104:	add.w	r2, r3, #8
    b108:	cmp	r8, r7
    b10a:	str	r2, [sp, #36]	; 0x24
    b10c:	ldrd	r4, r5, [r3]
    b110:	strb.w	r7, [sp, #79]	; 0x4f
    b114:	blt.w	bdd4 <_svfprintf_r+0xef4>
    b118:	orrs.w	r3, r4, r5
    b11c:	bic.w	fp, fp, #128	; 0x80
    b120:	beq.w	b7ba <_svfprintf_r+0x8da>
    b124:	add	r6, sp, #160	; 0xa0
    b126:	lsrs	r2, r4, #3
    b128:	orr.w	r2, r2, r5, lsl #29
    b12c:	lsrs	r1, r5, #3
    b12e:	and.w	r3, r4, #7
    b132:	mov	r5, r1
    b134:	mov	r4, r2
    b136:	adds	r3, #48	; 0x30
    b138:	orrs.w	r2, r4, r5
    b13c:	strb.w	r3, [r6, #-1]!
    b140:	bne.n	b126 <_svfprintf_r+0x246>
    b142:	tst.w	fp, #1
    b146:	beq.w	b598 <_svfprintf_r+0x6b8>
    b14a:	cmp	r3, #48	; 0x30
    b14c:	beq.w	b598 <_svfprintf_r+0x6b8>
    b150:	movs	r2, #48	; 0x30
    b152:	subs	r3, r6, #1
    b154:	strb.w	r2, [r6, #-1]
    b158:	add	r2, sp, #160	; 0xa0
    b15a:	subs	r2, r2, r3
    b15c:	str	r2, [sp, #32]
    b15e:	mov	r6, r3
    b160:	b.n	b59e <_svfprintf_r+0x6be>
    b162:	ldrb.w	r3, [sl]
    b166:	cmp	r3, #42	; 0x2a
    b168:	add.w	r4, sl, #1
    b16c:	beq.w	c3ce <_svfprintf_r+0x14ee>
    b170:	sub.w	r0, r3, #48	; 0x30
    b174:	cmp	r0, #9
    b176:	it	ls
    b178:	movls	r5, #0
    b17a:	bhi.w	c328 <_svfprintf_r+0x1448>
    b17e:	ldrb.w	r3, [r4], #1
    b182:	add.w	r5, r5, r5, lsl #2
    b186:	add.w	r5, r0, r5, lsl #1
    b18a:	sub.w	r0, r3, #48	; 0x30
    b18e:	cmp	r0, #9
    b190:	bls.n	b17e <_svfprintf_r+0x29e>
    b192:	orr.w	r5, r5, r5, asr #31
    b196:	mov	sl, r4
    b198:	b.n	af96 <_svfprintf_r+0xb6>
    b19a:	orr.w	fp, fp, #128	; 0x80
    b19e:	ldrb.w	r3, [sl]
    b1a2:	b.n	af92 <_svfprintf_r+0xb2>
    b1a4:	nop.w
	...
    b1b0:	.word	0xffffffff
    b1b4:	.word	0x7fefffff
    b1b8:	.word	0x200016c0
    b1bc:	sub.w	r0, r3, #48	; 0x30
    b1c0:	movs	r3, #0
    b1c2:	mov	r4, r3
    b1c4:	ldrb.w	r3, [sl], #1
    b1c8:	add.w	r4, r4, r4, lsl #2
    b1cc:	add.w	r4, r0, r4, lsl #1
    b1d0:	sub.w	r0, r3, #48	; 0x30
    b1d4:	cmp	r0, #9
    b1d6:	bls.n	b1c4 <_svfprintf_r+0x2e4>
    b1d8:	str	r4, [sp, #28]
    b1da:	b.n	af96 <_svfprintf_r+0xb6>
    b1dc:	str	r3, [sp, #48]	; 0x30
    b1de:	mov	r8, r5
    b1e0:	cmp	r2, #0
    b1e2:	bne.w	c43e <_svfprintf_r+0x155e>
    b1e6:	orr.w	fp, fp, #16
    b1ea:	tst.w	fp, #32
    b1ee:	beq.w	bbf8 <_svfprintf_r+0xd18>
    b1f2:	ldr	r7, [sp, #36]	; 0x24
    b1f4:	adds	r7, #7
    b1f6:	bic.w	r7, r7, #7
    b1fa:	ldrd	r2, r3, [r7]
    b1fe:	add.w	r1, r7, #8
    b202:	str	r1, [sp, #36]	; 0x24
    b204:	mov	r4, r2
    b206:	mov	r5, r3
    b208:	cmp	r2, #0
    b20a:	sbcs.w	r3, r3, #0
    b20e:	blt.w	bc80 <_svfprintf_r+0xda0>
    b212:	cmp.w	r8, #0
    b216:	ldrb.w	r7, [sp, #79]	; 0x4f
    b21a:	blt.w	b588 <_svfprintf_r+0x6a8>
    b21e:	orrs.w	r3, r4, r5
    b222:	bic.w	fp, fp, #128	; 0x80
    b226:	beq.w	ba16 <_svfprintf_r+0xb36>
    b22a:	cmp	r5, #0
    b22c:	it	eq
    b22e:	cmpeq	r4, #10
    b230:	bcc.w	b590 <_svfprintf_r+0x6b0>
    b234:	add	r6, sp, #160	; 0xa0
    b236:	mov	r0, r4
    b238:	mov	r1, r5
    b23a:	movs	r2, #10
    b23c:	movs	r3, #0
    b23e:	bl	8bc8 <__aeabi_uldivmod>
    b242:	adds	r2, #48	; 0x30
    b244:	strb.w	r2, [r6, #-1]!
    b248:	mov	r0, r4
    b24a:	mov	r1, r5
    b24c:	movs	r3, #0
    b24e:	movs	r2, #10
    b250:	bl	8bc8 <__aeabi_uldivmod>
    b254:	mov	r4, r0
    b256:	mov	r5, r1
    b258:	orrs.w	r3, r4, r5
    b25c:	bne.n	b236 <_svfprintf_r+0x356>
    b25e:	b.n	b598 <_svfprintf_r+0x6b8>
    b260:	str	r3, [sp, #48]	; 0x30
    b262:	mov	r8, r5
    b264:	cmp	r2, #0
    b266:	bne.w	c436 <_svfprintf_r+0x1556>
    b26a:	ldr	r7, [sp, #36]	; 0x24
    b26c:	tst.w	fp, #8
    b270:	add.w	r7, r7, #7
    b274:	beq.w	bef8 <_svfprintf_r+0x1018>
    b278:	bic.w	r3, r7, #7
    b27c:	vldr	d8, [r3]
    b280:	add.w	r2, r3, #8
    b284:	str	r2, [sp, #36]	; 0x24
    b286:	vabs.f64	d7, d8
    b28a:	vcmp.f64	d7, d9
    b28e:	vmrs	APSR_nzcv, fpscr
    b292:	ble.w	be0e <_svfprintf_r+0xf2e>
    b296:	vcmpe.f64	d8, #0.0
    b29a:	vmrs	APSR_nzcv, fpscr
    b29e:	bmi.w	c236 <_svfprintf_r+0x1356>
    b2a2:	ldrb.w	r7, [sp, #79]	; 0x4f
    b2a6:	ldr	r6, [pc, #668]	; (b544 <_svfprintf_r+0x664>)
    b2a8:	ldr	r3, [pc, #668]	; (b548 <_svfprintf_r+0x668>)
    b2aa:	ldr	r1, [sp, #48]	; 0x30
    b2ac:	movs	r2, #3
    b2ae:	mov.w	r8, #0
    b2b2:	str	r2, [sp, #16]
    b2b4:	bic.w	fp, fp, #128	; 0x80
    b2b8:	cmp	r1, #71	; 0x47
    b2ba:	it	le
    b2bc:	movle	r6, r3
    b2be:	str	r2, [sp, #32]
    b2c0:	str.w	r8, [sp, #56]	; 0x38
    b2c4:	cbz	r7, b2cc <_svfprintf_r+0x3ec>
    b2c6:	ldr	r3, [sp, #16]
    b2c8:	adds	r3, #1
    b2ca:	str	r3, [sp, #16]
    b2cc:	ands.w	r3, fp, #2
    b2d0:	str	r3, [sp, #40]	; 0x28
    b2d2:	beq.n	b2da <_svfprintf_r+0x3fa>
    b2d4:	ldr	r3, [sp, #16]
    b2d6:	adds	r3, #2
    b2d8:	str	r3, [sp, #16]
    b2da:	ands.w	r3, fp, #132	; 0x84
    b2de:	str	r3, [sp, #44]	; 0x2c
    b2e0:	bne.w	b7e4 <_svfprintf_r+0x904>
    b2e4:	ldr	r3, [sp, #28]
    b2e6:	ldr	r2, [sp, #16]
    b2e8:	subs	r4, r3, r2
    b2ea:	cmp	r4, #0
    b2ec:	ble.w	b7e4 <_svfprintf_r+0x904>
    b2f0:	cmp	r4, #16
    b2f2:	ldr	r1, [sp, #116]	; 0x74
    b2f4:	ldr	r2, [sp, #112]	; 0x70
    b2f6:	ldr	r7, [pc, #596]	; (b54c <_svfprintf_r+0x66c>)
    b2f8:	ble.n	b342 <_svfprintf_r+0x462>
    b2fa:	mov	r0, r9
    b2fc:	movs	r5, #16
    b2fe:	mov	r9, r8
    b300:	mov	r8, r6
    b302:	ldr	r6, [sp, #20]
    b304:	b.n	b310 <_svfprintf_r+0x430>
    b306:	subs	r4, #16
    b308:	cmp	r4, #16
    b30a:	add.w	r0, r0, #8
    b30e:	ble.n	b33c <_svfprintf_r+0x45c>
    b310:	adds	r2, #1
    b312:	adds	r1, #16
    b314:	cmp	r2, #7
    b316:	str	r1, [sp, #116]	; 0x74
    b318:	str	r2, [sp, #112]	; 0x70
    b31a:	str	r7, [r0, #0]
    b31c:	str	r5, [r0, #4]
    b31e:	ble.n	b306 <_svfprintf_r+0x426>
    b320:	add	r2, sp, #108	; 0x6c
    b322:	ldr	r1, [sp, #12]
    b324:	mov	r0, r6
    b326:	bl	fb08 <__ssprint_r>
    b32a:	cmp	r0, #0
    b32c:	bne.w	b0cc <_svfprintf_r+0x1ec>
    b330:	subs	r4, #16
    b332:	cmp	r4, #16
    b334:	ldr	r1, [sp, #116]	; 0x74
    b336:	ldr	r2, [sp, #112]	; 0x70
    b338:	add	r0, sp, #160	; 0xa0
    b33a:	bgt.n	b310 <_svfprintf_r+0x430>
    b33c:	mov	r6, r8
    b33e:	mov	r8, r9
    b340:	mov	r9, r0
    b342:	adds	r2, #1
    b344:	adds	r3, r4, r1
    b346:	cmp	r2, #7
    b348:	str	r3, [sp, #116]	; 0x74
    b34a:	str	r2, [sp, #112]	; 0x70
    b34c:	str.w	r7, [r9]
    b350:	str.w	r4, [r9, #4]
    b354:	bgt.w	bb1c <_svfprintf_r+0xc3c>
    b358:	ldrb.w	r7, [sp, #79]	; 0x4f
    b35c:	add.w	r9, r9, #8
    b360:	cbz	r7, b380 <_svfprintf_r+0x4a0>
    b362:	ldr	r2, [sp, #112]	; 0x70
    b364:	adds	r2, #1
    b366:	adds	r3, #1
    b368:	add.w	r0, sp, #79	; 0x4f
    b36c:	movs	r1, #1
    b36e:	cmp	r2, #7
    b370:	str	r3, [sp, #116]	; 0x74
    b372:	str	r2, [sp, #112]	; 0x70
    b374:	stmia.w	r9, {r0, r1}
    b378:	bgt.w	ba3a <_svfprintf_r+0xb5a>
    b37c:	add.w	r9, r9, #8
    b380:	ldr	r2, [sp, #40]	; 0x28
    b382:	cbz	r2, b3a0 <_svfprintf_r+0x4c0>
    b384:	ldr	r2, [sp, #112]	; 0x70
    b386:	adds	r2, #1
    b388:	adds	r3, #2
    b38a:	add	r0, sp, #80	; 0x50
    b38c:	movs	r1, #2
    b38e:	cmp	r2, #7
    b390:	str	r3, [sp, #116]	; 0x74
    b392:	str	r2, [sp, #112]	; 0x70
    b394:	stmia.w	r9, {r0, r1}
    b398:	bgt.w	ba52 <_svfprintf_r+0xb72>
    b39c:	add.w	r9, r9, #8
    b3a0:	ldr	r2, [sp, #44]	; 0x2c
    b3a2:	cmp	r2, #128	; 0x80
    b3a4:	beq.w	b8a4 <_svfprintf_r+0x9c4>
    b3a8:	ldr	r2, [sp, #32]
    b3aa:	rsb	r4, r2, r8
    b3ae:	cmp	r4, #0
    b3b0:	ble.n	b41c <_svfprintf_r+0x53c>
    b3b2:	cmp	r4, #16
    b3b4:	ldr	r2, [sp, #112]	; 0x70
    b3b6:	ldr	r7, [pc, #408]	; (b550 <_svfprintf_r+0x670>)
    b3b8:	ble.n	b402 <_svfprintf_r+0x522>
    b3ba:	mov	r1, r9
    b3bc:	mov.w	r8, #16
    b3c0:	mov	r9, r6
    b3c2:	ldr	r5, [sp, #20]
    b3c4:	ldr	r6, [sp, #12]
    b3c6:	b.n	b3d2 <_svfprintf_r+0x4f2>
    b3c8:	subs	r4, #16
    b3ca:	cmp	r4, #16
    b3cc:	add.w	r1, r1, #8
    b3d0:	ble.n	b3fe <_svfprintf_r+0x51e>
    b3d2:	adds	r2, #1
    b3d4:	adds	r3, #16
    b3d6:	cmp	r2, #7
    b3d8:	str	r3, [sp, #116]	; 0x74
    b3da:	str	r2, [sp, #112]	; 0x70
    b3dc:	stmia.w	r1, {r7, r8}
    b3e0:	ble.n	b3c8 <_svfprintf_r+0x4e8>
    b3e2:	add	r2, sp, #108	; 0x6c
    b3e4:	mov	r1, r6
    b3e6:	mov	r0, r5
    b3e8:	bl	fb08 <__ssprint_r>
    b3ec:	cmp	r0, #0
    b3ee:	bne.w	b0cc <_svfprintf_r+0x1ec>
    b3f2:	subs	r4, #16
    b3f4:	cmp	r4, #16
    b3f6:	ldr	r3, [sp, #116]	; 0x74
    b3f8:	ldr	r2, [sp, #112]	; 0x70
    b3fa:	add	r1, sp, #160	; 0xa0
    b3fc:	bgt.n	b3d2 <_svfprintf_r+0x4f2>
    b3fe:	mov	r6, r9
    b400:	mov	r9, r1
    b402:	adds	r2, #1
    b404:	add	r3, r4
    b406:	cmp	r2, #7
    b408:	str	r3, [sp, #116]	; 0x74
    b40a:	str	r2, [sp, #112]	; 0x70
    b40c:	str.w	r7, [r9]
    b410:	str.w	r4, [r9, #4]
    b414:	bgt.w	ba22 <_svfprintf_r+0xb42>
    b418:	add.w	r9, r9, #8
    b41c:	tst.w	fp, #256	; 0x100
    b420:	bne.w	b7e8 <_svfprintf_r+0x908>
    b424:	ldr	r2, [sp, #112]	; 0x70
    b426:	ldr	r0, [sp, #32]
    b428:	str.w	r6, [r9]
    b42c:	adds	r2, #1
    b42e:	add	r3, r0
    b430:	cmp	r2, #7
    b432:	str	r3, [sp, #116]	; 0x74
    b434:	str.w	r0, [r9, #4]
    b438:	str	r2, [sp, #112]	; 0x70
    b43a:	bgt.w	b9c2 <_svfprintf_r+0xae2>
    b43e:	add.w	r9, r9, #8
    b442:	tst.w	fp, #4
    b446:	beq.n	b4c6 <_svfprintf_r+0x5e6>
    b448:	ldr	r2, [sp, #28]
    b44a:	ldr	r1, [sp, #16]
    b44c:	subs	r4, r2, r1
    b44e:	cmp	r4, #0
    b450:	ble.n	b4c6 <_svfprintf_r+0x5e6>
    b452:	cmp	r4, #16
    b454:	ldr	r2, [sp, #112]	; 0x70
    b456:	ldr	r7, [pc, #244]	; (b54c <_svfprintf_r+0x66c>)
    b458:	ble.n	b4a0 <_svfprintf_r+0x5c0>
    b45a:	movs	r5, #16
    b45c:	ldr	r6, [sp, #20]
    b45e:	ldr.w	r8, [sp, #12]
    b462:	b.n	b46e <_svfprintf_r+0x58e>
    b464:	subs	r4, #16
    b466:	cmp	r4, #16
    b468:	add.w	r9, r9, #8
    b46c:	ble.n	b4a0 <_svfprintf_r+0x5c0>
    b46e:	adds	r2, #1
    b470:	adds	r3, #16
    b472:	cmp	r2, #7
    b474:	str	r3, [sp, #116]	; 0x74
    b476:	str	r2, [sp, #112]	; 0x70
    b478:	str.w	r7, [r9]
    b47c:	str.w	r5, [r9, #4]
    b480:	ble.n	b464 <_svfprintf_r+0x584>
    b482:	add	r2, sp, #108	; 0x6c
    b484:	mov	r1, r8
    b486:	mov	r0, r6
    b488:	bl	fb08 <__ssprint_r>
    b48c:	cmp	r0, #0
    b48e:	bne.w	b0cc <_svfprintf_r+0x1ec>
    b492:	subs	r4, #16
    b494:	cmp	r4, #16
    b496:	ldr	r3, [sp, #116]	; 0x74
    b498:	ldr	r2, [sp, #112]	; 0x70
    b49a:	add.w	r9, sp, #160	; 0xa0
    b49e:	bgt.n	b46e <_svfprintf_r+0x58e>
    b4a0:	adds	r2, #1
    b4a2:	add	r3, r4
    b4a4:	cmp	r2, #7
    b4a6:	str	r3, [sp, #116]	; 0x74
    b4a8:	str	r2, [sp, #112]	; 0x70
    b4aa:	str.w	r7, [r9]
    b4ae:	str.w	r4, [r9, #4]
    b4b2:	ble.n	b4c6 <_svfprintf_r+0x5e6>
    b4b4:	add	r2, sp, #108	; 0x6c
    b4b6:	ldr	r1, [sp, #12]
    b4b8:	ldr	r0, [sp, #20]
    b4ba:	bl	fb08 <__ssprint_r>
    b4be:	cmp	r0, #0
    b4c0:	bne.w	b0cc <_svfprintf_r+0x1ec>
    b4c4:	ldr	r3, [sp, #116]	; 0x74
    b4c6:	ldr	r2, [sp, #24]
    b4c8:	ldr	r1, [sp, #28]
    b4ca:	ldr	r0, [sp, #16]
    b4cc:	cmp	r1, r0
    b4ce:	ite	ge
    b4d0:	addge	r2, r2, r1
    b4d2:	addlt	r2, r2, r0
    b4d4:	str	r2, [sp, #24]
    b4d6:	cmp	r3, #0
    b4d8:	bne.w	b9da <_svfprintf_r+0xafa>
    b4dc:	movs	r3, #0
    b4de:	str	r3, [sp, #112]	; 0x70
    b4e0:	add.w	r9, sp, #160	; 0xa0
    b4e4:	b.n	af2c <_svfprintf_r+0x4c>
    b4e6:	orr.w	fp, fp, #8
    b4ea:	ldrb.w	r3, [sl]
    b4ee:	b.n	af92 <_svfprintf_r+0xb2>
    b4f0:	str	r3, [sp, #48]	; 0x30
    b4f2:	mov	r8, r5
    b4f4:	cmp	r2, #0
    b4f6:	bne.w	c42e <_svfprintf_r+0x154e>
    b4fa:	orr.w	fp, fp, #16
    b4fe:	ands.w	r3, fp, #32
    b502:	bne.w	b0fa <_svfprintf_r+0x21a>
    b506:	ands.w	r2, fp, #16
    b50a:	bne.w	bc30 <_svfprintf_r+0xd50>
    b50e:	ands.w	r3, fp, #64	; 0x40
    b512:	beq.w	bc30 <_svfprintf_r+0xd50>
    b516:	ldr	r1, [sp, #36]	; 0x24
    b518:	strb.w	r2, [sp, #79]	; 0x4f
    b51c:	mov	r3, r1
    b51e:	cmp.w	r8, #0
    b522:	add.w	r3, r3, #4
    b526:	ldrh	r4, [r1, #0]
    b528:	mov.w	r5, #0
    b52c:	blt.w	c086 <_svfprintf_r+0x11a6>
    b530:	orrs.w	r1, r4, r5
    b534:	bic.w	fp, fp, #128	; 0x80
    b538:	str	r3, [sp, #36]	; 0x24
    b53a:	beq.w	b7ba <_svfprintf_r+0x8da>
    b53e:	mov	r7, r2
    b540:	b.n	b124 <_svfprintf_r+0x244>
    b542:	nop
    b544:	.word	0x20001684
    b548:	.word	0x200016a4
    b54c:	.word	0x20000748
    b550:	.word	0x2000177c
    b554:	str	r3, [sp, #48]	; 0x30
    b556:	mov	r8, r5
    b558:	cmp	r2, #0
    b55a:	bne.w	c410 <_svfprintf_r+0x1530>
    b55e:	orr.w	fp, fp, #16
    b562:	ands.w	r3, fp, #32
    b566:	beq.w	bb38 <_svfprintf_r+0xc58>
    b56a:	ldr	r7, [sp, #36]	; 0x24
    b56c:	adds	r7, #7
    b56e:	bic.w	r3, r7, #7
    b572:	movs	r7, #0
    b574:	add.w	r2, r3, #8
    b578:	cmp	r8, r7
    b57a:	str	r2, [sp, #36]	; 0x24
    b57c:	ldrd	r4, r5, [r3]
    b580:	strb.w	r7, [sp, #79]	; 0x4f
    b584:	bge.w	b21e <_svfprintf_r+0x33e>
    b588:	orrs.w	r3, r4, r5
    b58c:	bne.w	b22a <_svfprintf_r+0x34a>
    b590:	add	r6, sp, #224	; 0xe0
    b592:	adds	r4, #48	; 0x30
    b594:	strb.w	r4, [r6, #-65]!
    b598:	add	r3, sp, #160	; 0xa0
    b59a:	subs	r3, r3, r6
    b59c:	str	r3, [sp, #32]
    b59e:	ldr	r3, [sp, #32]
    b5a0:	cmp	r3, r8
    b5a2:	it	lt
    b5a4:	movlt	r3, r8
    b5a6:	str	r3, [sp, #16]
    b5a8:	movs	r3, #0
    b5aa:	str	r3, [sp, #56]	; 0x38
    b5ac:	b.n	b2c4 <_svfprintf_r+0x3e4>
    b5ae:	str	r3, [sp, #48]	; 0x30
    b5b0:	mov	r8, r5
    b5b2:	cmp	r2, #0
    b5b4:	bne.w	c408 <_svfprintf_r+0x1528>
    b5b8:	tst.w	fp, #32
    b5bc:	ldr	r0, [pc, #776]	; (b8c8 <_svfprintf_r+0x9e8>)
    b5be:	beq.w	b6ce <_svfprintf_r+0x7ee>
    b5c2:	ldr	r7, [sp, #36]	; 0x24
    b5c4:	adds	r7, #7
    b5c6:	bic.w	r3, r7, #7
    b5ca:	ldrd	r4, r5, [r3]
    b5ce:	add.w	r2, r3, #8
    b5d2:	str	r2, [sp, #36]	; 0x24
    b5d4:	ands.w	r7, fp, #1
    b5d8:	beq.w	ba6a <_svfprintf_r+0xb8a>
    b5dc:	orrs.w	r3, r4, r5
    b5e0:	beq.w	bf2a <_svfprintf_r+0x104a>
    b5e4:	movs	r7, #0
    b5e6:	movs	r3, #48	; 0x30
    b5e8:	ldrb.w	r2, [sp, #48]	; 0x30
    b5ec:	strb.w	r3, [sp, #80]	; 0x50
    b5f0:	cmp	r8, r7
    b5f2:	strb.w	r2, [sp, #81]	; 0x51
    b5f6:	strb.w	r7, [sp, #79]	; 0x4f
    b5fa:	orr.w	r3, fp, #2
    b5fe:	blt.w	c230 <_svfprintf_r+0x1350>
    b602:	bic.w	r3, fp, #128	; 0x80
    b606:	orr.w	fp, r3, #2
    b60a:	add	r6, sp, #160	; 0xa0
    b60c:	lsrs	r3, r4, #4
    b60e:	and.w	r1, r4, #15
    b612:	orr.w	r3, r3, r5, lsl #28
    b616:	lsrs	r2, r5, #4
    b618:	mov	r4, r3
    b61a:	mov	r5, r2
    b61c:	ldrb	r3, [r0, r1]
    b61e:	strb.w	r3, [r6, #-1]!
    b622:	orrs.w	r3, r4, r5
    b626:	bne.n	b60c <_svfprintf_r+0x72c>
    b628:	b.n	b598 <_svfprintf_r+0x6b8>
    b62a:	ldr	r1, [sp, #36]	; 0x24
    b62c:	str	r3, [sp, #48]	; 0x30
    b62e:	ldr	r2, [r1, #0]
    b630:	strb.w	r2, [sp, #120]	; 0x78
    b634:	movs	r3, #0
    b636:	mov	r2, r1
    b638:	mov	r7, r3
    b63a:	strb.w	r3, [sp, #79]	; 0x4f
    b63e:	adds	r2, #4
    b640:	movs	r3, #1
    b642:	str	r3, [sp, #16]
    b644:	mov	r8, r7
    b646:	str	r7, [sp, #56]	; 0x38
    b648:	str	r2, [sp, #36]	; 0x24
    b64a:	str	r3, [sp, #32]
    b64c:	add	r6, sp, #120	; 0x78
    b64e:	b.n	b2cc <_svfprintf_r+0x3ec>
    b650:	str	r3, [sp, #48]	; 0x30
    b652:	mov	r8, r5
    b654:	cmp	r2, #0
    b656:	beq.w	b1ea <_svfprintf_r+0x30a>
    b65a:	strb.w	r1, [sp, #79]	; 0x4f
    b65e:	b.n	b1ea <_svfprintf_r+0x30a>
    b660:	orr.w	fp, fp, #64	; 0x40
    b664:	ldrb.w	r3, [sl]
    b668:	b.n	af92 <_svfprintf_r+0xb2>
    b66a:	ldrb.w	r3, [sl]
    b66e:	cmp	r1, #0
    b670:	bne.w	af92 <_svfprintf_r+0xb2>
    b674:	movs	r2, #1
    b676:	movs	r1, #32
    b678:	b.n	af92 <_svfprintf_r+0xb2>
    b67a:	orr.w	fp, fp, #1
    b67e:	ldrb.w	r3, [sl]
    b682:	b.n	af92 <_svfprintf_r+0xb2>
    b684:	ldr	r4, [sp, #36]	; 0x24
    b686:	ldr	r3, [r4, #0]
    b688:	str	r3, [sp, #28]
    b68a:	mov	r0, r3
    b68c:	cmp	r0, #0
    b68e:	mov	r3, r4
    b690:	add.w	r3, r3, #4
    b694:	blt.w	b056 <_svfprintf_r+0x176>
    b698:	str	r3, [sp, #36]	; 0x24
    b69a:	ldrb.w	r3, [sl]
    b69e:	b.n	af92 <_svfprintf_r+0xb2>
    b6a0:	ldrb.w	r3, [sl]
    b6a4:	movs	r2, #1
    b6a6:	movs	r1, #43	; 0x2b
    b6a8:	b.n	af92 <_svfprintf_r+0xb2>
    b6aa:	str	r3, [sp, #48]	; 0x30
    b6ac:	mov	r8, r5
    b6ae:	cmp	r2, #0
    b6b0:	beq.w	b562 <_svfprintf_r+0x682>
    b6b4:	strb.w	r1, [sp, #79]	; 0x4f
    b6b8:	b.n	b562 <_svfprintf_r+0x682>
    b6ba:	str	r3, [sp, #48]	; 0x30
    b6bc:	mov	r8, r5
    b6be:	cmp	r2, #0
    b6c0:	bne.w	c418 <_svfprintf_r+0x1538>
    b6c4:	tst.w	fp, #32
    b6c8:	ldr	r0, [pc, #512]	; (b8cc <_svfprintf_r+0x9ec>)
    b6ca:	bne.w	b5c2 <_svfprintf_r+0x6e2>
    b6ce:	ldr	r2, [sp, #36]	; 0x24
    b6d0:	tst.w	fp, #16
    b6d4:	mov	r3, r2
    b6d6:	bne.w	bc5c <_svfprintf_r+0xd7c>
    b6da:	tst.w	fp, #64	; 0x40
    b6de:	beq.w	bc5c <_svfprintf_r+0xd7c>
    b6e2:	adds	r3, #4
    b6e4:	ldrh	r4, [r2, #0]
    b6e6:	str	r3, [sp, #36]	; 0x24
    b6e8:	movs	r5, #0
    b6ea:	b.n	b5d4 <_svfprintf_r+0x6f4>
    b6ec:	ldrb.w	r3, [sl]
    b6f0:	cmp	r3, #108	; 0x6c
    b6f2:	ittte	eq
    b6f4:	ldrbeq.w	r3, [sl, #1]
    b6f8:	orreq.w	fp, fp, #32
    b6fc:	addeq.w	sl, sl, #1
    b700:	orrne.w	fp, fp, #16
    b704:	b.n	af92 <_svfprintf_r+0xb2>
    b706:	cmp	r2, #0
    b708:	bne.w	c3ea <_svfprintf_r+0x150a>
    b70c:	tst.w	fp, #32
    b710:	beq.w	bde0 <_svfprintf_r+0xf00>
    b714:	ldr	r2, [sp, #36]	; 0x24
    b716:	ldr	r1, [sp, #24]
    b718:	ldr	r3, [r2, #0]
    b71a:	asrs	r5, r1, #31
    b71c:	mov	r0, r1
    b71e:	adds	r2, #4
    b720:	mov	r1, r5
    b722:	str	r2, [sp, #36]	; 0x24
    b724:	strd	r0, r1, [r3]
    b728:	b.n	af2c <_svfprintf_r+0x4c>
    b72a:	orr.w	fp, fp, #32
    b72e:	ldrb.w	r3, [sl]
    b732:	b.n	af92 <_svfprintf_r+0xb2>
    b734:	ldr	r2, [sp, #36]	; 0x24
    b736:	str	r3, [sp, #48]	; 0x30
    b738:	ldr	r6, [r2, #0]
    b73a:	movs	r4, #0
    b73c:	strb.w	r4, [sp, #79]	; 0x4f
    b740:	adds	r7, r2, #4
    b742:	cmp	r6, #0
    b744:	beq.w	c212 <_svfprintf_r+0x1332>
    b748:	cmp	r5, #0
    b74a:	blt.w	c092 <_svfprintf_r+0x11b2>
    b74e:	mov	r2, r5
    b750:	mov	r1, r4
    b752:	mov	r0, r6
    b754:	bl	9560 <memchr>
    b758:	cmp	r0, #0
    b75a:	beq.w	c2f6 <_svfprintf_r+0x1416>
    b75e:	subs	r3, r0, r6
    b760:	str	r3, [sp, #32]
    b762:	mov	r8, r4
    b764:	bic.w	r3, r3, r3, asr #31
    b768:	str	r7, [sp, #36]	; 0x24
    b76a:	str	r3, [sp, #16]
    b76c:	str.w	r8, [sp, #56]	; 0x38
    b770:	ldrb.w	r7, [sp, #79]	; 0x4f
    b774:	b.n	b2c4 <_svfprintf_r+0x3e4>
    b776:	ldr	r0, [pc, #340]	; (b8cc <_svfprintf_r+0x9ec>)
    b778:	str	r2, [sp, #48]	; 0x30
    b77a:	cmp.w	r8, #0
    b77e:	bne.w	ba8a <_svfprintf_r+0xbaa>
    b782:	mov	r7, r8
    b784:	mov.w	r8, #0
    b788:	str.w	r8, [sp, #32]
    b78c:	add	r6, sp, #160	; 0xa0
    b78e:	b.n	b59e <_svfprintf_r+0x6be>
    b790:	str	r3, [sp, #48]	; 0x30
    b792:	cmp	r2, #0
    b794:	bne.w	c3f2 <_svfprintf_r+0x1512>
    b798:	ldr	r2, [sp, #48]	; 0x30
    b79a:	cmp	r2, #0
    b79c:	beq.w	b0be <_svfprintf_r+0x1de>
    b7a0:	movs	r3, #0
    b7a2:	movs	r1, #1
    b7a4:	mov	r7, r3
    b7a6:	str	r1, [sp, #16]
    b7a8:	strb.w	r2, [sp, #120]	; 0x78
    b7ac:	strb.w	r3, [sp, #79]	; 0x4f
    b7b0:	mov	r8, r3
    b7b2:	str	r3, [sp, #56]	; 0x38
    b7b4:	str	r1, [sp, #32]
    b7b6:	add	r6, sp, #120	; 0x78
    b7b8:	b.n	b2cc <_svfprintf_r+0x3ec>
    b7ba:	cmp.w	r8, #0
    b7be:	beq.w	c2d8 <_svfprintf_r+0x13f8>
    b7c2:	movs	r7, #0
    b7c4:	movs	r4, #0
    b7c6:	movs	r5, #0
    b7c8:	b.n	b124 <_svfprintf_r+0x244>
    b7ca:	ldr	r0, [pc, #256]	; (b8cc <_svfprintf_r+0x9ec>)
    b7cc:	str	r2, [sp, #48]	; 0x30
    b7ce:	mov	fp, r3
    b7d0:	orrs.w	r3, r4, r5
    b7d4:	str	r7, [sp, #36]	; 0x24
    b7d6:	mov.w	r7, #0
    b7da:	bne.w	b60a <_svfprintf_r+0x72a>
    b7de:	movs	r4, #0
    b7e0:	movs	r5, #0
    b7e2:	b.n	b60a <_svfprintf_r+0x72a>
    b7e4:	ldr	r3, [sp, #116]	; 0x74
    b7e6:	b.n	b360 <_svfprintf_r+0x480>
    b7e8:	ldr	r2, [sp, #48]	; 0x30
    b7ea:	cmp	r2, #101	; 0x65
    b7ec:	ble.w	b932 <_svfprintf_r+0xa52>
    b7f0:	vcmp.f64	d8, #0.0
    b7f4:	vmrs	APSR_nzcv, fpscr
    b7f8:	bne.w	ba8e <_svfprintf_r+0xbae>
    b7fc:	ldr	r2, [sp, #112]	; 0x70
    b7fe:	ldr	r1, [pc, #208]	; (b8d0 <_svfprintf_r+0x9f0>)
    b800:	str.w	r1, [r9]
    b804:	adds	r2, #1
    b806:	adds	r3, #1
    b808:	movs	r1, #1
    b80a:	cmp	r2, #7
    b80c:	str	r3, [sp, #116]	; 0x74
    b80e:	str	r2, [sp, #112]	; 0x70
    b810:	str.w	r1, [r9, #4]
    b814:	bgt.w	bf3c <_svfprintf_r+0x105c>
    b818:	add.w	r9, r9, #8
    b81c:	ldr	r2, [sp, #84]	; 0x54
    b81e:	ldr	r1, [sp, #52]	; 0x34
    b820:	cmp	r2, r1
    b822:	blt.n	b82c <_svfprintf_r+0x94c>
    b824:	tst.w	fp, #1
    b828:	beq.w	b442 <_svfprintf_r+0x562>
    b82c:	ldr	r2, [sp, #112]	; 0x70
    b82e:	ldr	r0, [sp, #60]	; 0x3c
    b830:	ldr	r1, [sp, #64]	; 0x40
    b832:	str.w	r1, [r9]
    b836:	adds	r2, #1
    b838:	add	r3, r0
    b83a:	cmp	r2, #7
    b83c:	str	r3, [sp, #116]	; 0x74
    b83e:	str.w	r0, [r9, #4]
    b842:	str	r2, [sp, #112]	; 0x70
    b844:	bgt.w	bff4 <_svfprintf_r+0x1114>
    b848:	add.w	r9, r9, #8
    b84c:	ldr	r2, [sp, #52]	; 0x34
    b84e:	subs	r4, r2, #1
    b850:	cmp	r4, #0
    b852:	ble.w	b442 <_svfprintf_r+0x562>
    b856:	cmp	r4, #16
    b858:	ldr	r2, [sp, #112]	; 0x70
    b85a:	ldr	r7, [pc, #120]	; (b8d4 <_svfprintf_r+0x9f4>)
    b85c:	ble.w	bc18 <_svfprintf_r+0xd38>
    b860:	movs	r5, #16
    b862:	ldr	r6, [sp, #20]
    b864:	ldr.w	r8, [sp, #12]
    b868:	b.n	b876 <_svfprintf_r+0x996>
    b86a:	add.w	r9, r9, #8
    b86e:	subs	r4, #16
    b870:	cmp	r4, #16
    b872:	ble.w	bc18 <_svfprintf_r+0xd38>
    b876:	adds	r2, #1
    b878:	adds	r3, #16
    b87a:	cmp	r2, #7
    b87c:	str	r3, [sp, #116]	; 0x74
    b87e:	str	r2, [sp, #112]	; 0x70
    b880:	str.w	r7, [r9]
    b884:	str.w	r5, [r9, #4]
    b888:	ble.n	b86a <_svfprintf_r+0x98a>
    b88a:	add	r2, sp, #108	; 0x6c
    b88c:	mov	r1, r8
    b88e:	mov	r0, r6
    b890:	bl	fb08 <__ssprint_r>
    b894:	cmp	r0, #0
    b896:	bne.w	b0cc <_svfprintf_r+0x1ec>
    b89a:	ldr	r3, [sp, #116]	; 0x74
    b89c:	ldr	r2, [sp, #112]	; 0x70
    b89e:	add.w	r9, sp, #160	; 0xa0
    b8a2:	b.n	b86e <_svfprintf_r+0x98e>
    b8a4:	ldr	r2, [sp, #28]
    b8a6:	ldr	r1, [sp, #16]
    b8a8:	subs	r4, r2, r1
    b8aa:	cmp	r4, #0
    b8ac:	ble.w	b3a8 <_svfprintf_r+0x4c8>
    b8b0:	cmp	r4, #16
    b8b2:	ldr	r2, [sp, #112]	; 0x70
    b8b4:	ldr	r7, [pc, #28]	; (b8d4 <_svfprintf_r+0x9f4>)
    b8b6:	ble.n	b916 <_svfprintf_r+0xa36>
    b8b8:	mov	r1, r9
    b8ba:	movs	r5, #16
    b8bc:	mov	r9, r8
    b8be:	mov	r0, r3
    b8c0:	mov	r8, r6
    b8c2:	ldr	r6, [sp, #20]
    b8c4:	b.n	b8e2 <_svfprintf_r+0xa02>
    b8c6:	nop
    b8c8:	.word	0x200016ac
    b8cc:	.word	0x200016c0
    b8d0:	.word	0x200016dc
    b8d4:	.word	0x2000177c
    b8d8:	subs	r4, #16
    b8da:	cmp	r4, #16
    b8dc:	add.w	r1, r1, #8
    b8e0:	ble.n	b90e <_svfprintf_r+0xa2e>
    b8e2:	adds	r2, #1
    b8e4:	adds	r0, #16
    b8e6:	cmp	r2, #7
    b8e8:	str	r0, [sp, #116]	; 0x74
    b8ea:	str	r2, [sp, #112]	; 0x70
    b8ec:	str	r7, [r1, #0]
    b8ee:	str	r5, [r1, #4]
    b8f0:	ble.n	b8d8 <_svfprintf_r+0x9f8>
    b8f2:	add	r2, sp, #108	; 0x6c
    b8f4:	ldr	r1, [sp, #12]
    b8f6:	mov	r0, r6
    b8f8:	bl	fb08 <__ssprint_r>
    b8fc:	cmp	r0, #0
    b8fe:	bne.w	b0cc <_svfprintf_r+0x1ec>
    b902:	subs	r4, #16
    b904:	cmp	r4, #16
    b906:	ldr	r0, [sp, #116]	; 0x74
    b908:	ldr	r2, [sp, #112]	; 0x70
    b90a:	add	r1, sp, #160	; 0xa0
    b90c:	bgt.n	b8e2 <_svfprintf_r+0xa02>
    b90e:	mov	r6, r8
    b910:	mov	r3, r0
    b912:	mov	r8, r9
    b914:	mov	r9, r1
    b916:	adds	r2, #1
    b918:	add	r3, r4
    b91a:	cmp	r2, #7
    b91c:	str	r3, [sp, #116]	; 0x74
    b91e:	str	r2, [sp, #112]	; 0x70
    b920:	str.w	r7, [r9]
    b924:	str.w	r4, [r9, #4]
    b928:	bgt.w	bdb8 <_svfprintf_r+0xed8>
    b92c:	add.w	r9, r9, #8
    b930:	b.n	b3a8 <_svfprintf_r+0x4c8>
    b932:	ldr	r2, [sp, #52]	; 0x34
    b934:	str.w	r6, [r9]
    b938:	cmp	r2, #1
    b93a:	ldr	r2, [sp, #112]	; 0x70
    b93c:	add.w	r3, r3, #1
    b940:	add.w	r2, r2, #1
    b944:	mov.w	r1, #1
    b948:	str	r3, [sp, #116]	; 0x74
    b94a:	str	r2, [sp, #112]	; 0x70
    b94c:	str.w	r1, [r9, #4]
    b950:	ble.w	bd74 <_svfprintf_r+0xe94>
    b954:	cmp	r2, #7
    b956:	bgt.w	bd84 <_svfprintf_r+0xea4>
    b95a:	add.w	r9, r9, #8
    b95e:	ldr	r0, [sp, #60]	; 0x3c
    b960:	ldr	r1, [sp, #64]	; 0x40
    b962:	str.w	r1, [r9]
    b966:	adds	r2, #1
    b968:	add	r3, r0
    b96a:	cmp	r2, #7
    b96c:	str	r3, [sp, #116]	; 0x74
    b96e:	str	r2, [sp, #112]	; 0x70
    b970:	str.w	r0, [r9, #4]
    b974:	bgt.w	bd9e <_svfprintf_r+0xebe>
    b978:	add.w	r9, r9, #8
    b97c:	vcmp.f64	d8, #0.0
    b980:	vmrs	APSR_nzcv, fpscr
    b984:	ldr	r1, [sp, #52]	; 0x34
    b986:	beq.w	bb74 <_svfprintf_r+0xc94>
    b98a:	subs	r1, #1
    b98c:	adds	r2, #1
    b98e:	adds	r6, #1
    b990:	add	r3, r1
    b992:	cmp	r2, #7
    b994:	str.w	r6, [r9]
    b998:	str	r2, [sp, #112]	; 0x70
    b99a:	str	r3, [sp, #116]	; 0x74
    b99c:	str.w	r1, [r9, #4]
    b9a0:	bgt.w	bbde <_svfprintf_r+0xcfe>
    b9a4:	add.w	r9, r9, #8
    b9a8:	ldr	r0, [sp, #68]	; 0x44
    b9aa:	str.w	r0, [r9, #4]
    b9ae:	adds	r2, #1
    b9b0:	add	r3, r0
    b9b2:	add	r1, sp, #92	; 0x5c
    b9b4:	cmp	r2, #7
    b9b6:	str	r3, [sp, #116]	; 0x74
    b9b8:	str	r2, [sp, #112]	; 0x70
    b9ba:	str.w	r1, [r9]
    b9be:	ble.w	b43e <_svfprintf_r+0x55e>
    b9c2:	add	r2, sp, #108	; 0x6c
    b9c4:	ldr	r1, [sp, #12]
    b9c6:	ldr	r0, [sp, #20]
    b9c8:	bl	fb08 <__ssprint_r>
    b9cc:	cmp	r0, #0
    b9ce:	bne.w	b0cc <_svfprintf_r+0x1ec>
    b9d2:	ldr	r3, [sp, #116]	; 0x74
    b9d4:	add.w	r9, sp, #160	; 0xa0
    b9d8:	b.n	b442 <_svfprintf_r+0x562>
    b9da:	add	r2, sp, #108	; 0x6c
    b9dc:	ldr	r1, [sp, #12]
    b9de:	ldr	r0, [sp, #20]
    b9e0:	bl	fb08 <__ssprint_r>
    b9e4:	cmp	r0, #0
    b9e6:	beq.w	b4dc <_svfprintf_r+0x5fc>
    b9ea:	b.w	b0cc <_svfprintf_r+0x1ec>
    b9ee:	ldr	r1, [sp, #36]	; 0x24
    b9f0:	cmp.w	r8, #0
    b9f4:	ldr	r4, [r1, #0]
    b9f6:	strb.w	r3, [sp, #79]	; 0x4f
    b9fa:	add.w	r7, r1, #4
    b9fe:	mov.w	r5, #0
    ba02:	blt.w	c0e8 <_svfprintf_r+0x1208>
    ba06:	orrs.w	r2, r4, r5
    ba0a:	str	r7, [sp, #36]	; 0x24
    ba0c:	bic.w	fp, fp, #128	; 0x80
    ba10:	mov	r7, r3
    ba12:	bne.w	b22a <_svfprintf_r+0x34a>
    ba16:	cmp.w	r8, #0
    ba1a:	beq.w	b784 <_svfprintf_r+0x8a4>
    ba1e:	movs	r4, #0
    ba20:	b.n	b590 <_svfprintf_r+0x6b0>
    ba22:	add	r2, sp, #108	; 0x6c
    ba24:	ldr	r1, [sp, #12]
    ba26:	ldr	r0, [sp, #20]
    ba28:	bl	fb08 <__ssprint_r>
    ba2c:	cmp	r0, #0
    ba2e:	bne.w	b0cc <_svfprintf_r+0x1ec>
    ba32:	ldr	r3, [sp, #116]	; 0x74
    ba34:	add.w	r9, sp, #160	; 0xa0
    ba38:	b.n	b41c <_svfprintf_r+0x53c>
    ba3a:	add	r2, sp, #108	; 0x6c
    ba3c:	ldr	r1, [sp, #12]
    ba3e:	ldr	r0, [sp, #20]
    ba40:	bl	fb08 <__ssprint_r>
    ba44:	cmp	r0, #0
    ba46:	bne.w	b0cc <_svfprintf_r+0x1ec>
    ba4a:	ldr	r3, [sp, #116]	; 0x74
    ba4c:	add.w	r9, sp, #160	; 0xa0
    ba50:	b.n	b380 <_svfprintf_r+0x4a0>
    ba52:	add	r2, sp, #108	; 0x6c
    ba54:	ldr	r1, [sp, #12]
    ba56:	ldr	r0, [sp, #20]
    ba58:	bl	fb08 <__ssprint_r>
    ba5c:	cmp	r0, #0
    ba5e:	bne.w	b0cc <_svfprintf_r+0x1ec>
    ba62:	ldr	r3, [sp, #116]	; 0x74
    ba64:	add.w	r9, sp, #160	; 0xa0
    ba68:	b.n	b3a0 <_svfprintf_r+0x4c0>
    ba6a:	cmp.w	r8, #0
    ba6e:	strb.w	r7, [sp, #79]	; 0x4f
    ba72:	blt.w	bf54 <_svfprintf_r+0x1074>
    ba76:	orrs.w	r3, r4, r5
    ba7a:	bic.w	fp, fp, #128	; 0x80
    ba7e:	bne.w	b60a <_svfprintf_r+0x72a>
    ba82:	cmp.w	r8, #0
    ba86:	beq.w	b782 <_svfprintf_r+0x8a2>
    ba8a:	movs	r7, #0
    ba8c:	b.n	b7de <_svfprintf_r+0x8fe>
    ba8e:	ldr	r4, [sp, #84]	; 0x54
    ba90:	cmp	r4, #0
    ba92:	ble.w	bf58 <_svfprintf_r+0x1078>
    ba96:	ldr	r2, [sp, #56]	; 0x38
    ba98:	ldr	r1, [sp, #52]	; 0x34
    ba9a:	cmp	r2, r1
    ba9c:	it	ge
    ba9e:	movge	r2, r1
    baa0:	cmp	r2, #0
    baa2:	mov	r4, r2
    baa4:	ble.n	bac2 <_svfprintf_r+0xbe2>
    baa6:	ldr	r2, [sp, #112]	; 0x70
    baa8:	str.w	r6, [r9]
    baac:	adds	r2, #1
    baae:	add	r3, r4
    bab0:	cmp	r2, #7
    bab2:	str	r3, [sp, #116]	; 0x74
    bab4:	str.w	r4, [r9, #4]
    bab8:	str	r2, [sp, #112]	; 0x70
    baba:	bgt.w	c1a2 <_svfprintf_r+0x12c2>
    babe:	add.w	r9, r9, #8
    bac2:	ldr	r2, [sp, #56]	; 0x38
    bac4:	cmp	r4, #0
    bac6:	it	ge
    bac8:	subge	r2, r2, r4
    baca:	cmp	r2, #0
    bacc:	mov	r4, r2
    bace:	ble.w	bcb4 <_svfprintf_r+0xdd4>
    bad2:	cmp	r4, #16
    bad4:	ldr	r2, [sp, #112]	; 0x70
    bad6:	ldr	r7, [pc, #772]	; (bddc <_svfprintf_r+0xefc>)
    bad8:	ble.w	bf0e <_svfprintf_r+0x102e>
    badc:	mov	r1, r9
    bade:	movs	r5, #16
    bae0:	mov	r9, r6
    bae2:	ldr.w	r8, [sp, #20]
    bae6:	ldr	r6, [sp, #12]
    bae8:	b.n	baf4 <_svfprintf_r+0xc14>
    baea:	adds	r1, #8
    baec:	subs	r4, #16
    baee:	cmp	r4, #16
    baf0:	ble.w	bf0a <_svfprintf_r+0x102a>
    baf4:	adds	r2, #1
    baf6:	adds	r3, #16
    baf8:	cmp	r2, #7
    bafa:	str	r3, [sp, #116]	; 0x74
    bafc:	str	r2, [sp, #112]	; 0x70
    bafe:	str	r7, [r1, #0]
    bb00:	str	r5, [r1, #4]
    bb02:	ble.n	baea <_svfprintf_r+0xc0a>
    bb04:	add	r2, sp, #108	; 0x6c
    bb06:	mov	r1, r6
    bb08:	mov	r0, r8
    bb0a:	bl	fb08 <__ssprint_r>
    bb0e:	cmp	r0, #0
    bb10:	bne.w	b0cc <_svfprintf_r+0x1ec>
    bb14:	ldr	r3, [sp, #116]	; 0x74
    bb16:	ldr	r2, [sp, #112]	; 0x70
    bb18:	add	r1, sp, #160	; 0xa0
    bb1a:	b.n	baec <_svfprintf_r+0xc0c>
    bb1c:	add	r2, sp, #108	; 0x6c
    bb1e:	ldr	r1, [sp, #12]
    bb20:	ldr	r0, [sp, #20]
    bb22:	bl	fb08 <__ssprint_r>
    bb26:	cmp	r0, #0
    bb28:	bne.w	b0cc <_svfprintf_r+0x1ec>
    bb2c:	ldrb.w	r7, [sp, #79]	; 0x4f
    bb30:	ldr	r3, [sp, #116]	; 0x74
    bb32:	add.w	r9, sp, #160	; 0xa0
    bb36:	b.n	b360 <_svfprintf_r+0x480>
    bb38:	ands.w	r2, fp, #16
    bb3c:	bne.w	b9ee <_svfprintf_r+0xb0e>
    bb40:	ands.w	r3, fp, #64	; 0x40
    bb44:	beq.w	b9ee <_svfprintf_r+0xb0e>
    bb48:	ldr	r1, [sp, #36]	; 0x24
    bb4a:	strb.w	r2, [sp, #79]	; 0x4f
    bb4e:	mov	r3, r1
    bb50:	cmp.w	r8, #0
    bb54:	add.w	r3, r3, #4
    bb58:	ldrh	r4, [r1, #0]
    bb5a:	mov.w	r5, #0
    bb5e:	blt.w	c08a <_svfprintf_r+0x11aa>
    bb62:	orrs.w	r1, r4, r5
    bb66:	bic.w	fp, fp, #128	; 0x80
    bb6a:	str	r3, [sp, #36]	; 0x24
    bb6c:	mov	r7, r2
    bb6e:	bne.w	b22a <_svfprintf_r+0x34a>
    bb72:	b.n	ba16 <_svfprintf_r+0xb36>
    bb74:	subs	r4, r1, #1
    bb76:	cmp	r4, #0
    bb78:	ble.w	b9a8 <_svfprintf_r+0xac8>
    bb7c:	cmp	r4, #16
    bb7e:	ldr	r7, [pc, #604]	; (bddc <_svfprintf_r+0xefc>)
    bb80:	ble.n	bbc8 <_svfprintf_r+0xce8>
    bb82:	movs	r5, #16
    bb84:	ldr	r6, [sp, #20]
    bb86:	ldr.w	r8, [sp, #12]
    bb8a:	b.n	bb96 <_svfprintf_r+0xcb6>
    bb8c:	subs	r4, #16
    bb8e:	cmp	r4, #16
    bb90:	add.w	r9, r9, #8
    bb94:	ble.n	bbc8 <_svfprintf_r+0xce8>
    bb96:	adds	r2, #1
    bb98:	adds	r3, #16
    bb9a:	cmp	r2, #7
    bb9c:	str	r3, [sp, #116]	; 0x74
    bb9e:	str	r2, [sp, #112]	; 0x70
    bba0:	str.w	r7, [r9]
    bba4:	str.w	r5, [r9, #4]
    bba8:	ble.n	bb8c <_svfprintf_r+0xcac>
    bbaa:	add	r2, sp, #108	; 0x6c
    bbac:	mov	r1, r8
    bbae:	mov	r0, r6
    bbb0:	bl	fb08 <__ssprint_r>
    bbb4:	cmp	r0, #0
    bbb6:	bne.w	b0cc <_svfprintf_r+0x1ec>
    bbba:	subs	r4, #16
    bbbc:	cmp	r4, #16
    bbbe:	ldr	r3, [sp, #116]	; 0x74
    bbc0:	ldr	r2, [sp, #112]	; 0x70
    bbc2:	add.w	r9, sp, #160	; 0xa0
    bbc6:	bgt.n	bb96 <_svfprintf_r+0xcb6>
    bbc8:	adds	r2, #1
    bbca:	add	r3, r4
    bbcc:	cmp	r2, #7
    bbce:	str	r3, [sp, #116]	; 0x74
    bbd0:	str	r2, [sp, #112]	; 0x70
    bbd2:	str.w	r7, [r9]
    bbd6:	str.w	r4, [r9, #4]
    bbda:	ble.w	b9a4 <_svfprintf_r+0xac4>
    bbde:	add	r2, sp, #108	; 0x6c
    bbe0:	ldr	r1, [sp, #12]
    bbe2:	ldr	r0, [sp, #20]
    bbe4:	bl	fb08 <__ssprint_r>
    bbe8:	cmp	r0, #0
    bbea:	bne.w	b0cc <_svfprintf_r+0x1ec>
    bbee:	ldr	r3, [sp, #116]	; 0x74
    bbf0:	ldr	r2, [sp, #112]	; 0x70
    bbf2:	add.w	r9, sp, #160	; 0xa0
    bbf6:	b.n	b9a8 <_svfprintf_r+0xac8>
    bbf8:	tst.w	fp, #16
    bbfc:	bne.n	bc66 <_svfprintf_r+0xd86>
    bbfe:	tst.w	fp, #64	; 0x40
    bc02:	beq.n	bc66 <_svfprintf_r+0xd86>
    bc04:	ldr	r1, [sp, #36]	; 0x24
    bc06:	ldrsh.w	r4, [r1]
    bc0a:	adds	r1, #4
    bc0c:	asrs	r5, r4, #31
    bc0e:	mov	r2, r4
    bc10:	mov	r3, r5
    bc12:	str	r1, [sp, #36]	; 0x24
    bc14:	b.w	b208 <_svfprintf_r+0x328>
    bc18:	adds	r2, #1
    bc1a:	add	r3, r4
    bc1c:	cmp	r2, #7
    bc1e:	str	r3, [sp, #116]	; 0x74
    bc20:	str	r2, [sp, #112]	; 0x70
    bc22:	str.w	r7, [r9]
    bc26:	str.w	r4, [r9, #4]
    bc2a:	ble.w	b43e <_svfprintf_r+0x55e>
    bc2e:	b.n	b9c2 <_svfprintf_r+0xae2>
    bc30:	ldr	r1, [sp, #36]	; 0x24
    bc32:	cmp.w	r8, #0
    bc36:	ldr	r4, [r1, #0]
    bc38:	strb.w	r3, [sp, #79]	; 0x4f
    bc3c:	add.w	r7, r1, #4
    bc40:	mov.w	r5, #0
    bc44:	blt.w	bdd2 <_svfprintf_r+0xef2>
    bc48:	orrs.w	r2, r4, r5
    bc4c:	bic.w	fp, fp, #128	; 0x80
    bc50:	str	r7, [sp, #36]	; 0x24
    bc52:	beq.w	b7ba <_svfprintf_r+0x8da>
    bc56:	mov	r7, r3
    bc58:	b.w	b124 <_svfprintf_r+0x244>
    bc5c:	ldr	r4, [r3, #0]
    bc5e:	adds	r3, #4
    bc60:	str	r3, [sp, #36]	; 0x24
    bc62:	movs	r5, #0
    bc64:	b.n	b5d4 <_svfprintf_r+0x6f4>
    bc66:	ldr	r2, [sp, #36]	; 0x24
    bc68:	ldr	r4, [r2, #0]
    bc6a:	mov	r3, r2
    bc6c:	adds	r3, #4
    bc6e:	asrs	r5, r4, #31
    bc70:	mov	r2, r4
    bc72:	str	r3, [sp, #36]	; 0x24
    bc74:	cmp	r2, #0
    bc76:	mov	r3, r5
    bc78:	sbcs.w	r3, r3, #0
    bc7c:	bge.w	b212 <_svfprintf_r+0x332>
    bc80:	negs	r4, r4
    bc82:	mov.w	r7, #45	; 0x2d
    bc86:	sbc.w	r5, r5, r5, lsl #1
    bc8a:	cmp.w	r8, #0
    bc8e:	strb.w	r7, [sp, #79]	; 0x4f
    bc92:	blt.w	b22a <_svfprintf_r+0x34a>
    bc96:	bic.w	fp, fp, #128	; 0x80
    bc9a:	b.w	b22a <_svfprintf_r+0x34a>
    bc9e:	add	r2, sp, #108	; 0x6c
    bca0:	ldr	r1, [sp, #12]
    bca2:	ldr	r0, [sp, #20]
    bca4:	bl	fb08 <__ssprint_r>
    bca8:	cmp	r0, #0
    bcaa:	bne.w	b0cc <_svfprintf_r+0x1ec>
    bcae:	ldr	r3, [sp, #116]	; 0x74
    bcb0:	add.w	r9, sp, #160	; 0xa0
    bcb4:	ldr	r1, [sp, #56]	; 0x38
    bcb6:	ldr	r2, [sp, #84]	; 0x54
    bcb8:	add	r1, r6
    bcba:	mov	r5, r1
    bcbc:	ldr	r1, [sp, #52]	; 0x34
    bcbe:	cmp	r2, r1
    bcc0:	blt.n	bd52 <_svfprintf_r+0xe72>
    bcc2:	tst.w	fp, #1
    bcc6:	bne.n	bd52 <_svfprintf_r+0xe72>
    bcc8:	ldr	r0, [sp, #52]	; 0x34
    bcca:	add	r6, r0
    bccc:	subs	r4, r6, r5
    bcce:	subs	r2, r0, r2
    bcd0:	cmp	r4, r2
    bcd2:	it	ge
    bcd4:	movge	r4, r2
    bcd6:	cmp	r4, #0
    bcd8:	mov	r6, r4
    bcda:	ble.n	bcf8 <_svfprintf_r+0xe18>
    bcdc:	ldr	r1, [sp, #112]	; 0x70
    bcde:	str.w	r5, [r9]
    bce2:	adds	r1, #1
    bce4:	add	r3, r4
    bce6:	cmp	r1, #7
    bce8:	str	r3, [sp, #116]	; 0x74
    bcea:	str.w	r4, [r9, #4]
    bcee:	str	r1, [sp, #112]	; 0x70
    bcf0:	bgt.w	c1f4 <_svfprintf_r+0x1314>
    bcf4:	add.w	r9, r9, #8
    bcf8:	cmp	r6, #0
    bcfa:	ite	ge
    bcfc:	subge	r4, r2, r6
    bcfe:	movlt	r4, r2
    bd00:	cmp	r4, #0
    bd02:	ble.w	b442 <_svfprintf_r+0x562>
    bd06:	cmp	r4, #16
    bd08:	ldr	r2, [sp, #112]	; 0x70
    bd0a:	ldr	r7, [pc, #208]	; (bddc <_svfprintf_r+0xefc>)
    bd0c:	ble.n	bc18 <_svfprintf_r+0xd38>
    bd0e:	movs	r5, #16
    bd10:	ldr	r6, [sp, #20]
    bd12:	ldr.w	r8, [sp, #12]
    bd16:	b.n	bd24 <_svfprintf_r+0xe44>
    bd18:	add.w	r9, r9, #8
    bd1c:	subs	r4, #16
    bd1e:	cmp	r4, #16
    bd20:	ble.w	bc18 <_svfprintf_r+0xd38>
    bd24:	adds	r2, #1
    bd26:	adds	r3, #16
    bd28:	cmp	r2, #7
    bd2a:	str	r3, [sp, #116]	; 0x74
    bd2c:	str	r2, [sp, #112]	; 0x70
    bd2e:	str.w	r7, [r9]
    bd32:	str.w	r5, [r9, #4]
    bd36:	ble.n	bd18 <_svfprintf_r+0xe38>
    bd38:	add	r2, sp, #108	; 0x6c
    bd3a:	mov	r1, r8
    bd3c:	mov	r0, r6
    bd3e:	bl	fb08 <__ssprint_r>
    bd42:	cmp	r0, #0
    bd44:	bne.w	b0cc <_svfprintf_r+0x1ec>
    bd48:	ldr	r3, [sp, #116]	; 0x74
    bd4a:	ldr	r2, [sp, #112]	; 0x70
    bd4c:	add.w	r9, sp, #160	; 0xa0
    bd50:	b.n	bd1c <_svfprintf_r+0xe3c>
    bd52:	ldr	r1, [sp, #112]	; 0x70
    bd54:	ldr	r4, [sp, #60]	; 0x3c
    bd56:	ldr	r0, [sp, #64]	; 0x40
    bd58:	str.w	r0, [r9]
    bd5c:	adds	r1, #1
    bd5e:	add	r3, r4
    bd60:	cmp	r1, #7
    bd62:	str	r3, [sp, #116]	; 0x74
    bd64:	str.w	r4, [r9, #4]
    bd68:	str	r1, [sp, #112]	; 0x70
    bd6a:	bgt.w	c1ba <_svfprintf_r+0x12da>
    bd6e:	add.w	r9, r9, #8
    bd72:	b.n	bcc8 <_svfprintf_r+0xde8>
    bd74:	tst.w	fp, #1
    bd78:	bne.w	b954 <_svfprintf_r+0xa74>
    bd7c:	cmp	r2, #7
    bd7e:	ble.w	b9a4 <_svfprintf_r+0xac4>
    bd82:	b.n	bbde <_svfprintf_r+0xcfe>
    bd84:	add	r2, sp, #108	; 0x6c
    bd86:	ldr	r1, [sp, #12]
    bd88:	ldr	r0, [sp, #20]
    bd8a:	bl	fb08 <__ssprint_r>
    bd8e:	cmp	r0, #0
    bd90:	bne.w	b0cc <_svfprintf_r+0x1ec>
    bd94:	ldr	r3, [sp, #116]	; 0x74
    bd96:	ldr	r2, [sp, #112]	; 0x70
    bd98:	add.w	r9, sp, #160	; 0xa0
    bd9c:	b.n	b95e <_svfprintf_r+0xa7e>
    bd9e:	add	r2, sp, #108	; 0x6c
    bda0:	ldr	r1, [sp, #12]
    bda2:	ldr	r0, [sp, #20]
    bda4:	bl	fb08 <__ssprint_r>
    bda8:	cmp	r0, #0
    bdaa:	bne.w	b0cc <_svfprintf_r+0x1ec>
    bdae:	ldr	r3, [sp, #116]	; 0x74
    bdb0:	ldr	r2, [sp, #112]	; 0x70
    bdb2:	add.w	r9, sp, #160	; 0xa0
    bdb6:	b.n	b97c <_svfprintf_r+0xa9c>
    bdb8:	add	r2, sp, #108	; 0x6c
    bdba:	ldr	r1, [sp, #12]
    bdbc:	ldr	r0, [sp, #20]
    bdbe:	bl	fb08 <__ssprint_r>
    bdc2:	cmp	r0, #0
    bdc4:	bne.w	b0cc <_svfprintf_r+0x1ec>
    bdc8:	ldr	r3, [sp, #116]	; 0x74
    bdca:	add.w	r9, sp, #160	; 0xa0
    bdce:	b.w	b3a8 <_svfprintf_r+0x4c8>
    bdd2:	str	r7, [sp, #36]	; 0x24
    bdd4:	movs	r7, #0
    bdd6:	b.w	b124 <_svfprintf_r+0x244>
    bdda:	nop
    bddc:	.word	0x2000177c
    bde0:	tst.w	fp, #16
    bde4:	bne.n	bdfe <_svfprintf_r+0xf1e>
    bde6:	tst.w	fp, #64	; 0x40
    bdea:	beq.n	bdfe <_svfprintf_r+0xf1e>
    bdec:	ldr	r2, [sp, #36]	; 0x24
    bdee:	ldr	r3, [r2, #0]
    bdf0:	adds	r2, #4
    bdf2:	str	r2, [sp, #36]	; 0x24
    bdf4:	ldrh.w	r2, [sp, #24]
    bdf8:	strh	r2, [r3, #0]
    bdfa:	b.w	af2c <_svfprintf_r+0x4c>
    bdfe:	ldr	r2, [sp, #36]	; 0x24
    be00:	ldr	r3, [r2, #0]
    be02:	adds	r2, #4
    be04:	str	r2, [sp, #36]	; 0x24
    be06:	ldr	r2, [sp, #24]
    be08:	str	r2, [r3, #0]
    be0a:	b.w	af2c <_svfprintf_r+0x4c>
    be0e:	vcmp.f64	d8, d8
    be12:	vmrs	APSR_nzcv, fpscr
    be16:	bvs.w	c356 <_svfprintf_r+0x1476>
    be1a:	ldr	r3, [sp, #48]	; 0x30
    be1c:	cmp.w	r8, #4294967295
    be20:	bic.w	r5, r3, #32
    be24:	beq.w	c272 <_svfprintf_r+0x1392>
    be28:	cmp	r5, #71	; 0x47
    be2a:	beq.w	c07a <_svfprintf_r+0x119a>
    be2e:	orr.w	r3, fp, #256	; 0x100
    be32:	str	r3, [sp, #40]	; 0x28
    be34:	vmov	r3, s17
    be38:	cmp	r3, #0
    be3a:	blt.w	c278 <_svfprintf_r+0x1398>
    be3e:	vmov.f64	d10, d8
    be42:	movs	r7, #0
    be44:	ldr	r3, [sp, #48]	; 0x30
    be46:	cmp	r3, #102	; 0x66
    be48:	beq.w	c250 <_svfprintf_r+0x1370>
    be4c:	cmp	r3, #70	; 0x46
    be4e:	beq.w	c02a <_svfprintf_r+0x114a>
    be52:	vmov.f64	d0, d10
    be56:	cmp	r5, #69	; 0x45
    be58:	ite	eq
    be5a:	addeq.w	r4, r8, #1
    be5e:	movne	r4, r8
    be60:	add	r2, sp, #100	; 0x64
    be62:	add	r3, sp, #88	; 0x58
    be64:	str	r2, [sp, #4]
    be66:	str	r3, [sp, #0]
    be68:	mov	r2, r4
    be6a:	add	r3, sp, #84	; 0x54
    be6c:	movs	r1, #2
    be6e:	ldr	r0, [sp, #20]
    be70:	bl	d548 <_dtoa_r>
    be74:	ldr	r3, [sp, #48]	; 0x30
    be76:	cmp	r3, #103	; 0x67
    be78:	mov	r6, r0
    be7a:	bne.w	c29a <_svfprintf_r+0x13ba>
    be7e:	tst.w	fp, #1
    be82:	beq.w	c352 <_svfprintf_r+0x1472>
    be86:	adds	r1, r6, r4
    be88:	vcmp.f64	d10, #0.0
    be8c:	vmrs	APSR_nzcv, fpscr
    be90:	beq.w	c19e <_svfprintf_r+0x12be>
    be94:	ldr	r3, [sp, #100]	; 0x64
    be96:	cmp	r1, r3
    be98:	bls.n	bea8 <_svfprintf_r+0xfc8>
    be9a:	movs	r0, #48	; 0x30
    be9c:	adds	r2, r3, #1
    be9e:	str	r2, [sp, #100]	; 0x64
    bea0:	strb	r0, [r3, #0]
    bea2:	ldr	r3, [sp, #100]	; 0x64
    bea4:	cmp	r1, r3
    bea6:	bhi.n	be9c <_svfprintf_r+0xfbc>
    bea8:	subs	r3, r3, r6
    beaa:	cmp	r5, #71	; 0x47
    beac:	str	r3, [sp, #52]	; 0x34
    beae:	beq.w	c0f0 <_svfprintf_r+0x1210>
    beb2:	ldr	r3, [sp, #48]	; 0x30
    beb4:	cmp	r3, #101	; 0x65
    beb6:	ble.w	c2b8 <_svfprintf_r+0x13d8>
    beba:	ldr	r3, [sp, #48]	; 0x30
    bebc:	cmp	r3, #102	; 0x66
    bebe:	ldr	r3, [sp, #84]	; 0x54
    bec0:	beq.w	c2bc <_svfprintf_r+0x13dc>
    bec4:	str	r3, [sp, #56]	; 0x38
    bec6:	ldr	r2, [sp, #56]	; 0x38
    bec8:	ldr	r1, [sp, #52]	; 0x34
    beca:	cmp	r2, r1
    becc:	blt.w	c280 <_svfprintf_r+0x13a0>
    bed0:	tst.w	fp, #1
    bed4:	bne.w	c340 <_svfprintf_r+0x1460>
    bed8:	bic.w	r3, r2, r2, asr #31
    bedc:	str	r2, [sp, #32]
    bede:	movs	r2, #103	; 0x67
    bee0:	str	r2, [sp, #48]	; 0x30
    bee2:	cmp	r7, #0
    bee4:	bne.w	c0d4 <_svfprintf_r+0x11f4>
    bee8:	mov	r8, r7
    beea:	str	r3, [sp, #16]
    beec:	ldr.w	fp, [sp, #40]	; 0x28
    bef0:	ldrb.w	r7, [sp, #79]	; 0x4f
    bef4:	b.w	b2c4 <_svfprintf_r+0x3e4>
    bef8:	bic.w	r7, r7, #7
    befc:	add.w	r3, r7, #8
    bf00:	vldr	d8, [r7]
    bf04:	str	r3, [sp, #36]	; 0x24
    bf06:	b.w	b286 <_svfprintf_r+0x3a6>
    bf0a:	mov	r6, r9
    bf0c:	mov	r9, r1
    bf0e:	adds	r2, #1
    bf10:	add	r3, r4
    bf12:	cmp	r2, #7
    bf14:	str	r3, [sp, #116]	; 0x74
    bf16:	str	r2, [sp, #112]	; 0x70
    bf18:	str.w	r7, [r9]
    bf1c:	str.w	r4, [r9, #4]
    bf20:	bgt.w	bc9e <_svfprintf_r+0xdbe>
    bf24:	add.w	r9, r9, #8
    bf28:	b.n	bcb4 <_svfprintf_r+0xdd4>
    bf2a:	movs	r7, #0
    bf2c:	cmp	r8, r7
    bf2e:	strb.w	r7, [sp, #79]	; 0x4f
    bf32:	blt.w	b7de <_svfprintf_r+0x8fe>
    bf36:	bic.w	fp, fp, #128	; 0x80
    bf3a:	b.n	b77a <_svfprintf_r+0x89a>
    bf3c:	add	r2, sp, #108	; 0x6c
    bf3e:	ldr	r1, [sp, #12]
    bf40:	ldr	r0, [sp, #20]
    bf42:	bl	fb08 <__ssprint_r>
    bf46:	cmp	r0, #0
    bf48:	bne.w	b0cc <_svfprintf_r+0x1ec>
    bf4c:	ldr	r3, [sp, #116]	; 0x74
    bf4e:	add.w	r9, sp, #160	; 0xa0
    bf52:	b.n	b81c <_svfprintf_r+0x93c>
    bf54:	ldr	r7, [sp, #36]	; 0x24
    bf56:	b.n	b7d0 <_svfprintf_r+0x8f0>
    bf58:	ldr	r2, [sp, #112]	; 0x70
    bf5a:	ldr	r1, [pc, #740]	; (c240 <_svfprintf_r+0x1360>)
    bf5c:	str.w	r1, [r9]
    bf60:	adds	r2, #1
    bf62:	adds	r3, #1
    bf64:	movs	r1, #1
    bf66:	cmp	r2, #7
    bf68:	str	r3, [sp, #116]	; 0x74
    bf6a:	str	r2, [sp, #112]	; 0x70
    bf6c:	str.w	r1, [r9, #4]
    bf70:	bgt.n	c060 <_svfprintf_r+0x1180>
    bf72:	add.w	r9, r9, #8
    bf76:	cbnz	r4, bf84 <_svfprintf_r+0x10a4>
    bf78:	ldr	r2, [sp, #52]	; 0x34
    bf7a:	cbnz	r2, bf84 <_svfprintf_r+0x10a4>
    bf7c:	tst.w	fp, #1
    bf80:	beq.w	b442 <_svfprintf_r+0x562>
    bf84:	ldr	r2, [sp, #112]	; 0x70
    bf86:	ldr	r0, [sp, #60]	; 0x3c
    bf88:	ldr	r1, [sp, #64]	; 0x40
    bf8a:	str.w	r1, [r9]
    bf8e:	adds	r2, #1
    bf90:	add	r3, r0
    bf92:	cmp	r2, #7
    bf94:	str	r3, [sp, #116]	; 0x74
    bf96:	str.w	r0, [r9, #4]
    bf9a:	str	r2, [sp, #112]	; 0x70
    bf9c:	bgt.w	c30c <_svfprintf_r+0x142c>
    bfa0:	add.w	r9, r9, #8
    bfa4:	negs	r4, r4
    bfa6:	cmp	r4, #0
    bfa8:	ble.w	c0ba <_svfprintf_r+0x11da>
    bfac:	cmp	r4, #16
    bfae:	ldr	r7, [pc, #660]	; (c244 <_svfprintf_r+0x1364>)
    bfb0:	ble.w	c1d8 <_svfprintf_r+0x12f8>
    bfb4:	mov	r1, r9
    bfb6:	movs	r5, #16
    bfb8:	mov	r9, r6
    bfba:	ldr.w	r8, [sp, #20]
    bfbe:	ldr	r6, [sp, #12]
    bfc0:	b.n	bfcc <_svfprintf_r+0x10ec>
    bfc2:	adds	r1, #8
    bfc4:	subs	r4, #16
    bfc6:	cmp	r4, #16
    bfc8:	ble.w	c1d4 <_svfprintf_r+0x12f4>
    bfcc:	adds	r2, #1
    bfce:	adds	r3, #16
    bfd0:	cmp	r2, #7
    bfd2:	str	r3, [sp, #116]	; 0x74
    bfd4:	str	r2, [sp, #112]	; 0x70
    bfd6:	str	r7, [r1, #0]
    bfd8:	str	r5, [r1, #4]
    bfda:	ble.n	bfc2 <_svfprintf_r+0x10e2>
    bfdc:	add	r2, sp, #108	; 0x6c
    bfde:	mov	r1, r6
    bfe0:	mov	r0, r8
    bfe2:	bl	fb08 <__ssprint_r>
    bfe6:	cmp	r0, #0
    bfe8:	bne.w	b0cc <_svfprintf_r+0x1ec>
    bfec:	ldr	r3, [sp, #116]	; 0x74
    bfee:	ldr	r2, [sp, #112]	; 0x70
    bff0:	add	r1, sp, #160	; 0xa0
    bff2:	b.n	bfc4 <_svfprintf_r+0x10e4>
    bff4:	add	r2, sp, #108	; 0x6c
    bff6:	ldr	r1, [sp, #12]
    bff8:	ldr	r0, [sp, #20]
    bffa:	bl	fb08 <__ssprint_r>
    bffe:	cmp	r0, #0
    c000:	bne.w	b0cc <_svfprintf_r+0x1ec>
    c004:	ldr	r3, [sp, #116]	; 0x74
    c006:	add.w	r9, sp, #160	; 0xa0
    c00a:	b.n	b84c <_svfprintf_r+0x96c>
    c00c:	movs	r1, #64	; 0x40
    c00e:	ldr	r0, [sp, #20]
    c010:	bl	8fb8 <_malloc_r>
    c014:	ldr	r2, [sp, #12]
    c016:	str	r0, [r2, #0]
    c018:	str	r0, [r2, #16]
    c01a:	cmp	r0, #0
    c01c:	beq.w	c3fa <_svfprintf_r+0x151a>
    c020:	ldr	r2, [sp, #12]
    c022:	movs	r3, #64	; 0x40
    c024:	str	r3, [r2, #20]
    c026:	b.w	af12 <_svfprintf_r+0x32>
    c02a:	add	r2, sp, #100	; 0x64
    c02c:	add	r3, sp, #88	; 0x58
    c02e:	str	r2, [sp, #4]
    c030:	str	r3, [sp, #0]
    c032:	mov	r2, r8
    c034:	add	r3, sp, #84	; 0x54
    c036:	movs	r1, #3
    c038:	vmov.f64	d0, d10
    c03c:	ldr	r0, [sp, #20]
    c03e:	bl	d548 <_dtoa_r>
    c042:	mov	r4, r8
    c044:	mov	r6, r0
    c046:	ldr	r3, [sp, #48]	; 0x30
    c048:	cmp	r3, #70	; 0x46
    c04a:	add.w	r1, r6, r4
    c04e:	bne.w	be88 <_svfprintf_r+0xfa8>
    c052:	ldrb	r3, [r6, #0]
    c054:	cmp	r3, #48	; 0x30
    c056:	beq.w	c374 <_svfprintf_r+0x1494>
    c05a:	ldr	r4, [sp, #84]	; 0x54
    c05c:	add	r1, r4
    c05e:	b.n	be88 <_svfprintf_r+0xfa8>
    c060:	add	r2, sp, #108	; 0x6c
    c062:	ldr	r1, [sp, #12]
    c064:	ldr	r0, [sp, #20]
    c066:	bl	fb08 <__ssprint_r>
    c06a:	cmp	r0, #0
    c06c:	bne.w	b0cc <_svfprintf_r+0x1ec>
    c070:	ldr	r4, [sp, #84]	; 0x54
    c072:	ldr	r3, [sp, #116]	; 0x74
    c074:	add.w	r9, sp, #160	; 0xa0
    c078:	b.n	bf76 <_svfprintf_r+0x1096>
    c07a:	cmp.w	r8, #0
    c07e:	it	eq
    c080:	moveq.w	r8, #1
    c084:	b.n	be2e <_svfprintf_r+0xf4e>
    c086:	str	r3, [sp, #36]	; 0x24
    c088:	b.n	bdd4 <_svfprintf_r+0xef4>
    c08a:	str	r3, [sp, #36]	; 0x24
    c08c:	mov	r7, r2
    c08e:	b.w	b588 <_svfprintf_r+0x6a8>
    c092:	mov	r0, r6
    c094:	bl	9d40 <strlen>
    c098:	mov	r8, r4
    c09a:	mov	r3, r0
    c09c:	str	r0, [sp, #32]
    c09e:	b.w	b764 <_svfprintf_r+0x884>
    c0a2:	add	r2, sp, #108	; 0x6c
    c0a4:	ldr	r1, [sp, #12]
    c0a6:	ldr	r0, [sp, #20]
    c0a8:	bl	fb08 <__ssprint_r>
    c0ac:	cmp	r0, #0
    c0ae:	bne.w	b0cc <_svfprintf_r+0x1ec>
    c0b2:	ldr	r3, [sp, #116]	; 0x74
    c0b4:	ldr	r2, [sp, #112]	; 0x70
    c0b6:	add.w	r9, sp, #160	; 0xa0
    c0ba:	ldr	r0, [sp, #52]	; 0x34
    c0bc:	str.w	r6, [r9]
    c0c0:	adds	r2, #1
    c0c2:	add	r3, r0
    c0c4:	cmp	r2, #7
    c0c6:	str	r3, [sp, #116]	; 0x74
    c0c8:	str	r2, [sp, #112]	; 0x70
    c0ca:	str.w	r0, [r9, #4]
    c0ce:	ble.w	b43e <_svfprintf_r+0x55e>
    c0d2:	b.n	b9c2 <_svfprintf_r+0xae2>
    c0d4:	movs	r7, #45	; 0x2d
    c0d6:	str	r3, [sp, #16]
    c0d8:	ldr.w	fp, [sp, #40]	; 0x28
    c0dc:	strb.w	r7, [sp, #79]	; 0x4f
    c0e0:	mov.w	r8, #0
    c0e4:	b.w	b2c6 <_svfprintf_r+0x3e6>
    c0e8:	str	r7, [sp, #36]	; 0x24
    c0ea:	mov	r7, r3
    c0ec:	b.w	b588 <_svfprintf_r+0x6a8>
    c0f0:	ldr	r3, [sp, #84]	; 0x54
    c0f2:	adds	r2, r3, #3
    c0f4:	blt.n	c0fc <_svfprintf_r+0x121c>
    c0f6:	cmp	r8, r3
    c0f8:	bge.w	bec4 <_svfprintf_r+0xfe4>
    c0fc:	ldr	r2, [sp, #48]	; 0x30
    c0fe:	subs	r2, #2
    c100:	str	r2, [sp, #48]	; 0x30
    c102:	subs	r3, #1
    c104:	cmp	r3, #0
    c106:	ldrb.w	r2, [sp, #48]	; 0x30
    c10a:	str	r3, [sp, #84]	; 0x54
    c10c:	it	lt
    c10e:	neglt	r3, r3
    c110:	strb.w	r2, [sp, #92]	; 0x5c
    c114:	ite	lt
    c116:	movlt	r2, #45	; 0x2d
    c118:	movge	r2, #43	; 0x2b
    c11a:	cmp	r3, #9
    c11c:	strb.w	r2, [sp, #93]	; 0x5d
    c120:	ble.w	c330 <_svfprintf_r+0x1450>
    c124:	add.w	r0, sp, #107	; 0x6b
    c128:	mov	r4, r0
    c12a:	ldr	r2, [pc, #284]	; (c248 <_svfprintf_r+0x1368>)
    c12c:	smull	r2, r1, r2, r3
    c130:	asrs	r2, r3, #31
    c132:	rsb	r2, r2, r1, asr #2
    c136:	add.w	r1, r2, r2, lsl #2
    c13a:	sub.w	r3, r3, r1, lsl #1
    c13e:	add.w	r1, r3, #48	; 0x30
    c142:	cmp	r2, #9
    c144:	mov	r3, r2
    c146:	strb.w	r1, [r4, #-1]!
    c14a:	bgt.n	c12a <_svfprintf_r+0x124a>
    c14c:	mov	r1, r4
    c14e:	adds	r3, #48	; 0x30
    c150:	uxtb	r2, r3
    c152:	strb.w	r2, [r1, #-1]!
    c156:	cmp	r0, r1
    c158:	bls.w	c420 <_svfprintf_r+0x1540>
    c15c:	add.w	r1, sp, #94	; 0x5e
    c160:	mov	r3, r4
    c162:	b.n	c168 <_svfprintf_r+0x1288>
    c164:	ldrb.w	r2, [r3], #1
    c168:	strb.w	r2, [r1], #1
    c16c:	cmp	r0, r3
    c16e:	bne.n	c164 <_svfprintf_r+0x1284>
    c170:	adds	r3, r0, #1
    c172:	subs	r3, r3, r4
    c174:	add.w	r2, sp, #94	; 0x5e
    c178:	add	r3, r2
    c17a:	add	r2, sp, #92	; 0x5c
    c17c:	subs	r3, r3, r2
    c17e:	ldr	r2, [sp, #52]	; 0x34
    c180:	str	r3, [sp, #68]	; 0x44
    c182:	cmp	r2, #1
    c184:	add	r3, r2
    c186:	str	r3, [sp, #32]
    c188:	ble.w	c38a <_svfprintf_r+0x14aa>
    c18c:	ldr	r3, [sp, #32]
    c18e:	ldr	r2, [sp, #60]	; 0x3c
    c190:	add	r3, r2
    c192:	movs	r2, #0
    c194:	str	r3, [sp, #32]
    c196:	str	r2, [sp, #56]	; 0x38
    c198:	bic.w	r3, r3, r3, asr #31
    c19c:	b.n	bee2 <_svfprintf_r+0x1002>
    c19e:	mov	r3, r1
    c1a0:	b.n	bea8 <_svfprintf_r+0xfc8>
    c1a2:	add	r2, sp, #108	; 0x6c
    c1a4:	ldr	r1, [sp, #12]
    c1a6:	ldr	r0, [sp, #20]
    c1a8:	bl	fb08 <__ssprint_r>
    c1ac:	cmp	r0, #0
    c1ae:	bne.w	b0cc <_svfprintf_r+0x1ec>
    c1b2:	ldr	r3, [sp, #116]	; 0x74
    c1b4:	add.w	r9, sp, #160	; 0xa0
    c1b8:	b.n	bac2 <_svfprintf_r+0xbe2>
    c1ba:	add	r2, sp, #108	; 0x6c
    c1bc:	ldr	r1, [sp, #12]
    c1be:	ldr	r0, [sp, #20]
    c1c0:	bl	fb08 <__ssprint_r>
    c1c4:	cmp	r0, #0
    c1c6:	bne.w	b0cc <_svfprintf_r+0x1ec>
    c1ca:	ldr	r2, [sp, #84]	; 0x54
    c1cc:	ldr	r3, [sp, #116]	; 0x74
    c1ce:	add.w	r9, sp, #160	; 0xa0
    c1d2:	b.n	bcc8 <_svfprintf_r+0xde8>
    c1d4:	mov	r6, r9
    c1d6:	mov	r9, r1
    c1d8:	adds	r2, #1
    c1da:	add	r3, r4
    c1dc:	cmp	r2, #7
    c1de:	str	r3, [sp, #116]	; 0x74
    c1e0:	str	r2, [sp, #112]	; 0x70
    c1e2:	str.w	r7, [r9]
    c1e6:	str.w	r4, [r9, #4]
    c1ea:	bgt.w	c0a2 <_svfprintf_r+0x11c2>
    c1ee:	add.w	r9, r9, #8
    c1f2:	b.n	c0ba <_svfprintf_r+0x11da>
    c1f4:	add	r2, sp, #108	; 0x6c
    c1f6:	ldr	r1, [sp, #12]
    c1f8:	ldr	r0, [sp, #20]
    c1fa:	bl	fb08 <__ssprint_r>
    c1fe:	cmp	r0, #0
    c200:	bne.w	b0cc <_svfprintf_r+0x1ec>
    c204:	ldr	r2, [sp, #84]	; 0x54
    c206:	ldr	r1, [sp, #52]	; 0x34
    c208:	ldr	r3, [sp, #116]	; 0x74
    c20a:	subs	r2, r1, r2
    c20c:	add.w	r9, sp, #160	; 0xa0
    c210:	b.n	bcf8 <_svfprintf_r+0xe18>
    c212:	cmp	r5, #6
    c214:	mov	r3, r5
    c216:	it	cs
    c218:	movcs	r3, #6
    c21a:	str	r3, [sp, #32]
    c21c:	bic.w	r3, r3, r3, asr #31
    c220:	mov	r8, r6
    c222:	str	r7, [sp, #36]	; 0x24
    c224:	str	r6, [sp, #56]	; 0x38
    c226:	mov	r7, r6
    c228:	str	r3, [sp, #16]
    c22a:	ldr	r6, [pc, #32]	; (c24c <_svfprintf_r+0x136c>)
    c22c:	b.w	b2c4 <_svfprintf_r+0x3e4>
    c230:	mov	fp, r3
    c232:	b.w	b60a <_svfprintf_r+0x72a>
    c236:	movs	r7, #45	; 0x2d
    c238:	strb.w	r7, [sp, #79]	; 0x4f
    c23c:	b.w	b2a6 <_svfprintf_r+0x3c6>
    c240:	.word	0x200016dc
    c244:	.word	0x2000177c
    c248:	.word	0x66666667
    c24c:	.word	0x200016d4
    c250:	add	r2, sp, #100	; 0x64
    c252:	add	r3, sp, #88	; 0x58
    c254:	str	r2, [sp, #4]
    c256:	str	r3, [sp, #0]
    c258:	movs	r1, #3
    c25a:	add	r3, sp, #84	; 0x54
    c25c:	mov	r2, r8
    c25e:	vmov.f64	d0, d10
    c262:	ldr	r0, [sp, #20]
    c264:	bl	d548 <_dtoa_r>
    c268:	mov	r4, r8
    c26a:	mov	r6, r0
    c26c:	add.w	r1, r0, r8
    c270:	b.n	c052 <_svfprintf_r+0x1172>
    c272:	mov.w	r8, #6
    c276:	b.n	be2e <_svfprintf_r+0xf4e>
    c278:	vneg.f64	d10, d8
    c27c:	movs	r7, #45	; 0x2d
    c27e:	b.n	be44 <_svfprintf_r+0xf64>
    c280:	ldr	r2, [sp, #60]	; 0x3c
    c282:	ldr	r3, [sp, #52]	; 0x34
    c284:	add	r3, r2
    c286:	ldr	r2, [sp, #56]	; 0x38
    c288:	str	r3, [sp, #32]
    c28a:	cmp	r2, #0
    c28c:	ble.w	c39c <_svfprintf_r+0x14bc>
    c290:	movs	r2, #103	; 0x67
    c292:	bic.w	r3, r3, r3, asr #31
    c296:	str	r2, [sp, #48]	; 0x30
    c298:	b.n	bee2 <_svfprintf_r+0x1002>
    c29a:	ldr	r3, [sp, #48]	; 0x30
    c29c:	cmp	r3, #71	; 0x47
    c29e:	bne.w	be86 <_svfprintf_r+0xfa6>
    c2a2:	tst.w	fp, #1
    c2a6:	bne.w	c046 <_svfprintf_r+0x1166>
    c2aa:	ldr	r3, [sp, #100]	; 0x64
    c2ac:	cmp	r5, #71	; 0x47
    c2ae:	sub.w	r3, r3, r6
    c2b2:	str	r3, [sp, #52]	; 0x34
    c2b4:	beq.w	c0f0 <_svfprintf_r+0x1210>
    c2b8:	ldr	r3, [sp, #84]	; 0x54
    c2ba:	b.n	c102 <_svfprintf_r+0x1222>
    c2bc:	cmp	r3, #0
    c2be:	mov	r2, r3
    c2c0:	str	r3, [sp, #56]	; 0x38
    c2c2:	ble.n	c3ac <_svfprintf_r+0x14cc>
    c2c4:	cmp.w	r8, #0
    c2c8:	bne.n	c362 <_svfprintf_r+0x1482>
    c2ca:	tst.w	fp, #1
    c2ce:	bne.n	c362 <_svfprintf_r+0x1482>
    c2d0:	bic.w	r3, r3, r3, asr #31
    c2d4:	str	r2, [sp, #32]
    c2d6:	b.n	bee2 <_svfprintf_r+0x1002>
    c2d8:	tst.w	fp, #1
    c2dc:	mov	r7, r8
    c2de:	beq.n	c2ec <_svfprintf_r+0x140c>
    c2e0:	add	r6, sp, #224	; 0xe0
    c2e2:	movs	r3, #48	; 0x30
    c2e4:	strb.w	r3, [r6, #-65]!
    c2e8:	b.w	b598 <_svfprintf_r+0x6b8>
    c2ec:	str.w	r8, [sp, #32]
    c2f0:	add	r6, sp, #160	; 0xa0
    c2f2:	b.w	b59e <_svfprintf_r+0x6be>
    c2f6:	bic.w	r3, r5, r5, asr #31
    c2fa:	str	r7, [sp, #36]	; 0x24
    c2fc:	str	r3, [sp, #16]
    c2fe:	str	r5, [sp, #32]
    c300:	mov	r8, r0
    c302:	str	r0, [sp, #56]	; 0x38
    c304:	ldrb.w	r7, [sp, #79]	; 0x4f
    c308:	b.w	b2c4 <_svfprintf_r+0x3e4>
    c30c:	add	r2, sp, #108	; 0x6c
    c30e:	ldr	r1, [sp, #12]
    c310:	ldr	r0, [sp, #20]
    c312:	bl	fb08 <__ssprint_r>
    c316:	cmp	r0, #0
    c318:	bne.w	b0cc <_svfprintf_r+0x1ec>
    c31c:	ldr	r4, [sp, #84]	; 0x54
    c31e:	ldr	r3, [sp, #116]	; 0x74
    c320:	ldr	r2, [sp, #112]	; 0x70
    c322:	add.w	r9, sp, #160	; 0xa0
    c326:	b.n	bfa4 <_svfprintf_r+0x10c4>
    c328:	mov	sl, r4
    c32a:	movs	r5, #0
    c32c:	b.w	af96 <_svfprintf_r+0xb6>
    c330:	adds	r3, #48	; 0x30
    c332:	movs	r2, #48	; 0x30
    c334:	strb.w	r3, [sp, #95]	; 0x5f
    c338:	strb.w	r2, [sp, #94]	; 0x5e
    c33c:	add	r3, sp, #96	; 0x60
    c33e:	b.n	c17a <_svfprintf_r+0x129a>
    c340:	ldr	r2, [sp, #60]	; 0x3c
    c342:	ldr	r3, [sp, #56]	; 0x38
    c344:	add	r3, r2
    c346:	movs	r2, #103	; 0x67
    c348:	str	r3, [sp, #32]
    c34a:	str	r2, [sp, #48]	; 0x30
    c34c:	bic.w	r3, r3, r3, asr #31
    c350:	b.n	bee2 <_svfprintf_r+0x1002>
    c352:	ldr	r3, [sp, #100]	; 0x64
    c354:	b.n	bea8 <_svfprintf_r+0xfc8>
    c356:	ldr	r6, [pc, #240]	; (c448 <_svfprintf_r+0x1568>)
    c358:	ldr	r3, [pc, #240]	; (c44c <_svfprintf_r+0x156c>)
    c35a:	ldrb.w	r7, [sp, #79]	; 0x4f
    c35e:	b.w	b2aa <_svfprintf_r+0x3ca>
    c362:	ldr	r3, [sp, #56]	; 0x38
    c364:	ldr	r2, [sp, #60]	; 0x3c
    c366:	adds	r5, r3, r2
    c368:	add.w	r3, r5, r8
    c36c:	str	r3, [sp, #32]
    c36e:	bic.w	r3, r3, r3, asr #31
    c372:	b.n	bee2 <_svfprintf_r+0x1002>
    c374:	vcmp.f64	d10, #0.0
    c378:	vmrs	APSR_nzcv, fpscr
    c37c:	beq.w	c05a <_svfprintf_r+0x117a>
    c380:	rsb	r4, r4, #1
    c384:	str	r4, [sp, #84]	; 0x54
    c386:	add	r1, r4
    c388:	b.n	be88 <_svfprintf_r+0xfa8>
    c38a:	ands.w	r3, fp, #1
    c38e:	bne.w	c18c <_svfprintf_r+0x12ac>
    c392:	str	r3, [sp, #56]	; 0x38
    c394:	ldr	r3, [sp, #32]
    c396:	bic.w	r3, r3, r3, asr #31
    c39a:	b.n	bee2 <_svfprintf_r+0x1002>
    c39c:	ldr	r3, [sp, #56]	; 0x38
    c39e:	ldr	r2, [sp, #32]
    c3a0:	rsb	r3, r3, #1
    c3a4:	add	r2, r3
    c3a6:	mov	r3, r2
    c3a8:	str	r2, [sp, #32]
    c3aa:	b.n	c290 <_svfprintf_r+0x13b0>
    c3ac:	cmp.w	r8, #0
    c3b0:	bne.n	c3b8 <_svfprintf_r+0x14d8>
    c3b2:	tst.w	fp, #1
    c3b6:	beq.n	c3c8 <_svfprintf_r+0x14e8>
    c3b8:	ldr	r3, [sp, #60]	; 0x3c
    c3ba:	adds	r5, r3, #1
    c3bc:	add.w	r3, r5, r8
    c3c0:	str	r3, [sp, #32]
    c3c2:	bic.w	r3, r3, r3, asr #31
    c3c6:	b.n	bee2 <_svfprintf_r+0x1002>
    c3c8:	movs	r3, #1
    c3ca:	str	r3, [sp, #32]
    c3cc:	b.n	bee2 <_svfprintf_r+0x1002>
    c3ce:	ldr	r0, [sp, #36]	; 0x24
    c3d0:	ldrb.w	r3, [sl, #1]
    c3d4:	ldr	r5, [r0, #0]
    c3d6:	adds	r0, #4
    c3d8:	cmp	r5, #0
    c3da:	str	r0, [sp, #36]	; 0x24
    c3dc:	mov	sl, r4
    c3de:	bge.w	af92 <_svfprintf_r+0xb2>
    c3e2:	mov.w	r5, #4294967295
    c3e6:	b.w	af92 <_svfprintf_r+0xb2>
    c3ea:	strb.w	r1, [sp, #79]	; 0x4f
    c3ee:	b.w	b70c <_svfprintf_r+0x82c>
    c3f2:	strb.w	r1, [sp, #79]	; 0x4f
    c3f6:	b.w	b798 <_svfprintf_r+0x8b8>
    c3fa:	ldr	r2, [sp, #20]
    c3fc:	movs	r3, #12
    c3fe:	str	r3, [r2, #0]
    c400:	mov.w	r0, #4294967295
    c404:	b.w	b0de <_svfprintf_r+0x1fe>
    c408:	strb.w	r1, [sp, #79]	; 0x4f
    c40c:	b.w	b5b8 <_svfprintf_r+0x6d8>
    c410:	strb.w	r1, [sp, #79]	; 0x4f
    c414:	b.w	b55e <_svfprintf_r+0x67e>
    c418:	strb.w	r1, [sp, #79]	; 0x4f
    c41c:	b.w	b6c4 <_svfprintf_r+0x7e4>
    c420:	add.w	r3, sp, #94	; 0x5e
    c424:	b.n	c17a <_svfprintf_r+0x129a>
    c426:	strb.w	r1, [sp, #79]	; 0x4f
    c42a:	b.w	b0f2 <_svfprintf_r+0x212>
    c42e:	strb.w	r1, [sp, #79]	; 0x4f
    c432:	b.w	b4fa <_svfprintf_r+0x61a>
    c436:	strb.w	r1, [sp, #79]	; 0x4f
    c43a:	b.w	b26a <_svfprintf_r+0x38a>
    c43e:	strb.w	r1, [sp, #79]	; 0x4f
    c442:	b.w	b1e6 <_svfprintf_r+0x306>
    c446:	nop
    c448:	.word	0x2000167c
    c44c:	.word	0x200016a8

0000c450 <__ssvfscanf_r>:
    c450:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c454:	mov	fp, r1
    c456:	ldrsh.w	r1, [r1, #12]
    c45a:	sub.w	sp, sp, #684	; 0x2ac
    c45e:	mov	sl, r0
    c460:	lsls	r0, r1, #18
    c462:	mov	r4, r2
    c464:	str	r3, [sp, #16]
    c466:	bmi.n	c47c <__ssvfscanf_r+0x2c>
    c468:	ldr.w	r3, [fp, #100]	; 0x64
    c46c:	orr.w	r1, r1, #8192	; 0x2000
    c470:	bic.w	r3, r3, #8192	; 0x2000
    c474:	strh.w	r1, [fp, #12]
    c478:	str.w	r3, [fp, #100]	; 0x64
    c47c:	mov	r6, r4
    c47e:	movs	r3, #0
    c480:	str	r3, [sp, #24]
    c482:	str	r3, [sp, #12]
    c484:	mov	r7, r3
    c486:	str	r3, [sp, #20]
    c488:	ldrb.w	r3, [r6], #1
    c48c:	str	r3, [sp, #60]	; 0x3c
    c48e:	cbz	r3, c4ec <__ssvfscanf_r+0x9c>
    c490:	bl	8f84 <__locale_ctype_ptr>
    c494:	ldr	r2, [sp, #60]	; 0x3c
    c496:	add	r0, r2
    c498:	ldrb	r3, [r0, #1]
    c49a:	and.w	r3, r3, #8
    c49e:	and.w	r5, r3, #255	; 0xff
    c4a2:	cbz	r3, c4f6 <__ssvfscanf_r+0xa6>
    c4a4:	ldr.w	r3, [fp, #4]
    c4a8:	b.n	c4ce <__ssvfscanf_r+0x7e>
    c4aa:	bl	8f84 <__locale_ctype_ptr>
    c4ae:	ldr.w	r3, [fp]
    c4b2:	ldrb	r2, [r3, #0]
    c4b4:	add	r0, r2
    c4b6:	adds	r3, #1
    c4b8:	ldrb	r2, [r0, #1]
    c4ba:	lsls	r1, r2, #28
    c4bc:	bpl.n	c4de <__ssvfscanf_r+0x8e>
    c4be:	ldr.w	r2, [fp, #4]
    c4c2:	str.w	r3, [fp]
    c4c6:	subs	r3, r2, #1
    c4c8:	adds	r7, #1
    c4ca:	str.w	r3, [fp, #4]
    c4ce:	cmp	r3, #0
    c4d0:	bgt.n	c4aa <__ssvfscanf_r+0x5a>
    c4d2:	mov	r1, fp
    c4d4:	mov	r0, sl
    c4d6:	bl	fc8c <__ssrefill_r>
    c4da:	cmp	r0, #0
    c4dc:	beq.n	c4aa <__ssvfscanf_r+0x5a>
    c4de:	mov	r4, r6
    c4e0:	mov	r6, r4
    c4e2:	ldrb.w	r3, [r6], #1
    c4e6:	str	r3, [sp, #60]	; 0x3c
    c4e8:	cmp	r3, #0
    c4ea:	bne.n	c490 <__ssvfscanf_r+0x40>
    c4ec:	ldr	r0, [sp, #20]
    c4ee:	add.w	sp, sp, #684	; 0x2ac
    c4f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c4f6:	cmp	r2, #37	; 0x25
    c4f8:	bne.w	c604 <__ssvfscanf_r+0x1b4>
    c4fc:	ldrb.w	r8, [r4, #1]
    c500:	mov	r4, r5
    c502:	adds	r3, r6, #1
    c504:	cmp.w	r8, #120	; 0x78
    c508:	bhi.w	c992 <__ssvfscanf_r+0x542>
    c50c:	tbh	[pc, r8, lsl #1]
    c510:	.word	0x02410092
    c514:	.word	0x02410241
    c518:	.word	0x02410241
    c51c:	.word	0x02410241
    c520:	.word	0x02410241
    c524:	.word	0x02410241
    c528:	.word	0x02410241
    c52c:	.word	0x02410241
    c530:	.word	0x02410241
    c534:	.word	0x02410241
    c538:	.word	0x02410241
    c53c:	.word	0x02410241
    c540:	.word	0x02410241
    c544:	.word	0x02410241
    c548:	.word	0x02410241
    c54c:	.word	0x02410241
    c550:	.word	0x02410241
    c554:	.word	0x02410241
    c558:	.word	0x00790241
    c55c:	.word	0x02410241
    c560:	.word	0x02410241
    c564:	.word	0x024101d8
    c568:	.word	0x02410241
    c56c:	.word	0x02410241
    c570:	.word	0x01cf01cf
    c574:	.word	0x01cf01cf
    c578:	.word	0x01cf01cf
    c57c:	.word	0x01cf01cf
    c580:	.word	0x01cf01cf
    c584:	.word	0x02410241
    c588:	.word	0x02410241
    c58c:	.word	0x02410241
    c590:	.word	0x02410241
    c594:	.word	0x02410241
    c598:	.word	0x01b901c1
    c59c:	.word	0x01b90241
    c5a0:	.word	0x02410241
    c5a4:	.word	0x02410241
    c5a8:	.word	0x024101b3
    c5ac:	.word	0x01a30241
    c5b0:	.word	0x02410241
    c5b4:	.word	0x02410241
    c5b8:	.word	0x02410241
    c5bc:	.word	0x02410241
    c5c0:	.word	0x02410193
    c5c4:	.word	0x01510241
    c5c8:	.word	0x02410241
    c5cc:	.word	0x02410241
    c5d0:	.word	0x02410241
    c5d4:	.word	0x01220241
    c5d8:	.word	0x01b90188
    c5dc:	.word	0x01b901b9
    c5e0:	.word	0x0098011c
    c5e4:	.word	0x02410241
    c5e8:	.word	0x024100d5
    c5ec:	.word	0x0101010d
    c5f0:	.word	0x024100f3
    c5f4:	.word	0x00eb0241
    c5f8:	.word	0x00df0241
    c5fc:	.word	0x02410241
    c600:	.short	0x0193
    c602:	mov	r6, r3
    c604:	ldr.w	r3, [fp, #4]
    c608:	cmp	r3, #0
    c60a:	ble.w	cab4 <__ssvfscanf_r+0x664>
    c60e:	ldr.w	r3, [fp]
    c612:	ldrb.w	r2, [r6, #-1]
    c616:	ldrb	r1, [r3, #0]
    c618:	cmp	r1, r2
    c61a:	bne.w	c4ec <__ssvfscanf_r+0x9c>
    c61e:	ldr.w	r2, [fp, #4]
    c622:	adds	r3, #1
    c624:	subs	r2, #1
    c626:	str.w	r3, [fp]
    c62a:	adds	r7, #1
    c62c:	str.w	r2, [fp, #4]
    c630:	mov	r4, r6
    c632:	b.n	c4e0 <__ssvfscanf_r+0x90>
    c634:	mov.w	r0, #4294967295
    c638:	add.w	sp, sp, #684	; 0x2ac
    c63c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c640:	str	r3, [sp, #8]
    c642:	ldr.w	r3, [fp, #4]
    c646:	cmp	r3, #0
    c648:	ble.w	cb12 <__ssvfscanf_r+0x6c2>
    c64c:	ldr	r3, [pc, #736]	; (c930 <__ssvfscanf_r+0x4e0>)
    c64e:	str	r3, [sp, #24]
    c650:	movs	r3, #0
    c652:	str	r3, [sp, #12]
    c654:	movs	r6, #3
    c656:	b.n	c65c <__ssvfscanf_r+0x20c>
    c658:	str.w	lr, [fp]
    c65c:	bl	8f84 <__locale_ctype_ptr>
    c660:	ldr.w	r2, [fp]
    c664:	ldrb	r1, [r2, #0]
    c666:	add	r0, r1
    c668:	add.w	lr, r2, #1
    c66c:	ldrb	r3, [r0, #1]
    c66e:	and.w	r3, r3, #8
    c672:	and.w	r8, r3, #255	; 0xff
    c676:	cmp	r3, #0
    c678:	beq.w	cb7a <__ssvfscanf_r+0x72a>
    c67c:	ldr.w	r3, [fp, #4]
    c680:	subs	r3, #1
    c682:	cmp	r3, #0
    c684:	add.w	r7, r7, #1
    c688:	str.w	r3, [fp, #4]
    c68c:	bgt.n	c658 <__ssvfscanf_r+0x208>
    c68e:	mov	r1, fp
    c690:	mov	r0, sl
    c692:	bl	fc8c <__ssrefill_r>
    c696:	cmp	r0, #0
    c698:	beq.n	c65c <__ssvfscanf_r+0x20c>
    c69a:	ldr	r2, [sp, #20]
    c69c:	cmp	r2, #0
    c69e:	beq.n	c634 <__ssvfscanf_r+0x1e4>
    c6a0:	ldrh.w	r3, [fp, #12]
    c6a4:	tst.w	r3, #64	; 0x40
    c6a8:	mov	r3, r2
    c6aa:	it	ne
    c6ac:	movne.w	r3, #4294967295
    c6b0:	mov	r0, r3
    c6b2:	add.w	sp, sp, #684	; 0x2ac
    c6b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6ba:	ldrb.w	r8, [r6, #1]
    c6be:	cmp.w	r8, #108	; 0x6c
    c6c2:	beq.w	caca <__ssvfscanf_r+0x67a>
    c6c6:	orr.w	r5, r5, #1
    c6ca:	mov	r6, r3
    c6cc:	b.n	c502 <__ssvfscanf_r+0xb2>
    c6ce:	str	r3, [sp, #8]
    c6d0:	ldr.w	r3, [fp, #4]
    c6d4:	cmp	r3, #0
    c6d6:	ble.w	cb6a <__ssvfscanf_r+0x71a>
    c6da:	ldr	r3, [pc, #600]	; (c934 <__ssvfscanf_r+0x4e4>)
    c6dc:	str	r3, [sp, #24]
    c6de:	movs	r3, #10
    c6e0:	str	r3, [sp, #12]
    c6e2:	movs	r6, #3
    c6e4:	b.n	c65c <__ssvfscanf_r+0x20c>
    c6e6:	str	r3, [sp, #8]
    c6e8:	ldr.w	r3, [fp, #4]
    c6ec:	cmp	r3, #0
    c6ee:	ble.w	cb5a <__ssvfscanf_r+0x70a>
    c6f2:	movs	r6, #2
    c6f4:	b.n	c65c <__ssvfscanf_r+0x20c>
    c6f6:	str	r3, [sp, #8]
    c6f8:	ldr.w	r3, [fp, #4]
    c6fc:	cmp	r3, #0
    c6fe:	orr.w	r5, r5, #544	; 0x220
    c702:	ble.w	c846 <__ssvfscanf_r+0x3f6>
    c706:	ldr	r3, [pc, #556]	; (c934 <__ssvfscanf_r+0x4e4>)
    c708:	str	r3, [sp, #24]
    c70a:	movs	r3, #16
    c70c:	str	r3, [sp, #12]
    c70e:	movs	r6, #3
    c710:	b.n	c65c <__ssvfscanf_r+0x20c>
    c712:	str	r3, [sp, #8]
    c714:	ldr.w	r3, [fp, #4]
    c718:	cmp	r3, #0
    c71a:	ble.w	c866 <__ssvfscanf_r+0x416>
    c71e:	ldr	r3, [pc, #532]	; (c934 <__ssvfscanf_r+0x4e4>)
    c720:	str	r3, [sp, #24]
    c722:	movs	r3, #8
    c724:	str	r3, [sp, #12]
    c726:	movs	r6, #3
    c728:	b.n	c65c <__ssvfscanf_r+0x20c>
    c72a:	lsls	r2, r5, #27
    c72c:	mov	r6, r3
    c72e:	str	r3, [sp, #8]
    c730:	bmi.w	c918 <__ssvfscanf_r+0x4c8>
    c734:	lsls	r3, r5, #29
    c736:	bpl.w	cae2 <__ssvfscanf_r+0x692>
    c73a:	ldr	r1, [sp, #16]
    c73c:	ldr	r3, [r1, #0]
    c73e:	strh	r7, [r3, #0]
    c740:	adds	r3, r1, #4
    c742:	str	r3, [sp, #16]
    c744:	mov	r4, r6
    c746:	b.n	c4e0 <__ssvfscanf_r+0x90>
    c748:	ldrb.w	r8, [r6, #1]
    c74c:	orr.w	r5, r5, #4
    c750:	mov	r6, r3
    c752:	b.n	c502 <__ssvfscanf_r+0xb2>
    c754:	str	r3, [sp, #8]
    c756:	ldr.w	r3, [fp, #4]
    c75a:	cmp	r3, #0
    c75c:	ble.w	cb3a <__ssvfscanf_r+0x6ea>
    c760:	cmp	r4, #0
    c762:	it	eq
    c764:	moveq	r4, #1
    c766:	ands.w	r3, r5, #1
    c76a:	bne.w	c9b2 <__ssvfscanf_r+0x562>
    c76e:	lsls	r2, r5, #27
    c770:	bpl.w	ca8a <__ssvfscanf_r+0x63a>
    c774:	mov	r5, r3
    c776:	b.n	c78c <__ssvfscanf_r+0x33c>
    c778:	add	r3, r2
    c77a:	str.w	r3, [fp]
    c77e:	add	r5, r2
    c780:	subs	r4, r4, r2
    c782:	bl	fc8c <__ssrefill_r>
    c786:	cmp	r0, #0
    c788:	bne.w	ca82 <__ssvfscanf_r+0x632>
    c78c:	ldr.w	r2, [fp, #4]
    c790:	ldr.w	r3, [fp]
    c794:	cmp	r2, r4
    c796:	mov	r1, fp
    c798:	mov	r0, sl
    c79a:	blt.n	c778 <__ssvfscanf_r+0x328>
    c79c:	subs	r2, r2, r4
    c79e:	add	r3, r4
    c7a0:	str.w	r2, [fp, #4]
    c7a4:	add	r5, r4
    c7a6:	str.w	r3, [fp]
    c7aa:	ldr	r6, [sp, #8]
    c7ac:	add	r7, r5
    c7ae:	mov	r4, r6
    c7b0:	b.n	c4e0 <__ssvfscanf_r+0x90>
    c7b2:	add.w	r9, sp, #72	; 0x48
    c7b6:	mov	r1, r3
    c7b8:	mov	r0, r9
    c7ba:	bl	f51c <__sccl>
    c7be:	ldr.w	r3, [fp, #4]
    c7c2:	cmp	r3, #0
    c7c4:	mov	r6, r0
    c7c6:	ble.w	cb2a <__ssvfscanf_r+0x6da>
    c7ca:	cmp	r4, #0
    c7cc:	ldr.w	r2, [fp]
    c7d0:	it	eq
    c7d2:	moveq.w	r4, #4294967295
    c7d6:	lsls	r3, r5, #27
    c7d8:	ldrb	r1, [r2, #0]
    c7da:	bpl.w	c91e <__ssvfscanf_r+0x4ce>
    c7de:	mov	r8, r4
    c7e0:	movs	r5, #0
    c7e2:	b.n	c7e6 <__ssvfscanf_r+0x396>
    c7e4:	ldrb	r1, [r2, #0]
    c7e6:	ldrb.w	r3, [r9, r1]
    c7ea:	adds	r2, #1
    c7ec:	cmp	r3, #0
    c7ee:	beq.w	ca78 <__ssvfscanf_r+0x628>
    c7f2:	ldr.w	r3, [fp, #4]
    c7f6:	str.w	r2, [fp]
    c7fa:	adds	r5, #1
    c7fc:	subs	r3, #1
    c7fe:	cmp	r5, r4
    c800:	str.w	r3, [fp, #4]
    c804:	beq.w	ca72 <__ssvfscanf_r+0x622>
    c808:	cmp	r3, #0
    c80a:	bgt.n	c7e4 <__ssvfscanf_r+0x394>
    c80c:	mov	r1, fp
    c80e:	mov	r0, sl
    c810:	bl	fc8c <__ssrefill_r>
    c814:	cmp	r0, #0
    c816:	bne.w	ca70 <__ssvfscanf_r+0x620>
    c81a:	ldr.w	r2, [fp]
    c81e:	b.n	c7e4 <__ssvfscanf_r+0x394>
    c820:	str	r3, [sp, #8]
    c822:	ldr.w	r3, [fp, #4]
    c826:	cmp	r3, #0
    c828:	ble.n	c8a0 <__ssvfscanf_r+0x450>
    c82a:	ldr	r3, [pc, #260]	; (c930 <__ssvfscanf_r+0x4e0>)
    c82c:	str	r3, [sp, #24]
    c82e:	movs	r3, #10
    c830:	str	r3, [sp, #12]
    c832:	movs	r6, #3
    c834:	b.n	c65c <__ssvfscanf_r+0x20c>
    c836:	str	r3, [sp, #8]
    c838:	ldr.w	r3, [fp, #4]
    c83c:	cmp	r3, #0
    c83e:	orr.w	r5, r5, #512	; 0x200
    c842:	bgt.w	c706 <__ssvfscanf_r+0x2b6>
    c846:	mov	r1, fp
    c848:	mov	r0, sl
    c84a:	bl	fc8c <__ssrefill_r>
    c84e:	cmp	r0, #0
    c850:	beq.w	c706 <__ssvfscanf_r+0x2b6>
    c854:	b.n	c69a <__ssvfscanf_r+0x24a>
    c856:	str	r3, [sp, #8]
    c858:	ldr.w	r3, [fp, #4]
    c85c:	cmp	r3, #0
    c85e:	orr.w	r5, r5, #1
    c862:	bgt.w	c71e <__ssvfscanf_r+0x2ce>
    c866:	mov	r1, fp
    c868:	mov	r0, sl
    c86a:	bl	fc8c <__ssrefill_r>
    c86e:	cmp	r0, #0
    c870:	beq.w	c71e <__ssvfscanf_r+0x2ce>
    c874:	b.n	c69a <__ssvfscanf_r+0x24a>
    c876:	ldrb.w	r8, [r6, #1]
    c87a:	orr.w	r5, r5, #2
    c87e:	mov	r6, r3
    c880:	b.n	c502 <__ssvfscanf_r+0xb2>
    c882:	str	r3, [sp, #8]
    c884:	ldr.w	r3, [fp, #4]
    c888:	cmp	r3, #0
    c88a:	ble.w	cb4a <__ssvfscanf_r+0x6fa>
    c88e:	movs	r6, #4
    c890:	b.n	c65c <__ssvfscanf_r+0x20c>
    c892:	str	r3, [sp, #8]
    c894:	ldr.w	r3, [fp, #4]
    c898:	cmp	r3, #0
    c89a:	orr.w	r5, r5, #1
    c89e:	bgt.n	c82a <__ssvfscanf_r+0x3da>
    c8a0:	mov	r1, fp
    c8a2:	mov	r0, sl
    c8a4:	bl	fc8c <__ssrefill_r>
    c8a8:	cmp	r0, #0
    c8aa:	beq.n	c82a <__ssvfscanf_r+0x3da>
    c8ac:	b.n	c69a <__ssvfscanf_r+0x24a>
    c8ae:	add.w	r4, r4, r4, lsl #2
    c8b2:	add.w	r4, r8, r4, lsl #1
    c8b6:	subs	r4, #48	; 0x30
    c8b8:	ldrb.w	r8, [r6, #1]
    c8bc:	mov	r6, r3
    c8be:	b.n	c502 <__ssvfscanf_r+0xb2>
    c8c0:	ldrb.w	r8, [r6, #1]
    c8c4:	orr.w	r5, r5, #16
    c8c8:	mov	r6, r3
    c8ca:	b.n	c502 <__ssvfscanf_r+0xb2>
    c8cc:	add	r3, sp, #64	; 0x40
    c8ce:	mov	r1, r8
    c8d0:	mov	r0, r3
    c8d2:	movs	r2, #8
    c8d4:	str	r3, [sp, #28]
    c8d6:	bl	972c <memset>
    c8da:	ands.w	r9, r5, #16
    c8de:	bne.w	d196 <__ssvfscanf_r+0xd46>
    c8e2:	ldr	r2, [sp, #16]
    c8e4:	mov	r3, r2
    c8e6:	adds	r3, #4
    c8e8:	ldr.w	r8, [r2]
    c8ec:	str	r3, [sp, #16]
    c8ee:	movs	r6, #0
    c8f0:	bl	8f84 <__locale_ctype_ptr>
    c8f4:	ldr.w	r3, [fp]
    c8f8:	ldrb	r3, [r3, #0]
    c8fa:	add	r0, r3
    c8fc:	ldrb	r3, [r0, #1]
    c8fe:	lsls	r0, r3, #28
    c900:	bmi.n	c908 <__ssvfscanf_r+0x4b8>
    c902:	cmp	r4, #0
    c904:	bne.w	d0fa <__ssvfscanf_r+0xcaa>
    c908:	cmp.w	r9, #0
    c90c:	bne.n	c918 <__ssvfscanf_r+0x4c8>
    c90e:	str.w	r9, [r8]
    c912:	ldr	r3, [sp, #20]
    c914:	adds	r3, #1
    c916:	str	r3, [sp, #20]
    c918:	ldr	r6, [sp, #8]
    c91a:	mov	r4, r6
    c91c:	b.n	c4e0 <__ssvfscanf_r+0x90>
    c91e:	ldr	r0, [sp, #16]
    c920:	ldr	r5, [r0, #0]
    c922:	mov	r3, r0
    c924:	adds	r3, #4
    c926:	add.w	r8, r5, r4
    c92a:	str	r3, [sp, #8]
    c92c:	mov	r4, r5
    c92e:	b.n	c93e <__ssvfscanf_r+0x4ee>
    c930:	.word	0x0000aeb9
    c934:	.word	0x0000f8d5
    c938:	ldr.w	r2, [fp]
    c93c:	ldrb	r1, [r2, #0]
    c93e:	ldrb.w	r3, [r9, r1]
    c942:	adds	r0, r2, #1
    c944:	cbz	r3, c978 <__ssvfscanf_r+0x528>
    c946:	ldr.w	r3, [fp, #4]
    c94a:	str.w	r0, [fp]
    c94e:	subs	r3, #1
    c950:	str.w	r3, [fp, #4]
    c954:	ldrb	r3, [r2, #0]
    c956:	strb.w	r3, [r4], #1
    c95a:	cmp	r8, r4
    c95c:	beq.n	c978 <__ssvfscanf_r+0x528>
    c95e:	ldr.w	r3, [fp, #4]
    c962:	cmp	r3, #0
    c964:	bgt.n	c938 <__ssvfscanf_r+0x4e8>
    c966:	mov	r1, fp
    c968:	mov	r0, sl
    c96a:	bl	fc8c <__ssrefill_r>
    c96e:	cmp	r0, #0
    c970:	beq.n	c938 <__ssvfscanf_r+0x4e8>
    c972:	cmp	r5, r4
    c974:	beq.w	c69a <__ssvfscanf_r+0x24a>
    c978:	subs	r5, r4, r5
    c97a:	beq.w	c4ec <__ssvfscanf_r+0x9c>
    c97e:	ldr	r2, [sp, #20]
    c980:	adds	r2, #1
    c982:	movs	r3, #0
    c984:	str	r2, [sp, #20]
    c986:	ldr	r2, [sp, #8]
    c988:	str	r2, [sp, #16]
    c98a:	strb	r3, [r4, #0]
    c98c:	add	r7, r5
    c98e:	mov	r4, r6
    c990:	b.n	c4e0 <__ssvfscanf_r+0x90>
    c992:	str	r3, [sp, #8]
    c994:	bl	8f84 <__locale_ctype_ptr>
    c998:	add	r0, r8
    c99a:	ldrb	r3, [r0, #1]
    c99c:	and.w	r3, r3, #3
    c9a0:	cmp	r3, #1
    c9a2:	ldr.w	r3, [fp, #4]
    c9a6:	beq.w	cad6 <__ssvfscanf_r+0x686>
    c9aa:	cmp	r3, #0
    c9ac:	bgt.w	c82a <__ssvfscanf_r+0x3da>
    c9b0:	b.n	c8a0 <__ssvfscanf_r+0x450>
    c9b2:	add	r3, sp, #64	; 0x40
    c9b4:	mov	r0, r3
    c9b6:	movs	r2, #8
    c9b8:	movs	r1, #0
    c9ba:	str	r3, [sp, #28]
    c9bc:	bl	972c <memset>
    c9c0:	ands.w	r3, r5, #16
    c9c4:	str	r3, [sp, #32]
    c9c6:	bne.n	cac4 <__ssvfscanf_r+0x674>
    c9c8:	ldr	r2, [sp, #16]
    c9ca:	mov	r3, r2
    c9cc:	adds	r3, #4
    c9ce:	ldr.w	r9, [r2]
    c9d2:	str	r3, [sp, #16]
    c9d4:	movs	r5, #0
    c9d6:	add.w	r8, sp, #328	; 0x148
    c9da:	bl	8f60 <__locale_mb_cur_max>
    c9de:	cmp	r0, r5
    c9e0:	beq.w	c69a <__ssvfscanf_r+0x24a>
    c9e4:	ldmia.w	fp, {r2, r3}
    c9e8:	ldrb.w	r0, [r2], #1
    c9ec:	str.w	r2, [fp]
    c9f0:	subs	r3, #1
    c9f2:	ldr	r2, [sp, #28]
    c9f4:	str	r2, [sp, #0]
    c9f6:	adds	r6, r5, #1
    c9f8:	str.w	r3, [fp, #4]
    c9fc:	mov	r1, r9
    c9fe:	strb.w	r0, [r8, r5]
    ca02:	mov	r3, r6
    ca04:	mov	r2, r8
    ca06:	mov	r0, sl
    ca08:	bl	ebdc <_mbrtowc_r>
    ca0c:	adds	r1, r0, #1
    ca0e:	beq.w	c69a <__ssvfscanf_r+0x24a>
    ca12:	cbnz	r0, ca3e <__ssvfscanf_r+0x5ee>
    ca14:	ldr	r3, [sp, #32]
    ca16:	cbnz	r3, ca5e <__ssvfscanf_r+0x60e>
    ca18:	str.w	r3, [r9]
    ca1c:	add	r7, r6
    ca1e:	subs	r4, #1
    ca20:	add.w	r9, r9, #4
    ca24:	ldr.w	r3, [fp, #4]
    ca28:	cmp	r3, #0
    ca2a:	mov.w	r5, #0
    ca2e:	ble.n	ca4c <__ssvfscanf_r+0x5fc>
    ca30:	cmp	r4, #0
    ca32:	bne.n	c9da <__ssvfscanf_r+0x58a>
    ca34:	ldr	r3, [sp, #32]
    ca36:	cmp	r3, #0
    ca38:	beq.w	c912 <__ssvfscanf_r+0x4c2>
    ca3c:	b.n	c918 <__ssvfscanf_r+0x4c8>
    ca3e:	adds	r0, #2
    ca40:	bne.n	ca64 <__ssvfscanf_r+0x614>
    ca42:	ldr.w	r3, [fp, #4]
    ca46:	cmp	r3, #0
    ca48:	mov	r5, r6
    ca4a:	bgt.n	c9da <__ssvfscanf_r+0x58a>
    ca4c:	mov	r1, fp
    ca4e:	mov	r0, sl
    ca50:	bl	fc8c <__ssrefill_r>
    ca54:	cmp	r0, #0
    ca56:	beq.n	ca30 <__ssvfscanf_r+0x5e0>
    ca58:	cmp	r5, #0
    ca5a:	beq.n	ca34 <__ssvfscanf_r+0x5e4>
    ca5c:	b.n	c69a <__ssvfscanf_r+0x24a>
    ca5e:	add	r7, r6
    ca60:	subs	r4, #1
    ca62:	b.n	ca24 <__ssvfscanf_r+0x5d4>
    ca64:	ldr	r3, [sp, #32]
    ca66:	add	r7, r6
    ca68:	subs	r4, #1
    ca6a:	cmp	r3, #0
    ca6c:	bne.n	ca24 <__ssvfscanf_r+0x5d4>
    ca6e:	b.n	ca20 <__ssvfscanf_r+0x5d0>
    ca70:	mov	r8, r5
    ca72:	mov	r5, r8
    ca74:	add	r7, r5
    ca76:	b.n	c98e <__ssvfscanf_r+0x53e>
    ca78:	cmp	r5, #0
    ca7a:	beq.w	c4ec <__ssvfscanf_r+0x9c>
    ca7e:	add	r7, r5
    ca80:	b.n	c98e <__ssvfscanf_r+0x53e>
    ca82:	cmp	r5, #0
    ca84:	bne.w	c7aa <__ssvfscanf_r+0x35a>
    ca88:	b.n	c69a <__ssvfscanf_r+0x24a>
    ca8a:	ldr	r5, [sp, #16]
    ca8c:	mov	r3, r4
    ca8e:	ldr	r1, [r5, #0]
    ca90:	str.w	fp, [sp]
    ca94:	movs	r2, #1
    ca96:	mov	r0, sl
    ca98:	bl	fcc8 <_sfread_r>
    ca9c:	adds	r6, r5, #4
    ca9e:	cmp	r0, #0
    caa0:	beq.w	c69a <__ssvfscanf_r+0x24a>
    caa4:	ldr	r3, [sp, #20]
    caa6:	str	r6, [sp, #16]
    caa8:	ldr	r6, [sp, #8]
    caaa:	adds	r3, #1
    caac:	add	r7, r0
    caae:	str	r3, [sp, #20]
    cab0:	mov	r4, r6
    cab2:	b.n	c4e0 <__ssvfscanf_r+0x90>
    cab4:	mov	r1, fp
    cab6:	mov	r0, sl
    cab8:	bl	fc8c <__ssrefill_r>
    cabc:	cmp	r0, #0
    cabe:	beq.w	c60e <__ssvfscanf_r+0x1be>
    cac2:	b.n	c69a <__ssvfscanf_r+0x24a>
    cac4:	mov.w	r9, #0
    cac8:	b.n	c9d4 <__ssvfscanf_r+0x584>
    caca:	ldrb.w	r8, [r6, #2]
    cace:	orr.w	r5, r5, #2
    cad2:	adds	r6, #2
    cad4:	b.n	c502 <__ssvfscanf_r+0xb2>
    cad6:	cmp	r3, #0
    cad8:	orr.w	r5, r5, #1
    cadc:	bgt.w	c82a <__ssvfscanf_r+0x3da>
    cae0:	b.n	c8a0 <__ssvfscanf_r+0x450>
    cae2:	lsls	r4, r5, #31
    cae4:	bmi.n	cb00 <__ssvfscanf_r+0x6b0>
    cae6:	lsls	r0, r5, #30
    cae8:	bpl.n	cb00 <__ssvfscanf_r+0x6b0>
    caea:	ldr	r2, [sp, #16]
    caec:	ldr	r6, [sp, #8]
    caee:	ldr	r3, [r2, #0]
    caf0:	mov	r0, r7
    caf2:	asrs	r1, r7, #31
    caf4:	adds	r2, #4
    caf6:	str	r2, [sp, #16]
    caf8:	strd	r0, r1, [r3]
    cafc:	mov	r4, r6
    cafe:	b.n	c4e0 <__ssvfscanf_r+0x90>
    cb00:	ldr	r2, [sp, #16]
    cb02:	ldr	r6, [sp, #8]
    cb04:	ldr	r3, [r2, #0]
    cb06:	str	r7, [r3, #0]
    cb08:	mov	r3, r2
    cb0a:	adds	r3, #4
    cb0c:	str	r3, [sp, #16]
    cb0e:	mov	r4, r6
    cb10:	b.n	c4e0 <__ssvfscanf_r+0x90>
    cb12:	mov	r1, fp
    cb14:	mov	r0, sl
    cb16:	bl	fc8c <__ssrefill_r>
    cb1a:	cmp	r0, #0
    cb1c:	bne.w	c69a <__ssvfscanf_r+0x24a>
    cb20:	ldr	r3, [pc, #504]	; (cd1c <__ssvfscanf_r+0x8cc>)
    cb22:	str	r0, [sp, #12]
    cb24:	str	r3, [sp, #24]
    cb26:	movs	r6, #3
    cb28:	b.n	c65c <__ssvfscanf_r+0x20c>
    cb2a:	mov	r1, fp
    cb2c:	mov	r0, sl
    cb2e:	bl	fc8c <__ssrefill_r>
    cb32:	cmp	r0, #0
    cb34:	beq.w	c7ca <__ssvfscanf_r+0x37a>
    cb38:	b.n	c69a <__ssvfscanf_r+0x24a>
    cb3a:	mov	r1, fp
    cb3c:	mov	r0, sl
    cb3e:	bl	fc8c <__ssrefill_r>
    cb42:	cmp	r0, #0
    cb44:	beq.w	c760 <__ssvfscanf_r+0x310>
    cb48:	b.n	c69a <__ssvfscanf_r+0x24a>
    cb4a:	mov	r1, fp
    cb4c:	mov	r0, sl
    cb4e:	bl	fc8c <__ssrefill_r>
    cb52:	cmp	r0, #0
    cb54:	beq.w	c88e <__ssvfscanf_r+0x43e>
    cb58:	b.n	c69a <__ssvfscanf_r+0x24a>
    cb5a:	mov	r1, fp
    cb5c:	mov	r0, sl
    cb5e:	bl	fc8c <__ssrefill_r>
    cb62:	cmp	r0, #0
    cb64:	beq.w	c6f2 <__ssvfscanf_r+0x2a2>
    cb68:	b.n	c69a <__ssvfscanf_r+0x24a>
    cb6a:	mov	r1, fp
    cb6c:	mov	r0, sl
    cb6e:	bl	fc8c <__ssrefill_r>
    cb72:	cmp	r0, #0
    cb74:	beq.w	c6da <__ssvfscanf_r+0x28a>
    cb78:	b.n	c69a <__ssvfscanf_r+0x24a>
    cb7a:	cmp	r6, #3
    cb7c:	beq.w	ceb0 <__ssvfscanf_r+0xa60>
    cb80:	cmp	r6, #4
    cb82:	bne.w	cff2 <__ssvfscanf_r+0xba2>
    cb86:	mov	r0, sl
    cb88:	bl	ebc0 <_localeconv_r>
    cb8c:	subs	r3, r4, #1
    cb8e:	ldr	r2, [r0, #0]
    cb90:	str	r2, [sp, #40]	; 0x28
    cb92:	cmp.w	r3, #348	; 0x15c
    cb96:	bls.w	d05a <__ssvfscanf_r+0xc0a>
    cb9a:	mvn.w	r1, #348	; 0x15c
    cb9e:	adds	r3, r4, r1
    cba0:	str	r3, [sp, #48]	; 0x30
    cba2:	movw	r4, #349	; 0x15d
    cba6:	add	r3, sp, #328	; 0x148
    cba8:	mov.w	r8, #0
    cbac:	mov	r2, r3
    cbae:	str	r3, [sp, #32]
    cbb0:	orr.w	r5, r5, #1920	; 0x780
    cbb4:	mov	r3, r8
    cbb6:	str.w	r8, [sp, #52]	; 0x34
    cbba:	str.w	r8, [sp, #44]	; 0x2c
    cbbe:	mov	r6, r8
    cbc0:	str.w	r8, [sp, #36]	; 0x24
    cbc4:	mov	r9, r2
    cbc6:	ldr.w	r0, [fp]
    cbca:	ldrb	r1, [r0, #0]
    cbcc:	sub.w	lr, r1, #43	; 0x2b
    cbd0:	cmp.w	lr, #78	; 0x4e
    cbd4:	bhi.w	ce60 <__ssvfscanf_r+0xa10>
    cbd8:	tbh	[pc, lr, lsl #1]
    cbdc:	.word	0x0142007a
    cbe0:	.word	0x0142007a
    cbe4:	.word	0x006e0142
    cbe8:	.word	0x004f004f
    cbec:	.word	0x004f004f
    cbf0:	.word	0x004f004f
    cbf4:	.word	0x004f004f
    cbf8:	.word	0x0142004f
    cbfc:	.word	0x01420142
    cc00:	.word	0x01420142
    cc04:	.word	0x01420142
    cc08:	.word	0x0142013d
    cc0c:	.word	0x01420142
    cc10:	.word	0x011e0125
    cc14:	.word	0x01420142
    cc18:	.word	0x014200a2
    cc1c:	.word	0x01420142
    cc20:	.word	0x008b0142
    cc24:	.word	0x01420142
    cc28:	.word	0x01420142
    cc2c:	.word	0x00850142
    cc30:	.word	0x01420142
    cc34:	.word	0x01420142
    cc38:	.word	0x0142007f
    cc3c:	.word	0x01420142
    cc40:	.word	0x01420142
    cc44:	.word	0x01420142
    cc48:	.word	0x0142013d
    cc4c:	.word	0x01420142
    cc50:	.word	0x011e0125
    cc54:	.word	0x01420142
    cc58:	.word	0x014200a2
    cc5c:	.word	0x01420142
    cc60:	.word	0x008b0142
    cc64:	.word	0x01420142
    cc68:	.word	0x01420142
    cc6c:	.word	0x00850142
    cc70:	.word	0x01420142
    cc74:	.word	0x01420142
    cc78:	.short	0x007f
    cc7a:	cmn.w	r3, r8
    cc7e:	bne.n	ccae <__ssvfscanf_r+0x85e>
    cc80:	bic.w	r5, r5, #384	; 0x180
    cc84:	strb.w	r1, [r9]
    cc88:	add.w	r9, r9, #1
    cc8c:	ldr.w	r1, [fp, #4]
    cc90:	subs	r1, #1
    cc92:	cmp	r1, #0
    cc94:	add.w	r4, r4, #4294967295
    cc98:	add.w	r7, r7, #1
    cc9c:	str.w	r1, [fp, #4]
    cca0:	ble.w	ce7a <__ssvfscanf_r+0xa2a>
    cca4:	adds	r0, #1
    cca6:	str.w	r0, [fp]
    ccaa:	cmp	r4, #0
    ccac:	bne.n	cbc6 <__ssvfscanf_r+0x776>
    ccae:	cmp	r6, #0
    ccb0:	beq.n	cd38 <__ssvfscanf_r+0x8e8>
    ccb2:	bic.w	r5, r5, #256	; 0x100
    ccb6:	b.n	cd38 <__ssvfscanf_r+0x8e8>
    ccb8:	lsls	r2, r5, #23
    ccba:	bpl.n	cc7a <__ssvfscanf_r+0x82a>
    ccbc:	ldr	r2, [sp, #48]	; 0x30
    ccbe:	bic.w	r5, r5, #128	; 0x80
    ccc2:	adds	r6, #1
    ccc4:	cmp	r2, #0
    ccc6:	beq.n	cc8c <__ssvfscanf_r+0x83c>
    ccc8:	subs	r2, #1
    ccca:	str	r2, [sp, #48]	; 0x30
    cccc:	adds	r4, #1
    ccce:	b.n	cc8c <__ssvfscanf_r+0x83c>
    ccd0:	lsls	r2, r5, #24
    ccd2:	bpl.n	ccae <__ssvfscanf_r+0x85e>
    ccd4:	bic.w	r5, r5, #128	; 0x80
    ccd8:	b.n	cc84 <__ssvfscanf_r+0x834>
    ccda:	cmp.w	r8, #7
    ccde:	bne.n	ccae <__ssvfscanf_r+0x85e>
    cce0:	mov.w	r8, #8
    cce4:	b.n	cc84 <__ssvfscanf_r+0x834>
    cce6:	cmp.w	r8, #6
    ccea:	bne.n	ccae <__ssvfscanf_r+0x85e>
    ccec:	mov.w	r8, #7
    ccf0:	b.n	cc84 <__ssvfscanf_r+0x834>
    ccf2:	cmp	r3, #0
    ccf4:	bne.w	cea6 <__ssvfscanf_r+0xa56>
    ccf8:	cbnz	r6, cd06 <__ssvfscanf_r+0x8b6>
    ccfa:	and.w	lr, r5, #1792	; 0x700
    ccfe:	cmp.w	lr, #1792	; 0x700
    cd02:	beq.w	d17e <__ssvfscanf_r+0xd2e>
    cd06:	cmp.w	r8, #1
    cd0a:	beq.n	cd12 <__ssvfscanf_r+0x8c2>
    cd0c:	cmp.w	r8, #4
    cd10:	bne.n	ccae <__ssvfscanf_r+0x85e>
    cd12:	add.w	r8, r8, #1
    cd16:	uxtb.w	r8, r8
    cd1a:	b.n	cc84 <__ssvfscanf_r+0x834>
    cd1c:	.word	0x0000aeb9
    cd20:	cmp.w	r8, #0
    cd24:	bne.w	ce94 <__ssvfscanf_r+0xa44>
    cd28:	cmp	r6, #0
    cd2a:	bne.n	ccb2 <__ssvfscanf_r+0x862>
    cd2c:	and.w	lr, r5, #1792	; 0x700
    cd30:	cmp.w	lr, #1792	; 0x700
    cd34:	beq.w	d19e <__ssvfscanf_r+0xd4e>
    cd38:	subs	r3, #1
    cd3a:	cmp	r3, #1
    cd3c:	bls.w	d234 <__ssvfscanf_r+0xde4>
    cd40:	add.w	r3, r8, #4294967295
    cd44:	cmp	r3, #6
    cd46:	bhi.n	cd76 <__ssvfscanf_r+0x926>
    cd48:	cmp.w	r8, #2
    cd4c:	bls.w	d284 <__ssvfscanf_r+0xe34>
    cd50:	cmp.w	r8, #3
    cd54:	beq.n	cd76 <__ssvfscanf_r+0x926>
    cd56:	sub.w	r4, r8, #4
    cd5a:	uxtb	r4, r4
    cd5c:	mvn.w	r8, r4
    cd60:	add	r8, r9
    cd62:	ldrb.w	r1, [r9, #-1]!
    cd66:	mov	r2, fp
    cd68:	mov	r0, sl
    cd6a:	bl	fc08 <_sungetc_r>
    cd6e:	cmp	r8, r9
    cd70:	bne.n	cd62 <__ssvfscanf_r+0x912>
    cd72:	subs	r7, #1
    cd74:	subs	r7, r7, r4
    cd76:	lsls	r1, r5, #23
    cd78:	bpl.n	cdb4 <__ssvfscanf_r+0x964>
    cd7a:	lsls	r2, r5, #21
    cd7c:	bmi.w	d258 <__ssvfscanf_r+0xe08>
    cd80:	ldrb.w	r1, [r9, #-1]
    cd84:	cmp	r1, #101	; 0x65
    cd86:	add.w	r4, r9, #4294967295
    cd8a:	add.w	r8, r7, #4294967295
    cd8e:	beq.n	cda8 <__ssvfscanf_r+0x958>
    cd90:	cmp	r1, #69	; 0x45
    cd92:	beq.n	cda8 <__ssvfscanf_r+0x958>
    cd94:	mov	r2, fp
    cd96:	mov	r0, sl
    cd98:	bl	fc08 <_sungetc_r>
    cd9c:	ldrb.w	r1, [r9, #-2]
    cda0:	sub.w	r8, r7, #2
    cda4:	sub.w	r4, r9, #2
    cda8:	mov	r2, fp
    cdaa:	mov	r0, sl
    cdac:	bl	fc08 <_sungetc_r>
    cdb0:	mov	r7, r8
    cdb2:	mov	r9, r4
    cdb4:	ands.w	r2, r5, #16
    cdb8:	bne.w	c918 <__ssvfscanf_r+0x4c8>
    cdbc:	and.w	r3, r5, #1536	; 0x600
    cdc0:	cmp.w	r3, #1024	; 0x400
    cdc4:	strb.w	r2, [r9]
    cdc8:	beq.w	d1a8 <__ssvfscanf_r+0xd58>
    cdcc:	ldr	r3, [sp, #44]	; 0x2c
    cdce:	cmp	r3, #0
    cdd0:	bne.w	d1ca <__ssvfscanf_r+0xd7a>
    cdd4:	ldr	r1, [sp, #32]
    cdd6:	movs	r2, #0
    cdd8:	mov	r0, sl
    cdda:	bl	ad60 <_strtod_r>
    cdde:	lsls	r3, r5, #31
    cde0:	bmi.w	d060 <__ssvfscanf_r+0xc10>
    cde4:	ands.w	r0, r5, #2
    cde8:	bne.w	d060 <__ssvfscanf_r+0xc10>
    cdec:	vcmp.f64	d0, d0
    cdf0:	ldr	r3, [sp, #16]
    cdf2:	vmrs	APSR_nzcv, fpscr
    cdf6:	add.w	r5, r3, #4
    cdfa:	ldr	r4, [r3, #0]
    cdfc:	bvs.w	d2b8 <__ssvfscanf_r+0xe68>
    ce00:	vcvt.f32.f64	s0, d0
    ce04:	str	r5, [sp, #16]
    ce06:	vstr	s0, [r4]
    ce0a:	ldr	r3, [sp, #20]
    ce0c:	ldr	r6, [sp, #8]
    ce0e:	adds	r3, #1
    ce10:	str	r3, [sp, #20]
    ce12:	mov	r4, r6
    ce14:	b.w	c4e0 <__ssvfscanf_r+0x90>
    ce18:	cmp.w	r8, #2
    ce1c:	bne.w	ccae <__ssvfscanf_r+0x85e>
    ce20:	mov.w	r8, #3
    ce24:	b.n	cc84 <__ssvfscanf_r+0x834>
    ce26:	and.w	lr, r5, #1280	; 0x500
    ce2a:	cmp.w	lr, #1024	; 0x400
    ce2e:	beq.n	ce3c <__ssvfscanf_r+0x9ec>
    ce30:	lsls	r2, r5, #21
    ce32:	bpl.w	ccae <__ssvfscanf_r+0x85e>
    ce36:	cmp	r6, #0
    ce38:	beq.w	cd38 <__ssvfscanf_r+0x8e8>
    ce3c:	lsls	r2, r5, #22
    ce3e:	bmi.n	ce4a <__ssvfscanf_r+0x9fa>
    ce40:	ldr	r2, [sp, #36]	; 0x24
    ce42:	str.w	r9, [sp, #52]	; 0x34
    ce46:	subs	r2, r6, r2
    ce48:	str	r2, [sp, #44]	; 0x2c
    ce4a:	bic.w	r5, r5, #1920	; 0x780
    ce4e:	orr.w	r5, r5, #384	; 0x180
    ce52:	movs	r6, #0
    ce54:	b.n	cc84 <__ssvfscanf_r+0x834>
    ce56:	cmp	r3, #1
    ce58:	bne.w	ccae <__ssvfscanf_r+0x85e>
    ce5c:	movs	r3, #2
    ce5e:	b.n	cc84 <__ssvfscanf_r+0x834>
    ce60:	ldr	r2, [sp, #40]	; 0x28
    ce62:	ldrb.w	lr, [r2]
    ce66:	cmp	lr, r1
    ce68:	bne.w	ccae <__ssvfscanf_r+0x85e>
    ce6c:	lsls	r2, r5, #22
    ce6e:	bpl.w	ccae <__ssvfscanf_r+0x85e>
    ce72:	bic.w	r5, r5, #640	; 0x280
    ce76:	str	r6, [sp, #36]	; 0x24
    ce78:	b.n	cc84 <__ssvfscanf_r+0x834>
    ce7a:	mov	r1, fp
    ce7c:	mov	r0, sl
    ce7e:	str	r3, [sp, #28]
    ce80:	bl	fc8c <__ssrefill_r>
    ce84:	ldr	r3, [sp, #28]
    ce86:	cmp	r0, #0
    ce88:	bne.w	ccae <__ssvfscanf_r+0x85e>
    ce8c:	cmp	r4, #0
    ce8e:	bne.w	cbc6 <__ssvfscanf_r+0x776>
    ce92:	b.n	ccae <__ssvfscanf_r+0x85e>
    ce94:	cmp.w	r8, #3
    ce98:	beq.w	cd12 <__ssvfscanf_r+0x8c2>
    ce9c:	cmp.w	r8, #5
    cea0:	beq.w	cd12 <__ssvfscanf_r+0x8c2>
    cea4:	b.n	ccae <__ssvfscanf_r+0x85e>
    cea6:	cmp	r3, #2
    cea8:	bne.w	cd06 <__ssvfscanf_r+0x8b6>
    ceac:	movs	r3, #3
    ceae:	b.n	cc84 <__ssvfscanf_r+0x834>
    ceb0:	subs	r3, r4, #1
    ceb2:	cmp.w	r3, #348	; 0x15c
    ceb6:	itte	hi
    ceb8:	mvnhi.w	r0, #348	; 0x15c
    cebc:	addhi.w	r9, r4, r0
    cec0:	movls	r9, r8
    cec2:	add	r3, sp, #328	; 0x148
    cec4:	mov	r0, r2
    cec6:	mov	r2, r7
    cec8:	mov	r7, r9
    ceca:	ldr.w	r9, [sp, #12]
    cece:	str	r3, [sp, #32]
    ced0:	it	hi
    ced2:	movwhi	r4, #349	; 0x15d
    ced6:	orr.w	r5, r5, #3456	; 0xd80
    ceda:	mov	r6, r3
    cedc:	mov.w	r8, #0
    cee0:	sub.w	r3, r1, #43	; 0x2b
    cee4:	cmp	r3, #77	; 0x4d
    cee6:	bhi.n	cf8c <__ssvfscanf_r+0xb3c>
    cee8:	tbb	[pc, r3]
    ceec:	.word	0x507e507e
    cef0:	.word	0x69696f50
    cef4:	.word	0x69696969
    cef8:	.word	0x504a4a69
    cefc:	.word	0x50505050
    cf00:	.word	0x44445050
    cf04:	.word	0x44444444
    cf08:	.word	0x50505050
    cf0c:	.word	0x50505050
    cf10:	.word	0x50505050
    cf14:	.word	0x50505050
    cf18:	.word	0x50502750
    cf1c:	.word	0x50505050
    cf20:	.word	0x44445050
    cf24:	.word	0x44444444
    cf28:	.word	0x50505050
    cf2c:	.word	0x50505050
    cf30:	.word	0x50505050
    cf34:	.word	0x50505050
    cf38:	.short	0x2750
    cf3a:	and.w	r3, r5, #1536	; 0x600
    cf3e:	cmp.w	r3, #512	; 0x200
    cf42:	bne.n	cf8c <__ssvfscanf_r+0xb3c>
    cf44:	bic.w	r5, r5, #512	; 0x200
    cf48:	orr.w	r5, r5, #1280	; 0x500
    cf4c:	mov.w	r9, #16
    cf50:	strb	r1, [r6, #0]
    cf52:	adds	r6, #1
    cf54:	ldr.w	r3, [fp, #4]
    cf58:	subs	r3, #1
    cf5a:	cmp	r3, #0
    cf5c:	str.w	r3, [fp, #4]
    cf60:	ble.n	d048 <__ssvfscanf_r+0xbf8>
    cf62:	adds	r0, #1
    cf64:	str.w	r0, [fp]
    cf68:	subs	r4, #1
    cf6a:	beq.n	cf8c <__ssvfscanf_r+0xb3c>
    cf6c:	ldr.w	r0, [fp]
    cf70:	ldrb	r1, [r0, #0]
    cf72:	b.n	cee0 <__ssvfscanf_r+0xa90>
    cf74:	cmp.w	r9, #10
    cf78:	ble.n	cf8c <__ssvfscanf_r+0xb3c>
    cf7a:	bic.w	r5, r5, #2944	; 0xb80
    cf7e:	b.n	cf50 <__ssvfscanf_r+0xb00>
    cf80:	ldr	r3, [pc, #756]	; (d278 <__ssvfscanf_r+0xe28>)
    cf82:	ldrsh.w	r9, [r3, r9, lsl #1]
    cf86:	cmp.w	r9, #8
    cf8a:	bgt.n	cf7a <__ssvfscanf_r+0xb2a>
    cf8c:	lsls	r1, r5, #23
    cf8e:	mov	r7, r2
    cf90:	str.w	r9, [sp, #12]
    cf94:	bpl.n	cfa6 <__ssvfscanf_r+0xb56>
    cf96:	ldr	r3, [sp, #32]
    cf98:	cmp	r6, r3
    cf9a:	bhi.w	d186 <__ssvfscanf_r+0xd36>
    cf9e:	ldr	r3, [sp, #32]
    cfa0:	cmp	r6, r3
    cfa2:	beq.w	c4ec <__ssvfscanf_r+0x9c>
    cfa6:	ands.w	r4, r5, #16
    cfaa:	beq.w	d0d2 <__ssvfscanf_r+0xc82>
    cfae:	ldr	r3, [sp, #32]
    cfb0:	subs	r6, r6, r3
    cfb2:	add	r6, r8
    cfb4:	add	r7, r6
    cfb6:	ldr	r6, [sp, #8]
    cfb8:	mov	r4, r6
    cfba:	b.w	c4e0 <__ssvfscanf_r+0x90>
    cfbe:	ldr	r3, [pc, #696]	; (d278 <__ssvfscanf_r+0xe28>)
    cfc0:	bic.w	r5, r5, #2944	; 0xb80
    cfc4:	ldrsh.w	r9, [r3, r9, lsl #1]
    cfc8:	b.n	cf50 <__ssvfscanf_r+0xb00>
    cfca:	lsls	r3, r5, #20
    cfcc:	bpl.n	cf50 <__ssvfscanf_r+0xb00>
    cfce:	cmp.w	r9, #0
    cfd2:	bne.n	cfdc <__ssvfscanf_r+0xb8c>
    cfd4:	orr.w	r5, r5, #512	; 0x200
    cfd8:	mov.w	r9, #8
    cfdc:	lsls	r3, r5, #21
    cfde:	bpl.w	d162 <__ssvfscanf_r+0xd12>
    cfe2:	bic.w	r5, r5, #1408	; 0x580
    cfe6:	b.n	cf50 <__ssvfscanf_r+0xb00>
    cfe8:	lsls	r3, r5, #24
    cfea:	bpl.n	cf8c <__ssvfscanf_r+0xb3c>
    cfec:	bic.w	r5, r5, #128	; 0x80
    cff0:	b.n	cf50 <__ssvfscanf_r+0xb00>
    cff2:	cmp	r4, #0
    cff4:	it	eq
    cff6:	moveq.w	r4, #4294967295
    cffa:	ands.w	r3, r5, #1
    cffe:	bne.w	c8cc <__ssvfscanf_r+0x47c>
    d002:	lsls	r1, r5, #27
    d004:	bpl.n	d06e <__ssvfscanf_r+0xc1e>
    d006:	mov	r5, r3
    d008:	bl	8f84 <__locale_ctype_ptr>
    d00c:	ldr.w	r3, [fp]
    d010:	ldrb	r2, [r3, #0]
    d012:	add	r0, r2
    d014:	adds	r3, #1
    d016:	ldrb	r2, [r0, #1]
    d018:	lsls	r2, r2, #28
    d01a:	bmi.w	c7aa <__ssvfscanf_r+0x35a>
    d01e:	ldr.w	r2, [fp, #4]
    d022:	str.w	r3, [fp]
    d026:	adds	r5, #1
    d028:	subs	r3, r2, #1
    d02a:	cmp	r4, r5
    d02c:	str.w	r3, [fp, #4]
    d030:	beq.w	c7aa <__ssvfscanf_r+0x35a>
    d034:	cmp	r3, #0
    d036:	bgt.n	d008 <__ssvfscanf_r+0xbb8>
    d038:	mov	r1, fp
    d03a:	mov	r0, sl
    d03c:	bl	fc8c <__ssrefill_r>
    d040:	cmp	r0, #0
    d042:	beq.n	d008 <__ssvfscanf_r+0xbb8>
    d044:	b.w	c7aa <__ssvfscanf_r+0x35a>
    d048:	mov	r1, fp
    d04a:	mov	r0, sl
    d04c:	str	r2, [sp, #12]
    d04e:	bl	fc8c <__ssrefill_r>
    d052:	ldr	r2, [sp, #12]
    d054:	cmp	r0, #0
    d056:	beq.n	cf68 <__ssvfscanf_r+0xb18>
    d058:	b.n	cf8c <__ssvfscanf_r+0xb3c>
    d05a:	str.w	r8, [sp, #48]	; 0x30
    d05e:	b.n	cba6 <__ssvfscanf_r+0x756>
    d060:	ldr	r2, [sp, #16]
    d062:	ldr	r3, [r2, #0]
    d064:	adds	r2, #4
    d066:	str	r2, [sp, #16]
    d068:	vstr	d0, [r3]
    d06c:	b.n	ce0a <__ssvfscanf_r+0x9ba>
    d06e:	ldr	r2, [sp, #16]
    d070:	ldr	r5, [r2, #0]
    d072:	adds	r6, r2, #4
    d074:	add	r4, r5
    d076:	mov	r8, r5
    d078:	bl	8f84 <__locale_ctype_ptr>
    d07c:	ldr.w	r2, [fp]
    d080:	ldrb	r3, [r2, #0]
    d082:	add	r0, r3
    d084:	adds	r1, r2, #1
    d086:	ldrb	r3, [r0, #1]
    d088:	lsls	r3, r3, #28
    d08a:	bmi.n	d0b8 <__ssvfscanf_r+0xc68>
    d08c:	ldr.w	r3, [fp, #4]
    d090:	str.w	r1, [fp]
    d094:	subs	r3, #1
    d096:	str.w	r3, [fp, #4]
    d09a:	ldrb	r3, [r2, #0]
    d09c:	strb.w	r3, [r8], #1
    d0a0:	cmp	r4, r8
    d0a2:	beq.n	d0ba <__ssvfscanf_r+0xc6a>
    d0a4:	ldr.w	r3, [fp, #4]
    d0a8:	cmp	r3, #0
    d0aa:	bgt.n	d078 <__ssvfscanf_r+0xc28>
    d0ac:	mov	r1, fp
    d0ae:	mov	r0, sl
    d0b0:	bl	fc8c <__ssrefill_r>
    d0b4:	cmp	r0, #0
    d0b6:	beq.n	d078 <__ssvfscanf_r+0xc28>
    d0b8:	mov	r4, r8
    d0ba:	ldr	r2, [sp, #20]
    d0bc:	str	r6, [sp, #16]
    d0be:	ldr	r6, [sp, #8]
    d0c0:	subs	r5, r4, r5
    d0c2:	movs	r3, #0
    d0c4:	adds	r2, #1
    d0c6:	strb	r3, [r4, #0]
    d0c8:	add	r7, r5
    d0ca:	str	r2, [sp, #20]
    d0cc:	mov	r4, r6
    d0ce:	b.w	c4e0 <__ssvfscanf_r+0x90>
    d0d2:	mov	r2, r4
    d0d4:	strb	r4, [r6, #0]
    d0d6:	ldr	r3, [sp, #12]
    d0d8:	ldr	r1, [sp, #32]
    d0da:	ldr	r4, [sp, #24]
    d0dc:	mov	r0, sl
    d0de:	blx	r4
    d0e0:	lsls	r2, r5, #26
    d0e2:	bmi.n	d172 <__ssvfscanf_r+0xd22>
    d0e4:	lsls	r3, r5, #29
    d0e6:	bpl.n	d1e0 <__ssvfscanf_r+0xd90>
    d0e8:	ldr	r2, [sp, #16]
    d0ea:	ldr	r3, [r2, #0]
    d0ec:	adds	r2, #4
    d0ee:	str	r2, [sp, #16]
    d0f0:	strh	r0, [r3, #0]
    d0f2:	ldr	r3, [sp, #20]
    d0f4:	adds	r3, #1
    d0f6:	str	r3, [sp, #20]
    d0f8:	b.n	cfae <__ssvfscanf_r+0xb5e>
    d0fa:	bl	8f60 <__locale_mb_cur_max>
    d0fe:	cmp	r6, r0
    d100:	beq.w	c69a <__ssvfscanf_r+0x24a>
    d104:	ldmia.w	fp, {r2, r3}
    d108:	ldrb.w	r0, [r2], #1
    d10c:	str.w	r2, [fp]
    d110:	ldr	r2, [sp, #28]
    d112:	str	r2, [sp, #0]
    d114:	add	r2, sp, #328	; 0x148
    d116:	adds	r5, r6, #1
    d118:	subs	r3, #1
    d11a:	strb	r0, [r2, r6]
    d11c:	str.w	r3, [fp, #4]
    d120:	mov	r1, r8
    d122:	mov	r3, r5
    d124:	mov	r0, sl
    d126:	bl	ebdc <_mbrtowc_r>
    d12a:	adds	r6, r0, #1
    d12c:	beq.w	c69a <__ssvfscanf_r+0x24a>
    d130:	cmp	r0, #0
    d132:	bne.n	d20c <__ssvfscanf_r+0xdbc>
    d134:	str.w	r0, [r8]
    d138:	bl	eba0 <iswspace>
    d13c:	cmp	r0, #0
    d13e:	beq.w	d2a2 <__ssvfscanf_r+0xe52>
    d142:	cmp	r5, #0
    d144:	beq.w	c908 <__ssvfscanf_r+0x4b8>
    d148:	add	r3, sp, #328	; 0x148
    d14a:	adds	r4, r3, r5
    d14c:	subs	r5, #1
    d14e:	mov	r2, fp
    d150:	ldrb.w	r1, [r4, #-1]!
    d154:	mov	r0, sl
    d156:	bl	fc08 <_sungetc_r>
    d15a:	cmp	r5, #0
    d15c:	bne.n	d14c <__ssvfscanf_r+0xcfc>
    d15e:	b.w	c908 <__ssvfscanf_r+0x4b8>
    d162:	bic.w	r5, r5, #896	; 0x380
    d166:	cbz	r7, d16c <__ssvfscanf_r+0xd1c>
    d168:	subs	r7, #1
    d16a:	adds	r4, #1
    d16c:	add.w	r8, r8, #1
    d170:	b.n	cf54 <__ssvfscanf_r+0xb04>
    d172:	ldr	r2, [sp, #16]
    d174:	ldr	r3, [r2, #0]
    d176:	adds	r2, #4
    d178:	str	r2, [sp, #16]
    d17a:	str	r0, [r3, #0]
    d17c:	b.n	d0f2 <__ssvfscanf_r+0xca2>
    d17e:	bic.w	r5, r5, #1920	; 0x780
    d182:	movs	r3, #1
    d184:	b.n	cc84 <__ssvfscanf_r+0x834>
    d186:	ldrb.w	r1, [r6, #-1]
    d18a:	mov	r2, fp
    d18c:	mov	r0, sl
    d18e:	bl	fc08 <_sungetc_r>
    d192:	subs	r6, #1
    d194:	b.n	cf9e <__ssvfscanf_r+0xb4e>
    d196:	add.w	r8, sp, #60	; 0x3c
    d19a:	b.w	c8ee <__ssvfscanf_r+0x49e>
    d19e:	bic.w	r5, r5, #1920	; 0x780
    d1a2:	mov.w	r8, #1
    d1a6:	b.n	cc84 <__ssvfscanf_r+0x834>
    d1a8:	ldr	r3, [sp, #36]	; 0x24
    d1aa:	subs	r6, r6, r3
    d1ac:	negs	r2, r6
    d1ae:	cmp	r6, #0
    d1b0:	beq.w	cdd4 <__ssvfscanf_r+0x984>
    d1b4:	addw	r3, sp, #667	; 0x29b
    d1b8:	cmp	r9, r3
    d1ba:	it	cs
    d1bc:	addwcs	r9, sp, #666	; 0x29a
    d1c0:	mov	r0, r9
    d1c2:	ldr	r1, [pc, #184]	; (d27c <__ssvfscanf_r+0xe2c>)
    d1c4:	bl	9bd4 <sprintf>
    d1c8:	b.n	cdd4 <__ssvfscanf_r+0x984>
    d1ca:	ldr	r4, [sp, #52]	; 0x34
    d1cc:	mov	r1, r4
    d1ce:	movs	r3, #10
    d1d0:	adds	r1, #1
    d1d2:	mov	r0, sl
    d1d4:	bl	aeb8 <_strtol_r>
    d1d8:	ldr	r3, [sp, #44]	; 0x2c
    d1da:	mov	r9, r4
    d1dc:	subs	r2, r0, r3
    d1de:	b.n	d1b4 <__ssvfscanf_r+0xd64>
    d1e0:	ands.w	r2, r5, #1
    d1e4:	bne.n	d172 <__ssvfscanf_r+0xd22>
    d1e6:	lsls	r4, r5, #30
    d1e8:	bpl.n	d172 <__ssvfscanf_r+0xd22>
    d1ea:	ldr	r3, [sp, #24]
    d1ec:	mov	r1, r3
    d1ee:	ldr	r3, [pc, #144]	; (d280 <__ssvfscanf_r+0xe30>)
    d1f0:	cmp	r1, r3
    d1f2:	mov	r0, sl
    d1f4:	ldr	r3, [sp, #12]
    d1f6:	ldr	r1, [sp, #32]
    d1f8:	beq.n	d2c4 <__ssvfscanf_r+0xe74>
    d1fa:	bl	f748 <_strtoll_r>
    d1fe:	ldr	r2, [sp, #16]
    d200:	ldr	r3, [r2, #0]
    d202:	adds	r2, #4
    d204:	str	r2, [sp, #16]
    d206:	strd	r0, r1, [r3]
    d20a:	b.n	d0f2 <__ssvfscanf_r+0xca2>
    d20c:	adds	r0, #2
    d20e:	bne.n	d252 <__ssvfscanf_r+0xe02>
    d210:	mov	r6, r5
    d212:	ldr.w	r3, [fp, #4]
    d216:	cmp	r3, #0
    d218:	bgt.w	c8f0 <__ssvfscanf_r+0x4a0>
    d21c:	mov	r1, fp
    d21e:	mov	r0, sl
    d220:	bl	fc8c <__ssrefill_r>
    d224:	cmp	r0, #0
    d226:	beq.w	c8f0 <__ssvfscanf_r+0x4a0>
    d22a:	cmp	r6, #0
    d22c:	bne.w	c69a <__ssvfscanf_r+0x24a>
    d230:	b.w	c908 <__ssvfscanf_r+0x4b8>
    d234:	ldr	r3, [sp, #32]
    d236:	cmp	r9, r3
    d238:	bls.w	c4ec <__ssvfscanf_r+0x9c>
    d23c:	ldrb.w	r1, [r9, #-1]!
    d240:	mov	r2, fp
    d242:	mov	r0, sl
    d244:	bl	fc08 <_sungetc_r>
    d248:	ldr	r3, [sp, #32]
    d24a:	cmp	r9, r3
    d24c:	bne.n	d23c <__ssvfscanf_r+0xdec>
    d24e:	b.w	c4ec <__ssvfscanf_r+0x9c>
    d252:	ldr.w	r0, [r8]
    d256:	b.n	d138 <__ssvfscanf_r+0xce8>
    d258:	ldr	r3, [sp, #32]
    d25a:	cmp	r9, r3
    d25c:	bls.w	c4ec <__ssvfscanf_r+0x9c>
    d260:	ldrb.w	r1, [r9, #-1]!
    d264:	mov	r2, fp
    d266:	mov	r0, sl
    d268:	bl	fc08 <_sungetc_r>
    d26c:	ldr	r3, [sp, #32]
    d26e:	cmp	r9, r3
    d270:	bne.n	d260 <__ssvfscanf_r+0xe10>
    d272:	b.w	c4ec <__ssvfscanf_r+0x9c>
    d276:	nop
    d278:	.word	0x20000724
    d27c:	.word	0x200016e0
    d280:	.word	0x0000f8d5
    d284:	ldr	r3, [sp, #32]
    d286:	cmp	r9, r3
    d288:	bls.w	c4ec <__ssvfscanf_r+0x9c>
    d28c:	ldrb.w	r1, [r9, #-1]!
    d290:	mov	r2, fp
    d292:	mov	r0, sl
    d294:	bl	fc08 <_sungetc_r>
    d298:	ldr	r3, [sp, #32]
    d29a:	cmp	r9, r3
    d29c:	bne.n	d28c <__ssvfscanf_r+0xe3c>
    d29e:	b.w	c4ec <__ssvfscanf_r+0x9c>
    d2a2:	add	r7, r5
    d2a4:	subs	r4, #1
    d2a6:	cmp.w	r9, #0
    d2aa:	bne.n	d2b4 <__ssvfscanf_r+0xe64>
    d2ac:	add.w	r8, r8, #4
    d2b0:	mov	r6, r9
    d2b2:	b.n	d212 <__ssvfscanf_r+0xdc2>
    d2b4:	mov	r6, r0
    d2b6:	b.n	d212 <__ssvfscanf_r+0xdc2>
    d2b8:	bl	f590 <nanf>
    d2bc:	str	r5, [sp, #16]
    d2be:	vstr	s0, [r4]
    d2c2:	b.n	ce0a <__ssvfscanf_r+0x9ba>
    d2c4:	bl	fae4 <_strtoull_r>
    d2c8:	b.n	d1fe <__ssvfscanf_r+0xdae>
    d2ca:	nop

0000d2cc <_vdprintf_r>:
    d2cc:	push	{r4, r5, r6, r7, lr}
    d2ce:	sub.w	sp, sp, #532	; 0x214
    d2d2:	add	r5, sp, #16
    d2d4:	str	r3, [sp, #0]
    d2d6:	mov	r7, r1
    d2d8:	mov	r3, r2
    d2da:	mov.w	r4, #512	; 0x200
    d2de:	add	r2, sp, #12
    d2e0:	mov	r1, r5
    d2e2:	str	r4, [sp, #12]
    d2e4:	mov	r6, r0
    d2e6:	bl	fdc4 <_vasnprintf_r>
    d2ea:	cbz	r0, d310 <_vdprintf_r+0x44>
    d2ec:	mov	r4, r0
    d2ee:	mov	r2, r0
    d2f0:	mov	r1, r7
    d2f2:	ldr	r3, [sp, #12]
    d2f4:	mov	r0, r6
    d2f6:	bl	d34c <_write_r>
    d2fa:	cmp	r4, r5
    d2fc:	str	r0, [sp, #12]
    d2fe:	beq.n	d30a <_vdprintf_r+0x3e>
    d300:	mov	r0, r6
    d302:	mov	r1, r4
    d304:	bl	e268 <_free_r>
    d308:	ldr	r0, [sp, #12]
    d30a:	add.w	sp, sp, #532	; 0x214
    d30e:	pop	{r4, r5, r6, r7, pc}
    d310:	mov.w	r0, #4294967295
    d314:	b.n	d30a <_vdprintf_r+0x3e>
    d316:	nop

0000d318 <vdprintf>:
    d318:	push	{r4}
    d31a:	ldr	r4, [pc, #16]	; (d32c <vdprintf+0x14>)
    d31c:	mov	r3, r2
    d31e:	mov	r2, r1
    d320:	mov	r1, r0
    d322:	ldr	r0, [r4, #0]
    d324:	ldr.w	r4, [sp], #4
    d328:	b.w	d2cc <_vdprintf_r>
    d32c:	.word	0x2000215c

0000d330 <__ascii_wctomb>:
    d330:	cbz	r1, d33c <__ascii_wctomb+0xc>
    d332:	cmp	r2, #255	; 0xff
    d334:	bhi.n	d340 <__ascii_wctomb+0x10>
    d336:	strb	r2, [r1, #0]
    d338:	movs	r0, #1
    d33a:	bx	lr
    d33c:	mov	r0, r1
    d33e:	bx	lr
    d340:	movs	r3, #138	; 0x8a
    d342:	str	r3, [r0, #0]
    d344:	mov.w	r0, #4294967295
    d348:	bx	lr
    d34a:	nop

0000d34c <_write_r>:
    d34c:	push	{r4, r5, r6, lr}
    d34e:	mov	r5, r1
    d350:	ldr	r4, [pc, #32]	; (d374 <_write_r+0x28>)
    d352:	mov	r1, r2
    d354:	mov	r6, r0
    d356:	mov	r2, r3
    d358:	mov	r0, r5
    d35a:	movs	r3, #0
    d35c:	str	r3, [r4, #0]
    d35e:	bl	8920 <_write>
    d362:	adds	r3, r0, #1
    d364:	beq.n	d368 <_write_r+0x1c>
    d366:	pop	{r4, r5, r6, pc}
    d368:	ldr	r3, [r4, #0]
    d36a:	cmp	r3, #0
    d36c:	beq.n	d366 <_write_r+0x1a>
    d36e:	str	r3, [r6, #0]
    d370:	pop	{r4, r5, r6, pc}
    d372:	nop
    d374:	.word	0x20017d20

0000d378 <__register_exitproc>:
    d378:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d37c:	ldr	r4, [pc, #148]	; (d414 <__register_exitproc+0x9c>)
    d37e:	ldr	r5, [r4, #0]
    d380:	ldr.w	r4, [r5, #328]	; 0x148
    d384:	mov	r6, r0
    d386:	mov	r8, r1
    d388:	mov	sl, r2
    d38a:	mov	r9, r3
    d38c:	cbz	r4, d400 <__register_exitproc+0x88>
    d38e:	ldr	r0, [r4, #4]
    d390:	cmp	r0, #31
    d392:	bgt.n	d3c4 <__register_exitproc+0x4c>
    d394:	adds	r3, r0, #1
    d396:	cbz	r6, d3b6 <__register_exitproc+0x3e>
    d398:	add.w	r5, r4, r0, lsl #2
    d39c:	movs	r2, #1
    d39e:	str.w	sl, [r5, #136]	; 0x88
    d3a2:	ldr.w	r1, [r4, #392]	; 0x188
    d3a6:	lsls	r2, r0
    d3a8:	orrs	r1, r2
    d3aa:	cmp	r6, #2
    d3ac:	str.w	r1, [r4, #392]	; 0x188
    d3b0:	str.w	r9, [r5, #264]	; 0x108
    d3b4:	beq.n	d3f4 <__register_exitproc+0x7c>
    d3b6:	adds	r0, #2
    d3b8:	str	r3, [r4, #4]
    d3ba:	str.w	r8, [r4, r0, lsl #2]
    d3be:	movs	r0, #0
    d3c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d3c4:	ldr	r3, [pc, #80]	; (d418 <__register_exitproc+0xa0>)
    d3c6:	cbz	r3, d40a <__register_exitproc+0x92>
    d3c8:	mov.w	r0, #400	; 0x190
    d3cc:	bl	8f98 <malloc>
    d3d0:	mov	r4, r0
    d3d2:	cbz	r0, d40a <__register_exitproc+0x92>
    d3d4:	ldr.w	r3, [r5, #328]	; 0x148
    d3d8:	movs	r7, #0
    d3da:	stmia.w	r0, {r3, r7}
    d3de:	str.w	r4, [r5, #328]	; 0x148
    d3e2:	mov	r0, r7
    d3e4:	movs	r3, #1
    d3e6:	str.w	r7, [r4, #392]	; 0x188
    d3ea:	str.w	r7, [r4, #396]	; 0x18c
    d3ee:	cmp	r6, #0
    d3f0:	beq.n	d3b6 <__register_exitproc+0x3e>
    d3f2:	b.n	d398 <__register_exitproc+0x20>
    d3f4:	ldr.w	r1, [r4, #396]	; 0x18c
    d3f8:	orrs	r2, r1
    d3fa:	str.w	r2, [r4, #396]	; 0x18c
    d3fe:	b.n	d3b6 <__register_exitproc+0x3e>
    d400:	add.w	r4, r5, #332	; 0x14c
    d404:	str.w	r4, [r5, #328]	; 0x148
    d408:	b.n	d38e <__register_exitproc+0x16>
    d40a:	mov.w	r0, #4294967295
    d40e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d412:	nop
    d414:	.word	0x20000720
    d418:	.word	0x00008f99

0000d41c <quorem>:
    d41c:	ldr	r2, [r0, #16]
    d41e:	ldr	r3, [r1, #16]
    d420:	cmp	r3, r2
    d422:	bgt.w	d540 <quorem+0x124>
    d426:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d42a:	add.w	r8, r3, #4294967295
    d42e:	add.w	r7, r1, #20
    d432:	add.w	fp, r0, #20
    d436:	ldr.w	r2, [r7, r8, lsl #2]
    d43a:	ldr.w	r3, [fp, r8, lsl #2]
    d43e:	mov.w	r4, r8, lsl #2
    d442:	sub	sp, #12
    d444:	adds	r2, #1
    d446:	udiv	r9, r3, r2
    d44a:	add.w	r3, fp, r4
    d44e:	str	r4, [sp, #0]
    d450:	add.w	sl, r7, r4
    d454:	str	r3, [sp, #4]
    d456:	cmp.w	r9, #0
    d45a:	beq.n	d4d0 <quorem+0xb4>
    d45c:	movs	r5, #0
    d45e:	mov	ip, r7
    d460:	mov	lr, fp
    d462:	mov	r3, r5
    d464:	ldr.w	r6, [ip], #4
    d468:	ldr.w	r2, [lr]
    d46c:	uxth	r4, r6
    d46e:	mla	r5, r9, r4, r5
    d472:	lsrs	r6, r6, #16
    d474:	lsrs	r4, r5, #16
    d476:	mla	r4, r9, r6, r4
    d47a:	uxth	r5, r5
    d47c:	subs	r3, r3, r5
    d47e:	uxth	r6, r4
    d480:	uxtah	r3, r3, r2
    d484:	rsb	r6, r6, r2, lsr #16
    d488:	add.w	r6, r6, r3, asr #16
    d48c:	uxth	r3, r3
    d48e:	orr.w	r3, r3, r6, lsl #16
    d492:	cmp	sl, ip
    d494:	str.w	r3, [lr], #4
    d498:	mov.w	r5, r4, lsr #16
    d49c:	mov.w	r3, r6, asr #16
    d4a0:	bcs.n	d464 <quorem+0x48>
    d4a2:	ldr	r3, [sp, #0]
    d4a4:	ldr.w	r3, [fp, r3]
    d4a8:	cbnz	r3, d4d0 <quorem+0xb4>
    d4aa:	ldr	r4, [sp, #4]
    d4ac:	subs	r3, r4, #4
    d4ae:	cmp	fp, r3
    d4b0:	bcs.n	d4cc <quorem+0xb0>
    d4b2:	ldr.w	r3, [r4, #-4]
    d4b6:	cbnz	r3, d4cc <quorem+0xb0>
    d4b8:	sub.w	r3, r4, #8
    d4bc:	b.n	d4c4 <quorem+0xa8>
    d4be:	ldr	r2, [r3, #0]
    d4c0:	subs	r3, #4
    d4c2:	cbnz	r2, d4cc <quorem+0xb0>
    d4c4:	cmp	fp, r3
    d4c6:	add.w	r8, r8, #4294967295
    d4ca:	bcc.n	d4be <quorem+0xa2>
    d4cc:	str.w	r8, [r0, #16]
    d4d0:	mov	r4, r0
    d4d2:	bl	f0e0 <__mcmp>
    d4d6:	cmp	r0, #0
    d4d8:	blt.n	d538 <quorem+0x11c>
    d4da:	add.w	r9, r9, #1
    d4de:	mov	r5, fp
    d4e0:	movs	r3, #0
    d4e2:	ldr.w	r1, [r7], #4
    d4e6:	ldr	r0, [r5, #0]
    d4e8:	uxth	r2, r1
    d4ea:	subs	r2, r3, r2
    d4ec:	lsrs	r1, r1, #16
    d4ee:	uxtah	r2, r2, r0
    d4f2:	rsb	r3, r1, r0, lsr #16
    d4f6:	add.w	r3, r3, r2, asr #16
    d4fa:	uxth	r1, r2
    d4fc:	orr.w	r1, r1, r3, lsl #16
    d500:	cmp	sl, r7
    d502:	str.w	r1, [r5], #4
    d506:	mov.w	r3, r3, asr #16
    d50a:	bcs.n	d4e2 <quorem+0xc6>
    d50c:	ldr.w	r2, [fp, r8, lsl #2]
    d510:	add.w	r3, fp, r8, lsl #2
    d514:	cbnz	r2, d538 <quorem+0x11c>
    d516:	subs	r2, r3, #4
    d518:	cmp	fp, r2
    d51a:	bcs.n	d534 <quorem+0x118>
    d51c:	ldr.w	r2, [r3, #-4]
    d520:	cbnz	r2, d534 <quorem+0x118>
    d522:	subs	r3, #8
    d524:	b.n	d52c <quorem+0x110>
    d526:	ldr	r2, [r3, #0]
    d528:	subs	r3, #4
    d52a:	cbnz	r2, d534 <quorem+0x118>
    d52c:	cmp	fp, r3
    d52e:	add.w	r8, r8, #4294967295
    d532:	bcc.n	d526 <quorem+0x10a>
    d534:	str.w	r8, [r4, #16]
    d538:	mov	r0, r9
    d53a:	add	sp, #12
    d53c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d540:	movs	r0, #0
    d542:	bx	lr
    d544:	movs	r0, r0
	...

0000d548 <_dtoa_r>:
    d548:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d54c:	vmov	r6, r7, d0
    d550:	sub	sp, #76	; 0x4c
    d552:	ldr	r5, [r0, #64]	; 0x40
    d554:	str	r1, [sp, #4]
    d556:	mov	r4, r0
    d558:	mov	r8, r2
    d55a:	str	r3, [sp, #16]
    d55c:	vmov	sl, s0
    d560:	mov	fp, r7
    d562:	cbz	r5, d578 <_dtoa_r+0x30>
    d564:	ldr	r2, [r0, #68]	; 0x44
    d566:	str	r2, [r5, #4]
    d568:	movs	r3, #1
    d56a:	lsls	r3, r2
    d56c:	str	r3, [r5, #8]
    d56e:	mov	r1, r5
    d570:	bl	ec84 <_Bfree>
    d574:	movs	r3, #0
    d576:	str	r3, [r4, #64]	; 0x40
    d578:	cmp.w	fp, #0
    d57c:	mov	r6, fp
    d57e:	blt.n	d5ea <_dtoa_r+0xa2>
    d580:	ldr	r2, [sp, #112]	; 0x70
    d582:	movs	r3, #0
    d584:	str	r3, [r2, #0]
    d586:	ldr	r3, [pc, #784]	; (d898 <_dtoa_r+0x350>)
    d588:	mov	r2, r3
    d58a:	ands	r3, r6
    d58c:	cmp	r3, r2
    d58e:	beq.n	d5bc <_dtoa_r+0x74>
    d590:	vmov	d7, sl, fp
    d594:	vcmp.f64	d7, #0.0
    d598:	vmrs	APSR_nzcv, fpscr
    d59c:	strd	sl, fp, [sp, #8]
    d5a0:	bne.n	d5f8 <_dtoa_r+0xb0>
    d5a2:	ldr	r2, [sp, #16]
    d5a4:	movs	r3, #1
    d5a6:	str	r3, [r2, #0]
    d5a8:	ldr	r3, [sp, #116]	; 0x74
    d5aa:	cmp	r3, #0
    d5ac:	beq.w	d71e <_dtoa_r+0x1d6>
    d5b0:	ldr	r0, [pc, #744]	; (d89c <_dtoa_r+0x354>)
    d5b2:	str	r0, [r3, #0]
    d5b4:	subs	r0, #1
    d5b6:	add	sp, #76	; 0x4c
    d5b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d5bc:	ldr	r2, [sp, #16]
    d5be:	movw	r3, #9999	; 0x270f
    d5c2:	str	r3, [r2, #0]
    d5c4:	cmp.w	sl, #0
    d5c8:	beq.w	d6f0 <_dtoa_r+0x1a8>
    d5cc:	ldr	r0, [pc, #720]	; (d8a0 <_dtoa_r+0x358>)
    d5ce:	ldr	r3, [sp, #116]	; 0x74
    d5d0:	cmp	r3, #0
    d5d2:	beq.n	d5b6 <_dtoa_r+0x6e>
    d5d4:	ldrb	r3, [r0, #3]
    d5d6:	cmp	r3, #0
    d5d8:	beq.w	d722 <_dtoa_r+0x1da>
    d5dc:	add.w	r3, r0, #8
    d5e0:	ldr	r2, [sp, #116]	; 0x74
    d5e2:	str	r3, [r2, #0]
    d5e4:	add	sp, #76	; 0x4c
    d5e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d5ea:	ldr	r2, [sp, #112]	; 0x70
    d5ec:	movs	r3, #1
    d5ee:	bic.w	r6, fp, #2147483648	; 0x80000000
    d5f2:	str	r3, [r2, #0]
    d5f4:	mov	fp, r6
    d5f6:	b.n	d586 <_dtoa_r+0x3e>
    d5f8:	add	r1, sp, #68	; 0x44
    d5fa:	add	r2, sp, #64	; 0x40
    d5fc:	vldr	d0, [sp, #8]
    d600:	mov	r0, r4
    d602:	bl	f35c <__d2b>
    d606:	lsrs	r1, r6, #20
    d608:	str	r0, [sp, #28]
    d60a:	bne.n	d702 <_dtoa_r+0x1ba>
    d60c:	ldr	r0, [sp, #64]	; 0x40
    d60e:	ldr	r1, [sp, #68]	; 0x44
    d610:	add	r1, r0
    d612:	addw	r3, r1, #1074	; 0x432
    d616:	cmp	r3, #32
    d618:	ble.w	da9e <_dtoa_r+0x556>
    d61c:	rsb	r3, r3, #64	; 0x40
    d620:	addw	r2, r1, #1042	; 0x412
    d624:	lsls	r6, r3
    d626:	lsr.w	r3, sl, r2
    d62a:	orrs	r3, r6
    d62c:	vmov	s15, r3
    d630:	vcvt.f64.u32	d7, s15
    d634:	movs	r5, #1
    d636:	vmov	r2, r3, d7
    d63a:	subs	r1, #1
    d63c:	sub.w	r3, r3, #32505856	; 0x1f00000
    d640:	str	r5, [sp, #40]	; 0x28
    d642:	vmov	d7, r2, r3
    d646:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    d64a:	vldr	d4, [pc, #564]	; d880 <_dtoa_r+0x338>
    d64e:	vsub.f64	d6, d7, d6
    d652:	vldr	d7, [pc, #564]	; d888 <_dtoa_r+0x340>
    d656:	vldr	d5, [pc, #568]	; d890 <_dtoa_r+0x348>
    d65a:	vfma.f64	d7, d6, d4
    d65e:	vmov	s13, r1
    d662:	vcvt.f64.s32	d6, s13
    d666:	vfma.f64	d7, d6, d5
    d66a:	vcvt.s32.f64	s13, d7
    d66e:	vcmpe.f64	d7, #0.0
    d672:	vmrs	APSR_nzcv, fpscr
    d676:	vstr	s13, [sp, #8]
    d67a:	bmi.w	d8b6 <_dtoa_r+0x36e>
    d67e:	ldr	r5, [sp, #8]
    d680:	cmp	r5, #22
    d682:	bhi.w	d8b0 <_dtoa_r+0x368>
    d686:	ldr	r3, [pc, #540]	; (d8a4 <_dtoa_r+0x35c>)
    d688:	add.w	r3, r3, r5, lsl #3
    d68c:	vldr	d7, [r3]
    d690:	vmov	d6, sl, fp
    d694:	vcmpe.f64	d7, d6
    d698:	vmrs	APSR_nzcv, fpscr
    d69c:	ble.w	daac <_dtoa_r+0x564>
    d6a0:	subs	r3, r5, #1
    d6a2:	str	r3, [sp, #8]
    d6a4:	movs	r3, #0
    d6a6:	str	r3, [sp, #48]	; 0x30
    d6a8:	subs	r1, r0, r1
    d6aa:	subs.w	r9, r1, #1
    d6ae:	bmi.w	d8e0 <_dtoa_r+0x398>
    d6b2:	movs	r3, #0
    d6b4:	str	r3, [sp, #24]
    d6b6:	ldr	r3, [sp, #8]
    d6b8:	cmp	r3, #0
    d6ba:	blt.w	d8ce <_dtoa_r+0x386>
    d6be:	add	r9, r3
    d6c0:	str	r3, [sp, #44]	; 0x2c
    d6c2:	movs	r3, #0
    d6c4:	str	r3, [sp, #20]
    d6c6:	ldr	r3, [sp, #4]
    d6c8:	cmp	r3, #9
    d6ca:	bhi.n	d726 <_dtoa_r+0x1de>
    d6cc:	cmp	r3, #5
    d6ce:	ble.w	e190 <_dtoa_r+0xc48>
    d6d2:	subs	r3, #4
    d6d4:	str	r3, [sp, #4]
    d6d6:	movs	r3, #0
    d6d8:	str	r3, [sp, #56]	; 0x38
    d6da:	ldr	r3, [sp, #4]
    d6dc:	subs	r3, #2
    d6de:	cmp	r3, #3
    d6e0:	bhi.w	e1a2 <_dtoa_r+0xc5a>
    d6e4:	tbh	[pc, r3, lsl #1]
    d6e8:	.word	0x01e502a9
    d6ec:	.word	0x03c802b5
    d6f0:	ldr	r3, [pc, #428]	; (d8a0 <_dtoa_r+0x358>)
    d6f2:	ldr	r2, [pc, #436]	; (d8a8 <_dtoa_r+0x360>)
    d6f4:	ubfx	r0, r6, #0, #20
    d6f8:	cmp	r0, #0
    d6fa:	ite	ne
    d6fc:	movne	r0, r3
    d6fe:	moveq	r0, r2
    d700:	b.n	d5ce <_dtoa_r+0x86>
    d702:	ldrd	r2, r3, [sp, #8]
    d706:	ubfx	r0, r3, #0, #20
    d70a:	orr.w	r3, r0, #1069547520	; 0x3fc00000
    d70e:	movs	r5, #0
    d710:	subw	r1, r1, #1023	; 0x3ff
    d714:	orr.w	r3, r3, #3145728	; 0x300000
    d718:	ldr	r0, [sp, #64]	; 0x40
    d71a:	str	r5, [sp, #40]	; 0x28
    d71c:	b.n	d642 <_dtoa_r+0xfa>
    d71e:	ldr	r0, [pc, #396]	; (d8ac <_dtoa_r+0x364>)
    d720:	b.n	d5b6 <_dtoa_r+0x6e>
    d722:	adds	r3, r0, #3
    d724:	b.n	d5e0 <_dtoa_r+0x98>
    d726:	movs	r1, #0
    d728:	str	r1, [r4, #68]	; 0x44
    d72a:	mov	r0, r4
    d72c:	mov	r8, r1
    d72e:	str	r1, [sp, #4]
    d730:	bl	ec38 <_Balloc>
    d734:	mov.w	r7, #4294967295
    d738:	movs	r3, #1
    d73a:	str	r0, [sp, #32]
    d73c:	str	r0, [r4, #64]	; 0x40
    d73e:	str	r7, [sp, #52]	; 0x34
    d740:	str	r3, [sp, #36]	; 0x24
    d742:	ldr	r3, [sp, #68]	; 0x44
    d744:	cmp	r3, #0
    d746:	blt.n	d83e <_dtoa_r+0x2f6>
    d748:	ldr	r2, [sp, #8]
    d74a:	cmp	r2, #14
    d74c:	bgt.n	d83e <_dtoa_r+0x2f6>
    d74e:	ldr	r3, [pc, #340]	; (d8a4 <_dtoa_r+0x35c>)
    d750:	cmp.w	r8, #0
    d754:	add.w	r3, r3, r2, lsl #3
    d758:	vldr	d4, [r3]
    d75c:	blt.w	dc68 <_dtoa_r+0x720>
    d760:	vneg.f64	d2, d4
    d764:	vmov	d7, sl, fp
    d768:	vdiv.f64	d6, d7, d4
    d76c:	vcvt.s32.f64	s12, d6
    d770:	ldr	r2, [sp, #32]
    d772:	vmov	r3, s12
    d776:	cmp	r7, #1
    d778:	add.w	r3, r3, #48	; 0x30
    d77c:	vcvt.f64.s32	d5, s12
    d780:	add.w	fp, r2, #1
    d784:	strb	r3, [r2, #0]
    d786:	vfma.f64	d7, d2, d5
    d78a:	beq.n	d7d2 <_dtoa_r+0x28a>
    d78c:	vmov.f64	d3, #36	; 0x41200000  10.0
    d790:	vmul.f64	d7, d7, d3
    d794:	vcmp.f64	d7, #0.0
    d798:	vmrs	APSR_nzcv, fpscr
    d79c:	beq.n	d814 <_dtoa_r+0x2cc>
    d79e:	ldr	r2, [sp, #32]
    d7a0:	b.n	d7b0 <_dtoa_r+0x268>
    d7a2:	vmul.f64	d7, d7, d3
    d7a6:	vcmp.f64	d7, #0.0
    d7aa:	vmrs	APSR_nzcv, fpscr
    d7ae:	beq.n	d814 <_dtoa_r+0x2cc>
    d7b0:	vdiv.f64	d6, d7, d4
    d7b4:	vcvt.s32.f64	s12, d6
    d7b8:	vmov	r3, s12
    d7bc:	adds	r3, #48	; 0x30
    d7be:	strb.w	r3, [fp], #1
    d7c2:	rsb	r3, r2, fp
    d7c6:	cmp	r3, r7
    d7c8:	vcvt.f64.s32	d5, s12
    d7cc:	vfma.f64	d7, d2, d5
    d7d0:	bne.n	d7a2 <_dtoa_r+0x25a>
    d7d2:	vadd.f64	d7, d7, d7
    d7d6:	vcmpe.f64	d4, d7
    d7da:	vmrs	APSR_nzcv, fpscr
    d7de:	bmi.n	d7f2 <_dtoa_r+0x2aa>
    d7e0:	vcmp.f64	d4, d7
    d7e4:	vmrs	APSR_nzcv, fpscr
    d7e8:	bne.n	d814 <_dtoa_r+0x2cc>
    d7ea:	vmov	r3, s12
    d7ee:	lsls	r3, r3, #31
    d7f0:	bpl.n	d814 <_dtoa_r+0x2cc>
    d7f2:	ldrb.w	r0, [fp, #-1]
    d7f6:	ldr	r2, [sp, #32]
    d7f8:	add.w	r3, fp, #4294967295
    d7fc:	b.n	d808 <_dtoa_r+0x2c0>
    d7fe:	cmp	r2, r3
    d800:	beq.w	dfce <_dtoa_r+0xa86>
    d804:	ldrb.w	r0, [r3, #-1]!
    d808:	cmp	r0, #57	; 0x39
    d80a:	add.w	fp, r3, #1
    d80e:	beq.n	d7fe <_dtoa_r+0x2b6>
    d810:	adds	r0, #1
    d812:	strb	r0, [r3, #0]
    d814:	ldr	r1, [sp, #28]
    d816:	mov	r0, r4
    d818:	bl	ec84 <_Bfree>
    d81c:	movs	r2, #0
    d81e:	ldr	r3, [sp, #8]
    d820:	strb.w	r2, [fp]
    d824:	ldr	r2, [sp, #16]
    d826:	adds	r3, #1
    d828:	str	r3, [r2, #0]
    d82a:	ldr	r3, [sp, #116]	; 0x74
    d82c:	cmp	r3, #0
    d82e:	beq.w	defe <_dtoa_r+0x9b6>
    d832:	ldr	r0, [sp, #32]
    d834:	str.w	fp, [r3]
    d838:	add	sp, #76	; 0x4c
    d83a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d83e:	ldr	r2, [sp, #36]	; 0x24
    d840:	cmp	r2, #0
    d842:	beq.n	d8ec <_dtoa_r+0x3a4>
    d844:	ldr	r2, [sp, #4]
    d846:	cmp	r2, #1
    d848:	ble.w	dca8 <_dtoa_r+0x760>
    d84c:	ldr	r1, [sp, #20]
    d84e:	subs	r2, r7, #1
    d850:	cmp	r1, r2
    d852:	blt.w	df04 <_dtoa_r+0x9bc>
    d856:	subs	r3, r1, r2
    d858:	str	r3, [sp, #56]	; 0x38
    d85a:	cmp	r7, #0
    d85c:	ldr	r3, [sp, #24]
    d85e:	blt.w	e0aa <_dtoa_r+0xb62>
    d862:	str	r3, [sp, #40]	; 0x28
    d864:	mov	r3, r7
    d866:	ldr	r2, [sp, #24]
    d868:	movs	r1, #1
    d86a:	add	r2, r3
    d86c:	mov	r0, r4
    d86e:	str	r2, [sp, #24]
    d870:	add	r9, r3
    d872:	bl	ee4c <__i2b>
    d876:	mov	r6, r0
    d878:	b.n	d8f6 <_dtoa_r+0x3ae>
    d87a:	nop
    d87c:	nop.w
    d880:	.word	0x636f4361
    d884:	.word	0x3fd287a7
    d888:	.word	0x8b60c8b3
    d88c:	.word	0x3fc68a28
    d890:	.word	0x509f79fb
    d894:	.word	0x3fd34413
    d898:	.word	0x7ff00000
    d89c:	.word	0x200016dd
    d8a0:	.word	0x200016f4
    d8a4:	.word	0x200002a8
    d8a8:	.word	0x200016e8
    d8ac:	.word	0x200016dc
    d8b0:	movs	r3, #1
    d8b2:	str	r3, [sp, #48]	; 0x30
    d8b4:	b.n	d6a8 <_dtoa_r+0x160>
    d8b6:	vcvt.f64.s32	d6, s13
    d8ba:	vcmp.f64	d7, d6
    d8be:	vmrs	APSR_nzcv, fpscr
    d8c2:	beq.w	d67e <_dtoa_r+0x136>
    d8c6:	ldr	r3, [sp, #8]
    d8c8:	subs	r3, #1
    d8ca:	str	r3, [sp, #8]
    d8cc:	b.n	d67e <_dtoa_r+0x136>
    d8ce:	ldr	r2, [sp, #24]
    d8d0:	ldr	r3, [sp, #8]
    d8d2:	subs	r2, r2, r3
    d8d4:	negs	r3, r3
    d8d6:	str	r3, [sp, #20]
    d8d8:	movs	r3, #0
    d8da:	str	r2, [sp, #24]
    d8dc:	str	r3, [sp, #44]	; 0x2c
    d8de:	b.n	d6c6 <_dtoa_r+0x17e>
    d8e0:	rsb	r3, r9, #0
    d8e4:	str	r3, [sp, #24]
    d8e6:	mov.w	r9, #0
    d8ea:	b.n	d6b6 <_dtoa_r+0x16e>
    d8ec:	ldr	r3, [sp, #20]
    d8ee:	str	r3, [sp, #56]	; 0x38
    d8f0:	ldr	r6, [sp, #36]	; 0x24
    d8f2:	ldr	r3, [sp, #24]
    d8f4:	str	r3, [sp, #40]	; 0x28
    d8f6:	ldr	r1, [sp, #40]	; 0x28
    d8f8:	mov	r3, r1
    d8fa:	cbz	r1, d916 <_dtoa_r+0x3ce>
    d8fc:	cmp.w	r9, #0
    d900:	ble.n	d916 <_dtoa_r+0x3ce>
    d902:	cmp	r1, r9
    d904:	ldr	r2, [sp, #24]
    d906:	it	ge
    d908:	movge	r3, r9
    d90a:	subs	r2, r2, r3
    d90c:	str	r2, [sp, #24]
    d90e:	subs	r2, r1, r3
    d910:	str	r2, [sp, #40]	; 0x28
    d912:	rsb	r9, r3, r9
    d916:	ldr	r3, [sp, #20]
    d918:	cmp	r3, #0
    d91a:	ble.w	de1e <_dtoa_r+0x8d6>
    d91e:	ldr	r2, [sp, #36]	; 0x24
    d920:	cmp	r2, #0
    d922:	beq.w	dc5a <_dtoa_r+0x712>
    d926:	ldr	r2, [sp, #56]	; 0x38
    d928:	cmp	r2, #0
    d92a:	beq.w	dc5a <_dtoa_r+0x712>
    d92e:	mov	r1, r6
    d930:	mov	r0, r4
    d932:	bl	ef90 <__pow5mult>
    d936:	ldr	r2, [sp, #28]
    d938:	mov	r1, r0
    d93a:	mov	r6, r0
    d93c:	mov	r0, r4
    d93e:	bl	ee60 <__multiply>
    d942:	ldr	r1, [sp, #28]
    d944:	mov	r5, r0
    d946:	mov	r0, r4
    d948:	bl	ec84 <_Bfree>
    d94c:	ldr	r3, [sp, #20]
    d94e:	ldr	r2, [sp, #56]	; 0x38
    d950:	subs	r3, r3, r2
    d952:	str	r3, [sp, #20]
    d954:	bne.w	dc58 <_dtoa_r+0x710>
    d958:	movs	r1, #1
    d95a:	mov	r0, r4
    d95c:	bl	ee4c <__i2b>
    d960:	ldr	r3, [sp, #44]	; 0x2c
    d962:	str	r0, [sp, #20]
    d964:	cmp	r3, #0
    d966:	beq.w	dcc2 <_dtoa_r+0x77a>
    d96a:	mov	r1, r0
    d96c:	mov	r2, r3
    d96e:	mov	r0, r4
    d970:	bl	ef90 <__pow5mult>
    d974:	ldr	r3, [sp, #4]
    d976:	str	r0, [sp, #20]
    d978:	cmp	r3, #1
    d97a:	ble.w	de7e <_dtoa_r+0x936>
    d97e:	movs	r3, #0
    d980:	str	r3, [sp, #28]
    d982:	ldr	r2, [sp, #20]
    d984:	ldr	r3, [r2, #16]
    d986:	add.w	r3, r2, r3, lsl #2
    d98a:	ldr	r0, [r3, #16]
    d98c:	bl	edb0 <__hi0bits>
    d990:	rsb	r0, r0, #32
    d994:	add	r0, r9
    d996:	ands.w	r0, r0, #31
    d99a:	beq.w	dcbe <_dtoa_r+0x776>
    d99e:	rsb	r3, r0, #32
    d9a2:	cmp	r3, #4
    d9a4:	ble.w	e198 <_dtoa_r+0xc50>
    d9a8:	rsb	r0, r0, #28
    d9ac:	ldr	r3, [sp, #24]
    d9ae:	add	r3, r0
    d9b0:	str	r3, [sp, #24]
    d9b2:	ldr	r3, [sp, #40]	; 0x28
    d9b4:	add	r3, r0
    d9b6:	str	r3, [sp, #40]	; 0x28
    d9b8:	add	r9, r0
    d9ba:	ldr	r3, [sp, #24]
    d9bc:	cmp	r3, #0
    d9be:	ble.n	d9cc <_dtoa_r+0x484>
    d9c0:	mov	r1, r5
    d9c2:	mov	r2, r3
    d9c4:	mov	r0, r4
    d9c6:	bl	f030 <__lshift>
    d9ca:	mov	r5, r0
    d9cc:	cmp.w	r9, #0
    d9d0:	ble.n	d9de <_dtoa_r+0x496>
    d9d2:	mov	r2, r9
    d9d4:	ldr	r1, [sp, #20]
    d9d6:	mov	r0, r4
    d9d8:	bl	f030 <__lshift>
    d9dc:	str	r0, [sp, #20]
    d9de:	ldr	r3, [sp, #48]	; 0x30
    d9e0:	cmp	r3, #0
    d9e2:	bne.w	dde8 <_dtoa_r+0x8a0>
    d9e6:	cmp	r7, #0
    d9e8:	ble.w	de2c <_dtoa_r+0x8e4>
    d9ec:	ldr	r3, [sp, #36]	; 0x24
    d9ee:	cmp	r3, #0
    d9f0:	bne.w	dcea <_dtoa_r+0x7a2>
    d9f4:	ldr.w	fp, [sp, #32]
    d9f8:	ldr.w	sl, [sp, #20]
    d9fc:	mov	r8, fp
    d9fe:	b.n	da06 <_dtoa_r+0x4be>
    da00:	bl	ec98 <__multadd>
    da04:	mov	r5, r0
    da06:	mov	r1, sl
    da08:	mov	r0, r5
    da0a:	bl	d41c <quorem>
    da0e:	add.w	r9, r0, #48	; 0x30
    da12:	strb.w	r9, [r8], #1
    da16:	rsb	r3, fp, r8
    da1a:	cmp	r3, r7
    da1c:	mov.w	r2, #10
    da20:	mov.w	r3, #0
    da24:	mov	r1, r5
    da26:	mov	r0, r4
    da28:	blt.n	da00 <_dtoa_r+0x4b8>
    da2a:	ldr	r3, [sp, #32]
    da2c:	cmp	r7, #1
    da2e:	ite	ge
    da30:	addge	r3, r3, r7
    da32:	addlt	r3, #1
    da34:	mov	fp, r3
    da36:	mov.w	sl, #0
    da3a:	mov	r1, r5
    da3c:	movs	r2, #1
    da3e:	mov	r0, r4
    da40:	bl	f030 <__lshift>
    da44:	ldr	r1, [sp, #20]
    da46:	str	r0, [sp, #28]
    da48:	bl	f0e0 <__mcmp>
    da4c:	cmp	r0, #0
    da4e:	ble.w	df6a <_dtoa_r+0xa22>
    da52:	ldrb.w	r2, [fp, #-1]
    da56:	ldr	r1, [sp, #32]
    da58:	add.w	r3, fp, #4294967295
    da5c:	b.n	da68 <_dtoa_r+0x520>
    da5e:	cmp	r3, r1
    da60:	beq.w	de6a <_dtoa_r+0x922>
    da64:	ldrb.w	r2, [r3, #-1]!
    da68:	cmp	r2, #57	; 0x39
    da6a:	add.w	fp, r3, #1
    da6e:	beq.n	da5e <_dtoa_r+0x516>
    da70:	adds	r2, #1
    da72:	strb	r2, [r3, #0]
    da74:	ldr	r1, [sp, #20]
    da76:	mov	r0, r4
    da78:	bl	ec84 <_Bfree>
    da7c:	cmp	r6, #0
    da7e:	beq.w	d814 <_dtoa_r+0x2cc>
    da82:	cmp.w	sl, #0
    da86:	beq.n	da94 <_dtoa_r+0x54c>
    da88:	cmp	sl, r6
    da8a:	beq.n	da94 <_dtoa_r+0x54c>
    da8c:	mov	r1, sl
    da8e:	mov	r0, r4
    da90:	bl	ec84 <_Bfree>
    da94:	mov	r1, r6
    da96:	mov	r0, r4
    da98:	bl	ec84 <_Bfree>
    da9c:	b.n	d814 <_dtoa_r+0x2cc>
    da9e:	rsb	r3, r3, #32
    daa2:	lsl.w	r3, sl, r3
    daa6:	vmov	s15, r3
    daaa:	b.n	d630 <_dtoa_r+0xe8>
    daac:	movs	r3, #0
    daae:	str	r3, [sp, #48]	; 0x30
    dab0:	b.n	d6a8 <_dtoa_r+0x160>
    dab2:	movs	r3, #0
    dab4:	str	r3, [sp, #36]	; 0x24
    dab6:	ldr	r3, [sp, #8]
    dab8:	add	r3, r8
    daba:	adds	r7, r3, #1
    dabc:	cmp	r7, #0
    dabe:	str	r3, [sp, #52]	; 0x34
    dac0:	ble.w	df1e <_dtoa_r+0x9d6>
    dac4:	mov	r6, r7
    dac6:	mov	r5, r7
    dac8:	movs	r1, #0
    daca:	cmp	r6, #23
    dacc:	str	r1, [r4, #68]	; 0x44
    dace:	bls.n	dae6 <_dtoa_r+0x59e>
    dad0:	movs	r2, #1
    dad2:	movs	r3, #4
    dad4:	lsls	r3, r3, #1
    dad6:	add.w	r0, r3, #20
    dada:	cmp	r0, r6
    dadc:	mov	r1, r2
    dade:	add.w	r2, r2, #1
    dae2:	bls.n	dad4 <_dtoa_r+0x58c>
    dae4:	str	r1, [r4, #68]	; 0x44
    dae6:	mov	r0, r4
    dae8:	bl	ec38 <_Balloc>
    daec:	cmp	r5, #14
    daee:	str	r0, [sp, #32]
    daf0:	str	r0, [r4, #64]	; 0x40
    daf2:	bhi.w	d742 <_dtoa_r+0x1fa>
    daf6:	ldr	r3, [sp, #56]	; 0x38
    daf8:	cmp	r3, #0
    dafa:	beq.w	d742 <_dtoa_r+0x1fa>
    dafe:	ldr	r1, [sp, #8]
    db00:	cmp	r1, #0
    db02:	strd	sl, fp, [sp, #56]	; 0x38
    db06:	ble.w	df8c <_dtoa_r+0xa44>
    db0a:	ldr	r3, [pc, #792]	; (de24 <_dtoa_r+0x8dc>)
    db0c:	and.w	r2, r1, #15
    db10:	add.w	r2, r3, r2, lsl #3
    db14:	asrs	r3, r1, #4
    db16:	lsls	r6, r3, #27
    db18:	vldr	d6, [r2]
    db1c:	bpl.w	df16 <_dtoa_r+0x9ce>
    db20:	ldr	r2, [pc, #772]	; (de28 <_dtoa_r+0x8e0>)
    db22:	vldr	d7, [r2, #32]
    db26:	vmov	d4, sl, fp
    db2a:	and.w	r3, r3, #15
    db2e:	movs	r1, #3
    db30:	vdiv.f64	d5, d4, d7
    db34:	cbz	r3, db4e <_dtoa_r+0x606>
    db36:	ldr	r2, [pc, #752]	; (de28 <_dtoa_r+0x8e0>)
    db38:	lsls	r5, r3, #31
    db3a:	bpl.n	db46 <_dtoa_r+0x5fe>
    db3c:	vldr	d7, [r2]
    db40:	adds	r1, #1
    db42:	vmul.f64	d6, d6, d7
    db46:	asrs	r3, r3, #1
    db48:	add.w	r2, r2, #8
    db4c:	bne.n	db38 <_dtoa_r+0x5f0>
    db4e:	vdiv.f64	d4, d5, d6
    db52:	ldr	r3, [sp, #48]	; 0x30
    db54:	cbz	r3, db66 <_dtoa_r+0x61e>
    db56:	vmov.f64	d7, #112	; 0x3f800000  1.0
    db5a:	vcmpe.f64	d4, d7
    db5e:	vmrs	APSR_nzcv, fpscr
    db62:	bmi.w	e0d4 <_dtoa_r+0xb8c>
    db66:	vmov	s15, r1
    db6a:	vcvt.f64.s32	d6, s15
    db6e:	vmov.f64	d7, #28	; 0x40e00000  7.0
    db72:	vfma.f64	d7, d6, d4
    db76:	vmov	r2, r3, d7
    db7a:	sub.w	r3, r3, #54525952	; 0x3400000
    db7e:	cmp	r7, #0
    db80:	beq.w	ded0 <_dtoa_r+0x988>
    db84:	ldr	r6, [sp, #8]
    db86:	mov	r1, r7
    db88:	ldr	r0, [sp, #36]	; 0x24
    db8a:	cmp	r0, #0
    db8c:	beq.w	e02a <_dtoa_r+0xae2>
    db90:	vmov.f64	d3, #96	; 0x3f000000  0.5
    db94:	ldr	r0, [pc, #652]	; (de24 <_dtoa_r+0x8dc>)
    db96:	ldr	r5, [sp, #32]
    db98:	add.w	r0, r0, r1, lsl #3
    db9c:	vldr	d6, [r0, #-8]
    dba0:	vcvt.s32.f64	s14, d4
    dba4:	vdiv.f64	d5, d3, d6
    dba8:	vmov	r0, s14
    dbac:	vmov	d6, r2, r3
    dbb0:	adds	r0, #48	; 0x30
    dbb2:	uxtb	r0, r0
    dbb4:	vsub.f64	d5, d5, d6
    dbb8:	vcvt.f64.s32	d7, s14
    dbbc:	vsub.f64	d7, d4, d7
    dbc0:	vcmpe.f64	d5, d7
    dbc4:	vmrs	APSR_nzcv, fpscr
    dbc8:	strb	r0, [r5, #0]
    dbca:	add.w	fp, r5, #1
    dbce:	bgt.n	dc36 <_dtoa_r+0x6ee>
    dbd0:	vmov.f64	d3, #112	; 0x3f800000  1.0
    dbd4:	vsub.f64	d6, d3, d7
    dbd8:	vcmpe.f64	d5, d6
    dbdc:	vmrs	APSR_nzcv, fpscr
    dbe0:	bgt.w	e140 <_dtoa_r+0xbf8>
    dbe4:	cmp	r1, #1
    dbe6:	ble.w	df84 <_dtoa_r+0xa3c>
    dbea:	vmov.f64	d4, #36	; 0x41200000  10.0
    dbee:	ldr	r3, [sp, #32]
    dbf0:	add	r1, r3
    dbf2:	b.n	dc0a <_dtoa_r+0x6c2>
    dbf4:	vsub.f64	d6, d3, d7
    dbf8:	vcmpe.f64	d6, d5
    dbfc:	vmrs	APSR_nzcv, fpscr
    dc00:	bmi.w	e140 <_dtoa_r+0xbf8>
    dc04:	cmp	fp, r1
    dc06:	beq.w	df84 <_dtoa_r+0xa3c>
    dc0a:	vmul.f64	d7, d7, d4
    dc0e:	vmul.f64	d5, d5, d4
    dc12:	vcvt.s32.f64	s12, d7
    dc16:	vmov	r3, s12
    dc1a:	add.w	r0, r3, #48	; 0x30
    dc1e:	uxtb	r0, r0
    dc20:	vcvt.f64.s32	d6, s12
    dc24:	vsub.f64	d7, d7, d6
    dc28:	vcmpe.f64	d7, d5
    dc2c:	vmrs	APSR_nzcv, fpscr
    dc30:	strb.w	r0, [fp], #1
    dc34:	bpl.n	dbf4 <_dtoa_r+0x6ac>
    dc36:	str	r6, [sp, #8]
    dc38:	b.n	d814 <_dtoa_r+0x2cc>
    dc3a:	movs	r3, #0
    dc3c:	str	r3, [sp, #36]	; 0x24
    dc3e:	cmp.w	r8, #0
    dc42:	ble.w	df26 <_dtoa_r+0x9de>
    dc46:	mov	r6, r8
    dc48:	mov	r5, r8
    dc4a:	str.w	r8, [sp, #52]	; 0x34
    dc4e:	mov	r7, r8
    dc50:	b.n	dac8 <_dtoa_r+0x580>
    dc52:	movs	r3, #1
    dc54:	str	r3, [sp, #36]	; 0x24
    dc56:	b.n	dc3e <_dtoa_r+0x6f6>
    dc58:	str	r5, [sp, #28]
    dc5a:	ldr	r2, [sp, #20]
    dc5c:	ldr	r1, [sp, #28]
    dc5e:	mov	r0, r4
    dc60:	bl	ef90 <__pow5mult>
    dc64:	mov	r5, r0
    dc66:	b.n	d958 <_dtoa_r+0x410>
    dc68:	cmp	r7, #0
    dc6a:	bgt.w	d760 <_dtoa_r+0x218>
    dc6e:	bne.w	def6 <_dtoa_r+0x9ae>
    dc72:	vmov.f64	d7, #20	; 0x40a00000  5.0
    dc76:	vmul.f64	d4, d4, d7
    dc7a:	vmov	d7, sl, fp
    dc7e:	vcmpe.f64	d4, d7
    dc82:	vmrs	APSR_nzcv, fpscr
    dc86:	mov	r6, r7
    dc88:	str	r7, [sp, #20]
    dc8a:	blt.w	de58 <_dtoa_r+0x910>
    dc8e:	mvn.w	r3, r8
    dc92:	ldr.w	fp, [sp, #32]
    dc96:	str	r3, [sp, #8]
    dc98:	ldr	r1, [sp, #20]
    dc9a:	mov	r0, r4
    dc9c:	bl	ec84 <_Bfree>
    dca0:	cmp	r6, #0
    dca2:	beq.w	d814 <_dtoa_r+0x2cc>
    dca6:	b.n	da94 <_dtoa_r+0x54c>
    dca8:	ldr	r2, [sp, #40]	; 0x28
    dcaa:	cmp	r2, #0
    dcac:	beq.w	e0b4 <_dtoa_r+0xb6c>
    dcb0:	ldr	r2, [sp, #20]
    dcb2:	str	r2, [sp, #56]	; 0x38
    dcb4:	ldr	r2, [sp, #24]
    dcb6:	str	r2, [sp, #40]	; 0x28
    dcb8:	addw	r3, r3, #1075	; 0x433
    dcbc:	b.n	d866 <_dtoa_r+0x31e>
    dcbe:	movs	r0, #28
    dcc0:	b.n	d9ac <_dtoa_r+0x464>
    dcc2:	ldr	r3, [sp, #4]
    dcc4:	cmp	r3, #1
    dcc6:	ble.w	e14a <_dtoa_r+0xc02>
    dcca:	ldr	r3, [sp, #44]	; 0x2c
    dccc:	str	r3, [sp, #28]
    dcce:	movs	r0, #1
    dcd0:	b.n	d994 <_dtoa_r+0x44c>
    dcd2:	mov	r1, r6
    dcd4:	movs	r3, #0
    dcd6:	movs	r2, #10
    dcd8:	mov	r0, r4
    dcda:	bl	ec98 <__multadd>
    dcde:	ldr	r3, [sp, #52]	; 0x34
    dce0:	cmp	r3, #0
    dce2:	mov	r6, r0
    dce4:	ble.w	e182 <_dtoa_r+0xc3a>
    dce8:	mov	r7, r3
    dcea:	ldr	r3, [sp, #40]	; 0x28
    dcec:	cmp	r3, #0
    dcee:	ble.n	dcfc <_dtoa_r+0x7b4>
    dcf0:	mov	r1, r6
    dcf2:	mov	r2, r3
    dcf4:	mov	r0, r4
    dcf6:	bl	f030 <__lshift>
    dcfa:	mov	r6, r0
    dcfc:	ldr	r3, [sp, #28]
    dcfe:	cmp	r3, #0
    dd00:	bne.w	dfe0 <_dtoa_r+0xa98>
    dd04:	mov	r8, r6
    dd06:	ldr	r3, [sp, #32]
    dd08:	subs	r7, #1
    dd0a:	adds	r2, r3, r7
    dd0c:	str	r2, [sp, #36]	; 0x24
    dd0e:	and.w	r2, sl, #1
    dd12:	str	r2, [sp, #40]	; 0x28
    dd14:	mov	r7, r3
    dd16:	ldr.w	fp, [sp, #20]
    dd1a:	mov	r0, r5
    dd1c:	mov	r1, fp
    dd1e:	bl	d41c <quorem>
    dd22:	mov	r1, r6
    dd24:	mov	sl, r0
    dd26:	mov	r0, r5
    dd28:	bl	f0e0 <__mcmp>
    dd2c:	mov	r2, r8
    dd2e:	mov	r1, fp
    dd30:	mov	r9, r0
    dd32:	mov	r0, r4
    dd34:	bl	f124 <__mdiff>
    dd38:	ldr	r3, [r0, #12]
    dd3a:	mov	fp, r0
    dd3c:	add.w	r2, sl, #48	; 0x30
    dd40:	cmp	r3, #0
    dd42:	bne.n	ddd8 <_dtoa_r+0x890>
    dd44:	mov	r1, r0
    dd46:	mov	r0, r5
    dd48:	str	r2, [sp, #28]
    dd4a:	bl	f0e0 <__mcmp>
    dd4e:	mov	r1, fp
    dd50:	str	r0, [sp, #24]
    dd52:	mov	r0, r4
    dd54:	bl	ec84 <_Bfree>
    dd58:	ldr	r3, [sp, #24]
    dd5a:	ldr	r2, [sp, #28]
    dd5c:	cbnz	r3, dd6a <_dtoa_r+0x822>
    dd5e:	ldr	r1, [sp, #4]
    dd60:	cbnz	r1, dd6a <_dtoa_r+0x822>
    dd62:	ldr	r1, [sp, #40]	; 0x28
    dd64:	cmp	r1, #0
    dd66:	beq.w	e154 <_dtoa_r+0xc0c>
    dd6a:	cmp.w	r9, #0
    dd6e:	blt.w	df30 <_dtoa_r+0x9e8>
    dd72:	bne.n	dd80 <_dtoa_r+0x838>
    dd74:	ldr	r1, [sp, #4]
    dd76:	cbnz	r1, dd80 <_dtoa_r+0x838>
    dd78:	ldr	r1, [sp, #40]	; 0x28
    dd7a:	cmp	r1, #0
    dd7c:	beq.w	df30 <_dtoa_r+0x9e8>
    dd80:	cmp	r3, #0
    dd82:	bgt.w	e008 <_dtoa_r+0xac0>
    dd86:	ldr	r3, [sp, #36]	; 0x24
    dd88:	strb	r2, [r7, #0]
    dd8a:	add.w	r9, r7, #1
    dd8e:	cmp	r7, r3
    dd90:	mov	fp, r9
    dd92:	beq.w	e022 <_dtoa_r+0xada>
    dd96:	mov	r1, r5
    dd98:	movs	r3, #0
    dd9a:	movs	r2, #10
    dd9c:	mov	r0, r4
    dd9e:	bl	ec98 <__multadd>
    dda2:	cmp	r6, r8
    dda4:	mov	r5, r0
    dda6:	mov	r1, r6
    dda8:	mov.w	r3, #0
    ddac:	mov.w	r2, #10
    ddb0:	mov	r0, r4
    ddb2:	beq.n	ddcc <_dtoa_r+0x884>
    ddb4:	bl	ec98 <__multadd>
    ddb8:	mov	r1, r8
    ddba:	mov	r6, r0
    ddbc:	movs	r3, #0
    ddbe:	movs	r2, #10
    ddc0:	mov	r0, r4
    ddc2:	bl	ec98 <__multadd>
    ddc6:	mov	r7, r9
    ddc8:	mov	r8, r0
    ddca:	b.n	dd16 <_dtoa_r+0x7ce>
    ddcc:	bl	ec98 <__multadd>
    ddd0:	mov	r7, r9
    ddd2:	mov	r6, r0
    ddd4:	mov	r8, r0
    ddd6:	b.n	dd16 <_dtoa_r+0x7ce>
    ddd8:	mov	r1, r0
    ddda:	mov	r0, r4
    dddc:	str	r2, [sp, #24]
    ddde:	bl	ec84 <_Bfree>
    dde2:	movs	r3, #1
    dde4:	ldr	r2, [sp, #24]
    dde6:	b.n	dd6a <_dtoa_r+0x822>
    dde8:	ldr	r1, [sp, #20]
    ddea:	mov	r0, r5
    ddec:	bl	f0e0 <__mcmp>
    ddf0:	cmp	r0, #0
    ddf2:	bge.w	d9e6 <_dtoa_r+0x49e>
    ddf6:	mov	r1, r5
    ddf8:	ldr	r5, [sp, #8]
    ddfa:	movs	r3, #0
    ddfc:	subs	r5, #1
    ddfe:	movs	r2, #10
    de00:	mov	r0, r4
    de02:	str	r5, [sp, #8]
    de04:	bl	ec98 <__multadd>
    de08:	ldr	r3, [sp, #36]	; 0x24
    de0a:	mov	r5, r0
    de0c:	cmp	r3, #0
    de0e:	bne.w	dcd2 <_dtoa_r+0x78a>
    de12:	ldr	r3, [sp, #52]	; 0x34
    de14:	cmp	r3, #0
    de16:	ble.w	e174 <_dtoa_r+0xc2c>
    de1a:	mov	r7, r3
    de1c:	b.n	d9f4 <_dtoa_r+0x4ac>
    de1e:	ldr	r5, [sp, #28]
    de20:	b.n	d958 <_dtoa_r+0x410>
    de22:	nop
    de24:	.word	0x200002a8
    de28:	.word	0x20000280
    de2c:	ldr	r3, [sp, #4]
    de2e:	cmp	r3, #2
    de30:	ble.w	d9ec <_dtoa_r+0x4a4>
    de34:	cmp	r7, #0
    de36:	bne.w	e10c <_dtoa_r+0xbc4>
    de3a:	mov	r3, r7
    de3c:	ldr	r1, [sp, #20]
    de3e:	movs	r2, #5
    de40:	mov	r0, r4
    de42:	bl	ec98 <__multadd>
    de46:	mov	r1, r0
    de48:	str	r0, [sp, #20]
    de4a:	mov	r0, r5
    de4c:	bl	f0e0 <__mcmp>
    de50:	cmp	r0, #0
    de52:	str	r5, [sp, #28]
    de54:	ble.w	dc8e <_dtoa_r+0x746>
    de58:	ldr	r2, [sp, #8]
    de5a:	ldr	r1, [sp, #32]
    de5c:	movs	r3, #49	; 0x31
    de5e:	adds	r2, #1
    de60:	str	r2, [sp, #8]
    de62:	strb	r3, [r1, #0]
    de64:	add.w	fp, r1, #1
    de68:	b.n	dc98 <_dtoa_r+0x750>
    de6a:	ldr	r2, [sp, #8]
    de6c:	adds	r2, #1
    de6e:	str	r2, [sp, #8]
    de70:	ldr	r2, [sp, #32]
    de72:	movs	r3, #49	; 0x31
    de74:	strb	r3, [r2, #0]
    de76:	b.n	da74 <_dtoa_r+0x52c>
    de78:	movs	r3, #1
    de7a:	str	r3, [sp, #36]	; 0x24
    de7c:	b.n	dab6 <_dtoa_r+0x56e>
    de7e:	cmp.w	sl, #0
    de82:	bne.w	d97e <_dtoa_r+0x436>
    de86:	ubfx	r3, fp, #0, #20
    de8a:	cmp	r3, #0
    de8c:	bne.w	e0c6 <_dtoa_r+0xb7e>
    de90:	bic.w	r3, fp, #2147483648	; 0x80000000
    de94:	lsrs	r3, r3, #20
    de96:	lsls	r3, r3, #20
    de98:	cmp	r3, #0
    de9a:	beq.w	e146 <_dtoa_r+0xbfe>
    de9e:	ldr	r3, [sp, #24]
    dea0:	adds	r3, #1
    dea2:	str	r3, [sp, #24]
    dea4:	movs	r3, #1
    dea6:	add.w	r9, r9, #1
    deaa:	str	r3, [sp, #28]
    deac:	ldr	r3, [sp, #44]	; 0x2c
    deae:	movs	r0, #1
    deb0:	cmp	r3, #0
    deb2:	beq.w	d994 <_dtoa_r+0x44c>
    deb6:	b.n	d982 <_dtoa_r+0x43a>
    deb8:	vmov	s15, r1
    debc:	vcvt.f64.s32	d6, s15
    dec0:	vmov.f64	d7, #28	; 0x40e00000  7.0
    dec4:	vfma.f64	d7, d4, d6
    dec8:	vmov	r2, r3, d7
    decc:	sub.w	r3, r3, #54525952	; 0x3400000
    ded0:	vmov	d6, r2, r3
    ded4:	vmov.f64	d7, #20	; 0x40a00000  5.0
    ded8:	vsub.f64	d7, d4, d7
    dedc:	vcmpe.f64	d7, d6
    dee0:	vmrs	APSR_nzcv, fpscr
    dee4:	bgt.w	e0a2 <_dtoa_r+0xb5a>
    dee8:	vneg.f64	d6, d6
    deec:	vcmpe.f64	d7, d6
    def0:	vmrs	APSR_nzcv, fpscr
    def4:	bpl.n	df84 <_dtoa_r+0xa3c>
    def6:	movs	r3, #0
    def8:	str	r3, [sp, #20]
    defa:	mov	r6, r3
    defc:	b.n	dc8e <_dtoa_r+0x746>
    defe:	ldr	r0, [sp, #32]
    df00:	b.w	d5b6 <_dtoa_r+0x6e>
    df04:	ldr	r3, [sp, #20]
    df06:	ldr	r1, [sp, #44]	; 0x2c
    df08:	str	r2, [sp, #20]
    df0a:	subs	r3, r2, r3
    df0c:	add	r1, r3
    df0e:	movs	r3, #0
    df10:	str	r1, [sp, #44]	; 0x2c
    df12:	str	r3, [sp, #56]	; 0x38
    df14:	b.n	d85a <_dtoa_r+0x312>
    df16:	vldr	d5, [sp, #56]	; 0x38
    df1a:	movs	r1, #2
    df1c:	b.n	db34 <_dtoa_r+0x5ec>
    df1e:	mov	r5, r7
    df20:	movs	r1, #0
    df22:	str	r1, [r4, #68]	; 0x44
    df24:	b.n	dae6 <_dtoa_r+0x59e>
    df26:	movs	r5, #1
    df28:	str	r5, [sp, #52]	; 0x34
    df2a:	mov	r7, r5
    df2c:	mov	r8, r5
    df2e:	b.n	df20 <_dtoa_r+0x9d8>
    df30:	cmp	r3, #0
    df32:	mov	r9, r2
    df34:	ble.n	df5a <_dtoa_r+0xa12>
    df36:	mov	r1, r5
    df38:	movs	r2, #1
    df3a:	mov	r0, r4
    df3c:	bl	f030 <__lshift>
    df40:	ldr	r1, [sp, #20]
    df42:	mov	r5, r0
    df44:	bl	f0e0 <__mcmp>
    df48:	cmp	r0, #0
    df4a:	ble.w	e166 <_dtoa_r+0xc1e>
    df4e:	cmp.w	r9, #57	; 0x39
    df52:	beq.w	e110 <_dtoa_r+0xbc8>
    df56:	add.w	r9, sl, #49	; 0x31
    df5a:	mov	sl, r6
    df5c:	strb.w	r9, [r7]
    df60:	add.w	fp, r7, #1
    df64:	mov	r6, r8
    df66:	str	r5, [sp, #28]
    df68:	b.n	da74 <_dtoa_r+0x52c>
    df6a:	bne.n	df76 <_dtoa_r+0xa2e>
    df6c:	tst.w	r9, #1
    df70:	beq.n	df76 <_dtoa_r+0xa2e>
    df72:	b.n	da52 <_dtoa_r+0x50a>
    df74:	mov	fp, r2
    df76:	ldrb.w	r3, [fp, #-1]
    df7a:	cmp	r3, #48	; 0x30
    df7c:	add.w	r2, fp, #4294967295
    df80:	beq.n	df74 <_dtoa_r+0xa2c>
    df82:	b.n	da74 <_dtoa_r+0x52c>
    df84:	ldrd	sl, fp, [sp, #56]	; 0x38
    df88:	b.w	d742 <_dtoa_r+0x1fa>
    df8c:	ldr	r3, [sp, #8]
    df8e:	negs	r3, r3
    df90:	cmp	r3, #0
    df92:	beq.w	e0cc <_dtoa_r+0xb84>
    df96:	ldr	r2, [pc, #556]	; (e1c4 <_dtoa_r+0xc7c>)
    df98:	and.w	r1, r3, #15
    df9c:	add.w	r2, r2, r1, lsl #3
    dfa0:	vldr	d7, [r2]
    dfa4:	vldr	d6, [sp, #56]	; 0x38
    dfa8:	asrs	r3, r3, #4
    dfaa:	vmul.f64	d4, d6, d7
    dfae:	beq.w	e17e <_dtoa_r+0xc36>
    dfb2:	ldr	r2, [pc, #532]	; (e1c8 <_dtoa_r+0xc80>)
    dfb4:	movs	r1, #2
    dfb6:	lsls	r0, r3, #31
    dfb8:	bpl.n	dfc4 <_dtoa_r+0xa7c>
    dfba:	vldr	d7, [r2]
    dfbe:	adds	r1, #1
    dfc0:	vmul.f64	d4, d4, d7
    dfc4:	asrs	r3, r3, #1
    dfc6:	add.w	r2, r2, #8
    dfca:	bne.n	dfb6 <_dtoa_r+0xa6e>
    dfcc:	b.n	db52 <_dtoa_r+0x60a>
    dfce:	ldr	r1, [sp, #32]
    dfd0:	movs	r2, #48	; 0x30
    dfd2:	strb	r2, [r1, #0]
    dfd4:	ldr	r2, [sp, #8]
    dfd6:	ldrb.w	r0, [fp, #-1]
    dfda:	adds	r2, #1
    dfdc:	str	r2, [sp, #8]
    dfde:	b.n	d810 <_dtoa_r+0x2c8>
    dfe0:	ldr	r1, [r6, #4]
    dfe2:	mov	r0, r4
    dfe4:	bl	ec38 <_Balloc>
    dfe8:	ldr	r3, [r6, #16]
    dfea:	adds	r2, r3, #2
    dfec:	mov	r8, r0
    dfee:	lsls	r2, r2, #2
    dff0:	add.w	r1, r6, #12
    dff4:	adds	r0, #12
    dff6:	bl	68c4 <memcpy>
    dffa:	mov	r1, r8
    dffc:	movs	r2, #1
    dffe:	mov	r0, r4
    e000:	bl	f030 <__lshift>
    e004:	mov	r8, r0
    e006:	b.n	dd06 <_dtoa_r+0x7be>
    e008:	cmp	r2, #57	; 0x39
    e00a:	beq.w	e110 <_dtoa_r+0xbc8>
    e00e:	add.w	r9, r2, #1
    e012:	mov	sl, r6
    e014:	strb.w	r9, [r7]
    e018:	add.w	fp, r7, #1
    e01c:	mov	r6, r8
    e01e:	str	r5, [sp, #28]
    e020:	b.n	da74 <_dtoa_r+0x52c>
    e022:	mov	sl, r6
    e024:	mov	r9, r2
    e026:	mov	r6, r8
    e028:	b.n	da3a <_dtoa_r+0x4f2>
    e02a:	ldr	r0, [pc, #408]	; (e1c4 <_dtoa_r+0xc7c>)
    e02c:	vcvt.s32.f64	s12, d4
    e030:	subs	r5, r1, #1
    e032:	add.w	r0, r0, r5, lsl #3
    e036:	vmov	d7, r2, r3
    e03a:	vldr	d3, [r0]
    e03e:	vmov	r3, s12
    e042:	vmul.f64	d3, d3, d7
    e046:	ldr	r0, [sp, #32]
    e048:	adds	r3, #48	; 0x30
    e04a:	cmp	r1, #1
    e04c:	vcvt.f64.s32	d6, s12
    e050:	strb	r3, [r0, #0]
    e052:	add.w	fp, r0, #1
    e056:	vsub.f64	d7, d4, d6
    e05a:	beq.n	e086 <_dtoa_r+0xb3e>
    e05c:	vmov.f64	d5, #36	; 0x41200000  10.0
    e060:	ldr	r3, [sp, #32]
    e062:	add	r1, r3
    e064:	mov	r3, fp
    e066:	vmul.f64	d7, d7, d5
    e06a:	vcvt.s32.f64	s12, d7
    e06e:	vmov	r2, s12
    e072:	adds	r2, #48	; 0x30
    e074:	strb.w	r2, [r3], #1
    e078:	cmp	r1, r3
    e07a:	vcvt.f64.s32	d6, s12
    e07e:	vsub.f64	d7, d7, d6
    e082:	bne.n	e066 <_dtoa_r+0xb1e>
    e084:	add	fp, r5
    e086:	vmov.f64	d6, #96	; 0x3f000000  0.5
    e08a:	vadd.f64	d5, d3, d6
    e08e:	vcmpe.f64	d5, d7
    e092:	vmrs	APSR_nzcv, fpscr
    e096:	bpl.n	e120 <_dtoa_r+0xbd8>
    e098:	str	r6, [sp, #8]
    e09a:	ldrb.w	r0, [fp, #-1]
    e09e:	b.w	d7f6 <_dtoa_r+0x2ae>
    e0a2:	movs	r3, #0
    e0a4:	str	r3, [sp, #20]
    e0a6:	mov	r6, r3
    e0a8:	b.n	de58 <_dtoa_r+0x910>
    e0aa:	subs	r3, r3, r7
    e0ac:	str	r3, [sp, #40]	; 0x28
    e0ae:	movs	r3, #0
    e0b0:	b.w	d866 <_dtoa_r+0x31e>
    e0b4:	ldr	r2, [sp, #20]
    e0b6:	ldr	r3, [sp, #64]	; 0x40
    e0b8:	str	r2, [sp, #56]	; 0x38
    e0ba:	ldr	r2, [sp, #24]
    e0bc:	str	r2, [sp, #40]	; 0x28
    e0be:	rsb	r3, r3, #54	; 0x36
    e0c2:	b.w	d866 <_dtoa_r+0x31e>
    e0c6:	movs	r3, #0
    e0c8:	str	r3, [sp, #28]
    e0ca:	b.n	deac <_dtoa_r+0x964>
    e0cc:	vldr	d4, [sp, #56]	; 0x38
    e0d0:	movs	r1, #2
    e0d2:	b.n	db52 <_dtoa_r+0x60a>
    e0d4:	cmp	r7, #0
    e0d6:	beq.w	deb8 <_dtoa_r+0x970>
    e0da:	ldr	r0, [sp, #52]	; 0x34
    e0dc:	cmp	r0, #0
    e0de:	ble.w	df84 <_dtoa_r+0xa3c>
    e0e2:	vmov.f64	d5, #36	; 0x41200000  10.0
    e0e6:	vmov.f64	d7, #28	; 0x40e00000  7.0
    e0ea:	adds	r1, #1
    e0ec:	vmov	s13, r1
    e0f0:	vmul.f64	d4, d4, d5
    e0f4:	ldr	r3, [sp, #8]
    e0f6:	vcvt.f64.s32	d6, s13
    e0fa:	subs	r6, r3, #1
    e0fc:	vfma.f64	d7, d4, d6
    e100:	vmov	r2, r3, d7
    e104:	mov	r1, r0
    e106:	sub.w	r3, r3, #54525952	; 0x3400000
    e10a:	b.n	db88 <_dtoa_r+0x640>
    e10c:	str	r5, [sp, #28]
    e10e:	b.n	dc8e <_dtoa_r+0x746>
    e110:	movs	r2, #57	; 0x39
    e112:	mov	sl, r6
    e114:	str	r5, [sp, #28]
    e116:	mov	r6, r8
    e118:	strb	r2, [r7, #0]
    e11a:	add.w	fp, r7, #1
    e11e:	b.n	da56 <_dtoa_r+0x50e>
    e120:	vsub.f64	d6, d6, d3
    e124:	vcmpe.f64	d6, d7
    e128:	vmrs	APSR_nzcv, fpscr
    e12c:	bgt.n	e132 <_dtoa_r+0xbea>
    e12e:	b.n	df84 <_dtoa_r+0xa3c>
    e130:	mov	fp, r2
    e132:	ldrb.w	r3, [fp, #-1]
    e136:	cmp	r3, #48	; 0x30
    e138:	add.w	r2, fp, #4294967295
    e13c:	beq.n	e130 <_dtoa_r+0xbe8>
    e13e:	b.n	dc36 <_dtoa_r+0x6ee>
    e140:	str	r6, [sp, #8]
    e142:	b.w	d7f6 <_dtoa_r+0x2ae>
    e146:	str	r3, [sp, #28]
    e148:	b.n	deac <_dtoa_r+0x964>
    e14a:	cmp.w	sl, #0
    e14e:	bne.w	dcca <_dtoa_r+0x782>
    e152:	b.n	de86 <_dtoa_r+0x93e>
    e154:	cmp	r2, #57	; 0x39
    e156:	mov	fp, r9
    e158:	mov	r9, r2
    e15a:	beq.n	e110 <_dtoa_r+0xbc8>
    e15c:	cmp.w	fp, #0
    e160:	bgt.w	df56 <_dtoa_r+0xa0e>
    e164:	b.n	df5a <_dtoa_r+0xa12>
    e166:	bne.w	df5a <_dtoa_r+0xa12>
    e16a:	tst.w	r9, #1
    e16e:	beq.w	df5a <_dtoa_r+0xa12>
    e172:	b.n	df4e <_dtoa_r+0xa06>
    e174:	ldr	r3, [sp, #4]
    e176:	cmp	r3, #2
    e178:	bgt.n	e18c <_dtoa_r+0xc44>
    e17a:	ldr	r7, [sp, #52]	; 0x34
    e17c:	b.n	d9f4 <_dtoa_r+0x4ac>
    e17e:	movs	r1, #2
    e180:	b.n	db52 <_dtoa_r+0x60a>
    e182:	ldr	r3, [sp, #4]
    e184:	cmp	r3, #2
    e186:	bgt.n	e18c <_dtoa_r+0xc44>
    e188:	ldr	r7, [sp, #52]	; 0x34
    e18a:	b.n	dcea <_dtoa_r+0x7a2>
    e18c:	ldr	r7, [sp, #52]	; 0x34
    e18e:	b.n	de34 <_dtoa_r+0x8ec>
    e190:	movs	r3, #1
    e192:	str	r3, [sp, #56]	; 0x38
    e194:	b.w	d6da <_dtoa_r+0x192>
    e198:	beq.w	d9ba <_dtoa_r+0x472>
    e19c:	rsb	r0, r0, #60	; 0x3c
    e1a0:	b.n	d9ac <_dtoa_r+0x464>
    e1a2:	movs	r5, #0
    e1a4:	str	r5, [r4, #68]	; 0x44
    e1a6:	mov	r1, r5
    e1a8:	mov	r0, r4
    e1aa:	bl	ec38 <_Balloc>
    e1ae:	mov.w	r7, #4294967295
    e1b2:	movs	r3, #1
    e1b4:	str	r0, [sp, #32]
    e1b6:	mov	r8, r5
    e1b8:	str	r0, [r4, #64]	; 0x40
    e1ba:	str	r7, [sp, #52]	; 0x34
    e1bc:	str	r3, [sp, #36]	; 0x24
    e1be:	b.w	d742 <_dtoa_r+0x1fa>
    e1c2:	nop
    e1c4:	.word	0x200002a8
    e1c8:	.word	0x20000280

0000e1cc <_malloc_trim_r>:
    e1cc:	push	{r3, r4, r5, r6, r7, lr}
    e1ce:	ldr	r7, [pc, #140]	; (e25c <_malloc_trim_r+0x90>)
    e1d0:	mov	r4, r1
    e1d2:	mov	r6, r0
    e1d4:	bl	97c8 <__malloc_lock>
    e1d8:	ldr	r3, [r7, #8]
    e1da:	ldr	r5, [r3, #4]
    e1dc:	bic.w	r5, r5, #3
    e1e0:	subs	r1, r5, r4
    e1e2:	addw	r1, r1, #4079	; 0xfef
    e1e6:	bic.w	r1, r1, #4080	; 0xff0
    e1ea:	bic.w	r1, r1, #15
    e1ee:	sub.w	r4, r1, #4096	; 0x1000
    e1f2:	cmp.w	r4, #4096	; 0x1000
    e1f6:	blt.n	e208 <_malloc_trim_r+0x3c>
    e1f8:	movs	r1, #0
    e1fa:	mov	r0, r6
    e1fc:	bl	9bb0 <_sbrk_r>
    e200:	ldr	r3, [r7, #8]
    e202:	add	r3, r5
    e204:	cmp	r0, r3
    e206:	beq.n	e212 <_malloc_trim_r+0x46>
    e208:	mov	r0, r6
    e20a:	bl	97cc <__malloc_unlock>
    e20e:	movs	r0, #0
    e210:	pop	{r3, r4, r5, r6, r7, pc}
    e212:	negs	r1, r4
    e214:	mov	r0, r6
    e216:	bl	9bb0 <_sbrk_r>
    e21a:	adds	r0, #1
    e21c:	beq.n	e23a <_malloc_trim_r+0x6e>
    e21e:	ldr	r3, [pc, #64]	; (e260 <_malloc_trim_r+0x94>)
    e220:	ldr	r2, [r7, #8]
    e222:	ldr	r1, [r3, #0]
    e224:	subs	r5, r5, r4
    e226:	orr.w	r5, r5, #1
    e22a:	mov	r0, r6
    e22c:	subs	r1, r1, r4
    e22e:	str	r5, [r2, #4]
    e230:	str	r1, [r3, #0]
    e232:	bl	97cc <__malloc_unlock>
    e236:	movs	r0, #1
    e238:	pop	{r3, r4, r5, r6, r7, pc}
    e23a:	movs	r1, #0
    e23c:	mov	r0, r6
    e23e:	bl	9bb0 <_sbrk_r>
    e242:	ldr	r2, [r7, #8]
    e244:	subs	r3, r0, r2
    e246:	cmp	r3, #15
    e248:	ble.n	e208 <_malloc_trim_r+0x3c>
    e24a:	ldr	r4, [pc, #24]	; (e264 <_malloc_trim_r+0x98>)
    e24c:	ldr	r1, [pc, #16]	; (e260 <_malloc_trim_r+0x94>)
    e24e:	ldr	r4, [r4, #0]
    e250:	orr.w	r3, r3, #1
    e254:	subs	r0, r0, r4
    e256:	str	r3, [r2, #4]
    e258:	str	r0, [r1, #0]
    e25a:	b.n	e208 <_malloc_trim_r+0x3c>
    e25c:	.word	0x20001d4c
    e260:	.word	0x20017438
    e264:	.word	0x20002154

0000e268 <_free_r>:
    e268:	cmp	r1, #0
    e26a:	beq.n	e2f8 <_free_r+0x90>
    e26c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e270:	mov	r5, r1
    e272:	mov	r8, r0
    e274:	bl	97c8 <__malloc_lock>
    e278:	ldr.w	r7, [r5, #-4]
    e27c:	ldr	r1, [pc, #424]	; (e428 <_free_r+0x1c0>)
    e27e:	bic.w	r3, r7, #1
    e282:	sub.w	r4, r5, #8
    e286:	adds	r2, r4, r3
    e288:	ldr	r6, [r1, #8]
    e28a:	ldr	r0, [r2, #4]
    e28c:	cmp	r2, r6
    e28e:	bic.w	r0, r0, #3
    e292:	beq.n	e35a <_free_r+0xf2>
    e294:	lsls	r6, r7, #31
    e296:	str	r0, [r2, #4]
    e298:	bmi.n	e2b2 <_free_r+0x4a>
    e29a:	ldr.w	r7, [r5, #-8]
    e29e:	subs	r4, r4, r7
    e2a0:	add.w	lr, r1, #8
    e2a4:	ldr	r5, [r4, #8]
    e2a6:	cmp	r5, lr
    e2a8:	add	r3, r7
    e2aa:	beq.n	e38c <_free_r+0x124>
    e2ac:	ldr	r7, [r4, #12]
    e2ae:	str	r7, [r5, #12]
    e2b0:	str	r5, [r7, #8]
    e2b2:	adds	r5, r2, r0
    e2b4:	ldr	r5, [r5, #4]
    e2b6:	lsls	r5, r5, #31
    e2b8:	bpl.n	e340 <_free_r+0xd8>
    e2ba:	orr.w	r2, r3, #1
    e2be:	str	r2, [r4, #4]
    e2c0:	str	r3, [r4, r3]
    e2c2:	cmp.w	r3, #512	; 0x200
    e2c6:	bcs.n	e2fa <_free_r+0x92>
    e2c8:	lsrs	r3, r3, #3
    e2ca:	adds	r2, r3, #1
    e2cc:	ldr	r5, [r1, #4]
    e2ce:	ldr.w	r7, [r1, r2, lsl #3]
    e2d2:	str	r7, [r4, #8]
    e2d4:	movs	r0, #1
    e2d6:	asrs	r3, r3, #2
    e2d8:	lsl.w	r3, r0, r3
    e2dc:	add.w	r0, r1, r2, lsl #3
    e2e0:	orrs	r5, r3
    e2e2:	subs	r0, #8
    e2e4:	str	r0, [r4, #12]
    e2e6:	str	r5, [r1, #4]
    e2e8:	str.w	r4, [r1, r2, lsl #3]
    e2ec:	str	r4, [r7, #12]
    e2ee:	mov	r0, r8
    e2f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e2f4:	b.w	97cc <__malloc_unlock>
    e2f8:	bx	lr
    e2fa:	lsrs	r2, r3, #9
    e2fc:	cmp	r2, #4
    e2fe:	bhi.n	e3a8 <_free_r+0x140>
    e300:	lsrs	r2, r3, #6
    e302:	add.w	r7, r2, #57	; 0x39
    e306:	lsls	r7, r7, #1
    e308:	add.w	r5, r2, #56	; 0x38
    e30c:	add.w	r0, r1, r7, lsl #2
    e310:	ldr.w	r2, [r1, r7, lsl #2]
    e314:	ldr	r1, [pc, #272]	; (e428 <_free_r+0x1c0>)
    e316:	subs	r0, #8
    e318:	cmp	r0, r2
    e31a:	beq.n	e3b8 <_free_r+0x150>
    e31c:	ldr	r1, [r2, #4]
    e31e:	bic.w	r1, r1, #3
    e322:	cmp	r3, r1
    e324:	bcs.n	e32c <_free_r+0xc4>
    e326:	ldr	r2, [r2, #8]
    e328:	cmp	r0, r2
    e32a:	bne.n	e31c <_free_r+0xb4>
    e32c:	ldr	r0, [r2, #12]
    e32e:	str	r0, [r4, #12]
    e330:	str	r2, [r4, #8]
    e332:	str	r4, [r0, #8]
    e334:	str	r4, [r2, #12]
    e336:	mov	r0, r8
    e338:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e33c:	b.w	97cc <__malloc_unlock>
    e340:	ldr	r5, [r2, #8]
    e342:	ldr	r7, [pc, #232]	; (e42c <_free_r+0x1c4>)
    e344:	cmp	r5, r7
    e346:	add	r3, r0
    e348:	beq.n	e3ca <_free_r+0x162>
    e34a:	ldr	r0, [r2, #12]
    e34c:	str	r0, [r5, #12]
    e34e:	orr.w	r2, r3, #1
    e352:	str	r5, [r0, #8]
    e354:	str	r2, [r4, #4]
    e356:	str	r3, [r4, r3]
    e358:	b.n	e2c2 <_free_r+0x5a>
    e35a:	lsls	r7, r7, #31
    e35c:	add	r3, r0
    e35e:	bmi.n	e370 <_free_r+0x108>
    e360:	ldr.w	r2, [r5, #-8]
    e364:	subs	r4, r4, r2
    e366:	add	r3, r2
    e368:	ldr	r0, [r4, #8]
    e36a:	ldr	r2, [r4, #12]
    e36c:	str	r2, [r0, #12]
    e36e:	str	r0, [r2, #8]
    e370:	ldr	r2, [pc, #188]	; (e430 <_free_r+0x1c8>)
    e372:	ldr	r2, [r2, #0]
    e374:	orr.w	r0, r3, #1
    e378:	cmp	r3, r2
    e37a:	str	r0, [r4, #4]
    e37c:	str	r4, [r1, #8]
    e37e:	bcc.n	e2ee <_free_r+0x86>
    e380:	ldr	r3, [pc, #176]	; (e434 <_free_r+0x1cc>)
    e382:	mov	r0, r8
    e384:	ldr	r1, [r3, #0]
    e386:	bl	e1cc <_malloc_trim_r>
    e38a:	b.n	e2ee <_free_r+0x86>
    e38c:	adds	r1, r2, r0
    e38e:	ldr	r1, [r1, #4]
    e390:	lsls	r1, r1, #31
    e392:	bmi.n	e41e <_free_r+0x1b6>
    e394:	ldr	r1, [r2, #8]
    e396:	ldr	r2, [r2, #12]
    e398:	str	r2, [r1, #12]
    e39a:	add	r3, r0
    e39c:	orr.w	r0, r3, #1
    e3a0:	str	r1, [r2, #8]
    e3a2:	str	r0, [r4, #4]
    e3a4:	str	r3, [r4, r3]
    e3a6:	b.n	e2ee <_free_r+0x86>
    e3a8:	cmp	r2, #20
    e3aa:	bhi.n	e3dc <_free_r+0x174>
    e3ac:	add.w	r7, r2, #92	; 0x5c
    e3b0:	lsls	r7, r7, #1
    e3b2:	add.w	r5, r2, #91	; 0x5b
    e3b6:	b.n	e30c <_free_r+0xa4>
    e3b8:	asrs	r2, r5, #2
    e3ba:	ldr	r3, [r1, #4]
    e3bc:	movs	r5, #1
    e3be:	lsl.w	r2, r5, r2
    e3c2:	orrs	r3, r2
    e3c4:	str	r3, [r1, #4]
    e3c6:	mov	r2, r0
    e3c8:	b.n	e32e <_free_r+0xc6>
    e3ca:	orr.w	r2, r3, #1
    e3ce:	str	r4, [r1, #20]
    e3d0:	str	r4, [r1, #16]
    e3d2:	str	r5, [r4, #12]
    e3d4:	str	r5, [r4, #8]
    e3d6:	str	r2, [r4, #4]
    e3d8:	str	r3, [r4, r3]
    e3da:	b.n	e2ee <_free_r+0x86>
    e3dc:	cmp	r2, #84	; 0x54
    e3de:	bhi.n	e3ee <_free_r+0x186>
    e3e0:	lsrs	r2, r3, #12
    e3e2:	add.w	r7, r2, #111	; 0x6f
    e3e6:	lsls	r7, r7, #1
    e3e8:	add.w	r5, r2, #110	; 0x6e
    e3ec:	b.n	e30c <_free_r+0xa4>
    e3ee:	cmp.w	r2, #340	; 0x154
    e3f2:	bhi.n	e402 <_free_r+0x19a>
    e3f4:	lsrs	r2, r3, #15
    e3f6:	add.w	r7, r2, #120	; 0x78
    e3fa:	lsls	r7, r7, #1
    e3fc:	add.w	r5, r2, #119	; 0x77
    e400:	b.n	e30c <_free_r+0xa4>
    e402:	movw	r0, #1364	; 0x554
    e406:	cmp	r2, r0
    e408:	bhi.n	e418 <_free_r+0x1b0>
    e40a:	lsrs	r2, r3, #18
    e40c:	add.w	r7, r2, #125	; 0x7d
    e410:	lsls	r7, r7, #1
    e412:	add.w	r5, r2, #124	; 0x7c
    e416:	b.n	e30c <_free_r+0xa4>
    e418:	movs	r7, #254	; 0xfe
    e41a:	movs	r5, #126	; 0x7e
    e41c:	b.n	e30c <_free_r+0xa4>
    e41e:	orr.w	r2, r3, #1
    e422:	str	r2, [r4, #4]
    e424:	str	r3, [r4, r3]
    e426:	b.n	e2ee <_free_r+0x86>
    e428:	.word	0x20001d4c
    e42c:	.word	0x20001d54
    e430:	.word	0x20002158
    e434:	.word	0x20017468

0000e438 <rshift>:
    e438:	ldr	r2, [r0, #16]
    e43a:	asrs	r3, r1, #5
    e43c:	cmp	r3, r2
    e43e:	bge.n	e49e <rshift+0x66>
    e440:	push	{r4, r5, r6, r7, lr}
    e442:	ands.w	r1, r1, #31
    e446:	add.w	r6, r0, #20
    e44a:	add.w	r2, r6, r2, lsl #2
    e44e:	add.w	lr, r6, r3, lsl #2
    e452:	beq.n	e4a8 <rshift+0x70>
    e454:	ldr.w	r3, [r6, r3, lsl #2]
    e458:	add.w	r5, lr, #4
    e45c:	cmp	r2, r5
    e45e:	lsr.w	r4, r3, r1
    e462:	rsb	ip, r1, #32
    e466:	bls.n	e4dc <rshift+0xa4>
    e468:	add.w	r7, r0, #16
    e46c:	ldr	r3, [r5, #0]
    e46e:	lsl.w	r3, r3, ip
    e472:	orrs	r3, r4
    e474:	str.w	r3, [r7, #4]!
    e478:	ldr.w	r3, [r5], #4
    e47c:	cmp	r2, r5
    e47e:	lsr.w	r4, r3, r1
    e482:	bhi.n	e46c <rshift+0x34>
    e484:	rsb	r2, lr, r2
    e488:	subs	r2, #5
    e48a:	bic.w	r2, r2, #3
    e48e:	adds	r2, #4
    e490:	add	r2, r6
    e492:	str	r4, [r2, #0]
    e494:	cbz	r4, e498 <rshift+0x60>
    e496:	adds	r2, #4
    e498:	subs	r3, r2, r6
    e49a:	asrs	r3, r3, #2
    e49c:	b.n	e4cc <rshift+0x94>
    e49e:	movs	r3, #0
    e4a0:	str	r3, [r0, #16]
    e4a2:	movs	r3, #0
    e4a4:	str	r3, [r0, #20]
    e4a6:	bx	lr
    e4a8:	cmp	r2, lr
    e4aa:	bls.n	e4d2 <rshift+0x9a>
    e4ac:	add.w	r4, r0, #16
    e4b0:	mov	r1, lr
    e4b2:	ldr.w	r5, [r1], #4
    e4b6:	str.w	r5, [r4, #4]!
    e4ba:	cmp	r2, r1
    e4bc:	bhi.n	e4b2 <rshift+0x7a>
    e4be:	mvn.w	r3, lr
    e4c2:	add	r3, r2
    e4c4:	bic.w	r3, r3, #3
    e4c8:	adds	r3, #4
    e4ca:	asrs	r3, r3, #2
    e4cc:	str	r3, [r0, #16]
    e4ce:	cbz	r3, e4d6 <rshift+0x9e>
    e4d0:	pop	{r4, r5, r6, r7, pc}
    e4d2:	movs	r3, #0
    e4d4:	str	r3, [r0, #16]
    e4d6:	movs	r3, #0
    e4d8:	str	r3, [r0, #20]
    e4da:	pop	{r4, r5, r6, r7, pc}
    e4dc:	mov	r2, r6
    e4de:	b.n	e492 <rshift+0x5a>

0000e4e0 <__gethex>:
    e4e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4e4:	sub	sp, #44	; 0x2c
    e4e6:	mov	r9, r1
    e4e8:	str	r0, [sp, #20]
    e4ea:	ldr	r0, [sp, #88]	; 0x58
    e4ec:	str	r2, [sp, #12]
    e4ee:	str	r3, [sp, #32]
    e4f0:	bl	ebbc <__localeconv_l>
    e4f4:	ldr	r3, [r0, #0]
    e4f6:	str	r3, [sp, #8]
    e4f8:	mov	r0, r3
    e4fa:	mov	r4, r3
    e4fc:	bl	9d40 <strlen>
    e500:	ldr.w	r3, [r9]
    e504:	str	r0, [sp, #0]
    e506:	ldrb	r2, [r3, #2]
    e508:	adds	r1, r4, r0
    e50a:	cmp	r2, #48	; 0x30
    e50c:	ldrb.w	fp, [r1, #-1]
    e510:	bne.w	e866 <__gethex+0x386>
    e514:	adds	r3, #3
    e516:	mov.w	r8, #0
    e51a:	mov	r4, r3
    e51c:	ldrb.w	r2, [r3], #1
    e520:	cmp	r2, #48	; 0x30
    e522:	add.w	r8, r8, #1
    e526:	beq.n	e51a <__gethex+0x3a>
    e528:	ldr	r6, [pc, #712]	; (e7f4 <__gethex+0x314>)
    e52a:	ldrb	r3, [r6, r2]
    e52c:	cmp	r3, #0
    e52e:	beq.w	e712 <__gethex+0x232>
    e532:	ldrb	r3, [r4, #0]
    e534:	mov.w	sl, #0
    e538:	ldrb	r3, [r6, r3]
    e53a:	mov	r5, sl
    e53c:	mov	r7, r4
    e53e:	cbz	r3, e54a <__gethex+0x6a>
    e540:	ldrb.w	r3, [r7, #1]!
    e544:	ldrb	r3, [r6, r3]
    e546:	cmp	r3, #0
    e548:	bne.n	e540 <__gethex+0x60>
    e54a:	ldr	r2, [sp, #0]
    e54c:	ldr	r1, [sp, #8]
    e54e:	mov	r0, r7
    e550:	bl	9e1c <strncmp>
    e554:	cmp	r0, #0
    e556:	beq.w	e67e <__gethex+0x19e>
    e55a:	ldrb	r3, [r7, #0]
    e55c:	cmp	r5, #0
    e55e:	beq.w	e844 <__gethex+0x364>
    e562:	subs	r5, r5, r7
    e564:	lsls	r2, r5, #2
    e566:	str	r2, [sp, #4]
    e568:	cmp	r3, #80	; 0x50
    e56a:	beq.w	e690 <__gethex+0x1b0>
    e56e:	cmp	r3, #112	; 0x70
    e570:	beq.w	e690 <__gethex+0x1b0>
    e574:	mov	r5, r7
    e576:	str.w	r7, [r9]
    e57a:	cmp.w	sl, #0
    e57e:	bne.w	e6f0 <__gethex+0x210>
    e582:	subs	r3, r5, r4
    e584:	subs	r3, #1
    e586:	cmp	r3, #7
    e588:	mov	r1, sl
    e58a:	ble.n	e596 <__gethex+0xb6>
    e58c:	asrs	r3, r3, #1
    e58e:	cmp	r3, #7
    e590:	add.w	r1, r1, #1
    e594:	bgt.n	e58c <__gethex+0xac>
    e596:	ldr	r0, [sp, #20]
    e598:	bl	ec38 <_Balloc>
    e59c:	mov	r3, r0
    e59e:	adds	r3, #20
    e5a0:	cmp	r5, r4
    e5a2:	str	r0, [sp, #16]
    e5a4:	str	r3, [sp, #28]
    e5a6:	bls.w	e950 <__gethex+0x470>
    e5aa:	mov	r9, r3
    e5ac:	ldr	r3, [sp, #0]
    e5ae:	mov.w	r8, #0
    e5b2:	rsb	r3, r3, #1
    e5b6:	mov	r7, r8
    e5b8:	str	r3, [sp, #24]
    e5ba:	b.n	e5dc <__gethex+0xfc>
    e5bc:	cmp	r7, #32
    e5be:	beq.w	e700 <__gethex+0x220>
    e5c2:	mov	r2, r7
    e5c4:	adds	r7, #4
    e5c6:	ldrb.w	r3, [r5, #-1]
    e5ca:	ldrb	r3, [r6, r3]
    e5cc:	mov	r5, sl
    e5ce:	and.w	r3, r3, #15
    e5d2:	lsls	r3, r2
    e5d4:	cmp	r5, r4
    e5d6:	orr.w	r8, r8, r3
    e5da:	bls.n	e608 <__gethex+0x128>
    e5dc:	ldrb.w	r3, [r5, #-1]
    e5e0:	cmp	r3, fp
    e5e2:	add.w	sl, r5, #4294967295
    e5e6:	bne.n	e5bc <__gethex+0xdc>
    e5e8:	ldr	r3, [sp, #24]
    e5ea:	add	r3, sl
    e5ec:	cmp	r3, r4
    e5ee:	bcc.n	e5bc <__gethex+0xdc>
    e5f0:	mov	r0, r3
    e5f2:	ldr	r2, [sp, #0]
    e5f4:	ldr	r1, [sp, #8]
    e5f6:	str	r3, [sp, #36]	; 0x24
    e5f8:	bl	9e1c <strncmp>
    e5fc:	ldr	r3, [sp, #36]	; 0x24
    e5fe:	cmp	r0, #0
    e600:	bne.n	e5bc <__gethex+0xdc>
    e602:	mov	r5, r3
    e604:	cmp	r5, r4
    e606:	bhi.n	e5dc <__gethex+0xfc>
    e608:	str.w	r8, [r9], #4
    e60c:	ldr	r3, [sp, #28]
    e60e:	ldr	r2, [sp, #16]
    e610:	rsb	r9, r3, r9
    e614:	mov.w	r3, r9, asr #2
    e618:	str	r3, [r2, #16]
    e61a:	mov	r0, r8
    e61c:	mov.w	r9, r3, lsl #5
    e620:	bl	edb0 <__hi0bits>
    e624:	ldr	r3, [sp, #12]
    e626:	ldr	r6, [r3, #0]
    e628:	rsb	r0, r0, r9
    e62c:	cmp	r0, r6
    e62e:	bgt.w	e7f8 <__gethex+0x318>
    e632:	blt.w	e848 <__gethex+0x368>
    e636:	movs	r7, #0
    e638:	ldr	r3, [sp, #12]
    e63a:	ldr	r2, [sp, #4]
    e63c:	ldr	r3, [r3, #8]
    e63e:	cmp	r2, r3
    e640:	bgt.w	e772 <__gethex+0x292>
    e644:	ldr	r0, [sp, #12]
    e646:	ldr	r1, [sp, #4]
    e648:	ldr	r3, [r0, #4]
    e64a:	cmp	r1, r3
    e64c:	bge.w	e7ba <__gethex+0x2da>
    e650:	subs	r5, r3, r1
    e652:	cmp	r6, r5
    e654:	bgt.w	e876 <__gethex+0x396>
    e658:	ldr	r2, [r0, #12]
    e65a:	cmp	r2, #2
    e65c:	beq.w	e95e <__gethex+0x47e>
    e660:	cmp	r2, #3
    e662:	beq.w	e91e <__gethex+0x43e>
    e666:	cmp	r2, #1
    e668:	beq.w	e966 <__gethex+0x486>
    e66c:	ldr	r0, [sp, #20]
    e66e:	ldr	r1, [sp, #16]
    e670:	bl	ec84 <_Bfree>
    e674:	ldr	r2, [sp, #80]	; 0x50
    e676:	movs	r3, #0
    e678:	str	r3, [r2, #0]
    e67a:	movs	r0, #80	; 0x50
    e67c:	b.n	e6fa <__gethex+0x21a>
    e67e:	cmp	r5, #0
    e680:	beq.w	e8b6 <__gethex+0x3d6>
    e684:	ldrb	r3, [r7, #0]
    e686:	b.n	e562 <__gethex+0x82>
    e688:	movs	r3, #0
    e68a:	str	r3, [sp, #4]
    e68c:	mov.w	sl, #1
    e690:	ldrb	r3, [r7, #1]
    e692:	cmp	r3, #43	; 0x2b
    e694:	beq.w	e7f0 <__gethex+0x310>
    e698:	cmp	r3, #45	; 0x2d
    e69a:	beq.n	e788 <__gethex+0x2a8>
    e69c:	adds	r1, r7, #1
    e69e:	movs	r5, #0
    e6a0:	ldrb	r3, [r6, r3]
    e6a2:	ldr	r0, [pc, #336]	; (e7f4 <__gethex+0x314>)
    e6a4:	subs	r2, r3, #1
    e6a6:	cmp	r2, #24
    e6a8:	bhi.w	e574 <__gethex+0x94>
    e6ac:	ldrb	r2, [r1, #1]
    e6ae:	ldrb	r2, [r0, r2]
    e6b0:	subs	r0, r2, #1
    e6b2:	cmp	r0, #24
    e6b4:	sub.w	r3, r3, #16
    e6b8:	add.w	r1, r1, #1
    e6bc:	bhi.n	e6d6 <__gethex+0x1f6>
    e6be:	ldrb.w	r0, [r1, #1]!
    e6c2:	add.w	r3, r3, r3, lsl #2
    e6c6:	add.w	r3, r2, r3, lsl #1
    e6ca:	ldrb	r2, [r6, r0]
    e6cc:	subs	r0, r2, #1
    e6ce:	cmp	r0, #24
    e6d0:	sub.w	r3, r3, #16
    e6d4:	bls.n	e6be <__gethex+0x1de>
    e6d6:	cbz	r5, e6da <__gethex+0x1fa>
    e6d8:	negs	r3, r3
    e6da:	ldr	r2, [sp, #4]
    e6dc:	mov	r5, r7
    e6de:	add	r2, r3
    e6e0:	mov	r7, r1
    e6e2:	str	r2, [sp, #4]
    e6e4:	str.w	r7, [r9]
    e6e8:	cmp.w	sl, #0
    e6ec:	beq.w	e582 <__gethex+0xa2>
    e6f0:	cmp.w	r8, #0
    e6f4:	ite	eq
    e6f6:	moveq	r0, #6
    e6f8:	movne	r0, #0
    e6fa:	add	sp, #44	; 0x2c
    e6fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e700:	str.w	r8, [r9]
    e704:	mov.w	r8, #0
    e708:	add.w	r9, r9, #4
    e70c:	mov	r2, r8
    e70e:	movs	r7, #4
    e710:	b.n	e5c6 <__gethex+0xe6>
    e712:	ldr	r5, [sp, #0]
    e714:	ldr	r1, [sp, #8]
    e716:	mov	r2, r5
    e718:	mov	r0, r4
    e71a:	bl	9e1c <strncmp>
    e71e:	cmp	r0, #0
    e720:	beq.n	e790 <__gethex+0x2b0>
    e722:	ldrb	r3, [r4, #0]
    e724:	mov	r7, r4
    e726:	cmp	r3, #80	; 0x50
    e728:	beq.n	e688 <__gethex+0x1a8>
    e72a:	cmp	r3, #112	; 0x70
    e72c:	beq.n	e688 <__gethex+0x1a8>
    e72e:	str.w	r7, [r9]
    e732:	b.n	e6f0 <__gethex+0x210>
    e734:	ldr	r3, [sp, #16]
    e736:	ldr	r3, [r3, #8]
    e738:	cmp	r7, r3
    e73a:	bge.w	e9a6 <__gethex+0x4c6>
    e73e:	mov	r3, r7
    e740:	ldr	r0, [sp, #16]
    e742:	add.w	r2, r0, r3, lsl #2
    e746:	movs	r1, #1
    e748:	adds	r3, #1
    e74a:	cmp	r4, #2
    e74c:	str	r3, [r0, #16]
    e74e:	str	r1, [r2, #20]
    e750:	beq.w	e984 <__gethex+0x4a4>
    e754:	cmp	r7, r3
    e756:	bge.w	e910 <__gethex+0x430>
    e75a:	movs	r1, #1
    e75c:	ldr	r0, [sp, #16]
    e75e:	bl	e438 <rshift>
    e762:	ldr	r3, [sp, #12]
    e764:	ldr	r2, [sp, #4]
    e766:	ldr	r3, [r3, #8]
    e768:	adds	r2, #1
    e76a:	cmp	r2, r3
    e76c:	str	r2, [sp, #4]
    e76e:	ble.w	e916 <__gethex+0x436>
    e772:	ldr	r0, [sp, #20]
    e774:	ldr	r1, [sp, #16]
    e776:	bl	ec84 <_Bfree>
    e77a:	ldr	r2, [sp, #80]	; 0x50
    e77c:	movs	r3, #0
    e77e:	movs	r0, #163	; 0xa3
    e780:	str	r3, [r2, #0]
    e782:	add	sp, #44	; 0x2c
    e784:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e788:	movs	r5, #1
    e78a:	ldrb	r3, [r7, #2]
    e78c:	adds	r1, r7, #2
    e78e:	b.n	e6a0 <__gethex+0x1c0>
    e790:	ldrb	r2, [r4, r5]
    e792:	ldrb	r3, [r6, r2]
    e794:	adds	r7, r4, r5
    e796:	cmp	r3, #0
    e798:	beq.n	e86e <__gethex+0x38e>
    e79a:	cmp	r2, #48	; 0x30
    e79c:	mov	r4, r7
    e79e:	bne.n	e7aa <__gethex+0x2ca>
    e7a0:	ldrb.w	r3, [r4, #1]!
    e7a4:	cmp	r3, #48	; 0x30
    e7a6:	beq.n	e7a0 <__gethex+0x2c0>
    e7a8:	ldrb	r3, [r6, r3]
    e7aa:	clz	sl, r3
    e7ae:	mov	r5, r7
    e7b0:	mov.w	sl, sl, lsr #5
    e7b4:	mov.w	r8, #1
    e7b8:	b.n	e53c <__gethex+0x5c>
    e7ba:	movs	r4, #1
    e7bc:	cbz	r7, e7d8 <__gethex+0x2f8>
    e7be:	ldr	r3, [sp, #12]
    e7c0:	ldr	r3, [r3, #12]
    e7c2:	cmp	r3, #2
    e7c4:	beq.w	e8d2 <__gethex+0x3f2>
    e7c8:	cmp	r3, #3
    e7ca:	beq.w	e8da <__gethex+0x3fa>
    e7ce:	cmp	r3, #1
    e7d0:	beq.w	e93e <__gethex+0x45e>
    e7d4:	orr.w	r4, r4, #16
    e7d8:	ldr	r3, [sp, #80]	; 0x50
    e7da:	mov	r2, r3
    e7dc:	ldr	r3, [sp, #16]
    e7de:	str	r3, [r2, #0]
    e7e0:	ldr	r3, [sp, #32]
    e7e2:	mov	r2, r3
    e7e4:	ldr	r3, [sp, #4]
    e7e6:	str	r3, [r2, #0]
    e7e8:	mov	r0, r4
    e7ea:	add	sp, #44	; 0x2c
    e7ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7f0:	movs	r5, #0
    e7f2:	b.n	e78a <__gethex+0x2aa>
    e7f4:	.word	0x2000051c
    e7f8:	subs	r4, r0, r6
    e7fa:	mov	r1, r4
    e7fc:	ldr	r0, [sp, #16]
    e7fe:	bl	f4bc <__any_on>
    e802:	cmp	r0, #0
    e804:	beq.n	e872 <__gethex+0x392>
    e806:	subs	r2, r4, #1
    e808:	asrs	r1, r2, #5
    e80a:	ldr	r0, [sp, #28]
    e80c:	and.w	r3, r2, #31
    e810:	ldr.w	r1, [r0, r1, lsl #2]
    e814:	movs	r7, #1
    e816:	lsl.w	r3, r7, r3
    e81a:	tst	r3, r1
    e81c:	beq.n	e834 <__gethex+0x354>
    e81e:	cmp	r2, r7
    e820:	ble.w	e95a <__gethex+0x47a>
    e824:	subs	r1, r4, #2
    e826:	ldr	r0, [sp, #16]
    e828:	bl	f4bc <__any_on>
    e82c:	cmp	r0, #0
    e82e:	beq.w	e95a <__gethex+0x47a>
    e832:	movs	r7, #3
    e834:	ldr	r3, [sp, #4]
    e836:	ldr	r0, [sp, #16]
    e838:	add	r3, r4
    e83a:	mov	r1, r4
    e83c:	str	r3, [sp, #4]
    e83e:	bl	e438 <rshift>
    e842:	b.n	e638 <__gethex+0x158>
    e844:	str	r5, [sp, #4]
    e846:	b.n	e568 <__gethex+0x88>
    e848:	subs	r4, r6, r0
    e84a:	ldr	r1, [sp, #16]
    e84c:	ldr	r0, [sp, #20]
    e84e:	mov	r2, r4
    e850:	bl	f030 <__lshift>
    e854:	ldr	r3, [sp, #4]
    e856:	str	r0, [sp, #16]
    e858:	subs	r3, r3, r4
    e85a:	str	r3, [sp, #4]
    e85c:	mov	r3, r0
    e85e:	adds	r3, #20
    e860:	str	r3, [sp, #28]
    e862:	movs	r7, #0
    e864:	b.n	e638 <__gethex+0x158>
    e866:	adds	r4, r3, #2
    e868:	mov.w	r8, #0
    e86c:	b.n	e528 <__gethex+0x48>
    e86e:	mov	r3, r2
    e870:	b.n	e726 <__gethex+0x246>
    e872:	mov	r7, r0
    e874:	b.n	e834 <__gethex+0x354>
    e876:	subs	r4, r5, #1
    e878:	cmp	r7, #0
    e87a:	bne.n	e91a <__gethex+0x43a>
    e87c:	cbz	r4, e888 <__gethex+0x3a8>
    e87e:	mov	r1, r4
    e880:	ldr	r0, [sp, #16]
    e882:	bl	f4bc <__any_on>
    e886:	mov	r7, r0
    e888:	asrs	r3, r4, #5
    e88a:	ldr	r2, [sp, #28]
    e88c:	ldr	r0, [sp, #16]
    e88e:	ldr.w	r2, [r2, r3, lsl #2]
    e892:	and.w	r4, r4, #31
    e896:	movs	r3, #1
    e898:	lsl.w	r4, r3, r4
    e89c:	tst	r4, r2
    e89e:	mov	r1, r5
    e8a0:	it	ne
    e8a2:	orrne.w	r7, r7, #2
    e8a6:	bl	e438 <rshift>
    e8aa:	ldr	r3, [sp, #12]
    e8ac:	ldr	r3, [r3, #4]
    e8ae:	str	r3, [sp, #4]
    e8b0:	subs	r6, r6, r5
    e8b2:	movs	r4, #2
    e8b4:	b.n	e7bc <__gethex+0x2dc>
    e8b6:	ldr	r1, [sp, #0]
    e8b8:	ldrb	r3, [r7, r1]
    e8ba:	ldrb	r2, [r6, r3]
    e8bc:	adds	r5, r7, r1
    e8be:	mov	r7, r5
    e8c0:	cmp	r2, #0
    e8c2:	beq.w	e562 <__gethex+0x82>
    e8c6:	ldrb.w	r3, [r7, #1]!
    e8ca:	ldrb	r2, [r6, r3]
    e8cc:	cmp	r2, #0
    e8ce:	bne.n	e8c6 <__gethex+0x3e6>
    e8d0:	b.n	e562 <__gethex+0x82>
    e8d2:	ldr	r3, [sp, #84]	; 0x54
    e8d4:	rsb	r3, r3, #1
    e8d8:	str	r3, [sp, #84]	; 0x54
    e8da:	ldr	r3, [sp, #84]	; 0x54
    e8dc:	cmp	r3, #0
    e8de:	beq.w	e7d4 <__gethex+0x2f4>
    e8e2:	ldr	r3, [sp, #16]
    e8e4:	ldr	r5, [sp, #28]
    e8e6:	ldr	r7, [r3, #16]
    e8e8:	mov.w	r8, r7, lsl #2
    e8ec:	add.w	r0, r5, r8
    e8f0:	mov	r3, r5
    e8f2:	movs	r1, #0
    e8f4:	b.n	e900 <__gethex+0x420>
    e8f6:	str.w	r1, [r3], #4
    e8fa:	cmp	r0, r3
    e8fc:	bls.w	e734 <__gethex+0x254>
    e900:	ldr	r2, [r3, #0]
    e902:	cmp.w	r2, #4294967295
    e906:	beq.n	e8f6 <__gethex+0x416>
    e908:	adds	r2, #1
    e90a:	cmp	r4, #2
    e90c:	str	r2, [r3, #0]
    e90e:	beq.n	e984 <__gethex+0x4a4>
    e910:	ands.w	r6, r6, #31
    e914:	bne.n	e992 <__gethex+0x4b2>
    e916:	movs	r4, #33	; 0x21
    e918:	b.n	e7d8 <__gethex+0x2f8>
    e91a:	movs	r7, #1
    e91c:	b.n	e888 <__gethex+0x3a8>
    e91e:	ldr	r2, [sp, #84]	; 0x54
    e920:	cmp	r2, #0
    e922:	beq.w	e66c <__gethex+0x18c>
    e926:	ldr	r1, [sp, #32]
    e928:	str	r3, [r1, #0]
    e92a:	ldr	r3, [sp, #28]
    e92c:	ldr	r1, [sp, #16]
    e92e:	movs	r2, #1
    e930:	str	r2, [r1, #16]
    e932:	str	r2, [r3, #0]
    e934:	ldr	r3, [sp, #80]	; 0x50
    e936:	mov	r2, r3
    e938:	movs	r0, #98	; 0x62
    e93a:	str	r1, [r2, #0]
    e93c:	b.n	e6fa <__gethex+0x21a>
    e93e:	lsls	r2, r7, #30
    e940:	bpl.w	e7d4 <__gethex+0x2f4>
    e944:	ldr	r3, [sp, #28]
    e946:	ldr	r3, [r3, #0]
    e948:	orrs	r3, r7
    e94a:	lsls	r3, r3, #31
    e94c:	bmi.n	e8e2 <__gethex+0x402>
    e94e:	b.n	e7d4 <__gethex+0x2f4>
    e950:	ldr.w	r9, [sp, #28]
    e954:	mov.w	r8, #0
    e958:	b.n	e608 <__gethex+0x128>
    e95a:	movs	r7, #2
    e95c:	b.n	e834 <__gethex+0x354>
    e95e:	ldr	r2, [sp, #84]	; 0x54
    e960:	cmp	r2, #0
    e962:	beq.n	e926 <__gethex+0x446>
    e964:	b.n	e66c <__gethex+0x18c>
    e966:	cmp	r6, r5
    e968:	bne.w	e66c <__gethex+0x18c>
    e96c:	cmp	r6, #1
    e96e:	ble.n	e926 <__gethex+0x446>
    e970:	subs	r1, r6, #1
    e972:	ldr	r0, [sp, #16]
    e974:	bl	f4bc <__any_on>
    e978:	cmp	r0, #0
    e97a:	beq.w	e66c <__gethex+0x18c>
    e97e:	ldr	r3, [sp, #12]
    e980:	ldr	r3, [r3, #4]
    e982:	b.n	e926 <__gethex+0x446>
    e984:	ldr	r3, [sp, #12]
    e986:	ldr	r3, [r3, #0]
    e988:	subs	r3, #1
    e98a:	cmp	r6, r3
    e98c:	beq.n	e9d8 <__gethex+0x4f8>
    e98e:	movs	r4, #34	; 0x22
    e990:	b.n	e7d8 <__gethex+0x2f8>
    e992:	add	r5, r8
    e994:	rsb	r6, r6, #32
    e998:	ldr.w	r0, [r5, #-4]
    e99c:	bl	edb0 <__hi0bits>
    e9a0:	cmp	r0, r6
    e9a2:	bge.n	e916 <__gethex+0x436>
    e9a4:	b.n	e75a <__gethex+0x27a>
    e9a6:	ldr	r3, [sp, #16]
    e9a8:	ldr.w	r9, [sp, #20]
    e9ac:	ldr	r1, [r3, #4]
    e9ae:	mov	r0, r9
    e9b0:	adds	r1, #1
    e9b2:	bl	ec38 <_Balloc>
    e9b6:	ldr	r1, [sp, #16]
    e9b8:	ldr	r3, [r1, #16]
    e9ba:	adds	r2, r3, #2
    e9bc:	mov	r5, r0
    e9be:	lsls	r2, r2, #2
    e9c0:	adds	r1, #12
    e9c2:	adds	r0, #12
    e9c4:	bl	68c4 <memcpy>
    e9c8:	ldr	r1, [sp, #16]
    e9ca:	mov	r0, r9
    e9cc:	bl	ec84 <_Bfree>
    e9d0:	str	r5, [sp, #16]
    e9d2:	ldr	r3, [r5, #16]
    e9d4:	adds	r5, #20
    e9d6:	b.n	e740 <__gethex+0x260>
    e9d8:	asrs	r3, r6, #5
    e9da:	and.w	r6, r6, #31
    e9de:	ldr.w	r2, [r5, r3, lsl #2]
    e9e2:	movs	r3, #1
    e9e4:	lsls	r3, r6
    e9e6:	tst	r3, r2
    e9e8:	ite	ne
    e9ea:	movne	r4, #33	; 0x21
    e9ec:	moveq	r4, #34	; 0x22
    e9ee:	b.n	e7d8 <__gethex+0x2f8>

0000e9f0 <__match>:
    e9f0:	push	{r4, r5}
    e9f2:	ldr	r4, [r0, #0]
    e9f4:	b.n	ea08 <__match+0x18>
    e9f6:	ldrb.w	r3, [r4, #1]!
    e9fa:	sub.w	r5, r3, #65	; 0x41
    e9fe:	cmp	r5, #25
    ea00:	it	ls
    ea02:	addls	r3, #32
    ea04:	cmp	r3, r2
    ea06:	bne.n	ea1a <__match+0x2a>
    ea08:	ldrb.w	r2, [r1], #1
    ea0c:	cmp	r2, #0
    ea0e:	bne.n	e9f6 <__match+0x6>
    ea10:	adds	r4, #1
    ea12:	str	r4, [r0, #0]
    ea14:	movs	r0, #1
    ea16:	pop	{r4, r5}
    ea18:	bx	lr
    ea1a:	movs	r0, #0
    ea1c:	pop	{r4, r5}
    ea1e:	bx	lr

0000ea20 <__hexnan>:
    ea20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea24:	ldr	r3, [r1, #0]
    ea26:	ldr.w	r9, [pc, #372]	; eb9c <__hexnan+0x17c>
    ea2a:	sub	sp, #20
    ea2c:	asrs	r1, r3, #5
    ea2e:	add.w	r1, r2, r1, lsl #2
    ea32:	ands.w	r3, r3, #31
    ea36:	str	r1, [sp, #4]
    ea38:	itt	ne
    ea3a:	addne	r1, #4
    ea3c:	strne	r1, [sp, #4]
    ea3e:	ldr	r4, [sp, #4]
    ea40:	str	r0, [sp, #8]
    ea42:	str	r3, [sp, #12]
    ea44:	movs	r3, #0
    ea46:	mov	r1, r3
    ea48:	str.w	r3, [r4, #-4]
    ea4c:	mov	sl, r3
    ea4e:	mov	lr, r3
    ea50:	ldr	r3, [sp, #8]
    ea52:	sub.w	ip, r4, #4
    ea56:	ldr	r5, [r3, #0]
    ea58:	mov	r8, ip
    ea5a:	mov	r0, ip
    ea5c:	ldrb.w	r3, [r5, #1]!
    ea60:	cbz	r3, eaac <__hexnan+0x8c>
    ea62:	ldrb.w	r4, [r9, r3]
    ea66:	cmp	r4, #0
    ea68:	bne.n	eaf2 <__hexnan+0xd2>
    ea6a:	cmp	r3, #32
    ea6c:	bhi.n	eb2a <__hexnan+0x10a>
    ea6e:	cmp	lr, sl
    ea70:	ble.n	ea5c <__hexnan+0x3c>
    ea72:	cmp	r0, r8
    ea74:	bcs.n	ea9e <__hexnan+0x7e>
    ea76:	cmp	r1, #7
    ea78:	bgt.n	ea9e <__hexnan+0x7e>
    ea7a:	rsb	r1, r1, #8
    ea7e:	lsls	r1, r1, #2
    ea80:	ldr	r6, [r0, #0]
    ea82:	rsb	fp, r1, #32
    ea86:	mov	r3, r0
    ea88:	ldr	r7, [r3, #4]
    ea8a:	lsl.w	r4, r7, fp
    ea8e:	orrs	r4, r6
    ea90:	lsr.w	r6, r7, r1
    ea94:	str	r4, [r3, #0]
    ea96:	str.w	r6, [r3, #4]!
    ea9a:	cmp	r8, r3
    ea9c:	bhi.n	ea88 <__hexnan+0x68>
    ea9e:	cmp	r0, r2
    eaa0:	bhi.n	eb18 <__hexnan+0xf8>
    eaa2:	ldrb.w	r3, [r5, #1]!
    eaa6:	movs	r1, #8
    eaa8:	cmp	r3, #0
    eaaa:	bne.n	ea62 <__hexnan+0x42>
    eaac:	cmp.w	lr, #0
    eab0:	beq.n	eb2e <__hexnan+0x10e>
    eab2:	cmp	r0, r8
    eab4:	bcs.n	eaba <__hexnan+0x9a>
    eab6:	cmp	r1, #7
    eab8:	ble.n	eb74 <__hexnan+0x154>
    eaba:	cmp	r0, r2
    eabc:	bls.n	eb36 <__hexnan+0x116>
    eabe:	mov	r3, r2
    eac0:	ldr.w	r1, [r0], #4
    eac4:	str.w	r1, [r3], #4
    eac8:	cmp	ip, r0
    eaca:	bcs.n	eac0 <__hexnan+0xa0>
    eacc:	movs	r1, #0
    eace:	str.w	r1, [r3], #4
    ead2:	cmp	ip, r3
    ead4:	bcs.n	eace <__hexnan+0xae>
    ead6:	ldr	r3, [sp, #4]
    ead8:	ldr.w	r3, [r3, #-4]
    eadc:	cbnz	r3, eaea <__hexnan+0xca>
    eade:	cmp	r2, ip
    eae0:	beq.n	eb58 <__hexnan+0x138>
    eae2:	ldr.w	r3, [ip, #-4]!
    eae6:	cmp	r3, #0
    eae8:	beq.n	eade <__hexnan+0xbe>
    eaea:	movs	r0, #5
    eaec:	add	sp, #20
    eaee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eaf2:	adds	r1, #1
    eaf4:	cmp	r1, #8
    eaf6:	add.w	lr, lr, #1
    eafa:	ble.n	eb0a <__hexnan+0xea>
    eafc:	cmp	r0, r2
    eafe:	bls.n	ea5c <__hexnan+0x3c>
    eb00:	movs	r3, #0
    eb02:	str.w	r3, [r0, #-4]
    eb06:	movs	r1, #1
    eb08:	subs	r0, #4
    eb0a:	ldr	r3, [r0, #0]
    eb0c:	and.w	r4, r4, #15
    eb10:	orr.w	r4, r4, r3, lsl #4
    eb14:	str	r4, [r0, #0]
    eb16:	b.n	ea5c <__hexnan+0x3c>
    eb18:	movs	r3, #0
    eb1a:	sub.w	r8, r0, #4
    eb1e:	str.w	r3, [r0, #-4]
    eb22:	mov	sl, lr
    eb24:	mov	r0, r8
    eb26:	mov	r1, r3
    eb28:	b.n	ea5c <__hexnan+0x3c>
    eb2a:	cmp	r3, #41	; 0x29
    eb2c:	beq.n	eb66 <__hexnan+0x146>
    eb2e:	movs	r0, #4
    eb30:	add	sp, #20
    eb32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb36:	ldr	r3, [sp, #12]
    eb38:	cmp	r3, #0
    eb3a:	beq.n	ead6 <__hexnan+0xb6>
    eb3c:	ldr	r4, [sp, #4]
    eb3e:	ldr	r3, [sp, #12]
    eb40:	ldr.w	r1, [r4, #-4]
    eb44:	rsb	r3, r3, #32
    eb48:	mov.w	r0, #4294967295
    eb4c:	lsr.w	r3, r0, r3
    eb50:	ands	r3, r1
    eb52:	str.w	r3, [r4, #-4]
    eb56:	b.n	eadc <__hexnan+0xbc>
    eb58:	movs	r3, #1
    eb5a:	movs	r0, #5
    eb5c:	str.w	r3, [ip]
    eb60:	add	sp, #20
    eb62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb66:	ldr	r3, [sp, #8]
    eb68:	adds	r5, #1
    eb6a:	str	r5, [r3, #0]
    eb6c:	cmp.w	lr, #0
    eb70:	bne.n	eab2 <__hexnan+0x92>
    eb72:	b.n	eb2e <__hexnan+0x10e>
    eb74:	rsb	r3, r1, #8
    eb78:	lsls	r3, r3, #2
    eb7a:	ldr	r5, [r0, #0]
    eb7c:	rsb	r7, r3, #32
    eb80:	mov	r1, r0
    eb82:	ldr	r6, [r1, #4]
    eb84:	lsl.w	r4, r6, r7
    eb88:	orrs	r4, r5
    eb8a:	lsr.w	r5, r6, r3
    eb8e:	str	r4, [r1, #0]
    eb90:	str.w	r5, [r1, #4]!
    eb94:	cmp	r8, r1
    eb96:	bhi.n	eb82 <__hexnan+0x162>
    eb98:	b.n	eaba <__hexnan+0x9a>
    eb9a:	nop
    eb9c:	.word	0x2000051c

0000eba0 <iswspace>:
    eba0:	cmp	r0, #255	; 0xff
    eba2:	bls.n	eba8 <iswspace+0x8>
    eba4:	movs	r0, #0
    eba6:	bx	lr
    eba8:	push	{r4, lr}
    ebaa:	mov	r4, r0
    ebac:	bl	8f84 <__locale_ctype_ptr>
    ebb0:	add	r0, r4
    ebb2:	ldrb	r0, [r0, #1]
    ebb4:	and.w	r0, r0, #8
    ebb8:	uxtb	r0, r0
    ebba:	pop	{r4, pc}

0000ebbc <__localeconv_l>:
    ebbc:	adds	r0, #240	; 0xf0
    ebbe:	bx	lr

0000ebc0 <_localeconv_r>:
    ebc0:	ldr	r2, [pc, #16]	; (ebd4 <_localeconv_r+0x14>)
    ebc2:	ldr	r3, [pc, #20]	; (ebd8 <_localeconv_r+0x18>)
    ebc4:	ldr	r2, [r2, #0]
    ebc6:	ldr	r0, [r2, #52]	; 0x34
    ebc8:	cmp	r0, #0
    ebca:	it	eq
    ebcc:	moveq	r0, r3
    ebce:	adds	r0, #240	; 0xf0
    ebd0:	bx	lr
    ebd2:	nop
    ebd4:	.word	0x2000215c
    ebd8:	.word	0x20001be0

0000ebdc <_mbrtowc_r>:
    ebdc:	push	{r4, r5, r6, r7, lr}
    ebde:	sub	sp, #12
    ebe0:	mov	r7, r0
    ebe2:	ldr	r5, [sp, #32]
    ebe4:	cbz	r2, ec0c <_mbrtowc_r+0x30>
    ebe6:	ldr	r4, [pc, #68]	; (ec2c <_mbrtowc_r+0x50>)
    ebe8:	ldr	r6, [pc, #68]	; (ec30 <_mbrtowc_r+0x54>)
    ebea:	ldr	r4, [r4, #0]
    ebec:	ldr	r4, [r4, #52]	; 0x34
    ebee:	str	r5, [sp, #0]
    ebf0:	cmp	r4, #0
    ebf2:	it	eq
    ebf4:	moveq	r4, r6
    ebf6:	ldr.w	r4, [r4, #228]	; 0xe4
    ebfa:	blx	r4
    ebfc:	adds	r3, r0, #1
    ebfe:	bne.n	ec08 <_mbrtowc_r+0x2c>
    ec00:	movs	r2, #0
    ec02:	movs	r3, #138	; 0x8a
    ec04:	str	r2, [r5, #0]
    ec06:	str	r3, [r7, #0]
    ec08:	add	sp, #12
    ec0a:	pop	{r4, r5, r6, r7, pc}
    ec0c:	ldr	r3, [pc, #28]	; (ec2c <_mbrtowc_r+0x50>)
    ec0e:	ldr	r1, [pc, #32]	; (ec30 <_mbrtowc_r+0x54>)
    ec10:	ldr	r3, [r3, #0]
    ec12:	ldr	r3, [r3, #52]	; 0x34
    ec14:	str	r5, [sp, #0]
    ec16:	cmp	r3, #0
    ec18:	it	eq
    ec1a:	moveq	r3, r1
    ec1c:	mov	r4, r2
    ec1e:	mov	r1, r4
    ec20:	ldr	r2, [pc, #16]	; (ec34 <_mbrtowc_r+0x58>)
    ec22:	ldr.w	r4, [r3, #228]	; 0xe4
    ec26:	movs	r3, #1
    ec28:	blx	r4
    ec2a:	b.n	ebfc <_mbrtowc_r+0x20>
    ec2c:	.word	0x2000215c
    ec30:	.word	0x20001be0
    ec34:	.word	0x200012e4

0000ec38 <_Balloc>:
    ec38:	ldr	r3, [r0, #76]	; 0x4c
    ec3a:	push	{r4, r5, r6, lr}
    ec3c:	mov	r5, r0
    ec3e:	mov	r4, r1
    ec40:	cbz	r3, ec56 <_Balloc+0x1e>
    ec42:	ldr.w	r0, [r3, r4, lsl #2]
    ec46:	cbz	r0, ec6a <_Balloc+0x32>
    ec48:	ldr	r2, [r0, #0]
    ec4a:	str.w	r2, [r3, r4, lsl #2]
    ec4e:	movs	r3, #0
    ec50:	str	r3, [r0, #16]
    ec52:	str	r3, [r0, #12]
    ec54:	pop	{r4, r5, r6, pc}
    ec56:	movs	r2, #33	; 0x21
    ec58:	movs	r1, #4
    ec5a:	bl	fe24 <_calloc_r>
    ec5e:	str	r0, [r5, #76]	; 0x4c
    ec60:	mov	r3, r0
    ec62:	cmp	r0, #0
    ec64:	bne.n	ec42 <_Balloc+0xa>
    ec66:	movs	r0, #0
    ec68:	pop	{r4, r5, r6, pc}
    ec6a:	movs	r1, #1
    ec6c:	lsl.w	r6, r1, r4
    ec70:	adds	r2, r6, #5
    ec72:	mov	r0, r5
    ec74:	lsls	r2, r2, #2
    ec76:	bl	fe24 <_calloc_r>
    ec7a:	cmp	r0, #0
    ec7c:	beq.n	ec66 <_Balloc+0x2e>
    ec7e:	str	r4, [r0, #4]
    ec80:	str	r6, [r0, #8]
    ec82:	b.n	ec4e <_Balloc+0x16>

0000ec84 <_Bfree>:
    ec84:	cbz	r1, ec94 <_Bfree+0x10>
    ec86:	ldr	r3, [r0, #76]	; 0x4c
    ec88:	ldr	r2, [r1, #4]
    ec8a:	ldr.w	r0, [r3, r2, lsl #2]
    ec8e:	str	r0, [r1, #0]
    ec90:	str.w	r1, [r3, r2, lsl #2]
    ec94:	bx	lr
    ec96:	nop

0000ec98 <__multadd>:
    ec98:	push	{r4, r5, r6, r7, lr}
    ec9a:	ldr	r4, [r1, #16]
    ec9c:	sub	sp, #12
    ec9e:	mov	r5, r1
    eca0:	mov	r6, r0
    eca2:	add.w	lr, r1, #20
    eca6:	movs	r7, #0
    eca8:	ldr.w	r0, [lr]
    ecac:	uxth	r1, r0
    ecae:	mla	r1, r2, r1, r3
    ecb2:	lsrs	r3, r1, #16
    ecb4:	lsrs	r0, r0, #16
    ecb6:	mla	r3, r2, r0, r3
    ecba:	uxth	r1, r1
    ecbc:	adds	r7, #1
    ecbe:	add.w	r1, r1, r3, lsl #16
    ecc2:	cmp	r4, r7
    ecc4:	str.w	r1, [lr], #4
    ecc8:	mov.w	r3, r3, lsr #16
    eccc:	bgt.n	eca8 <__multadd+0x10>
    ecce:	cbz	r3, ece0 <__multadd+0x48>
    ecd0:	ldr	r2, [r5, #8]
    ecd2:	cmp	r4, r2
    ecd4:	bge.n	ece6 <__multadd+0x4e>
    ecd6:	add.w	r2, r5, r4, lsl #2
    ecda:	adds	r4, #1
    ecdc:	str	r3, [r2, #20]
    ecde:	str	r4, [r5, #16]
    ece0:	mov	r0, r5
    ece2:	add	sp, #12
    ece4:	pop	{r4, r5, r6, r7, pc}
    ece6:	ldr	r1, [r5, #4]
    ece8:	str	r3, [sp, #4]
    ecea:	adds	r1, #1
    ecec:	mov	r0, r6
    ecee:	bl	ec38 <_Balloc>
    ecf2:	ldr	r2, [r5, #16]
    ecf4:	adds	r2, #2
    ecf6:	add.w	r1, r5, #12
    ecfa:	mov	r7, r0
    ecfc:	lsls	r2, r2, #2
    ecfe:	adds	r0, #12
    ed00:	bl	68c4 <memcpy>
    ed04:	ldr	r2, [r6, #76]	; 0x4c
    ed06:	ldr	r1, [r5, #4]
    ed08:	ldr	r3, [sp, #4]
    ed0a:	ldr.w	r0, [r2, r1, lsl #2]
    ed0e:	str	r0, [r5, #0]
    ed10:	str.w	r5, [r2, r1, lsl #2]
    ed14:	mov	r5, r7
    ed16:	b.n	ecd6 <__multadd+0x3e>

0000ed18 <__s2b>:
    ed18:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ed1c:	ldr	r4, [pc, #140]	; (edac <__s2b+0x94>)
    ed1e:	ldr	r5, [sp, #32]
    ed20:	mov	r7, r3
    ed22:	adds	r3, #8
    ed24:	smull	r4, lr, r4, r3
    ed28:	asrs	r3, r3, #31
    ed2a:	rsb	lr, r3, lr, asr #1
    ed2e:	cmp.w	lr, #1
    ed32:	mov	r6, r0
    ed34:	mov	r4, r1
    ed36:	mov	r8, r2
    ed38:	ble.n	eda6 <__s2b+0x8e>
    ed3a:	movs	r3, #1
    ed3c:	movs	r1, #0
    ed3e:	lsls	r3, r3, #1
    ed40:	cmp	lr, r3
    ed42:	add.w	r1, r1, #1
    ed46:	bgt.n	ed3e <__s2b+0x26>
    ed48:	mov	r0, r6
    ed4a:	bl	ec38 <_Balloc>
    ed4e:	movs	r3, #1
    ed50:	cmp.w	r8, #9
    ed54:	str	r5, [r0, #20]
    ed56:	str	r3, [r0, #16]
    ed58:	ble.n	ed9e <__s2b+0x86>
    ed5a:	add.w	r9, r4, #9
    ed5e:	mov	r5, r9
    ed60:	add	r4, r8
    ed62:	ldrb.w	r3, [r5], #1
    ed66:	mov	r1, r0
    ed68:	subs	r3, #48	; 0x30
    ed6a:	movs	r2, #10
    ed6c:	mov	r0, r6
    ed6e:	bl	ec98 <__multadd>
    ed72:	cmp	r5, r4
    ed74:	bne.n	ed62 <__s2b+0x4a>
    ed76:	add.w	r4, r9, r8
    ed7a:	subs	r4, #8
    ed7c:	cmp	r7, r8
    ed7e:	ble.n	ed9a <__s2b+0x82>
    ed80:	rsb	r7, r8, r7
    ed84:	add	r7, r4
    ed86:	ldrb.w	r3, [r4], #1
    ed8a:	mov	r1, r0
    ed8c:	subs	r3, #48	; 0x30
    ed8e:	movs	r2, #10
    ed90:	mov	r0, r6
    ed92:	bl	ec98 <__multadd>
    ed96:	cmp	r7, r4
    ed98:	bne.n	ed86 <__s2b+0x6e>
    ed9a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ed9e:	adds	r4, #10
    eda0:	mov.w	r8, #9
    eda4:	b.n	ed7c <__s2b+0x64>
    eda6:	movs	r1, #0
    eda8:	b.n	ed48 <__s2b+0x30>
    edaa:	nop
    edac:	.word	0x38e38e39

0000edb0 <__hi0bits>:
    edb0:	lsrs	r3, r0, #16
    edb2:	lsls	r3, r3, #16
    edb4:	cbnz	r3, ede4 <__hi0bits+0x34>
    edb6:	lsls	r0, r0, #16
    edb8:	movs	r3, #16
    edba:	tst.w	r0, #4278190080	; 0xff000000
    edbe:	itt	eq
    edc0:	lsleq	r0, r0, #8
    edc2:	addeq	r3, #8
    edc4:	tst.w	r0, #4026531840	; 0xf0000000
    edc8:	itt	eq
    edca:	lsleq	r0, r0, #4
    edcc:	addeq	r3, #4
    edce:	tst.w	r0, #3221225472	; 0xc0000000
    edd2:	itt	eq
    edd4:	lsleq	r0, r0, #2
    edd6:	addeq	r3, #2
    edd8:	cmp	r0, #0
    edda:	blt.n	edec <__hi0bits+0x3c>
    eddc:	lsls	r2, r0, #1
    edde:	bmi.n	ede8 <__hi0bits+0x38>
    ede0:	movs	r0, #32
    ede2:	bx	lr
    ede4:	movs	r3, #0
    ede6:	b.n	edba <__hi0bits+0xa>
    ede8:	adds	r0, r3, #1
    edea:	bx	lr
    edec:	mov	r0, r3
    edee:	bx	lr

0000edf0 <__lo0bits>:
    edf0:	ldr	r3, [r0, #0]
    edf2:	ands.w	r2, r3, #7
    edf6:	beq.n	ee08 <__lo0bits+0x18>
    edf8:	lsls	r1, r3, #31
    edfa:	bmi.n	ee3e <__lo0bits+0x4e>
    edfc:	lsls	r2, r3, #30
    edfe:	bmi.n	ee42 <__lo0bits+0x52>
    ee00:	lsrs	r3, r3, #2
    ee02:	str	r3, [r0, #0]
    ee04:	movs	r0, #2
    ee06:	bx	lr
    ee08:	uxth	r1, r3
    ee0a:	cbnz	r1, ee10 <__lo0bits+0x20>
    ee0c:	lsrs	r3, r3, #16
    ee0e:	movs	r2, #16
    ee10:	tst.w	r3, #255	; 0xff
    ee14:	itt	eq
    ee16:	lsreq	r3, r3, #8
    ee18:	addeq	r2, #8
    ee1a:	lsls	r1, r3, #28
    ee1c:	itt	eq
    ee1e:	lsreq	r3, r3, #4
    ee20:	addeq	r2, #4
    ee22:	lsls	r1, r3, #30
    ee24:	itt	eq
    ee26:	lsreq	r3, r3, #2
    ee28:	addeq	r2, #2
    ee2a:	lsls	r1, r3, #31
    ee2c:	bmi.n	ee38 <__lo0bits+0x48>
    ee2e:	lsrs	r3, r3, #1
    ee30:	bne.n	ee36 <__lo0bits+0x46>
    ee32:	movs	r0, #32
    ee34:	bx	lr
    ee36:	adds	r2, #1
    ee38:	str	r3, [r0, #0]
    ee3a:	mov	r0, r2
    ee3c:	bx	lr
    ee3e:	movs	r0, #0
    ee40:	bx	lr
    ee42:	lsrs	r3, r3, #1
    ee44:	str	r3, [r0, #0]
    ee46:	movs	r0, #1
    ee48:	bx	lr
    ee4a:	nop

0000ee4c <__i2b>:
    ee4c:	push	{r4, lr}
    ee4e:	mov	r4, r1
    ee50:	movs	r1, #1
    ee52:	bl	ec38 <_Balloc>
    ee56:	movs	r2, #1
    ee58:	str	r4, [r0, #20]
    ee5a:	str	r2, [r0, #16]
    ee5c:	pop	{r4, pc}
    ee5e:	nop

0000ee60 <__multiply>:
    ee60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee64:	ldr	r5, [r1, #16]
    ee66:	ldr	r7, [r2, #16]
    ee68:	cmp	r5, r7
    ee6a:	sub	sp, #12
    ee6c:	mov	r4, r1
    ee6e:	mov	r6, r2
    ee70:	bge.n	ee7c <__multiply+0x1c>
    ee72:	mov	r2, r5
    ee74:	mov	r4, r6
    ee76:	mov	r5, r7
    ee78:	mov	r6, r1
    ee7a:	mov	r7, r2
    ee7c:	ldr	r3, [r4, #8]
    ee7e:	ldr	r1, [r4, #4]
    ee80:	add.w	r8, r5, r7
    ee84:	cmp	r8, r3
    ee86:	it	gt
    ee88:	addgt	r1, #1
    ee8a:	bl	ec38 <_Balloc>
    ee8e:	add.w	ip, r0, #20
    ee92:	add.w	r9, ip, r8, lsl #2
    ee96:	cmp	ip, r9
    ee98:	str	r0, [sp, #0]
    ee9a:	bcs.n	eea8 <__multiply+0x48>
    ee9c:	mov	r3, ip
    ee9e:	movs	r1, #0
    eea0:	str.w	r1, [r3], #4
    eea4:	cmp	r9, r3
    eea6:	bhi.n	eea0 <__multiply+0x40>
    eea8:	add.w	r2, r6, #20
    eeac:	add.w	sl, r2, r7, lsl #2
    eeb0:	add.w	r3, r4, #20
    eeb4:	cmp	r2, sl
    eeb6:	add.w	lr, r3, r5, lsl #2
    eeba:	bcs.n	ef66 <__multiply+0x106>
    eebc:	str.w	r9, [sp, #4]
    eec0:	mov	r9, r3
    eec2:	ldr.w	r3, [r2], #4
    eec6:	uxth.w	fp, r3
    eeca:	cmp.w	fp, #0
    eece:	beq.n	ef12 <__multiply+0xb2>
    eed0:	movs	r0, #0
    eed2:	mov	r7, r9
    eed4:	mov	r6, ip
    eed6:	mov	r5, r0
    eed8:	b.n	eedc <__multiply+0x7c>
    eeda:	mov	r6, r3
    eedc:	ldr.w	r4, [r7], #4
    eee0:	ldr	r0, [r6, #0]
    eee2:	uxth	r1, r4
    eee4:	uxth	r3, r0
    eee6:	mla	r1, fp, r1, r3
    eeea:	lsrs	r4, r4, #16
    eeec:	lsrs	r0, r0, #16
    eeee:	adds	r3, r1, r5
    eef0:	mla	r0, fp, r4, r0
    eef4:	add.w	r0, r0, r3, lsr #16
    eef8:	uxth	r1, r3
    eefa:	mov	r3, r6
    eefc:	orr.w	r1, r1, r0, lsl #16
    ef00:	cmp	lr, r7
    ef02:	mov.w	r5, r0, lsr #16
    ef06:	str.w	r1, [r3], #4
    ef0a:	bhi.n	eeda <__multiply+0x7a>
    ef0c:	str	r5, [r6, #4]
    ef0e:	ldr.w	r3, [r2, #-4]
    ef12:	movs.w	fp, r3, lsr #16
    ef16:	beq.n	ef5a <__multiply+0xfa>
    ef18:	ldr.w	r3, [ip]
    ef1c:	mov	r7, ip
    ef1e:	mov	r0, r3
    ef20:	mov	r5, r9
    ef22:	movs	r1, #0
    ef24:	b.n	ef28 <__multiply+0xc8>
    ef26:	mov	r7, r6
    ef28:	ldrh	r4, [r5, #0]
    ef2a:	lsrs	r0, r0, #16
    ef2c:	mla	r0, fp, r4, r0
    ef30:	add	r1, r0
    ef32:	uxth	r4, r3
    ef34:	mov	r6, r7
    ef36:	orr.w	r3, r4, r1, lsl #16
    ef3a:	str.w	r3, [r6], #4
    ef3e:	ldr	r0, [r7, #4]
    ef40:	ldr.w	r4, [r5], #4
    ef44:	uxth	r3, r0
    ef46:	lsrs	r4, r4, #16
    ef48:	mla	r4, fp, r4, r3
    ef4c:	add.w	r3, r4, r1, lsr #16
    ef50:	cmp	lr, r5
    ef52:	mov.w	r1, r3, lsr #16
    ef56:	bhi.n	ef26 <__multiply+0xc6>
    ef58:	str	r3, [r7, #4]
    ef5a:	cmp	sl, r2
    ef5c:	add.w	ip, ip, #4
    ef60:	bhi.n	eec2 <__multiply+0x62>
    ef62:	ldr.w	r9, [sp, #4]
    ef66:	cmp.w	r8, #0
    ef6a:	ble.n	ef84 <__multiply+0x124>
    ef6c:	ldr.w	r3, [r9, #-4]
    ef70:	sub.w	r9, r9, #4
    ef74:	cbz	r3, ef7e <__multiply+0x11e>
    ef76:	b.n	ef84 <__multiply+0x124>
    ef78:	ldr.w	r3, [r9, #-4]!
    ef7c:	cbnz	r3, ef84 <__multiply+0x124>
    ef7e:	subs.w	r8, r8, #1
    ef82:	bne.n	ef78 <__multiply+0x118>
    ef84:	ldr	r0, [sp, #0]
    ef86:	str.w	r8, [r0, #16]
    ef8a:	add	sp, #12
    ef8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ef90 <__pow5mult>:
    ef90:	ands.w	r3, r2, #3
    ef94:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef98:	mov	r4, r2
    ef9a:	mov	r7, r0
    ef9c:	bne.n	effc <__pow5mult+0x6c>
    ef9e:	mov	r6, r1
    efa0:	asrs	r4, r4, #2
    efa2:	beq.n	efde <__pow5mult+0x4e>
    efa4:	ldr	r5, [r7, #72]	; 0x48
    efa6:	cbz	r5, f00e <__pow5mult+0x7e>
    efa8:	lsls	r3, r4, #31
    efaa:	mov.w	r8, #0
    efae:	bmi.n	efbe <__pow5mult+0x2e>
    efb0:	asrs	r4, r4, #1
    efb2:	beq.n	efde <__pow5mult+0x4e>
    efb4:	ldr	r0, [r5, #0]
    efb6:	cbz	r0, efe4 <__pow5mult+0x54>
    efb8:	mov	r5, r0
    efba:	lsls	r3, r4, #31
    efbc:	bpl.n	efb0 <__pow5mult+0x20>
    efbe:	mov	r2, r5
    efc0:	mov	r1, r6
    efc2:	mov	r0, r7
    efc4:	bl	ee60 <__multiply>
    efc8:	cbz	r6, eff8 <__pow5mult+0x68>
    efca:	ldr	r2, [r6, #4]
    efcc:	ldr	r3, [r7, #76]	; 0x4c
    efce:	asrs	r4, r4, #1
    efd0:	ldr.w	r1, [r3, r2, lsl #2]
    efd4:	str	r1, [r6, #0]
    efd6:	str.w	r6, [r3, r2, lsl #2]
    efda:	mov	r6, r0
    efdc:	bne.n	efb4 <__pow5mult+0x24>
    efde:	mov	r0, r6
    efe0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    efe4:	mov	r2, r5
    efe6:	mov	r1, r5
    efe8:	mov	r0, r7
    efea:	bl	ee60 <__multiply>
    efee:	str	r0, [r5, #0]
    eff0:	str.w	r8, [r0]
    eff4:	mov	r5, r0
    eff6:	b.n	efba <__pow5mult+0x2a>
    eff8:	mov	r6, r0
    effa:	b.n	efb0 <__pow5mult+0x20>
    effc:	subs	r2, r3, #1
    effe:	ldr	r5, [pc, #44]	; (f02c <__pow5mult+0x9c>)
    f000:	movs	r3, #0
    f002:	ldr.w	r2, [r5, r2, lsl #2]
    f006:	bl	ec98 <__multadd>
    f00a:	mov	r6, r0
    f00c:	b.n	efa0 <__pow5mult+0x10>
    f00e:	movs	r1, #1
    f010:	mov	r0, r7
    f012:	bl	ec38 <_Balloc>
    f016:	movw	r1, #625	; 0x271
    f01a:	movs	r2, #1
    f01c:	movs	r3, #0
    f01e:	str	r1, [r0, #20]
    f020:	str	r2, [r0, #16]
    f022:	mov	r5, r0
    f024:	str	r0, [r7, #72]	; 0x48
    f026:	str	r3, [r0, #0]
    f028:	b.n	efa8 <__pow5mult+0x18>
    f02a:	nop
    f02c:	.word	0x20000af0

0000f030 <__lshift>:
    f030:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f034:	mov	r9, r2
    f036:	ldr	r2, [r1, #16]
    f038:	ldr	r3, [r1, #8]
    f03a:	mov.w	r4, r9, asr #5
    f03e:	add.w	r8, r4, r2
    f042:	add.w	r5, r8, #1
    f046:	cmp	r5, r3
    f048:	mov	r6, r1
    f04a:	mov	sl, r0
    f04c:	ldr	r1, [r1, #4]
    f04e:	ble.n	f05a <__lshift+0x2a>
    f050:	lsls	r3, r3, #1
    f052:	cmp	r5, r3
    f054:	add.w	r1, r1, #1
    f058:	bgt.n	f050 <__lshift+0x20>
    f05a:	mov	r0, sl
    f05c:	bl	ec38 <_Balloc>
    f060:	cmp	r4, #0
    f062:	add.w	r2, r0, #20
    f066:	ble.n	f0da <__lshift+0xaa>
    f068:	add.w	r3, r2, r4, lsl #2
    f06c:	movs	r1, #0
    f06e:	str.w	r1, [r2], #4
    f072:	cmp	r3, r2
    f074:	bne.n	f06e <__lshift+0x3e>
    f076:	ldr	r4, [r6, #16]
    f078:	add.w	r1, r6, #20
    f07c:	ands.w	r9, r9, #31
    f080:	add.w	lr, r1, r4, lsl #2
    f084:	beq.n	f0ca <__lshift+0x9a>
    f086:	rsb	r2, r9, #32
    f08a:	movs	r4, #0
    f08c:	ldr	r7, [r1, #0]
    f08e:	lsl.w	ip, r7, r9
    f092:	orr.w	r4, ip, r4
    f096:	mov	ip, r3
    f098:	str.w	r4, [r3], #4
    f09c:	ldr.w	r4, [r1], #4
    f0a0:	cmp	lr, r1
    f0a2:	lsr.w	r4, r4, r2
    f0a6:	bhi.n	f08c <__lshift+0x5c>
    f0a8:	str.w	r4, [ip, #4]
    f0ac:	cbz	r4, f0b2 <__lshift+0x82>
    f0ae:	add.w	r5, r8, #2
    f0b2:	ldr.w	r3, [sl, #76]	; 0x4c
    f0b6:	ldr	r2, [r6, #4]
    f0b8:	subs	r5, #1
    f0ba:	ldr.w	r1, [r3, r2, lsl #2]
    f0be:	str	r5, [r0, #16]
    f0c0:	str	r1, [r6, #0]
    f0c2:	str.w	r6, [r3, r2, lsl #2]
    f0c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f0ca:	subs	r3, #4
    f0cc:	ldr.w	r2, [r1], #4
    f0d0:	str.w	r2, [r3, #4]!
    f0d4:	cmp	lr, r1
    f0d6:	bhi.n	f0cc <__lshift+0x9c>
    f0d8:	b.n	f0b2 <__lshift+0x82>
    f0da:	mov	r3, r2
    f0dc:	b.n	f076 <__lshift+0x46>
    f0de:	nop

0000f0e0 <__mcmp>:
    f0e0:	ldr	r2, [r0, #16]
    f0e2:	ldr	r3, [r1, #16]
    f0e4:	subs	r2, r2, r3
    f0e6:	bne.n	f110 <__mcmp+0x30>
    f0e8:	lsls	r3, r3, #2
    f0ea:	adds	r0, #20
    f0ec:	adds	r1, #20
    f0ee:	add	r1, r3
    f0f0:	push	{r4}
    f0f2:	add	r3, r0
    f0f4:	b.n	f0fa <__mcmp+0x1a>
    f0f6:	cmp	r0, r3
    f0f8:	bcs.n	f114 <__mcmp+0x34>
    f0fa:	ldr.w	r4, [r3, #-4]!
    f0fe:	ldr.w	r2, [r1, #-4]!
    f102:	cmp	r4, r2
    f104:	beq.n	f0f6 <__mcmp+0x16>
    f106:	bcc.n	f11c <__mcmp+0x3c>
    f108:	movs	r0, #1
    f10a:	ldr.w	r4, [sp], #4
    f10e:	bx	lr
    f110:	mov	r0, r2
    f112:	bx	lr
    f114:	movs	r0, #0
    f116:	ldr.w	r4, [sp], #4
    f11a:	bx	lr
    f11c:	mov.w	r0, #4294967295
    f120:	b.n	f10a <__mcmp+0x2a>
    f122:	nop

0000f124 <__mdiff>:
    f124:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f128:	ldr	r3, [r1, #16]
    f12a:	mov	r7, r1
    f12c:	ldr	r1, [r2, #16]
    f12e:	subs	r3, r3, r1
    f130:	cmp	r3, #0
    f132:	mov	r8, r2
    f134:	bne.n	f166 <__mdiff+0x42>
    f136:	lsls	r1, r1, #2
    f138:	add.w	r2, r7, #20
    f13c:	add.w	r5, r8, #20
    f140:	adds	r3, r2, r1
    f142:	add	r1, r5
    f144:	b.n	f14a <__mdiff+0x26>
    f146:	cmp	r2, r3
    f148:	bcs.n	f208 <__mdiff+0xe4>
    f14a:	ldr.w	r6, [r3, #-4]!
    f14e:	ldr.w	r4, [r1, #-4]!
    f152:	cmp	r6, r4
    f154:	beq.n	f146 <__mdiff+0x22>
    f156:	bcs.n	f21a <__mdiff+0xf6>
    f158:	mov	r3, r7
    f15a:	mov	r4, r2
    f15c:	mov	r7, r8
    f15e:	mov.w	r9, #1
    f162:	mov	r8, r3
    f164:	b.n	f174 <__mdiff+0x50>
    f166:	blt.n	f224 <__mdiff+0x100>
    f168:	add.w	r5, r7, #20
    f16c:	add.w	r4, r2, #20
    f170:	mov.w	r9, #0
    f174:	ldr	r1, [r7, #4]
    f176:	bl	ec38 <_Balloc>
    f17a:	ldr.w	r3, [r8, #16]
    f17e:	ldr	r6, [r7, #16]
    f180:	str.w	r9, [r0, #12]
    f184:	add.w	ip, r4, r3, lsl #2
    f188:	mov	lr, r4
    f18a:	add.w	r7, r5, r6, lsl #2
    f18e:	add.w	r4, r0, #20
    f192:	movs	r3, #0
    f194:	ldr.w	r1, [lr], #4
    f198:	ldr.w	r8, [r5], #4
    f19c:	uxth	r2, r1
    f19e:	uxtah	r3, r3, r8
    f1a2:	lsrs	r1, r1, #16
    f1a4:	subs	r2, r3, r2
    f1a6:	rsb	r3, r1, r8, lsr #16
    f1aa:	add.w	r3, r3, r2, asr #16
    f1ae:	uxth	r2, r2
    f1b0:	orr.w	r2, r2, r3, lsl #16
    f1b4:	cmp	ip, lr
    f1b6:	str.w	r2, [r4], #4
    f1ba:	mov.w	r3, r3, asr #16
    f1be:	bhi.n	f194 <__mdiff+0x70>
    f1c0:	cmp	r7, r5
    f1c2:	bls.n	f1f4 <__mdiff+0xd0>
    f1c4:	mov	ip, r4
    f1c6:	mov	r1, r5
    f1c8:	ldr.w	lr, [r1], #4
    f1cc:	uxtah	r2, r3, lr
    f1d0:	asrs	r3, r2, #16
    f1d2:	add.w	r3, r3, lr, lsr #16
    f1d6:	uxth	r2, r2
    f1d8:	orr.w	r2, r2, r3, lsl #16
    f1dc:	cmp	r7, r1
    f1de:	str.w	r2, [ip], #4
    f1e2:	mov.w	r3, r3, asr #16
    f1e6:	bhi.n	f1c8 <__mdiff+0xa4>
    f1e8:	mvns	r5, r5
    f1ea:	add	r5, r7
    f1ec:	bic.w	r5, r5, #3
    f1f0:	adds	r5, #4
    f1f2:	add	r4, r5
    f1f4:	subs	r4, #4
    f1f6:	cbnz	r2, f202 <__mdiff+0xde>
    f1f8:	ldr.w	r3, [r4, #-4]!
    f1fc:	subs	r6, #1
    f1fe:	cmp	r3, #0
    f200:	beq.n	f1f8 <__mdiff+0xd4>
    f202:	str	r6, [r0, #16]
    f204:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f208:	movs	r1, #0
    f20a:	bl	ec38 <_Balloc>
    f20e:	movs	r2, #1
    f210:	movs	r3, #0
    f212:	str	r2, [r0, #16]
    f214:	str	r3, [r0, #20]
    f216:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f21a:	mov	r4, r5
    f21c:	mov.w	r9, #0
    f220:	mov	r5, r2
    f222:	b.n	f174 <__mdiff+0x50>
    f224:	mov	r3, r7
    f226:	add.w	r4, r7, #20
    f22a:	add.w	r5, r8, #20
    f22e:	mov	r7, r8
    f230:	mov.w	r9, #1
    f234:	mov	r8, r3
    f236:	b.n	f174 <__mdiff+0x50>

0000f238 <__ulp>:
    f238:	ldr	r3, [pc, #76]	; (f288 <__ulp+0x50>)
    f23a:	vmov	r2, s1
    f23e:	ands	r2, r3
    f240:	sub.w	r3, r2, #54525952	; 0x3400000
    f244:	cmp	r3, #0
    f246:	ble.n	f252 <__ulp+0x1a>
    f248:	movs	r0, #0
    f24a:	mov	r1, r3
    f24c:	vmov	d0, r0, r1
    f250:	bx	lr
    f252:	negs	r3, r3
    f254:	asrs	r3, r3, #20
    f256:	cmp	r3, #19
    f258:	ble.n	f276 <__ulp+0x3e>
    f25a:	subs	r3, #20
    f25c:	cmp	r3, #30
    f25e:	ittte	le
    f260:	rsble	r3, r3, #31
    f264:	movle	r2, #1
    f266:	lslle.w	r3, r2, r3
    f26a:	movgt	r3, #1
    f26c:	movs	r1, #0
    f26e:	mov	r0, r3
    f270:	vmov	d0, r0, r1
    f274:	bx	lr
    f276:	mov.w	r2, #524288	; 0x80000
    f27a:	movs	r0, #0
    f27c:	asr.w	r1, r2, r3
    f280:	vmov	d0, r0, r1
    f284:	bx	lr
    f286:	nop
    f288:	.word	0x7ff00000

0000f28c <__b2d>:
    f28c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f290:	ldr	r6, [r0, #16]
    f292:	add.w	r8, r0, #20
    f296:	add.w	r6, r8, r6, lsl #2
    f29a:	ldr.w	r7, [r6, #-4]
    f29e:	mov	r0, r7
    f2a0:	bl	edb0 <__hi0bits>
    f2a4:	rsb	r3, r0, #32
    f2a8:	cmp	r0, #10
    f2aa:	str	r3, [r1, #0]
    f2ac:	sub.w	r3, r6, #4
    f2b0:	bgt.n	f2e4 <__b2d+0x58>
    f2b2:	cmp	r8, r3
    f2b4:	rsb	r2, r0, #11
    f2b8:	it	cc
    f2ba:	ldrcc.w	r3, [r6, #-8]
    f2be:	lsr.w	r1, r7, r2
    f2c2:	add.w	r0, r0, #21
    f2c6:	orr.w	r5, r1, #1069547520	; 0x3fc00000
    f2ca:	ite	cc
    f2cc:	lsrcc	r3, r2
    f2ce:	movcs	r3, #0
    f2d0:	lsl.w	r0, r7, r0
    f2d4:	orr.w	r5, r5, #3145728	; 0x300000
    f2d8:	orr.w	r4, r0, r3
    f2dc:	vmov	d0, r4, r5
    f2e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2e4:	cmp	r8, r3
    f2e6:	bcs.n	f32a <__b2d+0x9e>
    f2e8:	subs.w	r3, r0, #11
    f2ec:	ldr.w	r2, [r6, #-8]
    f2f0:	beq.n	f330 <__b2d+0xa4>
    f2f2:	lsl.w	r0, r7, r3
    f2f6:	orr.w	r7, r0, #1069547520	; 0x3fc00000
    f2fa:	rsb	lr, r3, #32
    f2fe:	sub.w	r1, r6, #8
    f302:	orr.w	r7, r7, #3145728	; 0x300000
    f306:	lsr.w	r0, r2, lr
    f30a:	cmp	r8, r1
    f30c:	orr.w	r5, r7, r0
    f310:	bcs.n	f354 <__b2d+0xc8>
    f312:	ldr.w	r1, [r6, #-12]
    f316:	lsl.w	r0, r2, r3
    f31a:	lsr.w	r3, r1, lr
    f31e:	orrs	r0, r3
    f320:	mov	r4, r0
    f322:	vmov	d0, r4, r5
    f326:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f32a:	subs	r0, #11
    f32c:	bne.n	f342 <__b2d+0xb6>
    f32e:	mov	r2, r0
    f330:	orr.w	r5, r7, #1069547520	; 0x3fc00000
    f334:	orr.w	r5, r5, #3145728	; 0x300000
    f338:	mov	r4, r2
    f33a:	vmov	d0, r4, r5
    f33e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f342:	lsl.w	r0, r7, r0
    f346:	orr.w	r5, r0, #1069547520	; 0x3fc00000
    f34a:	movs	r0, #0
    f34c:	orr.w	r5, r5, #3145728	; 0x300000
    f350:	mov	r4, r0
    f352:	b.n	f322 <__b2d+0x96>
    f354:	lsl.w	r0, r2, r3
    f358:	mov	r4, r0
    f35a:	b.n	f322 <__b2d+0x96>

0000f35c <__d2b>:
    f35c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f360:	vmov	r6, r7, d0
    f364:	sub	sp, #12
    f366:	mov	r8, r1
    f368:	movs	r1, #1
    f36a:	mov	r4, r7
    f36c:	ubfx	r5, r7, #20, #11
    f370:	mov	r7, r2
    f372:	bl	ec38 <_Balloc>
    f376:	ubfx	r4, r4, #0, #20
    f37a:	mov	r9, r0
    f37c:	cbz	r5, f382 <__d2b+0x26>
    f37e:	orr.w	r4, r4, #1048576	; 0x100000
    f382:	str	r4, [sp, #4]
    f384:	cbz	r6, f3ce <__d2b+0x72>
    f386:	add	r0, sp, #8
    f388:	str.w	r6, [r0, #-8]!
    f38c:	bl	edf0 <__lo0bits>
    f390:	cmp	r0, #0
    f392:	bne.n	f3fe <__d2b+0xa2>
    f394:	ldmia.w	sp, {r2, r3}
    f398:	str.w	r2, [r9, #20]
    f39c:	cmp	r3, #0
    f39e:	ite	eq
    f3a0:	moveq	r1, #1
    f3a2:	movne	r1, #2
    f3a4:	str.w	r3, [r9, #24]
    f3a8:	str.w	r1, [r9, #16]
    f3ac:	cbnz	r5, f3e6 <__d2b+0x8a>
    f3ae:	add.w	r3, r9, r1, lsl #2
    f3b2:	subw	r0, r0, #1074	; 0x432
    f3b6:	str.w	r0, [r8]
    f3ba:	ldr	r0, [r3, #16]
    f3bc:	bl	edb0 <__hi0bits>
    f3c0:	rsb	r0, r0, r1, lsl #5
    f3c4:	str	r0, [r7, #0]
    f3c6:	mov	r0, r9
    f3c8:	add	sp, #12
    f3ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f3ce:	add	r0, sp, #4
    f3d0:	bl	edf0 <__lo0bits>
    f3d4:	ldr	r3, [sp, #4]
    f3d6:	str.w	r3, [r9, #20]
    f3da:	movs	r1, #1
    f3dc:	adds	r0, #32
    f3de:	str.w	r1, [r9, #16]
    f3e2:	cmp	r5, #0
    f3e4:	beq.n	f3ae <__d2b+0x52>
    f3e6:	subw	r5, r5, #1075	; 0x433
    f3ea:	add	r5, r0
    f3ec:	rsb	r0, r0, #53	; 0x35
    f3f0:	str.w	r5, [r8]
    f3f4:	str	r0, [r7, #0]
    f3f6:	mov	r0, r9
    f3f8:	add	sp, #12
    f3fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f3fe:	ldmia.w	sp, {r2, r3}
    f402:	rsb	r1, r0, #32
    f406:	lsl.w	r1, r3, r1
    f40a:	orrs	r2, r1
    f40c:	lsrs	r3, r0
    f40e:	str	r3, [sp, #4]
    f410:	str.w	r2, [r9, #20]
    f414:	b.n	f39c <__d2b+0x40>
    f416:	nop

0000f418 <__ratio>:
    f418:	push	{r4, r5, lr}
    f41a:	sub	sp, #28
    f41c:	mov	r4, r1
    f41e:	add	r1, sp, #16
    f420:	mov	r5, r0
    f422:	bl	f28c <__b2d>
    f426:	mov	r0, r4
    f428:	add	r1, sp, #20
    f42a:	vstr	d0, [sp]
    f42e:	bl	f28c <__b2d>
    f432:	ldr	r0, [r4, #16]
    f434:	ldr	r1, [r5, #16]
    f436:	ldr	r3, [sp, #20]
    f438:	ldr	r2, [sp, #16]
    f43a:	subs	r1, r1, r0
    f43c:	subs	r2, r2, r3
    f43e:	add.w	r3, r2, r1, lsl #5
    f442:	vstr	d0, [sp, #8]
    f446:	cmp	r3, #0
    f448:	ldrd	r0, r1, [sp]
    f44c:	ldrd	r4, r5, [sp, #8]
    f450:	ble.n	f46a <__ratio+0x52>
    f452:	add.w	r1, r1, r3, lsl #20
    f456:	strd	r0, r1, [sp]
    f45a:	vldr	d7, [sp]
    f45e:	vldr	d6, [sp, #8]
    f462:	vdiv.f64	d0, d7, d6
    f466:	add	sp, #28
    f468:	pop	{r4, r5, pc}
    f46a:	sub.w	r5, r5, r3, lsl #20
    f46e:	strd	r4, r5, [sp, #8]
    f472:	b.n	f45a <__ratio+0x42>

0000f474 <__copybits>:
    f474:	push	{r4, r5, r6}
    f476:	ldr	r4, [r2, #16]
    f478:	add.w	r3, r2, #20
    f47c:	subs	r1, #1
    f47e:	asrs	r6, r1, #5
    f480:	add.w	r4, r3, r4, lsl #2
    f484:	adds	r6, #1
    f486:	cmp	r3, r4
    f488:	add.w	r6, r0, r6, lsl #2
    f48c:	bcs.n	f4a8 <__copybits+0x34>
    f48e:	subs	r1, r0, #4
    f490:	ldr.w	r5, [r3], #4
    f494:	str.w	r5, [r1, #4]!
    f498:	cmp	r4, r3
    f49a:	bhi.n	f490 <__copybits+0x1c>
    f49c:	subs	r3, r4, r2
    f49e:	subs	r3, #21
    f4a0:	bic.w	r3, r3, #3
    f4a4:	adds	r3, #4
    f4a6:	add	r0, r3
    f4a8:	cmp	r6, r0
    f4aa:	bls.n	f4b6 <__copybits+0x42>
    f4ac:	movs	r3, #0
    f4ae:	str.w	r3, [r0], #4
    f4b2:	cmp	r6, r0
    f4b4:	bhi.n	f4ae <__copybits+0x3a>
    f4b6:	pop	{r4, r5, r6}
    f4b8:	bx	lr
    f4ba:	nop

0000f4bc <__any_on>:
    f4bc:	ldr	r3, [r0, #16]
    f4be:	asrs	r2, r1, #5
    f4c0:	cmp	r3, r2
    f4c2:	push	{r4}
    f4c4:	add.w	r4, r0, #20
    f4c8:	bge.n	f4ec <__any_on+0x30>
    f4ca:	add.w	r3, r4, r3, lsl #2
    f4ce:	cmp	r4, r3
    f4d0:	bcs.n	f516 <__any_on+0x5a>
    f4d2:	ldr.w	r0, [r3, #-4]
    f4d6:	subs	r3, #4
    f4d8:	cbz	r0, f4e2 <__any_on+0x26>
    f4da:	b.n	f508 <__any_on+0x4c>
    f4dc:	ldr.w	r2, [r3, #-4]!
    f4e0:	cbnz	r2, f508 <__any_on+0x4c>
    f4e2:	cmp	r4, r3
    f4e4:	bcc.n	f4dc <__any_on+0x20>
    f4e6:	ldr.w	r4, [sp], #4
    f4ea:	bx	lr
    f4ec:	ble.n	f510 <__any_on+0x54>
    f4ee:	ands.w	r1, r1, #31
    f4f2:	beq.n	f510 <__any_on+0x54>
    f4f4:	ldr.w	r0, [r4, r2, lsl #2]
    f4f8:	lsr.w	r3, r0, r1
    f4fc:	lsl.w	r1, r3, r1
    f500:	cmp	r0, r1
    f502:	add.w	r3, r4, r2, lsl #2
    f506:	beq.n	f4ce <__any_on+0x12>
    f508:	movs	r0, #1
    f50a:	ldr.w	r4, [sp], #4
    f50e:	bx	lr
    f510:	add.w	r3, r4, r2, lsl #2
    f514:	b.n	f4ce <__any_on+0x12>
    f516:	movs	r0, #0
    f518:	b.n	f4e6 <__any_on+0x2a>
    f51a:	nop

0000f51c <__sccl>:
    f51c:	push	{r4, r5, r6}
    f51e:	ldrb	r5, [r1, #0]
    f520:	cmp	r5, #94	; 0x5e
    f522:	beq.n	f584 <__sccl+0x68>
    f524:	movs	r2, #0
    f526:	adds	r1, #1
    f528:	mov	r6, r2
    f52a:	subs	r3, r0, #1
    f52c:	add.w	r4, r0, #255	; 0xff
    f530:	strb.w	r2, [r3, #1]!
    f534:	cmp	r3, r4
    f536:	bne.n	f530 <__sccl+0x14>
    f538:	cbz	r5, f55c <__sccl+0x40>
    f53a:	eor.w	r2, r6, #1
    f53e:	strb	r2, [r0, r5]
    f540:	adds	r4, r1, #1
    f542:	ldrb.w	r3, [r4, #-1]
    f546:	cmp	r3, #45	; 0x2d
    f548:	beq.n	f568 <__sccl+0x4c>
    f54a:	cmp	r3, #93	; 0x5d
    f54c:	beq.n	f562 <__sccl+0x46>
    f54e:	cbz	r3, f556 <__sccl+0x3a>
    f550:	mov	r5, r3
    f552:	mov	r1, r4
    f554:	b.n	f53e <__sccl+0x22>
    f556:	mov	r0, r1
    f558:	pop	{r4, r5, r6}
    f55a:	bx	lr
    f55c:	subs	r0, r1, #1
    f55e:	pop	{r4, r5, r6}
    f560:	bx	lr
    f562:	mov	r0, r4
    f564:	pop	{r4, r5, r6}
    f566:	bx	lr
    f568:	ldrb	r6, [r1, #1]
    f56a:	cmp	r6, #93	; 0x5d
    f56c:	beq.n	f550 <__sccl+0x34>
    f56e:	cmp	r5, r6
    f570:	bgt.n	f550 <__sccl+0x34>
    f572:	adds	r1, #2
    f574:	adds	r3, r0, r5
    f576:	adds	r5, #1
    f578:	cmp	r6, r5
    f57a:	strb.w	r2, [r3, #1]!
    f57e:	bgt.n	f576 <__sccl+0x5a>
    f580:	adds	r4, #2
    f582:	b.n	f542 <__sccl+0x26>
    f584:	movs	r2, #1
    f586:	ldrb	r5, [r1, #1]
    f588:	mov	r6, r2
    f58a:	adds	r1, #2
    f58c:	b.n	f52a <__sccl+0xe>
    f58e:	nop

0000f590 <nanf>:
    f590:	vldr	s0, [pc, #4]	; f598 <nanf+0x8>
    f594:	bx	lr
    f596:	nop
    f598:	.word	0x7fc00000

0000f59c <_strtoll_l.isra.0>:
    f59c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f5a0:	sub	sp, #20
    f5a2:	mov	sl, r3
    f5a4:	str	r1, [sp, #8]
    f5a6:	str	r0, [sp, #12]
    f5a8:	str	r2, [sp, #4]
    f5aa:	mov	r7, r1
    f5ac:	ldr	r6, [sp, #56]	; 0x38
    f5ae:	b.n	f5b2 <_strtoll_l.isra.0+0x16>
    f5b0:	mov	r7, r5
    f5b2:	mov	r5, r7
    f5b4:	mov	r0, r6
    f5b6:	ldrb.w	r4, [r5], #1
    f5ba:	bl	8f7c <__locale_ctype_ptr_l>
    f5be:	add	r0, r4
    f5c0:	ldrb	r3, [r0, #1]
    f5c2:	and.w	r3, r3, #8
    f5c6:	and.w	r2, r3, #255	; 0xff
    f5ca:	cmp	r3, #0
    f5cc:	bne.n	f5b0 <_strtoll_l.isra.0+0x14>
    f5ce:	cmp	r4, #45	; 0x2d
    f5d0:	beq.w	f6da <_strtoll_l.isra.0+0x13e>
    f5d4:	cmp	r4, #43	; 0x2b
    f5d6:	it	eq
    f5d8:	ldrbeq	r4, [r7, #1]
    f5da:	str	r2, [sp, #0]
    f5dc:	it	eq
    f5de:	addeq	r5, r7, #2
    f5e0:	cmp.w	sl, #0
    f5e4:	beq.n	f600 <_strtoll_l.isra.0+0x64>
    f5e6:	cmp.w	sl, #16
    f5ea:	beq.w	f718 <_strtoll_l.isra.0+0x17c>
    f5ee:	ldr	r3, [sp, #0]
    f5f0:	mov	r6, sl
    f5f2:	asrs	r7, r6, #31
    f5f4:	cbnz	r3, f612 <_strtoll_l.isra.0+0x76>
    f5f6:	mov.w	r8, #4294967295
    f5fa:	mvn.w	r9, #2147483648	; 0x80000000
    f5fe:	b.n	f61a <_strtoll_l.isra.0+0x7e>
    f600:	cmp	r4, #48	; 0x30
    f602:	beq.n	f704 <_strtoll_l.isra.0+0x168>
    f604:	movs	r6, #10
    f606:	movs	r7, #0
    f608:	mov.w	sl, #10
    f60c:	ldr	r3, [sp, #0]
    f60e:	cmp	r3, #0
    f610:	beq.n	f5f6 <_strtoll_l.isra.0+0x5a>
    f612:	mov.w	r8, #0
    f616:	mov.w	r9, #2147483648	; 0x80000000
    f61a:	mov	r2, r6
    f61c:	mov	r3, r7
    f61e:	mov	r0, r8
    f620:	mov	r1, r9
    f622:	bl	8bc8 <__aeabi_uldivmod>
    f626:	mov	r3, r7
    f628:	mov	fp, r2
    f62a:	mov	r0, r8
    f62c:	mov	r2, r6
    f62e:	mov	r1, r9
    f630:	bl	8bc8 <__aeabi_uldivmod>
    f634:	mov.w	lr, #0
    f638:	movs	r2, #0
    f63a:	movs	r3, #0
    f63c:	b.n	f65e <_strtoll_l.isra.0+0xc2>
    f63e:	beq.n	f6cc <_strtoll_l.isra.0+0x130>
    f640:	mul.w	r4, r2, r7
    f644:	mla	r4, r6, r3, r4
    f648:	umull	r2, r3, r2, r6
    f64c:	add	r3, r4
    f64e:	adds.w	r2, r2, ip
    f652:	adc.w	r3, r3, ip, asr #31
    f656:	mov.w	lr, #1
    f65a:	ldrb.w	r4, [r5], #1
    f65e:	sub.w	ip, r4, #48	; 0x30
    f662:	cmp.w	ip, #9
    f666:	bls.n	f676 <_strtoll_l.isra.0+0xda>
    f668:	sub.w	ip, r4, #65	; 0x41
    f66c:	cmp.w	ip, #25
    f670:	bhi.n	f68e <_strtoll_l.isra.0+0xf2>
    f672:	sub.w	ip, r4, #55	; 0x37
    f676:	cmp	sl, ip
    f678:	ble.n	f6a0 <_strtoll_l.isra.0+0x104>
    f67a:	cmp.w	lr, #4294967295
    f67e:	beq.n	f65a <_strtoll_l.isra.0+0xbe>
    f680:	cmp	r1, r3
    f682:	it	eq
    f684:	cmpeq	r0, r2
    f686:	bcs.n	f63e <_strtoll_l.isra.0+0xa2>
    f688:	mov.w	lr, #4294967295
    f68c:	b.n	f65a <_strtoll_l.isra.0+0xbe>
    f68e:	sub.w	ip, r4, #97	; 0x61
    f692:	cmp.w	ip, #25
    f696:	bhi.n	f6a0 <_strtoll_l.isra.0+0x104>
    f698:	sub.w	ip, r4, #87	; 0x57
    f69c:	cmp	sl, ip
    f69e:	bgt.n	f67a <_strtoll_l.isra.0+0xde>
    f6a0:	cmp.w	lr, #4294967295
    f6a4:	beq.n	f6e4 <_strtoll_l.isra.0+0x148>
    f6a6:	ldr	r1, [sp, #0]
    f6a8:	cbz	r1, f6b0 <_strtoll_l.isra.0+0x114>
    f6aa:	negs	r2, r2
    f6ac:	sbc.w	r3, r3, r3, lsl #1
    f6b0:	ldr	r1, [sp, #4]
    f6b2:	cmp	r1, #0
    f6b4:	beq.n	f73c <_strtoll_l.isra.0+0x1a0>
    f6b6:	cmp.w	lr, #0
    f6ba:	bne.n	f6fc <_strtoll_l.isra.0+0x160>
    f6bc:	ldr	r5, [sp, #8]
    f6be:	mov	r0, r2
    f6c0:	mov	r1, r3
    f6c2:	ldr	r3, [sp, #4]
    f6c4:	str	r5, [r3, #0]
    f6c6:	add	sp, #20
    f6c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f6cc:	cmp	fp, ip
    f6ce:	bge.n	f640 <_strtoll_l.isra.0+0xa4>
    f6d0:	mov	r2, r0
    f6d2:	mov	r3, r1
    f6d4:	mov.w	lr, #4294967295
    f6d8:	b.n	f65a <_strtoll_l.isra.0+0xbe>
    f6da:	movs	r3, #1
    f6dc:	adds	r5, r7, #2
    f6de:	ldrb	r4, [r7, #1]
    f6e0:	str	r3, [sp, #0]
    f6e2:	b.n	f5e0 <_strtoll_l.isra.0+0x44>
    f6e4:	ldr	r3, [sp, #0]
    f6e6:	cbnz	r3, f734 <_strtoll_l.isra.0+0x198>
    f6e8:	mov.w	r0, #4294967295
    f6ec:	mvn.w	r1, #2147483648	; 0x80000000
    f6f0:	ldr	r2, [sp, #12]
    f6f2:	movs	r3, #34	; 0x22
    f6f4:	str	r3, [r2, #0]
    f6f6:	ldr	r3, [sp, #4]
    f6f8:	cbnz	r3, f700 <_strtoll_l.isra.0+0x164>
    f6fa:	b.n	f6c6 <_strtoll_l.isra.0+0x12a>
    f6fc:	mov	r0, r2
    f6fe:	mov	r1, r3
    f700:	subs	r5, #1
    f702:	b.n	f6c2 <_strtoll_l.isra.0+0x126>
    f704:	ldrb	r3, [r5, #0]
    f706:	and.w	r3, r3, #223	; 0xdf
    f70a:	cmp	r3, #88	; 0x58
    f70c:	beq.n	f726 <_strtoll_l.isra.0+0x18a>
    f70e:	movs	r6, #8
    f710:	movs	r7, #0
    f712:	mov.w	sl, #8
    f716:	b.n	f60c <_strtoll_l.isra.0+0x70>
    f718:	cmp	r4, #48	; 0x30
    f71a:	bne.n	f742 <_strtoll_l.isra.0+0x1a6>
    f71c:	ldrb	r3, [r5, #0]
    f71e:	and.w	r3, r3, #223	; 0xdf
    f722:	cmp	r3, #88	; 0x58
    f724:	bne.n	f742 <_strtoll_l.isra.0+0x1a6>
    f726:	ldrb	r4, [r5, #1]
    f728:	movs	r6, #16
    f72a:	movs	r7, #0
    f72c:	adds	r5, #2
    f72e:	mov.w	sl, #16
    f732:	b.n	f60c <_strtoll_l.isra.0+0x70>
    f734:	movs	r0, #0
    f736:	mov.w	r1, #2147483648	; 0x80000000
    f73a:	b.n	f6f0 <_strtoll_l.isra.0+0x154>
    f73c:	mov	r0, r2
    f73e:	mov	r1, r3
    f740:	b.n	f6c6 <_strtoll_l.isra.0+0x12a>
    f742:	movs	r6, #16
    f744:	movs	r7, #0
    f746:	b.n	f60c <_strtoll_l.isra.0+0x70>

0000f748 <_strtoll_r>:
    f748:	push	{r4, r5, lr}
    f74a:	ldr	r4, [pc, #24]	; (f764 <_strtoll_r+0x1c>)
    f74c:	ldr	r5, [pc, #24]	; (f768 <_strtoll_r+0x20>)
    f74e:	ldr	r4, [r4, #0]
    f750:	ldr	r4, [r4, #52]	; 0x34
    f752:	sub	sp, #12
    f754:	cmp	r4, #0
    f756:	it	eq
    f758:	moveq	r4, r5
    f75a:	str	r4, [sp, #0]
    f75c:	bl	f59c <_strtoll_l.isra.0>
    f760:	add	sp, #12
    f762:	pop	{r4, r5, pc}
    f764:	.word	0x2000215c
    f768:	.word	0x20001be0

0000f76c <_strtoul_l.isra.0>:
    f76c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f770:	ldr.w	r9, [sp, #40]	; 0x28
    f774:	mov	r6, r1
    f776:	mov	r7, r0
    f778:	mov	r5, r2
    f77a:	mov	r8, r3
    f77c:	mov	fp, r1
    f77e:	b.n	f782 <_strtoul_l.isra.0+0x16>
    f780:	mov	fp, r4
    f782:	mov	r4, fp
    f784:	mov	r0, r9
    f786:	ldrb.w	sl, [r4], #1
    f78a:	bl	8f7c <__locale_ctype_ptr_l>
    f78e:	add	r0, sl
    f790:	ldrb	r0, [r0, #1]
    f792:	and.w	r0, r0, #8
    f796:	and.w	ip, r0, #255	; 0xff
    f79a:	cmp	r0, #0
    f79c:	bne.n	f780 <_strtoul_l.isra.0+0x14>
    f79e:	mov	r1, sl
    f7a0:	cmp	r1, #45	; 0x2d
    f7a2:	beq.n	f868 <_strtoul_l.isra.0+0xfc>
    f7a4:	cmp	r1, #43	; 0x2b
    f7a6:	itt	eq
    f7a8:	ldrbeq.w	r1, [fp, #1]
    f7ac:	addeq.w	r4, fp, #2
    f7b0:	cmp.w	r8, #0
    f7b4:	beq.n	f7d0 <_strtoul_l.isra.0+0x64>
    f7b6:	cmp.w	r8, #16
    f7ba:	beq.n	f876 <_strtoul_l.isra.0+0x10a>
    f7bc:	mov.w	r3, #4294967295
    f7c0:	udiv	r3, r3, r8
    f7c4:	mul.w	sl, r8, r3
    f7c8:	mvn.w	sl, sl
    f7cc:	mov	r9, r8
    f7ce:	b.n	f7e0 <_strtoul_l.isra.0+0x74>
    f7d0:	cmp	r1, #48	; 0x30
    f7d2:	beq.n	f898 <_strtoul_l.isra.0+0x12c>
    f7d4:	mov.w	r8, #10
    f7d8:	ldr	r3, [pc, #244]	; (f8d0 <_strtoul_l.isra.0+0x164>)
    f7da:	mov	r9, r8
    f7dc:	mov.w	sl, #5
    f7e0:	mov.w	lr, #0
    f7e4:	mov	r0, lr
    f7e6:	b.n	f7f6 <_strtoul_l.isra.0+0x8a>
    f7e8:	beq.n	f84a <_strtoul_l.isra.0+0xde>
    f7ea:	mla	r0, r9, r0, r2
    f7ee:	mov.w	lr, #1
    f7f2:	ldrb.w	r1, [r4], #1
    f7f6:	sub.w	r2, r1, #48	; 0x30
    f7fa:	cmp	r2, #9
    f7fc:	bls.n	f80a <_strtoul_l.isra.0+0x9e>
    f7fe:	sub.w	r2, r1, #65	; 0x41
    f802:	cmp	r2, #25
    f804:	bhi.n	f81e <_strtoul_l.isra.0+0xb2>
    f806:	sub.w	r2, r1, #55	; 0x37
    f80a:	cmp	r8, r2
    f80c:	ble.n	f82e <_strtoul_l.isra.0+0xc2>
    f80e:	cmp.w	lr, #4294967295
    f812:	beq.n	f7f2 <_strtoul_l.isra.0+0x86>
    f814:	cmp	r0, r3
    f816:	bls.n	f7e8 <_strtoul_l.isra.0+0x7c>
    f818:	mov.w	lr, #4294967295
    f81c:	b.n	f7f2 <_strtoul_l.isra.0+0x86>
    f81e:	sub.w	r2, r1, #97	; 0x61
    f822:	cmp	r2, #25
    f824:	bhi.n	f82e <_strtoul_l.isra.0+0xc2>
    f826:	sub.w	r2, r1, #87	; 0x57
    f82a:	cmp	r8, r2
    f82c:	bgt.n	f80e <_strtoul_l.isra.0+0xa2>
    f82e:	cmp.w	lr, #4294967295
    f832:	beq.n	f858 <_strtoul_l.isra.0+0xec>
    f834:	cmp.w	ip, #0
    f838:	beq.n	f83c <_strtoul_l.isra.0+0xd0>
    f83a:	negs	r0, r0
    f83c:	cbz	r5, f854 <_strtoul_l.isra.0+0xe8>
    f83e:	cmp.w	lr, #0
    f842:	bne.n	f860 <_strtoul_l.isra.0+0xf4>
    f844:	str	r6, [r5, #0]
    f846:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f84a:	cmp	r2, sl
    f84c:	ble.n	f7ea <_strtoul_l.isra.0+0x7e>
    f84e:	mov.w	lr, #4294967295
    f852:	b.n	f7f2 <_strtoul_l.isra.0+0x86>
    f854:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f858:	movs	r3, #34	; 0x22
    f85a:	str	r3, [r7, #0]
    f85c:	mov	r0, lr
    f85e:	cbz	r5, f8b2 <_strtoul_l.isra.0+0x146>
    f860:	subs	r6, r4, #1
    f862:	str	r6, [r5, #0]
    f864:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f868:	add.w	r4, fp, #2
    f86c:	ldrb.w	r1, [fp, #1]
    f870:	mov.w	ip, #1
    f874:	b.n	f7b0 <_strtoul_l.isra.0+0x44>
    f876:	cmp	r1, #48	; 0x30
    f878:	bne.n	f8b6 <_strtoul_l.isra.0+0x14a>
    f87a:	ldrb	r3, [r4, #0]
    f87c:	and.w	r3, r3, #223	; 0xdf
    f880:	cmp	r3, #88	; 0x58
    f882:	bne.n	f8c2 <_strtoul_l.isra.0+0x156>
    f884:	mov.w	r9, #16
    f888:	ldrb	r1, [r4, #1]
    f88a:	mov	r8, r9
    f88c:	mov.w	sl, #15
    f890:	adds	r4, #2
    f892:	mvn.w	r3, #4026531840	; 0xf0000000
    f896:	b.n	f7e0 <_strtoul_l.isra.0+0x74>
    f898:	ldrb	r3, [r4, #0]
    f89a:	and.w	r3, r3, #223	; 0xdf
    f89e:	cmp	r3, #88	; 0x58
    f8a0:	beq.n	f884 <_strtoul_l.isra.0+0x118>
    f8a2:	mov.w	r8, #8
    f8a6:	mov	r9, r8
    f8a8:	mov.w	sl, #7
    f8ac:	mvn.w	r3, #3758096384	; 0xe0000000
    f8b0:	b.n	f7e0 <_strtoul_l.isra.0+0x74>
    f8b2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f8b6:	mov.w	sl, #15
    f8ba:	mvn.w	r3, #4026531840	; 0xf0000000
    f8be:	mov	r9, r8
    f8c0:	b.n	f7e0 <_strtoul_l.isra.0+0x74>
    f8c2:	mov	r9, r8
    f8c4:	mov.w	sl, #15
    f8c8:	mvn.w	r3, #4026531840	; 0xf0000000
    f8cc:	b.n	f7e0 <_strtoul_l.isra.0+0x74>
    f8ce:	nop
    f8d0:	.word	0x19999999

0000f8d4 <_strtoul_r>:
    f8d4:	push	{r4, r5, lr}
    f8d6:	ldr	r4, [pc, #24]	; (f8f0 <_strtoul_r+0x1c>)
    f8d8:	ldr	r5, [pc, #24]	; (f8f4 <_strtoul_r+0x20>)
    f8da:	ldr	r4, [r4, #0]
    f8dc:	ldr	r4, [r4, #52]	; 0x34
    f8de:	sub	sp, #12
    f8e0:	cmp	r4, #0
    f8e2:	it	eq
    f8e4:	moveq	r4, r5
    f8e6:	str	r4, [sp, #0]
    f8e8:	bl	f76c <_strtoul_l.isra.0>
    f8ec:	add	sp, #12
    f8ee:	pop	{r4, r5, pc}
    f8f0:	.word	0x2000215c
    f8f4:	.word	0x20001be0

0000f8f8 <_strtoull_l.isra.0>:
    f8f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8fc:	sub	sp, #20
    f8fe:	mov	fp, r1
    f900:	str	r0, [sp, #8]
    f902:	mov	r7, r2
    f904:	mov	r6, r3
    f906:	mov	r8, r1
    f908:	ldr	r4, [sp, #56]	; 0x38
    f90a:	b.n	f90e <_strtoull_l.isra.0+0x16>
    f90c:	mov	r8, r5
    f90e:	mov	r5, r8
    f910:	mov	r0, r4
    f912:	ldrb.w	r9, [r5], #1
    f916:	bl	8f7c <__locale_ctype_ptr_l>
    f91a:	add	r0, r9
    f91c:	ldrb	r3, [r0, #1]
    f91e:	and.w	r3, r3, #8
    f922:	and.w	r2, r3, #255	; 0xff
    f926:	cmp	r3, #0
    f928:	bne.n	f90c <_strtoull_l.isra.0+0x14>
    f92a:	mov	r4, r9
    f92c:	cmp	r4, #45	; 0x2d
    f92e:	beq.w	fa4a <_strtoull_l.isra.0+0x152>
    f932:	cmp	r4, #43	; 0x2b
    f934:	it	eq
    f936:	ldrbeq.w	r4, [r8, #1]
    f93a:	str	r2, [sp, #4]
    f93c:	it	eq
    f93e:	addeq.w	r5, r8, #2
    f942:	cbz	r6, f97c <_strtoull_l.isra.0+0x84>
    f944:	cmp	r6, #16
    f946:	beq.w	fa58 <_strtoull_l.isra.0+0x160>
    f94a:	mov.w	r9, r6, asr #31
    f94e:	mov	r2, r6
    f950:	mov	r3, r9
    f952:	mov.w	r0, #4294967295
    f956:	mov.w	r1, #4294967295
    f95a:	bl	8bc8 <__aeabi_uldivmod>
    f95e:	mov	r2, r6
    f960:	str	r0, [sp, #12]
    f962:	mov	sl, r1
    f964:	mov	r3, r9
    f966:	mov.w	r0, #4294967295
    f96a:	mov.w	r1, #4294967295
    f96e:	bl	8bc8 <__aeabi_uldivmod>
    f972:	mov	r8, r6
    f974:	mov	lr, r2
    f976:	ldr	r2, [sp, #12]
    f978:	mov	r3, sl
    f97a:	b.n	f996 <_strtoull_l.isra.0+0x9e>
    f97c:	cmp	r4, #48	; 0x30
    f97e:	beq.w	fa84 <_strtoull_l.isra.0+0x18c>
    f982:	ldr	r3, [pc, #348]	; (fae0 <_strtoull_l.isra.0+0x1e8>)
    f984:	mov.w	lr, #5
    f988:	mov.w	r2, #2576980377	; 0x99999999
    f98c:	mov.w	r8, #10
    f990:	mov.w	r9, #0
    f994:	movs	r6, #10
    f996:	mov.w	ip, #0
    f99a:	movs	r0, #0
    f99c:	movs	r1, #0
    f99e:	b.n	f9c6 <_strtoull_l.isra.0+0xce>
    f9a0:	cmp	r1, r3
    f9a2:	it	eq
    f9a4:	cmpeq	r0, r2
    f9a6:	beq.n	fa2a <_strtoull_l.isra.0+0x132>
    f9a8:	mul.w	r4, r0, r9
    f9ac:	mla	r4, r8, r1, r4
    f9b0:	umull	r0, r1, r0, r8
    f9b4:	add	r1, r4
    f9b6:	adds.w	r0, r0, sl
    f9ba:	adc.w	r1, r1, sl, asr #31
    f9be:	mov.w	ip, #1
    f9c2:	ldrb.w	r4, [r5], #1
    f9c6:	sub.w	sl, r4, #48	; 0x30
    f9ca:	cmp.w	sl, #9
    f9ce:	bls.n	f9de <_strtoull_l.isra.0+0xe6>
    f9d0:	sub.w	sl, r4, #65	; 0x41
    f9d4:	cmp.w	sl, #25
    f9d8:	bhi.n	f9f6 <_strtoull_l.isra.0+0xfe>
    f9da:	sub.w	sl, r4, #55	; 0x37
    f9de:	cmp	r6, sl
    f9e0:	ble.n	fa08 <_strtoull_l.isra.0+0x110>
    f9e2:	cmp.w	ip, #4294967295
    f9e6:	beq.n	f9c2 <_strtoull_l.isra.0+0xca>
    f9e8:	cmp	r3, r1
    f9ea:	it	eq
    f9ec:	cmpeq	r2, r0
    f9ee:	bcs.n	f9a0 <_strtoull_l.isra.0+0xa8>
    f9f0:	mov.w	ip, #4294967295
    f9f4:	b.n	f9c2 <_strtoull_l.isra.0+0xca>
    f9f6:	sub.w	sl, r4, #97	; 0x61
    f9fa:	cmp.w	sl, #25
    f9fe:	bhi.n	fa08 <_strtoull_l.isra.0+0x110>
    fa00:	sub.w	sl, r4, #87	; 0x57
    fa04:	cmp	r6, sl
    fa06:	bgt.n	f9e2 <_strtoull_l.isra.0+0xea>
    fa08:	cmp.w	ip, #4294967295
    fa0c:	beq.n	fa34 <_strtoull_l.isra.0+0x13c>
    fa0e:	ldr	r3, [sp, #4]
    fa10:	cbz	r3, fa18 <_strtoull_l.isra.0+0x120>
    fa12:	negs	r0, r0
    fa14:	sbc.w	r1, r1, r1, lsl #1
    fa18:	cbz	r7, fa24 <_strtoull_l.isra.0+0x12c>
    fa1a:	cmp.w	ip, #0
    fa1e:	bne.n	fa46 <_strtoull_l.isra.0+0x14e>
    fa20:	mov	r5, fp
    fa22:	str	r5, [r7, #0]
    fa24:	add	sp, #20
    fa26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa2a:	cmp	sl, lr
    fa2c:	ble.n	f9a8 <_strtoull_l.isra.0+0xb0>
    fa2e:	mov.w	ip, #4294967295
    fa32:	b.n	f9c2 <_strtoull_l.isra.0+0xca>
    fa34:	ldr	r2, [sp, #8]
    fa36:	movs	r3, #34	; 0x22
    fa38:	str	r3, [r2, #0]
    fa3a:	mov.w	r0, #4294967295
    fa3e:	mov.w	r1, #4294967295
    fa42:	cmp	r7, #0
    fa44:	beq.n	fa24 <_strtoull_l.isra.0+0x12c>
    fa46:	subs	r5, #1
    fa48:	b.n	fa22 <_strtoull_l.isra.0+0x12a>
    fa4a:	movs	r3, #1
    fa4c:	add.w	r5, r8, #2
    fa50:	ldrb.w	r4, [r8, #1]
    fa54:	str	r3, [sp, #4]
    fa56:	b.n	f942 <_strtoull_l.isra.0+0x4a>
    fa58:	cmp	r4, #48	; 0x30
    fa5a:	bne.n	faa6 <_strtoull_l.isra.0+0x1ae>
    fa5c:	ldrb	r3, [r5, #0]
    fa5e:	and.w	r3, r3, #223	; 0xdf
    fa62:	cmp	r3, #88	; 0x58
    fa64:	bne.n	fabc <_strtoull_l.isra.0+0x1c4>
    fa66:	mov.w	r3, #4294967295
    fa6a:	ldrb	r4, [r5, #1]
    fa6c:	str	r3, [sp, #12]
    fa6e:	mov.w	lr, #15
    fa72:	adds	r5, #2
    fa74:	mvn.w	sl, #4026531840	; 0xf0000000
    fa78:	mov.w	r8, #16
    fa7c:	mov.w	r9, #0
    fa80:	movs	r6, #16
    fa82:	b.n	f976 <_strtoull_l.isra.0+0x7e>
    fa84:	ldrb	r3, [r5, #0]
    fa86:	and.w	r3, r3, #223	; 0xdf
    fa8a:	cmp	r3, #88	; 0x58
    fa8c:	beq.n	fa66 <_strtoull_l.isra.0+0x16e>
    fa8e:	mov.w	lr, #7
    fa92:	mov.w	r2, #4294967295
    fa96:	mvn.w	r3, #3758096384	; 0xe0000000
    fa9a:	mov.w	r8, #8
    fa9e:	mov.w	r9, #0
    faa2:	movs	r6, #8
    faa4:	b.n	f996 <_strtoull_l.isra.0+0x9e>
    faa6:	mov.w	lr, #15
    faaa:	mov.w	r2, #4294967295
    faae:	mvn.w	r3, #4026531840	; 0xf0000000
    fab2:	mov.w	r8, #16
    fab6:	mov.w	r9, #0
    faba:	b.n	f996 <_strtoull_l.isra.0+0x9e>
    fabc:	mov.w	r8, #16
    fac0:	mov.w	r9, #0
    fac4:	mov	r2, r8
    fac6:	mov	r3, r9
    fac8:	mov.w	r0, #4294967295
    facc:	mov.w	r1, #4294967295
    fad0:	bl	8bc8 <__aeabi_uldivmod>
    fad4:	mvn.w	r3, #4026531840	; 0xf0000000
    fad8:	mov	lr, r2
    fada:	mov.w	r2, #4294967295
    fade:	b.n	f996 <_strtoull_l.isra.0+0x9e>
    fae0:	.word	0x19999999

0000fae4 <_strtoull_r>:
    fae4:	push	{r4, r5, lr}
    fae6:	ldr	r4, [pc, #24]	; (fb00 <_strtoull_r+0x1c>)
    fae8:	ldr	r5, [pc, #24]	; (fb04 <_strtoull_r+0x20>)
    faea:	ldr	r4, [r4, #0]
    faec:	ldr	r4, [r4, #52]	; 0x34
    faee:	sub	sp, #12
    faf0:	cmp	r4, #0
    faf2:	it	eq
    faf4:	moveq	r4, r5
    faf6:	str	r4, [sp, #0]
    faf8:	bl	f8f8 <_strtoull_l.isra.0>
    fafc:	add	sp, #12
    fafe:	pop	{r4, r5, pc}
    fb00:	.word	0x2000215c
    fb04:	.word	0x20001be0

0000fb08 <__ssprint_r>:
    fb08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb0c:	ldr	r3, [r2, #8]
    fb0e:	sub	sp, #12
    fb10:	mov	r8, r2
    fb12:	cmp	r3, #0
    fb14:	beq.n	fbfc <__ssprint_r+0xf4>
    fb16:	mov	fp, r0
    fb18:	mov.w	r9, #0
    fb1c:	ldr	r6, [r2, #0]
    fb1e:	ldr	r0, [r1, #0]
    fb20:	ldr	r3, [r1, #8]
    fb22:	mov	r5, r1
    fb24:	mov	r4, r9
    fb26:	cmp	r4, #0
    fb28:	beq.n	fbb6 <__ssprint_r+0xae>
    fb2a:	cmp	r4, r3
    fb2c:	mov	r7, r3
    fb2e:	mov	sl, r3
    fb30:	bcc.n	fbc0 <__ssprint_r+0xb8>
    fb32:	ldrh	r3, [r5, #12]
    fb34:	tst.w	r3, #1152	; 0x480
    fb38:	beq.n	fb96 <__ssprint_r+0x8e>
    fb3a:	ldr	r7, [r5, #20]
    fb3c:	ldr	r1, [r5, #16]
    fb3e:	add.w	r7, r7, r7, lsl #1
    fb42:	rsb	sl, r1, r0
    fb46:	add.w	r7, r7, r7, lsr #31
    fb4a:	adds	r0, r4, #1
    fb4c:	asrs	r7, r7, #1
    fb4e:	add	r0, sl
    fb50:	cmp	r0, r7
    fb52:	mov	r2, r7
    fb54:	itt	hi
    fb56:	movhi	r7, r0
    fb58:	movhi	r2, r7
    fb5a:	lsls	r3, r3, #21
    fb5c:	bpl.n	fbc6 <__ssprint_r+0xbe>
    fb5e:	mov	r1, r2
    fb60:	mov	r0, fp
    fb62:	bl	8fb8 <_malloc_r>
    fb66:	cmp	r0, #0
    fb68:	beq.n	fbda <__ssprint_r+0xd2>
    fb6a:	mov	r2, sl
    fb6c:	ldr	r1, [r5, #16]
    fb6e:	str	r0, [sp, #4]
    fb70:	bl	68c4 <memcpy>
    fb74:	ldrh	r2, [r5, #12]
    fb76:	ldr	r3, [sp, #4]
    fb78:	bic.w	r2, r2, #1152	; 0x480
    fb7c:	orr.w	r2, r2, #128	; 0x80
    fb80:	strh	r2, [r5, #12]
    fb82:	rsb	r2, sl, r7
    fb86:	add.w	r0, r3, sl
    fb8a:	str	r7, [r5, #20]
    fb8c:	str	r3, [r5, #16]
    fb8e:	str	r0, [r5, #0]
    fb90:	str	r2, [r5, #8]
    fb92:	mov	r7, r4
    fb94:	mov	sl, r4
    fb96:	mov	r2, sl
    fb98:	mov	r1, r9
    fb9a:	bl	9664 <memmove>
    fb9e:	ldr.w	r2, [r8, #8]
    fba2:	ldr	r3, [r5, #8]
    fba4:	ldr	r0, [r5, #0]
    fba6:	subs	r3, r3, r7
    fba8:	add	r0, sl
    fbaa:	subs	r4, r2, r4
    fbac:	str	r3, [r5, #8]
    fbae:	str	r0, [r5, #0]
    fbb0:	str.w	r4, [r8, #8]
    fbb4:	cbz	r4, fbfc <__ssprint_r+0xf4>
    fbb6:	ldr.w	r9, [r6]
    fbba:	ldr	r4, [r6, #4]
    fbbc:	adds	r6, #8
    fbbe:	b.n	fb26 <__ssprint_r+0x1e>
    fbc0:	mov	r7, r4
    fbc2:	mov	sl, r4
    fbc4:	b.n	fb96 <__ssprint_r+0x8e>
    fbc6:	mov	r0, fp
    fbc8:	bl	97d0 <_realloc_r>
    fbcc:	mov	r3, r0
    fbce:	cmp	r0, #0
    fbd0:	bne.n	fb82 <__ssprint_r+0x7a>
    fbd2:	ldr	r1, [r5, #16]
    fbd4:	mov	r0, fp
    fbd6:	bl	e268 <_free_r>
    fbda:	movs	r3, #12
    fbdc:	str.w	r3, [fp]
    fbe0:	ldrh	r3, [r5, #12]
    fbe2:	movs	r2, #0
    fbe4:	orr.w	r3, r3, #64	; 0x40
    fbe8:	mov.w	r0, #4294967295
    fbec:	strh	r3, [r5, #12]
    fbee:	str.w	r2, [r8, #8]
    fbf2:	str.w	r2, [r8, #4]
    fbf6:	add	sp, #12
    fbf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fbfc:	movs	r0, #0
    fbfe:	str.w	r0, [r8, #4]
    fc02:	add	sp, #12
    fc04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fc08 <_sungetc_r>:
    fc08:	adds	r3, r1, #1
    fc0a:	push	{r4, r5, r6, lr}
    fc0c:	beq.n	fc46 <_sungetc_r+0x3e>
    fc0e:	ldrh	r3, [r2, #12]
    fc10:	ldr	r4, [r2, #48]	; 0x30
    fc12:	bic.w	r3, r3, #32
    fc16:	strh	r3, [r2, #12]
    fc18:	uxtb	r5, r1
    fc1a:	cbz	r4, fc4c <_sungetc_r+0x44>
    fc1c:	mov	r4, r2
    fc1e:	ldr	r2, [r2, #4]
    fc20:	ldr	r3, [r4, #52]	; 0x34
    fc22:	cmp	r2, r3
    fc24:	mov	r6, r1
    fc26:	bge.n	fc3c <_sungetc_r+0x34>
    fc28:	ldr	r3, [r4, #0]
    fc2a:	subs	r2, r3, #1
    fc2c:	str	r2, [r4, #0]
    fc2e:	strb.w	r6, [r3, #-1]
    fc32:	ldr	r3, [r4, #4]
    fc34:	adds	r3, #1
    fc36:	str	r3, [r4, #4]
    fc38:	mov	r0, r5
    fc3a:	pop	{r4, r5, r6, pc}
    fc3c:	mov	r1, r4
    fc3e:	bl	fd4c <__submore>
    fc42:	cmp	r0, #0
    fc44:	beq.n	fc28 <_sungetc_r+0x20>
    fc46:	mov.w	r5, #4294967295
    fc4a:	b.n	fc38 <_sungetc_r+0x30>
    fc4c:	ldr	r0, [r2, #16]
    fc4e:	ldr	r3, [r2, #0]
    fc50:	cbz	r0, fc5e <_sungetc_r+0x56>
    fc52:	cmp	r0, r3
    fc54:	bcs.n	fc5e <_sungetc_r+0x56>
    fc56:	ldrb.w	r0, [r3, #-1]
    fc5a:	cmp	r5, r0
    fc5c:	beq.n	fc7e <_sungetc_r+0x76>
    fc5e:	str	r3, [r2, #56]	; 0x38
    fc60:	mov	r3, r2
    fc62:	ldr	r6, [r2, #4]
    fc64:	str	r6, [r2, #60]	; 0x3c
    fc66:	add.w	r4, r2, #64	; 0x40
    fc6a:	movs	r0, #3
    fc6c:	str	r0, [r2, #52]	; 0x34
    fc6e:	str	r4, [r2, #48]	; 0x30
    fc70:	strb.w	r1, [r3, #66]!
    fc74:	movs	r1, #1
    fc76:	str	r3, [r2, #0]
    fc78:	str	r1, [r2, #4]
    fc7a:	mov	r0, r5
    fc7c:	pop	{r4, r5, r6, pc}
    fc7e:	ldr	r1, [r2, #4]
    fc80:	subs	r3, #1
    fc82:	adds	r1, #1
    fc84:	str	r3, [r2, #0]
    fc86:	str	r1, [r2, #4]
    fc88:	b.n	fc38 <_sungetc_r+0x30>
    fc8a:	nop

0000fc8c <__ssrefill_r>:
    fc8c:	push	{r4, lr}
    fc8e:	mov	r4, r1
    fc90:	ldr	r1, [r1, #48]	; 0x30
    fc92:	cbz	r1, fcb0 <__ssrefill_r+0x24>
    fc94:	add.w	r3, r4, #64	; 0x40
    fc98:	cmp	r1, r3
    fc9a:	beq.n	fca0 <__ssrefill_r+0x14>
    fc9c:	bl	e268 <_free_r>
    fca0:	ldr	r3, [r4, #60]	; 0x3c
    fca2:	str	r3, [r4, #4]
    fca4:	movs	r0, #0
    fca6:	str	r0, [r4, #48]	; 0x30
    fca8:	cbz	r3, fcb0 <__ssrefill_r+0x24>
    fcaa:	ldr	r3, [r4, #56]	; 0x38
    fcac:	str	r3, [r4, #0]
    fcae:	pop	{r4, pc}
    fcb0:	ldrh	r3, [r4, #12]
    fcb2:	ldr	r2, [r4, #16]
    fcb4:	str	r2, [r4, #0]
    fcb6:	orr.w	r3, r3, #32
    fcba:	movs	r2, #0
    fcbc:	strh	r3, [r4, #12]
    fcbe:	str	r2, [r4, #4]
    fcc0:	mov.w	r0, #4294967295
    fcc4:	pop	{r4, pc}
    fcc6:	nop

0000fcc8 <_sfread_r>:
    fcc8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fccc:	sub	sp, #12
    fcce:	mul.w	r9, r2, r3
    fcd2:	str	r2, [sp, #4]
    fcd4:	mov	sl, r3
    fcd6:	ldr	r4, [sp, #48]	; 0x30
    fcd8:	cmp.w	r9, #0
    fcdc:	beq.n	fd32 <_sfread_r+0x6a>
    fcde:	mov	r7, r0
    fce0:	mov	r6, r1
    fce2:	mov	r5, r9
    fce4:	mov.w	r8, #0
    fce8:	b.n	fd0a <_sfread_r+0x42>
    fcea:	ldr	r1, [r4, #0]
    fcec:	bl	68c4 <memcpy>
    fcf0:	ldr	r2, [r4, #0]
    fcf2:	str.w	r8, [r4, #4]
    fcf6:	add	r2, fp
    fcf8:	str	r2, [r4, #0]
    fcfa:	mov	r1, r4
    fcfc:	mov	r0, r7
    fcfe:	add	r6, fp
    fd00:	rsb	r5, fp, r5
    fd04:	bl	fc8c <__ssrefill_r>
    fd08:	cbnz	r0, fd3a <_sfread_r+0x72>
    fd0a:	ldr.w	fp, [r4, #4]
    fd0e:	cmp	r5, fp
    fd10:	mov	r0, r6
    fd12:	mov	r2, fp
    fd14:	bhi.n	fcea <_sfread_r+0x22>
    fd16:	mov	r2, r5
    fd18:	ldr	r1, [r4, #0]
    fd1a:	bl	68c4 <memcpy>
    fd1e:	ldr	r2, [r4, #4]
    fd20:	ldr	r3, [r4, #0]
    fd22:	subs	r2, r2, r5
    fd24:	add	r3, r5
    fd26:	mov	r0, sl
    fd28:	str	r2, [r4, #4]
    fd2a:	str	r3, [r4, #0]
    fd2c:	add	sp, #12
    fd2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd32:	mov	r0, r9
    fd34:	add	sp, #12
    fd36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd3a:	ldr	r3, [sp, #4]
    fd3c:	rsb	r9, r5, r9
    fd40:	udiv	r0, r9, r3
    fd44:	add	sp, #12
    fd46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd4a:	nop

0000fd4c <__submore>:
    fd4c:	add.w	r3, r1, #64	; 0x40
    fd50:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd54:	mov	r4, r1
    fd56:	ldr	r1, [r1, #48]	; 0x30
    fd58:	cmp	r1, r3
    fd5a:	beq.n	fd86 <__submore+0x3a>
    fd5c:	ldr	r6, [r4, #52]	; 0x34
    fd5e:	lsls	r7, r6, #1
    fd60:	mov	r2, r7
    fd62:	bl	97d0 <_realloc_r>
    fd66:	mov	r5, r0
    fd68:	cbz	r0, fdbc <__submore+0x70>
    fd6a:	add.w	r8, r0, r6
    fd6e:	mov	r2, r6
    fd70:	mov	r0, r8
    fd72:	mov	r1, r5
    fd74:	bl	68c4 <memcpy>
    fd78:	str.w	r8, [r4]
    fd7c:	str	r5, [r4, #48]	; 0x30
    fd7e:	str	r7, [r4, #52]	; 0x34
    fd80:	movs	r0, #0
    fd82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fd86:	mov.w	r1, #1024	; 0x400
    fd8a:	bl	8fb8 <_malloc_r>
    fd8e:	cbz	r0, fdbc <__submore+0x70>
    fd90:	ldrb.w	r3, [r4, #66]	; 0x42
    fd94:	str	r0, [r4, #48]	; 0x30
    fd96:	mov.w	r2, #1024	; 0x400
    fd9a:	str	r2, [r4, #52]	; 0x34
    fd9c:	strb.w	r3, [r0, #1023]	; 0x3ff
    fda0:	ldrb.w	r3, [r4, #65]	; 0x41
    fda4:	strb.w	r3, [r0, #1022]	; 0x3fe
    fda8:	ldrb.w	r3, [r4, #64]	; 0x40
    fdac:	strb.w	r3, [r0, #1021]	; 0x3fd
    fdb0:	addw	r0, r0, #1021	; 0x3fd
    fdb4:	str	r0, [r4, #0]
    fdb6:	movs	r0, #0
    fdb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fdbc:	mov.w	r0, #4294967295
    fdc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fdc4 <_vasnprintf_r>:
    fdc4:	push	{r4, r5, r6, lr}
    fdc6:	mov	r5, r2
    fdc8:	sub	sp, #104	; 0x68
    fdca:	ldr	r4, [r2, #0]
    fdcc:	cbz	r1, fdd2 <_vasnprintf_r+0xe>
    fdce:	cmp	r4, #0
    fdd0:	bne.n	fe08 <_vasnprintf_r+0x44>
    fdd2:	movs	r4, #0
    fdd4:	mov.w	r2, #648	; 0x288
    fdd8:	strh.w	r2, [sp, #12]
    fddc:	str	r4, [sp, #0]
    fdde:	str	r4, [sp, #16]
    fde0:	mov	r2, r3
    fde2:	movw	r6, #65535	; 0xffff
    fde6:	ldr	r3, [sp, #120]	; 0x78
    fde8:	str	r4, [sp, #8]
    fdea:	mov	r1, sp
    fdec:	str	r4, [sp, #20]
    fdee:	strh.w	r6, [sp, #14]
    fdf2:	bl	aee0 <_svfprintf_r>
    fdf6:	cmp	r0, #0
    fdf8:	blt.n	fe1e <_vasnprintf_r+0x5a>
    fdfa:	ldr	r3, [sp, #0]
    fdfc:	str	r0, [r5, #0]
    fdfe:	movs	r2, #0
    fe00:	strb	r2, [r3, #0]
    fe02:	ldr	r0, [sp, #16]
    fe04:	add	sp, #104	; 0x68
    fe06:	pop	{r4, r5, r6, pc}
    fe08:	mov.w	r2, #1544	; 0x608
    fe0c:	str	r1, [sp, #0]
    fe0e:	str	r1, [sp, #16]
    fe10:	strh.w	r2, [sp, #12]
    fe14:	bge.n	fde0 <_vasnprintf_r+0x1c>
    fe16:	movs	r3, #139	; 0x8b
    fe18:	str	r3, [r0, #0]
    fe1a:	movs	r0, #0
    fe1c:	b.n	fe04 <_vasnprintf_r+0x40>
    fe1e:	movs	r0, #0
    fe20:	b.n	fe04 <_vasnprintf_r+0x40>
    fe22:	nop

0000fe24 <_calloc_r>:
    fe24:	push	{r4, lr}
    fe26:	mul.w	r1, r2, r1
    fe2a:	bl	8fb8 <_malloc_r>
    fe2e:	mov	r4, r0
    fe30:	cbz	r0, fe6a <_calloc_r+0x46>
    fe32:	ldr.w	r2, [r0, #-4]
    fe36:	bic.w	r2, r2, #3
    fe3a:	subs	r2, #4
    fe3c:	cmp	r2, #36	; 0x24
    fe3e:	bhi.n	fe72 <_calloc_r+0x4e>
    fe40:	cmp	r2, #19
    fe42:	bls.n	fe6e <_calloc_r+0x4a>
    fe44:	movs	r3, #0
    fe46:	cmp	r2, #27
    fe48:	str	r3, [r0, #0]
    fe4a:	str	r3, [r0, #4]
    fe4c:	bls.n	fe7c <_calloc_r+0x58>
    fe4e:	cmp	r2, #36	; 0x24
    fe50:	str	r3, [r0, #8]
    fe52:	str	r3, [r0, #12]
    fe54:	iteee	ne
    fe56:	addne.w	r2, r0, #16
    fe5a:	streq	r3, [r0, #16]
    fe5c:	streq	r3, [r0, #20]
    fe5e:	addeq.w	r2, r0, #24
    fe62:	movs	r3, #0
    fe64:	str	r3, [r2, #0]
    fe66:	str	r3, [r2, #4]
    fe68:	str	r3, [r2, #8]
    fe6a:	mov	r0, r4
    fe6c:	pop	{r4, pc}
    fe6e:	mov	r2, r0
    fe70:	b.n	fe62 <_calloc_r+0x3e>
    fe72:	movs	r1, #0
    fe74:	bl	972c <memset>
    fe78:	mov	r0, r4
    fe7a:	pop	{r4, pc}
    fe7c:	add.w	r2, r0, #8
    fe80:	b.n	fe62 <_calloc_r+0x3e>
    fe82:	nop
    fe84:	movs	r0, r0
	...

0000fe88 <___ZNK16CrashReportClass7printToER5Print_veneer>:
    fe88:	ldr.w	pc, [pc]	; fe8c <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
    fe8c:	.word	0x60001e55

0000fe90 <___init_veneer>:
    fe90:	ldr.w	pc, [pc]	; fe94 <___init_veneer+0x4>
    fe94:	.word	0x600024f9

0000fe98 <___reboot_Teensyduino__veneer>:
    fe98:	ldr.w	pc, [pc]	; fe9c <___reboot_Teensyduino__veneer+0x4>
    fe9c:	.word	0x60001749

0000fea0 <___ZN16CrashReportClasscvbEv_veneer>:
    fea0:	ldr.w	pc, [pc]	; fea4 <___ZN16CrashReportClasscvbEv_veneer+0x4>
    fea4:	.word	0x60002481
	...

Disassembly of section .fini:

0000feb0 <_fini>:
    feb0:	push	{r3, r4, r5, r6, r7, lr}
    feb2:	nop

Disassembly of section .text.csf:

60014c14 <_heap_end+0x3fd94c14>:
60014c14:	.word	0xffffffff
60014c18:	.word	0xffffffff
60014c1c:	.word	0xffffffff
60014c20:	.word	0xffffffff
60014c24:	.word	0xffffffff
60014c28:	.word	0xffffffff
60014c2c:	.word	0xffffffff
60014c30:	.word	0xffffffff
60014c34:	.word	0xffffffff
60014c38:	.word	0xffffffff
60014c3c:	.word	0xffffffff
60014c40:	.word	0xffffffff
60014c44:	.word	0xffffffff
60014c48:	.word	0xffffffff
60014c4c:	.word	0xffffffff
60014c50:	.word	0xffffffff
60014c54:	.word	0xffffffff
60014c58:	.word	0xffffffff
60014c5c:	.word	0xffffffff
60014c60:	.word	0xffffffff
60014c64:	.word	0xffffffff
60014c68:	.word	0xffffffff
60014c6c:	.word	0xffffffff
60014c70:	.word	0xffffffff
60014c74:	.word	0xffffffff
60014c78:	.word	0xffffffff
60014c7c:	.word	0xffffffff
60014c80:	.word	0xffffffff
60014c84:	.word	0xffffffff
60014c88:	.word	0xffffffff
60014c8c:	.word	0xffffffff
60014c90:	.word	0xffffffff
60014c94:	.word	0xffffffff
60014c98:	.word	0xffffffff
60014c9c:	.word	0xffffffff
60014ca0:	.word	0xffffffff
60014ca4:	.word	0xffffffff
60014ca8:	.word	0xffffffff
60014cac:	.word	0xffffffff
60014cb0:	.word	0xffffffff
60014cb4:	.word	0xffffffff
60014cb8:	.word	0xffffffff
60014cbc:	.word	0xffffffff
60014cc0:	.word	0xffffffff
60014cc4:	.word	0xffffffff
60014cc8:	.word	0xffffffff
60014ccc:	.word	0xffffffff
60014cd0:	.word	0xffffffff
60014cd4:	.word	0xffffffff
60014cd8:	.word	0xffffffff
60014cdc:	.word	0xffffffff
60014ce0:	.word	0xffffffff
60014ce4:	.word	0xffffffff
60014ce8:	.word	0xffffffff
60014cec:	.word	0xffffffff
60014cf0:	.word	0xffffffff
60014cf4:	.word	0xffffffff
60014cf8:	.word	0xffffffff
60014cfc:	.word	0xffffffff
60014d00:	.word	0xffffffff
60014d04:	.word	0xffffffff
60014d08:	.word	0xffffffff
60014d0c:	.word	0xffffffff
60014d10:	.word	0xffffffff
60014d14:	.word	0xffffffff
60014d18:	.word	0xffffffff
60014d1c:	.word	0xffffffff
60014d20:	.word	0xffffffff
60014d24:	.word	0xffffffff
60014d28:	.word	0xffffffff
60014d2c:	.word	0xffffffff
60014d30:	.word	0xffffffff
60014d34:	.word	0xffffffff
60014d38:	.word	0xffffffff
60014d3c:	.word	0xffffffff
60014d40:	.word	0xffffffff
60014d44:	.word	0xffffffff
60014d48:	.word	0xffffffff
60014d4c:	.word	0xffffffff
60014d50:	.word	0xffffffff
60014d54:	.word	0xffffffff
60014d58:	.word	0xffffffff
60014d5c:	.word	0xffffffff
60014d60:	.word	0xffffffff
60014d64:	.word	0xffffffff
60014d68:	.word	0xffffffff
60014d6c:	.word	0xffffffff
60014d70:	.word	0xffffffff
60014d74:	.word	0xffffffff
60014d78:	.word	0xffffffff
60014d7c:	.word	0xffffffff
60014d80:	.word	0xffffffff
60014d84:	.word	0xffffffff
60014d88:	.word	0xffffffff
60014d8c:	.word	0xffffffff
60014d90:	.word	0xffffffff
60014d94:	.word	0xffffffff
60014d98:	.word	0xffffffff
60014d9c:	.word	0xffffffff
60014da0:	.word	0xffffffff
60014da4:	.word	0xffffffff
60014da8:	.word	0xffffffff
60014dac:	.word	0xffffffff
60014db0:	.word	0xffffffff
60014db4:	.word	0xffffffff
60014db8:	.word	0xffffffff
60014dbc:	.word	0xffffffff
60014dc0:	.word	0xffffffff
60014dc4:	.word	0xffffffff
60014dc8:	.word	0xffffffff
60014dcc:	.word	0xffffffff
60014dd0:	.word	0xffffffff
60014dd4:	.word	0xffffffff
60014dd8:	.word	0xffffffff
60014ddc:	.word	0xffffffff
60014de0:	.word	0xffffffff
60014de4:	.word	0xffffffff
60014de8:	.word	0xffffffff
60014dec:	.word	0xffffffff
60014df0:	.word	0xffffffff
60014df4:	.word	0xffffffff
60014df8:	.word	0xffffffff
60014dfc:	.word	0xffffffff
60014e00:	.word	0xffffffff
60014e04:	.word	0xffffffff
60014e08:	.word	0xffffffff
60014e0c:	.word	0xffffffff
60014e10:	.word	0xffffffff
60014e14:	.word	0xffffffff
60014e18:	.word	0xffffffff
60014e1c:	.word	0xffffffff
60014e20:	.word	0xffffffff
60014e24:	.word	0xffffffff
60014e28:	.word	0xffffffff
60014e2c:	.word	0xffffffff
60014e30:	.word	0xffffffff
60014e34:	.word	0xffffffff
60014e38:	.word	0xffffffff
60014e3c:	.word	0xffffffff
60014e40:	.word	0xffffffff
60014e44:	.word	0xffffffff
60014e48:	.word	0xffffffff
60014e4c:	.word	0xffffffff
60014e50:	.word	0xffffffff
60014e54:	.word	0xffffffff
60014e58:	.word	0xffffffff
60014e5c:	.word	0xffffffff
60014e60:	.word	0xffffffff
60014e64:	.word	0xffffffff
60014e68:	.word	0xffffffff
60014e6c:	.word	0xffffffff
60014e70:	.word	0xffffffff
60014e74:	.word	0xffffffff
60014e78:	.word	0xffffffff
60014e7c:	.word	0xffffffff
60014e80:	.word	0xffffffff
60014e84:	.word	0xffffffff
60014e88:	.word	0xffffffff
60014e8c:	.word	0xffffffff
60014e90:	.word	0xffffffff
60014e94:	.word	0xffffffff
60014e98:	.word	0xffffffff
60014e9c:	.word	0xffffffff
60014ea0:	.word	0xffffffff
60014ea4:	.word	0xffffffff
60014ea8:	.word	0xffffffff
60014eac:	.word	0xffffffff
60014eb0:	.word	0xffffffff
60014eb4:	.word	0xffffffff
60014eb8:	.word	0xffffffff
60014ebc:	.word	0xffffffff
60014ec0:	.word	0xffffffff
60014ec4:	.word	0xffffffff
60014ec8:	.word	0xffffffff
60014ecc:	.word	0xffffffff
60014ed0:	.word	0xffffffff
60014ed4:	.word	0xffffffff
60014ed8:	.word	0xffffffff
60014edc:	.word	0xffffffff
60014ee0:	.word	0xffffffff
60014ee4:	.word	0xffffffff
60014ee8:	.word	0xffffffff
60014eec:	.word	0xffffffff
60014ef0:	.word	0xffffffff
60014ef4:	.word	0xffffffff
60014ef8:	.word	0xffffffff
60014efc:	.word	0xffffffff
60014f00:	.word	0xffffffff
60014f04:	.word	0xffffffff
60014f08:	.word	0xffffffff
60014f0c:	.word	0xffffffff
60014f10:	.word	0xffffffff
60014f14:	.word	0xffffffff
60014f18:	.word	0xffffffff
60014f1c:	.word	0xffffffff
60014f20:	.word	0xffffffff
60014f24:	.word	0xffffffff
60014f28:	.word	0xffffffff
60014f2c:	.word	0xffffffff
60014f30:	.word	0xffffffff
60014f34:	.word	0xffffffff
60014f38:	.word	0xffffffff
60014f3c:	.word	0xffffffff
60014f40:	.word	0xffffffff
60014f44:	.word	0xffffffff
60014f48:	.word	0xffffffff
60014f4c:	.word	0xffffffff
60014f50:	.word	0xffffffff
60014f54:	.word	0xffffffff
60014f58:	.word	0xffffffff
60014f5c:	.word	0xffffffff
60014f60:	.word	0xffffffff
60014f64:	.word	0xffffffff
60014f68:	.word	0xffffffff
60014f6c:	.word	0xffffffff
60014f70:	.word	0xffffffff
60014f74:	.word	0xffffffff
60014f78:	.word	0xffffffff
60014f7c:	.word	0xffffffff
60014f80:	.word	0xffffffff
60014f84:	.word	0xffffffff
60014f88:	.word	0xffffffff
60014f8c:	.word	0xffffffff
60014f90:	.word	0xffffffff
60014f94:	.word	0xffffffff
60014f98:	.word	0xffffffff
60014f9c:	.word	0xffffffff
60014fa0:	.word	0xffffffff
60014fa4:	.word	0xffffffff
60014fa8:	.word	0xffffffff
60014fac:	.word	0xffffffff
60014fb0:	.word	0xffffffff
60014fb4:	.word	0xffffffff
60014fb8:	.word	0xffffffff
60014fbc:	.word	0xffffffff
60014fc0:	.word	0xffffffff
60014fc4:	.word	0xffffffff
60014fc8:	.word	0xffffffff
60014fcc:	.word	0xffffffff
60014fd0:	.word	0xffffffff
60014fd4:	.word	0xffffffff
60014fd8:	.word	0xffffffff
60014fdc:	.word	0xffffffff
60014fe0:	.word	0xffffffff
60014fe4:	.word	0xffffffff
60014fe8:	.word	0xffffffff
60014fec:	.word	0xffffffff
60014ff0:	.word	0xffffffff
60014ff4:	.word	0xffffffff
60014ff8:	.word	0xffffffff
60014ffc:	.word	0xffffffff

60015000 <hab_csf>:
	...

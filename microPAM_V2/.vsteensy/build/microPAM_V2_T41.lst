
.vsteensy/build/microPAM_V2_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
600025f8 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00012f20 l    d  .fini	00000000 .fini
00012f24 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
20002ac0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
600180f0 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001400 l     F .text.code	00000016 memory_copy
60001418 l     F .text.code	00000010 memory_clear
60001428 l     F .text.code	00000204 ResetHandler2
00000000 l    df *ABS*	00000000 usb.c
0000a480 l     F .text.itcm	00000090 schedule_transfer
0000a510 l     F .text.itcm	00000036 run_callbacks
0000a548 l     F .text.itcm	000000a0 endpoint0_transmit.constprop.1
20017d94 l     O .bss	00000004 endpointN_notify_mask
20018bcf l     O .bss	00000001 sof_usage
20017d90 l     O .bss	00000004 endpoint0_notify_mask
20018bd6 l     O .bss	00000001 usb_reboot_timer
20005c40 l     O .bss	00000008 endpoint0_setupdata
20018680 l     O .bss	00000008 reply_buffer
20017d88 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 tempmon.c
200186bc l     O .bss	00000004 s_hotTemp
200186c0 l     O .bss	00000004 s_hot_ROOM
200186c4 l     O .bss	00000004 s_roomC_hotC
200186b8 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 CrashReport.cpp
60001dcc l     F .text.code	00000044 cleardata(arm_fault_info_struct*) [clone .constprop.1]
60001e10 l     F .text.code	00000044 isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]
00000000 l    df *ABS*	00000000 analog.c
20018bcb l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 c:/users/zimme/appdata/local/arduino15.0/packages/teensy/tools/teensy-compile/1.56.1/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/appdata/local/arduino15.0/packages/teensy/tools/teensy-compile/1.56.1/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20005c48 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20005c4c l       .bss	00000000 object.8610
60002580 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mAcq.cpp
00000a88 l     F .text.itcm	000000e4 acq_isr()
00000df4 l     F .text.itcm	00000028 _GLOBAL__sub_I_procCount
20017344 l     O .bss	00000008 dma
00000000 l    df *ABS*	00000000 mFiling.cpp
00001570 l     F .text.itcm	00000098 _GLOBAL__sub_I_t_acq
20017b34 l     O .bss	00000004 checkEndOfFile(short)::tx_
200177c4 l     O .bss	00000050 fileName
2000713c l     O .bss	00000200 fileHeader
20017b40 l     O .bss	00000004 newHour(int)::ho
2000613c l     O .bss	00001000 diskBuffer
20017574 l     O .bss	00000050 dirName
00000000 l    df *ABS*	00000000 output_i2s_oct.cpp
000019e0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_pwm.cpp
000019f8 l     F .text.itcm	0000001c __tcf_0
00001a14 l     F .text.itcm	00000030 _GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE
00000000 l    df *ABS*	00000000 input_i2s.cpp
00001a44 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211_2.cpp
00001a5c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
00001a74 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 input_spdif3.cpp
00001a8c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE
00000000 l    df *ABS*	00000000 input_tdm2.cpp
00001aa4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE
00000000 l    df *ABS*	00000000 input_adc.cpp
00001abc l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE
00000000 l    df *ABS*	00000000 input_pdm_i2s2.cpp
00001ad4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE
00000000 l    df *ABS*	00000000 input_i2s2.cpp
00001aec l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
00001b04 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
0000238c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_tdm2.cpp
000023a4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE
00000000 l    df *ABS*	00000000 output_i2s2.cpp
000023bc l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s_hex.cpp
000023d4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
000023ec l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 output_tdm.cpp
00002404 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_tdm.cpp
0000241c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
00002434 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 output_spdif3.cpp
0000244c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE
00000000 l    df *ABS*	00000000 output_mqs.cpp
00002464 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE
00000000 l    df *ABS*	00000000 async_input_spdif3.cpp
0000247c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE
00000000 l    df *ABS*	00000000 input_pdm.cpp
00002494 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_i2s.cpp
000024ac l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif2.cpp
000024c4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif.cpp
000024dc l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 SD.cpp
00002ed0 l     F .text.itcm	00000080 _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 usb_desc.c
600026f4 l     O .text.progmem	0000000a qualifier_descriptor
2000254c l     O .data	00000012 microsoft_os_string_desc
20002524 l     O .data	00000028 microsoft_os_compatible_id_desc
2000250c l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 mQueue.cpp
20007340 l     O .bss	00010000 data_buffer
00000000 l    df *ABS*	00000000 menu.cpp
00000198 l     F .text.itcm	00000054 menuGetInt16(short*)
000001ec l     F .text.itcm	00000060 menuGet3Int(int*, int*, int*)
00000000 l    df *ABS*	00000000 mRTC.cpp
2000059c l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 mCompress.cpp
20017814 l     O .bss	00000200 tempData
200175c4 l     O .bss	00000200 outData
2001734c l     O .bss	00000200 dout
20017b44 l     O .bss	00000004 compress(void*)::nout
00000000 l    df *ABS*	00000000 microPAM_V2.ino
20018bb4 l     O .bss	00000002 loop::mxb
20018bb6 l     O .bss	00000002 loop::status
20018bb8 l     O .bss	00000002 loop::monitor
20017b3c l     O .bss	00000004 loop::loopCount
20017b38 l     O .bss	00000004 loop::t0
00000000 l    df *ABS*	00000000 play_sd_wav.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
00002510 l     F .text.itcm	00000058 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]
00000000 l    df *ABS*	00000000 FsUtf.cpp
00000000 l    df *ABS*	00000000 FsStructs.cpp
00000000 l    df *ABS*	00000000 FsCache.cpp
00003118 l     F .text.itcm	00000046 FsCache::sync() [clone .part.0]
00000000 l    df *ABS*	00000000 upcase.cpp
2000039c l     O .data	0000012c lookupTable
200004c8 l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 FsName.cpp
00000000 l    df *ABS*	00000000 ExFatFormatter.cpp
00000000 l    df *ABS*	00000000 ExFatName.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
0000447c l     F .text.itcm	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFormatter.cpp
00005430 l     F .text.itcm	0000002c initFatDirCallback(unsigned long, void*)
00000000 l    df *ABS*	00000000 FatName.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00005b74 l     F .text.itcm	00000036 FatFile::openRoot(FatVolume*) [clone .part.38]
00005c7c l     F .text.itcm	00000094 FatFile::sync() [clone .part.42]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00006b38 l     F .text.itcm	0000010e FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00007d7c l     F .text.itcm	00000022 SharedSpiCard::spiStart() [clone .part.8] [clone .constprop.34]
00007da0 l     F .text.itcm	00000006 SharedSpiCard::syncDevice() [clone .part.19] [clone .constprop.35]
00007da8 l     F .text.itcm	00000022 SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
0000866c l     F .text.itcm	00000030 sdIrs()
0000869c l     F .text.itcm	00000018 isBusyCommandComplete()
000086b4 l     F .text.itcm	00000010 isBusyCommandInhibit()
000086c4 l     F .text.itcm	00000014 isBusyDat()
000086d8 l     F .text.itcm	0000000c isBusyDMA()
000086e4 l     F .text.itcm	00000014 isBusyFifoRead()
000086f8 l     F .text.itcm	00000014 isBusyFifoWrite()
0000870c l     F .text.itcm	00000018 isBusyTransferComplete()
00008724 l     F .text.itcm	000000d0 setSdclk(unsigned long)
00008858 l     F .text.itcm	00000028 waitTimeout(bool (*)())
00008880 l     F .text.itcm	0000004c yieldTimeout(bool (*)())
000088dc l     F .text.itcm	00000044 enableGPIO(bool) [clone .part.0]
00008940 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
000089a8 l     F .text.itcm	0000002c isBusyCMD13()
000089f4 l     F .text.itcm	0000005c readReg16(unsigned long, void*)
00008a50 l     F .text.itcm	00000020 waitDmaStatus() [clone .part.5]
00008a70 l     F .text.itcm	000000b8 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00008cbc l     F .text.itcm	00000058 waitTransferComplete() [clone .part.10]
00009058 l     F .text.itcm	0000009c cardCMD6(unsigned long, unsigned char*)
20018bc3 l     O .bss	00000001 m_version2
2001754c l     O .bss	00000010 m_cid
20017a14 l     O .bss	00000004 m_busyFcn
20018bc4 l     O .bss	00000001 m_highCapacity
2001756c l     O .bss	00000004 m_ocr
20017570 l     O .bss	00000004 m_rca
20018bc5 l     O .bss	00000001 m_transferActive
20017a18 l     O .bss	00000004 m_irqstat
20002586 l     O .data	00000001 m_errorCode
20018bc2 l     O .bss	00000001 m_initDone
2001755c l     O .bss	00000010 m_csd
20018bc6 l     O .bss	00000001 m_dmaBusy
2000733c l     O .bss	00000004 m_sdClkKhz
20017340 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
00009a54 l     F .text.itcm	0000006c rx_queue_transfer
00009ac0 l     F .text.itcm	000000b4 rx_event
00009b74 l     F .text.itcm	00000098 usb_serial_flush_callback
00009c0c l     F .text.itcm	00000194 usb_serial_write.part.1
2001869c l     O .bss	00000010 rx_index
20018bc0 l     O .bss	00000002 tx_packet_size
20018bd2 l     O .bss	00000001 tx_noautoflush
20018bd1 l     O .bss	00000001 tx_head
20002ac0 l     O .bss	00001000 rx_buffer
20003c40 l     O .bss	00002000 txbuffer
20018bce l     O .bss	00000001 rx_tail
200186ac l     O .bss	00000009 rx_list
20018bbc l     O .bss	00000002 rx_packet_size
20003ac0 l     O .bss	00000100 rx_transfer
2001868c l     O .bss	00000010 rx_count
20018688 l     O .bss	00000004 rx_available
20018bcd l     O .bss	00000001 rx_head
20018bd0 l     O .bss	00000001 transmit_previous_timeout
20018bbe l     O .bss	00000002 tx_available
20003bc0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
0000b24c l     F .text.itcm	0000004c digitalWrite.part.0
0000b298 l     F .text.itcm	0000001c digitalRead.part.1
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 yield.cpp
20018bc9 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
0000c088 l     F .text.itcm	00000018 __get_current_locale
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtod.c
0000cf3c l     F .text.itcm	00000034 sulp
20000e0c l     O .data	00000014 fpi.6173
20000e20 l     O .data	00000014 fpinan.6209
20000370 l     O .data	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
0000de00 l     F .text.itcm	00000136 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
20001ae0 l     O .data	00000010 zeroes.7258
20000a8c l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfscanf.c
20000a68 l     O .data	00000022 basefix.7328
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
0001049c l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
000114b8 l     F .text.itcm	000000a8 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mprec.c
20000e34 l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 strtoll.c
00012610 l     F .text.itcm	000001ac _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoul.c
000127e0 l     F .text.itcm	00000168 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
0001296c l     F .text.itcm	000001ec _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vfscanf.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 effect_delay_ext.cpp
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20001af0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 arm_fir_interpolate_f32
00000000 l       *UND*	00000000 arm_q31_to_q15
00000000 l       *UND*	00000000 arm_fir_fast_q15
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 arm_sin_q15
60019000 l       .text.csf	00000000 __text_csf_end
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 arm_fir_interpolate_init_f32
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 arm_float_to_q31
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 arm_add_q31
00000000 l       *UND*	00000000 arm_cfft_radix4_q15
00000000 l       *UND*	00000000 arm_fir_decimate_f32
00000000 l       *UND*	00000000 arm_shift_q31
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 arm_fir_decimate_init_f32
00000000 l       *UND*	00000000 arm_sin_q31
00000000 l       *UND*	00000000 arm_q15_to_q31
00012ef8 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
00012f00 l     F .text.itcm	00000008 ___init_veneer
00012f08 l     F .text.itcm	00000008 ___ZN16CrashReportClasscvbEv_veneer
00012f10 l     F .text.itcm	00000008 ___ZNK16CrashReportClass7printToER5Print_veneer
60002508 l     F .text.code	00000008 ___ZN5Print7printlnEPKc_veneer
60002510 l     F .text.code	00000008 ___ZN5Print10printFloatEdh_veneer
60002518 l     F .text.code	00000008 ___ZN5Print5writeEPKc_veneer
60002520 l     F .text.code	00000008 ___ZN5Print11printNumberEmhh_veneer
60002528 l     F .text.code	00000008 __memset_veneer
60002530 l     F .text.code	00000008 ____libc_init_array_veneer
60002538 l     F .text.code	00000008 __main_veneer
60002540 l     F .text.code	00000008 ___ZN5Print7printlnEv_veneer
60002548 l     F .text.code	00000008 ___ZN5Print7printlnEmi_veneer
60002550 l     F .text.code	00000008 __sm_set_pool_veneer
60002558 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60002560 l     F .text.code	00000008 __delay_veneer
60002568 l     F .text.code	00000008 ___ZN5Print5printEl_veneer
60002570 l     F .text.code	00000008 __set_arm_clock_veneer
60002578 l     F .text.code	00000008 __pwm_init_veneer
00000b78 g     F .text.itcm	00000054 set_audioClock(int, long, unsigned long)
00001da8  w    F .text.itcm	00000068 SDFile::getModifyTime(DateTimeFields&)
000031d0 g     F .text.itcm	000000b4 toUpcase(unsigned short)
0000009c g     F .text.itcm	00000088 pushData(unsigned long*)
00009fdc g     F .text.itcm	00000014 usb_serial_available
0001253c g     F .text.itcm	0000005e __any_on
20017b24 g     O .bss	00000008 AsyncAudioInputSPDIF3::dma
00006adc g     F .text.itcm	00000030 FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)
600017a4 g     F .text.code	00000002 startup_default_late_hook
00008fd0 g     F .text.itcm	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000b65c  w    F .text.itcm	000000f0 yield
00007d04  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
2001861c g     O .bss	00000060 proc_stat
20018bb0 g     O .bss	00000004 usb_timer1_callback
000068e4 g     F .text.itcm	000001f8 FatFile::write(void const*, unsigned int)
60002610 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
20002582 g     O .data	00000002 proc
60001890 g     F .text.code	000003bc configure_external_ram
00007c60  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
0000686c g     F .text.itcm	00000076 FatFile::truncate()
00000e64  w    F .text.itcm	0000003c FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00007268 g     F .text.itcm	0000015c FatFile::makeSFN(FatLfn_t*)
20018614 g     O .bss	00000004 procCount
00006f0c g     F .text.itcm	00000130 FatPartition::init(FsBlockDeviceInterface*, unsigned char)
600026fe  w    O .text.progmem	00000001 _serialEventUSB2_default
20017a1c g     O .bss	00000004 FsDateTime::callback
000073c4 g     F .text.itcm	000000b0 FatFile::makeUniqueSfn(FatLfn_t*)
0000810c g     F .text.itcm	00000054 SharedSpiCard::writeStart(unsigned long)
00005510 g     F .text.itcm	0000005c FatFormatter::initPbs()
0000ba34 g     F .text.itcm	00000020 Print::println()
00008644 g     F .text.itcm	00000024 DedicatedSpiCard::begin(SdSpiConfig)
20000648 g     O .data	00000070 vtable for DedicatedSpiCard
20018618 g     O .bss	00000004 procMiss
00003e7c g     F .text.itcm	00000108 ExFatFile::seekSet(unsigned long long)
00001edc  w    F .text.itcm	00000028 File::flush()
00001c18  w    F .text.itcm	00000068 SDFile::getCreateTime(DateTimeFields&)
0000c90c g     F .text.itcm	00000002 __malloc_unlock
00001b58  w    F .text.itcm	000000a8 SDFile::openNextFile(unsigned char)
20017b2c g     O .bss	00000004 FsVolume::m_cwv
00005fec g     F .text.itcm	000000cc FatFile::open(FatFile*, char const*, int)
20006138 g     O .bss	00000004 SerNum
00007c54  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
600024a0 g     F .text.code	00000058 analog_init
0000dde0 g     F .text.itcm	00000020 _strtod_r
0001034c g     F .text.itcm	0000004a _vdprintf_r
00005d78 g     F .text.itcm	00000020 FatFile::getCreateDateTime(unsigned short*, unsigned short*)
000080c0 g     F .text.itcm	0000004c SharedSpiCard::readOCR(unsigned long*)
000014e8 g     F .text.itcm	00000088 saveData(short)
20002584 g     O .data	00000002 shift
20001f24 g     O .data	00000004 F_CPU_ACTUAL
20000730  w    O .data	0000005c vtable for SDFile
00012d3c g     F .text.itcm	00000082 _sfread_r
0000c7a4 g     F .text.itcm	000000c6 memmove
20018610 g     O .bss	00000004 max_stat
0000c0c4 g     F .text.itcm	00000014 __locale_ctype_ptr
0000964c g     F .text.itcm	00000068 SdioCard::stopTransmission(bool)
00011cb8 g     F .text.itcm	0000004c _Balloc
00012f2c g       .ARM.exidx	00000000 __exidx_end
00006dfc g     F .text.itcm	00000052 FatPartition::freeChain(unsigned long)
20018bc7 g     O .bss	00000001 EventResponder::runningFromYield
00009878 g     F .text.itcm	00000016 SdSpiArduinoDriver::receive()
00007b3c g     F .text.itcm	000000e8 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)
0000b1ec g     F .text.itcm	00000060 tempmonGetTemp
0000ba08 g     F .text.itcm	0000002c Print::write(unsigned char const*, unsigned int)
0000c02c g     F .text.itcm	0000000c __errno
00001e60  w    F .text.itcm	00000026 SDFile::isDirectory()
00004f48 g     F .text.itcm	0000019a ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
00001f18  w    F .text.itcm	00000044 File::write(unsigned char const*, unsigned int)
60001000 g     O .text.headers	00000020 ImageVectorTable
00002224  w    F .text.itcm	000000ac File::~File()
20017a84 g     O .bss	00000004 EventResponder::firstInterrupt
0000ad90 g     F .text.itcm	00000004 usb_transfer_status
00011c3c g     F .text.itcm	00000004 __localeconv_l
0000b158 g     F .text.itcm	00000090 sm_set_pool
00003364 g     F .text.itcm	0000001c ExFatFormatter::writeUpcaseUnicode(unsigned short)
00007928 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
000048c4 g     F .text.itcm	0000003a ExFatPartition::rootLength()
20017b0c g     O .bss	00000008 AudioOutputSPDIF3::dma
00001d10  w    F .text.itcm	00000052 SDFile::setCreateTime(DateTimeFields const&)
0000b960  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000a9c g     O .data	00000370 digital_pin_to_info_PGM
20018c40 g     O .bss	00000004 errno
00009890 g     F .text.itcm	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00004640 g     F .text.itcm	00000040 ExFatPartition::fatGet(unsigned long, unsigned long*)
0000cdb8 g     F .text.itcm	00000004 __seofread
00012f28 g       .text.itcm	00000000 _etext
00002568 g     F .text.itcm	000000d4 _spi_dma_rxISR0()
00007718 g     F .text.itcm	000000e4 FatFile::parsePathName(char const*, FatLfn_t*, char const**)
20002ac0 g       .bss	00000000 _sbss
0000556c g     F .text.itcm	0000005e FatFormatter::writeMbr()
00009914 g     F .text.itcm	00000006 sdCsInit(unsigned char)
00002d88 g     F .text.itcm	00000148 SDClass::mediaPresent()
00008800 g     F .text.itcm	0000000c SdioCard::errorData() const
20018ba8 g     O .bss	00000004 tempData0
00008f10 g     F .text.itcm	000000c0 SdioCard::writeSector(unsigned long, unsigned char const*)
000047d8 g     F .text.itcm	000000ec ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)
00003428 g     F .text.itcm	000005a4 ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)
0000b2c0 g     F .text.itcm	0000000c digitalRead
60002704 g       *ABS*	00000000 _stextload
00001608 g     F .text.itcm	00000254 loop
600017a8 g     F .text.code	00000004 startup_debug_reset
0000ac48 g     F .text.itcm	00000064 usb_config_rx
20017d7c g     O .bss	00000004 acqbias
00003c0c g     F .text.itcm	00000090 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00009458 g     F .text.itcm	000000bc SdioCard::readData(unsigned char*)
20017a80 g     O .bss	00000004 EventResponder::lastInterrupt
000079ac g     F .text.itcm	00000028 FsBaseFile::close()
00002874 g     F .text.itcm	00000048 SPIClass::end()
00009920 g     F .text.itcm	00000134 memcpy
00011aa0 g     F .text.itcm	00000180 __hexnan
000020a4  w    F .text.itcm	00000070 File::available()
00007dcc g     F .text.itcm	00000060 SharedSpiCard::writeStop()
00002f50 g     F .text.itcm	000000a0 FsUtf::cpToMb(unsigned long, char*, char*)
000046ec g     F .text.itcm	0000007a ExFatPartition::freeChain(unsigned long)
000062a8 g     F .text.itcm	00000028 FatFile::peek()
0000df60 g     F .text.itcm	00001570 _svfprintf_r
20018bca  w    O .bss	00000001 SDFile::name()::zeroterm
20018b9c g     O .bss	00000004 systick_millis_count
00004e98 g     F .text.itcm	000000ae ExFatFile::rename(ExFatFile*, char const*)
0000185c g     F .text.itcm	0000003c setup1()
00001d64  w    F .text.itcm	00000044 SDFile::truncate(unsigned long long)
0000bd08 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
20018bd4 g     O .bss	00000001 usb_configuration
00000eac  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000b108 g     F .text.itcm	00000050 sm_align_pool
000096b4 g     F .text.itcm	0000002c SdioCard::syncDevice()
00008d8c g     F .text.itcm	00000090 SdioCard::writeData(unsigned char const*)
00000f20  w    F .text.itcm	0000005a StreamFile<FsBaseFile, unsigned long long>::available()
000062d0 g     F .text.itcm	00000042 FatFile::readDirCache(bool)
00012498 g     F .text.itcm	0000005c __ratio
00008224 g     F .text.itcm	00000098 SharedSpiCard::sectorCount()
60002610  w    O .text.progmem	00000018 usb_string_manufacturer_name
0000c0d8 g     F .text.itcm	00000010 malloc
00002c7c g     F .text.itcm	0000010a SDClass::format(int, char, Print&)
2000070c  w    O .data	00000024 vtable for FsFile
00011c20 g     F .text.itcm	0000001c iswspace
20017b7c g     O .bss	00000200 acqBuffer
000024f4  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
200002a8 g     O .data	000000c8 __mprec_tens
6000165c g     F .text.code	000000ec usb_init
000079d4 g     F .text.itcm	00000088 FsBaseFile::operator=(FsBaseFile const&)
00007c50  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
00002114  w    F .text.itcm	00000088 SDFile::seek(unsigned long long, int)
20017b78 g     O .bss	00000004 __malloc_top_pad
0000b0b8 g     F .text.itcm	00000050 rtc_set
00012d00 g     F .text.itcm	0000003a __ssrefill_r
20018c2c g     O .bss	00000004 systick_safe_read
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
000050e4 g     F .text.itcm	000000e2 ExFatFile::truncate()
20001f18 g     O .data	00000000 .hidden __dso_handle
00011c40 g     F .text.itcm	0000001c _localeconv_r
00012b58 g     F .text.itcm	00000024 _strtoull_r
00009818 g     F .text.itcm	00000058 SdSpiArduinoDriver::deactivate()
00011ecc g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
000056f0 g     F .text.itcm	000001d0 FatFormatter::makeFat32()
20002564 g     O .data	00000004 t_on
60002690 g     O .text.progmem	00000062 usb_config_descriptor_480
0000bd38 g     F .text.itcm	000002e2 .hidden __udivmoddi4
20017d80 g     O .bss	00000004 busy
00009870 g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00005bac g     F .text.itcm	00000034 FatFile::addCluster()
0000ccf0 g     F .text.itcm	00000024 _sbrk_r
00008920 g     F .text.itcm	00000020 SdioCard::type() const
6000179c g     F .text.code	00000002 startup_default_early_hook
6000162c g     F .text.code	00000030 ResetHandler
0000a064 g     F .text.itcm	00000020 usb_serial_getchar
00001cc4  w    F .text.itcm	0000004c SDFile::name()
20018c20 g     O .bss	00000008 usb_cdc_line_coding
0000b2b4 g     F .text.itcm	0000000a digitalWrite
20017a88 g     O .bss	00000004 EventResponder::lastYield
00003be4 g     F .text.itcm	00000028 ExFatFile::openRoot(ExFatVolume*)
000032d8  w    F .text.itcm	00000022 Print::write(char const*)
00000ed0  w    F .text.itcm	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
00007cf8  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
000032fc g     F .text.itcm	00000028 ExFatFormatter::syncUpcase()
00001e88  w    F .text.itcm	00000052 SDFile::setModifyTime(DateTimeFields const&)
20018c30 g     O .bss	00000010 extmem_smalloc_pool
20017b70 g     O .bss	00000004 __malloc_max_sbrked_mem
000084b8 g     F .text.itcm	0000005c DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
00001e2c  w    F .text.itcm	0000001a SDFile::position()
0000b2cc g     F .text.itcm	00000080 pinMode
0000bb20 g     F .text.itcm	00000174 Print::printFloat(double, unsigned char)
0000f4d0 g     F .text.itcm	00000e7a __ssvfscanf_r
600026ff  w    O .text.progmem	00000001 _serialEventUSB1_default
20017a4c g     O .bss	00000008 AudioInputTDM2::dma
60018400 g     O .text.csf	00000c00 hab_csf
00001f5c  w    F .text.itcm	0000002c File::peek()
00006e50 g     F .text.itcm	000000bc FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
000028c0  w    F .text.itcm	000000bc SDClass::open(char const*, unsigned char)
0001230c g     F .text.itcm	000000d0 __b2d
00012f24 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
00000b6c  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
20017a7c g     O .bss	00000004 EventResponder::firstYield
20000a64 g     O .data	00000004 _global_impure_ptr
00002ff0 g     F .text.itcm	0000008c FsUtf::mbToCp(char const*, char const*, unsigned long*)
00000fa4  w    F .text.itcm	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000c910 g     F .text.itcm	000003de _realloc_r
00001e48  w    F .text.itcm	00000018 SDFile::read(void*, unsigned int)
0000c038 g     F .text.itcm	00000050 __libc_init_array
00001c80  w    F .text.itcm	00000044 SDFile::rewindDirectory()
00004438 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
0000880c g     F .text.itcm	0000001c SdioCard::readCID(CID*)
20000860 g     O .data	00000100 __hexdig
00004cc0 g     F .text.itcm	000000b4 ExFatFile::addDirCluster()
20000280 g     O .data	00000028 __mprec_bigtens
00011d98 g     F .text.itcm	00000098 __s2b
0000821c  w    F .text.itcm	00000008 SharedSpiCard::readCID(CID*)
0000b948  w    F .text.itcm	00000004 usb_serial_class::clear()
0000b054  w    F .text.itcm	00000030 _sbrk
60015630 g       *ABS*	00000000 _sdataload
00012160 g     F .text.itcm	00000042 __mcmp
200007b0 g     O .data	00000030 vtable for SDClass
20017a74 g     O .bss	00000008 AudioOutputTDM::dma
20001f88 g     O .data	00000004 __brkval
20018bd3 g     O .bss	00000001 usb_cdc_line_rtsdtr
600024f8 g     F .text.code	00000000 _init
00009da0 g     F .text.itcm	00000002 usb_serial_reset
00005c5c g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
000029f0  w    F .text.itcm	00000062 SDClass::remove(char const*)
00001b30  w    F .text.itcm	00000028 SDFile::close()
0000219c  w    F .text.itcm	00000040 SDFile::~SDFile()
6000262c g     O .text.progmem	00000062 usb_config_descriptor_12
0000cf70 g     F .text.itcm	00000e70 _strtod_l
00011a70 g     F .text.itcm	00000030 __match
000097e4 g     F .text.itcm	00000034 SdSpiArduinoDriver::begin(SdSpiConfig)
20018c80 g       .bss	00000000 _ebss
00008e88 g     F .text.itcm	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00000f90  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00000738 g     F .text.itcm	00000004 rtc_setup(unsigned char, unsigned char)
00011e30 g     F .text.itcm	00000040 __hi0bits
00003b4c g     F .text.itcm	0000003a ExFatFile::dirCache(unsigned char, unsigned char)
6000247c g     F .text.code	00000002 CrashReportClass::clear()
00004d74 g     F .text.itcm	0000004c ExFatFile::mkdir(ExFatFile*, ExName_t*)
20200080 g       .bss.dma	00000000 _heap_start
000028bc  w    F .text.itcm	00000002 SDClass::~SDClass()
00004900 g     F .text.itcm	00000064 ExFatVolume::chdir(char const*)
00000b6c  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
20001f1c g     O .data	00000004 CrashReport
00007e70 g     F .text.itcm	000000b0 SharedSpiCard::cardCommand(unsigned char, unsigned long)
00002224  w    F .text.itcm	000000ac File::~File()
00000003 g       *ABS*	00000000 _itcm_block_count
20018ba4 g     O .bss	00000004 tail
20018be0 g     O .bss	00000020 endpoint0_transfer_data
00005990 g     F .text.itcm	0000002a FatFile::getLfnChar(DirLfn_t*, unsigned char)
00003160 g     F .text.itcm	00000060 FsCache::prepare(unsigned long, unsigned char)
0000bc9c g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000b34c g     F .text.itcm	000002b8 pwm_init
20017d98 g     O .bss	00000050 file
60001c4c g     F .text.code	00000064 usb_pll_start
00012010 g     F .text.itcm	000000a0 __pow5mult
000064f8 g     F .text.itcm	0000005c FatFile::rmdir()
2000063c g     O .data	0000000c vtable for CrashReportClass
00006d38 g     F .text.itcm	000000a2 FatPartition::allocateCluster(unsigned long, unsigned long*)
20017de8 g     O .bss	00000004 haveStore
00008668  w    F .text.itcm	00000002 SdioCard::end()
00002b08  w    F .text.itcm	0000004c SDClass::exists(char const*)
00000000  w      *UND*	00000000 __deregister_frame_info
20018c00 g     O .bss	00000020 endpoint0_transfer_ack
20018c28 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
20017df0 g     O .bss	00000800 i2s_buffer
0000ad44 g     F .text.itcm	00000028 usb_transmit
0000b908  w    F .text.itcm	00000026 Print::println(char const*)
0000b814 g     F .text.itcm	00000020 systick_isr
0000073c g     F .text.itcm	00000012 rtc_get_datetime(datetime_t*)
20001f78 g     O .data	00000010 Serial
200185f0 g     O .bss	00000020 logBuffer
20017dec g     O .bss	00000004 head
0000b968  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00007adc g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
6000179c  w    F .text.code	00000002 startup_early_hook
00004964 g     F .text.itcm	0000008e ExFatFile::addCluster()
200006e0  w    O .data	0000002c vtable for File
00008160 g     F .text.itcm	00000074 SharedSpiCard::readData(unsigned char*, unsigned int)
00002b54  w    F .text.itcm	000000ea SDClass::usedSize()
00009f98 g     F .text.itcm	00000044 usb_serial_peekchar
0000c6a0 g     F .text.itcm	00000000 memchr
00006ddc g     F .text.itcm	00000020 FatPartition::fatPut(unsigned long, unsigned long)
0000a1bc g     F .text.itcm	000002c4 set_arm_clock
20018b98 g     O .bss	00000004 systick_cycle_count
2000256c g     O .data	00000016 usb_string_serial_number_default
000112e8 g     F .text.itcm	000001d0 _free_r
000082bc g     F .text.itcm	000000dc SharedSpiCard::erase(unsigned long, unsigned long)
00008514 g     F .text.itcm	00000052 SharedSpiCard::writeData(unsigned char, unsigned char const*)
00008d14 g     F .text.itcm	00000078 SdioCard::readStop()
00007c58  w    F .text.itcm	00000004 SharedSpiCard::type() const
0000c0a0 g     F .text.itcm	0000001c __locale_mb_cur_max
0000b958  w    F .text.itcm	00000004 usb_serial_class::flush()
00003380 g     F .text.itcm	000000a8 ExFatFormatter::writeUpcase(unsigned long)
00012c7c g     F .text.itcm	00000082 _sungetc_r
20002500 g     O .data	00000004 __malloc_sbrk_base
0000b950  w    F .text.itcm	00000004 usb_serial_class::read()
20017af4 g     O .bss	00000008 AudioOutputI2SOct::dma
000127bc g     F .text.itcm	00000024 _strtoll_r
000077fc g     F .text.itcm	0000012c FatFile::remove()
0000b084  w    F .text.itcm	00000004 __cxa_pure_virtual
000120b0 g     F .text.itcm	000000ae __lshift
00005f1c g     F .text.itcm	000000ce FatFile::mkdir(FatFile*, char const*, bool)
00001238 g     F .text.itcm	000002b0 storeData(short)
0000ad14 g     F .text.itcm	0000002e usb_prepare_transfer
00007c5c  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000aec4 g     F .text.itcm	00000190 unused_interrupt_vector
00012b7c g     F .text.itcm	00000100 __ssprint_r
60001cb0 g     F .text.code	0000011c tempmon_init
20018bac g     O .bss	00000004 usb_timer0_callback
00007140 g     F .text.itcm	00000126 FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
00000eb4  w    F .text.itcm	00000002 SdFs::~SdFs()
00012e38 g     F .text.itcm	0000005e _vasnprintf_r
0000bc94  w    F .text.itcm	00000002 serialEvent()
20017a64 g     O .bss	00000010 AudioOutputPWM::dma
000103f8 g     F .text.itcm	000000a4 __register_exitproc
00007c88 g     F .text.itcm	00000070 DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
0000433c g     F .text.itcm	000000fc ExFatFile::open(ExFatFile*, char const*, int)
0000ce9c g     F .text.itcm	000000a0 strncmp
00007088 g     F .text.itcm	000000b8 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
00004dc0 g     F .text.itcm	000000d6 ExFatFile::mkdir(ExFatFile*, char const*, bool)
000055cc g     F .text.itcm	00000124 FatFormatter::makeFat16()
00009ff0 g     F .text.itcm	00000074 usb_serial_flush_input
20002520 g     O .data	00000004 fsamp
00004768 g     F .text.itcm	00000070 ExFatPartition::freeClusterCount()
00011ee0 g     F .text.itcm	00000130 __multiply
0000007c g     F .text.itcm	00000020 getDataCount()
0000a084 g     F .text.itcm	0000002c usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
00007f20 g     F .text.itcm	000001a0 SharedSpiCard::begin(SdSpiConfig)
20017aac g     O .bss	00000008 AudioOutputI2S2::dma
20017b48 g     O .bss	00000028 __malloc_current_mallinfo
20017a3c g     O .bss	00000008 AudioInputI2S2::dma
00000c94 g     F .text.itcm	00000090 i2s_setup()
200005a8 g     O .data	00000070 SPIClass::spiclass_lpspi4_hardware
000123dc g     F .text.itcm	000000ba __d2b
00008568 g     F .text.itcm	0000005c SharedSpiCard::writeData(unsigned char const*)
20017a8c g     O .bss	00000020 HardwareSerial::s_serials_with_serial_events
00000ea4  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001748 g     F .text.code	00000054 _reboot_Teensyduino_
000088cc  w    F .text.itcm	0000000e SdioCard::~SdioCard()
600017a0 g     F .text.code	00000002 startup_default_middle_hook
00000d24 g     F .text.itcm	000000a8 dma_setup()
00007d14 g     F .text.itcm	00000066 DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000081d4 g     F .text.itcm	0000003e SharedSpiCard::readRegister(unsigned char, void*)
00008e1c g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
00012948 g     F .text.itcm	00000024 _strtoul_r
0000a5e8 g     F .text.itcm	00000660 usb_isr
0000c020 g     F .text.itcm	0000000c __cxa_atexit
00003c9c g     F .text.itcm	000001b2 ExFatFile::read(void*, unsigned int)
00000e24  w    F .text.itcm	00000040 FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
000083ec g     F .text.itcm	0000003e SharedSpiCard::readStop()
00001c00  w    F .text.itcm	00000018 SDFile::peek()
000031c0 g     F .text.itcm	0000000e FsCache::sync()
20017b1c g     O .bss	00000008 AudioOutputPT8211_2::dma
20001f28 g     O .data	00000050 SPI
0000c740 g     F .text.itcm	00000062 memcmp
200006b8  w    O .data	00000028 vtable for usb_serial_class
000098b0 g     F .text.itcm	00000012 SdSpiArduinoDriver::send(unsigned char)
0000991c g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
200186c8 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000cd60 g     F .text.itcm	00000058 sscanf
0000c01c  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00004ab4 g     F .text.itcm	0000005a ExFatFile::rmdir()
20017ac4 g     O .bss	00000008 AudioInputI2SHex::dma
00008398 g     F .text.itcm	00000054 SharedSpiCard::readStart(unsigned long)
000124f4 g     F .text.itcm	00000046 __copybits
200020f8 g     O .data	00000408 __malloc_av_
00001f04  w    F .text.itcm	00000014 SDFile::flush()
0000a118 g     F .text.itcm	000000a4 usb_serial_flush_output
20017a24 g     O .bss	00000008 AudioInputI2S::dma
0000c908 g     F .text.itcm	00000002 __malloc_lock
00003a18 g     F .text.itcm	000000cc ExFatFile::getName8(char*, unsigned int)
20002800 g     O .data	000002c0 _VectorsRam
000098c4 g     F .text.itcm	0000004e SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
0000545c g     F .text.itcm	000000b4 FatFormatter::initFatDir(unsigned char, unsigned long)
00012e98 g     F .text.itcm	0000005e _calloc_r
0000263c g     F .text.itcm	00000230 SPIClass::begin()
0000108c g     F .text.itcm	000000a4 makeHeader(long*)
00007474 g     F .text.itcm	000002a4 FatFile::open(FatFile*, FatLfn_t*, int)
20002560 g     O .data	00000004 t_acq
20002587 g     O .data	00000001 yield_active_check_flags
00004c60 g     F .text.itcm	0000005e ExFatFile::sync()
20018bd5 g     O .bss	00000001 usb_high_speed
00006314 g     F .text.itcm	000001e4 FatFile::rename(FatFile*, char const*)
00008b94 g     F .text.itcm	00000054 SdioCard::isBusy()
20017ae4 g     O .bss	00000008 AudioInputI2SQuad::dma
0000c86c g     F .text.itcm	0000009a memset
0000b970 g     F .text.itcm	00000010 main
00000eb4  w    F .text.itcm	00000002 SdFs::~SdFs()
20017a54 g     O .bss	00000008 AudioOutputI2S::dma
20017b74 g     O .bss	00000004 __malloc_max_total_mem
000044a8 g     F .text.itcm	000000b2 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20200000 g     O .bss.dma	00000062 usb_descriptor_buffer
000085c4 g     F .text.itcm	00000064 SharedSpiCard::writeSector(unsigned long, unsigned char const*)
000051c8 g     F .text.itcm	00000268 ExFatFile::write(void const*, unsigned int)
0000307c g     F .text.itcm	0000009c lbaToMbrChs(unsigned char*, unsigned long, unsigned long)
00005d30 g     F .text.itcm	00000046 FatFile::dirEntry(DirFat_t*)
00002048  w    F .text.itcm	0000005a SDFile::available()
0000b604 g     F .text.itcm	00000058 usb_init_serialnumber
0000df38 g     F .text.itcm	00000024 _strtol_r
600025f8 g       .text.code	00000000 __init_array_end
000105c8 g     F .text.itcm	00000c84 _dtoa_r
0000c0f8 g     F .text.itcm	00000570 _malloc_r
00007c64 g     F .text.itcm	00000010 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
20018bc8 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
000103b0 g     F .text.itcm	0000001a __ascii_wctomb
00001b1c  w    F .text.itcm	00000012 SDFile::isOpen()
00007928 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
20017b30 g     O .bss	00000004 FatVolume::m_cwv
0000024c g     F .text.itcm	00000012 menu1()
20017acc g     O .bss	00000008 AudioInputI2SOct::dma
00012dc0 g     F .text.itcm	00000078 __submore
20000850  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000b74c g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
0000b9b0 g     F .text.itcm	00000058 Stream::readBytesUntil(char, char*, unsigned int)
0000286c g     F .text.itcm	00000008 SPIClass::transfer(void const*, void*, unsigned int)
0000ae60 g     F .text.itcm	00000064 micros
00004b10 g     F .text.itcm	00000150 ExFatFile::syncDir()
0001124c g     F .text.itcm	0000009c _malloc_trim_r
60002628 g     O .text.progmem	00000004 string0
0000a0b0 g     F .text.itcm	00000018 usb_serial_write
600017a4  w    F .text.code	00000002 startup_late_hook
00008628 g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000b954  w    F .text.itcm	00000004 usb_serial_class::available()
60002700  w    O .text.progmem	00000001 _serialEvent_default
00006788 g     F .text.itcm	0000000c FatFile::sync()
000058c0 g     F .text.itcm	000000d0 FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)
00002ab8  w    F .text.itcm	00000050 SDClass::mkdir(char const*)
20000000 g     O .data	00000280 endpoint_queue_head
600025f8  w    O .text.progmem	00000016 usb_string_product_name
0000ad94 g     F .text.itcm	000000cc delay
20018bba g     O .bss	00000002 dma_channel_allocated_mask
00003bc0 g     F .text.itcm	00000024 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
00012f20 g     F .fini	00000000 _fini
00007e2c g     F .text.itcm	00000044 SharedSpiCard::isBusy()
20017afc g     O .bss	00000008 AudioOutputPT8211::dma
60001020 g     O .text.headers	0000000c BootData
20018ba0 g     O .bss	00000004 t_off
20017a5c g     O .bss	00000008 AudioOutputMQS::dma
00004448 g     F .text.itcm	00000032 ExFatFile::openNext(ExFatFile*, int)
0000cd14 g     F .text.itcm	0000004c sprintf
0000ba68 g     F .text.itcm	0000001e Print::printf(char const*, ...)
0000bb08 g     F .text.itcm	00000016 Print::print(long)
00005d10 g     F .text.itcm	0000001e FatFile::close()
0000b1e8 g     F .text.itcm	00000004 Panic_Temp_isr
00000bd0 g     F .text.itcm	000000c4 setAudioFrequency(int)
000021dc  w    F .text.itcm	00000048 SDFile::~SDFile()
200186cc g     O .bss	000004cc sd
00005db8 g     F .text.itcm	00000162 FatFile::mkdir(FatFile*, FatLfn_t*)
00008854  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00000f08  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
00001f9c  w    F .text.itcm	00000054 File::write(unsigned char)
000103cc g     F .text.itcm	0000002c _write_r
20005c64 g     O .bss	000004d4 SD
00008be8 g     F .text.itcm	000000d4 SdioCard::erase(unsigned long, unsigned long)
00000fd8 g     F .text.itcm	000000b4 filing_init()
0000bcf0 g     F .text.itcm	0000000c nanf
20002508 g     O .data	00000004 _impure_ptr
2000078c  w    O .data	00000024 vtable for Stream
00003e50 g     F .text.itcm	0000002c ExFatFile::peek()
20000618  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
20017adc g     O .bss	00000008 AudioOutputSPDIF::dma
00011c5c g     F .text.itcm	0000005c _mbrtowc_r
00001f88  w    F .text.itcm	00000014 SDFile::write(void const*, unsigned int)
00007c24 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
000087f4 g     F .text.itcm	0000000c SdioCard::errorCode() const
000060b8 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
00000f7c  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
60002580 g       .text.code	00000000 __preinit_array_end
60001e54 g     F .text.code	00000628 CrashReportClass::printTo(Print&) const
20017a34 g     O .bss	00000008 AudioInputTDM::dma
000011dc g     F .text.itcm	0000005c newFileName(char*)
20017ab4 g     O .bss	00000008 AudioOutputTDM2::dma
00000eb8  w    F .text.itcm	00000018 FsFile::~FsFile()
00004608 g     F .text.itcm	00000036 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000c668 g     F .text.itcm	0000002a __ascii_mbtowc
000122b8 g     F .text.itcm	00000054 __ulp
00001898 g     F .text.itcm	00000148 setup
20001a5c g     O .data	00000084 usb_descriptor_list
000089d4 g     F .text.itcm	00000020 SdioCard::status()
00005d98 g     F .text.itcm	00000020 FatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000e20  w    F .text.itcm	00000002 Print::flush()
00002a54  w    F .text.itcm	00000062 SDClass::rmdir(char const*)
0000610c g     F .text.itcm	0000019a FatFile::read(void*, unsigned int)
00006100 g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
20017a20 g     O .bss	00000004 ExFatVolume::m_cwv
20068000 g       .text.csf	00000000 _estack
00007c4c g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000b8d4 g     F .text.itcm	00000034 DMAChannel::release()
00001ff0  w    F .text.itcm	00000058 File::read()
0000a0c8 g     F .text.itcm	00000050 usb_serial_write_buffer_free
20017a2c g     O .bss	00000008 AudioInputPDM::dma
00009da4 g     F .text.itcm	00000108 usb_serial_configure
000022d0  w    F .text.itcm	000000bc File::~File()
0000ba54  w    F .text.itcm	00000014 _write
20017a44 g     O .bss	00000008 AudioInputPDM2::dma
20002ac0 g       .data	00000000 _edata
000046c8 g     F .text.itcm	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
20018bcc g     O .bss	00000001 external_psram_size
00008854  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00003284 g     F .text.itcm	00000054 FsName::get16()
00007cf8  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00008444 g     F .text.itcm	00000074 DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00007c74 g     F .text.itcm	00000012 DedicatedSpiCard::setDedicatedSpi(bool)
00003ae4 g     F .text.itcm	00000068 ExFatFile::hashName(ExName_t*)
00005be0 g     F .text.itcm	0000007c FatFile::addDirCluster()
0000b95c  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00006b0c g     F .text.itcm	0000002c FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)
00000dcc g     F .text.itcm	00000028 acqModifyFrequency(unsigned long)
0000bca0 g     F .text.itcm	0000004e ultoa
000028bc  w    F .text.itcm	00000002 SDClass::~SDClass()
00007a5c g     F .text.itcm	00000080 FsBaseFile::open(FsVolume*, char const*, int)
0000bc98 g     F .text.itcm	00000004 operator new(unsigned int)
0000b7cc g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20002504 g     O .data	00000004 __malloc_trim_threshold
0000b94c  w    F .text.itcm	00000004 usb_serial_class::peek()
00000ea8  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
00000750 g     F .text.itcm	0000002e rtcSetDate(int, int, int)
00000780 g     F .text.itcm	0000002e rtcSetTime(int, int, int)
000121a4 g     F .text.itcm	00000114 __mdiff
00000124 g     F .text.itcm	00000074 pullData(unsigned long*)
00008844 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
00004680 g     F .text.itcm	00000046 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00005a4c g     F .text.itcm	00000124 FatFile::getName8(char*, unsigned int)
20017aec g     O .bss	00000008 AudioOutputI2SHex::dma
00001130 g     F .text.itcm	00000034 checkEndOfFile(short)
00003f84 g     F .text.itcm	000003b8 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
000003a8 g     F .text.itcm	000000d0 menu3()
0000b930  w    F .text.itcm	00000018 Print::println(unsigned long, int)
00008d14 g     F .text.itcm	00000078 SdioCard::writeStop()
0001259c g     F .text.itcm	00000072 __sccl
00003b88 g     F .text.itcm	00000014 ExFatFile::close()
20000960 g     O .data	00000101 _ctype_
60002580 g       .text.code	00000000 __init_array_start
0000c01c  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
60002480 g     F .text.code	00000020 CrashReportClass::operator bool()
20001f20 g     O .data	00000004 F_BUS_ACTUAL
20017d84 g     O .bss	00000004 disk_count
00003324 g     F .text.itcm	00000040 ExFatFormatter::writeUpcaseByte(unsigned char)
0000297c  w    F .text.itcm	00000074 SDClass::rename(char const*, char const*)
0000703c g     F .text.itcm	0000004c FatVolume::chdir(char const*)
00000478 g     F .text.itcm	000001a4 time2date(unsigned long, datetime_t*)
0000061c g     F .text.itcm	0000011c date2time(datetime_t*)
0000b980 g     F .text.itcm	00000030 Stream::timedRead()
00000000 g       .text.itcm	00000000 _stext
0000b834 g     F .text.itcm	000000a0 DMAChannel::begin(bool)
00007cfc  w    F .text.itcm	00000006 SharedSpiCard::end()
0000cdc0 g     F .text.itcm	000000dc strlen
2001867c g     O .bss	00000004 ready
000060c8 g     F .text.itcm	00000038 FatFile::openCluster(FatFile*)
0000c0bc g     F .text.itcm	00000006 __locale_ctype_ptr_l
00006554 g     F .text.itcm	000000ae FatFile::seekSet(unsigned long)
00011560 g     F .text.itcm	00000510 __gethex
600025f8 g     O .text.progmem	00000016 usb_string_product_name_default
20017b14 g     O .bss	00000008 AudioOutputI2SQuad::dma
00010398 g     F .text.itcm	00000018 vdprintf
00008b28 g     F .text.itcm	0000006c SdioCard::sectorCount()
000066dc g     F .text.itcm	000000ac FatFile::openNext(FatFile*, int)
600017a0  w    F .text.code	00000002 startup_middle_hook
200007e0 g     O .data	00000070 vtable for SdioCard
00005b70 g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
600017ac g     F .text.code	000000e4 configure_cache
00000ea0  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
00008214  w    F .text.itcm	00000008 SharedSpiCard::readCSD(csd_t*)
20017b04 g     O .bss	00000008 AudioOutputSPDIF2::dma
00001164 g     F .text.itcm	00000078 newDirectory(char*)
00009514 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00000260 g     F .text.itcm	00000148 menu2()
20017abc g     O .bss	00000008 AudioInputAnalog::dma
000096e0 g     F .text.itcm	00000104 SdSpiArduinoDriver::activate()
000007b0 g     F .text.itcm	000002d8 compress(void*)
60002580 g       .text.code	00000000 __preinit_array_start
0000ad6c g     F .text.itcm	00000024 usb_receive
0000455c g     F .text.itcm	000000aa ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00011e70 g     F .text.itcm	0000005a __lo0bits
20002568 g     O .data	00000004 tempDatai
00006604 g     F .text.itcm	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00019000 g       *ABS*	00000000 _flashimagelen
00006794 g     F .text.itcm	000000d6 FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
0000842c g     F .text.itcm	00000016 SharedSpiCard::syncDevice()
0000bcfc g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
00000eb8  w    F .text.itcm	00000018 FsFile::~FsFile()
0000b088 g     F .text.itcm	00000030 rtc_get
000049f4 g     F .text.itcm	000000be ExFatFile::remove()
70000000 g       .bss.extram	00000000 _extram_start
0000b810 g     F .text.itcm	00000004 pendablesrvreq_isr
00002c40  w    F .text.itcm	0000003c SDClass::totalSize()
20017ad4 g     O .bss	00000008 AudioInputSPDIF3::dma
00000e1c  w    F .text.itcm	00000004 Print::availableForWrite()
20001f8c g     O .data	0000016c __global_locale
000090f4 g     F .text.itcm	00000364 SdioCard::begin(SdioConfig)
00003b9c g     F .text.itcm	00000024 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
00009eac g     F .text.itcm	000000ec usb_serial_read
0000ba88 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
0000acac g     F .text.itcm	00000068 usb_config_tx
00006c48 g     F .text.itcm	000000f0 FatPartition::fatGet(unsigned long, unsigned long*)
0000c0e8 g     F .text.itcm	00000010 free
000039cc g     F .text.itcm	0000004c ExFatFile::cmpName(DirName_t const*, ExName_t*)
00011d18 g     F .text.itcm	00000080 __multadd
00011d04 g     F .text.itcm	00000012 _Bfree
00001e10  w    F .text.itcm	0000001a SDFile::size()
000059bc g     F .text.itcm	00000090 FatFile::getSFN(char*, unsigned int)
0000219c  w    F .text.itcm	00000040 SDFile::~SDFile()
2000256c  w    O .data	00000016 usb_string_serial_number
00009580 g     F .text.itcm	000000cc SdioCard::readSector(unsigned long, unsigned char*)
00008828 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	cmp	r0, r1
60001402:	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	cmp	r0, r2
60001406:	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	ldr.w	r3, [r1], #4
6000140c:	str.w	r3, [r0], #4

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001410:	cmp	r2, r0
60001412:	bhi.n	60001408 <memory_copy+0x8>
60001414:	bx	lr
60001416:	nop

60001418 <memory_clear>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	cmp	r0, r1
6000141a:	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	movs	r3, #0
6000141e:	str.w	r3, [r0], #4
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001422:	cmp	r1, r0
60001424:	bhi.n	6000141e <memory_clear+0x6>
60001426:	bx	lr

60001428 <ResetHandler2>:
	__builtin_unreachable();
}

__attribute__((section(".startup"), noinline, noreturn))
static void ResetHandler2(void)
{
60001428:	push	{r7, lr}
	unsigned int i;
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142a:	bl	6000179c <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000142e:	ldr	r3, [pc, #376]	; (600015a8 <ResetHandler2+0x180>)
60001430:	movs	r0, #8
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
60001432:	ldr	r2, [pc, #376]	; (600015ac <ResetHandler2+0x184>)
60001434:	ldr	r1, [pc, #376]	; (600015b0 <ResetHandler2+0x188>)
__attribute__((section(".startup"), noinline, noreturn))
static void ResetHandler2(void)
{
	unsigned int i;
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	str.w	r0, [r3, #340]	; 0x154
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	ldr	r0, [pc, #376]	; (600015b4 <ResetHandler2+0x18c>)
6000143c:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001440:	ldr	r2, [pc, #372]	; (600015b8 <ResetHandler2+0x190>)
60001442:	ldr	r1, [pc, #376]	; (600015bc <ResetHandler2+0x194>)
60001444:	ldr	r0, [pc, #376]	; (600015c0 <ResetHandler2+0x198>)
60001446:	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144a:	ldr	r1, [pc, #376]	; (600015c4 <ResetHandler2+0x19c>)
6000144c:	ldr	r0, [pc, #376]	; (600015c8 <ResetHandler2+0x1a0>)
6000144e:	bl	60001418 <memory_clear>
60001452:	ldr	r4, [pc, #376]	; (600015cc <ResetHandler2+0x1a4>)

	// enable FPU
	SCB_CPACR = 0x00F00000;
60001454:	ldr	r1, [pc, #376]	; (600015d0 <ResetHandler2+0x1a8>)
60001456:	mov.w	r0, #15728640	; 0xf00000

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145a:	movs	r3, #0
6000145c:	ldr	r2, [pc, #372]	; (600015d4 <ResetHandler2+0x1ac>)
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
6000145e:	str	r0, [r1, #0]

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001460:	str.w	r2, [r4, r3, lsl #2]
60001464:	adds	r3, #1
60001466:	cmp	r3, #176	; 0xb0
60001468:	bne.n	60001460 <ResetHandler2+0x38>
6000146a:	ldr	r3, [pc, #364]	; (600015d8 <ResetHandler2+0x1b0>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000146c:	movs	r1, #128	; 0x80
6000146e:	ldr	r2, [pc, #364]	; (600015dc <ResetHandler2+0x1b4>)
60001470:	strb.w	r1, [r3], #1
60001474:	cmp	r3, r2
60001476:	bne.n	60001470 <ResetHandler2+0x48>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001478:	ldr	r5, [pc, #300]	; (600015a8 <ResetHandler2+0x180>)
6000147a:	mov.w	r8, #2155905152	; 0x80808080
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
6000147e:	ldr	r1, [pc, #352]	; (600015e0 <ResetHandler2+0x1b8>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001480:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001484:	ldr	r3, [pc, #348]	; (600015e4 <ResetHandler2+0x1bc>)
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001486:	movs	r6, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	ldr.w	sl, [pc, #408]	; 60001624 <ResetHandler2+0x1fc>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	ldr.w	r9, [pc, #408]	; 60001628 <ResetHandler2+0x200>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001490:	str	r4, [r3, #0]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001492:	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001496:	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000149a:	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000149e:	str.w	r9, [r5, #240]	; 0xf0
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014a2:	ldr	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014a4:	ldr	r7, [pc, #320]	; (600015e8 <ResetHandler2+0x1c0>)
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014a6:	orr.w	r3, r3, #458752	; 0x70000
600014aa:	str	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ac:	ldr	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ae:	ldr	r1, [pc, #316]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014b0:	bic.w	r3, r3, #127	; 0x7f
600014b4:	orr.w	r3, r3, #64	; 0x40
600014b8:	str	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ba:	ldr	r3, [r7, #36]	; 0x24
600014bc:	bic.w	r3, r3, #127	; 0x7f
600014c0:	orr.w	r3, r3, #64	; 0x40
600014c4:	str	r3, [r7, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c6:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014c8:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014ca:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014cc:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
600014ce:	bl	600017ac <configure_cache>
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014d2:	ldr	r2, [pc, #284]	; (600015f0 <ResetHandler2+0x1c8>)
	_VectorsRam[15] = systick_isr;
600014d4:	ldr	r3, [pc, #284]	; (600015f4 <ResetHandler2+0x1cc>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014d6:	movs	r0, #99	; 0x63
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014d8:	str	r2, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014da:	movs	r1, #3

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
600014dc:	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014de:	ldr	r2, [pc, #280]	; (600015f8 <ResetHandler2+0x1d0>)
	SYST_CVR = 0;
600014e0:	ldr	r3, [pc, #280]	; (600015fc <ResetHandler2+0x1d4>)
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014e2:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014e4:	add.w	r0, r0, #3758096384	; 0xe0000000
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600014e8:	str	r6, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014ea:	str.w	r1, [r2, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ee:	addw	r0, r0, #4001	; 0xfa1
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
600014f2:	ldr	r1, [pc, #268]	; (60001600 <ResetHandler2+0x1d8>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014f4:	ldr	r2, [pc, #268]	; (60001604 <ResetHandler2+0x1dc>)
600014f6:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
600014fa:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
600014fc:	ldr	r2, [pc, #264]	; (60001608 <ResetHandler2+0x1e0>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
600014fe:	orr.w	r3, r3, #16777216	; 0x1000000
60001502:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001504:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001506:	ldr	r1, [pc, #260]	; (6000160c <ResetHandler2+0x1e4>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001508:	orr.w	r3, r3, #1
6000150c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000150e:	ldr	r3, [r0, #0]
60001510:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001512:	bl	60001c4c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001516:	str.w	r8, [r5, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000151a:	ldr	r0, [pc, #244]	; (60001610 <ResetHandler2+0x1e8>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000151c:	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001520:	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001524:	str.w	r9, [r5, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001528:	bl	60002570 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000152c:	ldr	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
6000152e:	ldr	r2, [pc, #228]	; (60001614 <ResetHandler2+0x1ec>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001530:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001534:	ldr	r3, [pc, #224]	; (60001618 <ResetHandler2+0x1f0>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	str	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
60001538:	str	r6, [r2, #0]
	PIT_TCTRL0 = 0;
6000153a:	str.w	r6, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000153e:	str.w	r6, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001542:	str.w	r6, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001546:	str.w	r6, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000154a:	ldr	r2, [r3, #56]	; 0x38
6000154c:	lsls	r2, r2, #31
6000154e:	bmi.n	60001562 <ResetHandler2+0x13a>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001550:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001554:	ldr	r1, [pc, #196]	; (6000161c <ResetHandler2+0x1f4>)
60001556:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001558:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000155a:	ldr	r2, [r3, #56]	; 0x38
6000155c:	orr.w	r2, r2, #1
60001560:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001562:	ldr	r2, [pc, #180]	; (60001618 <ResetHandler2+0x1f0>)
60001564:	ldr	r4, [pc, #184]	; (60001620 <ResetHandler2+0x1f8>)
60001566:	ldr	r3, [r2, #8]
60001568:	orr.w	r3, r3, #65537	; 0x10001
6000156c:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
6000156e:	bl	60001890 <configure_external_ram>
#endif
	analog_init();
60001572:	bl	600024a0 <analog_init>
	pwm_init();
60001576:	bl	60002578 <__pwm_init_veneer>
	tempmon_init();
6000157a:	bl	60001cb0 <tempmon_init>
	startup_middle_hook();
6000157e:	bl	600017a0 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001582:	ldr	r3, [r4, #0]
#endif
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290?p=87273&viewfull=1#post87273

	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001584:	cmp	r3, #19
60001586:	bls.n	60001582 <ResetHandler2+0x15a>
	usb_init();
60001588:	bl	6000165c <usb_init>
6000158c:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000158e:	cmp.w	r3, #300	; 0x12c
60001592:	bcc.n	6000158c <ResetHandler2+0x164>
	//printf("before C++ constructors\n");
	startup_debug_reset();
60001594:	bl	600017a8 <startup_debug_reset>
	startup_late_hook();
60001598:	bl	600017a4 <startup_default_late_hook>
	__libc_init_array();
6000159c:	bl	60002530 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
600015a0:	bl	60002538 <__main_veneer>
	
	while (1) asm("WFI");
600015a4:	wfi
600015a6:	b.n	600015a4 <ResetHandler2+0x17c>
600015a8:	.word	0x400d8000
600015ac:	.word	0x00012f28
600015b0:	.word	0x60002704
600015b4:	.word	0x00000000
600015b8:	.word	0x20002ac0
600015bc:	.word	0x60015630
600015c0:	.word	0x20000000
600015c4:	.word	0x20018c80
600015c8:	.word	0x20002ac0
600015cc:	.word	0x20002800
600015d0:	.word	0xe000ed88
600015d4:	.word	0x0000aec5
600015d8:	.word	0xe000e400
600015dc:	.word	0xe000e4a0
600015e0:	.word	0xe000ed24
600015e4:	.word	0xe000ed08
600015e8:	.word	0x400fc000
600015ec:	.word	0x400ac000
600015f0:	.word	0x0000b811
600015f4:	.word	0x0000b815
600015f8:	.word	0xe000e014
600015fc:	.word	0xe000e018
60001600:	.word	0xe000edfc
60001604:	.word	0x20200000
60001608:	.word	0xe0001000
6000160c:	.word	0x20018b98
60001610:	.word	0x016e3600
60001614:	.word	0x40084000
60001618:	.word	0x400d4000
6000161c:	.word	0x56c00000
60001620:	.word	0x20018b9c
60001624:	.word	0x2018101b
60001628:	.word	0x13110d0c

6000162c <ResetHandler>:
static void ResetHandler2(void);

__attribute__((section(".startup"), naked))
void ResetHandler(void)
{
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162c:	ldr	r3, [pc, #28]	; (6000164c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000162e:	mov.w	r1, #11141120	; 0xaa0000
static void ResetHandler2(void);

__attribute__((section(".startup"), naked))
void ResetHandler(void)
{
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001632:	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001634:	ldr	r0, [pc, #28]	; (60001654 <ResetHandler+0x28>)
static void ResetHandler2(void);

__attribute__((section(".startup"), naked))
void ResetHandler(void)
{
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001636:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001638:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000163a:	ldr	r2, [pc, #28]	; (60001658 <ResetHandler+0x2c>)
__attribute__((section(".startup"), naked))
void ResetHandler(void)
{
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000163c:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000163e:	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001640:	dsb	sy
	__asm__ volatile("isb":::"memory");
60001644:	isb	sy
	ResetHandler2();
60001648:	bl	60001428 <ResetHandler2>
6000164c:	.word	0x400ac000
60001650:	.word	0xaaaaaabf
60001654:	.word	0x00200007
60001658:	.word	0x20068000

6000165c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000165c:	ldr	r3, [pc, #192]	; (60001720 <usb_init+0xc4>)
6000165e:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001662:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001664:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001668:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
6000166c:	bl	60002558 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001670:	ldr	r1, [pc, #176]	; (60001724 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001672:	ldr	r0, [pc, #180]	; (60001728 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001674:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001678:	ldr	r4, [pc, #176]	; (6000172c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000167a:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000167e:	ldr	r3, [pc, #176]	; (60001730 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001680:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001684:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001688:	ldr	r2, [r4, #0]
6000168a:	ands	r3, r2
6000168c:	cbnz	r3, 60001696 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000168e:	ldr.w	r3, [r0, #424]	; 0x1a8
60001692:	lsls	r2, r3, #30
60001694:	beq.n	600016cc <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001696:	ldr	r3, [pc, #144]	; (60001728 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001698:	mov.w	r1, #2147483648	; 0x80000000
6000169c:	ldr	r2, [pc, #140]	; (6000172c <usb_init+0xd0>)
6000169e:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600016a0:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600016a2:	ldr.w	r1, [r3, #320]	; 0x140
600016a6:	orr.w	r1, r1, #2
600016aa:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600016ae:	ldr.w	r3, [r2, #320]	; 0x140
600016b2:	lsls	r3, r3, #30
600016b4:	bmi.n	600016ae <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016b6:	mov.w	r0, #131072	; 0x20000
600016ba:	ldr	r1, [pc, #120]	; (60001734 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016bc:	ldr	r3, [pc, #108]	; (6000172c <usb_init+0xd0>)
600016be:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016c2:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016c4:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016c6:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016c8:	bl	60002560 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016cc:	ldr	r5, [pc, #104]	; (60001738 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600016ce:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016d0:	ldr	r3, [pc, #88]	; (6000172c <usb_init+0xd0>)
600016d2:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016d6:	ldr	r4, [pc, #80]	; (60001728 <usb_init+0xcc>)
600016d8:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016da:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016dc:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600016de:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016e0:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016e2:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016e6:	mov.w	r2, #640	; 0x280
600016ea:	bl	60002528 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016ee:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016f2:	movw	r1, #323	; 0x143
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600016f6:	mov.w	r0, #4194304	; 0x400000
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600016fa:	ldr	r3, [pc, #64]	; (6000173c <usb_init+0xe0>)
600016fc:	ldr	r2, [pc, #64]	; (60001740 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016fe:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001700:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001702:	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001706:	str.w	r1, [r4, #328]	; 0x148
6000170a:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000170e:	ldr	r2, [pc, #52]	; (60001744 <usb_init+0xe8>)
60001710:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001714:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001716:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001718:	str.w	r3, [r4, #320]	; 0x140
6000171c:	pop	{r4, r5, r6, pc}
6000171e:	nop
60001720:	.word	0x400d8000
60001724:	.word	0x400fc000
60001728:	.word	0x402e0000
6000172c:	.word	0x400d9000
60001730:	.word	0x001e1c00
60001734:	.word	0xe000e28c
60001738:	.word	0x20000000
6000173c:	.word	0x20002800
60001740:	.word	0x0000a5e9
60001744:	.word	0xe000e10c

60001748 <_reboot_Teensyduino_>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


FLASHMEM void _reboot_Teensyduino_(void)
{
60001748:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000174a:	ldr	r3, [pc, #56]	; (60001784 <_reboot_Teensyduino_+0x3c>)
6000174c:	ldr	r3, [r3, #96]	; 0x60
6000174e:	lsls	r3, r3, #30
60001750:	bmi.n	60001754 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001752:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001754:	cpsid	i
		USB1_USBCMD = 0;
60001756:	ldr	r3, [pc, #48]	; (60001788 <_reboot_Teensyduino_+0x40>)
60001758:	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
6000175a:	ldr	r2, [pc, #48]	; (6000178c <_reboot_Teensyduino_+0x44>)
{
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
6000175c:	str.w	r0, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001760:	add.w	r3, r3, #3758096384	; 0xe0000000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
60001764:	ldr	r1, [pc, #40]	; (60001790 <_reboot_Teensyduino_+0x48>)
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001766:	sub.w	r3, r3, #913408	; 0xdf000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
6000176a:	str	r1, [r2, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000176c:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
6000176e:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001772:	ldr	r2, [pc, #32]	; (60001794 <_reboot_Teensyduino_+0x4c>)
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001774:	add.w	r3, r3, #28672	; 0x7000
60001778:	ldr	r1, [pc, #28]	; (60001798 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000177a:	ldr	r2, [r2, #0]
6000177c:	mov	r0, r3
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
6000177e:	str	r1, [r3, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001780:	ldr	r3, [r2, #8]
60001782:	blx	r3
60001784:	.word	0x401f4400
60001788:	.word	0x402e0000
6000178c:	.word	0x400ac000
60001790:	.word	0x00200003
60001794:	.word	0x0020001c
60001798:	.word	0xeb120000

6000179c <startup_default_early_hook>:
6000179c:	bx	lr
6000179e:	nop

600017a0 <startup_default_middle_hook>:
600017a0:	bx	lr
600017a2:	nop

600017a4 <startup_default_late_hook>:
extern int main (void);
FLASHMEM void startup_default_early_hook(void) {}
void startup_early_hook(void)	__attribute__ ((weak, alias("startup_default_early_hook")));
FLASHMEM void startup_default_middle_hook(void) {}
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
600017a4:	bx	lr
600017a6:	nop

600017a8 <startup_debug_reset>:
void startup_late_hook(void)	__attribute__ ((weak, alias("startup_default_late_hook")));
extern void startup_debug_reset(void) __attribute__((noinline));
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600017a8:	nop
600017aa:	bx	lr

600017ac <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600017ac:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017ae:	ldr	r2, [pc, #144]	; (60001840 <configure_cache+0x94>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017b0:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017b2:	ldr	r3, [pc, #144]	; (60001844 <configure_cache+0x98>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017b4:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017b8:	ldr	r4, [pc, #140]	; (60001848 <configure_cache+0x9c>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017ba:	movs	r6, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017bc:	ldr.w	lr, [pc, #200]	; 60001888 <configure_cache+0xdc>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017c0:	movs	r7, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017c2:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600017c4:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017c6:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017ca:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017ce:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017d0:	ldr.w	lr, [pc, #184]	; 6000188c <configure_cache+0xe0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017d4:	ldr	r6, [pc, #116]	; (6000184c <configure_cache+0xa0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017d6:	str.w	lr, [r3]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017da:	ldr	r1, [pc, #116]	; (60001850 <configure_cache+0xa4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017dc:	str	r7, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017de:	str	r6, [r3, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017e0:	orr.w	r1, r1, #21
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017e4:	ldr	r7, [pc, #108]	; (60001854 <configure_cache+0xa8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017e6:	ldr	r6, [pc, #112]	; (60001858 <configure_cache+0xac>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017e8:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017ea:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017ec:	ldr	r7, [pc, #108]	; (6000185c <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017ee:	ldr	r6, [pc, #112]	; (60001860 <configure_cache+0xb4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017f0:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017f2:	str	r6, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017f4:	ldr	r7, [pc, #108]	; (60001864 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017f6:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017f8:	ldr	r6, [pc, #108]	; (60001868 <configure_cache+0xbc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017fa:	ldr	r1, [pc, #112]	; (6000186c <configure_cache+0xc0>)

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017fc:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017fe:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001800:	ldr	r7, [pc, #108]	; (60001870 <configure_cache+0xc4>)
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001802:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001804:	ldr	r6, [pc, #108]	; (60001874 <configure_cache+0xc8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001806:	ldr	r1, [pc, #112]	; (60001878 <configure_cache+0xcc>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001808:	str	r7, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000180a:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000180c:	ldr	r7, [pc, #108]	; (6000187c <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000180e:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001810:	ldr	r6, [pc, #108]	; (60001880 <configure_cache+0xd4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001812:	ldr	r1, [pc, #112]	; (60001884 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001814:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001816:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001818:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000181a:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
6000181c:	dsb	sy
	asm("isb");
60001820:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001824:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001828:	dsb	sy
	asm("isb");
6000182c:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001830:	ldr.w	r3, [r2, #-136]
60001834:	orr.w	r3, r3, #196608	; 0x30000
60001838:	str.w	r3, [r2, #-136]
6000183c:	pop	{r4, r5, r6, r7, pc}
6000183e:	nop
60001840:	.word	0xe000ed9c
60001844:	.word	0xe000eda0
60001848:	.word	0xe000ed94
6000184c:	.word	0x00100009
60001850:	.word	0x20018c80
60001854:	.word	0x00200013
60001858:	.word	0x07020021
6000185c:	.word	0x20000014
60001860:	.word	0x13080025
60001864:	.word	0x10000009
60001868:	.word	0x20200016
6000186c:	.word	0x130b0027
60001870:	.word	0x40000017
60001874:	.word	0x13100033
60001878:	.word	0x60000018
6000187c:	.word	0x070b002f
60001880:	.word	0x70000019
60001884:	.word	0x130b002f
60001888:	.word	0x1000003f
6000188c:	.word	0x03080025

60001890 <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
60001890:	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001892:	ldr	r3, [pc, #564]	; (60001ac8 <configure_external_ram+0x238>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001894:	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001896:	ldr	r6, [pc, #564]	; (60001acc <configure_external_ram+0x23c>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001898:	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000189a:	ldr	r1, [pc, #564]	; (60001ad0 <configure_external_ram+0x240>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000189c:	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018a0:	ldr	r5, [pc, #560]	; (60001ad4 <configure_external_ram+0x244>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600018a2:	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018a6:	ldr	r4, [pc, #560]	; (60001ad8 <configure_external_ram+0x248>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
600018a8:	sub	sp, #12
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018aa:	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018ae:	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600018b2:	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018b4:	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018b8:	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600018bc:	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018c0:	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018c4:	ldr	r1, [pc, #532]	; (60001adc <configure_external_ram+0x24c>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018c6:	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018ca:	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018ce:	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018d2:	ldr	r6, [pc, #524]	; (60001ae0 <configure_external_ram+0x250>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600018d4:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600018d6:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600018d8:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600018da:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600018dc:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600018de:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600018e2:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600018e6:	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018ea:	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018ee:	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600018f2:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600018f6:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600018fa:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600018fe:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001902:	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001906:	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001908:	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000190a:	ldr	r0, [pc, #472]	; (60001ae4 <configure_external_ram+0x254>)
6000190c:	ands	r0, r3
6000190e:	ldr	r3, [pc, #472]	; (60001ae8 <configure_external_ram+0x258>)
60001910:	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001912:	ldr	r0, [pc, #472]	; (60001aec <configure_external_ram+0x25c>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001914:	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001916:	ldr.w	r3, [r6, #132]	; 0x84
6000191a:	orr.w	r3, r3, #12
6000191e:	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001922:	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001924:	ldr	r3, [r0, #0]
60001926:	orrs	r3, r6
60001928:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000192a:	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000192c:	and.w	lr, r3, lr
60001930:	ldr	r3, [pc, #444]	; (60001af0 <configure_external_ram+0x260>)
60001932:	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001936:	ldr.w	lr, [pc, #496]	; 60001b28 <configure_external_ram+0x298>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000193a:	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000193c:	ldr	r3, [pc, #436]	; (60001af4 <configure_external_ram+0x264>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000193e:	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001940:	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001944:	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001946:	ldr	r7, [pc, #432]	; (60001af8 <configure_external_ram+0x268>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001948:	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000194c:	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000194e:	ldr	r3, [r0, #12]
60001950:	bic.w	r3, r3, #120	; 0x78
60001954:	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001956:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001958:	ands	r7, r3
6000195a:	ldr	r3, [pc, #416]	; (60001afc <configure_external_ram+0x26c>)
6000195c:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000195e:	ldr	r7, [pc, #408]	; (60001af8 <configure_external_ram+0x268>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001960:	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001962:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001964:	ands	r7, r3
60001966:	ldr	r3, [pc, #404]	; (60001afc <configure_external_ram+0x26c>)
60001968:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000196a:	ldr	r7, [pc, #404]	; (60001b00 <configure_external_ram+0x270>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000196c:	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000196e:	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001970:	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001972:	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001976:	ldr	r7, [pc, #396]	; (60001b04 <configure_external_ram+0x274>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001978:	bic.w	r3, r3, #63	; 0x3f
6000197c:	orr.w	r3, r3, #1
60001980:	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001984:	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001988:	ldr.w	lr, [pc, #388]	; 60001b10 <configure_external_ram+0x280>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000198c:	bic.w	r3, r3, #63	; 0x3f
60001990:	orr.w	r3, r3, #1
60001994:	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
60001998:	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000199a:	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000199c:	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000199e:	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600019a2:	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019a4:	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019a6:	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019aa:	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019ac:	ldr	r3, [pc, #344]	; (60001b08 <configure_external_ram+0x278>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019ae:	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019b2:	ldr	r2, [pc, #344]	; (60001b0c <configure_external_ram+0x27c>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019b4:	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019b6:	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019ba:	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019bc:	str.w	r1, [r3], #4
600019c0:	cmp	r3, r2
600019c2:	bne.n	600019bc <configure_external_ram+0x12c>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019c4:	ldr	r3, [pc, #292]	; (60001aec <configure_external_ram+0x25c>)
600019c6:	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600019c8:	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019ca:	orr.w	r2, r2, #1
600019ce:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600019d0:	ldr	r3, [r1, #0]
600019d2:	ldr	r2, [pc, #280]	; (60001aec <configure_external_ram+0x25c>)
600019d4:	ands.w	r3, r3, #1
600019d8:	bne.n	600019d0 <configure_external_ram+0x140>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019da:	ldr	r6, [pc, #308]	; (60001b10 <configure_external_ram+0x280>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019dc:	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019de:	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019e2:	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019e6:	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600019ea:	ldr	r7, [pc, #296]	; (60001b14 <configure_external_ram+0x284>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019ec:	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600019ee:	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019f2:	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600019f4:	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019f8:	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600019fc:	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a00:	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a04:	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a06:	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a0a:	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a0c:	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a10:	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a14:	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a18:	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a1c:	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a20:	ldr	r6, [pc, #244]	; (60001b18 <configure_external_ram+0x288>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a22:	ldr	r5, [pc, #248]	; (60001b1c <configure_external_ram+0x28c>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a24:	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a28:	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a2c:	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a30:	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a34:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a38:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a3c:	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a40:	ldr	r3, [r1, #20]
60001a42:	ldr	r2, [pc, #168]	; (60001aec <configure_external_ram+0x25c>)
60001a44:	lsls	r5, r3, #31
60001a46:	bpl.n	60001a40 <configure_external_ram+0x1b0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a48:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a4a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a4c:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a50:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a52:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a54:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a58:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a5c:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a60:	ldr	r3, [r1, #20]
60001a62:	ldr	r2, [pc, #136]	; (60001aec <configure_external_ram+0x25c>)
60001a64:	lsls	r4, r3, #31
60001a66:	bpl.n	60001a60 <configure_external_ram+0x1d0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a68:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a6a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a6c:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a70:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a72:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a74:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a78:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a7c:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a80:	ldr	r3, [r1, #20]
60001a82:	ldr	r2, [pc, #104]	; (60001aec <configure_external_ram+0x25c>)
60001a84:	lsls	r0, r3, #31
60001a86:	bpl.n	60001a80 <configure_external_ram+0x1f0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a88:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a8a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a8c:	ldr	r0, [pc, #144]	; (60001b20 <configure_external_ram+0x290>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a8e:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a90:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a92:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a96:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a9a:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a9e:	ldr	r3, [r1, #20]
60001aa0:	ldr	r2, [pc, #72]	; (60001aec <configure_external_ram+0x25c>)
60001aa2:	lsls	r3, r3, #31
60001aa4:	bpl.n	60001a9e <configure_external_ram+0x20e>
	uint32_t id = FLEXSPI2_RFDR0;
60001aa6:	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001aaa:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001aae:	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001ab0:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ab2:	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001ab4:	cmp	r3, r1
60001ab6:	beq.n	60001b2c <configure_external_ram+0x29c>
			external_psram_size * 0x100000 -
			((uint32_t)&_extram_end - (uint32_t)&_extram_start),
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001ab8:	ldr	r3, [pc, #104]	; (60001b24 <configure_external_ram+0x294>)
60001aba:	movs	r2, #0
60001abc:	str	r2, [r3, #0]
60001abe:	str	r2, [r3, #4]
60001ac0:	str	r2, [r3, #8]
60001ac2:	str	r2, [r3, #12]
	}
}
60001ac4:	add	sp, #12
60001ac6:	pop	{r4, r5, r6, r7, pc}
60001ac8:	.word	0x401f8000
60001acc:	.word	0x000170f9
60001ad0:	.word	0x0001b0f9
60001ad4:	.word	0x000110f9
60001ad8:	.word	0x000100f9
60001adc:	.word	0x401f8400
60001ae0:	.word	0x400fc000
60001ae4:	.word	0x1ffffcff
60001ae8:	.word	0xa0000300
60001aec:	.word	0x402a4000
60001af0:	.word	0xffff0012
60001af4:	.word	0x00f737ff
60001af8:	.word	0x7cf0ff00
60001afc:	.word	0x80000040
60001b00:	.word	0x830f00ff
60001b04:	.word	0x00020063
60001b08:	.word	0x402a4200
60001b0c:	.word	0x402a4300
60001b10:	.word	0x5af05af0
60001b14:	.word	0x3018049f
60001b18:	.word	0x26013206
60001b1c:	.word	0x0a180638
60001b20:	.word	0x00030004
60001b24:	.word	0x20018c30
60001b28:	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b2c:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b2e:	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b32:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b34:	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b36:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b3a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b3e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b42:	ldr	r3, [r1, #20]
60001b44:	ldr	r2, [pc, #236]	; (60001c34 <configure_external_ram+0x3a4>)
60001b46:	lsls	r7, r3, #31
60001b48:	bpl.n	60001b42 <configure_external_ram+0x2b2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b4a:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b4c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b50:	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b52:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b54:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b56:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b5a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b5e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b62:	ldr	r3, [r1, #20]
60001b64:	ldr	r2, [pc, #204]	; (60001c34 <configure_external_ram+0x3a4>)
60001b66:	lsls	r6, r3, #31
60001b68:	bpl.n	60001b62 <configure_external_ram+0x2d2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b6a:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b6c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b70:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b74:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b76:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b78:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b7c:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b80:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b84:	ldr	r3, [r1, #20]
60001b86:	ldr	r2, [pc, #172]	; (60001c34 <configure_external_ram+0x3a4>)
60001b88:	lsls	r5, r3, #31
60001b8a:	bpl.n	60001b84 <configure_external_ram+0x2f4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b8c:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b8e:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b92:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b96:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b98:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b9a:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b9e:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ba2:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ba6:	ldr	r3, [r1, #20]
60001ba8:	ldr	r2, [pc, #136]	; (60001c34 <configure_external_ram+0x3a4>)
60001baa:	lsls	r4, r3, #31
60001bac:	bpl.n	60001ba6 <configure_external_ram+0x316>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bae:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001bb0:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001bb4:	ldr	r0, [pc, #128]	; (60001c38 <configure_external_ram+0x3a8>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bb6:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bb8:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001bba:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001bbe:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bc2:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bc6:	ldr	r3, [r1, #20]
60001bc8:	ldr	r2, [pc, #104]	; (60001c34 <configure_external_ram+0x3a4>)
60001bca:	lsls	r0, r3, #31
60001bcc:	bpl.n	60001bc6 <configure_external_ram+0x336>
	uint32_t id = FLEXSPI2_RFDR0;
60001bce:	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bd2:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bd6:	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bd8:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bda:	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bdc:	cmp	r3, r1
60001bde:	beq.n	60001c02 <configure_external_ram+0x372>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
60001be0:	ldr	r3, [pc, #88]	; (60001c3c <configure_external_ram+0x3ac>)
60001be2:	movs	r2, #8
60001be4:	mov.w	r4, #8388608	; 0x800000
60001be8:	strb	r2, [r3, #0]
		}
		// TODO: zero uninitialized EXTMEM variables
		// TODO: copy from flash to initialize EXTMEM variables
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bea:	ldr	r1, [pc, #84]	; (60001c40 <configure_external_ram+0x3b0>)
60001bec:	movs	r0, #0
60001bee:	ldr	r2, [pc, #84]	; (60001c44 <configure_external_ram+0x3b4>)
60001bf0:	movs	r3, #1
60001bf2:	str	r0, [sp, #0]
60001bf4:	subs	r2, r2, r1
60001bf6:	ldr	r0, [pc, #80]	; (60001c48 <configure_external_ram+0x3b8>)
60001bf8:	add	r2, r4
60001bfa:	bl	60002550 <__sm_set_pool_veneer>
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
	}
}
60001bfe:	add	sp, #12
60001c00:	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001c02:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c06:	mov.w	r1, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c0a:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c0c:	mov	r0, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001c0e:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c12:	str.w	r1, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c16:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c1a:	ldr	r3, [r0, #20]
60001c1c:	ldr	r1, [pc, #20]	; (60001c34 <configure_external_ram+0x3a4>)
60001c1e:	lsls	r3, r3, #31
60001c20:	bpl.n	60001c1a <configure_external_ram+0x38a>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c22:	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001c24:	ldr	r3, [pc, #20]	; (60001c3c <configure_external_ram+0x3ac>)
60001c26:	movs	r2, #16
60001c28:	mov.w	r4, #16777216	; 0x1000000
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c2c:	str	r0, [r1, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001c2e:	strb	r2, [r3, #0]
60001c30:	b.n	60001bea <configure_external_ram+0x35a>
60001c32:	nop
60001c34:	.word	0x402a4000
60001c38:	.word	0x00030004
60001c3c:	.word	0x20018bcc
60001c40:	.word	0x70000000
60001c44:	.word	0x70000000
60001c48:	.word	0x20018c30

60001c4c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001c4c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c4e:	ldr	r2, [pc, #92]	; (60001cac <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c50:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c52:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c56:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c5a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c5e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c62:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c66:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c68:	tst.w	r3, #2
60001c6c:	beq.n	60001c7c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c6e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c70:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c72:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c74:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c76:	tst.w	r3, #2
60001c7a:	bne.n	60001c6e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c7c:	tst.w	r3, #8192	; 0x2000
60001c80:	bne.n	60001c86 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c82:	str	r5, [r2, #20]
			continue;
60001c84:	b.n	60001c66 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c86:	tst.w	r3, #4096	; 0x1000
60001c8a:	bne.n	60001c90 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c8c:	str	r6, [r2, #20]
			continue;
60001c8e:	b.n	60001c66 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c90:	cmp	r3, #0
60001c92:	bge.n	60001c66 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c94:	tst.w	r3, #65536	; 0x10000
60001c98:	beq.n	60001c9e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c9a:	str	r1, [r2, #24]
			continue;
60001c9c:	b.n	60001c66 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c9e:	lsls	r3, r3, #25
60001ca0:	bmi.n	60001ca6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ca2:	str	r7, [r2, #20]
			continue;
60001ca4:	b.n	60001c66 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001ca6:	pop	{r4, r5, r6, r7}
60001ca8:	bx	lr
60001caa:	nop
60001cac:	.word	0x400d8000

60001cb0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cb0:	ldr	r2, [pc, #228]	; (60001d98 <tempmon_init+0xe8>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cb2:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cb4:	ldr	r1, [pc, #228]	; (60001d9c <tempmon_init+0xec>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cb6:	vmov.f32	s11, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cba:	ldr	r3, [r2, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001cbc:	vldr	s12, [pc, #224]	; 60001da0 <tempmon_init+0xf0>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cc0:	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001cc4:	vldr	s13, [pc, #220]	; 60001da4 <tempmon_init+0xf4>
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001cc8:	push	{r4, r5, r6, r7}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cca:	str	r3, [r2, #0]
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001ccc:	movs	r4, #0
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cce:	str	r0, [r2, #16]
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cd0:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cd4:	ldr	r7, [pc, #208]	; (60001da8 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cd6:	uxtb	r0, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cd8:	ubfx	r1, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cdc:	lsrs	r3, r3, #20
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cde:	ldr	r6, [pc, #204]	; (60001dac <tempmon_init+0xfc>)
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ce0:	vmov	s14, r0
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001ce4:	vmov	s10, r1
60001ce8:	vmov	s15, r3
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cec:	ldr	r3, [pc, #192]	; (60001db0 <tempmon_init+0x100>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cee:	vcvt.f32.s32	s10, s10
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cf2:	ldr	r5, [pc, #192]	; (60001db4 <tempmon_init+0x104>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cf4:	vcvt.f32.s32	s14, s14
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cf8:	str	r0, [r6, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cfa:	vcvt.f32.s32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cfe:	str	r1, [r5, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d00:	ldr	r1, [pc, #180]	; (60001db8 <tempmon_init+0x108>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d02:	vsub.f32	s12, s14, s12
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d06:	ldr	r6, [pc, #180]	; (60001dbc <tempmon_init+0x10c>)
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d08:	vsub.f32	s15, s15, s10
60001d0c:	ldr	r0, [pc, #176]	; (60001dc0 <tempmon_init+0x110>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d0e:	vsub.f32	s13, s14, s13
60001d12:	ldr	r5, [pc, #176]	; (60001dc4 <tempmon_init+0x114>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d14:	vsub.f32	s14, s14, s11
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d18:	vmul.f32	s12, s12, s15
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d1c:	vstr	s15, [r7]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d20:	vmul.f32	s13, s13, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d24:	ldr	r7, [r2, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d26:	vmul.f32	s15, s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d2a:	vstr	s14, [r3]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d2e:	vdiv.f32	s11, s12, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d32:	vdiv.f32	s12, s13, s14
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d36:	vdiv.f32	s13, s15, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d3a:	vadd.f32	s14, s11, s10
60001d3e:	vcvt.u32.f32	s15, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d42:	vadd.f32	s14, s12, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d46:	vmov	r3, s15
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d4a:	vcvt.u32.f32	s14, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d4e:	orr.w	r3, r7, r3, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d52:	vadd.f32	s15, s13, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d56:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d58:	vmov	r3, s14
60001d5c:	ldr.w	r7, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d60:	vcvt.u32.f32	s15, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d64:	and.w	r1, r1, r3, lsl #16
60001d68:	orrs	r1, r7
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d6a:	vmov	r3, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d6e:	str.w	r1, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d72:	ubfx	r3, r3, #0, #12
60001d76:	ldr.w	r1, [r2, #272]	; 0x110
60001d7a:	orrs	r3, r1
60001d7c:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d80:	ldr	r3, [r2, #0]
60001d82:	orr.w	r3, r3, #2
60001d86:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d88:	strb	r4, [r6, #0]
60001d8a:	str.w	r5, [r0, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d8e:	ldr	r3, [pc, #56]	; (60001dc8 <tempmon_init+0x118>)
60001d90:	movs	r2, #1
}
60001d92:	pop	{r4, r5, r6, r7}
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d94:	str	r2, [r3, #0]
}
60001d96:	bx	lr
60001d98:	.word	0x400d8180
60001d9c:	.word	0x401f4400
60001da0:	.word	0x42aa0000
60001da4:	.word	0x42b40000
60001da8:	.word	0x200186c4
60001dac:	.word	0x200186bc
60001db0:	.word	0x200186c0
60001db4:	.word	0x200186b8
60001db8:	.word	0x0fff0000
60001dbc:	.word	0xe000e440
60001dc0:	.word	0x20002800
60001dc4:	.word	0x0000b1e9
60001dc8:	.word	0xe000e108

60001dcc <cleardata(arm_fault_info_struct*) [clone .constprop.1]>:
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001dcc:	ldr	r2, [pc, #48]	; (60001e00 <cleardata(arm_fault_info_struct*) [clone .constprop.1]+0x34>)
60001dce:	movs	r3, #0
60001dd0:	str	r3, [r2, #0]
	info->ipsr  = 0;
60001dd2:	str	r3, [r2, #4]
	info->cfsr  = 0;
60001dd4:	str	r3, [r2, #8]
	info->hfsr  = 0;
60001dd6:	str	r3, [r2, #12]
	info->mmfar = 0;
60001dd8:	str	r3, [r2, #16]
	info->bfar  = 0;
60001dda:	str	r3, [r2, #20]
	info->ret = 0;
60001ddc:	str	r3, [r2, #24]
	info->xpsr  = 0;
60001dde:	str	r3, [r2, #28]
	info->crc = 0;
60001de0:	str	r3, [r2, #40]	; 0x28
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001de2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001de6:	ldr	r1, [pc, #28]	; (60001e04 <cleardata(arm_fault_info_struct*) [clone .constprop.1]+0x38>)
60001de8:	ldr	r0, [pc, #28]	; (60001e08 <cleardata(arm_fault_info_struct*) [clone .constprop.1]+0x3c>)
60001dea:	str	r2, [r1, #0]
60001dec:	str	r0, [r1, #0]
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001dee:	dsb	sy
	asm("isb");
60001df2:	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001df6:	ldr	r2, [pc, #20]	; (60001e0c <cleardata(arm_fault_info_struct*) [clone .constprop.1]+0x40>)
60001df8:	ldr	r1, [r2, #8]
60001dfa:	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001dfc:	str	r3, [r2, #48]	; 0x30
60001dfe:	bx	lr
60001e00:	.word	0x2027ff80
60001e04:	.word	0xe000ef70
60001e08:	.word	0x2027ffa0
60001e0c:	.word	0x400f8000

60001e10 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]>:
	if (isvalid(info)) return true;
	return false;
}

FLASHMEM
static int isvalid(const struct arm_fault_info_struct *info)
60001e10:	push	{r4, r5}
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001e12:	mov.w	r2, #4294967295
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
	data = (uint32_t *)info;
60001e16:	ldr	r4, [pc, #48]	; (60001e48 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0x38>)
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e18:	ldr	r0, [pc, #48]	; (60001e4c <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0x3c>)

	if (info->len != sizeof(*info) / 4) return 0;
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
	while (data < end) {
60001e1a:	ldr	r5, [pc, #52]	; (60001e50 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0x40>)
		crc ^= *data++;
60001e1c:	ldr.w	r3, [r4], #4
60001e20:	movs	r1, #32
60001e22:	eors	r2, r3
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e24:	and.w	r3, r2, #1
60001e28:	subs	r1, #1
60001e2a:	mul.w	r3, r0, r3
60001e2e:	eor.w	r2, r3, r2, lsr #1
60001e32:	bne.n	60001e24 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0x14>

	if (info->len != sizeof(*info) / 4) return 0;
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
	while (data < end) {
60001e34:	cmp	r4, r5
60001e36:	bne.n	60001e1c <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0xc>
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
	}
	if (crc != info->crc) return 0;
60001e38:	ldr	r3, [pc, #12]	; (60001e48 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0x38>)
60001e3a:	ldr	r0, [r3, #40]	; 0x28
	return 1;
}
60001e3c:	subs	r0, r0, r2
60001e3e:	clz	r0, r0
60001e42:	pop	{r4, r5}
60001e44:	lsrs	r0, r0, #5
60001e46:	bx	lr
60001e48:	.word	0x2027ff80
60001e4c:	.word	0xedb88320
60001e50:	.word	0x2027ffa8

60001e54 <CrashReportClass::printTo(Print&) const>:
static int isvalid(const struct arm_fault_info_struct *info);
static void cleardata(struct arm_fault_info_struct *info);

FLASHMEM
size_t CrashReportClass::printTo(Print& p) const
{
60001e54:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001e58:	ldr	r6, [pc, #536]	; (60002074 <CrashReportClass::printTo(Print&) const+0x220>)
static int isvalid(const struct arm_fault_info_struct *info);
static void cleardata(struct arm_fault_info_struct *info);

FLASHMEM
size_t CrashReportClass::printTo(Print& p) const
{
60001e5a:	mov	r4, r1
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001e5c:	ldr	r3, [r6, #0]
60001e5e:	cmp	r3, #11
60001e60:	beq.w	600020e4 <CrashReportClass::printTo(Print&) const+0x290>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001e64:	ldr	r3, [r4, #0]
60001e66:	movs	r2, #23
60001e68:	ldr	r1, [pc, #524]	; (60002078 <CrashReportClass::printTo(Print&) const+0x224>)
60001e6a:	mov	r0, r4
60001e6c:	ldr	r3, [r3, #4]
60001e6e:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001e70:	mov	r0, r4
60001e72:	bl	60002540 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001e76:	ldr	r3, [r4, #0]
60001e78:	movs	r2, #72	; 0x48
60001e7a:	ldr	r1, [pc, #512]	; (6000207c <CrashReportClass::printTo(Print&) const+0x228>)
60001e7c:	ldr	r3, [r3, #4]
60001e7e:	mov	r0, r4
60001e80:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001e82:	mov	r0, r4
60001e84:	bl	60002540 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001e88:	ldr	r3, [r4, #0]
60001e8a:	movs	r2, #73	; 0x49
60001e8c:	ldr	r1, [pc, #496]	; (60002080 <CrashReportClass::printTo(Print&) const+0x22c>)
60001e8e:	ldr	r3, [r3, #4]
60001e90:	mov	r0, r4
60001e92:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001e94:	mov	r0, r4
60001e96:	bl	60002540 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001e9a:	ldr	r3, [r4, #0]
60001e9c:	movs	r2, #36	; 0x24
60001e9e:	ldr	r1, [pc, #484]	; (60002084 <CrashReportClass::printTo(Print&) const+0x230>)
60001ea0:	ldr	r3, [r3, #4]
60001ea2:	mov	r0, r4
60001ea4:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001ea6:	mov	r0, r4
60001ea8:	bl	60002540 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001eac:	ldr	r3, [r4, #0]
60001eae:	movs	r2, #71	; 0x47
60001eb0:	ldr	r1, [pc, #468]	; (60002088 <CrashReportClass::printTo(Print&) const+0x234>)
60001eb2:	ldr	r3, [r3, #4]
60001eb4:	mov	r0, r4
60001eb6:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001eb8:	mov	r0, r4
60001eba:	bl	60002540 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001ebe:	ldr	r3, [r4, #0]
60001ec0:	movs	r2, #63	; 0x3f
60001ec2:	ldr	r1, [pc, #456]	; (6000208c <CrashReportClass::printTo(Print&) const+0x238>)
60001ec4:	ldr	r3, [r3, #4]
60001ec6:	mov	r0, r4
60001ec8:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001eca:	mov	r0, r4
60001ecc:	bl	60002540 <___ZN5Print7printlnEv_veneer>
    p.println("\tstuck in an infinite loop (technically, hardware still running properly)");
    p.println("\tremaining in a low power sleep mode");
    p.println("\taccess to certain peripherals without their clock enabled (eg, FlexIO)");
    p.println("\tchange of CPU or bus clock speed without use of glitchless mux");
  }
  uint32_t SRSR = SRC_SRSR;
60001ed0:	ldr	r3, [pc, #444]	; (60002090 <CrashReportClass::printTo(Print&) const+0x23c>)
60001ed2:	ldr	r5, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
60001ed4:	lsls	r2, r5, #30
60001ed6:	bpl.n	60001ef4 <CrashReportClass::printTo(Print&) const+0xa0>
    // use SRC_GPR5 to distinguish cases.  See pages 1290 & 1294 in ref manual
    uint32_t gpr5 = SRC_GPR5;
60001ed8:	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
60001eda:	ldr	r3, [pc, #440]	; (60002094 <CrashReportClass::printTo(Print&) const+0x240>)
60001edc:	cmp	r2, r3
60001ede:	beq.w	60002208 <CrashReportClass::printTo(Print&) const+0x3b4>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001ee2:	ldr	r3, [r4, #0]
60001ee4:	movs	r2, #64	; 0x40
60001ee6:	ldr	r1, [pc, #432]	; (60002098 <CrashReportClass::printTo(Print&) const+0x244>)
60001ee8:	mov	r0, r4
60001eea:	ldr	r3, [r3, #4]
60001eec:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001eee:	mov	r0, r4
60001ef0:	bl	60002540 <___ZN5Print7printlnEv_veneer>
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
    } else {
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
    }
  }
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
60001ef4:	lsls	r3, r5, #29
60001ef6:	bpl.n	60001f0a <CrashReportClass::printTo(Print&) const+0xb6>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001ef8:	ldr	r3, [r4, #0]
60001efa:	movs	r2, #39	; 0x27
60001efc:	ldr	r1, [pc, #412]	; (6000209c <CrashReportClass::printTo(Print&) const+0x248>)
60001efe:	mov	r0, r4
60001f00:	ldr	r3, [r3, #4]
60001f02:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f04:	mov	r0, r4
60001f06:	bl	60002540 <___ZN5Print7printlnEv_veneer>
    p.println("  Reboot was caused by security monitor");
  }
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60001f0a:	lsls	r7, r5, #28
60001f0c:	bpl.n	60001f20 <CrashReportClass::printTo(Print&) const+0xcc>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f0e:	ldr	r3, [r4, #0]
60001f10:	movs	r2, #42	; 0x2a
60001f12:	ldr	r1, [pc, #396]	; (600020a0 <CrashReportClass::printTo(Print&) const+0x24c>)
60001f14:	mov	r0, r4
60001f16:	ldr	r3, [r3, #4]
60001f18:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f1a:	mov	r0, r4
60001f1c:	bl	60002540 <___ZN5Print7printlnEv_veneer>
    // because the bootloader chip monitors 3.3V power
    // and manages DCDC_PSWITCH and RESET, causing the
    // power on event to appear as a normal reset.
    p.println("  Reboot was caused by power on/off button");
  }
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60001f20:	lsls	r6, r5, #27
60001f22:	bpl.n	60001f36 <CrashReportClass::printTo(Print&) const+0xe2>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f24:	ldr	r3, [r4, #0]
60001f26:	movs	r2, #38	; 0x26
60001f28:	ldr	r1, [pc, #376]	; (600020a4 <CrashReportClass::printTo(Print&) const+0x250>)
60001f2a:	mov	r0, r4
60001f2c:	ldr	r3, [r3, #4]
60001f2e:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f30:	mov	r0, r4
60001f32:	bl	60002540 <___ZN5Print7printlnEv_veneer>
    p.println("  Reboot was caused by watchdog 1 or 2");
  }
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001f36:	lsls	r0, r5, #26
60001f38:	bpl.n	60001f4c <CrashReportClass::printTo(Print&) const+0xf8>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f3a:	ldr	r3, [r4, #0]
60001f3c:	movs	r2, #41	; 0x29
60001f3e:	ldr	r1, [pc, #360]	; (600020a8 <CrashReportClass::printTo(Print&) const+0x254>)
60001f40:	mov	r0, r4
60001f42:	ldr	r3, [r3, #4]
60001f44:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f46:	mov	r0, r4
60001f48:	bl	60002540 <___ZN5Print7printlnEv_veneer>
    p.println("  Reboot was caused by JTAG boundary scan");
  }
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001f4c:	lsls	r1, r5, #25
60001f4e:	bpl.n	60001f62 <CrashReportClass::printTo(Print&) const+0x10e>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f50:	ldr	r3, [r4, #0]
60001f52:	movs	r2, #33	; 0x21
60001f54:	ldr	r1, [pc, #340]	; (600020ac <CrashReportClass::printTo(Print&) const+0x258>)
60001f56:	mov	r0, r4
60001f58:	ldr	r3, [r3, #4]
60001f5a:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f5c:	mov	r0, r4
60001f5e:	bl	60002540 <___ZN5Print7printlnEv_veneer>
    p.println("  Reboot was caused by JTAG debug");
  }
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60001f62:	lsls	r2, r5, #24
60001f64:	bpl.n	60001f78 <CrashReportClass::printTo(Print&) const+0x124>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f66:	ldr	r3, [r4, #0]
60001f68:	movs	r2, #33	; 0x21
60001f6a:	ldr	r1, [pc, #324]	; (600020b0 <CrashReportClass::printTo(Print&) const+0x25c>)
60001f6c:	mov	r0, r4
60001f6e:	ldr	r3, [r3, #4]
60001f70:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f72:	mov	r0, r4
60001f74:	bl	60002540 <___ZN5Print7printlnEv_veneer>
    p.println("  Reboot was caused by watchdog 3");
  }
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001f78:	lsls	r3, r5, #23
60001f7a:	bmi.n	6000201a <CrashReportClass::printTo(Print&) const+0x1c6>
	  IOMUXC_GPR_GPR16 = 0x00000007;
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
	  asm volatile ("dsb":::"memory");
	  while (1) asm ("wfi");
  }
  if (bc->bitmask) {
60001f7c:	ldr	r2, [pc, #308]	; (600020b4 <CrashReportClass::printTo(Print&) const+0x260>)
60001f7e:	ldr	r3, [r2, #0]
60001f80:	cmp	r3, #0
60001f82:	beq.n	60002010 <CrashReportClass::printTo(Print&) const+0x1bc>
60001f84:	mov	r7, r2
60001f86:	ldr	r6, [pc, #304]	; (600020b8 <CrashReportClass::printTo(Print&) const+0x264>)
60001f88:	movs	r5, #1
60001f8a:	b.n	60001f8e <CrashReportClass::printTo(Print&) const+0x13a>
60001f8c:	ldr	r3, [r7, #0]
    for (int i=0; i < 6; i++) {
      if (bc->bitmask & (1 << i)) {
60001f8e:	subs	r2, r5, #1
60001f90:	mov.w	r8, #1
60001f94:	lsl.w	r2, r8, r2
60001f98:	tst	r2, r3
60001f9a:	beq.n	60001ff2 <CrashReportClass::printTo(Print&) const+0x19e>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f9c:	ldr	r3, [r4, #0]
60001f9e:	movs	r2, #14
60001fa0:	ldr	r1, [pc, #280]	; (600020bc <CrashReportClass::printTo(Print&) const+0x268>)
60001fa2:	mov	r0, r4
60001fa4:	ldr	r3, [r3, #4]
60001fa6:	blx	r3
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	// Print a signed number
	size_t print(int n)				{ return print((long)n); }
60001fa8:	mov	r1, r5
60001faa:	mov	r0, r4
60001fac:	bl	60002568 <___ZN5Print5printEl_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001fb0:	ldr	r3, [r4, #0]
60001fb2:	movs	r2, #5
60001fb4:	ldr	r1, [pc, #264]	; (600020c0 <CrashReportClass::printTo(Print&) const+0x26c>)
60001fb6:	ldr	r3, [r3, #4]
60001fb8:	mov	r0, r4
60001fba:	blx	r3
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001fbc:	movs	r3, #0
60001fbe:	movs	r2, #10
60001fc0:	ldr	r1, [r6, #0]
60001fc2:	mov	r0, r4
60001fc4:	bl	60002520 <___ZN5Print11printNumberEmhh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001fc8:	ldr	r3, [r4, #0]
60001fca:	movs	r2, #4
60001fcc:	ldr	r1, [pc, #244]	; (600020c4 <CrashReportClass::printTo(Print&) const+0x270>)
60001fce:	ldr	r3, [r3, #4]
60001fd0:	mov	r0, r4
60001fd2:	blx	r3
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001fd4:	movs	r3, #0
60001fd6:	movs	r2, #16
60001fd8:	ldr	r1, [r6, #0]
60001fda:	mov	r0, r4
60001fdc:	bl	60002520 <___ZN5Print11printNumberEmhh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001fe0:	ldr	r3, [r4, #0]
60001fe2:	mov	r2, r8
60001fe4:	ldr	r1, [pc, #224]	; (600020c8 <CrashReportClass::printTo(Print&) const+0x274>)
60001fe6:	ldr	r3, [r3, #4]
60001fe8:	mov	r0, r4
60001fea:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001fec:	mov	r0, r4
60001fee:	bl	60002540 <___ZN5Print7printlnEv_veneer>
60001ff2:	adds	r5, #1
60001ff4:	adds	r6, #4
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
	  asm volatile ("dsb":::"memory");
	  while (1) asm ("wfi");
  }
  if (bc->bitmask) {
    for (int i=0; i < 6; i++) {
60001ff6:	cmp	r5, #7
60001ff8:	bne.n	60001f8c <CrashReportClass::printTo(Print&) const+0x138>
        p.print(" (0x");
        p.print(bc->value[i], HEX);
        p.println(")");
      }
    }
    *(volatile uint32_t *)(&bc->bitmask) = 0;
60001ffa:	ldr	r3, [pc, #184]	; (600020b4 <CrashReportClass::printTo(Print&) const+0x260>)
60001ffc:	movs	r2, #0
60001ffe:	str	r2, [r3, #0]
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60002000:	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
60002004:	ldr	r2, [pc, #196]	; (600020cc <CrashReportClass::printTo(Print&) const+0x278>)
60002006:	str	r3, [r2, #0]
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60002008:	dsb	sy
	asm("isb");
6000200c:	isb	sy
    arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
  }
  cleardata(info);
60002010:	bl	60001dcc <cleardata(arm_fault_info_struct*) [clone .constprop.1]>
  return 1;
}
60002014:	movs	r0, #1
60002016:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
6000201a:	ldr	r3, [r4, #0]
6000201c:	movs	r2, #41	; 0x29
6000201e:	ldr	r1, [pc, #176]	; (600020d0 <CrashReportClass::printTo(Print&) const+0x27c>)
60002020:	mov	r0, r4
60002022:	ldr	r3, [r3, #4]
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
    p.println("  Reboot was caused by watchdog 3");
  }
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
    p.println("  Reboot was caused by temperature sensor");
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60002024:	ldr	r5, [pc, #104]	; (60002090 <CrashReportClass::printTo(Print&) const+0x23c>)
60002026:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60002028:	mov	r0, r4
6000202a:	bl	60002540 <___ZN5Print7printlnEv_veneer>
6000202e:	ldr	r3, [r5, #8]
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60002030:	ldr	r1, [r4, #0]
60002032:	movs	r2, #33	; 0x21
60002034:	bic.w	r3, r3, #256	; 0x100
60002038:	mov	r0, r4
6000203a:	ldr	r6, [r1, #4]
6000203c:	str	r3, [r5, #8]
6000203e:	ldr	r1, [pc, #148]	; (600020d4 <CrashReportClass::printTo(Print&) const+0x280>)
60002040:	blx	r6
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60002042:	mov	r0, r4
60002044:	bl	60002540 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60002048:	ldr	r3, [r4, #0]
6000204a:	movs	r2, #66	; 0x42
6000204c:	ldr	r1, [pc, #136]	; (600020d8 <CrashReportClass::printTo(Print&) const+0x284>)
6000204e:	ldr	r3, [r3, #4]
60002050:	mov	r0, r4
60002052:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60002054:	mov	r0, r4
60002056:	bl	60002540 <___ZN5Print7printlnEv_veneer>
	  p.println("Panic Temp Exceeded Shutting Down");
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
	  IOMUXC_GPR_GPR16 = 0x00000007;
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
6000205a:	ldr	r2, [pc, #128]	; (600020dc <CrashReportClass::printTo(Print&) const+0x288>)
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
    p.println("  Reboot was caused by temperature sensor");
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
	  p.println("Panic Temp Exceeded Shutting Down");
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
	  IOMUXC_GPR_GPR16 = 0x00000007;
6000205c:	ldr	r3, [pc, #128]	; (600020e0 <CrashReportClass::printTo(Print&) const+0x28c>)
6000205e:	movs	r1, #7
60002060:	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60002062:	ldr	r3, [r2, #56]	; 0x38
60002064:	orr.w	r3, r3, #64	; 0x40
60002068:	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
6000206a:	dsb	sy
	  while (1) asm ("wfi");
6000206e:	wfi
60002070:	b.n	6000206e <CrashReportClass::printTo(Print&) const+0x21a>
60002072:	nop
60002074:	.word	0x2027ff80
60002078:	.word	0x2000164c
6000207c:	.word	0x20001664
60002080:	.word	0x200016b0
60002084:	.word	0x200016fc
60002088:	.word	0x20001724
6000208c:	.word	0x2000176c
60002090:	.word	0x400f8000
60002094:	.word	0x0bad00f1
60002098:	.word	0x200017f8
6000209c:	.word	0x2000183c
600020a0:	.word	0x20001864
600020a4:	.word	0x20001890
600020a8:	.word	0x200018b8
600020ac:	.word	0x200018e4
600020b0:	.word	0x20001908
600020b4:	.word	0x2027ffc0
600020b8:	.word	0x2027ffc4
600020bc:	.word	0x200019c0
600020c0:	.word	0x200019d0
600020c4:	.word	0x200019d8
600020c8:	.word	0x200016f8
600020cc:	.word	0xe000ef68
600020d0:	.word	0x2000192c
600020d4:	.word	0x20001958
600020d8:	.word	0x2000197c
600020dc:	.word	0x400d4000
600020e0:	.word	0x400ac000
600020e4:	bl	60001e10 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]>
size_t CrashReportClass::printTo(Print& p) const
{
  struct arm_fault_info_struct *info = (struct arm_fault_info_struct *)0x2027FF80;
  struct crashreport_breadcrumbs_struct *bc = (struct crashreport_breadcrumbs_struct *)0x2027FFC0;

  if (isvalid(info)) {
600020e8:	cmp	r0, #0
600020ea:	beq.w	60001e64 <CrashReportClass::printTo(Print&) const+0x10>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
600020ee:	ldr	r3, [r4, #0]
600020f0:	movs	r2, #12
600020f2:	ldr	r1, [pc, #712]	; (600023bc <CrashReportClass::printTo(Print&) const+0x568>)
600020f4:	mov	r0, r4
600020f6:	ldr	r3, [r3, #4]
600020f8:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
600020fa:	mov	r0, r4
600020fc:	bl	60002540 <___ZN5Print7printlnEv_veneer>
    p.println("CrashReport:");
    uint8_t ss = info->time % 60;
    info->time /= 60;
    uint8_t mm = info->time % 60;
    info->time /= 60;
60002100:	ldr	r5, [pc, #700]	; (600023c0 <CrashReportClass::printTo(Print&) const+0x56c>)
  struct arm_fault_info_struct *info = (struct arm_fault_info_struct *)0x2027FF80;
  struct crashreport_breadcrumbs_struct *bc = (struct crashreport_breadcrumbs_struct *)0x2027FFC0;

  if (isvalid(info)) {
    p.println("CrashReport:");
    uint8_t ss = info->time % 60;
60002102:	ldr	r7, [r6, #36]	; 0x24
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60002104:	movs	r2, #38	; 0x26
60002106:	ldr	r3, [r4, #0]
60002108:	mov	r0, r4
    info->time /= 60;
    uint8_t mm = info->time % 60;
    info->time /= 60;
6000210a:	umull	r1, r5, r5, r7
6000210e:	ldr	r1, [pc, #692]	; (600023c4 <CrashReportClass::printTo(Print&) const+0x570>)
60002110:	ldr	r3, [r3, #4]
60002112:	lsrs	r5, r5, #11
60002114:	str	r5, [r6, #36]	; 0x24
60002116:	blx	r3
	// Print a string
	size_t print(const char s[])			{ return write(s); }
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60002118:	ldr	r1, [pc, #684]	; (600023c8 <CrashReportClass::printTo(Print&) const+0x574>)
6000211a:	movs	r3, #0
6000211c:	movs	r2, #10
6000211e:	umull	r0, r1, r1, r5
60002122:	mov	r0, r4
60002124:	lsrs	r1, r1, #4
60002126:	add.w	r1, r1, r1, lsl #1
6000212a:	sub.w	r1, r5, r1, lsl #3
6000212e:	bl	60002520 <___ZN5Print11printNumberEmhh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60002132:	ldr	r3, [r4, #0]
60002134:	movs	r2, #1
60002136:	ldr	r1, [pc, #660]	; (600023cc <CrashReportClass::printTo(Print&) const+0x578>)
60002138:	ldr	r3, [r3, #4]
6000213a:	mov	r0, r4
6000213c:	blx	r3
	// Print a string
	size_t print(const char s[])			{ return write(s); }
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
6000213e:	ldr	r1, [pc, #656]	; (600023d0 <CrashReportClass::printTo(Print&) const+0x57c>)
60002140:	movs	r3, #0
60002142:	movs	r2, #10
60002144:	umull	r0, r5, r1, r7
60002148:	mov	r0, r4
6000214a:	lsrs	r5, r5, #5
6000214c:	umull	lr, r1, r1, r5
60002150:	lsrs	r1, r1, #5
60002152:	rsb	r1, r1, r1, lsl #4
60002156:	sub.w	r1, r5, r1, lsl #2
6000215a:	bl	60002520 <___ZN5Print11printNumberEmhh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
6000215e:	ldr	r3, [r4, #0]
60002160:	movs	r2, #1
60002162:	ldr	r1, [pc, #616]	; (600023cc <CrashReportClass::printTo(Print&) const+0x578>)
60002164:	ldr	r3, [r3, #4]
60002166:	mov	r0, r4
60002168:	blx	r3
	// Print a string
	size_t print(const char s[])			{ return write(s); }
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
6000216a:	movs	r3, #0
6000216c:	rsb	r1, r5, r5, lsl #4
60002170:	movs	r2, #10
60002172:	mov	r0, r4
60002174:	sub.w	r1, r7, r1, lsl #2
60002178:	bl	60002520 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
6000217c:	mov	r0, r4
6000217e:	bl	60002540 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60002182:	ldr	r3, [r4, #0]
60002184:	movs	r2, #36	; 0x24
60002186:	ldr	r1, [pc, #588]	; (600023d4 <CrashReportClass::printTo(Print&) const+0x580>)
60002188:	ldr	r3, [r3, #4]
6000218a:	mov	r0, r4
6000218c:	blx	r3
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
6000218e:	movs	r3, #0
60002190:	movs	r2, #16
60002192:	ldr	r1, [r6, #24]
60002194:	mov	r0, r4
60002196:	bl	60002520 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
6000219a:	mov	r0, r4
6000219c:	bl	60002540 <___ZN5Print7printlnEv_veneer>
    //p.print("  length: ");
    //p.println(info->len);
    //p.print("  IPSR: ");
    //p.println(info->ipsr, HEX);

    uint32_t _CFSR = info->cfsr;
600021a0:	ldr	r5, [r6, #8]
    if (_CFSR > 0) {
600021a2:	cmp	r5, #0
600021a4:	bne.n	60002238 <CrashReportClass::printTo(Print&) const+0x3e4>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
        p.println("\t(DIVBYZERO) Divide by zero");
      }
    }

    uint32_t _HFSR = info->hfsr;
600021a6:	ldr	r6, [pc, #560]	; (600023d8 <CrashReportClass::printTo(Print&) const+0x584>)
600021a8:	ldr	r5, [r6, #12]
    if (_HFSR > 0) {
600021aa:	cmp	r5, #0
600021ac:	bne.n	60002212 <CrashReportClass::printTo(Print&) const+0x3be>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
600021ae:	ldr	r3, [r4, #0]
600021b0:	movs	r2, #34	; 0x22
600021b2:	ldr	r1, [pc, #552]	; (600023dc <CrashReportClass::printTo(Print&) const+0x588>)
600021b4:	mov	r0, r4
600021b6:	ldr	r3, [r3, #4]
600021b8:	blx	r3
       p.println("\t(DEBUGEVT) Reserved for Debug");
      }
    }

    p.print("  Temperature inside the chip was ");
    p.print(info->temp);
600021ba:	ldr	r3, [pc, #540]	; (600023d8 <CrashReportClass::printTo(Print&) const+0x584>)
	size_t print(int64_t n, int base)		{ return (base == 10) ? print(n) : printNumber64(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	// Print a floating point (decimal) number
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
600021bc:	movs	r1, #2
600021be:	mov	r0, r4
600021c0:	vldr	s0, [r3, #32]
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600021c4:	ldr	r5, [pc, #536]	; (600023e0 <CrashReportClass::printTo(Print&) const+0x58c>)
	size_t print(int64_t n, int base)		{ return (base == 10) ? print(n) : printNumber64(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	// Print a floating point (decimal) number
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
600021c6:	vcvt.f64.f32	d0, s0
600021ca:	bl	60002510 <___ZN5Print10printFloatEdh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
600021ce:	ldr	r3, [r4, #0]
600021d0:	movs	r2, #5
600021d2:	ldr	r1, [pc, #528]	; (600023e4 <CrashReportClass::printTo(Print&) const+0x590>)
600021d4:	ldr	r3, [r3, #4]
600021d6:	mov	r0, r4
600021d8:	blx	r3
600021da:	ldr	r3, [r4, #0]
600021dc:	movs	r2, #29
600021de:	ldr	r1, [pc, #520]	; (600023e8 <CrashReportClass::printTo(Print&) const+0x594>)
600021e0:	ldr	r3, [r3, #4]
600021e2:	mov	r0, r4
600021e4:	blx	r3
    p.print(" ┬░C\n");

    // TODO: fault handler should read the CCM & PLL registers to log actual speed at crash
    p.print("  Startup CPU clock speed is ");
    p.print( F_CPU_ACTUAL/1000000);
600021e6:	ldr	r2, [pc, #516]	; (600023ec <CrashReportClass::printTo(Print&) const+0x598>)
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600021e8:	movs	r3, #0
600021ea:	mov	r0, r4
600021ec:	ldr	r1, [r2, #0]
600021ee:	movs	r2, #10
600021f0:	umull	r5, r1, r5, r1
600021f4:	lsrs	r1, r1, #18
600021f6:	bl	60002520 <___ZN5Print11printNumberEmhh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
600021fa:	ldr	r3, [r4, #0]
600021fc:	movs	r2, #4
600021fe:	ldr	r1, [pc, #496]	; (600023f0 <CrashReportClass::printTo(Print&) const+0x59c>)
60002200:	ldr	r3, [r3, #4]
60002202:	mov	r0, r4
60002204:	blx	r3
60002206:	b.n	60001ed0 <CrashReportClass::printTo(Print&) const+0x7c>
  uint32_t SRSR = SRC_SRSR;
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
    // use SRC_GPR5 to distinguish cases.  See pages 1290 & 1294 in ref manual
    uint32_t gpr5 = SRC_GPR5;
    if (gpr5 == 0x0BAD00F1) {
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
60002208:	ldr	r1, [pc, #488]	; (600023f4 <CrashReportClass::printTo(Print&) const+0x5a0>)
6000220a:	mov	r0, r4
6000220c:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
60002210:	b.n	60001ef4 <CrashReportClass::printTo(Print&) const+0xa0>
	// Print a string
	size_t print(const String &s);
	// Print a single character
	size_t print(char c)				{ return write((uint8_t)c); }
	// Print a string
	size_t print(const char s[])			{ return write(s); }
60002212:	ldr	r1, [pc, #484]	; (600023f8 <CrashReportClass::printTo(Print&) const+0x5a4>)
60002214:	mov	r0, r4
60002216:	bl	60002518 <___ZN5Print5writeEPKc_veneer>
    }

    uint32_t _HFSR = info->hfsr;
    if (_HFSR > 0) {
      p.print("  HTSR: ");
      p.println(info->hfsr, HEX);
6000221a:	ldr	r1, [r6, #12]
6000221c:	movs	r2, #16
6000221e:	mov	r0, r4
60002220:	bl	60002548 <___ZN5Print7printlnEmi_veneer>
      //Memory Management Faults
      if (((_HFSR & (0x02)) >> 1) == 1) {
60002224:	lsls	r0, r5, #30
60002226:	bmi.w	6000246a <CrashReportClass::printTo(Print&) const+0x616>
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
6000222a:	lsls	r1, r5, #1
6000222c:	bpl.n	600021ae <CrashReportClass::printTo(Print&) const+0x35a>
       p.println("\t(FORCED) Forced Hard Fault");
6000222e:	ldr	r1, [pc, #460]	; (600023fc <CrashReportClass::printTo(Print&) const+0x5a8>)
60002230:	mov	r0, r4
60002232:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
60002236:	b.n	600021ae <CrashReportClass::printTo(Print&) const+0x35a>
60002238:	ldr	r1, [pc, #452]	; (60002400 <CrashReportClass::printTo(Print&) const+0x5ac>)
6000223a:	mov	r0, r4
6000223c:	bl	60002518 <___ZN5Print5writeEPKc_veneer>
    //p.println(info->ipsr, HEX);

    uint32_t _CFSR = info->cfsr;
    if (_CFSR > 0) {
      p.print("  CFSR: ");
      p.println(info->cfsr, HEX);
60002240:	ldr	r1, [r6, #8]
60002242:	movs	r2, #16
60002244:	mov	r0, r4
60002246:	bl	60002548 <___ZN5Print7printlnEmi_veneer>
      //Memory Management Faults
      if ((_CFSR & 1) == 1) {
6000224a:	lsls	r0, r5, #31
6000224c:	bmi.w	60002460 <CrashReportClass::printTo(Print&) const+0x60c>
        p.println("\t(IACCVIOL) Instruction Access Violation");
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60002250:	lsls	r1, r5, #30
60002252:	bmi.w	600023b0 <CrashReportClass::printTo(Print&) const+0x55c>
        p.println("\t(DACCVIOL) Data Access Violation");
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60002256:	lsls	r2, r5, #28
60002258:	bmi.w	600023a6 <CrashReportClass::printTo(Print&) const+0x552>
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
6000225c:	lsls	r3, r5, #27
6000225e:	bmi.w	6000239c <CrashReportClass::printTo(Print&) const+0x548>
        p.println("\t(MSTKERR) MemMange Fault on stacking");
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60002262:	lsls	r7, r5, #26
60002264:	bpl.n	6000226e <CrashReportClass::printTo(Print&) const+0x41a>
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60002266:	ldr	r1, [pc, #412]	; (60002404 <CrashReportClass::printTo(Print&) const+0x5b0>)
60002268:	mov	r0, r4
6000226a:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
      }
      if (((_CFSR & (0x80)) >> 7) == 1) {
6000226e:	lsls	r6, r5, #24
60002270:	bmi.n	60002332 <CrashReportClass::printTo(Print&) const+0x4de>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
        }
        p.println();
      }
      //Bus Fault Status Register BFSR
      if (((_CFSR & 0x100) >> 8) == 1) {
60002272:	lsls	r0, r5, #23
60002274:	bmi.n	60002328 <CrashReportClass::printTo(Print&) const+0x4d4>
        p.println("\t(IBUSERR) Instruction Bus Error");
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60002276:	lsls	r1, r5, #22
60002278:	bmi.n	6000231e <CrashReportClass::printTo(Print&) const+0x4ca>
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
6000227a:	lsls	r2, r5, #21
6000227c:	bmi.n	60002314 <CrashReportClass::printTo(Print&) const+0x4c0>
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
6000227e:	lsls	r3, r5, #20
60002280:	bmi.n	6000230a <CrashReportClass::printTo(Print&) const+0x4b6>
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60002282:	lsls	r7, r5, #19
60002284:	bmi.n	600022ce <CrashReportClass::printTo(Print&) const+0x47a>
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60002286:	lsls	r6, r5, #18
60002288:	bpl.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
6000228a:	ldr	r1, [pc, #380]	; (60002408 <CrashReportClass::printTo(Print&) const+0x5b4>)
6000228c:	mov	r0, r4
6000228e:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
      }
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60002292:	lsls	r0, r5, #16
60002294:	bpl.n	600022aa <CrashReportClass::printTo(Print&) const+0x456>
60002296:	ldr	r1, [pc, #372]	; (6000240c <CrashReportClass::printTo(Print&) const+0x5b8>)
60002298:	mov	r0, r4
6000229a:	bl	60002518 <___ZN5Print5writeEPKc_veneer>
        p.print("\t(BFARVALID) Accessed Address: 0x");
        p.println(info->bfar, HEX);
6000229e:	ldr	r3, [pc, #312]	; (600023d8 <CrashReportClass::printTo(Print&) const+0x584>)
600022a0:	movs	r2, #16
600022a2:	mov	r0, r4
600022a4:	ldr	r1, [r3, #20]
600022a6:	bl	60002548 <___ZN5Print7printlnEmi_veneer>
      }
      //Usage Fault Status Register UFSR
      if (((_CFSR & 0x10000) >> 16) == 1) {
600022aa:	lsls	r1, r5, #15
600022ac:	bmi.n	60002300 <CrashReportClass::printTo(Print&) const+0x4ac>
        p.println("\t(UNDEFINSTR) Undefined instruction");
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
600022ae:	lsls	r2, r5, #14
600022b0:	bmi.n	600022f6 <CrashReportClass::printTo(Print&) const+0x4a2>
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
600022b2:	lsls	r3, r5, #13
600022b4:	bmi.n	600022ec <CrashReportClass::printTo(Print&) const+0x498>
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
600022b6:	lsls	r7, r5, #12
600022b8:	bmi.n	600022e2 <CrashReportClass::printTo(Print&) const+0x48e>
        p.println("\t(NOCP) No Coprocessor");
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
600022ba:	lsls	r6, r5, #7
600022bc:	bmi.n	600022d8 <CrashReportClass::printTo(Print&) const+0x484>
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
600022be:	lsls	r5, r5, #6
600022c0:	bpl.w	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
        p.println("\t(DIVBYZERO) Divide by zero");
600022c4:	ldr	r1, [pc, #328]	; (60002410 <CrashReportClass::printTo(Print&) const+0x5bc>)
600022c6:	mov	r0, r4
600022c8:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
600022cc:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
600022ce:	ldr	r1, [pc, #324]	; (60002414 <CrashReportClass::printTo(Print&) const+0x5c0>)
600022d0:	mov	r0, r4
600022d2:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
600022d6:	b.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
        p.println("\t(NOCP) No Coprocessor");
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
600022d8:	ldr	r1, [pc, #316]	; (60002418 <CrashReportClass::printTo(Print&) const+0x5c4>)
600022da:	mov	r0, r4
600022dc:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
600022e0:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
        p.println("\t(NOCP) No Coprocessor");
600022e2:	ldr	r1, [pc, #312]	; (6000241c <CrashReportClass::printTo(Print&) const+0x5c8>)
600022e4:	mov	r0, r4
600022e6:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
600022ea:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
      if (((_CFSR & 0x10000) >> 16) == 1) {
        p.println("\t(UNDEFINSTR) Undefined instruction");
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
600022ec:	ldr	r1, [pc, #304]	; (60002420 <CrashReportClass::printTo(Print&) const+0x5cc>)
600022ee:	mov	r0, r4
600022f0:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
600022f4:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
      }
      //Usage Fault Status Register UFSR
      if (((_CFSR & 0x10000) >> 16) == 1) {
        p.println("\t(UNDEFINSTR) Undefined instruction");
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
600022f6:	ldr	r1, [pc, #300]	; (60002424 <CrashReportClass::printTo(Print&) const+0x5d0>)
600022f8:	mov	r0, r4
600022fa:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
600022fe:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
        p.print("\t(BFARVALID) Accessed Address: 0x");
        p.println(info->bfar, HEX);
      }
      //Usage Fault Status Register UFSR
      if (((_CFSR & 0x10000) >> 16) == 1) {
        p.println("\t(UNDEFINSTR) Undefined instruction");
60002300:	ldr	r1, [pc, #292]	; (60002428 <CrashReportClass::printTo(Print&) const+0x5d4>)
60002302:	mov	r0, r4
60002304:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
60002308:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
6000230a:	ldr	r1, [pc, #288]	; (6000242c <CrashReportClass::printTo(Print&) const+0x5d8>)
6000230c:	mov	r0, r4
6000230e:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
60002312:	b.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
      if (((_CFSR & 0x100) >> 8) == 1) {
        p.println("\t(IBUSERR) Instruction Bus Error");
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
60002314:	ldr	r1, [pc, #280]	; (60002430 <CrashReportClass::printTo(Print&) const+0x5dc>)
60002316:	mov	r0, r4
60002318:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
6000231c:	b.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
      }
      //Bus Fault Status Register BFSR
      if (((_CFSR & 0x100) >> 8) == 1) {
        p.println("\t(IBUSERR) Instruction Bus Error");
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
6000231e:	ldr	r1, [pc, #276]	; (60002434 <CrashReportClass::printTo(Print&) const+0x5e0>)
60002320:	mov	r0, r4
60002322:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
60002326:	b.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
        }
        p.println();
      }
      //Bus Fault Status Register BFSR
      if (((_CFSR & 0x100) >> 8) == 1) {
        p.println("\t(IBUSERR) Instruction Bus Error");
60002328:	ldr	r1, [pc, #268]	; (60002438 <CrashReportClass::printTo(Print&) const+0x5e4>)
6000232a:	mov	r0, r4
6000232c:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
60002330:	b.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
      }
      if (((_CFSR & (0x80)) >> 7) == 1) {
        p.print("\t(MMARVALID) Accessed Address: 0x");
        p.print(info->mmfar, HEX);
60002332:	ldr	r6, [pc, #164]	; (600023d8 <CrashReportClass::printTo(Print&) const+0x584>)
60002334:	mov	r0, r4
60002336:	ldr	r1, [pc, #260]	; (6000243c <CrashReportClass::printTo(Print&) const+0x5e8>)
60002338:	bl	60002518 <___ZN5Print5writeEPKc_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
6000233c:	movs	r2, #16
6000233e:	ldr	r1, [r6, #16]
60002340:	movs	r3, #0
60002342:	mov	r0, r4
60002344:	bl	60002520 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60002348:	ldr	r2, [r6, #16]
6000234a:	cmp	r2, #31
6000234c:	bls.n	6000236a <CrashReportClass::printTo(Print&) const+0x516>
          p.print(info->ret, HEX);
          p.print("\" for filename & line number.");
            // TODO: in some perfect future, maybe we'll build part of the ELF debug_line
            // section (maybe just the .ino files) into CrashReport and be able to report
            // the actual filename and line number.  Wouldn't that be awesome?!
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
6000234e:	ldr	r3, [pc, #240]	; (60002440 <CrashReportClass::printTo(Print&) const+0x5ec>)
60002350:	cmp	r2, r3
60002352:	bcc.n	60002362 <CrashReportClass::printTo(Print&) const+0x50e>
60002354:	adds	r3, #32
60002356:	cmp	r2, r3
60002358:	bcs.n	60002362 <CrashReportClass::printTo(Print&) const+0x50e>
	// Print a string
	size_t print(const String &s);
	// Print a single character
	size_t print(char c)				{ return write((uint8_t)c); }
	// Print a string
	size_t print(const char s[])			{ return write(s); }
6000235a:	ldr	r1, [pc, #232]	; (60002444 <CrashReportClass::printTo(Print&) const+0x5f0>)
6000235c:	mov	r0, r4
6000235e:	bl	60002518 <___ZN5Print5writeEPKc_veneer>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
        }
        p.println();
60002362:	mov	r0, r4
60002364:	bl	60002540 <___ZN5Print7printlnEv_veneer>
60002368:	b.n	60002272 <CrashReportClass::printTo(Print&) const+0x41e>
6000236a:	ldr	r1, [pc, #220]	; (60002448 <CrashReportClass::printTo(Print&) const+0x5f4>)
6000236c:	mov	r0, r4
6000236e:	bl	60002518 <___ZN5Print5writeEPKc_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60002372:	movs	r3, #0
60002374:	movs	r2, #16
60002376:	ldr	r1, [r6, #24]
60002378:	mov	r0, r4
6000237a:	bl	60002520 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string
	size_t print(const String &s);
	// Print a single character
	size_t print(char c)				{ return write((uint8_t)c); }
	// Print a string
	size_t print(const char s[])			{ return write(s); }
6000237e:	ldr	r1, [pc, #204]	; (6000244c <CrashReportClass::printTo(Print&) const+0x5f8>)
60002380:	mov	r0, r4
60002382:	bl	60002518 <___ZN5Print5writeEPKc_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60002386:	ldr	r1, [r6, #24]
60002388:	movs	r3, #0
6000238a:	movs	r2, #16
6000238c:	mov	r0, r4
6000238e:	bl	60002520 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string
	size_t print(const String &s);
	// Print a single character
	size_t print(char c)				{ return write((uint8_t)c); }
	// Print a string
	size_t print(const char s[])			{ return write(s); }
60002392:	ldr	r1, [pc, #188]	; (60002450 <CrashReportClass::printTo(Print&) const+0x5fc>)
60002394:	mov	r0, r4
60002396:	bl	60002518 <___ZN5Print5writeEPKc_veneer>
6000239a:	b.n	60002362 <CrashReportClass::printTo(Print&) const+0x50e>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
        p.println("\t(DACCVIOL) Data Access Violation");
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
        p.println("\t(MSTKERR) MemMange Fault on stacking");
6000239c:	ldr	r1, [pc, #180]	; (60002454 <CrashReportClass::printTo(Print&) const+0x600>)
6000239e:	mov	r0, r4
600023a0:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
600023a4:	b.n	6000226e <CrashReportClass::printTo(Print&) const+0x41a>
      if ((_CFSR & 1) == 1) {
        p.println("\t(IACCVIOL) Instruction Access Violation");
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
        p.println("\t(DACCVIOL) Data Access Violation");
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
600023a6:	ldr	r1, [pc, #176]	; (60002458 <CrashReportClass::printTo(Print&) const+0x604>)
600023a8:	mov	r0, r4
600023aa:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
600023ae:	b.n	6000226e <CrashReportClass::printTo(Print&) const+0x41a>
      p.println(info->cfsr, HEX);
      //Memory Management Faults
      if ((_CFSR & 1) == 1) {
        p.println("\t(IACCVIOL) Instruction Access Violation");
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
        p.println("\t(DACCVIOL) Data Access Violation");
600023b0:	ldr	r1, [pc, #168]	; (6000245c <CrashReportClass::printTo(Print&) const+0x608>)
600023b2:	mov	r0, r4
600023b4:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
600023b8:	b.n	6000226e <CrashReportClass::printTo(Print&) const+0x41a>
600023ba:	nop
600023bc:	.word	0x20001134
600023c0:	.word	0x91a2b3c5
600023c4:	.word	0x20001144
600023c8:	.word	0xaaaaaaab
600023cc:	.word	0x2000116c
600023d0:	.word	0x88888889
600023d4:	.word	0x20001170
600023d8:	.word	0x2027ff80
600023dc:	.word	0x200015f8
600023e0:	.word	0x431bde83
600023e4:	.word	0x2000161c
600023e8:	.word	0x20001624
600023ec:	.word	0x20001f24
600023f0:	.word	0x20001644
600023f4:	.word	0x200017ac
600023f8:	.word	0x200015a8
600023fc:	.word	0x200015dc
60002400:	.word	0x20001198
60002404:	.word	0x20001248
60002408:	.word	0x2000146c
6000240c:	.word	0x200014a0
60002410:	.word	0x2000158c
60002414:	.word	0x20001438
60002418:	.word	0x20001560
6000241c:	.word	0x20001548
60002420:	.word	0x2000151c
60002424:	.word	0x200014e8
60002428:	.word	0x200014c4
6000242c:	.word	0x200013f8
60002430:	.word	0x200013b0
60002434:	.word	0x20001380
60002438:	.word	0x2000135c
6000243c:	.word	0x20001274
60002440:	.word	0x20018c80
60002444:	.word	0x20001318
60002448:	.word	0x20001298
6000244c:	.word	0x200012b8
60002450:	.word	0x200012f8
60002454:	.word	0x20001220
60002458:	.word	0x200011f4
6000245c:	.word	0x200011d0
    if (_CFSR > 0) {
      p.print("  CFSR: ");
      p.println(info->cfsr, HEX);
      //Memory Management Faults
      if ((_CFSR & 1) == 1) {
        p.println("\t(IACCVIOL) Instruction Access Violation");
60002460:	ldr	r1, [pc, #16]	; (60002474 <CrashReportClass::printTo(Print&) const+0x620>)
60002462:	mov	r0, r4
60002464:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
60002468:	b.n	6000226e <CrashReportClass::printTo(Print&) const+0x41a>
    if (_HFSR > 0) {
      p.print("  HTSR: ");
      p.println(info->hfsr, HEX);
      //Memory Management Faults
      if (((_HFSR & (0x02)) >> 1) == 1) {
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
6000246a:	ldr	r1, [pc, #12]	; (60002478 <CrashReportClass::printTo(Print&) const+0x624>)
6000246c:	mov	r0, r4
6000246e:	bl	60002508 <___ZN5Print7printlnEPKc_veneer>
60002472:	b.n	600021ae <CrashReportClass::printTo(Print&) const+0x35a>
60002474:	.word	0x200011a4
60002478:	.word	0x200015b4

6000247c <CrashReportClass::clear()>:

FLASHMEM
void CrashReportClass::clear()
{
  struct arm_fault_info_struct *info = (struct arm_fault_info_struct *)0x2027FF80;
  cleardata(info);
6000247c:	b.n	60001dcc <cleardata(arm_fault_info_struct*) [clone .constprop.1]>
6000247e:	nop

60002480 <CrashReportClass::operator bool()>:
}

FLASHMEM
CrashReportClass::operator bool()
{
60002480:	push	{r3, lr}
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60002482:	ldr	r3, [pc, #24]	; (6000249c <CrashReportClass::operator bool()+0x1c>)
60002484:	ldr	r3, [r3, #0]
60002486:	cmp	r3, #11
60002488:	beq.n	6000248e <CrashReportClass::operator bool()+0xe>
FLASHMEM
CrashReportClass::operator bool()
{
	struct arm_fault_info_struct *info = (struct arm_fault_info_struct *)0x2027FF80;
	if (isvalid(info)) return true;
	return false;
6000248a:	movs	r0, #0
}
6000248c:	pop	{r3, pc}
6000248e:	bl	60001e10 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]>

FLASHMEM
CrashReportClass::operator bool()
{
	struct arm_fault_info_struct *info = (struct arm_fault_info_struct *)0x2027FF80;
	if (isvalid(info)) return true;
60002492:	adds	r0, #0
60002494:	it	ne
60002496:	movne	r0, #1
60002498:	pop	{r3, pc}
6000249a:	nop
6000249c:	.word	0x2027ff80

600024a0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600024a0:	ldr	r3, [pc, #68]	; (600024e8 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600024a2:	ldr	r1, [pc, #72]	; (600024ec <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600024a4:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600024a6:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600024a8:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600024ac:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600024ae:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600024b0:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600024b4:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600024b6:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600024b8:	orr.w	r0, r0, #768	; 0x300
600024bc:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600024be:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600024c0:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600024c2:	ldr	r3, [r2, #72]	; 0x48
600024c4:	lsls	r3, r3, #24
600024c6:	bmi.n	600024c2 <analog_init+0x22>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600024c8:	ldr	r3, [pc, #36]	; (600024f0 <analog_init+0x50>)
600024ca:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600024ce:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600024d0:	mov	r2, r3
	while (ADC1_GC & ADC_GC_CAL) {
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600024d2:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600024d4:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600024d6:	ldr	r3, [r2, #72]	; 0x48
600024d8:	ands.w	r3, r3, #128	; 0x80
600024dc:	bne.n	600024d6 <analog_init+0x36>
		//yield();
	}
	calibrating = 0;
600024de:	ldr	r2, [pc, #20]	; (600024f4 <analog_init+0x54>)
600024e0:	strb	r3, [r2, #0]
}
600024e2:	pop	{r4, r5}
600024e4:	bx	lr
600024e6:	nop
600024e8:	.word	0x400fc000
600024ec:	.word	0x400c4000
600024f0:	.word	0x400c8000
600024f4:	.word	0x20018bcb

600024f8 <_init>:
600024f8:	push	{r3, r4, r5, r6, r7, lr}
600024fa:	nop
600024fc:	pop	{r3, r4, r5, r6, r7}
600024fe:	pop	{r3}
60002500:	mov	lr, r3
60002502:	bx	lr
60002504:	movs	r0, r0
	...

60002508 <___ZN5Print7printlnEPKc_veneer>:
60002508:	ldr.w	pc, [pc]	; 6000250c <___ZN5Print7printlnEPKc_veneer+0x4>
6000250c:	.word	0x0000b909

60002510 <___ZN5Print10printFloatEdh_veneer>:
60002510:	ldr.w	pc, [pc]	; 60002514 <___ZN5Print10printFloatEdh_veneer+0x4>
60002514:	.word	0x0000bb21

60002518 <___ZN5Print5writeEPKc_veneer>:
60002518:	ldr.w	pc, [pc]	; 6000251c <___ZN5Print5writeEPKc_veneer+0x4>
6000251c:	.word	0x000032d9

60002520 <___ZN5Print11printNumberEmhh_veneer>:
60002520:	ldr.w	pc, [pc]	; 60002524 <___ZN5Print11printNumberEmhh_veneer+0x4>
60002524:	.word	0x0000ba89

60002528 <__memset_veneer>:
60002528:	ldr.w	pc, [pc]	; 6000252c <__memset_veneer+0x4>
6000252c:	.word	0x0000c86d

60002530 <____libc_init_array_veneer>:
60002530:	ldr.w	pc, [pc]	; 60002534 <____libc_init_array_veneer+0x4>
60002534:	.word	0x0000c039

60002538 <__main_veneer>:
60002538:	ldr.w	pc, [pc]	; 6000253c <__main_veneer+0x4>
6000253c:	.word	0x0000b971

60002540 <___ZN5Print7printlnEv_veneer>:
60002540:	ldr.w	pc, [pc]	; 60002544 <___ZN5Print7printlnEv_veneer+0x4>
60002544:	.word	0x0000ba35

60002548 <___ZN5Print7printlnEmi_veneer>:
60002548:	ldr.w	pc, [pc]	; 6000254c <___ZN5Print7printlnEmi_veneer+0x4>
6000254c:	.word	0x0000b931

60002550 <__sm_set_pool_veneer>:
60002550:	ldr.w	pc, [pc]	; 60002554 <__sm_set_pool_veneer+0x4>
60002554:	.word	0x0000b159

60002558 <__usb_init_serialnumber_veneer>:
60002558:	ldr.w	pc, [pc]	; 6000255c <__usb_init_serialnumber_veneer+0x4>
6000255c:	.word	0x0000b605

60002560 <__delay_veneer>:
60002560:	ldr.w	pc, [pc]	; 60002564 <__delay_veneer+0x4>
60002564:	.word	0x0000ad95

60002568 <___ZN5Print5printEl_veneer>:
60002568:	ldr.w	pc, [pc]	; 6000256c <___ZN5Print5printEl_veneer+0x4>
6000256c:	.word	0x0000bb09

60002570 <__set_arm_clock_veneer>:
60002570:	ldr.w	pc, [pc]	; 60002574 <__set_arm_clock_veneer+0x4>
60002574:	.word	0x0000a1bd

60002578 <__pwm_init_veneer>:
60002578:	ldr.w	pc, [pc]	; 6000257c <__pwm_init_veneer+0x4>
6000257c:	.word	0x0000b34d

60002580 <__init_array_start>:
60002580:	.word	0x00000045
60002584:	.word	0x00000df5
60002588:	.word	0x00001571
6000258c:	.word	0x000019e1
60002590:	.word	0x00001a15
60002594:	.word	0x00001a45
60002598:	.word	0x00001a5d
6000259c:	.word	0x00001a75
600025a0:	.word	0x00001a8d
600025a4:	.word	0x00001aa5
600025a8:	.word	0x00001abd
600025ac:	.word	0x00001ad5
600025b0:	.word	0x00001aed
600025b4:	.word	0x00001b05
600025b8:	.word	0x0000238d
600025bc:	.word	0x000023a5
600025c0:	.word	0x000023bd
600025c4:	.word	0x000023d5
600025c8:	.word	0x000023ed
600025cc:	.word	0x00002405
600025d0:	.word	0x0000241d
600025d4:	.word	0x00002435
600025d8:	.word	0x0000244d
600025dc:	.word	0x00002465
600025e0:	.word	0x0000247d
600025e4:	.word	0x00002495
600025e8:	.word	0x000024ad
600025ec:	.word	0x000024c5
600025f0:	.word	0x000024dd
600025f4:	.word	0x00002ed1

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      26:	.short	0xb933
      28:	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x17>)
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1b>)
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	movs	r3, #1
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      34:	strb	r3, [r4, #0]
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
      36:	pop	{r4, pc}
      38:	ldrb	r0, [r1, r1]
      3a:	movs	r0, #0
      3c:	movs	r0, r0
      3e:	movs	r0, r0
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
      40:	.word	0x60002704

00000044 <frame_dummy>:

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	.short	0xb510
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	cbnz	r3, 5a <frame_dummy+0x16>
      58:	pop	{r4, pc}
      5a:	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
      5c:	cmp	r3, #0
      5e:	beq.n	58 <frame_dummy+0x14>
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	.short	0xbf00
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      68:	movs	r0, r0
      6a:	movs	r0, r0
			yield(); // TODO: what happens if yield-called code uses analogRead()
      6c:	ldrb	r4, [r1, r1]
      6e:	movs	r0, #0
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      70:	.word	0x60002704
      74:	cmp	r2, #192	; 0xc0
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC2_R0;
      76:	movs	r0, #0
      78:	movs	r0, r0
	...

0000007c <getDataCount()>:
  volatile int busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile int head=0;
  volatile int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
      7c:	ldr	r3, [pc, #20]	; (94 <getDataCount()+0x18>)
      7e:	ldr	r2, [pc, #24]	; (98 <getDataCount()+0x1c>)
      80:	.word	0x6810681b
      84:	subs	r3, r3, r0
      86:	bmi.n	8c <getDataCount()+0x10>
      88:	uxth	r0, r3
      8a:	bx	lr
      8c:	.word	0x0080f103
      90:	uxth	r0, r0
      92:	.short	0x4770
      94:	ldrh	r4, [r4, #28]
      96:	movs	r0, #1
      98:	ldrb	r4, [r5, #23]
      9a:	.short	0x2001

0000009c <pushData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
      9c:	push	{r4, r5, r6, r7}
    if ( (tail+1)%MAXBUF == head ) return 0;
      9e:	ldr	r4, [pc, #112]	; (110 <pushData(unsigned long*)+0x74>)
      a0:	ldr	r3, [pc, #112]	; (114 <pushData(unsigned long*)+0x78>)
      a2:	.short	0x6822
      a4:	ldr	r1, [pc, #112]	; (118 <pushData(unsigned long*)+0x7c>)
      a6:	adds	r2, #1
      a8:	.word	0x40136809
      ac:	cmp	r3, #0
      ae:	.short	0xdb21
      b0:	cmp	r3, r1
      b2:	.short	0xd025
      b4:	ldr	r7, [pc, #100]	; (11c <pushData(unsigned long*)+0x80>)
    while(busy); busy=1;
      b6:	.short	0x683b
      b8:	ldr	r2, [pc, #96]	; (11c <pushData(unsigned long*)+0x80>)
      ba:	.short	0x2b00
      bc:	bne.n	b6 <pushData(unsigned long*)+0x1a>
      be:	.short	0x1f01
      c0:	ldr	r6, [pc, #92]	; (120 <pushData(unsigned long*)+0x84>)
      c2:	movs	r0, #1
      c4:	.word	0x68226010
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
      c8:	ldr.w	r0, [r1, #4]!
      cc:	.word	0x12c2eb03
      d0:	adds	r3, #1
      d2:	ldr	r5, [pc, #60]	; (110 <pushData(unsigned long*)+0x74>)
      d4:	.word	0xf8462b80
      d8:	movs	r2, r4
      da:	bne.n	c6 <pushData(unsigned long*)+0x2a>
    tail = (tail+1)%MAXBUF;
      dc:	ldr	r2, [r5, #0]
      de:	.short	0x4b0d
      e0:	adds	r2, #1
      e2:	.short	0x4013
      e4:	cmp	r3, #0
      e6:	.short	0xdb0e
    busy=0;
      e8:	movs	r2, #0
  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    if ( (tail+1)%MAXBUF == head ) return 0;
    while(busy); busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    tail = (tail+1)%MAXBUF;
      ea:	.short	0x6023
    busy=0;
    return 1; // signal success.
      ec:	movs	r0, #1
  {
    if ( (tail+1)%MAXBUF == head ) return 0;
    while(busy); busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    tail = (tail+1)%MAXBUF;
    busy=0;
      ee:	.short	0x603a
    return 1; // signal success.
  }
      f0:	pop	{r4, r5, r6, r7}
      f2:	.short	0x4770
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
  
  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    if ( (tail+1)%MAXBUF == head ) return 0;
      f4:	subs	r3, #1
      f6:	.short	0xf063
      f8:	lsls	r7, r7, #13
      fa:	.short	0x3301
      fc:	cmp	r3, r1
      fe:	.short	0xd1d9
     100:	movs	r0, #0
    while(busy); busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    tail = (tail+1)%MAXBUF;
    busy=0;
    return 1; // signal success.
  }
     102:	.short	0xbcf0
     104:	bx	lr
  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    if ( (tail+1)%MAXBUF == head ) return 0;
    while(busy); busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    tail = (tail+1)%MAXBUF;
     106:	.short	0x3b01
     108:	orn	r3, r3, #127	; 0x7f
     10c:	.word	0xe7eb3301
     110:	ldrh	r4, [r4, #28]
     112:	.short	0x2001
     114:	lsls	r7, r7, #1
     116:	.short	0x8000
     118:	ldrb	r4, [r5, #23]
     11a:	movs	r0, #1
     11c:	.word	0x20017d80
     120:	strb	r0, [r0, #13]
     122:	.short	0x2000

00000124 <pullData(unsigned long*)>:
    busy=0;
    return 1; // signal success.
  }
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
     124:	push	{r4, r5, r6}
    if ( head==tail ) return 0;
     126:	.short	0x4b17
     128:	ldr	r4, [pc, #92]	; (188 <pullData(unsigned long*)+0x64>)
     12a:	.short	0x6822
     12c:	.word	0x429a681b
     130:	beq.n	172 <pullData(unsigned long*)+0x4e>
     132:	.short	0x4e16
    while(busy); busy=1;
     134:	ldr	r3, [r6, #0]
     136:	.short	0x4a15
     138:	cmp	r3, #0
     13a:	.short	0xd1fb
     13c:	subs	r1, r0, #4
     13e:	.short	0x4d14
     140:	movs	r0, #1
     142:	.short	0x6010
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
     144:	ldr	r2, [r4, #0]
     146:	ldr	r0, [pc, #64]	; (188 <pullData(unsigned long*)+0x64>)
     148:	add.w	r2, r3, r2, lsl #7
     14c:	adds	r3, #1
     14e:	ldr.w	r2, [r5, r2, lsl #2]
     152:	.short	0x2b80
     154:	str.w	r2, [r1, #4]!
     158:	.word	0x6802d1f4
    head = (head+1)%MAXBUF;
     15c:	ldr	r3, [pc, #52]	; (194 <pullData(unsigned long*)+0x70>)
     15e:	.short	0x3201
     160:	ands	r3, r2
     162:	cmp	r3, #0
     164:	.word	0x2200db08
     168:	str	r3, [r4, #0]
    busy=0;
    return 1;
     16a:	movs	r0, #1
  {
    if ( head==tail ) return 0;
    while(busy); busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    head = (head+1)%MAXBUF;
    busy=0;
     16c:	str	r2, [r6, #0]
    return 1;
  }
     16e:	pop	{r4, r5, r6}
     170:	bx	lr
    return 1; // signal success.
  }
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
     172:	movs	r0, #0
    while(busy); busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    head = (head+1)%MAXBUF;
    busy=0;
    return 1;
  }
     174:	pop	{r4, r5, r6}
     176:	bx	lr
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    while(busy); busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    head = (head+1)%MAXBUF;
     178:	.word	0xf0633b01
     17c:	lsls	r7, r7, #13
     17e:	.short	0x3301
     180:	b.n	166 <pullData(unsigned long*)+0x42>
     182:	.short	0xbf00
     184:	ldrh	r4, [r4, #28]
     186:	.short	0x2001
     188:	ldrb	r4, [r5, #23]
     18a:	.short	0x2001
     18c:	ldrb	r0, [r0, #22]
     18e:	movs	r0, #1
     190:	.word	0x20007340
     194:	lsls	r7, r7, #1
     196:	.short	0x8000

00000198 <menuGetInt16(short*)>:
#include "menu.h"
#include "mRTC.h"
#include "mAcq.h"

static int menuGetInt16(int16_t *val)
{ char buffer[40];
     198:	push	{r4, lr}
     19a:	.short	0x4604
     19c:	sub	sp, #48	; 0x30
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     19e:	.short	0xf009
     1a0:	vsub.i16	d2, d13, d0
  while(!Serial.available()) continue;
     1a4:	beq.n	19e <menuGetInt16(short*)+0x6>
  int count = Serial.readBytesUntil('\r',buffer,40);
     1a6:	movs	r1, #13
     1a8:	add	r2, sp, #8
     1aa:	movs	r3, #40	; 0x28
     1ac:	ldr	r0, [pc, #52]	; (1e4 <menuGetInt16(short*)+0x4c>)
     1ae:	.short	0xf00b
     1b0:			; <UNDEFINED> instruction: 0xfbffab0c
  buffer[count]=0;
     1b4:	movs	r2, #0
     1b6:	add	r3, r0
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
     1b8:	add	r0, sp, #8
     1ba:	strb.w	r2, [r3, #-40]
     1be:	.short	0xf00c
     1c0:	ldc2l	6, cr4, [pc, #4]!	; 1c8 <menuGetInt16(short*)+0x30>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     1c4:	add	r0, sp, #8
     1c6:	bl	a0b0 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     1ca:	ldr	r0, [pc, #24]	; (1e4 <menuGetInt16(short*)+0x4c>)
     1cc:	.word	0xfc32f00b
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
     1d0:	add	r0, sp, #8
     1d2:	.short	0xaa01
     1d4:	ldr	r1, [pc, #16]	; (1e8 <menuGetInt16(short*)+0x50>)
     1d6:	bl	cd60 <sscanf>
     1da:	ldr	r3, [sp, #4]
  return 1;
}
     1dc:	.word	0x80232001
     1e0:	add	sp, #48	; 0x30
     1e2:	pop	{r4, pc}
     1e4:	subs	r0, r7, #5
     1e6:	movs	r0, #0
     1e8:	lsrs	r0, r1, #25
     1ea:	movs	r0, #0

000001ec <menuGet3Int(int*, int*, int*)>:
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
  return 1;
}

static int menuGet3Int(int *val1, int *val2, int *val3)
{ char buffer[40];
     1ec:	push	{r4, r5, r6, lr}
     1ee:	mov	r4, r0
     1f0:	sub	sp, #64	; 0x40
     1f2:	mov	r5, r1
     1f4:	mov	r6, r2
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     1f6:	bl	9fdc <usb_serial_available>
  while(!Serial.available()) continue;
     1fa:	.short	0x2800
     1fc:	beq.n	1f6 <menuGet3Int(int*, int*, int*)+0xa>
  int count = Serial.readBytesUntil('\r',buffer,40);
     1fe:	.short	0x210d
     200:	add	r2, sp, #24
     202:	.short	0x2328
     204:	ldr	r0, [pc, #60]	; (244 <menuGet3Int(int*, int*, int*)+0x58>)
     206:	bl	b9b0 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
     20a:	.short	0xab10
     20c:	movs	r2, #0
     20e:	.short	0x4403
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
     210:	add	r0, sp, #24
     212:	.short	0xf803
     214:	cmp	r4, #40	; 0x28
     216:	.short	0xf00c
     218:	ldc2l	6, cr4, [r3, #4]
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     21c:	.word	0xf009a806
     220:	vsub.i8	d20, d7, d8
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     224:	.word	0xfc06f00b
  Serial.println(buffer);
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
     228:	add.w	r3, sp, #23
     22c:	mov	r2, r4
     22e:	ldr	r1, [pc, #24]	; (248 <menuGet3Int(int*, int*, int*)+0x5c>)
     230:	.word	0xf10d9301
     234:	lsls	r6, r2, #12
     236:	.short	0xa806
     238:	str	r6, [sp, #8]
     23a:	.short	0x9500
     23c:	bl	cd60 <sscanf>
}
     240:	add	sp, #64	; 0x40
     242:	.short	0xbd70
     244:	subs	r0, r7, #5
     246:	.short	0x2000
     248:	lsrs	r0, r0, #25
     24a:	.short	0x2000

0000024c <menu1()>:

void menu1(void)
{   // have ':'
     24c:	push	{r3, lr}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     24e:	.short	0xf009
     250:	cdp2	8, 12, cr2, cr5, cr0, {0}
    while(!Serial.available()) ;
     254:	beq.n	24e <menu1()+0x2>
    char ch=Serial.read();
    if(ch=='x') return;
}
     256:	.short	0xe8bd
     258:	ands	r0, r1
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     25a:	.short	0xf009
     25c:	ittte	eq

		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
	} else {
		// Half duplex maybe different pin pad config like PU...		
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     25e:	.short	0xbf00

00000260 <menu2()>:

void menu2(void)
{   // have '?'
     260:	push	{r4, r5, r6, lr}
     262:	.short	0xb088
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     264:	bl	9fdc <usb_serial_available>	; unpredictable branch in IT block

    datetime_t t;

    while(!Serial.available()) ;
     268:	cmpeq	r0, #0
     26a:	.short	0xd0fb
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     26c:	bl	a064 <usb_serial_getchar>	; unpredictable branch in IT block

    char ch=Serial.read();
     270:	.word	0x2870b2c0
    if(ch=='p') // get parameters
     274:	beq.n	29c <menu2()+0x3c>
                   t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw);
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
      Serial.print("shift (s) = "); Serial.println(shift);
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    if(ch=='d') // get date
     276:	cmpeq	r0, #100	; 0x64
     278:	.word	0x2874d057
    {
      rtc_get_datetime(&t);
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    }
    else if(ch=='t') // get time
     27c:	beq.n	348 <menu2()+0xe8>
    {
      rtc_get_datetime(&t);
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    }
    else if(ch=='f')
     27e:	.short	0x2866
     280:	beq.n	366 <menu2()+0x106>
    {
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    }
    else if(ch=='s')
     282:	.short	0x2873
     284:	beq.n	31e <menu2()+0xbe>
    {
      Serial.print("shift (s) = "); Serial.println(shift);
    }
    else if(ch=='c')
     286:	.short	0x2863
     288:	bne.n	290 <menu2()+0x30>
     28a:	.short	0xe03a
     28c:	bl	a064 <usb_serial_getchar>	; unpredictable branch in IT block

		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     290:	bleq	9fdc <usb_serial_available>	; unpredictable branch in IT block

    {
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    while(Serial.available()) ch=Serial.read();
     294:	.word	0xd1f92800

}
     298:	add	sp, #32
     29a:	.short	0xbd70

    while(!Serial.available()) ;
    char ch=Serial.read();
    if(ch=='p') // get parameters
    {
      rtc_get_datetime(&t);
     29c:	add	r0, sp, #24
     29e:	.short	0xf000
     2a0:	sxtab	r9, sp, sp, ror #8
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
                   t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw);
     2a4:	.word	0xf99d001d
     2a8:	asrs	r3, r3, #32
     2aa:	.short	0xf99d
     2ac:	str	r4, [r3, #0]
     2ae:	.short	0xf99d
     2b0:	str	r7, [r3, r0]
     2b2:	ldrsbne.w	r4, [sp, #30]
     2b6:	.short	0xf9bd
     2b8:	movs	r0, #24
     2ba:	.short	0xf99d
     2bc:	adds	r0, #26
     2be:	.short	0x9001
     2c0:	str	r1, [sp, #0]
     2c2:	.short	0x9604
     2c4:	ldr	r1, [pc, #184]	; (380 <menu2()+0x120>)
     2c6:	.short	0x9503
     2c8:	str	r4, [sp, #8]
     2ca:	ldr	r0, [pc, #184]	; (384 <menu2()+0x124>)
     2cc:	.word	0xfbccf00b
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     2d0:	movs	r1, #12
     2d2:	.short	0x482d
     2d4:	bl	a0b0 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
     2d8:	.word	0x482a4b2c
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
	// Print an unsigned number and newline
	size_t println(unsigned int n)			{ return print(n) + println(); }
	// Print a signed number and newline
	size_t println(long n)				{ return print(n) + println(); }
     2dc:	ldr	r1, [r3, #0]
     2de:	.short	0xf00b
     2e0:	ldc2	8, cr4, [r3], {40}	; 0x28
     2e4:	bl	ba34 <Print::println()>
     2e8:	movs	r1, #12
     2ea:	ldr	r0, [pc, #164]	; (390 <menu2()+0x130>)
     2ec:	bl	a0b0 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
     2f0:	ldr	r3, [pc, #160]	; (394 <menu2()+0x134>)
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	// Print a signed number
	size_t print(int n)				{ return print((long)n); }
     2f2:	ldr	r0, [pc, #144]	; (384 <menu2()+0x124>)
     2f4:	ldrsh.w	r1, [r3]
     2f8:	bl	bb08 <Print::print(long)>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     2fc:	.word	0xf00b4821
     300:			; <UNDEFINED> instruction: 0xfb99210c
     304:	.word	0xf0094824
     308:	cdp2	11, 13, cr4, cr3, cr4, {1}
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	// Print a signed number
	size_t print(int n)				{ return print((long)n); }
     30c:	.word	0x1000f9b3
     310:	ldr	r0, [pc, #112]	; (384 <menu2()+0x124>)
     312:	.short	0xf00b
     314:			; <UNDEFINED> instruction: 0xfbf9481b
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     318:	.word	0xfb8cf00b
     31c:	b.n	290 <menu2()+0x30>
     31e:	.short	0x210c
     320:	ldr	r0, [pc, #108]	; (390 <menu2()+0x130>)
     322:	.short	0xf009
     324:	vmaxnm.f64	d20, d5, d11
    {
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    }
    else if(ch=='s')
    {
      Serial.print("shift (s) = "); Serial.println(shift);
     328:	.word	0xa806e7f0
      Serial.print("shift (s) = "); Serial.println(shift);
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    if(ch=='d') // get date
    {
      rtc_get_datetime(&t);
     32c:	bl	73c <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
     330:	.word	0x001bf99d
     334:	ldrsb.w	r3, [sp, #26]
     338:	.word	0xf9bd9000
     33c:	movs	r0, #24
     33e:	.short	0x4918
     340:	ldr	r0, [pc, #64]	; (384 <menu2()+0x124>)
     342:	.short	0xf00b
     344:			; <UNDEFINED> instruction: 0xfb91e7a3
    }
    else if(ch=='t') // get time
    {
      rtc_get_datetime(&t);
     348:	.word	0xf000a806
     34c:	ldr??.w	pc, [r7, #2461]	; 0x99d
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
     350:	.word	0xf99d001f
     354:	adds	r0, #30
     356:	.short	0x9000
     358:	ldrsb.w	r2, [sp, #29]
     35c:	.word	0x48094911
     360:	bl	ba68 <Print::printf(char const*, ...)>
     364:	.word	0x210ce794
     368:	ldr	r0, [pc, #28]	; (388 <menu2()+0x128>)
     36a:	.short	0xf009
     36c:	cdp2	11, 10, cr4, cr1, cr7, {0}
	// Print an unsigned number and newline
	size_t println(unsigned int n)			{ return print(n) + println(); }
	// Print a signed number and newline
	size_t println(long n)				{ return print(n) + println(); }
     370:	.word	0x68194804
     374:	bl	bb08 <Print::print(long)>
     378:	.word	0xf00b4802
     37c:			; <UNDEFINED> instruction: 0xfb5be787
     380:	.word	0x20000e4c
     384:	subs	r0, r7, #5
     386:	.short	0x2000
     388:	lsrs	r0, r6, #25
     38a:	.short	0x2000
     38c:	movs	r5, #32
     38e:	.short	0x2000
     390:	lsrs	r0, r0, #26
     392:	.short	0x2000
     394:	movs	r5, #132	; 0x84
     396:	.short	0x2000
     398:	lsrs	r0, r2, #26
     39a:	.short	0x2000
     39c:	movs	r5, #130	; 0x82
     39e:	.short	0x2000
     3a0:	lsrs	r0, r4, #26
     3a2:	movs	r0, #0
     3a4:	.word	0x20000ebc

000003a8 <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
     3a8:	push	{r4, lr}
     3aa:	.short	0xb08c
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     3ac:	bl	9fdc <usb_serial_available>

    while(!Serial.available()) ;
     3b0:	cmp	r0, #0
     3b2:	.short	0xd0fb
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     3b4:	bl	a064 <usb_serial_getchar>
    char ch=Serial.read();
     3b8:	.word	0x2864b2c0
    if(ch=='d') // set date
     3bc:	beq.n	43c <menu3()+0x94>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    } 
    else if(ch=='t') // set time
     3be:	.short	0x2874
     3c0:	beq.n	450 <menu3()+0xa8>
    { int hour,minutes,seconds;
      menuGet3Int(&hour,&minutes,&seconds);
      //
      rtcSetTime(hour,minutes,seconds);
    } 
    else if(ch=='f')
     3c2:	.short	0x2866
     3c4:	beq.n	3d2 <menu3()+0x2a>
    {
      menuGetInt32(&fsamp);
      acqModifyFrequency(fsamp);
    }
    else if(ch=='s')
     3c6:	.short	0x2873
     3c8:	beq.n	426 <menu3()+0x7e>
    {
      menuGetInt16(&shift); if(shift<0) shift=0;
    }
    else if(ch=='c')
     3ca:	.short	0x2863
     3cc:	beq.n	41c <menu3()+0x74>
    {
      menuGetInt16(&proc);
    }
}
     3ce:	.short	0xb00c
     3d0:	pop	{r4, pc}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     3d2:	.short	0xf009
     3d4:	cdp2	8, 0, cr2, cr3, cr0, {0}
  return 1;
}

static int menuGetInt32(int32_t *val)
{ char buffer[40];
  while(!Serial.available()) continue;
     3d8:	.word	0x210dd0fb
  int count = Serial.readBytesUntil('\r',buffer,40);
     3dc:	add	r2, sp, #8
     3de:	.short	0x2328
     3e0:	ldr	r0, [pc, #128]	; (464 <menu3()+0xbc>)
     3e2:	.short	0xf00b
     3e4:			; <UNDEFINED> instruction: 0xfae5ab0c
  buffer[count]=0;
     3e8:	.word	0x44032200
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
     3ec:	add	r0, sp, #8
     3ee:	.short	0xf803
     3f0:	cmp	r4, #40	; 0x28
     3f2:	.short	0xf00c
     3f4:	stc2l	6, cr4, [r5], #4
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     3f8:	add	r0, sp, #8
     3fa:	bl	a0b0 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     3fe:	ldr	r0, [pc, #100]	; (464 <menu3()+0xbc>)
     400:	.word	0xfb18f00b
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
     404:	add	r2, sp, #4
     406:	.short	0xa802
     408:	ldr	r1, [pc, #92]	; (468 <menu3()+0xc0>)
     40a:	bl	cd60 <sscanf>
     40e:	ldr	r3, [sp, #4]
     410:	ldr	r2, [pc, #88]	; (46c <menu3()+0xc4>)
      rtcSetTime(hour,minutes,seconds);
    } 
    else if(ch=='f')
    {
      menuGetInt32(&fsamp);
      acqModifyFrequency(fsamp);
     412:	mov	r0, r3
  while(!Serial.available()) continue;
  int count = Serial.readBytesUntil('\r',buffer,40);
  buffer[count]=0;
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
     414:	str	r3, [r2, #0]
      rtcSetTime(hour,minutes,seconds);
    } 
    else if(ch=='f')
    {
      menuGetInt32(&fsamp);
      acqModifyFrequency(fsamp);
     416:	.short	0xf000
     418:	ldc2l	7, cr14, [r9], {216}	; 0xd8
    {
      menuGetInt16(&shift); if(shift<0) shift=0;
    }
    else if(ch=='c')
    {
      menuGetInt16(&proc);
     41c:	.word	0xf7ff4814
     420:	cdp2	0, 11, cr11, cr11, cr12, {0}
    }
}
     424:	.word	0x4c13bd10
      menuGetInt32(&fsamp);
      acqModifyFrequency(fsamp);
    }
    else if(ch=='s')
    {
      menuGetInt16(&shift); if(shift<0) shift=0;
     428:	mov	r0, r4
     42a:	bl	198 <menuGetInt16(short*)>
     42e:	ldrsh.w	r3, [r4]
     432:	cmp	r3, #0
     434:	.word	0x2300dacb
     438:	strh	r3, [r4, #0]
     43a:	.short	0xe7c8

    while(!Serial.available()) ;
    char ch=Serial.read();
    if(ch=='d') // set date
    { int year,month,day;
      menuGet3Int(&year,&month,&day);
     43c:	add	r2, sp, #8
     43e:	add	r1, sp, #4
     440:	.word	0xf7ff4668
     444:	mrc2	8, 6, lr, cr3, cr13, {4}

      rtcSetDate(year,month,day);
     448:	.word	0xf0000007
     44c:	vst4.16	{d14[2],d16[2],d18[2],d20[2]}, [r1 :64], lr
    } 
    else if(ch=='t') // set time
    { int hour,minutes,seconds;
      menuGet3Int(&hour,&minutes,&seconds);
     450:	add	r2, sp, #8
     452:	.short	0xa901
     454:	mov	r0, sp
     456:	bl	1ec <menuGet3Int(int*, int*, int*)>
      //
      rtcSetTime(hour,minutes,seconds);
     45a:	ldmia.w	sp, {r0, r1, r2}
     45e:	bl	780 <rtcSetTime(int, int, int)>
     462:	b.n	3ce <menu3()+0x26>
     464:	subs	r0, r7, #5
     466:	movs	r0, #0
     468:	lsrs	r0, r1, #25
     46a:	movs	r0, #0
     46c:	movs	r5, #32
     46e:	movs	r0, #0
     470:	movs	r5, #130	; 0x82
     472:	movs	r0, #0
     474:	movs	r5, #132	; 0x84
     476:	movs	r0, #0

00000478 <time2date(unsigned long, datetime_t*)>:
  #define SECS_PER_DAY  ((uint32_t)(SECS_PER_HOUR * 24UL))

  static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
  void time2date(uint32_t time, datetime_t *tm)
  {
     478:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     47c:	ldr	r6, [pc, #384]	; (600 <time2date(unsigned long, datetime_t*)+0x188>)

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     47e:	.short	0x2400

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     480:	ldr	r3, [pc, #384]	; (604 <time2date(unsigned long, datetime_t*)+0x18c>)
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     482:	.short	0xfba6
     484:	movs	r6, #0
     486:	ldr	r2, [pc, #384]	; (608 <time2date(unsigned long, datetime_t*)+0x190>)

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     488:	umull	r7, r5, r3, r0
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     48c:	ldr.w	r8, [pc, #388]	; 614 <time2date(unsigned long, datetime_t*)+0x19c>
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     490:	lsrs	r6, r6, #16
     492:	umull	r7, r2, r2, r0

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     496:	lsrs	r5, r5, #5
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     498:	.word	0xe17cf8df

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     49c:	adds	r7, r6, #4
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     49e:	.short	0x0ad2
    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
     4a0:	umull	ip, r3, r3, r5
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     4a4:	.word	0x8908fba7
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     4a8:	mov.w	r8, #100	; 0x64
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     4ac:	umull	ip, lr, lr, r2
    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
     4b0:	lsrs	r3, r3, #5
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     4b2:	rsb	ip, r9, r7
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     4b6:	mov.w	lr, lr, lsr #4

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     4ba:	add.w	ip, r9, ip, lsr #1
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     4be:	.short	0xf240
     4c0:	adds	r5, r5, r5
    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
     4c2:	rsb	r3, r3, r3, lsl #4
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     4c6:	mov.w	ip, ip, lsr #2
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     4ca:	add.w	lr, lr, lr, lsl #1

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     4ce:	rsb	ip, ip, ip, lsl #3
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     4d2:	sub.w	lr, r2, lr, lsl #3

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
     4d6:	mov	r2, r4
    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
     4d8:	sub.w	r3, r5, r3, lsl #2
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     4dc:	.word	0x0707ebcc

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     4e0:	rsb	r5, r5, r5, lsl #4
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     4e4:	strb.w	lr, [r1, #5]

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     4e8:	mov.w	ip, #400	; 0x190
     4ec:	ldr.w	lr, [pc, #284]	; 60c <time2date(unsigned long, datetime_t*)+0x194>

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     4f0:	sub.w	r0, r0, r5, lsl #2
    tm->min  = time % 60; time /= 60; // now it is hours
     4f4:	strb	r3, [r1, #6]
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     4f6:	strb	r7, [r1, #4]

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     4f8:	strb	r0, [r1, #7]
     4fa:	uxtb	r3, r4

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     4fc:	movw	r5, #365	; 0x16d
     500:	addw	r3, r3, #1970	; 0x7b2
     504:	smull	r0, sl, lr, r3
     508:	ands.w	r7, r3, #3
     50c:	mov.w	r0, r3, asr #31
     510:	rsb	fp, r0, sl, asr #5
     514:	bne.n	532 <time2date(unsigned long, datetime_t*)+0xba>
     516:	rsb	r0, r0, sl, asr #7
     51a:	mls	fp, r8, fp, r3
     51e:	mov.w	r5, #366	; 0x16e
     522:	mls	r0, ip, r0, r3
     526:	cmp.w	fp, #0
     52a:	bne.n	532 <time2date(unsigned long, datetime_t*)+0xba>
     52c:	.word	0xbf182800
     530:	movne	r5, r9
     532:	add	r2, r5
     534:	.word	0x42963401
     538:	bcs.n	4fa <time2date(unsigned long, datetime_t*)+0x82>
      year++;
    }
    tm->year = year+YEAR0;
     53a:	strh	r3, [r1, #0]
    
    days -= LEAP_YEAR(year) ? 366 : 365;
     53c:	cbnz	r7, 55a <time2date(unsigned long, datetime_t*)+0xe2>
     53e:	ldr	r4, [pc, #204]	; (60c <time2date(unsigned long, datetime_t*)+0x194>)
     540:	.word	0xf04f17d8
     544:	lsrs	r4, r4, #25
     546:	smull	r5, r4, r4, r3
     54a:	rsb	r5, r0, r4, asr #5
     54e:	.short	0xfb0e
     550:	adds	r5, #21
     552:	.short	0xb3a5
     554:	mov.w	r5, #366	; 0x16e
     558:	.word	0xf240e002
     55c:	asrs	r5, r5, #21
     55e:	asrs	r0, r3, #31
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
      if (month==1) { // february
        if (LEAP_YEAR(year)) {
     560:	ldr	r4, [pc, #168]	; (60c <time2date(unsigned long, datetime_t*)+0x194>)
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    time  -= days; // now it is days in this year, starting at 0
     562:	.short	0x1b52
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
      if (month==1) { // february
        if (LEAP_YEAR(year)) {
     564:	mov.w	r8, #100	; 0x64
     568:	.word	0x75c8f44f
     56c:	smull	r4, lr, r4, r3
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    time  -= days; // now it is days in this year, starting at 0
     570:	.word	0x24011ab2
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
     574:	ldr	r6, [pc, #152]	; (610 <time2date(unsigned long, datetime_t*)+0x198>)
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
      if (month==1) { // february
        if (LEAP_YEAR(year)) {
     576:	rsb	ip, r0, lr, asr #5
     57a:	rsb	lr, r0, lr, asr #7
     57e:	movs	r0, #0
     580:	mls	ip, r8, ip, r3
     584:	mls	lr, r5, lr, r3
     588:	b.n	590 <time2date(unsigned long, datetime_t*)+0x118>
     58a:	adds	r4, #1
     58c:	.word	0xb2e43001
    
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
      if (month==1) { // february
     590:	cmp	r0, #1
     592:	uxtb	r5, r0
     594:	beq.n	5d8 <time2date(unsigned long, datetime_t*)+0x160>
        }
      } else {
        monthLength = monthDays[month];
      }
      
      if (time >= monthLength) {
     596:	ldrb	r3, [r0, r6]
     598:	cmp	r3, r2
     59a:	bhi.n	5b0 <time2date(unsigned long, datetime_t*)+0x138>
    time  -= days; // now it is days in this year, starting at 0
    
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
     59c:	.word	0xeba22c0c
      } else {
        monthLength = monthDays[month];
      }
      
      if (time >= monthLength) {
        time -= monthLength;
     5a0:	lsls	r3, r0, #8
    time  -= days; // now it is days in this year, starting at 0
    
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
     5a2:	bne.n	58a <time2date(unsigned long, datetime_t*)+0x112>
     5a4:	movs	r5, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
     5a6:	adds	r2, #1
        time -= monthLength;
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
     5a8:	strb	r5, [r1, #2]
    tm->day = time + 1;     // day of month
     5aa:	strb	r2, [r1, #3]
  }
     5ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     5b0:	adds	r5, #1
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
     5b2:	adds	r2, #1
     5b4:	sxtb	r5, r5
     5b6:	strb	r2, [r1, #3]
        time -= monthLength;
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
     5b8:	strb	r5, [r1, #2]
    tm->day = time + 1;     // day of month
  }
     5ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
     5be:	.short	0xebc0
     5c0:	asrs	r4, r4, #19
     5c2:	mov.w	lr, #400	; 0x190
     5c6:	movw	r5, #365	; 0x16d
     5ca:	mls	r4, lr, r4, r3
     5ce:	.short	0x2c00
     5d0:	it	eq
     5d2:	moveq.w	r5, #366	; 0x16e
     5d6:	b.n	560 <time2date(unsigned long, datetime_t*)+0xe8>
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
      if (month==1) { // february
        if (LEAP_YEAR(year)) {
     5d8:	cbnz	r7, 5f2 <time2date(unsigned long, datetime_t*)+0x17a>
     5da:	cmp.w	ip, #0
     5de:	bne.n	5fa <time2date(unsigned long, datetime_t*)+0x182>
     5e0:	cmp.w	lr, #0
     5e4:	.word	0x231cbf14
     5e8:	moveq	r3, #29
        }
      } else {
        monthLength = monthDays[month];
      }
      
      if (time >= monthLength) {
     5ea:	cmp	r2, r3
     5ec:	.word	0x1ad2d303
        time -= monthLength;
     5f0:	b.n	58a <time2date(unsigned long, datetime_t*)+0x112>
     5f2:	.short	0x231c
     5f4:	b.n	5ea <time2date(unsigned long, datetime_t*)+0x172>
        }
      } else {
        monthLength = monthDays[month];
      }
      
      if (time >= monthLength) {
     5f6:	movs	r5, #2
     5f8:	b.n	5a6 <time2date(unsigned long, datetime_t*)+0x12e>
     5fa:	movs	r3, #29
     5fc:	b.n	5ea <time2date(unsigned long, datetime_t*)+0x172>
     5fe:	nop
     600:	cmp	r7, r0
     602:	.short	0xc22e
     604:	ldrh	r1, [r1, #4]
     606:	ldrh	r0, [r1, #4]
     608:	cbz	r5, 67c <date2time(datetime_t*)+0x60>
     60a:	str	r1, [sp, #648]	; 0x288
     60c:	strh	r7, [r3, #40]	; 0x28
     60e:	.short	0x51eb
     610:	lsls	r4, r3, #22
     612:	movs	r0, #0
     614:	.word	0x24924925
     618:	add	r2, sp, #684	; 0x2ac
     61a:	.short	0xaaaa

0000061c <date2time(datetime_t*)>:
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
  }

  uint32_t date2time(datetime_t *tm)
  {
     61c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
     620:	ldrb	r4, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
     622:	ldr	r2, [pc, #260]	; (728 <date2time(datetime_t*)+0x10c>)
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
     624:	adds	r4, #78	; 0x4e
     626:	uxtb.w	lr, r4
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
     62a:	mul.w	r2, r2, lr
    for (ii = 0; ii < year; ii++) {
     62e:	cmp.w	lr, #0
     632:	beq.n	686 <date2time(datetime_t*)+0x6a>
     634:	movw	r3, #1971	; 0x7b3
     638:	.word	0x77b2f20e
      if (LEAP_YEAR(ii)) {
     63c:	ldr	r6, [pc, #236]	; (72c <date2time(datetime_t*)+0x110>)
     63e:	mov.w	ip, #100	; 0x64

    uint8_t year;
    year=tm->year-YEAR0;
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
     642:	cmp	r3, r7
      if (LEAP_YEAR(ii)) {
     644:	mov.w	r8, #400	; 0x190
     648:	.word	0x1403fb86
     64c:	mov.w	r1, r3, asr #31
     650:	.word	0x1564ebc1

    uint8_t year;
    year=tm->year-YEAR0;
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
     654:	beq.n	686 <date2time(datetime_t*)+0x6a>
      if (LEAP_YEAR(ii)) {
     656:	tst.w	r3, #3
     65a:	mls	r5, ip, r5, r3
     65e:	.short	0xd109
     660:	rsb	r1, r1, r4, asr #7
     664:	.word	0xfb08b915
     668:	adds	r1, #17
     66a:	.short	0xb919
        seconds += SECS_PER_DAY;   // add extra days for leap years
     66c:	add.w	r2, r2, #86016	; 0x15000
     670:	.word	0x72c0f502
     674:	adds	r3, #1
    uint8_t year;
    year=tm->year-YEAR0;
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
      if (LEAP_YEAR(ii)) {
     676:	.short	0xfb86
     678:	asrs	r3, r0, #16

    uint8_t year;
    year=tm->year-YEAR0;
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
     67a:	.short	0x42bb
      if (LEAP_YEAR(ii)) {
     67c:	mov.w	r1, r3, asr #31
     680:	.word	0x1564ebc1

    uint8_t year;
    year=tm->year-YEAR0;
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
     684:	bne.n	656 <date2time(datetime_t*)+0x3a>
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
     686:	.short	0xf990
     688:	strb	r2, [r0, #0]
     68a:	.short	0x2f01
     68c:	ble.n	6ec <date2time(datetime_t*)+0xd0>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
     68e:	.short	0xf20e
     690:	strb	r2, [r6, #18]
     692:	.short	0x4e26
     694:	mov.w	r5, #400	; 0x190
     698:	.word	0x0864f04f
     69c:	smull	r3, r6, r6, r4
     6a0:	.word	0xf00417e3
     6a4:	lsrs	r3, r0, #16
     6a6:	.short	0x4922
     6a8:	rsb	lr, r3, r6, asr #5
     6ac:	.word	0x16e6ebc3
     6b0:	movs	r3, #1
     6b2:	.short	0xfb08
     6b4:	ldr	r6, [pc, #120]	; (730 <date2time(datetime_t*)+0x114>)
     6b6:	.short	0xfb05
     6b8:	mov	r6, r2
        seconds += SECS_PER_DAY * 29;
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
     6ba:	.short	0x4d1e
     6bc:	b.n	6cc <date2time(datetime_t*)+0xb0>
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
     6be:	.short	0x3301
      if ( (ii == 2) && LEAP_YEAR(year)) { 
        seconds += SECS_PER_DAY * 29;
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
     6c0:	ldrb	r4, [r1, #0]
     6c2:	adds	r1, #1
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
     6c4:	.word	0xfb0542bb
      if ( (ii == 2) && LEAP_YEAR(year)) { 
        seconds += SECS_PER_DAY * 29;
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
     6c8:	movs	r2, #4
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
     6ca:	beq.n	6ec <date2time(datetime_t*)+0xd0>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
     6cc:	.word	0xd1f62b02
     6d0:	cmp.w	ip, #0
     6d4:	.word	0xf1bed1f3
     6d8:	lsrs	r0, r0, #28
     6da:	beq.n	71a <date2time(datetime_t*)+0xfe>
        seconds += SECS_PER_DAY * 29;
     6dc:	.word	0x1218f502
     6e0:	add.w	r2, r2, #15232	; 0x3b80
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
     6e4:	.word	0x31013301
     6e8:	cmp	r3, r7
     6ea:	bne.n	6cc <date2time(datetime_t*)+0xb0>
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    seconds+= tm->sec;
    return seconds; 
     6ec:	.word	0x3006f990
     6f0:	mov.w	r6, #3600	; 0xe10
     6f4:	ldrsb.w	r5, [r0, #5]
     6f8:	rsb	r3, r3, r3, lsl #4
     6fc:	ldrsb.w	r4, [r0, #7]
     700:	ldrsb.w	r1, [r0, #3]
     704:	lsls	r3, r3, #2
     706:	ldr	r0, [pc, #44]	; (734 <date2time(datetime_t*)+0x118>)
     708:	subs	r1, #1
     70a:	mla	r3, r6, r5, r3
     70e:	.short	0x4423
     710:	mla	r0, r0, r1, r3
  }
     714:	add	r0, r2
     716:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
      if ( (ii == 2) && LEAP_YEAR(year)) { 
     71a:	cmp	r6, #0
     71c:	.word	0xf502d1cf
        seconds += SECS_PER_DAY * 29;
     720:	asrs	r0, r3, #8
     722:	add.w	r2, r2, #15232	; 0x3b80
     726:	b.n	6e4 <date2time(datetime_t*)+0xc8>
     728:	.word	0x01e13380
     72c:	strh	r7, [r3, #40]	; 0x28
     72e:	.short	0x51eb
     730:	lsls	r4, r3, #22
     732:	.short	0x2000
     734:	str	r0, [r0, r6]
     736:	.short	0x0001

00000738 <rtc_setup(unsigned char, unsigned char)>:
  }

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;
  }
     738:	movs	r0, #1
     73a:	.short	0x4770

0000073c <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
     73c:	push	{r4, lr}
     73e:	.short	0x4604
    time2date(rtc_get(), t);
     740:	bl	b088 <rtc_get>
     744:	.word	0xf7ff4621
     748:	cdp2	0, 9, cr2, cr7, cr1, {0}
    return 1;
  }
     74c:	.word	0xbf00bd10

00000750 <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
     750:	push	{r4, r5, r6, lr}
     752:	.short	0xb082
     754:	mov	r4, r2
     756:	.short	0x460d
     758:	mov	r6, r0
    return 1;
  }

  bool rtc_get_datetime(datetime_t *t)
  {
    time2date(rtc_get(), t);
     75a:	.short	0xf00a
     75c:	ldc2	6, cr4, [r5], {105}	; 0x69
     760:	.word	0xfe8af7ff
    return 1;
  }

  bool rtc_set_datetime(datetime_t *t)
  {
    rtc_set(date2time(t));
     764:	mov	r0, sp
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    rtc_get_datetime(&t);
    t.year=year;
     766:	.short	0xf8ad
     768:	str	r0, [r0, #0]
    t.month=month;
     76a:	.short	0xf88d
     76c:	str	r2, [r0, r0]
    t.day=day;
     76e:	.short	0xf88d
     770:	ands	r3, r0
    return 1;
  }

  bool rtc_set_datetime(datetime_t *t)
  {
    rtc_set(date2time(t));
     772:	.short	0xf7ff
     774:	vhadd.u16	d31, d3, d10
     778:	.word	0xb002fc9f
    rtc_get_datetime(&t);
    t.year=year;
    t.month=month;
    t.day=day;
    rtc_set_datetime(&t);
  }
     77c:	pop	{r4, r5, r6, pc}
     77e:	.short	0xbf00

00000780 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
     780:	push	{r4, r5, r6, lr}
     782:	.short	0xb082
     784:	mov	r4, r2
     786:	.short	0x460d
     788:	mov	r6, r0
    return 1;
  }

  bool rtc_get_datetime(datetime_t *t)
  {
    time2date(rtc_get(), t);
     78a:	.short	0xf00a
     78c:	ldc2l	6, cr4, [sp], #-420	; 0xfffffe5c
     790:	.word	0xfe72f7ff
    return 1;
  }

  bool rtc_set_datetime(datetime_t *t)
  {
    rtc_set(date2time(t));
     794:	mov	r0, sp
  }

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    rtc_get_datetime(&t);
    t.hour=hour;
     796:	.short	0xf88d
     798:	str	r5, [r0, #0]
    t.min=minutes;
     79a:	strb.w	r5, [sp, #6]
    t.sec=seconds;
     79e:	strb.w	r4, [sp, #7]
    return 1;
  }

  bool rtc_set_datetime(datetime_t *t)
  {
    rtc_set(date2time(t));
     7a2:	bl	61c <date2time(datetime_t*)>
     7a6:	bl	b0b8 <rtc_set>
    rtc_get_datetime(&t);
    t.hour=hour;
    t.min=minutes;
    t.sec=seconds;
    rtc_set_datetime(&t);
  }
     7aa:	add	sp, #8
     7ac:	pop	{r4, r5, r6, pc}
     7ae:	.short	0xbf00

000007b0 <compress(void*)>:
int32_t tempData0[NCH];

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
     7b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7b4:	sub	sp, #12
     7b6:	mov	r4, r0
  int ret=1;
  uint32_t to = rtc_get();
     7b8:	bl	b088 <rtc_get>
     7bc:	mov	fp, r0
  uint32_t t1 = micros();
     7be:	bl	ae60 <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy reference (first sample of all channels)
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     7c2:	ldr	r2, [pc, #656]	; (a54 <compress(void*)+0x2a4>)
     7c4:	ldr	r3, [r4, #0]
     7c6:	mov	r1, r4
     7c8:	ldr	r6, [r2, #0]
     7ca:	.short	0xf504
     7cc:	strb	r6, [r7, #31]
     7ce:	.short	0x4aa2
     7d0:	mov	r4, r6
     7d2:	.short	0x4635
     7d4:	str	r3, [r6, #0]
     7d6:	.short	0x6013
  
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);
     7d8:	ldr.w	r3, [r1, #4]!
     7dc:	.word	0x2c04f851
     7e0:	cmp	r1, r7
     7e2:	.short	0xeba3
     7e4:	lsls	r2, r0, #12
     7e6:	str.w	r3, [r5, #4]!
     7ea:	.short	0xd1f5
     7ec:	add.w	r1, r6, #508	; 0x1fc
     7f0:	.word	0xf8542200

  // find maximum in filtered data
  int32_t mx = 0;
  for (int ii = NCH; ii < NSAMP; ii++)
  {
    int32_t dd =  tempDatai[ii];
     7f4:	ldrsh	r4, [r0, r4]
     7f6:	eor.w	r3, r5, r5, asr #31
     7fa:	sub.w	r3, r3, r5, asr #31
     7fe:	cmp	r2, r3
     800:	it	lt
     802:	movlt	r2, r3
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);

  // find maximum in filtered data
  int32_t mx = 0;
  for (int ii = NCH; ii < NSAMP; ii++)
     804:	cmp	r4, r1
     806:	bne.n	7f2 <compress(void*)+0x42>
     808:	mov.w	lr, #2
    if(dd>mx) mx = dd;
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     80c:	movs	r5, #1
     80e:	b.n	81c <compress(void*)+0x6c>
     810:	add.w	lr, lr, #1
     814:	cmp.w	lr, #24
     818:	beq.w	9a6 <compress(void*)+0x1f6>
     81c:	add.w	r4, lr, #4294967295
     820:	movs	r1, #1
     822:	lsl.w	r3, r5, r4
     826:	cmp	r2, r3
     828:	bge.n	810 <compress(void*)+0x60>
     82a:	mov.w	r3, lr, lsl #2
     82e:	lsl.w	r1, r1, lr
     832:	adds	r2, r3, #7
     834:	add.w	r8, r3, #8
     838:	subs	r5, r1, #1
     83a:	adds	r3, #1
     83c:	str	r2, [sp, #4]
     83e:	str	r3, [sp, #0]
  // compression factor (32/nb)
  proc_stat[nb-1]++;
     840:	ldr	r6, [pc, #536]	; (a5c <compress(void*)+0x2ac>)
  if((uint32_t)nb>max_stat) max_stat=nb;
     842:	ldr	r7, [pc, #540]	; (a60 <compress(void*)+0x2b0>)

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
  // compression factor (32/nb)
  proc_stat[nb-1]++;
     844:	ldr.w	r2, [r6, r4, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
     848:	ldr	r1, [r7, #0]

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
  // compression factor (32/nb)
  proc_stat[nb-1]++;
     84a:	adds	r2, #1
  if((uint32_t)nb>max_stat) max_stat=nb;
     84c:	cmp	r1, lr

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
  // compression factor (32/nb)
  proc_stat[nb-1]++;
     84e:	str.w	r2, [r6, r4, lsl #2]
     852:	ldr	r4, [pc, #528]	; (a64 <compress(void*)+0x2b4>)
  if((uint32_t)nb>max_stat) max_stat=nb;
     854:	it	cc
     856:	strcc.w	lr, [r7]
    if(dd>mx) mx = dd;
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     85a:	mov	r9, r4
     85c:	add.w	r7, r4, #508	; 0x1fc
     860:	mov	r2, r4
  proc_stat[nb-1]++;
  if((uint32_t)nb>max_stat) max_stat=nb;

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }
     862:	ldr.w	r3, [r2, #4]!
     866:	ands	r3, r5
     868:	cmp	r2, r7
     86a:	str	r3, [r2, #0]
     86c:	bne.n	862 <compress(void*)+0xb2>
     86e:	ldr	r6, [pc, #504]	; (a68 <compress(void*)+0x2b8>)

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     870:	movs	r3, #0
     872:	add.w	r5, r6, #512	; 0x200
  proc_stat[nb-1]++;
  if((uint32_t)nb>max_stat) max_stat=nb;

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }
     876:	mov	r1, r6

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     878:	str.w	r3, [r1, #4]!
     87c:	cmp	r1, r5
     87e:	mov.w	r2, #0
     882:	bne.n	878 <compress(void*)+0xc8>

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
     884:	ldr	r5, [pc, #484]	; (a6c <compress(void*)+0x2bc>)
     886:	mov.w	sl, #2779096485	; 0xa5a5a5a5
  *iptr++ = nb | shift<<16;
     88a:	ldr	r1, [pc, #484]	; (a70 <compress(void*)+0x2c0>)
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
     88c:	ldr	r3, [sp, #0]
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
     88e:	ldrsh.w	ip, [r1]
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     892:	mov	r1, r2
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
     894:	str	r3, [r5, #20]
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
     896:	movs	r3, #1

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
     898:	str.w	fp, [r5, #8]
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
     89c:	orr.w	ip, lr, ip, lsl #16
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;

  // pack data
  // 
  int nx = MBIT;
     8a0:	mov.w	fp, #32
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
     8a4:	str	r3, [r5, #16]
  *iptr++ = NCH+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     8a6:	ldr.w	r3, [r9]
  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
     8aa:	str	r0, [r5, #12]
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     8ac:	movs	r0, #7
     8ae:	str	r3, [r5, #24]
     8b0:	mov	r3, fp
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
     8b2:	str.w	ip, [r5, #4]
    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
     8b6:	str.w	sl, [r5]
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     8ba:	str.w	r2, [r9]
     8be:	b.n	8d2 <compress(void*)+0x122>
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NSAMP; ii ++)
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
     8c0:	ldr.w	r1, [r5, r0, lsl #2]
     8c4:	orrs	r2, r1
     8c6:	str.w	r2, [r5, r0, lsl #2]
  outData[kk++] = tempData[0]; tempData[0] = 0;

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NSAMP; ii ++)
     8ca:	cmp	r4, r7
     8cc:	beq.n	902 <compress(void*)+0x152>
     8ce:	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
     8d2:	rsb	r3, lr, r3
      if(nx > 0)
     8d6:	cmp	r3, #0
      {   outData[kk] |= (tempData[ii] << nx);
     8d8:	lsl.w	r2, r1, r3
  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NSAMP; ii ++)
  {   nx -= nb;
      if(nx > 0)
     8dc:	bgt.n	8c0 <compress(void*)+0x110>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     8de:	rsb	r2, r3, #0
     8e2:	add.w	r9, r0, #1
          nx += MBIT;
     8e6:	add.w	r3, r3, #32
  for (int ii = 0; ii < NSAMP; ii ++)
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
      }
      else if(nx==0) 
     8ea:	bne.n	938 <compress(void*)+0x188>
      {   outData[kk++] |= tempData[ii];
     8ec:	ldr.w	r2, [r5, r0, lsl #2]
  outData[kk++] = tempData[0]; tempData[0] = 0;

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NSAMP; ii ++)
     8f0:	cmp	r4, r7
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
      }
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
     8f2:	mov.w	r3, #32
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
      }
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
     8f6:	orr.w	r1, r1, r2
     8fa:	str.w	r1, [r5, r0, lsl #2]
     8fe:	mov	r0, r9
  outData[kk++] = tempData[0]; tempData[0] = 0;

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NSAMP; ii ++)
     900:	bne.n	8ce <compress(void*)+0x11e>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBLOCK)
     902:	ldr	r4, [pc, #368]	; (a74 <compress(void*)+0x2c4>)
     904:	ldr.w	lr, [r4]
     908:	add.w	r3, lr, r8
     90c:	cmp	r3, #128	; 0x80
     90e:	bgt.n	952 <compress(void*)+0x1a2>
     910:	ldr	r2, [pc, #356]	; (a78 <compress(void*)+0x2c8>)
     912:	add.w	r0, lr, #1
     916:	movs	r3, #0
     918:	add.w	r2, r2, lr, lsl #2
     91c:	subs	r2, #4
     91e:	adds	r5, r0, r3
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     920:	adds	r3, #1
     922:	ldr.w	r1, [r6, #4]!
     926:	cmp	r3, r8
     928:	str.w	r1, [r2, #4]!
     92c:	blt.n	91e <compress(void*)+0x16e>

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
  int ret=1;
     92e:	movs	r0, #1
     930:	str	r5, [r4, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     932:	add	sp, #12
     934:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     938:	lsr.w	ip, r1, r2
     93c:	ldr.w	r2, [r5, r0, lsl #2]
          nx += MBIT;
          outData[kk] = (tempData[ii] << nx);
     940:	lsls	r1, r3
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     942:	orr.w	r2, ip, r2
     946:	str.w	r2, [r5, r0, lsl #2]
     94a:	mov	r0, r9
          nx += MBIT;
          outData[kk] = (tempData[ii] << nx);
     94c:	str.w	r1, [r5, r9, lsl #2]
     950:	b.n	8ca <compress(void*)+0x11a>

  if ((nout + ndat) <= NBLOCK)
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
  }
  else if ((nout + NH) > NBLOCK) //avoid partial header (special case)
     952:	cmp.w	lr, #122	; 0x7a
     956:	ble.n	9ba <compress(void*)+0x20a>
  {
      while(nout<NBLOCK) dout[nout++] = 0; // fill rest of block with zero
     958:	cmp.w	lr, #127	; 0x7f
     95c:	bgt.n	976 <compress(void*)+0x1c6>
     95e:	ldr	r3, [pc, #280]	; (a78 <compress(void*)+0x2c8>)
     960:	movs	r1, #0
     962:	add.w	r2, r3, lr, lsl #2
     966:	add.w	r3, r3, #512	; 0x200
     96a:	str.w	r1, [r2], #4
     96e:	cmp	r2, r3
     970:	bne.n	96a <compress(void*)+0x1ba>
     972:	movs	r3, #128	; 0x80
     974:	str	r3, [r4, #0]
      // store data
      if(!pushData(dout)) ret = 0;
     976:	ldr	r0, [pc, #256]	; (a78 <compress(void*)+0x2c8>)
     978:	bl	9c <pushData(unsigned long*)>

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
  int ret=1;
     97c:	adds	r0, #0
     97e:	ldr	r2, [pc, #252]	; (a7c <compress(void*)+0x2cc>)
      // store data
      if(!pushData(dout)) ret = 0;
      //
      // store data in next block
      nout=0;
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     980:	mov.w	r3, #0

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
  int ret=1;
     984:	it	ne
     986:	movne	r0, #1
      // store data
      if(!pushData(dout)) ret = 0;
      //
      // store data in next block
      nout=0;
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     988:	adds	r3, #1
     98a:	ldr.w	r1, [r6, #4]!
     98e:	cmp	r3, r8
     990:	str.w	r1, [r2, #4]!
     994:	blt.n	988 <compress(void*)+0x1d8>
     996:	mov	r3, r8
     998:	cmp	r3, #1
     99a:	it	lt
     99c:	movlt	r3, #1
     99e:	str	r3, [r4, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     9a0:	add	sp, #12
     9a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     9a6:	movs	r3, #97	; 0x61
     9a8:	mov.w	r8, #104	; 0x68
     9ac:	mvn.w	r5, #4278190080	; 0xff000000
     9b0:	movs	r4, #23
     9b2:	str	r3, [sp, #0]
     9b4:	movs	r3, #103	; 0x67
     9b6:	str	r3, [sp, #4]
     9b8:	b.n	840 <compress(void*)+0x90>
     9ba:	ldr	r7, [pc, #188]	; (a78 <compress(void*)+0x2c8>)
  { // data crosses two blocks
      int ii=0;
      int nr = NBLOCK-nout;  //remaining data
      uint32_t *iptr = (uint32_t *) outData;
      // correct header
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     9bc:	rsb	r2, lr, #122	; 0x7a
     9c0:	ldr	r1, [r5, #20]
     9c2:	add.w	r3, r7, lr, lsl #2
     9c6:	add.w	r0, r7, #508	; 0x1fc
     9ca:	orr.w	r1, r2, r1, lsl #16
     9ce:	subs	r3, #4
     9d0:	str	r1, [r5, #20]

      while (nout < NBLOCK) dout[nout++] = outData[ii++];
     9d2:	ldr.w	r2, [r6, #4]!
     9d6:	str.w	r2, [r3, #4]!
     9da:	cmp	r3, r0
     9dc:	bne.n	9d2 <compress(void*)+0x222>
     9de:	movs	r3, #128	; 0x80
      // store data
      if(!pushData(dout)) ret = 0;
     9e0:	ldr	r0, [pc, #148]	; (a78 <compress(void*)+0x2c8>)
     9e2:	rsb	r6, lr, r3
     9e6:	str	r3, [r4, #0]
     9e8:	bl	9c <pushData(unsigned long*)>
      //
      // store rest in next block
      nr=ndat0-ii; // for header
      // add blockHeader continuation
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     9ec:	ldr	r3, [sp, #4]
     9ee:	ldr	r2, [r5, #20]

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
  int ret=1;
     9f0:	adds	r0, #0
      if(!pushData(dout)) ret = 0;
      //
      // store rest in next block
      nr=ndat0-ii; // for header
      // add blockHeader continuation
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     9f2:	sub.w	r1, r3, r6
     9f6:	ldr	r3, [pc, #136]	; (a80 <compress(void*)+0x2d0>)
     9f8:	ldr.w	ip, [pc, #124]	; a78 <compress(void*)+0x2c8>

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
  int ret=1;
     9fc:	it	ne
     9fe:	movne	r0, #1
      if(!pushData(dout)) ret = 0;
      //
      // store rest in next block
      nr=ndat0-ii; // for header
      // add blockHeader continuation
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a00:	ands	r3, r2
     a02:	mov	r2, ip
     a04:	orrs	r1, r3
     a06:	str	r1, [r5, #20]
     a08:	ldr	r5, [pc, #96]	; (a6c <compress(void*)+0x2bc>)
     a0a:	mov	r3, r5
     a0c:	add.w	lr, r5, #24
      // copy first header
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a10:	ldr.w	r1, [r3], #4
     a14:	cmp	r3, lr
     a16:	str.w	r1, [r2], #4
     a1a:	bne.n	a10 <compress(void*)+0x260>
     a1c:	movs	r3, #6
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
     a1e:	cmp	r6, r8
     a20:	str	r3, [r4, #0]
     a22:	bge.n	932 <compress(void*)+0x182>
     a24:	add.w	r1, r8, #5
     a28:	add.w	r3, r5, r6, lsl #2
     a2c:	ldr	r2, [pc, #84]	; (a84 <compress(void*)+0x2d4>)
     a2e:	subs	r1, r1, r6
     a30:	subs	r3, #4
     a32:	add.w	r7, r7, r1, lsl #2
     a36:	ldr.w	r1, [r3, #4]!
     a3a:	str.w	r1, [r2, #4]!
     a3e:	cmp	r2, r7
     a40:	bne.n	a36 <compress(void*)+0x286>
     a42:	add.w	r8, r8, #6
     a46:	rsb	r3, r6, r8
     a4a:	str	r3, [r4, #0]
  }
  return ret;
}
     a4c:	add	sp, #12
     a4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a52:	nop
     a54:	.word	0x20002568
     a58:	.word	0x20018ba8
     a5c:	.word	0x2001861c
     a60:	.word	0x20018610
     a64:	.word	0x20017814
     a68:	.word	0x200175c0
     a6c:	.word	0x200175c4
     a70:	.word	0x20002584
     a74:	.word	0x20017b44
     a78:	.word	0x2001734c
     a7c:	.word	0x20017348
     a80:	.word	0xffff0000
     a84:	.word	0x20017360

00000a88 <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     a88:	ldr	r1, [pc, #168]	; (b34 <acq_isr()+0xac>)
    // need to remove data from the first half
      src = (int32_t *)&i2s_buffer[0];
    }

    #if NCH==1
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     a8a:	movs	r2, #0
  
    daddr = (uint32_t)(dma.TCD->DADDR);

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     a8c:	ldr	r3, [pc, #168]	; (b38 <acq_isr()+0xb0>)
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     a8e:	ldr	r0, [r1, #0]
  #if defined(AUDIO_INTERFACE)
    #include "mAudioIF.h"
  #endif

  static void acq_isr(void)
  {
     a90:	push	{r4, r5, r6, lr}
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     a92:	ldr	r6, [r0, #16]
     a94:	ldrb	r5, [r1, #4]
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
    {
      // DMA is receiving to the first half of the buffer
      // need to remove data from the second half
      src = (int32_t *)&i2s_buffer[NBUF_I2S];
     a96:	sub.w	r1, r3, #1024	; 0x400
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     a9a:	ldr	r4, [pc, #160]	; (b3c <acq_isr()+0xb4>)
     a9c:	ldr	r0, [pc, #160]	; (b40 <acq_isr()+0xb8>)
     a9e:	cmp	r6, r3
     aa0:	it	cc
     aa2:	movcc	r1, r3
     aa4:	strb	r5, [r4, #31]
     aa6:	ldrsh.w	r4, [r0]
    // need to remove data from the first half
      src = (int32_t *)&i2s_buffer[0];
    }

    #if NCH==1
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     aaa:	ldr.w	r0, [r1, r2, lsl #3]
     aae:	ldr	r3, [pc, #148]	; (b44 <acq_isr()+0xbc>)
     ab0:	add	r3, r0
     ab2:	asrs	r3, r4
     ab4:	str.w	r3, [r1, r2, lsl #3]
     ab8:	adds	r2, #1
     aba:	cmp	r2, #128	; 0x80
     abc:	bne.n	aaa <acq_isr()+0x22>
#endif

int32_t acqbias=0;
/***************************************************************************/
static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     abe:	ldr	r5, [pc, #136]	; (b48 <acq_isr()+0xc0>)

  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
     ac0:	movs	r3, #0
     ac2:	ldr	r2, [pc, #136]	; (b4c <acq_isr()+0xc4>)
#endif

int32_t acqbias=0;
/***************************************************************************/
static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     ac4:	ldr	r4, [r5, #0]
     ac6:	mov	r0, r2
     ac8:	adds	r4, #1
     aca:	str	r4, [r5, #0]

  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
     acc:	ldr.w	r4, [r1, r3, lsl #3]
     ad0:	adds	r3, #1
     ad2:	cmp	r3, #128	; 0x80
     ad4:	str.w	r4, [r0, #4]!
     ad8:	bne.n	acc <acq_isr()+0x44>
     ada:	ldr	r3, [pc, #116]	; (b50 <acq_isr()+0xc8>)
     adc:	vldr	s14, [pc, #116]	; b54 <acq_isr()+0xcc>
  
  float tmp=0.0f;
  for(int ii=0; ii<NBUF_ACQ; ii++) tmp +=(float)acqBuffer[ii];
     ae0:	ldr.w	r1, [r2, #4]!
     ae4:	vmov	s15, r1
     ae8:	cmp	r3, r2
     aea:	vcvt.f32.s32	s15, s15
     aee:	vadd.f32	s14, s14, s15
     af2:	bne.n	ae0 <acq_isr()+0x58>
  acqbias=(int32_t) (tmp/(float)NBUF_ACQ);
     af4:	vldr	s15, [pc, #96]	; b58 <acq_isr()+0xd0>

  if(proc==0)
     af8:	ldr	r3, [pc, #96]	; (b5c <acq_isr()+0xd4>)

  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
  
  float tmp=0.0f;
  for(int ii=0; ii<NBUF_ACQ; ii++) tmp +=(float)acqBuffer[ii];
  acqbias=(int32_t) (tmp/(float)NBUF_ACQ);
     afa:	vmul.f32	s14, s14, s15
     afe:	ldr	r2, [pc, #96]	; (b60 <acq_isr()+0xd8>)

  if(proc==0)
     b00:	ldrsh.w	r3, [r3]

  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
  
  float tmp=0.0f;
  for(int ii=0; ii<NBUF_ACQ; ii++) tmp +=(float)acqBuffer[ii];
  acqbias=(int32_t) (tmp/(float)NBUF_ACQ);
     b04:	vcvt.s32.f32	s14, s14
     b08:	vstr	s14, [r2]

  if(proc==0)
     b0c:	cbz	r3, b14 <acq_isr()+0x8c>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     b0e:	cmp	r3, #1
     b10:	beq.n	b28 <acq_isr()+0xa0>
     b12:	pop	{r4, r5, r6, pc}
  for(int ii=0; ii<NBUF_ACQ; ii++) tmp +=(float)acqBuffer[ii];
  acqbias=(int32_t) (tmp/(float)NBUF_ACQ);

  if(proc==0)
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     b14:	ldr	r0, [pc, #76]	; (b64 <acq_isr()+0xdc>)
     b16:	bl	9c <pushData(unsigned long*)>
     b1a:	cmp	r0, #0
     b1c:	bne.n	b12 <acq_isr()+0x8a>
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     b1e:	ldr	r2, [pc, #72]	; (b68 <acq_isr()+0xe0>)
     b20:	ldr	r3, [r2, #0]
     b22:	adds	r3, #1
     b24:	str	r3, [r2, #0]
     b26:	pop	{r4, r5, r6, pc}
     b28:	ldr	r0, [pc, #56]	; (b64 <acq_isr()+0xdc>)
     b2a:	bl	7b0 <compress(void*)>
     b2e:	cmp	r0, #0
     b30:	beq.n	b1e <acq_isr()+0x96>
     b32:	b.n	b12 <acq_isr()+0x8a>
     b34:	.word	0x20017344
     b38:	.word	0x200181f0
     b3c:	.word	0x400e8000
     b40:	.word	0x20002584
     b44:	.word	0x06978000
     b48:	.word	0x20018614
     b4c:	.word	0x20017b78
     b50:	.word	0x20017d78
     b54:	.word	0x00000000
     b58:	.word	0x3c000000
     b5c:	.word	0x20002582
     b60:	.word	0x20017d7c
     b64:	.word	0x20017b7c
     b68:	.word	0x20018618

00000b6c <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     b6c:	push	{r4, lr}
     b6e:	mov	r4, r0
		release();
     b70:	bl	b8d4 <DMAChannel::release()>
	}
     b74:	mov	r0, r4
     b76:	pop	{r4, pc}

00000b78 <set_audioClock(int, long, unsigned long)>:

  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     b78:	and.w	r0, r0, #63	; 0x3f
     b7c:	ldr	r3, [pc, #68]	; (bc4 <set_audioClock(int, long, unsigned long)+0x4c>)

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     b7e:	bic.w	r2, r2, #3758096384	; 0xe0000000
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     b82:	bic.w	r1, r1, #3758096384	; 0xe0000000

  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     b86:	orr.w	r0, r0, #1122304	; 0x112000

/*======================================================================================*/
#elif defined(__IMXRT1062__)

  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
     b8a:	push	{r4}
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     b8c:	str	r0, [r3, #112]	; 0x70

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     b8e:	mov	r4, r3
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     b90:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     b94:	str.w	r2, [r3, #144]	; 0x90
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     b98:	ldr	r2, [r3, #112]	; 0x70
     b9a:	bic.w	r2, r2, #4096	; 0x1000
     b9e:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     ba0:	ldr	r3, [r4, #112]	; 0x70
     ba2:	ldr	r2, [pc, #32]	; (bc4 <set_audioClock(int, long, unsigned long)+0x4c>)
     ba4:	cmp	r3, #0
     ba6:	bge.n	ba0 <set_audioClock(int, long, unsigned long)+0x28>
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     ba8:	ldr.w	r1, [r2, #368]	; 0x170
     bac:	ldr	r3, [pc, #24]	; (bc8 <set_audioClock(int, long, unsigned long)+0x50>)
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
  }
     bae:	ldr.w	r4, [sp], #4
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bb2:	ands	r3, r1
     bb4:	str.w	r3, [r2, #368]	; 0x170
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     bb8:	ldr	r3, [r2, #112]	; 0x70
     bba:	bic.w	r3, r3, #65536	; 0x10000
     bbe:	str	r3, [r2, #112]	; 0x70
  }
     bc0:	bx	lr
     bc2:	nop
     bc4:	.word	0x400d8000
     bc8:	.word	0xff7f7fff
     bcc:	.word	0x00000000

00000bd0 <setAudioFrequency(int)>:
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     bd0:	vmov	s15, r0

  void setAudioFrequency(int fs)
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     bd4:	lsls	r0, r0, #10

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     bd6:	vmov.f64	d4, #16	; 0x40800000  4.0
    int c0 = C;
    int c2 = 10000;
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);
     bda:	movw	r1, #10000	; 0x2710
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     bde:	vcvt.f64.s32	d5, s15
    int c0 = C;
    int c2 = 10000;
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);
     be2:	mov	r2, r1
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     be4:	vldr	d6, [pc, #128]	; c68 <setAudioFrequency(int)+0x98>
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
  }

  void setAudioFrequency(int fs)
  {
     be8:	push	{r3, r4, r5, lr}
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     bea:	ldr	r3, [pc, #148]	; (c80 <setAudioFrequency(int)+0xb0>)

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     bec:	vmul.f64	d6, d5, d6
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    // Select MCLK
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     bf0:	ldr	r5, [pc, #144]	; (c84 <setAudioFrequency(int)+0xb4>)

  void setAudioFrequency(int fs)
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     bf2:	sdiv	r4, r3, r0

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     bf6:	adds	r3, r4, #1
     bf8:	vmul.f64	d6, d6, d4
      // clear SAI1_CLK register locations
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     bfc:	and.w	r4, r4, #63	; 0x3f
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     c00:	vmov	s14, r3
     c04:	vcvt.f64.s32	d5, s14
     c08:	vldr	d3, [pc, #100]	; c70 <setAudioFrequency(int)+0xa0>
     c0c:	vmul.f64	d7, d6, d5
    int c0 = C;
    int c2 = 10000;
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);
     c10:	vldr	d4, [pc, #100]	; c78 <setAudioFrequency(int)+0xa8>
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     c14:	vdiv.f64	d6, d7, d3
    int c0 = C;
     c18:	vcvt.s32.f64	s15, d6
     c1c:	vmov	r0, s15
    int c2 = 10000;
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);
     c20:	mul.w	r3, r1, r0
     c24:	vmov	s14, r3
     c28:	vcvt.f64.s32	d7, s14
     c2c:	vfnms.f64	d7, d6, d4
     c30:	vcvt.s32.f64	s15, d7
     c34:	vmov	r1, s15
     c38:	bl	b78 <set_audioClock(int, long, unsigned long)>

      // clear SAI1_CLK register locations
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     c3c:	ldr	r0, [pc, #72]	; (c88 <setAudioFrequency(int)+0xb8>)
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     c3e:	ldr	r2, [pc, #76]	; (c8c <setAudioFrequency(int)+0xbc>)
    int c2 = 10000;
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);

      // clear SAI1_CLK register locations
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     c40:	ldr	r1, [r0, #28]
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    // Select MCLK
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
      & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     c42:	ldr	r3, [pc, #76]	; (c90 <setAudioFrequency(int)+0xc0>)
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);

      // clear SAI1_CLK register locations
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     c44:	bic.w	r1, r1, #3072	; 0xc00
     c48:	orr.w	r1, r1, #2048	; 0x800
     c4c:	str	r1, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     c4e:	ldr	r1, [r0, #40]	; 0x28
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     c50:	ands	r2, r1
     c52:	orr.w	r2, r2, #192	; 0xc0
     c56:	orrs	r4, r2
     c58:	str	r4, [r0, #40]	; 0x28
    // Select MCLK
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     c5a:	ldr	r2, [r5, #4]
      & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     c5c:	ands	r3, r2
     c5e:	orr.w	r3, r3, #524288	; 0x80000
     c62:	str	r3, [r5, #4]
     c64:	pop	{r3, r4, r5, pc}
     c66:	nop
     c68:	.word	0x00000000
     c6c:	.word	0x40700000
     c70:	.word	0x00000000
     c74:	.word	0x4176e360
     c78:	.word	0x00000000
     c7c:	.word	0x40c38800
     c80:	.word	0x269fb200
     c84:	.word	0x400ac000
     c88:	.word	0x400fc000
     c8c:	.word	0xfffffe00
     c90:	.word	0xfff7fff8

00000c94 <i2s_setup()>:

  }

  void i2s_setup(void)
  {
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c94:	ldr	r2, [pc, #104]	; (d00 <i2s_setup()+0x6c>)
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

  }

  void i2s_setup(void)
  {
     c96:	push	{r3, r4, r5, r6, r7, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c98:	ldr	r3, [r2, #124]	; 0x7c

    // if receiver is enabled, do nothing
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     c9a:	ldr	r4, [pc, #104]	; (d04 <i2s_setup()+0x70>)

  }

  void i2s_setup(void)
  {
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c9c:	orr.w	r3, r3, #786432	; 0xc0000
     ca0:	str	r3, [r2, #124]	; 0x7c

    // if receiver is enabled, do nothing
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     ca2:	ldr.w	r3, [r4, #136]	; 0x88
     ca6:	cmp	r3, #0
     ca8:	blt.n	cfe <i2s_setup()+0x6a>
  //PLL:
    int fs = fsamp;
     caa:	ldr	r3, [pc, #92]	; (d08 <i2s_setup()+0x74>)
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

    I2S1_RMR = 0;
     cac:	movs	r7, #0
    //I2S1_RCSR = (1<<25); //Reset
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     cae:	movs	r6, #1
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
              | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
     cb0:	ldr	r5, [pc, #88]	; (d0c <i2s_setup()+0x78>)
    // if receiver is enabled, do nothing
    if (I2S1_RCSR & I2S_RCSR_RE) return;
  //PLL:
    int fs = fsamp;
  
    setAudioFrequency(fs);
     cb2:	ldr	r0, [r3, #0]
     cb4:	bl	bd0 <setAudioFrequency(int)>

    CORE_PIN23_CONFIG = 3;  //1:MCLK
     cb8:	ldr	r3, [pc, #84]	; (d10 <i2s_setup()+0x7c>)
     cba:	movs	r2, #3
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     cbc:	ldr.w	lr, [pc, #96]	; d20 <i2s_setup()+0x8c>
     cc0:	mov.w	ip, #2
    I2S1_RMR = 0;
    //I2S1_RCSR = (1<<25); //Reset
    I2S1_RCR1 = I2S_RCR1_RFW(1);
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
              | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
    I2S1_RCR3 = I2S_RCR3_RCE;
     cc4:	mov.w	r0, #65536	; 0x10000
  //PLL:
    int fs = fsamp;
  
    setAudioFrequency(fs);

    CORE_PIN23_CONFIG = 3;  //1:MCLK
     cc8:	str.w	r2, [r3, #288]	; 0x120
    I2S1_RCR1 = I2S_RCR1_RFW(1);
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
              | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
    I2S1_RCR3 = I2S_RCR3_RCE;
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
          | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
     ccc:	ldr	r1, [pc, #68]	; (d14 <i2s_setup()+0x80>)
    int fs = fsamp;
  
    setAudioFrequency(fs);

    CORE_PIN23_CONFIG = 3;  //1:MCLK
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     cce:	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     cd2:	str.w	r2, [r3, #292]	; 0x124

  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     cd6:	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
              | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
    I2S1_RCR3 = I2S_RCR3_RCE;
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
          | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     cda:	ldr	r2, [pc, #60]	; (d18 <i2s_setup()+0x84>)

    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     cdc:	ldr	r3, [pc, #60]	; (d1c <i2s_setup()+0x88>)
    CORE_PIN23_CONFIG = 3;  //1:MCLK
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     cde:	str.w	ip, [lr, #404]	; 0x194

    I2S1_RMR = 0;
     ce2:	str.w	r7, [r4, #224]	; 0xe0
    //I2S1_RCSR = (1<<25); //Reset
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     ce6:	str.w	r6, [r4, #140]	; 0x8c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
              | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
     cea:	str.w	r5, [r4, #144]	; 0x90
    I2S1_RCR3 = I2S_RCR3_RCE;
     cee:	str.w	r0, [r4, #148]	; 0x94
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
          | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
     cf2:	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     cf6:	str.w	r2, [r4, #156]	; 0x9c

    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     cfa:	str.w	r3, [r4, #136]	; 0x88
     cfe:	pop	{r3, r4, r5, r6, r7, pc}
     d00:	.word	0x400fc000
     d04:	.word	0x40384000
     d08:	.word	0x20002520
     d0c:	.word	0x07000001
     d10:	.word	0x401f8000
     d14:	.word	0x00011f1b
     d18:	.word	0x1f1f1f00
     d1c:	.word	0x92000001
     d20:	.word	0x401f8400

00000d24 <dma_setup()>:
  static DMAChannel dma;
  uint32_t i2s_buffer[2*NBUF_I2S];
  static void acq_isr(void);

  void dma_setup(void)
  {
     d24:	push	{r3, r4, r5, r6, r7, lr}
    dma.begin(true); // Allocate the DMA channel first
     d26:	ldr	r4, [pc, #124]	; (da4 <dma_setup()+0x80>)
     d28:	movs	r1, #1

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     d2a:	ldr	r5, [pc, #124]	; (da8 <dma_setup()+0x84>)
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     d2c:	movs	r6, #4
  uint32_t i2s_buffer[2*NBUF_I2S];
  static void acq_isr(void);

  void dma_setup(void)
  {
    dma.begin(true); // Allocate the DMA channel first
     d2e:	mov	r0, r4
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d30:	movs	r7, #96	; 0x60
     d32:	bl	b834 <DMAChannel::begin(bool)>

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     d36:	ldr	r3, [r4, #0]
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     d38:	mov.w	r2, #512	; 0x200
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
     d3c:	ldr	r0, [pc, #108]	; (dac <dma_setup()+0x88>)

  void dma_setup(void)
  {
    dma.begin(true); // Allocate the DMA channel first

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     d3e:	str	r5, [r3, #0]
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
     d40:	movw	r5, #514	; 0x202
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
     d44:	str	r0, [r3, #16]
  void dma_setup(void)
  {
    dma.begin(true); // Allocate the DMA channel first

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
     d46:	movs	r1, #0
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     d48:	strh	r2, [r3, #22]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     d4a:	mov.w	lr, #6
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     d4e:	ldrh	r0, [r3, #22]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d50:	movs	r2, #1
  {
    dma.begin(true); // Allocate the DMA channel first

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
     d52:	strh	r5, [r3, #6]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     d54:	subw	r5, r5, #2562	; 0xa02
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     d58:	uxth	r0, r0
  void dma_setup(void)
  {
    dma.begin(true); // Allocate the DMA channel first

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
     d5a:	strh	r1, [r3, #4]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     d5c:	str	r5, [r3, #24]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     d5e:	strh	r0, [r3, #30]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     d60:	ldrb	r5, [r4, #4]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     d62:	strh.w	lr, [r3, #28]
     d66:	ldr	r0, [pc, #72]	; (db0 <dma_setup()+0x8c>)
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     d68:	ldr.w	lr, [pc, #92]	; dc8 <dma_setup()+0xa4>

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
     d6c:	str	r1, [r3, #12]
    dma.begin(true); // Allocate the DMA channel first

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     d6e:	str	r6, [r3, #8]
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
     d70:	strh	r6, [r3, #20]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
     d72:	str.w	r1, [r0, r5, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     d76:	str.w	lr, [r0, r5, lsl #2]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d7a:	ldrb	r3, [r4, #4]
     d7c:	ldr	r1, [pc, #52]	; (db4 <dma_setup()+0x90>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d7e:	and.w	r0, r3, #31
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d82:	add.w	r5, r3, #16
     d86:	ldr	r6, [pc, #48]	; (db8 <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d88:	asrs	r3, r3, #5
     d8a:	lsls	r2, r0
     d8c:	ldr	r0, [pc, #44]	; (dbc <dma_setup()+0x98>)
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d8e:	str.w	r6, [r1, r5, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d92:	str.w	r2, [r0, r3, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d96:	ldr	r1, [pc, #40]	; (dc0 <dma_setup()+0x9c>)
     d98:	ldrb	r2, [r4, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     d9a:	ldr	r3, [pc, #40]	; (dc4 <dma_setup()+0xa0>)
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d9c:	strb	r7, [r2, r1]
     d9e:	ldrb	r2, [r4, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     da0:	strb	r2, [r3, #27]
     da2:	pop	{r3, r4, r5, r6, r7, pc}
     da4:	.word	0x20017344
     da8:	.word	0x403840a0
     dac:	.word	0x20017df0
     db0:	.word	0x400ec000
     db4:	.word	0x20002800
     db8:	.word	0x00000a89
     dbc:	.word	0xe000e100
     dc0:	.word	0xe000e400
     dc4:	.word	0x400e8000
     dc8:	.word	0x80000013

00000dcc <acqModifyFrequency(unsigned long)>:
      putAudio(src);
    #endif
  }

  void acqModifyFrequency(uint32_t fsamp)
  {
     dcc:	push	{r4, lr}
    // stop I2S
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     dce:	ldr	r4, [pc, #32]	; (df0 <acqModifyFrequency(unsigned long)+0x24>)
     dd0:	ldr.w	r3, [r4, #136]	; 0x88
     dd4:	bic.w	r3, r3, #2415919104	; 0x90000000
     dd8:	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     ddc:	bl	bd0 <setAudioFrequency(int)>
    //restart I2S
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     de0:	ldr.w	r3, [r4, #136]	; 0x88
     de4:	orr.w	r3, r3, #2415919104	; 0x90000000
     de8:	str.w	r3, [r4, #136]	; 0x88
     dec:	pop	{r4, pc}
     dee:	nop
     df0:	.word	0x40384000

00000df4 <_GLOBAL__sub_I_procCount>:
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
  }
}
     df4:	push	{r4, lr}
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
     df6:	ldr	r4, [pc, #24]	; (e10 <_GLOBAL__sub_I_procCount+0x1c>)
     df8:	movs	r1, #0
     dfa:	mov	r0, r4
     dfc:	bl	b834 <DMAChannel::begin(bool)>
  }

  /***************************************************************************/
  #include "DMAChannel.h"

  static DMAChannel dma;
     e00:	mov	r0, r4
     e02:	ldr	r2, [pc, #16]	; (e14 <_GLOBAL__sub_I_procCount+0x20>)
     e04:	ldr	r1, [pc, #16]	; (e18 <_GLOBAL__sub_I_procCount+0x24>)
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
  }
}
     e06:	ldmia.w	sp!, {r4, lr}
  }

  /***************************************************************************/
  #include "DMAChannel.h"

  static DMAChannel dma;
     e0a:	b.w	bcfc <__aeabi_atexit>
     e0e:	nop
     e10:	.word	0x20017344
     e14:	.word	0x20001f18
     e18:	.word	0x00000b6d

00000e1c <Print::availableForWrite()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     e1c:	movs	r0, #0
     e1e:	bx	lr

00000e20 <Print::flush()>:
	virtual void flush()				{ }
     e20:	bx	lr
     e22:	nop

00000e24 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
     e24:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     e28:	ldr.w	r8, [sp, #32]
     e2c:	ldr	r7, [sp, #36]	; 0x24
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
     e2e:	cbz	r3, e5e <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3a>
     e30:	mov	r6, r2
     e32:	mov	r4, r1
     e34:	mov	r5, r0
     e36:	add.w	r9, r3, r1
     e3a:	b.n	e46 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x22>
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
     e3c:	mov	r0, r4
     e3e:	adds	r4, #1
     e40:	blx	r8
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
     e42:	cmp	r4, r9
     e44:	beq.n	e5e <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3a>
       if (!readSector(sector + i, dst)) return false;
     e46:	ldr	r3, [r5, #0]
     e48:	mov	r2, r6
     e4a:	mov	r1, r4
     e4c:	mov	r0, r5
     e4e:	ldr	r3, [r3, #16]
     e50:	blx	r3
       callback(sector + i, dst, context);
     e52:	mov	r2, r7
     e54:	mov	r1, r6
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
       if (!readSector(sector + i, dst)) return false;
     e56:	cmp	r0, #0
     e58:	bne.n	e3c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x18>
       callback(sector + i, dst, context);
     }
     return true;
  }
     e5a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
     }
     return true;
     e5e:	movs	r0, #1
     e60:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00000e64 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
     e64:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     e68:	ldr.w	r8, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
     e6c:	cbz	r2, e9a <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x36>
     e6e:	mov	r7, r3
     e70:	mov	r4, r1
     e72:	mov	r5, r0
     e74:	add.w	r9, r2, r1
     e78:	b.n	e7e <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x1a>
     e7a:	cmp	r4, r9
     e7c:	beq.n	e9a <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x36>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
     e7e:	ldr	r3, [r5, #0]
     e80:	mov	r1, r8
     e82:	mov	r0, r4
     e84:	ldr	r6, [r3, #36]	; 0x24
     e86:	blx	r7
     e88:	mov	r1, r4
     e8a:	mov	r2, r0
     e8c:	mov	r0, r5
     e8e:	adds	r4, #1
     e90:	blx	r6
     e92:	cmp	r0, #0
     e94:	bne.n	e7a <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x16>
     }
    return true;
  }
     e96:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
     }
    return true;
     e9a:	movs	r0, #1
     e9c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00000ea0 <SdCardInterface::hasDedicatedSpi()>:
  /** \return error data. */
  virtual uint32_t errorData() const = 0;
  /** \return true if card is busy. */
  virtual bool isBusy() = 0;
  /** \return false by default */
  virtual bool hasDedicatedSpi() {return false;}
     ea0:	movs	r0, #0
     ea2:	bx	lr

00000ea4 <SdCardInterface::isDedicatedSpi()>:
  /** \return false by default */
  bool virtual isDedicatedSpi() {return false;}
     ea4:	movs	r0, #0
     ea6:	bx	lr

00000ea8 <SdCardInterface::setDedicatedSpi(bool)>:
   * \return false by default.
   */
  virtual bool setDedicatedSpi(bool value) {
    (void)value;
    return false;
  }
     ea8:	movs	r0, #0
     eaa:	bx	lr

00000eac <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     eac:	mov.w	r0, #4294967295
     eb0:	bx	lr
     eb2:	nop

00000eb4 <SdFs::~SdFs()>:
//------------------------------------------------------------------------------
/**
 * \class SdFs
 * \brief SD file system class for FAT16, FAT32, and exFAT volumes.
 */
class SdFs : public SdBase<FsVolume, FsFormatter> {
     eb4:	bx	lr
     eb6:	nop

00000eb8 <FsFile::~FsFile()>:
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     eb8:	ldr	r3, [pc, #16]	; (ecc <FsFile::~FsFile()+0x14>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     eba:	push	{r4, lr}
     ebc:	mov	r4, r0
     ebe:	str.w	r3, [r0], #16
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     ec2:	bl	79ac <FsBaseFile::close()>
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     ec6:	mov	r0, r4
     ec8:	pop	{r4, pc}
     eca:	nop
     ecc:	.word	0x20000620

00000ed0 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     ed0:	ldr	r3, [r0, #72]	; 0x48
     ed2:	push	{lr}
     ed4:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     ed6:	cbz	r3, ef2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     ed8:	mov	r0, r3
     eda:	movs	r2, #1
     edc:	add.w	r1, sp, #7
     ee0:	bl	610c <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     ee4:	cmp	r0, #1
     ee6:	bne.n	f02 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     ee8:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     eec:	add	sp, #12
     eee:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     ef2:	ldr	r0, [r0, #76]	; 0x4c
     ef4:	cbz	r0, f02 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     ef6:	movs	r2, #1
     ef8:	add.w	r1, sp, #7
     efc:	bl	3c9c <ExFatFile::read(void*, unsigned int)>
     f00:	b.n	ee4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     f02:	mov.w	r0, #4294967295
     f06:	b.n	eec <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000f08 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     f08:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     f0a:	cbz	r3, f12 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     f0c:	mov	r0, r3
     f0e:	b.w	62a8 <FatFile::peek()>
     f12:	ldr	r0, [r0, #76]	; 0x4c
     f14:	cbz	r0, f1a <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     f16:	b.w	3e50 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     f1a:	mov.w	r0, #4294967295
     f1e:	bx	lr

00000f20 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     f20:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     f22:	cbz	r2, f3e <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     f24:	ldrb	r3, [r2, #0]
     f26:	and.w	r3, r3, #8
     f2a:	and.w	r0, r3, #255	; 0xff
     f2e:	cbz	r3, f74 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     f30:	ldr	r3, [r2, #28]
     f32:	ldr	r0, [r2, #20]
     f34:	subs	r0, r3, r0
     f36:	it	mi
     f38:	mvnmi.w	r0, #2147483648	; 0x80000000
     f3c:	bx	lr
     f3e:	ldr	r1, [r0, #76]	; 0x4c
     f40:	cbz	r1, f76 <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     f42:	ldrb.w	r3, [r1, #49]	; 0x31
     f46:	and.w	r3, r3, #8
     f4a:	and.w	r0, r3, #255	; 0xff
     f4e:	cbz	r3, f74 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
     f50:	ldrd	r2, r3, [r1, #16]
     f54:	ldrd	r0, r1, [r1]
     f58:	push	{r4, r5}
     f5a:	subs	r0, r2, r0
     f5c:	mov.w	r5, #0
     f60:	mvn.w	r4, #2147483648	; 0x80000000
     f64:	sbc.w	r1, r3, r1
     f68:	cmp	r5, r1
     f6a:	it	eq
     f6c:	cmpeq	r4, r0
     f6e:	bcs.n	f72 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     f70:	mov	r0, r4
    return BaseFile::available();
  }
     f72:	pop	{r4, r5}
     f74:	bx	lr
     f76:	mov	r0, r1
     f78:	bx	lr
     f7a:	nop

00000f7c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     f7c:	ldr	r3, [r0, #72]	; 0x48
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     f7e:	cbz	r3, f86 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     f80:	mov	r0, r3
     f82:	b.w	68e4 <FatFile::write(void const*, unsigned int)>
     f86:	ldr	r0, [r0, #76]	; 0x4c
     f88:	cbz	r0, f8e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     f8a:	b.w	51c8 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     f8e:	bx	lr

00000f90 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     f90:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     f92:	cbz	r3, f9a <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     f94:	mov	r0, r3
     f96:	b.w	6788 <FatFile::sync()>
     f9a:	ldr	r0, [r0, #76]	; 0x4c
     f9c:	cbz	r0, fa2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     f9e:	b.w	4c60 <ExFatFile::sync()>
     fa2:	bx	lr

00000fa4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     fa4:	push	{lr}
     fa6:	ldr	r3, [r0, #72]	; 0x48
     fa8:	sub	sp, #12
     faa:	strb.w	r1, [sp, #7]
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     fae:	cbz	r3, fc2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     fb0:	mov	r0, r3
     fb2:	movs	r2, #1
     fb4:	add.w	r1, sp, #7
     fb8:	bl	68e4 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     fbc:	add	sp, #12
     fbe:	ldr.w	pc, [sp], #4
     fc2:	ldr	r0, [r0, #76]	; 0x4c
     fc4:	cmp	r0, #0
     fc6:	beq.n	fbc <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     fc8:	movs	r2, #1
     fca:	add.w	r1, sp, #7
     fce:	bl	51c8 <ExFatFile::write(void const*, unsigned int)>
     fd2:	add	sp, #12
     fd4:	ldr.w	pc, [sp], #4

00000fd8 <filing_init()>:
    *time = FS_TIME(t.hour,t.min,t.sec);
    *ms10 = 0;
}

int16_t filing_init(void)
{
     fd8:	push	{r3, r4, r5, r6, r7, lr}
    FsDateTime::callback = dateTime;

    flash_get_unique_id((uint8_t *) UniqueID);
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     fda:	ldr	r3, [pc, #140]	; (1068 <filing_init()+0x90>)
     fdc:	movs	r4, #5
     fde:	ldr	r5, [pc, #140]	; (106c <filing_init()+0x94>)
     fe0:	ldr.w	r3, [r3, #544]	; 0x220
     fe4:	ldr	r2, [pc, #136]	; (1070 <filing_init()+0x98>)
     fe6:	add.w	r6, r5, #1168	; 0x490
     fea:	bic.w	r3, r3, #4278190080	; 0xff000000
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
     fee:	mov	r7, r5
     ff0:	str	r3, [r2, #0]
    sdioConfigBackup = sdioConfig;
     ff2:	movs	r3, #0
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
     ff4:	movs	r2, #255	; 0xff
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     ff6:	ldr	r0, [pc, #124]	; (1074 <filing_init()+0x9c>)
     ff8:	mov	r1, r3
    sdioConfigBackup = sdioConfig;
     ffa:	strb.w	r3, [r5, #1224]	; 0x4c8
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
     ffe:	strb.w	r2, [r5, #1212]	; 0x4bc
    1002:	bl	90f4 <SdioCard::begin(SdioConfig)>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    return m_card && !m_card->errorCode();
    1006:	ldr	r0, [pc, #108]	; (1074 <filing_init()+0x9c>)
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    1008:	str.w	r6, [r5, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    100c:	bl	87f4 <SdioCard::errorCode() const>
    1010:	cbz	r0, 103c <filing_init()+0x64>
    1012:	movs	r1, #15
    1014:	ldr	r0, [pc, #96]	; (1078 <filing_init()+0xa0>)
    1016:	bl	a0b0 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    101a:	ldr	r0, [pc, #96]	; (107c <filing_init()+0xa4>)
    101c:	bl	ba34 <Print::println()>
      haveStore=1;
      return 1;
    }
    else
    { Serial.println("still trying..."); 
      delay(100);
    1020:	movs	r0, #100	; 0x64
    1022:	bl	ad94 <delay>
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
  #endif

  for(int ii=0; ii<5;ii++)
    1026:	subs	r4, #1
    1028:	bne.n	ff2 <filing_init()+0x1a>
    102a:	movs	r1, #27
    102c:	ldr	r0, [pc, #80]	; (1080 <filing_init()+0xa8>)
    102e:	bl	a0b0 <usb_serial_write>
    1032:	ldr	r0, [pc, #72]	; (107c <filing_init()+0xa4>)
    1034:	bl	ba34 <Print::println()>
    }
  }

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
    1038:	mov	r0, r4
    103a:	pop	{r3, r4, r5, r6, r7, pc}
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
    sdioConfigBackup = sdioConfig;
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    103c:	movs	r3, #1
    103e:	ldr.w	r1, [r7, #1164]	; 0x48c
    1042:	ldr	r0, [pc, #40]	; (106c <filing_init()+0x94>)
    1044:	mov	r2, r3
    1046:	bl	7b3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    104a:	cmp	r0, #0
    104c:	beq.n	1012 <filing_init()+0x3a>
    104e:	movs	r1, #17
    1050:	ldr	r0, [pc, #48]	; (1084 <filing_init()+0xac>)
    1052:	bl	a0b0 <usb_serial_write>
    1056:	ldr	r0, [pc, #36]	; (107c <filing_init()+0xa4>)
    1058:	bl	ba34 <Print::println()>

  for(int ii=0; ii<5;ii++)
  {
    if (sd.begin(SD_CONFIG)) 
    { Serial.println("card initialized.");
      haveStore=1;
    105c:	movs	r3, #1
    105e:	ldr	r2, [pc, #40]	; (1088 <filing_init()+0xb0>)
      return 1;
    1060:	mov	r0, r3

  for(int ii=0; ii<5;ii++)
  {
    if (sd.begin(SD_CONFIG)) 
    { Serial.println("card initialized.");
      haveStore=1;
    1062:	str	r3, [r2, #0]
  }

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
}
    1064:	pop	{r3, r4, r5, r6, r7, pc}
    1066:	nop
    1068:	.word	0x401f4400
    106c:	.word	0x200186cc
    1070:	.word	0x20006138
    1074:	.word	0x20018b5c
    1078:	.word	0x20000ed8
    107c:	.word	0x20001f78
    1080:	.word	0x20000ee8
    1084:	.word	0x20000f04
    1088:	.word	0x20017de8

0000108c <makeHeader(long*)>:


int16_t makeHeader(int32_t *header)
{
    108c:	push	{r4, r5, r6, r7, lr}
    108e:	sub	sp, #36	; 0x24
    1090:	mov	r4, r0
     * @param header is pointer to header
     * 
     */
    #define MAGIC "WMXZ"
    datetime_t t;
    rtc_get_datetime(&t);
    1092:	add	r0, sp, #24
    1094:	bl	73c <rtc_get_datetime(datetime_t*)>

    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);
    1098:	ldrsb.w	r7, [sp, #31]
    109c:	ldrsb.w	r6, [sp, #30]
    10a0:	mov	r0, r4
    10a2:	ldrsb.w	r5, [sp, #29]
    10a6:	ldrsb.w	r1, [sp, #27]
    10aa:	ldrsb.w	r2, [sp, #26]
    10ae:	ldrsh.w	r3, [sp, #24]
    10b2:	str	r7, [sp, #16]
    10b4:	str	r6, [sp, #12]
    10b6:	str	r5, [sp, #8]
    10b8:	str	r1, [sp, #4]
    10ba:	str	r2, [sp, #0]
    10bc:	ldr	r1, [pc, #76]	; (110c <makeHeader(long*)+0x80>)
    10be:	ldr	r2, [pc, #80]	; (1110 <makeHeader(long*)+0x84>)
    10c0:	bl	cd14 <sprintf>

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    10c4:	ldr	r1, [pc, #76]	; (1114 <makeHeader(long*)+0x88>)
    header[7] = fsamp;
    10c6:	ldr	r0, [pc, #80]	; (1118 <makeHeader(long*)+0x8c>)
    header[8] = NCH;
    10c8:	movs	r3, #1

    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    10ca:	ldr	r1, [r1, #0]
    rtc_get_datetime(&t);

    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    10cc:	mov.w	ip, #20
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    10d0:	ldr	r7, [pc, #72]	; (111c <makeHeader(long*)+0x90>)
    header[10] = t_on;
    header[11] = t_off;
    header[12] = proc;
    header[13] = shift;

    header[127]=0x55555555;
    10d2:	mov.w	r2, #1431655765	; 0x55555555
    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    header[10] = t_on;
    10d6:	ldr	r6, [pc, #72]	; (1120 <makeHeader(long*)+0x94>)
    header[11] = t_off;
    10d8:	ldr	r5, [pc, #72]	; (1124 <makeHeader(long*)+0x98>)

    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    10da:	str	r1, [r4, #24]
    header[7] = fsamp;
    10dc:	ldr	r1, [r0, #0]
    header[8] = NCH;
    header[9] = t_acq;
    10de:	ldr	r0, [r7, #0]
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    10e0:	str	r1, [r4, #28]
    header[8] = NCH;
    header[9] = t_acq;
    header[10] = t_on;
    10e2:	ldr	r7, [r6, #0]
    header[11] = t_off;
    header[12] = proc;
    header[13] = shift;
    10e4:	ldr	r1, [pc, #64]	; (1128 <makeHeader(long*)+0x9c>)
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    header[10] = t_on;
    header[11] = t_off;
    10e6:	ldr	r6, [r5, #0]
    header[12] = proc;
    10e8:	ldr	r5, [pc, #64]	; (112c <makeHeader(long*)+0xa0>)
    header[13] = shift;
    10ea:	ldrsh.w	r1, [r1]
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    header[10] = t_on;
    header[11] = t_off;
    header[12] = proc;
    10ee:	ldrsh.w	r5, [r5]

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    10f2:	str	r0, [r4, #36]	; 0x24
    header[12] = proc;
    header[13] = shift;

    header[127]=0x55555555;
    return 1;
}
    10f4:	mov	r0, r3
    rtc_get_datetime(&t);

    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    10f6:	str.w	ip, [r4, #20]
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    header[10] = t_on;
    10fa:	str	r7, [r4, #40]	; 0x28
    header[11] = t_off;
    10fc:	str	r6, [r4, #44]	; 0x2c
    header[12] = proc;
    10fe:	str	r5, [r4, #48]	; 0x30
    header[13] = shift;
    1100:	str	r1, [r4, #52]	; 0x34

    header[127]=0x55555555;
    1102:	str.w	r2, [r4, #508]	; 0x1fc
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    1106:	str	r3, [r4, #32]
    header[12] = proc;
    header[13] = shift;

    header[127]=0x55555555;
    return 1;
}
    1108:	add	sp, #36	; 0x24
    110a:	pop	{r4, r5, r6, r7, pc}
    110c:	.word	0x20000f20
    1110:	.word	0x20000f18
    1114:	.word	0x20006138
    1118:	.word	0x20002520
    111c:	.word	0x20002560
    1120:	.word	0x20002564
    1124:	.word	0x20018ba0
    1128:	.word	0x20002584
    112c:	.word	0x20002582

00001130 <checkEndOfFile(short)>:

int16_t checkEndOfFile(int16_t status)
{ static volatile uint32_t tx_=0;
    1130:	push	{r4, lr}
    1132:	mov	r4, r0
  uint32_t tx=rtc_get();
    1134:	bl	b088 <rtc_get>
  tx = tx % t_acq;
    1138:	ldr	r3, [pc, #32]	; (115c <checkEndOfFile(short)+0x2c>)
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    113a:	cmp	r4, #1
}

int16_t checkEndOfFile(int16_t status)
{ static volatile uint32_t tx_=0;
  uint32_t tx=rtc_get();
  tx = tx % t_acq;
    113c:	ldr	r3, [r3, #0]
    113e:	udiv	r2, r0, r3
    1142:	mls	r0, r2, r3, r0
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    1146:	ldr	r3, [pc, #24]	; (1160 <checkEndOfFile(short)+0x30>)
    1148:	ble.n	1156 <checkEndOfFile(short)+0x26>
    114a:	ldr	r2, [r3, #0]
    114c:	cbz	r2, 1156 <checkEndOfFile(short)+0x26>
    114e:	ldr	r2, [r3, #0]
    1150:	cmp	r0, r2
    1152:	it	cc
    1154:	movcc	r4, #3
  tx_=tx;
    1156:	str	r0, [r3, #0]
  return status;  
}
    1158:	mov	r0, r4
    115a:	pop	{r4, pc}
    115c:	.word	0x20002560
    1160:	.word	0x20017b34

00001164 <newDirectory(char*)>:
  ho=h;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
    1164:	push	{r4, r5, r6, r7, lr}
    1166:	sub	sp, #28
    return 0;
}

uint16_t newHour(int h)
{ static int ho=0;
  if(h==ho) return 0;
    1168:	ldr	r6, [pc, #92]	; (11c8 <newDirectory(char*)+0x64>)
  ho=h;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
    116a:	mov	r5, r0
    datetime_t t;
    rtc_get_datetime(&t);
    116c:	add	r0, sp, #16
    116e:	bl	73c <rtc_get_datetime(datetime_t*)>

    if(newHour(t.hour))
    1172:	ldrsb.w	r4, [sp, #21]
    return 0;
}

uint16_t newHour(int h)
{ static int ho=0;
  if(h==ho) return 0;
    1176:	ldr	r3, [r6, #0]
    1178:	cmp	r4, r3
    117a:	beq.n	11bc <newDirectory(char*)+0x58>
    rtc_get_datetime(&t);

    if(newHour(t.hour))
    {   
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
            DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
    117c:	ldrsb.w	r1, [sp, #18]
    1180:	mov	r0, r5
    1182:	ldrsh.w	r2, [sp, #16]
    1186:	ldrsb.w	r7, [sp, #19]
    datetime_t t;
    rtc_get_datetime(&t);

    if(newHour(t.hour))
    {   
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    118a:	ldr	r3, [pc, #64]	; (11cc <newDirectory(char*)+0x68>)
}

uint16_t newHour(int h)
{ static int ho=0;
  if(h==ho) return 0;
  ho=h;
    118c:	str	r4, [r6, #0]
    rtc_get_datetime(&t);

    if(newHour(t.hour))
    {   
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
            DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
    118e:	ldr	r3, [r3, #0]
    1190:	str	r1, [sp, #4]
    1192:	str	r2, [sp, #0]
    1194:	str	r4, [sp, #12]
    1196:	str	r7, [sp, #8]
    1198:	ldr	r2, [pc, #52]	; (11d0 <newDirectory(char*)+0x6c>)
    119a:	ldr	r1, [pc, #56]	; (11d4 <newDirectory(char*)+0x70>)
    119c:	bl	cd14 <sprintf>
        //
        Serial.println(); Serial.print(dirName);
    11a0:	ldr	r0, [pc, #52]	; (11d8 <newDirectory(char*)+0x74>)
    11a2:	bl	ba34 <Print::println()>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    11a6:	cbz	r5, 11c2 <newDirectory(char*)+0x5e>
							  return write((const uint8_t *)str, strlen(str)); }
    11a8:	mov	r0, r5
    11aa:	bl	cdc0 <strlen>
    11ae:	mov	r1, r0
    11b0:	mov	r0, r5
    11b2:	bl	a0b0 <usb_serial_write>
        return 1;   // have new directory
    11b6:	movs	r0, #1
    }
    return 0;       // keep old directory

}
    11b8:	add	sp, #28
    11ba:	pop	{r4, r5, r6, r7, pc}
            DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
        //
        Serial.println(); Serial.print(dirName);
        return 1;   // have new directory
    }
    return 0;       // keep old directory
    11bc:	movs	r0, #0

}
    11be:	add	sp, #28
    11c0:	pop	{r4, r5, r6, r7, pc}
    {   
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
            DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
        //
        Serial.println(); Serial.print(dirName);
        return 1;   // have new directory
    11c2:	movs	r0, #1
    }
    return 0;       // keep old directory

}
    11c4:	add	sp, #28
    11c6:	pop	{r4, r5, r6, r7, pc}
    11c8:	.word	0x20017b40
    11cc:	.word	0x20006138
    11d0:	.word	0x20000f3c
    11d4:	.word	0x20000f40
    11d8:	.word	0x20001f78

000011dc <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    11dc:	push	{r4, lr}
    11de:	sub	sp, #16
    11e0:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    11e2:	add	r0, sp, #8
    11e4:	bl	73c <rtc_get_datetime(datetime_t*)>
    sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    11e8:	ldrsb.w	r1, [sp, #15]
    11ec:	ldrsb.w	r2, [sp, #14]
    11f0:	mov	r0, r4
    11f2:	ldrsb.w	r3, [sp, #13]
    11f6:	str	r1, [sp, #4]
    11f8:	str	r2, [sp, #0]
    11fa:	ldr	r1, [pc, #44]	; (1228 <newFileName(char*)+0x4c>)
    11fc:	ldr	r2, [pc, #44]	; (122c <newFileName(char*)+0x50>)
    11fe:	bl	cd14 <sprintf>
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    1202:	ldr	r0, [pc, #44]	; (1230 <newFileName(char*)+0x54>)
    1204:	bl	ba34 <Print::println()>
    1208:	movs	r1, #2
    120a:	ldr	r0, [pc, #40]	; (1234 <newFileName(char*)+0x58>)
    120c:	bl	a0b0 <usb_serial_write>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1210:	cbz	r4, 1220 <newFileName(char*)+0x44>
							  return write((const uint8_t *)str, strlen(str)); }
    1212:	mov	r0, r4
    1214:	bl	cdc0 <strlen>
    1218:	mov	r1, r0
    121a:	mov	r0, r4
    121c:	bl	a0b0 <usb_serial_write>
    return 1;
}
    1220:	movs	r0, #1
    1222:	add	sp, #16
    1224:	pop	{r4, pc}
    1226:	nop
    1228:	.word	0x20000f60
    122c:	.word	0x20000f5c
    1230:	.word	0x20001f78
    1234:	.word	0x20000f74

00001238 <storeData(short)>:
static char fileName[80];
static int32_t fileHeader[128];

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    1238:	push	{r4, r5, r6, r7, lr}
    if(status==CLOSED) // file closed: should open
    123a:	mov	r4, r0
static char fileName[80];
static int32_t fileHeader[128];

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    123c:	sub	sp, #84	; 0x54
    if(status==CLOSED) // file closed: should open
    123e:	cbz	r0, 1276 <storeData(short)+0x3e>
        else
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    1240:	cmp	r0, #1
    1242:	beq.w	14a8 <storeData(short)+0x270>
        { status = DOCLOSE;
        } 
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    1246:	cmp	r0, #2
    1248:	beq.w	138e <storeData(short)+0x156>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        disk_count++;
    }    

    // following is done independent of data availability
    if(status==DOCLOSE) // should close file
    124c:	cmp	r0, #3
    124e:	beq.w	138a <storeData(short)+0x152>
            file.close();
        }
        status = CLOSED;
    }
    //
    if(status==MUSTSTOP) // should close file and stop
    1252:	cmp	r0, #4
    1254:	beq.n	125a <storeData(short)+0x22>
            file.close();
        }
        status = STOPPED;
    }
    return status;
}
    1256:	add	sp, #84	; 0x54
    1258:	pop	{r4, r5, r6, r7, pc}
    125a:	ldr	r3, [pc, #592]	; (14ac <storeData(short)+0x274>)
    125c:	ldr	r0, [r3, #72]	; 0x48
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    125e:	cmp	r0, #0
    1260:	beq.w	13cc <storeData(short)+0x194>
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
    1264:	bl	6788 <FatFile::sync()>
    //
    if(status==MUSTSTOP) // should close file and stop
    {   if(file)
        {
            file.flush();
            file.close();
    1268:	ldr	r0, [pc, #580]	; (14b0 <storeData(short)+0x278>)
    126a:	bl	79ac <FsBaseFile::close()>
        }
        status = STOPPED;
    126e:	mov.w	r0, #4294967295
    }
    return status;
}
    1272:	add	sp, #84	; 0x54
    1274:	pop	{r4, r5, r6, r7, pc}
{
    if(status==CLOSED) // file closed: should open
    {   //doTransactions(true);
        //if(!checkDiskSpace()) {return STOPPED;}
        //
        if(newDirectory(dirName))
    1276:	ldr	r0, [pc, #572]	; (14b4 <storeData(short)+0x27c>)
    1278:	bl	1164 <newDirectory(char*)>
    127c:	cmp	r0, #0
    127e:	bne.n	1328 <storeData(short)+0xf0>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
        }
        
        if(newFileName(fileName))
    1280:	ldr	r0, [pc, #564]	; (14b8 <storeData(short)+0x280>)
    1282:	bl	11dc <newFileName(char*)>
    1286:	cmp	r0, #0
    1288:	beq.w	1468 <storeData(short)+0x230>
        {   
            file = sd.open(fileName, FILE_WRITE); 
    128c:	movw	r3, #16898	; 0x4202
    1290:	ldr	r2, [pc, #548]	; (14b8 <storeData(short)+0x280>)
    1292:	ldr	r1, [pc, #552]	; (14bc <storeData(short)+0x284>)
    1294:	mov	r0, sp
    1296:	bl	7c24 <FsVolume::open(char const*, int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    129a:	ldr	r4, [pc, #528]	; (14ac <storeData(short)+0x274>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    129c:	ldr	r2, [sp, #8]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
    129e:	add	r1, sp, #16
    12a0:	ldrb.w	r3, [sp, #12]
    12a4:	add.w	r0, r4, #16
    12a8:	ldr	r5, [sp, #4]
    12aa:	str	r2, [r4, #8]
    12ac:	strb	r3, [r4, #12]
    12ae:	str	r5, [r4, #4]
    12b0:	bl	79d4 <FsBaseFile::operator=(FsBaseFile const&)>
    12b4:	ldr	r3, [pc, #520]	; (14c0 <storeData(short)+0x288>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    12b6:	add	r0, sp, #16
    12b8:	str	r3, [sp, #0]
    12ba:	bl	79ac <FsBaseFile::close()>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    12be:	ldr	r3, [r4, #72]	; 0x48
    12c0:	cmp	r3, #0
    12c2:	beq.w	1452 <storeData(short)+0x21a>
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    {   makeHeader(fileHeader);
    12c6:	ldr	r0, [pc, #508]	; (14c4 <storeData(short)+0x28c>)
    12c8:	bl	108c <makeHeader(long*)>
    12cc:	ldr	r0, [r4, #72]	; 0x48
    12ce:	ldr	r3, [pc, #476]	; (14ac <storeData(short)+0x274>)
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    12d0:	cmp	r0, #0
    12d2:	beq.n	1378 <storeData(short)+0x140>
    12d4:	mov.w	r2, #512	; 0x200
    12d8:	ldr	r1, [pc, #488]	; (14c4 <storeData(short)+0x28c>)
    12da:	bl	68e4 <FatFile::write(void const*, unsigned int)>
        if(file.write((const void *)fileHeader,512) < 512) 
    12de:	cmp.w	r0, #512	; 0x200
    12e2:	bcc.n	1310 <storeData(short)+0xd8>
    12e4:	ldr	r0, [r4, #72]	; 0x48
    12e6:	ldr	r3, [pc, #452]	; (14ac <storeData(short)+0x274>)
    12e8:	cmp	r0, #0
    12ea:	beq.n	13d8 <storeData(short)+0x1a0>
    12ec:	mov.w	r2, #4096	; 0x1000
    12f0:	ldr	r1, [pc, #468]	; (14c8 <storeData(short)+0x290>)
    12f2:	bl	68e4 <FatFile::write(void const*, unsigned int)>
    12f6:	mov	r5, r0
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    12f8:	cmp.w	r5, #4096	; 0x1000
    12fc:	bcc.w	1424 <storeData(short)+0x1ec>
    1300:	movs	r0, #2
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        disk_count++;
    1302:	ldr	r2, [pc, #456]	; (14cc <storeData(short)+0x294>)
    }    

    // following is done independent of data availability
    if(status==DOCLOSE) // should close file
    1304:	cmp	r0, #3
    //
    if(status==RUNNING) // file is open, header written: store data records
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        disk_count++;
    1306:	ldr	r3, [r2, #0]
    1308:	add.w	r3, r3, #1
    130c:	str	r3, [r2, #0]
    }    

    // following is done independent of data availability
    if(status==DOCLOSE) // should close file
    130e:	bne.n	1256 <storeData(short)+0x1e>
    1310:	ldr	r0, [r4, #72]	; 0x48
    1312:	ldr	r3, [pc, #408]	; (14ac <storeData(short)+0x274>)
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    1314:	cmp	r0, #0
    1316:	beq.w	146e <storeData(short)+0x236>
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
    131a:	bl	6788 <FatFile::sync()>
    {   if(file)
        {   file.flush();
            file.close();
    131e:	ldr	r0, [pc, #400]	; (14b0 <storeData(short)+0x278>)
    1320:	bl	79ac <FsBaseFile::close()>
        }
        status = CLOSED;
    1324:	movs	r0, #0
    1326:	b.n	1256 <storeData(short)+0x1e>
    1328:	ldr	r6, [pc, #400]	; (14bc <storeData(short)+0x284>)
    132a:	ldr.w	r5, [r6, #1152]	; 0x480
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    132e:	cbz	r5, 1392 <storeData(short)+0x15a>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1330:	mov	r3, r4
    1332:	mov	r1, r5
    1334:	ldr	r2, [pc, #380]	; (14b4 <storeData(short)+0x27c>)
    1336:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    1338:	strb.w	r4, [sp]
    133c:	mov	r7, sp
    133e:	strb.w	r4, [sp, #1]
    1342:	strb.w	r4, [sp, #2]
    1346:	bl	60b8 <FatFile::open(FatVolume*, char const*, int)>
    134a:	mov	r4, r0
    if(status==CLOSED) // file closed: should open
    {   //doTransactions(true);
        //if(!checkDiskSpace()) {return STOPPED;}
        //
        if(newDirectory(dirName))
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    134c:	cmp	r4, #0
    134e:	beq.w	147c <storeData(short)+0x244>
    1352:	ldr.w	r0, [r6, #1152]	; 0x480
    1356:	ldr	r3, [pc, #356]	; (14bc <storeData(short)+0x284>)
   * \param[in] path Path for volume working directory.
   * \return true for success or false for failure.
   */
    bool chdir(const char* path) {
    return m_fVol ? m_fVol->chdir(path) :
           m_xVol ? m_xVol->chdir(path) : false;
    1358:	cbz	r0, 13b6 <storeData(short)+0x17e>
    135a:	ldr	r1, [pc, #344]	; (14b4 <storeData(short)+0x27c>)
    135c:	bl	703c <FatVolume::chdir(char const*)>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    1360:	cmp	r0, #0
    1362:	bne.n	1280 <storeData(short)+0x48>
    1364:	movs	r1, #11
    1366:	ldr	r0, [pc, #360]	; (14d0 <storeData(short)+0x298>)
    1368:	bl	a0b0 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    136c:	ldr	r0, [pc, #356]	; (14d4 <storeData(short)+0x29c>)
    136e:	bl	ba34 <Print::println()>
    1372:	mov.w	r0, #4294967295
    1376:	b.n	1256 <storeData(short)+0x1e>
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1378:	ldr	r0, [r3, #76]	; 0x4c
    137a:	cmp	r0, #0
    137c:	beq.n	1310 <storeData(short)+0xd8>
    137e:	mov.w	r2, #512	; 0x200
    1382:	ldr	r1, [pc, #320]	; (14c4 <storeData(short)+0x28c>)
    1384:	bl	51c8 <ExFatFile::write(void const*, unsigned int)>
    1388:	b.n	12de <storeData(short)+0xa6>
    138a:	ldr	r4, [pc, #288]	; (14ac <storeData(short)+0x274>)
    138c:	b.n	1310 <storeData(short)+0xd8>
    138e:	ldr	r4, [pc, #284]	; (14ac <storeData(short)+0x274>)
    1390:	b.n	12e4 <storeData(short)+0xac>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    1392:	ldr.w	r1, [r6, #1156]	; 0x484
    1396:	cmp	r1, #0
    1398:	beq.n	140e <storeData(short)+0x1d6>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    139a:	mov	r3, r5
    139c:	ldr	r2, [pc, #276]	; (14b4 <storeData(short)+0x27c>)
    139e:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    13a0:	strb.w	r5, [sp, #49]	; 0x31
    13a4:	strb.w	r5, [sp, #50]	; 0x32
    13a8:	mov	r7, sp
    13aa:	strb.w	r5, [sp, #51]	; 0x33
    13ae:	bl	4438 <ExFatFile::open(ExFatVolume*, char const*, int)>
    13b2:	mov	r4, r0
    13b4:	b.n	134c <storeData(short)+0x114>
   * \param[in] path Path for volume working directory.
   * \return true for success or false for failure.
   */
    bool chdir(const char* path) {
    return m_fVol ? m_fVol->chdir(path) :
           m_xVol ? m_xVol->chdir(path) : false;
    13b6:	ldr.w	r0, [r3, #1156]	; 0x484
    13ba:	cmp	r0, #0
    13bc:	beq.n	1364 <storeData(short)+0x12c>
    13be:	ldr	r1, [pc, #244]	; (14b4 <storeData(short)+0x27c>)
    13c0:	bl	4900 <ExFatVolume::chdir(char const*)>
    13c4:	cmp	r0, #0
    13c6:	bne.w	1280 <storeData(short)+0x48>
    13ca:	b.n	1364 <storeData(short)+0x12c>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    13cc:	ldr	r0, [r3, #76]	; 0x4c
    13ce:	cmp	r0, #0
    13d0:	beq.n	1468 <storeData(short)+0x230>
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
    13d2:	bl	4c60 <ExFatFile::sync()>
    13d6:	b.n	1268 <storeData(short)+0x30>
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    13d8:	ldr	r0, [r3, #76]	; 0x4c
    13da:	cbz	r0, 1422 <storeData(short)+0x1ea>
    13dc:	mov.w	r2, #4096	; 0x1000
    13e0:	ldr	r1, [pc, #228]	; (14c8 <storeData(short)+0x290>)
    13e2:	bl	51c8 <ExFatFile::write(void const*, unsigned int)>
    13e6:	mov	r5, r0
    13e8:	b.n	12f8 <storeData(short)+0xc0>
    13ea:	ldr.w	r1, [r3, #1156]	; 0x484
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    13ee:	cbz	r1, 140e <storeData(short)+0x1d6>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    13f0:	add.w	r1, r1, #1096	; 0x448
    13f4:	mov	r0, r7
    13f6:	movs	r3, #1
    13f8:	ldr	r2, [pc, #184]	; (14b4 <storeData(short)+0x27c>)
    13fa:	strb.w	r4, [sp, #49]	; 0x31
    13fe:	strb.w	r4, [sp, #50]	; 0x32
    1402:	strb.w	r4, [sp, #51]	; 0x33
    1406:	bl	4dc0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    if(status==CLOSED) // file closed: should open
    {   //doTransactions(true);
        //if(!checkDiskSpace()) {return STOPPED;}
        //
        if(newDirectory(dirName))
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    140a:	cmp	r0, #0
    140c:	bne.n	1352 <storeData(short)+0x11a>
    140e:	movs	r1, #11
    1410:	ldr	r0, [pc, #196]	; (14d8 <storeData(short)+0x2a0>)
    1412:	bl	a0b0 <usb_serial_write>
    1416:	ldr	r0, [pc, #188]	; (14d4 <storeData(short)+0x29c>)
    1418:	bl	ba34 <Print::println()>
    141c:	mov.w	r0, #4294967295
    1420:	b.n	1256 <storeData(short)+0x1e>
    1422:	mov	r5, r0
    1424:	movs	r1, #1
    1426:	ldr	r0, [pc, #180]	; (14dc <storeData(short)+0x2a4>)
    1428:	bl	a0b0 <usb_serial_write>
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    142c:	movs	r3, #0
    142e:	movs	r2, #10
    1430:	mov	r1, r5
    1432:	ldr	r0, [pc, #160]	; (14d4 <storeData(short)+0x29c>)
    1434:	bl	ba88 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1438:	movs	r1, #1
    143a:	ldr	r0, [pc, #164]	; (14e0 <storeData(short)+0x2a8>)
    143c:	bl	a0b0 <usb_serial_write>
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	// Print a signed number
	size_t print(int n)				{ return print((long)n); }
    1440:	movs	r1, #2
    1442:	ldr	r0, [pc, #144]	; (14d4 <storeData(short)+0x29c>)
    1444:	bl	bb08 <Print::print(long)>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
    1448:	ldr	r0, [pc, #136]	; (14d4 <storeData(short)+0x29c>)
    144a:	bl	ba34 <Print::println()>
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    144e:	movs	r0, #3
    1450:	b.n	1302 <storeData(short)+0xca>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    1452:	ldr	r3, [r4, #76]	; 0x4c
    1454:	cmp	r3, #0
    1456:	bne.w	12c6 <storeData(short)+0x8e>
    145a:	movs	r1, #17
    145c:	ldr	r0, [pc, #132]	; (14e4 <storeData(short)+0x2ac>)
    145e:	bl	a0b0 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    1462:	ldr	r0, [pc, #112]	; (14d4 <storeData(short)+0x29c>)
    1464:	bl	ba34 <Print::println()>
            if(file) 
            { status = OPENED; 
            }
            else 
            {   Serial.println("Failing open file");
                return STOPPED; 
    1468:	mov.w	r0, #4294967295
    146c:	b.n	1256 <storeData(short)+0x1e>
    146e:	ldr	r0, [r3, #76]	; 0x4c
    1470:	cmp	r0, #0
    1472:	beq.w	1256 <storeData(short)+0x1e>
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
    1476:	bl	4c60 <ExFatFile::sync()>
    147a:	b.n	131e <storeData(short)+0xe6>
    147c:	ldr.w	r1, [r6, #1152]	; 0x480
    1480:	ldr	r3, [pc, #56]	; (14bc <storeData(short)+0x284>)
    1482:	cmp	r1, #0
    1484:	beq.n	13ea <storeData(short)+0x1b2>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1486:	add.w	r1, r1, #1096	; 0x448
    148a:	mov	r0, r7
    148c:	movs	r3, #1
    148e:	ldr	r2, [pc, #36]	; (14b4 <storeData(short)+0x27c>)
    1490:	strb.w	r4, [sp]
    1494:	strb.w	r4, [sp, #1]
    1498:	strb.w	r4, [sp, #2]
    149c:	bl	5f1c <FatFile::mkdir(FatFile*, char const*, bool)>
    if(status==CLOSED) // file closed: should open
    {   //doTransactions(true);
        //if(!checkDiskSpace()) {return STOPPED;}
        //
        if(newDirectory(dirName))
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    14a0:	cmp	r0, #0
    14a2:	bne.w	1352 <storeData(short)+0x11a>
    14a6:	b.n	140e <storeData(short)+0x1d6>
    14a8:	ldr	r4, [pc, #0]	; (14ac <storeData(short)+0x274>)
    14aa:	b.n	12c6 <storeData(short)+0x8e>
    14ac:	.word	0x20017d98
    14b0:	.word	0x20017da8
    14b4:	.word	0x20017574
    14b8:	.word	0x200177c4
    14bc:	.word	0x200186cc
    14c0:	.word	0x20000620
    14c4:	.word	0x2000713c
    14c8:	.word	0x2000613c
    14cc:	.word	0x20017d84
    14d0:	.word	0x20000f84
    14d4:	.word	0x20001f78
    14d8:	.word	0x20000f78
    14dc:	.word	0x20000f90
    14e0:	.word	0x200019d4
    14e4:	.word	0x20000f94

000014e8 <saveData(short)>:
}
//
volatile uint32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    if(status==STOPPED) 
    14e8:	adds	r3, r0, #1
    return status;
}
//
volatile uint32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    14ea:	push	{r4, r5, r6, lr}
    if(status==STOPPED) 
    14ec:	beq.n	1540 <saveData(short)+0x58>
    { pullData(diskBuffer);
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    }
    if(status<CLOSED) return status; // we are stopped: don't do anything
    14ee:	cmp	r0, #0
    14f0:	blt.n	1536 <saveData(short)+0x4e>

    status=checkEndOfFile(status);
    14f2:	bl	1130 <checkEndOfFile(short)>
    14f6:	mov	r5, r0

    if(getDataCount()>=NDBL)
    14f8:	bl	7c <getDataCount()>
    14fc:	cmp	r0, #7
    14fe:	bls.n	1532 <saveData(short)+0x4a>
    1500:	ldr	r4, [pc, #92]	; (1560 <saveData(short)+0x78>)
    1502:	add.w	r6, r4, #4096	; 0x1000
    {
      for(int ii=0; ii<NDBL; ii++) pullData(&diskBuffer[ii*NBUF_ACQ]);
    1506:	mov	r0, r4
    1508:	add.w	r4, r4, #512	; 0x200
    150c:	bl	124 <pullData(unsigned long*)>
    1510:	cmp	r4, r6
    1512:	bne.n	1506 <saveData(short)+0x1e>
    1514:	ldr	r2, [pc, #76]	; (1564 <saveData(short)+0x7c>)
    1516:	movs	r3, #0
    1518:	ldr	r0, [pc, #76]	; (1568 <saveData(short)+0x80>)
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    151a:	ldr.w	r1, [r2, #4]!
    151e:	str.w	r1, [r0, r3, lsl #2]
    1522:	adds	r3, #1
    1524:	cmp	r3, #8
    1526:	bne.n	151a <saveData(short)+0x32>
      if(haveStore)
    1528:	ldr	r3, [pc, #64]	; (156c <saveData(short)+0x84>)
        status=storeData(status);
    152a:	mov	r0, r5

    if(getDataCount()>=NDBL)
    {
      for(int ii=0; ii<NDBL; ii++) pullData(&diskBuffer[ii*NBUF_ACQ]);
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
      if(haveStore)
    152c:	ldr	r3, [r3, #0]
    152e:	cbnz	r3, 1538 <saveData(short)+0x50>
        status=storeData(status);
    }
    return status;
}
    1530:	pop	{r4, r5, r6, pc}
    { pullData(diskBuffer);
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    }
    if(status<CLOSED) return status; // we are stopped: don't do anything

    status=checkEndOfFile(status);
    1532:	mov	r0, r5
    1534:	pop	{r4, r5, r6, pc}
    1536:	pop	{r4, r5, r6, pc}
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
      if(haveStore)
        status=storeData(status);
    }
    return status;
}
    1538:	ldmia.w	sp!, {r4, r5, r6, lr}
    if(getDataCount()>=NDBL)
    {
      for(int ii=0; ii<NDBL; ii++) pullData(&diskBuffer[ii*NBUF_ACQ]);
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
      if(haveStore)
        status=storeData(status);
    153c:	b.w	1238 <storeData(short)>
//
volatile uint32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    if(status==STOPPED) 
    { pullData(diskBuffer);
    1540:	ldr	r0, [pc, #28]	; (1560 <saveData(short)+0x78>)
    1542:	bl	124 <pullData(unsigned long*)>
    1546:	ldr	r2, [pc, #28]	; (1564 <saveData(short)+0x7c>)
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    1548:	movs	r3, #0
    154a:	ldr	r0, [pc, #28]	; (1568 <saveData(short)+0x80>)
    154c:	ldr.w	r1, [r2, #4]!
    1550:	str.w	r1, [r0, r3, lsl #2]
    1554:	adds	r3, #1
    1556:	cmp	r3, #8
    1558:	bne.n	154c <saveData(short)+0x64>
    155a:	mov.w	r0, #4294967295
    155e:	pop	{r4, r5, r6, pc}
    1560:	.word	0x2000613c
    1564:	.word	0x20006138
    1568:	.word	0x200185f0
    156c:	.word	0x20017de8

00001570 <_GLOBAL__sub_I_t_acq>:
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
      if(haveStore)
        status=storeData(status);
    }
    return status;
}
    1570:	push	{r3, r4, r5, r6, r7, lr}
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() {}
    1572:	ldr	r3, [pc, #112]	; (15e4 <_GLOBAL__sub_I_t_acq+0x74>)
    1574:	movs	r4, #0
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    1576:	ldr	r6, [pc, #112]	; (15e8 <_GLOBAL__sub_I_t_acq+0x78>)
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    1578:	movs	r1, #7

#elif defined(__IMXRT1062__)
  #define SD_CONFIG SdioConfig(FIFO_SDIO)
#endif

SdFs sd;
    157a:	ldr	r5, [pc, #112]	; (15ec <_GLOBAL__sub_I_t_acq+0x7c>)
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    157c:	movs	r7, #41	; 0x29
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    157e:	str.w	r6, [r3, #1188]	; 0x4a4
    1582:	mov	r0, r3
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1584:	ldr	r2, [pc, #104]	; (15f0 <_GLOBAL__sub_I_t_acq+0x80>)
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    1586:	ldr	r6, [pc, #108]	; (15f4 <_GLOBAL__sub_I_t_acq+0x84>)
    1588:	str.w	r2, [r3, #1168]	; 0x490
    158c:	mov	r2, r5
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    158e:	str.w	r1, [r3, #1192]	; 0x4a8
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    1592:	strb.w	r7, [r3, #1197]	; 0x4ad
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1596:	mov.w	r7, #1000	; 0x3e8
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    159a:	str.w	r6, [r3, #1180]	; 0x49c
    159e:	str.w	r4, [r3, #1152]	; 0x480
    15a2:	str.w	r4, [r3, #1156]	; 0x484
/**
 * \class SdBase
 * \brief base SD file system template class.
 */
template <class Vol, class Fmt>
class SdBase : public Vol {
    15a6:	str.w	r4, [r3, #1164]	; 0x48c
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    15aa:	strb.w	r4, [r3, #1176]	; 0x498
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    15ae:	strb.w	r4, [r3, #1177]	; 0x499
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    15b2:	strb.w	r4, [r3, #1201]	; 0x4b1
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    15b6:	strb.w	r4, [r3, #1208]	; 0x4b8
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    15ba:	strb.w	r4, [r3, #1224]	; 0x4c8
    15be:	ldr	r1, [pc, #56]	; (15f8 <_GLOBAL__sub_I_t_acq+0x88>)
    15c0:	bl	bcfc <__aeabi_atexit>
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    15c4:	ldr	r6, [pc, #52]	; (15fc <_GLOBAL__sub_I_t_acq+0x8c>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    15c6:	ldr	r3, [pc, #56]	; (1600 <_GLOBAL__sub_I_t_acq+0x90>)
FsFile file;
    15c8:	mov	r2, r5
    15ca:	ldr	r1, [pc, #56]	; (1604 <_GLOBAL__sub_I_t_acq+0x94>)
    15cc:	mov	r0, r3
    15ce:	str	r4, [r3, #4]
    15d0:	strb	r4, [r3, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    15d2:	str	r4, [r3, #72]	; 0x48
    15d4:	str	r4, [r3, #76]	; 0x4c
    15d6:	str	r7, [r3, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    15d8:	str	r6, [r3, #0]
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
      if(haveStore)
        status=storeData(status);
    }
    return status;
}
    15da:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#elif defined(__IMXRT1062__)
  #define SD_CONFIG SdioConfig(FIFO_SDIO)
#endif

SdFs sd;
FsFile file;
    15de:	b.w	bcfc <__aeabi_atexit>
    15e2:	nop
    15e4:	.word	0x200186cc
    15e8:	.word	0x003d0900
    15ec:	.word	0x20001f18
    15f0:	.word	0x200007e8
    15f4:	.word	0x20000650
    15f8:	.word	0x00000eb5
    15fc:	.word	0x20000714
    1600:	.word	0x20017d98
    1604:	.word	0x00000eb9

00001608 <loop>:
    setup1();
  #endif
}

void loop() 
{
    1608:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // put your main code here, to run repeatedly:
  static uint32_t loopCount=0;
  loopCount++;
    160c:	ldr	r5, [pc, #488]	; (17f8 <loop+0x1f0>)
    setup1();
  #endif
}

void loop() 
{
    160e:	sub	sp, #52	; 0x34
  static int16_t monitor=0;

  // obtain some statistics on Queue usage
  static uint16_t mxb=0;
  uint16_t nb = getDataCount();
  if(nb>mxb) mxb=nb;
    1610:	ldr	r6, [pc, #488]	; (17fc <loop+0x1f4>)

void loop() 
{
  // put your main code here, to run repeatedly:
  static uint32_t loopCount=0;
  loopCount++;
    1612:	ldr	r3, [r5, #0]
    1614:	adds	r3, #1
    1616:	str	r3, [r5, #0]
  static int16_t monitor=0;

  // obtain some statistics on Queue usage
  static uint16_t mxb=0;
  uint16_t nb = getDataCount();
    1618:	bl	7c <getDataCount()>
  if(nb>mxb) mxb=nb;
    161c:	ldrh	r3, [r6, #0]
    161e:	cmp	r3, r0
    1620:	it	cc
    1622:	strhcc	r0, [r6, #0]
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
    1624:	bl	9fdc <usb_serial_available>

  static volatile int16_t status=CLOSED;
  // basic menu to start and stop archiving  
  if(Serial.available())
    1628:	cmp	r0, #0
    162a:	bne.n	168a <loop+0x82>
    162c:	ldr	r4, [pc, #464]	; (1800 <loop+0x1f8>)
    if(ch=='?') menu2(); // returns only when menu2 gets not handled character
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
  }

  // save data (filing will be handled inside saveData)
  status=saveData(status);  
    162e:	ldrh	r0, [r4, #0]

//  if(status<0) return;
  // once a second provide some information to User
  static uint32_t t0=0;
  uint32_t t1;
  if((t1=millis())>(t0+1000))
    1630:	ldr.w	r8, [pc, #544]	; 1854 <loop+0x24c>
    if(ch=='?') menu2(); // returns only when menu2 gets not handled character
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
  }

  // save data (filing will be handled inside saveData)
  status=saveData(status);  
    1634:	sxth	r0, r0
    1636:	bl	14e8 <saveData(short)>
    163a:	ldr	r2, [pc, #456]	; (1804 <loop+0x1fc>)

//  if(status<0) return;
  // once a second provide some information to User
  static uint32_t t0=0;
  uint32_t t1;
  if((t1=millis())>(t0+1000))
    163c:	ldr.w	r3, [r8]
    if(ch=='?') menu2(); // returns only when menu2 gets not handled character
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
  }

  // save data (filing will be handled inside saveData)
  status=saveData(status);  
    1640:	strh	r0, [r4, #0]

//  if(status<0) return;
  // once a second provide some information to User
  static uint32_t t0=0;
  uint32_t t1;
  if((t1=millis())>(t0+1000))
    1642:	add.w	r3, r3, #1000	; 0x3e8
    1646:	ldr.w	r9, [r2]
    164a:	cmp	r3, r9
    164c:	bcc.n	1654 <loop+0x4c>
    mxb=0;
    disk_count=0;

    t0=t1;
  }
}
    164e:	add	sp, #52	; 0x34
    1650:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // once a second provide some information to User
  static uint32_t t0=0;
  uint32_t t1;
  if((t1=millis())>(t0+1000))
  { datetime_t t;
    rtc_get_datetime(&t);
    1654:	add	r0, sp, #40	; 0x28
    1656:	bl	73c <rtc_get_datetime(datetime_t*)>

    if(monitor)
    165a:	ldr	r3, [pc, #428]	; (1808 <loop+0x200>)
    165c:	ldrsh.w	r3, [r3]
    1660:	cbnz	r3, 16b4 <loop+0xac>
    1662:	ldr	r3, [pc, #424]	; (180c <loop+0x204>)
    1664:	ldr.w	fp, [pc, #496]	; 1858 <loop+0x250>
    1668:	str	r3, [sp, #32]
    166a:	ldr	r3, [pc, #420]	; (1810 <loop+0x208>)
    166c:	str	r3, [sp, #28]
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
        max_stat=0;        
      }
    }

    loopCount=0;
    166e:	movs	r3, #0
    procCount=0;
    procMiss=0;
    1670:	ldr	r2, [sp, #32]
    mxb=0;
    disk_count=0;

    t0=t1;
    1672:	str.w	r9, [r8]
      }
    }

    loopCount=0;
    procCount=0;
    procMiss=0;
    1676:	str	r3, [r2, #0]
    mxb=0;
    disk_count=0;
    1678:	ldr	r2, [sp, #28]
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
        max_stat=0;        
      }
    }

    loopCount=0;
    167a:	str	r3, [r5, #0]
    procCount=0;
    167c:	str.w	r3, [fp]
    procMiss=0;
    mxb=0;
    1680:	strh	r3, [r6, #0]
    disk_count=0;
    1682:	str	r3, [r2, #0]

    t0=t1;
  }
}
    1684:	add	sp, #52	; 0x34
    1686:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
    168a:	bl	a064 <usb_serial_getchar>

  static volatile int16_t status=CLOSED;
  // basic menu to start and stop archiving  
  if(Serial.available())
  {
    char ch=Serial.read();
    168e:	uxtb	r0, r0
    if(ch=='s') status=CLOSED;
    1690:	cmp	r0, #115	; 0x73
    1692:	beq.n	1792 <loop+0x18a>
    if(ch=='e') status=MUSTSTOP;
    1694:	cmp	r0, #101	; 0x65
    1696:	beq.n	16ac <loop+0xa4>
    if(ch=='m') monitor=1-monitor;
    1698:	cmp	r0, #109	; 0x6d
    169a:	bne.w	17d4 <loop+0x1cc>
    169e:	ldr	r2, [pc, #360]	; (1808 <loop+0x200>)
    16a0:	ldr	r4, [pc, #348]	; (1800 <loop+0x1f8>)
    16a2:	ldrh	r3, [r2, #0]
    16a4:	rsb	r3, r3, #1
    16a8:	strh	r3, [r2, #0]
    16aa:	b.n	162e <loop+0x26>
  // basic menu to start and stop archiving  
  if(Serial.available())
  {
    char ch=Serial.read();
    if(ch=='s') status=CLOSED;
    if(ch=='e') status=MUSTSTOP;
    16ac:	ldr	r4, [pc, #336]	; (1800 <loop+0x1f8>)
    16ae:	movs	r3, #4
    16b0:	strh	r3, [r4, #0]
    16b2:	b.n	162e <loop+0x26>
    rtc_get_datetime(&t);

    if(monitor)
    {
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");
    16b4:	ldrsb.w	lr, [sp, #44]	; 0x2c
    16b8:	ldrsb.w	r7, [sp, #47]	; 0x2f
    16bc:	ldrsb.w	r4, [sp, #46]	; 0x2e
    16c0:	ldrsb.w	r0, [sp, #45]	; 0x2d
    16c4:	ldrsb.w	r1, [sp, #43]	; 0x2b
    16c8:	str.w	lr, [sp, #16]
    16cc:	ldrsb.w	r3, [sp, #42]	; 0x2a
    16d0:	ldrsh.w	r2, [sp, #40]	; 0x28
    16d4:	str	r7, [sp, #12]
    16d6:	str	r4, [sp, #8]
    16d8:	str	r0, [sp, #4]
    16da:	str	r1, [sp, #0]
    16dc:	ldr	r0, [pc, #308]	; (1814 <loop+0x20c>)
    16de:	ldr	r1, [pc, #312]	; (1818 <loop+0x210>)
    16e0:	bl	ba68 <Print::printf(char const*, ...)>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    16e4:	movs	r1, #3
    16e6:	ldr	r0, [pc, #308]	; (181c <loop+0x214>)
    16e8:	bl	a0b0 <usb_serial_write>
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    16ec:	movs	r3, #0
    16ee:	movs	r2, #10
    16f0:	ldr	r1, [r5, #0]
    16f2:	ldr	r0, [pc, #288]	; (1814 <loop+0x20c>)
    16f4:	bl	ba88 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    16f8:	movs	r1, #1
    16fa:	ldr	r0, [pc, #292]	; (1820 <loop+0x218>)
    16fc:	bl	a0b0 <usb_serial_write>

      Serial.print(loopCount); Serial.print(" ");
      Serial.print(procCount); Serial.print(" ");
    1700:	ldr.w	fp, [pc, #340]	; 1858 <loop+0x250>
      Serial.print(procMiss); Serial.print(" ");
    1704:	ldr	r3, [pc, #260]	; (180c <loop+0x204>)
    1706:	movs	r2, #10
    1708:	ldr.w	r1, [fp]
    170c:	mov	r4, r3
    170e:	str	r3, [sp, #32]
    1710:	ldr	r0, [pc, #256]	; (1814 <loop+0x20c>)
    1712:	movs	r3, #0
    1714:	bl	ba88 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1718:	movs	r1, #1
    171a:	ldr	r0, [pc, #260]	; (1820 <loop+0x218>)
    171c:	bl	a0b0 <usb_serial_write>
    1720:	movs	r3, #0
    1722:	ldr	r1, [r4, #0]
    1724:	movs	r2, #10
    1726:	ldr	r0, [pc, #236]	; (1814 <loop+0x20c>)
    1728:	bl	ba88 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    172c:	movs	r1, #1
    172e:	ldr	r0, [pc, #240]	; (1820 <loop+0x218>)
    1730:	bl	a0b0 <usb_serial_write>
      Serial.printf("%3d",mxb); Serial.print("  ");
    1734:	ldrh	r2, [r6, #0]
    1736:	ldr	r1, [pc, #236]	; (1824 <loop+0x21c>)
    1738:	ldr	r0, [pc, #216]	; (1814 <loop+0x20c>)
    173a:	bl	ba68 <Print::printf(char const*, ...)>
    173e:	movs	r1, #2
    1740:	ldr	r0, [pc, #228]	; (1828 <loop+0x220>)
    1742:	bl	a0b0 <usb_serial_write>
      Serial.printf("%4d",acqbias); Serial.print(" ");
    1746:	ldr	r3, [pc, #228]	; (182c <loop+0x224>)
    1748:	ldr	r1, [pc, #228]	; (1830 <loop+0x228>)
    174a:	ldr	r2, [r3, #0]
      Serial.print(disk_count); Serial.print("  ; ");
    174c:	ldr	r3, [pc, #192]	; (1810 <loop+0x208>)

      Serial.print(loopCount); Serial.print(" ");
      Serial.print(procCount); Serial.print(" ");
      Serial.print(procMiss); Serial.print(" ");
      Serial.printf("%3d",mxb); Serial.print("  ");
      Serial.printf("%4d",acqbias); Serial.print(" ");
    174e:	ldr	r0, [pc, #196]	; (1814 <loop+0x20c>)
      Serial.print(disk_count); Serial.print("  ; ");
    1750:	mov	r4, r3
    1752:	str	r3, [sp, #28]

      Serial.print(loopCount); Serial.print(" ");
      Serial.print(procCount); Serial.print(" ");
      Serial.print(procMiss); Serial.print(" ");
      Serial.printf("%3d",mxb); Serial.print("  ");
      Serial.printf("%4d",acqbias); Serial.print(" ");
    1754:	bl	ba68 <Print::printf(char const*, ...)>
    1758:	movs	r1, #1
    175a:	ldr	r0, [pc, #196]	; (1820 <loop+0x218>)
    175c:	bl	a0b0 <usb_serial_write>
    1760:	movs	r3, #0
    1762:	ldr	r1, [r4, #0]
    1764:	movs	r2, #10
    1766:	ldr	r0, [pc, #172]	; (1814 <loop+0x20c>)
    1768:	bl	ba88 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    176c:	movs	r1, #4
    176e:	ldr	r0, [pc, #196]	; (1834 <loop+0x22c>)
    1770:	bl	a0b0 <usb_serial_write>
      Serial.print(disk_count); Serial.print("  ; ");

      if(proc==0)
    1774:	ldr	r3, [pc, #192]	; (1838 <loop+0x230>)
    1776:	ldrsh.w	r7, [r3]
    177a:	cbnz	r7, 179a <loop+0x192>
    177c:	ldr	r4, [pc, #188]	; (183c <loop+0x234>)
      {
        for(int ii=0; ii<8;ii++){ Serial.printf("%8X ",logBuffer[ii]);}        
    177e:	ldr.w	r2, [r4, r7, lsl #2]
    1782:	adds	r7, #1
    1784:	ldr	r1, [pc, #184]	; (1840 <loop+0x238>)
    1786:	ldr	r0, [pc, #140]	; (1814 <loop+0x20c>)
    1788:	bl	ba68 <Print::printf(char const*, ...)>
    178c:	cmp	r7, #8
    178e:	bne.n	177e <loop+0x176>
    1790:	b.n	166e <loop+0x66>
  static volatile int16_t status=CLOSED;
  // basic menu to start and stop archiving  
  if(Serial.available())
  {
    char ch=Serial.read();
    if(ch=='s') status=CLOSED;
    1792:	ldr	r4, [pc, #108]	; (1800 <loop+0x1f8>)
    1794:	movs	r3, #0
    1796:	strh	r3, [r4, #0]
    1798:	b.n	162e <loop+0x26>
    179a:	ldr	r4, [pc, #168]	; (1844 <loop+0x23c>)
    179c:	add.w	r7, r4, #96	; 0x60
      Serial.print(procMiss); Serial.print(" ");
      Serial.printf("%3d",mxb); Serial.print("  ");
      Serial.printf("%4d",acqbias); Serial.print(" ");
      Serial.print(disk_count); Serial.print("  ; ");

      if(proc==0)
    17a0:	mov	sl, r4
      {
        for(int ii=0; ii<8;ii++){ Serial.printf("%8X ",logBuffer[ii]);}        
      }
      else
      {
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
    17a2:	ldr.w	r2, [sl, #4]!
    17a6:	ldr	r1, [pc, #160]	; (1848 <loop+0x240>)
    17a8:	ldr	r0, [pc, #104]	; (1814 <loop+0x20c>)
    17aa:	bl	ba68 <Print::printf(char const*, ...)>
    17ae:	cmp	r7, sl
    17b0:	bne.n	17a2 <loop+0x19a>
        Serial.printf("%2d",max_stat);
    17b2:	ldr	r3, [pc, #152]	; (184c <loop+0x244>)
    17b4:	ldr	r1, [pc, #152]	; (1850 <loop+0x248>)
    17b6:	ldr	r2, [r3, #0]
    17b8:	ldr	r0, [pc, #88]	; (1814 <loop+0x20c>)
    17ba:	str	r3, [sp, #36]	; 0x24
    17bc:	bl	ba68 <Print::printf(char const*, ...)>

        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
    17c0:	movs	r1, #0
    17c2:	ldr	r3, [sp, #36]	; 0x24
    17c4:	str.w	r1, [r4, #4]!
    17c8:	cmp	r4, r7
    17ca:	mov.w	r2, #0
    17ce:	bne.n	17c4 <loop+0x1bc>
        max_stat=0;        
    17d0:	str	r2, [r3, #0]
    17d2:	b.n	166e <loop+0x66>
  {
    char ch=Serial.read();
    if(ch=='s') status=CLOSED;
    if(ch=='e') status=MUSTSTOP;
    if(ch=='m') monitor=1-monitor;
    if(ch==':') menu1(); // returns only when menu1 gets not handled character
    17d4:	cmp	r0, #58	; 0x3a
    17d6:	bne.n	17de <loop+0x1d6>
    17d8:	bl	24c <menu1()>
    17dc:	b.n	162c <loop+0x24>
    if(ch=='?') menu2(); // returns only when menu2 gets not handled character
    17de:	cmp	r0, #63	; 0x3f
    17e0:	bne.n	17ea <loop+0x1e2>
    17e2:	bl	260 <menu2()>
    17e6:	ldr	r4, [pc, #24]	; (1800 <loop+0x1f8>)
    17e8:	b.n	162e <loop+0x26>
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
    17ea:	cmp	r0, #33	; 0x21
    17ec:	ldr	r4, [pc, #16]	; (1800 <loop+0x1f8>)
    17ee:	bne.w	162e <loop+0x26>
    17f2:	bl	3a8 <menu3()>
    17f6:	b.n	162e <loop+0x26>
    17f8:	.word	0x20017b3c
    17fc:	.word	0x20018bb4
    1800:	.word	0x20018bb6
    1804:	.word	0x20018b9c
    1808:	.word	0x20018bb8
    180c:	.word	0x20018618
    1810:	.word	0x20017d84
    1814:	.word	0x20001f78
    1818:	.word	0x20000fa8
    181c:	.word	0x20000fcc
    1820:	.word	0x200019d4
    1824:	.word	0x20000fd0
    1828:	.word	0x20000fd4
    182c:	.word	0x20017d7c
    1830:	.word	0x20000fd8
    1834:	.word	0x20000fdc
    1838:	.word	0x20002582
    183c:	.word	0x200185f0
    1840:	.word	0x20000fe4
    1844:	.word	0x20018618
    1848:	.word	0x20000fec
    184c:	.word	0x20018610
    1850:	.word	0x20000ff4
    1854:	.word	0x20017b38
    1858:	.word	0x20018614

0000185c <setup1()>:
  }
}
/**********************************************************************************/
// rp2040 has dial core. let acq run on its own core
void setup1()
{ while(!ready) {delay(1);} // wait for setup() to finish
    185c:	push	{r4, lr}
    185e:	ldr	r4, [pc, #44]	; (188c <setup1()+0x30>)
    1860:	ldr	r3, [r4, #0]
    1862:	cbnz	r3, 1870 <setup1()+0x14>
    1864:	movs	r0, #1
    1866:	bl	ad94 <delay>
    186a:	ldr	r3, [r4, #0]
    186c:	cmp	r3, #0
    186e:	beq.n	1864 <setup1()+0x8>
  i2s_setup();
    1870:	bl	c94 <i2s_setup()>
  dma_setup();
    1874:	bl	d24 <dma_setup()>
    1878:	movs	r1, #11
    187a:	ldr	r0, [pc, #20]	; (1890 <setup1()+0x34>)
    187c:	bl	a0b0 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    1880:	ldr	r0, [pc, #16]	; (1894 <setup1()+0x38>)

  Serial.println("Setup1 done");
}
    1882:	ldmia.w	sp!, {r4, lr}
    1886:	b.w	ba34 <Print::println()>
    188a:	nop
    188c:	.word	0x2001867c
    1890:	.word	0x20000ff8
    1894:	.word	0x20001f78

00001898 <setup>:
/***************************************************************************/
volatile int ready=0;
void setup1();
//
void setup() 
{
    1898:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
    189c:	ldr	r5, [pc, #272]	; (19b0 <setup+0x118>)
    189e:	sub	sp, #28
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
    18a0:	movw	r8, #750	; 0x2ee
    18a4:	ldr	r4, [pc, #268]	; (19b4 <setup+0x11c>)
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
    18a6:	ldr	r6, [r5, #0]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    18a8:	ldr	r7, [pc, #268]	; (19b8 <setup+0x120>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    18aa:	ldr.w	r9, [pc, #272]	; 19bc <setup+0x124>
    18ae:	b.n	18ba <setup+0x22>
		uint32_t millis_begin = systick_millis_count;
		while (!(*this)) {
			uint32_t elapsed = systick_millis_count - millis_begin;
			if (usb_configuration) {
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
    18b0:	cmp.w	r3, #2000	; 0x7d0
    18b4:	bhi.n	18e2 <setup+0x4a>
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
			}
			yield();
    18b6:	bl	b65c <yield>
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
    18ba:	bl	b65c <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    18be:	ldrb	r3, [r4, #0]
    18c0:	cbz	r3, 18d4 <setup+0x3c>
    18c2:	ldrb	r3, [r7, #0]
    18c4:	lsls	r2, r3, #31
    18c6:	bpl.n	18d4 <setup+0x3c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    18c8:	ldr	r3, [r5, #0]
    18ca:	ldr.w	r2, [r9]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    18ce:	subs	r3, r3, r2
    18d0:	cmp	r3, #14
    18d2:	bhi.n	18e2 <setup+0x4a>
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
		while (!(*this)) {
			uint32_t elapsed = systick_millis_count - millis_begin;
    18d4:	ldr	r3, [r5, #0]
			if (usb_configuration) {
    18d6:	ldrb	r2, [r4, #0]
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
		while (!(*this)) {
			uint32_t elapsed = systick_millis_count - millis_begin;
    18d8:	subs	r3, r3, r6
			if (usb_configuration) {
    18da:	cmp	r2, #0
    18dc:	bne.n	18b0 <setup+0x18>
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
    18de:	cmp	r3, r8
    18e0:	bls.n	18b6 <setup+0x1e>
    18e2:	ldr.w	r8, [pc, #204]	; 19b0 <setup+0x118>
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    18e6:	ldr	r6, [pc, #208]	; (19b8 <setup+0x120>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    18e8:	ldr	r7, [pc, #208]	; (19bc <setup+0x124>)
    18ea:	ldr	r2, [r5, #0]
    set_sys_clock_khz(48000, true);
  #endif

  Serial.begin(115200);
  // wait for 10 s to allow USB-Serial connection
  while(millis()<10000) if(Serial) break;
    18ec:	movw	r3, #9999	; 0x270f
    18f0:	cmp	r2, r3
    18f2:	bhi.n	1910 <setup+0x78>
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
    18f4:	bl	b65c <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    18f8:	ldrb	r3, [r4, #0]
    18fa:	cmp	r3, #0
    18fc:	beq.n	18ea <setup+0x52>
    18fe:	ldrb	r3, [r6, #0]
    1900:	lsls	r3, r3, #31
    1902:	bpl.n	18ea <setup+0x52>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1904:	ldr.w	r3, [r8]
    1908:	ldr	r2, [r7, #0]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    190a:	subs	r3, r3, r2
    190c:	cmp	r3, #14
    190e:	bls.n	18ea <setup+0x52>

  // Teensy has a crash report
  #if defined(__IMXRT1062__)
    if(CrashReport) Serial.print(CrashReport);
    1910:	ldr	r0, [pc, #172]	; (19c0 <setup+0x128>)
    1912:	bl	12f08 <___ZN16CrashReportClasscvbEv_veneer>
    1916:	cmp	r0, #0
    1918:	bne.n	19a4 <setup+0x10c>
    #if defined(AUDIO_INTERFACE)
      AudioMemory(8);
    #endif
  #endif

  rtc_setup();
    191a:	movs	r1, #19
    191c:	movs	r0, #18
    191e:	bl	738 <rtc_setup(unsigned char, unsigned char)>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1922:	movs	r1, #16
    1924:	ldr	r0, [pc, #156]	; (19c4 <setup+0x12c>)
    1926:	bl	a0b0 <usb_serial_write>
    192a:	ldr	r0, [pc, #156]	; (19c8 <setup+0x130>)
    192c:	bl	ba34 <Print::println()>
  Serial.println("rtc_setup() done");

  datetime_t t;
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
    1930:	add	r0, sp, #16
    1932:	bl	73c <rtc_get_datetime(datetime_t*)>
    1936:	cbnz	r0, 1946 <setup+0xae>
    1938:	movs	r1, #20
    193a:	ldr	r0, [pc, #144]	; (19cc <setup+0x134>)
    193c:	bl	a0b0 <usb_serial_write>
    1940:	ldr	r0, [pc, #132]	; (19c8 <setup+0x130>)
    1942:	bl	ba34 <Print::println()>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
                      t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
    1946:	ldrsb.w	r0, [sp, #21]
    194a:	ldrsb.w	r1, [sp, #19]
    194e:	ldrsb.w	r5, [sp, #23]
    1952:	ldrsb.w	r4, [sp, #22]
    1956:	ldrsb.w	r3, [sp, #18]
    195a:	ldrsh.w	r2, [sp, #16]
    195e:	str	r0, [sp, #4]
    1960:	str	r1, [sp, #0]
    1962:	str	r5, [sp, #12]
    1964:	ldr	r1, [pc, #104]	; (19d0 <setup+0x138>)
    1966:	str	r4, [sp, #8]
    1968:	ldr	r0, [pc, #92]	; (19c8 <setup+0x130>)
    196a:	bl	ba68 <Print::printf(char const*, ...)>
    196e:	ldr	r0, [pc, #88]	; (19c8 <setup+0x130>)
    1970:	bl	ba34 <Print::println()>
    1974:	movs	r1, #11
    1976:	ldr	r0, [pc, #92]	; (19d4 <setup+0x13c>)
    1978:	bl	a0b0 <usb_serial_write>
    197c:	ldr	r0, [pc, #72]	; (19c8 <setup+0x130>)
    197e:	bl	ba34 <Print::println()>

    Serial.print("Bias "); Serial.println(BIAS);
  #endif

  Serial.println("filing_init");
  filing_init();
    1982:	bl	fd8 <filing_init()>
    1986:	movs	r1, #10
    1988:	ldr	r0, [pc, #76]	; (19d8 <setup+0x140>)
    198a:	bl	a0b0 <usb_serial_write>
    198e:	ldr	r0, [pc, #56]	; (19c8 <setup+0x130>)
    1990:	bl	ba34 <Print::println()>
  Serial.println("Setup done");
  ready=1;
    1994:	ldr	r3, [pc, #68]	; (19dc <setup+0x144>)
    1996:	movs	r2, #1
    1998:	str	r2, [r3, #0]

  // in case of single core teensy 4.1 start acquisition
  #if defined(__IMXRT1062__)
    setup1();
    199a:	bl	185c <setup1()>
  #endif
}
    199e:	add	sp, #28
    19a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	// Print a floating point (decimal) number
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	// Print an object instance in human readable format
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
    19a4:	ldr	r1, [pc, #32]	; (19c8 <setup+0x130>)
    19a6:	ldr	r0, [pc, #24]	; (19c0 <setup+0x128>)
    19a8:	bl	12f10 <___ZNK16CrashReportClass7printToER5Print_veneer>
    19ac:	b.n	191a <setup+0x82>
    19ae:	nop
    19b0:	.word	0x20018b9c
    19b4:	.word	0x20018bd4
    19b8:	.word	0x20018bd3
    19bc:	.word	0x20018c28
    19c0:	.word	0x20001f1c
    19c4:	.word	0x20001004
    19c8:	.word	0x20001f78
    19cc:	.word	0x20001018
    19d0:	.word	0x20001030
    19d4:	.word	0x20001058
    19d8:	.word	0x20001064
    19dc:	.word	0x2001867c

000019e0 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
    19e0:	ldr	r2, [pc, #8]	; (19ec <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
    19e2:	ldr	r1, [pc, #12]	; (19f0 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    19e4:	ldr	r0, [pc, #12]	; (19f4 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    19e6:	b.w	bcfc <__aeabi_atexit>
    19ea:	nop
    19ec:	.word	0x20001f18
    19f0:	.word	0x00000b6d
    19f4:	.word	0x20017af4

000019f8 <__tcf_0>:

extern uint8_t analog_write_res;
extern const struct _pwm_pin_info_struct pwm_pin_info[];
volatile audio_block_t * AudioOutputPWM::block = NULL;
DMAMEM __attribute__((aligned(32))) static uint16_t pwm_tx_buffer[2][AUDIO_BLOCK_SAMPLES * 2];
DMAChannel AudioOutputPWM::dma[2];
    19f8:	push	{r4, lr}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
		release();
    19fa:	ldr	r4, [pc, #20]	; (1a10 <__tcf_0+0x18>)
    19fc:	add.w	r0, r4, #8
    1a00:	bl	b8d4 <DMAChannel::release()>
    1a04:	mov	r0, r4
    1a06:	ldmia.w	sp!, {r4, lr}
    1a0a:	b.w	b8d4 <DMAChannel::release()>
    1a0e:	nop
    1a10:	.word	0x20017a64

00001a14 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
	old_block = (audio_block_t*)block ;  // block is defined as volatile
	block = new_block ;
	__enable_irq();
	if (old_block)
		release (old_block);
}
    1a14:	push	{r4, lr}
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
    1a16:	ldr	r4, [pc, #32]	; (1a38 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x24>)
    1a18:	movs	r1, #0
    1a1a:	mov	r0, r4
    1a1c:	bl	b834 <DMAChannel::begin(bool)>
    1a20:	add.w	r0, r4, #8
    1a24:	movs	r1, #0
    1a26:	bl	b834 <DMAChannel::begin(bool)>

extern uint8_t analog_write_res;
extern const struct _pwm_pin_info_struct pwm_pin_info[];
volatile audio_block_t * AudioOutputPWM::block = NULL;
DMAMEM __attribute__((aligned(32))) static uint16_t pwm_tx_buffer[2][AUDIO_BLOCK_SAMPLES * 2];
DMAChannel AudioOutputPWM::dma[2];
    1a2a:	ldr	r2, [pc, #16]	; (1a3c <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x28>)
    1a2c:	ldr	r1, [pc, #16]	; (1a40 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x2c>)
    1a2e:	movs	r0, #0
	old_block = (audio_block_t*)block ;  // block is defined as volatile
	block = new_block ;
	__enable_irq();
	if (old_block)
		release (old_block);
}
    1a30:	ldmia.w	sp!, {r4, lr}

extern uint8_t analog_write_res;
extern const struct _pwm_pin_info_struct pwm_pin_info[];
volatile audio_block_t * AudioOutputPWM::block = NULL;
DMAMEM __attribute__((aligned(32))) static uint16_t pwm_tx_buffer[2][AUDIO_BLOCK_SAMPLES * 2];
DMAChannel AudioOutputPWM::dma[2];
    1a34:	b.w	bcfc <__aeabi_atexit>
    1a38:	.word	0x20017a64
    1a3c:	.word	0x20001f18
    1a40:	.word	0x000019f9

00001a44 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    1a44:	ldr	r2, [pc, #8]	; (1a50 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    1a46:	ldr	r1, [pc, #12]	; (1a54 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    1a48:	ldr	r0, [pc, #12]	; (1a58 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    1a4a:	b.w	bcfc <__aeabi_atexit>
    1a4e:	nop
    1a50:	.word	0x20001f18
    1a54:	.word	0x00000b6d
    1a58:	.word	0x20017a24

00001a5c <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211_2::dma(false);
    1a5c:	ldr	r2, [pc, #8]	; (1a68 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
    1a5e:	ldr	r1, [pc, #12]	; (1a6c <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    1a60:	ldr	r0, [pc, #12]	; (1a70 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    1a62:	b.w	bcfc <__aeabi_atexit>
    1a66:	nop
    1a68:	.word	0x20001f18
    1a6c:	.word	0x00000b6d
    1a70:	.word	0x20017b1c

00001a74 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    1a74:	ldr	r2, [pc, #8]	; (1a80 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    1a76:	ldr	r1, [pc, #12]	; (1a84 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    1a78:	ldr	r0, [pc, #12]	; (1a88 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    1a7a:	b.w	bcfc <__aeabi_atexit>
    1a7e:	nop
    1a80:	.word	0x20001f18
    1a84:	.word	0x00000b6d
    1a88:	.word	0x20017afc

00001a8c <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
    1a8c:	ldr	r2, [pc, #8]	; (1a98 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
    1a8e:	ldr	r1, [pc, #12]	; (1a9c <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
    1a90:	ldr	r0, [pc, #12]	; (1aa0 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
    1a92:	b.w	bcfc <__aeabi_atexit>
    1a96:	nop
    1a98:	.word	0x20001f18
    1a9c:	.word	0x00000b6d
    1aa0:	.word	0x20017ad4

00001aa4 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
audio_block_t * AudioInputTDM2::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM2::update_responsibility = false;
DMAChannel AudioInputTDM2::dma(false);
    1aa4:	ldr	r2, [pc, #8]	; (1ab0 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
    1aa6:	ldr	r1, [pc, #12]	; (1ab4 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
    1aa8:	ldr	r0, [pc, #12]	; (1ab8 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
    1aaa:	b.w	bcfc <__aeabi_atexit>
    1aae:	nop
    1ab0:	.word	0x20001f18
    1ab4:	.word	0x00000b6d
    1ab8:	.word	0x20017a4c

00001abc <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:
#include <Arduino.h>
#include "input_adc.h"

extern "C" void xbar_connect(unsigned int input, unsigned int output);

DMAChannel AudioInputAnalog::dma(false);
    1abc:	ldr	r2, [pc, #8]	; (1ac8 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
    1abe:	ldr	r1, [pc, #12]	; (1acc <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
    1ac0:	ldr	r0, [pc, #12]	; (1ad0 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
    1ac2:	b.w	bcfc <__aeabi_atexit>
    1ac6:	nop
    1ac8:	.word	0x20001f18
    1acc:	.word	0x00000b6d
    1ad0:	.word	0x20017abc

00001ad4 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM2::block_left = NULL;
bool AudioInputPDM2::update_responsibility = false;
DMAChannel AudioInputPDM2::dma(false);
    1ad4:	ldr	r2, [pc, #8]	; (1ae0 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0xc>)
    1ad6:	ldr	r1, [pc, #12]	; (1ae4 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x10>)
    1ad8:	ldr	r0, [pc, #12]	; (1ae8 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x14>)
    1ada:	b.w	bcfc <__aeabi_atexit>
    1ade:	nop
    1ae0:	.word	0x20001f18
    1ae4:	.word	0x00000b6d
    1ae8:	.word	0x20017a44

00001aec <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
    1aec:	ldr	r2, [pc, #8]	; (1af8 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
    1aee:	ldr	r1, [pc, #12]	; (1afc <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
    1af0:	ldr	r0, [pc, #12]	; (1b00 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
    1af2:	b.w	bcfc <__aeabi_atexit>
    1af6:	nop
    1af8:	.word	0x20001f18
    1afc:	.word	0x00000b6d
    1b00:	.word	0x20017a3c

00001b04 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    1b04:	ldr	r2, [pc, #8]	; (1b10 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    1b06:	ldr	r1, [pc, #12]	; (1b14 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    1b08:	ldr	r0, [pc, #12]	; (1b18 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    1b0a:	b.w	bcfc <__aeabi_atexit>
    1b0e:	nop
    1b10:	.word	0x20001f18
    1b14:	.word	0x00000b6d
    1b18:	.word	0x20017ae4

00001b1c <SDFile::isOpen()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    1b1c:	ldr	r3, [r0, #80]	; 0x50
    1b1e:	cbz	r3, 1b24 <SDFile::isOpen()+0x8>
    1b20:	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
    1b22:	bx	lr
    1b24:	ldr	r0, [r0, #84]	; 0x54
    1b26:	adds	r0, #0
    1b28:	it	ne
    1b2a:	movne	r0, #1
    1b2c:	bx	lr
    1b2e:	nop

00001b30 <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
    1b30:	push	{r4, lr}
    1b32:	mov	r4, r0
		if (filename) {
    1b34:	ldr	r0, [r0, #88]	; 0x58
    1b36:	cbz	r0, 1b40 <SDFile::close()+0x10>
			free(filename);
    1b38:	bl	c0e8 <free>
			filename = nullptr;
    1b3c:	movs	r3, #0
    1b3e:	str	r3, [r4, #88]	; 0x58
    1b40:	ldr	r3, [r4, #80]	; 0x50
    1b42:	cbz	r3, 1b50 <SDFile::close()+0x20>
		}
		if (sdfatfile.isOpen()) {
			sdfatfile.close();
    1b44:	add.w	r0, r4, #24
		}
	}
    1b48:	ldmia.w	sp!, {r4, lr}
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		if (sdfatfile.isOpen()) {
			sdfatfile.close();
    1b4c:	b.w	79ac <FsBaseFile::close()>
    1b50:	ldr	r3, [r4, #84]	; 0x54
    1b52:	cmp	r3, #0
    1b54:	bne.n	1b44 <SDFile::close()+0x14>
    1b56:	pop	{r4, pc}

00001b58 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
    1b58:	push	{r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1b5a:	movs	r3, #0
    1b5c:	sub	sp, #84	; 0x54
    1b5e:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1b62:	ldr	r7, [pc, #136]	; (1bec <SDFile::openNextFile(unsigned char)+0x94>)
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    1b64:	mov	r2, r3
    1b66:	mov	r5, r0
    1b68:	adds	r1, #24
    1b6a:	add	r0, sp, #16
    1b6c:	str	r3, [sp, #4]
    1b6e:	strb.w	r3, [sp, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    1b72:	str	r3, [sp, #72]	; 0x48
    1b74:	str	r3, [sp, #76]	; 0x4c
    1b76:	str	r4, [sp, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1b78:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    1b7a:	bl	7adc <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    1b7e:	ldr	r3, [sp, #72]	; 0x48
    1b80:	cmp	r3, #0
    1b82:	beq.n	1bd8 <SDFile::openNextFile(unsigned char)+0x80>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
    1b84:	movs	r0, #92	; 0x5c
// FileImpl instances are automatically deleted when the last referencing
// File is closed or goes out of scope.  The refcount variable is meant to
// be maintained by File class instances, never access by FileImpl functions.
// The FileImpl functions are meant to be called only by use of File instances.
//
class FileImpl {
    1b86:	movs	r6, #0
    1b88:	bl	bc98 <operator new(unsigned int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    1b8c:	ldr	r3, [sp, #4]
    1b8e:	mov	r4, r0
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    1b90:	ldr	r2, [pc, #92]	; (1bf0 <SDFile::openNextFile(unsigned char)+0x98>)
    1b92:	add	r1, sp, #16
    1b94:	adds	r0, #24
    1b96:	str	r3, [r4, #12]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1b98:	ldr	r3, [sp, #8]
    1b9a:	str	r2, [r4, #0]
    1b9c:	str	r3, [r4, #16]
    1b9e:	ldr	r2, [pc, #84]	; (1bf4 <SDFile::openNextFile(unsigned char)+0x9c>)
    1ba0:	ldrb.w	r3, [sp, #12]
    1ba4:	str	r2, [r4, #8]
    1ba6:	strb	r3, [r4, #20]
    1ba8:	str	r6, [r4, #4]
    1baa:	bl	7928 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
		f = file;
		if (f) f->refcount++;
    1bae:	ldr	r3, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1bb0:	mov.w	r1, #1000	; 0x3e8
	// Explicit FileImpl constructor.  Used by libraries which provide
	// access to files stored on media.  Normally this is used within
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
    1bb4:	ldr	r2, [pc, #64]	; (1bf8 <SDFile::openNextFile(unsigned char)+0xa0>)
		f = file;
		if (f) f->refcount++;
    1bb6:	adds	r3, #1
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1bb8:	str	r7, [r4, #8]
    1bba:	str	r6, [r4, #88]	; 0x58
{
  public:
	constexpr Print() : write_error(0) {}
    1bbc:	str	r6, [r5, #4]
    1bbe:	strb	r6, [r5, #12]
	// access to files stored on media.  Normally this is used within
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
		f = file;
    1bc0:	str	r4, [r5, #16]
		if (f) f->refcount++;
    1bc2:	str	r3, [r4, #4]
    1bc4:	str	r1, [r5, #8]
	// Explicit FileImpl constructor.  Used by libraries which provide
	// access to files stored on media.  Normally this is used within
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
    1bc6:	str	r2, [r5, #0]
    1bc8:	ldr	r3, [pc, #48]	; (1bfc <SDFile::openNextFile(unsigned char)+0xa4>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    1bca:	add	r0, sp, #16
    1bcc:	str	r3, [sp, #0]
    1bce:	bl	79ac <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
    1bd2:	mov	r0, r5
    1bd4:	add	sp, #84	; 0x54
    1bd6:	pop	{r4, r5, r6, r7, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    1bd8:	ldr	r3, [sp, #76]	; 0x4c
    1bda:	cmp	r3, #0
    1bdc:	bne.n	1b84 <SDFile::openNextFile(unsigned char)+0x2c>
// closed the file or the File instance created without referencing
// anything.
public:
	// Empty constructor, used when a program creates a File variable
	// but does not immediately assign or initialize it.
	constexpr File() : f(nullptr) { }
    1bde:	ldr	r2, [pc, #24]	; (1bf8 <SDFile::openNextFile(unsigned char)+0xa0>)
    1be0:	str	r3, [r5, #4]
    1be2:	str	r4, [r5, #8]
    1be4:	strb	r3, [r5, #12]
    1be6:	str	r3, [r5, #16]
    1be8:	str	r2, [r5, #0]
    1bea:	b.n	1bc8 <SDFile::openNextFile(unsigned char)+0x70>
    1bec:	.word	0x20000714
    1bf0:	.word	0x20000738
    1bf4:	.word	0x20000794
    1bf8:	.word	0x200006e8
    1bfc:	.word	0x20000620

00001c00 <SDFile::peek()>:
		close();
	}
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
    1c00:	ldr	r3, [r0, #80]	; 0x50
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
    1c02:	cbz	r3, 1c0a <SDFile::peek()+0xa>
    1c04:	mov	r0, r3
    1c06:	b.w	62a8 <FatFile::peek()>
    1c0a:	ldr	r0, [r0, #84]	; 0x54
    1c0c:	cbz	r0, 1c12 <SDFile::peek()+0x12>
    1c0e:	b.w	3e50 <ExFatFile::peek()>
		return sdfatfile.peek();
	}
    1c12:	mov.w	r0, #4294967295
    1c16:	bx	lr

00001c18 <SDFile::getCreateTime(DateTimeFields&)>:
		return File();
	}
	virtual void rewindDirectory(void) {
		sdfatfile.rewindDirectory();
	}
	virtual bool getCreateTime(DateTimeFields &tm) {
    1c18:	ldr	r3, [r0, #80]	; 0x50
    1c1a:	push	{r4, r5, r6, r7, lr}
    1c1c:	mov	r4, r1
    1c1e:	sub	sp, #12
   *
   * \return true for success or false for failure.
   */
  bool getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
    1c20:	cbz	r3, 1c6e <SDFile::getCreateTime(DateTimeFields&)+0x56>
    1c22:	mov	r0, r3
    1c24:	add.w	r2, sp, #6
    1c28:	add	r1, sp, #4
    1c2a:	bl	5d78 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
    1c2e:	cbz	r0, 1c68 <SDFile::getCreateTime(DateTimeFields&)+0x50>
		if ((fat_date == 0) && (fat_time == 0)) return false;
    1c30:	ldrh.w	r3, [sp, #4]
    1c34:	ldrh.w	r2, [sp, #6]
    1c38:	cbnz	r3, 1c3c <SDFile::getCreateTime(DateTimeFields&)+0x24>
    1c3a:	cbz	r2, 1c68 <SDFile::getCreateTime(DateTimeFields&)+0x50>
		tm.sec = FS_SECOND(fat_time);
    1c3c:	and.w	r6, r2, #31
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
    1c40:	ubfx	r5, r3, #5, #4
		tm.year = FS_YEAR(fat_date) - 1900;
    1c44:	asrs	r1, r3, #9
	virtual bool getCreateTime(DateTimeFields &tm) {
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
    1c46:	ubfx	r7, r2, #5, #6
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
    1c4a:	and.w	r3, r3, #31
	}
	virtual bool getCreateTime(DateTimeFields &tm) {
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
    1c4e:	lsls	r6, r6, #1
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
    1c50:	subs	r5, #1
		tm.year = FS_YEAR(fat_date) - 1900;
    1c52:	add.w	r1, r1, #1872	; 0x750
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
    1c56:	asrs	r2, r2, #11
	}
	virtual bool getCreateTime(DateTimeFields &tm) {
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
    1c58:	strb	r6, [r4, #0]
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
    1c5a:	strb	r5, [r4, #5]
		tm.year = FS_YEAR(fat_date) - 1900;
    1c5c:	strb	r1, [r4, #6]
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
    1c5e:	strb	r3, [r4, #4]
	virtual bool getCreateTime(DateTimeFields &tm) {
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
    1c60:	strb	r7, [r4, #1]
		tm.hour = FS_HOUR(fat_time);
    1c62:	strb	r2, [r4, #2]
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
    1c64:	add	sp, #12
    1c66:	pop	{r4, r5, r6, r7, pc}
	virtual void rewindDirectory(void) {
		sdfatfile.rewindDirectory();
	}
	virtual bool getCreateTime(DateTimeFields &tm) {
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
    1c68:	movs	r0, #0
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
    1c6a:	add	sp, #12
    1c6c:	pop	{r4, r5, r6, r7, pc}
    1c6e:	ldr	r0, [r0, #84]	; 0x54
    1c70:	cmp	r0, #0
    1c72:	beq.n	1c68 <SDFile::getCreateTime(DateTimeFields&)+0x50>
    1c74:	add.w	r2, sp, #6
    1c78:	add	r1, sp, #4
    1c7a:	bl	3b9c <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    1c7e:	b.n	1c2e <SDFile::getCreateTime(DateTimeFields&)+0x16>

00001c80 <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
    1c80:	ldr	r3, [r0, #80]	; 0x50
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
    1c82:	cbz	r3, 1cac <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
    1c84:	ldrb	r2, [r3, #0]
    1c86:	tst.w	r2, #112	; 0x70
    1c8a:	bne.n	1c8e <SDFile::rewindDirectory()+0xe>
    1c8c:	bx	lr
    1c8e:	push	{r4, lr}
    1c90:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    1c92:	movs	r1, #0
    1c94:	mov	r0, r3
    1c96:	bl	6554 <FatFile::seekSet(unsigned long)>
    1c9a:	ldr	r0, [r4, #84]	; 0x54
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
    1c9c:	cbz	r0, 1caa <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    1c9e:	movs	r2, #0
    1ca0:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
    1ca2:	ldmia.w	sp!, {r4, lr}
    1ca6:	b.w	3e7c <ExFatFile::seekSet(unsigned long long)>
    1caa:	pop	{r4, pc}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
    1cac:	ldr	r0, [r0, #84]	; 0x54
    1cae:	cmp	r0, #0
    1cb0:	beq.n	1c8c <SDFile::rewindDirectory()+0xc>
    1cb2:	ldrb.w	r3, [r0, #49]	; 0x31
    1cb6:	tst.w	r3, #80	; 0x50
    1cba:	beq.n	1c8c <SDFile::rewindDirectory()+0xc>
    1cbc:	movs	r2, #0
    1cbe:	movs	r3, #0
    1cc0:	b.w	3e7c <ExFatFile::seekSet(unsigned long long)>

00001cc4 <SDFile::name()>:
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
    1cc4:	push	{r3, r4, r5, lr}
		if (!filename) {
    1cc6:	ldr	r4, [r0, #88]	; 0x58
    1cc8:	cbz	r4, 1cce <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
    1cca:	mov	r0, r4
    1ccc:	pop	{r3, r4, r5, pc}
    1cce:	mov	r5, r0
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
    1cd0:	mov.w	r0, #256	; 0x100
    1cd4:	bl	c0d8 <malloc>
    1cd8:	mov	r1, r0
    1cda:	str	r0, [r5, #88]	; 0x58
			if (filename) {
    1cdc:	cbz	r0, 1d00 <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
    1cde:	ldr	r0, [r5, #80]	; 0x50
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    1ce0:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
    1ce2:	cbz	r0, 1cf0 <SDFile::name()+0x2c>
    1ce4:	mov.w	r2, #256	; 0x100
    1ce8:	bl	5b70 <FatFile::getName(char*, unsigned int)>
    1cec:	ldr	r4, [r5, #88]	; 0x58
    1cee:	b.n	1cca <SDFile::name()+0x6>
    1cf0:	ldr	r0, [r5, #84]	; 0x54
    1cf2:	cbz	r0, 1d06 <SDFile::name()+0x42>
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
    1cf4:	mov.w	r2, #256	; 0x100
    1cf8:	bl	3a18 <ExFatFile::getName8(char*, unsigned int)>
    1cfc:	ldr	r4, [r5, #88]	; 0x58
    1cfe:	b.n	1cca <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
    1d00:	ldr	r4, [pc, #8]	; (1d0c <SDFile::name()+0x48>)
    1d02:	str	r4, [r5, #88]	; 0x58
    1d04:	b.n	1cca <SDFile::name()+0x6>
    1d06:	mov	r4, r1
    1d08:	b.n	1cca <SDFile::name()+0x6>
    1d0a:	nop
    1d0c:	.word	0x20018bca

00001d10 <SDFile::setCreateTime(DateTimeFields const&)>:
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool setCreateTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
    1d10:	ldrb	r2, [r1, #6]
    1d12:	sub.w	r3, r2, #80	; 0x50
    1d16:	lsls	r3, r3, #24
    1d18:	bmi.n	1d5e <SDFile::setCreateTime(DateTimeFields const&)+0x4e>
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
    1d1a:	addw	r2, r2, #1900	; 0x76c
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool setCreateTime(const DateTimeFields &tm) {
    1d1e:	push	{r4, r5, r6, r7, lr}
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
    1d20:	ldrb	r3, [r1, #5]
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool setCreateTime(const DateTimeFields &tm) {
    1d22:	sub	sp, #20
    1d24:	ldr	r4, [r0, #80]	; 0x50
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
    1d26:	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
    1d28:	ldrb	r5, [r1, #4]
    1d2a:	ldrb	r6, [r1, #2]
    1d2c:	ldrb	r7, [r1, #1]
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool setCreateTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
    1d2e:	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
    1d30:	ldrb	r1, [r1, #0]
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
           m_xFile ?
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
           false;
    1d32:	cbz	r4, 1d48 <SDFile::setCreateTime(DateTimeFields const&)+0x38>
    1d34:	str	r1, [sp, #12]
    1d36:	mov	r0, r4
    1d38:	str	r7, [sp, #8]
    1d3a:	movs	r1, #2
    1d3c:	str	r6, [sp, #4]
    1d3e:	str	r5, [sp, #0]
    1d40:	bl	6794 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
    1d44:	add	sp, #20
    1d46:	pop	{r4, r5, r6, r7, pc}
   */
  bool timestamp(uint8_t flags, uint16_t year, uint8_t month, uint8_t day,
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
           m_xFile ?
    1d48:	ldr	r0, [r0, #84]	; 0x54
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
           false;
    1d4a:	cmp	r0, #0
    1d4c:	beq.n	1d44 <SDFile::setCreateTime(DateTimeFields const&)+0x34>
    1d4e:	str	r1, [sp, #12]
    1d50:	movs	r1, #2
    1d52:	stmia.w	sp, {r5, r6, r7}
    1d56:	bl	4f48 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    1d5a:	add	sp, #20
    1d5c:	pop	{r4, r5, r6, r7, pc}
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool setCreateTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
    1d5e:	movs	r0, #0
    1d60:	bx	lr
    1d62:	nop

00001d64 <SDFile::truncate(unsigned long long)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
    1d64:	push	{r4, r6, r7, lr}
    1d66:	ldr	r4, [r0, #80]	; 0x50
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
           m_xFile ? m_xFile->truncate(length) : false;
    1d68:	cbz	r4, 1d8e <SDFile::truncate(unsigned long long)+0x2a>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
    1d6a:	cmp	r3, #1
    1d6c:	it	eq
    1d6e:	cmpeq	r2, #0
    1d70:	bcc.n	1d76 <SDFile::truncate(unsigned long long)+0x12>
    1d72:	movs	r0, #0
		return sdfatfile.truncate(size);
	}
    1d74:	pop	{r4, r6, r7, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
    1d76:	mov	r1, r2
    1d78:	mov	r0, r4
    1d7a:	bl	6554 <FatFile::seekSet(unsigned long)>
    1d7e:	cmp	r0, #0
    1d80:	beq.n	1d72 <SDFile::truncate(unsigned long long)+0xe>
    1d82:	mov	r0, r4
    1d84:	bl	686c <FatFile::truncate()>
    1d88:	cmp	r0, #0
    1d8a:	beq.n	1d72 <SDFile::truncate(unsigned long long)+0xe>
    1d8c:	pop	{r4, r6, r7, pc}
           m_xFile ? m_xFile->truncate(length) : false;
    1d8e:	ldr	r4, [r0, #84]	; 0x54
    1d90:	cmp	r4, #0
    1d92:	beq.n	1d72 <SDFile::truncate(unsigned long long)+0xe>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    1d94:	mov	r0, r4
    1d96:	bl	3e7c <ExFatFile::seekSet(unsigned long long)>
    1d9a:	cmp	r0, #0
    1d9c:	beq.n	1d72 <SDFile::truncate(unsigned long long)+0xe>
    1d9e:	mov	r0, r4
    1da0:	ldmia.w	sp!, {r4, r6, r7, lr}
    1da4:	b.w	50e4 <ExFatFile::truncate()>

00001da8 <SDFile::getModifyTime(DateTimeFields&)>:
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool getModifyTime(DateTimeFields &tm) {
    1da8:	ldr	r3, [r0, #80]	; 0x50
    1daa:	push	{r4, r5, r6, r7, lr}
    1dac:	mov	r4, r1
    1dae:	sub	sp, #12
   *
   * \return true for success or false for failure.
   */
  bool getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
    1db0:	cbz	r3, 1dfe <SDFile::getModifyTime(DateTimeFields&)+0x56>
    1db2:	mov	r0, r3
    1db4:	add.w	r2, sp, #6
    1db8:	add	r1, sp, #4
    1dba:	bl	5d98 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
    1dbe:	cbz	r0, 1df8 <SDFile::getModifyTime(DateTimeFields&)+0x50>
		if ((fat_date == 0) && (fat_time == 0)) return false;
    1dc0:	ldrh.w	r3, [sp, #4]
    1dc4:	ldrh.w	r2, [sp, #6]
    1dc8:	cbnz	r3, 1dcc <SDFile::getModifyTime(DateTimeFields&)+0x24>
    1dca:	cbz	r2, 1df8 <SDFile::getModifyTime(DateTimeFields&)+0x50>
		tm.sec = FS_SECOND(fat_time);
    1dcc:	and.w	r6, r2, #31
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
    1dd0:	ubfx	r5, r3, #5, #4
		tm.year = FS_YEAR(fat_date) - 1900;
    1dd4:	asrs	r1, r3, #9
	virtual bool getModifyTime(DateTimeFields &tm) {
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
    1dd6:	ubfx	r7, r2, #5, #6
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
    1dda:	and.w	r3, r3, #31
	}
	virtual bool getModifyTime(DateTimeFields &tm) {
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
    1dde:	lsls	r6, r6, #1
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
    1de0:	subs	r5, #1
		tm.year = FS_YEAR(fat_date) - 1900;
    1de2:	add.w	r1, r1, #1872	; 0x750
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
    1de6:	asrs	r2, r2, #11
	}
	virtual bool getModifyTime(DateTimeFields &tm) {
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
    1de8:	strb	r6, [r4, #0]
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
    1dea:	strb	r5, [r4, #5]
		tm.year = FS_YEAR(fat_date) - 1900;
    1dec:	strb	r1, [r4, #6]
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
    1dee:	strb	r3, [r4, #4]
	virtual bool getModifyTime(DateTimeFields &tm) {
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
		if ((fat_date == 0) && (fat_time == 0)) return false;
		tm.sec = FS_SECOND(fat_time);
		tm.min = FS_MINUTE(fat_time);
    1df0:	strb	r7, [r4, #1]
		tm.hour = FS_HOUR(fat_time);
    1df2:	strb	r2, [r4, #2]
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
    1df4:	add	sp, #12
    1df6:	pop	{r4, r5, r6, r7, pc}
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool getModifyTime(DateTimeFields &tm) {
		uint16_t fat_date, fat_time;
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
    1df8:	movs	r0, #0
		tm.hour = FS_HOUR(fat_time);
		tm.mday = FS_DAY(fat_date);
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
    1dfa:	add	sp, #12
    1dfc:	pop	{r4, r5, r6, r7, pc}
    1dfe:	ldr	r0, [r0, #84]	; 0x54
    1e00:	cmp	r0, #0
    1e02:	beq.n	1df8 <SDFile::getModifyTime(DateTimeFields&)+0x50>
    1e04:	add.w	r2, sp, #6
    1e08:	add	r1, sp, #4
    1e0a:	bl	3bc0 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    1e0e:	b.n	1dbe <SDFile::getModifyTime(DateTimeFields&)+0x16>

00001e10 <SDFile::size()>:
		return false;
	}
	virtual uint64_t position() {
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
    1e10:	ldr	r3, [r0, #80]	; 0x50
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    1e12:	cbz	r3, 1e1a <SDFile::size()+0xa>
    1e14:	ldr	r0, [r3, #28]
    1e16:	movs	r1, #0
    1e18:	bx	lr
    1e1a:	ldr	r3, [r0, #84]	; 0x54
    1e1c:	cbz	r3, 1e24 <SDFile::size()+0x14>
    1e1e:	ldr	r0, [r3, #16]
    1e20:	ldr	r1, [r3, #20]
    1e22:	bx	lr
    1e24:	mov	r0, r3
    1e26:	mov	r1, r3
		return sdfatfile.size();
	}
    1e28:	bx	lr
    1e2a:	nop

00001e2c <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
    1e2c:	ldr	r3, [r0, #80]	; 0x50
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    1e2e:	cbz	r3, 1e36 <SDFile::position()+0xa>
    1e30:	ldr	r0, [r3, #20]
    1e32:	movs	r1, #0
    1e34:	bx	lr
    1e36:	ldr	r3, [r0, #84]	; 0x54
    1e38:	cbz	r3, 1e40 <SDFile::position()+0x14>
    1e3a:	ldmia.w	r3, {r0, r1}
    1e3e:	bx	lr
    1e40:	mov	r0, r3
    1e42:	mov	r1, r3
		return sdfatfile.curPosition();
	}
    1e44:	bx	lr
    1e46:	nop

00001e48 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
    1e48:	ldr	r3, [r0, #80]	; 0x50
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    1e4a:	cbz	r3, 1e52 <SDFile::read(void*, unsigned int)+0xa>
    1e4c:	mov	r0, r3
    1e4e:	b.w	610c <FatFile::read(void*, unsigned int)>
    1e52:	ldr	r0, [r0, #84]	; 0x54
    1e54:	cbz	r0, 1e5a <SDFile::read(void*, unsigned int)+0x12>
    1e56:	b.w	3c9c <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
    1e5a:	mov.w	r0, #4294967295
    1e5e:	bx	lr

00001e60 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
    1e60:	ldr	r3, [r0, #80]	; 0x50
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
    1e62:	cbz	r3, 1e72 <SDFile::isDirectory()+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
    1e64:	ldrb	r3, [r3, #0]
    1e66:	tst.w	r3, #112	; 0x70
    1e6a:	ite	ne
    1e6c:	movne	r0, #1
    1e6e:	moveq	r0, #0
    1e70:	bx	lr
    1e72:	ldr	r0, [r0, #84]	; 0x54
    1e74:	cbz	r0, 1e84 <SDFile::isDirectory()+0x24>
   */
  bool isBusy();
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    1e76:	ldrb.w	r3, [r0, #49]	; 0x31
    1e7a:	tst.w	r3, #80	; 0x50
    1e7e:	ite	ne
    1e80:	movne	r0, #1
    1e82:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
    1e84:	bx	lr
    1e86:	nop

00001e88 <SDFile::setModifyTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
    1e88:	ldrb	r2, [r1, #6]
    1e8a:	sub.w	r3, r2, #80	; 0x50
    1e8e:	lsls	r3, r3, #24
    1e90:	bmi.n	1ed6 <SDFile::setModifyTime(DateTimeFields const&)+0x4e>
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
    1e92:	addw	r2, r2, #1900	; 0x76c
	virtual bool setCreateTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
    1e96:	push	{r4, r5, r6, r7, lr}
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
    1e98:	ldrb	r3, [r1, #5]
	virtual bool setCreateTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
    1e9a:	sub	sp, #20
    1e9c:	ldr	r4, [r0, #80]	; 0x50
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
    1e9e:	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
    1ea0:	ldrb	r5, [r1, #4]
    1ea2:	ldrb	r6, [r1, #2]
    1ea4:	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
    1ea6:	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
    1ea8:	ldrb	r1, [r1, #0]
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
           m_xFile ?
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
           false;
    1eaa:	cbz	r4, 1ec0 <SDFile::setModifyTime(DateTimeFields const&)+0x38>
    1eac:	str	r1, [sp, #12]
    1eae:	mov	r0, r4
    1eb0:	str	r7, [sp, #8]
    1eb2:	movs	r1, #4
    1eb4:	str	r6, [sp, #4]
    1eb6:	str	r5, [sp, #0]
    1eb8:	bl	6794 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
    1ebc:	add	sp, #20
    1ebe:	pop	{r4, r5, r6, r7, pc}
   */
  bool timestamp(uint8_t flags, uint16_t year, uint8_t month, uint8_t day,
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
           m_xFile ?
    1ec0:	ldr	r0, [r0, #84]	; 0x54
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
           false;
    1ec2:	cmp	r0, #0
    1ec4:	beq.n	1ebc <SDFile::setModifyTime(DateTimeFields const&)+0x34>
    1ec6:	str	r1, [sp, #12]
    1ec8:	movs	r1, #4
    1eca:	stmia.w	sp, {r5, r6, r7}
    1ece:	bl	4f48 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    1ed2:	add	sp, #20
    1ed4:	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
    1ed6:	movs	r0, #0
    1ed8:	bx	lr
    1eda:	nop

00001edc <File::flush()>:
	}
	int peek() {
		return (f) ? f->peek() : -1;
	}
	void flush() {
		if (f) f->flush();
    1edc:	ldr	r3, [r0, #16]
    1ede:	cbz	r3, 1efa <File::flush()+0x1e>
    1ee0:	ldr	r2, [r3, #0]
    1ee2:	ldr	r1, [pc, #28]	; (1f00 <File::flush()+0x24>)
    1ee4:	ldr	r2, [r2, #24]
    1ee6:	cmp	r2, r1
    1ee8:	bne.n	1efc <File::flush()+0x20>
    1eea:	ldr	r0, [r3, #80]	; 0x50
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
    1eec:	cbz	r0, 1ef2 <File::flush()+0x16>
    1eee:	b.w	6788 <FatFile::sync()>
    1ef2:	ldr	r0, [r3, #84]	; 0x54
    1ef4:	cbz	r0, 1efa <File::flush()+0x1e>
    1ef6:	b.w	4c60 <ExFatFile::sync()>
    1efa:	bx	lr
    1efc:	mov	r0, r3
    1efe:	bx	r2
    1f00:	.word	0x00001f05

00001f04 <SDFile::flush()>:
		return sdfatfile.peek();
	}
	virtual int available() {
		return sdfatfile.available();
	}
	virtual void flush() {
    1f04:	ldr	r3, [r0, #80]	; 0x50
    1f06:	cbz	r3, 1f0e <SDFile::flush()+0xa>
    1f08:	mov	r0, r3
    1f0a:	b.w	6788 <FatFile::sync()>
    1f0e:	ldr	r0, [r0, #84]	; 0x54
    1f10:	cbz	r0, 1f16 <SDFile::flush()+0x12>
    1f12:	b.w	4c60 <ExFatFile::sync()>
    1f16:	bx	lr

00001f18 <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->read(buf, nbyte) : 0;
	}
	// Write bytes to a file
	virtual size_t write(const uint8_t *buf, size_t size) {
		// override print version
		return (f) ? f->write((void*)buf, size) : 0;
    1f18:	ldr	r3, [r0, #16]
    1f1a:	cbz	r3, 1f40 <File::write(unsigned char const*, unsigned int)+0x28>
    1f1c:	ldr	r0, [pc, #56]	; (1f58 <File::write(unsigned char const*, unsigned int)+0x40>)
	// Read bytes from a file.  Returns the number of bytes actually read.
	size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	// Write bytes to a file
	virtual size_t write(const uint8_t *buf, size_t size) {
    1f1e:	push	{r4}
		// override print version
		return (f) ? f->write((void*)buf, size) : 0;
    1f20:	ldr	r4, [r3, #0]
    1f22:	ldr	r4, [r4, #12]
    1f24:	cmp	r4, r0
    1f26:	bne.n	1f4c <File::write(unsigned char const*, unsigned int)+0x34>
    1f28:	ldr	r0, [r3, #80]	; 0x50
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1f2a:	cbz	r0, 1f34 <File::write(unsigned char const*, unsigned int)+0x1c>
	}
    1f2c:	ldr.w	r4, [sp], #4
    1f30:	b.w	68e4 <FatFile::write(void const*, unsigned int)>
    1f34:	ldr	r0, [r3, #84]	; 0x54
    1f36:	cbz	r0, 1f44 <File::write(unsigned char const*, unsigned int)+0x2c>
    1f38:	ldr.w	r4, [sp], #4
    1f3c:	b.w	51c8 <ExFatFile::write(void const*, unsigned int)>
    1f40:	movs	r0, #0
    1f42:	bx	lr
    1f44:	movs	r0, #0
    1f46:	ldr.w	r4, [sp], #4
    1f4a:	bx	lr
		return (f) ? f->read(buf, nbyte) : 0;
	}
	// Write bytes to a file
	virtual size_t write(const uint8_t *buf, size_t size) {
		// override print version
		return (f) ? f->write((void*)buf, size) : 0;
    1f4c:	mov	r0, r3
    1f4e:	mov	r3, r4
	}
    1f50:	ldr.w	r4, [sp], #4
		return (f) ? f->read(buf, nbyte) : 0;
	}
	// Write bytes to a file
	virtual size_t write(const uint8_t *buf, size_t size) {
		// override print version
		return (f) ? f->write((void*)buf, size) : 0;
    1f54:	bx	r3
    1f56:	nop
    1f58:	.word	0x00001f89

00001f5c <File::peek()>:
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
	}
	int peek() {
		return (f) ? f->peek() : -1;
    1f5c:	ldr	r3, [r0, #16]
    1f5e:	cbz	r3, 1f7e <File::peek()+0x22>
    1f60:	ldr	r2, [r3, #0]
    1f62:	ldr	r1, [pc, #32]	; (1f84 <File::peek()+0x28>)
    1f64:	ldr	r2, [r2, #20]
    1f66:	cmp	r2, r1
    1f68:	bne.n	1f7a <File::peek()+0x1e>
    1f6a:	ldr	r0, [r3, #80]	; 0x50
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
    1f6c:	cbz	r0, 1f72 <File::peek()+0x16>
    1f6e:	b.w	62a8 <FatFile::peek()>
    1f72:	ldr	r0, [r3, #84]	; 0x54
    1f74:	cbz	r0, 1f7e <File::peek()+0x22>
    1f76:	b.w	3e50 <ExFatFile::peek()>
    1f7a:	mov	r0, r3
    1f7c:	bx	r2
	}
    1f7e:	mov.w	r0, #4294967295
    1f82:	bx	lr
    1f84:	.word	0x00001c01

00001f88 <SDFile::write(void const*, unsigned int)>:
	friend class SDClass;
public:
	virtual ~SDFile(void) {
		close();
	}
	virtual size_t write(const void *buf, size_t size) {
    1f88:	ldr	r3, [r0, #80]	; 0x50
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1f8a:	cbz	r3, 1f92 <SDFile::write(void const*, unsigned int)+0xa>
    1f8c:	mov	r0, r3
    1f8e:	b.w	68e4 <FatFile::write(void const*, unsigned int)>
    1f92:	ldr	r0, [r0, #84]	; 0x54
    1f94:	cbz	r0, 1f9a <SDFile::write(void const*, unsigned int)+0x12>
    1f96:	b.w	51c8 <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
    1f9a:	bx	lr

00001f9c <File::write(unsigned char)>:
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
    1f9c:	push	{r4, lr}
		return (f) ? f->write(&b, 1) : 0;
    1f9e:	ldr	r3, [r0, #16]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
    1fa0:	sub	sp, #8
    1fa2:	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
    1fa6:	cbz	r3, 1fd8 <File::write(unsigned char)+0x3c>
    1fa8:	ldr	r1, [r3, #0]
    1faa:	ldr	r2, [pc, #64]	; (1fec <File::write(unsigned char)+0x50>)
    1fac:	ldr	r4, [r1, #12]
    1fae:	cmp	r4, r2
    1fb0:	bne.n	1fde <File::write(unsigned char)+0x42>
    1fb2:	ldr	r0, [r3, #80]	; 0x50
    1fb4:	cbz	r0, 1fc4 <File::write(unsigned char)+0x28>
    1fb6:	movs	r2, #1
    1fb8:	add.w	r1, sp, #7
    1fbc:	bl	68e4 <FatFile::write(void const*, unsigned int)>
	}
    1fc0:	add	sp, #8
    1fc2:	pop	{r4, pc}
    1fc4:	ldr	r0, [r3, #84]	; 0x54
    1fc6:	cmp	r0, #0
    1fc8:	beq.n	1fc0 <File::write(unsigned char)+0x24>
    1fca:	movs	r2, #1
    1fcc:	add.w	r1, sp, #7
    1fd0:	bl	51c8 <ExFatFile::write(void const*, unsigned int)>
    1fd4:	add	sp, #8
    1fd6:	pop	{r4, pc}
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
		return (f) ? f->write(&b, 1) : 0;
    1fd8:	mov	r0, r3
	}
    1fda:	add	sp, #8
    1fdc:	pop	{r4, pc}
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
		return (f) ? f->write(&b, 1) : 0;
    1fde:	movs	r2, #1
    1fe0:	add.w	r1, sp, #7
    1fe4:	mov	r0, r3
    1fe6:	blx	r4
	}
    1fe8:	add	sp, #8
    1fea:	pop	{r4, pc}
    1fec:	.word	0x00001f89

00001ff0 <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
    1ff0:	ldr	r3, [r0, #16]
    1ff2:	cbz	r3, 203e <File::read()+0x4e>
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
    1ff4:	ldr	r1, [r3, #0]
    1ff6:	ldr	r2, [pc, #76]	; (2044 <File::read()+0x54>)
		return (f) ? f->setModifyTime(tm) : false;
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
    1ff8:	push	{r4, lr}
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
    1ffa:	ldr	r4, [r1, #8]
		return (f) ? f->setModifyTime(tm) : false;
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
    1ffc:	sub	sp, #8
    1ffe:	cmp	r4, r2
    2000:	bne.n	202c <File::read()+0x3c>
    2002:	ldr	r0, [r3, #80]	; 0x50
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    2004:	cbz	r0, 201a <File::read()+0x2a>
    2006:	movs	r2, #1
    2008:	add.w	r1, sp, #7
    200c:	bl	610c <FatFile::read(void*, unsigned int)>
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
    2010:	cbz	r0, 2038 <File::read()+0x48>
		return b;
    2012:	ldrb.w	r0, [sp, #7]
	}
    2016:	add	sp, #8
    2018:	pop	{r4, pc}
    201a:	ldr	r0, [r3, #84]	; 0x54
    201c:	cmp	r0, #0
    201e:	beq.n	2012 <File::read()+0x22>
    2020:	movs	r2, #1
    2022:	add.w	r1, sp, #7
    2026:	bl	3c9c <ExFatFile::read(void*, unsigned int)>
    202a:	b.n	2010 <File::read()+0x20>
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
    202c:	mov	r0, r3
    202e:	movs	r2, #1
    2030:	add.w	r1, sp, #7
    2034:	blx	r4
    2036:	b.n	2010 <File::read()+0x20>
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
    2038:	mov.w	r0, #4294967295
    203c:	b.n	2016 <File::read()+0x26>
    203e:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
    2042:	bx	lr
    2044:	.word	0x00001e49

00002048 <SDFile::available()>:
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
    2048:	ldr	r2, [r0, #80]	; 0x50
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
    204a:	cbz	r2, 2066 <SDFile::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
    204c:	ldrb	r3, [r2, #0]
    204e:	and.w	r3, r3, #8
    2052:	and.w	r0, r3, #255	; 0xff
    2056:	cbz	r3, 209c <SDFile::available()+0x54>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
    2058:	ldr	r3, [r2, #28]
    205a:	ldr	r0, [r2, #20]
    205c:	subs	r0, r3, r0
    205e:	it	mi
    2060:	mvnmi.w	r0, #2147483648	; 0x80000000
    2064:	bx	lr
    2066:	ldr	r1, [r0, #84]	; 0x54
    2068:	cbz	r1, 209e <SDFile::available()+0x56>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
    206a:	ldrb.w	r3, [r1, #49]	; 0x31
    206e:	and.w	r3, r3, #8
    2072:	and.w	r0, r3, #255	; 0xff
    2076:	cbz	r3, 209c <SDFile::available()+0x54>
    2078:	ldrd	r2, r3, [r1, #16]
    207c:	ldrd	r0, r1, [r1]
    2080:	push	{r4, r5}
    2082:	subs	r0, r2, r0
    2084:	mov.w	r5, #0
    2088:	mvn.w	r4, #2147483648	; 0x80000000
    208c:	sbc.w	r1, r3, r1
    2090:	cmp	r5, r1
    2092:	it	eq
    2094:	cmpeq	r4, r0
    2096:	bcs.n	209a <SDFile::available()+0x52>
    2098:	mov	r0, r4
		return sdfatfile.available();
	}
    209a:	pop	{r4, r5}
    209c:	bx	lr
    209e:	mov	r0, r1
    20a0:	bx	lr
    20a2:	nop

000020a4 <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
    20a4:	ldr	r0, [r0, #16]
    20a6:	cmp	r0, #0
    20a8:	beq.n	210a <File::available()+0x66>
    20aa:	ldr	r3, [r0, #0]
    20ac:	ldr	r2, [pc, #96]	; (2110 <File::available()+0x6c>)
    20ae:	ldr	r3, [r3, #16]
    20b0:	cmp	r3, r2
    20b2:	bne.n	20d2 <File::available()+0x2e>
    20b4:	ldr	r2, [r0, #80]	; 0x50
    20b6:	cbz	r2, 20d4 <File::available()+0x30>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
    20b8:	ldrb	r3, [r2, #0]
    20ba:	and.w	r3, r3, #8
    20be:	and.w	r0, r3, #255	; 0xff
    20c2:	cbz	r3, 210a <File::available()+0x66>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
    20c4:	ldr	r3, [r2, #28]
    20c6:	ldr	r0, [r2, #20]
    20c8:	subs	r0, r3, r0
    20ca:	it	mi
    20cc:	mvnmi.w	r0, #2147483648	; 0x80000000
	}
    20d0:	bx	lr
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
    20d2:	bx	r3
    20d4:	ldr	r1, [r0, #84]	; 0x54
    20d6:	cbz	r1, 210c <File::available()+0x68>
    20d8:	ldrb.w	r3, [r1, #49]	; 0x31
    20dc:	and.w	r3, r3, #8
    20e0:	and.w	r0, r3, #255	; 0xff
    20e4:	cbz	r3, 210a <File::available()+0x66>
    20e6:	ldrd	r2, r3, [r1, #16]
    20ea:	ldrd	r0, r1, [r1]
	// Write bytes to a file
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
    20ee:	push	{r4, r5}
    20f0:	subs	r0, r2, r0
    20f2:	mov.w	r5, #0
    20f6:	mvn.w	r4, #2147483648	; 0x80000000
    20fa:	sbc.w	r1, r3, r1
    20fe:	cmp	r5, r1
    2100:	it	eq
    2102:	cmpeq	r4, r0
    2104:	bcs.n	2108 <File::available()+0x64>
    2106:	mov	r0, r4
		return (f) ? f->available() : 0;
	}
    2108:	pop	{r4, r5}
    210a:	bx	lr
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
    210c:	mov	r0, r1
    210e:	bx	lr
    2110:	.word	0x00002049

00002114 <SDFile::seek(unsigned long long, int)>:
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
		return sdfatfile.truncate(size);
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
    2114:	push	{r4, r6, r7}
    2116:	ldr	r4, [sp, #12]
    2118:	mov	r6, r2
    211a:	mov	r7, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
    211c:	cbz	r4, 212c <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
    211e:	cmp	r4, #1
    2120:	beq.n	2160 <SDFile::seek(unsigned long long, int)+0x4c>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
    2122:	cmp	r4, #2
    2124:	beq.n	2142 <SDFile::seek(unsigned long long, int)+0x2e>
		return false;
	}
    2126:	movs	r0, #0
    2128:	pop	{r4, r6, r7}
    212a:	bx	lr
    212c:	ldr	r4, [r0, #80]	; 0x50
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    212e:	cbz	r4, 2168 <SDFile::seek(unsigned long long, int)+0x54>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2130:	cmp	r3, #1
    2132:	it	eq
    2134:	cmpeq	r2, #0
    2136:	bcs.n	2126 <SDFile::seek(unsigned long long, int)+0x12>
    2138:	mov	r0, r4
    213a:	mov	r1, r2
    213c:	pop	{r4, r6, r7}
    213e:	b.w	6554 <FatFile::seekSet(unsigned long)>
    2142:	ldr	r3, [r0, #80]	; 0x50
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    2144:	cbz	r3, 2174 <SDFile::seek(unsigned long long, int)+0x60>
   * Can't be used for directory files since file size is not defined.
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int64_t offset = 0) {
    return seekSet(fileSize() + offset);
    2146:	ldr	r2, [r3, #28]
    2148:	adds	r6, r6, r2
    214a:	adc.w	r7, r7, #0
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    214e:	cmp	r7, #1
    2150:	it	eq
    2152:	cmpeq	r6, #0
    2154:	bcs.n	2126 <SDFile::seek(unsigned long long, int)+0x12>
    2156:	mov	r1, r6
    2158:	mov	r0, r3
    215a:	pop	{r4, r6, r7}
    215c:	b.w	6554 <FatFile::seekSet(unsigned long)>
    2160:	ldr	r3, [r0, #80]	; 0x50
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    2162:	cbz	r3, 218a <SDFile::seek(unsigned long long, int)+0x76>
  /** Set the files position to current position + \a pos. See seekSet().
   * \param[in] offset The new position in bytes from the current position.
   * \return true for success or false for failure.
   */
  bool seekCur(int64_t offset) {
    return seekSet(curPosition() + offset);
    2164:	ldr	r2, [r3, #20]
    2166:	b.n	2148 <SDFile::seek(unsigned long long, int)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    2168:	ldr	r0, [r0, #84]	; 0x54
    216a:	cmp	r0, #0
    216c:	beq.n	2126 <SDFile::seek(unsigned long long, int)+0x12>
    216e:	pop	{r4, r6, r7}
    2170:	b.w	3e7c <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    2174:	ldr	r3, [r0, #84]	; 0x54
    2176:	cmp	r3, #0
    2178:	beq.n	2126 <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    217a:	mov	r0, r3
    217c:	ldrd	r2, r3, [r3, #16]
    2180:	adds	r2, r2, r6
    2182:	adcs	r3, r7
    2184:	pop	{r4, r6, r7}
    2186:	b.w	3e7c <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
    218a:	ldr	r3, [r0, #84]	; 0x54
    218c:	cmp	r3, #0
    218e:	beq.n	2126 <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    2190:	mov	r0, r3
    2192:	ldrd	r2, r3, [r3]
    2196:	adds	r2, r2, r6
    2198:	adcs	r3, r7
    219a:	b.n	216e <SDFile::seek(unsigned long long, int)+0x5a>

0000219c <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
    219c:	push	{r3, r4, r5, lr}
    219e:	mov	r4, r0
    21a0:	ldr	r3, [pc, #48]	; (21d4 <SDFile::~SDFile()+0x38>)
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
		if (filename) {
    21a2:	ldr	r0, [r0, #88]	; 0x58
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
    21a4:	str	r3, [r4, #0]
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
		if (filename) {
    21a6:	cbz	r0, 21b0 <SDFile::~SDFile()+0x14>
			free(filename);
    21a8:	bl	c0e8 <free>
			filename = nullptr;
    21ac:	movs	r3, #0
    21ae:	str	r3, [r4, #88]	; 0x58
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    21b0:	ldr	r3, [r4, #80]	; 0x50
		}
		if (sdfatfile.isOpen()) {
			sdfatfile.close();
    21b2:	add.w	r5, r4, #24
    21b6:	cbz	r3, 21cc <SDFile::~SDFile()+0x30>
    21b8:	mov	r0, r5
    21ba:	bl	79ac <FsBaseFile::close()>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
    21be:	ldr	r3, [pc, #24]	; (21d8 <SDFile::~SDFile()+0x3c>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    21c0:	mov	r0, r5
    21c2:	str	r3, [r4, #8]
    21c4:	bl	79ac <FsBaseFile::close()>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
		close();
	}
    21c8:	mov	r0, r4
    21ca:	pop	{r3, r4, r5, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    21cc:	ldr	r3, [r4, #84]	; 0x54
    21ce:	cmp	r3, #0
    21d0:	bne.n	21b8 <SDFile::~SDFile()+0x1c>
    21d2:	b.n	21be <SDFile::~SDFile()+0x22>
    21d4:	.word	0x20000738
    21d8:	.word	0x20000620

000021dc <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
    21dc:	push	{r3, r4, r5, lr}
    21de:	mov	r4, r0
    21e0:	ldr	r3, [pc, #56]	; (221c <SDFile::~SDFile()+0x40>)
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
		if (filename) {
    21e2:	ldr	r0, [r0, #88]	; 0x58
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
    21e4:	str	r3, [r4, #0]
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
		if (filename) {
    21e6:	cbz	r0, 21f0 <SDFile::~SDFile()+0x14>
			free(filename);
    21e8:	bl	c0e8 <free>
			filename = nullptr;
    21ec:	movs	r3, #0
    21ee:	str	r3, [r4, #88]	; 0x58
    21f0:	ldr	r3, [r4, #80]	; 0x50
		}
		if (sdfatfile.isOpen()) {
			sdfatfile.close();
    21f2:	add.w	r5, r4, #24
    21f6:	cbz	r3, 2214 <SDFile::~SDFile()+0x38>
    21f8:	mov	r0, r5
    21fa:	bl	79ac <FsBaseFile::close()>
    21fe:	ldr	r3, [pc, #32]	; (2220 <SDFile::~SDFile()+0x44>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    2200:	mov	r0, r5
    2202:	str	r3, [r4, #8]
    2204:	bl	79ac <FsBaseFile::close()>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
		close();
	}
    2208:	mov	r0, r4
    220a:	movs	r1, #92	; 0x5c
    220c:	bl	bc9c <operator delete(void*, unsigned int)>
    2210:	mov	r0, r4
    2212:	pop	{r3, r4, r5, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    2214:	ldr	r3, [r4, #84]	; 0x54
    2216:	cmp	r3, #0
    2218:	bne.n	21f8 <SDFile::~SDFile()+0x1c>
    221a:	b.n	21fe <SDFile::~SDFile()+0x22>
    221c:	.word	0x20000738
    2220:	.word	0x20000620

00002224 <File::~File()>:
		f = file.f;
		file.f = nullptr;
		return *this;
	}
#endif
	virtual ~File() {
    2224:	push	{r4, r5, r6, lr}
    2226:	ldr	r3, [pc, #148]	; (22bc <File::~File()+0x98>)
    2228:	mov	r5, r0
		//Serial.printf("File dtor %x, refcount=%d\n", (int)f, get_refcount());
		if (f) dec_refcount();
    222a:	ldr	r4, [r0, #16]
		f = file.f;
		file.f = nullptr;
		return *this;
	}
#endif
	virtual ~File() {
    222c:	str	r3, [r0, #0]
		//Serial.printf("File dtor %x, refcount=%d\n", (int)f, get_refcount());
		if (f) dec_refcount();
    222e:	cbz	r4, 2238 <File::~File()+0x14>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
    2230:	ldr	r6, [r4, #4]
    2232:	subs	r6, #1
    2234:	str	r6, [r4, #4]
    2236:	cbz	r6, 223c <File::~File()+0x18>
	}
#endif
	virtual ~File() {
		//Serial.printf("File dtor %x, refcount=%d\n", (int)f, get_refcount());
		if (f) dec_refcount();
	}
    2238:	mov	r0, r5
    223a:	pop	{r4, r5, r6, pc}
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
			f->close();
    223c:	ldr	r3, [r4, #0]
    223e:	ldr	r2, [pc, #128]	; (22c0 <File::~File()+0x9c>)
    2240:	ldr	r3, [r3, #44]	; 0x2c
    2242:	cmp	r3, r2
    2244:	bne.n	22a0 <File::~File()+0x7c>
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
		if (filename) {
    2246:	ldr	r0, [r4, #88]	; 0x58
    2248:	cbz	r0, 2250 <File::~File()+0x2c>
			free(filename);
    224a:	bl	c0e8 <free>
			filename = nullptr;
    224e:	str	r6, [r4, #88]	; 0x58
    2250:	ldr	r3, [r4, #80]	; 0x50
    2252:	cbz	r3, 22ac <File::~File()+0x88>
		}
		if (sdfatfile.isOpen()) {
			sdfatfile.close();
    2254:	add.w	r0, r4, #24
    2258:	bl	79ac <FsBaseFile::close()>
			delete f;
    225c:	ldr	r4, [r5, #16]
    225e:	cmp	r4, #0
    2260:	beq.n	2238 <File::~File()+0x14>
    2262:	ldr	r3, [r4, #0]
    2264:	ldr	r2, [pc, #92]	; (22c4 <File::~File()+0xa0>)
    2266:	ldr	r3, [r3, #4]
    2268:	cmp	r3, r2
    226a:	bne.n	22a6 <File::~File()+0x82>
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
    226c:	ldr	r3, [pc, #88]	; (22c8 <File::~File()+0xa4>)
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
		if (filename) {
    226e:	ldr	r0, [r4, #88]	; 0x58
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
    2270:	str	r3, [r4, #0]
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
		if (filename) {
    2272:	cbz	r0, 227c <File::~File()+0x58>
			free(filename);
    2274:	bl	c0e8 <free>
			filename = nullptr;
    2278:	movs	r3, #0
    227a:	str	r3, [r4, #88]	; 0x58
    227c:	ldr	r3, [r4, #80]	; 0x50
		}
		if (sdfatfile.isOpen()) {
			sdfatfile.close();
    227e:	add.w	r6, r4, #24
    2282:	cbz	r3, 22b4 <File::~File()+0x90>
    2284:	mov	r0, r6
    2286:	bl	79ac <FsBaseFile::close()>
    228a:	ldr	r3, [pc, #64]	; (22cc <File::~File()+0xa8>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    228c:	mov	r0, r6
    228e:	str	r3, [r4, #8]
    2290:	bl	79ac <FsBaseFile::close()>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
		close();
	}
    2294:	mov	r0, r4
    2296:	movs	r1, #92	; 0x5c
    2298:	bl	bc9c <operator delete(void*, unsigned int)>
	}
#endif
	virtual ~File() {
		//Serial.printf("File dtor %x, refcount=%d\n", (int)f, get_refcount());
		if (f) dec_refcount();
	}
    229c:	mov	r0, r5
    229e:	pop	{r4, r5, r6, pc}
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
			f->close();
    22a0:	mov	r0, r4
    22a2:	blx	r3
    22a4:	b.n	225c <File::~File()+0x38>
			delete f;
    22a6:	mov	r0, r4
    22a8:	blx	r3
	}
#endif
	virtual ~File() {
		//Serial.printf("File dtor %x, refcount=%d\n", (int)f, get_refcount());
		if (f) dec_refcount();
	}
    22aa:	b.n	2238 <File::~File()+0x14>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    22ac:	ldr	r3, [r4, #84]	; 0x54
    22ae:	cmp	r3, #0
    22b0:	bne.n	2254 <File::~File()+0x30>
    22b2:	b.n	225c <File::~File()+0x38>
    22b4:	ldr	r3, [r4, #84]	; 0x54
    22b6:	cmp	r3, #0
    22b8:	bne.n	2284 <File::~File()+0x60>
    22ba:	b.n	228a <File::~File()+0x66>
    22bc:	.word	0x200006e8
    22c0:	.word	0x00001b31
    22c4:	.word	0x000021dd
    22c8:	.word	0x20000738
    22cc:	.word	0x20000620

000022d0 <File::~File()>:
		f = file.f;
		file.f = nullptr;
		return *this;
	}
#endif
	virtual ~File() {
    22d0:	push	{r4, r5, r6, lr}
    22d2:	ldr	r3, [pc, #164]	; (2378 <File::~File()+0xa8>)
    22d4:	mov	r4, r0
		//Serial.printf("File dtor %x, refcount=%d\n", (int)f, get_refcount());
		if (f) dec_refcount();
    22d6:	ldr	r5, [r0, #16]
		f = file.f;
		file.f = nullptr;
		return *this;
	}
#endif
	virtual ~File() {
    22d8:	str	r3, [r0, #0]
		//Serial.printf("File dtor %x, refcount=%d\n", (int)f, get_refcount());
		if (f) dec_refcount();
    22da:	cbz	r5, 22e4 <File::~File()+0x14>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
    22dc:	ldr	r6, [r5, #4]
    22de:	subs	r6, #1
    22e0:	str	r6, [r5, #4]
    22e2:	cbz	r6, 22f0 <File::~File()+0x20>
	}
#endif
	virtual ~File() {
		//Serial.printf("File dtor %x, refcount=%d\n", (int)f, get_refcount());
		if (f) dec_refcount();
	}
    22e4:	mov	r0, r4
    22e6:	movs	r1, #20
    22e8:	bl	bc9c <operator delete(void*, unsigned int)>
    22ec:	mov	r0, r4
    22ee:	pop	{r4, r5, r6, pc}
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
			f->close();
    22f0:	ldr	r3, [r5, #0]
    22f2:	ldr	r2, [pc, #136]	; (237c <File::~File()+0xac>)
    22f4:	ldr	r3, [r3, #44]	; 0x2c
    22f6:	cmp	r3, r2
    22f8:	bne.n	235c <File::~File()+0x8c>
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
		if (filename) {
    22fa:	ldr	r0, [r5, #88]	; 0x58
    22fc:	cbz	r0, 2304 <File::~File()+0x34>
			free(filename);
    22fe:	bl	c0e8 <free>
			filename = nullptr;
    2302:	str	r6, [r5, #88]	; 0x58
    2304:	ldr	r3, [r5, #80]	; 0x50
    2306:	cbz	r3, 2368 <File::~File()+0x98>
		}
		if (sdfatfile.isOpen()) {
			sdfatfile.close();
    2308:	add.w	r0, r5, #24
    230c:	bl	79ac <FsBaseFile::close()>
			delete f;
    2310:	ldr	r5, [r4, #16]
    2312:	cmp	r5, #0
    2314:	beq.n	22e4 <File::~File()+0x14>
    2316:	ldr	r3, [r5, #0]
    2318:	ldr	r2, [pc, #100]	; (2380 <File::~File()+0xb0>)
    231a:	ldr	r3, [r3, #4]
    231c:	cmp	r3, r2
    231e:	bne.n	2362 <File::~File()+0x92>
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
    2320:	ldr	r3, [pc, #96]	; (2384 <File::~File()+0xb4>)
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
		if (filename) {
    2322:	ldr	r0, [r5, #88]	; 0x58
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
    2324:	str	r3, [r5, #0]
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
		if (filename) {
    2326:	cbz	r0, 2330 <File::~File()+0x60>
			free(filename);
    2328:	bl	c0e8 <free>
			filename = nullptr;
    232c:	movs	r3, #0
    232e:	str	r3, [r5, #88]	; 0x58
    2330:	ldr	r3, [r5, #80]	; 0x50
		}
		if (sdfatfile.isOpen()) {
			sdfatfile.close();
    2332:	add.w	r6, r5, #24
    2336:	cbz	r3, 2370 <File::~File()+0xa0>
    2338:	mov	r0, r6
    233a:	bl	79ac <FsBaseFile::close()>
    233e:	ldr	r3, [pc, #72]	; (2388 <File::~File()+0xb8>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    2340:	mov	r0, r6
    2342:	str	r3, [r5, #8]
    2344:	bl	79ac <FsBaseFile::close()>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
		close();
	}
    2348:	mov	r0, r5
    234a:	movs	r1, #92	; 0x5c
    234c:	bl	bc9c <operator delete(void*, unsigned int)>
	}
#endif
	virtual ~File() {
		//Serial.printf("File dtor %x, refcount=%d\n", (int)f, get_refcount());
		if (f) dec_refcount();
	}
    2350:	mov	r0, r4
    2352:	movs	r1, #20
    2354:	bl	bc9c <operator delete(void*, unsigned int)>
    2358:	mov	r0, r4
    235a:	pop	{r4, r5, r6, pc}
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
			f->close();
    235c:	mov	r0, r5
    235e:	blx	r3
    2360:	b.n	2310 <File::~File()+0x40>
			delete f;
    2362:	mov	r0, r5
    2364:	blx	r3
    2366:	b.n	22e4 <File::~File()+0x14>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    2368:	ldr	r3, [r5, #84]	; 0x54
    236a:	cmp	r3, #0
    236c:	bne.n	2308 <File::~File()+0x38>
    236e:	b.n	2310 <File::~File()+0x40>
    2370:	ldr	r3, [r5, #84]	; 0x54
    2372:	cmp	r3, #0
    2374:	bne.n	2338 <File::~File()+0x68>
    2376:	b.n	233e <File::~File()+0x6e>
    2378:	.word	0x200006e8
    237c:	.word	0x00001b31
    2380:	.word	0x000021dd
    2384:	.word	0x20000738
    2388:	.word	0x20000620

0000238c <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    238c:	ldr	r2, [pc, #8]	; (2398 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    238e:	ldr	r1, [pc, #12]	; (239c <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    2390:	ldr	r0, [pc, #12]	; (23a0 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    2392:	b.w	bcfc <__aeabi_atexit>
    2396:	nop
    2398:	.word	0x20001f18
    239c:	.word	0x00000b6d
    23a0:	.word	0x20017b14

000023a4 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
audio_block_t * AudioOutputTDM2::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM2::update_responsibility = false;
DMAChannel AudioOutputTDM2::dma(false);
    23a4:	ldr	r2, [pc, #8]	; (23b0 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
    23a6:	ldr	r1, [pc, #12]	; (23b4 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
    23a8:	ldr	r0, [pc, #12]	; (23b8 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
    23aa:	b.w	bcfc <__aeabi_atexit>
    23ae:	nop
    23b0:	.word	0x20001f18
    23b4:	.word	0x00000b6d
    23b8:	.word	0x20017ab4

000023bc <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
    23bc:	ldr	r2, [pc, #8]	; (23c8 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
    23be:	ldr	r1, [pc, #12]	; (23cc <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
    23c0:	ldr	r0, [pc, #12]	; (23d0 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
    23c2:	b.w	bcfc <__aeabi_atexit>
    23c6:	nop
    23c8:	.word	0x20001f18
    23cc:	.word	0x00000b6d
    23d0:	.word	0x20017aac

000023d4 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
    23d4:	ldr	r2, [pc, #8]	; (23e0 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
    23d6:	ldr	r1, [pc, #12]	; (23e4 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    23d8:	ldr	r0, [pc, #12]	; (23e8 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    23da:	b.w	bcfc <__aeabi_atexit>
    23de:	nop
    23e0:	.word	0x20001f18
    23e4:	.word	0x00000b6d
    23e8:	.word	0x20017aec

000023ec <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    23ec:	ldr	r2, [pc, #8]	; (23f8 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    23ee:	ldr	r1, [pc, #12]	; (23fc <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    23f0:	ldr	r0, [pc, #12]	; (2400 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    23f2:	b.w	bcfc <__aeabi_atexit>
    23f6:	nop
    23f8:	.word	0x20001f18
    23fc:	.word	0x00000b6d
    2400:	.word	0x20017acc

00002404 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    2404:	ldr	r2, [pc, #8]	; (2410 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    2406:	ldr	r1, [pc, #12]	; (2414 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    2408:	ldr	r0, [pc, #12]	; (2418 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    240a:	b.w	bcfc <__aeabi_atexit>
    240e:	nop
    2410:	.word	0x20001f18
    2414:	.word	0x00000b6d
    2418:	.word	0x20017a74

0000241c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    241c:	ldr	r2, [pc, #8]	; (2428 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    241e:	ldr	r1, [pc, #12]	; (242c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    2420:	ldr	r0, [pc, #12]	; (2430 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    2422:	b.w	bcfc <__aeabi_atexit>
    2426:	nop
    2428:	.word	0x20001f18
    242c:	.word	0x00000b6d
    2430:	.word	0x20017a34

00002434 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    2434:	ldr	r2, [pc, #8]	; (2440 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    2436:	ldr	r1, [pc, #12]	; (2444 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    2438:	ldr	r0, [pc, #12]	; (2448 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    243a:	b.w	bcfc <__aeabi_atexit>
    243e:	nop
    2440:	.word	0x20001f18
    2444:	.word	0x00000b6d
    2448:	.word	0x20017ac4

0000244c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
    244c:	ldr	r2, [pc, #8]	; (2458 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
    244e:	ldr	r1, [pc, #12]	; (245c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    2450:	ldr	r0, [pc, #12]	; (2460 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    2452:	b.w	bcfc <__aeabi_atexit>
    2456:	nop
    2458:	.word	0x20001f18
    245c:	.word	0x00000b6d
    2460:	.word	0x20017b0c

00002464 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
    2464:	ldr	r2, [pc, #8]	; (2470 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
    2466:	ldr	r1, [pc, #12]	; (2474 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    2468:	ldr	r0, [pc, #12]	; (2478 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    246a:	b.w	bcfc <__aeabi_atexit>
    246e:	nop
    2470:	.word	0x20001f18
    2474:	.word	0x00000b6d
    2478:	.word	0x20017a5c

0000247c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE>:
static float bufferL[bufferLength];

volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

DMAChannel AsyncAudioInputSPDIF3::dma(false);
    247c:	ldr	r2, [pc, #8]	; (2488 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0xc>)
    247e:	ldr	r1, [pc, #12]	; (248c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x10>)
    2480:	ldr	r0, [pc, #12]	; (2490 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x14>)
    2482:	b.w	bcfc <__aeabi_atexit>
    2486:	nop
    2488:	.word	0x20001f18
    248c:	.word	0x00000b6d
    2490:	.word	0x20017b24

00002494 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:
#if defined(__IMXRT1062__) || defined(KINETISK)
DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    2494:	ldr	r2, [pc, #8]	; (24a0 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    2496:	ldr	r1, [pc, #12]	; (24a4 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    2498:	ldr	r0, [pc, #12]	; (24a8 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    249a:	b.w	bcfc <__aeabi_atexit>
    249e:	nop
    24a0:	.word	0x20001f18
    24a4:	.word	0x00000b6d
    24a8:	.word	0x20017a2c

000024ac <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    24ac:	ldr	r2, [pc, #8]	; (24b8 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    24ae:	ldr	r1, [pc, #12]	; (24bc <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    24b0:	ldr	r0, [pc, #12]	; (24c0 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    24b2:	b.w	bcfc <__aeabi_atexit>
    24b6:	nop
    24b8:	.word	0x20001f18
    24bc:	.word	0x00000b6d
    24c0:	.word	0x20017a54

000024c4 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
    24c4:	ldr	r2, [pc, #8]	; (24d0 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
    24c6:	ldr	r1, [pc, #12]	; (24d4 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    24c8:	ldr	r0, [pc, #12]	; (24d8 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    24ca:	b.w	bcfc <__aeabi_atexit>
    24ce:	nop
    24d0:	.word	0x20001f18
    24d4:	.word	0x00000b6d
    24d8:	.word	0x20017b04

000024dc <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    24dc:	ldr	r2, [pc, #8]	; (24e8 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    24de:	ldr	r1, [pc, #12]	; (24ec <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    24e0:	ldr	r0, [pc, #12]	; (24f0 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    24e2:	b.w	bcfc <__aeabi_atexit>
    24e6:	nop
    24e8:	.word	0x20001f18
    24ec:	.word	0x00000b6d
    24f0:	.word	0x20017adc

000024f4 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    24f4:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    24f6:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    24f8:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    24fa:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    24fc:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    24fe:	beq.n	2508 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    2500:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2504:	b.w	b74c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2508:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    250a:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    250e:	bx	r3

00002510 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    2510:	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    2512:	movw	r5, #513	; 0x201
    2516:	ldr	r4, [r0, #0]
    2518:	str	r5, [r4, #16]

	while (count > 0) {
    251a:	cbz	r3, 2564 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    251c:	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    251e:	cbz	r1, 255e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    2520:	ldrb	r5, [r1, #0]
    2522:	adds	r1, #1
		count--; // how many bytes left to output.
    2524:	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    2526:	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    2528:	ldr	r5, [r4, #112]	; 0x70
    252a:	lsls	r5, r5, #30
    252c:	bmi.n	253c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    252e:	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    2530:	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    2532:	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    2534:	cbz	r2, 253c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    2536:	strb	r5, [r2, #0]
    2538:	adds	r2, #1
    253a:	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    253c:	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    253e:	lsls	r5, r5, #31
    2540:	bpl.n	2528 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    2542:	cmp	r3, #0
    2544:	bne.n	251e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    2546:	cbz	r6, 2564 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2548:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    254a:	ldr	r3, [r1, #112]	; 0x70
    254c:	lsls	r3, r3, #30
    254e:	bmi.n	254a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    2550:	ldr	r3, [r1, #116]	; 0x74
    2552:	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    2554:	cbz	r2, 255a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    2556:	strb	r3, [r2, #0]
    2558:	adds	r2, #1
			count_read--;
    255a:	subs	r6, #1
    255c:	b.n	2546 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    255e:	ldrb.w	r5, [r0, #60]	; 0x3c
    2562:	b.n	2524 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    2564:	pop	{r4, r5, r6}
    2566:	bx	lr

00002568 <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2568:	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    256a:	ldr	r4, [pc, #192]	; (262c <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    256c:	ldr	r3, [pc, #192]	; (2630 <_spi_dma_rxISR0()+0xc8>)
    256e:	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
    2570:	ldr	r5, [r4, #68]	; 0x44
    2572:	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    2574:	ldr	r2, [r4, #64]	; 0x40
    2576:	strb	r1, [r3, #31]
    2578:	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    257a:	strb	r1, [r3, #28]
    257c:	ldrb	r1, [r0, #4]
    257e:	strb	r1, [r3, #28]
    2580:	cbz	r2, 25c2 <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    2582:	cmp.w	r2, #32768	; 0x8000
    2586:	bcs.n	25ba <_spi_dma_rxISR0()+0x52>
    2588:	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
    258a:	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    258c:	ldrh	r1, [r3, #30]
    258e:	lsls	r6, r1, #16
    2590:	bmi.n	260a <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
    2592:	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    2594:	ldrh	r1, [r3, #30]
    2596:	uxth	r1, r1
    2598:	strh	r1, [r3, #22]
    259a:	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    259c:	ldrh	r1, [r3, #30]
    259e:	lsls	r1, r1, #16
    25a0:	bmi.n	25fc <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    25a2:	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    25a4:	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    25a6:	ldrh	r2, [r3, #30]
    25a8:	uxth	r2, r2
    25aa:	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    25ac:	str	r1, [r4, #64]	; 0x40
    25ae:	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    25b0:	ldr	r3, [pc, #124]	; (2630 <_spi_dma_rxISR0()+0xc8>)
    25b2:	strb	r2, [r3, #27]
    25b4:	ldrb	r2, [r5, #4]
    25b6:	strb	r2, [r3, #27]
    25b8:	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
    25ba:	ldr	r3, [pc, #120]	; (2634 <_spi_dma_rxISR0()+0xcc>)
    25bc:	add	r3, r2
    25be:	str	r3, [r4, #64]	; 0x40
    25c0:	b.n	25ae <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    25c2:	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    25c4:	movs	r5, #15
    25c6:	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    25c8:	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    25cc:	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
    25ce:	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    25d2:	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    25d4:	movs	r6, #3
		_dma_event_responder->triggerEvent();
    25d6:	ldr	r5, [r1, #0]
    25d8:	ldr	r1, [pc, #92]	; (2638 <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    25da:	str	r2, [r3, #28]
    25dc:	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    25de:	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    25e2:	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    25e4:	strb.w	r6, [r4, #61]	; 0x3d
    25e8:	bne.n	261a <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    25ea:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    25ec:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    25ee:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    25f0:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    25f2:	beq.n	2624 <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    25f4:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    25f8:	b.w	b74c <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    25fc:	ldrh	r1, [r3, #30]
    25fe:	ubfx	r2, r2, #0, #9
    2602:	and.w	r1, r1, #65024	; 0xfe00
    2606:	orrs	r2, r1
    2608:	b.n	25a2 <_spi_dma_rxISR0()+0x3a>
    260a:	ldrh	r1, [r3, #30]
    260c:	ubfx	r6, r2, #0, #9
    2610:	and.w	r1, r1, #65024	; 0xfe00
    2614:	orrs	r1, r6
    2616:	strh	r1, [r3, #30]
    2618:	b.n	2594 <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    261a:	mov	r3, r5
    261c:	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    261e:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2622:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2624:	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2626:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    262a:	bx	r3
    262c:	.word	0x20001f28
    2630:	.word	0x400e8000
    2634:	.word	0xffff8001
    2638:	.word	0x000024f5

0000263c <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    263c:	ldr	r3, [r0, #4]
#elif defined(__arm__) && defined(TEENSYDUINO) && (defined(__IMXRT1052__) || defined(__IMXRT1062__))

//#include "debug/printf.h"

void SPIClass::begin()
{
    263e:	push	{r4, r5, r6, r7, lr}

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    2640:	ldmia.w	r3, {r1, r7}

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    2644:	ldr.w	lr, [pc, #508]	; 2844 <SPIClass::begin()+0x208>

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    2648:	movs	r6, #184	; 0xb8

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    264a:	ldr	r2, [r1, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    264c:	movs	r5, #2


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    264e:	ldr	r4, [pc, #468]	; (2824 <SPIClass::begin()+0x1e8>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    2650:	bic.w	r2, r2, r7

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    2654:	ldr	r7, [pc, #464]	; (2828 <SPIClass::begin()+0x1ec>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    2656:	str	r2, [r1, #0]

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    2658:	ldr.w	r2, [lr, #24]
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    265c:	ands	r4, r2

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    265e:	ldr	r2, [pc, #460]	; (282c <SPIClass::begin()+0x1f0>)


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    2660:	orrs	r7, r4
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    2662:	movs	r4, #15


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    2664:	str.w	r7, [lr, #24]

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    2668:	ldrb	r7, [r0, #16]
    266a:	add	r7, r3
    266c:	ldrb	r7, [r7, #16]
    266e:	add.w	r7, r2, r7, lsl #4
    2672:	ldr	r7, [r7, #8]
    2674:	str	r6, [r7, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    2676:	ldrb	r7, [r0, #17]
    2678:	add	r7, r3
    267a:	ldrb.w	r7, [r7, #36]	; 0x24
    267e:	add.w	r7, r2, r7, lsl #4
    2682:	ldr	r7, [r7, #8]
    2684:	str	r6, [r7, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    2686:	ldrb	r7, [r0, #18]
    2688:	add	r7, r3
    268a:	ldrb.w	r7, [r7, #56]	; 0x38
    268e:	add.w	r7, r2, r7, lsl #4
    2692:	ldr	r7, [r7, #8]
    2694:	str	r6, [r7, #0]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    2696:	ldr	r7, [r1, #0]
    2698:	ldr	r6, [r3, #4]
    269a:	orrs	r6, r7
    269c:	str	r6, [r1, #0]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    269e:	ldrb	r1, [r0, #16]
    26a0:	adds	r6, r3, r1
    26a2:	add.w	r1, r3, r1, lsl #2
    26a6:	ldrb	r6, [r6, #16]
    26a8:	ldr	r7, [r1, #20]
    26aa:	add.w	r1, r2, r6, lsl #4
    26ae:	ldr	r1, [r1, #4]
    26b0:	str	r7, [r1, #0]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    26b2:	ldrb	r1, [r0, #17]
    26b4:	adds	r6, r3, r1
    26b6:	adds	r1, #10
    26b8:	ldrb.w	r6, [r6, #36]	; 0x24
    26bc:	ldr.w	r7, [r3, r1, lsl #2]
    26c0:	add.w	r1, r2, r6, lsl #4
    26c4:	ldr	r1, [r1, #4]
    26c6:	str	r7, [r1, #0]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    26c8:	ldrb	r1, [r0, #18]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    26ca:	ldr.w	lr, [r3, #72]	; 0x48

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    26ce:	adds	r6, r3, r1
    26d0:	add.w	r1, r3, r1, lsl #2

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    26d4:	ldr	r7, [r3, #32]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    26d6:	ldrb.w	r6, [r6, #56]	; 0x38
    26da:	ldr	r1, [r1, #60]	; 0x3c
    26dc:	add.w	r2, r2, r6, lsl #4

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    26e0:	ldr	r6, [r3, #52]	; 0x34

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    26e2:	ldr	r2, [r2, #4]
    26e4:	str	r1, [r2, #0]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    26e6:	ldrb	r1, [r0, #18]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    26e8:	ldr	r2, [r0, #0]
    26ea:	add	r1, r3
    26ec:	ldrb.w	r1, [r1, #68]	; 0x44
    26f0:	str.w	r1, [lr]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    26f4:	ldrb	r1, [r0, #16]
    26f6:	add	r1, r3
    26f8:	ldrb	r1, [r1, #28]
    26fa:	str	r1, [r7, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    26fc:	ldrb	r1, [r0, #17]
    26fe:	add	r3, r1
    2700:	ldrb.w	r3, [r3, #48]	; 0x30
    2704:	str	r3, [r6, #0]

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    2706:	str	r5, [r2, #16]

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    2708:	str	r4, [r2, #88]	; 0x58

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    270a:	ldrb	r3, [r0, #19]
    270c:	cmp	r3, #0
    270e:	beq.n	2764 <SPIClass::begin()+0x128>
			__disable_irq();
    2710:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    2712:	ldrb	r3, [r0, #19]
    2714:	lsls	r4, r3, #31
    2716:	bpl.n	2726 <SPIClass::begin()+0xea>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    2718:	ldr	r2, [pc, #276]	; (2830 <SPIClass::begin()+0x1f4>)
    271a:	ldr	r3, [r0, #20]
    271c:	ldr	r1, [r2, #0]
    271e:	ands	r3, r1
    2720:	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    2722:	str	r3, [r2, #0]
    2724:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x02) {
    2726:	lsls	r1, r3, #30
    2728:	bpl.n	2738 <SPIClass::begin()+0xfc>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    272a:	ldr	r2, [pc, #264]	; (2834 <SPIClass::begin()+0x1f8>)
    272c:	ldr	r3, [r0, #24]
    272e:	ldr	r1, [r2, #0]
    2730:	ands	r3, r1
    2732:	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    2734:	str	r3, [r2, #0]
    2736:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x04) {
    2738:	lsls	r2, r3, #29
    273a:	bpl.n	274a <SPIClass::begin()+0x10e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    273c:	ldr	r2, [pc, #248]	; (2838 <SPIClass::begin()+0x1fc>)
    273e:	ldr	r3, [r0, #28]
    2740:	ldr	r1, [r2, #0]
    2742:	ands	r3, r1
    2744:	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    2746:	str	r3, [r2, #0]
    2748:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x08) {
    274a:	lsls	r7, r3, #28
    274c:	bpl.n	275c <SPIClass::begin()+0x120>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    274e:	ldr	r2, [pc, #236]	; (283c <SPIClass::begin()+0x200>)
    2750:	ldr	r3, [r0, #32]
    2752:	ldr	r1, [r2, #0]
    2754:	ands	r3, r1
    2756:	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    2758:	str	r3, [r2, #0]
    275a:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x10) {
    275c:	lsls	r6, r3, #27
    275e:	bmi.n	27f8 <SPIClass::begin()+0x1bc>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    2760:	cpsie	i
    2762:	ldr	r2, [r0, #0]
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    2764:	ldr	r5, [pc, #216]	; (2840 <SPIClass::begin()+0x204>)
    2766:	ldr	r3, [r0, #8]
    2768:	cmp	r3, r5
    276a:	beq.n	2806 <SPIClass::begin()+0x1ca>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    276c:	ldr	r3, [pc, #212]	; (2844 <SPIClass::begin()+0x208>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    276e:	str	r5, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
    2770:	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2772:	ldr	r4, [pc, #212]	; (2848 <SPIClass::begin()+0x20c>)
    2774:	ubfx	r6, r3, #4, #2
    2778:	ubfx	r1, r3, #26, #3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    277c:	ldr	r3, [pc, #204]	; (284c <SPIClass::begin()+0x210>)

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    277e:	ldr.w	r4, [r4, r6, lsl #2]
    2782:	adds	r1, #1
    2784:	udiv	r1, r4, r1
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    2788:	umull	r4, r3, r3, r1

			if (d && clkhz/d > _clock) d++;
    278c:	lsrs	r3, r3, #20
    278e:	bne.n	27e4 <SPIClass::begin()+0x1a8>
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2790:	str	r3, [r0, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    2792:	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    2794:	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
    2796:	movs	r4, #7
		port().CR = LPSPI_CR_MEN;
    2798:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    279a:	str	r6, [r2, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    279c:	str	r5, [r2, #36]	; 0x24
		port().CCR = _ccr;
    279e:	str	r3, [r2, #64]	; 0x40
		port().TCR = settings.tcr;
    27a0:	str	r4, [r2, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    27a2:	str	r1, [r2, #16]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    27a4:	ldrb	r3, [r0, #19]
    27a6:	cbz	r3, 27e2 <SPIClass::begin()+0x1a6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    27a8:	lsls	r5, r3, #31
    27aa:	bpl.n	27b4 <SPIClass::begin()+0x178>
    27ac:	ldr	r3, [pc, #160]	; (2850 <SPIClass::begin()+0x214>)
    27ae:	ldr	r2, [r0, #40]	; 0x28
    27b0:	str	r2, [r3, #0]
    27b2:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    27b4:	lsls	r4, r3, #30
    27b6:	bpl.n	27c0 <SPIClass::begin()+0x184>
    27b8:	ldr	r3, [pc, #152]	; (2854 <SPIClass::begin()+0x218>)
    27ba:	ldr	r2, [r0, #44]	; 0x2c
    27bc:	str	r2, [r3, #0]
    27be:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    27c0:	lsls	r1, r3, #29
    27c2:	bpl.n	27cc <SPIClass::begin()+0x190>
    27c4:	ldr	r3, [pc, #144]	; (2858 <SPIClass::begin()+0x21c>)
    27c6:	ldr	r2, [r0, #48]	; 0x30
    27c8:	str	r2, [r3, #0]
    27ca:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    27cc:	lsls	r2, r3, #28
    27ce:	bpl.n	27d8 <SPIClass::begin()+0x19c>
    27d0:	ldr	r3, [pc, #136]	; (285c <SPIClass::begin()+0x220>)
    27d2:	ldr	r2, [r0, #52]	; 0x34
    27d4:	str	r2, [r3, #0]
    27d6:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    27d8:	lsls	r3, r3, #27
    27da:	bpl.n	27e2 <SPIClass::begin()+0x1a6>
    27dc:	ldr	r2, [r0, #56]	; 0x38
    27de:	ldr	r3, [pc, #128]	; (2860 <SPIClass::begin()+0x224>)
    27e0:	str	r2, [r3, #0]
    27e2:	pop	{r4, r5, r6, r7, pc}
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
    27e4:	udiv	r1, r1, r3
    27e8:	cmp	r1, r5
    27ea:	it	hi
    27ec:	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    27ee:	cmp.w	r3, #258	; 0x102
    27f2:	bcc.n	280a <SPIClass::begin()+0x1ce>
    27f4:	ldr	r3, [pc, #108]	; (2864 <SPIClass::begin()+0x228>)
    27f6:	b.n	2790 <SPIClass::begin()+0x154>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    27f8:	ldr	r2, [pc, #108]	; (2868 <SPIClass::begin()+0x22c>)
    27fa:	ldr	r3, [r0, #36]	; 0x24
    27fc:	ldr	r1, [r2, #0]
    27fe:	ands	r3, r1
    2800:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    2802:	str	r3, [r2, #0]
    2804:	b.n	2760 <SPIClass::begin()+0x124>
    2806:	ldr	r3, [r0, #12]
    2808:	b.n	2792 <SPIClass::begin()+0x156>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    280a:	cmp	r3, #2
    280c:	it	ls
    280e:	movls	r3, #0
    2810:	bls.n	2790 <SPIClass::begin()+0x154>
    2812:	subs	r3, #2
    2814:	lsrs	r4, r3, #1
    2816:	lsls	r1, r4, #16
    2818:	orr.w	r3, r3, r4, lsl #8
    281c:	and.w	r1, r1, #16711680	; 0xff0000
    2820:	orrs	r3, r1
    2822:	b.n	2790 <SPIClass::begin()+0x154>
    2824:	.word	0xe3ffffcf
    2828:	.word	0x08000010
    282c:	.word	0x20000a9c
    2830:	.word	0xe000e180
    2834:	.word	0xe000e184
    2838:	.word	0xe000e188
    283c:	.word	0xe000e18c
    2840:	.word	0x003d0900
    2844:	.word	0x400fc000
    2848:	.word	0x20000850
    284c:	.word	0x431bde83
    2850:	.word	0xe000e100
    2854:	.word	0xe000e104
    2858:	.word	0xe000e108
    285c:	.word	0xe000e10c
    2860:	.word	0xe000e110
    2864:	.word	0x007f7fff
    2868:	.word	0xe000e190

0000286c <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    286c:	cbz	r3, 2872 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    286e:	b.w	2510 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    2872:	bx	lr

00002874 <SPIClass::end()>:
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    2874:	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    2876:	ldmia.w	r3, {r1, r2}
    287a:	ldr	r1, [r1, #0]
    287c:	tst	r1, r2
    287e:	bne.n	2882 <SPIClass::end()+0xe>
    2880:	bx	lr
    
    port().TCR = tcr;    // restore back
}


void SPIClass::end() {
    2882:	push	{r4, lr}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2884:	ldr	r2, [r0, #0]
    2886:	mov	r4, r0
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
		port().CR = 0;  // turn off the enable
    2888:	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    288a:	movs	r1, #5


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
		port().CR = 0;  // turn off the enable
    288c:	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    288e:	ldrb	r2, [r4, #16]
    2890:	add	r3, r2
    2892:	ldrb	r0, [r3, #16]
    2894:	bl	b2cc <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    2898:	ldr	r2, [r4, #4]
    289a:	ldrb	r3, [r4, #17]
    289c:	movs	r1, #5
    289e:	add	r3, r2
    28a0:	ldrb.w	r0, [r3, #36]	; 0x24
    28a4:	bl	b2cc <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    28a8:	ldr	r2, [r4, #4]
    28aa:	ldrb	r3, [r4, #18]
    28ac:	movs	r1, #5
    28ae:	add	r3, r2
	}
}
    28b0:	ldmia.w	sp!, {r4, lr}
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
		port().CR = 0;  // turn off the enable
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    28b4:	ldrb.w	r0, [r3, #56]	; 0x38
    28b8:	b.w	b2cc <pinMode>

000028bc <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    28bc:	bx	lr
    28be:	nop

000028c0 <SDClass::open(char const*, unsigned char)>:
public:
	SDClass() { }
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    28c0:	cmp	r3, #1
class SDClass : public FS
{
public:
	SDClass() { }
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    28c2:	push	{r4, r5, r6, r7, lr}
    28c4:	mov	r5, r0
    28c6:	sub	sp, #84	; 0x54
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    28c8:	beq.n	293c <SDClass::open(char const*, unsigned char)+0x7c>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    28ca:	cmp	r3, #2
		SDFAT_FILE file = sdfs.open(filepath, flags);
    28cc:	add.w	r1, r1, #4
	SDClass() { }
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    28d0:	movw	r3, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    28d4:	mov	r0, sp
	SDClass() { }
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    28d6:	it	ne
    28d8:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    28da:	bl	7c24 <FsVolume::open(char const*, int)>
    28de:	ldr	r3, [sp, #72]	; 0x48
    28e0:	cmp	r3, #0
    28e2:	beq.n	294e <SDClass::open(char const*, unsigned char)+0x8e>
		if (file) return File(new SDFile(file));
    28e4:	movs	r0, #92	; 0x5c
    28e6:	add	r7, sp, #16
    28e8:	bl	bc98 <operator new(unsigned int)>
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    28ec:	ldr	r2, [pc, #120]	; (2968 <SDClass::open(char const*, unsigned char)+0xa8>)
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
    28ee:	mov	r4, r0
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    28f0:	ldr	r3, [pc, #120]	; (296c <SDClass::open(char const*, unsigned char)+0xac>)
// FileImpl instances are automatically deleted when the last referencing
// File is closed or goes out of scope.  The refcount variable is meant to
// be maintained by File class instances, never access by FileImpl functions.
// The FileImpl functions are meant to be called only by use of File instances.
//
class FileImpl {
    28f2:	movs	r6, #0
    28f4:	mov	r1, r7
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    28f6:	str	r2, [r4, #0]
    28f8:	adds	r0, #24
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    28fa:	ldr	r2, [sp, #4]
    28fc:	str	r3, [r4, #8]
    28fe:	str	r2, [r4, #12]
    2900:	ldrb.w	r3, [sp, #12]
    2904:	ldr	r2, [sp, #8]
    2906:	strb	r3, [r4, #20]
    2908:	str	r2, [r4, #16]
    290a:	str	r6, [r4, #4]
    290c:	bl	7928 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
		f = file;
		if (f) f->refcount++;
    2910:	ldr	r3, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2912:	mov.w	r1, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2916:	ldr	r0, [pc, #88]	; (2970 <SDClass::open(char const*, unsigned char)+0xb0>)
    2918:	adds	r3, #1
	// Explicit FileImpl constructor.  Used by libraries which provide
	// access to files stored on media.  Normally this is used within
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
    291a:	ldr	r2, [pc, #88]	; (2974 <SDClass::open(char const*, unsigned char)+0xb4>)
    291c:	str	r6, [r4, #88]	; 0x58
{
  public:
	constexpr Print() : write_error(0) {}
    291e:	str	r6, [r5, #4]
    2920:	strb	r6, [r5, #12]
		f = file;
    2922:	str	r4, [r5, #16]
    2924:	str	r0, [r4, #8]
		if (f) f->refcount++;
    2926:	str	r3, [r4, #4]
    2928:	str	r1, [r5, #8]
	// Explicit FileImpl constructor.  Used by libraries which provide
	// access to files stored on media.  Normally this is used within
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
    292a:	str	r2, [r5, #0]
    292c:	ldr	r3, [pc, #72]	; (2978 <SDClass::open(char const*, unsigned char)+0xb8>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    292e:	mov	r0, r7
    2930:	str	r3, [sp, #0]
    2932:	bl	79ac <FsBaseFile::close()>
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
    2936:	mov	r0, r5
    2938:	add	sp, #84	; 0x54
    293a:	pop	{r4, r5, r6, r7, pc}
public:
	SDClass() { }
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    293c:	movw	r3, #16898	; 0x4202
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2940:	adds	r1, #4
    2942:	mov	r0, sp
    2944:	bl	7c24 <FsVolume::open(char const*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    2948:	ldr	r3, [sp, #72]	; 0x48
    294a:	cmp	r3, #0
    294c:	bne.n	28e4 <SDClass::open(char const*, unsigned char)+0x24>
    294e:	ldr	r3, [sp, #76]	; 0x4c
    2950:	cmp	r3, #0
    2952:	bne.n	28e4 <SDClass::open(char const*, unsigned char)+0x24>
    2954:	mov.w	r1, #1000	; 0x3e8
// closed the file or the File instance created without referencing
// anything.
public:
	// Empty constructor, used when a program creates a File variable
	// but does not immediately assign or initialize it.
	constexpr File() : f(nullptr) { }
    2958:	ldr	r2, [pc, #24]	; (2974 <SDClass::open(char const*, unsigned char)+0xb4>)
    295a:	str	r3, [r5, #4]
    295c:	add	r7, sp, #16
    295e:	strb	r3, [r5, #12]
    2960:	str	r3, [r5, #16]
    2962:	str	r1, [r5, #8]
    2964:	str	r2, [r5, #0]
    2966:	b.n	292c <SDClass::open(char const*, unsigned char)+0x6c>
    2968:	.word	0x20000738
    296c:	.word	0x20000794
    2970:	.word	0x20000714
    2974:	.word	0x200006e8
    2978:	.word	0x20000620

0000297c <SDClass::rename(char const*, char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
    297c:	push	{r4, r5, r6, lr}
    297e:	ldr.w	r4, [r0, #1156]	; 0x484
    2982:	sub	sp, #56	; 0x38
    2984:	mov	r6, r2
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    2986:	cbz	r4, 29ba <SDClass::rename(char const*, char const*)+0x3e>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    2988:	movs	r5, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    298a:	add.w	r4, r4, #1096	; 0x448
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    298e:	mov	r2, r1
    2990:	mov	r0, sp
    2992:	mov	r1, r4
    2994:	mov	r3, r5
    2996:	strb.w	r5, [sp]
    299a:	strb.w	r5, [sp, #1]
    299e:	strb.w	r5, [sp, #2]
    29a2:	bl	5fec <FatFile::open(FatFile*, char const*, int)>
    29a6:	cbnz	r0, 29ac <SDClass::rename(char const*, char const*)+0x30>
		return sdfs.rename(oldfilepath, newfilepath);
	}
    29a8:	add	sp, #56	; 0x38
    29aa:	pop	{r4, r5, r6, pc}
    29ac:	mov	r2, r6
    29ae:	mov	r1, r4
    29b0:	mov	r0, sp
    29b2:	bl	6314 <FatFile::rename(FatFile*, char const*)>
    29b6:	add	sp, #56	; 0x38
    29b8:	pop	{r4, r5, r6, pc}
    29ba:	ldr.w	r0, [r0, #1160]	; 0x488
    29be:	cmp	r0, #0
    29c0:	beq.n	29a8 <SDClass::rename(char const*, char const*)+0x2c>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    29c2:	add.w	r5, r0, #1096	; 0x448
   *
   * \return true for success or false for failure.
   */
  bool rename(const char* oldPath, const char* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    29c6:	mov	r2, r1
    29c8:	mov	r3, r4
    29ca:	mov	r0, sp
    29cc:	mov	r1, r5
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    29ce:	strb.w	r4, [sp, #49]	; 0x31
    29d2:	strb.w	r4, [sp, #50]	; 0x32
    29d6:	strb.w	r4, [sp, #51]	; 0x33
    29da:	bl	433c <ExFatFile::open(ExFatFile*, char const*, int)>
    29de:	cmp	r0, #0
    29e0:	beq.n	29a8 <SDClass::rename(char const*, char const*)+0x2c>
    29e2:	mov	r2, r6
    29e4:	mov	r1, r5
    29e6:	mov	r0, sp
    29e8:	bl	4e98 <ExFatFile::rename(ExFatFile*, char const*)>
    29ec:	add	sp, #56	; 0x38
    29ee:	pop	{r4, r5, r6, pc}

000029f0 <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    29f0:	push	{r4, r5, lr}
    29f2:	ldr.w	r4, [r0, #1156]	; 0x484
    29f6:	sub	sp, #60	; 0x3c
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    29f8:	cbz	r4, 2a24 <SDClass::remove(char const*)+0x34>
    29fa:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    29fc:	mov	r2, r1
    29fe:	mov	r0, sp
    2a00:	mov	r1, r4
    2a02:	movs	r3, #1
    2a04:	strb.w	r5, [sp]
    2a08:	strb.w	r5, [sp, #1]
    2a0c:	strb.w	r5, [sp, #2]
    2a10:	bl	60b8 <FatFile::open(FatVolume*, char const*, int)>
    2a14:	cbnz	r0, 2a1a <SDClass::remove(char const*)+0x2a>
		return sdfs.remove(filepath);
	}
    2a16:	add	sp, #60	; 0x3c
    2a18:	pop	{r4, r5, pc}
    2a1a:	mov	r0, sp
    2a1c:	bl	77fc <FatFile::remove()>
    2a20:	add	sp, #60	; 0x3c
    2a22:	pop	{r4, r5, pc}
    2a24:	ldr.w	r0, [r0, #1160]	; 0x488
    2a28:	cmp	r0, #0
    2a2a:	beq.n	2a16 <SDClass::remove(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    2a2c:	mov	r2, r1
    2a2e:	movs	r3, #1
    2a30:	mov	r1, r0
    2a32:	mov	r0, sp
    2a34:	strb.w	r4, [sp, #49]	; 0x31
    2a38:	strb.w	r4, [sp, #50]	; 0x32
    2a3c:	strb.w	r4, [sp, #51]	; 0x33
    2a40:	bl	4438 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2a44:	cmp	r0, #0
    2a46:	beq.n	2a16 <SDClass::remove(char const*)+0x26>
    2a48:	mov	r0, sp
    2a4a:	bl	49f4 <ExFatFile::remove()>
    2a4e:	add	sp, #60	; 0x3c
    2a50:	pop	{r4, r5, pc}
    2a52:	nop

00002a54 <SDClass::rmdir(char const*)>:
	bool rmdir(const char *filepath) {
    2a54:	push	{r4, r5, lr}
    2a56:	ldr.w	r4, [r0, #1156]	; 0x484
    2a5a:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
    2a5c:	cbz	r4, 2a88 <SDClass::rmdir(char const*)+0x34>
    2a5e:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    2a60:	mov	r2, r1
    2a62:	mov	r0, sp
    2a64:	mov	r1, r4
    2a66:	mov	r3, r5
    2a68:	strb.w	r5, [sp]
    2a6c:	strb.w	r5, [sp, #1]
    2a70:	strb.w	r5, [sp, #2]
    2a74:	bl	60b8 <FatFile::open(FatVolume*, char const*, int)>
    2a78:	cbnz	r0, 2a7e <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
    2a7a:	add	sp, #60	; 0x3c
    2a7c:	pop	{r4, r5, pc}
    2a7e:	mov	r0, sp
    2a80:	bl	64f8 <FatFile::rmdir()>
    2a84:	add	sp, #60	; 0x3c
    2a86:	pop	{r4, r5, pc}
    2a88:	ldr.w	r0, [r0, #1160]	; 0x488
    2a8c:	cmp	r0, #0
    2a8e:	beq.n	2a7a <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    2a90:	mov	r2, r1
    2a92:	mov	r3, r4
    2a94:	mov	r1, r0
    2a96:	mov	r0, sp
    2a98:	strb.w	r4, [sp, #49]	; 0x31
    2a9c:	strb.w	r4, [sp, #50]	; 0x32
    2aa0:	strb.w	r4, [sp, #51]	; 0x33
    2aa4:	bl	4438 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2aa8:	cmp	r0, #0
    2aaa:	beq.n	2a7a <SDClass::rmdir(char const*)+0x26>
    2aac:	mov	r0, sp
    2aae:	bl	4ab4 <ExFatFile::rmdir()>
    2ab2:	add	sp, #60	; 0x3c
    2ab4:	pop	{r4, r5, pc}
    2ab6:	nop

00002ab8 <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
    2ab8:	push	{r4, r5, lr}
    2aba:	ldr.w	r4, [r0, #1156]	; 0x484
    2abe:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    2ac0:	cbz	r4, 2ae2 <SDClass::mkdir(char const*)+0x2a>
    2ac2:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    2ac4:	mov	r2, r1
    2ac6:	movs	r3, #1
    2ac8:	add.w	r1, r4, #1096	; 0x448
    2acc:	mov	r0, sp
    2ace:	strb.w	r5, [sp]
    2ad2:	strb.w	r5, [sp, #1]
    2ad6:	strb.w	r5, [sp, #2]
    2ada:	bl	5f1c <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
    2ade:	add	sp, #60	; 0x3c
    2ae0:	pop	{r4, r5, pc}
    2ae2:	ldr.w	r0, [r0, #1160]	; 0x488
    2ae6:	cmp	r0, #0
    2ae8:	beq.n	2ade <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    2aea:	mov	r2, r1
    2aec:	movs	r3, #1
    2aee:	add.w	r1, r0, #1096	; 0x448
    2af2:	mov	r0, sp
    2af4:	strb.w	r4, [sp, #49]	; 0x31
    2af8:	strb.w	r4, [sp, #50]	; 0x32
    2afc:	strb.w	r4, [sp, #51]	; 0x33
    2b00:	bl	4dc0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    2b04:	add	sp, #60	; 0x3c
    2b06:	pop	{r4, r5, pc}

00002b08 <SDClass::exists(char const*)>:
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
    2b08:	push	{r4, r5, lr}
    2b0a:	ldr.w	r4, [r0, #1156]	; 0x484
    2b0e:	sub	sp, #60	; 0x3c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    2b10:	cbz	r4, 2b30 <SDClass::exists(char const*)+0x28>
    2b12:	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    2b14:	mov	r2, r1
    2b16:	mov	r0, sp
    2b18:	mov	r1, r4
    2b1a:	mov	r3, r5
    2b1c:	strb.w	r5, [sp]
    2b20:	strb.w	r5, [sp, #1]
    2b24:	strb.w	r5, [sp, #2]
    2b28:	bl	60b8 <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
    2b2c:	add	sp, #60	; 0x3c
    2b2e:	pop	{r4, r5, pc}
    2b30:	ldr.w	r0, [r0, #1160]	; 0x488
    2b34:	cmp	r0, #0
    2b36:	beq.n	2b2c <SDClass::exists(char const*)+0x24>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    2b38:	mov	r2, r1
    2b3a:	mov	r3, r4
    2b3c:	mov	r1, r0
    2b3e:	mov	r0, sp
    2b40:	strb.w	r4, [sp, #49]	; 0x31
    2b44:	strb.w	r4, [sp, #50]	; 0x32
    2b48:	strb.w	r4, [sp, #51]	; 0x33
    2b4c:	bl	4438 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2b50:	add	sp, #60	; 0x3c
    2b52:	pop	{r4, r5, pc}

00002b54 <SDClass::usedSize()>:
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
    2b54:	push	{r3, r4, r5, r6, r7, lr}
		if (!cardPreviouslyPresent) return (uint64_t)0;
    2b56:	ldrb.w	r3, [r0, #1232]	; 0x4d0
    2b5a:	cmp	r3, #0
    2b5c:	beq.n	2bec <SDClass::usedSize()+0x98>
    2b5e:	ldr.w	r2, [r0, #1156]	; 0x484
    2b62:	mov	r4, r0
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    2b64:	cmp	r2, #0
    2b66:	beq.n	2bf6 <SDClass::usedSize()+0xa2>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    2b68:	ldr	r3, [r2, #28]
    2b6a:	ldr.w	r0, [r0, #1168]	; 0x490
    2b6e:	subs	r7, r3, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    2b70:	cmp	r0, #0
    2b72:	beq.n	2bf2 <SDClass::usedSize()+0x9e>
    2b74:	ldr	r3, [r0, #0]
    2b76:	ldr	r3, [r3, #60]	; 0x3c
    2b78:	blx	r3
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    2b7a:	cbz	r0, 2b8a <SDClass::usedSize()+0x36>
    2b7c:	ldr.w	r0, [r4, #1168]	; 0x490
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    2b80:	cbz	r0, 2bd0 <SDClass::usedSize()+0x7c>
    2b82:	ldr	r3, [r0, #0]
    2b84:	ldr	r3, [r3, #64]	; 0x40
    2b86:	blx	r3
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    2b88:	cbz	r0, 2bb4 <SDClass::usedSize()+0x60>
    2b8a:	ldr.w	r2, [r4, #1156]	; 0x484
    if (switchSpi && !setDedicatedSpi(true)) {
    2b8e:	movs	r6, #0
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    2b90:	cmp	r2, #0
    2b92:	beq.n	2c2a <SDClass::usedSize()+0xd6>
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
    2b94:	mov	r0, r2
    2b96:	bl	6e50 <FatPartition::freeClusterCount()>
    2b9a:	mov	r5, r0
      return 0;
    }
    uint32_t rtn = Vol::freeClusterCount();
    if (switchSpi && !setDedicatedSpi(false)) {
    2b9c:	cbz	r6, 2bae <SDClass::usedSize()+0x5a>
    2b9e:	ldr.w	r0, [r4, #1168]	; 0x490
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    2ba2:	cbz	r0, 2bd0 <SDClass::usedSize()+0x7c>
      return m_card->setDedicatedSpi(value);
    2ba4:	ldr	r3, [r0, #0]
    2ba6:	movs	r1, #0
    2ba8:	ldr	r3, [r3, #68]	; 0x44
    2baa:	blx	r3
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    if (switchSpi && !setDedicatedSpi(true)) {
      return 0;
    }
    uint32_t rtn = Vol::freeClusterCount();
    if (switchSpi && !setDedicatedSpi(false)) {
    2bac:	cbz	r0, 2bd0 <SDClass::usedSize()+0x7c>
    2bae:	ldr.w	r2, [r4, #1156]	; 0x484
    2bb2:	b.n	2bd6 <SDClass::usedSize()+0x82>
    2bb4:	ldr.w	r0, [r4, #1168]	; 0x490
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    2bb8:	cbz	r0, 2bd0 <SDClass::usedSize()+0x7c>
      return m_card->setDedicatedSpi(value);
    2bba:	ldr	r3, [r0, #0]
    2bbc:	movs	r1, #1
    2bbe:	ldr	r3, [r3, #68]	; 0x44
    2bc0:	blx	r3
  }
  //----------------------------------------------------------------------------
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    if (switchSpi && !setDedicatedSpi(true)) {
    2bc2:	cbz	r0, 2bd0 <SDClass::usedSize()+0x7c>
    2bc4:	ldr.w	r2, [r4, #1156]	; 0x484
    2bc8:	movs	r6, #1
           m_xVol ? m_xVol->freeClusterCount() : 0;
    2bca:	cmp	r2, #0
    2bcc:	bne.n	2b94 <SDClass::usedSize()+0x40>
    2bce:	b.n	2c2a <SDClass::usedSize()+0xd6>
      return 0;
    2bd0:	movs	r5, #0
    2bd2:	ldr.w	r2, [r4, #1156]	; 0x484
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    2bd6:	subs	r3, r7, r5
  uint32_t __attribute__((error("use sectorsPerCluster()"))) blocksPerCluster();
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    2bd8:	cbz	r2, 2c18 <SDClass::usedSize()+0xc4>
    2bda:	ldrb	r0, [r2, #6]
    2bdc:	mov.w	r2, #512	; 0x200
    2be0:	lsl.w	r0, r2, r0
    2be4:	uxth	r0, r0
    2be6:	umull	r0, r1, r0, r3
    2bea:	pop	{r3, r4, r5, r6, r7, pc}
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    2bec:	movs	r0, #0
    2bee:	movs	r1, #0
    2bf0:	pop	{r3, r4, r5, r6, r7, pc}
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    2bf2:	mov	r6, r0
    2bf4:	b.n	2b94 <SDClass::usedSize()+0x40>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    2bf6:	ldr.w	r3, [r0, #1160]	; 0x488
    2bfa:	cbz	r3, 2c3a <SDClass::usedSize()+0xe6>
    2bfc:	ldr.w	r7, [r3, #1072]	; 0x430
    2c00:	ldr.w	r0, [r4, #1168]	; 0x490
    2c04:	cmp	r0, #0
    2c06:	bne.n	2b74 <SDClass::usedSize()+0x20>
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    2c08:	mov	r1, r3
    2c0a:	cbz	r3, 2c36 <SDClass::usedSize()+0xe2>
    2c0c:	mov	r6, r0
    2c0e:	mov	r0, r1
    2c10:	bl	4768 <ExFatPartition::freeClusterCount()>
    2c14:	mov	r5, r0
    2c16:	b.n	2b9c <SDClass::usedSize()+0x48>
  uint32_t __attribute__((error("use sectorsPerCluster()"))) blocksPerCluster();
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    2c18:	ldr.w	r2, [r4, #1160]	; 0x488
    2c1c:	cmp	r2, #0
    2c1e:	beq.n	2bec <SDClass::usedSize()+0x98>
    2c20:	ldr.w	r0, [r2, #1084]	; 0x43c
    2c24:	umull	r0, r1, r3, r0
    2c28:	pop	{r3, r4, r5, r6, r7, pc}
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    2c2a:	ldr.w	r1, [r4, #1160]	; 0x488
    2c2e:	cmp	r1, #0
    2c30:	bne.n	2c0e <SDClass::usedSize()+0xba>
    2c32:	mov	r5, r2
    2c34:	b.n	2b9c <SDClass::usedSize()+0x48>
    2c36:	mov	r5, r3
    2c38:	b.n	2bd6 <SDClass::usedSize()+0x82>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    2c3a:	mov	r7, r3
    2c3c:	b.n	2c00 <SDClass::usedSize()+0xac>
    2c3e:	nop

00002c40 <SDClass::totalSize()>:
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    2c40:	ldrb.w	r3, [r0, #1232]	; 0x4d0
    2c44:	cbz	r3, 2c60 <SDClass::totalSize()+0x20>
    2c46:	ldr.w	r2, [r0, #1156]	; 0x484
    2c4a:	cbz	r2, 2c66 <SDClass::totalSize()+0x26>
    2c4c:	ldrb	r1, [r2, #6]
    2c4e:	mov.w	r3, #512	; 0x200
    2c52:	ldr	r0, [r2, #28]
    2c54:	lsls	r3, r1
    2c56:	subs	r0, #1
    2c58:	uxth	r3, r3
    2c5a:	umull	r0, r1, r3, r0
    2c5e:	bx	lr
    2c60:	movs	r0, #0
    2c62:	movs	r1, #0
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
	}
    2c64:	bx	lr
    2c66:	ldr.w	r2, [r0, #1160]	; 0x488
    2c6a:	cmp	r2, #0
    2c6c:	beq.n	2c60 <SDClass::totalSize()+0x20>
    2c6e:	ldr.w	r3, [r2, #1072]	; 0x430
    2c72:	ldr.w	r0, [r2, #1084]	; 0x43c
    2c76:	umull	r0, r1, r3, r0
    2c7a:	bx	lr

00002c7c <SDClass::format(int, char, Print&)>:
	}
}
#endif

bool SDClass::format(int type, char progressChar, Print& pr)
{
    2c7c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c80:	ldr.w	r5, [r0, #1168]	; 0x490
    2c84:	sub	sp, #72	; 0x48
	SdCard *card = sdfs.card();
	if (!card) return false; // no SD card
    2c86:	cbz	r5, 2c9c <SDClass::format(int, char, Print&)+0x20>
    2c88:	mov	r7, r3
	uint32_t sectors = card->sectorCount();
    2c8a:	ldr	r3, [r5, #0]
    2c8c:	mov	r4, r0
    2c8e:	mov	r0, r5
    2c90:	ldr	r3, [r3, #28]
    2c92:	blx	r3
	if (sectors <= 12288) return false; // card too small
    2c94:	cmp.w	r0, #12288	; 0x3000

bool SDClass::format(int type, char progressChar, Print& pr)
{
	SdCard *card = sdfs.card();
	if (!card) return false; // no SD card
	uint32_t sectors = card->sectorCount();
    2c98:	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    2c9a:	bhi.n	2ca4 <SDClass::format(int, char, Print&)+0x28>
#endif

bool SDClass::format(int type, char progressChar, Print& pr)
{
	SdCard *card = sdfs.card();
	if (!card) return false; // no SD card
    2c9c:	movs	r0, #0
		// TODO: Is begin() really necessary?  Is a quicker way possible?
		card->syncDevice();
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
	}
	return ret;
}
    2c9e:	add	sp, #72	; 0x48
    2ca0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
	SdCard *card = sdfs.card();
	if (!card) return false; // no SD card
	uint32_t sectors = card->sectorCount();
	if (sectors <= 12288) return false; // card too small
	uint8_t *buf = (uint8_t *)malloc(512);
    2ca4:	mov.w	r0, #512	; 0x200
    2ca8:	bl	c0d8 <malloc>
	if (!buf) return false; // unable to allocate memory
    2cac:	mov	r8, r0
    2cae:	cmp	r0, #0
    2cb0:	beq.n	2c9c <SDClass::format(int, char, Print&)+0x20>
	bool ret;
	if (sectors > 67108864) {
    2cb2:	cmp.w	r6, #67108864	; 0x4000000
#ifdef __arm__
		ExFatFormatter exFatFormatter;
		ret = exFatFormatter.format(card, buf, &pr);
    2cb6:	add	r6, sp, #28
    2cb8:	mov	r2, r0
    2cba:	mov	r3, r7
    2cbc:	mov	r1, r5
    2cbe:	mov	r0, r6
	uint32_t sectors = card->sectorCount();
	if (sectors <= 12288) return false; // card too small
	uint8_t *buf = (uint8_t *)malloc(512);
	if (!buf) return false; // unable to allocate memory
	bool ret;
	if (sectors > 67108864) {
    2cc0:	bhi.n	2d4c <SDClass::format(int, char, Print&)+0xd0>
#else
		ret = false;
#endif
	} else {
		FatFormatter fatFormatter;
		ret = fatFormatter.format(card, buf, &pr);
    2cc2:	bl	58c0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    2cc6:	mov	r7, r0
	}
	free(buf);
    2cc8:	mov	r0, r8
    2cca:	bl	c0e8 <free>
	if (ret) {
    2cce:	cmp	r7, #0
    2cd0:	beq.n	2c9c <SDClass::format(int, char, Print&)+0x20>
		// TODO: Is begin() really necessary?  Is a quicker way possible?
		card->syncDevice();
    2cd2:	ldr	r3, [r5, #0]
    2cd4:	mov	r0, r5
    2cd6:	ldr	r3, [r3, #32]
    2cd8:	blx	r3
    return cardBegin(sdioConfig) && Vol::begin(m_card);
  }
  //----------------------------------------------------------------------------
  /** Restart library with same config, used after media removed and replaced */
  bool restart() {
    if (spiConfigBackupPin == 255) {
    2cda:	ldrb.w	r5, [r4, #1216]	; 0x4c0
    2cde:	cmp	r5, #255	; 0xff
    2ce0:	beq.n	2d54 <SDClass::format(int, char, Print&)+0xd8>
      return begin(sdioConfigBackup);
    } else {
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
                            spiConfigBackupClock, spiConfigBackupPort);
    2ce2:	ldrb.w	r8, [r4, #1217]	; 0x4c1
    2ce6:	add	r2, sp, #4
    2ce8:	ldr.w	ip, [r4, #1220]	; 0x4c4
    2cec:	add	r3, sp, #16
    2cee:	ldr.w	lr, [r4, #1224]	; 0x4c8
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    2cf2:	add.w	r7, r4, #1184	; 0x4a0
    2cf6:	strb.w	r5, [sp, #4]
    2cfa:	strb.w	r8, [sp, #5]
    2cfe:	str.w	ip, [sp, #8]
    2d02:	str.w	lr, [sp, #12]
    2d06:	ldmia	r2, {r0, r1, r2}
    2d08:	stmia.w	r3, {r0, r1, r2}
    2d0c:	strb.w	r8, [sp, #17]
    2d10:	str.w	ip, [sp, #20]
    2d14:	str.w	lr, [sp, #24]
    2d18:	strb.w	r5, [sp, #16]
    2d1c:	ldmia.w	r3, {r0, r1, r2}
    2d20:	stmia.w	r6, {r0, r1, r2}
    2d24:	mov	r0, r7
    2d26:	ldmia.w	r6, {r1, r2, r3}
    2d2a:	bl	8644 <DedicatedSpiCard::begin(SdSpiConfig)>
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    return m_card && !m_card->errorCode();
    2d2e:	ldrb.w	r3, [r4, #1201]	; 0x4b1
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    2d32:	str.w	r7, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    2d36:	cbnz	r3, 2d44 <SDClass::format(int, char, Print&)+0xc8>
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    spiConfigBackupOptions = spiConfig.options;
    spiConfigBackupClock = spiConfig.maxSck;
    spiConfigBackupPort = spiConfig.spiPort;
    return cardBegin(spiConfig) && Vol::begin(m_card);
    2d38:	movs	r3, #1
    2d3a:	mov	r1, r7
    2d3c:	adds	r0, r4, #4
    2d3e:	mov	r2, r3
    2d40:	bl	7b3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    2d44:	movs	r0, #1
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
	}
	return ret;
}
    2d46:	add	sp, #72	; 0x48
    2d48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!buf) return false; // unable to allocate memory
	bool ret;
	if (sectors > 67108864) {
#ifdef __arm__
		ExFatFormatter exFatFormatter;
		ret = exFatFormatter.format(card, buf, &pr);
    2d4c:	bl	3428 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    2d50:	mov	r7, r0
    2d52:	b.n	2cc8 <SDClass::format(int, char, Print&)+0x4c>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    2d54:	addw	r3, r4, #1172	; 0x494
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
    2d58:	strb.w	r5, [r4, #1216]	; 0x4c0
    2d5c:	ldrb.w	r1, [r4, #1228]	; 0x4cc
    2d60:	mov	r5, r3
    2d62:	mov	r0, r3
    2d64:	bl	90f4 <SdioCard::begin(SdioConfig)>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    2d68:	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    2d6c:	mov	r0, r5
    2d6e:	bl	87f4 <SdioCard::errorCode() const>
    2d72:	cmp	r0, #0
    2d74:	bne.n	2d44 <SDClass::format(int, char, Print&)+0xc8>
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    spiConfigBackupOptions = spiConfig.options;
    spiConfigBackupClock = spiConfig.maxSck;
    spiConfigBackupPort = spiConfig.spiPort;
    return cardBegin(spiConfig) && Vol::begin(m_card);
    2d76:	movs	r3, #1
    2d78:	ldr.w	r1, [r4, #1168]	; 0x490
    2d7c:	adds	r0, r4, #4
    2d7e:	mov	r2, r3
    2d80:	bl	7b3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    2d84:	b.n	2d44 <SDClass::format(int, char, Print&)+0xc8>
    2d86:	nop

00002d88 <SDClass::mediaPresent()>:
	}
	return false;
}

bool SDClass::mediaPresent()
{
    2d88:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d8c:	ldr.w	r6, [r0, #1168]	; 0x490
    2d90:	sub	sp, #40	; 0x28
    2d92:	mov	r4, r0
	//Serial.print("mediaPresent: ");
	bool ret;
	SdCard *card = sdfs.card();
//	Serial.printf("mediaPresent: card:%x cs:%u cd:%u\n", (uint32_t)card, csPin_, cdPin_);
	if (card) {
    2d94:	cmp	r6, #0
    2d96:	beq.n	2e2a <SDClass::mediaPresent()+0xa2>
		if (cardPreviouslyPresent) {
    2d98:	ldrb.w	r3, [r0, #1232]	; 0x4d0
    2d9c:	cmp	r3, #0
    2d9e:	bne.n	2e36 <SDClass::mediaPresent()+0xae>
		} else {
			// TODO: need a quick test, only call begin if likely present
			ret = true; // assume we need to check

			#ifdef _SD_DAT3
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    2da0:	ldrb.w	r3, [r0, #1233]	; 0x4d1
    2da4:	cmp	r3, #254	; 0xfe
    2da6:	beq.n	2e5e <SDClass::mediaPresent()+0xd6>
			else
			#endif
			{
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2da8:	ldrb.w	r0, [r0, #1234]	; 0x4d2
    2dac:	cmp	r0, #54	; 0x36
    2dae:	bls.n	2e1c <SDClass::mediaPresent()+0x94>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
  }
  //----------------------------------------------------------------------------
  /** Restart library with same config, used after media removed and replaced */
  bool restart() {
    if (spiConfigBackupPin == 255) {
    2db0:	ldrb.w	r6, [r4, #1216]	; 0x4c0
    2db4:	cmp	r6, #255	; 0xff
    2db6:	beq.n	2e9c <SDClass::mediaPresent()+0x114>
      return begin(sdioConfigBackup);
    } else {
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
                            spiConfigBackupClock, spiConfigBackupPort);
    2db8:	ldrb.w	r8, [r4, #1217]	; 0x4c1
    2dbc:	add	r5, sp, #12
    2dbe:	ldr.w	ip, [r4, #1220]	; 0x4c4
    2dc2:	add	r3, sp, #24
    2dc4:	ldr.w	lr, [r4, #1224]	; 0x4c8
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    2dc8:	add.w	r7, r4, #1184	; 0x4a0
    2dcc:	strb.w	r6, [sp]
    2dd0:	strb.w	r8, [sp, #1]
    2dd4:	str.w	ip, [sp, #4]
    2dd8:	str.w	lr, [sp, #8]
    2ddc:	ldmia.w	sp, {r0, r1, r2}
    2de0:	stmia.w	r5, {r0, r1, r2}
    2de4:	strb.w	r8, [sp, #13]
    2de8:	str.w	ip, [sp, #16]
    2dec:	str.w	lr, [sp, #20]
    2df0:	strb.w	r6, [sp, #12]
    2df4:	ldmia.w	r5, {r0, r1, r2}
    2df8:	stmia.w	r3, {r0, r1, r2}
    2dfc:	mov	r0, r7
    2dfe:	ldmia	r3, {r1, r2, r3}
    2e00:	bl	8644 <DedicatedSpiCard::begin(SdSpiConfig)>
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    return m_card && !m_card->errorCode();
    2e04:	ldrb.w	r3, [r4, #1201]	; 0x4b1
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    2e08:	str.w	r7, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    2e0c:	cbnz	r3, 2e2a <SDClass::mediaPresent()+0xa2>
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    spiConfigBackupOptions = spiConfig.options;
    spiConfigBackupClock = spiConfig.maxSck;
    spiConfigBackupPort = spiConfig.spiPort;
    return cardBegin(spiConfig) && Vol::begin(m_card);
    2e0e:	movs	r3, #1
    2e10:	mov	r1, r7
    2e12:	adds	r0, r4, #4
    2e14:	mov	r2, r3
    2e16:	bl	7b3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    2e1a:	b.n	2e2c <SDClass::mediaPresent()+0xa4>
    2e1c:	bl	b2c0 <digitalRead>
    2e20:	adds	r0, #0
    2e22:	it	ne
    2e24:	movne	r0, #1
			}
			// now try to restart
			if (ret)
    2e26:	cmp	r0, #0
    2e28:	bne.n	2db0 <SDClass::mediaPresent()+0x28>
    2e2a:	movs	r0, #0
	} else {
		//Serial.print("no card");
		ret = false;
	}
	//Serial.println();
	cardPreviouslyPresent = ret;
    2e2c:	strb.w	r0, [r4, #1232]	; 0x4d0
	return ret;
}
    2e30:	add	sp, #40	; 0x28
    2e32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
//	Serial.printf("mediaPresent: card:%x cs:%u cd:%u\n", (uint32_t)card, csPin_, cdPin_);
	if (card) {
		if (cardPreviouslyPresent) {
			#ifdef BUILTIN_SDCARD
			uint32_t s;
			if (csPin_ == BUILTIN_SDCARD) {
    2e36:	ldrb.w	r3, [r0, #1233]	; 0x4d1
    2e3a:	cmp	r3, #254	; 0xfe
    2e3c:	beq.n	2e6c <SDClass::mediaPresent()+0xe4>
			#else
			const uint32_t s = 0xFFFFFFFF;
			#endif
			if (s == 0xFFFFFFFF) {
				// see if we have digital pin to bypass...
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2e3e:	ldrb.w	r0, [r4, #1234]	; 0x4d2
    2e42:	cmp	r0, #54	; 0x36
    2e44:	bhi.n	2e52 <SDClass::mediaPresent()+0xca>
    2e46:	bl	b2c0 <digitalRead>
    2e4a:	adds	r0, #0
    2e4c:	it	ne
    2e4e:	movne	r0, #1
    2e50:	b.n	2e2c <SDClass::mediaPresent()+0xa4>
				else {
					// SPI doesn't have 32 bit status, read CID register
					cid_t cid;
					ret = card->readCID(&cid);
    2e52:	ldr	r3, [r6, #0]
    2e54:	mov	r0, r6
    2e56:	add	r1, sp, #24
    2e58:	ldr	r3, [r3, #72]	; 0x48
    2e5a:	blx	r3
    2e5c:	b.n	2e2c <SDClass::mediaPresent()+0xa4>
		} else if (pin == 45) {
			return (CORE_PIN45_PINREG & CORE_PIN45_BITMASK) ? 1 : 0;
#endif
#if CORE_NUM_DIGITAL > 46
		} else if (pin == 46) {
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    2e5e:	ldr	r3, [pc, #108]	; (2ecc <SDClass::mediaPresent()+0x144>)
    2e60:	ldr	r0, [r3, #8]
    2e62:	ubfx	r0, r0, #17, #1
			#endif
			{
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
			}
			// now try to restart
			if (ret)
    2e66:	cmp	r0, #0
    2e68:	beq.n	2e2a <SDClass::mediaPresent()+0xa2>
    2e6a:	b.n	2db0 <SDClass::mediaPresent()+0x28>
			uint32_t s;
			if (csPin_ == BUILTIN_SDCARD) {
				#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
				card->syncDevice();
				#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
				s = card->status();
    2e6c:	ldr	r3, [r6, #0]
    2e6e:	mov	r0, r6
    2e70:	ldr	r3, [r3, #84]	; 0x54
    2e72:	blx	r3
			} else s = 0xFFFFFFFF;
			#else
			const uint32_t s = 0xFFFFFFFF;
			#endif
			if (s == 0xFFFFFFFF) {
    2e74:	adds	r3, r0, #1
			uint32_t s;
			if (csPin_ == BUILTIN_SDCARD) {
				#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
				card->syncDevice();
				#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
				s = card->status();
    2e76:	mov	r5, r0
			} else s = 0xFFFFFFFF;
			#else
			const uint32_t s = 0xFFFFFFFF;
			#endif
			if (s == 0xFFFFFFFF) {
    2e78:	beq.n	2e3e <SDClass::mediaPresent()+0xb6>
					// SPI doesn't have 32 bit status, read CID register
					cid_t cid;
					ret = card->readCID(&cid);
				}
				//Serial.print(ret ? "CID=ok" : "CID=unreadable");
			} else if (s == 0) {
    2e7a:	cbnz	r0, 2e90 <SDClass::mediaPresent()+0x108>
				// bits 12:9 are card state, which should
				// normally be 101 = data transfer mode
				//Serial.print("status=offline");
				ret = false;
				#ifdef _SD_DAT3
				if (csPin_ == BUILTIN_SDCARD) 
    2e7c:	ldrb.w	r3, [r4, #1233]	; 0x4d1
    2e80:	cmp	r3, #254	; 0xfe
    2e82:	bne.n	2e2a <SDClass::mediaPresent()+0xa2>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2e84:	movs	r0, #46	; 0x2e
    2e86:	movs	r1, #3
    2e88:	bl	b2cc <pinMode>
			} else if (s == 0) {
				// assume zero status means card removed
				// bits 12:9 are card state, which should
				// normally be 101 = data transfer mode
				//Serial.print("status=offline");
				ret = false;
    2e8c:	mov	r0, r5
    2e8e:	b.n	2e2c <SDClass::mediaPresent()+0xa4>
				if (csPin_ == BUILTIN_SDCARD) 
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
				#endif
			} else {
				//Serial.print("status=present");
				ret = true;
    2e90:	movs	r0, #1
	} else {
		//Serial.print("no card");
		ret = false;
	}
	//Serial.println();
	cardPreviouslyPresent = ret;
    2e92:	strb.w	r0, [r4, #1232]	; 0x4d0
	return ret;
}
    2e96:	add	sp, #40	; 0x28
    2e98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    2e9c:	addw	r5, r4, #1172	; 0x494
    2ea0:	ldrb.w	r1, [r4, #1228]	; 0x4cc
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
    2ea4:	strb.w	r6, [r4, #1216]	; 0x4c0
    2ea8:	mov	r0, r5
    2eaa:	bl	90f4 <SdioCard::begin(SdioConfig)>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    2eae:	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    2eb2:	mov	r0, r5
    2eb4:	bl	87f4 <SdioCard::errorCode() const>
    2eb8:	cmp	r0, #0
    2eba:	bne.n	2e2a <SDClass::mediaPresent()+0xa2>
  bool begin(SdSpiConfig spiConfig) {
    spiConfigBackupPin = spiConfig.csPin;
    spiConfigBackupOptions = spiConfig.options;
    spiConfigBackupClock = spiConfig.maxSck;
    spiConfigBackupPort = spiConfig.spiPort;
    return cardBegin(spiConfig) && Vol::begin(m_card);
    2ebc:	movs	r3, #1
    2ebe:	ldr.w	r1, [r4, #1168]	; 0x490
    2ec2:	adds	r0, r4, #4
    2ec4:	mov	r2, r3
    2ec6:	bl	7b3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    2eca:	b.n	2e2c <SDClass::mediaPresent()+0xa4>
    2ecc:	.word	0x42008000

00002ed0 <_GLOBAL__sub_I_SD>:
	} else {
		cdPin_ = 0xff;
		return false;
	}
	return true;
}
    2ed0:	push	{r4, r5, r6, r7}


class SDClass : public FS
{
public:
	SDClass() { }
    2ed2:	ldr	r3, [pc, #96]	; (2f34 <_GLOBAL__sub_I_SD+0x64>)
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() {}
    2ed4:	movs	r4, #0
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2ed6:	ldr	r6, [pc, #96]	; (2f38 <_GLOBAL__sub_I_SD+0x68>)
    2ed8:	movs	r5, #255	; 0xff
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    2eda:	movs	r1, #7
    2edc:	ldr	r0, [pc, #92]	; (2f3c <_GLOBAL__sub_I_SD+0x6c>)
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    2ede:	movs	r7, #41	; 0x29
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    2ee0:	ldr	r2, [pc, #92]	; (2f40 <_GLOBAL__sub_I_SD+0x70>)
    2ee2:	str.w	r6, [r3, #1172]	; 0x494
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    2ee6:	ldr	r6, [pc, #92]	; (2f44 <_GLOBAL__sub_I_SD+0x74>)
    2ee8:	str	r0, [r3, #0]
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    2eea:	mov	r0, r3
    2eec:	str.w	r2, [r3, #1192]	; 0x4a8
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    2ef0:	str.w	r1, [r3, #1196]	; 0x4ac
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    2ef4:	strb.w	r7, [r3, #1201]	; 0x4b1
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    2ef8:	str.w	r6, [r3, #1184]	; 0x4a0
    2efc:	str.w	r4, [r3, #1156]	; 0x484
    2f00:	str.w	r4, [r3, #1160]	; 0x488
/**
 * \class SdBase
 * \brief base SD file system template class.
 */
template <class Vol, class Fmt>
class SdBase : public Vol {
    2f04:	str.w	r4, [r3, #1168]	; 0x490
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    2f08:	strb.w	r4, [r3, #1180]	; 0x49c
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2f0c:	strb.w	r4, [r3, #1181]	; 0x49d
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    2f10:	strb.w	r4, [r3, #1205]	; 0x4b5
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    2f14:	strb.w	r4, [r3, #1212]	; 0x4bc
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    2f18:	strb.w	r4, [r3, #1228]	; 0x4cc
    2f1c:	strb.w	r4, [r3, #1232]	; 0x4d0
    2f20:	strb.w	r5, [r3, #1233]	; 0x4d1
    2f24:	strb.w	r5, [r3, #1234]	; 0x4d2
    2f28:	ldr	r2, [pc, #28]	; (2f48 <_GLOBAL__sub_I_SD+0x78>)
    2f2a:	ldr	r1, [pc, #32]	; (2f4c <_GLOBAL__sub_I_SD+0x7c>)
	} else {
		cdPin_ = 0xff;
		return false;
	}
	return true;
}
    2f2c:	pop	{r4, r5, r6, r7}
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    2f2e:	b.w	bcfc <__aeabi_atexit>
    2f32:	nop
    2f34:	.word	0x20005c64
    2f38:	.word	0x200007e8
    2f3c:	.word	0x200007b8
    2f40:	.word	0x003d0900
    2f44:	.word	0x20000650
    2f48:	.word	0x20001f18
    2f4c:	.word	0x000028bd

00002f50 <FsUtf::cpToMb(unsigned long, char*, char*)>:
#include "FsUtf.h"
namespace FsUtf {
  //----------------------------------------------------------------------------
  char* cpToMb(uint32_t cp, char* str, char* end) {
    size_t n = end - str;
    if (cp < 0X80) {
    2f50:	cmp	r0, #127	; 0x7f
 */
#include "FsUtf.h"
namespace FsUtf {
  //----------------------------------------------------------------------------
  char* cpToMb(uint32_t cp, char* str, char* end) {
    size_t n = end - str;
    2f52:	sub.w	r2, r2, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsUtf.h"
namespace FsUtf {
  //----------------------------------------------------------------------------
  char* cpToMb(uint32_t cp, char* str, char* end) {
    2f56:	push	{r4, r5}
    size_t n = end - str;
    if (cp < 0X80) {
    2f58:	bhi.n	2f66 <FsUtf::cpToMb(unsigned long, char*, char*)+0x16>
      if (n < 1) goto fail;
    2f5a:	cmp	r2, #0
    2f5c:	beq.n	2fe8 <FsUtf::cpToMb(unsigned long, char*, char*)+0x98>
      *(str++) = static_cast<uint8_t>(cp);
    2f5e:	strb	r0, [r1, #0]
    2f60:	adds	r0, r1, #1
    }
    return str;

   fail:
    return nullptr;
  }
    2f62:	pop	{r4, r5}
    2f64:	bx	lr
  char* cpToMb(uint32_t cp, char* str, char* end) {
    size_t n = end - str;
    if (cp < 0X80) {
      if (n < 1) goto fail;
      *(str++) = static_cast<uint8_t>(cp);
    } else if (cp < 0X800) {
    2f66:	cmp.w	r0, #2048	; 0x800
    2f6a:	bcs.n	2f8c <FsUtf::cpToMb(unsigned long, char*, char*)+0x3c>
      if (n < 2) goto fail;
    2f6c:	cmp	r2, #1
    2f6e:	bls.n	2fec <FsUtf::cpToMb(unsigned long, char*, char*)+0x9c>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    2f70:	lsrs	r4, r0, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2f72:	and.w	r3, r0, #63	; 0x3f
    if (cp < 0X80) {
      if (n < 1) goto fail;
      *(str++) = static_cast<uint8_t>(cp);
    } else if (cp < 0X800) {
      if (n < 2) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    2f76:	mov	r2, r1
    2f78:	orn	r0, r4, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2f7c:	orn	r3, r3, #127	; 0x7f
    if (cp < 0X80) {
      if (n < 1) goto fail;
      *(str++) = static_cast<uint8_t>(cp);
    } else if (cp < 0X800) {
      if (n < 2) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    2f80:	strb.w	r0, [r2], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2f84:	mov	r0, r2
    2f86:	strb	r3, [r1, #1]
    }
    return str;

   fail:
    return nullptr;
  }
    2f88:	pop	{r4, r5}
    2f8a:	bx	lr
      *(str++) = static_cast<uint8_t>(cp);
    } else if (cp < 0X800) {
      if (n < 2) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    } else if (cp < 0X10000) {
    2f8c:	cmp.w	r0, #65536	; 0x10000
    2f90:	bcs.n	2fb8 <FsUtf::cpToMb(unsigned long, char*, char*)+0x68>
      if (n < 3) goto fail;
    2f92:	cmp	r2, #2
    2f94:	bls.n	2fec <FsUtf::cpToMb(unsigned long, char*, char*)+0x9c>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    2f96:	lsrs	r4, r0, #12
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    2f98:	ubfx	r2, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2f9c:	and.w	r3, r0, #63	; 0x3f
    2fa0:	adds	r0, r1, #3
      if (n < 2) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    } else if (cp < 0X10000) {
      if (n < 3) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    2fa2:	orn	r4, r4, #31
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    2fa6:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2faa:	orn	r3, r3, #127	; 0x7f
      if (n < 2) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    } else if (cp < 0X10000) {
      if (n < 3) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    2fae:	strb	r4, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    2fb0:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2fb2:	strb	r3, [r1, #2]
    }
    return str;

   fail:
    return nullptr;
  }
    2fb4:	pop	{r4, r5}
    2fb6:	bx	lr
      if (n < 3) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    } else {
       if (n < 4) goto fail;
    2fb8:	cmp	r2, #3
    2fba:	bls.n	2fec <FsUtf::cpToMb(unsigned long, char*, char*)+0x9c>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    2fbc:	lsrs	r5, r0, #18
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    2fbe:	ubfx	r4, r0, #12, #6
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    2fc2:	ubfx	r2, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2fc6:	and.w	r0, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    } else {
       if (n < 4) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    2fca:	orn	r5, r5, #15
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    2fce:	orn	r4, r4, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2fd2:	orn	r3, r0, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    } else {
       if (n < 4) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    2fd6:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    } else {
       if (n < 4) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    2fda:	strb	r5, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2fdc:	adds	r0, r1, #4
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    } else {
       if (n < 4) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    2fde:	strb	r4, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    2fe0:	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    2fe2:	strb	r3, [r1, #3]
    }
    return str;

   fail:
    return nullptr;
  }
    2fe4:	pop	{r4, r5}
    2fe6:	bx	lr
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    }
    return str;

   fail:
    return nullptr;
    2fe8:	mov	r0, r2
    2fea:	b.n	2f62 <FsUtf::cpToMb(unsigned long, char*, char*)+0x12>
    2fec:	movs	r0, #0
    2fee:	b.n	2f62 <FsUtf::cpToMb(unsigned long, char*, char*)+0x12>

00002ff0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
  //----------------------------------------------------------------------------
  // to do?  improve error check
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    size_t n;
    uint32_t cp;
    if (str >= end) {
    2ff0:	cmp	r0, r1
    2ff2:	bcs.n	306c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7c>
    2ff4:	mov	r3, r0
   fail:
    return nullptr;
  }
  //----------------------------------------------------------------------------
  // to do?  improve error check
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    2ff6:	push	{r4, r5}
    size_t n;
    uint32_t cp;
    if (str >= end) {
      return nullptr;
    }
    uint8_t ch = str[0];
    2ff8:	ldrb	r4, [r0, #0]
    if ((ch & 0X80) == 0) {
    2ffa:	lsls	r0, r4, #24
    2ffc:	bmi.n	3006 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
      *rtn = ch;
    2ffe:	str	r4, [r2, #0]
      return str + 1;
    3000:	adds	r0, r3, #1
    if (cp < 0X80 || !isValidCp(cp)) {
      return nullptr;
    }
    *rtn = cp;
    return str + n;
  }
    3002:	pop	{r4, r5}
    3004:	bx	lr
    uint8_t ch = str[0];
    if ((ch & 0X80) == 0) {
      *rtn = ch;
      return str + 1;
    }
    if ((ch & 0XE0) == 0XC0) {
    3006:	and.w	r0, r4, #224	; 0xe0
    300a:	cmp	r0, #192	; 0xc0
    300c:	beq.n	3070 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
      cp = ch & 0X1F;
      n = 2;
    } else if ((ch & 0XF0) == 0XE0) {
    300e:	and.w	r0, r4, #240	; 0xf0
    3012:	cmp	r0, #224	; 0xe0
    3014:	beq.n	305e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      cp = ch & 0X0F;
      n = 3;
    } else if ((ch & 0XF8) == 0XF0) {
    3016:	and.w	r0, r4, #248	; 0xf8
    301a:	cmp	r0, #240	; 0xf0
    301c:	bne.n	3058 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x68>
      cp = ch & 0X07;
    301e:	and.w	r4, r4, #7
      n = 4;
    3022:	movs	r0, #4
    } else {
      return nullptr;
    }
    if ((str + n) > end) {
    3024:	add	r0, r3
    3026:	cmp	r1, r0
    3028:	bcc.n	3058 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x68>
    302a:	adds	r1, r3, #1
      return nullptr;
    }
    for (size_t i = 1; i < n; i++) {
      ch = str[i];
    302c:	ldrb.w	r3, [r1], #1
      if ((ch & 0XC0) != 0X80) {
    3030:	and.w	r5, r3, #192	; 0xc0
        return nullptr;
      }
      cp <<= 6;
      cp |= ch & 0X3F;
    3034:	and.w	r3, r3, #63	; 0x3f
    if ((str + n) > end) {
      return nullptr;
    }
    for (size_t i = 1; i < n; i++) {
      ch = str[i];
      if ((ch & 0XC0) != 0X80) {
    3038:	cmp	r5, #128	; 0x80
        return nullptr;
      }
      cp <<= 6;
      cp |= ch & 0X3F;
    303a:	orr.w	r4, r3, r4, lsl #6
    if ((str + n) > end) {
      return nullptr;
    }
    for (size_t i = 1; i < n; i++) {
      ch = str[i];
      if ((ch & 0XC0) != 0X80) {
    303e:	bne.n	3058 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x68>
      return nullptr;
    }
    if ((str + n) > end) {
      return nullptr;
    }
    for (size_t i = 1; i < n; i++) {
    3040:	cmp	r1, r0
    3042:	bne.n	302c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x3c>
      }
      cp <<= 6;
      cp |= ch & 0X3F;
    }
    // Don't allow over long as ASCII.
    if (cp < 0X80 || !isValidCp(cp)) {
    3044:	sub.w	r1, r4, #128	; 0x80
    3048:	ldr	r3, [pc, #44]	; (3078 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x88>)
    304a:	cmp	r1, r3
    304c:	bhi.n	3058 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x68>
    304e:	sub.w	r3, r4, #55296	; 0xd800
    3052:	cmp.w	r3, #2048	; 0x800
    3056:	bcs.n	3066 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x76>
  // to do?  improve error check
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    size_t n;
    uint32_t cp;
    if (str >= end) {
      return nullptr;
    3058:	movs	r0, #0
    if (cp < 0X80 || !isValidCp(cp)) {
      return nullptr;
    }
    *rtn = cp;
    return str + n;
  }
    305a:	pop	{r4, r5}
    305c:	bx	lr
    }
    if ((ch & 0XE0) == 0XC0) {
      cp = ch & 0X1F;
      n = 2;
    } else if ((ch & 0XF0) == 0XE0) {
      cp = ch & 0X0F;
    305e:	and.w	r4, r4, #15
      n = 3;
    3062:	movs	r0, #3
    3064:	b.n	3024 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x34>
    }
    // Don't allow over long as ASCII.
    if (cp < 0X80 || !isValidCp(cp)) {
      return nullptr;
    }
    *rtn = cp;
    3066:	str	r4, [r2, #0]
    return str + n;
  }
    3068:	pop	{r4, r5}
    306a:	bx	lr
  // to do?  improve error check
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    size_t n;
    uint32_t cp;
    if (str >= end) {
      return nullptr;
    306c:	movs	r0, #0
    if (cp < 0X80 || !isValidCp(cp)) {
      return nullptr;
    }
    *rtn = cp;
    return str + n;
  }
    306e:	bx	lr
    if ((ch & 0X80) == 0) {
      *rtn = ch;
      return str + 1;
    }
    if ((ch & 0XE0) == 0XC0) {
      cp = ch & 0X1F;
    3070:	and.w	r4, r4, #31
      n = 2;
    3074:	movs	r0, #2
    3076:	b.n	3024 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x34>
    3078:	.word	0x0010ff7f

0000307c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    307c:	cmp.w	r1, #256	; 0x100
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsStructs.h"
// bgnLba = relSector;
// endLba = relSector + partSize - 1;
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    3080:	push	{r4, r5, r6}
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    3082:	bhi.n	30c0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x44>
  if (capacityMB <= 16) {
    3084:	cmp	r1, #16
    3086:	bhi.n	3108 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x8c>
    3088:	movs	r3, #64	; 0x40
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    308a:	movs	r6, #32
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    308c:	udiv	r1, r2, r3
  if (c <= 1023) {
    3090:	cmp.w	r1, #1024	; 0x400
    3094:	bcs.n	30d2 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x56>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    3096:	mls	r3, r3, r1, r2
    309a:	lsrs	r4, r1, #2
    309c:	uxtb	r1, r1
    309e:	bic.w	r4, r4, #63	; 0x3f
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
  chs[2] = c;
    30a2:	strb	r1, [r0, #2]
    30a4:	udiv	r5, r2, r6
    30a8:	mls	r2, r6, r5, r2
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
  if (c <= 1023) {
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    30ac:	udiv	r3, r3, r6
    30b0:	adds	r2, #1
    30b2:	uxtb	r3, r3
    30b4:	orrs	r2, r4
  } else {
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
    30b6:	strb	r3, [r0, #0]
    30b8:	uxtb	r2, r2
  chs[1] = ((c >> 2) & 0XC0) | s;
  chs[2] = c;
}
    30ba:	pop	{r4, r5, r6}
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
    30bc:	strb	r2, [r0, #1]
  chs[2] = c;
}
    30be:	bx	lr
    30c0:	movs	r3, #63	; 0x3f
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    30c2:	mov	r6, r3
  if (capacityMB <= 16) {
    numberOfHeads = 2;
  } else if (capacityMB <= 32) {
    numberOfHeads = 4;
  } else if (capacityMB <= 128) {
    30c4:	cmp	r1, #128	; 0x80
    30c6:	bls.n	30e2 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x66>
    numberOfHeads = 8;
  } else if (capacityMB <= 504) {
    30c8:	cmp.w	r1, #504	; 0x1f8
    30cc:	bhi.n	30e6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x6a>
    30ce:	lsls	r3, r3, #4
    30d0:	b.n	308c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    30d2:	movs	r1, #255	; 0xff
  if (c <= 1023) {
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    s = (lba % sectorsPerTrack) + 1;
  } else {
    c = 1023;
    h = 254;
    30d4:	movs	r3, #254	; 0xfe
    30d6:	mov	r2, r1
    s = 63;
  }
  chs[0] = h;
    30d8:	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
  chs[2] = c;
    30da:	strb	r1, [r0, #2]
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
    30dc:	strb	r2, [r0, #1]
  chs[2] = c;
}
    30de:	pop	{r4, r5, r6}
    30e0:	bx	lr
    30e2:	lsls	r3, r3, #3
    30e4:	b.n	308c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    numberOfHeads = 4;
  } else if (capacityMB <= 128) {
    numberOfHeads = 8;
  } else if (capacityMB <= 504) {
    numberOfHeads = 16;
  } else if (capacityMB <= 1008) {
    30e6:	cmp.w	r1, #1008	; 0x3f0
    30ea:	bls.n	30f6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x7a>
    numberOfHeads = 32;
  } else if (capacityMB <= 2016) {
    30ec:	cmp.w	r1, #2016	; 0x7e0
    30f0:	bhi.n	30fa <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x7e>
    30f2:	lsls	r3, r3, #6
    30f4:	b.n	308c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    30f6:	lsls	r3, r3, #5
    30f8:	b.n	308c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    numberOfHeads = 64;
  } else if (capacityMB <= 4032) {
    30fa:	cmp.w	r1, #4032	; 0xfc0
    30fe:	ite	ls
    3100:	lslls	r3, r3, #7
    3102:	rsbhi	r3, r3, r3, lsl #8
    3106:	b.n	308c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
  if (capacityMB <= 16) {
    numberOfHeads = 2;
  } else if (capacityMB <= 32) {
    3108:	cmp	r1, #32
    310a:	bhi.n	3112 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x96>
    310c:	movs	r3, #128	; 0x80
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    310e:	movs	r6, #32
    3110:	b.n	308c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    3112:	movs	r3, #32
    3114:	mov	r6, r3
    3116:	b.n	30c4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x48>

00003118 <FsCache::sync() [clone .part.0]>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    3118:	push	{r4, r5, r6, lr}
    311a:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    311c:	ldr	r0, [r0, #4]
    311e:	add.w	r6, r4, #16
    3122:	ldr	r3, [r0, #0]
    3124:	ldr	r1, [r4, #12]
    3126:	mov	r2, r6
    3128:	ldr	r3, [r3, #36]	; 0x24
    312a:	blx	r3
    312c:	cbz	r0, 3140 <FsCache::sync() [clone .part.0]+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    312e:	ldrb	r3, [r4, #0]
    3130:	mov	r5, r0
    3132:	lsls	r2, r3, #30
    3134:	bmi.n	3146 <FsCache::sync() [clone .part.0]+0x2e>
      if (!m_blockDev->writeSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    3136:	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    313a:	mov	r0, r5
      if (!m_blockDev->writeSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    313c:	strb	r3, [r4, #0]
  }
  return true;

 fail:
  return false;
}
    313e:	pop	{r4, r5, r6, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    3140:	movs	r5, #0
}
    3142:	mov	r0, r5
    3144:	pop	{r4, r5, r6, pc}
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    3146:	ldr	r0, [r4, #4]
    3148:	mov	r2, r6
    314a:	ldr	r1, [r4, #8]
    314c:	ldr	r6, [r4, #12]
    314e:	ldr	r3, [r0, #0]
    3150:	add	r1, r6
    3152:	ldr	r3, [r3, #36]	; 0x24
    3154:	blx	r3
    3156:	cmp	r0, #0
    3158:	beq.n	3140 <FsCache::sync() [clone .part.0]+0x28>
    315a:	ldrb	r3, [r4, #0]
    315c:	b.n	3136 <FsCache::sync() [clone .part.0]+0x1e>
    315e:	nop

00003160 <FsCache::prepare(unsigned long, unsigned char)>:
 */
#define DBG_FILE "FsCache.cpp"
#include "DebugMacros.h"
#include "FsCache.h"
//------------------------------------------------------------------------------
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    3160:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    3162:	ldr	r3, [r0, #4]
    3164:	cbz	r3, 31a6 <FsCache::prepare(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    3166:	ldr	r3, [r0, #12]
    3168:	mov	r4, r0
    316a:	mov	r5, r2
    316c:	mov	r7, r1
    316e:	cmp	r3, r1
    3170:	beq.n	3190 <FsCache::prepare(unsigned long, unsigned char)+0x30>
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    3172:	ldrb	r3, [r0, #0]
    3174:	lsls	r2, r3, #31
    3176:	bmi.n	319e <FsCache::prepare(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    3178:	lsls	r3, r5, #29
    317a:	bpl.n	31aa <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    317c:	add.w	r6, r4, #16
    3180:	movs	r2, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    3182:	and.w	r5, r5, #3
    3186:	mov	r0, r6
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    3188:	str	r7, [r4, #12]
  }
  m_status |= option & CACHE_STATUS_MASK;
    318a:	orrs	r5, r2
    318c:	strb	r5, [r4, #0]
  return m_buffer;

 fail:
  return nullptr;
}
    318e:	pop	{r3, r4, r5, r6, r7, pc}
    3190:	ldrsb.w	r2, [r0], #16
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    3194:	and.w	r5, r5, #3
    3198:	orrs	r5, r2
    319a:	strb	r5, [r4, #0]
  return m_buffer;

 fail:
  return nullptr;
}
    319c:	pop	{r3, r4, r5, r6, r7, pc}
    319e:	bl	3118 <FsCache::sync() [clone .part.0]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    31a2:	cmp	r0, #0
    31a4:	bne.n	3178 <FsCache::prepare(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

 fail:
  return nullptr;
    31a6:	movs	r0, #0
    31a8:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_buffer)) {
    31aa:	ldr	r0, [r4, #4]
    31ac:	add.w	r6, r4, #16
    31b0:	mov	r1, r7
    31b2:	ldr	r3, [r0, #0]
    31b4:	mov	r2, r6
    31b6:	ldr	r3, [r3, #16]
    31b8:	blx	r3
    31ba:	cmp	r0, #0
    31bc:	bne.n	3180 <FsCache::prepare(unsigned long, unsigned char)+0x20>
    31be:	b.n	31a6 <FsCache::prepare(unsigned long, unsigned char)+0x46>

000031c0 <FsCache::sync()>:
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    31c0:	ldrb	r3, [r0, #0]
    31c2:	lsls	r3, r3, #31
    31c4:	bmi.n	31ca <FsCache::sync()+0xa>
  }
  return true;

 fail:
  return false;
}
    31c6:	movs	r0, #1
    31c8:	bx	lr
    31ca:	b.w	3118 <FsCache::sync() [clone .part.0]>
    31ce:	nop

000031d0 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    31d0:	cmp	r0, #126	; 0x7e
    31d2:	bhi.n	31e6 <toUpcase(unsigned short)+0x16>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    31d4:	sub.w	r3, r0, #97	; 0x61
    31d8:	cmp	r3, #25
    31da:	ite	hi
    31dc:	movhi	r3, #0
    31de:	movls	r3, #32
    31e0:	subs	r0, r0, r3
    31e2:	uxth	r0, r0
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    31e4:	bx	lr
    }
  }
  return left;
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
    31e6:	push	{r4, r5}
    31e8:	movs	r3, #0
    31ea:	movs	r4, #53	; 0x35
    31ec:	ldr	r5, [pc, #140]	; (327c <toUpcase(unsigned short)+0xac>)
    31ee:	b.n	31fa <toUpcase(unsigned short)+0x2a>
  size_t left = 0;
  size_t right = size;
  size_t mid;
  while (right - left > 1) {
    mid = left + (right - left)/2;
    if (readTable16(table[mid].key) <= key) {
    31f0:	ldrh.w	r2, [r5, r1, lsl #2]
    31f4:	cmp	r2, r0
    31f6:	bhi.n	3262 <toUpcase(unsigned short)+0x92>
static size_t searchPair16(const pair16_t* table, size_t size, uint16_t key) {
  size_t left = 0;
  size_t right = size;
  size_t mid;
  while (right - left > 1) {
    mid = left + (right - left)/2;
    31f8:	mov	r3, r1
//------------------------------------------------------------------------------
static size_t searchPair16(const pair16_t* table, size_t size, uint16_t key) {
  size_t left = 0;
  size_t right = size;
  size_t mid;
  while (right - left > 1) {
    31fa:	subs	r2, r4, r3
    31fc:	cmp	r2, #1
    mid = left + (right - left)/2;
    31fe:	add.w	r1, r3, r2, lsr #1
//------------------------------------------------------------------------------
static size_t searchPair16(const pair16_t* table, size_t size, uint16_t key) {
  size_t left = 0;
  size_t right = size;
  size_t mid;
  while (right - left > 1) {
    3202:	bhi.n	31f0 <toUpcase(unsigned short)+0x20>
  // Optimize for simple ASCII.
  if (chr < 127) {
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    3204:	uxth	r3, r3
    3206:	ldr	r1, [pc, #116]	; (327c <toUpcase(unsigned short)+0xac>)
    3208:	ldrh.w	r2, [r5, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    320c:	cmp	r0, r2
    320e:	bcs.n	3242 <toUpcase(unsigned short)+0x72>
    3210:	movs	r4, #75	; 0x4b
    3212:	movs	r3, #0
    3214:	ldr	r5, [pc, #104]	; (3280 <toUpcase(unsigned short)+0xb0>)
    3216:	b.n	3222 <toUpcase(unsigned short)+0x52>
  size_t left = 0;
  size_t right = size;
  size_t mid;
  while (right - left > 1) {
    mid = left + (right - left)/2;
    if (readTable16(table[mid].key) <= key) {
    3218:	ldrh.w	r2, [r5, r1, lsl #2]
    321c:	cmp	r2, r0
    321e:	bhi.n	3266 <toUpcase(unsigned short)+0x96>
static size_t searchPair16(const pair16_t* table, size_t size, uint16_t key) {
  size_t left = 0;
  size_t right = size;
  size_t mid;
  while (right - left > 1) {
    mid = left + (right - left)/2;
    3220:	mov	r3, r1
//------------------------------------------------------------------------------
static size_t searchPair16(const pair16_t* table, size_t size, uint16_t key) {
  size_t left = 0;
  size_t right = size;
  size_t mid;
  while (right - left > 1) {
    3222:	subs	r2, r4, r3
    3224:	cmp	r2, #1
    mid = left + (right - left)/2;
    3226:	add.w	r1, r3, r2, lsr #1
//------------------------------------------------------------------------------
static size_t searchPair16(const pair16_t* table, size_t size, uint16_t key) {
  size_t left = 0;
  size_t right = size;
  size_t mid;
  while (right - left > 1) {
    322a:	bhi.n	3218 <toUpcase(unsigned short)+0x48>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    322c:	uxth	r3, r3
    322e:	ldr	r2, [pc, #80]	; (3280 <toUpcase(unsigned short)+0xb0>)
    3230:	ldrh.w	r1, [r5, r3, lsl #2]
    3234:	cmp	r1, r0
    3236:	bne.n	323e <toUpcase(unsigned short)+0x6e>
    return readTable16(lookupTable[i].val);
    3238:	add.w	r3, r2, r3, lsl #2
    323c:	ldrh	r0, [r3, #2]
  }
  return chr;
}
    323e:	pop	{r4, r5}
    3240:	bx	lr
  if (chr < 127) {
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    3242:	add.w	r3, r1, r3, lsl #2
    3246:	subs	r2, r0, r2
    3248:	ldrb	r1, [r3, #3]
    324a:	cmp	r2, r1
    324c:	bge.n	3210 <toUpcase(unsigned short)+0x40>
    int8_t off = readTable8(mapTable[i].off);
    324e:	ldrsb.w	r3, [r3, #2]
    if (off == 1) {
    3252:	cmp	r3, #1
    3254:	beq.n	3270 <toUpcase(unsigned short)+0xa0>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
    3256:	cbz	r3, 326a <toUpcase(unsigned short)+0x9a>
    3258:	uxth	r3, r3
    325a:	add	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    325c:	pop	{r4, r5}
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    int8_t off = readTable8(mapTable[i].off);
    if (off == 1) {
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
    325e:	uxth	r0, r0
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    3260:	bx	lr
static size_t searchPair16(const pair16_t* table, size_t size, uint16_t key) {
  size_t left = 0;
  size_t right = size;
  size_t mid;
  while (right - left > 1) {
    mid = left + (right - left)/2;
    3262:	mov	r4, r1
    3264:	b.n	31fa <toUpcase(unsigned short)+0x2a>
    3266:	mov	r4, r1
    3268:	b.n	3222 <toUpcase(unsigned short)+0x52>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    int8_t off = readTable8(mapTable[i].off);
    if (off == 1) {
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
    326a:	movw	r3, #58272	; 0xe3a0
    326e:	b.n	325a <toUpcase(unsigned short)+0x8a>
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    int8_t off = readTable8(mapTable[i].off);
    if (off == 1) {
      return chr - ((chr - first) & 1);
    3270:	and.w	r2, r2, #1
    3274:	subs	r0, r0, r2
    3276:	uxth	r0, r0
    3278:	b.n	323e <toUpcase(unsigned short)+0x6e>
    327a:	nop
    327c:	.word	0x200004c8
    3280:	.word	0x2000039c

00003284 <FsName::get16()>:
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
  uint16_t rtn;
  if (ls) {
    3284:	ldrh	r3, [r0, #12]
    3286:	cbnz	r3, 32b6 <FsName::get16()+0x32>
    rtn = ls;
    ls = 0;
  } else if (next >= end) {
    3288:	ldr	r2, [r0, #4]
    328a:	ldr	r1, [r0, #8]
    328c:	cmp	r2, r1
    328e:	bcc.n	3294 <FsName::get16()+0x10>
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    3290:	mov	r0, r3
    3292:	bx	lr
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    3294:	push	{r4, lr}
    3296:	sub	sp, #8
    3298:	mov	r4, r0
    ls = 0;
  } else if (next >= end) {
    rtn = 0;
  } else {
    uint32_t cp;
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    329a:	mov	r0, r2
    329c:	add	r2, sp, #4
    329e:	bl	2ff0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    32a2:	cbz	r0, 32be <FsName::get16()+0x3a>
      goto fail;
    }
    next = ptr;
    if (cp <= 0XFFFF) {
    32a4:	ldr	r2, [sp, #4]
    uint32_t cp;
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    if (!ptr) {
      goto fail;
    }
    next = ptr;
    32a6:	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    32a8:	cmp.w	r2, #65536	; 0x10000
    32ac:	bcs.n	32c4 <FsName::get16()+0x40>
      rtn = cp;
    32ae:	uxth	r3, r2
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    32b0:	mov	r0, r3
    32b2:	add	sp, #8
    32b4:	pop	{r4, pc}
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
  uint16_t rtn;
  if (ls) {
    rtn = ls;
    ls = 0;
    32b6:	movs	r2, #0
    32b8:	strh	r2, [r0, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    32ba:	mov	r0, r3
    32bc:	bx	lr
    }
  }
  return rtn;

 fail:
  return 0XFFFF;
    32be:	movw	r3, #65535	; 0xffff
    32c2:	b.n	32b0 <FsName::get16()+0x2c>
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    32c4:	lsrs	r3, r2, #10
    }
    next = ptr;
    if (cp <= 0XFFFF) {
      rtn = cp;
    } else {
      ls = FsUtf::lowSurrogate(cp);
    32c6:	ubfx	r2, r2, #0, #10
    32ca:	sub.w	r3, r3, #10304	; 0x2840
    32ce:	sub.w	r2, r2, #9216	; 0x2400
    32d2:	uxth	r3, r3
    32d4:	strh	r2, [r4, #12]
    32d6:	b.n	32b0 <FsName::get16()+0x2c>

000032d8 <Print::write(char const*)>:
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    32d8:	cbz	r1, 32f6 <Print::write(char const*)+0x1e>
    32da:	push	{r4, r5, r6, lr}
    32dc:	mov	r5, r0
							  return write((const uint8_t *)str, strlen(str)); }
    32de:	mov	r0, r1
    32e0:	mov	r4, r1
    32e2:	bl	cdc0 <strlen>
    32e6:	ldr	r3, [r5, #0]
    32e8:	mov	r2, r0
    32ea:	mov	r1, r4
    32ec:	mov	r0, r5
    32ee:	ldr	r3, [r3, #4]
    32f0:	ldmia.w	sp!, {r4, r5, r6, lr}
    32f4:	bx	r3
    32f6:	mov	r0, r1
    32f8:	bx	lr
    32fa:	nop

000032fc <ExFatFormatter::syncUpcase()>:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    32fc:	ldr	r3, [r0, #8]
 fail:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
    32fe:	mov	r1, r0
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3300:	ubfx	r3, r3, #0, #9
  if (!index) {
    3304:	cbz	r3, 3320 <ExFatFormatter::syncUpcase()+0x24>
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    3306:	movs	r0, #0
    3308:	ldr	r2, [r1, #16]
    330a:	strb	r0, [r2, r3]
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
  if (!index) {
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    330c:	adds	r3, #1
    330e:	cmp.w	r3, #512	; 0x200
    3312:	bne.n	3308 <ExFatFormatter::syncUpcase()+0xc>
    m_secBuf[i] = 0;
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    3314:	ldr	r0, [r1, #12]
    3316:	ldr	r2, [r1, #16]
    3318:	ldr	r3, [r0, #0]
    331a:	ldr	r1, [r1, #0]
    331c:	ldr	r3, [r3, #36]	; 0x24
    331e:	bx	r3
}
    3320:	movs	r0, #1
    3322:	bx	lr

00003324 <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3324:	ldr	r2, [r0, #8]
    m_secBuf[i] = 0;
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    3326:	mov	r3, r0
  uint16_t index = m_upcaseSize & SECTOR_MASK;
  m_secBuf[index] = b;
    3328:	ldr	r0, [r0, #16]
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    332a:	ubfx	r2, r2, #0, #9
    m_secBuf[i] = 0;
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    332e:	push	{r4, r5}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
  m_secBuf[index] = b;
    3330:	strb	r1, [r0, r2]
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    3332:	movw	r4, #511	; 0x1ff
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
  m_secBuf[index] = b;
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    3336:	ldr	r5, [r3, #4]
  m_upcaseSize++;
    3338:	ldr	r0, [r3, #8]
  if (index == SECTOR_MASK) {
    333a:	cmp	r2, r4
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
  m_secBuf[index] = b;
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    333c:	add.w	r1, r1, r5, ror #1
  m_upcaseSize++;
    3340:	add.w	r0, r0, #1
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
  m_secBuf[index] = b;
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    3344:	str	r1, [r3, #4]
  m_upcaseSize++;
    3346:	str	r0, [r3, #8]
  if (index == SECTOR_MASK) {
    3348:	beq.n	3350 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x2c>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
}
    334a:	movs	r0, #1
    334c:	pop	{r4, r5}
    334e:	bx	lr
  uint16_t index = m_upcaseSize & SECTOR_MASK;
  m_secBuf[index] = b;
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    3350:	ldr	r0, [r3, #12]
    3352:	ldr	r1, [r3, #0]
    3354:	ldr	r2, [r0, #0]
    3356:	adds	r5, r1, #1
    3358:	ldr	r4, [r2, #36]	; 0x24
    335a:	str	r5, [r3, #0]
    335c:	ldr	r2, [r3, #16]
    335e:	mov	r3, r4
  }
  return true;
}
    3360:	pop	{r4, r5}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
  m_secBuf[index] = b;
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    3362:	bx	r3

00003364 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    3364:	push	{r3, r4, r5, lr}
    3366:	mov	r4, r1
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3368:	uxtb	r1, r1
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    336a:	mov	r5, r0
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    336c:	bl	3324 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    3370:	cbnz	r0, 3374 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x10>
}
    3372:	pop	{r3, r4, r5, pc}
  }
  return true;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3374:	lsrs	r1, r4, #8
    3376:	mov	r0, r5
}
    3378:	ldmia.w	sp!, {r3, r4, r5, lr}
  }
  return true;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    337c:	b.w	3324 <ExFatFormatter::writeUpcaseByte(unsigned char)>

00003380 <ExFatFormatter::writeUpcase(unsigned long)>:
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    3380:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    3384:	movs	r3, #0
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    3386:	mov	r8, r0
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;
    3388:	str	r1, [r0, #0]
}
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
    338a:	mov	r6, r3
  uint16_t uc;

  m_upcaseSize = 0;
    338c:	str	r3, [r0, #8]
  m_upcaseChecksum = 0;
    338e:	str	r3, [r0, #4]
  m_upcaseSector = sector;

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    3390:	uxth	r0, r6
    3392:	bl	31d0 <toUpcase(unsigned short)>
    if (uc != ch) {
    3396:	cmp	r0, r6
  m_upcaseSize = 0;
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    3398:	mov	r9, r0
    if (uc != ch) {
    339a:	mov	r5, r0
    339c:	beq.n	33ba <ExFatFormatter::writeUpcase(unsigned long)+0x3a>
      if (!writeUpcaseUnicode(uc)) {
    339e:	mov	r1, r0
    33a0:	mov	r0, r8
    33a2:	bl	3364 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    33a6:	cbz	r0, 3412 <ExFatFormatter::writeUpcase(unsigned long)+0x92>
        DBG_FAIL_MACRO;
        goto fail;
      }
      ch++;
    33a8:	adds	r6, #1

  m_upcaseSize = 0;
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;

  while (ch < 0X10000) {
    33aa:	cmp.w	r6, #65536	; 0x10000
    33ae:	bcc.n	3390 <ExFatFormatter::writeUpcase(unsigned long)+0x10>
          }
        }
      }
    }
  }
  if (!syncUpcase()) {
    33b0:	mov	r0, r8
  }
  return true;

 fail:
  return false;
}
    33b2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
          }
        }
      }
    }
  }
  if (!syncUpcase()) {
    33b6:	b.w	32fc <ExFatFormatter::syncUpcase()>
        DBG_FAIL_MACRO;
        goto fail;
      }
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    33ba:	adds	r4, r6, #1
    33bc:	cmp.w	r4, #65536	; 0x10000
    33c0:	bne.n	33ec <ExFatFormatter::writeUpcase(unsigned long)+0x6c>
      ns = n - ch;
    33c2:	rsb	r7, r6, #65536	; 0x10000
      if (ns >= MINIMUM_UPCASE_SKIP) {
    33c6:	mov.w	r4, #65536	; 0x10000
    33ca:	cmp.w	r7, #512	; 0x200
    33ce:	bcs.n	3406 <ExFatFormatter::writeUpcase(unsigned long)+0x86>
          goto fail;
        }
        ch = n;
      } else {
        while (ch < n) {
          if (!writeUpcaseUnicode(ch++)) {
    33d0:	uxth	r1, r5
    33d2:	mov	r0, r8
    33d4:	adds	r5, #1
    33d6:	bl	3364 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    33da:	cbz	r0, 3412 <ExFatFormatter::writeUpcase(unsigned long)+0x92>
          DBG_FAIL_MACRO;
          goto fail;
        }
        ch = n;
      } else {
        while (ch < n) {
    33dc:	cmp	r5, r4
    33de:	bcc.n	33d0 <ExFatFormatter::writeUpcase(unsigned long)+0x50>
          if (!writeUpcaseUnicode(ch++)) {
    33e0:	mov	r6, r5
    33e2:	b.n	33aa <ExFatFormatter::writeUpcase(unsigned long)+0x2a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    33e4:	adds	r4, #1
    33e6:	cmp.w	r4, #65536	; 0x10000
    33ea:	beq.n	33c2 <ExFatFormatter::writeUpcase(unsigned long)+0x42>
    33ec:	uxth	r0, r4
    33ee:	bl	31d0 <toUpcase(unsigned short)>
    33f2:	cmp	r0, r4
    33f4:	beq.n	33e4 <ExFatFormatter::writeUpcase(unsigned long)+0x64>
      ns = n - ch;
    33f6:	subs	r7, r4, r6
      if (ns >= MINIMUM_UPCASE_SKIP) {
    33f8:	cmp.w	r7, #512	; 0x200
    33fc:	bcs.n	3406 <ExFatFormatter::writeUpcase(unsigned long)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        ch = n;
      } else {
        while (ch < n) {
    33fe:	cmp	r6, r4
    3400:	bcc.n	33d0 <ExFatFormatter::writeUpcase(unsigned long)+0x50>
    3402:	mov	r6, r9
    3404:	b.n	3390 <ExFatFormatter::writeUpcase(unsigned long)+0x10>
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
      ns = n - ch;
      if (ns >= MINIMUM_UPCASE_SKIP) {
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    3406:	movw	r1, #65535	; 0xffff
    340a:	mov	r0, r8
    340c:	bl	3364 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    3410:	cbnz	r0, 3418 <ExFatFormatter::writeUpcase(unsigned long)+0x98>
  }
  return true;

 fail:
  return false;
}
    3412:	movs	r0, #0
    3414:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
      ns = n - ch;
      if (ns >= MINIMUM_UPCASE_SKIP) {
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    3418:	uxth	r1, r7
    341a:	mov	r0, r8
    341c:	bl	3364 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    3420:	cmp	r0, #0
    3422:	beq.n	3412 <ExFatFormatter::writeUpcase(unsigned long)+0x92>
    3424:	mov	r6, r4
    3426:	b.n	33aa <ExFatFormatter::writeUpcase(unsigned long)+0x2a>

00003428 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
#define writeMsg(pr, str) if (pr) pr->print(F(str))
#else  // PRINT_FORMAT_PROGRESS
#define writeMsg(pr, str) if (pr) pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    3428:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    342c:	mov	r9, r0
    342e:	mov	r7, r3
  uint8_t sectorsPerClusterShift;
  uint8_t vs;

  m_dev = dev;
  m_secBuf = secBuf;
  sectorCount = dev->sectorCount();
    3430:	ldr	r3, [r1, #0]
#define writeMsg(pr, str) if (pr) pr->print(F(str))
#else  // PRINT_FORMAT_PROGRESS
#define writeMsg(pr, str) if (pr) pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    3432:	sub	sp, #36	; 0x24
  uint32_t volumeLength;
  uint32_t sectorCount;
  uint8_t sectorsPerClusterShift;
  uint8_t vs;

  m_dev = dev;
    3434:	str.w	r1, [r9, #12]
  m_secBuf = secBuf;
  sectorCount = dev->sectorCount();
    3438:	mov	r0, r1
  uint32_t sectorCount;
  uint8_t sectorsPerClusterShift;
  uint8_t vs;

  m_dev = dev;
  m_secBuf = secBuf;
    343a:	str.w	r2, [r9, #16]
#define writeMsg(pr, str) if (pr) pr->print(F(str))
#else  // PRINT_FORMAT_PROGRESS
#define writeMsg(pr, str) if (pr) pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    343e:	mov	r6, r1
  uint8_t sectorsPerClusterShift;
  uint8_t vs;

  m_dev = dev;
  m_secBuf = secBuf;
  sectorCount = dev->sectorCount();
    3440:	ldr	r3, [r3, #28]
#define writeMsg(pr, str) if (pr) pr->print(F(str))
#else  // PRINT_FORMAT_PROGRESS
#define writeMsg(pr, str) if (pr) pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    3442:	mov	r5, r2
  uint8_t sectorsPerClusterShift;
  uint8_t vs;

  m_dev = dev;
  m_secBuf = secBuf;
  sectorCount = dev->sectorCount();
    3444:	blx	r3
  // Min size is 512 MB
  if (sectorCount < 0X100000) {
    3446:	cmp.w	r0, #1048576	; 0x100000
    344a:	bcs.n	3472 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4a>
    writeMsg(pr, "Device is too small\r\n");
    344c:	cmp	r7, #0
    344e:	beq.n	3524 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xfc>
    3450:	ldr	r3, [r7, #0]
    3452:	movs	r2, #21
    3454:	ldr	r1, [pc, #696]	; (3710 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2e8>)
    3456:	mov	r0, r7
    3458:	ldr	r3, [r3, #4]
    345a:	blx	r3
    345c:	ldr	r3, [r7, #0]
    345e:	mov	r0, r7
    3460:	movs	r2, #15
    3462:	ldr	r1, [pc, #688]	; (3714 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2ec>)
    3464:	ldr	r3, [r3, #4]
  writeMsg(pr, "Format done\r\n");
  return true;

 fail:
  writeMsg(pr, "Format failed\r\n");
  return false;
    3466:	movs	r4, #0
    3468:	blx	r3
}
    346a:	mov	r0, r4
    346c:	add	sp, #36	; 0x24
    346e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3472:	mov	r4, r0
    3474:	movs	r3, #0
    3476:	movs	r2, #1
    3478:	b.n	347e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x56>
    writeMsg(pr, "Device is too small\r\n");
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
    347a:	cmp	r4, r2
    347c:	bls.n	3486 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5e>
    347e:	adds	r3, #1
    3480:	lsls	r2, r2, #1
    3482:	uxtb	r3, r3
    3484:	bne.n	347a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    3486:	cmp	r3, #28
    3488:	bls.n	352e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x106>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    348a:	movs	r2, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    348c:	sub.w	r8, r3, #11
    3490:	asr.w	r8, r8, r2
    3494:	uxtb.w	r1, r8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    3498:	lsl.w	r2, r2, r8
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    349c:	str	r1, [sp, #24]
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    349e:	str	r2, [sp, #16]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    34a0:	movs	r2, #1
    34a2:	adds	r3, #1
    34a4:	asrs	r3, r2
    34a6:	lsl.w	r3, r2, r3
    34aa:	lsl.w	r2, r3, r2
    34ae:	str	r3, [sp, #20]
    34b0:	lsls	r3, r3, #2
    34b2:	str	r2, [sp, #4]
    34b4:	str	r3, [sp, #8]
  fatOffset = fatLength;
  partitionOffset = 2*fatLength;
  clusterHeapOffset = 2*fatLength;
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    34b6:	ldr	r3, [sp, #8]
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);

  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    34b8:	movs	r1, #0
    34ba:	mov.w	r2, #512	; 0x200
    34be:	mov	r0, r5
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
  fatOffset = fatLength;
  partitionOffset = 2*fatLength;
  clusterHeapOffset = 2*fatLength;
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    34c0:	subs	r3, r4, r3
  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  mbr = reinterpret_cast<MbrSector_t*>(secBuf);
  mbr->part->beginCHS[0] = 1;
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
    34c2:	mov	sl, r1
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);

  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  mbr = reinterpret_cast<MbrSector_t*>(secBuf);
  mbr->part->beginCHS[0] = 1;
    34c4:	mov.w	fp, #1
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
  fatOffset = fatLength;
  partitionOffset = 2*fatLength;
  clusterHeapOffset = 2*fatLength;
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    34c8:	lsr.w	r3, r3, r8
    34cc:	str	r3, [sp, #12]
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    34ce:	lsl.w	r8, r3, r8
    34d2:	ldr	r3, [sp, #4]
    34d4:	add	r8, r3

  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    34d6:	bl	c86c <memset>
  mbr->part->beginCHS[0] = 1;
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
  mbr->part->type = 7;
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
    34da:	movs	r3, #255	; 0xff
  memset(secBuf, 0, BYTES_PER_SECTOR);
  mbr = reinterpret_cast<MbrSector_t*>(secBuf);
  mbr->part->beginCHS[0] = 1;
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
  mbr->part->type = 7;
    34dc:	movs	r2, #7
  mbr->part->endCHS[0] = 0XFE;
    34de:	movs	r0, #254	; 0xfe
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);

  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  mbr = reinterpret_cast<MbrSector_t*>(secBuf);
  mbr->part->beginCHS[0] = 1;
    34e0:	strb.w	fp, [r5, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
  mbr->part->type = 7;
    34e4:	strb.w	r2, [r5, #450]	; 0x1c2
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    34e8:	movw	lr, #43605	; 0xaa55
  mbr->part->endCHS[0] = 0XFE;
    34ec:	strb.w	r0, [r5, #451]	; 0x1c3
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
  setLe32(mbr->part->relativeSectors, partitionOffset);
  setLe32(mbr->part->totalSectors, volumeLength);
  setLe16(mbr->signature, MBR_SIGNATURE);
  if (!dev->writeSector(0, secBuf)) {
    34f0:	mov	r1, sl
  mbr->part->beginCHS[0] = 1;
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
  mbr->part->type = 7;
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
    34f2:	strb.w	r3, [r5, #452]	; 0x1c4
  mbr->part->endCHS[2] = 0XFF;
  setLe32(mbr->part->relativeSectors, partitionOffset);
  setLe32(mbr->part->totalSectors, volumeLength);
  setLe16(mbr->signature, MBR_SIGNATURE);
  if (!dev->writeSector(0, secBuf)) {
    34f6:	mov	r2, r5
  mbr->part->beginCHS[1] = 1;
  mbr->part->beginCHS[2] = 0;
  mbr->part->type = 7;
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
    34f8:	strb.w	r3, [r5, #453]	; 0x1c5
  setLe32(mbr->part->relativeSectors, partitionOffset);
  setLe32(mbr->part->totalSectors, volumeLength);
  setLe16(mbr->signature, MBR_SIGNATURE);
  if (!dev->writeSector(0, secBuf)) {
    34fc:	mov	r0, r6

  // make Master Boot Record.  Use fake CHS.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  mbr = reinterpret_cast<MbrSector_t*>(secBuf);
  mbr->part->beginCHS[0] = 1;
  mbr->part->beginCHS[1] = 1;
    34fe:	strb.w	fp, [r5, #448]	; 0x1c0
  mbr->part->beginCHS[2] = 0;
    3502:	strb.w	sl, [r5, #449]	; 0x1c1
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    3506:	ldr	r3, [sp, #4]
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
  setLe32(mbr->part->relativeSectors, partitionOffset);
  setLe32(mbr->part->totalSectors, volumeLength);
  setLe16(mbr->signature, MBR_SIGNATURE);
  if (!dev->writeSector(0, secBuf)) {
    3508:	ldr.w	ip, [r6]
    350c:	str.w	r3, [r5, #454]	; 0x1c6
    3510:	str.w	r8, [r5, #458]	; 0x1ca
    3514:	ldr.w	r3, [ip, #36]	; 0x24
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    3518:	strh.w	lr, [r5, #510]	; 0x1fe
    351c:	blx	r3
    351e:	cbnz	r0, 3556 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x12e>
  }
  writeMsg(pr, "Format done\r\n");
  return true;

 fail:
  writeMsg(pr, "Format failed\r\n");
    3520:	cmp	r7, #0
    3522:	bne.n	345c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x34>
  return false;
    3524:	movs	r4, #0
}
    3526:	mov	r0, r4
    3528:	add	sp, #36	; 0x24
    352a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    352e:	cmp	r3, #26
    goto fail;
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    3530:	mov.w	r8, #8
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    3534:	bhi.w	3992 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x56a>
    3538:	mov.w	r3, #32768	; 0x8000
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    353c:	str.w	r8, [sp, #24]
    3540:	str	r3, [sp, #8]
    3542:	mov.w	r3, #16384	; 0x4000
    3546:	str	r3, [sp, #4]
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    3548:	mov.w	r3, #256	; 0x100
    354c:	str	r3, [sp, #16]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    354e:	mov.w	r3, #8192	; 0x2000
    3552:	str	r3, [sp, #20]
    3554:	b.n	34b6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x8e>
  if (!dev->writeSector(0, secBuf)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Partition Boot sector.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3556:	mov	r1, sl
    3558:	mov.w	r2, #512	; 0x200
    355c:	mov	r0, r5
    355e:	bl	c86c <memset>
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    3562:	ldr	r3, [sp, #20]
  pbs = reinterpret_cast<ExFatPbs_t*>(secBuf);
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
    3564:	movs	r2, #118	; 0x76
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    3566:	ldr	r0, [sp, #4]
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    3568:	str	r3, [r5, #80]	; 0x50
  pbs->jmpInstruction[2] = 0X90;
    356a:	movs	r1, #144	; 0x90
    356c:	str	r3, [r5, #84]	; 0x54
  pbs->oemName[0] = 'E';
  pbs->oemName[1] = 'X';
  pbs->oemName[2] = 'F';
  pbs->oemName[3] = 'A';
    356e:	mov.w	ip, #65	; 0x41
    3572:	ldr	r3, [sp, #12]
  pbs->oemName[4] = 'T';
    3574:	mov.w	lr, #84	; 0x54
  }
  // Partition Boot sector.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  pbs = reinterpret_cast<ExFatPbs_t*>(secBuf);
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
    3578:	strb	r2, [r5, #1]
  pbs->jmpInstruction[2] = 0X90;
  pbs->oemName[0] = 'E';
    357a:	mov.w	r2, #69	; 0x45
    357e:	str	r3, [r5, #92]	; 0x5c
  setLe32(pbs->bpb.rootDirectoryCluster, ROOT_CLUSTER);
  setLe32(pbs->bpb.volumeSerialNumber, sectorCount);
  setLe16(pbs->bpb.fileSystemRevision, 0X100);
  setLe16(pbs->bpb.volumeFlags, 0);
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    3580:	ldrb.w	r3, [sp, #24]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    3584:	str	r0, [r5, #64]	; 0x40
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    3586:	str	r0, [r5, #88]	; 0x58
  pbs->oemName[0] = 'E';
  pbs->oemName[1] = 'X';
  pbs->oemName[2] = 'F';
  pbs->oemName[3] = 'A';
  pbs->oemName[4] = 'T';
  pbs->oemName[5] = ' ';
    3588:	movs	r0, #32
  setLe32(pbs->bpb.rootDirectoryCluster, ROOT_CLUSTER);
  setLe32(pbs->bpb.volumeSerialNumber, sectorCount);
  setLe16(pbs->bpb.fileSystemRevision, 0X100);
  setLe16(pbs->bpb.volumeFlags, 0);
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    358a:	strb.w	r3, [r5, #109]	; 0x6d
    goto fail;
  }
  // Partition Boot sector.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  pbs = reinterpret_cast<ExFatPbs_t*>(secBuf);
  pbs->jmpInstruction[0] = 0XEB;
    358e:	mvn.w	r3, #20
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  pbs->oemName[0] = 'E';
    3592:	strb	r2, [r5, #3]
  pbs->oemName[1] = 'X';
    3594:	mov.w	r2, #88	; 0x58
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    3598:	str.w	sl, [r5, #68]	; 0x44
    359c:	str.w	r8, [r5, #72]	; 0x48
  setLe32(pbs->bpb.clusterCount, clusterCount);
  setLe32(pbs->bpb.rootDirectoryCluster, ROOT_CLUSTER);
  setLe32(pbs->bpb.volumeSerialNumber, sectorCount);
  setLe16(pbs->bpb.fileSystemRevision, 0X100);
  setLe16(pbs->bpb.volumeFlags, 0);
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    35a0:	mov.w	r8, #9
    35a4:	str.w	sl, [r5, #76]	; 0x4c
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    35a8:	str	r4, [r5, #100]	; 0x64
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  pbs->oemName[0] = 'E';
  pbs->oemName[1] = 'X';
  pbs->oemName[2] = 'F';
    35aa:	mov.w	r4, #70	; 0x46
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    35ae:	strh.w	sl, [r5, #106]	; 0x6a
  setLe32(pbs->bpb.volumeSerialNumber, sectorCount);
  setLe16(pbs->bpb.fileSystemRevision, 0X100);
  setLe16(pbs->bpb.volumeFlags, 0);
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
  pbs->bpb.numberOfFats = 1;
    35b2:	strb.w	fp, [r5, #110]	; 0x6e
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    35b6:	mov.w	fp, #4
  pbs->bpb.driveSelect = 0X80;
  pbs->bpb.percentInUse = 0;
    35ba:	strb.w	sl, [r5, #112]	; 0x70
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    35be:	mov.w	sl, #256	; 0x100
    goto fail;
  }
  // Partition Boot sector.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  pbs = reinterpret_cast<ExFatPbs_t*>(secBuf);
  pbs->jmpInstruction[0] = 0XEB;
    35c2:	strb	r3, [r5, #0]
    35c4:	add.w	r3, r5, #119	; 0x77
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
    35c8:	strb	r1, [r5, #2]
    35ca:	addw	r1, r5, #509	; 0x1fd
  pbs->oemName[0] = 'E';
  pbs->oemName[1] = 'X';
    35ce:	strb	r2, [r5, #4]
  pbs->bpb.driveSelect = 0X80;
  pbs->bpb.percentInUse = 0;

  // Fill boot code like official SDFormatter.
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    pbs->bootCode[i] = 0XF4;
    35d0:	movs	r2, #244	; 0xf4
  pbs->oemName[0] = 'E';
  pbs->oemName[1] = 'X';
  pbs->oemName[2] = 'F';
  pbs->oemName[3] = 'A';
  pbs->oemName[4] = 'T';
  pbs->oemName[5] = ' ';
    35d2:	strb	r0, [r5, #8]
  pbs->oemName[6] = ' ';
    35d4:	strb	r0, [r5, #9]
  pbs->oemName[7] = ' ';
    35d6:	strb	r0, [r5, #10]
  setLe16(pbs->bpb.fileSystemRevision, 0X100);
  setLe16(pbs->bpb.volumeFlags, 0);
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
  pbs->bpb.numberOfFats = 1;
  pbs->bpb.driveSelect = 0X80;
    35d8:	mvn.w	r0, #127	; 0x7f
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  pbs->oemName[0] = 'E';
  pbs->oemName[1] = 'X';
  pbs->oemName[2] = 'F';
    35dc:	strb	r4, [r5, #5]
  pbs->oemName[3] = 'A';
    35de:	strb.w	ip, [r5, #6]
  pbs->oemName[4] = 'T';
    35e2:	strb.w	lr, [r5, #7]
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    35e6:	str.w	fp, [r5, #96]	; 0x60
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    35ea:	strh.w	sl, [r5, #104]	; 0x68
  setLe32(pbs->bpb.clusterCount, clusterCount);
  setLe32(pbs->bpb.rootDirectoryCluster, ROOT_CLUSTER);
  setLe32(pbs->bpb.volumeSerialNumber, sectorCount);
  setLe16(pbs->bpb.fileSystemRevision, 0X100);
  setLe16(pbs->bpb.volumeFlags, 0);
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    35ee:	strb.w	r8, [r5, #108]	; 0x6c
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
  pbs->bpb.numberOfFats = 1;
  pbs->bpb.driveSelect = 0X80;
    35f2:	strb.w	r0, [r5, #111]	; 0x6f
  pbs->bpb.percentInUse = 0;

  // Fill boot code like official SDFormatter.
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    pbs->bootCode[i] = 0XF4;
    35f6:	strb.w	r2, [r3, #1]!
  pbs->bpb.numberOfFats = 1;
  pbs->bpb.driveSelect = 0X80;
  pbs->bpb.percentInUse = 0;

  // Fill boot code like official SDFormatter.
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    35fa:	cmp	r1, r3
    35fc:	bne.n	35f6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ce>
    pbs->bootCode[i] = 0XF4;
  }
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    35fe:	mov.w	r8, #0
    3602:	movw	r3, #43605	; 0xaa55
  ExFatPbs_t* pbs;
  DirUpcase_t* dup;
  DirBitmap_t* dbm;
  DirLabel_t* label;
  uint32_t bitmapSize;
  uint32_t checksum = 0;
    3606:	mov	r4, r8
    3608:	strh.w	r3, [r5, #510]	; 0x1fe
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    pbs->bootCode[i] = 0XF4;
  }
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    360c:	sub.w	r3, r8, #106	; 0x6a
    3610:	cmp	r3, #1
    3612:	bls.n	3622 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1fa>
    3614:	cmp.w	r8, #112	; 0x70
    3618:	beq.n	3622 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1fa>
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    361a:	ldrb.w	r3, [r5, r8]
    361e:	add.w	r4, r3, r4, ror #1
  // Fill boot code like official SDFormatter.
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    pbs->bootCode[i] = 0XF4;
  }
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    3622:	add.w	r8, r8, #1
    3626:	cmp.w	r8, #512	; 0x200
    362a:	bne.n	360c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e4>
      continue;
    }
    checksum = exFatChecksum(checksum, secBuf[i]);
  }
  sector = partitionOffset;
  if (!dev->writeSector(sector, secBuf)  ||
    362c:	ldr	r3, [r6, #0]
    362e:	mov	r2, r5
    3630:	ldr	r1, [sp, #4]
    3632:	mov	r0, r6
    3634:	ldr	r3, [r3, #36]	; 0x24
    3636:	blx	r3
    3638:	cmp	r0, #0
    363a:	beq.w	3520 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xf8>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    363e:	ldr	r3, [r6, #0]
    3640:	mov	r2, r5
    3642:	ldr	r1, [sp, #4]
    3644:	mov	r0, r6
    3646:	ldr	r3, [r3, #36]	; 0x24
    3648:	adds	r1, #12
    364a:	blx	r3
      continue;
    }
    checksum = exFatChecksum(checksum, secBuf[i]);
  }
  sector = partitionOffset;
  if (!dev->writeSector(sector, secBuf)  ||
    364c:	cmp	r0, #0
    364e:	beq.w	3520 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xf8>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector++;
    3652:	ldr	r3, [sp, #4]
  // Write eight Extended Boot Sectors.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3654:	mov	r2, r8
    3656:	movs	r1, #0
    3658:	mov	r0, r5
  if (!dev->writeSector(sector, secBuf)  ||
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector++;
    365a:	add.w	sl, r3, #1
  // Write eight Extended Boot Sectors.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    365e:	bl	c86c <memset>
    3662:	ldr	r2, [sp, #4]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    3664:	movw	r3, #43605	; 0xaa55
    3668:	str.w	r9, [sp, #28]
    366c:	addw	r8, r5, #511	; 0x1ff
    3670:	add.w	fp, r2, #9
    3674:	subs	r2, r5, #1
    3676:	strh.w	r3, [r5, #510]	; 0x1fe
    367a:	mov	r9, r2
    367c:	str	r2, [sp, #24]
  ExFatPbs_t* pbs;
  DirUpcase_t* dup;
  DirBitmap_t* dbm;
  DirLabel_t* label;
  uint32_t bitmapSize;
  uint32_t checksum = 0;
    367e:	mov	r3, r9
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    3680:	ldrb.w	r2, [r3, #1]!
  sector++;
  // Write eight Extended Boot Sectors.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (int j = 0; j < 8; j++) {
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    3684:	cmp	r8, r3
    3686:	add.w	r4, r2, r4, ror #1
    368a:	bne.n	3680 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x258>
      checksum = exFatChecksum(checksum, secBuf[i]);
    }
    if (!dev->writeSector(sector, secBuf)  ||
    368c:	ldr	r3, [r6, #0]
    368e:	mov	r2, r5
    3690:	mov	r1, sl
    3692:	mov	r0, r6
    3694:	ldr	r3, [r3, #36]	; 0x24
    3696:	blx	r3
    3698:	cmp	r0, #0
    369a:	beq.w	3520 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xf8>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    369e:	ldr	r3, [r6, #0]
    36a0:	mov	r2, r5
    36a2:	add.w	r1, sl, #12
    36a6:	mov	r0, r6
    36a8:	ldr	r3, [r3, #36]	; 0x24
    36aa:	blx	r3
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (int j = 0; j < 8; j++) {
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
      checksum = exFatChecksum(checksum, secBuf[i]);
    }
    if (!dev->writeSector(sector, secBuf)  ||
    36ac:	cmp	r0, #0
    36ae:	beq.w	3520 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xf8>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    sector++;
    36b2:	add.w	sl, sl, #1
  }
  sector++;
  // Write eight Extended Boot Sectors.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  setLe16(pbs->signature, PBR_SIGNATURE);
  for (int j = 0; j < 8; j++) {
    36b6:	cmp	fp, sl
    36b8:	bne.n	367e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x256>
    36ba:	ldr	r3, [sp, #4]
      goto fail;
    }
    sector++;
  }
  // Write OEM Parameter Sector and reserved sector.
  memset(secBuf, 0, BYTES_PER_SECTOR);
    36bc:	mov.w	r2, #512	; 0x200
    36c0:	movs	r1, #0
    36c2:	mov	r0, r5
    36c4:	ldr.w	r9, [sp, #28]
    36c8:	add.w	sl, r3, #11
    36cc:	bl	c86c <memset>
    36d0:	ldr	r3, [sp, #24]
    36d2:	ldrb.w	r2, [r3, #1]!
  for (int j = 0; j < 2; j++) {
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    36d6:	cmp	r8, r3
    36d8:	add.w	r4, r2, r4, ror #1
    36dc:	bne.n	36d2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2aa>
      checksum = exFatChecksum(checksum, secBuf[i]);
    }
    if (!dev->writeSector(sector, secBuf)  ||
    36de:	ldr	r3, [r6, #0]
    36e0:	mov	r2, r5
    36e2:	mov	r1, fp
    36e4:	mov	r0, r6
    36e6:	ldr	r3, [r3, #36]	; 0x24
    36e8:	blx	r3
    36ea:	cmp	r0, #0
    36ec:	beq.w	3520 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xf8>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    36f0:	ldr	r3, [r6, #0]
    36f2:	mov	r2, r5
    36f4:	add.w	r1, fp, #12
    36f8:	mov	r0, r6
    36fa:	ldr	r3, [r3, #36]	; 0x24
    36fc:	blx	r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
  for (int j = 0; j < 2; j++) {
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
      checksum = exFatChecksum(checksum, secBuf[i]);
    }
    if (!dev->writeSector(sector, secBuf)  ||
    36fe:	cmp	r0, #0
    3700:	beq.w	3520 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xf8>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    sector++;
    3704:	add.w	r3, fp, #1
    }
    sector++;
  }
  // Write OEM Parameter Sector and reserved sector.
  memset(secBuf, 0, BYTES_PER_SECTOR);
  for (int j = 0; j < 2; j++) {
    3708:	cmp	r3, sl
    370a:	beq.n	3718 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2f0>
    370c:	mov	fp, r3
    370e:	b.n	36d0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2a8>
    3710:	.word	0x20001070
    3714:	.word	0x200010d0
    3718:	subs	r3, r5, #4
    371a:	add.w	r2, r5, #508	; 0x1fc
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    371e:	str.w	r4, [r3, #4]!
      goto fail;
    }
    sector++;
  }
  // Write Boot CheckSum Sector.
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    3722:	cmp	r2, r3
    3724:	bne.n	371e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2f6>
    setLe32(secBuf + i, checksum);
  }
  if (!dev->writeSector(sector, secBuf)  ||
    3726:	ldr	r3, [r6, #0]
    3728:	mov	r1, sl
    372a:	mov	r2, r5
    372c:	mov	r0, r6
    372e:	ldr	r3, [r3, #36]	; 0x24
    3730:	blx	r3
    3732:	cmp	r0, #0
    3734:	beq.w	3520 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xf8>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    3738:	ldr	r3, [r6, #0]
    373a:	add.w	r1, fp, #13
    373e:	mov	r2, r5
    3740:	mov	r0, r6
    3742:	ldr	r3, [r3, #36]	; 0x24
    3744:	blx	r3
  }
  // Write Boot CheckSum Sector.
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    setLe32(secBuf + i, checksum);
  }
  if (!dev->writeSector(sector, secBuf)  ||
    3746:	mov	r4, r0
    3748:	cmp	r0, #0
    374a:	beq.w	3520 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xf8>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Initialize FAT.
  writeMsg(pr, "Writing FAT ");
    374e:	cbz	r7, 375c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x334>
    3750:	ldr	r3, [r7, #0]
    3752:	movs	r2, #12
    3754:	ldr	r1, [pc, #604]	; (39b4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x58c>)
    3756:	mov	r0, r7
    3758:	ldr	r3, [r3, #4]
    375a:	blx	r3
  sector = partitionOffset + fatOffset;
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    375c:	ldr	r3, [sp, #12]

  memset(secBuf, 0, BYTES_PER_SECTOR);
    375e:	mov.w	r2, #512	; 0x200
    3762:	movs	r1, #0
    3764:	mov	r0, r5
    goto fail;
  }
  // Initialize FAT.
  writeMsg(pr, "Writing FAT ");
  sector = partitionOffset + fatOffset;
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    3766:	mov.w	r8, r3, lsl #2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Initialize FAT.
  writeMsg(pr, "Writing FAT ");
  sector = partitionOffset + fatOffset;
    376a:	ldr	r3, [sp, #20]
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    376c:	addw	r8, r8, #519	; 0x207
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Initialize FAT.
  writeMsg(pr, "Writing FAT ");
  sector = partitionOffset + fatOffset;
    3770:	mov	fp, r3
    3772:	ldr	r3, [sp, #4]
    3774:	add	fp, r3
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;

  memset(secBuf, 0, BYTES_PER_SECTOR);
    3776:	bl	c86c <memset>
    goto fail;
  }
  // Initialize FAT.
  writeMsg(pr, "Writing FAT ");
  sector = partitionOffset + fatOffset;
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    377a:	mov.w	r3, r8, lsr #9

  memset(secBuf, 0, BYTES_PER_SECTOR);
  // Allocate two reserved clusters, bitmap, upcase, and root clusters.
  secBuf[0] = 0XF8;
    377e:	movs	r0, #248	; 0xf8
    3780:	add.w	r1, r5, #19
  for (size_t i = 1; i < 20; i++) {
    secBuf[i] = 0XFF;
    3784:	movs	r2, #255	; 0xff
    goto fail;
  }
  // Initialize FAT.
  writeMsg(pr, "Writing FAT ");
  sector = partitionOffset + fatOffset;
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    3786:	mov	lr, r3
    3788:	mov	r3, r5

  memset(secBuf, 0, BYTES_PER_SECTOR);
  // Allocate two reserved clusters, bitmap, upcase, and root clusters.
  secBuf[0] = 0XF8;
    378a:	strb	r0, [r5, #0]
  for (size_t i = 1; i < 20; i++) {
    secBuf[i] = 0XFF;
    378c:	strb.w	r2, [r3, #1]!
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;

  memset(secBuf, 0, BYTES_PER_SECTOR);
  // Allocate two reserved clusters, bitmap, upcase, and root clusters.
  secBuf[0] = 0XF8;
  for (size_t i = 1; i < 20; i++) {
    3790:	cmp	r1, r3
    3792:	bne.n	378c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x364>
    secBuf[i] = 0XFF;
  }
  for (uint32_t i = 0; i < ns; i++) {
    3794:	mov	r3, lr
    3796:	cmp	r3, #0
    3798:	beq.n	37fe <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3d6>
    379a:	adds	r3, r7, #0
    379c:	mov.w	sl, #0
    37a0:	str.w	r9, [sp, #24]
    37a4:	mov.w	r8, r8, lsr #14
    37a8:	it	ne
    37aa:	movne	r3, #1
    37ac:	mov	r9, lr
    37ae:	str	r3, [sp, #20]
    37b0:	mov	r3, r4
    37b2:	mov	r4, sl
    37b4:	mov	sl, r3
    37b6:	b.n	37c4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x39c>
    }
    if (!dev->writeSector(sector + i, secBuf)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (i == 0) {
    37b8:	cmp	r4, #0
    37ba:	beq.w	399e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x576>
  // Allocate two reserved clusters, bitmap, upcase, and root clusters.
  secBuf[0] = 0XF8;
  for (size_t i = 1; i < 20; i++) {
    secBuf[i] = 0XFF;
  }
  for (uint32_t i = 0; i < ns; i++) {
    37be:	adds	r4, #1
    37c0:	cmp	r9, r4
    37c2:	beq.n	37f8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3d0>
    37c4:	movs	r2, #1
    37c6:	ldr	r1, [pc, #496]	; (39b8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x590>)
    37c8:	mov	r0, r7
    if (i%(ns/32) == 0) {
      writeMsg(pr, ".");
    37ca:	udiv	r3, r4, r8
    37ce:	mls	r3, r8, r3, r4
    37d2:	cbnz	r3, 37de <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b6>
    37d4:	ldr	r3, [sp, #20]
    37d6:	cbz	r3, 37de <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b6>
    37d8:	ldr	r3, [r7, #0]
    37da:	ldr	r3, [r3, #4]
    37dc:	blx	r3
    }
    if (!dev->writeSector(sector + i, secBuf)) {
    37de:	ldr	r3, [r6, #0]
    37e0:	mov	r2, r5
    37e2:	add.w	r1, r4, fp
    37e6:	mov	r0, r6
    37e8:	ldr	r3, [r3, #36]	; 0x24
    37ea:	blx	r3
    37ec:	cmp	r0, #0
    37ee:	bne.n	37b8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x390>
  }
  writeMsg(pr, "Format done\r\n");
  return true;

 fail:
  writeMsg(pr, "Format failed\r\n");
    37f0:	cmp	r7, #0
    37f2:	bne.w	345c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x34>
    37f6:	b.n	3524 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xfc>
    37f8:	mov	r4, sl
    37fa:	ldr.w	r9, [sp, #24]
    }
    if (i == 0) {
      memset(secBuf, 0, BYTES_PER_SECTOR);
    }
  }
  writeMsg(pr, "\r\n");
    37fe:	cmp	r7, #0
    3800:	beq.n	386e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x446>
    3802:	ldr	r3, [r7, #0]
    3804:	movs	r2, #2
    3806:	ldr	r1, [pc, #436]	; (39bc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x594>)
    3808:	mov	r0, r7
    380a:	ldr	r3, [r3, #4]
    380c:	blx	r3
  // Write cluster two, bitmap.
  sector = partitionOffset + clusterHeapOffset;
  bitmapSize = (clusterCount + 7)/8;
    380e:	ldr	r3, [sp, #12]
    3810:	add.w	r8, r3, #7
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
  if (ns > sectorsPerCluster) {
    3814:	ldr	r3, [sp, #16]
    }
  }
  writeMsg(pr, "\r\n");
  // Write cluster two, bitmap.
  sector = partitionOffset + clusterHeapOffset;
  bitmapSize = (clusterCount + 7)/8;
    3816:	mov.w	r8, r8, lsr #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    381a:	addw	sl, r8, #511	; 0x1ff
    381e:	mov.w	sl, sl, lsr #9
  if (ns > sectorsPerCluster) {
    3822:	cmp	sl, r3
    3824:	bhi.w	345c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x34>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3828:	mov.w	r2, #512	; 0x200
    382c:	movs	r1, #0
    382e:	mov	r0, r5
    3830:	bl	c86c <memset>
  // Allocate clusters for bitmap, upcase, and root.
  secBuf[0] = 0X7;
    3834:	movs	r3, #7
    3836:	strb	r3, [r5, #0]
  for (uint32_t i = 0; i < ns; i++) {
    3838:	cmp.w	sl, #0
    383c:	beq.n	3938 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x510>
  // Allocate two reserved clusters, bitmap, upcase, and root clusters.
  secBuf[0] = 0XF8;
  for (size_t i = 1; i < 20; i++) {
    secBuf[i] = 0XFF;
  }
  for (uint32_t i = 0; i < ns; i++) {
    383e:	mov.w	fp, #0
    3842:	b.n	3854 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x42c>
  for (uint32_t i = 0; i < ns; i++) {
    if (!dev->writeSector(sector + i, secBuf)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (i == 0) {
    3844:	cmp.w	fp, #0
    3848:	beq.w	39ac <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x584>
    goto fail;
  }
  memset(secBuf, 0, BYTES_PER_SECTOR);
  // Allocate clusters for bitmap, upcase, and root.
  secBuf[0] = 0X7;
  for (uint32_t i = 0; i < ns; i++) {
    384c:	add.w	fp, fp, #1
    3850:	cmp	sl, fp
    3852:	beq.n	3934 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50c>
    if (!dev->writeSector(sector + i, secBuf)) {
    3854:	ldr	r3, [r6, #0]
    3856:	mov	r2, r5
    3858:	ldr	r1, [sp, #8]
    385a:	mov	r0, r6
    385c:	ldr	r3, [r3, #36]	; 0x24
    385e:	add	r1, fp
    3860:	blx	r3
    3862:	cmp	r0, #0
    3864:	bne.n	3844 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x41c>
  }
  writeMsg(pr, "Format done\r\n");
  return true;

 fail:
  writeMsg(pr, "Format failed\r\n");
    3866:	cmp	r7, #0
    3868:	bne.w	345c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x34>
    386c:	b.n	3524 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xfc>
    }
  }
  writeMsg(pr, "\r\n");
  // Write cluster two, bitmap.
  sector = partitionOffset + clusterHeapOffset;
  bitmapSize = (clusterCount + 7)/8;
    386e:	ldr	r3, [sp, #12]
    3870:	add.w	r8, r3, #7
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
  if (ns > sectorsPerCluster) {
    3874:	ldr	r3, [sp, #16]
    }
  }
  writeMsg(pr, "\r\n");
  // Write cluster two, bitmap.
  sector = partitionOffset + clusterHeapOffset;
  bitmapSize = (clusterCount + 7)/8;
    3876:	mov.w	r8, r8, lsr #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    387a:	addw	sl, r8, #511	; 0x1ff
    387e:	mov.w	sl, sl, lsr #9
  if (ns > sectorsPerCluster) {
    3882:	cmp	sl, r3
    3884:	bhi.w	3524 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3888:	mov.w	r2, #512	; 0x200
    388c:	mov	r1, r7
    388e:	mov	r0, r5
    3890:	bl	c86c <memset>
  // Allocate clusters for bitmap, upcase, and root.
  secBuf[0] = 0X7;
    3894:	movs	r3, #7
    3896:	strb	r3, [r5, #0]
  for (uint32_t i = 0; i < ns; i++) {
    3898:	cmp.w	sl, #0
    389c:	bne.n	383e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x416>
      secBuf[0] = 0;
    }
  }
  // Write cluster three, upcase table.
  writeMsg(pr, "Writing upcase table\r\n");
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    389e:	ldr	r3, [sp, #4]
    38a0:	mov	r0, r9
    38a2:	mov.w	sl, r3, lsl #1
    38a6:	ldr	r3, [sp, #16]
    38a8:	add.w	r1, sl, r3
    38ac:	bl	3380 <ExFatFormatter::writeUpcase(unsigned long)>
    38b0:	cmp	r0, #0
    38b2:	beq.w	3524 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    38b6:	ldr.w	r3, [r9, #8]
    38ba:	ldr	r2, [sp, #16]
    38bc:	cmp.w	r3, r2, lsl #9
    38c0:	bhi.w	3524 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xfc>
    goto fail;
  }
  // Initialize first sector of root.
  writeMsg(pr, "Writing root\r\n");
  ns = sectorsPerCluster;
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    38c4:	ldr	r3, [sp, #16]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    38c6:	mov.w	r2, #512	; 0x200
    38ca:	movs	r1, #0
    38cc:	mov	r0, r5
    goto fail;
  }
  // Initialize first sector of root.
  writeMsg(pr, "Writing root\r\n");
  ns = sectorsPerCluster;
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    38ce:	add.w	sl, sl, r3, lsl #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    38d2:	bl	c86c <memset>

  // Unused Label entry.
  label = reinterpret_cast<DirLabel_t*>(secBuf);
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    38d6:	movs	r2, #3

  // bitmap directory entry.
  dbm = reinterpret_cast<DirBitmap_t*>(secBuf + 32);
  dbm->type = EXFAT_TYPE_BITMAP;
    38d8:	movs	r3, #129	; 0x81
  setLe32(dbm->firstCluster, BITMAP_CLUSTER);
  setLe64(dbm->size, bitmapSize);

  // upcase directory entry.
  dup = reinterpret_cast<DirUpcase_t*>(secBuf + 64);
  dup->type = EXFAT_TYPE_UPCASE;
    38da:	movs	r1, #130	; 0x82
    38dc:	movs	r0, #2
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
  memset(secBuf, 0, BYTES_PER_SECTOR);

  // Unused Label entry.
  label = reinterpret_cast<DirLabel_t*>(secBuf);
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    38de:	strb	r2, [r5, #0]

  // bitmap directory entry.
  dbm = reinterpret_cast<DirBitmap_t*>(secBuf + 32);
  dbm->type = EXFAT_TYPE_BITMAP;
    38e0:	strb.w	r3, [r5, #32]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    38e4:	movs	r3, #0
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    38e6:	str	r0, [r5, #52]	; 0x34
  setLe32(dbm->firstCluster, BITMAP_CLUSTER);
  setLe64(dbm->size, bitmapSize);

  // upcase directory entry.
  dup = reinterpret_cast<DirUpcase_t*>(secBuf + 64);
  dup->type = EXFAT_TYPE_UPCASE;
    38e8:	strb.w	r1, [r5, #64]	; 0x40
  setLe32(dup->checksum, m_upcaseChecksum);
    38ec:	ldr.w	r1, [r9, #4]
    38f0:	str	r2, [r5, #84]	; 0x54
    38f2:	str	r1, [r5, #68]	; 0x44
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    38f4:	ldr.w	r2, [r9, #8]
    38f8:	str.w	r8, [r5, #56]	; 0x38
    38fc:	str	r2, [r5, #88]	; 0x58
  setLe32(dup->firstCluster, UPCASE_CLUSTER);
  setLe64(dup->size, m_upcaseSize);

  // Write root, cluster four.
  for (uint32_t i = 0; i < ns; i++) {
    38fe:	ldr	r2, [sp, #16]
    3900:	str	r3, [r5, #92]	; 0x5c
    3902:	cmp	r2, #0
    3904:	beq.n	3982 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x55a>
    3906:	mov	r8, r3
    3908:	b.n	391a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4f2>
    if (!dev->writeSector(sector + i, secBuf)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (i == 0) {
    390a:	cmp.w	r8, #0
    390e:	beq.n	3974 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x54c>
  setLe32(dup->checksum, m_upcaseChecksum);
  setLe32(dup->firstCluster, UPCASE_CLUSTER);
  setLe64(dup->size, m_upcaseSize);

  // Write root, cluster four.
  for (uint32_t i = 0; i < ns; i++) {
    3910:	add.w	r8, r8, #1
    3914:	ldr	r3, [sp, #16]
    3916:	cmp	r8, r3
    3918:	beq.n	3982 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x55a>
    if (!dev->writeSector(sector + i, secBuf)) {
    391a:	ldr	r3, [r6, #0]
    391c:	mov	r2, r5
    391e:	add.w	r1, sl, r8
    3922:	mov	r0, r6
    3924:	ldr	r3, [r3, #36]	; 0x24
    3926:	blx	r3
    3928:	cmp	r0, #0
    392a:	bne.n	390a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4e2>
  }
  writeMsg(pr, "Format done\r\n");
  return true;

 fail:
  writeMsg(pr, "Format failed\r\n");
    392c:	cmp	r7, #0
    392e:	bne.w	345c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x34>
    3932:	b.n	3524 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xfc>
    if (i == 0) {
      secBuf[0] = 0;
    }
  }
  // Write cluster three, upcase table.
  writeMsg(pr, "Writing upcase table\r\n");
    3934:	cmp	r7, #0
    3936:	beq.n	389e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x476>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    3938:	ldr	r3, [sp, #4]
    if (i == 0) {
      secBuf[0] = 0;
    }
  }
  // Write cluster three, upcase table.
  writeMsg(pr, "Writing upcase table\r\n");
    393a:	mov	r0, r7
    393c:	ldr	r1, [pc, #128]	; (39c0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x598>)
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    393e:	mov.w	sl, r3, lsl #1
    if (i == 0) {
      secBuf[0] = 0;
    }
  }
  // Write cluster three, upcase table.
  writeMsg(pr, "Writing upcase table\r\n");
    3942:	bl	32d8 <Print::write(char const*)>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    3946:	ldr	r3, [sp, #16]
    3948:	mov	r0, r9
    394a:	add.w	r1, sl, r3
    394e:	bl	3380 <ExFatFormatter::writeUpcase(unsigned long)>
    3952:	cmp	r0, #0
    3954:	beq.w	345c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x34>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    3958:	ldr.w	r3, [r9, #8]
    395c:	ldr	r2, [sp, #16]
    395e:	cmp.w	r3, r2, lsl #9
    3962:	bhi.w	345c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x34>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Initialize first sector of root.
  writeMsg(pr, "Writing root\r\n");
    3966:	cmp	r7, #0
    3968:	beq.n	38c4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x49c>
    396a:	ldr	r1, [pc, #88]	; (39c4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x59c>)
    396c:	mov	r0, r7
    396e:	bl	32d8 <Print::write(char const*)>
    3972:	b.n	38c4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x49c>
    if (!dev->writeSector(sector + i, secBuf)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (i == 0) {
      memset(secBuf, 0, BYTES_PER_SECTOR);
    3974:	mov.w	r2, #512	; 0x200
    3978:	mov	r1, r8
    397a:	mov	r0, r5
    397c:	bl	c86c <memset>
    3980:	b.n	3910 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4e8>
    }
  }
  writeMsg(pr, "Format done\r\n");
    3982:	cmp	r7, #0
    3984:	beq.w	346a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x42>
    3988:	mov	r0, r7
    398a:	ldr	r1, [pc, #60]	; (39c8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5a0>)
    398c:	bl	32d8 <Print::write(char const*)>
    3990:	b.n	346a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x42>
    goto fail;
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    3992:	mov.w	r2, #256	; 0x100
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Determine partition layout.
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    3996:	str.w	r8, [sp, #24]
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    399a:	str	r2, [sp, #16]
    399c:	b.n	34a0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    if (!dev->writeSector(sector + i, secBuf)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (i == 0) {
      memset(secBuf, 0, BYTES_PER_SECTOR);
    399e:	mov.w	r2, #512	; 0x200
    39a2:	mov	r1, r4
    39a4:	mov	r0, r5
    39a6:	bl	c86c <memset>
    39aa:	b.n	37be <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x396>
    if (!dev->writeSector(sector + i, secBuf)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (i == 0) {
      secBuf[0] = 0;
    39ac:	strb.w	fp, [r5]
    39b0:	b.n	384c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x424>
    39b2:	nop
    39b4:	.word	0x20001088
    39b8:	.word	0x20001358
    39bc:	.word	0x200010ac
    39c0:	.word	0x20001098
    39c4:	.word	0x200010b0
    39c8:	.word	0x200010c0

000039cc <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    39cc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39d0:	mov	r4, r1
    39d2:	mov	r5, r2
    39d4:	add.w	r8, r1, #30
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    39d8:	ldrh	r3, [r5, #12]
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    39da:	mov	r0, r5
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    39dc:	ldrh.w	r6, [r4, #2]!
    39e0:	cbnz	r3, 39ea <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    39e2:	ldr	r2, [r5, #4]
    39e4:	ldr	r3, [r5, #8]
    39e6:	cmp	r2, r3
    39e8:	beq.n	3a08 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    39ea:	bl	3284 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    39ee:	bl	31d0 <toUpcase(unsigned short)>
    39f2:	mov	r7, r0
    39f4:	mov	r0, r6
    39f6:	bl	31d0 <toUpcase(unsigned short)>
    39fa:	cmp	r7, r0
    39fc:	bne.n	3a12 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
  for (uint8_t i = 0; i < 15; i++) {
    39fe:	cmp	r4, r8
    3a00:	bne.n	39d8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    3a02:	movs	r0, #1
    3a04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    3a08:	clz	r0, r6
    3a0c:	lsrs	r0, r0, #5
    3a0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    if (toUpcase(cp) != toUpcase(u)) {
       return false;
    3a12:	movs	r0, #0
    3a14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003a18 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    3a18:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    3a1c:	ldrb.w	r3, [r0, #49]	; 0x31
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    3a20:	mov	r9, r1
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    3a22:	cmp	r3, #0
    3a24:	beq.n	3ab2 <ExFatFile::getName8(char*, unsigned int)+0x9a>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    3a26:	ldrb.w	r3, [r0, #48]	; 0x30
    3a2a:	mov	r8, r0
    3a2c:	cmp	r3, #1
    3a2e:	bls.n	3ad8 <ExFatFile::getName8(char*, unsigned int)+0xc0>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    3a30:	subs	r2, #1
  uint32_t cp;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    3a32:	mov	sl, r1
    3a34:	movs	r7, #2
    3a36:	mov.w	fp, #0
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    3a3a:	adds	r6, r1, r2
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    dn = reinterpret_cast<DirName_t*>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    3a3c:	movs	r2, #0
    3a3e:	mov	r1, r7
    3a40:	mov	r0, r8
    3a42:	bl	3b4c <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    3a46:	cbz	r0, 3ab2 <ExFatFile::getName8(char*, unsigned int)+0x9a>
    3a48:	ldrb	r3, [r0, #0]
    3a4a:	cmp	r3, #193	; 0xc1
    3a4c:	bne.n	3ab2 <ExFatFile::getName8(char*, unsigned int)+0x9a>
    3a4e:	mov	r4, r0
    3a50:	add.w	r5, r0, #30
    3a54:	b.n	3a8a <ExFatFile::getName8(char*, unsigned int)+0x72>
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (hs) {
        if (!FsUtf::isLowSurrogate(c)) {
    3a56:	add.w	r3, r0, #9216	; 0x2400
    3a5a:	uxth	r3, r3
    3a5c:	cmp.w	r3, #1024	; 0x400
    3a60:	bcs.n	3ab2 <ExFatFile::getName8(char*, unsigned int)+0x9a>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    3a62:	mov.w	fp, fp, lsl #10
    3a66:	ldr	r3, [pc, #120]	; (3ae0 <ExFatFile::getName8(char*, unsigned int)+0xc8>)
    3a68:	ubfx	r0, r0, #0, #10
    3a6c:	and.w	r3, fp, r3
    3a70:	orrs	r0, r3
    3a72:	add.w	r0, r0, #65536	; 0x10000
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    3a76:	mov	r1, sl
    3a78:	mov	r2, r6
    3a7a:	bl	2f50 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    3a7e:	mov	sl, r0
    3a80:	cbz	r0, 3ab2 <ExFatFile::getName8(char*, unsigned int)+0x9a>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    3a82:	cmp	r4, r5
    3a84:	mov.w	fp, #0
    3a88:	beq.n	3aca <ExFatFile::getName8(char*, unsigned int)+0xb2>
    3a8a:	ldrh.w	r0, [r4, #2]!
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (hs) {
    3a8e:	cmp.w	fp, #0
    3a92:	bne.n	3a56 <ExFatFile::getName8(char*, unsigned int)+0x3e>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
    3a94:	add.w	r3, r0, #10240	; 0x2800
    3a98:	uxth	r3, r3
          DBG_FAIL_MACRO;
          goto fail;
        }
        cp = FsUtf::u16ToCp(hs, c);
        hs = 0;
      } else if (!FsUtf::isSurrogate(c)) {
    3a9a:	cmp.w	r3, #2048	; 0x800
    3a9e:	bcc.n	3abe <ExFatFile::getName8(char*, unsigned int)+0xa6>
        if (c == 0) {
    3aa0:	cmp	r0, #0
    3aa2:	bne.n	3a76 <ExFatFile::getName8(char*, unsigned int)+0x5e>
    3aa4:	rsb	r0, r9, sl
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    3aa8:	movs	r3, #0
    3aaa:	strb.w	r3, [sl]
  return str - name;
    3aae:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

 fail:
  *name = 0;
    3ab2:	movs	r3, #0
  return 0;
    3ab4:	mov	r0, r3
 done:
  *str = '\0';
  return str - name;

 fail:
  *name = 0;
    3ab6:	strb.w	r3, [r9]
  return 0;
}
    3aba:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      } else if (!FsUtf::isSurrogate(c)) {
        if (c == 0) {
          goto done;
        }
        cp = c;
      } else if (FsUtf::isHighSurrogate(c)) {
    3abe:	cmp.w	r3, #1024	; 0x400
    3ac2:	bcs.n	3ab2 <ExFatFile::getName8(char*, unsigned int)+0x9a>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    3ac4:	cmp	r4, r5
    3ac6:	mov	fp, r0
    3ac8:	bne.n	3a8a <ExFatFile::getName8(char*, unsigned int)+0x72>
  uint32_t cp;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    3aca:	adds	r7, #1
    3acc:	ldrb.w	r3, [r8, #48]	; 0x30
    3ad0:	uxtb	r7, r7
    3ad2:	cmp	r3, r7
    3ad4:	bcs.n	3a3c <ExFatFile::getName8(char*, unsigned int)+0x24>
    3ad6:	b.n	3aa4 <ExFatFile::getName8(char*, unsigned int)+0x8c>
    3ad8:	mov	sl, r1
    3ada:	movs	r0, #0
    3adc:	b.n	3aa8 <ExFatFile::getName8(char*, unsigned int)+0x90>
    3ade:	nop
    3ae0:	.word	0x000ffc00

00003ae4 <ExFatFile::hashName(ExName_t*)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    3ae4:	push	{r3, r4, r5, r6, r7, lr}
    3ae6:	mov	r5, r1
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    3ae8:	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    3aea:	movw	r6, #65535	; 0xffff
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    3aee:	ldr	r2, [r5, #0]
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
  uint16_t hash = 0;
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
    3af0:	mov	r1, r3
    ls = 0;  // lowSurrogate
    3af2:	strh	r3, [r5, #12]
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
  uint16_t hash = 0;
    3af4:	mov	r4, r3
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    3af6:	str	r2, [r5, #4]
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
    3af8:	str	r3, [r5, #16]
    3afa:	b.n	3b2a <ExFatFile::hashName(ExName_t*)+0x46>
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    3afc:	bl	3284 <FsName::get16()>
    if (u == 0XFFFF) {
    3b00:	cmp	r0, r6
    3b02:	beq.n	3b48 <ExFatFile::hashName(ExName_t*)+0x64>
  hash = ((hash << 15) | (hash >> 1));
  return hash;
}
//------------------------------------------------------------------------------
inline uint16_t exFatHash(uint16_t u, uint16_t hash) {
  uint16_t c = toUpcase(u);
    3b04:	bl	31d0 <toUpcase(unsigned short)>
    if (u == 0XFFFF) {
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    3b08:	ldr	r3, [r5, #16]
    3b0a:	lsls	r2, r4, #15
    3b0c:	ldrh	r1, [r5, #12]
}
//------------------------------------------------------------------------------
inline uint16_t exFatHash(uint16_t u, uint16_t hash) {
  uint16_t c = toUpcase(u);
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    3b0e:	asrs	r7, r0, #8
    if (u == 0XFFFF) {
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    3b10:	adds	r3, #1
    3b12:	orr.w	r2, r2, r4, lsr #1
    3b16:	str	r3, [r5, #16]
    3b18:	uxtab	r0, r2, r0
    3b1c:	ubfx	r3, r0, #1, #15
    3b20:	orr.w	r0, r3, r0, lsl #15
}
//------------------------------------------------------------------------------
inline uint16_t exFatHash(uint16_t u, uint16_t hash) {
  uint16_t c = toUpcase(u);
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    3b24:	uxtah	r4, r7, r0
    3b28:	uxth	r4, r4
  uint16_t hash = 0;
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    3b2a:	mov	r0, r5
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    3b2c:	cmp	r1, #0
    3b2e:	bne.n	3afc <ExFatFile::hashName(ExName_t*)+0x18>
    3b30:	ldr	r2, [r5, #4]
    3b32:	ldr	r3, [r5, #8]
    3b34:	cmp	r2, r3
    3b36:	bne.n	3afc <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    3b38:	ldr	r0, [r5, #16]
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    3b3a:	strh	r4, [r5, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    3b3c:	subs	r0, #1
    3b3e:	cmp	r0, #254	; 0xfe
    3b40:	ite	hi
    3b42:	movhi	r0, #0
    3b44:	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    3b46:	pop	{r3, r4, r5, r6, r7, pc}
    goto fail;
  }
  return true;

 fail:
  return false;
    3b48:	movs	r0, #0
    3b4a:	pop	{r3, r4, r5, r6, r7, pc}

00003b4c <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3b4c:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    3b4e:	add.w	r3, r0, #36	; 0x24
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3b52:	sub	sp, #20
    3b54:	mov	r5, r0
    3b56:	mov	r6, r1
  DirPos_t pos = m_dirPos;
    3b58:	add	r4, sp, #4
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3b5a:	mov	r7, r2
  DirPos_t pos = m_dirPos;
    3b5c:	ldmia.w	r3, {r0, r1, r2}
    3b60:	stmia.w	r4, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    3b64:	lsls	r2, r6, #5
    3b66:	mov	r1, r4
    3b68:	ldr	r0, [r5, #32]
    3b6a:	bl	4680 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3b6e:	cmp	r0, #1
    3b70:	bne.n	3b80 <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    3b72:	mov	r2, r7
    3b74:	mov	r1, r4
    3b76:	ldr	r0, [r5, #32]
    3b78:	bl	4608 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    3b7c:	add	sp, #20
    3b7e:	pop	{r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
  DirPos_t pos = m_dirPos;
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    return nullptr;
    3b80:	movs	r0, #0
  }
  return m_vol->dirCache(&pos, options);
}
    3b82:	add	sp, #20
    3b84:	pop	{r4, r5, r6, r7, pc}
    3b86:	nop

00003b88 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    3b88:	push	{r4, lr}
    3b8a:	mov	r4, r0
  bool rtn = sync();
    3b8c:	bl	4c60 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3b90:	movs	r3, #0
    3b92:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3b96:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    3b9a:	pop	{r4, pc}

00003b9c <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    3b9c:	push	{r3, r4, r5, lr}
    3b9e:	mov	r5, r1
    3ba0:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    3ba2:	add.w	r1, r0, #36	; 0x24
    3ba6:	movs	r2, #0
    3ba8:	ldr	r0, [r0, #32]
    3baa:	bl	4608 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    3bae:	mov	r3, r0
    3bb0:	cbz	r0, 3bbe <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x22>
    3bb2:	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
  *ptime = getLe16(df->createTime);
  return true;
    3bb4:	movs	r0, #1
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
  if (!df) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    3bb6:	strh	r2, [r5, #0]
    3bb8:	ldrh	r3, [r3, #8]
  *ptime = getLe16(df->createTime);
    3bba:	strh	r3, [r4, #0]
  return true;
    3bbc:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    3bbe:	pop	{r3, r4, r5, pc}

00003bc0 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    3bc0:	push	{r3, r4, r5, lr}
    3bc2:	mov	r5, r1
    3bc4:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    3bc6:	add.w	r1, r0, #36	; 0x24
    3bca:	movs	r2, #0
    3bcc:	ldr	r0, [r0, #32]
    3bce:	bl	4608 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    3bd2:	mov	r3, r0
    3bd4:	cbz	r0, 3be2 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x22>
    3bd6:	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
  *ptime = getLe16(df->modifyTime);
  return true;
    3bd8:	movs	r0, #1
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
  if (!df) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    3bda:	strh	r2, [r5, #0]
    3bdc:	ldrh	r3, [r3, #12]
  *ptime = getLe16(df->modifyTime);
    3bde:	strh	r3, [r4, #0]
  return true;
    3be0:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    3be2:	pop	{r3, r4, r5, pc}

00003be4 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    3be4:	ldrb.w	r2, [r0, #49]	; 0x31
    3be8:	cbz	r2, 3bee <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    3bea:	movs	r0, #0
    3bec:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    3bee:	push	{r3, r4, r5, lr}
    3bf0:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3bf2:	mov	r1, r2
    3bf4:	movs	r2, #56	; 0x38
    3bf6:	mov	r4, r0
    3bf8:	bl	c86c <memset>
  m_attributes = FILE_ATTR_ROOT;
    3bfc:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3bfe:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    3c00:	str	r5, [r4, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3c02:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3c06:	strb.w	r0, [r4, #51]	; 0x33
    3c0a:	pop	{r3, r4, r5, pc}

00003c0c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    3c0c:	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
    3c0e:	ldrb	r4, [r1, #0]
    3c10:	cmp	r4, #32
    3c12:	bne.n	3c1c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    3c14:	ldrb.w	r4, [r1, #1]!
    3c18:	cmp	r4, #32
    3c1a:	beq.n	3c14 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    3c1c:	mov	r6, r1
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':'
    3c1e:	ldr	r7, [pc, #120]	; (3c98 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>)
    path++;
  }
  fname->begin = path;
    3c20:	str	r1, [r2, #0]
  fname->end = path;
    3c22:	str	r1, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    3c24:	ldrb	r5, [r6, #0]
    3c26:	mov	r4, r6
    3c28:	adds	r6, #1
    3c2a:	cmp	r5, #47	; 0x2f
    3c2c:	it	ne
    3c2e:	cmpne	r5, #0
    3c30:	beq.n	3c78 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    3c32:	sub.w	r4, r5, #34	; 0x22
    3c36:	cmp	r5, #31
    3c38:	uxtb	r4, r4
    3c3a:	ite	hi
    3c3c:	movhi	r1, #0
    3c3e:	movls	r1, #1
    3c40:	cmp	r4, #29
    3c42:	bls.n	3c62 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x56>
    3c44:	movs	r4, #1
    || c == '<' || c == '>' || c == '?' || c == '\\'|| c == '|';
    3c46:	cmp	r1, r4
    3c48:	bcs.n	3c72 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    3c4a:	and.w	r1, r5, #191	; 0xbf
    3c4e:	cmp	r1, #60	; 0x3c
    3c50:	beq.n	3c72 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    3c52:	cmp	r5, #92	; 0x5c
    3c54:	beq.n	3c72 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    uint8_t c = *path++;
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (c != '.' && c != ' ') {
    3c56:	cmp	r5, #46	; 0x2e
    3c58:	beq.n	3c24 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x18>
    3c5a:	cmp	r5, #32
    3c5c:	beq.n	3c24 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x18>
      // Need to trim trailing dots spaces.
      fname->end = path;
    3c5e:	str	r6, [r2, #8]
    3c60:	b.n	3c24 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x18>
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':'
    3c62:	lsr.w	r4, r7, r4
    3c66:	and.w	r4, r4, #1
    3c6a:	eor.w	r4, r4, #1
    || c == '<' || c == '>' || c == '?' || c == '\\'|| c == '|';
    3c6e:	cmp	r1, r4
    3c70:	bcc.n	3c4a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    3c72:	movs	r0, #0
    3c74:	pop	{r4, r5, r6, r7}
    3c76:	bx	lr
      // Need to trim trailing dots spaces.
      fname->end = path;
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    3c78:	cmp	r5, #32
    3c7a:	beq.n	3c80 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
    3c7c:	cmp	r5, #47	; 0x2f
    3c7e:	bne.n	3c8c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    3c80:	ldrb.w	r1, [r4, #1]!
    3c84:	cmp	r1, #32
    3c86:	beq.n	3c80 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
    3c88:	cmp	r1, #47	; 0x2f
    3c8a:	beq.n	3c80 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
  *ptr = path;
    3c8c:	str	r4, [r3, #0]
  return hashName(fname);
    3c8e:	mov	r1, r2

 fail:
  return false;
}
    3c90:	pop	{r4, r5, r6, r7}
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
  *ptr = path;
  return hashName(fname);
    3c92:	b.w	3ae4 <ExFatFile::hashName(ExName_t*)>
    3c96:	nop
    3c98:	.word	0x31000101

00003c9c <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3c9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ca0:	ldrb.w	r3, [r0, #51]	; 0x33
    3ca4:	sub	sp, #12
    3ca6:	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3ca8:	lsls	r6, r3, #31
    3caa:	bpl.n	3d6e <ExFatFile::read(void*, unsigned int)+0xd2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3cac:	lsls	r4, r3, #25
    3cae:	mov	r6, r1
    3cb0:	mov	r9, r2
    3cb2:	bpl.w	3e30 <ExFatFile::read(void*, unsigned int)+0x194>
    if ((m_curPosition + count) > m_validLength) {
    3cb6:	ldrd	r0, r1, [r5]
    3cba:	ldrd	r2, r3, [r5, #16]
    3cbe:	adds.w	sl, r0, r9
    3cc2:	adc.w	fp, r1, #0
    3cc6:	cmp	r3, fp
    3cc8:	it	eq
    3cca:	cmpeq	r2, sl
    3ccc:	bcc.w	3e3c <ExFatFile::read(void*, unsigned int)+0x1a0>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3cd0:	cmp.w	r9, #0
    3cd4:	beq.n	3dc0 <ExFatFile::read(void*, unsigned int)+0x124>
    3cd6:	mov	sl, r5
    3cd8:	mov	r4, r9
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    3cda:	movw	r7, #511	; 0x1ff
    3cde:	ldrd	r0, r1, [sl], #24
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3ce2:	ldr	r3, [r5, #32]
    3ce4:	ldr.w	r2, [r3, #1080]	; 0x438
    3ce8:	and.w	r8, r2, r0
    sectorOffset = clusterOffset & m_vol->sectorMask();
    3cec:	ubfx	fp, r8, #0, #9
    if (clusterOffset == 0) {
    3cf0:	cmp.w	r8, #0
    3cf4:	bne.n	3dcc <ExFatFile::read(void*, unsigned int)+0x130>
      if (m_curPosition == 0) {
    3cf6:	orrs.w	r2, r0, r1
    3cfa:	bne.n	3df0 <ExFatFile::read(void*, unsigned int)+0x154>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3cfc:	ldrb.w	r2, [r5, #49]	; 0x31
    3d00:	lsls	r1, r2, #25
    3d02:	ite	mi
    3d04:	ldrmi.w	r1, [r3, #1076]	; 0x434
    3d08:	ldrpl	r1, [r5, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    3d0a:	str	r1, [r5, #24]
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3d0c:	mov.w	r0, r8, lsr #9
    3d10:	subs	r1, #2
    3d12:	ldr.w	r2, [r3, #1068]	; 0x42c
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    3d16:	cmp	r4, r7
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    3d18:	ldrb.w	lr, [r3, #1093]	; 0x445
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3d1c:	add	r2, r0
    3d1e:	lsl.w	r1, r1, lr
    3d22:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    3d24:	bls.n	3d84 <ExFatFile::read(void*, unsigned int)+0xe8>
    3d26:	cmp.w	fp, #0
    3d2a:	bne.n	3d84 <ExFatFile::read(void*, unsigned int)+0xe8>
    3d2c:	ldr.w	r2, [r3, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    3d30:	cmp	r1, r2
    3d32:	beq.n	3d84 <ExFatFile::read(void*, unsigned int)+0xe8>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    3d34:	cmp.w	r4, #1024	; 0x400
    3d38:	bcc.n	3dfe <ExFatFile::read(void*, unsigned int)+0x162>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    3d3a:	mov.w	ip, #1
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3d3e:	mov.w	r8, r4, lsr #9
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    3d42:	lsl.w	lr, ip, lr
    3d46:	rsb	r0, r0, lr
    3d4a:	cmp	r8, r0
    3d4c:	it	cs
    3d4e:	movcs	r8, r0
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    3d50:	cmp	r1, r2
    3d52:	bhi.n	3dd0 <ExFatFile::read(void*, unsigned int)+0x134>
    3d54:	add.w	r0, r1, r8
    3d58:	cmp	r2, r0
    3d5a:	bcs.n	3dd0 <ExFatFile::read(void*, unsigned int)+0x134>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    3d5c:	add.w	r0, r3, #528	; 0x210
    3d60:	str	r1, [sp, #4]
    3d62:	str	r3, [sp, #0]
    3d64:	bl	31c0 <FsCache::sync()>
    3d68:	ldr	r3, [sp, #0]
    3d6a:	ldr	r1, [sp, #4]
    3d6c:	cbnz	r0, 3dd0 <ExFatFile::read(void*, unsigned int)+0x134>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    3d6e:	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    3d72:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    3d76:	orr.w	r3, r3, #2
    3d7a:	strb.w	r3, [r5, #50]	; 0x32
  return -1;
}
    3d7e:	add	sp, #12
    3d80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    3d84:	add.w	r0, r3, #528	; 0x210
    3d88:	movs	r2, #0
    3d8a:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    3d8e:	cmp	r0, #0
    3d90:	beq.n	3d6e <ExFatFile::read(void*, unsigned int)+0xd2>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    3d92:	rsb	r8, fp, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    3d96:	add.w	r1, r0, fp
    3d9a:	mov	r0, r6
    3d9c:	cmp	r8, r4
    3d9e:	it	cs
    3da0:	movcs	r8, r4
    3da2:	mov	r2, r8
    3da4:	bl	9920 <memcpy>
    3da8:	mov	r0, r8
    3daa:	movs	r1, #0
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    3dac:	add	r6, r8
    m_curPosition += n;
    3dae:	ldrd	r2, r3, [r5]
    3db2:	adds	r0, r0, r2
    3db4:	adcs	r1, r3
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3db6:	subs.w	r4, r4, r8
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    3dba:	strd	r0, r1, [r5]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3dbe:	bne.n	3ce2 <ExFatFile::read(void*, unsigned int)+0x46>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3dc0:	movs	r4, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    3dc2:	rsb	r0, r4, r9

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    3dc6:	add	sp, #12
    3dc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3dcc:	ldr	r1, [r5, #24]
    3dce:	b.n	3d0c <ExFatFile::read(void*, unsigned int)+0x70>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    3dd0:	ldr.w	r0, [r3, #532]	; 0x214
    3dd4:	mov	r2, r6
    3dd6:	mov	r3, r8
    3dd8:	ldr.w	lr, [r0]
    3ddc:	ldr.w	fp, [lr, #20]
    3de0:	blx	fp
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    3de2:	cmp	r0, #0
    3de4:	beq.n	3d6e <ExFatFile::read(void*, unsigned int)+0xd2>
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    3de6:	mov.w	r8, r8, lsl #9
    3dea:	movs	r1, #0
    3dec:	mov	r0, r8
    3dee:	b.n	3dac <ExFatFile::read(void*, unsigned int)+0x110>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    3df0:	ldrb.w	r2, [r5, #51]	; 0x33
    3df4:	lsls	r2, r2, #25
    3df6:	bpl.n	3e1a <ExFatFile::read(void*, unsigned int)+0x17e>
        m_curCluster++;
    3df8:	ldr	r1, [r5, #24]
    3dfa:	adds	r1, #1
    3dfc:	b.n	3d0a <ExFatFile::read(void*, unsigned int)+0x6e>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    3dfe:	ldr.w	r0, [r3, #532]	; 0x214
    3e02:	mov	r2, r6
    3e04:	ldr	r3, [r0, #0]
    3e06:	ldr	r3, [r3, #16]
    3e08:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    3e0a:	cmp	r0, #0
    3e0c:	beq.n	3d6e <ExFatFile::read(void*, unsigned int)+0xd2>
    3e0e:	mov.w	r0, #512	; 0x200
    3e12:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3e14:	mov.w	r8, #512	; 0x200
    3e18:	b.n	3dac <ExFatFile::read(void*, unsigned int)+0x110>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3e1a:	mov	r0, r3
    3e1c:	mov	r2, sl
    3e1e:	ldr	r1, [r5, #24]
    3e20:	bl	4640 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    3e24:	cmp	r0, #0
    3e26:	blt.n	3d6e <ExFatFile::read(void*, unsigned int)+0xd2>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    3e28:	beq.n	3e42 <ExFatFile::read(void*, unsigned int)+0x1a6>
    3e2a:	ldr	r3, [r5, #32]
    3e2c:	ldr	r1, [r5, #24]
    3e2e:	b.n	3d0c <ExFatFile::read(void*, unsigned int)+0x70>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3e30:	ldrb.w	r3, [r0, #49]	; 0x31
    3e34:	lsls	r0, r3, #28
    3e36:	bmi.w	3cb6 <ExFatFile::read(void*, unsigned int)+0x1a>
    3e3a:	b.n	3cd0 <ExFatFile::read(void*, unsigned int)+0x34>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    3e3c:	rsb	r9, r0, r2
    3e40:	b.n	3cd0 <ExFatFile::read(void*, unsigned int)+0x34>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
    3e42:	ldrb.w	r3, [r5, #49]	; 0x31
    3e46:	tst.w	r3, #80	; 0x50
    3e4a:	bne.n	3dc2 <ExFatFile::read(void*, unsigned int)+0x126>
    3e4c:	b.n	3d6e <ExFatFile::read(void*, unsigned int)+0xd2>
    3e4e:	nop

00003e50 <ExFatFile::peek()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
    3e50:	push	{r4, r5, r6, r7, lr}
    3e52:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3e54:	movs	r2, #1
    3e56:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
    3e58:	ldr	r5, [r0, #24]
    3e5a:	add.w	r1, sp, #7
 fail:
  return false;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
    3e5e:	ldrd	r6, r7, [r0]
    3e62:	bl	3c9c <ExFatFile::read(void*, unsigned int)>
    3e66:	cmp	r0, #1
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    3e68:	str	r5, [r4, #24]
    3e6a:	ite	eq
    3e6c:	ldrbeq.w	r0, [sp, #7]
    3e70:	movne.w	r0, #4294967295
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    3e74:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    3e78:	add	sp, #12
    3e7a:	pop	{r4, r5, r6, r7, pc}

00003e7c <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3e7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e80:	ldrb.w	lr, [r0, #49]	; 0x31
    3e84:	sub	sp, #20
    3e86:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3e88:	ldr	r5, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    3e8a:	cmp.w	lr, #0
    3e8e:	beq.n	3efe <ExFatFile::seekSet(unsigned long long)+0x82>
    3e90:	mov	r6, r2
    3e92:	mov	r7, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3e94:	ldrd	r0, r1, [r0]
    3e98:	cmp	r1, r3
    3e9a:	it	eq
    3e9c:	cmpeq	r0, r2
    3e9e:	beq.n	3f6c <ExFatFile::seekSet(unsigned long long)+0xf0>
    return true;
  }
  if (pos == 0) {
    3ea0:	orrs.w	r3, r6, r7
    3ea4:	bne.n	3f08 <ExFatFile::seekSet(unsigned long long)+0x8c>
    // set position to start of file
    m_curCluster = 0;
    3ea6:	movs	r3, #0
    3ea8:	str	r3, [r4, #24]
    }
  }

 done:
  m_curPosition = pos;
  return true;
    3eaa:	movs	r0, #1
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    3eac:	strd	r6, r7, [r4]
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    3eb0:	add	sp, #20
    3eb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3eb6:	adds.w	r2, r0, #4294967295
    3eba:	adc.w	r3, r1, #4294967295
    3ebe:	lsr.w	ip, r2, ip
    3ec2:	lsl.w	r8, r3, r8
    3ec6:	lsr.w	sl, r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    3eca:	orrs.w	r3, r0, r1
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3ece:	orr.w	ip, ip, r8
    3ed2:	orr.w	ip, ip, sl
  if (nNew < nCur || m_curPosition == 0) {
    3ed6:	beq.n	3f70 <ExFatFile::seekSet(unsigned long long)+0xf4>
    3ed8:	cmp	fp, ip
    3eda:	bcc.n	3f70 <ExFatFile::seekSet(unsigned long long)+0xf4>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    3edc:	rsb	fp, ip, fp
    3ee0:	mov	r9, r5
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3ee2:	add.w	r8, r4, #24
    3ee6:	mov	r5, fp
    3ee8:	mov	r2, r8
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    3eea:	cmp	r5, #0
    3eec:	beq.n	3eaa <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3eee:	ldr	r1, [r4, #24]
    3ef0:	subs	r5, #1
    3ef2:	ldr	r0, [r4, #32]
    3ef4:	bl	4640 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3ef8:	cmp	r0, #0
    3efa:	bgt.n	3ee8 <ExFatFile::seekSet(unsigned long long)+0x6c>
    3efc:	mov	r5, r9
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    3efe:	movs	r0, #0
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    3f00:	str	r5, [r4, #24]
  return false;
}
    3f02:	add	sp, #20
    3f04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    3f08:	tst.w	lr, #8
    3f0c:	bne.n	3f5e <ExFatFile::seekSet(unsigned long long)+0xe2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3f0e:	ldr	r3, [r4, #32]
    3f10:	adds.w	r8, r6, #4294967295
    3f14:	ldrb.w	ip, [r3, #1093]	; 0x445
    3f18:	adc.w	r9, r7, #4294967295
    3f1c:	mov	sl, r8
    3f1e:	str	r3, [sp, #12]
    3f20:	add.w	ip, ip, #9
    3f24:	mov	fp, r9
  if (isContiguous()) {
    3f26:	ldrb.w	r9, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3f2a:	uxtb.w	ip, ip
  if (isContiguous()) {
    3f2e:	tst.w	r9, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3f32:	rsb	r8, ip, #32
    3f36:	lsr.w	r2, sl, ip
    3f3a:	strd	sl, fp, [sp]
    3f3e:	ldr	r3, [sp, #4]
    3f40:	sub.w	sl, ip, #32
    3f44:	lsl.w	fp, r3, r8
    3f48:	lsr.w	r3, r3, sl
    3f4c:	orr.w	r2, r2, fp
    3f50:	orr.w	fp, r2, r3
  if (isContiguous()) {
    3f54:	beq.n	3eb6 <ExFatFile::seekSet(unsigned long long)+0x3a>
    m_curCluster = m_firstCluster + nNew;
    3f56:	ldr	r3, [r4, #28]
    3f58:	add	r3, fp
    3f5a:	str	r3, [r4, #24]
    goto done;
    3f5c:	b.n	3eaa <ExFatFile::seekSet(unsigned long long)+0x2e>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_validLength) {
    3f5e:	ldrd	r2, r3, [r4, #16]
    3f62:	cmp	r3, r7
    3f64:	it	eq
    3f66:	cmpeq	r2, r6
    3f68:	bcc.n	3efe <ExFatFile::seekSet(unsigned long long)+0x82>
    3f6a:	b.n	3f0e <ExFatFile::seekSet(unsigned long long)+0x92>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    3f6c:	movs	r0, #1
    3f6e:	b.n	3f02 <ExFatFile::seekSet(unsigned long long)+0x86>
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3f70:	tst.w	lr, #64	; 0x40
    3f74:	bne.n	3f7c <ExFatFile::seekSet(unsigned long long)+0x100>
    3f76:	ldr	r3, [r4, #28]
    3f78:	str	r3, [r4, #24]
    3f7a:	b.n	3ee0 <ExFatFile::seekSet(unsigned long long)+0x64>
    3f7c:	ldr	r3, [sp, #12]
    3f7e:	ldr.w	r3, [r3, #1076]	; 0x434
    3f82:	b.n	3f78 <ExFatFile::seekSet(unsigned long long)+0xfc>

00003f84 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    3f84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f88:	sub	sp, #60	; 0x3c
    3f8a:	mov	r9, r0
    3f8c:	str	r3, [sp, #4]
  uint8_t freeCount = 0;
  uint8_t freeNeed = 3;
  bool inSet = false;

  // error if already open, no access mode, or no directory.
  if (isOpen() || !dir->isDir()) {
    3f8e:	ldrb.w	r3, [r0, #49]	; 0x31
    3f92:	cbnz	r3, 3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    3f94:	ldrb.w	r3, [r1, #49]	; 0x31
    3f98:	mov	r4, r1
    3f9a:	tst.w	r3, #80	; 0x50
    3f9e:	bne.n	3fb2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e>
  return sync();
#endif  // EXFAT_READ_ONLY

 fail:
  // close file
  m_attributes = FILE_ATTR_CLOSED;
    3fa0:	movs	r3, #0
  m_flags = 0;
  return false;
    3fa2:	mov	r0, r3
  return sync();
#endif  // EXFAT_READ_ONLY

 fail:
  // close file
  m_attributes = FILE_ATTR_CLOSED;
    3fa4:	strb.w	r3, [r9, #49]	; 0x31
  m_flags = 0;
    3fa8:	strb.w	r3, [r9, #51]	; 0x33
  return false;
}
    3fac:	add	sp, #60	; 0x3c
    3fae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  switch (oflag & O_ACCMODE) {
    3fb2:	ldr	r3, [sp, #4]
    3fb4:	mov	r5, r2
    3fb6:	and.w	r3, r3, #3
    3fba:	cmp	r3, #1
    3fbc:	beq.n	3fcc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x48>
    3fbe:	cmp	r3, #2
    3fc0:	beq.w	41c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x23e>
    3fc4:	cmp	r3, #0
    3fc6:	bne.n	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    3fc8:	movs	r2, #1
    3fca:	b.n	3fce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x4a>
    3fcc:	movs	r2, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    3fce:	ldr	r3, [sp, #4]
    3fd0:	and.w	r3, r3, #8
    3fd4:	orrs	r3, r2
    3fd6:	str	r3, [sp, #8]

  if (fname) {
    3fd8:	cmp	r5, #0
    3fda:	bne.w	4198 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x214>
  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[FS_DIR_SIZE];
  uint8_t freeCount = 0;
  uint8_t freeNeed = 3;
    3fde:	movs	r7, #3
        goto found;
      }
      fname->reset();
      if (fname->nameLength != dirStream->nameLength ||
          fname->nameHash != getLe16(dirStream->nameHash)) {
        inSet = false;
    3fe0:	movs	r6, #0
      m_dirPos.isContiguous = dir->isContiguous();
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
        m_flags |= FILE_FLAG_CONTIGUOUS;
    3fe2:	ldr	r3, [sp, #8]
        goto found;
      }
      fname->reset();
      if (fname->nameLength != dirStream->nameLength ||
          fname->nameHash != getLe16(dirStream->nameHash)) {
        inSet = false;
    3fe4:	mov	fp, r6
      m_dirPos.isContiguous = dir->isContiguous();
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
        m_flags |= FILE_FLAG_CONTIGUOUS;
    3fe6:	orr.w	r3, r3, #64	; 0x40
    3fea:	str	r3, [sp, #12]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    dir->rewind();
  }

  while (1) {
    n = dir->read(buf, FS_DIR_SIZE);
    3fec:	movs	r2, #32
    3fee:	add	r1, sp, #24
    3ff0:	mov	r0, r4
    3ff2:	bl	3c9c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3ff6:	cbz	r0, 4036 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
      goto create;
    }
    if (n != FS_DIR_SIZE) {
    3ff8:	cmp	r0, #32
    3ffa:	bne.n	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    3ffc:	ldrb.w	r3, [sp, #24]
    4000:	lsls	r0, r3, #24
    4002:	bmi.n	4090 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
      // Unused entry.
      if (freeCount == 0) {
    4004:	cmp.w	fp, #0
    4008:	bne.n	4014 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x90>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    400a:	ldr	r2, [r4, #0]
    400c:	ldr.w	sl, [r4, #24]
    4010:	sub.w	r8, r2, #32
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    4014:	cmp	fp, r7
    4016:	bcs.n	4020 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9c>
        freeCount++;
    4018:	add.w	fp, fp, #1
    401c:	uxtb.w	fp, fp
      }
      if (!buf[0]) {
    4020:	cmp	r3, #0
    4022:	beq.w	41c6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x242>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    dir->rewind();
  }

  while (1) {
    n = dir->read(buf, FS_DIR_SIZE);
    4026:	movs	r2, #32
    4028:	add	r1, sp, #24
    402a:	mov	r0, r4
      }
      if (fname->atEnd()) {
        goto found;
      }
    } else {
      inSet = false;
    402c:	movs	r6, #0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    dir->rewind();
  }

  while (1) {
    n = dir->read(buf, FS_DIR_SIZE);
    402e:	bl	3c9c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4032:	cmp	r0, #0
    4034:	bne.n	3ff8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x74>
#if EXFAT_READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // EXFAT_READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    4036:	ldr	r3, [sp, #4]
    4038:	lsls	r1, r3, #22
    403a:	bpl.n	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    403c:	ldr	r3, [sp, #8]
    403e:	lsls	r2, r3, #30
    4040:	bpl.n	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    4042:	cmp	r5, #0
    4044:	beq.n	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    DBG_WARN_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    4046:	cmp	fp, r7
    4048:	bcs.w	41d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x254>
    404c:	mov	r3, r5
    404e:	mov	r6, fp
    4050:	mov	r5, sl
    4052:	mov	sl, r3
    4054:	b.n	406c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xe8>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != FS_DIR_SIZE) {
    4056:	cmp	r0, #32
    4058:	bne.n	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    405a:	cbnz	r6, 4064 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xe0>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    405c:	ldr	r2, [r4, #0]
    405e:	ldr	r5, [r4, #24]
    4060:	sub.w	r8, r2, #32
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    4064:	uxtb	r6, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    DBG_WARN_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    4066:	cmp	r7, r6
    4068:	bls.w	41d2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x24e>
    n = dir->read(buf, FS_DIR_SIZE);
    406c:	movs	r2, #32
    406e:	add	r1, sp, #24
    4070:	mov	r0, r4
    4072:	bl	3c9c <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    4076:	adds	r3, r6, #1
    DBG_WARN_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, FS_DIR_SIZE);
    if (n == 0) {
    4078:	cmp	r0, #0
    407a:	bne.n	4056 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xd2>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    407c:	mov	r0, r4
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, FS_DIR_SIZE);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    407e:	ldr.w	fp, [r4, #24]
      if (!dir->addDirCluster()) {
    4082:	bl	4cc0 <ExFatFile::addDirCluster()>
    4086:	cmp	r0, #0
    4088:	beq.n	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    408a:	str.w	fp, [r4, #24]
      continue;
    408e:	b.n	4066 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xe2>
        // Likely openNext call.
        DBG_WARN_MACRO;
        goto fail;
      }
      inSet = false;
    } else if (!inSet) {
    4090:	cbnz	r6, 40e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x164>
      if (freeCount < freeNeed) {
        freeCount = 0;
    4092:	cmp	fp, r7
    4094:	it	cc
    4096:	movcc.w	fp, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    409a:	cmp	r3, #133	; 0x85
    409c:	bne.n	3fec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x68>
        continue;
      }
      inSet = true;
      memset(this, 0, sizeof(ExFatFile));
    409e:	mov	r1, r6
    40a0:	movs	r2, #56	; 0x38
    40a2:	mov	r0, r9
        freeCount = 0;
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    40a4:	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    40a6:	bl	c86c <memset>
      dirFile = reinterpret_cast<DirFile_t*>(buf);
      m_setCount = dirFile->setCount;
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    40aa:	ldrb.w	r3, [sp, #28]
        continue;
      }
      inSet = true;
      memset(this, 0, sizeof(ExFatFile));
      dirFile = reinterpret_cast<DirFile_t*>(buf);
      m_setCount = dirFile->setCount;
    40ae:	ldrb.w	r2, [sp, #25]
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    40b2:	lsls	r1, r3, #27
        continue;
      }
      inSet = true;
      memset(this, 0, sizeof(ExFatFile));
      dirFile = reinterpret_cast<DirFile_t*>(buf);
      m_setCount = dirFile->setCount;
    40b4:	strb.w	r2, [r9, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    40b8:	and.w	r2, r3, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
        m_attributes |= FILE_ATTR_FILE;
    40bc:	it	pl
    40be:	orrpl.w	r2, r2, #8
    40c2:	strb.w	r2, [r9, #49]	; 0x31
      }
      m_vol = dir->volume();
      m_dirPos.cluster = dir->curCluster();
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    40c6:	ldr	r3, [r4, #0]
    40c8:	ldr	r2, [r4, #32]
    40ca:	ldr	r1, [r4, #24]
    40cc:	subs	r3, #32
      m_setCount = dirFile->setCount;
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
        m_attributes |= FILE_ATTR_FILE;
      }
      m_vol = dir->volume();
    40ce:	str.w	r2, [r9, #32]
      m_dirPos.cluster = dir->curCluster();
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    40d2:	str.w	r3, [r9, #40]	; 0x28
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
        m_attributes |= FILE_ATTR_FILE;
      }
      m_vol = dir->volume();
      m_dirPos.cluster = dir->curCluster();
    40d6:	str.w	r1, [r9, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
      m_dirPos.isContiguous = dir->isContiguous();
    40da:	ldrb.w	r3, [r4, #51]	; 0x33
    40de:	ubfx	r3, r3, #6, #1
    40e2:	strb.w	r3, [r9, #44]	; 0x2c
    40e6:	b.n	3fec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x68>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    40e8:	cmp	r3, #192	; 0xc0
    40ea:	beq.n	4140 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1bc>
      fname->reset();
      if (fname->nameLength != dirStream->nameLength ||
          fname->nameHash != getLe16(dirStream->nameHash)) {
        inSet = false;
      }
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    40ec:	cmp	r3, #193	; 0xc1
    40ee:	bne.n	4026 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa2>
      dirName = reinterpret_cast<DirName_t*>(buf);
      if (!cmpName(dirName, fname)) {
    40f0:	mov	r2, r5
    40f2:	add	r1, sp, #24
    40f4:	mov	r0, r9
    40f6:	bl	39cc <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    40fa:	cmp	r0, #0
    40fc:	beq.n	41ce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x24a>
    40fe:	ldrh	r3, [r5, #12]
    4100:	cmp	r3, #0
    4102:	bne.w	3fec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x68>
    4106:	ldr	r2, [r5, #8]
    4108:	ldr	r3, [r5, #4]
    410a:	cmp	r2, r3
    410c:	bne.w	3fec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x68>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    4110:	ldr	r3, [sp, #4]
    4112:	lsls	r7, r3, #20
    4114:	bmi.w	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    4118:	ldr	r3, [sp, #4]
    411a:	tst.w	r3, #17408	; 0x4400
    411e:	bne.w	4278 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    4122:	ldrb.w	r3, [r9, #51]	; 0x33
    4126:	lsls	r6, r3, #30
    4128:	bmi.w	4278 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
      goto fail;
    }
  }

#if !EXFAT_READ_ONLY
  if (oflag & O_TRUNC) {
    412c:	ldr	r3, [sp, #4]
    412e:	lsls	r3, r3, #21
    4130:	bmi.w	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    4134:	ldr	r3, [sp, #4]
    4136:	lsls	r0, r3, #17
    4138:	bmi.w	42b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x330>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // !EXFAT_READ_ONLY
  return true;
    413c:	movs	r0, #1
    413e:	b.n	3fac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28>
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
      m_dirPos.isContiguous = dir->isContiguous();
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4140:	ldrb.w	r3, [sp, #25]
      m_dirPos.cluster = dir->curCluster();
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
      m_dirPos.isContiguous = dir->isContiguous();
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
    4144:	ldrb.w	r2, [sp, #8]
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4148:	lsls	r3, r3, #30
      m_dirPos.cluster = dir->curCluster();
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
      m_dirPos.isContiguous = dir->isContiguous();
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
    414a:	strb.w	r2, [r9, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    414e:	bpl.n	4158 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d4>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    4150:	ldrb.w	r3, [sp, #12]
    4154:	strb.w	r3, [r9, #51]	; 0x33
      }
      m_validLength = getLe64(dirStream->validLength);
      m_firstCluster = getLe32(dirStream->firstCluster);
    4158:	ldr	r1, [sp, #44]	; 0x2c
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
        m_flags |= FILE_FLAG_CONTIGUOUS;
      }
      m_validLength = getLe64(dirStream->validLength);
    415a:	ldrd	r2, r3, [sp, #32]
      m_firstCluster = getLe32(dirStream->firstCluster);
    415e:	str.w	r1, [r9, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    4162:	ldrd	r0, r1, [sp, #48]	; 0x30
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
        m_flags |= FILE_FLAG_CONTIGUOUS;
      }
      m_validLength = getLe64(dirStream->validLength);
    4166:	strd	r2, r3, [r9, #16]
      m_firstCluster = getLe32(dirStream->firstCluster);
      m_dataLength = getLe64(dirStream->dataLength);
    416a:	strd	r0, r1, [r9, #8]
      if (!fname) {
    416e:	cmp	r5, #0
    4170:	beq.n	4110 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18c>
        goto found;
      }
      fname->reset();
      if (fname->nameLength != dirStream->nameLength ||
    4172:	ldrb.w	r3, [sp, #27]
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    4176:	mov.w	r0, #0
    417a:	ldr	r2, [r5, #16]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    417c:	ldr	r1, [r5, #0]
    417e:	cmp	r2, r3
    ls = 0;  // lowSurrogate
    4180:	strh	r0, [r5, #12]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    4182:	str	r1, [r5, #4]
    4184:	bne.w	4026 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa2>
    4188:	ldrh.w	r6, [sp, #28]
    418c:	ldrh	r3, [r5, #20]
    418e:	subs	r6, r6, r3
    4190:	clz	r6, r6
    4194:	lsrs	r6, r6, #5
    4196:	b.n	3fec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x68>
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;

  if (fname) {
    freeNeed = 2 + (fname->nameLength + 14)/15;
    4198:	ldr	r3, [r5, #16]
    419a:	ldr	r7, [pc, #408]	; (4334 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3b0>)
    419c:	adds	r3, #14
    419e:	umull	r3, r7, r7, r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    41a2:	ldrd	r2, r3, [r4]
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;

  if (fname) {
    freeNeed = 2 + (fname->nameLength + 14)/15;
    41a6:	lsrs	r7, r7, #3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    41a8:	orrs	r3, r2
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;

  if (fname) {
    freeNeed = 2 + (fname->nameLength + 14)/15;
    41aa:	add.w	r7, r7, #2
    41ae:	uxtb	r7, r7
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    41b0:	beq.w	3fe0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x5c>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    41b4:	movs	r1, #0
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    41b6:	movs	r2, #0
    41b8:	movs	r3, #0
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    41ba:	str	r1, [r4, #24]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    41bc:	strd	r2, r3, [r4]
    41c0:	b.n	3fe0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x5c>
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  switch (oflag & O_ACCMODE) {
    41c2:	movs	r2, #3
    41c4:	b.n	3fce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x4a>
      }
      if (freeCount < freeNeed) {
        freeCount++;
      }
      if (!buf[0]) {
        if (fname) {
    41c6:	cmp	r5, #0
    41c8:	bne.w	4036 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    41cc:	b.n	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
        inSet = false;
      }
    } else if (buf[0] == EXFAT_TYPE_NAME) {
      dirName = reinterpret_cast<DirName_t*>(buf);
      if (!cmpName(dirName, fname)) {
        inSet = false;
    41ce:	mov	r6, r0
    41d0:	b.n	3fec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x68>
    41d2:	mov	r3, sl
    41d4:	mov	sl, r5
    41d6:	mov	r5, r3
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
    41d8:	ldrb.w	fp, [r4, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    41dc:	movs	r2, #56	; 0x38
    41de:	movs	r1, #0
    41e0:	mov	r0, r9
    41e2:	bl	c86c <memset>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
    41e6:	ubfx	fp, fp, #6, #1
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    41ea:	movs	r3, #8
    41ec:	ldr	r2, [r4, #32]
    ls = 0;  // lowSurrogate
    41ee:	movs	r6, #0
  m_dirPos = freePos;
    41f0:	strb.w	fp, [r9, #44]	; 0x2c
    41f4:	str.w	sl, [r9, #36]	; 0x24
    41f8:	str.w	r8, [r9, #40]	; 0x28
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    41fc:	strb.w	r3, [r9, #49]	; 0x31
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    4200:	ldr	r3, [r5, #0]
    }
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    4202:	str.w	r2, [r9, #32]
    4206:	str	r3, [r5, #4]
    ls = 0;  // lowSurrogate
    4208:	strh	r6, [r5, #12]
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  fname->reset();
  for (uint8_t i = 0; i < freeNeed; i++) {
    420a:	cbz	r7, 4270 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
    }
    memset(cache, 0 , FS_DIR_SIZE);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    420c:	add.w	r8, r7, #4294967295
    4210:	mov	r4, r6
    4212:	uxtb.w	r8, r8
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  fname->reset();
  for (uint8_t i = 0; i < freeNeed; i++) {
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    4216:	movs	r2, #1
    4218:	mov	r1, r4
    421a:	mov	r0, r9
    421c:	bl	3b4c <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    4220:	mov	fp, r0
    4222:	cmp	r0, #0
    4224:	beq.w	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    4228:	ldrsb.w	r3, [r0]
    422c:	cmp	r3, #0
    422e:	blt.w	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , FS_DIR_SIZE);
    4232:	movs	r2, #32
    4234:	movs	r1, #0
    4236:	bl	c86c <memset>
    if (i == 0) {
    423a:	cmp	r6, #0
    423c:	beq.n	42c6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x342>
         setLe16(dirFile->createTime, FS_DEFAULT_TIME);
         setLe16(dirFile->modifyTime, FS_DEFAULT_TIME);
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
    423e:	cmp	r4, #1
    4240:	beq.n	4300 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37c>
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
      dirStream->nameLength = fname->nameLength;
      setLe16(dirStream->nameHash, fname->nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    4242:	movs	r3, #193	; 0xc1
    4244:	mov	r4, fp
    4246:	add.w	sl, fp, #30
    424a:	strb.w	r3, [fp]
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    424e:	ldrh	r3, [r5, #12]
      for (size_t k = 0; k < 15; k++) {
        if (fname->atEnd()) {
          break;
        }
        uint16_t u = fname->get16();
    4250:	mov	r0, r5
    4252:	cbnz	r3, 425c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2d8>
    4254:	ldr	r2, [r5, #4]
    4256:	ldr	r3, [r5, #8]
    4258:	cmp	r2, r3
    425a:	beq.n	4268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
    425c:	bl	3284 <FsName::get16()>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4260:	strh.w	r0, [r4, #2]!
      dirStream->nameLength = fname->nameLength;
      setLe16(dirStream->nameHash, fname->nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
      for (size_t k = 0; k < 15; k++) {
    4264:	cmp	sl, r4
    4266:	bne.n	424e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ca>
    4268:	adds	r6, #1
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  fname->reset();
  for (uint8_t i = 0; i < freeNeed; i++) {
    426a:	uxtb	r4, r6
    426c:	cmp	r4, r7
    426e:	bcc.n	4216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x292>
        uint16_t u = fname->get16();
        setLe16(dirName->unicode + 2*k, u);
      }
    }
  }
  return sync();
    4270:	mov	r0, r9
    4272:	bl	4c60 <ExFatFile::sync()>
    4276:	b.n	3fac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    4278:	ldrb.w	r3, [r9, #49]	; 0x31
    427c:	tst.w	r3, #17
    4280:	bne.w	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
      goto fail;
    }
  }

#if !EXFAT_READ_ONLY
  if (oflag & O_TRUNC) {
    4284:	ldr	r3, [sp, #4]
    4286:	lsls	r5, r3, #21
    4288:	bpl.w	4134 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b0>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    428c:	ldrb.w	r3, [r9, #51]	; 0x33
    4290:	lsls	r4, r3, #30
    4292:	bpl.w	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    4296:	movs	r2, #0
    4298:	movs	r3, #0
    429a:	mov	r0, r9
    429c:	bl	3e7c <ExFatFile::seekSet(unsigned long long)>
    42a0:	cmp	r0, #0
    42a2:	beq.w	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    42a6:	mov	r0, r9
    42a8:	bl	50e4 <ExFatFile::truncate()>
    42ac:	cmp	r0, #0
    42ae:	beq.w	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    42b2:	b.n	413c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b8>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    42b4:	mov	r0, r9
    42b6:	ldrd	r2, r3, [r9, #16]
    42ba:	bl	3e7c <ExFatFile::seekSet(unsigned long long)>
    42be:	cmp	r0, #0
    42c0:	bne.w	413c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b8>
    42c4:	b.n	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
      goto fail;
    }
    memset(cache, 0 , FS_DIR_SIZE);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    42c6:	movs	r3, #133	; 0x85
    42c8:	strb.w	r3, [fp]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;

      if (FsDateTime::callback) {
    42cc:	ldr	r3, [pc, #104]	; (4338 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3b4>)
    }
    memset(cache, 0 , FS_DIR_SIZE);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    42ce:	strb.w	r8, [r9, #48]	; 0x30
      dirFile->setCount = m_setCount;
    42d2:	strb.w	r8, [fp, #1]

      if (FsDateTime::callback) {
    42d6:	ldr	r3, [r3, #0]
    42d8:	cbz	r3, 4322 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x39e>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    42da:	add.w	r2, sp, #19
    42de:	add.w	r1, sp, #22
    42e2:	add	r0, sp, #20
    42e4:	blx	r3
    42e6:	ldrh.w	r1, [sp, #20]
    42ea:	ldrh.w	r2, [sp, #22]
        setLe16(dirFile->createDate, date);
        setLe16(dirFile->createTime, time);
        dirFile->createTimeMs = ms10;
    42ee:	ldrb.w	r3, [sp, #19]
    42f2:	strh.w	r1, [fp, #10]
    42f6:	strh.w	r2, [fp, #8]
    42fa:	strb.w	r3, [fp, #20]
    42fe:	b.n	4268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    4300:	ldr	r3, [sp, #8]
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    4302:	movs	r2, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    4304:	strb.w	r4, [fp, #1]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    4308:	orn	r3, r3, #127	; 0x7f
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    430c:	strb.w	r2, [fp]
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    4310:	strb.w	r3, [r9, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    4314:	ldr	r3, [r5, #16]
    4316:	strb.w	r3, [fp, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    431a:	ldrh	r3, [r5, #20]
    431c:	strh.w	r3, [fp, #4]
    4320:	b.n	4268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
    4322:	movw	r3, #22049	; 0x5621
    4326:	strh.w	r3, [fp, #10]
    432a:	strh.w	r3, [fp, #14]
    432e:	strh.w	r3, [fp, #18]
    4332:	b.n	4268 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
    4334:	.word	0x88888889
    4338:	.word	0x20017a1c

0000433c <ExFatFile::open(ExFatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    433c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4340:	mov	r6, r0
    4342:	sub	sp, #92	; 0x5c
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    4344:	movs	r0, #0
    4346:	mov	r5, r1
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4348:	ldrb.w	r1, [r6, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    434c:	str	r2, [sp, #4]
    434e:	strb.w	r0, [sp, #81]	; 0x51
    4352:	strb.w	r0, [sp, #82]	; 0x52
    4356:	strb.w	r0, [sp, #83]	; 0x53
 */
/**
 * \class FsName
 * \brief Handle UTF-8 file names.
 */
class FsName {
    435a:	strh.w	r0, [sp, #20]
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    435e:	cbnz	r1, 436c <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
    4360:	mov	r9, r3
    4362:	ldrb.w	r3, [r5, #49]	; 0x31
    4366:	tst.w	r3, #80	; 0x50
    436a:	bne.n	4374 <ExFatFile::open(ExFatFile*, char const*, int)+0x38>
    close();
  }
  return openPrivate(dirFile, &fname, oflag);

 fail:
  return false;
    436c:	movs	r0, #0
}
    436e:	add	sp, #92	; 0x5c
    4370:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    4374:	ldrb	r3, [r2, #0]
    4376:	mov	r4, r2
    4378:	cmp	r3, #47	; 0x2f
    437a:	beq.n	43e2 <ExFatFile::open(ExFatFile*, char const*, int)+0xa6>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    437c:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    4380:	mov	r1, r4
    4382:	add	r3, sp, #4
    4384:	add	r2, sp, #8
    4386:	mov	r0, r6
    4388:	bl	3c0c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    438c:	cmp	r0, #0
    438e:	beq.n	436c <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    4390:	ldr	r3, [sp, #4]
    4392:	ldrb	r3, [r3, #0]
    4394:	cmp	r3, #0
    4396:	beq.n	440c <ExFatFile::open(ExFatFile*, char const*, int)+0xd0>
      break;
    }
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    4398:	mov	r1, r5
    439a:	movs	r3, #0
    439c:	add	r2, sp, #8
    439e:	mov	r0, r6
    43a0:	bl	3f84 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    43a4:	cmp	r0, #0
    43a6:	beq.n	436c <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    43a8:	mov	r4, r6
    43aa:	add	r7, sp, #32
    43ac:	add.w	lr, r6, #48	; 0x30
    43b0:	ldr	r0, [r4, #0]
    43b2:	adds	r4, #16
    43b4:	ldr.w	r1, [r4, #-12]
    43b8:	mov	r5, r7
    43ba:	ldr.w	r2, [r4, #-8]
    43be:	adds	r7, #16
    43c0:	ldr.w	r3, [r4, #-4]
    43c4:	cmp	r4, lr
    43c6:	stmia	r5!, {r0, r1, r2, r3}
    43c8:	bne.n	43b0 <ExFatFile::open(ExFatFile*, char const*, int)+0x74>
    43ca:	ldr	r0, [r4, #0]
    dirFile = &tmpDir;
    43cc:	add	r5, sp, #32
    }
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    43ce:	str	r0, [r7, #0]
  }
  return m_vol->dirCache(&pos, options);
}
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    43d0:	mov	r0, r6
    43d2:	bl	4c60 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    43d6:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    43da:	strb.w	r8, [r6, #51]	; 0x33
    43de:	ldr	r4, [sp, #4]
    43e0:	b.n	4380 <ExFatFile::open(ExFatFile*, char const*, int)+0x44>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    43e2:	adds	r4, #1
    43e4:	str	r4, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    43e6:	ldrb	r1, [r4, #0]
    43e8:	cmp	r1, #47	; 0x2f
    43ea:	beq.n	43e2 <ExFatFile::open(ExFatFile*, char const*, int)+0xa6>
      path++;
    }
    if (*path == 0) {
    43ec:	cbz	r1, 441e <ExFatFile::open(ExFatFile*, char const*, int)+0xe2>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    43ee:	add	r0, sp, #32
    43f0:	movs	r2, #56	; 0x38
    43f2:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    43f4:	ldr	r7, [r5, #32]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    43f6:	mov	r5, r0
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    43f8:	bl	c86c <memset>
  m_attributes = FILE_ATTR_ROOT;
    43fc:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    43fe:	movs	r3, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    4400:	str	r7, [sp, #64]	; 0x40
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    4402:	strb.w	r2, [sp, #81]	; 0x51
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4406:	strb.w	r3, [sp, #83]	; 0x53
    440a:	b.n	437c <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return openPrivate(dirFile, &fname, oflag);
    440c:	mov	r3, r9
    440e:	add	r2, sp, #8
    4410:	mov	r1, r5
    4412:	mov	r0, r6
    4414:	bl	3f84 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>

 fail:
  return false;
}
    4418:	add	sp, #92	; 0x5c
    441a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    441e:	movs	r2, #56	; 0x38
    4420:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    4422:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4424:	bl	c86c <memset>
  m_attributes = FILE_ATTR_ROOT;
    4428:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    442a:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    442c:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    442e:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4432:	strb.w	r0, [r6, #51]	; 0x33
    4436:	b.n	436e <ExFatFile::open(ExFatFile*, char const*, int)+0x32>

00004438 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const char* path, oflag_t oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    4438:	cbz	r1, 4442 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    443a:	add.w	r1, r1, #1096	; 0x448
    443e:	b.w	433c <ExFatFile::open(ExFatFile*, char const*, int)>
}
    4442:	mov	r0, r1
    4444:	bx	lr
    4446:	nop

00004448 <ExFatFile::openNext(ExFatFile*, int)>:
    DBG_FAIL_MACRO;
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    4448:	push	{r4, r5, r6, r7}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    444a:	ldrb.w	r4, [r0, #49]	; 0x31
    444e:	cbnz	r4, 445a <ExFatFile::openNext(ExFatFile*, int)+0x12>
    4450:	ldrb.w	r3, [r1, #49]	; 0x31
    4454:	tst.w	r3, #80	; 0x50
    4458:	bne.n	4460 <ExFatFile::openNext(ExFatFile*, int)+0x18>
  }
  return openPrivate(dir, nullptr, oflag);

 fail:
  return false;
}
    445a:	movs	r0, #0
    445c:	pop	{r4, r5, r6, r7}
    445e:	bx	lr
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    4460:	ldrd	r6, r7, [r1]
    4464:	movs	r7, #0
    4466:	and.w	r6, r6, #31
    446a:	orrs.w	r3, r6, r7
    446e:	bne.n	445a <ExFatFile::openNext(ExFatFile*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openPrivate(dir, nullptr, oflag);
    4470:	mov	r3, r2
    4472:	mov	r2, r4

 fail:
  return false;
}
    4474:	pop	{r4, r5, r6, r7}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openPrivate(dir, nullptr, oflag);
    4476:	b.w	3f84 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    447a:	nop

0000447c <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  *value = next;
  return 1;
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    447c:	push	{r3, r4, r5, lr}
    447e:	mov	r4, r1
    4480:	ldr.w	r1, [r0, #1060]	; 0x424
    4484:	mov	r5, r2
    4486:	add.w	r0, r0, #528	; 0x210
    448a:	movs	r2, #1
    448c:	add.w	r1, r1, r4, lsr #7
    4490:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    4494:	mov	r3, r0
    4496:	cbz	r0, 44a4 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4498:	lsls	r4, r4, #2
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    449a:	movs	r0, #1
    449c:	ubfx	r4, r4, #0, #9
    44a0:	str	r5, [r3, r4]
    44a2:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    44a4:	pop	{r3, r4, r5, pc}
    44a6:	nop

000044a8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    44a8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44ac:	mov	r8, r0
    44ae:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    44b0:	mov	fp, r1
    44b2:	cmp	r1, #0
    44b4:	beq.n	453e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x96>
    44b6:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    44b8:	ldr.w	r3, [r8, #1072]	; 0x430
    44bc:	cmp	r7, r3
    44be:	bcs.n	4536 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8e>
    44c0:	and.w	r5, r7, #7
    44c4:	movs	r3, #1
    44c6:	ubfx	sl, r7, #3, #9
    44ca:	lsl.w	r5, r3, r5
    44ce:	uxtb	r5, r5
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    44d0:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    44d2:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCachePrepare(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.prepare(sector, option);
    44d4:	ldr.w	r1, [r8, #1068]	; 0x42c
    44d8:	movs	r2, #0
    44da:	mov	r0, r8
    44dc:	add.w	r1, r1, r4, lsr #12
    44e0:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    44e4:	cbz	r0, 4518 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    44e6:	ldrb.w	r1, [r0, sl]
    44ea:	b.n	4502 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    44ec:	cmp	r2, r9
    44ee:	beq.n	4544 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9c>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    44f0:	cmp	r7, r4
    44f2:	beq.n	4516 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    44f4:	ldr.w	r2, [r8, #1072]	; 0x430
    44f8:	cmp	r4, r2
    44fa:	bcs.n	452a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    44fc:	ands.w	r5, r3, #255	; 0xff
    4500:	beq.n	451c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    4502:	adds	r4, #1
        if (!(mask & cache[i])) {
    4504:	tst	r5, r1
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4506:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    450a:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    450e:	beq.n	44ec <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4510:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    4512:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4514:	bne.n	44f4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    4516:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    4518:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    451c:	add.w	sl, sl, #1
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    4520:	movs	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    4522:	cmp.w	sl, #512	; 0x200
    4526:	bne.n	44e6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    4528:	b.n	452e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x86>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    452a:	movs	r6, #0
    452c:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    452e:	mov.w	sl, #0
    4532:	movs	r5, #1
    4534:	b.n	44d4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    4536:	movs	r7, #0
    4538:	movs	r5, #1
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    453a:	mov	sl, r7
    453c:	b.n	44d0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    453e:	ldr.w	r7, [r0, #1056]	; 0x420
    4542:	b.n	44b8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    4544:	cmp.w	fp, #0
    4548:	bne.n	4554 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
    454a:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    454e:	it	eq
    4550:	streq.w	r6, [r8, #1056]	; 0x420
            }
            return bgnAlloc + 2;
    4554:	adds	r0, r6, #2
    4556:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    455a:	nop

0000455c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    455c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    4560:	subs	r1, #2
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4562:	mov	r5, r2
    4564:	mov	sl, r3
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4566:	ldr.w	r2, [r0, #1072]	; 0x430
    456a:	adds	r3, r1, r5
    456c:	cmp	r3, r2
    456e:	bhi.n	45e2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    4570:	mov	r8, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    4572:	cmp.w	sl, #0
    4576:	bne.n	45e8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    4578:	ldr.w	r3, [r0, #1056]	; 0x420
    457c:	cmp	r1, r3
      m_bitmapStart = start;
    457e:	it	cc
    4580:	strcc.w	r1, [r0, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    4584:	and.w	r4, r1, #7
    4588:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    458a:	ldr.w	r3, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    458e:	ubfx	r6, r1, #3, #9
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    4592:	lsl.w	r4, r2, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4596:	add.w	r9, r3, r1, lsr #12
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    459a:	uxtb	r4, r4
    459c:	movs	r2, #1
    459e:	mov	r1, r9
    45a0:	mov	r0, r8
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    45a2:	add	r9, r2
    45a4:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    45a8:	cbz	r0, 45e2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    45aa:	adds	r7, r0, r6
    45ac:	add.w	r0, r0, #512	; 0x200
    45b0:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    45b4:	tst	r2, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    45b6:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    45ba:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    45be:	ite	ne
    45c0:	movne	r6, #1
    45c2:	moveq	r6, #0
    45c4:	cmp	r6, sl
    45c6:	beq.n	45e2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    45c8:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    45ca:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    45ce:	beq.n	4600 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    45d0:	ands.w	r4, r4, #255	; 0xff
    45d4:	bne.n	45b4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    45d6:	cmp	r7, r0
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    45d8:	mov	r6, r4
    45da:	mov.w	r4, #1
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    45de:	bne.n	45b0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    45e0:	b.n	459c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    45e2:	movs	r0, #0
    45e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    45e8:	ldr.w	r0, [r0, #1056]	; 0x420
    45ec:	cmp	r3, r0
    45ee:	bls.n	4584 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    45f0:	cmp	r1, r0
    45f2:	bhi.n	4584 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    45f4:	cmp	r3, r2
    45f6:	it	cs
    45f8:	movcs	r3, #0
    45fa:	str.w	r3, [r8, #1056]	; 0x420
    45fe:	b.n	4584 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    4600:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    4602:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4606:	nop

00004608 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4608:	push	{r4, r5, r6, lr}
    460a:	mov	r6, r1
    460c:	mov	r4, r0
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    460e:	ldr.w	r5, [r0, #1080]	; 0x438
    4612:	add.w	r0, r0, #528	; 0x210
    4616:	ldr	r1, [r1, #4]
    4618:	ldr	r3, [r6, #0]
    461a:	ands	r1, r5
    461c:	ldr.w	r5, [r4, #1068]	; 0x42c
    4620:	subs	r3, #2
    4622:	ldrb.w	r4, [r4, #1093]	; 0x445
    4626:	add.w	r1, r5, r1, lsr #9
    462a:	lsls	r3, r4
    462c:	add	r1, r3
    462e:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    4632:	cbz	r0, 463c <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    4634:	ldr	r3, [r6, #4]
    4636:	ubfx	r3, r3, #0, #9
    463a:	add	r0, r3
}
    463c:	pop	{r4, r5, r6, pc}
    463e:	nop

00004640 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4640:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4642:	ldr.w	r3, [r0, #1072]	; 0x430
    4646:	adds	r3, #1
    4648:	cmp	r3, r1
    464a:	bcc.n	467a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
    464c:	mov	r4, r1
    464e:	ldr.w	r1, [r0, #1060]	; 0x424
    4652:	mov	r5, r2
    4654:	add.w	r0, r0, #528	; 0x210
    4658:	movs	r2, #0
    465a:	add.w	r1, r1, r4, lsr #7
    465e:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    4662:	cbz	r0, 467a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4664:	lsls	r1, r4, #2
    4666:	ubfx	r1, r1, #0, #9
    466a:	ldr	r3, [r0, r1]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
  if (next == EXFAT_EOC) {
    466c:	adds	r2, r3, #1
    466e:	beq.n	4676 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x36>
    return 0;
  }
  *value = next;
    4670:	str	r3, [r5, #0]
  return 1;
    4672:	movs	r0, #1
    4674:	pop	{r3, r4, r5, pc}
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
  if (next == EXFAT_EOC) {
    return 0;
    4676:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    4678:	pop	{r3, r4, r5, pc}
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
    467a:	mov.w	r0, #4294967295
    467e:	pop	{r3, r4, r5, pc}

00004680 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4680:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4682:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4684:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4686:	ldr.w	r3, [r0, #1080]	; 0x438
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    468a:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    468c:	adds	r1, r4, r2
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    468e:	ands	r3, r4
  pos->position += offset;
    4690:	str	r1, [r5, #4]
  tmp >>= bytesPerClusterShift();
    4692:	ldrb.w	r4, [r0, #1093]	; 0x445
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4696:	add	r2, r3
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4698:	adds	r4, #9
    469a:	uxtb	r4, r4
    469c:	lsr.w	r4, r2, r4
  while (tmp--) {
    46a0:	cbz	r4, 46b2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    46a2:	ldrb	r3, [r5, #8]
    46a4:	cbz	r3, 46b6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    46a6:	ldr	r3, [r5, #0]
    46a8:	adds	r3, #1
    46aa:	str	r3, [r5, #0]
    46ac:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    46ae:	cmp	r4, #0
    46b0:	bne.n	46a2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    46b2:	movs	r0, #1
}
    46b4:	pop	{r4, r5, r6, pc}
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    46b6:	mov	r2, r5
    46b8:	ldr	r1, [r5, #0]
    46ba:	mov	r0, r6
    46bc:	bl	4640 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    46c0:	cmp	r0, #1
    46c2:	beq.n	46ac <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    46c4:	pop	{r4, r5, r6, pc}
    46c6:	nop

000046c8 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    46c8:	cmp	r1, #1
    46ca:	bls.n	46e8 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    46cc:	ldr.w	r3, [r0, #1072]	; 0x430
    46d0:	adds	r3, #1
    46d2:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    46d4:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    46d6:	bls.n	46e0 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    46d8:	movs	r0, #0
    46da:	ldr.w	r4, [sp], #4
    46de:	bx	lr
    46e0:	ldr.w	r4, [sp], #4
    46e4:	b.w	447c <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.3]>
    46e8:	movs	r0, #0
    46ea:	bx	lr

000046ec <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    46ec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    46f0:	mov	r4, r1
    46f2:	sub	sp, #8
    46f4:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    46f6:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    46f8:	mov	r1, r4
    46fa:	add	r2, sp, #4
    46fc:	mov	r0, r5
    46fe:	bl	4640 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4702:	cmp	r4, #1
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    4704:	mov	r7, r0
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4706:	ubfx	r6, r0, #7, #1
    470a:	mov	r1, r4
    470c:	mov	r0, r5
    470e:	bls.n	475e <ExFatPartition::freeChain(unsigned long)+0x72>
    4710:	mov	r2, r6
    4712:	cbnz	r6, 475e <ExFatPartition::freeChain(unsigned long)+0x72>
    4714:	ldr.w	r3, [r5, #1072]	; 0x430
    4718:	adds	r3, #1
    471a:	cmp	r4, r3
    471c:	bhi.n	475e <ExFatPartition::freeChain(unsigned long)+0x72>
    471e:	bl	447c <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.3]>
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (status == 0 || (cluster + 1) != next) {
    4722:	add.w	lr, r4, #1
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4726:	mov	r1, r8
    4728:	mov	r3, r6
    472a:	rsb	r2, r8, lr
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    472e:	cbz	r0, 475e <ExFatPartition::freeChain(unsigned long)+0x72>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (status == 0 || (cluster + 1) != next) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4730:	mov	r0, r5
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (status == 0 || (cluster + 1) != next) {
    4732:	cbz	r7, 4746 <ExFatPartition::freeChain(unsigned long)+0x5a>
    4734:	ldr	r4, [sp, #4]
    4736:	cmp	lr, r4
    4738:	beq.n	46f8 <ExFatPartition::freeChain(unsigned long)+0xc>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    473a:	bl	455c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    473e:	cbz	r0, 475e <ExFatPartition::freeChain(unsigned long)+0x72>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4740:	ldr	r4, [sp, #4]
    4742:	mov	r8, r4
    4744:	b.n	46f8 <ExFatPartition::freeChain(unsigned long)+0xc>
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (status == 0 || (cluster + 1) != next) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4746:	adds	r2, r4, #1
    4748:	mov	r3, r7
    474a:	mov	r1, r8
    474c:	mov	r0, r5
    474e:	rsb	r2, r8, r2
    4752:	bl	455c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4756:	cbz	r0, 475e <ExFatPartition::freeChain(unsigned long)+0x72>

  return true;

 fail:
  return false;
}
    4758:	add	sp, #8
    475a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } while (status);

  return true;

 fail:
  return false;
    475e:	movs	r0, #0
}
    4760:	add	sp, #8
    4762:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4766:	nop

00004768 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    4768:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    476c:	movs	r4, #0

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    476e:	mov	r8, r0
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    4770:	ldr.w	r6, [r0, #1068]	; 0x42c
    4774:	add.w	r7, r0, #528	; 0x210
 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
    4778:	mov	r5, r4
    477a:	mov	r1, r6
    477c:	movs	r2, #0
    477e:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    4780:	adds	r6, #1
    4782:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    4786:	cbz	r0, 47d4 <ExFatPartition::freeClusterCount()+0x6c>
    4788:	add.w	lr, r0, #4294967295
    478c:	ldr.w	ip, [r8, #1072]	; 0x430
    4790:	add.w	r9, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    4794:	ldrb.w	r0, [lr, #1]!
    4798:	cmp	r0, #255	; 0xff
    479a:	beq.n	47c4 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    479c:	cbz	r0, 47b2 <ExFatPartition::freeClusterCount()+0x4a>
    479e:	movs	r2, #8
    47a0:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    47a2:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    47a4:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    47a8:	it	ne
    47aa:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    47ac:	subs	r2, #1
    47ae:	uxtb	r3, r1
    47b0:	bne.n	47a2 <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    47b2:	adds	r5, #8
      if (nc >= m_clusterCount) {
    47b4:	cmp	ip, r5
    47b6:	bls.n	47cc <ExFatPartition::freeClusterCount()+0x64>
  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    47b8:	cmp	r5, r9
    47ba:	beq.n	477a <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    47bc:	ldrb.w	r0, [lr, #1]!
    47c0:	cmp	r0, #255	; 0xff
    47c2:	bne.n	479c <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    47c4:	adds	r5, #8
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    47c6:	adds	r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    47c8:	cmp	ip, r5
    47ca:	bhi.n	47b8 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    47cc:	rsb	r0, r4, ip
    47d0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    47d4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000047d8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    47d8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    47dc:	movs	r3, #0
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    47de:	mov	r4, r0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    47e0:	mov.w	r6, #4294967295
    47e4:	add.w	r7, r0, #528	; 0x210
    47e8:	mov	r5, r2
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    47ea:	str.w	r1, [r0, #1088]	; 0x440
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(FsBlockDevice* blockDev) {
    m_blockDev = blockDev;
    47ee:	str	r1, [r0, #4]
    47f0:	mov	r2, r3
    47f2:	str.w	r1, [r4, #532]	; 0x214
    47f6:	mov	r0, r7
    47f8:	mov	r1, r3
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    47fa:	strb.w	r3, [r4, #1092]	; 0x444
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    47fe:	strb	r3, [r4, #0]
    4800:	strb.w	r3, [r4, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    4804:	str	r6, [r4, #12]
    4806:	str.w	r6, [r4, #540]	; 0x21c
    480a:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    480e:	cmp	r5, #4
    4810:	bhi.n	482e <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x56>
    4812:	mov	r6, r0
    4814:	cbz	r0, 482e <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    4816:	cbnz	r5, 4834 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x5c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    4818:	movs	r2, #5
    481a:	ldr	r1, [pc, #164]	; (48c0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe8>)
    481c:	adds	r0, r6, #3
    481e:	bl	ce9c <strncmp>
    4822:	mov	r3, r0
    4824:	cbnz	r0, 482e <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    4826:	ldrb.w	r2, [r6, #108]	; 0x6c
    482a:	cmp	r2, #9
    482c:	beq.n	4864 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x8c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    482e:	movs	r0, #0
    4830:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    4834:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    4836:	add.w	r3, r0, r3, lsl #4
    483a:	ldrb.w	r2, [r3, #446]	; 0x1be
    483e:	ands.w	r2, r2, #127	; 0x7f
    4842:	bne.n	482e <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x56>
    4844:	ldrb.w	r3, [r3, #450]	; 0x1c2
    4848:	cmp	r3, #0
    484a:	beq.n	482e <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x56>
    484c:	add.w	r5, r0, r5, lsl #4
    4850:	mov	r0, r7
    4852:	ldr.w	r5, [r5, #438]	; 0x1b6
    4856:	mov	r1, r5
    4858:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCachePrepare(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    485c:	mov	r6, r0
    485e:	cmp	r0, #0
    4860:	bne.n	4818 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x40>
    4862:	b.n	482e <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x56>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4864:	ldr	r2, [r6, #80]	; 0x50
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4866:	mov.w	r8, #1
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    486a:	mov	r1, r0
    486c:	mov	r0, r4
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    486e:	add.w	lr, r2, r5
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    4872:	mov	r2, r8
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4874:	str.w	lr, [r4, #1060]	; 0x424
  m_fatLength = getLe32(bpb->fatLength);
    4878:	ldr	r7, [r6, #84]	; 0x54
    487a:	str.w	r7, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    487e:	ldr	r7, [r6, #88]	; 0x58
    4880:	add	r5, r7
    4882:	str.w	r5, [r4, #1068]	; 0x42c
    4886:	ldr	r5, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    4888:	str.w	r5, [r4, #1072]	; 0x430
    488c:	ldr	r5, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    488e:	str.w	r5, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4892:	ldrb.w	r5, [r6, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    4896:	str.w	r3, [r4, #1056]	; 0x420
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    489a:	add.w	r3, r5, #9
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    489e:	strb.w	r5, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    48a2:	lsl.w	r3, r8, r3
  m_clusterMask = m_bytesPerCluster - 1;
    48a6:	subs	r5, r3, #1
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    48a8:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    48ac:	str.w	r5, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    48b0:	bl	44a8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    48b4:	movs	r3, #64	; 0x40
  return true;
    48b6:	mov	r0, r8
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
    48b8:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    48bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    48c0:	.word	0x200010e0

000048c4 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    48c4:	push	{r4, r5, r6, lr}
    48c6:	sub	sp, #8
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    48c8:	ldr.w	r1, [r0, #1076]	; 0x434

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    48cc:	mov	r5, r0
 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
    48ce:	movs	r4, #0
    48d0:	add	r6, sp, #8
    48d2:	str.w	r1, [r6, #-4]!
    48d6:	b.n	48dc <ExFatPartition::rootLength()+0x18>
  int8_t status;
  do {
    48d8:	beq.n	48ee <ExFatPartition::rootLength()+0x2a>
    48da:	ldr	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    48dc:	mov	r2, r6
    48de:	mov	r0, r5
    48e0:	bl	4640 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    48e4:	cmp	r0, #0
    n++;
    48e6:	add.w	r4, r4, #1
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    48ea:	bge.n	48d8 <ExFatPartition::rootLength()+0x14>
    48ec:	movs	r4, #0
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
  uint32_t nc = chainSize(m_rootDirectoryCluster);
  return nc << bytesPerClusterShift();
    48ee:	ldrb.w	r0, [r5, #1093]	; 0x445
    48f2:	adds	r0, #9
    48f4:	uxtb	r0, r0
}
    48f6:	lsl.w	r0, r4, r0
    48fa:	add	sp, #8
    48fc:	pop	{r4, r5, r6, pc}
    48fe:	nop

00004900 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    4900:	push	{r4, r5, r6, r7, lr}
    4902:	movs	r5, #0
    4904:	sub	sp, #60	; 0x3c
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    4906:	add.w	r4, r0, #1096	; 0x448
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    490a:	mov	r2, r1
    490c:	mov	r3, r5
    490e:	mov	r0, sp
    4910:	mov	r1, r4
    4912:	strb.w	r5, [sp, #49]	; 0x31
    4916:	strb.w	r5, [sp, #50]	; 0x32
    491a:	strb.w	r5, [sp, #51]	; 0x33
    491e:	bl	433c <ExFatFile::open(ExFatFile*, char const*, int)>
    4922:	mov	r6, r0
    4924:	cbz	r0, 4956 <ExFatVolume::chdir(char const*)+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    4926:	ldrb.w	r3, [sp, #49]	; 0x31
    492a:	ands.w	r3, r3, #80	; 0x50
    492e:	beq.n	495c <ExFatVolume::chdir(char const*)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    4930:	mov	r5, sp
    4932:	add.w	lr, sp, #48	; 0x30
    4936:	mov	r7, r5
    4938:	adds	r4, #16
    493a:	adds	r5, #16
    493c:	ldmia	r7!, {r0, r1, r2, r3}
    493e:	cmp	r7, lr
    4940:	str.w	r0, [r4, #-16]
    4944:	str.w	r1, [r4, #-12]
    4948:	str.w	r2, [r4, #-8]
    494c:	str.w	r3, [r4, #-4]
    4950:	bne.n	4936 <ExFatVolume::chdir(char const*)+0x36>
    4952:	ldr	r0, [r5, #0]
    4954:	str	r0, [r4, #0]
  return true;

 fail:
  return false;
}
    4956:	mov	r0, r6
    4958:	add	sp, #60	; 0x3c
    495a:	pop	{r4, r5, r6, r7, pc}
  }
  m_vwd = dir;
  return true;

 fail:
  return false;
    495c:	mov	r6, r3
}
    495e:	mov	r0, r6
    4960:	add	sp, #60	; 0x3c
    4962:	pop	{r4, r5, r6, r7, pc}

00004964 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4964:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    4966:	push	{r3, r4, r5, r6, r7, lr}
    4968:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    496a:	ldr	r0, [r0, #32]
    496c:	cbz	r1, 4970 <ExFatFile::addCluster()+0xc>
    496e:	adds	r1, #1
    4970:	movs	r2, #1
    4972:	bl	44a8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    4976:	cmp	r0, #1
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4978:	mov	r6, r0
  if (find < 2) {
    497a:	bls.n	49da <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    497c:	movs	r3, #1
    497e:	mov	r1, r0
    4980:	ldr	r0, [r4, #32]
    4982:	mov	r2, r3
    4984:	bl	455c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4988:	mov	r7, r0
    498a:	cbz	r0, 49da <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    498c:	ldr	r3, [r4, #24]
    498e:	cbz	r3, 49e0 <ExFatFile::addCluster()+0x7c>
    4990:	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4994:	lsls	r1, r2, #25
    4996:	bpl.n	49be <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    4998:	adds	r1, r3, #1
    499a:	cmp	r6, r1
    499c:	beq.n	49ec <ExFatFile::addCluster()+0x88>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    499e:	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    49a2:	ldr	r1, [r4, #28]
  if (isContiguous()) {
    if (find == (m_curCluster + 1)) {
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    49a4:	strb.w	r2, [r4, #51]	; 0x33
    49a8:	b.n	49b6 <ExFatFile::addCluster()+0x52>

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
    49aa:	ldr	r0, [r4, #32]
    49ac:	bl	46c8 <ExFatPartition::fatPut(unsigned long, unsigned long)>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    49b0:	mov	r1, r5
      if (!m_vol->fatPut(c, c + 1)) {
    49b2:	cbz	r0, 49da <ExFatFile::addCluster()+0x76>
    49b4:	ldr	r3, [r4, #24]
    49b6:	adds	r5, r1, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    49b8:	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    49ba:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    49bc:	bcc.n	49aa <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    49be:	mov.w	r2, #4294967295
    49c2:	mov	r1, r6
    49c4:	ldr	r0, [r4, #32]
    49c6:	bl	46c8 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    49ca:	cbz	r0, 49da <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    49cc:	ldr	r1, [r4, #24]
    49ce:	cbz	r1, 49ec <ExFatFile::addCluster()+0x88>
    if (!m_vol->fatPut(m_curCluster, find)) {
    49d0:	mov	r2, r6
    49d2:	ldr	r0, [r4, #32]
    49d4:	bl	46c8 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    49d8:	cbnz	r0, 49ec <ExFatFile::addCluster()+0x88>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    49da:	movs	r7, #0
}
    49dc:	mov	r0, r7
    49de:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    49e0:	ldrb.w	r3, [r4, #51]	; 0x33
    49e4:	orr.w	r3, r3, #64	; 0x40
    49e8:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    49ec:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    49ee:	mov	r0, r7
    49f0:	pop	{r3, r4, r5, r6, r7, pc}
    49f2:	nop

000049f4 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    49f4:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  if (!isWritable()) {
    49f8:	lsls	r2, r3, #30
    49fa:	bpl.n	4a74 <ExFatFile::remove()+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    49fc:	ldr	r1, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    49fe:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a02:	mov	r5, r0
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    4a04:	cbnz	r1, 4a32 <ExFatFile::remove()+0x3e>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4a06:	movs	r4, #0
    4a08:	b.n	4a1c <ExFatFile::remove()+0x28>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    4a0a:	ldrb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t is = 0; is <= m_setCount; is++) {
    4a0c:	uxtb	r4, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    4a0e:	and.w	r3, r3, #127	; 0x7f
    4a12:	strb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t is = 0; is <= m_setCount; is++) {
    4a14:	ldrb.w	r3, [r5, #48]	; 0x30
    4a18:	cmp	r3, r4
    4a1a:	bcc.n	4a78 <ExFatFile::remove()+0x84>
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    4a1c:	mov	r1, r4
    4a1e:	movs	r2, #1
    4a20:	mov	r0, r5
        goto fail;
      }
    }
  }

  for (uint8_t is = 0; is <= m_setCount; is++) {
    4a22:	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    4a24:	bl	3b4c <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    4a28:	cmp	r0, #0
    4a2a:	bne.n	4a0a <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    4a2c:	movs	r0, #0
    4a2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    4a32:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4a34:	ldr	r0, [r0, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    4a36:	bpl.n	4aa8 <ExFatFile::remove()+0xb4>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    4a38:	ldrb.w	r2, [r0, #1093]	; 0x445
    4a3c:	movs	r3, #0
    4a3e:	ldrd	r6, r7, [r5, #8]
    4a42:	adds	r2, #9
    4a44:	adds.w	r6, r6, #4294967295
    4a48:	uxtb	r2, r2
    4a4a:	adc.w	r7, r7, #4294967295
    4a4e:	rsb	lr, r2, #32
    4a52:	sub.w	r4, r2, #32
    4a56:	lsr.w	r2, r6, r2
    4a5a:	lsl.w	lr, r7, lr
    4a5e:	lsr.w	r4, r7, r4
    4a62:	orr.w	r2, r2, lr
    4a66:	orrs	r2, r4
    4a68:	adds	r2, #1
    4a6a:	bl	455c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4a6e:	cmp	r0, #0
    4a70:	bne.n	4a06 <ExFatFile::remove()+0x12>
    4a72:	b.n	4a2c <ExFatFile::remove()+0x38>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    4a74:	movs	r0, #0
    4a76:	bx	lr
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    4a78:	movs	r3, #0
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    4a7a:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    4a7c:	strb.w	r3, [r5, #49]	; 0x31
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4a80:	mov	r0, r4
  m_flags = 0;
    4a82:	strb.w	r3, [r5, #51]	; 0x33
    4a86:	bl	31c0 <FsCache::sync()>
    4a8a:	cmp	r0, #0
    4a8c:	beq.n	4a2c <ExFatFile::remove()+0x38>
    4a8e:	add.w	r0, r4, #528	; 0x210
    4a92:	bl	31c0 <FsCache::sync()>
    4a96:	cmp	r0, #0
    4a98:	beq.n	4a2c <ExFatFile::remove()+0x38>
    4a9a:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4a9e:	ldr	r3, [r0, #0]
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    4aa0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4aa4:	ldr	r3, [r3, #32]
    4aa6:	bx	r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    4aa8:	bl	46ec <ExFatPartition::freeChain(unsigned long)>
    4aac:	cmp	r0, #0
    4aae:	bne.n	4a06 <ExFatFile::remove()+0x12>
    4ab0:	b.n	4a2c <ExFatFile::remove()+0x38>
    4ab2:	nop

00004ab4 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    4ab4:	ldrb.w	r3, [r0, #49]	; 0x31
    4ab8:	lsls	r1, r3, #27
    4aba:	bmi.n	4ac0 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    4abc:	movs	r0, #0
}
    4abe:	bx	lr

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    4ac0:	push	{r4, lr}
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    4ac2:	movs	r2, #0
    4ac4:	sub	sp, #32
    4ac6:	movs	r3, #0
    4ac8:	mov	r4, r0
    4aca:	bl	3e7c <ExFatFile::seekSet(unsigned long long)>
    4ace:	b.n	4ade <ExFatFile::rmdir()+0x2a>
  while (1) {
    n = read(dir, FS_DIR_SIZE);
    if (n == 0) {
      break;
    }
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    4ad0:	cmp	r0, #32
    4ad2:	bne.n	4b08 <ExFatFile::rmdir()+0x54>
    4ad4:	ldrb.w	r3, [sp]
    4ad8:	lsls	r2, r3, #24
    4ada:	bmi.n	4b08 <ExFatFile::rmdir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    4adc:	cbz	r3, 4aec <ExFatFile::rmdir()+0x38>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, FS_DIR_SIZE);
    4ade:	movs	r2, #32
    4ae0:	mov	r1, sp
    4ae2:	mov	r0, r4
    4ae4:	bl	3c9c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4ae8:	cmp	r0, #0
    4aea:	bne.n	4ad0 <ExFatFile::rmdir()+0x1c>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    4aec:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    4af0:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    4af2:	mov	r0, r4
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    4af4:	orr.w	r3, r3, #2
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    4af8:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    4afc:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    4b00:	bl	49f4 <ExFatFile::remove()>

 fail:
  return false;
}
    4b04:	add	sp, #32
    4b06:	pop	{r4, pc}
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    4b08:	movs	r0, #0
}
    4b0a:	add	sp, #32
    4b0c:	pop	{r4, pc}
    4b0e:	nop

00004b10 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4b10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    4b14:	movs	r5, #0
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4b16:	sub	sp, #12
    4b18:	mov	r7, r0
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    4b1a:	ldr.w	r9, [pc, #320]	; 4c5c <ExFatFile::syncDir()+0x14c>
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    4b1e:	mov	r8, r5

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    4b20:	movs	r2, #0
    4b22:	mov	r1, r5
    4b24:	mov	r0, r7
    4b26:	bl	3b4c <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    4b2a:	mov	r4, r0
    4b2c:	cbz	r0, 4b3c <ExFatFile::syncDir()+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    4b2e:	ldrb	r3, [r0, #0]
    4b30:	cmp	r3, #192	; 0xc0
    4b32:	beq.n	4c1e <ExFatFile::syncDir()+0x10e>
    4b34:	cmp	r3, #193	; 0xc1
    4b36:	beq.n	4b92 <ExFatFile::syncDir()+0x82>
    4b38:	cmp	r3, #133	; 0x85
    4b3a:	beq.n	4b50 <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4b3c:	ldrb.w	r3, [r7, #50]	; 0x32
  return false;
    4b40:	movs	r0, #0
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4b42:	orr.w	r3, r3, #1
    4b46:	strb.w	r3, [r7, #50]	; 0x32
  return false;
}
    4b4a:	add	sp, #12
    4b4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4b50:	ldrb.w	r3, [r7, #49]	; 0x31
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    4b54:	ldr.w	r6, [r9]
    4b58:	and.w	r3, r3, #55	; 0x37
    4b5c:	strh	r3, [r0, #4]
    4b5e:	cbz	r6, 4b82 <ExFatFile::syncDir()+0x72>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    4b60:	add.w	r2, sp, #3
    4b64:	add.w	r1, sp, #6
    4b68:	add	r0, sp, #4
    4b6a:	blx	r6
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    4b6c:	ldrh.w	r2, [sp, #6]
          setLe16(df->modifyDate, date);
    4b70:	ldrh.w	r3, [sp, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    4b74:	ldrb.w	r1, [sp, #3]
    4b78:	strh	r2, [r4, #12]
    4b7a:	strb	r1, [r4, #21]
    4b7c:	strh	r2, [r4, #16]
    4b7e:	strh	r3, [r4, #14]
    4b80:	strh	r3, [r4, #18]
          setLe16(df->modifyTime, time);
          setLe16(df->modifyDate, date);
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        m_vol->dataCacheDirty();
    4b82:	ldr	r2, [r7, #32]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    4b84:	ldrb.w	r3, [r2, #528]	; 0x210
    4b88:	orr.w	r3, r3, #1
    4b8c:	strb.w	r3, [r2, #528]	; 0x210
    4b90:	ldrb	r3, [r4, #0]
    4b92:	mov.w	r0, r8, lsl #15
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4b96:	sub.w	r6, r3, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4b9a:	movs	r2, #0
    4b9c:	movs	r1, #1
    4b9e:	orr.w	r8, r0, r8, lsr #1
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4ba2:	clz	r6, r6
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4ba6:	uxtah	r3, r3, r8
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4baa:	lsrs	r6, r6, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4bac:	uxth.w	r8, r3
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4bb0:	add	r2, r1
    4bb2:	mov.w	r3, r8, lsl #15
    4bb6:	movs	r1, #3
    4bb8:	cmp	r2, #31
    4bba:	orr.w	r3, r3, r8, lsr #1
    4bbe:	bhi.n	4bd6 <ExFatFile::syncDir()+0xc6>
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4bc0:	ldrb	r0, [r4, r2]
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4bc2:	cmp	r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4bc4:	uxtah	r3, r0, r3
    4bc8:	uxth.w	r8, r3
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4bcc:	bne.n	4bd2 <ExFatFile::syncDir()+0xc2>
    4bce:	cmp	r6, #0
    4bd0:	bne.n	4bb0 <ExFatFile::syncDir()+0xa0>
    4bd2:	movs	r1, #1
    4bd4:	b.n	4bb0 <ExFatFile::syncDir()+0xa0>
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    4bd6:	adds	r5, #1
    4bd8:	ldrb.w	r3, [r7, #48]	; 0x30
    4bdc:	uxtb	r5, r5
    4bde:	cmp	r3, r5
    4be0:	bcs.n	4b20 <ExFatFile::syncDir()+0x10>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4be2:	movs	r2, #1
    4be4:	add.w	r1, r7, #36	; 0x24
    4be8:	ldr	r0, [r7, #32]
    4bea:	bl	4608 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4bee:	cmp	r0, #0
    4bf0:	beq.n	4b3c <ExFatFile::syncDir()+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    4bf2:	ldr	r4, [r7, #32]
    4bf4:	strh.w	r8, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4bf8:	mov	r0, r4
    4bfa:	bl	31c0 <FsCache::sync()>
    4bfe:	cmp	r0, #0
    4c00:	beq.n	4b3c <ExFatFile::syncDir()+0x2c>
    4c02:	add.w	r0, r4, #528	; 0x210
    4c06:	bl	31c0 <FsCache::sync()>
    4c0a:	cmp	r0, #0
    4c0c:	beq.n	4b3c <ExFatFile::syncDir()+0x2c>
    4c0e:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4c12:	ldr	r3, [r0, #0]
    4c14:	ldr	r3, [r3, #32]
    4c16:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4c18:	cmp	r0, #0
    4c1a:	beq.n	4b3c <ExFatFile::syncDir()+0x2c>
    4c1c:	b.n	4b4a <ExFatFile::syncDir()+0x3a>
        m_vol->dataCacheDirty();
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    4c1e:	ldrb.w	r3, [r7, #51]	; 0x33
    4c22:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    4c26:	ldrb	r3, [r0, #1]
    4c28:	ite	ne
    4c2a:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    4c2e:	biceq.w	r3, r3, #2
    4c32:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    4c34:	ldr	r0, [r7, #32]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    4c36:	ldr	r1, [r7, #28]
        if (isContiguous()) {
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
    4c38:	ldrd	r2, r3, [r7, #16]
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4c3c:	str	r1, [r4, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    4c3e:	strd	r2, r3, [r4, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    4c42:	ldrd	r2, r3, [r7, #8]
    4c46:	strd	r2, r3, [r4, #24]
    4c4a:	ldrb.w	r3, [r0, #528]	; 0x210
    4c4e:	orr.w	r3, r3, #1
    4c52:	strb.w	r3, [r0, #528]	; 0x210
    4c56:	ldrb	r3, [r4, #0]
    4c58:	b.n	4b92 <ExFatFile::syncDir()+0x82>
    4c5a:	nop
    4c5c:	.word	0x20017a1c

00004c60 <ExFatFile::sync()>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4c60:	ldrb.w	r2, [r0, #49]	; 0x31
    4c64:	cbz	r2, 4c8c <ExFatFile::sync()+0x2c>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
    4c66:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4c68:	ldrb.w	r2, [r0, #51]	; 0x33
    4c6c:	lsls	r1, r2, #24
    4c6e:	bmi.n	4c90 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    4c70:	ldr	r5, [r0, #32]
    4c72:	mov	r4, r0
    4c74:	mov	r0, r5
    4c76:	bl	31c0 <FsCache::sync()>
    4c7a:	cbnz	r0, 4ca0 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4c7c:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    4c80:	movs	r0, #0
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4c82:	orr.w	r3, r3, #1
    4c86:	strb.w	r3, [r4, #50]	; 0x32
  return false;
}
    4c8a:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    4c8c:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    4c8e:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4c90:	and.w	r2, r2, #127	; 0x7f
    4c94:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    4c98:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    4c9c:	b.w	4b10 <ExFatFile::syncDir()>
    4ca0:	add.w	r0, r5, #528	; 0x210
    4ca4:	bl	31c0 <FsCache::sync()>
    4ca8:	cmp	r0, #0
    4caa:	beq.n	4c7c <ExFatFile::sync()+0x1c>
    4cac:	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4cb0:	ldr	r3, [r0, #0]
    4cb2:	ldr	r3, [r3, #32]
    4cb4:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4cb6:	cmp	r0, #0
    4cb8:	beq.n	4c7c <ExFatFile::sync()+0x1c>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    4cba:	movs	r0, #1
    4cbc:	pop	{r3, r4, r5, pc}
    4cbe:	nop

00004cc0 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4cc0:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4cc2:	ldrb.w	r3, [r0, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4cc6:	mov	r5, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4cc8:	lsls	r2, r3, #25
    4cca:	bmi.n	4d6c <ExFatFile::addDirCluster()+0xac>
    4ccc:	ldr	r0, [r0, #8]
    4cce:	ldr	r3, [r5, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    4cd0:	ldr.w	r3, [r3, #1084]	; 0x43c
    4cd4:	add	r0, r3
    4cd6:	cmp.w	r0, #67108864	; 0x4000000
    4cda:	bcc.n	4ce0 <ExFatFile::addDirCluster()+0x20>
  }
  return sync();

 fail:
  return false;
}
    4cdc:	movs	r0, #0
    4cde:	pop	{r3, r4, r5, r6, r7, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    4ce0:	mov	r0, r5
    4ce2:	bl	4964 <ExFatFile::addCluster()>
    4ce6:	cmp	r0, #0
    4ce8:	beq.n	4cdc <ExFatFile::addDirCluster()+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    4cea:	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    4cec:	movs	r2, #1
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    4cee:	ldr	r6, [r5, #24]
    4cf0:	ldrb.w	r3, [r0, #1093]	; 0x445
    4cf4:	subs	r6, #2
    4cf6:	ldr.w	r1, [r0, #1068]	; 0x42c
    4cfa:	lsls	r6, r3
    4cfc:	lsls.w	r3, r2, r3
    4d00:	add	r6, r1
    4d02:	beq.n	4d30 <ExFatFile::addDirCluster()+0x70>
    4d04:	movs	r4, #0
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    4d06:	adds	r1, r6, r4
    4d08:	movs	r2, #5
    4d0a:	add.w	r0, r0, #528	; 0x210
    4d0e:	adds	r4, #1
    4d10:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
                                    FsCache::CACHE_RESERVE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0, m_vol->bytesPerSector());
    4d14:	mov.w	r2, #512	; 0x200
    4d18:	movs	r1, #0
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    cache = m_vol->dataCachePrepare(sector + i,
                                    FsCache::CACHE_RESERVE_FOR_WRITE);
    if (!cache) {
    4d1a:	cmp	r0, #0
    4d1c:	beq.n	4cdc <ExFatFile::addDirCluster()+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0, m_vol->bytesPerSector());
    4d1e:	bl	c86c <memset>
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    4d22:	ldr	r0, [r5, #32]
    4d24:	movs	r3, #1
    4d26:	ldrb.w	r2, [r0, #1093]	; 0x445
    4d2a:	lsls	r3, r2
    4d2c:	cmp	r3, r4
    4d2e:	bhi.n	4d06 <ExFatFile::addDirCluster()+0x46>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0, m_vol->bytesPerSector());
  }
  if (!isRoot()) {
    4d30:	ldrb.w	r3, [r5, #49]	; 0x31
    4d34:	lsls	r3, r3, #25
    4d36:	bmi.n	4d62 <ExFatFile::addDirCluster()+0xa2>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4d38:	ldrb.w	r3, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    4d3c:	movs	r7, #0
      goto fail;
    }
    memset(cache, 0, m_vol->bytesPerSector());
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4d3e:	orn	r3, r3, #127	; 0x7f
    4d42:	strb.w	r3, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    4d46:	ldr.w	r6, [r0, #1084]	; 0x43c
    4d4a:	ldrd	r2, r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    4d4e:	ldrd	r0, r1, [r5, #16]
    }
    memset(cache, 0, m_vol->bytesPerSector());
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    4d52:	adds	r2, r2, r6
    4d54:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    4d56:	adds	r0, r0, r6
    4d58:	adcs	r1, r7
    }
    memset(cache, 0, m_vol->bytesPerSector());
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    4d5a:	strd	r2, r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    4d5e:	strd	r0, r1, [r5, #16]
  }
  return sync();
    4d62:	mov	r0, r5

 fail:
  return false;
}
    4d64:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    4d68:	b.w	4c60 <ExFatFile::sync()>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4d6c:	ldr	r0, [r0, #32]
    4d6e:	bl	48c4 <ExFatPartition::rootLength()>
    4d72:	b.n	4cce <ExFatFile::addDirCluster()+0xe>

00004d74 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    4d74:	push	{r4, lr}
  if (!parent->isDir()) {
    4d76:	ldrb.w	r4, [r1, #49]	; 0x31
    4d7a:	tst.w	r4, #80	; 0x50
    4d7e:	bne.n	4d84 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x10>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    4d80:	movs	r0, #0
    4d82:	pop	{r4, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    4d84:	movw	r3, #2562	; 0xa02
    4d88:	mov	r4, r0
    4d8a:	bl	3f84 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4d8e:	cmp	r0, #0
    4d90:	beq.n	4d80 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_attributes = FILE_ATTR_SUBDIR;
    4d92:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    4d94:	mov	r0, r4
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_attributes = FILE_ATTR_SUBDIR;
    4d96:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    4d9a:	bl	4cc0 <ExFatFile::addDirCluster()>
    4d9e:	cmp	r0, #0
    4da0:	beq.n	4d80 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    4da2:	ldr	r1, [r4, #24]
    4da4:	movs	r3, #0
    4da6:	mov	r0, r4
    4da8:	movs	r2, #0
    4daa:	str	r1, [r4, #28]
    4dac:	bl	3e7c <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4db0:	movs	r3, #193	; 0xc1
  return sync();
    4db2:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4db4:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

 fail:
  return false;
}
    4db8:	ldmia.w	sp!, {r4, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    4dbc:	b.w	4c60 <ExFatFile::sync()>

00004dc0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    4dc0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4dc4:	mov	r6, r0
    4dc6:	sub	sp, #88	; 0x58
    4dc8:	movs	r0, #0
    4dca:	mov	r4, r1
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    4dcc:	ldrb.w	r1, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    4dd0:	str	r2, [sp, #4]
    4dd2:	strh.w	r0, [sp, #20]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    4dd6:	strb.w	r0, [sp, #81]	; 0x51
    4dda:	strb.w	r0, [sp, #82]	; 0x52
    4dde:	strb.w	r0, [sp, #83]	; 0x53
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    4de2:	cbnz	r1, 4df0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x30>
    4de4:	mov	r8, r3
    4de6:	ldrb.w	r3, [r4, #49]	; 0x31
    4dea:	tst.w	r3, #80	; 0x50
    4dee:	bne.n	4df8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x38>
    close();
  }
  return mkdir(parent, &fname);

 fail:
  return false;
    4df0:	movs	r0, #0
}
    4df2:	add	sp, #88	; 0x58
    4df4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    4df8:	ldrb	r3, [r2, #0]
    4dfa:	mov	r1, r2
    4dfc:	cmp	r3, #47	; 0x2f
    4dfe:	beq.n	4e6a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    4e00:	add	r3, sp, #4
    4e02:	add	r2, sp, #8
    4e04:	mov	r0, r6
    4e06:	bl	3c0c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4e0a:	cmp	r0, #0
    4e0c:	beq.n	4df0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x30>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    4e0e:	ldr	r3, [sp, #4]
    4e10:	ldrb	r3, [r3, #0]
    4e12:	cmp	r3, #0
    4e14:	beq.n	4e86 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc6>
      break;
    }
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    4e16:	movs	r3, #0
    4e18:	add	r2, sp, #8
    4e1a:	mov	r1, r4
    4e1c:	mov	r0, r6
    4e1e:	bl	3f84 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4e22:	cbnz	r0, 4e38 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x78>
      if (!pFlag || !mkdir(parent, &fname)) {
    4e24:	cmp.w	r8, #0
    4e28:	beq.n	4df0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x30>
    4e2a:	mov	r1, r4
    4e2c:	add	r2, sp, #8
    4e2e:	mov	r0, r6
    4e30:	bl	4d74 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    4e34:	cmp	r0, #0
    4e36:	beq.n	4df0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    4e38:	mov	r4, r6
    4e3a:	add	r7, sp, #32
    4e3c:	add.w	lr, r6, #48	; 0x30
    4e40:	ldr	r0, [r4, #0]
    4e42:	adds	r4, #16
    4e44:	ldr.w	r1, [r4, #-12]
    4e48:	mov	r5, r7
    4e4a:	ldr.w	r2, [r4, #-8]
    4e4e:	adds	r7, #16
    4e50:	ldr.w	r3, [r4, #-4]
    4e54:	cmp	r4, lr
    4e56:	stmia	r5!, {r0, r1, r2, r3}
    4e58:	bne.n	4e40 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x80>
    4e5a:	ldr	r0, [r4, #0]
    parent = &tmpDir;
    4e5c:	add	r4, sp, #32
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    4e5e:	str	r0, [r7, #0]
    parent = &tmpDir;
    close();
    4e60:	mov	r0, r6
    4e62:	bl	3b88 <ExFatFile::close()>
    4e66:	ldr	r1, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    4e68:	b.n	4e00 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    4e6a:	adds	r1, #1
    4e6c:	str	r1, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    4e6e:	ldrb	r3, [r1, #0]
    4e70:	cmp	r3, #47	; 0x2f
    4e72:	beq.n	4e6a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    4e74:	ldr	r1, [r4, #32]
    4e76:	add	r0, sp, #32
    4e78:	bl	3be4 <ExFatFile::openRoot(ExFatVolume*)>
    4e7c:	cmp	r0, #0
    4e7e:	beq.n	4df0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x30>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    4e80:	add	r4, sp, #32
    4e82:	ldr	r1, [sp, #4]
    4e84:	b.n	4e00 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x40>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    4e86:	add	r2, sp, #8
    4e88:	mov	r1, r4
    4e8a:	mov	r0, r6
    4e8c:	bl	4d74 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

 fail:
  return false;
}
    4e90:	add	sp, #88	; 0x58
    4e92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e96:	nop

00004e98 <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    4e98:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    4e9a:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    4e9e:	sub	sp, #116	; 0x74
    4ea0:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    4ea2:	tst.w	r4, #24
    4ea6:	strb.w	r3, [sp, #49]	; 0x31
    4eaa:	strb.w	r3, [sp, #50]	; 0x32
    4eae:	strb.w	r3, [sp, #51]	; 0x33
    4eb2:	strb.w	r3, [sp, #105]	; 0x69
    4eb6:	strb.w	r3, [sp, #106]	; 0x6a
    4eba:	strb.w	r3, [sp, #107]	; 0x6b
    4ebe:	beq.n	4ec8 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    4ec0:	ldr	r3, [r1, #32]
    4ec2:	ldr	r4, [r0, #32]
    4ec4:	cmp	r4, r3
    4ec6:	beq.n	4ece <ExFatFile::rename(ExFatFile*, char const*)+0x36>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

 fail:
  return false;
    4ec8:	movs	r0, #0
}
    4eca:	add	sp, #116	; 0x74
    4ecc:	pop	{r4, r5, r6, r7, pc}
    4ece:	mov	r4, r0
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    4ed0:	movw	r3, #2561	; 0xa01
    4ed4:	mov	r0, sp
    4ed6:	bl	433c <ExFatFile::open(ExFatFile*, char const*, int)>
    4eda:	cmp	r0, #0
    4edc:	beq.n	4ec8 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    4ede:	mov	r5, r4
    4ee0:	add.w	lr, r4, #48	; 0x30
    4ee4:	add	r7, sp, #56	; 0x38
    4ee6:	ldr	r0, [r5, #0]
    4ee8:	adds	r5, #16
    4eea:	ldr.w	r1, [r5, #-12]
    4eee:	mov	r6, r7
    4ef0:	ldr.w	r2, [r5, #-8]
    4ef4:	adds	r7, #16
    4ef6:	ldr.w	r3, [r5, #-4]
    4efa:	cmp	r5, lr
    4efc:	stmia	r6!, {r0, r1, r2, r3}
    4efe:	bne.n	4ee6 <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    4f00:	ldr	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    4f02:	add	r2, sp, #36	; 0x24
    4f04:	add.w	r3, r4, #36	; 0x24
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    4f08:	str	r0, [r7, #0]
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    4f0a:	ldrb.w	r5, [sp, #48]	; 0x30
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
    4f0e:	ldmia	r2, {r0, r1, r2}
    4f10:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4f14:	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4f18:	mov	r0, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    4f1a:	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4f1e:	orn	r3, r3, #127	; 0x7f
    4f22:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4f26:	bl	4c60 <ExFatFile::sync()>
    4f2a:	cmp	r0, #0
    4f2c:	beq.n	4ec8 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    4f2e:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    4f30:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    4f32:	movs	r3, #8
  return oldFile.remove();
    4f34:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    4f36:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    4f38:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    4f3c:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    4f40:	bl	49f4 <ExFatFile::remove()>
    4f44:	b.n	4eca <ExFatFile::rename(ExFatFile*, char const*)+0x32>
    4f46:	nop

00004f48 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    4f48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    4f4c:	ldrb.w	r4, [r0, #49]	; 0x31
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    4f50:	sub	sp, #12
    4f52:	mov	r7, r3
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    4f54:	lsls	r4, r4, #28
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    4f56:	ldrb.w	sl, [sp, #48]	; 0x30
    4f5a:	ldrb.w	r9, [sp, #52]	; 0x34
    4f5e:	ldrb.w	fp, [sp, #56]	; 0x38
    4f62:	ldrb.w	r3, [sp, #60]	; 0x3c
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    4f66:	bpl.n	4f72 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
  uint16_t time;
  uint8_t ms10;

  if (!isFile()
      || year < 1980
      || year > 2107
    4f68:	subw	r2, r2, #1980	; 0x7bc
    4f6c:	uxth	r4, r2
    4f6e:	cmp	r4, #127	; 0x7f
    4f70:	bls.n	4f7c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x34>
    goto fail;
  }
  return true;

 fail:
  return false;
    4f72:	movs	r6, #0
}
    4f74:	mov	r0, r6
    4f76:	add	sp, #12
    4f78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (!isFile()
      || year < 1980
      || year > 2107
      || month < 1
      || month > 12
    4f7c:	subs	r2, r7, #1
    4f7e:	cmp	r2, #11
    4f80:	bhi.n	4f72 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
      || day < 1
      || day > 31
    4f82:	add.w	r2, sl, #4294967295
    4f86:	cmp	r2, #30
    4f88:	bhi.n	4f72 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
    4f8a:	cmp.w	fp, #59	; 0x3b
    4f8e:	it	ls
    4f90:	cmpls.w	r9, #23
    4f94:	ite	hi
    4f96:	movhi	r6, #1
    4f98:	movls	r6, #0
    4f9a:	cmp	r3, #59	; 0x3b
    4f9c:	it	hi
    4f9e:	orrhi.w	r6, r6, #1
      || hour > 23
      || minute > 59
      || second > 59) {
    4fa2:	cmp	r6, #0
    4fa4:	bne.n	4f72 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
    4fa6:	str	r3, [sp, #4]
    4fa8:	mov	r5, r0
    4faa:	mov	r8, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    4fac:	bl	4c60 <ExFatFile::sync()>
    4fb0:	ldr	r3, [sp, #4]
    4fb2:	cmp	r0, #0
    4fb4:	beq.n	4f72 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    4fb6:	asrs	r1, r3, #1
    goto fail;
  }

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;
    4fb8:	tst.w	r3, #1
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    4fbc:	orr.w	r7, sl, r7, lsl #5
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        m_vol->dataCacheDirty();
        if (flags & T_ACCESS) {
    4fc0:	and.w	r3, r8, #1
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    4fc4:	orr.w	r1, r1, fp, lsl #5

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;

  for (uint8_t is = 0; is <= m_setCount; is++) {
    4fc8:	mov	sl, r6
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    4fca:	orr.w	r7, r7, r4, lsl #9
    goto fail;
  }

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;
    4fce:	it	eq
    4fd0:	moveq.w	fp, #0
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    4fd4:	orr.w	r9, r1, r9, lsl #11
    4fd8:	it	ne
    4fda:	movne.w	fp, #100	; 0x64
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
  DirFile_t* df;
  uint8_t* cache;
  uint16_t checksum = 0;
    4fde:	mov	r4, r6
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    4fe0:	uxth	r7, r7
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    4fe2:	uxth.w	r9, r9
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        m_vol->dataCacheDirty();
        if (flags & T_ACCESS) {
    4fe6:	str	r3, [sp, #4]
  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;

  for (uint8_t is = 0; is <= m_setCount; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    4fe8:	movs	r2, #0
    4fea:	mov	r1, sl
    4fec:	mov	r0, r5
    4fee:	bl	3b4c <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    4ff2:	cmp	r0, #0
    4ff4:	beq.n	4f72 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    4ff6:	ldrb	r2, [r0, #0]
    4ff8:	cmp	r2, #133	; 0x85
    4ffa:	beq.n	509c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x154>
    4ffc:	bcc.n	4f74 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2c>
    4ffe:	sub.w	r1, r2, #192	; 0xc0
    5002:	cmp	r1, #1
    5004:	bhi.n	4f74 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2c>
    5006:	mov.w	lr, r4, lsl #15
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    500a:	sub.w	r3, r2, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    500e:	movs	r1, #0
    5010:	orr.w	r4, lr, r4, lsr #1
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5014:	clz	r3, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5018:	mov.w	lr, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    501c:	uxtah	r4, r2, r4
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5020:	lsrs	r3, r3, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5022:	uxth	r4, r4
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5024:	add	r1, lr
    5026:	lsls	r2, r4, #15
    5028:	mov.w	lr, #3
    502c:	cmp	r1, #31
    502e:	orr.w	r2, r2, r4, lsr #1
    5032:	bhi.n	504a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x102>
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5034:	ldrb	r4, [r0, r1]
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5036:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5038:	uxtah	r2, r4, r2
    503c:	uxth	r4, r2
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    503e:	bne.n	5044 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xfc>
    5040:	cmp	r3, #0
    5042:	bne.n	5024 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xdc>
    5044:	mov.w	lr, #1
    5048:	b.n	5024 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xdc>

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;

  for (uint8_t is = 0; is <= m_setCount; is++) {
    504a:	add.w	r3, sl, #1
    504e:	ldrb.w	r2, [r5, #48]	; 0x30
    5052:	uxtb.w	sl, r3
    5056:	cmp	r2, sl
    5058:	bcs.n	4fe8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa0>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    505a:	movs	r2, #1
    505c:	add.w	r1, r5, #36	; 0x24
    5060:	ldr	r0, [r5, #32]
    5062:	bl	4608 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5066:	cmp	r0, #0
    5068:	beq.n	4f72 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    506a:	ldr	r5, [r5, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    506c:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    506e:	mov	r0, r5
    5070:	bl	31c0 <FsCache::sync()>
    5074:	cmp	r0, #0
    5076:	beq.w	4f72 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
    507a:	add.w	r0, r5, #528	; 0x210
    507e:	bl	31c0 <FsCache::sync()>
    5082:	cmp	r0, #0
    5084:	beq.w	4f72 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
    5088:	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    508c:	ldr	r3, [r0, #0]
    508e:	ldr	r3, [r3, #32]
    5090:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5092:	mov	r6, r0
    5094:	cmp	r0, #0
    5096:	beq.w	4f72 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
    509a:	b.n	4f74 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2c>
    509c:	ldrb.w	r2, [r5, #49]	; 0x31
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        m_vol->dataCacheDirty();
    50a0:	ldr	r1, [r5, #32]
    50a2:	and.w	r2, r2, #55	; 0x37
        if (flags & T_ACCESS) {
    50a6:	ldr	r3, [sp, #4]
    50a8:	strh	r2, [r0, #4]
    50aa:	ldrb.w	r2, [r1, #528]	; 0x210
    50ae:	orr.w	r2, r2, #1
    50b2:	strb.w	r2, [r1, #528]	; 0x210
    50b6:	cbz	r3, 50be <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x176>
    50b8:	strh.w	r9, [r0, #16]
    50bc:	strh	r7, [r0, #18]
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        if (flags & T_CREATE) {
    50be:	tst.w	r8, #2
    50c2:	beq.n	50ce <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x186>
          df->createTimeMs = ms10;
    50c4:	strb.w	fp, [r0, #20]
    50c8:	strh.w	r9, [r0, #8]
    50cc:	strh	r7, [r0, #10]
          setLe16(df->createTime, time);
          setLe16(df->createDate, date);
        }
        if (flags & T_WRITE) {
    50ce:	tst.w	r8, #4
    50d2:	beq.n	50de <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x196>
          df->modifyTimeMs = ms10;
    50d4:	strb.w	fp, [r0, #21]
    50d8:	strh.w	r9, [r0, #12]
    50dc:	strh	r7, [r0, #14]
    50de:	ldrb	r2, [r0, #0]
    50e0:	b.n	5006 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xbe>
    50e2:	nop

000050e4 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    50e4:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    50e8:	lsls	r2, r3, #30
    50ea:	bpl.n	511e <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    50ec:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    50ee:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    50f0:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    50f2:	cbz	r5, 5118 <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    50f4:	and.w	r3, r3, #64	; 0x40
    50f8:	mov	r4, r0
    50fa:	and.w	r6, r3, #255	; 0xff
    50fe:	cbnz	r3, 5122 <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    5100:	ldr	r1, [r0, #24]
    5102:	cmp	r1, #0
    5104:	bne.n	518c <ExFatFile::truncate()+0xa8>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    5106:	str	r5, [sp, #4]
      m_firstCluster = 0;
    5108:	str	r1, [r0, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    510a:	mov	r1, r5
    510c:	ldr	r0, [r4, #32]
    510e:	bl	46ec <ExFatPartition::freeChain(unsigned long)>
    5112:	cbnz	r0, 5164 <ExFatFile::truncate()+0x80>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    5114:	movs	r0, #0
    5116:	b.n	511a <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5118:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    511a:	add	sp, #12
    511c:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    511e:	movs	r0, #0
}
    5120:	bx	lr
    5122:	ldr	r0, [r0, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    5124:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5126:	ldrb.w	r2, [r0, #1093]	; 0x445
    512a:	ldrd	r6, r7, [r4, #8]
    512e:	adds	r2, #9
    5130:	adds.w	r6, r6, #4294967295
    5134:	uxtb	r2, r2
    5136:	adc.w	r7, r7, #4294967295
    513a:	rsb	lr, r2, #32
    513e:	sub.w	r3, r2, #32
    5142:	lsr.w	r2, r6, r2
    5146:	lsl.w	lr, r7, lr
    514a:	lsr.w	r3, r7, r3
    514e:	orr.w	r2, r2, lr
    5152:	orrs	r2, r3
    5154:	adds	r2, #1
    if (m_curCluster) {
    5156:	cbz	r1, 5186 <ExFatFile::truncate()+0xa2>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    5158:	subs	r5, #1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    515a:	adds	r3, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    515c:	subs	r1, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    515e:	str	r3, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    5160:	add	r2, r1
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5162:	cbnz	r2, 51a6 <ExFatFile::truncate()+0xc2>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5164:	ldrb.w	r3, [r4, #51]	; 0x33
  return sync();
    5168:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    516a:	ldrd	r6, r7, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    516e:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    5172:	strd	r6, r7, [r4, #8]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5176:	strb.w	r3, [r4, #51]	; 0x33
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
    517a:	strd	r6, r7, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();
    517e:	bl	4c60 <ExFatFile::sync()>

 fail:
  return false;
}
    5182:	add	sp, #12
    5184:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    5186:	str	r5, [sp, #4]
      m_firstCluster = 0;
    5188:	str	r1, [r4, #28]
    518a:	b.n	5162 <ExFatFile::truncate()+0x7e>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    518c:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    518e:	ldr	r0, [r0, #32]
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    5190:	str.w	r6, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5194:	bl	4640 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    5198:	cmp	r0, #0
    519a:	blt.n	5114 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    519c:	bne.n	51b4 <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    519e:	ldr	r5, [sp, #4]
    51a0:	cmp	r5, #0
    51a2:	beq.n	5164 <ExFatFile::truncate()+0x80>
    51a4:	b.n	510a <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    51a6:	movs	r3, #0
    51a8:	ldr	r1, [sp, #4]
    51aa:	bl	455c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    51ae:	cmp	r0, #0
    51b0:	bne.n	5164 <ExFatFile::truncate()+0x80>
    51b2:	b.n	5114 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    51b4:	mov.w	r2, #4294967295
    51b8:	ldr	r1, [r4, #24]
    51ba:	ldr	r0, [r4, #32]
    51bc:	bl	46c8 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    51c0:	cmp	r0, #0
    51c2:	bne.n	519e <ExFatFile::truncate()+0xba>
    51c4:	b.n	5114 <ExFatFile::truncate()+0x30>
    51c6:	nop

000051c8 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    51c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51cc:	ldrb.w	r3, [r0, #51]	; 0x33
    51d0:	sub	sp, #12
    51d2:	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    51d4:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    51d6:	str	r2, [sp, #0]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    51d8:	bpl.w	5342 <ExFatFile::write(void const*, unsigned int)+0x17a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    51dc:	lsls	r2, r3, #28
    51de:	mov	r8, r1
    51e0:	bmi.w	5334 <ExFatFile::write(void const*, unsigned int)+0x16c>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    51e4:	ldr	r3, [sp, #0]
    51e6:	cmp	r3, #0
    51e8:	beq.w	5426 <ExFatFile::write(void const*, unsigned int)+0x25e>
    51ec:	mov	r1, r4
    51ee:	ldr	r5, [sp, #0]
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    51f0:	mov.w	sl, #1
    51f4:	ldrd	r2, r3, [r1], #24
    51f8:	mov	fp, r2
    51fa:	str	r1, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    51fc:	ldr	r0, [r4, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    51fe:	ldr	r1, [r4, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5200:	ldr.w	r6, [r0, #1080]	; 0x438
    5204:	and.w	r6, r6, fp
    sectorOffset = clusterOffset & m_vol->sectorMask();
    5208:	ubfx	r9, r6, #0, #9
    if (clusterOffset == 0) {
    520c:	cbnz	r6, 5264 <ExFatFile::write(void const*, unsigned int)+0x9c>
      // start of new cluster
      if (m_curCluster != 0) {
    520e:	cmp	r1, #0
    5210:	beq.w	53ac <ExFatFile::write(void const*, unsigned int)+0x1e4>
        int fg;

        if (isContiguous()) {
    5214:	ldrb.w	r3, [r4, #51]	; 0x33
    5218:	lsls	r3, r3, #25
    521a:	bpl.w	53de <ExFatFile::write(void const*, unsigned int)+0x216>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    521e:	ldrb.w	r2, [r0, #1093]	; 0x445
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    5222:	ldr	r3, [r4, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    5224:	adds	r2, #9
    5226:	ldrd	fp, ip, [r4, #8]
    522a:	uxtb	r2, r2
    522c:	adds.w	fp, fp, #4294967295
    5230:	rsb	lr, r2, #32
    5234:	sub.w	r7, r2, #32
    5238:	adc.w	ip, ip, #4294967295
    523c:	lsr.w	r2, fp, r2
    5240:	lsl.w	lr, ip, lr
    5244:	lsr.w	r7, ip, r7
    5248:	orr.w	r2, r2, lr
    524c:	orrs	r2, r7
    524e:	add	r2, r3
    5250:	cmp	r1, r2
    5252:	bcc.w	53d8 <ExFatFile::write(void const*, unsigned int)+0x210>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    5256:	mov	r0, r4
    5258:	bl	4964 <ExFatFile::addCluster()>
    525c:	cmp	r0, #0
    525e:	beq.n	5342 <ExFatFile::write(void const*, unsigned int)+0x17a>
    5260:	ldr	r0, [r4, #32]
    5262:	ldr	r1, [r4, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5264:	lsrs	r6, r6, #9
    5266:	subs	r1, #2
    5268:	ldr.w	r7, [r0, #1068]	; 0x42c
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    526c:	ldrb.w	lr, [r0, #1093]	; 0x445
    5270:	add	r7, r6
    5272:	lsl.w	r1, r1, lr
    5276:	add	r1, r7

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    5278:	cmp.w	r9, #0
    527c:	bne.n	5356 <ExFatFile::write(void const*, unsigned int)+0x18e>
    527e:	cmp.w	r5, #512	; 0x200
    5282:	ite	cs
    5284:	movcs	r2, #0
    5286:	movcc	r2, #1
    5288:	cmp	r2, #0
    528a:	bne.n	5356 <ExFatFile::write(void const*, unsigned int)+0x18e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    528c:	cmp.w	r5, #1024	; 0x400
    5290:	bcc.w	53b4 <ExFatFile::write(void const*, unsigned int)+0x1ec>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    5294:	lsl.w	lr, sl, lr
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    5298:	lsrs	r3, r5, #9
    529a:	ldr.w	ip, [r0, #540]	; 0x21c
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    529e:	rsb	r6, r6, lr
    52a2:	cmp	r3, r6
    52a4:	it	cs
    52a6:	movcs	r3, r6
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    52a8:	cmp	r1, ip
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    52aa:	mov.w	r7, r3, lsl #9
    52ae:	bhi.n	52c2 <ExFatFile::write(void const*, unsigned int)+0xfa>
    52b0:	adds	r6, r3, r1
    52b2:	cmp	ip, r6
    52b4:	bcs.n	52c2 <ExFatFile::write(void const*, unsigned int)+0xfa>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    52b6:	mov.w	r6, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    52ba:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    52be:	str.w	r6, [r0, #540]	; 0x21c
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    52c2:	ldr.w	r0, [r0, #532]	; 0x214
    52c6:	mov	r2, r8
    52c8:	ldr	r6, [r0, #0]
    52ca:	ldr	r6, [r6, #40]	; 0x28
    52cc:	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    52ce:	cmp	r0, #0
    52d0:	beq.n	5342 <ExFatFile::write(void const*, unsigned int)+0x17a>
    52d2:	mov	r0, r7
    52d4:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    52d6:	add	r8, r7
    toWrite -= n;
    52d8:	subs	r5, r5, r7
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    52da:	ldrd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    52de:	ldrd	r6, r7, [r4, #16]
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    52e2:	adds.w	fp, r2, r0
    52e6:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    52ea:	cmp	r7, ip
    52ec:	it	eq
    52ee:	cmpeq	r6, fp
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    52f0:	strd	fp, ip, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    52f4:	bcs.n	5306 <ExFatFile::write(void const*, unsigned int)+0x13e>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    52f6:	ldrb.w	r1, [r4, #51]	; 0x33
    52fa:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    52fe:	strd	fp, ip, [r4, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5302:	strb.w	r1, [r4, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    5306:	cmp	r5, #0
    5308:	bne.w	51fc <ExFatFile::write(void const*, unsigned int)+0x34>
    530c:	mov	r2, fp
    530e:	mov	r3, ip
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    5310:	ldrd	r0, r1, [r4, #8]
    5314:	cmp	r1, r3
    5316:	it	eq
    5318:	cmpeq	r0, r2
    531a:	bcc.n	540e <ExFatFile::write(void const*, unsigned int)+0x246>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    531c:	ldr	r3, [pc, #268]	; (542c <ExFatFile::write(void const*, unsigned int)+0x264>)
    531e:	ldr	r3, [r3, #0]
    5320:	cmp	r3, #0
    5322:	beq.n	5422 <ExFatFile::write(void const*, unsigned int)+0x25a>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5324:	ldrb.w	r3, [r4, #51]	; 0x33
    5328:	ldr	r0, [sp, #0]
    532a:	orn	r3, r3, #127	; 0x7f
    532e:	strb.w	r3, [r4, #51]	; 0x33
    5332:	b.n	5350 <ExFatFile::write(void const*, unsigned int)+0x188>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    5334:	ldrd	r2, r3, [r0, #16]
    5338:	bl	3e7c <ExFatFile::seekSet(unsigned long long)>
    533c:	cmp	r0, #0
    533e:	bne.w	51e4 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5342:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    5346:	movs	r0, #0
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5348:	orr.w	r3, r3, #1
    534c:	strb.w	r3, [r4, #50]	; 0x32
  return 0;
}
    5350:	add	sp, #12
    5352:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    5356:	cmp.w	r9, #0
    535a:	bne.n	53a8 <ExFatFile::write(void const*, unsigned int)+0x1e0>
    535c:	ldrd	r2, r3, [r4, #16]
    5360:	ldrd	r6, r7, [r4]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5364:	cmp	r7, r3
    5366:	it	eq
    5368:	cmpeq	r6, r2
    536a:	ite	cc
    536c:	movcc	r2, #1
    536e:	movcs	r2, #5
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    5370:	add.w	r0, r0, #528	; 0x210
    5374:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCachePrepare(sector, cacheOption);
      if (!cache) {
    5378:	cmp	r0, #0
    537a:	beq.n	5342 <ExFatFile::write(void const*, unsigned int)+0x17a>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    537c:	rsb	r7, r9, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5380:	add	r0, r9
    5382:	mov	r1, r8
    5384:	cmp	r7, r5
    5386:	it	cs
    5388:	movcs	r7, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    538a:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    538c:	mov	r2, r7
    538e:	bl	9920 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5392:	cmp.w	r9, #512	; 0x200
    5396:	bne.n	52d2 <ExFatFile::write(void const*, unsigned int)+0x10a>
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    5398:	ldr	r0, [r4, #32]
    539a:	add.w	r0, r0, #528	; 0x210
    539e:	bl	31c0 <FsCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    53a2:	cmp	r0, #0
    53a4:	bne.n	52d2 <ExFatFile::write(void const*, unsigned int)+0x10a>
    53a6:	b.n	5342 <ExFatFile::write(void const*, unsigned int)+0x17a>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    53a8:	movs	r2, #1
    53aa:	b.n	5370 <ExFatFile::write(void const*, unsigned int)+0x1a8>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    53ac:	ldr	r1, [r4, #28]
    53ae:	cbz	r1, 53ee <ExFatFile::write(void const*, unsigned int)+0x226>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    53b0:	str	r1, [r4, #24]
    53b2:	b.n	5264 <ExFatFile::write(void const*, unsigned int)+0x9c>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    53b4:	ldr.w	r3, [r0, #540]	; 0x21c
    53b8:	cmp	r1, r3
    53ba:	beq.n	5400 <ExFatFile::write(void const*, unsigned int)+0x238>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    53bc:	ldr.w	r0, [r0, #532]	; 0x214
    53c0:	mov	r2, r8
    53c2:	ldr	r3, [r0, #0]
    53c4:	ldr	r3, [r3, #36]	; 0x24
    53c6:	blx	r3
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    53c8:	cmp	r0, #0
    53ca:	beq.n	5342 <ExFatFile::write(void const*, unsigned int)+0x17a>
    53cc:	mov.w	r0, #512	; 0x200
    53d0:	movs	r1, #0
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    53d2:	mov.w	r7, #512	; 0x200
    53d6:	b.n	52d6 <ExFatFile::write(void const*, unsigned int)+0x10e>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    53d8:	adds	r1, #1
    53da:	str	r1, [r4, #24]
    53dc:	b.n	5264 <ExFatFile::write(void const*, unsigned int)+0x9c>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    53de:	ldr	r2, [sp, #4]
    53e0:	bl	4640 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    53e4:	cmp	r0, #0
    53e6:	blt.n	5342 <ExFatFile::write(void const*, unsigned int)+0x17a>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    53e8:	bne.w	5260 <ExFatFile::write(void const*, unsigned int)+0x98>
    53ec:	b.n	5256 <ExFatFile::write(void const*, unsigned int)+0x8e>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    53ee:	mov	r0, r4
    53f0:	bl	4964 <ExFatFile::addCluster()>
    53f4:	cmp	r0, #0
    53f6:	beq.n	5342 <ExFatFile::write(void const*, unsigned int)+0x17a>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    53f8:	ldr	r1, [r4, #24]
    53fa:	ldr	r0, [r4, #32]
    53fc:	str	r1, [r4, #28]
    53fe:	b.n	5264 <ExFatFile::write(void const*, unsigned int)+0x9c>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    5400:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5404:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    5408:	str.w	r3, [r0, #540]	; 0x21c
    540c:	b.n	53bc <ExFatFile::write(void const*, unsigned int)+0x1f4>
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    540e:	ldrb.w	r1, [r4, #51]	; 0x33
    5412:	ldr	r0, [sp, #0]
    5414:	orn	r1, r1, #127	; 0x7f
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    5418:	strd	r2, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    541c:	strb.w	r1, [r4, #51]	; 0x33
    5420:	b.n	5350 <ExFatFile::write(void const*, unsigned int)+0x188>
    5422:	ldr	r0, [sp, #0]
    5424:	b.n	5350 <ExFatFile::write(void const*, unsigned int)+0x188>
    5426:	ldrd	r2, r3, [r4]
    542a:	b.n	5310 <ExFatFile::write(void const*, unsigned int)+0x148>
    542c:	.word	0x20017a1c

00005430 <initFatDirCallback(unsigned long, void*)>:
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
    5430:	ldr	r0, [r1, #4]
  uint8_t * buffer;
  print_t * pr;
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
    5432:	push	{r4, lr}
    5434:	mov	r4, r1
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
    5436:	cbz	r0, 5454 <initFatDirCallback(unsigned long, void*)+0x24>
    5438:	ldrh	r3, [r1, #8]
    543a:	ldrh	r2, [r1, #10]
    543c:	adds	r3, #1
    543e:	uxth	r3, r3
    5440:	cmp	r2, r3
    5442:	strh	r3, [r1, #8]
    5444:	bhi.n	5454 <initFatDirCallback(unsigned long, void*)+0x24>
    5446:	ldr	r3, [r0, #0]
    5448:	movs	r2, #1
    544a:	ldr	r1, [pc, #12]	; (5458 <initFatDirCallback(unsigned long, void*)+0x28>)
    544c:	ldr	r3, [r3, #4]
    544e:	blx	r3
    state->pr->write(".");
    state->count = 0;
    5450:	movs	r3, #0
    5452:	strh	r3, [r4, #8]
  }
  return state->buffer;
    5454:	ldr	r0, [r4, #0]
}
    5456:	pop	{r4, pc}
    5458:	.word	0x20001358

0000545c <FatFormatter::initFatDir(unsigned char, unsigned long)>:
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    545c:	push	{r4, r5, r6, r7, lr}
    545e:	mov	r4, r0
    5460:	sub	sp, #28
    5462:	mov	r6, r1
    5464:	mov	r5, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5466:	movs	r1, #0
    5468:	ldr	r0, [r0, #36]	; 0x24
    546a:	mov.w	r2, #512	; 0x200
    546e:	bl	c86c <memset>
  writeMsg("Writing FAT ");
    5472:	ldr	r0, [r4, #32]
    5474:	cbz	r0, 5482 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x26>
    5476:	ldr	r3, [r0, #0]
    5478:	movs	r2, #12
    547a:	ldr	r1, [pc, #136]	; (5504 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa8>)
    547c:	ldr	r3, [r3, #4]
    547e:	blx	r3
    5480:	ldr	r0, [r4, #32]
  struct initFatDirState state;
  state.buffer = m_secBuf;
  state.pr = m_pr;
  state.count = 0;
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    5482:	ldr	r3, [r4, #28]
    5484:	add	r2, sp, #12
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
  writeMsg("Writing FAT ");
  struct initFatDirState state;
  state.buffer = m_secBuf;
    5486:	ldr	r1, [r4, #36]	; 0x24
  state.pr = m_pr;
  state.count = 0;
    5488:	movs	r7, #0
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
  writeMsg("Writing FAT ");
  struct initFatDirState state;
  state.buffer = m_secBuf;
  state.pr = m_pr;
    548a:	str	r0, [sp, #16]
  state.count = 0;
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    548c:	mov	r0, r3
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
  writeMsg("Writing FAT ");
  struct initFatDirState state;
  state.buffer = m_secBuf;
    548e:	str	r1, [sp, #12]
  state.pr = m_pr;
  state.count = 0;
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    5490:	ldr	r1, [r3, #0]
  writeMsg("Writing FAT ");
  struct initFatDirState state;
  state.buffer = m_secBuf;
  state.pr = m_pr;
  state.count = 0;
  state.dotcount = sectorCount/32;
    5492:	lsrs	r3, r5, #5
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    5494:	str	r2, [sp, #0]
    5496:	subs	r2, r5, #1
    5498:	ldr	r5, [r1, #44]	; 0x2c
    549a:	ldr	r1, [r4, #12]
  writeMsg("Writing FAT ");
  struct initFatDirState state;
  state.buffer = m_secBuf;
  state.pr = m_pr;
  state.count = 0;
  state.dotcount = sectorCount/32;
    549c:	strh.w	r3, [sp, #22]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
  writeMsg("Writing FAT ");
  struct initFatDirState state;
  state.buffer = m_secBuf;
  state.pr = m_pr;
  state.count = 0;
    54a0:	strh.w	r7, [sp, #20]
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    54a4:	adds	r1, #1
    54a6:	ldr	r3, [pc, #96]	; (5508 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xac>)
    54a8:	blx	r5
    54aa:	cbz	r0, 54e8 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x8c>
     return false;
  }
  writeMsg("\r\n");
    54ac:	ldr	r0, [r4, #32]
    54ae:	cbz	r0, 54ba <FatFormatter::initFatDir(unsigned char, unsigned long)+0x5e>
    54b0:	ldr	r3, [r0, #0]
    54b2:	movs	r2, #2
    54b4:	ldr	r1, [pc, #84]	; (550c <FatFormatter::initFatDir(unsigned char, unsigned long)+0xb0>)
    54b6:	ldr	r3, [r3, #4]
    54b8:	blx	r3
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
  n = fatType == 16 ? 4 : 12;
    54ba:	cmp	r6, #16
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
     return false;
  }
  writeMsg("\r\n");
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
    54bc:	ldr	r2, [r4, #36]	; 0x24
    54be:	mov.w	r5, #248	; 0xf8
  n = fatType == 16 ? 4 : 12;
  for (size_t i = 1; i < n; i++) {
    54c2:	mov.w	r3, #1
     return false;
  }
  writeMsg("\r\n");
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
  n = fatType == 16 ? 4 : 12;
    54c6:	ite	ne
    54c8:	movne	r0, #12
    54ca:	moveq	r0, #4
  for (size_t i = 1; i < n; i++) {
    m_secBuf[i] = 0XFF;
    54cc:	movs	r1, #255	; 0xff
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
     return false;
  }
  writeMsg("\r\n");
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
    54ce:	strb	r5, [r2, #0]
  n = fatType == 16 ? 4 : 12;
  for (size_t i = 1; i < n; i++) {
    m_secBuf[i] = 0XFF;
    54d0:	ldr	r2, [r4, #36]	; 0x24
    54d2:	strb	r1, [r2, r3]
  }
  writeMsg("\r\n");
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
  n = fatType == 16 ? 4 : 12;
  for (size_t i = 1; i < n; i++) {
    54d4:	adds	r3, #1
    54d6:	cmp	r0, r3
    54d8:	bne.n	54d0 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x74>
    m_secBuf[i] = 0XFF;
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    54da:	ldr	r0, [r4, #28]
    54dc:	ldr	r2, [r4, #36]	; 0x24
    54de:	ldr	r3, [r0, #0]
    54e0:	ldr	r1, [r4, #12]
    54e2:	ldr	r3, [r3, #36]	; 0x24
    54e4:	blx	r3
    54e6:	cbnz	r0, 54ee <FatFormatter::initFatDir(unsigned char, unsigned long)+0x92>
  state.buffer = m_secBuf;
  state.pr = m_pr;
  state.count = 0;
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
     return false;
    54e8:	movs	r0, #0
  for (size_t i = 1; i < n; i++) {
    m_secBuf[i] = 0XFF;
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
}
    54ea:	add	sp, #28
    54ec:	pop	{r4, r5, r6, r7, pc}
  n = fatType == 16 ? 4 : 12;
  for (size_t i = 1; i < n; i++) {
    m_secBuf[i] = 0XFF;
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    54ee:	ldr	r0, [r4, #28]
    54f0:	ldr	r2, [r4, #8]
    54f2:	ldr	r1, [r4, #12]
    54f4:	ldr	r3, [r0, #0]
    54f6:	add	r1, r2
    54f8:	ldr	r2, [r4, #36]	; 0x24
    54fa:	ldr	r3, [r3, #36]	; 0x24
    54fc:	blx	r3
}
    54fe:	add	sp, #28
    5500:	pop	{r4, r5, r6, r7, pc}
    5502:	nop
    5504:	.word	0x20001088
    5508:	.word	0x00005431
    550c:	.word	0x200010ac

00005510 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    5510:	push	{r3, r4, r5, r6, r7, lr}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    5512:	ldr	r4, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5514:	mov.w	r2, #512	; 0x200
    5518:	movs	r1, #0
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
}
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    551a:	mov	r5, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    551c:	mov	r0, r4
  pbs->jmpInstruction[0] = 0XEB;
    551e:	movs	r7, #235	; 0xeb
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
}
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5520:	bl	c86c <memset>
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
    5524:	movs	r6, #118	; 0x76
  pbs->jmpInstruction[2] = 0X90;
    5526:	mov	r3, r4
    5528:	movs	r0, #144	; 0x90
    552a:	add.w	r1, r4, #10
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    552e:	movs	r2, #32
}
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
  pbs->jmpInstruction[0] = 0XEB;
    5530:	strb	r7, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    5532:	strb	r6, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    5534:	strb.w	r0, [r3, #2]!
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    5538:	strb.w	r2, [r3, #1]!
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    553c:	cmp	r3, r1
    553e:	bne.n	5538 <FatFormatter::initPbs()+0x28>
    5540:	mov.w	r1, #512	; 0x200
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
  pbs->bpb.bpb16.fatCount = 2;
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    5544:	movs	r3, #248	; 0xf8
    pbs->oemName[i] = ' ';
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
  pbs->bpb.bpb16.fatCount = 2;
    5546:	movs	r0, #2
    5548:	movw	r2, #43605	; 0xaa55
    554c:	strh.w	r1, [r4, #11]
  pbs->jmpInstruction[2] = 0X90;
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    5550:	ldrb.w	r1, [r5, #43]	; 0x2b
    5554:	strb	r1, [r4, #13]
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    5556:	ldrh	r1, [r5, #40]	; 0x28
  pbs->bpb.bpb16.fatCount = 2;
    5558:	strb	r0, [r4, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    555a:	strb	r3, [r4, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    555c:	ldr	r3, [r5, #16]
    555e:	strh	r1, [r4, #14]
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5560:	str	r3, [r4, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    5562:	ldr	r3, [r5, #24]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5564:	strh.w	r2, [r4, #510]	; 0x1fe
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5568:	str	r3, [r4, #32]
    556a:	pop	{r3, r4, r5, r6, r7, pc}

0000556c <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    556c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5570:	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5572:	mov.w	r2, #512	; 0x200
    5576:	movs	r1, #0
    5578:	ldr	r0, [r0, #36]	; 0x24
    557a:	bl	c86c <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    557e:	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    5580:	ldr	r2, [r4, #16]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5582:	movw	r6, #43605	; 0xaa55
    5586:	addw	r0, r5, #447	; 0x1bf
    558a:	ldr	r1, [r4, #0]
    558c:	bl	307c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors -1);
    5590:	ldr	r3, [r4, #24]
    5592:	ldr	r2, [r4, #16]
    5594:	addw	r0, r5, #451	; 0x1c3
    5598:	ldr	r1, [r4, #0]
    559a:	add	r2, r3
    559c:	subs	r2, #1
    559e:	bl	307c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    55a2:	ldrb.w	r3, [r4, #42]	; 0x2a
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    55a6:	movs	r1, #0
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    55a8:	strb.w	r3, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    55ac:	ldr	r3, [r4, #16]
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    55ae:	ldr	r0, [r4, #28]
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    55b0:	str.w	r3, [r5, #454]	; 0x1c6
    55b4:	ldr	r3, [r0, #0]
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
  setLe32(mbr->part->totalSectors, m_totalSectors);
    55b6:	ldr	r7, [r4, #24]
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    55b8:	ldr	r2, [r4, #36]	; 0x24
    55ba:	ldr	r3, [r3, #36]	; 0x24
    55bc:	str.w	r7, [r5, #458]	; 0x1ca
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    55c0:	strh.w	r6, [r5, #510]	; 0x1fe
}
    55c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  mbr->part->type = m_partType;
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    55c8:	bx	r3
    55ca:	nop

000055cc <FatFormatter::makeFat16()>:
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);

  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    55cc:	ldr.w	ip, [r0, #20]
bool FatFormatter::makeFat16() {
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);

  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    55d0:	mov.w	r1, #256	; 0x100
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
//------------------------------------------------------------------------------
bool FatFormatter::makeFat16() {
    55d4:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);

  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    55d6:	sub.w	r3, ip, #256	; 0x100
    55da:	ldrb.w	r6, [r0, #43]	; 0x2b
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
//------------------------------------------------------------------------------
bool FatFormatter::makeFat16() {
    55de:	mov	r4, r0
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    55e0:	ldr	r5, [r0, #36]	; 0x24

  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    55e2:	str	r1, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    55e4:	udiv	r3, r3, r6
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    55e8:	addw	r2, r3, #257	; 0x101
    55ec:	lsrs	r2, r2, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    55ee:	lsls	r0, r2, #1
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);

  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    55f0:	str	r2, [r4, #8]
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    55f2:	add.w	r7, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    55f6:	cmp	r7, r1
    55f8:	bls.n	56e4 <FatFormatter::makeFat16()+0x118>
    55fa:	mov.w	r2, #384	; 0x180
    55fe:	b.n	5602 <FatFormatter::makeFat16()+0x36>
    5600:	mov	r2, lr
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);

  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    5602:	rsb	r3, r2, ip
    5606:	add.w	lr, r2, #128	; 0x80
    560a:	udiv	r3, r3, r6
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    560e:	addw	r1, r3, #257	; 0x101
    5612:	lsrs	r1, r1, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    5614:	lsls	r0, r1, #1
    5616:	add.w	r7, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    561a:	cmp	r7, r2
    561c:	bhi.n	5600 <FatFormatter::makeFat16()+0x34>
    561e:	str	r2, [r4, #4]
    5620:	str	r1, [r4, #8]
      m_relativeSectors = m_dataStart - r + BU16;
    5622:	subs	r2, r2, r7
      break;
    }
  }
  // check valid cluster count for FAT16 volume
  if (nc < 4085 || nc >= 65525) {
    5624:	subw	r1, r3, #4085	; 0xff5
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    if (m_dataStart >= r) {
      m_relativeSectors = m_dataStart - r + BU16;
    5628:	add.w	r7, r2, #128	; 0x80
      break;
    }
  }
  // check valid cluster count for FAT16 volume
  if (nc < 4085 || nc >= 65525) {
    562c:	cmp.w	r1, #61440	; 0xf000
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    if (m_dataStart >= r) {
      m_relativeSectors = m_dataStart - r + BU16;
    5630:	str	r7, [r4, #16]
      break;
    }
  }
  // check valid cluster count for FAT16 volume
  if (nc < 4085 || nc >= 65525) {
    5632:	bcc.n	5646 <FatFormatter::makeFat16()+0x7a>
    writeMsg("Bad cluster count\r\n");
    5634:	ldr	r0, [r4, #32]
    5636:	cbz	r0, 5642 <FatFormatter::makeFat16()+0x76>
    5638:	ldr	r3, [r0, #0]
    563a:	movs	r2, #19
    563c:	ldr	r1, [pc, #168]	; (56e8 <FatFormatter::makeFat16()+0x11c>)
    563e:	ldr	r3, [r3, #4]
    5640:	blx	r3
  pbs->bpb.bpb16.volumeType[4] = '6';
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    return false;
  }
  return initFatDir(16, m_dataStart - m_fatStart);
}
    5642:	movs	r0, #0
    5644:	pop	{r3, r4, r5, r6, r7, pc}
    return false;
  }
  m_reservedSectorCount = 1;
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
  m_totalSectors = nc*m_sectorsPerCluster
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    5646:	adds	r0, #33	; 0x21
  if (nc < 4085 || nc >= 65525) {
    writeMsg("Bad cluster count\r\n");
    return false;
  }
  m_reservedSectorCount = 1;
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    5648:	adds	r2, #129	; 0x81
  // check valid cluster count for FAT16 volume
  if (nc < 4085 || nc >= 65525) {
    writeMsg("Bad cluster count\r\n");
    return false;
  }
  m_reservedSectorCount = 1;
    564a:	movs	r1, #1
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
  m_totalSectors = nc*m_sectorsPerCluster
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    564c:	mla	r0, r3, r6, r0
  if (nc < 4085 || nc >= 65525) {
    writeMsg("Bad cluster count\r\n");
    return false;
  }
  m_reservedSectorCount = 1;
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    5650:	str	r2, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster
                   + 2*m_fatSize + m_reservedSectorCount + 32;
  if (m_totalSectors < 65536) {
    5652:	cmp.w	r0, #65536	; 0x10000
    return false;
  }
  m_reservedSectorCount = 1;
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
  m_totalSectors = nc*m_sectorsPerCluster
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    5656:	str	r0, [r4, #24]
  // check valid cluster count for FAT16 volume
  if (nc < 4085 || nc >= 65525) {
    writeMsg("Bad cluster count\r\n");
    return false;
  }
  m_reservedSectorCount = 1;
    5658:	strh	r1, [r4, #40]	; 0x28
    m_partType = 0X04;
  } else {
    m_partType = 0X06;
  }
  // write MBR
  if (!writeMbr()) {
    565a:	mov	r0, r4
  m_reservedSectorCount = 1;
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
  m_totalSectors = nc*m_sectorsPerCluster
                   + 2*m_fatSize + m_reservedSectorCount + 32;
  if (m_totalSectors < 65536) {
    m_partType = 0X04;
    565c:	ite	cc
    565e:	movcc	r3, #4
  } else {
    m_partType = 0X06;
    5660:	movcs	r3, #6
    5662:	strb.w	r3, [r4, #42]	; 0x2a
  }
  // write MBR
  if (!writeMbr()) {
    5666:	bl	556c <FatFormatter::writeMbr()>
    566a:	cmp	r0, #0
    566c:	beq.n	5642 <FatFormatter::makeFat16()+0x76>
    return false;
  }
  initPbs();
    566e:	mov	r0, r4
  setLe16(pbs->bpb.bpb16.rootDirEntryCount, FAT16_ROOT_ENTRY_COUNT);
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    5670:	movs	r7, #128	; 0x80
  }
  // write MBR
  if (!writeMbr()) {
    return false;
  }
  initPbs();
    5672:	bl	5510 <FatFormatter::initPbs()>
    5676:	ldr	r2, [r4, #8]
    5678:	mov.w	r1, #512	; 0x200
  setLe16(pbs->bpb.bpb16.rootDirEntryCount, FAT16_ROOT_ENTRY_COUNT);
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    567c:	movs	r6, #41	; 0x29
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    567e:	ldr	r0, [pc, #108]	; (56ec <FatFormatter::makeFat16()+0x120>)
    5680:	add.w	r3, r5, #42	; 0x2a
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5684:	strh.w	r1, [r5, #17]
    5688:	add.w	r1, r5, #53	; 0x35
    568c:	strh	r2, [r5, #22]
  setLe32(pbs->bpb.bpb16.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    568e:	movs	r2, #32
    return false;
  }
  initPbs();
  setLe16(pbs->bpb.bpb16.rootDirEntryCount, FAT16_ROOT_ENTRY_COUNT);
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    5690:	strb.w	r7, [r5, #36]	; 0x24
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    5694:	strb.w	r6, [r5, #38]	; 0x26
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5698:	str.w	r0, [r5, #39]	; 0x27
  setLe32(pbs->bpb.bpb16.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    569c:	strb.w	r2, [r3, #1]!
  setLe16(pbs->bpb.bpb16.rootDirEntryCount, FAT16_ROOT_ENTRY_COUNT);
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
  setLe32(pbs->bpb.bpb16.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    56a0:	cmp	r3, r1
    56a2:	bne.n	569c <FatFormatter::makeFat16()+0xd0>
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
  }
  pbs->bpb.bpb16.volumeType[0] = 'F';
  pbs->bpb.bpb16.volumeType[1] = 'A';
    56a4:	movs	r0, #65	; 0x41
  pbs->bpb.bpb16.volumeType[2] = 'T';
    56a6:	movs	r1, #84	; 0x54
  pbs->bpb.bpb16.volumeType[3] = '1';
    56a8:	movs	r2, #49	; 0x31
  pbs->bpb.bpb16.volumeType[4] = '6';
    56aa:	movs	r3, #54	; 0x36
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
  setLe32(pbs->bpb.bpb16.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
  }
  pbs->bpb.bpb16.volumeType[0] = 'F';
    56ac:	movs	r6, #70	; 0x46
  pbs->bpb.bpb16.volumeType[1] = 'A';
    56ae:	strb.w	r0, [r5, #55]	; 0x37
  pbs->bpb.bpb16.volumeType[2] = 'T';
    56b2:	strb.w	r1, [r5, #56]	; 0x38
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
  setLe32(pbs->bpb.bpb16.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
  }
  pbs->bpb.bpb16.volumeType[0] = 'F';
    56b6:	strb.w	r6, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[1] = 'A';
  pbs->bpb.bpb16.volumeType[2] = 'T';
  pbs->bpb.bpb16.volumeType[3] = '1';
    56ba:	strb.w	r2, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[4] = '6';
    56be:	strb.w	r3, [r5, #58]	; 0x3a
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    56c2:	ldr	r0, [r4, #28]
    56c4:	ldr	r2, [r4, #36]	; 0x24
    56c6:	ldr	r3, [r0, #0]
    56c8:	ldr	r1, [r4, #16]
    56ca:	ldr	r3, [r3, #36]	; 0x24
    56cc:	blx	r3
    56ce:	cmp	r0, #0
    56d0:	beq.n	5642 <FatFormatter::makeFat16()+0x76>
    return false;
  }
  return initFatDir(16, m_dataStart - m_fatStart);
    56d2:	ldr	r2, [r4, #4]
    56d4:	mov	r0, r4
    56d6:	ldr	r3, [r4, #12]
    56d8:	movs	r1, #16
    56da:	subs	r2, r2, r3
}
    56dc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pbs->bpb.bpb16.volumeType[3] = '1';
  pbs->bpb.bpb16.volumeType[4] = '6';
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    return false;
  }
  return initFatDir(16, m_dataStart - m_fatStart);
    56e0:	b.w	545c <FatFormatter::initFatDir(unsigned char, unsigned long)>
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);

  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    56e4:	mov	r2, r1
    56e6:	b.n	5622 <FatFormatter::makeFat16()+0x56>
    56e8:	.word	0x200010e8
    56ec:	.word	0x0012d687

000056f0 <FatFormatter::makeFat32()>:
    return false;
  }
  return initFatDir(16, m_dataStart - m_fatStart);
}
//------------------------------------------------------------------------------
bool FatFormatter::makeFat32() {
    56f0:	push	{r3, r4, r5, r6, r7, lr}
    56f2:	mov	r4, r0
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  FsInfo_t* fsi = reinterpret_cast<FsInfo_t*>(m_secBuf);

  m_relativeSectors = BU32;
    56f4:	mov.w	r2, #8192	; 0x2000
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    r = m_relativeSectors + 9 + 2*m_fatSize;
    if (m_dataStart >= r) {
    56f8:	movw	r0, #8201	; 0x2009
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  FsInfo_t* fsi = reinterpret_cast<FsInfo_t*>(m_secBuf);

  m_relativeSectors = BU32;
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    56fc:	mov.w	r1, #16384	; 0x4000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    5700:	ldr.w	ip, [r4, #20]
    5704:	ldrb.w	lr, [r4, #43]	; 0x2b
    5708:	sub.w	r3, ip, #16384	; 0x4000
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  FsInfo_t* fsi = reinterpret_cast<FsInfo_t*>(m_secBuf);

  m_relativeSectors = BU32;
    570c:	str	r2, [r4, #16]
}
//------------------------------------------------------------------------------
bool FatFormatter::makeFat32() {
  uint32_t nc;
  uint32_t r;
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    570e:	ldr	r5, [r4, #36]	; 0x24
  FsInfo_t* fsi = reinterpret_cast<FsInfo_t*>(m_secBuf);

  m_relativeSectors = BU32;
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    5710:	str	r1, [r4, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    5712:	udiv	r3, r3, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    5716:	add.w	r2, r3, #129	; 0x81
    571a:	lsrs	r2, r2, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
    if (m_dataStart >= r) {
    571c:	lsls	r6, r2, #1
  FsInfo_t* fsi = reinterpret_cast<FsInfo_t*>(m_secBuf);

  m_relativeSectors = BU32;
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    571e:	str	r2, [r4, #8]
    r = m_relativeSectors + 9 + 2*m_fatSize;
    if (m_dataStart >= r) {
    5720:	add	r0, r6
    5722:	cmp	r0, r1
    5724:	bls.n	5750 <FatFormatter::makeFat32()+0x60>
    5726:	mov.w	r1, #24576	; 0x6000
    572a:	b.n	572e <FatFormatter::makeFat32()+0x3e>
    572c:	mov	r1, r7
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  FsInfo_t* fsi = reinterpret_cast<FsInfo_t*>(m_secBuf);

  m_relativeSectors = BU32;
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    572e:	rsb	r3, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    r = m_relativeSectors + 9 + 2*m_fatSize;
    if (m_dataStart >= r) {
    5732:	movw	r0, #8201	; 0x2009
    5736:	add.w	r7, r1, #8192	; 0x2000
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
  FsInfo_t* fsi = reinterpret_cast<FsInfo_t*>(m_secBuf);

  m_relativeSectors = BU32;
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    573a:	udiv	r3, r3, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    573e:	add.w	r2, r3, #129	; 0x81
    5742:	lsrs	r2, r2, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
    if (m_dataStart >= r) {
    5744:	lsls	r6, r2, #1
    5746:	add	r0, r6
    5748:	cmp	r0, r1
    574a:	bhi.n	572c <FatFormatter::makeFat32()+0x3c>
    574c:	str	r1, [r4, #4]
    574e:	str	r2, [r4, #8]
      break;
    }
  }
  // error if too few clusters in FAT32 volume
  if (nc < 65525) {
    5750:	movw	r2, #65524	; 0xfff4
    5754:	cmp	r3, r2
    5756:	bhi.n	576a <FatFormatter::makeFat32()+0x7a>
    writeMsg("Bad cluster count\r\n");
    5758:	ldr	r0, [r4, #32]
    575a:	cbz	r0, 5766 <FatFormatter::makeFat32()+0x76>
    575c:	ldr	r3, [r0, #0]
    575e:	movs	r2, #19
    5760:	ldr	r1, [pc, #324]	; (58a8 <FatFormatter::makeFat32()+0x1b8>)
    5762:	ldr	r3, [r3, #4]
    5764:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
    5766:	movs	r0, #0
    5768:	pop	{r3, r4, r5, r6, r7, pc}
  // error if too few clusters in FAT32 volume
  if (nc < 65525) {
    writeMsg("Bad cluster count\r\n");
    return false;
  }
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    576a:	sub.w	r2, r1, #8192	; 0x2000
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    576e:	mla	r3, r3, lr, r1
  // type depends on address of end sector
  // max CHS has lba = 16450560 = 1024*255*63
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    5772:	ldr	r1, [pc, #312]	; (58ac <FatFormatter::makeFat32()+0x1bc>)
    m_partType = 0X0B;
  } else {
    // FAT32 with only LBA
    m_partType = 0X0C;
  }
  if (!writeMbr()) {
    5774:	mov	r0, r4
  // error if too few clusters in FAT32 volume
  if (nc < 65525) {
    writeMsg("Bad cluster count\r\n");
    return false;
  }
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    5776:	subs	r6, r2, r6
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    5778:	sub.w	r2, r3, #8192	; 0x2000
  // type depends on address of end sector
  // max CHS has lba = 16450560 = 1024*255*63
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    577c:	cmp	r3, r1
  // error if too few clusters in FAT32 volume
  if (nc < 65525) {
    writeMsg("Bad cluster count\r\n");
    return false;
  }
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    577e:	uxth	r6, r6
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    5780:	str	r2, [r4, #24]
  // type depends on address of end sector
  // max CHS has lba = 16450560 = 1024*255*63
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    // FAT32 with CHS and LBA
    m_partType = 0X0B;
    5782:	ite	ls
    5784:	movls	r3, #11
  } else {
    // FAT32 with only LBA
    m_partType = 0X0C;
    5786:	movhi	r3, #12
  if (nc < 65525) {
    writeMsg("Bad cluster count\r\n");
    return false;
  }
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    5788:	add.w	r2, r6, #8192	; 0x2000
  // error if too few clusters in FAT32 volume
  if (nc < 65525) {
    writeMsg("Bad cluster count\r\n");
    return false;
  }
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    578c:	strh	r6, [r4, #40]	; 0x28
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    // FAT32 with CHS and LBA
    m_partType = 0X0B;
  } else {
    // FAT32 with only LBA
    m_partType = 0X0C;
    578e:	strb.w	r3, [r4, #42]	; 0x2a
  if (nc < 65525) {
    writeMsg("Bad cluster count\r\n");
    return false;
  }
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    5792:	str	r2, [r4, #12]
    m_partType = 0X0B;
  } else {
    // FAT32 with only LBA
    m_partType = 0X0C;
  }
  if (!writeMbr()) {
    5794:	bl	556c <FatFormatter::writeMbr()>
    5798:	cmp	r0, #0
    579a:	beq.n	5766 <FatFormatter::makeFat32()+0x76>
    return false;
  }
  initPbs();
    579c:	mov	r0, r4
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
  setLe32(pbs->bpb.bpb32.fat32RootCluster, 2);
  setLe16(pbs->bpb.bpb32.fat32FSInfoSector, 1);
  setLe16(pbs->bpb.bpb32.fat32BackBootSector, 6);
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    579e:	movs	r7, #128	; 0x80
    m_partType = 0X0C;
  }
  if (!writeMbr()) {
    return false;
  }
  initPbs();
    57a0:	bl	5510 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    57a4:	ldr	r3, [r4, #8]
    57a6:	movs	r1, #2
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    57a8:	movs	r2, #1
    57aa:	mov.w	lr, #6
  setLe32(pbs->bpb.bpb32.fat32RootCluster, 2);
  setLe16(pbs->bpb.bpb32.fat32FSInfoSector, 1);
  setLe16(pbs->bpb.bpb32.fat32BackBootSector, 6);
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    57ae:	movs	r6, #41	; 0x29
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    57b0:	str	r3, [r5, #36]	; 0x24
    57b2:	add.w	r3, r5, #70	; 0x46
    57b6:	ldr	r0, [pc, #248]	; (58b0 <FatFormatter::makeFat32()+0x1c0>)
    57b8:	str	r1, [r5, #44]	; 0x2c
    57ba:	add.w	r1, r5, #81	; 0x51
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    57be:	strh	r2, [r5, #48]	; 0x30
  setLe32(pbs->bpb.bpb32.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    57c0:	movs	r2, #32
    57c2:	strh.w	lr, [r5, #50]	; 0x32
  initPbs();
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
  setLe32(pbs->bpb.bpb32.fat32RootCluster, 2);
  setLe16(pbs->bpb.bpb32.fat32FSInfoSector, 1);
  setLe16(pbs->bpb.bpb32.fat32BackBootSector, 6);
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    57c6:	strb.w	r7, [r5, #64]	; 0x40
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    57ca:	strb.w	r6, [r5, #66]	; 0x42
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    57ce:	str.w	r0, [r5, #67]	; 0x43
  setLe32(pbs->bpb.bpb32.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    57d2:	strb.w	r2, [r3, #1]!
  setLe16(pbs->bpb.bpb32.fat32FSInfoSector, 1);
  setLe16(pbs->bpb.bpb32.fat32BackBootSector, 6);
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
  setLe32(pbs->bpb.bpb32.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    57d6:	cmp	r1, r3
    57d8:	bne.n	57d2 <FatFormatter::makeFat32()+0xe2>
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
  }
  pbs->bpb.bpb32.volumeType[0] = 'F';
  pbs->bpb.bpb32.volumeType[1] = 'A';
    57da:	movs	r0, #65	; 0x41
  pbs->bpb.bpb32.volumeType[2] = 'T';
    57dc:	movs	r1, #84	; 0x54
  pbs->bpb.bpb32.volumeType[3] = '3';
    57de:	movs	r2, #51	; 0x33
  pbs->bpb.bpb32.volumeType[4] = '2';
    57e0:	movs	r3, #50	; 0x32
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
  setLe32(pbs->bpb.bpb32.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
  }
  pbs->bpb.bpb32.volumeType[0] = 'F';
    57e2:	movs	r6, #70	; 0x46
  pbs->bpb.bpb32.volumeType[1] = 'A';
    57e4:	strb.w	r0, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[2] = 'T';
    57e8:	strb.w	r1, [r5, #84]	; 0x54
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
  setLe32(pbs->bpb.bpb32.volumeSerialNumber, 1234567);
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
  }
  pbs->bpb.bpb32.volumeType[0] = 'F';
    57ec:	strb.w	r6, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[1] = 'A';
  pbs->bpb.bpb32.volumeType[2] = 'T';
  pbs->bpb.bpb32.volumeType[3] = '3';
    57f0:	strb.w	r2, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[4] = '2';
    57f4:	strb.w	r3, [r5, #86]	; 0x56
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    57f8:	ldr	r0, [r4, #28]
    57fa:	ldr	r2, [r4, #36]	; 0x24
    57fc:	ldr	r3, [r0, #0]
    57fe:	ldr	r1, [r4, #16]
    5800:	ldr	r3, [r3, #36]	; 0x24
    5802:	blx	r3
    5804:	cmp	r0, #0
    5806:	beq.n	5766 <FatFormatter::makeFat32()+0x76>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    5808:	ldr	r0, [r4, #28]
    580a:	ldr	r1, [r4, #16]
    580c:	ldr	r3, [r0, #0]
    580e:	adds	r1, #6
    5810:	ldr	r2, [r4, #36]	; 0x24
    5812:	ldr	r3, [r3, #36]	; 0x24
    5814:	blx	r3
  pbs->bpb.bpb32.volumeType[0] = 'F';
  pbs->bpb.bpb32.volumeType[1] = 'A';
  pbs->bpb.bpb32.volumeType[2] = 'T';
  pbs->bpb.bpb32.volumeType[3] = '3';
  pbs->bpb.bpb32.volumeType[4] = '2';
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    5816:	cmp	r0, #0
    5818:	beq.n	5766 <FatFormatter::makeFat32()+0x76>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    return false;
  }
  // write extra boot area and backup
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
    581a:	mov.w	r2, #512	; 0x200
    581e:	movs	r1, #0
    5820:	ldr	r0, [r4, #36]	; 0x24
    5822:	bl	c86c <memset>
    5826:	ldr	r3, [pc, #140]	; (58b4 <FatFormatter::makeFat32()+0x1c4>)
  setLe32(fsi->trailSignature, FSINFO_TRAIL_SIGNATURE);
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    5828:	ldr	r0, [r4, #28]
    582a:	str.w	r3, [r5, #508]	; 0x1fc
    582e:	ldr	r3, [r0, #0]
    5830:	ldr	r1, [r4, #16]
    5832:	ldr	r3, [r3, #36]	; 0x24
    5834:	adds	r1, #2
    5836:	ldr	r2, [r4, #36]	; 0x24
    5838:	blx	r3
    583a:	cmp	r0, #0
    583c:	beq.n	5766 <FatFormatter::makeFat32()+0x76>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    583e:	ldr	r0, [r4, #28]
    5840:	ldr	r1, [r4, #16]
    5842:	ldr	r3, [r0, #0]
    5844:	adds	r1, #8
    5846:	ldr	r2, [r4, #36]	; 0x24
    5848:	ldr	r3, [r3, #36]	; 0x24
    584a:	blx	r3
    return false;
  }
  // write extra boot area and backup
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
  setLe32(fsi->trailSignature, FSINFO_TRAIL_SIGNATURE);
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    584c:	cmp	r0, #0
    584e:	beq.n	5766 <FatFormatter::makeFat32()+0x76>
  // write FSINFO sector and backup
  setLe32(fsi->leadSignature, FSINFO_LEAD_SIGNATURE);
  setLe32(fsi->structSignature, FSINFO_STRUCT_SIGNATURE);
  setLe32(fsi->freeCount, 0XFFFFFFFF);
  setLe32(fsi->nextFree, 0XFFFFFFFF);
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    5850:	ldr	r3, [r4, #28]
    5852:	mov.w	r2, #4294967295
    5856:	ldr	r0, [pc, #96]	; (58b8 <FatFormatter::makeFat32()+0x1c8>)
    5858:	ldr	r1, [pc, #96]	; (58bc <FatFormatter::makeFat32()+0x1cc>)
    585a:	str	r0, [r5, #0]
    585c:	mov	r0, r3
    585e:	str.w	r2, [r5, #488]	; 0x1e8
    5862:	str.w	r2, [r5, #492]	; 0x1ec
    5866:	str.w	r1, [r5, #484]	; 0x1e4
    586a:	ldr	r3, [r3, #0]
    586c:	ldr	r1, [r4, #16]
    586e:	ldr	r3, [r3, #36]	; 0x24
    5870:	adds	r1, #1
    5872:	ldr	r2, [r4, #36]	; 0x24
    5874:	blx	r3
    5876:	cmp	r0, #0
    5878:	beq.w	5766 <FatFormatter::makeFat32()+0x76>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    587c:	ldr	r0, [r4, #28]
    587e:	ldr	r1, [r4, #16]
    5880:	ldr	r3, [r0, #0]
    5882:	adds	r1, #7
    5884:	ldr	r2, [r4, #36]	; 0x24
    5886:	ldr	r3, [r3, #36]	; 0x24
    5888:	blx	r3
  // write FSINFO sector and backup
  setLe32(fsi->leadSignature, FSINFO_LEAD_SIGNATURE);
  setLe32(fsi->structSignature, FSINFO_STRUCT_SIGNATURE);
  setLe32(fsi->freeCount, 0XFFFFFFFF);
  setLe32(fsi->nextFree, 0XFFFFFFFF);
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    588a:	cmp	r0, #0
    588c:	beq.w	5766 <FatFormatter::makeFat32()+0x76>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    5890:	ldr	r2, [r4, #8]
    5892:	mov	r0, r4
    5894:	ldrb.w	r3, [r4, #43]	; 0x2b
    5898:	movs	r1, #32
    589a:	add.w	r2, r3, r2, lsl #1
}
    589e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  setLe32(fsi->nextFree, 0XFFFFFFFF);
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    58a2:	b.w	545c <FatFormatter::initFatDir(unsigned char, unsigned long)>
    58a6:	nop
    58a8:	.word	0x200010e8
    58ac:	.word	0x00fb0400
    58b0:	.word	0x0012d687
    58b4:	.word	0xaa550000
    58b8:	.word	0x41615252
    58bc:	.word	0x61417272

000058c0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
#define writeMsg(str) if (m_pr) m_pr->print(F(str))
#else  // PRINT_FORMAT_PROGRESS
#define writeMsg(str) if (m_pr) m_pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    58c0:	push	{r3, r4, r5, lr}
    58c2:	mov	r4, r0
  bool rtn;
  m_dev = dev;
  m_secBuf = secBuf;
  m_pr = pr;
  m_sectorCount = m_dev->sectorCount();
    58c4:	ldr	r5, [r1, #0]
    58c6:	mov	r0, r1
#define writeMsg(str) if (m_pr) m_pr->write(str)
#endif  // PRINT_FORMAT_PROGRESS
//------------------------------------------------------------------------------
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
  bool rtn;
  m_dev = dev;
    58c8:	str	r1, [r4, #28]
  m_secBuf = secBuf;
    58ca:	str	r2, [r4, #36]	; 0x24
  m_pr = pr;
    58cc:	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    58ce:	ldr	r3, [r5, #28]
    58d0:	blx	r3
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    58d2:	addw	r3, r0, #2047	; 0x7ff
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
  bool rtn;
  m_dev = dev;
  m_secBuf = secBuf;
  m_pr = pr;
  m_sectorCount = m_dev->sectorCount();
    58d6:	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    58d8:	lsrs	r3, r3, #11

  if (m_capacityMB <= 6) {
    58da:	cmp	r3, #6
  bool rtn;
  m_dev = dev;
  m_secBuf = secBuf;
  m_pr = pr;
  m_sectorCount = m_dev->sectorCount();
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    58dc:	str	r3, [r4, #0]

  if (m_capacityMB <= 6) {
    58de:	bhi.n	58f2 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x32>
    writeMsg("Card is too small.\r\n");
    58e0:	ldr	r0, [r4, #32]
    58e2:	cbz	r0, 58ee <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2e>
    58e4:	ldr	r3, [r0, #0]
    58e6:	movs	r2, #20
    58e8:	ldr	r1, [pc, #152]	; (5984 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc4>)
    58ea:	ldr	r3, [r3, #4]
    58ec:	blx	r3
    return false;
    58ee:	movs	r0, #0
    58f0:	pop	{r3, r4, r5, pc}
  } else if (m_capacityMB <= 16) {
    58f2:	cmp	r3, #16
    58f4:	bhi.n	591e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5e>
    m_sectorsPerCluster = 2;
    58f6:	movs	r3, #2
    58f8:	strb.w	r3, [r4, #43]	; 0x2b
    m_sectorsPerCluster = 64;
  } else {
    // SDXC cards
    m_sectorsPerCluster = 128;
  }
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    58fc:	cmp.w	r0, #4194304	; 0x400000
    5900:	mov	r0, r4
    5902:	bcs.n	592e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    5904:	bl	55cc <FatFormatter::makeFat16()>
    5908:	mov	r5, r0
  if (rtn) {
    writeMsg("Format Done\r\n");
    590a:	ldr	r0, [r4, #32]
  } else {
    // SDXC cards
    m_sectorsPerCluster = 128;
  }
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
  if (rtn) {
    590c:	cbz	r5, 593a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7a>
    writeMsg("Format Done\r\n");
    590e:	cbz	r0, 5954 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x94>
    5910:	ldr	r3, [r0, #0]
    5912:	movs	r2, #13
    5914:	ldr	r1, [pc, #112]	; (5988 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc8>)
    5916:	ldr	r3, [r3, #4]
    5918:	blx	r3
    591a:	movs	r0, #1
    591c:	pop	{r3, r4, r5, pc}
  if (m_capacityMB <= 6) {
    writeMsg("Card is too small.\r\n");
    return false;
  } else if (m_capacityMB <= 16) {
    m_sectorsPerCluster = 2;
  } else if (m_capacityMB <= 32) {
    591e:	cmp	r3, #32
    5920:	bls.n	594c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x8c>
    m_sectorsPerCluster = 4;
  } else if (m_capacityMB <= 64) {
    5922:	cmp	r3, #64	; 0x40
    5924:	bhi.n	5958 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x98>
    m_sectorsPerCluster = 8;
    5926:	movs	r3, #8
    5928:	strb.w	r3, [r4, #43]	; 0x2b
    592c:	b.n	58fc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c>
    m_sectorsPerCluster = 64;
  } else {
    // SDXC cards
    m_sectorsPerCluster = 128;
  }
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    592e:	bl	56f0 <FatFormatter::makeFat32()>
    5932:	mov	r5, r0
  if (rtn) {
    writeMsg("Format Done\r\n");
    5934:	ldr	r0, [r4, #32]
  } else {
    // SDXC cards
    m_sectorsPerCluster = 128;
  }
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
  if (rtn) {
    5936:	cmp	r5, #0
    5938:	bne.n	590e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4e>
    writeMsg("Format Done\r\n");
  } else {
    writeMsg("Format Failed\r\n");
    593a:	cmp	r0, #0
    593c:	beq.n	58ee <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2e>
    593e:	ldr	r3, [r0, #0]
    5940:	movs	r2, #15
    5942:	ldr	r1, [pc, #72]	; (598c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xcc>)
    5944:	ldr	r3, [r3, #4]
    5946:	blx	r3
    5948:	mov	r0, r5
    594a:	pop	{r3, r4, r5, pc}
    writeMsg("Card is too small.\r\n");
    return false;
  } else if (m_capacityMB <= 16) {
    m_sectorsPerCluster = 2;
  } else if (m_capacityMB <= 32) {
    m_sectorsPerCluster = 4;
    594c:	movs	r3, #4
    594e:	strb.w	r3, [r4, #43]	; 0x2b
    5952:	b.n	58fc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c>
    5954:	movs	r0, #1
    writeMsg("Format Done\r\n");
  } else {
    writeMsg("Format Failed\r\n");
  }
  return rtn;
}
    5956:	pop	{r3, r4, r5, pc}
    m_sectorsPerCluster = 2;
  } else if (m_capacityMB <= 32) {
    m_sectorsPerCluster = 4;
  } else if (m_capacityMB <= 64) {
    m_sectorsPerCluster = 8;
  } else if (m_capacityMB <= 128) {
    5958:	cmp	r3, #128	; 0x80
    595a:	bls.n	596a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xaa>
    m_sectorsPerCluster = 16;
  } else if (m_capacityMB <= 1024) {
    595c:	cmp.w	r3, #1024	; 0x400
    5960:	bhi.n	5972 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb2>
    m_sectorsPerCluster = 32;
    5962:	movs	r3, #32
    5964:	strb.w	r3, [r4, #43]	; 0x2b
    5968:	b.n	58fc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c>
  } else if (m_capacityMB <= 32) {
    m_sectorsPerCluster = 4;
  } else if (m_capacityMB <= 64) {
    m_sectorsPerCluster = 8;
  } else if (m_capacityMB <= 128) {
    m_sectorsPerCluster = 16;
    596a:	movs	r3, #16
    596c:	strb.w	r3, [r4, #43]	; 0x2b
    5970:	b.n	58fc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c>
  } else if (m_capacityMB <= 1024) {
    m_sectorsPerCluster = 32;
  } else if (m_capacityMB <= 32768) {
    5972:	cmp.w	r3, #32768	; 0x8000
    m_sectorsPerCluster = 64;
    5976:	ite	ls
    5978:	movls	r3, #64	; 0x40
  } else {
    // SDXC cards
    m_sectorsPerCluster = 128;
    597a:	movhi	r3, #128	; 0x80
    597c:	strb.w	r3, [r4, #43]	; 0x2b
    5980:	b.n	58fc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c>
    5982:	nop
    5984:	.word	0x200010fc
    5988:	.word	0x20001114
    598c:	.word	0x20001124

00005990 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    5990:	cmp	r2, #4
    5992:	bls.n	59ac <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1c>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    5994:	cmp	r2, #10
    5996:	bls.n	59a4 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x14>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    5998:	cmp	r2, #12
    599a:	bhi.n	59b6 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    599c:	add.w	r2, r1, r2, lsl #1
    59a0:	ldrh	r0, [r2, #6]
    59a2:	bx	lr
    59a4:	add.w	r2, r1, r2, lsl #1
    59a8:	ldrh	r0, [r2, #4]
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    59aa:	bx	lr
    59ac:	add.w	r2, r1, r2, lsl #1
    59b0:	ldrh.w	r0, [r2, #1]
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    59b4:	bx	lr
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    59b6:	movs	r0, #0
}
    59b8:	bx	lr
    59ba:	nop

000059bc <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    59bc:	push	{r4, r5, r6, r7, lr}
    59be:	ldrb	r3, [r0, #0]
    59c0:	sub	sp, #12
    59c2:	mov	r5, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    59c4:	cbz	r3, 59de <FatFile::getSFN(char*, unsigned int)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    59c6:	ands.w	r4, r3, #96	; 0x60
    59ca:	beq.n	59e8 <FatFile::getSFN(char*, unsigned int)+0x2c>
    if (size < 2) {
    59cc:	cmp	r2, #1
    59ce:	bls.n	59de <FatFile::getSFN(char*, unsigned int)+0x22>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    59d0:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    59d2:	movs	r3, #0
    return 1;
    59d4:	movs	r0, #1
  if (isRoot()) {
    if (size < 2) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    59d6:	strb	r2, [r1, #0]
    name[1] = '\0';
    59d8:	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    59da:	add	sp, #12
    59dc:	pop	{r4, r5, r6, r7, pc}
  }
  name[j] = '\0';
  return j;

 fail:
  name[0] = '\0';
    59de:	movs	r3, #0
  return 0;
    59e0:	mov	r0, r3
  }
  name[j] = '\0';
  return j;

 fail:
  name[0] = '\0';
    59e2:	strb	r3, [r5, #0]
  return 0;
}
    59e4:	add	sp, #12
    59e6:	pop	{r4, r5, r6, r7, pc}
    name[0] = '/';
    name[1] = '\0';
    return 1;
  }
  // cache entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    59e8:	mov	r1, r4
    59ea:	str	r2, [sp, #4]
    59ec:	bl	5c5c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    59f0:	cmp	r0, #0
    59f2:	beq.n	59de <FatFile::getSFN(char*, unsigned int)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  ptr = dir->name;
    59f4:	mov	r1, r4
    59f6:	mov	r3, r0
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
    59f8:	mov.w	ip, #8
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
  char c;
  uint8_t j = 0;
    59fc:	mov	r6, r4
    59fe:	ldr	r2, [sp, #4]
    5a00:	b.n	5a22 <FatFile::getSFN(char*, unsigned int)+0x66>
      }
      lcBit = FAT_CASE_LC_EXT;
      c = '.';
    } else {
      c = *ptr++;
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    5a02:	ldrb	r7, [r0, #12]
    5a04:	tst.w	ip, r7
    5a08:	beq.n	5a0e <FatFile::getSFN(char*, unsigned int)+0x52>
        c += 'a' - 'A';
    5a0a:	adds	r4, #32
    5a0c:	uxtb	r4, r4
      }
      if (c == ' ') {
        continue;
      }
    }
    if ((j + 1u) >= size) {
    5a0e:	adds	r7, r6, #1
    5a10:	mov	lr, r6
    5a12:	cmp	r2, r7
    5a14:	bls.n	59de <FatFile::getSFN(char*, unsigned int)+0x22>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[j++] = c;
    5a16:	uxtb	r6, r7
    5a18:	strb.w	r4, [r5, lr]
    5a1c:	adds	r1, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  ptr = dir->name;
  // format name
  for (uint8_t i = 0; i < 12; i++) {
    5a1e:	cmp	r1, #12
    5a20:	beq.n	5a38 <FatFile::getSFN(char*, unsigned int)+0x7c>
    if (i == 8) {
    5a22:	cmp	r1, #8
      if (*ptr == ' ') {
    5a24:	ldrb	r4, [r3, #0]
    goto fail;
  }
  ptr = dir->name;
  // format name
  for (uint8_t i = 0; i < 12; i++) {
    if (i == 8) {
    5a26:	beq.n	5a40 <FatFile::getSFN(char*, unsigned int)+0x84>
      }
      lcBit = FAT_CASE_LC_EXT;
      c = '.';
    } else {
      c = *ptr++;
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    5a28:	sub.w	r7, r4, #65	; 0x41
        break;
      }
      lcBit = FAT_CASE_LC_EXT;
      c = '.';
    } else {
      c = *ptr++;
    5a2c:	adds	r3, #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    5a2e:	cmp	r7, #25
    5a30:	bls.n	5a02 <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
      }
      if (c == ' ') {
    5a32:	cmp	r4, #32
    5a34:	beq.n	5a1c <FatFile::getSFN(char*, unsigned int)+0x60>
    5a36:	b.n	5a0e <FatFile::getSFN(char*, unsigned int)+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[j++] = c;
  }
  name[j] = '\0';
    5a38:	movs	r3, #0
  return j;
    5a3a:	mov	r0, r6
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[j++] = c;
  }
  name[j] = '\0';
    5a3c:	strb	r3, [r5, r6]
  return j;
    5a3e:	b.n	59e4 <FatFile::getSFN(char*, unsigned int)+0x28>
  }
  ptr = dir->name;
  // format name
  for (uint8_t i = 0; i < 12; i++) {
    if (i == 8) {
      if (*ptr == ' ') {
    5a40:	cmp	r4, #32
    5a42:	beq.n	5a38 <FatFile::getSFN(char*, unsigned int)+0x7c>
        break;
      }
      lcBit = FAT_CASE_LC_EXT;
    5a44:	mov.w	ip, #16
      c = '.';
    5a48:	movs	r4, #46	; 0x2e
    5a4a:	b.n	5a0e <FatFile::getSFN(char*, unsigned int)+0x52>

00005a4c <FatFile::getName8(char*, unsigned int)>:
 fail:
  name[0] = '\0';
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getName8(char* name, size_t size) {
    5a4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a50:	mov.w	fp, #0
    5a54:	sub	sp, #44	; 0x2c
  char* ptr;
  FatFile dir;
  DirLfn_t* ldir;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    5a56:	ldrb	r3, [r0, #0]
 fail:
  name[0] = '\0';
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getName8(char* name, size_t size) {
    5a58:	mov	r9, r1
    5a5a:	strb.w	fp, [sp, #4]
    5a5e:	strb.w	fp, [sp, #5]
    5a62:	strb.w	fp, [sp, #6]
  char* ptr;
  FatFile dir;
  DirLfn_t* ldir;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    5a66:	cmp	r3, #0
    5a68:	beq.n	5b2e <FatFile::getName8(char*, unsigned int)+0xe2>
      DBG_FAIL_MACRO;
      goto fail;
  }
  if (!isLFN()) {
    5a6a:	ldrb	r3, [r0, #3]
    5a6c:	mov	r5, r0
    5a6e:	cmp	r3, #0
    5a70:	beq.n	5b3c <FatFile::getName8(char*, unsigned int)+0xf0>
    return getSFN(name, size);
  }
  if (!dir.openCluster(this)) {
    5a72:	mov	r1, r0
    5a74:	add	r0, sp, #4
    5a76:	mov	r7, r2
    5a78:	bl	60c8 <FatFile::openCluster(FatFile*)>
    5a7c:	cmp	r0, #0
    5a7e:	beq.n	5b2e <FatFile::getName8(char*, unsigned int)+0xe2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    5a80:	ldrb	r0, [r5, #3]
    5a82:	cmp	r0, #0
    5a84:	beq.n	5b68 <FatFile::getName8(char*, unsigned int)+0x11c>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5a86:	subs	r7, #1
  }
  if (!dir.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    5a88:	mov	r4, r9
    5a8a:	mov.w	r8, #1
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5a8e:	add	r7, r9
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    5a90:	ldrh	r1, [r5, #4]
    5a92:	add	r0, sp, #4
    5a94:	rsb	r1, r8, r1
    5a98:	uxth	r1, r1
    5a9a:	lsls	r1, r1, #5
    5a9c:	bl	6554 <FatFile::seekSet(unsigned long)>
    5aa0:	cmp	r0, #0
    5aa2:	beq.n	5b2e <FatFile::getName8(char*, unsigned int)+0xe2>
    5aa4:	movs	r1, #0
    5aa6:	add	r0, sp, #4
    5aa8:	bl	62d0 <FatFile::readDirCache(bool)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    if (!ldir) {
    5aac:	mov	r6, r0
    5aae:	cmp	r0, #0
    5ab0:	beq.n	5b2e <FatFile::getName8(char*, unsigned int)+0xe2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    5ab2:	ldrb	r3, [r0, #11]
    5ab4:	cmp	r3, #15
    5ab6:	bne.n	5b2e <FatFile::getName8(char*, unsigned int)+0xe2>
    5ab8:	ldrb	r3, [r0, #0]
    5aba:	and.w	r3, r3, #31
    5abe:	cmp	r8, r3
    5ac0:	bne.n	5b2e <FatFile::getName8(char*, unsigned int)+0xe2>
    5ac2:	mov.w	sl, #0
    5ac6:	b.n	5b02 <FatFile::getName8(char*, unsigned int)+0xb6>
      goto fail;
    }
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t c = getLfnChar(ldir, i);
      if (hs) {
        if (!FsUtf::isLowSurrogate(c)) {
    5ac8:	add.w	r3, r0, #9216	; 0x2400
    5acc:	uxth	r3, r3
    5ace:	cmp.w	r3, #1024	; 0x400
    5ad2:	bcs.n	5b2e <FatFile::getName8(char*, unsigned int)+0xe2>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5ad4:	mov.w	fp, fp, lsl #10
    5ad8:	ldr	r3, [pc, #144]	; (5b6c <FatFile::getName8(char*, unsigned int)+0x120>)
    5ada:	ubfx	r0, r0, #0, #10
    5ade:	and.w	r3, fp, r3
    5ae2:	orrs	r0, r3
    5ae4:	add.w	r0, r0, #65536	; 0x10000
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5ae8:	mov	r1, r4
    5aea:	mov	r2, r7
    5aec:	bl	2f50 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    5af0:	mov	r4, r0
    5af2:	cbz	r0, 5b2e <FatFile::getName8(char*, unsigned int)+0xe2>
    5af4:	add.w	sl, sl, #1
    5af8:	mov.w	fp, #0
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t i = 0; i < 13; i++) {
    5afc:	cmp.w	sl, #13
    5b00:	beq.n	5b58 <FatFile::getName8(char*, unsigned int)+0x10c>
      uint16_t c = getLfnChar(ldir, i);
    5b02:	uxtb.w	r2, sl
    5b06:	mov	r1, r6
    5b08:	mov	r0, r5
    5b0a:	bl	5990 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    5b0e:	cmp.w	fp, #0
    5b12:	bne.n	5ac8 <FatFile::getName8(char*, unsigned int)+0x7c>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
    5b14:	add.w	r3, r0, #10240	; 0x2800
    5b18:	uxth	r3, r3
          DBG_FAIL_MACRO;
          goto fail;
        }
        cp = FsUtf::u16ToCp(hs, c);
        hs = 0;
      } else if (!FsUtf::isSurrogate(c)) {
    5b1a:	cmp.w	r3, #2048	; 0x800
    5b1e:	bcc.n	5b46 <FatFile::getName8(char*, unsigned int)+0xfa>
        if (c == 0) {
    5b20:	cmp	r0, #0
    5b22:	bne.n	5ae8 <FatFile::getName8(char*, unsigned int)+0x9c>
    5b24:	rsb	r0, r9, r4
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    5b28:	movs	r3, #0
    5b2a:	strb	r3, [r4, #0]
  return str - name;
    5b2c:	b.n	5b36 <FatFile::getName8(char*, unsigned int)+0xea>

 fail:
  *name = 0;
    5b2e:	movs	r3, #0
  return 0;
    5b30:	mov	r0, r3
 done:
  *str = '\0';
  return str - name;

 fail:
  *name = 0;
    5b32:	strb.w	r3, [r9]
  return 0;
}
    5b36:	add	sp, #44	; 0x2c
    5b38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  if (!isLFN()) {
    return getSFN(name, size);
    5b3c:	bl	59bc <FatFile::getSFN(char*, unsigned int)>
  return str - name;

 fail:
  *name = 0;
  return 0;
}
    5b40:	add	sp, #44	; 0x2c
    5b42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      } else if (!FsUtf::isSurrogate(c)) {
        if (c == 0) {
          goto done;
        }
        cp = c;
      } else if (FsUtf::isHighSurrogate(c)) {
    5b46:	cmp.w	r3, #1024	; 0x400
    5b4a:	bcs.n	5b2e <FatFile::getName8(char*, unsigned int)+0xe2>
    5b4c:	add.w	sl, sl, #1
    5b50:	mov	fp, r0
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t i = 0; i < 13; i++) {
    5b52:	cmp.w	sl, #13
    5b56:	bne.n	5b02 <FatFile::getName8(char*, unsigned int)+0xb6>
  }
  if (!dir.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    5b58:	add.w	r8, r8, #1
    5b5c:	ldrb	r3, [r5, #3]
    5b5e:	uxtb.w	r8, r8
    5b62:	cmp	r3, r8
    5b64:	bcs.n	5a90 <FatFile::getName8(char*, unsigned int)+0x44>
    5b66:	b.n	5b24 <FatFile::getName8(char*, unsigned int)+0xd8>
    5b68:	mov	r4, r9
    5b6a:	b.n	5b28 <FatFile::getName8(char*, unsigned int)+0xdc>
    5b6c:	.word	0x000ffc00

00005b70 <FatFile::getName(char*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::getName(char* name, size_t size) {
#if !USE_LONG_FILE_NAMES
  return getSFN(name, size);
#elif USE_UTF8_LONG_NAMES
  return getName8(name, size);
    5b70:	b.w	5a4c <FatFile::getName8(char*, unsigned int)>

00005b74 <FatFile::openRoot(FatVolume*) [clone .part.38]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    5b74:	push	{r3, r4, r5, lr}
    5b76:	mov	r5, r1
    5b78:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    5b7a:	movs	r2, #36	; 0x24
    5b7c:	movs	r1, #0
    5b7e:	bl	c86c <memset>

  m_vol = vol;
    5b82:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    5b84:	ldrb	r3, [r5, #7]
    5b86:	cmp	r3, #16
    5b88:	beq.n	5b96 <FatFile::openRoot(FatVolume*) [clone .part.38]+0x22>
    5b8a:	cmp	r3, #32
    5b8c:	beq.n	5ba0 <FatFile::openRoot(FatVolume*) [clone .part.38]+0x2c>
    5b8e:	cmp	r3, #12
    5b90:	beq.n	5b96 <FatFile::openRoot(FatVolume*) [clone .part.38]+0x22>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    5b92:	movs	r0, #0
}
    5b94:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5b96:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5b98:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5b9a:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5b9c:	strb	r0, [r4, #2]
    5b9e:	pop	{r3, r4, r5, pc}
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    5ba0:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5ba2:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    5ba4:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5ba6:	strb	r0, [r4, #2]
    5ba8:	pop	{r3, r4, r5, pc}
    5baa:	nop

00005bac <FatFile::addCluster()>:
#include "FatLib.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5bac:	mov	r2, r0
#define DBG_FILE "FatFile.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    5bae:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5bb0:	ldr.w	r5, [r2, #16]!
#define DBG_FILE "FatFile.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    5bb4:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5bb6:	ldr	r0, [r0, #8]
    5bb8:	mov	r1, r5
    5bba:	bl	6d38 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    5bbe:	cbz	r0, 5bd6 <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    5bc0:	cbz	r5, 5bd8 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    5bc2:	ldr	r3, [r4, #16]
    5bc4:	adds	r5, #1
    5bc6:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5bc8:	ldrb	r3, [r4, #2]
    5bca:	it	ne
    5bcc:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5bd0:	orn	r3, r3, #127	; 0x7f
    5bd4:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    5bd6:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5bd8:	ldrb	r3, [r4, #2]
    5bda:	orr.w	r3, r3, #64	; 0x40
    5bde:	b.n	5bd0 <FatFile::addCluster()+0x24>

00005be0 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    5be0:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sector;
  uint8_t* pc;

  if (isRootFixed()) {
    5be2:	ldrb	r3, [r0, #0]
    5be4:	and.w	r3, r3, #32
    5be8:	cbnz	r3, 5bf6 <FatFile::addDirCluster()+0x16>
    5bea:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    5bee:	ldr	r1, [r0, #20]
    5bf0:	ldr	r3, [pc, #100]	; (5c58 <FatFile::addDirCluster()+0x78>)
    5bf2:	cmp	r1, r3
    5bf4:	bls.n	5bfc <FatFile::addDirCluster()+0x1c>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    5bf6:	movs	r6, #0
}
    5bf8:	mov	r0, r6
    5bfa:	pop	{r3, r4, r5, r6, r7, pc}
    5bfc:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    5bfe:	bl	5bac <FatFile::addCluster()>
    5c02:	mov	r6, r0
    5c04:	cmp	r0, #0
    5c06:	beq.n	5bf6 <FatFile::addDirCluster()+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    5c08:	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5c0a:	ldr	r7, [r5, #16]
    5c0c:	ldrb	r3, [r0, #6]
    5c0e:	subs	r7, #2
    5c10:	ldr	r2, [r0, #20]
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5c12:	ldrb	r1, [r0, #4]
    5c14:	lsls	r7, r3
    5c16:	add	r7, r2
    5c18:	cbnz	r1, 5c2c <FatFile::addDirCluster()+0x4c>
    5c1a:	b.n	5c44 <FatFile::addDirCluster()+0x64>
    pc = m_vol->dataCachePrepare(sector + i, FsCache::CACHE_RESERVE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(pc, 0, m_vol->bytesPerSector());
    5c1c:	bl	c86c <memset>
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5c20:	adds	r4, #1
    5c22:	ldr	r0, [r5, #8]
    5c24:	uxtb	r4, r4
    5c26:	ldrb	r3, [r0, #4]
    5c28:	cmp	r3, r4
    5c2a:	bls.n	5c42 <FatFile::addDirCluster()+0x62>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    5c2c:	movs	r2, #5
    5c2e:	adds	r1, r4, r7
    5c30:	adds	r0, #40	; 0x28
    5c32:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
    pc = m_vol->dataCachePrepare(sector + i, FsCache::CACHE_RESERVE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(pc, 0, m_vol->bytesPerSector());
    5c36:	mov.w	r2, #512	; 0x200
    5c3a:	movs	r1, #0
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    pc = m_vol->dataCachePrepare(sector + i, FsCache::CACHE_RESERVE_FOR_WRITE);
    if (!pc) {
    5c3c:	cmp	r0, #0
    5c3e:	bne.n	5c1c <FatFile::addDirCluster()+0x3c>
    5c40:	b.n	5bf6 <FatFile::addDirCluster()+0x16>
    5c42:	ldrb	r3, [r0, #6]
      goto fail;
    }
    memset(pc, 0, m_vol->bytesPerSector());
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    5c44:	mov.w	r2, #512	; 0x200
    5c48:	ldr	r1, [r5, #20]
    5c4a:	lsl.w	r3, r2, r3
    5c4e:	uxtah	r3, r1, r3
    5c52:	str	r3, [r5, #20]
    5c54:	b.n	5bf8 <FatFile::addDirCluster()+0x18>
    5c56:	nop
    5c58:	.word	0x001ffdff

00005c5c <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    5c5c:	push	{r4, lr}
    5c5e:	mov	r4, r0
    5c60:	ldr	r0, [r0, #8]
    5c62:	mov	r2, r1
    5c64:	adds	r0, #40	; 0x28
    5c66:	ldr	r1, [r4, #24]
    5c68:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* pc = m_vol->dataCachePrepare(m_dirSector, action);
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(pc);
  if (!dir) {
    5c6c:	cbz	r0, 5c78 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return dir + (m_dirIndex & 0XF);
    5c6e:	ldrh	r3, [r4, #4]
    5c70:	and.w	r3, r3, #15
    5c74:	add.w	r0, r0, r3, lsl #5

 fail:
  return nullptr;
}
    5c78:	pop	{r4, pc}
    5c7a:	nop

00005c7c <FatFile::sync() [clone .part.42]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5c7c:	push	{r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5c7e:	ldrsb.w	r3, [r0, #2]
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5c82:	sub	sp, #12
    5c84:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5c86:	cmp	r3, #0
    5c88:	blt.n	5cbe <FatFile::sync() [clone .part.42]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    5c8a:	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5c8c:	add.w	r0, r5, #40	; 0x28
    5c90:	bl	31c0 <FsCache::sync()>
    5c94:	cbnz	r0, 5ca4 <FatFile::sync() [clone .part.42]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    5c96:	ldrb	r3, [r4, #1]
  return false;
    5c98:	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    5c9a:	orr.w	r3, r3, #1
    5c9e:	strb	r3, [r4, #1]
  return false;
}
    5ca0:	add	sp, #12
    5ca2:	pop	{r4, r5, pc}
    5ca4:	add.w	r0, r5, #568	; 0x238
    5ca8:	bl	31c0 <FsCache::sync()>
    5cac:	cmp	r0, #0
    5cae:	beq.n	5c96 <FatFile::sync() [clone .part.42]+0x1a>
    5cb0:	ldr	r0, [r5, #0]
  }
  bool cacheSafeWrite(uint32_t sector, const uint8_t* dst, size_t count) {
    return m_cache.cacheSafeWrite(sector, dst, count);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5cb2:	ldr	r3, [r0, #0]
    5cb4:	ldr	r3, [r3, #32]
    5cb6:	blx	r3
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5cb8:	cmp	r0, #0
    5cba:	beq.n	5c96 <FatFile::sync() [clone .part.42]+0x1a>
    5cbc:	b.n	5ca0 <FatFile::sync() [clone .part.42]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    5cbe:	movs	r1, #1
    5cc0:	bl	5c5c <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5cc4:	mov	r5, r0
    5cc6:	cmp	r0, #0
    5cc8:	beq.n	5c96 <FatFile::sync() [clone .part.42]+0x1a>
    5cca:	ldrb	r3, [r0, #0]
    5ccc:	cmp	r3, #229	; 0xe5
    5cce:	beq.n	5c96 <FatFile::sync() [clone .part.42]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5cd0:	ldrb	r3, [r4, #0]
    5cd2:	lsls	r3, r3, #28
    5cd4:	bpl.n	5cda <FatFile::sync() [clone .part.42]+0x5e>
      setLe32(dir->fileSize, m_fileSize);
    5cd6:	ldr	r3, [r4, #28]
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5cd8:	str	r3, [r0, #28]
    }
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5cda:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5cdc:	ldr	r1, [pc, #44]	; (5d0c <FatFile::sync() [clone .part.42]+0x90>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5cde:	lsrs	r2, r3, #16
    5ce0:	strh	r3, [r5, #26]
    5ce2:	ldr	r3, [r1, #0]
    5ce4:	strh	r2, [r5, #20]
    5ce6:	cbz	r3, 5d02 <FatFile::sync() [clone .part.42]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    5ce8:	add.w	r2, sp, #3
    5cec:	add.w	r1, sp, #6
    5cf0:	add	r0, sp, #4
    5cf2:	blx	r3
      setLe16(dir->modifyDate, date);
    5cf4:	ldrh.w	r3, [sp, #4]
    5cf8:	ldrh.w	r2, [sp, #6]
    5cfc:	strh	r3, [r5, #24]
    5cfe:	strh	r3, [r5, #18]
    5d00:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5d02:	ldrb	r3, [r4, #2]
    5d04:	and.w	r3, r3, #127	; 0x7f
    5d08:	strb	r3, [r4, #2]
    5d0a:	b.n	5c8a <FatFile::sync() [clone .part.42]+0xe>
    5d0c:	.word	0x20017a1c

00005d10 <FatFile::close()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5d10:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5d12:	ldrb	r3, [r0, #0]

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5d14:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5d16:	cbnz	r3, 5d22 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5d18:	movs	r3, #0
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    5d1a:	movs	r0, #1
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5d1c:	strb	r3, [r4, #0]
  m_flags = 0;
    5d1e:	strb	r3, [r4, #2]
  return rtn;
}
    5d20:	pop	{r4, pc}
    5d22:	bl	5c7c <FatFile::sync() [clone .part.42]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5d26:	movs	r3, #0
    5d28:	strb	r3, [r4, #0]
  m_flags = 0;
    5d2a:	strb	r3, [r4, #2]
  return rtn;
}
    5d2c:	pop	{r4, pc}
    5d2e:	nop

00005d30 <FatFile::dirEntry(DirFat_t*)>:
  close();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(DirFat_t* dst) {
    5d30:	push	{r4, r5, r6, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5d32:	ldrb	r3, [r0, #0]
  close();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(DirFat_t* dst) {
    5d34:	mov	r5, r0
    5d36:	mov	r4, r1
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5d38:	cbnz	r3, 5d6a <FatFile::dirEntry(DirFat_t*)+0x3a>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    5d3a:	mov	r0, r5
    5d3c:	movs	r1, #0
    5d3e:	bl	5c5c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    5d42:	mov	r3, r0
    5d44:	cbz	r0, 5d72 <FatFile::dirEntry(DirFat_t*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy to caller's struct
  memcpy(dst, dir, sizeof(DirFat_t));
    5d46:	ldr	r6, [r0, #0]
  return true;
    5d48:	movs	r0, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy to caller's struct
  memcpy(dst, dir, sizeof(DirFat_t));
    5d4a:	ldr	r5, [r3, #4]
    5d4c:	ldr	r1, [r3, #8]
    5d4e:	ldr	r2, [r3, #12]
    5d50:	str	r6, [r4, #0]
    5d52:	str	r5, [r4, #4]
    5d54:	str	r1, [r4, #8]
    5d56:	str	r2, [r4, #12]
    5d58:	ldr	r6, [r3, #16]
    5d5a:	ldr	r5, [r3, #20]
    5d5c:	ldr	r1, [r3, #24]
    5d5e:	ldr	r2, [r3, #28]
    5d60:	str	r6, [r4, #16]
    5d62:	str	r5, [r4, #20]
    5d64:	str	r1, [r4, #24]
    5d66:	str	r2, [r4, #28]
  return true;

 fail:
  return false;
}
    5d68:	pop	{r4, r5, r6, pc}
    5d6a:	bl	5c7c <FatFile::sync() [clone .part.42]>
}
//------------------------------------------------------------------------------
bool FatFile::dirEntry(DirFat_t* dst) {
  DirFat_t* dir;
  // Make sure fields on device are correct.
  if (!sync()) {
    5d6e:	cmp	r0, #0
    5d70:	bne.n	5d3a <FatFile::dirEntry(DirFat_t*)+0xa>
  // copy to caller's struct
  memcpy(dst, dir, sizeof(DirFat_t));
  return true;

 fail:
  return false;
    5d72:	movs	r0, #0
    5d74:	pop	{r4, r5, r6, pc}
    5d76:	nop

00005d78 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    5d78:	push	{r4, r5, lr}
    5d7a:	sub	sp, #36	; 0x24
    5d7c:	mov	r5, r1
    5d7e:	mov	r4, r2
  DirFat_t dir;
  if (!dirEntry(&dir)) {
    5d80:	mov	r1, sp
    5d82:	bl	5d30 <FatFile::dirEntry(DirFat_t*)>
    5d86:	cbz	r0, 5d94 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(dir.createDate);
    5d88:	ldrh.w	r2, [sp, #16]
  *ptime = getLe16(dir.createTime);
    5d8c:	ldrh.w	r3, [sp, #14]
  DirFat_t dir;
  if (!dirEntry(&dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(dir.createDate);
    5d90:	strh	r2, [r5, #0]
  *ptime = getLe16(dir.createTime);
    5d92:	strh	r3, [r4, #0]
  return true;

 fail:
  return false;
}
    5d94:	add	sp, #36	; 0x24
    5d96:	pop	{r4, r5, pc}

00005d98 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5d98:	push	{r4, r5, lr}
    5d9a:	sub	sp, #36	; 0x24
    5d9c:	mov	r5, r1
    5d9e:	mov	r4, r2
  DirFat_t dir;
  if (!dirEntry(&dir)) {
    5da0:	mov	r1, sp
    5da2:	bl	5d30 <FatFile::dirEntry(DirFat_t*)>
    5da6:	cbz	r0, 5db4 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(dir.modifyDate);
    5da8:	ldrh.w	r2, [sp, #24]
  *ptime = getLe16(dir.modifyTime);
    5dac:	ldrh.w	r3, [sp, #22]
  DirFat_t dir;
  if (!dirEntry(&dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(dir.modifyDate);
    5db0:	strh	r2, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    5db2:	strh	r3, [r4, #0]
  return true;

 fail:
  return false;
}
    5db4:	add	sp, #36	; 0x24
    5db6:	pop	{r4, r5, pc}

00005db8 <FatFile::mkdir(FatFile*, FatLfn_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    5db8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  uint8_t* pc;

  if (!parent->isDir()) {
    5dbc:	ldrb	r4, [r1, #0]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    5dbe:	sub	sp, #32
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  uint8_t* pc;

  if (!parent->isDir()) {
    5dc0:	tst.w	r4, #112	; 0x70
    5dc4:	bne.n	5dce <FatFile::mkdir(FatFile*, FatLfn_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

 fail:
  return false;
}
    5dc6:	movs	r0, #0
    5dc8:	add	sp, #32
    5dca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5dce:	movw	r3, #2562	; 0xa02
    5dd2:	mov	r5, r0
    5dd4:	mov	r4, r1
    5dd6:	bl	7474 <FatFile::open(FatFile*, FatLfn_t*, int)>
    5dda:	cmp	r0, #0
    5ddc:	beq.n	5dc6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    5dde:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    5de0:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    5de2:	mov	r0, r5
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    5de4:	strb	r2, [r5, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    5de6:	strb	r3, [r5, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    5de8:	bl	5be0 <FatFile::addDirCluster()>
    5dec:	cmp	r0, #0
    5dee:	beq.n	5dc6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    5df0:	ldr	r2, [r5, #16]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    5df2:	ldrb	r3, [r5, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    5df4:	str	r2, [r5, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    5df6:	cmp	r3, #0
    5df8:	bne.n	5efa <FatFile::mkdir(FatFile*, FatLfn_t*)+0x142>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    5dfa:	movs	r1, #1
    5dfc:	mov	r0, r5
    5dfe:	bl	5c5c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    5e02:	mov	r7, r0
    5e04:	cmp	r0, #0
    5e06:	beq.n	5dc6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    5e08:	movs	r3, #16

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    5e0a:	ldr	r0, [r0, #0]
    5e0c:	ldr	r1, [r7, #4]
    5e0e:	mov	lr, sp
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    5e10:	strb	r3, [r7, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
    5e12:	mov.w	ip, #46	; 0x2e
  }
  // change directory entry attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    5e16:	ldr	r2, [r7, #8]
  dot.name[0] = '.';
    5e18:	add	r6, sp, #32
  }
  // change directory entry attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    5e1a:	ldr	r3, [r7, #12]
    5e1c:	ldrh.w	r8, [r7, #20]
    5e20:	stmia.w	lr!, {r0, r1, r2, r3}
    5e24:	ldr	r2, [r7, #24]
    5e26:	ldr	r3, [r7, #28]
    5e28:	ldr	r0, [r7, #16]
    5e2a:	ldr	r1, [r7, #20]
  dot.name[0] = '.';
    5e2c:	strb.w	ip, [r6, #-32]!
    5e30:	add.w	ip, sp, #10
  }
  // change directory entry attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    5e34:	ldrh	r7, [r7, #26]
    5e36:	stmia.w	lr!, {r0, r1, r2, r3}
    5e3a:	mov	r3, r6
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    5e3c:	movs	r2, #32
    5e3e:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    5e42:	cmp	r3, ip
    5e44:	bne.n	5e3e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x86>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    5e46:	ldr	r0, [r5, #8]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    5e48:	movs	r2, #1
    5e4a:	ldr	r3, [r5, #32]
    5e4c:	ldrb.w	lr, [r0, #6]
    5e50:	adds	r0, #40	; 0x28
    5e52:	subs	r3, #2
    5e54:	ldr.w	r1, [r0, #-20]
    5e58:	lsl.w	r3, r3, lr
    5e5c:	add	r1, r3
    5e5e:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
  pc = m_vol->dataCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
  dir = reinterpret_cast<DirFat_t*>(pc);
  if (!dir) {
    5e62:	mov	lr, r0
    5e64:	cmp	r0, #0
    5e66:	beq.n	5dc6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&dir[0], &dot, sizeof(dot));
    5e68:	strh.w	r8, [sp, #20]
  // make entry for '..'
  dot.name[1] = '.';
    5e6c:	mov.w	r8, #46	; 0x2e
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&dir[0], &dot, sizeof(dot));
    5e70:	strh.w	r7, [sp, #26]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&dir[1], &dot, sizeof(dot));
    5e74:	mov	r7, r6
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&dir[0], &dot, sizeof(dot));
    5e76:	ldmia	r6!, {r0, r1, r2, r3}
    5e78:	str.w	r0, [lr]
    5e7c:	str.w	r1, [lr, #4]
    5e80:	str.w	r2, [lr, #8]
    5e84:	str.w	r3, [lr, #12]
  // make entry for '..'
  dot.name[1] = '.';
    5e88:	strb.w	r8, [sp, #1]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&dir[0], &dot, sizeof(dot));
    5e8c:	ldmia	r6!, {r0, r1, r2, r3}
    5e8e:	str.w	r0, [lr, #16]
    5e92:	str.w	r1, [lr, #20]
    5e96:	str.w	r2, [lr, #24]
    5e9a:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5e9e:	ldr	r3, [r4, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&dir[1], &dot, sizeof(dot));
    5ea0:	lsrs	r2, r3, #16
    5ea2:	strh.w	r3, [sp, #26]
    5ea6:	strh.w	r2, [sp, #20]
    5eaa:	ldmia	r7!, {r0, r1, r2, r3}
    5eac:	str.w	r0, [lr, #32]
    5eb0:	str.w	r1, [lr, #36]	; 0x24
    5eb4:	str.w	r2, [lr, #40]	; 0x28
    5eb8:	str.w	r3, [lr, #44]	; 0x2c
    5ebc:	ldmia	r7!, {r0, r1, r2, r3}
    5ebe:	str.w	r0, [lr, #48]	; 0x30
    5ec2:	str.w	r1, [lr, #52]	; 0x34
    5ec6:	str.w	r2, [lr, #56]	; 0x38
    5eca:	str.w	r3, [lr, #60]	; 0x3c
  // write first sector
  return m_vol->cacheSync();
    5ece:	ldr	r4, [r5, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5ed0:	add.w	r0, r4, #40	; 0x28
    5ed4:	bl	31c0 <FsCache::sync()>
    5ed8:	cmp	r0, #0
    5eda:	beq.w	5dc6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    5ede:	add.w	r0, r4, #568	; 0x238
    5ee2:	bl	31c0 <FsCache::sync()>
    5ee6:	cmp	r0, #0
    5ee8:	beq.w	5dc6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    5eec:	ldr	r0, [r4, #0]
  }
  bool cacheSafeWrite(uint32_t sector, const uint8_t* dst, size_t count) {
    return m_cache.cacheSafeWrite(sector, dst, count);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5eee:	ldr	r3, [r0, #0]
    5ef0:	ldr	r3, [r3, #32]

 fail:
  return false;
}
    5ef2:	add	sp, #32
    5ef4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5ef8:	bx	r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5efa:	ldr	r3, [r5, #20]
    5efc:	cbz	r3, 5f0c <FatFile::mkdir(FatFile*, FatLfn_t*)+0x154>
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5efe:	ldrb	r3, [r5, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    5f00:	movs	r2, #0
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5f02:	bic.w	r3, r3, #32
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    5f06:	str	r2, [r5, #16]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    5f08:	str	r2, [r5, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5f0a:	strb	r3, [r5, #2]
    5f0c:	mov	r0, r5
    5f0e:	bl	5c7c <FatFile::sync() [clone .part.42]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    5f12:	cmp	r0, #0
    5f14:	beq.w	5dc6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    5f18:	b.n	5dfa <FatFile::mkdir(FatFile*, FatLfn_t*)+0x42>
    5f1a:	nop

00005f1c <FatFile::mkdir(FatFile*, char const*, bool)>:
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5f1c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f20:	mov	r6, r0
    5f22:	sub	sp, #80	; 0x50
    5f24:	movs	r0, #0
    5f26:	mov	r4, r1
  FatName_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    5f28:	ldrb	r1, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5f2a:	str	r2, [sp, #4]
    5f2c:	strh.w	r0, [sp, #20]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    5f30:	strb.w	r0, [sp, #44]	; 0x2c
    5f34:	strb.w	r0, [sp, #45]	; 0x2d
    5f38:	strb.w	r0, [sp, #46]	; 0x2e
  FatName_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    5f3c:	cbnz	r1, 5f48 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
    5f3e:	mov	r8, r3
    5f40:	ldrb	r3, [r4, #0]
    5f42:	tst.w	r3, #112	; 0x70
    5f46:	bne.n	5f50 <FatFile::mkdir(FatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

 fail:
  return false;
    5f48:	movs	r0, #0
}
    5f4a:	add	sp, #80	; 0x50
    5f4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5f50:	ldrb	r3, [r2, #0]
    5f52:	mov	r1, r2
    5f54:	cmp	r3, #47	; 0x2f
    5f56:	beq.n	5fb6 <FatFile::mkdir(FatFile*, char const*, bool)+0x9a>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    5f58:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5f5a:	add	r3, sp, #4
    5f5c:	add	r2, sp, #8
    5f5e:	mov	r0, r6
    5f60:	bl	7718 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    5f64:	add	r2, sp, #8
    5f66:	mov	r1, r4
    5f68:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5f6a:	cmp	r0, #0
    5f6c:	beq.n	5f48 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    5f6e:	ldr	r5, [sp, #4]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    5f70:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    5f72:	ldrb	r5, [r5, #0]
    5f74:	cmp	r5, #0
    5f76:	beq.n	5fda <FatFile::mkdir(FatFile*, char const*, bool)+0xbe>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    5f78:	bl	7474 <FatFile::open(FatFile*, FatLfn_t*, int)>
    5f7c:	cbnz	r0, 5f92 <FatFile::mkdir(FatFile*, char const*, bool)+0x76>
      if (!pFlag || !mkdir(parent, &fname)) {
    5f7e:	cmp.w	r8, #0
    5f82:	beq.n	5f48 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
    5f84:	mov	r1, r4
    5f86:	add	r2, sp, #8
    5f88:	mov	r0, r6
    5f8a:	bl	5db8 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    5f8e:	cmp	r0, #0
    5f90:	beq.n	5f48 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    5f92:	mov	r5, r6
    5f94:	add	r4, sp, #44	; 0x2c
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5f96:	ldrb.w	lr, [r6]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    5f9a:	ldmia	r5!, {r0, r1, r2, r3}
    5f9c:	stmia	r4!, {r0, r1, r2, r3}
    5f9e:	ldmia	r5!, {r0, r1, r2, r3}
    5fa0:	ldr	r5, [r5, #0]
    5fa2:	stmia	r4!, {r0, r1, r2, r3}
    5fa4:	str	r5, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5fa6:	cmp.w	lr, #0
    5faa:	bne.n	5fd2 <FatFile::mkdir(FatFile*, char const*, bool)+0xb6>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5fac:	strb	r7, [r6, #0]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    5fae:	add	r4, sp, #44	; 0x2c
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    5fb0:	strb	r7, [r6, #2]
    5fb2:	ldr	r1, [sp, #4]
    5fb4:	b.n	5f5a <FatFile::mkdir(FatFile*, char const*, bool)+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5fb6:	adds	r1, #1
    5fb8:	str	r1, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5fba:	ldrb	r3, [r1, #0]
    5fbc:	cmp	r3, #47	; 0x2f
    5fbe:	beq.n	5fb6 <FatFile::mkdir(FatFile*, char const*, bool)+0x9a>
    5fc0:	ldr	r1, [r4, #8]
    5fc2:	add	r0, sp, #44	; 0x2c
    5fc4:	bl	5b74 <FatFile::openRoot(FatVolume*) [clone .part.38]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    5fc8:	cmp	r0, #0
    5fca:	beq.n	5f48 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    5fcc:	add	r4, sp, #44	; 0x2c
    5fce:	ldr	r1, [sp, #4]
    5fd0:	b.n	5f58 <FatFile::mkdir(FatFile*, char const*, bool)+0x3c>
    5fd2:	mov	r0, r6
    5fd4:	bl	5c7c <FatFile::sync() [clone .part.42]>
    5fd8:	b.n	5fac <FatFile::mkdir(FatFile*, char const*, bool)+0x90>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    5fda:	add	r2, sp, #8
    5fdc:	mov	r1, r4
    5fde:	mov	r0, r6
    5fe0:	bl	5db8 <FatFile::mkdir(FatFile*, FatLfn_t*)>

 fail:
  return false;
}
    5fe4:	add	sp, #80	; 0x50
    5fe6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fea:	nop

00005fec <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5fec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ff0:	mov	r6, r0
    5ff2:	sub	sp, #80	; 0x50
    5ff4:	movs	r0, #0
    5ff6:	mov	r5, r1
  FatFile tmpDir;
  FatName_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5ff8:	ldrb	r1, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5ffa:	str	r2, [sp, #4]
    5ffc:	strb.w	r0, [sp, #8]
    6000:	strb.w	r0, [sp, #9]
    6004:	strb.w	r0, [sp, #10]
    6008:	strh.w	r0, [sp, #56]	; 0x38
  FatFile tmpDir;
  FatName_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    600c:	cbnz	r1, 6018 <FatFile::open(FatFile*, char const*, int)+0x2c>
    600e:	mov	r8, r3
    6010:	ldrb	r3, [r5, #0]
    6012:	tst.w	r3, #112	; 0x70
    6016:	bne.n	6020 <FatFile::open(FatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    6018:	movs	r0, #0
}
    601a:	add	sp, #80	; 0x50
    601c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    6020:	ldrb	r3, [r2, #0]
    6022:	mov	r1, r2
    6024:	cmp	r3, #47	; 0x2f
    6026:	beq.n	607e <FatFile::open(FatFile*, char const*, int)+0x92>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    6028:	movs	r7, #0
    602a:	b.n	6032 <FatFile::open(FatFile*, char const*, int)+0x46>
    602c:	ldr	r1, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    602e:	strb	r7, [r6, #0]
  m_flags = 0;
    6030:	strb	r7, [r6, #2]
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    6032:	add	r3, sp, #4
    6034:	add	r2, sp, #44	; 0x2c
    6036:	mov	r0, r6
    6038:	bl	7718 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    603c:	add	r2, sp, #44	; 0x2c
    603e:	mov	r1, r5
    6040:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    6042:	cmp	r0, #0
    6044:	beq.n	6018 <FatFile::open(FatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    6046:	ldr	r4, [sp, #4]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    6048:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    604a:	ldrb	r4, [r4, #0]
    604c:	cbz	r4, 609c <FatFile::open(FatFile*, char const*, int)+0xb0>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    604e:	bl	7474 <FatFile::open(FatFile*, FatLfn_t*, int)>
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    6052:	mov	r5, r6
    6054:	add	r4, sp, #8
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    6056:	cmp	r0, #0
    6058:	beq.n	6018 <FatFile::open(FatFile*, char const*, int)+0x2c>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    605a:	ldrb.w	lr, [r6]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    605e:	ldmia	r5!, {r0, r1, r2, r3}
    6060:	stmia	r4!, {r0, r1, r2, r3}
    6062:	ldmia	r5!, {r0, r1, r2, r3}
    6064:	ldr.w	ip, [r5]
    dirFile = &tmpDir;
    6068:	add	r5, sp, #8
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    606a:	stmia	r4!, {r0, r1, r2, r3}
    606c:	str.w	ip, [r4]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6070:	cmp.w	lr, #0
    6074:	beq.n	602c <FatFile::open(FatFile*, char const*, int)+0x40>
    6076:	mov	r0, r6
    6078:	bl	5c7c <FatFile::sync() [clone .part.42]>
    607c:	b.n	602c <FatFile::open(FatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    607e:	adds	r1, #1
    6080:	str	r1, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    6082:	ldrb	r3, [r1, #0]
    6084:	cmp	r3, #47	; 0x2f
    6086:	beq.n	607e <FatFile::open(FatFile*, char const*, int)+0x92>
      path++;
    }
    if (*path == 0) {
    6088:	cbz	r3, 60ae <FatFile::open(FatFile*, char const*, int)+0xc2>
    608a:	ldr	r1, [r5, #8]
    608c:	add	r0, sp, #8
    608e:	bl	5b74 <FatFile::openRoot(FatVolume*) [clone .part.38]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    6092:	cmp	r0, #0
    6094:	beq.n	6018 <FatFile::open(FatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    6096:	add	r5, sp, #8
    6098:	ldr	r1, [sp, #4]
    609a:	b.n	6028 <FatFile::open(FatFile*, char const*, int)+0x3c>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    609c:	mov	r3, r8
    609e:	add	r2, sp, #44	; 0x2c
    60a0:	mov	r1, r5
    60a2:	mov	r0, r6
    60a4:	bl	7474 <FatFile::open(FatFile*, FatLfn_t*, int)>

 fail:
  return false;
}
    60a8:	add	sp, #80	; 0x50
    60aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    60ae:	ldr	r1, [r5, #8]
    60b0:	mov	r0, r6
    60b2:	bl	5b74 <FatFile::openRoot(FatVolume*) [clone .part.38]>
    60b6:	b.n	601a <FatFile::open(FatFile*, char const*, int)+0x2e>

000060b8 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    60b8:	cbz	r1, 60c2 <FatFile::open(FatVolume*, char const*, int)+0xa>
    60ba:	add.w	r1, r1, #1096	; 0x448
    60be:	b.w	5fec <FatFile::open(FatFile*, char const*, int)>
}
    60c2:	mov	r0, r1
    60c4:	bx	lr
    60c6:	nop

000060c8 <FatFile::openCluster(FatFile*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    60c8:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    60ca:	ldr	r3, [r1, #12]
    60cc:	cbnz	r3, 60e0 <FatFile::openCluster(FatFile*)+0x18>
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    60ce:	ldrb	r2, [r0, #0]
    60d0:	cbz	r2, 60d6 <FatFile::openCluster(FatFile*)+0xe>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    60d2:	mov	r0, r3
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    60d4:	pop	{r3, r4, r5, pc}
    60d6:	ldr	r1, [r1, #8]
    60d8:	ldmia.w	sp!, {r3, r4, r5, lr}
    60dc:	b.w	5b74 <FatFile::openRoot(FatVolume*) [clone .part.38]>
    60e0:	mov	r5, r1
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    60e2:	movs	r2, #36	; 0x24
    60e4:	movs	r1, #0
    60e6:	mov	r4, r0
    60e8:	bl	c86c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
    60ec:	movs	r3, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    60ee:	movs	r2, #16
  m_flags = FILE_FLAG_READ;
    60f0:	strb	r3, [r4, #2]
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
    60f2:	mov	r0, r3
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    60f4:	strb	r2, [r4, #0]
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    60f6:	ldr	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
    60f8:	ldr	r3, [r5, #12]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    60fa:	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    60fc:	str	r3, [r4, #32]
  return true;
    60fe:	pop	{r3, r4, r5, pc}

00006100 <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    6100:	ldrb	r3, [r0, #0]
    6102:	cbz	r3, 6108 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
}
    6104:	movs	r0, #0
    6106:	bx	lr
    6108:	b.w	5b74 <FatFile::openRoot(FatVolume*) [clone .part.38]>

0000610c <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    610c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    6110:	ldrb	r3, [r0, #2]

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    6112:	sub	sp, #12
    6114:	mov	r5, r0
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    6116:	lsls	r7, r3, #31
    6118:	bpl.w	623c <FatFile::read(void*, unsigned int)+0x130>
    611c:	mov	r7, r1
    611e:	ldrb	r1, [r0, #0]
    6120:	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    6122:	lsls	r6, r1, #28
    6124:	bmi.w	624e <FatFile::read(void*, unsigned int)+0x142>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    6128:	lsls	r4, r1, #26
    612a:	bpl.n	613e <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 =
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    612c:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    612e:	ldr	r3, [r0, #20]
    6130:	ldrh	r2, [r2, #10]
    6132:	rsb	r3, r3, r2, lsl #5
    6136:	uxth	r3, r3
    6138:	cmp	r9, r3
    613a:	it	cs
    613c:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    613e:	cmp.w	r9, #0
    6142:	beq.w	629a <FatFile::read(void*, unsigned int)+0x18e>
    6146:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    if (isRootFixed()) {
    6148:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    614a:	mov	r6, r9
    614c:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6150:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6154:	ldr	r2, [r5, #8]
    6156:	ubfx	r4, r3, #0, #9
    if (isRootFixed()) {
    615a:	bpl.n	61de <FatFile::read(void*, unsigned int)+0xd2>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    615c:	ldr	r1, [r2, #32]
    615e:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    6162:	cmp	r4, #0
    6164:	bne.n	6210 <FatFile::read(void*, unsigned int)+0x104>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    6166:	cmp.w	r6, #512	; 0x200
    616a:	bcc.n	6210 <FatFile::read(void*, unsigned int)+0x104>
    616c:	ldr	r3, [r2, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    616e:	cmp	r1, r3
    6170:	beq.n	6210 <FatFile::read(void*, unsigned int)+0x104>
        goto fail;
      }
      uint8_t* src = pc + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    6172:	cmp.w	r6, #1024	; 0x400
    6176:	bcc.n	6260 <FatFile::read(void*, unsigned int)+0x154>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    6178:	ldrb	r0, [r5, #0]
      }
      uint8_t* src = pc + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    617a:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    617e:	lsls	r0, r0, #26
    6180:	bmi.n	618e <FatFile::read(void*, unsigned int)+0x82>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    6182:	ldrb	r0, [r2, #4]
    6184:	rsb	r0, r8, r0
    6188:	cmp	fp, r0
    618a:	it	cs
    618c:	movcs	fp, r0
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    618e:	cmp	r1, r3
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    6190:	mov.w	r4, fp, lsl #9
    6194:	bhi.n	61b2 <FatFile::read(void*, unsigned int)+0xa6>
    6196:	add.w	r0, r1, fp
    619a:	cmp	r3, r0
    619c:	bcs.n	61b2 <FatFile::read(void*, unsigned int)+0xa6>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    619e:	add.w	r0, r2, #40	; 0x28
    61a2:	str	r1, [sp, #4]
    61a4:	str	r2, [sp, #0]
    61a6:	bl	31c0 <FsCache::sync()>
    61aa:	ldr	r2, [sp, #0]
    61ac:	ldr	r1, [sp, #4]
    61ae:	cmp	r0, #0
    61b0:	beq.n	623c <FatFile::read(void*, unsigned int)+0x130>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    61b2:	ldr	r0, [r2, #44]	; 0x2c
    61b4:	mov	r3, fp
    61b6:	mov	r2, r7
    61b8:	ldr.w	lr, [r0]
    61bc:	ldr.w	fp, [lr, #20]
    61c0:	blx	fp
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    61c2:	cmp	r0, #0
    61c4:	beq.n	623c <FatFile::read(void*, unsigned int)+0x130>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    61c6:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    61c8:	subs	r6, r6, r4
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    61ca:	add	r7, r4
    m_curPosition += n;
    61cc:	add	r3, r4
    61ce:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    61d0:	beq.n	629a <FatFile::read(void*, unsigned int)+0x18e>
    61d2:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    61d4:	ubfx	r4, r3, #0, #9
    61d8:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    61da:	lsls	r0, r1, #26
    61dc:	bmi.n	615c <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    61de:	ldrb.w	r8, [r2, #5]
    61e2:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    61e6:	cmp	r4, #0
    61e8:	bne.n	625c <FatFile::read(void*, unsigned int)+0x150>
    61ea:	cmp.w	r8, #0
    61ee:	bne.n	625c <FatFile::read(void*, unsigned int)+0x150>
        // start of new cluster
        if (m_curPosition == 0) {
    61f0:	cmp	r3, #0
    61f2:	bne.n	6274 <FatFile::read(void*, unsigned int)+0x168>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    61f4:	lsls	r0, r1, #25
    61f6:	ite	mi
    61f8:	ldrmi	r3, [r2, #32]
    61fa:	ldrpl	r3, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    61fc:	str	r3, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    61fe:	ldrb	r1, [r2, #6]
    6200:	subs	r3, #2
    6202:	ldr	r0, [r2, #20]
    6204:	lsls	r3, r1
    6206:	add.w	r1, r8, r0
    620a:	add	r1, r3
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    620c:	cmp	r4, #0
    620e:	beq.n	6166 <FatFile::read(void*, unsigned int)+0x5a>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    6210:	add.w	r0, r2, #40	; 0x28
    6214:	movs	r2, #0
    6216:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
      if (!pc) {
    621a:	cbz	r0, 623c <FatFile::read(void*, unsigned int)+0x130>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    621c:	rsb	r3, r4, #512	; 0x200
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc + offset;
      memcpy(dst, src, n);
    6220:	adds	r1, r0, r4
    6222:	mov	r0, r7
    6224:	cmp	r3, r6
    6226:	it	cs
    6228:	movcs	r3, r6
    622a:	mov	r2, r3
    622c:	mov	r4, r3
    622e:	bl	9920 <memcpy>
    6232:	b.n	61c6 <FatFile::read(void*, unsigned int)+0xba>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    6234:	ldrb	r3, [r5, #0]
    6236:	tst.w	r3, #112	; 0x70
    623a:	bne.n	629c <FatFile::read(void*, unsigned int)+0x190>
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    623c:	ldrb	r3, [r5, #1]
  return -1;
    623e:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    6242:	orr.w	r3, r3, #2
    6246:	strb	r3, [r5, #1]
  return -1;
}
    6248:	add	sp, #12
    624a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    624e:	ldr	r3, [r0, #28]
    6250:	ldr	r2, [r0, #20]
    6252:	subs	r3, r3, r2
    6254:	cmp	r9, r3
    6256:	it	cs
    6258:	movcs	r9, r3
    625a:	b.n	613e <FatFile::read(void*, unsigned int)+0x32>
    625c:	ldr	r3, [r5, #16]
    625e:	b.n	61fe <FatFile::read(void*, unsigned int)+0xf2>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    6260:	ldr	r0, [r2, #44]	; 0x2c
    6262:	mov	r2, r7
    6264:	ldr	r3, [r0, #0]
    6266:	ldr	r3, [r3, #16]
    6268:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    626a:	cmp	r0, #0
    626c:	beq.n	623c <FatFile::read(void*, unsigned int)+0x130>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    626e:	mov.w	r4, #512	; 0x200
    6272:	b.n	61c6 <FatFile::read(void*, unsigned int)+0xba>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    6274:	lsls	r1, r1, #28
    6276:	bpl.n	6284 <FatFile::read(void*, unsigned int)+0x178>
    6278:	ldrb	r3, [r5, #2]
    627a:	lsls	r3, r3, #25
    627c:	bpl.n	6284 <FatFile::read(void*, unsigned int)+0x178>
          m_curCluster++;
    627e:	ldr	r3, [r5, #16]
    6280:	adds	r3, #1
    6282:	b.n	61fc <FatFile::read(void*, unsigned int)+0xf0>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6284:	mov	r0, r2
    6286:	ldr	r1, [r5, #16]
    6288:	mov	r2, sl
    628a:	bl	6c48 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    628e:	cmp	r0, #0
    6290:	blt.n	623c <FatFile::read(void*, unsigned int)+0x130>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    6292:	beq.n	6234 <FatFile::read(void*, unsigned int)+0x128>
    6294:	ldr	r2, [r5, #8]
    6296:	ldr	r3, [r5, #16]
    6298:	b.n	61fe <FatFile::read(void*, unsigned int)+0xf2>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    629a:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    629c:	rsb	r0, r6, r9

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    62a0:	add	sp, #12
    62a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    62a6:	nop

000062a8 <FatFile::peek()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    62a8:	push	{r4, r5, r6, lr}
    62aa:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    62ac:	movs	r2, #1
    62ae:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    62b0:	ldr	r6, [r0, #20]
    62b2:	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    62b6:	ldr	r5, [r0, #16]
    62b8:	bl	610c <FatFile::read(void*, unsigned int)>
    62bc:	cmp	r0, #1
  int c = read();
  m_curPosition = curPosition;
    62be:	str	r6, [r4, #20]
    62c0:	ite	eq
    62c2:	ldrbeq.w	r0, [sp, #7]
    62c6:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    62ca:	str	r5, [r4, #16]
  return c;
}
    62cc:	add	sp, #8
    62ce:	pop	{r4, r5, r6, pc}

000062d0 <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    62d0:	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    62d2:	push	{r4, r5, lr}
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    62d4:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    62d8:	sub	sp, #12
    62da:	mov	r4, r0
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    62dc:	clz	r2, r5
    62e0:	lsrs	r2, r2, #5
    62e2:	cmp	r2, r1
    62e4:	bcs.n	62f6 <FatFile::readDirCache(bool)+0x26>
      }
      goto fail;
    }
    m_curPosition += FS_DIR_SIZE - 1;
  } else {
    m_curPosition += FS_DIR_SIZE;
    62e6:	adds	r3, #32
    62e8:	str	r3, [r0, #20]
  static const uint8_t CACHE_RESERVE_FOR_WRITE =
    CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  //----------------------------------------------------------------------------
  /** \return Cache buffer address. */
  uint8_t* cacheBuffer() {
    return m_buffer;
    62ea:	ldr	r0, [r4, #8]
    62ec:	adds	r0, #56	; 0x38
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    62ee:	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
    62f2:	add	sp, #12
    62f4:	pop	{r4, r5, pc}
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    62f6:	movs	r2, #1
    62f8:	add.w	r1, sp, #7
    62fc:	bl	610c <FatFile::read(void*, unsigned int)>
    6300:	sxtb	r0, r0
    if  (n != 1) {
    6302:	cmp	r0, #1
    6304:	bne.n	630e <FatFile::readDirCache(bool)+0x3e>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += FS_DIR_SIZE - 1;
    6306:	ldr	r3, [r4, #20]
    6308:	adds	r3, #31
    630a:	str	r3, [r4, #20]
    630c:	b.n	62ea <FatFile::readDirCache(bool)+0x1a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    630e:	movs	r0, #0
    6310:	b.n	62f2 <FatFile::readDirCache(bool)+0x22>
    6312:	nop

00006314 <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    6314:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile oldFile;
  uint8_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    6318:	ldrb	r5, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    631a:	sub	sp, #108	; 0x6c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    631c:	movs	r4, #0
  FatFile oldFile;
  uint8_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    631e:	tst.w	r5, #24
    6322:	strb.w	r4, [sp, #32]
    6326:	strb.w	r4, [sp, #33]	; 0x21
    632a:	strb.w	r4, [sp, #34]	; 0x22
    632e:	strb.w	r4, [sp, #68]	; 0x44
    6332:	strb.w	r4, [sp, #69]	; 0x45
    6336:	strb.w	r4, [sp, #70]	; 0x46
    633a:	beq.n	6346 <FatFile::rename(FatFile*, char const*)+0x32>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    633c:	ldr	r6, [r0, #8]
    633e:	mov	r3, r0
    6340:	ldr	r5, [r1, #8]
    6342:	cmp	r6, r5
    6344:	beq.n	634e <FatFile::rename(FatFile*, char const*)+0x3a>
    goto fail;
  }
  return m_vol->cacheSync();

 fail:
  return false;
    6346:	movs	r0, #0
}
    6348:	add	sp, #108	; 0x6c
    634a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    634e:	mov	r5, r3
    6350:	mov	r8, r2
    6352:	mov	r6, r1
    6354:	bl	5c7c <FatFile::sync() [clone .part.42]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    6358:	mov	lr, r5
    635a:	add	r7, sp, #68	; 0x44
    635c:	ldmia.w	lr!, {r0, r1, r2, r3}
    6360:	stmia	r7!, {r0, r1, r2, r3}
    6362:	ldmia.w	lr!, {r0, r1, r2, r3}
    6366:	ldr.w	lr, [lr]
    636a:	stmia	r7!, {r0, r1, r2, r3}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    636c:	mov	r1, r4
    636e:	mov	r0, r5
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    6370:	str.w	lr, [r7]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    6374:	bl	5c5c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6378:	mov	lr, r0
    637a:	cmp	r0, #0
    637c:	beq.n	6346 <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    637e:	ldr	r0, [r0, #0]
    6380:	mov	r7, sp
    6382:	ldr.w	r1, [lr, #4]
    6386:	ldr.w	r2, [lr, #8]
    638a:	ldr.w	r3, [lr, #12]
  // make directory entry for new path
  if (isFile()) {
    638e:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    6392:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    6394:	and.w	ip, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    6398:	ldr.w	r0, [lr, #16]
    639c:	ldr.w	r1, [lr, #20]
    63a0:	ldr.w	r2, [lr, #24]
  // make directory entry for new path
  if (isFile()) {
    63a4:	and.w	r9, ip, #255	; 0xff
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    63a8:	ldr.w	r3, [lr, #28]
    63ac:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    63ae:	cmp.w	ip, #0
    63b2:	beq.w	64e2 <FatFile::rename(FatFile*, char const*)+0x1ce>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    63b6:	mov	r2, r8
    63b8:	mov	r1, r6
    63ba:	movw	r3, #2561	; 0xa01
    63be:	add	r0, sp, #32
    63c0:	bl	5fec <FatFile::open(FatFile*, char const*, int)>
    63c4:	cmp	r0, #0
    63c6:	beq.n	6346 <FatFile::rename(FatFile*, char const*)+0x32>
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    63c8:	ldr	r2, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    63ca:	movs	r6, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    63cc:	ldrh.w	r3, [sp, #36]	; 0x24
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    63d0:	movs	r1, #1
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    63d2:	str	r2, [r5, #24]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    63d4:	mov	r0, r5
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    63d6:	strh	r3, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    63d8:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    63dc:	ldr	r3, [sp, #44]	; 0x2c
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
    63de:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    63e0:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    63e2:	strb.w	r6, [sp, #32]
  file.m_flags = 0;
    63e6:	strb.w	r6, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    63ea:	bl	5c5c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    63ee:	cmp	r0, #0
    63f0:	beq.n	6346 <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    63f2:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    63f4:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    63f8:	ldr.w	r7, [r3, #-91]!
  dir->attributes = entry.attributes;
    63fc:	strb	r2, [r0, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    63fe:	ldr.w	lr, [r3, #4]
    6402:	str.w	r7, [r0, #13]
    6406:	ldr	r7, [r3, #8]
    6408:	str.w	lr, [r0, #17]
    640c:	str.w	r7, [r0, #21]
    6410:	ldr.w	lr, [r3, #12]
    6414:	ldrh	r7, [r3, #16]
    6416:	ldrb	r3, [r3, #18]
    6418:	str.w	lr, [r0, #25]
    641c:	strh.w	r7, [r0, #29]
    6420:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;

  // update dot dot if directory
  if (dirCluster) {
    6422:	cmp	r4, #0
    6424:	beq.n	649e <FatFile::rename(FatFile*, char const*)+0x18a>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    6426:	ldr	r7, [r5, #8]
    6428:	subs	r3, r4, #2
    642a:	mov	r2, r6
    642c:	ldrb	r6, [r7, #6]
    642e:	add.w	r0, r7, #40	; 0x28
    6432:	ldr	r1, [r7, #20]
    6434:	lsls	r3, r6
    6436:	add	r1, r3
    6438:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
    pc = m_vol->dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
    dir = reinterpret_cast<DirFat_t*>(pc);
    if (!dir) {
    643c:	cmp	r0, #0
    643e:	beq.n	6346 <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &dir[1], sizeof(entry));
    6440:	mov	r6, r0
    6442:	mov	r7, sp
    6444:	ldr.w	r0, [r6, #32]!
    6448:	ldr	r1, [r6, #4]
    644a:	ldr	r2, [r6, #8]
    644c:	ldr	r3, [r6, #12]
    644e:	stmia	r7!, {r0, r1, r2, r3}
    6450:	ldr	r0, [r6, #16]
    6452:	ldr	r1, [r6, #20]
    6454:	ldr	r2, [r6, #24]
    6456:	ldr	r3, [r6, #28]
    6458:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    645a:	mov	r1, r4
    645c:	ldr	r0, [r5, #8]
    645e:	bl	6dfc <FatPartition::freeChain(unsigned long)>
    6462:	cmp	r0, #0
    6464:	beq.w	6346 <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    6468:	ldr	r1, [r5, #8]
    646a:	movs	r2, #1
    646c:	ldr	r3, [r5, #32]
    646e:	ldrb	r4, [r1, #6]
    6470:	add.w	r0, r1, #40	; 0x28
    6474:	subs	r3, #2
    6476:	ldr	r1, [r1, #20]
    6478:	lsls	r3, r4
    647a:	add	r1, r3
    647c:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
    uint8_t* pc = m_vol->dataCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    dir = reinterpret_cast<DirFat_t*>(pc);
    if (!dir) {
    6480:	mov	r7, r0
    6482:	cmp	r0, #0
    6484:	beq.w	6346 <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&dir[1], &entry, sizeof(entry));
    6488:	mov	r4, sp
    648a:	ldmia	r4!, {r0, r1, r2, r3}
    648c:	str	r0, [r7, #32]
    648e:	str	r1, [r7, #36]	; 0x24
    6490:	str	r2, [r7, #40]	; 0x28
    6492:	str	r3, [r7, #44]	; 0x2c
    6494:	ldmia	r4!, {r0, r1, r2, r3}
    6496:	str	r0, [r7, #48]	; 0x30
    6498:	str	r1, [r7, #52]	; 0x34
    649a:	str	r2, [r7, #56]	; 0x38
    649c:	str	r3, [r7, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    649e:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    64a0:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    64a2:	movs	r3, #8
  if (!oldFile.remove()) {
    64a4:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    64a6:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    64a8:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    64ac:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    64b0:	bl	77fc <FatFile::remove()>
    64b4:	cmp	r0, #0
    64b6:	beq.w	6346 <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    64ba:	ldr	r4, [r5, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    64bc:	add.w	r0, r4, #40	; 0x28
    64c0:	bl	31c0 <FsCache::sync()>
    64c4:	cmp	r0, #0
    64c6:	beq.w	6346 <FatFile::rename(FatFile*, char const*)+0x32>
    64ca:	add.w	r0, r4, #568	; 0x238
    64ce:	bl	31c0 <FsCache::sync()>
    64d2:	cmp	r0, #0
    64d4:	beq.w	6346 <FatFile::rename(FatFile*, char const*)+0x32>
    64d8:	ldr	r0, [r4, #0]
  }
  bool cacheSafeWrite(uint32_t sector, const uint8_t* dst, size_t count) {
    return m_cache.cacheSafeWrite(sector, dst, count);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    64da:	ldr	r3, [r0, #0]
    64dc:	ldr	r3, [r3, #32]
    64de:	blx	r3
    64e0:	b.n	6348 <FatFile::rename(FatFile*, char const*)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    64e2:	mov	r3, r9
    64e4:	mov	r2, r8
    64e6:	mov	r1, r6
    64e8:	add	r0, sp, #32
    64ea:	bl	5f1c <FatFile::mkdir(FatFile*, char const*, bool)>
    64ee:	cmp	r0, #0
    64f0:	beq.w	6346 <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    64f4:	ldr	r4, [sp, #64]	; 0x40
    64f6:	b.n	63c8 <FatFile::rename(FatFile*, char const*)+0xb4>

000064f8 <FatFile::rmdir()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    64f8:	ldrb	r3, [r0, #0]
    64fa:	lsls	r2, r3, #27
    64fc:	bpl.n	6534 <FatFile::rmdir()+0x3c>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    64fe:	ldr	r3, [r0, #20]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    6500:	push	{r4, lr}
    6502:	mov	r4, r0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    6504:	cbz	r3, 6514 <FatFile::rmdir()+0x1c>
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6506:	ldrb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    6508:	movs	r2, #0
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    650a:	bic.w	r3, r3, #32
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    650e:	str	r2, [r0, #16]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    6510:	str	r2, [r0, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6512:	strb	r3, [r0, #2]
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    6514:	movs	r1, #1
    6516:	mov	r0, r4
    6518:	bl	62d0 <FatFile::readDirCache(bool)>
    if (!dir) {
    651c:	cbz	r0, 6538 <FatFile::rmdir()+0x40>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    651e:	ldrb	r3, [r0, #0]
    6520:	cbz	r3, 653e <FatFile::rmdir()+0x46>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6522:	cmp	r3, #229	; 0xe5
    6524:	beq.n	6514 <FatFile::rmdir()+0x1c>
    6526:	cmp	r3, #46	; 0x2e
    6528:	beq.n	6514 <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    652a:	ldrb	r3, [r0, #11]
    652c:	lsls	r3, r3, #28
    652e:	bmi.n	6514 <FatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
}
    6530:	movs	r0, #0
    6532:	pop	{r4, pc}
    6534:	movs	r0, #0
    6536:	bx	lr
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    6538:	ldrb	r3, [r4, #1]
    653a:	cmp	r3, #0
    653c:	bne.n	6530 <FatFile::rmdir()+0x38>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    653e:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    6540:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    6542:	mov	r0, r4
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    6544:	orr.w	r3, r3, #2
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    6548:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    654a:	strb	r3, [r4, #2]
  return remove();

 fail:
  return false;
}
    654c:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    6550:	b.w	77fc <FatFile::remove()>

00006554 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    6554:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6558:	ldrb	r3, [r0, #0]
    655a:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    655c:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    655e:	cbz	r3, 658e <FatFile::seekSet(unsigned long)+0x3a>
    6560:	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    6562:	ldr	r1, [r0, #20]
    6564:	cmp	r1, r5
    6566:	beq.n	65c2 <FatFile::seekSet(unsigned long)+0x6e>
    return true;
  }
  if (pos == 0) {
    6568:	cbnz	r5, 657c <FatFile::seekSet(unsigned long)+0x28>
    656a:	ldrb	r3, [r0, #2]
    // set position to start of file
    m_curCluster = 0;
    656c:	str	r5, [r0, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    656e:	bic.w	r3, r3, #32
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    6572:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;
    6574:	movs	r0, #1
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6576:	strb	r3, [r4, #2]
  return true;
    6578:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    657c:	lsls	r0, r3, #28
    657e:	bmi.n	6596 <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    6580:	lsls	r2, r3, #26
    6582:	bpl.n	659c <FatFile::seekSet(unsigned long)+0x48>
    6584:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    6586:	ldrh	r3, [r3, #10]
    6588:	cmp.w	r5, r3, lsl #5
    658c:	bls.n	65f0 <FatFile::seekSet(unsigned long)+0x9c>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

 fail:
  m_curCluster = tmp;
    658e:	str	r7, [r4, #16]
  return false;
    6590:	movs	r0, #0
    6592:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    6596:	ldr	r2, [r4, #28]
    6598:	cmp	r5, r2
    659a:	bhi.n	658e <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    659c:	ldr.w	lr, [r4, #8]
    65a0:	subs	r6, r5, #1
    65a2:	ldrb	r2, [r4, #2]
    65a4:	ldrb.w	r0, [lr, #6]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    65a8:	tst.w	r2, #64	; 0x40
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    65ac:	add.w	r0, r0, #9
    65b0:	uxtb	r0, r0
    65b2:	lsr.w	r6, r6, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    65b6:	beq.n	65c8 <FatFile::seekSet(unsigned long)+0x74>
    m_curCluster = m_firstCluster + nNew;
    65b8:	ldr	r1, [r4, #32]
    goto done;
    65ba:	mov	r3, r2
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    65bc:	add	r6, r1
    65be:	str	r6, [r4, #16]
    goto done;
    65c0:	b.n	656e <FatFile::seekSet(unsigned long)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    65c2:	movs	r0, #1
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    65c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    65c8:	subs	r2, r1, #1
    65ca:	lsr.w	r0, r2, r0

  if (nNew < nCur || m_curPosition == 0) {
    65ce:	cmp	r6, r0
    65d0:	bcc.n	65f4 <FatFile::seekSet(unsigned long)+0xa0>
    65d2:	cbz	r1, 65f4 <FatFile::seekSet(unsigned long)+0xa0>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    65d4:	subs	r6, r6, r0
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    65d6:	add.w	r8, r4, #16
    65da:	b.n	65ea <FatFile::seekSet(unsigned long)+0x96>
    65dc:	ldr	r1, [r4, #16]
    65de:	subs	r6, #1
    65e0:	ldr	r0, [r4, #8]
    65e2:	bl	6c48 <FatPartition::fatGet(unsigned long, unsigned long*)>
    65e6:	cmp	r0, #0
    65e8:	ble.n	658e <FatFile::seekSet(unsigned long)+0x3a>
    65ea:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    65ec:	cmp	r6, #0
    65ee:	bne.n	65dc <FatFile::seekSet(unsigned long)+0x88>
    65f0:	ldrb	r3, [r4, #2]
    65f2:	b.n	656e <FatFile::seekSet(unsigned long)+0x1a>
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());

  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    65f4:	lsls	r3, r3, #25
    65f6:	ite	mi
    65f8:	ldrmi.w	r3, [lr, #32]
    65fc:	ldrpl	r3, [r4, #32]
    65fe:	str	r3, [r4, #16]
    6600:	b.n	65d6 <FatFile::seekSet(unsigned long)+0x82>
    6602:	nop

00006604 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    6604:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6608:	mov	r5, r1
    660a:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    660c:	movs	r1, #0
    660e:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    6610:	mov	r4, r0
    6612:	mov	r7, r3
    6614:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    6618:	bl	c86c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    661c:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    661e:	and.w	r3, r8, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    6622:	ldr	r1, [r5, #32]
    6624:	add.w	r2, r0, #56	; 0x38
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    6628:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    662a:	str	r1, [r4, #12]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    662c:	add.w	r2, r2, r3, lsl #5
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
    6630:	strh.w	r8, [r4, #4]
    6634:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    6636:	lsls	r5, r1, #28
    6638:	bmi.n	665e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    663a:	and.w	r1, r1, #23
    663e:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    6640:	ldrb	r3, [r2, #11]
    6642:	tst.w	r3, #24
    6646:	bne.n	664e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x4a>
    m_attributes |= FILE_ATTR_FILE;
    6648:	orr.w	r1, r1, #8
    664c:	strb	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    664e:	and.w	r3, r7, #3
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    6652:	strb	r6, [r4, #3]

  switch (oflag & O_ACCMODE) {
    6654:	cmp	r3, #1
    6656:	beq.n	666a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    6658:	cmp	r3, #2
    665a:	beq.n	66b2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    665c:	cbz	r3, 66a8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

 fail:
  m_attributes = FILE_ATTR_CLOSED;
    665e:	movs	r3, #0
    6660:	strb	r3, [r4, #0]
  m_flags = 0;
  return false;
    6662:	mov	r0, r3
  }
  return true;

 fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    6664:	strb	r3, [r4, #2]
  return false;
    6666:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    666a:	movs	r3, #2
    666c:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    666e:	ldrb	r1, [r4, #0]
    6670:	tst.w	r1, #17
    6674:	bne.n	665e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    6676:	sxtb	r1, r3
    6678:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    667c:	and.w	r3, r7, #8
    6680:	orrs	r3, r1
    6682:	uxtb	r3, r3
    6684:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    6686:	ldrh.w	lr, [r2, #20]
    668a:	ldrh	r1, [r2, #26]
    668c:	ldr	r6, [r0, #52]	; 0x34
    668e:	orr.w	r1, r1, lr, lsl #16
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    6692:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    6694:	cbz	r5, 66b8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    6696:	cbnz	r1, 66ce <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6698:	orn	r3, r3, #127	; 0x7f
    669c:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    669e:	lsls	r3, r7, #17
    66a0:	bmi.n	66c0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    66a2:	movs	r0, #1
    66a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    66a8:	ands.w	r5, r7, #1024	; 0x400
    66ac:	bne.n	665e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    66ae:	movs	r1, #1
    66b0:	b.n	667c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    66b2:	movs	r3, #3
    66b4:	strb	r3, [r4, #2]
      break;
    66b6:	b.n	666e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    66b8:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    66ba:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    66bc:	str	r3, [r4, #28]
    66be:	b.n	669e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    66c0:	ldr	r1, [r4, #28]
    66c2:	mov	r0, r4
    66c4:	bl	6554 <FatFile::seekSet(unsigned long)>
    66c8:	cmp	r0, #0
    66ca:	bne.n	66a2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    66cc:	b.n	665e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    66ce:	bl	6dfc <FatPartition::freeChain(unsigned long)>
    66d2:	cmp	r0, #0
    66d4:	beq.n	665e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    66d6:	ldrb	r3, [r4, #2]
    66d8:	b.n	6698 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    66da:	nop

000066dc <FatFile::openNext(FatFile*, int)>:
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    66dc:	ldrb	r3, [r0, #0]
    66de:	cbnz	r3, 66e8 <FatFile::openNext(FatFile*, int)+0xc>
    66e0:	ldrb	r3, [r1, #0]
    66e2:	tst.w	r3, #112	; 0x70
    66e6:	bne.n	66ec <FatFile::openNext(FatFile*, int)+0x10>
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    66e8:	movs	r0, #0
}
    66ea:	bx	lr
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    66ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    66f0:	ldr	r5, [r1, #20]
    66f2:	sub	sp, #12
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    66f4:	ands.w	r6, r5, #31
    66f8:	bne.n	6760 <FatFile::openNext(FatFile*, int)+0x84>
    66fa:	mov	r8, r2
    66fc:	mov	r4, r1
    66fe:	mov	r7, r0
    6700:	mov	r9, r6
    6702:	b.n	6728 <FatFile::openNext(FatFile*, int)+0x4c>
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    6704:	sub.w	r2, r3, #229	; 0xe5
    6708:	clz	r2, r2
    670c:	lsrs	r2, r2, #5
    670e:	cbnz	r2, 673a <FatFile::openNext(FatFile*, int)+0x5e>
    6710:	ldrb.w	lr, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    6714:	and.w	r1, lr, #8
    6718:	and.w	ip, r1, #255	; 0xff
    671c:	cbz	r1, 673e <FatFile::openNext(FatFile*, int)+0x62>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    671e:	cmp.w	lr, #15
    6722:	beq.n	6768 <FatFile::openNext(FatFile*, int)+0x8c>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    6724:	mov	r6, r2
    6726:	ldr	r5, [r4, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/FS_DIR_SIZE;
    DirFat_t* dir = dirFile->readDirCache();
    6728:	movs	r1, #0
    672a:	mov	r0, r4
    672c:	bl	62d0 <FatFile::readDirCache(bool)>
    if (!dir) {
    6730:	cbz	r0, 6760 <FatFile::openNext(FatFile*, int)+0x84>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    6732:	ldrb	r3, [r0, #0]
    6734:	cbz	r3, 6760 <FatFile::openNext(FatFile*, int)+0x84>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    6736:	cmp	r3, #46	; 0x2e
    6738:	bne.n	6704 <FatFile::openNext(FatFile*, int)+0x28>
      lfnOrd = 0;
    673a:	movs	r6, #0
    673c:	b.n	6726 <FatFile::openNext(FatFile*, int)+0x4a>
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    673e:	cbz	r6, 6776 <FatFile::openNext(FatFile*, int)+0x9a>
    6740:	subs	r2, r0, #1
    6742:	adds	r0, #10
    6744:	mov.w	r3, ip, lsl #7
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6748:	ldrb.w	r1, [r2, #1]!
    674c:	orr.w	ip, r3, ip, lsr #1
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    6750:	cmp	r0, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6752:	uxtab	ip, r1, ip
    6756:	uxtb.w	ip, ip
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    675a:	bne.n	6744 <FatFile::openNext(FatFile*, int)+0x68>
    675c:	cmp	ip, r9
    675e:	beq.n	6776 <FatFile::openNext(FatFile*, int)+0x9a>
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    6760:	movs	r0, #0
}
    6762:	add	sp, #12
    6764:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    6768:	lsls	r2, r3, #25
    676a:	bpl.n	6726 <FatFile::openNext(FatFile*, int)+0x4a>
        lfnOrd = ldir->order & 0X1F;
    676c:	and.w	r6, r3, #31
        checksum = ldir->checksum;
    6770:	ldrb.w	r9, [r0, #13]
    6774:	b.n	6726 <FatFile::openNext(FatFile*, int)+0x4a>
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    6776:	str	r6, [sp, #0]
    6778:	mov	r3, r8
    677a:	ubfx	r2, r5, #5, #16
    677e:	mov	r1, r4
    6780:	mov	r0, r7
    6782:	bl	6604 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6786:	b.n	6762 <FatFile::openNext(FatFile*, int)+0x86>

00006788 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6788:	ldrb	r3, [r0, #0]
    678a:	cbz	r3, 6790 <FatFile::sync()+0x8>
    678c:	b.w	5c7c <FatFile::sync() [clone .part.42]>
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    6790:	movs	r0, #1
    6792:	bx	lr

00006794 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    6794:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    6798:	ldrb.w	lr, [r0]
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    679c:	sub	sp, #4
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    679e:	tst.w	lr, #8
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    67a2:	ldrb.w	r9, [sp, #40]	; 0x28
    67a6:	ldrb.w	sl, [sp, #44]	; 0x2c
    67aa:	ldrb.w	fp, [sp, #48]	; 0x30
    67ae:	ldrb.w	r8, [sp, #52]	; 0x34
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    67b2:	beq.n	67be <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
  uint16_t dirTime;
  DirFat_t* dir;

  if (!isFile()
      || year < 1980
      || year > 2107
    67b4:	subw	r2, r2, #1980	; 0x7bc
    67b8:	uxth	r4, r2
    67ba:	cmp	r4, #127	; 0x7f
    67bc:	bls.n	67c6 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x32>
  }
  return m_vol->cacheSync();

 fail:
  return false;
}
    67be:	movs	r0, #0
    67c0:	add	sp, #4
    67c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (!isFile()
      || year < 1980
      || year > 2107
      || month < 1
      || month > 12
    67c6:	subs	r2, r3, #1
    67c8:	cmp	r2, #11
    67ca:	bhi.n	67be <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
      || day < 1
      || day > 31
    67cc:	add.w	r2, r9, #4294967295
    67d0:	cmp	r2, #30
    67d2:	bhi.n	67be <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
      || hour > 23
      || minute > 59
      || second > 59) {
    67d4:	cmp.w	fp, #59	; 0x3b
    67d8:	it	ls
    67da:	cmpls.w	sl, #23
    67de:	bhi.n	67be <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
    67e0:	cmp.w	r8, #59	; 0x3b
    67e4:	bhi.n	67be <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
    67e6:	mov	r6, r0
    67e8:	mov	r5, r3
    67ea:	mov	r7, r1
    67ec:	bl	5c7c <FatFile::sync() [clone .part.42]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    67f0:	cmp	r0, #0
    67f2:	beq.n	67be <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    67f4:	movs	r1, #1
    67f6:	mov	r0, r6
    67f8:	bl	5c5c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    67fc:	cmp	r0, #0
    67fe:	beq.n	67be <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
    6800:	mov.w	r1, r8, asr #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  dirDate = FS_DATE(year, month, day);
  dirTime = FS_TIME(hour, minute, second);
  if (flags & T_ACCESS) {
    6804:	lsls	r3, r7, #31
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    6806:	orr.w	r5, r9, r5, lsl #5
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    680a:	orr.w	fp, r1, fp, lsl #5
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    680e:	orr.w	r4, r5, r4, lsl #9
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    6812:	orr.w	sl, fp, sl, lsl #11
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    6816:	uxth	r4, r4
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    6818:	uxth.w	sl, sl
    681c:	bpl.n	6820 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x8c>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    681e:	strh	r4, [r0, #18]
    setLe16(dir->accessDate, dirDate);
  }
  if (flags & T_CREATE) {
    6820:	lsls	r1, r7, #30
    6822:	bpl.n	6838 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa4>
    setLe16(dir->createDate, dirDate);
    setLe16(dir->createTime, dirTime);
    // units of 10 ms
    dir->createTimeMs = second & 1 ? 100 : 0;
    6824:	ands.w	r8, r8, #1
    6828:	strh	r4, [r0, #16]
    682a:	strh.w	sl, [r0, #14]
    682e:	it	ne
    6830:	movne.w	r8, #100	; 0x64
    6834:	strb.w	r8, [r0, #13]
  }
  if (flags & T_WRITE) {
    6838:	lsls	r2, r7, #29
    683a:	bpl.n	6842 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xae>
    683c:	strh	r4, [r0, #24]
    683e:	strh.w	sl, [r0, #22]
    setLe16(dir->modifyDate, dirDate);
    setLe16(dir->modifyTime, dirTime);
  }
  return m_vol->cacheSync();
    6842:	ldr	r4, [r6, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6844:	add.w	r0, r4, #40	; 0x28
    6848:	bl	31c0 <FsCache::sync()>
    684c:	cmp	r0, #0
    684e:	beq.n	67be <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
    6850:	add.w	r0, r4, #568	; 0x238
    6854:	bl	31c0 <FsCache::sync()>
    6858:	cmp	r0, #0
    685a:	beq.n	67be <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
    685c:	ldr	r0, [r4, #0]
  }
  bool cacheSafeWrite(uint32_t sector, const uint8_t* dst, size_t count) {
    return m_cache.cacheSafeWrite(sector, dst, count);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    685e:	ldr	r3, [r0, #0]
    6860:	ldr	r3, [r3, #32]

 fail:
  return false;
}
    6862:	add	sp, #4
    6864:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6868:	bx	r3
    686a:	nop

0000686c <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    686c:	ldrb	r3, [r0, #2]
    686e:	lsls	r3, r3, #30
    6870:	bpl.n	68a8 <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    6872:	ldr	r3, [r0, #32]
    6874:	cbz	r3, 68a4 <FatFile::truncate()+0x38>
      return true;
  }
  if (m_curCluster) {
    6876:	ldr	r1, [r0, #16]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    6878:	push	{r4, lr}
    687a:	mov	r4, r0
    687c:	sub	sp, #8
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    687e:	cbnz	r1, 68be <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    6880:	str	r3, [sp, #4]
    m_firstCluster = 0;
    6882:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    6884:	mov	r1, r3
    6886:	ldr	r0, [r4, #8]
    6888:	bl	6dfc <FatPartition::freeChain(unsigned long)>
    688c:	cbz	r0, 68ba <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    688e:	ldrb	r3, [r4, #2]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    6890:	ldr	r1, [r4, #20]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6892:	orn	r3, r3, #127	; 0x7f
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6896:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    6898:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    689a:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    689c:	cbnz	r2, 68da <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    689e:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    68a0:	add	sp, #8
    68a2:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    68a4:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    68a6:	bx	lr
  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    68a8:	movs	r0, #0
}
    68aa:	bx	lr
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    68ac:	mvn.w	r2, #4026531840	; 0xf0000000
    68b0:	ldr	r1, [r4, #16]
    68b2:	ldr	r0, [r4, #8]
    68b4:	bl	6ddc <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    68b8:	cbnz	r0, 68d2 <FatFile::truncate()+0x66>
  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    68ba:	movs	r0, #0
    68bc:	b.n	68a0 <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    68be:	movs	r3, #0
    68c0:	add	r2, sp, #8
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    68c2:	ldr	r0, [r0, #8]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    68c4:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    68c8:	bl	6c48 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    68cc:	cmp	r0, #0
    68ce:	blt.n	68ba <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    68d0:	bne.n	68ac <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    68d2:	ldr	r3, [sp, #4]
    68d4:	cmp	r3, #0
    68d6:	beq.n	688e <FatFile::truncate()+0x22>
    68d8:	b.n	6884 <FatFile::truncate()+0x18>
    68da:	mov	r0, r4
    68dc:	bl	5c7c <FatFile::sync() [clone .part.42]>
    68e0:	b.n	68a0 <FatFile::truncate()+0x34>
    68e2:	nop

000068e4 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    68e4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68e8:	ldrb	r3, [r0, #2]
    68ea:	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    68ec:	lsls	r4, r3, #30
    68ee:	bpl.n	69cc <FatFile::write(void const*, unsigned int)+0xe8>
    68f0:	mov	r8, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    68f2:	lsls	r2, r3, #28
    68f4:	mov	r7, r1
    68f6:	bmi.n	69c2 <FatFile::write(void const*, unsigned int)+0xde>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    68f8:	ldr	r2, [r5, #20]
    68fa:	mvns	r3, r2
    68fc:	cmp	r8, r3
    68fe:	bhi.n	69cc <FatFile::write(void const*, unsigned int)+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6900:	cmp.w	r8, #0
    6904:	beq.w	6aa8 <FatFile::write(void const*, unsigned int)+0x1c4>
    6908:	mov	r6, r8
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    690a:	mov.w	sl, #0
    m_sector = 0XFFFFFFFF;
    690e:	mov.w	r9, #4294967295
    6912:	b.n	698e <FatFile::write(void const*, unsigned int)+0xaa>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6914:	cmp.w	fp, #0
    6918:	bne.n	699c <FatFile::write(void const*, unsigned int)+0xb8>
      // start of new cluster
      if (m_curCluster != 0) {
    691a:	ldr	r1, [r5, #16]
    691c:	cmp	r1, #0
    691e:	beq.n	6a1e <FatFile::write(void const*, unsigned int)+0x13a>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    6920:	ldrb	r3, [r5, #2]
    6922:	lsls	r3, r3, #25
    6924:	bpl.w	6a5e <FatFile::write(void const*, unsigned int)+0x17a>
    6928:	ldr	r3, [r5, #28]
    692a:	cmp	r3, r2
    692c:	bls.w	6a5e <FatFile::write(void const*, unsigned int)+0x17a>
          m_curCluster++;
    6930:	adds	r3, r1, #1
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    6932:	subs	r1, #1
      // start of new cluster
      if (m_curCluster != 0) {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
    6934:	str	r3, [r5, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    6936:	ldrb.w	lr, [r0, #6]
    693a:	ldr	r3, [r0, #20]
    693c:	lsl.w	r1, r1, lr
    6940:	add	r3, r4
    6942:	add	r1, r3

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6944:	cmp.w	r6, #512	; 0x200
    6948:	bcs.n	69da <FatFile::write(void const*, unsigned int)+0xf6>
    694a:	cmp.w	r6, #512	; 0x200
    694e:	mov	r4, r6
    6950:	it	cs
    6952:	movcs.w	r4, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    6956:	ldr	r3, [r5, #28]
    6958:	cmp	r3, r2
    695a:	bls.n	6962 <FatFile::write(void const*, unsigned int)+0x7e>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    695c:	ldrb	r3, [r5, #2]
    695e:	lsls	r3, r3, #26
    6960:	bpl.n	69be <FatFile::write(void const*, unsigned int)+0xda>
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6962:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    6964:	adds	r0, #40	; 0x28
    6966:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->dataCachePrepare(sector, cacheOption);
      if (!pc) {
    696a:	cbz	r0, 69cc <FatFile::write(void const*, unsigned int)+0xe8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc + sectorOffset;
      memcpy(dst, src, n);
    696c:	add	r0, fp
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    696e:	add	fp, r4
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc + sectorOffset;
      memcpy(dst, src, n);
    6970:	mov	r2, r4
    6972:	mov	r1, r7
    6974:	bl	9920 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6978:	cmp.w	fp, #512	; 0x200
    697c:	beq.w	6a98 <FatFile::write(void const*, unsigned int)+0x1b4>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    6980:	ldr	r2, [r5, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6982:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    6984:	add	r7, r4
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    6986:	add	r2, r4
    6988:	str	r2, [r5, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    698a:	beq.w	6aa8 <FatFile::write(void const*, unsigned int)+0x1c4>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    698e:	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    6990:	ubfx	fp, r2, #0, #9
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    6994:	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6996:	ands.w	r4, r4, r2, lsr #9
    699a:	beq.n	6914 <FatFile::write(void const*, unsigned int)+0x30>
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    699c:	ldr	r3, [r5, #16]
    699e:	ldrb.w	lr, [r0, #6]
    69a2:	subs	r1, r3, #2
    69a4:	ldr	r3, [r0, #20]
    69a6:	lsl.w	lr, r1, lr
    69aa:	adds	r1, r4, r3
    69ac:	add	r1, lr

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    69ae:	cmp.w	fp, #0
    69b2:	beq.n	6944 <FatFile::write(void const*, unsigned int)+0x60>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    69b4:	rsb	r4, fp, #512	; 0x200
    69b8:	cmp	r4, r6
    69ba:	it	cs
    69bc:	movcs	r4, r6
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    69be:	movs	r2, #1
    69c0:	b.n	6964 <FatFile::write(void const*, unsigned int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    69c2:	ldr	r1, [r0, #28]
    69c4:	bl	6554 <FatFile::seekSet(unsigned long)>
    69c8:	cmp	r0, #0
    69ca:	bne.n	68f8 <FatFile::write(void const*, unsigned int)+0x14>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    69cc:	ldrb	r3, [r5, #1]
  return 0;
    69ce:	movs	r0, #0
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    69d0:	orr.w	r3, r3, #1
    69d4:	strb	r3, [r5, #1]
  return 0;
    69d6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    69da:	cmp.w	r6, #1024	; 0x400
    69de:	bcc.n	6a44 <FatFile::write(void const*, unsigned int)+0x160>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    69e0:	ldrb.w	lr, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    69e4:	lsrs	r3, r6, #9
    69e6:	ldr	r2, [r0, #52]	; 0x34
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    69e8:	rsb	r4, r4, lr
    69ec:	cmp	r3, r4
    69ee:	it	cs
    69f0:	movcs	r3, r4
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    69f2:	cmp	r2, r1
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    69f4:	mov.w	r4, r3, lsl #9
    69f8:	bcc.n	6a0a <FatFile::write(void const*, unsigned int)+0x126>
    69fa:	add.w	lr, r3, r1
    69fe:	cmp	r2, lr
    6a00:	bcs.n	6a0a <FatFile::write(void const*, unsigned int)+0x126>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6a02:	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    6a06:	str.w	r9, [r0, #52]	; 0x34
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    6a0a:	ldr	r0, [r0, #44]	; 0x2c
    6a0c:	mov	r2, r7
    6a0e:	ldr.w	lr, [r0]
    6a12:	ldr.w	fp, [lr, #40]	; 0x28
    6a16:	blx	fp
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    6a18:	cmp	r0, #0
    6a1a:	bne.n	6980 <FatFile::write(void const*, unsigned int)+0x9c>
    6a1c:	b.n	69cc <FatFile::write(void const*, unsigned int)+0xe8>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    6a1e:	ldr	r1, [r5, #32]
    6a20:	cbz	r1, 6a7c <FatFile::write(void const*, unsigned int)+0x198>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    6a22:	str	r1, [r5, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    6a24:	subs	r1, #2
    6a26:	ldrb	r2, [r0, #6]
    6a28:	ldr	r3, [r0, #20]

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6a2a:	cmp.w	r6, #512	; 0x200
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    6a2e:	lsl.w	r1, r1, r2
    6a32:	add	r1, r3

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6a34:	bcs.n	69da <FatFile::write(void const*, unsigned int)+0xf6>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    6a36:	rsb	r4, fp, #512	; 0x200
    6a3a:	ldr	r2, [r5, #20]
    6a3c:	cmp	r4, r6
    6a3e:	it	cs
    6a40:	movcs	r4, r6
    6a42:	b.n	6956 <FatFile::write(void const*, unsigned int)+0x72>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    6a44:	ldr	r3, [r0, #52]	; 0x34
    6a46:	cmp	r3, r1
    6a48:	beq.n	6a8e <FatFile::write(void const*, unsigned int)+0x1aa>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    6a4a:	ldr	r0, [r0, #44]	; 0x2c
    6a4c:	mov	r2, r7
    6a4e:	ldr	r3, [r0, #0]
    6a50:	ldr	r3, [r3, #36]	; 0x24
    6a52:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6a54:	cmp	r0, #0
    6a56:	beq.n	69cc <FatFile::write(void const*, unsigned int)+0xe8>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    6a58:	mov.w	r4, #512	; 0x200
    6a5c:	b.n	6980 <FatFile::write(void const*, unsigned int)+0x9c>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6a5e:	add.w	r2, r5, #16
    6a62:	bl	6c48 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6a66:	cmp	r0, #0
    6a68:	blt.n	69cc <FatFile::write(void const*, unsigned int)+0xe8>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    6a6a:	bne.n	6a76 <FatFile::write(void const*, unsigned int)+0x192>
          // add cluster if at end of chain
          if (!addCluster()) {
    6a6c:	mov	r0, r5
    6a6e:	bl	5bac <FatFile::addCluster()>
    6a72:	cmp	r0, #0
    6a74:	beq.n	69cc <FatFile::write(void const*, unsigned int)+0xe8>
    6a76:	ldr	r1, [r5, #16]
    6a78:	ldr	r0, [r5, #8]
    6a7a:	b.n	6a24 <FatFile::write(void const*, unsigned int)+0x140>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    6a7c:	mov	r0, r5
    6a7e:	bl	5bac <FatFile::addCluster()>
    6a82:	cmp	r0, #0
    6a84:	beq.n	69cc <FatFile::write(void const*, unsigned int)+0xe8>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    6a86:	ldr	r1, [r5, #16]
    6a88:	ldr	r0, [r5, #8]
    6a8a:	str	r1, [r5, #32]
    6a8c:	b.n	6a24 <FatFile::write(void const*, unsigned int)+0x140>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6a8e:	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    6a92:	str.w	r9, [r0, #52]	; 0x34
    6a96:	b.n	6a4a <FatFile::write(void const*, unsigned int)+0x166>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    6a98:	ldr	r0, [r5, #8]
    6a9a:	adds	r0, #40	; 0x28
    6a9c:	bl	31c0 <FsCache::sync()>
      }
      uint8_t* dst = pc + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    6aa0:	cmp	r0, #0
    6aa2:	bne.w	6980 <FatFile::write(void const*, unsigned int)+0x9c>
    6aa6:	b.n	69cc <FatFile::write(void const*, unsigned int)+0xe8>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    6aa8:	ldr	r3, [r5, #28]
    6aaa:	cmp	r3, r2
    6aac:	bcc.n	6ac8 <FatFile::write(void const*, unsigned int)+0x1e4>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    6aae:	ldr	r3, [pc, #40]	; (6ad8 <FatFile::write(void const*, unsigned int)+0x1f4>)
    6ab0:	ldr	r3, [r3, #0]
    6ab2:	cbz	r3, 6ac2 <FatFile::write(void const*, unsigned int)+0x1de>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6ab4:	ldrb	r3, [r5, #2]
    6ab6:	mov	r0, r8
    6ab8:	orn	r3, r3, #127	; 0x7f
    6abc:	strb	r3, [r5, #2]
    6abe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ac2:	mov	r0, r8
    6ac4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6ac8:	ldrb	r3, [r5, #2]
    6aca:	mov	r0, r8
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    6acc:	str	r2, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6ace:	orn	r3, r3, #127	; 0x7f
    6ad2:	strb	r3, [r5, #2]
    6ad4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ad8:	.word	0x20017a1c

00006adc <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    6adc:	push	{r4, r5}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    6ade:	ldr	r4, [r2, #0]
    6ae0:	cmp.w	r4, #256	; 0x100
    6ae4:	mov	r5, r4
    6ae6:	it	cs
    6ae8:	movcs.w	r5, #256	; 0x100
  if (n > 256) n = 256;
  uint16_t *e = p + n;
    6aec:	add.w	r0, r1, r5, lsl #1
  while (p < e) {
    6af0:	cmp	r1, r0
    6af2:	bcs.n	6b04 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
    6af4:	ldrh.w	r3, [r1], #2
    6af8:	cbnz	r3, 6b00 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    6afa:	ldr	r3, [r2, #4]
    6afc:	adds	r3, #1
    6afe:	str	r3, [r2, #4]
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
  if (n > 256) n = 256;
  uint16_t *e = p + n;
  while (p < e) {
    6b00:	cmp	r0, r1
    6b02:	bhi.n	6af4 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    6b04:	subs	r4, r4, r5
    6b06:	str	r4, [r2, #0]
}
    6b08:	pop	{r4, r5}
    6b0a:	bx	lr

00006b0c <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    6b0c:	push	{r4, r5}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    6b0e:	ldr	r4, [r2, #0]
    6b10:	cmp	r4, #128	; 0x80
    6b12:	mov	r5, r4
    6b14:	it	cs
    6b16:	movcs	r5, #128	; 0x80
  if (n > 128) n = 128;
  uint32_t *e = p + n;
    6b18:	add.w	r0, r1, r5, lsl #2
  while (p < e) {
    6b1c:	cmp	r1, r0
    6b1e:	bcs.n	6b30 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x24>
    if (*p++ == 0) state->free_count++;
    6b20:	ldr.w	r3, [r1], #4
    6b24:	cbnz	r3, 6b2c <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x20>
    6b26:	ldr	r3, [r2, #4]
    6b28:	adds	r3, #1
    6b2a:	str	r3, [r2, #4]
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
  if (n > 128) n = 128;
  uint32_t *e = p + n;
  while (p < e) {
    6b2c:	cmp	r0, r1
    6b2e:	bhi.n	6b20 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x14>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    6b30:	subs	r4, r4, r5
    6b32:	str	r4, [r2, #0]
}
    6b34:	pop	{r4, r5}
    6b36:	bx	lr

00006b38 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]>:
 fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6b38:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6b3c:	ldrb	r3, [r0, #7]
    6b3e:	mov	r5, r0
    6b40:	mov	r4, r1
    6b42:	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6b44:	cmp	r3, #32
    6b46:	beq.n	6b56 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]+0x1e>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    setLe32(pc + offset, value);
    return true;
  }

  if (fatType() == 16) {
    6b48:	cmp	r3, #16
    6b4a:	beq.n	6b82 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]+0x4a>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    setLe16(pc + offset, value);
    return true;
  }

  if (FAT12_SUPPORT && fatType() == 12) {
    6b4c:	cmp	r3, #12
    6b4e:	beq.n	6bb0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    6b50:	movs	r0, #0
    6b52:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }
  FsCache* dataCache() {return &m_cache;}
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6b56:	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    6b58:	add.w	r0, r0, #568	; 0x238
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6b5c:	ldr	r1, [r5, #24]
  }
  FsCache* dataCache() {return &m_cache;}
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6b5e:	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    6b60:	add.w	r1, r1, r4, lsr #7
    6b64:	ite	eq
    6b66:	moveq	r2, #3
    6b68:	movne	r2, #1
    6b6a:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    6b6e:	mov	r3, r0
    6b70:	cmp	r0, #0
    6b72:	beq.n	6b50 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]+0x18>
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    6b74:	lsls	r4, r4, #2
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    setLe32(pc + offset, value);
    return true;
    6b76:	movs	r0, #1
    6b78:	and.w	r4, r4, #508	; 0x1fc
    6b7c:	str	r6, [r3, r4]
    6b7e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }
  FsCache* dataCache() {return &m_cache;}
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6b82:	ldrb	r2, [r0, #8]
  }

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    6b84:	ubfx	r1, r1, #8, #8
    6b88:	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    6b8a:	add.w	r0, r0, #568	; 0x238
  }
  FsCache* dataCache() {return &m_cache;}
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6b8e:	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    6b90:	add	r1, r3
    6b92:	ite	eq
    6b94:	moveq	r2, #3
    6b96:	movne	r2, #1
    6b98:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    6b9c:	mov	r3, r0
    6b9e:	cmp	r0, #0
    6ba0:	beq.n	6b50 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]+0x18>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6ba2:	lsls	r4, r4, #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 1) & m_sectorMask;
    setLe16(pc + offset, value);
    return true;
    6ba4:	movs	r0, #1
    6ba6:	and.w	r4, r4, #510	; 0x1fe
    6baa:	strh	r6, [r3, r4]
    6bac:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }

  if (FAT12_SUPPORT && fatType() == 12) {
    uint16_t index = cluster;
    index += index >> 1;
    6bb0:	ubfx	r3, r1, #1, #15
  }
  FsCache* dataCache() {return &m_cache;}
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6bb4:	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    6bb6:	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    6bb8:	add.w	r8, r0, #568	; 0x238
    return true;
  }

  if (FAT12_SUPPORT && fatType() == 12) {
    uint16_t index = cluster;
    index += index >> 1;
    6bbc:	uxtah	r3, r3, r4
  }
  FsCache* dataCache() {return &m_cache;}
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6bc0:	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    6bc2:	mov	r0, r8
    6bc4:	uxth	r7, r3
    6bc6:	ite	eq
    6bc8:	moveq	r2, #3
    6bca:	movne	r2, #1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    6bcc:	add.w	r9, r1, r7, lsr #9
    6bd0:	mov	r1, r9
    6bd2:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    6bd6:	cmp	r0, #0
    6bd8:	beq.n	6b50 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
    index &= m_sectorMask;
    uint8_t tmp = value;
    if (cluster & 1) {
    6bda:	ands.w	r4, r4, #1
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    index &= m_sectorMask;
    6bde:	ubfx	r3, r7, #0, #9
    uint8_t tmp = value;
    if (cluster & 1) {
    6be2:	beq.n	6c06 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
    }
    pc[index] = tmp;
    6be4:	ldrb	r2, [r0, r3]

    index++;
    6be6:	adds	r1, r3, #1
    index &= m_sectorMask;
    uint8_t tmp = value;
    if (cluster & 1) {
      tmp = (pc[index] & 0XF) | tmp << 4;
    }
    pc[index] = tmp;
    6be8:	and.w	r2, r2, #15

    index++;
    if (index == m_bytesPerSector) {
    6bec:	cmp.w	r1, #512	; 0x200
    index &= m_sectorMask;
    uint8_t tmp = value;
    if (cluster & 1) {
      tmp = (pc[index] & 0XF) | tmp << 4;
    }
    pc[index] = tmp;
    6bf0:	orr.w	r2, r2, r6, lsl #4
    6bf4:	strb	r2, [r0, r3]

    index++;
    if (index == m_bytesPerSector) {
    6bf6:	beq.n	6c10 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]+0xd8>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmp = value >> 4;
    6bf8:	ubfx	r6, r6, #4, #8
    6bfc:	add	r0, r1
    if (!(cluster & 1)) {
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    }
    pc[index] = tmp;
    6bfe:	strb	r6, [r0, #0]
    return true;
    6c00:	movs	r0, #1
    6c02:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (cluster & 1) {
      tmp = (pc[index] & 0XF) | tmp << 4;
    }
    pc[index] = tmp;

    index++;
    6c06:	adds	r2, r3, #1
    index &= m_sectorMask;
    uint8_t tmp = value;
    if (cluster & 1) {
      tmp = (pc[index] & 0XF) | tmp << 4;
    }
    pc[index] = tmp;
    6c08:	strb	r6, [r0, r3]

    index++;
    if (index == m_bytesPerSector) {
    6c0a:	cmp.w	r2, #512	; 0x200
    6c0e:	bne.n	6c3c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]+0x104>
  }
  FsCache* dataCache() {return &m_cache;}
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6c10:	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    6c12:	add.w	r1, r9, #1
    6c16:	mov	r0, r8
  }
  FsCache* dataCache() {return &m_cache;}
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6c18:	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    6c1a:	ite	eq
    6c1c:	moveq	r2, #3
    6c1e:	movne	r2, #1
    6c20:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
      sector++;
      index = 0;
      pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
      if (!pc) {
    6c24:	cmp	r0, #0
    6c26:	beq.n	6b50 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]+0x18>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmp = value >> 4;
    6c28:	lsrs	r6, r6, #4
    if (!(cluster & 1)) {
    6c2a:	cbnz	r4, 6c42 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]+0x10a>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    6c2c:	ldrb	r3, [r0, r4]
    6c2e:	ubfx	r6, r6, #4, #4
    6c32:	add	r0, r4
    6c34:	bic.w	r3, r3, #15
    6c38:	orrs	r6, r3
    6c3a:	b.n	6bfe <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]+0xc6>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmp = value >> 4;
    6c3c:	lsrs	r6, r6, #4
    6c3e:	mov	r4, r2
    6c40:	b.n	6c2c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]+0xf4>
    6c42:	uxtb	r6, r6
    6c44:	b.n	6bfe <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]+0xc6>
    6c46:	nop

00006c48 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6c48:	cmp	r1, #1
    6c4a:	bls.n	6d32 <FatPartition::fatGet(unsigned long, unsigned long*)+0xea>
 fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6c4c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  uint32_t next;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6c50:	ldr	r3, [r0, #28]
    6c52:	cmp	r1, r3
    6c54:	bhi.n	6d2a <FatPartition::fatGet(unsigned long, unsigned long*)+0xe2>
    6c56:	ldrb	r3, [r0, #7]
    6c58:	mov	r7, r2
    6c5a:	mov	r5, r0
    6c5c:	mov	r4, r1
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6c5e:	cmp	r3, #32
    6c60:	beq.n	6cc6 <FatPartition::fatGet(unsigned long, unsigned long*)+0x7e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    next = getLe32(pc + offset);
  } else if (fatType() == 16) {
    6c62:	cmp	r3, #16
    6c64:	beq.n	6cea <FatPartition::fatGet(unsigned long, unsigned long*)+0xa2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 1) & m_sectorMask;
    next = getLe16(pc + offset);
  } else if (FAT12_SUPPORT && fatType() == 12) {
    6c66:	cmp	r3, #12
    6c68:	bne.n	6d2a <FatPartition::fatGet(unsigned long, unsigned long*)+0xe2>
    uint16_t index = cluster;
    index += index >> 1;
    6c6a:	ubfx	r6, r1, #1, #15
  }
  FsCache* dataCache() {return &m_cache;}
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6c6e:	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    6c70:	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    6c72:	add.w	r8, r0, #568	; 0x238
    }
    uint16_t offset = (cluster << 1) & m_sectorMask;
    next = getLe16(pc + offset);
  } else if (FAT12_SUPPORT && fatType() == 12) {
    uint16_t index = cluster;
    index += index >> 1;
    6c76:	uxtah	r6, r6, r4
  }
  FsCache* dataCache() {return &m_cache;}
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6c7a:	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    6c7c:	mov	r0, r8
    6c7e:	uxth	r6, r6
    6c80:	ite	eq
    6c82:	moveq	r2, #2
    6c84:	movne	r2, #0
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    6c86:	add.w	r9, r1, r6, lsr #9
    6c8a:	mov	r1, r9
    6c8c:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    6c90:	cmp	r0, #0
    6c92:	beq.n	6d2a <FatPartition::fatGet(unsigned long, unsigned long*)+0xe2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    index &= m_sectorMask;
    6c94:	ubfx	r6, r6, #0, #9
    uint16_t tmp = pc[index];
    index++;
    6c98:	adds	r3, r6, #1
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    index &= m_sectorMask;
    uint16_t tmp = pc[index];
    6c9a:	ldrb	r6, [r0, r6]
    index++;
    if (index == m_bytesPerSector) {
    6c9c:	cmp.w	r3, #512	; 0x200
    6ca0:	beq.n	6d10 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      index = 0;
    }
    tmp |= pc[index] << 8;
    6ca2:	ldrb	r3, [r0, r3]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    6ca4:	lsls	r2, r4, #31
        DBG_FAIL_MACRO;
        goto fail;
      }
      index = 0;
    }
    tmp |= pc[index] << 8;
    6ca6:	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    6caa:	ite	mi
    6cac:	asrmi	r3, r3, #4
    6cae:	ubfxpl	r3, r3, #0, #12
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    6cb2:	ldr	r2, [r5, #28]
    6cb4:	cmp	r3, r2
    6cb6:	bhi.n	6cc0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x78>
    return 0;
  }
  *value = next;
    6cb8:	str	r3, [r7, #0]
  return 1;
    6cba:	movs	r0, #1
    6cbc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    6cc0:	movs	r0, #0
  *value = next;
  return 1;

 fail:
  return -1;
}
    6cc2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }
  FsCache* dataCache() {return &m_cache;}
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6cc6:	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    6cc8:	add.w	r0, r0, #568	; 0x238
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6ccc:	ldr	r1, [r5, #24]
  }
  FsCache* dataCache() {return &m_cache;}
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6cce:	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    6cd0:	add.w	r1, r1, r4, lsr #7
    6cd4:	ite	eq
    6cd6:	moveq	r2, #2
    6cd8:	movne	r2, #0
    6cda:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    6cde:	cbz	r0, 6d2a <FatPartition::fatGet(unsigned long, unsigned long*)+0xe2>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6ce0:	lsls	r4, r4, #2
    6ce2:	and.w	r4, r4, #508	; 0x1fc
    6ce6:	ldr	r3, [r0, r4]
    6ce8:	b.n	6cb2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x6a>
  }
  FsCache* dataCache() {return &m_cache;}
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6cea:	ldrb	r2, [r0, #8]
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    next = getLe32(pc + offset);
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    6cec:	ubfx	r1, r1, #8, #8
    6cf0:	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    6cf2:	add.w	r0, r0, #568	; 0x238
  }
  FsCache* dataCache() {return &m_cache;}
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6cf6:	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    6cf8:	add	r1, r3
    6cfa:	ite	eq
    6cfc:	moveq	r2, #2
    6cfe:	movne	r2, #0
    6d00:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    6d04:	cbz	r0, 6d2a <FatPartition::fatGet(unsigned long, unsigned long*)+0xe2>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6d06:	lsls	r4, r4, #1
    6d08:	and.w	r4, r4, #510	; 0x1fe
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 1) & m_sectorMask;
    next = getLe16(pc + offset);
    6d0c:	ldrh	r3, [r0, r4]
    6d0e:	b.n	6cb2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x6a>
  }
  FsCache* dataCache() {return &m_cache;}
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6d10:	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    6d12:	add.w	r1, r9, #1
    6d16:	mov	r0, r8
  }
  FsCache* dataCache() {return &m_cache;}
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6d18:	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    6d1a:	ite	eq
    6d1c:	moveq	r2, #2
    6d1e:	movne	r2, #0
    6d20:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
    index &= m_sectorMask;
    uint16_t tmp = pc[index];
    index++;
    if (index == m_bytesPerSector) {
      pc = fatCachePrepare(sector + 1, FsCache::CACHE_FOR_READ);
      if (!pc) {
    6d24:	cbz	r0, 6d2a <FatPartition::fatGet(unsigned long, unsigned long*)+0xe2>
    6d26:	movs	r3, #0
    6d28:	b.n	6ca2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x5a>
  }
  *value = next;
  return 1;

 fail:
  return -1;
    6d2a:	mov.w	r0, #4294967295
    6d2e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6d32:	mov.w	r0, #4294967295
}
    6d36:	bx	lr

00006d38 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"

//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6d38:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6d3c:	ldr	r4, [r0, #12]
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"

//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6d3e:	sub	sp, #8
    6d40:	mov	r5, r0
    6d42:	mov	r7, r1
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6d44:	cmp	r4, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"

//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6d46:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6d48:	bcs.n	6d9a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
    6d4a:	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    6d4c:	movs	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    6d4e:	adds	r4, #1
    6d50:	ldr	r3, [r5, #28]
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6d52:	add	r2, sp, #4
    6d54:	mov	r0, r5
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6d56:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6d58:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6d5a:	bls.n	6d6e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x36>
      if (setStart) {
    6d5c:	cbnz	r6, 6d90 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x58>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    6d5e:	ldr	r4, [r5, #12]
      setStart = true;
    6d60:	movs	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6d62:	add	r2, sp, #4
    6d64:	mov	r0, r5
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    6d66:	adds	r4, #1
    if (find > m_lastCluster) {
    6d68:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6d6a:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6d6c:	bhi.n	6d5c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    6d6e:	cmp	r7, r4
    6d70:	beq.n	6d90 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x58>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6d72:	bl	6c48 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6d76:	cmp	r0, #0
    6d78:	blt.n	6d90 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x58>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    6d7a:	beq.n	6d4e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    6d7c:	ldr	r3, [sp, #4]
    6d7e:	cmp	r3, #0
    6d80:	bne.n	6d4e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
      break;
    }
  }
  if (setStart) {
    6d82:	cbz	r6, 6d86 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4e>
    m_allocSearchStart = find;
    6d84:	str	r4, [r5, #12]
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6d86:	cmp	r4, #1
    6d88:	bls.n	6d90 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x58>
    6d8a:	ldr	r3, [r5, #28]
    6d8c:	cmp	r4, r3
    6d8e:	bls.n	6d9e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

 fail:
  return false;
    6d90:	movs	r6, #0
}
    6d92:	mov	r0, r6
    6d94:	add	sp, #8
    6d96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
  } else {
    find = m_allocSearchStart;
    setStart = true;
    6d9a:	movs	r6, #1
    6d9c:	b.n	6d4e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    6d9e:	mvn.w	r2, #4026531840	; 0xf0000000
    6da2:	mov	r1, r4
    6da4:	mov	r0, r5
    6da6:	bl	6b38 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]>
  }
  if (setStart) {
    m_allocSearchStart = find;
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    6daa:	mov	r6, r0
    6dac:	cmp	r0, #0
    6dae:	beq.n	6d90 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    6db0:	cbz	r7, 6dca <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x92>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6db2:	cmp	r7, #1
    6db4:	bls.n	6d90 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x58>
    6db6:	ldr	r3, [r5, #28]
    6db8:	cmp	r7, r3
    6dba:	bhi.n	6d90 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x58>
    6dbc:	mov	r1, r7
    6dbe:	mov	r2, r4
    6dc0:	mov	r0, r5
    6dc2:	bl	6b38 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    6dc6:	cmp	r0, #0
    6dc8:	beq.n	6d90 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x58>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    6dca:	ldr	r3, [r5, #36]	; 0x24
    6dcc:	cmp	r3, #0
    6dce:	blt.n	6dd4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x9c>
      m_freeClusterCount += change;
    6dd0:	subs	r3, #1
    6dd2:	str	r3, [r5, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    6dd4:	str.w	r4, [r8]
  return true;
    6dd8:	b.n	6d92 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5a>
    6dda:	nop

00006ddc <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6ddc:	cmp	r1, #1
    6dde:	bls.n	6df8 <FatPartition::fatPut(unsigned long, unsigned long)+0x1c>
 fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6de0:	push	{r4}
  uint32_t sector;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6de2:	ldr	r4, [r0, #28]
    6de4:	cmp	r1, r4
    6de6:	bhi.n	6df0 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
    goto fail;
  }

 fail:
  return false;
}
    6de8:	ldr.w	r4, [sp], #4
    6dec:	b.w	6b38 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]>
    6df0:	movs	r0, #0
    6df2:	ldr.w	r4, [sp], #4
    6df6:	bx	lr
    6df8:	movs	r0, #0
    6dfa:	bx	lr

00006dfc <FatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    6dfc:	push	{r4, r5, r6, lr}
    6dfe:	mov	r5, r0
    6e00:	sub	sp, #8
    6e02:	mov	r4, r1
    6e04:	b.n	6e26 <FatPartition::freeChain(unsigned long)+0x2a>
    6e06:	bl	6b38 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.7]>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    6e0a:	subs	r2, r4, #1
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6e0c:	cbz	r0, 6e48 <FatPartition::freeChain(unsigned long)+0x4c>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    6e0e:	ldr	r3, [r5, #36]	; 0x24
    6e10:	cmp	r3, #0
      m_freeClusterCount += change;
    6e12:	add.w	r3, r3, #1
    6e16:	it	ge
    6e18:	strge	r3, [r5, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    6e1a:	ldr	r3, [r5, #12]
    6e1c:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    }
    cluster = next;
    6e1e:	ldr	r4, [sp, #4]
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    6e20:	it	cc
    6e22:	strcc	r2, [r5, #12]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    6e24:	cbz	r6, 6e4a <FatPartition::freeChain(unsigned long)+0x4e>
    fg = fatGet(cluster, &next);
    6e26:	mov	r1, r4
    6e28:	add	r2, sp, #4
    6e2a:	mov	r0, r5
    6e2c:	bl	6c48 <FatPartition::fatGet(unsigned long, unsigned long*)>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6e30:	cmp	r4, #1
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    6e32:	mov	r6, r0
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6e34:	ubfx	r3, r0, #7, #1
    6e38:	mov	r1, r4
    6e3a:	mov	r0, r5
    6e3c:	bls.n	6e48 <FatPartition::freeChain(unsigned long)+0x4c>
    6e3e:	mov	r2, r3
    6e40:	cbnz	r3, 6e48 <FatPartition::freeChain(unsigned long)+0x4c>
    6e42:	ldr	r3, [r5, #28]
    6e44:	cmp	r4, r3
    6e46:	bls.n	6e06 <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

 fail:
  return false;
    6e48:	movs	r0, #0
}
    6e4a:	add	sp, #8
    6e4c:	pop	{r4, r5, r6, pc}
    6e4e:	nop

00006e50 <FatPartition::freeClusterCount()>:
}

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    6e50:	ldr	r3, [r0, #36]	; 0x24
    6e52:	cmp	r3, #0
    6e54:	blt.n	6e5a <FatPartition::freeClusterCount()+0xa>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
  }

  setFreeClusterCount(state.free_count);
  return state.free_count;
}
    6e56:	mov	r0, r3
    6e58:	bx	lr
  }
  state->clusters_to_do -= n;
}

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    6e5a:	push	{r4, r5, r6, r7, lr}
    6e5c:	ldrb	r1, [r0, #7]
    6e5e:	sub	sp, #20
    6e60:	mov	r5, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    6e62:	cmp	r1, #12
    6e64:	beq.n	6eb0 <FatPartition::freeClusterCount()+0x60>
  }

  struct FreeClusterCountStruct state;

  state.free_count = 0;
  state.clusters_to_do = m_lastCluster + 1;
    6e66:	ldr	r3, [r0, #28]
    return free;
  }

  struct FreeClusterCountStruct state;

  state.free_count = 0;
    6e68:	movs	r4, #0
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    6e6a:	ldrb.w	r0, [r0, #568]	; 0x238
  state.clusters_to_do = m_lastCluster + 1;
    6e6e:	adds	r2, r3, #1
    return free;
  }

  struct FreeClusterCountStruct state;

  state.free_count = 0;
    6e70:	str	r4, [sp, #12]
    6e72:	lsls	r3, r0, #31
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    6e74:	ldr	r4, [r5, #16]
  }

  struct FreeClusterCountStruct state;

  state.free_count = 0;
  state.clusters_to_do = m_lastCluster + 1;
    6e76:	str	r2, [sp, #8]
    6e78:	bmi.n	6ee8 <FatPartition::freeClusterCount()+0x98>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6e7a:	movs	r0, #0
    m_sector = 0XFFFFFFFF;
    6e7c:	mov.w	r3, #4294967295
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    6e80:	cmp	r1, #32
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    return m_buffer;
    6e82:	add.w	r2, r5, #584	; 0x248
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6e86:	strb.w	r0, [r5, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    6e8a:	str.w	r3, [r5, #580]	; 0x244
    6e8e:	beq.n	6ef8 <FatPartition::freeClusterCount()+0xa8>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    6e90:	ldr	r0, [r5, #0]
    6e92:	add	r7, sp, #8
    6e94:	ldr	r6, [pc, #108]	; (6f04 <FatPartition::freeClusterCount()+0xb4>)
    6e96:	mov	r3, r4
    6e98:	ldr	r4, [r0, #0]
    6e9a:	ldr	r1, [r5, #24]
    6e9c:	stmia.w	sp, {r6, r7}
    6ea0:	ldr	r4, [r4, #24]
    6ea2:	blx	r4
    6ea4:	cbz	r0, 6eda <FatPartition::freeClusterCount()+0x8a>
  }

  setFreeClusterCount(state.free_count);
    6ea6:	ldr	r3, [sp, #12]
    return m_blockDev->syncDevice();
  }
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    6ea8:	str	r3, [r5, #36]	; 0x24
  return state.free_count;
}
    6eaa:	mov	r0, r3
    6eac:	add	sp, #20
    6eae:	pop	{r4, r5, r6, r7, pc}
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    6eb0:	ldr	r7, [r0, #28]
    6eb2:	adds	r7, #1
    for (unsigned i = 2; i < todo; i++) {
    6eb4:	cmp	r7, #2
    6eb6:	bls.n	6f00 <FatPartition::freeClusterCount()+0xb0>
    6eb8:	movs	r4, #2
    6eba:	movs	r6, #0
    6ebc:	b.n	6eca <FatPartition::freeClusterCount()+0x7a>
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
        DBG_FAIL_MACRO;
        return -1;
      }
      if (fg && c == 0) {
    6ebe:	beq.n	6ec6 <FatPartition::freeClusterCount()+0x76>
    6ec0:	ldr	r3, [sp, #8]
    6ec2:	cbnz	r3, 6ec6 <FatPartition::freeClusterCount()+0x76>
        free++;
    6ec4:	adds	r6, #1
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    for (unsigned i = 2; i < todo; i++) {
    6ec6:	cmp	r7, r4
    6ec8:	beq.n	6ee4 <FatPartition::freeClusterCount()+0x94>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
    6eca:	mov	r1, r4
    6ecc:	add	r2, sp, #8
    6ece:	mov	r0, r5
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    for (unsigned i = 2; i < todo; i++) {
    6ed0:	adds	r4, #1
      uint32_t c;
      int8_t fg = fatGet(i, &c);
    6ed2:	bl	6c48 <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    6ed6:	cmp	r0, #0
    6ed8:	bge.n	6ebe <FatPartition::freeClusterCount()+0x6e>
#if USE_SEPARATE_FAT_CACHE
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
    6eda:	mov.w	r3, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
  }

  setFreeClusterCount(state.free_count);
  return state.free_count;
}
    6ede:	mov	r0, r3
    6ee0:	add	sp, #20
    6ee2:	pop	{r4, r5, r6, r7, pc}
    6ee4:	mov	r3, r6
    6ee6:	b.n	6eaa <FatPartition::freeClusterCount()+0x5a>
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    6ee8:	add.w	r0, r5, #568	; 0x238
    6eec:	bl	31c0 <FsCache::sync()>
    6ef0:	cmp	r0, #0
    6ef2:	beq.n	6eda <FatPartition::freeClusterCount()+0x8a>
    6ef4:	ldrb	r1, [r5, #7]
    6ef6:	b.n	6e7a <FatPartition::freeClusterCount()+0x2a>
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    6ef8:	ldr	r0, [r5, #0]
    6efa:	add	r7, sp, #8
    6efc:	ldr	r6, [pc, #8]	; (6f08 <FatPartition::freeClusterCount()+0xb8>)
    6efe:	b.n	6e96 <FatPartition::freeClusterCount()+0x46>
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    for (unsigned i = 2; i < todo; i++) {
    6f00:	movs	r3, #0
      }
      if (fg && c == 0) {
        free++;
      }
    }
    return free;
    6f02:	b.n	6eaa <FatPartition::freeClusterCount()+0x5a>
    6f04:	.word	0x00006add
    6f08:	.word	0x00006b0d

00006f0c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
  return state.free_count;
}


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6f0c:	push	{r3, r4, r5, r6, r7, lr}
    6f0e:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6f10:	movs	r3, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    6f12:	mov.w	r0, #4294967295
  m_allocSearchStart = 1;
    6f16:	movs	r6, #1
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
//  Serial.printf(" FatPartition::init(%x %u)\n", (uint32_t)dev, part);
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    6f18:	str	r1, [r4, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    6f1a:	mov	r5, r2
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(FsBlockDevice* blockDev) {
    m_blockDev = blockDev;
    6f1c:	str	r1, [r4, #44]	; 0x2c
    6f1e:	str.w	r1, [r4, #572]	; 0x23c
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    6f22:	str	r6, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6f24:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6f26:	strb.w	r3, [r4, #40]	; 0x28
    6f2a:	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    6f2e:	str	r0, [r4, #52]	; 0x34
    6f30:	str.w	r0, [r4, #580]	; 0x244
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    6f34:	cbz	r2, 6f6e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    6f36:	cmp	r2, #4
    6f38:	bls.n	6f3e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    6f3a:	movs	r0, #0
    6f3c:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    6f3e:	add.w	r6, r4, #40	; 0x28
    6f42:	mov	r2, r3
    6f44:	mov	r1, r3
    6f46:	mov	r0, r6
    6f48:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (dataCachePrepare(0, FsCache::CACHE_FOR_READ));
    MbrPart_t* mp = mbr->part + part - 1;
    6f4c:	mvn.w	r3, #4026531840	; 0xf0000000
    6f50:	add.w	r1, r0, #446	; 0x1be
    6f54:	add	r3, r5
    6f56:	lsls	r3, r3, #4
    6f58:	adds	r2, r1, r3

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    6f5a:	cmp	r0, #0
    6f5c:	beq.n	6f3a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x2e>
    6f5e:	ldrb	r0, [r2, #4]
    6f60:	cmp	r0, #0
    6f62:	beq.n	6f3a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x2e>
    6f64:	ldrb	r3, [r1, r3]
    6f66:	lsls	r3, r3, #25
    6f68:	bne.n	6f3a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x2e>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6f6a:	ldr	r5, [r2, #8]
    6f6c:	b.n	6f72 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x66>
    6f6e:	add.w	r6, r4, #40	; 0x28
    6f72:	mov	r0, r6
    6f74:	movs	r2, #0
    6f76:	mov	r1, r5
    6f78:	bl	3160 <FsCache::prepare(unsigned long, unsigned char)>
    volumeStartSector = getLe32(mp->relativeSectors);
  }
  pbs = reinterpret_cast<pbs_t*>
        (dataCachePrepare(volumeStartSector, FsCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    6f7c:	cmp	r0, #0
    6f7e:	beq.n	6f3a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x2e>
    6f80:	ldrh.w	r3, [r0, #11]
    6f84:	cmp.w	r3, #512	; 0x200
    6f88:	bne.n	6f3a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // handle fat counts 1 or 2...
  m_fatCount = bpb->fatCount;
    6f8a:	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    6f8c:	subs	r2, r3, #1
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // handle fat counts 1 or 2...
  m_fatCount = bpb->fatCount;
    6f8e:	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    6f90:	cmp	r2, #1
    6f92:	bhi.n	6f3a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6f94:	ldrb	r6, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6f96:	movs	r3, #0
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6f98:	subs	r2, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6f9a:	cmp	r6, #1
  m_fatCount = bpb->fatCount;
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6f9c:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6f9e:	strb	r3, [r4, #6]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6fa0:	strb	r2, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6fa2:	beq.n	7038 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x12c>
    6fa4:	movs	r1, #1
    6fa6:	mov	r2, r1
    6fa8:	b.n	6fac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa0>
    6faa:	mov	r1, r3
    6fac:	lsls	r2, r2, #1
    6fae:	adds	r3, r1, #1
    6fb0:	uxtb	r2, r2
    6fb2:	uxtb	r3, r3
    6fb4:	cmp	r6, r2
    6fb6:	beq.n	6fc0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb4>
    if (tmp == 0) {
    6fb8:	cmp	r3, #9
    6fba:	bne.n	6faa <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x9e>
    6fbc:	strb	r1, [r4, #6]
    6fbe:	b.n	6f3a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x2e>
    6fc0:	strb	r1, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    6fc2:	ldrh	r6, [r0, #22]
    6fc4:	str	r6, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6fc6:	cbnz	r6, 6fcc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xc0>
    6fc8:	ldr	r6, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6fca:	str	r6, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6fcc:	ldrh	r7, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6fce:	ldrh.w	r3, [r0, #17]
    6fd2:	add.w	lr, r7, r5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    6fd6:	strh	r3, [r4, #10]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6fd8:	lsls	r3, r3, #5
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6fda:	str.w	lr, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    6fde:	ldrb	r7, [r0, #16]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6fe0:	addw	r3, r3, #511	; 0x1ff
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    6fe4:	ldrh.w	r2, [r0, #19]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    6fe8:	mla	r7, r6, r7, lr
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6fec:	add.w	r3, r7, r3, lsr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    6ff0:	str	r7, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    6ff2:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    6ff4:	cbnz	r2, 6ff8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xec>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6ff6:	ldr	r2, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    6ff8:	subs	r5, r5, r3
    return m_blockDev->syncDevice();
  }
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    6ffa:	mov.w	r3, #4294967295
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6ffe:	movw	r7, #4084	; 0xff4
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    7002:	add	r5, r2
    7004:	str	r3, [r4, #36]	; 0x24

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    7006:	lsr.w	r3, r5, r1
  m_lastCluster = clusterCount + 1;
    700a:	adds	r2, r3, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    700c:	cmp	r3, r7
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    700e:	str	r2, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    7010:	bhi.n	7020 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x114>
    m_fatType = 12;
    7012:	movs	r3, #12
    7014:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    7016:	str	r6, [r4, #48]	; 0x30
  }
  m_cache.setMirrorOffset(m_sectorsPerFat);
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;
    7018:	movs	r0, #1
    701a:	str.w	r6, [r4, #576]	; 0x240
    701e:	pop	{r3, r4, r5, r6, r7, pc}
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    7020:	movw	r2, #65524	; 0xfff4
    7024:	cmp	r3, r2
    7026:	bhi.n	702e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x122>
    m_fatType = 16;
    7028:	movs	r3, #16
    702a:	strb	r3, [r4, #7]
    702c:	b.n	7016 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10a>
    702e:	ldr	r2, [r0, #44]	; 0x2c
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    7030:	movs	r3, #32
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    7032:	str	r2, [r4, #32]
    m_fatType = 32;
    7034:	strb	r3, [r4, #7]
    7036:	b.n	7016 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10a>
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7038:	mov	r1, r3
    703a:	b.n	6fc2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb6>

0000703c <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    703c:	push	{r4, r5, r6, lr}
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    703e:	movs	r5, #0
    7040:	sub	sp, #40	; 0x28
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    7042:	add.w	r4, r0, #1096	; 0x448
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    7046:	mov	r2, r1
    7048:	mov	r3, r5
    704a:	add	r0, sp, #4
    704c:	mov	r1, r4
    704e:	strb.w	r5, [sp, #4]
    7052:	strb.w	r5, [sp, #5]
    7056:	strb.w	r5, [sp, #6]
    705a:	bl	5fec <FatFile::open(FatFile*, char const*, int)>
    705e:	mov	r6, r0
    7060:	cbz	r0, 707a <FatVolume::chdir(char const*)+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    7062:	ldrb.w	r3, [sp, #4]
    7066:	ands.w	r3, r3, #112	; 0x70
    706a:	beq.n	7080 <FatVolume::chdir(char const*)+0x44>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    706c:	add	r5, sp, #4
    706e:	ldmia	r5!, {r0, r1, r2, r3}
    7070:	stmia	r4!, {r0, r1, r2, r3}
    7072:	ldmia	r5!, {r0, r1, r2, r3}
    7074:	ldr	r5, [r5, #0]
    7076:	stmia	r4!, {r0, r1, r2, r3}
    7078:	str	r5, [r4, #0]
  return true;

 fail:
  return false;
}
    707a:	mov	r0, r6
    707c:	add	sp, #40	; 0x28
    707e:	pop	{r4, r5, r6, pc}
  }
  m_vwd = dir;
  return true;

 fail:
  return false;
    7080:	mov	r6, r3
}
    7082:	mov	r0, r6
    7084:	add	sp, #40	; 0x28
    7086:	pop	{r4, r5, r6, pc}

00007088 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7088:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    708c:	mov	r7, r0
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    708e:	sub	sp, #52	; 0x34
    7090:	mov	r5, r2
    7092:	mov	r6, r0
    7094:	mov	sl, r1
    7096:	mov	r9, r3
  FatFile dir = *this;
    7098:	add	r4, sp, #12
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    709a:	mov.w	lr, #0
    709e:	ldmia	r7!, {r0, r1, r2, r3}
    70a0:	stmia	r4!, {r0, r1, r2, r3}
    70a2:	ldmia	r7!, {r0, r1, r2, r3}
    70a4:	ldr.w	ip, [r7]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    70a8:	ldr	r7, [r5, #0]
    ls = 0;  // lowSurrogate
    70aa:	strh.w	lr, [r5, #12]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    70ae:	str	r7, [r5, #4]
    70b0:	stmia	r4!, {r0, r1, r2, r3}
    70b2:	str.w	ip, [r4]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    70b6:	cmp.w	r9, #0
    70ba:	beq.n	7128 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa0>
    70bc:	mov.w	r8, #1
    70c0:	str.w	r9, [sp, #4]
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    70c4:	rsb	r1, r8, sl
    70c8:	add	r0, sp, #12
    70ca:	uxth	r1, r1
    70cc:	lsls	r1, r1, #5
    70ce:	bl	6554 <FatFile::seekSet(unsigned long)>
    70d2:	cbz	r0, 712c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa4>
    70d4:	movs	r1, #0
    70d6:	add	r0, sp, #12
    70d8:	bl	62d0 <FatFile::readDirCache(bool)>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    if (!ldir) {
    70dc:	mov	r7, r0
    70de:	cbz	r0, 712c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa4>
    70e0:	movs	r4, #0
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
    70e2:	uxtb	r2, r4
    70e4:	mov	r1, r7
    70e6:	mov	r0, r6
    70e8:	adds	r4, #1
    70ea:	bl	5990 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    70ee:	ldrh	r3, [r5, #12]
    70f0:	mov	fp, r0
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    70f2:	mov	r0, r5
    70f4:	cbnz	r3, 70fe <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x76>
    70f6:	ldr	r3, [r5, #4]
    70f8:	ldr	r2, [r5, #8]
    70fa:	cmp	r3, r2
    70fc:	beq.n	7134 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xac>
    70fe:	bl	3284 <FsName::get16()>
    7102:	mov	r9, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    7104:	mov	r0, fp
    7106:	bl	31d0 <toUpcase(unsigned short)>
    710a:	mov	fp, r0
    710c:	mov	r0, r9
    710e:	bl	31d0 <toUpcase(unsigned short)>
    7112:	cmp	fp, r0
    7114:	bne.n	712c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa4>
      goto fail;
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
    7116:	cmp	r4, #13
    7118:	bne.n	70e2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5a>
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
  FatFile dir = *this;
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    711a:	add.w	r8, r8, #1
    711e:	ldr	r3, [sp, #4]
    7120:	uxtb.w	r8, r8
    7124:	cmp	r3, r8
    7126:	bcs.n	70c4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    7128:	movs	r0, #1
    712a:	b.n	712e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa6>

 fail:
  return false;
    712c:	movs	r0, #0
}
    712e:	add	sp, #52	; 0x34
    7130:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
    7134:	clz	r0, fp
    7138:	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    713a:	add	sp, #52	; 0x34
    713c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007140 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7140:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    7144:	mov	r6, r0

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7146:	sub	sp, #52	; 0x34
    7148:	mov	r5, r2
    714a:	mov	r9, r3
    714c:	str	r1, [sp, #0]
  FatFile dir = *this;
    714e:	add.w	lr, sp, #12
    7152:	add.w	r4, r2, #21
  DirFat_t* cacheDirEntry(uint8_t action);
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    7156:	movs	r7, #0
    7158:	ldmia	r6!, {r0, r1, r2, r3}
    715a:	stmia.w	lr!, {r0, r1, r2, r3}
    715e:	ldmia	r6!, {r0, r1, r2, r3}
    7160:	ldr.w	ip, [r6]
    7164:	add.w	r6, r5, #32
    7168:	stmia.w	lr!, {r0, r1, r2, r3}
    716c:	mov	r3, r7
    716e:	str.w	ip, [lr]
    7172:	lsls	r2, r3, #7
    for (uint8_t i = 0; i < 11; i++) {
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7174:	ldrb.w	r1, [r4, #1]!
    7178:	orr.w	r3, r2, r3, lsr #1
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    717c:	cmp	r4, r6
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    717e:	uxtab	r3, r1, r3
    7182:	uxtb	r3, r3
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    7184:	bne.n	7172 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x32>
    7186:	mov	r7, r3
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    7188:	movs	r6, #0
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    718a:	ldr	r3, [r5, #0]
    ls = 0;  // lowSurrogate
    718c:	strh	r6, [r5, #12]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    718e:	str	r3, [r5, #4]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7190:	cmp.w	r9, #0
    7194:	beq.n	7244 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x104>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7196:	orr.w	r3, r9, #64	; 0x40
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    719a:	mov.w	r8, #1
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    719e:	mov	sl, r6
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    71a0:	str	r3, [sp, #4]
    71a2:	ldr	r3, [sp, #0]
    71a4:	add	r0, sp, #12
    71a6:	rsb	r1, r8, r3
    71aa:	uxth	r1, r1
    71ac:	lsls	r1, r1, #5
    71ae:	bl	6554 <FatFile::seekSet(unsigned long)>
    71b2:	cmp	r0, #0
    71b4:	beq.n	725e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11e>
    71b6:	movs	r1, #0
    71b8:	add	r0, sp, #12
    71ba:	bl	62d0 <FatFile::readDirCache(bool)>
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    if (!ldir) {
    71be:	cmp	r0, #0
    71c0:	beq.n	725e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    71c2:	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    71c4:	cmp	r9, r8
    71c6:	ldr	r1, [sp, #4]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    71c8:	mov.w	lr, #15
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    71cc:	ldrb.w	r3, [r2, #40]	; 0x28
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    71d0:	ite	ne
    71d2:	movne	ip, r8
    71d4:	moveq	ip, r1
    71d6:	add.w	fp, r0, #4
    71da:	orr.w	r3, r3, #1
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    71de:	movs	r4, #0
    71e0:	strb.w	r3, [r2, #40]	; 0x28
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    71e4:	strb.w	sl, [r0, #12]
    ldir->checksum = checksum;
    71e8:	strb	r7, [r0, #13]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    71ea:	strh.w	sl, [r0, #26]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    71ee:	strb.w	ip, [r0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    71f2:	strb.w	lr, [r0, #11]
    71f6:	b.n	7212 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
 * \param[in] c The 16-bit character.
 */
static void putLfnChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    71f8:	cmp	r4, #10
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    71fa:	add.w	r4, r4, #1
    71fe:	add.w	fp, fp, #2
    7202:	uxtb	r4, r4
    7204:	ite	ls
    7206:	strhls.w	r0, [fp, #-2]
    720a:	strhhi.w	r0, [fp]
    720e:	cmp	r4, #13
    7210:	beq.n	7238 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    7212:	ldrh	r3, [r5, #12]
    7214:	cbnz	r3, 721e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xde>
    7216:	ldr	r2, [r5, #4]
    7218:	ldr	r3, [r5, #8]
    721a:	cmp	r2, r3
    721c:	beq.n	724c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x10c>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    721e:	mov	r0, r5
    7220:	bl	3284 <FsName::get16()>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c The 16-bit character.
 */
static void putLfnChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    7224:	cmp	r4, #4
    7226:	bhi.n	71f8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    7228:	adds	r4, #1
    722a:	strh.w	r0, [fp, #-3]
    722e:	add.w	fp, fp, #2
    7232:	uxtb	r4, r4
    7234:	cmp	r4, #13
    7236:	bne.n	7212 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7238:	add.w	r8, r8, #1
    723c:	uxtb.w	r8, r8
    7240:	cmp	r9, r8
    7242:	bcs.n	71a2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x62>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    7244:	movs	r0, #1

 fail:
  return false;
}
    7246:	add	sp, #52	; 0x34
    7248:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
    724c:	cbnz	r6, 7254 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    724e:	mov	r0, r6
    7250:	movs	r6, #1
    7252:	b.n	7224 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe4>
    7254:	adds	r6, #1
    7256:	movw	r0, #65535	; 0xffff
    725a:	uxtb	r6, r6
    725c:	b.n	7224 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe4>
    }
  }
  return true;

 fail:
  return false;
    725e:	movs	r0, #0
}
    7260:	add	sp, #52	; 0x34
    7262:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7266:	nop

00007268 <FatFile::makeSFN(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeSFN(FatLfn_t* fname) {
    7268:	mov	ip, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    726a:	movs	r0, #32
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    726c:	mov	r2, ip
    726e:	add.w	r1, ip, r0

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::makeSFN(FatLfn_t* fname) {
    7272:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    7276:	ldr.w	r3, [r2], #21
  uint8_t lc = 0;
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
    727a:	ldr.w	r5, [ip, #8]
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    727e:	strb.w	r0, [r2, #1]!
  DBG_HALT_IF(end == ptr);
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    7282:	cmp	r2, r1
    7284:	bne.n	727e <FatFile::makeSFN(FatLfn_t*)+0x16>
    fname->sfn[k] = ' ';
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    7286:	ldrb	r2, [r3, #0]
    7288:	cmp	r2, #46	; 0x2e
    728a:	ite	ne
    728c:	movne	r0, #1
    728e:	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    7290:	bne.n	729a <FatFile::makeSFN(FatLfn_t*)+0x32>
    7292:	ldrb.w	r2, [r3, #1]!
    7296:	cmp	r2, #46	; 0x2e
    7298:	beq.n	7292 <FatFile::makeSFN(FatLfn_t*)+0x2a>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    729a:	subs	r1, r5, #1
    729c:	cmp	r1, r3
    729e:	bls.n	72bc <FatFile::makeSFN(FatLfn_t*)+0x54>
    72a0:	ldrb.w	r2, [r5, #-1]
    72a4:	cmp	r2, #46	; 0x2e
    72a6:	beq.n	72bc <FatFile::makeSFN(FatLfn_t*)+0x54>
    72a8:	subs	r2, r5, #2
    72aa:	b.n	72b2 <FatFile::makeSFN(FatLfn_t*)+0x4a>
    72ac:	ldrb	r4, [r1, #0]
    72ae:	cmp	r4, #46	; 0x2e
    72b0:	beq.n	72bc <FatFile::makeSFN(FatLfn_t*)+0x54>
    72b2:	cmp	r3, r2
    72b4:	mov	r1, r2
    72b6:	add.w	r2, r2, #4294967295
    72ba:	bne.n	72ac <FatFile::makeSFN(FatLfn_t*)+0x44>

  for (; ptr < end; ptr++) {
    72bc:	cmp	r5, r3
    72be:	mov.w	r8, #0
    72c2:	bls.n	73c0 <FatFile::makeSFN(FatLfn_t*)+0x158>
    72c4:	movs	r6, #7
    72c6:	mov.w	lr, #8
    72ca:	mov	r4, r8
    72cc:	mov	r9, r8
    72ce:	b.n	72e2 <FatFile::makeSFN(FatLfn_t*)+0x7a>
    c = *ptr;
    if (c == '.' && ptr == dot) {
    72d0:	cmp	r1, r3
    72d2:	bne.n	72e8 <FatFile::makeSFN(FatLfn_t*)+0x80>
      in = 10;  // Max index for full 8.3 name.
    72d4:	movs	r6, #10
      i = 8;    // Place for extension.
    72d6:	movs	r4, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    72d8:	mov.w	lr, #16
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}

  for (; ptr < end; ptr++) {
    72dc:	adds	r3, #1
    72de:	cmp	r5, r3
    72e0:	bls.n	732e <FatFile::makeSFN(FatLfn_t*)+0xc6>
    c = *ptr;
    72e2:	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    72e4:	cmp	r2, #46	; 0x2e
    72e6:	beq.n	72d0 <FatFile::makeSFN(FatLfn_t*)+0x68>
    || c == '<' || c == '>' || c == '?' || c == '\\'|| c == '|';
}
//------------------------------------------------------------------------------
// Reserved characters for FAT short 8.3 names.
inline bool sfnReservedChar(uint8_t c) {
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    72e8:	cmp	r2, #34	; 0x22
    72ea:	beq.n	7304 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    72ec:	cmp	r2, #124	; 0x7c
    72ee:	beq.n	7304 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    72f0:	sub.w	r7, r2, #91	; 0x5b
    72f4:	cmp	r7, #2
    72f6:	bls.n	7304 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    return true;
  }
  //  *+,./ or :;<=>?
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    72f8:	sub.w	r7, r2, #42	; 0x2a
    72fc:	cmp	r7, #5
    72fe:	bhi.n	7362 <FatFile::makeSFN(FatLfn_t*)+0xfa>
    7300:	cmp	r2, #45	; 0x2d
    7302:	beq.n	7362 <FatFile::makeSFN(FatLfn_t*)+0xfa>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    7304:	and.w	r2, r2, #192	; 0xc0
    7308:	cmp	r2, #128	; 0x80
    730a:	beq.n	7388 <FatFile::makeSFN(FatLfn_t*)+0x120>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    730c:	cmp	r4, r6
    730e:	bhi.n	734e <FatFile::makeSFN(FatLfn_t*)+0xe6>
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
    7310:	movs	r0, #0
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
          continue;
        }
        c = '_';
    7312:	movs	r2, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if (isUpper(c)) {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    7314:	adds	r7, r4, #1
    7316:	add.w	sl, ip, r4
    731a:	uxtb	r4, r7
    731c:	strb.w	r2, [sl, #22]
      if (i < 7) {
    7320:	cmp	r4, #6
    7322:	bhi.n	72dc <FatFile::makeSFN(FatLfn_t*)+0x74>
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}

  for (; ptr < end; ptr++) {
    7324:	adds	r3, #1
      } else if (isUpper(c)) {
        uc |= bit;
      }
      fname->sfn[i++] = c;
      if (i < 7) {
        fname->seqPos = i;
    7326:	strb.w	r4, [ip, #20]
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}

  for (; ptr < end; ptr++) {
    732a:	cmp	r5, r3
    732c:	bhi.n	72e2 <FatFile::makeSFN(FatLfn_t*)+0x7a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    732e:	ldrb.w	r3, [ip, #22]
    7332:	cmp	r3, #32
    7334:	beq.n	73ba <FatFile::makeSFN(FatLfn_t*)+0x152>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    7336:	cbz	r0, 7394 <FatFile::makeSFN(FatLfn_t*)+0x12c>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    7338:	tst.w	r9, r8
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    733c:	mov.w	r0, #1
  if (fname->sfn[0] == ' ') {
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    7340:	it	ne
    7342:	movne.w	r8, #2
    7346:	strb.w	r8, [ip, #21]
    734a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }
        c = '_';
      }
      if (i > in) {
        is83 = false;
        if (in == 10 || ptr > dot) {
    734e:	cmp	r6, #10
    7350:	beq.n	738c <FatFile::makeSFN(FatLfn_t*)+0x124>
    7352:	cmp	r1, r3
    7354:	ite	cs
    7356:	movcs	r3, #0
    7358:	movcc	r3, #1
    735a:	cbnz	r3, 738c <FatFile::makeSFN(FatLfn_t*)+0x124>
          continue;
        }
        c = '_';
      }
      if (i > in) {
        is83 = false;
    735c:	mov	r0, r3
        if (in == 10 || ptr > dot) {
         // Done - extension longer than three characters or no extension.
          break;
        }
        // Skip to dot.
        ptr = dot - 1;
    735e:	subs	r3, r1, #1
        continue;
    7360:	b.n	72dc <FatFile::makeSFN(FatLfn_t*)+0x74>
    7362:	sub.w	r7, r2, #58	; 0x3a
    7366:	cmp	r7, #5
    7368:	bls.n	7304 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (sfnReservedChar(c)) {
    736a:	sub.w	r7, r2, #33	; 0x21
    736e:	cmp	r7, #93	; 0x5d
    7370:	bhi.n	7304 <FatFile::makeSFN(FatLfn_t*)+0x9c>
        if ((c & 0XC0) == 0X80) {
          continue;
        }
        c = '_';
      }
      if (i > in) {
    7372:	cmp	r4, r6
    7374:	bhi.n	734e <FatFile::makeSFN(FatLfn_t*)+0xe6>
        }
        // Skip to dot.
        ptr = dot - 1;
        continue;
      }
      if (isLower(c)) {
    7376:	sub.w	r7, r2, #97	; 0x61
    737a:	cmp	r7, #25
    737c:	bhi.n	73ac <FatFile::makeSFN(FatLfn_t*)+0x144>
        c += 'A' - 'a';
    737e:	subs	r2, #32
        lc |= bit;
    7380:	orr.w	r8, lr, r8
        // Skip to dot.
        ptr = dot - 1;
        continue;
      }
      if (isLower(c)) {
        c += 'A' - 'a';
    7384:	uxtb	r2, r2
    7386:	b.n	7314 <FatFile::makeSFN(FatLfn_t*)+0xac>
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
    7388:	movs	r0, #0
    738a:	b.n	72dc <FatFile::makeSFN(FatLfn_t*)+0x74>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    738c:	ldrb.w	r3, [ip, #22]
    7390:	cmp	r3, #32
    7392:	beq.n	73ba <FatFile::makeSFN(FatLfn_t*)+0x152>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    7394:	ldrb.w	r3, [ip, #20]
    goto fail;
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    7398:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    739a:	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    739c:	movs	r2, #49	; 0x31
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    739e:	add	r3, ip
    goto fail;
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    73a0:	strb.w	r0, [ip, #21]
    fname->sfn[fname->seqPos] = '~';
    73a4:	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    73a6:	strb	r2, [r3, #23]
    73a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        continue;
      }
      if (isLower(c)) {
        c += 'A' - 'a';
        lc |= bit;
      } else if (isUpper(c)) {
    73ac:	sub.w	r7, r2, #65	; 0x41
    73b0:	cmp	r7, #25
        uc |= bit;
    73b2:	it	ls
    73b4:	orrls.w	r9, lr, r9
    73b8:	b.n	7314 <FatFile::makeSFN(FatLfn_t*)+0xac>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    73ba:	movs	r0, #0
    73bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}

  for (; ptr < end; ptr++) {
    73c0:	mov	r9, r8
    73c2:	b.n	732e <FatFile::makeSFN(FatLfn_t*)+0xc6>

000073c4 <FatFile::makeUniqueSfn(FatLfn_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    73c4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73c8:	mov	r8, r1
    73ca:	mov	r5, r0
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    73cc:	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    73d0:	movs	r4, #0
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    73d2:	ldrb	r7, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    73d4:	add.w	r6, r1, #22
    73d8:	ldr.w	fp, [pc, #148]	; 7470 <FatFile::makeUniqueSfn(FatLfn_t*)+0xac>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    73dc:	mov.w	sl, #126	; 0x7e
    73e0:	cmp	r7, #3
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
    73e2:	ldr.w	r2, [fp]
    73e6:	it	cs
    73e8:	movcs	r7, #3
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
     DBG_WARN_IF(seq > FIRST_HASH_SEQ);
#ifdef USE_LFN_HASH
    hex = Bernstein(fname->begin, fname->end, seq);
#else
    hex += millis();
    73ea:	add	r4, r2
#endif
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    73ec:	adds	r3, r7, #4
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
     DBG_WARN_IF(seq > FIRST_HASH_SEQ);
#ifdef USE_LFN_HASH
    hex = Bernstein(fname->begin, fname->end, seq);
#else
    hex += millis();
    73ee:	uxth	r4, r4
#endif
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    73f0:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    73f2:	and.w	r2, r4, #15
#endif
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    73f6:	subs	r0, r3, #1
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    73f8:	lsrs	r4, r4, #4
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    73fa:	cmp	r2, #9
    73fc:	add.w	r1, r2, #55	; 0x37
    7400:	it	ls
    7402:	addls.w	r1, r2, #48	; 0x30
    7406:	add.w	r2, r8, r3
#endif
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    740a:	uxtb	r3, r0
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    740c:	strb	r1, [r2, #22]
#endif
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    740e:	cmp	r7, r3
    7410:	bcc.n	73f2 <FatFile::makeUniqueSfn(FatLfn_t*)+0x2e>
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    7412:	add.w	r3, r8, r7
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    7416:	movs	r1, #0
    7418:	mov	r0, r5
    741a:	strb.w	sl, [r3, #22]
    741e:	bl	6554 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    7422:	movs	r1, #1
    7424:	mov	r0, r5
    7426:	bl	62d0 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    742a:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    742c:	mov	r3, r0
    742e:	cbz	r0, 745c <FatFile::makeUniqueSfn(FatLfn_t*)+0x98>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    7430:	ldrb.w	lr, [r0]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7434:	mov	r1, r0
    7436:	mov	r0, r6
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    7438:	cmp.w	lr, #0
    743c:	beq.n	7468 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    743e:	ldrb	r3, [r3, #11]
    7440:	lsls	r3, r3, #28
    7442:	bmi.n	7422 <FatFile::makeUniqueSfn(FatLfn_t*)+0x5e>
    7444:	bl	c740 <memcmp>
    7448:	cmp	r0, #0
    744a:	bne.n	7422 <FatFile::makeUniqueSfn(FatLfn_t*)+0x5e>
    744c:	add.w	r9, r9, #4294967295
  uint16_t hex = 0;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    7450:	ands.w	r9, r9, #255	; 0xff
    7454:	bne.n	73e0 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1c>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    7456:	mov	r0, r9
    7458:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    745c:	ldrb	r0, [r5, #1]
    745e:	clz	r0, r0
    7462:	lsrs	r0, r0, #5
    7464:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

 fail:
  return false;

 done:
  return true;
    7468:	movs	r0, #1
    746a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    746e:	nop
    7470:	.word	0x20018b9c

00007474 <FatFile::open(FatFile*, FatLfn_t*, int)>:
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    7474:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;

  if (!dirFile->isDir() || isOpen()) {
    7478:	ldrb	r4, [r1, #0]

 done:
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    747a:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;

  if (!dirFile->isDir() || isOpen()) {
    747c:	tst.w	r4, #112	; 0x70
    7480:	beq.n	7486 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    7482:	ldrb	r4, [r0, #0]
    7484:	cbz	r4, 748e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a>
    goto fail;
  }
  return true;

 fail:
  return false;
    7486:	movs	r0, #0
}
    7488:	add	sp, #52	; 0x34
    748a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    748e:	ldr	r4, [r2, #16]
    7490:	ldr	r6, [pc, #636]	; (7710 <FatFile::open(FatFile*, FatLfn_t*, int)+0x29c>)
    7492:	adds	r4, #12
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    7494:	ldrb	r5, [r2, #21]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    7496:	umull	r6, r4, r6, r4
    749a:	ubfx	r4, r4, #2, #8
    749e:	str	r4, [sp, #12]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    74a0:	lsls	r4, r5, #30
    74a2:	bne.n	7530 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbc>
    74a4:	movs	r7, #1
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint8_t nameOrd;
  uint16_t freeIndex = 0;
    74a6:	mov.w	r8, #0
    74aa:	mov	r6, r1
    74ac:	mov	r5, r2
    74ae:	str	r3, [sp, #24]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    74b0:	mov	sl, r8
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    74b2:	ldr	r3, [r6, #8]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    74b4:	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    74b6:	mov	r9, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    74b8:	add.w	fp, r5, #22
    74bc:	str	r0, [sp, #36]	; 0x24
    74be:	mov	r1, r8
    74c0:	mov	r0, r6
    74c2:	str	r2, [sp, #16]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    74c4:	str	r3, [sp, #32]
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    74c6:	str.w	r8, [sp, #28]
 done:
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    74ca:	str.w	r8, [sp, #20]
    74ce:	bl	6554 <FatFile::seekSet(unsigned long)>
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    74d2:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    74d4:	movs	r1, #0
    74d6:	mov	r0, r6
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    74d8:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache();
    74dc:	bl	62d0 <FatFile::readDirCache(bool)>
    if (!dir) {
    74e0:	cmp	r0, #0
    74e2:	beq.w	7600 <FatFile::open(FatFile*, FatLfn_t*, int)+0x18c>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    74e6:	ldrb	r3, [r0, #0]
    74e8:	sub.w	r2, r3, #229	; 0xe5
    74ec:	clz	r2, r2
    74f0:	lsrs	r2, r2, #5
    74f2:	cbz	r3, 7552 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    74f4:	cbnz	r2, 7552 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    74f6:	cmp	r4, r7
    74f8:	it	cc
    74fa:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    74fc:	cmp	r3, #46	; 0x2e
    74fe:	beq.n	754c <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
    7500:	cbnz	r2, 754c <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
    7502:	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    7504:	cmp	r1, #15
    7506:	beq.n	75be <FatFile::open(FatFile*, FatLfn_t*, int)+0x14a>
      if (order == 1) {
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
          lfnOrd = 0;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    7508:	lsls	r3, r1, #28
    750a:	bmi.n	754c <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
      if (lfnOrd) {
    750c:	cmp.w	r9, #0
    7510:	bne.w	76ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x25a>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7514:	movs	r2, #11
    7516:	mov	r1, fp
    7518:	bl	c740 <memcmp>
    751c:	cmp	r0, #0
    751e:	bne.n	74d2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x5e>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    7520:	ldr	r3, [sp, #16]
    7522:	ldrb	r3, [r3, #21]
    7524:	lsls	r0, r3, #31
    7526:	bpl.w	76fa <FatFile::open(FatFile*, FatLfn_t*, int)+0x286>
          goto found;
        }
        fnameFound = true;
    752a:	movs	r3, #1
    752c:	str	r3, [sp, #20]
    752e:	b.n	74d2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x5e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    7530:	ldr	r4, [sp, #12]
    7532:	adds	r7, r4, #1
    7534:	uxtb	r7, r7
    7536:	b.n	74a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x32>
          (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = nameOrd;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    7538:	add.w	sl, sl, #4294967295
    753c:	uxtb.w	sl, sl
    7540:	cmp	r3, sl
    7542:	bne.n	754c <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
    7544:	ldrb	r3, [r0, #13]
    7546:	ldr	r1, [sp, #28]
    7548:	cmp	r1, r3
    754a:	beq.n	75e0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16c>
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    754c:	mov.w	r9, #0
    7550:	b.n	74d2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x5e>
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    7552:	cmp	r4, #0
    7554:	it	eq
    7556:	moveq	r8, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    7558:	cmp	r4, r7
    755a:	bcs.n	7560 <FatFile::open(FatFile*, FatLfn_t*, int)+0xec>
        freeFound++;
    755c:	adds	r4, #1
    755e:	uxtb	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    7560:	cmp	r3, #0
    7562:	bne.n	74fc <FatFile::open(FatFile*, FatLfn_t*, int)+0x88>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    7564:	ldr	r2, [sp, #24]
    7566:	mov	r3, r2
    7568:	lsls	r2, r3, #22
    756a:	bpl.n	7486 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    756c:	and.w	r3, r3, #3
    7570:	subs	r3, #1
    7572:	cmp	r3, #1
    7574:	bhi.n	7486 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    DBG_WARN_MACRO;
    goto fail;
  }
  // Keep found entries or start at current index if no free entries found.
  if (freeFound == 0) {
    7576:	cmp	r4, #0
    7578:	it	eq
    757a:	moveq	r8, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    757c:	cmp	r4, r7
    757e:	bcc.n	7588 <FatFile::open(FatFile*, FatLfn_t*, int)+0x114>
    7580:	b.n	7614 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a0>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    7582:	uxtb	r4, r3
  // Keep found entries or start at current index if no free entries found.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    7584:	cmp	r7, r4
    7586:	bls.n	7614 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a0>
    dir = dirFile->readDirCache();
    7588:	movs	r1, #0
    758a:	mov	r0, r6
    758c:	bl	62d0 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    7590:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    7592:	cmp	r0, #0
    7594:	bne.n	7582 <FatFile::open(FatFile*, FatLfn_t*, int)+0x10e>
      if (dirFile->getError()) {
    7596:	ldrb	r3, [r6, #1]
    7598:	cmp	r3, #0
    759a:	bne.w	7486 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    759e:	cmp	r7, r4
    75a0:	bls.n	7614 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a0>
    75a2:	ldr	r5, [sp, #32]
    75a4:	b.n	75b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x13e>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    freeFound += vol->dirEntriesPerCluster();
    75a6:	ldrb	r3, [r5, #4]
    75a8:	add.w	r4, r4, r3, lsl #4
    75ac:	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    75ae:	cmp	r7, r4
    75b0:	bls.n	7614 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a0>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    75b2:	mov	r0, r6
    75b4:	bl	5be0 <FatFile::addDirCluster()>
    75b8:	cmp	r0, #0
    75ba:	bne.n	75a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x132>
    75bc:	b.n	7486 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    75be:	cmp.w	r9, #0
    75c2:	bne.n	7538 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        order = ldir->order & 0X1F;
    75c4:	and.w	sl, r3, #31
        if (order != nameOrd ||
    75c8:	ldr	r2, [sp, #12]
    75ca:	cmp	r2, sl
    75cc:	bne.n	74d2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x5e>
    75ce:	lsls	r1, r3, #25
    75d0:	bmi.n	75d8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x164>
    75d2:	ldr.w	sl, [sp, #12]
    75d6:	b.n	74d2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x5e>
          (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = nameOrd;
        checksum = ldir->checksum;
    75d8:	ldrb	r3, [r0, #13]
    75da:	mov	r9, r2
    75dc:	mov	sl, r2
    75de:	str	r3, [sp, #28]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      if (order == 1) {
    75e0:	cmp.w	sl, #1
    75e4:	bne.w	74d2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x5e>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    75e8:	adds	r1, r5, #1
    75ea:	mov	r3, r9
    75ec:	ldr	r2, [sp, #16]
    75ee:	mov	r0, r6
    75f0:	uxth	r1, r1
    75f2:	bl	7088 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    75f6:	cmp	r0, #0
    75f8:	it	eq
    75fa:	moveq.w	r9, #0
    75fe:	b.n	74d2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x5e>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
    7600:	ldrb	r3, [r6, #1]
    7602:	cmp	r3, #0
    7604:	bne.w	7486 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    7608:	ldr	r2, [sp, #24]
    760a:	mov	r3, r2
    760c:	lsls	r2, r3, #22
    760e:	bpl.w	7486 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    7612:	b.n	756c <FatFile::open(FatFile*, FatLfn_t*, int)+0xf8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    freeFound += vol->dirEntriesPerCluster();
  }
  if (fnameFound) {
    7614:	ldr	r3, [sp, #20]
    7616:	cbz	r3, 7626 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1b2>
    if (!dirFile->makeUniqueSfn(fname)) {
    7618:	ldr	r1, [sp, #16]
    761a:	mov	r0, r6
    761c:	bl	73c4 <FatFile::makeUniqueSfn(FatLfn_t*)>
    7620:	cmp	r0, #0
    7622:	beq.w	7486 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
    7626:	subs	r7, #1
  curIndex = freeIndex + lfnOrd;
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    7628:	ldr	r2, [sp, #16]
    762a:	mov	r0, r6
  if (fnameFound) {
    if (!dirFile->makeUniqueSfn(fname)) {
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
    762c:	uxtb.w	r9, r7
  curIndex = freeIndex + lfnOrd;
    7630:	add.w	r5, r8, r9
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    7634:	mov	r3, r9
    if (!dirFile->makeUniqueSfn(fname)) {
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
  curIndex = freeIndex + lfnOrd;
    7636:	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    7638:	mov	r1, r5
    763a:	bl	7140 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    763e:	cmp	r0, #0
    7640:	beq.w	7486 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    7644:	lsls	r1, r5, #5
    7646:	mov	r0, r6
    7648:	bl	6554 <FatFile::seekSet(unsigned long)>
    764c:	cmp	r0, #0
    764e:	beq.w	7486 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    7652:	movs	r1, #0
    7654:	mov	r0, r6
    7656:	bl	62d0 <FatFile::readDirCache(bool)>
    goto fail;
  }
  dir = dirFile->cacheDir(curIndex);
  if (!dir) {
    765a:	mov	r4, r0
    765c:	cmp	r0, #0
    765e:	beq.w	7486 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    7662:	movs	r2, #32
    7664:	movs	r1, #0
    7666:	bl	c86c <memset>
  memcpy(dir->name, fname->sfn, 11);
    766a:	ldr	r7, [sp, #16]

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // Set timestamps.
  if (FsDateTime::callback) {
    766c:	ldr	r2, [pc, #164]	; (7714 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a0>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    766e:	mov	r3, r7
    7670:	ldr.w	r0, [r3, #22]!
    7674:	ldr	r1, [r3, #4]
    7676:	str	r0, [r4, #0]
    7678:	str	r1, [r4, #4]
    767a:	ldrh	r1, [r3, #8]
    767c:	ldrb	r3, [r3, #10]
    767e:	strh	r1, [r4, #8]
    7680:	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    7682:	ldrb	r3, [r7, #21]

  // Set timestamps.
  if (FsDateTime::callback) {
    7684:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    7686:	and.w	r3, r3, #24
    768a:	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    768c:	cmp	r7, #0
    768e:	beq.n	7702 <FatFile::open(FatFile*, FatLfn_t*, int)+0x28e>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    7690:	add.w	r2, sp, #43	; 0x2b
    7694:	add.w	r1, sp, #46	; 0x2e
    7698:	add	r0, sp, #44	; 0x2c
    769a:	blx	r7
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    769c:	ldrh.w	r1, [sp, #44]	; 0x2c
    76a0:	ldrh.w	r2, [sp, #46]	; 0x2e
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    76a4:	ldrb.w	r3, [sp, #43]	; 0x2b
    76a8:	strh	r1, [r4, #16]
    76aa:	strh	r2, [r4, #14]
    76ac:	strb	r3, [r4, #13]
    76ae:	ldr	r2, [sp, #32]
    76b0:	ldrb.w	r3, [r2, #40]	; 0x28
    76b4:	orr.w	r3, r3, #1
    76b8:	strb.w	r3, [r2, #40]	; 0x28
  // Force write of entry to device.
  vol->cacheDirty();

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    76bc:	str.w	r9, [sp]
    76c0:	mov	r2, r5
    76c2:	ldr	r3, [sp, #24]
    76c4:	mov	r1, r6
    76c6:	ldr	r0, [sp, #36]	; 0x24
    76c8:	bl	6604 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    76cc:	b.n	7488 <FatFile::open(FatFile*, FatLfn_t*, int)+0x14>
          lfnOrd = 0;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    76ce:	cmp.w	sl, #1
    76d2:	bne.w	7486 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    76d6:	subs	r4, r0, #1
    76d8:	mov	r3, r2
    76da:	adds	r0, #10
    76dc:	lsls	r1, r3, #7
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    76de:	ldrb.w	r2, [r4, #1]!
    76e2:	orr.w	r3, r1, r3, lsr #1
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    76e6:	cmp	r0, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    76e8:	uxtab	r3, r2, r3
    76ec:	uxtb	r3, r3
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    76ee:	bne.n	76dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x268>
    76f0:	mov	r2, r3
    76f2:	ldr	r3, [sp, #28]
    76f4:	cmp	r3, r2
    76f6:	bne.w	7486 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    76fa:	ldr	r3, [sp, #24]
    76fc:	lsls	r1, r3, #20
    76fe:	bpl.n	76bc <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
    7700:	b.n	7486 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    7702:	movw	r3, #22049	; 0x5621
    7706:	strh	r3, [r4, #16]
    7708:	strh	r3, [r4, #24]
    770a:	strh	r3, [r4, #18]
    770c:	b.n	76ae <FatFile::open(FatFile*, FatLfn_t*, int)+0x23a>
    770e:	nop
    7710:	.word	0x4ec4ec4f
    7714:	.word	0x20017a1c

00007718 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    7718:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    771c:	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    771e:	ldrb	r3, [r1, #0]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    7720:	sub	sp, #8
    7722:	mov	r0, r1
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    7724:	cmp	r3, #32
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    7726:	mov	r4, r2
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    7728:	bne.n	7732 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    772a:	ldrb.w	r3, [r0, #1]!
    772e:	cmp	r3, #32
    7730:	beq.n	772a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
    7732:	str	r0, [r4, #0]
  while (*path && !isDirSeparator(*path)) {
    7734:	ldrb	r5, [r0, #0]
    7736:	cmp	r5, #47	; 0x2f
    7738:	it	ne
    773a:	cmpne	r5, #0
    773c:	ite	eq
    773e:	moveq	r5, #1
    7740:	movne	r5, #0
    7742:	beq.n	77c2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xaa>
    7744:	mov	r8, r5
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':'
    7746:	ldr	r6, [pc, #176]	; (77f8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xe0>)
    7748:	b.n	7792 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    if (!path) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    if (cp < 0X80 && lfnReservedChar(cp)) {
    774a:	cmp	r2, #127	; 0x7f
    path = FsUtf::mbToCp(path, path + 4, &cp);
    if (!path) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    774c:	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    7750:	bhi.n	777c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x64>
    7752:	uxtb	r1, r2
    7754:	sub.w	r3, r1, #34	; 0x22
    7758:	cmp	r1, #31
    775a:	uxtb	r3, r3
    775c:	ite	hi
    775e:	movhi.w	lr, #0
    7762:	movls.w	lr, #1
    7766:	cmp	r3, #29
    7768:	bls.n	77aa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x92>
    776a:	movs	r3, #1
    || c == '<' || c == '>' || c == '?' || c == '\\'|| c == '|';
    776c:	cmp	lr, r3
    776e:	bcs.n	77ba <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    7770:	and.w	r1, r1, #191	; 0xbf
    7774:	cmp	r1, #60	; 0x3c
    7776:	beq.n	77ba <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    7778:	cmp	r2, #92	; 0x5c
    777a:	beq.n	77ba <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len++;
#endif  // USE_UTF8_LONG_NAMES
    if (cp != '.' && cp != ' ') {
    777c:	cmp	r2, #46	; 0x2e
    777e:	beq.n	778a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    7780:	cmp	r2, #32
    7782:	beq.n	778a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
      // Need to trim trailing dots spaces.
      fname->len = len;
    7784:	str.w	r8, [r4, #16]
      fname->end = path;
    7788:	str	r0, [r4, #8]
  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->begin = path;
  while (*path && !isDirSeparator(*path)) {
    778a:	ldrb	r3, [r0, #0]
    778c:	cbz	r3, 77c2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xaa>
    778e:	cmp	r3, #47	; 0x2f
    7790:	beq.n	77c2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xaa>
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    7792:	add	r2, sp, #4
    7794:	adds	r1, r0, #4
    7796:	bl	2ff0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    779a:	cbz	r0, 77ba <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    779c:	ldr	r2, [sp, #4]
    779e:	cmp.w	r2, #65536	; 0x10000
    77a2:	bcc.n	774a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x32>
    77a4:	add.w	r8, r8, #2
    77a8:	b.n	777c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x64>
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':'
    77aa:	lsr.w	r3, r6, r3
    77ae:	and.w	r3, r3, #1
    77b2:	eor.w	r3, r3, #1
    || c == '<' || c == '>' || c == '?' || c == '\\'|| c == '|';
    77b6:	cmp	lr, r3
    77b8:	bcc.n	7770 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x58>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
    77ba:	mov	r0, r5
    77bc:	add	sp, #8
    77be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    77c2:	ldr	r3, [r4, #16]
    77c4:	subs	r3, #1
    77c6:	cmp	r3, #254	; 0xfe
    77c8:	bhi.n	77ee <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    77ca:	ldrb	r3, [r0, #0]
    77cc:	cmp	r3, #32
    77ce:	bne.n	77d8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc0>
    77d0:	ldrb.w	r3, [r0, #1]!
    77d4:	cmp	r3, #32
    77d6:	beq.n	77d0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb8>
    77d8:	cmp	r3, #47	; 0x2f
    77da:	beq.n	77d0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb8>
  *ptr = path;
    77dc:	str	r0, [r7, #0]
  return makeSFN(fname);
    77de:	mov	r0, r4
    77e0:	bl	7268 <FatFile::makeSFN(FatLfn_t*)>
    77e4:	mov	r5, r0

 fail:
  return false;
}
    77e6:	mov	r0, r5
    77e8:	add	sp, #8
    77ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
    77ee:	movs	r5, #0
}
    77f0:	mov	r0, r5
    77f2:	add	sp, #8
    77f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77f8:	.word	0x31002101

000077fc <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    77fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    7800:	ldrb	r2, [r0, #2]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    7802:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    7804:	movs	r3, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    7806:	lsls	r2, r2, #30
    7808:	strb.w	r3, [sp, #4]
    780c:	strb.w	r3, [sp, #5]
    7810:	strb.w	r3, [sp, #6]
    7814:	bpl.n	7858 <FatFile::remove()+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    7816:	ldr	r1, [r0, #32]
    7818:	mov	r5, r0
    781a:	cbnz	r1, 7862 <FatFile::remove()+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    781c:	movs	r1, #1
    781e:	mov	r0, r5
    7820:	bl	5c5c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7824:	cbz	r0, 7858 <FatFile::remove()+0x5c>
    7826:	subs	r1, r0, #1
    7828:	add.w	r7, r0, #10
  DirFat_t* cacheDirEntry(uint8_t action);
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    782c:	movs	r4, #0
    782e:	lsls	r2, r4, #7
    for (uint8_t i = 0; i < 11; i++) {
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7830:	ldrb.w	r6, [r1, #1]!
    7834:	orr.w	r3, r2, r4, lsr #1
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    7838:	cmp	r7, r1
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    783a:	uxtab	r3, r6, r3
    783e:	uxtb	r4, r3
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    7840:	bne.n	782e <FatFile::remove()+0x32>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    7842:	movs	r7, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    7844:	movs	r3, #0
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    7846:	strb	r7, [r0, #0]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    7848:	ldr	r6, [r5, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    784a:	strb	r3, [r5, #0]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    784c:	add.w	r0, r6, #40	; 0x28
  m_flags = 0;
    7850:	strb	r3, [r5, #2]
    7852:	bl	31c0 <FsCache::sync()>
    7856:	cbnz	r0, 786e <FatFile::remove()+0x72>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    7858:	movs	r6, #0
}
    785a:	mov	r0, r6
    785c:	add	sp, #40	; 0x28
    785e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    7862:	ldr	r0, [r0, #8]
    7864:	bl	6dfc <FatPartition::freeChain(unsigned long)>
    7868:	cmp	r0, #0
    786a:	bne.n	781c <FatFile::remove()+0x20>
    786c:	b.n	7858 <FatFile::remove()+0x5c>
    786e:	add.w	r0, r6, #568	; 0x238
    7872:	bl	31c0 <FsCache::sync()>
    7876:	cmp	r0, #0
    7878:	beq.n	7858 <FatFile::remove()+0x5c>
    787a:	ldr	r0, [r6, #0]
  }
  bool cacheSafeWrite(uint32_t sector, const uint8_t* dst, size_t count) {
    return m_cache.cacheSafeWrite(sector, dst, count);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    787c:	ldr	r3, [r0, #0]
    787e:	ldr	r3, [r3, #32]
    7880:	blx	r3
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7882:	mov	r6, r0
    7884:	cmp	r0, #0
    7886:	beq.n	7858 <FatFile::remove()+0x5c>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    7888:	ldrb	r3, [r5, #3]
    788a:	cmp	r3, #0
    788c:	beq.n	785a <FatFile::remove()+0x5e>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    788e:	mov	r1, r5
    7890:	add	r0, sp, #4
    7892:	bl	60c8 <FatFile::openCluster(FatFile*)>
    7896:	cmp	r0, #0
    7898:	beq.n	7858 <FatFile::remove()+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    789a:	ldrb	r3, [r5, #3]
    789c:	cmp	r3, #0
    789e:	beq.n	7858 <FatFile::remove()+0x5c>
    78a0:	mov.w	r8, #1
    78a4:	b.n	78e8 <FatFile::remove()+0xec>
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    78a6:	add	r0, sp, #4
    78a8:	bl	62d0 <FatFile::readDirCache(bool)>
    78ac:	add.w	r1, r8, #1
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    if (!ldir) {
    78b0:	cmp	r0, #0
    78b2:	beq.n	7858 <FatFile::remove()+0x5c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    78b4:	ldrb	r3, [r0, #11]
    78b6:	cmp	r3, #15
    78b8:	bne.n	7858 <FatFile::remove()+0x5c>
        order != (ldir->order & 0X1F) ||
    78ba:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    78bc:	and.w	r3, r2, #31
    78c0:	cmp	r8, r3
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    78c2:	uxtb.w	r8, r1
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    78c6:	bne.n	7858 <FatFile::remove()+0x5c>
        order != (ldir->order & 0X1F) ||
    78c8:	ldrb	r3, [r0, #13]
    78ca:	cmp	r3, r4
    78cc:	bne.n	7858 <FatFile::remove()+0x5c>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    78ce:	strb	r7, [r0, #0]
    m_vol->cacheDirty();
    78d0:	ldr	r1, [r5, #8]
    78d2:	ldrb.w	r3, [r1, #40]	; 0x28
    78d6:	orr.w	r3, r3, #1
    78da:	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    78de:	lsls	r3, r2, #25
    78e0:	bmi.n	7900 <FatFile::remove()+0x104>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    78e2:	ldrb	r3, [r5, #3]
    78e4:	cmp	r3, r8
    78e6:	bcc.n	7858 <FatFile::remove()+0x5c>
    78e8:	ldrh	r1, [r5, #4]
    78ea:	add	r0, sp, #4
    78ec:	rsb	r1, r8, r1
    78f0:	uxth	r1, r1
    78f2:	lsls	r1, r1, #5
    78f4:	bl	6554 <FatFile::seekSet(unsigned long)>
    78f8:	movs	r1, #0
    78fa:	cmp	r0, #0
    78fc:	bne.n	78a6 <FatFile::remove()+0xaa>
    78fe:	b.n	7858 <FatFile::remove()+0x5c>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    7900:	ldr	r4, [r5, #8]
    7902:	add.w	r0, r4, #40	; 0x28
    7906:	bl	31c0 <FsCache::sync()>
    790a:	cmp	r0, #0
    790c:	beq.n	7858 <FatFile::remove()+0x5c>
    790e:	add.w	r0, r4, #568	; 0x238
    7912:	bl	31c0 <FsCache::sync()>
    7916:	cmp	r0, #0
    7918:	beq.n	7858 <FatFile::remove()+0x5c>
    791a:	ldr	r0, [r4, #0]
  }
  bool cacheSafeWrite(uint32_t sector, const uint8_t* dst, size_t count) {
    return m_cache.cacheSafeWrite(sector, dst, count);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    791c:	ldr	r3, [r0, #0]
    791e:	ldr	r3, [r3, #32]
    7920:	blx	r3
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7922:	cmp	r0, #0
    7924:	beq.n	7858 <FatFile::remove()+0x5c>
    7926:	b.n	785a <FatFile::remove()+0x5e>

00007928 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7928:	push	{r3, r4, r5, r6, r7, lr}
    792a:	movs	r5, #0
    792c:	mov	r6, r0
    792e:	mov	r7, r1
    7930:	str	r5, [r0, #56]	; 0x38
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    7932:	ldr	r4, [r1, #56]	; 0x38
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7934:	str	r5, [r0, #60]	; 0x3c
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    7936:	cbz	r4, 795c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    7938:	mov	r1, r0
    793a:	movs	r0, #36	; 0x24
    793c:	bl	7c4c <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    7940:	strb	r5, [r0, #0]
    7942:	strb	r5, [r0, #1]
    *m_fFile = *from.m_fFile;
    7944:	mov	r4, r0
    7946:	strb	r5, [r0, #2]
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    7948:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    794a:	ldr	r5, [r7, #56]	; 0x38
    794c:	ldmia	r5!, {r0, r1, r2, r3}
    794e:	stmia	r4!, {r0, r1, r2, r3}
    7950:	ldmia	r5!, {r0, r1, r2, r3}
    7952:	stmia	r4!, {r0, r1, r2, r3}
    7954:	ldr	r3, [r5, #0]
    7956:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    7958:	mov	r0, r6
    795a:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    795c:	ldr	r3, [r1, #60]	; 0x3c
    795e:	cmp	r3, #0
    7960:	beq.n	7958 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    7962:	mov	r1, r0
    7964:	movs	r0, #56	; 0x38
    7966:	bl	7c4c <operator new(unsigned int, unsigned long*)>
    796a:	strb.w	r4, [r0, #49]	; 0x31
    796e:	strb.w	r4, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    7972:	mov	r2, r0
    7974:	strb.w	r4, [r0, #51]	; 0x33
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    7978:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    797a:	ldr	r3, [r7, #60]	; 0x3c
    797c:	add.w	r1, r3, #48	; 0x30
    7980:	ldr	r7, [r3, #0]
    7982:	adds	r3, #16
    7984:	ldr.w	r5, [r3, #-12]
    7988:	adds	r2, #16
    798a:	ldr.w	r4, [r3, #-8]
    798e:	ldr.w	r0, [r3, #-4]
    7992:	cmp	r3, r1
    7994:	str.w	r7, [r2, #-16]
    7998:	str.w	r5, [r2, #-12]
    799c:	str.w	r4, [r2, #-8]
    79a0:	str.w	r0, [r2, #-4]
    79a4:	bne.n	7980 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    79a6:	ldr	r3, [r3, #0]
    79a8:	str	r3, [r2, #0]
    79aa:	b.n	7958 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

000079ac <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    79ac:	push	{r4, lr}
    79ae:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    79b0:	ldr	r0, [r0, #56]	; 0x38
    79b2:	cbz	r0, 79c0 <FsBaseFile::close()+0x14>
    79b4:	bl	5d10 <FatFile::close()>
    79b8:	cbz	r0, 79c0 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    79ba:	movs	r3, #0
    79bc:	str	r3, [r4, #56]	; 0x38
    return true;
    79be:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    79c0:	ldr	r0, [r4, #60]	; 0x3c
    79c2:	cbz	r0, 79d0 <FsBaseFile::close()+0x24>
    79c4:	bl	3b88 <ExFatFile::close()>
    79c8:	cbz	r0, 79d0 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    79ca:	movs	r3, #0
    79cc:	str	r3, [r4, #60]	; 0x3c
    79ce:	pop	{r4, pc}
    return true;
  }
  return false;
    79d0:	movs	r0, #0
}
    79d2:	pop	{r4, pc}

000079d4 <FsBaseFile::operator=(FsBaseFile const&)>:
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) return *this;
    79d4:	cmp	r0, r1
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    79d6:	push	{r3, r4, r5, r6, r7, lr}
    79d8:	mov	r6, r0
  if (this == &from) return *this;
    79da:	beq.n	7a08 <FsBaseFile::operator=(FsBaseFile const&)+0x34>
    79dc:	mov	r5, r1
  close();
    79de:	bl	79ac <FsBaseFile::close()>
  if (from.m_fFile) {
    79e2:	ldr	r4, [r5, #56]	; 0x38
    79e4:	cbz	r4, 7a0c <FsBaseFile::operator=(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
    79e6:	mov	r1, r6
    79e8:	movs	r0, #36	; 0x24
    79ea:	bl	7c4c <operator new(unsigned int, unsigned long*)>
    79ee:	movs	r3, #0
    *m_fFile = *from.m_fFile;
    79f0:	mov	r4, r0
    79f2:	strb	r3, [r0, #0]
    79f4:	strb	r3, [r0, #1]
    79f6:	strb	r3, [r0, #2]
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) return *this;
  close();
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    79f8:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    79fa:	ldr	r5, [r5, #56]	; 0x38
    79fc:	ldmia	r5!, {r0, r1, r2, r3}
    79fe:	stmia	r4!, {r0, r1, r2, r3}
    7a00:	ldmia	r5!, {r0, r1, r2, r3}
    7a02:	stmia	r4!, {r0, r1, r2, r3}
    7a04:	ldr	r3, [r5, #0]
    7a06:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
    7a08:	mov	r0, r6
    7a0a:	pop	{r3, r4, r5, r6, r7, pc}
  if (this == &from) return *this;
  close();
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    7a0c:	ldr	r3, [r5, #60]	; 0x3c
    7a0e:	cmp	r3, #0
    7a10:	beq.n	7a08 <FsBaseFile::operator=(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
    7a12:	mov	r1, r6
    7a14:	movs	r0, #56	; 0x38
    7a16:	bl	7c4c <operator new(unsigned int, unsigned long*)>
    7a1a:	strb.w	r4, [r0, #49]	; 0x31
    7a1e:	strb.w	r4, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    7a22:	mov	r2, r0
    7a24:	strb.w	r4, [r0, #51]	; 0x33
  close();
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    7a28:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    7a2a:	ldr	r3, [r5, #60]	; 0x3c
    7a2c:	add.w	r1, r3, #48	; 0x30
    7a30:	ldr	r7, [r3, #0]
    7a32:	adds	r3, #16
    7a34:	ldr.w	r5, [r3, #-12]
    7a38:	adds	r2, #16
    7a3a:	ldr.w	r4, [r3, #-8]
    7a3e:	ldr.w	r0, [r3, #-4]
    7a42:	cmp	r3, r1
    7a44:	str.w	r7, [r2, #-16]
    7a48:	str.w	r5, [r2, #-12]
    7a4c:	str.w	r4, [r2, #-8]
    7a50:	str.w	r0, [r2, #-4]
    7a54:	bne.n	7a30 <FsBaseFile::operator=(FsBaseFile const&)+0x5c>
    7a56:	ldr	r3, [r3, #0]
    7a58:	str	r3, [r2, #0]
    7a5a:	b.n	7a08 <FsBaseFile::operator=(FsBaseFile const&)+0x34>

00007a5c <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    7a5c:	cbz	r1, 7ad2 <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    7a5e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a62:	mov	r4, r1
    7a64:	mov	r5, r0
    7a66:	mov	r8, r3
    7a68:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    7a6a:	bl	79ac <FsBaseFile::close()>
  if (vol->m_fVol) {
    7a6e:	ldr.w	r6, [r4, #1152]	; 0x480
    7a72:	cbz	r6, 7aa0 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    7a74:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    7a76:	mov	r1, r5
    7a78:	movs	r0, #36	; 0x24
    7a7a:	bl	7c4c <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7a7e:	mov	r3, r8
    7a80:	strb	r6, [r0, #0]
    7a82:	mov	r2, r7
    7a84:	strb	r6, [r0, #1]
    7a86:	strb	r6, [r0, #2]
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    7a88:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7a8a:	ldr.w	r1, [r4, #1152]	; 0x480
    7a8e:	bl	60b8 <FatFile::open(FatVolume*, char const*, int)>
    7a92:	cbz	r0, 7a9a <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    7a94:	movs	r0, #1
    7a96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    7a9a:	str	r0, [r5, #56]	; 0x38
    7a9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    7aa0:	ldr.w	r3, [r4, #1156]	; 0x484
    7aa4:	cbz	r3, 7ad6 <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    7aa6:	mov	r1, r5
    7aa8:	movs	r0, #56	; 0x38
    7aaa:	bl	7c4c <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7aae:	mov	r3, r8
    7ab0:	strb.w	r6, [r0, #49]	; 0x31
    7ab4:	mov	r2, r7
    7ab6:	strb.w	r6, [r0, #50]	; 0x32
    7aba:	strb.w	r6, [r0, #51]	; 0x33
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    7abe:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7ac0:	ldr.w	r1, [r4, #1156]	; 0x484
    7ac4:	bl	4438 <ExFatFile::open(ExFatVolume*, char const*, int)>
    7ac8:	cmp	r0, #0
    7aca:	bne.n	7a94 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    7acc:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    7ace:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    7ad2:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    7ad4:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    7ad6:	movs	r0, #0
    7ad8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007adc <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    7adc:	push	{r3, r4, r5, r6, r7, lr}
    7ade:	mov	r5, r1
    7ae0:	mov	r7, r2
    7ae2:	mov	r4, r0
  close();
    7ae4:	bl	79ac <FsBaseFile::close()>
  if (dir->m_fFile) {
    7ae8:	ldr	r6, [r5, #56]	; 0x38
    7aea:	cbz	r6, 7b10 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    7aec:	mov	r1, r4
    7aee:	movs	r0, #36	; 0x24
    7af0:	bl	7c4c <operator new(unsigned int, unsigned long*)>
    7af4:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7af6:	mov	r2, r7
    7af8:	strb	r1, [r0, #0]
    7afa:	strb	r1, [r0, #1]
    7afc:	strb	r1, [r0, #2]
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
  close();
  if (dir->m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    7afe:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7b00:	ldr	r1, [r5, #56]	; 0x38
    7b02:	bl	66dc <FatFile::openNext(FatFile*, int)>
    7b06:	cbz	r0, 7b0c <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    7b08:	movs	r0, #1
    7b0a:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    7b0c:	str	r0, [r4, #56]	; 0x38
    7b0e:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    7b10:	ldr	r0, [r5, #60]	; 0x3c
    7b12:	cbz	r0, 7b38 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    7b14:	mov	r1, r4
    7b16:	movs	r0, #56	; 0x38
    7b18:	bl	7c4c <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7b1c:	mov	r2, r7
    7b1e:	strb.w	r6, [r0, #49]	; 0x31
    7b22:	strb.w	r6, [r0, #50]	; 0x32
    7b26:	strb.w	r6, [r0, #51]	; 0x33
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (dir->m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    7b2a:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7b2c:	ldr	r1, [r5, #60]	; 0x3c
    7b2e:	bl	4448 <ExFatFile::openNext(ExFatFile*, int)>
    7b32:	cmp	r0, #0
    7b34:	bne.n	7b08 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    7b36:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    7b38:	pop	{r3, r4, r5, r6, r7, pc}
    7b3a:	nop

00007b3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    7b3c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b40:	mov	r4, r0
  m_blockDev = blockDev;
  m_fVol = nullptr;
    7b42:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    7b44:	mov	r7, r3
  m_blockDev = blockDev;
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    7b46:	mov.w	r0, #1152	; 0x480
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
  m_blockDev = blockDev;
    7b4a:	str.w	r1, [r4, #1160]	; 0x488
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    7b4e:	mov	r1, r4
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
  m_blockDev = blockDev;
  m_fVol = nullptr;
    7b50:	str.w	r6, [r4, #1152]	; 0x480
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    7b54:	mov	r8, r2
  m_blockDev = blockDev;
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    7b56:	bl	7c4c <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    7b5a:	mov	r2, r7
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    7b5c:	strb.w	r6, [r0, #1092]	; 0x444
    7b60:	mov	r5, r0
    7b62:	strb.w	r6, [r0, #1145]	; 0x479
    7b66:	strb.w	r6, [r0, #1146]	; 0x47a
    7b6a:	strb.w	r6, [r0, #1147]	; 0x47b
    7b6e:	str.w	r0, [r4, #1156]	; 0x484
    7b72:	ldr.w	r1, [r4, #1160]	; 0x488
    7b76:	bl	47d8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    7b7a:	cbnz	r0, 7bc0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x84>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    7b7c:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    7b7e:	mov	r1, r4
    7b80:	movw	r0, #1132	; 0x46c
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    7b84:	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    7b88:	bl	7c4c <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    7b8c:	movs	r3, #2
    7b8e:	strb	r6, [r0, #7]
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    7b90:	mov	r2, r7
    7b92:	strb.w	r6, [r0, #1096]	; 0x448
    7b96:	mov	r5, r0
    7b98:	strb.w	r6, [r0, #1097]	; 0x449
    7b9c:	strb.w	r6, [r0, #1098]	; 0x44a
    7ba0:	strb	r3, [r0, #8]
    7ba2:	str.w	r0, [r4, #1152]	; 0x480
    7ba6:	ldr.w	r1, [r4, #1160]	; 0x488
    7baa:	bl	6f0c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    7bae:	cbnz	r0, 7bee <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb2>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    7bb0:	movs	r3, #0
    7bb2:	ldr	r2, [pc, #100]	; (7c18 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
  m_fVol = nullptr;
  return false;
    7bb4:	mov	r0, r3
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
  m_fVol = nullptr;
    7bb6:	str.w	r3, [r4, #1152]	; 0x480
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    7bba:	str	r3, [r2, #0]
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    7bbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    7bc0:	add.w	r6, r5, #1096	; 0x448
    7bc4:	mov	r0, r6
    7bc6:	bl	3b88 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    7bca:	mov	r1, r5
    7bcc:	mov	r0, r6
    7bce:	bl	3be4 <ExFatFile::openRoot(ExFatVolume*)>
  }
  bool begin(FsBlockDevice* dev, bool setCwv, uint32_t firstSector, uint32_t numSectors) {
    if (!init(dev, firstSector, numSectors)) {
      return false;
    }
    if (!chdir()) {
    7bd2:	cmp	r0, #0
    7bd4:	beq.n	7b7c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x40>
      return false;
    }
    if (setCwv || !m_cwv) {
    7bd6:	ldr	r3, [pc, #68]	; (7c1c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    7bd8:	ldr	r2, [r3, #0]
    7bda:	cbz	r2, 7c0c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd0>
    7bdc:	ldr	r3, [pc, #56]	; (7c18 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  if (setCwv || !m_cwv) {
    7bde:	cmp.w	r8, #0
    7be2:	bne.n	7c10 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd4>
    7be4:	ldr	r2, [r3, #0]
    7be6:	cbz	r2, 7c10 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd4>
    m_cwv = this;
  }
  return true;
    7be8:	movs	r0, #1
    7bea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    7bee:	add.w	r6, r5, #1096	; 0x448
    7bf2:	mov	r0, r6
    7bf4:	bl	5d10 <FatFile::close()>
    return m_vwd.openRoot(this);
    7bf8:	mov	r1, r5
    7bfa:	mov	r0, r6
    7bfc:	bl	6100 <FatFile::openRoot(FatVolume*)>
  }
  bool begin(FsBlockDevice* dev, bool setCwv, uint32_t firstSector, uint32_t numSectors) {
    if (!init(dev, firstSector, numSectors)) {
      return false;
    }
    if (!chdir()) {
    7c00:	cmp	r0, #0
    7c02:	beq.n	7bb0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x74>
      return false;
    }
    if (setCwv || !m_cwv) {
    7c04:	ldr	r3, [pc, #24]	; (7c20 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe4>)
    7c06:	ldr	r2, [r3, #0]
    7c08:	cmp	r2, #0
    7c0a:	bne.n	7bdc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa0>
      m_cwv = this;
    7c0c:	str	r5, [r3, #0]
    7c0e:	b.n	7bdc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa0>
  m_fVol = nullptr;
  return false;

 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
    7c10:	str	r4, [r3, #0]
  }
  return true;
    7c12:	movs	r0, #1
    7c14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c18:	.word	0x20017b2c
    7c1c:	.word	0x20017a20
    7c20:	.word	0x20017b30

00007c24 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    7c24:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    7c26:	movs	r5, #0
    7c28:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    7c2c:	ldr	r6, [pc, #24]	; (7c48 <FsVolume::open(char const*, int)+0x24>)
    7c2e:	mov	r4, r0
    7c30:	str	r7, [r0, #8]
    7c32:	str	r5, [r0, #4]
    7c34:	strb	r5, [r0, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    7c36:	str	r5, [r0, #72]	; 0x48
    7c38:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    7c3a:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    7c3e:	bl	7a5c <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    7c42:	mov	r0, r4
    7c44:	pop	{r3, r4, r5, r6, r7, pc}
    7c46:	nop
    7c48:	.word	0x20000714

00007c4c <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    7c4c:	mov	r0, r1
    7c4e:	bx	lr

00007c50 <SharedSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    7c50:	ldrb	r0, [r0, #17]
    7c52:	bx	lr

00007c54 <SharedSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    7c54:	ldrb	r0, [r0, #20]
    7c56:	bx	lr

00007c58 <SharedSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    7c58:	ldrb	r0, [r0, #21]
    7c5a:	bx	lr

00007c5c <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    7c5c:	movs	r0, #1
    7c5e:	bx	lr

00007c60 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    7c60:	ldrb	r0, [r0, #28]
    7c62:	bx	lr

00007c64 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  }
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    7c64:	push	{r4}
  return readSectors(sector, dst, 1);
    7c66:	ldr	r4, [r0, #0]
    7c68:	movs	r3, #1
    7c6a:	ldr	r4, [r4, #20]
    7c6c:	mov	ip, r4
}
    7c6e:	ldr.w	r4, [sp], #4
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    7c72:	bx	ip

00007c74 <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    7c74:	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    7c76:	ldr	r3, [r0, #0]
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    7c78:	mov	r4, r0
    7c7a:	mov	r5, r1
  if (!syncDevice()) {
    7c7c:	ldr	r3, [r3, #32]
    7c7e:	blx	r3
    7c80:	cbz	r0, 7c84 <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    7c82:	strb	r5, [r4, #28]
  return true;
}
    7c84:	pop	{r3, r4, r5, pc}
    7c86:	nop

00007c88 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    7c88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c8c:	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7c8e:	ldrb	r3, [r0, #19]
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    7c90:	mov	r5, r0
    7c92:	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7c94:	cmp	r3, #2
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    7c96:	mov	r9, r2
    7c98:	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7c9a:	beq.n	7ce4 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5c>
    if (!writeStart(sector)) {
    7c9c:	ldr	r3, [r5, #0]
    7c9e:	mov	r1, r4
    7ca0:	mov	r0, r5
    7ca2:	ldr	r3, [r3, #96]	; 0x60
    7ca4:	blx	r3
    7ca6:	cbz	r0, 7cd0 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    7ca8:	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    7caa:	cmp.w	r9, #0
    7cae:	beq.n	7cd6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    7cb0:	add.w	r8, r4, r9
    7cb4:	b.n	7cba <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    7cb6:	cmp	r8, r4
    7cb8:	beq.n	7cd6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    7cba:	mov	r1, r7
    7cbc:	mov	r0, r4
    7cbe:	blx	r6
    if (!writeData(src)) {
    7cc0:	ldr	r3, [r5, #0]
    7cc2:	mov	r1, r0
    7cc4:	mov	r0, r5
    7cc6:	ldr	r3, [r3, #92]	; 0x5c
    7cc8:	adds	r4, #1
    7cca:	blx	r3
    7ccc:	cmp	r0, #0
    7cce:	bne.n	7cb6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    7cd0:	movs	r0, #0
    7cd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    const uint8_t *src = callback(sector + i, context);
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    7cd6:	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    7cd8:	ldrb	r0, [r5, #28]
    const uint8_t *src = callback(sector + i, context);
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    7cda:	add	r3, r9
    7cdc:	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    7cde:	cbz	r0, 7cec <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x64>

 fail:
  return false;
}
    7ce0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7ce4:	ldr	r3, [r0, #24]
    7ce6:	cmp	r3, r1
    7ce8:	bne.n	7c9c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
    7cea:	b.n	7caa <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();
    7cec:	ldr	r3, [r5, #0]
    7cee:	mov	r0, r5
    7cf0:	ldr	r3, [r3, #100]	; 0x64

 fail:
  return false;
}
    7cf2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();
    7cf6:	bx	r3

00007cf8 <DedicatedSpiCard::~DedicatedSpiCard()>:
//==============================================================================
/**
 * \class DedicatedSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
    7cf8:	bx	lr
    7cfa:	nop

00007cfc <SharedSpiCard::end()>:
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  void spiEnd() {
    m_spiDriver.end();
    7cfc:	adds	r0, #4
    7cfe:	b.w	9870 <SdSpiArduinoDriver::end()>
    7d02:	nop

00007d04 <DedicatedSpiCard::~DedicatedSpiCard()>:
//==============================================================================
/**
 * \class DedicatedSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
    7d04:	push	{r4, lr}
    7d06:	mov	r4, r0
    7d08:	movs	r1, #32
    7d0a:	bl	bc9c <operator delete(void*, unsigned int)>
    7d0e:	mov	r0, r4
    7d10:	pop	{r4, pc}
    7d12:	nop

00007d14 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(
    uint32_t sector, const uint8_t* src, size_t ns) {
    7d14:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d18:	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7d1a:	ldrb	r3, [r0, #19]
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(
    uint32_t sector, const uint8_t* src, size_t ns) {
    7d1c:	mov	r6, r0
    7d1e:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7d20:	cmp	r3, #2
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(
    uint32_t sector, const uint8_t* src, size_t ns) {
    7d22:	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7d24:	beq.n	7d66 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x52>
    if (!writeStart(sector)) {
    7d26:	ldr	r3, [r6, #0]
    7d28:	mov	r1, r5
    7d2a:	mov	r0, r6
    7d2c:	ldr	r3, [r3, #96]	; 0x60
    7d2e:	blx	r3
    7d30:	cbz	r0, 7d52 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
      goto fail;
    }
    m_curSector = sector;
    7d32:	str	r5, [r6, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7d34:	cbz	r7, 7d58 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    7d36:	movs	r5, #0
    7d38:	b.n	7d3e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
    7d3a:	cmp	r7, r5
    7d3c:	beq.n	7d58 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    7d3e:	ldr	r3, [r6, #0]
    7d40:	mov	r1, r4
    7d42:	mov	r0, r6
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7d44:	adds	r5, #1
    if (!writeData(src)) {
    7d46:	ldr	r3, [r3, #92]	; 0x5c
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7d48:	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    7d4c:	blx	r3
    7d4e:	cmp	r0, #0
    7d50:	bne.n	7d3a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

fail:
  return false;
    7d52:	movs	r0, #0
    7d54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    7d58:	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : writeStop();
    7d5a:	ldrb	r0, [r6, #28]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    7d5c:	add	r7, r3
    7d5e:	str	r7, [r6, #24]
  return m_dedicatedSpi ? true : writeStop();
    7d60:	cbz	r0, 7d6e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5a>

fail:
  return false;
}
    7d62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(
    uint32_t sector, const uint8_t* src, size_t ns) {
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7d66:	ldr	r3, [r0, #24]
    7d68:	cmp	r3, r1
    7d6a:	bne.n	7d26 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    7d6c:	b.n	7d34 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();
    7d6e:	ldr	r3, [r6, #0]
    7d70:	mov	r0, r6
    7d72:	ldr	r3, [r3, #100]	; 0x64

fail:
  return false;
}
    7d74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();
    7d78:	bx	r3
    7d7a:	nop

00007d7c <SharedSpiCard::spiStart() [clone .part.8] [clone .constprop.34]>:
uint32_t SharedSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStart() {
    7d7c:	push	{r3, r4, r5, lr}
  }
  bool waitReady(uint16_t ms);
  bool writeData(uint8_t token, const uint8_t* src);
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    7d7e:	adds	r5, r0, #4
    7d80:	mov	r4, r0
    7d82:	mov	r0, r5
    7d84:	bl	96e0 <SdSpiArduinoDriver::activate()>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    7d88:	ldrb	r0, [r4, #16]
    7d8a:	movs	r1, #0
    7d8c:	bl	991c <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7d90:	mov	r0, r5
    7d92:	movs	r1, #255	; 0xff
    7d94:	bl	98b0 <SdSpiArduinoDriver::send(unsigned char)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    // Dummy byte to drive MISO busy status.
    spiSend(0XFF);
    m_spiActive = true;
    7d98:	movs	r3, #1
    7d9a:	strb	r3, [r4, #18]
    7d9c:	pop	{r3, r4, r5, pc}
    7d9e:	nop

00007da0 <SharedSpiCard::syncDevice() [clone .part.19] [clone .constprop.35]>:
  }
}
//------------------------------------------------------------------------------
bool SharedSpiCard::syncDevice() {
  if (m_state == WRITE_STATE) {
    return writeStop();
    7da0:	ldr	r3, [r0, #0]
    7da2:	ldr	r3, [r3, #100]	; 0x64
    7da4:	bx	r3
    7da6:	nop

00007da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>:
    spiSend(0XFF);
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
    7da8:	push	{r3, r4, r5, lr}
    7daa:	adds	r5, r0, #4
    7dac:	mov	r4, r0
    sdCsWrite(m_csPin, false);
  }
  void spiStart();
  void spiStop();
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    7dae:	movs	r1, #1
    7db0:	ldrb	r0, [r0, #16]
    7db2:	bl	991c <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7db6:	movs	r1, #255	; 0xff
    7db8:	mov	r0, r5
    7dba:	bl	98b0 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    7dbe:	mov	r0, r5
    7dc0:	bl	9818 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    // Insure MISO goes to low Z.
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7dc4:	movs	r3, #0
    7dc6:	strb	r3, [r4, #18]
    7dc8:	pop	{r3, r4, r5, pc}
    7dca:	nop

00007dcc <SharedSpiCard::writeStop()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStop() {
    7dcc:	push	{r3, r4, r5, r6, r7, lr}
    7dce:	ldr	r6, [pc, #88]	; (7e28 <SharedSpiCard::writeStop()+0x5c>)
    7dd0:	mov	r7, r0
    7dd2:	adds	r5, r0, #4
    7dd4:	ldr	r4, [r6, #0]
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) {set(ms);}
  uint16_t millis16() {return millis();}
  void set(uint16_t ms) {
    m_endTime = ms + millis16();
    7dd6:	add.w	r4, r4, #600	; 0x258
    7dda:	uxth	r4, r4
    7ddc:	b.n	7de6 <SharedSpiCard::writeStop()+0x1a>
    7dde:	ldr	r3, [r6, #0]
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    if (timeout.timedOut()) {
    7de0:	subs	r3, r4, r3
    7de2:	lsls	r3, r3, #16
    7de4:	bmi.n	7e04 <SharedSpiCard::writeStop()+0x38>
  }
  void spiEnd() {
    m_spiDriver.end();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7de6:	mov	r0, r5
    7de8:	bl	9878 <SdSpiArduinoDriver::receive()>
  return true;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    7dec:	cmp	r0, #255	; 0xff
    7dee:	bne.n	7dde <SharedSpiCard::writeStop()+0x12>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7df0:	mov	r0, r5
    7df2:	movs	r1, #253	; 0xfd
    7df4:	bl	98b0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    7df8:	ldrb	r3, [r7, #18]
    7dfa:	cbnz	r3, 7e18 <SharedSpiCard::writeStop()+0x4c>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    7dfc:	movs	r3, #0
  return true;
    7dfe:	movs	r0, #1
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    7e00:	strb	r3, [r7, #19]
  return true;
    7e02:	pop	{r3, r4, r5, r6, r7, pc}
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
//    (void)code;
    m_errorCode = code;
    7e04:	movs	r3, #30
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    7e06:	ldrb	r0, [r7, #18]
    7e08:	strb	r3, [r7, #17]
    7e0a:	cbnz	r0, 7e0e <SharedSpiCard::writeStop()+0x42>

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    7e0c:	pop	{r3, r4, r5, r6, r7, pc}
    7e0e:	mov	r0, r7
    7e10:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
  return true;

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    7e14:	movs	r0, #0
    7e16:	pop	{r3, r4, r5, r6, r7, pc}
    7e18:	mov	r0, r7
    7e1a:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    7e1e:	movs	r3, #0
  return true;
    7e20:	movs	r0, #1
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    7e22:	strb	r3, [r7, #19]
  return true;
    7e24:	pop	{r3, r4, r5, r6, r7, pc}
    7e26:	nop
    7e28:	.word	0x20018b9c

00007e2c <SharedSpiCard::isBusy()>:
bool SharedSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::isBusy() {
    7e2c:	push	{r3, r4, r5, lr}
  if (m_state == READ_STATE) {
    7e2e:	ldrb	r3, [r0, #19]
    7e30:	cmp	r3, #1
    7e32:	beq.n	7e62 <SharedSpiCard::isBusy()+0x36>
    return false;
  }
  bool spiActive = m_spiActive;
  if (!spiActive) {
    7e34:	ldrb	r3, [r0, #18]
    7e36:	mov	r4, r0
    7e38:	cbnz	r3, 7e54 <SharedSpiCard::isBusy()+0x28>
    7e3a:	bl	7d7c <SharedSpiCard::spiStart() [clone .part.8] [clone .constprop.34]>
  }
  void spiEnd() {
    m_spiDriver.end();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7e3e:	adds	r0, r4, #4
    7e40:	bl	9878 <SdSpiArduinoDriver::receive()>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    7e44:	ldrb	r3, [r4, #18]
  }
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  bool rtn = 0XFF != spiReceive();
    7e46:	subs.w	r5, r0, #255	; 0xff
    7e4a:	it	ne
    7e4c:	movne	r5, #1
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    7e4e:	cbnz	r3, 7e66 <SharedSpiCard::isBusy()+0x3a>
  }
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  bool rtn = 0XFF != spiReceive();
    7e50:	mov	r0, r5
    7e52:	pop	{r3, r4, r5, pc}
    7e54:	adds	r0, #4
    7e56:	bl	9878 <SdSpiArduinoDriver::receive()>
    7e5a:	subs	r0, #255	; 0xff
    7e5c:	it	ne
    7e5e:	movne	r0, #1
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    7e60:	pop	{r3, r4, r5, pc}
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::isBusy() {
  if (m_state == READ_STATE) {
    return false;
    7e62:	movs	r0, #0
    7e64:	pop	{r3, r4, r5, pc}
    7e66:	mov	r0, r4
    7e68:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
  }
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  bool rtn = 0XFF != spiReceive();
    7e6c:	mov	r0, r5
    7e6e:	pop	{r3, r4, r5, pc}

00007e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7e70:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    7e74:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7e76:	sub	sp, #8
    7e78:	mov	r6, r0
    7e7a:	mov	r8, r1
    7e7c:	str	r2, [sp, #4]
  if (!syncDevice()) {
    7e7e:	ldr	r3, [r3, #32]
    7e80:	blx	r3
    7e82:	cbnz	r0, 7e8c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1c>
    return 0XFF;
    7e84:	movs	r0, #255	; 0xff
  uint16_t n = 0;
  do {
    m_status = spiReceive();
  } while (m_status & 0X80 && ++n < 10);
  return m_status;
}
    7e86:	add	sp, #8
    7e88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
  if (!syncDevice()) {
    return 0XFF;
  }
  // select card
  if (!m_spiActive) {
    7e8c:	ldrb	r3, [r6, #18]
    7e8e:	cmp	r3, #0
    7e90:	beq.n	7f10 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
    spiStart();
  }
  if (cmd != CMD12) {
    7e92:	cmp.w	r8, #12
    7e96:	beq.n	7f18 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    7e98:	ldr	r7, [pc, #128]	; (7f1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>)
    7e9a:	adds	r4, r6, #4
    7e9c:	ldr	r5, [r7, #0]
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) {set(ms);}
  uint16_t millis16() {return millis();}
  void set(uint16_t ms) {
    m_endTime = ms + millis16();
    7e9e:	add.w	r5, r5, #300	; 0x12c
    7ea2:	uxth	r5, r5
    7ea4:	b.n	7eae <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3e>
    7ea6:	ldr	r3, [r7, #0]
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    if (timeout.timedOut()) {
    7ea8:	subs	r3, r5, r3
    7eaa:	lsls	r2, r3, #16
    7eac:	bmi.n	7f08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x98>
    7eae:	mov	r0, r4
    7eb0:	bl	9878 <SdSpiArduinoDriver::receive()>
  return true;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    7eb4:	cmp	r0, #255	; 0xff
    7eb6:	bne.n	7ea6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x36>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7eb8:	orr.w	r1, r8, #64	; 0x40
    7ebc:	mov	r0, r4
    7ebe:	add	r7, sp, #4
    7ec0:	add	r5, sp, #8
    7ec2:	bl	98b0 <SdSpiArduinoDriver::send(unsigned char)>
    7ec6:	ldrb.w	r1, [r5, #-1]!
    7eca:	mov	r0, r4
    7ecc:	bl	98b0 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t* pa = reinterpret_cast<uint8_t*>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    7ed0:	cmp	r7, r5
    7ed2:	bne.n	7ec6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x56>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    7ed4:	cmp.w	r8, #0
    7ed8:	mov	r0, r4
  }
  void spiEnd() {
    m_spiDriver.end();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7eda:	mov.w	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7ede:	ite	ne
    7ee0:	movne	r1, #135	; 0x87
    7ee2:	moveq	r1, #149	; 0x95
    7ee4:	bl	98b0 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiEnd() {
    m_spiDriver.end();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7ee8:	mov	r0, r4
    7eea:	bl	9878 <SdSpiArduinoDriver::receive()>
    7eee:	mov	r0, r4
    7ef0:	bl	9878 <SdSpiArduinoDriver::receive()>

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  uint16_t n = 0;
  do {
    m_status = spiReceive();
  } while (m_status & 0X80 && ++n < 10);
    7ef4:	lsls	r3, r0, #24
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  uint16_t n = 0;
  do {
    m_status = spiReceive();
    7ef6:	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
    7ef8:	bpl.n	7e86 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x16>
    7efa:	subs	r5, #1
    7efc:	uxth	r5, r5
    7efe:	cmp	r5, #0
    7f00:	bne.n	7eee <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x7e>
  return m_status;
}
    7f02:	add	sp, #8
    7f04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // select card
  if (!m_spiActive) {
    spiStart();
  }
  if (cmd != CMD12) {
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    7f08:	cmp.w	r8, #0
    7f0c:	bne.n	7e84 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    7f0e:	b.n	7eb8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
    7f10:	mov	r0, r6
    7f12:	bl	7d7c <SharedSpiCard::spiStart() [clone .part.8] [clone .constprop.34]>
    7f16:	b.n	7e92 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    7f18:	adds	r4, r6, #4
    7f1a:	b.n	7eb8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
    7f1c:	.word	0x20018b9c

00007f20 <SharedSpiCard::begin(SdSpiConfig)>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SharedSpiCard member functions
//------------------------------------------------------------------------------
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    7f20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f24:	sub	sp, #32
  Timeout timeout;
  m_spiActive = false;
    7f26:	movs	r5, #0
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SharedSpiCard member functions
//------------------------------------------------------------------------------
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    7f28:	mov	r6, r0
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    7f2a:	adds	r7, r0, #4
    7f2c:	add	r4, sp, #4
  Timeout timeout;
  m_spiActive = false;
    7f2e:	strb	r5, [r0, #18]
  m_errorCode = SD_CARD_ERROR_NONE;
    7f30:	strb	r5, [r0, #17]
  m_type = 0;
    7f32:	strb	r5, [r0, #21]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SharedSpiCard member functions
//------------------------------------------------------------------------------
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    7f34:	stmia.w	r4, {r1, r2, r3}
    7f38:	ldrb.w	r0, [sp, #4]
    7f3c:	ldr.w	r8, [sp, #8]
  Timeout timeout;
  m_spiActive = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_type = 0;
  m_csPin = spiConfig.csPin;
    7f40:	strb	r0, [r6, #16]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    7f42:	bl	9914 <sdCsInit(unsigned char)>
    sdCsWrite(m_csPin, false);
  }
  void spiStart();
  void spiStop();
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    7f46:	ldrb	r0, [r6, #16]
    7f48:	movs	r1, #1
    7f4a:	bl	991c <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    7f4e:	ldr	r1, [pc, #356]	; (80b4 <SharedSpiCard::begin(SdSpiConfig)+0x194>)
    7f50:	movs	r2, #7
    7f52:	add	r3, sp, #20
    7f54:	str	r1, [r6, #8]
    7f56:	str	r2, [r6, #12]
    7f58:	ldmia.w	r4, {r0, r1, r2}
    7f5c:	stmia.w	r3, {r0, r1, r2}
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    7f60:	mov	r0, r7
    7f62:	ldmia	r3, {r1, r2, r3}
    7f64:	bl	97e4 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStart() {
  if (!m_spiActive) {
    7f68:	ldrb	r3, [r6, #18]
  sdCsInit(m_csPin);
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
  m_state = IDLE_STATE;
    7f6a:	strb	r5, [r6, #19]
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStart() {
  if (!m_spiActive) {
    7f6c:	cmp	r3, #0
    7f6e:	beq.n	8040 <SharedSpiCard::begin(SdSpiConfig)+0x120>
    sdCsWrite(m_csPin, false);
  }
  void spiStart();
  void spiStop();
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    7f70:	movs	r1, #1
    7f72:	ldrb	r0, [r6, #16]
    7f74:	movs	r4, #10
    7f76:	bl	991c <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7f7a:	movs	r1, #255	; 0xff
    7f7c:	mov	r0, r7
    7f7e:	bl	98b0 <SdSpiArduinoDriver::send(unsigned char)>
    7f82:	subs	r1, r4, #1
  m_state = IDLE_STATE;
  spiStart();

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
    7f84:	ands.w	r4, r1, #255	; 0xff
    7f88:	bne.n	7f7a <SharedSpiCard::begin(SdSpiConfig)+0x5a>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    7f8a:	mov	r1, r4
    7f8c:	ldrb	r0, [r6, #16]
    7f8e:	movs	r5, #10
    7f90:	bl	991c <sdCsWrite(unsigned char, bool)>
    spiSend(0XFF);
  }
  spiSelect();
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    7f94:	movs	r2, #0
    7f96:	mov	r0, r6
    7f98:	mov	r1, r2
    7f9a:	bl	7e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7f9e:	cmp	r0, #1
    7fa0:	mov	r4, r0
    7fa2:	add.w	r3, r5, #4294967295
    7fa6:	beq.n	7fc4 <SharedSpiCard::begin(SdSpiConfig)+0xa4>
      break;
    }
    if (i == SD_CMD0_RETRY) {
    7fa8:	ands.w	r5, r3, #255	; 0xff
    7fac:	bne.n	7f94 <SharedSpiCard::begin(SdSpiConfig)+0x74>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
//    (void)code;
    m_errorCode = code;
    7fae:	movs	r3, #1
    7fb0:	strb	r3, [r6, #17]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    7fb2:	ldrb	r0, [r6, #18]
    7fb4:	cbz	r0, 7fbe <SharedSpiCard::begin(SdSpiConfig)+0x9e>
    7fb6:	mov	r0, r6
    7fb8:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
  spiSetSckSpeed(spiConfig.maxSck);
  return true;

 fail:
  spiStop();
  return false;
    7fbc:	movs	r0, #0
}
    7fbe:	add	sp, #32
    7fc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    goto fail;
  }
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    7fc4:	mov.w	r2, #426	; 0x1aa
    7fc8:	movs	r1, #8
    7fca:	mov	r0, r6
    7fcc:	bl	7e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7fd0:	lsls	r2, r0, #29
    7fd2:	bpl.n	8048 <SharedSpiCard::begin(SdSpiConfig)+0x128>
  void spiStop();
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
  }
  void type(uint8_t value) {
    m_type = value;
    7fd4:	strb	r4, [r6, #21]
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7fd6:	ldr	r3, [r6, #0]
    7fd8:	ldr.w	sl, [pc, #224]	; 80bc <SharedSpiCard::begin(SdSpiConfig)+0x19c>
    7fdc:	ldr	r3, [r3, #88]	; 0x58
    7fde:	cmp	r3, sl
    7fe0:	bne.n	806e <SharedSpiCard::begin(SdSpiConfig)+0x14e>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    7fe2:	ldrb	r0, [r6, #21]
    7fe4:	ldr	r5, [pc, #208]	; (80b8 <SharedSpiCard::begin(SdSpiConfig)+0x198>)
    7fe6:	cmp	r0, #2
    7fe8:	ldr	r4, [r5, #0]
    7fea:	ite	eq
    7fec:	moveq.w	r9, #1073741824	; 0x40000000
    7ff0:	movne.w	r9, #0
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) {set(ms);}
  uint16_t millis16() {return millis();}
  void set(uint16_t ms) {
    m_endTime = ms + millis16();
    7ff4:	add.w	r4, r4, #2000	; 0x7d0
    7ff8:	uxth	r4, r4
    7ffa:	b.n	8004 <SharedSpiCard::begin(SdSpiConfig)+0xe4>
    7ffc:	ldr	r3, [r5, #0]
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  timeout.set(SD_INIT_TIMEOUT);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    // check for timeout
    if (timeout.timedOut()) {
    7ffe:	subs	r3, r4, r3
    8000:	lsls	r3, r3, #16
    8002:	bmi.n	8068 <SharedSpiCard::begin(SdSpiConfig)+0x148>
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    8004:	movs	r2, #0
    8006:	movs	r1, #55	; 0x37
    8008:	mov	r0, r6
    800a:	bl	7e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    800e:	mov	r2, r9
    8010:	movs	r1, #41	; 0x29
    8012:	mov	r0, r6
    8014:	bl	7e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  timeout.set(SD_INIT_TIMEOUT);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    8018:	cmp	r0, #0
    801a:	bne.n	7ffc <SharedSpiCard::begin(SdSpiConfig)+0xdc>
      goto fail;
    }
  }

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    801c:	ldr	r3, [r6, #0]
    801e:	ldr	r3, [r3, #88]	; 0x58
    8020:	cmp	r3, sl
    8022:	bne.n	8074 <SharedSpiCard::begin(SdSpiConfig)+0x154>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    8024:	ldrb	r0, [r6, #21]
    8026:	cmp	r0, #2
    8028:	beq.n	807a <SharedSpiCard::begin(SdSpiConfig)+0x15a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    802a:	ldrb	r3, [r6, #18]
    802c:	cbz	r3, 8034 <SharedSpiCard::begin(SdSpiConfig)+0x114>
    802e:	mov	r0, r6
    8030:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
    8034:	movs	r3, #7
    8036:	str.w	r8, [r6, #8]
      spiReceive();
    }
  }
  spiStop();
  spiSetSckSpeed(spiConfig.maxSck);
  return true;
    803a:	movs	r0, #1
    803c:	str	r3, [r6, #12]
    803e:	b.n	7fbe <SharedSpiCard::begin(SdSpiConfig)+0x9e>
    8040:	mov	r0, r6
    8042:	bl	7d7c <SharedSpiCard::spiStart() [clone .part.8] [clone .constprop.34]>
    8046:	b.n	7f70 <SharedSpiCard::begin(SdSpiConfig)+0x50>
  void spiStop();
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
  }
  void type(uint8_t value) {
    m_type = value;
    8048:	movs	r3, #2
    804a:	movs	r4, #4
    804c:	strb	r3, [r6, #21]
  }
  void spiEnd() {
    m_spiDriver.end();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    804e:	mov	r0, r7
    8050:	bl	9878 <SdSpiArduinoDriver::receive()>
    8054:	subs	r3, r4, #1

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
    8056:	strb	r0, [r6, #20]
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    8058:	ands.w	r4, r3, #255	; 0xff
    805c:	bne.n	804e <SharedSpiCard::begin(SdSpiConfig)+0x12e>
      m_status = spiReceive();
    }
    if (m_status != 0XAA) {
    805e:	cmp	r0, #170	; 0xaa
    8060:	beq.n	7fd6 <SharedSpiCard::begin(SdSpiConfig)+0xb6>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
//    (void)code;
    m_errorCode = code;
    8062:	movs	r3, #6
    8064:	strb	r3, [r6, #17]
    8066:	b.n	7fb2 <SharedSpiCard::begin(SdSpiConfig)+0x92>
    8068:	movs	r3, #23
    806a:	strb	r3, [r6, #17]
    806c:	b.n	7fb2 <SharedSpiCard::begin(SdSpiConfig)+0x92>
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    806e:	mov	r0, r6
    8070:	blx	r3
    8072:	b.n	7fe4 <SharedSpiCard::begin(SdSpiConfig)+0xc4>
      goto fail;
    }
  }

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    8074:	mov	r0, r6
    8076:	blx	r3
    8078:	b.n	8026 <SharedSpiCard::begin(SdSpiConfig)+0x106>
    if (cardCommand(CMD58, 0)) {
    807a:	movs	r2, #0
    807c:	movs	r1, #58	; 0x3a
    807e:	mov	r0, r6
    8080:	bl	7e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8084:	cbz	r0, 808c <SharedSpiCard::begin(SdSpiConfig)+0x16c>
    8086:	movs	r3, #18
    8088:	strb	r3, [r6, #17]
    808a:	b.n	7fb2 <SharedSpiCard::begin(SdSpiConfig)+0x92>
  }
  void spiEnd() {
    m_spiDriver.end();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    808c:	mov	r0, r7
    808e:	bl	9878 <SdSpiArduinoDriver::receive()>
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
    8092:	and.w	r0, r0, #192	; 0xc0
    8096:	cmp	r0, #192	; 0xc0
    8098:	beq.n	80ae <SharedSpiCard::begin(SdSpiConfig)+0x18e>
    809a:	mov	r0, r7
    809c:	bl	9878 <SdSpiArduinoDriver::receive()>
    80a0:	mov	r0, r7
    80a2:	bl	9878 <SdSpiArduinoDriver::receive()>
    80a6:	mov	r0, r7
    80a8:	bl	9878 <SdSpiArduinoDriver::receive()>
    80ac:	b.n	802a <SharedSpiCard::begin(SdSpiConfig)+0x10a>
  void spiStop();
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
  }
  void type(uint8_t value) {
    m_type = value;
    80ae:	movs	r3, #3
    80b0:	strb	r3, [r6, #21]
    80b2:	b.n	809a <SharedSpiCard::begin(SdSpiConfig)+0x17a>
    80b4:	.word	0x00061a80
    80b8:	.word	0x20018b9c
    80bc:	.word	0x00007c59

000080c0 <SharedSpiCard::readOCR(unsigned long*)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    80c0:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    80c2:	movs	r2, #0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    80c4:	mov	r5, r1
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    80c6:	movs	r1, #58	; 0x3a
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    80c8:	mov	r6, r0
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    80ca:	bl	7e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    80ce:	cbnz	r0, 80ec <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    80d0:	adds	r7, r6, #4
    80d2:	adds	r4, r5, #4
  }
  void spiEnd() {
    m_spiDriver.end();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    80d4:	mov	r0, r7
    80d6:	bl	9878 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    80da:	strb.w	r0, [r4, #-1]!
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    80de:	cmp	r5, r4
    80e0:	bne.n	80d4 <SharedSpiCard::readOCR(unsigned long*)+0x14>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    80e2:	ldrb	r4, [r6, #18]
    80e4:	cbnz	r4, 8102 <SharedSpiCard::readOCR(unsigned long*)+0x42>
    80e6:	movs	r4, #1
  return true;

 fail:
  spiStop();
  return false;
}
    80e8:	mov	r0, r4
    80ea:	pop	{r3, r4, r5, r6, r7, pc}
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
//    (void)code;
    m_errorCode = code;
    80ec:	movs	r3, #18
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    80ee:	ldrb	r4, [r6, #18]
    80f0:	strb	r3, [r6, #17]
    80f2:	cmp	r4, #0
    80f4:	beq.n	80e8 <SharedSpiCard::readOCR(unsigned long*)+0x28>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    80f6:	movs	r4, #0
    80f8:	mov	r0, r6
    80fa:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
}
    80fe:	mov	r0, r4
    8100:	pop	{r3, r4, r5, r6, r7, pc}
    8102:	mov	r0, r6
    8104:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
    8108:	mov	r0, r4
    810a:	pop	{r3, r4, r5, r6, r7, pc}

0000810c <SharedSpiCard::writeStart(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    810c:	ldr	r3, [r0, #0]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStart(uint32_t sector) {
    810e:	mov	r2, r1
    8110:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    8112:	ldr	r3, [r3, #88]	; 0x58
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStart(uint32_t sector) {
    8114:	sub	sp, #12
    8116:	ldr	r5, [pc, #68]	; (815c <SharedSpiCard::writeStart(unsigned long)+0x50>)
    8118:	mov	r4, r0
    811a:	cmp	r3, r5
    811c:	bne.n	8148 <SharedSpiCard::writeStart(unsigned long)+0x3c>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    811e:	ldrb	r0, [r0, #21]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    8120:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    8122:	mov.w	r1, #25
    8126:	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    8128:	it	ne
    812a:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    812c:	bl	7e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8130:	cbz	r0, 813e <SharedSpiCard::writeStart(unsigned long)+0x32>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
//    (void)code;
    m_errorCode = code;
    8132:	movs	r3, #14
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    8134:	ldrb	r0, [r4, #18]
    8136:	strb	r3, [r4, #17]
    8138:	cbnz	r0, 8150 <SharedSpiCard::writeStart(unsigned long)+0x44>
  return true;

 fail:
  spiStop();
  return false;
}
    813a:	add	sp, #12
    813c:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  m_state = WRITE_STATE;
    813e:	movs	r3, #2
  return true;
    8140:	movs	r0, #1
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  m_state = WRITE_STATE;
    8142:	strb	r3, [r4, #19]
  return true;

 fail:
  spiStop();
  return false;
}
    8144:	add	sp, #12
    8146:	pop	{r4, r5, pc}
    8148:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    814a:	blx	r3
    814c:	ldr	r2, [sp, #4]
    814e:	b.n	8120 <SharedSpiCard::writeStart(unsigned long)+0x14>
    8150:	mov	r0, r4
    8152:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
    8156:	movs	r0, #0
  return true;

 fail:
  spiStop();
  return false;
}
    8158:	add	sp, #12
    815a:	pop	{r4, r5, pc}
    815c:	.word	0x00007c59

00008160 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SharedSpiCard::readData(uint8_t* dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    8160:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8164:	ldr	r6, [pc, #104]	; (81d0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x70>)
    8166:	mov	r5, r0
    8168:	mov	r8, r1
    816a:	mov	r9, r2
    816c:	ldr	r4, [r6, #0]
    816e:	adds	r7, r0, #4
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) {set(ms);}
  uint16_t millis16() {return millis();}
  void set(uint16_t ms) {
    m_endTime = ms + millis16();
    8170:	add.w	r4, r4, #300	; 0x12c
    8174:	uxth	r4, r4
    8176:	b.n	8180 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    8178:	ldr	r3, [r6, #0]
#endif  // USE_SD_CRC

  // wait for start sector token
  Timeout timeout(SD_READ_TIMEOUT);
  while ((m_status = spiReceive()) == 0XFF) {
    if (timeout.timedOut()) {
    817a:	subs	r3, r4, r3
    817c:	lsls	r3, r3, #16
    817e:	bmi.n	81a4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x44>
  }
  void spiEnd() {
    m_spiDriver.end();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    8180:	mov	r0, r7
    8182:	bl	9878 <SdSpiArduinoDriver::receive()>
  uint16_t crc;
#endif  // USE_SD_CRC

  // wait for start sector token
  Timeout timeout(SD_READ_TIMEOUT);
  while ((m_status = spiReceive()) == 0XFF) {
    8186:	cmp	r0, #255	; 0xff
    8188:	strb	r0, [r5, #20]
    818a:	beq.n	8178 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
    if (timeout.timedOut()) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_SECTOR) {
    818c:	cmp	r0, #254	; 0xfe
    818e:	beq.n	81aa <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4a>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
//    (void)code;
    m_errorCode = code;
    8190:	movs	r3, #24
    8192:	strb	r3, [r5, #17]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    8194:	ldrb	r0, [r5, #18]
    8196:	cbz	r0, 81a0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x40>
    8198:	mov	r0, r5
    819a:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
#endif  // USE_SD_CRC
  return true;

 fail:
  spiStop();
  return false;
    819e:	movs	r0, #0
}
    81a0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    81a4:	movs	r3, #29
    81a6:	strb	r3, [r5, #17]
    81a8:	b.n	8194 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x34>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spiDriver.receive(buf, n);
    81aa:	mov	r2, r9
    81ac:	mov	r1, r8
    81ae:	mov	r0, r7
    81b0:	bl	9890 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    81b4:	strb	r0, [r5, #20]
    81b6:	cbz	r0, 81be <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5e>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
//    (void)code;
    m_errorCode = code;
    81b8:	movs	r3, #37	; 0x25
    81ba:	strb	r3, [r5, #17]
    81bc:	b.n	8194 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x34>
  }
  void spiEnd() {
    m_spiDriver.end();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    81be:	mov	r0, r7
    81c0:	bl	9878 <SdSpiArduinoDriver::receive()>
    81c4:	mov	r0, r7
    81c6:	bl	9878 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    81ca:	movs	r0, #1
    81cc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    81d0:	.word	0x20018b9c

000081d4 <SharedSpiCard::readRegister(unsigned char, void*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    81d4:	push	{r3, r4, r5, lr}
    81d6:	mov	r5, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    81d8:	movs	r2, #0
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    81da:	mov	r4, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    81dc:	bl	7e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    81e0:	cbz	r0, 81f4 <SharedSpiCard::readRegister(unsigned char, void*)+0x20>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
//    (void)code;
    m_errorCode = code;
    81e2:	movs	r3, #27
    81e4:	strb	r3, [r4, #17]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    81e6:	ldrb	r0, [r4, #18]
    81e8:	cbz	r0, 81f2 <SharedSpiCard::readRegister(unsigned char, void*)+0x1e>
    81ea:	mov	r0, r4
    81ec:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    81f0:	movs	r0, #0
}
    81f2:	pop	{r3, r4, r5, pc}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    81f4:	mov	r1, r5
    81f6:	movs	r2, #16
    81f8:	mov	r0, r4
    81fa:	bl	8160 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    81fe:	cmp	r0, #0
    8200:	beq.n	81e6 <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    8202:	ldrb	r5, [r4, #18]
    8204:	cmp	r5, #0
    8206:	beq.n	81f2 <SharedSpiCard::readRegister(unsigned char, void*)+0x1e>
    8208:	mov	r0, r4
    820a:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
    820e:	mov	r0, r5
    8210:	pop	{r3, r4, r5, pc}
    8212:	nop

00008214 <SharedSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    8214:	mov	r2, r1
    8216:	movs	r1, #9
    8218:	b.w	81d4 <SharedSpiCard::readRegister(unsigned char, void*)>

0000821c <SharedSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    821c:	mov	r2, r1
    821e:	movs	r1, #10
    8220:	b.w	81d4 <SharedSpiCard::readRegister(unsigned char, void*)>

00008224 <SharedSpiCard::sectorCount()>:
  return false;
}
//------------------------------------------------------------------------------
uint32_t SharedSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8224:	ldr	r3, [r0, #0]
    8226:	ldr	r2, [pc, #144]	; (82b8 <SharedSpiCard::sectorCount()+0x94>)
    8228:	ldr	r3, [r3, #76]	; 0x4c
    822a:	cmp	r3, r2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SharedSpiCard::sectorCount() {
    822c:	push	{r4, r5, lr}
    822e:	sub	sp, #20
    8230:	bne.n	8292 <SharedSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    8232:	mov	r2, sp
    8234:	movs	r1, #9
    8236:	bl	81d4 <SharedSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    823a:	cbz	r0, 824c <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    823c:	ldrb.w	r3, [sp]
    8240:	ands.w	r3, r3, #192	; 0xc0
    8244:	beq.n	8250 <SharedSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    8246:	cmp	r3, #64	; 0x40
    8248:	beq.n	8298 <SharedSpiCard::sectorCount()+0x74>
    824a:	movs	r0, #0
}
    824c:	add	sp, #20
    824e:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8250:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8254:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8258:	ldrb.w	r2, [sp, #7]
    825c:	and.w	r4, r4, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    8260:	ldrb.w	r0, [sp, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8264:	and.w	r3, r3, #3
    8268:	lsls	r4, r4, #1
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    826a:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    826e:	lsls	r2, r2, #2
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8270:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8274:	orr.w	r0, r4, r0, lsr #7
    8278:	and.w	r1, r1, #15
    827c:	orr.w	r3, r2, r3, lsl #10
    8280:	add	r0, r1
    8282:	orr.w	r3, r3, r5, lsr #6
    8286:	subs	r0, #7
    8288:	adds	r3, #1
    828a:	lsl.w	r0, r3, r0
    828e:	add	sp, #20
    8290:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SharedSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8292:	mov	r1, sp
    8294:	blx	r3
    8296:	b.n	823a <SharedSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8298:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    829c:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    82a0:	adds	r2, r3, #1
    82a2:	ldrb.w	r0, [sp, #8]
    82a6:	and.w	r3, r1, #63	; 0x3f
    82aa:	add.w	r3, r2, r3, lsl #16
    82ae:	add.w	r0, r3, r0, lsl #8
    82b2:	lsls	r0, r0, #10
}
    82b4:	add	sp, #20
    82b6:	pop	{r4, r5, pc}
    82b8:	.word	0x00008215

000082bc <SharedSpiCard::erase(unsigned long, unsigned long)>:
  return m_status;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    82bc:	ldr	r3, [r0, #0]
    m_status = spiReceive();
  } while (m_status & 0X80 && ++n < 10);
  return m_status;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    82be:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    82c2:	ldr	r3, [r3, #76]	; 0x4c
    m_status = spiReceive();
  } while (m_status & 0X80 && ++n < 10);
  return m_status;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    82c4:	sub	sp, #16
    82c6:	ldr	r4, [pc, #200]	; (8390 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd4>)
    82c8:	mov	r5, r0
    82ca:	mov	r7, r1
    82cc:	mov	r6, r2
    82ce:	cmp	r3, r4
    82d0:	bne.n	8330 <SharedSpiCard::erase(unsigned long, unsigned long)+0x74>
    82d2:	mov	r2, sp
    82d4:	movs	r1, #9
    82d6:	bl	81d4 <SharedSpiCard::readRegister(unsigned char, void*)>
    82da:	mov	r4, r0
  csd_t csd;
  if (!readCSD(&csd)) {
    82dc:	cbz	r4, 8300 <SharedSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    82de:	ldrb.w	r3, [sp, #10]
    82e2:	lsls	r2, r3, #25
    82e4:	bpl.n	8314 <SharedSpiCard::erase(unsigned long, unsigned long)+0x58>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    82e6:	ldrb	r3, [r5, #21]
    82e8:	cmp	r3, #3
    82ea:	beq.n	82f0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    82ec:	lsls	r7, r7, #9
    lastSector <<= 9;
    82ee:	lsls	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    82f0:	mov	r2, r7
    82f2:	movs	r1, #32
    82f4:	mov	r0, r5
    82f6:	bl	7e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    82fa:	cbz	r0, 8338 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
//    (void)code;
    m_errorCode = code;
    82fc:	movs	r3, #38	; 0x26
    82fe:	strb	r3, [r5, #17]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    8300:	ldrb	r4, [r5, #18]
    8302:	cbz	r4, 830c <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    8304:	mov	r0, r5
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    8306:	movs	r4, #0
    8308:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
}
    830c:	mov	r0, r4
    830e:	add	sp, #16
    8310:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8314:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    8318:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    831c:	adds	r2, r6, #1
    831e:	lsls	r3, r3, #1
    8320:	orrs	r2, r7
    8322:	orr.w	r3, r3, r1, lsr #7
    8326:	tst	r3, r2
    8328:	beq.n	82e6 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    832a:	movs	r3, #39	; 0x27
    832c:	strb	r3, [r5, #17]
    832e:	b.n	8300 <SharedSpiCard::erase(unsigned long, unsigned long)+0x44>
  return m_status;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    8330:	mov	r1, sp
    8332:	blx	r3
    8334:	mov	r4, r0
    8336:	b.n	82dc <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    8338:	mov	r2, r6
    833a:	movs	r1, #33	; 0x21
    833c:	mov	r0, r5
    833e:	bl	7e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8342:	cmp	r0, #0
    8344:	bne.n	82fc <SharedSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    8346:	mov	r2, r0
    8348:	movs	r1, #38	; 0x26
    834a:	mov	r0, r5
    834c:	bl	7e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8350:	cmp	r0, #0
    8352:	bne.n	82fc <SharedSpiCard::erase(unsigned long, unsigned long)+0x40>
    8354:	ldr	r7, [pc, #60]	; (8394 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>)
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) {set(ms);}
  uint16_t millis16() {return millis();}
  void set(uint16_t ms) {
    m_endTime = ms + millis16();
    8356:	movw	r6, #10000	; 0x2710
    835a:	add.w	r8, r5, #4
    835e:	ldr	r3, [r7, #0]
    8360:	add	r6, r3
    8362:	uxth	r6, r6
    8364:	b.n	836e <SharedSpiCard::erase(unsigned long, unsigned long)+0xb2>
    8366:	ldr	r3, [r7, #0]
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    if (timeout.timedOut()) {
    8368:	subs	r3, r6, r3
    836a:	lsls	r3, r3, #16
    836c:	bmi.n	8388 <SharedSpiCard::erase(unsigned long, unsigned long)+0xcc>
  }
  void spiEnd() {
    m_spiDriver.end();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    836e:	mov	r0, r8
    8370:	bl	9878 <SdSpiArduinoDriver::receive()>
  return true;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    8374:	cmp	r0, #255	; 0xff
    8376:	bne.n	8366 <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    8378:	ldrb	r3, [r5, #18]
    837a:	cmp	r3, #0
    837c:	beq.n	830c <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    837e:	mov	r0, r5
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  spiStop();
  return true;
    8380:	mov	r4, r3
    8382:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
    8386:	b.n	830c <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
//    (void)code;
    m_errorCode = code;
    8388:	movs	r3, #40	; 0x28
    838a:	strb	r3, [r5, #17]
    838c:	b.n	8300 <SharedSpiCard::erase(unsigned long, unsigned long)+0x44>
    838e:	nop
    8390:	.word	0x00008215
    8394:	.word	0x20018b9c

00008398 <SharedSpiCard::readStart(unsigned long)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    8398:	ldr	r3, [r0, #0]
  return readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStart(uint32_t sector) {
    839a:	mov	r2, r1
    839c:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    839e:	ldr	r3, [r3, #88]	; 0x58
  return readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStart(uint32_t sector) {
    83a0:	sub	sp, #12
    83a2:	ldr	r5, [pc, #68]	; (83e8 <SharedSpiCard::readStart(unsigned long)+0x50>)
    83a4:	mov	r4, r0
    83a6:	cmp	r3, r5
    83a8:	bne.n	83d4 <SharedSpiCard::readStart(unsigned long)+0x3c>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    83aa:	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
    83ac:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    83ae:	mov.w	r1, #18
    83b2:	mov	r0, r4
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    83b4:	it	ne
    83b6:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    83b8:	bl	7e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    83bc:	cbz	r0, 83ca <SharedSpiCard::readStart(unsigned long)+0x32>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
//    (void)code;
    m_errorCode = code;
    83be:	movs	r3, #12
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    83c0:	ldrb	r0, [r4, #18]
    83c2:	strb	r3, [r4, #17]
    83c4:	cbnz	r0, 83dc <SharedSpiCard::readStart(unsigned long)+0x44>
  return true;

 fail:
  spiStop();
  return false;
}
    83c6:	add	sp, #12
    83c8:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  m_state = READ_STATE;
    83ca:	movs	r3, #1
  return true;
    83cc:	mov	r0, r3
  }
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  m_state = READ_STATE;
    83ce:	strb	r3, [r4, #19]
  return true;

 fail:
  spiStop();
  return false;
}
    83d0:	add	sp, #12
    83d2:	pop	{r4, r5, pc}
    83d4:	str	r1, [sp, #4]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    83d6:	blx	r3
    83d8:	ldr	r2, [sp, #4]
    83da:	b.n	83ac <SharedSpiCard::readStart(unsigned long)+0x14>
    83dc:	mov	r0, r4
    83de:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
    83e2:	movs	r0, #0
  return true;

 fail:
  spiStop();
  return false;
}
    83e4:	add	sp, #12
    83e6:	pop	{r4, r5, pc}
    83e8:	.word	0x00007c59

000083ec <SharedSpiCard::readStop()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStop() {
    83ec:	push	{r4, r5, r6, lr}
  m_state = IDLE_STATE;
    83ee:	movs	r6, #0
  if (cardCommand(CMD12, 0)) {
    83f0:	movs	r1, #12
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStop() {
    83f2:	mov	r4, r0
  m_state = IDLE_STATE;
    83f4:	strb	r6, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    83f6:	mov	r2, r6
    83f8:	bl	7e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    83fc:	cbz	r0, 840a <SharedSpiCard::readStop()+0x1e>
    83fe:	movs	r3, #9
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    8400:	ldrb	r5, [r4, #18]
    8402:	strb	r3, [r4, #17]
    8404:	cbnz	r5, 841e <SharedSpiCard::readStop()+0x32>
  return true;

 fail:
  spiStop();
  return false;
}
    8406:	mov	r0, r5
    8408:	pop	{r4, r5, r6, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    840a:	ldrb	r5, [r4, #18]
    840c:	cbnz	r5, 8414 <SharedSpiCard::readStop()+0x28>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    840e:	movs	r5, #1

 fail:
  spiStop();
  return false;
}
    8410:	mov	r0, r5
    8412:	pop	{r4, r5, r6, pc}
    8414:	mov	r0, r4
    8416:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
    841a:	mov	r0, r5
    841c:	pop	{r4, r5, r6, pc}
    841e:	mov	r5, r6
    8420:	mov	r0, r4
    8422:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
    8426:	mov	r0, r5
    8428:	pop	{r4, r5, r6, pc}
    842a:	nop

0000842c <SharedSpiCard::syncDevice()>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SharedSpiCard::syncDevice() {
  if (m_state == WRITE_STATE) {
    842c:	ldrb	r3, [r0, #19]
    842e:	cmp	r3, #2
    8430:	beq.n	843e <SharedSpiCard::syncDevice()+0x12>
    return writeStop();
  }
  if (m_state == READ_STATE) {
    8432:	cmp	r3, #1
    8434:	beq.n	843a <SharedSpiCard::syncDevice()+0xe>
    return readStop();
  }
  return true;
}
    8436:	movs	r0, #1
    8438:	bx	lr
bool SharedSpiCard::syncDevice() {
  if (m_state == WRITE_STATE) {
    return writeStop();
  }
  if (m_state == READ_STATE) {
    return readStop();
    843a:	b.w	83ec <SharedSpiCard::readStop()>
    843e:	b.w	7da0 <SharedSpiCard::syncDevice() [clone .part.19] [clone .constprop.35]>
    8442:	nop

00008444 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8444:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8448:	mov	sl, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    844a:	ldrb	r3, [r0, #19]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    844c:	mov	r6, r0
    844e:	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    8450:	cmp	r3, #1
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8452:	mov	r5, r2
    8454:	ldr.w	r8, [sp, #32]
    8458:	ldr	r7, [sp, #36]	; 0x24
  if (sdState() != READ_STATE || sector != m_curSector) {
    845a:	beq.n	84a6 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x62>
    if (!readStart(sector)) {
    845c:	mov	r1, r4
    845e:	mov	r0, r6
    8460:	bl	8398 <SharedSpiCard::readStart(unsigned long)>
    8464:	cbz	r0, 8492 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x4e>
      goto fail;
    }
    m_curSector = sector;
    8466:	str	r4, [r6, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    8468:	cmp.w	sl, #0
    846c:	beq.n	8498 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x54>
    846e:	add.w	r9, r4, sl
    8472:	b.n	847e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3a>
    if (readData(dst)) {
      callback(sector + i, dst, context);
    8474:	mov	r0, r4
    8476:	adds	r4, #1
    8478:	blx	r8
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
  }
  for (size_t i = 0; i < ns; i++) {
    847a:	cmp	r9, r4
    847c:	beq.n	8498 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x54>
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readData(uint8_t* dst) {
  return readData(dst, 512);
    847e:	mov.w	r2, #512	; 0x200
    8482:	mov	r1, r5
    8484:	mov	r0, r6
    8486:	bl	8160 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    }
    m_curSector = sector;
  }
  for (size_t i = 0; i < ns; i++) {
    if (readData(dst)) {
      callback(sector + i, dst, context);
    848a:	mov	r2, r7
    848c:	mov	r1, r5
      goto fail;
    }
    m_curSector = sector;
  }
  for (size_t i = 0; i < ns; i++) {
    if (readData(dst)) {
    848e:	cmp	r0, #0
    8490:	bne.n	8474 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x30>
    }
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
    8492:	movs	r0, #0
    8494:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      callback(sector + i, dst, context);
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
    8498:	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    849a:	ldrb	r0, [r6, #28]
      callback(sector + i, dst, context);
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
    849c:	add	r3, sl
    849e:	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    84a0:	cbz	r0, 84ae <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x6a>
 fail:
  return false;
}
    84a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
  if (sdState() != READ_STATE || sector != m_curSector) {
    84a6:	ldr	r3, [r0, #24]
    84a8:	cmp	r3, r1
    84aa:	bne.n	845c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x18>
    84ac:	b.n	8468 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x24>
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : readStop();
    84ae:	mov	r0, r6
 fail:
  return false;
}
    84b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : readStop();
    84b4:	b.w	83ec <SharedSpiCard::readStop()>

000084b8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(
    uint32_t sector, uint8_t* dst, size_t ns) {
    84b8:	push	{r3, r4, r5, r6, r7, lr}
    84ba:	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    84bc:	ldrb	r3, [r0, #19]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(
    uint32_t sector, uint8_t* dst, size_t ns) {
    84be:	mov	r6, r0
    84c0:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    84c2:	cmp	r3, #1
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(
    uint32_t sector, uint8_t* dst, size_t ns) {
    84c4:	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    84c6:	beq.n	8502 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if (!readStart(sector)) {
    84c8:	mov	r1, r5
    84ca:	mov	r0, r6
    84cc:	bl	8398 <SharedSpiCard::readStart(unsigned long)>
    84d0:	cbz	r0, 84f2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3a>
      goto fail;
    }
    m_curSector = sector;
    84d2:	str	r5, [r6, #24]
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    84d4:	cbz	r7, 84f6 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3e>
    84d6:	movs	r5, #0
    84d8:	b.n	84de <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
    84da:	cmp	r7, r5
    84dc:	beq.n	84f6 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3e>
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readData(uint8_t* dst) {
  return readData(dst, 512);
    84de:	mov.w	r2, #512	; 0x200
    84e2:	mov	r1, r4
    84e4:	mov	r0, r6
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    84e6:	adds	r5, #1
    84e8:	add	r4, r2
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readData(uint8_t* dst) {
  return readData(dst, 512);
    84ea:	bl	8160 <SharedSpiCard::readData(unsigned char*, unsigned int)>
      goto fail;
    }
    m_curSector = sector;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst)) {
    84ee:	cmp	r0, #0
    84f0:	bne.n	84da <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : readStop();

 fail:
  return false;
    84f2:	movs	r0, #0
    84f4:	pop	{r3, r4, r5, r6, r7, pc}
      callback(sector + i, dst, context);
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
    84f6:	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    84f8:	ldrb	r0, [r6, #28]
      callback(sector + i, dst, context);
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
    84fa:	add	r7, r3
    84fc:	str	r7, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    84fe:	cbz	r0, 850a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x52>
  m_curSector += ns;
  return m_dedicatedSpi ? true : readStop();

 fail:
  return false;
}
    8500:	pop	{r3, r4, r5, r6, r7, pc}
  return readSectors(sector, dst, 1);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(
    uint32_t sector, uint8_t* dst, size_t ns) {
  if (sdState() != READ_STATE || sector != m_curSector) {
    8502:	ldr	r3, [r0, #24]
    8504:	cmp	r3, r1
    8506:	bne.n	84c8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x10>
    8508:	b.n	84d4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : readStop();
    850a:	mov	r0, r6
  m_curSector += ns;
  return m_dedicatedSpi ? true : readStop();

 fail:
  return false;
}
    850c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    } else {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : readStop();
    8510:	b.w	83ec <SharedSpiCard::readStop()>

00008514 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    8514:	push	{r4, r5, r6, lr}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    8516:	adds	r4, r0, #4
    8518:	mov	r6, r2
    851a:	mov	r5, r0
    851c:	mov	r0, r4
    851e:	bl	98b0 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    8522:	mov.w	r2, #512	; 0x200
    8526:	mov	r1, r6
    8528:	mov	r0, r4
    852a:	bl	98c4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    852e:	mov	r0, r4
    8530:	movs	r1, #255	; 0xff
    8532:	bl	98b0 <SdSpiArduinoDriver::send(unsigned char)>
    8536:	mov	r0, r4
    8538:	movs	r1, #255	; 0xff
    853a:	bl	98b0 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiEnd() {
    m_spiDriver.end();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    853e:	mov	r0, r4
    8540:	bl	9878 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    8544:	and.w	r3, r0, #31
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    8548:	strb	r0, [r5, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    854a:	cmp	r3, #5
    854c:	beq.n	8562 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
//    (void)code;
    m_errorCode = code;
    854e:	movs	r3, #32
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    8550:	ldrb	r0, [r5, #18]
    8552:	strb	r3, [r5, #17]
    8554:	cbnz	r0, 8558 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

 fail:
  spiStop();
  return false;
}
    8556:	pop	{r4, r5, r6, pc}
    8558:	mov	r0, r5
    855a:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
  }
  return true;

 fail:
  spiStop();
  return false;
    855e:	movs	r0, #0
    8560:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    8562:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    8564:	pop	{r4, r5, r6, pc}
    8566:	nop

00008568 <SharedSpiCard::writeData(unsigned char const*)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeData(const uint8_t* src) {
    8568:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    856c:	ldr	r5, [pc, #80]	; (85c0 <SharedSpiCard::writeData(unsigned char const*)+0x58>)
    856e:	mov	r7, r0
    8570:	mov	r8, r1
    8572:	adds	r6, r0, #4
    8574:	ldr	r4, [r5, #0]
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) {set(ms);}
  uint16_t millis16() {return millis();}
  void set(uint16_t ms) {
    m_endTime = ms + millis16();
    8576:	add.w	r4, r4, #600	; 0x258
    857a:	uxth	r4, r4
    857c:	b.n	8586 <SharedSpiCard::writeData(unsigned char const*)+0x1e>
    857e:	ldr	r3, [r5, #0]
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    if (timeout.timedOut()) {
    8580:	subs	r3, r4, r3
    8582:	lsls	r3, r3, #16
    8584:	bmi.n	85a4 <SharedSpiCard::writeData(unsigned char const*)+0x3c>
  }
  void spiEnd() {
    m_spiDriver.end();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    8586:	mov	r0, r6
    8588:	bl	9878 <SdSpiArduinoDriver::receive()>
  return true;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    858c:	cmp	r0, #255	; 0xff
    858e:	bne.n	857e <SharedSpiCard::writeData(unsigned char const*)+0x16>
  // wait for previous write to finish
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    8590:	mov	r2, r8
    8592:	movs	r1, #252	; 0xfc
    8594:	mov	r0, r7
    8596:	bl	8514 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    859a:	cbnz	r0, 85ba <SharedSpiCard::writeData(unsigned char const*)+0x52>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    859c:	ldrb	r0, [r7, #18]
    859e:	cbnz	r0, 85ae <SharedSpiCard::writeData(unsigned char const*)+0x46>
  return true;

 fail:
  spiStop();
  return false;
}
    85a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
//    (void)code;
    m_errorCode = code;
    85a4:	movs	r3, #36	; 0x24
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    85a6:	ldrb	r0, [r7, #18]
    85a8:	strb	r3, [r7, #17]
    85aa:	cmp	r0, #0
    85ac:	beq.n	85a0 <SharedSpiCard::writeData(unsigned char const*)+0x38>
    85ae:	mov	r0, r7
    85b0:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
  }
  return true;

 fail:
  spiStop();
  return false;
    85b4:	movs	r0, #0
    85b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    85ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    85be:	nop
    85c0:	.word	0x20018b9c

000085c4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    85c4:	ldr	r3, [r0, #0]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    85c6:	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    85c8:	ldr	r3, [r3, #88]	; 0x58
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    85ca:	sub	sp, #8
    85cc:	ldr	r5, [pc, #84]	; (8624 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x60>)
    85ce:	mov	r4, r0
    85d0:	mov	r6, r2
    85d2:	cmp	r3, r5
    85d4:	bne.n	861c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x58>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    85d6:	ldrb	r0, [r0, #21]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    85d8:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD24, sector)) {
    85da:	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    85dc:	it	ne
    85de:	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, sector)) {
    85e0:	mov	r2, r1
    85e2:	movs	r1, #24
    85e4:	bl	7e70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    85e8:	cbz	r0, 85fe <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x3a>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
//    (void)code;
    m_errorCode = code;
    85ea:	movs	r3, #13
    85ec:	strb	r3, [r4, #17]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    85ee:	ldrb	r0, [r4, #18]
    85f0:	cbz	r0, 85fa <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x36>
    85f2:	mov	r0, r4
    85f4:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    85f8:	movs	r0, #0
}
    85fa:	add	sp, #8
    85fc:	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD24, sector)) {
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_SECTOR, src)) {
    85fe:	mov	r2, r6
    8600:	movs	r1, #254	; 0xfe
    8602:	mov	r0, r4
    8604:	bl	8514 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8608:	cmp	r0, #0
    860a:	beq.n	85ee <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  if (m_spiActive) {
    860c:	ldrb	r5, [r4, #18]
    860e:	cmp	r5, #0
    8610:	beq.n	85fa <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x36>
    8612:	mov	r0, r4
    8614:	bl	7da8 <SharedSpiCard::spiStop() [clone .part.9] [clone .constprop.37]>
    8618:	mov	r0, r5
    861a:	b.n	85fa <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x36>
    861c:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    861e:	blx	r3
    8620:	ldr	r1, [sp, #4]
    8622:	b.n	85d8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    8624:	.word	0x00007c59

00008628 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  }
  m_dedicatedSpi = value;
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8628:	push	{r4}
  if (m_dedicatedSpi) {
    862a:	ldrb	r4, [r0, #28]
    862c:	cbnz	r4, 8636 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe>
    return writeSectors(sector, src, 1);
  }
  return SharedSpiCard::writeSector(sector, src);
}
    862e:	ldr.w	r4, [sp], #4
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_dedicatedSpi) {
    return writeSectors(sector, src, 1);
  }
  return SharedSpiCard::writeSector(sector, src);
    8632:	b.w	85c4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_dedicatedSpi) {
    return writeSectors(sector, src, 1);
    8636:	ldr	r4, [r0, #0]
    8638:	movs	r3, #1
    863a:	ldr	r4, [r4, #40]	; 0x28
    863c:	mov	ip, r4
  }
  return SharedSpiCard::writeSector(sector, src);
}
    863e:	ldr.w	r4, [sp], #4
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_dedicatedSpi) {
    return writeSectors(sector, src, 1);
    8642:	bx	ip

00008644 <DedicatedSpiCard::begin(SdSpiConfig)>:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
//==============================================================================
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    8644:	push	{r4, r5, lr}
    8646:	sub	sp, #20
    8648:	mov	r5, r0
    864a:	add	r4, sp, #4
    864c:	stmia.w	r4, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    8650:	ldmia.w	r4, {r1, r2, r3}
    8654:	bl	7f20 <SharedSpiCard::begin(SdSpiConfig)>
    8658:	cbz	r0, 8664 <DedicatedSpiCard::begin(SdSpiConfig)+0x20>
    return false;
  }
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
    865a:	ldrb.w	r3, [sp, #5]
    865e:	and.w	r3, r3, #1
    8662:	strb	r3, [r5, #28]
  return true;
}
    8664:	add	sp, #20
    8666:	pop	{r4, r5, pc}

00008668 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    8668:	bx	lr
    866a:	nop

0000866c <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    866c:	ldr	r3, [pc, #32]	; (8690 <sdIrs()+0x24>)
    866e:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    8670:	ldr	r2, [pc, #32]	; (8694 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    8672:	ldr	r0, [pc, #36]	; (8698 <sdIrs()+0x2c>)
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    8674:	push	{r4}
  SDHC_IRQSIGEN = 0;
    8676:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    8678:	ldr	r4, [r3, #48]	; 0x30
    867a:	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    867c:	ldr	r2, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    867e:	ldr.w	r4, [sp], #4
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
    8682:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    8684:	ldr	r2, [r3, #72]	; 0x48
    8686:	bic.w	r2, r2, #129	; 0x81
    868a:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    868c:	strb	r1, [r0, #0]
}
    868e:	bx	lr
    8690:	.word	0x402c0000
    8694:	.word	0x20017a18
    8698:	.word	0x20018bc6

0000869c <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    869c:	ldr	r3, [pc, #12]	; (86ac <isBusyCommandComplete()+0x10>)
    869e:	ldr	r0, [pc, #16]	; (86b0 <isBusyCommandComplete()+0x14>)
    86a0:	ldr	r3, [r3, #48]	; 0x30
    86a2:	ands	r0, r3
}
    86a4:	clz	r0, r0
    86a8:	lsrs	r0, r0, #5
    86aa:	bx	lr
    86ac:	.word	0x402c0000
    86b0:	.word	0x000f0001

000086b4 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    86b4:	ldr	r3, [pc, #8]	; (86c0 <isBusyCommandInhibit()+0xc>)
    86b6:	ldr	r0, [r3, #36]	; 0x24
}
    86b8:	and.w	r0, r0, #1
    86bc:	bx	lr
    86be:	nop
    86c0:	.word	0x402c0000

000086c4 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    86c4:	ldr	r3, [pc, #12]	; (86d4 <isBusyDat()+0x10>)
    86c6:	ldr	r0, [r3, #36]	; 0x24
    86c8:	eor.w	r0, r0, #16777216	; 0x1000000
}
    86cc:	ubfx	r0, r0, #24, #1
    86d0:	bx	lr
    86d2:	nop
    86d4:	.word	0x402c0000

000086d8 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    86d8:	ldr	r3, [pc, #4]	; (86e0 <isBusyDMA()+0x8>)
    86da:	ldrb	r0, [r3, #0]
}
    86dc:	bx	lr
    86de:	nop
    86e0:	.word	0x20018bc6

000086e4 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    86e4:	ldr	r3, [pc, #12]	; (86f4 <isBusyFifoRead()+0x10>)
    86e6:	ldr	r0, [r3, #36]	; 0x24
    86e8:	eor.w	r0, r0, #2048	; 0x800
}
    86ec:	ubfx	r0, r0, #11, #1
    86f0:	bx	lr
    86f2:	nop
    86f4:	.word	0x402c0000

000086f8 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    86f8:	ldr	r3, [pc, #12]	; (8708 <isBusyFifoWrite()+0x10>)
    86fa:	ldr	r0, [r3, #36]	; 0x24
    86fc:	eor.w	r0, r0, #1024	; 0x400
}
    8700:	ubfx	r0, r0, #10, #1
    8704:	bx	lr
    8706:	nop
    8708:	.word	0x402c0000

0000870c <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    870c:	ldr	r3, [pc, #12]	; (871c <isBusyTransferComplete()+0x10>)
    870e:	ldr	r0, [pc, #16]	; (8720 <isBusyTransferComplete()+0x14>)
    8710:	ldr	r3, [r3, #48]	; 0x30
    8712:	ands	r0, r3
}
    8714:	clz	r0, r0
    8718:	lsrs	r0, r0, #5
    871a:	bx	lr
    871c:	.word	0x402c0000
    8720:	.word	0x117f0002

00008724 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    8724:	mov.w	r2, #1000	; 0x3e8
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8728:	ldr	r3, [pc, #172]	; (87d8 <setSdclk(unsigned long)+0xb4>)
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    872a:	ldr	r1, [pc, #176]	; (87dc <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    872c:	mul.w	r0, r2, r0
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8730:	ldr	r1, [r1, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8732:	ldr.w	r2, [r3, #256]	; 0x100
    8736:	ldr	r3, [pc, #168]	; (87e0 <setSdclk(unsigned long)+0xbc>)
    8738:	ubfx	r1, r1, #11, #3
    873c:	and.w	r2, r2, #63	; 0x3f
    8740:	adds	r1, #1
    8742:	umull	r2, r3, r3, r2
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    8746:	push	{r4, r5, r6, r7}
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8748:	lsrs	r3, r3, #2
    874a:	ldr	r5, [pc, #152]	; (87e4 <setSdclk(unsigned long)+0xc0>)
    874c:	udiv	r5, r5, r3
    8750:	udiv	r5, r5, r1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8754:	cmp.w	r0, r5, lsr #4
    8758:	bcs.n	87cc <setSdclk(unsigned long)+0xa8>
    875a:	movs	r2, #1
    875c:	b.n	8762 <setSdclk(unsigned long)+0x3e>
    875e:	cmp	r2, #255	; 0xff
    8760:	bhi.n	876e <setSdclk(unsigned long)+0x4a>
    sdclkfs <<= 1;
    8762:	lsls	r2, r2, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8764:	lsls	r3, r2, #4
    8766:	udiv	r3, r5, r3
    876a:	cmp	r0, r3
    876c:	bcc.n	875e <setSdclk(unsigned long)+0x3a>
    876e:	lsrs	r1, r2, #1
    8770:	lsls	r7, r1, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8772:	udiv	r3, r5, r2
    8776:	cmp	r0, r3
    8778:	bcs.n	87d2 <setSdclk(unsigned long)+0xae>
    877a:	lsls	r4, r2, #1
    877c:	movs	r1, #1
    877e:	b.n	8782 <setSdclk(unsigned long)+0x5e>
    8780:	mov	r4, r3
    dvs++;
    8782:	adds	r6, r1, #1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8784:	udiv	r3, r5, r4
    8788:	cmp	r0, r3
    878a:	add.w	r3, r2, r4
    878e:	bcs.n	87c8 <setSdclk(unsigned long)+0xa4>
    8790:	cmp	r6, #16
    8792:	mov	r1, r6
    8794:	bne.n	8780 <setSdclk(unsigned long)+0x5c>
    8796:	movs	r3, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8798:	mov.w	r2, #1000	; 0x3e8
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    879c:	ldr	r6, [pc, #72]	; (87e8 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    879e:	ldr	r1, [pc, #76]	; (87ec <setSdclk(unsigned long)+0xc8>)
    87a0:	mul.w	r4, r2, r4
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    87a4:	ldr	r0, [pc, #72]	; (87f0 <setSdclk(unsigned long)+0xcc>)

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    87a6:	mov	r2, r6
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    87a8:	udiv	r5, r5, r4
    87ac:	str	r5, [r1, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    87ae:	ldr	r1, [r6, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    87b0:	ands	r0, r1
    87b2:	orr.w	r0, r0, #917504	; 0xe0000
    87b6:	orr.w	r1, r0, r7
    87ba:	orrs	r1, r3
    87bc:	str	r1, [r6, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    87be:	ldr	r3, [r2, #36]	; 0x24
    87c0:	lsls	r3, r3, #28
    87c2:	bpl.n	87be <setSdclk(unsigned long)+0x9a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    87c4:	pop	{r4, r5, r6, r7}
    87c6:	bx	lr
    87c8:	lsls	r3, r1, #4
    87ca:	b.n	8798 <setSdclk(unsigned long)+0x74>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    87cc:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    87ce:	movs	r2, #1
    87d0:	b.n	8772 <setSdclk(unsigned long)+0x4e>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    87d2:	mov	r4, r2
    87d4:	movs	r3, #0
    87d6:	b.n	8798 <setSdclk(unsigned long)+0x74>
    87d8:	.word	0x400d8000
    87dc:	.word	0x400fc000
    87e0:	.word	0xaaaaaaab
    87e4:	.word	0x5e69ec00
    87e8:	.word	0x402c0000
    87ec:	.word	0x2000733c
    87f0:	.word	0xfff0000f

000087f4 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    87f4:	ldr	r3, [pc, #4]	; (87fc <SdioCard::errorCode() const+0x8>)
}
    87f6:	ldrb	r0, [r3, #0]
    87f8:	bx	lr
    87fa:	nop
    87fc:	.word	0x20002586

00008800 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    8800:	ldr	r3, [pc, #4]	; (8808 <SdioCard::errorData() const+0x8>)
    8802:	ldr	r0, [r3, #0]
}
    8804:	bx	lr
    8806:	nop
    8808:	.word	0x20017a18

0000880c <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    880c:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    880e:	ldr	r4, [pc, #20]	; (8824 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    8810:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    8812:	ldmia	r4!, {r0, r1, r2, r3}
    8814:	str	r0, [r5, #0]
  return true;
}
    8816:	movs	r0, #1
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    8818:	str	r1, [r5, #4]
    881a:	str	r2, [r5, #8]
    881c:	str	r3, [r5, #12]
  return true;
}
    881e:	pop	{r4, r5}
    8820:	bx	lr
    8822:	nop
    8824:	.word	0x2001754c

00008828 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    8828:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    882a:	ldr	r4, [pc, #20]	; (8840 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    882c:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    882e:	ldmia	r4!, {r0, r1, r2, r3}
    8830:	str	r0, [r5, #0]
  return true;
}
    8832:	movs	r0, #1
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    8834:	str	r1, [r5, #4]
    8836:	str	r2, [r5, #8]
    8838:	str	r3, [r5, #12]
  return true;
}
    883a:	pop	{r4, r5}
    883c:	bx	lr
    883e:	nop
    8840:	.word	0x2001755c

00008844 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    8844:	ldr	r3, [pc, #8]	; (8850 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    8846:	movs	r0, #1
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    8848:	ldr	r3, [r3, #0]
    884a:	str	r3, [r1, #0]
  return true;
}
    884c:	bx	lr
    884e:	nop
    8850:	.word	0x2001756c

00008854 <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    8854:	bx	lr
    8856:	nop

00008858 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    8858:	push	{r3, r4, r5, r6, r7, lr}
    885a:	mov	r5, r0
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    885c:	ldr	r7, [pc, #28]	; (887c <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    885e:	bl	ae60 <micros>
    8862:	mov	r6, r0
    8864:	b.n	8870 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8866:	bl	ae60 <micros>
    886a:	subs	r0, r0, r6
    886c:	cmp	r0, r7
    886e:	bhi.n	8878 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8870:	blx	r5
    8872:	mov	r4, r0
    8874:	cmp	r0, #0
    8876:	bne.n	8866 <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    8878:	mov	r0, r4
    887a:	pop	{r3, r4, r5, r6, r7, pc}
    887c:	.word	0x000f4240

00008880 <yieldTimeout(bool (*)())>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    8880:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    8884:	ldr.w	r8, [pc, #64]	; 88c8 <yieldTimeout(bool (*)())+0x48>
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    8888:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    888a:	ldr	r7, [pc, #56]	; (88c4 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    888c:	str.w	r0, [r8]
  uint32_t m = micros();
    8890:	bl	ae60 <micros>
    8894:	mov	r6, r0
    8896:	b.n	88a6 <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8898:	bl	ae60 <micros>
    889c:	subs	r0, r0, r6
    889e:	cmp	r0, r7
    88a0:	bhi.n	88b8 <yieldTimeout(bool (*)())+0x38>
      m_busyFcn = 0;
      return true;
    }
    yield();
    88a2:	bl	b65c <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    88a6:	blx	r5
    88a8:	mov	r4, r0
    88aa:	cmp	r0, #0
    88ac:	bne.n	8898 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    88ae:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    88b2:	mov	r0, r4
    88b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    88b8:	movs	r3, #0
    }
    yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    88ba:	mov	r0, r4
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    88bc:	str.w	r3, [r8]
    }
    yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    88c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    88c4:	.word	0x000f4240
    88c8:	.word	0x20017a14

000088cc <SdioCard::~SdioCard()>:
    88cc:	push	{r4, lr}
    88ce:	mov	r4, r0
    88d0:	movs	r1, #12
    88d2:	bl	bc9c <operator delete(void*, unsigned int)>
    88d6:	mov	r0, r4
    88d8:	pop	{r4, pc}
    88da:	nop

000088dc <enableGPIO(bool) [clone .part.0]>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    88dc:	ldr	r3, [pc, #60]	; (891c <enableGPIO(bool) [clone .part.0]+0x40>)
    88de:	movs	r2, #0

  const uint32_t DATA_MASK = CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE |
                             IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    88e0:	movw	r1, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    88e4:	movw	r0, #4280	; 0x10b8
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    88e8:	str.w	r2, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    88ec:	str.w	r2, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    88f0:	str.w	r2, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    88f4:	str.w	r2, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    88f8:	str.w	r2, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    88fc:	str.w	r2, [r3, #456]	; 0x1c8

  const uint32_t DATA_MASK = CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE |
                             IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    8900:	str.w	r1, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    8904:	str.w	r1, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    8908:	str.w	r1, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    890c:	str.w	r0, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    8910:	str.w	r1, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    8914:	str.w	r1, [r3, #952]	; 0x3b8
    8918:	bx	lr
    891a:	nop
    891c:	.word	0x401f8000

00008920 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    8920:	ldr	r3, [pc, #20]	; (8938 <SdioCard::type() const+0x18>)
    8922:	ldrb	r3, [r3, #0]
    8924:	cbz	r3, 8934 <SdioCard::type() const+0x14>
    8926:	ldr	r3, [pc, #20]	; (893c <SdioCard::type() const+0x1c>)
    8928:	ldrb	r3, [r3, #0]
    892a:	cmp	r3, #0
    892c:	ite	ne
    892e:	movne	r0, #3
    8930:	moveq	r0, #2
    8932:	bx	lr
    8934:	movs	r0, #1
}
    8936:	bx	lr
    8938:	.word	0x20018bc3
    893c:	.word	0x20018bc4

00008940 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8940:	push	{r3, r4, r5, lr}
    8942:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    8944:	ldr	r0, [pc, #80]	; (8998 <cardCommand(unsigned long, unsigned long)+0x58>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8946:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    8948:	bl	8858 <waitTimeout(bool (*)())>
    894c:	cbnz	r0, 8992 <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    894e:	ldr	r3, [pc, #76]	; (899c <cardCommand(unsigned long, unsigned long)+0x5c>)
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8950:	lsls	r1, r4, #10
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    8952:	str	r5, [r3, #8]
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8954:	bpl.n	8966 <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    8956:	ldr	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8958:	uxtb	r2, r4
  }
  SDHC_CMDARG = arg;
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    895a:	bic.w	r1, r1, #255	; 0xff
    895e:	str	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8960:	ldr	r1, [r3, #72]	; 0x48
    8962:	orrs	r2, r1
    8964:	str	r2, [r3, #72]	; 0x48
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    8966:	bic.w	r4, r4, #255	; 0xff
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    896a:	ldr	r5, [pc, #48]	; (899c <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    896c:	ldr	r0, [pc, #48]	; (89a0 <cardCommand(unsigned long, unsigned long)+0x60>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    896e:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    8970:	bl	8858 <waitTimeout(bool (*)())>
    8974:	cbnz	r0, 8992 <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    8976:	ldr	r2, [r5, #48]	; 0x30
    8978:	ldr	r3, [pc, #40]	; (89a4 <cardCommand(unsigned long, unsigned long)+0x64>)
    897a:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    897c:	ldr	r2, [r3, #0]
    897e:	str	r2, [r5, #48]	; 0x30

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8980:	ldr	r2, [r3, #0]
    8982:	lsls	r2, r2, #31
    8984:	bpl.n	8992 <cardCommand(unsigned long, unsigned long)+0x52>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    8986:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8988:	tst.w	r3, #983040	; 0xf0000
    898c:	bne.n	8992 <cardCommand(unsigned long, unsigned long)+0x52>
    898e:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    8990:	pop	{r3, r4, r5, pc}
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    8992:	movs	r0, #0
    8994:	pop	{r3, r4, r5, pc}
    8996:	nop
    8998:	.word	0x000086b5
    899c:	.word	0x402c0000
    89a0:	.word	0x0000869d
    89a4:	.word	0x20017a18

000089a8 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    89a8:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    89aa:	ldr	r3, [pc, #28]	; (89c8 <isBusyCMD13()+0x20>)
    89ac:	ldr	r0, [pc, #28]	; (89cc <isBusyCMD13()+0x24>)
    89ae:	ldr	r1, [r3, #0]
    89b0:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    89b4:	cbz	r0, 89c4 <isBusyCMD13()+0x1c>
    89b6:	ldr	r3, [pc, #24]	; (89d0 <isBusyCMD13()+0x28>)
    89b8:	ldr	r0, [r3, #16]
    89ba:	eor.w	r0, r0, #256	; 0x100
    89be:	ubfx	r0, r0, #8, #1
    89c2:	pop	{r3, pc}
    89c4:	movs	r0, #1
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
    89c6:	pop	{r3, pc}
    89c8:	.word	0x20017570
    89cc:	.word	0x0d1a0000
    89d0:	.word	0x402c0000

000089d4 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    89d4:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    89d6:	ldr	r3, [pc, #16]	; (89e8 <SdioCard::status()+0x14>)
    89d8:	ldr	r0, [pc, #16]	; (89ec <SdioCard::status()+0x18>)
    89da:	ldr	r1, [r3, #0]
    89dc:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    89e0:	cbz	r0, 89e6 <SdioCard::status()+0x12>
    89e2:	ldr	r3, [pc, #12]	; (89f0 <SdioCard::status()+0x1c>)
    89e4:	ldr	r0, [r3, #16]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    89e6:	pop	{r3, pc}
    89e8:	.word	0x20017570
    89ec:	.word	0x0d1a0000
    89f0:	.word	0x402c0000

000089f4 <readReg16(unsigned long, void*)>:
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    89f4:	ldr	r3, [pc, #80]	; (8a48 <readReg16(unsigned long, void*)+0x54>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    89f6:	push	{r4, r5, r6, lr}
    89f8:	mov	r6, r1
    89fa:	sub	sp, #16
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    89fc:	ldr	r1, [r3, #0]
    89fe:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    8a02:	cbz	r0, 8a42 <readReg16(unsigned long, void*)+0x4e>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8a04:	ldr	r1, [pc, #68]	; (8a4c <readReg16(unsigned long, void*)+0x58>)
    8a06:	add.w	r5, r6, #15
  for (int i = 0; i < 15; i++) {
    8a0a:	movs	r3, #0
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8a0c:	ldr	r2, [r1, #16]
    8a0e:	str	r2, [sp, #0]
    8a10:	ldr	r4, [r1, #20]
    8a12:	str	r4, [sp, #4]
    8a14:	ldr	r4, [r1, #24]
    8a16:	str	r4, [sp, #8]
    8a18:	ldr	r1, [r1, #28]
    8a1a:	str	r1, [sp, #12]
    8a1c:	b.n	8a22 <readReg16(unsigned long, void*)+0x2e>
    8a1e:	ldr.w	r2, [r4, #-16]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8a22:	and.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8a26:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8a28:	lsls	r1, r1, #3
    8a2a:	bic.w	r4, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8a2e:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8a30:	lsr.w	r2, r2, r1
    8a34:	add	r1, sp, #16
    8a36:	strb.w	r2, [r5, #-1]!
    8a3a:	add	r4, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8a3c:	bne.n	8a1e <readReg16(unsigned long, void*)+0x2a>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    8a3e:	movs	r3, #0
    8a40:	strb	r3, [r6, #15]
  return true;
}
    8a42:	add	sp, #16
    8a44:	pop	{r4, r5, r6, pc}
    8a46:	nop
    8a48:	.word	0x20017570
    8a4c:	.word	0x402c0000

00008a50 <waitDmaStatus() [clone .part.5]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8a50:	ldr	r3, [pc, #20]	; (8a68 <waitDmaStatus() [clone .part.5]+0x18>)
    8a52:	ldr	r0, [r3, #0]
    8a54:	ands.w	r0, r0, #2
    8a58:	beq.n	8a66 <waitDmaStatus() [clone .part.5]+0x16>
    8a5a:	ldr	r3, [r3, #0]
    8a5c:	ldr	r0, [pc, #12]	; (8a6c <waitDmaStatus() [clone .part.5]+0x1c>)
    8a5e:	ands	r0, r3
    8a60:	clz	r0, r0
    8a64:	lsrs	r0, r0, #5
}
    8a66:	bx	lr
    8a68:	.word	0x20017a18
    8a6c:	.word	0x117f0000

00008a70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    8a70:	push	{r3, r4, r5, r6, r7, lr}
    8a72:	ands.w	r4, r2, #3
    8a76:	it	ne
    8a78:	movne	r4, #1
    8a7a:	cmp	r3, #0
    8a7c:	it	eq
    8a7e:	orreq.w	r4, r4, #1
  if ((3 & (uint32_t)buf) || n == 0) {
    8a82:	cbz	r4, 8a96 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x26>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a84:	ldr	r1, [pc, #120]	; (8b00 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    8a86:	movs	r0, #37	; 0x25
  m_errorLine = line;
    8a88:	ldr	r3, [pc, #120]	; (8b04 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    8a8a:	movw	r2, #501	; 0x1f5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a8e:	strb	r0, [r1, #0]
  m_errorLine = line;
    8a90:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    8a92:	movs	r0, #0
    8a94:	pop	{r3, r4, r5, r6, r7, pc}
    8a96:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    8a98:	ldr	r0, [pc, #108]	; (8b08 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    8a9a:	mov	r5, r3
    8a9c:	mov	r7, r1
    8a9e:	mov	r4, r2
    8aa0:	bl	8880 <yieldTimeout(bool (*)())>
    8aa4:	cbnz	r0, 8aec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8aa6:	lsls	r3, r5, #16
    8aa8:	ldr	r2, [pc, #96]	; (8b0c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8aaa:	ldr	r5, [pc, #100]	; (8b10 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    8aac:	mov.w	lr, #1
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8ab0:	ands	r2, r3
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8ab2:	ldr	r1, [pc, #96]	; (8b14 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8ab4:	strb.w	lr, [r5]
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    8ab8:	ldr	r3, [pc, #92]	; (8b18 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8aba:	orr.w	r2, r2, #512	; 0x200
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8abe:	str	r0, [r1, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8ac0:	ldr	r5, [pc, #88]	; (8b1c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8ac2:	ldr	r1, [pc, #92]	; (8b20 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    8ac4:	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8ac6:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8ac8:	str	r5, [r3, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8aca:	ldrb	r3, [r1, #0]
    8acc:	cbnz	r3, 8afc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>
    8ace:	lsls	r1, r7, #9
    8ad0:	mov	r0, r6
    8ad2:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    8ad6:	cmp	r0, #0
    8ad8:	beq.n	8a92 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    8ada:	ldr	r0, [pc, #72]	; (8b24 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb4>)
    8adc:	bl	8880 <yieldTimeout(bool (*)())>
    8ae0:	cmp	r0, #0
    8ae2:	bne.n	8a92 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    8ae4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8ae8:	b.w	8a50 <waitDmaStatus() [clone .part.5]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8aec:	ldr	r1, [pc, #16]	; (8b00 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    8aee:	movs	r0, #10
  m_errorLine = line;
    8af0:	ldr	r3, [pc, #16]	; (8b04 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    8af2:	mov.w	r2, #504	; 0x1f8
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8af6:	strb	r0, [r1, #0]
  m_errorLine = line;
    8af8:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8afa:	b.n	8a92 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8afc:	mov	r1, r7
    8afe:	b.n	8ad0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x60>
    8b00:	.word	0x20002586
    8b04:	.word	0x20017340
    8b08:	.word	0x000089a9
    8b0c:	.word	0x1fff0000
    8b10:	.word	0x20018bc6
    8b14:	.word	0x20017a18
    8b18:	.word	0x402c0000
    8b1c:	.word	0x117f0002
    8b20:	.word	0x20018bc4
    8b24:	.word	0x000086d9

00008b28 <SdioCard::sectorCount()>:
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    8b28:	ldr	r1, [pc, #100]	; (8b90 <SdioCard::sectorCount()+0x68>)
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    8b2a:	push	{r4, r5, r6}
    8b2c:	ldrb	r3, [r1, #0]
    8b2e:	ands.w	r3, r3, #192	; 0xc0
    8b32:	beq.n	8b58 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    8b34:	cmp	r3, #64	; 0x40
    8b36:	beq.n	8b3e <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    8b38:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    8b3a:	pop	{r4, r5, r6}
    8b3c:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8b3e:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8b40:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8b42:	adds	r2, r3, #1
    8b44:	ldrb	r0, [r1, #8]
    8b46:	and.w	r3, r4, #63	; 0x3f
    8b4a:	add.w	r3, r2, r3, lsl #16
    8b4e:	add.w	r0, r3, r0, lsl #8
    8b52:	pop	{r4, r5, r6}
    8b54:	lsls	r0, r0, #10
    8b56:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8b58:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8b5a:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8b5c:	ldrb	r2, [r1, #7]
    8b5e:	and.w	r5, r5, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    8b62:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8b64:	and.w	r3, r3, #3
    8b68:	lsls	r5, r5, #1
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    8b6a:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8b6c:	lsls	r2, r2, #2
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8b6e:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8b70:	orr.w	r0, r5, r0, lsr #7
    8b74:	and.w	r1, r4, #15
    8b78:	orr.w	r3, r2, r3, lsl #10
    8b7c:	add	r0, r1
    8b7e:	orr.w	r3, r3, r6, lsr #6
    8b82:	subs	r0, #7
    8b84:	adds	r3, #1
    8b86:	pop	{r4, r5, r6}
    8b88:	lsl.w	r0, r3, r0
    8b8c:	bx	lr
    8b8e:	nop
    8b90:	.word	0x2001755c

00008b94 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  if (m_sdioConfig.useDma()) {
    8b94:	ldrb	r3, [r0, #8]
    8b96:	lsls	r3, r3, #31
    8b98:	bpl.n	8ba2 <SdioCard::isBusy()+0xe>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8b9a:	ldr	r3, [pc, #56]	; (8bd4 <SdioCard::isBusy()+0x40>)
    8b9c:	ldr	r3, [r3, #0]
    8b9e:	cbz	r3, 8bc6 <SdioCard::isBusy()+0x32>
    8ba0:	bx	r3
  } else {
    if (m_transferActive) {
    8ba2:	ldr	r3, [pc, #52]	; (8bd8 <SdioCard::isBusy()+0x44>)
    8ba4:	ldrb	r3, [r3, #0]
    8ba6:	cbnz	r3, 8bb6 <SdioCard::isBusy()+0x22>
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
      return false;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    }
    // Use DAT0 low as busy.
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8ba8:	ldr	r3, [pc, #48]	; (8bdc <SdioCard::isBusy()+0x48>)
    8baa:	ldr	r0, [r3, #36]	; 0x24
    8bac:	eor.w	r0, r0, #16777216	; 0x1000000
    8bb0:	ubfx	r0, r0, #24, #1
  }
}
    8bb4:	bx	lr
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8bb6:	ldr	r3, [pc, #36]	; (8bdc <SdioCard::isBusy()+0x48>)
bool SdioCard::isBusy() {
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    8bb8:	ldr	r0, [pc, #36]	; (8be0 <SdioCard::isBusy()+0x4c>)
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8bba:	ldr	r3, [r3, #48]	; 0x30
bool SdioCard::isBusy() {
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    8bbc:	ands	r0, r3
    8bbe:	clz	r0, r0
    8bc2:	lsrs	r0, r0, #5
    8bc4:	bx	lr
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8bc6:	ldr	r3, [pc, #28]	; (8be4 <SdioCard::isBusy()+0x50>)
    8bc8:	ldrb	r0, [r3, #0]
    8bca:	cmp	r0, #0
    8bcc:	beq.n	8bb4 <SdioCard::isBusy()+0x20>
    8bce:	b.w	89a8 <isBusyCMD13()>
    8bd2:	nop
    8bd4:	.word	0x20017a14
    8bd8:	.word	0x20018bc5
    8bdc:	.word	0x402c0000
    8be0:	.word	0x117f0002
    8be4:	.word	0x20018bc2

00008be8 <SdioCard::erase(unsigned long, unsigned long)>:
  if (m_curState != IDLE_STATE && !syncDevice()) {
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    8be8:	ldr	r0, [pc, #176]	; (8c9c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8bea:	push	{r3, r4, r5, lr}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    8bec:	ldrb	r3, [r0, #10]
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8bee:	mov	r5, r2
  if (m_curState != IDLE_STATE && !syncDevice()) {
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    8bf0:	and.w	r2, r3, #64	; 0x40
    8bf4:	cbnz	r2, 8c0e <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8bf6:	and.w	r3, r3, #63	; 0x3f
    8bfa:	and.w	r4, r2, #255	; 0xff
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    8bfe:	ldrb	r2, [r0, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8c00:	adds	r0, r5, #1
    8c02:	lsls	r3, r3, #1
    8c04:	orrs	r0, r1
    8c06:	orr.w	r3, r3, r2, lsr #7
    8c0a:	tst	r3, r0
    8c0c:	bne.n	8c52 <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    8c0e:	ldr	r3, [pc, #144]	; (8ca0 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    8c10:	ldrb	r3, [r3, #0]
    8c12:	cbnz	r3, 8c18 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    8c14:	lsls	r1, r1, #9
    lastSector <<= 9;
    8c16:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    8c18:	ldr	r0, [pc, #136]	; (8ca4 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    8c1a:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    8c1e:	mov	r4, r0
    8c20:	cbnz	r0, 8c34 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c22:	ldr	r1, [pc, #132]	; (8ca8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    8c24:	movs	r0, #15
  m_errorLine = line;
    8c26:	ldr	r3, [pc, #132]	; (8cac <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    8c28:	movw	r2, #747	; 0x2eb
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c2c:	strb	r0, [r1, #0]
  m_errorLine = line;
    8c2e:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8c30:	mov	r0, r4
    8c32:	pop	{r3, r4, r5, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    8c34:	mov	r1, r5
    8c36:	ldr	r0, [pc, #120]	; (8cb0 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    8c38:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    8c3c:	mov	r4, r0
    8c3e:	cbnz	r0, 8c64 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c40:	ldr	r1, [pc, #100]	; (8ca8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    8c42:	movs	r0, #16
  m_errorLine = line;
    8c44:	ldr	r3, [pc, #100]	; (8cac <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    8c46:	movw	r2, #750	; 0x2ee
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c4a:	strb	r0, [r1, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8c4c:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8c4e:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8c50:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c52:	ldr	r1, [pc, #84]	; (8ca8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    8c54:	movs	r0, #39	; 0x27
  m_errorLine = line;
    8c56:	ldr	r3, [pc, #84]	; (8cac <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    8c58:	movw	r2, #739	; 0x2e3
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c5c:	strb	r0, [r1, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8c5e:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8c60:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8c62:	pop	{r3, r4, r5, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    8c64:	movs	r1, #0
    8c66:	ldr	r0, [pc, #76]	; (8cb4 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    8c68:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    8c6c:	mov	r4, r0
    8c6e:	cbnz	r0, 8c80 <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c70:	ldr	r1, [pc, #52]	; (8ca8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    8c72:	movs	r0, #17
  m_errorLine = line;
    8c74:	ldr	r3, [pc, #52]	; (8cac <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    8c76:	movw	r2, #753	; 0x2f1
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c7a:	strb	r0, [r1, #0]
  m_errorLine = line;
    8c7c:	str	r2, [r3, #0]
    8c7e:	b.n	8c30 <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    8c80:	ldr	r0, [pc, #52]	; (8cb8 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    8c82:	bl	8858 <waitTimeout(bool (*)())>
    8c86:	cmp	r0, #0
    8c88:	beq.n	8c30 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c8a:	ldr	r1, [pc, #28]	; (8ca8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    8c8c:	movs	r0, #40	; 0x28
  m_errorLine = line;
    8c8e:	ldr	r3, [pc, #28]	; (8cac <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    8c90:	mov.w	r2, #756	; 0x2f4
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    8c94:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c96:	strb	r0, [r1, #0]
  m_errorLine = line;
    8c98:	str	r2, [r3, #0]
    8c9a:	b.n	8c30 <SdioCard::erase(unsigned long, unsigned long)+0x48>
    8c9c:	.word	0x2001755c
    8ca0:	.word	0x20018bc4
    8ca4:	.word	0x201a0000
    8ca8:	.word	0x20002586
    8cac:	.word	0x20017340
    8cb0:	.word	0x211a0000
    8cb4:	.word	0x261b0000
    8cb8:	.word	0x000089a9

00008cbc <waitTransferComplete() [clone .part.10]>:
    }
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
    8cbc:	push	{r4, lr}
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
    8cbe:	ldr	r0, [pc, #56]	; (8cf8 <waitTransferComplete() [clone .part.10]+0x3c>)
  m_transferActive = false;
    8cc0:	movs	r4, #0
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
    8cc2:	bl	8858 <waitTimeout(bool (*)())>
  m_transferActive = false;
    8cc6:	ldr	r1, [pc, #52]	; (8cfc <waitTransferComplete() [clone .part.10]+0x40>)
  m_irqstat = SDHC_IRQSTAT;
    8cc8:	ldr	r2, [pc, #52]	; (8d00 <waitTransferComplete() [clone .part.10]+0x44>)
    8cca:	ldr	r3, [pc, #56]	; (8d04 <waitTransferComplete() [clone .part.10]+0x48>)
static bool waitTransferComplete() {
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
    8ccc:	strb	r4, [r1, #0]
  m_irqstat = SDHC_IRQSTAT;
    8cce:	ldr	r1, [r2, #48]	; 0x30
    8cd0:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8cd2:	ldr	r1, [r3, #0]
    8cd4:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8cd6:	cbnz	r0, 8ce0 <waitTransferComplete() [clone .part.10]+0x24>
    8cd8:	ldr	r2, [r3, #0]
    8cda:	ldr	r3, [pc, #44]	; (8d08 <waitTransferComplete() [clone .part.10]+0x4c>)
    8cdc:	ands	r3, r2
    8cde:	cbz	r3, 8cf2 <waitTransferComplete() [clone .part.10]+0x36>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ce0:	ldr	r1, [pc, #40]	; (8d0c <waitTransferComplete() [clone .part.10]+0x50>)
    8ce2:	movs	r4, #31
  m_errorLine = line;
    8ce4:	ldr	r3, [pc, #40]	; (8d10 <waitTransferComplete() [clone .part.10]+0x54>)
    8ce6:	movw	r2, #634	; 0x27a
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    8cea:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8cec:	strb	r4, [r1, #0]
  m_errorLine = line;
    8cee:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
  }
  return true;
}
    8cf0:	pop	{r4, pc}
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
  }
  return true;
    8cf2:	movs	r0, #1
    8cf4:	pop	{r4, pc}
    8cf6:	nop
    8cf8:	.word	0x0000870d
    8cfc:	.word	0x20018bc5
    8d00:	.word	0x402c0000
    8d04:	.word	0x20017a18
    8d08:	.word	0x117f0000
    8d0c:	.word	0x20002586
    8d10:	.word	0x20017340

00008d14 <SdioCard::readStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
    8d14:	push	{r3, r4, r5, lr}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8d16:	ldr	r4, [pc, #96]	; (8d78 <SdioCard::readStop()+0x64>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8d18:	movs	r1, #0
    8d1a:	ldr	r0, [pc, #96]	; (8d7c <SdioCard::readStop()+0x68>)
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8d1c:	ldr	r3, [r4, #40]	; 0x28
    8d1e:	bic.w	r3, r3, #65536	; 0x10000
    8d22:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8d24:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    8d28:	mov	r5, r0
    8d2a:	cbnz	r0, 8d3e <SdioCard::readStop()+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d2c:	ldr	r1, [pc, #80]	; (8d80 <SdioCard::readStop()+0x6c>)
    8d2e:	movs	r0, #9
  m_errorLine = line;
    8d30:	ldr	r3, [pc, #80]	; (8d84 <SdioCard::readStop()+0x70>)
    8d32:	movw	r2, #573	; 0x23d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d36:	strb	r0, [r1, #0]
  m_errorLine = line;
    8d38:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    8d3a:	mov	r0, r5
    8d3c:	pop	{r3, r4, r5, pc}
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyDat)) {
    8d3e:	ldr	r0, [pc, #72]	; (8d88 <SdioCard::readStop()+0x74>)
    8d40:	bl	8880 <yieldTimeout(bool (*)())>
    8d44:	cbnz	r0, 8d64 <SdioCard::readStop()+0x50>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    8d46:	ldr	r3, [r4, #36]	; 0x24
    8d48:	lsls	r3, r3, #30
    8d4a:	bpl.n	8d3a <SdioCard::readStop()+0x26>
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    8d4c:	ldr	r1, [r4, #52]	; 0x34
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    8d4e:	mov	r0, r5
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8d50:	ldr	r3, [r4, #40]	; 0x28
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8d52:	ldr	r2, [r4, #44]	; 0x2c
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8d54:	bic.w	r3, r3, #65536	; 0x10000
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8d58:	orr.w	r2, r2, #67108864	; 0x4000000
    8d5c:	str	r2, [r4, #44]	; 0x2c
    // Restore registers.
    SDHC_IRQSTATEN = irqsststen;
    8d5e:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    8d60:	str	r3, [r4, #40]	; 0x28
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    8d62:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d64:	ldr	r1, [pc, #24]	; (8d80 <SdioCard::readStop()+0x6c>)
    8d66:	movs	r0, #10
  m_errorLine = line;
    8d68:	ldr	r3, [pc, #24]	; (8d84 <SdioCard::readStop()+0x70>)
    8d6a:	mov.w	r2, #576	; 0x240
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyDat)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8d6e:	movs	r5, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d70:	strb	r0, [r1, #0]
  m_errorLine = line;
    8d72:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    8d74:	mov	r0, r5
    8d76:	pop	{r3, r4, r5, pc}
    8d78:	.word	0x402c0000
    8d7c:	.word	0x0cdb0000
    8d80:	.word	0x20002586
    8d84:	.word	0x20017340
    8d88:	.word	0x000086c5

00008d8c <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8d8c:	push	{r4, r5, r6, lr}
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    8d8e:	ldr	r6, [pc, #120]	; (8e08 <SdioCard::writeData(unsigned char const*)+0x7c>)
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8d90:	mov	r5, r1
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    8d92:	ldrb	r3, [r6, #0]
    8d94:	cmp	r3, #0
    8d96:	bne.n	8dfc <SdioCard::writeData(unsigned char const*)+0x70>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8d98:	ldr	r3, [pc, #112]	; (8e0c <SdioCard::writeData(unsigned char const*)+0x80>)
    8d9a:	ldr	r2, [r3, #36]	; 0x24
    8d9c:	lsls	r1, r2, #23
    8d9e:	bmi.n	8db0 <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8da0:	ldr	r2, [r3, #40]	; 0x28
    8da2:	bic.w	r2, r2, #65536	; 0x10000
    8da6:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8da8:	ldr	r2, [r3, #40]	; 0x28
    8daa:	orr.w	r2, r2, #131072	; 0x20000
    8dae:	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8db0:	ldr	r4, [pc, #88]	; (8e0c <SdioCard::writeData(unsigned char const*)+0x80>)
  if (waitTimeout(isBusyFifoWrite)) {
    8db2:	ldr	r0, [pc, #92]	; (8e10 <SdioCard::writeData(unsigned char const*)+0x84>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8db4:	ldr	r3, [r4, #40]	; 0x28
    8db6:	orr.w	r3, r3, #65536	; 0x10000
    8dba:	str	r3, [r4, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    8dbc:	bl	8858 <waitTimeout(bool (*)())>
    8dc0:	cbnz	r0, 8dea <SdioCard::writeData(unsigned char const*)+0x5e>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    8dc2:	mov	r0, r4
    8dc4:	subs	r3, r5, #4
    8dc6:	add.w	r4, r5, #508	; 0x1fc
    8dca:	ldr	r2, [r0, #36]	; 0x24
    8dcc:	lsls	r2, r2, #21
    8dce:	bpl.n	8dca <SdioCard::writeData(unsigned char const*)+0x3e>
    8dd0:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    8dd4:	ldr.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8dd8:	cmp	r1, r3
      SDHC_DATPORT = p32[i];
    8dda:	str	r2, [r0, #32]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8ddc:	bne.n	8dd4 <SdioCard::writeData(unsigned char const*)+0x48>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8dde:	cmp	r4, r1
    8de0:	mov	r3, r1
    8de2:	bne.n	8dca <SdioCard::writeData(unsigned char const*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    8de4:	movs	r0, #1
    8de6:	strb	r0, [r6, #0]
    8de8:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8dea:	ldr	r1, [pc, #40]	; (8e14 <SdioCard::writeData(unsigned char const*)+0x88>)
    8dec:	movs	r4, #33	; 0x21
  m_errorLine = line;
    8dee:	ldr	r3, [pc, #40]	; (8e18 <SdioCard::writeData(unsigned char const*)+0x8c>)
    8df0:	movw	r2, #985	; 0x3d9
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    8df4:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8df6:	strb	r4, [r1, #0]
  m_errorLine = line;
    8df8:	str	r2, [r3, #0]
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
  return true;
}
    8dfa:	pop	{r4, r5, r6, pc}
    8dfc:	bl	8cbc <waitTransferComplete() [clone .part.10]>
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    8e00:	cmp	r0, #0
    8e02:	bne.n	8d98 <SdioCard::writeData(unsigned char const*)+0xc>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
  return true;
}
    8e04:	pop	{r4, r5, r6, pc}
    8e06:	nop
    8e08:	.word	0x20018bc5
    8e0c:	.word	0x402c0000
    8e10:	.word	0x000086f9
    8e14:	.word	0x20002586
    8e18:	.word	0x20017340

00008e1c <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    8e1c:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    8e1e:	ldr	r0, [pc, #80]	; (8e70 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    8e20:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    8e22:	bl	8880 <yieldTimeout(bool (*)())>
    8e26:	cbnz	r0, 8e5c <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8e28:	ldr	r3, [pc, #72]	; (8e74 <SdioCard::writeStart(unsigned long)+0x58>)

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    8e2a:	mov.w	r0, #512	; 0x200
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8e2e:	ldr	r1, [pc, #72]	; (8e78 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8e30:	ldr	r2, [r3, #40]	; 0x28
    8e32:	bic.w	r2, r2, #65536	; 0x10000
    8e36:	str	r2, [r3, #40]	; 0x28

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    8e38:	str	r0, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8e3a:	ldrb	r3, [r1, #0]
    8e3c:	cbnz	r3, 8e58 <SdioCard::writeStart(unsigned long)+0x3c>
    8e3e:	lsls	r1, r4, #9
    8e40:	ldr	r0, [pc, #56]	; (8e7c <SdioCard::writeStart(unsigned long)+0x60>)
    8e42:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    8e46:	cbnz	r0, 8e56 <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e48:	ldr	r1, [pc, #52]	; (8e80 <SdioCard::writeStart(unsigned long)+0x64>)
    8e4a:	movs	r4, #14
  m_errorLine = line;
    8e4c:	ldr	r3, [pc, #52]	; (8e84 <SdioCard::writeStart(unsigned long)+0x68>)
    8e4e:	mov.w	r2, #1080	; 0x438
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e52:	strb	r4, [r1, #0]
  m_errorLine = line;
    8e54:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    8e56:	pop	{r4, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8e58:	mov	r1, r4
    8e5a:	b.n	8e40 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e5c:	ldr	r1, [pc, #32]	; (8e80 <SdioCard::writeStart(unsigned long)+0x64>)
    8e5e:	movs	r0, #10
  m_errorLine = line;
    8e60:	ldr	r3, [pc, #32]	; (8e84 <SdioCard::writeStart(unsigned long)+0x68>)
    8e62:	movw	r2, #1068	; 0x42c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e66:	strb	r0, [r1, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8e68:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8e6a:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8e6c:	pop	{r4, pc}
    8e6e:	nop
    8e70:	.word	0x000089a9
    8e74:	.word	0x402c0000
    8e78:	.word	0x20018bc4
    8e7c:	.word	0x193a0020
    8e80:	.word	0x20002586
    8e84:	.word	0x20017340

00008e88 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    8e88:	push	{r3, r4, r5, r6, r7, lr}
    8e8a:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    8e8c:	ldrb	r0, [r0, #8]
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    8e8e:	mov	r4, r1
    8e90:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    8e92:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    8e94:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    8e96:	bmi.n	8ec0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    8e98:	cbz	r3, 8ebc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    8e9a:	add	r7, r1
    8e9c:	b.n	8ea2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    8e9e:	cmp	r4, r7
    8ea0:	beq.n	8ebc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    8ea2:	ldr	r3, [r6, #0]
    8ea4:	mov	r2, r5
    8ea6:	mov	r1, r4
    8ea8:	mov	r0, r6
    8eaa:	ldr	r3, [r3, #36]	; 0x24
    8eac:	add.w	r5, r5, #512	; 0x200
    8eb0:	adds	r4, #1
    8eb2:	blx	r3
    8eb4:	cmp	r0, #0
    8eb6:	bne.n	8e9e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    8eb8:	movs	r0, #0
    8eba:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    8ebc:	movs	r0, #1
    8ebe:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    8ec0:	lsls	r0, r2, #30
    8ec2:	beq.n	8eea <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    8ec4:	cmp	r3, #0
    8ec6:	beq.n	8ebc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    8ec8:	add	r7, r1
    8eca:	b.n	8ed0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    8ecc:	cmp	r7, r4
    8ece:	beq.n	8ebc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    8ed0:	ldr	r3, [r6, #0]
    8ed2:	mov	r2, r5
    8ed4:	mov	r1, r4
    8ed6:	mov	r0, r6
    8ed8:	ldr	r3, [r3, #36]	; 0x24
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    8eda:	add.w	r5, r5, #512	; 0x200
    8ede:	adds	r4, #1
        if (!writeSector(sector, ptr)) {
    8ee0:	blx	r3
    8ee2:	cmp	r0, #0
    8ee4:	bne.n	8ecc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    8ee6:	movs	r0, #0
    8ee8:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    8eea:	ldr	r0, [pc, #24]	; (8f04 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    8eec:	bl	8a70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8ef0:	cmp	r0, #0
    8ef2:	bne.n	8ebc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ef4:	ldr	r1, [pc, #16]	; (8f08 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    8ef6:	movs	r4, #14
  m_errorLine = line;
    8ef8:	ldr	r3, [pc, #16]	; (8f0c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    8efa:	movw	r2, #1054	; 0x41e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8efe:	strb	r4, [r1, #0]
  m_errorLine = line;
    8f00:	str	r2, [r3, #0]
    8f02:	pop	{r3, r4, r5, r6, r7, pc}
    8f04:	.word	0x193a0027
    8f08:	.word	0x20002586
    8f0c:	.word	0x20017340

00008f10 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  }
  m_transferActive = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8f10:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    8f12:	ldrb	r3, [r0, #8]
  }
  m_transferActive = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8f14:	mov	r5, r2
    8f16:	sub.w	sp, sp, #512	; 0x200
    8f1a:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    8f1c:	lsls	r2, r3, #31
    8f1e:	bpl.n	8f54 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    8f20:	lsls	r3, r5, #30
    8f22:	beq.n	8f32 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    8f24:	mov	r1, r5
    8f26:	mov.w	r2, #512	; 0x200
    8f2a:	mov	r0, sp
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    8f2c:	mov	r5, sp
      memcpy(aligned, src, 512);
    8f2e:	bl	9920 <memcpy>
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    8f32:	mov	r2, r5
    8f34:	mov	r1, r6
    8f36:	movs	r3, #1
    8f38:	ldr	r0, [pc, #132]	; (8fc0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
    8f3a:	bl	8a70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8f3e:	cbnz	r0, 8f4e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f40:	ldr	r1, [pc, #128]	; (8fc4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb4>)
    8f42:	movs	r4, #13
  m_errorLine = line;
    8f44:	ldr	r3, [pc, #128]	; (8fc8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb8>)
    8f46:	movw	r2, #1010	; 0x3f2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f4a:	strb	r4, [r1, #0]
  m_errorLine = line;
    8f4c:	str	r2, [r3, #0]
      return false;
    }
    m_curSector++;
  }
  return true;
}
    8f4e:	add.w	sp, sp, #512	; 0x200
    8f52:	pop	{r4, r5, r6, pc}
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    8f54:	ldr	r3, [pc, #116]	; (8fcc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xbc>)
    8f56:	mov	r4, r0
    8f58:	ldrb	r3, [r3, #0]
    8f5a:	cbnz	r3, 8f88 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x78>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    8f5c:	ldrb	r3, [r4, #9]
    8f5e:	cmp	r3, #2
    8f60:	beq.n	8f74 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
      if (!syncDevice()) {
    8f62:	ldr	r3, [r4, #0]
    8f64:	mov	r0, r4
    8f66:	ldr	r3, [r3, #32]
    8f68:	blx	r3
    8f6a:	cbnz	r0, 8f94 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (!waitTransferComplete()) {
      return false;
    8f6c:	movs	r0, #0
      return false;
    }
    m_curSector++;
  }
  return true;
}
    8f6e:	add.w	sp, sp, #512	; 0x200
    8f72:	pop	{r4, r5, r6, pc}
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    8f74:	ldr	r3, [r4, #4]
    8f76:	cmp	r6, r3
    8f78:	beq.n	8fa8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>
      if (!syncDevice()) {
    8f7a:	ldr	r3, [r4, #0]
    8f7c:	mov	r0, r4
    8f7e:	ldr	r3, [r3, #32]
    8f80:	blx	r3
    8f82:	cmp	r0, #0
    8f84:	beq.n	8f6c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
    8f86:	b.n	8f94 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    8f88:	bl	8cbc <waitTransferComplete() [clone .part.10]>
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (!waitTransferComplete()) {
    8f8c:	cmp	r0, #0
    8f8e:	bne.n	8f5c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
      return false;
    8f90:	movs	r0, #0
    8f92:	b.n	8f6e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    8f94:	ldr	r3, [r4, #0]
    8f96:	mov	r1, r6
    8f98:	mov	r0, r4
    8f9a:	ldr	r3, [r3, #96]	; 0x60
    8f9c:	blx	r3
    8f9e:	cmp	r0, #0
    8fa0:	beq.n	8f6c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    8fa2:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    8fa4:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    8fa6:	strb	r3, [r4, #9]
    }
    if (!writeData(src)) {
    8fa8:	ldr	r3, [r4, #0]
    8faa:	mov	r1, r5
    8fac:	mov	r0, r4
    8fae:	ldr	r3, [r3, #92]	; 0x5c
    8fb0:	blx	r3
    8fb2:	cmp	r0, #0
    8fb4:	beq.n	8f6c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
      return false;
    }
    m_curSector++;
    8fb6:	ldr	r3, [r4, #4]
    8fb8:	adds	r3, #1
    8fba:	str	r3, [r4, #4]
    8fbc:	b.n	8f4e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    8fbe:	nop
    8fc0:	.word	0x183a0001
    8fc4:	.word	0x20002586
    8fc8:	.word	0x20017340
    8fcc:	.word	0x20018bc5

00008fd0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8fd0:	push	{r3, r4, r5, r6, r7, lr}
    8fd2:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    8fd4:	ldrb	r0, [r0, #8]
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8fd6:	mov	r4, r1
    8fd8:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    8fda:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8fdc:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    8fde:	bmi.n	9008 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    8fe0:	cbz	r3, 9004 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    8fe2:	add	r7, r1
    8fe4:	b.n	8fea <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    8fe6:	cmp	r4, r7
    8fe8:	beq.n	9004 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    8fea:	ldr	r3, [r6, #0]
    8fec:	mov	r2, r5
    8fee:	mov	r1, r4
    8ff0:	mov	r0, r6
    8ff2:	ldr	r3, [r3, #16]
    8ff4:	add.w	r5, r5, #512	; 0x200
    8ff8:	adds	r4, #1
    8ffa:	blx	r3
    8ffc:	cmp	r0, #0
    8ffe:	bne.n	8fe6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    9000:	movs	r0, #0
    9002:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    9004:	movs	r0, #1
    9006:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    9008:	lsls	r0, r2, #30
    900a:	beq.n	9032 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    900c:	cmp	r3, #0
    900e:	beq.n	9004 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    9010:	add	r7, r1
    9012:	b.n	9018 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    9014:	cmp	r7, r4
    9016:	beq.n	9004 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    9018:	ldr	r3, [r6, #0]
    901a:	mov	r2, r5
    901c:	mov	r1, r4
    901e:	mov	r0, r6
    9020:	ldr	r3, [r3, #16]
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9022:	add.w	r5, r5, #512	; 0x200
    9026:	adds	r4, #1
        if (!readSector(sector, dst)) {
    9028:	blx	r3
    902a:	cmp	r0, #0
    902c:	bne.n	9014 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    902e:	movs	r0, #0
    9030:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    9032:	ldr	r0, [pc, #24]	; (904c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    9034:	bl	8a70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9038:	cmp	r0, #0
    903a:	bne.n	9004 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    903c:	ldr	r1, [pc, #16]	; (9050 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    903e:	movs	r4, #12
  m_errorLine = line;
    9040:	ldr	r3, [pc, #16]	; (9054 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    9042:	movw	r2, #898	; 0x382
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9046:	strb	r4, [r1, #0]
  m_errorLine = line;
    9048:	str	r2, [r3, #0]
    904a:	pop	{r3, r4, r5, r6, r7, pc}
    904c:	.word	0x123a0037
    9050:	.word	0x20002586
    9054:	.word	0x20017340

00009058 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    9058:	push	{r3, r4, r5, r6, r7, lr}
    905a:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    905c:	ldr	r0, [pc, #108]	; (90cc <cardCMD6(unsigned long, unsigned char*)+0x74>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    905e:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    9060:	bl	8858 <waitTimeout(bool (*)())>
    9064:	cbz	r0, 9078 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9066:	ldr	r1, [pc, #104]	; (90d0 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    9068:	movs	r0, #10
  m_errorLine = line;
    906a:	ldr	r3, [pc, #104]	; (90d4 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    906c:	mov.w	r2, #408	; 0x198
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9070:	strb	r0, [r1, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    9072:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9074:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    9076:	pop	{r3, r4, r5, r6, r7, pc}
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    9078:	ldr	r2, [pc, #92]	; (90d8 <cardCMD6(unsigned long, unsigned char*)+0x80>)
    907a:	movs	r7, #1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    907c:	ldr	r3, [pc, #92]	; (90dc <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    907e:	mov	r1, r5
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    9080:	strb	r7, [r2, #0]
  m_irqstat = 0;
    9082:	ldr	r6, [pc, #92]	; (90e0 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9084:	ldr	r5, [pc, #92]	; (90e4 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9086:	ldr	r2, [pc, #96]	; (90e8 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    9088:	str	r0, [r6, #0]
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    908a:	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    908c:	ldr	r0, [pc, #92]	; (90ec <cardCMD6(unsigned long, unsigned char*)+0x94>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    908e:	str	r5, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9090:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9092:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    9096:	cbnz	r0, 90a8 <cardCMD6(unsigned long, unsigned char*)+0x50>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9098:	ldr	r1, [pc, #52]	; (90d0 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    909a:	movs	r4, #4
  m_errorLine = line;
    909c:	ldr	r3, [pc, #52]	; (90d4 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    909e:	movw	r2, #415	; 0x19f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    90a2:	strb	r4, [r1, #0]
  m_errorLine = line;
    90a4:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    90a6:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    90a8:	ldr	r0, [pc, #68]	; (90f0 <cardCMD6(unsigned long, unsigned char*)+0x98>)
    90aa:	bl	8880 <yieldTimeout(bool (*)())>
    90ae:	cbnz	r0, 90b8 <cardCMD6(unsigned long, unsigned char*)+0x60>
    90b0:	bl	8a50 <waitDmaStatus() [clone .part.5]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    90b4:	cbz	r0, 90b8 <cardCMD6(unsigned long, unsigned char*)+0x60>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    90b6:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    90b8:	ldr	r1, [pc, #20]	; (90d0 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    90ba:	movs	r0, #37	; 0x25
  m_errorLine = line;
    90bc:	ldr	r3, [pc, #20]	; (90d4 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    90be:	mov.w	r2, #418	; 0x1a2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    90c2:	strb	r0, [r1, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    90c4:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    90c6:	str	r2, [r3, #0]
    90c8:	pop	{r3, r4, r5, r6, r7, pc}
    90ca:	nop
    90cc:	.word	0x000089a9
    90d0:	.word	0x20002586
    90d4:	.word	0x20017340
    90d8:	.word	0x20018bc6
    90dc:	.word	0x402c0000
    90e0:	.word	0x20017a18
    90e4:	.word	0x00010040
    90e8:	.word	0x117f0002
    90ec:	.word	0x063a0011
    90f0:	.word	0x000086d9

000090f4 <SdioCard::begin(SdioConfig)>:
  return true;
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    90f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    90f8:	ldr	r2, [pc, #732]	; (93d8 <SdioCard::begin(SdioConfig)+0x2e4>)
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    90fa:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    90fc:	ldr	r5, [pc, #732]	; (93dc <SdioCard::begin(SdioConfig)+0x2e8>)
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    90fe:	movs	r4, #5
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    9100:	strb	r1, [r0, #8]
  return true;
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    9102:	sub	sp, #68	; 0x44
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    9104:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    9106:	strb	r3, [r0, #9]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9108:	ldr.w	r0, [r2, #256]	; 0x100
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    910c:	ldr	r7, [pc, #720]	; (93e0 <SdioCard::begin(SdioConfig)+0x2ec>)
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    910e:	orr.w	r0, r0, #128	; 0x80
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    9112:	ldr	r6, [pc, #720]	; (93e4 <SdioCard::begin(SdioConfig)+0x2f0>)
  m_version2 = false;
    9114:	ldr.w	r8, [pc, #820]	; 944c <SdioCard::begin(SdioConfig)+0x358>
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    9118:	strb	r3, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    911a:	strb	r3, [r6, #0]
  m_version2 = false;
    911c:	strb.w	r3, [r8]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9120:	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    9124:	ldr.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
  CCM_ANALOG_PFD_528 &= ~(1 << 7);

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    9128:	ldr	r3, [pc, #700]	; (93e8 <SdioCard::begin(SdioConfig)+0x2f4>)
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    912a:	bic.w	r0, r0, #63	; 0x3f
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    912e:	ldr	r1, [pc, #700]	; (93ec <SdioCard::begin(SdioConfig)+0x2f8>)
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    9130:	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    9134:	ldr.w	r0, [r2, #256]	; 0x100
    9138:	orr.w	r0, r0, #24
    913c:	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    9140:	ldr.w	r0, [r2, #256]	; 0x100
    9144:	bic.w	r0, r0, #128	; 0x80
    9148:	str.w	r0, [r2, #256]	; 0x100

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    914c:	ldr.w	r2, [r3, #128]	; 0x80

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    9150:	ldr	r0, [pc, #668]	; (93f0 <SdioCard::begin(SdioConfig)+0x2fc>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
  CCM_ANALOG_PFD_528 &= ~(1 << 7);

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    9152:	orr.w	r2, r2, #12
    9156:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    915a:	ldr	r2, [r3, #36]	; 0x24
    915c:	bic.w	r2, r2, #14336	; 0x3800
    9160:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    9162:	ldr	r2, [r3, #28]
    9164:	orr.w	r2, r2, #65536	; 0x10000
    9168:	str	r2, [r3, #28]
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    916a:	ldr	r2, [r3, #36]	; 0x24
    916c:	orr.w	r2, r2, #2048	; 0x800
    9170:	str	r2, [r3, #36]	; 0x24
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    9172:	mov	r2, r0
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9174:	str.w	r4, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    9178:	str.w	r4, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    917c:	str.w	r4, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9180:	str.w	r4, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    9184:	str.w	r4, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    9188:	str.w	r4, [r1, #456]	; 0x1c8

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    918c:	ldr	r1, [r0, #72]	; 0x48
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    918e:	ldr	r3, [pc, #612]	; (93f4 <SdioCard::begin(SdioConfig)+0x300>)

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    9190:	orr.w	r1, r1, #2147483648	; 0x80000000
    9194:	str	r1, [r0, #72]	; 0x48
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    9196:	ldr	r1, [r0, #44]	; 0x2c
    9198:	orrs	r3, r1
    919a:	str	r3, [r0, #44]	; 0x2c

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    919c:	ldr	r3, [r2, #44]	; 0x2c
    919e:	ldr	r4, [pc, #592]	; (93f0 <SdioCard::begin(SdioConfig)+0x2fc>)
    91a0:	lsls	r1, r3, #7
    91a2:	bmi.n	919c <SdioCard::begin(SdioConfig)+0xa8>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    91a4:	mov.w	r0, #400	; 0x190
    91a8:	bl	8724 <setSdclk(unsigned long)>
    91ac:	bl	88dc <enableGPIO(bool) [clone .part.0]>

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    91b0:	ldr	r1, [pc, #580]	; (93f8 <SdioCard::begin(SdioConfig)+0x304>)


#ifdef __cplusplus
extern "C" void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    91b2:	ldr	r3, [pc, #584]	; (93fc <SdioCard::begin(SdioConfig)+0x308>)
    91b4:	ldr	r2, [pc, #584]	; (9400 <SdioCard::begin(SdioConfig)+0x30c>)
    91b6:	str	r1, [r4, #52]	; 0x34
    91b8:	str.w	r2, [r3, #504]	; 0x1f8

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    91bc:	ldr	r3, [pc, #580]	; (9404 <SdioCard::begin(SdioConfig)+0x310>)
    91be:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    91c0:	ldr	r2, [pc, #580]	; (9408 <SdioCard::begin(SdioConfig)+0x314>)
    91c2:	mov.w	r1, #16384	; 0x4000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    91c6:	strb	r0, [r3, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    91c8:	mov	r3, r4
  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    91ca:	str	r1, [r2, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    91cc:	ldr	r2, [r4, #44]	; 0x2c
    91ce:	orr.w	r2, r2, #134217728	; 0x8000000
    91d2:	str	r2, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    91d4:	ldr	r1, [r3, #44]	; 0x2c
    91d6:	ands.w	r1, r1, #134217728	; 0x8000000
    91da:	bne.n	91d4 <SdioCard::begin(SdioConfig)+0xe0>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    91dc:	mov	r0, r1
    91de:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    91e2:	mov	r4, r0
    91e4:	cmp	r0, #0
    91e6:	beq.n	9284 <SdioCard::begin(SdioConfig)+0x190>
    91e8:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    91ea:	mov.w	r1, #426	; 0x1aa
    91ee:	ldr	r0, [pc, #540]	; (940c <SdioCard::begin(SdioConfig)+0x318>)
    91f0:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    91f4:	cmp	r0, #0
    91f6:	bne.n	92b2 <SdioCard::begin(SdioConfig)+0x1be>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    91f8:	subs	r4, #1
    91fa:	bne.n	91ea <SdioCard::begin(SdioConfig)+0xf6>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    91fc:	ldrb.w	r3, [r8]
    9200:	ldr	r4, [pc, #524]	; (9410 <SdioCard::begin(SdioConfig)+0x31c>)
    9202:	cmp	r3, #0
    9204:	it	eq
    9206:	moveq.w	r4, #3145728	; 0x300000
  int m = micros();
    920a:	bl	ae60 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    920e:	ldr.w	r8, [pc, #576]	; 9450 <SdioCard::begin(SdioConfig)+0x35c>
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    9212:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9214:	movs	r1, #0
    9216:	ldr	r0, [pc, #508]	; (9414 <SdioCard::begin(SdioConfig)+0x320>)
    9218:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    921c:	cbnz	r0, 9234 <SdioCard::begin(SdioConfig)+0x140>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    921e:	movs	r1, #23
  m_errorLine = line;
    9220:	ldr	r3, [pc, #500]	; (9418 <SdioCard::begin(SdioConfig)+0x324>)
    9222:	movw	r2, #671	; 0x29f
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    9226:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9228:	strb	r1, [r5, #0]
  m_errorLine = line;
    922a:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    922c:	mov	r0, r4
    922e:	add	sp, #68	; 0x44
    9230:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9234:	mov	r1, r4
    9236:	ldr	r0, [pc, #484]	; (941c <SdioCard::begin(SdioConfig)+0x328>)
    9238:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    923c:	cmp	r0, #0
    923e:	beq.n	921e <SdioCard::begin(SdioConfig)+0x12a>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    9240:	bl	ae60 <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9244:	rsb	r0, r9, r0
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    9248:	ldr	r2, [pc, #420]	; (93f0 <SdioCard::begin(SdioConfig)+0x2fc>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    924a:	cmp	r0, r8
    924c:	bhi.n	921e <SdioCard::begin(SdioConfig)+0x12a>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    924e:	ldr	r3, [r2, #16]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    9250:	cmp	r3, #0
    9252:	bge.n	9214 <SdioCard::begin(SdioConfig)+0x120>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    9254:	ldr	r1, [r2, #16]
    9256:	ldr	r3, [pc, #456]	; (9420 <SdioCard::begin(SdioConfig)+0x32c>)
    9258:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    925a:	ldr	r3, [r2, #16]
    925c:	lsls	r2, r3, #1
    925e:	bpl.n	9264 <SdioCard::begin(SdioConfig)+0x170>
    // Is high capacity.
    m_highCapacity = true;
    9260:	movs	r3, #1
    9262:	strb	r3, [r6, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9264:	movs	r1, #0
    9266:	ldr	r0, [pc, #444]	; (9424 <SdioCard::begin(SdioConfig)+0x330>)
    9268:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    926c:	mov	r4, r0
    926e:	cbnz	r0, 9298 <SdioCard::begin(SdioConfig)+0x1a4>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9270:	movs	r1, #2
  m_errorLine = line;
    9272:	ldr	r3, [pc, #420]	; (9418 <SdioCard::begin(SdioConfig)+0x324>)
    9274:	mov.w	r2, #680	; 0x2a8

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    9278:	mov	r0, r4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    927a:	strb	r1, [r5, #0]
  m_errorLine = line;
    927c:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    927e:	add	sp, #68	; 0x44
    9280:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9284:	movs	r1, #1
  m_errorLine = line;
    9286:	ldr	r3, [pc, #400]	; (9418 <SdioCard::begin(SdioConfig)+0x324>)
    9288:	movw	r2, #654	; 0x28e

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    928c:	mov	r0, r4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    928e:	strb	r1, [r5, #0]
  m_errorLine = line;
    9290:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    9292:	add	sp, #68	; 0x44
    9294:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    9298:	movs	r1, #0
    929a:	ldr	r0, [pc, #396]	; (9428 <SdioCard::begin(SdioConfig)+0x334>)
    929c:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    92a0:	mov	r4, r0
    92a2:	cbnz	r0, 92d6 <SdioCard::begin(SdioConfig)+0x1e2>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92a4:	movs	r1, #3
  m_errorLine = line;
    92a6:	ldr	r3, [pc, #368]	; (9418 <SdioCard::begin(SdioConfig)+0x324>)
    92a8:	movw	r2, #683	; 0x2ab
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92ac:	strb	r1, [r5, #0]
  m_errorLine = line;
    92ae:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    92b0:	b.n	922c <SdioCard::begin(SdioConfig)+0x138>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    92b2:	ldr	r3, [pc, #316]	; (93f0 <SdioCard::begin(SdioConfig)+0x2fc>)
    92b4:	ldr	r3, [r3, #16]
    92b6:	cmp.w	r3, #426	; 0x1aa
    92ba:	beq.n	92cc <SdioCard::begin(SdioConfig)+0x1d8>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92bc:	movs	r1, #6
  m_errorLine = line;
    92be:	ldr	r3, [pc, #344]	; (9418 <SdioCard::begin(SdioConfig)+0x324>)
    92c0:	mov.w	r2, #660	; 0x294
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    92c4:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92c6:	strb	r1, [r5, #0]
  m_errorLine = line;
    92c8:	str	r2, [r3, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    92ca:	b.n	922c <SdioCard::begin(SdioConfig)+0x138>
      }
      m_version2 = true;
    92cc:	movs	r3, #1
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    92ce:	ldr	r4, [pc, #320]	; (9410 <SdioCard::begin(SdioConfig)+0x31c>)
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
      }
      m_version2 = true;
    92d0:	strb.w	r3, [r8]
    92d4:	b.n	920a <SdioCard::begin(SdioConfig)+0x116>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    92d6:	ldr	r6, [pc, #280]	; (93f0 <SdioCard::begin(SdioConfig)+0x2fc>)
    92d8:	ldr	r3, [pc, #336]	; (942c <SdioCard::begin(SdioConfig)+0x338>)
    92da:	ldr	r2, [r6, #16]
    92dc:	ldr.w	r8, [pc, #372]	; 9454 <SdioCard::begin(SdioConfig)+0x360>
    92e0:	ands	r3, r2

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    92e2:	ldr	r1, [pc, #332]	; (9430 <SdioCard::begin(SdioConfig)+0x33c>)
    92e4:	ldr	r0, [pc, #332]	; (9434 <SdioCard::begin(SdioConfig)+0x340>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    92e6:	str.w	r3, [r8]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    92ea:	bl	89f4 <readReg16(unsigned long, void*)>
    92ee:	mov	r4, r0
    92f0:	cbnz	r0, 9300 <SdioCard::begin(SdioConfig)+0x20c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92f2:	movs	r1, #7
  m_errorLine = line;
    92f4:	ldr	r3, [pc, #288]	; (9418 <SdioCard::begin(SdioConfig)+0x324>)
    92f6:	mov.w	r2, #688	; 0x2b0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92fa:	strb	r1, [r5, #0]
  m_errorLine = line;
    92fc:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    92fe:	b.n	922c <SdioCard::begin(SdioConfig)+0x138>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    9300:	ldr	r1, [pc, #308]	; (9438 <SdioCard::begin(SdioConfig)+0x344>)
    9302:	ldr	r0, [pc, #312]	; (943c <SdioCard::begin(SdioConfig)+0x348>)
    9304:	bl	89f4 <readReg16(unsigned long, void*)>
    9308:	mov	r4, r0
    930a:	cbnz	r0, 931a <SdioCard::begin(SdioConfig)+0x226>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    930c:	movs	r1, #8
  m_errorLine = line;
    930e:	ldr	r3, [pc, #264]	; (9418 <SdioCard::begin(SdioConfig)+0x324>)
    9310:	movw	r2, #691	; 0x2b3
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9314:	strb	r1, [r5, #0]
  m_errorLine = line;
    9316:	str	r2, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    9318:	b.n	922c <SdioCard::begin(SdioConfig)+0x138>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    931a:	ldr.w	r1, [r8]
    931e:	ldr	r0, [pc, #288]	; (9440 <SdioCard::begin(SdioConfig)+0x34c>)
    9320:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    9324:	mov	r4, r0
    9326:	cbnz	r0, 9336 <SdioCard::begin(SdioConfig)+0x242>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9328:	movs	r1, #5
  m_errorLine = line;
    932a:	ldr	r3, [pc, #236]	; (9418 <SdioCard::begin(SdioConfig)+0x324>)
    932c:	movw	r2, #694	; 0x2b6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9330:	strb	r1, [r5, #0]
  m_errorLine = line;
    9332:	str	r2, [r3, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    9334:	b.n	922c <SdioCard::begin(SdioConfig)+0x138>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9336:	ldr.w	r1, [r8]
    933a:	ldr	r0, [pc, #216]	; (9414 <SdioCard::begin(SdioConfig)+0x320>)
    933c:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    9340:	cbnz	r0, 9352 <SdioCard::begin(SdioConfig)+0x25e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9342:	movs	r1, #20
  m_errorLine = line;
    9344:	ldr	r3, [pc, #208]	; (9418 <SdioCard::begin(SdioConfig)+0x324>)
    9346:	movw	r2, #698	; 0x2ba
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    934a:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    934c:	strb	r1, [r5, #0]
  m_errorLine = line;
    934e:	str	r2, [r3, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    9350:	b.n	922c <SdioCard::begin(SdioConfig)+0x138>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9352:	movs	r1, #2
    9354:	ldr	r0, [pc, #236]	; (9444 <SdioCard::begin(SdioConfig)+0x350>)
    9356:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    935a:	mov	r4, r0
    935c:	cmp	r0, #0
    935e:	beq.n	9342 <SdioCard::begin(SdioConfig)+0x24e>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9360:	ldr	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    9362:	mov.w	r2, #1048592	; 0x100010

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    9366:	mvn.w	r0, #4278190080	; 0xff000000
    936a:	mov	r1, sp
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    936c:	bic.w	r3, r3, #6
    9370:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    9372:	ldr	r3, [r6, #40]	; 0x28
    9374:	orr.w	r3, r3, #2
    9378:	str	r3, [r6, #40]	; 0x28

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    937a:	str	r2, [r6, #68]	; 0x44

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    937c:	bl	9058 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    9380:	cbz	r0, 938a <SdioCard::begin(SdioConfig)+0x296>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    9382:	ldrb.w	r3, [sp, #13]
    9386:	lsls	r3, r3, #30
    9388:	bmi.n	93b8 <SdioCard::begin(SdioConfig)+0x2c4>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    938a:	movw	r0, #25000	; 0x61a8
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    938e:	ldr	r3, [pc, #92]	; (93ec <SdioCard::begin(SdioConfig)+0x2f8>)
    9390:	movs	r2, #5
    9392:	str.w	r2, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    9396:	str.w	r2, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    939a:	str.w	r2, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    939e:	str.w	r2, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    93a2:	str.w	r2, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    93a6:	str.w	r2, [r3, #456]	; 0x1c8
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    93aa:	bl	8724 <setSdclk(unsigned long)>
    93ae:	bl	88dc <enableGPIO(bool) [clone .part.0]>

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    93b2:	movs	r3, #1
    93b4:	strb	r3, [r7, #0]
  return true;
    93b6:	b.n	922c <SdioCard::begin(SdioConfig)+0x138>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    93b8:	mov	r1, sp
    93ba:	ldr	r0, [pc, #140]	; (9448 <SdioCard::begin(SdioConfig)+0x354>)
    93bc:	bl	9058 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    93c0:	cmp	r0, #0
    93c2:	beq.n	938a <SdioCard::begin(SdioConfig)+0x296>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    93c4:	ldrb.w	r3, [sp, #16]
    93c8:	and.w	r3, r3, #15
    93cc:	cmp	r3, #1
    93ce:	bne.n	938a <SdioCard::begin(SdioConfig)+0x296>
    kHzSdClk = 50000;
    93d0:	movw	r0, #50000	; 0xc350
    93d4:	b.n	938e <SdioCard::begin(SdioConfig)+0x29a>
    93d6:	nop
    93d8:	.word	0x400d8000
    93dc:	.word	0x20002586
    93e0:	.word	0x20018bc2
    93e4:	.word	0x20018bc4
    93e8:	.word	0x400fc000
    93ec:	.word	0x401f8000
    93f0:	.word	0x402c0000
    93f4:	.word	0x01008000
    93f8:	.word	0x117f000b
    93fc:	.word	0x20002800
    9400:	.word	0x0000866d
    9404:	.word	0xe000e46e
    9408:	.word	0xe000e10c
    940c:	.word	0x081a0000
    9410:	.word	0x40300000
    9414:	.word	0x371a0000
    9418:	.word	0x20017340
    941c:	.word	0x29020000
    9420:	.word	0x2001756c
    9424:	.word	0x02090000
    9428:	.word	0x031a0000
    942c:	.word	0xffff0000
    9430:	.word	0x2001755c
    9434:	.word	0x09090000
    9438:	.word	0x2001754c
    943c:	.word	0x0a090000
    9440:	.word	0x071b0000
    9444:	.word	0x061a0000
    9448:	.word	0x80fffff1
    944c:	.word	0x20018bc3
    9450:	.word	0x000f4240
    9454:	.word	0x20017570

00009458 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    9458:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    945a:	ldr	r3, [pc, #156]	; (94f8 <SdioCard::readData(unsigned char*)+0xa0>)
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    945c:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    945e:	ldr	r2, [r3, #36]	; 0x24
    9460:	lsls	r4, r2, #22
    9462:	bmi.n	9480 <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9464:	ldr	r2, [r3, #40]	; 0x28
    9466:	bic.w	r2, r2, #65536	; 0x10000
    946a:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    946c:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    946e:	ldr	r2, [r3, #40]	; 0x28
    9470:	orr.w	r2, r2, #131072	; 0x20000
    9474:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9476:	ldr	r2, [r3, #40]	; 0x28
    9478:	orr.w	r2, r2, #65536	; 0x10000
    947c:	str	r2, [r3, #40]	; 0x28
    interrupts();
    947e:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    9480:	ldr	r0, [pc, #120]	; (94fc <SdioCard::readData(unsigned char*)+0xa4>)
    9482:	bl	8858 <waitTimeout(bool (*)())>
    9486:	cmp	r0, #0
    9488:	bne.n	94e6 <SdioCard::readData(unsigned char*)+0x8e>
    948a:	subs	r3, r5, #4
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    948c:	ldr	r1, [pc, #104]	; (94f8 <SdioCard::readData(unsigned char*)+0xa0>)
    948e:	add.w	r5, r5, #508	; 0x1fc
    9492:	ldr	r2, [r1, #36]	; 0x24
    9494:	lsls	r0, r2, #20
    9496:	bpl.n	9492 <SdioCard::readData(unsigned char*)+0x3a>
    9498:	add.w	r0, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    949c:	ldr	r2, [r1, #32]
    949e:	ldr	r4, [pc, #88]	; (94f8 <SdioCard::readData(unsigned char*)+0xa0>)
    94a0:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    94a4:	cmp	r0, r3
    94a6:	bne.n	949c <SdioCard::readData(unsigned char*)+0x44>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    94a8:	cmp	r5, r0
    94aa:	mov	r3, r0
    94ac:	bne.n	9492 <SdioCard::readData(unsigned char*)+0x3a>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    94ae:	ldr	r0, [pc, #80]	; (9500 <SdioCard::readData(unsigned char*)+0xa8>)
    94b0:	bl	8858 <waitTimeout(bool (*)())>
    94b4:	cbnz	r0, 94d4 <SdioCard::readData(unsigned char*)+0x7c>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    94b6:	ldr	r2, [r4, #48]	; 0x30
    94b8:	ldr	r3, [pc, #72]	; (9504 <SdioCard::readData(unsigned char*)+0xac>)
    94ba:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    94bc:	ldr	r2, [r3, #0]
    94be:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    94c0:	ldr	r2, [r3, #0]
    94c2:	lsls	r2, r2, #30
    94c4:	bpl.n	94f6 <SdioCard::readData(unsigned char*)+0x9e>
    94c6:	ldr	r3, [r3, #0]
    94c8:	ldr	r0, [pc, #60]	; (9508 <SdioCard::readData(unsigned char*)+0xb0>)
    94ca:	ands	r0, r3
    94cc:	clz	r0, r0
    94d0:	lsrs	r0, r0, #5
    94d2:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94d4:	ldr	r1, [pc, #52]	; (950c <SdioCard::readData(unsigned char*)+0xb4>)
    94d6:	movs	r0, #29
  m_errorLine = line;
    94d8:	ldr	r3, [pc, #52]	; (9510 <SdioCard::readData(unsigned char*)+0xb8>)
    94da:	movw	r2, #834	; 0x342
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94de:	strb	r0, [r1, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    94e0:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    94e2:	str	r2, [r3, #0]
    94e4:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94e6:	ldr	r1, [pc, #36]	; (950c <SdioCard::readData(unsigned char*)+0xb4>)
    94e8:	movs	r4, #26
  m_errorLine = line;
    94ea:	ldr	r3, [pc, #36]	; (9510 <SdioCard::readData(unsigned char*)+0xb8>)
    94ec:	movw	r2, #823	; 0x337
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    94f0:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    94f2:	strb	r4, [r1, #0]
  m_errorLine = line;
    94f4:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    94f6:	pop	{r3, r4, r5, pc}
    94f8:	.word	0x402c0000
    94fc:	.word	0x000086e5
    9500:	.word	0x0000870d
    9504:	.word	0x20017a18
    9508:	.word	0x117f0000
    950c:	.word	0x20002586
    9510:	.word	0x20017340

00009514 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    9514:	push	{r4, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    9516:	ldr	r0, [pc, #80]	; (9568 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    9518:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    951a:	bl	8880 <yieldTimeout(bool (*)())>
    951e:	cbnz	r0, 9554 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9520:	ldr	r3, [pc, #72]	; (956c <SdioCard::readStart(unsigned long)+0x58>)
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9522:	mov.w	r0, #512	; 0x200
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9526:	ldr	r1, [pc, #72]	; (9570 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9528:	ldr	r2, [r3, #40]	; 0x28
    952a:	orr.w	r2, r2, #65536	; 0x10000
    952e:	str	r2, [r3, #40]	; 0x28
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9530:	str	r0, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9532:	ldrb	r3, [r1, #0]
    9534:	cbnz	r3, 9550 <SdioCard::readStart(unsigned long)+0x3c>
    9536:	lsls	r1, r4, #9
    9538:	ldr	r0, [pc, #56]	; (9574 <SdioCard::readStart(unsigned long)+0x60>)
    953a:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    953e:	cbnz	r0, 954e <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9540:	ldr	r1, [pc, #52]	; (9578 <SdioCard::readStart(unsigned long)+0x64>)
    9542:	movs	r4, #12
  m_errorLine = line;
    9544:	ldr	r3, [pc, #52]	; (957c <SdioCard::readStart(unsigned long)+0x68>)
    9546:	movw	r2, #926	; 0x39e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    954a:	strb	r4, [r1, #0]
  m_errorLine = line;
    954c:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    954e:	pop	{r4, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9550:	mov	r1, r4
    9552:	b.n	9538 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9554:	ldr	r1, [pc, #32]	; (9578 <SdioCard::readStart(unsigned long)+0x64>)
    9556:	movs	r0, #10
  m_errorLine = line;
    9558:	ldr	r3, [pc, #32]	; (957c <SdioCard::readStart(unsigned long)+0x68>)
    955a:	movw	r2, #914	; 0x392
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    955e:	strb	r0, [r1, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    9560:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9562:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    9564:	pop	{r4, pc}
    9566:	nop
    9568:	.word	0x000089a9
    956c:	.word	0x402c0000
    9570:	.word	0x20018bc4
    9574:	.word	0x123a0030
    9578:	.word	0x20002586
    957c:	.word	0x20017340

00009580 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9580:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    9582:	ldrb	r3, [r0, #8]
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9584:	sub.w	sp, sp, #512	; 0x200
    9588:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    958a:	lsls	r4, r3, #31
    958c:	bpl.n	95b2 <SdioCard::readSector(unsigned long, unsigned char*)+0x32>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    958e:	lsls	r3, r2, #30
    9590:	beq.n	95d4 <SdioCard::readSector(unsigned long, unsigned char*)+0x54>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9592:	movs	r3, #1
    9594:	ldr	r0, [pc, #164]	; (963c <SdioCard::readSector(unsigned long, unsigned char*)+0xbc>)
    9596:	mov	r2, sp
    9598:	bl	8a70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    959c:	cbz	r0, 95e0 <SdioCard::readSector(unsigned long, unsigned char*)+0x60>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    959e:	mov	r1, sp
    95a0:	mov	r0, r5
    95a2:	mov.w	r2, #512	; 0x200
    95a6:	bl	9920 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    95aa:	movs	r0, #1
}
    95ac:	add.w	sp, sp, #512	; 0x200
    95b0:	pop	{r4, r5, r6, pc}
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    95b2:	ldr	r3, [pc, #140]	; (9640 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    95b4:	mov	r4, r0
    95b6:	mov	r6, r1
    95b8:	ldrb	r3, [r3, #0]
    95ba:	cbnz	r3, 960a <SdioCard::readSector(unsigned long, unsigned char*)+0x8a>
    }
  } else {
    if (!waitTransferComplete()) {
      return false;
    }
    if (m_curState != READ_STATE || sector != m_curSector) {
    95bc:	ldrb	r3, [r4, #9]
    95be:	cmp	r3, #1
    95c0:	beq.n	95f6 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    95c2:	ldr	r3, [r4, #0]
    95c4:	mov	r0, r4
    95c6:	ldr	r3, [r3, #32]
    95c8:	blx	r3
    95ca:	cbnz	r0, 9616 <SdioCard::readSector(unsigned long, unsigned char*)+0x96>
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (!waitTransferComplete()) {
      return false;
    95cc:	movs	r0, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    95ce:	add.w	sp, sp, #512	; 0x200
    95d2:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    95d4:	movs	r3, #1
    95d6:	ldr	r0, [pc, #100]	; (963c <SdioCard::readSector(unsigned long, unsigned char*)+0xbc>)
    95d8:	bl	8a70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    95dc:	cmp	r0, #0
    95de:	bne.n	95aa <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    95e0:	movs	r0, #11
    95e2:	ldr	r1, [pc, #96]	; (9644 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    95e4:	ldr	r3, [pc, #96]	; (9648 <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
    95e6:	movw	r2, #853	; 0x355
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    95ea:	strb	r0, [r1, #0]
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    95ec:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    95ee:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    95f0:	add.w	sp, sp, #512	; 0x200
    95f4:	pop	{r4, r5, r6, pc}
    }
  } else {
    if (!waitTransferComplete()) {
      return false;
    }
    if (m_curState != READ_STATE || sector != m_curSector) {
    95f6:	ldr	r3, [r4, #4]
    95f8:	cmp	r6, r3
    95fa:	beq.n	9628 <SdioCard::readSector(unsigned long, unsigned char*)+0xa8>
      if (!syncDevice()) {
    95fc:	ldr	r3, [r4, #0]
    95fe:	mov	r0, r4
    9600:	ldr	r3, [r3, #32]
    9602:	blx	r3
    9604:	cmp	r0, #0
    9606:	beq.n	95cc <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
    9608:	b.n	9616 <SdioCard::readSector(unsigned long, unsigned char*)+0x96>
    960a:	bl	8cbc <waitTransferComplete() [clone .part.10]>
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (!waitTransferComplete()) {
    960e:	cmp	r0, #0
    9610:	bne.n	95bc <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
      return false;
    9612:	movs	r0, #0
    9614:	b.n	95ce <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
    }
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    9616:	mov	r1, r6
    9618:	mov	r0, r4
    961a:	bl	9514 <SdioCard::readStart(unsigned long)>
    961e:	cmp	r0, #0
    9620:	beq.n	95cc <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    9622:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    9624:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    9626:	strb	r3, [r4, #9]
    }
    if (!readData(dst)) {
    9628:	mov	r1, r5
    962a:	mov	r0, r4
    962c:	bl	9458 <SdioCard::readData(unsigned char*)>
    9630:	cmp	r0, #0
    9632:	beq.n	95cc <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    9634:	ldr	r3, [r4, #4]
    9636:	adds	r3, #1
    9638:	str	r3, [r4, #4]
    963a:	b.n	95f0 <SdioCard::readSector(unsigned long, unsigned char*)+0x70>
    963c:	.word	0x113a0011
    9640:	.word	0x20018bc5
    9644:	.word	0x20002586
    9648:	.word	0x20017340

0000964c <SdioCard::stopTransmission(bool)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    964c:	push	{r4, r5, r6, lr}
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    964e:	ldr	r2, [pc, #80]	; (96a0 <SdioCard::stopTransmission(bool)+0x54>)
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
    9650:	movs	r5, #0
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    9652:	mov	r6, r1
  m_curState = IDLE_STATE;
    9654:	strb	r5, [r0, #9]
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9656:	mov	r1, r5
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9658:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    965a:	ldr	r0, [pc, #72]	; (96a4 <SdioCard::stopTransmission(bool)+0x58>)
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    965c:	bic.w	r3, r3, #65536	; 0x10000
    9660:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9662:	bl	8940 <cardCommand(unsigned long, unsigned long)>
    9666:	mov	r4, r0
    9668:	cbz	r0, 968e <SdioCard::stopTransmission(bool)+0x42>
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    966a:	cbnz	r6, 9670 <SdioCard::stopTransmission(bool)+0x24>
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    966c:	mov	r0, r4
    966e:	pop	{r4, r5, r6, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    if (yieldTimeout(isBusyDat)) {
    9670:	ldr	r0, [pc, #52]	; (96a8 <SdioCard::stopTransmission(bool)+0x5c>)
    9672:	bl	8880 <yieldTimeout(bool (*)())>
    9676:	cmp	r0, #0
    9678:	beq.n	966c <SdioCard::stopTransmission(bool)+0x20>
      return sdError(SD_CARD_ERROR_CMD13);
    967a:	mov	r4, r5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    967c:	ldr	r1, [pc, #44]	; (96ac <SdioCard::stopTransmission(bool)+0x60>)
    967e:	movs	r0, #10
  m_errorLine = line;
    9680:	ldr	r3, [pc, #44]	; (96b0 <SdioCard::stopTransmission(bool)+0x64>)
    9682:	mov.w	r2, #952	; 0x3b8
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9686:	strb	r0, [r1, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    9688:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    968a:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    968c:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    968e:	ldr	r1, [pc, #28]	; (96ac <SdioCard::stopTransmission(bool)+0x60>)
    9690:	movs	r0, #9
  m_errorLine = line;
    9692:	ldr	r3, [pc, #28]	; (96b0 <SdioCard::stopTransmission(bool)+0x64>)
    9694:	mov.w	r2, #948	; 0x3b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9698:	strb	r0, [r1, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    969a:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    969c:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    969e:	pop	{r4, r5, r6, pc}
    96a0:	.word	0x402c0000
    96a4:	.word	0x0cdb0000
    96a8:	.word	0x000086c5
    96ac:	.word	0x20002586
    96b0:	.word	0x20017340

000096b4 <SdioCard::syncDevice()>:
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    96b4:	ldr	r3, [pc, #36]	; (96dc <SdioCard::syncDevice()+0x28>)
    96b6:	ldrb	r3, [r3, #0]
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
    96b8:	push	{r4, lr}
    96ba:	mov	r4, r0
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    96bc:	cbnz	r3, 96d2 <SdioCard::syncDevice()+0x1e>
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    96be:	ldrb	r3, [r4, #9]
    96c0:	cbnz	r3, 96c6 <SdioCard::syncDevice()+0x12>
    return stopTransmission(true);
  }
  return true;
    96c2:	movs	r0, #1
    96c4:	pop	{r4, pc}
bool SdioCard::syncDevice() {
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    96c6:	mov	r0, r4
    96c8:	movs	r1, #1
  }
  return true;
}
    96ca:	ldmia.w	sp!, {r4, lr}
bool SdioCard::syncDevice() {
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    96ce:	b.w	964c <SdioCard::stopTransmission(bool)>
    96d2:	bl	8cbc <waitTransferComplete() [clone .part.10]>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (!waitTransferComplete()) {
    96d6:	cmp	r0, #0
    96d8:	bne.n	96be <SdioCard::syncDevice()+0xa>
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
  }
  return true;
}
    96da:	pop	{r4, pc}
    96dc:	.word	0x20018bc5

000096e0 <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    96e0:	ldr	r3, [r0, #0]
    96e2:	ldr	r1, [r0, #4]
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    96e4:	push	{r4, r5}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    96e6:	ldrb	r2, [r3, #19]
    96e8:	ldr	r4, [r0, #8]
    96ea:	cmp	r2, #0
    96ec:	beq.n	9740 <SdSpiArduinoDriver::activate()+0x60>
			__disable_irq();
    96ee:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    96f0:	ldrb	r2, [r3, #19]
    96f2:	lsls	r5, r2, #31
    96f4:	bpl.n	9704 <SdSpiArduinoDriver::activate()+0x24>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    96f6:	ldr	r0, [pc, #204]	; (97c4 <SdSpiArduinoDriver::activate()+0xe4>)
    96f8:	ldr	r2, [r3, #20]
    96fa:	ldr	r5, [r0, #0]
    96fc:	ands	r2, r5
    96fe:	str	r2, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    9700:	str	r2, [r0, #0]
    9702:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x02) {
    9704:	lsls	r0, r2, #30
    9706:	bpl.n	9716 <SdSpiArduinoDriver::activate()+0x36>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    9708:	ldr	r0, [pc, #188]	; (97c8 <SdSpiArduinoDriver::activate()+0xe8>)
    970a:	ldr	r2, [r3, #24]
    970c:	ldr	r5, [r0, #0]
    970e:	ands	r2, r5
    9710:	str	r2, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    9712:	str	r2, [r0, #0]
    9714:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x04) {
    9716:	lsls	r5, r2, #29
    9718:	bpl.n	9728 <SdSpiArduinoDriver::activate()+0x48>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    971a:	ldr	r0, [pc, #176]	; (97cc <SdSpiArduinoDriver::activate()+0xec>)
    971c:	ldr	r2, [r3, #28]
    971e:	ldr	r5, [r0, #0]
    9720:	ands	r2, r5
    9722:	str	r2, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    9724:	str	r2, [r0, #0]
    9726:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x08) {
    9728:	lsls	r0, r2, #28
    972a:	bpl.n	973a <SdSpiArduinoDriver::activate()+0x5a>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    972c:	ldr	r0, [pc, #160]	; (97d0 <SdSpiArduinoDriver::activate()+0xf0>)
    972e:	ldr	r2, [r3, #32]
    9730:	ldr	r5, [r0, #0]
    9732:	ands	r2, r5
    9734:	str	r2, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    9736:	str	r2, [r0, #0]
    9738:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x10) {
    973a:	lsls	r2, r2, #27
    973c:	bmi.n	9796 <SdSpiArduinoDriver::activate()+0xb6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    973e:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    9740:	ldr	r2, [r3, #8]
    9742:	cmp	r2, r1
    9744:	beq.n	97a4 <SdSpiArduinoDriver::activate()+0xc4>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    9746:	ldr	r2, [pc, #140]	; (97d4 <SdSpiArduinoDriver::activate()+0xf4>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    9748:	str	r1, [r3, #8]

			uint32_t cbcmr = CCM_CBCMR;
    974a:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    974c:	ldr	r0, [pc, #136]	; (97d8 <SdSpiArduinoDriver::activate()+0xf8>)
    974e:	ubfx	r5, r2, #4, #2
    9752:	ubfx	r2, r2, #26, #3
    9756:	ldr.w	r0, [r0, r5, lsl #2]
    975a:	adds	r2, #1
    975c:	udiv	r0, r0, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    9760:	cbz	r1, 9792 <SdSpiArduinoDriver::activate()+0xb2>
    9762:	udiv	r2, r0, r1

			if (d && clkhz/d > _clock) d++;
    9766:	cbz	r2, 977a <SdSpiArduinoDriver::activate()+0x9a>
    9768:	udiv	r0, r0, r2
    976c:	cmp	r0, r1
    976e:	it	hi
    9770:	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    9772:	cmp.w	r2, #258	; 0x102
    9776:	bcc.n	97a8 <SdSpiArduinoDriver::activate()+0xc8>
    9778:	ldr	r2, [pc, #96]	; (97dc <SdSpiArduinoDriver::activate()+0xfc>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    977a:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    977c:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    977e:	movs	r5, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    9780:	movs	r0, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    9782:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    9784:	str	r5, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    9786:	str	r0, [r3, #36]	; 0x24
		port().CCR = _ccr;
    9788:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    978a:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    978c:	str	r1, [r3, #16]
  m_spi->beginTransaction(m_spiSettings);
}
    978e:	pop	{r4, r5}
    9790:	bx	lr

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    9792:	mov	r2, r0
    9794:	b.n	9766 <SdSpiArduinoDriver::activate()+0x86>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    9796:	ldr	r0, [pc, #72]	; (97e0 <SdSpiArduinoDriver::activate()+0x100>)
    9798:	ldr	r2, [r3, #36]	; 0x24
    979a:	ldr	r5, [r0, #0]
    979c:	ands	r2, r5
    979e:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    97a0:	str	r2, [r0, #0]
    97a2:	b.n	973e <SdSpiArduinoDriver::activate()+0x5e>
    97a4:	ldr	r2, [r3, #12]
    97a6:	b.n	977c <SdSpiArduinoDriver::activate()+0x9c>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    97a8:	cmp	r2, #2
    97aa:	it	ls
    97ac:	movls	r2, #0
    97ae:	bls.n	977a <SdSpiArduinoDriver::activate()+0x9a>
    97b0:	subs	r2, #2
    97b2:	lsrs	r0, r2, #1
    97b4:	lsls	r1, r0, #16
    97b6:	orr.w	r2, r2, r0, lsl #8
    97ba:	and.w	r1, r1, #16711680	; 0xff0000
    97be:	orrs	r2, r1
    97c0:	b.n	977a <SdSpiArduinoDriver::activate()+0x9a>
    97c2:	nop
    97c4:	.word	0xe000e180
    97c8:	.word	0xe000e184
    97cc:	.word	0xe000e188
    97d0:	.word	0xe000e18c
    97d4:	.word	0x400fc000
    97d8:	.word	0x20000850
    97dc:	.word	0x007f7fff
    97e0:	.word	0xe000e190

000097e4 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    97e4:	push	{lr}
    97e6:	sub	sp, #20
    97e8:	add.w	lr, sp, #16
    97ec:	stmdb	lr, {r1, r2, r3}
    97f0:	ldr	r3, [sp, #12]
  if (spiConfig.spiPort) {
    97f2:	cbz	r3, 9802 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1e>
    m_spi = spiConfig.spiPort;
    97f4:	str	r3, [r0, #0]
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    97f6:	mov	r0, r3
}
    97f8:	add	sp, #20
    97fa:	ldr.w	lr, [sp], #4
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    97fe:	b.w	263c <SPIClass::begin()>
    m_spi->setMISO(SDFAT_SDCARD_MISO_PIN);
    m_spi->setMOSI(SDFAT_SDCARD_MOSI_PIN);
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    9802:	ldr	r2, [pc, #16]	; (9814 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x30>)
    9804:	mov	r3, r2
    9806:	str	r2, [r0, #0]
  }
  m_spi->begin();
    9808:	mov	r0, r3
}
    980a:	add	sp, #20
    980c:	ldr.w	lr, [sp], #4
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    9810:	b.w	263c <SPIClass::begin()>
    9814:	.word	0x20001f28

00009818 <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    9818:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    981a:	ldrb	r3, [r2, #19]
    981c:	cbz	r3, 9858 <SdSpiArduinoDriver::deactivate()+0x40>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    981e:	lsls	r0, r3, #31
    9820:	bpl.n	982a <SdSpiArduinoDriver::deactivate()+0x12>
    9822:	ldr	r3, [pc, #56]	; (985c <SdSpiArduinoDriver::deactivate()+0x44>)
    9824:	ldr	r1, [r2, #40]	; 0x28
    9826:	str	r1, [r3, #0]
    9828:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    982a:	lsls	r1, r3, #30
    982c:	bpl.n	9836 <SdSpiArduinoDriver::deactivate()+0x1e>
    982e:	ldr	r3, [pc, #48]	; (9860 <SdSpiArduinoDriver::deactivate()+0x48>)
    9830:	ldr	r1, [r2, #44]	; 0x2c
    9832:	str	r1, [r3, #0]
    9834:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    9836:	lsls	r0, r3, #29
    9838:	bpl.n	9842 <SdSpiArduinoDriver::deactivate()+0x2a>
    983a:	ldr	r3, [pc, #40]	; (9864 <SdSpiArduinoDriver::deactivate()+0x4c>)
    983c:	ldr	r1, [r2, #48]	; 0x30
    983e:	str	r1, [r3, #0]
    9840:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    9842:	lsls	r1, r3, #28
    9844:	bpl.n	984e <SdSpiArduinoDriver::deactivate()+0x36>
    9846:	ldr	r3, [pc, #32]	; (9868 <SdSpiArduinoDriver::deactivate()+0x50>)
    9848:	ldr	r1, [r2, #52]	; 0x34
    984a:	str	r1, [r3, #0]
    984c:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    984e:	lsls	r3, r3, #27
    9850:	bpl.n	9858 <SdSpiArduinoDriver::deactivate()+0x40>
    9852:	ldr	r2, [r2, #56]	; 0x38
    9854:	ldr	r3, [pc, #20]	; (986c <SdSpiArduinoDriver::deactivate()+0x54>)
    9856:	str	r2, [r3, #0]
    9858:	bx	lr
    985a:	nop
    985c:	.word	0xe000e100
    9860:	.word	0xe000e104
    9864:	.word	0xe000e108
    9868:	.word	0xe000e10c
    986c:	.word	0xe000e110

00009870 <SdSpiArduinoDriver::end()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    9870:	ldr	r0, [r0, #0]
    9872:	b.w	2874 <SPIClass::end()>
    9876:	nop

00009878 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    9878:	ldr	r2, [r0, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    987a:	movs	r3, #255	; 0xff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    987c:	ldr	r2, [r2, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    987e:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9880:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9882:	tst.w	r3, #2031616	; 0x1f0000
    9886:	beq.n	9880 <SdSpiArduinoDriver::receive()+0x8>
    9888:	ldr	r0, [r2, #116]	; 0x74
  return m_spi->transfer(0XFF);
}
    988a:	uxtb	r0, r0
    988c:	bx	lr
    988e:	nop

00009890 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    9890:	push	{r4, r5, r6, lr}
    9892:	mov	r4, r1
    9894:	mov	r6, r2
    9896:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    9898:	movs	r1, #255	; 0xff
    989a:	mov	r0, r4
    989c:	bl	c86c <memset>
				transfer16(buf, buf, count >> 1);
				return;
			}
		}
#endif
		transfer(buf, buf, count);
    98a0:	ldr	r0, [r5, #0]
    98a2:	mov	r3, r6
    98a4:	mov	r2, r4
    98a6:	mov	r1, r4
    98a8:	bl	286c <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    98ac:	movs	r0, #0
    98ae:	pop	{r4, r5, r6, pc}

000098b0 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    98b0:	ldr	r3, [r0, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    98b2:	ldr	r2, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    98b4:	str	r1, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    98b6:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    98b8:	tst.w	r3, #2031616	; 0x1f0000
    98bc:	beq.n	98b6 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    98be:	ldr	r3, [r2, #116]	; 0x74
    98c0:	bx	lr
    98c2:	nop

000098c4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    98c4:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    98c6:	subs	r5, r2, #1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    98c8:	sub.w	sp, sp, #516	; 0x204
    98cc:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    98ce:	cmp.w	r5, #512	; 0x200
    98d2:	bcc.n	98f6 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x32>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    98d4:	cbz	r2, 98f0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x2c>
    98d6:	ldr	r2, [r0, #0]
    98d8:	adds	r0, r1, r3
    98da:	ldr	r2, [r2, #0]
    m_spi->transfer(buf[i]);
    98dc:	ldrb.w	r3, [r1], #1
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    98e0:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    98e2:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    98e4:	tst.w	r3, #2031616	; 0x1f0000
    98e8:	beq.n	98e2 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1e>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    98ea:	cmp	r1, r0
    98ec:	ldr	r3, [r2, #116]	; 0x74
    98ee:	bne.n	98dc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x18>
    m_spi->transfer(buf[i]);
  }
}
    98f0:	add.w	sp, sp, #516	; 0x204
    98f4:	pop	{r4, r5, pc}
    98f6:	mov	r4, r2
    98f8:	mov	r5, r0
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    98fa:	mov	r0, sp
    98fc:	bl	9920 <memcpy>
				transfer16(buf, buf, count >> 1);
				return;
			}
		}
#endif
		transfer(buf, buf, count);
    9900:	mov	r3, r4
    9902:	mov	r2, sp
    9904:	mov	r1, sp
    9906:	ldr	r0, [r5, #0]
    9908:	bl	286c <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    990c:	add.w	sp, sp, #516	; 0x204
    9910:	pop	{r4, r5, pc}
    9912:	nop

00009914 <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
    9914:	movs	r1, #1
    9916:	b.w	b2cc <pinMode>
    991a:	nop

0000991c <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    991c:	b.w	b2b4 <digitalWrite>

00009920 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9920:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9922:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9926:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    992a:	bne.n	9a08 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    992c:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    992e:	bcc.n	99b4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9930:	ldr.w	r3, [r1], #4
    9934:	str.w	r3, [r0], #4
    9938:	ldr.w	r3, [r1], #4
    993c:	str.w	r3, [r0], #4
    9940:	ldr.w	r3, [r1], #4
    9944:	str.w	r3, [r0], #4
    9948:	ldr.w	r3, [r1], #4
    994c:	str.w	r3, [r0], #4
    9950:	ldr.w	r3, [r1], #4
    9954:	str.w	r3, [r0], #4
    9958:	ldr.w	r3, [r1], #4
    995c:	str.w	r3, [r0], #4
    9960:	ldr.w	r3, [r1], #4
    9964:	str.w	r3, [r0], #4
    9968:	ldr.w	r3, [r1], #4
    996c:	str.w	r3, [r0], #4
    9970:	ldr.w	r3, [r1], #4
    9974:	str.w	r3, [r0], #4
    9978:	ldr.w	r3, [r1], #4
    997c:	str.w	r3, [r0], #4
    9980:	ldr.w	r3, [r1], #4
    9984:	str.w	r3, [r0], #4
    9988:	ldr.w	r3, [r1], #4
    998c:	str.w	r3, [r0], #4
    9990:	ldr.w	r3, [r1], #4
    9994:	str.w	r3, [r0], #4
    9998:	ldr.w	r3, [r1], #4
    999c:	str.w	r3, [r0], #4
    99a0:	ldr.w	r3, [r1], #4
    99a4:	str.w	r3, [r0], #4
    99a8:	ldr.w	r3, [r1], #4
    99ac:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    99b0:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    99b2:	bcs.n	9930 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    99b4:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    99b6:	bcc.n	99dc <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    99b8:	ldr.w	r3, [r1], #4
    99bc:	str.w	r3, [r0], #4
    99c0:	ldr.w	r3, [r1], #4
    99c4:	str.w	r3, [r0], #4
    99c8:	ldr.w	r3, [r1], #4
    99cc:	str.w	r3, [r0], #4
    99d0:	ldr.w	r3, [r1], #4
    99d4:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    99d8:	subs	r2, #16
	bhs	.Lmid_block_loop
    99da:	bcs.n	99b8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    99dc:	adds	r2, #12
	blo	.Lcopy_less_than_4
    99de:	bcc.n	99ec <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    99e0:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    99e4:	str.w	r3, [r0], #4
	subs	r2, #4
    99e8:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    99ea:	bcs.n	99e0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    99ec:	adds	r2, #4
	beq	.Ldone
    99ee:	beq.n	9a02 <memcpy+0xe2>

	lsls	r2, r2, #31
    99f0:	lsls	r2, r2, #31
	itt ne
    99f2:	itt	ne
	ldrbne  r3, [r1], #1
    99f4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    99f8:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    99fc:	bcc.n	9a02 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    99fe:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9a00:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9a02:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9a04:	bx	lr
    9a06:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    9a08:	cmp	r2, #8
	blo	.Lbyte_copy
    9a0a:	bcc.n	9a34 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9a0c:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9a0e:	beq.n	992c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9a10:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9a14:	beq.n	992c <memcpy+0xc>

	rsb	r3, #4
    9a16:	rsb	r3, r3, #4
	subs	r2, r3
    9a1a:	subs	r2, r2, r3

	lsls    r3, r3, #31
    9a1c:	lsls	r3, r3, #31
	itt ne
    9a1e:	itt	ne
	ldrbne  r3, [r1], #1
    9a20:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9a24:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9a28:	bcc.n	992c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    9a2a:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    9a2e:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9a32:	b.n	992c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9a34:	subs	r2, #4
	blo	.Lcopy_less_than_4
    9a36:	bcc.n	99ec <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9a38:	subs	r2, #1
	ldrb    r3, [r1], #1
    9a3a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9a3e:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9a42:	bcs.n	9a38 <memcpy+0x118>

	ldrb	r3, [r1]
    9a44:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9a46:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9a48:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9a4a:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9a4c:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9a4e:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9a50:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9a52:	bx	lr

00009a54 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9a54:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9a56:	ldr	r1, [pc, #80]	; (9aa8 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9a58:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9a5c:	ldr	r5, [pc, #76]	; (9aac <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9a5e:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9a60:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9a64:	ldr	r6, [pc, #72]	; (9ab0 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9a66:	ldr	r2, [pc, #76]	; (9ab4 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9a68:	add.w	r5, r5, r0, lsl #5
    9a6c:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9a6e:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9a70:	mov	r0, r5
    9a72:	ldrh	r2, [r6, #0]
    9a74:	bl	ad14 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    9a78:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9a7a:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    9a7e:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    9a80:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    9a84:	ldr	r2, [pc, #48]	; (9ab8 <rx_queue_transfer+0x64>)
    9a86:	str	r3, [r2, #0]
		location += 32;
    9a88:	adds	r3, #32
	} while (location < end_addr);
    9a8a:	cmp	r1, r3
    9a8c:	bhi.n	9a86 <rx_queue_transfer+0x32>
	asm("dsb");
    9a8e:	dsb	sy
	asm("isb");
    9a92:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    9a96:	movs	r0, #3
    9a98:	mov	r1, r5
    9a9a:	bl	ad6c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9a9e:	ldr	r3, [pc, #28]	; (9abc <rx_queue_transfer+0x68>)
    9aa0:	mov.w	r2, #131072	; 0x20000
    9aa4:	str	r2, [r3, #0]
    9aa6:	pop	{r3, r4, r5, r6, r7, pc}
    9aa8:	.word	0x20002ac0
    9aac:	.word	0x20003ac0
    9ab0:	.word	0x20018bbc
    9ab4:	.word	0xe000e18c
    9ab8:	.word	0xe000ef5c
    9abc:	.word	0xe000e10c

00009ac0 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9ac0:	ldr	r2, [pc, #144]	; (9b54 <rx_event+0x94>)
    9ac2:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    9ac4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9ac8:	ubfx	r3, r3, #16, #15
    9acc:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    9ace:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9ad0:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    9ad2:	cmp	r4, #0
    9ad4:	ble.n	9b48 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    9ad6:	ldr	r1, [pc, #128]	; (9b58 <rx_event+0x98>)
		if (head != rx_tail) {
    9ad8:	ldr	r2, [pc, #128]	; (9b5c <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    9ada:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    9adc:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    9ade:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    9ae0:	ldr	r0, [pc, #124]	; (9b60 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    9ae2:	ldr	r6, [pc, #128]	; (9b64 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    9ae4:	cmp	r3, r2
    9ae6:	beq.n	9af8 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    9ae8:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    9aec:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    9af0:	rsb	r2, r7, #512	; 0x200
    9af4:	cmp	r4, r2
    9af6:	bls.n	9b1e <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    9af8:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    9afa:	movs	r2, #0
    9afc:	ldr	r7, [pc, #104]	; (9b68 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    9afe:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    9b00:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    9b04:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    9b08:	ldr	r6, [pc, #96]	; (9b6c <rx_event+0xac>)
    9b0a:	ite	ls
    9b0c:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    9b0e:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    9b10:	strb	r2, [r1, #0]
		rx_available += len;
    9b12:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    9b14:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    9b16:	add	r4, r2
    9b18:	str	r4, [r6, #0]
    9b1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9b1e:	ldr	r3, [pc, #80]	; (9b70 <rx_event+0xb0>)
    9b20:	add.w	r0, r7, r8, lsl #9
    9b24:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    9b26:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9b28:	add.w	r1, r3, r5, lsl #9
    9b2c:	add	r0, r3
    9b2e:	bl	9920 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    9b32:	ldr	r2, [pc, #56]	; (9b6c <rx_event+0xac>)
				rx_queue_transfer(i);
    9b34:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    9b36:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    9b3a:	ldr	r3, [r2, #0]
    9b3c:	add	r4, r3
    9b3e:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    9b40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    9b44:	b.w	9a54 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    9b48:	mov	r0, r5
	}
}
    9b4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    9b4e:	b.w	9a54 <rx_queue_transfer>
    9b52:	nop
    9b54:	.word	0x20018bbc
    9b58:	.word	0x20018bcd
    9b5c:	.word	0x20018bce
    9b60:	.word	0x200186ac
    9b64:	.word	0x2001868c
    9b68:	.word	0x2001869c
    9b6c:	.word	0x20018688
    9b70:	.word	0x20002ac0

00009b74 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    9b74:	ldr	r3, [pc, #120]	; (9bf0 <usb_serial_flush_callback+0x7c>)
    9b76:	ldrb	r2, [r3, #0]
    9b78:	cbnz	r2, 9b92 <usb_serial_flush_callback+0x1e>
    9b7a:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    9b7e:	ldr	r2, [pc, #116]	; (9bf4 <usb_serial_flush_callback+0x80>)
    9b80:	ldrb	r2, [r2, #0]
    9b82:	cbz	r2, 9b92 <usb_serial_flush_callback+0x1e>
	asm("dsb" ::: "memory");
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    9b84:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    9b88:	ldr	r5, [pc, #108]	; (9bf8 <usb_serial_flush_callback+0x84>)
    9b8a:	ldrh	r2, [r5, #0]
    9b8c:	cbnz	r2, 9b94 <usb_serial_flush_callback+0x20>
    9b8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b92:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9b94:	ldr	r6, [pc, #100]	; (9bfc <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    9b96:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9b9a:	ldr	r7, [pc, #100]	; (9c00 <usb_serial_flush_callback+0x8c>)
    9b9c:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9b9e:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9ba0:	ldr	r4, [pc, #96]	; (9c04 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9ba2:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9ba6:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9baa:	mov	r0, r7
    9bac:	mov	r1, r4
    9bae:	bl	ad14 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    9bb2:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9bb6:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    9bba:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    9bbe:	ldr	r3, [pc, #72]	; (9c08 <usb_serial_flush_callback+0x94>)
    9bc0:	str	r1, [r3, #0]
		location += 32;
    9bc2:	adds	r1, #32
	} while (location < end_addr);
    9bc4:	cmp	r2, r1
    9bc6:	bhi.n	9bc0 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    9bc8:	dsb	sy
	asm("isb");
    9bcc:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9bd0:	movs	r0, #4
    9bd2:	mov	r1, r7
    9bd4:	bl	ad44 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9bd8:	ldrb	r3, [r6, #0]
    9bda:	ldr	r2, [pc, #32]	; (9bfc <usb_serial_flush_callback+0x88>)
    9bdc:	adds	r3, #1
    9bde:	uxtb	r3, r3
    9be0:	cmp	r3, #3
    9be2:	it	hi
    9be4:	movhi	r3, #0
    9be6:	strb	r3, [r2, #0]
	tx_available = 0;
    9be8:	movs	r3, #0
    9bea:	strh	r3, [r5, #0]
    9bec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9bf0:	.word	0x20018bd2
    9bf4:	.word	0x20018bd4
    9bf8:	.word	0x20018bbe
    9bfc:	.word	0x20018bd1
    9c00:	.word	0x20003bc0
    9c04:	.word	0x20003c40
    9c08:	.word	0xe000ef70

00009c0c <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    9c0c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c10:	sub	sp, #20
    9c12:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9c14:	str	r1, [sp, #0]
    9c16:	cmp	r1, #0
    9c18:	beq.w	9d72 <usb_serial_write.part.1+0x166>
    9c1c:	movs	r3, #0
    9c1e:	ldr	r5, [pc, #344]	; (9d78 <usb_serial_write.part.1+0x16c>)
    9c20:	ldr.w	r8, [pc, #372]	; 9d98 <usb_serial_write.part.1+0x18c>
    9c24:	ldr.w	sl, [pc, #352]	; 9d88 <usb_serial_write.part.1+0x17c>
				break;
			}
			asm("dsb" ::: "memory");
			tx_noautoflush = 0;
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    9c28:	ldr	r7, [pc, #336]	; (9d7c <usb_serial_write.part.1+0x170>)
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    9c2a:	ldr.w	fp, [pc, #368]	; 9d9c <usb_serial_write.part.1+0x190>
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9c2e:	str	r3, [sp, #4]
		tx_noautoflush = 1;
    9c30:	movs	r2, #1
		transfer_t *xfer = tx_transfer + tx_head;
    9c32:	ldr	r3, [pc, #332]	; (9d80 <usb_serial_write.part.1+0x174>)
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
    9c34:	strb	r2, [r5, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    9c36:	ldrb	r4, [r3, #0]
    9c38:	ldr	r2, [pc, #328]	; (9d84 <usb_serial_write.part.1+0x178>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    9c3a:	ldrh.w	r3, [r8]
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
    9c3e:	add.w	r9, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    9c42:	cbnz	r3, 9c8e <usb_serial_write.part.1+0x82>
    9c44:	mov	r6, r3
    9c46:	mov	r4, r3
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    9c48:	mov	r0, r9
    9c4a:	bl	ad90 <usb_transfer_status>
			if (!(status & 0x80)) {
    9c4e:	ands.w	r0, r0, #128	; 0x80
    9c52:	beq.n	9d52 <usb_serial_write.part.1+0x146>
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			asm("dsb" ::: "memory");
    9c54:	dsb	sy
			tx_noautoflush = 0;
    9c58:	movs	r2, #0
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9c5a:	ldrb.w	r3, [sl]
    9c5e:	ldr	r1, [pc, #296]	; (9d88 <usb_serial_write.part.1+0x17c>)
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			asm("dsb" ::: "memory");
			tx_noautoflush = 0;
    9c60:	strb	r2, [r5, #0]
			if (!waiting) {
    9c62:	cbnz	r4, 9c66 <usb_serial_write.part.1+0x5a>
				wait_begin_at = systick_millis_count;
    9c64:	ldr	r6, [r7, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9c66:	cmp	r3, #0
    9c68:	bne.n	9d20 <usb_serial_write.part.1+0x114>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9c6a:	ldr	r3, [r7, #0]
    9c6c:	subs	r3, r3, r6
    9c6e:	cmp	r3, #120	; 0x78
    9c70:	bhi.n	9d66 <usb_serial_write.part.1+0x15a>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    9c72:	ldrb.w	r3, [fp]
    9c76:	cmp	r3, #0
    9c78:	beq.n	9d20 <usb_serial_write.part.1+0x114>
			yield();
    9c7a:	bl	b65c <yield>
			tx_noautoflush = 1;
    9c7e:	movs	r4, #1
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    9c80:	ldrh.w	r3, [r8]
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
    9c84:	strb	r4, [r5, #0]
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    9c86:	cmp	r3, #0
    9c88:	beq.n	9c48 <usb_serial_write.part.1+0x3c>
    9c8a:	ldr	r2, [pc, #244]	; (9d80 <usb_serial_write.part.1+0x174>)
    9c8c:	ldrb	r4, [r2, #0]
    9c8e:	mov	r2, r3
    9c90:	rsb	r0, r3, #2048	; 0x800
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9c94:	lsls	r4, r4, #11
		if (size >= tx_available) {
    9c96:	ldr	r6, [sp, #0]
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9c98:	ldr	r1, [pc, #240]	; (9d8c <usb_serial_write.part.1+0x180>)
    9c9a:	add	r0, r4
		if (size >= tx_available) {
    9c9c:	cmp	r6, r2
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9c9e:	add	r0, r1
		if (size >= tx_available) {
    9ca0:	bcc.n	9d28 <usb_serial_write.part.1+0x11c>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9ca2:	add	r4, r1
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    9ca4:	ldr	r1, [sp, #8]
    9ca6:	bl	9920 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    9caa:	movs	r3, #0
    9cac:	mov	r1, r4
    9cae:	mov.w	r2, #2048	; 0x800
    9cb2:	mov	r0, r9
    9cb4:	bl	ad14 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9cb8:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    9cbc:	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    9cc0:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    9cc4:	ldr	r2, [pc, #200]	; (9d90 <usb_serial_write.part.1+0x184>)
    9cc6:	str	r3, [r2, #0]
		location += 32;
    9cc8:	adds	r3, #32
	} while (location < end_addr);
    9cca:	cmp	r4, r3
    9ccc:	bhi.n	9cc4 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    9cce:	dsb	sy
	asm("isb");
    9cd2:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    9cd6:	movs	r0, #4
    9cd8:	mov	r1, r9
    9cda:	bl	ad44 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    9cde:	ldr	r3, [pc, #160]	; (9d80 <usb_serial_write.part.1+0x174>)
    9ce0:	ldr	r2, [pc, #156]	; (9d80 <usb_serial_write.part.1+0x174>)
    9ce2:	ldrb	r3, [r3, #0]
			size -= tx_available;
    9ce4:	ldr	r0, [sp, #0]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    9ce6:	adds	r3, #1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    9ce8:	ldr	r1, [pc, #168]	; (9d94 <usb_serial_write.part.1+0x188>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    9cea:	uxtb	r3, r3
    9cec:	cmp	r3, #3
    9cee:	it	hi
    9cf0:	movhi	r3, #0
    9cf2:	strb	r3, [r2, #0]
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    9cf4:	movs	r2, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
    9cf6:	ldrh.w	r3, [r8]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    9cfa:	strh.w	r2, [r8]
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
    9cfe:	subs	r0, r0, r3
    9d00:	str	r0, [sp, #0]
			sent += tx_available;
    9d02:	ldr	r0, [sp, #4]
    9d04:	add	r0, r3
    9d06:	str	r0, [sp, #4]
			data += tx_available;
    9d08:	ldr	r0, [sp, #8]
    9d0a:	add	r0, r3
    9d0c:	str	r0, [sp, #8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    9d0e:	str.w	r2, [r1, #132]	; 0x84
			tx_available -= size;
			sent += size;
			size = 0;
			timer_start_oneshot();
		}
		asm("dsb" ::: "memory");
    9d12:	dsb	sy
		tx_noautoflush = 0;
    9d16:	movs	r3, #0
    9d18:	strb	r3, [r5, #0]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9d1a:	ldr	r3, [sp, #0]
    9d1c:	cmp	r3, #0
    9d1e:	bne.n	9c30 <usb_serial_write.part.1+0x24>
    9d20:	ldr	r0, [sp, #4]
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    9d22:	add	sp, #20
    9d24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    9d28:	ldr	r4, [sp, #0]
    9d2a:	str	r3, [sp, #12]
			tx_available -= size;
			sent += size;
    9d2c:	ldr	r3, [sp, #4]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    9d2e:	mov	r2, r4
    9d30:	ldr	r1, [sp, #8]
			tx_available -= size;
			sent += size;
    9d32:	add	r3, r4
    9d34:	str	r3, [sp, #4]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    9d36:	bl	9920 <memcpy>
			tx_available -= size;
    9d3a:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9d3c:	mov.w	r1, #3221225472	; 0xc0000000
    9d40:	ldr	r2, [pc, #80]	; (9d94 <usb_serial_write.part.1+0x188>)
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
			sent += size;
			size = 0;
    9d42:	movs	r0, #0
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    9d44:	subs	r3, r3, r4
			sent += size;
			size = 0;
    9d46:	str	r0, [sp, #0]
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    9d48:	strh.w	r3, [r8]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9d4c:	str.w	r1, [r2, #132]	; 0x84
    9d50:	b.n	9d12 <usb_serial_write.part.1+0x106>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    9d52:	mov.w	r3, #2048	; 0x800
    9d56:	ldr	r2, [pc, #40]	; (9d80 <usb_serial_write.part.1+0x174>)
				transmit_previous_timeout = 0;
    9d58:	strb.w	r0, [sl]
    9d5c:	ldrb	r4, [r2, #0]
    9d5e:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    9d60:	strh.w	r3, [r8]
    9d64:	b.n	9c94 <usb_serial_write.part.1+0x88>
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    9d66:	movs	r3, #1
				return sent;
    9d68:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    9d6a:	strb	r3, [r1, #0]
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    9d6c:	add	sp, #20
    9d6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9d72:	ldr	r0, [sp, #0]
    9d74:	b.n	9d22 <usb_serial_write.part.1+0x116>
    9d76:	nop
    9d78:	.word	0x20018bd2
    9d7c:	.word	0x20018b9c
    9d80:	.word	0x20018bd1
    9d84:	.word	0x20003bc0
    9d88:	.word	0x20018bd0
    9d8c:	.word	0x20003c40
    9d90:	.word	0xe000ef70
    9d94:	.word	0x402e0000
    9d98:	.word	0x20018bbe
    9d9c:	.word	0x20018bd4

00009da0 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    9da0:	bx	lr
    9da2:	nop

00009da4 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    9da4:	ldr	r3, [pc, #196]	; (9e6c <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    9da6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    9daa:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    9dac:	ldr	r7, [pc, #192]	; (9e70 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    9dae:	cmp	r3, #0
    9db0:	beq.n	9e5c <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    9db2:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    9db6:	ldr.w	r8, [pc, #236]	; 9ea4 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    9dba:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    9dbc:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9dc0:	movs	r1, #0
    9dc2:	movs	r2, #128	; 0x80
    9dc4:	ldr	r0, [pc, #172]	; (9e74 <usb_serial_configure+0xd0>)
	tx_head = 0;
    9dc6:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    9dc8:	ldr	r6, [pc, #172]	; (9e78 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9dca:	bl	c86c <memset>
	tx_head = 0;
    9dce:	ldr	r4, [pc, #172]	; (9e7c <usb_serial_configure+0xd8>)
	tx_available = 0;
    9dd0:	ldr	r3, [pc, #172]	; (9e80 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9dd2:	mov	r1, r5
    9dd4:	mov.w	r2, #256	; 0x100
    9dd8:	ldr	r0, [pc, #168]	; (9e84 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    9dda:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    9ddc:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    9dde:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9de0:	bl	c86c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    9de4:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9de6:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    9de8:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9dea:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    9dec:	str	r5, [r6, #8]
    9dee:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    9df0:	ldr	r1, [pc, #148]	; (9e88 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    9df2:	ldr	r6, [pc, #152]	; (9e8c <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    9df4:	ldr	r0, [pc, #152]	; (9e90 <usb_serial_configure+0xec>)
	rx_available = 0;
    9df6:	ldr.w	lr, [pc, #176]	; 9ea8 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    9dfa:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9dfc:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    9dfe:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9e00:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    9e02:	str	r5, [r6, #0]
    9e04:	str	r5, [r6, #4]
    9e06:	str	r5, [r6, #8]
    9e08:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    9e0a:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9e0e:	bl	acac <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9e12:	ldrh.w	r1, [r8]
    9e16:	mov	r2, r5
    9e18:	ldr	r3, [pc, #120]	; (9e94 <usb_serial_configure+0xf0>)
    9e1a:	movs	r0, #3
    9e1c:	bl	ac48 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    9e20:	mov	r3, r5
    9e22:	ldrh	r1, [r7, #0]
    9e24:	movs	r2, #1
    9e26:	movs	r0, #4
    9e28:	bl	acac <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    9e2c:	mov	r0, r4
    9e2e:	adds	r4, #1
    9e30:	bl	9a54 <rx_queue_transfer>
    9e34:	cmp	r4, #8
    9e36:	bne.n	9e2c <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    9e38:	ldr	r3, [pc, #92]	; (9e98 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    9e3a:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    9e3c:	ldr	r0, [pc, #92]	; (9e9c <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    9e3e:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    9e40:	ldr	r4, [pc, #92]	; (9ea0 <usb_serial_configure+0xfc>)
    9e42:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    9e44:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    9e48:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    9e4c:	ldr.w	r2, [r3, #328]	; 0x148
    9e50:	orr.w	r2, r2, #16777216	; 0x1000000
    9e54:	str.w	r2, [r3, #328]	; 0x148
    9e58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    9e5c:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    9e5e:	ldr.w	r8, [pc, #68]	; 9ea4 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    9e62:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    9e64:	strh.w	r3, [r8]
    9e68:	b.n	9dc0 <usb_serial_configure+0x1c>
    9e6a:	nop
    9e6c:	.word	0x20018bd5
    9e70:	.word	0x20018bc0
    9e74:	.word	0x20003bc0
    9e78:	.word	0x2001868c
    9e7c:	.word	0x20018bd1
    9e80:	.word	0x20018bbe
    9e84:	.word	0x20003ac0
    9e88:	.word	0x20018bcd
    9e8c:	.word	0x2001869c
    9e90:	.word	0x20018bce
    9e94:	.word	0x00009ac1
    9e98:	.word	0x402e0000
    9e9c:	.word	0x20018bac
    9ea0:	.word	0x00009b75
    9ea4:	.word	0x20018bbc
    9ea8:	.word	0x20018688

00009eac <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    9eac:	ldr	r3, [pc, #196]	; (9f74 <usb_serial_read+0xc8>)
    9eae:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    9eb2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    9eb6:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    9eb8:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    9eba:	ldr	r3, [pc, #188]	; (9f78 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    9ebc:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    9ebe:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    9ec0:	cmp	r1, #0
    9ec2:	beq.n	9f6c <usb_serial_read+0xc0>
    9ec4:	ldr	r3, [pc, #180]	; (9f7c <usb_serial_read+0xd0>)
    9ec6:	uxtb	r4, r4
    9ec8:	ldrb	r3, [r3, #0]
    9eca:	cmp	r4, r3
    9ecc:	beq.n	9f70 <usb_serial_read+0xc4>
    9ece:	mov	sl, r0
    9ed0:	movs	r7, #0
    9ed2:	ldr.w	fp, [pc, #192]	; 9f94 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    9ed6:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    9ed8:	ldr	r3, [pc, #164]	; (9f80 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    9eda:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9ede:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    9ee0:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    9ee2:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    9ee4:	ldr	r3, [pc, #156]	; (9f84 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    9ee6:	it	cs
    9ee8:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    9eea:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    9eec:	ldr	r3, [pc, #144]	; (9f80 <usb_serial_read+0xd4>)
    9eee:	ldrh.w	lr, [r3, r5, lsl #1]
    9ef2:	ldr	r3, [pc, #148]	; (9f88 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9ef4:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    9ef8:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9efc:	ldr	r3, [pc, #140]	; (9f8c <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    9efe:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9f02:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    9f04:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9f06:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    9f08:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    9f0a:	bcs.n	9f40 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    9f0c:	add.w	r1, lr, r5, lsl #9
    9f10:	mov	r2, r8
    9f12:	add	r1, r3
    9f14:	bl	9920 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    9f18:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    9f1a:	ldr.w	r1, [fp]
    9f1e:	mov	r0, r9
			rx_index[i] += len;
    9f20:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    9f24:	rsb	r1, r8, r1
			rx_index[i] += len;
    9f28:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    9f2a:	str.w	r1, [fp]
			rx_index[i] += len;
    9f2e:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9f32:	ldr	r3, [pc, #92]	; (9f90 <usb_serial_read+0xe4>)
    9f34:	mov.w	r2, #131072	; 0x20000
    9f38:	str	r2, [r3, #0]
	return count;
}
    9f3a:	add	sp, #12
    9f3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9f40:	bl	9920 <memcpy>
			p += avail;
			rx_available -= avail;
    9f44:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    9f48:	uxtb	r3, r4
			rx_queue_transfer(i);
    9f4a:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    9f4c:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    9f4e:	add	sl, r6
			rx_available -= avail;
    9f50:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    9f54:	ldr	r2, [pc, #32]	; (9f78 <usb_serial_read+0xcc>)
    9f56:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    9f58:	bl	9a54 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    9f5c:	cmp	r9, r7
    9f5e:	bls.n	9f68 <usb_serial_read+0xbc>
    9f60:	ldr	r3, [pc, #24]	; (9f7c <usb_serial_read+0xd0>)
    9f62:	ldrb	r3, [r3, #0]
    9f64:	cmp	r4, r3
    9f66:	bne.n	9ed6 <usb_serial_read+0x2a>
    9f68:	mov	r0, r7
    9f6a:	b.n	9f32 <usb_serial_read+0x86>
    9f6c:	mov	r0, r1
    9f6e:	b.n	9f32 <usb_serial_read+0x86>
    9f70:	movs	r0, #0
    9f72:	b.n	9f32 <usb_serial_read+0x86>
    9f74:	.word	0xe000e18c
    9f78:	.word	0x20018bce
    9f7c:	.word	0x20018bcd
    9f80:	.word	0x2001869c
    9f84:	.word	0x200186ac
    9f88:	.word	0x2001868c
    9f8c:	.word	0x20002ac0
    9f90:	.word	0xe000e10c
    9f94:	.word	0x20018688

00009f98 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    9f98:	ldr	r3, [pc, #44]	; (9fc8 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    9f9a:	ldr	r2, [pc, #48]	; (9fcc <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    9f9c:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    9f9e:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    9fa0:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    9fa2:	cmp	r3, r2
    9fa4:	beq.n	9fc2 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    9fa6:	adds	r3, #1
	uint32_t i = rx_list[tail];
    9fa8:	ldr	r0, [pc, #36]	; (9fd0 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    9faa:	ldr	r2, [pc, #40]	; (9fd4 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    9fac:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    9fae:	ldr	r1, [pc, #40]	; (9fd8 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    9fb0:	it	cs
    9fb2:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    9fb4:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    9fb6:	ldrh.w	r1, [r1, r3, lsl #1]
    9fba:	add.w	r3, r2, r3, lsl #9
    9fbe:	ldrb	r0, [r3, r1]
    9fc0:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    9fc2:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    9fc6:	bx	lr
    9fc8:	.word	0x20018bce
    9fcc:	.word	0x20018bcd
    9fd0:	.word	0x200186ac
    9fd4:	.word	0x20002ac0
    9fd8:	.word	0x2001869c

00009fdc <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	uint32_t n = rx_available;
    9fdc:	ldr	r3, [pc, #12]	; (9fec <usb_serial_available+0x10>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
    9fde:	push	{r4, lr}
	uint32_t n = rx_available;
    9fe0:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    9fe2:	cbnz	r4, 9fe8 <usb_serial_available+0xc>
    9fe4:	bl	b65c <yield>
	return n;
}
    9fe8:	mov	r0, r4
    9fea:	pop	{r4, pc}
    9fec:	.word	0x20018688

00009ff0 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    9ff0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    9ff4:	ldr	r6, [pc, #84]	; (a04c <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    9ff6:	ldr	r5, [pc, #88]	; (a050 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    9ff8:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    9ffa:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    9ffc:	uxtb	r4, r4
	while (tail != rx_head) {
    9ffe:	cmp	r4, r3
    a000:	beq.n	a046 <usb_serial_flush_input+0x56>
    a002:	ldr.w	r9, [pc, #84]	; a058 <usb_serial_flush_input+0x68>
    a006:	ldr.w	fp, [pc, #84]	; a05c <usb_serial_flush_input+0x6c>
    a00a:	ldr.w	r8, [pc, #84]	; a060 <usb_serial_flush_input+0x70>
    a00e:	ldr	r7, [pc, #68]	; (a054 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    a010:	adds	r4, #1
    a012:	cmp	r4, #8
    a014:	uxtb.w	sl, r4
    a018:	bls.n	a01e <usb_serial_flush_input+0x2e>
    a01a:	movs	r4, #0
    a01c:	mov	sl, r4
		uint32_t i = rx_list[tail];
    a01e:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a022:	ldr.w	r2, [fp]
    a026:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    a02a:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    a02c:	ldrh.w	r1, [r7, r1, lsl #1]
    a030:	subs	r3, r3, r1
    a032:	subs	r3, r2, r3
    a034:	str.w	r3, [fp]
		rx_queue_transfer(i);
    a038:	bl	9a54 <rx_queue_transfer>
		rx_tail = tail;
    a03c:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    a040:	ldrb	r3, [r5, #0]
    a042:	cmp	r4, r3
    a044:	bne.n	a010 <usb_serial_flush_input+0x20>
    a046:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a04a:	nop
    a04c:	.word	0x20018bce
    a050:	.word	0x20018bcd
    a054:	.word	0x2001869c
    a058:	.word	0x200186ac
    a05c:	.word	0x20018688
    a060:	.word	0x2001868c

0000a064 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    a064:	push	{lr}
    a066:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    a068:	movs	r1, #1
    a06a:	add.w	r0, sp, #7
    a06e:	bl	9eac <usb_serial_read>
    a072:	cbz	r0, a07e <usb_serial_getchar+0x1a>
    a074:	ldrb.w	r0, [sp, #7]
	return -1;
}
    a078:	add	sp, #12
    a07a:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    a07e:	mov.w	r0, #4294967295
    a082:	b.n	a078 <usb_serial_getchar+0x14>

0000a084 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a084:	ldr	r3, [pc, #36]	; (a0ac <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    a086:	push	{lr}
    a088:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a08a:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    a08c:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a090:	cbnz	r3, a09c <usb_serial_putchar+0x18>
    a092:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    a096:	add	sp, #12
    a098:	ldr.w	pc, [sp], #4
    a09c:	movs	r1, #1
    a09e:	add.w	r0, sp, #7
    a0a2:	bl	9c0c <usb_serial_write.part.1>
    a0a6:	add	sp, #12
    a0a8:	ldr.w	pc, [sp], #4
    a0ac:	.word	0x20018bd4

0000a0b0 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a0b0:	ldr	r3, [pc, #16]	; (a0c4 <usb_serial_write+0x14>)
    a0b2:	ldrb	r3, [r3, #0]
    a0b4:	and.w	r2, r3, #255	; 0xff
    a0b8:	cbz	r3, a0be <usb_serial_write+0xe>
    a0ba:	b.w	9c0c <usb_serial_write.part.1>
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    a0be:	mov	r0, r2
    a0c0:	bx	lr
    a0c2:	nop
    a0c4:	.word	0x20018bd4

0000a0c8 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    a0c8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a0cc:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    a0ce:	ldr.w	r8, [pc, #68]	; a114 <usb_serial_write_buffer_free+0x4c>
    a0d2:	movs	r3, #1
    a0d4:	ldr	r5, [pc, #52]	; (a10c <usb_serial_write_buffer_free+0x44>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    a0d6:	mov	r7, r4
    a0d8:	ldr	r6, [pc, #52]	; (a110 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    a0da:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    a0de:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a0e0:	mov	r0, r5
    a0e2:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    a0e4:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a0e6:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a0ea:	beq.n	a0f8 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a0ec:	bl	ad90 <usb_transfer_status>
    a0f0:	lsls	r3, r0, #24
    a0f2:	it	pl
    a0f4:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a0f8:	cmp	r4, #4
    a0fa:	bne.n	a0de <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	asm("dsb" ::: "memory");
    a0fc:	dsb	sy
	tx_noautoflush = 0;
    a100:	movs	r3, #0
	return sum;
}
    a102:	mov	r0, r7
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	asm("dsb" ::: "memory");
	tx_noautoflush = 0;
    a104:	strb.w	r3, [r8]
	return sum;
}
    a108:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a10c:	.word	0x20003bc0
    a110:	.word	0x20018bd1
    a114:	.word	0x20018bd2

0000a118 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    a118:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    a11c:	ldr	r3, [pc, #128]	; (a1a0 <usb_serial_flush_output+0x88>)
    a11e:	ldrb	r3, [r3, #0]
    a120:	cbz	r3, a128 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    a122:	ldr	r5, [pc, #128]	; (a1a4 <usb_serial_flush_output+0x8c>)
    a124:	ldrh	r2, [r5, #0]
    a126:	cbnz	r2, a12c <usb_serial_flush_output+0x14>
    a128:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a12c:	ldr.w	r8, [pc, #136]	; a1b8 <usb_serial_flush_output+0xa0>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a130:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a134:	ldr	r6, [pc, #112]	; (a1a8 <usb_serial_flush_output+0x90>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a136:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    a13a:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a13e:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a140:	ldr	r4, [pc, #104]	; (a1ac <usb_serial_flush_output+0x94>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a142:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a144:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a148:	ldr	r7, [pc, #100]	; (a1b0 <usb_serial_flush_output+0x98>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a14a:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a14e:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a150:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a154:	mov	r1, r4
    a156:	bl	ad14 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a15a:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a15e:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    a162:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a166:	ldr	r3, [pc, #76]	; (a1b4 <usb_serial_flush_output+0x9c>)
    a168:	str	r1, [r3, #0]
		location += 32;
    a16a:	adds	r1, #32
	} while (location < end_addr);
    a16c:	cmp	r2, r1
    a16e:	bhi.n	a168 <usb_serial_flush_output+0x50>
	asm("dsb");
    a170:	dsb	sy
	asm("isb");
    a174:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a178:	movs	r0, #4
    a17a:	mov	r1, r6
    a17c:	bl	ad44 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a180:	ldrb.w	r3, [r8]
    a184:	ldr	r2, [pc, #48]	; (a1b8 <usb_serial_flush_output+0xa0>)
    a186:	adds	r3, #1
    a188:	uxtb	r3, r3
    a18a:	cmp	r3, #3
    a18c:	it	hi
    a18e:	movhi	r3, #0
    a190:	strb	r3, [r2, #0]
	tx_available = 0;
    a192:	movs	r3, #0
    a194:	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    a196:	dsb	sy
	tx_noautoflush = 0;
    a19a:	strb	r3, [r7, #0]
    a19c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a1a0:	.word	0x20018bd4
    a1a4:	.word	0x20018bbe
    a1a8:	.word	0x20003bc0
    a1ac:	.word	0x20003c40
    a1b0:	.word	0x20018bd2
    a1b4:	.word	0xe000ef70
    a1b8:	.word	0x20018bd1

0000a1bc <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a1bc:	ldr	r2, [pc, #600]	; (a418 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a1be:	ldr	r3, [pc, #604]	; (a41c <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a1c0:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    a1c2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    a1c6:	ldr	r4, [pc, #600]	; (a420 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a1c8:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a1cc:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a1ce:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a1d0:	bls.n	a20c <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a1d2:	ldr	r3, [pc, #592]	; (a424 <set_arm_clock+0x268>)
    a1d4:	cmp	r0, r3
    a1d6:	bls.w	a404 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a1da:	ldr	r3, [pc, #588]	; (a428 <set_arm_clock+0x26c>)
    a1dc:	movw	r5, #1575	; 0x627
    a1e0:	ldr	r7, [pc, #584]	; (a42c <set_arm_clock+0x270>)
    a1e2:	add	r3, r0
    a1e4:	ldr	r4, [pc, #584]	; (a430 <set_arm_clock+0x274>)
    a1e6:	lsrs	r2, r3, #8
    a1e8:	umull	r3, r2, r7, r2
    a1ec:	lsrs	r3, r2, #7
    a1ee:	add.w	r3, r3, r3, lsl #2
    a1f2:	add.w	r2, r3, r3, lsl #2
    a1f6:	addw	r3, r2, #1250	; 0x4e2
    a1fa:	cmp	r3, r5
    a1fc:	it	cs
    a1fe:	movcs	r3, r5
    a200:	sub.w	r3, r3, #800	; 0x320
    a204:	umull	r3, r5, r4, r3
    a208:	lsrs	r5, r5, #3
    a20a:	b.n	a216 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    a20c:	ldr	r5, [pc, #548]	; (a434 <set_arm_clock+0x278>)
    a20e:	cmp	r0, r5
    a210:	ite	ls
    a212:	movls	r5, #6
    a214:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a216:	ldr	r2, [pc, #516]	; (a41c <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a218:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a21c:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a220:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a222:	orr.w	r3, r3, #192	; 0xc0
    a226:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a22a:	bcs.n	a242 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a22c:	ldr	r3, [pc, #496]	; (a420 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a22e:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a232:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a234:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    a236:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a238:	ldr	r3, [r2, #0]
    a23a:	cmp	r3, #0
    a23c:	bge.n	a238 <set_arm_clock+0x7c>
    a23e:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a242:	ands.w	r3, lr, #33554432	; 0x2000000
    a246:	bne.n	a2ac <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a248:	ldr	r4, [pc, #492]	; (a438 <set_arm_clock+0x27c>)
    a24a:	ldr	r2, [pc, #496]	; (a43c <set_arm_clock+0x280>)
    a24c:	ldr.w	ip, [r4, #16]
    a250:	mov	r4, r2
    a252:	and.w	r2, ip, r2
    a256:	cmp	r2, r4
    a258:	itet	eq
    a25a:	moveq.w	r3, #402653184	; 0x18000000
    a25e:	movne.w	r2, #4096	; 0x1000
    a262:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a264:	eor.w	r4, lr, r3
    a268:	tst.w	r4, #939524096	; 0x38000000
    a26c:	beq.n	a280 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a26e:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a272:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    a276:	ldr	r4, [pc, #420]	; (a41c <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a278:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    a27c:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a280:	eor.w	r3, r1, r2
    a284:	tst.w	r3, #12288	; 0x3000
    a288:	beq.n	a29c <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a28a:	ldr	r3, [pc, #400]	; (a41c <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a28c:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a290:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a292:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a294:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a296:	ldr	r3, [r2, #72]	; 0x48
    a298:	lsls	r4, r3, #28
    a29a:	bmi.n	a296 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a29c:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a2a0:	ldr	r2, [pc, #376]	; (a41c <set_arm_clock+0x260>)
    a2a2:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a2a6:	ldr	r3, [r2, #72]	; 0x48
    a2a8:	lsls	r1, r3, #26
    a2aa:	bmi.n	a2a6 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    a2ac:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a2ae:	ldr	r4, [pc, #400]	; (a440 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    a2b0:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a2b2:	mul.w	r3, r1, r2
    a2b6:	mul.w	r3, r0, r3
    a2ba:	cmp	r3, r4
    a2bc:	bhi.n	a2d2 <set_arm_clock+0x116>
		if (div_arm < 8) {
    a2be:	cmp	r2, #7
    a2c0:	bhi.w	a3ee <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    a2c4:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a2c6:	mul.w	r3, r1, r2
    a2ca:	mul.w	r3, r0, r3
    a2ce:	cmp	r3, r4
    a2d0:	bls.n	a2be <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a2d2:	ldr	r0, [pc, #368]	; (a444 <set_arm_clock+0x288>)
    a2d4:	ldr	r4, [pc, #368]	; (a448 <set_arm_clock+0x28c>)
    a2d6:	add	r0, r3
    a2d8:	umull	r0, r3, r4, r0
    a2dc:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    a2de:	cmp	r3, #108	; 0x6c
    a2e0:	bhi.w	a3fa <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    a2e4:	cmp	r3, #53	; 0x35
    a2e6:	bhi.w	a408 <set_arm_clock+0x24c>
    a2ea:	ldr.w	r8, [pc, #392]	; a474 <set_arm_clock+0x2b8>
    a2ee:	movs	r3, #54	; 0x36
    a2f0:	ldr	r0, [pc, #344]	; (a44c <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a2f2:	ldr.w	ip, [pc, #324]	; a438 <set_arm_clock+0x27c>
    a2f6:	ldr	r4, [pc, #344]	; (a450 <set_arm_clock+0x294>)
    a2f8:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a2fc:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a300:	and.w	r4, r9, r4
    a304:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a306:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a30a:	beq.n	a324 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a30c:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a310:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a314:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a316:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a31a:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a31e:	ldr	r3, [r4, #0]
    a320:	cmp	r3, #0
    a322:	bge.n	a31e <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a324:	ldr.w	ip, [pc, #244]	; a41c <set_arm_clock+0x260>
    a328:	subs	r2, #1
    a32a:	ldr.w	r3, [ip, #16]
    a32e:	and.w	r3, r3, #7
    a332:	cmp	r3, r2
    a334:	beq.n	a346 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a336:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a33a:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a33c:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a340:	ldr	r3, [r4, #72]	; 0x48
    a342:	lsls	r3, r3, #15
    a344:	bmi.n	a340 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a346:	subs	r1, #1
    a348:	lsls	r1, r1, #10
    a34a:	eor.w	r3, lr, r1
    a34e:	tst.w	r3, #7168	; 0x1c00
    a352:	beq.n	a36e <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    a354:	ldr	r3, [pc, #196]	; (a41c <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a356:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a35a:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a35e:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a360:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    a364:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a368:	ldr	r3, [r2, #72]	; 0x48
    a36a:	lsls	r1, r3, #30
    a36c:	bmi.n	a368 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a36e:	ldr	r3, [pc, #228]	; (a454 <set_arm_clock+0x298>)
    a370:	ldr	r1, [pc, #228]	; (a458 <set_arm_clock+0x29c>)
    a372:	add	r3, r0
    a374:	lsrs	r3, r3, #7
    a376:	umull	r3, r1, r1, r3
    a37a:	lsrs	r1, r1, #12
    a37c:	cmp	r1, #4
    a37e:	it	cs
    a380:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a382:	subs	r3, r1, #1
    a384:	lsls	r3, r3, #8
    a386:	eor.w	r2, lr, r3
    a38a:	tst.w	r2, #768	; 0x300
    a38e:	beq.n	a3a0 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a390:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a394:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a398:	ldr	r2, [pc, #128]	; (a41c <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a39a:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a39e:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a3a0:	ldr	r3, [pc, #120]	; (a41c <set_arm_clock+0x260>)
    a3a2:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a3a4:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a3a6:	bic.w	r4, r4, #33554432	; 0x2000000
    a3aa:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a3ac:	ldr	r3, [r2, #72]	; 0x48
    a3ae:	lsls	r3, r3, #26
    a3b0:	bmi.n	a3ac <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a3b2:	ldr	r3, [pc, #168]	; (a45c <set_arm_clock+0x2a0>)
    a3b4:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a3b8:	ldr	r4, [pc, #164]	; (a460 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a3ba:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a3bc:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a3c0:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a3c2:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a3c6:	ldr	r4, [pc, #156]	; (a464 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a3c8:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a3cc:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a3d0:	ldr	r2, [pc, #148]	; (a468 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a3d2:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a3d4:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a3d6:	bcs.n	a3ea <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a3d8:	ldr	r3, [pc, #68]	; (a420 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a3da:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a3de:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a3e0:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    a3e2:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a3e4:	ldr	r3, [r2, #0]
    a3e6:	cmp	r3, #0
    a3e8:	bge.n	a3e4 <set_arm_clock+0x228>
	}

	return frequency;
}
    a3ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    a3ee:	cmp	r1, #4
    a3f0:	bhi.w	a2d2 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    a3f4:	adds	r1, #1
				div_arm = 1;
    a3f6:	movs	r2, #1
    a3f8:	b.n	a2b2 <set_arm_clock+0xf6>
    a3fa:	ldr.w	r8, [pc, #124]	; a478 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    a3fe:	movs	r3, #108	; 0x6c
    a400:	ldr	r0, [pc, #104]	; (a46c <set_arm_clock+0x2b0>)
    a402:	b.n	a2f2 <set_arm_clock+0x136>
    a404:	movs	r5, #18
    a406:	b.n	a216 <set_arm_clock+0x5a>
    a408:	ldr	r0, [pc, #100]	; (a470 <set_arm_clock+0x2b4>)
    a40a:	ldr.w	r8, [pc, #112]	; a47c <set_arm_clock+0x2c0>
    a40e:	mul.w	r0, r0, r3
    a412:	orr.w	r8, r3, r8
    a416:	b.n	a2f2 <set_arm_clock+0x136>
    a418:	.word	0x1f78a400
    a41c:	.word	0x400fc000
    a420:	.word	0x40080000
    a424:	.word	0x23c34600
    a428:	.word	0xdc3cba00
    a42c:	.word	0x004cb223
    a430:	.word	0x51eb851f
    a434:	.word	0x016e3600
    a438:	.word	0x400d8000
    a43c:	.word	0x80003040
    a440:	.word	0x269fb1ff
    a444:	.word	0x005b8d80
    a448:	.word	0x165e9f81
    a44c:	.word	0x269fb200
    a450:	.word	0x8001307f
    a454:	.word	0x08f0d17f
    a458:	.word	0x00e5109f
    a45c:	.word	0x431bde83
    a460:	.word	0x20001f24
    a464:	.word	0x20001f20
    a468:	.word	0x200186c8
    a46c:	.word	0x4d3f6400
    a470:	.word	0x00b71b00
    a474:	.word	0x80002036
    a478:	.word	0x8000206c
    a47c:	.word	0x80002000

0000a480 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a480:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    a482:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a484:	cbz	r3, a48e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    a486:	ldr	r3, [r2, #4]
    a488:	orr.w	r3, r3, #32768	; 0x8000
    a48c:	str	r3, [r2, #4]
	}
	__disable_irq();
    a48e:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    a490:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    a492:	cbz	r4, a4ec <schedule_transfer+0x6c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    a494:	ldr	r3, [pc, #112]	; (a508 <schedule_transfer+0x88>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    a496:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    a498:	ldr.w	r4, [r3, #432]	; 0x1b0
    a49c:	tst	r4, r1
    a49e:	bne.n	a4cc <schedule_transfer+0x4c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    a4a0:	ldr	r6, [pc, #104]	; (a50c <schedule_transfer+0x8c>)
    a4a2:	ldr	r7, [r6, #0]
    a4a4:	b.n	a4b0 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    a4a6:	ldr	r4, [r6, #0]
    a4a8:	subs	r4, r4, r7
    a4aa:	cmp.w	r4, #2400	; 0x960
    a4ae:	bcs.n	a4c8 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    a4b0:	ldr.w	r4, [r3, #320]	; 0x140
    a4b4:	orr.w	r4, r4, #16384	; 0x4000
    a4b8:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    a4bc:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    a4c0:	ldr.w	r4, [r3, #320]	; 0x140
    a4c4:	lsls	r4, r4, #17
    a4c6:	bpl.n	a4a6 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    a4c8:	ands	r5, r1
    a4ca:	beq.n	a4d4 <schedule_transfer+0x54>
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    a4cc:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    a4ce:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    a4d0:	pop	{r4, r5, r6, r7}
    a4d2:	bx	lr
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    a4d4:	ldr	r4, [pc, #48]	; (a508 <schedule_transfer+0x88>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
    a4d6:	str	r2, [r0, #8]
		endpoint->status = 0;
    a4d8:	str	r5, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
    a4da:	ldr.w	r3, [r4, #432]	; 0x1b0
    a4de:	orrs	r1, r3
    a4e0:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    a4e4:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    a4e6:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    a4e8:	pop	{r4, r5, r6, r7}
    a4ea:	bx	lr
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
    a4ec:	ldr	r5, [pc, #24]	; (a508 <schedule_transfer+0x88>)
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    a4ee:	str	r2, [r0, #8]
	endpoint->status = 0;
    a4f0:	str	r4, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    a4f2:	ldr.w	r3, [r5, #432]	; 0x1b0
    a4f6:	orrs	r1, r3
    a4f8:	str.w	r1, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    a4fc:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    a4fe:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    a500:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    a502:	pop	{r4, r5, r6, r7}
    a504:	bx	lr
    a506:	nop
    a508:	.word	0x402e0000
    a50c:	.word	0xe0001004

0000a510 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    a510:	push	{r4, r5, r6, lr}
    a512:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    a514:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    a516:	cbz	r0, a53e <run_callbacks+0x2e>
    a518:	mov	r2, r0
    a51a:	movs	r4, #0
    a51c:	b.n	a526 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    a51e:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    a520:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    a522:	cmp	r2, #1
    a524:	beq.n	a540 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    a526:	ldr	r3, [r2, #4]
    a528:	ands.w	r3, r3, #128	; 0x80
    a52c:	beq.n	a51e <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    a52e:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    a530:	cbz	r4, a53e <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    a532:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    a534:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    a536:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    a538:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    a53a:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    a53c:	bne.n	a532 <run_callbacks+0x22>
    a53e:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    a540:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    a542:	str	r3, [r6, #52]	; 0x34
			break;
    a544:	b.n	a530 <run_callbacks+0x20>
    a546:	nop

0000a548 <endpoint0_transmit.constprop.1>:
	}
	printf("endpoint 0 stall\n");
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    a548:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    a54a:	cbnz	r1, a586 <endpoint0_transmit.constprop.1+0x3e>
    a54c:	ldr	r4, [pc, #132]	; (a5d4 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a54e:	ldr	r1, [pc, #136]	; (a5d8 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a550:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a552:	ldr	r3, [pc, #136]	; (a5dc <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a554:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a556:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a55a:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a55c:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    a55e:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    a560:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a562:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    a564:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a566:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    a56a:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a56e:	ldr	r5, [pc, #112]	; (a5e0 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    a570:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a574:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    a576:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a57a:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    a57c:	ldr.w	r3, [r2, #432]	; 0x1b0
    a580:	cmp	r3, #0
    a582:	bne.n	a57c <endpoint0_transmit.constprop.1+0x34>
}
    a584:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a586:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a588:	ldr	r3, [pc, #88]	; (a5e4 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a58a:	ldr	r5, [pc, #80]	; (a5dc <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a58c:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a58e:	ldr	r4, [pc, #68]	; (a5d4 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a590:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    a594:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a596:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a598:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a59a:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    a59e:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a5a0:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a5a4:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a5a6:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a5aa:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a5ae:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    a5b2:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a5b4:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a5b6:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a5ba:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a5be:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a5c2:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a5c4:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a5c6:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    a5ca:	ldr.w	r3, [r2, #432]	; 0x1b0
    a5ce:	cmp	r3, #0
    a5d0:	bne.n	a5ca <endpoint0_transmit.constprop.1+0x82>
    a5d2:	b.n	a54e <endpoint0_transmit.constprop.1+0x6>
    a5d4:	.word	0x20000000
    a5d8:	.word	0x20018c00
    a5dc:	.word	0x402e0000
    a5e0:	.word	0x20017d90
    a5e4:	.word	0x20018be0

0000a5e8 <usb_isr>:
	__builtin_unreachable();
}


void usb_isr(void)
{
    a5e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    a5ec:	ldr	r4, [pc, #728]	; (a8c8 <usb_isr+0x2e0>)
	__builtin_unreachable();
}


void usb_isr(void)
{
    a5ee:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    a5f0:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    a5f4:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    a5f8:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    a5fc:	beq.n	a6c8 <usb_isr+0xe0>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    a5fe:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a602:	cmp	r3, #0
    a604:	beq.n	a6be <usb_isr+0xd6>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a606:	mov.w	fp, #65537	; 0x10001
    a60a:	ldr	r7, [pc, #704]	; (a8cc <usb_isr+0x2e4>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a60c:	mov	r6, r4
    a60e:	ldr.w	r9, [pc, #704]	; a8d0 <usb_isr+0x2e8>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a612:	mov	sl, fp
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    a614:	str.w	r8, [sp]
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    a618:	str.w	r3, [r4, #428]	; 0x1ac
    a61c:	ldr	r2, [r7, #40]	; 0x28
    a61e:	ldr	r1, [r7, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a620:	ldr.w	r3, [r4, #320]	; 0x140
    a624:	orr.w	r3, r3, #8192	; 0x2000
    a628:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    a62c:	ldr.w	r3, [r4, #320]	; 0x140
    a630:	lsls	r0, r3, #18
    a632:	bpl.n	a620 <usb_isr+0x38>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    a634:	ldr.w	r3, [r6, #320]	; 0x140
    a638:	bic.w	r3, r3, #8192	; 0x2000
    a63c:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a640:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    a644:	ldr.w	r5, [r4, #436]	; 0x1b4
    a648:	ands.w	r5, r5, #65537	; 0x10001
    a64c:	bne.n	a644 <usb_isr+0x5c>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a64e:	uxth	r0, r2
    a650:	movw	ip, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    a654:	str.w	r5, [r9]
{
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
    a658:	mov	lr, r1
	switch (setup.wRequestAndType) {
    a65a:	cmp	r0, ip
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    a65c:	ldr	r3, [pc, #624]	; (a8d0 <usb_isr+0x2e8>)
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a65e:	bhi.w	a7c0 <usb_isr+0x1d8>
    a662:	cmp.w	r0, #1664	; 0x680
    a666:	bcs.w	a95e <usb_isr+0x376>
    a66a:	cmp.w	r0, #258	; 0x102
    a66e:	beq.w	a9f0 <usb_isr+0x408>
    a672:	bhi.w	a7fe <usb_isr+0x216>
    a676:	cmp	r0, #128	; 0x80
    a678:	beq.w	aa42 <usb_isr+0x45a>
    a67c:	cmp	r0, #130	; 0x82
    a67e:	bne.w	a7ea <usb_isr+0x202>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    a682:	uxth	r1, r1
    a684:	and.w	r3, r1, #127	; 0x7f
		if (endpoint > 7) break;
    a688:	cmp	r3, #7
    a68a:	bhi.w	a7ea <usb_isr+0x202>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a68e:	lsls	r3, r3, #2
    a690:	ldr	r2, [pc, #576]	; (a8d4 <usb_isr+0x2ec>)
		reply_buffer[0] = 0;
    a692:	ldr	r0, [pc, #580]	; (a8d8 <usb_isr+0x2f0>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a694:	add	r2, r3
    a696:	ldr	r3, [r2, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a698:	lsls	r2, r1, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    a69a:	strb	r5, [r0, #0]
		reply_buffer[1] = 0;
    a69c:	strb	r5, [r0, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a69e:	bpl.w	ab3e <usb_isr+0x556>
    a6a2:	lsls	r3, r3, #15
    a6a4:	bpl.n	a6aa <usb_isr+0xc2>
			reply_buffer[0] = 1;
    a6a6:	movs	r3, #1
    a6a8:	strb	r3, [r0, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    a6aa:	movs	r1, #2
    a6ac:	ldr	r0, [pc, #552]	; (a8d8 <usb_isr+0x2f0>)
    a6ae:	bl	a548 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a6b2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a6b6:	cmp	r3, #0
    a6b8:	bne.n	a618 <usb_isr+0x30>
    a6ba:	ldr.w	r8, [sp]
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    a6be:	ldr	r2, [pc, #520]	; (a8c8 <usb_isr+0x2e0>)
    a6c0:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    a6c4:	cmp	r3, #0
    a6c6:	bne.n	a75c <usb_isr+0x174>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    a6c8:	tst.w	r8, #64	; 0x40
    a6cc:	beq.n	a700 <usb_isr+0x118>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a6ce:	ldr	r3, [pc, #504]	; (a8c8 <usb_isr+0x2e0>)
    a6d0:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a6d4:	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a6d6:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    a6da:	ldr.w	r1, [r3, #444]	; 0x1bc
    a6de:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a6e2:	ldr.w	r4, [r2, #432]	; 0x1b0
    a6e6:	ldr	r3, [pc, #480]	; (a8c8 <usb_isr+0x2e0>)
    a6e8:	cmp	r4, #0
    a6ea:	bne.n	a6e2 <usb_isr+0xfa>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    a6ec:	mov.w	r2, #4294967295
    a6f0:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    a6f4:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    a6f8:	bl	9da0 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    a6fc:	ldr	r3, [pc, #476]	; (a8dc <usb_isr+0x2f4>)
    a6fe:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    a700:	tst.w	r8, #16777216	; 0x1000000
    a704:	beq.n	a70e <usb_isr+0x126>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    a706:	ldr	r3, [pc, #472]	; (a8e0 <usb_isr+0x2f8>)
    a708:	ldr	r3, [r3, #0]
    a70a:	cbz	r3, a70e <usb_isr+0x126>
    a70c:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    a70e:	tst.w	r8, #33554432	; 0x2000000
    a712:	beq.n	a71c <usb_isr+0x134>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    a714:	ldr	r3, [pc, #460]	; (a8e4 <usb_isr+0x2fc>)
    a716:	ldr	r3, [r3, #0]
    a718:	cbz	r3, a71c <usb_isr+0x134>
    a71a:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    a71c:	tst.w	r8, #4
    a720:	beq.n	a734 <usb_isr+0x14c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    a722:	ldr	r3, [pc, #420]	; (a8c8 <usb_isr+0x2e0>)
    a724:	ldr.w	r3, [r3, #388]	; 0x184
    a728:	ands.w	r3, r3, #512	; 0x200
    a72c:	beq.n	a7ba <usb_isr+0x1d2>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    a72e:	ldr	r3, [pc, #440]	; (a8e8 <usb_isr+0x300>)
    a730:	movs	r2, #1
    a732:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    a734:	ldr	r3, [pc, #400]	; (a8c8 <usb_isr+0x2e0>)
    a736:	ldr.w	r2, [r3, #328]	; 0x148
    a73a:	lsls	r2, r2, #24
    a73c:	bpl.n	a756 <usb_isr+0x16e>
    a73e:	tst.w	r8, #128	; 0x80
    a742:	beq.n	a756 <usb_isr+0x16e>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    a744:	ldr	r1, [pc, #420]	; (a8ec <usb_isr+0x304>)
    a746:	ldrb	r2, [r1, #0]
    a748:	cbz	r2, a756 <usb_isr+0x16e>
			if (--usb_reboot_timer == 0) {
    a74a:	subs	r2, #1
    a74c:	uxtb	r2, r2
    a74e:	strb	r2, [r1, #0]
    a750:	cmp	r2, #0
    a752:	beq.w	abda <usb_isr+0x5f2>
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    a756:	add	sp, #12
    a758:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    a75c:	ldr	r1, [pc, #368]	; (a8d0 <usb_isr+0x2e8>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    a75e:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    a762:	ldr	r0, [r1, #0]
    a764:	tst	r3, r0
    a766:	bne.w	ab46 <usb_isr+0x55e>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    a76a:	ldr	r2, [pc, #368]	; (a8dc <usb_isr+0x2f4>)
    a76c:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    a76e:	ands	r5, r3
    a770:	beq.n	a6c8 <usb_isr+0xe0>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    a772:	lsrs	r6, r5, #16
    a774:	beq.n	a796 <usb_isr+0x1ae>
    a776:	ldr	r7, [pc, #340]	; (a8cc <usb_isr+0x2e4>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    a778:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    a77c:	rbit	r4, r6
    a780:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a784:	add.w	r0, r7, r4, lsl #7
					tx &= ~(1<<p);
    a788:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a78c:	adds	r0, #64	; 0x40
    a78e:	bl	a510 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    a792:	bics	r6, r4
    a794:	bne.n	a77c <usb_isr+0x194>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    a796:	uxth	r5, r5
				while(rx) {
    a798:	cmp	r5, #0
    a79a:	beq.n	a6c8 <usb_isr+0xe0>
    a79c:	ldr	r7, [pc, #300]	; (a8cc <usb_isr+0x2e4>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    a79e:	movs	r6, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    a7a0:	rbit	r4, r5
    a7a4:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    a7a8:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    a7ac:	lsl.w	r4, r6, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    a7b0:	bl	a510 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    a7b4:	bics	r5, r4
    a7b6:	bne.n	a7a0 <usb_isr+0x1b8>
    a7b8:	b.n	a6c8 <usb_isr+0xe0>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    a7ba:	ldr	r2, [pc, #300]	; (a8e8 <usb_isr+0x300>)
    a7bc:	strb	r3, [r2, #0]
    a7be:	b.n	a734 <usb_isr+0x14c>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a7c0:	movw	ip, #8225	; 0x2021
    a7c4:	cmp	r0, ip
    a7c6:	beq.w	aaa4 <usb_isr+0x4bc>
    a7ca:	bls.n	a844 <usb_isr+0x25c>
    a7cc:	movw	r3, #8993	; 0x2321
    a7d0:	cmp	r0, r3
    a7d2:	beq.w	a920 <usb_isr+0x338>
    a7d6:	movw	r3, #63680	; 0xf8c0
    a7da:	cmp	r0, r3
    a7dc:	beq.w	a94c <usb_isr+0x364>
    a7e0:	movw	r3, #8737	; 0x2221
    a7e4:	cmp	r0, r3
    a7e6:	beq.w	a90c <usb_isr+0x324>
		}
		break;
#endif
	}
	printf("endpoint 0 stall\n");
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    a7ea:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a7ee:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a7f2:	cmp	r3, #0
    a7f4:	bne.w	a618 <usb_isr+0x30>
    a7f8:	ldr.w	r8, [sp]
    a7fc:	b.n	a6be <usb_isr+0xd6>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a7fe:	movw	r3, #770	; 0x302
    a802:	cmp	r0, r3
    a804:	beq.w	aa52 <usb_isr+0x46a>
    a808:	cmp.w	r0, #1280	; 0x500
    a80c:	bne.n	a7ea <usb_isr+0x202>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a80e:	ldr	r3, [pc, #224]	; (a8f0 <usb_isr+0x308>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a810:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a812:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a814:	str	r5, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a816:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a818:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a81a:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a81c:	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a820:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a824:	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    a826:	orr.w	r3, r1, #65536	; 0x10000
    a82a:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a82e:	ldr.w	r3, [r4, #432]	; 0x1b0
    a832:	cmp	r3, #0
    a834:	bne.n	a82e <usb_isr+0x246>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    a836:	lsrs	r3, r2, #16
    a838:	lsls	r3, r3, #25
    a83a:	orr.w	r3, r3, #16777216	; 0x1000000
    a83e:	str.w	r3, [r6, #340]	; 0x154
    a842:	b.n	a7ee <usb_isr+0x206>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a844:	cmp.w	r0, #2176	; 0x880
    a848:	beq.w	ab2c <usb_isr+0x544>
    a84c:	cmp.w	r0, #2304	; 0x900
    a850:	bne.n	a7ea <usb_isr+0x202>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    a852:	ubfx	lr, r2, #16, #8
    a856:	ldr	r2, [pc, #156]	; (a8f4 <usb_isr+0x30c>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a858:	ldr	r0, [pc, #156]	; (a8f8 <usb_isr+0x310>)
		#endif
		#if defined(MTP_INTERFACE)
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    a85a:	mov.w	r8, #128	; 0x80
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    a85e:	strb.w	lr, [r2]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a862:	ldr	r1, [pc, #152]	; (a8fc <usb_isr+0x314>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    a864:	ldr	r2, [pc, #152]	; (a900 <usb_isr+0x318>)
    a866:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a868:	str.w	r0, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a86c:	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    a870:	str.w	r2, [r6, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    a874:	bl	9da4 <usb_serial_configure>
		#endif
		#if defined(MTP_INTERFACE)
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    a878:	mov	r2, r8
    a87a:	mov	r1, r5
    a87c:	ldr	r0, [pc, #132]	; (a904 <usb_isr+0x31c>)
    a87e:	bl	c86c <memset>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    a882:	ldr	r3, [pc, #132]	; (a908 <usb_isr+0x320>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a884:	ldr	r2, [pc, #104]	; (a8f0 <usb_isr+0x308>)
    a886:	movs	r1, #1
		#if defined(MTP_INTERFACE)
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    a888:	str.w	r3, [r7, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    a88c:	add.w	r3, r3, #3154116608	; 0xbc000000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a890:	str.w	r8, [r2, #4]
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    a894:	add.w	r3, r3, #966656	; 0xec000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a898:	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a89a:	str	r1, [r2, #0]
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    a89c:	add.w	r3, r3, #956	; 0x3bc
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a8a0:	str	r5, [r7, #76]	; 0x4c
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    a8a2:	str.w	r3, [r7, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a8a6:	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a8aa:	ldr.w	r1, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a8ae:	ldr	r3, [sp, #4]
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a8b0:	str	r5, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    a8b2:	orr.w	r2, r1, #65536	; 0x10000
    a8b6:	str.w	r2, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a8ba:	str	r5, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    a8bc:	ldr.w	r3, [r4, #432]	; 0x1b0
    a8c0:	cmp	r3, #0
    a8c2:	bne.n	a8bc <usb_isr+0x2d4>
    a8c4:	b.n	a7ee <usb_isr+0x206>
    a8c6:	nop
    a8c8:	.word	0x402e0000
    a8cc:	.word	0x20000000
    a8d0:	.word	0x20017d90
    a8d4:	.word	0x402e01c0
    a8d8:	.word	0x20018680
    a8dc:	.word	0x20017d94
    a8e0:	.word	0x20018bac
    a8e4:	.word	0x20018bb0
    a8e8:	.word	0x20018bd5
    a8ec:	.word	0x20018bd6
    a8f0:	.word	0x20018c00
    a8f4:	.word	0x20018bd4
    a8f8:	.word	0x00cc0002
    a8fc:	.word	0x000200c8
    a900:	.word	0x00c80002
    a904:	.word	0x20000080
    a908:	.word	0xb8c6cf5d
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    a90c:	uxth	r1, r1
    a90e:	cbnz	r1, a920 <usb_isr+0x338>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a910:	ldr	r3, [pc, #740]	; (abf8 <usb_isr+0x610>)
			usb_cdc_line_rtsdtr = setup.wValue;
    a912:	ubfx	r2, r2, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a916:	ldr	r1, [pc, #740]	; (abfc <usb_isr+0x614>)
    a918:	ldr	r0, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a91a:	ldr	r3, [pc, #740]	; (ac00 <usb_isr+0x618>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a91c:	str	r0, [r1, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a91e:	strb	r2, [r3, #0]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a920:	ldr	r3, [pc, #736]	; (ac04 <usb_isr+0x61c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a922:	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    a924:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a926:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a928:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a92a:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a92c:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a92e:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a930:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a934:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a938:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    a93a:	orr.w	r3, r2, #65536	; 0x10000
    a93e:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a942:	ldr.w	r3, [r4, #432]	; 0x1b0
    a946:	cmp	r3, #0
    a948:	bne.n	a942 <usb_isr+0x35a>
    a94a:	b.n	a7ee <usb_isr+0x206>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
#ifdef EXPERIMENTAL_INTERFACE
	  case 0xF8C0: // GET_MS_DESCRIPTOR (bRequest=0xF8 because microsoft_os_string_desc)
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    a94c:	uxth	r3, r1
    a94e:	tst.w	r3, #65280	; 0xff00
    a952:	bne.w	a7ea <usb_isr+0x202>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    a956:	orr.w	r3, r3, #60928	; 0xee00
    a95a:	bfi	lr, r3, #0, #16
		__attribute__((fallthrough));
#endif
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a95e:	ldr	r3, [pc, #680]	; (ac08 <usb_isr+0x620>)
    a960:	ldr	r1, [r3, #4]
    a962:	cmp	r1, #0
    a964:	beq.w	a7ea <usb_isr+0x202>
    a968:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a96a:	uxth.w	r5, lr
    a96e:	b.n	a97a <usb_isr+0x392>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
		__attribute__((fallthrough));
#endif
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a970:	adds	r3, #12
    a972:	ldr	r1, [r3, #4]
    a974:	cmp	r1, #0
    a976:	beq.w	a7ea <usb_isr+0x202>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a97a:	ldrh	r0, [r3, #0]
    a97c:	cmp	r0, r2
    a97e:	bne.n	a970 <usb_isr+0x388>
    a980:	ldrh	r0, [r3, #2]
    a982:	cmp	r0, r5
    a984:	bne.n	a970 <usb_isr+0x388>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    a986:	lsrs	r0, r2, #8
    a988:	cmp	r0, #3
    a98a:	beq.w	abcc <usb_isr+0x5e4>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    a98e:	ldrh	r5, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    a990:	mov.w	lr, lr, lsr #16
    a994:	cmp	r5, lr
    a996:	it	cs
    a998:	movcs	r5, lr

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    a99a:	cmp.w	r2, #512	; 0x200
    a99e:	beq.w	abb0 <usb_isr+0x5c8>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    a9a2:	cmp.w	r2, #1792	; 0x700
    a9a6:	bne.w	aba2 <usb_isr+0x5ba>
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    a9aa:	ldr	r3, [pc, #608]	; (ac0c <usb_isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    a9ac:	mov	r2, r5
    a9ae:	ldr.w	r8, [pc, #620]	; ac1c <usb_isr+0x634>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    a9b2:	ldrb	r0, [r3, #0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    a9b4:	ldr	r1, [pc, #600]	; (ac10 <usb_isr+0x628>)
    a9b6:	ldr	r3, [pc, #604]	; (ac14 <usb_isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    a9b8:	cmp	r0, #0
    a9ba:	it	eq
    a9bc:	moveq	r1, r3
    a9be:	mov	r0, r8
    a9c0:	bl	9920 <memcpy>
					usb_descriptor_buffer[1] = 7;
    a9c4:	movs	r3, #7
    a9c6:	strb.w	r3, [r8, #1]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a9ca:	bic.w	r3, r8, #31
	uint32_t end_addr = (uint32_t)addr + size;
    a9ce:	add	r8, r5
	asm volatile("": : :"memory");
	asm("dsb");
    a9d0:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a9d4:	ldr	r2, [pc, #576]	; (ac18 <usb_isr+0x630>)
    a9d6:	str	r3, [r2, #0]
		location += 32;
    a9d8:	adds	r3, #32
	} while (location < end_addr);
    a9da:	cmp	r8, r3
    a9dc:	bhi.n	a9d4 <usb_isr+0x3ec>
	asm("dsb");
    a9de:	dsb	sy
	asm("isb");
    a9e2:	isb	sy
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    a9e6:	ldr	r0, [pc, #564]	; (ac1c <usb_isr+0x634>)
    a9e8:	mov	r1, r5
    a9ea:	bl	a548 <endpoint0_transmit.constprop.1>
    a9ee:	b.n	a7ee <usb_isr+0x206>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    a9f0:	uxth	r1, r1
    a9f2:	and.w	r3, r1, #127	; 0x7f
		if (endpoint > 7) break;
    a9f6:	cmp	r3, #7
    a9f8:	bhi.w	a7ea <usb_isr+0x202>
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    a9fc:	lsls	r3, r3, #2
    a9fe:	ldr	r2, [pc, #544]	; (ac20 <usb_isr+0x638>)
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
    aa00:	lsls	r5, r1, #24
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aa02:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    aa06:	add	r2, r3
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    aa08:	mov.w	r1, #0
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    aa0c:	ldr	r3, [r2, #0]
    aa0e:	ite	mi
    aa10:	bicmi.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    aa14:	bicpl.w	r3, r3, #1
    aa18:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aa1a:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aa1c:	ldr	r3, [pc, #484]	; (ac04 <usb_isr+0x61c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    aa1e:	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    aa20:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aa22:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aa24:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    aa26:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    aa2a:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    aa2e:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    aa30:	orr.w	r3, r2, #65536	; 0x10000
    aa34:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    aa38:	ldr.w	r3, [r4, #432]	; 0x1b0
    aa3c:	cmp	r3, #0
    aa3e:	bne.n	aa38 <usb_isr+0x450>
    aa40:	b.n	a7ee <usb_isr+0x206>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    aa42:	ldr	r3, [pc, #480]	; (ac24 <usb_isr+0x63c>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    aa44:	movs	r1, #2
    aa46:	mov	r0, r3
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    aa48:	strb	r5, [r3, #0]
		reply_buffer[1] = 0;
    aa4a:	strb	r5, [r3, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    aa4c:	bl	a548 <endpoint0_transmit.constprop.1>
    aa50:	b.n	a7ee <usb_isr+0x206>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    aa52:	uxth	r1, r1
    aa54:	and.w	r3, r1, #127	; 0x7f
		if (endpoint > 7) break;
    aa58:	cmp	r3, #7
    aa5a:	bhi.w	a7ea <usb_isr+0x202>
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    aa5e:	lsls	r3, r3, #2
    aa60:	ldr	r2, [pc, #444]	; (ac20 <usb_isr+0x638>)
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
    aa62:	lsls	r1, r1, #24
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aa64:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    aa68:	add	r2, r3
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    aa6a:	mov.w	r1, #0
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    aa6e:	ldr	r3, [r2, #0]
    aa70:	ite	mi
    aa72:	orrmi.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    aa76:	orrpl.w	r3, r3, #1
    aa7a:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aa7c:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aa7e:	ldr	r3, [pc, #388]	; (ac04 <usb_isr+0x61c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    aa80:	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    aa82:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aa84:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aa86:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    aa88:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    aa8c:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    aa90:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    aa92:	orr.w	r3, r2, #65536	; 0x10000
    aa96:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    aa9a:	ldr.w	r3, [r4, #432]	; 0x1b0
    aa9e:	cmp	r3, #0
    aaa0:	bne.n	aa9a <usb_isr+0x4b2>
    aaa2:	b.n	a7ee <usb_isr+0x206>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    aaa4:	lsrs	r3, r1, #16
    aaa6:	cmp	r3, #7
    aaa8:	bne.w	a7ea <usb_isr+0x202>
		endpoint0_setupdata.bothwords = setupdata;
    aaac:	ldr.w	lr, [pc, #392]	; ac38 <usb_isr+0x650>
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    aab0:	movs	r0, #1
    aab2:	ldr	r3, [pc, #372]	; (ac28 <usb_isr+0x640>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    aab4:	str.w	r2, [lr]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aab8:	ldr	r2, [pc, #368]	; (ac2c <usb_isr+0x644>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    aaba:	str	r5, [r7, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aabc:	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    aabe:	str	r3, [r7, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    aac0:	ldr	r2, [pc, #364]	; (ac30 <usb_isr+0x648>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    aac2:	str	r0, [r3, #0]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    aac4:	ldr.w	r0, [r6, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    aac8:	add.w	r5, r2, #4096	; 0x1000
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    aacc:	str.w	r1, [lr, #4]
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    aad0:	add.w	lr, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    aad4:	orr.w	r1, r0, #1
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    aad8:	str	r2, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    aada:	add.w	r0, r2, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    aade:	add.w	r2, r2, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    aae2:	str.w	r1, [r6, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    aae6:	str	r5, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    aae8:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    aaec:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    aaee:	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    aaf0:	ldr.w	r3, [r4, #432]	; 0x1b0
    aaf4:	cmp	r3, #0
    aaf6:	bne.n	aaf0 <usb_isr+0x508>
	}
	endpoint0_transfer_ack.next = 1;
    aaf8:	ldr	r2, [pc, #264]	; (ac04 <usb_isr+0x61c>)
    aafa:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aafc:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    ab00:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ab02:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ab04:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ab08:	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ab0a:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ab0c:	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ab10:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    ab14:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    ab16:	orr.w	r3, r1, r0
    ab1a:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ab1e:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    ab22:	ldr.w	r3, [r4, #432]	; 0x1b0
    ab26:	cmp	r3, #0
    ab28:	bne.n	ab22 <usb_isr+0x53a>
    ab2a:	b.n	a7ee <usb_isr+0x206>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    ab2c:	ldr	r2, [pc, #260]	; (ac34 <usb_isr+0x64c>)
		endpoint0_transmit(reply_buffer, 1, 0);
    ab2e:	movs	r1, #1
		endpoint_queue_head[3].pointer4 = 0x74D59319;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    ab30:	ldr	r3, [pc, #240]	; (ac24 <usb_isr+0x63c>)
    ab32:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    ab34:	mov	r0, r3
		endpoint_queue_head[3].pointer4 = 0x74D59319;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    ab36:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    ab38:	bl	a548 <endpoint0_transmit.constprop.1>
    ab3c:	b.n	a7ee <usb_isr+0x206>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    ab3e:	lsls	r5, r3, #31
    ab40:	bpl.w	a6aa <usb_isr+0xc2>
    ab44:	b.n	a6a6 <usb_isr+0xbe>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    ab46:	ldr	r0, [pc, #240]	; (ac38 <usb_isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ab48:	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    ab4c:	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ab4e:	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    ab50:	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ab52:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    ab54:	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ab56:	bne.w	a76a <usb_isr+0x182>
    ab5a:	uxth	r1, r0
    ab5c:	cmp	r1, #0
    ab5e:	bne.w	a76a <usb_isr+0x182>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ab62:	ldr	r1, [pc, #204]	; (ac30 <usb_isr+0x648>)
    ab64:	ldr	r4, [pc, #212]	; (ac3c <usb_isr+0x654>)
    ab66:	ldmia	r1, {r0, r1}
    ab68:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    ab6a:	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ab6c:	str	r0, [r4, #0]
    ab6e:	strh	r1, [r4, #4]
    ab70:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    ab72:	bne.w	a76a <usb_isr+0x182>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    ab76:	cpsid	i
	sof_usage |= (1 << interface);
    ab78:	ldr	r0, [pc, #196]	; (ac40 <usb_isr+0x658>)
    ab7a:	ldrb	r1, [r0, #0]
    ab7c:	orr.w	r1, r1, #8
    ab80:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    ab82:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    ab86:	lsls	r0, r1, #24
    ab88:	bmi.n	ab98 <usb_isr+0x5b0>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    ab8a:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    ab8e:	movs	r0, #128	; 0x80
    ab90:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    ab94:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    ab98:	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    ab9a:	ldr	r2, [pc, #168]	; (ac44 <usb_isr+0x65c>)
    ab9c:	movs	r1, #80	; 0x50
    ab9e:	strb	r1, [r2, #0]
    aba0:	b.n	a76a <usb_isr+0x182>
    aba2:	ldr.w	r8, [pc, #120]	; ac1c <usb_isr+0x634>
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    aba6:	mov	r2, r5
    aba8:	mov	r0, r8
    abaa:	bl	9920 <memcpy>
    abae:	b.n	a9ca <usb_isr+0x3e2>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    abb0:	ldr	r3, [pc, #88]	; (ac0c <usb_isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    abb2:	mov	r2, r5
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    abb4:	ldr	r1, [pc, #92]	; (ac14 <usb_isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    abb6:	ldrb	r0, [r3, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    abb8:	ldr	r3, [pc, #84]	; (ac10 <usb_isr+0x628>)
    abba:	ldr.w	r8, [pc, #96]	; ac1c <usb_isr+0x634>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    abbe:	cmp	r0, #0
    abc0:	it	eq
    abc2:	moveq	r1, r3
    abc4:	ldr	r0, [pc, #84]	; (ac1c <usb_isr+0x634>)
    abc6:	bl	9920 <memcpy>
    abca:	b.n	a9ca <usb_isr+0x3e2>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    abcc:	mov.w	lr, lr, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    abd0:	ldrb	r5, [r1, #0]
    abd2:	cmp	r5, lr
    abd4:	it	cs
    abd6:	movcs	r5, lr
    abd8:	b.n	a9a2 <usb_isr+0x3ba>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    abda:	ldr	r1, [pc, #100]	; (ac40 <usb_isr+0x658>)
    abdc:	ldrb	r2, [r1, #0]
    abde:	and.w	r2, r2, #247	; 0xf7
    abe2:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    abe4:	cbnz	r2, abf2 <usb_isr+0x60a>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    abe6:	ldr.w	r2, [r3, #328]	; 0x148
    abea:	bic.w	r2, r2, #128	; 0x80
    abee:	str.w	r2, [r3, #328]	; 0x148
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				_reboot_Teensyduino_();
    abf2:	bl	12ef8 <___reboot_Teensyduino__veneer>
    abf6:	nop
    abf8:	.word	0x20018b9c
    abfc:	.word	0x20018c28
    ac00:	.word	0x20018bd3
    ac04:	.word	0x20018c00
    ac08:	.word	0x20001a5c
    ac0c:	.word	0x20018bd5
    ac10:	.word	0x6000262c
    ac14:	.word	0x60002690
    ac18:	.word	0xe000ef70
    ac1c:	.word	0x20200000
    ac20:	.word	0x402e01c0
    ac24:	.word	0x20018680
    ac28:	.word	0x20018be0
    ac2c:	.word	0x00070080
    ac30:	.word	0x20017d88
    ac34:	.word	0x20018bd4
    ac38:	.word	0x20005c40
    ac3c:	.word	0x20018c20
    ac40:	.word	0x20018bcf
    ac44:	.word	0x20018bd6

0000ac48 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ac48:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ac4a:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    ac4e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ac52:	ite	ne
    ac54:	movne	r7, #0
    ac56:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ac5a:	cmp	r2, #2
    ac5c:	bls.n	ac62 <usb_config_rx+0x1a>
    ac5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ac62:	mov.w	r9, r0, lsl #7
    ac66:	ldr.w	sl, [pc, #64]	; aca8 <usb_config_rx+0x60>
    ac6a:	mov	r5, r1
    ac6c:	mov	r4, r0
    ac6e:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ac72:	movs	r1, #0
    ac74:	movs	r2, #64	; 0x40
    ac76:	mov	r8, r3
    ac78:	mov	r0, r6
    ac7a:	bl	c86c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ac7e:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    ac80:	orr.w	r1, r7, r5, lsl #16
    ac84:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    ac88:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ac8c:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    ac8e:	cmp.w	r8, #0
    ac92:	beq.n	ac5e <usb_config_rx+0x16>
    ac94:	ldr	r3, [pc, #12]	; (aca4 <usb_config_rx+0x5c>)
    ac96:	lsls	r0, r4
    ac98:	ldr	r4, [r3, #0]
    ac9a:	orrs	r0, r4
    ac9c:	str	r0, [r3, #0]
    ac9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aca2:	nop
    aca4:	.word	0x20017d94
    aca8:	.word	0x20000000

0000acac <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    acac:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    acae:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    acb2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    acb6:	ite	ne
    acb8:	movne	r7, #0
    acba:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    acbe:	cmp	r2, #2
    acc0:	bls.n	acc6 <usb_config_tx+0x1a>
    acc2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    acc6:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    acc8:	lsls	r5, r0, #7
    acca:	ldr.w	r9, [pc, #68]	; ad10 <usb_config_tx+0x64>
    acce:	mov	r8, r1
    acd0:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    acd2:	movs	r1, #0
    acd4:	mov	r4, r0
    acd6:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    acd8:	add.w	sl, r9, r5
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    acdc:	mov	r0, sl
    acde:	bl	c86c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ace2:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    ace4:	orr.w	r1, r7, r8, lsl #16
    ace8:	str.w	r1, [r9, r5]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    acec:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    acf0:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    acf4:	cmp	r6, #0
    acf6:	beq.n	acc2 <usb_config_tx+0x16>
    acf8:	add.w	r0, r4, #16
    acfc:	ldr	r3, [pc, #12]	; (ad0c <usb_config_tx+0x60>)
    acfe:	lsls	r2, r0
    ad00:	ldr	r0, [r3, #0]
    ad02:	orrs	r2, r0
    ad04:	str	r2, [r3, #0]
    ad06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad0a:	nop
    ad0c:	.word	0x20017d94
    ad10:	.word	0x20000000

0000ad14 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ad14:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    ad16:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    ad18:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ad1a:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    ad1e:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ad20:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    ad22:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    ad24:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    ad28:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    ad2c:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    ad30:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    ad34:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    ad36:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    ad38:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    ad3a:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    ad3c:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    ad3e:	pop	{r4, r5, r6, r7}
    ad40:	bx	lr
    ad42:	nop

0000ad44 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ad44:	subs	r3, r0, #2
    ad46:	cmp	r3, #2
    ad48:	bls.n	ad4c <usb_transmit+0x8>
    ad4a:	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    ad4c:	ldr	r3, [pc, #24]	; (ad68 <usb_transmit+0x24>)
    ad4e:	mov	r2, r1
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    ad50:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    ad52:	add.w	r4, r0, #16
    ad56:	movs	r5, #1
    ad58:	add.w	r0, r3, r0, lsl #7
    ad5c:	lsl.w	r1, r5, r4
    ad60:	adds	r0, #64	; 0x40
}
    ad62:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    ad64:	b.w	a480 <schedule_transfer>
    ad68:	.word	0x20000000

0000ad6c <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ad6c:	subs	r3, r0, #2
    ad6e:	cmp	r3, #2
    ad70:	bls.n	ad74 <usb_receive+0x8>
    ad72:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    ad74:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    ad76:	ldr	r3, [pc, #20]	; (ad8c <usb_receive+0x20>)
    ad78:	movs	r4, #1
    ad7a:	mov	r2, r1
    ad7c:	lsl.w	r1, r4, r0
    ad80:	add.w	r0, r3, r0, lsl #7
}
    ad84:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    ad88:	b.w	a480 <schedule_transfer>
    ad8c:	.word	0x20000000

0000ad90 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    ad90:	ldr	r0, [r0, #4]
#endif
}
    ad92:	bx	lr

0000ad94 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    ad94:	cmp	r0, #0
    ad96:	beq.n	ae48 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ad98:	movs	r2, #1
// active, but the rest of your program becomes effectively stalled.  Usually
// delay() is used in very simple programs.  To achieve delay without waiting
// use millis() or elapsedMillis.  For shorter delay, use delayMicroseconds()
// or delayNanoseconds().
void delay(uint32_t msec)
{
    ad9a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad9e:	sub	sp, #20
    ada0:	mov	fp, r0
    ada2:	ldr	r4, [pc, #168]	; (ae4c <delay+0xb8>)
    ada4:	ldr	r5, [pc, #168]	; (ae50 <delay+0xbc>)
    ada6:	ldr	r6, [pc, #172]	; (ae54 <delay+0xc0>)
    ada8:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    adac:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    adb0:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    adb2:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    adb4:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    adb8:	cmp	r1, #0
    adba:	bne.n	adac <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    adbc:	ldr	r7, [pc, #152]	; (ae58 <delay+0xc4>)
    adbe:	strd	r8, r9, [sp, #8]
    adc2:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    adc4:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    adc6:	ldr	r2, [pc, #148]	; (ae5c <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    adc8:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    adcc:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    adce:	ldr	r2, [r2, #0]
    add0:	movs	r7, #1
    add2:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    add6:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    adda:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    addc:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    adde:	cmp	r3, r1
    ade0:	it	eq
    ade2:	cmpeq	r2, r8
    ade4:	ite	cs
    ade6:	movcs	sl, r8
    ade8:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    adea:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    adee:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    adf2:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    adf4:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    adf6:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    adfa:	cmp	r3, #0
    adfc:	bne.n	adee <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    adfe:	ldr	r0, [sp, #4]
    ae00:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    ae02:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae04:	ldr	r0, [pc, #84]	; (ae5c <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    ae06:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae0a:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    ae0c:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae10:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    ae14:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    ae18:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae1c:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    ae1e:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae20:	cmp	r1, r3
    ae22:	it	eq
    ae24:	cmpeq	r0, r8
    ae26:	ite	cs
    ae28:	movcs	r3, r8
    ae2a:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    ae2c:	add	r2, r3
    ae2e:	cmp	r2, lr
    ae30:	bcc.n	ae42 <delay+0xae>
			if (--msec == 0) return;
    ae32:	subs.w	fp, fp, #1
			start += 1000;
    ae36:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    ae3a:	bne.n	adee <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    ae3c:	add	sp, #20
    ae3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    ae42:	bl	b65c <yield>
	}
    ae46:	b.n	adee <delay+0x5a>
    ae48:	bx	lr
    ae4a:	nop
    ae4c:	.word	0x20018c2c
    ae50:	.word	0x20018b9c
    ae54:	.word	0x20018b98
    ae58:	.word	0xe0001004
    ae5c:	.word	0x200186c8

0000ae60 <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    ae60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    ae64:	ldr	r2, [pc, #72]	; (aeb0 <micros+0x50>)
    ae66:	movs	r6, #1
    ae68:	ldr	r5, [pc, #72]	; (aeb4 <micros+0x54>)
    ae6a:	ldr	r4, [pc, #76]	; (aeb8 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ae6c:	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    ae70:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    ae72:	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ae74:	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    ae78:	cmp	r3, #0
    ae7a:	bne.n	ae6c <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    ae7c:	ldr	r2, [pc, #60]	; (aebc <micros+0x5c>)
    ae7e:	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae80:	ldr	r7, [pc, #60]	; (aec0 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    ae82:	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    ae84:	mov.w	r9, #0
    ae88:	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae8c:	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    ae8e:	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ae92:	cmp	r9, r3
    ae94:	umull	r6, r7, r2, r6
    ae98:	it	eq
    ae9a:	cmpeq	r8, r7
    ae9c:	mov	r4, r7
    ae9e:	ite	cs
    aea0:	movcs	r4, r7
    aea2:	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    aea4:	mla	r0, r0, r1, r4
    aea8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    aeac:	bx	lr
    aeae:	nop
    aeb0:	.word	0x20018c2c
    aeb4:	.word	0x20018b9c
    aeb8:	.word	0x20018b98
    aebc:	.word	0xe0001004
    aec0:	.word	0x200186c8

0000aec4 <unused_interrupt_vector>:
	const uint32_t *stack;
	struct arm_fault_info_struct *info;
	const uint32_t *p, *end;

	// disallow any nested interrupts
	__disable_irq();
    aec4:	cpsid	i
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    aec6:	mrs	r3, IPSR
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
    aeca:	ldr	r5, [pc, #292]	; (aff0 <unused_interrupt_vector+0x12c>)
    aecc:	str	r3, [r5, #4]
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    aece:	mrs	r3, MSP
	info->cfsr = SCB_CFSR;
    aed2:	ldr	r4, [pc, #288]	; (aff4 <unused_interrupt_vector+0x130>)
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
	info->len = sizeof(*info) / 4;
    aed4:	mov	r6, r5
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
    aed6:	ldr	r0, [pc, #288]	; (aff8 <unused_interrupt_vector+0x134>)
	info->mmfar = SCB_MMFAR;
    aed8:	ldr	r1, [pc, #288]	; (affc <unused_interrupt_vector+0x138>)
	info->bfar = SCB_BFAR;
    aeda:	ldr	r2, [pc, #292]	; (b000 <unused_interrupt_vector+0x13c>)
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    aedc:	ldr	r4, [r4, #0]
	info->hfsr = SCB_HFSR;
    aede:	ldr	r0, [r0, #0]
	info->mmfar = SCB_MMFAR;
    aee0:	ldr	r1, [r1, #0]
	info->bfar = SCB_BFAR;
    aee2:	ldr	r2, [r2, #0]
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
    aee4:	str	r1, [r5, #16]
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    aee6:	str	r4, [r5, #8]
	info->hfsr = SCB_HFSR;
    aee8:	str	r0, [r5, #12]
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
    aeea:	str	r2, [r5, #20]
	info->ret = stack[6];
    aeec:	ldr	r2, [r3, #24]
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    aeee:	ldr	r4, [pc, #276]	; (b004 <unused_interrupt_vector+0x140>)
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
    aef0:	str	r2, [r5, #24]
	info->xpsr = stack[7];
    aef2:	ldr	r3, [r3, #28]
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    aef4:	ldr	r7, [pc, #272]	; (b008 <unused_interrupt_vector+0x144>)
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
    aef6:	str	r3, [r5, #28]
	info->temp = tempmonGetTemp();
    aef8:	bl	b1ec <tempmonGetTemp>
    aefc:	vstr	s0, [r5, #32]
	info->time = rtc_get();
    af00:	bl	b088 <rtc_get>
	info->len = sizeof(*info) / 4;
    af04:	movs	r3, #11
	// add CRC to crash report
	crc = 0xFFFFFFFF;
    af06:	mov.w	r2, #4294967295
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
    af0a:	str	r0, [r5, #36]	; 0x24
	info->len = sizeof(*info) / 4;
    af0c:	mov	r1, r3
    af0e:	str	r3, [r5, #0]
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
    af10:	eors	r2, r1
    af12:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    af14:	and.w	r3, r2, #1
    af18:	subs	r1, #1
    af1a:	mul.w	r3, r4, r3
    af1e:	eor.w	r2, r3, r2, lsr #1
    af22:	bne.n	af14 <unused_interrupt_vector+0x50>
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    af24:	cmp	r6, r7
    af26:	beq.n	af2e <unused_interrupt_vector+0x6a>
    af28:	ldr.w	r1, [r6, #4]!
    af2c:	b.n	af10 <unused_interrupt_vector+0x4c>
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
	}
	info->crc = crc;
    af2e:	ldr	r1, [pc, #192]	; (aff0 <unused_interrupt_vector+0x12c>)
    af30:	str	r2, [r1, #40]	; 0x28
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    af32:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    af36:	ldr	r3, [pc, #212]	; (b00c <unused_interrupt_vector+0x148>)
    af38:	ldr	r2, [pc, #212]	; (b010 <unused_interrupt_vector+0x14c>)
    af3a:	str	r1, [r3, #0]
    af3c:	str	r2, [r3, #0]
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    af3e:	dsb	sy
	asm("isb");
    af42:	isb	sy
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    af46:	ldr	r2, [pc, #204]	; (b014 <unused_interrupt_vector+0x150>)
	PIT_MCR = PIT_MCR_MDIS;
    af48:	movs	r5, #2
    af4a:	ldr	r4, [pc, #204]	; (b018 <unused_interrupt_vector+0x154>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    af4c:	ldr	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    af4e:	ldr	r1, [pc, #204]	; (b01c <unused_interrupt_vector+0x158>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    af50:	orr.w	r3, r3, #12288	; 0x3000
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    af54:	ldr	r0, [pc, #200]	; (b020 <unused_interrupt_vector+0x15c>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    af56:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    af58:	str	r5, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    af5a:	ldr	r3, [r2, #28]
    af5c:	bic.w	r3, r3, #127	; 0x7f
    af60:	orr.w	r3, r3, #64	; 0x40
    af64:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    af66:	ldr	r3, [r1, #0]
    af68:	cmp	r3, r0
    af6a:	bhi.n	afea <unused_interrupt_vector+0x126>
	PIT_MCR = 0;
    af6c:	ldr	r2, [pc, #168]	; (b018 <unused_interrupt_vector+0x154>)
    af6e:	movs	r1, #0
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    af70:	movs	r0, #1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    af72:	ldr	r6, [pc, #176]	; (b024 <unused_interrupt_vector+0x160>)
	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
    af74:	str	r1, [r2, #0]
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    af76:	mov.w	r3, #4294967295
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
    af7a:	str.w	r1, [r2, #264]	; 0x108
	NVIC_ICER4 = 0xFFFFFFFF;

	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
    af7e:	mov	r4, r1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    af80:	str.w	r6, [r2, #256]	; 0x100
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    af84:	mov	r5, r2
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    af86:	str.w	r0, [r2, #264]	; 0x108
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    af8a:	mov	r7, r0
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    af8c:	ldr.w	lr, [pc, #192]	; b050 <unused_interrupt_vector+0x18c>
	NVIC_ICER1 = 0xFFFFFFFF;
    af90:	ldr	r6, [pc, #148]	; (b028 <unused_interrupt_vector+0x164>)
	NVIC_ICER2 = 0xFFFFFFFF;
    af92:	ldr	r0, [pc, #152]	; (b02c <unused_interrupt_vector+0x168>)
	NVIC_ICER3 = 0xFFFFFFFF;
    af94:	ldr	r1, [pc, #152]	; (b030 <unused_interrupt_vector+0x16c>)
	NVIC_ICER4 = 0xFFFFFFFF;
    af96:	ldr	r2, [pc, #156]	; (b034 <unused_interrupt_vector+0x170>)
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    af98:	str.w	r3, [lr]
	NVIC_ICER1 = 0xFFFFFFFF;
    af9c:	str	r3, [r6, #0]
	NVIC_ICER2 = 0xFFFFFFFF;
    af9e:	str	r3, [r0, #0]
	NVIC_ICER3 = 0xFFFFFFFF;
    afa0:	str	r3, [r1, #0]
	NVIC_ICER4 = 0xFFFFFFFF;
    afa2:	str	r3, [r2, #0]
    afa4:	b.n	afaa <unused_interrupt_vector+0xe6>
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
		}
		usb_isr();
    afa6:	bl	a5e8 <usb_isr>
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    afaa:	ldr.w	r2, [r5, #268]	; 0x10c
    afae:	ldr	r3, [pc, #104]	; (b018 <unused_interrupt_vector+0x154>)
    afb0:	cmp	r2, #0
    afb2:	beq.n	afa6 <unused_interrupt_vector+0xe2>
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
    afb4:	adds	r4, #1
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    afb6:	str.w	r7, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    afba:	cmp	r4, #79	; 0x4f
    afbc:	bls.n	afa6 <unused_interrupt_vector+0xe2>
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    afbe:	ldr	r2, [pc, #120]	; (b038 <unused_interrupt_vector+0x174>)
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    afc0:	movs	r4, #2
    afc2:	ldr	r0, [pc, #120]	; (b03c <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    afc4:	mov.w	r1, #2147483648	; 0x80000000
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    afc8:	str.w	r4, [r0, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    afcc:	str	r1, [r2, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    afce:	ldr.w	r2, [r3, #268]	; 0x10c
    afd2:	cbnz	r2, afe2 <unused_interrupt_vector+0x11e>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
    afd4:	ldr	r1, [pc, #104]	; (b040 <unused_interrupt_vector+0x17c>)
    afd6:	ldr	r2, [pc, #108]	; (b044 <unused_interrupt_vector+0x180>)
    afd8:	str	r2, [r1, #48]	; 0x30
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    afda:	ldr.w	r0, [r3, #268]	; 0x10c
    afde:	cmp	r0, #0
    afe0:	beq.n	afd8 <unused_interrupt_vector+0x114>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
	SCB_AIRCR = 0x05FA0004;
    afe2:	ldr	r3, [pc, #100]	; (b048 <unused_interrupt_vector+0x184>)
    afe4:	ldr	r2, [pc, #100]	; (b04c <unused_interrupt_vector+0x188>)
    afe6:	str	r2, [r3, #0]
    afe8:	b.n	afe8 <unused_interrupt_vector+0x124>

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    afea:	bl	a1bc <set_arm_clock>
    afee:	b.n	af6c <unused_interrupt_vector+0xa8>
    aff0:	.word	0x2027ff80
    aff4:	.word	0xe000ed28
    aff8:	.word	0xe000ed2c
    affc:	.word	0xe000ed34
    b000:	.word	0xe000ed38
    b004:	.word	0xedb88320
    b008:	.word	0x2027ffa4
    b00c:	.word	0xe000ef70
    b010:	.word	0x2027ffa0
    b014:	.word	0x400fc000
    b018:	.word	0x40084000
    b01c:	.word	0x20001f24
    b020:	.word	0x0bcd3d80
    b024:	.word	0x00249f00
    b028:	.word	0xe000e184
    b02c:	.word	0xe000e188
    b030:	.word	0xe000e18c
    b034:	.word	0xe000e190
    b038:	.word	0x400d9000
    b03c:	.word	0x402e0000
    b040:	.word	0x400f8000
    b044:	.word	0x0bad00f1
    b048:	.word	0xe000ed0c
    b04c:	.word	0x05fa0004
    b050:	.word	0xe000e180

0000b054 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    b054:	ldr	r2, [pc, #36]	; (b07c <_sbrk+0x28>)

char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
    b056:	push	{r3, lr}
        char *prev = __brkval;
    b058:	ldr	r3, [r2, #0]
        if (incr != 0) {
    b05a:	cbz	r0, b066 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    b05c:	add	r0, r3
    b05e:	ldr	r1, [pc, #32]	; (b080 <_sbrk+0x2c>)
    b060:	cmp	r0, r1
    b062:	bhi.n	b06a <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    b064:	str	r0, [r2, #0]
        }
        return prev;
}
    b066:	mov	r0, r3
    b068:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    b06a:	bl	c02c <__errno>
    b06e:	movs	r2, #12
                        return (void *)-1;
    b070:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    b074:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    b076:	mov	r0, r3
    b078:	pop	{r3, pc}
    b07a:	nop
    b07c:	.word	0x20001f88
    b080:	.word	0x20280000

0000b084 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    b084:	wfi
    b086:	b.n	b084 <__cxa_pure_virtual>

0000b088 <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    b088:	ldr	r3, [pc, #40]	; (b0b4 <rtc_get+0x2c>)
#include "imxrt.h"
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
    b08a:	push	{r4, r5}
	uint32_t hi1 = SNVS_HPRTCMR;
    b08c:	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    b08e:	mov	r4, r3
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
    b090:	ldr	r1, [r3, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    b092:	ldr	r2, [r4, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    b094:	ldr	r3, [r4, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    b096:	cmp	r1, r3
    b098:	it	eq
    b09a:	cmpeq	r0, r2
unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    b09c:	mov	r0, r2
		uint32_t lo2 = SNVS_HPRTCLR;
    b09e:	mov	r1, r3
		if (lo1 == lo2 && hi1 == hi2) {
    b0a0:	ite	eq
    b0a2:	moveq	r5, #1
    b0a4:	movne	r5, #0
    b0a6:	cmp	r5, #0
    b0a8:	beq.n	b092 <rtc_get+0xa>
			return (hi2 << 17) | (lo2 >> 15);
    b0aa:	lsrs	r1, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    b0ac:	pop	{r4, r5}
    b0ae:	orr.w	r0, r1, r2, lsl #17
    b0b2:	bx	lr
    b0b4:	.word	0x400d4000

0000b0b8 <rtc_set>:

void rtc_set(unsigned long t)
{
	// stop the RTC
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    b0b8:	ldr	r3, [pc, #72]	; (b104 <rtc_set+0x4c>)
    b0ba:	ldr	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    b0bc:	mov	r1, r3
}

void rtc_set(unsigned long t)
{
	// stop the RTC
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    b0be:	bic.w	r2, r2, #65537	; 0x10001
    b0c2:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    b0c4:	ldr	r3, [r1, #8]
    b0c6:	ldr	r2, [pc, #60]	; (b104 <rtc_set+0x4c>)
    b0c8:	lsls	r3, r3, #31
    b0ca:	bmi.n	b0c4 <rtc_set+0xc>
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    b0cc:	ldr	r3, [r2, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    b0ce:	mov	r1, r2
{
	// stop the RTC
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    b0d0:	bic.w	r3, r3, #1
    b0d4:	str	r3, [r2, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    b0d6:	ldr	r3, [r1, #56]	; 0x38
    b0d8:	ldr	r2, [pc, #40]	; (b104 <rtc_set+0x4c>)
    b0da:	lsls	r3, r3, #31
    b0dc:	bmi.n	b0d6 <rtc_set+0x1e>
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
    b0de:	lsls	r3, r0, #15
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    b0e0:	mov	r1, r2
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
	SNVS_LPSRTCMR = t >> 17;
    b0e2:	lsrs	r0, r0, #17
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
    b0e4:	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    b0e6:	str	r0, [r2, #80]	; 0x50
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    b0e8:	ldr	r3, [r2, #56]	; 0x38
    b0ea:	orr.w	r3, r3, #1
    b0ee:	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    b0f0:	ldr	r3, [r1, #56]	; 0x38
    b0f2:	ldr	r2, [pc, #16]	; (b104 <rtc_set+0x4c>)
    b0f4:	lsls	r3, r3, #31
    b0f6:	bpl.n	b0f0 <rtc_set+0x38>
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    b0f8:	ldr	r3, [r2, #8]
    b0fa:	orr.w	r3, r3, #65537	; 0x10001
    b0fe:	str	r3, [r2, #8]
    b100:	bx	lr
    b102:	nop
    b104:	.word	0x400d4000

0000b108 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    b108:	push	{r3, lr}

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    b10a:	ldr	r3, [r0, #0]
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    b10c:	ldr	r2, [r0, #4]

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    b10e:	cbz	r3, b140 <sm_align_pool+0x38>
    b110:	cbz	r2, b132 <sm_align_pool+0x2a>
	if (spool->pool_size % HEADER_SZ) return 0;
    b112:	ldr	r3, [pc, #64]	; (b154 <sm_align_pool+0x4c>)
    b114:	umull	r1, r3, r3, r2
    b118:	lsrs	r3, r3, #3
    b11a:	add.w	r3, r3, r3, lsl #1
    b11e:	subs.w	r3, r2, r3, lsl #2
    b122:	beq.n	b12c <sm_align_pool+0x24>
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
    b124:	subs	r2, r2, r3
    b126:	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    b128:	cmp	r2, #240	; 0xf0
    b12a:	bls.n	b132 <sm_align_pool+0x2a>

int sm_align_pool(struct smalloc_pool *spool)
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    b12c:	movs	r3, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    b12e:	mov	r0, r3
    b130:	pop	{r3, pc}
	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
	if (spool->pool_size <= MIN_POOL_SZ) {
		errno = ENOSPC;
    b132:	bl	c02c <__errno>
    b136:	movs	r2, #28
    b138:	movs	r3, #0
    b13a:	str	r2, [r0, #0]
		return 0;
	}

	return 1;
}
    b13c:	mov	r0, r3
    b13e:	pop	{r3, pc}
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    b140:	ldr	r3, [pc, #16]	; (b154 <sm_align_pool+0x4c>)
    b142:	umull	r1, r3, r3, r2
    b146:	lsrs	r3, r3, #3
    b148:	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    b14c:	subs.w	r3, r2, r3, lsl #2
    b150:	bne.n	b124 <sm_align_pool+0x1c>
    b152:	b.n	b128 <sm_align_pool+0x20>
    b154:	.word	0xaaaaaaab

0000b158 <sm_set_pool>:

	return 1;
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    b158:	push	{r4, r5, r6, lr}
	if (!spool) {
    b15a:	mov	r4, r0
    b15c:	cmp	r0, #0
    b15e:	beq.n	b1d6 <sm_set_pool+0x7e>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    b160:	cbz	r1, b16a <sm_set_pool+0x12>
    b162:	clz	r5, r2
    b166:	lsrs	r5, r5, #5
    b168:	cbz	r5, b1aa <sm_set_pool+0x52>

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    b16a:	ldr	r0, [r4, #0]
    b16c:	cbz	r0, b172 <sm_set_pool+0x1a>
    b16e:	ldr	r2, [r4, #4]
    b170:	cbnz	r2, b180 <sm_set_pool+0x28>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    b172:	bl	c02c <__errno>
    b176:	movs	r3, #22
		return 0;
    b178:	movs	r2, #0
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    b17a:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    b17c:	mov	r0, r2
    b17e:	pop	{r4, r5, r6, pc}
struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
	if (spool->pool_size % HEADER_SZ) return 0;
    b180:	ldr	r1, [pc, #96]	; (b1e4 <sm_set_pool+0x8c>)
    b182:	umull	r3, r1, r1, r2
    b186:	lsrs	r1, r1, #3
    b188:	add.w	r1, r1, r1, lsl #1
    b18c:	subs.w	r1, r2, r1, lsl #2
    b190:	bne.n	b172 <sm_set_pool+0x1a>
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    b192:	ldr	r3, [r4, #8]
    b194:	cbz	r3, b19a <sm_set_pool+0x42>
    b196:	bl	c86c <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    b19a:	movs	r3, #0
			return 1;
    b19c:	movs	r2, #1
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    b19e:	str	r3, [r4, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    b1a0:	mov	r0, r2
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    b1a2:	str	r3, [r4, #4]
    b1a4:	str	r3, [r4, #8]
    b1a6:	str	r3, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    b1a8:	pop	{r4, r5, r6, pc}
    b1aa:	mov	r6, r3
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
    b1ac:	ldr	r3, [sp, #16]
		errno = EINVAL;
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
    b1ae:	stmia.w	r0, {r1, r2}
	spool->oomfn = oom_handler;
    b1b2:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    b1b4:	bl	b108 <sm_align_pool>
    b1b8:	mov	r2, r0
    b1ba:	cmp	r0, #0
    b1bc:	beq.n	b17c <sm_set_pool+0x24>

	if (do_zero) {
    b1be:	cbnz	r6, b1c6 <sm_set_pool+0x6e>
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
    b1c0:	movs	r2, #1
}
    b1c2:	mov	r0, r2
    b1c4:	pop	{r4, r5, r6, pc}
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
    b1c6:	ldmia.w	r4, {r0, r2}
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
    b1ca:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    b1cc:	mov	r1, r5
    b1ce:	bl	c86c <memset>
	}

	return 1;
    b1d2:	movs	r2, #1
    b1d4:	b.n	b17c <sm_set_pool+0x24>
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    b1d6:	bl	c02c <__errno>
    b1da:	movs	r3, #22
		return 0;
    b1dc:	mov	r2, r4
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    b1de:	str	r3, [r0, #0]
		return 0;
    b1e0:	b.n	b17c <sm_set_pool+0x24>
    b1e2:	nop
    b1e4:	.word	0xaaaaaaab

0000b1e8 <Panic_Temp_isr>:
static float s_hot_ROOM, s_roomC_hotC;

extern void unused_interrupt_vector(void); // startup.c

void Panic_Temp_isr(void) {
  unused_interrupt_vector();
    b1e8:	b.w	aec4 <unused_interrupt_vector>

0000b1ec <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    b1ec:	ldr	r1, [pc, #72]	; (b238 <tempmonGetTemp+0x4c>)
    b1ee:	ldr	r3, [r1, #0]
    b1f0:	ldr	r2, [pc, #68]	; (b238 <tempmonGetTemp+0x4c>)
    b1f2:	lsls	r3, r3, #29
    b1f4:	bpl.n	b1ee <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    b1f6:	ldr	r3, [r2, #0]
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    b1f8:	ldr	r1, [pc, #64]	; (b23c <tempmonGetTemp+0x50>)

    return tmeas;
    b1fa:	ubfx	r3, r3, #8, #12
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    b1fe:	ldr	r2, [pc, #64]	; (b240 <tempmonGetTemp+0x54>)

    return tmeas;
    b200:	vmov	s15, r3
    b204:	ldr	r3, [r1, #0]
    b206:	vldr	s12, [r2]
    b20a:	vcvt.f32.s32	s14, s15
    b20e:	vmov	s15, r3
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    b212:	ldr	r2, [pc, #48]	; (b244 <tempmonGetTemp+0x58>)

    return tmeas;
    b214:	vcvt.f32.u32	s15, s15
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    b218:	ldr	r3, [pc, #44]	; (b248 <tempmonGetTemp+0x5c>)

    return tmeas;
    b21a:	vldr	s13, [r2]
    b21e:	vsub.f32	s15, s14, s15
    b222:	vldr	s14, [r3]
    b226:	vcvt.f32.u32	s14, s14
    b22a:	vmul.f32	s15, s15, s12
    b22e:	vdiv.f32	s0, s15, s13
}
    b232:	vsub.f32	s0, s14, s0
    b236:	bx	lr
    b238:	.word	0x400d8180
    b23c:	.word	0x200186b8
    b240:	.word	0x200186c0
    b244:	.word	0x200186c4
    b248:	.word	0x200186bc

0000b24c <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    b24c:	lsls	r0, r0, #4
    b24e:	ldr	r3, [pc, #60]	; (b28c <digitalWrite.part.0+0x40>)
    b250:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    b252:	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
    b254:	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
    b256:	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    b258:	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    b25a:	tst	r4, r0
    b25c:	beq.n	b26a <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
    b25e:	cbz	r1, b278 <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
    b260:	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    b264:	ldr.w	r4, [sp], #4
    b268:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b26a:	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
    b26c:	cbnz	r1, b282 <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b26e:	ldr	r2, [pc, #32]	; (b290 <digitalWrite.part.0+0x44>)
		}
	}
}
    b270:	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b274:	str	r2, [r3, #0]
		}
	}
}
    b276:	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    b278:	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    b27c:	ldr.w	r4, [sp], #4
    b280:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b282:	ldr	r2, [pc, #16]	; (b294 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    b284:	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b288:	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    b28a:	bx	lr
    b28c:	.word	0x20000a9c
    b290:	.word	0x00013038
    b294:	.word	0x0001f038

0000b298 <digitalRead.part.1>:
uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
    b298:	lsls	r0, r0, #4
    b29a:	ldr	r3, [pc, #20]	; (b2b0 <digitalRead.part.1+0x18>)
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    b29c:	ldr	r2, [r3, r0]
uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
    b29e:	adds	r1, r3, r0
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    b2a0:	ldr	r2, [r2, #8]
    b2a2:	ldr	r3, [r1, #12]
    b2a4:	tst	r2, r3
}
    b2a6:	ite	ne
    b2a8:	movne	r0, #1
    b2aa:	moveq	r0, #0
    b2ac:	bx	lr
    b2ae:	nop
    b2b0:	.word	0x20000a9c

0000b2b4 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    b2b4:	cmp	r0, #54	; 0x36
    b2b6:	bhi.n	b2bc <digitalWrite+0x8>
    b2b8:	b.w	b24c <digitalWrite.part.0>
    b2bc:	bx	lr
    b2be:	nop

0000b2c0 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    b2c0:	cmp	r0, #54	; 0x36
    b2c2:	bhi.n	b2c8 <digitalRead+0x8>
    b2c4:	b.w	b298 <digitalRead.part.1>
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}
    b2c8:	movs	r0, #0
    b2ca:	bx	lr

0000b2cc <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    b2cc:	cmp	r0, #54	; 0x36
    b2ce:	bhi.n	b30a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    b2d0:	lsls	r0, r0, #4
    b2d2:	ldr	r2, [pc, #104]	; (b33c <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b2d4:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    b2d6:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b2da:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    b2dc:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b2de:	beq.n	b30c <pinMode+0x40>
    b2e0:	cmp	r1, #4
    b2e2:	beq.n	b30c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b2e4:	ldr	r4, [r3, #12]
    b2e6:	ldr	r2, [r0, #4]
    b2e8:	bic.w	r2, r2, r4
    b2ec:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b2ee:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    b2f0:	cbz	r1, b32e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    b2f2:	cmp	r1, #2
    b2f4:	beq.n	b334 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    b2f6:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    b2f8:	ldr	r3, [r3, #4]
}
    b2fa:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b2fe:	ite	eq
    b300:	ldreq	r1, [pc, #60]	; (b340 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    b302:	ldrne	r1, [pc, #64]	; (b344 <pinMode+0x78>)
    b304:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    b306:	movs	r2, #21
    b308:	str	r2, [r3, #0]
}
    b30a:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    b30c:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    b30e:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    b310:	ldr	r4, [r0, #4]
    b312:	orr.w	r2, r2, r4
    b316:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b318:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    b31a:	beq.n	b32e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    b31c:	movw	r1, #2104	; 0x838
    b320:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    b322:	ldr	r3, [r3, #4]
    b324:	movs	r2, #21
}
    b326:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    b32a:	str	r2, [r3, #0]
}
    b32c:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b32e:	movs	r1, #56	; 0x38
    b330:	str	r1, [r2, #0]
    b332:	b.n	b322 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b334:	ldr	r1, [pc, #16]	; (b348 <pinMode+0x7c>)
    b336:	str	r1, [r2, #0]
    b338:	b.n	b322 <pinMode+0x56>
    b33a:	nop
    b33c:	.word	0x20000a9c
    b340:	.word	0x00013038
    b344:	.word	0x00010038
    b348:	.word	0x0001f038

0000b34c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b34c:	ldr	r0, [pc, #656]	; (b5e0 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b34e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b352:	ldr	r3, [pc, #656]	; (b5e4 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b354:	ldr	r2, [r0, #120]	; 0x78
    b356:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    b35a:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b35c:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    b35e:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b360:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b364:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b368:	ldr	r4, [pc, #636]	; (b5e8 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b36a:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b36e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b370:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b374:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b376:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b378:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b37c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b380:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b384:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b388:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b38c:	ldrh.w	r0, [r3, #392]	; 0x188
    b390:	uxth	r0, r0
    b392:	orr.w	r0, r0, #240	; 0xf0
    b396:	strh.w	r0, [r3, #392]	; 0x188
    b39a:	add.w	r0, r1, r1, lsl #1
    b39e:	ldr	r3, [pc, #580]	; (b5e4 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    b3a0:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b3a2:	movs	r5, #0
    b3a4:	lsls	r0, r0, #5
    b3a6:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b3a8:	cmp	r1, #4
    b3aa:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b3ac:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b3b0:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    b3b2:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b3b4:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b3b6:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b3b8:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b3ba:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    b3bc:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b3be:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b3c0:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b3c2:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b3c4:	bne.n	b39a <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b3c6:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b3ca:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b3ce:	ldr	r3, [pc, #540]	; (b5ec <pwm_init+0x2a0>)
    b3d0:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b3d4:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b3d6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b3d8:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b3dc:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b3de:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b3e2:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b3e6:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b3ea:	ldrh.w	r0, [r4, #392]	; 0x188
    b3ee:	uxth	r0, r0
    b3f0:	orr.w	r0, r0, #3840	; 0xf00
    b3f4:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b3f8:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b3fc:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b400:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b404:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b408:	ldrh.w	r0, [r3, #392]	; 0x188
    b40c:	uxth	r0, r0
    b40e:	orr.w	r0, r0, #240	; 0xf0
    b412:	strh.w	r0, [r3, #392]	; 0x188
    b416:	add.w	r0, r1, r1, lsl #1
    b41a:	ldr	r3, [pc, #464]	; (b5ec <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    b41c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b41e:	movs	r5, #0
    b420:	lsls	r0, r0, #5
    b422:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b424:	cmp	r1, #4
    b426:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b428:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b42a:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b42e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b430:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b432:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b434:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b436:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    b438:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b43a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b43c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b43e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b440:	bne.n	b416 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b442:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b446:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b44a:	ldr	r3, [pc, #420]	; (b5f0 <pwm_init+0x2a4>)
    b44c:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b450:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b452:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b454:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b458:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b45a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b45e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b462:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b466:	ldrh.w	r0, [r4, #392]	; 0x188
    b46a:	uxth	r0, r0
    b46c:	orr.w	r0, r0, #3840	; 0xf00
    b470:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b474:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b478:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b47c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b480:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b484:	ldrh.w	r0, [r3, #392]	; 0x188
    b488:	uxth	r0, r0
    b48a:	orr.w	r0, r0, #240	; 0xf0
    b48e:	strh.w	r0, [r3, #392]	; 0x188
    b492:	add.w	r0, r1, r1, lsl #1
    b496:	ldr	r3, [pc, #344]	; (b5f0 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    b498:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b49a:	movs	r5, #0
    b49c:	lsls	r0, r0, #5
    b49e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b4a0:	cmp	r1, #4
    b4a2:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b4a4:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b4a6:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b4aa:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b4ac:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b4ae:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b4b0:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b4b2:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    b4b4:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b4b6:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b4b8:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b4ba:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b4bc:	bne.n	b492 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b4be:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b4c2:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b4c6:	ldr	r3, [pc, #300]	; (b5f4 <pwm_init+0x2a8>)
    b4c8:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b4cc:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b4ce:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b4d0:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b4d4:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b4d6:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b4da:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b4de:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b4e2:	ldrh.w	r0, [r4, #392]	; 0x188
    b4e6:	uxth	r0, r0
    b4e8:	orr.w	r0, r0, #3840	; 0xf00
    b4ec:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b4f0:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b4f4:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b4f8:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b4fc:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b500:	ldrh.w	r0, [r3, #392]	; 0x188
    b504:	uxth	r0, r0
    b506:	orr.w	r0, r0, #240	; 0xf0
    b50a:	strh.w	r0, [r3, #392]	; 0x188
    b50e:	add.w	r0, r1, r1, lsl #1
    b512:	ldr	r3, [pc, #224]	; (b5f4 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    b514:	adds	r1, #1
    b516:	lsls	r0, r0, #5
    b518:	mov	r4, r3
    b51a:	cmp	r1, #4
    b51c:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b51e:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b520:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b524:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b526:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b528:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b52a:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b52c:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    b52e:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b530:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b532:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b534:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b536:	bne.n	b50e <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b538:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b53c:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b53e:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b540:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b544:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b546:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b54a:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b54c:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b550:	orrs	r3, r7
    b552:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b556:	ldrh.w	r3, [r4, #392]	; 0x188
    b55a:	uxth	r3, r3
    b55c:	orr.w	r3, r3, #3840	; 0xf00
    b560:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b564:	lsls	r0, r2, #5
    b566:	ldr	r3, [pc, #144]	; (b5f8 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b568:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b56a:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b56c:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    b56e:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    b570:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b572:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b574:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b576:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b57a:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    b57c:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b57e:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b580:	bne.n	b564 <pwm_init+0x218>
    b582:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b584:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b586:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b58a:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b58e:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b590:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b594:	lsls	r0, r2, #5
    b596:	ldr	r3, [pc, #100]	; (b5fc <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b598:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b59a:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b59c:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    b59e:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    b5a0:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b5a2:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b5a4:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b5a6:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b5a8:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    b5aa:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b5ac:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b5ae:	bne.n	b594 <pwm_init+0x248>
    b5b0:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b5b2:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b5b4:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b5b8:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b5bc:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b5be:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b5c2:	lsls	r0, r2, #5
    b5c4:	ldr	r3, [pc, #56]	; (b600 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b5c6:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b5c8:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b5ca:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    b5cc:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    b5ce:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b5d0:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b5d2:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b5d4:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b5d6:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    b5d8:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b5da:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b5dc:	bne.n	b5c2 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    b5de:	pop	{r4, r5, r6, r7, pc}
    b5e0:	.word	0x400fc000
    b5e4:	.word	0x403dc000
    b5e8:	.word	0xfc030000
    b5ec:	.word	0x403e0000
    b5f0:	.word	0x403e4000
    b5f4:	.word	0x403e8000
    b5f8:	.word	0x401dc000
    b5fc:	.word	0x401e0000
    b600:	.word	0x401e4000

0000b604 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b604:	ldr	r2, [pc, #72]	; (b650 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b606:	ldr	r3, [pc, #76]	; (b654 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b608:	ldr.w	r0, [r2, #544]	; 0x220
    b60c:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b610:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    b612:	push	{r4, lr}
    b614:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b616:	bhi.n	b61e <usb_init_serialnumber+0x1a>
    b618:	add.w	r0, r0, r0, lsl #2
    b61c:	lsls	r0, r0, #1
    b61e:	ldr	r4, [pc, #56]	; (b658 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    b620:	add	r1, sp, #4
    b622:	movs	r2, #10
    b624:	bl	bca0 <ultoa>
    b628:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    b62a:	movs	r3, #0
    b62c:	mov	r0, r4
		char c = buf[i];
    b62e:	ldrb.w	r2, [r1], #1
    b632:	adds	r3, #1
		if (!c) break;
    b634:	cbz	r2, b646 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b636:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b638:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b63c:	bne.n	b62e <usb_init_serialnumber+0x2a>
    b63e:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b640:	strb	r3, [r4, #0]
}
    b642:	add	sp, #16
    b644:	pop	{r4, pc}
    b646:	lsls	r3, r3, #1
    b648:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b64a:	strb	r3, [r4, #0]
}
    b64c:	add	sp, #16
    b64e:	pop	{r4, pc}
    b650:	.word	0x401f4400
    b654:	.word	0x0098967f
    b658:	.word	0x2000256c

0000b65c <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    b65c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    b660:	ldr	r6, [pc, #200]	; (b72c <yield+0xd0>)
    b662:	ldrb	r3, [r6, #0]
    b664:	cbz	r3, b68c <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    b666:	ldr	r7, [pc, #200]	; (b730 <yield+0xd4>)
    b668:	ldrb	r2, [r7, #0]
    b66a:	cbnz	r2, b68c <yield+0x30>
	running = 1;
    b66c:	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    b66e:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    b670:	strb	r2, [r7, #0]


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    b672:	bmi.n	b6e4 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    b674:	lsls	r2, r3, #30
    b676:	bmi.n	b6ac <yield+0x50>

	running = 0;
    b678:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b67a:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    b67c:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b67e:	bpl.n	b68c <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    b680:	ldr	r3, [pc, #176]	; (b734 <yield+0xd8>)
    b682:	ldr	r2, [r3, #0]
    b684:	cbz	r2, b68c <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    b686:	mrs	r2, IPSR
		if (ipsr != 0) return;
    b68a:	cbz	r2, b690 <yield+0x34>
    b68c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b690:	mrs	r0, PRIMASK
		__disable_irq();
    b694:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    b696:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    b698:	cbz	r2, b6a2 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    b69a:	ldr	r4, [pc, #156]	; (b738 <yield+0xdc>)
    b69c:	ldrb	r1, [r4, #0]
    b69e:	cmp	r1, #0
    b6a0:	beq.n	b702 <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b6a2:	cmp	r0, #0
    b6a4:	bne.n	b68c <yield+0x30>
    b6a6:	cpsie	i
    b6a8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b6ac:	ldr.w	r8, [pc, #148]	; b744 <yield+0xe8>
    b6b0:	ldrb.w	r2, [r8]
    b6b4:	cmp	r2, #0
    b6b6:	beq.n	b678 <yield+0x1c>
    b6b8:	movs	r4, #0
    b6ba:	ldr.w	r9, [pc, #140]	; b748 <yield+0xec>
    b6be:	b.n	b6cc <yield+0x70>
    b6c0:	adds	r4, #1
    b6c2:	ldrb.w	r3, [r8]
    b6c6:	uxtb	r4, r4
    b6c8:	cmp	r3, r4
    b6ca:	bls.n	b6f4 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    b6cc:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    b6d0:	ldr	r3, [r5, #0]
    b6d2:	mov	r0, r5
    b6d4:	ldr	r3, [r3, #16]
    b6d6:	blx	r3
    b6d8:	cmp	r0, #0
    b6da:	beq.n	b6c0 <yield+0x64>
    b6dc:	ldr	r3, [r5, #20]
    b6de:	ldr	r3, [r3, #8]
    b6e0:	blx	r3
    b6e2:	b.n	b6c0 <yield+0x64>
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
    b6e4:	bl	9fdc <usb_serial_available>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    b6e8:	cbnz	r0, b720 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    b6ea:	ldr	r3, [pc, #80]	; (b73c <yield+0xe0>)
    b6ec:	ldrb	r3, [r3, #0]
    b6ee:	cbnz	r3, b6f8 <yield+0x9c>
    b6f0:	ldrb	r3, [r6, #0]
    b6f2:	b.n	b674 <yield+0x18>
    b6f4:	ldrb	r3, [r6, #0]
    b6f6:	b.n	b678 <yield+0x1c>
    b6f8:	ldrb	r3, [r6, #0]
    b6fa:	and.w	r3, r3, #254	; 0xfe
    b6fe:	strb	r3, [r6, #0]
    b700:	b.n	b674 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    b702:	movs	r6, #1
		firstYield = first->_next;
    b704:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    b706:	strb	r6, [r4, #0]
		firstYield = first->_next;
    b708:	str	r5, [r3, #0]
		if (firstYield) {
    b70a:	cbz	r5, b726 <yield+0xca>
			firstYield->_prev = nullptr;
    b70c:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b70e:	cbnz	r0, b712 <yield+0xb6>
    b710:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    b712:	movs	r5, #0
		(*(first->_function))(*first);
    b714:	ldr	r3, [r2, #8]
    b716:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    b718:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    b71a:	blx	r3
		runningFromYield = false;
    b71c:	strb	r5, [r4, #0]
    b71e:	b.n	b68c <yield+0x30>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    b720:	bl	bc94 <serialEvent()>
    b724:	b.n	b6ea <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    b726:	ldr	r3, [pc, #24]	; (b740 <yield+0xe4>)
    b728:	str	r5, [r3, #0]
    b72a:	b.n	b70e <yield+0xb2>
    b72c:	.word	0x20002587
    b730:	.word	0x20018bc9
    b734:	.word	0x20017a7c
    b738:	.word	0x20018bc7
    b73c:	.word	0x60002700
    b740:	.word	0x20017a88
    b744:	.word	0x20018bc8
    b748:	.word	0x20017a8c

0000b74c <EventResponder::triggerEventNotImmediate()>:
extern const uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;
extern const uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;
extern const uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;

void EventResponder::triggerEventNotImmediate()
{
    b74c:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b74e:	mrs	r2, PRIMASK
		__disable_irq();
    b752:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    b754:	ldrb	r3, [r0, #29]
    b756:	cbnz	r3, b766 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    b758:	ldrb	r1, [r0, #28]
    b75a:	cmp	r1, #1
    b75c:	beq.n	b770 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    b75e:	cmp	r1, #3
    b760:	beq.n	b784 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    b762:	movs	r3, #1
    b764:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b766:	cbnz	r2, b76a <EventResponder::triggerEventNotImmediate()+0x1e>
    b768:	cpsie	i
	}
	enableInterrupts(irq);
}
    b76a:	ldr.w	r4, [sp], #4
    b76e:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    b770:	ldr	r4, [pc, #68]	; (b7b8 <EventResponder::triggerEventNotImmediate()+0x6c>)
    b772:	ldr	r1, [r4, #0]
    b774:	cbz	r1, b7a0 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    b776:	ldr	r1, [pc, #68]	; (b7bc <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    b778:	str	r3, [r0, #20]
				_prev = lastYield;
    b77a:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    b77c:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    b77e:	str	r3, [r0, #24]
				_prev->_next = this;
    b780:	str	r0, [r3, #20]
    b782:	b.n	b762 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    b784:	ldr	r4, [pc, #56]	; (b7c0 <EventResponder::triggerEventNotImmediate()+0x74>)
    b786:	ldr	r1, [r4, #0]
    b788:	cbz	r1, b7ac <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    b78a:	ldr	r1, [pc, #56]	; (b7c4 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    b78c:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    b78e:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    b790:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    b792:	str	r3, [r0, #24]
				_prev->_next = this;
    b794:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    b796:	ldr	r3, [pc, #48]	; (b7c8 <EventResponder::triggerEventNotImmediate()+0x7c>)
    b798:	mov.w	r1, #268435456	; 0x10000000
    b79c:	str	r1, [r3, #0]
    b79e:	b.n	b762 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    b7a0:	ldr	r3, [pc, #24]	; (b7bc <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    b7a2:	str	r1, [r0, #20]
				_prev = nullptr;
    b7a4:	str	r1, [r0, #24]
				firstYield = this;
    b7a6:	str	r0, [r4, #0]
				lastYield = this;
    b7a8:	str	r0, [r3, #0]
    b7aa:	b.n	b762 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    b7ac:	ldr	r3, [pc, #20]	; (b7c4 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    b7ae:	str	r1, [r0, #20]
				_prev = nullptr;
    b7b0:	str	r1, [r0, #24]
				firstInterrupt = this;
    b7b2:	str	r0, [r4, #0]
				lastInterrupt = this;
    b7b4:	str	r0, [r3, #0]
    b7b6:	b.n	b796 <EventResponder::triggerEventNotImmediate()+0x4a>
    b7b8:	.word	0x20017a7c
    b7bc:	.word	0x20017a88
    b7c0:	.word	0x20017a84
    b7c4:	.word	0x20017a80
    b7c8:	.word	0xe000ed04

0000b7cc <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    b7cc:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b7ce:	mrs	r1, PRIMASK
		__disable_irq();
    b7d2:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    b7d4:	ldr	r4, [pc, #48]	; (b808 <EventResponder::runFromInterrupt()+0x3c>)
    b7d6:	ldr	r3, [r4, #0]
		if (first) {
    b7d8:	cbz	r3, b7fe <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    b7da:	ldr	r6, [pc, #48]	; (b80c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    b7dc:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    b7de:	ldr	r2, [r3, #20]
    b7e0:	str	r2, [r4, #0]
			if (firstInterrupt) {
    b7e2:	cbz	r2, b804 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    b7e4:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b7e6:	cbnz	r1, b7ea <EventResponder::runFromInterrupt()+0x1e>
    b7e8:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    b7ea:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    b7ec:	mov	r0, r3
    b7ee:	ldr	r3, [r3, #8]
    b7f0:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b7f2:	mrs	r1, PRIMASK
		__disable_irq();
    b7f6:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    b7f8:	ldr	r3, [r4, #0]
		if (first) {
    b7fa:	cmp	r3, #0
    b7fc:	bne.n	b7de <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b7fe:	cbnz	r1, b802 <EventResponder::runFromInterrupt()+0x36>
    b800:	cpsie	i
    b802:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    b804:	str	r2, [r6, #0]
    b806:	b.n	b7e6 <EventResponder::runFromInterrupt()+0x1a>
    b808:	.word	0x20017a84
    b80c:	.word	0x20017a80

0000b810 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    b810:	b.w	b7cc <EventResponder::runFromInterrupt()>

0000b814 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b814:	ldr	r2, [pc, #16]	; (b828 <systick_isr+0x14>)
    b816:	ldr	r3, [pc, #20]	; (b82c <systick_isr+0x18>)
    b818:	ldr	r1, [r2, #0]
	systick_millis_count++;
    b81a:	ldr	r2, [pc, #20]	; (b830 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b81c:	str	r1, [r3, #0]
	systick_millis_count++;
    b81e:	ldr	r3, [r2, #0]
    b820:	adds	r3, #1
    b822:	str	r3, [r2, #0]
    b824:	bx	lr
    b826:	nop
    b828:	.word	0xe0001004
    b82c:	.word	0x20018b98
    b830:	.word	0x20018b9c

0000b834 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    b834:	push	{r4, r5, r6, r7}
	uint32_t ch = 0;

	__disable_irq();
    b836:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    b838:	cbnz	r1, b85e <DMAChannel::begin(bool)+0x2a>
    b83a:	ldr	r2, [r0, #0]
    b83c:	cbz	r2, b85e <DMAChannel::begin(bool)+0x2a>
    b83e:	ldrb	r3, [r0, #4]
    b840:	cmp	r3, #15
    b842:	bhi.n	b85e <DMAChannel::begin(bool)+0x2a>
	  && (dma_channel_allocated_mask & (1 << channel))
    b844:	ldr	r4, [pc, #124]	; (b8c4 <DMAChannel::begin(bool)+0x90>)
    b846:	ldrh	r1, [r4, #0]
    b848:	asr.w	r5, r1, r3
    b84c:	lsls	r5, r5, #31
    b84e:	bpl.n	b862 <DMAChannel::begin(bool)+0x2e>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    b850:	ldr	r5, [pc, #116]	; (b8c8 <DMAChannel::begin(bool)+0x94>)
    b852:	add	r5, r3
    b854:	cmp.w	r2, r5, lsl #5
    b858:	bne.n	b862 <DMAChannel::begin(bool)+0x2e>
		// DMA channel already allocated
		__enable_irq();
    b85a:	cpsie	i
		return;
    b85c:	b.n	b87c <DMAChannel::begin(bool)+0x48>
    b85e:	ldr	r4, [pc, #100]	; (b8c4 <DMAChannel::begin(bool)+0x90>)
    b860:	ldrh	r1, [r4, #0]
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    b862:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    b864:	asr.w	r2, r1, r3
    b868:	ands.w	r2, r2, #1
    b86c:	beq.n	b880 <DMAChannel::begin(bool)+0x4c>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    b86e:	adds	r3, #1
    b870:	cmp	r3, #16
    b872:	bne.n	b864 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    b874:	cpsie	i
			TCD = (TCD_t *)0;
    b876:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    b878:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    b87a:	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    b87c:	pop	{r4, r5, r6, r7}
    b87e:	bx	lr
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    b880:	movs	r5, #1
    b882:	lsls	r5, r3
    b884:	orrs	r1, r5
    b886:	strh	r1, [r4, #0]
			__enable_irq();
    b888:	cpsie	i
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    b88a:	ldr	r6, [pc, #64]	; (b8cc <DMAChannel::begin(bool)+0x98>)
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    b88c:	uxtb	r4, r3
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    b88e:	ldr	r1, [pc, #56]	; (b8c8 <DMAChannel::begin(bool)+0x94>)
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    b890:	movw	r7, #1154	; 0x482
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    b894:	strb	r4, [r0, #4]
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    b896:	add	r1, r3
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    b898:	ldr	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    b89a:	lsls	r3, r1, #5
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    b89c:	orr.w	r5, r5, #192	; 0xc0
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    b8a0:	ldr	r1, [pc, #44]	; (b8d0 <DMAChannel::begin(bool)+0x9c>)
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    b8a2:	str	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    b8a4:	str	r7, [r1, #0]
	DMA_CERQ = ch;
    b8a6:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    b8a8:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    b8aa:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    b8ac:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    b8ae:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    b8b0:	str	r2, [r3, #0]
	*p++ = 0;
    b8b2:	str	r2, [r3, #4]
	*p++ = 0;
    b8b4:	str	r2, [r3, #8]
	*p++ = 0;
    b8b6:	str	r2, [r3, #12]
	*p++ = 0;
    b8b8:	str	r2, [r3, #16]
	*p++ = 0;
    b8ba:	str	r2, [r3, #20]
	*p++ = 0;
    b8bc:	str	r2, [r3, #24]
	*p++ = 0;
    b8be:	str	r2, [r3, #28]
}
    b8c0:	pop	{r4, r5, r6, r7}
    b8c2:	bx	lr
    b8c4:	.word	0x20018bba
    b8c8:	.word	0x02007480
    b8cc:	.word	0x400fc000
    b8d0:	.word	0x400e8000

0000b8d4 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    b8d4:	ldrb	r3, [r0, #4]
    b8d6:	cmp	r3, #15
    b8d8:	bhi.n	b8fc <DMAChannel::release()+0x28>
	DMA_CERQ = channel;
    b8da:	ldr	r2, [pc, #36]	; (b900 <DMAChannel::release()+0x2c>)
    b8dc:	strb	r3, [r2, #26]
	__disable_irq();
    b8de:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    b8e0:	ldr	r1, [pc, #32]	; (b904 <DMAChannel::release()+0x30>)
    b8e2:	movs	r3, #1
    b8e4:	ldrb	r2, [r0, #4]
    b8e6:	lsl.w	r2, r3, r2
    b8ea:	ldrh	r3, [r1, #0]
    b8ec:	bic.w	r3, r3, r2
    b8f0:	strh	r3, [r1, #0]
	__enable_irq();
    b8f2:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    b8f4:	movs	r2, #16
	TCD = (TCD_t *)0;
    b8f6:	movs	r3, #0
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    b8f8:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    b8fa:	str	r3, [r0, #0]
    b8fc:	bx	lr
    b8fe:	nop
    b900:	.word	0x400e8000
    b904:	.word	0x20018bba

0000b908 <Print::println(char const*)>:
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    b908:	push	{r3, r4, r5, lr}
    b90a:	mov	r5, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    b90c:	mov	r4, r1
    b90e:	cbz	r1, b924 <Print::println(char const*)+0x1c>
							  return write((const uint8_t *)str, strlen(str)); }
    b910:	mov	r0, r1
    b912:	bl	cdc0 <strlen>
    b916:	ldr	r3, [r5, #0]
    b918:	mov	r2, r0
    b91a:	mov	r1, r4
    b91c:	ldr	r3, [r3, #4]
    b91e:	mov	r0, r5
    b920:	blx	r3
    b922:	mov	r4, r0
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    b924:	mov	r0, r5
    b926:	bl	ba34 <Print::println()>
    b92a:	add	r0, r4
    b92c:	pop	{r3, r4, r5, pc}
    b92e:	nop

0000b930 <Print::println(unsigned long, int)>:
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    b930:	push	{r3, r4, r5, lr}
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    b932:	uxtb	r2, r2
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    b934:	mov	r5, r0
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    b936:	movs	r3, #0
    b938:	bl	ba88 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    b93c:	mov	r4, r0
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    b93e:	mov	r0, r5
    b940:	bl	ba34 <Print::println()>
    b944:	add	r0, r4
    b946:	pop	{r3, r4, r5, pc}

0000b948 <usb_serial_class::clear()>:
	// returns early, when buffered data has been given to Teensy's USB device
	// controller, but before your PC's USB host controller actually transfers
	// the data across your USB cable.
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
    b948:	b.w	9ff0 <usb_serial_flush_input>

0000b94c <usb_serial_class::peek()>:
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
	// Returns the next received byte, but does not remove it from the receive
	// buffer.  Returns -1 if nothing has been received from your PC.
        virtual int peek() { return usb_serial_peekchar(); }
    b94c:	b.w	9f98 <usb_serial_peekchar>

0000b950 <usb_serial_class::read()>:
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
    b950:	b.w	a064 <usb_serial_getchar>

0000b954 <usb_serial_class::available()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
    b954:	b.w	9fdc <usb_serial_available>

0000b958 <usb_serial_class::flush()>:
	// Wait for all data written by print() or write() to actually transmit to
	// your PC.  On Teensy 4, this function has a known limitation where it
	// returns early, when buffered data has been given to Teensy's USB device
	// controller, but before your PC's USB host controller actually transfers
	// the data across your USB cable.
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    b958:	b.w	a118 <usb_serial_flush_output>

0000b95c <usb_serial_class::availableForWrite()>:
	size_t write(int n) { return write((uint8_t)n); }
	// Returns the number of bytes which may be transmitted by write() or print()
	// without waiting.  Typically programs which must maintain rapid checking
	// and response to sensors use availableForWrite() to decide whether to
	// transmit.
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    b95c:	b.w	a0c8 <usb_serial_write_buffer_free>

0000b960 <usb_serial_class::write(unsigned char const*, unsigned int)>:
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b960:	mov	r0, r1
    b962:	mov	r1, r2
    b964:	b.w	a0b0 <usb_serial_write>

0000b968 <usb_serial_class::write(unsigned char)>:
	// the data across your USB cable.
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b968:	mov	r0, r1
    b96a:	b.w	a084 <usb_serial_putchar>
    b96e:	nop

0000b970 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    b970:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    b972:	bl	1898 <setup>
	while (1) {
		loop();
    b976:	bl	1608 <loop>
		yield();
    b97a:	bl	b65c <yield>
    b97e:	b.n	b976 <main+0x6>

0000b980 <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    b980:	push	{r4, r5, r6, lr}
    b982:	ldr	r5, [pc, #40]	; (b9ac <Stream::timedRead()+0x2c>)
    b984:	mov	r4, r0
    b986:	ldr	r6, [r5, #0]
    b988:	b.n	b998 <Stream::timedRead()+0x18>
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    if (c >= 0) return c;
    yield();
    b98a:	bl	b65c <yield>
    b98e:	ldr	r3, [r5, #0]
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  unsigned long startMillis = millis();
  do {
    b990:	ldr	r2, [r4, #8]
    b992:	subs	r3, r3, r6
    b994:	cmp	r3, r2
    b996:	bcs.n	b9a6 <Stream::timedRead()+0x26>
    c = read();
    b998:	ldr	r3, [r4, #0]
    b99a:	mov	r0, r4
    b99c:	ldr	r3, [r3, #20]
    b99e:	blx	r3
    if (c >= 0) return c;
    b9a0:	cmp	r0, #0
    b9a2:	blt.n	b98a <Stream::timedRead()+0xa>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    b9a4:	pop	{r4, r5, r6, pc}
  do {
    c = read();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    b9a6:	mov.w	r0, #4294967295
}
    b9aa:	pop	{r4, r5, r6, pc}
    b9ac:	.word	0x20018b9c

0000b9b0 <Stream::readBytesUntil(char, char*, unsigned int)>:
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    b9b0:	cbz	r3, b9ec <Stream::readBytesUntil(char, char*, unsigned int)+0x3c>
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    b9b2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    b9b6:	clz	r4, r2
    b9ba:	mov	r5, r2
    b9bc:	lsrs	r4, r4, #5
    b9be:	cbnz	r4, b9f0 <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
	length--;
	size_t index = 0;
	while (index < length) {
    b9c0:	subs	r6, r3, #1
    b9c2:	mov	r7, r0
    b9c4:	mov	r8, r1
    b9c6:	bne.n	b9d8 <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    b9c8:	b.n	ba04 <Stream::readBytesUntil(char, char*, unsigned int)+0x54>
		int c = timedRead();
		if (c == terminator) break;
		if (c < 0) {
    b9ca:	cmp	r0, #0
    b9cc:	blt.n	b9f6 <Stream::readBytesUntil(char, char*, unsigned int)+0x46>
			setReadError();
			break;
		}
		*buffer++ = (char)c;
		index++;
    b9ce:	adds	r4, #1
		if (c == terminator) break;
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    b9d0:	strb.w	r0, [r5], #1
{
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
	length--;
	size_t index = 0;
	while (index < length) {
    b9d4:	cmp	r6, r4
    b9d6:	beq.n	b9e2 <Stream::readBytesUntil(char, char*, unsigned int)+0x32>
		int c = timedRead();
    b9d8:	mov	r0, r7
    b9da:	bl	b980 <Stream::timedRead()>
		if (c == terminator) break;
    b9de:	cmp	r8, r0
    b9e0:	bne.n	b9ca <Stream::readBytesUntil(char, char*, unsigned int)+0x1a>
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    b9e2:	movs	r3, #0
	return index; // return number of characters, not including null terminator
    b9e4:	mov	r0, r4
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    b9e6:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
    b9e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    b9ec:	movs	r0, #0
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
	return index; // return number of characters, not including null terminator
}
    b9ee:	bx	lr
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    b9f0:	movs	r0, #0
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
	return index; // return number of characters, not including null terminator
}
    b9f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    b9f6:	movs	r3, #1
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
	return index; // return number of characters, not including null terminator
    b9f8:	mov	r0, r4
    b9fa:	strb	r3, [r7, #12]
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    b9fc:	movs	r3, #0
    b9fe:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
    ba00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
	length--;
	size_t index = 0;
    ba04:	mov	r4, r6
    ba06:	b.n	b9e2 <Stream::readBytesUntil(char, char*, unsigned int)+0x32>

0000ba08 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    ba08:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    ba0a:	mov	r6, r1
    ba0c:	cbz	r1, ba2c <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    ba0e:	cbz	r2, ba30 <Print::write(unsigned char const*, unsigned int)+0x28>
    ba10:	mov	r7, r0
    ba12:	mov	r4, r2
    ba14:	movs	r5, #0
    ba16:	ldr	r3, [r7, #0]
    ba18:	mov	r0, r7
    ba1a:	ldrb.w	r1, [r6], #1
    ba1e:	ldr	r3, [r3, #0]
    ba20:	blx	r3
    ba22:	subs	r4, #1
    ba24:	add	r5, r0
    ba26:	bne.n	ba16 <Print::write(unsigned char const*, unsigned int)+0xe>
    ba28:	mov	r0, r5
    ba2a:	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    ba2c:	mov	r0, r1
    ba2e:	pop	{r3, r4, r5, r6, r7, pc}
    ba30:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    ba32:	pop	{r3, r4, r5, r6, r7, pc}

0000ba34 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    ba34:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    ba36:	ldr	r4, [pc, #24]	; (ba50 <Print::println()+0x1c>)
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    ba38:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    ba3a:	ldr	r3, [r0, #0]
    ba3c:	movs	r2, #2
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    ba3e:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    ba40:	add	r1, sp, #4
    ba42:	ldr	r3, [r3, #4]
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    ba44:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    ba48:	blx	r3
}
    ba4a:	add	sp, #8
    ba4c:	pop	{r4, pc}
    ba4e:	nop
    ba50:	.word	0x20000398

0000ba54 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	if (file >= 0 && file <= 2) file = (int)&Serial;
    ba54:	ldr	r3, [pc, #12]	; (ba64 <_write+0x10>)
    ba56:	cmp	r0, #2
    ba58:	it	ls
    ba5a:	movls	r0, r3
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    ba5c:	ldr	r3, [r0, #0]
    ba5e:	ldr	r3, [r3, #4]
    ba60:	bx	r3
    ba62:	nop
    ba64:	.word	0x20001f78

0000ba68 <Print::printf(char const*, ...)>:
}
}

int Print::printf(const char *format, ...)
{
    ba68:	push	{r1, r2, r3}
    ba6a:	push	{lr}
    ba6c:	sub	sp, #8
    ba6e:	add	r3, sp, #12
    ba70:	ldr.w	r1, [r3], #4
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    ba74:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    ba76:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    ba78:	bl	10398 <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    ba7c:	add	sp, #8
    ba7e:	ldr.w	lr, [sp], #4
    ba82:	add	sp, #12
    ba84:	bx	lr
    ba86:	nop

0000ba88 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return retval;
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    ba88:	push	{r4, r5, r6, r7, lr}
    ba8a:	mov	r6, r0
    ba8c:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    ba8e:	cmp	r2, #0
    ba90:	beq.n	bafa <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    ba92:	cmp	r2, #1
    ba94:	it	eq
    ba96:	moveq	r2, #10
	}


	if (n == 0) {
    ba98:	cbz	r1, baf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    ba9a:	movs	r5, #33	; 0x21
    ba9c:	b.n	baa0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    ba9e:	uxtb	r5, r7
    baa0:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    baa2:	udiv	r4, r1, r2
    baa6:	mls	r1, r2, r4, r1
    baaa:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    baac:	cmp	r1, #9
    baae:	add.w	r1, r0, #55	; 0x37
    bab2:	add.w	r0, r0, #48	; 0x30
    bab6:	it	hi
    bab8:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    baba:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    babc:	add	r4, sp, #40	; 0x28
    babe:	it	ls
    bac0:	uxtbls	r0, r0
    bac2:	add	r4, r5
    bac4:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    bac8:	cmp	r1, #0
    baca:	bne.n	ba9e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    bacc:	cbz	r3, badc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    bace:	subs	r5, #1
		buf[i] = '-';
    bad0:	add	r3, sp, #40	; 0x28
    bad2:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    bad4:	uxtb	r5, r5
		buf[i] = '-';
    bad6:	add	r3, r5
    bad8:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    badc:	ldr	r3, [r6, #0]
    bade:	add	r1, sp, #4
    bae0:	rsb	r2, r5, #34	; 0x22
    bae4:	mov	r0, r6
    bae6:	add	r1, r5
    bae8:	ldr	r3, [r3, #4]
    baea:	blx	r3
}
    baec:	add	sp, #44	; 0x2c
    baee:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    baf0:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    baf2:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    baf4:	strb.w	r2, [sp, #37]	; 0x25
    baf8:	b.n	bacc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    bafa:	ldr	r3, [r0, #0]
    bafc:	uxtb	r1, r1
    bafe:	ldr	r3, [r3, #0]
    bb00:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    bb02:	add	sp, #44	; 0x2c
    bb04:	pop	{r4, r5, r6, r7, pc}
    bb06:	nop

0000bb08 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    bb08:	cmp	r1, #0
    bb0a:	blt.n	bb14 <Print::print(long)+0xc>
	return count;
}

size_t Print::print(long n)
{
	uint8_t sign=0;
    bb0c:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    bb0e:	movs	r2, #10
    bb10:	b.w	ba88 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    bb14:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    bb16:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    bb18:	movs	r2, #10
    bb1a:	b.w	ba88 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    bb1e:	nop

0000bb20 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    bb20:	vcmp.f64	d0, d0
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    bb24:	push	{r4, r5, r6, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    bb26:	vmrs	APSR_nzcv, fpscr
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    bb2a:	mov	r5, r0
    bb2c:	vpush	{d8}
    bb30:	sub	sp, #24
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    bb32:	bvs.w	bc58 <Print::printFloat(double, unsigned char)+0x138>
    	if (isinf(number)) return print("inf");
    bb36:	vabs.f64	d7, d0
    bb3a:	vldr	d6, [pc, #300]	; bc68 <Print::printFloat(double, unsigned char)+0x148>
    bb3e:	vcmp.f64	d7, d6
    bb42:	vmrs	APSR_nzcv, fpscr
    bb46:	ble.n	bb5e <Print::printFloat(double, unsigned char)+0x3e>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
    bb48:	ldr	r3, [r0, #0]
    bb4a:	movs	r2, #3
    bb4c:	ldr	r1, [pc, #312]	; (bc88 <Print::printFloat(double, unsigned char)+0x168>)
    bb4e:	ldr	r3, [r3, #4]
    bb50:	blx	r3
    bb52:	mov	r6, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    bb54:	mov	r0, r6
    bb56:	add	sp, #24
    bb58:	vpop	{d8}
    bb5c:	pop	{r4, r5, r6, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    bb5e:	vldr	d7, [pc, #272]	; bc70 <Print::printFloat(double, unsigned char)+0x150>
    bb62:	vcmpe.f64	d0, d7
    bb66:	vmrs	APSR_nzcv, fpscr
    bb6a:	bgt.n	bc1e <Print::printFloat(double, unsigned char)+0xfe>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    bb6c:	vldr	d7, [pc, #264]	; bc78 <Print::printFloat(double, unsigned char)+0x158>
    bb70:	vcmpe.f64	d0, d7
    bb74:	vmrs	APSR_nzcv, fpscr
    bb78:	bmi.n	bc1e <Print::printFloat(double, unsigned char)+0xfe>
	
	// Handle negative numbers
	if (number < 0.0) {
    bb7a:	vcmpe.f64	d0, #0.0
    bb7e:	mov	r4, r1
    bb80:	vmrs	APSR_nzcv, fpscr
    bb84:	bmi.n	bc34 <Print::printFloat(double, unsigned char)+0x114>
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    bb86:	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    bb88:	cmp	r4, #0
    bb8a:	beq.n	bc3c <Print::printFloat(double, unsigned char)+0x11c>
    bb8c:	vmov.f64	d8, #96	; 0x3f000000  0.5
    bb90:	movs	r2, #0
		rounding *= 0.1;
    bb92:	vldr	d7, [pc, #236]	; bc80 <Print::printFloat(double, unsigned char)+0x160>
    bb96:	adds	r2, #1
    bb98:	vmul.f64	d8, d8, d7
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    bb9c:	uxtb	r1, r2
    bb9e:	cmp	r4, r1
    bba0:	bhi.n	bb96 <Print::printFloat(double, unsigned char)+0x76>
		rounding *= 0.1;
	}
	number += rounding;
    bba2:	vadd.f64	d0, d0, d8

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    bba6:	movs	r2, #10
    bba8:	mov	r0, r5
		rounding *= 0.1;
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    bbaa:	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    bbae:	vcvt.f64.u32	d8, s15
	count += printNumber(int_part, 10, sign);
    bbb2:	vmov	r1, s15
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    bbb6:	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    bbba:	bl	ba88 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    bbbe:	cmp	r4, #15

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    bbc0:	mov.w	r2, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    bbc4:	vmov.f64	d7, #36	; 0x41200000  10.0
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    bbc8:	mov.w	r3, #46	; 0x2e
    bbcc:	it	cs
    bbce:	movcs	r4, #15
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    bbd0:	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    bbd2:	strb.w	r3, [sp, #8]
    bbd6:	add	r4, r2
    bbd8:	uxtb	r4, r4

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    bbda:	vmul.f64	d0, d8, d7
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    bbde:	adds	r3, r2, #1
    bbe0:	add	r1, sp, #24
    bbe2:	add	r1, r2
    bbe4:	uxtb	r2, r3
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    bbe6:	cmp	r2, r4
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    bbe8:	vcvt.u32.f64	s13, d0
    bbec:	vstr	s13, [sp, #4]
    bbf0:	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    bbf4:	vmov	s13, r3
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    bbf8:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    bbfc:	vcvt.f64.s32	d8, s13
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    bc00:	strb.w	r3, [r1, #-16]
			remainder -= n; 
    bc04:	vsub.f64	d8, d0, d8
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    bc08:	bne.n	bbda <Print::printFloat(double, unsigned char)+0xba>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    bc0a:	ldr	r3, [r5, #0]
    bc0c:	mov	r0, r5
    bc0e:	add	r1, sp, #8
    bc10:	ldr	r3, [r3, #4]
    bc12:	blx	r3
	}
	return count;
}
    bc14:	mov	r0, r6
    bc16:	add	sp, #24
    bc18:	vpop	{d8}
    bc1c:	pop	{r4, r5, r6, pc}
    bc1e:	ldr	r3, [r5, #0]
    bc20:	movs	r2, #3
    bc22:	ldr	r1, [pc, #104]	; (bc8c <Print::printFloat(double, unsigned char)+0x16c>)
    bc24:	ldr	r3, [r3, #4]
    bc26:	blx	r3
    bc28:	mov	r6, r0
    bc2a:	mov	r0, r6
    bc2c:	add	sp, #24
    bc2e:	vpop	{d8}
    bc32:	pop	{r4, r5, r6, pc}
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    bc34:	vneg.f64	d0, d0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    bc38:	movs	r3, #1
    bc3a:	b.n	bb88 <Print::printFloat(double, unsigned char)+0x68>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    bc3c:	vmov.f64	d7, #96	; 0x3f000000  0.5
    bc40:	mov	r0, r5
    bc42:	movs	r2, #10
    bc44:	vadd.f64	d0, d0, d7
    bc48:	vcvt.u32.f64	s15, d0
    bc4c:	vmov	r1, s15
    bc50:	bl	ba88 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    bc54:	mov	r6, r0
    bc56:	b.n	bb54 <Print::printFloat(double, unsigned char)+0x34>
    bc58:	ldr	r3, [r0, #0]
    bc5a:	movs	r2, #3
    bc5c:	ldr	r1, [pc, #48]	; (bc90 <Print::printFloat(double, unsigned char)+0x170>)
    bc5e:	ldr	r3, [r3, #4]
    bc60:	blx	r3
    bc62:	mov	r6, r0
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    bc64:	b.n	bb54 <Print::printFloat(double, unsigned char)+0x34>
    bc66:	nop
    bc68:	.word	0xffffffff
    bc6c:	.word	0x7fefffff
    bc70:	.word	0xe0000000
    bc74:	.word	0x41efffff
    bc78:	.word	0xe0000000
    bc7c:	.word	0xc1efffff
    bc80:	.word	0xa0000000
    bc84:	.word	0x3fb99999
    bc88:	.word	0x200019e8
    bc8c:	.word	0x200019e4
    bc90:	.word	0x200019e0

0000bc94 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    bc94:	bx	lr
    bc96:	nop

0000bc98 <operator new(unsigned int)>:
    bc98:	b.w	c0d8 <malloc>

0000bc9c <operator delete(void*, unsigned int)>:
    bc9c:	b.w	c0e8 <free>

0000bca0 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    bca0:	push	{r4, r5, r6, r7}
    bca2:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    bca4:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    bca6:	mov	r7, r6
    bca8:	b.n	bcac <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    bcaa:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    bcac:	udiv	r3, r0, r2
    bcb0:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    bcb4:	add.w	r4, r0, #55	; 0x37
    bcb8:	cmp	r0, #9
    bcba:	add.w	r0, r0, #48	; 0x30
    bcbe:	uxtb	r4, r4
    bcc0:	it	ls
    bcc2:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    bcc4:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    bcc6:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    bcca:	cmp	r3, #0
    bccc:	bne.n	bcaa <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    bcce:	adds	r2, r1, r5
    bcd0:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    bcd2:	cbz	r5, bce8 <ultoa+0x48>
    bcd4:	adds	r3, #1
		t = buf[j];
    bcd6:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    bcda:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    bcdc:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    bcde:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    bce0:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    bce2:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    bce6:	blt.n	bcd4 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    bce8:	mov	r0, r1
    bcea:	pop	{r4, r5, r6, r7}
    bcec:	bx	lr
    bcee:	nop

0000bcf0 <nanf>:
    bcf0:	vldr	s0, [pc, #4]	; bcf8 <nanf+0x8>
    bcf4:	bx	lr
    bcf6:	nop
    bcf8:	.word	0x7fc00000

0000bcfc <__aeabi_atexit>:
    bcfc:	mov	r3, r1
    bcfe:	mov	r1, r0
    bd00:	mov	r0, r3
    bd02:	b.w	c020 <__cxa_atexit>
    bd06:	nop

0000bd08 <__aeabi_uldivmod>:
    bd08:	cbnz	r3, bd20 <__aeabi_uldivmod+0x18>
    bd0a:	cbnz	r2, bd20 <__aeabi_uldivmod+0x18>
    bd0c:	cmp	r1, #0
    bd0e:	it	eq
    bd10:	cmpeq	r0, #0
    bd12:	itt	ne
    bd14:	movne.w	r1, #4294967295
    bd18:	movne.w	r0, #4294967295
    bd1c:	b.w	c01c <__aeabi_idiv0>
    bd20:	sub.w	ip, sp, #8
    bd24:	strd	ip, lr, [sp, #-16]!
    bd28:	bl	bd38 <__udivmoddi4>
    bd2c:	ldr.w	lr, [sp, #4]
    bd30:	ldrd	r2, r3, [sp, #8]
    bd34:	add	sp, #16
    bd36:	bx	lr

0000bd38 <__udivmoddi4>:
    bd38:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd3c:	mov	ip, r1
    bd3e:	mov	r6, r1
    bd40:	mov	r4, r0
    bd42:	ldr	r5, [sp, #32]
    bd44:	cmp	r3, #0
    bd46:	bne.n	bdea <__udivmoddi4+0xb2>
    bd48:	cmp	r2, r1
    bd4a:	mov	r7, r2
    bd4c:	bls.n	be28 <__udivmoddi4+0xf0>
    bd4e:	clz	lr, r2
    bd52:	cmp.w	lr, #0
    bd56:	beq.n	bd70 <__udivmoddi4+0x38>
    bd58:	rsb	r4, lr, #32
    bd5c:	lsr.w	r4, r0, r4
    bd60:	lsl.w	r6, r1, lr
    bd64:	orr.w	ip, r4, r6
    bd68:	lsl.w	r7, r2, lr
    bd6c:	lsl.w	r4, r0, lr
    bd70:	mov.w	r9, r7, lsr #16
    bd74:	lsrs	r2, r4, #16
    bd76:	udiv	r0, ip, r9
    bd7a:	uxth.w	r8, r7
    bd7e:	mls	r6, r9, r0, ip
    bd82:	orr.w	r6, r2, r6, lsl #16
    bd86:	mul.w	r3, r0, r8
    bd8a:	cmp	r3, r6
    bd8c:	bls.n	bda2 <__udivmoddi4+0x6a>
    bd8e:	adds	r6, r6, r7
    bd90:	add.w	r2, r0, #4294967295
    bd94:	bcs.w	bfdc <__udivmoddi4+0x2a4>
    bd98:	cmp	r3, r6
    bd9a:	bls.w	bfdc <__udivmoddi4+0x2a4>
    bd9e:	subs	r0, #2
    bda0:	add	r6, r7
    bda2:	subs	r6, r6, r3
    bda4:	uxth	r2, r4
    bda6:	udiv	r3, r6, r9
    bdaa:	mls	r6, r9, r3, r6
    bdae:	orr.w	r4, r2, r6, lsl #16
    bdb2:	mul.w	r8, r3, r8
    bdb6:	cmp	r8, r4
    bdb8:	bls.n	bdce <__udivmoddi4+0x96>
    bdba:	adds	r4, r4, r7
    bdbc:	add.w	r2, r3, #4294967295
    bdc0:	bcs.w	bfd8 <__udivmoddi4+0x2a0>
    bdc4:	cmp	r8, r4
    bdc6:	bls.w	bfd8 <__udivmoddi4+0x2a0>
    bdca:	subs	r3, #2
    bdcc:	add	r4, r7
    bdce:	rsb	r4, r8, r4
    bdd2:	orr.w	r0, r3, r0, lsl #16
    bdd6:	movs	r1, #0
    bdd8:	cmp	r5, #0
    bdda:	beq.n	bea2 <__udivmoddi4+0x16a>
    bddc:	lsr.w	r4, r4, lr
    bde0:	movs	r3, #0
    bde2:	str	r4, [r5, #0]
    bde4:	str	r3, [r5, #4]
    bde6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bdea:	cmp	r3, r1
    bdec:	bls.n	bdfe <__udivmoddi4+0xc6>
    bdee:	cmp	r5, #0
    bdf0:	beq.n	be9e <__udivmoddi4+0x166>
    bdf2:	movs	r1, #0
    bdf4:	stmia.w	r5, {r0, r6}
    bdf8:	mov	r0, r1
    bdfa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bdfe:	clz	r1, r3
    be02:	cmp	r1, #0
    be04:	bne.w	bf28 <__udivmoddi4+0x1f0>
    be08:	cmp	r3, r6
    be0a:	bcc.n	be12 <__udivmoddi4+0xda>
    be0c:	cmp	r2, r0
    be0e:	bhi.w	c002 <__udivmoddi4+0x2ca>
    be12:	subs	r4, r0, r2
    be14:	sbc.w	r6, r6, r3
    be18:	movs	r0, #1
    be1a:	mov	ip, r6
    be1c:	cmp	r5, #0
    be1e:	beq.n	bea2 <__udivmoddi4+0x16a>
    be20:	stmia.w	r5, {r4, ip}
    be24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    be28:	cbnz	r2, be30 <__udivmoddi4+0xf8>
    be2a:	movs	r7, #1
    be2c:	udiv	r7, r7, r2
    be30:	clz	lr, r7
    be34:	cmp.w	lr, #0
    be38:	bne.n	bea6 <__udivmoddi4+0x16e>
    be3a:	subs	r3, r6, r7
    be3c:	mov.w	r8, r7, lsr #16
    be40:	uxth.w	ip, r7
    be44:	movs	r1, #1
    be46:	udiv	r0, r3, r8
    be4a:	lsrs	r2, r4, #16
    be4c:	mls	r6, r8, r0, r3
    be50:	orr.w	r6, r2, r6, lsl #16
    be54:	mul.w	r3, ip, r0
    be58:	cmp	r3, r6
    be5a:	bls.n	be6c <__udivmoddi4+0x134>
    be5c:	adds	r6, r6, r7
    be5e:	add.w	r2, r0, #4294967295
    be62:	bcs.n	be6a <__udivmoddi4+0x132>
    be64:	cmp	r3, r6
    be66:	bhi.w	c006 <__udivmoddi4+0x2ce>
    be6a:	mov	r0, r2
    be6c:	subs	r6, r6, r3
    be6e:	uxth	r2, r4
    be70:	udiv	r3, r6, r8
    be74:	mls	r6, r8, r3, r6
    be78:	orr.w	r4, r2, r6, lsl #16
    be7c:	mul.w	ip, ip, r3
    be80:	cmp	ip, r4
    be82:	bls.n	be94 <__udivmoddi4+0x15c>
    be84:	adds	r4, r4, r7
    be86:	add.w	r2, r3, #4294967295
    be8a:	bcs.n	be92 <__udivmoddi4+0x15a>
    be8c:	cmp	ip, r4
    be8e:	bhi.w	bffc <__udivmoddi4+0x2c4>
    be92:	mov	r3, r2
    be94:	rsb	r4, ip, r4
    be98:	orr.w	r0, r3, r0, lsl #16
    be9c:	b.n	bdd8 <__udivmoddi4+0xa0>
    be9e:	mov	r1, r5
    bea0:	mov	r0, r5
    bea2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bea6:	rsb	r1, lr, #32
    beaa:	lsl.w	r3, r6, lr
    beae:	lsl.w	r7, r7, lr
    beb2:	lsr.w	r9, r0, r1
    beb6:	mov.w	r8, r7, lsr #16
    beba:	lsrs	r6, r1
    bebc:	orr.w	r9, r9, r3
    bec0:	udiv	sl, r6, r8
    bec4:	mov.w	r4, r9, lsr #16
    bec8:	mls	r6, r8, sl, r6
    becc:	uxth.w	ip, r7
    bed0:	orr.w	r3, r4, r6, lsl #16
    bed4:	mul.w	r2, sl, ip
    bed8:	cmp	r2, r3
    beda:	lsl.w	r4, r0, lr
    bede:	bls.n	bef6 <__udivmoddi4+0x1be>
    bee0:	adds	r3, r3, r7
    bee2:	add.w	r1, sl, #4294967295
    bee6:	bcs.w	bff8 <__udivmoddi4+0x2c0>
    beea:	cmp	r2, r3
    beec:	bls.w	bff8 <__udivmoddi4+0x2c0>
    bef0:	sub.w	sl, sl, #2
    bef4:	add	r3, r7
    bef6:	subs	r3, r3, r2
    bef8:	uxth.w	r9, r9
    befc:	udiv	r1, r3, r8
    bf00:	mls	r3, r8, r1, r3
    bf04:	orr.w	r3, r9, r3, lsl #16
    bf08:	mul.w	r6, r1, ip
    bf0c:	cmp	r6, r3
    bf0e:	bls.n	bf20 <__udivmoddi4+0x1e8>
    bf10:	adds	r3, r3, r7
    bf12:	add.w	r2, r1, #4294967295
    bf16:	bcs.n	bff0 <__udivmoddi4+0x2b8>
    bf18:	cmp	r6, r3
    bf1a:	bls.n	bff0 <__udivmoddi4+0x2b8>
    bf1c:	subs	r1, #2
    bf1e:	add	r3, r7
    bf20:	subs	r3, r3, r6
    bf22:	orr.w	r1, r1, sl, lsl #16
    bf26:	b.n	be46 <__udivmoddi4+0x10e>
    bf28:	rsb	lr, r1, #32
    bf2c:	lsr.w	r4, r2, lr
    bf30:	lsls	r3, r1
    bf32:	orrs	r3, r4
    bf34:	lsr.w	r7, r0, lr
    bf38:	lsl.w	r4, r6, r1
    bf3c:	mov.w	ip, r3, lsr #16
    bf40:	lsr.w	r6, r6, lr
    bf44:	orrs	r4, r7
    bf46:	udiv	r9, r6, ip
    bf4a:	lsrs	r7, r4, #16
    bf4c:	mls	r6, ip, r9, r6
    bf50:	uxth.w	r8, r3
    bf54:	orr.w	r6, r7, r6, lsl #16
    bf58:	mul.w	r7, r9, r8
    bf5c:	cmp	r7, r6
    bf5e:	lsl.w	r2, r2, r1
    bf62:	lsl.w	sl, r0, r1
    bf66:	bls.n	bf7a <__udivmoddi4+0x242>
    bf68:	adds	r6, r6, r3
    bf6a:	add.w	r0, r9, #4294967295
    bf6e:	bcs.n	bff4 <__udivmoddi4+0x2bc>
    bf70:	cmp	r7, r6
    bf72:	bls.n	bff4 <__udivmoddi4+0x2bc>
    bf74:	sub.w	r9, r9, #2
    bf78:	add	r6, r3
    bf7a:	subs	r6, r6, r7
    bf7c:	uxth	r0, r4
    bf7e:	udiv	r4, r6, ip
    bf82:	mls	r6, ip, r4, r6
    bf86:	orr.w	r7, r0, r6, lsl #16
    bf8a:	mul.w	r8, r4, r8
    bf8e:	cmp	r8, r7
    bf90:	bls.n	bfa2 <__udivmoddi4+0x26a>
    bf92:	adds	r7, r7, r3
    bf94:	add.w	r0, r4, #4294967295
    bf98:	bcs.n	bfec <__udivmoddi4+0x2b4>
    bf9a:	cmp	r8, r7
    bf9c:	bls.n	bfec <__udivmoddi4+0x2b4>
    bf9e:	subs	r4, #2
    bfa0:	add	r7, r3
    bfa2:	orr.w	r0, r4, r9, lsl #16
    bfa6:	rsb	r7, r8, r7
    bfaa:	umull	r8, r9, r0, r2
    bfae:	cmp	r7, r9
    bfb0:	mov	r4, r8
    bfb2:	mov	r6, r9
    bfb4:	bcc.n	bfe0 <__udivmoddi4+0x2a8>
    bfb6:	beq.n	c00c <__udivmoddi4+0x2d4>
    bfb8:	cbz	r5, c014 <__udivmoddi4+0x2dc>
    bfba:	subs.w	r3, sl, r4
    bfbe:	sbc.w	r7, r7, r6
    bfc2:	lsl.w	lr, r7, lr
    bfc6:	lsrs	r3, r1
    bfc8:	lsrs	r7, r1
    bfca:	orr.w	r3, lr, r3
    bfce:	stmia.w	r5, {r3, r7}
    bfd2:	movs	r1, #0
    bfd4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bfd8:	mov	r3, r2
    bfda:	b.n	bdce <__udivmoddi4+0x96>
    bfdc:	mov	r0, r2
    bfde:	b.n	bda2 <__udivmoddi4+0x6a>
    bfe0:	subs.w	r4, r8, r2
    bfe4:	sbc.w	r6, r9, r3
    bfe8:	subs	r0, #1
    bfea:	b.n	bfb8 <__udivmoddi4+0x280>
    bfec:	mov	r4, r0
    bfee:	b.n	bfa2 <__udivmoddi4+0x26a>
    bff0:	mov	r1, r2
    bff2:	b.n	bf20 <__udivmoddi4+0x1e8>
    bff4:	mov	r9, r0
    bff6:	b.n	bf7a <__udivmoddi4+0x242>
    bff8:	mov	sl, r1
    bffa:	b.n	bef6 <__udivmoddi4+0x1be>
    bffc:	subs	r3, #2
    bffe:	add	r4, r7
    c000:	b.n	be94 <__udivmoddi4+0x15c>
    c002:	mov	r0, r1
    c004:	b.n	be1c <__udivmoddi4+0xe4>
    c006:	subs	r0, #2
    c008:	add	r6, r7
    c00a:	b.n	be6c <__udivmoddi4+0x134>
    c00c:	cmp	sl, r8
    c00e:	bcc.n	bfe0 <__udivmoddi4+0x2a8>
    c010:	mov	r6, r7
    c012:	b.n	bfb8 <__udivmoddi4+0x280>
    c014:	mov	r1, r5
    c016:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c01a:	nop

0000c01c <__aeabi_idiv0>:
    c01c:	bx	lr
    c01e:	nop

0000c020 <__cxa_atexit>:
    c020:	mov	r3, r2
    c022:	mov	r2, r1
    c024:	mov	r1, r0
    c026:	movs	r0, #2
    c028:	b.w	103f8 <__register_exitproc>

0000c02c <__errno>:
    c02c:	ldr	r3, [pc, #4]	; (c034 <__errno+0x8>)
    c02e:	ldr	r0, [r3, #0]
    c030:	bx	lr
    c032:	nop
    c034:	.word	0x20002508

0000c038 <__libc_init_array>:
    c038:	push	{r4, r5, r6, lr}
    c03a:	ldr	r6, [pc, #60]	; (c078 <__libc_init_array+0x40>)
    c03c:	ldr	r5, [pc, #60]	; (c07c <__libc_init_array+0x44>)
    c03e:	subs	r6, r6, r5
    c040:	asrs	r6, r6, #2
    c042:	it	ne
    c044:	movne	r4, #0
    c046:	beq.n	c054 <__libc_init_array+0x1c>
    c048:	adds	r4, #1
    c04a:	ldr.w	r3, [r5], #4
    c04e:	blx	r3
    c050:	cmp	r6, r4
    c052:	bne.n	c048 <__libc_init_array+0x10>
    c054:	ldr	r6, [pc, #40]	; (c080 <__libc_init_array+0x48>)
    c056:	ldr	r5, [pc, #44]	; (c084 <__libc_init_array+0x4c>)
    c058:	subs	r6, r6, r5
    c05a:	bl	12f00 <___init_veneer>
    c05e:	asrs	r6, r6, #2
    c060:	it	ne
    c062:	movne	r4, #0
    c064:	beq.n	c074 <__libc_init_array+0x3c>
    c066:	adds	r4, #1
    c068:	ldr.w	r3, [r5], #4
    c06c:	blx	r3
    c06e:	cmp	r6, r4
    c070:	bne.n	c066 <__libc_init_array+0x2e>
    c072:	pop	{r4, r5, r6, pc}
    c074:	pop	{r4, r5, r6, pc}
    c076:	nop
    c078:	.word	0x60002580
    c07c:	.word	0x60002580
    c080:	.word	0x600025f8
    c084:	.word	0x60002580

0000c088 <__get_current_locale>:
    c088:	ldr	r2, [pc, #12]	; (c098 <__get_current_locale+0x10>)
    c08a:	ldr	r3, [pc, #16]	; (c09c <__get_current_locale+0x14>)
    c08c:	ldr	r2, [r2, #0]
    c08e:	ldr	r0, [r2, #52]	; 0x34
    c090:	cmp	r0, #0
    c092:	it	eq
    c094:	moveq	r0, r3
    c096:	bx	lr
    c098:	.word	0x20002508
    c09c:	.word	0x20001f8c

0000c0a0 <__locale_mb_cur_max>:
    c0a0:	ldr	r3, [pc, #16]	; (c0b4 <__locale_mb_cur_max+0x14>)
    c0a2:	ldr	r2, [pc, #20]	; (c0b8 <__locale_mb_cur_max+0x18>)
    c0a4:	ldr	r3, [r3, #0]
    c0a6:	ldr	r3, [r3, #52]	; 0x34
    c0a8:	cmp	r3, #0
    c0aa:	it	eq
    c0ac:	moveq	r3, r2
    c0ae:	ldrb.w	r0, [r3, #296]	; 0x128
    c0b2:	bx	lr
    c0b4:	.word	0x20002508
    c0b8:	.word	0x20001f8c

0000c0bc <__locale_ctype_ptr_l>:
    c0bc:	ldr.w	r0, [r0, #236]	; 0xec
    c0c0:	bx	lr
    c0c2:	nop

0000c0c4 <__locale_ctype_ptr>:
    c0c4:	push	{r3, lr}
    c0c6:	ldr	r3, [pc, #12]	; (c0d4 <__locale_ctype_ptr+0x10>)
    c0c8:	ldr	r0, [r3, #0]
    c0ca:	bl	c088 <__get_current_locale>
    c0ce:	ldr.w	r0, [r0, #236]	; 0xec
    c0d2:	pop	{r3, pc}
    c0d4:	.word	0x20002508

0000c0d8 <malloc>:
    c0d8:	ldr	r3, [pc, #8]	; (c0e4 <malloc+0xc>)
    c0da:	mov	r1, r0
    c0dc:	ldr	r0, [r3, #0]
    c0de:	b.w	c0f8 <_malloc_r>
    c0e2:	nop
    c0e4:	.word	0x20002508

0000c0e8 <free>:
    c0e8:	ldr	r3, [pc, #8]	; (c0f4 <free+0xc>)
    c0ea:	mov	r1, r0
    c0ec:	ldr	r0, [r3, #0]
    c0ee:	b.w	112e8 <_free_r>
    c0f2:	nop
    c0f4:	.word	0x20002508

0000c0f8 <_malloc_r>:
    c0f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0fc:	add.w	r5, r1, #11
    c100:	cmp	r5, #22
    c102:	sub	sp, #12
    c104:	mov	r6, r0
    c106:	bls.w	c248 <_malloc_r+0x150>
    c10a:	bics.w	r5, r5, #7
    c10e:	bmi.w	c290 <_malloc_r+0x198>
    c112:	cmp	r1, r5
    c114:	bhi.w	c290 <_malloc_r+0x198>
    c118:	bl	c908 <__malloc_lock>
    c11c:	cmp.w	r5, #504	; 0x1f8
    c120:	bcc.w	c65c <_malloc_r+0x564>
    c124:	lsrs	r3, r5, #9
    c126:	beq.w	c29e <_malloc_r+0x1a6>
    c12a:	cmp	r3, #4
    c12c:	bhi.w	c436 <_malloc_r+0x33e>
    c130:	lsrs	r0, r5, #6
    c132:	add.w	lr, r0, #57	; 0x39
    c136:	mov.w	r3, lr, lsl #1
    c13a:	adds	r0, #56	; 0x38
    c13c:	ldr	r7, [pc, #784]	; (c450 <_malloc_r+0x358>)
    c13e:	add.w	r3, r7, r3, lsl #2
    c142:	sub.w	r1, r3, #8
    c146:	ldr	r4, [r3, #4]
    c148:	cmp	r1, r4
    c14a:	bne.n	c15c <_malloc_r+0x64>
    c14c:	b.n	c2a8 <_malloc_r+0x1b0>
    c14e:	cmp	r2, #0
    c150:	bge.w	c2ac <_malloc_r+0x1b4>
    c154:	ldr	r4, [r4, #12]
    c156:	cmp	r1, r4
    c158:	beq.w	c2a8 <_malloc_r+0x1b0>
    c15c:	ldr	r3, [r4, #4]
    c15e:	bic.w	r3, r3, #3
    c162:	subs	r2, r3, r5
    c164:	cmp	r2, #15
    c166:	ble.n	c14e <_malloc_r+0x56>
    c168:	ldr	r1, [pc, #740]	; (c450 <_malloc_r+0x358>)
    c16a:	ldr	r4, [r7, #16]
    c16c:	add.w	lr, r1, #8
    c170:	cmp	r4, lr
    c172:	beq.w	c4dc <_malloc_r+0x3e4>
    c176:	ldr	r3, [r4, #4]
    c178:	bic.w	r3, r3, #3
    c17c:	subs	r2, r3, r5
    c17e:	cmp	r2, #15
    c180:	bgt.w	c4b6 <_malloc_r+0x3be>
    c184:	cmp	r2, #0
    c186:	str.w	lr, [r1, #20]
    c18a:	str.w	lr, [r1, #16]
    c18e:	bge.w	c2ce <_malloc_r+0x1d6>
    c192:	cmp.w	r3, #512	; 0x200
    c196:	bcs.w	c468 <_malloc_r+0x370>
    c19a:	lsrs	r3, r3, #3
    c19c:	add.w	ip, r3, #1
    c1a0:	movs	r2, #1
    c1a2:	asrs	r3, r3, #2
    c1a4:	lsl.w	r3, r2, r3
    c1a8:	ldr	r2, [r1, #4]
    c1aa:	ldr.w	r8, [r1, ip, lsl #3]
    c1ae:	str.w	r8, [r4, #8]
    c1b2:	add.w	r9, r1, ip, lsl #3
    c1b6:	orrs	r2, r3
    c1b8:	sub.w	r3, r9, #8
    c1bc:	str	r3, [r4, #12]
    c1be:	str	r2, [r1, #4]
    c1c0:	str.w	r4, [r1, ip, lsl #3]
    c1c4:	str.w	r4, [r8, #12]
    c1c8:	asrs	r3, r0, #2
    c1ca:	movs	r4, #1
    c1cc:	lsls	r4, r3
    c1ce:	cmp	r4, r2
    c1d0:	bhi.w	c2e8 <_malloc_r+0x1f0>
    c1d4:	tst	r4, r2
    c1d6:	bne.n	c1e6 <_malloc_r+0xee>
    c1d8:	bic.w	r0, r0, #3
    c1dc:	lsls	r4, r4, #1
    c1de:	tst	r4, r2
    c1e0:	add.w	r0, r0, #4
    c1e4:	beq.n	c1dc <_malloc_r+0xe4>
    c1e6:	add.w	r9, r7, r0, lsl #3
    c1ea:	mov	ip, r9
    c1ec:	mov	r8, r0
    c1ee:	ldr.w	r1, [ip, #12]
    c1f2:	cmp	ip, r1
    c1f4:	bne.n	c206 <_malloc_r+0x10e>
    c1f6:	b.n	c4e0 <_malloc_r+0x3e8>
    c1f8:	cmp	r2, #0
    c1fa:	bge.w	c500 <_malloc_r+0x408>
    c1fe:	ldr	r1, [r1, #12]
    c200:	cmp	ip, r1
    c202:	beq.w	c4e0 <_malloc_r+0x3e8>
    c206:	ldr	r3, [r1, #4]
    c208:	bic.w	r3, r3, #3
    c20c:	subs	r2, r3, r5
    c20e:	cmp	r2, #15
    c210:	ble.n	c1f8 <_malloc_r+0x100>
    c212:	mov	r4, r1
    c214:	ldr.w	ip, [r1, #12]
    c218:	ldr.w	r8, [r4, #8]!
    c21c:	adds	r3, r1, r5
    c21e:	orr.w	r5, r5, #1
    c222:	str	r5, [r1, #4]
    c224:	orr.w	r1, r2, #1
    c228:	str.w	ip, [r8, #12]
    c22c:	mov	r0, r6
    c22e:	str.w	r8, [ip, #8]
    c232:	str	r3, [r7, #20]
    c234:	str	r3, [r7, #16]
    c236:	str.w	lr, [r3, #12]
    c23a:	str.w	lr, [r3, #8]
    c23e:	str	r1, [r3, #4]
    c240:	str	r2, [r3, r2]
    c242:	bl	c90c <__malloc_unlock>
    c246:	b.n	c288 <_malloc_r+0x190>
    c248:	cmp	r1, #16
    c24a:	bhi.n	c290 <_malloc_r+0x198>
    c24c:	bl	c908 <__malloc_lock>
    c250:	movs	r5, #16
    c252:	movs	r3, #6
    c254:	movs	r0, #2
    c256:	ldr	r7, [pc, #504]	; (c450 <_malloc_r+0x358>)
    c258:	add.w	r3, r7, r3, lsl #2
    c25c:	sub.w	r2, r3, #8
    c260:	ldr	r4, [r3, #4]
    c262:	cmp	r4, r2
    c264:	beq.w	c4f2 <_malloc_r+0x3fa>
    c268:	ldr	r3, [r4, #4]
    c26a:	ldr	r1, [r4, #12]
    c26c:	ldr	r5, [r4, #8]
    c26e:	bic.w	r3, r3, #3
    c272:	add	r3, r4
    c274:	mov	r0, r6
    c276:	ldr	r2, [r3, #4]
    c278:	str	r1, [r5, #12]
    c27a:	orr.w	r2, r2, #1
    c27e:	str	r5, [r1, #8]
    c280:	str	r2, [r3, #4]
    c282:	bl	c90c <__malloc_unlock>
    c286:	adds	r4, #8
    c288:	mov	r0, r4
    c28a:	add	sp, #12
    c28c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c290:	movs	r4, #0
    c292:	movs	r3, #12
    c294:	mov	r0, r4
    c296:	str	r3, [r6, #0]
    c298:	add	sp, #12
    c29a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c29e:	movs	r3, #128	; 0x80
    c2a0:	mov.w	lr, #64	; 0x40
    c2a4:	movs	r0, #63	; 0x3f
    c2a6:	b.n	c13c <_malloc_r+0x44>
    c2a8:	mov	r0, lr
    c2aa:	b.n	c168 <_malloc_r+0x70>
    c2ac:	add	r3, r4
    c2ae:	ldr	r1, [r4, #12]
    c2b0:	ldr	r2, [r3, #4]
    c2b2:	ldr	r5, [r4, #8]
    c2b4:	orr.w	r2, r2, #1
    c2b8:	str	r1, [r5, #12]
    c2ba:	mov	r0, r6
    c2bc:	str	r5, [r1, #8]
    c2be:	str	r2, [r3, #4]
    c2c0:	bl	c90c <__malloc_unlock>
    c2c4:	adds	r4, #8
    c2c6:	mov	r0, r4
    c2c8:	add	sp, #12
    c2ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c2ce:	add	r3, r4
    c2d0:	mov	r0, r6
    c2d2:	ldr	r2, [r3, #4]
    c2d4:	orr.w	r2, r2, #1
    c2d8:	str	r2, [r3, #4]
    c2da:	bl	c90c <__malloc_unlock>
    c2de:	adds	r4, #8
    c2e0:	mov	r0, r4
    c2e2:	add	sp, #12
    c2e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c2e8:	ldr	r4, [r7, #8]
    c2ea:	ldr	r3, [r4, #4]
    c2ec:	bic.w	r8, r3, #3
    c2f0:	cmp	r8, r5
    c2f2:	bcc.n	c2fe <_malloc_r+0x206>
    c2f4:	rsb	r3, r5, r8
    c2f8:	cmp	r3, #15
    c2fa:	bgt.w	c416 <_malloc_r+0x31e>
    c2fe:	ldr	r3, [pc, #340]	; (c454 <_malloc_r+0x35c>)
    c300:	ldr.w	r9, [pc, #352]	; c464 <_malloc_r+0x36c>
    c304:	ldr	r2, [r3, #0]
    c306:	ldr.w	r3, [r9]
    c30a:	adds	r3, #1
    c30c:	add	r2, r5
    c30e:	add.w	sl, r4, r8
    c312:	beq.w	c5d6 <_malloc_r+0x4de>
    c316:	add.w	r2, r2, #4096	; 0x1000
    c31a:	adds	r2, #15
    c31c:	bic.w	r2, r2, #4080	; 0xff0
    c320:	bic.w	r2, r2, #15
    c324:	mov	r1, r2
    c326:	mov	r0, r6
    c328:	str	r2, [sp, #4]
    c32a:	bl	ccf0 <_sbrk_r>
    c32e:	cmp.w	r0, #4294967295
    c332:	mov	fp, r0
    c334:	ldr	r2, [sp, #4]
    c336:	beq.w	c5ea <_malloc_r+0x4f2>
    c33a:	cmp	sl, r0
    c33c:	bhi.w	c538 <_malloc_r+0x440>
    c340:	ldr	r3, [pc, #276]	; (c458 <_malloc_r+0x360>)
    c342:	ldr	r1, [r3, #0]
    c344:	cmp	sl, fp
    c346:	add	r1, r2
    c348:	str	r1, [r3, #0]
    c34a:	beq.w	c5f4 <_malloc_r+0x4fc>
    c34e:	ldr.w	r0, [r9]
    c352:	ldr.w	lr, [pc, #272]	; c464 <_malloc_r+0x36c>
    c356:	adds	r0, #1
    c358:	ittet	ne
    c35a:	rsbne	sl, sl, fp
    c35e:	addne	r1, sl
    c360:	streq.w	fp, [lr]
    c364:	strne	r1, [r3, #0]
    c366:	ands.w	r1, fp, #7
    c36a:	beq.w	c59c <_malloc_r+0x4a4>
    c36e:	rsb	r0, r1, #8
    c372:	rsb	r1, r1, #4096	; 0x1000
    c376:	add	fp, r0
    c378:	adds	r1, #8
    c37a:	add	r2, fp
    c37c:	ubfx	r2, r2, #0, #12
    c380:	rsb	r9, r2, r1
    c384:	mov	r1, r9
    c386:	mov	r0, r6
    c388:	str	r3, [sp, #4]
    c38a:	bl	ccf0 <_sbrk_r>
    c38e:	adds	r3, r0, #1
    c390:	ldr	r3, [sp, #4]
    c392:	beq.w	c614 <_malloc_r+0x51c>
    c396:	rsb	r2, fp, r0
    c39a:	add	r2, r9
    c39c:	orr.w	r2, r2, #1
    c3a0:	ldr	r1, [r3, #0]
    c3a2:	str.w	fp, [r7, #8]
    c3a6:	add	r1, r9
    c3a8:	cmp	r4, r7
    c3aa:	str.w	r2, [fp, #4]
    c3ae:	str	r1, [r3, #0]
    c3b0:	ldr.w	r9, [pc, #164]	; c458 <_malloc_r+0x360>
    c3b4:	beq.n	c3e4 <_malloc_r+0x2ec>
    c3b6:	cmp.w	r8, #15
    c3ba:	bls.w	c5b8 <_malloc_r+0x4c0>
    c3be:	ldr	r2, [r4, #4]
    c3c0:	sub.w	r3, r8, #12
    c3c4:	bic.w	r3, r3, #7
    c3c8:	adds	r0, r4, r3
    c3ca:	and.w	r2, r2, #1
    c3ce:	mov.w	lr, #5
    c3d2:	orrs	r2, r3
    c3d4:	cmp	r3, #15
    c3d6:	str	r2, [r4, #4]
    c3d8:	str.w	lr, [r0, #4]
    c3dc:	str.w	lr, [r0, #8]
    c3e0:	bhi.w	c61c <_malloc_r+0x524>
    c3e4:	ldr	r3, [pc, #116]	; (c45c <_malloc_r+0x364>)
    c3e6:	ldr	r4, [r7, #8]
    c3e8:	ldr	r2, [r3, #0]
    c3ea:	cmp	r1, r2
    c3ec:	it	hi
    c3ee:	strhi	r1, [r3, #0]
    c3f0:	ldr	r3, [pc, #108]	; (c460 <_malloc_r+0x368>)
    c3f2:	ldr	r2, [r3, #0]
    c3f4:	cmp	r1, r2
    c3f6:	ldr	r2, [r4, #4]
    c3f8:	it	hi
    c3fa:	strhi	r1, [r3, #0]
    c3fc:	bic.w	r2, r2, #3
    c400:	cmp	r5, r2
    c402:	sub.w	r3, r2, r5
    c406:	bhi.n	c40c <_malloc_r+0x314>
    c408:	cmp	r3, #15
    c40a:	bgt.n	c416 <_malloc_r+0x31e>
    c40c:	mov	r0, r6
    c40e:	bl	c90c <__malloc_unlock>
    c412:	movs	r4, #0
    c414:	b.n	c288 <_malloc_r+0x190>
    c416:	adds	r2, r4, r5
    c418:	orr.w	r3, r3, #1
    c41c:	orr.w	r5, r5, #1
    c420:	str	r5, [r4, #4]
    c422:	mov	r0, r6
    c424:	str	r2, [r7, #8]
    c426:	str	r3, [r2, #4]
    c428:	bl	c90c <__malloc_unlock>
    c42c:	adds	r4, #8
    c42e:	mov	r0, r4
    c430:	add	sp, #12
    c432:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c436:	cmp	r3, #20
    c438:	bls.n	c51e <_malloc_r+0x426>
    c43a:	cmp	r3, #84	; 0x54
    c43c:	bhi.w	c588 <_malloc_r+0x490>
    c440:	lsrs	r0, r5, #12
    c442:	add.w	lr, r0, #111	; 0x6f
    c446:	mov.w	r3, lr, lsl #1
    c44a:	adds	r0, #110	; 0x6e
    c44c:	b.n	c13c <_malloc_r+0x44>
    c44e:	nop
    c450:	.word	0x200020f8
    c454:	.word	0x20017b78
    c458:	.word	0x20017b48
    c45c:	.word	0x20017b70
    c460:	.word	0x20017b74
    c464:	.word	0x20002500
    c468:	lsrs	r2, r3, #9
    c46a:	cmp	r2, #4
    c46c:	bls.n	c52c <_malloc_r+0x434>
    c46e:	cmp	r2, #20
    c470:	bhi.w	c5da <_malloc_r+0x4e2>
    c474:	add.w	r1, r2, #92	; 0x5c
    c478:	lsls	r1, r1, #1
    c47a:	adds	r2, #91	; 0x5b
    c47c:	add.w	ip, r7, r1, lsl #2
    c480:	ldr.w	r1, [r7, r1, lsl #2]
    c484:	ldr.w	r8, [pc, #476]	; c664 <_malloc_r+0x56c>
    c488:	sub.w	ip, ip, #8
    c48c:	cmp	ip, r1
    c48e:	beq.w	c5a2 <_malloc_r+0x4aa>
    c492:	ldr	r2, [r1, #4]
    c494:	bic.w	r2, r2, #3
    c498:	cmp	r3, r2
    c49a:	bcs.n	c4a2 <_malloc_r+0x3aa>
    c49c:	ldr	r1, [r1, #8]
    c49e:	cmp	ip, r1
    c4a0:	bne.n	c492 <_malloc_r+0x39a>
    c4a2:	ldr.w	ip, [r1, #12]
    c4a6:	ldr	r2, [r7, #4]
    c4a8:	str.w	ip, [r4, #12]
    c4ac:	str	r1, [r4, #8]
    c4ae:	str.w	r4, [ip, #8]
    c4b2:	str	r4, [r1, #12]
    c4b4:	b.n	c1c8 <_malloc_r+0xd0>
    c4b6:	adds	r3, r4, r5
    c4b8:	orr.w	r7, r2, #1
    c4bc:	orr.w	r5, r5, #1
    c4c0:	str	r5, [r4, #4]
    c4c2:	mov	r0, r6
    c4c4:	str	r3, [r1, #20]
    c4c6:	str	r3, [r1, #16]
    c4c8:	str.w	lr, [r3, #12]
    c4cc:	str.w	lr, [r3, #8]
    c4d0:	str	r7, [r3, #4]
    c4d2:	str	r2, [r3, r2]
    c4d4:	adds	r4, #8
    c4d6:	bl	c90c <__malloc_unlock>
    c4da:	b.n	c288 <_malloc_r+0x190>
    c4dc:	ldr	r2, [r1, #4]
    c4de:	b.n	c1c8 <_malloc_r+0xd0>
    c4e0:	add.w	r8, r8, #1
    c4e4:	tst.w	r8, #3
    c4e8:	add.w	ip, ip, #8
    c4ec:	bne.w	c1ee <_malloc_r+0xf6>
    c4f0:	b.n	c554 <_malloc_r+0x45c>
    c4f2:	ldr	r4, [r3, #12]
    c4f4:	cmp	r3, r4
    c4f6:	it	eq
    c4f8:	addeq	r0, #2
    c4fa:	beq.w	c168 <_malloc_r+0x70>
    c4fe:	b.n	c268 <_malloc_r+0x170>
    c500:	add	r3, r1
    c502:	mov	r4, r1
    c504:	ldr	r2, [r3, #4]
    c506:	ldr	r1, [r1, #12]
    c508:	ldr.w	r5, [r4, #8]!
    c50c:	orr.w	r2, r2, #1
    c510:	str	r2, [r3, #4]
    c512:	mov	r0, r6
    c514:	str	r1, [r5, #12]
    c516:	str	r5, [r1, #8]
    c518:	bl	c90c <__malloc_unlock>
    c51c:	b.n	c288 <_malloc_r+0x190>
    c51e:	add.w	lr, r3, #92	; 0x5c
    c522:	add.w	r0, r3, #91	; 0x5b
    c526:	mov.w	r3, lr, lsl #1
    c52a:	b.n	c13c <_malloc_r+0x44>
    c52c:	lsrs	r2, r3, #6
    c52e:	add.w	r1, r2, #57	; 0x39
    c532:	lsls	r1, r1, #1
    c534:	adds	r2, #56	; 0x38
    c536:	b.n	c47c <_malloc_r+0x384>
    c538:	cmp	r4, r7
    c53a:	ldr	r3, [pc, #296]	; (c664 <_malloc_r+0x56c>)
    c53c:	beq.w	c340 <_malloc_r+0x248>
    c540:	ldr	r4, [r3, #8]
    c542:	ldr	r2, [r4, #4]
    c544:	bic.w	r2, r2, #3
    c548:	b.n	c400 <_malloc_r+0x308>
    c54a:	ldr.w	r3, [r9], #-8
    c54e:	cmp	r9, r3
    c550:	bne.w	c658 <_malloc_r+0x560>
    c554:	tst.w	r0, #3
    c558:	add.w	r0, r0, #4294967295
    c55c:	bne.n	c54a <_malloc_r+0x452>
    c55e:	ldr	r3, [r7, #4]
    c560:	bic.w	r3, r3, r4
    c564:	str	r3, [r7, #4]
    c566:	lsls	r4, r4, #1
    c568:	cmp	r4, r3
    c56a:	bhi.w	c2e8 <_malloc_r+0x1f0>
    c56e:	cmp	r4, #0
    c570:	beq.w	c2e8 <_malloc_r+0x1f0>
    c574:	tst	r4, r3
    c576:	mov	r0, r8
    c578:	bne.w	c1e6 <_malloc_r+0xee>
    c57c:	lsls	r4, r4, #1
    c57e:	tst	r4, r3
    c580:	add.w	r0, r0, #4
    c584:	beq.n	c57c <_malloc_r+0x484>
    c586:	b.n	c1e6 <_malloc_r+0xee>
    c588:	cmp.w	r3, #340	; 0x154
    c58c:	bhi.n	c5c0 <_malloc_r+0x4c8>
    c58e:	lsrs	r0, r5, #15
    c590:	add.w	lr, r0, #120	; 0x78
    c594:	mov.w	r3, lr, lsl #1
    c598:	adds	r0, #119	; 0x77
    c59a:	b.n	c13c <_malloc_r+0x44>
    c59c:	mov.w	r1, #4096	; 0x1000
    c5a0:	b.n	c37a <_malloc_r+0x282>
    c5a2:	movs	r1, #1
    c5a4:	ldr.w	r3, [r8, #4]
    c5a8:	asrs	r2, r2, #2
    c5aa:	lsl.w	r2, r1, r2
    c5ae:	orrs	r2, r3
    c5b0:	str.w	r2, [r8, #4]
    c5b4:	mov	r1, ip
    c5b6:	b.n	c4a8 <_malloc_r+0x3b0>
    c5b8:	movs	r3, #1
    c5ba:	str.w	r3, [fp, #4]
    c5be:	b.n	c40c <_malloc_r+0x314>
    c5c0:	movw	r2, #1364	; 0x554
    c5c4:	cmp	r3, r2
    c5c6:	bhi.n	c60a <_malloc_r+0x512>
    c5c8:	lsrs	r0, r5, #18
    c5ca:	add.w	lr, r0, #125	; 0x7d
    c5ce:	mov.w	r3, lr, lsl #1
    c5d2:	adds	r0, #124	; 0x7c
    c5d4:	b.n	c13c <_malloc_r+0x44>
    c5d6:	adds	r2, #16
    c5d8:	b.n	c324 <_malloc_r+0x22c>
    c5da:	cmp	r2, #84	; 0x54
    c5dc:	bhi.n	c62c <_malloc_r+0x534>
    c5de:	lsrs	r2, r3, #12
    c5e0:	add.w	r1, r2, #111	; 0x6f
    c5e4:	lsls	r1, r1, #1
    c5e6:	adds	r2, #110	; 0x6e
    c5e8:	b.n	c47c <_malloc_r+0x384>
    c5ea:	ldr	r4, [r7, #8]
    c5ec:	ldr	r2, [r4, #4]
    c5ee:	bic.w	r2, r2, #3
    c5f2:	b.n	c400 <_malloc_r+0x308>
    c5f4:	ubfx	r0, sl, #0, #12
    c5f8:	cmp	r0, #0
    c5fa:	bne.w	c34e <_malloc_r+0x256>
    c5fe:	add	r2, r8
    c600:	ldr	r3, [r7, #8]
    c602:	orr.w	r2, r2, #1
    c606:	str	r2, [r3, #4]
    c608:	b.n	c3e4 <_malloc_r+0x2ec>
    c60a:	movs	r3, #254	; 0xfe
    c60c:	mov.w	lr, #127	; 0x7f
    c610:	movs	r0, #126	; 0x7e
    c612:	b.n	c13c <_malloc_r+0x44>
    c614:	movs	r2, #1
    c616:	mov.w	r9, #0
    c61a:	b.n	c3a0 <_malloc_r+0x2a8>
    c61c:	add.w	r1, r4, #8
    c620:	mov	r0, r6
    c622:	bl	112e8 <_free_r>
    c626:	ldr.w	r1, [r9]
    c62a:	b.n	c3e4 <_malloc_r+0x2ec>
    c62c:	cmp.w	r2, #340	; 0x154
    c630:	bhi.n	c63e <_malloc_r+0x546>
    c632:	lsrs	r2, r3, #15
    c634:	add.w	r1, r2, #120	; 0x78
    c638:	lsls	r1, r1, #1
    c63a:	adds	r2, #119	; 0x77
    c63c:	b.n	c47c <_malloc_r+0x384>
    c63e:	movw	r1, #1364	; 0x554
    c642:	cmp	r2, r1
    c644:	bhi.n	c652 <_malloc_r+0x55a>
    c646:	lsrs	r2, r3, #18
    c648:	add.w	r1, r2, #125	; 0x7d
    c64c:	lsls	r1, r1, #1
    c64e:	adds	r2, #124	; 0x7c
    c650:	b.n	c47c <_malloc_r+0x384>
    c652:	movs	r1, #254	; 0xfe
    c654:	movs	r2, #126	; 0x7e
    c656:	b.n	c47c <_malloc_r+0x384>
    c658:	ldr	r3, [r7, #4]
    c65a:	b.n	c566 <_malloc_r+0x46e>
    c65c:	lsrs	r0, r5, #3
    c65e:	adds	r3, r0, #1
    c660:	lsls	r3, r3, #1
    c662:	b.n	c256 <_malloc_r+0x15e>
    c664:	.word	0x200020f8

0000c668 <__ascii_mbtowc>:
    c668:	sub	sp, #8
    c66a:	cbz	r1, c680 <__ascii_mbtowc+0x18>
    c66c:	cbz	r2, c686 <__ascii_mbtowc+0x1e>
    c66e:	cbz	r3, c68c <__ascii_mbtowc+0x24>
    c670:	ldrb	r3, [r2, #0]
    c672:	str	r3, [r1, #0]
    c674:	ldrb	r2, [r2, #0]
    c676:	adds	r0, r2, #0
    c678:	it	ne
    c67a:	movne	r0, #1
    c67c:	add	sp, #8
    c67e:	bx	lr
    c680:	add	r1, sp, #4
    c682:	cmp	r2, #0
    c684:	bne.n	c66e <__ascii_mbtowc+0x6>
    c686:	mov	r0, r2
    c688:	add	sp, #8
    c68a:	bx	lr
    c68c:	mvn.w	r0, #1
    c690:	b.n	c67c <__ascii_mbtowc+0x14>
    c692:	nop
	...

0000c6a0 <memchr>:
    c6a0:	and.w	r1, r1, #255	; 0xff
    c6a4:	cmp	r2, #16
    c6a6:	blt.n	c700 <memchr+0x60>
    c6a8:	tst.w	r0, #7
    c6ac:	beq.n	c6c0 <memchr+0x20>
    c6ae:	ldrb.w	r3, [r0], #1
    c6b2:	subs	r2, #1
    c6b4:	cmp	r3, r1
    c6b6:	beq.n	c714 <memchr+0x74>
    c6b8:	tst.w	r0, #7
    c6bc:	cbz	r2, c710 <memchr+0x70>
    c6be:	bne.n	c6ae <memchr+0xe>
    c6c0:	push	{r4, r5, r6, r7}
    c6c2:	orr.w	r1, r1, r1, lsl #8
    c6c6:	orr.w	r1, r1, r1, lsl #16
    c6ca:	bic.w	r4, r2, #7
    c6ce:	mvns.w	r7, #0
    c6d2:	movs	r3, #0
    c6d4:	ldrd	r5, r6, [r0], #8
    c6d8:	subs	r4, #8
    c6da:	eor.w	r5, r5, r1
    c6de:	eor.w	r6, r6, r1
    c6e2:	uadd8	r5, r5, r7
    c6e6:	sel	r5, r3, r7
    c6ea:	uadd8	r6, r6, r7
    c6ee:	sel	r6, r5, r7
    c6f2:	cbnz	r6, c718 <memchr+0x78>
    c6f4:	bne.n	c6d4 <memchr+0x34>
    c6f6:	pop	{r4, r5, r6, r7}
    c6f8:	and.w	r1, r1, #255	; 0xff
    c6fc:	and.w	r2, r2, #7
    c700:	cbz	r2, c710 <memchr+0x70>
    c702:	ldrb.w	r3, [r0], #1
    c706:	subs	r2, #1
    c708:	eor.w	r3, r3, r1
    c70c:	cbz	r3, c714 <memchr+0x74>
    c70e:	bne.n	c702 <memchr+0x62>
    c710:	movs	r0, #0
    c712:	bx	lr
    c714:	subs	r0, #1
    c716:	bx	lr
    c718:	cmp	r5, #0
    c71a:	itte	eq
    c71c:	moveq	r5, r6
    c71e:	subeq	r0, #3
    c720:	subne	r0, #7
    c722:	tst.w	r5, #1
    c726:	bne.n	c738 <memchr+0x98>
    c728:	adds	r0, #1
    c72a:	tst.w	r5, #256	; 0x100
    c72e:	ittt	eq
    c730:	addeq	r0, #1
    c732:	tsteq.w	r5, #98304	; 0x18000
    c736:	addeq	r0, #1
    c738:	pop	{r4, r5, r6, r7}
    c73a:	subs	r0, #1
    c73c:	bx	lr
    c73e:	nop

0000c740 <memcmp>:
    c740:	cmp	r2, #3
    c742:	push	{r4, r5, r6}
    c744:	bls.n	c794 <memcmp+0x54>
    c746:	orr.w	r3, r0, r1
    c74a:	lsls	r3, r3, #30
    c74c:	beq.n	c772 <memcmp+0x32>
    c74e:	ldrb	r4, [r0, #0]
    c750:	ldrb	r5, [r1, #0]
    c752:	cmp	r4, r5
    c754:	bne.n	c79c <memcmp+0x5c>
    c756:	add	r2, r0
    c758:	adds	r3, r0, #1
    c75a:	b.n	c768 <memcmp+0x28>
    c75c:	ldrb.w	r4, [r3], #1
    c760:	ldrb.w	r5, [r1, #1]!
    c764:	cmp	r4, r5
    c766:	bne.n	c79c <memcmp+0x5c>
    c768:	cmp	r3, r2
    c76a:	bne.n	c75c <memcmp+0x1c>
    c76c:	movs	r0, #0
    c76e:	pop	{r4, r5, r6}
    c770:	bx	lr
    c772:	mov	r4, r1
    c774:	mov	r3, r0
    c776:	ldr	r6, [r3, #0]
    c778:	ldr	r5, [r4, #0]
    c77a:	cmp	r6, r5
    c77c:	mov	r0, r3
    c77e:	mov	r1, r4
    c780:	add.w	r3, r3, #4
    c784:	add.w	r4, r4, #4
    c788:	bne.n	c74e <memcmp+0xe>
    c78a:	subs	r2, #4
    c78c:	cmp	r2, #3
    c78e:	mov	r0, r3
    c790:	mov	r1, r4
    c792:	bhi.n	c776 <memcmp+0x36>
    c794:	cmp	r2, #0
    c796:	bne.n	c74e <memcmp+0xe>
    c798:	mov	r0, r2
    c79a:	b.n	c76e <memcmp+0x2e>
    c79c:	subs	r0, r4, r5
    c79e:	pop	{r4, r5, r6}
    c7a0:	bx	lr
    c7a2:	nop

0000c7a4 <memmove>:
    c7a4:	cmp	r0, r1
    c7a6:	push	{r4, r5, r6, r7, lr}
    c7a8:	bls.n	c7c6 <memmove+0x22>
    c7aa:	adds	r3, r1, r2
    c7ac:	cmp	r0, r3
    c7ae:	bcs.n	c7c6 <memmove+0x22>
    c7b0:	adds	r1, r0, r2
    c7b2:	cmp	r2, #0
    c7b4:	beq.n	c85a <memmove+0xb6>
    c7b6:	subs	r2, r3, r2
    c7b8:	ldrb.w	r4, [r3, #-1]!
    c7bc:	strb.w	r4, [r1, #-1]!
    c7c0:	cmp	r3, r2
    c7c2:	bne.n	c7b8 <memmove+0x14>
    c7c4:	pop	{r4, r5, r6, r7, pc}
    c7c6:	cmp	r2, #15
    c7c8:	bls.n	c85c <memmove+0xb8>
    c7ca:	orr.w	r3, r1, r0
    c7ce:	lsls	r3, r3, #30
    c7d0:	bne.n	c860 <memmove+0xbc>
    c7d2:	add.w	r4, r0, #16
    c7d6:	add.w	r3, r1, #16
    c7da:	mov	r5, r2
    c7dc:	ldr.w	r6, [r3, #-16]
    c7e0:	str.w	r6, [r4, #-16]
    c7e4:	ldr.w	r6, [r3, #-12]
    c7e8:	str.w	r6, [r4, #-12]
    c7ec:	ldr.w	r6, [r3, #-8]
    c7f0:	str.w	r6, [r4, #-8]
    c7f4:	subs	r5, #16
    c7f6:	ldr.w	r6, [r3, #-4]
    c7fa:	str.w	r6, [r4, #-4]
    c7fe:	cmp	r5, #15
    c800:	add.w	r3, r3, #16
    c804:	add.w	r4, r4, #16
    c808:	bhi.n	c7dc <memmove+0x38>
    c80a:	sub.w	r3, r2, #16
    c80e:	bic.w	r3, r3, #15
    c812:	and.w	lr, r2, #15
    c816:	adds	r3, #16
    c818:	cmp.w	lr, #3
    c81c:	add	r1, r3
    c81e:	add	r3, r0
    c820:	bls.n	c866 <memmove+0xc2>
    c822:	subs	r6, r3, #4
    c824:	mov	r5, r1
    c826:	mov	r4, lr
    c828:	subs	r4, #4
    c82a:	ldr.w	r7, [r5], #4
    c82e:	str.w	r7, [r6, #4]!
    c832:	cmp	r4, #3
    c834:	bhi.n	c828 <memmove+0x84>
    c836:	sub.w	r4, lr, #4
    c83a:	bic.w	r4, r4, #3
    c83e:	adds	r4, #4
    c840:	add	r3, r4
    c842:	add	r1, r4
    c844:	and.w	r2, r2, #3
    c848:	cbz	r2, c864 <memmove+0xc0>
    c84a:	subs	r3, #1
    c84c:	add	r2, r1
    c84e:	ldrb.w	r4, [r1], #1
    c852:	strb.w	r4, [r3, #1]!
    c856:	cmp	r2, r1
    c858:	bne.n	c84e <memmove+0xaa>
    c85a:	pop	{r4, r5, r6, r7, pc}
    c85c:	mov	r3, r0
    c85e:	b.n	c848 <memmove+0xa4>
    c860:	mov	r3, r0
    c862:	b.n	c84a <memmove+0xa6>
    c864:	pop	{r4, r5, r6, r7, pc}
    c866:	mov	r2, lr
    c868:	b.n	c848 <memmove+0xa4>
    c86a:	nop

0000c86c <memset>:
    c86c:	push	{r4, r5, r6}
    c86e:	lsls	r4, r0, #30
    c870:	beq.n	c900 <memset+0x94>
    c872:	subs	r4, r2, #1
    c874:	cmp	r2, #0
    c876:	beq.n	c8fc <memset+0x90>
    c878:	uxtb	r5, r1
    c87a:	mov	r3, r0
    c87c:	b.n	c884 <memset+0x18>
    c87e:	subs	r2, r4, #1
    c880:	cbz	r4, c8fc <memset+0x90>
    c882:	mov	r4, r2
    c884:	strb.w	r5, [r3], #1
    c888:	lsls	r2, r3, #30
    c88a:	bne.n	c87e <memset+0x12>
    c88c:	cmp	r4, #3
    c88e:	bls.n	c8ee <memset+0x82>
    c890:	uxtb	r5, r1
    c892:	orr.w	r5, r5, r5, lsl #8
    c896:	cmp	r4, #15
    c898:	orr.w	r5, r5, r5, lsl #16
    c89c:	bls.n	c8d2 <memset+0x66>
    c89e:	add.w	r2, r3, #16
    c8a2:	mov	r6, r4
    c8a4:	subs	r6, #16
    c8a6:	cmp	r6, #15
    c8a8:	str.w	r5, [r2, #-16]
    c8ac:	str.w	r5, [r2, #-12]
    c8b0:	str.w	r5, [r2, #-8]
    c8b4:	str.w	r5, [r2, #-4]
    c8b8:	add.w	r2, r2, #16
    c8bc:	bhi.n	c8a4 <memset+0x38>
    c8be:	sub.w	r2, r4, #16
    c8c2:	bic.w	r2, r2, #15
    c8c6:	and.w	r4, r4, #15
    c8ca:	adds	r2, #16
    c8cc:	cmp	r4, #3
    c8ce:	add	r3, r2
    c8d0:	bls.n	c8ee <memset+0x82>
    c8d2:	mov	r6, r3
    c8d4:	mov	r2, r4
    c8d6:	subs	r2, #4
    c8d8:	cmp	r2, #3
    c8da:	str.w	r5, [r6], #4
    c8de:	bhi.n	c8d6 <memset+0x6a>
    c8e0:	subs	r2, r4, #4
    c8e2:	bic.w	r2, r2, #3
    c8e6:	adds	r2, #4
    c8e8:	add	r3, r2
    c8ea:	and.w	r4, r4, #3
    c8ee:	cbz	r4, c8fc <memset+0x90>
    c8f0:	uxtb	r1, r1
    c8f2:	add	r4, r3
    c8f4:	strb.w	r1, [r3], #1
    c8f8:	cmp	r3, r4
    c8fa:	bne.n	c8f4 <memset+0x88>
    c8fc:	pop	{r4, r5, r6}
    c8fe:	bx	lr
    c900:	mov	r4, r2
    c902:	mov	r3, r0
    c904:	b.n	c88c <memset+0x20>
    c906:	nop

0000c908 <__malloc_lock>:
    c908:	bx	lr
    c90a:	nop

0000c90c <__malloc_unlock>:
    c90c:	bx	lr
    c90e:	nop

0000c910 <_realloc_r>:
    c910:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c914:	mov	r7, r2
    c916:	sub	sp, #12
    c918:	cmp	r1, #0
    c91a:	beq.w	caa0 <_realloc_r+0x190>
    c91e:	mov	r6, r1
    c920:	mov	r9, r0
    c922:	add.w	r5, r7, #11
    c926:	bl	c908 <__malloc_lock>
    c92a:	ldr.w	lr, [r6, #-4]
    c92e:	cmp	r5, #22
    c930:	bic.w	r4, lr, #3
    c934:	sub.w	r8, r6, #8
    c938:	bhi.n	c9bc <_realloc_r+0xac>
    c93a:	movs	r2, #16
    c93c:	mov	r5, r2
    c93e:	cmp	r7, r5
    c940:	bhi.n	c9c6 <_realloc_r+0xb6>
    c942:	cmp	r4, r2
    c944:	bge.n	ca32 <_realloc_r+0x122>
    c946:	ldr	r3, [pc, #804]	; (cc6c <_realloc_r+0x35c>)
    c948:	ldr	r1, [r3, #8]
    c94a:	add.w	r0, r8, r4
    c94e:	cmp	r0, r1
    c950:	ldr	r1, [r0, #4]
    c952:	beq.w	cb08 <_realloc_r+0x1f8>
    c956:	bic.w	r3, r1, #1
    c95a:	add	r3, r0
    c95c:	ldr	r3, [r3, #4]
    c95e:	lsls	r3, r3, #31
    c960:	bpl.n	ca5e <_realloc_r+0x14e>
    c962:	tst.w	lr, #1
    c966:	beq.n	c9d4 <_realloc_r+0xc4>
    c968:	mov	r1, r7
    c96a:	mov	r0, r9
    c96c:	bl	c0f8 <_malloc_r>
    c970:	mov	r7, r0
    c972:	cbz	r0, c9ae <_realloc_r+0x9e>
    c974:	ldr.w	r3, [r6, #-4]
    c978:	bic.w	r3, r3, #1
    c97c:	add	r3, r8
    c97e:	sub.w	r2, r0, #8
    c982:	cmp	r2, r3
    c984:	beq.w	cc10 <_realloc_r+0x300>
    c988:	subs	r2, r4, #4
    c98a:	cmp	r2, #36	; 0x24
    c98c:	bhi.w	cbf2 <_realloc_r+0x2e2>
    c990:	cmp	r2, #19
    c992:	bhi.w	cb9e <_realloc_r+0x28e>
    c996:	mov	r3, r0
    c998:	mov	r2, r6
    c99a:	ldr	r1, [r2, #0]
    c99c:	str	r1, [r3, #0]
    c99e:	ldr	r1, [r2, #4]
    c9a0:	str	r1, [r3, #4]
    c9a2:	ldr	r2, [r2, #8]
    c9a4:	str	r2, [r3, #8]
    c9a6:	mov	r1, r6
    c9a8:	mov	r0, r9
    c9aa:	bl	112e8 <_free_r>
    c9ae:	mov	r0, r9
    c9b0:	bl	c90c <__malloc_unlock>
    c9b4:	mov	r0, r7
    c9b6:	add	sp, #12
    c9b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c9bc:	bic.w	r5, r5, #7
    c9c0:	cmp	r5, #0
    c9c2:	mov	r2, r5
    c9c4:	bge.n	c93e <_realloc_r+0x2e>
    c9c6:	movs	r3, #12
    c9c8:	movs	r0, #0
    c9ca:	str.w	r3, [r9]
    c9ce:	add	sp, #12
    c9d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c9d4:	ldr.w	r3, [r6, #-8]
    c9d8:	rsb	sl, r3, r8
    c9dc:	ldr.w	r3, [sl, #4]
    c9e0:	bic.w	ip, r3, #3
    c9e4:	add.w	r3, r4, ip
    c9e8:	cmp	r3, r2
    c9ea:	blt.n	c968 <_realloc_r+0x58>
    c9ec:	mov	r7, sl
    c9ee:	ldr.w	r1, [sl, #12]
    c9f2:	ldr.w	r0, [r7, #8]!
    c9f6:	subs	r2, r4, #4
    c9f8:	cmp	r2, #36	; 0x24
    c9fa:	str	r1, [r0, #12]
    c9fc:	str	r0, [r1, #8]
    c9fe:	bhi.w	cc30 <_realloc_r+0x320>
    ca02:	cmp	r2, #19
    ca04:	bls.w	cc2c <_realloc_r+0x31c>
    ca08:	ldr	r1, [r6, #0]
    ca0a:	str.w	r1, [sl, #8]
    ca0e:	ldr	r1, [r6, #4]
    ca10:	str.w	r1, [sl, #12]
    ca14:	cmp	r2, #27
    ca16:	bhi.w	cc70 <_realloc_r+0x360>
    ca1a:	adds	r6, #8
    ca1c:	add.w	r2, sl, #16
    ca20:	ldr	r1, [r6, #0]
    ca22:	str	r1, [r2, #0]
    ca24:	ldr	r1, [r6, #4]
    ca26:	str	r1, [r2, #4]
    ca28:	ldr	r1, [r6, #8]
    ca2a:	str	r1, [r2, #8]
    ca2c:	mov	r6, r7
    ca2e:	mov	r4, r3
    ca30:	mov	r8, sl
    ca32:	subs	r3, r4, r5
    ca34:	cmp	r3, #15
    ca36:	bhi.n	ca74 <_realloc_r+0x164>
    ca38:	ldr.w	r3, [r8, #4]
    ca3c:	and.w	r3, r3, #1
    ca40:	orrs	r3, r4
    ca42:	add	r4, r8
    ca44:	str.w	r3, [r8, #4]
    ca48:	ldr	r3, [r4, #4]
    ca4a:	orr.w	r3, r3, #1
    ca4e:	str	r3, [r4, #4]
    ca50:	mov	r0, r9
    ca52:	bl	c90c <__malloc_unlock>
    ca56:	mov	r0, r6
    ca58:	add	sp, #12
    ca5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca5e:	bic.w	r1, r1, #3
    ca62:	add	r1, r4
    ca64:	cmp	r1, r2
    ca66:	blt.n	caac <_realloc_r+0x19c>
    ca68:	ldr	r3, [r0, #12]
    ca6a:	ldr	r2, [r0, #8]
    ca6c:	mov	r4, r1
    ca6e:	str	r3, [r2, #12]
    ca70:	str	r2, [r3, #8]
    ca72:	b.n	ca32 <_realloc_r+0x122>
    ca74:	ldr.w	r2, [r8, #4]
    ca78:	add.w	r1, r8, r5
    ca7c:	and.w	r2, r2, #1
    ca80:	orrs	r5, r2
    ca82:	orr.w	r2, r3, #1
    ca86:	add	r3, r1
    ca88:	str.w	r5, [r8, #4]
    ca8c:	str	r2, [r1, #4]
    ca8e:	ldr	r2, [r3, #4]
    ca90:	orr.w	r2, r2, #1
    ca94:	adds	r1, #8
    ca96:	str	r2, [r3, #4]
    ca98:	mov	r0, r9
    ca9a:	bl	112e8 <_free_r>
    ca9e:	b.n	ca50 <_realloc_r+0x140>
    caa0:	mov	r1, r2
    caa2:	add	sp, #12
    caa4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    caa8:	b.w	c0f8 <_malloc_r>
    caac:	tst.w	lr, #1
    cab0:	bne.w	c968 <_realloc_r+0x58>
    cab4:	ldr.w	r3, [r6, #-8]
    cab8:	rsb	sl, r3, r8
    cabc:	ldr.w	r3, [sl, #4]
    cac0:	bic.w	ip, r3, #3
    cac4:	add.w	lr, r1, ip
    cac8:	cmp	lr, r2
    caca:	blt.n	c9e4 <_realloc_r+0xd4>
    cacc:	ldr	r3, [r0, #12]
    cace:	ldr	r2, [r0, #8]
    cad0:	mov	r7, sl
    cad2:	str	r3, [r2, #12]
    cad4:	str	r2, [r3, #8]
    cad6:	ldr.w	r1, [r7, #8]!
    cada:	ldr.w	r3, [sl, #12]
    cade:	str	r3, [r1, #12]
    cae0:	subs	r2, r4, #4
    cae2:	cmp	r2, #36	; 0x24
    cae4:	str	r1, [r3, #8]
    cae6:	bhi.w	cc1c <_realloc_r+0x30c>
    caea:	cmp	r2, #19
    caec:	bls.n	cbb4 <_realloc_r+0x2a4>
    caee:	ldr	r3, [r6, #0]
    caf0:	str.w	r3, [sl, #8]
    caf4:	ldr	r3, [r6, #4]
    caf6:	str.w	r3, [sl, #12]
    cafa:	cmp	r2, #27
    cafc:	bhi.w	cc40 <_realloc_r+0x330>
    cb00:	adds	r6, #8
    cb02:	add.w	r3, sl, #16
    cb06:	b.n	cbb6 <_realloc_r+0x2a6>
    cb08:	bic.w	fp, r1, #3
    cb0c:	add	fp, r4
    cb0e:	add.w	r0, r5, #16
    cb12:	cmp	fp, r0
    cb14:	bge.n	cbca <_realloc_r+0x2ba>
    cb16:	tst.w	lr, #1
    cb1a:	bne.w	c968 <_realloc_r+0x58>
    cb1e:	ldr.w	r1, [r6, #-8]
    cb22:	rsb	sl, r1, r8
    cb26:	ldr.w	r1, [sl, #4]
    cb2a:	bic.w	ip, r1, #3
    cb2e:	add	fp, ip
    cb30:	cmp	r0, fp
    cb32:	bgt.w	c9e4 <_realloc_r+0xd4>
    cb36:	mov	r7, sl
    cb38:	ldr.w	r1, [sl, #12]
    cb3c:	ldr.w	r0, [r7, #8]!
    cb40:	subs	r2, r4, #4
    cb42:	cmp	r2, #36	; 0x24
    cb44:	str	r1, [r0, #12]
    cb46:	str	r0, [r1, #8]
    cb48:	bhi.w	ccb4 <_realloc_r+0x3a4>
    cb4c:	cmp	r2, #19
    cb4e:	bls.w	cc9c <_realloc_r+0x38c>
    cb52:	ldr	r1, [r6, #0]
    cb54:	str.w	r1, [sl, #8]
    cb58:	ldr	r1, [r6, #4]
    cb5a:	str.w	r1, [sl, #12]
    cb5e:	cmp	r2, #27
    cb60:	bhi.w	ccc2 <_realloc_r+0x3b2>
    cb64:	adds	r6, #8
    cb66:	add.w	r2, sl, #16
    cb6a:	ldr	r1, [r6, #0]
    cb6c:	str	r1, [r2, #0]
    cb6e:	ldr	r1, [r6, #4]
    cb70:	str	r1, [r2, #4]
    cb72:	ldr	r1, [r6, #8]
    cb74:	str	r1, [r2, #8]
    cb76:	add.w	r1, sl, r5
    cb7a:	rsb	r2, r5, fp
    cb7e:	orr.w	r2, r2, #1
    cb82:	str	r1, [r3, #8]
    cb84:	str	r2, [r1, #4]
    cb86:	ldr.w	r3, [sl, #4]
    cb8a:	and.w	r3, r3, #1
    cb8e:	orrs	r5, r3
    cb90:	mov	r0, r9
    cb92:	str.w	r5, [sl, #4]
    cb96:	bl	c90c <__malloc_unlock>
    cb9a:	mov	r0, r7
    cb9c:	b.n	ca58 <_realloc_r+0x148>
    cb9e:	ldr	r3, [r6, #0]
    cba0:	str	r3, [r0, #0]
    cba2:	ldr	r3, [r6, #4]
    cba4:	str	r3, [r0, #4]
    cba6:	cmp	r2, #27
    cba8:	bhi.n	cbfa <_realloc_r+0x2ea>
    cbaa:	add.w	r3, r0, #8
    cbae:	add.w	r2, r6, #8
    cbb2:	b.n	c99a <_realloc_r+0x8a>
    cbb4:	mov	r3, r7
    cbb6:	ldr	r2, [r6, #0]
    cbb8:	str	r2, [r3, #0]
    cbba:	ldr	r2, [r6, #4]
    cbbc:	str	r2, [r3, #4]
    cbbe:	ldr	r2, [r6, #8]
    cbc0:	str	r2, [r3, #8]
    cbc2:	mov	r6, r7
    cbc4:	mov	r4, lr
    cbc6:	mov	r8, sl
    cbc8:	b.n	ca32 <_realloc_r+0x122>
    cbca:	add.w	r1, r8, r5
    cbce:	rsb	fp, r5, fp
    cbd2:	orr.w	r2, fp, #1
    cbd6:	str	r1, [r3, #8]
    cbd8:	str	r2, [r1, #4]
    cbda:	ldr.w	r3, [r6, #-4]
    cbde:	and.w	r3, r3, #1
    cbe2:	orrs	r5, r3
    cbe4:	mov	r0, r9
    cbe6:	str.w	r5, [r6, #-4]
    cbea:	bl	c90c <__malloc_unlock>
    cbee:	mov	r0, r6
    cbf0:	b.n	ca58 <_realloc_r+0x148>
    cbf2:	mov	r1, r6
    cbf4:	bl	c7a4 <memmove>
    cbf8:	b.n	c9a6 <_realloc_r+0x96>
    cbfa:	ldr	r3, [r6, #8]
    cbfc:	str	r3, [r0, #8]
    cbfe:	ldr	r3, [r6, #12]
    cc00:	str	r3, [r0, #12]
    cc02:	cmp	r2, #36	; 0x24
    cc04:	beq.n	cc58 <_realloc_r+0x348>
    cc06:	add.w	r3, r0, #16
    cc0a:	add.w	r2, r6, #16
    cc0e:	b.n	c99a <_realloc_r+0x8a>
    cc10:	ldr.w	r3, [r0, #-4]
    cc14:	bic.w	r3, r3, #3
    cc18:	add	r4, r3
    cc1a:	b.n	ca32 <_realloc_r+0x122>
    cc1c:	mov	r1, r6
    cc1e:	mov	r0, r7
    cc20:	mov	r4, lr
    cc22:	mov	r8, sl
    cc24:	bl	c7a4 <memmove>
    cc28:	mov	r6, r7
    cc2a:	b.n	ca32 <_realloc_r+0x122>
    cc2c:	mov	r2, r7
    cc2e:	b.n	ca20 <_realloc_r+0x110>
    cc30:	mov	r1, r6
    cc32:	mov	r0, r7
    cc34:	mov	r4, r3
    cc36:	mov	r8, sl
    cc38:	bl	c7a4 <memmove>
    cc3c:	mov	r6, r7
    cc3e:	b.n	ca32 <_realloc_r+0x122>
    cc40:	ldr	r3, [r6, #8]
    cc42:	str.w	r3, [sl, #16]
    cc46:	ldr	r3, [r6, #12]
    cc48:	str.w	r3, [sl, #20]
    cc4c:	cmp	r2, #36	; 0x24
    cc4e:	beq.n	cc88 <_realloc_r+0x378>
    cc50:	adds	r6, #16
    cc52:	add.w	r3, sl, #24
    cc56:	b.n	cbb6 <_realloc_r+0x2a6>
    cc58:	ldr	r3, [r6, #16]
    cc5a:	str	r3, [r0, #16]
    cc5c:	ldr	r3, [r6, #20]
    cc5e:	str	r3, [r0, #20]
    cc60:	add.w	r2, r6, #24
    cc64:	add.w	r3, r0, #24
    cc68:	b.n	c99a <_realloc_r+0x8a>
    cc6a:	nop
    cc6c:	.word	0x200020f8
    cc70:	ldr	r1, [r6, #8]
    cc72:	str.w	r1, [sl, #16]
    cc76:	ldr	r1, [r6, #12]
    cc78:	str.w	r1, [sl, #20]
    cc7c:	cmp	r2, #36	; 0x24
    cc7e:	beq.n	cca0 <_realloc_r+0x390>
    cc80:	adds	r6, #16
    cc82:	add.w	r2, sl, #24
    cc86:	b.n	ca20 <_realloc_r+0x110>
    cc88:	ldr	r3, [r6, #16]
    cc8a:	str.w	r3, [sl, #24]
    cc8e:	ldr	r3, [r6, #20]
    cc90:	str.w	r3, [sl, #28]
    cc94:	adds	r6, #24
    cc96:	add.w	r3, sl, #32
    cc9a:	b.n	cbb6 <_realloc_r+0x2a6>
    cc9c:	mov	r2, r7
    cc9e:	b.n	cb6a <_realloc_r+0x25a>
    cca0:	ldr	r2, [r6, #16]
    cca2:	str.w	r2, [sl, #24]
    cca6:	ldr	r2, [r6, #20]
    cca8:	str.w	r2, [sl, #28]
    ccac:	adds	r6, #24
    ccae:	add.w	r2, sl, #32
    ccb2:	b.n	ca20 <_realloc_r+0x110>
    ccb4:	mov	r1, r6
    ccb6:	mov	r0, r7
    ccb8:	str	r3, [sp, #4]
    ccba:	bl	c7a4 <memmove>
    ccbe:	ldr	r3, [sp, #4]
    ccc0:	b.n	cb76 <_realloc_r+0x266>
    ccc2:	ldr	r1, [r6, #8]
    ccc4:	str.w	r1, [sl, #16]
    ccc8:	ldr	r1, [r6, #12]
    ccca:	str.w	r1, [sl, #20]
    ccce:	cmp	r2, #36	; 0x24
    ccd0:	beq.n	ccda <_realloc_r+0x3ca>
    ccd2:	adds	r6, #16
    ccd4:	add.w	r2, sl, #24
    ccd8:	b.n	cb6a <_realloc_r+0x25a>
    ccda:	ldr	r2, [r6, #16]
    ccdc:	str.w	r2, [sl, #24]
    cce0:	ldr	r2, [r6, #20]
    cce2:	str.w	r2, [sl, #28]
    cce6:	adds	r6, #24
    cce8:	add.w	r2, sl, #32
    ccec:	b.n	cb6a <_realloc_r+0x25a>
    ccee:	nop

0000ccf0 <_sbrk_r>:
    ccf0:	push	{r3, r4, r5, lr}
    ccf2:	ldr	r4, [pc, #28]	; (cd10 <_sbrk_r+0x20>)
    ccf4:	movs	r3, #0
    ccf6:	mov	r5, r0
    ccf8:	mov	r0, r1
    ccfa:	str	r3, [r4, #0]
    ccfc:	bl	b054 <_sbrk>
    cd00:	adds	r3, r0, #1
    cd02:	beq.n	cd06 <_sbrk_r+0x16>
    cd04:	pop	{r3, r4, r5, pc}
    cd06:	ldr	r3, [r4, #0]
    cd08:	cmp	r3, #0
    cd0a:	beq.n	cd04 <_sbrk_r+0x14>
    cd0c:	str	r3, [r5, #0]
    cd0e:	pop	{r3, r4, r5, pc}
    cd10:	.word	0x20018c40

0000cd14 <sprintf>:
    cd14:	push	{r1, r2, r3}
    cd16:	push	{r4, r5, r6, r7, lr}
    cd18:	sub	sp, #112	; 0x70
    cd1a:	add	r3, sp, #132	; 0x84
    cd1c:	ldr	r1, [pc, #60]	; (cd5c <sprintf+0x48>)
    cd1e:	ldr.w	r2, [r3], #4
    cd22:	str	r3, [sp, #4]
    cd24:	mov	r5, r0
    cd26:	mvn.w	r4, #2147483648	; 0x80000000
    cd2a:	ldr	r0, [r1, #0]
    cd2c:	str	r5, [sp, #8]
    cd2e:	mov.w	r7, #520	; 0x208
    cd32:	movw	r6, #65535	; 0xffff
    cd36:	add	r1, sp, #8
    cd38:	str	r5, [sp, #24]
    cd3a:	strh.w	r7, [sp, #20]
    cd3e:	str	r4, [sp, #16]
    cd40:	str	r4, [sp, #28]
    cd42:	strh.w	r6, [sp, #22]
    cd46:	bl	df60 <_svfprintf_r>
    cd4a:	ldr	r3, [sp, #8]
    cd4c:	movs	r2, #0
    cd4e:	strb	r2, [r3, #0]
    cd50:	add	sp, #112	; 0x70
    cd52:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    cd56:	add	sp, #12
    cd58:	bx	lr
    cd5a:	nop
    cd5c:	.word	0x20002508

0000cd60 <sscanf>:
    cd60:	push	{r1, r2, r3}
    cd62:	push	{r4, r5, r6, r7, lr}
    cd64:	sub	sp, #112	; 0x70
    cd66:	add	r4, sp, #132	; 0x84
    cd68:	mov.w	r2, #516	; 0x204
    cd6c:	ldr.w	r6, [r4], #4
    cd70:	strh.w	r2, [sp, #20]
    cd74:	str	r0, [sp, #8]
    cd76:	str	r0, [sp, #24]
    cd78:	bl	cdc0 <strlen>
    cd7c:	ldr	r3, [pc, #48]	; (cdb0 <sscanf+0x50>)
    cd7e:	str	r4, [sp, #4]
    cd80:	mov	r5, r0
    cd82:	mov	r2, r6
    cd84:	ldr	r7, [pc, #44]	; (cdb4 <sscanf+0x54>)
    cd86:	ldr	r0, [r3, #0]
    cd88:	str	r5, [sp, #12]
    cd8a:	mov	r3, r4
    cd8c:	movw	r6, #65535	; 0xffff
    cd90:	movs	r4, #0
    cd92:	add	r1, sp, #8
    cd94:	str	r5, [sp, #28]
    cd96:	str	r7, [sp, #40]	; 0x28
    cd98:	str	r4, [sp, #56]	; 0x38
    cd9a:	str	r4, [sp, #76]	; 0x4c
    cd9c:	strh.w	r6, [sp, #22]
    cda0:	bl	f4d0 <__ssvfscanf_r>
    cda4:	add	sp, #112	; 0x70
    cda6:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    cdaa:	add	sp, #12
    cdac:	bx	lr
    cdae:	nop
    cdb0:	.word	0x20002508
    cdb4:	.word	0x0000cdb9

0000cdb8 <__seofread>:
    cdb8:	movs	r0, #0
    cdba:	bx	lr
    cdbc:	movs	r0, r0
	...

0000cdc0 <strlen>:
    cdc0:	pld	[r0]
    cdc4:	strd	r4, r5, [sp, #-8]!
    cdc8:	bic.w	r1, r0, #7
    cdcc:	mvn.w	ip, #0
    cdd0:	ands.w	r4, r0, #7
    cdd4:	pld	[r1, #32]
    cdd8:	bne.w	ce6e <strlen+0xae>
    cddc:	mov.w	r4, #0
    cde0:	mvn.w	r0, #7
    cde4:	ldrd	r2, r3, [r1]
    cde8:	pld	[r1, #64]	; 0x40
    cdec:	add.w	r0, r0, #8
    cdf0:	uadd8	r2, r2, ip
    cdf4:	sel	r2, r4, ip
    cdf8:	uadd8	r3, r3, ip
    cdfc:	sel	r3, r2, ip
    ce00:	cbnz	r3, ce56 <strlen+0x96>
    ce02:	ldrd	r2, r3, [r1, #8]
    ce06:	uadd8	r2, r2, ip
    ce0a:	add.w	r0, r0, #8
    ce0e:	sel	r2, r4, ip
    ce12:	uadd8	r3, r3, ip
    ce16:	sel	r3, r2, ip
    ce1a:	cbnz	r3, ce56 <strlen+0x96>
    ce1c:	ldrd	r2, r3, [r1, #16]
    ce20:	uadd8	r2, r2, ip
    ce24:	add.w	r0, r0, #8
    ce28:	sel	r2, r4, ip
    ce2c:	uadd8	r3, r3, ip
    ce30:	sel	r3, r2, ip
    ce34:	cbnz	r3, ce56 <strlen+0x96>
    ce36:	ldrd	r2, r3, [r1, #24]
    ce3a:	add.w	r1, r1, #32
    ce3e:	uadd8	r2, r2, ip
    ce42:	add.w	r0, r0, #8
    ce46:	sel	r2, r4, ip
    ce4a:	uadd8	r3, r3, ip
    ce4e:	sel	r3, r2, ip
    ce52:	cmp	r3, #0
    ce54:	beq.n	cde4 <strlen+0x24>
    ce56:	cmp	r2, #0
    ce58:	itt	eq
    ce5a:	addeq	r0, #4
    ce5c:	moveq	r2, r3
    ce5e:	rev	r2, r2
    ce60:	clz	r2, r2
    ce64:	ldrd	r4, r5, [sp], #8
    ce68:	add.w	r0, r0, r2, lsr #3
    ce6c:	bx	lr
    ce6e:	ldrd	r2, r3, [r1]
    ce72:	and.w	r5, r4, #3
    ce76:	rsb	r0, r4, #0
    ce7a:	mov.w	r5, r5, lsl #3
    ce7e:	tst.w	r4, #4
    ce82:	pld	[r1, #64]	; 0x40
    ce86:	lsl.w	r5, ip, r5
    ce8a:	orn	r2, r2, r5
    ce8e:	itt	ne
    ce90:	ornne	r3, r3, r5
    ce94:	movne	r2, ip
    ce96:	mov.w	r4, #0
    ce9a:	b.n	cdf0 <strlen+0x30>

0000ce9c <strncmp>:
    ce9c:	cmp	r2, #0
    ce9e:	beq.n	cf24 <strncmp+0x88>
    cea0:	orr.w	r3, r0, r1
    cea4:	ands.w	r3, r3, #3
    cea8:	push	{r4, r5, r6, r7}
    ceaa:	bne.n	cef8 <strncmp+0x5c>
    ceac:	cmp	r2, #3
    ceae:	bls.n	cef8 <strncmp+0x5c>
    ceb0:	ldr	r4, [r0, #0]
    ceb2:	ldr	r5, [r1, #0]
    ceb4:	cmp	r4, r5
    ceb6:	bne.n	cef8 <strncmp+0x5c>
    ceb8:	subs	r2, #4
    ceba:	beq.n	cf28 <strncmp+0x8c>
    cebc:	sub.w	r5, r4, #16843009	; 0x1010101
    cec0:	bic.w	r4, r5, r4
    cec4:	tst.w	r4, #2155905152	; 0x80808080
    cec8:	bne.n	cf2e <strncmp+0x92>
    ceca:	adds	r7, r0, #4
    cecc:	adds	r5, r1, #4
    cece:	b.n	ceec <strncmp+0x50>
    ced0:	ldr.w	r3, [r7], #4
    ced4:	ldr	r6, [r1, #0]
    ced6:	sub.w	r4, r3, #16843009	; 0x1010101
    ceda:	cmp	r3, r6
    cedc:	bic.w	r4, r4, r3
    cee0:	bne.n	cef8 <strncmp+0x5c>
    cee2:	subs	r2, #4
    cee4:	beq.n	cf28 <strncmp+0x8c>
    cee6:	tst.w	r4, #2155905152	; 0x80808080
    ceea:	bne.n	cf34 <strncmp+0x98>
    ceec:	cmp	r2, #3
    ceee:	mov	r1, r5
    cef0:	mov	r0, r7
    cef2:	add.w	r5, r5, #4
    cef6:	bhi.n	ced0 <strncmp+0x34>
    cef8:	ldrb	r3, [r0, #0]
    cefa:	ldrb	r4, [r1, #0]
    cefc:	cmp	r4, r3
    cefe:	add.w	r2, r2, #4294967295
    cf02:	bne.n	cf1e <strncmp+0x82>
    cf04:	cbz	r2, cf28 <strncmp+0x8c>
    cf06:	cbnz	r4, cf0e <strncmp+0x72>
    cf08:	b.n	cf38 <strncmp+0x9c>
    cf0a:	cbz	r2, cf28 <strncmp+0x8c>
    cf0c:	cbz	r3, cf2e <strncmp+0x92>
    cf0e:	ldrb.w	r3, [r0, #1]!
    cf12:	ldrb.w	r4, [r1, #1]!
    cf16:	cmp	r3, r4
    cf18:	add.w	r2, r2, #4294967295
    cf1c:	beq.n	cf0a <strncmp+0x6e>
    cf1e:	subs	r0, r3, r4
    cf20:	pop	{r4, r5, r6, r7}
    cf22:	bx	lr
    cf24:	mov	r0, r2
    cf26:	bx	lr
    cf28:	mov	r0, r2
    cf2a:	pop	{r4, r5, r6, r7}
    cf2c:	bx	lr
    cf2e:	mov	r0, r3
    cf30:	pop	{r4, r5, r6, r7}
    cf32:	bx	lr
    cf34:	movs	r0, #0
    cf36:	b.n	cf20 <strncmp+0x84>
    cf38:	mov	r0, r4
    cf3a:	b.n	cf20 <strncmp+0x84>

0000cf3c <sulp>:
    cf3c:	push	{r4, r5, r6, lr}
    cf3e:	mov	r4, r0
    cf40:	mov	r5, r1
    cf42:	mov	r6, r2
    cf44:	vmov	d0, r4, r5
    cf48:	bl	122b8 <__ulp>
    cf4c:	cbz	r6, cf6e <sulp+0x32>
    cf4e:	ubfx	r3, r5, #20, #11
    cf52:	rsb	r3, r3, #107	; 0x6b
    cf56:	cmp	r3, #0
    cf58:	ble.n	cf6e <sulp+0x32>
    cf5a:	lsls	r3, r3, #20
    cf5c:	add.w	r1, r3, #1069547520	; 0x3fc00000
    cf60:	movs	r0, #0
    cf62:	add.w	r1, r1, #3145728	; 0x300000
    cf66:	vmov	d7, r0, r1
    cf6a:	vmul.f64	d0, d0, d7
    cf6e:	pop	{r4, r5, r6, pc}

0000cf70 <_strtod_l>:
    cf70:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf74:	vpush	{d8-d14}
    cf78:	mov	r6, r3
    cf7a:	sub	sp, #100	; 0x64
    cf7c:	movs	r3, #0
    cf7e:	mov	r9, r0
    cf80:	mov	r0, r6
    cf82:	mov	r8, r1
    cf84:	mov	sl, r2
    cf86:	str	r3, [sp, #80]	; 0x50
    cf88:	bl	11c3c <__localeconv_l>
    cf8c:	movs	r4, #0
    cf8e:	movs	r3, #0
    cf90:	mov	fp, r0
    cf92:	ldr	r0, [r0, #0]
    cf94:	strd	r3, r4, [sp, #24]
    cf98:	bl	cdc0 <strlen>
    cf9c:	str.w	r8, [sp, #76]	; 0x4c
    cfa0:	str	r0, [sp, #16]
    cfa2:	mov	r3, r8
    cfa4:	mov	r5, r3
    cfa6:	ldrb.w	r4, [r3], #1
    cfaa:	cmp	r4, #45	; 0x2d
    cfac:	bhi.w	d1e6 <_strtod_l+0x276>
    cfb0:	tbh	[pc, r4, lsl #1]
    cfb4:	.word	0x0119002e
    cfb8:	.word	0x01190119
    cfbc:	.word	0x01190119
    cfc0:	.word	0x01190119
    cfc4:	.word	0x00ef0119
    cfc8:	.word	0x00ef00ef
    cfcc:	.word	0x00ef00ef
    cfd0:	.word	0x01190119
    cfd4:	.word	0x01190119
    cfd8:	.word	0x01190119
    cfdc:	.word	0x01190119
    cfe0:	.word	0x01190119
    cfe4:	.word	0x01190119
    cfe8:	.word	0x01190119
    cfec:	.word	0x01190119
    cff0:	.word	0x01190119
    cff4:	.word	0x011900ef
    cff8:	.word	0x01190119
    cffc:	.word	0x01190119
    d000:	.word	0x01190119
    d004:	.word	0x01190119
    d008:	.word	0x00490119
    d00c:	.word	0x00ec0119
    d010:	vldr	d7, [pc, #700]	; d2d0 <_strtod_l+0x360>
    d014:	vstr	d7, [sp, #16]
    d018:	cmp.w	sl, #0
    d01c:	beq.n	d038 <_strtod_l+0xc8>
    d01e:	movs	r2, #0
    d020:	mov	r3, r8
    d022:	str	r2, [sp, #32]
    d024:	str.w	r3, [sl]
    d028:	ldr	r3, [sp, #32]
    d02a:	cbz	r3, d038 <_strtod_l+0xc8>
    d02c:	vldr	d7, [sp, #16]
    d030:	vneg.f64	d7, d7
    d034:	vstr	d7, [sp, #16]
    d038:	vldr	d0, [sp, #16]
    d03c:	add	sp, #100	; 0x64
    d03e:	vpop	{d8-d14}
    d042:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d046:	movs	r3, #0
    d048:	str	r3, [sp, #32]
    d04a:	adds	r3, r5, #1
    d04c:	str	r3, [sp, #76]	; 0x4c
    d04e:	ldrb	r4, [r5, #1]
    d050:	cmp	r4, #0
    d052:	beq.n	d010 <_strtod_l+0xa0>
    d054:	cmp	r4, #48	; 0x30
    d056:	mov	r5, r3
    d058:	beq.w	d1f0 <_strtod_l+0x280>
    d05c:	movs	r3, #0
    d05e:	str	r5, [sp, #40]	; 0x28
    d060:	str	r3, [sp, #36]	; 0x24
    d062:	sub.w	r3, r4, #48	; 0x30
    d066:	cmp	r3, #9
    d068:	bhi.w	d816 <_strtod_l+0x8a6>
    d06c:	movs	r7, #0
    d06e:	mov	r0, r5
    d070:	mov	r6, r7
    d072:	mov	r5, r7
    d074:	cmp	r5, #8
    d076:	it	gt
    d078:	addgt.w	r7, r7, r7, lsl #2
    d07c:	add.w	r3, r6, r6, lsl #2
    d080:	add.w	r0, r0, #1
    d084:	add.w	r3, r4, r3, lsl #1
    d088:	str	r0, [sp, #76]	; 0x4c
    d08a:	itt	gt
    d08c:	addgt.w	r4, r4, r7, lsl #1
    d090:	subgt.w	r7, r4, #48	; 0x30
    d094:	ldrb	r4, [r0, #0]
    d096:	it	le
    d098:	suble.w	r6, r3, #48	; 0x30
    d09c:	sub.w	r3, r4, #48	; 0x30
    d0a0:	cmp	r3, #9
    d0a2:	add.w	r5, r5, #1
    d0a6:	bls.n	d074 <_strtod_l+0x104>
    d0a8:	ldr.w	r1, [fp]
    d0ac:	ldr	r2, [sp, #16]
    d0ae:	bl	ce9c <strncmp>
    d0b2:	cmp	r0, #0
    d0b4:	beq.n	d196 <_strtod_l+0x226>
    d0b6:	movs	r0, #0
    d0b8:	mov	ip, r0
    d0ba:	mov	fp, r0
    d0bc:	mov	r2, r5
    d0be:	cmp	r4, #101	; 0x65
    d0c0:	beq.w	d2e8 <_strtod_l+0x378>
    d0c4:	cmp	r4, #69	; 0x45
    d0c6:	beq.w	d2e8 <_strtod_l+0x378>
    d0ca:	movs	r3, #0
    d0cc:	cmp	r5, #0
    d0ce:	bne.w	d226 <_strtod_l+0x2b6>
    d0d2:	cmp	r0, #0
    d0d4:	bne.w	d212 <_strtod_l+0x2a2>
    d0d8:	ldr	r3, [sp, #36]	; 0x24
    d0da:	cmp	r3, #0
    d0dc:	bne.w	d212 <_strtod_l+0x2a2>
    d0e0:	cmp.w	fp, #0
    d0e4:	bne.n	d010 <_strtod_l+0xa0>
    d0e6:	subs	r4, #73	; 0x49
    d0e8:	cmp	r4, #37	; 0x25
    d0ea:	bhi.n	d010 <_strtod_l+0xa0>
    d0ec:	add	r3, pc, #4	; (adr r3, d0f4 <_strtod_l+0x184>)
    d0ee:	ldr.w	pc, [r3, r4, lsl #2]
    d0f2:	nop
    d0f4:	.word	0x0000d29b
    d0f8:	.word	0x0000d011
    d0fc:	.word	0x0000d011
    d100:	.word	0x0000d011
    d104:	.word	0x0000d011
    d108:	.word	0x0000d7af
    d10c:	.word	0x0000d011
    d110:	.word	0x0000d011
    d114:	.word	0x0000d011
    d118:	.word	0x0000d011
    d11c:	.word	0x0000d011
    d120:	.word	0x0000d011
    d124:	.word	0x0000d011
    d128:	.word	0x0000d011
    d12c:	.word	0x0000d011
    d130:	.word	0x0000d011
    d134:	.word	0x0000d011
    d138:	.word	0x0000d011
    d13c:	.word	0x0000d011
    d140:	.word	0x0000d011
    d144:	.word	0x0000d011
    d148:	.word	0x0000d011
    d14c:	.word	0x0000d011
    d150:	.word	0x0000d011
    d154:	.word	0x0000d011
    d158:	.word	0x0000d011
    d15c:	.word	0x0000d011
    d160:	.word	0x0000d011
    d164:	.word	0x0000d011
    d168:	.word	0x0000d011
    d16c:	.word	0x0000d011
    d170:	.word	0x0000d011
    d174:	.word	0x0000d29b
    d178:	.word	0x0000d011
    d17c:	.word	0x0000d011
    d180:	.word	0x0000d011
    d184:	.word	0x0000d011
    d188:	.word	0x0000d7af
    d18c:	movs	r3, #1
    d18e:	str	r3, [sp, #32]
    d190:	b.n	d04a <_strtod_l+0xda>
    d192:	str	r3, [sp, #76]	; 0x4c
    d194:	b.n	cfa4 <_strtod_l+0x34>
    d196:	ldr	r3, [sp, #76]	; 0x4c
    d198:	ldr	r1, [sp, #16]
    d19a:	adds	r2, r3, r1
    d19c:	str	r2, [sp, #76]	; 0x4c
    d19e:	ldrb	r4, [r3, r1]
    d1a0:	mov	ip, r0
    d1a2:	mov	r2, r5
    d1a4:	sub.w	r3, r4, #48	; 0x30
    d1a8:	cmp	r3, #9
    d1aa:	bhi.w	d636 <_strtod_l+0x6c6>
    d1ae:	adds	r1, r0, #1
    d1b0:	mov	r4, r3
    d1b2:	cmp	r3, #0
    d1b4:	beq.w	ddc6 <_strtod_l+0xe56>
    d1b8:	cmp	r1, #1
    d1ba:	add	ip, r1
    d1bc:	it	ne
    d1be:	addne	r0, r0, r5
    d1c0:	bne.n	d1ce <_strtod_l+0x25e>
    d1c2:	b.w	ddaa <_strtod_l+0xe3a>
    d1c6:	lsls	r6, r1, #1
    d1c8:	cmp	r5, r0
    d1ca:	beq.w	da52 <_strtod_l+0xae2>
    d1ce:	adds	r5, #1
    d1d0:	subs	r1, r5, #1
    d1d2:	cmp	r1, #8
    d1d4:	add.w	r1, r6, r6, lsl #2
    d1d8:	ble.n	d1c6 <_strtod_l+0x256>
    d1da:	cmp	r5, #16
    d1dc:	itt	le
    d1de:	addle.w	r7, r7, r7, lsl #2
    d1e2:	lslle	r7, r7, #1
    d1e4:	b.n	d1c8 <_strtod_l+0x258>
    d1e6:	movs	r3, #0
    d1e8:	cmp	r4, #48	; 0x30
    d1ea:	str	r3, [sp, #32]
    d1ec:	bne.w	d05c <_strtod_l+0xec>
    d1f0:	ldrb	r3, [r5, #1]
    d1f2:	cmp	r3, #88	; 0x58
    d1f4:	beq.w	d7de <_strtod_l+0x86e>
    d1f8:	cmp	r3, #120	; 0x78
    d1fa:	beq.w	d7de <_strtod_l+0x86e>
    d1fe:	adds	r5, #1
    d200:	str	r5, [sp, #76]	; 0x4c
    d202:	ldrb	r4, [r5, #0]
    d204:	cmp	r4, #48	; 0x30
    d206:	beq.n	d1fe <_strtod_l+0x28e>
    d208:	cbz	r4, d212 <_strtod_l+0x2a2>
    d20a:	movs	r3, #1
    d20c:	str	r5, [sp, #40]	; 0x28
    d20e:	str	r3, [sp, #36]	; 0x24
    d210:	b.n	d062 <_strtod_l+0xf2>
    d212:	vldr	d7, [pc, #188]	; d2d0 <_strtod_l+0x360>
    d216:	vstr	d7, [sp, #16]
    d21a:	cmp.w	sl, #0
    d21e:	beq.w	d028 <_strtod_l+0xb8>
    d222:	ldr	r3, [sp, #76]	; 0x4c
    d224:	b.n	d024 <_strtod_l+0xb4>
    d226:	vmov	s15, r6
    d22a:	vcvt.f64.u32	d7, s15
    d22e:	cmp	r5, #16
    d230:	vstr	d7, [sp, #16]
    d234:	rsb	r4, ip, r3
    d238:	ldrd	fp, ip, [sp, #16]
    d23c:	mov	r1, r5
    d23e:	it	ge
    d240:	movge	r1, #16
    d242:	cmp	r2, #0
    d244:	it	eq
    d246:	moveq	r2, r5
    d248:	cmp	r1, #9
    d24a:	strd	fp, ip, [sp, #24]
    d24e:	ble.n	d26e <_strtod_l+0x2fe>
    d250:	ldr	r3, [pc, #132]	; (d2d8 <_strtod_l+0x368>)
    d252:	add.w	r3, r3, r1, lsl #3
    d256:	vldr	d6, [r3, #-72]	; 0xffffffb8
    d25a:	vldr	d5, [sp, #16]
    d25e:	vmov	s15, r7
    d262:	vcvt.f64.u32	d7, s15
    d266:	vfma.f64	d7, d5, d6
    d26a:	vstr	d7, [sp, #24]
    d26e:	cmp	r5, #15
    d270:	bgt.w	d38a <_strtod_l+0x41a>
    d274:	cmp	r4, #0
    d276:	beq.n	d2c6 <_strtod_l+0x356>
    d278:	ble.w	db7e <_strtod_l+0xc0e>
    d27c:	cmp	r4, #22
    d27e:	bgt.w	da84 <_strtod_l+0xb14>
    d282:	ldr	r3, [pc, #84]	; (d2d8 <_strtod_l+0x368>)
    d284:	add.w	r4, r3, r4, lsl #3
    d288:	vldr	d7, [r4]
    d28c:	vldr	d6, [sp, #24]
    d290:	vmul.f64	d7, d7, d6
    d294:	vstr	d7, [sp, #16]
    d298:	b.n	d21a <_strtod_l+0x2aa>
    d29a:	add	r0, sp, #76	; 0x4c
    d29c:	ldr	r1, [pc, #60]	; (d2dc <_strtod_l+0x36c>)
    d29e:	bl	11a70 <__match>
    d2a2:	cmp	r0, #0
    d2a4:	beq.w	d010 <_strtod_l+0xa0>
    d2a8:	ldr	r3, [sp, #76]	; 0x4c
    d2aa:	ldr	r1, [pc, #52]	; (d2e0 <_strtod_l+0x370>)
    d2ac:	subs	r3, #1
    d2ae:	add	r0, sp, #76	; 0x4c
    d2b0:	str	r3, [sp, #76]	; 0x4c
    d2b2:	bl	11a70 <__match>
    d2b6:	cbnz	r0, d2be <_strtod_l+0x34e>
    d2b8:	ldr	r3, [sp, #76]	; 0x4c
    d2ba:	adds	r3, #1
    d2bc:	str	r3, [sp, #76]	; 0x4c
    d2be:	ldr	r3, [pc, #36]	; (d2e4 <_strtod_l+0x374>)
    d2c0:	str	r3, [sp, #28]
    d2c2:	movs	r3, #0
    d2c4:	str	r3, [sp, #24]
    d2c6:	vldr	d7, [sp, #24]
    d2ca:	vstr	d7, [sp, #16]
    d2ce:	b.n	d21a <_strtod_l+0x2aa>
	...
    d2d8:	.word	0x200002a8
    d2dc:	.word	0x200019f8
    d2e0:	.word	0x200019fc
    d2e4:	.word	0x7ff00000
    d2e8:	cmp	r5, #0
    d2ea:	beq.w	d620 <_strtod_l+0x6b0>
    d2ee:	ldr.w	r8, [sp, #76]	; 0x4c
    d2f2:	add.w	r3, r8, #1
    d2f6:	str	r3, [sp, #76]	; 0x4c
    d2f8:	ldrb.w	r4, [r8, #1]
    d2fc:	cmp	r4, #43	; 0x2b
    d2fe:	beq.w	d7d8 <_strtod_l+0x868>
    d302:	cmp	r4, #45	; 0x2d
    d304:	beq.w	d672 <_strtod_l+0x702>
    d308:	movs	r3, #0
    d30a:	str	r3, [sp, #16]
    d30c:	sub.w	r3, r4, #48	; 0x30
    d310:	cmp	r3, #9
    d312:	bhi.w	d7d0 <_strtod_l+0x860>
    d316:	cmp	r4, #48	; 0x30
    d318:	bne.n	d326 <_strtod_l+0x3b6>
    d31a:	ldr	r3, [sp, #76]	; 0x4c
    d31c:	adds	r3, #1
    d31e:	str	r3, [sp, #76]	; 0x4c
    d320:	ldrb	r4, [r3, #0]
    d322:	cmp	r4, #48	; 0x30
    d324:	beq.n	d31c <_strtod_l+0x3ac>
    d326:	sub.w	r3, r4, #49	; 0x31
    d32a:	cmp	r3, #8
    d32c:	bhi.w	d0ca <_strtod_l+0x15a>
    d330:	ldr	r3, [sp, #76]	; 0x4c
    d332:	str	r3, [sp, #48]	; 0x30
    d334:	adds	r1, r3, #1
    d336:	subs	r4, #48	; 0x30
    d338:	str	r1, [sp, #76]	; 0x4c
    d33a:	str	r4, [sp, #44]	; 0x2c
    d33c:	ldrb	r4, [r3, #1]
    d33e:	sub.w	lr, r4, #48	; 0x30
    d342:	cmp.w	lr, #9
    d346:	bhi.n	d368 <_strtod_l+0x3f8>
    d348:	ldr	r3, [sp, #44]	; 0x2c
    d34a:	adds	r1, #1
    d34c:	str	r1, [sp, #76]	; 0x4c
    d34e:	add.w	r3, r3, r3, lsl #2
    d352:	add.w	r3, r4, r3, lsl #1
    d356:	ldrb	r4, [r1, #0]
    d358:	sub.w	lr, r4, #48	; 0x30
    d35c:	cmp.w	lr, #9
    d360:	sub.w	r3, r3, #48	; 0x30
    d364:	bls.n	d34a <_strtod_l+0x3da>
    d366:	str	r3, [sp, #44]	; 0x2c
    d368:	ldr	r3, [sp, #48]	; 0x30
    d36a:	subs	r1, r1, r3
    d36c:	cmp	r1, #8
    d36e:	bgt.w	da74 <_strtod_l+0xb04>
    d372:	ldr	r3, [sp, #44]	; 0x2c
    d374:	movw	r1, #19999	; 0x4e1f
    d378:	cmp	r3, r1
    d37a:	it	ge
    d37c:	movge	r3, r1
    d37e:	ldr	r1, [sp, #16]
    d380:	cmp	r1, #0
    d382:	beq.w	d0cc <_strtod_l+0x15c>
    d386:	negs	r3, r3
    d388:	b.n	d0cc <_strtod_l+0x15c>
    d38a:	subs	r3, r5, r1
    d38c:	add	r3, r4
    d38e:	cmp	r3, #0
    d390:	ble.w	d998 <_strtod_l+0xa28>
    d394:	ands.w	r0, r3, #15
    d398:	beq.n	d3b0 <_strtod_l+0x440>
    d39a:	ldr	r1, [pc, #780]	; (d6a8 <_strtod_l+0x738>)
    d39c:	add.w	r1, r1, r0, lsl #3
    d3a0:	vldr	d6, [sp, #24]
    d3a4:	vldr	d7, [r1]
    d3a8:	vmul.f64	d7, d7, d6
    d3ac:	vstr	d7, [sp, #24]
    d3b0:	bics.w	r3, r3, #15
    d3b4:	bne.w	d6c4 <_strtod_l+0x754>
    d3b8:	movs	r3, #0
    d3ba:	str	r3, [sp, #36]	; 0x24
    d3bc:	str	r6, [sp, #0]
    d3be:	mov	r3, r5
    d3c0:	ldr	r1, [sp, #40]	; 0x28
    d3c2:	mov	r0, r9
    d3c4:	bl	11d98 <__s2b>
    d3c8:	mov	fp, r0
    d3ca:	cmp	r0, #0
    d3cc:	beq.w	d8bc <_strtod_l+0x94c>
    d3d0:	cmp	r4, #0
    d3d2:	mov.w	r8, #0
    d3d6:	rsb	r3, r4, #0
    d3da:	vldr	d10, [pc, #684]	; d688 <_strtod_l+0x718>
    d3de:	it	ge
    d3e0:	movge	r3, r8
    d3e2:	vldr	d9, [pc, #684]	; d690 <_strtod_l+0x720>
    d3e6:	vldr	d11, [pc, #688]	; d698 <_strtod_l+0x728>
    d3ea:	vldr	d8, [pc, #692]	; d6a0 <_strtod_l+0x730>
    d3ee:	str	r3, [sp, #44]	; 0x2c
    d3f0:	bic.w	r3, r4, r4, asr #31
    d3f4:	str	r3, [sp, #40]	; 0x28
    d3f6:	mov	r4, r8
    d3f8:	str.w	sl, [sp, #60]	; 0x3c
    d3fc:	ldr.w	r1, [fp, #4]
    d400:	mov	r0, r9
    d402:	bl	11cb8 <_Balloc>
    d406:	mov	r6, r0
    d408:	cmp	r0, #0
    d40a:	beq.w	d938 <_strtod_l+0x9c8>
    d40e:	ldr.w	r2, [fp, #16]
    d412:	vldr	d7, [sp, #24]
    d416:	adds	r2, #2
    d418:	lsls	r2, r2, #2
    d41a:	add.w	r1, fp, #12
    d41e:	adds	r0, #12
    d420:	vstr	d7, [sp, #16]
    d424:	bl	9920 <memcpy>
    d428:	vldr	d0, [sp, #16]
    d42c:	add	r2, sp, #88	; 0x58
    d42e:	add	r1, sp, #84	; 0x54
    d430:	mov	r0, r9
    d432:	bl	123dc <__d2b>
    d436:	str	r0, [sp, #80]	; 0x50
    d438:	cmp	r0, #0
    d43a:	beq.w	dba0 <_strtod_l+0xc30>
    d43e:	movs	r1, #1
    d440:	mov	r0, r9
    d442:	bl	11ecc <__i2b>
    d446:	mov	r4, r0
    d448:	cmp	r0, #0
    d44a:	beq.w	d938 <_strtod_l+0x9c8>
    d44e:	ldr	r2, [sp, #84]	; 0x54
    d450:	cmp	r2, #0
    d452:	blt.w	d62e <_strtod_l+0x6be>
    d456:	ldr	r3, [sp, #44]	; 0x2c
    d458:	ldr	r5, [sp, #40]	; 0x28
    d45a:	adds	r7, r3, r2
    d45c:	ldr	r1, [sp, #36]	; 0x24
    d45e:	ldr	r3, [sp, #88]	; 0x58
    d460:	subs	r2, r2, r1
    d462:	add	r2, r3
    d464:	ldr	r1, [pc, #580]	; (d6ac <_strtod_l+0x73c>)
    d466:	subs	r2, #1
    d468:	cmp	r2, r1
    d46a:	rsb	r3, r3, #54	; 0x36
    d46e:	bge.w	d5fc <_strtod_l+0x68c>
    d472:	subs	r1, r1, r2
    d474:	cmp	r1, #31
    d476:	sub.w	r3, r3, r1
    d47a:	bgt.w	d63c <_strtod_l+0x6cc>
    d47e:	movs	r2, #1
    d480:	lsls	r2, r1
    d482:	str	r2, [sp, #52]	; 0x34
    d484:	movs	r2, #0
    d486:	str	r2, [sp, #56]	; 0x38
    d488:	add.w	sl, r7, r3
    d48c:	add	r5, r3
    d48e:	ldr	r3, [sp, #36]	; 0x24
    d490:	cmp	r7, sl
    d492:	mov	r2, r7
    d494:	add	r5, r3
    d496:	it	ge
    d498:	movge	r2, sl
    d49a:	cmp	r2, r5
    d49c:	it	ge
    d49e:	movge	r2, r5
    d4a0:	cmp	r2, #0
    d4a2:	ble.n	d4ac <_strtod_l+0x53c>
    d4a4:	rsb	sl, r2, sl
    d4a8:	subs	r5, r5, r2
    d4aa:	subs	r7, r7, r2
    d4ac:	ldr	r3, [sp, #44]	; 0x2c
    d4ae:	cbz	r3, d4e0 <_strtod_l+0x570>
    d4b0:	mov	r1, r4
    d4b2:	mov	r2, r3
    d4b4:	mov	r0, r9
    d4b6:	bl	12010 <__pow5mult>
    d4ba:	mov	r4, r0
    d4bc:	cmp	r0, #0
    d4be:	beq.w	d938 <_strtod_l+0x9c8>
    d4c2:	mov	r1, r0
    d4c4:	ldr	r2, [sp, #80]	; 0x50
    d4c6:	mov	r0, r9
    d4c8:	bl	11ee0 <__multiply>
    d4cc:	cmp	r0, #0
    d4ce:	beq.w	d938 <_strtod_l+0x9c8>
    d4d2:	str	r0, [sp, #48]	; 0x30
    d4d4:	ldr	r1, [sp, #80]	; 0x50
    d4d6:	mov	r0, r9
    d4d8:	bl	11d04 <_Bfree>
    d4dc:	ldr	r2, [sp, #48]	; 0x30
    d4de:	str	r2, [sp, #80]	; 0x50
    d4e0:	cmp.w	sl, #0
    d4e4:	ble.n	d4f8 <_strtod_l+0x588>
    d4e6:	mov	r2, sl
    d4e8:	ldr	r1, [sp, #80]	; 0x50
    d4ea:	mov	r0, r9
    d4ec:	bl	120b0 <__lshift>
    d4f0:	str	r0, [sp, #80]	; 0x50
    d4f2:	cmp	r0, #0
    d4f4:	beq.w	dba0 <_strtod_l+0xc30>
    d4f8:	ldr	r3, [sp, #40]	; 0x28
    d4fa:	cbz	r3, d50e <_strtod_l+0x59e>
    d4fc:	mov	r1, r6
    d4fe:	ldr	r2, [sp, #40]	; 0x28
    d500:	mov	r0, r9
    d502:	bl	12010 <__pow5mult>
    d506:	mov	r6, r0
    d508:	cmp	r0, #0
    d50a:	beq.w	d938 <_strtod_l+0x9c8>
    d50e:	cmp	r5, #0
    d510:	ble.n	d524 <_strtod_l+0x5b4>
    d512:	mov	r1, r6
    d514:	mov	r2, r5
    d516:	mov	r0, r9
    d518:	bl	120b0 <__lshift>
    d51c:	mov	r6, r0
    d51e:	cmp	r0, #0
    d520:	beq.w	d938 <_strtod_l+0x9c8>
    d524:	cmp	r7, #0
    d526:	ble.n	d53a <_strtod_l+0x5ca>
    d528:	mov	r1, r4
    d52a:	mov	r2, r7
    d52c:	mov	r0, r9
    d52e:	bl	120b0 <__lshift>
    d532:	mov	r4, r0
    d534:	cmp	r0, #0
    d536:	beq.w	d938 <_strtod_l+0x9c8>
    d53a:	mov	r2, r6
    d53c:	ldr	r1, [sp, #80]	; 0x50
    d53e:	mov	r0, r9
    d540:	bl	121a4 <__mdiff>
    d544:	mov	r8, r0
    d546:	cmp	r0, #0
    d548:	beq.w	d938 <_strtod_l+0x9c8>
    d54c:	movs	r3, #0
    d54e:	ldr	r5, [r0, #12]
    d550:	str	r3, [r0, #12]
    d552:	mov	r1, r4
    d554:	bl	12160 <__mcmp>
    d558:	cmp	r0, #0
    d55a:	blt.w	dba6 <_strtod_l+0xc36>
    d55e:	beq.w	dc68 <_strtod_l+0xcf8>
    d562:	mov	r1, r4
    d564:	mov	r0, r8
    d566:	bl	12498 <__ratio>
    d56a:	vmov.f64	d7, #0	; 0x40000000  2.0
    d56e:	vcmpe.f64	d0, d7
    d572:	vmrs	APSR_nzcv, fpscr
    d576:	bhi.n	d606 <_strtod_l+0x696>
    d578:	cmp	r5, #0
    d57a:	beq.n	d64c <_strtod_l+0x6dc>
    d57c:	vmov.f64	d13, #112	; 0x3f800000  1.0
    d580:	ldr	r3, [pc, #300]	; (d6b0 <_strtod_l+0x740>)
    d582:	ldr	r1, [sp, #28]
    d584:	movs	r2, #0
    d586:	ldr	r7, [pc, #300]	; (d6b4 <_strtod_l+0x744>)
    d588:	ldr	r0, [pc, #300]	; (d6b8 <_strtod_l+0x748>)
    d58a:	ands	r7, r1
    d58c:	cmp	r7, r0
    d58e:	beq.w	d870 <_strtod_l+0x900>
    d592:	ldr	r1, [sp, #36]	; 0x24
    d594:	cbz	r1, d5ae <_strtod_l+0x63e>
    d596:	cmp.w	r7, #111149056	; 0x6a00000
    d59a:	bhi.n	d5ae <_strtod_l+0x63e>
    d59c:	vcmpe.f64	d13, d8
    d5a0:	vmrs	APSR_nzcv, fpscr
    d5a4:	bls.w	d78c <_strtod_l+0x81c>
    d5a8:	add.w	r1, r3, #112197632	; 0x6b00000
    d5ac:	subs	r3, r1, r7
    d5ae:	vldr	d0, [sp, #16]
    d5b2:	vmov	d12, r2, r3
    d5b6:	bl	122b8 <__ulp>
    d5ba:	vldr	d7, [sp, #16]
    d5be:	vfma.f64	d7, d12, d0
    d5c2:	vmov	r2, r3, d7
    d5c6:	strd	r2, r3, [sp, #24]
    d5ca:	mov	r2, r3
    d5cc:	ldr	r3, [sp, #36]	; 0x24
    d5ce:	cbnz	r3, d5da <_strtod_l+0x66a>
    d5d0:	ldr	r3, [pc, #224]	; (d6b4 <_strtod_l+0x744>)
    d5d2:	ands	r3, r2
    d5d4:	cmp	r7, r3
    d5d6:	beq.w	d8d4 <_strtod_l+0x964>
    d5da:	ldr	r1, [sp, #80]	; 0x50
    d5dc:	mov	r0, r9
    d5de:	bl	11d04 <_Bfree>
    d5e2:	mov	r1, r6
    d5e4:	mov	r0, r9
    d5e6:	bl	11d04 <_Bfree>
    d5ea:	mov	r1, r4
    d5ec:	mov	r0, r9
    d5ee:	bl	11d04 <_Bfree>
    d5f2:	mov	r1, r8
    d5f4:	mov	r0, r9
    d5f6:	bl	11d04 <_Bfree>
    d5fa:	b.n	d3fc <_strtod_l+0x48c>
    d5fc:	movs	r2, #0
    d5fe:	str	r2, [sp, #56]	; 0x38
    d600:	movs	r2, #1
    d602:	str	r2, [sp, #52]	; 0x34
    d604:	b.n	d488 <_strtod_l+0x518>
    d606:	vmov.f64	d7, #96	; 0x3f000000  0.5
    d60a:	vmul.f64	d13, d0, d7
    d60e:	cbnz	r5, d66c <_strtod_l+0x6fc>
    d610:	vneg.f64	d7, d13
    d614:	vmov	r2, r3, d7
    d618:	ldr	r1, [sp, #28]
    d61a:	b.n	d586 <_strtod_l+0x616>
    d61c:	mov.w	fp, #1
    d620:	cbnz	r0, d682 <_strtod_l+0x712>
    d622:	ldr	r3, [sp, #36]	; 0x24
    d624:	cmp	r3, #0
    d626:	beq.w	d010 <_strtod_l+0xa0>
    d62a:	mov	r5, r0
    d62c:	b.n	d2ee <_strtod_l+0x37e>
    d62e:	ldr	r3, [sp, #40]	; 0x28
    d630:	ldr	r7, [sp, #44]	; 0x2c
    d632:	subs	r5, r3, r2
    d634:	b.n	d45c <_strtod_l+0x4ec>
    d636:	mov.w	fp, #1
    d63a:	b.n	d0be <_strtod_l+0x14e>
    d63c:	ldr	r1, [pc, #124]	; (d6bc <_strtod_l+0x74c>)
    d63e:	subs	r1, r1, r2
    d640:	movs	r2, #1
    d642:	lsl.w	r1, r2, r1
    d646:	str	r1, [sp, #56]	; 0x38
    d648:	str	r2, [sp, #52]	; 0x34
    d64a:	b.n	d488 <_strtod_l+0x518>
    d64c:	ldrd	r1, r2, [sp, #24]
    d650:	cmp	r1, #0
    d652:	beq.w	d75e <_strtod_l+0x7ee>
    d656:	ldrd	r1, r2, [sp, #24]
    d65a:	cmp	r1, #1
    d65c:	beq.w	db3c <_strtod_l+0xbcc>
    d660:	mov	r1, r2
    d662:	vmov.f64	d13, #112	; 0x3f800000  1.0
    d666:	movs	r2, #0
    d668:	ldr	r3, [pc, #84]	; (d6c0 <_strtod_l+0x750>)
    d66a:	b.n	d586 <_strtod_l+0x616>
    d66c:	vmov	r2, r3, d13
    d670:	b.n	d618 <_strtod_l+0x6a8>
    d672:	movs	r3, #1
    d674:	str	r3, [sp, #16]
    d676:	add.w	r3, r8, #2
    d67a:	str	r3, [sp, #76]	; 0x4c
    d67c:	ldrb.w	r4, [r8, #2]
    d680:	b.n	d30c <_strtod_l+0x39c>
    d682:	movs	r5, #0
    d684:	b.n	d2ee <_strtod_l+0x37e>
    d686:	nop
    d688:	.word	0x94a03595
    d68c:	.word	0x3fdfffff
    d690:	.word	0x35afe535
    d694:	.word	0x3fe00000
    d698:	.word	0x94a03595
    d69c:	.word	0x3fcfffff
    d6a0:	.word	0xffc00000
    d6a4:	.word	0x41dfffff
    d6a8:	.word	0x200002a8
    d6ac:	.word	0xfffffc02
    d6b0:	.word	0x3ff00000
    d6b4:	.word	0x7ff00000
    d6b8:	.word	0x7fe00000
    d6bc:	.word	0xfffffbe2
    d6c0:	.word	0xbff00000
    d6c4:	cmp.w	r3, #308	; 0x134
    d6c8:	bgt.w	d8bc <_strtod_l+0x94c>
    d6cc:	asrs	r3, r3, #4
    d6ce:	cmp	r3, #1
    d6d0:	ldr.w	lr, [pc, #704]	; d994 <_strtod_l+0xa24>
    d6d4:	ble.w	dcd2 <_strtod_l+0xd62>
    d6d8:	vldr	d7, [sp, #24]
    d6dc:	vstr	d7, [sp, #16]
    d6e0:	movs	r7, #0
    d6e2:	mov	r1, lr
    d6e4:	mov	r0, r7
    d6e6:	tst.w	r3, #1
    d6ea:	add.w	r0, r0, #1
    d6ee:	mov.w	r3, r3, asr #1
    d6f2:	beq.n	d706 <_strtod_l+0x796>
    d6f4:	vldr	d6, [sp, #16]
    d6f8:	vldr	d7, [r1]
    d6fc:	vmul.f64	d7, d6, d7
    d700:	vstr	d7, [sp, #16]
    d704:	movs	r7, #1
    d706:	cmp	r3, #1
    d708:	add.w	r1, r1, #8
    d70c:	bne.n	d6e6 <_strtod_l+0x776>
    d70e:	cmp	r7, #0
    d710:	bne.w	ddb2 <_strtod_l+0xe42>
    d714:	ldr	r3, [sp, #28]
    d716:	ldr	r1, [pc, #608]	; (d978 <_strtod_l+0xa08>)
    d718:	sub.w	r3, r3, #55574528	; 0x3500000
    d71c:	str	r3, [sp, #28]
    d71e:	add.w	r0, lr, r0, lsl #3
    d722:	vldr	d6, [sp, #24]
    d726:	vldr	d7, [r0]
    d72a:	vmul.f64	d7, d7, d6
    d72e:	vmov	r7, r8, d7
    d732:	bic.w	r3, r8, #2147483648	; 0x80000000
    d736:	lsrs	r3, r3, #20
    d738:	lsls	r3, r3, #20
    d73a:	cmp	r3, r1
    d73c:	strd	r7, r8, [sp, #24]
    d740:	bhi.w	d8bc <_strtod_l+0x94c>
    d744:	sub.w	r1, r1, #1048576	; 0x100000
    d748:	cmp	r3, r1
    d74a:	bls.w	dca0 <_strtod_l+0xd30>
    d74e:	ldr	r3, [pc, #556]	; (d97c <_strtod_l+0xa0c>)
    d750:	str	r3, [sp, #28]
    d752:	movs	r3, #0
    d754:	str	r3, [sp, #36]	; 0x24
    d756:	mov.w	r3, #4294967295
    d75a:	str	r3, [sp, #24]
    d75c:	b.n	d3bc <_strtod_l+0x44c>
    d75e:	ubfx	r3, r2, #0, #20
    d762:	mov	r1, r2
    d764:	cmp	r3, #0
    d766:	bne.w	d662 <_strtod_l+0x6f2>
    d76a:	vmov.f64	d7, #112	; 0x3f800000  1.0
    d76e:	vcmpe.f64	d0, d7
    d772:	vmrs	APSR_nzcv, fpscr
    d776:	bmi.w	dcaa <_strtod_l+0xd3a>
    d77a:	vmov.f64	d7, #96	; 0x3f000000  0.5
    d77e:	vmul.f64	d13, d0, d7
    d782:	vneg.f64	d7, d13
    d786:	vmov	r2, r3, d7
    d78a:	b.n	d586 <_strtod_l+0x616>
    d78c:	vcvt.u32.f64	s0, d13
    d790:	vmov	r3, s0
    d794:	cmp	r3, #0
    d796:	beq.w	daba <_strtod_l+0xb4a>
    d79a:	vcvt.f64.u32	d13, s0
    d79e:	cmp	r5, #0
    d7a0:	bne.w	db36 <_strtod_l+0xbc6>
    d7a4:	vneg.f64	d7, d13
    d7a8:	vmov	r2, r3, d7
    d7ac:	b.n	d5a8 <_strtod_l+0x638>
    d7ae:	add	r0, sp, #76	; 0x4c
    d7b0:	ldr	r1, [pc, #460]	; (d980 <_strtod_l+0xa10>)
    d7b2:	bl	11a70 <__match>
    d7b6:	cmp	r0, #0
    d7b8:	beq.w	d010 <_strtod_l+0xa0>
    d7bc:	ldr	r3, [sp, #76]	; 0x4c
    d7be:	ldrb	r3, [r3, #0]
    d7c0:	cmp	r3, #40	; 0x28
    d7c2:	beq.w	dd54 <_strtod_l+0xde4>
    d7c6:	ldr	r3, [pc, #444]	; (d984 <_strtod_l+0xa14>)
    d7c8:	str	r3, [sp, #28]
    d7ca:	movs	r3, #0
    d7cc:	str	r3, [sp, #24]
    d7ce:	b.n	d2c6 <_strtod_l+0x356>
    d7d0:	str.w	r8, [sp, #76]	; 0x4c
    d7d4:	movs	r3, #0
    d7d6:	b.n	d0cc <_strtod_l+0x15c>
    d7d8:	movs	r3, #0
    d7da:	str	r3, [sp, #16]
    d7dc:	b.n	d676 <_strtod_l+0x706>
    d7de:	ldr	r2, [sp, #32]
    d7e0:	str	r6, [sp, #8]
    d7e2:	add	r3, sp, #80	; 0x50
    d7e4:	str	r2, [sp, #4]
    d7e6:	str	r3, [sp, #0]
    d7e8:	ldr	r2, [pc, #412]	; (d988 <_strtod_l+0xa18>)
    d7ea:	add	r3, sp, #84	; 0x54
    d7ec:	add	r1, sp, #76	; 0x4c
    d7ee:	mov	r0, r9
    d7f0:	bl	11560 <__gethex>
    d7f4:	ands.w	r6, r0, #7
    d7f8:	mov	r4, r0
    d7fa:	beq.w	d212 <_strtod_l+0x2a2>
    d7fe:	cmp	r6, #6
    d800:	bne.w	dac0 <_strtod_l+0xb50>
    d804:	vldr	d7, [pc, #360]	; d970 <_strtod_l+0xa00>
    d808:	adds	r5, #1
    d80a:	movs	r3, #0
    d80c:	str	r5, [sp, #76]	; 0x4c
    d80e:	vstr	d7, [sp, #16]
    d812:	str	r3, [sp, #32]
    d814:	b.n	d21a <_strtod_l+0x2aa>
    d816:	ldr.w	r1, [fp]
    d81a:	ldr	r2, [sp, #16]
    d81c:	mov	r0, r5
    d81e:	bl	ce9c <strncmp>
    d822:	cbz	r0, d834 <_strtod_l+0x8c4>
    d824:	movs	r2, #0
    d826:	mov	r7, r2
    d828:	mov	r6, r2
    d82a:	mov	r0, r2
    d82c:	mov	ip, r2
    d82e:	mov	r5, r2
    d830:	mov	fp, r2
    d832:	b.n	d0be <_strtod_l+0x14e>
    d834:	ldr	r2, [sp, #76]	; 0x4c
    d836:	ldr	r1, [sp, #16]
    d838:	adds	r3, r2, r1
    d83a:	str	r3, [sp, #76]	; 0x4c
    d83c:	ldrb	r4, [r2, r1]
    d83e:	cmp	r4, #48	; 0x30
    d840:	bne.n	d850 <_strtod_l+0x8e0>
    d842:	adds	r3, #1
    d844:	str	r3, [sp, #76]	; 0x4c
    d846:	ldrb	r4, [r3, #0]
    d848:	cmp	r4, #48	; 0x30
    d84a:	add.w	r0, r0, #1
    d84e:	beq.n	d842 <_strtod_l+0x8d2>
    d850:	sub.w	r3, r4, #49	; 0x31
    d854:	cmp	r3, #8
    d856:	bls.w	db5e <_strtod_l+0xbee>
    d85a:	movs	r2, #0
    d85c:	cmp	r4, #101	; 0x65
    d85e:	mov	r7, r2
    d860:	mov	r6, r2
    d862:	mov	ip, r2
    d864:	beq.w	d61c <_strtod_l+0x6ac>
    d868:	mov	r5, r2
    d86a:	mov.w	fp, #1
    d86e:	b.n	d0c4 <_strtod_l+0x154>
    d870:	sub.w	r1, r1, #55574528	; 0x3500000
    d874:	str	r1, [sp, #28]
    d876:	vldr	d14, [sp, #24]
    d87a:	vmov.f64	d0, d14
    d87e:	vmov	d12, r2, r3
    d882:	bl	122b8 <__ulp>
    d886:	vfma.f64	d14, d12, d0
    d88a:	vmov	r2, r3, d14
    d88e:	strd	r2, r3, [sp, #24]
    d892:	bic.w	r3, r3, #2147483648	; 0x80000000
    d896:	lsrs	r3, r3, #20
    d898:	ldr	r2, [pc, #240]	; (d98c <_strtod_l+0xa1c>)
    d89a:	ldrd	r0, r1, [sp, #16]
    d89e:	lsls	r3, r3, #20
    d8a0:	cmp	r3, r2
    d8a2:	strd	r0, r1, [sp, #64]	; 0x40
    d8a6:	bls.w	da7a <_strtod_l+0xb0a>
    d8aa:	ldr	r3, [pc, #208]	; (d97c <_strtod_l+0xa0c>)
    d8ac:	cmp	r1, r3
    d8ae:	beq.n	d932 <_strtod_l+0x9c2>
    d8b0:	ldr	r3, [pc, #200]	; (d97c <_strtod_l+0xa0c>)
    d8b2:	str	r3, [sp, #28]
    d8b4:	mov.w	r3, #4294967295
    d8b8:	str	r3, [sp, #24]
    d8ba:	b.n	d5da <_strtod_l+0x66a>
    d8bc:	ldr	r3, [pc, #208]	; (d990 <_strtod_l+0xa20>)
    d8be:	str	r3, [sp, #28]
    d8c0:	movs	r2, #0
    d8c2:	str	r2, [sp, #24]
    d8c4:	vldr	d7, [sp, #24]
    d8c8:	movs	r3, #34	; 0x22
    d8ca:	vstr	d7, [sp, #16]
    d8ce:	str.w	r3, [r9]
    d8d2:	b.n	d21a <_strtod_l+0x2aa>
    d8d4:	vcvt.s32.f64	s14, d13
    d8d8:	vcvt.f64.s32	d7, s14
    d8dc:	vsub.f64	d7, d13, d7
    d8e0:	cmp	r5, #0
    d8e2:	bne.n	d956 <_strtod_l+0x9e6>
    d8e4:	ldr	r3, [sp, #24]
    d8e6:	cbnz	r3, d956 <_strtod_l+0x9e6>
    d8e8:	ubfx	r2, r2, #0, #20
    d8ec:	cbnz	r2, d956 <_strtod_l+0x9e6>
    d8ee:	vcmpe.f64	d7, d11
    d8f2:	vmrs	APSR_nzcv, fpscr
    d8f6:	bpl.w	d5da <_strtod_l+0x66a>
    d8fa:	vldr	d7, [sp, #24]
    d8fe:	vstr	d7, [sp, #16]
    d902:	ldr.w	sl, [sp, #60]	; 0x3c
    d906:	ldr	r0, [sp, #80]	; 0x50
    d908:	mov	r1, r0
    d90a:	mov	r0, r9
    d90c:	bl	11d04 <_Bfree>
    d910:	mov	r1, r6
    d912:	mov	r0, r9
    d914:	bl	11d04 <_Bfree>
    d918:	mov	r1, r4
    d91a:	mov	r0, r9
    d91c:	bl	11d04 <_Bfree>
    d920:	mov	r1, fp
    d922:	mov	r0, r9
    d924:	bl	11d04 <_Bfree>
    d928:	mov	r1, r8
    d92a:	mov	r0, r9
    d92c:	bl	11d04 <_Bfree>
    d930:	b.n	d21a <_strtod_l+0x2aa>
    d932:	ldr	r3, [sp, #64]	; 0x40
    d934:	adds	r3, #1
    d936:	bne.n	d8b0 <_strtod_l+0x940>
    d938:	ldr.w	sl, [sp, #60]	; 0x3c
    d93c:	ldr	r0, [sp, #80]	; 0x50
    d93e:	ldr	r3, [pc, #80]	; (d990 <_strtod_l+0xa20>)
    d940:	str	r3, [sp, #28]
    d942:	movs	r2, #0
    d944:	str	r2, [sp, #24]
    d946:	vldr	d7, [sp, #24]
    d94a:	movs	r3, #34	; 0x22
    d94c:	vstr	d7, [sp, #16]
    d950:	str.w	r3, [r9]
    d954:	b.n	d908 <_strtod_l+0x998>
    d956:	vcmpe.f64	d7, d10
    d95a:	vmrs	APSR_nzcv, fpscr
    d95e:	bmi.n	d8fa <_strtod_l+0x98a>
    d960:	vcmpe.f64	d7, d9
    d964:	vmrs	APSR_nzcv, fpscr
    d968:	ble.w	d5da <_strtod_l+0x66a>
    d96c:	b.n	d8fa <_strtod_l+0x98a>
    d96e:	nop
	...
    d978:	.word	0x7ca00000
    d97c:	.word	0x7fefffff
    d980:	.word	0x20001a04
    d984:	.word	0xfff80000
    d988:	.word	0x20000e0c
    d98c:	.word	0x7c9fffff
    d990:	.word	0x7ff00000
    d994:	.word	0x20000280
    d998:	beq.w	d3b8 <_strtod_l+0x448>
    d99c:	negs	r3, r3
    d99e:	ands.w	r0, r3, #15
    d9a2:	beq.n	d9ba <_strtod_l+0xa4a>
    d9a4:	ldr	r1, [pc, #688]	; (dc58 <_strtod_l+0xce8>)
    d9a6:	add.w	r1, r1, r0, lsl #3
    d9aa:	vldr	d5, [sp, #24]
    d9ae:	vldr	d7, [r1]
    d9b2:	vdiv.f64	d6, d5, d7
    d9b6:	vstr	d6, [sp, #24]
    d9ba:	asrs	r3, r3, #4
    d9bc:	beq.w	d3b8 <_strtod_l+0x448>
    d9c0:	cmp	r3, #31
    d9c2:	bgt.n	da40 <_strtod_l+0xad0>
    d9c4:	ands.w	r1, r3, #16
    d9c8:	beq.w	dd3a <_strtod_l+0xdca>
    d9cc:	cmp	r3, #0
    d9ce:	ble.w	dda4 <_strtod_l+0xe34>
    d9d2:	movs	r1, #106	; 0x6a
    d9d4:	str	r1, [sp, #36]	; 0x24
    d9d6:	vldr	d7, [sp, #24]
    d9da:	vstr	d7, [sp, #16]
    d9de:	ldr	r1, [pc, #636]	; (dc5c <_strtod_l+0xcec>)
    d9e0:	movs	r0, #0
    d9e2:	lsls	r7, r3, #31
    d9e4:	bpl.n	d9f8 <_strtod_l+0xa88>
    d9e6:	vldr	d6, [sp, #16]
    d9ea:	vldr	d7, [r1]
    d9ee:	vmul.f64	d7, d6, d7
    d9f2:	vstr	d7, [sp, #16]
    d9f6:	movs	r0, #1
    d9f8:	asrs	r3, r3, #1
    d9fa:	add.w	r1, r1, #8
    d9fe:	bne.n	d9e2 <_strtod_l+0xa72>
    da00:	cmp	r0, #0
    da02:	bne.w	ddbc <_strtod_l+0xe4c>
    da06:	ldr	r3, [sp, #36]	; 0x24
    da08:	cbz	r3, da30 <_strtod_l+0xac0>
    da0a:	ldrd	r0, r1, [sp, #24]
    da0e:	ubfx	r3, r1, #20, #11
    da12:	rsb	r3, r3, #107	; 0x6b
    da16:	cmp	r3, #0
    da18:	ble.n	da30 <_strtod_l+0xac0>
    da1a:	cmp	r3, #31
    da1c:	ble.w	dd44 <_strtod_l+0xdd4>
    da20:	movs	r0, #0
    da22:	cmp	r3, #52	; 0x34
    da24:	str	r0, [sp, #24]
    da26:	ble.w	dd8e <_strtod_l+0xe1e>
    da2a:	mov.w	r3, #57671680	; 0x3700000
    da2e:	str	r3, [sp, #28]
    da30:	vldr	d7, [sp, #24]
    da34:	vcmp.f64	d7, #0.0
    da38:	vmrs	APSR_nzcv, fpscr
    da3c:	bne.w	d3bc <_strtod_l+0x44c>
    da40:	vldr	d7, [pc, #524]	; dc50 <_strtod_l+0xce0>
    da44:	movs	r3, #34	; 0x22
    da46:	str.w	r3, [r9]
    da4a:	vstr	d7, [sp, #16]
    da4e:	b.w	d21a <_strtod_l+0x2aa>
    da52:	ldr	r1, [sp, #76]	; 0x4c
    da54:	adds	r5, #1
    da56:	cmp	r0, #8
    da58:	ble.w	db72 <_strtod_l+0xc02>
    da5c:	cmp	r5, #16
    da5e:	itt	le
    da60:	addle.w	r7, r7, r7, lsl #2
    da64:	addle.w	r7, r3, r7, lsl #1
    da68:	movs	r0, #0
    da6a:	adds	r3, r1, #1
    da6c:	str	r3, [sp, #76]	; 0x4c
    da6e:	ldrb	r4, [r1, #1]
    da70:	b.w	d1a4 <_strtod_l+0x234>
    da74:	movw	r3, #19999	; 0x4e1f
    da78:	b.n	d37e <_strtod_l+0x40e>
    da7a:	ldr	r3, [sp, #28]
    da7c:	add.w	r2, r3, #55574528	; 0x3500000
    da80:	str	r2, [sp, #28]
    da82:	b.n	d5cc <_strtod_l+0x65c>
    da84:	rsb	r3, r5, #37	; 0x25
    da88:	cmp	r4, r3
    da8a:	bgt.w	d38a <_strtod_l+0x41a>
    da8e:	rsb	r5, r5, #15
    da92:	ldr	r3, [pc, #452]	; (dc58 <_strtod_l+0xce8>)
    da94:	subs	r2, r4, r5
    da96:	add.w	r2, r3, r2, lsl #3
    da9a:	add.w	r3, r3, r5, lsl #3
    da9e:	vldr	d6, [r2]
    daa2:	vldr	d7, [r3]
    daa6:	vldr	d5, [sp, #24]
    daaa:	vmul.f64	d7, d7, d5
    daae:	vmul.f64	d7, d7, d6
    dab2:	vstr	d7, [sp, #16]
    dab6:	b.w	d21a <_strtod_l+0x2aa>
    daba:	vmov.f64	d13, #112	; 0x3f800000  1.0
    dabe:	b.n	d79e <_strtod_l+0x82e>
    dac0:	ldr	r2, [sp, #80]	; 0x50
    dac2:	cbz	r2, dad4 <_strtod_l+0xb64>
    dac4:	movs	r1, #53	; 0x35
    dac6:	add	r0, sp, #88	; 0x58
    dac8:	bl	124f4 <__copybits>
    dacc:	mov	r0, r9
    dace:	ldr	r1, [sp, #80]	; 0x50
    dad0:	bl	11d04 <_Bfree>
    dad4:	cmp	r6, #6
    dad6:	bhi.n	daf0 <_strtod_l+0xb80>
    dad8:	tbb	[pc, r6]
    dadc:	.word	0x13181d29
    dae0:	.short	0x1d04
    dae2:	.byte	0x29
    dae3:	.byte	0x00
    dae4:	mvn.w	r3, #2147483648	; 0x80000000
    dae8:	str	r3, [sp, #28]
    daea:	mov.w	r3, #4294967295
    daee:	str	r3, [sp, #24]
    daf0:	lsls	r3, r4, #28
    daf2:	bpl.w	d2c6 <_strtod_l+0x356>
    daf6:	ldr	r3, [sp, #28]
    daf8:	orr.w	r3, r3, #2147483648	; 0x80000000
    dafc:	str	r3, [sp, #28]
    dafe:	b.w	d2c6 <_strtod_l+0x356>
    db02:	ldr	r3, [pc, #348]	; (dc60 <_strtod_l+0xcf0>)
    db04:	str	r3, [sp, #28]
    db06:	movs	r3, #0
    db08:	str	r3, [sp, #24]
    db0a:	b.n	daf0 <_strtod_l+0xb80>
    db0c:	ldr	r3, [sp, #88]	; 0x58
    db0e:	str	r3, [sp, #24]
    db10:	ldr	r3, [sp, #92]	; 0x5c
    db12:	str	r3, [sp, #28]
    db14:	b.n	daf0 <_strtod_l+0xb80>
    db16:	ldr	r2, [sp, #84]	; 0x54
    db18:	ldr	r3, [sp, #92]	; 0x5c
    db1a:	ldr	r1, [sp, #88]	; 0x58
    db1c:	str	r1, [sp, #24]
    db1e:	addw	r2, r2, #1075	; 0x433
    db22:	bic.w	r3, r3, #1048576	; 0x100000
    db26:	orr.w	r3, r3, r2, lsl #20
    db2a:	str	r3, [sp, #28]
    db2c:	b.n	daf0 <_strtod_l+0xb80>
    db2e:	movs	r3, #0
    db30:	str	r3, [sp, #28]
    db32:	str	r3, [sp, #24]
    db34:	b.n	daf0 <_strtod_l+0xb80>
    db36:	vmov	r2, r3, d13
    db3a:	b.n	d5a8 <_strtod_l+0x638>
    db3c:	ldrd	r2, r3, [sp, #24]
    db40:	mov	r1, r3
    db42:	cmp	r3, #0
    db44:	bne.w	d662 <_strtod_l+0x6f2>
    db48:	ldr.w	sl, [sp, #60]	; 0x3c
    db4c:	ldr	r0, [sp, #80]	; 0x50
    db4e:	vldr	d7, [pc, #256]	; dc50 <_strtod_l+0xce0>
    db52:	movs	r3, #34	; 0x22
    db54:	str.w	r3, [r9]
    db58:	vstr	d7, [sp, #16]
    db5c:	b.n	d908 <_strtod_l+0x998>
    db5e:	ldr	r3, [sp, #76]	; 0x4c
    db60:	str	r3, [sp, #40]	; 0x28
    db62:	movs	r6, #0
    db64:	subs	r4, #48	; 0x30
    db66:	add.w	ip, r0, #1
    db6a:	mov	r1, r3
    db6c:	mov	r2, r6
    db6e:	mov	r7, r6
    db70:	movs	r5, #1
    db72:	add.w	r6, r6, r6, lsl #2
    db76:	add.w	r6, r4, r6, lsl #1
    db7a:	movs	r0, #0
    db7c:	b.n	da6a <_strtod_l+0xafa>
    db7e:	cmn.w	r4, #22
    db82:	blt.w	d38a <_strtod_l+0x41a>
    db86:	ldr	r3, [pc, #208]	; (dc58 <_strtod_l+0xce8>)
    db88:	sub.w	r4, r3, r4, lsl #3
    db8c:	vldr	d7, [r4]
    db90:	vldr	d5, [sp, #24]
    db94:	vdiv.f64	d6, d5, d7
    db98:	vstr	d6, [sp, #16]
    db9c:	b.w	d21a <_strtod_l+0x2aa>
    dba0:	ldr.w	sl, [sp, #60]	; 0x3c
    dba4:	b.n	d93e <_strtod_l+0x9ce>
    dba6:	ldr.w	sl, [sp, #60]	; 0x3c
    dbaa:	cbnz	r5, dc14 <_strtod_l+0xca4>
    dbac:	ldrd	r1, r2, [sp, #24]
    dbb0:	cbnz	r1, dc14 <_strtod_l+0xca4>
    dbb2:	ubfx	r3, r2, #0, #20
    dbb6:	mov	r7, r2
    dbb8:	cbnz	r3, dc14 <_strtod_l+0xca4>
    dbba:	bic.w	r3, r2, #2147483648	; 0x80000000
    dbbe:	lsrs	r3, r3, #20
    dbc0:	lsls	r3, r3, #20
    dbc2:	cmp.w	r3, #112197632	; 0x6b00000
    dbc6:	bls.n	dc14 <_strtod_l+0xca4>
    dbc8:	ldr.w	r3, [r8, #20]
    dbcc:	cbnz	r3, dbd6 <_strtod_l+0xc66>
    dbce:	ldr.w	r3, [r8, #16]
    dbd2:	cmp	r3, #1
    dbd4:	ble.n	dc14 <_strtod_l+0xca4>
    dbd6:	mov	r1, r8
    dbd8:	movs	r2, #1
    dbda:	mov	r0, r9
    dbdc:	bl	120b0 <__lshift>
    dbe0:	mov	r1, r4
    dbe2:	mov	r8, r0
    dbe4:	bl	12160 <__mcmp>
    dbe8:	cmp	r0, #0
    dbea:	ble.n	dc14 <_strtod_l+0xca4>
    dbec:	ldr	r3, [sp, #36]	; 0x24
    dbee:	cmp	r3, #0
    dbf0:	bne.w	dd78 <_strtod_l+0xe08>
    dbf4:	ldr	r3, [pc, #104]	; (dc60 <_strtod_l+0xcf0>)
    dbf6:	ands	r3, r7
    dbf8:	sub.w	r3, r3, #1048576	; 0x100000
    dbfc:	mvn.w	r3, r3, lsr #20
    dc00:	mvn.w	r3, r3, lsl #20
    dc04:	str	r3, [sp, #28]
    dc06:	mov.w	r3, #4294967295
    dc0a:	str	r3, [sp, #24]
    dc0c:	vldr	d7, [sp, #24]
    dc10:	vstr	d7, [sp, #16]
    dc14:	ldr	r3, [sp, #36]	; 0x24
    dc16:	cbz	r3, dc48 <_strtod_l+0xcd8>
    dc18:	ldr	r3, [pc, #72]	; (dc64 <_strtod_l+0xcf4>)
    dc1a:	str	r3, [sp, #68]	; 0x44
    dc1c:	movs	r3, #0
    dc1e:	str	r3, [sp, #64]	; 0x40
    dc20:	vldr	d7, [sp, #16]
    dc24:	vldr	d6, [sp, #64]	; 0x40
    dc28:	vmul.f64	d7, d7, d6
    dc2c:	vstr	d7, [sp, #16]
    dc30:	ldrd	r2, r3, [sp, #16]
    dc34:	strd	r2, r3, [sp, #24]
    dc38:	cbnz	r3, dc48 <_strtod_l+0xcd8>
    dc3a:	ldr	r3, [sp, #24]
    dc3c:	cbnz	r3, dc48 <_strtod_l+0xcd8>
    dc3e:	movs	r3, #34	; 0x22
    dc40:	ldr	r0, [sp, #80]	; 0x50
    dc42:	str.w	r3, [r9]
    dc46:	b.n	d908 <_strtod_l+0x998>
    dc48:	ldr	r0, [sp, #80]	; 0x50
    dc4a:	b.n	d908 <_strtod_l+0x998>
    dc4c:	nop.w
	...
    dc58:	.word	0x200002a8
    dc5c:	.word	0x20000370
    dc60:	.word	0x7ff00000
    dc64:	.word	0x39500000
    dc68:	ldr.w	sl, [sp, #60]	; 0x3c
    dc6c:	cbz	r5, dcb4 <_strtod_l+0xd44>
    dc6e:	ldr	r2, [sp, #28]
    dc70:	ldr	r3, [pc, #344]	; (ddcc <_strtod_l+0xe5c>)
    dc72:	ubfx	r1, r2, #0, #20
    dc76:	cmp	r1, r3
    dc78:	beq.n	dcd6 <_strtod_l+0xd66>
    dc7a:	ldr	r3, [sp, #56]	; 0x38
    dc7c:	cbz	r3, dcc8 <_strtod_l+0xd58>
    dc7e:	ldr	r2, [sp, #28]
    dc80:	tst	r3, r2
    dc82:	beq.n	dc14 <_strtod_l+0xca4>
    dc84:	ldrd	r0, r1, [sp, #24]
    dc88:	ldr	r2, [sp, #36]	; 0x24
    dc8a:	cmp	r5, #0
    dc8c:	beq.n	dd16 <_strtod_l+0xda6>
    dc8e:	bl	cf3c <sulp>
    dc92:	vldr	d7, [sp, #16]
    dc96:	vadd.f64	d7, d7, d0
    dc9a:	vstr	d7, [sp, #16]
    dc9e:	b.n	dc14 <_strtod_l+0xca4>
    dca0:	add.w	r3, r8, #55574528	; 0x3500000
    dca4:	str	r3, [sp, #28]
    dca6:	b.w	d3b8 <_strtod_l+0x448>
    dcaa:	movs	r2, #0
    dcac:	ldr	r3, [pc, #288]	; (ddd0 <_strtod_l+0xe60>)
    dcae:	vmov.f64	d13, #96	; 0x3f000000  0.5
    dcb2:	b.n	d586 <_strtod_l+0x616>
    dcb4:	ldrd	r1, r2, [sp, #24]
    dcb8:	ubfx	r3, r2, #0, #20
    dcbc:	mov	r7, r2
    dcbe:	cmp	r3, #0
    dcc0:	bne.n	dc7a <_strtod_l+0xd0a>
    dcc2:	cmp	r1, #0
    dcc4:	bne.n	dc7a <_strtod_l+0xd0a>
    dcc6:	b.n	dbec <_strtod_l+0xc7c>
    dcc8:	ldr	r3, [sp, #52]	; 0x34
    dcca:	ldr	r2, [sp, #24]
    dccc:	tst	r3, r2
    dcce:	beq.n	dc14 <_strtod_l+0xca4>
    dcd0:	b.n	dc84 <_strtod_l+0xd14>
    dcd2:	movs	r0, #0
    dcd4:	b.n	d714 <_strtod_l+0x7a4>
    dcd6:	ldr	r3, [sp, #36]	; 0x24
    dcd8:	ldr	r1, [sp, #24]
    dcda:	cbz	r3, dd34 <_strtod_l+0xdc4>
    dcdc:	ldr	r3, [pc, #244]	; (ddd4 <_strtod_l+0xe64>)
    dcde:	ands	r3, r2
    dce0:	cmp.w	r3, #111149056	; 0x6a00000
    dce4:	bhi.n	dd34 <_strtod_l+0xdc4>
    dce6:	lsrs	r3, r3, #20
    dce8:	rsb	r3, r3, #107	; 0x6b
    dcec:	mov.w	r0, #4294967295
    dcf0:	lsl.w	r3, r0, r3
    dcf4:	cmp	r3, r1
    dcf6:	bne.n	dc7a <_strtod_l+0xd0a>
    dcf8:	ldr	r1, [pc, #220]	; (ddd8 <_strtod_l+0xe68>)
    dcfa:	cmp	r2, r1
    dcfc:	beq.n	dd9e <_strtod_l+0xe2e>
    dcfe:	ldr	r3, [pc, #212]	; (ddd4 <_strtod_l+0xe64>)
    dd00:	ands	r3, r2
    dd02:	add.w	r3, r3, #1048576	; 0x100000
    dd06:	str	r3, [sp, #28]
    dd08:	movs	r3, #0
    dd0a:	str	r3, [sp, #24]
    dd0c:	vldr	d7, [sp, #24]
    dd10:	vstr	d7, [sp, #16]
    dd14:	b.n	dc14 <_strtod_l+0xca4>
    dd16:	bl	cf3c <sulp>
    dd1a:	vldr	d7, [sp, #16]
    dd1e:	vsub.f64	d7, d7, d0
    dd22:	vcmp.f64	d7, #0.0
    dd26:	vmrs	APSR_nzcv, fpscr
    dd2a:	vstr	d7, [sp, #16]
    dd2e:	beq.w	db4c <_strtod_l+0xbdc>
    dd32:	b.n	dc14 <_strtod_l+0xca4>
    dd34:	mov.w	r3, #4294967295
    dd38:	b.n	dcf4 <_strtod_l+0xd84>
    dd3a:	cmp	r3, #0
    dd3c:	str	r1, [sp, #36]	; 0x24
    dd3e:	bgt.w	d9d6 <_strtod_l+0xa66>
    dd42:	b.n	da30 <_strtod_l+0xac0>
    dd44:	mov.w	r1, #4294967295
    dd48:	lsl.w	r3, r1, r3
    dd4c:	ldr	r1, [sp, #24]
    dd4e:	ands	r1, r3
    dd50:	str	r1, [sp, #24]
    dd52:	b.n	da30 <_strtod_l+0xac0>
    dd54:	add	r0, sp, #76	; 0x4c
    dd56:	add	r2, sp, #88	; 0x58
    dd58:	ldr	r1, [pc, #128]	; (dddc <_strtod_l+0xe6c>)
    dd5a:	bl	11aa0 <__hexnan>
    dd5e:	cmp	r0, #5
    dd60:	bne.w	d7c6 <_strtod_l+0x856>
    dd64:	ldr	r3, [sp, #92]	; 0x5c
    dd66:	orr.w	r3, r3, #2139095040	; 0x7f800000
    dd6a:	orr.w	r3, r3, #7340032	; 0x700000
    dd6e:	str	r3, [sp, #28]
    dd70:	ldr	r3, [sp, #88]	; 0x58
    dd72:	str	r3, [sp, #24]
    dd74:	b.w	d2c6 <_strtod_l+0x356>
    dd78:	ldr	r3, [pc, #88]	; (ddd4 <_strtod_l+0xe64>)
    dd7a:	ands	r3, r7
    dd7c:	cmp.w	r3, #112197632	; 0x6b00000
    dd80:	bgt.w	dbf8 <_strtod_l+0xc88>
    dd84:	cmp.w	r3, #57671680	; 0x3700000
    dd88:	bgt.w	dc18 <_strtod_l+0xca8>
    dd8c:	b.n	db4c <_strtod_l+0xbdc>
    dd8e:	subs	r3, #32
    dd90:	mov.w	r0, #4294967295
    dd94:	lsl.w	r3, r0, r3
    dd98:	ands	r3, r1
    dd9a:	str	r3, [sp, #28]
    dd9c:	b.n	da30 <_strtod_l+0xac0>
    dd9e:	adds	r3, #1
    dda0:	bne.n	dcfe <_strtod_l+0xd8e>
    dda2:	b.n	d93c <_strtod_l+0x9cc>
    dda4:	movs	r3, #106	; 0x6a
    dda6:	str	r3, [sp, #36]	; 0x24
    dda8:	b.n	da0a <_strtod_l+0xa9a>
    ddaa:	mov	r0, r5
    ddac:	ldr	r1, [sp, #76]	; 0x4c
    ddae:	adds	r5, #1
    ddb0:	b.n	da56 <_strtod_l+0xae6>
    ddb2:	ldrd	r7, r8, [sp, #16]
    ddb6:	strd	r7, r8, [sp, #24]
    ddba:	b.n	d714 <_strtod_l+0x7a4>
    ddbc:	ldrd	r0, r1, [sp, #16]
    ddc0:	strd	r0, r1, [sp, #24]
    ddc4:	b.n	da06 <_strtod_l+0xa96>
    ddc6:	mov	r0, r1
    ddc8:	ldr	r1, [sp, #76]	; 0x4c
    ddca:	b.n	da6a <_strtod_l+0xafa>
    ddcc:	.word	0x000fffff
    ddd0:	.word	0xbfe00000
    ddd4:	.word	0x7ff00000
    ddd8:	.word	0x7fefffff
    dddc:	.word	0x20000e20

0000dde0 <_strtod_r>:
    dde0:	ldr	r3, [pc, #20]	; (ddf8 <_strtod_r+0x18>)
    dde2:	ldr	r3, [r3, #0]
    dde4:	push	{r4}
    dde6:	ldr	r3, [r3, #52]	; 0x34
    dde8:	ldr	r4, [pc, #16]	; (ddfc <_strtod_r+0x1c>)
    ddea:	cmp	r3, #0
    ddec:	it	eq
    ddee:	moveq	r3, r4
    ddf0:	ldr.w	r4, [sp], #4
    ddf4:	b.w	cf70 <_strtod_l>
    ddf8:	.word	0x20002508
    ddfc:	.word	0x20001f8c

0000de00 <_strtol_l.isra.0>:
    de00:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de04:	ldr.w	r9, [sp, #40]	; 0x28
    de08:	mov	r7, r1
    de0a:	mov	r8, r0
    de0c:	mov	r6, r2
    de0e:	mov	r5, r3
    de10:	mov	fp, r1
    de12:	b.n	de16 <_strtol_l.isra.0+0x16>
    de14:	mov	fp, r4
    de16:	mov	r4, fp
    de18:	mov	r0, r9
    de1a:	ldrb.w	sl, [r4], #1
    de1e:	bl	c0bc <__locale_ctype_ptr_l>
    de22:	add	r0, sl
    de24:	ldrb	r1, [r0, #1]
    de26:	and.w	r1, r1, #8
    de2a:	and.w	ip, r1, #255	; 0xff
    de2e:	cmp	r1, #0
    de30:	bne.n	de14 <_strtol_l.isra.0+0x14>
    de32:	mov	r2, sl
    de34:	cmp	r2, #45	; 0x2d
    de36:	beq.n	defc <_strtol_l.isra.0+0xfc>
    de38:	cmp	r2, #43	; 0x2b
    de3a:	itt	eq
    de3c:	ldrbeq.w	r2, [fp, #1]
    de40:	addeq.w	r4, fp, #2
    de44:	cmp	r5, #0
    de46:	beq.n	ded0 <_strtol_l.isra.0+0xd0>
    de48:	cmp	r5, #16
    de4a:	beq.n	df18 <_strtol_l.isra.0+0x118>
    de4c:	mov	r9, r5
    de4e:	cmp.w	ip, #0
    de52:	ite	eq
    de54:	mvneq.w	sl, #2147483648	; 0x80000000
    de58:	movne.w	sl, #2147483648	; 0x80000000
    de5c:	movs	r1, #0
    de5e:	udiv	lr, sl, r9
    de62:	mov	r0, r1
    de64:	mls	sl, r9, lr, sl
    de68:	b.n	de76 <_strtol_l.isra.0+0x76>
    de6a:	beq.n	dec0 <_strtol_l.isra.0+0xc0>
    de6c:	mla	r0, r9, r0, r3
    de70:	movs	r1, #1
    de72:	ldrb.w	r2, [r4], #1
    de76:	sub.w	r3, r2, #48	; 0x30
    de7a:	cmp	r3, #9
    de7c:	bls.n	de8a <_strtol_l.isra.0+0x8a>
    de7e:	sub.w	r3, r2, #65	; 0x41
    de82:	cmp	r3, #25
    de84:	bhi.n	de9c <_strtol_l.isra.0+0x9c>
    de86:	sub.w	r3, r2, #55	; 0x37
    de8a:	cmp	r5, r3
    de8c:	ble.n	deac <_strtol_l.isra.0+0xac>
    de8e:	adds	r2, r1, #1
    de90:	beq.n	de72 <_strtol_l.isra.0+0x72>
    de92:	cmp	lr, r0
    de94:	bcs.n	de6a <_strtol_l.isra.0+0x6a>
    de96:	mov.w	r1, #4294967295
    de9a:	b.n	de72 <_strtol_l.isra.0+0x72>
    de9c:	sub.w	r3, r2, #97	; 0x61
    dea0:	cmp	r3, #25
    dea2:	bhi.n	deac <_strtol_l.isra.0+0xac>
    dea4:	sub.w	r3, r2, #87	; 0x57
    dea8:	cmp	r5, r3
    deaa:	bgt.n	de8e <_strtol_l.isra.0+0x8e>
    deac:	adds	r3, r1, #1
    deae:	beq.n	dedc <_strtol_l.isra.0+0xdc>
    deb0:	cmp.w	ip, #0
    deb4:	bne.n	ded8 <_strtol_l.isra.0+0xd8>
    deb6:	cbz	r6, decc <_strtol_l.isra.0+0xcc>
    deb8:	cbnz	r1, def4 <_strtol_l.isra.0+0xf4>
    deba:	str	r7, [r6, #0]
    debc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dec0:	cmp	sl, r3
    dec2:	bge.n	de6c <_strtol_l.isra.0+0x6c>
    dec4:	mov	r0, lr
    dec6:	mov.w	r1, #4294967295
    deca:	b.n	de72 <_strtol_l.isra.0+0x72>
    decc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ded0:	cmp	r2, #48	; 0x30
    ded2:	beq.n	df0a <_strtol_l.isra.0+0x10a>
    ded4:	movs	r5, #10
    ded6:	b.n	de4c <_strtol_l.isra.0+0x4c>
    ded8:	negs	r0, r0
    deda:	b.n	deb6 <_strtol_l.isra.0+0xb6>
    dedc:	cmp.w	ip, #0
    dee0:	mov.w	r3, #34	; 0x22
    dee4:	ite	eq
    dee6:	mvneq.w	r0, #2147483648	; 0x80000000
    deea:	movne.w	r0, #2147483648	; 0x80000000
    deee:	str.w	r3, [r8]
    def2:	cbz	r6, df32 <_strtol_l.isra.0+0x132>
    def4:	subs	r7, r4, #1
    def6:	str	r7, [r6, #0]
    def8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    defc:	add.w	r4, fp, #2
    df00:	ldrb.w	r2, [fp, #1]
    df04:	mov.w	ip, #1
    df08:	b.n	de44 <_strtol_l.isra.0+0x44>
    df0a:	ldrb	r3, [r4, #0]
    df0c:	and.w	r3, r3, #223	; 0xdf
    df10:	cmp	r3, #88	; 0x58
    df12:	beq.n	df26 <_strtol_l.isra.0+0x126>
    df14:	movs	r5, #8
    df16:	b.n	de4c <_strtol_l.isra.0+0x4c>
    df18:	cmp	r2, #48	; 0x30
    df1a:	bne.n	de4c <_strtol_l.isra.0+0x4c>
    df1c:	ldrb	r3, [r4, #0]
    df1e:	and.w	r3, r3, #223	; 0xdf
    df22:	cmp	r3, #88	; 0x58
    df24:	bne.n	de4c <_strtol_l.isra.0+0x4c>
    df26:	mov.w	r9, #16
    df2a:	ldrb	r2, [r4, #1]
    df2c:	mov	r5, r9
    df2e:	adds	r4, #2
    df30:	b.n	de4e <_strtol_l.isra.0+0x4e>
    df32:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df36:	nop

0000df38 <_strtol_r>:
    df38:	push	{r4, r5, lr}
    df3a:	ldr	r4, [pc, #24]	; (df54 <_strtol_r+0x1c>)
    df3c:	ldr	r5, [pc, #24]	; (df58 <_strtol_r+0x20>)
    df3e:	ldr	r4, [r4, #0]
    df40:	ldr	r4, [r4, #52]	; 0x34
    df42:	sub	sp, #12
    df44:	cmp	r4, #0
    df46:	it	eq
    df48:	moveq	r4, r5
    df4a:	str	r4, [sp, #0]
    df4c:	bl	de00 <_strtol_l.isra.0>
    df50:	add	sp, #12
    df52:	pop	{r4, r5, pc}
    df54:	.word	0x20002508
    df58:	.word	0x20001f8c
    df5c:	.word	0x00000000

0000df60 <_svfprintf_r>:
    df60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df64:	vpush	{d8-d10}
    df68:	sub	sp, #228	; 0xe4
    df6a:	mov	r4, r1
    df6c:	str	r1, [sp, #12]
    df6e:	mov	sl, r2
    df70:	str	r3, [sp, #36]	; 0x24
    df72:	str	r0, [sp, #20]
    df74:	bl	11c40 <_localeconv_r>
    df78:	ldr	r3, [r0, #0]
    df7a:	str	r3, [sp, #64]	; 0x40
    df7c:	mov	r0, r3
    df7e:	bl	cdc0 <strlen>
    df82:	ldrh	r3, [r4, #12]
    df84:	str	r0, [sp, #60]	; 0x3c
    df86:	lsls	r1, r3, #24
    df88:	bpl.n	df92 <_svfprintf_r+0x32>
    df8a:	ldr	r3, [r4, #16]
    df8c:	cmp	r3, #0
    df8e:	beq.w	f08c <_svfprintf_r+0x112c>
    df92:	movs	r3, #0
    df94:	vldr	d8, [pc, #656]	; e228 <_svfprintf_r+0x2c8>
    df98:	vldr	d9, [pc, #660]	; e230 <_svfprintf_r+0x2d0>
    df9c:	str	r3, [sp, #52]	; 0x34
    df9e:	str	r3, [sp, #116]	; 0x74
    dfa0:	str	r3, [sp, #112]	; 0x70
    dfa2:	str	r3, [sp, #68]	; 0x44
    dfa4:	str	r3, [sp, #24]
    dfa6:	add	r3, sp, #160	; 0xa0
    dfa8:	str	r3, [sp, #108]	; 0x6c
    dfaa:	mov	r9, r3
    dfac:	ldrb.w	r3, [sl]
    dfb0:	mov	r4, sl
    dfb2:	cbz	r3, dff0 <_svfprintf_r+0x90>
    dfb4:	cmp	r3, #37	; 0x25
    dfb6:	bne.n	dfbe <_svfprintf_r+0x5e>
    dfb8:	b.n	dff0 <_svfprintf_r+0x90>
    dfba:	cmp	r3, #37	; 0x25
    dfbc:	beq.n	dfc6 <_svfprintf_r+0x66>
    dfbe:	ldrb.w	r3, [r4, #1]!
    dfc2:	cmp	r3, #0
    dfc4:	bne.n	dfba <_svfprintf_r+0x5a>
    dfc6:	rsb	r5, sl, r4
    dfca:	cbz	r5, dff0 <_svfprintf_r+0x90>
    dfcc:	ldr	r3, [sp, #112]	; 0x70
    dfce:	ldr	r2, [sp, #116]	; 0x74
    dfd0:	str.w	sl, [r9]
    dfd4:	adds	r3, #1
    dfd6:	add	r2, r5
    dfd8:	cmp	r3, #7
    dfda:	str.w	r5, [r9, #4]
    dfde:	str	r2, [sp, #116]	; 0x74
    dfe0:	str	r3, [sp, #112]	; 0x70
    dfe2:	bgt.w	e12c <_svfprintf_r+0x1cc>
    dfe6:	add.w	r9, r9, #8
    dfea:	ldr	r3, [sp, #24]
    dfec:	add	r3, r5
    dfee:	str	r3, [sp, #24]
    dff0:	ldrb	r3, [r4, #0]
    dff2:	cmp	r3, #0
    dff4:	beq.w	e13e <_svfprintf_r+0x1de>
    dff8:	movs	r3, #0
    dffa:	mov	r2, r3
    dffc:	strb.w	r3, [sp, #79]	; 0x4f
    e000:	mov	r1, r3
    e002:	str	r3, [sp, #28]
    e004:	mov	fp, r3
    e006:	mov.w	r8, #4294967295
    e00a:	ldrb	r3, [r4, #1]
    e00c:	add.w	sl, r4, #1
    e010:	mov	r5, r8
    e012:	add.w	sl, sl, #1
    e016:	sub.w	r0, r3, #32
    e01a:	cmp	r0, #88	; 0x58
    e01c:	bhi.w	e810 <_svfprintf_r+0x8b0>
    e020:	tbh	[pc, r0, lsl #1]
    e024:	.word	0x03f60363
    e028:	.word	0x036b03f6
    e02c:	.word	0x03f603f6
    e030:	.word	0x03f603f6
    e034:	.word	0x03f603f6
    e038:	.word	0x037e0370
    e03c:	.word	0x005d03f6
    e040:	.word	0x03f600df
    e044:	.word	0x010c00fb
    e048:	.word	0x010c010c
    e04c:	.word	0x010c010c
    e050:	.word	0x010c010c
    e054:	.word	0x010c010c
    e058:	.word	0x03f603f6
    e05c:	.word	0x03f603f6
    e060:	.word	0x03f603f6
    e064:	.word	0x03f603f6
    e068:	.word	0x03f603f6
    e06c:	.word	0x015e011c
    e070:	.word	0x015e03f6
    e074:	.word	0x03f603f6
    e078:	.word	0x03f603f6
    e07c:	.word	0x03f602a1
    e080:	.word	0x02a603f6
    e084:	.word	0x03f603f6
    e088:	.word	0x03f603f6
    e08c:	.word	0x02d803f6
    e090:	.word	0x03f603f6
    e094:	.word	0x03f60305
    e098:	.word	0x03f603f6
    e09c:	.word	0x03f603f6
    e0a0:	.word	0x03f603f6
    e0a4:	.word	0x03f603f6
    e0a8:	.word	0x034303f6
    e0ac:	.word	0x015e0356
    e0b0:	.word	0x015e015e
    e0b4:	.word	0x0356035e
    e0b8:	.word	0x03f603f6
    e0bc:	.word	0x03f603a4
    e0c0:	.word	0x00a203b1
    e0c4:	.word	0x03c30062
    e0c8:	.word	0x03c803f6
    e0cc:	.word	0x038303f6
    e0d0:	.word	0x03f603f6
    e0d4:	.short	0x038b
    e0d6:	ldr	r0, [sp, #28]
    e0d8:	str	r3, [sp, #36]	; 0x24
    e0da:	negs	r0, r0
    e0dc:	str	r0, [sp, #28]
    e0de:	orr.w	fp, fp, #4
    e0e2:	ldrb.w	r3, [sl]
    e0e6:	b.n	e012 <_svfprintf_r+0xb2>
    e0e8:	mov	r8, r5
    e0ea:	ldr	r0, [sp, #36]	; 0x24
    e0ec:	movs	r1, #0
    e0ee:	movs	r3, #48	; 0x30
    e0f0:	movs	r2, #120	; 0x78
    e0f2:	cmp	r8, r1
    e0f4:	strb.w	r3, [sp, #80]	; 0x50
    e0f8:	ldr	r4, [r0, #0]
    e0fa:	strb.w	r2, [sp, #81]	; 0x51
    e0fe:	add.w	r7, r0, #4
    e102:	mov.w	r5, #0
    e106:	strb.w	r1, [sp, #79]	; 0x4f
    e10a:	orr.w	r3, fp, #2
    e10e:	blt.w	e84a <_svfprintf_r+0x8ea>
    e112:	bic.w	r3, fp, #128	; 0x80
    e116:	orr.w	fp, r3, #2
    e11a:	orrs.w	r3, r4, r5
    e11e:	str	r7, [sp, #36]	; 0x24
    e120:	beq.w	e7f6 <_svfprintf_r+0x896>
    e124:	mov	r7, r1
    e126:	str	r2, [sp, #48]	; 0x30
    e128:	ldr	r0, [pc, #268]	; (e238 <_svfprintf_r+0x2d8>)
    e12a:	b.n	e68a <_svfprintf_r+0x72a>
    e12c:	add	r2, sp, #108	; 0x6c
    e12e:	ldr	r1, [sp, #12]
    e130:	ldr	r0, [sp, #20]
    e132:	bl	12b7c <__ssprint_r>
    e136:	cbnz	r0, e14c <_svfprintf_r+0x1ec>
    e138:	add.w	r9, sp, #160	; 0xa0
    e13c:	b.n	dfea <_svfprintf_r+0x8a>
    e13e:	ldr	r3, [sp, #116]	; 0x74
    e140:	cbz	r3, e14c <_svfprintf_r+0x1ec>
    e142:	ldr	r0, [sp, #20]
    e144:	ldr	r1, [sp, #12]
    e146:	add	r2, sp, #108	; 0x6c
    e148:	bl	12b7c <__ssprint_r>
    e14c:	ldr	r3, [sp, #12]
    e14e:	ldrh	r3, [r3, #12]
    e150:	tst.w	r3, #64	; 0x40
    e154:	ldr	r3, [sp, #24]
    e156:	it	ne
    e158:	movne.w	r3, #4294967295
    e15c:	mov	r0, r3
    e15e:	add	sp, #228	; 0xe4
    e160:	vpop	{d8-d10}
    e164:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e168:	str	r3, [sp, #48]	; 0x30
    e16a:	mov	r8, r5
    e16c:	cmp	r2, #0
    e16e:	bne.w	f4a6 <_svfprintf_r+0x1546>
    e172:	ands.w	r3, fp, #32
    e176:	beq.w	e586 <_svfprintf_r+0x626>
    e17a:	ldr	r7, [sp, #36]	; 0x24
    e17c:	adds	r7, #7
    e17e:	bic.w	r3, r7, #7
    e182:	movs	r7, #0
    e184:	add.w	r2, r3, #8
    e188:	cmp	r8, r7
    e18a:	str	r2, [sp, #36]	; 0x24
    e18c:	ldrd	r4, r5, [r3]
    e190:	strb.w	r7, [sp, #79]	; 0x4f
    e194:	blt.w	ee54 <_svfprintf_r+0xef4>
    e198:	orrs.w	r3, r4, r5
    e19c:	bic.w	fp, fp, #128	; 0x80
    e1a0:	beq.w	e83a <_svfprintf_r+0x8da>
    e1a4:	add	r6, sp, #160	; 0xa0
    e1a6:	lsrs	r2, r4, #3
    e1a8:	orr.w	r2, r2, r5, lsl #29
    e1ac:	lsrs	r1, r5, #3
    e1ae:	and.w	r3, r4, #7
    e1b2:	mov	r5, r1
    e1b4:	mov	r4, r2
    e1b6:	adds	r3, #48	; 0x30
    e1b8:	orrs.w	r2, r4, r5
    e1bc:	strb.w	r3, [r6, #-1]!
    e1c0:	bne.n	e1a6 <_svfprintf_r+0x246>
    e1c2:	tst.w	fp, #1
    e1c6:	beq.w	e618 <_svfprintf_r+0x6b8>
    e1ca:	cmp	r3, #48	; 0x30
    e1cc:	beq.w	e618 <_svfprintf_r+0x6b8>
    e1d0:	movs	r2, #48	; 0x30
    e1d2:	subs	r3, r6, #1
    e1d4:	strb.w	r2, [r6, #-1]
    e1d8:	add	r2, sp, #160	; 0xa0
    e1da:	subs	r2, r2, r3
    e1dc:	str	r2, [sp, #32]
    e1de:	mov	r6, r3
    e1e0:	b.n	e61e <_svfprintf_r+0x6be>
    e1e2:	ldrb.w	r3, [sl]
    e1e6:	cmp	r3, #42	; 0x2a
    e1e8:	add.w	r4, sl, #1
    e1ec:	beq.w	f44e <_svfprintf_r+0x14ee>
    e1f0:	sub.w	r0, r3, #48	; 0x30
    e1f4:	cmp	r0, #9
    e1f6:	it	ls
    e1f8:	movls	r5, #0
    e1fa:	bhi.w	f3a8 <_svfprintf_r+0x1448>
    e1fe:	ldrb.w	r3, [r4], #1
    e202:	add.w	r5, r5, r5, lsl #2
    e206:	add.w	r5, r0, r5, lsl #1
    e20a:	sub.w	r0, r3, #48	; 0x30
    e20e:	cmp	r0, #9
    e210:	bls.n	e1fe <_svfprintf_r+0x29e>
    e212:	orr.w	r5, r5, r5, asr #31
    e216:	mov	sl, r4
    e218:	b.n	e016 <_svfprintf_r+0xb6>
    e21a:	orr.w	fp, fp, #128	; 0x80
    e21e:	ldrb.w	r3, [sl]
    e222:	b.n	e012 <_svfprintf_r+0xb2>
    e224:	nop.w
	...
    e230:	.word	0xffffffff
    e234:	.word	0x7fefffff
    e238:	.word	0x20001a24
    e23c:	sub.w	r0, r3, #48	; 0x30
    e240:	movs	r3, #0
    e242:	mov	r4, r3
    e244:	ldrb.w	r3, [sl], #1
    e248:	add.w	r4, r4, r4, lsl #2
    e24c:	add.w	r4, r0, r4, lsl #1
    e250:	sub.w	r0, r3, #48	; 0x30
    e254:	cmp	r0, #9
    e256:	bls.n	e244 <_svfprintf_r+0x2e4>
    e258:	str	r4, [sp, #28]
    e25a:	b.n	e016 <_svfprintf_r+0xb6>
    e25c:	str	r3, [sp, #48]	; 0x30
    e25e:	mov	r8, r5
    e260:	cmp	r2, #0
    e262:	bne.w	f4be <_svfprintf_r+0x155e>
    e266:	orr.w	fp, fp, #16
    e26a:	tst.w	fp, #32
    e26e:	beq.w	ec78 <_svfprintf_r+0xd18>
    e272:	ldr	r7, [sp, #36]	; 0x24
    e274:	adds	r7, #7
    e276:	bic.w	r7, r7, #7
    e27a:	ldrd	r2, r3, [r7]
    e27e:	add.w	r1, r7, #8
    e282:	str	r1, [sp, #36]	; 0x24
    e284:	mov	r4, r2
    e286:	mov	r5, r3
    e288:	cmp	r2, #0
    e28a:	sbcs.w	r3, r3, #0
    e28e:	blt.w	ed00 <_svfprintf_r+0xda0>
    e292:	cmp.w	r8, #0
    e296:	ldrb.w	r7, [sp, #79]	; 0x4f
    e29a:	blt.w	e608 <_svfprintf_r+0x6a8>
    e29e:	orrs.w	r3, r4, r5
    e2a2:	bic.w	fp, fp, #128	; 0x80
    e2a6:	beq.w	ea96 <_svfprintf_r+0xb36>
    e2aa:	cmp	r5, #0
    e2ac:	it	eq
    e2ae:	cmpeq	r4, #10
    e2b0:	bcc.w	e610 <_svfprintf_r+0x6b0>
    e2b4:	add	r6, sp, #160	; 0xa0
    e2b6:	mov	r0, r4
    e2b8:	mov	r1, r5
    e2ba:	movs	r2, #10
    e2bc:	movs	r3, #0
    e2be:	bl	bd08 <__aeabi_uldivmod>
    e2c2:	adds	r2, #48	; 0x30
    e2c4:	strb.w	r2, [r6, #-1]!
    e2c8:	mov	r0, r4
    e2ca:	mov	r1, r5
    e2cc:	movs	r3, #0
    e2ce:	movs	r2, #10
    e2d0:	bl	bd08 <__aeabi_uldivmod>
    e2d4:	mov	r4, r0
    e2d6:	mov	r5, r1
    e2d8:	orrs.w	r3, r4, r5
    e2dc:	bne.n	e2b6 <_svfprintf_r+0x356>
    e2de:	b.n	e618 <_svfprintf_r+0x6b8>
    e2e0:	str	r3, [sp, #48]	; 0x30
    e2e2:	mov	r8, r5
    e2e4:	cmp	r2, #0
    e2e6:	bne.w	f4b6 <_svfprintf_r+0x1556>
    e2ea:	ldr	r7, [sp, #36]	; 0x24
    e2ec:	tst.w	fp, #8
    e2f0:	add.w	r7, r7, #7
    e2f4:	beq.w	ef78 <_svfprintf_r+0x1018>
    e2f8:	bic.w	r3, r7, #7
    e2fc:	vldr	d8, [r3]
    e300:	add.w	r2, r3, #8
    e304:	str	r2, [sp, #36]	; 0x24
    e306:	vabs.f64	d7, d8
    e30a:	vcmp.f64	d7, d9
    e30e:	vmrs	APSR_nzcv, fpscr
    e312:	ble.w	ee8e <_svfprintf_r+0xf2e>
    e316:	vcmpe.f64	d8, #0.0
    e31a:	vmrs	APSR_nzcv, fpscr
    e31e:	bmi.w	f2b6 <_svfprintf_r+0x1356>
    e322:	ldrb.w	r7, [sp, #79]	; 0x4f
    e326:	ldr	r6, [pc, #668]	; (e5c4 <_svfprintf_r+0x664>)
    e328:	ldr	r3, [pc, #668]	; (e5c8 <_svfprintf_r+0x668>)
    e32a:	ldr	r1, [sp, #48]	; 0x30
    e32c:	movs	r2, #3
    e32e:	mov.w	r8, #0
    e332:	str	r2, [sp, #16]
    e334:	bic.w	fp, fp, #128	; 0x80
    e338:	cmp	r1, #71	; 0x47
    e33a:	it	le
    e33c:	movle	r6, r3
    e33e:	str	r2, [sp, #32]
    e340:	str.w	r8, [sp, #56]	; 0x38
    e344:	cbz	r7, e34c <_svfprintf_r+0x3ec>
    e346:	ldr	r3, [sp, #16]
    e348:	adds	r3, #1
    e34a:	str	r3, [sp, #16]
    e34c:	ands.w	r3, fp, #2
    e350:	str	r3, [sp, #40]	; 0x28
    e352:	beq.n	e35a <_svfprintf_r+0x3fa>
    e354:	ldr	r3, [sp, #16]
    e356:	adds	r3, #2
    e358:	str	r3, [sp, #16]
    e35a:	ands.w	r3, fp, #132	; 0x84
    e35e:	str	r3, [sp, #44]	; 0x2c
    e360:	bne.w	e864 <_svfprintf_r+0x904>
    e364:	ldr	r3, [sp, #28]
    e366:	ldr	r2, [sp, #16]
    e368:	subs	r4, r3, r2
    e36a:	cmp	r4, #0
    e36c:	ble.w	e864 <_svfprintf_r+0x904>
    e370:	cmp	r4, #16
    e372:	ldr	r1, [sp, #116]	; 0x74
    e374:	ldr	r2, [sp, #112]	; 0x70
    e376:	ldr	r7, [pc, #596]	; (e5cc <_svfprintf_r+0x66c>)
    e378:	ble.n	e3c2 <_svfprintf_r+0x462>
    e37a:	mov	r0, r9
    e37c:	movs	r5, #16
    e37e:	mov	r9, r8
    e380:	mov	r8, r6
    e382:	ldr	r6, [sp, #20]
    e384:	b.n	e390 <_svfprintf_r+0x430>
    e386:	subs	r4, #16
    e388:	cmp	r4, #16
    e38a:	add.w	r0, r0, #8
    e38e:	ble.n	e3bc <_svfprintf_r+0x45c>
    e390:	adds	r2, #1
    e392:	adds	r1, #16
    e394:	cmp	r2, #7
    e396:	str	r1, [sp, #116]	; 0x74
    e398:	str	r2, [sp, #112]	; 0x70
    e39a:	str	r7, [r0, #0]
    e39c:	str	r5, [r0, #4]
    e39e:	ble.n	e386 <_svfprintf_r+0x426>
    e3a0:	add	r2, sp, #108	; 0x6c
    e3a2:	ldr	r1, [sp, #12]
    e3a4:	mov	r0, r6
    e3a6:	bl	12b7c <__ssprint_r>
    e3aa:	cmp	r0, #0
    e3ac:	bne.w	e14c <_svfprintf_r+0x1ec>
    e3b0:	subs	r4, #16
    e3b2:	cmp	r4, #16
    e3b4:	ldr	r1, [sp, #116]	; 0x74
    e3b6:	ldr	r2, [sp, #112]	; 0x70
    e3b8:	add	r0, sp, #160	; 0xa0
    e3ba:	bgt.n	e390 <_svfprintf_r+0x430>
    e3bc:	mov	r6, r8
    e3be:	mov	r8, r9
    e3c0:	mov	r9, r0
    e3c2:	adds	r2, #1
    e3c4:	adds	r3, r4, r1
    e3c6:	cmp	r2, #7
    e3c8:	str	r3, [sp, #116]	; 0x74
    e3ca:	str	r2, [sp, #112]	; 0x70
    e3cc:	str.w	r7, [r9]
    e3d0:	str.w	r4, [r9, #4]
    e3d4:	bgt.w	eb9c <_svfprintf_r+0xc3c>
    e3d8:	ldrb.w	r7, [sp, #79]	; 0x4f
    e3dc:	add.w	r9, r9, #8
    e3e0:	cbz	r7, e400 <_svfprintf_r+0x4a0>
    e3e2:	ldr	r2, [sp, #112]	; 0x70
    e3e4:	adds	r2, #1
    e3e6:	adds	r3, #1
    e3e8:	add.w	r0, sp, #79	; 0x4f
    e3ec:	movs	r1, #1
    e3ee:	cmp	r2, #7
    e3f0:	str	r3, [sp, #116]	; 0x74
    e3f2:	str	r2, [sp, #112]	; 0x70
    e3f4:	stmia.w	r9, {r0, r1}
    e3f8:	bgt.w	eaba <_svfprintf_r+0xb5a>
    e3fc:	add.w	r9, r9, #8
    e400:	ldr	r2, [sp, #40]	; 0x28
    e402:	cbz	r2, e420 <_svfprintf_r+0x4c0>
    e404:	ldr	r2, [sp, #112]	; 0x70
    e406:	adds	r2, #1
    e408:	adds	r3, #2
    e40a:	add	r0, sp, #80	; 0x50
    e40c:	movs	r1, #2
    e40e:	cmp	r2, #7
    e410:	str	r3, [sp, #116]	; 0x74
    e412:	str	r2, [sp, #112]	; 0x70
    e414:	stmia.w	r9, {r0, r1}
    e418:	bgt.w	ead2 <_svfprintf_r+0xb72>
    e41c:	add.w	r9, r9, #8
    e420:	ldr	r2, [sp, #44]	; 0x2c
    e422:	cmp	r2, #128	; 0x80
    e424:	beq.w	e924 <_svfprintf_r+0x9c4>
    e428:	ldr	r2, [sp, #32]
    e42a:	rsb	r4, r2, r8
    e42e:	cmp	r4, #0
    e430:	ble.n	e49c <_svfprintf_r+0x53c>
    e432:	cmp	r4, #16
    e434:	ldr	r2, [sp, #112]	; 0x70
    e436:	ldr	r7, [pc, #408]	; (e5d0 <_svfprintf_r+0x670>)
    e438:	ble.n	e482 <_svfprintf_r+0x522>
    e43a:	mov	r1, r9
    e43c:	mov.w	r8, #16
    e440:	mov	r9, r6
    e442:	ldr	r5, [sp, #20]
    e444:	ldr	r6, [sp, #12]
    e446:	b.n	e452 <_svfprintf_r+0x4f2>
    e448:	subs	r4, #16
    e44a:	cmp	r4, #16
    e44c:	add.w	r1, r1, #8
    e450:	ble.n	e47e <_svfprintf_r+0x51e>
    e452:	adds	r2, #1
    e454:	adds	r3, #16
    e456:	cmp	r2, #7
    e458:	str	r3, [sp, #116]	; 0x74
    e45a:	str	r2, [sp, #112]	; 0x70
    e45c:	stmia.w	r1, {r7, r8}
    e460:	ble.n	e448 <_svfprintf_r+0x4e8>
    e462:	add	r2, sp, #108	; 0x6c
    e464:	mov	r1, r6
    e466:	mov	r0, r5
    e468:	bl	12b7c <__ssprint_r>
    e46c:	cmp	r0, #0
    e46e:	bne.w	e14c <_svfprintf_r+0x1ec>
    e472:	subs	r4, #16
    e474:	cmp	r4, #16
    e476:	ldr	r3, [sp, #116]	; 0x74
    e478:	ldr	r2, [sp, #112]	; 0x70
    e47a:	add	r1, sp, #160	; 0xa0
    e47c:	bgt.n	e452 <_svfprintf_r+0x4f2>
    e47e:	mov	r6, r9
    e480:	mov	r9, r1
    e482:	adds	r2, #1
    e484:	add	r3, r4
    e486:	cmp	r2, #7
    e488:	str	r3, [sp, #116]	; 0x74
    e48a:	str	r2, [sp, #112]	; 0x70
    e48c:	str.w	r7, [r9]
    e490:	str.w	r4, [r9, #4]
    e494:	bgt.w	eaa2 <_svfprintf_r+0xb42>
    e498:	add.w	r9, r9, #8
    e49c:	tst.w	fp, #256	; 0x100
    e4a0:	bne.w	e868 <_svfprintf_r+0x908>
    e4a4:	ldr	r2, [sp, #112]	; 0x70
    e4a6:	ldr	r0, [sp, #32]
    e4a8:	str.w	r6, [r9]
    e4ac:	adds	r2, #1
    e4ae:	add	r3, r0
    e4b0:	cmp	r2, #7
    e4b2:	str	r3, [sp, #116]	; 0x74
    e4b4:	str.w	r0, [r9, #4]
    e4b8:	str	r2, [sp, #112]	; 0x70
    e4ba:	bgt.w	ea42 <_svfprintf_r+0xae2>
    e4be:	add.w	r9, r9, #8
    e4c2:	tst.w	fp, #4
    e4c6:	beq.n	e546 <_svfprintf_r+0x5e6>
    e4c8:	ldr	r2, [sp, #28]
    e4ca:	ldr	r1, [sp, #16]
    e4cc:	subs	r4, r2, r1
    e4ce:	cmp	r4, #0
    e4d0:	ble.n	e546 <_svfprintf_r+0x5e6>
    e4d2:	cmp	r4, #16
    e4d4:	ldr	r2, [sp, #112]	; 0x70
    e4d6:	ldr	r7, [pc, #244]	; (e5cc <_svfprintf_r+0x66c>)
    e4d8:	ble.n	e520 <_svfprintf_r+0x5c0>
    e4da:	movs	r5, #16
    e4dc:	ldr	r6, [sp, #20]
    e4de:	ldr.w	r8, [sp, #12]
    e4e2:	b.n	e4ee <_svfprintf_r+0x58e>
    e4e4:	subs	r4, #16
    e4e6:	cmp	r4, #16
    e4e8:	add.w	r9, r9, #8
    e4ec:	ble.n	e520 <_svfprintf_r+0x5c0>
    e4ee:	adds	r2, #1
    e4f0:	adds	r3, #16
    e4f2:	cmp	r2, #7
    e4f4:	str	r3, [sp, #116]	; 0x74
    e4f6:	str	r2, [sp, #112]	; 0x70
    e4f8:	str.w	r7, [r9]
    e4fc:	str.w	r5, [r9, #4]
    e500:	ble.n	e4e4 <_svfprintf_r+0x584>
    e502:	add	r2, sp, #108	; 0x6c
    e504:	mov	r1, r8
    e506:	mov	r0, r6
    e508:	bl	12b7c <__ssprint_r>
    e50c:	cmp	r0, #0
    e50e:	bne.w	e14c <_svfprintf_r+0x1ec>
    e512:	subs	r4, #16
    e514:	cmp	r4, #16
    e516:	ldr	r3, [sp, #116]	; 0x74
    e518:	ldr	r2, [sp, #112]	; 0x70
    e51a:	add.w	r9, sp, #160	; 0xa0
    e51e:	bgt.n	e4ee <_svfprintf_r+0x58e>
    e520:	adds	r2, #1
    e522:	add	r3, r4
    e524:	cmp	r2, #7
    e526:	str	r3, [sp, #116]	; 0x74
    e528:	str	r2, [sp, #112]	; 0x70
    e52a:	str.w	r7, [r9]
    e52e:	str.w	r4, [r9, #4]
    e532:	ble.n	e546 <_svfprintf_r+0x5e6>
    e534:	add	r2, sp, #108	; 0x6c
    e536:	ldr	r1, [sp, #12]
    e538:	ldr	r0, [sp, #20]
    e53a:	bl	12b7c <__ssprint_r>
    e53e:	cmp	r0, #0
    e540:	bne.w	e14c <_svfprintf_r+0x1ec>
    e544:	ldr	r3, [sp, #116]	; 0x74
    e546:	ldr	r2, [sp, #24]
    e548:	ldr	r1, [sp, #28]
    e54a:	ldr	r0, [sp, #16]
    e54c:	cmp	r1, r0
    e54e:	ite	ge
    e550:	addge	r2, r2, r1
    e552:	addlt	r2, r2, r0
    e554:	str	r2, [sp, #24]
    e556:	cmp	r3, #0
    e558:	bne.w	ea5a <_svfprintf_r+0xafa>
    e55c:	movs	r3, #0
    e55e:	str	r3, [sp, #112]	; 0x70
    e560:	add.w	r9, sp, #160	; 0xa0
    e564:	b.n	dfac <_svfprintf_r+0x4c>
    e566:	orr.w	fp, fp, #8
    e56a:	ldrb.w	r3, [sl]
    e56e:	b.n	e012 <_svfprintf_r+0xb2>
    e570:	str	r3, [sp, #48]	; 0x30
    e572:	mov	r8, r5
    e574:	cmp	r2, #0
    e576:	bne.w	f4ae <_svfprintf_r+0x154e>
    e57a:	orr.w	fp, fp, #16
    e57e:	ands.w	r3, fp, #32
    e582:	bne.w	e17a <_svfprintf_r+0x21a>
    e586:	ands.w	r2, fp, #16
    e58a:	bne.w	ecb0 <_svfprintf_r+0xd50>
    e58e:	ands.w	r3, fp, #64	; 0x40
    e592:	beq.w	ecb0 <_svfprintf_r+0xd50>
    e596:	ldr	r1, [sp, #36]	; 0x24
    e598:	strb.w	r2, [sp, #79]	; 0x4f
    e59c:	mov	r3, r1
    e59e:	cmp.w	r8, #0
    e5a2:	add.w	r3, r3, #4
    e5a6:	ldrh	r4, [r1, #0]
    e5a8:	mov.w	r5, #0
    e5ac:	blt.w	f106 <_svfprintf_r+0x11a6>
    e5b0:	orrs.w	r1, r4, r5
    e5b4:	bic.w	fp, fp, #128	; 0x80
    e5b8:	str	r3, [sp, #36]	; 0x24
    e5ba:	beq.w	e83a <_svfprintf_r+0x8da>
    e5be:	mov	r7, r2
    e5c0:	b.n	e1a4 <_svfprintf_r+0x244>
    e5c2:	nop
    e5c4:	.word	0x200019e8
    e5c8:	.word	0x20001a08
    e5cc:	.word	0x20000a8c
    e5d0:	.word	0x20001ae0
    e5d4:	str	r3, [sp, #48]	; 0x30
    e5d6:	mov	r8, r5
    e5d8:	cmp	r2, #0
    e5da:	bne.w	f490 <_svfprintf_r+0x1530>
    e5de:	orr.w	fp, fp, #16
    e5e2:	ands.w	r3, fp, #32
    e5e6:	beq.w	ebb8 <_svfprintf_r+0xc58>
    e5ea:	ldr	r7, [sp, #36]	; 0x24
    e5ec:	adds	r7, #7
    e5ee:	bic.w	r3, r7, #7
    e5f2:	movs	r7, #0
    e5f4:	add.w	r2, r3, #8
    e5f8:	cmp	r8, r7
    e5fa:	str	r2, [sp, #36]	; 0x24
    e5fc:	ldrd	r4, r5, [r3]
    e600:	strb.w	r7, [sp, #79]	; 0x4f
    e604:	bge.w	e29e <_svfprintf_r+0x33e>
    e608:	orrs.w	r3, r4, r5
    e60c:	bne.w	e2aa <_svfprintf_r+0x34a>
    e610:	add	r6, sp, #224	; 0xe0
    e612:	adds	r4, #48	; 0x30
    e614:	strb.w	r4, [r6, #-65]!
    e618:	add	r3, sp, #160	; 0xa0
    e61a:	subs	r3, r3, r6
    e61c:	str	r3, [sp, #32]
    e61e:	ldr	r3, [sp, #32]
    e620:	cmp	r3, r8
    e622:	it	lt
    e624:	movlt	r3, r8
    e626:	str	r3, [sp, #16]
    e628:	movs	r3, #0
    e62a:	str	r3, [sp, #56]	; 0x38
    e62c:	b.n	e344 <_svfprintf_r+0x3e4>
    e62e:	str	r3, [sp, #48]	; 0x30
    e630:	mov	r8, r5
    e632:	cmp	r2, #0
    e634:	bne.w	f488 <_svfprintf_r+0x1528>
    e638:	tst.w	fp, #32
    e63c:	ldr	r0, [pc, #776]	; (e948 <_svfprintf_r+0x9e8>)
    e63e:	beq.w	e74e <_svfprintf_r+0x7ee>
    e642:	ldr	r7, [sp, #36]	; 0x24
    e644:	adds	r7, #7
    e646:	bic.w	r3, r7, #7
    e64a:	ldrd	r4, r5, [r3]
    e64e:	add.w	r2, r3, #8
    e652:	str	r2, [sp, #36]	; 0x24
    e654:	ands.w	r7, fp, #1
    e658:	beq.w	eaea <_svfprintf_r+0xb8a>
    e65c:	orrs.w	r3, r4, r5
    e660:	beq.w	efaa <_svfprintf_r+0x104a>
    e664:	movs	r7, #0
    e666:	movs	r3, #48	; 0x30
    e668:	ldrb.w	r2, [sp, #48]	; 0x30
    e66c:	strb.w	r3, [sp, #80]	; 0x50
    e670:	cmp	r8, r7
    e672:	strb.w	r2, [sp, #81]	; 0x51
    e676:	strb.w	r7, [sp, #79]	; 0x4f
    e67a:	orr.w	r3, fp, #2
    e67e:	blt.w	f2b0 <_svfprintf_r+0x1350>
    e682:	bic.w	r3, fp, #128	; 0x80
    e686:	orr.w	fp, r3, #2
    e68a:	add	r6, sp, #160	; 0xa0
    e68c:	lsrs	r3, r4, #4
    e68e:	and.w	r1, r4, #15
    e692:	orr.w	r3, r3, r5, lsl #28
    e696:	lsrs	r2, r5, #4
    e698:	mov	r4, r3
    e69a:	mov	r5, r2
    e69c:	ldrb	r3, [r0, r1]
    e69e:	strb.w	r3, [r6, #-1]!
    e6a2:	orrs.w	r3, r4, r5
    e6a6:	bne.n	e68c <_svfprintf_r+0x72c>
    e6a8:	b.n	e618 <_svfprintf_r+0x6b8>
    e6aa:	ldr	r1, [sp, #36]	; 0x24
    e6ac:	str	r3, [sp, #48]	; 0x30
    e6ae:	ldr	r2, [r1, #0]
    e6b0:	strb.w	r2, [sp, #120]	; 0x78
    e6b4:	movs	r3, #0
    e6b6:	mov	r2, r1
    e6b8:	mov	r7, r3
    e6ba:	strb.w	r3, [sp, #79]	; 0x4f
    e6be:	adds	r2, #4
    e6c0:	movs	r3, #1
    e6c2:	str	r3, [sp, #16]
    e6c4:	mov	r8, r7
    e6c6:	str	r7, [sp, #56]	; 0x38
    e6c8:	str	r2, [sp, #36]	; 0x24
    e6ca:	str	r3, [sp, #32]
    e6cc:	add	r6, sp, #120	; 0x78
    e6ce:	b.n	e34c <_svfprintf_r+0x3ec>
    e6d0:	str	r3, [sp, #48]	; 0x30
    e6d2:	mov	r8, r5
    e6d4:	cmp	r2, #0
    e6d6:	beq.w	e26a <_svfprintf_r+0x30a>
    e6da:	strb.w	r1, [sp, #79]	; 0x4f
    e6de:	b.n	e26a <_svfprintf_r+0x30a>
    e6e0:	orr.w	fp, fp, #64	; 0x40
    e6e4:	ldrb.w	r3, [sl]
    e6e8:	b.n	e012 <_svfprintf_r+0xb2>
    e6ea:	ldrb.w	r3, [sl]
    e6ee:	cmp	r1, #0
    e6f0:	bne.w	e012 <_svfprintf_r+0xb2>
    e6f4:	movs	r2, #1
    e6f6:	movs	r1, #32
    e6f8:	b.n	e012 <_svfprintf_r+0xb2>
    e6fa:	orr.w	fp, fp, #1
    e6fe:	ldrb.w	r3, [sl]
    e702:	b.n	e012 <_svfprintf_r+0xb2>
    e704:	ldr	r4, [sp, #36]	; 0x24
    e706:	ldr	r3, [r4, #0]
    e708:	str	r3, [sp, #28]
    e70a:	mov	r0, r3
    e70c:	cmp	r0, #0
    e70e:	mov	r3, r4
    e710:	add.w	r3, r3, #4
    e714:	blt.w	e0d6 <_svfprintf_r+0x176>
    e718:	str	r3, [sp, #36]	; 0x24
    e71a:	ldrb.w	r3, [sl]
    e71e:	b.n	e012 <_svfprintf_r+0xb2>
    e720:	ldrb.w	r3, [sl]
    e724:	movs	r2, #1
    e726:	movs	r1, #43	; 0x2b
    e728:	b.n	e012 <_svfprintf_r+0xb2>
    e72a:	str	r3, [sp, #48]	; 0x30
    e72c:	mov	r8, r5
    e72e:	cmp	r2, #0
    e730:	beq.w	e5e2 <_svfprintf_r+0x682>
    e734:	strb.w	r1, [sp, #79]	; 0x4f
    e738:	b.n	e5e2 <_svfprintf_r+0x682>
    e73a:	str	r3, [sp, #48]	; 0x30
    e73c:	mov	r8, r5
    e73e:	cmp	r2, #0
    e740:	bne.w	f498 <_svfprintf_r+0x1538>
    e744:	tst.w	fp, #32
    e748:	ldr	r0, [pc, #512]	; (e94c <_svfprintf_r+0x9ec>)
    e74a:	bne.w	e642 <_svfprintf_r+0x6e2>
    e74e:	ldr	r2, [sp, #36]	; 0x24
    e750:	tst.w	fp, #16
    e754:	mov	r3, r2
    e756:	bne.w	ecdc <_svfprintf_r+0xd7c>
    e75a:	tst.w	fp, #64	; 0x40
    e75e:	beq.w	ecdc <_svfprintf_r+0xd7c>
    e762:	adds	r3, #4
    e764:	ldrh	r4, [r2, #0]
    e766:	str	r3, [sp, #36]	; 0x24
    e768:	movs	r5, #0
    e76a:	b.n	e654 <_svfprintf_r+0x6f4>
    e76c:	ldrb.w	r3, [sl]
    e770:	cmp	r3, #108	; 0x6c
    e772:	ittte	eq
    e774:	ldrbeq.w	r3, [sl, #1]
    e778:	orreq.w	fp, fp, #32
    e77c:	addeq.w	sl, sl, #1
    e780:	orrne.w	fp, fp, #16
    e784:	b.n	e012 <_svfprintf_r+0xb2>
    e786:	cmp	r2, #0
    e788:	bne.w	f46a <_svfprintf_r+0x150a>
    e78c:	tst.w	fp, #32
    e790:	beq.w	ee60 <_svfprintf_r+0xf00>
    e794:	ldr	r2, [sp, #36]	; 0x24
    e796:	ldr	r1, [sp, #24]
    e798:	ldr	r3, [r2, #0]
    e79a:	asrs	r5, r1, #31
    e79c:	mov	r0, r1
    e79e:	adds	r2, #4
    e7a0:	mov	r1, r5
    e7a2:	str	r2, [sp, #36]	; 0x24
    e7a4:	strd	r0, r1, [r3]
    e7a8:	b.n	dfac <_svfprintf_r+0x4c>
    e7aa:	orr.w	fp, fp, #32
    e7ae:	ldrb.w	r3, [sl]
    e7b2:	b.n	e012 <_svfprintf_r+0xb2>
    e7b4:	ldr	r2, [sp, #36]	; 0x24
    e7b6:	str	r3, [sp, #48]	; 0x30
    e7b8:	ldr	r6, [r2, #0]
    e7ba:	movs	r4, #0
    e7bc:	strb.w	r4, [sp, #79]	; 0x4f
    e7c0:	adds	r7, r2, #4
    e7c2:	cmp	r6, #0
    e7c4:	beq.w	f292 <_svfprintf_r+0x1332>
    e7c8:	cmp	r5, #0
    e7ca:	blt.w	f112 <_svfprintf_r+0x11b2>
    e7ce:	mov	r2, r5
    e7d0:	mov	r1, r4
    e7d2:	mov	r0, r6
    e7d4:	bl	c6a0 <memchr>
    e7d8:	cmp	r0, #0
    e7da:	beq.w	f376 <_svfprintf_r+0x1416>
    e7de:	subs	r3, r0, r6
    e7e0:	str	r3, [sp, #32]
    e7e2:	mov	r8, r4
    e7e4:	bic.w	r3, r3, r3, asr #31
    e7e8:	str	r7, [sp, #36]	; 0x24
    e7ea:	str	r3, [sp, #16]
    e7ec:	str.w	r8, [sp, #56]	; 0x38
    e7f0:	ldrb.w	r7, [sp, #79]	; 0x4f
    e7f4:	b.n	e344 <_svfprintf_r+0x3e4>
    e7f6:	ldr	r0, [pc, #340]	; (e94c <_svfprintf_r+0x9ec>)
    e7f8:	str	r2, [sp, #48]	; 0x30
    e7fa:	cmp.w	r8, #0
    e7fe:	bne.w	eb0a <_svfprintf_r+0xbaa>
    e802:	mov	r7, r8
    e804:	mov.w	r8, #0
    e808:	str.w	r8, [sp, #32]
    e80c:	add	r6, sp, #160	; 0xa0
    e80e:	b.n	e61e <_svfprintf_r+0x6be>
    e810:	str	r3, [sp, #48]	; 0x30
    e812:	cmp	r2, #0
    e814:	bne.w	f472 <_svfprintf_r+0x1512>
    e818:	ldr	r2, [sp, #48]	; 0x30
    e81a:	cmp	r2, #0
    e81c:	beq.w	e13e <_svfprintf_r+0x1de>
    e820:	movs	r3, #0
    e822:	movs	r1, #1
    e824:	mov	r7, r3
    e826:	str	r1, [sp, #16]
    e828:	strb.w	r2, [sp, #120]	; 0x78
    e82c:	strb.w	r3, [sp, #79]	; 0x4f
    e830:	mov	r8, r3
    e832:	str	r3, [sp, #56]	; 0x38
    e834:	str	r1, [sp, #32]
    e836:	add	r6, sp, #120	; 0x78
    e838:	b.n	e34c <_svfprintf_r+0x3ec>
    e83a:	cmp.w	r8, #0
    e83e:	beq.w	f358 <_svfprintf_r+0x13f8>
    e842:	movs	r7, #0
    e844:	movs	r4, #0
    e846:	movs	r5, #0
    e848:	b.n	e1a4 <_svfprintf_r+0x244>
    e84a:	ldr	r0, [pc, #256]	; (e94c <_svfprintf_r+0x9ec>)
    e84c:	str	r2, [sp, #48]	; 0x30
    e84e:	mov	fp, r3
    e850:	orrs.w	r3, r4, r5
    e854:	str	r7, [sp, #36]	; 0x24
    e856:	mov.w	r7, #0
    e85a:	bne.w	e68a <_svfprintf_r+0x72a>
    e85e:	movs	r4, #0
    e860:	movs	r5, #0
    e862:	b.n	e68a <_svfprintf_r+0x72a>
    e864:	ldr	r3, [sp, #116]	; 0x74
    e866:	b.n	e3e0 <_svfprintf_r+0x480>
    e868:	ldr	r2, [sp, #48]	; 0x30
    e86a:	cmp	r2, #101	; 0x65
    e86c:	ble.w	e9b2 <_svfprintf_r+0xa52>
    e870:	vcmp.f64	d8, #0.0
    e874:	vmrs	APSR_nzcv, fpscr
    e878:	bne.w	eb0e <_svfprintf_r+0xbae>
    e87c:	ldr	r2, [sp, #112]	; 0x70
    e87e:	ldr	r1, [pc, #208]	; (e950 <_svfprintf_r+0x9f0>)
    e880:	str.w	r1, [r9]
    e884:	adds	r2, #1
    e886:	adds	r3, #1
    e888:	movs	r1, #1
    e88a:	cmp	r2, #7
    e88c:	str	r3, [sp, #116]	; 0x74
    e88e:	str	r2, [sp, #112]	; 0x70
    e890:	str.w	r1, [r9, #4]
    e894:	bgt.w	efbc <_svfprintf_r+0x105c>
    e898:	add.w	r9, r9, #8
    e89c:	ldr	r2, [sp, #84]	; 0x54
    e89e:	ldr	r1, [sp, #52]	; 0x34
    e8a0:	cmp	r2, r1
    e8a2:	blt.n	e8ac <_svfprintf_r+0x94c>
    e8a4:	tst.w	fp, #1
    e8a8:	beq.w	e4c2 <_svfprintf_r+0x562>
    e8ac:	ldr	r2, [sp, #112]	; 0x70
    e8ae:	ldr	r0, [sp, #60]	; 0x3c
    e8b0:	ldr	r1, [sp, #64]	; 0x40
    e8b2:	str.w	r1, [r9]
    e8b6:	adds	r2, #1
    e8b8:	add	r3, r0
    e8ba:	cmp	r2, #7
    e8bc:	str	r3, [sp, #116]	; 0x74
    e8be:	str.w	r0, [r9, #4]
    e8c2:	str	r2, [sp, #112]	; 0x70
    e8c4:	bgt.w	f074 <_svfprintf_r+0x1114>
    e8c8:	add.w	r9, r9, #8
    e8cc:	ldr	r2, [sp, #52]	; 0x34
    e8ce:	subs	r4, r2, #1
    e8d0:	cmp	r4, #0
    e8d2:	ble.w	e4c2 <_svfprintf_r+0x562>
    e8d6:	cmp	r4, #16
    e8d8:	ldr	r2, [sp, #112]	; 0x70
    e8da:	ldr	r7, [pc, #120]	; (e954 <_svfprintf_r+0x9f4>)
    e8dc:	ble.w	ec98 <_svfprintf_r+0xd38>
    e8e0:	movs	r5, #16
    e8e2:	ldr	r6, [sp, #20]
    e8e4:	ldr.w	r8, [sp, #12]
    e8e8:	b.n	e8f6 <_svfprintf_r+0x996>
    e8ea:	add.w	r9, r9, #8
    e8ee:	subs	r4, #16
    e8f0:	cmp	r4, #16
    e8f2:	ble.w	ec98 <_svfprintf_r+0xd38>
    e8f6:	adds	r2, #1
    e8f8:	adds	r3, #16
    e8fa:	cmp	r2, #7
    e8fc:	str	r3, [sp, #116]	; 0x74
    e8fe:	str	r2, [sp, #112]	; 0x70
    e900:	str.w	r7, [r9]
    e904:	str.w	r5, [r9, #4]
    e908:	ble.n	e8ea <_svfprintf_r+0x98a>
    e90a:	add	r2, sp, #108	; 0x6c
    e90c:	mov	r1, r8
    e90e:	mov	r0, r6
    e910:	bl	12b7c <__ssprint_r>
    e914:	cmp	r0, #0
    e916:	bne.w	e14c <_svfprintf_r+0x1ec>
    e91a:	ldr	r3, [sp, #116]	; 0x74
    e91c:	ldr	r2, [sp, #112]	; 0x70
    e91e:	add.w	r9, sp, #160	; 0xa0
    e922:	b.n	e8ee <_svfprintf_r+0x98e>
    e924:	ldr	r2, [sp, #28]
    e926:	ldr	r1, [sp, #16]
    e928:	subs	r4, r2, r1
    e92a:	cmp	r4, #0
    e92c:	ble.w	e428 <_svfprintf_r+0x4c8>
    e930:	cmp	r4, #16
    e932:	ldr	r2, [sp, #112]	; 0x70
    e934:	ldr	r7, [pc, #28]	; (e954 <_svfprintf_r+0x9f4>)
    e936:	ble.n	e996 <_svfprintf_r+0xa36>
    e938:	mov	r1, r9
    e93a:	movs	r5, #16
    e93c:	mov	r9, r8
    e93e:	mov	r0, r3
    e940:	mov	r8, r6
    e942:	ldr	r6, [sp, #20]
    e944:	b.n	e962 <_svfprintf_r+0xa02>
    e946:	nop
    e948:	.word	0x20001a10
    e94c:	.word	0x20001a24
    e950:	.word	0x20001a40
    e954:	.word	0x20001ae0
    e958:	subs	r4, #16
    e95a:	cmp	r4, #16
    e95c:	add.w	r1, r1, #8
    e960:	ble.n	e98e <_svfprintf_r+0xa2e>
    e962:	adds	r2, #1
    e964:	adds	r0, #16
    e966:	cmp	r2, #7
    e968:	str	r0, [sp, #116]	; 0x74
    e96a:	str	r2, [sp, #112]	; 0x70
    e96c:	str	r7, [r1, #0]
    e96e:	str	r5, [r1, #4]
    e970:	ble.n	e958 <_svfprintf_r+0x9f8>
    e972:	add	r2, sp, #108	; 0x6c
    e974:	ldr	r1, [sp, #12]
    e976:	mov	r0, r6
    e978:	bl	12b7c <__ssprint_r>
    e97c:	cmp	r0, #0
    e97e:	bne.w	e14c <_svfprintf_r+0x1ec>
    e982:	subs	r4, #16
    e984:	cmp	r4, #16
    e986:	ldr	r0, [sp, #116]	; 0x74
    e988:	ldr	r2, [sp, #112]	; 0x70
    e98a:	add	r1, sp, #160	; 0xa0
    e98c:	bgt.n	e962 <_svfprintf_r+0xa02>
    e98e:	mov	r6, r8
    e990:	mov	r3, r0
    e992:	mov	r8, r9
    e994:	mov	r9, r1
    e996:	adds	r2, #1
    e998:	add	r3, r4
    e99a:	cmp	r2, #7
    e99c:	str	r3, [sp, #116]	; 0x74
    e99e:	str	r2, [sp, #112]	; 0x70
    e9a0:	str.w	r7, [r9]
    e9a4:	str.w	r4, [r9, #4]
    e9a8:	bgt.w	ee38 <_svfprintf_r+0xed8>
    e9ac:	add.w	r9, r9, #8
    e9b0:	b.n	e428 <_svfprintf_r+0x4c8>
    e9b2:	ldr	r2, [sp, #52]	; 0x34
    e9b4:	str.w	r6, [r9]
    e9b8:	cmp	r2, #1
    e9ba:	ldr	r2, [sp, #112]	; 0x70
    e9bc:	add.w	r3, r3, #1
    e9c0:	add.w	r2, r2, #1
    e9c4:	mov.w	r1, #1
    e9c8:	str	r3, [sp, #116]	; 0x74
    e9ca:	str	r2, [sp, #112]	; 0x70
    e9cc:	str.w	r1, [r9, #4]
    e9d0:	ble.w	edf4 <_svfprintf_r+0xe94>
    e9d4:	cmp	r2, #7
    e9d6:	bgt.w	ee04 <_svfprintf_r+0xea4>
    e9da:	add.w	r9, r9, #8
    e9de:	ldr	r0, [sp, #60]	; 0x3c
    e9e0:	ldr	r1, [sp, #64]	; 0x40
    e9e2:	str.w	r1, [r9]
    e9e6:	adds	r2, #1
    e9e8:	add	r3, r0
    e9ea:	cmp	r2, #7
    e9ec:	str	r3, [sp, #116]	; 0x74
    e9ee:	str	r2, [sp, #112]	; 0x70
    e9f0:	str.w	r0, [r9, #4]
    e9f4:	bgt.w	ee1e <_svfprintf_r+0xebe>
    e9f8:	add.w	r9, r9, #8
    e9fc:	vcmp.f64	d8, #0.0
    ea00:	vmrs	APSR_nzcv, fpscr
    ea04:	ldr	r1, [sp, #52]	; 0x34
    ea06:	beq.w	ebf4 <_svfprintf_r+0xc94>
    ea0a:	subs	r1, #1
    ea0c:	adds	r2, #1
    ea0e:	adds	r6, #1
    ea10:	add	r3, r1
    ea12:	cmp	r2, #7
    ea14:	str.w	r6, [r9]
    ea18:	str	r2, [sp, #112]	; 0x70
    ea1a:	str	r3, [sp, #116]	; 0x74
    ea1c:	str.w	r1, [r9, #4]
    ea20:	bgt.w	ec5e <_svfprintf_r+0xcfe>
    ea24:	add.w	r9, r9, #8
    ea28:	ldr	r0, [sp, #68]	; 0x44
    ea2a:	str.w	r0, [r9, #4]
    ea2e:	adds	r2, #1
    ea30:	add	r3, r0
    ea32:	add	r1, sp, #92	; 0x5c
    ea34:	cmp	r2, #7
    ea36:	str	r3, [sp, #116]	; 0x74
    ea38:	str	r2, [sp, #112]	; 0x70
    ea3a:	str.w	r1, [r9]
    ea3e:	ble.w	e4be <_svfprintf_r+0x55e>
    ea42:	add	r2, sp, #108	; 0x6c
    ea44:	ldr	r1, [sp, #12]
    ea46:	ldr	r0, [sp, #20]
    ea48:	bl	12b7c <__ssprint_r>
    ea4c:	cmp	r0, #0
    ea4e:	bne.w	e14c <_svfprintf_r+0x1ec>
    ea52:	ldr	r3, [sp, #116]	; 0x74
    ea54:	add.w	r9, sp, #160	; 0xa0
    ea58:	b.n	e4c2 <_svfprintf_r+0x562>
    ea5a:	add	r2, sp, #108	; 0x6c
    ea5c:	ldr	r1, [sp, #12]
    ea5e:	ldr	r0, [sp, #20]
    ea60:	bl	12b7c <__ssprint_r>
    ea64:	cmp	r0, #0
    ea66:	beq.w	e55c <_svfprintf_r+0x5fc>
    ea6a:	b.w	e14c <_svfprintf_r+0x1ec>
    ea6e:	ldr	r1, [sp, #36]	; 0x24
    ea70:	cmp.w	r8, #0
    ea74:	ldr	r4, [r1, #0]
    ea76:	strb.w	r3, [sp, #79]	; 0x4f
    ea7a:	add.w	r7, r1, #4
    ea7e:	mov.w	r5, #0
    ea82:	blt.w	f168 <_svfprintf_r+0x1208>
    ea86:	orrs.w	r2, r4, r5
    ea8a:	str	r7, [sp, #36]	; 0x24
    ea8c:	bic.w	fp, fp, #128	; 0x80
    ea90:	mov	r7, r3
    ea92:	bne.w	e2aa <_svfprintf_r+0x34a>
    ea96:	cmp.w	r8, #0
    ea9a:	beq.w	e804 <_svfprintf_r+0x8a4>
    ea9e:	movs	r4, #0
    eaa0:	b.n	e610 <_svfprintf_r+0x6b0>
    eaa2:	add	r2, sp, #108	; 0x6c
    eaa4:	ldr	r1, [sp, #12]
    eaa6:	ldr	r0, [sp, #20]
    eaa8:	bl	12b7c <__ssprint_r>
    eaac:	cmp	r0, #0
    eaae:	bne.w	e14c <_svfprintf_r+0x1ec>
    eab2:	ldr	r3, [sp, #116]	; 0x74
    eab4:	add.w	r9, sp, #160	; 0xa0
    eab8:	b.n	e49c <_svfprintf_r+0x53c>
    eaba:	add	r2, sp, #108	; 0x6c
    eabc:	ldr	r1, [sp, #12]
    eabe:	ldr	r0, [sp, #20]
    eac0:	bl	12b7c <__ssprint_r>
    eac4:	cmp	r0, #0
    eac6:	bne.w	e14c <_svfprintf_r+0x1ec>
    eaca:	ldr	r3, [sp, #116]	; 0x74
    eacc:	add.w	r9, sp, #160	; 0xa0
    ead0:	b.n	e400 <_svfprintf_r+0x4a0>
    ead2:	add	r2, sp, #108	; 0x6c
    ead4:	ldr	r1, [sp, #12]
    ead6:	ldr	r0, [sp, #20]
    ead8:	bl	12b7c <__ssprint_r>
    eadc:	cmp	r0, #0
    eade:	bne.w	e14c <_svfprintf_r+0x1ec>
    eae2:	ldr	r3, [sp, #116]	; 0x74
    eae4:	add.w	r9, sp, #160	; 0xa0
    eae8:	b.n	e420 <_svfprintf_r+0x4c0>
    eaea:	cmp.w	r8, #0
    eaee:	strb.w	r7, [sp, #79]	; 0x4f
    eaf2:	blt.w	efd4 <_svfprintf_r+0x1074>
    eaf6:	orrs.w	r3, r4, r5
    eafa:	bic.w	fp, fp, #128	; 0x80
    eafe:	bne.w	e68a <_svfprintf_r+0x72a>
    eb02:	cmp.w	r8, #0
    eb06:	beq.w	e802 <_svfprintf_r+0x8a2>
    eb0a:	movs	r7, #0
    eb0c:	b.n	e85e <_svfprintf_r+0x8fe>
    eb0e:	ldr	r4, [sp, #84]	; 0x54
    eb10:	cmp	r4, #0
    eb12:	ble.w	efd8 <_svfprintf_r+0x1078>
    eb16:	ldr	r2, [sp, #56]	; 0x38
    eb18:	ldr	r1, [sp, #52]	; 0x34
    eb1a:	cmp	r2, r1
    eb1c:	it	ge
    eb1e:	movge	r2, r1
    eb20:	cmp	r2, #0
    eb22:	mov	r4, r2
    eb24:	ble.n	eb42 <_svfprintf_r+0xbe2>
    eb26:	ldr	r2, [sp, #112]	; 0x70
    eb28:	str.w	r6, [r9]
    eb2c:	adds	r2, #1
    eb2e:	add	r3, r4
    eb30:	cmp	r2, #7
    eb32:	str	r3, [sp, #116]	; 0x74
    eb34:	str.w	r4, [r9, #4]
    eb38:	str	r2, [sp, #112]	; 0x70
    eb3a:	bgt.w	f222 <_svfprintf_r+0x12c2>
    eb3e:	add.w	r9, r9, #8
    eb42:	ldr	r2, [sp, #56]	; 0x38
    eb44:	cmp	r4, #0
    eb46:	it	ge
    eb48:	subge	r2, r2, r4
    eb4a:	cmp	r2, #0
    eb4c:	mov	r4, r2
    eb4e:	ble.w	ed34 <_svfprintf_r+0xdd4>
    eb52:	cmp	r4, #16
    eb54:	ldr	r2, [sp, #112]	; 0x70
    eb56:	ldr	r7, [pc, #772]	; (ee5c <_svfprintf_r+0xefc>)
    eb58:	ble.w	ef8e <_svfprintf_r+0x102e>
    eb5c:	mov	r1, r9
    eb5e:	movs	r5, #16
    eb60:	mov	r9, r6
    eb62:	ldr.w	r8, [sp, #20]
    eb66:	ldr	r6, [sp, #12]
    eb68:	b.n	eb74 <_svfprintf_r+0xc14>
    eb6a:	adds	r1, #8
    eb6c:	subs	r4, #16
    eb6e:	cmp	r4, #16
    eb70:	ble.w	ef8a <_svfprintf_r+0x102a>
    eb74:	adds	r2, #1
    eb76:	adds	r3, #16
    eb78:	cmp	r2, #7
    eb7a:	str	r3, [sp, #116]	; 0x74
    eb7c:	str	r2, [sp, #112]	; 0x70
    eb7e:	str	r7, [r1, #0]
    eb80:	str	r5, [r1, #4]
    eb82:	ble.n	eb6a <_svfprintf_r+0xc0a>
    eb84:	add	r2, sp, #108	; 0x6c
    eb86:	mov	r1, r6
    eb88:	mov	r0, r8
    eb8a:	bl	12b7c <__ssprint_r>
    eb8e:	cmp	r0, #0
    eb90:	bne.w	e14c <_svfprintf_r+0x1ec>
    eb94:	ldr	r3, [sp, #116]	; 0x74
    eb96:	ldr	r2, [sp, #112]	; 0x70
    eb98:	add	r1, sp, #160	; 0xa0
    eb9a:	b.n	eb6c <_svfprintf_r+0xc0c>
    eb9c:	add	r2, sp, #108	; 0x6c
    eb9e:	ldr	r1, [sp, #12]
    eba0:	ldr	r0, [sp, #20]
    eba2:	bl	12b7c <__ssprint_r>
    eba6:	cmp	r0, #0
    eba8:	bne.w	e14c <_svfprintf_r+0x1ec>
    ebac:	ldrb.w	r7, [sp, #79]	; 0x4f
    ebb0:	ldr	r3, [sp, #116]	; 0x74
    ebb2:	add.w	r9, sp, #160	; 0xa0
    ebb6:	b.n	e3e0 <_svfprintf_r+0x480>
    ebb8:	ands.w	r2, fp, #16
    ebbc:	bne.w	ea6e <_svfprintf_r+0xb0e>
    ebc0:	ands.w	r3, fp, #64	; 0x40
    ebc4:	beq.w	ea6e <_svfprintf_r+0xb0e>
    ebc8:	ldr	r1, [sp, #36]	; 0x24
    ebca:	strb.w	r2, [sp, #79]	; 0x4f
    ebce:	mov	r3, r1
    ebd0:	cmp.w	r8, #0
    ebd4:	add.w	r3, r3, #4
    ebd8:	ldrh	r4, [r1, #0]
    ebda:	mov.w	r5, #0
    ebde:	blt.w	f10a <_svfprintf_r+0x11aa>
    ebe2:	orrs.w	r1, r4, r5
    ebe6:	bic.w	fp, fp, #128	; 0x80
    ebea:	str	r3, [sp, #36]	; 0x24
    ebec:	mov	r7, r2
    ebee:	bne.w	e2aa <_svfprintf_r+0x34a>
    ebf2:	b.n	ea96 <_svfprintf_r+0xb36>
    ebf4:	subs	r4, r1, #1
    ebf6:	cmp	r4, #0
    ebf8:	ble.w	ea28 <_svfprintf_r+0xac8>
    ebfc:	cmp	r4, #16
    ebfe:	ldr	r7, [pc, #604]	; (ee5c <_svfprintf_r+0xefc>)
    ec00:	ble.n	ec48 <_svfprintf_r+0xce8>
    ec02:	movs	r5, #16
    ec04:	ldr	r6, [sp, #20]
    ec06:	ldr.w	r8, [sp, #12]
    ec0a:	b.n	ec16 <_svfprintf_r+0xcb6>
    ec0c:	subs	r4, #16
    ec0e:	cmp	r4, #16
    ec10:	add.w	r9, r9, #8
    ec14:	ble.n	ec48 <_svfprintf_r+0xce8>
    ec16:	adds	r2, #1
    ec18:	adds	r3, #16
    ec1a:	cmp	r2, #7
    ec1c:	str	r3, [sp, #116]	; 0x74
    ec1e:	str	r2, [sp, #112]	; 0x70
    ec20:	str.w	r7, [r9]
    ec24:	str.w	r5, [r9, #4]
    ec28:	ble.n	ec0c <_svfprintf_r+0xcac>
    ec2a:	add	r2, sp, #108	; 0x6c
    ec2c:	mov	r1, r8
    ec2e:	mov	r0, r6
    ec30:	bl	12b7c <__ssprint_r>
    ec34:	cmp	r0, #0
    ec36:	bne.w	e14c <_svfprintf_r+0x1ec>
    ec3a:	subs	r4, #16
    ec3c:	cmp	r4, #16
    ec3e:	ldr	r3, [sp, #116]	; 0x74
    ec40:	ldr	r2, [sp, #112]	; 0x70
    ec42:	add.w	r9, sp, #160	; 0xa0
    ec46:	bgt.n	ec16 <_svfprintf_r+0xcb6>
    ec48:	adds	r2, #1
    ec4a:	add	r3, r4
    ec4c:	cmp	r2, #7
    ec4e:	str	r3, [sp, #116]	; 0x74
    ec50:	str	r2, [sp, #112]	; 0x70
    ec52:	str.w	r7, [r9]
    ec56:	str.w	r4, [r9, #4]
    ec5a:	ble.w	ea24 <_svfprintf_r+0xac4>
    ec5e:	add	r2, sp, #108	; 0x6c
    ec60:	ldr	r1, [sp, #12]
    ec62:	ldr	r0, [sp, #20]
    ec64:	bl	12b7c <__ssprint_r>
    ec68:	cmp	r0, #0
    ec6a:	bne.w	e14c <_svfprintf_r+0x1ec>
    ec6e:	ldr	r3, [sp, #116]	; 0x74
    ec70:	ldr	r2, [sp, #112]	; 0x70
    ec72:	add.w	r9, sp, #160	; 0xa0
    ec76:	b.n	ea28 <_svfprintf_r+0xac8>
    ec78:	tst.w	fp, #16
    ec7c:	bne.n	ece6 <_svfprintf_r+0xd86>
    ec7e:	tst.w	fp, #64	; 0x40
    ec82:	beq.n	ece6 <_svfprintf_r+0xd86>
    ec84:	ldr	r1, [sp, #36]	; 0x24
    ec86:	ldrsh.w	r4, [r1]
    ec8a:	adds	r1, #4
    ec8c:	asrs	r5, r4, #31
    ec8e:	mov	r2, r4
    ec90:	mov	r3, r5
    ec92:	str	r1, [sp, #36]	; 0x24
    ec94:	b.w	e288 <_svfprintf_r+0x328>
    ec98:	adds	r2, #1
    ec9a:	add	r3, r4
    ec9c:	cmp	r2, #7
    ec9e:	str	r3, [sp, #116]	; 0x74
    eca0:	str	r2, [sp, #112]	; 0x70
    eca2:	str.w	r7, [r9]
    eca6:	str.w	r4, [r9, #4]
    ecaa:	ble.w	e4be <_svfprintf_r+0x55e>
    ecae:	b.n	ea42 <_svfprintf_r+0xae2>
    ecb0:	ldr	r1, [sp, #36]	; 0x24
    ecb2:	cmp.w	r8, #0
    ecb6:	ldr	r4, [r1, #0]
    ecb8:	strb.w	r3, [sp, #79]	; 0x4f
    ecbc:	add.w	r7, r1, #4
    ecc0:	mov.w	r5, #0
    ecc4:	blt.w	ee52 <_svfprintf_r+0xef2>
    ecc8:	orrs.w	r2, r4, r5
    eccc:	bic.w	fp, fp, #128	; 0x80
    ecd0:	str	r7, [sp, #36]	; 0x24
    ecd2:	beq.w	e83a <_svfprintf_r+0x8da>
    ecd6:	mov	r7, r3
    ecd8:	b.w	e1a4 <_svfprintf_r+0x244>
    ecdc:	ldr	r4, [r3, #0]
    ecde:	adds	r3, #4
    ece0:	str	r3, [sp, #36]	; 0x24
    ece2:	movs	r5, #0
    ece4:	b.n	e654 <_svfprintf_r+0x6f4>
    ece6:	ldr	r2, [sp, #36]	; 0x24
    ece8:	ldr	r4, [r2, #0]
    ecea:	mov	r3, r2
    ecec:	adds	r3, #4
    ecee:	asrs	r5, r4, #31
    ecf0:	mov	r2, r4
    ecf2:	str	r3, [sp, #36]	; 0x24
    ecf4:	cmp	r2, #0
    ecf6:	mov	r3, r5
    ecf8:	sbcs.w	r3, r3, #0
    ecfc:	bge.w	e292 <_svfprintf_r+0x332>
    ed00:	negs	r4, r4
    ed02:	mov.w	r7, #45	; 0x2d
    ed06:	sbc.w	r5, r5, r5, lsl #1
    ed0a:	cmp.w	r8, #0
    ed0e:	strb.w	r7, [sp, #79]	; 0x4f
    ed12:	blt.w	e2aa <_svfprintf_r+0x34a>
    ed16:	bic.w	fp, fp, #128	; 0x80
    ed1a:	b.w	e2aa <_svfprintf_r+0x34a>
    ed1e:	add	r2, sp, #108	; 0x6c
    ed20:	ldr	r1, [sp, #12]
    ed22:	ldr	r0, [sp, #20]
    ed24:	bl	12b7c <__ssprint_r>
    ed28:	cmp	r0, #0
    ed2a:	bne.w	e14c <_svfprintf_r+0x1ec>
    ed2e:	ldr	r3, [sp, #116]	; 0x74
    ed30:	add.w	r9, sp, #160	; 0xa0
    ed34:	ldr	r1, [sp, #56]	; 0x38
    ed36:	ldr	r2, [sp, #84]	; 0x54
    ed38:	add	r1, r6
    ed3a:	mov	r5, r1
    ed3c:	ldr	r1, [sp, #52]	; 0x34
    ed3e:	cmp	r2, r1
    ed40:	blt.n	edd2 <_svfprintf_r+0xe72>
    ed42:	tst.w	fp, #1
    ed46:	bne.n	edd2 <_svfprintf_r+0xe72>
    ed48:	ldr	r0, [sp, #52]	; 0x34
    ed4a:	add	r6, r0
    ed4c:	subs	r4, r6, r5
    ed4e:	subs	r2, r0, r2
    ed50:	cmp	r4, r2
    ed52:	it	ge
    ed54:	movge	r4, r2
    ed56:	cmp	r4, #0
    ed58:	mov	r6, r4
    ed5a:	ble.n	ed78 <_svfprintf_r+0xe18>
    ed5c:	ldr	r1, [sp, #112]	; 0x70
    ed5e:	str.w	r5, [r9]
    ed62:	adds	r1, #1
    ed64:	add	r3, r4
    ed66:	cmp	r1, #7
    ed68:	str	r3, [sp, #116]	; 0x74
    ed6a:	str.w	r4, [r9, #4]
    ed6e:	str	r1, [sp, #112]	; 0x70
    ed70:	bgt.w	f274 <_svfprintf_r+0x1314>
    ed74:	add.w	r9, r9, #8
    ed78:	cmp	r6, #0
    ed7a:	ite	ge
    ed7c:	subge	r4, r2, r6
    ed7e:	movlt	r4, r2
    ed80:	cmp	r4, #0
    ed82:	ble.w	e4c2 <_svfprintf_r+0x562>
    ed86:	cmp	r4, #16
    ed88:	ldr	r2, [sp, #112]	; 0x70
    ed8a:	ldr	r7, [pc, #208]	; (ee5c <_svfprintf_r+0xefc>)
    ed8c:	ble.n	ec98 <_svfprintf_r+0xd38>
    ed8e:	movs	r5, #16
    ed90:	ldr	r6, [sp, #20]
    ed92:	ldr.w	r8, [sp, #12]
    ed96:	b.n	eda4 <_svfprintf_r+0xe44>
    ed98:	add.w	r9, r9, #8
    ed9c:	subs	r4, #16
    ed9e:	cmp	r4, #16
    eda0:	ble.w	ec98 <_svfprintf_r+0xd38>
    eda4:	adds	r2, #1
    eda6:	adds	r3, #16
    eda8:	cmp	r2, #7
    edaa:	str	r3, [sp, #116]	; 0x74
    edac:	str	r2, [sp, #112]	; 0x70
    edae:	str.w	r7, [r9]
    edb2:	str.w	r5, [r9, #4]
    edb6:	ble.n	ed98 <_svfprintf_r+0xe38>
    edb8:	add	r2, sp, #108	; 0x6c
    edba:	mov	r1, r8
    edbc:	mov	r0, r6
    edbe:	bl	12b7c <__ssprint_r>
    edc2:	cmp	r0, #0
    edc4:	bne.w	e14c <_svfprintf_r+0x1ec>
    edc8:	ldr	r3, [sp, #116]	; 0x74
    edca:	ldr	r2, [sp, #112]	; 0x70
    edcc:	add.w	r9, sp, #160	; 0xa0
    edd0:	b.n	ed9c <_svfprintf_r+0xe3c>
    edd2:	ldr	r1, [sp, #112]	; 0x70
    edd4:	ldr	r4, [sp, #60]	; 0x3c
    edd6:	ldr	r0, [sp, #64]	; 0x40
    edd8:	str.w	r0, [r9]
    eddc:	adds	r1, #1
    edde:	add	r3, r4
    ede0:	cmp	r1, #7
    ede2:	str	r3, [sp, #116]	; 0x74
    ede4:	str.w	r4, [r9, #4]
    ede8:	str	r1, [sp, #112]	; 0x70
    edea:	bgt.w	f23a <_svfprintf_r+0x12da>
    edee:	add.w	r9, r9, #8
    edf2:	b.n	ed48 <_svfprintf_r+0xde8>
    edf4:	tst.w	fp, #1
    edf8:	bne.w	e9d4 <_svfprintf_r+0xa74>
    edfc:	cmp	r2, #7
    edfe:	ble.w	ea24 <_svfprintf_r+0xac4>
    ee02:	b.n	ec5e <_svfprintf_r+0xcfe>
    ee04:	add	r2, sp, #108	; 0x6c
    ee06:	ldr	r1, [sp, #12]
    ee08:	ldr	r0, [sp, #20]
    ee0a:	bl	12b7c <__ssprint_r>
    ee0e:	cmp	r0, #0
    ee10:	bne.w	e14c <_svfprintf_r+0x1ec>
    ee14:	ldr	r3, [sp, #116]	; 0x74
    ee16:	ldr	r2, [sp, #112]	; 0x70
    ee18:	add.w	r9, sp, #160	; 0xa0
    ee1c:	b.n	e9de <_svfprintf_r+0xa7e>
    ee1e:	add	r2, sp, #108	; 0x6c
    ee20:	ldr	r1, [sp, #12]
    ee22:	ldr	r0, [sp, #20]
    ee24:	bl	12b7c <__ssprint_r>
    ee28:	cmp	r0, #0
    ee2a:	bne.w	e14c <_svfprintf_r+0x1ec>
    ee2e:	ldr	r3, [sp, #116]	; 0x74
    ee30:	ldr	r2, [sp, #112]	; 0x70
    ee32:	add.w	r9, sp, #160	; 0xa0
    ee36:	b.n	e9fc <_svfprintf_r+0xa9c>
    ee38:	add	r2, sp, #108	; 0x6c
    ee3a:	ldr	r1, [sp, #12]
    ee3c:	ldr	r0, [sp, #20]
    ee3e:	bl	12b7c <__ssprint_r>
    ee42:	cmp	r0, #0
    ee44:	bne.w	e14c <_svfprintf_r+0x1ec>
    ee48:	ldr	r3, [sp, #116]	; 0x74
    ee4a:	add.w	r9, sp, #160	; 0xa0
    ee4e:	b.w	e428 <_svfprintf_r+0x4c8>
    ee52:	str	r7, [sp, #36]	; 0x24
    ee54:	movs	r7, #0
    ee56:	b.w	e1a4 <_svfprintf_r+0x244>
    ee5a:	nop
    ee5c:	.word	0x20001ae0
    ee60:	tst.w	fp, #16
    ee64:	bne.n	ee7e <_svfprintf_r+0xf1e>
    ee66:	tst.w	fp, #64	; 0x40
    ee6a:	beq.n	ee7e <_svfprintf_r+0xf1e>
    ee6c:	ldr	r2, [sp, #36]	; 0x24
    ee6e:	ldr	r3, [r2, #0]
    ee70:	adds	r2, #4
    ee72:	str	r2, [sp, #36]	; 0x24
    ee74:	ldrh.w	r2, [sp, #24]
    ee78:	strh	r2, [r3, #0]
    ee7a:	b.w	dfac <_svfprintf_r+0x4c>
    ee7e:	ldr	r2, [sp, #36]	; 0x24
    ee80:	ldr	r3, [r2, #0]
    ee82:	adds	r2, #4
    ee84:	str	r2, [sp, #36]	; 0x24
    ee86:	ldr	r2, [sp, #24]
    ee88:	str	r2, [r3, #0]
    ee8a:	b.w	dfac <_svfprintf_r+0x4c>
    ee8e:	vcmp.f64	d8, d8
    ee92:	vmrs	APSR_nzcv, fpscr
    ee96:	bvs.w	f3d6 <_svfprintf_r+0x1476>
    ee9a:	ldr	r3, [sp, #48]	; 0x30
    ee9c:	cmp.w	r8, #4294967295
    eea0:	bic.w	r5, r3, #32
    eea4:	beq.w	f2f2 <_svfprintf_r+0x1392>
    eea8:	cmp	r5, #71	; 0x47
    eeaa:	beq.w	f0fa <_svfprintf_r+0x119a>
    eeae:	orr.w	r3, fp, #256	; 0x100
    eeb2:	str	r3, [sp, #40]	; 0x28
    eeb4:	vmov	r3, s17
    eeb8:	cmp	r3, #0
    eeba:	blt.w	f2f8 <_svfprintf_r+0x1398>
    eebe:	vmov.f64	d10, d8
    eec2:	movs	r7, #0
    eec4:	ldr	r3, [sp, #48]	; 0x30
    eec6:	cmp	r3, #102	; 0x66
    eec8:	beq.w	f2d0 <_svfprintf_r+0x1370>
    eecc:	cmp	r3, #70	; 0x46
    eece:	beq.w	f0aa <_svfprintf_r+0x114a>
    eed2:	vmov.f64	d0, d10
    eed6:	cmp	r5, #69	; 0x45
    eed8:	ite	eq
    eeda:	addeq.w	r4, r8, #1
    eede:	movne	r4, r8
    eee0:	add	r2, sp, #100	; 0x64
    eee2:	add	r3, sp, #88	; 0x58
    eee4:	str	r2, [sp, #4]
    eee6:	str	r3, [sp, #0]
    eee8:	mov	r2, r4
    eeea:	add	r3, sp, #84	; 0x54
    eeec:	movs	r1, #2
    eeee:	ldr	r0, [sp, #20]
    eef0:	bl	105c8 <_dtoa_r>
    eef4:	ldr	r3, [sp, #48]	; 0x30
    eef6:	cmp	r3, #103	; 0x67
    eef8:	mov	r6, r0
    eefa:	bne.w	f31a <_svfprintf_r+0x13ba>
    eefe:	tst.w	fp, #1
    ef02:	beq.w	f3d2 <_svfprintf_r+0x1472>
    ef06:	adds	r1, r6, r4
    ef08:	vcmp.f64	d10, #0.0
    ef0c:	vmrs	APSR_nzcv, fpscr
    ef10:	beq.w	f21e <_svfprintf_r+0x12be>
    ef14:	ldr	r3, [sp, #100]	; 0x64
    ef16:	cmp	r1, r3
    ef18:	bls.n	ef28 <_svfprintf_r+0xfc8>
    ef1a:	movs	r0, #48	; 0x30
    ef1c:	adds	r2, r3, #1
    ef1e:	str	r2, [sp, #100]	; 0x64
    ef20:	strb	r0, [r3, #0]
    ef22:	ldr	r3, [sp, #100]	; 0x64
    ef24:	cmp	r1, r3
    ef26:	bhi.n	ef1c <_svfprintf_r+0xfbc>
    ef28:	subs	r3, r3, r6
    ef2a:	cmp	r5, #71	; 0x47
    ef2c:	str	r3, [sp, #52]	; 0x34
    ef2e:	beq.w	f170 <_svfprintf_r+0x1210>
    ef32:	ldr	r3, [sp, #48]	; 0x30
    ef34:	cmp	r3, #101	; 0x65
    ef36:	ble.w	f338 <_svfprintf_r+0x13d8>
    ef3a:	ldr	r3, [sp, #48]	; 0x30
    ef3c:	cmp	r3, #102	; 0x66
    ef3e:	ldr	r3, [sp, #84]	; 0x54
    ef40:	beq.w	f33c <_svfprintf_r+0x13dc>
    ef44:	str	r3, [sp, #56]	; 0x38
    ef46:	ldr	r2, [sp, #56]	; 0x38
    ef48:	ldr	r1, [sp, #52]	; 0x34
    ef4a:	cmp	r2, r1
    ef4c:	blt.w	f300 <_svfprintf_r+0x13a0>
    ef50:	tst.w	fp, #1
    ef54:	bne.w	f3c0 <_svfprintf_r+0x1460>
    ef58:	bic.w	r3, r2, r2, asr #31
    ef5c:	str	r2, [sp, #32]
    ef5e:	movs	r2, #103	; 0x67
    ef60:	str	r2, [sp, #48]	; 0x30
    ef62:	cmp	r7, #0
    ef64:	bne.w	f154 <_svfprintf_r+0x11f4>
    ef68:	mov	r8, r7
    ef6a:	str	r3, [sp, #16]
    ef6c:	ldr.w	fp, [sp, #40]	; 0x28
    ef70:	ldrb.w	r7, [sp, #79]	; 0x4f
    ef74:	b.w	e344 <_svfprintf_r+0x3e4>
    ef78:	bic.w	r7, r7, #7
    ef7c:	add.w	r3, r7, #8
    ef80:	vldr	d8, [r7]
    ef84:	str	r3, [sp, #36]	; 0x24
    ef86:	b.w	e306 <_svfprintf_r+0x3a6>
    ef8a:	mov	r6, r9
    ef8c:	mov	r9, r1
    ef8e:	adds	r2, #1
    ef90:	add	r3, r4
    ef92:	cmp	r2, #7
    ef94:	str	r3, [sp, #116]	; 0x74
    ef96:	str	r2, [sp, #112]	; 0x70
    ef98:	str.w	r7, [r9]
    ef9c:	str.w	r4, [r9, #4]
    efa0:	bgt.w	ed1e <_svfprintf_r+0xdbe>
    efa4:	add.w	r9, r9, #8
    efa8:	b.n	ed34 <_svfprintf_r+0xdd4>
    efaa:	movs	r7, #0
    efac:	cmp	r8, r7
    efae:	strb.w	r7, [sp, #79]	; 0x4f
    efb2:	blt.w	e85e <_svfprintf_r+0x8fe>
    efb6:	bic.w	fp, fp, #128	; 0x80
    efba:	b.n	e7fa <_svfprintf_r+0x89a>
    efbc:	add	r2, sp, #108	; 0x6c
    efbe:	ldr	r1, [sp, #12]
    efc0:	ldr	r0, [sp, #20]
    efc2:	bl	12b7c <__ssprint_r>
    efc6:	cmp	r0, #0
    efc8:	bne.w	e14c <_svfprintf_r+0x1ec>
    efcc:	ldr	r3, [sp, #116]	; 0x74
    efce:	add.w	r9, sp, #160	; 0xa0
    efd2:	b.n	e89c <_svfprintf_r+0x93c>
    efd4:	ldr	r7, [sp, #36]	; 0x24
    efd6:	b.n	e850 <_svfprintf_r+0x8f0>
    efd8:	ldr	r2, [sp, #112]	; 0x70
    efda:	ldr	r1, [pc, #740]	; (f2c0 <_svfprintf_r+0x1360>)
    efdc:	str.w	r1, [r9]
    efe0:	adds	r2, #1
    efe2:	adds	r3, #1
    efe4:	movs	r1, #1
    efe6:	cmp	r2, #7
    efe8:	str	r3, [sp, #116]	; 0x74
    efea:	str	r2, [sp, #112]	; 0x70
    efec:	str.w	r1, [r9, #4]
    eff0:	bgt.n	f0e0 <_svfprintf_r+0x1180>
    eff2:	add.w	r9, r9, #8
    eff6:	cbnz	r4, f004 <_svfprintf_r+0x10a4>
    eff8:	ldr	r2, [sp, #52]	; 0x34
    effa:	cbnz	r2, f004 <_svfprintf_r+0x10a4>
    effc:	tst.w	fp, #1
    f000:	beq.w	e4c2 <_svfprintf_r+0x562>
    f004:	ldr	r2, [sp, #112]	; 0x70
    f006:	ldr	r0, [sp, #60]	; 0x3c
    f008:	ldr	r1, [sp, #64]	; 0x40
    f00a:	str.w	r1, [r9]
    f00e:	adds	r2, #1
    f010:	add	r3, r0
    f012:	cmp	r2, #7
    f014:	str	r3, [sp, #116]	; 0x74
    f016:	str.w	r0, [r9, #4]
    f01a:	str	r2, [sp, #112]	; 0x70
    f01c:	bgt.w	f38c <_svfprintf_r+0x142c>
    f020:	add.w	r9, r9, #8
    f024:	negs	r4, r4
    f026:	cmp	r4, #0
    f028:	ble.w	f13a <_svfprintf_r+0x11da>
    f02c:	cmp	r4, #16
    f02e:	ldr	r7, [pc, #660]	; (f2c4 <_svfprintf_r+0x1364>)
    f030:	ble.w	f258 <_svfprintf_r+0x12f8>
    f034:	mov	r1, r9
    f036:	movs	r5, #16
    f038:	mov	r9, r6
    f03a:	ldr.w	r8, [sp, #20]
    f03e:	ldr	r6, [sp, #12]
    f040:	b.n	f04c <_svfprintf_r+0x10ec>
    f042:	adds	r1, #8
    f044:	subs	r4, #16
    f046:	cmp	r4, #16
    f048:	ble.w	f254 <_svfprintf_r+0x12f4>
    f04c:	adds	r2, #1
    f04e:	adds	r3, #16
    f050:	cmp	r2, #7
    f052:	str	r3, [sp, #116]	; 0x74
    f054:	str	r2, [sp, #112]	; 0x70
    f056:	str	r7, [r1, #0]
    f058:	str	r5, [r1, #4]
    f05a:	ble.n	f042 <_svfprintf_r+0x10e2>
    f05c:	add	r2, sp, #108	; 0x6c
    f05e:	mov	r1, r6
    f060:	mov	r0, r8
    f062:	bl	12b7c <__ssprint_r>
    f066:	cmp	r0, #0
    f068:	bne.w	e14c <_svfprintf_r+0x1ec>
    f06c:	ldr	r3, [sp, #116]	; 0x74
    f06e:	ldr	r2, [sp, #112]	; 0x70
    f070:	add	r1, sp, #160	; 0xa0
    f072:	b.n	f044 <_svfprintf_r+0x10e4>
    f074:	add	r2, sp, #108	; 0x6c
    f076:	ldr	r1, [sp, #12]
    f078:	ldr	r0, [sp, #20]
    f07a:	bl	12b7c <__ssprint_r>
    f07e:	cmp	r0, #0
    f080:	bne.w	e14c <_svfprintf_r+0x1ec>
    f084:	ldr	r3, [sp, #116]	; 0x74
    f086:	add.w	r9, sp, #160	; 0xa0
    f08a:	b.n	e8cc <_svfprintf_r+0x96c>
    f08c:	movs	r1, #64	; 0x40
    f08e:	ldr	r0, [sp, #20]
    f090:	bl	c0f8 <_malloc_r>
    f094:	ldr	r2, [sp, #12]
    f096:	str	r0, [r2, #0]
    f098:	str	r0, [r2, #16]
    f09a:	cmp	r0, #0
    f09c:	beq.w	f47a <_svfprintf_r+0x151a>
    f0a0:	ldr	r2, [sp, #12]
    f0a2:	movs	r3, #64	; 0x40
    f0a4:	str	r3, [r2, #20]
    f0a6:	b.w	df92 <_svfprintf_r+0x32>
    f0aa:	add	r2, sp, #100	; 0x64
    f0ac:	add	r3, sp, #88	; 0x58
    f0ae:	str	r2, [sp, #4]
    f0b0:	str	r3, [sp, #0]
    f0b2:	mov	r2, r8
    f0b4:	add	r3, sp, #84	; 0x54
    f0b6:	movs	r1, #3
    f0b8:	vmov.f64	d0, d10
    f0bc:	ldr	r0, [sp, #20]
    f0be:	bl	105c8 <_dtoa_r>
    f0c2:	mov	r4, r8
    f0c4:	mov	r6, r0
    f0c6:	ldr	r3, [sp, #48]	; 0x30
    f0c8:	cmp	r3, #70	; 0x46
    f0ca:	add.w	r1, r6, r4
    f0ce:	bne.w	ef08 <_svfprintf_r+0xfa8>
    f0d2:	ldrb	r3, [r6, #0]
    f0d4:	cmp	r3, #48	; 0x30
    f0d6:	beq.w	f3f4 <_svfprintf_r+0x1494>
    f0da:	ldr	r4, [sp, #84]	; 0x54
    f0dc:	add	r1, r4
    f0de:	b.n	ef08 <_svfprintf_r+0xfa8>
    f0e0:	add	r2, sp, #108	; 0x6c
    f0e2:	ldr	r1, [sp, #12]
    f0e4:	ldr	r0, [sp, #20]
    f0e6:	bl	12b7c <__ssprint_r>
    f0ea:	cmp	r0, #0
    f0ec:	bne.w	e14c <_svfprintf_r+0x1ec>
    f0f0:	ldr	r4, [sp, #84]	; 0x54
    f0f2:	ldr	r3, [sp, #116]	; 0x74
    f0f4:	add.w	r9, sp, #160	; 0xa0
    f0f8:	b.n	eff6 <_svfprintf_r+0x1096>
    f0fa:	cmp.w	r8, #0
    f0fe:	it	eq
    f100:	moveq.w	r8, #1
    f104:	b.n	eeae <_svfprintf_r+0xf4e>
    f106:	str	r3, [sp, #36]	; 0x24
    f108:	b.n	ee54 <_svfprintf_r+0xef4>
    f10a:	str	r3, [sp, #36]	; 0x24
    f10c:	mov	r7, r2
    f10e:	b.w	e608 <_svfprintf_r+0x6a8>
    f112:	mov	r0, r6
    f114:	bl	cdc0 <strlen>
    f118:	mov	r8, r4
    f11a:	mov	r3, r0
    f11c:	str	r0, [sp, #32]
    f11e:	b.w	e7e4 <_svfprintf_r+0x884>
    f122:	add	r2, sp, #108	; 0x6c
    f124:	ldr	r1, [sp, #12]
    f126:	ldr	r0, [sp, #20]
    f128:	bl	12b7c <__ssprint_r>
    f12c:	cmp	r0, #0
    f12e:	bne.w	e14c <_svfprintf_r+0x1ec>
    f132:	ldr	r3, [sp, #116]	; 0x74
    f134:	ldr	r2, [sp, #112]	; 0x70
    f136:	add.w	r9, sp, #160	; 0xa0
    f13a:	ldr	r0, [sp, #52]	; 0x34
    f13c:	str.w	r6, [r9]
    f140:	adds	r2, #1
    f142:	add	r3, r0
    f144:	cmp	r2, #7
    f146:	str	r3, [sp, #116]	; 0x74
    f148:	str	r2, [sp, #112]	; 0x70
    f14a:	str.w	r0, [r9, #4]
    f14e:	ble.w	e4be <_svfprintf_r+0x55e>
    f152:	b.n	ea42 <_svfprintf_r+0xae2>
    f154:	movs	r7, #45	; 0x2d
    f156:	str	r3, [sp, #16]
    f158:	ldr.w	fp, [sp, #40]	; 0x28
    f15c:	strb.w	r7, [sp, #79]	; 0x4f
    f160:	mov.w	r8, #0
    f164:	b.w	e346 <_svfprintf_r+0x3e6>
    f168:	str	r7, [sp, #36]	; 0x24
    f16a:	mov	r7, r3
    f16c:	b.w	e608 <_svfprintf_r+0x6a8>
    f170:	ldr	r3, [sp, #84]	; 0x54
    f172:	adds	r2, r3, #3
    f174:	blt.n	f17c <_svfprintf_r+0x121c>
    f176:	cmp	r8, r3
    f178:	bge.w	ef44 <_svfprintf_r+0xfe4>
    f17c:	ldr	r2, [sp, #48]	; 0x30
    f17e:	subs	r2, #2
    f180:	str	r2, [sp, #48]	; 0x30
    f182:	subs	r3, #1
    f184:	cmp	r3, #0
    f186:	ldrb.w	r2, [sp, #48]	; 0x30
    f18a:	str	r3, [sp, #84]	; 0x54
    f18c:	it	lt
    f18e:	neglt	r3, r3
    f190:	strb.w	r2, [sp, #92]	; 0x5c
    f194:	ite	lt
    f196:	movlt	r2, #45	; 0x2d
    f198:	movge	r2, #43	; 0x2b
    f19a:	cmp	r3, #9
    f19c:	strb.w	r2, [sp, #93]	; 0x5d
    f1a0:	ble.w	f3b0 <_svfprintf_r+0x1450>
    f1a4:	add.w	r0, sp, #107	; 0x6b
    f1a8:	mov	r4, r0
    f1aa:	ldr	r2, [pc, #284]	; (f2c8 <_svfprintf_r+0x1368>)
    f1ac:	smull	r2, r1, r2, r3
    f1b0:	asrs	r2, r3, #31
    f1b2:	rsb	r2, r2, r1, asr #2
    f1b6:	add.w	r1, r2, r2, lsl #2
    f1ba:	sub.w	r3, r3, r1, lsl #1
    f1be:	add.w	r1, r3, #48	; 0x30
    f1c2:	cmp	r2, #9
    f1c4:	mov	r3, r2
    f1c6:	strb.w	r1, [r4, #-1]!
    f1ca:	bgt.n	f1aa <_svfprintf_r+0x124a>
    f1cc:	mov	r1, r4
    f1ce:	adds	r3, #48	; 0x30
    f1d0:	uxtb	r2, r3
    f1d2:	strb.w	r2, [r1, #-1]!
    f1d6:	cmp	r0, r1
    f1d8:	bls.w	f4a0 <_svfprintf_r+0x1540>
    f1dc:	add.w	r1, sp, #94	; 0x5e
    f1e0:	mov	r3, r4
    f1e2:	b.n	f1e8 <_svfprintf_r+0x1288>
    f1e4:	ldrb.w	r2, [r3], #1
    f1e8:	strb.w	r2, [r1], #1
    f1ec:	cmp	r0, r3
    f1ee:	bne.n	f1e4 <_svfprintf_r+0x1284>
    f1f0:	adds	r3, r0, #1
    f1f2:	subs	r3, r3, r4
    f1f4:	add.w	r2, sp, #94	; 0x5e
    f1f8:	add	r3, r2
    f1fa:	add	r2, sp, #92	; 0x5c
    f1fc:	subs	r3, r3, r2
    f1fe:	ldr	r2, [sp, #52]	; 0x34
    f200:	str	r3, [sp, #68]	; 0x44
    f202:	cmp	r2, #1
    f204:	add	r3, r2
    f206:	str	r3, [sp, #32]
    f208:	ble.w	f40a <_svfprintf_r+0x14aa>
    f20c:	ldr	r3, [sp, #32]
    f20e:	ldr	r2, [sp, #60]	; 0x3c
    f210:	add	r3, r2
    f212:	movs	r2, #0
    f214:	str	r3, [sp, #32]
    f216:	str	r2, [sp, #56]	; 0x38
    f218:	bic.w	r3, r3, r3, asr #31
    f21c:	b.n	ef62 <_svfprintf_r+0x1002>
    f21e:	mov	r3, r1
    f220:	b.n	ef28 <_svfprintf_r+0xfc8>
    f222:	add	r2, sp, #108	; 0x6c
    f224:	ldr	r1, [sp, #12]
    f226:	ldr	r0, [sp, #20]
    f228:	bl	12b7c <__ssprint_r>
    f22c:	cmp	r0, #0
    f22e:	bne.w	e14c <_svfprintf_r+0x1ec>
    f232:	ldr	r3, [sp, #116]	; 0x74
    f234:	add.w	r9, sp, #160	; 0xa0
    f238:	b.n	eb42 <_svfprintf_r+0xbe2>
    f23a:	add	r2, sp, #108	; 0x6c
    f23c:	ldr	r1, [sp, #12]
    f23e:	ldr	r0, [sp, #20]
    f240:	bl	12b7c <__ssprint_r>
    f244:	cmp	r0, #0
    f246:	bne.w	e14c <_svfprintf_r+0x1ec>
    f24a:	ldr	r2, [sp, #84]	; 0x54
    f24c:	ldr	r3, [sp, #116]	; 0x74
    f24e:	add.w	r9, sp, #160	; 0xa0
    f252:	b.n	ed48 <_svfprintf_r+0xde8>
    f254:	mov	r6, r9
    f256:	mov	r9, r1
    f258:	adds	r2, #1
    f25a:	add	r3, r4
    f25c:	cmp	r2, #7
    f25e:	str	r3, [sp, #116]	; 0x74
    f260:	str	r2, [sp, #112]	; 0x70
    f262:	str.w	r7, [r9]
    f266:	str.w	r4, [r9, #4]
    f26a:	bgt.w	f122 <_svfprintf_r+0x11c2>
    f26e:	add.w	r9, r9, #8
    f272:	b.n	f13a <_svfprintf_r+0x11da>
    f274:	add	r2, sp, #108	; 0x6c
    f276:	ldr	r1, [sp, #12]
    f278:	ldr	r0, [sp, #20]
    f27a:	bl	12b7c <__ssprint_r>
    f27e:	cmp	r0, #0
    f280:	bne.w	e14c <_svfprintf_r+0x1ec>
    f284:	ldr	r2, [sp, #84]	; 0x54
    f286:	ldr	r1, [sp, #52]	; 0x34
    f288:	ldr	r3, [sp, #116]	; 0x74
    f28a:	subs	r2, r1, r2
    f28c:	add.w	r9, sp, #160	; 0xa0
    f290:	b.n	ed78 <_svfprintf_r+0xe18>
    f292:	cmp	r5, #6
    f294:	mov	r3, r5
    f296:	it	cs
    f298:	movcs	r3, #6
    f29a:	str	r3, [sp, #32]
    f29c:	bic.w	r3, r3, r3, asr #31
    f2a0:	mov	r8, r6
    f2a2:	str	r7, [sp, #36]	; 0x24
    f2a4:	str	r6, [sp, #56]	; 0x38
    f2a6:	mov	r7, r6
    f2a8:	str	r3, [sp, #16]
    f2aa:	ldr	r6, [pc, #32]	; (f2cc <_svfprintf_r+0x136c>)
    f2ac:	b.w	e344 <_svfprintf_r+0x3e4>
    f2b0:	mov	fp, r3
    f2b2:	b.w	e68a <_svfprintf_r+0x72a>
    f2b6:	movs	r7, #45	; 0x2d
    f2b8:	strb.w	r7, [sp, #79]	; 0x4f
    f2bc:	b.w	e326 <_svfprintf_r+0x3c6>
    f2c0:	.word	0x20001a40
    f2c4:	.word	0x20001ae0
    f2c8:	.word	0x66666667
    f2cc:	.word	0x20001a38
    f2d0:	add	r2, sp, #100	; 0x64
    f2d2:	add	r3, sp, #88	; 0x58
    f2d4:	str	r2, [sp, #4]
    f2d6:	str	r3, [sp, #0]
    f2d8:	movs	r1, #3
    f2da:	add	r3, sp, #84	; 0x54
    f2dc:	mov	r2, r8
    f2de:	vmov.f64	d0, d10
    f2e2:	ldr	r0, [sp, #20]
    f2e4:	bl	105c8 <_dtoa_r>
    f2e8:	mov	r4, r8
    f2ea:	mov	r6, r0
    f2ec:	add.w	r1, r0, r8
    f2f0:	b.n	f0d2 <_svfprintf_r+0x1172>
    f2f2:	mov.w	r8, #6
    f2f6:	b.n	eeae <_svfprintf_r+0xf4e>
    f2f8:	vneg.f64	d10, d8
    f2fc:	movs	r7, #45	; 0x2d
    f2fe:	b.n	eec4 <_svfprintf_r+0xf64>
    f300:	ldr	r2, [sp, #60]	; 0x3c
    f302:	ldr	r3, [sp, #52]	; 0x34
    f304:	add	r3, r2
    f306:	ldr	r2, [sp, #56]	; 0x38
    f308:	str	r3, [sp, #32]
    f30a:	cmp	r2, #0
    f30c:	ble.w	f41c <_svfprintf_r+0x14bc>
    f310:	movs	r2, #103	; 0x67
    f312:	bic.w	r3, r3, r3, asr #31
    f316:	str	r2, [sp, #48]	; 0x30
    f318:	b.n	ef62 <_svfprintf_r+0x1002>
    f31a:	ldr	r3, [sp, #48]	; 0x30
    f31c:	cmp	r3, #71	; 0x47
    f31e:	bne.w	ef06 <_svfprintf_r+0xfa6>
    f322:	tst.w	fp, #1
    f326:	bne.w	f0c6 <_svfprintf_r+0x1166>
    f32a:	ldr	r3, [sp, #100]	; 0x64
    f32c:	cmp	r5, #71	; 0x47
    f32e:	sub.w	r3, r3, r6
    f332:	str	r3, [sp, #52]	; 0x34
    f334:	beq.w	f170 <_svfprintf_r+0x1210>
    f338:	ldr	r3, [sp, #84]	; 0x54
    f33a:	b.n	f182 <_svfprintf_r+0x1222>
    f33c:	cmp	r3, #0
    f33e:	mov	r2, r3
    f340:	str	r3, [sp, #56]	; 0x38
    f342:	ble.n	f42c <_svfprintf_r+0x14cc>
    f344:	cmp.w	r8, #0
    f348:	bne.n	f3e2 <_svfprintf_r+0x1482>
    f34a:	tst.w	fp, #1
    f34e:	bne.n	f3e2 <_svfprintf_r+0x1482>
    f350:	bic.w	r3, r3, r3, asr #31
    f354:	str	r2, [sp, #32]
    f356:	b.n	ef62 <_svfprintf_r+0x1002>
    f358:	tst.w	fp, #1
    f35c:	mov	r7, r8
    f35e:	beq.n	f36c <_svfprintf_r+0x140c>
    f360:	add	r6, sp, #224	; 0xe0
    f362:	movs	r3, #48	; 0x30
    f364:	strb.w	r3, [r6, #-65]!
    f368:	b.w	e618 <_svfprintf_r+0x6b8>
    f36c:	str.w	r8, [sp, #32]
    f370:	add	r6, sp, #160	; 0xa0
    f372:	b.w	e61e <_svfprintf_r+0x6be>
    f376:	bic.w	r3, r5, r5, asr #31
    f37a:	str	r7, [sp, #36]	; 0x24
    f37c:	str	r3, [sp, #16]
    f37e:	str	r5, [sp, #32]
    f380:	mov	r8, r0
    f382:	str	r0, [sp, #56]	; 0x38
    f384:	ldrb.w	r7, [sp, #79]	; 0x4f
    f388:	b.w	e344 <_svfprintf_r+0x3e4>
    f38c:	add	r2, sp, #108	; 0x6c
    f38e:	ldr	r1, [sp, #12]
    f390:	ldr	r0, [sp, #20]
    f392:	bl	12b7c <__ssprint_r>
    f396:	cmp	r0, #0
    f398:	bne.w	e14c <_svfprintf_r+0x1ec>
    f39c:	ldr	r4, [sp, #84]	; 0x54
    f39e:	ldr	r3, [sp, #116]	; 0x74
    f3a0:	ldr	r2, [sp, #112]	; 0x70
    f3a2:	add.w	r9, sp, #160	; 0xa0
    f3a6:	b.n	f024 <_svfprintf_r+0x10c4>
    f3a8:	mov	sl, r4
    f3aa:	movs	r5, #0
    f3ac:	b.w	e016 <_svfprintf_r+0xb6>
    f3b0:	adds	r3, #48	; 0x30
    f3b2:	movs	r2, #48	; 0x30
    f3b4:	strb.w	r3, [sp, #95]	; 0x5f
    f3b8:	strb.w	r2, [sp, #94]	; 0x5e
    f3bc:	add	r3, sp, #96	; 0x60
    f3be:	b.n	f1fa <_svfprintf_r+0x129a>
    f3c0:	ldr	r2, [sp, #60]	; 0x3c
    f3c2:	ldr	r3, [sp, #56]	; 0x38
    f3c4:	add	r3, r2
    f3c6:	movs	r2, #103	; 0x67
    f3c8:	str	r3, [sp, #32]
    f3ca:	str	r2, [sp, #48]	; 0x30
    f3cc:	bic.w	r3, r3, r3, asr #31
    f3d0:	b.n	ef62 <_svfprintf_r+0x1002>
    f3d2:	ldr	r3, [sp, #100]	; 0x64
    f3d4:	b.n	ef28 <_svfprintf_r+0xfc8>
    f3d6:	ldr	r6, [pc, #240]	; (f4c8 <_svfprintf_r+0x1568>)
    f3d8:	ldr	r3, [pc, #240]	; (f4cc <_svfprintf_r+0x156c>)
    f3da:	ldrb.w	r7, [sp, #79]	; 0x4f
    f3de:	b.w	e32a <_svfprintf_r+0x3ca>
    f3e2:	ldr	r3, [sp, #56]	; 0x38
    f3e4:	ldr	r2, [sp, #60]	; 0x3c
    f3e6:	adds	r5, r3, r2
    f3e8:	add.w	r3, r5, r8
    f3ec:	str	r3, [sp, #32]
    f3ee:	bic.w	r3, r3, r3, asr #31
    f3f2:	b.n	ef62 <_svfprintf_r+0x1002>
    f3f4:	vcmp.f64	d10, #0.0
    f3f8:	vmrs	APSR_nzcv, fpscr
    f3fc:	beq.w	f0da <_svfprintf_r+0x117a>
    f400:	rsb	r4, r4, #1
    f404:	str	r4, [sp, #84]	; 0x54
    f406:	add	r1, r4
    f408:	b.n	ef08 <_svfprintf_r+0xfa8>
    f40a:	ands.w	r3, fp, #1
    f40e:	bne.w	f20c <_svfprintf_r+0x12ac>
    f412:	str	r3, [sp, #56]	; 0x38
    f414:	ldr	r3, [sp, #32]
    f416:	bic.w	r3, r3, r3, asr #31
    f41a:	b.n	ef62 <_svfprintf_r+0x1002>
    f41c:	ldr	r3, [sp, #56]	; 0x38
    f41e:	ldr	r2, [sp, #32]
    f420:	rsb	r3, r3, #1
    f424:	add	r2, r3
    f426:	mov	r3, r2
    f428:	str	r2, [sp, #32]
    f42a:	b.n	f310 <_svfprintf_r+0x13b0>
    f42c:	cmp.w	r8, #0
    f430:	bne.n	f438 <_svfprintf_r+0x14d8>
    f432:	tst.w	fp, #1
    f436:	beq.n	f448 <_svfprintf_r+0x14e8>
    f438:	ldr	r3, [sp, #60]	; 0x3c
    f43a:	adds	r5, r3, #1
    f43c:	add.w	r3, r5, r8
    f440:	str	r3, [sp, #32]
    f442:	bic.w	r3, r3, r3, asr #31
    f446:	b.n	ef62 <_svfprintf_r+0x1002>
    f448:	movs	r3, #1
    f44a:	str	r3, [sp, #32]
    f44c:	b.n	ef62 <_svfprintf_r+0x1002>
    f44e:	ldr	r0, [sp, #36]	; 0x24
    f450:	ldrb.w	r3, [sl, #1]
    f454:	ldr	r5, [r0, #0]
    f456:	adds	r0, #4
    f458:	cmp	r5, #0
    f45a:	str	r0, [sp, #36]	; 0x24
    f45c:	mov	sl, r4
    f45e:	bge.w	e012 <_svfprintf_r+0xb2>
    f462:	mov.w	r5, #4294967295
    f466:	b.w	e012 <_svfprintf_r+0xb2>
    f46a:	strb.w	r1, [sp, #79]	; 0x4f
    f46e:	b.w	e78c <_svfprintf_r+0x82c>
    f472:	strb.w	r1, [sp, #79]	; 0x4f
    f476:	b.w	e818 <_svfprintf_r+0x8b8>
    f47a:	ldr	r2, [sp, #20]
    f47c:	movs	r3, #12
    f47e:	str	r3, [r2, #0]
    f480:	mov.w	r0, #4294967295
    f484:	b.w	e15e <_svfprintf_r+0x1fe>
    f488:	strb.w	r1, [sp, #79]	; 0x4f
    f48c:	b.w	e638 <_svfprintf_r+0x6d8>
    f490:	strb.w	r1, [sp, #79]	; 0x4f
    f494:	b.w	e5de <_svfprintf_r+0x67e>
    f498:	strb.w	r1, [sp, #79]	; 0x4f
    f49c:	b.w	e744 <_svfprintf_r+0x7e4>
    f4a0:	add.w	r3, sp, #94	; 0x5e
    f4a4:	b.n	f1fa <_svfprintf_r+0x129a>
    f4a6:	strb.w	r1, [sp, #79]	; 0x4f
    f4aa:	b.w	e172 <_svfprintf_r+0x212>
    f4ae:	strb.w	r1, [sp, #79]	; 0x4f
    f4b2:	b.w	e57a <_svfprintf_r+0x61a>
    f4b6:	strb.w	r1, [sp, #79]	; 0x4f
    f4ba:	b.w	e2ea <_svfprintf_r+0x38a>
    f4be:	strb.w	r1, [sp, #79]	; 0x4f
    f4c2:	b.w	e266 <_svfprintf_r+0x306>
    f4c6:	nop
    f4c8:	.word	0x200019e0
    f4cc:	.word	0x20001a0c

0000f4d0 <__ssvfscanf_r>:
    f4d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f4d4:	mov	fp, r1
    f4d6:	ldrsh.w	r1, [r1, #12]
    f4da:	sub.w	sp, sp, #684	; 0x2ac
    f4de:	mov	sl, r0
    f4e0:	lsls	r0, r1, #18
    f4e2:	mov	r4, r2
    f4e4:	str	r3, [sp, #16]
    f4e6:	bmi.n	f4fc <__ssvfscanf_r+0x2c>
    f4e8:	ldr.w	r3, [fp, #100]	; 0x64
    f4ec:	orr.w	r1, r1, #8192	; 0x2000
    f4f0:	bic.w	r3, r3, #8192	; 0x2000
    f4f4:	strh.w	r1, [fp, #12]
    f4f8:	str.w	r3, [fp, #100]	; 0x64
    f4fc:	mov	r6, r4
    f4fe:	movs	r3, #0
    f500:	str	r3, [sp, #24]
    f502:	str	r3, [sp, #12]
    f504:	mov	r7, r3
    f506:	str	r3, [sp, #20]
    f508:	ldrb.w	r3, [r6], #1
    f50c:	str	r3, [sp, #60]	; 0x3c
    f50e:	cbz	r3, f56c <__ssvfscanf_r+0x9c>
    f510:	bl	c0c4 <__locale_ctype_ptr>
    f514:	ldr	r2, [sp, #60]	; 0x3c
    f516:	add	r0, r2
    f518:	ldrb	r3, [r0, #1]
    f51a:	and.w	r3, r3, #8
    f51e:	and.w	r5, r3, #255	; 0xff
    f522:	cbz	r3, f576 <__ssvfscanf_r+0xa6>
    f524:	ldr.w	r3, [fp, #4]
    f528:	b.n	f54e <__ssvfscanf_r+0x7e>
    f52a:	bl	c0c4 <__locale_ctype_ptr>
    f52e:	ldr.w	r3, [fp]
    f532:	ldrb	r2, [r3, #0]
    f534:	add	r0, r2
    f536:	adds	r3, #1
    f538:	ldrb	r2, [r0, #1]
    f53a:	lsls	r1, r2, #28
    f53c:	bpl.n	f55e <__ssvfscanf_r+0x8e>
    f53e:	ldr.w	r2, [fp, #4]
    f542:	str.w	r3, [fp]
    f546:	subs	r3, r2, #1
    f548:	adds	r7, #1
    f54a:	str.w	r3, [fp, #4]
    f54e:	cmp	r3, #0
    f550:	bgt.n	f52a <__ssvfscanf_r+0x5a>
    f552:	mov	r1, fp
    f554:	mov	r0, sl
    f556:	bl	12d00 <__ssrefill_r>
    f55a:	cmp	r0, #0
    f55c:	beq.n	f52a <__ssvfscanf_r+0x5a>
    f55e:	mov	r4, r6
    f560:	mov	r6, r4
    f562:	ldrb.w	r3, [r6], #1
    f566:	str	r3, [sp, #60]	; 0x3c
    f568:	cmp	r3, #0
    f56a:	bne.n	f510 <__ssvfscanf_r+0x40>
    f56c:	ldr	r0, [sp, #20]
    f56e:	add.w	sp, sp, #684	; 0x2ac
    f572:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f576:	cmp	r2, #37	; 0x25
    f578:	bne.w	f684 <__ssvfscanf_r+0x1b4>
    f57c:	ldrb.w	r8, [r4, #1]
    f580:	mov	r4, r5
    f582:	adds	r3, r6, #1
    f584:	cmp.w	r8, #120	; 0x78
    f588:	bhi.w	fa12 <__ssvfscanf_r+0x542>
    f58c:	tbh	[pc, r8, lsl #1]
    f590:	.word	0x02410092
    f594:	.word	0x02410241
    f598:	.word	0x02410241
    f59c:	.word	0x02410241
    f5a0:	.word	0x02410241
    f5a4:	.word	0x02410241
    f5a8:	.word	0x02410241
    f5ac:	.word	0x02410241
    f5b0:	.word	0x02410241
    f5b4:	.word	0x02410241
    f5b8:	.word	0x02410241
    f5bc:	.word	0x02410241
    f5c0:	.word	0x02410241
    f5c4:	.word	0x02410241
    f5c8:	.word	0x02410241
    f5cc:	.word	0x02410241
    f5d0:	.word	0x02410241
    f5d4:	.word	0x02410241
    f5d8:	.word	0x00790241
    f5dc:	.word	0x02410241
    f5e0:	.word	0x02410241
    f5e4:	.word	0x024101d8
    f5e8:	.word	0x02410241
    f5ec:	.word	0x02410241
    f5f0:	.word	0x01cf01cf
    f5f4:	.word	0x01cf01cf
    f5f8:	.word	0x01cf01cf
    f5fc:	.word	0x01cf01cf
    f600:	.word	0x01cf01cf
    f604:	.word	0x02410241
    f608:	.word	0x02410241
    f60c:	.word	0x02410241
    f610:	.word	0x02410241
    f614:	.word	0x02410241
    f618:	.word	0x01b901c1
    f61c:	.word	0x01b90241
    f620:	.word	0x02410241
    f624:	.word	0x02410241
    f628:	.word	0x024101b3
    f62c:	.word	0x01a30241
    f630:	.word	0x02410241
    f634:	.word	0x02410241
    f638:	.word	0x02410241
    f63c:	.word	0x02410241
    f640:	.word	0x02410193
    f644:	.word	0x01510241
    f648:	.word	0x02410241
    f64c:	.word	0x02410241
    f650:	.word	0x02410241
    f654:	.word	0x01220241
    f658:	.word	0x01b90188
    f65c:	.word	0x01b901b9
    f660:	.word	0x0098011c
    f664:	.word	0x02410241
    f668:	.word	0x024100d5
    f66c:	.word	0x0101010d
    f670:	.word	0x024100f3
    f674:	.word	0x00eb0241
    f678:	.word	0x00df0241
    f67c:	.word	0x02410241
    f680:	.short	0x0193
    f682:	mov	r6, r3
    f684:	ldr.w	r3, [fp, #4]
    f688:	cmp	r3, #0
    f68a:	ble.w	fb34 <__ssvfscanf_r+0x664>
    f68e:	ldr.w	r3, [fp]
    f692:	ldrb.w	r2, [r6, #-1]
    f696:	ldrb	r1, [r3, #0]
    f698:	cmp	r1, r2
    f69a:	bne.w	f56c <__ssvfscanf_r+0x9c>
    f69e:	ldr.w	r2, [fp, #4]
    f6a2:	adds	r3, #1
    f6a4:	subs	r2, #1
    f6a6:	str.w	r3, [fp]
    f6aa:	adds	r7, #1
    f6ac:	str.w	r2, [fp, #4]
    f6b0:	mov	r4, r6
    f6b2:	b.n	f560 <__ssvfscanf_r+0x90>
    f6b4:	mov.w	r0, #4294967295
    f6b8:	add.w	sp, sp, #684	; 0x2ac
    f6bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f6c0:	str	r3, [sp, #8]
    f6c2:	ldr.w	r3, [fp, #4]
    f6c6:	cmp	r3, #0
    f6c8:	ble.w	fb92 <__ssvfscanf_r+0x6c2>
    f6cc:	ldr	r3, [pc, #736]	; (f9b0 <__ssvfscanf_r+0x4e0>)
    f6ce:	str	r3, [sp, #24]
    f6d0:	movs	r3, #0
    f6d2:	str	r3, [sp, #12]
    f6d4:	movs	r6, #3
    f6d6:	b.n	f6dc <__ssvfscanf_r+0x20c>
    f6d8:	str.w	lr, [fp]
    f6dc:	bl	c0c4 <__locale_ctype_ptr>
    f6e0:	ldr.w	r2, [fp]
    f6e4:	ldrb	r1, [r2, #0]
    f6e6:	add	r0, r1
    f6e8:	add.w	lr, r2, #1
    f6ec:	ldrb	r3, [r0, #1]
    f6ee:	and.w	r3, r3, #8
    f6f2:	and.w	r8, r3, #255	; 0xff
    f6f6:	cmp	r3, #0
    f6f8:	beq.w	fbfa <__ssvfscanf_r+0x72a>
    f6fc:	ldr.w	r3, [fp, #4]
    f700:	subs	r3, #1
    f702:	cmp	r3, #0
    f704:	add.w	r7, r7, #1
    f708:	str.w	r3, [fp, #4]
    f70c:	bgt.n	f6d8 <__ssvfscanf_r+0x208>
    f70e:	mov	r1, fp
    f710:	mov	r0, sl
    f712:	bl	12d00 <__ssrefill_r>
    f716:	cmp	r0, #0
    f718:	beq.n	f6dc <__ssvfscanf_r+0x20c>
    f71a:	ldr	r2, [sp, #20]
    f71c:	cmp	r2, #0
    f71e:	beq.n	f6b4 <__ssvfscanf_r+0x1e4>
    f720:	ldrh.w	r3, [fp, #12]
    f724:	tst.w	r3, #64	; 0x40
    f728:	mov	r3, r2
    f72a:	it	ne
    f72c:	movne.w	r3, #4294967295
    f730:	mov	r0, r3
    f732:	add.w	sp, sp, #684	; 0x2ac
    f736:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f73a:	ldrb.w	r8, [r6, #1]
    f73e:	cmp.w	r8, #108	; 0x6c
    f742:	beq.w	fb4a <__ssvfscanf_r+0x67a>
    f746:	orr.w	r5, r5, #1
    f74a:	mov	r6, r3
    f74c:	b.n	f582 <__ssvfscanf_r+0xb2>
    f74e:	str	r3, [sp, #8]
    f750:	ldr.w	r3, [fp, #4]
    f754:	cmp	r3, #0
    f756:	ble.w	fbea <__ssvfscanf_r+0x71a>
    f75a:	ldr	r3, [pc, #600]	; (f9b4 <__ssvfscanf_r+0x4e4>)
    f75c:	str	r3, [sp, #24]
    f75e:	movs	r3, #10
    f760:	str	r3, [sp, #12]
    f762:	movs	r6, #3
    f764:	b.n	f6dc <__ssvfscanf_r+0x20c>
    f766:	str	r3, [sp, #8]
    f768:	ldr.w	r3, [fp, #4]
    f76c:	cmp	r3, #0
    f76e:	ble.w	fbda <__ssvfscanf_r+0x70a>
    f772:	movs	r6, #2
    f774:	b.n	f6dc <__ssvfscanf_r+0x20c>
    f776:	str	r3, [sp, #8]
    f778:	ldr.w	r3, [fp, #4]
    f77c:	cmp	r3, #0
    f77e:	orr.w	r5, r5, #544	; 0x220
    f782:	ble.w	f8c6 <__ssvfscanf_r+0x3f6>
    f786:	ldr	r3, [pc, #556]	; (f9b4 <__ssvfscanf_r+0x4e4>)
    f788:	str	r3, [sp, #24]
    f78a:	movs	r3, #16
    f78c:	str	r3, [sp, #12]
    f78e:	movs	r6, #3
    f790:	b.n	f6dc <__ssvfscanf_r+0x20c>
    f792:	str	r3, [sp, #8]
    f794:	ldr.w	r3, [fp, #4]
    f798:	cmp	r3, #0
    f79a:	ble.w	f8e6 <__ssvfscanf_r+0x416>
    f79e:	ldr	r3, [pc, #532]	; (f9b4 <__ssvfscanf_r+0x4e4>)
    f7a0:	str	r3, [sp, #24]
    f7a2:	movs	r3, #8
    f7a4:	str	r3, [sp, #12]
    f7a6:	movs	r6, #3
    f7a8:	b.n	f6dc <__ssvfscanf_r+0x20c>
    f7aa:	lsls	r2, r5, #27
    f7ac:	mov	r6, r3
    f7ae:	str	r3, [sp, #8]
    f7b0:	bmi.w	f998 <__ssvfscanf_r+0x4c8>
    f7b4:	lsls	r3, r5, #29
    f7b6:	bpl.w	fb62 <__ssvfscanf_r+0x692>
    f7ba:	ldr	r1, [sp, #16]
    f7bc:	ldr	r3, [r1, #0]
    f7be:	strh	r7, [r3, #0]
    f7c0:	adds	r3, r1, #4
    f7c2:	str	r3, [sp, #16]
    f7c4:	mov	r4, r6
    f7c6:	b.n	f560 <__ssvfscanf_r+0x90>
    f7c8:	ldrb.w	r8, [r6, #1]
    f7cc:	orr.w	r5, r5, #4
    f7d0:	mov	r6, r3
    f7d2:	b.n	f582 <__ssvfscanf_r+0xb2>
    f7d4:	str	r3, [sp, #8]
    f7d6:	ldr.w	r3, [fp, #4]
    f7da:	cmp	r3, #0
    f7dc:	ble.w	fbba <__ssvfscanf_r+0x6ea>
    f7e0:	cmp	r4, #0
    f7e2:	it	eq
    f7e4:	moveq	r4, #1
    f7e6:	ands.w	r3, r5, #1
    f7ea:	bne.w	fa32 <__ssvfscanf_r+0x562>
    f7ee:	lsls	r2, r5, #27
    f7f0:	bpl.w	fb0a <__ssvfscanf_r+0x63a>
    f7f4:	mov	r5, r3
    f7f6:	b.n	f80c <__ssvfscanf_r+0x33c>
    f7f8:	add	r3, r2
    f7fa:	str.w	r3, [fp]
    f7fe:	add	r5, r2
    f800:	subs	r4, r4, r2
    f802:	bl	12d00 <__ssrefill_r>
    f806:	cmp	r0, #0
    f808:	bne.w	fb02 <__ssvfscanf_r+0x632>
    f80c:	ldr.w	r2, [fp, #4]
    f810:	ldr.w	r3, [fp]
    f814:	cmp	r2, r4
    f816:	mov	r1, fp
    f818:	mov	r0, sl
    f81a:	blt.n	f7f8 <__ssvfscanf_r+0x328>
    f81c:	subs	r2, r2, r4
    f81e:	add	r3, r4
    f820:	str.w	r2, [fp, #4]
    f824:	add	r5, r4
    f826:	str.w	r3, [fp]
    f82a:	ldr	r6, [sp, #8]
    f82c:	add	r7, r5
    f82e:	mov	r4, r6
    f830:	b.n	f560 <__ssvfscanf_r+0x90>
    f832:	add.w	r9, sp, #72	; 0x48
    f836:	mov	r1, r3
    f838:	mov	r0, r9
    f83a:	bl	1259c <__sccl>
    f83e:	ldr.w	r3, [fp, #4]
    f842:	cmp	r3, #0
    f844:	mov	r6, r0
    f846:	ble.w	fbaa <__ssvfscanf_r+0x6da>
    f84a:	cmp	r4, #0
    f84c:	ldr.w	r2, [fp]
    f850:	it	eq
    f852:	moveq.w	r4, #4294967295
    f856:	lsls	r3, r5, #27
    f858:	ldrb	r1, [r2, #0]
    f85a:	bpl.w	f99e <__ssvfscanf_r+0x4ce>
    f85e:	mov	r8, r4
    f860:	movs	r5, #0
    f862:	b.n	f866 <__ssvfscanf_r+0x396>
    f864:	ldrb	r1, [r2, #0]
    f866:	ldrb.w	r3, [r9, r1]
    f86a:	adds	r2, #1
    f86c:	cmp	r3, #0
    f86e:	beq.w	faf8 <__ssvfscanf_r+0x628>
    f872:	ldr.w	r3, [fp, #4]
    f876:	str.w	r2, [fp]
    f87a:	adds	r5, #1
    f87c:	subs	r3, #1
    f87e:	cmp	r5, r4
    f880:	str.w	r3, [fp, #4]
    f884:	beq.w	faf2 <__ssvfscanf_r+0x622>
    f888:	cmp	r3, #0
    f88a:	bgt.n	f864 <__ssvfscanf_r+0x394>
    f88c:	mov	r1, fp
    f88e:	mov	r0, sl
    f890:	bl	12d00 <__ssrefill_r>
    f894:	cmp	r0, #0
    f896:	bne.w	faf0 <__ssvfscanf_r+0x620>
    f89a:	ldr.w	r2, [fp]
    f89e:	b.n	f864 <__ssvfscanf_r+0x394>
    f8a0:	str	r3, [sp, #8]
    f8a2:	ldr.w	r3, [fp, #4]
    f8a6:	cmp	r3, #0
    f8a8:	ble.n	f920 <__ssvfscanf_r+0x450>
    f8aa:	ldr	r3, [pc, #260]	; (f9b0 <__ssvfscanf_r+0x4e0>)
    f8ac:	str	r3, [sp, #24]
    f8ae:	movs	r3, #10
    f8b0:	str	r3, [sp, #12]
    f8b2:	movs	r6, #3
    f8b4:	b.n	f6dc <__ssvfscanf_r+0x20c>
    f8b6:	str	r3, [sp, #8]
    f8b8:	ldr.w	r3, [fp, #4]
    f8bc:	cmp	r3, #0
    f8be:	orr.w	r5, r5, #512	; 0x200
    f8c2:	bgt.w	f786 <__ssvfscanf_r+0x2b6>
    f8c6:	mov	r1, fp
    f8c8:	mov	r0, sl
    f8ca:	bl	12d00 <__ssrefill_r>
    f8ce:	cmp	r0, #0
    f8d0:	beq.w	f786 <__ssvfscanf_r+0x2b6>
    f8d4:	b.n	f71a <__ssvfscanf_r+0x24a>
    f8d6:	str	r3, [sp, #8]
    f8d8:	ldr.w	r3, [fp, #4]
    f8dc:	cmp	r3, #0
    f8de:	orr.w	r5, r5, #1
    f8e2:	bgt.w	f79e <__ssvfscanf_r+0x2ce>
    f8e6:	mov	r1, fp
    f8e8:	mov	r0, sl
    f8ea:	bl	12d00 <__ssrefill_r>
    f8ee:	cmp	r0, #0
    f8f0:	beq.w	f79e <__ssvfscanf_r+0x2ce>
    f8f4:	b.n	f71a <__ssvfscanf_r+0x24a>
    f8f6:	ldrb.w	r8, [r6, #1]
    f8fa:	orr.w	r5, r5, #2
    f8fe:	mov	r6, r3
    f900:	b.n	f582 <__ssvfscanf_r+0xb2>
    f902:	str	r3, [sp, #8]
    f904:	ldr.w	r3, [fp, #4]
    f908:	cmp	r3, #0
    f90a:	ble.w	fbca <__ssvfscanf_r+0x6fa>
    f90e:	movs	r6, #4
    f910:	b.n	f6dc <__ssvfscanf_r+0x20c>
    f912:	str	r3, [sp, #8]
    f914:	ldr.w	r3, [fp, #4]
    f918:	cmp	r3, #0
    f91a:	orr.w	r5, r5, #1
    f91e:	bgt.n	f8aa <__ssvfscanf_r+0x3da>
    f920:	mov	r1, fp
    f922:	mov	r0, sl
    f924:	bl	12d00 <__ssrefill_r>
    f928:	cmp	r0, #0
    f92a:	beq.n	f8aa <__ssvfscanf_r+0x3da>
    f92c:	b.n	f71a <__ssvfscanf_r+0x24a>
    f92e:	add.w	r4, r4, r4, lsl #2
    f932:	add.w	r4, r8, r4, lsl #1
    f936:	subs	r4, #48	; 0x30
    f938:	ldrb.w	r8, [r6, #1]
    f93c:	mov	r6, r3
    f93e:	b.n	f582 <__ssvfscanf_r+0xb2>
    f940:	ldrb.w	r8, [r6, #1]
    f944:	orr.w	r5, r5, #16
    f948:	mov	r6, r3
    f94a:	b.n	f582 <__ssvfscanf_r+0xb2>
    f94c:	add	r3, sp, #64	; 0x40
    f94e:	mov	r1, r8
    f950:	mov	r0, r3
    f952:	movs	r2, #8
    f954:	str	r3, [sp, #28]
    f956:	bl	c86c <memset>
    f95a:	ands.w	r9, r5, #16
    f95e:	bne.w	10216 <__ssvfscanf_r+0xd46>
    f962:	ldr	r2, [sp, #16]
    f964:	mov	r3, r2
    f966:	adds	r3, #4
    f968:	ldr.w	r8, [r2]
    f96c:	str	r3, [sp, #16]
    f96e:	movs	r6, #0
    f970:	bl	c0c4 <__locale_ctype_ptr>
    f974:	ldr.w	r3, [fp]
    f978:	ldrb	r3, [r3, #0]
    f97a:	add	r0, r3
    f97c:	ldrb	r3, [r0, #1]
    f97e:	lsls	r0, r3, #28
    f980:	bmi.n	f988 <__ssvfscanf_r+0x4b8>
    f982:	cmp	r4, #0
    f984:	bne.w	1017a <__ssvfscanf_r+0xcaa>
    f988:	cmp.w	r9, #0
    f98c:	bne.n	f998 <__ssvfscanf_r+0x4c8>
    f98e:	str.w	r9, [r8]
    f992:	ldr	r3, [sp, #20]
    f994:	adds	r3, #1
    f996:	str	r3, [sp, #20]
    f998:	ldr	r6, [sp, #8]
    f99a:	mov	r4, r6
    f99c:	b.n	f560 <__ssvfscanf_r+0x90>
    f99e:	ldr	r0, [sp, #16]
    f9a0:	ldr	r5, [r0, #0]
    f9a2:	mov	r3, r0
    f9a4:	adds	r3, #4
    f9a6:	add.w	r8, r5, r4
    f9aa:	str	r3, [sp, #8]
    f9ac:	mov	r4, r5
    f9ae:	b.n	f9be <__ssvfscanf_r+0x4ee>
    f9b0:	.word	0x0000df39
    f9b4:	.word	0x00012949
    f9b8:	ldr.w	r2, [fp]
    f9bc:	ldrb	r1, [r2, #0]
    f9be:	ldrb.w	r3, [r9, r1]
    f9c2:	adds	r0, r2, #1
    f9c4:	cbz	r3, f9f8 <__ssvfscanf_r+0x528>
    f9c6:	ldr.w	r3, [fp, #4]
    f9ca:	str.w	r0, [fp]
    f9ce:	subs	r3, #1
    f9d0:	str.w	r3, [fp, #4]
    f9d4:	ldrb	r3, [r2, #0]
    f9d6:	strb.w	r3, [r4], #1
    f9da:	cmp	r8, r4
    f9dc:	beq.n	f9f8 <__ssvfscanf_r+0x528>
    f9de:	ldr.w	r3, [fp, #4]
    f9e2:	cmp	r3, #0
    f9e4:	bgt.n	f9b8 <__ssvfscanf_r+0x4e8>
    f9e6:	mov	r1, fp
    f9e8:	mov	r0, sl
    f9ea:	bl	12d00 <__ssrefill_r>
    f9ee:	cmp	r0, #0
    f9f0:	beq.n	f9b8 <__ssvfscanf_r+0x4e8>
    f9f2:	cmp	r5, r4
    f9f4:	beq.w	f71a <__ssvfscanf_r+0x24a>
    f9f8:	subs	r5, r4, r5
    f9fa:	beq.w	f56c <__ssvfscanf_r+0x9c>
    f9fe:	ldr	r2, [sp, #20]
    fa00:	adds	r2, #1
    fa02:	movs	r3, #0
    fa04:	str	r2, [sp, #20]
    fa06:	ldr	r2, [sp, #8]
    fa08:	str	r2, [sp, #16]
    fa0a:	strb	r3, [r4, #0]
    fa0c:	add	r7, r5
    fa0e:	mov	r4, r6
    fa10:	b.n	f560 <__ssvfscanf_r+0x90>
    fa12:	str	r3, [sp, #8]
    fa14:	bl	c0c4 <__locale_ctype_ptr>
    fa18:	add	r0, r8
    fa1a:	ldrb	r3, [r0, #1]
    fa1c:	and.w	r3, r3, #3
    fa20:	cmp	r3, #1
    fa22:	ldr.w	r3, [fp, #4]
    fa26:	beq.w	fb56 <__ssvfscanf_r+0x686>
    fa2a:	cmp	r3, #0
    fa2c:	bgt.w	f8aa <__ssvfscanf_r+0x3da>
    fa30:	b.n	f920 <__ssvfscanf_r+0x450>
    fa32:	add	r3, sp, #64	; 0x40
    fa34:	mov	r0, r3
    fa36:	movs	r2, #8
    fa38:	movs	r1, #0
    fa3a:	str	r3, [sp, #28]
    fa3c:	bl	c86c <memset>
    fa40:	ands.w	r3, r5, #16
    fa44:	str	r3, [sp, #32]
    fa46:	bne.n	fb44 <__ssvfscanf_r+0x674>
    fa48:	ldr	r2, [sp, #16]
    fa4a:	mov	r3, r2
    fa4c:	adds	r3, #4
    fa4e:	ldr.w	r9, [r2]
    fa52:	str	r3, [sp, #16]
    fa54:	movs	r5, #0
    fa56:	add.w	r8, sp, #328	; 0x148
    fa5a:	bl	c0a0 <__locale_mb_cur_max>
    fa5e:	cmp	r0, r5
    fa60:	beq.w	f71a <__ssvfscanf_r+0x24a>
    fa64:	ldmia.w	fp, {r2, r3}
    fa68:	ldrb.w	r0, [r2], #1
    fa6c:	str.w	r2, [fp]
    fa70:	subs	r3, #1
    fa72:	ldr	r2, [sp, #28]
    fa74:	str	r2, [sp, #0]
    fa76:	adds	r6, r5, #1
    fa78:	str.w	r3, [fp, #4]
    fa7c:	mov	r1, r9
    fa7e:	strb.w	r0, [r8, r5]
    fa82:	mov	r3, r6
    fa84:	mov	r2, r8
    fa86:	mov	r0, sl
    fa88:	bl	11c5c <_mbrtowc_r>
    fa8c:	adds	r1, r0, #1
    fa8e:	beq.w	f71a <__ssvfscanf_r+0x24a>
    fa92:	cbnz	r0, fabe <__ssvfscanf_r+0x5ee>
    fa94:	ldr	r3, [sp, #32]
    fa96:	cbnz	r3, fade <__ssvfscanf_r+0x60e>
    fa98:	str.w	r3, [r9]
    fa9c:	add	r7, r6
    fa9e:	subs	r4, #1
    faa0:	add.w	r9, r9, #4
    faa4:	ldr.w	r3, [fp, #4]
    faa8:	cmp	r3, #0
    faaa:	mov.w	r5, #0
    faae:	ble.n	facc <__ssvfscanf_r+0x5fc>
    fab0:	cmp	r4, #0
    fab2:	bne.n	fa5a <__ssvfscanf_r+0x58a>
    fab4:	ldr	r3, [sp, #32]
    fab6:	cmp	r3, #0
    fab8:	beq.w	f992 <__ssvfscanf_r+0x4c2>
    fabc:	b.n	f998 <__ssvfscanf_r+0x4c8>
    fabe:	adds	r0, #2
    fac0:	bne.n	fae4 <__ssvfscanf_r+0x614>
    fac2:	ldr.w	r3, [fp, #4]
    fac6:	cmp	r3, #0
    fac8:	mov	r5, r6
    faca:	bgt.n	fa5a <__ssvfscanf_r+0x58a>
    facc:	mov	r1, fp
    face:	mov	r0, sl
    fad0:	bl	12d00 <__ssrefill_r>
    fad4:	cmp	r0, #0
    fad6:	beq.n	fab0 <__ssvfscanf_r+0x5e0>
    fad8:	cmp	r5, #0
    fada:	beq.n	fab4 <__ssvfscanf_r+0x5e4>
    fadc:	b.n	f71a <__ssvfscanf_r+0x24a>
    fade:	add	r7, r6
    fae0:	subs	r4, #1
    fae2:	b.n	faa4 <__ssvfscanf_r+0x5d4>
    fae4:	ldr	r3, [sp, #32]
    fae6:	add	r7, r6
    fae8:	subs	r4, #1
    faea:	cmp	r3, #0
    faec:	bne.n	faa4 <__ssvfscanf_r+0x5d4>
    faee:	b.n	faa0 <__ssvfscanf_r+0x5d0>
    faf0:	mov	r8, r5
    faf2:	mov	r5, r8
    faf4:	add	r7, r5
    faf6:	b.n	fa0e <__ssvfscanf_r+0x53e>
    faf8:	cmp	r5, #0
    fafa:	beq.w	f56c <__ssvfscanf_r+0x9c>
    fafe:	add	r7, r5
    fb00:	b.n	fa0e <__ssvfscanf_r+0x53e>
    fb02:	cmp	r5, #0
    fb04:	bne.w	f82a <__ssvfscanf_r+0x35a>
    fb08:	b.n	f71a <__ssvfscanf_r+0x24a>
    fb0a:	ldr	r5, [sp, #16]
    fb0c:	mov	r3, r4
    fb0e:	ldr	r1, [r5, #0]
    fb10:	str.w	fp, [sp]
    fb14:	movs	r2, #1
    fb16:	mov	r0, sl
    fb18:	bl	12d3c <_sfread_r>
    fb1c:	adds	r6, r5, #4
    fb1e:	cmp	r0, #0
    fb20:	beq.w	f71a <__ssvfscanf_r+0x24a>
    fb24:	ldr	r3, [sp, #20]
    fb26:	str	r6, [sp, #16]
    fb28:	ldr	r6, [sp, #8]
    fb2a:	adds	r3, #1
    fb2c:	add	r7, r0
    fb2e:	str	r3, [sp, #20]
    fb30:	mov	r4, r6
    fb32:	b.n	f560 <__ssvfscanf_r+0x90>
    fb34:	mov	r1, fp
    fb36:	mov	r0, sl
    fb38:	bl	12d00 <__ssrefill_r>
    fb3c:	cmp	r0, #0
    fb3e:	beq.w	f68e <__ssvfscanf_r+0x1be>
    fb42:	b.n	f71a <__ssvfscanf_r+0x24a>
    fb44:	mov.w	r9, #0
    fb48:	b.n	fa54 <__ssvfscanf_r+0x584>
    fb4a:	ldrb.w	r8, [r6, #2]
    fb4e:	orr.w	r5, r5, #2
    fb52:	adds	r6, #2
    fb54:	b.n	f582 <__ssvfscanf_r+0xb2>
    fb56:	cmp	r3, #0
    fb58:	orr.w	r5, r5, #1
    fb5c:	bgt.w	f8aa <__ssvfscanf_r+0x3da>
    fb60:	b.n	f920 <__ssvfscanf_r+0x450>
    fb62:	lsls	r4, r5, #31
    fb64:	bmi.n	fb80 <__ssvfscanf_r+0x6b0>
    fb66:	lsls	r0, r5, #30
    fb68:	bpl.n	fb80 <__ssvfscanf_r+0x6b0>
    fb6a:	ldr	r2, [sp, #16]
    fb6c:	ldr	r6, [sp, #8]
    fb6e:	ldr	r3, [r2, #0]
    fb70:	mov	r0, r7
    fb72:	asrs	r1, r7, #31
    fb74:	adds	r2, #4
    fb76:	str	r2, [sp, #16]
    fb78:	strd	r0, r1, [r3]
    fb7c:	mov	r4, r6
    fb7e:	b.n	f560 <__ssvfscanf_r+0x90>
    fb80:	ldr	r2, [sp, #16]
    fb82:	ldr	r6, [sp, #8]
    fb84:	ldr	r3, [r2, #0]
    fb86:	str	r7, [r3, #0]
    fb88:	mov	r3, r2
    fb8a:	adds	r3, #4
    fb8c:	str	r3, [sp, #16]
    fb8e:	mov	r4, r6
    fb90:	b.n	f560 <__ssvfscanf_r+0x90>
    fb92:	mov	r1, fp
    fb94:	mov	r0, sl
    fb96:	bl	12d00 <__ssrefill_r>
    fb9a:	cmp	r0, #0
    fb9c:	bne.w	f71a <__ssvfscanf_r+0x24a>
    fba0:	ldr	r3, [pc, #504]	; (fd9c <__ssvfscanf_r+0x8cc>)
    fba2:	str	r0, [sp, #12]
    fba4:	str	r3, [sp, #24]
    fba6:	movs	r6, #3
    fba8:	b.n	f6dc <__ssvfscanf_r+0x20c>
    fbaa:	mov	r1, fp
    fbac:	mov	r0, sl
    fbae:	bl	12d00 <__ssrefill_r>
    fbb2:	cmp	r0, #0
    fbb4:	beq.w	f84a <__ssvfscanf_r+0x37a>
    fbb8:	b.n	f71a <__ssvfscanf_r+0x24a>
    fbba:	mov	r1, fp
    fbbc:	mov	r0, sl
    fbbe:	bl	12d00 <__ssrefill_r>
    fbc2:	cmp	r0, #0
    fbc4:	beq.w	f7e0 <__ssvfscanf_r+0x310>
    fbc8:	b.n	f71a <__ssvfscanf_r+0x24a>
    fbca:	mov	r1, fp
    fbcc:	mov	r0, sl
    fbce:	bl	12d00 <__ssrefill_r>
    fbd2:	cmp	r0, #0
    fbd4:	beq.w	f90e <__ssvfscanf_r+0x43e>
    fbd8:	b.n	f71a <__ssvfscanf_r+0x24a>
    fbda:	mov	r1, fp
    fbdc:	mov	r0, sl
    fbde:	bl	12d00 <__ssrefill_r>
    fbe2:	cmp	r0, #0
    fbe4:	beq.w	f772 <__ssvfscanf_r+0x2a2>
    fbe8:	b.n	f71a <__ssvfscanf_r+0x24a>
    fbea:	mov	r1, fp
    fbec:	mov	r0, sl
    fbee:	bl	12d00 <__ssrefill_r>
    fbf2:	cmp	r0, #0
    fbf4:	beq.w	f75a <__ssvfscanf_r+0x28a>
    fbf8:	b.n	f71a <__ssvfscanf_r+0x24a>
    fbfa:	cmp	r6, #3
    fbfc:	beq.w	ff30 <__ssvfscanf_r+0xa60>
    fc00:	cmp	r6, #4
    fc02:	bne.w	10072 <__ssvfscanf_r+0xba2>
    fc06:	mov	r0, sl
    fc08:	bl	11c40 <_localeconv_r>
    fc0c:	subs	r3, r4, #1
    fc0e:	ldr	r2, [r0, #0]
    fc10:	str	r2, [sp, #40]	; 0x28
    fc12:	cmp.w	r3, #348	; 0x15c
    fc16:	bls.w	100da <__ssvfscanf_r+0xc0a>
    fc1a:	mvn.w	r1, #348	; 0x15c
    fc1e:	adds	r3, r4, r1
    fc20:	str	r3, [sp, #48]	; 0x30
    fc22:	movw	r4, #349	; 0x15d
    fc26:	add	r3, sp, #328	; 0x148
    fc28:	mov.w	r8, #0
    fc2c:	mov	r2, r3
    fc2e:	str	r3, [sp, #32]
    fc30:	orr.w	r5, r5, #1920	; 0x780
    fc34:	mov	r3, r8
    fc36:	str.w	r8, [sp, #52]	; 0x34
    fc3a:	str.w	r8, [sp, #44]	; 0x2c
    fc3e:	mov	r6, r8
    fc40:	str.w	r8, [sp, #36]	; 0x24
    fc44:	mov	r9, r2
    fc46:	ldr.w	r0, [fp]
    fc4a:	ldrb	r1, [r0, #0]
    fc4c:	sub.w	lr, r1, #43	; 0x2b
    fc50:	cmp.w	lr, #78	; 0x4e
    fc54:	bhi.w	fee0 <__ssvfscanf_r+0xa10>
    fc58:	tbh	[pc, lr, lsl #1]
    fc5c:	.word	0x0142007a
    fc60:	.word	0x0142007a
    fc64:	.word	0x006e0142
    fc68:	.word	0x004f004f
    fc6c:	.word	0x004f004f
    fc70:	.word	0x004f004f
    fc74:	.word	0x004f004f
    fc78:	.word	0x0142004f
    fc7c:	.word	0x01420142
    fc80:	.word	0x01420142
    fc84:	.word	0x01420142
    fc88:	.word	0x0142013d
    fc8c:	.word	0x01420142
    fc90:	.word	0x011e0125
    fc94:	.word	0x01420142
    fc98:	.word	0x014200a2
    fc9c:	.word	0x01420142
    fca0:	.word	0x008b0142
    fca4:	.word	0x01420142
    fca8:	.word	0x01420142
    fcac:	.word	0x00850142
    fcb0:	.word	0x01420142
    fcb4:	.word	0x01420142
    fcb8:	.word	0x0142007f
    fcbc:	.word	0x01420142
    fcc0:	.word	0x01420142
    fcc4:	.word	0x01420142
    fcc8:	.word	0x0142013d
    fccc:	.word	0x01420142
    fcd0:	.word	0x011e0125
    fcd4:	.word	0x01420142
    fcd8:	.word	0x014200a2
    fcdc:	.word	0x01420142
    fce0:	.word	0x008b0142
    fce4:	.word	0x01420142
    fce8:	.word	0x01420142
    fcec:	.word	0x00850142
    fcf0:	.word	0x01420142
    fcf4:	.word	0x01420142
    fcf8:	.short	0x007f
    fcfa:	cmn.w	r3, r8
    fcfe:	bne.n	fd2e <__ssvfscanf_r+0x85e>
    fd00:	bic.w	r5, r5, #384	; 0x180
    fd04:	strb.w	r1, [r9]
    fd08:	add.w	r9, r9, #1
    fd0c:	ldr.w	r1, [fp, #4]
    fd10:	subs	r1, #1
    fd12:	cmp	r1, #0
    fd14:	add.w	r4, r4, #4294967295
    fd18:	add.w	r7, r7, #1
    fd1c:	str.w	r1, [fp, #4]
    fd20:	ble.w	fefa <__ssvfscanf_r+0xa2a>
    fd24:	adds	r0, #1
    fd26:	str.w	r0, [fp]
    fd2a:	cmp	r4, #0
    fd2c:	bne.n	fc46 <__ssvfscanf_r+0x776>
    fd2e:	cmp	r6, #0
    fd30:	beq.n	fdb8 <__ssvfscanf_r+0x8e8>
    fd32:	bic.w	r5, r5, #256	; 0x100
    fd36:	b.n	fdb8 <__ssvfscanf_r+0x8e8>
    fd38:	lsls	r2, r5, #23
    fd3a:	bpl.n	fcfa <__ssvfscanf_r+0x82a>
    fd3c:	ldr	r2, [sp, #48]	; 0x30
    fd3e:	bic.w	r5, r5, #128	; 0x80
    fd42:	adds	r6, #1
    fd44:	cmp	r2, #0
    fd46:	beq.n	fd0c <__ssvfscanf_r+0x83c>
    fd48:	subs	r2, #1
    fd4a:	str	r2, [sp, #48]	; 0x30
    fd4c:	adds	r4, #1
    fd4e:	b.n	fd0c <__ssvfscanf_r+0x83c>
    fd50:	lsls	r2, r5, #24
    fd52:	bpl.n	fd2e <__ssvfscanf_r+0x85e>
    fd54:	bic.w	r5, r5, #128	; 0x80
    fd58:	b.n	fd04 <__ssvfscanf_r+0x834>
    fd5a:	cmp.w	r8, #7
    fd5e:	bne.n	fd2e <__ssvfscanf_r+0x85e>
    fd60:	mov.w	r8, #8
    fd64:	b.n	fd04 <__ssvfscanf_r+0x834>
    fd66:	cmp.w	r8, #6
    fd6a:	bne.n	fd2e <__ssvfscanf_r+0x85e>
    fd6c:	mov.w	r8, #7
    fd70:	b.n	fd04 <__ssvfscanf_r+0x834>
    fd72:	cmp	r3, #0
    fd74:	bne.w	ff26 <__ssvfscanf_r+0xa56>
    fd78:	cbnz	r6, fd86 <__ssvfscanf_r+0x8b6>
    fd7a:	and.w	lr, r5, #1792	; 0x700
    fd7e:	cmp.w	lr, #1792	; 0x700
    fd82:	beq.w	101fe <__ssvfscanf_r+0xd2e>
    fd86:	cmp.w	r8, #1
    fd8a:	beq.n	fd92 <__ssvfscanf_r+0x8c2>
    fd8c:	cmp.w	r8, #4
    fd90:	bne.n	fd2e <__ssvfscanf_r+0x85e>
    fd92:	add.w	r8, r8, #1
    fd96:	uxtb.w	r8, r8
    fd9a:	b.n	fd04 <__ssvfscanf_r+0x834>
    fd9c:	.word	0x0000df39
    fda0:	cmp.w	r8, #0
    fda4:	bne.w	ff14 <__ssvfscanf_r+0xa44>
    fda8:	cmp	r6, #0
    fdaa:	bne.n	fd32 <__ssvfscanf_r+0x862>
    fdac:	and.w	lr, r5, #1792	; 0x700
    fdb0:	cmp.w	lr, #1792	; 0x700
    fdb4:	beq.w	1021e <__ssvfscanf_r+0xd4e>
    fdb8:	subs	r3, #1
    fdba:	cmp	r3, #1
    fdbc:	bls.w	102b4 <__ssvfscanf_r+0xde4>
    fdc0:	add.w	r3, r8, #4294967295
    fdc4:	cmp	r3, #6
    fdc6:	bhi.n	fdf6 <__ssvfscanf_r+0x926>
    fdc8:	cmp.w	r8, #2
    fdcc:	bls.w	10304 <__ssvfscanf_r+0xe34>
    fdd0:	cmp.w	r8, #3
    fdd4:	beq.n	fdf6 <__ssvfscanf_r+0x926>
    fdd6:	sub.w	r4, r8, #4
    fdda:	uxtb	r4, r4
    fddc:	mvn.w	r8, r4
    fde0:	add	r8, r9
    fde2:	ldrb.w	r1, [r9, #-1]!
    fde6:	mov	r2, fp
    fde8:	mov	r0, sl
    fdea:	bl	12c7c <_sungetc_r>
    fdee:	cmp	r8, r9
    fdf0:	bne.n	fde2 <__ssvfscanf_r+0x912>
    fdf2:	subs	r7, #1
    fdf4:	subs	r7, r7, r4
    fdf6:	lsls	r1, r5, #23
    fdf8:	bpl.n	fe34 <__ssvfscanf_r+0x964>
    fdfa:	lsls	r2, r5, #21
    fdfc:	bmi.w	102d8 <__ssvfscanf_r+0xe08>
    fe00:	ldrb.w	r1, [r9, #-1]
    fe04:	cmp	r1, #101	; 0x65
    fe06:	add.w	r4, r9, #4294967295
    fe0a:	add.w	r8, r7, #4294967295
    fe0e:	beq.n	fe28 <__ssvfscanf_r+0x958>
    fe10:	cmp	r1, #69	; 0x45
    fe12:	beq.n	fe28 <__ssvfscanf_r+0x958>
    fe14:	mov	r2, fp
    fe16:	mov	r0, sl
    fe18:	bl	12c7c <_sungetc_r>
    fe1c:	ldrb.w	r1, [r9, #-2]
    fe20:	sub.w	r8, r7, #2
    fe24:	sub.w	r4, r9, #2
    fe28:	mov	r2, fp
    fe2a:	mov	r0, sl
    fe2c:	bl	12c7c <_sungetc_r>
    fe30:	mov	r7, r8
    fe32:	mov	r9, r4
    fe34:	ands.w	r2, r5, #16
    fe38:	bne.w	f998 <__ssvfscanf_r+0x4c8>
    fe3c:	and.w	r3, r5, #1536	; 0x600
    fe40:	cmp.w	r3, #1024	; 0x400
    fe44:	strb.w	r2, [r9]
    fe48:	beq.w	10228 <__ssvfscanf_r+0xd58>
    fe4c:	ldr	r3, [sp, #44]	; 0x2c
    fe4e:	cmp	r3, #0
    fe50:	bne.w	1024a <__ssvfscanf_r+0xd7a>
    fe54:	ldr	r1, [sp, #32]
    fe56:	movs	r2, #0
    fe58:	mov	r0, sl
    fe5a:	bl	dde0 <_strtod_r>
    fe5e:	lsls	r3, r5, #31
    fe60:	bmi.w	100e0 <__ssvfscanf_r+0xc10>
    fe64:	ands.w	r0, r5, #2
    fe68:	bne.w	100e0 <__ssvfscanf_r+0xc10>
    fe6c:	vcmp.f64	d0, d0
    fe70:	ldr	r3, [sp, #16]
    fe72:	vmrs	APSR_nzcv, fpscr
    fe76:	add.w	r5, r3, #4
    fe7a:	ldr	r4, [r3, #0]
    fe7c:	bvs.w	10338 <__ssvfscanf_r+0xe68>
    fe80:	vcvt.f32.f64	s0, d0
    fe84:	str	r5, [sp, #16]
    fe86:	vstr	s0, [r4]
    fe8a:	ldr	r3, [sp, #20]
    fe8c:	ldr	r6, [sp, #8]
    fe8e:	adds	r3, #1
    fe90:	str	r3, [sp, #20]
    fe92:	mov	r4, r6
    fe94:	b.w	f560 <__ssvfscanf_r+0x90>
    fe98:	cmp.w	r8, #2
    fe9c:	bne.w	fd2e <__ssvfscanf_r+0x85e>
    fea0:	mov.w	r8, #3
    fea4:	b.n	fd04 <__ssvfscanf_r+0x834>
    fea6:	and.w	lr, r5, #1280	; 0x500
    feaa:	cmp.w	lr, #1024	; 0x400
    feae:	beq.n	febc <__ssvfscanf_r+0x9ec>
    feb0:	lsls	r2, r5, #21
    feb2:	bpl.w	fd2e <__ssvfscanf_r+0x85e>
    feb6:	cmp	r6, #0
    feb8:	beq.w	fdb8 <__ssvfscanf_r+0x8e8>
    febc:	lsls	r2, r5, #22
    febe:	bmi.n	feca <__ssvfscanf_r+0x9fa>
    fec0:	ldr	r2, [sp, #36]	; 0x24
    fec2:	str.w	r9, [sp, #52]	; 0x34
    fec6:	subs	r2, r6, r2
    fec8:	str	r2, [sp, #44]	; 0x2c
    feca:	bic.w	r5, r5, #1920	; 0x780
    fece:	orr.w	r5, r5, #384	; 0x180
    fed2:	movs	r6, #0
    fed4:	b.n	fd04 <__ssvfscanf_r+0x834>
    fed6:	cmp	r3, #1
    fed8:	bne.w	fd2e <__ssvfscanf_r+0x85e>
    fedc:	movs	r3, #2
    fede:	b.n	fd04 <__ssvfscanf_r+0x834>
    fee0:	ldr	r2, [sp, #40]	; 0x28
    fee2:	ldrb.w	lr, [r2]
    fee6:	cmp	lr, r1
    fee8:	bne.w	fd2e <__ssvfscanf_r+0x85e>
    feec:	lsls	r2, r5, #22
    feee:	bpl.w	fd2e <__ssvfscanf_r+0x85e>
    fef2:	bic.w	r5, r5, #640	; 0x280
    fef6:	str	r6, [sp, #36]	; 0x24
    fef8:	b.n	fd04 <__ssvfscanf_r+0x834>
    fefa:	mov	r1, fp
    fefc:	mov	r0, sl
    fefe:	str	r3, [sp, #28]
    ff00:	bl	12d00 <__ssrefill_r>
    ff04:	ldr	r3, [sp, #28]
    ff06:	cmp	r0, #0
    ff08:	bne.w	fd2e <__ssvfscanf_r+0x85e>
    ff0c:	cmp	r4, #0
    ff0e:	bne.w	fc46 <__ssvfscanf_r+0x776>
    ff12:	b.n	fd2e <__ssvfscanf_r+0x85e>
    ff14:	cmp.w	r8, #3
    ff18:	beq.w	fd92 <__ssvfscanf_r+0x8c2>
    ff1c:	cmp.w	r8, #5
    ff20:	beq.w	fd92 <__ssvfscanf_r+0x8c2>
    ff24:	b.n	fd2e <__ssvfscanf_r+0x85e>
    ff26:	cmp	r3, #2
    ff28:	bne.w	fd86 <__ssvfscanf_r+0x8b6>
    ff2c:	movs	r3, #3
    ff2e:	b.n	fd04 <__ssvfscanf_r+0x834>
    ff30:	subs	r3, r4, #1
    ff32:	cmp.w	r3, #348	; 0x15c
    ff36:	itte	hi
    ff38:	mvnhi.w	r0, #348	; 0x15c
    ff3c:	addhi.w	r9, r4, r0
    ff40:	movls	r9, r8
    ff42:	add	r3, sp, #328	; 0x148
    ff44:	mov	r0, r2
    ff46:	mov	r2, r7
    ff48:	mov	r7, r9
    ff4a:	ldr.w	r9, [sp, #12]
    ff4e:	str	r3, [sp, #32]
    ff50:	it	hi
    ff52:	movwhi	r4, #349	; 0x15d
    ff56:	orr.w	r5, r5, #3456	; 0xd80
    ff5a:	mov	r6, r3
    ff5c:	mov.w	r8, #0
    ff60:	sub.w	r3, r1, #43	; 0x2b
    ff64:	cmp	r3, #77	; 0x4d
    ff66:	bhi.n	1000c <__ssvfscanf_r+0xb3c>
    ff68:	tbb	[pc, r3]
    ff6c:	.word	0x507e507e
    ff70:	.word	0x69696f50
    ff74:	.word	0x69696969
    ff78:	.word	0x504a4a69
    ff7c:	.word	0x50505050
    ff80:	.word	0x44445050
    ff84:	.word	0x44444444
    ff88:	.word	0x50505050
    ff8c:	.word	0x50505050
    ff90:	.word	0x50505050
    ff94:	.word	0x50505050
    ff98:	.word	0x50502750
    ff9c:	.word	0x50505050
    ffa0:	.word	0x44445050
    ffa4:	.word	0x44444444
    ffa8:	.word	0x50505050
    ffac:	.word	0x50505050
    ffb0:	.word	0x50505050
    ffb4:	.word	0x50505050
    ffb8:	.short	0x2750
    ffba:	and.w	r3, r5, #1536	; 0x600
    ffbe:	cmp.w	r3, #512	; 0x200
    ffc2:	bne.n	1000c <__ssvfscanf_r+0xb3c>
    ffc4:	bic.w	r5, r5, #512	; 0x200
    ffc8:	orr.w	r5, r5, #1280	; 0x500
    ffcc:	mov.w	r9, #16
    ffd0:	strb	r1, [r6, #0]
    ffd2:	adds	r6, #1
    ffd4:	ldr.w	r3, [fp, #4]
    ffd8:	subs	r3, #1
    ffda:	cmp	r3, #0
    ffdc:	str.w	r3, [fp, #4]
    ffe0:	ble.n	100c8 <__ssvfscanf_r+0xbf8>
    ffe2:	adds	r0, #1
    ffe4:	str.w	r0, [fp]
    ffe8:	subs	r4, #1
    ffea:	beq.n	1000c <__ssvfscanf_r+0xb3c>
    ffec:	ldr.w	r0, [fp]
    fff0:	ldrb	r1, [r0, #0]
    fff2:	b.n	ff60 <__ssvfscanf_r+0xa90>
    fff4:	cmp.w	r9, #10
    fff8:	ble.n	1000c <__ssvfscanf_r+0xb3c>
    fffa:	bic.w	r5, r5, #2944	; 0xb80
    fffe:	b.n	ffd0 <__ssvfscanf_r+0xb00>
   10000:	ldr	r3, [pc, #756]	; (102f8 <__ssvfscanf_r+0xe28>)
   10002:	ldrsh.w	r9, [r3, r9, lsl #1]
   10006:	cmp.w	r9, #8
   1000a:	bgt.n	fffa <__ssvfscanf_r+0xb2a>
   1000c:	lsls	r1, r5, #23
   1000e:	mov	r7, r2
   10010:	str.w	r9, [sp, #12]
   10014:	bpl.n	10026 <__ssvfscanf_r+0xb56>
   10016:	ldr	r3, [sp, #32]
   10018:	cmp	r6, r3
   1001a:	bhi.w	10206 <__ssvfscanf_r+0xd36>
   1001e:	ldr	r3, [sp, #32]
   10020:	cmp	r6, r3
   10022:	beq.w	f56c <__ssvfscanf_r+0x9c>
   10026:	ands.w	r4, r5, #16
   1002a:	beq.w	10152 <__ssvfscanf_r+0xc82>
   1002e:	ldr	r3, [sp, #32]
   10030:	subs	r6, r6, r3
   10032:	add	r6, r8
   10034:	add	r7, r6
   10036:	ldr	r6, [sp, #8]
   10038:	mov	r4, r6
   1003a:	b.w	f560 <__ssvfscanf_r+0x90>
   1003e:	ldr	r3, [pc, #696]	; (102f8 <__ssvfscanf_r+0xe28>)
   10040:	bic.w	r5, r5, #2944	; 0xb80
   10044:	ldrsh.w	r9, [r3, r9, lsl #1]
   10048:	b.n	ffd0 <__ssvfscanf_r+0xb00>
   1004a:	lsls	r3, r5, #20
   1004c:	bpl.n	ffd0 <__ssvfscanf_r+0xb00>
   1004e:	cmp.w	r9, #0
   10052:	bne.n	1005c <__ssvfscanf_r+0xb8c>
   10054:	orr.w	r5, r5, #512	; 0x200
   10058:	mov.w	r9, #8
   1005c:	lsls	r3, r5, #21
   1005e:	bpl.w	101e2 <__ssvfscanf_r+0xd12>
   10062:	bic.w	r5, r5, #1408	; 0x580
   10066:	b.n	ffd0 <__ssvfscanf_r+0xb00>
   10068:	lsls	r3, r5, #24
   1006a:	bpl.n	1000c <__ssvfscanf_r+0xb3c>
   1006c:	bic.w	r5, r5, #128	; 0x80
   10070:	b.n	ffd0 <__ssvfscanf_r+0xb00>
   10072:	cmp	r4, #0
   10074:	it	eq
   10076:	moveq.w	r4, #4294967295
   1007a:	ands.w	r3, r5, #1
   1007e:	bne.w	f94c <__ssvfscanf_r+0x47c>
   10082:	lsls	r1, r5, #27
   10084:	bpl.n	100ee <__ssvfscanf_r+0xc1e>
   10086:	mov	r5, r3
   10088:	bl	c0c4 <__locale_ctype_ptr>
   1008c:	ldr.w	r3, [fp]
   10090:	ldrb	r2, [r3, #0]
   10092:	add	r0, r2
   10094:	adds	r3, #1
   10096:	ldrb	r2, [r0, #1]
   10098:	lsls	r2, r2, #28
   1009a:	bmi.w	f82a <__ssvfscanf_r+0x35a>
   1009e:	ldr.w	r2, [fp, #4]
   100a2:	str.w	r3, [fp]
   100a6:	adds	r5, #1
   100a8:	subs	r3, r2, #1
   100aa:	cmp	r4, r5
   100ac:	str.w	r3, [fp, #4]
   100b0:	beq.w	f82a <__ssvfscanf_r+0x35a>
   100b4:	cmp	r3, #0
   100b6:	bgt.n	10088 <__ssvfscanf_r+0xbb8>
   100b8:	mov	r1, fp
   100ba:	mov	r0, sl
   100bc:	bl	12d00 <__ssrefill_r>
   100c0:	cmp	r0, #0
   100c2:	beq.n	10088 <__ssvfscanf_r+0xbb8>
   100c4:	b.w	f82a <__ssvfscanf_r+0x35a>
   100c8:	mov	r1, fp
   100ca:	mov	r0, sl
   100cc:	str	r2, [sp, #12]
   100ce:	bl	12d00 <__ssrefill_r>
   100d2:	ldr	r2, [sp, #12]
   100d4:	cmp	r0, #0
   100d6:	beq.n	ffe8 <__ssvfscanf_r+0xb18>
   100d8:	b.n	1000c <__ssvfscanf_r+0xb3c>
   100da:	str.w	r8, [sp, #48]	; 0x30
   100de:	b.n	fc26 <__ssvfscanf_r+0x756>
   100e0:	ldr	r2, [sp, #16]
   100e2:	ldr	r3, [r2, #0]
   100e4:	adds	r2, #4
   100e6:	str	r2, [sp, #16]
   100e8:	vstr	d0, [r3]
   100ec:	b.n	fe8a <__ssvfscanf_r+0x9ba>
   100ee:	ldr	r2, [sp, #16]
   100f0:	ldr	r5, [r2, #0]
   100f2:	adds	r6, r2, #4
   100f4:	add	r4, r5
   100f6:	mov	r8, r5
   100f8:	bl	c0c4 <__locale_ctype_ptr>
   100fc:	ldr.w	r2, [fp]
   10100:	ldrb	r3, [r2, #0]
   10102:	add	r0, r3
   10104:	adds	r1, r2, #1
   10106:	ldrb	r3, [r0, #1]
   10108:	lsls	r3, r3, #28
   1010a:	bmi.n	10138 <__ssvfscanf_r+0xc68>
   1010c:	ldr.w	r3, [fp, #4]
   10110:	str.w	r1, [fp]
   10114:	subs	r3, #1
   10116:	str.w	r3, [fp, #4]
   1011a:	ldrb	r3, [r2, #0]
   1011c:	strb.w	r3, [r8], #1
   10120:	cmp	r4, r8
   10122:	beq.n	1013a <__ssvfscanf_r+0xc6a>
   10124:	ldr.w	r3, [fp, #4]
   10128:	cmp	r3, #0
   1012a:	bgt.n	100f8 <__ssvfscanf_r+0xc28>
   1012c:	mov	r1, fp
   1012e:	mov	r0, sl
   10130:	bl	12d00 <__ssrefill_r>
   10134:	cmp	r0, #0
   10136:	beq.n	100f8 <__ssvfscanf_r+0xc28>
   10138:	mov	r4, r8
   1013a:	ldr	r2, [sp, #20]
   1013c:	str	r6, [sp, #16]
   1013e:	ldr	r6, [sp, #8]
   10140:	subs	r5, r4, r5
   10142:	movs	r3, #0
   10144:	adds	r2, #1
   10146:	strb	r3, [r4, #0]
   10148:	add	r7, r5
   1014a:	str	r2, [sp, #20]
   1014c:	mov	r4, r6
   1014e:	b.w	f560 <__ssvfscanf_r+0x90>
   10152:	mov	r2, r4
   10154:	strb	r4, [r6, #0]
   10156:	ldr	r3, [sp, #12]
   10158:	ldr	r1, [sp, #32]
   1015a:	ldr	r4, [sp, #24]
   1015c:	mov	r0, sl
   1015e:	blx	r4
   10160:	lsls	r2, r5, #26
   10162:	bmi.n	101f2 <__ssvfscanf_r+0xd22>
   10164:	lsls	r3, r5, #29
   10166:	bpl.n	10260 <__ssvfscanf_r+0xd90>
   10168:	ldr	r2, [sp, #16]
   1016a:	ldr	r3, [r2, #0]
   1016c:	adds	r2, #4
   1016e:	str	r2, [sp, #16]
   10170:	strh	r0, [r3, #0]
   10172:	ldr	r3, [sp, #20]
   10174:	adds	r3, #1
   10176:	str	r3, [sp, #20]
   10178:	b.n	1002e <__ssvfscanf_r+0xb5e>
   1017a:	bl	c0a0 <__locale_mb_cur_max>
   1017e:	cmp	r6, r0
   10180:	beq.w	f71a <__ssvfscanf_r+0x24a>
   10184:	ldmia.w	fp, {r2, r3}
   10188:	ldrb.w	r0, [r2], #1
   1018c:	str.w	r2, [fp]
   10190:	ldr	r2, [sp, #28]
   10192:	str	r2, [sp, #0]
   10194:	add	r2, sp, #328	; 0x148
   10196:	adds	r5, r6, #1
   10198:	subs	r3, #1
   1019a:	strb	r0, [r2, r6]
   1019c:	str.w	r3, [fp, #4]
   101a0:	mov	r1, r8
   101a2:	mov	r3, r5
   101a4:	mov	r0, sl
   101a6:	bl	11c5c <_mbrtowc_r>
   101aa:	adds	r6, r0, #1
   101ac:	beq.w	f71a <__ssvfscanf_r+0x24a>
   101b0:	cmp	r0, #0
   101b2:	bne.n	1028c <__ssvfscanf_r+0xdbc>
   101b4:	str.w	r0, [r8]
   101b8:	bl	11c20 <iswspace>
   101bc:	cmp	r0, #0
   101be:	beq.w	10322 <__ssvfscanf_r+0xe52>
   101c2:	cmp	r5, #0
   101c4:	beq.w	f988 <__ssvfscanf_r+0x4b8>
   101c8:	add	r3, sp, #328	; 0x148
   101ca:	adds	r4, r3, r5
   101cc:	subs	r5, #1
   101ce:	mov	r2, fp
   101d0:	ldrb.w	r1, [r4, #-1]!
   101d4:	mov	r0, sl
   101d6:	bl	12c7c <_sungetc_r>
   101da:	cmp	r5, #0
   101dc:	bne.n	101cc <__ssvfscanf_r+0xcfc>
   101de:	b.w	f988 <__ssvfscanf_r+0x4b8>
   101e2:	bic.w	r5, r5, #896	; 0x380
   101e6:	cbz	r7, 101ec <__ssvfscanf_r+0xd1c>
   101e8:	subs	r7, #1
   101ea:	adds	r4, #1
   101ec:	add.w	r8, r8, #1
   101f0:	b.n	ffd4 <__ssvfscanf_r+0xb04>
   101f2:	ldr	r2, [sp, #16]
   101f4:	ldr	r3, [r2, #0]
   101f6:	adds	r2, #4
   101f8:	str	r2, [sp, #16]
   101fa:	str	r0, [r3, #0]
   101fc:	b.n	10172 <__ssvfscanf_r+0xca2>
   101fe:	bic.w	r5, r5, #1920	; 0x780
   10202:	movs	r3, #1
   10204:	b.n	fd04 <__ssvfscanf_r+0x834>
   10206:	ldrb.w	r1, [r6, #-1]
   1020a:	mov	r2, fp
   1020c:	mov	r0, sl
   1020e:	bl	12c7c <_sungetc_r>
   10212:	subs	r6, #1
   10214:	b.n	1001e <__ssvfscanf_r+0xb4e>
   10216:	add.w	r8, sp, #60	; 0x3c
   1021a:	b.w	f96e <__ssvfscanf_r+0x49e>
   1021e:	bic.w	r5, r5, #1920	; 0x780
   10222:	mov.w	r8, #1
   10226:	b.n	fd04 <__ssvfscanf_r+0x834>
   10228:	ldr	r3, [sp, #36]	; 0x24
   1022a:	subs	r6, r6, r3
   1022c:	negs	r2, r6
   1022e:	cmp	r6, #0
   10230:	beq.w	fe54 <__ssvfscanf_r+0x984>
   10234:	addw	r3, sp, #667	; 0x29b
   10238:	cmp	r9, r3
   1023a:	it	cs
   1023c:	addwcs	r9, sp, #666	; 0x29a
   10240:	mov	r0, r9
   10242:	ldr	r1, [pc, #184]	; (102fc <__ssvfscanf_r+0xe2c>)
   10244:	bl	cd14 <sprintf>
   10248:	b.n	fe54 <__ssvfscanf_r+0x984>
   1024a:	ldr	r4, [sp, #52]	; 0x34
   1024c:	mov	r1, r4
   1024e:	movs	r3, #10
   10250:	adds	r1, #1
   10252:	mov	r0, sl
   10254:	bl	df38 <_strtol_r>
   10258:	ldr	r3, [sp, #44]	; 0x2c
   1025a:	mov	r9, r4
   1025c:	subs	r2, r0, r3
   1025e:	b.n	10234 <__ssvfscanf_r+0xd64>
   10260:	ands.w	r2, r5, #1
   10264:	bne.n	101f2 <__ssvfscanf_r+0xd22>
   10266:	lsls	r4, r5, #30
   10268:	bpl.n	101f2 <__ssvfscanf_r+0xd22>
   1026a:	ldr	r3, [sp, #24]
   1026c:	mov	r1, r3
   1026e:	ldr	r3, [pc, #144]	; (10300 <__ssvfscanf_r+0xe30>)
   10270:	cmp	r1, r3
   10272:	mov	r0, sl
   10274:	ldr	r3, [sp, #12]
   10276:	ldr	r1, [sp, #32]
   10278:	beq.n	10344 <__ssvfscanf_r+0xe74>
   1027a:	bl	127bc <_strtoll_r>
   1027e:	ldr	r2, [sp, #16]
   10280:	ldr	r3, [r2, #0]
   10282:	adds	r2, #4
   10284:	str	r2, [sp, #16]
   10286:	strd	r0, r1, [r3]
   1028a:	b.n	10172 <__ssvfscanf_r+0xca2>
   1028c:	adds	r0, #2
   1028e:	bne.n	102d2 <__ssvfscanf_r+0xe02>
   10290:	mov	r6, r5
   10292:	ldr.w	r3, [fp, #4]
   10296:	cmp	r3, #0
   10298:	bgt.w	f970 <__ssvfscanf_r+0x4a0>
   1029c:	mov	r1, fp
   1029e:	mov	r0, sl
   102a0:	bl	12d00 <__ssrefill_r>
   102a4:	cmp	r0, #0
   102a6:	beq.w	f970 <__ssvfscanf_r+0x4a0>
   102aa:	cmp	r6, #0
   102ac:	bne.w	f71a <__ssvfscanf_r+0x24a>
   102b0:	b.w	f988 <__ssvfscanf_r+0x4b8>
   102b4:	ldr	r3, [sp, #32]
   102b6:	cmp	r9, r3
   102b8:	bls.w	f56c <__ssvfscanf_r+0x9c>
   102bc:	ldrb.w	r1, [r9, #-1]!
   102c0:	mov	r2, fp
   102c2:	mov	r0, sl
   102c4:	bl	12c7c <_sungetc_r>
   102c8:	ldr	r3, [sp, #32]
   102ca:	cmp	r9, r3
   102cc:	bne.n	102bc <__ssvfscanf_r+0xdec>
   102ce:	b.w	f56c <__ssvfscanf_r+0x9c>
   102d2:	ldr.w	r0, [r8]
   102d6:	b.n	101b8 <__ssvfscanf_r+0xce8>
   102d8:	ldr	r3, [sp, #32]
   102da:	cmp	r9, r3
   102dc:	bls.w	f56c <__ssvfscanf_r+0x9c>
   102e0:	ldrb.w	r1, [r9, #-1]!
   102e4:	mov	r2, fp
   102e6:	mov	r0, sl
   102e8:	bl	12c7c <_sungetc_r>
   102ec:	ldr	r3, [sp, #32]
   102ee:	cmp	r9, r3
   102f0:	bne.n	102e0 <__ssvfscanf_r+0xe10>
   102f2:	b.w	f56c <__ssvfscanf_r+0x9c>
   102f6:	nop
   102f8:	.word	0x20000a68
   102fc:	.word	0x20001a44
   10300:	.word	0x00012949
   10304:	ldr	r3, [sp, #32]
   10306:	cmp	r9, r3
   10308:	bls.w	f56c <__ssvfscanf_r+0x9c>
   1030c:	ldrb.w	r1, [r9, #-1]!
   10310:	mov	r2, fp
   10312:	mov	r0, sl
   10314:	bl	12c7c <_sungetc_r>
   10318:	ldr	r3, [sp, #32]
   1031a:	cmp	r9, r3
   1031c:	bne.n	1030c <__ssvfscanf_r+0xe3c>
   1031e:	b.w	f56c <__ssvfscanf_r+0x9c>
   10322:	add	r7, r5
   10324:	subs	r4, #1
   10326:	cmp.w	r9, #0
   1032a:	bne.n	10334 <__ssvfscanf_r+0xe64>
   1032c:	add.w	r8, r8, #4
   10330:	mov	r6, r9
   10332:	b.n	10292 <__ssvfscanf_r+0xdc2>
   10334:	mov	r6, r0
   10336:	b.n	10292 <__ssvfscanf_r+0xdc2>
   10338:	bl	bcf0 <nanf>
   1033c:	str	r5, [sp, #16]
   1033e:	vstr	s0, [r4]
   10342:	b.n	fe8a <__ssvfscanf_r+0x9ba>
   10344:	bl	12b58 <_strtoull_r>
   10348:	b.n	1027e <__ssvfscanf_r+0xdae>
   1034a:	nop

0001034c <_vdprintf_r>:
   1034c:	push	{r4, r5, r6, r7, lr}
   1034e:	sub.w	sp, sp, #532	; 0x214
   10352:	add	r5, sp, #16
   10354:	str	r3, [sp, #0]
   10356:	mov	r7, r1
   10358:	mov	r3, r2
   1035a:	mov.w	r4, #512	; 0x200
   1035e:	add	r2, sp, #12
   10360:	mov	r1, r5
   10362:	str	r4, [sp, #12]
   10364:	mov	r6, r0
   10366:	bl	12e38 <_vasnprintf_r>
   1036a:	cbz	r0, 10390 <_vdprintf_r+0x44>
   1036c:	mov	r4, r0
   1036e:	mov	r2, r0
   10370:	mov	r1, r7
   10372:	ldr	r3, [sp, #12]
   10374:	mov	r0, r6
   10376:	bl	103cc <_write_r>
   1037a:	cmp	r4, r5
   1037c:	str	r0, [sp, #12]
   1037e:	beq.n	1038a <_vdprintf_r+0x3e>
   10380:	mov	r0, r6
   10382:	mov	r1, r4
   10384:	bl	112e8 <_free_r>
   10388:	ldr	r0, [sp, #12]
   1038a:	add.w	sp, sp, #532	; 0x214
   1038e:	pop	{r4, r5, r6, r7, pc}
   10390:	mov.w	r0, #4294967295
   10394:	b.n	1038a <_vdprintf_r+0x3e>
   10396:	nop

00010398 <vdprintf>:
   10398:	push	{r4}
   1039a:	ldr	r4, [pc, #16]	; (103ac <vdprintf+0x14>)
   1039c:	mov	r3, r2
   1039e:	mov	r2, r1
   103a0:	mov	r1, r0
   103a2:	ldr	r0, [r4, #0]
   103a4:	ldr.w	r4, [sp], #4
   103a8:	b.w	1034c <_vdprintf_r>
   103ac:	.word	0x20002508

000103b0 <__ascii_wctomb>:
   103b0:	cbz	r1, 103bc <__ascii_wctomb+0xc>
   103b2:	cmp	r2, #255	; 0xff
   103b4:	bhi.n	103c0 <__ascii_wctomb+0x10>
   103b6:	strb	r2, [r1, #0]
   103b8:	movs	r0, #1
   103ba:	bx	lr
   103bc:	mov	r0, r1
   103be:	bx	lr
   103c0:	movs	r3, #138	; 0x8a
   103c2:	str	r3, [r0, #0]
   103c4:	mov.w	r0, #4294967295
   103c8:	bx	lr
   103ca:	nop

000103cc <_write_r>:
   103cc:	push	{r4, r5, r6, lr}
   103ce:	mov	r5, r1
   103d0:	ldr	r4, [pc, #32]	; (103f4 <_write_r+0x28>)
   103d2:	mov	r1, r2
   103d4:	mov	r6, r0
   103d6:	mov	r2, r3
   103d8:	mov	r0, r5
   103da:	movs	r3, #0
   103dc:	str	r3, [r4, #0]
   103de:	bl	ba54 <_write>
   103e2:	adds	r3, r0, #1
   103e4:	beq.n	103e8 <_write_r+0x1c>
   103e6:	pop	{r4, r5, r6, pc}
   103e8:	ldr	r3, [r4, #0]
   103ea:	cmp	r3, #0
   103ec:	beq.n	103e6 <_write_r+0x1a>
   103ee:	str	r3, [r6, #0]
   103f0:	pop	{r4, r5, r6, pc}
   103f2:	nop
   103f4:	.word	0x20018c40

000103f8 <__register_exitproc>:
   103f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   103fc:	ldr	r4, [pc, #148]	; (10494 <__register_exitproc+0x9c>)
   103fe:	ldr	r5, [r4, #0]
   10400:	ldr.w	r4, [r5, #328]	; 0x148
   10404:	mov	r6, r0
   10406:	mov	r8, r1
   10408:	mov	sl, r2
   1040a:	mov	r9, r3
   1040c:	cbz	r4, 10480 <__register_exitproc+0x88>
   1040e:	ldr	r0, [r4, #4]
   10410:	cmp	r0, #31
   10412:	bgt.n	10444 <__register_exitproc+0x4c>
   10414:	adds	r3, r0, #1
   10416:	cbz	r6, 10436 <__register_exitproc+0x3e>
   10418:	add.w	r5, r4, r0, lsl #2
   1041c:	movs	r2, #1
   1041e:	str.w	sl, [r5, #136]	; 0x88
   10422:	ldr.w	r1, [r4, #392]	; 0x188
   10426:	lsls	r2, r0
   10428:	orrs	r1, r2
   1042a:	cmp	r6, #2
   1042c:	str.w	r1, [r4, #392]	; 0x188
   10430:	str.w	r9, [r5, #264]	; 0x108
   10434:	beq.n	10474 <__register_exitproc+0x7c>
   10436:	adds	r0, #2
   10438:	str	r3, [r4, #4]
   1043a:	str.w	r8, [r4, r0, lsl #2]
   1043e:	movs	r0, #0
   10440:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10444:	ldr	r3, [pc, #80]	; (10498 <__register_exitproc+0xa0>)
   10446:	cbz	r3, 1048a <__register_exitproc+0x92>
   10448:	mov.w	r0, #400	; 0x190
   1044c:	bl	c0d8 <malloc>
   10450:	mov	r4, r0
   10452:	cbz	r0, 1048a <__register_exitproc+0x92>
   10454:	ldr.w	r3, [r5, #328]	; 0x148
   10458:	movs	r7, #0
   1045a:	stmia.w	r0, {r3, r7}
   1045e:	str.w	r4, [r5, #328]	; 0x148
   10462:	mov	r0, r7
   10464:	movs	r3, #1
   10466:	str.w	r7, [r4, #392]	; 0x188
   1046a:	str.w	r7, [r4, #396]	; 0x18c
   1046e:	cmp	r6, #0
   10470:	beq.n	10436 <__register_exitproc+0x3e>
   10472:	b.n	10418 <__register_exitproc+0x20>
   10474:	ldr.w	r1, [r4, #396]	; 0x18c
   10478:	orrs	r2, r1
   1047a:	str.w	r2, [r4, #396]	; 0x18c
   1047e:	b.n	10436 <__register_exitproc+0x3e>
   10480:	add.w	r4, r5, #332	; 0x14c
   10484:	str.w	r4, [r5, #328]	; 0x148
   10488:	b.n	1040e <__register_exitproc+0x16>
   1048a:	mov.w	r0, #4294967295
   1048e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10492:	nop
   10494:	.word	0x20000a64
   10498:	.word	0x0000c0d9

0001049c <quorem>:
   1049c:	ldr	r2, [r0, #16]
   1049e:	ldr	r3, [r1, #16]
   104a0:	cmp	r3, r2
   104a2:	bgt.w	105c0 <quorem+0x124>
   104a6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104aa:	add.w	r8, r3, #4294967295
   104ae:	add.w	r7, r1, #20
   104b2:	add.w	fp, r0, #20
   104b6:	ldr.w	r2, [r7, r8, lsl #2]
   104ba:	ldr.w	r3, [fp, r8, lsl #2]
   104be:	mov.w	r4, r8, lsl #2
   104c2:	sub	sp, #12
   104c4:	adds	r2, #1
   104c6:	udiv	r9, r3, r2
   104ca:	add.w	r3, fp, r4
   104ce:	str	r4, [sp, #0]
   104d0:	add.w	sl, r7, r4
   104d4:	str	r3, [sp, #4]
   104d6:	cmp.w	r9, #0
   104da:	beq.n	10550 <quorem+0xb4>
   104dc:	movs	r5, #0
   104de:	mov	ip, r7
   104e0:	mov	lr, fp
   104e2:	mov	r3, r5
   104e4:	ldr.w	r6, [ip], #4
   104e8:	ldr.w	r2, [lr]
   104ec:	uxth	r4, r6
   104ee:	mla	r5, r9, r4, r5
   104f2:	lsrs	r6, r6, #16
   104f4:	lsrs	r4, r5, #16
   104f6:	mla	r4, r9, r6, r4
   104fa:	uxth	r5, r5
   104fc:	subs	r3, r3, r5
   104fe:	uxth	r6, r4
   10500:	uxtah	r3, r3, r2
   10504:	rsb	r6, r6, r2, lsr #16
   10508:	add.w	r6, r6, r3, asr #16
   1050c:	uxth	r3, r3
   1050e:	orr.w	r3, r3, r6, lsl #16
   10512:	cmp	sl, ip
   10514:	str.w	r3, [lr], #4
   10518:	mov.w	r5, r4, lsr #16
   1051c:	mov.w	r3, r6, asr #16
   10520:	bcs.n	104e4 <quorem+0x48>
   10522:	ldr	r3, [sp, #0]
   10524:	ldr.w	r3, [fp, r3]
   10528:	cbnz	r3, 10550 <quorem+0xb4>
   1052a:	ldr	r4, [sp, #4]
   1052c:	subs	r3, r4, #4
   1052e:	cmp	fp, r3
   10530:	bcs.n	1054c <quorem+0xb0>
   10532:	ldr.w	r3, [r4, #-4]
   10536:	cbnz	r3, 1054c <quorem+0xb0>
   10538:	sub.w	r3, r4, #8
   1053c:	b.n	10544 <quorem+0xa8>
   1053e:	ldr	r2, [r3, #0]
   10540:	subs	r3, #4
   10542:	cbnz	r2, 1054c <quorem+0xb0>
   10544:	cmp	fp, r3
   10546:	add.w	r8, r8, #4294967295
   1054a:	bcc.n	1053e <quorem+0xa2>
   1054c:	str.w	r8, [r0, #16]
   10550:	mov	r4, r0
   10552:	bl	12160 <__mcmp>
   10556:	cmp	r0, #0
   10558:	blt.n	105b8 <quorem+0x11c>
   1055a:	add.w	r9, r9, #1
   1055e:	mov	r5, fp
   10560:	movs	r3, #0
   10562:	ldr.w	r1, [r7], #4
   10566:	ldr	r0, [r5, #0]
   10568:	uxth	r2, r1
   1056a:	subs	r2, r3, r2
   1056c:	lsrs	r1, r1, #16
   1056e:	uxtah	r2, r2, r0
   10572:	rsb	r3, r1, r0, lsr #16
   10576:	add.w	r3, r3, r2, asr #16
   1057a:	uxth	r1, r2
   1057c:	orr.w	r1, r1, r3, lsl #16
   10580:	cmp	sl, r7
   10582:	str.w	r1, [r5], #4
   10586:	mov.w	r3, r3, asr #16
   1058a:	bcs.n	10562 <quorem+0xc6>
   1058c:	ldr.w	r2, [fp, r8, lsl #2]
   10590:	add.w	r3, fp, r8, lsl #2
   10594:	cbnz	r2, 105b8 <quorem+0x11c>
   10596:	subs	r2, r3, #4
   10598:	cmp	fp, r2
   1059a:	bcs.n	105b4 <quorem+0x118>
   1059c:	ldr.w	r2, [r3, #-4]
   105a0:	cbnz	r2, 105b4 <quorem+0x118>
   105a2:	subs	r3, #8
   105a4:	b.n	105ac <quorem+0x110>
   105a6:	ldr	r2, [r3, #0]
   105a8:	subs	r3, #4
   105aa:	cbnz	r2, 105b4 <quorem+0x118>
   105ac:	cmp	fp, r3
   105ae:	add.w	r8, r8, #4294967295
   105b2:	bcc.n	105a6 <quorem+0x10a>
   105b4:	str.w	r8, [r4, #16]
   105b8:	mov	r0, r9
   105ba:	add	sp, #12
   105bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105c0:	movs	r0, #0
   105c2:	bx	lr
   105c4:	movs	r0, r0
	...

000105c8 <_dtoa_r>:
   105c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105cc:	vmov	r6, r7, d0
   105d0:	sub	sp, #76	; 0x4c
   105d2:	ldr	r5, [r0, #64]	; 0x40
   105d4:	str	r1, [sp, #4]
   105d6:	mov	r4, r0
   105d8:	mov	r8, r2
   105da:	str	r3, [sp, #16]
   105dc:	vmov	sl, s0
   105e0:	mov	fp, r7
   105e2:	cbz	r5, 105f8 <_dtoa_r+0x30>
   105e4:	ldr	r2, [r0, #68]	; 0x44
   105e6:	str	r2, [r5, #4]
   105e8:	movs	r3, #1
   105ea:	lsls	r3, r2
   105ec:	str	r3, [r5, #8]
   105ee:	mov	r1, r5
   105f0:	bl	11d04 <_Bfree>
   105f4:	movs	r3, #0
   105f6:	str	r3, [r4, #64]	; 0x40
   105f8:	cmp.w	fp, #0
   105fc:	mov	r6, fp
   105fe:	blt.n	1066a <_dtoa_r+0xa2>
   10600:	ldr	r2, [sp, #112]	; 0x70
   10602:	movs	r3, #0
   10604:	str	r3, [r2, #0]
   10606:	ldr	r3, [pc, #784]	; (10918 <_dtoa_r+0x350>)
   10608:	mov	r2, r3
   1060a:	ands	r3, r6
   1060c:	cmp	r3, r2
   1060e:	beq.n	1063c <_dtoa_r+0x74>
   10610:	vmov	d7, sl, fp
   10614:	vcmp.f64	d7, #0.0
   10618:	vmrs	APSR_nzcv, fpscr
   1061c:	strd	sl, fp, [sp, #8]
   10620:	bne.n	10678 <_dtoa_r+0xb0>
   10622:	ldr	r2, [sp, #16]
   10624:	movs	r3, #1
   10626:	str	r3, [r2, #0]
   10628:	ldr	r3, [sp, #116]	; 0x74
   1062a:	cmp	r3, #0
   1062c:	beq.w	1079e <_dtoa_r+0x1d6>
   10630:	ldr	r0, [pc, #744]	; (1091c <_dtoa_r+0x354>)
   10632:	str	r0, [r3, #0]
   10634:	subs	r0, #1
   10636:	add	sp, #76	; 0x4c
   10638:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1063c:	ldr	r2, [sp, #16]
   1063e:	movw	r3, #9999	; 0x270f
   10642:	str	r3, [r2, #0]
   10644:	cmp.w	sl, #0
   10648:	beq.w	10770 <_dtoa_r+0x1a8>
   1064c:	ldr	r0, [pc, #720]	; (10920 <_dtoa_r+0x358>)
   1064e:	ldr	r3, [sp, #116]	; 0x74
   10650:	cmp	r3, #0
   10652:	beq.n	10636 <_dtoa_r+0x6e>
   10654:	ldrb	r3, [r0, #3]
   10656:	cmp	r3, #0
   10658:	beq.w	107a2 <_dtoa_r+0x1da>
   1065c:	add.w	r3, r0, #8
   10660:	ldr	r2, [sp, #116]	; 0x74
   10662:	str	r3, [r2, #0]
   10664:	add	sp, #76	; 0x4c
   10666:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1066a:	ldr	r2, [sp, #112]	; 0x70
   1066c:	movs	r3, #1
   1066e:	bic.w	r6, fp, #2147483648	; 0x80000000
   10672:	str	r3, [r2, #0]
   10674:	mov	fp, r6
   10676:	b.n	10606 <_dtoa_r+0x3e>
   10678:	add	r1, sp, #68	; 0x44
   1067a:	add	r2, sp, #64	; 0x40
   1067c:	vldr	d0, [sp, #8]
   10680:	mov	r0, r4
   10682:	bl	123dc <__d2b>
   10686:	lsrs	r1, r6, #20
   10688:	str	r0, [sp, #28]
   1068a:	bne.n	10782 <_dtoa_r+0x1ba>
   1068c:	ldr	r0, [sp, #64]	; 0x40
   1068e:	ldr	r1, [sp, #68]	; 0x44
   10690:	add	r1, r0
   10692:	addw	r3, r1, #1074	; 0x432
   10696:	cmp	r3, #32
   10698:	ble.w	10b1e <_dtoa_r+0x556>
   1069c:	rsb	r3, r3, #64	; 0x40
   106a0:	addw	r2, r1, #1042	; 0x412
   106a4:	lsls	r6, r3
   106a6:	lsr.w	r3, sl, r2
   106aa:	orrs	r3, r6
   106ac:	vmov	s15, r3
   106b0:	vcvt.f64.u32	d7, s15
   106b4:	movs	r5, #1
   106b6:	vmov	r2, r3, d7
   106ba:	subs	r1, #1
   106bc:	sub.w	r3, r3, #32505856	; 0x1f00000
   106c0:	str	r5, [sp, #40]	; 0x28
   106c2:	vmov	d7, r2, r3
   106c6:	vmov.f64	d6, #120	; 0x3fc00000  1.5
   106ca:	vldr	d4, [pc, #564]	; 10900 <_dtoa_r+0x338>
   106ce:	vsub.f64	d6, d7, d6
   106d2:	vldr	d7, [pc, #564]	; 10908 <_dtoa_r+0x340>
   106d6:	vldr	d5, [pc, #568]	; 10910 <_dtoa_r+0x348>
   106da:	vfma.f64	d7, d6, d4
   106de:	vmov	s13, r1
   106e2:	vcvt.f64.s32	d6, s13
   106e6:	vfma.f64	d7, d6, d5
   106ea:	vcvt.s32.f64	s13, d7
   106ee:	vcmpe.f64	d7, #0.0
   106f2:	vmrs	APSR_nzcv, fpscr
   106f6:	vstr	s13, [sp, #8]
   106fa:	bmi.w	10936 <_dtoa_r+0x36e>
   106fe:	ldr	r5, [sp, #8]
   10700:	cmp	r5, #22
   10702:	bhi.w	10930 <_dtoa_r+0x368>
   10706:	ldr	r3, [pc, #540]	; (10924 <_dtoa_r+0x35c>)
   10708:	add.w	r3, r3, r5, lsl #3
   1070c:	vldr	d7, [r3]
   10710:	vmov	d6, sl, fp
   10714:	vcmpe.f64	d7, d6
   10718:	vmrs	APSR_nzcv, fpscr
   1071c:	ble.w	10b2c <_dtoa_r+0x564>
   10720:	subs	r3, r5, #1
   10722:	str	r3, [sp, #8]
   10724:	movs	r3, #0
   10726:	str	r3, [sp, #48]	; 0x30
   10728:	subs	r1, r0, r1
   1072a:	subs.w	r9, r1, #1
   1072e:	bmi.w	10960 <_dtoa_r+0x398>
   10732:	movs	r3, #0
   10734:	str	r3, [sp, #24]
   10736:	ldr	r3, [sp, #8]
   10738:	cmp	r3, #0
   1073a:	blt.w	1094e <_dtoa_r+0x386>
   1073e:	add	r9, r3
   10740:	str	r3, [sp, #44]	; 0x2c
   10742:	movs	r3, #0
   10744:	str	r3, [sp, #20]
   10746:	ldr	r3, [sp, #4]
   10748:	cmp	r3, #9
   1074a:	bhi.n	107a6 <_dtoa_r+0x1de>
   1074c:	cmp	r3, #5
   1074e:	ble.w	11210 <_dtoa_r+0xc48>
   10752:	subs	r3, #4
   10754:	str	r3, [sp, #4]
   10756:	movs	r3, #0
   10758:	str	r3, [sp, #56]	; 0x38
   1075a:	ldr	r3, [sp, #4]
   1075c:	subs	r3, #2
   1075e:	cmp	r3, #3
   10760:	bhi.w	11222 <_dtoa_r+0xc5a>
   10764:	tbh	[pc, r3, lsl #1]
   10768:	.word	0x01e502a9
   1076c:	.word	0x03c802b5
   10770:	ldr	r3, [pc, #428]	; (10920 <_dtoa_r+0x358>)
   10772:	ldr	r2, [pc, #436]	; (10928 <_dtoa_r+0x360>)
   10774:	ubfx	r0, r6, #0, #20
   10778:	cmp	r0, #0
   1077a:	ite	ne
   1077c:	movne	r0, r3
   1077e:	moveq	r0, r2
   10780:	b.n	1064e <_dtoa_r+0x86>
   10782:	ldrd	r2, r3, [sp, #8]
   10786:	ubfx	r0, r3, #0, #20
   1078a:	orr.w	r3, r0, #1069547520	; 0x3fc00000
   1078e:	movs	r5, #0
   10790:	subw	r1, r1, #1023	; 0x3ff
   10794:	orr.w	r3, r3, #3145728	; 0x300000
   10798:	ldr	r0, [sp, #64]	; 0x40
   1079a:	str	r5, [sp, #40]	; 0x28
   1079c:	b.n	106c2 <_dtoa_r+0xfa>
   1079e:	ldr	r0, [pc, #396]	; (1092c <_dtoa_r+0x364>)
   107a0:	b.n	10636 <_dtoa_r+0x6e>
   107a2:	adds	r3, r0, #3
   107a4:	b.n	10660 <_dtoa_r+0x98>
   107a6:	movs	r1, #0
   107a8:	str	r1, [r4, #68]	; 0x44
   107aa:	mov	r0, r4
   107ac:	mov	r8, r1
   107ae:	str	r1, [sp, #4]
   107b0:	bl	11cb8 <_Balloc>
   107b4:	mov.w	r7, #4294967295
   107b8:	movs	r3, #1
   107ba:	str	r0, [sp, #32]
   107bc:	str	r0, [r4, #64]	; 0x40
   107be:	str	r7, [sp, #52]	; 0x34
   107c0:	str	r3, [sp, #36]	; 0x24
   107c2:	ldr	r3, [sp, #68]	; 0x44
   107c4:	cmp	r3, #0
   107c6:	blt.n	108be <_dtoa_r+0x2f6>
   107c8:	ldr	r2, [sp, #8]
   107ca:	cmp	r2, #14
   107cc:	bgt.n	108be <_dtoa_r+0x2f6>
   107ce:	ldr	r3, [pc, #340]	; (10924 <_dtoa_r+0x35c>)
   107d0:	cmp.w	r8, #0
   107d4:	add.w	r3, r3, r2, lsl #3
   107d8:	vldr	d4, [r3]
   107dc:	blt.w	10ce8 <_dtoa_r+0x720>
   107e0:	vneg.f64	d2, d4
   107e4:	vmov	d7, sl, fp
   107e8:	vdiv.f64	d6, d7, d4
   107ec:	vcvt.s32.f64	s12, d6
   107f0:	ldr	r2, [sp, #32]
   107f2:	vmov	r3, s12
   107f6:	cmp	r7, #1
   107f8:	add.w	r3, r3, #48	; 0x30
   107fc:	vcvt.f64.s32	d5, s12
   10800:	add.w	fp, r2, #1
   10804:	strb	r3, [r2, #0]
   10806:	vfma.f64	d7, d2, d5
   1080a:	beq.n	10852 <_dtoa_r+0x28a>
   1080c:	vmov.f64	d3, #36	; 0x41200000  10.0
   10810:	vmul.f64	d7, d7, d3
   10814:	vcmp.f64	d7, #0.0
   10818:	vmrs	APSR_nzcv, fpscr
   1081c:	beq.n	10894 <_dtoa_r+0x2cc>
   1081e:	ldr	r2, [sp, #32]
   10820:	b.n	10830 <_dtoa_r+0x268>
   10822:	vmul.f64	d7, d7, d3
   10826:	vcmp.f64	d7, #0.0
   1082a:	vmrs	APSR_nzcv, fpscr
   1082e:	beq.n	10894 <_dtoa_r+0x2cc>
   10830:	vdiv.f64	d6, d7, d4
   10834:	vcvt.s32.f64	s12, d6
   10838:	vmov	r3, s12
   1083c:	adds	r3, #48	; 0x30
   1083e:	strb.w	r3, [fp], #1
   10842:	rsb	r3, r2, fp
   10846:	cmp	r3, r7
   10848:	vcvt.f64.s32	d5, s12
   1084c:	vfma.f64	d7, d2, d5
   10850:	bne.n	10822 <_dtoa_r+0x25a>
   10852:	vadd.f64	d7, d7, d7
   10856:	vcmpe.f64	d4, d7
   1085a:	vmrs	APSR_nzcv, fpscr
   1085e:	bmi.n	10872 <_dtoa_r+0x2aa>
   10860:	vcmp.f64	d4, d7
   10864:	vmrs	APSR_nzcv, fpscr
   10868:	bne.n	10894 <_dtoa_r+0x2cc>
   1086a:	vmov	r3, s12
   1086e:	lsls	r3, r3, #31
   10870:	bpl.n	10894 <_dtoa_r+0x2cc>
   10872:	ldrb.w	r0, [fp, #-1]
   10876:	ldr	r2, [sp, #32]
   10878:	add.w	r3, fp, #4294967295
   1087c:	b.n	10888 <_dtoa_r+0x2c0>
   1087e:	cmp	r2, r3
   10880:	beq.w	1104e <_dtoa_r+0xa86>
   10884:	ldrb.w	r0, [r3, #-1]!
   10888:	cmp	r0, #57	; 0x39
   1088a:	add.w	fp, r3, #1
   1088e:	beq.n	1087e <_dtoa_r+0x2b6>
   10890:	adds	r0, #1
   10892:	strb	r0, [r3, #0]
   10894:	ldr	r1, [sp, #28]
   10896:	mov	r0, r4
   10898:	bl	11d04 <_Bfree>
   1089c:	movs	r2, #0
   1089e:	ldr	r3, [sp, #8]
   108a0:	strb.w	r2, [fp]
   108a4:	ldr	r2, [sp, #16]
   108a6:	adds	r3, #1
   108a8:	str	r3, [r2, #0]
   108aa:	ldr	r3, [sp, #116]	; 0x74
   108ac:	cmp	r3, #0
   108ae:	beq.w	10f7e <_dtoa_r+0x9b6>
   108b2:	ldr	r0, [sp, #32]
   108b4:	str.w	fp, [r3]
   108b8:	add	sp, #76	; 0x4c
   108ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   108be:	ldr	r2, [sp, #36]	; 0x24
   108c0:	cmp	r2, #0
   108c2:	beq.n	1096c <_dtoa_r+0x3a4>
   108c4:	ldr	r2, [sp, #4]
   108c6:	cmp	r2, #1
   108c8:	ble.w	10d28 <_dtoa_r+0x760>
   108cc:	ldr	r1, [sp, #20]
   108ce:	subs	r2, r7, #1
   108d0:	cmp	r1, r2
   108d2:	blt.w	10f84 <_dtoa_r+0x9bc>
   108d6:	subs	r3, r1, r2
   108d8:	str	r3, [sp, #56]	; 0x38
   108da:	cmp	r7, #0
   108dc:	ldr	r3, [sp, #24]
   108de:	blt.w	1112a <_dtoa_r+0xb62>
   108e2:	str	r3, [sp, #40]	; 0x28
   108e4:	mov	r3, r7
   108e6:	ldr	r2, [sp, #24]
   108e8:	movs	r1, #1
   108ea:	add	r2, r3
   108ec:	mov	r0, r4
   108ee:	str	r2, [sp, #24]
   108f0:	add	r9, r3
   108f2:	bl	11ecc <__i2b>
   108f6:	mov	r6, r0
   108f8:	b.n	10976 <_dtoa_r+0x3ae>
   108fa:	nop
   108fc:	nop.w
   10900:	.word	0x636f4361
   10904:	.word	0x3fd287a7
   10908:	.word	0x8b60c8b3
   1090c:	.word	0x3fc68a28
   10910:	.word	0x509f79fb
   10914:	.word	0x3fd34413
   10918:	.word	0x7ff00000
   1091c:	.word	0x20001a41
   10920:	.word	0x20001a58
   10924:	.word	0x200002a8
   10928:	.word	0x20001a4c
   1092c:	.word	0x20001a40
   10930:	movs	r3, #1
   10932:	str	r3, [sp, #48]	; 0x30
   10934:	b.n	10728 <_dtoa_r+0x160>
   10936:	vcvt.f64.s32	d6, s13
   1093a:	vcmp.f64	d7, d6
   1093e:	vmrs	APSR_nzcv, fpscr
   10942:	beq.w	106fe <_dtoa_r+0x136>
   10946:	ldr	r3, [sp, #8]
   10948:	subs	r3, #1
   1094a:	str	r3, [sp, #8]
   1094c:	b.n	106fe <_dtoa_r+0x136>
   1094e:	ldr	r2, [sp, #24]
   10950:	ldr	r3, [sp, #8]
   10952:	subs	r2, r2, r3
   10954:	negs	r3, r3
   10956:	str	r3, [sp, #20]
   10958:	movs	r3, #0
   1095a:	str	r2, [sp, #24]
   1095c:	str	r3, [sp, #44]	; 0x2c
   1095e:	b.n	10746 <_dtoa_r+0x17e>
   10960:	rsb	r3, r9, #0
   10964:	str	r3, [sp, #24]
   10966:	mov.w	r9, #0
   1096a:	b.n	10736 <_dtoa_r+0x16e>
   1096c:	ldr	r3, [sp, #20]
   1096e:	str	r3, [sp, #56]	; 0x38
   10970:	ldr	r6, [sp, #36]	; 0x24
   10972:	ldr	r3, [sp, #24]
   10974:	str	r3, [sp, #40]	; 0x28
   10976:	ldr	r1, [sp, #40]	; 0x28
   10978:	mov	r3, r1
   1097a:	cbz	r1, 10996 <_dtoa_r+0x3ce>
   1097c:	cmp.w	r9, #0
   10980:	ble.n	10996 <_dtoa_r+0x3ce>
   10982:	cmp	r1, r9
   10984:	ldr	r2, [sp, #24]
   10986:	it	ge
   10988:	movge	r3, r9
   1098a:	subs	r2, r2, r3
   1098c:	str	r2, [sp, #24]
   1098e:	subs	r2, r1, r3
   10990:	str	r2, [sp, #40]	; 0x28
   10992:	rsb	r9, r3, r9
   10996:	ldr	r3, [sp, #20]
   10998:	cmp	r3, #0
   1099a:	ble.w	10e9e <_dtoa_r+0x8d6>
   1099e:	ldr	r2, [sp, #36]	; 0x24
   109a0:	cmp	r2, #0
   109a2:	beq.w	10cda <_dtoa_r+0x712>
   109a6:	ldr	r2, [sp, #56]	; 0x38
   109a8:	cmp	r2, #0
   109aa:	beq.w	10cda <_dtoa_r+0x712>
   109ae:	mov	r1, r6
   109b0:	mov	r0, r4
   109b2:	bl	12010 <__pow5mult>
   109b6:	ldr	r2, [sp, #28]
   109b8:	mov	r1, r0
   109ba:	mov	r6, r0
   109bc:	mov	r0, r4
   109be:	bl	11ee0 <__multiply>
   109c2:	ldr	r1, [sp, #28]
   109c4:	mov	r5, r0
   109c6:	mov	r0, r4
   109c8:	bl	11d04 <_Bfree>
   109cc:	ldr	r3, [sp, #20]
   109ce:	ldr	r2, [sp, #56]	; 0x38
   109d0:	subs	r3, r3, r2
   109d2:	str	r3, [sp, #20]
   109d4:	bne.w	10cd8 <_dtoa_r+0x710>
   109d8:	movs	r1, #1
   109da:	mov	r0, r4
   109dc:	bl	11ecc <__i2b>
   109e0:	ldr	r3, [sp, #44]	; 0x2c
   109e2:	str	r0, [sp, #20]
   109e4:	cmp	r3, #0
   109e6:	beq.w	10d42 <_dtoa_r+0x77a>
   109ea:	mov	r1, r0
   109ec:	mov	r2, r3
   109ee:	mov	r0, r4
   109f0:	bl	12010 <__pow5mult>
   109f4:	ldr	r3, [sp, #4]
   109f6:	str	r0, [sp, #20]
   109f8:	cmp	r3, #1
   109fa:	ble.w	10efe <_dtoa_r+0x936>
   109fe:	movs	r3, #0
   10a00:	str	r3, [sp, #28]
   10a02:	ldr	r2, [sp, #20]
   10a04:	ldr	r3, [r2, #16]
   10a06:	add.w	r3, r2, r3, lsl #2
   10a0a:	ldr	r0, [r3, #16]
   10a0c:	bl	11e30 <__hi0bits>
   10a10:	rsb	r0, r0, #32
   10a14:	add	r0, r9
   10a16:	ands.w	r0, r0, #31
   10a1a:	beq.w	10d3e <_dtoa_r+0x776>
   10a1e:	rsb	r3, r0, #32
   10a22:	cmp	r3, #4
   10a24:	ble.w	11218 <_dtoa_r+0xc50>
   10a28:	rsb	r0, r0, #28
   10a2c:	ldr	r3, [sp, #24]
   10a2e:	add	r3, r0
   10a30:	str	r3, [sp, #24]
   10a32:	ldr	r3, [sp, #40]	; 0x28
   10a34:	add	r3, r0
   10a36:	str	r3, [sp, #40]	; 0x28
   10a38:	add	r9, r0
   10a3a:	ldr	r3, [sp, #24]
   10a3c:	cmp	r3, #0
   10a3e:	ble.n	10a4c <_dtoa_r+0x484>
   10a40:	mov	r1, r5
   10a42:	mov	r2, r3
   10a44:	mov	r0, r4
   10a46:	bl	120b0 <__lshift>
   10a4a:	mov	r5, r0
   10a4c:	cmp.w	r9, #0
   10a50:	ble.n	10a5e <_dtoa_r+0x496>
   10a52:	mov	r2, r9
   10a54:	ldr	r1, [sp, #20]
   10a56:	mov	r0, r4
   10a58:	bl	120b0 <__lshift>
   10a5c:	str	r0, [sp, #20]
   10a5e:	ldr	r3, [sp, #48]	; 0x30
   10a60:	cmp	r3, #0
   10a62:	bne.w	10e68 <_dtoa_r+0x8a0>
   10a66:	cmp	r7, #0
   10a68:	ble.w	10eac <_dtoa_r+0x8e4>
   10a6c:	ldr	r3, [sp, #36]	; 0x24
   10a6e:	cmp	r3, #0
   10a70:	bne.w	10d6a <_dtoa_r+0x7a2>
   10a74:	ldr.w	fp, [sp, #32]
   10a78:	ldr.w	sl, [sp, #20]
   10a7c:	mov	r8, fp
   10a7e:	b.n	10a86 <_dtoa_r+0x4be>
   10a80:	bl	11d18 <__multadd>
   10a84:	mov	r5, r0
   10a86:	mov	r1, sl
   10a88:	mov	r0, r5
   10a8a:	bl	1049c <quorem>
   10a8e:	add.w	r9, r0, #48	; 0x30
   10a92:	strb.w	r9, [r8], #1
   10a96:	rsb	r3, fp, r8
   10a9a:	cmp	r3, r7
   10a9c:	mov.w	r2, #10
   10aa0:	mov.w	r3, #0
   10aa4:	mov	r1, r5
   10aa6:	mov	r0, r4
   10aa8:	blt.n	10a80 <_dtoa_r+0x4b8>
   10aaa:	ldr	r3, [sp, #32]
   10aac:	cmp	r7, #1
   10aae:	ite	ge
   10ab0:	addge	r3, r3, r7
   10ab2:	addlt	r3, #1
   10ab4:	mov	fp, r3
   10ab6:	mov.w	sl, #0
   10aba:	mov	r1, r5
   10abc:	movs	r2, #1
   10abe:	mov	r0, r4
   10ac0:	bl	120b0 <__lshift>
   10ac4:	ldr	r1, [sp, #20]
   10ac6:	str	r0, [sp, #28]
   10ac8:	bl	12160 <__mcmp>
   10acc:	cmp	r0, #0
   10ace:	ble.w	10fea <_dtoa_r+0xa22>
   10ad2:	ldrb.w	r2, [fp, #-1]
   10ad6:	ldr	r1, [sp, #32]
   10ad8:	add.w	r3, fp, #4294967295
   10adc:	b.n	10ae8 <_dtoa_r+0x520>
   10ade:	cmp	r3, r1
   10ae0:	beq.w	10eea <_dtoa_r+0x922>
   10ae4:	ldrb.w	r2, [r3, #-1]!
   10ae8:	cmp	r2, #57	; 0x39
   10aea:	add.w	fp, r3, #1
   10aee:	beq.n	10ade <_dtoa_r+0x516>
   10af0:	adds	r2, #1
   10af2:	strb	r2, [r3, #0]
   10af4:	ldr	r1, [sp, #20]
   10af6:	mov	r0, r4
   10af8:	bl	11d04 <_Bfree>
   10afc:	cmp	r6, #0
   10afe:	beq.w	10894 <_dtoa_r+0x2cc>
   10b02:	cmp.w	sl, #0
   10b06:	beq.n	10b14 <_dtoa_r+0x54c>
   10b08:	cmp	sl, r6
   10b0a:	beq.n	10b14 <_dtoa_r+0x54c>
   10b0c:	mov	r1, sl
   10b0e:	mov	r0, r4
   10b10:	bl	11d04 <_Bfree>
   10b14:	mov	r1, r6
   10b16:	mov	r0, r4
   10b18:	bl	11d04 <_Bfree>
   10b1c:	b.n	10894 <_dtoa_r+0x2cc>
   10b1e:	rsb	r3, r3, #32
   10b22:	lsl.w	r3, sl, r3
   10b26:	vmov	s15, r3
   10b2a:	b.n	106b0 <_dtoa_r+0xe8>
   10b2c:	movs	r3, #0
   10b2e:	str	r3, [sp, #48]	; 0x30
   10b30:	b.n	10728 <_dtoa_r+0x160>
   10b32:	movs	r3, #0
   10b34:	str	r3, [sp, #36]	; 0x24
   10b36:	ldr	r3, [sp, #8]
   10b38:	add	r3, r8
   10b3a:	adds	r7, r3, #1
   10b3c:	cmp	r7, #0
   10b3e:	str	r3, [sp, #52]	; 0x34
   10b40:	ble.w	10f9e <_dtoa_r+0x9d6>
   10b44:	mov	r6, r7
   10b46:	mov	r5, r7
   10b48:	movs	r1, #0
   10b4a:	cmp	r6, #23
   10b4c:	str	r1, [r4, #68]	; 0x44
   10b4e:	bls.n	10b66 <_dtoa_r+0x59e>
   10b50:	movs	r2, #1
   10b52:	movs	r3, #4
   10b54:	lsls	r3, r3, #1
   10b56:	add.w	r0, r3, #20
   10b5a:	cmp	r0, r6
   10b5c:	mov	r1, r2
   10b5e:	add.w	r2, r2, #1
   10b62:	bls.n	10b54 <_dtoa_r+0x58c>
   10b64:	str	r1, [r4, #68]	; 0x44
   10b66:	mov	r0, r4
   10b68:	bl	11cb8 <_Balloc>
   10b6c:	cmp	r5, #14
   10b6e:	str	r0, [sp, #32]
   10b70:	str	r0, [r4, #64]	; 0x40
   10b72:	bhi.w	107c2 <_dtoa_r+0x1fa>
   10b76:	ldr	r3, [sp, #56]	; 0x38
   10b78:	cmp	r3, #0
   10b7a:	beq.w	107c2 <_dtoa_r+0x1fa>
   10b7e:	ldr	r1, [sp, #8]
   10b80:	cmp	r1, #0
   10b82:	strd	sl, fp, [sp, #56]	; 0x38
   10b86:	ble.w	1100c <_dtoa_r+0xa44>
   10b8a:	ldr	r3, [pc, #792]	; (10ea4 <_dtoa_r+0x8dc>)
   10b8c:	and.w	r2, r1, #15
   10b90:	add.w	r2, r3, r2, lsl #3
   10b94:	asrs	r3, r1, #4
   10b96:	lsls	r6, r3, #27
   10b98:	vldr	d6, [r2]
   10b9c:	bpl.w	10f96 <_dtoa_r+0x9ce>
   10ba0:	ldr	r2, [pc, #772]	; (10ea8 <_dtoa_r+0x8e0>)
   10ba2:	vldr	d7, [r2, #32]
   10ba6:	vmov	d4, sl, fp
   10baa:	and.w	r3, r3, #15
   10bae:	movs	r1, #3
   10bb0:	vdiv.f64	d5, d4, d7
   10bb4:	cbz	r3, 10bce <_dtoa_r+0x606>
   10bb6:	ldr	r2, [pc, #752]	; (10ea8 <_dtoa_r+0x8e0>)
   10bb8:	lsls	r5, r3, #31
   10bba:	bpl.n	10bc6 <_dtoa_r+0x5fe>
   10bbc:	vldr	d7, [r2]
   10bc0:	adds	r1, #1
   10bc2:	vmul.f64	d6, d6, d7
   10bc6:	asrs	r3, r3, #1
   10bc8:	add.w	r2, r2, #8
   10bcc:	bne.n	10bb8 <_dtoa_r+0x5f0>
   10bce:	vdiv.f64	d4, d5, d6
   10bd2:	ldr	r3, [sp, #48]	; 0x30
   10bd4:	cbz	r3, 10be6 <_dtoa_r+0x61e>
   10bd6:	vmov.f64	d7, #112	; 0x3f800000  1.0
   10bda:	vcmpe.f64	d4, d7
   10bde:	vmrs	APSR_nzcv, fpscr
   10be2:	bmi.w	11154 <_dtoa_r+0xb8c>
   10be6:	vmov	s15, r1
   10bea:	vcvt.f64.s32	d6, s15
   10bee:	vmov.f64	d7, #28	; 0x40e00000  7.0
   10bf2:	vfma.f64	d7, d6, d4
   10bf6:	vmov	r2, r3, d7
   10bfa:	sub.w	r3, r3, #54525952	; 0x3400000
   10bfe:	cmp	r7, #0
   10c00:	beq.w	10f50 <_dtoa_r+0x988>
   10c04:	ldr	r6, [sp, #8]
   10c06:	mov	r1, r7
   10c08:	ldr	r0, [sp, #36]	; 0x24
   10c0a:	cmp	r0, #0
   10c0c:	beq.w	110aa <_dtoa_r+0xae2>
   10c10:	vmov.f64	d3, #96	; 0x3f000000  0.5
   10c14:	ldr	r0, [pc, #652]	; (10ea4 <_dtoa_r+0x8dc>)
   10c16:	ldr	r5, [sp, #32]
   10c18:	add.w	r0, r0, r1, lsl #3
   10c1c:	vldr	d6, [r0, #-8]
   10c20:	vcvt.s32.f64	s14, d4
   10c24:	vdiv.f64	d5, d3, d6
   10c28:	vmov	r0, s14
   10c2c:	vmov	d6, r2, r3
   10c30:	adds	r0, #48	; 0x30
   10c32:	uxtb	r0, r0
   10c34:	vsub.f64	d5, d5, d6
   10c38:	vcvt.f64.s32	d7, s14
   10c3c:	vsub.f64	d7, d4, d7
   10c40:	vcmpe.f64	d5, d7
   10c44:	vmrs	APSR_nzcv, fpscr
   10c48:	strb	r0, [r5, #0]
   10c4a:	add.w	fp, r5, #1
   10c4e:	bgt.n	10cb6 <_dtoa_r+0x6ee>
   10c50:	vmov.f64	d3, #112	; 0x3f800000  1.0
   10c54:	vsub.f64	d6, d3, d7
   10c58:	vcmpe.f64	d5, d6
   10c5c:	vmrs	APSR_nzcv, fpscr
   10c60:	bgt.w	111c0 <_dtoa_r+0xbf8>
   10c64:	cmp	r1, #1
   10c66:	ble.w	11004 <_dtoa_r+0xa3c>
   10c6a:	vmov.f64	d4, #36	; 0x41200000  10.0
   10c6e:	ldr	r3, [sp, #32]
   10c70:	add	r1, r3
   10c72:	b.n	10c8a <_dtoa_r+0x6c2>
   10c74:	vsub.f64	d6, d3, d7
   10c78:	vcmpe.f64	d6, d5
   10c7c:	vmrs	APSR_nzcv, fpscr
   10c80:	bmi.w	111c0 <_dtoa_r+0xbf8>
   10c84:	cmp	fp, r1
   10c86:	beq.w	11004 <_dtoa_r+0xa3c>
   10c8a:	vmul.f64	d7, d7, d4
   10c8e:	vmul.f64	d5, d5, d4
   10c92:	vcvt.s32.f64	s12, d7
   10c96:	vmov	r3, s12
   10c9a:	add.w	r0, r3, #48	; 0x30
   10c9e:	uxtb	r0, r0
   10ca0:	vcvt.f64.s32	d6, s12
   10ca4:	vsub.f64	d7, d7, d6
   10ca8:	vcmpe.f64	d7, d5
   10cac:	vmrs	APSR_nzcv, fpscr
   10cb0:	strb.w	r0, [fp], #1
   10cb4:	bpl.n	10c74 <_dtoa_r+0x6ac>
   10cb6:	str	r6, [sp, #8]
   10cb8:	b.n	10894 <_dtoa_r+0x2cc>
   10cba:	movs	r3, #0
   10cbc:	str	r3, [sp, #36]	; 0x24
   10cbe:	cmp.w	r8, #0
   10cc2:	ble.w	10fa6 <_dtoa_r+0x9de>
   10cc6:	mov	r6, r8
   10cc8:	mov	r5, r8
   10cca:	str.w	r8, [sp, #52]	; 0x34
   10cce:	mov	r7, r8
   10cd0:	b.n	10b48 <_dtoa_r+0x580>
   10cd2:	movs	r3, #1
   10cd4:	str	r3, [sp, #36]	; 0x24
   10cd6:	b.n	10cbe <_dtoa_r+0x6f6>
   10cd8:	str	r5, [sp, #28]
   10cda:	ldr	r2, [sp, #20]
   10cdc:	ldr	r1, [sp, #28]
   10cde:	mov	r0, r4
   10ce0:	bl	12010 <__pow5mult>
   10ce4:	mov	r5, r0
   10ce6:	b.n	109d8 <_dtoa_r+0x410>
   10ce8:	cmp	r7, #0
   10cea:	bgt.w	107e0 <_dtoa_r+0x218>
   10cee:	bne.w	10f76 <_dtoa_r+0x9ae>
   10cf2:	vmov.f64	d7, #20	; 0x40a00000  5.0
   10cf6:	vmul.f64	d4, d4, d7
   10cfa:	vmov	d7, sl, fp
   10cfe:	vcmpe.f64	d4, d7
   10d02:	vmrs	APSR_nzcv, fpscr
   10d06:	mov	r6, r7
   10d08:	str	r7, [sp, #20]
   10d0a:	blt.w	10ed8 <_dtoa_r+0x910>
   10d0e:	mvn.w	r3, r8
   10d12:	ldr.w	fp, [sp, #32]
   10d16:	str	r3, [sp, #8]
   10d18:	ldr	r1, [sp, #20]
   10d1a:	mov	r0, r4
   10d1c:	bl	11d04 <_Bfree>
   10d20:	cmp	r6, #0
   10d22:	beq.w	10894 <_dtoa_r+0x2cc>
   10d26:	b.n	10b14 <_dtoa_r+0x54c>
   10d28:	ldr	r2, [sp, #40]	; 0x28
   10d2a:	cmp	r2, #0
   10d2c:	beq.w	11134 <_dtoa_r+0xb6c>
   10d30:	ldr	r2, [sp, #20]
   10d32:	str	r2, [sp, #56]	; 0x38
   10d34:	ldr	r2, [sp, #24]
   10d36:	str	r2, [sp, #40]	; 0x28
   10d38:	addw	r3, r3, #1075	; 0x433
   10d3c:	b.n	108e6 <_dtoa_r+0x31e>
   10d3e:	movs	r0, #28
   10d40:	b.n	10a2c <_dtoa_r+0x464>
   10d42:	ldr	r3, [sp, #4]
   10d44:	cmp	r3, #1
   10d46:	ble.w	111ca <_dtoa_r+0xc02>
   10d4a:	ldr	r3, [sp, #44]	; 0x2c
   10d4c:	str	r3, [sp, #28]
   10d4e:	movs	r0, #1
   10d50:	b.n	10a14 <_dtoa_r+0x44c>
   10d52:	mov	r1, r6
   10d54:	movs	r3, #0
   10d56:	movs	r2, #10
   10d58:	mov	r0, r4
   10d5a:	bl	11d18 <__multadd>
   10d5e:	ldr	r3, [sp, #52]	; 0x34
   10d60:	cmp	r3, #0
   10d62:	mov	r6, r0
   10d64:	ble.w	11202 <_dtoa_r+0xc3a>
   10d68:	mov	r7, r3
   10d6a:	ldr	r3, [sp, #40]	; 0x28
   10d6c:	cmp	r3, #0
   10d6e:	ble.n	10d7c <_dtoa_r+0x7b4>
   10d70:	mov	r1, r6
   10d72:	mov	r2, r3
   10d74:	mov	r0, r4
   10d76:	bl	120b0 <__lshift>
   10d7a:	mov	r6, r0
   10d7c:	ldr	r3, [sp, #28]
   10d7e:	cmp	r3, #0
   10d80:	bne.w	11060 <_dtoa_r+0xa98>
   10d84:	mov	r8, r6
   10d86:	ldr	r3, [sp, #32]
   10d88:	subs	r7, #1
   10d8a:	adds	r2, r3, r7
   10d8c:	str	r2, [sp, #36]	; 0x24
   10d8e:	and.w	r2, sl, #1
   10d92:	str	r2, [sp, #40]	; 0x28
   10d94:	mov	r7, r3
   10d96:	ldr.w	fp, [sp, #20]
   10d9a:	mov	r0, r5
   10d9c:	mov	r1, fp
   10d9e:	bl	1049c <quorem>
   10da2:	mov	r1, r6
   10da4:	mov	sl, r0
   10da6:	mov	r0, r5
   10da8:	bl	12160 <__mcmp>
   10dac:	mov	r2, r8
   10dae:	mov	r1, fp
   10db0:	mov	r9, r0
   10db2:	mov	r0, r4
   10db4:	bl	121a4 <__mdiff>
   10db8:	ldr	r3, [r0, #12]
   10dba:	mov	fp, r0
   10dbc:	add.w	r2, sl, #48	; 0x30
   10dc0:	cmp	r3, #0
   10dc2:	bne.n	10e58 <_dtoa_r+0x890>
   10dc4:	mov	r1, r0
   10dc6:	mov	r0, r5
   10dc8:	str	r2, [sp, #28]
   10dca:	bl	12160 <__mcmp>
   10dce:	mov	r1, fp
   10dd0:	str	r0, [sp, #24]
   10dd2:	mov	r0, r4
   10dd4:	bl	11d04 <_Bfree>
   10dd8:	ldr	r3, [sp, #24]
   10dda:	ldr	r2, [sp, #28]
   10ddc:	cbnz	r3, 10dea <_dtoa_r+0x822>
   10dde:	ldr	r1, [sp, #4]
   10de0:	cbnz	r1, 10dea <_dtoa_r+0x822>
   10de2:	ldr	r1, [sp, #40]	; 0x28
   10de4:	cmp	r1, #0
   10de6:	beq.w	111d4 <_dtoa_r+0xc0c>
   10dea:	cmp.w	r9, #0
   10dee:	blt.w	10fb0 <_dtoa_r+0x9e8>
   10df2:	bne.n	10e00 <_dtoa_r+0x838>
   10df4:	ldr	r1, [sp, #4]
   10df6:	cbnz	r1, 10e00 <_dtoa_r+0x838>
   10df8:	ldr	r1, [sp, #40]	; 0x28
   10dfa:	cmp	r1, #0
   10dfc:	beq.w	10fb0 <_dtoa_r+0x9e8>
   10e00:	cmp	r3, #0
   10e02:	bgt.w	11088 <_dtoa_r+0xac0>
   10e06:	ldr	r3, [sp, #36]	; 0x24
   10e08:	strb	r2, [r7, #0]
   10e0a:	add.w	r9, r7, #1
   10e0e:	cmp	r7, r3
   10e10:	mov	fp, r9
   10e12:	beq.w	110a2 <_dtoa_r+0xada>
   10e16:	mov	r1, r5
   10e18:	movs	r3, #0
   10e1a:	movs	r2, #10
   10e1c:	mov	r0, r4
   10e1e:	bl	11d18 <__multadd>
   10e22:	cmp	r6, r8
   10e24:	mov	r5, r0
   10e26:	mov	r1, r6
   10e28:	mov.w	r3, #0
   10e2c:	mov.w	r2, #10
   10e30:	mov	r0, r4
   10e32:	beq.n	10e4c <_dtoa_r+0x884>
   10e34:	bl	11d18 <__multadd>
   10e38:	mov	r1, r8
   10e3a:	mov	r6, r0
   10e3c:	movs	r3, #0
   10e3e:	movs	r2, #10
   10e40:	mov	r0, r4
   10e42:	bl	11d18 <__multadd>
   10e46:	mov	r7, r9
   10e48:	mov	r8, r0
   10e4a:	b.n	10d96 <_dtoa_r+0x7ce>
   10e4c:	bl	11d18 <__multadd>
   10e50:	mov	r7, r9
   10e52:	mov	r6, r0
   10e54:	mov	r8, r0
   10e56:	b.n	10d96 <_dtoa_r+0x7ce>
   10e58:	mov	r1, r0
   10e5a:	mov	r0, r4
   10e5c:	str	r2, [sp, #24]
   10e5e:	bl	11d04 <_Bfree>
   10e62:	movs	r3, #1
   10e64:	ldr	r2, [sp, #24]
   10e66:	b.n	10dea <_dtoa_r+0x822>
   10e68:	ldr	r1, [sp, #20]
   10e6a:	mov	r0, r5
   10e6c:	bl	12160 <__mcmp>
   10e70:	cmp	r0, #0
   10e72:	bge.w	10a66 <_dtoa_r+0x49e>
   10e76:	mov	r1, r5
   10e78:	ldr	r5, [sp, #8]
   10e7a:	movs	r3, #0
   10e7c:	subs	r5, #1
   10e7e:	movs	r2, #10
   10e80:	mov	r0, r4
   10e82:	str	r5, [sp, #8]
   10e84:	bl	11d18 <__multadd>
   10e88:	ldr	r3, [sp, #36]	; 0x24
   10e8a:	mov	r5, r0
   10e8c:	cmp	r3, #0
   10e8e:	bne.w	10d52 <_dtoa_r+0x78a>
   10e92:	ldr	r3, [sp, #52]	; 0x34
   10e94:	cmp	r3, #0
   10e96:	ble.w	111f4 <_dtoa_r+0xc2c>
   10e9a:	mov	r7, r3
   10e9c:	b.n	10a74 <_dtoa_r+0x4ac>
   10e9e:	ldr	r5, [sp, #28]
   10ea0:	b.n	109d8 <_dtoa_r+0x410>
   10ea2:	nop
   10ea4:	.word	0x200002a8
   10ea8:	.word	0x20000280
   10eac:	ldr	r3, [sp, #4]
   10eae:	cmp	r3, #2
   10eb0:	ble.w	10a6c <_dtoa_r+0x4a4>
   10eb4:	cmp	r7, #0
   10eb6:	bne.w	1118c <_dtoa_r+0xbc4>
   10eba:	mov	r3, r7
   10ebc:	ldr	r1, [sp, #20]
   10ebe:	movs	r2, #5
   10ec0:	mov	r0, r4
   10ec2:	bl	11d18 <__multadd>
   10ec6:	mov	r1, r0
   10ec8:	str	r0, [sp, #20]
   10eca:	mov	r0, r5
   10ecc:	bl	12160 <__mcmp>
   10ed0:	cmp	r0, #0
   10ed2:	str	r5, [sp, #28]
   10ed4:	ble.w	10d0e <_dtoa_r+0x746>
   10ed8:	ldr	r2, [sp, #8]
   10eda:	ldr	r1, [sp, #32]
   10edc:	movs	r3, #49	; 0x31
   10ede:	adds	r2, #1
   10ee0:	str	r2, [sp, #8]
   10ee2:	strb	r3, [r1, #0]
   10ee4:	add.w	fp, r1, #1
   10ee8:	b.n	10d18 <_dtoa_r+0x750>
   10eea:	ldr	r2, [sp, #8]
   10eec:	adds	r2, #1
   10eee:	str	r2, [sp, #8]
   10ef0:	ldr	r2, [sp, #32]
   10ef2:	movs	r3, #49	; 0x31
   10ef4:	strb	r3, [r2, #0]
   10ef6:	b.n	10af4 <_dtoa_r+0x52c>
   10ef8:	movs	r3, #1
   10efa:	str	r3, [sp, #36]	; 0x24
   10efc:	b.n	10b36 <_dtoa_r+0x56e>
   10efe:	cmp.w	sl, #0
   10f02:	bne.w	109fe <_dtoa_r+0x436>
   10f06:	ubfx	r3, fp, #0, #20
   10f0a:	cmp	r3, #0
   10f0c:	bne.w	11146 <_dtoa_r+0xb7e>
   10f10:	bic.w	r3, fp, #2147483648	; 0x80000000
   10f14:	lsrs	r3, r3, #20
   10f16:	lsls	r3, r3, #20
   10f18:	cmp	r3, #0
   10f1a:	beq.w	111c6 <_dtoa_r+0xbfe>
   10f1e:	ldr	r3, [sp, #24]
   10f20:	adds	r3, #1
   10f22:	str	r3, [sp, #24]
   10f24:	movs	r3, #1
   10f26:	add.w	r9, r9, #1
   10f2a:	str	r3, [sp, #28]
   10f2c:	ldr	r3, [sp, #44]	; 0x2c
   10f2e:	movs	r0, #1
   10f30:	cmp	r3, #0
   10f32:	beq.w	10a14 <_dtoa_r+0x44c>
   10f36:	b.n	10a02 <_dtoa_r+0x43a>
   10f38:	vmov	s15, r1
   10f3c:	vcvt.f64.s32	d6, s15
   10f40:	vmov.f64	d7, #28	; 0x40e00000  7.0
   10f44:	vfma.f64	d7, d4, d6
   10f48:	vmov	r2, r3, d7
   10f4c:	sub.w	r3, r3, #54525952	; 0x3400000
   10f50:	vmov	d6, r2, r3
   10f54:	vmov.f64	d7, #20	; 0x40a00000  5.0
   10f58:	vsub.f64	d7, d4, d7
   10f5c:	vcmpe.f64	d7, d6
   10f60:	vmrs	APSR_nzcv, fpscr
   10f64:	bgt.w	11122 <_dtoa_r+0xb5a>
   10f68:	vneg.f64	d6, d6
   10f6c:	vcmpe.f64	d7, d6
   10f70:	vmrs	APSR_nzcv, fpscr
   10f74:	bpl.n	11004 <_dtoa_r+0xa3c>
   10f76:	movs	r3, #0
   10f78:	str	r3, [sp, #20]
   10f7a:	mov	r6, r3
   10f7c:	b.n	10d0e <_dtoa_r+0x746>
   10f7e:	ldr	r0, [sp, #32]
   10f80:	b.w	10636 <_dtoa_r+0x6e>
   10f84:	ldr	r3, [sp, #20]
   10f86:	ldr	r1, [sp, #44]	; 0x2c
   10f88:	str	r2, [sp, #20]
   10f8a:	subs	r3, r2, r3
   10f8c:	add	r1, r3
   10f8e:	movs	r3, #0
   10f90:	str	r1, [sp, #44]	; 0x2c
   10f92:	str	r3, [sp, #56]	; 0x38
   10f94:	b.n	108da <_dtoa_r+0x312>
   10f96:	vldr	d5, [sp, #56]	; 0x38
   10f9a:	movs	r1, #2
   10f9c:	b.n	10bb4 <_dtoa_r+0x5ec>
   10f9e:	mov	r5, r7
   10fa0:	movs	r1, #0
   10fa2:	str	r1, [r4, #68]	; 0x44
   10fa4:	b.n	10b66 <_dtoa_r+0x59e>
   10fa6:	movs	r5, #1
   10fa8:	str	r5, [sp, #52]	; 0x34
   10faa:	mov	r7, r5
   10fac:	mov	r8, r5
   10fae:	b.n	10fa0 <_dtoa_r+0x9d8>
   10fb0:	cmp	r3, #0
   10fb2:	mov	r9, r2
   10fb4:	ble.n	10fda <_dtoa_r+0xa12>
   10fb6:	mov	r1, r5
   10fb8:	movs	r2, #1
   10fba:	mov	r0, r4
   10fbc:	bl	120b0 <__lshift>
   10fc0:	ldr	r1, [sp, #20]
   10fc2:	mov	r5, r0
   10fc4:	bl	12160 <__mcmp>
   10fc8:	cmp	r0, #0
   10fca:	ble.w	111e6 <_dtoa_r+0xc1e>
   10fce:	cmp.w	r9, #57	; 0x39
   10fd2:	beq.w	11190 <_dtoa_r+0xbc8>
   10fd6:	add.w	r9, sl, #49	; 0x31
   10fda:	mov	sl, r6
   10fdc:	strb.w	r9, [r7]
   10fe0:	add.w	fp, r7, #1
   10fe4:	mov	r6, r8
   10fe6:	str	r5, [sp, #28]
   10fe8:	b.n	10af4 <_dtoa_r+0x52c>
   10fea:	bne.n	10ff6 <_dtoa_r+0xa2e>
   10fec:	tst.w	r9, #1
   10ff0:	beq.n	10ff6 <_dtoa_r+0xa2e>
   10ff2:	b.n	10ad2 <_dtoa_r+0x50a>
   10ff4:	mov	fp, r2
   10ff6:	ldrb.w	r3, [fp, #-1]
   10ffa:	cmp	r3, #48	; 0x30
   10ffc:	add.w	r2, fp, #4294967295
   11000:	beq.n	10ff4 <_dtoa_r+0xa2c>
   11002:	b.n	10af4 <_dtoa_r+0x52c>
   11004:	ldrd	sl, fp, [sp, #56]	; 0x38
   11008:	b.w	107c2 <_dtoa_r+0x1fa>
   1100c:	ldr	r3, [sp, #8]
   1100e:	negs	r3, r3
   11010:	cmp	r3, #0
   11012:	beq.w	1114c <_dtoa_r+0xb84>
   11016:	ldr	r2, [pc, #556]	; (11244 <_dtoa_r+0xc7c>)
   11018:	and.w	r1, r3, #15
   1101c:	add.w	r2, r2, r1, lsl #3
   11020:	vldr	d7, [r2]
   11024:	vldr	d6, [sp, #56]	; 0x38
   11028:	asrs	r3, r3, #4
   1102a:	vmul.f64	d4, d6, d7
   1102e:	beq.w	111fe <_dtoa_r+0xc36>
   11032:	ldr	r2, [pc, #532]	; (11248 <_dtoa_r+0xc80>)
   11034:	movs	r1, #2
   11036:	lsls	r0, r3, #31
   11038:	bpl.n	11044 <_dtoa_r+0xa7c>
   1103a:	vldr	d7, [r2]
   1103e:	adds	r1, #1
   11040:	vmul.f64	d4, d4, d7
   11044:	asrs	r3, r3, #1
   11046:	add.w	r2, r2, #8
   1104a:	bne.n	11036 <_dtoa_r+0xa6e>
   1104c:	b.n	10bd2 <_dtoa_r+0x60a>
   1104e:	ldr	r1, [sp, #32]
   11050:	movs	r2, #48	; 0x30
   11052:	strb	r2, [r1, #0]
   11054:	ldr	r2, [sp, #8]
   11056:	ldrb.w	r0, [fp, #-1]
   1105a:	adds	r2, #1
   1105c:	str	r2, [sp, #8]
   1105e:	b.n	10890 <_dtoa_r+0x2c8>
   11060:	ldr	r1, [r6, #4]
   11062:	mov	r0, r4
   11064:	bl	11cb8 <_Balloc>
   11068:	ldr	r3, [r6, #16]
   1106a:	adds	r2, r3, #2
   1106c:	mov	r8, r0
   1106e:	lsls	r2, r2, #2
   11070:	add.w	r1, r6, #12
   11074:	adds	r0, #12
   11076:	bl	9920 <memcpy>
   1107a:	mov	r1, r8
   1107c:	movs	r2, #1
   1107e:	mov	r0, r4
   11080:	bl	120b0 <__lshift>
   11084:	mov	r8, r0
   11086:	b.n	10d86 <_dtoa_r+0x7be>
   11088:	cmp	r2, #57	; 0x39
   1108a:	beq.w	11190 <_dtoa_r+0xbc8>
   1108e:	add.w	r9, r2, #1
   11092:	mov	sl, r6
   11094:	strb.w	r9, [r7]
   11098:	add.w	fp, r7, #1
   1109c:	mov	r6, r8
   1109e:	str	r5, [sp, #28]
   110a0:	b.n	10af4 <_dtoa_r+0x52c>
   110a2:	mov	sl, r6
   110a4:	mov	r9, r2
   110a6:	mov	r6, r8
   110a8:	b.n	10aba <_dtoa_r+0x4f2>
   110aa:	ldr	r0, [pc, #408]	; (11244 <_dtoa_r+0xc7c>)
   110ac:	vcvt.s32.f64	s12, d4
   110b0:	subs	r5, r1, #1
   110b2:	add.w	r0, r0, r5, lsl #3
   110b6:	vmov	d7, r2, r3
   110ba:	vldr	d3, [r0]
   110be:	vmov	r3, s12
   110c2:	vmul.f64	d3, d3, d7
   110c6:	ldr	r0, [sp, #32]
   110c8:	adds	r3, #48	; 0x30
   110ca:	cmp	r1, #1
   110cc:	vcvt.f64.s32	d6, s12
   110d0:	strb	r3, [r0, #0]
   110d2:	add.w	fp, r0, #1
   110d6:	vsub.f64	d7, d4, d6
   110da:	beq.n	11106 <_dtoa_r+0xb3e>
   110dc:	vmov.f64	d5, #36	; 0x41200000  10.0
   110e0:	ldr	r3, [sp, #32]
   110e2:	add	r1, r3
   110e4:	mov	r3, fp
   110e6:	vmul.f64	d7, d7, d5
   110ea:	vcvt.s32.f64	s12, d7
   110ee:	vmov	r2, s12
   110f2:	adds	r2, #48	; 0x30
   110f4:	strb.w	r2, [r3], #1
   110f8:	cmp	r1, r3
   110fa:	vcvt.f64.s32	d6, s12
   110fe:	vsub.f64	d7, d7, d6
   11102:	bne.n	110e6 <_dtoa_r+0xb1e>
   11104:	add	fp, r5
   11106:	vmov.f64	d6, #96	; 0x3f000000  0.5
   1110a:	vadd.f64	d5, d3, d6
   1110e:	vcmpe.f64	d5, d7
   11112:	vmrs	APSR_nzcv, fpscr
   11116:	bpl.n	111a0 <_dtoa_r+0xbd8>
   11118:	str	r6, [sp, #8]
   1111a:	ldrb.w	r0, [fp, #-1]
   1111e:	b.w	10876 <_dtoa_r+0x2ae>
   11122:	movs	r3, #0
   11124:	str	r3, [sp, #20]
   11126:	mov	r6, r3
   11128:	b.n	10ed8 <_dtoa_r+0x910>
   1112a:	subs	r3, r3, r7
   1112c:	str	r3, [sp, #40]	; 0x28
   1112e:	movs	r3, #0
   11130:	b.w	108e6 <_dtoa_r+0x31e>
   11134:	ldr	r2, [sp, #20]
   11136:	ldr	r3, [sp, #64]	; 0x40
   11138:	str	r2, [sp, #56]	; 0x38
   1113a:	ldr	r2, [sp, #24]
   1113c:	str	r2, [sp, #40]	; 0x28
   1113e:	rsb	r3, r3, #54	; 0x36
   11142:	b.w	108e6 <_dtoa_r+0x31e>
   11146:	movs	r3, #0
   11148:	str	r3, [sp, #28]
   1114a:	b.n	10f2c <_dtoa_r+0x964>
   1114c:	vldr	d4, [sp, #56]	; 0x38
   11150:	movs	r1, #2
   11152:	b.n	10bd2 <_dtoa_r+0x60a>
   11154:	cmp	r7, #0
   11156:	beq.w	10f38 <_dtoa_r+0x970>
   1115a:	ldr	r0, [sp, #52]	; 0x34
   1115c:	cmp	r0, #0
   1115e:	ble.w	11004 <_dtoa_r+0xa3c>
   11162:	vmov.f64	d5, #36	; 0x41200000  10.0
   11166:	vmov.f64	d7, #28	; 0x40e00000  7.0
   1116a:	adds	r1, #1
   1116c:	vmov	s13, r1
   11170:	vmul.f64	d4, d4, d5
   11174:	ldr	r3, [sp, #8]
   11176:	vcvt.f64.s32	d6, s13
   1117a:	subs	r6, r3, #1
   1117c:	vfma.f64	d7, d4, d6
   11180:	vmov	r2, r3, d7
   11184:	mov	r1, r0
   11186:	sub.w	r3, r3, #54525952	; 0x3400000
   1118a:	b.n	10c08 <_dtoa_r+0x640>
   1118c:	str	r5, [sp, #28]
   1118e:	b.n	10d0e <_dtoa_r+0x746>
   11190:	movs	r2, #57	; 0x39
   11192:	mov	sl, r6
   11194:	str	r5, [sp, #28]
   11196:	mov	r6, r8
   11198:	strb	r2, [r7, #0]
   1119a:	add.w	fp, r7, #1
   1119e:	b.n	10ad6 <_dtoa_r+0x50e>
   111a0:	vsub.f64	d6, d6, d3
   111a4:	vcmpe.f64	d6, d7
   111a8:	vmrs	APSR_nzcv, fpscr
   111ac:	bgt.n	111b2 <_dtoa_r+0xbea>
   111ae:	b.n	11004 <_dtoa_r+0xa3c>
   111b0:	mov	fp, r2
   111b2:	ldrb.w	r3, [fp, #-1]
   111b6:	cmp	r3, #48	; 0x30
   111b8:	add.w	r2, fp, #4294967295
   111bc:	beq.n	111b0 <_dtoa_r+0xbe8>
   111be:	b.n	10cb6 <_dtoa_r+0x6ee>
   111c0:	str	r6, [sp, #8]
   111c2:	b.w	10876 <_dtoa_r+0x2ae>
   111c6:	str	r3, [sp, #28]
   111c8:	b.n	10f2c <_dtoa_r+0x964>
   111ca:	cmp.w	sl, #0
   111ce:	bne.w	10d4a <_dtoa_r+0x782>
   111d2:	b.n	10f06 <_dtoa_r+0x93e>
   111d4:	cmp	r2, #57	; 0x39
   111d6:	mov	fp, r9
   111d8:	mov	r9, r2
   111da:	beq.n	11190 <_dtoa_r+0xbc8>
   111dc:	cmp.w	fp, #0
   111e0:	bgt.w	10fd6 <_dtoa_r+0xa0e>
   111e4:	b.n	10fda <_dtoa_r+0xa12>
   111e6:	bne.w	10fda <_dtoa_r+0xa12>
   111ea:	tst.w	r9, #1
   111ee:	beq.w	10fda <_dtoa_r+0xa12>
   111f2:	b.n	10fce <_dtoa_r+0xa06>
   111f4:	ldr	r3, [sp, #4]
   111f6:	cmp	r3, #2
   111f8:	bgt.n	1120c <_dtoa_r+0xc44>
   111fa:	ldr	r7, [sp, #52]	; 0x34
   111fc:	b.n	10a74 <_dtoa_r+0x4ac>
   111fe:	movs	r1, #2
   11200:	b.n	10bd2 <_dtoa_r+0x60a>
   11202:	ldr	r3, [sp, #4]
   11204:	cmp	r3, #2
   11206:	bgt.n	1120c <_dtoa_r+0xc44>
   11208:	ldr	r7, [sp, #52]	; 0x34
   1120a:	b.n	10d6a <_dtoa_r+0x7a2>
   1120c:	ldr	r7, [sp, #52]	; 0x34
   1120e:	b.n	10eb4 <_dtoa_r+0x8ec>
   11210:	movs	r3, #1
   11212:	str	r3, [sp, #56]	; 0x38
   11214:	b.w	1075a <_dtoa_r+0x192>
   11218:	beq.w	10a3a <_dtoa_r+0x472>
   1121c:	rsb	r0, r0, #60	; 0x3c
   11220:	b.n	10a2c <_dtoa_r+0x464>
   11222:	movs	r5, #0
   11224:	str	r5, [r4, #68]	; 0x44
   11226:	mov	r1, r5
   11228:	mov	r0, r4
   1122a:	bl	11cb8 <_Balloc>
   1122e:	mov.w	r7, #4294967295
   11232:	movs	r3, #1
   11234:	str	r0, [sp, #32]
   11236:	mov	r8, r5
   11238:	str	r0, [r4, #64]	; 0x40
   1123a:	str	r7, [sp, #52]	; 0x34
   1123c:	str	r3, [sp, #36]	; 0x24
   1123e:	b.w	107c2 <_dtoa_r+0x1fa>
   11242:	nop
   11244:	.word	0x200002a8
   11248:	.word	0x20000280

0001124c <_malloc_trim_r>:
   1124c:	push	{r3, r4, r5, r6, r7, lr}
   1124e:	ldr	r7, [pc, #140]	; (112dc <_malloc_trim_r+0x90>)
   11250:	mov	r4, r1
   11252:	mov	r6, r0
   11254:	bl	c908 <__malloc_lock>
   11258:	ldr	r3, [r7, #8]
   1125a:	ldr	r5, [r3, #4]
   1125c:	bic.w	r5, r5, #3
   11260:	subs	r1, r5, r4
   11262:	addw	r1, r1, #4079	; 0xfef
   11266:	bic.w	r1, r1, #4080	; 0xff0
   1126a:	bic.w	r1, r1, #15
   1126e:	sub.w	r4, r1, #4096	; 0x1000
   11272:	cmp.w	r4, #4096	; 0x1000
   11276:	blt.n	11288 <_malloc_trim_r+0x3c>
   11278:	movs	r1, #0
   1127a:	mov	r0, r6
   1127c:	bl	ccf0 <_sbrk_r>
   11280:	ldr	r3, [r7, #8]
   11282:	add	r3, r5
   11284:	cmp	r0, r3
   11286:	beq.n	11292 <_malloc_trim_r+0x46>
   11288:	mov	r0, r6
   1128a:	bl	c90c <__malloc_unlock>
   1128e:	movs	r0, #0
   11290:	pop	{r3, r4, r5, r6, r7, pc}
   11292:	negs	r1, r4
   11294:	mov	r0, r6
   11296:	bl	ccf0 <_sbrk_r>
   1129a:	adds	r0, #1
   1129c:	beq.n	112ba <_malloc_trim_r+0x6e>
   1129e:	ldr	r3, [pc, #64]	; (112e0 <_malloc_trim_r+0x94>)
   112a0:	ldr	r2, [r7, #8]
   112a2:	ldr	r1, [r3, #0]
   112a4:	subs	r5, r5, r4
   112a6:	orr.w	r5, r5, #1
   112aa:	mov	r0, r6
   112ac:	subs	r1, r1, r4
   112ae:	str	r5, [r2, #4]
   112b0:	str	r1, [r3, #0]
   112b2:	bl	c90c <__malloc_unlock>
   112b6:	movs	r0, #1
   112b8:	pop	{r3, r4, r5, r6, r7, pc}
   112ba:	movs	r1, #0
   112bc:	mov	r0, r6
   112be:	bl	ccf0 <_sbrk_r>
   112c2:	ldr	r2, [r7, #8]
   112c4:	subs	r3, r0, r2
   112c6:	cmp	r3, #15
   112c8:	ble.n	11288 <_malloc_trim_r+0x3c>
   112ca:	ldr	r4, [pc, #24]	; (112e4 <_malloc_trim_r+0x98>)
   112cc:	ldr	r1, [pc, #16]	; (112e0 <_malloc_trim_r+0x94>)
   112ce:	ldr	r4, [r4, #0]
   112d0:	orr.w	r3, r3, #1
   112d4:	subs	r0, r0, r4
   112d6:	str	r3, [r2, #4]
   112d8:	str	r0, [r1, #0]
   112da:	b.n	11288 <_malloc_trim_r+0x3c>
   112dc:	.word	0x200020f8
   112e0:	.word	0x20017b48
   112e4:	.word	0x20002500

000112e8 <_free_r>:
   112e8:	cmp	r1, #0
   112ea:	beq.n	11378 <_free_r+0x90>
   112ec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   112f0:	mov	r5, r1
   112f2:	mov	r8, r0
   112f4:	bl	c908 <__malloc_lock>
   112f8:	ldr.w	r7, [r5, #-4]
   112fc:	ldr	r1, [pc, #424]	; (114a8 <_free_r+0x1c0>)
   112fe:	bic.w	r3, r7, #1
   11302:	sub.w	r4, r5, #8
   11306:	adds	r2, r4, r3
   11308:	ldr	r6, [r1, #8]
   1130a:	ldr	r0, [r2, #4]
   1130c:	cmp	r2, r6
   1130e:	bic.w	r0, r0, #3
   11312:	beq.n	113da <_free_r+0xf2>
   11314:	lsls	r6, r7, #31
   11316:	str	r0, [r2, #4]
   11318:	bmi.n	11332 <_free_r+0x4a>
   1131a:	ldr.w	r7, [r5, #-8]
   1131e:	subs	r4, r4, r7
   11320:	add.w	lr, r1, #8
   11324:	ldr	r5, [r4, #8]
   11326:	cmp	r5, lr
   11328:	add	r3, r7
   1132a:	beq.n	1140c <_free_r+0x124>
   1132c:	ldr	r7, [r4, #12]
   1132e:	str	r7, [r5, #12]
   11330:	str	r5, [r7, #8]
   11332:	adds	r5, r2, r0
   11334:	ldr	r5, [r5, #4]
   11336:	lsls	r5, r5, #31
   11338:	bpl.n	113c0 <_free_r+0xd8>
   1133a:	orr.w	r2, r3, #1
   1133e:	str	r2, [r4, #4]
   11340:	str	r3, [r4, r3]
   11342:	cmp.w	r3, #512	; 0x200
   11346:	bcs.n	1137a <_free_r+0x92>
   11348:	lsrs	r3, r3, #3
   1134a:	adds	r2, r3, #1
   1134c:	ldr	r5, [r1, #4]
   1134e:	ldr.w	r7, [r1, r2, lsl #3]
   11352:	str	r7, [r4, #8]
   11354:	movs	r0, #1
   11356:	asrs	r3, r3, #2
   11358:	lsl.w	r3, r0, r3
   1135c:	add.w	r0, r1, r2, lsl #3
   11360:	orrs	r5, r3
   11362:	subs	r0, #8
   11364:	str	r0, [r4, #12]
   11366:	str	r5, [r1, #4]
   11368:	str.w	r4, [r1, r2, lsl #3]
   1136c:	str	r4, [r7, #12]
   1136e:	mov	r0, r8
   11370:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11374:	b.w	c90c <__malloc_unlock>
   11378:	bx	lr
   1137a:	lsrs	r2, r3, #9
   1137c:	cmp	r2, #4
   1137e:	bhi.n	11428 <_free_r+0x140>
   11380:	lsrs	r2, r3, #6
   11382:	add.w	r7, r2, #57	; 0x39
   11386:	lsls	r7, r7, #1
   11388:	add.w	r5, r2, #56	; 0x38
   1138c:	add.w	r0, r1, r7, lsl #2
   11390:	ldr.w	r2, [r1, r7, lsl #2]
   11394:	ldr	r1, [pc, #272]	; (114a8 <_free_r+0x1c0>)
   11396:	subs	r0, #8
   11398:	cmp	r0, r2
   1139a:	beq.n	11438 <_free_r+0x150>
   1139c:	ldr	r1, [r2, #4]
   1139e:	bic.w	r1, r1, #3
   113a2:	cmp	r3, r1
   113a4:	bcs.n	113ac <_free_r+0xc4>
   113a6:	ldr	r2, [r2, #8]
   113a8:	cmp	r0, r2
   113aa:	bne.n	1139c <_free_r+0xb4>
   113ac:	ldr	r0, [r2, #12]
   113ae:	str	r0, [r4, #12]
   113b0:	str	r2, [r4, #8]
   113b2:	str	r4, [r0, #8]
   113b4:	str	r4, [r2, #12]
   113b6:	mov	r0, r8
   113b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   113bc:	b.w	c90c <__malloc_unlock>
   113c0:	ldr	r5, [r2, #8]
   113c2:	ldr	r7, [pc, #232]	; (114ac <_free_r+0x1c4>)
   113c4:	cmp	r5, r7
   113c6:	add	r3, r0
   113c8:	beq.n	1144a <_free_r+0x162>
   113ca:	ldr	r0, [r2, #12]
   113cc:	str	r0, [r5, #12]
   113ce:	orr.w	r2, r3, #1
   113d2:	str	r5, [r0, #8]
   113d4:	str	r2, [r4, #4]
   113d6:	str	r3, [r4, r3]
   113d8:	b.n	11342 <_free_r+0x5a>
   113da:	lsls	r7, r7, #31
   113dc:	add	r3, r0
   113de:	bmi.n	113f0 <_free_r+0x108>
   113e0:	ldr.w	r2, [r5, #-8]
   113e4:	subs	r4, r4, r2
   113e6:	add	r3, r2
   113e8:	ldr	r0, [r4, #8]
   113ea:	ldr	r2, [r4, #12]
   113ec:	str	r2, [r0, #12]
   113ee:	str	r0, [r2, #8]
   113f0:	ldr	r2, [pc, #188]	; (114b0 <_free_r+0x1c8>)
   113f2:	ldr	r2, [r2, #0]
   113f4:	orr.w	r0, r3, #1
   113f8:	cmp	r3, r2
   113fa:	str	r0, [r4, #4]
   113fc:	str	r4, [r1, #8]
   113fe:	bcc.n	1136e <_free_r+0x86>
   11400:	ldr	r3, [pc, #176]	; (114b4 <_free_r+0x1cc>)
   11402:	mov	r0, r8
   11404:	ldr	r1, [r3, #0]
   11406:	bl	1124c <_malloc_trim_r>
   1140a:	b.n	1136e <_free_r+0x86>
   1140c:	adds	r1, r2, r0
   1140e:	ldr	r1, [r1, #4]
   11410:	lsls	r1, r1, #31
   11412:	bmi.n	1149e <_free_r+0x1b6>
   11414:	ldr	r1, [r2, #8]
   11416:	ldr	r2, [r2, #12]
   11418:	str	r2, [r1, #12]
   1141a:	add	r3, r0
   1141c:	orr.w	r0, r3, #1
   11420:	str	r1, [r2, #8]
   11422:	str	r0, [r4, #4]
   11424:	str	r3, [r4, r3]
   11426:	b.n	1136e <_free_r+0x86>
   11428:	cmp	r2, #20
   1142a:	bhi.n	1145c <_free_r+0x174>
   1142c:	add.w	r7, r2, #92	; 0x5c
   11430:	lsls	r7, r7, #1
   11432:	add.w	r5, r2, #91	; 0x5b
   11436:	b.n	1138c <_free_r+0xa4>
   11438:	asrs	r2, r5, #2
   1143a:	ldr	r3, [r1, #4]
   1143c:	movs	r5, #1
   1143e:	lsl.w	r2, r5, r2
   11442:	orrs	r3, r2
   11444:	str	r3, [r1, #4]
   11446:	mov	r2, r0
   11448:	b.n	113ae <_free_r+0xc6>
   1144a:	orr.w	r2, r3, #1
   1144e:	str	r4, [r1, #20]
   11450:	str	r4, [r1, #16]
   11452:	str	r5, [r4, #12]
   11454:	str	r5, [r4, #8]
   11456:	str	r2, [r4, #4]
   11458:	str	r3, [r4, r3]
   1145a:	b.n	1136e <_free_r+0x86>
   1145c:	cmp	r2, #84	; 0x54
   1145e:	bhi.n	1146e <_free_r+0x186>
   11460:	lsrs	r2, r3, #12
   11462:	add.w	r7, r2, #111	; 0x6f
   11466:	lsls	r7, r7, #1
   11468:	add.w	r5, r2, #110	; 0x6e
   1146c:	b.n	1138c <_free_r+0xa4>
   1146e:	cmp.w	r2, #340	; 0x154
   11472:	bhi.n	11482 <_free_r+0x19a>
   11474:	lsrs	r2, r3, #15
   11476:	add.w	r7, r2, #120	; 0x78
   1147a:	lsls	r7, r7, #1
   1147c:	add.w	r5, r2, #119	; 0x77
   11480:	b.n	1138c <_free_r+0xa4>
   11482:	movw	r0, #1364	; 0x554
   11486:	cmp	r2, r0
   11488:	bhi.n	11498 <_free_r+0x1b0>
   1148a:	lsrs	r2, r3, #18
   1148c:	add.w	r7, r2, #125	; 0x7d
   11490:	lsls	r7, r7, #1
   11492:	add.w	r5, r2, #124	; 0x7c
   11496:	b.n	1138c <_free_r+0xa4>
   11498:	movs	r7, #254	; 0xfe
   1149a:	movs	r5, #126	; 0x7e
   1149c:	b.n	1138c <_free_r+0xa4>
   1149e:	orr.w	r2, r3, #1
   114a2:	str	r2, [r4, #4]
   114a4:	str	r3, [r4, r3]
   114a6:	b.n	1136e <_free_r+0x86>
   114a8:	.word	0x200020f8
   114ac:	.word	0x20002100
   114b0:	.word	0x20002504
   114b4:	.word	0x20017b78

000114b8 <rshift>:
   114b8:	ldr	r2, [r0, #16]
   114ba:	asrs	r3, r1, #5
   114bc:	cmp	r3, r2
   114be:	bge.n	1151e <rshift+0x66>
   114c0:	push	{r4, r5, r6, r7, lr}
   114c2:	ands.w	r1, r1, #31
   114c6:	add.w	r6, r0, #20
   114ca:	add.w	r2, r6, r2, lsl #2
   114ce:	add.w	lr, r6, r3, lsl #2
   114d2:	beq.n	11528 <rshift+0x70>
   114d4:	ldr.w	r3, [r6, r3, lsl #2]
   114d8:	add.w	r5, lr, #4
   114dc:	cmp	r2, r5
   114de:	lsr.w	r4, r3, r1
   114e2:	rsb	ip, r1, #32
   114e6:	bls.n	1155c <rshift+0xa4>
   114e8:	add.w	r7, r0, #16
   114ec:	ldr	r3, [r5, #0]
   114ee:	lsl.w	r3, r3, ip
   114f2:	orrs	r3, r4
   114f4:	str.w	r3, [r7, #4]!
   114f8:	ldr.w	r3, [r5], #4
   114fc:	cmp	r2, r5
   114fe:	lsr.w	r4, r3, r1
   11502:	bhi.n	114ec <rshift+0x34>
   11504:	rsb	r2, lr, r2
   11508:	subs	r2, #5
   1150a:	bic.w	r2, r2, #3
   1150e:	adds	r2, #4
   11510:	add	r2, r6
   11512:	str	r4, [r2, #0]
   11514:	cbz	r4, 11518 <rshift+0x60>
   11516:	adds	r2, #4
   11518:	subs	r3, r2, r6
   1151a:	asrs	r3, r3, #2
   1151c:	b.n	1154c <rshift+0x94>
   1151e:	movs	r3, #0
   11520:	str	r3, [r0, #16]
   11522:	movs	r3, #0
   11524:	str	r3, [r0, #20]
   11526:	bx	lr
   11528:	cmp	r2, lr
   1152a:	bls.n	11552 <rshift+0x9a>
   1152c:	add.w	r4, r0, #16
   11530:	mov	r1, lr
   11532:	ldr.w	r5, [r1], #4
   11536:	str.w	r5, [r4, #4]!
   1153a:	cmp	r2, r1
   1153c:	bhi.n	11532 <rshift+0x7a>
   1153e:	mvn.w	r3, lr
   11542:	add	r3, r2
   11544:	bic.w	r3, r3, #3
   11548:	adds	r3, #4
   1154a:	asrs	r3, r3, #2
   1154c:	str	r3, [r0, #16]
   1154e:	cbz	r3, 11556 <rshift+0x9e>
   11550:	pop	{r4, r5, r6, r7, pc}
   11552:	movs	r3, #0
   11554:	str	r3, [r0, #16]
   11556:	movs	r3, #0
   11558:	str	r3, [r0, #20]
   1155a:	pop	{r4, r5, r6, r7, pc}
   1155c:	mov	r2, r6
   1155e:	b.n	11512 <rshift+0x5a>

00011560 <__gethex>:
   11560:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11564:	sub	sp, #44	; 0x2c
   11566:	mov	r9, r1
   11568:	str	r0, [sp, #20]
   1156a:	ldr	r0, [sp, #88]	; 0x58
   1156c:	str	r2, [sp, #12]
   1156e:	str	r3, [sp, #32]
   11570:	bl	11c3c <__localeconv_l>
   11574:	ldr	r3, [r0, #0]
   11576:	str	r3, [sp, #8]
   11578:	mov	r0, r3
   1157a:	mov	r4, r3
   1157c:	bl	cdc0 <strlen>
   11580:	ldr.w	r3, [r9]
   11584:	str	r0, [sp, #0]
   11586:	ldrb	r2, [r3, #2]
   11588:	adds	r1, r4, r0
   1158a:	cmp	r2, #48	; 0x30
   1158c:	ldrb.w	fp, [r1, #-1]
   11590:	bne.w	118e6 <__gethex+0x386>
   11594:	adds	r3, #3
   11596:	mov.w	r8, #0
   1159a:	mov	r4, r3
   1159c:	ldrb.w	r2, [r3], #1
   115a0:	cmp	r2, #48	; 0x30
   115a2:	add.w	r8, r8, #1
   115a6:	beq.n	1159a <__gethex+0x3a>
   115a8:	ldr	r6, [pc, #712]	; (11874 <__gethex+0x314>)
   115aa:	ldrb	r3, [r6, r2]
   115ac:	cmp	r3, #0
   115ae:	beq.w	11792 <__gethex+0x232>
   115b2:	ldrb	r3, [r4, #0]
   115b4:	mov.w	sl, #0
   115b8:	ldrb	r3, [r6, r3]
   115ba:	mov	r5, sl
   115bc:	mov	r7, r4
   115be:	cbz	r3, 115ca <__gethex+0x6a>
   115c0:	ldrb.w	r3, [r7, #1]!
   115c4:	ldrb	r3, [r6, r3]
   115c6:	cmp	r3, #0
   115c8:	bne.n	115c0 <__gethex+0x60>
   115ca:	ldr	r2, [sp, #0]
   115cc:	ldr	r1, [sp, #8]
   115ce:	mov	r0, r7
   115d0:	bl	ce9c <strncmp>
   115d4:	cmp	r0, #0
   115d6:	beq.w	116fe <__gethex+0x19e>
   115da:	ldrb	r3, [r7, #0]
   115dc:	cmp	r5, #0
   115de:	beq.w	118c4 <__gethex+0x364>
   115e2:	subs	r5, r5, r7
   115e4:	lsls	r2, r5, #2
   115e6:	str	r2, [sp, #4]
   115e8:	cmp	r3, #80	; 0x50
   115ea:	beq.w	11710 <__gethex+0x1b0>
   115ee:	cmp	r3, #112	; 0x70
   115f0:	beq.w	11710 <__gethex+0x1b0>
   115f4:	mov	r5, r7
   115f6:	str.w	r7, [r9]
   115fa:	cmp.w	sl, #0
   115fe:	bne.w	11770 <__gethex+0x210>
   11602:	subs	r3, r5, r4
   11604:	subs	r3, #1
   11606:	cmp	r3, #7
   11608:	mov	r1, sl
   1160a:	ble.n	11616 <__gethex+0xb6>
   1160c:	asrs	r3, r3, #1
   1160e:	cmp	r3, #7
   11610:	add.w	r1, r1, #1
   11614:	bgt.n	1160c <__gethex+0xac>
   11616:	ldr	r0, [sp, #20]
   11618:	bl	11cb8 <_Balloc>
   1161c:	mov	r3, r0
   1161e:	adds	r3, #20
   11620:	cmp	r5, r4
   11622:	str	r0, [sp, #16]
   11624:	str	r3, [sp, #28]
   11626:	bls.w	119d0 <__gethex+0x470>
   1162a:	mov	r9, r3
   1162c:	ldr	r3, [sp, #0]
   1162e:	mov.w	r8, #0
   11632:	rsb	r3, r3, #1
   11636:	mov	r7, r8
   11638:	str	r3, [sp, #24]
   1163a:	b.n	1165c <__gethex+0xfc>
   1163c:	cmp	r7, #32
   1163e:	beq.w	11780 <__gethex+0x220>
   11642:	mov	r2, r7
   11644:	adds	r7, #4
   11646:	ldrb.w	r3, [r5, #-1]
   1164a:	ldrb	r3, [r6, r3]
   1164c:	mov	r5, sl
   1164e:	and.w	r3, r3, #15
   11652:	lsls	r3, r2
   11654:	cmp	r5, r4
   11656:	orr.w	r8, r8, r3
   1165a:	bls.n	11688 <__gethex+0x128>
   1165c:	ldrb.w	r3, [r5, #-1]
   11660:	cmp	r3, fp
   11662:	add.w	sl, r5, #4294967295
   11666:	bne.n	1163c <__gethex+0xdc>
   11668:	ldr	r3, [sp, #24]
   1166a:	add	r3, sl
   1166c:	cmp	r3, r4
   1166e:	bcc.n	1163c <__gethex+0xdc>
   11670:	mov	r0, r3
   11672:	ldr	r2, [sp, #0]
   11674:	ldr	r1, [sp, #8]
   11676:	str	r3, [sp, #36]	; 0x24
   11678:	bl	ce9c <strncmp>
   1167c:	ldr	r3, [sp, #36]	; 0x24
   1167e:	cmp	r0, #0
   11680:	bne.n	1163c <__gethex+0xdc>
   11682:	mov	r5, r3
   11684:	cmp	r5, r4
   11686:	bhi.n	1165c <__gethex+0xfc>
   11688:	str.w	r8, [r9], #4
   1168c:	ldr	r3, [sp, #28]
   1168e:	ldr	r2, [sp, #16]
   11690:	rsb	r9, r3, r9
   11694:	mov.w	r3, r9, asr #2
   11698:	str	r3, [r2, #16]
   1169a:	mov	r0, r8
   1169c:	mov.w	r9, r3, lsl #5
   116a0:	bl	11e30 <__hi0bits>
   116a4:	ldr	r3, [sp, #12]
   116a6:	ldr	r6, [r3, #0]
   116a8:	rsb	r0, r0, r9
   116ac:	cmp	r0, r6
   116ae:	bgt.w	11878 <__gethex+0x318>
   116b2:	blt.w	118c8 <__gethex+0x368>
   116b6:	movs	r7, #0
   116b8:	ldr	r3, [sp, #12]
   116ba:	ldr	r2, [sp, #4]
   116bc:	ldr	r3, [r3, #8]
   116be:	cmp	r2, r3
   116c0:	bgt.w	117f2 <__gethex+0x292>
   116c4:	ldr	r0, [sp, #12]
   116c6:	ldr	r1, [sp, #4]
   116c8:	ldr	r3, [r0, #4]
   116ca:	cmp	r1, r3
   116cc:	bge.w	1183a <__gethex+0x2da>
   116d0:	subs	r5, r3, r1
   116d2:	cmp	r6, r5
   116d4:	bgt.w	118f6 <__gethex+0x396>
   116d8:	ldr	r2, [r0, #12]
   116da:	cmp	r2, #2
   116dc:	beq.w	119de <__gethex+0x47e>
   116e0:	cmp	r2, #3
   116e2:	beq.w	1199e <__gethex+0x43e>
   116e6:	cmp	r2, #1
   116e8:	beq.w	119e6 <__gethex+0x486>
   116ec:	ldr	r0, [sp, #20]
   116ee:	ldr	r1, [sp, #16]
   116f0:	bl	11d04 <_Bfree>
   116f4:	ldr	r2, [sp, #80]	; 0x50
   116f6:	movs	r3, #0
   116f8:	str	r3, [r2, #0]
   116fa:	movs	r0, #80	; 0x50
   116fc:	b.n	1177a <__gethex+0x21a>
   116fe:	cmp	r5, #0
   11700:	beq.w	11936 <__gethex+0x3d6>
   11704:	ldrb	r3, [r7, #0]
   11706:	b.n	115e2 <__gethex+0x82>
   11708:	movs	r3, #0
   1170a:	str	r3, [sp, #4]
   1170c:	mov.w	sl, #1
   11710:	ldrb	r3, [r7, #1]
   11712:	cmp	r3, #43	; 0x2b
   11714:	beq.w	11870 <__gethex+0x310>
   11718:	cmp	r3, #45	; 0x2d
   1171a:	beq.n	11808 <__gethex+0x2a8>
   1171c:	adds	r1, r7, #1
   1171e:	movs	r5, #0
   11720:	ldrb	r3, [r6, r3]
   11722:	ldr	r0, [pc, #336]	; (11874 <__gethex+0x314>)
   11724:	subs	r2, r3, #1
   11726:	cmp	r2, #24
   11728:	bhi.w	115f4 <__gethex+0x94>
   1172c:	ldrb	r2, [r1, #1]
   1172e:	ldrb	r2, [r0, r2]
   11730:	subs	r0, r2, #1
   11732:	cmp	r0, #24
   11734:	sub.w	r3, r3, #16
   11738:	add.w	r1, r1, #1
   1173c:	bhi.n	11756 <__gethex+0x1f6>
   1173e:	ldrb.w	r0, [r1, #1]!
   11742:	add.w	r3, r3, r3, lsl #2
   11746:	add.w	r3, r2, r3, lsl #1
   1174a:	ldrb	r2, [r6, r0]
   1174c:	subs	r0, r2, #1
   1174e:	cmp	r0, #24
   11750:	sub.w	r3, r3, #16
   11754:	bls.n	1173e <__gethex+0x1de>
   11756:	cbz	r5, 1175a <__gethex+0x1fa>
   11758:	negs	r3, r3
   1175a:	ldr	r2, [sp, #4]
   1175c:	mov	r5, r7
   1175e:	add	r2, r3
   11760:	mov	r7, r1
   11762:	str	r2, [sp, #4]
   11764:	str.w	r7, [r9]
   11768:	cmp.w	sl, #0
   1176c:	beq.w	11602 <__gethex+0xa2>
   11770:	cmp.w	r8, #0
   11774:	ite	eq
   11776:	moveq	r0, #6
   11778:	movne	r0, #0
   1177a:	add	sp, #44	; 0x2c
   1177c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11780:	str.w	r8, [r9]
   11784:	mov.w	r8, #0
   11788:	add.w	r9, r9, #4
   1178c:	mov	r2, r8
   1178e:	movs	r7, #4
   11790:	b.n	11646 <__gethex+0xe6>
   11792:	ldr	r5, [sp, #0]
   11794:	ldr	r1, [sp, #8]
   11796:	mov	r2, r5
   11798:	mov	r0, r4
   1179a:	bl	ce9c <strncmp>
   1179e:	cmp	r0, #0
   117a0:	beq.n	11810 <__gethex+0x2b0>
   117a2:	ldrb	r3, [r4, #0]
   117a4:	mov	r7, r4
   117a6:	cmp	r3, #80	; 0x50
   117a8:	beq.n	11708 <__gethex+0x1a8>
   117aa:	cmp	r3, #112	; 0x70
   117ac:	beq.n	11708 <__gethex+0x1a8>
   117ae:	str.w	r7, [r9]
   117b2:	b.n	11770 <__gethex+0x210>
   117b4:	ldr	r3, [sp, #16]
   117b6:	ldr	r3, [r3, #8]
   117b8:	cmp	r7, r3
   117ba:	bge.w	11a26 <__gethex+0x4c6>
   117be:	mov	r3, r7
   117c0:	ldr	r0, [sp, #16]
   117c2:	add.w	r2, r0, r3, lsl #2
   117c6:	movs	r1, #1
   117c8:	adds	r3, #1
   117ca:	cmp	r4, #2
   117cc:	str	r3, [r0, #16]
   117ce:	str	r1, [r2, #20]
   117d0:	beq.w	11a04 <__gethex+0x4a4>
   117d4:	cmp	r7, r3
   117d6:	bge.w	11990 <__gethex+0x430>
   117da:	movs	r1, #1
   117dc:	ldr	r0, [sp, #16]
   117de:	bl	114b8 <rshift>
   117e2:	ldr	r3, [sp, #12]
   117e4:	ldr	r2, [sp, #4]
   117e6:	ldr	r3, [r3, #8]
   117e8:	adds	r2, #1
   117ea:	cmp	r2, r3
   117ec:	str	r2, [sp, #4]
   117ee:	ble.w	11996 <__gethex+0x436>
   117f2:	ldr	r0, [sp, #20]
   117f4:	ldr	r1, [sp, #16]
   117f6:	bl	11d04 <_Bfree>
   117fa:	ldr	r2, [sp, #80]	; 0x50
   117fc:	movs	r3, #0
   117fe:	movs	r0, #163	; 0xa3
   11800:	str	r3, [r2, #0]
   11802:	add	sp, #44	; 0x2c
   11804:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11808:	movs	r5, #1
   1180a:	ldrb	r3, [r7, #2]
   1180c:	adds	r1, r7, #2
   1180e:	b.n	11720 <__gethex+0x1c0>
   11810:	ldrb	r2, [r4, r5]
   11812:	ldrb	r3, [r6, r2]
   11814:	adds	r7, r4, r5
   11816:	cmp	r3, #0
   11818:	beq.n	118ee <__gethex+0x38e>
   1181a:	cmp	r2, #48	; 0x30
   1181c:	mov	r4, r7
   1181e:	bne.n	1182a <__gethex+0x2ca>
   11820:	ldrb.w	r3, [r4, #1]!
   11824:	cmp	r3, #48	; 0x30
   11826:	beq.n	11820 <__gethex+0x2c0>
   11828:	ldrb	r3, [r6, r3]
   1182a:	clz	sl, r3
   1182e:	mov	r5, r7
   11830:	mov.w	sl, sl, lsr #5
   11834:	mov.w	r8, #1
   11838:	b.n	115bc <__gethex+0x5c>
   1183a:	movs	r4, #1
   1183c:	cbz	r7, 11858 <__gethex+0x2f8>
   1183e:	ldr	r3, [sp, #12]
   11840:	ldr	r3, [r3, #12]
   11842:	cmp	r3, #2
   11844:	beq.w	11952 <__gethex+0x3f2>
   11848:	cmp	r3, #3
   1184a:	beq.w	1195a <__gethex+0x3fa>
   1184e:	cmp	r3, #1
   11850:	beq.w	119be <__gethex+0x45e>
   11854:	orr.w	r4, r4, #16
   11858:	ldr	r3, [sp, #80]	; 0x50
   1185a:	mov	r2, r3
   1185c:	ldr	r3, [sp, #16]
   1185e:	str	r3, [r2, #0]
   11860:	ldr	r3, [sp, #32]
   11862:	mov	r2, r3
   11864:	ldr	r3, [sp, #4]
   11866:	str	r3, [r2, #0]
   11868:	mov	r0, r4
   1186a:	add	sp, #44	; 0x2c
   1186c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11870:	movs	r5, #0
   11872:	b.n	1180a <__gethex+0x2aa>
   11874:	.word	0x20000860
   11878:	subs	r4, r0, r6
   1187a:	mov	r1, r4
   1187c:	ldr	r0, [sp, #16]
   1187e:	bl	1253c <__any_on>
   11882:	cmp	r0, #0
   11884:	beq.n	118f2 <__gethex+0x392>
   11886:	subs	r2, r4, #1
   11888:	asrs	r1, r2, #5
   1188a:	ldr	r0, [sp, #28]
   1188c:	and.w	r3, r2, #31
   11890:	ldr.w	r1, [r0, r1, lsl #2]
   11894:	movs	r7, #1
   11896:	lsl.w	r3, r7, r3
   1189a:	tst	r3, r1
   1189c:	beq.n	118b4 <__gethex+0x354>
   1189e:	cmp	r2, r7
   118a0:	ble.w	119da <__gethex+0x47a>
   118a4:	subs	r1, r4, #2
   118a6:	ldr	r0, [sp, #16]
   118a8:	bl	1253c <__any_on>
   118ac:	cmp	r0, #0
   118ae:	beq.w	119da <__gethex+0x47a>
   118b2:	movs	r7, #3
   118b4:	ldr	r3, [sp, #4]
   118b6:	ldr	r0, [sp, #16]
   118b8:	add	r3, r4
   118ba:	mov	r1, r4
   118bc:	str	r3, [sp, #4]
   118be:	bl	114b8 <rshift>
   118c2:	b.n	116b8 <__gethex+0x158>
   118c4:	str	r5, [sp, #4]
   118c6:	b.n	115e8 <__gethex+0x88>
   118c8:	subs	r4, r6, r0
   118ca:	ldr	r1, [sp, #16]
   118cc:	ldr	r0, [sp, #20]
   118ce:	mov	r2, r4
   118d0:	bl	120b0 <__lshift>
   118d4:	ldr	r3, [sp, #4]
   118d6:	str	r0, [sp, #16]
   118d8:	subs	r3, r3, r4
   118da:	str	r3, [sp, #4]
   118dc:	mov	r3, r0
   118de:	adds	r3, #20
   118e0:	str	r3, [sp, #28]
   118e2:	movs	r7, #0
   118e4:	b.n	116b8 <__gethex+0x158>
   118e6:	adds	r4, r3, #2
   118e8:	mov.w	r8, #0
   118ec:	b.n	115a8 <__gethex+0x48>
   118ee:	mov	r3, r2
   118f0:	b.n	117a6 <__gethex+0x246>
   118f2:	mov	r7, r0
   118f4:	b.n	118b4 <__gethex+0x354>
   118f6:	subs	r4, r5, #1
   118f8:	cmp	r7, #0
   118fa:	bne.n	1199a <__gethex+0x43a>
   118fc:	cbz	r4, 11908 <__gethex+0x3a8>
   118fe:	mov	r1, r4
   11900:	ldr	r0, [sp, #16]
   11902:	bl	1253c <__any_on>
   11906:	mov	r7, r0
   11908:	asrs	r3, r4, #5
   1190a:	ldr	r2, [sp, #28]
   1190c:	ldr	r0, [sp, #16]
   1190e:	ldr.w	r2, [r2, r3, lsl #2]
   11912:	and.w	r4, r4, #31
   11916:	movs	r3, #1
   11918:	lsl.w	r4, r3, r4
   1191c:	tst	r4, r2
   1191e:	mov	r1, r5
   11920:	it	ne
   11922:	orrne.w	r7, r7, #2
   11926:	bl	114b8 <rshift>
   1192a:	ldr	r3, [sp, #12]
   1192c:	ldr	r3, [r3, #4]
   1192e:	str	r3, [sp, #4]
   11930:	subs	r6, r6, r5
   11932:	movs	r4, #2
   11934:	b.n	1183c <__gethex+0x2dc>
   11936:	ldr	r1, [sp, #0]
   11938:	ldrb	r3, [r7, r1]
   1193a:	ldrb	r2, [r6, r3]
   1193c:	adds	r5, r7, r1
   1193e:	mov	r7, r5
   11940:	cmp	r2, #0
   11942:	beq.w	115e2 <__gethex+0x82>
   11946:	ldrb.w	r3, [r7, #1]!
   1194a:	ldrb	r2, [r6, r3]
   1194c:	cmp	r2, #0
   1194e:	bne.n	11946 <__gethex+0x3e6>
   11950:	b.n	115e2 <__gethex+0x82>
   11952:	ldr	r3, [sp, #84]	; 0x54
   11954:	rsb	r3, r3, #1
   11958:	str	r3, [sp, #84]	; 0x54
   1195a:	ldr	r3, [sp, #84]	; 0x54
   1195c:	cmp	r3, #0
   1195e:	beq.w	11854 <__gethex+0x2f4>
   11962:	ldr	r3, [sp, #16]
   11964:	ldr	r5, [sp, #28]
   11966:	ldr	r7, [r3, #16]
   11968:	mov.w	r8, r7, lsl #2
   1196c:	add.w	r0, r5, r8
   11970:	mov	r3, r5
   11972:	movs	r1, #0
   11974:	b.n	11980 <__gethex+0x420>
   11976:	str.w	r1, [r3], #4
   1197a:	cmp	r0, r3
   1197c:	bls.w	117b4 <__gethex+0x254>
   11980:	ldr	r2, [r3, #0]
   11982:	cmp.w	r2, #4294967295
   11986:	beq.n	11976 <__gethex+0x416>
   11988:	adds	r2, #1
   1198a:	cmp	r4, #2
   1198c:	str	r2, [r3, #0]
   1198e:	beq.n	11a04 <__gethex+0x4a4>
   11990:	ands.w	r6, r6, #31
   11994:	bne.n	11a12 <__gethex+0x4b2>
   11996:	movs	r4, #33	; 0x21
   11998:	b.n	11858 <__gethex+0x2f8>
   1199a:	movs	r7, #1
   1199c:	b.n	11908 <__gethex+0x3a8>
   1199e:	ldr	r2, [sp, #84]	; 0x54
   119a0:	cmp	r2, #0
   119a2:	beq.w	116ec <__gethex+0x18c>
   119a6:	ldr	r1, [sp, #32]
   119a8:	str	r3, [r1, #0]
   119aa:	ldr	r3, [sp, #28]
   119ac:	ldr	r1, [sp, #16]
   119ae:	movs	r2, #1
   119b0:	str	r2, [r1, #16]
   119b2:	str	r2, [r3, #0]
   119b4:	ldr	r3, [sp, #80]	; 0x50
   119b6:	mov	r2, r3
   119b8:	movs	r0, #98	; 0x62
   119ba:	str	r1, [r2, #0]
   119bc:	b.n	1177a <__gethex+0x21a>
   119be:	lsls	r2, r7, #30
   119c0:	bpl.w	11854 <__gethex+0x2f4>
   119c4:	ldr	r3, [sp, #28]
   119c6:	ldr	r3, [r3, #0]
   119c8:	orrs	r3, r7
   119ca:	lsls	r3, r3, #31
   119cc:	bmi.n	11962 <__gethex+0x402>
   119ce:	b.n	11854 <__gethex+0x2f4>
   119d0:	ldr.w	r9, [sp, #28]
   119d4:	mov.w	r8, #0
   119d8:	b.n	11688 <__gethex+0x128>
   119da:	movs	r7, #2
   119dc:	b.n	118b4 <__gethex+0x354>
   119de:	ldr	r2, [sp, #84]	; 0x54
   119e0:	cmp	r2, #0
   119e2:	beq.n	119a6 <__gethex+0x446>
   119e4:	b.n	116ec <__gethex+0x18c>
   119e6:	cmp	r6, r5
   119e8:	bne.w	116ec <__gethex+0x18c>
   119ec:	cmp	r6, #1
   119ee:	ble.n	119a6 <__gethex+0x446>
   119f0:	subs	r1, r6, #1
   119f2:	ldr	r0, [sp, #16]
   119f4:	bl	1253c <__any_on>
   119f8:	cmp	r0, #0
   119fa:	beq.w	116ec <__gethex+0x18c>
   119fe:	ldr	r3, [sp, #12]
   11a00:	ldr	r3, [r3, #4]
   11a02:	b.n	119a6 <__gethex+0x446>
   11a04:	ldr	r3, [sp, #12]
   11a06:	ldr	r3, [r3, #0]
   11a08:	subs	r3, #1
   11a0a:	cmp	r6, r3
   11a0c:	beq.n	11a58 <__gethex+0x4f8>
   11a0e:	movs	r4, #34	; 0x22
   11a10:	b.n	11858 <__gethex+0x2f8>
   11a12:	add	r5, r8
   11a14:	rsb	r6, r6, #32
   11a18:	ldr.w	r0, [r5, #-4]
   11a1c:	bl	11e30 <__hi0bits>
   11a20:	cmp	r0, r6
   11a22:	bge.n	11996 <__gethex+0x436>
   11a24:	b.n	117da <__gethex+0x27a>
   11a26:	ldr	r3, [sp, #16]
   11a28:	ldr.w	r9, [sp, #20]
   11a2c:	ldr	r1, [r3, #4]
   11a2e:	mov	r0, r9
   11a30:	adds	r1, #1
   11a32:	bl	11cb8 <_Balloc>
   11a36:	ldr	r1, [sp, #16]
   11a38:	ldr	r3, [r1, #16]
   11a3a:	adds	r2, r3, #2
   11a3c:	mov	r5, r0
   11a3e:	lsls	r2, r2, #2
   11a40:	adds	r1, #12
   11a42:	adds	r0, #12
   11a44:	bl	9920 <memcpy>
   11a48:	ldr	r1, [sp, #16]
   11a4a:	mov	r0, r9
   11a4c:	bl	11d04 <_Bfree>
   11a50:	str	r5, [sp, #16]
   11a52:	ldr	r3, [r5, #16]
   11a54:	adds	r5, #20
   11a56:	b.n	117c0 <__gethex+0x260>
   11a58:	asrs	r3, r6, #5
   11a5a:	and.w	r6, r6, #31
   11a5e:	ldr.w	r2, [r5, r3, lsl #2]
   11a62:	movs	r3, #1
   11a64:	lsls	r3, r6
   11a66:	tst	r3, r2
   11a68:	ite	ne
   11a6a:	movne	r4, #33	; 0x21
   11a6c:	moveq	r4, #34	; 0x22
   11a6e:	b.n	11858 <__gethex+0x2f8>

00011a70 <__match>:
   11a70:	push	{r4, r5}
   11a72:	ldr	r4, [r0, #0]
   11a74:	b.n	11a88 <__match+0x18>
   11a76:	ldrb.w	r3, [r4, #1]!
   11a7a:	sub.w	r5, r3, #65	; 0x41
   11a7e:	cmp	r5, #25
   11a80:	it	ls
   11a82:	addls	r3, #32
   11a84:	cmp	r3, r2
   11a86:	bne.n	11a9a <__match+0x2a>
   11a88:	ldrb.w	r2, [r1], #1
   11a8c:	cmp	r2, #0
   11a8e:	bne.n	11a76 <__match+0x6>
   11a90:	adds	r4, #1
   11a92:	str	r4, [r0, #0]
   11a94:	movs	r0, #1
   11a96:	pop	{r4, r5}
   11a98:	bx	lr
   11a9a:	movs	r0, #0
   11a9c:	pop	{r4, r5}
   11a9e:	bx	lr

00011aa0 <__hexnan>:
   11aa0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11aa4:	ldr	r3, [r1, #0]
   11aa6:	ldr.w	r9, [pc, #372]	; 11c1c <__hexnan+0x17c>
   11aaa:	sub	sp, #20
   11aac:	asrs	r1, r3, #5
   11aae:	add.w	r1, r2, r1, lsl #2
   11ab2:	ands.w	r3, r3, #31
   11ab6:	str	r1, [sp, #4]
   11ab8:	itt	ne
   11aba:	addne	r1, #4
   11abc:	strne	r1, [sp, #4]
   11abe:	ldr	r4, [sp, #4]
   11ac0:	str	r0, [sp, #8]
   11ac2:	str	r3, [sp, #12]
   11ac4:	movs	r3, #0
   11ac6:	mov	r1, r3
   11ac8:	str.w	r3, [r4, #-4]
   11acc:	mov	sl, r3
   11ace:	mov	lr, r3
   11ad0:	ldr	r3, [sp, #8]
   11ad2:	sub.w	ip, r4, #4
   11ad6:	ldr	r5, [r3, #0]
   11ad8:	mov	r8, ip
   11ada:	mov	r0, ip
   11adc:	ldrb.w	r3, [r5, #1]!
   11ae0:	cbz	r3, 11b2c <__hexnan+0x8c>
   11ae2:	ldrb.w	r4, [r9, r3]
   11ae6:	cmp	r4, #0
   11ae8:	bne.n	11b72 <__hexnan+0xd2>
   11aea:	cmp	r3, #32
   11aec:	bhi.n	11baa <__hexnan+0x10a>
   11aee:	cmp	lr, sl
   11af0:	ble.n	11adc <__hexnan+0x3c>
   11af2:	cmp	r0, r8
   11af4:	bcs.n	11b1e <__hexnan+0x7e>
   11af6:	cmp	r1, #7
   11af8:	bgt.n	11b1e <__hexnan+0x7e>
   11afa:	rsb	r1, r1, #8
   11afe:	lsls	r1, r1, #2
   11b00:	ldr	r6, [r0, #0]
   11b02:	rsb	fp, r1, #32
   11b06:	mov	r3, r0
   11b08:	ldr	r7, [r3, #4]
   11b0a:	lsl.w	r4, r7, fp
   11b0e:	orrs	r4, r6
   11b10:	lsr.w	r6, r7, r1
   11b14:	str	r4, [r3, #0]
   11b16:	str.w	r6, [r3, #4]!
   11b1a:	cmp	r8, r3
   11b1c:	bhi.n	11b08 <__hexnan+0x68>
   11b1e:	cmp	r0, r2
   11b20:	bhi.n	11b98 <__hexnan+0xf8>
   11b22:	ldrb.w	r3, [r5, #1]!
   11b26:	movs	r1, #8
   11b28:	cmp	r3, #0
   11b2a:	bne.n	11ae2 <__hexnan+0x42>
   11b2c:	cmp.w	lr, #0
   11b30:	beq.n	11bae <__hexnan+0x10e>
   11b32:	cmp	r0, r8
   11b34:	bcs.n	11b3a <__hexnan+0x9a>
   11b36:	cmp	r1, #7
   11b38:	ble.n	11bf4 <__hexnan+0x154>
   11b3a:	cmp	r0, r2
   11b3c:	bls.n	11bb6 <__hexnan+0x116>
   11b3e:	mov	r3, r2
   11b40:	ldr.w	r1, [r0], #4
   11b44:	str.w	r1, [r3], #4
   11b48:	cmp	ip, r0
   11b4a:	bcs.n	11b40 <__hexnan+0xa0>
   11b4c:	movs	r1, #0
   11b4e:	str.w	r1, [r3], #4
   11b52:	cmp	ip, r3
   11b54:	bcs.n	11b4e <__hexnan+0xae>
   11b56:	ldr	r3, [sp, #4]
   11b58:	ldr.w	r3, [r3, #-4]
   11b5c:	cbnz	r3, 11b6a <__hexnan+0xca>
   11b5e:	cmp	r2, ip
   11b60:	beq.n	11bd8 <__hexnan+0x138>
   11b62:	ldr.w	r3, [ip, #-4]!
   11b66:	cmp	r3, #0
   11b68:	beq.n	11b5e <__hexnan+0xbe>
   11b6a:	movs	r0, #5
   11b6c:	add	sp, #20
   11b6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b72:	adds	r1, #1
   11b74:	cmp	r1, #8
   11b76:	add.w	lr, lr, #1
   11b7a:	ble.n	11b8a <__hexnan+0xea>
   11b7c:	cmp	r0, r2
   11b7e:	bls.n	11adc <__hexnan+0x3c>
   11b80:	movs	r3, #0
   11b82:	str.w	r3, [r0, #-4]
   11b86:	movs	r1, #1
   11b88:	subs	r0, #4
   11b8a:	ldr	r3, [r0, #0]
   11b8c:	and.w	r4, r4, #15
   11b90:	orr.w	r4, r4, r3, lsl #4
   11b94:	str	r4, [r0, #0]
   11b96:	b.n	11adc <__hexnan+0x3c>
   11b98:	movs	r3, #0
   11b9a:	sub.w	r8, r0, #4
   11b9e:	str.w	r3, [r0, #-4]
   11ba2:	mov	sl, lr
   11ba4:	mov	r0, r8
   11ba6:	mov	r1, r3
   11ba8:	b.n	11adc <__hexnan+0x3c>
   11baa:	cmp	r3, #41	; 0x29
   11bac:	beq.n	11be6 <__hexnan+0x146>
   11bae:	movs	r0, #4
   11bb0:	add	sp, #20
   11bb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bb6:	ldr	r3, [sp, #12]
   11bb8:	cmp	r3, #0
   11bba:	beq.n	11b56 <__hexnan+0xb6>
   11bbc:	ldr	r4, [sp, #4]
   11bbe:	ldr	r3, [sp, #12]
   11bc0:	ldr.w	r1, [r4, #-4]
   11bc4:	rsb	r3, r3, #32
   11bc8:	mov.w	r0, #4294967295
   11bcc:	lsr.w	r3, r0, r3
   11bd0:	ands	r3, r1
   11bd2:	str.w	r3, [r4, #-4]
   11bd6:	b.n	11b5c <__hexnan+0xbc>
   11bd8:	movs	r3, #1
   11bda:	movs	r0, #5
   11bdc:	str.w	r3, [ip]
   11be0:	add	sp, #20
   11be2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11be6:	ldr	r3, [sp, #8]
   11be8:	adds	r5, #1
   11bea:	str	r5, [r3, #0]
   11bec:	cmp.w	lr, #0
   11bf0:	bne.n	11b32 <__hexnan+0x92>
   11bf2:	b.n	11bae <__hexnan+0x10e>
   11bf4:	rsb	r3, r1, #8
   11bf8:	lsls	r3, r3, #2
   11bfa:	ldr	r5, [r0, #0]
   11bfc:	rsb	r7, r3, #32
   11c00:	mov	r1, r0
   11c02:	ldr	r6, [r1, #4]
   11c04:	lsl.w	r4, r6, r7
   11c08:	orrs	r4, r5
   11c0a:	lsr.w	r5, r6, r3
   11c0e:	str	r4, [r1, #0]
   11c10:	str.w	r5, [r1, #4]!
   11c14:	cmp	r8, r1
   11c16:	bhi.n	11c02 <__hexnan+0x162>
   11c18:	b.n	11b3a <__hexnan+0x9a>
   11c1a:	nop
   11c1c:	.word	0x20000860

00011c20 <iswspace>:
   11c20:	cmp	r0, #255	; 0xff
   11c22:	bls.n	11c28 <iswspace+0x8>
   11c24:	movs	r0, #0
   11c26:	bx	lr
   11c28:	push	{r4, lr}
   11c2a:	mov	r4, r0
   11c2c:	bl	c0c4 <__locale_ctype_ptr>
   11c30:	add	r0, r4
   11c32:	ldrb	r0, [r0, #1]
   11c34:	and.w	r0, r0, #8
   11c38:	uxtb	r0, r0
   11c3a:	pop	{r4, pc}

00011c3c <__localeconv_l>:
   11c3c:	adds	r0, #240	; 0xf0
   11c3e:	bx	lr

00011c40 <_localeconv_r>:
   11c40:	ldr	r2, [pc, #16]	; (11c54 <_localeconv_r+0x14>)
   11c42:	ldr	r3, [pc, #20]	; (11c58 <_localeconv_r+0x18>)
   11c44:	ldr	r2, [r2, #0]
   11c46:	ldr	r0, [r2, #52]	; 0x34
   11c48:	cmp	r0, #0
   11c4a:	it	eq
   11c4c:	moveq	r0, r3
   11c4e:	adds	r0, #240	; 0xf0
   11c50:	bx	lr
   11c52:	nop
   11c54:	.word	0x20002508
   11c58:	.word	0x20001f8c

00011c5c <_mbrtowc_r>:
   11c5c:	push	{r4, r5, r6, r7, lr}
   11c5e:	sub	sp, #12
   11c60:	mov	r7, r0
   11c62:	ldr	r5, [sp, #32]
   11c64:	cbz	r2, 11c8c <_mbrtowc_r+0x30>
   11c66:	ldr	r4, [pc, #68]	; (11cac <_mbrtowc_r+0x50>)
   11c68:	ldr	r6, [pc, #68]	; (11cb0 <_mbrtowc_r+0x54>)
   11c6a:	ldr	r4, [r4, #0]
   11c6c:	ldr	r4, [r4, #52]	; 0x34
   11c6e:	str	r5, [sp, #0]
   11c70:	cmp	r4, #0
   11c72:	it	eq
   11c74:	moveq	r4, r6
   11c76:	ldr.w	r4, [r4, #228]	; 0xe4
   11c7a:	blx	r4
   11c7c:	adds	r3, r0, #1
   11c7e:	bne.n	11c88 <_mbrtowc_r+0x2c>
   11c80:	movs	r2, #0
   11c82:	movs	r3, #138	; 0x8a
   11c84:	str	r2, [r5, #0]
   11c86:	str	r3, [r7, #0]
   11c88:	add	sp, #12
   11c8a:	pop	{r4, r5, r6, r7, pc}
   11c8c:	ldr	r3, [pc, #28]	; (11cac <_mbrtowc_r+0x50>)
   11c8e:	ldr	r1, [pc, #32]	; (11cb0 <_mbrtowc_r+0x54>)
   11c90:	ldr	r3, [r3, #0]
   11c92:	ldr	r3, [r3, #52]	; 0x34
   11c94:	str	r5, [sp, #0]
   11c96:	cmp	r3, #0
   11c98:	it	eq
   11c9a:	moveq	r3, r1
   11c9c:	mov	r4, r2
   11c9e:	mov	r1, r4
   11ca0:	ldr	r2, [pc, #16]	; (11cb4 <_mbrtowc_r+0x58>)
   11ca2:	ldr.w	r4, [r3, #228]	; 0xe4
   11ca6:	movs	r3, #1
   11ca8:	blx	r4
   11caa:	b.n	11c7c <_mbrtowc_r+0x20>
   11cac:	.word	0x20002508
   11cb0:	.word	0x20001f8c
   11cb4:	.word	0x20001110

00011cb8 <_Balloc>:
   11cb8:	ldr	r3, [r0, #76]	; 0x4c
   11cba:	push	{r4, r5, r6, lr}
   11cbc:	mov	r5, r0
   11cbe:	mov	r4, r1
   11cc0:	cbz	r3, 11cd6 <_Balloc+0x1e>
   11cc2:	ldr.w	r0, [r3, r4, lsl #2]
   11cc6:	cbz	r0, 11cea <_Balloc+0x32>
   11cc8:	ldr	r2, [r0, #0]
   11cca:	str.w	r2, [r3, r4, lsl #2]
   11cce:	movs	r3, #0
   11cd0:	str	r3, [r0, #16]
   11cd2:	str	r3, [r0, #12]
   11cd4:	pop	{r4, r5, r6, pc}
   11cd6:	movs	r2, #33	; 0x21
   11cd8:	movs	r1, #4
   11cda:	bl	12e98 <_calloc_r>
   11cde:	str	r0, [r5, #76]	; 0x4c
   11ce0:	mov	r3, r0
   11ce2:	cmp	r0, #0
   11ce4:	bne.n	11cc2 <_Balloc+0xa>
   11ce6:	movs	r0, #0
   11ce8:	pop	{r4, r5, r6, pc}
   11cea:	movs	r1, #1
   11cec:	lsl.w	r6, r1, r4
   11cf0:	adds	r2, r6, #5
   11cf2:	mov	r0, r5
   11cf4:	lsls	r2, r2, #2
   11cf6:	bl	12e98 <_calloc_r>
   11cfa:	cmp	r0, #0
   11cfc:	beq.n	11ce6 <_Balloc+0x2e>
   11cfe:	str	r4, [r0, #4]
   11d00:	str	r6, [r0, #8]
   11d02:	b.n	11cce <_Balloc+0x16>

00011d04 <_Bfree>:
   11d04:	cbz	r1, 11d14 <_Bfree+0x10>
   11d06:	ldr	r3, [r0, #76]	; 0x4c
   11d08:	ldr	r2, [r1, #4]
   11d0a:	ldr.w	r0, [r3, r2, lsl #2]
   11d0e:	str	r0, [r1, #0]
   11d10:	str.w	r1, [r3, r2, lsl #2]
   11d14:	bx	lr
   11d16:	nop

00011d18 <__multadd>:
   11d18:	push	{r4, r5, r6, r7, lr}
   11d1a:	ldr	r4, [r1, #16]
   11d1c:	sub	sp, #12
   11d1e:	mov	r5, r1
   11d20:	mov	r6, r0
   11d22:	add.w	lr, r1, #20
   11d26:	movs	r7, #0
   11d28:	ldr.w	r0, [lr]
   11d2c:	uxth	r1, r0
   11d2e:	mla	r1, r2, r1, r3
   11d32:	lsrs	r3, r1, #16
   11d34:	lsrs	r0, r0, #16
   11d36:	mla	r3, r2, r0, r3
   11d3a:	uxth	r1, r1
   11d3c:	adds	r7, #1
   11d3e:	add.w	r1, r1, r3, lsl #16
   11d42:	cmp	r4, r7
   11d44:	str.w	r1, [lr], #4
   11d48:	mov.w	r3, r3, lsr #16
   11d4c:	bgt.n	11d28 <__multadd+0x10>
   11d4e:	cbz	r3, 11d60 <__multadd+0x48>
   11d50:	ldr	r2, [r5, #8]
   11d52:	cmp	r4, r2
   11d54:	bge.n	11d66 <__multadd+0x4e>
   11d56:	add.w	r2, r5, r4, lsl #2
   11d5a:	adds	r4, #1
   11d5c:	str	r3, [r2, #20]
   11d5e:	str	r4, [r5, #16]
   11d60:	mov	r0, r5
   11d62:	add	sp, #12
   11d64:	pop	{r4, r5, r6, r7, pc}
   11d66:	ldr	r1, [r5, #4]
   11d68:	str	r3, [sp, #4]
   11d6a:	adds	r1, #1
   11d6c:	mov	r0, r6
   11d6e:	bl	11cb8 <_Balloc>
   11d72:	ldr	r2, [r5, #16]
   11d74:	adds	r2, #2
   11d76:	add.w	r1, r5, #12
   11d7a:	mov	r7, r0
   11d7c:	lsls	r2, r2, #2
   11d7e:	adds	r0, #12
   11d80:	bl	9920 <memcpy>
   11d84:	ldr	r2, [r6, #76]	; 0x4c
   11d86:	ldr	r1, [r5, #4]
   11d88:	ldr	r3, [sp, #4]
   11d8a:	ldr.w	r0, [r2, r1, lsl #2]
   11d8e:	str	r0, [r5, #0]
   11d90:	str.w	r5, [r2, r1, lsl #2]
   11d94:	mov	r5, r7
   11d96:	b.n	11d56 <__multadd+0x3e>

00011d98 <__s2b>:
   11d98:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11d9c:	ldr	r4, [pc, #140]	; (11e2c <__s2b+0x94>)
   11d9e:	ldr	r5, [sp, #32]
   11da0:	mov	r7, r3
   11da2:	adds	r3, #8
   11da4:	smull	r4, lr, r4, r3
   11da8:	asrs	r3, r3, #31
   11daa:	rsb	lr, r3, lr, asr #1
   11dae:	cmp.w	lr, #1
   11db2:	mov	r6, r0
   11db4:	mov	r4, r1
   11db6:	mov	r8, r2
   11db8:	ble.n	11e26 <__s2b+0x8e>
   11dba:	movs	r3, #1
   11dbc:	movs	r1, #0
   11dbe:	lsls	r3, r3, #1
   11dc0:	cmp	lr, r3
   11dc2:	add.w	r1, r1, #1
   11dc6:	bgt.n	11dbe <__s2b+0x26>
   11dc8:	mov	r0, r6
   11dca:	bl	11cb8 <_Balloc>
   11dce:	movs	r3, #1
   11dd0:	cmp.w	r8, #9
   11dd4:	str	r5, [r0, #20]
   11dd6:	str	r3, [r0, #16]
   11dd8:	ble.n	11e1e <__s2b+0x86>
   11dda:	add.w	r9, r4, #9
   11dde:	mov	r5, r9
   11de0:	add	r4, r8
   11de2:	ldrb.w	r3, [r5], #1
   11de6:	mov	r1, r0
   11de8:	subs	r3, #48	; 0x30
   11dea:	movs	r2, #10
   11dec:	mov	r0, r6
   11dee:	bl	11d18 <__multadd>
   11df2:	cmp	r5, r4
   11df4:	bne.n	11de2 <__s2b+0x4a>
   11df6:	add.w	r4, r9, r8
   11dfa:	subs	r4, #8
   11dfc:	cmp	r7, r8
   11dfe:	ble.n	11e1a <__s2b+0x82>
   11e00:	rsb	r7, r8, r7
   11e04:	add	r7, r4
   11e06:	ldrb.w	r3, [r4], #1
   11e0a:	mov	r1, r0
   11e0c:	subs	r3, #48	; 0x30
   11e0e:	movs	r2, #10
   11e10:	mov	r0, r6
   11e12:	bl	11d18 <__multadd>
   11e16:	cmp	r7, r4
   11e18:	bne.n	11e06 <__s2b+0x6e>
   11e1a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11e1e:	adds	r4, #10
   11e20:	mov.w	r8, #9
   11e24:	b.n	11dfc <__s2b+0x64>
   11e26:	movs	r1, #0
   11e28:	b.n	11dc8 <__s2b+0x30>
   11e2a:	nop
   11e2c:	.word	0x38e38e39

00011e30 <__hi0bits>:
   11e30:	lsrs	r3, r0, #16
   11e32:	lsls	r3, r3, #16
   11e34:	cbnz	r3, 11e64 <__hi0bits+0x34>
   11e36:	lsls	r0, r0, #16
   11e38:	movs	r3, #16
   11e3a:	tst.w	r0, #4278190080	; 0xff000000
   11e3e:	itt	eq
   11e40:	lsleq	r0, r0, #8
   11e42:	addeq	r3, #8
   11e44:	tst.w	r0, #4026531840	; 0xf0000000
   11e48:	itt	eq
   11e4a:	lsleq	r0, r0, #4
   11e4c:	addeq	r3, #4
   11e4e:	tst.w	r0, #3221225472	; 0xc0000000
   11e52:	itt	eq
   11e54:	lsleq	r0, r0, #2
   11e56:	addeq	r3, #2
   11e58:	cmp	r0, #0
   11e5a:	blt.n	11e6c <__hi0bits+0x3c>
   11e5c:	lsls	r2, r0, #1
   11e5e:	bmi.n	11e68 <__hi0bits+0x38>
   11e60:	movs	r0, #32
   11e62:	bx	lr
   11e64:	movs	r3, #0
   11e66:	b.n	11e3a <__hi0bits+0xa>
   11e68:	adds	r0, r3, #1
   11e6a:	bx	lr
   11e6c:	mov	r0, r3
   11e6e:	bx	lr

00011e70 <__lo0bits>:
   11e70:	ldr	r3, [r0, #0]
   11e72:	ands.w	r2, r3, #7
   11e76:	beq.n	11e88 <__lo0bits+0x18>
   11e78:	lsls	r1, r3, #31
   11e7a:	bmi.n	11ebe <__lo0bits+0x4e>
   11e7c:	lsls	r2, r3, #30
   11e7e:	bmi.n	11ec2 <__lo0bits+0x52>
   11e80:	lsrs	r3, r3, #2
   11e82:	str	r3, [r0, #0]
   11e84:	movs	r0, #2
   11e86:	bx	lr
   11e88:	uxth	r1, r3
   11e8a:	cbnz	r1, 11e90 <__lo0bits+0x20>
   11e8c:	lsrs	r3, r3, #16
   11e8e:	movs	r2, #16
   11e90:	tst.w	r3, #255	; 0xff
   11e94:	itt	eq
   11e96:	lsreq	r3, r3, #8
   11e98:	addeq	r2, #8
   11e9a:	lsls	r1, r3, #28
   11e9c:	itt	eq
   11e9e:	lsreq	r3, r3, #4
   11ea0:	addeq	r2, #4
   11ea2:	lsls	r1, r3, #30
   11ea4:	itt	eq
   11ea6:	lsreq	r3, r3, #2
   11ea8:	addeq	r2, #2
   11eaa:	lsls	r1, r3, #31
   11eac:	bmi.n	11eb8 <__lo0bits+0x48>
   11eae:	lsrs	r3, r3, #1
   11eb0:	bne.n	11eb6 <__lo0bits+0x46>
   11eb2:	movs	r0, #32
   11eb4:	bx	lr
   11eb6:	adds	r2, #1
   11eb8:	str	r3, [r0, #0]
   11eba:	mov	r0, r2
   11ebc:	bx	lr
   11ebe:	movs	r0, #0
   11ec0:	bx	lr
   11ec2:	lsrs	r3, r3, #1
   11ec4:	str	r3, [r0, #0]
   11ec6:	movs	r0, #1
   11ec8:	bx	lr
   11eca:	nop

00011ecc <__i2b>:
   11ecc:	push	{r4, lr}
   11ece:	mov	r4, r1
   11ed0:	movs	r1, #1
   11ed2:	bl	11cb8 <_Balloc>
   11ed6:	movs	r2, #1
   11ed8:	str	r4, [r0, #20]
   11eda:	str	r2, [r0, #16]
   11edc:	pop	{r4, pc}
   11ede:	nop

00011ee0 <__multiply>:
   11ee0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ee4:	ldr	r5, [r1, #16]
   11ee6:	ldr	r7, [r2, #16]
   11ee8:	cmp	r5, r7
   11eea:	sub	sp, #12
   11eec:	mov	r4, r1
   11eee:	mov	r6, r2
   11ef0:	bge.n	11efc <__multiply+0x1c>
   11ef2:	mov	r2, r5
   11ef4:	mov	r4, r6
   11ef6:	mov	r5, r7
   11ef8:	mov	r6, r1
   11efa:	mov	r7, r2
   11efc:	ldr	r3, [r4, #8]
   11efe:	ldr	r1, [r4, #4]
   11f00:	add.w	r8, r5, r7
   11f04:	cmp	r8, r3
   11f06:	it	gt
   11f08:	addgt	r1, #1
   11f0a:	bl	11cb8 <_Balloc>
   11f0e:	add.w	ip, r0, #20
   11f12:	add.w	r9, ip, r8, lsl #2
   11f16:	cmp	ip, r9
   11f18:	str	r0, [sp, #0]
   11f1a:	bcs.n	11f28 <__multiply+0x48>
   11f1c:	mov	r3, ip
   11f1e:	movs	r1, #0
   11f20:	str.w	r1, [r3], #4
   11f24:	cmp	r9, r3
   11f26:	bhi.n	11f20 <__multiply+0x40>
   11f28:	add.w	r2, r6, #20
   11f2c:	add.w	sl, r2, r7, lsl #2
   11f30:	add.w	r3, r4, #20
   11f34:	cmp	r2, sl
   11f36:	add.w	lr, r3, r5, lsl #2
   11f3a:	bcs.n	11fe6 <__multiply+0x106>
   11f3c:	str.w	r9, [sp, #4]
   11f40:	mov	r9, r3
   11f42:	ldr.w	r3, [r2], #4
   11f46:	uxth.w	fp, r3
   11f4a:	cmp.w	fp, #0
   11f4e:	beq.n	11f92 <__multiply+0xb2>
   11f50:	movs	r0, #0
   11f52:	mov	r7, r9
   11f54:	mov	r6, ip
   11f56:	mov	r5, r0
   11f58:	b.n	11f5c <__multiply+0x7c>
   11f5a:	mov	r6, r3
   11f5c:	ldr.w	r4, [r7], #4
   11f60:	ldr	r0, [r6, #0]
   11f62:	uxth	r1, r4
   11f64:	uxth	r3, r0
   11f66:	mla	r1, fp, r1, r3
   11f6a:	lsrs	r4, r4, #16
   11f6c:	lsrs	r0, r0, #16
   11f6e:	adds	r3, r1, r5
   11f70:	mla	r0, fp, r4, r0
   11f74:	add.w	r0, r0, r3, lsr #16
   11f78:	uxth	r1, r3
   11f7a:	mov	r3, r6
   11f7c:	orr.w	r1, r1, r0, lsl #16
   11f80:	cmp	lr, r7
   11f82:	mov.w	r5, r0, lsr #16
   11f86:	str.w	r1, [r3], #4
   11f8a:	bhi.n	11f5a <__multiply+0x7a>
   11f8c:	str	r5, [r6, #4]
   11f8e:	ldr.w	r3, [r2, #-4]
   11f92:	movs.w	fp, r3, lsr #16
   11f96:	beq.n	11fda <__multiply+0xfa>
   11f98:	ldr.w	r3, [ip]
   11f9c:	mov	r7, ip
   11f9e:	mov	r0, r3
   11fa0:	mov	r5, r9
   11fa2:	movs	r1, #0
   11fa4:	b.n	11fa8 <__multiply+0xc8>
   11fa6:	mov	r7, r6
   11fa8:	ldrh	r4, [r5, #0]
   11faa:	lsrs	r0, r0, #16
   11fac:	mla	r0, fp, r4, r0
   11fb0:	add	r1, r0
   11fb2:	uxth	r4, r3
   11fb4:	mov	r6, r7
   11fb6:	orr.w	r3, r4, r1, lsl #16
   11fba:	str.w	r3, [r6], #4
   11fbe:	ldr	r0, [r7, #4]
   11fc0:	ldr.w	r4, [r5], #4
   11fc4:	uxth	r3, r0
   11fc6:	lsrs	r4, r4, #16
   11fc8:	mla	r4, fp, r4, r3
   11fcc:	add.w	r3, r4, r1, lsr #16
   11fd0:	cmp	lr, r5
   11fd2:	mov.w	r1, r3, lsr #16
   11fd6:	bhi.n	11fa6 <__multiply+0xc6>
   11fd8:	str	r3, [r7, #4]
   11fda:	cmp	sl, r2
   11fdc:	add.w	ip, ip, #4
   11fe0:	bhi.n	11f42 <__multiply+0x62>
   11fe2:	ldr.w	r9, [sp, #4]
   11fe6:	cmp.w	r8, #0
   11fea:	ble.n	12004 <__multiply+0x124>
   11fec:	ldr.w	r3, [r9, #-4]
   11ff0:	sub.w	r9, r9, #4
   11ff4:	cbz	r3, 11ffe <__multiply+0x11e>
   11ff6:	b.n	12004 <__multiply+0x124>
   11ff8:	ldr.w	r3, [r9, #-4]!
   11ffc:	cbnz	r3, 12004 <__multiply+0x124>
   11ffe:	subs.w	r8, r8, #1
   12002:	bne.n	11ff8 <__multiply+0x118>
   12004:	ldr	r0, [sp, #0]
   12006:	str.w	r8, [r0, #16]
   1200a:	add	sp, #12
   1200c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012010 <__pow5mult>:
   12010:	ands.w	r3, r2, #3
   12014:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12018:	mov	r4, r2
   1201a:	mov	r7, r0
   1201c:	bne.n	1207c <__pow5mult+0x6c>
   1201e:	mov	r6, r1
   12020:	asrs	r4, r4, #2
   12022:	beq.n	1205e <__pow5mult+0x4e>
   12024:	ldr	r5, [r7, #72]	; 0x48
   12026:	cbz	r5, 1208e <__pow5mult+0x7e>
   12028:	lsls	r3, r4, #31
   1202a:	mov.w	r8, #0
   1202e:	bmi.n	1203e <__pow5mult+0x2e>
   12030:	asrs	r4, r4, #1
   12032:	beq.n	1205e <__pow5mult+0x4e>
   12034:	ldr	r0, [r5, #0]
   12036:	cbz	r0, 12064 <__pow5mult+0x54>
   12038:	mov	r5, r0
   1203a:	lsls	r3, r4, #31
   1203c:	bpl.n	12030 <__pow5mult+0x20>
   1203e:	mov	r2, r5
   12040:	mov	r1, r6
   12042:	mov	r0, r7
   12044:	bl	11ee0 <__multiply>
   12048:	cbz	r6, 12078 <__pow5mult+0x68>
   1204a:	ldr	r2, [r6, #4]
   1204c:	ldr	r3, [r7, #76]	; 0x4c
   1204e:	asrs	r4, r4, #1
   12050:	ldr.w	r1, [r3, r2, lsl #2]
   12054:	str	r1, [r6, #0]
   12056:	str.w	r6, [r3, r2, lsl #2]
   1205a:	mov	r6, r0
   1205c:	bne.n	12034 <__pow5mult+0x24>
   1205e:	mov	r0, r6
   12060:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12064:	mov	r2, r5
   12066:	mov	r1, r5
   12068:	mov	r0, r7
   1206a:	bl	11ee0 <__multiply>
   1206e:	str	r0, [r5, #0]
   12070:	str.w	r8, [r0]
   12074:	mov	r5, r0
   12076:	b.n	1203a <__pow5mult+0x2a>
   12078:	mov	r6, r0
   1207a:	b.n	12030 <__pow5mult+0x20>
   1207c:	subs	r2, r3, #1
   1207e:	ldr	r5, [pc, #44]	; (120ac <__pow5mult+0x9c>)
   12080:	movs	r3, #0
   12082:	ldr.w	r2, [r5, r2, lsl #2]
   12086:	bl	11d18 <__multadd>
   1208a:	mov	r6, r0
   1208c:	b.n	12020 <__pow5mult+0x10>
   1208e:	movs	r1, #1
   12090:	mov	r0, r7
   12092:	bl	11cb8 <_Balloc>
   12096:	movw	r1, #625	; 0x271
   1209a:	movs	r2, #1
   1209c:	movs	r3, #0
   1209e:	str	r1, [r0, #20]
   120a0:	str	r2, [r0, #16]
   120a2:	mov	r5, r0
   120a4:	str	r0, [r7, #72]	; 0x48
   120a6:	str	r3, [r0, #0]
   120a8:	b.n	12028 <__pow5mult+0x18>
   120aa:	nop
   120ac:	.word	0x20000e34

000120b0 <__lshift>:
   120b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   120b4:	mov	r9, r2
   120b6:	ldr	r2, [r1, #16]
   120b8:	ldr	r3, [r1, #8]
   120ba:	mov.w	r4, r9, asr #5
   120be:	add.w	r8, r4, r2
   120c2:	add.w	r5, r8, #1
   120c6:	cmp	r5, r3
   120c8:	mov	r6, r1
   120ca:	mov	sl, r0
   120cc:	ldr	r1, [r1, #4]
   120ce:	ble.n	120da <__lshift+0x2a>
   120d0:	lsls	r3, r3, #1
   120d2:	cmp	r5, r3
   120d4:	add.w	r1, r1, #1
   120d8:	bgt.n	120d0 <__lshift+0x20>
   120da:	mov	r0, sl
   120dc:	bl	11cb8 <_Balloc>
   120e0:	cmp	r4, #0
   120e2:	add.w	r2, r0, #20
   120e6:	ble.n	1215a <__lshift+0xaa>
   120e8:	add.w	r3, r2, r4, lsl #2
   120ec:	movs	r1, #0
   120ee:	str.w	r1, [r2], #4
   120f2:	cmp	r3, r2
   120f4:	bne.n	120ee <__lshift+0x3e>
   120f6:	ldr	r4, [r6, #16]
   120f8:	add.w	r1, r6, #20
   120fc:	ands.w	r9, r9, #31
   12100:	add.w	lr, r1, r4, lsl #2
   12104:	beq.n	1214a <__lshift+0x9a>
   12106:	rsb	r2, r9, #32
   1210a:	movs	r4, #0
   1210c:	ldr	r7, [r1, #0]
   1210e:	lsl.w	ip, r7, r9
   12112:	orr.w	r4, ip, r4
   12116:	mov	ip, r3
   12118:	str.w	r4, [r3], #4
   1211c:	ldr.w	r4, [r1], #4
   12120:	cmp	lr, r1
   12122:	lsr.w	r4, r4, r2
   12126:	bhi.n	1210c <__lshift+0x5c>
   12128:	str.w	r4, [ip, #4]
   1212c:	cbz	r4, 12132 <__lshift+0x82>
   1212e:	add.w	r5, r8, #2
   12132:	ldr.w	r3, [sl, #76]	; 0x4c
   12136:	ldr	r2, [r6, #4]
   12138:	subs	r5, #1
   1213a:	ldr.w	r1, [r3, r2, lsl #2]
   1213e:	str	r5, [r0, #16]
   12140:	str	r1, [r6, #0]
   12142:	str.w	r6, [r3, r2, lsl #2]
   12146:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1214a:	subs	r3, #4
   1214c:	ldr.w	r2, [r1], #4
   12150:	str.w	r2, [r3, #4]!
   12154:	cmp	lr, r1
   12156:	bhi.n	1214c <__lshift+0x9c>
   12158:	b.n	12132 <__lshift+0x82>
   1215a:	mov	r3, r2
   1215c:	b.n	120f6 <__lshift+0x46>
   1215e:	nop

00012160 <__mcmp>:
   12160:	ldr	r2, [r0, #16]
   12162:	ldr	r3, [r1, #16]
   12164:	subs	r2, r2, r3
   12166:	bne.n	12190 <__mcmp+0x30>
   12168:	lsls	r3, r3, #2
   1216a:	adds	r0, #20
   1216c:	adds	r1, #20
   1216e:	add	r1, r3
   12170:	push	{r4}
   12172:	add	r3, r0
   12174:	b.n	1217a <__mcmp+0x1a>
   12176:	cmp	r0, r3
   12178:	bcs.n	12194 <__mcmp+0x34>
   1217a:	ldr.w	r4, [r3, #-4]!
   1217e:	ldr.w	r2, [r1, #-4]!
   12182:	cmp	r4, r2
   12184:	beq.n	12176 <__mcmp+0x16>
   12186:	bcc.n	1219c <__mcmp+0x3c>
   12188:	movs	r0, #1
   1218a:	ldr.w	r4, [sp], #4
   1218e:	bx	lr
   12190:	mov	r0, r2
   12192:	bx	lr
   12194:	movs	r0, #0
   12196:	ldr.w	r4, [sp], #4
   1219a:	bx	lr
   1219c:	mov.w	r0, #4294967295
   121a0:	b.n	1218a <__mcmp+0x2a>
   121a2:	nop

000121a4 <__mdiff>:
   121a4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   121a8:	ldr	r3, [r1, #16]
   121aa:	mov	r7, r1
   121ac:	ldr	r1, [r2, #16]
   121ae:	subs	r3, r3, r1
   121b0:	cmp	r3, #0
   121b2:	mov	r8, r2
   121b4:	bne.n	121e6 <__mdiff+0x42>
   121b6:	lsls	r1, r1, #2
   121b8:	add.w	r2, r7, #20
   121bc:	add.w	r5, r8, #20
   121c0:	adds	r3, r2, r1
   121c2:	add	r1, r5
   121c4:	b.n	121ca <__mdiff+0x26>
   121c6:	cmp	r2, r3
   121c8:	bcs.n	12288 <__mdiff+0xe4>
   121ca:	ldr.w	r6, [r3, #-4]!
   121ce:	ldr.w	r4, [r1, #-4]!
   121d2:	cmp	r6, r4
   121d4:	beq.n	121c6 <__mdiff+0x22>
   121d6:	bcs.n	1229a <__mdiff+0xf6>
   121d8:	mov	r3, r7
   121da:	mov	r4, r2
   121dc:	mov	r7, r8
   121de:	mov.w	r9, #1
   121e2:	mov	r8, r3
   121e4:	b.n	121f4 <__mdiff+0x50>
   121e6:	blt.n	122a4 <__mdiff+0x100>
   121e8:	add.w	r5, r7, #20
   121ec:	add.w	r4, r2, #20
   121f0:	mov.w	r9, #0
   121f4:	ldr	r1, [r7, #4]
   121f6:	bl	11cb8 <_Balloc>
   121fa:	ldr.w	r3, [r8, #16]
   121fe:	ldr	r6, [r7, #16]
   12200:	str.w	r9, [r0, #12]
   12204:	add.w	ip, r4, r3, lsl #2
   12208:	mov	lr, r4
   1220a:	add.w	r7, r5, r6, lsl #2
   1220e:	add.w	r4, r0, #20
   12212:	movs	r3, #0
   12214:	ldr.w	r1, [lr], #4
   12218:	ldr.w	r8, [r5], #4
   1221c:	uxth	r2, r1
   1221e:	uxtah	r3, r3, r8
   12222:	lsrs	r1, r1, #16
   12224:	subs	r2, r3, r2
   12226:	rsb	r3, r1, r8, lsr #16
   1222a:	add.w	r3, r3, r2, asr #16
   1222e:	uxth	r2, r2
   12230:	orr.w	r2, r2, r3, lsl #16
   12234:	cmp	ip, lr
   12236:	str.w	r2, [r4], #4
   1223a:	mov.w	r3, r3, asr #16
   1223e:	bhi.n	12214 <__mdiff+0x70>
   12240:	cmp	r7, r5
   12242:	bls.n	12274 <__mdiff+0xd0>
   12244:	mov	ip, r4
   12246:	mov	r1, r5
   12248:	ldr.w	lr, [r1], #4
   1224c:	uxtah	r2, r3, lr
   12250:	asrs	r3, r2, #16
   12252:	add.w	r3, r3, lr, lsr #16
   12256:	uxth	r2, r2
   12258:	orr.w	r2, r2, r3, lsl #16
   1225c:	cmp	r7, r1
   1225e:	str.w	r2, [ip], #4
   12262:	mov.w	r3, r3, asr #16
   12266:	bhi.n	12248 <__mdiff+0xa4>
   12268:	mvns	r5, r5
   1226a:	add	r5, r7
   1226c:	bic.w	r5, r5, #3
   12270:	adds	r5, #4
   12272:	add	r4, r5
   12274:	subs	r4, #4
   12276:	cbnz	r2, 12282 <__mdiff+0xde>
   12278:	ldr.w	r3, [r4, #-4]!
   1227c:	subs	r6, #1
   1227e:	cmp	r3, #0
   12280:	beq.n	12278 <__mdiff+0xd4>
   12282:	str	r6, [r0, #16]
   12284:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12288:	movs	r1, #0
   1228a:	bl	11cb8 <_Balloc>
   1228e:	movs	r2, #1
   12290:	movs	r3, #0
   12292:	str	r2, [r0, #16]
   12294:	str	r3, [r0, #20]
   12296:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1229a:	mov	r4, r5
   1229c:	mov.w	r9, #0
   122a0:	mov	r5, r2
   122a2:	b.n	121f4 <__mdiff+0x50>
   122a4:	mov	r3, r7
   122a6:	add.w	r4, r7, #20
   122aa:	add.w	r5, r8, #20
   122ae:	mov	r7, r8
   122b0:	mov.w	r9, #1
   122b4:	mov	r8, r3
   122b6:	b.n	121f4 <__mdiff+0x50>

000122b8 <__ulp>:
   122b8:	ldr	r3, [pc, #76]	; (12308 <__ulp+0x50>)
   122ba:	vmov	r2, s1
   122be:	ands	r2, r3
   122c0:	sub.w	r3, r2, #54525952	; 0x3400000
   122c4:	cmp	r3, #0
   122c6:	ble.n	122d2 <__ulp+0x1a>
   122c8:	movs	r0, #0
   122ca:	mov	r1, r3
   122cc:	vmov	d0, r0, r1
   122d0:	bx	lr
   122d2:	negs	r3, r3
   122d4:	asrs	r3, r3, #20
   122d6:	cmp	r3, #19
   122d8:	ble.n	122f6 <__ulp+0x3e>
   122da:	subs	r3, #20
   122dc:	cmp	r3, #30
   122de:	ittte	le
   122e0:	rsble	r3, r3, #31
   122e4:	movle	r2, #1
   122e6:	lslle.w	r3, r2, r3
   122ea:	movgt	r3, #1
   122ec:	movs	r1, #0
   122ee:	mov	r0, r3
   122f0:	vmov	d0, r0, r1
   122f4:	bx	lr
   122f6:	mov.w	r2, #524288	; 0x80000
   122fa:	movs	r0, #0
   122fc:	asr.w	r1, r2, r3
   12300:	vmov	d0, r0, r1
   12304:	bx	lr
   12306:	nop
   12308:	.word	0x7ff00000

0001230c <__b2d>:
   1230c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12310:	ldr	r6, [r0, #16]
   12312:	add.w	r8, r0, #20
   12316:	add.w	r6, r8, r6, lsl #2
   1231a:	ldr.w	r7, [r6, #-4]
   1231e:	mov	r0, r7
   12320:	bl	11e30 <__hi0bits>
   12324:	rsb	r3, r0, #32
   12328:	cmp	r0, #10
   1232a:	str	r3, [r1, #0]
   1232c:	sub.w	r3, r6, #4
   12330:	bgt.n	12364 <__b2d+0x58>
   12332:	cmp	r8, r3
   12334:	rsb	r2, r0, #11
   12338:	it	cc
   1233a:	ldrcc.w	r3, [r6, #-8]
   1233e:	lsr.w	r1, r7, r2
   12342:	add.w	r0, r0, #21
   12346:	orr.w	r5, r1, #1069547520	; 0x3fc00000
   1234a:	ite	cc
   1234c:	lsrcc	r3, r2
   1234e:	movcs	r3, #0
   12350:	lsl.w	r0, r7, r0
   12354:	orr.w	r5, r5, #3145728	; 0x300000
   12358:	orr.w	r4, r0, r3
   1235c:	vmov	d0, r4, r5
   12360:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12364:	cmp	r8, r3
   12366:	bcs.n	123aa <__b2d+0x9e>
   12368:	subs.w	r3, r0, #11
   1236c:	ldr.w	r2, [r6, #-8]
   12370:	beq.n	123b0 <__b2d+0xa4>
   12372:	lsl.w	r0, r7, r3
   12376:	orr.w	r7, r0, #1069547520	; 0x3fc00000
   1237a:	rsb	lr, r3, #32
   1237e:	sub.w	r1, r6, #8
   12382:	orr.w	r7, r7, #3145728	; 0x300000
   12386:	lsr.w	r0, r2, lr
   1238a:	cmp	r8, r1
   1238c:	orr.w	r5, r7, r0
   12390:	bcs.n	123d4 <__b2d+0xc8>
   12392:	ldr.w	r1, [r6, #-12]
   12396:	lsl.w	r0, r2, r3
   1239a:	lsr.w	r3, r1, lr
   1239e:	orrs	r0, r3
   123a0:	mov	r4, r0
   123a2:	vmov	d0, r4, r5
   123a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   123aa:	subs	r0, #11
   123ac:	bne.n	123c2 <__b2d+0xb6>
   123ae:	mov	r2, r0
   123b0:	orr.w	r5, r7, #1069547520	; 0x3fc00000
   123b4:	orr.w	r5, r5, #3145728	; 0x300000
   123b8:	mov	r4, r2
   123ba:	vmov	d0, r4, r5
   123be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   123c2:	lsl.w	r0, r7, r0
   123c6:	orr.w	r5, r0, #1069547520	; 0x3fc00000
   123ca:	movs	r0, #0
   123cc:	orr.w	r5, r5, #3145728	; 0x300000
   123d0:	mov	r4, r0
   123d2:	b.n	123a2 <__b2d+0x96>
   123d4:	lsl.w	r0, r2, r3
   123d8:	mov	r4, r0
   123da:	b.n	123a2 <__b2d+0x96>

000123dc <__d2b>:
   123dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   123e0:	vmov	r6, r7, d0
   123e4:	sub	sp, #12
   123e6:	mov	r8, r1
   123e8:	movs	r1, #1
   123ea:	mov	r4, r7
   123ec:	ubfx	r5, r7, #20, #11
   123f0:	mov	r7, r2
   123f2:	bl	11cb8 <_Balloc>
   123f6:	ubfx	r4, r4, #0, #20
   123fa:	mov	r9, r0
   123fc:	cbz	r5, 12402 <__d2b+0x26>
   123fe:	orr.w	r4, r4, #1048576	; 0x100000
   12402:	str	r4, [sp, #4]
   12404:	cbz	r6, 1244e <__d2b+0x72>
   12406:	add	r0, sp, #8
   12408:	str.w	r6, [r0, #-8]!
   1240c:	bl	11e70 <__lo0bits>
   12410:	cmp	r0, #0
   12412:	bne.n	1247e <__d2b+0xa2>
   12414:	ldmia.w	sp, {r2, r3}
   12418:	str.w	r2, [r9, #20]
   1241c:	cmp	r3, #0
   1241e:	ite	eq
   12420:	moveq	r1, #1
   12422:	movne	r1, #2
   12424:	str.w	r3, [r9, #24]
   12428:	str.w	r1, [r9, #16]
   1242c:	cbnz	r5, 12466 <__d2b+0x8a>
   1242e:	add.w	r3, r9, r1, lsl #2
   12432:	subw	r0, r0, #1074	; 0x432
   12436:	str.w	r0, [r8]
   1243a:	ldr	r0, [r3, #16]
   1243c:	bl	11e30 <__hi0bits>
   12440:	rsb	r0, r0, r1, lsl #5
   12444:	str	r0, [r7, #0]
   12446:	mov	r0, r9
   12448:	add	sp, #12
   1244a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1244e:	add	r0, sp, #4
   12450:	bl	11e70 <__lo0bits>
   12454:	ldr	r3, [sp, #4]
   12456:	str.w	r3, [r9, #20]
   1245a:	movs	r1, #1
   1245c:	adds	r0, #32
   1245e:	str.w	r1, [r9, #16]
   12462:	cmp	r5, #0
   12464:	beq.n	1242e <__d2b+0x52>
   12466:	subw	r5, r5, #1075	; 0x433
   1246a:	add	r5, r0
   1246c:	rsb	r0, r0, #53	; 0x35
   12470:	str.w	r5, [r8]
   12474:	str	r0, [r7, #0]
   12476:	mov	r0, r9
   12478:	add	sp, #12
   1247a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1247e:	ldmia.w	sp, {r2, r3}
   12482:	rsb	r1, r0, #32
   12486:	lsl.w	r1, r3, r1
   1248a:	orrs	r2, r1
   1248c:	lsrs	r3, r0
   1248e:	str	r3, [sp, #4]
   12490:	str.w	r2, [r9, #20]
   12494:	b.n	1241c <__d2b+0x40>
   12496:	nop

00012498 <__ratio>:
   12498:	push	{r4, r5, lr}
   1249a:	sub	sp, #28
   1249c:	mov	r4, r1
   1249e:	add	r1, sp, #16
   124a0:	mov	r5, r0
   124a2:	bl	1230c <__b2d>
   124a6:	mov	r0, r4
   124a8:	add	r1, sp, #20
   124aa:	vstr	d0, [sp]
   124ae:	bl	1230c <__b2d>
   124b2:	ldr	r0, [r4, #16]
   124b4:	ldr	r1, [r5, #16]
   124b6:	ldr	r3, [sp, #20]
   124b8:	ldr	r2, [sp, #16]
   124ba:	subs	r1, r1, r0
   124bc:	subs	r2, r2, r3
   124be:	add.w	r3, r2, r1, lsl #5
   124c2:	vstr	d0, [sp, #8]
   124c6:	cmp	r3, #0
   124c8:	ldrd	r0, r1, [sp]
   124cc:	ldrd	r4, r5, [sp, #8]
   124d0:	ble.n	124ea <__ratio+0x52>
   124d2:	add.w	r1, r1, r3, lsl #20
   124d6:	strd	r0, r1, [sp]
   124da:	vldr	d7, [sp]
   124de:	vldr	d6, [sp, #8]
   124e2:	vdiv.f64	d0, d7, d6
   124e6:	add	sp, #28
   124e8:	pop	{r4, r5, pc}
   124ea:	sub.w	r5, r5, r3, lsl #20
   124ee:	strd	r4, r5, [sp, #8]
   124f2:	b.n	124da <__ratio+0x42>

000124f4 <__copybits>:
   124f4:	push	{r4, r5, r6}
   124f6:	ldr	r4, [r2, #16]
   124f8:	add.w	r3, r2, #20
   124fc:	subs	r1, #1
   124fe:	asrs	r6, r1, #5
   12500:	add.w	r4, r3, r4, lsl #2
   12504:	adds	r6, #1
   12506:	cmp	r3, r4
   12508:	add.w	r6, r0, r6, lsl #2
   1250c:	bcs.n	12528 <__copybits+0x34>
   1250e:	subs	r1, r0, #4
   12510:	ldr.w	r5, [r3], #4
   12514:	str.w	r5, [r1, #4]!
   12518:	cmp	r4, r3
   1251a:	bhi.n	12510 <__copybits+0x1c>
   1251c:	subs	r3, r4, r2
   1251e:	subs	r3, #21
   12520:	bic.w	r3, r3, #3
   12524:	adds	r3, #4
   12526:	add	r0, r3
   12528:	cmp	r6, r0
   1252a:	bls.n	12536 <__copybits+0x42>
   1252c:	movs	r3, #0
   1252e:	str.w	r3, [r0], #4
   12532:	cmp	r6, r0
   12534:	bhi.n	1252e <__copybits+0x3a>
   12536:	pop	{r4, r5, r6}
   12538:	bx	lr
   1253a:	nop

0001253c <__any_on>:
   1253c:	ldr	r3, [r0, #16]
   1253e:	asrs	r2, r1, #5
   12540:	cmp	r3, r2
   12542:	push	{r4}
   12544:	add.w	r4, r0, #20
   12548:	bge.n	1256c <__any_on+0x30>
   1254a:	add.w	r3, r4, r3, lsl #2
   1254e:	cmp	r4, r3
   12550:	bcs.n	12596 <__any_on+0x5a>
   12552:	ldr.w	r0, [r3, #-4]
   12556:	subs	r3, #4
   12558:	cbz	r0, 12562 <__any_on+0x26>
   1255a:	b.n	12588 <__any_on+0x4c>
   1255c:	ldr.w	r2, [r3, #-4]!
   12560:	cbnz	r2, 12588 <__any_on+0x4c>
   12562:	cmp	r4, r3
   12564:	bcc.n	1255c <__any_on+0x20>
   12566:	ldr.w	r4, [sp], #4
   1256a:	bx	lr
   1256c:	ble.n	12590 <__any_on+0x54>
   1256e:	ands.w	r1, r1, #31
   12572:	beq.n	12590 <__any_on+0x54>
   12574:	ldr.w	r0, [r4, r2, lsl #2]
   12578:	lsr.w	r3, r0, r1
   1257c:	lsl.w	r1, r3, r1
   12580:	cmp	r0, r1
   12582:	add.w	r3, r4, r2, lsl #2
   12586:	beq.n	1254e <__any_on+0x12>
   12588:	movs	r0, #1
   1258a:	ldr.w	r4, [sp], #4
   1258e:	bx	lr
   12590:	add.w	r3, r4, r2, lsl #2
   12594:	b.n	1254e <__any_on+0x12>
   12596:	movs	r0, #0
   12598:	b.n	12566 <__any_on+0x2a>
   1259a:	nop

0001259c <__sccl>:
   1259c:	push	{r4, r5, r6}
   1259e:	ldrb	r5, [r1, #0]
   125a0:	cmp	r5, #94	; 0x5e
   125a2:	beq.n	12604 <__sccl+0x68>
   125a4:	movs	r2, #0
   125a6:	adds	r1, #1
   125a8:	mov	r6, r2
   125aa:	subs	r3, r0, #1
   125ac:	add.w	r4, r0, #255	; 0xff
   125b0:	strb.w	r2, [r3, #1]!
   125b4:	cmp	r3, r4
   125b6:	bne.n	125b0 <__sccl+0x14>
   125b8:	cbz	r5, 125dc <__sccl+0x40>
   125ba:	eor.w	r2, r6, #1
   125be:	strb	r2, [r0, r5]
   125c0:	adds	r4, r1, #1
   125c2:	ldrb.w	r3, [r4, #-1]
   125c6:	cmp	r3, #45	; 0x2d
   125c8:	beq.n	125e8 <__sccl+0x4c>
   125ca:	cmp	r3, #93	; 0x5d
   125cc:	beq.n	125e2 <__sccl+0x46>
   125ce:	cbz	r3, 125d6 <__sccl+0x3a>
   125d0:	mov	r5, r3
   125d2:	mov	r1, r4
   125d4:	b.n	125be <__sccl+0x22>
   125d6:	mov	r0, r1
   125d8:	pop	{r4, r5, r6}
   125da:	bx	lr
   125dc:	subs	r0, r1, #1
   125de:	pop	{r4, r5, r6}
   125e0:	bx	lr
   125e2:	mov	r0, r4
   125e4:	pop	{r4, r5, r6}
   125e6:	bx	lr
   125e8:	ldrb	r6, [r1, #1]
   125ea:	cmp	r6, #93	; 0x5d
   125ec:	beq.n	125d0 <__sccl+0x34>
   125ee:	cmp	r5, r6
   125f0:	bgt.n	125d0 <__sccl+0x34>
   125f2:	adds	r1, #2
   125f4:	adds	r3, r0, r5
   125f6:	adds	r5, #1
   125f8:	cmp	r6, r5
   125fa:	strb.w	r2, [r3, #1]!
   125fe:	bgt.n	125f6 <__sccl+0x5a>
   12600:	adds	r4, #2
   12602:	b.n	125c2 <__sccl+0x26>
   12604:	movs	r2, #1
   12606:	ldrb	r5, [r1, #1]
   12608:	mov	r6, r2
   1260a:	adds	r1, #2
   1260c:	b.n	125aa <__sccl+0xe>
   1260e:	nop

00012610 <_strtoll_l.isra.0>:
   12610:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12614:	sub	sp, #20
   12616:	mov	sl, r3
   12618:	str	r1, [sp, #8]
   1261a:	str	r0, [sp, #12]
   1261c:	str	r2, [sp, #4]
   1261e:	mov	r7, r1
   12620:	ldr	r6, [sp, #56]	; 0x38
   12622:	b.n	12626 <_strtoll_l.isra.0+0x16>
   12624:	mov	r7, r5
   12626:	mov	r5, r7
   12628:	mov	r0, r6
   1262a:	ldrb.w	r4, [r5], #1
   1262e:	bl	c0bc <__locale_ctype_ptr_l>
   12632:	add	r0, r4
   12634:	ldrb	r3, [r0, #1]
   12636:	and.w	r3, r3, #8
   1263a:	and.w	r2, r3, #255	; 0xff
   1263e:	cmp	r3, #0
   12640:	bne.n	12624 <_strtoll_l.isra.0+0x14>
   12642:	cmp	r4, #45	; 0x2d
   12644:	beq.w	1274e <_strtoll_l.isra.0+0x13e>
   12648:	cmp	r4, #43	; 0x2b
   1264a:	it	eq
   1264c:	ldrbeq	r4, [r7, #1]
   1264e:	str	r2, [sp, #0]
   12650:	it	eq
   12652:	addeq	r5, r7, #2
   12654:	cmp.w	sl, #0
   12658:	beq.n	12674 <_strtoll_l.isra.0+0x64>
   1265a:	cmp.w	sl, #16
   1265e:	beq.w	1278c <_strtoll_l.isra.0+0x17c>
   12662:	ldr	r3, [sp, #0]
   12664:	mov	r6, sl
   12666:	asrs	r7, r6, #31
   12668:	cbnz	r3, 12686 <_strtoll_l.isra.0+0x76>
   1266a:	mov.w	r8, #4294967295
   1266e:	mvn.w	r9, #2147483648	; 0x80000000
   12672:	b.n	1268e <_strtoll_l.isra.0+0x7e>
   12674:	cmp	r4, #48	; 0x30
   12676:	beq.n	12778 <_strtoll_l.isra.0+0x168>
   12678:	movs	r6, #10
   1267a:	movs	r7, #0
   1267c:	mov.w	sl, #10
   12680:	ldr	r3, [sp, #0]
   12682:	cmp	r3, #0
   12684:	beq.n	1266a <_strtoll_l.isra.0+0x5a>
   12686:	mov.w	r8, #0
   1268a:	mov.w	r9, #2147483648	; 0x80000000
   1268e:	mov	r2, r6
   12690:	mov	r3, r7
   12692:	mov	r0, r8
   12694:	mov	r1, r9
   12696:	bl	bd08 <__aeabi_uldivmod>
   1269a:	mov	r3, r7
   1269c:	mov	fp, r2
   1269e:	mov	r0, r8
   126a0:	mov	r2, r6
   126a2:	mov	r1, r9
   126a4:	bl	bd08 <__aeabi_uldivmod>
   126a8:	mov.w	lr, #0
   126ac:	movs	r2, #0
   126ae:	movs	r3, #0
   126b0:	b.n	126d2 <_strtoll_l.isra.0+0xc2>
   126b2:	beq.n	12740 <_strtoll_l.isra.0+0x130>
   126b4:	mul.w	r4, r2, r7
   126b8:	mla	r4, r6, r3, r4
   126bc:	umull	r2, r3, r2, r6
   126c0:	add	r3, r4
   126c2:	adds.w	r2, r2, ip
   126c6:	adc.w	r3, r3, ip, asr #31
   126ca:	mov.w	lr, #1
   126ce:	ldrb.w	r4, [r5], #1
   126d2:	sub.w	ip, r4, #48	; 0x30
   126d6:	cmp.w	ip, #9
   126da:	bls.n	126ea <_strtoll_l.isra.0+0xda>
   126dc:	sub.w	ip, r4, #65	; 0x41
   126e0:	cmp.w	ip, #25
   126e4:	bhi.n	12702 <_strtoll_l.isra.0+0xf2>
   126e6:	sub.w	ip, r4, #55	; 0x37
   126ea:	cmp	sl, ip
   126ec:	ble.n	12714 <_strtoll_l.isra.0+0x104>
   126ee:	cmp.w	lr, #4294967295
   126f2:	beq.n	126ce <_strtoll_l.isra.0+0xbe>
   126f4:	cmp	r1, r3
   126f6:	it	eq
   126f8:	cmpeq	r0, r2
   126fa:	bcs.n	126b2 <_strtoll_l.isra.0+0xa2>
   126fc:	mov.w	lr, #4294967295
   12700:	b.n	126ce <_strtoll_l.isra.0+0xbe>
   12702:	sub.w	ip, r4, #97	; 0x61
   12706:	cmp.w	ip, #25
   1270a:	bhi.n	12714 <_strtoll_l.isra.0+0x104>
   1270c:	sub.w	ip, r4, #87	; 0x57
   12710:	cmp	sl, ip
   12712:	bgt.n	126ee <_strtoll_l.isra.0+0xde>
   12714:	cmp.w	lr, #4294967295
   12718:	beq.n	12758 <_strtoll_l.isra.0+0x148>
   1271a:	ldr	r1, [sp, #0]
   1271c:	cbz	r1, 12724 <_strtoll_l.isra.0+0x114>
   1271e:	negs	r2, r2
   12720:	sbc.w	r3, r3, r3, lsl #1
   12724:	ldr	r1, [sp, #4]
   12726:	cmp	r1, #0
   12728:	beq.n	127b0 <_strtoll_l.isra.0+0x1a0>
   1272a:	cmp.w	lr, #0
   1272e:	bne.n	12770 <_strtoll_l.isra.0+0x160>
   12730:	ldr	r5, [sp, #8]
   12732:	mov	r0, r2
   12734:	mov	r1, r3
   12736:	ldr	r3, [sp, #4]
   12738:	str	r5, [r3, #0]
   1273a:	add	sp, #20
   1273c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12740:	cmp	fp, ip
   12742:	bge.n	126b4 <_strtoll_l.isra.0+0xa4>
   12744:	mov	r2, r0
   12746:	mov	r3, r1
   12748:	mov.w	lr, #4294967295
   1274c:	b.n	126ce <_strtoll_l.isra.0+0xbe>
   1274e:	movs	r3, #1
   12750:	adds	r5, r7, #2
   12752:	ldrb	r4, [r7, #1]
   12754:	str	r3, [sp, #0]
   12756:	b.n	12654 <_strtoll_l.isra.0+0x44>
   12758:	ldr	r3, [sp, #0]
   1275a:	cbnz	r3, 127a8 <_strtoll_l.isra.0+0x198>
   1275c:	mov.w	r0, #4294967295
   12760:	mvn.w	r1, #2147483648	; 0x80000000
   12764:	ldr	r2, [sp, #12]
   12766:	movs	r3, #34	; 0x22
   12768:	str	r3, [r2, #0]
   1276a:	ldr	r3, [sp, #4]
   1276c:	cbnz	r3, 12774 <_strtoll_l.isra.0+0x164>
   1276e:	b.n	1273a <_strtoll_l.isra.0+0x12a>
   12770:	mov	r0, r2
   12772:	mov	r1, r3
   12774:	subs	r5, #1
   12776:	b.n	12736 <_strtoll_l.isra.0+0x126>
   12778:	ldrb	r3, [r5, #0]
   1277a:	and.w	r3, r3, #223	; 0xdf
   1277e:	cmp	r3, #88	; 0x58
   12780:	beq.n	1279a <_strtoll_l.isra.0+0x18a>
   12782:	movs	r6, #8
   12784:	movs	r7, #0
   12786:	mov.w	sl, #8
   1278a:	b.n	12680 <_strtoll_l.isra.0+0x70>
   1278c:	cmp	r4, #48	; 0x30
   1278e:	bne.n	127b6 <_strtoll_l.isra.0+0x1a6>
   12790:	ldrb	r3, [r5, #0]
   12792:	and.w	r3, r3, #223	; 0xdf
   12796:	cmp	r3, #88	; 0x58
   12798:	bne.n	127b6 <_strtoll_l.isra.0+0x1a6>
   1279a:	ldrb	r4, [r5, #1]
   1279c:	movs	r6, #16
   1279e:	movs	r7, #0
   127a0:	adds	r5, #2
   127a2:	mov.w	sl, #16
   127a6:	b.n	12680 <_strtoll_l.isra.0+0x70>
   127a8:	movs	r0, #0
   127aa:	mov.w	r1, #2147483648	; 0x80000000
   127ae:	b.n	12764 <_strtoll_l.isra.0+0x154>
   127b0:	mov	r0, r2
   127b2:	mov	r1, r3
   127b4:	b.n	1273a <_strtoll_l.isra.0+0x12a>
   127b6:	movs	r6, #16
   127b8:	movs	r7, #0
   127ba:	b.n	12680 <_strtoll_l.isra.0+0x70>

000127bc <_strtoll_r>:
   127bc:	push	{r4, r5, lr}
   127be:	ldr	r4, [pc, #24]	; (127d8 <_strtoll_r+0x1c>)
   127c0:	ldr	r5, [pc, #24]	; (127dc <_strtoll_r+0x20>)
   127c2:	ldr	r4, [r4, #0]
   127c4:	ldr	r4, [r4, #52]	; 0x34
   127c6:	sub	sp, #12
   127c8:	cmp	r4, #0
   127ca:	it	eq
   127cc:	moveq	r4, r5
   127ce:	str	r4, [sp, #0]
   127d0:	bl	12610 <_strtoll_l.isra.0>
   127d4:	add	sp, #12
   127d6:	pop	{r4, r5, pc}
   127d8:	.word	0x20002508
   127dc:	.word	0x20001f8c

000127e0 <_strtoul_l.isra.0>:
   127e0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127e4:	ldr.w	r9, [sp, #40]	; 0x28
   127e8:	mov	r6, r1
   127ea:	mov	r7, r0
   127ec:	mov	r5, r2
   127ee:	mov	r8, r3
   127f0:	mov	fp, r1
   127f2:	b.n	127f6 <_strtoul_l.isra.0+0x16>
   127f4:	mov	fp, r4
   127f6:	mov	r4, fp
   127f8:	mov	r0, r9
   127fa:	ldrb.w	sl, [r4], #1
   127fe:	bl	c0bc <__locale_ctype_ptr_l>
   12802:	add	r0, sl
   12804:	ldrb	r0, [r0, #1]
   12806:	and.w	r0, r0, #8
   1280a:	and.w	ip, r0, #255	; 0xff
   1280e:	cmp	r0, #0
   12810:	bne.n	127f4 <_strtoul_l.isra.0+0x14>
   12812:	mov	r1, sl
   12814:	cmp	r1, #45	; 0x2d
   12816:	beq.n	128dc <_strtoul_l.isra.0+0xfc>
   12818:	cmp	r1, #43	; 0x2b
   1281a:	itt	eq
   1281c:	ldrbeq.w	r1, [fp, #1]
   12820:	addeq.w	r4, fp, #2
   12824:	cmp.w	r8, #0
   12828:	beq.n	12844 <_strtoul_l.isra.0+0x64>
   1282a:	cmp.w	r8, #16
   1282e:	beq.n	128ea <_strtoul_l.isra.0+0x10a>
   12830:	mov.w	r3, #4294967295
   12834:	udiv	r3, r3, r8
   12838:	mul.w	sl, r8, r3
   1283c:	mvn.w	sl, sl
   12840:	mov	r9, r8
   12842:	b.n	12854 <_strtoul_l.isra.0+0x74>
   12844:	cmp	r1, #48	; 0x30
   12846:	beq.n	1290c <_strtoul_l.isra.0+0x12c>
   12848:	mov.w	r8, #10
   1284c:	ldr	r3, [pc, #244]	; (12944 <_strtoul_l.isra.0+0x164>)
   1284e:	mov	r9, r8
   12850:	mov.w	sl, #5
   12854:	mov.w	lr, #0
   12858:	mov	r0, lr
   1285a:	b.n	1286a <_strtoul_l.isra.0+0x8a>
   1285c:	beq.n	128be <_strtoul_l.isra.0+0xde>
   1285e:	mla	r0, r9, r0, r2
   12862:	mov.w	lr, #1
   12866:	ldrb.w	r1, [r4], #1
   1286a:	sub.w	r2, r1, #48	; 0x30
   1286e:	cmp	r2, #9
   12870:	bls.n	1287e <_strtoul_l.isra.0+0x9e>
   12872:	sub.w	r2, r1, #65	; 0x41
   12876:	cmp	r2, #25
   12878:	bhi.n	12892 <_strtoul_l.isra.0+0xb2>
   1287a:	sub.w	r2, r1, #55	; 0x37
   1287e:	cmp	r8, r2
   12880:	ble.n	128a2 <_strtoul_l.isra.0+0xc2>
   12882:	cmp.w	lr, #4294967295
   12886:	beq.n	12866 <_strtoul_l.isra.0+0x86>
   12888:	cmp	r0, r3
   1288a:	bls.n	1285c <_strtoul_l.isra.0+0x7c>
   1288c:	mov.w	lr, #4294967295
   12890:	b.n	12866 <_strtoul_l.isra.0+0x86>
   12892:	sub.w	r2, r1, #97	; 0x61
   12896:	cmp	r2, #25
   12898:	bhi.n	128a2 <_strtoul_l.isra.0+0xc2>
   1289a:	sub.w	r2, r1, #87	; 0x57
   1289e:	cmp	r8, r2
   128a0:	bgt.n	12882 <_strtoul_l.isra.0+0xa2>
   128a2:	cmp.w	lr, #4294967295
   128a6:	beq.n	128cc <_strtoul_l.isra.0+0xec>
   128a8:	cmp.w	ip, #0
   128ac:	beq.n	128b0 <_strtoul_l.isra.0+0xd0>
   128ae:	negs	r0, r0
   128b0:	cbz	r5, 128c8 <_strtoul_l.isra.0+0xe8>
   128b2:	cmp.w	lr, #0
   128b6:	bne.n	128d4 <_strtoul_l.isra.0+0xf4>
   128b8:	str	r6, [r5, #0]
   128ba:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128be:	cmp	r2, sl
   128c0:	ble.n	1285e <_strtoul_l.isra.0+0x7e>
   128c2:	mov.w	lr, #4294967295
   128c6:	b.n	12866 <_strtoul_l.isra.0+0x86>
   128c8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128cc:	movs	r3, #34	; 0x22
   128ce:	str	r3, [r7, #0]
   128d0:	mov	r0, lr
   128d2:	cbz	r5, 12926 <_strtoul_l.isra.0+0x146>
   128d4:	subs	r6, r4, #1
   128d6:	str	r6, [r5, #0]
   128d8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128dc:	add.w	r4, fp, #2
   128e0:	ldrb.w	r1, [fp, #1]
   128e4:	mov.w	ip, #1
   128e8:	b.n	12824 <_strtoul_l.isra.0+0x44>
   128ea:	cmp	r1, #48	; 0x30
   128ec:	bne.n	1292a <_strtoul_l.isra.0+0x14a>
   128ee:	ldrb	r3, [r4, #0]
   128f0:	and.w	r3, r3, #223	; 0xdf
   128f4:	cmp	r3, #88	; 0x58
   128f6:	bne.n	12936 <_strtoul_l.isra.0+0x156>
   128f8:	mov.w	r9, #16
   128fc:	ldrb	r1, [r4, #1]
   128fe:	mov	r8, r9
   12900:	mov.w	sl, #15
   12904:	adds	r4, #2
   12906:	mvn.w	r3, #4026531840	; 0xf0000000
   1290a:	b.n	12854 <_strtoul_l.isra.0+0x74>
   1290c:	ldrb	r3, [r4, #0]
   1290e:	and.w	r3, r3, #223	; 0xdf
   12912:	cmp	r3, #88	; 0x58
   12914:	beq.n	128f8 <_strtoul_l.isra.0+0x118>
   12916:	mov.w	r8, #8
   1291a:	mov	r9, r8
   1291c:	mov.w	sl, #7
   12920:	mvn.w	r3, #3758096384	; 0xe0000000
   12924:	b.n	12854 <_strtoul_l.isra.0+0x74>
   12926:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1292a:	mov.w	sl, #15
   1292e:	mvn.w	r3, #4026531840	; 0xf0000000
   12932:	mov	r9, r8
   12934:	b.n	12854 <_strtoul_l.isra.0+0x74>
   12936:	mov	r9, r8
   12938:	mov.w	sl, #15
   1293c:	mvn.w	r3, #4026531840	; 0xf0000000
   12940:	b.n	12854 <_strtoul_l.isra.0+0x74>
   12942:	nop
   12944:	.word	0x19999999

00012948 <_strtoul_r>:
   12948:	push	{r4, r5, lr}
   1294a:	ldr	r4, [pc, #24]	; (12964 <_strtoul_r+0x1c>)
   1294c:	ldr	r5, [pc, #24]	; (12968 <_strtoul_r+0x20>)
   1294e:	ldr	r4, [r4, #0]
   12950:	ldr	r4, [r4, #52]	; 0x34
   12952:	sub	sp, #12
   12954:	cmp	r4, #0
   12956:	it	eq
   12958:	moveq	r4, r5
   1295a:	str	r4, [sp, #0]
   1295c:	bl	127e0 <_strtoul_l.isra.0>
   12960:	add	sp, #12
   12962:	pop	{r4, r5, pc}
   12964:	.word	0x20002508
   12968:	.word	0x20001f8c

0001296c <_strtoull_l.isra.0>:
   1296c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12970:	sub	sp, #20
   12972:	mov	fp, r1
   12974:	str	r0, [sp, #8]
   12976:	mov	r7, r2
   12978:	mov	r6, r3
   1297a:	mov	r8, r1
   1297c:	ldr	r4, [sp, #56]	; 0x38
   1297e:	b.n	12982 <_strtoull_l.isra.0+0x16>
   12980:	mov	r8, r5
   12982:	mov	r5, r8
   12984:	mov	r0, r4
   12986:	ldrb.w	r9, [r5], #1
   1298a:	bl	c0bc <__locale_ctype_ptr_l>
   1298e:	add	r0, r9
   12990:	ldrb	r3, [r0, #1]
   12992:	and.w	r3, r3, #8
   12996:	and.w	r2, r3, #255	; 0xff
   1299a:	cmp	r3, #0
   1299c:	bne.n	12980 <_strtoull_l.isra.0+0x14>
   1299e:	mov	r4, r9
   129a0:	cmp	r4, #45	; 0x2d
   129a2:	beq.w	12abe <_strtoull_l.isra.0+0x152>
   129a6:	cmp	r4, #43	; 0x2b
   129a8:	it	eq
   129aa:	ldrbeq.w	r4, [r8, #1]
   129ae:	str	r2, [sp, #4]
   129b0:	it	eq
   129b2:	addeq.w	r5, r8, #2
   129b6:	cbz	r6, 129f0 <_strtoull_l.isra.0+0x84>
   129b8:	cmp	r6, #16
   129ba:	beq.w	12acc <_strtoull_l.isra.0+0x160>
   129be:	mov.w	r9, r6, asr #31
   129c2:	mov	r2, r6
   129c4:	mov	r3, r9
   129c6:	mov.w	r0, #4294967295
   129ca:	mov.w	r1, #4294967295
   129ce:	bl	bd08 <__aeabi_uldivmod>
   129d2:	mov	r2, r6
   129d4:	str	r0, [sp, #12]
   129d6:	mov	sl, r1
   129d8:	mov	r3, r9
   129da:	mov.w	r0, #4294967295
   129de:	mov.w	r1, #4294967295
   129e2:	bl	bd08 <__aeabi_uldivmod>
   129e6:	mov	r8, r6
   129e8:	mov	lr, r2
   129ea:	ldr	r2, [sp, #12]
   129ec:	mov	r3, sl
   129ee:	b.n	12a0a <_strtoull_l.isra.0+0x9e>
   129f0:	cmp	r4, #48	; 0x30
   129f2:	beq.w	12af8 <_strtoull_l.isra.0+0x18c>
   129f6:	ldr	r3, [pc, #348]	; (12b54 <_strtoull_l.isra.0+0x1e8>)
   129f8:	mov.w	lr, #5
   129fc:	mov.w	r2, #2576980377	; 0x99999999
   12a00:	mov.w	r8, #10
   12a04:	mov.w	r9, #0
   12a08:	movs	r6, #10
   12a0a:	mov.w	ip, #0
   12a0e:	movs	r0, #0
   12a10:	movs	r1, #0
   12a12:	b.n	12a3a <_strtoull_l.isra.0+0xce>
   12a14:	cmp	r1, r3
   12a16:	it	eq
   12a18:	cmpeq	r0, r2
   12a1a:	beq.n	12a9e <_strtoull_l.isra.0+0x132>
   12a1c:	mul.w	r4, r0, r9
   12a20:	mla	r4, r8, r1, r4
   12a24:	umull	r0, r1, r0, r8
   12a28:	add	r1, r4
   12a2a:	adds.w	r0, r0, sl
   12a2e:	adc.w	r1, r1, sl, asr #31
   12a32:	mov.w	ip, #1
   12a36:	ldrb.w	r4, [r5], #1
   12a3a:	sub.w	sl, r4, #48	; 0x30
   12a3e:	cmp.w	sl, #9
   12a42:	bls.n	12a52 <_strtoull_l.isra.0+0xe6>
   12a44:	sub.w	sl, r4, #65	; 0x41
   12a48:	cmp.w	sl, #25
   12a4c:	bhi.n	12a6a <_strtoull_l.isra.0+0xfe>
   12a4e:	sub.w	sl, r4, #55	; 0x37
   12a52:	cmp	r6, sl
   12a54:	ble.n	12a7c <_strtoull_l.isra.0+0x110>
   12a56:	cmp.w	ip, #4294967295
   12a5a:	beq.n	12a36 <_strtoull_l.isra.0+0xca>
   12a5c:	cmp	r3, r1
   12a5e:	it	eq
   12a60:	cmpeq	r2, r0
   12a62:	bcs.n	12a14 <_strtoull_l.isra.0+0xa8>
   12a64:	mov.w	ip, #4294967295
   12a68:	b.n	12a36 <_strtoull_l.isra.0+0xca>
   12a6a:	sub.w	sl, r4, #97	; 0x61
   12a6e:	cmp.w	sl, #25
   12a72:	bhi.n	12a7c <_strtoull_l.isra.0+0x110>
   12a74:	sub.w	sl, r4, #87	; 0x57
   12a78:	cmp	r6, sl
   12a7a:	bgt.n	12a56 <_strtoull_l.isra.0+0xea>
   12a7c:	cmp.w	ip, #4294967295
   12a80:	beq.n	12aa8 <_strtoull_l.isra.0+0x13c>
   12a82:	ldr	r3, [sp, #4]
   12a84:	cbz	r3, 12a8c <_strtoull_l.isra.0+0x120>
   12a86:	negs	r0, r0
   12a88:	sbc.w	r1, r1, r1, lsl #1
   12a8c:	cbz	r7, 12a98 <_strtoull_l.isra.0+0x12c>
   12a8e:	cmp.w	ip, #0
   12a92:	bne.n	12aba <_strtoull_l.isra.0+0x14e>
   12a94:	mov	r5, fp
   12a96:	str	r5, [r7, #0]
   12a98:	add	sp, #20
   12a9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a9e:	cmp	sl, lr
   12aa0:	ble.n	12a1c <_strtoull_l.isra.0+0xb0>
   12aa2:	mov.w	ip, #4294967295
   12aa6:	b.n	12a36 <_strtoull_l.isra.0+0xca>
   12aa8:	ldr	r2, [sp, #8]
   12aaa:	movs	r3, #34	; 0x22
   12aac:	str	r3, [r2, #0]
   12aae:	mov.w	r0, #4294967295
   12ab2:	mov.w	r1, #4294967295
   12ab6:	cmp	r7, #0
   12ab8:	beq.n	12a98 <_strtoull_l.isra.0+0x12c>
   12aba:	subs	r5, #1
   12abc:	b.n	12a96 <_strtoull_l.isra.0+0x12a>
   12abe:	movs	r3, #1
   12ac0:	add.w	r5, r8, #2
   12ac4:	ldrb.w	r4, [r8, #1]
   12ac8:	str	r3, [sp, #4]
   12aca:	b.n	129b6 <_strtoull_l.isra.0+0x4a>
   12acc:	cmp	r4, #48	; 0x30
   12ace:	bne.n	12b1a <_strtoull_l.isra.0+0x1ae>
   12ad0:	ldrb	r3, [r5, #0]
   12ad2:	and.w	r3, r3, #223	; 0xdf
   12ad6:	cmp	r3, #88	; 0x58
   12ad8:	bne.n	12b30 <_strtoull_l.isra.0+0x1c4>
   12ada:	mov.w	r3, #4294967295
   12ade:	ldrb	r4, [r5, #1]
   12ae0:	str	r3, [sp, #12]
   12ae2:	mov.w	lr, #15
   12ae6:	adds	r5, #2
   12ae8:	mvn.w	sl, #4026531840	; 0xf0000000
   12aec:	mov.w	r8, #16
   12af0:	mov.w	r9, #0
   12af4:	movs	r6, #16
   12af6:	b.n	129ea <_strtoull_l.isra.0+0x7e>
   12af8:	ldrb	r3, [r5, #0]
   12afa:	and.w	r3, r3, #223	; 0xdf
   12afe:	cmp	r3, #88	; 0x58
   12b00:	beq.n	12ada <_strtoull_l.isra.0+0x16e>
   12b02:	mov.w	lr, #7
   12b06:	mov.w	r2, #4294967295
   12b0a:	mvn.w	r3, #3758096384	; 0xe0000000
   12b0e:	mov.w	r8, #8
   12b12:	mov.w	r9, #0
   12b16:	movs	r6, #8
   12b18:	b.n	12a0a <_strtoull_l.isra.0+0x9e>
   12b1a:	mov.w	lr, #15
   12b1e:	mov.w	r2, #4294967295
   12b22:	mvn.w	r3, #4026531840	; 0xf0000000
   12b26:	mov.w	r8, #16
   12b2a:	mov.w	r9, #0
   12b2e:	b.n	12a0a <_strtoull_l.isra.0+0x9e>
   12b30:	mov.w	r8, #16
   12b34:	mov.w	r9, #0
   12b38:	mov	r2, r8
   12b3a:	mov	r3, r9
   12b3c:	mov.w	r0, #4294967295
   12b40:	mov.w	r1, #4294967295
   12b44:	bl	bd08 <__aeabi_uldivmod>
   12b48:	mvn.w	r3, #4026531840	; 0xf0000000
   12b4c:	mov	lr, r2
   12b4e:	mov.w	r2, #4294967295
   12b52:	b.n	12a0a <_strtoull_l.isra.0+0x9e>
   12b54:	.word	0x19999999

00012b58 <_strtoull_r>:
   12b58:	push	{r4, r5, lr}
   12b5a:	ldr	r4, [pc, #24]	; (12b74 <_strtoull_r+0x1c>)
   12b5c:	ldr	r5, [pc, #24]	; (12b78 <_strtoull_r+0x20>)
   12b5e:	ldr	r4, [r4, #0]
   12b60:	ldr	r4, [r4, #52]	; 0x34
   12b62:	sub	sp, #12
   12b64:	cmp	r4, #0
   12b66:	it	eq
   12b68:	moveq	r4, r5
   12b6a:	str	r4, [sp, #0]
   12b6c:	bl	1296c <_strtoull_l.isra.0>
   12b70:	add	sp, #12
   12b72:	pop	{r4, r5, pc}
   12b74:	.word	0x20002508
   12b78:	.word	0x20001f8c

00012b7c <__ssprint_r>:
   12b7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b80:	ldr	r3, [r2, #8]
   12b82:	sub	sp, #12
   12b84:	mov	r8, r2
   12b86:	cmp	r3, #0
   12b88:	beq.n	12c70 <__ssprint_r+0xf4>
   12b8a:	mov	fp, r0
   12b8c:	mov.w	r9, #0
   12b90:	ldr	r6, [r2, #0]
   12b92:	ldr	r0, [r1, #0]
   12b94:	ldr	r3, [r1, #8]
   12b96:	mov	r5, r1
   12b98:	mov	r4, r9
   12b9a:	cmp	r4, #0
   12b9c:	beq.n	12c2a <__ssprint_r+0xae>
   12b9e:	cmp	r4, r3
   12ba0:	mov	r7, r3
   12ba2:	mov	sl, r3
   12ba4:	bcc.n	12c34 <__ssprint_r+0xb8>
   12ba6:	ldrh	r3, [r5, #12]
   12ba8:	tst.w	r3, #1152	; 0x480
   12bac:	beq.n	12c0a <__ssprint_r+0x8e>
   12bae:	ldr	r7, [r5, #20]
   12bb0:	ldr	r1, [r5, #16]
   12bb2:	add.w	r7, r7, r7, lsl #1
   12bb6:	rsb	sl, r1, r0
   12bba:	add.w	r7, r7, r7, lsr #31
   12bbe:	adds	r0, r4, #1
   12bc0:	asrs	r7, r7, #1
   12bc2:	add	r0, sl
   12bc4:	cmp	r0, r7
   12bc6:	mov	r2, r7
   12bc8:	itt	hi
   12bca:	movhi	r7, r0
   12bcc:	movhi	r2, r7
   12bce:	lsls	r3, r3, #21
   12bd0:	bpl.n	12c3a <__ssprint_r+0xbe>
   12bd2:	mov	r1, r2
   12bd4:	mov	r0, fp
   12bd6:	bl	c0f8 <_malloc_r>
   12bda:	cmp	r0, #0
   12bdc:	beq.n	12c4e <__ssprint_r+0xd2>
   12bde:	mov	r2, sl
   12be0:	ldr	r1, [r5, #16]
   12be2:	str	r0, [sp, #4]
   12be4:	bl	9920 <memcpy>
   12be8:	ldrh	r2, [r5, #12]
   12bea:	ldr	r3, [sp, #4]
   12bec:	bic.w	r2, r2, #1152	; 0x480
   12bf0:	orr.w	r2, r2, #128	; 0x80
   12bf4:	strh	r2, [r5, #12]
   12bf6:	rsb	r2, sl, r7
   12bfa:	add.w	r0, r3, sl
   12bfe:	str	r7, [r5, #20]
   12c00:	str	r3, [r5, #16]
   12c02:	str	r0, [r5, #0]
   12c04:	str	r2, [r5, #8]
   12c06:	mov	r7, r4
   12c08:	mov	sl, r4
   12c0a:	mov	r2, sl
   12c0c:	mov	r1, r9
   12c0e:	bl	c7a4 <memmove>
   12c12:	ldr.w	r2, [r8, #8]
   12c16:	ldr	r3, [r5, #8]
   12c18:	ldr	r0, [r5, #0]
   12c1a:	subs	r3, r3, r7
   12c1c:	add	r0, sl
   12c1e:	subs	r4, r2, r4
   12c20:	str	r3, [r5, #8]
   12c22:	str	r0, [r5, #0]
   12c24:	str.w	r4, [r8, #8]
   12c28:	cbz	r4, 12c70 <__ssprint_r+0xf4>
   12c2a:	ldr.w	r9, [r6]
   12c2e:	ldr	r4, [r6, #4]
   12c30:	adds	r6, #8
   12c32:	b.n	12b9a <__ssprint_r+0x1e>
   12c34:	mov	r7, r4
   12c36:	mov	sl, r4
   12c38:	b.n	12c0a <__ssprint_r+0x8e>
   12c3a:	mov	r0, fp
   12c3c:	bl	c910 <_realloc_r>
   12c40:	mov	r3, r0
   12c42:	cmp	r0, #0
   12c44:	bne.n	12bf6 <__ssprint_r+0x7a>
   12c46:	ldr	r1, [r5, #16]
   12c48:	mov	r0, fp
   12c4a:	bl	112e8 <_free_r>
   12c4e:	movs	r3, #12
   12c50:	str.w	r3, [fp]
   12c54:	ldrh	r3, [r5, #12]
   12c56:	movs	r2, #0
   12c58:	orr.w	r3, r3, #64	; 0x40
   12c5c:	mov.w	r0, #4294967295
   12c60:	strh	r3, [r5, #12]
   12c62:	str.w	r2, [r8, #8]
   12c66:	str.w	r2, [r8, #4]
   12c6a:	add	sp, #12
   12c6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c70:	movs	r0, #0
   12c72:	str.w	r0, [r8, #4]
   12c76:	add	sp, #12
   12c78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012c7c <_sungetc_r>:
   12c7c:	adds	r3, r1, #1
   12c7e:	push	{r4, r5, r6, lr}
   12c80:	beq.n	12cba <_sungetc_r+0x3e>
   12c82:	ldrh	r3, [r2, #12]
   12c84:	ldr	r4, [r2, #48]	; 0x30
   12c86:	bic.w	r3, r3, #32
   12c8a:	strh	r3, [r2, #12]
   12c8c:	uxtb	r5, r1
   12c8e:	cbz	r4, 12cc0 <_sungetc_r+0x44>
   12c90:	mov	r4, r2
   12c92:	ldr	r2, [r2, #4]
   12c94:	ldr	r3, [r4, #52]	; 0x34
   12c96:	cmp	r2, r3
   12c98:	mov	r6, r1
   12c9a:	bge.n	12cb0 <_sungetc_r+0x34>
   12c9c:	ldr	r3, [r4, #0]
   12c9e:	subs	r2, r3, #1
   12ca0:	str	r2, [r4, #0]
   12ca2:	strb.w	r6, [r3, #-1]
   12ca6:	ldr	r3, [r4, #4]
   12ca8:	adds	r3, #1
   12caa:	str	r3, [r4, #4]
   12cac:	mov	r0, r5
   12cae:	pop	{r4, r5, r6, pc}
   12cb0:	mov	r1, r4
   12cb2:	bl	12dc0 <__submore>
   12cb6:	cmp	r0, #0
   12cb8:	beq.n	12c9c <_sungetc_r+0x20>
   12cba:	mov.w	r5, #4294967295
   12cbe:	b.n	12cac <_sungetc_r+0x30>
   12cc0:	ldr	r0, [r2, #16]
   12cc2:	ldr	r3, [r2, #0]
   12cc4:	cbz	r0, 12cd2 <_sungetc_r+0x56>
   12cc6:	cmp	r0, r3
   12cc8:	bcs.n	12cd2 <_sungetc_r+0x56>
   12cca:	ldrb.w	r0, [r3, #-1]
   12cce:	cmp	r5, r0
   12cd0:	beq.n	12cf2 <_sungetc_r+0x76>
   12cd2:	str	r3, [r2, #56]	; 0x38
   12cd4:	mov	r3, r2
   12cd6:	ldr	r6, [r2, #4]
   12cd8:	str	r6, [r2, #60]	; 0x3c
   12cda:	add.w	r4, r2, #64	; 0x40
   12cde:	movs	r0, #3
   12ce0:	str	r0, [r2, #52]	; 0x34
   12ce2:	str	r4, [r2, #48]	; 0x30
   12ce4:	strb.w	r1, [r3, #66]!
   12ce8:	movs	r1, #1
   12cea:	str	r3, [r2, #0]
   12cec:	str	r1, [r2, #4]
   12cee:	mov	r0, r5
   12cf0:	pop	{r4, r5, r6, pc}
   12cf2:	ldr	r1, [r2, #4]
   12cf4:	subs	r3, #1
   12cf6:	adds	r1, #1
   12cf8:	str	r3, [r2, #0]
   12cfa:	str	r1, [r2, #4]
   12cfc:	b.n	12cac <_sungetc_r+0x30>
   12cfe:	nop

00012d00 <__ssrefill_r>:
   12d00:	push	{r4, lr}
   12d02:	mov	r4, r1
   12d04:	ldr	r1, [r1, #48]	; 0x30
   12d06:	cbz	r1, 12d24 <__ssrefill_r+0x24>
   12d08:	add.w	r3, r4, #64	; 0x40
   12d0c:	cmp	r1, r3
   12d0e:	beq.n	12d14 <__ssrefill_r+0x14>
   12d10:	bl	112e8 <_free_r>
   12d14:	ldr	r3, [r4, #60]	; 0x3c
   12d16:	str	r3, [r4, #4]
   12d18:	movs	r0, #0
   12d1a:	str	r0, [r4, #48]	; 0x30
   12d1c:	cbz	r3, 12d24 <__ssrefill_r+0x24>
   12d1e:	ldr	r3, [r4, #56]	; 0x38
   12d20:	str	r3, [r4, #0]
   12d22:	pop	{r4, pc}
   12d24:	ldrh	r3, [r4, #12]
   12d26:	ldr	r2, [r4, #16]
   12d28:	str	r2, [r4, #0]
   12d2a:	orr.w	r3, r3, #32
   12d2e:	movs	r2, #0
   12d30:	strh	r3, [r4, #12]
   12d32:	str	r2, [r4, #4]
   12d34:	mov.w	r0, #4294967295
   12d38:	pop	{r4, pc}
   12d3a:	nop

00012d3c <_sfread_r>:
   12d3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d40:	sub	sp, #12
   12d42:	mul.w	r9, r2, r3
   12d46:	str	r2, [sp, #4]
   12d48:	mov	sl, r3
   12d4a:	ldr	r4, [sp, #48]	; 0x30
   12d4c:	cmp.w	r9, #0
   12d50:	beq.n	12da6 <_sfread_r+0x6a>
   12d52:	mov	r7, r0
   12d54:	mov	r6, r1
   12d56:	mov	r5, r9
   12d58:	mov.w	r8, #0
   12d5c:	b.n	12d7e <_sfread_r+0x42>
   12d5e:	ldr	r1, [r4, #0]
   12d60:	bl	9920 <memcpy>
   12d64:	ldr	r2, [r4, #0]
   12d66:	str.w	r8, [r4, #4]
   12d6a:	add	r2, fp
   12d6c:	str	r2, [r4, #0]
   12d6e:	mov	r1, r4
   12d70:	mov	r0, r7
   12d72:	add	r6, fp
   12d74:	rsb	r5, fp, r5
   12d78:	bl	12d00 <__ssrefill_r>
   12d7c:	cbnz	r0, 12dae <_sfread_r+0x72>
   12d7e:	ldr.w	fp, [r4, #4]
   12d82:	cmp	r5, fp
   12d84:	mov	r0, r6
   12d86:	mov	r2, fp
   12d88:	bhi.n	12d5e <_sfread_r+0x22>
   12d8a:	mov	r2, r5
   12d8c:	ldr	r1, [r4, #0]
   12d8e:	bl	9920 <memcpy>
   12d92:	ldr	r2, [r4, #4]
   12d94:	ldr	r3, [r4, #0]
   12d96:	subs	r2, r2, r5
   12d98:	add	r3, r5
   12d9a:	mov	r0, sl
   12d9c:	str	r2, [r4, #4]
   12d9e:	str	r3, [r4, #0]
   12da0:	add	sp, #12
   12da2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12da6:	mov	r0, r9
   12da8:	add	sp, #12
   12daa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dae:	ldr	r3, [sp, #4]
   12db0:	rsb	r9, r5, r9
   12db4:	udiv	r0, r9, r3
   12db8:	add	sp, #12
   12dba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dbe:	nop

00012dc0 <__submore>:
   12dc0:	add.w	r3, r1, #64	; 0x40
   12dc4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12dc8:	mov	r4, r1
   12dca:	ldr	r1, [r1, #48]	; 0x30
   12dcc:	cmp	r1, r3
   12dce:	beq.n	12dfa <__submore+0x3a>
   12dd0:	ldr	r6, [r4, #52]	; 0x34
   12dd2:	lsls	r7, r6, #1
   12dd4:	mov	r2, r7
   12dd6:	bl	c910 <_realloc_r>
   12dda:	mov	r5, r0
   12ddc:	cbz	r0, 12e30 <__submore+0x70>
   12dde:	add.w	r8, r0, r6
   12de2:	mov	r2, r6
   12de4:	mov	r0, r8
   12de6:	mov	r1, r5
   12de8:	bl	9920 <memcpy>
   12dec:	str.w	r8, [r4]
   12df0:	str	r5, [r4, #48]	; 0x30
   12df2:	str	r7, [r4, #52]	; 0x34
   12df4:	movs	r0, #0
   12df6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12dfa:	mov.w	r1, #1024	; 0x400
   12dfe:	bl	c0f8 <_malloc_r>
   12e02:	cbz	r0, 12e30 <__submore+0x70>
   12e04:	ldrb.w	r3, [r4, #66]	; 0x42
   12e08:	str	r0, [r4, #48]	; 0x30
   12e0a:	mov.w	r2, #1024	; 0x400
   12e0e:	str	r2, [r4, #52]	; 0x34
   12e10:	strb.w	r3, [r0, #1023]	; 0x3ff
   12e14:	ldrb.w	r3, [r4, #65]	; 0x41
   12e18:	strb.w	r3, [r0, #1022]	; 0x3fe
   12e1c:	ldrb.w	r3, [r4, #64]	; 0x40
   12e20:	strb.w	r3, [r0, #1021]	; 0x3fd
   12e24:	addw	r0, r0, #1021	; 0x3fd
   12e28:	str	r0, [r4, #0]
   12e2a:	movs	r0, #0
   12e2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12e30:	mov.w	r0, #4294967295
   12e34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012e38 <_vasnprintf_r>:
   12e38:	push	{r4, r5, r6, lr}
   12e3a:	mov	r5, r2
   12e3c:	sub	sp, #104	; 0x68
   12e3e:	ldr	r4, [r2, #0]
   12e40:	cbz	r1, 12e46 <_vasnprintf_r+0xe>
   12e42:	cmp	r4, #0
   12e44:	bne.n	12e7c <_vasnprintf_r+0x44>
   12e46:	movs	r4, #0
   12e48:	mov.w	r2, #648	; 0x288
   12e4c:	strh.w	r2, [sp, #12]
   12e50:	str	r4, [sp, #0]
   12e52:	str	r4, [sp, #16]
   12e54:	mov	r2, r3
   12e56:	movw	r6, #65535	; 0xffff
   12e5a:	ldr	r3, [sp, #120]	; 0x78
   12e5c:	str	r4, [sp, #8]
   12e5e:	mov	r1, sp
   12e60:	str	r4, [sp, #20]
   12e62:	strh.w	r6, [sp, #14]
   12e66:	bl	df60 <_svfprintf_r>
   12e6a:	cmp	r0, #0
   12e6c:	blt.n	12e92 <_vasnprintf_r+0x5a>
   12e6e:	ldr	r3, [sp, #0]
   12e70:	str	r0, [r5, #0]
   12e72:	movs	r2, #0
   12e74:	strb	r2, [r3, #0]
   12e76:	ldr	r0, [sp, #16]
   12e78:	add	sp, #104	; 0x68
   12e7a:	pop	{r4, r5, r6, pc}
   12e7c:	mov.w	r2, #1544	; 0x608
   12e80:	str	r1, [sp, #0]
   12e82:	str	r1, [sp, #16]
   12e84:	strh.w	r2, [sp, #12]
   12e88:	bge.n	12e54 <_vasnprintf_r+0x1c>
   12e8a:	movs	r3, #139	; 0x8b
   12e8c:	str	r3, [r0, #0]
   12e8e:	movs	r0, #0
   12e90:	b.n	12e78 <_vasnprintf_r+0x40>
   12e92:	movs	r0, #0
   12e94:	b.n	12e78 <_vasnprintf_r+0x40>
   12e96:	nop

00012e98 <_calloc_r>:
   12e98:	push	{r4, lr}
   12e9a:	mul.w	r1, r2, r1
   12e9e:	bl	c0f8 <_malloc_r>
   12ea2:	mov	r4, r0
   12ea4:	cbz	r0, 12ede <_calloc_r+0x46>
   12ea6:	ldr.w	r2, [r0, #-4]
   12eaa:	bic.w	r2, r2, #3
   12eae:	subs	r2, #4
   12eb0:	cmp	r2, #36	; 0x24
   12eb2:	bhi.n	12ee6 <_calloc_r+0x4e>
   12eb4:	cmp	r2, #19
   12eb6:	bls.n	12ee2 <_calloc_r+0x4a>
   12eb8:	movs	r3, #0
   12eba:	cmp	r2, #27
   12ebc:	str	r3, [r0, #0]
   12ebe:	str	r3, [r0, #4]
   12ec0:	bls.n	12ef0 <_calloc_r+0x58>
   12ec2:	cmp	r2, #36	; 0x24
   12ec4:	str	r3, [r0, #8]
   12ec6:	str	r3, [r0, #12]
   12ec8:	iteee	ne
   12eca:	addne.w	r2, r0, #16
   12ece:	streq	r3, [r0, #16]
   12ed0:	streq	r3, [r0, #20]
   12ed2:	addeq.w	r2, r0, #24
   12ed6:	movs	r3, #0
   12ed8:	str	r3, [r2, #0]
   12eda:	str	r3, [r2, #4]
   12edc:	str	r3, [r2, #8]
   12ede:	mov	r0, r4
   12ee0:	pop	{r4, pc}
   12ee2:	mov	r2, r0
   12ee4:	b.n	12ed6 <_calloc_r+0x3e>
   12ee6:	movs	r1, #0
   12ee8:	bl	c86c <memset>
   12eec:	mov	r0, r4
   12eee:	pop	{r4, pc}
   12ef0:	add.w	r2, r0, #8
   12ef4:	b.n	12ed6 <_calloc_r+0x3e>
   12ef6:	nop

00012ef8 <___reboot_Teensyduino__veneer>:
   12ef8:	ldr.w	pc, [pc]	; 12efc <___reboot_Teensyduino__veneer+0x4>
   12efc:	.word	0x60001749

00012f00 <___init_veneer>:
   12f00:	ldr.w	pc, [pc]	; 12f04 <___init_veneer+0x4>
   12f04:	.word	0x600024f9

00012f08 <___ZN16CrashReportClasscvbEv_veneer>:
   12f08:	ldr.w	pc, [pc]	; 12f0c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   12f0c:	.word	0x60002481

00012f10 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   12f10:	ldr.w	pc, [pc]	; 12f14 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   12f14:	.word	0x60001e55
	...

Disassembly of section .fini:

00012f20 <_fini>:
   12f20:	push	{r3, r4, r5, r6, r7, lr}
   12f22:	nop

Disassembly of section .text.csf:

600180f0 <_heap_end+0x3fd980f0>:
600180f0:	.word	0xffffffff
600180f4:	.word	0xffffffff
600180f8:	.word	0xffffffff
600180fc:	.word	0xffffffff
60018100:	.word	0xffffffff
60018104:	.word	0xffffffff
60018108:	.word	0xffffffff
6001810c:	.word	0xffffffff
60018110:	.word	0xffffffff
60018114:	.word	0xffffffff
60018118:	.word	0xffffffff
6001811c:	.word	0xffffffff
60018120:	.word	0xffffffff
60018124:	.word	0xffffffff
60018128:	.word	0xffffffff
6001812c:	.word	0xffffffff
60018130:	.word	0xffffffff
60018134:	.word	0xffffffff
60018138:	.word	0xffffffff
6001813c:	.word	0xffffffff
60018140:	.word	0xffffffff
60018144:	.word	0xffffffff
60018148:	.word	0xffffffff
6001814c:	.word	0xffffffff
60018150:	.word	0xffffffff
60018154:	.word	0xffffffff
60018158:	.word	0xffffffff
6001815c:	.word	0xffffffff
60018160:	.word	0xffffffff
60018164:	.word	0xffffffff
60018168:	.word	0xffffffff
6001816c:	.word	0xffffffff
60018170:	.word	0xffffffff
60018174:	.word	0xffffffff
60018178:	.word	0xffffffff
6001817c:	.word	0xffffffff
60018180:	.word	0xffffffff
60018184:	.word	0xffffffff
60018188:	.word	0xffffffff
6001818c:	.word	0xffffffff
60018190:	.word	0xffffffff
60018194:	.word	0xffffffff
60018198:	.word	0xffffffff
6001819c:	.word	0xffffffff
600181a0:	.word	0xffffffff
600181a4:	.word	0xffffffff
600181a8:	.word	0xffffffff
600181ac:	.word	0xffffffff
600181b0:	.word	0xffffffff
600181b4:	.word	0xffffffff
600181b8:	.word	0xffffffff
600181bc:	.word	0xffffffff
600181c0:	.word	0xffffffff
600181c4:	.word	0xffffffff
600181c8:	.word	0xffffffff
600181cc:	.word	0xffffffff
600181d0:	.word	0xffffffff
600181d4:	.word	0xffffffff
600181d8:	.word	0xffffffff
600181dc:	.word	0xffffffff
600181e0:	.word	0xffffffff
600181e4:	.word	0xffffffff
600181e8:	.word	0xffffffff
600181ec:	.word	0xffffffff
600181f0:	.word	0xffffffff
600181f4:	.word	0xffffffff
600181f8:	.word	0xffffffff
600181fc:	.word	0xffffffff
60018200:	.word	0xffffffff
60018204:	.word	0xffffffff
60018208:	.word	0xffffffff
6001820c:	.word	0xffffffff
60018210:	.word	0xffffffff
60018214:	.word	0xffffffff
60018218:	.word	0xffffffff
6001821c:	.word	0xffffffff
60018220:	.word	0xffffffff
60018224:	.word	0xffffffff
60018228:	.word	0xffffffff
6001822c:	.word	0xffffffff
60018230:	.word	0xffffffff
60018234:	.word	0xffffffff
60018238:	.word	0xffffffff
6001823c:	.word	0xffffffff
60018240:	.word	0xffffffff
60018244:	.word	0xffffffff
60018248:	.word	0xffffffff
6001824c:	.word	0xffffffff
60018250:	.word	0xffffffff
60018254:	.word	0xffffffff
60018258:	.word	0xffffffff
6001825c:	.word	0xffffffff
60018260:	.word	0xffffffff
60018264:	.word	0xffffffff
60018268:	.word	0xffffffff
6001826c:	.word	0xffffffff
60018270:	.word	0xffffffff
60018274:	.word	0xffffffff
60018278:	.word	0xffffffff
6001827c:	.word	0xffffffff
60018280:	.word	0xffffffff
60018284:	.word	0xffffffff
60018288:	.word	0xffffffff
6001828c:	.word	0xffffffff
60018290:	.word	0xffffffff
60018294:	.word	0xffffffff
60018298:	.word	0xffffffff
6001829c:	.word	0xffffffff
600182a0:	.word	0xffffffff
600182a4:	.word	0xffffffff
600182a8:	.word	0xffffffff
600182ac:	.word	0xffffffff
600182b0:	.word	0xffffffff
600182b4:	.word	0xffffffff
600182b8:	.word	0xffffffff
600182bc:	.word	0xffffffff
600182c0:	.word	0xffffffff
600182c4:	.word	0xffffffff
600182c8:	.word	0xffffffff
600182cc:	.word	0xffffffff
600182d0:	.word	0xffffffff
600182d4:	.word	0xffffffff
600182d8:	.word	0xffffffff
600182dc:	.word	0xffffffff
600182e0:	.word	0xffffffff
600182e4:	.word	0xffffffff
600182e8:	.word	0xffffffff
600182ec:	.word	0xffffffff
600182f0:	.word	0xffffffff
600182f4:	.word	0xffffffff
600182f8:	.word	0xffffffff
600182fc:	.word	0xffffffff
60018300:	.word	0xffffffff
60018304:	.word	0xffffffff
60018308:	.word	0xffffffff
6001830c:	.word	0xffffffff
60018310:	.word	0xffffffff
60018314:	.word	0xffffffff
60018318:	.word	0xffffffff
6001831c:	.word	0xffffffff
60018320:	.word	0xffffffff
60018324:	.word	0xffffffff
60018328:	.word	0xffffffff
6001832c:	.word	0xffffffff
60018330:	.word	0xffffffff
60018334:	.word	0xffffffff
60018338:	.word	0xffffffff
6001833c:	.word	0xffffffff
60018340:	.word	0xffffffff
60018344:	.word	0xffffffff
60018348:	.word	0xffffffff
6001834c:	.word	0xffffffff
60018350:	.word	0xffffffff
60018354:	.word	0xffffffff
60018358:	.word	0xffffffff
6001835c:	.word	0xffffffff
60018360:	.word	0xffffffff
60018364:	.word	0xffffffff
60018368:	.word	0xffffffff
6001836c:	.word	0xffffffff
60018370:	.word	0xffffffff
60018374:	.word	0xffffffff
60018378:	.word	0xffffffff
6001837c:	.word	0xffffffff
60018380:	.word	0xffffffff
60018384:	.word	0xffffffff
60018388:	.word	0xffffffff
6001838c:	.word	0xffffffff
60018390:	.word	0xffffffff
60018394:	.word	0xffffffff
60018398:	.word	0xffffffff
6001839c:	.word	0xffffffff
600183a0:	.word	0xffffffff
600183a4:	.word	0xffffffff
600183a8:	.word	0xffffffff
600183ac:	.word	0xffffffff
600183b0:	.word	0xffffffff
600183b4:	.word	0xffffffff
600183b8:	.word	0xffffffff
600183bc:	.word	0xffffffff
600183c0:	.word	0xffffffff
600183c4:	.word	0xffffffff
600183c8:	.word	0xffffffff
600183cc:	.word	0xffffffff
600183d0:	.word	0xffffffff
600183d4:	.word	0xffffffff
600183d8:	.word	0xffffffff
600183dc:	.word	0xffffffff
600183e0:	.word	0xffffffff
600183e4:	.word	0xffffffff
600183e8:	.word	0xffffffff
600183ec:	.word	0xffffffff
600183f0:	.word	0xffffffff
600183f4:	.word	0xffffffff
600183f8:	.word	0xffffffff
600183fc:	.word	0xffffffff

60018400 <hab_csf>:
	...

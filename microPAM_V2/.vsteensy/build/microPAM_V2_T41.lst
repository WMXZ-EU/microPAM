
.vsteensy/build/microPAM_V2_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
6000258c l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000ffb0 l    d  .fini	00000000 .fini
0000ffb4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
200026c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60014d14 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001400 l     F .text.code	00000016 memory_copy
60001418 l     F .text.code	00000010 memory_clear
60001428 l     F .text.code	00000204 ResetHandler2
00000000 l    df *ABS*	00000000 usb.c
00007508 l     F .text.itcm	00000090 schedule_transfer
00007598 l     F .text.itcm	00000036 run_callbacks
000075d0 l     F .text.itcm	000000a0 endpoint0_transmit.constprop.1
20021e88 l     O .bss	00000004 endpointN_notify_mask
200224ba l     O .bss	00000001 sof_usage
20021e84 l     O .bss	00000004 endpoint0_notify_mask
200224c1 l     O .bss	00000001 usb_reboot_timer
20005840 l     O .bss	00000008 endpoint0_setupdata
20021f78 l     O .bss	00000008 reply_buffer
20021e7c l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 tempmon.c
20021fb4 l     O .bss	00000004 s_hotTemp
20021fb8 l     O .bss	00000004 s_hot_ROOM
20021fbc l     O .bss	00000004 s_roomC_hotC
20021fb0 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 CrashReport.cpp
60001dcc l     F .text.code	00000044 cleardata(arm_fault_info_struct*) [clone .constprop.1]
60001e10 l     F .text.code	00000044 isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]
00000000 l    df *ABS*	00000000 analog.c
200224b6 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 c:/users/zimme/appdata/local/arduino15.0/packages/teensy/tools/teensy-compile/1.56.1/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/appdata/local/arduino15.0/packages/teensy/tools/teensy-compile/1.56.1/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20005848 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
2000584c l       .bss	00000000 object.8610
60002580 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mAcq.cpp
00000afc l     F .text.itcm	0000010c acq_isr()
00000e8c l     F .text.itcm	00000028 _GLOBAL__sub_I_procCount
20200000 l     O .bss.dma	00000800 i2s_buffer
20021278 l     O .bss	00000008 dma
00000000 l    df *ABS*	00000000 mFiling.cpp
000019e8 l     F .text.itcm	000000b0 _GLOBAL__sub_I_t_acq
20021bd8 l     O .bss	00000004 checkEndOfFile(short)::tx_
20021bec l     O .bss	00000004 saveData(short)::data1
20021740 l     O .bss	00000200 wav_hdr
20021940 l     O .bss	00000050 fileName
20001bd8 l     O .data	00000004 newFolder(int)::ho
20021bf0 l     O .bss	00000050 timeStamp()::date_time
20021be8 l     O .bss	00000004 saveData(short)::data0
2000586c l     O .bss	00001800 diskBuffer
200214f0 l     O .bss	00000050 dirName
2000706c l     O .bss	00000200 fileHeader
20007274 l     O .bss	00002000 tempBuffer
00000000 l    df *ABS*	00000000 usb_desc.c
60002688 l     O .text.progmem	0000000a qualifier_descriptor
200021a0 l     O .data	00000012 microsoft_os_string_desc
20002178 l     O .data	00000028 microsoft_os_compatible_id_desc
20002160 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 mQueue.cpp
20007270 l     O .bss	00000004 queue_busy
20009274 l     O .bss	00018000 data_buffer
00000000 l    df *ABS*	00000000 menu.cpp
0000019c l     F .text.itcm	00000054 menuGetInt16(short*)
000001f0 l     F .text.itcm	00000054 menuGetInt32(long*)
00000244 l     F .text.itcm	00000060 menuGet3Int(int*, int*, int*)
00000000 l    df *ABS*	00000000 mRTC.cpp
2000039c l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 mCompress.cpp
20021990 l     O .bss	00000200 tempData
20021540 l     O .bss	00000200 outData
20021280 l     O .bss	00000200 dout
20021be4 l     O .bss	00000004 compress(void*)::nout
00000000 l    df *ABS*	00000000 microPAM_V2.ino
2002249c l     O .bss	00000002 loop::mxb
20005868 l     O .bss	00000004 guard variable for loop::status
2002249e l     O .bss	00000002 loop::status
200224a0 l     O .bss	00000002 loop::monitor
20021be0 l     O .bss	00000004 loop::loopCount
20021bdc l     O .bss	00000004 loop::t0
00000000 l    df *ABS*	00000000 SPI.cpp
00001ea4 l     F .text.itcm	00000058 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]
00000000 l    df *ABS*	00000000 FsCache.cpp
00001f4c l     F .text.itcm	00000046 FsCache::sync() [clone .part.0]
00000000 l    df *ABS*	00000000 ExFatFormatter.cpp
00000000 l    df *ABS*	00000000 ExFatName.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
000029c4 l     F .text.itcm	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatName.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
000035c4 l     F .text.itcm	00000032 FatFile::openRoot(FatVolume*) [clone .part.38]
000036c8 l     F .text.itcm	0000009c FatFile::sync() [clone .part.42]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00004dcc l     F .text.itcm	00000024 SharedSpiCard::spiStart() [clone .part.11] [clone .constprop.35]
00004df0 l     F .text.itcm	00000022 SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]
00004e14 l     F .text.itcm	00000012 SharedSpiCard::readSector(unsigned long, unsigned char*) [clone .part.19] [clone .constprop.29]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
000055a0 l     F .text.itcm	00000030 sdIrs()
000055d0 l     F .text.itcm	00000018 isBusyCommandComplete()
000055e8 l     F .text.itcm	00000010 isBusyCommandInhibit()
000055f8 l     F .text.itcm	00000014 isBusyDat()
0000560c l     F .text.itcm	0000000c isBusyDMA()
00005618 l     F .text.itcm	00000014 isBusyFifoRead()
0000562c l     F .text.itcm	00000014 isBusyFifoWrite()
00005640 l     F .text.itcm	00000018 isBusyTransferComplete()
00005658 l     F .text.itcm	000000d0 setSdclk(unsigned long)
000057d0 l     F .text.itcm	00000028 waitTimeout(bool (*)())
000057f8 l     F .text.itcm	0000004c yieldTimeout(bool (*)())
00005854 l     F .text.itcm	00000044 enableGPIO(bool) [clone .part.0]
000058b8 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
00005920 l     F .text.itcm	0000002c isBusyCMD13()
0000596c l     F .text.itcm	0000005c readReg16(unsigned long, void*)
000059c8 l     F .text.itcm	00000024 cardAcmd(unsigned long, unsigned long, unsigned long)
000059ec l     F .text.itcm	00000030 waitDmaStatus()
00005a1c l     F .text.itcm	000000ac rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00005cf8 l     F .text.itcm	00000058 waitTransferComplete() [clone .part.13]
200224af l     O .bss	00000001 m_version2
20021480 l     O .bss	00000010 m_cid
20021b90 l     O .bss	00000004 m_busyFcn
200224b0 l     O .bss	00000001 m_highCapacity
200214a0 l     O .bss	00000004 m_ocr
200214a4 l     O .bss	00000004 m_rca
200224b1 l     O .bss	00000001 m_transferActive
20021b94 l     O .bss	00000004 m_irqstat
200214a8 l     O .bss	00000008 m_scr
200021d6 l     O .data	00000001 m_errorCode
200224ae l     O .bss	00000001 m_initDone
200214b0 l     O .bss	00000040 m_sds
20021490 l     O .bss	00000010 m_csd
200224b2 l     O .bss	00000001 m_dmaBusy
2000726c l     O .bss	00000004 m_sdClkKhz
20021274 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
00006adc l     F .text.itcm	0000006c rx_queue_transfer
00006b48 l     F .text.itcm	000000b4 rx_event
00006bfc l     F .text.itcm	00000098 usb_serial_flush_callback
00006c94 l     F .text.itcm	00000194 usb_serial_write.part.1
20021f94 l     O .bss	00000010 rx_index
200224ac l     O .bss	00000002 tx_packet_size
200224bd l     O .bss	00000001 tx_noautoflush
200224bc l     O .bss	00000001 tx_head
200026c0 l     O .bss	00001000 rx_buffer
20003840 l     O .bss	00002000 txbuffer
200224b9 l     O .bss	00000001 rx_tail
20021fa4 l     O .bss	00000009 rx_list
200224a6 l     O .bss	00000002 rx_packet_size
200036c0 l     O .bss	00000100 rx_transfer
20021f84 l     O .bss	00000010 rx_count
20021f80 l     O .bss	00000004 rx_available
200224b8 l     O .bss	00000001 rx_head
200224bb l     O .bss	00000001 transmit_previous_timeout
200224aa l     O .bss	00000002 tx_available
200037c0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
000082d0 l     F .text.itcm	0000004c digitalWrite.part.0
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 yield.cpp
200224b5 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
00009028 l     F .text.itcm	00000018 __get_current_locale
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtod.c
00009fbc l     F .text.itcm	00000034 sulp
20000ac8 l     O .data	00000014 fpi.6173
20000adc l     O .data	00000014 fpinan.6209
20000370 l     O .data	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
0000ae80 l     F .text.itcm	00000136 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
20001780 l     O .data	00000010 zeroes.7258
20000748 l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfscanf.c
20000724 l     O .data	00000022 basefix.7328
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
0000d51c l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000e538 l     F .text.itcm	000000a8 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mprec.c
20000af0 l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strtoll.c
0000f69c l     F .text.itcm	000001ac _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoul.c
0000f86c l     F .text.itcm	00000168 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
0000f9f8 l     F .text.itcm	000001ec _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vfscanf.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20001790 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
60015c00 l       .text.csf	00000000 __text_csf_end
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
0000ff88 l     F .text.itcm	00000008 ___ZN16CrashReportClasscvbEv_veneer
0000ff90 l     F .text.itcm	00000008 ___ZNK16CrashReportClass7printToER5Print_veneer
0000ff98 l     F .text.itcm	00000008 ___init_veneer
0000ffa0 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
60002508 l     F .text.code	00000008 ___ZN5Print7printlnEmi_veneer
60002510 l     F .text.code	00000008 ____libc_init_array_veneer
60002518 l     F .text.code	00000008 __main_veneer
60002520 l     F .text.code	00000008 __set_arm_clock_veneer
60002528 l     F .text.code	00000008 __sm_set_pool_veneer
60002530 l     F .text.code	00000008 ___ZN5Print5printEl_veneer
60002538 l     F .text.code	00000008 ___ZN5Print10printFloatEdh_veneer
60002540 l     F .text.code	00000008 ___ZN5Print7printlnEPKc_veneer
60002548 l     F .text.code	00000008 __delay_veneer
60002550 l     F .text.code	00000008 ___ZN5Print7printlnEv_veneer
60002558 l     F .text.code	00000008 ___ZN5Print11printNumberEmhh_veneer
60002560 l     F .text.code	00000008 ___ZN5Print5writeEPKc_veneer
60002568 l     F .text.code	00000008 __memset_veneer
60002570 l     F .text.code	00000008 __pwm_init_veneer
60002578 l     F .text.code	00000008 __usb_init_serialnumber_veneer
00000c14 g     F .text.itcm	00000054 set_audioClock(int, long, unsigned long)
000000a8 g     F .text.itcm	00000084 pushData(unsigned long*)
00007064 g     F .text.itcm	00000014 usb_serial_available
0000f5bc g     F .text.itcm	0000005e __any_on
00009d5c g     F .text.itcm	000000ba strcpy
600017a4 g     F .text.code	00000002 startup_default_late_hook
00005ec4 g     F .text.itcm	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
000086b8  w    F .text.itcm	000000f0 yield
00005b80 g     F .text.itcm	0000008c SdioCard::cardCMD6(unsigned long, unsigned char*)
00004d34  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
20021f14 g     O .bss	00000060 proc_stat
20022498 g     O .bss	00000004 usb_timer1_callback
00003e3c g     F .text.itcm	000001f8 FatFile::write(void const*, unsigned int)
600025a4 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
200224a4 g     O .bss	00000002 proc
60001890 g     F .text.code	000003bc configure_external_ram
00004d08  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
00004524 g     F .text.itcm	0000015c FatFile::makeSFN(FatLfn_t*)
20021f0c g     O .bss	00000004 procCount
60002692  w    O .text.progmem	00000001 _serialEventUSB2_default
20021b98 g     O .bss	00000004 FsDateTime::callback
00004680 g     F .text.itcm	000000b0 FatFile::makeUniqueSfn(FatLfn_t*)
00004fc4 g     F .text.itcm	00000054 SharedSpiCard::writeStart(unsigned long)
000089e4 g     F .text.itcm	00000020 Print::println()
200003d8 g     O .data	00000074 vtable for DedicatedSpiCard
20021f10 g     O .bss	00000004 procMiss
000023dc g     F .text.itcm	00000108 ExFatFile::seekSet(unsigned long long)
000098ac g     F .text.itcm	00000002 __malloc_unlock
20021bd0 g     O .bss	00000004 FsVolume::m_cwv
000039b4 g     F .text.itcm	000000c8 FatFile::open(FatFile*, char const*, int)
20005864 g     O .bss	00000004 SerNum
00004cfc  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
600024a0 g     F .text.code	00000058 analog_init
0000ae60 g     F .text.itcm	00000020 _strtod_r
0000d3cc g     F .text.itcm	0000004a _vdprintf_r
00004f78 g     F .text.itcm	0000004c SharedSpiCard::readOCR(unsigned long*)
00001860 g     F .text.itcm	00000188 saveData(short)
200224a8 g     O .bss	00000002 shift
20001bc4 g     O .data	00000004 F_CPU_ACTUAL
0000fdc8 g     F .text.itcm	00000082 _sfread_r
00009744 g     F .text.itcm	000000c6 memmove
20021f04 g     O .bss	00000004 max_stat
00009064 g     F .text.itcm	00000014 __locale_ctype_ptr
00006710 g     F .text.itcm	00000068 SdioCard::stopTransmission(bool)
0000ed38 g     F .text.itcm	0000004c _Balloc
0000ffbc g       .ARM.exidx	00000000 __exidx_end
00004194 g     F .text.itcm	0000003a FatPartition::freeChain(unsigned long)
200224b3 g     O .bss	00000001 EventResponder::runningFromYield
00006908 g     F .text.itcm	00000016 SdSpiArduinoDriver::receive()
00008270 g     F .text.itcm	00000060 tempmonGetTemp
00008fcc g     F .text.itcm	0000000c __errno
60001000 g     O .text.headers	00000020 ImageVectorTable
20021ba8 g     O .bss	00000004 EventResponder::firstInterrupt
00007e18 g     F .text.itcm	00000004 usb_transfer_status
0000ecbc g     F .text.itcm	00000004 __localeconv_l
000081dc g     F .text.itcm	00000090 sm_set_pool
20021e74 g     O .bss	00000004 bias
00002d98 g     F .text.itcm	0000003a ExFatPartition::rootLength()
0000893c  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000758 g     O .data	00000370 digital_pin_to_info_PGM
20022540 g     O .bss	00000004 errno
00006920 g     F .text.itcm	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00002b88 g     F .text.itcm	00000040 ExFatPartition::fatGet(unsigned long, unsigned long*)
00009d58 g     F .text.itcm	00000004 __seofread
0000ffb8 g       .text.itcm	00000000 _etext
000049e0 g     F .text.itcm	000000ac FatFile::parsePathName(char const*, FatLfn_t*, char const**)
200026c0 g       .bss	00000000 _sbss
00005734 g     F .text.itcm	0000000c SdioCard::errorData() const
2002248c g     O .bss	00000004 tempData0
00005fd4 g     F .text.itcm	000000c0 SdioCard::writeSector(unsigned long, unsigned char const*)
60002698 g       *ABS*	00000000 _stextload
00001a98 g     F .text.itcm	00000278 loop
600017a8 g     F .text.code	00000004 startup_debug_reset
00007cd0 g     F .text.itcm	00000064 usb_config_rx
00002160 g     F .text.itcm	0000009c ExFatFile::parsePathName(char const*, ExName_t*, char const**)
0000651c g     F .text.itcm	000000bc SdioCard::readData(unsigned char*)
20021ba4 g     O .bss	00000004 EventResponder::lastInterrupt
00004a8c g     F .text.itcm	00000028 FsBaseFile::close()
00001f04 g     F .text.itcm	00000048 SPIClass::end()
000069a8 g     F .text.itcm	00000134 memcpy
0000eb20 g     F .text.itcm	00000180 __hexnan
00004e28 g     F .text.itcm	00000060 SharedSpiCard::writeStop()
00002c34 g     F .text.itcm	0000007a ExFatPartition::freeChain(unsigned long)
00003c34 g     F .text.itcm	00000028 FatFile::peek()
20021f08 g     O .bss	00000004 nbuf
0000afe0 g     F .text.itcm	00001570 _svfprintf_r
20022480 g     O .bss	00000004 systick_millis_count
00001d10 g     F .text.itcm	0000003c setup1()
00008ca8 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
200224bf g     O .bss	00000001 usb_configuration
00000ec4  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000818c g     F .text.itcm	00000050 sm_align_pool
00006778 g     F .text.itcm	0000002c SdioCard::syncDevice()
00005dc8 g     F .text.itcm	00000090 SdioCard::writeData(unsigned char const*)
00000f90  w    F .text.itcm	0000005a StreamFile<FsBaseFile, unsigned long long>::available()
00003c5c g     F .text.itcm	00000042 FatFile::readDirCache(bool)
0000f518 g     F .text.itcm	0000005c __ratio
000051a4 g     F .text.itcm	00000094 SharedSpiCard::sectorCount()
600025a4  w    O .text.progmem	00000018 usb_string_manufacturer_name
00009078 g     F .text.itcm	00000010 malloc
20000474  w    O .data	00000024 vtable for FsFile
0000eca0 g     F .text.itcm	0000001c iswspace
20021c74 g     O .bss	00000200 acqBuffer
200002a8 g     O .data	000000c8 __mprec_tens
6000165c g     F .text.code	000000ec usb_init
00004ab4 g     F .text.itcm	00000088 FsBaseFile::operator=(FsBaseFile const&)
00004cf8  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
20021c70 g     O .bss	00000004 __malloc_top_pad
0000813c g     F .text.itcm	00000050 rtc_set
0000fd8c g     F .text.itcm	0000003a __ssrefill_r
2002252c g     O .bss	00000004 systick_safe_read
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
0000324c g     F .text.itcm	000000e2 ExFatFile::truncate()
20001bb8 g     O .data	00000000 .hidden __dso_handle
0000ecc0 g     F .text.itcm	0000001c _localeconv_r
0000fbe4 g     F .text.itcm	00000024 _strtoull_r
000068a8 g     F .text.itcm	00000058 SdSpiArduinoDriver::deactivate()
0000ef4c g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
200021b8 g     O .data	00000004 t_on
60002624 g     O .text.progmem	00000062 usb_config_descriptor_480
00008cd8 g     F .text.itcm	000002e2 .hidden __udivmoddi4
00006900 g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
000035f8 g     F .text.itcm	00000034 FatFile::addCluster()
00009c90 g     F .text.itcm	00000024 _sbrk_r
00005898 g     F .text.itcm	00000020 SdioCard::type() const
6000179c g     F .text.code	00000002 startup_default_early_hook
6000162c g     F .text.code	00000030 ResetHandler
000070ec g     F .text.itcm	00000020 usb_serial_getchar
20022520 g     O .bss	00000008 usb_cdc_line_coding
0000831c g     F .text.itcm	0000000a digitalWrite
20021bac g     O .bss	00000004 EventResponder::lastYield
00002138 g     F .text.itcm	00000028 ExFatFile::openRoot(ExFatVolume*)
00002004  w    F .text.itcm	00000022 Print::write(char const*)
20022490 g     O .bss	00000004 termon
00000f58  w    F .text.itcm	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
00004d30  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00005740 g     F .text.itcm	0000001c SdioCard::readCID(cid_t*)
20022530 g     O .bss	00000010 extmem_smalloc_pool
20021c68 g     O .bss	00000004 __malloc_max_sbrked_mem
000053c0 g     F .text.itcm	0000005c DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
00008328 g     F .text.itcm	00000080 pinMode
00008ad0 g     F .text.itcm	00000174 Print::printFloat(double, unsigned char)
0000c550 g     F .text.itcm	00000e7a __ssvfscanf_r
60002693  w    O .text.progmem	00000001 _serialEventUSB1_default
60015000 g     O .text.csf	00000c00 hab_csf
20280000 g       .text.csf	00000000 _heap_end
0000f38c g     F .text.itcm	000000d0 __b2d
0000ffb4 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
00000c08  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
20021ba0 g     O .bss	00000004 EventResponder::firstYield
20000720 g     O .data	00000004 _global_impure_ptr
0000102c  w    F .text.itcm	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
000098b0 g     F .text.itcm	000003de _realloc_r
00008fd8 g     F .text.itcm	00000050 __libc_init_array
000029b4 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
2000051c g     O .data	00000100 __hexdig
00003078 g     F .text.itcm	000000b4 ExFatFile::addDirCluster()
20000280 g     O .data	00000028 __mprec_bigtens
0000ee18 g     F .text.itcm	00000098 __s2b
00008924  w    F .text.itcm	00000004 usb_serial_class::clear()
000080dc  w    F .text.itcm	00000030 _sbrk
60012654 g       *ABS*	00000000 _sdataload
0000f1e0 g     F .text.itcm	00000042 __mcmp
20001bdc g     O .data	00000004 __brkval
200224be g     O .bss	00000001 usb_cdc_line_rtsdtr
600024f8 g     F .text.code	00000000 _init
00006e28 g     F .text.itcm	00000002 usb_serial_reset
000036a8 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
600025c0 g     O .text.progmem	00000062 usb_config_descriptor_12
00009ff0 g     F .text.itcm	00000e70 _strtod_l
0000eaf0 g     F .text.itcm	00000030 __match
20022580 g       .bss	00000000 _ebss
00005f4c g     F .text.itcm	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00001004  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
000007ac g     F .text.itcm	00000004 rtc_setup(unsigned char, unsigned char)
0000eeb0 g     F .text.itcm	00000040 __hi0bits
000020e8 g     F .text.itcm	0000003a ExFatFile::dirCache(unsigned char, unsigned char)
6000247c g     F .text.code	00000002 CrashReportClass::clear()
0000312c g     F .text.itcm	0000004c ExFatFile::mkdir(ExFatFile*, ExName_t*)
20200880 g       .bss.dma	00000000 _heap_start
00002dd4 g     F .text.itcm	00000064 ExFatVolume::chdir(char const*)
00000c08  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
20001bbc g     O .data	00000004 CrashReport
0000519c  w    F .text.itcm	00000008 SharedSpiCard::readCID(cid_t*)
00004ecc g     F .text.itcm	000000ac SharedSpiCard::cardCommand(unsigned char, unsigned long)
00000002 g       *ABS*	00000000 _itcm_block_count
20022488 g     O .bss	00000004 tail
200224e0 g     O .bss	00000020 endpoint0_transfer_data
00003598 g     F .text.itcm	0000002a FatFile::getLfnChar(DirLfn_t*, unsigned char)
00001f94 g     F .text.itcm	00000060 FsCache::prepare(unsigned long, unsigned char)
00008c48 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
000083a8 g     F .text.itcm	000002b8 pwm_init
20021e8c g     O .bss	00000050 file
60001c4c g     F .text.code	00000064 usb_pll_start
0000f090 g     F .text.itcm	000000a0 __pow5mult
200003cc g     O .data	0000000c vtable for CrashReportClass
00004110 g     F .text.itcm	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
20021edc g     O .bss	00000004 haveStore
0000559c  w    F .text.itcm	00000002 SdioCard::end()
00000000  w      *UND*	00000000 __deregister_frame_info
20022500 g     O .bss	00000020 endpoint0_transfer_ack
20022528 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00007dcc g     F .text.itcm	00000028 usb_transmit
000088e4  w    F .text.itcm	00000026 Print::println(char const*)
000087f0 g     F .text.itcm	00000020 systick_isr
000007b0 g     F .text.itcm	00000012 rtc_get_datetime(datetime_t*)
20001bc8 g     O .data	00000010 Serial
20021ee4 g     O .bss	00000020 logBuffer
20021ee0 g     O .bss	00000004 head
00008944  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
6000179c  w    F .text.code	00000002 startup_early_hook
00002e38 g     F .text.itcm	0000008e ExFatFile::addCluster()
00005018 g     F .text.itcm	00000074 SharedSpiCard::readData(unsigned char*, unsigned int)
00007020 g     F .text.itcm	00000044 usb_serial_peekchar
00009640 g     F .text.itcm	00000000 memchr
000040a8 g     F .text.itcm	00000068 FatPartition::fatPut(unsigned long, unsigned long)
00007244 g     F .text.itcm	000002c4 set_arm_clock
2002247c g     O .bss	00000004 systick_cycle_count
200021c0 g     O .data	00000016 usb_string_serial_number_default
0000e368 g     F .text.itcm	000001d0 _free_r
00005238 g     F .text.itcm	000000dc SharedSpiCard::erase(unsigned long, unsigned long)
0000541c g     F .text.itcm	00000052 SharedSpiCard::writeData(unsigned char, unsigned char const*)
00005d50 g     F .text.itcm	00000078 SdioCard::readStop()
00004d00  w    F .text.itcm	00000004 SharedSpiCard::type() const
00009040 g     F .text.itcm	0000001c __locale_mb_cur_max
00008934  w    F .text.itcm	00000004 usb_serial_class::flush()
0000508c g     F .text.itcm	00000044 SharedSpiCard::readSCR(scr_t*)
0000fd08 g     F .text.itcm	00000082 _sungetc_r
20002154 g     O .data	00000004 __malloc_sbrk_base
0000892c  w    F .text.itcm	00000004 usb_serial_class::read()
0000f848 g     F .text.itcm	00000024 _strtoll_r
0000f130 g     F .text.itcm	000000ae __lshift
000038e8 g     F .text.itcm	000000ca FatFile::mkdir(FatFile*, char const*, bool)
000014f0 g     F .text.itcm	00000370 storeData(short)
00007d9c g     F .text.itcm	0000002e usb_prepare_transfer
00004d04  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
00007f4c g     F .text.itcm	00000190 unused_interrupt_vector
0000fc08 g     F .text.itcm	00000100 __ssprint_r
60001cb0 g     F .text.code	0000011c tempmon_init
20022494 g     O .bss	00000004 usb_timer0_callback
00004408 g     F .text.itcm	0000011c FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
00000ecc  w    F .text.itcm	00000002 SdFs::~SdFs()
0000fec4 g     F .text.itcm	0000005e _vasnprintf_r
00008c44  w    F .text.itcm	00000002 serialEvent()
0000d478 g     F .text.itcm	000000a4 __register_exitproc
000028bc g     F .text.itcm	000000f8 ExFatFile::open(ExFatFile*, char const*, int)
00009f1c g     F .text.itcm	000000a0 strncmp
00004344 g     F .text.itcm	000000c2 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
00003178 g     F .text.itcm	000000d2 ExFatFile::mkdir(ExFatFile*, char const*, bool)
00004bbc g     F .text.itcm	00000110 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)
00007078 g     F .text.itcm	00000074 usb_serial_flush_input
20002174 g     O .data	00000004 fsamp
0000ef60 g     F .text.itcm	00000130 __multiply
0000007c g     F .text.itcm	00000020 getDataCount()
0000710c g     F .text.itcm	0000002c usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
20021c40 g     O .bss	00000028 __malloc_current_mallinfo
00000d2c g     F .text.itcm	00000090 i2s_setup()
0000f45c g     F .text.itcm	000000ba __d2b
00005470 g     F .text.itcm	0000005c SharedSpiCard::writeData(unsigned char const*)
20021bb0 g     O .bss	00000020 HardwareSerial::s_serials_with_serial_events
00000ebc  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001748 g     F .text.code	00000054 _reboot_Teensyduino_
00005844  w    F .text.itcm	0000000e SdioCard::~SdioCard()
600017a0 g     F .text.code	00000002 startup_default_middle_hook
00000dbc g     F .text.itcm	000000a8 dma_setup()
00004d64 g     F .text.itcm	00000066 DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
0000515c g     F .text.itcm	00000038 SharedSpiCard::readRegister(unsigned char, void*)
00005e58 g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
0000f9d4 g     F .text.itcm	00000024 _strtoul_r
00007670 g     F .text.itcm	00000660 usb_isr
00008fc0 g     F .text.itcm	0000000c __cxa_atexit
000021fc g     F .text.itcm	000001b2 ExFatFile::read(void*, unsigned int)
00005368 g     F .text.itcm	0000003e SharedSpiCard::readStop()
00001ff4 g     F .text.itcm	0000000e FsCache::sync()
000096e0 g     F .text.itcm	00000062 memcmp
2000044c  w    O .data	00000028 vtable for usb_serial_class
00006940 g     F .text.itcm	00000012 SdSpiArduinoDriver::send(unsigned char)
000069a4 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
20021fc0 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
00009d00 g     F .text.itcm	00000058 sscanf
00008fbc  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00001160 g     F .text.itcm	000000cc headerInit(long, long, long, int)
00005314 g     F .text.itcm	00000054 SharedSpiCard::readStart(unsigned long)
0000f574 g     F .text.itcm	00000046 __copybits
20001d4c g     O .data	00000408 __malloc_av_
000071a0 g     F .text.itcm	000000a4 usb_serial_flush_output
000098a8 g     F .text.itcm	00000002 __malloc_lock
20002400 g     O .data	000002c0 _VectorsRam
00006954 g     F .text.itcm	0000004e SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
0000ff24 g     F .text.itcm	0000005e _calloc_r
000012d4 g     F .text.itcm	000000a4 makeHeader(long*)
00004730 g     F .text.itcm	000002b0 FatFile::open(FatFile*, FatLfn_t*, int)
200021b4 g     O .data	00000004 t_acq
200021d7 g     O .data	00000001 yield_active_check_flags
00003018 g     F .text.itcm	0000005e ExFatFile::sync()
200224c0 g     O .bss	00000001 usb_high_speed
00005b2c g     F .text.itcm	00000054 SdioCard::isBusy()
0000980c g     F .text.itcm	0000009a memset
0000894c g     F .text.itcm	00000010 main
00000ecc  w    F .text.itcm	00000002 SdFs::~SdFs()
20021c6c g     O .bss	00000004 __malloc_max_total_mem
000029f0 g     F .text.itcm	000000b2 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20200800 g     O .bss.dma	00000062 usb_descriptor_buffer
000054cc g     F .text.itcm	000000b4 SharedSpiCard::writeSector(unsigned long, unsigned char const*)
00003330 g     F .text.itcm	00000268 ExFatFile::write(void const*, unsigned int)
00008660 g     F .text.itcm	00000058 usb_init_serialnumber
0000afb8 g     F .text.itcm	00000024 _strtol_r
6000258c g       .text.code	00000000 __init_array_end
0000d648 g     F .text.itcm	00000c84 _dtoa_r
00009098 g     F .text.itcm	00000570 _malloc_r
00004d0c g     F .text.itcm	00000010 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
200224b4 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000d430 g     F .text.itcm	0000001a __ascii_wctomb
20021bd4 g     O .bss	00000004 FatVolume::m_cwv
000002a4 g     F .text.itcm	00000012 menu1()
0000fe4c g     F .text.itcm	00000078 __submore
2000050c  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000898c g     F .text.itcm	00000058 Stream::readBytesUntil(char, char*, unsigned int)
00001efc g     F .text.itcm	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00007ee8 g     F .text.itcm	00000064 micros
00002ec8 g     F .text.itcm	00000150 ExFatFile::syncDir()
000050d0 g     F .text.itcm	0000004e SharedSpiCard::readSDS(sds_t*)
0000e2cc g     F .text.itcm	0000009c _malloc_trim_r
600025bc g     O .text.progmem	00000004 string0
00007138 g     F .text.itcm	00000018 usb_serial_write
600017a4  w    F .text.code	00000002 startup_late_hook
00005580 g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
00008930  w    F .text.itcm	00000004 usb_serial_class::available()
60002694  w    O .text.progmem	00000001 _serialEvent_default
00003e30 g     F .text.itcm	0000000c FatFile::sync()
20000000 g     O .data	00000280 endpoint_queue_head
6000258c  w    O .text.progmem	00000016 usb_string_product_name
00007e1c g     F .text.itcm	000000cc delay
200224a2 g     O .bss	00000002 dma_channel_allocated_mask
0000ffb0 g     F .fini	00000000 _fini
00004e88 g     F .text.itcm	00000044 SharedSpiCard::isBusy()
60001020 g     O .text.headers	0000000c BootData
20022484 g     O .bss	00000004 t_off
00009cb4 g     F .text.itcm	0000004c sprintf
00008a18 g     F .text.itcm	0000001e Print::printf(char const*, ...)
00008ab8 g     F .text.itcm	00000016 Print::print(long)
00003764 g     F .text.itcm	0000001e FatFile::close()
0000826c g     F .text.itcm	00000004 Panic_Temp_isr
00000c68 g     F .text.itcm	000000c4 setAudioFrequency(int)
0000009c g     F .text.itcm	0000000c queue_isBusy()
20021fc4 g     O .bss	000004b8 sd
00003784 g     F .text.itcm	00000162 FatFile::mkdir(FatFile*, FatLfn_t*)
000057cc  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00000fec  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000d44c g     F .text.itcm	0000002c _write_r
00005c0c g     F .text.itcm	000000ec SdioCard::erase(unsigned long, unsigned long)
00001060 g     F .text.itcm	000000c0 filing_init()
0000f690 g     F .text.itcm	0000000c nanf
2000215c g     O .data	00000004 _impure_ptr
000023b0 g     F .text.itcm	0000002c ExFatFile::peek()
200003a8  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
0000ecdc g     F .text.itcm	0000005c _mbrtowc_r
00004ccc g     F .text.itcm	00000028 FsVolume::open(char const*, int)
00005728 g     F .text.itcm	0000000c SdioCard::errorCode() const
00003a7c g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
00001018  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
60002580 g       .text.code	00000000 __preinit_array_end
60001e54 g     F .text.code	00000628 CrashReportClass::printTo(Print&) const
00000ed0 g     F .text.itcm	00000070 dateTime(unsigned short*, unsigned short*, unsigned char*)
00001468 g     F .text.itcm	00000088 newFileName(char*)
00000f40  w    F .text.itcm	00000018 FsFile::~FsFile()
00002b50 g     F .text.itcm	00000036 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00009608 g     F .text.itcm	0000002a __ascii_mbtowc
0000f338 g     F .text.itcm	00000054 __ulp
000041d0 g     F .text.itcm	00000126 FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
00001d4c g     F .text.itcm	00000158 setup
200016fc g     O .data	00000084 usb_descriptor_list
0000594c g     F .text.itcm	00000020 SdioCard::status()
00003a98 g     F .text.itcm	0000019a FatFile::read(void*, unsigned int)
00003a8c g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
20021b9c g     O .bss	00000004 ExFatVolume::m_cwv
20070000 g       .text.csf	00000000 _estack
00004cf4 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
000088b0 g     F .text.itcm	00000034 DMAChannel::release()
00007150 g     F .text.itcm	00000050 usb_serial_write_buffer_free
00006e2c g     F .text.itcm	00000108 usb_serial_configure
00008a04  w    F .text.itcm	00000014 _write
200026c0 g       .data	00000000 _edata
00002c10 g     F .text.itcm	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
200224b7 g     O .bss	00000001 external_psram_size
000057cc  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00002cb0 g     F .text.itcm	000000e8 ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
00004d30  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00004d1c g     F .text.itcm	00000012 DedicatedSpiCard::setDedicatedSpi(bool)
0000208c g     F .text.itcm	0000005a ExFatFile::hashName(ExName_t*)
0000362c g     F .text.itcm	0000007c FatFile::addDirCluster()
00008938  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00000e64 g     F .text.itcm	00000028 acqModifyFrequency(unsigned long)
00008c4c g     F .text.itcm	0000004e ultoa
00004b3c g     F .text.itcm	00000080 FsBaseFile::open(FsVolume*, char const*, int)
000087a8 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20002158 g     O .data	00000004 __malloc_trim_threshold
00008928  w    F .text.itcm	00000004 usb_serial_class::peek()
00000ec0  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
000007c4 g     F .text.itcm	0000002e rtcSetDate(int, int, int)
00005120 g     F .text.itcm	0000003a SharedSpiCard::cardCMD6(unsigned long, unsigned char*)
000007f4 g     F .text.itcm	0000002e rtcSetTime(int, int, int)
0000f224 g     F .text.itcm	00000114 __mdiff
0000012c g     F .text.itcm	00000070 pullData(unsigned long*)
00005778 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
00002bc8 g     F .text.itcm	00000046 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00001378 g     F .text.itcm	00000034 checkEndOfFile(short)
000024e4 g     F .text.itcm	000003d8 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
0000122c g     F .text.itcm	000000a8 writeHeader(char*)
0000044c g     F .text.itcm	000000a0 menu3()
0000890c  w    F .text.itcm	00000018 Print::println(unsigned long, int)
00001120 g     F .text.itcm	00000040 timeStamp()
00005d50 g     F .text.itcm	00000078 SdioCard::writeStop()
0000f61c g     F .text.itcm	00000072 __sccl
00002124 g     F .text.itcm	00000014 ExFatFile::close()
2000061c g     O .data	00000101 _ctype_
60002580 g       .text.code	00000000 __init_array_start
00008fbc  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
60002480 g     F .text.code	00000020 CrashReportClass::operator bool()
20001bc0 g     O .data	00000004 F_BUS_ACTUAL
20021e78 g     O .bss	00000004 disk_count
000042f8 g     F .text.itcm	0000004c FatVolume::chdir(char const*)
000004ec g     F .text.itcm	000001a4 time2date(unsigned long, datetime_t*)
00000690 g     F .text.itcm	0000011c date2time(datetime_t*)
00005788 g     F .text.itcm	00000014 SdioCard::readSCR(scr_t*)
0000895c g     F .text.itcm	00000030 Stream::timedRead()
00000000 g       .text.itcm	00000000 _stext
00008810 g     F .text.itcm	000000a0 DMAChannel::begin(bool)
00004d44 g     F .text.itcm	00000020 SharedSpiCard::end()
00009e40 g     F .text.itcm	000000dc strlen
20021f74 g     O .bss	00000004 ready
0000905c g     F .text.itcm	00000006 __locale_ctype_ptr_l
00003ca0 g     F .text.itcm	000000ae FatFile::seekSet(unsigned long)
0000e5e0 g     F .text.itcm	00000510 __gethex
6000258c g     O .text.progmem	00000016 usb_string_product_name_default
0000d418 g     F .text.itcm	00000018 vdprintf
00005ac8 g     F .text.itcm	00000064 SdioCard::sectorCount()
0000579c g     F .text.itcm	00000030 SdioCard::readSDS(sds_t*)
600017a0  w    F .text.code	00000002 startup_middle_hook
20000498 g     O .data	00000074 vtable for SdioCard
600017ac g     F .text.code	000000e4 configure_cache
00000eb8  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
00005194  w    F .text.itcm	00000008 SharedSpiCard::readCSD(csd_t*)
000013ac g     F .text.itcm	000000bc newDirectory(char*)
000065d8 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
000002b8 g     F .text.itcm	00000194 menu2()
000067a4 g     F .text.itcm	00000104 SdSpiArduinoDriver::activate()
00000824 g     F .text.itcm	000002d8 compress(void*)
60002580 g       .text.code	00000000 __preinit_array_start
00007df4 g     F .text.itcm	00000024 usb_receive
00002aa4 g     F .text.itcm	000000aa ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
0000eef0 g     F .text.itcm	0000005a __lo0bits
200021bc g     O .data	00000004 tempDatai
00003d50 g     F .text.itcm	000000de FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00015c00 g       *ABS*	00000000 _flashimagelen
000053a8 g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
00008c9c g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
00000f40  w    F .text.itcm	00000018 FsFile::~FsFile()
0000810c g     F .text.itcm	00000030 rtc_get
70000000 g       .bss.extram	00000000 _extram_start
000087ec g     F .text.itcm	00000004 pendablesrvreq_isr
00000eb4  w    F .text.itcm	00000004 Print::availableForWrite()
20001be0 g     O .data	0000016c __global_locale
00006094 g     F .text.itcm	00000488 SdioCard::begin(SdioConfig)
00006f34 g     F .text.itcm	000000ec usb_serial_read
00008a38 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00007d34 g     F .text.itcm	00000068 usb_config_tx
00004034 g     F .text.itcm	00000072 FatPartition::fatGet(unsigned long, unsigned long*)
00009088 g     F .text.itcm	00000010 free
00002028 g     F .text.itcm	00000064 ExFatFile::cmpName(DirName_t const*, ExName_t*)
0000ed98 g     F .text.itcm	00000080 __multadd
0000ed84 g     F .text.itcm	00000012 _Bfree
200021c0  w    O .data	00000016 usb_string_serial_number
00006644 g     F .text.itcm	000000cc SdioCard::readSector(unsigned long, unsigned char*)
0000575c g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	cmp	r0, r1
60001402:	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	cmp	r0, r2
60001406:	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	ldr.w	r3, [r1], #4
6000140c:	str.w	r3, [r0], #4

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001410:	cmp	r2, r0
60001412:	bhi.n	60001408 <memory_copy+0x8>
60001414:	bx	lr
60001416:	nop

60001418 <memory_clear>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	cmp	r0, r1
6000141a:	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	movs	r3, #0
6000141e:	str.w	r3, [r0], #4
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001422:	cmp	r1, r0
60001424:	bhi.n	6000141e <memory_clear+0x6>
60001426:	bx	lr

60001428 <ResetHandler2>:
	__builtin_unreachable();
}

__attribute__((section(".startup"), noinline, noreturn))
static void ResetHandler2(void)
{
60001428:	push	{r7, lr}
	unsigned int i;
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142a:	bl	6000179c <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000142e:	ldr	r3, [pc, #376]	; (600015a8 <ResetHandler2+0x180>)
60001430:	movs	r0, #8
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
60001432:	ldr	r2, [pc, #376]	; (600015ac <ResetHandler2+0x184>)
60001434:	ldr	r1, [pc, #376]	; (600015b0 <ResetHandler2+0x188>)
__attribute__((section(".startup"), noinline, noreturn))
static void ResetHandler2(void)
{
	unsigned int i;
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	str.w	r0, [r3, #340]	; 0x154
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	ldr	r0, [pc, #376]	; (600015b4 <ResetHandler2+0x18c>)
6000143c:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001440:	ldr	r2, [pc, #372]	; (600015b8 <ResetHandler2+0x190>)
60001442:	ldr	r1, [pc, #376]	; (600015bc <ResetHandler2+0x194>)
60001444:	ldr	r0, [pc, #376]	; (600015c0 <ResetHandler2+0x198>)
60001446:	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144a:	ldr	r1, [pc, #376]	; (600015c4 <ResetHandler2+0x19c>)
6000144c:	ldr	r0, [pc, #376]	; (600015c8 <ResetHandler2+0x1a0>)
6000144e:	bl	60001418 <memory_clear>
60001452:	ldr	r4, [pc, #376]	; (600015cc <ResetHandler2+0x1a4>)

	// enable FPU
	SCB_CPACR = 0x00F00000;
60001454:	ldr	r1, [pc, #376]	; (600015d0 <ResetHandler2+0x1a8>)
60001456:	mov.w	r0, #15728640	; 0xf00000

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145a:	movs	r3, #0
6000145c:	ldr	r2, [pc, #372]	; (600015d4 <ResetHandler2+0x1ac>)
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
6000145e:	str	r0, [r1, #0]

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001460:	str.w	r2, [r4, r3, lsl #2]
60001464:	adds	r3, #1
60001466:	cmp	r3, #176	; 0xb0
60001468:	bne.n	60001460 <ResetHandler2+0x38>
6000146a:	ldr	r3, [pc, #364]	; (600015d8 <ResetHandler2+0x1b0>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000146c:	movs	r1, #128	; 0x80
6000146e:	ldr	r2, [pc, #364]	; (600015dc <ResetHandler2+0x1b4>)
60001470:	strb.w	r1, [r3], #1
60001474:	cmp	r3, r2
60001476:	bne.n	60001470 <ResetHandler2+0x48>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001478:	ldr	r5, [pc, #300]	; (600015a8 <ResetHandler2+0x180>)
6000147a:	mov.w	r8, #2155905152	; 0x80808080
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
6000147e:	ldr	r1, [pc, #352]	; (600015e0 <ResetHandler2+0x1b8>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001480:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001484:	ldr	r3, [pc, #348]	; (600015e4 <ResetHandler2+0x1bc>)
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001486:	movs	r6, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	ldr.w	sl, [pc, #408]	; 60001624 <ResetHandler2+0x1fc>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	ldr.w	r9, [pc, #408]	; 60001628 <ResetHandler2+0x200>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001490:	str	r4, [r3, #0]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001492:	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001496:	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000149a:	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000149e:	str.w	r9, [r5, #240]	; 0xf0
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014a2:	ldr	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014a4:	ldr	r7, [pc, #320]	; (600015e8 <ResetHandler2+0x1c0>)
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014a6:	orr.w	r3, r3, #458752	; 0x70000
600014aa:	str	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ac:	ldr	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ae:	ldr	r1, [pc, #316]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014b0:	bic.w	r3, r3, #127	; 0x7f
600014b4:	orr.w	r3, r3, #64	; 0x40
600014b8:	str	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ba:	ldr	r3, [r7, #36]	; 0x24
600014bc:	bic.w	r3, r3, #127	; 0x7f
600014c0:	orr.w	r3, r3, #64	; 0x40
600014c4:	str	r3, [r7, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c6:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014c8:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014ca:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014cc:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
600014ce:	bl	600017ac <configure_cache>
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014d2:	ldr	r2, [pc, #284]	; (600015f0 <ResetHandler2+0x1c8>)
	_VectorsRam[15] = systick_isr;
600014d4:	ldr	r3, [pc, #284]	; (600015f4 <ResetHandler2+0x1cc>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014d6:	movs	r0, #99	; 0x63
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014d8:	str	r2, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014da:	movs	r1, #3

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
600014dc:	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014de:	ldr	r2, [pc, #280]	; (600015f8 <ResetHandler2+0x1d0>)
	SYST_CVR = 0;
600014e0:	ldr	r3, [pc, #280]	; (600015fc <ResetHandler2+0x1d4>)
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014e2:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014e4:	add.w	r0, r0, #3758096384	; 0xe0000000
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600014e8:	str	r6, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014ea:	str.w	r1, [r2, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ee:	addw	r0, r0, #4001	; 0xfa1
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
600014f2:	ldr	r1, [pc, #268]	; (60001600 <ResetHandler2+0x1d8>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014f4:	ldr	r2, [pc, #268]	; (60001604 <ResetHandler2+0x1dc>)
600014f6:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
600014fa:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
600014fc:	ldr	r2, [pc, #264]	; (60001608 <ResetHandler2+0x1e0>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
600014fe:	orr.w	r3, r3, #16777216	; 0x1000000
60001502:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001504:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001506:	ldr	r1, [pc, #260]	; (6000160c <ResetHandler2+0x1e4>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001508:	orr.w	r3, r3, #1
6000150c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000150e:	ldr	r3, [r0, #0]
60001510:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001512:	bl	60001c4c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001516:	str.w	r8, [r5, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000151a:	ldr	r0, [pc, #244]	; (60001610 <ResetHandler2+0x1e8>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000151c:	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001520:	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001524:	str.w	r9, [r5, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001528:	bl	60002520 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000152c:	ldr	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
6000152e:	ldr	r2, [pc, #228]	; (60001614 <ResetHandler2+0x1ec>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001530:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001534:	ldr	r3, [pc, #224]	; (60001618 <ResetHandler2+0x1f0>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	str	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
60001538:	str	r6, [r2, #0]
	PIT_TCTRL0 = 0;
6000153a:	str.w	r6, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000153e:	str.w	r6, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001542:	str.w	r6, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001546:	str.w	r6, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000154a:	ldr	r2, [r3, #56]	; 0x38
6000154c:	lsls	r2, r2, #31
6000154e:	bmi.n	60001562 <ResetHandler2+0x13a>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001550:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001554:	ldr	r1, [pc, #196]	; (6000161c <ResetHandler2+0x1f4>)
60001556:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001558:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000155a:	ldr	r2, [r3, #56]	; 0x38
6000155c:	orr.w	r2, r2, #1
60001560:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001562:	ldr	r2, [pc, #180]	; (60001618 <ResetHandler2+0x1f0>)
60001564:	ldr	r4, [pc, #184]	; (60001620 <ResetHandler2+0x1f8>)
60001566:	ldr	r3, [r2, #8]
60001568:	orr.w	r3, r3, #65537	; 0x10001
6000156c:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
6000156e:	bl	60001890 <configure_external_ram>
#endif
	analog_init();
60001572:	bl	600024a0 <analog_init>
	pwm_init();
60001576:	bl	60002570 <__pwm_init_veneer>
	tempmon_init();
6000157a:	bl	60001cb0 <tempmon_init>
	startup_middle_hook();
6000157e:	bl	600017a0 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001582:	ldr	r3, [r4, #0]
#endif
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290?p=87273&viewfull=1#post87273

	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001584:	cmp	r3, #19
60001586:	bls.n	60001582 <ResetHandler2+0x15a>
	usb_init();
60001588:	bl	6000165c <usb_init>
6000158c:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000158e:	cmp.w	r3, #300	; 0x12c
60001592:	bcc.n	6000158c <ResetHandler2+0x164>
	//printf("before C++ constructors\n");
	startup_debug_reset();
60001594:	bl	600017a8 <startup_debug_reset>
	startup_late_hook();
60001598:	bl	600017a4 <startup_default_late_hook>
	__libc_init_array();
6000159c:	bl	60002510 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
600015a0:	bl	60002518 <__main_veneer>
	
	while (1) asm("WFI");
600015a4:	wfi
600015a6:	b.n	600015a4 <ResetHandler2+0x17c>
600015a8:	.word	0x400d8000
600015ac:	.word	0x0000ffb8
600015b0:	.word	0x60002698
600015b4:	.word	0x00000000
600015b8:	.word	0x200026c0
600015bc:	.word	0x60012654
600015c0:	.word	0x20000000
600015c4:	.word	0x20022580
600015c8:	.word	0x200026c0
600015cc:	.word	0x20002400
600015d0:	.word	0xe000ed88
600015d4:	.word	0x00007f4d
600015d8:	.word	0xe000e400
600015dc:	.word	0xe000e4a0
600015e0:	.word	0xe000ed24
600015e4:	.word	0xe000ed08
600015e8:	.word	0x400fc000
600015ec:	.word	0x400ac000
600015f0:	.word	0x000087ed
600015f4:	.word	0x000087f1
600015f8:	.word	0xe000e014
600015fc:	.word	0xe000e018
60001600:	.word	0xe000edfc
60001604:	.word	0x20200000
60001608:	.word	0xe0001000
6000160c:	.word	0x2002247c
60001610:	.word	0x016e3600
60001614:	.word	0x40084000
60001618:	.word	0x400d4000
6000161c:	.word	0x56c00000
60001620:	.word	0x20022480
60001624:	.word	0x2018101b
60001628:	.word	0x13110d0c

6000162c <ResetHandler>:
static void ResetHandler2(void);

__attribute__((section(".startup"), naked))
void ResetHandler(void)
{
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162c:	ldr	r3, [pc, #28]	; (6000164c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000162e:	mov.w	r1, #11141120	; 0xaa0000
static void ResetHandler2(void);

__attribute__((section(".startup"), naked))
void ResetHandler(void)
{
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001632:	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001634:	ldr	r0, [pc, #28]	; (60001654 <ResetHandler+0x28>)
static void ResetHandler2(void);

__attribute__((section(".startup"), naked))
void ResetHandler(void)
{
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001636:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001638:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000163a:	ldr	r2, [pc, #28]	; (60001658 <ResetHandler+0x2c>)
__attribute__((section(".startup"), naked))
void ResetHandler(void)
{
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000163c:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000163e:	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001640:	dsb	sy
	__asm__ volatile("isb":::"memory");
60001644:	isb	sy
	ResetHandler2();
60001648:	bl	60001428 <ResetHandler2>
6000164c:	.word	0x400ac000
60001650:	.word	0xaaaaaaaf
60001654:	.word	0x00200007
60001658:	.word	0x20070000

6000165c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000165c:	ldr	r3, [pc, #192]	; (60001720 <usb_init+0xc4>)
6000165e:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001662:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001664:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001668:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
6000166c:	bl	60002578 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001670:	ldr	r1, [pc, #176]	; (60001724 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001672:	ldr	r0, [pc, #180]	; (60001728 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001674:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001678:	ldr	r4, [pc, #176]	; (6000172c <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000167a:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000167e:	ldr	r3, [pc, #176]	; (60001730 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001680:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001684:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001688:	ldr	r2, [r4, #0]
6000168a:	ands	r3, r2
6000168c:	cbnz	r3, 60001696 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000168e:	ldr.w	r3, [r0, #424]	; 0x1a8
60001692:	lsls	r2, r3, #30
60001694:	beq.n	600016cc <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001696:	ldr	r3, [pc, #144]	; (60001728 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001698:	mov.w	r1, #2147483648	; 0x80000000
6000169c:	ldr	r2, [pc, #140]	; (6000172c <usb_init+0xd0>)
6000169e:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600016a0:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600016a2:	ldr.w	r1, [r3, #320]	; 0x140
600016a6:	orr.w	r1, r1, #2
600016aa:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600016ae:	ldr.w	r3, [r2, #320]	; 0x140
600016b2:	lsls	r3, r3, #30
600016b4:	bmi.n	600016ae <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016b6:	mov.w	r0, #131072	; 0x20000
600016ba:	ldr	r1, [pc, #120]	; (60001734 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016bc:	ldr	r3, [pc, #108]	; (6000172c <usb_init+0xd0>)
600016be:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016c2:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016c4:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016c6:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016c8:	bl	60002548 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016cc:	ldr	r5, [pc, #104]	; (60001738 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600016ce:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016d0:	ldr	r3, [pc, #88]	; (6000172c <usb_init+0xd0>)
600016d2:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016d6:	ldr	r4, [pc, #80]	; (60001728 <usb_init+0xcc>)
600016d8:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016da:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016dc:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600016de:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016e0:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016e2:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016e6:	mov.w	r2, #640	; 0x280
600016ea:	bl	60002568 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016ee:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016f2:	movw	r1, #323	; 0x143
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600016f6:	mov.w	r0, #4194304	; 0x400000
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600016fa:	ldr	r3, [pc, #64]	; (6000173c <usb_init+0xe0>)
600016fc:	ldr	r2, [pc, #64]	; (60001740 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016fe:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001700:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001702:	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001706:	str.w	r1, [r4, #328]	; 0x148
6000170a:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000170e:	ldr	r2, [pc, #52]	; (60001744 <usb_init+0xe8>)
60001710:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001714:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001716:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001718:	str.w	r3, [r4, #320]	; 0x140
6000171c:	pop	{r4, r5, r6, pc}
6000171e:	nop
60001720:	.word	0x400d8000
60001724:	.word	0x400fc000
60001728:	.word	0x402e0000
6000172c:	.word	0x400d9000
60001730:	.word	0x001e1c00
60001734:	.word	0xe000e28c
60001738:	.word	0x20000000
6000173c:	.word	0x20002400
60001740:	.word	0x00007671
60001744:	.word	0xe000e10c

60001748 <_reboot_Teensyduino_>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


FLASHMEM void _reboot_Teensyduino_(void)
{
60001748:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000174a:	ldr	r3, [pc, #56]	; (60001784 <_reboot_Teensyduino_+0x3c>)
6000174c:	ldr	r3, [r3, #96]	; 0x60
6000174e:	lsls	r3, r3, #30
60001750:	bmi.n	60001754 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001752:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001754:	cpsid	i
		USB1_USBCMD = 0;
60001756:	ldr	r3, [pc, #48]	; (60001788 <_reboot_Teensyduino_+0x40>)
60001758:	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
6000175a:	ldr	r2, [pc, #48]	; (6000178c <_reboot_Teensyduino_+0x44>)
{
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
6000175c:	str.w	r0, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001760:	add.w	r3, r3, #3758096384	; 0xe0000000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
60001764:	ldr	r1, [pc, #40]	; (60001790 <_reboot_Teensyduino_+0x48>)
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001766:	sub.w	r3, r3, #913408	; 0xdf000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
6000176a:	str	r1, [r2, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000176c:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
6000176e:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001772:	ldr	r2, [pc, #32]	; (60001794 <_reboot_Teensyduino_+0x4c>)
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001774:	add.w	r3, r3, #28672	; 0x7000
60001778:	ldr	r1, [pc, #28]	; (60001798 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000177a:	ldr	r2, [r2, #0]
6000177c:	mov	r0, r3
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
6000177e:	str	r1, [r3, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001780:	ldr	r3, [r2, #8]
60001782:	blx	r3
60001784:	.word	0x401f4400
60001788:	.word	0x402e0000
6000178c:	.word	0x400ac000
60001790:	.word	0x00200003
60001794:	.word	0x0020001c
60001798:	.word	0xeb120000

6000179c <startup_default_early_hook>:
6000179c:	bx	lr
6000179e:	nop

600017a0 <startup_default_middle_hook>:
600017a0:	bx	lr
600017a2:	nop

600017a4 <startup_default_late_hook>:
extern int main (void);
FLASHMEM void startup_default_early_hook(void) {}
void startup_early_hook(void)	__attribute__ ((weak, alias("startup_default_early_hook")));
FLASHMEM void startup_default_middle_hook(void) {}
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
600017a4:	bx	lr
600017a6:	nop

600017a8 <startup_debug_reset>:
void startup_late_hook(void)	__attribute__ ((weak, alias("startup_default_late_hook")));
extern void startup_debug_reset(void) __attribute__((noinline));
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600017a8:	nop
600017aa:	bx	lr

600017ac <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600017ac:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017ae:	ldr	r2, [pc, #144]	; (60001840 <configure_cache+0x94>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017b0:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017b2:	ldr	r3, [pc, #144]	; (60001844 <configure_cache+0x98>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017b4:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017b8:	ldr	r4, [pc, #140]	; (60001848 <configure_cache+0x9c>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017ba:	movs	r6, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017bc:	ldr.w	lr, [pc, #200]	; 60001888 <configure_cache+0xdc>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017c0:	movs	r7, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017c2:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600017c4:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017c6:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017ca:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017ce:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017d0:	ldr.w	lr, [pc, #184]	; 6000188c <configure_cache+0xe0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017d4:	ldr	r6, [pc, #116]	; (6000184c <configure_cache+0xa0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017d6:	str.w	lr, [r3]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017da:	ldr	r1, [pc, #116]	; (60001850 <configure_cache+0xa4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017dc:	str	r7, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017de:	str	r6, [r3, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017e0:	orr.w	r1, r1, #21
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017e4:	ldr	r7, [pc, #108]	; (60001854 <configure_cache+0xa8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017e6:	ldr	r6, [pc, #112]	; (60001858 <configure_cache+0xac>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017e8:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017ea:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017ec:	ldr	r7, [pc, #108]	; (6000185c <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017ee:	ldr	r6, [pc, #112]	; (60001860 <configure_cache+0xb4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017f0:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017f2:	str	r6, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017f4:	ldr	r7, [pc, #108]	; (60001864 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017f6:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017f8:	ldr	r6, [pc, #108]	; (60001868 <configure_cache+0xbc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017fa:	ldr	r1, [pc, #112]	; (6000186c <configure_cache+0xc0>)

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017fc:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017fe:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001800:	ldr	r7, [pc, #108]	; (60001870 <configure_cache+0xc4>)
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001802:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001804:	ldr	r6, [pc, #108]	; (60001874 <configure_cache+0xc8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001806:	ldr	r1, [pc, #112]	; (60001878 <configure_cache+0xcc>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001808:	str	r7, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000180a:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000180c:	ldr	r7, [pc, #108]	; (6000187c <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000180e:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001810:	ldr	r6, [pc, #108]	; (60001880 <configure_cache+0xd4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001812:	ldr	r1, [pc, #112]	; (60001884 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001814:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001816:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001818:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000181a:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
6000181c:	dsb	sy
	asm("isb");
60001820:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001824:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001828:	dsb	sy
	asm("isb");
6000182c:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001830:	ldr.w	r3, [r2, #-136]
60001834:	orr.w	r3, r3, #196608	; 0x30000
60001838:	str.w	r3, [r2, #-136]
6000183c:	pop	{r4, r5, r6, r7, pc}
6000183e:	nop
60001840:	.word	0xe000ed9c
60001844:	.word	0xe000eda0
60001848:	.word	0xe000ed94
6000184c:	.word	0x00100009
60001850:	.word	0x20022580
60001854:	.word	0x00200013
60001858:	.word	0x07020021
6000185c:	.word	0x20000014
60001860:	.word	0x13080025
60001864:	.word	0x10000009
60001868:	.word	0x20200016
6000186c:	.word	0x130b0027
60001870:	.word	0x40000017
60001874:	.word	0x13100033
60001878:	.word	0x60000018
6000187c:	.word	0x070b002f
60001880:	.word	0x70000019
60001884:	.word	0x130b002f
60001888:	.word	0x1000003f
6000188c:	.word	0x03080025

60001890 <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
60001890:	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001892:	ldr	r3, [pc, #564]	; (60001ac8 <configure_external_ram+0x238>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001894:	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001896:	ldr	r6, [pc, #564]	; (60001acc <configure_external_ram+0x23c>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001898:	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000189a:	ldr	r1, [pc, #564]	; (60001ad0 <configure_external_ram+0x240>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000189c:	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018a0:	ldr	r5, [pc, #560]	; (60001ad4 <configure_external_ram+0x244>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600018a2:	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018a6:	ldr	r4, [pc, #560]	; (60001ad8 <configure_external_ram+0x248>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
600018a8:	sub	sp, #12
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018aa:	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018ae:	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600018b2:	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018b4:	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018b8:	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600018bc:	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018c0:	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018c4:	ldr	r1, [pc, #532]	; (60001adc <configure_external_ram+0x24c>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018c6:	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018ca:	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018ce:	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018d2:	ldr	r6, [pc, #524]	; (60001ae0 <configure_external_ram+0x250>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600018d4:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600018d6:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600018d8:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600018da:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600018dc:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600018de:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600018e2:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600018e6:	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018ea:	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018ee:	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600018f2:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600018f6:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600018fa:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600018fe:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001902:	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001906:	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001908:	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000190a:	ldr	r0, [pc, #472]	; (60001ae4 <configure_external_ram+0x254>)
6000190c:	ands	r0, r3
6000190e:	ldr	r3, [pc, #472]	; (60001ae8 <configure_external_ram+0x258>)
60001910:	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001912:	ldr	r0, [pc, #472]	; (60001aec <configure_external_ram+0x25c>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001914:	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001916:	ldr.w	r3, [r6, #132]	; 0x84
6000191a:	orr.w	r3, r3, #12
6000191e:	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001922:	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001924:	ldr	r3, [r0, #0]
60001926:	orrs	r3, r6
60001928:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000192a:	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000192c:	and.w	lr, r3, lr
60001930:	ldr	r3, [pc, #444]	; (60001af0 <configure_external_ram+0x260>)
60001932:	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001936:	ldr.w	lr, [pc, #496]	; 60001b28 <configure_external_ram+0x298>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000193a:	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000193c:	ldr	r3, [pc, #436]	; (60001af4 <configure_external_ram+0x264>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000193e:	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001940:	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001944:	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001946:	ldr	r7, [pc, #432]	; (60001af8 <configure_external_ram+0x268>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001948:	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000194c:	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000194e:	ldr	r3, [r0, #12]
60001950:	bic.w	r3, r3, #120	; 0x78
60001954:	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001956:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001958:	ands	r7, r3
6000195a:	ldr	r3, [pc, #416]	; (60001afc <configure_external_ram+0x26c>)
6000195c:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000195e:	ldr	r7, [pc, #408]	; (60001af8 <configure_external_ram+0x268>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001960:	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001962:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001964:	ands	r7, r3
60001966:	ldr	r3, [pc, #404]	; (60001afc <configure_external_ram+0x26c>)
60001968:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000196a:	ldr	r7, [pc, #404]	; (60001b00 <configure_external_ram+0x270>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000196c:	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000196e:	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001970:	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001972:	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001976:	ldr	r7, [pc, #396]	; (60001b04 <configure_external_ram+0x274>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001978:	bic.w	r3, r3, #63	; 0x3f
6000197c:	orr.w	r3, r3, #1
60001980:	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001984:	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001988:	ldr.w	lr, [pc, #388]	; 60001b10 <configure_external_ram+0x280>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000198c:	bic.w	r3, r3, #63	; 0x3f
60001990:	orr.w	r3, r3, #1
60001994:	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
60001998:	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000199a:	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000199c:	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000199e:	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600019a2:	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019a4:	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019a6:	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019aa:	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019ac:	ldr	r3, [pc, #344]	; (60001b08 <configure_external_ram+0x278>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019ae:	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019b2:	ldr	r2, [pc, #344]	; (60001b0c <configure_external_ram+0x27c>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019b4:	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019b6:	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019ba:	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019bc:	str.w	r1, [r3], #4
600019c0:	cmp	r3, r2
600019c2:	bne.n	600019bc <configure_external_ram+0x12c>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019c4:	ldr	r3, [pc, #292]	; (60001aec <configure_external_ram+0x25c>)
600019c6:	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600019c8:	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019ca:	orr.w	r2, r2, #1
600019ce:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600019d0:	ldr	r3, [r1, #0]
600019d2:	ldr	r2, [pc, #280]	; (60001aec <configure_external_ram+0x25c>)
600019d4:	ands.w	r3, r3, #1
600019d8:	bne.n	600019d0 <configure_external_ram+0x140>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019da:	ldr	r6, [pc, #308]	; (60001b10 <configure_external_ram+0x280>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019dc:	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019de:	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019e2:	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019e6:	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600019ea:	ldr	r7, [pc, #296]	; (60001b14 <configure_external_ram+0x284>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019ec:	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600019ee:	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019f2:	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600019f4:	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019f8:	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600019fc:	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a00:	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a04:	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a06:	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a0a:	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a0c:	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a10:	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a14:	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a18:	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a1c:	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a20:	ldr	r6, [pc, #244]	; (60001b18 <configure_external_ram+0x288>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a22:	ldr	r5, [pc, #248]	; (60001b1c <configure_external_ram+0x28c>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a24:	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a28:	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a2c:	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a30:	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a34:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a38:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a3c:	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a40:	ldr	r3, [r1, #20]
60001a42:	ldr	r2, [pc, #168]	; (60001aec <configure_external_ram+0x25c>)
60001a44:	lsls	r5, r3, #31
60001a46:	bpl.n	60001a40 <configure_external_ram+0x1b0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a48:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a4a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a4c:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a50:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a52:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a54:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a58:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a5c:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a60:	ldr	r3, [r1, #20]
60001a62:	ldr	r2, [pc, #136]	; (60001aec <configure_external_ram+0x25c>)
60001a64:	lsls	r4, r3, #31
60001a66:	bpl.n	60001a60 <configure_external_ram+0x1d0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a68:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a6a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a6c:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a70:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a72:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a74:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a78:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a7c:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a80:	ldr	r3, [r1, #20]
60001a82:	ldr	r2, [pc, #104]	; (60001aec <configure_external_ram+0x25c>)
60001a84:	lsls	r0, r3, #31
60001a86:	bpl.n	60001a80 <configure_external_ram+0x1f0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a88:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a8a:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a8c:	ldr	r0, [pc, #144]	; (60001b20 <configure_external_ram+0x290>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a8e:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a90:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a92:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a96:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a9a:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a9e:	ldr	r3, [r1, #20]
60001aa0:	ldr	r2, [pc, #72]	; (60001aec <configure_external_ram+0x25c>)
60001aa2:	lsls	r3, r3, #31
60001aa4:	bpl.n	60001a9e <configure_external_ram+0x20e>
	uint32_t id = FLEXSPI2_RFDR0;
60001aa6:	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001aaa:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001aae:	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001ab0:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ab2:	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001ab4:	cmp	r3, r1
60001ab6:	beq.n	60001b2c <configure_external_ram+0x29c>
			external_psram_size * 0x100000 -
			((uint32_t)&_extram_end - (uint32_t)&_extram_start),
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001ab8:	ldr	r3, [pc, #104]	; (60001b24 <configure_external_ram+0x294>)
60001aba:	movs	r2, #0
60001abc:	str	r2, [r3, #0]
60001abe:	str	r2, [r3, #4]
60001ac0:	str	r2, [r3, #8]
60001ac2:	str	r2, [r3, #12]
	}
}
60001ac4:	add	sp, #12
60001ac6:	pop	{r4, r5, r6, r7, pc}
60001ac8:	.word	0x401f8000
60001acc:	.word	0x000170f9
60001ad0:	.word	0x0001b0f9
60001ad4:	.word	0x000110f9
60001ad8:	.word	0x000100f9
60001adc:	.word	0x401f8400
60001ae0:	.word	0x400fc000
60001ae4:	.word	0x1ffffcff
60001ae8:	.word	0xa0000300
60001aec:	.word	0x402a4000
60001af0:	.word	0xffff0012
60001af4:	.word	0x00f737ff
60001af8:	.word	0x7cf0ff00
60001afc:	.word	0x80000040
60001b00:	.word	0x830f00ff
60001b04:	.word	0x00020063
60001b08:	.word	0x402a4200
60001b0c:	.word	0x402a4300
60001b10:	.word	0x5af05af0
60001b14:	.word	0x3018049f
60001b18:	.word	0x26013206
60001b1c:	.word	0x0a180638
60001b20:	.word	0x00030004
60001b24:	.word	0x20022530
60001b28:	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b2c:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b2e:	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b32:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b34:	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b36:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b3a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b3e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b42:	ldr	r3, [r1, #20]
60001b44:	ldr	r2, [pc, #236]	; (60001c34 <configure_external_ram+0x3a4>)
60001b46:	lsls	r7, r3, #31
60001b48:	bpl.n	60001b42 <configure_external_ram+0x2b2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b4a:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b4c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b50:	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b52:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b54:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b56:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b5a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b5e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b62:	ldr	r3, [r1, #20]
60001b64:	ldr	r2, [pc, #204]	; (60001c34 <configure_external_ram+0x3a4>)
60001b66:	lsls	r6, r3, #31
60001b68:	bpl.n	60001b62 <configure_external_ram+0x2d2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b6a:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b6c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b70:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b74:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b76:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b78:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b7c:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b80:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b84:	ldr	r3, [r1, #20]
60001b86:	ldr	r2, [pc, #172]	; (60001c34 <configure_external_ram+0x3a4>)
60001b88:	lsls	r5, r3, #31
60001b8a:	bpl.n	60001b84 <configure_external_ram+0x2f4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b8c:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b8e:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b92:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b96:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b98:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b9a:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b9e:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ba2:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ba6:	ldr	r3, [r1, #20]
60001ba8:	ldr	r2, [pc, #136]	; (60001c34 <configure_external_ram+0x3a4>)
60001baa:	lsls	r4, r3, #31
60001bac:	bpl.n	60001ba6 <configure_external_ram+0x316>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bae:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001bb0:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001bb4:	ldr	r0, [pc, #128]	; (60001c38 <configure_external_ram+0x3a8>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bb6:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bb8:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001bba:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001bbe:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bc2:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bc6:	ldr	r3, [r1, #20]
60001bc8:	ldr	r2, [pc, #104]	; (60001c34 <configure_external_ram+0x3a4>)
60001bca:	lsls	r0, r3, #31
60001bcc:	bpl.n	60001bc6 <configure_external_ram+0x336>
	uint32_t id = FLEXSPI2_RFDR0;
60001bce:	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bd2:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bd6:	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bd8:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bda:	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bdc:	cmp	r3, r1
60001bde:	beq.n	60001c02 <configure_external_ram+0x372>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
60001be0:	ldr	r3, [pc, #88]	; (60001c3c <configure_external_ram+0x3ac>)
60001be2:	movs	r2, #8
60001be4:	mov.w	r4, #8388608	; 0x800000
60001be8:	strb	r2, [r3, #0]
		}
		// TODO: zero uninitialized EXTMEM variables
		// TODO: copy from flash to initialize EXTMEM variables
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bea:	ldr	r1, [pc, #84]	; (60001c40 <configure_external_ram+0x3b0>)
60001bec:	movs	r0, #0
60001bee:	ldr	r2, [pc, #84]	; (60001c44 <configure_external_ram+0x3b4>)
60001bf0:	movs	r3, #1
60001bf2:	str	r0, [sp, #0]
60001bf4:	subs	r2, r2, r1
60001bf6:	ldr	r0, [pc, #80]	; (60001c48 <configure_external_ram+0x3b8>)
60001bf8:	add	r2, r4
60001bfa:	bl	60002528 <__sm_set_pool_veneer>
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
	}
}
60001bfe:	add	sp, #12
60001c00:	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001c02:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c06:	mov.w	r1, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c0a:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c0c:	mov	r0, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001c0e:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c12:	str.w	r1, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c16:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c1a:	ldr	r3, [r0, #20]
60001c1c:	ldr	r1, [pc, #20]	; (60001c34 <configure_external_ram+0x3a4>)
60001c1e:	lsls	r3, r3, #31
60001c20:	bpl.n	60001c1a <configure_external_ram+0x38a>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c22:	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001c24:	ldr	r3, [pc, #20]	; (60001c3c <configure_external_ram+0x3ac>)
60001c26:	movs	r2, #16
60001c28:	mov.w	r4, #16777216	; 0x1000000
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c2c:	str	r0, [r1, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001c2e:	strb	r2, [r3, #0]
60001c30:	b.n	60001bea <configure_external_ram+0x35a>
60001c32:	nop
60001c34:	.word	0x402a4000
60001c38:	.word	0x00030004
60001c3c:	.word	0x200224b7
60001c40:	.word	0x70000000
60001c44:	.word	0x70000000
60001c48:	.word	0x20022530

60001c4c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001c4c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c4e:	ldr	r2, [pc, #92]	; (60001cac <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c50:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c52:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c56:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c5a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c5e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c62:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c66:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c68:	tst.w	r3, #2
60001c6c:	beq.n	60001c7c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c6e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c70:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c72:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c74:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c76:	tst.w	r3, #2
60001c7a:	bne.n	60001c6e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c7c:	tst.w	r3, #8192	; 0x2000
60001c80:	bne.n	60001c86 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c82:	str	r5, [r2, #20]
			continue;
60001c84:	b.n	60001c66 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c86:	tst.w	r3, #4096	; 0x1000
60001c8a:	bne.n	60001c90 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c8c:	str	r6, [r2, #20]
			continue;
60001c8e:	b.n	60001c66 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c90:	cmp	r3, #0
60001c92:	bge.n	60001c66 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c94:	tst.w	r3, #65536	; 0x10000
60001c98:	beq.n	60001c9e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c9a:	str	r1, [r2, #24]
			continue;
60001c9c:	b.n	60001c66 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c9e:	lsls	r3, r3, #25
60001ca0:	bmi.n	60001ca6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ca2:	str	r7, [r2, #20]
			continue;
60001ca4:	b.n	60001c66 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001ca6:	pop	{r4, r5, r6, r7}
60001ca8:	bx	lr
60001caa:	nop
60001cac:	.word	0x400d8000

60001cb0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cb0:	ldr	r2, [pc, #228]	; (60001d98 <tempmon_init+0xe8>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cb2:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cb4:	ldr	r1, [pc, #228]	; (60001d9c <tempmon_init+0xec>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cb6:	vmov.f32	s11, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cba:	ldr	r3, [r2, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001cbc:	vldr	s12, [pc, #224]	; 60001da0 <tempmon_init+0xf0>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cc0:	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001cc4:	vldr	s13, [pc, #220]	; 60001da4 <tempmon_init+0xf4>
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001cc8:	push	{r4, r5, r6, r7}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cca:	str	r3, [r2, #0]
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001ccc:	movs	r4, #0
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cce:	str	r0, [r2, #16]
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cd0:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cd4:	ldr	r7, [pc, #208]	; (60001da8 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cd6:	uxtb	r0, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cd8:	ubfx	r1, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cdc:	lsrs	r3, r3, #20
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cde:	ldr	r6, [pc, #204]	; (60001dac <tempmon_init+0xfc>)
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ce0:	vmov	s14, r0
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001ce4:	vmov	s10, r1
60001ce8:	vmov	s15, r3
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cec:	ldr	r3, [pc, #192]	; (60001db0 <tempmon_init+0x100>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cee:	vcvt.f32.s32	s10, s10
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cf2:	ldr	r5, [pc, #192]	; (60001db4 <tempmon_init+0x104>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cf4:	vcvt.f32.s32	s14, s14
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cf8:	str	r0, [r6, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cfa:	vcvt.f32.s32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cfe:	str	r1, [r5, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d00:	ldr	r1, [pc, #180]	; (60001db8 <tempmon_init+0x108>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d02:	vsub.f32	s12, s14, s12
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d06:	ldr	r6, [pc, #180]	; (60001dbc <tempmon_init+0x10c>)
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d08:	vsub.f32	s15, s15, s10
60001d0c:	ldr	r0, [pc, #176]	; (60001dc0 <tempmon_init+0x110>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d0e:	vsub.f32	s13, s14, s13
60001d12:	ldr	r5, [pc, #176]	; (60001dc4 <tempmon_init+0x114>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d14:	vsub.f32	s14, s14, s11
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d18:	vmul.f32	s12, s12, s15
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d1c:	vstr	s15, [r7]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d20:	vmul.f32	s13, s13, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d24:	ldr	r7, [r2, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d26:	vmul.f32	s15, s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d2a:	vstr	s14, [r3]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d2e:	vdiv.f32	s11, s12, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d32:	vdiv.f32	s12, s13, s14
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d36:	vdiv.f32	s13, s15, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d3a:	vadd.f32	s14, s11, s10
60001d3e:	vcvt.u32.f32	s15, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d42:	vadd.f32	s14, s12, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d46:	vmov	r3, s15
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d4a:	vcvt.u32.f32	s14, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d4e:	orr.w	r3, r7, r3, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d52:	vadd.f32	s15, s13, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d56:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d58:	vmov	r3, s14
60001d5c:	ldr.w	r7, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d60:	vcvt.u32.f32	s15, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d64:	and.w	r1, r1, r3, lsl #16
60001d68:	orrs	r1, r7
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d6a:	vmov	r3, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d6e:	str.w	r1, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d72:	ubfx	r3, r3, #0, #12
60001d76:	ldr.w	r1, [r2, #272]	; 0x110
60001d7a:	orrs	r3, r1
60001d7c:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d80:	ldr	r3, [r2, #0]
60001d82:	orr.w	r3, r3, #2
60001d86:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d88:	strb	r4, [r6, #0]
60001d8a:	str.w	r5, [r0, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d8e:	ldr	r3, [pc, #56]	; (60001dc8 <tempmon_init+0x118>)
60001d90:	movs	r2, #1
}
60001d92:	pop	{r4, r5, r6, r7}
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d94:	str	r2, [r3, #0]
}
60001d96:	bx	lr
60001d98:	.word	0x400d8180
60001d9c:	.word	0x401f4400
60001da0:	.word	0x42aa0000
60001da4:	.word	0x42b40000
60001da8:	.word	0x20021fbc
60001dac:	.word	0x20021fb4
60001db0:	.word	0x20021fb8
60001db4:	.word	0x20021fb0
60001db8:	.word	0x0fff0000
60001dbc:	.word	0xe000e440
60001dc0:	.word	0x20002400
60001dc4:	.word	0x0000826d
60001dc8:	.word	0xe000e108

60001dcc <cleardata(arm_fault_info_struct*) [clone .constprop.1]>:
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001dcc:	ldr	r2, [pc, #48]	; (60001e00 <cleardata(arm_fault_info_struct*) [clone .constprop.1]+0x34>)
60001dce:	movs	r3, #0
60001dd0:	str	r3, [r2, #0]
	info->ipsr  = 0;
60001dd2:	str	r3, [r2, #4]
	info->cfsr  = 0;
60001dd4:	str	r3, [r2, #8]
	info->hfsr  = 0;
60001dd6:	str	r3, [r2, #12]
	info->mmfar = 0;
60001dd8:	str	r3, [r2, #16]
	info->bfar  = 0;
60001dda:	str	r3, [r2, #20]
	info->ret = 0;
60001ddc:	str	r3, [r2, #24]
	info->xpsr  = 0;
60001dde:	str	r3, [r2, #28]
	info->crc = 0;
60001de0:	str	r3, [r2, #40]	; 0x28
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001de2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001de6:	ldr	r1, [pc, #28]	; (60001e04 <cleardata(arm_fault_info_struct*) [clone .constprop.1]+0x38>)
60001de8:	ldr	r0, [pc, #28]	; (60001e08 <cleardata(arm_fault_info_struct*) [clone .constprop.1]+0x3c>)
60001dea:	str	r2, [r1, #0]
60001dec:	str	r0, [r1, #0]
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001dee:	dsb	sy
	asm("isb");
60001df2:	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001df6:	ldr	r2, [pc, #20]	; (60001e0c <cleardata(arm_fault_info_struct*) [clone .constprop.1]+0x40>)
60001df8:	ldr	r1, [r2, #8]
60001dfa:	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001dfc:	str	r3, [r2, #48]	; 0x30
60001dfe:	bx	lr
60001e00:	.word	0x2027ff80
60001e04:	.word	0xe000ef70
60001e08:	.word	0x2027ffa0
60001e0c:	.word	0x400f8000

60001e10 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]>:
	if (isvalid(info)) return true;
	return false;
}

FLASHMEM
static int isvalid(const struct arm_fault_info_struct *info)
60001e10:	push	{r4, r5}
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001e12:	mov.w	r2, #4294967295
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
	data = (uint32_t *)info;
60001e16:	ldr	r4, [pc, #48]	; (60001e48 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0x38>)
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e18:	ldr	r0, [pc, #48]	; (60001e4c <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0x3c>)

	if (info->len != sizeof(*info) / 4) return 0;
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
	while (data < end) {
60001e1a:	ldr	r5, [pc, #52]	; (60001e50 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0x40>)
		crc ^= *data++;
60001e1c:	ldr.w	r3, [r4], #4
60001e20:	movs	r1, #32
60001e22:	eors	r2, r3
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e24:	and.w	r3, r2, #1
60001e28:	subs	r1, #1
60001e2a:	mul.w	r3, r0, r3
60001e2e:	eor.w	r2, r3, r2, lsr #1
60001e32:	bne.n	60001e24 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0x14>

	if (info->len != sizeof(*info) / 4) return 0;
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
	while (data < end) {
60001e34:	cmp	r4, r5
60001e36:	bne.n	60001e1c <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0xc>
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
	}
	if (crc != info->crc) return 0;
60001e38:	ldr	r3, [pc, #12]	; (60001e48 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]+0x38>)
60001e3a:	ldr	r0, [r3, #40]	; 0x28
	return 1;
}
60001e3c:	subs	r0, r0, r2
60001e3e:	clz	r0, r0
60001e42:	pop	{r4, r5}
60001e44:	lsrs	r0, r0, #5
60001e46:	bx	lr
60001e48:	.word	0x2027ff80
60001e4c:	.word	0xedb88320
60001e50:	.word	0x2027ffa8

60001e54 <CrashReportClass::printTo(Print&) const>:
static int isvalid(const struct arm_fault_info_struct *info);
static void cleardata(struct arm_fault_info_struct *info);

FLASHMEM
size_t CrashReportClass::printTo(Print& p) const
{
60001e54:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001e58:	ldr	r6, [pc, #536]	; (60002074 <CrashReportClass::printTo(Print&) const+0x220>)
static int isvalid(const struct arm_fault_info_struct *info);
static void cleardata(struct arm_fault_info_struct *info);

FLASHMEM
size_t CrashReportClass::printTo(Print& p) const
{
60001e5a:	mov	r4, r1
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001e5c:	ldr	r3, [r6, #0]
60001e5e:	cmp	r3, #11
60001e60:	beq.w	600020e4 <CrashReportClass::printTo(Print&) const+0x290>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001e64:	ldr	r3, [r4, #0]
60001e66:	movs	r2, #23
60001e68:	ldr	r1, [pc, #524]	; (60002078 <CrashReportClass::printTo(Print&) const+0x224>)
60001e6a:	mov	r0, r4
60001e6c:	ldr	r3, [r3, #4]
60001e6e:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001e70:	mov	r0, r4
60001e72:	bl	60002550 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001e76:	ldr	r3, [r4, #0]
60001e78:	movs	r2, #72	; 0x48
60001e7a:	ldr	r1, [pc, #512]	; (6000207c <CrashReportClass::printTo(Print&) const+0x228>)
60001e7c:	ldr	r3, [r3, #4]
60001e7e:	mov	r0, r4
60001e80:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001e82:	mov	r0, r4
60001e84:	bl	60002550 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001e88:	ldr	r3, [r4, #0]
60001e8a:	movs	r2, #73	; 0x49
60001e8c:	ldr	r1, [pc, #496]	; (60002080 <CrashReportClass::printTo(Print&) const+0x22c>)
60001e8e:	ldr	r3, [r3, #4]
60001e90:	mov	r0, r4
60001e92:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001e94:	mov	r0, r4
60001e96:	bl	60002550 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001e9a:	ldr	r3, [r4, #0]
60001e9c:	movs	r2, #36	; 0x24
60001e9e:	ldr	r1, [pc, #484]	; (60002084 <CrashReportClass::printTo(Print&) const+0x230>)
60001ea0:	ldr	r3, [r3, #4]
60001ea2:	mov	r0, r4
60001ea4:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001ea6:	mov	r0, r4
60001ea8:	bl	60002550 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001eac:	ldr	r3, [r4, #0]
60001eae:	movs	r2, #71	; 0x47
60001eb0:	ldr	r1, [pc, #468]	; (60002088 <CrashReportClass::printTo(Print&) const+0x234>)
60001eb2:	ldr	r3, [r3, #4]
60001eb4:	mov	r0, r4
60001eb6:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001eb8:	mov	r0, r4
60001eba:	bl	60002550 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001ebe:	ldr	r3, [r4, #0]
60001ec0:	movs	r2, #63	; 0x3f
60001ec2:	ldr	r1, [pc, #456]	; (6000208c <CrashReportClass::printTo(Print&) const+0x238>)
60001ec4:	ldr	r3, [r3, #4]
60001ec6:	mov	r0, r4
60001ec8:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001eca:	mov	r0, r4
60001ecc:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    p.println("\tstuck in an infinite loop (technically, hardware still running properly)");
    p.println("\tremaining in a low power sleep mode");
    p.println("\taccess to certain peripherals without their clock enabled (eg, FlexIO)");
    p.println("\tchange of CPU or bus clock speed without use of glitchless mux");
  }
  uint32_t SRSR = SRC_SRSR;
60001ed0:	ldr	r3, [pc, #444]	; (60002090 <CrashReportClass::printTo(Print&) const+0x23c>)
60001ed2:	ldr	r5, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
60001ed4:	lsls	r2, r5, #30
60001ed6:	bpl.n	60001ef4 <CrashReportClass::printTo(Print&) const+0xa0>
    // use SRC_GPR5 to distinguish cases.  See pages 1290 & 1294 in ref manual
    uint32_t gpr5 = SRC_GPR5;
60001ed8:	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
60001eda:	ldr	r3, [pc, #440]	; (60002094 <CrashReportClass::printTo(Print&) const+0x240>)
60001edc:	cmp	r2, r3
60001ede:	beq.w	60002208 <CrashReportClass::printTo(Print&) const+0x3b4>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001ee2:	ldr	r3, [r4, #0]
60001ee4:	movs	r2, #64	; 0x40
60001ee6:	ldr	r1, [pc, #432]	; (60002098 <CrashReportClass::printTo(Print&) const+0x244>)
60001ee8:	mov	r0, r4
60001eea:	ldr	r3, [r3, #4]
60001eec:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001eee:	mov	r0, r4
60001ef0:	bl	60002550 <___ZN5Print7printlnEv_veneer>
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
    } else {
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
    }
  }
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
60001ef4:	lsls	r3, r5, #29
60001ef6:	bpl.n	60001f0a <CrashReportClass::printTo(Print&) const+0xb6>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001ef8:	ldr	r3, [r4, #0]
60001efa:	movs	r2, #39	; 0x27
60001efc:	ldr	r1, [pc, #412]	; (6000209c <CrashReportClass::printTo(Print&) const+0x248>)
60001efe:	mov	r0, r4
60001f00:	ldr	r3, [r3, #4]
60001f02:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f04:	mov	r0, r4
60001f06:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    p.println("  Reboot was caused by security monitor");
  }
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60001f0a:	lsls	r7, r5, #28
60001f0c:	bpl.n	60001f20 <CrashReportClass::printTo(Print&) const+0xcc>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f0e:	ldr	r3, [r4, #0]
60001f10:	movs	r2, #42	; 0x2a
60001f12:	ldr	r1, [pc, #396]	; (600020a0 <CrashReportClass::printTo(Print&) const+0x24c>)
60001f14:	mov	r0, r4
60001f16:	ldr	r3, [r3, #4]
60001f18:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f1a:	mov	r0, r4
60001f1c:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    // because the bootloader chip monitors 3.3V power
    // and manages DCDC_PSWITCH and RESET, causing the
    // power on event to appear as a normal reset.
    p.println("  Reboot was caused by power on/off button");
  }
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60001f20:	lsls	r6, r5, #27
60001f22:	bpl.n	60001f36 <CrashReportClass::printTo(Print&) const+0xe2>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f24:	ldr	r3, [r4, #0]
60001f26:	movs	r2, #38	; 0x26
60001f28:	ldr	r1, [pc, #376]	; (600020a4 <CrashReportClass::printTo(Print&) const+0x250>)
60001f2a:	mov	r0, r4
60001f2c:	ldr	r3, [r3, #4]
60001f2e:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f30:	mov	r0, r4
60001f32:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    p.println("  Reboot was caused by watchdog 1 or 2");
  }
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001f36:	lsls	r0, r5, #26
60001f38:	bpl.n	60001f4c <CrashReportClass::printTo(Print&) const+0xf8>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f3a:	ldr	r3, [r4, #0]
60001f3c:	movs	r2, #41	; 0x29
60001f3e:	ldr	r1, [pc, #360]	; (600020a8 <CrashReportClass::printTo(Print&) const+0x254>)
60001f40:	mov	r0, r4
60001f42:	ldr	r3, [r3, #4]
60001f44:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f46:	mov	r0, r4
60001f48:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    p.println("  Reboot was caused by JTAG boundary scan");
  }
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001f4c:	lsls	r1, r5, #25
60001f4e:	bpl.n	60001f62 <CrashReportClass::printTo(Print&) const+0x10e>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f50:	ldr	r3, [r4, #0]
60001f52:	movs	r2, #33	; 0x21
60001f54:	ldr	r1, [pc, #340]	; (600020ac <CrashReportClass::printTo(Print&) const+0x258>)
60001f56:	mov	r0, r4
60001f58:	ldr	r3, [r3, #4]
60001f5a:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f5c:	mov	r0, r4
60001f5e:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    p.println("  Reboot was caused by JTAG debug");
  }
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60001f62:	lsls	r2, r5, #24
60001f64:	bpl.n	60001f78 <CrashReportClass::printTo(Print&) const+0x124>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f66:	ldr	r3, [r4, #0]
60001f68:	movs	r2, #33	; 0x21
60001f6a:	ldr	r1, [pc, #324]	; (600020b0 <CrashReportClass::printTo(Print&) const+0x25c>)
60001f6c:	mov	r0, r4
60001f6e:	ldr	r3, [r3, #4]
60001f70:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001f72:	mov	r0, r4
60001f74:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    p.println("  Reboot was caused by watchdog 3");
  }
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001f78:	lsls	r3, r5, #23
60001f7a:	bmi.n	6000201a <CrashReportClass::printTo(Print&) const+0x1c6>
	  IOMUXC_GPR_GPR16 = 0x00000007;
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
	  asm volatile ("dsb":::"memory");
	  while (1) asm ("wfi");
  }
  if (bc->bitmask) {
60001f7c:	ldr	r2, [pc, #308]	; (600020b4 <CrashReportClass::printTo(Print&) const+0x260>)
60001f7e:	ldr	r3, [r2, #0]
60001f80:	cmp	r3, #0
60001f82:	beq.n	60002010 <CrashReportClass::printTo(Print&) const+0x1bc>
60001f84:	mov	r7, r2
60001f86:	ldr	r6, [pc, #304]	; (600020b8 <CrashReportClass::printTo(Print&) const+0x264>)
60001f88:	movs	r5, #1
60001f8a:	b.n	60001f8e <CrashReportClass::printTo(Print&) const+0x13a>
60001f8c:	ldr	r3, [r7, #0]
    for (int i=0; i < 6; i++) {
      if (bc->bitmask & (1 << i)) {
60001f8e:	subs	r2, r5, #1
60001f90:	mov.w	r8, #1
60001f94:	lsl.w	r2, r8, r2
60001f98:	tst	r2, r3
60001f9a:	beq.n	60001ff2 <CrashReportClass::printTo(Print&) const+0x19e>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001f9c:	ldr	r3, [r4, #0]
60001f9e:	movs	r2, #14
60001fa0:	ldr	r1, [pc, #280]	; (600020bc <CrashReportClass::printTo(Print&) const+0x268>)
60001fa2:	mov	r0, r4
60001fa4:	ldr	r3, [r3, #4]
60001fa6:	blx	r3
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	// Print a signed number
	size_t print(int n)				{ return print((long)n); }
60001fa8:	mov	r1, r5
60001faa:	mov	r0, r4
60001fac:	bl	60002530 <___ZN5Print5printEl_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001fb0:	ldr	r3, [r4, #0]
60001fb2:	movs	r2, #5
60001fb4:	ldr	r1, [pc, #264]	; (600020c0 <CrashReportClass::printTo(Print&) const+0x26c>)
60001fb6:	ldr	r3, [r3, #4]
60001fb8:	mov	r0, r4
60001fba:	blx	r3
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001fbc:	movs	r3, #0
60001fbe:	movs	r2, #10
60001fc0:	ldr	r1, [r6, #0]
60001fc2:	mov	r0, r4
60001fc4:	bl	60002558 <___ZN5Print11printNumberEmhh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001fc8:	ldr	r3, [r4, #0]
60001fca:	movs	r2, #4
60001fcc:	ldr	r1, [pc, #244]	; (600020c4 <CrashReportClass::printTo(Print&) const+0x270>)
60001fce:	ldr	r3, [r3, #4]
60001fd0:	mov	r0, r4
60001fd2:	blx	r3
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001fd4:	movs	r3, #0
60001fd6:	movs	r2, #16
60001fd8:	ldr	r1, [r6, #0]
60001fda:	mov	r0, r4
60001fdc:	bl	60002558 <___ZN5Print11printNumberEmhh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001fe0:	ldr	r3, [r4, #0]
60001fe2:	mov	r2, r8
60001fe4:	ldr	r1, [pc, #224]	; (600020c8 <CrashReportClass::printTo(Print&) const+0x274>)
60001fe6:	ldr	r3, [r3, #4]
60001fe8:	mov	r0, r4
60001fea:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001fec:	mov	r0, r4
60001fee:	bl	60002550 <___ZN5Print7printlnEv_veneer>
60001ff2:	adds	r5, #1
60001ff4:	adds	r6, #4
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
	  asm volatile ("dsb":::"memory");
	  while (1) asm ("wfi");
  }
  if (bc->bitmask) {
    for (int i=0; i < 6; i++) {
60001ff6:	cmp	r5, #7
60001ff8:	bne.n	60001f8c <CrashReportClass::printTo(Print&) const+0x138>
        p.print(" (0x");
        p.print(bc->value[i], HEX);
        p.println(")");
      }
    }
    *(volatile uint32_t *)(&bc->bitmask) = 0;
60001ffa:	ldr	r3, [pc, #184]	; (600020b4 <CrashReportClass::printTo(Print&) const+0x260>)
60001ffc:	movs	r2, #0
60001ffe:	str	r2, [r3, #0]
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60002000:	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
60002004:	ldr	r2, [pc, #196]	; (600020cc <CrashReportClass::printTo(Print&) const+0x278>)
60002006:	str	r3, [r2, #0]
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60002008:	dsb	sy
	asm("isb");
6000200c:	isb	sy
    arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
  }
  cleardata(info);
60002010:	bl	60001dcc <cleardata(arm_fault_info_struct*) [clone .constprop.1]>
  return 1;
}
60002014:	movs	r0, #1
60002016:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
6000201a:	ldr	r3, [r4, #0]
6000201c:	movs	r2, #41	; 0x29
6000201e:	ldr	r1, [pc, #176]	; (600020d0 <CrashReportClass::printTo(Print&) const+0x27c>)
60002020:	mov	r0, r4
60002022:	ldr	r3, [r3, #4]
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
    p.println("  Reboot was caused by watchdog 3");
  }
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
    p.println("  Reboot was caused by temperature sensor");
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60002024:	ldr	r5, [pc, #104]	; (60002090 <CrashReportClass::printTo(Print&) const+0x23c>)
60002026:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60002028:	mov	r0, r4
6000202a:	bl	60002550 <___ZN5Print7printlnEv_veneer>
6000202e:	ldr	r3, [r5, #8]
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60002030:	ldr	r1, [r4, #0]
60002032:	movs	r2, #33	; 0x21
60002034:	bic.w	r3, r3, #256	; 0x100
60002038:	mov	r0, r4
6000203a:	ldr	r6, [r1, #4]
6000203c:	str	r3, [r5, #8]
6000203e:	ldr	r1, [pc, #148]	; (600020d4 <CrashReportClass::printTo(Print&) const+0x280>)
60002040:	blx	r6
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60002042:	mov	r0, r4
60002044:	bl	60002550 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60002048:	ldr	r3, [r4, #0]
6000204a:	movs	r2, #66	; 0x42
6000204c:	ldr	r1, [pc, #136]	; (600020d8 <CrashReportClass::printTo(Print&) const+0x284>)
6000204e:	ldr	r3, [r3, #4]
60002050:	mov	r0, r4
60002052:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60002054:	mov	r0, r4
60002056:	bl	60002550 <___ZN5Print7printlnEv_veneer>
	  p.println("Panic Temp Exceeded Shutting Down");
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
	  IOMUXC_GPR_GPR16 = 0x00000007;
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
6000205a:	ldr	r2, [pc, #128]	; (600020dc <CrashReportClass::printTo(Print&) const+0x288>)
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
    p.println("  Reboot was caused by temperature sensor");
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
	  p.println("Panic Temp Exceeded Shutting Down");
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
	  IOMUXC_GPR_GPR16 = 0x00000007;
6000205c:	ldr	r3, [pc, #128]	; (600020e0 <CrashReportClass::printTo(Print&) const+0x28c>)
6000205e:	movs	r1, #7
60002060:	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60002062:	ldr	r3, [r2, #56]	; 0x38
60002064:	orr.w	r3, r3, #64	; 0x40
60002068:	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
6000206a:	dsb	sy
	  while (1) asm ("wfi");
6000206e:	wfi
60002070:	b.n	6000206e <CrashReportClass::printTo(Print&) const+0x21a>
60002072:	nop
60002074:	.word	0x2027ff80
60002078:	.word	0x200012ec
6000207c:	.word	0x20001304
60002080:	.word	0x20001350
60002084:	.word	0x2000139c
60002088:	.word	0x200013c4
6000208c:	.word	0x2000140c
60002090:	.word	0x400f8000
60002094:	.word	0x0bad00f1
60002098:	.word	0x20001498
6000209c:	.word	0x200014dc
600020a0:	.word	0x20001504
600020a4:	.word	0x20001530
600020a8:	.word	0x20001558
600020ac:	.word	0x20001584
600020b0:	.word	0x200015a8
600020b4:	.word	0x2027ffc0
600020b8:	.word	0x2027ffc4
600020bc:	.word	0x20001660
600020c0:	.word	0x20001670
600020c4:	.word	0x20001678
600020c8:	.word	0x20001398
600020cc:	.word	0xe000ef68
600020d0:	.word	0x200015cc
600020d4:	.word	0x200015f8
600020d8:	.word	0x2000161c
600020dc:	.word	0x400d4000
600020e0:	.word	0x400ac000
600020e4:	bl	60001e10 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]>
size_t CrashReportClass::printTo(Print& p) const
{
  struct arm_fault_info_struct *info = (struct arm_fault_info_struct *)0x2027FF80;
  struct crashreport_breadcrumbs_struct *bc = (struct crashreport_breadcrumbs_struct *)0x2027FFC0;

  if (isvalid(info)) {
600020e8:	cmp	r0, #0
600020ea:	beq.w	60001e64 <CrashReportClass::printTo(Print&) const+0x10>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
600020ee:	ldr	r3, [r4, #0]
600020f0:	movs	r2, #12
600020f2:	ldr	r1, [pc, #712]	; (600023bc <CrashReportClass::printTo(Print&) const+0x568>)
600020f4:	mov	r0, r4
600020f6:	ldr	r3, [r3, #4]
600020f8:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
600020fa:	mov	r0, r4
600020fc:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    p.println("CrashReport:");
    uint8_t ss = info->time % 60;
    info->time /= 60;
    uint8_t mm = info->time % 60;
    info->time /= 60;
60002100:	ldr	r5, [pc, #700]	; (600023c0 <CrashReportClass::printTo(Print&) const+0x56c>)
  struct arm_fault_info_struct *info = (struct arm_fault_info_struct *)0x2027FF80;
  struct crashreport_breadcrumbs_struct *bc = (struct crashreport_breadcrumbs_struct *)0x2027FFC0;

  if (isvalid(info)) {
    p.println("CrashReport:");
    uint8_t ss = info->time % 60;
60002102:	ldr	r7, [r6, #36]	; 0x24
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60002104:	movs	r2, #38	; 0x26
60002106:	ldr	r3, [r4, #0]
60002108:	mov	r0, r4
    info->time /= 60;
    uint8_t mm = info->time % 60;
    info->time /= 60;
6000210a:	umull	r1, r5, r5, r7
6000210e:	ldr	r1, [pc, #692]	; (600023c4 <CrashReportClass::printTo(Print&) const+0x570>)
60002110:	ldr	r3, [r3, #4]
60002112:	lsrs	r5, r5, #11
60002114:	str	r5, [r6, #36]	; 0x24
60002116:	blx	r3
	// Print a string
	size_t print(const char s[])			{ return write(s); }
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60002118:	ldr	r1, [pc, #684]	; (600023c8 <CrashReportClass::printTo(Print&) const+0x574>)
6000211a:	movs	r3, #0
6000211c:	movs	r2, #10
6000211e:	umull	r0, r1, r1, r5
60002122:	mov	r0, r4
60002124:	lsrs	r1, r1, #4
60002126:	add.w	r1, r1, r1, lsl #1
6000212a:	sub.w	r1, r5, r1, lsl #3
6000212e:	bl	60002558 <___ZN5Print11printNumberEmhh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60002132:	ldr	r3, [r4, #0]
60002134:	movs	r2, #1
60002136:	ldr	r1, [pc, #660]	; (600023cc <CrashReportClass::printTo(Print&) const+0x578>)
60002138:	ldr	r3, [r3, #4]
6000213a:	mov	r0, r4
6000213c:	blx	r3
	// Print a string
	size_t print(const char s[])			{ return write(s); }
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
6000213e:	ldr	r1, [pc, #656]	; (600023d0 <CrashReportClass::printTo(Print&) const+0x57c>)
60002140:	movs	r3, #0
60002142:	movs	r2, #10
60002144:	umull	r0, r5, r1, r7
60002148:	mov	r0, r4
6000214a:	lsrs	r5, r5, #5
6000214c:	umull	lr, r1, r1, r5
60002150:	lsrs	r1, r1, #5
60002152:	rsb	r1, r1, r1, lsl #4
60002156:	sub.w	r1, r5, r1, lsl #2
6000215a:	bl	60002558 <___ZN5Print11printNumberEmhh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
6000215e:	ldr	r3, [r4, #0]
60002160:	movs	r2, #1
60002162:	ldr	r1, [pc, #616]	; (600023cc <CrashReportClass::printTo(Print&) const+0x578>)
60002164:	ldr	r3, [r3, #4]
60002166:	mov	r0, r4
60002168:	blx	r3
	// Print a string
	size_t print(const char s[])			{ return write(s); }
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
6000216a:	movs	r3, #0
6000216c:	rsb	r1, r5, r5, lsl #4
60002170:	movs	r2, #10
60002172:	mov	r0, r4
60002174:	sub.w	r1, r7, r1, lsl #2
60002178:	bl	60002558 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
6000217c:	mov	r0, r4
6000217e:	bl	60002550 <___ZN5Print7printlnEv_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60002182:	ldr	r3, [r4, #0]
60002184:	movs	r2, #36	; 0x24
60002186:	ldr	r1, [pc, #588]	; (600023d4 <CrashReportClass::printTo(Print&) const+0x580>)
60002188:	ldr	r3, [r3, #4]
6000218a:	mov	r0, r4
6000218c:	blx	r3
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
6000218e:	movs	r3, #0
60002190:	movs	r2, #16
60002192:	ldr	r1, [r6, #24]
60002194:	mov	r0, r4
60002196:	bl	60002558 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
6000219a:	mov	r0, r4
6000219c:	bl	60002550 <___ZN5Print7printlnEv_veneer>
    //p.print("  length: ");
    //p.println(info->len);
    //p.print("  IPSR: ");
    //p.println(info->ipsr, HEX);

    uint32_t _CFSR = info->cfsr;
600021a0:	ldr	r5, [r6, #8]
    if (_CFSR > 0) {
600021a2:	cmp	r5, #0
600021a4:	bne.n	60002238 <CrashReportClass::printTo(Print&) const+0x3e4>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
        p.println("\t(DIVBYZERO) Divide by zero");
      }
    }

    uint32_t _HFSR = info->hfsr;
600021a6:	ldr	r6, [pc, #560]	; (600023d8 <CrashReportClass::printTo(Print&) const+0x584>)
600021a8:	ldr	r5, [r6, #12]
    if (_HFSR > 0) {
600021aa:	cmp	r5, #0
600021ac:	bne.n	60002212 <CrashReportClass::printTo(Print&) const+0x3be>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
600021ae:	ldr	r3, [r4, #0]
600021b0:	movs	r2, #34	; 0x22
600021b2:	ldr	r1, [pc, #552]	; (600023dc <CrashReportClass::printTo(Print&) const+0x588>)
600021b4:	mov	r0, r4
600021b6:	ldr	r3, [r3, #4]
600021b8:	blx	r3
       p.println("\t(DEBUGEVT) Reserved for Debug");
      }
    }

    p.print("  Temperature inside the chip was ");
    p.print(info->temp);
600021ba:	ldr	r3, [pc, #540]	; (600023d8 <CrashReportClass::printTo(Print&) const+0x584>)
	size_t print(int64_t n, int base)		{ return (base == 10) ? print(n) : printNumber64(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	// Print a floating point (decimal) number
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
600021bc:	movs	r1, #2
600021be:	mov	r0, r4
600021c0:	vldr	s0, [r3, #32]
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600021c4:	ldr	r5, [pc, #536]	; (600023e0 <CrashReportClass::printTo(Print&) const+0x58c>)
	size_t print(int64_t n, int base)		{ return (base == 10) ? print(n) : printNumber64(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	// Print a floating point (decimal) number
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
600021c6:	vcvt.f64.f32	d0, s0
600021ca:	bl	60002538 <___ZN5Print10printFloatEdh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
600021ce:	ldr	r3, [r4, #0]
600021d0:	movs	r2, #5
600021d2:	ldr	r1, [pc, #528]	; (600023e4 <CrashReportClass::printTo(Print&) const+0x590>)
600021d4:	ldr	r3, [r3, #4]
600021d6:	mov	r0, r4
600021d8:	blx	r3
600021da:	ldr	r3, [r4, #0]
600021dc:	movs	r2, #29
600021de:	ldr	r1, [pc, #520]	; (600023e8 <CrashReportClass::printTo(Print&) const+0x594>)
600021e0:	ldr	r3, [r3, #4]
600021e2:	mov	r0, r4
600021e4:	blx	r3
    p.print(" ┬░C\n");

    // TODO: fault handler should read the CCM & PLL registers to log actual speed at crash
    p.print("  Startup CPU clock speed is ");
    p.print( F_CPU_ACTUAL/1000000);
600021e6:	ldr	r2, [pc, #516]	; (600023ec <CrashReportClass::printTo(Print&) const+0x598>)
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600021e8:	movs	r3, #0
600021ea:	mov	r0, r4
600021ec:	ldr	r1, [r2, #0]
600021ee:	movs	r2, #10
600021f0:	umull	r5, r1, r5, r1
600021f4:	lsrs	r1, r1, #18
600021f6:	bl	60002558 <___ZN5Print11printNumberEmhh_veneer>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
600021fa:	ldr	r3, [r4, #0]
600021fc:	movs	r2, #4
600021fe:	ldr	r1, [pc, #496]	; (600023f0 <CrashReportClass::printTo(Print&) const+0x59c>)
60002200:	ldr	r3, [r3, #4]
60002202:	mov	r0, r4
60002204:	blx	r3
60002206:	b.n	60001ed0 <CrashReportClass::printTo(Print&) const+0x7c>
  uint32_t SRSR = SRC_SRSR;
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
    // use SRC_GPR5 to distinguish cases.  See pages 1290 & 1294 in ref manual
    uint32_t gpr5 = SRC_GPR5;
    if (gpr5 == 0x0BAD00F1) {
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
60002208:	ldr	r1, [pc, #488]	; (600023f4 <CrashReportClass::printTo(Print&) const+0x5a0>)
6000220a:	mov	r0, r4
6000220c:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
60002210:	b.n	60001ef4 <CrashReportClass::printTo(Print&) const+0xa0>
	// Print a string
	size_t print(const String &s);
	// Print a single character
	size_t print(char c)				{ return write((uint8_t)c); }
	// Print a string
	size_t print(const char s[])			{ return write(s); }
60002212:	ldr	r1, [pc, #484]	; (600023f8 <CrashReportClass::printTo(Print&) const+0x5a4>)
60002214:	mov	r0, r4
60002216:	bl	60002560 <___ZN5Print5writeEPKc_veneer>
    }

    uint32_t _HFSR = info->hfsr;
    if (_HFSR > 0) {
      p.print("  HTSR: ");
      p.println(info->hfsr, HEX);
6000221a:	ldr	r1, [r6, #12]
6000221c:	movs	r2, #16
6000221e:	mov	r0, r4
60002220:	bl	60002508 <___ZN5Print7printlnEmi_veneer>
      //Memory Management Faults
      if (((_HFSR & (0x02)) >> 1) == 1) {
60002224:	lsls	r0, r5, #30
60002226:	bmi.w	6000246a <CrashReportClass::printTo(Print&) const+0x616>
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
6000222a:	lsls	r1, r5, #1
6000222c:	bpl.n	600021ae <CrashReportClass::printTo(Print&) const+0x35a>
       p.println("\t(FORCED) Forced Hard Fault");
6000222e:	ldr	r1, [pc, #460]	; (600023fc <CrashReportClass::printTo(Print&) const+0x5a8>)
60002230:	mov	r0, r4
60002232:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
60002236:	b.n	600021ae <CrashReportClass::printTo(Print&) const+0x35a>
60002238:	ldr	r1, [pc, #452]	; (60002400 <CrashReportClass::printTo(Print&) const+0x5ac>)
6000223a:	mov	r0, r4
6000223c:	bl	60002560 <___ZN5Print5writeEPKc_veneer>
    //p.println(info->ipsr, HEX);

    uint32_t _CFSR = info->cfsr;
    if (_CFSR > 0) {
      p.print("  CFSR: ");
      p.println(info->cfsr, HEX);
60002240:	ldr	r1, [r6, #8]
60002242:	movs	r2, #16
60002244:	mov	r0, r4
60002246:	bl	60002508 <___ZN5Print7printlnEmi_veneer>
      //Memory Management Faults
      if ((_CFSR & 1) == 1) {
6000224a:	lsls	r0, r5, #31
6000224c:	bmi.w	60002460 <CrashReportClass::printTo(Print&) const+0x60c>
        p.println("\t(IACCVIOL) Instruction Access Violation");
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60002250:	lsls	r1, r5, #30
60002252:	bmi.w	600023b0 <CrashReportClass::printTo(Print&) const+0x55c>
        p.println("\t(DACCVIOL) Data Access Violation");
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60002256:	lsls	r2, r5, #28
60002258:	bmi.w	600023a6 <CrashReportClass::printTo(Print&) const+0x552>
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
6000225c:	lsls	r3, r5, #27
6000225e:	bmi.w	6000239c <CrashReportClass::printTo(Print&) const+0x548>
        p.println("\t(MSTKERR) MemMange Fault on stacking");
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60002262:	lsls	r7, r5, #26
60002264:	bpl.n	6000226e <CrashReportClass::printTo(Print&) const+0x41a>
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60002266:	ldr	r1, [pc, #412]	; (60002404 <CrashReportClass::printTo(Print&) const+0x5b0>)
60002268:	mov	r0, r4
6000226a:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
      }
      if (((_CFSR & (0x80)) >> 7) == 1) {
6000226e:	lsls	r6, r5, #24
60002270:	bmi.n	60002332 <CrashReportClass::printTo(Print&) const+0x4de>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
        }
        p.println();
      }
      //Bus Fault Status Register BFSR
      if (((_CFSR & 0x100) >> 8) == 1) {
60002272:	lsls	r0, r5, #23
60002274:	bmi.n	60002328 <CrashReportClass::printTo(Print&) const+0x4d4>
        p.println("\t(IBUSERR) Instruction Bus Error");
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60002276:	lsls	r1, r5, #22
60002278:	bmi.n	6000231e <CrashReportClass::printTo(Print&) const+0x4ca>
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
6000227a:	lsls	r2, r5, #21
6000227c:	bmi.n	60002314 <CrashReportClass::printTo(Print&) const+0x4c0>
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
6000227e:	lsls	r3, r5, #20
60002280:	bmi.n	6000230a <CrashReportClass::printTo(Print&) const+0x4b6>
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60002282:	lsls	r7, r5, #19
60002284:	bmi.n	600022ce <CrashReportClass::printTo(Print&) const+0x47a>
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60002286:	lsls	r6, r5, #18
60002288:	bpl.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
6000228a:	ldr	r1, [pc, #380]	; (60002408 <CrashReportClass::printTo(Print&) const+0x5b4>)
6000228c:	mov	r0, r4
6000228e:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
      }
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60002292:	lsls	r0, r5, #16
60002294:	bpl.n	600022aa <CrashReportClass::printTo(Print&) const+0x456>
60002296:	ldr	r1, [pc, #372]	; (6000240c <CrashReportClass::printTo(Print&) const+0x5b8>)
60002298:	mov	r0, r4
6000229a:	bl	60002560 <___ZN5Print5writeEPKc_veneer>
        p.print("\t(BFARVALID) Accessed Address: 0x");
        p.println(info->bfar, HEX);
6000229e:	ldr	r3, [pc, #312]	; (600023d8 <CrashReportClass::printTo(Print&) const+0x584>)
600022a0:	movs	r2, #16
600022a2:	mov	r0, r4
600022a4:	ldr	r1, [r3, #20]
600022a6:	bl	60002508 <___ZN5Print7printlnEmi_veneer>
      }
      //Usage Fault Status Register UFSR
      if (((_CFSR & 0x10000) >> 16) == 1) {
600022aa:	lsls	r1, r5, #15
600022ac:	bmi.n	60002300 <CrashReportClass::printTo(Print&) const+0x4ac>
        p.println("\t(UNDEFINSTR) Undefined instruction");
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
600022ae:	lsls	r2, r5, #14
600022b0:	bmi.n	600022f6 <CrashReportClass::printTo(Print&) const+0x4a2>
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
600022b2:	lsls	r3, r5, #13
600022b4:	bmi.n	600022ec <CrashReportClass::printTo(Print&) const+0x498>
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
600022b6:	lsls	r7, r5, #12
600022b8:	bmi.n	600022e2 <CrashReportClass::printTo(Print&) const+0x48e>
        p.println("\t(NOCP) No Coprocessor");
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
600022ba:	lsls	r6, r5, #7
600022bc:	bmi.n	600022d8 <CrashReportClass::printTo(Print&) const+0x484>
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
600022be:	lsls	r5, r5, #6
600022c0:	bpl.w	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
        p.println("\t(DIVBYZERO) Divide by zero");
600022c4:	ldr	r1, [pc, #328]	; (60002410 <CrashReportClass::printTo(Print&) const+0x5bc>)
600022c6:	mov	r0, r4
600022c8:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
600022cc:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
600022ce:	ldr	r1, [pc, #324]	; (60002414 <CrashReportClass::printTo(Print&) const+0x5c0>)
600022d0:	mov	r0, r4
600022d2:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
600022d6:	b.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
        p.println("\t(NOCP) No Coprocessor");
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
600022d8:	ldr	r1, [pc, #316]	; (60002418 <CrashReportClass::printTo(Print&) const+0x5c4>)
600022da:	mov	r0, r4
600022dc:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
600022e0:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
        p.println("\t(NOCP) No Coprocessor");
600022e2:	ldr	r1, [pc, #312]	; (6000241c <CrashReportClass::printTo(Print&) const+0x5c8>)
600022e4:	mov	r0, r4
600022e6:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
600022ea:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
      if (((_CFSR & 0x10000) >> 16) == 1) {
        p.println("\t(UNDEFINSTR) Undefined instruction");
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
600022ec:	ldr	r1, [pc, #304]	; (60002420 <CrashReportClass::printTo(Print&) const+0x5cc>)
600022ee:	mov	r0, r4
600022f0:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
600022f4:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
      }
      //Usage Fault Status Register UFSR
      if (((_CFSR & 0x10000) >> 16) == 1) {
        p.println("\t(UNDEFINSTR) Undefined instruction");
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
600022f6:	ldr	r1, [pc, #300]	; (60002424 <CrashReportClass::printTo(Print&) const+0x5d0>)
600022f8:	mov	r0, r4
600022fa:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
600022fe:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
        p.print("\t(BFARVALID) Accessed Address: 0x");
        p.println(info->bfar, HEX);
      }
      //Usage Fault Status Register UFSR
      if (((_CFSR & 0x10000) >> 16) == 1) {
        p.println("\t(UNDEFINSTR) Undefined instruction");
60002300:	ldr	r1, [pc, #292]	; (60002428 <CrashReportClass::printTo(Print&) const+0x5d4>)
60002302:	mov	r0, r4
60002304:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
60002308:	b.n	600021a6 <CrashReportClass::printTo(Print&) const+0x352>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
6000230a:	ldr	r1, [pc, #288]	; (6000242c <CrashReportClass::printTo(Print&) const+0x5d8>)
6000230c:	mov	r0, r4
6000230e:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
60002312:	b.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
      if (((_CFSR & 0x100) >> 8) == 1) {
        p.println("\t(IBUSERR) Instruction Bus Error");
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
60002314:	ldr	r1, [pc, #280]	; (60002430 <CrashReportClass::printTo(Print&) const+0x5dc>)
60002316:	mov	r0, r4
60002318:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
6000231c:	b.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
      }
      //Bus Fault Status Register BFSR
      if (((_CFSR & 0x100) >> 8) == 1) {
        p.println("\t(IBUSERR) Instruction Bus Error");
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
6000231e:	ldr	r1, [pc, #276]	; (60002434 <CrashReportClass::printTo(Print&) const+0x5e0>)
60002320:	mov	r0, r4
60002322:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
60002326:	b.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
        }
        p.println();
      }
      //Bus Fault Status Register BFSR
      if (((_CFSR & 0x100) >> 8) == 1) {
        p.println("\t(IBUSERR) Instruction Bus Error");
60002328:	ldr	r1, [pc, #268]	; (60002438 <CrashReportClass::printTo(Print&) const+0x5e4>)
6000232a:	mov	r0, r4
6000232c:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
60002330:	b.n	60002292 <CrashReportClass::printTo(Print&) const+0x43e>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
      }
      if (((_CFSR & (0x80)) >> 7) == 1) {
        p.print("\t(MMARVALID) Accessed Address: 0x");
        p.print(info->mmfar, HEX);
60002332:	ldr	r6, [pc, #164]	; (600023d8 <CrashReportClass::printTo(Print&) const+0x584>)
60002334:	mov	r0, r4
60002336:	ldr	r1, [pc, #260]	; (6000243c <CrashReportClass::printTo(Print&) const+0x5e8>)
60002338:	bl	60002560 <___ZN5Print5writeEPKc_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
6000233c:	movs	r2, #16
6000233e:	ldr	r1, [r6, #16]
60002340:	movs	r3, #0
60002342:	mov	r0, r4
60002344:	bl	60002558 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60002348:	ldr	r2, [r6, #16]
6000234a:	cmp	r2, #31
6000234c:	bls.n	6000236a <CrashReportClass::printTo(Print&) const+0x516>
          p.print(info->ret, HEX);
          p.print("\" for filename & line number.");
            // TODO: in some perfect future, maybe we'll build part of the ELF debug_line
            // section (maybe just the .ino files) into CrashReport and be able to report
            // the actual filename and line number.  Wouldn't that be awesome?!
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
6000234e:	ldr	r3, [pc, #240]	; (60002440 <CrashReportClass::printTo(Print&) const+0x5ec>)
60002350:	cmp	r2, r3
60002352:	bcc.n	60002362 <CrashReportClass::printTo(Print&) const+0x50e>
60002354:	adds	r3, #32
60002356:	cmp	r2, r3
60002358:	bcs.n	60002362 <CrashReportClass::printTo(Print&) const+0x50e>
	// Print a string
	size_t print(const String &s);
	// Print a single character
	size_t print(char c)				{ return write((uint8_t)c); }
	// Print a string
	size_t print(const char s[])			{ return write(s); }
6000235a:	ldr	r1, [pc, #232]	; (60002444 <CrashReportClass::printTo(Print&) const+0x5f0>)
6000235c:	mov	r0, r4
6000235e:	bl	60002560 <___ZN5Print5writeEPKc_veneer>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
        }
        p.println();
60002362:	mov	r0, r4
60002364:	bl	60002550 <___ZN5Print7printlnEv_veneer>
60002368:	b.n	60002272 <CrashReportClass::printTo(Print&) const+0x41e>
6000236a:	ldr	r1, [pc, #220]	; (60002448 <CrashReportClass::printTo(Print&) const+0x5f4>)
6000236c:	mov	r0, r4
6000236e:	bl	60002560 <___ZN5Print5writeEPKc_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60002372:	movs	r3, #0
60002374:	movs	r2, #16
60002376:	ldr	r1, [r6, #24]
60002378:	mov	r0, r4
6000237a:	bl	60002558 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string
	size_t print(const String &s);
	// Print a single character
	size_t print(char c)				{ return write((uint8_t)c); }
	// Print a string
	size_t print(const char s[])			{ return write(s); }
6000237e:	ldr	r1, [pc, #204]	; (6000244c <CrashReportClass::printTo(Print&) const+0x5f8>)
60002380:	mov	r0, r4
60002382:	bl	60002560 <___ZN5Print5writeEPKc_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60002386:	ldr	r1, [r6, #24]
60002388:	movs	r3, #0
6000238a:	movs	r2, #16
6000238c:	mov	r0, r4
6000238e:	bl	60002558 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string
	size_t print(const String &s);
	// Print a single character
	size_t print(char c)				{ return write((uint8_t)c); }
	// Print a string
	size_t print(const char s[])			{ return write(s); }
60002392:	ldr	r1, [pc, #188]	; (60002450 <CrashReportClass::printTo(Print&) const+0x5fc>)
60002394:	mov	r0, r4
60002396:	bl	60002560 <___ZN5Print5writeEPKc_veneer>
6000239a:	b.n	60002362 <CrashReportClass::printTo(Print&) const+0x50e>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
        p.println("\t(DACCVIOL) Data Access Violation");
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
        p.println("\t(MSTKERR) MemMange Fault on stacking");
6000239c:	ldr	r1, [pc, #180]	; (60002454 <CrashReportClass::printTo(Print&) const+0x600>)
6000239e:	mov	r0, r4
600023a0:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
600023a4:	b.n	6000226e <CrashReportClass::printTo(Print&) const+0x41a>
      if ((_CFSR & 1) == 1) {
        p.println("\t(IACCVIOL) Instruction Access Violation");
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
        p.println("\t(DACCVIOL) Data Access Violation");
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
600023a6:	ldr	r1, [pc, #176]	; (60002458 <CrashReportClass::printTo(Print&) const+0x604>)
600023a8:	mov	r0, r4
600023aa:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
600023ae:	b.n	6000226e <CrashReportClass::printTo(Print&) const+0x41a>
      p.println(info->cfsr, HEX);
      //Memory Management Faults
      if ((_CFSR & 1) == 1) {
        p.println("\t(IACCVIOL) Instruction Access Violation");
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
        p.println("\t(DACCVIOL) Data Access Violation");
600023b0:	ldr	r1, [pc, #168]	; (6000245c <CrashReportClass::printTo(Print&) const+0x608>)
600023b2:	mov	r0, r4
600023b4:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
600023b8:	b.n	6000226e <CrashReportClass::printTo(Print&) const+0x41a>
600023ba:	nop
600023bc:	.word	0x20000dd4
600023c0:	.word	0x91a2b3c5
600023c4:	.word	0x20000de4
600023c8:	.word	0xaaaaaaab
600023cc:	.word	0x20000e0c
600023d0:	.word	0x88888889
600023d4:	.word	0x20000e10
600023d8:	.word	0x2027ff80
600023dc:	.word	0x20001298
600023e0:	.word	0x431bde83
600023e4:	.word	0x200012bc
600023e8:	.word	0x200012c4
600023ec:	.word	0x20001bc4
600023f0:	.word	0x200012e4
600023f4:	.word	0x2000144c
600023f8:	.word	0x20001248
600023fc:	.word	0x2000127c
60002400:	.word	0x20000e38
60002404:	.word	0x20000ee8
60002408:	.word	0x2000110c
6000240c:	.word	0x20001140
60002410:	.word	0x2000122c
60002414:	.word	0x200010d8
60002418:	.word	0x20001200
6000241c:	.word	0x200011e8
60002420:	.word	0x200011bc
60002424:	.word	0x20001188
60002428:	.word	0x20001164
6000242c:	.word	0x20001098
60002430:	.word	0x20001050
60002434:	.word	0x20001020
60002438:	.word	0x20000ffc
6000243c:	.word	0x20000f14
60002440:	.word	0x20022580
60002444:	.word	0x20000fb8
60002448:	.word	0x20000f38
6000244c:	.word	0x20000f58
60002450:	.word	0x20000f98
60002454:	.word	0x20000ec0
60002458:	.word	0x20000e94
6000245c:	.word	0x20000e70
    if (_CFSR > 0) {
      p.print("  CFSR: ");
      p.println(info->cfsr, HEX);
      //Memory Management Faults
      if ((_CFSR & 1) == 1) {
        p.println("\t(IACCVIOL) Instruction Access Violation");
60002460:	ldr	r1, [pc, #16]	; (60002474 <CrashReportClass::printTo(Print&) const+0x620>)
60002462:	mov	r0, r4
60002464:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
60002468:	b.n	6000226e <CrashReportClass::printTo(Print&) const+0x41a>
    if (_HFSR > 0) {
      p.print("  HTSR: ");
      p.println(info->hfsr, HEX);
      //Memory Management Faults
      if (((_HFSR & (0x02)) >> 1) == 1) {
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
6000246a:	ldr	r1, [pc, #12]	; (60002478 <CrashReportClass::printTo(Print&) const+0x624>)
6000246c:	mov	r0, r4
6000246e:	bl	60002540 <___ZN5Print7printlnEPKc_veneer>
60002472:	b.n	600021ae <CrashReportClass::printTo(Print&) const+0x35a>
60002474:	.word	0x20000e44
60002478:	.word	0x20001254

6000247c <CrashReportClass::clear()>:

FLASHMEM
void CrashReportClass::clear()
{
  struct arm_fault_info_struct *info = (struct arm_fault_info_struct *)0x2027FF80;
  cleardata(info);
6000247c:	b.n	60001dcc <cleardata(arm_fault_info_struct*) [clone .constprop.1]>
6000247e:	nop

60002480 <CrashReportClass::operator bool()>:
}

FLASHMEM
CrashReportClass::operator bool()
{
60002480:	push	{r3, lr}
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60002482:	ldr	r3, [pc, #24]	; (6000249c <CrashReportClass::operator bool()+0x1c>)
60002484:	ldr	r3, [r3, #0]
60002486:	cmp	r3, #11
60002488:	beq.n	6000248e <CrashReportClass::operator bool()+0xe>
FLASHMEM
CrashReportClass::operator bool()
{
	struct arm_fault_info_struct *info = (struct arm_fault_info_struct *)0x2027FF80;
	if (isvalid(info)) return true;
	return false;
6000248a:	movs	r0, #0
}
6000248c:	pop	{r3, pc}
6000248e:	bl	60001e10 <isvalid(arm_fault_info_struct const*) [clone .part.0] [clone .constprop.2]>

FLASHMEM
CrashReportClass::operator bool()
{
	struct arm_fault_info_struct *info = (struct arm_fault_info_struct *)0x2027FF80;
	if (isvalid(info)) return true;
60002492:	adds	r0, #0
60002494:	it	ne
60002496:	movne	r0, #1
60002498:	pop	{r3, pc}
6000249a:	nop
6000249c:	.word	0x2027ff80

600024a0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600024a0:	ldr	r3, [pc, #68]	; (600024e8 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600024a2:	ldr	r1, [pc, #72]	; (600024ec <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600024a4:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600024a6:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600024a8:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600024ac:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600024ae:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600024b0:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600024b4:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600024b6:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600024b8:	orr.w	r0, r0, #768	; 0x300
600024bc:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600024be:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600024c0:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600024c2:	ldr	r3, [r2, #72]	; 0x48
600024c4:	lsls	r3, r3, #24
600024c6:	bmi.n	600024c2 <analog_init+0x22>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600024c8:	ldr	r3, [pc, #36]	; (600024f0 <analog_init+0x50>)
600024ca:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600024ce:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600024d0:	mov	r2, r3
	while (ADC1_GC & ADC_GC_CAL) {
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600024d2:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600024d4:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600024d6:	ldr	r3, [r2, #72]	; 0x48
600024d8:	ands.w	r3, r3, #128	; 0x80
600024dc:	bne.n	600024d6 <analog_init+0x36>
		//yield();
	}
	calibrating = 0;
600024de:	ldr	r2, [pc, #20]	; (600024f4 <analog_init+0x54>)
600024e0:	strb	r3, [r2, #0]
}
600024e2:	pop	{r4, r5}
600024e4:	bx	lr
600024e6:	nop
600024e8:	.word	0x400fc000
600024ec:	.word	0x400c4000
600024f0:	.word	0x400c8000
600024f4:	.word	0x200224b6

600024f8 <_init>:
600024f8:	push	{r3, r4, r5, r6, r7, lr}
600024fa:	nop
600024fc:	pop	{r3, r4, r5, r6, r7}
600024fe:	pop	{r3}
60002500:	mov	lr, r3
60002502:	bx	lr
60002504:	movs	r0, r0
	...

60002508 <___ZN5Print7printlnEmi_veneer>:
60002508:	ldr.w	pc, [pc]	; 6000250c <___ZN5Print7printlnEmi_veneer+0x4>
6000250c:	.word	0x0000890d

60002510 <____libc_init_array_veneer>:
60002510:	ldr.w	pc, [pc]	; 60002514 <____libc_init_array_veneer+0x4>
60002514:	.word	0x00008fd9

60002518 <__main_veneer>:
60002518:	ldr.w	pc, [pc]	; 6000251c <__main_veneer+0x4>
6000251c:	.word	0x0000894d

60002520 <__set_arm_clock_veneer>:
60002520:	ldr.w	pc, [pc]	; 60002524 <__set_arm_clock_veneer+0x4>
60002524:	.word	0x00007245

60002528 <__sm_set_pool_veneer>:
60002528:	ldr.w	pc, [pc]	; 6000252c <__sm_set_pool_veneer+0x4>
6000252c:	.word	0x000081dd

60002530 <___ZN5Print5printEl_veneer>:
60002530:	ldr.w	pc, [pc]	; 60002534 <___ZN5Print5printEl_veneer+0x4>
60002534:	.word	0x00008ab9

60002538 <___ZN5Print10printFloatEdh_veneer>:
60002538:	ldr.w	pc, [pc]	; 6000253c <___ZN5Print10printFloatEdh_veneer+0x4>
6000253c:	.word	0x00008ad1

60002540 <___ZN5Print7printlnEPKc_veneer>:
60002540:	ldr.w	pc, [pc]	; 60002544 <___ZN5Print7printlnEPKc_veneer+0x4>
60002544:	.word	0x000088e5

60002548 <__delay_veneer>:
60002548:	ldr.w	pc, [pc]	; 6000254c <__delay_veneer+0x4>
6000254c:	.word	0x00007e1d

60002550 <___ZN5Print7printlnEv_veneer>:
60002550:	ldr.w	pc, [pc]	; 60002554 <___ZN5Print7printlnEv_veneer+0x4>
60002554:	.word	0x000089e5

60002558 <___ZN5Print11printNumberEmhh_veneer>:
60002558:	ldr.w	pc, [pc]	; 6000255c <___ZN5Print11printNumberEmhh_veneer+0x4>
6000255c:	.word	0x00008a39

60002560 <___ZN5Print5writeEPKc_veneer>:
60002560:	ldr.w	pc, [pc]	; 60002564 <___ZN5Print5writeEPKc_veneer+0x4>
60002564:	.word	0x00002005

60002568 <__memset_veneer>:
60002568:	ldr.w	pc, [pc]	; 6000256c <__memset_veneer+0x4>
6000256c:	.word	0x0000980d

60002570 <__pwm_init_veneer>:
60002570:	ldr.w	pc, [pc]	; 60002574 <__pwm_init_veneer+0x4>
60002574:	.word	0x000083a9

60002578 <__usb_init_serialnumber_veneer>:
60002578:	ldr.w	pc, [pc]	; 6000257c <__usb_init_serialnumber_veneer+0x4>
6000257c:	.word	0x00008661

60002580 <__init_array_start>:
60002580:	.word	0x00000045
60002584:	.word	0x00000e8d
60002588:	.word	0x000019e9

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      26:	.short	0xb933
      28:	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x17>)
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1b>)
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	movs	r3, #1
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      34:	strb	r3, [r4, #0]
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
      36:	pop	{r4, pc}
      38:	ldr	r0, [r1, r1]
      3a:	movs	r0, #0
      3c:	movs	r0, r0
      3e:	movs	r0, r0
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
      40:	.word	0x60002698

00000044 <frame_dummy>:

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	.short	0xb510
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	cbnz	r3, 5a <frame_dummy+0x16>
      58:	.word	0x4b07bd10
      5c:	cmp	r3, #0
      5e:	beq.n	58 <frame_dummy+0x14>
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	nop
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      68:	movs	r0, r0
      6a:	movs	r0, r0
			yield(); // TODO: what happens if yield-called code uses analogRead()
      6c:	.word	0x2000584c
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      70:	movs	r6, #152	; 0x98
      72:	str	r0, [r0, #0]
      74:	movs	r6, #192	; 0xc0
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC2_R0;
      76:	movs	r0, #0
      78:	.word	0x00000000

0000007c <getDataCount()>:
  volatile static int queue_busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile int head=0;
  volatile int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
      7c:	ldr	r3, [pc, #20]	; (94 <getDataCount()+0x18>)
      7e:	ldr	r2, [pc, #24]	; (98 <getDataCount()+0x1c>)
      80:	ldr	r3, [r3, #0]
      82:	ldr	r0, [r2, #0]
      84:	subs	r3, r3, r0
      86:	.short	0xd401
      88:	uxth	r0, r3
      8a:	bx	lr
      8c:	add.w	r0, r3, #192	; 0xc0
      90:	uxth	r0, r0
      92:	.short	0x4770
      94:	movs	r4, #136	; 0x88
      96:	.short	0x2002
      98:	subs	r0, r4, #3
      9a:	movs	r0, #2

0000009c <queue_isBusy()>:

  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
      9c:	ldr	r3, [pc, #4]	; (a4 <queue_isBusy()+0x8>)
      9e:	.short	0x6818
      a0:	bx	lr
      a2:	nop
      a4:	strb	r0, [r6, #9]
      a6:	.short	0x2000

000000a8 <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
      a8:	push	{r4, r5, r6, r7}
    if ( (tail+1)%MAXBUF == head ) return 0;
      aa:	ldr	r4, [pc, #108]	; (118 <pushData(unsigned long*)+0x70>)
      ac:	.word	0x68234a1b
      b0:	ldr	r1, [pc, #108]	; (120 <pushData(unsigned long*)+0x78>)
      b2:	.short	0x3301
      b4:	ldr	r5, [r1, #0]
      b6:	.short	0xfb82
      b8:	movs	r1, #3
      ba:	.short	0x17da
      bc:	rsb	r2, r2, r1, asr #5
      c0:	.word	0x0242eb02
      c4:	sub.w	r3, r3, r2, lsl #6
      c8:	.word	0xd02242ab
    //while(busy); 
    queue_busy=1;
      cc:	ldr	r7, [pc, #84]	; (124 <pushData(unsigned long*)+0x7c>)
      ce:	movs	r2, #1
      d0:	.word	0x23001f01
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
      d4:	ldr	r6, [pc, #80]	; (128 <pushData(unsigned long*)+0x80>)

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    if ( (tail+1)%MAXBUF == head ) return 0;
    //while(busy); 
    queue_busy=1;
      d6:	.short	0x603a
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
      d8:	ldr	r2, [r4, #0]
      da:	ldr.w	r0, [r1, #4]!
      de:	.short	0xeb03
      e0:	asrs	r2, r0, #11
      e2:	adds	r3, #1
      e4:	ldr	r5, [pc, #48]	; (118 <pushData(unsigned long*)+0x70>)
      e6:	.short	0x2b80
      e8:	str.w	r0, [r6, r2, lsl #2]
      ec:	.word	0x682ad1f4
    tail = (tail+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
      f0:	movs	r0, #1
  {
    if ( (tail+1)%MAXBUF == head ) return 0;
    //while(busy); 
    queue_busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    tail = (tail+1)%MAXBUF;
      f2:	.short	0x4b0a
    queue_busy=0;
      f4:	movs	r4, #0
  {
    if ( (tail+1)%MAXBUF == head ) return 0;
    //while(busy); 
    queue_busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    tail = (tail+1)%MAXBUF;
      f6:	.short	0x4402
      f8:	smull	r3, r1, r3, r2
      fc:	.word	0xebc317d3
     100:	asrs	r1, r4, #13
     102:	.short	0xeb03
     104:	lsls	r3, r0, #13
     106:	.short	0xeba2
     108:	asrs	r3, r0, #14
     10a:	.short	0x602b
    queue_busy=0;
     10c:	str	r4, [r7, #0]
    return 1; // signal success.
  }
     10e:	.short	0xbcf0
     110:	bx	lr

  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    if ( (tail+1)%MAXBUF == head ) return 0;
     112:	.short	0x2000
    queue_busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    tail = (tail+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
  }
     114:	pop	{r4, r5, r6, r7}
     116:	.short	0x4770
     118:	movs	r4, #136	; 0x88
     11a:	.short	0x2002
     11c:	add	r2, sp, #684	; 0x2ac
     11e:	.short	0x2aaa
     120:	subs	r0, r4, #3
     122:	.short	0x2002
     124:	strb	r0, [r6, #9]
     126:	movs	r0, #0
     128:	.word	0x20009274

0000012c <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
     12c:	push	{r4, r5, r6}
    if ( head==tail ) return 0;
     12e:	.short	0x4b16
     130:	ldr	r4, [pc, #88]	; (18c <pullData(unsigned long*)+0x60>)
     132:	.short	0x6822
     134:	ldr	r3, [r3, #0]
     136:	.short	0x429a
     138:	.word	0x1f01d022
    //while(busy); 
    queue_busy=1;
     13c:	ldr	r6, [pc, #80]	; (190 <pullData(unsigned long*)+0x64>)
     13e:	.short	0x2201
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
     140:	movs	r3, #0
     142:	.short	0x4814
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    //while(busy); 
    queue_busy=1;
     144:	str	r2, [r6, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
     146:	.short	0x6822
     148:	ldr	r5, [pc, #64]	; (18c <pullData(unsigned long*)+0x60>)
     14a:	.short	0xeb03
     14c:	asrs	r2, r0, #11
     14e:	.short	0x3301
     150:	ldr.w	r2, [r0, r2, lsl #2]
     154:	cmp	r3, #128	; 0x80
     156:	str.w	r2, [r1, #4]!
     15a:	bne.n	146 <pullData(unsigned long*)+0x1a>
    head = (head+1)%MAXBUF;
     15c:	ldr	r2, [r5, #0]
    queue_busy=0;
    return 1;
     15e:	movs	r0, #1
  {
    if ( head==tail ) return 0;
    //while(busy); 
    queue_busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    head = (head+1)%MAXBUF;
     160:	.word	0x24004b0d
     164:	add	r2, r0
     166:	.short	0xfb83
     168:	adds	r1, #2
     16a:	.short	0x17d3
     16c:	rsb	r3, r3, r1, asr #5
     170:	add.w	r3, r3, r3, lsl #1
     174:	.word	0x1383eba2
     178:	str	r3, [r5, #0]
    queue_busy=0;
     17a:	str	r4, [r6, #0]
    return 1;
  }
     17c:	pop	{r4, r5, r6}
     17e:	bx	lr
    return 1; // signal success.
  }
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
     180:	movs	r0, #0
    queue_busy=1;
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    head = (head+1)%MAXBUF;
    queue_busy=0;
    return 1;
  }
     182:	pop	{r4, r5, r6}
     184:	bx	lr
     186:	nop
     188:	.word	0x20022488
     18c:	subs	r0, r4, #3
     18e:	.short	0x2002
     190:	strb	r0, [r6, #9]
     192:	.short	0x2000
     194:	str	r2, [sp, #464]	; 0x1d0
     196:	.short	0x2000
     198:	add	r2, sp, #684	; 0x2ac
     19a:	.short	0x2aaa

0000019c <menuGetInt16(short*)>:
#include "menu.h"
#include "mRTC.h"
#include "mAcq.h"

static int menuGetInt16(int16_t *val)
{ char buffer[40];
     19c:	push	{r4, lr}
     19e:	mov	r4, r0
     1a0:	.word	0xf006b08c
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     1a4:	vsub.i16	d18, d15, d0
  while(!Serial.available()) continue;
     1a8:	.word	0x210dd0fb
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
     1ac:	add	r2, sp, #8
     1ae:	.short	0x2328
     1b0:	ldr	r0, [pc, #52]	; (1e8 <menuGetInt16(short*)+0x4c>)
     1b2:	.short	0xf008
     1b4:	umlal	sl, fp, fp, ip
  buffer[count]=0;
     1b8:	movs	r2, #0
     1ba:	add	r3, r0
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
     1bc:	add	r0, sp, #8
     1be:	strb.w	r2, [r3, #-40]
     1c2:	bl	9e40 <strlen>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     1c6:	mov	r1, r0
     1c8:	add	r0, sp, #8
     1ca:	bl	7138 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     1ce:	.short	0x4806
     1d0:	bl	89e4 <Print::println()>
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
     1d4:	add	r0, sp, #8
     1d6:	add	r2, sp, #4
     1d8:	ldr	r1, [pc, #16]	; (1ec <menuGetInt16(short*)+0x50>)
     1da:	.short	0xf009
     1dc:	ldc2	11, cr9, [r1, #4]
  return 1;
}
     1e0:	.word	0x80232001
     1e4:	add	sp, #48	; 0x30
     1e6:	pop	{r4, pc}
     1e8:	.word	0x20001bc8
     1ec:	lsrs	r4, r0, #12
     1ee:	movs	r0, #0

000001f0 <menuGetInt32(long*)>:

static int menuGetInt32(int32_t *val)
{ char buffer[40];
     1f0:	push	{r4, lr}
     1f2:	mov	r4, r0
     1f4:	sub	sp, #48	; 0x30
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     1f6:	bl	7064 <usb_serial_available>
  while(!Serial.available()) continue;
     1fa:	cmp	r0, #0
     1fc:	beq.n	1f6 <menuGetInt32(long*)+0x6>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
     1fe:	movs	r1, #13
     200:	add	r2, sp, #8
     202:	movs	r3, #40	; 0x28
     204:	ldr	r0, [pc, #52]	; (23c <menuGetInt32(long*)+0x4c>)
     206:	.short	0xf008
     208:	smlal	sl, fp, r1, ip
  buffer[count]=0;
     20c:	.word	0x44032200
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
     210:	add	r0, sp, #8
     212:	.short	0xf803
     214:	cmp	r4, #40	; 0x28
     216:	bl	9e40 <strlen>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     21a:	.short	0x4601
     21c:	add	r0, sp, #8
     21e:	.short	0xf006
     220:	vmlal.u8	q2, d11, d6
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     224:	.word	0xfbdef008
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
     228:	add	r0, sp, #8
     22a:	.short	0xaa01
     22c:	ldr	r1, [pc, #16]	; (240 <menuGetInt32(long*)+0x50>)
     22e:	.short	0xf009
     230:	stc2l	11, cr9, [r7, #-4]!
  return 1;
}
     234:	movs	r0, #1
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
  buffer[count]=0;
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
     236:	.short	0x6023
  return 1;
}
     238:	add	sp, #48	; 0x30
     23a:	.short	0xbd10
     23c:	subs	r0, r1, r7
     23e:	movs	r0, #0
     240:	.word	0x20000b04

00000244 <menuGet3Int(int*, int*, int*)>:

static int menuGet3Int(int *val1, int *val2, int *val3)
{ char buffer[40];
     244:	push	{r4, r5, r6, lr}
     246:	.short	0x4604
     248:	sub	sp, #64	; 0x40
     24a:	.short	0x460d
     24c:	mov	r6, r2
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     24e:	.short	0xf006
     250:	vsub.i8	d2, d9, d0
  while(!Serial.available()) continue;
     254:	.word	0x210dd0fb
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
     258:	add	r2, sp, #24
     25a:	.short	0x2328
     25c:	ldr	r0, [pc, #60]	; (29c <menuGet3Int(int*, int*, int*)+0x58>)
     25e:	.short	0xf008
     260:			; <UNDEFINED> instruction: 0xfb95ab10
  buffer[count]=0;
     264:	.word	0x44032200
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
     268:	add	r0, sp, #24
     26a:	strb.w	r2, [r3, #-40]
     26e:	.short	0xf009
     270:	stc2l	6, cr4, [r7, #4]!
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     274:	.word	0xf006a806
     278:	vsub.i16	d20, d15, d8
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     27c:	bl	89e4 <Print::println()>
  Serial.println(buffer);
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
     280:	.word	0x0317f10d
     284:	mov	r2, r4
     286:	.short	0x4906
     288:	str	r3, [sp, #4]
     28a:	.short	0xf10d
     28c:	lsls	r6, r2, #12
     28e:	.short	0xa806
     290:	str	r6, [sp, #8]
     292:	.short	0x9500
     294:	bl	9d00 <sscanf>
}
     298:	add	sp, #64	; 0x40
     29a:	.short	0xbd70
     29c:	subs	r0, r1, r7
     29e:	.short	0x2000
     2a0:	lsrs	r4, r7, #11
     2a2:	.short	0x2000

000002a4 <menu1()>:

void menu1(void)
{   // have ':'
     2a4:	push	{r3, lr}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     2a6:	.short	0xf006
     2a8:	cdp2	8, 13, cr2, cr13, cr0, {0}
    while(!Serial.available()) ;
     2ac:	.word	0xe8bdd0fb
    char ch;
    ch=Serial.read();
    if(ch=='x') return;
}
     2b0:	ands	r0, r1
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     2b2:	.short	0xf006
     2b4:	ittet	ne
     2b6:	nopne

000002b8 <menu2()>:

void menu2(void)
{   // have '?'
     2b8:	.word	0xb088b570
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     2bc:	bl	7064 <usb_serial_available>	; unpredictable branch in IT block

    datetime_t t;

    while(!Serial.available()) ;
     2c0:	.word	0xd0fb2800
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     2c4:	bl	70ec <usb_serial_getchar>	; unpredictable branch in IT block

    char ch;
    ch=Serial.read();
     2c8:	.word	0x2870b2c0
    if(ch=='p') // get parameters
     2cc:	beq.n	2fc <menu2()+0x44>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
      Serial.print("shift (s) = "); Serial.println(shift);
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    if(ch=='d') // get date
     2ce:	.short	0x2864
     2d0:	beq.n	3b4 <menu2()+0xfc>
    {
      rtc_get_datetime(&t);
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    }
    else if(ch=='t') // get time
     2d2:	.short	0x2874
     2d4:	beq.n	3d2 <menu2()+0x11a>
    {
      rtc_get_datetime(&t);
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    }
    else if(ch=='a')
     2d6:	cmpne	r0, #97	; 0x61
     2d8:	.word	0x808af000
    {
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    }
    else if(ch=='f')
     2dc:	cmp	r0, #102	; 0x66
     2de:	.short	0xd05c
    {
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    }
    else if(ch=='s')
     2e0:	cmp	r0, #115	; 0x73
     2e2:	.short	0xf000
     2e4:	strh	r4, [r2, #4]
    {
      Serial.print("shift (s) = "); Serial.println(shift);
    }
    else if(ch=='c')
     2e6:	.short	0x2863
     2e8:	bne.n	2f0 <menu2()+0x38>
     2ea:	beq.n	37e <menu2()+0xc6>	; unpredictable branch in IT block

     2ec:	blne	70ec <usb_serial_getchar>
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     2f0:	bl	7064 <usb_serial_available>
    {
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    while(Serial.available()) ch=Serial.read();
     2f4:	cmp	r0, #0
     2f6:	bne.n	2ec <menu2()+0x34>

}
     2f8:	add	sp, #32
     2fa:	pop	{r4, r5, r6, pc}
    while(!Serial.available()) ;
    char ch;
    ch=Serial.read();
    if(ch=='p') // get parameters
    {
      rtc_get_datetime(&t);
     2fc:	.word	0xf000a806
     300:	uxtab	r9, r7, sp, ror #8
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
                   t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw);
     304:	.word	0xf99d001d
     308:	asrs	r3, r3, #32
     30a:	.short	0xf99d
     30c:	str	r4, [r3, #0]
     30e:	.short	0xf99d
     310:	str	r7, [r3, r0]
     312:	.short	0xf99d
     314:	ands	r6, r3
     316:	.short	0xf99d
     318:	adds	r0, #26
     31a:	.short	0xf9bd
     31c:	movs	r0, #24
     31e:	.short	0x9001
     320:	str	r1, [sp, #0]
     322:	.short	0x9604
     324:	ldr	r1, [pc, #244]	; (41c <menu2()+0x164>)
     326:	.short	0x9503
     328:	str	r4, [sp, #8]
     32a:	.short	0x483d
     32c:	bl	8a18 <Print::printf(char const*, ...)>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     330:	.word	0x483c210c
     334:	bl	7138 <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
     338:	.word	0x220a493b
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     33c:	movs	r3, #0
     33e:	.short	0x6809
     340:	ldr	r0, [pc, #220]	; (420 <menu2()+0x168>)
     342:	.short	0xf008
     344:			; <UNDEFINED> instruction: 0xfb794836
	// Print an unsigned number and newline
	size_t println(unsigned int n)			{ return print(n) + println(); }
	// Print a signed number and newline
	size_t println(long n)				{ return print(n) + println(); }
	// Print an unsigned number and newline
	size_t println(unsigned long n)			{ return print(n) + println(); }
     348:	.word	0xfb4cf008
     34c:	movs	r1, #12
     34e:	.short	0x4837
     350:	bl	7138 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
     354:	.word	0x48324b36
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
	// Print an unsigned number and newline
	size_t println(unsigned int n)			{ return print(n) + println(); }
	// Print a signed number and newline
	size_t println(long n)				{ return print(n) + println(); }
     358:	ldr	r1, [r3, #0]
     35a:	.short	0xf008
     35c:			; <UNDEFINED> instruction: 0xfbad4830
     360:	.word	0xfb40f008
     364:	movs	r1, #12
     366:	.short	0x4833
     368:	bl	7138 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
     36c:	.word	0x482c4b32
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	// Print a signed number
	size_t print(int n)				{ return print((long)n); }
     370:	ldrsh.w	r1, [r3]
     374:	.word	0xfba0f008
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     378:	ldr	r0, [pc, #164]	; (420 <menu2()+0x168>)
     37a:	.short	0xf008
     37c:	smlawb	r1, r3, ip, r2
     380:	.word	0xf006482e
     384:	cdp2	11, 13, cr4, cr9, cr14, {1}
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	// Print a signed number
	size_t print(int n)				{ return print((long)n); }
     388:	.word	0x1000f9b3
     38c:	ldr	r0, [pc, #144]	; (420 <menu2()+0x168>)
     38e:	.short	0xf008
     390:			; <UNDEFINED> instruction: 0xfb934823
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     394:	.word	0xfb26f008
     398:	b.n	2f0 <menu2()+0x38>
     39a:	.short	0x210c
     39c:	ldr	r0, [pc, #140]	; (42c <menu2()+0x174>)
     39e:	bl	7138 <usb_serial_write>
    {
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    }
    else if(ch=='f')
    {
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
     3a2:	.short	0x4b23
	// Print an unsigned number and newline
	size_t println(unsigned int n)			{ return print(n) + println(); }
	// Print a signed number and newline
	size_t println(long n)				{ return print(n) + println(); }
     3a4:	ldr	r0, [pc, #120]	; (420 <menu2()+0x168>)
     3a6:	.short	0x6819
     3a8:	bl	8ab8 <Print::print(long)>
     3ac:	ldr	r0, [pc, #112]	; (420 <menu2()+0x168>)
     3ae:	.short	0xf008
     3b0:			; <UNDEFINED> instruction: 0xfb19e79d
      Serial.print("shift (s) = "); Serial.println(shift);
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    if(ch=='d') // get date
    {
      rtc_get_datetime(&t);
     3b4:	.word	0xf000a806
     3b8:	ldr??.w	pc, [fp, #2461]	; 0x99d
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
     3bc:	.word	0xf99d001b
     3c0:	adds	r0, #26
     3c2:	.short	0x9000
     3c4:	ldrsh.w	r2, [sp, #24]
     3c8:	.word	0x4815491e
     3cc:	bl	8a18 <Print::printf(char const*, ...)>
     3d0:	.word	0xa806e78e
    }
    else if(ch=='t') // get time
    {
      rtc_get_datetime(&t);
     3d4:	bl	7b0 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
     3d8:	.word	0x001ff99d
     3dc:	ldrsb.w	r3, [sp, #30]
     3e0:	.word	0xf99d9000
     3e4:	movs	r0, #29
     3e6:	.short	0x4918
     3e8:	ldr	r0, [pc, #52]	; (420 <menu2()+0x168>)
     3ea:	.short	0xf008
     3ec:			; <UNDEFINED> instruction: 0xfb15e77f
     3f0:	.word	0x480c210c
     3f4:	bl	7138 <usb_serial_write>
    }
    else if(ch=='a')
    {
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
     3f8:	.word	0x2300490b
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     3fc:	movs	r2, #10
     3fe:	.short	0x6809
     400:	ldr	r0, [pc, #28]	; (420 <menu2()+0x168>)
     402:	.short	0xf008
     404:	smlabb	r8, r9, r6, r4
	// Print an unsigned number and newline
	size_t println(unsigned int n)			{ return print(n) + println(); }
	// Print a signed number and newline
	size_t println(long n)				{ return print(n) + println(); }
	// Print an unsigned number and newline
	size_t println(unsigned long n)			{ return print(n) + println(); }
     408:	.word	0xfaecf008
     40c:	b.n	2f0 <menu2()+0x38>
     40e:	.short	0x210c
     410:	ldr	r0, [pc, #32]	; (434 <menu2()+0x17c>)
     412:	bl	7138 <usb_serial_write>
    {
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    }
    else if(ch=='s')
    {
      Serial.print("shift (s) = "); Serial.println(shift);
     416:	ldr	r3, [pc, #32]	; (438 <menu2()+0x180>)
     418:	.word	0xbf00e7b6
     41c:	lsrs	r0, r1, #12
     41e:	.short	0x2000
     420:	subs	r0, r1, r7
     422:	movs	r0, #0
     424:	lsrs	r4, r5, #12
     426:	movs	r0, #0
     428:	movs	r1, #180	; 0xb4
     42a:	.short	0x2000
     42c:	lsrs	r4, r7, #12
     42e:	.short	0x2000
     430:	movs	r1, #116	; 0x74
     432:	.short	0x2000
     434:	lsrs	r4, r1, #13
     436:	movs	r0, #0
     438:	movs	r4, #168	; 0xa8
     43a:	movs	r0, #2
     43c:	lsrs	r4, r3, #13
     43e:	movs	r0, #0
     440:	movs	r4, #164	; 0xa4
     442:	.short	0x2002
     444:	lsrs	r4, r5, #13
     446:	.short	0x2000
     448:	lsrs	r0, r1, #14
     44a:	movs	r0, #0

0000044c <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
     44c:	.word	0xb084b510
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     450:	bl	7064 <usb_serial_available>

    while(!Serial.available()) ;
     454:	cmp	r0, #0
     456:	.short	0xd0fb
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     458:	bl	70ec <usb_serial_getchar>
    char ch;
    ch=Serial.read();
     45c:	uxtb	r0, r0
    if(ch=='d') // set date
     45e:	cmp	r0, #100	; 0x64
     460:	beq.n	49a <menu3()+0x4e>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    } 
    else if(ch=='t') // set time
     462:	cmp	r0, #116	; 0x74
     464:	beq.n	4ae <menu3()+0x62>
    { int hour,minutes,seconds;
      menuGet3Int(&hour,&minutes,&seconds);
      //
      rtcSetTime(hour,minutes,seconds);
    } 
    else if(ch=='a')
     466:	cmp	r0, #97	; 0x61
     468:	beq.n	4c2 <menu3()+0x76>
    {
      menuGetInt32((int32_t *)&t_acq);
    }
    else if(ch=='f')
     46a:	cmp	r0, #102	; 0x66
     46c:	beq.n	4ca <menu3()+0x7e>
    {
      menuGetInt32(&fsamp);
      acqModifyFrequency(fsamp);
    }
    else if(ch=='s')
     46e:	cmp	r0, #115	; 0x73
     470:	beq.n	484 <menu3()+0x38>
    {
      menuGetInt16(&shift); if(shift<0) shift=0;
    }
    else if(ch=='c')
     472:	cmp	r0, #99	; 0x63
     474:	beq.n	47a <menu3()+0x2e>
    {
      menuGetInt16(&proc);
    }
}
     476:	add	sp, #16
     478:	pop	{r4, pc}
    {
      menuGetInt16(&shift); if(shift<0) shift=0;
    }
    else if(ch=='c')
    {
      menuGetInt16(&proc);
     47a:	.short	0x4818
     47c:	bl	19c <menuGetInt16(short*)>
    }
}
     480:	.word	0xbd10b004
      menuGetInt32(&fsamp);
      acqModifyFrequency(fsamp);
    }
    else if(ch=='s')
    {
      menuGetInt16(&shift); if(shift<0) shift=0;
     484:	ldr	r4, [pc, #88]	; (4e0 <menu3()+0x94>)
     486:	mov	r0, r4
     488:	bl	19c <menuGetInt16(short*)>
     48c:	ldrsh.w	r3, [r4]
     490:	.word	0xdaf02b00
     494:	movs	r3, #0
     496:	.short	0x8023
     498:	b.n	476 <menu3()+0x2a>
    while(!Serial.available()) ;
    char ch;
    ch=Serial.read();
    if(ch=='d') // set date
    { int year,month,day;
      menuGet3Int(&year,&month,&day);
     49a:	.short	0xaa03
     49c:	add	r1, sp, #8
     49e:	add	r0, sp, #4
     4a0:	bl	244 <menuGet3Int(int*, int*, int*)>

      rtcSetDate(year,month,day);
     4a4:	add	r0, sp, #4
     4a6:	ldmia	r0, {r0, r1, r2}
     4a8:	bl	7c4 <rtcSetDate(int, int, int)>
     4ac:	b.n	476 <menu3()+0x2a>
    } 
    else if(ch=='t') // set time
    { int hour,minutes,seconds;
      menuGet3Int(&hour,&minutes,&seconds);
     4ae:	add	r2, sp, #12
     4b0:	add	r1, sp, #8
     4b2:	add	r0, sp, #4
     4b4:	.word	0xfec6f7ff
      //
      rtcSetTime(hour,minutes,seconds);
     4b8:	add	r0, sp, #4
     4ba:	ldmia	r0, {r0, r1, r2}
     4bc:	bl	7f4 <rtcSetTime(int, int, int)>
     4c0:	b.n	476 <menu3()+0x2a>
    } 
    else if(ch=='a')
    {
      menuGetInt32((int32_t *)&t_acq);
     4c2:	ldr	r0, [pc, #32]	; (4e4 <menu3()+0x98>)
     4c4:	bl	1f0 <menuGetInt32(long*)>
     4c8:	b.n	476 <menu3()+0x2a>
    }
    else if(ch=='f')
    {
      menuGetInt32(&fsamp);
     4ca:	ldr	r4, [pc, #28]	; (4e8 <menu3()+0x9c>)
     4cc:	mov	r0, r4
     4ce:	bl	1f0 <menuGetInt32(long*)>
      acqModifyFrequency(fsamp);
     4d2:	ldr	r0, [r4, #0]
     4d4:	bl	e64 <acqModifyFrequency(unsigned long)>
     4d8:	b.n	476 <menu3()+0x2a>
     4da:	.short	0xbf00
     4dc:	movs	r4, #164	; 0xa4
     4de:	movs	r0, #2
     4e0:	.word	0x200224a8
     4e4:	movs	r1, #180	; 0xb4
     4e6:	movs	r0, #0
     4e8:	movs	r1, #116	; 0x74
     4ea:	movs	r0, #0

000004ec <time2date(unsigned long, datetime_t*)>:
  #define SECS_PER_DAY  ((uint32_t)(SECS_PER_HOUR * 24UL))

  static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
  void time2date(uint32_t time, datetime_t *tm)
  {
     4ec:	.word	0x4ff0e92d
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     4f0:	ldr	r6, [pc, #384]	; (674 <time2date(unsigned long, datetime_t*)+0x188>)

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     4f2:	movs	r4, #0

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     4f4:	ldr	r3, [pc, #384]	; (678 <time2date(unsigned long, datetime_t*)+0x18c>)
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     4f6:	umull	r2, r6, r6, r0
     4fa:	ldr	r2, [pc, #384]	; (67c <time2date(unsigned long, datetime_t*)+0x190>)

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     4fc:	umull	r7, r5, r3, r0
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     500:	.word	0x8184f8df
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     504:	lsrs	r6, r6, #16
     506:	umull	r7, r2, r2, r0

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     50a:	lsrs	r5, r5, #5
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     50c:	ldr.w	lr, [pc, #380]	; 68c <time2date(unsigned long, datetime_t*)+0x1a0>

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     510:	.word	0x0ad21d37
    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
     514:	umull	ip, r3, r3, r5
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     518:	umull	r8, r9, r7, r8
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     51c:	mov.w	r8, #100	; 0x64
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     520:	umull	ip, lr, lr, r2
    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
     524:	lsrs	r3, r3, #5
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     526:	rsb	ip, r9, r7
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     52a:	mov.w	lr, lr, lsr #4

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     52e:	add.w	ip, r9, ip, lsr #1
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     532:	movw	r9, #365	; 0x16d
    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
     536:	rsb	r3, r3, r3, lsl #4
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     53a:	mov.w	ip, ip, lsr #2
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     53e:	add.w	lr, lr, lr, lsl #1

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     542:	.short	0xebcc
     544:	lsrs	r4, r1, #19
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     546:	sub.w	lr, r2, lr, lsl #3

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
     54a:	mov	r2, r4
    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    tm->min  = time % 60; time /= 60; // now it is hours
     54c:	sub.w	r3, r5, r3, lsl #2
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     550:	.word	0x0707ebcc

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     554:	rsb	r5, r5, r5, lsl #4
    tm->min  = time % 60; time /= 60; // now it is hours
    tm->hour = time % 24; time /= 24; // now it is days
     558:	strb.w	lr, [r1, #5]

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     55c:	mov.w	ip, #400	; 0x190
     560:	ldr.w	lr, [pc, #284]	; 680 <time2date(unsigned long, datetime_t*)+0x194>

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     564:	sub.w	r0, r0, r5, lsl #2
    tm->min  = time % 60; time /= 60; // now it is hours
     568:	strb	r3, [r1, #6]
    tm->hour = time % 24; time /= 24; // now it is days

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
     56a:	strb	r7, [r1, #4]

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
     56c:	strb	r0, [r1, #7]
     56e:	uxtb	r3, r4

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     570:	movw	r5, #365	; 0x16d
     574:	addw	r3, r3, #1970	; 0x7b2
     578:	smull	r0, sl, lr, r3
     57c:	ands.w	r7, r3, #3
     580:	.word	0x70e3ea4f
     584:	rsb	fp, r0, sl, asr #5
     588:	.word	0xebc0d10d
     58c:	asrs	r2, r5, #3
     58e:	.short	0xfb08
     590:	subs	r3, #27
     592:	.short	0xf44f
     594:	strb	r7, [r6, #22]
     596:	.short	0xfb0c
     598:	adds	r0, #16
     59a:	.short	0xf1bb
     59c:	lsrs	r0, r0, #28
     59e:	.short	0xd102
     5a0:	cmp	r0, #0
     5a2:	.short	0xbf18
     5a4:	movne	r5, r9
     5a6:	.short	0x442a
     5a8:	adds	r4, #1
     5aa:	.short	0x4296
     5ac:	bcs.n	56e <time2date(unsigned long, datetime_t*)+0x82>
      year++;
    }
    tm->year = year+YEAR0;
     5ae:	.short	0x800b
    
    days -= LEAP_YEAR(year) ? 366 : 365;
     5b0:	cbnz	r7, 5ce <time2date(unsigned long, datetime_t*)+0xe2>
     5b2:	.short	0x4c33
     5b4:	asrs	r0, r3, #31
     5b6:	.short	0xf04f
     5b8:	lsrs	r4, r4, #25
     5ba:	.short	0xfb84
     5bc:	strb	r3, [r0, r0]
     5be:	.short	0xebc0
     5c0:	asrs	r4, r4, #21
     5c2:	mls	r5, lr, r5, r3
     5c6:	cbz	r5, 632 <time2date(unsigned long, datetime_t*)+0x146>
     5c8:	mov.w	r5, #366	; 0x16e
     5cc:	b.n	5d4 <time2date(unsigned long, datetime_t*)+0xe8>
     5ce:	movw	r5, #365	; 0x16d
     5d2:	asrs	r0, r3, #31
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
      if (month==1) { // february
        if (LEAP_YEAR(year)) {
     5d4:	.word	0x1b524c2a
     5d8:	mov.w	r8, #100	; 0x64
     5dc:	mov.w	r5, #400	; 0x190
     5e0:	smull	r4, lr, r4, r3
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    time  -= days; // now it is days in this year, starting at 0
     5e4:	subs	r2, r6, r2
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
      if (month==1) { // february
        if (LEAP_YEAR(year)) {
     5e6:	movs	r4, #1
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
     5e8:	ldr	r6, [pc, #152]	; (684 <time2date(unsigned long, datetime_t*)+0x198>)
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
      if (month==1) { // february
        if (LEAP_YEAR(year)) {
     5ea:	rsb	ip, r0, lr, asr #5
     5ee:	rsb	lr, r0, lr, asr #7
     5f2:	.short	0x2000
     5f4:	mls	ip, r8, ip, r3
     5f8:	.word	0x3e1efb05
     5fc:	b.n	604 <time2date(unsigned long, datetime_t*)+0x118>
     5fe:	.short	0x3401
     600:	adds	r0, #1
     602:	.short	0xb2e4
    
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
      if (month==1) { // february
     604:	cmp	r0, #1
     606:	.short	0xb2c5
     608:	beq.n	64c <time2date(unsigned long, datetime_t*)+0x160>
        }
      } else {
        monthLength = monthDays[month];
      }
      
      if (time >= monthLength) {
     60a:	.short	0x5d83
     60c:	cmp	r3, r2
     60e:	bhi.n	624 <time2date(unsigned long, datetime_t*)+0x138>
    time  -= days; // now it is days in this year, starting at 0
    
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
     610:	.word	0xeba22c0c
      } else {
        monthLength = monthDays[month];
      }
      
      if (time >= monthLength) {
        time -= monthLength;
     614:	lsls	r3, r0, #8
    time  -= days; // now it is days in this year, starting at 0
    
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
     616:	.short	0xd1f2
     618:	movs	r5, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
     61a:	adds	r2, #1
        time -= monthLength;
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
     61c:	strb	r5, [r1, #2]
    tm->day = time + 1;     // day of month
     61e:	strb	r2, [r1, #3]
  }
     620:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     624:	.word	0x32013501
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
     628:	sxtb	r5, r5
     62a:	.short	0x70ca
        time -= monthLength;
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
     62c:	strb	r5, [r1, #2]
    tm->day = time + 1;     // day of month
  }
     62e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
     632:	rsb	r4, r0, r4, asr #7
     636:	mov.w	lr, #400	; 0x190
     63a:	movw	r5, #365	; 0x16d
     63e:	mls	r4, lr, r4, r3
     642:	cmp	r4, #0
     644:	it	eq
     646:	moveq.w	r5, #366	; 0x16e
     64a:	b.n	5d4 <time2date(unsigned long, datetime_t*)+0xe8>
    days=0;
    month=0;
    monthLength=0;
    for (month=0; month<12; month++) {
      if (month==1) { // february
        if (LEAP_YEAR(year)) {
     64c:	cbnz	r7, 666 <time2date(unsigned long, datetime_t*)+0x17a>
     64e:	cmp.w	ip, #0
     652:	bne.n	66e <time2date(unsigned long, datetime_t*)+0x182>
     654:	cmp.w	lr, #0
     658:	ite	ne
     65a:	movne	r3, #28
     65c:	moveq	r3, #29
        }
      } else {
        monthLength = monthDays[month];
      }
      
      if (time >= monthLength) {
     65e:	cmp	r2, r3
     660:	bcc.n	66a <time2date(unsigned long, datetime_t*)+0x17e>
        time -= monthLength;
     662:	subs	r2, r2, r3
     664:	b.n	5fe <time2date(unsigned long, datetime_t*)+0x112>
     666:	movs	r3, #28
     668:	b.n	65e <time2date(unsigned long, datetime_t*)+0x172>
        }
      } else {
        monthLength = monthDays[month];
      }
      
      if (time >= monthLength) {
     66a:	movs	r5, #2
     66c:	b.n	61a <time2date(unsigned long, datetime_t*)+0x12e>
     66e:	movs	r3, #29
     670:	b.n	65e <time2date(unsigned long, datetime_t*)+0x172>
     672:	nop
     674:	.word	0xc22e4507
     678:	.word	0x88888889
     67c:	.word	0x91a2b3c5
     680:	.word	0x51eb851f
     684:	.word	0x2000039c
     688:	.word	0x24924925
     68c:	.word	0xaaaaaaab

00000690 <date2time(datetime_t*)>:
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
  }

  uint32_t date2time(datetime_t *tm)
  {
     690:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
     694:	ldrb	r4, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
     696:	ldr	r2, [pc, #260]	; (79c <date2time(datetime_t*)+0x10c>)
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
     698:	adds	r4, #78	; 0x4e
     69a:	uxtb.w	lr, r4
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
     69e:	mul.w	r2, r2, lr
    for (ii = 0; ii < year; ii++) {
     6a2:	cmp.w	lr, #0
     6a6:	beq.n	6fa <date2time(datetime_t*)+0x6a>
     6a8:	movw	r3, #1971	; 0x7b3
     6ac:	addw	r7, lr, #1970	; 0x7b2
      if (LEAP_YEAR(ii)) {
     6b0:	ldr	r6, [pc, #236]	; (7a0 <date2time(datetime_t*)+0x110>)
     6b2:	mov.w	ip, #100	; 0x64

    uint8_t year;
    year=tm->year-YEAR0;
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
     6b6:	cmp	r3, r7
      if (LEAP_YEAR(ii)) {
     6b8:	mov.w	r8, #400	; 0x190
     6bc:	smull	r1, r4, r6, r3
     6c0:	mov.w	r1, r3, asr #31
     6c4:	rsb	r5, r1, r4, asr #5

    uint8_t year;
    year=tm->year-YEAR0;
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
     6c8:	beq.n	6fa <date2time(datetime_t*)+0x6a>
      if (LEAP_YEAR(ii)) {
     6ca:	tst.w	r3, #3
     6ce:	mls	r5, ip, r5, r3
     6d2:	bne.n	6e8 <date2time(datetime_t*)+0x58>
     6d4:	rsb	r1, r1, r4, asr #7
     6d8:	cbnz	r5, 6e0 <date2time(datetime_t*)+0x50>
     6da:	mls	r1, r8, r1, r3
     6de:	cbnz	r1, 6e8 <date2time(datetime_t*)+0x58>
        seconds += SECS_PER_DAY;   // add extra days for leap years
     6e0:	add.w	r2, r2, #86016	; 0x15000
     6e4:	add.w	r2, r2, #384	; 0x180
     6e8:	adds	r3, #1
    uint8_t year;
    year=tm->year-YEAR0;
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
      if (LEAP_YEAR(ii)) {
     6ea:	smull	r1, r4, r6, r3

    uint8_t year;
    year=tm->year-YEAR0;
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
     6ee:	cmp	r3, r7
      if (LEAP_YEAR(ii)) {
     6f0:	mov.w	r1, r3, asr #31
     6f4:	rsb	r5, r1, r4, asr #5

    uint8_t year;
    year=tm->year-YEAR0;
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
     6f8:	bne.n	6ca <date2time(datetime_t*)+0x3a>
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
     6fa:	ldrsb.w	r7, [r0, #2]
     6fe:	cmp	r7, #1
     700:	ble.n	760 <date2time(datetime_t*)+0xd0>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
     702:	addw	r4, lr, #1970	; 0x7b2
     706:	ldr	r6, [pc, #152]	; (7a0 <date2time(datetime_t*)+0x110>)
     708:	mov.w	r5, #400	; 0x190
     70c:	mov.w	r8, #100	; 0x64
     710:	smull	r3, r6, r6, r4
     714:	asrs	r3, r4, #31
     716:	and.w	ip, r4, #3
     71a:	ldr	r1, [pc, #136]	; (7a4 <date2time(datetime_t*)+0x114>)
     71c:	rsb	lr, r3, r6, asr #5
     720:	rsb	r6, r3, r6, asr #7
     724:	movs	r3, #1
     726:	mls	lr, r8, lr, r4
     72a:	mls	r6, r5, r6, r4
        seconds += SECS_PER_DAY * 29;
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
     72e:	ldr	r5, [pc, #120]	; (7a8 <date2time(datetime_t*)+0x118>)
     730:	b.n	740 <date2time(datetime_t*)+0xb0>
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
     732:	adds	r3, #1
      if ( (ii == 2) && LEAP_YEAR(year)) { 
        seconds += SECS_PER_DAY * 29;
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
     734:	ldrb	r4, [r1, #0]
     736:	adds	r1, #1
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
     738:	cmp	r3, r7
      if ( (ii == 2) && LEAP_YEAR(year)) { 
        seconds += SECS_PER_DAY * 29;
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
     73a:	mla	r2, r5, r4, r2
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
     73e:	beq.n	760 <date2time(datetime_t*)+0xd0>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
     740:	cmp	r3, #2
     742:	bne.n	732 <date2time(datetime_t*)+0xa2>
     744:	cmp.w	ip, #0
     748:	bne.n	732 <date2time(datetime_t*)+0xa2>
     74a:	cmp.w	lr, #0
     74e:	beq.n	78e <date2time(datetime_t*)+0xfe>
        seconds += SECS_PER_DAY * 29;
     750:	add.w	r2, r2, #2490368	; 0x260000
     754:	add.w	r2, r2, #15232	; 0x3b80
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
     758:	adds	r3, #1
     75a:	adds	r1, #1
     75c:	cmp	r3, r7
     75e:	bne.n	740 <date2time(datetime_t*)+0xb0>
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    seconds+= tm->sec;
    return seconds; 
     760:	ldrsb.w	r3, [r0, #6]
     764:	mov.w	r6, #3600	; 0xe10
     768:	ldrsb.w	r5, [r0, #5]
     76c:	rsb	r3, r3, r3, lsl #4
     770:	ldrsb.w	r4, [r0, #7]
     774:	ldrsb.w	r1, [r0, #3]
     778:	lsls	r3, r3, #2
     77a:	ldr	r0, [pc, #44]	; (7a8 <date2time(datetime_t*)+0x118>)
     77c:	subs	r1, #1
     77e:	mla	r3, r6, r5, r3
     782:	add	r3, r4
     784:	mla	r0, r0, r1, r3
  }
     788:	add	r0, r2
     78a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
      if ( (ii == 2) && LEAP_YEAR(year)) { 
     78e:	cmp	r6, #0
     790:	bne.n	732 <date2time(datetime_t*)+0xa2>
        seconds += SECS_PER_DAY * 29;
     792:	add.w	r2, r2, #2490368	; 0x260000
     796:	add.w	r2, r2, #15232	; 0x3b80
     79a:	b.n	758 <date2time(datetime_t*)+0xc8>
     79c:	.word	0x01e13380
     7a0:	.word	0x51eb851f
     7a4:	.word	0x2000039c
     7a8:	.word	0x00015180

000007ac <rtc_setup(unsigned char, unsigned char)>:
  }

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;
  }
     7ac:	movs	r0, #1
     7ae:	bx	lr

000007b0 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
     7b0:	push	{r4, lr}
     7b2:	mov	r4, r0
    time2date(rtc_get(), t);
     7b4:	bl	810c <rtc_get>
     7b8:	mov	r1, r4
     7ba:	bl	4ec <time2date(unsigned long, datetime_t*)>
    return 1;
  }
     7be:	movs	r0, #1
     7c0:	pop	{r4, pc}
     7c2:	nop

000007c4 <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
     7c4:	push	{r4, r5, r6, lr}
     7c6:	sub	sp, #8
     7c8:	mov	r4, r2
     7ca:	mov	r5, r1
     7cc:	mov	r6, r0
    return 1;
  }

  bool rtc_get_datetime(datetime_t *t)
  {
    time2date(rtc_get(), t);
     7ce:	bl	810c <rtc_get>
     7d2:	mov	r1, sp
     7d4:	bl	4ec <time2date(unsigned long, datetime_t*)>
    return 1;
  }

  bool rtc_set_datetime(datetime_t *t)
  {
    rtc_set(date2time(t));
     7d8:	mov	r0, sp
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    rtc_get_datetime(&t);
    t.year=year;
     7da:	strh.w	r6, [sp]
    t.month=month;
     7de:	strb.w	r5, [sp, #2]
    t.day=day;
     7e2:	strb.w	r4, [sp, #3]
    return 1;
  }

  bool rtc_set_datetime(datetime_t *t)
  {
    rtc_set(date2time(t));
     7e6:	bl	690 <date2time(datetime_t*)>
     7ea:	bl	813c <rtc_set>
    rtc_get_datetime(&t);
    t.year=year;
    t.month=month;
    t.day=day;
    rtc_set_datetime(&t);
  }
     7ee:	add	sp, #8
     7f0:	pop	{r4, r5, r6, pc}
     7f2:	nop

000007f4 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
     7f4:	push	{r4, r5, r6, lr}
     7f6:	sub	sp, #8
     7f8:	mov	r4, r2
     7fa:	mov	r5, r1
     7fc:	mov	r6, r0
    return 1;
  }

  bool rtc_get_datetime(datetime_t *t)
  {
    time2date(rtc_get(), t);
     7fe:	bl	810c <rtc_get>
     802:	mov	r1, sp
     804:	bl	4ec <time2date(unsigned long, datetime_t*)>
    return 1;
  }

  bool rtc_set_datetime(datetime_t *t)
  {
    rtc_set(date2time(t));
     808:	mov	r0, sp
  }

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    rtc_get_datetime(&t);
    t.hour=hour;
     80a:	strb.w	r6, [sp, #5]
    t.min=minutes;
     80e:	strb.w	r5, [sp, #6]
    t.sec=seconds;
     812:	strb.w	r4, [sp, #7]
    return 1;
  }

  bool rtc_set_datetime(datetime_t *t)
  {
    rtc_set(date2time(t));
     816:	bl	690 <date2time(datetime_t*)>
     81a:	bl	813c <rtc_set>
    rtc_get_datetime(&t);
    t.hour=hour;
    t.min=minutes;
    t.sec=seconds;
    rtc_set_datetime(&t);
  }
     81e:	add	sp, #8
     820:	pop	{r4, r5, r6, pc}
     822:	nop

00000824 <compress(void*)>:
int32_t tempData0[NCH];

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
     824:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     828:	sub	sp, #12
     82a:	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
     82c:	bl	810c <rtc_get>
     830:	mov	fp, r0
  uint32_t t1;
  t1 = micros();
     832:	bl	7ee8 <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy reference (first sample of all channels)
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     836:	ldr	r2, [pc, #656]	; (ac8 <compress(void*)+0x2a4>)
     838:	ldr	r3, [r4, #0]
     83a:	mov	r1, r4
     83c:	ldr	r6, [r2, #0]
     83e:	add.w	r7, r4, #508	; 0x1fc
     842:	ldr	r2, [pc, #648]	; (acc <compress(void*)+0x2a8>)
     844:	mov	r4, r6
     846:	mov	r5, r6
     848:	str	r3, [r6, #0]
     84a:	str	r3, [r2, #0]
  
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);
     84c:	ldr.w	r3, [r1, #4]!
     850:	ldr.w	r2, [r1, #-4]
     854:	cmp	r1, r7
     856:	sub.w	r3, r3, r2
     85a:	str.w	r3, [r5, #4]!
     85e:	bne.n	84c <compress(void*)+0x28>
     860:	add.w	r1, r6, #508	; 0x1fc
     864:	movs	r2, #0

  // find maximum in filtered data
  int32_t mx = 0;
  for (int ii = NCH; ii < NSAMP; ii++)
  {
    int32_t dd =  tempDatai[ii];
     866:	ldr.w	r5, [r4, #4]!
     86a:	eor.w	r3, r5, r5, asr #31
     86e:	sub.w	r3, r3, r5, asr #31
     872:	cmp	r2, r3
     874:	it	lt
     876:	movlt	r2, r3
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);

  // find maximum in filtered data
  int32_t mx = 0;
  for (int ii = NCH; ii < NSAMP; ii++)
     878:	cmp	r4, r1
     87a:	bne.n	866 <compress(void*)+0x42>
     87c:	mov.w	lr, #2
    if(dd>mx) mx = dd;
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     880:	movs	r5, #1
     882:	b.n	890 <compress(void*)+0x6c>
     884:	add.w	lr, lr, #1
     888:	cmp.w	lr, #24
     88c:	beq.w	a1a <compress(void*)+0x1f6>
     890:	add.w	r4, lr, #4294967295
     894:	movs	r1, #1
     896:	lsl.w	r3, r5, r4
     89a:	cmp	r2, r3
     89c:	bge.n	884 <compress(void*)+0x60>
     89e:	mov.w	r3, lr, lsl #2
     8a2:	lsl.w	r1, r1, lr
     8a6:	adds	r2, r3, #7
     8a8:	add.w	r8, r3, #8
     8ac:	subs	r5, r1, #1
     8ae:	adds	r3, #1
     8b0:	str	r2, [sp, #4]
     8b2:	str	r3, [sp, #0]
  // compression factor (32/nb)
  proc_stat[nb-1]++;
     8b4:	ldr	r6, [pc, #536]	; (ad0 <compress(void*)+0x2ac>)
  if((uint32_t)nb>max_stat) max_stat=nb;
     8b6:	ldr	r7, [pc, #540]	; (ad4 <compress(void*)+0x2b0>)

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
  // compression factor (32/nb)
  proc_stat[nb-1]++;
     8b8:	ldr.w	r2, [r6, r4, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
     8bc:	ldr	r1, [r7, #0]

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
  // compression factor (32/nb)
  proc_stat[nb-1]++;
     8be:	adds	r2, #1
  if((uint32_t)nb>max_stat) max_stat=nb;
     8c0:	cmp	r1, lr

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
  // compression factor (32/nb)
  proc_stat[nb-1]++;
     8c2:	str.w	r2, [r6, r4, lsl #2]
     8c6:	ldr	r4, [pc, #528]	; (ad8 <compress(void*)+0x2b4>)
  if((uint32_t)nb>max_stat) max_stat=nb;
     8c8:	it	cc
     8ca:	strcc.w	lr, [r7]
    if(dd>mx) mx = dd;
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     8ce:	mov	r9, r4
     8d0:	add.w	r7, r4, #508	; 0x1fc
     8d4:	mov	r2, r4
  proc_stat[nb-1]++;
  if((uint32_t)nb>max_stat) max_stat=nb;

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }
     8d6:	ldr.w	r3, [r2, #4]!
     8da:	ands	r3, r5
     8dc:	cmp	r2, r7
     8de:	str	r3, [r2, #0]
     8e0:	bne.n	8d6 <compress(void*)+0xb2>
     8e2:	ldr	r6, [pc, #504]	; (adc <compress(void*)+0x2b8>)

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     8e4:	movs	r3, #0
     8e6:	add.w	r5, r6, #512	; 0x200
  proc_stat[nb-1]++;
  if((uint32_t)nb>max_stat) max_stat=nb;

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }
     8ea:	mov	r1, r6

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     8ec:	str.w	r3, [r1, #4]!
     8f0:	cmp	r1, r5
     8f2:	mov.w	r2, #0
     8f6:	bne.n	8ec <compress(void*)+0xc8>

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
     8f8:	ldr	r5, [pc, #484]	; (ae0 <compress(void*)+0x2bc>)
     8fa:	mov.w	sl, #2779096485	; 0xa5a5a5a5
  *iptr++ = nb | shift<<16;
     8fe:	ldr	r1, [pc, #484]	; (ae4 <compress(void*)+0x2c0>)
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
     900:	ldr	r3, [sp, #0]
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
     902:	ldrsh.w	ip, [r1]
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     906:	mov	r1, r2
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
     908:	str	r3, [r5, #20]
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
     90a:	movs	r3, #1

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
     90c:	str.w	fp, [r5, #8]
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
     910:	orr.w	ip, lr, ip, lsl #16
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;

  // pack data
  // 
  int nx = MBIT;
     914:	mov.w	fp, #32
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
     918:	str	r3, [r5, #16]
  *iptr++ = NCH+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     91a:	ldr.w	r3, [r9]
  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
     91e:	str	r0, [r5, #12]
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     920:	movs	r0, #7
     922:	str	r3, [r5, #24]
     924:	mov	r3, fp
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
     926:	str.w	ip, [r5, #4]
    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
     92a:	str.w	sl, [r5]
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     92e:	str.w	r2, [r9]
     932:	b.n	946 <compress(void*)+0x122>
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NSAMP; ii ++)
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
     934:	ldr.w	r1, [r5, r0, lsl #2]
     938:	orrs	r2, r1
     93a:	str.w	r2, [r5, r0, lsl #2]
  outData[kk++] = tempData[0]; tempData[0] = 0;

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NSAMP; ii ++)
     93e:	cmp	r4, r7
     940:	beq.n	976 <compress(void*)+0x152>
     942:	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
     946:	rsb	r3, lr, r3
      if(nx > 0)
     94a:	cmp	r3, #0
      {   outData[kk] |= (tempData[ii] << nx);
     94c:	lsl.w	r2, r1, r3
  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NSAMP; ii ++)
  {   nx -= nb;
      if(nx > 0)
     950:	bgt.n	934 <compress(void*)+0x110>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     952:	rsb	r2, r3, #0
     956:	add.w	r9, r0, #1
          nx += MBIT;
     95a:	add.w	r3, r3, #32
  for (int ii = 0; ii < NSAMP; ii ++)
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
      }
      else if(nx==0) 
     95e:	bne.n	9ac <compress(void*)+0x188>
      {   outData[kk++] |= tempData[ii];
     960:	ldr.w	r2, [r5, r0, lsl #2]
  outData[kk++] = tempData[0]; tempData[0] = 0;

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NSAMP; ii ++)
     964:	cmp	r4, r7
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
      }
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
     966:	mov.w	r3, #32
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
      }
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
     96a:	orr.w	r1, r1, r2
     96e:	str.w	r1, [r5, r0, lsl #2]
     972:	mov	r0, r9
  outData[kk++] = tempData[0]; tempData[0] = 0;

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NSAMP; ii ++)
     974:	bne.n	942 <compress(void*)+0x11e>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBLOCK)
     976:	ldr	r4, [pc, #368]	; (ae8 <compress(void*)+0x2c4>)
     978:	ldr.w	lr, [r4]
     97c:	add.w	r3, lr, r8
     980:	cmp	r3, #128	; 0x80
     982:	bgt.n	9c6 <compress(void*)+0x1a2>
     984:	ldr	r2, [pc, #356]	; (aec <compress(void*)+0x2c8>)
     986:	add.w	r0, lr, #1
     98a:	movs	r3, #0
     98c:	add.w	r2, r2, lr, lsl #2
     990:	subs	r2, #4
     992:	adds	r5, r0, r3
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     994:	adds	r3, #1
     996:	ldr.w	r1, [r6, #4]!
     99a:	cmp	r3, r8
     99c:	str.w	r1, [r2, #4]!
     9a0:	blt.n	992 <compress(void*)+0x16e>

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
  int ret=1;
     9a2:	movs	r0, #1
     9a4:	str	r5, [r4, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     9a6:	add	sp, #12
     9a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     9ac:	lsr.w	ip, r1, r2
     9b0:	ldr.w	r2, [r5, r0, lsl #2]
          nx += MBIT;
          outData[kk] = (tempData[ii] << nx);
     9b4:	lsls	r1, r3
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     9b6:	orr.w	r2, ip, r2
     9ba:	str.w	r2, [r5, r0, lsl #2]
     9be:	mov	r0, r9
          nx += MBIT;
          outData[kk] = (tempData[ii] << nx);
     9c0:	str.w	r1, [r5, r9, lsl #2]
     9c4:	b.n	93e <compress(void*)+0x11a>

  if ((nout + ndat) <= NBLOCK)
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
  }
  else if ((nout + NH) > NBLOCK) //avoid partial header (special case)
     9c6:	cmp.w	lr, #122	; 0x7a
     9ca:	ble.n	a2e <compress(void*)+0x20a>
  {
      while(nout<NBLOCK) dout[nout++] = 0; // fill rest of block with zero
     9cc:	cmp.w	lr, #127	; 0x7f
     9d0:	bgt.n	9ea <compress(void*)+0x1c6>
     9d2:	ldr	r3, [pc, #280]	; (aec <compress(void*)+0x2c8>)
     9d4:	movs	r1, #0
     9d6:	add.w	r2, r3, lr, lsl #2
     9da:	add.w	r3, r3, #512	; 0x200
     9de:	str.w	r1, [r2], #4
     9e2:	cmp	r2, r3
     9e4:	bne.n	9de <compress(void*)+0x1ba>
     9e6:	movs	r3, #128	; 0x80
     9e8:	str	r3, [r4, #0]
      // store data
      if(!pushData(dout)) ret = 0;
     9ea:	ldr	r0, [pc, #256]	; (aec <compress(void*)+0x2c8>)
     9ec:	bl	a8 <pushData(unsigned long*)>

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
  int ret=1;
     9f0:	adds	r0, #0
     9f2:	ldr	r2, [pc, #252]	; (af0 <compress(void*)+0x2cc>)
      // store data
      if(!pushData(dout)) ret = 0;
      //
      // store data in next block
      nout=0;
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     9f4:	mov.w	r3, #0

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
  int ret=1;
     9f8:	it	ne
     9fa:	movne	r0, #1
      // store data
      if(!pushData(dout)) ret = 0;
      //
      // store data in next block
      nout=0;
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     9fc:	adds	r3, #1
     9fe:	ldr.w	r1, [r6, #4]!
     a02:	cmp	r3, r8
     a04:	str.w	r1, [r2, #4]!
     a08:	blt.n	9fc <compress(void*)+0x1d8>
     a0a:	mov	r3, r8
     a0c:	cmp	r3, #1
     a0e:	it	lt
     a10:	movlt	r3, #1
     a12:	str	r3, [r4, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     a14:	add	sp, #12
     a16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a1a:	movs	r3, #97	; 0x61
     a1c:	mov.w	r8, #104	; 0x68
     a20:	mvn.w	r5, #4278190080	; 0xff000000
     a24:	movs	r4, #23
     a26:	str	r3, [sp, #0]
     a28:	movs	r3, #103	; 0x67
     a2a:	str	r3, [sp, #4]
     a2c:	b.n	8b4 <compress(void*)+0x90>
     a2e:	ldr	r7, [pc, #188]	; (aec <compress(void*)+0x2c8>)
      int ii=0;
      int nr;
      nr = NBLOCK-nout;  //remaining data
      uint32_t *iptr = (uint32_t *) outData;
      // correct header
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     a30:	rsb	r2, lr, #122	; 0x7a
     a34:	ldr	r1, [r5, #20]
     a36:	add.w	r3, r7, lr, lsl #2
     a3a:	add.w	r0, r7, #508	; 0x1fc
     a3e:	orr.w	r1, r2, r1, lsl #16
     a42:	subs	r3, #4
     a44:	str	r1, [r5, #20]

      while (nout < NBLOCK) dout[nout++] = outData[ii++];
     a46:	ldr.w	r2, [r6, #4]!
     a4a:	str.w	r2, [r3, #4]!
     a4e:	cmp	r3, r0
     a50:	bne.n	a46 <compress(void*)+0x222>
     a52:	movs	r3, #128	; 0x80
      // store data
      if(!pushData(dout)) ret = 0;
     a54:	ldr	r0, [pc, #148]	; (aec <compress(void*)+0x2c8>)
     a56:	rsb	r6, lr, r3
     a5a:	str	r3, [r4, #0]
     a5c:	bl	a8 <pushData(unsigned long*)>
      //
      // store rest in next block
      nr=ndat0-ii; // for header
      // add blockHeader continuation
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a60:	ldr	r3, [sp, #4]
     a62:	ldr	r2, [r5, #20]

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
  int ret=1;
     a64:	adds	r0, #0
      if(!pushData(dout)) ret = 0;
      //
      // store rest in next block
      nr=ndat0-ii; // for header
      // add blockHeader continuation
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a66:	sub.w	r1, r3, r6
     a6a:	ldr	r3, [pc, #136]	; (af4 <compress(void*)+0x2d0>)
     a6c:	ldr.w	ip, [pc, #124]	; aec <compress(void*)+0x2c8>

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
  int ret=1;
     a70:	it	ne
     a72:	movne	r0, #1
      if(!pushData(dout)) ret = 0;
      //
      // store rest in next block
      nr=ndat0-ii; // for header
      // add blockHeader continuation
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     a74:	ands	r3, r2
     a76:	mov	r2, ip
     a78:	orrs	r1, r3
     a7a:	str	r1, [r5, #20]
     a7c:	ldr	r5, [pc, #96]	; (ae0 <compress(void*)+0x2bc>)
     a7e:	mov	r3, r5
     a80:	add.w	lr, r5, #24
      // copy first header
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     a84:	ldr.w	r1, [r3], #4
     a88:	cmp	r3, lr
     a8a:	str.w	r1, [r2], #4
     a8e:	bne.n	a84 <compress(void*)+0x260>
     a90:	movs	r3, #6
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
     a92:	cmp	r6, r8
     a94:	str	r3, [r4, #0]
     a96:	bge.n	9a6 <compress(void*)+0x182>
     a98:	add.w	r1, r8, #5
     a9c:	add.w	r3, r5, r6, lsl #2
     aa0:	ldr	r2, [pc, #84]	; (af8 <compress(void*)+0x2d4>)
     aa2:	subs	r1, r1, r6
     aa4:	subs	r3, #4
     aa6:	add.w	r7, r7, r1, lsl #2
     aaa:	ldr.w	r1, [r3, #4]!
     aae:	str.w	r1, [r2, #4]!
     ab2:	cmp	r2, r7
     ab4:	bne.n	aaa <compress(void*)+0x286>
     ab6:	add.w	r8, r8, #6
     aba:	rsb	r3, r6, r8
     abe:	str	r3, [r4, #0]
  }
  return ret;
}
     ac0:	add	sp, #12
     ac2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ac6:	nop
     ac8:	.word	0x200021bc
     acc:	.word	0x2002248c
     ad0:	.word	0x20021f14
     ad4:	.word	0x20021f04
     ad8:	.word	0x20021990
     adc:	.word	0x2002153c
     ae0:	.word	0x20021540
     ae4:	.word	0x200224a8
     ae8:	.word	0x20021be4
     aec:	.word	0x20021280
     af0:	.word	0x2002127c
     af4:	.word	0xffff0000
     af8:	.word	0x20021294

00000afc <acq_isr()>:
    #include "mAudioIF.h"
  #endif

  #define IMXRT_CACHE_ENABLED 2 // 0=disabled, 1=WT, 2= WB
  static void acq_isr(void)
  {
     afc:	push	{r3, r4, r5, lr}
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     afe:	ldr	r3, [pc, #212]	; (bd4 <acq_isr()+0xd8>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     b00:	ldr	r1, [pc, #212]	; (bd8 <acq_isr()+0xdc>)
     b02:	ldr	r2, [r3, #0]
     b04:	ldrb	r0, [r3, #4]
     b06:	ldr	r3, [r2, #16]

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     b08:	ldr	r2, [pc, #208]	; (bdc <acq_isr()+0xe0>)
     b0a:	strb	r0, [r1, #31]
     b0c:	cmp	r3, r2
     b0e:	it	cs
     b10:	subcs.w	r2, r2, #1024	; 0x400
    {
      // DMA is receiving to the first half of the buffer
      // need to remove data from the second half
      src = (int32_t *)&i2s_buffer[NBUF_I2S];
     b14:	mov	r1, r2
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     b16:	bic.w	r3, r2, #31
	uint32_t end_addr = (uint32_t)addr + size;
     b1a:	add.w	r2, r2, #1024	; 0x400
	asm volatile("": : :"memory");
	asm("dsb");
     b1e:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
     b22:	ldr	r0, [pc, #188]	; (be0 <acq_isr()+0xe4>)
     b24:	str	r3, [r0, #0]
		location += 32;
     b26:	adds	r3, #32
	} while (location < end_addr);
     b28:	cmp	r2, r3
     b2a:	bhi.n	b24 <acq_isr()+0x28>
	asm("dsb");
     b2c:	dsb	sy
	asm("isb");
     b30:	isb	sy
     b34:	ldr	r3, [pc, #172]	; (be4 <acq_isr()+0xe8>)
        arm_dcache_delete((void*)src, sizeof(i2s_buffer) / 2);
    #endif

    // extract data
    #if NCH==1
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     b36:	movs	r2, #0
     b38:	ldrsh.w	r4, [r3]
     b3c:	ldr.w	r0, [r1, r2, lsl #3]
     b40:	ldr	r3, [pc, #164]	; (be8 <acq_isr()+0xec>)
     b42:	add	r3, r0
     b44:	asrs	r3, r4
     b46:	str.w	r3, [r1, r2, lsl #3]
     b4a:	adds	r2, #1
     b4c:	cmp	r2, #128	; 0x80
     b4e:	bne.n	b3c <acq_isr()+0x40>

int32_t bias=0;

/***************************************************************************/
static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     b50:	ldr	r5, [pc, #152]	; (bec <acq_isr()+0xf0>)


  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];   
     b52:	movs	r2, #0
     b54:	ldr	r3, [pc, #152]	; (bf0 <acq_isr()+0xf4>)

int32_t bias=0;

/***************************************************************************/
static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     b56:	ldr	r4, [r5, #0]
     b58:	mov	r0, r3
     b5a:	adds	r4, #1
     b5c:	str	r4, [r5, #0]


  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];   
     b5e:	ldr.w	r4, [r1, r2, lsl #3]
     b62:	adds	r2, #1
     b64:	cmp	r2, #128	; 0x80
     b66:	str.w	r4, [r0, #4]!
     b6a:	bne.n	b5e <acq_isr()+0x62>
     b6c:	ldr	r4, [pc, #132]	; (bf4 <acq_isr()+0xf8>)
     b6e:	movs	r0, #0
     b70:	sub.w	r1, r4, #512	; 0x200

  int32_t tmp=0;  
  for(int ii=0; ii<NBUF_ACQ; ii++) tmp+=acqBuffer[ii]/NBUF_ACQ;
     b74:	ldr.w	r2, [r1, #4]!
     b78:	cmp	r2, #0
     b7a:	it	lt
     b7c:	addlt	r2, #127	; 0x7f
     b7e:	cmp	r4, r1
     b80:	add.w	r0, r0, r2, asr #7
     b84:	bne.n	b74 <acq_isr()+0x78>
  bias=bias+(tmp-bias)/(1<<10);
     b86:	ldr	r1, [pc, #112]	; (bf8 <acq_isr()+0xfc>)
     b88:	ldr	r2, [r1, #0]
     b8a:	subs	r0, r0, r2
     b8c:	it	mi
     b8e:	addwmi	r0, r0, #1023	; 0x3ff
     b92:	add.w	r0, r2, r0, asr #10
     b96:	str	r0, [r1, #0]

//  bias=(bias>>10)<<10;

  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= (acqBuffer[ii] - bias)>>SHIFT;   
     b98:	ldr.w	r2, [r3, #4]!
     b9c:	subs	r2, r2, r0
     b9e:	cmp	r4, r3
     ba0:	str	r2, [r3, #0]
     ba2:	bne.n	b98 <acq_isr()+0x9c>
  acqBuffer[0] = acqBuffer[0] + data1;
  for(int ii=1; ii<NBUF_ACQ;ii++) acqBuffer[ii]= acqBuffer[ii] + acqBuffer[ii-1];
  data1=acqBuffer[NBUF_ACQ-1];
  */

  if(proc==0)
     ba4:	ldr	r3, [pc, #84]	; (bfc <acq_isr()+0x100>)
     ba6:	ldrsh.w	r3, [r3]
     baa:	cbz	r3, bb2 <acq_isr()+0xb6>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     bac:	cmp	r3, #1
     bae:	beq.n	bc6 <acq_isr()+0xca>
     bb0:	pop	{r3, r4, r5, pc}
  data1=acqBuffer[NBUF_ACQ-1];
  */

  if(proc==0)
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     bb2:	ldr	r0, [pc, #76]	; (c00 <acq_isr()+0x104>)
     bb4:	bl	a8 <pushData(unsigned long*)>
     bb8:	cmp	r0, #0
     bba:	bne.n	bb0 <acq_isr()+0xb4>
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     bbc:	ldr	r2, [pc, #68]	; (c04 <acq_isr()+0x108>)
     bbe:	ldr	r3, [r2, #0]
     bc0:	adds	r3, #1
     bc2:	str	r3, [r2, #0]
     bc4:	pop	{r3, r4, r5, pc}
     bc6:	ldr	r0, [pc, #56]	; (c00 <acq_isr()+0x104>)
     bc8:	bl	824 <compress(void*)>
     bcc:	cmp	r0, #0
     bce:	beq.n	bbc <acq_isr()+0xc0>
     bd0:	b.n	bb0 <acq_isr()+0xb4>
     bd2:	nop
     bd4:	.word	0x20021278
     bd8:	.word	0x400e8000
     bdc:	.word	0x20200400
     be0:	.word	0xe000ef5c
     be4:	.word	0x200224a8
     be8:	.word	0x0365c040
     bec:	.word	0x20021f0c
     bf0:	.word	0x20021c70
     bf4:	.word	0x20021e70
     bf8:	.word	0x20021e74
     bfc:	.word	0x200224a4
     c00:	.word	0x20021c74
     c04:	.word	0x20021f10

00000c08 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     c08:	push	{r4, lr}
     c0a:	mov	r4, r0
		release();
     c0c:	bl	88b0 <DMAChannel::release()>
	}
     c10:	mov	r0, r4
     c12:	pop	{r4, pc}

00000c14 <set_audioClock(int, long, unsigned long)>:

  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     c14:	and.w	r0, r0, #63	; 0x3f
     c18:	ldr	r3, [pc, #68]	; (c60 <set_audioClock(int, long, unsigned long)+0x4c>)

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     c1a:	bic.w	r2, r2, #3758096384	; 0xe0000000
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     c1e:	bic.w	r1, r1, #3758096384	; 0xe0000000

  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     c22:	orr.w	r0, r0, #1122304	; 0x112000

/*======================================================================================*/
#elif defined(__IMXRT1062__)

  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
     c26:	push	{r4}
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     c28:	str	r0, [r3, #112]	; 0x70

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     c2a:	mov	r4, r3
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     c2c:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     c30:	str.w	r2, [r3, #144]	; 0x90
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     c34:	ldr	r2, [r3, #112]	; 0x70
     c36:	bic.w	r2, r2, #4096	; 0x1000
     c3a:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     c3c:	ldr	r3, [r4, #112]	; 0x70
     c3e:	ldr	r2, [pc, #32]	; (c60 <set_audioClock(int, long, unsigned long)+0x4c>)
     c40:	cmp	r3, #0
     c42:	bge.n	c3c <set_audioClock(int, long, unsigned long)+0x28>
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     c44:	ldr.w	r1, [r2, #368]	; 0x170
     c48:	ldr	r3, [pc, #24]	; (c64 <set_audioClock(int, long, unsigned long)+0x50>)
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
  }
     c4a:	ldr.w	r4, [sp], #4
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     c4e:	ands	r3, r1
     c50:	str.w	r3, [r2, #368]	; 0x170
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     c54:	ldr	r3, [r2, #112]	; 0x70
     c56:	bic.w	r3, r3, #65536	; 0x10000
     c5a:	str	r3, [r2, #112]	; 0x70
  }
     c5c:	bx	lr
     c5e:	nop
     c60:	.word	0x400d8000
     c64:	.word	0xff7f7fff

00000c68 <setAudioFrequency(int)>:
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     c68:	vmov	s15, r0

  void setAudioFrequency(int fs)
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     c6c:	lsls	r0, r0, #10

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     c6e:	vmov.f64	d4, #16	; 0x40800000  4.0
    int c0 = C;
    int c2 = 10000;
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);
     c72:	movw	r1, #10000	; 0x2710
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     c76:	vcvt.f64.s32	d5, s15
    int c0 = C;
    int c2 = 10000;
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);
     c7a:	mov	r2, r1
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     c7c:	vldr	d6, [pc, #128]	; d00 <setAudioFrequency(int)+0x98>
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
  }

  void setAudioFrequency(int fs)
  {
     c80:	push	{r3, r4, r5, lr}
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     c82:	ldr	r3, [pc, #148]	; (d18 <setAudioFrequency(int)+0xb0>)

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     c84:	vmul.f64	d6, d5, d6
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    // Select MCLK
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     c88:	ldr	r5, [pc, #144]	; (d1c <setAudioFrequency(int)+0xb4>)

  void setAudioFrequency(int fs)
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     c8a:	sdiv	r4, r3, r0

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     c8e:	adds	r3, r4, #1
     c90:	vmul.f64	d6, d6, d4
      // clear SAI1_CLK register locations
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     c94:	and.w	r4, r4, #63	; 0x3f
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     c98:	vmov	s14, r3
     c9c:	vcvt.f64.s32	d5, s14
     ca0:	vldr	d3, [pc, #100]	; d08 <setAudioFrequency(int)+0xa0>
     ca4:	vmul.f64	d7, d6, d5
    int c0 = C;
    int c2 = 10000;
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);
     ca8:	vldr	d4, [pc, #100]	; d10 <setAudioFrequency(int)+0xa8>
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     cac:	vdiv.f64	d6, d7, d3
    int c0 = C;
     cb0:	vcvt.s32.f64	s15, d6
     cb4:	vmov	r0, s15
    int c2 = 10000;
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);
     cb8:	mul.w	r3, r1, r0
     cbc:	vmov	s14, r3
     cc0:	vcvt.f64.s32	d7, s14
     cc4:	vfnms.f64	d7, d6, d4
     cc8:	vcvt.s32.f64	s15, d7
     ccc:	vmov	r1, s15
     cd0:	bl	c14 <set_audioClock(int, long, unsigned long)>

      // clear SAI1_CLK register locations
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     cd4:	ldr	r0, [pc, #72]	; (d20 <setAudioFrequency(int)+0xb8>)
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     cd6:	ldr	r2, [pc, #76]	; (d24 <setAudioFrequency(int)+0xbc>)
    int c2 = 10000;
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);

      // clear SAI1_CLK register locations
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     cd8:	ldr	r1, [r0, #28]
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    // Select MCLK
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
      & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     cda:	ldr	r3, [pc, #76]	; (d28 <setAudioFrequency(int)+0xc0>)
    int c1 = C * c2 - (c0 * c2);
    set_audioClock(c0, c1, c2);

      // clear SAI1_CLK register locations
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     cdc:	bic.w	r1, r1, #3072	; 0xc00
     ce0:	orr.w	r1, r1, #2048	; 0x800
     ce4:	str	r1, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     ce6:	ldr	r1, [r0, #40]	; 0x28
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     ce8:	ands	r2, r1
     cea:	orr.w	r2, r2, #192	; 0xc0
     cee:	orrs	r4, r2
     cf0:	str	r4, [r0, #40]	; 0x28
    // Select MCLK
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     cf2:	ldr	r2, [r5, #4]
      & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     cf4:	ands	r3, r2
     cf6:	orr.w	r3, r3, #524288	; 0x80000
     cfa:	str	r3, [r5, #4]
     cfc:	pop	{r3, r4, r5, pc}
     cfe:	nop
     d00:	.word	0x00000000
     d04:	.word	0x40700000
     d08:	.word	0x00000000
     d0c:	.word	0x4176e360
     d10:	.word	0x00000000
     d14:	.word	0x40c38800
     d18:	.word	0x269fb200
     d1c:	.word	0x400ac000
     d20:	.word	0x400fc000
     d24:	.word	0xfffffe00
     d28:	.word	0xfff7fff8

00000d2c <i2s_setup()>:

  }

  void i2s_setup(void)
  {
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     d2c:	ldr	r2, [pc, #104]	; (d98 <i2s_setup()+0x6c>)
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

  }

  void i2s_setup(void)
  {
     d2e:	push	{r3, r4, r5, r6, r7, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     d30:	ldr	r3, [r2, #124]	; 0x7c

    // if receiver is enabled, do nothing
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     d32:	ldr	r4, [pc, #104]	; (d9c <i2s_setup()+0x70>)

  }

  void i2s_setup(void)
  {
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     d34:	orr.w	r3, r3, #786432	; 0xc0000
     d38:	str	r3, [r2, #124]	; 0x7c

    // if receiver is enabled, do nothing
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     d3a:	ldr.w	r3, [r4, #136]	; 0x88
     d3e:	cmp	r3, #0
     d40:	blt.n	d96 <i2s_setup()+0x6a>
  //PLL:
    int fs = fsamp;
     d42:	ldr	r3, [pc, #92]	; (da0 <i2s_setup()+0x74>)
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;

    I2S1_RMR = 0;
     d44:	movs	r7, #0
    //I2S1_RCSR = (1<<25); //Reset
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     d46:	movs	r6, #1
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
              | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
     d48:	ldr	r5, [pc, #88]	; (da4 <i2s_setup()+0x78>)
    // if receiver is enabled, do nothing
    if (I2S1_RCSR & I2S_RCSR_RE) return;
  //PLL:
    int fs = fsamp;
  
    setAudioFrequency(fs);
     d4a:	ldr	r0, [r3, #0]
     d4c:	bl	c68 <setAudioFrequency(int)>

    CORE_PIN23_CONFIG = 3;  //1:MCLK
     d50:	ldr	r3, [pc, #84]	; (da8 <i2s_setup()+0x7c>)
     d52:	movs	r2, #3
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     d54:	ldr.w	lr, [pc, #96]	; db8 <i2s_setup()+0x8c>
     d58:	mov.w	ip, #2
    I2S1_RMR = 0;
    //I2S1_RCSR = (1<<25); //Reset
    I2S1_RCR1 = I2S_RCR1_RFW(1);
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
              | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
    I2S1_RCR3 = I2S_RCR3_RCE;
     d5c:	mov.w	r0, #65536	; 0x10000
  //PLL:
    int fs = fsamp;
  
    setAudioFrequency(fs);

    CORE_PIN23_CONFIG = 3;  //1:MCLK
     d60:	str.w	r2, [r3, #288]	; 0x120
    I2S1_RCR1 = I2S_RCR1_RFW(1);
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
              | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
    I2S1_RCR3 = I2S_RCR3_RCE;
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
          | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
     d64:	ldr	r1, [pc, #68]	; (dac <i2s_setup()+0x80>)
    int fs = fsamp;
  
    setAudioFrequency(fs);

    CORE_PIN23_CONFIG = 3;  //1:MCLK
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     d66:	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     d6a:	str.w	r2, [r3, #292]	; 0x124

  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     d6e:	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
              | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
    I2S1_RCR3 = I2S_RCR3_RCE;
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
          | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     d72:	ldr	r2, [pc, #60]	; (db0 <i2s_setup()+0x84>)

    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     d74:	ldr	r3, [pc, #60]	; (db4 <i2s_setup()+0x88>)
    CORE_PIN23_CONFIG = 3;  //1:MCLK
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     d76:	str.w	ip, [lr, #404]	; 0x194

    I2S1_RMR = 0;
     d7a:	str.w	r7, [r4, #224]	; 0xe0
    //I2S1_RCSR = (1<<25); //Reset
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     d7e:	str.w	r6, [r4, #140]	; 0x8c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
              | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
     d82:	str.w	r5, [r4, #144]	; 0x90
    I2S1_RCR3 = I2S_RCR3_RCE;
     d86:	str.w	r0, [r4, #148]	; 0x94
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
          | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
     d8a:	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     d8e:	str.w	r2, [r4, #156]	; 0x9c

    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     d92:	str.w	r3, [r4, #136]	; 0x88
     d96:	pop	{r3, r4, r5, r6, r7, pc}
     d98:	.word	0x400fc000
     d9c:	.word	0x40384000
     da0:	.word	0x20002174
     da4:	.word	0x07000001
     da8:	.word	0x401f8000
     dac:	.word	0x00011f1b
     db0:	.word	0x1f1f1f00
     db4:	.word	0x92000001
     db8:	.word	0x401f8400

00000dbc <dma_setup()>:
  static DMAChannel dma;
  DMAMEM __attribute__((aligned(32))) static  uint32_t i2s_buffer[2*NBUF_I2S];
  static void acq_isr(void);

  void dma_setup(void)
  {
     dbc:	push	{r3, r4, r5, r6, r7, lr}
    dma.begin(true); // Allocate the DMA channel first
     dbe:	ldr	r4, [pc, #124]	; (e3c <dma_setup()+0x80>)
     dc0:	movs	r1, #1

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     dc2:	ldr	r5, [pc, #124]	; (e40 <dma_setup()+0x84>)
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     dc4:	movs	r6, #4
  DMAMEM __attribute__((aligned(32))) static  uint32_t i2s_buffer[2*NBUF_I2S];
  static void acq_isr(void);

  void dma_setup(void)
  {
    dma.begin(true); // Allocate the DMA channel first
     dc6:	mov	r0, r4
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     dc8:	movs	r7, #96	; 0x60
     dca:	bl	8810 <DMAChannel::begin(bool)>

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     dce:	ldr	r3, [r4, #0]
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     dd0:	mov.w	r2, #512	; 0x200
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
     dd4:	ldr	r0, [pc, #108]	; (e44 <dma_setup()+0x88>)

  void dma_setup(void)
  {
    dma.begin(true); // Allocate the DMA channel first

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     dd6:	str	r5, [r3, #0]
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
     dd8:	movw	r5, #514	; 0x202
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
     ddc:	str	r0, [r3, #16]
  void dma_setup(void)
  {
    dma.begin(true); // Allocate the DMA channel first

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
     dde:	movs	r1, #0
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     de0:	strh	r2, [r3, #22]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     de2:	mov.w	lr, #6
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     de6:	ldrh	r0, [r3, #22]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     de8:	movs	r2, #1
  {
    dma.begin(true); // Allocate the DMA channel first

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
     dea:	strh	r5, [r3, #6]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     dec:	subw	r5, r5, #2562	; 0xa02
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     df0:	uxth	r0, r0
  void dma_setup(void)
  {
    dma.begin(true); // Allocate the DMA channel first

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
     df2:	strh	r1, [r3, #4]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     df4:	str	r5, [r3, #24]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     df6:	strh	r0, [r3, #30]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     df8:	ldrb	r5, [r4, #4]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     dfa:	strh.w	lr, [r3, #28]
     dfe:	ldr	r0, [pc, #72]	; (e48 <dma_setup()+0x8c>)
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     e00:	ldr.w	lr, [pc, #92]	; e60 <dma_setup()+0xa4>

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
    dma.TCD->SLAST = 0;
     e04:	str	r1, [r3, #12]
    dma.begin(true); // Allocate the DMA channel first

    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
    dma.TCD->SOFF = 0;
    dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     e06:	str	r6, [r3, #8]
    dma.TCD->SLAST = 0;
    dma.TCD->DADDR = i2s_buffer;
    dma.TCD->DOFF = (MBIT/8);
     e08:	strh	r6, [r3, #20]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
     e0a:	str.w	r1, [r0, r5, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     e0e:	str.w	lr, [r0, r5, lsl #2]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     e12:	ldrb	r3, [r4, #4]
     e14:	ldr	r1, [pc, #52]	; (e4c <dma_setup()+0x90>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     e16:	and.w	r0, r3, #31
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     e1a:	add.w	r5, r3, #16
     e1e:	ldr	r6, [pc, #48]	; (e50 <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     e20:	asrs	r3, r3, #5
     e22:	lsls	r2, r0
     e24:	ldr	r0, [pc, #44]	; (e54 <dma_setup()+0x98>)
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     e26:	str.w	r6, [r1, r5, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     e2a:	str.w	r2, [r0, r3, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     e2e:	ldr	r1, [pc, #40]	; (e58 <dma_setup()+0x9c>)
     e30:	ldrb	r2, [r4, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     e32:	ldr	r3, [pc, #40]	; (e5c <dma_setup()+0xa0>)
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     e34:	strb	r7, [r2, r1]
     e36:	ldrb	r2, [r4, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     e38:	strb	r2, [r3, #27]
     e3a:	pop	{r3, r4, r5, r6, r7, pc}
     e3c:	.word	0x20021278
     e40:	.word	0x403840a0
     e44:	.word	0x20200000
     e48:	.word	0x400ec000
     e4c:	.word	0x20002400
     e50:	.word	0x00000afd
     e54:	.word	0xe000e100
     e58:	.word	0xe000e400
     e5c:	.word	0x400e8000
     e60:	.word	0x80000013

00000e64 <acqModifyFrequency(unsigned long)>:
      putAudio(src);
    #endif
  }

  void acqModifyFrequency(uint32_t fsamp)
  {
     e64:	push	{r4, lr}
    // stop I2S
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     e66:	ldr	r4, [pc, #32]	; (e88 <acqModifyFrequency(unsigned long)+0x24>)
     e68:	ldr.w	r3, [r4, #136]	; 0x88
     e6c:	bic.w	r3, r3, #2415919104	; 0x90000000
     e70:	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     e74:	bl	c68 <setAudioFrequency(int)>
    //restart I2S
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     e78:	ldr.w	r3, [r4, #136]	; 0x88
     e7c:	orr.w	r3, r3, #2415919104	; 0x90000000
     e80:	str.w	r3, [r4, #136]	; 0x88
     e84:	pop	{r4, pc}
     e86:	nop
     e88:	.word	0x40384000

00000e8c <_GLOBAL__sub_I_procCount>:
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
  }
}
     e8c:	push	{r4, lr}
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
     e8e:	ldr	r4, [pc, #24]	; (ea8 <_GLOBAL__sub_I_procCount+0x1c>)
     e90:	movs	r1, #0
     e92:	mov	r0, r4
     e94:	bl	8810 <DMAChannel::begin(bool)>
  }

  /***************************************************************************/
  #include "DMAChannel.h"

  static DMAChannel dma;
     e98:	mov	r0, r4
     e9a:	ldr	r2, [pc, #16]	; (eac <_GLOBAL__sub_I_procCount+0x20>)
     e9c:	ldr	r1, [pc, #16]	; (eb0 <_GLOBAL__sub_I_procCount+0x24>)
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
  }
}
     e9e:	ldmia.w	sp!, {r4, lr}
  }

  /***************************************************************************/
  #include "DMAChannel.h"

  static DMAChannel dma;
     ea2:	b.w	8c9c <__aeabi_atexit>
     ea6:	nop
     ea8:	.word	0x20021278
     eac:	.word	0x20001bb8
     eb0:	.word	0x00000c09

00000eb4 <Print::availableForWrite()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     eb4:	movs	r0, #0
     eb6:	bx	lr

00000eb8 <SdCardInterface::hasDedicatedSpi()>:
  /** \return error code. */
  virtual uint8_t errorCode() const = 0;
  /** \return error data. */
  virtual uint32_t errorData() const = 0;
  /** \return false by default */
  virtual bool hasDedicatedSpi() { return false; }
     eb8:	movs	r0, #0
     eba:	bx	lr

00000ebc <SdCardInterface::isDedicatedSpi()>:
  /** \return false by default */
  bool virtual isDedicatedSpi() { return false; }
     ebc:	movs	r0, #0
     ebe:	bx	lr

00000ec0 <SdCardInterface::setDedicatedSpi(bool)>:
   * \return false by default.
   */
  virtual bool setDedicatedSpi(bool value) {
    (void)value;
    return false;
  }
     ec0:	movs	r0, #0
     ec2:	bx	lr

00000ec4 <SdCardInterface::status()>:
   * \param[out] sds location for 64 status bytes.
   * \return true for success or false for failure.
   */
  virtual bool readSDS(sds_t* sds) = 0;
  /** \return card status. */
  virtual uint32_t status() { return 0XFFFFFFFF; }
     ec4:	mov.w	r0, #4294967295
     ec8:	bx	lr
     eca:	nop

00000ecc <SdFs::~SdFs()>:
//------------------------------------------------------------------------------
/**
 * \class SdFs
 * \brief SD file system class for FAT16, FAT32, and exFAT volumes.
 */
class SdFs : public SdBase<FsVolume, FsFormatter> {
     ecc:	bx	lr
     ece:	nop

00000ed0 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

uint32_t SerNum=0;

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
     ed0:	push	{r4, r5, r6, lr}
     ed2:	sub	sp, #8
     ed4:	mov	r6, r0
     ed6:	mov	r5, r2
     ed8:	mov	r4, r1
    datetime_t t;
    rtc_get_datetime(&t);
     eda:	mov	r0, sp
     edc:	bl	7b0 <rtc_get_datetime(datetime_t*)>

    *date = FS_DATE(t.year,t.month,t.day);
     ee0:	ldrb.w	r2, [sp, #2]
     ee4:	ldrb.w	r0, [sp, #3]
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     ee8:	ldrh.w	r3, [sp]
  return year > 127 || month > 12 || day > 31 ? 0
     eec:	cmp	r2, #12
     eee:	it	ls
     ef0:	cmpls	r0, #31
     ef2:	bhi.n	f38 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x68>
     ef4:	subw	r3, r3, #1980	; 0x7bc
     ef8:	uxth	r3, r3
     efa:	cmp	r3, #127	; 0x7f
     efc:	bhi.n	f38 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x68>
                                              : year << 9 | month << 5 | day;
     efe:	orr.w	r0, r0, r2, lsl #5
     f02:	orr.w	r0, r0, r3, lsl #9
     f06:	uxth	r0, r0
    *time = FS_TIME(t.hour,t.min,t.sec);
     f08:	ldrb.w	r2, [sp, #5]
     f0c:	ldrb.w	r3, [sp, #6]
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
    datetime_t t;
    rtc_get_datetime(&t);

    *date = FS_DATE(t.year,t.month,t.day);
     f10:	strh	r0, [r6, #0]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
     f12:	cmp	r3, #59	; 0x3b
     f14:	it	ls
     f16:	cmpls	r2, #23
    *time = FS_TIME(t.hour,t.min,t.sec);
     f18:	ldrb.w	r1, [sp, #7]
     f1c:	bhi.n	f3c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6c>
     f1e:	cmp	r1, #59	; 0x3b
     f20:	bhi.n	f3c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6c>
             ? 0
             : hour << 11 | minute << 5 | second >> 1;
     f22:	lsls	r0, r3, #5
     f24:	orr.w	r3, r0, r2, lsl #11
     f28:	orr.w	r3, r3, r1, lsr #1
     f2c:	uxth	r3, r3
    *ms10 = 0;
     f2e:	movs	r2, #0
{
    datetime_t t;
    rtc_get_datetime(&t);

    *date = FS_DATE(t.year,t.month,t.day);
    *time = FS_TIME(t.hour,t.min,t.sec);
     f30:	strh	r3, [r4, #0]
    *ms10 = 0;
     f32:	strb	r2, [r5, #0]
}
     f34:	add	sp, #8
     f36:	pop	{r4, r5, r6, pc}
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0
                                              : year << 9 | month << 5 | day;
     f38:	movs	r0, #0
     f3a:	b.n	f08 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x38>
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
             ? 0
             : hour << 11 | minute << 5 | second >> 1;
     f3c:	movs	r3, #0
     f3e:	b.n	f2e <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x5e>

00000f40 <FsFile::~FsFile()>:
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template <class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     f40:	ldr	r3, [pc, #16]	; (f54 <FsFile::~FsFile()+0x14>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f42:	push	{r4, lr}
     f44:	mov	r4, r0
     f46:	str.w	r3, [r0], #16
   * \param[in] oflag Values for \a oflag are constructed by a bitwise-inclusive
   * OR of open flags. see FatFile::open(FatFile*, const char*, uint8_t).
   */
  FsBaseFile(const char* path, oflag_t oflag) { open(path, oflag); }

  ~FsBaseFile() { close(); }
     f4a:	bl	4a8c <FsBaseFile::close()>
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f4e:	mov	r0, r4
     f50:	pop	{r4, pc}
     f52:	nop
     f54:	.word	0x200003b0

00000f58 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() { return BaseFile::read(); }
     f58:	ldr	r3, [r0, #72]	; 0x48
     f5a:	push	{lr}
     f5c:	sub	sp, #12
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile   ? m_fFile->read(buf, count)
           : m_xFile ? m_xFile->read(buf, count)
                     : -1;
     f5e:	cbz	r3, f7a <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     f60:	mov	r0, r3
     f62:	movs	r2, #1
     f64:	add.w	r1, sp, #7
     f68:	bl	3a98 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     f6c:	cmp	r0, #1
     f6e:	bne.n	f8a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     f70:	ldrb.w	r0, [sp, #7]
     f74:	add	sp, #12
     f76:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile   ? m_fFile->read(buf, count)
           : m_xFile ? m_xFile->read(buf, count)
     f7a:	ldr	r0, [r0, #76]	; 0x4c
                     : -1;
     f7c:	cbz	r0, f8a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     f7e:	movs	r2, #1
     f80:	add.w	r1, sp, #7
     f84:	bl	21fc <ExFatFile::read(void*, unsigned int)>
     f88:	b.n	f6c <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     f8a:	mov.w	r0, #4294967295
     f8e:	b.n	f74 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000f90 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() { return BaseFile::available(); }
     f90:	ldr	r2, [r0, #72]	; 0x48
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     f92:	cbz	r2, fae <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     f94:	ldrb	r3, [r2, #0]
     f96:	and.w	r3, r3, #8
     f9a:	and.w	r0, r3, #255	; 0xff
     f9e:	cbz	r3, fe4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     fa0:	ldr	r3, [r2, #28]
     fa2:	ldr	r0, [r2, #20]
     fa4:	subs	r0, r3, r0
     fa6:	it	mi
     fa8:	mvnmi.w	r0, #2147483648	; 0x80000000
     fac:	bx	lr
     fae:	ldr	r1, [r0, #76]	; 0x4c
     fb0:	cbz	r1, fe6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
    return n > INT_MAX ? INT_MAX : n;
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     fb2:	ldrb.w	r3, [r1, #49]	; 0x31
     fb6:	and.w	r3, r3, #8
     fba:	and.w	r0, r3, #255	; 0xff
     fbe:	cbz	r3, fe4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
     fc0:	ldrd	r2, r3, [r1, #16]
     fc4:	ldrd	r0, r1, [r1]
     fc8:	push	{r4, r5}
     fca:	subs	r0, r2, r0
     fcc:	mov.w	r5, #0
     fd0:	mvn.w	r4, #2147483648	; 0x80000000
     fd4:	sbc.w	r1, r3, r1
     fd8:	cmp	r5, r1
     fda:	it	eq
     fdc:	cmpeq	r4, r0
     fde:	bcs.n	fe2 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     fe0:	mov	r0, r4
     fe2:	pop	{r4, r5}
     fe4:	bx	lr
     fe6:	mov	r0, r1
     fe8:	bx	lr
     fea:	nop

00000fec <StreamFile<FsBaseFile, unsigned long long>::peek()>:
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() { return BaseFile::peek(); }
     fec:	ldr	r3, [r0, #72]	; 0x48
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     fee:	cbz	r3, ff6 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     ff0:	mov	r0, r3
     ff2:	b.w	3c34 <FatFile::peek()>
     ff6:	ldr	r0, [r0, #76]	; 0x4c
     ff8:	cbz	r0, ffe <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     ffa:	b.w	23b0 <ExFatFile::peek()>
     ffe:	mov.w	r0, #4294967295
    1002:	bx	lr

00001004 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() { return BaseFile::available(); }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() { BaseFile::sync(); }
    1004:	ldr	r3, [r0, #72]	; 0x48
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    1006:	cbz	r3, 100e <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
    1008:	mov	r0, r3
    100a:	b.w	3e30 <FatFile::sync()>
    100e:	ldr	r0, [r0, #76]	; 0x4c
    1010:	cbz	r0, 1016 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
    1012:	b.w	3018 <ExFatFile::sync()>
    1016:	bx	lr

00001018 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    1018:	ldr	r3, [r0, #72]	; 0x48
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
                     : 0;
    101a:	cbz	r3, 1022 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
    101c:	mov	r0, r3
    101e:	b.w	3e3c <FatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
    1022:	ldr	r0, [r0, #76]	; 0x4c
                     : 0;
    1024:	cbz	r0, 102a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
    1026:	b.w	3330 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
    102a:	bx	lr

0000102c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) { return BaseFile::write(b); }
    102c:	push	{lr}
    102e:	ldr	r3, [r0, #72]	; 0x48
    1030:	sub	sp, #12
    1032:	strb.w	r1, [sp, #7]
    1036:	cbz	r3, 104a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
    1038:	mov	r0, r3
    103a:	movs	r2, #1
    103c:	add.w	r1, sp, #7
    1040:	bl	3e3c <FatFile::write(void const*, unsigned int)>
    1044:	add	sp, #12
    1046:	ldr.w	pc, [sp], #4
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
    104a:	ldr	r0, [r0, #76]	; 0x4c
                     : 0;
    104c:	cmp	r0, #0
    104e:	beq.n	1044 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
    1050:	movs	r2, #1
    1052:	add.w	r1, sp, #7
    1056:	bl	3330 <ExFatFile::write(void const*, unsigned int)>
    105a:	add	sp, #12
    105c:	ldr.w	pc, [sp], #4

00001060 <filing_init()>:
#    FsDateTime::callback = dateTime;

    flash_get_unique_id((uint8_t *) UniqueID);
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    1060:	ldr	r3, [pc, #144]	; (10f4 <filing_init()+0x94>)
    1062:	ldr	r0, [pc, #148]	; (10f8 <filing_init()+0x98>)
    1064:	ldr.w	r3, [r3, #544]	; 0x220
  #endif

  FsDateTime::callback = dateTime;
    1068:	ldr	r2, [pc, #144]	; (10fc <filing_init()+0x9c>)
#    FsDateTime::callback = dateTime;

    flash_get_unique_id((uint8_t *) UniqueID);
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    106a:	bic.w	r3, r3, #4278190080	; 0xff000000
  #endif

  FsDateTime::callback = dateTime;
    106e:	ldr	r1, [pc, #144]	; (1100 <filing_init()+0xa0>)
    *time = FS_TIME(t.hour,t.min,t.sec);
    *ms10 = 0;
}

int16_t filing_init(void)
{
    1070:	push	{r4, r5, r6, r7, lr}
    1072:	ldr	r5, [pc, #144]	; (1104 <filing_init()+0xa4>)
    1074:	sub	sp, #12
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
  #endif

  FsDateTime::callback = dateTime;
    1076:	movs	r4, #5
#    FsDateTime::callback = dateTime;

    flash_get_unique_id((uint8_t *) UniqueID);
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    1078:	str	r3, [r0, #0]
    107a:	addw	r6, r5, #1164	; 0x48c
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    107e:	mov	r7, r5
  #endif

  FsDateTime::callback = dateTime;
    1080:	str	r1, [r2, #0]
    1082:	mov.w	r1, #0
    1086:	ldr	r0, [pc, #128]	; (1108 <filing_init()+0xa8>)
    1088:	bl	6094 <SdioCard::begin(SdioConfig)>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    return m_card && !m_card->errorCode();
    108c:	ldr	r0, [pc, #120]	; (1108 <filing_init()+0xa8>)
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    108e:	str.w	r6, [r5, #1160]	; 0x488
    return m_card && !m_card->errorCode();
    1092:	bl	5728 <SdioCard::errorCode() const>
    1096:	cbz	r0, 10c4 <filing_init()+0x64>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1098:	movs	r1, #15
    109a:	ldr	r0, [pc, #112]	; (110c <filing_init()+0xac>)
    109c:	bl	7138 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    10a0:	ldr	r0, [pc, #108]	; (1110 <filing_init()+0xb0>)
    10a2:	bl	89e4 <Print::println()>
      haveStore=1;
      return 1;
    }
    else
    { Serial.println("still trying..."); 
      delay(100);
    10a6:	movs	r0, #100	; 0x64
    10a8:	bl	7e1c <delay>
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
  #endif

  FsDateTime::callback = dateTime;

  for(int ii=0; ii<5;ii++)
    10ac:	subs	r4, #1
    10ae:	bne.n	1082 <filing_init()+0x22>
    10b0:	movs	r1, #27
    10b2:	ldr	r0, [pc, #96]	; (1114 <filing_init()+0xb4>)
    10b4:	bl	7138 <usb_serial_write>
    10b8:	ldr	r0, [pc, #84]	; (1110 <filing_init()+0xb0>)
    10ba:	bl	89e4 <Print::println()>
    }
  }

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
    10be:	mov	r0, r4
}
    10c0:	add	sp, #12
    10c2:	pop	{r4, r5, r6, r7, pc}
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    10c4:	movs	r3, #1
    10c6:	ldr.w	r1, [r7, #1160]	; 0x488
    10ca:	str	r0, [sp, #0]
    10cc:	mov	r2, r3
    10ce:	ldr	r0, [pc, #52]	; (1104 <filing_init()+0xa4>)
    10d0:	bl	4bbc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    10d4:	cmp	r0, #0
    10d6:	beq.n	1098 <filing_init()+0x38>
    10d8:	movs	r1, #17
    10da:	ldr	r0, [pc, #60]	; (1118 <filing_init()+0xb8>)
    10dc:	bl	7138 <usb_serial_write>
    10e0:	ldr	r0, [pc, #44]	; (1110 <filing_init()+0xb0>)
    10e2:	bl	89e4 <Print::println()>

  for(int ii=0; ii<5;ii++)
  {
    if (sd.begin(SD_CONFIG)) 
    { Serial.println("card initialized.");
      haveStore=1;
    10e6:	movs	r3, #1
    10e8:	ldr	r2, [pc, #48]	; (111c <filing_init()+0xbc>)
      return 1;
    10ea:	mov	r0, r3

  for(int ii=0; ii<5;ii++)
  {
    if (sd.begin(SD_CONFIG)) 
    { Serial.println("card initialized.");
      haveStore=1;
    10ec:	str	r3, [r2, #0]
  }

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
}
    10ee:	add	sp, #12
    10f0:	pop	{r4, r5, r6, r7, pc}
    10f2:	nop
    10f4:	.word	0x401f4400
    10f8:	.word	0x20005864
    10fc:	.word	0x20021b98
    1100:	.word	0x00000ed1
    1104:	.word	0x20021fc4
    1108:	.word	0x20022450
    110c:	.word	0x20000ba4
    1110:	.word	0x20001bc8
    1114:	.word	0x20000bb4
    1118:	.word	0x20000bd0
    111c:	.word	0x20021edc

00001120 <timeStamp()>:

char * timeStamp(void)
{
    1120:	push	{r4, r5, r6, r7, lr}
    1122:	sub	sp, #28
  static char date_time[80];
  
  datetime_t t;
  rtc_get_datetime(&t);

  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    1124:	ldr	r4, [pc, #48]	; (1158 <timeStamp()+0x38>)
char * timeStamp(void)
{
  static char date_time[80];
  
  datetime_t t;
  rtc_get_datetime(&t);
    1126:	add	r0, sp, #16
    1128:	bl	7b0 <rtc_get_datetime(datetime_t*)>

  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    112c:	ldrsb.w	r1, [sp, #19]
    1130:	ldrsb.w	r7, [sp, #23]
    1134:	mov	r0, r4
    1136:	ldrsb.w	r6, [sp, #22]
    113a:	ldrsb.w	r5, [sp, #21]
    113e:	ldrsb.w	r3, [sp, #18]
    1142:	ldrsh.w	r2, [sp, #16]
    1146:	stmia.w	sp, {r1, r5, r6, r7}
    114a:	ldr	r1, [pc, #16]	; (115c <timeStamp()+0x3c>)
    114c:	bl	9cb4 <sprintf>
  return date_time;
}
    1150:	mov	r0, r4
    1152:	add	sp, #28
    1154:	pop	{r4, r5, r6, r7, pc}
    1156:	nop
    1158:	.word	0x20021bf0
    115c:	.word	0x20000be4

00001160 <headerInit(long, long, long, int)>:

char * headerInit(int32_t fsamp, int32_t nchan, int32_t nbits, int serNum)
{
  int nbytes=nbits/8;
    1160:	cmp	r2, #0

  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
  strcpy(wav_hdr.wId,"WAVE");
  strcpy(wav_hdr.fId,"fmt ");
    1162:	ldr.w	ip, [pc, #192]	; 1224 <headerInit(long, long, long, int)+0xc4>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
  return date_time;
}

char * headerInit(int32_t fsamp, int32_t nchan, int32_t nbits, int serNum)
{
    1166:	push	{r3, r4, r5, r6, r7, lr}
  int nbytes=nbits/8;
    1168:	ite	lt
    116a:	addlt	r5, r2, #7
    116c:	movge	r5, r2

  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
    116e:	ldr	r4, [pc, #152]	; (1208 <headerInit(long, long, long, int)+0xa8>)
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
  return date_time;
}

char * headerInit(int32_t fsamp, int32_t nchan, int32_t nbits, int serNum)
{
    1170:	mov	r6, r3
  int nbytes=nbits/8;
    1172:	asrs	r5, r5, #3

  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
    1174:	ldr.w	lr, [pc, #176]	; 1228 <headerInit(long, long, long, int)+0xc8>
  wav_hdr.iLen = 512 - 13*4;
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=1;
  wav_hdr.nSamplesPerSec=fsamp;
    1178:	str	r0, [r4, #24]
  strcpy(wav_hdr.wId,"WAVE");
  strcpy(wav_hdr.fId,"fmt ");
  strcpy(wav_hdr.dId,"data");
  strcpy(wav_hdr.iId,"info");

  wav_hdr.rLen=512-2*4; // will be updated at closing
    117a:	mov.w	r3, #504	; 0x1f8
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=1;
  wav_hdr.nSamplesPerSec=fsamp;
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    117e:	mul.w	r0, r0, r5
  int nbytes=nbits/8;

  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
  strcpy(wav_hdr.wId,"WAVE");
    1182:	ldr	r7, [pc, #136]	; (120c <headerInit(long, long, long, int)+0xac>)

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=1;
  wav_hdr.nSamplesPerSec=fsamp;
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
  wav_hdr.nBlockAlign=nchan*nbytes;
    1184:	smulbb	r5, r1, r5
  wav_hdr.nBitsPerSamples=nbits;
    1188:	strh	r2, [r4, #34]	; 0x22
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=1;
  wav_hdr.nSamplesPerSec=fsamp;
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    118a:	mul.w	r1, r1, r0
  strcpy(wav_hdr.fId,"fmt ");
  strcpy(wav_hdr.dId,"data");
  strcpy(wav_hdr.iId,"info");

  wav_hdr.rLen=512-2*4; // will be updated at closing
  wav_hdr.fLen=0x10;
    118e:	movs	r0, #16

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=1;
  wav_hdr.nSamplesPerSec=fsamp;
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
  wav_hdr.nBlockAlign=nchan*nbytes;
    1190:	strh	r5, [r4, #32]
  strcpy(wav_hdr.iId,"info");

  wav_hdr.rLen=512-2*4; // will be updated at closing
  wav_hdr.fLen=0x10;
  wav_hdr.iLen = 512 - 13*4;
  wav_hdr.dLen = 0; // will be updated at closing
    1192:	movs	r2, #0

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=1;
  wav_hdr.nSamplesPerSec=fsamp;
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    1194:	str	r1, [r4, #28]
  strcpy(wav_hdr.dId,"data");
  strcpy(wav_hdr.iId,"info");

  wav_hdr.rLen=512-2*4; // will be updated at closing
  wav_hdr.fLen=0x10;
  wav_hdr.iLen = 512 - 13*4;
    1196:	mov.w	r1, #460	; 0x1cc
  strcpy(wav_hdr.fId,"fmt ");
  strcpy(wav_hdr.dId,"data");
  strcpy(wav_hdr.iId,"info");

  wav_hdr.rLen=512-2*4; // will be updated at closing
  wav_hdr.fLen=0x10;
    119a:	str	r0, [r4, #16]
  wav_hdr.iLen = 512 - 13*4;
    119c:	str	r1, [r4, #40]	; 0x28
  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
  strcpy(wav_hdr.wId,"WAVE");
  strcpy(wav_hdr.fId,"fmt ");
  strcpy(wav_hdr.dId,"data");
    119e:	ldr	r5, [pc, #112]	; (1210 <headerInit(long, long, long, int)+0xb0>)
  strcpy(wav_hdr.iId,"info");

  wav_hdr.rLen=512-2*4; // will be updated at closing
    11a0:	str	r3, [r4, #4]
  wav_hdr.fLen=0x10;
  wav_hdr.iLen = 512 - 13*4;
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
    11a2:	movs	r3, #1
  strcpy(wav_hdr.iId,"info");

  wav_hdr.rLen=512-2*4; // will be updated at closing
  wav_hdr.fLen=0x10;
  wav_hdr.iLen = 512 - 13*4;
  wav_hdr.dLen = 0; // will be updated at closing
    11a4:	str.w	r2, [r4, #508]	; 0x1fc

  strcpy(wav_hdr.rId,"RIFF");
  strcpy(wav_hdr.wId,"WAVE");
  strcpy(wav_hdr.fId,"fmt ");
  strcpy(wav_hdr.dId,"data");
  strcpy(wav_hdr.iId,"info");
    11a8:	ldr	r2, [pc, #104]	; (1214 <headerInit(long, long, long, int)+0xb4>)
  wav_hdr.rLen=512-2*4; // will be updated at closing
  wav_hdr.fLen=0x10;
  wav_hdr.iLen = 512 - 13*4;
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
    11aa:	strh	r3, [r4, #20]
  wav_hdr.nChannels=1;
    11ac:	strh	r3, [r4, #22]
  wav_hdr.nSamplesPerSec=fsamp;
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
  wav_hdr.nBlockAlign=nchan*nbytes;
  wav_hdr.nBitsPerSamples=nbits;

  strcpy(&wav_hdr.info[0], MAGIC);
    11ae:	ldr	r3, [pc, #104]	; (1218 <headerInit(long, long, long, int)+0xb8>)
{
  int nbytes=nbits/8;

  #define MAGIC "WMXZ"

  strcpy(wav_hdr.rId,"RIFF");
    11b0:	ldmia.w	lr, {r0, r1}
    11b4:	str	r0, [r4, #0]
  strcpy(wav_hdr.wId,"WAVE");
    11b6:	ldmia.w	r7, {r0, r1}
    11ba:	str	r0, [r4, #8]
  strcpy(wav_hdr.fId,"fmt ");
    11bc:	ldmia.w	ip, {r0, r1}
    11c0:	str	r0, [r4, #12]
  strcpy(wav_hdr.dId,"data");
    11c2:	ldmia.w	r5, {r0, r1}
    11c6:	str.w	r0, [r4, #504]	; 0x1f8
  strcpy(wav_hdr.iId,"info");
    11ca:	ldmia.w	r2, {r0, r1}
    11ce:	str	r0, [r4, #36]	; 0x24
  wav_hdr.nSamplesPerSec=fsamp;
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
  wav_hdr.nBlockAlign=nchan*nbytes;
  wav_hdr.nBitsPerSamples=nbits;

  strcpy(&wav_hdr.info[0], MAGIC);
    11d0:	ldmia.w	r3, {r0, r1}
    11d4:	strb.w	r1, [r4, #48]	; 0x30
    11d8:	str	r0, [r4, #44]	; 0x2c
  strcpy(&wav_hdr.info[4], timeStamp());
    11da:	bl	1120 <timeStamp()>
    11de:	mov	r1, r0
    11e0:	add.w	r0, r4, #48	; 0x30
    11e4:	bl	9d5c <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
    11e8:	mov	r2, r6
    11ea:	add.w	r0, r4, #64	; 0x40
    11ee:	ldr	r1, [pc, #44]	; (121c <headerInit(long, long, long, int)+0xbc>)
    11f0:	bl	9cb4 <sprintf>
  strcpy(&wav_hdr.info[30]," end");
    11f4:	ldr	r3, [pc, #40]	; (1220 <headerInit(long, long, long, int)+0xc0>)
    11f6:	ldr	r0, [r3, #0]
    11f8:	ldrb	r3, [r3, #4]
    11fa:	str.w	r0, [r4, #74]	; 0x4a

  return (char *)&wav_hdr;
}
    11fe:	mov	r0, r4
  wav_hdr.nBitsPerSamples=nbits;

  strcpy(&wav_hdr.info[0], MAGIC);
  strcpy(&wav_hdr.info[4], timeStamp());
  sprintf(&wav_hdr.info[20]," %8x",serNum);
  strcpy(&wav_hdr.info[30]," end");
    1200:	strb.w	r3, [r4, #78]	; 0x4e

  return (char *)&wav_hdr;
}
    1204:	pop	{r3, r4, r5, r6, r7, pc}
    1206:	nop
    1208:	.word	0x20021740
    120c:	.word	0x20000c08
    1210:	.word	0x20000c18
    1214:	.word	0x20000c20
    1218:	.word	0x20000c28
    121c:	.word	0x20000c30
    1220:	.word	0x20000c38
    1224:	.word	0x20000c10
    1228:	.word	0x20000c00

0000122c <writeHeader(char*)>:
  wav_hdr.rLen += wav_hdr.dLen;
  return (char *)&wav_hdr;
}

void writeHeader(char * wav_hdr) 
{ 
    122c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1230:	ldr	r4, [pc, #148]	; (12c8 <writeHeader(char*)+0x9c>)
    1232:	mov	r8, r0
    1234:	ldr	r3, [r4, #72]	; 0x48
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile   ? m_fFile->curPosition()
           : m_xFile ? m_xFile->curPosition()
                     : 0;
    1236:	cmp	r3, #0
    1238:	beq.n	12a0 <writeHeader(char*)+0x74>
    123a:	ldr	r5, [r3, #20]
    123c:	movs	r7, #0
    123e:	mov	r6, r5
  uint32_t fpos;
  fpos = file.curPosition();
  Serial.printf(" fpos=%d ",fpos);
    1240:	mov	r2, r5
    1242:	ldr	r1, [pc, #136]	; (12cc <writeHeader(char*)+0xa0>)
    1244:	ldr	r0, [pc, #136]	; (12d0 <writeHeader(char*)+0xa4>)
    1246:	bl	8a18 <Print::printf(char const*, ...)>
    124a:	ldr	r0, [r4, #72]	; 0x48
    124c:	ldr	r3, [pc, #120]	; (12c8 <writeHeader(char*)+0x9c>)
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
           : m_xFile ? m_xFile->seekSet(pos)
                     : false;
    124e:	cbz	r0, 12ae <writeHeader(char*)+0x82>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
    1250:	movs	r1, #0
    1252:	bl	3ca0 <FatFile::seekSet(unsigned long)>
    1256:	ldr	r0, [r4, #72]	; 0x48
    1258:	ldr	r3, [pc, #108]	; (12c8 <writeHeader(char*)+0x9c>)
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
                     : 0;
    125a:	cbz	r0, 1280 <writeHeader(char*)+0x54>
    125c:	mov	r1, r8
    125e:	mov.w	r2, #512	; 0x200
    1262:	bl	3e3c <FatFile::write(void const*, unsigned int)>
    1266:	ldr	r0, [r4, #72]	; 0x48
    1268:	ldr	r3, [pc, #92]	; (12c8 <writeHeader(char*)+0x9c>)
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
           : m_xFile ? m_xFile->seekSet(pos)
                     : false;
    126a:	cbnz	r0, 1296 <writeHeader(char*)+0x6a>
    126c:	ldr	r0, [r3, #76]	; 0x4c
    126e:	cbz	r0, 127c <writeHeader(char*)+0x50>
    1270:	mov	r2, r6
    1272:	mov	r3, r7
  file.seek(0);
  file.write(wav_hdr,512);
  file.seek(fpos);
}
    1274:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1278:	b.w	23dc <ExFatFile::seekSet(unsigned long long)>
    127c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1280:	ldr	r0, [r3, #76]	; 0x4c
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
                     : 0;
    1282:	cbz	r0, 12be <writeHeader(char*)+0x92>
    1284:	mov	r1, r8
    1286:	mov.w	r2, #512	; 0x200
    128a:	bl	3330 <ExFatFile::write(void const*, unsigned int)>
    128e:	ldr	r0, [r4, #72]	; 0x48
    1290:	ldr	r3, [pc, #52]	; (12c8 <writeHeader(char*)+0x9c>)
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
           : m_xFile ? m_xFile->seekSet(pos)
                     : false;
    1292:	cmp	r0, #0
    1294:	beq.n	126c <writeHeader(char*)+0x40>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
    1296:	mov	r1, r5
    1298:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    129c:	b.w	3ca0 <FatFile::seekSet(unsigned long)>
                     : 0;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile   ? m_fFile->curPosition()
           : m_xFile ? m_xFile->curPosition()
    12a0:	ldr	r5, [r4, #76]	; 0x4c
                     : 0;
    12a2:	cbz	r5, 12c2 <writeHeader(char*)+0x96>
    12a4:	ldrd	r6, r7, [r5]
    12a8:	movs	r7, #0
    12aa:	mov	r5, r6
    12ac:	b.n	1240 <writeHeader(char*)+0x14>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
           : m_xFile ? m_xFile->seekSet(pos)
    12ae:	ldr	r0, [r3, #76]	; 0x4c
                     : false;
    12b0:	cmp	r0, #0
    12b2:	beq.n	127c <writeHeader(char*)+0x50>
    12b4:	movs	r2, #0
    12b6:	movs	r3, #0
    12b8:	bl	23dc <ExFatFile::seekSet(unsigned long long)>
    12bc:	b.n	1256 <writeHeader(char*)+0x2a>
    12be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile   ? m_fFile->curPosition()
           : m_xFile ? m_xFile->curPosition()
                     : 0;
    12c2:	movs	r6, #0
    12c4:	movs	r7, #0
    12c6:	b.n	1240 <writeHeader(char*)+0x14>
    12c8:	.word	0x20021e8c
    12cc:	.word	0x20000c40
    12d0:	.word	0x20001bc8

000012d4 <makeHeader(long*)>:
   return wheader;
}
*/

int16_t makeHeader(int32_t *header)
{
    12d4:	push	{r4, r5, r6, r7, lr}
    12d6:	sub	sp, #36	; 0x24
    12d8:	mov	r4, r0
     * @param header is pointer to header
     * 
     */
    #define MAGIC "WMXZ"
    datetime_t t;
    rtc_get_datetime(&t);
    12da:	add	r0, sp, #24
    12dc:	bl	7b0 <rtc_get_datetime(datetime_t*)>

    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);
    12e0:	ldrsb.w	r7, [sp, #31]
    12e4:	ldrsb.w	r6, [sp, #30]
    12e8:	mov	r0, r4
    12ea:	ldrsb.w	r5, [sp, #29]
    12ee:	ldrsb.w	r1, [sp, #27]
    12f2:	ldrsb.w	r2, [sp, #26]
    12f6:	ldrsh.w	r3, [sp, #24]
    12fa:	str	r7, [sp, #16]
    12fc:	str	r6, [sp, #12]
    12fe:	str	r5, [sp, #8]
    1300:	str	r1, [sp, #4]
    1302:	str	r2, [sp, #0]
    1304:	ldr	r1, [pc, #76]	; (1354 <makeHeader(long*)+0x80>)
    1306:	ldr	r2, [pc, #80]	; (1358 <makeHeader(long*)+0x84>)
    1308:	bl	9cb4 <sprintf>

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    130c:	ldr	r1, [pc, #76]	; (135c <makeHeader(long*)+0x88>)
    header[7] = fsamp;
    130e:	ldr	r0, [pc, #80]	; (1360 <makeHeader(long*)+0x8c>)
    header[8] = NCH;
    1310:	movs	r3, #1

    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    1312:	ldr	r1, [r1, #0]
    rtc_get_datetime(&t);

    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    1314:	mov.w	ip, #20
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    1318:	ldr	r7, [pc, #72]	; (1364 <makeHeader(long*)+0x90>)
    header[10] = t_on;
    header[11] = t_off;
    header[12] = proc;
    header[13] = shift;

    header[127]=0x55555555;
    131a:	mov.w	r2, #1431655765	; 0x55555555
    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    header[10] = t_on;
    131e:	ldr	r6, [pc, #72]	; (1368 <makeHeader(long*)+0x94>)
    header[11] = t_off;
    1320:	ldr	r5, [pc, #72]	; (136c <makeHeader(long*)+0x98>)

    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    1322:	str	r1, [r4, #24]
    header[7] = fsamp;
    1324:	ldr	r1, [r0, #0]
    header[8] = NCH;
    header[9] = t_acq;
    1326:	ldr	r0, [r7, #0]
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    1328:	str	r1, [r4, #28]
    header[8] = NCH;
    header[9] = t_acq;
    header[10] = t_on;
    132a:	ldr	r7, [r6, #0]
    header[11] = t_off;
    header[12] = proc;
    header[13] = shift;
    132c:	ldr	r1, [pc, #64]	; (1370 <makeHeader(long*)+0x9c>)
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    header[10] = t_on;
    header[11] = t_off;
    132e:	ldr	r6, [r5, #0]
    header[12] = proc;
    1330:	ldr	r5, [pc, #64]	; (1374 <makeHeader(long*)+0xa0>)
    header[13] = shift;
    1332:	ldrsh.w	r1, [r1]
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    header[10] = t_on;
    header[11] = t_off;
    header[12] = proc;
    1336:	ldrsh.w	r5, [r5]

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    133a:	str	r0, [r4, #36]	; 0x24
    header[12] = proc;
    header[13] = shift;

    header[127]=0x55555555;
    return 1;
}
    133c:	mov	r0, r3
    rtc_get_datetime(&t);

    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    133e:	str.w	ip, [r4, #20]
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    header[9] = t_acq;
    header[10] = t_on;
    1342:	str	r7, [r4, #40]	; 0x28
    header[11] = t_off;
    1344:	str	r6, [r4, #44]	; 0x2c
    header[12] = proc;
    1346:	str	r5, [r4, #48]	; 0x30
    header[13] = shift;
    1348:	str	r1, [r4, #52]	; 0x34

    header[127]=0x55555555;
    134a:	str.w	r2, [r4, #508]	; 0x1fc
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = fsamp;
    header[8] = NCH;
    134e:	str	r3, [r4, #32]
    header[12] = proc;
    header[13] = shift;

    header[127]=0x55555555;
    return 1;
}
    1350:	add	sp, #36	; 0x24
    1352:	pop	{r4, r5, r6, r7, pc}
    1354:	.word	0x20000c4c
    1358:	.word	0x20000c28
    135c:	.word	0x20005864
    1360:	.word	0x20002174
    1364:	.word	0x200021b4
    1368:	.word	0x200021b8
    136c:	.word	0x20022484
    1370:	.word	0x200224a8
    1374:	.word	0x200224a4

00001378 <checkEndOfFile(short)>:

int16_t checkEndOfFile(int16_t status)
{ static volatile uint32_t tx_=0;
    1378:	push	{r4, lr}
    137a:	mov	r4, r0
  uint32_t tx;
  tx=rtc_get();
    137c:	bl	810c <rtc_get>
  tx = tx % t_acq;
    1380:	ldr	r3, [pc, #32]	; (13a4 <checkEndOfFile(short)+0x2c>)
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    1382:	cmp	r4, #1

int16_t checkEndOfFile(int16_t status)
{ static volatile uint32_t tx_=0;
  uint32_t tx;
  tx=rtc_get();
  tx = tx % t_acq;
    1384:	ldr	r3, [r3, #0]
    1386:	udiv	r2, r0, r3
    138a:	mls	r0, r2, r3, r0
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    138e:	ldr	r3, [pc, #24]	; (13a8 <checkEndOfFile(short)+0x30>)
    1390:	ble.n	139e <checkEndOfFile(short)+0x26>
    1392:	ldr	r2, [r3, #0]
    1394:	cbz	r2, 139e <checkEndOfFile(short)+0x26>
    1396:	ldr	r2, [r3, #0]
    1398:	cmp	r0, r2
    139a:	it	cc
    139c:	movcc	r4, #3
  tx_=tx;
    139e:	str	r0, [r3, #0]
  return status;  
}
    13a0:	mov	r0, r4
    13a2:	pop	{r4, pc}
    13a4:	.word	0x200021b4
    13a8:	.word	0x20021bd8

000013ac <newDirectory(char*)>:
  ho=h;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
    13ac:	push	{r4, r5, r6, r7, lr}
    13ae:	sub	sp, #28
    13b0:	mov	r4, r0
    return 0;
}

uint16_t newFolder(int h)
{ static int ho=-1;
  if(h==ho) return 0;
    13b2:	ldr	r6, [pc, #148]	; (1448 <newDirectory(char*)+0x9c>)
}

int16_t newDirectory(char *dirName)
{   
    datetime_t t;
    rtc_get_datetime(&t);
    13b4:	add	r0, sp, #16
    13b6:	bl	7b0 <rtc_get_datetime(datetime_t*)>

    if(t_acq<600)
    13ba:	ldr	r3, [pc, #144]	; (144c <newDirectory(char*)+0xa0>)
    13bc:	ldr	r3, [r3, #0]
    13be:	cmp.w	r3, #600	; 0x258
    13c2:	bcs.n	13f4 <newDirectory(char*)+0x48>
    {
      if(newFolder(t.hour))
    13c4:	ldrsb.w	r5, [sp, #21]
    return 0;
}

uint16_t newFolder(int h)
{ static int ho=-1;
  if(h==ho) return 0;
    13c8:	ldr	r3, [r6, #0]
    13ca:	cmp	r5, r3
    13cc:	beq.n	1440 <newDirectory(char*)+0x94>
    if(t_acq<600)
    {
      if(newFolder(t.hour))
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
    13ce:	ldrsb.w	r1, [sp, #18]
    13d2:	mov	r0, r4
    13d4:	ldrsh.w	r2, [sp, #16]
    13d8:	ldrsb.w	r7, [sp, #19]

    if(t_acq<600)
    {
      if(newFolder(t.hour))
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    13dc:	ldr	r3, [pc, #112]	; (1450 <newDirectory(char*)+0xa4>)
}

uint16_t newFolder(int h)
{ static int ho=-1;
  if(h==ho) return 0;
  ho=h;
    13de:	str	r5, [r6, #0]
    if(t_acq<600)
    {
      if(newFolder(t.hour))
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
    13e0:	ldr	r3, [r3, #0]
    13e2:	str	r1, [sp, #4]
    13e4:	str	r2, [sp, #0]
    13e6:	str	r5, [sp, #12]
    13e8:	str	r7, [sp, #8]
    13ea:	ldr	r2, [pc, #104]	; (1454 <newDirectory(char*)+0xa8>)
    13ec:	ldr	r1, [pc, #104]	; (1458 <newDirectory(char*)+0xac>)
    13ee:	bl	9cb4 <sprintf>
    13f2:	b.n	141c <newDirectory(char*)+0x70>
          return 1;   // have new directory
      }
    }
    else
    {
      if(newFolder(t.day))
    13f4:	ldrsb.w	r5, [sp, #19]
    return 0;
}

uint16_t newFolder(int h)
{ static int ho=-1;
  if(h==ho) return 0;
    13f8:	ldr	r3, [r6, #0]
    13fa:	cmp	r3, r5
    13fc:	beq.n	1440 <newDirectory(char*)+0x94>
    else
    {
      if(newFolder(t.day))
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/", 
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day);
    13fe:	ldrsb.w	r1, [sp, #18]
    1402:	mov	r0, r4
    1404:	ldrsh.w	r2, [sp, #16]
    }
    else
    {
      if(newFolder(t.day))
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/", 
    1408:	ldr	r3, [pc, #68]	; (1450 <newDirectory(char*)+0xa4>)
}

uint16_t newFolder(int h)
{ static int ho=-1;
  if(h==ho) return 0;
  ho=h;
    140a:	str	r5, [r6, #0]
    else
    {
      if(newFolder(t.day))
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/", 
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day);
    140c:	ldr	r3, [r3, #0]
    140e:	str	r1, [sp, #4]
    1410:	str	r2, [sp, #0]
    1412:	str	r5, [sp, #8]
    1414:	ldr	r2, [pc, #60]	; (1454 <newDirectory(char*)+0xa8>)
    1416:	ldr	r1, [pc, #68]	; (145c <newDirectory(char*)+0xb0>)
    1418:	bl	9cb4 <sprintf>
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
    141c:	ldr	r0, [pc, #64]	; (1460 <newDirectory(char*)+0xb4>)
    141e:	bl	89e4 <Print::println()>
    1422:	movs	r1, #2
    1424:	ldr	r0, [pc, #60]	; (1464 <newDirectory(char*)+0xb8>)
    1426:	bl	7138 <usb_serial_write>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    142a:	cbz	r4, 143a <newDirectory(char*)+0x8e>
							  return write((const uint8_t *)str, strlen(str)); }
    142c:	mov	r0, r4
    142e:	bl	9e40 <strlen>
    1432:	mov	r1, r0
    1434:	mov	r0, r4
    1436:	bl	7138 <usb_serial_write>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
          return 1;   // have new directory
    143a:	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
    143c:	add	sp, #28
    143e:	pop	{r4, r5, r6, r7, pc}
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory
    1440:	movs	r0, #0

}
    1442:	add	sp, #28
    1444:	pop	{r4, r5, r6, r7, pc}
    1446:	nop
    1448:	.word	0x20001bd8
    144c:	.word	0x200021b4
    1450:	.word	0x20005864
    1454:	.word	0x20000c68
    1458:	.word	0x20000c6c
    145c:	.word	0x20000c8c
    1460:	.word	0x20001bc8
    1464:	.word	0x20000c88

00001468 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    1468:	push	{r4, lr}
    146a:	sub	sp, #16
    146c:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    146e:	add	r0, sp, #8
    1470:	bl	7b0 <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    1474:	ldr	r3, [pc, #96]	; (14d8 <newFileName(char*)+0x70>)
    1476:	ldrsh.w	r3, [r3]
    147a:	cbz	r3, 14ba <newFileName(char*)+0x52>
      sprintf(fileName, "%s_%02d%02d%02d.wav", FilePrefix, t.hour,t.min,t.sec);
    else
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    147c:	ldrsb.w	r1, [sp, #15]
    1480:	mov	r0, r4
    1482:	ldrsb.w	r2, [sp, #14]
    1486:	str	r1, [sp, #4]
    1488:	str	r2, [sp, #0]
    148a:	ldrsb.w	r3, [sp, #13]
    148e:	ldr	r2, [pc, #76]	; (14dc <newFileName(char*)+0x74>)
    1490:	ldr	r1, [pc, #76]	; (14e0 <newFileName(char*)+0x78>)
    1492:	bl	9cb4 <sprintf>
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    1496:	ldr	r0, [pc, #76]	; (14e4 <newFileName(char*)+0x7c>)
    1498:	bl	89e4 <Print::println()>
    149c:	movs	r1, #2
    149e:	ldr	r0, [pc, #72]	; (14e8 <newFileName(char*)+0x80>)
    14a0:	bl	7138 <usb_serial_write>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    14a4:	cbz	r4, 14b4 <newFileName(char*)+0x4c>
							  return write((const uint8_t *)str, strlen(str)); }
    14a6:	mov	r0, r4
    14a8:	bl	9e40 <strlen>
    14ac:	mov	r1, r0
    14ae:	mov	r0, r4
    14b0:	bl	7138 <usb_serial_write>
    return 1;
}
    14b4:	movs	r0, #1
    14b6:	add	sp, #16
    14b8:	pop	{r4, pc}
int16_t newFileName(char *fileName)
{
    datetime_t t;
    rtc_get_datetime(&t);
    if(proc==0)
      sprintf(fileName, "%s_%02d%02d%02d.wav", FilePrefix, t.hour,t.min,t.sec);
    14ba:	ldrsb.w	r1, [sp, #15]
    14be:	mov	r0, r4
    14c0:	ldrsb.w	r2, [sp, #14]
    14c4:	str	r1, [sp, #4]
    14c6:	str	r2, [sp, #0]
    14c8:	ldrsb.w	r3, [sp, #13]
    14cc:	ldr	r2, [pc, #12]	; (14dc <newFileName(char*)+0x74>)
    14ce:	ldr	r1, [pc, #28]	; (14ec <newFileName(char*)+0x84>)
    14d0:	bl	9cb4 <sprintf>
    14d4:	b.n	1496 <newFileName(char*)+0x2e>
    14d6:	nop
    14d8:	.word	0x200224a4
    14dc:	.word	0x20000ca4
    14e0:	.word	0x20000cbc
    14e4:	.word	0x20001bc8
    14e8:	.word	0x20000c88
    14ec:	.word	0x20000ca8

000014f0 <storeData(short)>:
static int32_t fileHeader[128];
uint32_t nbuf;

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    14f0:	push	{r4, r5, r6, r7, lr}
    if(status==CLOSED) // file closed: should open
    14f2:	mov	r4, r0
static int32_t fileHeader[128];
uint32_t nbuf;

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    14f4:	sub	sp, #84	; 0x54
    if(status==CLOSED) // file closed: should open
    14f6:	cbz	r0, 1512 <storeData(short)+0x22>
        else
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    14f8:	cmp	r0, #1
    14fa:	beq.w	17d6 <storeData(short)+0x2e6>
        { status = DOCLOSE;
        } 
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    14fe:	cmp	r0, #2
    1500:	beq.w	1852 <storeData(short)+0x362>
    1504:	subs	r5, r0, #3
    1506:	uxth	r5, r5
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    }    

    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1508:	cmp	r5, #1
    150a:	bls.n	15d6 <storeData(short)+0xe6>
            file.close();
        }
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    }
    return status;
}
    150c:	mov	r0, r4
    150e:	add	sp, #84	; 0x54
    1510:	pop	{r4, r5, r6, r7, pc}
{
    if(status==CLOSED) // file closed: should open
    {   //doTransactions(true);
        //if(!checkDiskSpace()) {return STOPPED;}
        //
        if(newDirectory(dirName))
    1512:	ldr	r0, [pc, #712]	; (17dc <storeData(short)+0x2ec>)
    1514:	bl	13ac <newDirectory(char*)>
    1518:	cmp	r0, #0
    151a:	bne.n	15fe <storeData(short)+0x10e>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
        }
        
        if(newFileName(fileName))
    151c:	ldr	r0, [pc, #704]	; (17e0 <storeData(short)+0x2f0>)
    151e:	bl	1468 <newFileName(char*)>
    1522:	cmp	r0, #0
    1524:	beq.w	17a0 <storeData(short)+0x2b0>
        {   
            file = sd.open(fileName, FILE_WRITE); 
    1528:	movw	r3, #16898	; 0x4202
    152c:	ldr	r2, [pc, #688]	; (17e0 <storeData(short)+0x2f0>)
    152e:	ldr	r1, [pc, #692]	; (17e4 <storeData(short)+0x2f4>)
    1530:	mov	r0, sp
    1532:	bl	4ccc <FsVolume::open(char const*, int)>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    1536:	ldr	r6, [pc, #688]	; (17e8 <storeData(short)+0x2f8>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1538:	ldr	r2, [sp, #8]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template <class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
    153a:	add	r1, sp, #16
    153c:	ldrb.w	r3, [sp, #12]
    1540:	add.w	r0, r6, #16
    1544:	ldr	r4, [sp, #4]
    1546:	str	r2, [r6, #8]
    1548:	strb	r3, [r6, #12]
    154a:	str	r4, [r6, #4]
    154c:	bl	4ab4 <FsBaseFile::operator=(FsBaseFile const&)>
    1550:	ldr	r3, [pc, #664]	; (17ec <storeData(short)+0x2fc>)
   * \param[in] oflag Values for \a oflag are constructed by a bitwise-inclusive
   * OR of open flags. see FatFile::open(FatFile*, const char*, uint8_t).
   */
  FsBaseFile(const char* path, oflag_t oflag) { open(path, oflag); }

  ~FsBaseFile() { close(); }
    1552:	add	r0, sp, #16
    1554:	str	r3, [sp, #0]
    1556:	bl	4a8c <FsBaseFile::close()>
    return m_fFile   ? m_fFile->isHidden()
           : m_xFile ? m_xFile->isHidden()
                     : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const { return m_fFile || m_xFile; }
    155a:	ldr	r3, [r6, #72]	; 0x48
    155c:	cmp	r3, #0
    155e:	beq.w	178a <storeData(short)+0x29a>
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    {   nbuf=0;
        char *hdr=0;
        if(proc==0)
    1562:	ldr	r3, [pc, #652]	; (17f0 <storeData(short)+0x300>)
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    {   nbuf=0;
    1564:	movs	r2, #0
    1566:	ldr	r4, [pc, #652]	; (17f4 <storeData(short)+0x304>)
        char *hdr=0;
        if(proc==0)
    1568:	ldrsh.w	r3, [r3]
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    {   nbuf=0;
    156c:	str	r2, [r4, #0]
        char *hdr=0;
        if(proc==0)
    156e:	cmp	r3, #0
    1570:	beq.n	1654 <storeData(short)+0x164>
        { 
          hdr = headerInit(fsamp, NCH, NBITS, SerNum);
        }  
        else
        {
          makeHeader(fileHeader);
    1572:	ldr	r0, [pc, #644]	; (17f8 <storeData(short)+0x308>)
    1574:	bl	12d4 <makeHeader(long*)>
    1578:	ldr	r0, [r6, #72]	; 0x48
          hdr=(char *)fileHeader;
    157a:	ldr	r1, [pc, #636]	; (17f8 <storeData(short)+0x308>)
    157c:	ldr	r3, [pc, #616]	; (17e8 <storeData(short)+0x2f8>)
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
                     : 0;
    157e:	cmp	r0, #0
    1580:	beq.n	166e <storeData(short)+0x17e>
    1582:	mov.w	r2, #512	; 0x200
    1586:	bl	3e3c <FatFile::write(void const*, unsigned int)>
        }
        if(file.write(hdr,512) < 512) 
    158a:	cmp.w	r0, #512	; 0x200
    158e:	bcc.n	1680 <storeData(short)+0x190>
    1590:	ldr	r0, [r6, #72]	; 0x48
    1592:	ldr	r3, [pc, #596]	; (17e8 <storeData(short)+0x2f8>)
    1594:	cmp	r0, #0
    1596:	beq.w	16be <storeData(short)+0x1ce>
    159a:	mov.w	r2, #6144	; 0x1800
    159e:	ldr	r1, [pc, #604]	; (17fc <storeData(short)+0x30c>)
    15a0:	bl	3e3c <FatFile::write(void const*, unsigned int)>
    15a4:	mov	r5, r0
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    15a6:	cmp.w	r5, #6144	; 0x1800
    15aa:	bcc.w	1732 <storeData(short)+0x242>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
    15ae:	ldr	r3, [r4, #0]
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    15b0:	mov.w	r5, #1000	; 0x3e8
    15b4:	ldr	r2, [pc, #584]	; (1800 <storeData(short)+0x310>)
    if(status==RUNNING) // file is open, header written: store data records
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
    15b6:	adds	r3, #1
        disk_count++;
    15b8:	ldr	r0, [pc, #584]	; (1804 <storeData(short)+0x314>)
        if((nbuf % 1000)==0 ) file.flush();
    15ba:	umull	r1, r2, r2, r3
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
    15be:	ldr	r1, [r0, #0]
    if(status==RUNNING) // file is open, header written: store data records
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
    15c0:	str	r3, [r4, #0]
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    15c2:	lsrs	r2, r2, #6
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
    15c4:	adds	r1, #1
        if((nbuf % 1000)==0 ) file.flush();
    15c6:	mls	r3, r5, r2, r3
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
    15ca:	str	r1, [r0, #0]
        if((nbuf % 1000)==0 ) file.flush();
    15cc:	cmp	r3, #0
    15ce:	beq.w	184a <storeData(short)+0x35a>
    15d2:	movs	r4, #2
    15d4:	b.n	150c <storeData(short)+0x1c>
    15d6:	ldr	r6, [pc, #528]	; (17e8 <storeData(short)+0x2f8>)
    15d8:	subs	r4, #3
    15da:	it	ne
    15dc:	movne.w	r4, #4294967295
    return m_fFile   ? m_fFile->isHidden()
           : m_xFile ? m_xFile->isHidden()
                     : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const { return m_fFile || m_xFile; }
    15e0:	ldr	r3, [r6, #72]	; 0x48
    15e2:	ldr	r2, [pc, #516]	; (17e8 <storeData(short)+0x2f8>)
    15e4:	cmp	r3, #0
    15e6:	beq.n	16d2 <storeData(short)+0x1e2>
    }    

    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    {   if(file)
        {   if(proc==0)
    15e8:	ldr	r3, [pc, #516]	; (17f0 <storeData(short)+0x300>)
    15ea:	ldrsh.w	r3, [r3]
    15ee:	cmp	r3, #0
    15f0:	beq.n	16da <storeData(short)+0x1ea>
            {
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
              writeHeader(hdr);

            }
            file.close();
    15f2:	ldr	r0, [pc, #532]	; (1808 <storeData(short)+0x318>)
    15f4:	bl	4a8c <FsBaseFile::close()>
        }
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    }
    return status;
}
    15f8:	mov	r0, r4
    15fa:	add	sp, #84	; 0x54
    15fc:	pop	{r4, r5, r6, r7, pc}
    15fe:	ldr	r6, [pc, #484]	; (17e4 <storeData(short)+0x2f4>)
    1600:	ldr.w	r5, [r6, #1152]	; 0x480
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol   ? m_fVol->exists(path)
           : m_xVol ? m_xVol->exists(path)
                    : false;
    1604:	cmp	r5, #0
    1606:	beq.n	1684 <storeData(short)+0x194>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1608:	mov	r3, r4
    160a:	mov	r1, r5
    160c:	ldr	r2, [pc, #460]	; (17dc <storeData(short)+0x2ec>)
    160e:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    1610:	strb.w	r4, [sp]
    1614:	mov	r7, sp
    1616:	strb.w	r4, [sp, #1]
    161a:	strb.w	r4, [sp, #2]
    161e:	bl	3a7c <FatFile::open(FatVolume*, char const*, int)>
    1622:	mov	r4, r0
    if(status==CLOSED) // file closed: should open
    {   //doTransactions(true);
        //if(!checkDiskSpace()) {return STOPPED;}
        //
        if(newDirectory(dirName))
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    1624:	cmp	r4, #0
    1626:	beq.w	17a6 <storeData(short)+0x2b6>
    162a:	ldr.w	r0, [r6, #1152]	; 0x480
    162e:	ldr	r3, [pc, #436]	; (17e4 <storeData(short)+0x2f4>)
   * Set volume working directory.
   * \param[in] path Path for volume working directory.
   * \return true for success or false for failure.
   */
  bool chdir(const char* path) {
    return m_fVol ? m_fVol->chdir(path) : m_xVol ? m_xVol->chdir(path) : false;
    1630:	cmp	r0, #0
    1632:	beq.n	16a8 <storeData(short)+0x1b8>
    1634:	ldr	r1, [pc, #420]	; (17dc <storeData(short)+0x2ec>)
    1636:	bl	42f8 <FatVolume::chdir(char const*)>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    163a:	cmp	r0, #0
    163c:	bne.w	151c <storeData(short)+0x2c>
    1640:	movs	r1, #11
    1642:	ldr	r0, [pc, #456]	; (180c <storeData(short)+0x31c>)
    1644:	bl	7138 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    1648:	ldr	r0, [pc, #452]	; (1810 <storeData(short)+0x320>)
    164a:	bl	89e4 <Print::println()>
    164e:	mov.w	r4, #4294967295
    1652:	b.n	150c <storeData(short)+0x1c>
    if(status==OPENED) // file is open: write first record (header)
    {   nbuf=0;
        char *hdr=0;
        if(proc==0)
        { 
          hdr = headerInit(fsamp, NCH, NBITS, SerNum);
    1654:	ldr	r3, [pc, #444]	; (1814 <storeData(short)+0x324>)
    1656:	movs	r1, #1
    1658:	ldr	r0, [pc, #444]	; (1818 <storeData(short)+0x328>)
    165a:	movs	r2, #32
    165c:	ldr	r3, [r3, #0]
    165e:	ldr	r0, [r0, #0]
    1660:	bl	1160 <headerInit(long, long, long, int)>
    1664:	mov	r1, r0
    1666:	ldr	r0, [r6, #72]	; 0x48
    1668:	ldr	r3, [pc, #380]	; (17e8 <storeData(short)+0x2f8>)
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
                     : 0;
    166a:	cmp	r0, #0
    166c:	bne.n	1582 <storeData(short)+0x92>
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
    166e:	ldr	r0, [r3, #76]	; 0x4c
                     : 0;
    1670:	cmp	r0, #0
    1672:	beq.w	17d2 <storeData(short)+0x2e2>
    1676:	mov.w	r2, #512	; 0x200
    167a:	bl	3330 <ExFatFile::write(void const*, unsigned int)>
    167e:	b.n	158a <storeData(short)+0x9a>
        {
          makeHeader(fileHeader);
          hdr=(char *)fileHeader;
        }
        if(file.write(hdr,512) < 512) 
        { status = DOCLOSE;
    1680:	movs	r4, #0
    1682:	b.n	15e0 <storeData(short)+0xf0>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol   ? m_fVol->exists(path)
           : m_xVol ? m_xVol->exists(path)
    1684:	ldr.w	r1, [r6, #1156]	; 0x484
                    : false;
    1688:	cmp	r1, #0
    168a:	beq.n	171c <storeData(short)+0x22c>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    168c:	mov	r3, r5
    168e:	ldr	r2, [pc, #332]	; (17dc <storeData(short)+0x2ec>)
    1690:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    1692:	strb.w	r5, [sp, #49]	; 0x31
    1696:	strb.w	r5, [sp, #50]	; 0x32
    169a:	mov	r7, sp
    169c:	strb.w	r5, [sp, #51]	; 0x33
    16a0:	bl	29b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    16a4:	mov	r4, r0
    16a6:	b.n	1624 <storeData(short)+0x134>
   * Set volume working directory.
   * \param[in] path Path for volume working directory.
   * \return true for success or false for failure.
   */
  bool chdir(const char* path) {
    return m_fVol ? m_fVol->chdir(path) : m_xVol ? m_xVol->chdir(path) : false;
    16a8:	ldr.w	r0, [r3, #1156]	; 0x484
    16ac:	cmp	r0, #0
    16ae:	beq.n	1640 <storeData(short)+0x150>
    16b0:	ldr	r1, [pc, #296]	; (17dc <storeData(short)+0x2ec>)
    16b2:	bl	2dd4 <ExFatVolume::chdir(char const*)>
    {   //doTransactions(true);
        //if(!checkDiskSpace()) {return STOPPED;}
        //
        if(newDirectory(dirName))
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    16b6:	cmp	r0, #0
    16b8:	bne.w	151c <storeData(short)+0x2c>
    16bc:	b.n	1640 <storeData(short)+0x150>
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
    16be:	ldr	r0, [r3, #76]	; 0x4c
                     : 0;
    16c0:	cmp	r0, #0
    16c2:	beq.n	1730 <storeData(short)+0x240>
    16c4:	mov.w	r2, #6144	; 0x1800
    16c8:	ldr	r1, [pc, #304]	; (17fc <storeData(short)+0x30c>)
    16ca:	bl	3330 <ExFatFile::write(void const*, unsigned int)>
    16ce:	mov	r5, r0
    16d0:	b.n	15a6 <storeData(short)+0xb6>
    return m_fFile   ? m_fFile->isHidden()
           : m_xFile ? m_xFile->isHidden()
                     : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const { return m_fFile || m_xFile; }
    16d2:	ldr	r3, [r2, #76]	; 0x4c
    16d4:	cmp	r3, #0
    16d6:	bne.n	15e8 <storeData(short)+0xf8>
    16d8:	b.n	150c <storeData(short)+0x1c>
    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    {   if(file)
        {   if(proc==0)
            {
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    16da:	ldr	r3, [pc, #280]	; (17f4 <storeData(short)+0x304>)
  return (char *)&wav_hdr;
}

char * headerUpdate(int32_t nbytes)
{
  wav_hdr.dLen = nbytes;
    16dc:	ldr	r2, [pc, #316]	; (181c <storeData(short)+0x32c>)
    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    {   if(file)
        {   if(proc==0)
            {
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    16de:	ldr	r3, [r3, #0]
}

char * headerUpdate(int32_t nbytes)
{
  wav_hdr.dLen = nbytes;
  wav_hdr.rLen += wav_hdr.dLen;
    16e0:	ldr	r1, [r2, #4]
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    {   if(file)
        {   if(proc==0)
            {
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
              writeHeader(hdr);
    16e2:	mov	r0, r2
    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    {   if(file)
        {   if(proc==0)
            {
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    16e4:	add.w	r3, r3, r3, lsl #1
    16e8:	lsls	r3, r3, #11
}

char * headerUpdate(int32_t nbytes)
{
  wav_hdr.dLen = nbytes;
  wav_hdr.rLen += wav_hdr.dLen;
    16ea:	add	r1, r3
  return (char *)&wav_hdr;
}

char * headerUpdate(int32_t nbytes)
{
  wav_hdr.dLen = nbytes;
    16ec:	str.w	r3, [r2, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    16f0:	str	r1, [r2, #4]
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    {   if(file)
        {   if(proc==0)
            {
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
              writeHeader(hdr);
    16f2:	bl	122c <writeHeader(char*)>
    16f6:	b.n	15f2 <storeData(short)+0x102>
    16f8:	ldr.w	r1, [r3, #1156]	; 0x484
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
           : m_xVol ? m_xVol->mkdir(path, pFlag)
                    : false;
    16fc:	cbz	r1, 171c <storeData(short)+0x22c>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    16fe:	add.w	r1, r1, #1096	; 0x448
    1702:	mov	r0, r7
    1704:	movs	r3, #1
    1706:	ldr	r2, [pc, #212]	; (17dc <storeData(short)+0x2ec>)
    1708:	strb.w	r4, [sp, #49]	; 0x31
    170c:	strb.w	r4, [sp, #50]	; 0x32
    1710:	strb.w	r4, [sp, #51]	; 0x33
    1714:	bl	3178 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    if(status==CLOSED) // file closed: should open
    {   //doTransactions(true);
        //if(!checkDiskSpace()) {return STOPPED;}
        //
        if(newDirectory(dirName))
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    1718:	cmp	r0, #0
    171a:	bne.n	162a <storeData(short)+0x13a>
    171c:	movs	r1, #11
    171e:	ldr	r0, [pc, #256]	; (1820 <storeData(short)+0x330>)
    1720:	bl	7138 <usb_serial_write>
    1724:	ldr	r0, [pc, #232]	; (1810 <storeData(short)+0x320>)
    1726:	bl	89e4 <Print::println()>
    172a:	mov.w	r4, #4294967295
    172e:	b.n	150c <storeData(short)+0x1c>
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
           : m_xFile ? m_xFile->write(buf, count)
                     : 0;
    1730:	mov	r5, r0
    1732:	movs	r1, #1
    1734:	ldr	r0, [pc, #236]	; (1824 <storeData(short)+0x334>)
    1736:	bl	7138 <usb_serial_write>
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    173a:	movs	r2, #10
    173c:	movs	r3, #0
    173e:	mov	r1, r5
    1740:	ldr	r0, [pc, #204]	; (1810 <storeData(short)+0x320>)
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    1742:	mov.w	r5, #1000	; 0x3e8
    1746:	bl	8a38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    174a:	movs	r1, #1
    174c:	ldr	r0, [pc, #216]	; (1828 <storeData(short)+0x338>)
    174e:	bl	7138 <usb_serial_write>
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	// Print a signed number
	size_t print(int n)				{ return print((long)n); }
    1752:	movs	r1, #2
    1754:	ldr	r0, [pc, #184]	; (1810 <storeData(short)+0x320>)
    1756:	bl	8ab8 <Print::print(long)>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
    175a:	ldr	r0, [pc, #180]	; (1810 <storeData(short)+0x320>)
    175c:	bl	89e4 <Print::println()>
    1760:	ldr	r0, [r4, #0]
    1762:	ldr	r3, [pc, #156]	; (1800 <storeData(short)+0x310>)
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
    1764:	ldr	r1, [pc, #156]	; (1804 <storeData(short)+0x314>)
        if((nbuf % 1000)==0 ) file.flush();
    1766:	umull	r2, r3, r3, r0
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
    176a:	ldr	r2, [r1, #0]
        if((nbuf % 1000)==0 ) file.flush();
    176c:	lsrs	r3, r3, #6
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
    176e:	adds	r2, #1
        if((nbuf % 1000)==0 ) file.flush();
    1770:	mls	r5, r5, r3, r0
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
    1774:	str	r2, [r1, #0]
        if((nbuf % 1000)==0 ) file.flush();
    1776:	cmp	r5, #0
    1778:	bne.n	1680 <storeData(short)+0x190>
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    {   uint32_t nd;
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
    177a:	movs	r4, #3
    177c:	ldr	r0, [r6, #72]	; 0x48
    177e:	ldr	r3, [pc, #104]	; (17e8 <storeData(short)+0x2f8>)
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    1780:	cmp	r0, #0
    1782:	beq.n	1830 <storeData(short)+0x340>
    1784:	bl	3e30 <FatFile::sync()>
    1788:	b.n	1508 <storeData(short)+0x18>
    return m_fFile   ? m_fFile->isHidden()
           : m_xFile ? m_xFile->isHidden()
                     : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const { return m_fFile || m_xFile; }
    178a:	ldr	r3, [r6, #76]	; 0x4c
    178c:	cmp	r3, #0
    178e:	bne.w	1562 <storeData(short)+0x72>
    1792:	movs	r1, #17
    1794:	ldr	r0, [pc, #148]	; (182c <storeData(short)+0x33c>)
    1796:	bl	7138 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    179a:	ldr	r0, [pc, #116]	; (1810 <storeData(short)+0x320>)
    179c:	bl	89e4 <Print::println()>
            if(file) 
            { status = OPENED; 
            }
            else 
            {   Serial.println("Failing open file");
                return STOPPED; 
    17a0:	mov.w	r4, #4294967295
    17a4:	b.n	150c <storeData(short)+0x1c>
    17a6:	ldr.w	r1, [r6, #1152]	; 0x480
    17aa:	ldr	r3, [pc, #56]	; (17e4 <storeData(short)+0x2f4>)
    17ac:	cmp	r1, #0
    17ae:	beq.n	16f8 <storeData(short)+0x208>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    17b0:	addw	r1, r1, #1092	; 0x444
    17b4:	mov	r0, r7
    17b6:	movs	r3, #1
    17b8:	ldr	r2, [pc, #32]	; (17dc <storeData(short)+0x2ec>)
    17ba:	strb.w	r4, [sp]
    17be:	strb.w	r4, [sp, #1]
    17c2:	strb.w	r4, [sp, #2]
    17c6:	bl	38e8 <FatFile::mkdir(FatFile*, char const*, bool)>
    if(status==CLOSED) // file closed: should open
    {   //doTransactions(true);
        //if(!checkDiskSpace()) {return STOPPED;}
        //
        if(newDirectory(dirName))
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    17ca:	cmp	r0, #0
    17cc:	bne.w	162a <storeData(short)+0x13a>
    17d0:	b.n	171c <storeData(short)+0x22c>
        {
          makeHeader(fileHeader);
          hdr=(char *)fileHeader;
        }
        if(file.write(hdr,512) < 512) 
        { status = DOCLOSE;
    17d2:	movs	r4, #3
    17d4:	b.n	15d8 <storeData(short)+0xe8>
    17d6:	ldr	r6, [pc, #16]	; (17e8 <storeData(short)+0x2f8>)
    17d8:	b.n	1562 <storeData(short)+0x72>
    17da:	nop
    17dc:	.word	0x200214f0
    17e0:	.word	0x20021940
    17e4:	.word	0x20021fc4
    17e8:	.word	0x20021e8c
    17ec:	.word	0x200003b0
    17f0:	.word	0x200224a4
    17f4:	.word	0x20021f08
    17f8:	.word	0x2000706c
    17fc:	.word	0x2000586c
    1800:	.word	0x10624dd3
    1804:	.word	0x20021e78
    1808:	.word	0x20021e9c
    180c:	.word	0x20000cdc
    1810:	.word	0x20001bc8
    1814:	.word	0x20005864
    1818:	.word	0x20002174
    181c:	.word	0x20021740
    1820:	.word	0x20000cd0
    1824:	.word	0x20000ce8
    1828:	.word	0x20000c48
    182c:	.word	0x20000cec
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    1830:	ldr	r0, [r3, #76]	; 0x4c
    1832:	cbz	r0, 183a <storeData(short)+0x34a>
    1834:	bl	3018 <ExFatFile::sync()>
    1838:	b.n	1508 <storeData(short)+0x18>
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    }    

    // following is done independent of data availability
    if((status==DOCLOSE) || (status==MUSTSTOP)) // should close file or stop acquisition
    183a:	cmp	r5, #1
    183c:	bhi.w	150c <storeData(short)+0x1c>
    1840:	subs	r4, #3
    1842:	it	ne
    1844:	movne.w	r4, #4294967295
    1848:	b.n	150c <storeData(short)+0x1c>
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        else
          nbuf++;
        disk_count++;
        if((nbuf % 1000)==0 ) file.flush();
    184a:	movw	r5, #65535	; 0xffff
    184e:	movs	r4, #2
    1850:	b.n	177c <storeData(short)+0x28c>
    1852:	ldr	r6, [pc, #4]	; (1858 <storeData(short)+0x368>)
    1854:	ldr	r4, [pc, #4]	; (185c <storeData(short)+0x36c>)
    1856:	b.n	1590 <storeData(short)+0xa0>
    1858:	.word	0x20021e8c
    185c:	.word	0x20021f08

00001860 <saveData(short)>:
    return status;
}
//
volatile int32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    1860:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(status==STOPPED) 
    1864:	adds	r3, r0, #1
    1866:	beq.n	1942 <saveData(short)+0xe2>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    1868:	ldr	r4, [pc, #336]	; (19bc <saveData(short)+0x15c>)
    186a:	movs	r6, #8
      digitalWriteFast(13,HIGH);
    }
    else
      digitalWriteFast(13,LOW);

    if(status<CLOSED) return status; // we are stopped: don't do anything
    186c:	cmp	r0, #0
    186e:	str.w	r6, [r4, #136]	; 0x88
    1872:	blt.w	19b8 <saveData(short)+0x158>

    status=checkEndOfFile(status);
    1876:	bl	1378 <checkEndOfFile(short)>
    187a:	mov	r5, r0

    if(getDataCount()>=NDBL)
    187c:	bl	7c <getDataCount()>
    1880:	cmp	r0, #11
    1882:	bls.n	1974 <saveData(short)+0x114>
    { 
      digitalWriteFast(13,HIGH);
      if(proc==0)
    1884:	ldr	r3, [pc, #312]	; (19c0 <saveData(short)+0x160>)
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    1886:	str.w	r6, [r4, #132]	; 0x84
    188a:	ldrsh.w	r3, [r3]
    188e:	cmp	r3, #0
    1890:	bne.n	197e <saveData(short)+0x11e>
    1892:	ldr	r4, [pc, #304]	; (19c4 <saveData(short)+0x164>)
    1894:	add.w	r8, r4, #6144	; 0x1800
    1898:	mov	r9, r4
    189a:	mov	r7, r4
      { 
        if(NBITS==32)
        {
          for(int ii=0; ii<NDBL; ii++)
          { while(queue_isBusy()); //wait if acq writes to queue
    189c:	bl	9c <queue_isBusy()>
    18a0:	cmp	r0, #0
    18a2:	bne.n	189c <saveData(short)+0x3c>
            pullData((uint32_t *)&tempBuffer[ii*NBUF_ACQ]);
    18a4:	mov	r0, r7
    18a6:	add.w	r7, r7, #512	; 0x200
    18aa:	bl	12c <pullData(unsigned long*)>
      digitalWriteFast(13,HIGH);
      if(proc==0)
      { 
        if(NBITS==32)
        {
          for(int ii=0; ii<NDBL; ii++)
    18ae:	cmp	r7, r8
    18b0:	bne.n	189c <saveData(short)+0x3c>
            pullData((uint32_t *)&tempBuffer[ii*NBUF_ACQ]);
          }
          
          // differentiate
          static int32_t data0=0;
          diskBuffer[0] =tempBuffer[0]-data0;
    18b2:	ldr.w	lr, [pc, #304]	; 19e4 <saveData(short)+0x184>
          for(int ii=1;ii<MAX_DISK_BUFFER; ii++) diskBuffer[ii]=tempBuffer[ii]-tempBuffer[ii-1];
    18b6:	movs	r2, #1
            pullData((uint32_t *)&tempBuffer[ii*NBUF_ACQ]);
          }
          
          // differentiate
          static int32_t data0=0;
          diskBuffer[0] =tempBuffer[0]-data0;
    18b8:	ldr.w	r6, [r9]
    18bc:	ldr.w	r3, [lr]
    18c0:	ldr.w	r8, [pc, #284]	; 19e0 <saveData(short)+0x180>
    18c4:	ldr.w	r9, [pc, #252]	; 19c4 <saveData(short)+0x164>
    18c8:	subs	r3, r6, r3
    18ca:	mov	r7, r8
    18cc:	mov	r0, r8
    18ce:	mov	r1, r9
    18d0:	str.w	r3, [r8]
    18d4:	b.n	18da <saveData(short)+0x7a>
    18d6:	ldr.w	r6, [r4, #4]!
          for(int ii=1;ii<MAX_DISK_BUFFER; ii++) diskBuffer[ii]=tempBuffer[ii]-tempBuffer[ii-1];
    18da:	ldr.w	r3, [r1, #4]!
    18de:	adds	r2, #1
    18e0:	subs	r3, r3, r6
    18e2:	cmp.w	r2, #1536	; 0x600
    18e6:	str.w	r3, [r0, #4]!
    18ea:	bne.n	18d6 <saveData(short)+0x76>
          data0=tempBuffer[MAX_DISK_BUFFER-1];
          // integrate
          static int32_t data1=0;
          diskBuffer[0]=diskBuffer[0]+data1;
    18ec:	ldr	r4, [pc, #216]	; (19c8 <saveData(short)+0x168>)
          
          // differentiate
          static int32_t data0=0;
          diskBuffer[0] =tempBuffer[0]-data0;
          for(int ii=1;ii<MAX_DISK_BUFFER; ii++) diskBuffer[ii]=tempBuffer[ii]-tempBuffer[ii-1];
          data0=tempBuffer[MAX_DISK_BUFFER-1];
    18ee:	movw	r1, #6140	; 0x17fc
          // integrate
          static int32_t data1=0;
          diskBuffer[0]=diskBuffer[0]+data1;
    18f2:	ldr	r2, [r7, #0]
    18f4:	ldr	r3, [r4, #0]
          
          // differentiate
          static int32_t data0=0;
          diskBuffer[0] =tempBuffer[0]-data0;
          for(int ii=1;ii<MAX_DISK_BUFFER; ii++) diskBuffer[ii]=tempBuffer[ii]-tempBuffer[ii-1];
          data0=tempBuffer[MAX_DISK_BUFFER-1];
    18f6:	ldr.w	r0, [r9, r1]
          // integrate
          static int32_t data1=0;
          diskBuffer[0]=diskBuffer[0]+data1;
          for(int ii=1;ii<MAX_DISK_BUFFER; ii++) diskBuffer[ii]=diskBuffer[ii]+diskBuffer[ii-1];
    18fa:	movs	r1, #1
          diskBuffer[0] =tempBuffer[0]-data0;
          for(int ii=1;ii<MAX_DISK_BUFFER; ii++) diskBuffer[ii]=tempBuffer[ii]-tempBuffer[ii-1];
          data0=tempBuffer[MAX_DISK_BUFFER-1];
          // integrate
          static int32_t data1=0;
          diskBuffer[0]=diskBuffer[0]+data1;
    18fc:	add	r2, r3
    18fe:	ldr	r3, [pc, #204]	; (19cc <saveData(short)+0x16c>)
          
          // differentiate
          static int32_t data0=0;
          diskBuffer[0] =tempBuffer[0]-data0;
          for(int ii=1;ii<MAX_DISK_BUFFER; ii++) diskBuffer[ii]=tempBuffer[ii]-tempBuffer[ii-1];
          data0=tempBuffer[MAX_DISK_BUFFER-1];
    1900:	str.w	r0, [lr]
          // integrate
          static int32_t data1=0;
          diskBuffer[0]=diskBuffer[0]+data1;
    1904:	str	r2, [r7, #0]
          for(int ii=1;ii<MAX_DISK_BUFFER; ii++) diskBuffer[ii]=diskBuffer[ii]+diskBuffer[ii-1];
    1906:	ldr	r0, [r3, #0]
    1908:	adds	r1, #1
    190a:	adds	r3, #4
    190c:	add	r2, r0
    190e:	cmp.w	r1, #1536	; 0x600
    1912:	str.w	r2, [r3, #-4]
    1916:	bne.n	1906 <saveData(short)+0xa6>
          data1=diskBuffer[MAX_DISK_BUFFER-1];
    1918:	movw	r0, #6140	; 0x17fc
    191c:	ldr	r1, [pc, #176]	; (19d0 <saveData(short)+0x170>)
          
          #
          for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    191e:	movs	r3, #0
    1920:	ldr	r2, [pc, #176]	; (19d4 <saveData(short)+0x174>)
          data0=tempBuffer[MAX_DISK_BUFFER-1];
          // integrate
          static int32_t data1=0;
          diskBuffer[0]=diskBuffer[0]+data1;
          for(int ii=1;ii<MAX_DISK_BUFFER; ii++) diskBuffer[ii]=diskBuffer[ii]+diskBuffer[ii-1];
          data1=diskBuffer[MAX_DISK_BUFFER-1];
    1922:	ldr	r0, [r7, r0]
    1924:	str	r0, [r4, #0]
          
          #
          for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    1926:	ldr.w	r0, [r1, #4]!
    192a:	str.w	r0, [r2, r3, lsl #2]
    192e:	adds	r3, #1
    1930:	cmp	r3, #8
    1932:	bne.n	1926 <saveData(short)+0xc6>
        { while(queue_isBusy()); //wait if acq writes to queue
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
        }
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
      }
      if(haveStore)
    1934:	ldr	r3, [pc, #160]	; (19d8 <saveData(short)+0x178>)
        status=storeData(status);
    1936:	mov	r0, r5
        { while(queue_isBusy()); //wait if acq writes to queue
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
        }
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
      }
      if(haveStore)
    1938:	ldr	r3, [r3, #0]
    193a:	cmp	r3, #0
    193c:	bne.n	19b0 <saveData(short)+0x150>
    193e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
volatile int32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    if(status==STOPPED) 
    { 
      while(queue_isBusy()); //wait if acq writes to queue
    1942:	bl	9c <queue_isBusy()>
    1946:	mov	r4, r0
    1948:	cmp	r0, #0
    194a:	bne.n	1942 <saveData(short)+0xe2>
      pullData((uint32_t*)tempBuffer);
    194c:	ldr	r0, [pc, #116]	; (19c4 <saveData(short)+0x164>)
    194e:	bl	12c <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer[ii];
    1952:	mov	r3, r4
    1954:	ldr	r1, [pc, #132]	; (19dc <saveData(short)+0x17c>)
    1956:	ldr	r2, [pc, #124]	; (19d4 <saveData(short)+0x174>)
    1958:	ldr.w	r0, [r1, #4]!
    195c:	str.w	r0, [r2, r3, lsl #2]
    1960:	adds	r3, #1
    1962:	cmp	r3, #8
    1964:	bne.n	1958 <saveData(short)+0xf8>
    1966:	ldr	r2, [pc, #84]	; (19bc <saveData(short)+0x15c>)
    1968:	mov.w	r0, #4294967295
    196c:	str.w	r3, [r2, #132]	; 0x84
    1970:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    1974:	str.w	r6, [r4, #136]	; 0x88
    else
      digitalWriteFast(13,LOW);

    if(status<CLOSED) return status; // we are stopped: don't do anything

    status=checkEndOfFile(status);
    1978:	mov	r0, r5
    197a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    197e:	ldr	r6, [pc, #96]	; (19e0 <saveData(short)+0x180>)
    1980:	add.w	r7, r6, #6144	; 0x1800
        }
      }
      else
      { // compressed mode; store all 32 bits
        for(int ii=0; ii<NDBL; ii++)
        { while(queue_isBusy()); //wait if acq writes to queue
    1984:	bl	9c <queue_isBusy()>
    1988:	mov	r4, r0
    198a:	cmp	r0, #0
    198c:	bne.n	1984 <saveData(short)+0x124>
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    198e:	mov	r0, r6
    1990:	add.w	r6, r6, #512	; 0x200
    1994:	bl	12c <pullData(unsigned long*)>
          }
        }
      }
      else
      { // compressed mode; store all 32 bits
        for(int ii=0; ii<NDBL; ii++)
    1998:	cmp	r6, r7
    199a:	bne.n	1984 <saveData(short)+0x124>
    199c:	ldr	r3, [pc, #48]	; (19d0 <saveData(short)+0x170>)
    199e:	ldr	r2, [pc, #52]	; (19d4 <saveData(short)+0x174>)
        { while(queue_isBusy()); //wait if acq writes to queue
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
        }
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    19a0:	ldr.w	r1, [r3, #4]!
    19a4:	str.w	r1, [r2, r4, lsl #2]
    19a8:	adds	r4, #1
    19aa:	cmp	r4, #8
    19ac:	bne.n	19a0 <saveData(short)+0x140>
    19ae:	b.n	1934 <saveData(short)+0xd4>
    }
    else
      digitalWriteFast(13,LOW);

    return status;
}
    19b0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
        }
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
      }
      if(haveStore)
        status=storeData(status);
    19b4:	b.w	14f0 <storeData(short)>
    }
    else
      digitalWriteFast(13,LOW);

    return status;
}
    19b8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    19bc:	.word	0x42004000
    19c0:	.word	0x200224a4
    19c4:	.word	0x20007274
    19c8:	.word	0x20021bec
    19cc:	.word	0x20005870
    19d0:	.word	0x20005868
    19d4:	.word	0x20021ee4
    19d8:	.word	0x20021edc
    19dc:	.word	0x20007270
    19e0:	.word	0x2000586c
    19e4:	.word	0x20021be8

000019e8 <_GLOBAL__sub_I_t_acq>:
    19e8:	push	{r3, r4, r5, r6, r7, lr}
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() = default;
    19ea:	ldr	r3, [pc, #136]	; (1a74 <_GLOBAL__sub_I_t_acq+0x8c>)
    19ec:	movs	r4, #0
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    19ee:	ldr	r6, [pc, #136]	; (1a78 <_GLOBAL__sub_I_t_acq+0x90>)
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    19f0:	movs	r1, #7

#elif defined(__IMXRT1062__)
  #define SD_CONFIG SdioConfig(FIFO_SDIO)
#endif

SdFs sd;
    19f2:	ldr	r5, [pc, #136]	; (1a7c <_GLOBAL__sub_I_t_acq+0x94>)

#endif  // SPI_DRIVER_SELECT < 2
  void initSharedSpiCard() {
    m_beginCalled = false;
    m_csPin = 0;
    m_errorCode = SD_CARD_ERROR_INIT_NOT_CALLED;
    19f4:	movs	r7, #42	; 0x2a
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    19f6:	str.w	r6, [r3, #1184]	; 0x4a0
    19fa:	mov	r0, r3
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    19fc:	ldr	r2, [pc, #128]	; (1a80 <_GLOBAL__sub_I_t_acq+0x98>)
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    19fe:	ldr	r6, [pc, #132]	; (1a84 <_GLOBAL__sub_I_t_acq+0x9c>)
    1a00:	str.w	r2, [r3, #1164]	; 0x48c
    1a04:	mov	r2, r5
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    1a06:	str.w	r1, [r3, #1188]	; 0x4a4

#endif  // SPI_DRIVER_SELECT < 2
  void initSharedSpiCard() {
    m_beginCalled = false;
    m_csPin = 0;
    m_errorCode = SD_CARD_ERROR_INIT_NOT_CALLED;
    1a0a:	strb.w	r7, [r3, #1194]	; 0x4aa
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1a0e:	mov.w	r7, #1000	; 0x3e8
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    1a12:	str.w	r6, [r3, #1176]	; 0x498
    1a16:	str.w	r4, [r3, #1152]	; 0x480
    1a1a:	str.w	r4, [r3, #1156]	; 0x484
/**
 * \class SdBase
 * \brief base SD file system template class.
 */
template <class Vol, class Fmt>
class SdBase : public Vol {
    1a1e:	str.w	r4, [r3, #1160]	; 0x488
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    1a22:	strb.w	r4, [r3, #1172]	; 0x494
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1a26:	strb.w	r4, [r3, #1173]	; 0x495
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
    1a2a:	str.w	r4, [r3, #1180]	; 0x49c
  void spiSetSckSpeed(uint32_t maxSck) { m_spiDriverPtr->setSckSpeed(maxSck); }
  SdSpiDriver* m_spiDriverPtr;

#endif  // SPI_DRIVER_SELECT < 2
  void initSharedSpiCard() {
    m_beginCalled = false;
    1a2e:	strb.w	r4, [r3, #1192]	; 0x4a8
    m_csPin = 0;
    1a32:	strb.w	r4, [r3, #1193]	; 0x4a9
    m_errorCode = SD_CARD_ERROR_INIT_NOT_CALLED;
    m_spiActive = false;
    1a36:	strb.w	r4, [r3, #1195]	; 0x4ab
    m_state = IDLE_STATE;
    1a3a:	strb.w	r4, [r3, #1196]	; 0x4ac
    m_status = 0;
    1a3e:	strb.w	r4, [r3, #1197]	; 0x4ad
    m_type = 0;
    1a42:	strb.w	r4, [r3, #1198]	; 0x4ae
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    1a46:	str.w	r4, [r3, #1200]	; 0x4b0
    1a4a:	strb.w	r4, [r3, #1204]	; 0x4b4
    1a4e:	ldr	r1, [pc, #56]	; (1a88 <_GLOBAL__sub_I_t_acq+0xa0>)
    1a50:	bl	8c9c <__aeabi_atexit>
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1a54:	ldr	r6, [pc, #52]	; (1a8c <_GLOBAL__sub_I_t_acq+0xa4>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1a56:	ldr	r3, [pc, #56]	; (1a90 <_GLOBAL__sub_I_t_acq+0xa8>)
FsFile file;
    1a58:	mov	r2, r5
    1a5a:	ldr	r1, [pc, #56]	; (1a94 <_GLOBAL__sub_I_t_acq+0xac>)
    1a5c:	mov	r0, r3
    1a5e:	str	r4, [r3, #4]
    1a60:	strb	r4, [r3, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() = default;
    1a62:	str	r4, [r3, #72]	; 0x48
    1a64:	str	r4, [r3, #76]	; 0x4c
    1a66:	str	r7, [r3, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1a68:	str	r6, [r3, #0]
    }
    else
      digitalWriteFast(13,LOW);

    return status;
}
    1a6a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#elif defined(__IMXRT1062__)
  #define SD_CONFIG SdioConfig(FIFO_SDIO)
#endif

SdFs sd;
FsFile file;
    1a6e:	b.w	8c9c <__aeabi_atexit>
    1a72:	nop
    1a74:	.word	0x20021fc4
    1a78:	.word	0x003d0900
    1a7c:	.word	0x20001bb8
    1a80:	.word	0x200004a0
    1a84:	.word	0x200003e0
    1a88:	.word	0x00000ecd
    1a8c:	.word	0x2000047c
    1a90:	.word	0x20021e8c
    1a94:	.word	0x00000f41

00001a98 <loop>:
    pinMode(13,OUTPUT);
  #endif
}

void loop() 
{
    1a98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // put your main code here, to run repeatedly:
  static uint32_t loopCount=0;
  loopCount++;
    1a9c:	ldr	r5, [pc, #516]	; (1ca4 <loop+0x20c>)
    pinMode(13,OUTPUT);
  #endif
}

void loop() 
{
    1a9e:	sub	sp, #52	; 0x34

  // obtain some statistics on Queue usage
  static uint16_t mxb=0;
  uint16_t nb;
  nb = getDataCount();
  if(nb>mxb) mxb=nb;
    1aa0:	ldr	r6, [pc, #516]	; (1ca8 <loop+0x210>)

void loop() 
{
  // put your main code here, to run repeatedly:
  static uint32_t loopCount=0;
  loopCount++;
    1aa2:	ldr	r3, [r5, #0]
    1aa4:	adds	r3, #1
    1aa6:	str	r3, [r5, #0]
  static int16_t monitor=0;

  // obtain some statistics on Queue usage
  static uint16_t mxb=0;
  uint16_t nb;
  nb = getDataCount();
    1aa8:	bl	7c <getDataCount()>
  if(nb>mxb) mxb=nb;
    1aac:	ldrh	r3, [r6, #0]
    1aae:	cmp	r3, r0

  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
    1ab0:	ldr	r3, [pc, #504]	; (1cac <loop+0x214>)
    1ab2:	ldr	r2, [r3, #0]

  // obtain some statistics on Queue usage
  static uint16_t mxb=0;
  uint16_t nb;
  nb = getDataCount();
  if(nb>mxb) mxb=nb;
    1ab4:	it	cc
    1ab6:	strhcc	r0, [r6, #0]

  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
    1ab8:	lsls	r2, r2, #31
    1aba:	bpl.n	1aea <loop+0x52>
    1abc:	ldr	r4, [pc, #496]	; (1cb0 <loop+0x218>)
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
    1abe:	bl	7064 <usb_serial_available>
  // basic menu to start and stop archiving  
  if(Serial.available())
    1ac2:	cbnz	r0, 1b08 <loop+0x70>
    if(ch=='?') menu2(); // returns only when menu2 gets not handled character
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
  }

  // save data (filing will be handled inside saveData)
  status=saveData(status);  
    1ac4:	ldrh	r0, [r4, #0]

//  if(status<0) return;
  // once a second provide some information to User
  static uint32_t t0=0;
  uint32_t t1;
  if((t1=millis())>(t0+1000))
    1ac6:	ldr.w	r8, [pc, #576]	; 1d08 <loop+0x270>
    if(ch=='?') menu2(); // returns only when menu2 gets not handled character
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
  }

  // save data (filing will be handled inside saveData)
  status=saveData(status);  
    1aca:	sxth	r0, r0
    1acc:	bl	1860 <saveData(short)>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
    1ad0:	ldr	r2, [pc, #480]	; (1cb4 <loop+0x21c>)

//  if(status<0) return;
  // once a second provide some information to User
  static uint32_t t0=0;
  uint32_t t1;
  if((t1=millis())>(t0+1000))
    1ad2:	ldr.w	r3, [r8]
    if(ch=='?') menu2(); // returns only when menu2 gets not handled character
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
  }

  // save data (filing will be handled inside saveData)
  status=saveData(status);  
    1ad6:	strh	r0, [r4, #0]

//  if(status<0) return;
  // once a second provide some information to User
  static uint32_t t0=0;
  uint32_t t1;
  if((t1=millis())>(t0+1000))
    1ad8:	add.w	r3, r3, #1000	; 0x3e8
    1adc:	ldr.w	r9, [r2]
    1ae0:	cmp	r3, r9
    1ae2:	bcc.n	1b2a <loop+0x92>
    mxb=0;
    disk_count=0;

    t0=t1;
  }
}
    1ae4:	add	sp, #52	; 0x34
    1ae6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  static uint16_t mxb=0;
  uint16_t nb;
  nb = getDataCount();
  if(nb>mxb) mxb=nb;

  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
    1aea:	ldr	r2, [pc, #460]	; (1cb8 <loop+0x220>)
    1aec:	movs	r1, #1
    1aee:	ldr	r4, [pc, #448]	; (1cb0 <loop+0x218>)
    1af0:	ldr	r2, [r2, #0]
    1af2:	str	r1, [r3, #0]
    1af4:	mov.w	r3, #4294967295
    1af8:	cmp	r2, r1
    1afa:	it	ne
    1afc:	movne	r3, #0
    1afe:	strh	r3, [r4, #0]
    1b00:	bl	7064 <usb_serial_available>
  // basic menu to start and stop archiving  
  if(Serial.available())
    1b04:	cmp	r0, #0
    1b06:	beq.n	1ac4 <loop+0x2c>
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
    1b08:	bl	70ec <usb_serial_getchar>
  {
    char ch=Serial.read();
    1b0c:	uxtb	r0, r0
    if(ch=='s') status=CLOSED;
    1b0e:	cmp	r0, #115	; 0x73
    1b10:	beq.w	1c44 <loop+0x1ac>
    if(ch=='e') status=MUSTSTOP;
    1b14:	cmp	r0, #101	; 0x65
    1b16:	beq.n	1b60 <loop+0xc8>
    if(ch=='m') monitor=1-monitor;
    1b18:	cmp	r0, #109	; 0x6d
    1b1a:	bne.w	1c84 <loop+0x1ec>
    1b1e:	ldr	r2, [pc, #412]	; (1cbc <loop+0x224>)
    1b20:	ldrh	r3, [r2, #0]
    1b22:	rsb	r3, r3, #1
    1b26:	strh	r3, [r2, #0]
    1b28:	b.n	1ac4 <loop+0x2c>
  // once a second provide some information to User
  static uint32_t t0=0;
  uint32_t t1;
  if((t1=millis())>(t0+1000))
  { datetime_t t;
    rtc_get_datetime(&t);
    1b2a:	add	r0, sp, #40	; 0x28
    1b2c:	bl	7b0 <rtc_get_datetime(datetime_t*)>

    if(monitor)
    1b30:	ldr	r3, [pc, #392]	; (1cbc <loop+0x224>)
    1b32:	ldrsh.w	r3, [r3]
    1b36:	cbnz	r3, 1b66 <loop+0xce>
    1b38:	ldr	r3, [pc, #388]	; (1cc0 <loop+0x228>)
    1b3a:	ldr.w	fp, [pc, #464]	; 1d0c <loop+0x274>
    1b3e:	str	r3, [sp, #32]
    1b40:	ldr	r3, [pc, #384]	; (1cc4 <loop+0x22c>)
    1b42:	str	r3, [sp, #28]
        max_stat=0;        
      }
      Serial.printf("  %10d",bias); Serial.print("  ");
    }

    loopCount=0;
    1b44:	movs	r3, #0
    procCount=0;
    procMiss=0;
    1b46:	ldr	r2, [sp, #32]
    mxb=0;
    disk_count=0;

    t0=t1;
    1b48:	str.w	r9, [r8]
      Serial.printf("  %10d",bias); Serial.print("  ");
    }

    loopCount=0;
    procCount=0;
    procMiss=0;
    1b4c:	str	r3, [r2, #0]
    mxb=0;
    disk_count=0;
    1b4e:	ldr	r2, [sp, #28]
        max_stat=0;        
      }
      Serial.printf("  %10d",bias); Serial.print("  ");
    }

    loopCount=0;
    1b50:	str	r3, [r5, #0]
    procCount=0;
    1b52:	str.w	r3, [fp]
    procMiss=0;
    mxb=0;
    1b56:	strh	r3, [r6, #0]
    disk_count=0;
    1b58:	str	r3, [r2, #0]

    t0=t1;
  }
}
    1b5a:	add	sp, #52	; 0x34
    1b5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // basic menu to start and stop archiving  
  if(Serial.available())
  {
    char ch=Serial.read();
    if(ch=='s') status=CLOSED;
    if(ch=='e') status=MUSTSTOP;
    1b60:	movs	r3, #4
    1b62:	strh	r3, [r4, #0]
    1b64:	b.n	1ac4 <loop+0x2c>
    rtc_get_datetime(&t);

    if(monitor)
    {
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");
    1b66:	ldrsb.w	lr, [sp, #44]	; 0x2c
    1b6a:	ldrsb.w	r7, [sp, #47]	; 0x2f
    1b6e:	ldrsb.w	r4, [sp, #46]	; 0x2e
    1b72:	ldrsb.w	r0, [sp, #45]	; 0x2d
    1b76:	ldrsb.w	r1, [sp, #43]	; 0x2b
    1b7a:	str.w	lr, [sp, #16]
    1b7e:	ldrsb.w	r3, [sp, #42]	; 0x2a
    1b82:	ldrsh.w	r2, [sp, #40]	; 0x28
    1b86:	str	r7, [sp, #12]
    1b88:	str	r4, [sp, #8]
    1b8a:	str	r0, [sp, #4]
    1b8c:	str	r1, [sp, #0]
    1b8e:	ldr	r0, [pc, #312]	; (1cc8 <loop+0x230>)
    1b90:	ldr	r1, [pc, #312]	; (1ccc <loop+0x234>)
    1b92:	bl	8a18 <Print::printf(char const*, ...)>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1b96:	movs	r1, #3
    1b98:	ldr	r0, [pc, #308]	; (1cd0 <loop+0x238>)
    1b9a:	bl	7138 <usb_serial_write>
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	// Print a signed number
	size_t print(long n);
	// Print an unsigned number
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1b9e:	movs	r3, #0
    1ba0:	movs	r2, #10
    1ba2:	ldr	r1, [r5, #0]
    1ba4:	ldr	r0, [pc, #288]	; (1cc8 <loop+0x230>)
    1ba6:	bl	8a38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1baa:	movs	r1, #1
    1bac:	ldr	r0, [pc, #292]	; (1cd4 <loop+0x23c>)
    1bae:	bl	7138 <usb_serial_write>

      Serial.print(loopCount); Serial.print(" ");
      Serial.print(procCount); Serial.print(" ");
    1bb2:	ldr.w	fp, [pc, #344]	; 1d0c <loop+0x274>
      Serial.print(procMiss); Serial.print(" ");
    1bb6:	ldr	r3, [pc, #264]	; (1cc0 <loop+0x228>)
    1bb8:	movs	r2, #10
    1bba:	ldr.w	r1, [fp]
    1bbe:	mov	r4, r3
    1bc0:	str	r3, [sp, #32]
    1bc2:	ldr	r0, [pc, #260]	; (1cc8 <loop+0x230>)
    1bc4:	movs	r3, #0
    1bc6:	bl	8a38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bca:	movs	r1, #1
    1bcc:	ldr	r0, [pc, #260]	; (1cd4 <loop+0x23c>)
    1bce:	bl	7138 <usb_serial_write>
    1bd2:	ldr	r1, [r4, #0]
    1bd4:	movs	r3, #0
    1bd6:	movs	r2, #10
    1bd8:	ldr	r0, [pc, #236]	; (1cc8 <loop+0x230>)
    1bda:	bl	8a38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bde:	movs	r1, #1
    1be0:	ldr	r0, [pc, #240]	; (1cd4 <loop+0x23c>)
    1be2:	bl	7138 <usb_serial_write>
      Serial.printf("%3d",mxb); Serial.print("  ");
      Serial.print(disk_count); Serial.print("  ; ");
    1be6:	ldr	r3, [pc, #220]	; (1cc4 <loop+0x22c>)
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");

      Serial.print(loopCount); Serial.print(" ");
      Serial.print(procCount); Serial.print(" ");
      Serial.print(procMiss); Serial.print(" ");
      Serial.printf("%3d",mxb); Serial.print("  ");
    1be8:	ldrh	r2, [r6, #0]
      Serial.print(disk_count); Serial.print("  ; ");
    1bea:	mov	r4, r3
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");

      Serial.print(loopCount); Serial.print(" ");
      Serial.print(procCount); Serial.print(" ");
      Serial.print(procMiss); Serial.print(" ");
      Serial.printf("%3d",mxb); Serial.print("  ");
    1bec:	ldr	r1, [pc, #232]	; (1cd8 <loop+0x240>)
    1bee:	ldr	r0, [pc, #216]	; (1cc8 <loop+0x230>)
      Serial.print(disk_count); Serial.print("  ; ");
    1bf0:	str	r3, [sp, #28]
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");

      Serial.print(loopCount); Serial.print(" ");
      Serial.print(procCount); Serial.print(" ");
      Serial.print(procMiss); Serial.print(" ");
      Serial.printf("%3d",mxb); Serial.print("  ");
    1bf2:	bl	8a18 <Print::printf(char const*, ...)>
    1bf6:	movs	r1, #2
    1bf8:	ldr	r0, [pc, #224]	; (1cdc <loop+0x244>)
    1bfa:	bl	7138 <usb_serial_write>
    1bfe:	movs	r3, #0
    1c00:	ldr	r1, [r4, #0]
    1c02:	movs	r2, #10
    1c04:	ldr	r0, [pc, #192]	; (1cc8 <loop+0x230>)
    1c06:	bl	8a38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1c0a:	movs	r1, #4
    1c0c:	ldr	r0, [pc, #208]	; (1ce0 <loop+0x248>)
    1c0e:	bl	7138 <usb_serial_write>
      Serial.print(disk_count); Serial.print("  ; ");

      if(proc==0)
    1c12:	ldr	r3, [pc, #208]	; (1ce4 <loop+0x24c>)
    1c14:	ldrsh.w	r7, [r3]
    1c18:	cbnz	r7, 1c4a <loop+0x1b2>
    1c1a:	ldr	r4, [pc, #204]	; (1ce8 <loop+0x250>)
      {
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
    1c1c:	ldr.w	r2, [r4, r7, lsl #2]
    1c20:	adds	r7, #1
    1c22:	ldr	r1, [pc, #200]	; (1cec <loop+0x254>)
    1c24:	ldr	r0, [pc, #160]	; (1cc8 <loop+0x230>)
    1c26:	bl	8a18 <Print::printf(char const*, ...)>
    1c2a:	cmp	r7, #8
    1c2c:	bne.n	1c1c <loop+0x184>
        Serial.printf("%2d",max_stat);

        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
        max_stat=0;        
      }
      Serial.printf("  %10d",bias); Serial.print("  ");
    1c2e:	ldr	r3, [pc, #192]	; (1cf0 <loop+0x258>)
    1c30:	ldr	r1, [pc, #192]	; (1cf4 <loop+0x25c>)
    1c32:	ldr	r2, [r3, #0]
    1c34:	ldr	r0, [pc, #144]	; (1cc8 <loop+0x230>)
    1c36:	bl	8a18 <Print::printf(char const*, ...)>
    1c3a:	movs	r1, #2
    1c3c:	ldr	r0, [pc, #156]	; (1cdc <loop+0x244>)
    1c3e:	bl	7138 <usb_serial_write>
    1c42:	b.n	1b44 <loop+0xac>
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
  // basic menu to start and stop archiving  
  if(Serial.available())
  {
    char ch=Serial.read();
    if(ch=='s') status=CLOSED;
    1c44:	movs	r3, #0
    1c46:	strh	r3, [r4, #0]
    1c48:	b.n	1ac4 <loop+0x2c>
    1c4a:	ldr	r4, [pc, #172]	; (1cf8 <loop+0x260>)
    1c4c:	add.w	r7, r4, #96	; 0x60
      Serial.print(procCount); Serial.print(" ");
      Serial.print(procMiss); Serial.print(" ");
      Serial.printf("%3d",mxb); Serial.print("  ");
      Serial.print(disk_count); Serial.print("  ; ");

      if(proc==0)
    1c50:	mov	sl, r4
      {
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
      }
      else
      {
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
    1c52:	ldr.w	r2, [sl, #4]!
    1c56:	ldr	r1, [pc, #164]	; (1cfc <loop+0x264>)
    1c58:	ldr	r0, [pc, #108]	; (1cc8 <loop+0x230>)
    1c5a:	bl	8a18 <Print::printf(char const*, ...)>
    1c5e:	cmp	r7, sl
    1c60:	bne.n	1c52 <loop+0x1ba>
        Serial.printf("%2d",max_stat);
    1c62:	ldr	r3, [pc, #156]	; (1d00 <loop+0x268>)
    1c64:	ldr	r1, [pc, #156]	; (1d04 <loop+0x26c>)
    1c66:	ldr	r2, [r3, #0]
    1c68:	ldr	r0, [pc, #92]	; (1cc8 <loop+0x230>)
    1c6a:	str	r3, [sp, #36]	; 0x24
    1c6c:	bl	8a18 <Print::printf(char const*, ...)>

        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
    1c70:	movs	r1, #0
    1c72:	ldr	r3, [sp, #36]	; 0x24
    1c74:	str.w	r1, [r4, #4]!
    1c78:	cmp	r7, r4
    1c7a:	mov.w	r2, #0
    1c7e:	bne.n	1c74 <loop+0x1dc>
        max_stat=0;        
    1c80:	str	r2, [r3, #0]
    1c82:	b.n	1c2e <loop+0x196>
  {
    char ch=Serial.read();
    if(ch=='s') status=CLOSED;
    if(ch=='e') status=MUSTSTOP;
    if(ch=='m') monitor=1-monitor;
    if(ch==':') menu1(); // returns only when menu1 gets not handled character
    1c84:	cmp	r0, #58	; 0x3a
    1c86:	bne.n	1c8e <loop+0x1f6>
    1c88:	bl	2a4 <menu1()>
    1c8c:	b.n	1ac4 <loop+0x2c>
    if(ch=='?') menu2(); // returns only when menu2 gets not handled character
    1c8e:	cmp	r0, #63	; 0x3f
    1c90:	bne.n	1c98 <loop+0x200>
    1c92:	bl	2b8 <menu2()>
    1c96:	b.n	1ac4 <loop+0x2c>
    if(ch=='!') menu3(); // returns only when menu3 gets not handled character
    1c98:	cmp	r0, #33	; 0x21
    1c9a:	bne.w	1ac4 <loop+0x2c>
    1c9e:	bl	44c <menu3()>
    1ca2:	b.n	1ac4 <loop+0x2c>
    1ca4:	.word	0x20021be0
    1ca8:	.word	0x2002249c
    1cac:	.word	0x20005868
    1cb0:	.word	0x2002249e
    1cb4:	.word	0x20022480
    1cb8:	.word	0x20022490
    1cbc:	.word	0x200224a0
    1cc0:	.word	0x20021f10
    1cc4:	.word	0x20021e78
    1cc8:	.word	0x20001bc8
    1ccc:	.word	0x20000d00
    1cd0:	.word	0x20000d24
    1cd4:	.word	0x20000c48
    1cd8:	.word	0x20000d28
    1cdc:	.word	0x20000d2c
    1ce0:	.word	0x20000d30
    1ce4:	.word	0x200224a4
    1ce8:	.word	0x20021ee4
    1cec:	.word	0x20000d38
    1cf0:	.word	0x20021e74
    1cf4:	.word	0x20000d4c
    1cf8:	.word	0x20021f10
    1cfc:	.word	0x20000d40
    1d00:	.word	0x20021f04
    1d04:	.word	0x20000d48
    1d08:	.word	0x20021bdc
    1d0c:	.word	0x20021f0c

00001d10 <setup1()>:
  }
}
/**********************************************************************************/
// rp2040 has dial core. let acq run on its own core
void setup1()
{ while(!ready) {delay(1);} // wait for setup() to finish
    1d10:	push	{r4, lr}
    1d12:	ldr	r4, [pc, #44]	; (1d40 <setup1()+0x30>)
    1d14:	ldr	r3, [r4, #0]
    1d16:	cbnz	r3, 1d24 <setup1()+0x14>
    1d18:	movs	r0, #1
    1d1a:	bl	7e1c <delay>
    1d1e:	ldr	r3, [r4, #0]
    1d20:	cmp	r3, #0
    1d22:	beq.n	1d18 <setup1()+0x8>
  i2s_setup();
    1d24:	bl	d2c <i2s_setup()>
  dma_setup();
    1d28:	bl	dbc <dma_setup()>
    1d2c:	movs	r1, #11
    1d2e:	ldr	r0, [pc, #20]	; (1d44 <setup1()+0x34>)
    1d30:	bl	7138 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    1d34:	ldr	r0, [pc, #16]	; (1d48 <setup1()+0x38>)

  Serial.println("Setup1 done");
}
    1d36:	ldmia.w	sp!, {r4, lr}
    1d3a:	b.w	89e4 <Print::println()>
    1d3e:	nop
    1d40:	.word	0x20021f74
    1d44:	.word	0x20000d54
    1d48:	.word	0x20001bc8

00001d4c <setup>:
volatile int ready=0;
volatile int termon=0;
void setup1();
//
void setup() 
{
    1d4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
    1d50:	ldr	r5, [pc, #284]	; (1e70 <setup+0x124>)
    1d52:	sub	sp, #28
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
    1d54:	movw	r8, #750	; 0x2ee
    1d58:	ldr	r4, [pc, #280]	; (1e74 <setup+0x128>)
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
    1d5a:	ldr	r6, [r5, #0]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1d5c:	ldr	r7, [pc, #280]	; (1e78 <setup+0x12c>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1d5e:	ldr.w	r9, [pc, #284]	; 1e7c <setup+0x130>
    1d62:	b.n	1d6e <setup+0x22>
		uint32_t millis_begin = systick_millis_count;
		while (!(*this)) {
			uint32_t elapsed = systick_millis_count - millis_begin;
			if (usb_configuration) {
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
    1d64:	cmp.w	r3, #2000	; 0x7d0
    1d68:	bhi.n	1d96 <setup+0x4a>
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
			}
			yield();
    1d6a:	bl	86b8 <yield>
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
    1d6e:	bl	86b8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1d72:	ldrb	r3, [r4, #0]
    1d74:	cbz	r3, 1d88 <setup+0x3c>
    1d76:	ldrb	r3, [r7, #0]
    1d78:	lsls	r2, r3, #31
    1d7a:	bpl.n	1d88 <setup+0x3c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1d7c:	ldr	r3, [r5, #0]
    1d7e:	ldr.w	r2, [r9]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1d82:	subs	r3, r3, r2
    1d84:	cmp	r3, #14
    1d86:	bhi.n	1d96 <setup+0x4a>
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
		while (!(*this)) {
			uint32_t elapsed = systick_millis_count - millis_begin;
    1d88:	ldr	r3, [r5, #0]
			if (usb_configuration) {
    1d8a:	ldrb	r2, [r4, #0]
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
		while (!(*this)) {
			uint32_t elapsed = systick_millis_count - millis_begin;
    1d8c:	subs	r3, r3, r6
			if (usb_configuration) {
    1d8e:	cmp	r2, #0
    1d90:	bne.n	1d64 <setup+0x18>
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
    1d92:	cmp	r3, r8
    1d94:	bls.n	1d6a <setup+0x1e>
    1d96:	ldr.w	r8, [pc, #216]	; 1e70 <setup+0x124>
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1d9a:	ldr	r6, [pc, #220]	; (1e78 <setup+0x12c>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1d9c:	ldr	r7, [pc, #220]	; (1e7c <setup+0x130>)
    1d9e:	ldr	r2, [r5, #0]
    set_sys_clock_khz(48000, true);
  #endif

  Serial.begin(115200);
  // wait for 10 s to allow USB-Serial connection
  while(millis()<10000) if(Serial) { termon=1; break;}
    1da0:	movw	r3, #9999	; 0x270f
    1da4:	cmp	r2, r3
    1da6:	bhi.n	1dca <setup+0x7e>
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
    1da8:	bl	86b8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1dac:	ldrb	r3, [r4, #0]
    1dae:	cmp	r3, #0
    1db0:	beq.n	1d9e <setup+0x52>
    1db2:	ldrb	r3, [r6, #0]
    1db4:	lsls	r3, r3, #31
    1db6:	bpl.n	1d9e <setup+0x52>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1db8:	ldr.w	r3, [r8]
    1dbc:	ldr	r2, [r7, #0]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1dbe:	subs	r3, r3, r2
    1dc0:	cmp	r3, #14
    1dc2:	bls.n	1d9e <setup+0x52>
    1dc4:	ldr	r3, [pc, #184]	; (1e80 <setup+0x134>)
    1dc6:	movs	r2, #1
    1dc8:	str	r2, [r3, #0]

  // Teensy has a crash report
  #if defined(__IMXRT1062__)
    if(CrashReport) Serial.print(CrashReport);
    1dca:	ldr	r0, [pc, #184]	; (1e84 <setup+0x138>)
    1dcc:	bl	ff88 <___ZN16CrashReportClasscvbEv_veneer>
    1dd0:	cmp	r0, #0
    1dd2:	bne.n	1e66 <setup+0x11a>
    #if defined(AUDIO_INTERFACE)
      AudioMemory(8);
    #endif
  #endif

  rtc_setup();
    1dd4:	movs	r1, #19
    1dd6:	movs	r0, #18
    1dd8:	bl	7ac <rtc_setup(unsigned char, unsigned char)>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1ddc:	movs	r1, #16
    1dde:	ldr	r0, [pc, #168]	; (1e88 <setup+0x13c>)
    1de0:	bl	7138 <usb_serial_write>
    1de4:	ldr	r0, [pc, #164]	; (1e8c <setup+0x140>)
    1de6:	bl	89e4 <Print::println()>
  Serial.println("rtc_setup() done");

  datetime_t t;
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
    1dea:	add	r0, sp, #16
    1dec:	bl	7b0 <rtc_get_datetime(datetime_t*)>
    1df0:	cbnz	r0, 1e00 <setup+0xb4>
    1df2:	movs	r1, #20
    1df4:	ldr	r0, [pc, #152]	; (1e90 <setup+0x144>)
    1df6:	bl	7138 <usb_serial_write>
    1dfa:	ldr	r0, [pc, #144]	; (1e8c <setup+0x140>)
    1dfc:	bl	89e4 <Print::println()>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
                      t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
    1e00:	ldrsb.w	r0, [sp, #21]
  #endif

  Serial.println("filing_init");
  filing_init();
  Serial.println("Setup done");
  ready=1;
    1e04:	movs	r4, #1
  Serial.println("rtc_setup() done");

  datetime_t t;
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
                      t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
    1e06:	ldrsb.w	r1, [sp, #19]
    1e0a:	ldrsb.w	r6, [sp, #23]
    1e0e:	ldrsb.w	r5, [sp, #22]
    1e12:	ldrsh.w	r2, [sp, #16]
    1e16:	ldrsb.w	r3, [sp, #18]
    1e1a:	str	r0, [sp, #4]
    1e1c:	str	r1, [sp, #0]
    1e1e:	str	r6, [sp, #12]
    1e20:	ldr	r1, [pc, #112]	; (1e94 <setup+0x148>)
    1e22:	str	r5, [sp, #8]
    1e24:	ldr	r0, [pc, #100]	; (1e8c <setup+0x140>)
    1e26:	bl	8a18 <Print::printf(char const*, ...)>
    1e2a:	ldr	r0, [pc, #96]	; (1e8c <setup+0x140>)
    1e2c:	bl	89e4 <Print::println()>
    1e30:	movs	r1, #11
    1e32:	ldr	r0, [pc, #100]	; (1e98 <setup+0x14c>)
    1e34:	bl	7138 <usb_serial_write>
    1e38:	ldr	r0, [pc, #80]	; (1e8c <setup+0x140>)
    1e3a:	bl	89e4 <Print::println()>

    Serial.print("Bias "); Serial.println(BIAS);
  #endif

  Serial.println("filing_init");
  filing_init();
    1e3e:	bl	1060 <filing_init()>
    1e42:	movs	r1, #10
    1e44:	ldr	r0, [pc, #84]	; (1e9c <setup+0x150>)
    1e46:	bl	7138 <usb_serial_write>
    1e4a:	ldr	r0, [pc, #64]	; (1e8c <setup+0x140>)
    1e4c:	bl	89e4 <Print::println()>
  Serial.println("Setup done");
  ready=1;
    1e50:	ldr	r3, [pc, #76]	; (1ea0 <setup+0x154>)
    1e52:	str	r4, [r3, #0]

  // in case of single core teensy 4.1 start acquisition
  #if defined(__IMXRT1062__)
    setup1();
    1e54:	bl	1d10 <setup1()>
    pinMode(13,OUTPUT);
    1e58:	mov	r1, r4
    1e5a:	movs	r0, #13
    1e5c:	bl	8328 <pinMode>
  #endif
}
    1e60:	add	sp, #28
    1e62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	// Print a floating point (decimal) number
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	// Print an object instance in human readable format
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
    1e66:	ldr	r1, [pc, #36]	; (1e8c <setup+0x140>)
    1e68:	ldr	r0, [pc, #24]	; (1e84 <setup+0x138>)
    1e6a:	bl	ff90 <___ZNK16CrashReportClass7printToER5Print_veneer>
    1e6e:	b.n	1dd4 <setup+0x88>
    1e70:	.word	0x20022480
    1e74:	.word	0x200224bf
    1e78:	.word	0x200224be
    1e7c:	.word	0x20022528
    1e80:	.word	0x20022490
    1e84:	.word	0x20001bbc
    1e88:	.word	0x20000d60
    1e8c:	.word	0x20001bc8
    1e90:	.word	0x20000d74
    1e94:	.word	0x20000d8c
    1e98:	.word	0x20000db4
    1e9c:	.word	0x20000dc0
    1ea0:	.word	0x20021f74

00001ea4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    1ea4:	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    1ea6:	movw	r5, #513	; 0x201
    1eaa:	ldr	r4, [r0, #0]
    1eac:	str	r5, [r4, #16]

	while (count > 0) {
    1eae:	cbz	r3, 1ef8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    1eb0:	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1eb2:	cbz	r1, 1ef2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    1eb4:	ldrb	r5, [r1, #0]
    1eb6:	adds	r1, #1
		count--; // how many bytes left to output.
    1eb8:	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1eba:	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1ebc:	ldr	r5, [r4, #112]	; 0x70
    1ebe:	lsls	r5, r5, #30
    1ec0:	bmi.n	1ed0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1ec2:	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    1ec4:	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1ec6:	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    1ec8:	cbz	r2, 1ed0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    1eca:	strb	r5, [r2, #0]
    1ecc:	adds	r2, #1
    1ece:	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    1ed0:	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    1ed2:	lsls	r5, r5, #31
    1ed4:	bpl.n	1ebc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    1ed6:	cmp	r3, #0
    1ed8:	bne.n	1eb2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    1eda:	cbz	r6, 1ef8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1edc:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1ede:	ldr	r3, [r1, #112]	; 0x70
    1ee0:	lsls	r3, r3, #30
    1ee2:	bmi.n	1ede <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    1ee4:	ldr	r3, [r1, #116]	; 0x74
    1ee6:	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    1ee8:	cbz	r2, 1eee <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    1eea:	strb	r3, [r2, #0]
    1eec:	adds	r2, #1
			count_read--;
    1eee:	subs	r6, #1
    1ef0:	b.n	1eda <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1ef2:	ldrb.w	r5, [r0, #60]	; 0x3c
    1ef6:	b.n	1eb8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    1ef8:	pop	{r4, r5, r6}
    1efa:	bx	lr

00001efc <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    1efc:	cbz	r3, 1f02 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    1efe:	b.w	1ea4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    1f02:	bx	lr

00001f04 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    1f04:	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    1f06:	ldmia.w	r3, {r1, r2}
    1f0a:	ldr	r1, [r1, #0]
    1f0c:	tst	r1, r2
    1f0e:	bne.n	1f12 <SPIClass::end()+0xe>
    1f10:	bx	lr
    
    port().TCR = tcr;    // restore back
}


void SPIClass::end() {
    1f12:	push	{r4, lr}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1f14:	ldr	r2, [r0, #0]
    1f16:	mov	r4, r0
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
		port().CR = 0;  // turn off the enable
    1f18:	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    1f1a:	movs	r1, #5


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
		port().CR = 0;  // turn off the enable
    1f1c:	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    1f1e:	ldrb	r2, [r4, #16]
    1f20:	add	r3, r2
    1f22:	ldrb	r0, [r3, #16]
    1f24:	bl	8328 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    1f28:	ldr	r2, [r4, #4]
    1f2a:	ldrb	r3, [r4, #17]
    1f2c:	movs	r1, #5
    1f2e:	add	r3, r2
    1f30:	ldrb.w	r0, [r3, #36]	; 0x24
    1f34:	bl	8328 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    1f38:	ldr	r2, [r4, #4]
    1f3a:	ldrb	r3, [r4, #18]
    1f3c:	movs	r1, #5
    1f3e:	add	r3, r2
	}
}
    1f40:	ldmia.w	sp!, {r4, lr}
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
		port().CR = 0;  // turn off the enable
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    1f44:	ldrb.w	r0, [r3, #56]	; 0x38
    1f48:	b.w	8328 <pinMode>

00001f4c <FsCache::sync() [clone .part.0]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    1f4c:	push	{r4, r5, r6, lr}
    1f4e:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    1f50:	ldr	r0, [r0, #4]
    1f52:	add.w	r6, r4, #16
    1f56:	ldr	r3, [r0, #0]
    1f58:	ldr	r1, [r4, #8]
    1f5a:	mov	r2, r6
    1f5c:	ldr	r3, [r3, #32]
    1f5e:	blx	r3
    1f60:	cbz	r0, 1f74 <FsCache::sync() [clone .part.0]+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    1f62:	ldrb	r3, [r4, #0]
    1f64:	mov	r5, r0
    1f66:	lsls	r2, r3, #30
    1f68:	bmi.n	1f7a <FsCache::sync() [clone .part.0]+0x2e>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    1f6a:	bic.w	r3, r3, #1
  }
  return true;

fail:
  return false;
}
    1f6e:	mov	r0, r5
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    1f70:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    1f72:	pop	{r4, r5, r6, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    1f74:	movs	r5, #0
}
    1f76:	mov	r0, r5
    1f78:	pop	{r4, r5, r6, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
    1f7a:	ldr	r0, [r4, #4]
    1f7c:	mov	r2, r6
    1f7e:	ldr	r1, [r4, #12]
    1f80:	ldr	r6, [r4, #8]
    1f82:	ldr	r3, [r0, #0]
    1f84:	add	r1, r6
    1f86:	ldr	r3, [r3, #32]
    1f88:	blx	r3
    1f8a:	cmp	r0, #0
    1f8c:	beq.n	1f74 <FsCache::sync() [clone .part.0]+0x28>
    1f8e:	ldrb	r3, [r4, #0]
    1f90:	b.n	1f6a <FsCache::sync() [clone .part.0]+0x1e>
    1f92:	nop

00001f94 <FsCache::prepare(unsigned long, unsigned char)>:
#define DBG_FILE "FsCache.cpp"
#include "FsCache.h"

#include "DebugMacros.h"
//------------------------------------------------------------------------------
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    1f94:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    1f96:	ldr	r3, [r0, #4]
    1f98:	cbz	r3, 1fda <FsCache::prepare(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    1f9a:	ldr	r3, [r0, #8]
    1f9c:	mov	r4, r0
    1f9e:	mov	r5, r2
    1fa0:	mov	r7, r1
    1fa2:	cmp	r3, r1
    1fa4:	beq.n	1fc4 <FsCache::prepare(unsigned long, unsigned char)+0x30>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    1fa6:	ldrb	r3, [r0, #0]
    1fa8:	lsls	r2, r3, #31
    1faa:	bmi.n	1fd2 <FsCache::prepare(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    1fac:	lsls	r3, r5, #29
    1fae:	bpl.n	1fde <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    1fb0:	add.w	r6, r4, #16
    1fb4:	movs	r2, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    1fb6:	and.w	r5, r5, #3
    1fba:	mov	r0, r6
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    1fbc:	str	r7, [r4, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
    1fbe:	orrs	r5, r2
    1fc0:	strb	r5, [r4, #0]
  return m_buffer;

fail:
  return nullptr;
}
    1fc2:	pop	{r3, r4, r5, r6, r7, pc}
    1fc4:	ldrsb.w	r2, [r0], #16
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    1fc8:	and.w	r5, r5, #3
    1fcc:	orrs	r5, r2
    1fce:	strb	r5, [r4, #0]
  return m_buffer;

fail:
  return nullptr;
}
    1fd0:	pop	{r3, r4, r5, r6, r7, pc}
    1fd2:	bl	1f4c <FsCache::sync() [clone .part.0]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    1fd6:	cmp	r0, #0
    1fd8:	bne.n	1fac <FsCache::prepare(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

fail:
  return nullptr;
    1fda:	movs	r0, #0
    1fdc:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_buffer)) {
    1fde:	ldr	r0, [r4, #4]
    1fe0:	add.w	r6, r4, #16
    1fe4:	mov	r1, r7
    1fe6:	ldr	r3, [r0, #0]
    1fe8:	mov	r2, r6
    1fea:	ldr	r3, [r3, #16]
    1fec:	blx	r3
    1fee:	cmp	r0, #0
    1ff0:	bne.n	1fb4 <FsCache::prepare(unsigned long, unsigned char)+0x20>
    1ff2:	b.n	1fda <FsCache::prepare(unsigned long, unsigned char)+0x46>

00001ff4 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    1ff4:	ldrb	r3, [r0, #0]
    1ff6:	lsls	r3, r3, #31
    1ff8:	bmi.n	1ffe <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    1ffa:	movs	r0, #1
    1ffc:	bx	lr
    1ffe:	b.w	1f4c <FsCache::sync() [clone .part.0]>
    2002:	nop

00002004 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2004:	cbz	r1, 2022 <Print::write(char const*)+0x1e>
    2006:	push	{r4, r5, r6, lr}
    2008:	mov	r5, r0
							  return write((const uint8_t *)str, strlen(str)); }
    200a:	mov	r0, r1
    200c:	mov	r4, r1
    200e:	bl	9e40 <strlen>
    2012:	ldr	r3, [r5, #0]
    2014:	mov	r2, r0
    2016:	mov	r1, r4
    2018:	mov	r0, r5
    201a:	ldr	r3, [r3, #4]
    201c:	ldmia.w	sp!, {r4, r5, r6, lr}
    2020:	bx	r3
    2022:	mov	r0, r1
    2024:	bx	lr
    2026:	nop

00002028 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    2028:	ldr	r3, [r2, #4]
    202a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    202e:	ldr	r6, [r2, #8]
    2030:	add.w	r7, r3, #15
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//------------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    2034:	ldrh.w	r0, [r1, #2]!
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2 * i);
    if (fname->atEnd()) {
    2038:	cmp	r3, r6
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
    203a:	add.w	r3, r3, #1
    if (toUpcase(cp) != toUpcase(u)) {
      return false;
    }
#else   // USE_UTF8_LONG_NAMES
    char c = fname->getch();
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    203e:	uxtb	r4, r0
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2 * i);
    if (fname->atEnd()) {
    2040:	beq.n	2082 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x5a>
    if (toUpcase(cp) != toUpcase(u)) {
      return false;
    }
#else   // USE_UTF8_LONG_NAMES
    char c = fname->getch();
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    2042:	cmp	r0, #126	; 0x7e
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "../common/upcase.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2044:	sub.w	r5, r4, #97	; 0x61
    2048:	str	r3, [r2, #4]
    if (toUpcase(cp) != toUpcase(u)) {
      return false;
    }
#else   // USE_UTF8_LONG_NAMES
    char c = fname->getch();
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    204a:	bhi.n	2072 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x4a>
    204c:	ldrb.w	r0, [r3, #-1]
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "../common/upcase.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2050:	sub.w	ip, r4, #32
    2054:	sub.w	lr, r0, #97	; 0x61
    2058:	sub.w	r8, r0, #32
    205c:	cmp.w	lr, #25
    2060:	it	ls
    2062:	uxtbls.w	r0, r8
    2066:	cmp	r5, #25
    2068:	it	ls
    206a:	uxtbls.w	r4, ip
    if (toUpcase(cp) != toUpcase(u)) {
      return false;
    }
#else   // USE_UTF8_LONG_NAMES
    char c = fname->getch();
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    206e:	cmp	r4, r0
    2070:	beq.n	2078 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x50>
      return false;
    2072:	movs	r0, #0
    2074:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
  for (uint8_t i = 0; i < 15; i++) {
    2078:	cmp	r3, r7
    207a:	bne.n	2034 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    207c:	movs	r0, #1
    207e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2 * i);
    if (fname->atEnd()) {
      return u == 0;
    2082:	clz	r0, r0
    2086:	lsrs	r0, r0, #5
    2088:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000208c <ExFatFile::hashName(ExName_t*)>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    208c:	push	{r4, r5, r6, r7}
    208e:	ldr	r7, [r1, #0]
    2090:	ldr	r5, [r1, #8]
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
    2092:	str	r7, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    2094:	cmp	r5, r7
    2096:	beq.n	20de <ExFatFile::hashName(ExName_t*)+0x52>
    2098:	mov	r0, r7
    209a:	movs	r3, #0
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
    209c:	adds	r0, #1
//------------------------------------------------------------------------------
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
//------------------------------------------------------------------------------
inline uint16_t exFatHash(char c, uint16_t hash) {
  uint8_t u = toUpper(c);
  hash = ((hash << 15) | (hash >> 1)) + u;
    209e:	lsls	r2, r3, #15
    20a0:	str	r0, [r1, #4]
    20a2:	orr.w	r2, r2, r3, lsr #1
    20a6:	ldrb.w	r3, [r0, #-1]
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "../common/upcase.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    20aa:	sub.w	r4, r3, #97	; 0x61
    20ae:	sub.w	r6, r3, #32
    20b2:	cmp	r4, #25
    20b4:	it	ls
    20b6:	uxtbls	r3, r6
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    20b8:	cmp	r5, r0
//------------------------------------------------------------------------------
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
//------------------------------------------------------------------------------
inline uint16_t exFatHash(char c, uint16_t hash) {
  uint8_t u = toUpper(c);
  hash = ((hash << 15) | (hash >> 1)) + u;
    20ba:	add	r3, r2
    20bc:	uxth	r3, r3
    20be:	mov.w	r2, r3, lsl #15
    20c2:	orr.w	r3, r2, r3, lsr #1
    20c6:	uxth	r3, r3
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    20c8:	bne.n	209c <ExFatFile::hashName(ExName_t*)+0x10>
    20ca:	subs	r5, r5, r7
    20cc:	subs	r0, r5, #1
    20ce:	cmp	r0, #254	; 0xfe
    20d0:	ite	hi
    20d2:	movhi	r0, #0
    20d4:	movls	r0, #1
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
    20d6:	str	r5, [r1, #12]
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    20d8:	strh	r3, [r1, #16]
  }
  return true;

fail:
  return false;
}
    20da:	pop	{r4, r5, r6, r7}
    20dc:	bx	lr
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    20de:	movs	r0, #0
    20e0:	mov	r5, r0
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
  uint16_t hash = 0;
    20e2:	mov	r3, r0
    20e4:	b.n	20d6 <ExFatFile::hashName(ExName_t*)+0x4a>
    20e6:	nop

000020e8 <ExFatFile::dirCache(unsigned char, unsigned char)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    20e8:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    20ea:	add.w	r3, r0, #36	; 0x24

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    20ee:	sub	sp, #20
    20f0:	mov	r5, r0
    20f2:	mov	r6, r1
  DirPos_t pos = m_dirPos;
    20f4:	add	r4, sp, #4

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    20f6:	mov	r7, r2
  DirPos_t pos = m_dirPos;
    20f8:	ldmia.w	r3, {r0, r1, r2}
    20fc:	stmia.w	r4, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    2100:	lsls	r2, r6, #5
    2102:	mov	r1, r4
    2104:	ldr	r0, [r5, #32]
    2106:	bl	2bc8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    210a:	cmp	r0, #1
    210c:	bne.n	211c <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    210e:	mov	r2, r7
    2110:	mov	r1, r4
    2112:	ldr	r0, [r5, #32]
    2114:	bl	2b50 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    2118:	add	sp, #20
    211a:	pop	{r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
  DirPos_t pos = m_dirPos;
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    return nullptr;
    211c:	movs	r0, #0
  }
  return m_vol->dirCache(&pos, options);
}
    211e:	add	sp, #20
    2120:	pop	{r4, r5, r6, r7, pc}
    2122:	nop

00002124 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    2124:	push	{r4, lr}
    2126:	mov	r4, r0
  bool rtn = sync();
    2128:	bl	3018 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    212c:	movs	r3, #0
    212e:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    2132:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    2136:	pop	{r4, pc}

00002138 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    2138:	ldrb.w	r2, [r0, #49]	; 0x31
    213c:	cbz	r2, 2142 <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    213e:	movs	r0, #0
    2140:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    2142:	push	{r3, r4, r5, lr}
    2144:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    2146:	mov	r1, r2
    2148:	movs	r2, #56	; 0x38
    214a:	mov	r4, r0
    214c:	bl	980c <memset>
  m_attributes = FILE_ATTR_ROOT;
    2150:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    2152:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    2154:	str	r5, [r4, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    2156:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    215a:	strb.w	r0, [r4, #51]	; 0x33
    215e:	pop	{r3, r4, r5, pc}

00002160 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
    2160:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2164:	mov	r8, r3
  // Skip leading spaces.
  while (*path == ' ') {
    2166:	ldrb	r3, [r1, #0]
    2168:	cmp	r3, #32
    216a:	bne.n	2174 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x14>
    216c:	ldrb.w	r3, [r1, #1]!
    2170:	cmp	r3, #32
    2172:	beq.n	216c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc>
    2174:	mov	r3, r1
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
    2176:	ldr.w	ip, [pc, #128]	; 21f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>
    path++;
  }
  fname->begin = path;
    217a:	str	r1, [r2, #0]
  fname->end = path;
    217c:	str	r1, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    217e:	ldrb	r4, [r3, #0]
    2180:	mov.w	lr, #1
    2184:	mov	r6, r3
    2186:	sub.w	r5, r4, #34	; 0x22
    218a:	cmp	r4, #47	; 0x2f
    218c:	it	ne
    218e:	cmpne	r4, #0
    2190:	sub.w	r7, r4, #32
    2194:	add	r3, lr
    2196:	uxtb	r5, r5
    2198:	beq.n	21ce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    219a:	cmp	r7, #95	; 0x5f
    219c:	lsr.w	r6, ip, r5
    21a0:	and.w	r1, r4, #191	; 0xbf
    21a4:	ite	ls
    21a6:	movls	r7, #0
    21a8:	movhi	r7, #1
    21aa:	cmp	r5, #29
    21ac:	and.w	r5, r6, #1
    21b0:	it	ls
    21b2:	eorls.w	lr, r5, #1
         c == '>' || c == '?' || c == '\\' || c == '|';
    21b6:	cmp	r7, lr
    21b8:	bcs.n	21f0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
    21ba:	cmp	r1, #60	; 0x3c
    21bc:	beq.n	21f0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
         c == '>' || c == '?' || c == '\\' || c == '|';
    21be:	cmp	r4, #92	; 0x5c
    21c0:	beq.n	21f0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    uint8_t c = *path++;
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (c != '.' && c != ' ') {
    21c2:	cmp	r4, #46	; 0x2e
    21c4:	beq.n	217e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    21c6:	cmp	r4, #32
    21c8:	beq.n	217e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
      // Need to trim trailing dots spaces.
      fname->end = path;
    21ca:	str	r3, [r2, #8]
    21cc:	b.n	217e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    21ce:	cmp	r4, #32
    21d0:	beq.n	21d6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    21d2:	cmp	r4, #47	; 0x2f
    21d4:	bne.n	21e2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x82>
    21d6:	ldrb.w	r3, [r6, #1]!
    21da:	cmp	r3, #32
    21dc:	beq.n	21d6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    21de:	cmp	r3, #47	; 0x2f
    21e0:	beq.n	21d6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
  }
  *ptr = path;
    21e2:	str.w	r6, [r8]
  return hashName(fname);
    21e6:	mov	r1, r2

fail:
  return false;
}
    21e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
  }
  *ptr = path;
  return hashName(fname);
    21ec:	b.w	208c <ExFatFile::hashName(ExName_t*)>

fail:
  return false;
}
    21f0:	movs	r0, #0
    21f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21f6:	nop
    21f8:	.word	0x31000101

000021fc <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    21fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2200:	ldrb.w	r3, [r0, #51]	; 0x33
    2204:	sub	sp, #12
    2206:	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    2208:	lsls	r6, r3, #31
    220a:	bpl.n	22ce <ExFatFile::read(void*, unsigned int)+0xd2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    220c:	lsls	r4, r3, #25
    220e:	mov	r6, r1
    2210:	mov	r9, r2
    2212:	bpl.w	2390 <ExFatFile::read(void*, unsigned int)+0x194>
    if ((m_curPosition + count) > m_validLength) {
    2216:	ldrd	r0, r1, [r5]
    221a:	ldrd	r2, r3, [r5, #16]
    221e:	adds.w	sl, r0, r9
    2222:	adc.w	fp, r1, #0
    2226:	cmp	r3, fp
    2228:	it	eq
    222a:	cmpeq	r2, sl
    222c:	bcc.w	239c <ExFatFile::read(void*, unsigned int)+0x1a0>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    2230:	cmp.w	r9, #0
    2234:	beq.n	2320 <ExFatFile::read(void*, unsigned int)+0x124>
    2236:	mov	sl, r5
    2238:	mov	r4, r9
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    223a:	movw	r7, #511	; 0x1ff
    223e:	ldrd	r0, r1, [sl], #24
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2242:	ldr	r3, [r5, #32]
    2244:	ldr.w	r2, [r3, #1080]	; 0x438
    2248:	and.w	r8, r2, r0
    sectorOffset = clusterOffset & m_vol->sectorMask();
    224c:	ubfx	fp, r8, #0, #9
    if (clusterOffset == 0) {
    2250:	cmp.w	r8, #0
    2254:	bne.n	232c <ExFatFile::read(void*, unsigned int)+0x130>
      if (m_curPosition == 0) {
    2256:	orrs.w	r2, r0, r1
    225a:	bne.n	2350 <ExFatFile::read(void*, unsigned int)+0x154>
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    225c:	ldrb.w	r2, [r5, #49]	; 0x31
    2260:	lsls	r1, r2, #25
    2262:	ite	mi
    2264:	ldrmi.w	r1, [r3, #1076]	; 0x434
    2268:	ldrpl	r1, [r5, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    226a:	str	r1, [r5, #24]
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    226c:	mov.w	r0, r8, lsr #9
    2270:	subs	r1, #2
    2272:	ldr.w	r2, [r3, #1068]	; 0x42c
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    2276:	cmp	r4, r7
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    2278:	ldrb.w	lr, [r3, #1093]	; 0x445
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    227c:	add	r2, r0
    227e:	lsl.w	r1, r1, lr
    2282:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    2284:	bls.n	22e4 <ExFatFile::read(void*, unsigned int)+0xe8>
    2286:	cmp.w	fp, #0
    228a:	bne.n	22e4 <ExFatFile::read(void*, unsigned int)+0xe8>
    228c:	ldr.w	r2, [r3, #536]	; 0x218
    2290:	cmp	r1, r2
    2292:	beq.n	22e4 <ExFatFile::read(void*, unsigned int)+0xe8>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    2294:	cmp.w	r4, #1024	; 0x400
    2298:	bcc.n	235e <ExFatFile::read(void*, unsigned int)+0x162>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    229a:	mov.w	ip, #1
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    229e:	mov.w	r8, r4, lsr #9
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    22a2:	lsl.w	lr, ip, lr
    22a6:	rsb	r0, r0, lr
    22aa:	cmp	r8, r0
    22ac:	it	cs
    22ae:	movcs	r8, r0
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    22b0:	cmp	r1, r2
    22b2:	bhi.n	2330 <ExFatFile::read(void*, unsigned int)+0x134>
    22b4:	add.w	r0, r1, r8
    22b8:	cmp	r2, r0
    22ba:	bcs.n	2330 <ExFatFile::read(void*, unsigned int)+0x134>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    22bc:	add.w	r0, r3, #528	; 0x210
    22c0:	str	r1, [sp, #4]
    22c2:	str	r3, [sp, #0]
    22c4:	bl	1ff4 <FsCache::sync()>
    22c8:	ldr	r3, [sp, #0]
    22ca:	ldr	r1, [sp, #4]
    22cc:	cbnz	r0, 2330 <ExFatFile::read(void*, unsigned int)+0x134>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    22ce:	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    22d2:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    22d6:	orr.w	r3, r3, #2
    22da:	strb.w	r3, [r5, #50]	; 0x32
  return -1;
}
    22de:	add	sp, #12
    22e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() { m_dataCache.dirty(); }
  void dataCacheInvalidate() { m_dataCache.invalidate(); }
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    22e4:	add.w	r0, r3, #528	; 0x210
    22e8:	movs	r2, #0
    22ea:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    22ee:	cmp	r0, #0
    22f0:	beq.n	22ce <ExFatFile::read(void*, unsigned int)+0xd2>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
        sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    22f2:	rsb	r8, fp, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    22f6:	add.w	r1, r0, fp
    22fa:	mov	r0, r6
    22fc:	cmp	r8, r4
    22fe:	it	cs
    2300:	movcs	r8, r4
    2302:	mov	r2, r8
    2304:	bl	69a8 <memcpy>
    2308:	mov	r0, r8
    230a:	movs	r1, #0
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    230c:	add	r6, r8
    m_curPosition += n;
    230e:	ldrd	r2, r3, [r5]
    2312:	adds	r0, r0, r2
    2314:	adcs	r1, r3
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    2316:	subs.w	r4, r4, r8
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    231a:	strd	r0, r1, [r5]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    231e:	bne.n	2242 <ExFatFile::read(void*, unsigned int)+0x46>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    2320:	movs	r4, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    2322:	rsb	r0, r4, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    2326:	add	sp, #12
    2328:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    232c:	ldr	r1, [r5, #24]
    232e:	b.n	226c <ExFatFile::read(void*, unsigned int)+0x70>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    2330:	ldr.w	r0, [r3, #532]	; 0x214
    2334:	mov	r2, r6
    2336:	mov	r3, r8
    2338:	ldr.w	lr, [r0]
    233c:	ldr.w	fp, [lr, #20]
    2340:	blx	fp
                       (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    2342:	cmp	r0, #0
    2344:	beq.n	22ce <ExFatFile::read(void*, unsigned int)+0xd2>
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    2346:	mov.w	r8, r8, lsl #9
    234a:	movs	r1, #0
    234c:	mov	r0, r8
    234e:	b.n	230c <ExFatFile::read(void*, unsigned int)+0x110>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    2350:	ldrb.w	r2, [r5, #51]	; 0x33
    2354:	lsls	r2, r2, #25
    2356:	bpl.n	237a <ExFatFile::read(void*, unsigned int)+0x17e>
        m_curCluster++;
    2358:	ldr	r1, [r5, #24]
    235a:	adds	r1, #1
    235c:	b.n	226a <ExFatFile::read(void*, unsigned int)+0x6e>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    235e:	ldr.w	r0, [r3, #532]	; 0x214
    2362:	mov	r2, r6
    2364:	ldr	r3, [r0, #0]
    2366:	ldr	r3, [r3, #16]
    2368:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    236a:	cmp	r0, #0
    236c:	beq.n	22ce <ExFatFile::read(void*, unsigned int)+0xd2>
    236e:	mov.w	r0, #512	; 0x200
    2372:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    2374:	mov.w	r8, #512	; 0x200
    2378:	b.n	230c <ExFatFile::read(void*, unsigned int)+0x110>
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    237a:	mov	r0, r3
    237c:	mov	r2, sl
    237e:	ldr	r1, [r5, #24]
    2380:	bl	2b88 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    2384:	cmp	r0, #0
    2386:	blt.n	22ce <ExFatFile::read(void*, unsigned int)+0xd2>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    2388:	beq.n	23a2 <ExFatFile::read(void*, unsigned int)+0x1a6>
    238a:	ldr	r3, [r5, #32]
    238c:	ldr	r1, [r5, #24]
    238e:	b.n	226c <ExFatFile::read(void*, unsigned int)+0x70>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    2390:	ldrb.w	r3, [r0, #49]	; 0x31
    2394:	lsls	r0, r3, #28
    2396:	bmi.w	2216 <ExFatFile::read(void*, unsigned int)+0x1a>
    239a:	b.n	2230 <ExFatFile::read(void*, unsigned int)+0x34>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    239c:	rsb	r9, r0, r2
    23a0:	b.n	2230 <ExFatFile::read(void*, unsigned int)+0x34>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
    23a2:	ldrb.w	r3, [r5, #49]	; 0x31
    23a6:	tst.w	r3, #80	; 0x50
    23aa:	bne.n	2322 <ExFatFile::read(void*, unsigned int)+0x126>
    23ac:	b.n	22ce <ExFatFile::read(void*, unsigned int)+0xd2>
    23ae:	nop

000023b0 <ExFatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
    23b0:	push	{r4, r5, r6, r7, lr}
    23b2:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    23b4:	movs	r2, #1
    23b6:	mov	r4, r0
  uint64_t saveCurPosition = m_curPosition;
  uint32_t saveCurCluster = m_curCluster;
    23b8:	ldr	r5, [r0, #24]
    23ba:	add.w	r1, sp, #7
fail:
  return false;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t saveCurPosition = m_curPosition;
    23be:	ldrd	r6, r7, [r0]
    23c2:	bl	21fc <ExFatFile::read(void*, unsigned int)>
    23c6:	cmp	r0, #1
  uint32_t saveCurCluster = m_curCluster;
  int c = read();
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
    23c8:	str	r5, [r4, #24]
    23ca:	ite	eq
    23cc:	ldrbeq.w	r0, [sp, #7]
    23d0:	movne.w	r0, #4294967295
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t saveCurPosition = m_curPosition;
  uint32_t saveCurCluster = m_curCluster;
  int c = read();
  m_curPosition = saveCurPosition;
    23d4:	strd	r6, r7, [r4]
  m_curCluster = saveCurCluster;
  return c;
}
    23d8:	add	sp, #12
    23da:	pop	{r4, r5, r6, r7, pc}

000023dc <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    23dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23e0:	ldrb.w	lr, [r0, #49]	; 0x31
    23e4:	sub	sp, #20
    23e6:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    23e8:	ldr	r5, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    23ea:	cmp.w	lr, #0
    23ee:	beq.n	245e <ExFatFile::seekSet(unsigned long long)+0x82>
    23f0:	mov	r6, r2
    23f2:	mov	r7, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    23f4:	ldrd	r0, r1, [r0]
    23f8:	cmp	r1, r3
    23fa:	it	eq
    23fc:	cmpeq	r0, r2
    23fe:	beq.n	24cc <ExFatFile::seekSet(unsigned long long)+0xf0>
    return true;
  }
  if (pos == 0) {
    2400:	orrs.w	r3, r6, r7
    2404:	bne.n	2468 <ExFatFile::seekSet(unsigned long long)+0x8c>
    // set position to start of file
    m_curCluster = 0;
    2406:	movs	r3, #0
    2408:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    240a:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    240c:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    2410:	add	sp, #20
    2412:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    2416:	adds.w	r2, r0, #4294967295
    241a:	adc.w	r3, r1, #4294967295
    241e:	lsr.w	ip, r2, ip
    2422:	lsl.w	r8, r3, r8
    2426:	lsr.w	sl, r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    242a:	orrs.w	r3, r0, r1
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    242e:	orr.w	ip, ip, r8
    2432:	orr.w	ip, ip, sl
  if (nNew < nCur || m_curPosition == 0) {
    2436:	beq.n	24d0 <ExFatFile::seekSet(unsigned long long)+0xf4>
    2438:	cmp	fp, ip
    243a:	bcc.n	24d0 <ExFatFile::seekSet(unsigned long long)+0xf4>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    243c:	rsb	fp, ip, fp
    2440:	mov	r9, r5
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    2442:	add.w	r8, r4, #24
    2446:	mov	r5, fp
    2448:	mov	r2, r8
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    244a:	cmp	r5, #0
    244c:	beq.n	240a <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    244e:	ldr	r1, [r4, #24]
    2450:	subs	r5, #1
    2452:	ldr	r0, [r4, #32]
    2454:	bl	2b88 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    2458:	cmp	r0, #0
    245a:	bgt.n	2448 <ExFatFile::seekSet(unsigned long long)+0x6c>
    245c:	mov	r5, r9
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    245e:	movs	r0, #0
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    2460:	str	r5, [r4, #24]
  return false;
}
    2462:	add	sp, #20
    2464:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    2468:	tst.w	lr, #8
    246c:	bne.n	24be <ExFatFile::seekSet(unsigned long long)+0xe2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    246e:	ldr	r3, [r4, #32]
    2470:	adds.w	r8, r6, #4294967295
    2474:	ldrb.w	ip, [r3, #1093]	; 0x445
    2478:	adc.w	r9, r7, #4294967295
    247c:	mov	sl, r8
    247e:	str	r3, [sp, #12]
    2480:	add.w	ip, ip, #9
    2484:	mov	fp, r9
  if (isContiguous()) {
    2486:	ldrb.w	r9, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    248a:	uxtb.w	ip, ip
  if (isContiguous()) {
    248e:	tst.w	r9, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    2492:	rsb	r8, ip, #32
    2496:	lsr.w	r2, sl, ip
    249a:	strd	sl, fp, [sp]
    249e:	ldr	r3, [sp, #4]
    24a0:	sub.w	sl, ip, #32
    24a4:	lsl.w	fp, r3, r8
    24a8:	lsr.w	r3, r3, sl
    24ac:	orr.w	r2, r2, fp
    24b0:	orr.w	fp, r2, r3
  if (isContiguous()) {
    24b4:	beq.n	2416 <ExFatFile::seekSet(unsigned long long)+0x3a>
    m_curCluster = m_firstCluster + nNew;
    24b6:	ldr	r3, [r4, #28]
    24b8:	add	r3, fp
    24ba:	str	r3, [r4, #24]
    goto done;
    24bc:	b.n	240a <ExFatFile::seekSet(unsigned long long)+0x2e>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_validLength) {
    24be:	ldrd	r2, r3, [r4, #16]
    24c2:	cmp	r3, r7
    24c4:	it	eq
    24c6:	cmpeq	r2, r6
    24c8:	bcc.n	245e <ExFatFile::seekSet(unsigned long long)+0x82>
    24ca:	b.n	246e <ExFatFile::seekSet(unsigned long long)+0x92>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    24cc:	movs	r0, #1
    24ce:	b.n	2462 <ExFatFile::seekSet(unsigned long long)+0x86>
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    24d0:	tst.w	lr, #64	; 0x40
    24d4:	bne.n	24dc <ExFatFile::seekSet(unsigned long long)+0x100>
    24d6:	ldr	r3, [r4, #28]
    24d8:	str	r3, [r4, #24]
    24da:	b.n	2440 <ExFatFile::seekSet(unsigned long long)+0x64>
    24dc:	ldr	r3, [sp, #12]
    24de:	ldr.w	r3, [r3, #1076]	; 0x434
    24e2:	b.n	24d8 <ExFatFile::seekSet(unsigned long long)+0xfc>

000024e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    24e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24e8:	mov	fp, r3
  uint8_t freeCount = 0;
  uint8_t freeNeed = 3;
  bool inSet = false;

  // error if already open, no access mode, or no directory.
  if (isOpen() || !dir->isDir()) {
    24ea:	ldrb.w	r3, [r0, #49]	; 0x31

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    24ee:	sub	sp, #60	; 0x3c
    24f0:	mov	r8, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed = 3;
  bool inSet = false;

  // error if already open, no access mode, or no directory.
  if (isOpen() || !dir->isDir()) {
    24f2:	cbnz	r3, 2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    24f4:	ldrb.w	r3, [r1, #49]	; 0x31
    24f8:	mov	r4, r1
    24fa:	tst.w	r3, #80	; 0x50
    24fe:	bne.n	2512 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e>
  return sync();
#endif  // EXFAT_READ_ONLY

fail:
  // close file
  m_attributes = FILE_ATTR_CLOSED;
    2500:	movs	r3, #0
  m_flags = 0;
  return false;
    2502:	mov	r0, r3
  return sync();
#endif  // EXFAT_READ_ONLY

fail:
  // close file
  m_attributes = FILE_ATTR_CLOSED;
    2504:	strb.w	r3, [r8, #49]	; 0x31
  m_flags = 0;
    2508:	strb.w	r3, [r8, #51]	; 0x33
  return false;
}
    250c:	add	sp, #60	; 0x3c
    250e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  switch (oflag & O_ACCMODE) {
    2512:	and.w	r3, fp, #3
    2516:	mov	r9, r2
    2518:	cmp	r3, #1
    251a:	beq.n	2560 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x7c>
    251c:	cmp	r3, #2
    251e:	beq.w	2732 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x24e>
    2522:	cmp	r3, #0
    2524:	bne.n	2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    2526:	movs	r2, #1
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    2528:	and.w	r3, fp, #8
    252c:	orrs	r3, r2
    252e:	str	r3, [sp, #8]

  if (fname) {
    2530:	cmp.w	r9, #0
    2534:	beq.n	2570 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8c>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    2536:	ldr.w	r3, [r9, #12]
    253a:	ldr	r5, [pc, #776]	; (2844 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x360>)
    253c:	adds	r3, #14
    253e:	umull	r3, r5, r5, r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    2542:	ldrd	r2, r3, [r4]
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;

  if (fname) {
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    2546:	lsrs	r5, r5, #3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    2548:	orrs	r3, r2
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;

  if (fname) {
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    254a:	add.w	r5, r5, #2
    254e:	uxtb	r5, r5
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    2550:	beq.n	2572 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8e>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    2552:	movs	r1, #0
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    2554:	movs	r2, #0
    2556:	movs	r3, #0
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    2558:	str	r1, [r4, #24]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    255a:	strd	r2, r3, [r4]
    255e:	b.n	2572 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8e>
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  switch (oflag & O_ACCMODE) {
    2560:	movs	r2, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    2562:	and.w	r3, fp, #8
    2566:	orrs	r3, r2
    2568:	str	r3, [sp, #8]

  if (fname) {
    256a:	cmp.w	r9, #0
    256e:	bne.n	2536 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x52>
  DirFile_t* dirFile;
  DirStream_t* dirStream;
  DirName_t* dirName;
  uint8_t buf[FS_DIR_SIZE];
  uint8_t freeCount = 0;
  uint8_t freeNeed = 3;
    2570:	movs	r5, #3
        }
        // Likely openNext call.
        DBG_WARN_MACRO;
        goto fail;
      }
      inSet = false;
    2572:	movs	r6, #0
      m_dirPos.isContiguous = dir->isContiguous();
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
        m_flags |= FILE_FLAG_CONTIGUOUS;
    2574:	ldr	r3, [sp, #8]
        }
        // Likely openNext call.
        DBG_WARN_MACRO;
        goto fail;
      }
      inSet = false;
    2576:	mov	r7, r6
      m_dirPos.isContiguous = dir->isContiguous();
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
        m_flags |= FILE_FLAG_CONTIGUOUS;
    2578:	orr.w	r3, r3, #64	; 0x40
    257c:	str	r3, [sp, #12]
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    dir->rewind();
  }

  while (1) {
    n = dir->read(buf, FS_DIR_SIZE);
    257e:	movs	r2, #32
    2580:	add	r1, sp, #24
    2582:	mov	r0, r4
    2584:	bl	21fc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    2588:	cbz	r0, 25c0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xdc>
      goto create;
    }
    if (n != FS_DIR_SIZE) {
    258a:	cmp	r0, #32
    258c:	bne.n	2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & EXFAT_TYPE_USED)) {
    258e:	ldrb.w	r3, [sp, #24]
    2592:	lsls	r2, r3, #24
    2594:	bmi.n	2618 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x134>
      // Unused entry.
      if (freeCount == 0) {
    2596:	cbnz	r7, 25a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xbe>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    2598:	ldr	r2, [r4, #0]
    259a:	ldr.w	sl, [r4, #24]
    259e:	subs	r2, #32
    25a0:	str	r2, [sp, #4]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    25a2:	cmp	r7, r5
    25a4:	bcs.n	25aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
        freeCount++;
    25a6:	adds	r7, #1
    25a8:	uxtb	r7, r7
      }
      if (buf[0] == EXFAT_TYPE_END_DIR) {
    25aa:	cmp	r3, #0
    25ac:	beq.w	2736 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x252>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    dir->rewind();
  }

  while (1) {
    n = dir->read(buf, FS_DIR_SIZE);
    25b0:	movs	r2, #32
    25b2:	add	r1, sp, #24
    25b4:	mov	r0, r4
      }
      if (fname->atEnd()) {
        goto found;
      }
    } else {
      inSet = false;
    25b6:	movs	r6, #0
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    dir->rewind();
  }

  while (1) {
    n = dir->read(buf, FS_DIR_SIZE);
    25b8:	bl	21fc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    25bc:	cmp	r0, #0
    25be:	bne.n	258a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa6>
#if EXFAT_READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else   // EXFAT_READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    25c0:	tst.w	fp, #512	; 0x200
    25c4:	beq.n	2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    25c6:	ldr	r3, [sp, #8]
    25c8:	lsls	r2, r3, #30
    25ca:	bpl.n	2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    25cc:	cmp.w	r9, #0
    25d0:	beq.n	2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    DBG_WARN_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    25d2:	cmp	r7, r5
    25d4:	bcs.w	2746 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x262>
    25d8:	ldr	r6, [sp, #4]
    25da:	b.n	25f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10e>
        goto fail;
      }
      dir->m_curCluster = saveCurCluster;
      continue;
    }
    if (n != FS_DIR_SIZE) {
    25dc:	cmp	r0, #32
    25de:	bne.n	2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    25e0:	cbnz	r7, 25ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x106>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    25e2:	ldr	r6, [r4, #0]
    25e4:	ldr.w	sl, [r4, #24]
    25e8:	subs	r6, #32
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    25ea:	uxtb	r7, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    DBG_WARN_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    25ec:	cmp	r5, r7
    25ee:	bls.w	2744 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x260>
    n = dir->read(buf, FS_DIR_SIZE);
    25f2:	movs	r2, #32
    25f4:	add	r1, sp, #24
    25f6:	mov	r0, r4
    25f8:	bl	21fc <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    25fc:	adds	r3, r7, #1
    DBG_WARN_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, FS_DIR_SIZE);
    if (n == 0) {
    25fe:	cmp	r0, #0
    2600:	bne.n	25dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xf8>
      uint32_t saveCurCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    2602:	mov	r0, r4
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, FS_DIR_SIZE);
    if (n == 0) {
      uint32_t saveCurCluster = dir->m_curCluster;
    2604:	ldr.w	fp, [r4, #24]
      if (!dir->addDirCluster()) {
    2608:	bl	3078 <ExFatFile::addDirCluster()>
    260c:	cmp	r0, #0
    260e:	beq.w	2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = saveCurCluster;
    2612:	str.w	fp, [r4, #24]
      continue;
    2616:	b.n	25ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x108>
        // Likely openNext call.
        DBG_WARN_MACRO;
        goto fail;
      }
      inSet = false;
    } else if (!inSet) {
    2618:	cbnz	r6, 266e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
      if (freeCount < freeNeed) {
        freeCount = 0;
    261a:	cmp	r7, r5
    261c:	it	cc
    261e:	movcc	r7, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    2620:	cmp	r3, #133	; 0x85
    2622:	bne.n	257e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
        continue;
      }
      inSet = true;
      memset(this, 0, sizeof(ExFatFile));
    2624:	mov	r1, r6
    2626:	movs	r2, #56	; 0x38
    2628:	mov	r0, r8
        freeCount = 0;
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    262a:	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    262c:	bl	980c <memset>
      dirFile = reinterpret_cast<DirFile_t*>(buf);
      m_setCount = dirFile->setCount;
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    2630:	ldrb.w	r3, [sp, #28]
        continue;
      }
      inSet = true;
      memset(this, 0, sizeof(ExFatFile));
      dirFile = reinterpret_cast<DirFile_t*>(buf);
      m_setCount = dirFile->setCount;
    2634:	ldrb.w	r2, [sp, #25]
    2638:	strb.w	r2, [r8, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    263c:	and.w	r2, r3, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
    2640:	lsls	r3, r3, #27
        m_attributes |= FILE_ATTR_FILE;
    2642:	it	pl
    2644:	orrpl.w	r2, r2, #8
    2648:	strb.w	r2, [r8, #49]	; 0x31
      }
      m_vol = dir->volume();
      m_dirPos.cluster = dir->curCluster();
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    264c:	ldr	r3, [r4, #0]
    264e:	ldr	r2, [r4, #32]
    2650:	ldr	r1, [r4, #24]
    2652:	subs	r3, #32
      m_setCount = dirFile->setCount;
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
        m_attributes |= FILE_ATTR_FILE;
      }
      m_vol = dir->volume();
    2654:	str.w	r2, [r8, #32]
      m_dirPos.cluster = dir->curCluster();
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    2658:	str.w	r3, [r8, #40]	; 0x28
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
        m_attributes |= FILE_ATTR_FILE;
      }
      m_vol = dir->volume();
      m_dirPos.cluster = dir->curCluster();
    265c:	str.w	r1, [r8, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
      m_dirPos.isContiguous = dir->isContiguous();
    2660:	ldrb.w	r3, [r4, #51]	; 0x33
    2664:	ubfx	r3, r3, #6, #1
    2668:	strb.w	r3, [r8, #44]	; 0x2c
    266c:	b.n	257e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    266e:	cmp	r3, #192	; 0xc0
    2670:	beq.n	26d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1f2>
      fname->reset();
      if (fname->nameLength != dirStream->nameLength ||
          fname->nameHash != getLe16(dirStream->nameHash)) {
        inSet = false;
      }
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    2672:	cmp	r3, #193	; 0xc1
    2674:	bne.n	25b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xcc>
      dirName = reinterpret_cast<DirName_t*>(buf);
      if (!cmpName(dirName, fname)) {
    2676:	mov	r2, r9
    2678:	add	r1, sp, #24
    267a:	mov	r0, r8
    267c:	bl	2028 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    2680:	cmp	r0, #0
    2682:	beq.n	2740 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25c>
        inSet = false;
        continue;
      }
      if (fname->atEnd()) {
    2684:	ldr.w	r2, [r9, #4]
    2688:	ldr.w	r3, [r9, #8]
    268c:	cmp	r2, r3
    268e:	bne.w	257e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    2692:	tst.w	fp, #2048	; 0x800
    2696:	bne.w	2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    269a:	tst.w	fp, #17408	; 0x4400
    269e:	bne.w	27f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30e>
    26a2:	ldrb.w	r3, [r8, #51]	; 0x33
    26a6:	lsls	r0, r3, #30
    26a8:	bmi.w	27f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30e>
      goto fail;
    }
  }

#if !EXFAT_READ_ONLY
  if (oflag & O_TRUNC) {
    26ac:	tst.w	fp, #1024	; 0x400
    26b0:	bne.w	2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    26b4:	tst.w	fp, #16384	; 0x4000
    26b8:	bne.w	2832 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isWritable()) {
    26bc:	ldrb.w	r3, [r8, #51]	; 0x33
    26c0:	lsls	r3, r3, #30
    26c2:	bpl.w	282e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34a>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    26c6:	ldrb.w	r3, [r8, #49]	; 0x31
  }
#endif  // !EXFAT_READ_ONLY
  return true;
    26ca:	movs	r0, #1
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isWritable()) {
    m_attributes |= FS_ATTRIB_ARCHIVE;
    26cc:	orr.w	r3, r3, #32
    26d0:	strb.w	r3, [r8, #49]	; 0x31
    26d4:	b.n	250c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28>
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
      m_dirPos.isContiguous = dir->isContiguous();
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    26d6:	ldrb.w	r3, [sp, #25]
      m_dirPos.cluster = dir->curCluster();
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
      m_dirPos.isContiguous = dir->isContiguous();
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
    26da:	ldrb.w	r2, [sp, #8]
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    26de:	lsls	r6, r3, #30
      m_dirPos.cluster = dir->curCluster();
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
      m_dirPos.isContiguous = dir->isContiguous();
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
    26e0:	strb.w	r2, [r8, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    26e4:	bpl.n	26ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x20a>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    26e6:	ldrb.w	r3, [sp, #12]
    26ea:	strb.w	r3, [r8, #51]	; 0x33
      }
      m_validLength = getLe64(dirStream->validLength);
      m_firstCluster = getLe32(dirStream->firstCluster);
    26ee:	ldr	r1, [sp, #44]	; 0x2c
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
        m_flags |= FILE_FLAG_CONTIGUOUS;
      }
      m_validLength = getLe64(dirStream->validLength);
    26f0:	ldrd	r2, r3, [sp, #32]
      m_firstCluster = getLe32(dirStream->firstCluster);
    26f4:	str.w	r1, [r8, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    26f8:	ldrd	r0, r1, [sp, #48]	; 0x30
      dirStream = reinterpret_cast<DirStream_t*>(buf);
      m_flags = modeFlags;
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
        m_flags |= FILE_FLAG_CONTIGUOUS;
      }
      m_validLength = getLe64(dirStream->validLength);
    26fc:	strd	r2, r3, [r8, #16]
      m_firstCluster = getLe32(dirStream->firstCluster);
      m_dataLength = getLe64(dirStream->dataLength);
    2700:	strd	r0, r1, [r8, #8]
      if (!fname) {
    2704:	cmp.w	r9, #0
    2708:	beq.n	2692 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ae>
        goto found;
      }
      fname->reset();
      if (fname->nameLength != dirStream->nameLength ||
    270a:	ldrb.w	r3, [sp, #27]
    270e:	ldr.w	r2, [r9, #12]
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
    2712:	ldr.w	r1, [r9]
    2716:	cmp	r2, r3
    2718:	str.w	r1, [r9, #4]
    271c:	bne.w	25b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xcc>
    2720:	ldrh.w	r6, [sp, #28]
    2724:	ldrh.w	r3, [r9, #16]
    2728:	subs	r6, r6, r3
    272a:	clz	r6, r6
    272e:	lsrs	r6, r6, #5
    2730:	b.n	257e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  switch (oflag & O_ACCMODE) {
    2732:	movs	r2, #3
    2734:	b.n	2562 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x7e>
      }
      if (freeCount < freeNeed) {
        freeCount++;
      }
      if (buf[0] == EXFAT_TYPE_END_DIR) {
        if (fname) {
    2736:	cmp.w	r9, #0
    273a:	bne.w	25c0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xdc>
    273e:	b.n	2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
        inSet = false;
      }
    } else if (buf[0] == EXFAT_TYPE_NAME) {
      dirName = reinterpret_cast<DirName_t*>(buf);
      if (!cmpName(dirName, fname)) {
        inSet = false;
    2740:	mov	r6, r0
    2742:	b.n	257e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
    2744:	str	r6, [sp, #4]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
    2746:	movs	r2, #56	; 0x38
    2748:	movs	r1, #0
    274a:	mov	r0, r8
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
    274c:	ldrb.w	r6, [r4, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    2750:	bl	980c <memset>
    2754:	ldr	r2, [r4, #32]
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    2756:	movs	r3, #40	; 0x28
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
    2758:	ubfx	r6, r6, #6, #1
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    275c:	str.w	r2, [r8, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
  m_dirPos = freePos;
    2760:	ldr	r2, [sp, #4]
    2762:	strb.w	r6, [r8, #44]	; 0x2c
    2766:	str.w	sl, [r8, #36]	; 0x24
    276a:	str.w	r2, [r8, #40]	; 0x28
    freeCount++;
  }
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    276e:	strb.w	r3, [r8, #49]	; 0x31
    2772:	ldr.w	r3, [r9]
    2776:	str.w	r3, [r9, #4]
  m_dirPos = freePos;
  fname->reset();
  for (uint8_t i = 0; i < freeNeed; i++) {
    277a:	cbz	r5, 27ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x306>
    277c:	movs	r7, #0
    }
    memset(cache, 0, FS_DIR_SIZE);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    277e:	subs	r4, r5, #1
      dirFile->setCount = m_setCount;

      if (FsDateTime::callback) {
    2780:	ldr	r6, [pc, #196]	; (2848 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x364>)
    2782:	mov	fp, r7
    }
    memset(cache, 0, FS_DIR_SIZE);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    2784:	uxtb	r4, r4
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
  m_dirPos = freePos;
  fname->reset();
  for (uint8_t i = 0; i < freeNeed; i++) {
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    2786:	movs	r2, #1
    2788:	mov	r1, fp
    278a:	mov	r0, r8
    278c:	bl	20e8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    2790:	mov	sl, r0
    2792:	cmp	r0, #0
    2794:	beq.w	2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    2798:	ldrsb.w	r3, [r0]
    279c:	cmp	r3, #0
    279e:	blt.w	2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0, FS_DIR_SIZE);
    27a2:	movs	r2, #32
    27a4:	movs	r1, #0
    27a6:	bl	980c <memset>
    if (i == 0) {
    27aa:	cmp	r7, #0
    27ac:	beq.n	2872 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38e>
          setLe16(dirFile->createTime, FS_DEFAULT_TIME);
          setLe16(dirFile->modifyTime, FS_DEFAULT_TIME);
          setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
        }
      }
    } else if (i == 1) {
    27ae:	cmp.w	fp, #1
    27b2:	beq.n	284c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x368>
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
      dirStream->nameLength = fname->nameLength;
      setLe16(dirStream->nameHash, fname->nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    27b4:	movs	r3, #193	; 0xc1
    27b6:	mov	r2, sl
    27b8:	add.w	lr, sl, #30
    27bc:	strb.w	r3, [sl]
    27c0:	ldr.w	r3, [r9, #4]
    27c4:	ldr.w	r0, [r9, #8]
      for (size_t k = 0; k < 15; k++) {
        if (fname->atEnd()) {
    27c8:	cmp	r3, r0
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    27ca:	add.w	r3, r3, #1
    27ce:	beq.n	27e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fc>
    27d0:	str.w	r3, [r9, #4]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    27d4:	ldrb.w	r1, [r3, #-1]
    27d8:	strh.w	r1, [r2, #2]!
      dirStream->nameLength = fname->nameLength;
      setLe16(dirStream->nameHash, fname->nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
      for (size_t k = 0; k < 15; k++) {
    27dc:	cmp	r2, lr
    27de:	bne.n	27c8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
    27e0:	adds	r7, #1
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
  m_dirPos = freePos;
  fname->reset();
  for (uint8_t i = 0; i < freeNeed; i++) {
    27e2:	uxtb.w	fp, r7
    27e6:	cmp	fp, r5
    27e8:	bcc.n	2786 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a2>
        uint16_t u = fname->get16();
        setLe16(dirName->unicode + 2 * k, u);
      }
    }
  }
  return sync();
    27ea:	mov	r0, r8
    27ec:	bl	3018 <ExFatFile::sync()>
    27f0:	b.n	250c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    27f2:	ldrb.w	r3, [r8, #49]	; 0x31
    27f6:	tst.w	r3, #17
    27fa:	bne.w	2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
      goto fail;
    }
  }

#if !EXFAT_READ_ONLY
  if (oflag & O_TRUNC) {
    27fe:	tst.w	fp, #1024	; 0x400
    2802:	beq.w	26b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d0>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    2806:	ldrb.w	r3, [r8, #51]	; 0x33
    280a:	lsls	r1, r3, #30
    280c:	bpl.w	2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
   *
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
    2810:	movs	r2, #0
    2812:	movs	r3, #0
    2814:	mov	r0, r8
    2816:	bl	23dc <ExFatFile::seekSet(unsigned long long)>
    281a:	cmp	r0, #0
    281c:	beq.w	2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    2820:	mov	r0, r8
    2822:	bl	324c <ExFatFile::truncate()>
    2826:	cmp	r0, #0
    2828:	beq.w	2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    282c:	b.n	26bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d8>
  }
  if (isWritable()) {
    m_attributes |= FS_ATTRIB_ARCHIVE;
  }
#endif  // !EXFAT_READ_ONLY
  return true;
    282e:	movs	r0, #1
    2830:	b.n	250c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    2832:	mov	r0, r8
    2834:	ldrd	r2, r3, [r8, #16]
    2838:	bl	23dc <ExFatFile::seekSet(unsigned long long)>
    283c:	cmp	r0, #0
    283e:	bne.w	26bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d8>
    2842:	b.n	2500 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c>
    2844:	.word	0x88888889
    2848:	.word	0x20021b98
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    284c:	ldr	r3, [sp, #8]
          setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
        }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    284e:	movs	r2, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    2850:	strb.w	fp, [sl, #1]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    2854:	orn	r3, r3, #127	; 0x7f
          setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
        }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    2858:	strb.w	r2, [sl]
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    285c:	strb.w	r3, [r8, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    2860:	ldr.w	r3, [r9, #12]
    2864:	strb.w	r3, [sl, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    2868:	ldrh.w	r3, [r9, #16]
    286c:	strh.w	r3, [sl, #4]
    2870:	b.n	27e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fc>
      goto fail;
    }
    memset(cache, 0, FS_DIR_SIZE);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    2872:	movs	r3, #133	; 0x85
    2874:	strb.w	r3, [sl]
      m_setCount = freeNeed - 1;
    2878:	strb.w	r4, [r8, #48]	; 0x30
      dirFile->setCount = m_setCount;
    287c:	strb.w	r4, [sl, #1]

      if (FsDateTime::callback) {
    2880:	ldr	r3, [r6, #0]
    2882:	cbz	r3, 28aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c6>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    2884:	add.w	r2, sp, #19
    2888:	add.w	r1, sp, #22
    288c:	add	r0, sp, #20
    288e:	blx	r3
    2890:	ldrh.w	r1, [sp, #20]
    2894:	ldrh.w	r2, [sp, #22]
        setLe16(dirFile->createDate, date);
        setLe16(dirFile->createTime, time);
        dirFile->createTimeMs = ms10;
    2898:	ldrb.w	r3, [sp, #19]
    289c:	strh.w	r1, [sl, #10]
    28a0:	strh.w	r2, [sl, #8]
    28a4:	strb.w	r3, [sl, #20]
    28a8:	b.n	27e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fc>
    28aa:	movw	r3, #22049	; 0x5621
    28ae:	strh.w	r3, [sl, #10]
    28b2:	strh.w	r3, [sl, #14]
    28b6:	strh.w	r3, [sl, #18]
    28ba:	b.n	27e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fc>

000028bc <ExFatFile::open(ExFatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    28bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    28c0:	mov	r6, r0
    28c2:	sub	sp, #92	; 0x5c
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    28c4:	movs	r0, #0
    28c6:	mov	r5, r1
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    28c8:	ldrb.w	r1, [r6, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    28cc:	str	r2, [sp, #4]
    28ce:	strb.w	r0, [sp, #81]	; 0x51
    28d2:	strb.w	r0, [sp, #82]	; 0x52
    28d6:	strb.w	r0, [sp, #83]	; 0x53
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    28da:	cbnz	r1, 28e8 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    28dc:	mov	r9, r3
    28de:	ldrb.w	r3, [r5, #49]	; 0x31
    28e2:	tst.w	r3, #80	; 0x50
    28e6:	bne.n	28f0 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return openPrivate(dirFile, &fname, oflag);

fail:
  return false;
    28e8:	movs	r0, #0
}
    28ea:	add	sp, #92	; 0x5c
    28ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    28f0:	ldrb	r3, [r2, #0]
    28f2:	mov	r4, r2
    28f4:	cmp	r3, #47	; 0x2f
    28f6:	beq.n	295e <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    28f8:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    28fc:	mov	r1, r4
    28fe:	add	r3, sp, #4
    2900:	add	r2, sp, #12
    2902:	mov	r0, r6
    2904:	bl	2160 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2908:	cmp	r0, #0
    290a:	beq.n	28e8 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    290c:	ldr	r3, [sp, #4]
    290e:	ldrb	r3, [r3, #0]
    2910:	cmp	r3, #0
    2912:	beq.n	2988 <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
      break;
    }
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    2914:	mov	r1, r5
    2916:	movs	r3, #0
    2918:	add	r2, sp, #12
    291a:	mov	r0, r6
    291c:	bl	24e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    2920:	cmp	r0, #0
    2922:	beq.n	28e8 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    2924:	mov	r4, r6
    2926:	add	r7, sp, #32
    2928:	add.w	lr, r6, #48	; 0x30
    292c:	ldr	r0, [r4, #0]
    292e:	adds	r4, #16
    2930:	ldr.w	r1, [r4, #-12]
    2934:	mov	r5, r7
    2936:	ldr.w	r2, [r4, #-8]
    293a:	adds	r7, #16
    293c:	ldr.w	r3, [r4, #-4]
    2940:	cmp	r4, lr
    2942:	stmia	r5!, {r0, r1, r2, r3}
    2944:	bne.n	292c <ExFatFile::open(ExFatFile*, char const*, int)+0x70>
    2946:	ldr	r0, [r4, #0]
    dirFile = &tmpDir;
    2948:	add	r5, sp, #32
    }
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    294a:	str	r0, [r7, #0]
  }
  return m_vol->dirCache(&pos, options);
}
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    294c:	mov	r0, r6
    294e:	bl	3018 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    2952:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    2956:	strb.w	r8, [r6, #51]	; 0x33
    295a:	ldr	r4, [sp, #4]
    295c:	b.n	28fc <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    295e:	adds	r4, #1
    2960:	str	r4, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    2962:	ldrb	r1, [r4, #0]
    2964:	cmp	r1, #47	; 0x2f
    2966:	beq.n	295e <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      path++;
    }
    if (*path == 0) {
    2968:	cbz	r1, 299a <ExFatFile::open(ExFatFile*, char const*, int)+0xde>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    296a:	add	r0, sp, #32
    296c:	movs	r2, #56	; 0x38
    296e:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    2970:	ldr	r7, [r5, #32]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    2972:	mov	r5, r0
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    2974:	bl	980c <memset>
  m_attributes = FILE_ATTR_ROOT;
    2978:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    297a:	movs	r3, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    297c:	str	r7, [sp, #64]	; 0x40
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    297e:	strb.w	r2, [sp, #81]	; 0x51
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    2982:	strb.w	r3, [sp, #83]	; 0x53
    2986:	b.n	28f8 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return openPrivate(dirFile, &fname, oflag);
    2988:	mov	r3, r9
    298a:	add	r2, sp, #12
    298c:	mov	r1, r5
    298e:	mov	r0, r6
    2990:	bl	24e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>

fail:
  return false;
}
    2994:	add	sp, #92	; 0x5c
    2996:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    299a:	movs	r2, #56	; 0x38
    299c:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    299e:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    29a0:	bl	980c <memset>
  m_attributes = FILE_ATTR_ROOT;
    29a4:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    29a6:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    29a8:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    29aa:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    29ae:	strb.w	r0, [r6, #51]	; 0x33
    29b2:	b.n	28ea <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>

000029b4 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const char* path, oflag_t oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    29b4:	cbz	r1, 29be <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    29b6:	add.w	r1, r1, #1096	; 0x448
    29ba:	b.w	28bc <ExFatFile::open(ExFatFile*, char const*, int)>
}
    29be:	mov	r0, r1
    29c0:	bx	lr
    29c2:	nop

000029c4 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  *value = next;
  return 1;
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    29c4:	push	{r3, r4, r5, lr}
    29c6:	mov	r4, r1
    29c8:	ldr.w	r1, [r0, #1060]	; 0x424
    29cc:	mov	r5, r2
    29ce:	add.w	r0, r0, #528	; 0x210
    29d2:	movs	r2, #1
    29d4:	add.w	r1, r1, r4, lsr #7
    29d8:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    29dc:	mov	r3, r0
    29de:	cbz	r0, 29ec <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    29e0:	lsls	r4, r4, #2
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    29e2:	movs	r0, #1
    29e4:	ubfx	r4, r4, #0, #9
    29e8:	str	r5, [r3, r4]
    29ea:	pop	{r3, r4, r5, pc}

fail:
  return false;
}
    29ec:	pop	{r3, r4, r5, pc}
    29ee:	nop

000029f0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    29f0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29f4:	mov	r8, r0
    29f6:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    29f8:	mov	fp, r1
    29fa:	cmp	r1, #0
    29fc:	beq.n	2a86 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x96>
    29fe:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    2a00:	ldr.w	r3, [r8, #1072]	; 0x430
    2a04:	cmp	r7, r3
    2a06:	bcs.n	2a7e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8e>
    2a08:	and.w	r5, r7, #7
    2a0c:	movs	r3, #1
    2a0e:	ubfx	sl, r7, #3, #9
    2a12:	lsl.w	r5, r3, r5
    2a16:	uxtb	r5, r5
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    2a18:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    2a1a:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCachePrepare(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.prepare(sector, option);
    2a1c:	ldr.w	r1, [r8, #1068]	; 0x42c
    2a20:	movs	r2, #0
    2a22:	mov	r0, r8
    2a24:	add.w	r1, r1, r4, lsr #12
    2a28:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector =
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    2a2c:	cbz	r0, 2a60 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    2a2e:	ldrb.w	r1, [r0, sl]
    2a32:	b.n	2a4a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    2a34:	cmp	r2, r9
    2a36:	beq.n	2a8c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9c>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    2a38:	cmp	r7, r4
    2a3a:	beq.n	2a5e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    2a3c:	ldr.w	r2, [r8, #1072]	; 0x430
    2a40:	cmp	r4, r2
    2a42:	bcs.n	2a72 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    2a44:	ands.w	r5, r3, #255	; 0xff
    2a48:	beq.n	2a64 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    2a4a:	adds	r4, #1
        if (!(mask & cache[i])) {
    2a4c:	tst	r5, r1
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    2a4e:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    2a52:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    2a56:	beq.n	2a34 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    2a58:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    2a5a:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    2a5c:	bne.n	2a3c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    2a5e:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    2a60:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a64:	add.w	sl, sl, #1
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    2a68:	movs	r5, #1
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    2a6a:	cmp.w	sl, #512	; 0x200
    2a6e:	bne.n	2a2e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    2a70:	b.n	2a76 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x86>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    2a72:	movs	r6, #0
    2a74:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    2a76:	mov.w	sl, #0
    2a7a:	movs	r5, #1
    2a7c:	b.n	2a1c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    2a7e:	movs	r7, #0
    2a80:	movs	r5, #1
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    2a82:	mov	sl, r7
    2a84:	b.n	2a18 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2a86:	ldr.w	r7, [r0, #1056]	; 0x420
    2a8a:	b.n	2a00 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    2a8c:	cmp.w	fp, #0
    2a90:	bne.n	2a9c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
    2a92:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    2a96:	it	eq
    2a98:	streq.w	r6, [r8, #1056]	; 0x420
            }
            return bgnAlloc + 2;
    2a9c:	adds	r0, r6, #2
    2a9e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2aa2:	nop

00002aa4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
    2aa4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    2aa8:	subs	r1, #2
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
    2aaa:	mov	r5, r2
    2aac:	mov	sl, r3
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    2aae:	ldr.w	r2, [r0, #1072]	; 0x430
    2ab2:	adds	r3, r1, r5
    2ab4:	cmp	r3, r2
    2ab6:	bhi.n	2b2a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    2ab8:	mov	r8, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    2aba:	cmp.w	sl, #0
    2abe:	bne.n	2b30 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    2ac0:	ldr.w	r3, [r0, #1056]	; 0x420
    2ac4:	cmp	r1, r3
      m_bitmapStart = start;
    2ac6:	it	cc
    2ac8:	strcc.w	r1, [r0, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    2acc:	and.w	r4, r1, #7
    2ad0:	movs	r2, #1
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    2ad2:	ldr.w	r3, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    2ad6:	ubfx	r6, r1, #3, #9
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    2ada:	lsl.w	r4, r2, r4
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    2ade:	add.w	r9, r3, r1, lsr #12
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    2ae2:	uxtb	r4, r4
    2ae4:	movs	r2, #1
    2ae6:	mov	r1, r9
    2ae8:	mov	r0, r8
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2aea:	add	r9, r2
    2aec:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    2af0:	cbz	r0, 2b2a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    2af2:	adds	r7, r0, r6
    2af4:	add.w	r0, r0, #512	; 0x200
    2af8:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    2afc:	tst	r2, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    2afe:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    2b02:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    2b06:	ite	ne
    2b08:	movne	r6, #1
    2b0a:	moveq	r6, #0
    2b0c:	cmp	r6, sl
    2b0e:	beq.n	2b2a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    2b10:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    2b12:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    2b16:	beq.n	2b48 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    2b18:	ands.w	r4, r4, #255	; 0xff
    2b1c:	bne.n	2afc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    2b1e:	cmp	r7, r0
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    2b20:	mov	r6, r4
    2b22:	mov.w	r4, #1
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    2b26:	bne.n	2af8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    2b28:	b.n	2ae4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

fail:
  return false;
    2b2a:	movs	r0, #0
    2b2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
    2b30:	ldr.w	r0, [r0, #1056]	; 0x420
    2b34:	cmp	r3, r0
    2b36:	bls.n	2acc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    2b38:	cmp	r1, r0
    2b3a:	bhi.n	2acc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    2b3c:	cmp	r3, r2
    2b3e:	it	cs
    2b40:	movcs	r3, #0
    2b42:	str.w	r3, [r8, #1056]	; 0x420
    2b46:	b.n	2acc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    2b48:	movs	r0, #1
    i = 0;
  }

fail:
  return false;
}
    2b4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b4e:	nop

00002b50 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    2b50:	push	{r4, r5, r6, lr}
    2b52:	mov	r6, r1
    2b54:	mov	r4, r0
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() { m_dataCache.dirty(); }
  void dataCacheInvalidate() { m_dataCache.invalidate(); }
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    2b56:	ldr.w	r5, [r0, #1080]	; 0x438
    2b5a:	add.w	r0, r0, #528	; 0x210
    2b5e:	ldr	r1, [r1, #4]
    2b60:	ldr	r3, [r6, #0]
    2b62:	ands	r1, r5
    2b64:	ldr.w	r5, [r4, #1068]	; 0x42c
    2b68:	subs	r3, #2
    2b6a:	ldrb.w	r4, [r4, #1093]	; 0x445
    2b6e:	add.w	r1, r5, r1, lsr #9
    2b72:	lsls	r3, r4
    2b74:	add	r1, r3
    2b76:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    2b7a:	cbz	r0, 2b84 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    2b7c:	ldr	r3, [r6, #4]
    2b7e:	ubfx	r3, r3, #0, #9
    2b82:	add	r0, r3
}
    2b84:	pop	{r4, r5, r6, pc}
    2b86:	nop

00002b88 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    2b88:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    2b8a:	ldr.w	r3, [r0, #1072]	; 0x430
    2b8e:	adds	r3, #1
    2b90:	cmp	r3, r1
    2b92:	bcc.n	2bc2 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
    2b94:	mov	r4, r1
    2b96:	ldr.w	r1, [r0, #1060]	; 0x424
    2b9a:	mov	r5, r2
    2b9c:	add.w	r0, r0, #528	; 0x210
    2ba0:	movs	r2, #0
    2ba2:	add.w	r1, r1, r4, lsr #7
    2ba6:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    2baa:	cbz	r0, 2bc2 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    2bac:	lsls	r1, r4, #2
    2bae:	ubfx	r1, r1, #0, #9
    2bb2:	ldr	r3, [r0, r1]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
  if (next == EXFAT_EOC) {
    2bb4:	adds	r2, r3, #1
    2bb6:	beq.n	2bbe <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x36>
    return 0;
  }
  *value = next;
    2bb8:	str	r3, [r5, #0]
  return 1;
    2bba:	movs	r0, #1
    2bbc:	pop	{r3, r4, r5, pc}
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
  if (next == EXFAT_EOC) {
    return 0;
    2bbe:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    2bc0:	pop	{r3, r4, r5, pc}
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    return -1;
    2bc2:	mov.w	r0, #4294967295
    2bc6:	pop	{r3, r4, r5, pc}

00002bc8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    2bc8:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2bca:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    2bcc:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2bce:	ldr.w	r3, [r0, #1080]	; 0x438
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    2bd2:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    2bd4:	adds	r1, r4, r2
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2bd6:	ands	r3, r4
  pos->position += offset;
    2bd8:	str	r1, [r5, #4]
  tmp >>= bytesPerClusterShift();
    2bda:	ldrb.w	r4, [r0, #1093]	; 0x445
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2bde:	add	r2, r3
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    2be0:	adds	r4, #9
    2be2:	uxtb	r4, r4
    2be4:	lsr.w	r4, r2, r4
  while (tmp--) {
    2be8:	cbz	r4, 2bfa <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    2bea:	ldrb	r3, [r5, #8]
    2bec:	cbz	r3, 2bfe <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    2bee:	ldr	r3, [r5, #0]
    2bf0:	adds	r3, #1
    2bf2:	str	r3, [r5, #0]
    2bf4:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    2bf6:	cmp	r4, #0
    2bf8:	bne.n	2bea <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    2bfa:	movs	r0, #1
}
    2bfc:	pop	{r4, r5, r6, pc}
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    2bfe:	mov	r2, r5
    2c00:	ldr	r1, [r5, #0]
    2c02:	mov	r0, r6
    2c04:	bl	2b88 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    2c08:	cmp	r0, #1
    2c0a:	beq.n	2bf4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    2c0c:	pop	{r4, r5, r6, pc}
    2c0e:	nop

00002c10 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2c10:	cmp	r1, #1
    2c12:	bls.n	2c30 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    2c14:	ldr.w	r3, [r0, #1072]	; 0x430
    2c18:	adds	r3, #1
    2c1a:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    2c1c:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2c1e:	bls.n	2c28 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
}
    2c20:	movs	r0, #0
    2c22:	ldr.w	r4, [sp], #4
    2c26:	bx	lr
    2c28:	ldr.w	r4, [sp], #4
    2c2c:	b.w	29c4 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.3]>
    2c30:	movs	r0, #0
    2c32:	bx	lr

00002c34 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    2c34:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c38:	mov	r4, r1
    2c3a:	sub	sp, #8
    2c3c:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    2c3e:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    2c40:	mov	r1, r4
    2c42:	add	r2, sp, #4
    2c44:	mov	r0, r5
    2c46:	bl	2b88 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2c4a:	cmp	r4, #1
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    2c4c:	mov	r7, r0
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2c4e:	ubfx	r6, r0, #7, #1
    2c52:	mov	r1, r4
    2c54:	mov	r0, r5
    2c56:	bls.n	2ca6 <ExFatPartition::freeChain(unsigned long)+0x72>
    2c58:	mov	r2, r6
    2c5a:	cbnz	r6, 2ca6 <ExFatPartition::freeChain(unsigned long)+0x72>
    2c5c:	ldr.w	r3, [r5, #1072]	; 0x430
    2c60:	adds	r3, #1
    2c62:	cmp	r4, r3
    2c64:	bhi.n	2ca6 <ExFatPartition::freeChain(unsigned long)+0x72>
    2c66:	bl	29c4 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.3]>
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (status == 0 || (cluster + 1) != next) {
    2c6a:	add.w	lr, r4, #1
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2c6e:	mov	r1, r8
    2c70:	mov	r3, r6
    2c72:	rsb	r2, r8, lr
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    2c76:	cbz	r0, 2ca6 <ExFatPartition::freeChain(unsigned long)+0x72>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (status == 0 || (cluster + 1) != next) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2c78:	mov	r0, r5
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (status == 0 || (cluster + 1) != next) {
    2c7a:	cbz	r7, 2c8e <ExFatPartition::freeChain(unsigned long)+0x5a>
    2c7c:	ldr	r4, [sp, #4]
    2c7e:	cmp	lr, r4
    2c80:	beq.n	2c40 <ExFatPartition::freeChain(unsigned long)+0xc>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2c82:	bl	2aa4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2c86:	cbz	r0, 2ca6 <ExFatPartition::freeChain(unsigned long)+0x72>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    2c88:	ldr	r4, [sp, #4]
    2c8a:	mov	r8, r4
    2c8c:	b.n	2c40 <ExFatPartition::freeChain(unsigned long)+0xc>
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (status == 0 || (cluster + 1) != next) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2c8e:	adds	r2, r4, #1
    2c90:	mov	r3, r7
    2c92:	mov	r1, r8
    2c94:	mov	r0, r5
    2c96:	rsb	r2, r8, r2
    2c9a:	bl	2aa4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2c9e:	cbz	r0, 2ca6 <ExFatPartition::freeChain(unsigned long)+0x72>

  return true;

fail:
  return false;
}
    2ca0:	add	sp, #8
    2ca2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } while (status);

  return true;

fail:
  return false;
    2ca6:	movs	r0, #0
}
    2ca8:	add	sp, #8
    2caa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2cae:	nop

00002cb0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    2cb0:	push	{r3, r4, r5, r6, r7, lr}
    2cb2:	mov	r4, r0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    2cb4:	mov.w	r5, #4294967295
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  m_fatType = 0;
    2cb8:	movs	r0, #0
  m_blockDev = dev;
    2cba:	str.w	r1, [r4, #1088]	; 0x440
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(FsBlockDevice* blockDev) {
    m_blockDev = blockDev;
    2cbe:	str	r1, [r4, #4]
    2cc0:	str.w	r1, [r4, #532]	; 0x214
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  m_fatType = 0;
    2cc4:	strb.w	r0, [r4, #1092]	; 0x444
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    2cc8:	strb	r0, [r4, #0]
    2cca:	strb.w	r0, [r4, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2cce:	str	r5, [r4, #8]
    2cd0:	str.w	r5, [r4, #536]	; 0x218
  m_blockDev = dev;
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    2cd4:	cbz	r2, 2d10 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x60>
    if (part > 4) {
    2cd6:	cmp	r2, #4
    2cd8:	mov	r6, r2
    2cda:	bls.n	2ce0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
    2cdc:	movs	r0, #0
    2cde:	pop	{r3, r4, r5, r6, r7, pc}
    2ce0:	add.w	r5, r4, #528	; 0x210
    2ce4:	mov	r2, r0
    2ce6:	mov	r1, r0
    2ce8:	mov	r0, r5
    2cea:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>(
        dataCachePrepare(0, FsCache::CACHE_FOR_READ));
    if (!mbr) {
    2cee:	cmp	r0, #0
    2cf0:	beq.n	2cdc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    MbrPart_t* mp = mbr->part + part - 1;
    2cf2:	mvn.w	r3, #4026531840	; 0xf0000000
    2cf6:	add.w	r0, r0, #446	; 0x1be
    2cfa:	add	r3, r6
    2cfc:	lsls	r3, r3, #4
    2cfe:	adds	r2, r0, r3
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    2d00:	ldrb	r1, [r2, #4]
    2d02:	cmp	r1, #0
    2d04:	beq.n	2cdc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2c>
    2d06:	ldrb	r3, [r0, r3]
    2d08:	lsls	r3, r3, #25
    2d0a:	bne.n	2cdc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2c>
    2d0c:	ldr	r7, [r2, #8]
    2d0e:	b.n	2d16 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x66>
    2d10:	mov	r7, r3
    2d12:	add.w	r5, r4, #528	; 0x210
    2d16:	mov	r0, r5
    2d18:	movs	r2, #0
    2d1a:	mov	r1, r7
    2d1c:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
    }
    volStart = getLe32(mp->relativeSectors);
  }
  pbs = reinterpret_cast<pbs_t*>(
      dataCachePrepare(volStart, FsCache::CACHE_FOR_READ));
  if (!pbs) {
    2d20:	mov	r6, r0
    2d22:	cmp	r0, #0
    2d24:	beq.n	2cdc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    2d26:	movs	r2, #5
    2d28:	ldr	r1, [pc, #104]	; (2d94 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe4>)
    2d2a:	adds	r0, #3
    2d2c:	bl	9f1c <strncmp>
    2d30:	mov	lr, r0
    2d32:	cmp	r0, #0
    2d34:	bne.n	2cdc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    2d36:	ldrb.w	r3, [r6, #108]	; 0x6c
    2d3a:	cmp	r3, #9
    2d3c:	bne.n	2cdc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    2d3e:	ldr	r3, [r6, #80]	; 0x50
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    2d40:	movs	r5, #1
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    2d42:	mov	r1, r0
    2d44:	mov	r0, r4
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    2d46:	add	r3, r7
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    2d48:	mov	r2, r5
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    2d4a:	str.w	r3, [r4, #1060]	; 0x424
    2d4e:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    2d50:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    2d54:	ldr	r3, [r6, #88]	; 0x58
    2d56:	add	r3, r7
    2d58:	str.w	r3, [r4, #1068]	; 0x42c
    2d5c:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    2d5e:	str.w	r3, [r4, #1072]	; 0x430
    2d62:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    2d64:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    2d68:	ldrb.w	r6, [r6, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    2d6c:	str.w	lr, [r4, #1056]	; 0x420
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    2d70:	add.w	r3, r6, #9
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    2d74:	strb.w	r6, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    2d78:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    2d7c:	subs	r6, r3, #1
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    2d7e:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    2d82:	str.w	r6, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    2d86:	bl	29f0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    2d8a:	movs	r3, #64	; 0x40
  return true;
    2d8c:	mov	r0, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
    2d8e:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    2d92:	pop	{r3, r4, r5, r6, r7, pc}
    2d94:	.word	0x20000dcc

00002d98 <ExFatPartition::rootLength()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    2d98:	push	{r4, r5, r6, lr}
    2d9a:	sub	sp, #8
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    2d9c:	ldr.w	r1, [r0, #1076]	; 0x434

fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    2da0:	mov	r5, r0
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
    2da2:	movs	r4, #0
    2da4:	add	r6, sp, #8
    2da6:	str.w	r1, [r6, #-4]!
    2daa:	b.n	2db0 <ExFatPartition::rootLength()+0x18>
  int8_t status;
  do {
    2dac:	beq.n	2dc2 <ExFatPartition::rootLength()+0x2a>
    2dae:	ldr	r1, [sp, #4]
    status = fatGet(cluster, &cluster);
    2db0:	mov	r2, r6
    2db2:	mov	r0, r5
    2db4:	bl	2b88 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    2db8:	cmp	r0, #0
    n++;
    2dba:	add.w	r4, r4, #1
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, &cluster);
    if (status < 0) return 0;
    2dbe:	bge.n	2dac <ExFatPartition::rootLength()+0x14>
    2dc0:	movs	r4, #0
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
  uint32_t nc = chainSize(m_rootDirectoryCluster);
  return nc << bytesPerClusterShift();
    2dc2:	ldrb.w	r0, [r5, #1093]	; 0x445
    2dc6:	adds	r0, #9
    2dc8:	uxtb	r0, r0
}
    2dca:	lsl.w	r0, r4, r0
    2dce:	add	sp, #8
    2dd0:	pop	{r4, r5, r6, pc}
    2dd2:	nop

00002dd4 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    2dd4:	push	{r4, r5, r6, r7, lr}
    2dd6:	movs	r5, #0
    2dd8:	sub	sp, #60	; 0x3c
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() { return m_cwv; }
  ExFatFile* vwd() { return &m_vwd; }
    2dda:	add.w	r4, r0, #1096	; 0x448
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    2dde:	mov	r2, r1
    2de0:	mov	r3, r5
    2de2:	mov	r0, sp
    2de4:	mov	r1, r4
    2de6:	strb.w	r5, [sp, #49]	; 0x31
    2dea:	strb.w	r5, [sp, #50]	; 0x32
    2dee:	strb.w	r5, [sp, #51]	; 0x33
    2df2:	bl	28bc <ExFatFile::open(ExFatFile*, char const*, int)>
    2df6:	mov	r6, r0
    2df8:	cbz	r0, 2e2a <ExFatVolume::chdir(char const*)+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    2dfa:	ldrb.w	r3, [sp, #49]	; 0x31
    2dfe:	ands.w	r3, r3, #80	; 0x50
    2e02:	beq.n	2e30 <ExFatVolume::chdir(char const*)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    2e04:	mov	r5, sp
    2e06:	add.w	lr, sp, #48	; 0x30
    2e0a:	mov	r7, r5
    2e0c:	adds	r4, #16
    2e0e:	adds	r5, #16
    2e10:	ldmia	r7!, {r0, r1, r2, r3}
    2e12:	cmp	r7, lr
    2e14:	str.w	r0, [r4, #-16]
    2e18:	str.w	r1, [r4, #-12]
    2e1c:	str.w	r2, [r4, #-8]
    2e20:	str.w	r3, [r4, #-4]
    2e24:	bne.n	2e0a <ExFatVolume::chdir(char const*)+0x36>
    2e26:	ldr	r0, [r5, #0]
    2e28:	str	r0, [r4, #0]
  return true;

fail:
  return false;
}
    2e2a:	mov	r0, r6
    2e2c:	add	sp, #60	; 0x3c
    2e2e:	pop	{r4, r5, r6, r7, pc}
  }
  m_vwd = dir;
  return true;

fail:
  return false;
    2e30:	mov	r6, r3
}
    2e32:	mov	r0, r6
    2e34:	add	sp, #60	; 0x3c
    2e36:	pop	{r4, r5, r6, r7, pc}

00002e38 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    2e38:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    2e3a:	push	{r3, r4, r5, r6, r7, lr}
    2e3c:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    2e3e:	ldr	r0, [r0, #32]
    2e40:	cbz	r1, 2e44 <ExFatFile::addCluster()+0xc>
    2e42:	adds	r1, #1
    2e44:	movs	r2, #1
    2e46:	bl	29f0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    2e4a:	cmp	r0, #1
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    2e4c:	mov	r6, r0
  if (find < 2) {
    2e4e:	bls.n	2eae <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    2e50:	movs	r3, #1
    2e52:	mov	r1, r0
    2e54:	ldr	r0, [r4, #32]
    2e56:	mov	r2, r3
    2e58:	bl	2aa4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2e5c:	mov	r7, r0
    2e5e:	cbz	r0, 2eae <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    2e60:	ldr	r3, [r4, #24]
    2e62:	cbz	r3, 2eb4 <ExFatFile::addCluster()+0x7c>
    2e64:	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    2e68:	lsls	r1, r2, #25
    2e6a:	bpl.n	2e92 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    2e6c:	adds	r1, r3, #1
    2e6e:	cmp	r6, r1
    2e70:	beq.n	2ec0 <ExFatFile::addCluster()+0x88>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    2e72:	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2e76:	ldr	r1, [r4, #28]
  if (isContiguous()) {
    if (find == (m_curCluster + 1)) {
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    2e78:	strb.w	r2, [r4, #51]	; 0x33
    2e7c:	b.n	2e8a <ExFatFile::addCluster()+0x52>

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
    2e7e:	ldr	r0, [r4, #32]
    2e80:	bl	2c10 <ExFatPartition::fatPut(unsigned long, unsigned long)>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2e84:	mov	r1, r5
      if (!m_vol->fatPut(c, c + 1)) {
    2e86:	cbz	r0, 2eae <ExFatFile::addCluster()+0x76>
    2e88:	ldr	r3, [r4, #24]
    2e8a:	adds	r5, r1, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2e8c:	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    2e8e:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2e90:	bcc.n	2e7e <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    2e92:	mov.w	r2, #4294967295
    2e96:	mov	r1, r6
    2e98:	ldr	r0, [r4, #32]
    2e9a:	bl	2c10 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2e9e:	cbz	r0, 2eae <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    2ea0:	ldr	r1, [r4, #24]
    2ea2:	cbz	r1, 2ec0 <ExFatFile::addCluster()+0x88>
    if (!m_vol->fatPut(m_curCluster, find)) {
    2ea4:	mov	r2, r6
    2ea6:	ldr	r0, [r4, #32]
    2ea8:	bl	2c10 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2eac:	cbnz	r0, 2ec0 <ExFatFile::addCluster()+0x88>
done:
  m_curCluster = find;
  return true;

fail:
  return false;
    2eae:	movs	r7, #0
}
    2eb0:	mov	r0, r7
    2eb2:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    2eb4:	ldrb.w	r3, [r4, #51]	; 0x33
    2eb8:	orr.w	r3, r3, #64	; 0x40
    2ebc:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

done:
  m_curCluster = find;
    2ec0:	str	r6, [r4, #24]
  return true;

fail:
  return false;
}
    2ec2:	mov	r0, r7
    2ec4:	pop	{r3, r4, r5, r6, r7, pc}
    2ec6:	nop

00002ec8 <ExFatFile::syncDir()>:
fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    2ec8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;

  for (uint8_t is = 0; is <= m_setCount; is++) {
    2ecc:	movs	r5, #0
fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    2ece:	sub	sp, #12
    2ed0:	mov	r7, r0
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        if (FsDateTime::callback) {
    2ed2:	ldr.w	r9, [pc, #320]	; 3014 <ExFatFile::syncDir()+0x14c>
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    2ed6:	mov	r8, r5

  for (uint8_t is = 0; is <= m_setCount; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    2ed8:	movs	r2, #0
    2eda:	mov	r1, r5
    2edc:	mov	r0, r7
    2ede:	bl	20e8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    2ee2:	mov	r4, r0
    2ee4:	cbz	r0, 2ef4 <ExFatFile::syncDir()+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    2ee6:	ldrb	r3, [r0, #0]
    2ee8:	cmp	r3, #192	; 0xc0
    2eea:	beq.n	2fd6 <ExFatFile::syncDir()+0x10e>
    2eec:	cmp	r3, #193	; 0xc1
    2eee:	beq.n	2f4a <ExFatFile::syncDir()+0x82>
    2ef0:	cmp	r3, #133	; 0x85
    2ef2:	beq.n	2f08 <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
    2ef4:	ldrb.w	r3, [r7, #50]	; 0x32
  return false;
    2ef8:	movs	r0, #0
    goto fail;
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
    2efa:	orr.w	r3, r3, #1
    2efe:	strb.w	r3, [r7, #50]	; 0x32
  return false;
}
    2f02:	add	sp, #12
    2f04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    2f08:	ldrb.w	r3, [r7, #49]	; 0x31
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        if (FsDateTime::callback) {
    2f0c:	ldr.w	r6, [r9]
    2f10:	and.w	r3, r3, #55	; 0x37
    2f14:	strh	r3, [r0, #4]
    2f16:	cbz	r6, 2f3a <ExFatFile::syncDir()+0x72>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    2f18:	add.w	r2, sp, #3
    2f1c:	add.w	r1, sp, #6
    2f20:	add	r0, sp, #4
    2f22:	blx	r6
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    2f24:	ldrh.w	r2, [sp, #6]
          setLe16(df->modifyDate, date);
    2f28:	ldrh.w	r3, [sp, #4]
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        if (FsDateTime::callback) {
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    2f2c:	ldrb.w	r1, [sp, #3]
    2f30:	strh	r2, [r4, #12]
    2f32:	strb	r1, [r4, #21]
    2f34:	strh	r2, [r4, #16]
    2f36:	strh	r3, [r4, #14]
    2f38:	strh	r3, [r4, #18]
          setLe16(df->modifyTime, time);
          setLe16(df->modifyDate, date);
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        m_vol->dataCacheDirty();
    2f3a:	ldr	r2, [r7, #32]
    }
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    2f3c:	ldrb.w	r3, [r2, #528]	; 0x210
    2f40:	orr.w	r3, r3, #1
    2f44:	strb.w	r3, [r2, #528]	; 0x210
    2f48:	ldrb	r3, [r4, #0]
    2f4a:	mov.w	r0, r8, lsl #15
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2f4e:	sub.w	r6, r3, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2f52:	movs	r2, #0
    2f54:	movs	r1, #1
    2f56:	orr.w	r8, r0, r8, lsr #1
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2f5a:	clz	r6, r6
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2f5e:	uxtah	r3, r3, r8
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2f62:	lsrs	r6, r6, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2f64:	uxth.w	r8, r3
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2f68:	add	r2, r1
    2f6a:	mov.w	r3, r8, lsl #15
    2f6e:	movs	r1, #3
    2f70:	cmp	r2, #31
    2f72:	orr.w	r3, r3, r8, lsr #1
    2f76:	bhi.n	2f8e <ExFatFile::syncDir()+0xc6>
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2f78:	ldrb	r0, [r4, r2]
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2f7a:	cmp	r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    2f7c:	uxtah	r3, r0, r3
    2f80:	uxth.w	r8, r3
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2f84:	bne.n	2f8a <ExFatFile::syncDir()+0xc2>
    2f86:	cmp	r6, #0
    2f88:	bne.n	2f68 <ExFatFile::syncDir()+0xa0>
    2f8a:	movs	r1, #1
    2f8c:	b.n	2f68 <ExFatFile::syncDir()+0xa0>
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;

  for (uint8_t is = 0; is <= m_setCount; is++) {
    2f8e:	adds	r5, #1
    2f90:	ldrb.w	r3, [r7, #48]	; 0x30
    2f94:	uxtb	r5, r5
    2f96:	cmp	r3, r5
    2f98:	bcs.n	2ed8 <ExFatFile::syncDir()+0x10>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    2f9a:	movs	r2, #1
    2f9c:	add.w	r1, r7, #36	; 0x24
    2fa0:	ldr	r0, [r7, #32]
    2fa2:	bl	2b50 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    2fa6:	cmp	r0, #0
    2fa8:	beq.n	2ef4 <ExFatFile::syncDir()+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    2faa:	ldr	r4, [r7, #32]
    2fac:	strh.w	r8, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2fb0:	mov	r0, r4
    2fb2:	bl	1ff4 <FsCache::sync()>
    2fb6:	cmp	r0, #0
    2fb8:	beq.n	2ef4 <ExFatFile::syncDir()+0x2c>
    2fba:	add.w	r0, r4, #528	; 0x210
    2fbe:	bl	1ff4 <FsCache::sync()>
    2fc2:	cmp	r0, #0
    2fc4:	beq.n	2ef4 <ExFatFile::syncDir()+0x2c>
    2fc6:	ldr.w	r0, [r4, #1088]	; 0x440
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    2fca:	ldr	r3, [r0, #0]
    2fcc:	ldr	r3, [r3, #28]
    2fce:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2fd0:	cmp	r0, #0
    2fd2:	beq.n	2ef4 <ExFatFile::syncDir()+0x2c>
    2fd4:	b.n	2f02 <ExFatFile::syncDir()+0x3a>
        m_vol->dataCacheDirty();
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    2fd6:	ldrb.w	r3, [r7, #51]	; 0x33
    2fda:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    2fde:	ldrb	r3, [r0, #1]
    2fe0:	ite	ne
    2fe2:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    2fe6:	biceq.w	r3, r3, #2
    2fea:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    2fec:	ldr	r0, [r7, #32]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    2fee:	ldr	r1, [r7, #28]
        if (isContiguous()) {
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
    2ff0:	ldrd	r2, r3, [r7, #16]
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    2ff4:	str	r1, [r4, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    2ff6:	strd	r2, r3, [r4, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    2ffa:	ldrd	r2, r3, [r7, #8]
    2ffe:	strd	r2, r3, [r4, #24]
    3002:	ldrb.w	r3, [r0, #528]	; 0x210
    3006:	orr.w	r3, r3, #1
    300a:	strb.w	r3, [r0, #528]	; 0x210
    300e:	ldrb	r3, [r4, #0]
    3010:	b.n	2f4a <ExFatFile::syncDir()+0x82>
    3012:	nop
    3014:	.word	0x20021b98

00003018 <ExFatFile::sync()>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    3018:	ldrb.w	r2, [r0, #49]	; 0x31
    301c:	cbz	r2, 3044 <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
    301e:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    3020:	ldrb.w	r2, [r0, #51]	; 0x33
    3024:	lsls	r1, r2, #24
    3026:	bmi.n	3048 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    3028:	ldr	r5, [r0, #32]
    302a:	mov	r4, r0
    302c:	mov	r0, r5
    302e:	bl	1ff4 <FsCache::sync()>
    3032:	cbnz	r0, 3058 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
    3034:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    3038:	movs	r0, #0
    goto fail;
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
    303a:	orr.w	r3, r3, #1
    303e:	strb.w	r3, [r4, #50]	; 0x32
  return false;
}
    3042:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    3044:	movs	r0, #1
  return true;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    3046:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    3048:	and.w	r2, r2, #127	; 0x7f
    304c:	strb.w	r2, [r0, #51]	; 0x33
  return true;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    3050:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    3054:	b.w	2ec8 <ExFatFile::syncDir()>
    3058:	add.w	r0, r5, #528	; 0x210
    305c:	bl	1ff4 <FsCache::sync()>
    3060:	cmp	r0, #0
    3062:	beq.n	3034 <ExFatFile::sync()+0x1c>
    3064:	ldr.w	r0, [r5, #1088]	; 0x440
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    3068:	ldr	r3, [r0, #0]
    306a:	ldr	r3, [r3, #28]
    306c:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    306e:	cmp	r0, #0
    3070:	beq.n	3034 <ExFatFile::sync()+0x1c>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    3072:	movs	r0, #1
    3074:	pop	{r3, r4, r5, pc}
    3076:	nop

00003078 <ExFatFile::addDirCluster()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    3078:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    307a:	ldrb.w	r3, [r0, #49]	; 0x31

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    307e:	mov	r5, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    3080:	lsls	r2, r3, #25
    3082:	bmi.n	3124 <ExFatFile::addDirCluster()+0xac>
    3084:	ldr	r0, [r0, #8]
    3086:	ldr	r3, [r5, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    3088:	ldr.w	r3, [r3, #1084]	; 0x43c
    308c:	add	r0, r3
    308e:	cmp.w	r0, #67108864	; 0x4000000
    3092:	bcc.n	3098 <ExFatFile::addDirCluster()+0x20>
  }
  return sync();

fail:
  return false;
}
    3094:	movs	r0, #0
    3096:	pop	{r3, r4, r5, r6, r7, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    3098:	mov	r0, r5
    309a:	bl	2e38 <ExFatFile::addCluster()>
    309e:	cmp	r0, #0
    30a0:	beq.n	3094 <ExFatFile::addDirCluster()+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    30a2:	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    30a4:	movs	r2, #1
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    30a6:	ldr	r6, [r5, #24]
    30a8:	ldrb.w	r3, [r0, #1093]	; 0x445
    30ac:	subs	r6, #2
    30ae:	ldr.w	r1, [r0, #1068]	; 0x42c
    30b2:	lsls	r6, r3
    30b4:	lsls.w	r3, r2, r3
    30b8:	add	r6, r1
    30ba:	beq.n	30e8 <ExFatFile::addDirCluster()+0x70>
    30bc:	movs	r4, #0
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() { m_dataCache.dirty(); }
  void dataCacheInvalidate() { m_dataCache.invalidate(); }
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    30be:	adds	r1, r6, r4
    30c0:	movs	r2, #5
    30c2:	add.w	r0, r0, #528	; 0x210
    30c6:	adds	r4, #1
    30c8:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
        m_vol->dataCachePrepare(sector + i, FsCache::CACHE_RESERVE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0, m_vol->bytesPerSector());
    30cc:	mov.w	r2, #512	; 0x200
    30d0:	movs	r1, #0
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    cache =
        m_vol->dataCachePrepare(sector + i, FsCache::CACHE_RESERVE_FOR_WRITE);
    if (!cache) {
    30d2:	cmp	r0, #0
    30d4:	beq.n	3094 <ExFatFile::addDirCluster()+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0, m_vol->bytesPerSector());
    30d6:	bl	980c <memset>
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    30da:	ldr	r0, [r5, #32]
    30dc:	movs	r3, #1
    30de:	ldrb.w	r2, [r0, #1093]	; 0x445
    30e2:	lsls	r3, r2
    30e4:	cmp	r3, r4
    30e6:	bhi.n	30be <ExFatFile::addDirCluster()+0x46>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0, m_vol->bytesPerSector());
  }
  if (!isRoot()) {
    30e8:	ldrb.w	r3, [r5, #49]	; 0x31
    30ec:	lsls	r3, r3, #25
    30ee:	bmi.n	311a <ExFatFile::addDirCluster()+0xa2>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    30f0:	ldrb.w	r3, [r5, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
    30f4:	movs	r7, #0
      goto fail;
    }
    memset(cache, 0, m_vol->bytesPerSector());
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    30f6:	orn	r3, r3, #127	; 0x7f
    30fa:	strb.w	r3, [r5, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
    30fe:	ldr.w	r6, [r0, #1084]	; 0x43c
    3102:	ldrd	r2, r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    3106:	ldrd	r0, r1, [r5, #16]
    }
    memset(cache, 0, m_vol->bytesPerSector());
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength += m_vol->bytesPerCluster();
    310a:	adds	r2, r2, r6
    310c:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    310e:	adds	r0, r0, r6
    3110:	adcs	r1, r7
    }
    memset(cache, 0, m_vol->bytesPerSector());
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength += m_vol->bytesPerCluster();
    3112:	strd	r2, r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    3116:	strd	r0, r1, [r5, #16]
  }
  return sync();
    311a:	mov	r0, r5

fail:
  return false;
}
    311c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    3120:	b.w	3018 <ExFatFile::sync()>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    3124:	ldr	r0, [r0, #32]
    3126:	bl	2d98 <ExFatPartition::rootLength()>
    312a:	b.n	3086 <ExFatFile::addDirCluster()+0xe>

0000312c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    312c:	push	{r4, lr}
  if (!parent->isDir()) {
    312e:	ldrb.w	r4, [r1, #49]	; 0x31
    3132:	tst.w	r4, #80	; 0x50
    3136:	bne.n	313c <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x10>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    3138:	movs	r0, #0
    313a:	pop	{r4, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    313c:	movw	r3, #2562	; 0xa02
    3140:	mov	r4, r0
    3142:	bl	24e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    3146:	cmp	r0, #0
    3148:	beq.n	3138 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    314a:	movs	r3, #48	; 0x30

  // allocate and zero first cluster
  if (!addDirCluster()) {
    314c:	mov	r0, r4
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    314e:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    3152:	bl	3078 <ExFatFile::addDirCluster()>
    3156:	cmp	r0, #0
    3158:	beq.n	3138 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    315a:	ldr	r1, [r4, #24]
   *
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() { seekSet(0); }
    315c:	movs	r3, #0
    315e:	mov	r0, r4
    3160:	movs	r2, #0
    3162:	str	r1, [r4, #28]
    3164:	bl	23dc <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    3168:	movs	r3, #193	; 0xc1
  return sync();
    316a:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    316c:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    3170:	ldmia.w	sp!, {r4, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    3174:	b.w	3018 <ExFatFile::sync()>

00003178 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    3178:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    317c:	mov	r6, r0
    317e:	sub	sp, #88	; 0x58
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    3180:	movs	r0, #0
    3182:	mov	r4, r1
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    3184:	ldrb.w	r1, [r6, #49]	; 0x31

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    3188:	str	r2, [sp, #4]
    318a:	strb.w	r0, [sp, #81]	; 0x51
    318e:	strb.w	r0, [sp, #82]	; 0x52
    3192:	strb.w	r0, [sp, #83]	; 0x53
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    3196:	cbnz	r1, 31a4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    3198:	mov	r8, r3
    319a:	ldrb.w	r3, [r4, #49]	; 0x31
    319e:	tst.w	r3, #80	; 0x50
    31a2:	bne.n	31ac <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    31a4:	movs	r0, #0
}
    31a6:	add	sp, #88	; 0x58
    31a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    31ac:	ldrb	r3, [r2, #0]
    31ae:	mov	r1, r2
    31b0:	cmp	r3, #47	; 0x2f
    31b2:	beq.n	321e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    31b4:	add	r3, sp, #4
    31b6:	add	r2, sp, #12
    31b8:	mov	r0, r6
    31ba:	bl	2160 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    31be:	cmp	r0, #0
    31c0:	beq.n	31a4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    31c2:	ldr	r3, [sp, #4]
    31c4:	ldrb	r3, [r3, #0]
    31c6:	cmp	r3, #0
    31c8:	beq.n	323a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc2>
      break;
    }
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    31ca:	movs	r3, #0
    31cc:	add	r2, sp, #12
    31ce:	mov	r1, r4
    31d0:	mov	r0, r6
    31d2:	bl	24e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    31d6:	cbnz	r0, 31ec <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>
      if (!pFlag || !mkdir(parent, &fname)) {
    31d8:	cmp.w	r8, #0
    31dc:	beq.n	31a4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    31de:	mov	r1, r4
    31e0:	add	r2, sp, #12
    31e2:	mov	r0, r6
    31e4:	bl	312c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    31e8:	cmp	r0, #0
    31ea:	beq.n	31a4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    31ec:	mov	r4, r6
    31ee:	add	r7, sp, #32
    31f0:	add.w	lr, r6, #48	; 0x30
    31f4:	ldr	r0, [r4, #0]
    31f6:	adds	r4, #16
    31f8:	ldr.w	r1, [r4, #-12]
    31fc:	mov	r5, r7
    31fe:	ldr.w	r2, [r4, #-8]
    3202:	adds	r7, #16
    3204:	ldr.w	r3, [r4, #-4]
    3208:	cmp	r4, lr
    320a:	stmia	r5!, {r0, r1, r2, r3}
    320c:	bne.n	31f4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7c>
    320e:	ldr	r0, [r4, #0]
    parent = &tmpDir;
    3210:	add	r4, sp, #32
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    3212:	str	r0, [r7, #0]
    parent = &tmpDir;
    close();
    3214:	mov	r0, r6
    3216:	bl	2124 <ExFatFile::close()>
    321a:	ldr	r1, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    321c:	b.n	31b4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    321e:	adds	r1, #1
    3220:	str	r1, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    3222:	ldrb	r3, [r1, #0]
    3224:	cmp	r3, #47	; 0x2f
    3226:	beq.n	321e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    3228:	ldr	r1, [r4, #32]
    322a:	add	r0, sp, #32
    322c:	bl	2138 <ExFatFile::openRoot(ExFatVolume*)>
    3230:	cmp	r0, #0
    3232:	beq.n	31a4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    3234:	add	r4, sp, #32
    3236:	ldr	r1, [sp, #4]
    3238:	b.n	31b4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    323a:	add	r2, sp, #12
    323c:	mov	r1, r4
    323e:	mov	r0, r6
    3240:	bl	312c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

fail:
  return false;
}
    3244:	add	sp, #88	; 0x58
    3246:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    324a:	nop

0000324c <ExFatFile::truncate()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    324c:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    3250:	lsls	r2, r3, #30
    3252:	bpl.n	3286 <ExFatFile::truncate()+0x3a>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    3254:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    3256:	ldr	r5, [r0, #28]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    3258:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    325a:	cbz	r5, 3280 <ExFatFile::truncate()+0x34>
    return true;
  }
  if (isContiguous()) {
    325c:	and.w	r3, r3, #64	; 0x40
    3260:	mov	r4, r0
    3262:	and.w	r6, r3, #255	; 0xff
    3266:	cbnz	r3, 328a <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    3268:	ldr	r1, [r0, #24]
    326a:	cmp	r1, #0
    326c:	bne.n	32f4 <ExFatFile::truncate()+0xa8>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    326e:	str	r5, [sp, #4]
      m_firstCluster = 0;
    3270:	str	r1, [r0, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    3272:	mov	r1, r5
    3274:	ldr	r0, [r4, #32]
    3276:	bl	2c34 <ExFatPartition::freeChain(unsigned long)>
    327a:	cbnz	r0, 32cc <ExFatFile::truncate()+0x80>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
    327c:	movs	r0, #0
    327e:	b.n	3282 <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    return true;
    3280:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    3282:	add	sp, #12
    3284:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
    3286:	movs	r0, #0
}
    3288:	bx	lr
    328a:	ldr	r0, [r0, #32]
  if (m_firstCluster == 0) {
    return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    328c:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
    return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    328e:	ldrb.w	r2, [r0, #1093]	; 0x445
    3292:	ldrd	r6, r7, [r4, #8]
    3296:	adds	r2, #9
    3298:	adds.w	r6, r6, #4294967295
    329c:	uxtb	r2, r2
    329e:	adc.w	r7, r7, #4294967295
    32a2:	rsb	lr, r2, #32
    32a6:	sub.w	r3, r2, #32
    32aa:	lsr.w	r2, r6, r2
    32ae:	lsl.w	lr, r7, lr
    32b2:	lsr.w	r3, r7, r3
    32b6:	orr.w	r2, r2, lr
    32ba:	orrs	r2, r3
    32bc:	adds	r2, #1
    if (m_curCluster) {
    32be:	cbz	r1, 32ee <ExFatFile::truncate()+0xa2>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    32c0:	subs	r5, #1
    return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    32c2:	adds	r3, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    32c4:	subs	r1, r5, r1
    return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    32c6:	str	r3, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    32c8:	add	r2, r1
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    32ca:	cbnz	r2, 330e <ExFatFile::truncate()+0xc2>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    32cc:	ldrb.w	r3, [r4, #51]	; 0x33
  return sync();
    32d0:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    32d2:	ldrd	r6, r7, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    32d6:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    32da:	strd	r6, r7, [r4, #8]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    32de:	strb.w	r3, [r4, #51]	; 0x33
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
    32e2:	strd	r6, r7, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();
    32e6:	bl	3018 <ExFatFile::sync()>

fail:
  return false;
}
    32ea:	add	sp, #12
    32ec:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    32ee:	str	r5, [sp, #4]
      m_firstCluster = 0;
    32f0:	str	r1, [r4, #28]
    32f2:	b.n	32ca <ExFatFile::truncate()+0x7e>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    32f4:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    32f6:	ldr	r0, [r0, #32]
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    32f8:	str.w	r6, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    32fc:	bl	2b88 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    3300:	cmp	r0, #0
    3302:	blt.n	327c <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    3304:	bne.n	331c <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    3306:	ldr	r5, [sp, #4]
    3308:	cmp	r5, #0
    330a:	beq.n	32cc <ExFatFile::truncate()+0x80>
    330c:	b.n	3272 <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    330e:	movs	r3, #0
    3310:	ldr	r1, [sp, #4]
    3312:	bl	2aa4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    3316:	cmp	r0, #0
    3318:	bne.n	32cc <ExFatFile::truncate()+0x80>
    331a:	b.n	327c <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    331c:	mov.w	r2, #4294967295
    3320:	ldr	r1, [r4, #24]
    3322:	ldr	r0, [r4, #32]
    3324:	bl	2c10 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    3328:	cmp	r0, #0
    332a:	bne.n	3306 <ExFatFile::truncate()+0xba>
    332c:	b.n	327c <ExFatFile::truncate()+0x30>
    332e:	nop

00003330 <ExFatFile::write(void const*, unsigned int)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    3330:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3334:	ldrb.w	r3, [r0, #51]	; 0x33
    3338:	sub	sp, #12
    333a:	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    333c:	lsls	r5, r3, #30

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    333e:	str	r2, [sp, #0]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    3340:	bpl.w	34aa <ExFatFile::write(void const*, unsigned int)+0x17a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    3344:	lsls	r2, r3, #28
    3346:	mov	r8, r1
    3348:	bmi.w	349c <ExFatFile::write(void const*, unsigned int)+0x16c>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    334c:	ldr	r3, [sp, #0]
    334e:	cmp	r3, #0
    3350:	beq.w	358e <ExFatFile::write(void const*, unsigned int)+0x25e>
    3354:	mov	r1, r4
    3356:	ldr	r5, [sp, #0]
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3358:	mov.w	sl, #1
    335c:	ldrd	r2, r3, [r1], #24
    3360:	mov	fp, r2
    3362:	str	r1, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3364:	ldr	r0, [r4, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    3366:	ldr	r1, [r4, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3368:	ldr.w	r6, [r0, #1080]	; 0x438
    336c:	and.w	r6, r6, fp
    sectorOffset = clusterOffset & m_vol->sectorMask();
    3370:	ubfx	r9, r6, #0, #9
    if (clusterOffset == 0) {
    3374:	cbnz	r6, 33cc <ExFatFile::write(void const*, unsigned int)+0x9c>
      // start of new cluster
      if (m_curCluster != 0) {
    3376:	cmp	r1, #0
    3378:	beq.w	3514 <ExFatFile::write(void const*, unsigned int)+0x1e4>
        int fg;

        if (isContiguous()) {
    337c:	ldrb.w	r3, [r4, #51]	; 0x33
    3380:	lsls	r3, r3, #25
    3382:	bpl.w	3546 <ExFatFile::write(void const*, unsigned int)+0x216>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    3386:	ldrb.w	r2, [r0, #1093]	; 0x445
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    338a:	ldr	r3, [r4, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    338c:	adds	r2, #9
    338e:	ldrd	fp, ip, [r4, #8]
    3392:	uxtb	r2, r2
    3394:	adds.w	fp, fp, #4294967295
    3398:	rsb	lr, r2, #32
    339c:	sub.w	r7, r2, #32
    33a0:	adc.w	ip, ip, #4294967295
    33a4:	lsr.w	r2, fp, r2
    33a8:	lsl.w	lr, ip, lr
    33ac:	lsr.w	r7, ip, r7
    33b0:	orr.w	r2, r2, lr
    33b4:	orrs	r2, r7
    33b6:	add	r2, r3
    33b8:	cmp	r1, r2
    33ba:	bcc.w	3540 <ExFatFile::write(void const*, unsigned int)+0x210>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    33be:	mov	r0, r4
    33c0:	bl	2e38 <ExFatFile::addCluster()>
    33c4:	cmp	r0, #0
    33c6:	beq.n	34aa <ExFatFile::write(void const*, unsigned int)+0x17a>
    33c8:	ldr	r0, [r4, #32]
    33ca:	ldr	r1, [r4, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    33cc:	lsrs	r6, r6, #9
    33ce:	subs	r1, #2
    33d0:	ldr.w	r7, [r0, #1068]	; 0x42c
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    33d4:	ldrb.w	lr, [r0, #1093]	; 0x445
    33d8:	add	r7, r6
    33da:	lsl.w	r1, r1, lr
    33de:	add	r1, r7

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    33e0:	cmp.w	r9, #0
    33e4:	bne.n	34be <ExFatFile::write(void const*, unsigned int)+0x18e>
    33e6:	cmp.w	r5, #512	; 0x200
    33ea:	ite	cs
    33ec:	movcs	r2, #0
    33ee:	movcc	r2, #1
    33f0:	cmp	r2, #0
    33f2:	bne.n	34be <ExFatFile::write(void const*, unsigned int)+0x18e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
    33f4:	cmp.w	r5, #1024	; 0x400
    33f8:	bcc.w	351c <ExFatFile::write(void const*, unsigned int)+0x1ec>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    33fc:	lsl.w	lr, sl, lr
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    3400:	lsrs	r3, r5, #9
    3402:	ldr.w	ip, [r0, #536]	; 0x218
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    3406:	rsb	r6, r6, lr
    340a:	cmp	r3, r6
    340c:	it	cs
    340e:	movcs	r3, r6
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    3410:	cmp	r1, ip
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    3412:	mov.w	r7, r3, lsl #9
    3416:	bhi.n	342a <ExFatFile::write(void const*, unsigned int)+0xfa>
    3418:	adds	r6, r3, r1
    341a:	cmp	ip, r6
    341c:	bcs.n	342a <ExFatFile::write(void const*, unsigned int)+0xfa>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    341e:	mov.w	r6, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    3422:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    3426:	str.w	r6, [r0, #536]	; 0x218
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
    if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    342a:	ldr.w	r0, [r0, #532]	; 0x214
    342e:	mov	r2, r8
    3430:	ldr	r6, [r0, #0]
    3432:	ldr	r6, [r6, #36]	; 0x24
    3434:	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    3436:	cmp	r0, #0
    3438:	beq.n	34aa <ExFatFile::write(void const*, unsigned int)+0x17a>
    343a:	mov	r0, r7
    343c:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    343e:	add	r8, r7
    toWrite -= n;
    3440:	subs	r5, r5, r7
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    3442:	ldrd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    3446:	ldrd	r6, r7, [r4, #16]
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    344a:	adds.w	fp, r2, r0
    344e:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    3452:	cmp	r7, ip
    3454:	it	eq
    3456:	cmpeq	r6, fp
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    3458:	strd	fp, ip, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    345c:	bcs.n	346e <ExFatFile::write(void const*, unsigned int)+0x13e>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    345e:	ldrb.w	r1, [r4, #51]	; 0x33
    3462:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    3466:	strd	fp, ip, [r4, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    346a:	strb.w	r1, [r4, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    346e:	cmp	r5, #0
    3470:	bne.w	3364 <ExFatFile::write(void const*, unsigned int)+0x34>
    3474:	mov	r2, fp
    3476:	mov	r3, ip
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    3478:	ldrd	r0, r1, [r4, #8]
    347c:	cmp	r1, r3
    347e:	it	eq
    3480:	cmpeq	r0, r2
    3482:	bcc.n	3576 <ExFatFile::write(void const*, unsigned int)+0x246>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    3484:	ldr	r3, [pc, #268]	; (3594 <ExFatFile::write(void const*, unsigned int)+0x264>)
    3486:	ldr	r3, [r3, #0]
    3488:	cmp	r3, #0
    348a:	beq.n	358a <ExFatFile::write(void const*, unsigned int)+0x25a>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    348c:	ldrb.w	r3, [r4, #51]	; 0x33
    3490:	ldr	r0, [sp, #0]
    3492:	orn	r3, r3, #127	; 0x7f
    3496:	strb.w	r3, [r4, #51]	; 0x33
    349a:	b.n	34b8 <ExFatFile::write(void const*, unsigned int)+0x188>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    349c:	ldrd	r2, r3, [r0, #16]
    34a0:	bl	23dc <ExFatFile::seekSet(unsigned long long)>
    34a4:	cmp	r0, #0
    34a6:	bne.w	334c <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    34aa:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    34ae:	movs	r0, #0
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    34b0:	orr.w	r3, r3, #1
    34b4:	strb.w	r3, [r4, #50]	; 0x32
  return 0;
}
    34b8:	add	sp, #12
    34ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    34be:	cmp.w	r9, #0
    34c2:	bne.n	3510 <ExFatFile::write(void const*, unsigned int)+0x1e0>
    34c4:	ldrd	r2, r3, [r4, #16]
    34c8:	ldrd	r6, r7, [r4]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    34cc:	cmp	r7, r3
    34ce:	it	eq
    34d0:	cmpeq	r6, r2
    34d2:	ite	cc
    34d4:	movcc	r2, #1
    34d6:	movcs	r2, #5
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() { m_dataCache.dirty(); }
  void dataCacheInvalidate() { m_dataCache.invalidate(); }
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    34d8:	add.w	r0, r0, #528	; 0x210
    34dc:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCachePrepare(sector, cacheOption);
      if (!cache) {
    34e0:	cmp	r0, #0
    34e2:	beq.n	34aa <ExFatFile::write(void const*, unsigned int)+0x17a>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    34e4:	rsb	r7, r9, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    34e8:	add	r0, r9
    34ea:	mov	r1, r8
    34ec:	cmp	r7, r5
    34ee:	it	cs
    34f0:	movcs	r7, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    34f2:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    34f4:	mov	r2, r7
    34f6:	bl	69a8 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    34fa:	cmp.w	r9, #512	; 0x200
    34fe:	bne.n	343a <ExFatFile::write(void const*, unsigned int)+0x10a>
  }
  uint32_t dataCacheSector() { return m_dataCache.sector(); }
  bool dataCacheSync() { return m_dataCache.sync(); }
    3500:	ldr	r0, [r4, #32]
    3502:	add.w	r0, r0, #528	; 0x210
    3506:	bl	1ff4 <FsCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    350a:	cmp	r0, #0
    350c:	bne.n	343a <ExFatFile::write(void const*, unsigned int)+0x10a>
    350e:	b.n	34aa <ExFatFile::write(void const*, unsigned int)+0x17a>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3510:	movs	r2, #1
    3512:	b.n	34d8 <ExFatFile::write(void const*, unsigned int)+0x1a8>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    3514:	ldr	r1, [r4, #28]
    3516:	cbz	r1, 3556 <ExFatFile::write(void const*, unsigned int)+0x226>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    3518:	str	r1, [r4, #24]
    351a:	b.n	33cc <ExFatFile::write(void const*, unsigned int)+0x9c>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    351c:	ldr.w	r3, [r0, #536]	; 0x218
    3520:	cmp	r1, r3
    3522:	beq.n	3568 <ExFatFile::write(void const*, unsigned int)+0x238>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    3524:	ldr.w	r0, [r0, #532]	; 0x214
    3528:	mov	r2, r8
    352a:	ldr	r3, [r0, #0]
    352c:	ldr	r3, [r3, #32]
    352e:	blx	r3
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    3530:	cmp	r0, #0
    3532:	beq.n	34aa <ExFatFile::write(void const*, unsigned int)+0x17a>
    3534:	mov.w	r0, #512	; 0x200
    3538:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    353a:	mov.w	r7, #512	; 0x200
    353e:	b.n	343e <ExFatFile::write(void const*, unsigned int)+0x10e>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    3540:	adds	r1, #1
    3542:	str	r1, [r4, #24]
    3544:	b.n	33cc <ExFatFile::write(void const*, unsigned int)+0x9c>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3546:	ldr	r2, [sp, #4]
    3548:	bl	2b88 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    354c:	cmp	r0, #0
    354e:	blt.n	34aa <ExFatFile::write(void const*, unsigned int)+0x17a>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    3550:	bne.w	33c8 <ExFatFile::write(void const*, unsigned int)+0x98>
    3554:	b.n	33be <ExFatFile::write(void const*, unsigned int)+0x8e>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    3556:	mov	r0, r4
    3558:	bl	2e38 <ExFatFile::addCluster()>
    355c:	cmp	r0, #0
    355e:	beq.n	34aa <ExFatFile::write(void const*, unsigned int)+0x17a>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    3560:	ldr	r1, [r4, #24]
    3562:	ldr	r0, [r4, #32]
    3564:	str	r1, [r4, #28]
    3566:	b.n	33cc <ExFatFile::write(void const*, unsigned int)+0x9c>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    3568:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    356c:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    3570:	str.w	r3, [r0, #536]	; 0x218
    3574:	b.n	3524 <ExFatFile::write(void const*, unsigned int)+0x1f4>
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3576:	ldrb.w	r1, [r4, #51]	; 0x33
    357a:	ldr	r0, [sp, #0]
    357c:	orn	r1, r1, #127	; 0x7f
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    3580:	strd	r2, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3584:	strb.w	r1, [r4, #51]	; 0x33
    3588:	b.n	34b8 <ExFatFile::write(void const*, unsigned int)+0x188>
    358a:	ldr	r0, [sp, #0]
    358c:	b.n	34b8 <ExFatFile::write(void const*, unsigned int)+0x188>
    358e:	ldrd	r2, r3, [r4]
    3592:	b.n	3478 <ExFatFile::write(void const*, unsigned int)+0x148>
    3594:	.word	0x20021b98

00003598 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    3598:	cmp	r2, #4
    359a:	bls.n	35b4 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1c>
    return getLe16(ldir->unicode1 + 2 * i);
  } else if (i < 11) {
    359c:	cmp	r2, #10
    359e:	bls.n	35ac <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x14>
    return getLe16(ldir->unicode2 + 2 * (i - 5));
  } else if (i < 13) {
    35a0:	cmp	r2, #12
    35a2:	bhi.n	35be <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//------------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    35a4:	add.w	r2, r1, r2, lsl #1
    35a8:	ldrh	r0, [r2, #6]
    35aa:	bx	lr
    35ac:	add.w	r2, r1, r2, lsl #1
    35b0:	ldrh	r0, [r2, #4]
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2 * i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2 * (i - 5));
    35b2:	bx	lr
    35b4:	add.w	r2, r1, r2, lsl #1
    35b8:	ldrh.w	r0, [r2, #1]
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2 * i);
    35bc:	bx	lr
    return getLe16(ldir->unicode2 + 2 * (i - 5));
  } else if (i < 13) {
    return getLe16(ldir->unicode3 + 2 * (i - 11));
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    35be:	movs	r0, #0
}
    35c0:	bx	lr
    35c2:	nop

000035c4 <FatFile::openRoot(FatVolume*) [clone .part.38]>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    35c4:	push	{r3, r4, r5, lr}
    35c6:	mov	r5, r1
    35c8:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    35ca:	movs	r2, #36	; 0x24
    35cc:	movs	r1, #0
    35ce:	bl	980c <memset>

  m_vol = vol;
    35d2:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    35d4:	ldrb	r3, [r5, #7]
    35d6:	cmp	r3, #16
    35d8:	beq.n	35ec <FatFile::openRoot(FatVolume*) [clone .part.38]+0x28>
    35da:	cmp	r3, #32
    35dc:	bne.n	35e8 <FatFile::openRoot(FatVolume*) [clone .part.38]+0x24>
    case 16:
      m_attributes = FILE_ATTR_ROOT_FIXED;
      break;

    case 32:
      m_attributes = FILE_ATTR_ROOT32;
    35de:	movs	r3, #128	; 0x80
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    35e0:	movs	r0, #1
    case 16:
      m_attributes = FILE_ATTR_ROOT_FIXED;
      break;

    case 32:
      m_attributes = FILE_ATTR_ROOT32;
    35e2:	strb	r3, [r4, #0]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    35e4:	strb	r0, [r4, #2]
    35e6:	pop	{r3, r4, r5, pc}
  return true;

fail:
  return false;
    35e8:	movs	r0, #0
}
    35ea:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
    case 12:
#endif  // FAT12_SUPPORT
    case 16:
      m_attributes = FILE_ATTR_ROOT_FIXED;
    35ec:	movs	r3, #64	; 0x40
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    35ee:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
    case 12:
#endif  // FAT12_SUPPORT
    case 16:
      m_attributes = FILE_ATTR_ROOT_FIXED;
    35f0:	strb	r3, [r4, #0]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    35f2:	strb	r0, [r4, #2]
    35f4:	pop	{r3, r4, r5, pc}
    35f6:	nop

000035f8 <FatFile::addCluster()>:
#include "FatLib.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    35f8:	mov	r2, r0
#define DBG_FILE "FatFile.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    35fa:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    35fc:	ldr.w	r5, [r2, #16]!
#define DBG_FILE "FatFile.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    3600:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    3602:	ldr	r0, [r0, #8]
    3604:	mov	r1, r5
    3606:	bl	4110 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    360a:	cbz	r0, 3622 <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    360c:	cbz	r5, 3624 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    360e:	ldr	r3, [r4, #16]
    3610:	adds	r5, #1
    3612:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    3614:	ldrb	r3, [r4, #2]
    3616:	it	ne
    3618:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    361c:	orn	r3, r3, #127	; 0x7f
    3620:	strb	r3, [r4, #2]
  return false;
#else   // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    3622:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    3624:	ldrb	r3, [r4, #2]
    3626:	orr.w	r3, r3, #64	; 0x40
    362a:	b.n	361c <FatFile::addCluster()+0x24>

0000362c <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    362c:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sector;
  uint8_t* pc;

  if (isRootFixed()) {
    362e:	ldrb	r3, [r0, #0]
    3630:	and.w	r3, r3, #64	; 0x40
    3634:	cbnz	r3, 3642 <FatFile::addDirCluster()+0x16>
    3636:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL * 4095) {
    363a:	ldr	r1, [r0, #20]
    363c:	ldr	r3, [pc, #100]	; (36a4 <FatFile::addDirCluster()+0x78>)
    363e:	cmp	r1, r3
    3640:	bls.n	3648 <FatFile::addDirCluster()+0x1c>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    3642:	movs	r6, #0
}
    3644:	mov	r0, r6
    3646:	pop	{r3, r4, r5, r6, r7, pc}
    3648:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL * 4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    364a:	bl	35f8 <FatFile::addCluster()>
    364e:	mov	r6, r0
    3650:	cmp	r0, #0
    3652:	beq.n	3642 <FatFile::addDirCluster()+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    3654:	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3656:	ldr	r7, [r5, #16]
    3658:	ldrb	r3, [r0, #6]
    365a:	subs	r7, #2
    365c:	ldr	r2, [r0, #20]
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    365e:	ldrb	r1, [r0, #4]
    3660:	lsls	r7, r3
    3662:	add	r7, r2
    3664:	cbnz	r1, 3678 <FatFile::addDirCluster()+0x4c>
    3666:	b.n	3690 <FatFile::addDirCluster()+0x64>
    pc = m_vol->dataCachePrepare(sector + i, FsCache::CACHE_RESERVE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(pc, 0, m_vol->bytesPerSector());
    3668:	bl	980c <memset>
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    366c:	adds	r4, #1
    366e:	ldr	r0, [r5, #8]
    3670:	uxtb	r4, r4
    3672:	ldrb	r3, [r0, #4]
    3674:	cmp	r3, r4
    3676:	bls.n	368e <FatFile::addDirCluster()+0x62>
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    3678:	movs	r2, #5
    367a:	adds	r1, r4, r7
    367c:	adds	r0, #36	; 0x24
    367e:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
    pc = m_vol->dataCachePrepare(sector + i, FsCache::CACHE_RESERVE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(pc, 0, m_vol->bytesPerSector());
    3682:	mov.w	r2, #512	; 0x200
    3686:	movs	r1, #0
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    pc = m_vol->dataCachePrepare(sector + i, FsCache::CACHE_RESERVE_FOR_WRITE);
    if (!pc) {
    3688:	cmp	r0, #0
    368a:	bne.n	3668 <FatFile::addDirCluster()+0x3c>
    368c:	b.n	3642 <FatFile::addDirCluster()+0x16>
    368e:	ldrb	r3, [r0, #6]
      goto fail;
    }
    memset(pc, 0, m_vol->bytesPerSector());
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    3690:	mov.w	r2, #512	; 0x200
    3694:	ldr	r1, [r5, #20]
    3696:	lsl.w	r3, r2, r3
    369a:	uxtah	r3, r1, r3
    369e:	str	r3, [r5, #20]
    36a0:	b.n	3644 <FatFile::addDirCluster()+0x18>
    36a2:	nop
    36a4:	.word	0x001ffdff

000036a8 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    36a8:	push	{r4, lr}
    36aa:	mov	r4, r0
    36ac:	ldr	r0, [r0, #8]
    36ae:	mov	r2, r1
    36b0:	adds	r0, #36	; 0x24
    36b2:	ldr	r1, [r4, #24]
    36b4:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* pc = m_vol->dataCachePrepare(m_dirSector, action);
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(pc);
  if (!dir) {
    36b8:	cbz	r0, 36c4 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return dir + (m_dirIndex & 0XF);
    36ba:	ldrh	r3, [r4, #4]
    36bc:	and.w	r3, r3, #15
    36c0:	add.w	r0, r0, r3, lsl #5

fail:
  return nullptr;
}
    36c4:	pop	{r4, pc}
    36c6:	nop

000036c8 <FatFile::sync() [clone .part.42]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    36c8:	push	{r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    36ca:	ldrsb.w	r3, [r0, #2]
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    36ce:	sub	sp, #12
    36d0:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    36d2:	cmp	r3, #0
    36d4:	blt.n	370a <FatFile::sync() [clone .part.42]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    36d6:	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    36d8:	add.w	r0, r5, #36	; 0x24
    36dc:	bl	1ff4 <FsCache::sync()>
    36e0:	cbnz	r0, 36f0 <FatFile::sync() [clone .part.42]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    36e2:	ldrb	r3, [r4, #1]
  return false;
    36e4:	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    36e6:	orr.w	r3, r3, #1
    36ea:	strb	r3, [r4, #1]
  return false;
}
    36ec:	add	sp, #12
    36ee:	pop	{r4, r5, pc}
    36f0:	add.w	r0, r5, #564	; 0x234
    36f4:	bl	1ff4 <FsCache::sync()>
    36f8:	cmp	r0, #0
    36fa:	beq.n	36e2 <FatFile::sync() [clone .part.42]+0x1a>
    36fc:	ldr	r0, [r5, #0]
    return m_cache.cacheSafeWrite(sector, dst);
  }
  bool cacheSafeWrite(uint32_t sector, const uint8_t* dst, size_t count) {
    return m_cache.cacheSafeWrite(sector, dst, count);
  }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    36fe:	ldr	r3, [r0, #0]
    3700:	ldr	r3, [r3, #28]
    3702:	blx	r3
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3704:	cmp	r0, #0
    3706:	beq.n	36e2 <FatFile::sync() [clone .part.42]+0x1a>
    3708:	b.n	36ec <FatFile::sync() [clone .part.42]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    370a:	movs	r1, #1
    370c:	bl	36a8 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    3710:	mov	r5, r0
    3712:	cmp	r0, #0
    3714:	beq.n	36e2 <FatFile::sync() [clone .part.42]+0x1a>
    3716:	ldrb	r3, [r0, #0]
    3718:	cmp	r3, #229	; 0xe5
    371a:	beq.n	36e2 <FatFile::sync() [clone .part.42]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
    371c:	ldrb	r3, [r4, #0]
    371e:	and.w	r3, r3, #55	; 0x37
    3722:	strb	r3, [r0, #11]
    // do not set filesize for dir files
    if (isFile()) {
    3724:	ldrb	r3, [r4, #0]
    3726:	lsls	r3, r3, #28
    3728:	bpl.n	372e <FatFile::sync() [clone .part.42]+0x66>
      setLe32(dir->fileSize, m_fileSize);
    372a:	ldr	r3, [r4, #28]
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    372c:	str	r3, [r0, #28]
    }
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    372e:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    3730:	ldr	r1, [pc, #44]	; (3760 <FatFile::sync() [clone .part.42]+0x98>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    3732:	lsrs	r2, r3, #16
    3734:	strh	r3, [r5, #26]
    3736:	ldr	r3, [r1, #0]
    3738:	strh	r2, [r5, #20]
    373a:	cbz	r3, 3756 <FatFile::sync() [clone .part.42]+0x8e>
      FsDateTime::callback(&date, &time, &ms10);
    373c:	add.w	r2, sp, #3
    3740:	add.w	r1, sp, #6
    3744:	add	r0, sp, #4
    3746:	blx	r3
      setLe16(dir->modifyDate, date);
    3748:	ldrh.w	r3, [sp, #4]
    374c:	ldrh.w	r2, [sp, #6]
    3750:	strh	r3, [r5, #24]
    3752:	strh	r3, [r5, #18]
    3754:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    3756:	ldrb	r3, [r4, #2]
    3758:	and.w	r3, r3, #127	; 0x7f
    375c:	strb	r3, [r4, #2]
    375e:	b.n	36d6 <FatFile::sync() [clone .part.42]+0xe>
    3760:	.word	0x20021b98

00003764 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    3764:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    3766:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    3768:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    376a:	cbnz	r3, 3776 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    376c:	movs	r3, #0
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    376e:	movs	r0, #1
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    3770:	strb	r3, [r4, #0]
  m_flags = 0;
    3772:	strb	r3, [r4, #2]
  return rtn;
}
    3774:	pop	{r4, pc}
    3776:	bl	36c8 <FatFile::sync() [clone .part.42]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    377a:	movs	r3, #0
    377c:	strb	r3, [r4, #0]
  m_flags = 0;
    377e:	strb	r3, [r4, #2]
  return rtn;
}
    3780:	pop	{r4, pc}
    3782:	nop

00003784 <FatFile::mkdir(FatFile*, FatLfn_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    3784:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  uint8_t* pc;

  if (!parent->isDir()) {
    3788:	ldrb	r4, [r1, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    378a:	sub	sp, #32
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  uint8_t* pc;

  if (!parent->isDir()) {
    378c:	tst.w	r4, #208	; 0xd0
    3790:	bne.n	379a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    3792:	movs	r0, #0
    3794:	add	sp, #32
    3796:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    379a:	movw	r3, #2562	; 0xa02
    379e:	mov	r5, r0
    37a0:	mov	r4, r1
    37a2:	bl	4730 <FatFile::open(FatFile*, FatLfn_t*, int)>
    37a6:	cmp	r0, #0
    37a8:	beq.n	3792 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    37aa:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    37ac:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    37ae:	mov	r0, r5
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    37b0:	strb	r2, [r5, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    37b2:	strb	r3, [r5, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    37b4:	bl	362c <FatFile::addDirCluster()>
    37b8:	cmp	r0, #0
    37ba:	beq.n	3792 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    37bc:	ldr	r2, [r5, #16]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    37be:	ldrb	r3, [r5, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    37c0:	str	r2, [r5, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    37c2:	cmp	r3, #0
    37c4:	bne.n	38c6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x142>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    37c6:	movs	r1, #1
    37c8:	mov	r0, r5
    37ca:	bl	36a8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    37ce:	mov	r7, r0
    37d0:	cmp	r0, #0
    37d2:	beq.n	3792 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry attribute
  dir->attributes = FS_ATTRIB_DIRECTORY;
    37d4:	movs	r3, #16

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    37d6:	ldr	r0, [r0, #0]
    37d8:	ldr	r1, [r7, #4]
    37da:	mov	lr, sp
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry attribute
  dir->attributes = FS_ATTRIB_DIRECTORY;
    37dc:	strb	r3, [r7, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
    37de:	mov.w	ip, #46	; 0x2e
  }
  // change directory entry attribute
  dir->attributes = FS_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    37e2:	ldr	r2, [r7, #8]
  dot.name[0] = '.';
    37e4:	add	r6, sp, #32
  }
  // change directory entry attribute
  dir->attributes = FS_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    37e6:	ldr	r3, [r7, #12]
    37e8:	ldrh.w	r8, [r7, #20]
    37ec:	stmia.w	lr!, {r0, r1, r2, r3}
    37f0:	ldr	r2, [r7, #24]
    37f2:	ldr	r3, [r7, #28]
    37f4:	ldr	r0, [r7, #16]
    37f6:	ldr	r1, [r7, #20]
  dot.name[0] = '.';
    37f8:	strb.w	ip, [r6, #-32]!
    37fc:	add.w	ip, sp, #10
  }
  // change directory entry attribute
  dir->attributes = FS_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    3800:	ldrh	r7, [r7, #26]
    3802:	stmia.w	lr!, {r0, r1, r2, r3}
    3806:	mov	r3, r6
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    3808:	movs	r2, #32
    380a:	strb.w	r2, [r3, #1]!
  dir->attributes = FS_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    380e:	cmp	r3, ip
    3810:	bne.n	380a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x86>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    3812:	ldr	r0, [r5, #8]
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    3814:	movs	r2, #1
    3816:	ldr	r3, [r5, #32]
    3818:	ldrb.w	lr, [r0, #6]
    381c:	adds	r0, #36	; 0x24
    381e:	subs	r3, #2
    3820:	ldr.w	r1, [r0, #-16]
    3824:	lsl.w	r3, r3, lr
    3828:	add	r1, r3
    382a:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
  pc = m_vol->dataCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
  dir = reinterpret_cast<DirFat_t*>(pc);
  if (!dir) {
    382e:	mov	lr, r0
    3830:	cmp	r0, #0
    3832:	beq.n	3792 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&dir[0], &dot, sizeof(dot));
    3834:	strh.w	r8, [sp, #20]
  // make entry for '..'
  dot.name[1] = '.';
    3838:	mov.w	r8, #46	; 0x2e
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&dir[0], &dot, sizeof(dot));
    383c:	strh.w	r7, [sp, #26]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&dir[1], &dot, sizeof(dot));
    3840:	mov	r7, r6
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&dir[0], &dot, sizeof(dot));
    3842:	ldmia	r6!, {r0, r1, r2, r3}
    3844:	str.w	r0, [lr]
    3848:	str.w	r1, [lr, #4]
    384c:	str.w	r2, [lr, #8]
    3850:	str.w	r3, [lr, #12]
  // make entry for '..'
  dot.name[1] = '.';
    3854:	strb.w	r8, [sp, #1]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&dir[0], &dot, sizeof(dot));
    3858:	ldmia	r6!, {r0, r1, r2, r3}
    385a:	str.w	r0, [lr, #16]
    385e:	str.w	r1, [lr, #20]
    3862:	str.w	r2, [lr, #24]
    3866:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    386a:	ldr	r3, [r4, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&dir[1], &dot, sizeof(dot));
    386c:	lsrs	r2, r3, #16
    386e:	strh.w	r3, [sp, #26]
    3872:	strh.w	r2, [sp, #20]
    3876:	ldmia	r7!, {r0, r1, r2, r3}
    3878:	str.w	r0, [lr, #32]
    387c:	str.w	r1, [lr, #36]	; 0x24
    3880:	str.w	r2, [lr, #40]	; 0x28
    3884:	str.w	r3, [lr, #44]	; 0x2c
    3888:	ldmia	r7!, {r0, r1, r2, r3}
    388a:	str.w	r0, [lr, #48]	; 0x30
    388e:	str.w	r1, [lr, #52]	; 0x34
    3892:	str.w	r2, [lr, #56]	; 0x38
    3896:	str.w	r3, [lr, #60]	; 0x3c
  // write first sector
  return m_vol->cacheSync();
    389a:	ldr	r4, [r5, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    389c:	add.w	r0, r4, #36	; 0x24
    38a0:	bl	1ff4 <FsCache::sync()>
    38a4:	cmp	r0, #0
    38a6:	beq.w	3792 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    38aa:	add.w	r0, r4, #564	; 0x234
    38ae:	bl	1ff4 <FsCache::sync()>
    38b2:	cmp	r0, #0
    38b4:	beq.w	3792 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    38b8:	ldr	r0, [r4, #0]
    return m_cache.cacheSafeWrite(sector, dst);
  }
  bool cacheSafeWrite(uint32_t sector, const uint8_t* dst, size_t count) {
    return m_cache.cacheSafeWrite(sector, dst, count);
  }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    38ba:	ldr	r3, [r0, #0]
    38bc:	ldr	r3, [r3, #28]

fail:
  return false;
}
    38be:	add	sp, #32
    38c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    38c4:	bx	r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    38c6:	ldr	r3, [r5, #20]
    38c8:	cbz	r3, 38d8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x154>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    38ca:	ldrb	r3, [r5, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    38cc:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    38ce:	bic.w	r3, r3, #32
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    38d2:	str	r2, [r5, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    38d4:	str	r2, [r5, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    38d6:	strb	r3, [r5, #2]
    38d8:	mov	r0, r5
    38da:	bl	36c8 <FatFile::sync() [clone .part.42]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    38de:	cmp	r0, #0
    38e0:	beq.w	3792 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xe>
    38e4:	b.n	37c6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x42>
    38e6:	nop

000038e8 <FatFile::mkdir(FatFile*, char const*, bool)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::isBusy() { return m_vol->isBusy(); }
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    38e8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38ec:	mov	r6, r0
    38ee:	sub	sp, #80	; 0x50
    38f0:	movs	r0, #0
    38f2:	mov	r4, r1
  FatName_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    38f4:	ldrb	r1, [r6, #0]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::isBusy() { return m_vol->isBusy(); }
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    38f6:	str	r2, [sp, #4]
    38f8:	strb.w	r0, [sp, #44]	; 0x2c
    38fc:	strb.w	r0, [sp, #45]	; 0x2d
    3900:	strb.w	r0, [sp, #46]	; 0x2e
  FatName_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    3904:	cbnz	r1, 3910 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    3906:	mov	r8, r3
    3908:	ldrb	r3, [r4, #0]
    390a:	tst.w	r3, #208	; 0xd0
    390e:	bne.n	3918 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    3910:	movs	r0, #0
}
    3912:	add	sp, #80	; 0x50
    3914:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    3918:	ldrb	r3, [r2, #0]
    391a:	mov	r1, r2
    391c:	cmp	r3, #47	; 0x2f
    391e:	beq.n	397e <FatFile::mkdir(FatFile*, char const*, bool)+0x96>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    3920:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    3922:	add	r3, sp, #4
    3924:	add	r2, sp, #12
    3926:	mov	r0, r6
    3928:	bl	49e0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    392c:	add	r2, sp, #12
    392e:	mov	r1, r4
    3930:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    3932:	cmp	r0, #0
    3934:	beq.n	3910 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    3936:	ldr	r5, [sp, #4]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    3938:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    393a:	ldrb	r5, [r5, #0]
    393c:	cmp	r5, #0
    393e:	beq.n	39a2 <FatFile::mkdir(FatFile*, char const*, bool)+0xba>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    3940:	bl	4730 <FatFile::open(FatFile*, FatLfn_t*, int)>
    3944:	cbnz	r0, 395a <FatFile::mkdir(FatFile*, char const*, bool)+0x72>
      if (!pFlag || !mkdir(parent, &fname)) {
    3946:	cmp.w	r8, #0
    394a:	beq.n	3910 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    394c:	mov	r1, r4
    394e:	add	r2, sp, #12
    3950:	mov	r0, r6
    3952:	bl	3784 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    3956:	cmp	r0, #0
    3958:	beq.n	3910 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    395a:	mov	r5, r6
    395c:	add	r4, sp, #44	; 0x2c
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    395e:	ldrb.w	lr, [r6]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    3962:	ldmia	r5!, {r0, r1, r2, r3}
    3964:	stmia	r4!, {r0, r1, r2, r3}
    3966:	ldmia	r5!, {r0, r1, r2, r3}
    3968:	ldr	r5, [r5, #0]
    396a:	stmia	r4!, {r0, r1, r2, r3}
    396c:	str	r5, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    396e:	cmp.w	lr, #0
    3972:	bne.n	399a <FatFile::mkdir(FatFile*, char const*, bool)+0xb2>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    3974:	strb	r7, [r6, #0]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    3976:	add	r4, sp, #44	; 0x2c
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    3978:	strb	r7, [r6, #2]
    397a:	ldr	r1, [sp, #4]
    397c:	b.n	3922 <FatFile::mkdir(FatFile*, char const*, bool)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    397e:	adds	r1, #1
    3980:	str	r1, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    3982:	ldrb	r3, [r1, #0]
    3984:	cmp	r3, #47	; 0x2f
    3986:	beq.n	397e <FatFile::mkdir(FatFile*, char const*, bool)+0x96>
    3988:	ldr	r1, [r4, #8]
    398a:	add	r0, sp, #44	; 0x2c
    398c:	bl	35c4 <FatFile::openRoot(FatVolume*) [clone .part.38]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    3990:	cmp	r0, #0
    3992:	beq.n	3910 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    3994:	add	r4, sp, #44	; 0x2c
    3996:	ldr	r1, [sp, #4]
    3998:	b.n	3920 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    399a:	mov	r0, r6
    399c:	bl	36c8 <FatFile::sync() [clone .part.42]>
    39a0:	b.n	3974 <FatFile::mkdir(FatFile*, char const*, bool)+0x8c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    39a2:	add	r2, sp, #12
    39a4:	mov	r1, r4
    39a6:	mov	r0, r6
    39a8:	bl	3784 <FatFile::mkdir(FatFile*, FatLfn_t*)>

fail:
  return false;
}
    39ac:	add	sp, #80	; 0x50
    39ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39b2:	nop

000039b4 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    39b4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39b8:	mov	r6, r0
    39ba:	sub	sp, #80	; 0x50
    39bc:	movs	r0, #0
    39be:	mov	r5, r1
  FatFile tmpDir;
  FatName_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    39c0:	ldrb	r1, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    39c2:	str	r2, [sp, #4]
    39c4:	strb.w	r0, [sp, #44]	; 0x2c
    39c8:	strb.w	r0, [sp, #45]	; 0x2d
    39cc:	strb.w	r0, [sp, #46]	; 0x2e
  FatFile tmpDir;
  FatName_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    39d0:	cbnz	r1, 39dc <FatFile::open(FatFile*, char const*, int)+0x28>
    39d2:	mov	r8, r3
    39d4:	ldrb	r3, [r5, #0]
    39d6:	tst.w	r3, #208	; 0xd0
    39da:	bne.n	39e4 <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    39dc:	movs	r0, #0
}
    39de:	add	sp, #80	; 0x50
    39e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    39e4:	ldrb	r3, [r2, #0]
    39e6:	mov	r1, r2
    39e8:	cmp	r3, #47	; 0x2f
    39ea:	beq.n	3a42 <FatFile::open(FatFile*, char const*, int)+0x8e>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    39ec:	movs	r7, #0
    39ee:	b.n	39f6 <FatFile::open(FatFile*, char const*, int)+0x42>
    39f0:	ldr	r1, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    39f2:	strb	r7, [r6, #0]
  m_flags = 0;
    39f4:	strb	r7, [r6, #2]
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    39f6:	add	r3, sp, #4
    39f8:	add	r2, sp, #12
    39fa:	mov	r0, r6
    39fc:	bl	49e0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    3a00:	add	r2, sp, #12
    3a02:	mov	r1, r5
    3a04:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    3a06:	cmp	r0, #0
    3a08:	beq.n	39dc <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    3a0a:	ldr	r4, [sp, #4]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    3a0c:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    3a0e:	ldrb	r4, [r4, #0]
    3a10:	cbz	r4, 3a60 <FatFile::open(FatFile*, char const*, int)+0xac>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    3a12:	bl	4730 <FatFile::open(FatFile*, FatLfn_t*, int)>
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    3a16:	mov	r5, r6
    3a18:	add	r4, sp, #44	; 0x2c
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    3a1a:	cmp	r0, #0
    3a1c:	beq.n	39dc <FatFile::open(FatFile*, char const*, int)+0x28>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    3a1e:	ldrb.w	lr, [r6]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    3a22:	ldmia	r5!, {r0, r1, r2, r3}
    3a24:	stmia	r4!, {r0, r1, r2, r3}
    3a26:	ldmia	r5!, {r0, r1, r2, r3}
    3a28:	ldr.w	ip, [r5]
    dirFile = &tmpDir;
    3a2c:	add	r5, sp, #44	; 0x2c
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_WARN_MACRO;
      goto fail;
    }
    tmpDir = *this;
    3a2e:	stmia	r4!, {r0, r1, r2, r3}
    3a30:	str.w	ip, [r4]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    3a34:	cmp.w	lr, #0
    3a38:	beq.n	39f0 <FatFile::open(FatFile*, char const*, int)+0x3c>
    3a3a:	mov	r0, r6
    3a3c:	bl	36c8 <FatFile::sync() [clone .part.42]>
    3a40:	b.n	39f0 <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    3a42:	adds	r1, #1
    3a44:	str	r1, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    3a46:	ldrb	r3, [r1, #0]
    3a48:	cmp	r3, #47	; 0x2f
    3a4a:	beq.n	3a42 <FatFile::open(FatFile*, char const*, int)+0x8e>
      path++;
    }
    if (*path == 0) {
    3a4c:	cbz	r3, 3a72 <FatFile::open(FatFile*, char const*, int)+0xbe>
    3a4e:	ldr	r1, [r5, #8]
    3a50:	add	r0, sp, #44	; 0x2c
    3a52:	bl	35c4 <FatFile::openRoot(FatVolume*) [clone .part.38]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    3a56:	cmp	r0, #0
    3a58:	beq.n	39dc <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    3a5a:	add	r5, sp, #44	; 0x2c
    3a5c:	ldr	r1, [sp, #4]
    3a5e:	b.n	39ec <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    3a60:	mov	r3, r8
    3a62:	add	r2, sp, #12
    3a64:	mov	r1, r5
    3a66:	mov	r0, r6
    3a68:	bl	4730 <FatFile::open(FatFile*, FatLfn_t*, int)>

fail:
  return false;
}
    3a6c:	add	sp, #80	; 0x50
    3a6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a72:	ldr	r1, [r5, #8]
    3a74:	mov	r0, r6
    3a76:	bl	35c4 <FatFile::openRoot(FatVolume*) [clone .part.38]>
    3a7a:	b.n	39de <FatFile::open(FatFile*, char const*, int)+0x2a>

00003a7c <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    3a7c:	cbz	r1, 3a86 <FatFile::open(FatVolume*, char const*, int)+0xa>
    3a7e:	addw	r1, r1, #1092	; 0x444
    3a82:	b.w	39b4 <FatFile::open(FatFile*, char const*, int)>
}
    3a86:	mov	r0, r1
    3a88:	bx	lr
    3a8a:	nop

00003a8c <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    3a8c:	ldrb	r3, [r0, #0]
    3a8e:	cbz	r3, 3a94 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
    3a90:	movs	r0, #0
    3a92:	bx	lr
    3a94:	b.w	35c4 <FatFile::openRoot(FatVolume*) [clone .part.38]>

00003a98 <FatFile::read(void*, unsigned int)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    3a98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    3a9c:	ldrb	r3, [r0, #2]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    3a9e:	sub	sp, #12
    3aa0:	mov	r5, r0
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    3aa2:	lsls	r7, r3, #31
    3aa4:	bpl.w	3bc8 <FatFile::read(void*, unsigned int)+0x130>
    3aa8:	mov	r7, r1
    3aaa:	ldrb	r1, [r0, #0]
    3aac:	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    3aae:	lsls	r6, r1, #28
    3ab0:	bmi.w	3bda <FatFile::read(void*, unsigned int)+0x142>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    3ab4:	lsls	r4, r1, #25
    3ab6:	bpl.n	3aca <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 =
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    3ab8:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    3aba:	ldr	r3, [r0, #20]
    3abc:	ldrh	r2, [r2, #8]
    3abe:	rsb	r3, r3, r2, lsl #5
    3ac2:	uxth	r3, r3
    3ac4:	cmp	r9, r3
    3ac6:	it	cs
    3ac8:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    3aca:	cmp.w	r9, #0
    3ace:	beq.w	3c26 <FatFile::read(void*, unsigned int)+0x18e>
    3ad2:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    if (isRootFixed()) {
    3ad4:	lsls	r0, r1, #25
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    3ad6:	mov	r6, r9
    3ad8:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3adc:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    3ae0:	ldr	r2, [r5, #8]
    3ae2:	ubfx	r4, r3, #0, #9
    if (isRootFixed()) {
    3ae6:	bpl.n	3b6a <FatFile::read(void*, unsigned int)+0xd2>
      sector = m_vol->rootDirStart() +
               (m_curPosition >> m_vol->bytesPerSectorShift());
    3ae8:	ldr	r1, [r2, #32]
    3aea:	add.w	r1, r1, r3, lsr #9
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    3aee:	cmp	r4, #0
    3af0:	bne.n	3b9c <FatFile::read(void*, unsigned int)+0x104>
    3af2:	cmp.w	r6, #512	; 0x200
    3af6:	bcc.n	3b9c <FatFile::read(void*, unsigned int)+0x104>
    3af8:	ldr	r3, [r2, #44]	; 0x2c
    3afa:	cmp	r1, r3
    3afc:	beq.n	3b9c <FatFile::read(void*, unsigned int)+0x104>
        goto fail;
      }
      uint8_t* src = pc + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    3afe:	cmp.w	r6, #1024	; 0x400
    3b02:	bcc.n	3bec <FatFile::read(void*, unsigned int)+0x154>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    3b04:	ldrb	r0, [r5, #0]
      }
      uint8_t* src = pc + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3b06:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    3b0a:	lsls	r0, r0, #25
    3b0c:	bmi.n	3b1a <FatFile::read(void*, unsigned int)+0x82>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    3b0e:	ldrb	r0, [r2, #4]
    3b10:	rsb	r0, r8, r0
    3b14:	cmp	fp, r0
    3b16:	it	cs
    3b18:	movcs	fp, r0
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    3b1a:	cmp	r1, r3
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    3b1c:	mov.w	r4, fp, lsl #9
    3b20:	bhi.n	3b3e <FatFile::read(void*, unsigned int)+0xa6>
    3b22:	add.w	r0, r1, fp
    3b26:	cmp	r3, r0
    3b28:	bcs.n	3b3e <FatFile::read(void*, unsigned int)+0xa6>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    3b2a:	add.w	r0, r2, #36	; 0x24
    3b2e:	str	r1, [sp, #4]
    3b30:	str	r2, [sp, #0]
    3b32:	bl	1ff4 <FsCache::sync()>
    3b36:	ldr	r2, [sp, #0]
    3b38:	ldr	r1, [sp, #4]
    3b3a:	cmp	r0, #0
    3b3c:	beq.n	3bc8 <FatFile::read(void*, unsigned int)+0x130>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    3b3e:	ldr	r0, [r2, #40]	; 0x28
    3b40:	mov	r3, fp
    3b42:	mov	r2, r7
    3b44:	ldr.w	lr, [r0]
    3b48:	ldr.w	fp, [lr, #20]
    3b4c:	blx	fp
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    3b4e:	cmp	r0, #0
    3b50:	beq.n	3bc8 <FatFile::read(void*, unsigned int)+0x130>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    3b52:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    3b54:	subs	r6, r6, r4
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    3b56:	add	r7, r4
    m_curPosition += n;
    3b58:	add	r3, r4
    3b5a:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    3b5c:	beq.n	3c26 <FatFile::read(void*, unsigned int)+0x18e>
    3b5e:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    3b60:	ubfx	r4, r3, #0, #9
    3b64:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    3b66:	lsls	r0, r1, #25
    3b68:	bmi.n	3ae8 <FatFile::read(void*, unsigned int)+0x50>
  void cacheDirty() { m_cache.dirty(); }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    3b6a:	ldrb.w	r8, [r2, #5]
    3b6e:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart() +
               (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    3b72:	cmp	r4, #0
    3b74:	bne.n	3be8 <FatFile::read(void*, unsigned int)+0x150>
    3b76:	cmp.w	r8, #0
    3b7a:	bne.n	3be8 <FatFile::read(void*, unsigned int)+0x150>
        // start of new cluster
        if (m_curPosition == 0) {
    3b7c:	cmp	r3, #0
    3b7e:	bne.n	3c00 <FatFile::read(void*, unsigned int)+0x168>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    3b80:	lsls	r0, r1, #24
    3b82:	ite	mi
    3b84:	ldrmi	r3, [r2, #32]
    3b86:	ldrpl	r3, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    3b88:	str	r3, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3b8a:	ldrb	r1, [r2, #6]
    3b8c:	subs	r3, #2
    3b8e:	ldr	r0, [r2, #20]
    3b90:	lsls	r3, r1
    3b92:	add.w	r1, r8, r0
    3b96:	add	r1, r3
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    3b98:	cmp	r4, #0
    3b9a:	beq.n	3af2 <FatFile::read(void*, unsigned int)+0x5a>
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    3b9c:	add.w	r0, r2, #36	; 0x24
    3ba0:	movs	r2, #0
    3ba2:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
      if (!pc) {
    3ba6:	cbz	r0, 3bc8 <FatFile::read(void*, unsigned int)+0x130>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
        sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    3ba8:	rsb	r3, r4, #512	; 0x200
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc + offset;
      memcpy(dst, src, n);
    3bac:	adds	r1, r0, r4
    3bae:	mov	r0, r7
    3bb0:	cmp	r3, r6
    3bb2:	it	cs
    3bb4:	movcs	r3, r6
    3bb6:	mov	r2, r3
    3bb8:	mov	r4, r3
    3bba:	bl	69a8 <memcpy>
    3bbe:	b.n	3b52 <FatFile::read(void*, unsigned int)+0xba>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    3bc0:	ldrb	r3, [r5, #0]
    3bc2:	tst.w	r3, #208	; 0xd0
    3bc6:	bne.n	3c28 <FatFile::read(void*, unsigned int)+0x190>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    3bc8:	ldrb	r3, [r5, #1]
  return -1;
    3bca:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    3bce:	orr.w	r3, r3, #2
    3bd2:	strb	r3, [r5, #1]
  return -1;
}
    3bd4:	add	sp, #12
    3bd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    3bda:	ldr	r3, [r0, #28]
    3bdc:	ldr	r2, [r0, #20]
    3bde:	subs	r3, r3, r2
    3be0:	cmp	r9, r3
    3be2:	it	cs
    3be4:	movcs	r9, r3
    3be6:	b.n	3aca <FatFile::read(void*, unsigned int)+0x32>
    3be8:	ldr	r3, [r5, #16]
    3bea:	b.n	3b8a <FatFile::read(void*, unsigned int)+0xf2>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    3bec:	ldr	r0, [r2, #40]	; 0x28
    3bee:	mov	r2, r7
    3bf0:	ldr	r3, [r0, #0]
    3bf2:	ldr	r3, [r3, #16]
    3bf4:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    3bf6:	cmp	r0, #0
    3bf8:	beq.n	3bc8 <FatFile::read(void*, unsigned int)+0x130>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3bfa:	mov.w	r4, #512	; 0x200
    3bfe:	b.n	3b52 <FatFile::read(void*, unsigned int)+0xba>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    3c00:	lsls	r1, r1, #28
    3c02:	bpl.n	3c10 <FatFile::read(void*, unsigned int)+0x178>
    3c04:	ldrb	r3, [r5, #2]
    3c06:	lsls	r3, r3, #25
    3c08:	bpl.n	3c10 <FatFile::read(void*, unsigned int)+0x178>
          m_curCluster++;
    3c0a:	ldr	r3, [r5, #16]
    3c0c:	adds	r3, #1
    3c0e:	b.n	3b88 <FatFile::read(void*, unsigned int)+0xf0>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3c10:	mov	r0, r2
    3c12:	ldr	r1, [r5, #16]
    3c14:	mov	r2, sl
    3c16:	bl	4034 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3c1a:	cmp	r0, #0
    3c1c:	blt.n	3bc8 <FatFile::read(void*, unsigned int)+0x130>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    3c1e:	beq.n	3bc0 <FatFile::read(void*, unsigned int)+0x128>
    3c20:	ldr	r2, [r5, #8]
    3c22:	ldr	r3, [r5, #16]
    3c24:	b.n	3b8a <FatFile::read(void*, unsigned int)+0xf2>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3c26:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    3c28:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    3c2c:	add	sp, #12
    3c2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c32:	nop

00003c34 <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    3c34:	push	{r4, r5, r6, lr}
    3c36:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    3c38:	movs	r2, #1
    3c3a:	mov	r4, r0
  uint32_t saveCurPosition = m_curPosition;
    3c3c:	ldr	r6, [r0, #20]
    3c3e:	add.w	r1, sp, #7
  uint32_t saveCurCluster = m_curCluster;
    3c42:	ldr	r5, [r0, #16]
    3c44:	bl	3a98 <FatFile::read(void*, unsigned int)>
    3c48:	cmp	r0, #1
  int c = read();
  m_curPosition = saveCurPosition;
    3c4a:	str	r6, [r4, #20]
    3c4c:	ite	eq
    3c4e:	ldrbeq.w	r0, [sp, #7]
    3c52:	movne.w	r0, #4294967295
  m_curCluster = saveCurCluster;
    3c56:	str	r5, [r4, #16]
  return c;
}
    3c58:	add	sp, #8
    3c5a:	pop	{r4, r5, r6, pc}

00003c5c <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3c5c:	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    3c5e:	push	{r4, r5, lr}
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3c60:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    3c64:	sub	sp, #12
    3c66:	mov	r4, r0
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    3c68:	clz	r2, r5
    3c6c:	lsrs	r2, r2, #5
    3c6e:	cmp	r2, r1
    3c70:	bcs.n	3c82 <FatFile::readDirCache(bool)+0x26>
      }
      goto fail;
    }
    m_curPosition += FS_DIR_SIZE - 1;
  } else {
    m_curPosition += FS_DIR_SIZE;
    3c72:	adds	r3, #32
    3c74:	str	r3, [r0, #20]
      CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  //----------------------------------------------------------------------------
  /** Cobstructor. */
  FsCache() { init(nullptr); }
  /** \return Cache buffer address. */
  uint8_t* cacheBuffer() { return m_buffer; }
    3c76:	ldr	r0, [r4, #8]
    3c78:	adds	r0, #52	; 0x34
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    3c7a:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    3c7e:	add	sp, #12
    3c80:	pop	{r4, r5, pc}
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    3c82:	movs	r2, #1
    3c84:	add.w	r1, sp, #7
    3c88:	bl	3a98 <FatFile::read(void*, unsigned int)>
    3c8c:	sxtb	r0, r0
    if (n != 1) {
    3c8e:	cmp	r0, #1
    3c90:	bne.n	3c9a <FatFile::readDirCache(bool)+0x3e>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += FS_DIR_SIZE - 1;
    3c92:	ldr	r3, [r4, #20]
    3c94:	adds	r3, #31
    3c96:	str	r3, [r4, #20]
    3c98:	b.n	3c76 <FatFile::readDirCache(bool)+0x1a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    3c9a:	movs	r0, #0
    3c9c:	b.n	3c7e <FatFile::readDirCache(bool)+0x22>
    3c9e:	nop

00003ca0 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    3ca0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ca4:	ldrb	r3, [r0, #0]
    3ca6:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3ca8:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    3caa:	cbz	r3, 3cda <FatFile::seekSet(unsigned long)+0x3a>
    3cac:	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3cae:	ldr	r1, [r0, #20]
    3cb0:	cmp	r1, r5
    3cb2:	beq.n	3d0e <FatFile::seekSet(unsigned long)+0x6e>
    return true;
  }
  if (pos == 0) {
    3cb4:	cbnz	r5, 3cc8 <FatFile::seekSet(unsigned long)+0x28>
    3cb6:	ldrb	r3, [r0, #2]
    // set position to start of file
    m_curCluster = 0;
    3cb8:	str	r5, [r0, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3cba:	bic.w	r3, r3, #32
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    3cbe:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;
    3cc0:	movs	r0, #1
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    3cc2:	strb	r3, [r4, #2]
  return true;
    3cc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    3cc8:	lsls	r0, r3, #28
    3cca:	bmi.n	3ce2 <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    3ccc:	lsls	r2, r3, #25
    3cce:	bpl.n	3ce8 <FatFile::seekSet(unsigned long)+0x48>
    3cd0:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
    3cd2:	ldrh	r3, [r3, #8]
    3cd4:	cmp.w	r5, r3, lsl #5
    3cd8:	bls.n	3d3c <FatFile::seekSet(unsigned long)+0x9c>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    3cda:	str	r7, [r4, #16]
  return false;
    3cdc:	movs	r0, #0
    3cde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    3ce2:	ldr	r2, [r4, #28]
    3ce4:	cmp	r5, r2
    3ce6:	bhi.n	3cda <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    3ce8:	ldr.w	lr, [r4, #8]
    3cec:	subs	r6, r5, #1
    3cee:	ldrb	r2, [r4, #2]
    3cf0:	ldrb.w	r0, [lr, #6]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    3cf4:	tst.w	r2, #64	; 0x40
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    3cf8:	add.w	r0, r0, #9
    3cfc:	uxtb	r0, r0
    3cfe:	lsr.w	r6, r6, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    3d02:	beq.n	3d14 <FatFile::seekSet(unsigned long)+0x74>
    m_curCluster = m_firstCluster + nNew;
    3d04:	ldr	r1, [r4, #32]
    goto done;
    3d06:	mov	r3, r2
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    3d08:	add	r6, r1
    3d0a:	str	r6, [r4, #16]
    goto done;
    3d0c:	b.n	3cba <FatFile::seekSet(unsigned long)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    3d0e:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    3d10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    3d14:	subs	r2, r1, #1
    3d16:	lsr.w	r0, r2, r0

  if (nNew < nCur || m_curPosition == 0) {
    3d1a:	cmp	r6, r0
    3d1c:	bcc.n	3d40 <FatFile::seekSet(unsigned long)+0xa0>
    3d1e:	cbz	r1, 3d40 <FatFile::seekSet(unsigned long)+0xa0>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    3d20:	subs	r6, r6, r0
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3d22:	add.w	r8, r4, #16
    3d26:	b.n	3d36 <FatFile::seekSet(unsigned long)+0x96>
    3d28:	ldr	r1, [r4, #16]
    3d2a:	subs	r6, #1
    3d2c:	ldr	r0, [r4, #8]
    3d2e:	bl	4034 <FatPartition::fatGet(unsigned long, unsigned long*)>
    3d32:	cmp	r0, #0
    3d34:	ble.n	3cda <FatFile::seekSet(unsigned long)+0x3a>
    3d36:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    3d38:	cmp	r6, #0
    3d3a:	bne.n	3d28 <FatFile::seekSet(unsigned long)+0x88>
    3d3c:	ldrb	r3, [r4, #2]
    3d3e:	b.n	3cba <FatFile::seekSet(unsigned long)+0x1a>
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());

  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    3d40:	lsls	r3, r3, #24
    3d42:	ite	mi
    3d44:	ldrmi.w	r3, [lr, #32]
    3d48:	ldrpl	r3, [r4, #32]
    3d4a:	str	r3, [r4, #16]
    3d4c:	b.n	3d22 <FatFile::seekSet(unsigned long)+0x82>
    3d4e:	nop

00003d50 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    3d50:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d54:	mov	r5, r1
    3d56:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    3d58:	movs	r1, #0
    3d5a:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    3d5c:	mov	r4, r0
    3d5e:	mov	r7, r3
    3d60:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    3d64:	bl	980c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    3d68:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    3d6a:	and.w	r3, r8, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    3d6e:	ldr	r1, [r5, #32]
    3d70:	add.w	r2, r0, #52	; 0x34
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    3d74:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    3d76:	str	r1, [r4, #12]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    3d78:	add.w	r2, r2, r3, lsl #5
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
    3d7c:	strh.w	r8, [r4, #4]
    3d80:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFatFileOrSubdir(dir)) {
    3d82:	lsls	r5, r1, #28
    3d84:	bmi.n	3daa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
    3d86:	and.w	r1, r1, #55	; 0x37
    3d8a:	strb	r1, [r4, #0]
  if (isFatFile(dir)) {
    3d8c:	ldrb	r3, [r2, #11]
    3d8e:	tst.w	r3, #24
    3d92:	bne.n	3d9a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x4a>
    m_attributes |= FILE_ATTR_FILE;
    3d94:	orr.w	r1, r1, #8
    3d98:	strb	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    3d9a:	and.w	r3, r7, #3
  }
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
  if (isFatFile(dir)) {
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    3d9e:	strb	r6, [r4, #3]

  switch (oflag & O_ACCMODE) {
    3da0:	cmp	r3, #1
    3da2:	beq.n	3db6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    3da4:	cmp	r3, #2
    3da6:	beq.n	3e06 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb6>
    3da8:	cbz	r3, 3dfc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    3daa:	movs	r3, #0
    3dac:	strb	r3, [r4, #0]
  m_flags = 0;
  return false;
    3dae:	mov	r0, r3
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    3db0:	strb	r3, [r4, #2]
  return false;
    3db2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    3db6:	movs	r3, #2
    3db8:	strb	r3, [r4, #2]
    3dba:	ldrb	r1, [r4, #0]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    3dbc:	tst.w	r1, #17
    3dc0:	bne.n	3daa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_attributes |= FS_ATTRIB_ARCHIVE;
    3dc2:	orr.w	r5, r1, #32
    3dc6:	and.w	lr, r7, #1024	; 0x400
    3dca:	sxtb	r1, r3
    3dcc:	strb	r5, [r4, #0]
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3dce:	and.w	r3, r7, #8
    3dd2:	orrs	r3, r1
    3dd4:	uxtb	r3, r3
    3dd6:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
                 getLe16(dir->firstClusterLow);
    3dd8:	ldrh	r5, [r2, #20]
    3dda:	ldrh	r1, [r2, #26]
    }
    m_attributes |= FS_ATTRIB_ARCHIVE;
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    3ddc:	ldr	r6, [r0, #44]	; 0x2c

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
                 getLe16(dir->firstClusterLow);
    3dde:	orr.w	r1, r1, r5, lsl #16
    }
    m_attributes |= FS_ATTRIB_ARCHIVE;
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    3de2:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
                 getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    3de4:	cmp.w	lr, #0
    3de8:	beq.n	3e0c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3dea:	cbnz	r1, 3e22 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3dec:	orn	r3, r3, #127	; 0x7f
    3df0:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3df2:	lsls	r3, r7, #17
    3df4:	bmi.n	3e14 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    3df6:	movs	r0, #1
    3df8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    3dfc:	ands.w	lr, r7, #1024	; 0x400
    3e00:	bne.n	3daa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    3e02:	movs	r1, #1
    3e04:	b.n	3dce <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x7e>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    3e06:	movs	r3, #3
    3e08:	strb	r3, [r4, #2]
      break;
    3e0a:	b.n	3dba <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
      goto fail;
    }
    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    3e0c:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    3e0e:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    3e10:	str	r3, [r4, #28]
    3e12:	b.n	3df2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa2>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    3e14:	ldr	r1, [r4, #28]
    3e16:	mov	r0, r4
    3e18:	bl	3ca0 <FatFile::seekSet(unsigned long)>
    3e1c:	cmp	r0, #0
    3e1e:	bne.n	3df6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa6>
    3e20:	b.n	3daa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
                 getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3e22:	bl	4194 <FatPartition::freeChain(unsigned long)>
    3e26:	cmp	r0, #0
    3e28:	beq.n	3daa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    3e2a:	ldrb	r3, [r4, #2]
    3e2c:	b.n	3dec <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9c>
    3e2e:	nop

00003e30 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    3e30:	ldrb	r3, [r0, #0]
    3e32:	cbz	r3, 3e38 <FatFile::sync()+0x8>
    3e34:	b.w	36c8 <FatFile::sync() [clone .part.42]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    3e38:	movs	r0, #1
    3e3a:	bx	lr

00003e3c <FatFile::write(void const*, unsigned int)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    3e3c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e40:	ldrb	r3, [r0, #2]
    3e42:	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    3e44:	lsls	r4, r3, #30
    3e46:	bpl.n	3f24 <FatFile::write(void const*, unsigned int)+0xe8>
    3e48:	mov	r8, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    3e4a:	lsls	r2, r3, #28
    3e4c:	mov	r7, r1
    3e4e:	bmi.n	3f1a <FatFile::write(void const*, unsigned int)+0xde>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    3e50:	ldr	r2, [r5, #20]
    3e52:	mvns	r3, r2
    3e54:	cmp	r8, r3
    3e56:	bhi.n	3f24 <FatFile::write(void const*, unsigned int)+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    3e58:	cmp.w	r8, #0
    3e5c:	beq.w	4000 <FatFile::write(void const*, unsigned int)+0x1c4>
    3e60:	mov	r6, r8
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    3e62:	mov.w	sl, #0
    m_sector = 0XFFFFFFFF;
    3e66:	mov.w	r9, #4294967295
    3e6a:	b.n	3ee6 <FatFile::write(void const*, unsigned int)+0xaa>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    3e6c:	cmp.w	fp, #0
    3e70:	bne.n	3ef4 <FatFile::write(void const*, unsigned int)+0xb8>
      // start of new cluster
      if (m_curCluster != 0) {
    3e72:	ldr	r1, [r5, #16]
    3e74:	cmp	r1, #0
    3e76:	beq.n	3f76 <FatFile::write(void const*, unsigned int)+0x13a>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    3e78:	ldrb	r3, [r5, #2]
    3e7a:	lsls	r3, r3, #25
    3e7c:	bpl.w	3fb6 <FatFile::write(void const*, unsigned int)+0x17a>
    3e80:	ldr	r3, [r5, #28]
    3e82:	cmp	r3, r2
    3e84:	bls.w	3fb6 <FatFile::write(void const*, unsigned int)+0x17a>
          m_curCluster++;
    3e88:	adds	r3, r1, #1
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3e8a:	subs	r1, #1
      // start of new cluster
      if (m_curCluster != 0) {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
    3e8c:	str	r3, [r5, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3e8e:	ldrb.w	lr, [r0, #6]
    3e92:	ldr	r3, [r0, #20]
    3e94:	lsl.w	r1, r1, lr
    3e98:	add	r3, r4
    3e9a:	add	r1, r3

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3e9c:	cmp.w	r6, #512	; 0x200
    3ea0:	bcs.n	3f32 <FatFile::write(void const*, unsigned int)+0xf6>
    3ea2:	cmp.w	r6, #512	; 0x200
    3ea6:	mov	r4, r6
    3ea8:	it	cs
    3eaa:	movcs.w	r4, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    3eae:	ldr	r3, [r5, #28]
    3eb0:	cmp	r3, r2
    3eb2:	bls.n	3eba <FatFile::write(void const*, unsigned int)+0x7e>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    3eb4:	ldrb	r3, [r5, #2]
    3eb6:	lsls	r3, r3, #26
    3eb8:	bpl.n	3f16 <FatFile::write(void const*, unsigned int)+0xda>
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    3eba:	movs	r2, #5
    3ebc:	adds	r0, #36	; 0x24
    3ebe:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->dataCachePrepare(sector, cacheOption);
      if (!pc) {
    3ec2:	cbz	r0, 3f24 <FatFile::write(void const*, unsigned int)+0xe8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc + sectorOffset;
      memcpy(dst, src, n);
    3ec4:	add	r0, fp
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3ec6:	add	fp, r4
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc + sectorOffset;
      memcpy(dst, src, n);
    3ec8:	mov	r2, r4
    3eca:	mov	r1, r7
    3ecc:	bl	69a8 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3ed0:	cmp.w	fp, #512	; 0x200
    3ed4:	beq.w	3ff0 <FatFile::write(void const*, unsigned int)+0x1b4>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    3ed8:	ldr	r2, [r5, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    3eda:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    3edc:	add	r7, r4
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    3ede:	add	r2, r4
    3ee0:	str	r2, [r5, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    3ee2:	beq.w	4000 <FatFile::write(void const*, unsigned int)+0x1c4>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    3ee6:	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    3ee8:	ubfx	fp, r2, #0, #9
  void cacheDirty() { m_cache.dirty(); }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    3eec:	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    3eee:	ands.w	r4, r4, r2, lsr #9
    3ef2:	beq.n	3e6c <FatFile::write(void const*, unsigned int)+0x30>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3ef4:	ldr	r3, [r5, #16]
    3ef6:	ldrb.w	lr, [r0, #6]
    3efa:	subs	r1, r3, #2
    3efc:	ldr	r3, [r0, #20]
    3efe:	lsl.w	lr, r1, lr
    3f02:	adds	r1, r4, r3
    3f04:	add	r1, lr

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3f06:	cmp.w	fp, #0
    3f0a:	beq.n	3e9c <FatFile::write(void const*, unsigned int)+0x60>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    3f0c:	rsb	r4, fp, #512	; 0x200
    3f10:	cmp	r4, r6
    3f12:	it	cs
    3f14:	movcs	r4, r6
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3f16:	movs	r2, #1
    3f18:	b.n	3ebc <FatFile::write(void const*, unsigned int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    3f1a:	ldr	r1, [r0, #28]
    3f1c:	bl	3ca0 <FatFile::seekSet(unsigned long)>
    3f20:	cmp	r0, #0
    3f22:	bne.n	3e50 <FatFile::write(void const*, unsigned int)+0x14>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    3f24:	ldrb	r3, [r5, #1]
  return 0;
    3f26:	movs	r0, #0
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    3f28:	orr.w	r3, r3, #1
    3f2c:	strb	r3, [r5, #1]
  return 0;
    3f2e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
    3f32:	cmp.w	r6, #1024	; 0x400
    3f36:	bcc.n	3f9c <FatFile::write(void const*, unsigned int)+0x160>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3f38:	ldrb.w	lr, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    3f3c:	lsrs	r3, r6, #9
    3f3e:	ldr	r2, [r0, #44]	; 0x2c
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3f40:	rsb	r4, r4, lr
    3f44:	cmp	r3, r4
    3f46:	it	cs
    3f48:	movcs	r3, r4
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    3f4a:	cmp	r2, r1
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    3f4c:	mov.w	r4, r3, lsl #9
    3f50:	bcc.n	3f62 <FatFile::write(void const*, unsigned int)+0x126>
    3f52:	add.w	lr, r3, r1
    3f56:	cmp	r2, lr
    3f58:	bcs.n	3f62 <FatFile::write(void const*, unsigned int)+0x126>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    3f5a:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    3f5e:	str.w	r9, [r0, #44]	; 0x2c
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
    if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    3f62:	ldr	r0, [r0, #40]	; 0x28
    3f64:	mov	r2, r7
    3f66:	ldr.w	lr, [r0]
    3f6a:	ldr.w	fp, [lr, #36]	; 0x24
    3f6e:	blx	fp
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    3f70:	cmp	r0, #0
    3f72:	bne.n	3ed8 <FatFile::write(void const*, unsigned int)+0x9c>
    3f74:	b.n	3f24 <FatFile::write(void const*, unsigned int)+0xe8>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    3f76:	ldr	r1, [r5, #32]
    3f78:	cbz	r1, 3fd4 <FatFile::write(void const*, unsigned int)+0x198>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    3f7a:	str	r1, [r5, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3f7c:	subs	r1, #2
    3f7e:	ldrb	r2, [r0, #6]
    3f80:	ldr	r3, [r0, #20]

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3f82:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    3f86:	lsl.w	r1, r1, r2
    3f8a:	add	r1, r3

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3f8c:	bcs.n	3f32 <FatFile::write(void const*, unsigned int)+0xf6>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    3f8e:	rsb	r4, fp, #512	; 0x200
    3f92:	ldr	r2, [r5, #20]
    3f94:	cmp	r4, r6
    3f96:	it	cs
    3f98:	movcs	r4, r6
    3f9a:	b.n	3eae <FatFile::write(void const*, unsigned int)+0x72>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    3f9c:	ldr	r3, [r0, #44]	; 0x2c
    3f9e:	cmp	r3, r1
    3fa0:	beq.n	3fe6 <FatFile::write(void const*, unsigned int)+0x1aa>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    3fa2:	ldr	r0, [r0, #40]	; 0x28
    3fa4:	mov	r2, r7
    3fa6:	ldr	r3, [r0, #0]
    3fa8:	ldr	r3, [r3, #32]
    3faa:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    3fac:	cmp	r0, #0
    3fae:	beq.n	3f24 <FatFile::write(void const*, unsigned int)+0xe8>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    3fb0:	mov.w	r4, #512	; 0x200
    3fb4:	b.n	3ed8 <FatFile::write(void const*, unsigned int)+0x9c>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3fb6:	add.w	r2, r5, #16
    3fba:	bl	4034 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3fbe:	cmp	r0, #0
    3fc0:	blt.n	3f24 <FatFile::write(void const*, unsigned int)+0xe8>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    3fc2:	bne.n	3fce <FatFile::write(void const*, unsigned int)+0x192>
          // add cluster if at end of chain
          if (!addCluster()) {
    3fc4:	mov	r0, r5
    3fc6:	bl	35f8 <FatFile::addCluster()>
    3fca:	cmp	r0, #0
    3fcc:	beq.n	3f24 <FatFile::write(void const*, unsigned int)+0xe8>
    3fce:	ldr	r1, [r5, #16]
    3fd0:	ldr	r0, [r5, #8]
    3fd2:	b.n	3f7c <FatFile::write(void const*, unsigned int)+0x140>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    3fd4:	mov	r0, r5
    3fd6:	bl	35f8 <FatFile::addCluster()>
    3fda:	cmp	r0, #0
    3fdc:	beq.n	3f24 <FatFile::write(void const*, unsigned int)+0xe8>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    3fde:	ldr	r1, [r5, #16]
    3fe0:	ldr	r0, [r5, #8]
    3fe2:	str	r1, [r5, #32]
    3fe4:	b.n	3f7c <FatFile::write(void const*, unsigned int)+0x140>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    3fe6:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    3fea:	str.w	r9, [r0, #44]	; 0x2c
    3fee:	b.n	3fa2 <FatFile::write(void const*, unsigned int)+0x166>
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
  }
  bool cacheSyncData() { return m_cache.sync(); }
    3ff0:	ldr	r0, [r5, #8]
    3ff2:	adds	r0, #36	; 0x24
    3ff4:	bl	1ff4 <FsCache::sync()>
      }
      uint8_t* dst = pc + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    3ff8:	cmp	r0, #0
    3ffa:	bne.w	3ed8 <FatFile::write(void const*, unsigned int)+0x9c>
    3ffe:	b.n	3f24 <FatFile::write(void const*, unsigned int)+0xe8>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    4000:	ldr	r3, [r5, #28]
    4002:	cmp	r3, r2
    4004:	bcc.n	4020 <FatFile::write(void const*, unsigned int)+0x1e4>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    4006:	ldr	r3, [pc, #40]	; (4030 <FatFile::write(void const*, unsigned int)+0x1f4>)
    4008:	ldr	r3, [r3, #0]
    400a:	cbz	r3, 401a <FatFile::write(void const*, unsigned int)+0x1de>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    400c:	ldrb	r3, [r5, #2]
    400e:	mov	r0, r8
    4010:	orn	r3, r3, #127	; 0x7f
    4014:	strb	r3, [r5, #2]
    4016:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    401a:	mov	r0, r8
    401c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4020:	ldrb	r3, [r5, #2]
    4022:	mov	r0, r8
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    4024:	str	r2, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4026:	orn	r3, r3, #127	; 0x7f
    402a:	strb	r3, [r5, #2]
    402c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4030:	.word	0x20021b98

00004034 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    4034:	cmp	r1, #1
    4036:	bls.n	40a0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x6c>
    4038:	ldr	r3, [r0, #28]
    403a:	cmp	r1, r3
    403c:	bhi.n	40a0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x6c>
fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    403e:	push	{r4, r5, r6, lr}
    4040:	ldrb	r3, [r0, #7]
    4042:	mov	r6, r2
    4044:	mov	r5, r0
    4046:	mov	r4, r1
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    4048:	cmp	r3, #32
    404a:	beq.n	4082 <FatPartition::fatGet(unsigned long, unsigned long*)+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    next = getLe32(pc + offset);
  } else if (fatType() == 16) {
    404c:	cmp	r3, #16
    404e:	bne.n	407c <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
  FsCache* dataCache() { return &m_cache; }
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
    4050:	ldr	r3, [r0, #24]
    4052:	ubfx	r1, r1, #8, #8
    4056:	movs	r2, #2
    4058:	add.w	r0, r0, #564	; 0x234
    405c:	add	r1, r3
    405e:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    4062:	cbz	r0, 407c <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//------------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4064:	lsls	r1, r4, #1
    4066:	and.w	r1, r1, #510	; 0x1fe
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 1) & m_sectorMask;
    next = getLe16(pc + offset);
    406a:	ldrh	r3, [r0, r1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    406c:	ldr	r2, [r5, #28]
    406e:	cmp	r3, r2
    4070:	bhi.n	4078 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
    return 0;
  }
  *value = next;
    4072:	str	r3, [r6, #0]
  return 1;
    4074:	movs	r0, #1
    4076:	pop	{r4, r5, r6, pc}
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    4078:	movs	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    407a:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    407c:	mov.w	r0, #4294967295
    4080:	pop	{r4, r5, r6, pc}
    4082:	ldr	r1, [r0, #24]
    4084:	movs	r2, #2
    4086:	add.w	r0, r0, #564	; 0x234
    408a:	add.w	r1, r1, r4, lsr #7
    408e:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    4092:	cmp	r0, #0
    4094:	beq.n	407c <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4096:	lsls	r1, r4, #2
    4098:	and.w	r1, r1, #508	; 0x1fc
    409c:	ldr	r3, [r0, r1]
    409e:	b.n	406c <FatPartition::fatGet(unsigned long, unsigned long*)+0x38>
  }
  *value = next;
  return 1;

fail:
  return -1;
    40a0:	mov.w	r0, #4294967295
}
    40a4:	bx	lr
    40a6:	nop

000040a8 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    40a8:	cmp	r1, #1
    40aa:	bls.n	40ea <FatPartition::fatPut(unsigned long, unsigned long)+0x42>
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    40ac:	push	{r3, r4, r5, lr}
  uint32_t sector;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    40ae:	ldr	r3, [r0, #28]
    40b0:	cmp	r1, r3
    40b2:	bhi.n	40c2 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    40b4:	ldrb	r3, [r0, #7]
    40b6:	mov	r5, r2
    40b8:	mov	r4, r1
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    40ba:	cmp	r3, #32
    40bc:	beq.n	40ee <FatPartition::fatPut(unsigned long, unsigned long)+0x46>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    setLe32(pc + offset, value);
    return true;
  }

  if (fatType() == 16) {
    40be:	cmp	r3, #16
    40c0:	beq.n	40c6 <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    40c2:	movs	r0, #0
    40c4:	pop	{r3, r4, r5, pc}
    40c6:	ldr	r3, [r0, #24]
    40c8:	ubfx	r1, r1, #8, #8
    40cc:	add.w	r0, r0, #564	; 0x234
    40d0:	movs	r2, #3
    40d2:	add	r1, r3
    40d4:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    40d8:	mov	r3, r0
    40da:	cmp	r0, #0
    40dc:	beq.n	40c2 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    40de:	lsls	r1, r4, #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 1) & m_sectorMask;
    setLe16(pc + offset, value);
    return true;
    40e0:	movs	r0, #1
    40e2:	and.w	r1, r1, #510	; 0x1fe
    40e6:	strh	r5, [r3, r1]
    goto fail;
  }

fail:
  return false;
}
    40e8:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    40ea:	movs	r0, #0
}
    40ec:	bx	lr
    40ee:	ldr	r1, [r0, #24]
    40f0:	movs	r2, #3
    40f2:	add.w	r0, r0, #564	; 0x234
    40f6:	add.w	r1, r1, r4, lsr #7
    40fa:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    40fe:	mov	r3, r0
    4100:	cmp	r0, #0
    4102:	beq.n	40c2 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4104:	lsls	r1, r4, #2
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    setLe32(pc + offset, value);
    return true;
    4106:	movs	r0, #1
    4108:	and.w	r1, r1, #508	; 0x1fc
    410c:	str	r5, [r3, r1]
    410e:	pop	{r3, r4, r5, pc}

00004110 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
#include <string.h>
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    4110:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    4114:	ldr	r4, [r0, #12]
#include <string.h>
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    4116:	sub	sp, #8
    4118:	mov	r5, r0
    411a:	mov	r7, r1
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    411c:	cmp	r4, r1
#include <string.h>
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    411e:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    4120:	bcs.n	418e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7e>
    4122:	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    4124:	movs	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    4126:	adds	r4, #1
    4128:	ldr	r3, [r5, #28]
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    412a:	add	r2, sp, #4
    412c:	mov	r0, r5
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    412e:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    4130:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    4132:	bls.n	4146 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x36>
      if (setStart) {
    4134:	cbnz	r6, 4184 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    4136:	ldr	r4, [r5, #12]
      setStart = true;
    4138:	movs	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    413a:	add	r2, sp, #4
    413c:	mov	r0, r5
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    413e:	adds	r4, #1
    if (find > m_lastCluster) {
    4140:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    4142:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    4144:	bhi.n	4134 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    4146:	cmp	r7, r4
    4148:	beq.n	4184 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    414a:	bl	4034 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    414e:	cmp	r0, #0
    4150:	blt.n	4184 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    4152:	beq.n	4126 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    4154:	ldr	r3, [sp, #4]
    4156:	cmp	r3, #0
    4158:	bne.n	4126 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
      break;
    }
  }
  if (setStart) {
    415a:	cbz	r6, 415e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4e>
    m_allocSearchStart = find;
    415c:	str	r4, [r5, #12]
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    415e:	mvn.w	r2, #4026531840	; 0xf0000000
    4162:	mov	r1, r4
    4164:	mov	r0, r5
    4166:	bl	40a8 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    416a:	mov	r6, r0
    416c:	cbz	r0, 4184 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    416e:	cbnz	r7, 4176 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    4170:	str.w	r4, [r8]
  return true;
    4174:	b.n	4186 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    4176:	mov	r1, r7
    4178:	mov	r0, r5
    417a:	mov	r2, r4
    417c:	bl	40a8 <FatPartition::fatPut(unsigned long, unsigned long)>
    4180:	cmp	r0, #0
    4182:	bne.n	4170 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    4184:	movs	r6, #0
}
    4186:	mov	r0, r6
    4188:	add	sp, #8
    418a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
  } else {
    find = m_allocSearchStart;
    setStart = true;
    418e:	movs	r6, #1
    4190:	b.n	4126 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    4192:	nop

00004194 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    4194:	push	{r4, r5, r6, lr}
    4196:	mov	r5, r0
    4198:	sub	sp, #8
    419a:	mov	r4, r1
    419c:	b.n	41b2 <FatPartition::freeChain(unsigned long)+0x1e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    419e:	bl	40a8 <FatPartition::fatPut(unsigned long, unsigned long)>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    41a2:	subs	r2, r4, #1
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    41a4:	cbz	r0, 41c8 <FatPartition::freeChain(unsigned long)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    41a6:	ldr	r3, [r5, #12]
    41a8:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    }
    cluster = next;
    41aa:	ldr	r4, [sp, #4]
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    41ac:	it	cc
    41ae:	strcc	r2, [r5, #12]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    41b0:	cbz	r6, 41ca <FatPartition::freeChain(unsigned long)+0x36>
    fg = fatGet(cluster, &next);
    41b2:	add	r2, sp, #4
    41b4:	mov	r1, r4
    41b6:	mov	r0, r5
    41b8:	bl	4034 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    41bc:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    41be:	mov	r1, r4
    41c0:	mov.w	r2, #0
    41c4:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    41c6:	bge.n	419e <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

fail:
  return false;
    41c8:	movs	r0, #0
}
    41ca:	add	sp, #8
    41cc:	pop	{r4, r5, r6, pc}
    41ce:	nop

000041d0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    41d0:	push	{r3, r4, r5, r6, r7, lr}
    41d2:	mov	r4, r0
    41d4:	mov.w	r6, #4294967295
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    41d8:	movs	r0, #0
  m_allocSearchStart = 1;
    41da:	mov.w	lr, #1
}
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
  uint32_t countOfClusters;
  uint32_t totalSectors;
  m_blockDev = dev;
    41de:	str	r1, [r4, #0]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(FsBlockDevice* blockDev) {
    m_blockDev = blockDev;
    41e0:	str	r1, [r4, #40]	; 0x28
    41e2:	str.w	r1, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    41e6:	str.w	lr, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    41ea:	strb	r0, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    41ec:	strb.w	r0, [r4, #36]	; 0x24
    41f0:	strb.w	r0, [r4, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
    41f4:	str	r6, [r4, #44]	; 0x2c
    41f6:	str.w	r6, [r4, #572]	; 0x23c
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    41fa:	cbz	r2, 4236 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x66>
    if (part > 4) {
    41fc:	cmp	r2, #4
    41fe:	mov	r7, r2
    4200:	bls.n	4206 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    4202:	movs	r0, #0
    4204:	pop	{r3, r4, r5, r6, r7, pc}
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    4206:	add.w	r6, r4, #36	; 0x24
    420a:	mov	r2, r0
    420c:	mov	r1, r0
    420e:	mov	r0, r6
    4210:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>(
        dataCachePrepare(0, FsCache::CACHE_FOR_READ));
    if (!mbr) {
    4214:	cmp	r0, #0
    4216:	beq.n	4202 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    MbrPart_t* mp = mbr->part + part - 1;
    4218:	mvn.w	r3, #4026531840	; 0xf0000000
    421c:	add.w	r0, r0, #446	; 0x1be
    4220:	add	r3, r7
    4222:	lsls	r3, r3, #4
    4224:	adds	r2, r0, r3
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    4226:	ldrb	r1, [r2, #4]
    4228:	cmp	r1, #0
    422a:	beq.n	4202 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x32>
    422c:	ldrb	r3, [r0, r3]
    422e:	lsls	r3, r3, #25
    4230:	bne.n	4202 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x32>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4232:	ldr	r5, [r2, #8]
    4234:	b.n	423c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x6c>
    4236:	mov	r5, r3
    4238:	add.w	r6, r4, #36	; 0x24
    423c:	mov	r0, r6
    423e:	movs	r2, #0
    4240:	mov	r1, r5
    4242:	bl	1f94 <FsCache::prepare(unsigned long, unsigned char)>
    }
    volStart = getLe32(mp->relativeSectors);
  }
  pbs = reinterpret_cast<pbs_t*>(
      dataCachePrepare(volStart, FsCache::CACHE_FOR_READ));
  if (!pbs) {
    4246:	cmp	r0, #0
    4248:	beq.n	4202 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    424a:	ldrb	r3, [r0, #16]
    424c:	cmp	r3, #2
    424e:	bne.n	4202 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x32>
    4250:	ldrh.w	r3, [r0, #11]
    4254:	cmp.w	r3, #512	; 0x200
    4258:	bne.n	4202 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    425a:	ldrb	r6, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    425c:	movs	r3, #0
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    425e:	subs	r2, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4260:	cmp	r6, #1
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    4262:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    4264:	strb	r3, [r4, #6]
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    4266:	strb	r2, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4268:	beq.n	428a <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xba>
    426a:	movs	r3, #1
    426c:	mov	r1, r3
    426e:	b.n	4272 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xa2>
    4270:	mov	r3, r2
    4272:	lsls	r1, r1, #1
    4274:	adds	r2, r3, #1
    4276:	uxtb	r1, r1
    4278:	uxtb	r2, r2
    427a:	cmp	r6, r1
    427c:	beq.n	4288 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb8>
    if (tmp == 0) {
    427e:	cmp	r2, #9
    4280:	bne.n	4270 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xa0>
    4282:	strb	r3, [r4, #6]
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    4284:	movs	r0, #0
    4286:	pop	{r3, r4, r5, r6, r7, pc}
    4288:	strb	r3, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    428a:	ldrh	r7, [r0, #22]
    428c:	str	r7, [r4, #16]
  if (m_sectorsPerFat == 0) {
    428e:	cbnz	r7, 4294 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xc4>
    4290:	ldr	r7, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    4292:	str	r7, [r4, #16]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//------------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4294:	ldrh.w	r6, [r0, #17]
  }
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    4298:	ldrh	r2, [r0, #14]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector =
      m_rootDirStart +
    429a:	lsls	r1, r6, #5
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    429c:	strh	r6, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    429e:	add	r2, r5

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector =
      m_rootDirStart +
    42a0:	addw	r1, r1, #511	; 0x1ff

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    42a4:	add.w	r6, r2, r7, lsl #1
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    42a8:	str	r2, [r4, #24]
      m_rootDirStart +
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
       m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    42aa:	ldrh.w	r2, [r0, #19]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector =
      m_rootDirStart +
    42ae:	add.w	r1, r6, r1, lsr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    42b2:	str	r6, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector =
      m_rootDirStart +
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
       m_bytesPerSector);
    42b4:	str	r1, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    42b6:	cbnz	r2, 42ba <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xea>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    42b8:	ldr	r2, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
    42ba:	subs	r5, r5, r1
  m_lastCluster = countOfClusters + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (countOfClusters < 4085) {
    42bc:	movw	r1, #4084	; 0xff4
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
    42c0:	add	r2, r5

  // divide by cluster size to get cluster count
  countOfClusters >>= m_sectorsPerClusterShift;
    42c2:	lsr.w	r3, r2, r3
  m_lastCluster = countOfClusters + 1;
    42c6:	adds	r2, r3, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (countOfClusters < 4085) {
    42c8:	cmp	r3, r1
  // total data sectors
  countOfClusters = totalSectors - (m_dataStartSector - volStart);

  // divide by cluster size to get cluster count
  countOfClusters >>= m_sectorsPerClusterShift;
  m_lastCluster = countOfClusters + 1;
    42ca:	str	r2, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (countOfClusters < 4085) {
    42cc:	bls.n	42e4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x114>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (countOfClusters < 65525) {
    42ce:	movw	r2, #65524	; 0xfff4
    42d2:	cmp	r3, r2
    42d4:	bhi.n	42ec <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x11c>
    m_fatType = 16;
    42d6:	movs	r3, #16
    42d8:	strb	r3, [r4, #7]
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
    42da:	str	r7, [r4, #48]	; 0x30
  }
  m_cache.setMirrorOffset(m_sectorsPerFat);
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;
    42dc:	movs	r0, #1
    42de:	str.w	r7, [r4, #576]	; 0x240
    42e2:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (countOfClusters < 4085) {
    m_fatType = 12;
    42e4:	movs	r3, #12
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    42e6:	movs	r0, #0

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (countOfClusters < 4085) {
    m_fatType = 12;
    42e8:	strb	r3, [r4, #7]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    42ea:	pop	{r3, r4, r5, r6, r7, pc}
    42ec:	ldr	r2, [r0, #44]	; 0x2c
    }
  } else if (countOfClusters < 65525) {
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    42ee:	movs	r3, #32
      goto fail;
    }
  } else if (countOfClusters < 65525) {
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    42f0:	str	r2, [r4, #32]
    m_fatType = 32;
    42f2:	strb	r3, [r4, #7]
    42f4:	b.n	42da <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x10a>
    42f6:	nop

000042f8 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char* path) {
    42f8:	push	{r4, r5, r6, lr}
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    42fa:	movs	r5, #0
    42fc:	sub	sp, #40	; 0x28
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() { return m_cwv; }
  FatFile* vwd() { return &m_vwd; }
    42fe:	addw	r4, r0, #1092	; 0x444
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    4302:	mov	r2, r1
    4304:	mov	r3, r5
    4306:	add	r0, sp, #4
    4308:	mov	r1, r4
    430a:	strb.w	r5, [sp, #4]
    430e:	strb.w	r5, [sp, #5]
    4312:	strb.w	r5, [sp, #6]
    4316:	bl	39b4 <FatFile::open(FatFile*, char const*, int)>
    431a:	mov	r6, r0
    431c:	cbz	r0, 4336 <FatVolume::chdir(char const*)+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    431e:	ldrb.w	r3, [sp, #4]
    4322:	ands.w	r3, r3, #208	; 0xd0
    4326:	beq.n	433c <FatVolume::chdir(char const*)+0x44>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    4328:	add	r5, sp, #4
    432a:	ldmia	r5!, {r0, r1, r2, r3}
    432c:	stmia	r4!, {r0, r1, r2, r3}
    432e:	ldmia	r5!, {r0, r1, r2, r3}
    4330:	ldr	r5, [r5, #0]
    4332:	stmia	r4!, {r0, r1, r2, r3}
    4334:	str	r5, [r4, #0]
  return true;

fail:
  return false;
}
    4336:	mov	r0, r6
    4338:	add	sp, #40	; 0x28
    433a:	pop	{r4, r5, r6, pc}
  }
  m_vwd = dir;
  return true;

fail:
  return false;
    433c:	mov	r6, r3
}
    433e:	mov	r0, r6
    4340:	add	sp, #40	; 0x28
    4342:	pop	{r4, r5, r6, pc}

00004344 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    4344:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    4348:	mov	r5, r0
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    434a:	sub	sp, #44	; 0x2c
    434c:	mov	fp, r2
    434e:	mov	r6, r0
    4350:	mov	sl, r1
    4352:	mov	r7, r3
  FatFile dir = *this;
    4354:	add	r4, sp, #4
    4356:	ldmia	r5!, {r0, r1, r2, r3}
    4358:	stmia	r4!, {r0, r1, r2, r3}
    435a:	ldmia	r5!, {r0, r1, r2, r3}
    435c:	ldr.w	lr, [r5]
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
    4360:	ldr.w	r5, [fp]
    4364:	stmia	r4!, {r0, r1, r2, r3}
    4366:	str.w	r5, [fp, #4]
    436a:	str.w	lr, [r4]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    436e:	cmp	r7, #0
    4370:	beq.n	43f6 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb2>
    4372:	mov	r9, r7
    4374:	mov.w	r8, #1
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    4378:	rsb	r1, r8, sl
    437c:	add	r0, sp, #4
    437e:	uxth	r1, r1
    4380:	lsls	r1, r1, #5
    4382:	bl	3ca0 <FatFile::seekSet(unsigned long)>
    4386:	cbz	r0, 43dc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x98>
    4388:	movs	r1, #0
    438a:	add	r0, sp, #4
    438c:	bl	3c5c <FatFile::readDirCache(bool)>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    if (!ldir) {
    4390:	mov	r7, r0
    4392:	cbz	r0, 43dc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x98>
    4394:	movs	r4, #0
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
    4396:	uxtb	r2, r4
    4398:	mov	r1, r7
    439a:	mov	r0, r6
    439c:	bl	3598 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    43a0:	ldr.w	r5, [fp, #4]
      if (fname->atEnd()) {
    43a4:	ldr.w	r3, [fp, #8]
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
        return false;
      }
#else   // USE_UTF8_LONG_NAMES
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    43a8:	uxtb	r2, r0
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
    43aa:	adds	r1, r5, #1
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
    43ac:	cmp	r5, r3
static bool isLower(char c) { return 'a' <= c && c <= 'z'; }
//------------------------------------------------------------------------------
static bool isUpper(char c) { return 'A' <= c && c <= 'Z'; }
//------------------------------------------------------------------------------
// A bit smaller than toupper in AVR 328.
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    43ae:	sub.w	lr, r2, #97	; 0x61
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
    43b2:	beq.n	43fa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb6>
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
        return false;
      }
#else   // USE_UTF8_LONG_NAMES
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    43b4:	cmp	r0, #127	; 0x7f
    43b6:	bhi.n	43dc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x98>
static bool isLower(char c) { return 'a' <= c && c <= 'z'; }
//------------------------------------------------------------------------------
static bool isUpper(char c) { return 'A' <= c && c <= 'Z'; }
//------------------------------------------------------------------------------
// A bit smaller than toupper in AVR 328.
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    43b8:	sub.w	r3, r2, #32
    43bc:	cmp.w	lr, #25
    43c0:	str.w	r1, [fp, #4]
    43c4:	it	ls
    43c6:	uxtbls	r2, r3
    43c8:	ldrb	r3, [r5, #0]
    43ca:	sub.w	r1, r3, #97	; 0x61
    43ce:	sub.w	r0, r3, #32
    43d2:	cmp	r1, #25
    43d4:	it	ls
    43d6:	uxtbls	r3, r0
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
        return false;
      }
#else   // USE_UTF8_LONG_NAMES
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    43d8:	cmp	r3, r2
    43da:	beq.n	43e4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa0>
        return false;
    43dc:	movs	r0, #0
  }
  return true;

fail:
  return false;
}
    43de:	add	sp, #44	; 0x2c
    43e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43e4:	adds	r4, #1
      goto fail;
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
    43e6:	cmp	r4, #13
    43e8:	bne.n	4396 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x52>
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
  FatFile dir = *this;
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    43ea:	add.w	r8, r8, #1
    43ee:	uxtb.w	r8, r8
    43f2:	cmp	r9, r8
    43f4:	bcs.n	4378 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x34>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    43f6:	movs	r0, #1
    43f8:	b.n	43de <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9a>
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
    43fa:	clz	r0, r0
    43fe:	lsrs	r0, r0, #5
  }
  return true;

fail:
  return false;
}
    4400:	add	sp, #44	; 0x2c
    4402:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4406:	nop

00004408 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    4408:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    440c:	mov	r7, r0

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    440e:	sub	sp, #44	; 0x2c
    4410:	mov	r4, r2
    4412:	mov	r8, r1
    4414:	mov	r6, r3
  FatFile dir = *this;
    4416:	add.w	lr, sp, #4
    441a:	add.w	r5, r2, #17
  DirFat_t* cacheDirEntry(uint8_t action);
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    441e:	mov.w	fp, #0
    4422:	ldmia	r7!, {r0, r1, r2, r3}
    4424:	stmia.w	lr!, {r0, r1, r2, r3}
    4428:	ldmia	r7!, {r0, r1, r2, r3}
    442a:	ldr.w	ip, [r7]
    442e:	add.w	r7, r4, #28
    4432:	stmia.w	lr!, {r0, r1, r2, r3}
    4436:	str.w	ip, [lr]
    443a:	mov.w	r3, fp, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    443e:	ldrb.w	r2, [r5, #1]!
    4442:	orr.w	fp, r3, fp, lsr #1
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    4446:	cmp	r5, r7
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    4448:	uxtab	fp, r2, fp
    444c:	uxtb.w	fp, fp
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    4450:	bne.n	443a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x32>
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
    4452:	ldr	r3, [r4, #0]
    4454:	str	r3, [r4, #4]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    4456:	cmp	r6, #0
    4458:	beq.n	44f8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf0>
    445a:	mov.w	sl, #0
    445e:	movs	r5, #1
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    4460:	orr.w	r9, r6, #64	; 0x40
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    4464:	mov	r7, sl
    4466:	rsb	r1, r5, r8
    446a:	add	r0, sp, #4
    446c:	uxth	r1, r1
    446e:	lsls	r1, r1, #5
    4470:	bl	3ca0 <FatFile::seekSet(unsigned long)>
    4474:	cmp	r0, #0
    4476:	beq.n	451c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    4478:	movs	r1, #0
    447a:	add	r0, sp, #4
    447c:	bl	3c5c <FatFile::readDirCache(bool)>
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    if (!ldir) {
    4480:	cmp	r0, #0
    4482:	beq.n	451c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    4484:	ldr.w	ip, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    4488:	cmp	r6, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    448a:	mov.w	r2, #15
    448e:	add.w	r1, r0, #4
    }
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    4492:	ldrb.w	r3, [ip, #36]	; 0x24
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    4496:	ite	ne
    4498:	movne	lr, r5
    449a:	moveq	lr, r9
    449c:	orr.w	r3, r3, #1
    44a0:	strb.w	r3, [ip, #36]	; 0x24
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    44a4:	movs	r3, #0
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    44a6:	strb	r7, [r0, #12]
    ldir->checksum = checksum;
    44a8:	strb.w	fp, [r0, #13]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    44ac:	strb.w	lr, [r0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    44b0:	strb	r2, [r0, #11]
    44b2:	ldr.w	lr, [r4, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    44b6:	strh	r7, [r0, #26]
    44b8:	b.n	44d2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xca>
 * \param[in] c The 16-bit character.
 */
static void putLfnChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    setLe16(ldir->unicode1 + 2 * i, c);
  } else if (i < 11) {
    44ba:	cmp	r3, #10
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    44bc:	add.w	r3, r3, #1
    44c0:	add.w	r1, r1, #2
    44c4:	uxtb	r3, r3
    44c6:	ite	ls
    44c8:	strhls.w	r2, [r1, #-2]
    44cc:	strhhi	r2, [r1, #0]
    44ce:	cmp	r3, #13
    44d0:	beq.n	44f0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    44d2:	ldr	r2, [r4, #4]
      uint16_t cp;
      if (fname->atEnd()) {
    44d4:	cmp	r2, lr
    44d6:	beq.n	4500 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    44d8:	adds	r0, r2, #1
    44da:	str	r0, [r4, #4]
    44dc:	ldrb	r2, [r2, #0]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c The 16-bit character.
 */
static void putLfnChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    44de:	cmp	r3, #4
    44e0:	bhi.n	44ba <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb2>
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    44e2:	adds	r3, #1
    44e4:	strh.w	r2, [r1, #-3]
    44e8:	adds	r1, #2
    44ea:	uxtb	r3, r3
    44ec:	cmp	r3, #13
    44ee:	bne.n	44d2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xca>
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    44f0:	adds	r5, #1
    44f2:	uxtb	r5, r5
    44f4:	cmp	r6, r5
    44f6:	bcs.n	4466 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5e>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    44f8:	movs	r0, #1

fail:
  return false;
}
    44fa:	add	sp, #44	; 0x2c
    44fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ldir->checksum = checksum;
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
    4500:	cmp.w	sl, #0
    4504:	beq.n	4514 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x10c>
    4506:	add.w	sl, sl, #1
    450a:	movw	r2, #65535	; 0xffff
    450e:	uxtb.w	sl, sl
    4512:	b.n	44de <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd6>
    4514:	mov	r2, sl
    4516:	mov.w	sl, #1
    451a:	b.n	44de <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd6>
    }
  }
  return true;

fail:
  return false;
    451c:	movs	r0, #0
}
    451e:	add	sp, #44	; 0x2c
    4520:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004524 <FatFile::makeSFN(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeSFN(FatLfn_t* fname) {
    4524:	mov	ip, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    4526:	movs	r0, #32
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    4528:	mov	r2, ip
    452a:	add.w	r1, ip, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::makeSFN(FatLfn_t* fname) {
    452e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    4532:	ldr.w	r3, [r2], #17
  uint8_t lc = 0;
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
    4536:	ldr.w	r5, [ip, #8]
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    453a:	strb.w	r0, [r2, #1]!
  DBG_HALT_IF(end == ptr);
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    453e:	cmp	r2, r1
    4540:	bne.n	453a <FatFile::makeSFN(FatLfn_t*)+0x16>
    fname->sfn[k] = ' ';
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    4542:	ldrb	r2, [r3, #0]
    4544:	cmp	r2, #46	; 0x2e
    4546:	ite	ne
    4548:	movne	r0, #1
    454a:	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
    454c:	bne.n	4556 <FatFile::makeSFN(FatLfn_t*)+0x32>
    454e:	ldrb.w	r2, [r3, #1]!
    4552:	cmp	r2, #46	; 0x2e
    4554:	beq.n	454e <FatFile::makeSFN(FatLfn_t*)+0x2a>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
    4556:	subs	r1, r5, #1
    4558:	cmp	r1, r3
    455a:	bls.n	4578 <FatFile::makeSFN(FatLfn_t*)+0x54>
    455c:	ldrb.w	r2, [r5, #-1]
    4560:	cmp	r2, #46	; 0x2e
    4562:	beq.n	4578 <FatFile::makeSFN(FatLfn_t*)+0x54>
    4564:	subs	r2, r5, #2
    4566:	b.n	456e <FatFile::makeSFN(FatLfn_t*)+0x4a>
    4568:	ldrb	r4, [r1, #0]
    456a:	cmp	r4, #46	; 0x2e
    456c:	beq.n	4578 <FatFile::makeSFN(FatLfn_t*)+0x54>
    456e:	cmp	r3, r2
    4570:	mov	r1, r2
    4572:	add.w	r2, r2, #4294967295
    4576:	bne.n	4568 <FatFile::makeSFN(FatLfn_t*)+0x44>
  }

  for (; ptr < end; ptr++) {
    4578:	cmp	r5, r3
    457a:	mov.w	r8, #0
    457e:	bls.n	467c <FatFile::makeSFN(FatLfn_t*)+0x158>
    4580:	movs	r6, #7
    4582:	mov.w	lr, #8
    4586:	mov	r4, r8
    4588:	mov	r9, r8
    458a:	b.n	459e <FatFile::makeSFN(FatLfn_t*)+0x7a>
    c = *ptr;
    if (c == '.' && ptr == dot) {
    458c:	cmp	r1, r3
    458e:	bne.n	45a4 <FatFile::makeSFN(FatLfn_t*)+0x80>
      in = 10;                // Max index for full 8.3 name.
    4590:	movs	r6, #10
      i = 8;                  // Place for extension.
    4592:	movs	r4, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    4594:	mov.w	lr, #16
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
  }

  for (; ptr < end; ptr++) {
    4598:	adds	r3, #1
    459a:	cmp	r5, r3
    459c:	bls.n	45ea <FatFile::makeSFN(FatLfn_t*)+0xc6>
    c = *ptr;
    459e:	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    45a0:	cmp	r2, #46	; 0x2e
    45a2:	beq.n	458c <FatFile::makeSFN(FatLfn_t*)+0x68>
         c == '>' || c == '?' || c == '\\' || c == '|';
}
//------------------------------------------------------------------------------
// Reserved characters for FAT short 8.3 names.
inline bool sfnReservedChar(uint8_t c) {
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    45a4:	cmp	r2, #34	; 0x22
    45a6:	beq.n	45c0 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    45a8:	cmp	r2, #124	; 0x7c
    45aa:	beq.n	45c0 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    45ac:	sub.w	r7, r2, #91	; 0x5b
    45b0:	cmp	r7, #2
    45b2:	bls.n	45c0 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    return true;
  }
  //  *+,./ or :;<=>?
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    45b4:	sub.w	r7, r2, #42	; 0x2a
    45b8:	cmp	r7, #5
    45ba:	bhi.n	461e <FatFile::makeSFN(FatLfn_t*)+0xfa>
    45bc:	cmp	r2, #45	; 0x2d
    45be:	beq.n	461e <FatFile::makeSFN(FatLfn_t*)+0xfa>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    45c0:	and.w	r2, r2, #192	; 0xc0
    45c4:	cmp	r2, #128	; 0x80
    45c6:	beq.n	4644 <FatFile::makeSFN(FatLfn_t*)+0x120>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    45c8:	cmp	r4, r6
    45ca:	bhi.n	460a <FatFile::makeSFN(FatLfn_t*)+0xe6>
      in = 10;                // Max index for full 8.3 name.
      i = 8;                  // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
    45cc:	movs	r0, #0
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
          continue;
        }
        c = '_';
    45ce:	movs	r2, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if (isUpper(c)) {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    45d0:	adds	r7, r4, #1
    45d2:	add.w	sl, ip, r4
    45d6:	uxtb	r4, r7
    45d8:	strb.w	r2, [sl, #18]
      if (i < 7) {
    45dc:	cmp	r4, #6
    45de:	bhi.n	4598 <FatFile::makeSFN(FatLfn_t*)+0x74>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
  }

  for (; ptr < end; ptr++) {
    45e0:	adds	r3, #1
      } else if (isUpper(c)) {
        uc |= bit;
      }
      fname->sfn[i++] = c;
      if (i < 7) {
        fname->seqPos = i;
    45e2:	strb.w	r4, [ip, #16]
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
  }

  for (; ptr < end; ptr++) {
    45e6:	cmp	r5, r3
    45e8:	bhi.n	459e <FatFile::makeSFN(FatLfn_t*)+0x7a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    45ea:	ldrb.w	r3, [ip, #18]
    45ee:	cmp	r3, #32
    45f0:	beq.n	4676 <FatFile::makeSFN(FatLfn_t*)+0x152>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    45f2:	cbz	r0, 4650 <FatFile::makeSFN(FatLfn_t*)+0x12c>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
    45f4:	tst.w	r9, r8
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    45f8:	mov.w	r0, #1
  if (fname->sfn[0] == ' ') {
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
    45fc:	it	ne
    45fe:	movne.w	r8, #2
    4602:	strb.w	r8, [ip, #17]
    4606:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }
        c = '_';
      }
      if (i > in) {
        is83 = false;
        if (in == 10 || ptr > dot) {
    460a:	cmp	r6, #10
    460c:	beq.n	4648 <FatFile::makeSFN(FatLfn_t*)+0x124>
    460e:	cmp	r1, r3
    4610:	ite	cs
    4612:	movcs	r3, #0
    4614:	movcc	r3, #1
    4616:	cbnz	r3, 4648 <FatFile::makeSFN(FatLfn_t*)+0x124>
          continue;
        }
        c = '_';
      }
      if (i > in) {
        is83 = false;
    4618:	mov	r0, r3
        if (in == 10 || ptr > dot) {
          // Done - extension longer than three characters or no extension.
          break;
        }
        // Skip to dot.
        ptr = dot - 1;
    461a:	subs	r3, r1, #1
        continue;
    461c:	b.n	4598 <FatFile::makeSFN(FatLfn_t*)+0x74>
    461e:	sub.w	r7, r2, #58	; 0x3a
    4622:	cmp	r7, #5
    4624:	bls.n	45c0 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    if (c == '.' && ptr == dot) {
      in = 10;                // Max index for full 8.3 name.
      i = 8;                  // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (sfnReservedChar(c)) {
    4626:	sub.w	r7, r2, #33	; 0x21
    462a:	cmp	r7, #93	; 0x5d
    462c:	bhi.n	45c0 <FatFile::makeSFN(FatLfn_t*)+0x9c>
        if ((c & 0XC0) == 0X80) {
          continue;
        }
        c = '_';
      }
      if (i > in) {
    462e:	cmp	r4, r6
    4630:	bhi.n	460a <FatFile::makeSFN(FatLfn_t*)+0xe6>
        }
        // Skip to dot.
        ptr = dot - 1;
        continue;
      }
      if (isLower(c)) {
    4632:	sub.w	r7, r2, #97	; 0x61
    4636:	cmp	r7, #25
    4638:	bhi.n	4668 <FatFile::makeSFN(FatLfn_t*)+0x144>
        c += 'A' - 'a';
    463a:	subs	r2, #32
        lc |= bit;
    463c:	orr.w	r8, lr, r8
        // Skip to dot.
        ptr = dot - 1;
        continue;
      }
      if (isLower(c)) {
        c += 'A' - 'a';
    4640:	uxtb	r2, r2
    4642:	b.n	45d0 <FatFile::makeSFN(FatLfn_t*)+0xac>
      in = 10;                // Max index for full 8.3 name.
      i = 8;                  // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
    4644:	movs	r0, #0
    4646:	b.n	4598 <FatFile::makeSFN(FatLfn_t*)+0x74>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    4648:	ldrb.w	r3, [ip, #18]
    464c:	cmp	r3, #32
    464e:	beq.n	4676 <FatFile::makeSFN(FatLfn_t*)+0x152>
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    4650:	ldrb.w	r3, [ip, #16]
    goto fail;
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    4654:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    4656:	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    4658:	movs	r2, #49	; 0x31
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    465a:	add	r3, ip
    goto fail;
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    465c:	strb.w	r0, [ip, #17]
    fname->sfn[fname->seqPos] = '~';
    4660:	strb	r1, [r3, #18]
    fname->sfn[fname->seqPos + 1] = '1';
    4662:	strb	r2, [r3, #19]
    4664:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        continue;
      }
      if (isLower(c)) {
        c += 'A' - 'a';
        lc |= bit;
      } else if (isUpper(c)) {
    4668:	sub.w	r7, r2, #65	; 0x41
    466c:	cmp	r7, #25
        uc |= bit;
    466e:	it	ls
    4670:	orrls.w	r9, lr, r9
    4674:	b.n	45d0 <FatFile::makeSFN(FatLfn_t*)+0xac>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

fail:
  return false;
    4676:	movs	r0, #0
    4678:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
  }

  for (; ptr < end; ptr++) {
    467c:	mov	r9, r8
    467e:	b.n	45ea <FatFile::makeSFN(FatLfn_t*)+0xc6>

00004680 <FatFile::makeUniqueSfn(FatLfn_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    4680:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4684:	mov	r8, r1
    4686:	mov	r5, r0
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    4688:	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    468c:	movs	r4, #0
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    468e:	ldrb	r7, [r1, #16]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    4690:	add.w	r6, r1, #18
    4694:	ldr.w	fp, [pc, #148]	; 472c <FatFile::makeUniqueSfn(FatLfn_t*)+0xac>
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    4698:	mov.w	sl, #126	; 0x7e
    469c:	cmp	r7, #3
    469e:	ldr.w	r2, [fp]
    46a2:	it	cs
    46a4:	movcs	r7, #3
  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    DBG_WARN_IF(seq > FIRST_HASH_SEQ);
    hex += millis();
    46a6:	add	r4, r2
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4; i > pos; i--) {
    46a8:	adds	r3, r7, #4
  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    DBG_WARN_IF(seq > FIRST_HASH_SEQ);
    hex += millis();
    46aa:	uxth	r4, r4
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4; i > pos; i--) {
    46ac:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    46ae:	and.w	r2, r4, #15
    hex += millis();
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4; i > pos; i--) {
    46b2:	subs	r0, r3, #1
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    46b4:	lsrs	r4, r4, #4
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    46b6:	cmp	r2, #9
    46b8:	add.w	r1, r2, #55	; 0x37
    46bc:	it	ls
    46be:	addls.w	r1, r2, #48	; 0x30
    46c2:	add.w	r2, r8, r3
    hex += millis();
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4; i > pos; i--) {
    46c6:	uxtb	r3, r0
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    46c8:	strb	r1, [r2, #18]
    hex += millis();
    if (pos > 3) {
      // Make space in name for ~HHHH.
      pos = 3;
    }
    for (uint8_t i = pos + 4; i > pos; i--) {
    46ca:	cmp	r7, r3
    46cc:	bcc.n	46ae <FatFile::makeUniqueSfn(FatLfn_t*)+0x2e>
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    46ce:	add.w	r3, r8, r7
   *
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() { seekSet(0); }
    46d2:	movs	r1, #0
    46d4:	mov	r0, r5
    46d6:	strb.w	sl, [r3, #18]
    46da:	bl	3ca0 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    46de:	movs	r1, #1
    46e0:	mov	r0, r5
    46e2:	bl	3c5c <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    46e6:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    46e8:	mov	r3, r0
    46ea:	cbz	r0, 4718 <FatFile::makeUniqueSfn(FatLfn_t*)+0x98>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    46ec:	ldrb.w	lr, [r0]
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    46f0:	mov	r1, r0
    46f2:	mov	r0, r6
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    46f4:	cmp.w	lr, #0
    46f8:	beq.n	4724 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    46fa:	ldrb	r3, [r3, #11]
    46fc:	lsls	r3, r3, #28
    46fe:	bmi.n	46de <FatFile::makeUniqueSfn(FatLfn_t*)+0x5e>
    4700:	bl	96e0 <memcmp>
    4704:	cmp	r0, #0
    4706:	bne.n	46de <FatFile::makeUniqueSfn(FatLfn_t*)+0x5e>
    4708:	add.w	r9, r9, #4294967295
  uint16_t hex = 0;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    470c:	ands.w	r9, r9, #255	; 0xff
    4710:	bne.n	469c <FatFile::makeUniqueSfn(FatLfn_t*)+0x1c>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    4712:	mov	r0, r9
    4714:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    4718:	ldrb	r0, [r5, #1]
    471a:	clz	r0, r0
    471e:	lsrs	r0, r0, #5
    4720:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

fail:
  return false;

done:
  return true;
    4724:	movs	r0, #1
    4726:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    472a:	nop
    472c:	.word	0x20022480

00004730 <FatFile::open(FatFile*, FatLfn_t*, int)>:
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    4730:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;

  if (!dirFile->isDir() || isOpen()) {
    4734:	ldrb	r4, [r1, #0]

done:
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    4736:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;

  if (!dirFile->isDir() || isOpen()) {
    4738:	tst.w	r4, #208	; 0xd0
    473c:	beq.n	4742 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    473e:	ldrb	r4, [r0, #0]
    4740:	cbz	r4, 474a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    4742:	movs	r0, #0
}
    4744:	add	sp, #52	; 0x34
    4746:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
    474a:	ldr	r4, [r2, #12]
    474c:	ldr	r6, [pc, #648]	; (49d8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a8>)
    474e:	adds	r4, #12
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    4750:	ldrb	r5, [r2, #17]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
    4752:	umull	r6, r4, r6, r4
    4756:	ubfx	r4, r4, #2, #8
    475a:	str	r4, [sp, #12]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    475c:	lsls	r4, r5, #30
    475e:	bne.n	47e8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xb8>
    4760:	mov.w	r8, #1
  uint8_t checksum = 0;
  uint8_t ms10;
  uint8_t nameOrd;
  uint16_t curIndex;
  uint16_t date;
  uint16_t freeIndex = 0;
    4764:	movs	r7, #0
    4766:	mov	r6, r1
    4768:	mov	r5, r2
    476a:	str	r3, [sp, #24]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeFound = 0;
  uint8_t freeNeed;
  uint8_t order = 0;
    476c:	mov	sl, r7
  uint16_t freeIndex = 0;
  uint16_t freeTotal;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    476e:	ldr	r3, [r6, #8]
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeFound = 0;
    4770:	mov	r4, r7
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    4772:	mov	r9, r7
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    4774:	add.w	fp, r5, #18
    4778:	str	r0, [sp, #36]	; 0x24
    477a:	mov	r1, r7
    477c:	mov	r0, r6
    477e:	str	r2, [sp, #16]
  uint16_t freeIndex = 0;
  uint16_t freeTotal;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    4780:	str	r3, [sp, #32]
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeFound = 0;
  uint8_t freeNeed;
  uint8_t order = 0;
  uint8_t checksum = 0;
    4782:	str	r7, [sp, #28]
done:
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    4784:	str	r7, [sp, #20]
    4786:	bl	3ca0 <FatFile::seekSet(unsigned long)>
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    478a:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    478c:	movs	r1, #0
    478e:	mov	r0, r6
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    4790:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache();
    4794:	bl	3c5c <FatFile::readDirCache(bool)>
    if (!dir) {
    4798:	cmp	r0, #0
    479a:	beq.w	48c8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x198>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    479e:	ldrb	r3, [r0, #0]
    47a0:	sub.w	r2, r3, #229	; 0xe5
    47a4:	clz	r2, r2
    47a8:	lsrs	r2, r2, #5
    47aa:	cbz	r3, 480e <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    47ac:	cbnz	r2, 480e <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    47ae:	cmp	r4, r8
    47b0:	it	cc
    47b2:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    47b4:	cmp	r3, #46	; 0x2e
    47b6:	beq.n	4808 <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
    47b8:	cbnz	r2, 4808 <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
    47ba:	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (isFatLongName(dir)) {
    47bc:	cmp	r1, #15
    47be:	beq.n	4884 <FatFile::open(FatFile*, FatLfn_t*, int)+0x154>
      if (order == 1) {
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
          lfnOrd = 0;
        }
      }
    } else if (isFatFileOrSubdir(dir)) {
    47c0:	lsls	r3, r1, #28
    47c2:	bmi.n	4808 <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
      if (lfnOrd) {
    47c4:	cmp.w	r9, #0
    47c8:	bne.w	4998 <FatFile::open(FatFile*, FatLfn_t*, int)+0x268>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    47cc:	movs	r2, #11
    47ce:	mov	r1, fp
    47d0:	bl	96e0 <memcmp>
    47d4:	cmp	r0, #0
    47d6:	bne.n	478a <FatFile::open(FatFile*, FatLfn_t*, int)+0x5a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    47d8:	ldr	r3, [sp, #16]
    47da:	ldrb	r3, [r3, #17]
    47dc:	lsls	r0, r3, #31
    47de:	bpl.w	49c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>
          goto found;
        }
        fnameFound = true;
    47e2:	movs	r3, #1
    47e4:	str	r3, [sp, #20]
    47e6:	b.n	478a <FatFile::open(FatFile*, FatLfn_t*, int)+0x5a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    47e8:	ldr	r4, [sp, #12]
    47ea:	add.w	r8, r4, #1
    47ee:	uxtb.w	r8, r8
    47f2:	b.n	4764 <FatFile::open(FatFile*, FatLfn_t*, int)+0x34>
            (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = nameOrd;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    47f4:	add.w	sl, sl, #4294967295
    47f8:	uxtb.w	sl, sl
    47fc:	cmp	r3, sl
    47fe:	bne.n	4808 <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
    4800:	ldrb	r3, [r0, #13]
    4802:	ldr	r1, [sp, #28]
    4804:	cmp	r1, r3
    4806:	beq.n	48a8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x178>
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    4808:	mov.w	r9, #0
    480c:	b.n	478a <FatFile::open(FatFile*, FatLfn_t*, int)+0x5a>
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    480e:	cmp	r4, #0
    4810:	it	eq
    4812:	moveq	r7, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    4814:	cmp	r4, r8
    4816:	bcs.n	481c <FatFile::open(FatFile*, FatLfn_t*, int)+0xec>
        freeFound++;
    4818:	adds	r4, #1
    481a:	uxtb	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    481c:	cmp	r3, #0
    481e:	bne.n	47b4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x84>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    4820:	ldr	r2, [sp, #24]
    4822:	mov	r3, r2
    4824:	lsls	r2, r3, #22
    4826:	bpl.n	4742 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    4828:	and.w	r3, r3, #3
    482c:	subs	r3, #1
    482e:	cmp	r3, #1
    4830:	bhi.n	4742 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    DBG_WARN_MACRO;
    goto fail;
  }
  // Keep found entries or start at current index if no free entries found.
  if (freeFound == 0) {
    4832:	cmp	r4, #0
    4834:	it	eq
    4836:	moveq	r7, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    4838:	cmp	r4, r8
    483a:	bcc.n	4844 <FatFile::open(FatFile*, FatLfn_t*, int)+0x114>
    483c:	b.n	485a <FatFile::open(FatFile*, FatLfn_t*, int)+0x12a>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    483e:	uxtb	r4, r3
  // Keep found entries or start at current index if no free entries found.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    4840:	cmp	r8, r4
    4842:	bls.n	485a <FatFile::open(FatFile*, FatLfn_t*, int)+0x12a>
    dir = dirFile->readDirCache();
    4844:	movs	r1, #0
    4846:	mov	r0, r6
    4848:	bl	3c5c <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    484c:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    484e:	cmp	r0, #0
    4850:	bne.n	483e <FatFile::open(FatFile*, FatLfn_t*, int)+0x10e>
      if (dirFile->getError()) {
    4852:	ldrb	r3, [r6, #1]
    4854:	cmp	r3, #0
    4856:	bne.w	4742 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
      break;
    }
    freeFound++;
  }
  // Loop handles the case of huge filename and cluster size one.
  freeTotal = freeFound;
    485a:	uxth	r4, r4
  while (freeTotal < freeNeed) {
    485c:	uxth.w	r5, r8
    4860:	cmp	r4, r5
    4862:	bcs.n	48dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x1ac>
    4864:	ldr.w	r9, [sp, #32]
    4868:	b.n	4878 <FatFile::open(FatFile*, FatLfn_t*, int)+0x148>
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // 16-bit freeTotal needed for large cluster size.
    freeTotal += vol->dirEntriesPerCluster();
    486a:	ldrb.w	r3, [r9, #4]
    486e:	add.w	r4, r4, r3, lsl #4
    4872:	uxth	r4, r4
    }
    freeFound++;
  }
  // Loop handles the case of huge filename and cluster size one.
  freeTotal = freeFound;
  while (freeTotal < freeNeed) {
    4874:	cmp	r4, r5
    4876:	bcs.n	48dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x1ac>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    4878:	mov	r0, r6
    487a:	bl	362c <FatFile::addDirCluster()>
    487e:	cmp	r0, #0
    4880:	bne.n	486a <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    4882:	b.n	4742 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isFatLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    4884:	cmp.w	r9, #0
    4888:	bne.n	47f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        order = ldir->order & 0X1F;
    488a:	and.w	sl, r3, #31
        if (order != nameOrd ||
    488e:	ldr	r2, [sp, #12]
    4890:	cmp	r2, sl
    4892:	bne.w	478a <FatFile::open(FatFile*, FatLfn_t*, int)+0x5a>
    4896:	lsls	r1, r3, #25
    4898:	bmi.n	48a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x170>
    489a:	ldr.w	sl, [sp, #12]
    489e:	b.n	478a <FatFile::open(FatFile*, FatLfn_t*, int)+0x5a>
            (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = nameOrd;
        checksum = ldir->checksum;
    48a0:	ldrb	r3, [r0, #13]
    48a2:	mov	r9, r2
    48a4:	mov	sl, r2
    48a6:	str	r3, [sp, #28]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      if (order == 1) {
    48a8:	cmp.w	sl, #1
    48ac:	bne.w	478a <FatFile::open(FatFile*, FatLfn_t*, int)+0x5a>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    48b0:	adds	r1, r5, #1
    48b2:	mov	r3, r9
    48b4:	ldr	r2, [sp, #16]
    48b6:	mov	r0, r6
    48b8:	uxth	r1, r1
    48ba:	bl	4344 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    48be:	cmp	r0, #0
    48c0:	it	eq
    48c2:	moveq.w	r9, #0
    48c6:	b.n	478a <FatFile::open(FatFile*, FatLfn_t*, int)+0x5a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
    48c8:	ldrb	r3, [r6, #1]
    48ca:	cmp	r3, #0
    48cc:	bne.w	4742 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    48d0:	ldr	r2, [sp, #24]
    48d2:	mov	r3, r2
    48d4:	lsls	r2, r3, #22
    48d6:	bpl.w	4742 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    48da:	b.n	4828 <FatFile::open(FatFile*, FatLfn_t*, int)+0xf8>
      goto fail;
    }
    // 16-bit freeTotal needed for large cluster size.
    freeTotal += vol->dirEntriesPerCluster();
  }
  if (fnameFound) {
    48dc:	ldr	r3, [sp, #20]
    48de:	cbz	r3, 48ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x1be>
    if (!dirFile->makeUniqueSfn(fname)) {
    48e0:	ldr	r1, [sp, #16]
    48e2:	mov	r0, r6
    48e4:	bl	4680 <FatFile::makeUniqueSfn(FatLfn_t*)>
    48e8:	cmp	r0, #0
    48ea:	beq.w	4742 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
    48ee:	add.w	r8, r8, #4294967295
  curIndex = freeIndex + lfnOrd;
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    48f2:	ldr	r2, [sp, #16]
    48f4:	mov	r0, r6
  if (fnameFound) {
    if (!dirFile->makeUniqueSfn(fname)) {
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
    48f6:	uxtb.w	r9, r8
  curIndex = freeIndex + lfnOrd;
    48fa:	add.w	r5, r7, r9
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    48fe:	mov	r3, r9
    if (!dirFile->makeUniqueSfn(fname)) {
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
  curIndex = freeIndex + lfnOrd;
    4900:	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    4902:	mov	r1, r5
    4904:	bl	4408 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    4908:	cmp	r0, #0
    490a:	beq.w	4742 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    490e:	lsls	r1, r5, #5
    4910:	mov	r0, r6
    4912:	bl	3ca0 <FatFile::seekSet(unsigned long)>
    4916:	cmp	r0, #0
    4918:	beq.w	4742 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    491c:	movs	r1, #0
    491e:	mov	r0, r6
    4920:	bl	3c5c <FatFile::readDirCache(bool)>
    goto fail;
  }
  dir = dirFile->cacheDir(curIndex);
  if (!dir) {
    4924:	mov	r4, r0
    4926:	cmp	r0, #0
    4928:	beq.w	4742 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    492c:	movs	r2, #32
    492e:	movs	r1, #0
    4930:	bl	980c <memset>
  memcpy(dir->name, fname->sfn, 11);
    4934:	ldr	r7, [sp, #16]

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // Set timestamps.
  if (FsDateTime::callback) {
    4936:	ldr	r2, [pc, #164]	; (49dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2ac>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    4938:	mov	r3, r7
    493a:	ldr.w	r0, [r3, #18]!
    493e:	ldr	r1, [r3, #4]
    4940:	str	r0, [r4, #0]
    4942:	str	r1, [r4, #4]
    4944:	ldrh	r1, [r3, #8]
    4946:	ldrb	r3, [r3, #10]
    4948:	strh	r1, [r4, #8]
    494a:	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    494c:	ldrb	r3, [r7, #17]

  // Set timestamps.
  if (FsDateTime::callback) {
    494e:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    4950:	and.w	r3, r3, #24
    4954:	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    4956:	cmp	r7, #0
    4958:	beq.n	49cc <FatFile::open(FatFile*, FatLfn_t*, int)+0x29c>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    495a:	add.w	r2, sp, #43	; 0x2b
    495e:	add.w	r1, sp, #46	; 0x2e
    4962:	add	r0, sp, #44	; 0x2c
    4964:	blx	r7
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4966:	ldrh.w	r1, [sp, #44]	; 0x2c
    496a:	ldrh.w	r2, [sp, #46]	; 0x2e
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    496e:	ldrb.w	r3, [sp, #43]	; 0x2b
    4972:	strh	r1, [r4, #16]
    4974:	strh	r2, [r4, #14]
    4976:	strb	r3, [r4, #13]
    4978:	ldr	r2, [sp, #32]
    497a:	ldrb.w	r3, [r2, #36]	; 0x24
    497e:	orr.w	r3, r3, #1
    4982:	strb.w	r3, [r2, #36]	; 0x24
  // Force write of entry to device.
  vol->cacheDirty();

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    4986:	str.w	r9, [sp]
    498a:	mov	r2, r5
    498c:	ldr	r3, [sp, #24]
    498e:	mov	r1, r6
    4990:	ldr	r0, [sp, #36]	; 0x24
    4992:	bl	3d50 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    4996:	b.n	4744 <FatFile::open(FatFile*, FatLfn_t*, int)+0x14>
          lfnOrd = 0;
        }
      }
    } else if (isFatFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    4998:	cmp.w	sl, #1
    499c:	bne.w	4742 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    49a0:	subs	r4, r0, #1
    49a2:	mov	r3, r2
    49a4:	adds	r0, #10
    49a6:	lsls	r1, r3, #7
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    49a8:	ldrb.w	r2, [r4, #1]!
    49ac:	orr.w	r3, r1, r3, lsr #1
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    49b0:	cmp	r4, r0
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    49b2:	uxtab	r3, r2, r3
    49b6:	uxtb	r3, r3
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    49b8:	bne.n	49a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    49ba:	mov	r2, r3
    49bc:	ldr	r3, [sp, #28]
    49be:	cmp	r3, r2
    49c0:	bne.w	4742 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    49c4:	ldr	r3, [sp, #24]
    49c6:	lsls	r1, r3, #20
    49c8:	bpl.n	4986 <FatFile::open(FatFile*, FatLfn_t*, int)+0x256>
    49ca:	b.n	4742 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12>
    49cc:	movw	r3, #22049	; 0x5621
    49d0:	strh	r3, [r4, #16]
    49d2:	strh	r3, [r4, #24]
    49d4:	strh	r3, [r4, #18]
    49d6:	b.n	4978 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
    49d8:	.word	0x4ec4ec4f
    49dc:	.word	0x20021b98

000049e0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
    49e0:	push	{r4, r5, r6, r7}
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    49e2:	ldrb	r0, [r1, #0]
    49e4:	cmp	r0, #32
    49e6:	bne.n	49f0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    49e8:	ldrb.w	r4, [r1, #1]!
    49ec:	cmp	r4, #32
    49ee:	beq.n	49e8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
    49f0:	movs	r4, #0
    49f2:	mov	r6, r1
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
    49f4:	ldr	r0, [pc, #144]	; (4a88 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa8>)
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->begin = path;
    49f6:	str	r1, [r2, #0]
  fname->len = 0;
    49f8:	str	r4, [r2, #12]
    49fa:	mov	r4, r6
  while (*path && !isDirSeparator(*path)) {
    49fc:	ldrb.w	r5, [r6], #1
    4a00:	cmp	r5, #47	; 0x2f
    4a02:	it	ne
    4a04:	cmpne	r5, #0
    4a06:	beq.n	4a4e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6e>
    4a08:	sub.w	r4, r5, #34	; 0x22
    4a0c:	uxtb	r4, r4
    4a0e:	cmp	r4, #29
    4a10:	bls.n	4a7a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
    4a12:	movs	r4, #1
         c == '>' || c == '?' || c == '\\' || c == '|';
    4a14:	sub.w	r7, r5, #32
    4a18:	cmp	r7, #95	; 0x5f
    4a1a:	ite	ls
    4a1c:	movls	r7, #0
    4a1e:	movhi	r7, #1
    4a20:	cmp	r7, r4
    4a22:	bcs.n	4a74 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x94>
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
    4a24:	and.w	r4, r5, #191	; 0xbf
    4a28:	cmp	r4, #60	; 0x3c
    4a2a:	beq.n	4a74 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x94>
         c == '>' || c == '?' || c == '\\' || c == '|';
    4a2c:	cmp	r5, #92	; 0x5c
    4a2e:	beq.n	4a74 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x94>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len++;
#endif  // USE_UTF8_LONG_NAMES
    if (cp != '.' && cp != ' ') {
    4a30:	cmp	r5, #46	; 0x2e
    4a32:	sub.w	r4, r6, r1
    4a36:	beq.n	49fa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    4a38:	cmp	r5, #32
    4a3a:	beq.n	49fa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
      // Need to trim trailing dots spaces.
      fname->len = len;
    4a3c:	str	r4, [r2, #12]
    4a3e:	mov	r4, r6
      fname->end = path;
    4a40:	str	r6, [r2, #8]
  while (*path == ' ') {
    path++;
  }
  fname->begin = path;
  fname->len = 0;
  while (*path && !isDirSeparator(*path)) {
    4a42:	ldrb.w	r5, [r6], #1
    4a46:	cmp	r5, #47	; 0x2f
    4a48:	it	ne
    4a4a:	cmpne	r5, #0
    4a4c:	bne.n	4a08 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x28>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    4a4e:	ldr	r1, [r2, #12]
    4a50:	subs	r1, #1
    4a52:	cmp	r1, #254	; 0xfe
    4a54:	bhi.n	4a74 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x94>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    4a56:	cmp	r5, #32
    4a58:	beq.n	4a5e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7e>
    4a5a:	cmp	r5, #47	; 0x2f
    4a5c:	bne.n	4a6a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8a>
    4a5e:	ldrb.w	r1, [r4, #1]!
    4a62:	cmp	r1, #32
    4a64:	beq.n	4a5e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7e>
    4a66:	cmp	r1, #47	; 0x2f
    4a68:	beq.n	4a5e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7e>
  }
  *ptr = path;
    4a6a:	str	r4, [r3, #0]
  return makeSFN(fname);
    4a6c:	mov	r0, r2

fail:
  return false;
}
    4a6e:	pop	{r4, r5, r6, r7}
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
  }
  *ptr = path;
  return makeSFN(fname);
    4a70:	b.w	4524 <FatFile::makeSFN(FatLfn_t*)>

fail:
  return false;
}
    4a74:	movs	r0, #0
    4a76:	pop	{r4, r5, r6, r7}
    4a78:	bx	lr
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
    4a7a:	lsr.w	r4, r0, r4
    4a7e:	and.w	r4, r4, #1
    4a82:	eor.w	r4, r4, #1
    4a86:	b.n	4a14 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x34>
    4a88:	.word	0x31000101

00004a8c <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    4a8c:	push	{r4, lr}
    4a8e:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4a90:	ldr	r0, [r0, #56]	; 0x38
    4a92:	cbz	r0, 4aa0 <FsBaseFile::close()+0x14>
    4a94:	bl	3764 <FatFile::close()>
  m_fFile = nullptr;
    4a98:	movs	r3, #0
    4a9a:	str	r3, [r4, #56]	; 0x38
  m_xFile = nullptr;
    4a9c:	str	r3, [r4, #60]	; 0x3c
  return rtn;
}
    4a9e:	pop	{r4, pc}
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4aa0:	ldr	r0, [r4, #60]	; 0x3c
    4aa2:	cbz	r0, 4ab0 <FsBaseFile::close()+0x24>
    4aa4:	bl	2124 <ExFatFile::close()>
  m_fFile = nullptr;
    4aa8:	movs	r3, #0
    4aaa:	str	r3, [r4, #56]	; 0x38
  m_xFile = nullptr;
    4aac:	str	r3, [r4, #60]	; 0x3c
  return rtn;
}
    4aae:	pop	{r4, pc}
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    4ab0:	movs	r0, #1
    4ab2:	b.n	4a98 <FsBaseFile::close()+0xc>

00004ab4 <FsBaseFile::operator=(FsBaseFile const&)>:
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) {
    4ab4:	cmp	r0, r1
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    4ab6:	push	{r3, r4, r5, r6, r7, lr}
    4ab8:	mov	r6, r0
  if (this == &from) {
    4aba:	beq.n	4ae8 <FsBaseFile::operator=(FsBaseFile const&)+0x34>
    4abc:	mov	r5, r1
    return *this;
  }
  close();
    4abe:	bl	4a8c <FsBaseFile::close()>
  if (from.m_fFile) {
    4ac2:	ldr	r4, [r5, #56]	; 0x38
    4ac4:	cbz	r4, 4aec <FsBaseFile::operator=(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
    4ac6:	mov	r1, r6
    4ac8:	movs	r0, #36	; 0x24
    4aca:	bl	4cf4 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    4ace:	movs	r3, #0
    *m_fFile = *from.m_fFile;
    4ad0:	mov	r4, r0
    4ad2:	strb	r3, [r0, #0]
    4ad4:	strb	r3, [r0, #1]
    4ad6:	strb	r3, [r0, #2]
  if (this == &from) {
    return *this;
  }
  close();
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    4ad8:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    4ada:	ldr	r5, [r5, #56]	; 0x38
    4adc:	ldmia	r5!, {r0, r1, r2, r3}
    4ade:	stmia	r4!, {r0, r1, r2, r3}
    4ae0:	ldmia	r5!, {r0, r1, r2, r3}
    4ae2:	stmia	r4!, {r0, r1, r2, r3}
    4ae4:	ldr	r3, [r5, #0]
    4ae6:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
    4ae8:	mov	r0, r6
    4aea:	pop	{r3, r4, r5, r6, r7, pc}
  }
  close();
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    4aec:	ldr	r3, [r5, #60]	; 0x3c
    4aee:	cmp	r3, #0
    4af0:	beq.n	4ae8 <FsBaseFile::operator=(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
    4af2:	mov	r1, r6
    4af4:	movs	r0, #56	; 0x38
    4af6:	bl	4cf4 <operator new(unsigned int, unsigned long*)>
    4afa:	strb.w	r4, [r0, #49]	; 0x31
    4afe:	strb.w	r4, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    4b02:	mov	r2, r0
    4b04:	strb.w	r4, [r0, #51]	; 0x33
  close();
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    4b08:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    4b0a:	ldr	r3, [r5, #60]	; 0x3c
    4b0c:	add.w	r1, r3, #48	; 0x30
    4b10:	ldr	r7, [r3, #0]
    4b12:	adds	r3, #16
    4b14:	ldr.w	r5, [r3, #-12]
    4b18:	adds	r2, #16
    4b1a:	ldr.w	r4, [r3, #-8]
    4b1e:	ldr.w	r0, [r3, #-4]
    4b22:	cmp	r3, r1
    4b24:	str.w	r7, [r2, #-16]
    4b28:	str.w	r5, [r2, #-12]
    4b2c:	str.w	r4, [r2, #-8]
    4b30:	str.w	r0, [r2, #-4]
    4b34:	bne.n	4b10 <FsBaseFile::operator=(FsBaseFile const&)+0x5c>
    4b36:	ldr	r3, [r3, #0]
    4b38:	str	r3, [r2, #0]
    4b3a:	b.n	4ae8 <FsBaseFile::operator=(FsBaseFile const&)+0x34>

00004b3c <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    4b3c:	cbz	r1, 4bb2 <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    4b3e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b42:	mov	r4, r1
    4b44:	mov	r5, r0
    4b46:	mov	r8, r3
    4b48:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    4b4a:	bl	4a8c <FsBaseFile::close()>
  if (vol->m_fVol) {
    4b4e:	ldr.w	r6, [r4, #1152]	; 0x480
    4b52:	cbz	r6, 4b80 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    4b54:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    4b56:	mov	r1, r5
    4b58:	movs	r0, #36	; 0x24
    4b5a:	bl	4cf4 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4b5e:	mov	r3, r8
    4b60:	strb	r6, [r0, #0]
    4b62:	mov	r2, r7
    4b64:	strb	r6, [r0, #1]
    4b66:	strb	r6, [r0, #2]
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    4b68:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4b6a:	ldr.w	r1, [r4, #1152]	; 0x480
    4b6e:	bl	3a7c <FatFile::open(FatVolume*, char const*, int)>
    4b72:	cbz	r0, 4b7a <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    4b74:	movs	r0, #1
    4b76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    4b7a:	str	r0, [r5, #56]	; 0x38
    4b7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    4b80:	ldr.w	r3, [r4, #1156]	; 0x484
    4b84:	cbz	r3, 4bb6 <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    4b86:	mov	r1, r5
    4b88:	movs	r0, #56	; 0x38
    4b8a:	bl	4cf4 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    4b8e:	mov	r3, r8
    4b90:	strb.w	r6, [r0, #49]	; 0x31
    4b94:	mov	r2, r7
    4b96:	strb.w	r6, [r0, #50]	; 0x32
    4b9a:	strb.w	r6, [r0, #51]	; 0x33
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    4b9e:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    4ba0:	ldr.w	r1, [r4, #1156]	; 0x484
    4ba4:	bl	29b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4ba8:	cmp	r0, #0
    4baa:	bne.n	4b74 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    4bac:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    4bae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    4bb2:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    4bb4:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    4bb6:	movs	r0, #0
    4bb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004bbc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    4bbc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  m_fVol = nullptr;
    4bc0:	movs	r5, #0
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    4bc2:	mov	r6, r0
    4bc4:	mov	r7, r1
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    4bc6:	mov.w	r0, #1152	; 0x480
    4bca:	mov	r1, r6
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
  m_fVol = nullptr;
    4bcc:	str.w	r5, [r6, #1152]	; 0x480
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    4bd0:	mov	r8, r3
    4bd2:	mov	r9, r2
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    4bd4:	bl	4cf4 <operator new(unsigned int, unsigned long*)>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    4bd8:	mov.w	lr, #4294967295
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(FsBlockDevice* blockDev) {
    m_blockDev = blockDev;
    4bdc:	str	r5, [r0, #4]
   * \param[in] volStart Start sector of volume if part is zero.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1,
             uint32_t volStart = 0) {
    if (!init(dev, part, volStart)) {
    4bde:	mov	r2, r8
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4be0:	strb	r5, [r0, #0]
    4be2:	mov	r1, r7
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(FsBlockDevice* blockDev) {
    m_blockDev = blockDev;
    4be4:	str.w	r5, [r0, #532]	; 0x214
    4be8:	mov	r4, r0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4bea:	strb.w	r5, [r0, #528]	; 0x210
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() = default;
    4bee:	strb.w	r5, [r0, #1092]	; 0x444
    4bf2:	strb.w	r5, [r0, #1145]	; 0x479
    4bf6:	strb.w	r5, [r0, #1146]	; 0x47a
    4bfa:	strb.w	r5, [r0, #1147]	; 0x47b
    m_sector = 0XFFFFFFFF;
    4bfe:	str.w	lr, [r0, #8]
    4c02:	str.w	lr, [r0, #536]	; 0x218
    4c06:	ldr	r3, [sp, #32]
    4c08:	str.w	r0, [r6, #1156]	; 0x484
    4c0c:	bl	2cb0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    4c10:	cbnz	r0, 4c68 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xac>
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_xVol = nullptr;
    4c12:	movs	r5, #0
  m_fVol = new (m_volMem) FatVolume;
    4c14:	mov	r1, r6
    4c16:	mov.w	r0, #1128	; 0x468
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_xVol = nullptr;
    4c1a:	str.w	r5, [r6, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    4c1e:	bl	4cf4 <operator new(unsigned int, unsigned long*)>
    4c22:	mov.w	lr, #4294967295
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() = default;
    4c26:	strb	r5, [r0, #7]
   * \param[in] volStart Start sector of volume if part is zero.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1,
             uint32_t volStart = 0) {
    if (!init(dev, part, volStart)) {
    4c28:	mov	r2, r8
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(FsBlockDevice* blockDev) {
    m_blockDev = blockDev;
    4c2a:	str	r5, [r0, #40]	; 0x28
    4c2c:	mov	r1, r7
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4c2e:	strb.w	r5, [r0, #36]	; 0x24
    4c32:	mov	r4, r0
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(FsBlockDevice* blockDev) {
    m_blockDev = blockDev;
    4c34:	str.w	r5, [r0, #568]	; 0x238
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    4c38:	strb.w	r5, [r0, #564]	; 0x234
    4c3c:	strb.w	r5, [r0, #1092]	; 0x444
    4c40:	strb.w	r5, [r0, #1093]	; 0x445
    4c44:	strb.w	r5, [r0, #1094]	; 0x446
    m_sector = 0XFFFFFFFF;
    4c48:	str.w	lr, [r0, #44]	; 0x2c
    4c4c:	str.w	lr, [r0, #572]	; 0x23c
    4c50:	ldr	r3, [sp, #32]
    4c52:	str.w	r0, [r6, #1152]	; 0x480
    4c56:	bl	41d0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    4c5a:	cbnz	r0, 4c96 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xda>
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_fVol = nullptr;
    4c5c:	movs	r3, #0
  return false;
    4c5e:	mov	r0, r3
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_fVol = nullptr;
    4c60:	str.w	r3, [r6, #1152]	; 0x480
done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    4c64:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    4c68:	add.w	r5, r4, #1096	; 0x448
    4c6c:	mov	r0, r5
    4c6e:	bl	2124 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    4c72:	mov	r1, r4
    4c74:	mov	r0, r5
    4c76:	bl	2138 <ExFatFile::openRoot(ExFatVolume*)>
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1,
             uint32_t volStart = 0) {
    if (!init(dev, part, volStart)) {
      return false;
    }
    if (!chdir()) {
    4c7a:	cmp	r0, #0
    4c7c:	beq.n	4c12 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x56>
      return false;
    }
    if (setCwv || !m_cwv) {
    4c7e:	ldr	r3, [pc, #64]	; (4cc0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x104>)
    4c80:	ldr	r2, [r3, #0]
    4c82:	cbz	r2, 4cb4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xf8>
    4c84:	ldr	r3, [pc, #60]	; (4cc4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x108>)
  }
  m_fVol = nullptr;
  return false;

done:
  if (setCwv || !m_cwv) {
    4c86:	cmp.w	r9, #0
    4c8a:	bne.n	4cb8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xfc>
    4c8c:	ldr	r2, [r3, #0]
    4c8e:	cbz	r2, 4cb8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xfc>
    m_cwv = this;
  }
  return true;
    4c90:	movs	r0, #1
    4c92:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    4c96:	addw	r5, r4, #1092	; 0x444
    4c9a:	mov	r0, r5
    4c9c:	bl	3764 <FatFile::close()>
    return m_vwd.openRoot(this);
    4ca0:	mov	r1, r4
    4ca2:	mov	r0, r5
    4ca4:	bl	3a8c <FatFile::openRoot(FatVolume*)>
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1,
             uint32_t volStart = 0) {
    if (!init(dev, part, volStart)) {
      return false;
    }
    if (!chdir()) {
    4ca8:	cmp	r0, #0
    4caa:	beq.n	4c5c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xa0>
      return false;
    }
    if (setCwv || !m_cwv) {
    4cac:	ldr	r3, [pc, #24]	; (4cc8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    4cae:	ldr	r2, [r3, #0]
    4cb0:	cmp	r2, #0
    4cb2:	bne.n	4c84 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xc8>
      m_cwv = this;
    4cb4:	str	r4, [r3, #0]
    4cb6:	b.n	4c84 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xc8>
  m_fVol = nullptr;
  return false;

done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
    4cb8:	str	r6, [r3, #0]
  }
  return true;
    4cba:	movs	r0, #1
    4cbc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4cc0:	.word	0x20021b9c
    4cc4:	.word	0x20021bd0
    4cc8:	.word	0x20021bd4

00004ccc <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
    4ccc:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    4cce:	movs	r5, #0
    4cd0:	mov.w	r7, #1000	; 0x3e8
    4cd4:	ldr	r6, [pc, #24]	; (4cf0 <FsVolume::open(char const*, int)+0x24>)
    4cd6:	mov	r4, r0
    4cd8:	str	r7, [r0, #8]
    4cda:	str	r5, [r0, #4]
    4cdc:	strb	r5, [r0, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() = default;
    4cde:	str	r5, [r0, #72]	; 0x48
    4ce0:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    4ce2:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    4ce6:	bl	4b3c <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    4cea:	mov	r0, r4
    4cec:	pop	{r3, r4, r5, r6, r7, pc}
    4cee:	nop
    4cf0:	.word	0x2000047c

00004cf4 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    4cf4:	mov	r0, r1
    4cf6:	bx	lr

00004cf8 <SharedSpiCard::errorCode() const>:
  }
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error
   * codes.
   */
  uint8_t errorCode() const { return m_errorCode; }
    4cf8:	ldrb	r0, [r0, #18]
    4cfa:	bx	lr

00004cfc <SharedSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const { return m_status; }
    4cfc:	ldrb	r0, [r0, #21]
    4cfe:	bx	lr

00004d00 <SharedSpiCard::type() const>:
  /** \return success if sync successful. Not for user apps. */
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const { return m_type; }
    4d00:	ldrb	r0, [r0, #22]
    4d02:	bx	lr

00004d04 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() { return true; }
    4d04:	movs	r0, #1
    4d06:	bx	lr

00004d08 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_dedicatedSpi; }
    4d08:	ldrb	r0, [r0, #28]
    4d0a:	bx	lr

00004d0c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  }
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    4d0c:	push	{r4}
  return readSectors(sector, dst, 1);
    4d0e:	ldr	r4, [r0, #0]
    4d10:	movs	r3, #1
    4d12:	ldr	r4, [r4, #20]
    4d14:	mov	ip, r4
}
    4d16:	ldr.w	r4, [sp], #4
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    4d1a:	bx	ip

00004d1c <DedicatedSpiCard::setDedicatedSpi(bool)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    4d1c:	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    4d1e:	ldr	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    4d20:	mov	r4, r0
    4d22:	mov	r5, r1
  if (!syncDevice()) {
    4d24:	ldr	r3, [r3, #28]
    4d26:	blx	r3
    4d28:	cbz	r0, 4d2c <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    4d2a:	strb	r5, [r4, #28]
  return true;
}
    4d2c:	pop	{r3, r4, r5, pc}
    4d2e:	nop

00004d30 <DedicatedSpiCard::~DedicatedSpiCard()>:
//==============================================================================
/**
 * \class DedicatedSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
    4d30:	bx	lr
    4d32:	nop

00004d34 <DedicatedSpiCard::~DedicatedSpiCard()>:
    4d34:	push	{r4, lr}
    4d36:	mov	r4, r0
    4d38:	movs	r1, #32
    4d3a:	bl	8c48 <operator delete(void*, unsigned int)>
    4d3e:	mov	r0, r4
    4d40:	pop	{r4, pc}
    4d42:	nop

00004d44 <SharedSpiCard::end()>:
  } while (m_status & 0X80 && ++n < 10);
  return m_status;
}
//------------------------------------------------------------------------------
void SharedSpiCard::end() {
  if (m_beginCalled) {
    4d44:	ldrb	r2, [r0, #16]
    4d46:	cbnz	r2, 4d4a <SharedSpiCard::end()+0x6>
    4d48:	bx	lr
    m_status = spiReceive();
  } while (m_status & 0X80 && ++n < 10);
  return m_status;
}
//------------------------------------------------------------------------------
void SharedSpiCard::end() {
    4d4a:	push	{r3, r4, r5, lr}
  if (m_beginCalled) {
    syncDevice();
    4d4c:	mov	r5, r0
    4d4e:	mov	r4, r0
    4d50:	ldr.w	r3, [r5], #4
    4d54:	ldr	r3, [r3, #28]
    4d56:	blx	r3
  bool writeData(uint8_t token, const uint8_t* src);
#if SPI_DRIVER_SELECT < 2
  void spiActivate() { m_spiDriver.activate(); }
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
    4d58:	mov	r0, r5
    4d5a:	bl	6900 <SdSpiArduinoDriver::end()>
    spiEnd();
    m_beginCalled = false;
    4d5e:	movs	r3, #0
    4d60:	strb	r3, [r4, #16]
    4d62:	pop	{r3, r4, r5, pc}

00004d64 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    4d64:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d68:	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4d6a:	ldrb	r3, [r0, #20]
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    4d6c:	mov	r6, r0
    4d6e:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4d70:	cmp	r3, #2
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    4d72:	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4d74:	beq.n	4db6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x52>
    if (!writeStart(sector)) {
    4d76:	ldr	r3, [r6, #0]
    4d78:	mov	r1, r5
    4d7a:	mov	r0, r6
    4d7c:	ldr	r3, [r3, #100]	; 0x64
    4d7e:	blx	r3
    4d80:	cbz	r0, 4da2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
      goto fail;
    }
    m_curSector = sector;
    4d82:	str	r5, [r6, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    4d84:	cbz	r7, 4da8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    4d86:	movs	r5, #0
    4d88:	b.n	4d8e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
    4d8a:	cmp	r7, r5
    4d8c:	beq.n	4da8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    4d8e:	ldr	r3, [r6, #0]
    4d90:	mov	r1, r4
    4d92:	mov	r0, r6
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    4d94:	adds	r5, #1
    if (!writeData(src)) {
    4d96:	ldr	r3, [r3, #96]	; 0x60
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    4d98:	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    4d9c:	blx	r3
    4d9e:	cmp	r0, #0
    4da0:	bne.n	4d8a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

fail:
  return false;
    4da2:	movs	r0, #0
    4da4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    4da8:	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : writeStop();
    4daa:	ldrb	r0, [r6, #28]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    4dac:	add	r7, r3
    4dae:	str	r7, [r6, #24]
  return m_dedicatedSpi ? true : writeStop();
    4db0:	cbz	r0, 4dbe <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5a>

fail:
  return false;
}
    4db2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4db6:	ldr	r3, [r0, #24]
    4db8:	cmp	r3, r1
    4dba:	bne.n	4d76 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    4dbc:	b.n	4d84 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();
    4dbe:	ldr	r3, [r6, #0]
    4dc0:	mov	r0, r6
    4dc2:	ldr	r3, [r3, #104]	; 0x68

fail:
  return false;
}
    4dc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();
    4dc8:	bx	r3
    4dca:	nop

00004dcc <SharedSpiCard::spiStart() [clone .part.11] [clone .constprop.35]>:
uint32_t SharedSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? csd.capacity() : 0;
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStart() {
    4dcc:	push	{r3, r4, r5, lr}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
  void type(uint8_t value) { m_type = value; }
  bool waitReady(uint16_t ms);
  bool writeData(uint8_t token, const uint8_t* src);
#if SPI_DRIVER_SELECT < 2
  void spiActivate() { m_spiDriver.activate(); }
    4dce:	adds	r5, r0, #4
    4dd0:	mov	r4, r0
    4dd2:	mov	r0, r5
    4dd4:	bl	67a4 <SdSpiArduinoDriver::activate()>
  SPI_ASSERT_NOT_ACTIVE;
  if (!m_spiActive) {
    spiActivate();
    m_spiActive = true;
    4dd8:	movs	r3, #1
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() { sdCsWrite(m_csPin, false); }
    4dda:	ldrb	r0, [r4, #17]
    4ddc:	movs	r1, #0
    4dde:	strb	r3, [r4, #19]
    4de0:	bl	69a4 <sdCsWrite(unsigned char, bool)>
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    SPI_ASSERT_ACTIVE;
    m_spiDriver.send(data);
    4de4:	mov	r0, r5
    4de6:	movs	r1, #255	; 0xff
    spiSelect();
    // Dummy byte to drive MISO busy status.
    spiSend(0XFF);
  }
}
    4de8:	ldmia.w	sp!, {r3, r4, r5, lr}
    4dec:	b.w	6940 <SdSpiArduinoDriver::send(unsigned char)>

00004df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>:
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
    4df0:	push	{r3, r4, r5, lr}
    4df2:	adds	r5, r0, #4
    4df4:	mov	r4, r0
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() { sdCsWrite(m_csPin, false); }
  void spiStart();
  void spiStop();
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    4df6:	movs	r1, #1
    4df8:	ldrb	r0, [r0, #17]
    4dfa:	bl	69a4 <sdCsWrite(unsigned char, bool)>
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    SPI_ASSERT_ACTIVE;
    m_spiDriver.send(data);
    4dfe:	movs	r1, #255	; 0xff
    4e00:	mov	r0, r5
    4e02:	bl	6940 <SdSpiArduinoDriver::send(unsigned char)>
  bool waitReady(uint16_t ms);
  bool writeData(uint8_t token, const uint8_t* src);
#if SPI_DRIVER_SELECT < 2
  void spiActivate() { m_spiDriver.activate(); }
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
    4e06:	mov	r0, r5
    4e08:	bl	68a8 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    // Insure MISO goes to low Z.
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    4e0c:	movs	r3, #0
    4e0e:	strb	r3, [r4, #19]
    4e10:	pop	{r3, r4, r5, pc}
    4e12:	nop

00004e14 <SharedSpiCard::readSector(unsigned long, unsigned char*) [clone .part.19] [clone .constprop.29]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    4e14:	push	{r3, lr}
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4e16:	ldrb	r3, [r0, #19]
    4e18:	cbnz	r3, 4e1e <SharedSpiCard::readSector(unsigned long, unsigned char*) [clone .part.19] [clone .constprop.29]+0xa>
  return true;

fail:
  spiStop();
  return false;
}
    4e1a:	movs	r0, #1
    4e1c:	pop	{r3, pc}
    4e1e:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
    4e22:	movs	r0, #1
    4e24:	pop	{r3, pc}
    4e26:	nop

00004e28 <SharedSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStop() {
    4e28:	push	{r3, r4, r5, r6, r7, lr}
    4e2a:	ldr	r6, [pc, #88]	; (4e84 <SharedSpiCard::writeStop()+0x5c>)
    4e2c:	mov	r7, r0
    4e2e:	adds	r5, r0, #4
    4e30:	ldr	r4, [r6, #0]
class Timeout {
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) { set(ms); }
  uint16_t millis16() { return millis(); }
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4e32:	add.w	r4, r4, #600	; 0x258
    4e36:	uxth	r4, r4
    4e38:	b.n	4e42 <SharedSpiCard::writeStop()+0x1a>
    4e3a:	ldr	r3, [r6, #0]
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    if (timeout.timedOut()) {
    4e3c:	subs	r3, r4, r3
    4e3e:	lsls	r3, r3, #16
    4e40:	bmi.n	4e60 <SharedSpiCard::writeStop()+0x38>
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    4e42:	mov	r0, r5
    4e44:	bl	6908 <SdSpiArduinoDriver::receive()>
  return true;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    4e48:	cmp	r0, #255	; 0xff
    4e4a:	bne.n	4e3a <SharedSpiCard::writeStop()+0x12>
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    SPI_ASSERT_ACTIVE;
    m_spiDriver.send(data);
    4e4c:	mov	r0, r5
    4e4e:	movs	r1, #253	; 0xfd
    4e50:	bl	6940 <SdSpiArduinoDriver::send(unsigned char)>
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4e54:	ldrb	r3, [r7, #19]
    4e56:	cbnz	r3, 4e74 <SharedSpiCard::writeStop()+0x4c>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    4e58:	movs	r3, #0
  return true;
    4e5a:	movs	r0, #1
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    4e5c:	strb	r3, [r7, #20]
  return true;
    4e5e:	pop	{r3, r4, r5, r6, r7, pc}
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    4e60:	movs	r3, #31
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4e62:	ldrb	r0, [r7, #19]
    4e64:	strb	r3, [r7, #18]
    4e66:	cbnz	r0, 4e6a <SharedSpiCard::writeStop()+0x42>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    4e68:	pop	{r3, r4, r5, r6, r7, pc}
    4e6a:	mov	r0, r7
    4e6c:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    4e70:	movs	r0, #0
    4e72:	pop	{r3, r4, r5, r6, r7, pc}
    4e74:	mov	r0, r7
    4e76:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    4e7a:	movs	r3, #0
  return true;
    4e7c:	movs	r0, #1
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    4e7e:	strb	r3, [r7, #20]
  return true;
    4e80:	pop	{r3, r4, r5, r6, r7, pc}
    4e82:	nop
    4e84:	.word	0x20022480

00004e88 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.eraseSingleBlock() : false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::isBusy() {
    4e88:	push	{r3, r4, r5, lr}
  if (m_state == READ_STATE) {
    4e8a:	ldrb	r3, [r0, #20]
    4e8c:	cmp	r3, #1
    4e8e:	beq.n	4ebe <SharedSpiCard::isBusy()+0x36>
    return false;
  }
  bool spiActive = m_spiActive;
  if (!spiActive) {
    4e90:	ldrb	r3, [r0, #19]
    4e92:	mov	r4, r0
    4e94:	cbnz	r3, 4eb0 <SharedSpiCard::isBusy()+0x28>
    4e96:	bl	4dcc <SharedSpiCard::spiStart() [clone .part.11] [clone .constprop.35]>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    4e9a:	adds	r0, r4, #4
    4e9c:	bl	6908 <SdSpiArduinoDriver::receive()>
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4ea0:	ldrb	r3, [r4, #19]
  }
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  bool rtn = 0XFF != spiReceive();
    4ea2:	subs.w	r5, r0, #255	; 0xff
    4ea6:	it	ne
    4ea8:	movne	r5, #1
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4eaa:	cbnz	r3, 4ec2 <SharedSpiCard::isBusy()+0x3a>
  }
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  bool rtn = 0XFF != spiReceive();
    4eac:	mov	r0, r5
    4eae:	pop	{r3, r4, r5, pc}
    4eb0:	adds	r0, #4
    4eb2:	bl	6908 <SdSpiArduinoDriver::receive()>
    4eb6:	subs	r0, #255	; 0xff
    4eb8:	it	ne
    4eba:	movne	r0, #1
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    4ebc:	pop	{r3, r4, r5, pc}
  return readCSD(&csd) ? csd.eraseSingleBlock() : false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::isBusy() {
  if (m_state == READ_STATE) {
    return false;
    4ebe:	movs	r0, #0
    4ec0:	pop	{r3, r4, r5, pc}
    4ec2:	mov	r0, r4
    4ec4:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  }
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  bool rtn = 0XFF != spiReceive();
    4ec8:	mov	r0, r5
    4eca:	pop	{r3, r4, r5, pc}

00004ecc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4ecc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    4ed0:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4ed2:	sub	sp, #8
    4ed4:	mov	r5, r0
    4ed6:	mov	r8, r1
    4ed8:	str	r2, [sp, #4]
  if (!syncDevice()) {
    4eda:	ldr	r3, [r3, #28]
    4edc:	blx	r3
    4ede:	cbnz	r0, 4ee8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1c>
    return 0XFF;
    4ee0:	movs	r0, #255	; 0xff
  uint8_t n = 0;
  do {
    m_status = spiReceive();
  } while (m_status & 0X80 && ++n < 10);
  return m_status;
}
    4ee2:	add	sp, #8
    4ee4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
  if (!syncDevice()) {
    return 0XFF;
  }
  // select card
  if (!m_spiActive) {
    4ee8:	ldrb	r3, [r5, #19]
    4eea:	cmp	r3, #0
    4eec:	beq.n	4f6a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9e>
    spiStart();
  }
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
    4eee:	cmp.w	r8, #0
    4ef2:	beq.n	4f66 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    4ef4:	cmp.w	r8, #12
    4ef8:	beq.n	4f66 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    4efa:	ldr	r7, [pc, #120]	; (4f74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>)
    4efc:	adds	r4, r5, #4
    4efe:	ldr	r6, [r7, #0]
class Timeout {
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) { set(ms); }
  uint16_t millis16() { return millis(); }
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    4f00:	add.w	r6, r6, #300	; 0x12c
    4f04:	uxth	r6, r6
    4f06:	b.n	4f10 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x44>
    4f08:	ldr	r3, [r7, #0]
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    if (timeout.timedOut()) {
    4f0a:	subs	r3, r6, r3
    4f0c:	lsls	r2, r3, #16
    4f0e:	bmi.n	4ee0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    4f10:	mov	r0, r4
    4f12:	bl	6908 <SdSpiArduinoDriver::receive()>
  return true;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    4f16:	cmp	r0, #255	; 0xff
    4f18:	bne.n	4f08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    SPI_ASSERT_ACTIVE;
    m_spiDriver.send(data);
    4f1a:	orr.w	r1, r8, #64	; 0x40
    4f1e:	mov	r0, r4
    4f20:	add	r7, sp, #4
    4f22:	add	r6, sp, #8
    4f24:	bl	6940 <SdSpiArduinoDriver::send(unsigned char)>
    4f28:	ldrb.w	r1, [r6, #-1]!
    4f2c:	mov	r0, r4
    4f2e:	bl	6940 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t* pa = reinterpret_cast<uint8_t*>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    4f32:	cmp	r7, r6
    4f34:	bne.n	4f28 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x5c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    4f36:	cmp.w	r8, #0
    4f3a:	mov	r0, r4
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    4f3c:	mov.w	r6, #10
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    SPI_ASSERT_ACTIVE;
    m_spiDriver.send(data);
    4f40:	ite	ne
    4f42:	movne	r1, #135	; 0x87
    4f44:	moveq	r1, #149	; 0x95
    4f46:	bl	6940 <SdSpiArduinoDriver::send(unsigned char)>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    4f4a:	mov	r0, r4
    4f4c:	bl	6908 <SdSpiArduinoDriver::receive()>
    4f50:	mov	r0, r4
    4f52:	bl	6908 <SdSpiArduinoDriver::receive()>

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  uint8_t n = 0;
  do {
    m_status = spiReceive();
  } while (m_status & 0X80 && ++n < 10);
    4f56:	lsls	r3, r0, #24
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  uint8_t n = 0;
  do {
    m_status = spiReceive();
    4f58:	strb	r0, [r5, #21]
  } while (m_status & 0X80 && ++n < 10);
    4f5a:	bpl.n	4ee2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x16>
    4f5c:	subs	r3, r6, #1
    4f5e:	ands.w	r6, r3, #255	; 0xff
    4f62:	bne.n	4f50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x84>
    4f64:	b.n	4ee2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x16>
    4f66:	adds	r4, r5, #4
    4f68:	b.n	4f1a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x4e>
    4f6a:	mov	r0, r5
    4f6c:	bl	4dcc <SharedSpiCard::spiStart() [clone .part.11] [clone .constprop.35]>
    4f70:	b.n	4eee <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    4f72:	nop
    4f74:	.word	0x20022480

00004f78 <SharedSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4f78:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    4f7a:	movs	r2, #0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4f7c:	mov	r5, r1
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    4f7e:	movs	r1, #58	; 0x3a
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4f80:	mov	r6, r0
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    4f82:	bl	4ecc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4f86:	cbnz	r0, 4fa4 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    4f88:	adds	r7, r6, #4
    4f8a:	adds	r4, r5, #4
    4f8c:	mov	r0, r7
    4f8e:	bl	6908 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
    p[3 - i] = spiReceive();
    4f92:	strb.w	r0, [r4, #-1]!
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    4f96:	cmp	r5, r4
    4f98:	bne.n	4f8c <SharedSpiCard::readOCR(unsigned long*)+0x14>
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4f9a:	ldrb	r4, [r6, #19]
    4f9c:	cbnz	r4, 4fba <SharedSpiCard::readOCR(unsigned long*)+0x42>
    4f9e:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    4fa0:	mov	r0, r4
    4fa2:	pop	{r3, r4, r5, r6, r7, pc}
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    4fa4:	movs	r3, #18
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4fa6:	ldrb	r4, [r6, #19]
    4fa8:	strb	r3, [r6, #18]
    4faa:	cmp	r4, #0
    4fac:	beq.n	4fa0 <SharedSpiCard::readOCR(unsigned long*)+0x28>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    4fae:	movs	r4, #0
    4fb0:	mov	r0, r6
    4fb2:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
}
    4fb6:	mov	r0, r4
    4fb8:	pop	{r3, r4, r5, r6, r7, pc}
    4fba:	mov	r0, r6
    4fbc:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
    4fc0:	mov	r0, r4
    4fc2:	pop	{r3, r4, r5, r6, r7, pc}

00004fc4 <SharedSpiCard::writeStart(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    4fc4:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStart(uint32_t sector) {
    4fc6:	mov	r2, r1
    4fc8:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    4fca:	ldr	r3, [r3, #92]	; 0x5c
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStart(uint32_t sector) {
    4fcc:	sub	sp, #12
    4fce:	ldr	r5, [pc, #68]	; (5014 <SharedSpiCard::writeStart(unsigned long)+0x50>)
    4fd0:	mov	r4, r0
    4fd2:	cmp	r3, r5
    4fd4:	bne.n	5000 <SharedSpiCard::writeStart(unsigned long)+0x3c>
  /** \return success if sync successful. Not for user apps. */
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const { return m_type; }
    4fd6:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    4fd8:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    4fda:	mov.w	r1, #25
    4fde:	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    4fe0:	it	ne
    4fe2:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    4fe4:	bl	4ecc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4fe8:	cbz	r0, 4ff6 <SharedSpiCard::writeStart(unsigned long)+0x32>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    4fea:	movs	r3, #14
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    4fec:	ldrb	r0, [r4, #19]
    4fee:	strb	r3, [r4, #18]
    4ff0:	cbnz	r0, 5008 <SharedSpiCard::writeStart(unsigned long)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    4ff2:	add	sp, #12
    4ff4:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  m_state = WRITE_STATE;
    4ff6:	movs	r3, #2
  return true;
    4ff8:	movs	r0, #1
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  m_state = WRITE_STATE;
    4ffa:	strb	r3, [r4, #20]
  return true;

fail:
  spiStop();
  return false;
}
    4ffc:	add	sp, #12
    4ffe:	pop	{r4, r5, pc}
    5000:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    5002:	blx	r3
    5004:	ldr	r2, [sp, #4]
    5006:	b.n	4fd8 <SharedSpiCard::writeStart(unsigned long)+0x14>
    5008:	mov	r0, r4
    500a:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
    500e:	movs	r0, #0
  return true;

fail:
  spiStop();
  return false;
}
    5010:	add	sp, #12
    5012:	pop	{r4, r5, pc}
    5014:	.word	0x00004d01

00005018 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
  return rtn;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
//------------------------------------------------------------------------------
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    5018:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    501c:	ldr	r6, [pc, #104]	; (5088 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x70>)
    501e:	mov	r5, r0
    5020:	mov	r8, r1
    5022:	mov	r9, r2
    5024:	ldr	r4, [r6, #0]
    5026:	adds	r7, r0, #4
class Timeout {
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) { set(ms); }
  uint16_t millis16() { return millis(); }
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    5028:	add.w	r4, r4, #300	; 0x12c
    502c:	uxth	r4, r4
    502e:	b.n	5038 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    5030:	ldr	r3, [r6, #0]
#endif  // USE_SD_CRC

  // wait for start sector token
  Timeout timeout(SD_READ_TIMEOUT);
  while ((m_status = spiReceive()) == 0XFF) {
    if (timeout.timedOut()) {
    5032:	subs	r3, r4, r3
    5034:	lsls	r3, r3, #16
    5036:	bmi.n	505c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x44>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    5038:	mov	r0, r7
    503a:	bl	6908 <SdSpiArduinoDriver::receive()>
  uint16_t crc;
#endif  // USE_SD_CRC

  // wait for start sector token
  Timeout timeout(SD_READ_TIMEOUT);
  while ((m_status = spiReceive()) == 0XFF) {
    503e:	cmp	r0, #255	; 0xff
    5040:	strb	r0, [r5, #21]
    5042:	beq.n	5030 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
    if (timeout.timedOut()) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_SECTOR) {
    5044:	cmp	r0, #254	; 0xfe
    5046:	beq.n	5062 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4a>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    5048:	movs	r3, #25
    504a:	strb	r3, [r5, #18]
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    504c:	ldrb	r0, [r5, #19]
    504e:	cbz	r0, 5058 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x40>
    5050:	mov	r0, r5
    5052:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    5056:	movs	r0, #0
}
    5058:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    505c:	movs	r3, #30
    505e:	strb	r3, [r5, #18]
    5060:	b.n	504c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x34>
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive(buf, n);
    5062:	mov	r2, r9
    5064:	mov	r1, r8
    5066:	mov	r0, r7
    5068:	bl	6920 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    506c:	strb	r0, [r5, #21]
    506e:	cbz	r0, 5076 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5e>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    5070:	movs	r3, #38	; 0x26
    5072:	strb	r3, [r5, #18]
    5074:	b.n	504c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x34>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    5076:	mov	r0, r7
    5078:	bl	6908 <SdSpiArduinoDriver::receive()>
    507c:	mov	r0, r7
    507e:	bl	6908 <SdSpiArduinoDriver::receive()>
#else   // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    5082:	movs	r0, #1
    5084:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5088:	.word	0x20022480

0000508c <SharedSpiCard::readSCR(scr_t*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readSCR(scr_t* scr) {
    508c:	push	{r3, r4, r5, lr}
    508e:	mov	r4, r0
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    5090:	movs	r2, #0
    5092:	mov	r5, r1
    5094:	movs	r1, #55	; 0x37
    5096:	bl	4ecc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    509a:	mov	r0, r4
    509c:	movs	r2, #0
    509e:	movs	r1, #51	; 0x33
    50a0:	bl	4ecc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  uint8_t* dst = reinterpret_cast<uint8_t*>(scr);
  if (cardAcmd(ACMD51, 0)) {
    50a4:	cbz	r0, 50b8 <SharedSpiCard::readSCR(scr_t*)+0x2c>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    50a6:	movs	r3, #24
    50a8:	strb	r3, [r4, #18]
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    50aa:	ldrb	r3, [r4, #19]
    50ac:	cbz	r3, 50b4 <SharedSpiCard::readSCR(scr_t*)+0x28>
    50ae:	mov	r0, r4
    50b0:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  return true;

fail:
  spiStop();
  return false;
}
    50b4:	movs	r0, #0
    50b6:	pop	{r3, r4, r5, pc}
  uint8_t* dst = reinterpret_cast<uint8_t*>(scr);
  if (cardAcmd(ACMD51, 0)) {
    error(SD_CARD_ERROR_ACMD51);
    goto fail;
  }
  if (!readData(dst, sizeof(scr_t))) {
    50b8:	mov	r1, r5
    50ba:	movs	r2, #8
    50bc:	mov	r0, r4
    50be:	bl	5018 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    50c2:	cmp	r0, #0
    50c4:	beq.n	50aa <SharedSpiCard::readSCR(scr_t*)+0x1e>
    50c6:	mov	r0, r4
  return true;

fail:
  spiStop();
  return false;
}
    50c8:	ldmia.w	sp!, {r3, r4, r5, lr}
    50cc:	b.w	4e14 <SharedSpiCard::readSector(unsigned long, unsigned char*) [clone .part.19] [clone .constprop.29]>

000050d0 <SharedSpiCard::readSDS(sds_t*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readSDS(sds_t* sds) {
    50d0:	push	{r3, r4, r5, lr}
    50d2:	mov	r4, r0
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    50d4:	movs	r2, #0
    50d6:	mov	r5, r1
    50d8:	movs	r1, #55	; 0x37
    50da:	bl	4ecc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    50de:	mov	r0, r4
    50e0:	movs	r2, #0
    50e2:	movs	r1, #13
    50e4:	bl	4ecc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  uint8_t* dst = reinterpret_cast<uint8_t*>(sds);
  // retrun is R2 so read extra status byte.
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    50e8:	cbz	r0, 50fc <SharedSpiCard::readSDS(sds_t*)+0x2c>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    50ea:	movs	r3, #21
    50ec:	strb	r3, [r4, #18]
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    50ee:	ldrb	r3, [r4, #19]
    50f0:	cbz	r3, 50f8 <SharedSpiCard::readSDS(sds_t*)+0x28>
    50f2:	mov	r0, r4
    50f4:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  return true;

fail:
  spiStop();
  return false;
}
    50f8:	movs	r0, #0
    50fa:	pop	{r3, r4, r5, pc}
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    50fc:	adds	r0, r4, #4
    50fe:	bl	6908 <SdSpiArduinoDriver::receive()>
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readSDS(sds_t* sds) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(sds);
  // retrun is R2 so read extra status byte.
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    5102:	cmp	r0, #0
    5104:	bne.n	50ea <SharedSpiCard::readSDS(sds_t*)+0x1a>
    error(SD_CARD_ERROR_ACMD13);
    goto fail;
  }
  if (!readData(dst, sizeof(sds_t))) {
    5106:	mov	r1, r5
    5108:	movs	r2, #64	; 0x40
    510a:	mov	r0, r4
    510c:	bl	5018 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5110:	cmp	r0, #0
    5112:	beq.n	50ee <SharedSpiCard::readSDS(sds_t*)+0x1e>
    5114:	mov	r0, r4
  return true;

fail:
  spiStop();
  return false;
}
    5116:	ldmia.w	sp!, {r3, r4, r5, lr}
    511a:	b.w	4e14 <SharedSpiCard::readSector(unsigned long, unsigned char*) [clone .part.19] [clone .constprop.29]>
    511e:	nop

00005120 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    5120:	push	{r3, r4, r5, lr}
    5122:	mov	r5, r2
  if (cardCommand(CMD6, arg)) {
    5124:	mov	r2, r1
    5126:	movs	r1, #6
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    5128:	mov	r4, r0
  if (cardCommand(CMD6, arg)) {
    512a:	bl	4ecc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    512e:	cbz	r0, 5142 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x22>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    5130:	movs	r3, #4
    5132:	strb	r3, [r4, #18]
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    5134:	ldrb	r3, [r4, #19]
    5136:	cbz	r3, 513e <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x1e>
    5138:	mov	r0, r4
    513a:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  return true;

fail:
  spiStop();
  return false;
}
    513e:	movs	r0, #0
    5140:	pop	{r3, r4, r5, pc}
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
  if (cardCommand(CMD6, arg)) {
    error(SD_CARD_ERROR_CMD6);
    goto fail;
  }
  if (!readData(status, 64)) {
    5142:	mov	r1, r5
    5144:	movs	r2, #64	; 0x40
    5146:	mov	r0, r4
    5148:	bl	5018 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    514c:	cmp	r0, #0
    514e:	beq.n	5134 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x14>
    5150:	mov	r0, r4
  return true;

fail:
  spiStop();
  return false;
}
    5152:	ldmia.w	sp!, {r3, r4, r5, lr}
    5156:	b.w	4e14 <SharedSpiCard::readSector(unsigned long, unsigned char*) [clone .part.19] [clone .constprop.29]>
    515a:	nop

0000515c <SharedSpiCard::readRegister(unsigned char, void*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    515c:	push	{r3, r4, r5, lr}
    515e:	mov	r5, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    5160:	movs	r2, #0
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    5162:	mov	r4, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    5164:	bl	4ecc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5168:	cbz	r0, 517c <SharedSpiCard::readRegister(unsigned char, void*)+0x20>
    516a:	movs	r3, #28
    516c:	strb	r3, [r4, #18]
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    516e:	ldrb	r3, [r4, #19]
    5170:	cbz	r3, 5178 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
    5172:	mov	r0, r4
    5174:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  return true;

fail:
  spiStop();
  return false;
}
    5178:	movs	r0, #0
    517a:	pop	{r3, r4, r5, pc}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    517c:	mov	r1, r5
    517e:	movs	r2, #16
    5180:	mov	r0, r4
    5182:	bl	5018 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5186:	cmp	r0, #0
    5188:	beq.n	516e <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
    518a:	mov	r0, r4
  return true;

fail:
  spiStop();
  return false;
}
    518c:	ldmia.w	sp!, {r3, r4, r5, lr}
    5190:	b.w	4e14 <SharedSpiCard::readSector(unsigned long, unsigned char*) [clone .part.19] [clone .constprop.29]>

00005194 <SharedSpiCard::readCSD(csd_t*)>:
   *
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    5194:	mov	r2, r1
    5196:	movs	r1, #9
    5198:	b.w	515c <SharedSpiCard::readRegister(unsigned char, void*)>

0000519c <SharedSpiCard::readCID(cid_t*)>:
   *
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    519c:	mov	r2, r1
    519e:	movs	r1, #10
    51a0:	b.w	515c <SharedSpiCard::readRegister(unsigned char, void*)>

000051a4 <SharedSpiCard::sectorCount()>:
  return false;
}
//------------------------------------------------------------------------------
uint32_t SharedSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? csd.capacity() : 0;
    51a4:	ldr	r3, [r0, #0]
    51a6:	ldr	r2, [pc, #140]	; (5234 <SharedSpiCard::sectorCount()+0x90>)
    51a8:	ldr	r3, [r3, #72]	; 0x48
    51aa:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SharedSpiCard::sectorCount() {
    51ac:	push	{r4, r5, r6, lr}
    51ae:	sub	sp, #16
    51b0:	bne.n	5210 <SharedSpiCard::sectorCount()+0x6c>
   *
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    51b2:	mov	r2, sp
    51b4:	movs	r1, #9
    51b6:	bl	515c <SharedSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? csd.capacity() : 0;
    51ba:	cbz	r0, 51ca <SharedSpiCard::sectorCount()+0x26>
  uint8_t csd[16];
  // Extract big endian fields.
  /** \return Capacity in sectors */
  uint32_t capacity() const {
    uint32_t c_size;
    uint8_t ver = csd[0] >> 6;
    51bc:	ldrb.w	r3, [sp]
    if (ver == 0) {
    51c0:	asrs	r3, r3, #6
    51c2:	beq.n	51ce <SharedSpiCard::sectorCount()+0x2a>
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
    51c4:	cmp	r3, #1
    51c6:	beq.n	5216 <SharedSpiCard::sectorCount()+0x72>
    51c8:	movs	r0, #0
}
    51ca:	add	sp, #16
    51cc:	pop	{r4, r5, r6, pc}
    51ce:	ldrb.w	r2, [sp, #6]
    if (ver == 0) {
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    51d2:	ldrb.w	r4, [sp, #9]
    51d6:	lsls	r2, r2, #10
    51d8:	ldrb.w	r3, [sp, #8]
    51dc:	lsls	r4, r4, #1
    51de:	ldrb.w	r6, [sp, #10]
    51e2:	and.w	r2, r2, #3072	; 0xc00
    51e6:	ldrb.w	r1, [sp, #5]
    51ea:	and.w	r4, r4, #6
    51ee:	ldrb.w	r5, [sp, #7]
    51f2:	orr.w	r3, r2, r3, lsr #6
    51f6:	and.w	r1, r1, #15
    51fa:	orr.w	r2, r4, r6, lsr #7
    51fe:	orr.w	r0, r3, r5, lsl #2
    5202:	add	r2, r1
    5204:	adds	r3, r0, #1
    5206:	subs	r0, r2, #7
    5208:	lsl.w	r0, r3, r0
    520c:	add	sp, #16
    520e:	pop	{r4, r5, r6, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SharedSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? csd.capacity() : 0;
    5210:	mov	r1, sp
    5212:	blx	r3
    5214:	b.n	51ba <SharedSpiCard::sectorCount()+0x16>
    } else if (ver == 1) {
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5216:	ldrb.w	r0, [sp, #7]
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
      return (c_size + 1) << 10;
    521a:	ldrh.w	r2, [sp, #8]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
      c_size = (uint32_t)(csd[7] & 63) << 16;
    521e:	lsls	r0, r0, #16
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
      return (c_size + 1) << 10;
    5220:	rev16	r2, r2
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5222:	and.w	r3, r0, #4128768	; 0x3f0000
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
      return (c_size + 1) << 10;
    5226:	uxth	r0, r2
    5228:	orrs	r0, r3
    522a:	adds	r0, #1
    522c:	lsls	r0, r0, #10
}
    522e:	add	sp, #16
    5230:	pop	{r4, r5, r6, pc}
    5232:	nop
    5234:	.word	0x00005195

00005238 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  }
}
//------------------------------------------------------------------------------
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    5238:	ldr	r3, [r0, #0]
    spiEnd();
    m_beginCalled = false;
  }
}
//------------------------------------------------------------------------------
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    523a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    523e:	ldr	r3, [r3, #72]	; 0x48
    spiEnd();
    m_beginCalled = false;
  }
}
//------------------------------------------------------------------------------
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5240:	sub	sp, #16
    5242:	ldr	r4, [pc, #200]	; (530c <SharedSpiCard::erase(unsigned long, unsigned long)+0xd4>)
    5244:	mov	r5, r0
    5246:	mov	r7, r1
    5248:	mov	r6, r2
    524a:	cmp	r3, r4
    524c:	bne.n	52ac <SharedSpiCard::erase(unsigned long, unsigned long)+0x74>
    524e:	mov	r2, sp
    5250:	movs	r1, #9
    5252:	bl	515c <SharedSpiCard::readRegister(unsigned char, void*)>
    5256:	mov	r4, r0
  csd_t csd;
  if (!readCSD(&csd)) {
    5258:	cbz	r4, 527c <SharedSpiCard::erase(unsigned long, unsigned long)+0x44>
    525a:	ldrb.w	r3, [sp, #10]
    goto fail;
  }
  // check for single sector erase
  if (!csd.eraseSingleBlock()) {
    525e:	lsls	r2, r3, #25
    5260:	bpl.n	5290 <SharedSpiCard::erase(unsigned long, unsigned long)+0x58>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    5262:	ldrb	r3, [r5, #22]
    5264:	cmp	r3, #3
    5266:	beq.n	526c <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    5268:	lsls	r7, r7, #9
    lastSector <<= 9;
    526a:	lsls	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    526c:	mov	r2, r7
    526e:	movs	r1, #32
    5270:	mov	r0, r5
    5272:	bl	4ecc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5276:	cbz	r0, 52b4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    5278:	movs	r3, #39	; 0x27
    527a:	strb	r3, [r5, #18]
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    527c:	ldrb	r4, [r5, #19]
    527e:	cbz	r4, 5288 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    5280:	mov	r0, r5
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    5282:	movs	r4, #0
    5284:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
}
    5288:	mov	r0, r4
    528a:	add	sp, #16
    528c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  // check for single sector erase
  if (!csd.eraseSingleBlock()) {
    // erase size mask
    uint8_t m = csd.eraseSize() - 1;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    5290:	lsls	r3, r3, #1
    5292:	ldrb.w	r1, [sp, #11]
    5296:	adds	r2, r6, #1
    5298:	and.w	r3, r3, #126	; 0x7e
    529c:	orrs	r2, r7
    529e:	orr.w	r3, r3, r1, lsr #7
    52a2:	tst	r3, r2
    52a4:	beq.n	5262 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    52a6:	movs	r3, #40	; 0x28
    52a8:	strb	r3, [r5, #18]
    52aa:	b.n	527c <SharedSpiCard::erase(unsigned long, unsigned long)+0x44>
  }
}
//------------------------------------------------------------------------------
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    52ac:	mov	r1, sp
    52ae:	blx	r3
    52b0:	mov	r4, r0
    52b2:	b.n	5258 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    52b4:	mov	r2, r6
    52b6:	movs	r1, #33	; 0x21
    52b8:	mov	r0, r5
    52ba:	bl	4ecc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    52be:	cmp	r0, #0
    52c0:	bne.n	5278 <SharedSpiCard::erase(unsigned long, unsigned long)+0x40>
      cardCommand(CMD38, 0)) {
    52c2:	mov	r2, r0
    52c4:	movs	r1, #38	; 0x26
    52c6:	mov	r0, r5
    52c8:	bl	4ecc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    52cc:	cmp	r0, #0
    52ce:	bne.n	5278 <SharedSpiCard::erase(unsigned long, unsigned long)+0x40>
    52d0:	ldr	r7, [pc, #60]	; (5310 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>)
class Timeout {
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) { set(ms); }
  uint16_t millis16() { return millis(); }
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    52d2:	movw	r6, #10000	; 0x2710
    52d6:	add.w	r8, r5, #4
    52da:	ldr	r3, [r7, #0]
    52dc:	add	r6, r3
    52de:	uxth	r6, r6
    52e0:	b.n	52ea <SharedSpiCard::erase(unsigned long, unsigned long)+0xb2>
    52e2:	ldr	r3, [r7, #0]
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    if (timeout.timedOut()) {
    52e4:	subs	r3, r6, r3
    52e6:	lsls	r3, r3, #16
    52e8:	bmi.n	5304 <SharedSpiCard::erase(unsigned long, unsigned long)+0xcc>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    52ea:	mov	r0, r8
    52ec:	bl	6908 <SdSpiArduinoDriver::receive()>
  return true;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    52f0:	cmp	r0, #255	; 0xff
    52f2:	bne.n	52e2 <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    52f4:	ldrb	r3, [r5, #19]
    52f6:	cmp	r3, #0
    52f8:	beq.n	5288 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    52fa:	mov	r0, r5
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  spiStop();
  return true;
    52fc:	mov	r4, r3
    52fe:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
    5302:	b.n	5288 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    5304:	movs	r3, #41	; 0x29
    5306:	strb	r3, [r5, #18]
    5308:	b.n	527c <SharedSpiCard::erase(unsigned long, unsigned long)+0x44>
    530a:	nop
    530c:	.word	0x00005195
    5310:	.word	0x20022480

00005314 <SharedSpiCard::readStart(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    5314:	ldr	r3, [r0, #0]
  return readStop();
fail:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStart(uint32_t sector) {
    5316:	mov	r2, r1
    5318:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    531a:	ldr	r3, [r3, #92]	; 0x5c
  return readStop();
fail:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStart(uint32_t sector) {
    531c:	sub	sp, #12
    531e:	ldr	r5, [pc, #68]	; (5364 <SharedSpiCard::readStart(unsigned long)+0x50>)
    5320:	mov	r4, r0
    5322:	cmp	r3, r5
    5324:	bne.n	5350 <SharedSpiCard::readStart(unsigned long)+0x3c>
  /** \return success if sync successful. Not for user apps. */
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const { return m_type; }
    5326:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    5328:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    532a:	mov.w	r1, #18
    532e:	mov	r0, r4
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    5330:	it	ne
    5332:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    5334:	bl	4ecc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5338:	cbz	r0, 5346 <SharedSpiCard::readStart(unsigned long)+0x32>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    533a:	movs	r3, #12
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    533c:	ldrb	r0, [r4, #19]
    533e:	strb	r3, [r4, #18]
    5340:	cbnz	r0, 5358 <SharedSpiCard::readStart(unsigned long)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    5342:	add	sp, #12
    5344:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  m_state = READ_STATE;
    5346:	movs	r3, #1
  return true;
    5348:	mov	r0, r3
  }
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  m_state = READ_STATE;
    534a:	strb	r3, [r4, #20]
  return true;

fail:
  spiStop();
  return false;
}
    534c:	add	sp, #12
    534e:	pop	{r4, r5, pc}
    5350:	str	r1, [sp, #4]
fail:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    5352:	blx	r3
    5354:	ldr	r2, [sp, #4]
    5356:	b.n	5328 <SharedSpiCard::readStart(unsigned long)+0x14>
    5358:	mov	r0, r4
    535a:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
    535e:	movs	r0, #0
  return true;

fail:
  spiStop();
  return false;
}
    5360:	add	sp, #12
    5362:	pop	{r4, r5, pc}
    5364:	.word	0x00004d01

00005368 <SharedSpiCard::readStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStop() {
    5368:	push	{r4, r5, r6, lr}
  m_state = IDLE_STATE;
    536a:	movs	r6, #0
  if (cardCommand(CMD12, 0)) {
    536c:	movs	r1, #12
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readStop() {
    536e:	mov	r4, r0
  m_state = IDLE_STATE;
    5370:	strb	r6, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    5372:	mov	r2, r6
    5374:	bl	4ecc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5378:	cbz	r0, 5386 <SharedSpiCard::readStop()+0x1e>
    537a:	movs	r3, #9
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    537c:	ldrb	r5, [r4, #19]
    537e:	strb	r3, [r4, #18]
    5380:	cbnz	r5, 539a <SharedSpiCard::readStop()+0x32>
  return true;

fail:
  spiStop();
  return false;
}
    5382:	mov	r0, r5
    5384:	pop	{r4, r5, r6, pc}
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    5386:	ldrb	r5, [r4, #19]
    5388:	cbnz	r5, 5390 <SharedSpiCard::readStop()+0x28>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    538a:	movs	r5, #1

fail:
  spiStop();
  return false;
}
    538c:	mov	r0, r5
    538e:	pop	{r4, r5, r6, pc}
    5390:	mov	r0, r4
    5392:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
    5396:	mov	r0, r5
    5398:	pop	{r4, r5, r6, pc}
    539a:	mov	r5, r6
    539c:	mov	r0, r4
    539e:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
    53a2:	mov	r0, r5
    53a4:	pop	{r4, r5, r6, pc}
    53a6:	nop

000053a8 <SharedSpiCard::syncDevice()>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SharedSpiCard::syncDevice() {
  if (m_state == WRITE_STATE) {
    53a8:	ldrb	r3, [r0, #20]
    53aa:	cmp	r3, #2
    53ac:	beq.n	53ba <SharedSpiCard::syncDevice()+0x12>
    return writeStop();
  }
  if (m_state == READ_STATE) {
    53ae:	cmp	r3, #1
    53b0:	beq.n	53b6 <SharedSpiCard::syncDevice()+0xe>
    return readStop();
  }
  return true;
}
    53b2:	movs	r0, #1
    53b4:	bx	lr
bool SharedSpiCard::syncDevice() {
  if (m_state == WRITE_STATE) {
    return writeStop();
  }
  if (m_state == READ_STATE) {
    return readStop();
    53b6:	b.w	5368 <SharedSpiCard::readStop()>
  }
}
//------------------------------------------------------------------------------
bool SharedSpiCard::syncDevice() {
  if (m_state == WRITE_STATE) {
    return writeStop();
    53ba:	ldr	r3, [r0, #0]
    53bc:	ldr	r3, [r3, #104]	; 0x68
    53be:	bx	r3

000053c0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    53c0:	push	{r3, r4, r5, r6, r7, lr}
    53c2:	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    53c4:	ldrb	r3, [r0, #20]
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    53c6:	mov	r6, r0
    53c8:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    53ca:	cmp	r3, #1
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    53cc:	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    53ce:	beq.n	540a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if (!readStart(sector)) {
    53d0:	mov	r1, r5
    53d2:	mov	r0, r6
    53d4:	bl	5314 <SharedSpiCard::readStart(unsigned long)>
    53d8:	cbz	r0, 53fa <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3a>
      goto fail;
    }
    m_curSector = sector;
    53da:	str	r5, [r6, #24]
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    53dc:	cbz	r7, 53fe <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3e>
    53de:	movs	r5, #0
    53e0:	b.n	53e6 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
    53e2:	cmp	r7, r5
    53e4:	beq.n	53fe <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3e>
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    53e6:	mov.w	r2, #512	; 0x200
    53ea:	mov	r1, r4
    53ec:	mov	r0, r6
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    53ee:	adds	r5, #1
    53f0:	add	r4, r2
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    53f2:	bl	5018 <SharedSpiCard::readData(unsigned char*, unsigned int)>
      goto fail;
    }
    m_curSector = sector;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst)) {
    53f6:	cmp	r0, #0
    53f8:	bne.n	53e2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : readStop();

fail:
  return false;
    53fa:	movs	r0, #0
    53fc:	pop	{r3, r4, r5, r6, r7, pc}
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst)) {
      goto fail;
    }
  }
  m_curSector += ns;
    53fe:	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    5400:	ldrb	r0, [r6, #28]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst)) {
      goto fail;
    }
  }
  m_curSector += ns;
    5402:	add	r7, r3
    5404:	str	r7, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    5406:	cbz	r0, 5412 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x52>

fail:
  return false;
}
    5408:	pop	{r3, r4, r5, r6, r7, pc}
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
  if (sdState() != READ_STATE || sector != m_curSector) {
    540a:	ldr	r3, [r0, #24]
    540c:	cmp	r3, r1
    540e:	bne.n	53d0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x10>
    5410:	b.n	53dc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
    if (!readData(dst)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : readStop();
    5412:	mov	r0, r6

fail:
  return false;
}
    5414:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (!readData(dst)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : readStop();
    5418:	b.w	5368 <SharedSpiCard::readStop()>

0000541c <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    541c:	push	{r4, r5, r6, lr}
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    SPI_ASSERT_ACTIVE;
    m_spiDriver.send(data);
    541e:	adds	r4, r0, #4
    5420:	mov	r6, r2
    5422:	mov	r5, r0
    5424:	mov	r0, r4
    5426:	bl	6940 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    SPI_ASSERT_ACTIVE;
    m_spiDriver.send(buf, n);
    542a:	mov.w	r2, #512	; 0x200
    542e:	mov	r1, r6
    5430:	mov	r0, r4
    5432:	bl	6954 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    SPI_ASSERT_ACTIVE;
    m_spiDriver.send(data);
    5436:	mov	r0, r4
    5438:	movs	r1, #255	; 0xff
    543a:	bl	6940 <SdSpiArduinoDriver::send(unsigned char)>
    543e:	mov	r0, r4
    5440:	movs	r1, #255	; 0xff
    5442:	bl	6940 <SdSpiArduinoDriver::send(unsigned char)>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    5446:	mov	r0, r4
    5448:	bl	6908 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    544c:	and.w	r3, r0, #31
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    5450:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    5452:	cmp	r3, #5
    5454:	beq.n	546a <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    5456:	movs	r3, #33	; 0x21
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    5458:	ldrb	r0, [r5, #19]
    545a:	strb	r3, [r5, #18]
    545c:	cbnz	r0, 5460 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    545e:	pop	{r4, r5, r6, pc}
    5460:	mov	r0, r5
    5462:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  }
  return true;

fail:
  spiStop();
  return false;
    5466:	movs	r0, #0
    5468:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    546a:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    546c:	pop	{r4, r5, r6, pc}
    546e:	nop

00005470 <SharedSpiCard::writeData(unsigned char const*)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeData(const uint8_t* src) {
    5470:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5474:	ldr	r5, [pc, #80]	; (54c8 <SharedSpiCard::writeData(unsigned char const*)+0x58>)
    5476:	mov	r7, r0
    5478:	mov	r8, r1
    547a:	adds	r6, r0, #4
    547c:	ldr	r4, [r5, #0]
class Timeout {
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) { set(ms); }
  uint16_t millis16() { return millis(); }
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    547e:	add.w	r4, r4, #600	; 0x258
    5482:	uxth	r4, r4
    5484:	b.n	548e <SharedSpiCard::writeData(unsigned char const*)+0x1e>
    5486:	ldr	r3, [r5, #0]
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    if (timeout.timedOut()) {
    5488:	subs	r3, r4, r3
    548a:	lsls	r3, r3, #16
    548c:	bmi.n	54ac <SharedSpiCard::writeData(unsigned char const*)+0x3c>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    548e:	mov	r0, r6
    5490:	bl	6908 <SdSpiArduinoDriver::receive()>
  return true;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    5494:	cmp	r0, #255	; 0xff
    5496:	bne.n	5486 <SharedSpiCard::writeData(unsigned char const*)+0x16>
  // wait for previous write to finish
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    5498:	mov	r2, r8
    549a:	movs	r1, #252	; 0xfc
    549c:	mov	r0, r7
    549e:	bl	541c <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    54a2:	cbnz	r0, 54c2 <SharedSpiCard::writeData(unsigned char const*)+0x52>
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    54a4:	ldrb	r0, [r7, #19]
    54a6:	cbnz	r0, 54b6 <SharedSpiCard::writeData(unsigned char const*)+0x46>
  return true;

fail:
  spiStop();
  return false;
}
    54a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    54ac:	movs	r3, #37	; 0x25
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    54ae:	ldrb	r0, [r7, #19]
    54b0:	strb	r3, [r7, #18]
    54b2:	cmp	r0, #0
    54b4:	beq.n	54a8 <SharedSpiCard::writeData(unsigned char const*)+0x38>
    54b6:	mov	r0, r7
    54b8:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
  }
  return true;

fail:
  spiStop();
  return false;
    54bc:	movs	r0, #0
    54be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54c6:	nop
    54c8:	.word	0x20022480

000054cc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    54cc:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    54ce:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    54d2:	ldr	r3, [r3, #92]	; 0x5c
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    54d4:	sub	sp, #8
    54d6:	ldr	r5, [pc, #160]	; (5578 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xac>)
    54d8:	mov	r4, r0
    54da:	mov	r6, r2
    54dc:	cmp	r3, r5
    54de:	bne.n	5550 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x84>
  /** \return success if sync successful. Not for user apps. */
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const { return m_type; }
    54e0:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    54e2:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD24, sector)) {
    54e4:	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    54e6:	it	ne
    54e8:	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, sector)) {
    54ea:	mov	r2, r1
    54ec:	movs	r1, #24
    54ee:	bl	4ecc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    54f2:	cbz	r0, 550c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x40>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    54f4:	movs	r3, #13
    54f6:	strb	r3, [r4, #18]
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    54f8:	ldrb	r5, [r4, #19]
    54fa:	cbz	r5, 5504 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
    54fc:	mov	r0, r4
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    54fe:	movs	r5, #0
    5500:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
}
    5504:	mov	r0, r5
    5506:	add	sp, #8
    5508:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  if (cardCommand(CMD24, sector)) {
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_SECTOR, src)) {
    550c:	mov	r2, r6
    550e:	movs	r1, #254	; 0xfe
    5510:	mov	r0, r4
    5512:	bl	541c <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    5516:	mov	r5, r0
    5518:	cmp	r0, #0
    551a:	beq.n	54f8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2c>
    551c:	ldr	r7, [pc, #92]	; (557c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
    551e:	add.w	r8, r4, #4
    5522:	ldr	r6, [r7, #0]
class Timeout {
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) { set(ms); }
  uint16_t millis16() { return millis(); }
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    5524:	add.w	r6, r6, #600	; 0x258
    5528:	uxth	r6, r6
    552a:	b.n	5534 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x68>
    552c:	ldr	r3, [r7, #0]
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    if (timeout.timedOut()) {
    552e:	subs	r3, r6, r3
    5530:	lsls	r3, r3, #16
    5532:	bmi.n	5558 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8c>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    5534:	mov	r0, r8
    5536:	bl	6908 <SdSpiArduinoDriver::receive()>
  return true;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::waitReady(uint16_t ms) {
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
    553a:	cmp	r0, #255	; 0xff
    553c:	bne.n	552c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x60>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
    553e:	movs	r2, #0
    5540:	movs	r1, #13
    5542:	mov	r0, r4
    5544:	bl	4ecc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5548:	cbz	r0, 555e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x92>
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    //    (void)code;
    m_errorCode = code;
    554a:	movs	r3, #10
    554c:	strb	r3, [r4, #18]
    554e:	b.n	54f8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2c>
    5550:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    5552:	blx	r3
    5554:	ldr	r1, [sp, #4]
    5556:	b.n	54e2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    5558:	movs	r3, #36	; 0x24
    555a:	strb	r3, [r4, #18]
    555c:	b.n	54f8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2c>
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
  void spiDeactivate() { m_spiDriver.deactivate(); }
  void spiEnd() { m_spiDriver.end(); }
  uint8_t spiReceive() {
    SPI_ASSERT_ACTIVE;
    return m_spiDriver.receive();
    555e:	mov	r0, r8
    5560:	bl	6908 <SdSpiArduinoDriver::receive()>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
    5564:	cmp	r0, #0
    5566:	bne.n	554a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x7e>
  }
}
//------------------------------------------------------------------------------
void SharedSpiCard::spiStop() {
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
    5568:	ldrb	r3, [r4, #19]
    556a:	cmp	r3, #0
    556c:	beq.n	5504 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
    556e:	mov	r0, r4
    goto fail;
  }
#endif  // CHECK_FLASH_PROGRAMMING

  spiStop();
  return true;
    5570:	mov	r5, r3
    5572:	bl	4df0 <SharedSpiCard::spiStop() [clone .part.12] [clone .constprop.39]>
    5576:	b.n	5504 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
    5578:	.word	0x00004d01
    557c:	.word	0x20022480

00005580 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  }
  m_dedicatedSpi = value;
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    5580:	push	{r4}
  if (m_dedicatedSpi) {
    5582:	ldrb	r4, [r0, #28]
    5584:	cbnz	r4, 558e <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe>
    return writeSectors(sector, src, 1);
  }
  return SharedSpiCard::writeSector(sector, src);
}
    5586:	ldr.w	r4, [sp], #4
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_dedicatedSpi) {
    return writeSectors(sector, src, 1);
  }
  return SharedSpiCard::writeSector(sector, src);
    558a:	b.w	54cc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_dedicatedSpi) {
    return writeSectors(sector, src, 1);
    558e:	ldr	r4, [r0, #0]
    5590:	movs	r3, #1
    5592:	ldr	r4, [r4, #36]	; 0x24
    5594:	mov	ip, r4
  }
  return SharedSpiCard::writeSector(sector, src);
}
    5596:	ldr.w	r4, [sp], #4
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_dedicatedSpi) {
    return writeSectors(sector, src, 1);
    559a:	bx	ip

0000559c <SdioCard::end()>:
   */
  bool cardCMD6(uint32_t arg, uint8_t* status);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    559c:	bx	lr
    559e:	nop

000055a0 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    55a0:	ldr	r3, [pc, #32]	; (55c4 <sdIrs()+0x24>)
    55a2:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    55a4:	ldr	r2, [pc, #32]	; (55c8 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    55a6:	ldr	r0, [pc, #36]	; (55cc <sdIrs()+0x2c>)
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    55a8:	push	{r4}
  SDHC_IRQSIGEN = 0;
    55aa:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    55ac:	ldr	r4, [r3, #48]	; 0x30
    55ae:	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    55b0:	ldr	r2, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    55b2:	ldr.w	r4, [sp], #4
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
    55b6:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    55b8:	ldr	r2, [r3, #72]	; 0x48
    55ba:	bic.w	r2, r2, #129	; 0x81
    55be:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    55c0:	strb	r1, [r0, #0]
}
    55c2:	bx	lr
    55c4:	.word	0x402c0000
    55c8:	.word	0x20021b94
    55cc:	.word	0x200224b2

000055d0 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    55d0:	ldr	r3, [pc, #12]	; (55e0 <isBusyCommandComplete()+0x10>)
    55d2:	ldr	r0, [pc, #16]	; (55e4 <isBusyCommandComplete()+0x14>)
    55d4:	ldr	r3, [r3, #48]	; 0x30
    55d6:	ands	r0, r3
}
    55d8:	clz	r0, r0
    55dc:	lsrs	r0, r0, #5
    55de:	bx	lr
    55e0:	.word	0x402c0000
    55e4:	.word	0x000f0001

000055e8 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    55e8:	ldr	r3, [pc, #8]	; (55f4 <isBusyCommandInhibit()+0xc>)
    55ea:	ldr	r0, [r3, #36]	; 0x24
    55ec:	and.w	r0, r0, #1
    55f0:	bx	lr
    55f2:	nop
    55f4:	.word	0x402c0000

000055f8 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    55f8:	ldr	r3, [pc, #12]	; (5608 <isBusyDat()+0x10>)
    55fa:	ldr	r0, [r3, #36]	; 0x24
    55fc:	eor.w	r0, r0, #16777216	; 0x1000000
    5600:	ubfx	r0, r0, #24, #1
    5604:	bx	lr
    5606:	nop
    5608:	.word	0x402c0000

0000560c <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() { return m_dmaBusy; }
    560c:	ldr	r3, [pc, #4]	; (5614 <isBusyDMA()+0x8>)
    560e:	ldrb	r0, [r3, #0]
    5610:	bx	lr
    5612:	nop
    5614:	.word	0x200224b2

00005618 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    5618:	ldr	r3, [pc, #12]	; (5628 <isBusyFifoRead()+0x10>)
    561a:	ldr	r0, [r3, #36]	; 0x24
    561c:	eor.w	r0, r0, #2048	; 0x800
    5620:	ubfx	r0, r0, #11, #1
    5624:	bx	lr
    5626:	nop
    5628:	.word	0x402c0000

0000562c <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
    562c:	ldr	r3, [pc, #12]	; (563c <isBusyFifoWrite()+0x10>)
    562e:	ldr	r0, [r3, #36]	; 0x24
    5630:	eor.w	r0, r0, #1024	; 0x400
    5634:	ubfx	r0, r0, #10, #1
    5638:	bx	lr
    563a:	nop
    563c:	.word	0x402c0000

00005640 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5640:	ldr	r3, [pc, #12]	; (5650 <isBusyTransferComplete()+0x10>)
    5642:	ldr	r0, [pc, #16]	; (5654 <isBusyTransferComplete()+0x14>)
    5644:	ldr	r3, [r3, #48]	; 0x30
    5646:	ands	r0, r3
}
    5648:	clz	r0, r0
    564c:	lsrs	r0, r0, #5
    564e:	bx	lr
    5650:	.word	0x402c0000
    5654:	.word	0x117f0002

00005658 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    5658:	mov.w	r2, #1000	; 0x3e8
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    565c:	ldr	r3, [pc, #172]	; (570c <setSdclk(unsigned long)+0xb4>)
  //  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    565e:	ldr	r1, [pc, #176]	; (5710 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    5660:	mul.w	r0, r2, r0
  //  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    5664:	ldr	r1, [r1, #36]	; 0x24
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    5666:	ldr.w	r2, [r3, #256]	; 0x100
    566a:	ldr	r3, [pc, #168]	; (5714 <setSdclk(unsigned long)+0xbc>)
    566c:	ubfx	r1, r1, #11, #3
    5670:	and.w	r2, r2, #63	; 0x3f
    5674:	adds	r1, #1
    5676:	umull	r2, r3, r3, r2
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    567a:	push	{r4, r5, r6, r7}
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    567c:	lsrs	r3, r3, #2
    567e:	ldr	r5, [pc, #152]	; (5718 <setSdclk(unsigned long)+0xc0>)
    5680:	udiv	r5, r5, r3
    5684:	udiv	r5, r5, r1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    5688:	cmp.w	r0, r5, lsr #4
    568c:	bcs.n	5700 <setSdclk(unsigned long)+0xa8>
    568e:	movs	r2, #1
    5690:	b.n	5696 <setSdclk(unsigned long)+0x3e>
    5692:	cmp	r2, #255	; 0xff
    5694:	bhi.n	56a2 <setSdclk(unsigned long)+0x4a>
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
    5696:	lsls	r2, r2, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    5698:	lsls	r3, r2, #4
    569a:	udiv	r3, r5, r3
    569e:	cmp	r0, r3
    56a0:	bcc.n	5692 <setSdclk(unsigned long)+0x3a>
    56a2:	lsrs	r1, r2, #1
    56a4:	lsls	r7, r1, #8
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    56a6:	udiv	r3, r5, r2
    56aa:	cmp	r0, r3
    56ac:	bcs.n	5706 <setSdclk(unsigned long)+0xae>
    56ae:	lsls	r4, r2, #1
    56b0:	movs	r1, #1
    56b2:	b.n	56b6 <setSdclk(unsigned long)+0x5e>
    56b4:	mov	r4, r3
    dvs++;
    56b6:	adds	r6, r1, #1

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    56b8:	udiv	r3, r5, r4
    56bc:	cmp	r0, r3
    56be:	add.w	r3, r2, r4
    56c2:	bcs.n	56fc <setSdclk(unsigned long)+0xa4>
    56c4:	cmp	r6, #16
    56c6:	mov	r1, r6
    56c8:	bne.n	56b4 <setSdclk(unsigned long)+0x5c>
    56ca:	movs	r3, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    56cc:	mov.w	r2, #1000	; 0x3e8
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    56d0:	ldr	r6, [pc, #72]	; (571c <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    56d2:	ldr	r1, [pc, #76]	; (5720 <setSdclk(unsigned long)+0xc8>)
    56d4:	mul.w	r4, r2, r4
  // Change dividers.
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
                      SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    56d8:	ldr	r0, [pc, #72]	; (5724 <setSdclk(unsigned long)+0xcc>)
                SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    56da:	mov	r2, r6
    sdclkfs <<= 1;
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    56dc:	udiv	r5, r5, r4
    56e0:	str	r5, [r1, #0]
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    56e2:	ldr	r1, [r6, #44]	; 0x2c
                      SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    56e4:	ands	r0, r1
    56e6:	orr.w	r0, r0, #917504	; 0xe0000
    56ea:	orr.w	r1, r0, r7
    56ee:	orrs	r1, r3
                SDHC_SYSCTL_SDCLKFS(sdclkfs);
    56f0:	str	r1, [r6, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    56f2:	ldr	r3, [r2, #36]	; 0x24
    56f4:	lsls	r3, r3, #28
    56f6:	bpl.n	56f2 <setSdclk(unsigned long)+0x9a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    56f8:	pop	{r4, r5, r6, r7}
    56fa:	bx	lr
    56fc:	lsls	r3, r1, #4
    56fe:	b.n	56cc <setSdclk(unsigned long)+0x74>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    5700:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    5702:	movs	r2, #1
    5704:	b.n	56a6 <setSdclk(unsigned long)+0x4e>

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5706:	mov	r4, r2
    5708:	movs	r3, #0
    570a:	b.n	56cc <setSdclk(unsigned long)+0x74>
    570c:	.word	0x400d8000
    5710:	.word	0x400fc000
    5714:	.word	0xaaaaaaab
    5718:	.word	0x5e69ec00
    571c:	.word	0x402c0000
    5720:	.word	0x2000726c
    5724:	.word	0xfff0000f

00005728 <SdioCard::errorCode() const>:
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const { return m_errorCode; }
    5728:	ldr	r3, [pc, #4]	; (5730 <SdioCard::errorCode() const+0x8>)
    572a:	ldrb	r0, [r3, #0]
    572c:	bx	lr
    572e:	nop
    5730:	.word	0x200021d6

00005734 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const { return m_irqstat; }
    5734:	ldr	r3, [pc, #4]	; (573c <SdioCard::errorData() const+0x8>)
    5736:	ldr	r0, [r3, #0]
    5738:	bx	lr
    573a:	nop
    573c:	.word	0x20021b94

00005740 <SdioCard::readCID(cid_t*)>:
  }
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    5740:	push	{r4, r5}
  memcpy(cid, &m_cid, sizeof(cid_t));
    5742:	ldr	r4, [pc, #20]	; (5758 <SdioCard::readCID(cid_t*)+0x18>)
  }
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    5744:	mov	r5, r1
  memcpy(cid, &m_cid, sizeof(cid_t));
    5746:	ldmia	r4!, {r0, r1, r2, r3}
    5748:	str	r0, [r5, #0]
  return true;
}
    574a:	movs	r0, #1
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, sizeof(cid_t));
    574c:	str	r1, [r5, #4]
    574e:	str	r2, [r5, #8]
    5750:	str	r3, [r5, #12]
  return true;
}
    5752:	pop	{r4, r5}
    5754:	bx	lr
    5756:	nop
    5758:	.word	0x20021480

0000575c <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    575c:	push	{r4, r5}
  memcpy(csd, &m_csd, sizeof(csd_t));
    575e:	ldr	r4, [pc, #20]	; (5774 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, sizeof(cid_t));
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    5760:	mov	r5, r1
  memcpy(csd, &m_csd, sizeof(csd_t));
    5762:	ldmia	r4!, {r0, r1, r2, r3}
    5764:	str	r0, [r5, #0]
  return true;
}
    5766:	movs	r0, #1
  memcpy(cid, &m_cid, sizeof(cid_t));
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, sizeof(csd_t));
    5768:	str	r1, [r5, #4]
    576a:	str	r2, [r5, #8]
    576c:	str	r3, [r5, #12]
  return true;
}
    576e:	pop	{r4, r5}
    5770:	bx	lr
    5772:	nop
    5774:	.word	0x20021490

00005778 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    5778:	ldr	r3, [pc, #8]	; (5784 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    577a:	movs	r0, #1
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    577c:	ldr	r3, [r3, #0]
    577e:	str	r3, [r1, #0]
  return true;
}
    5780:	bx	lr
    5782:	nop
    5784:	.word	0x200214a0

00005788 <SdioCard::readSCR(scr_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
  memcpy(scr, &m_scr, sizeof(scr_t));
    5788:	ldr	r3, [pc, #12]	; (5798 <SdioCard::readSCR(scr_t*)+0x10>)
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
    578a:	mov	r2, r1
  memcpy(scr, &m_scr, sizeof(scr_t));
    578c:	ldmia	r3!, {r0, r1}
    578e:	str	r0, [r2, #0]
  return true;
}
    5790:	movs	r0, #1
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
  memcpy(scr, &m_scr, sizeof(scr_t));
    5792:	str	r1, [r2, #4]
  return true;
}
    5794:	bx	lr
    5796:	nop
    5798:	.word	0x200214a8

0000579c <SdioCard::readSDS(sds_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSDS(sds_t* sds) {
    579c:	push	{r4, r5, r6, r7}
  memcpy(sds, &m_sds, sizeof(sds_t));
    579e:	ldr	r6, [pc, #40]	; (57c8 <SdioCard::readSDS(sds_t*)+0x2c>)
    57a0:	mov	r5, r1
    57a2:	add.w	r7, r6, #64	; 0x40
    57a6:	mov	r4, r6
    57a8:	adds	r5, #16
    57aa:	adds	r6, #16
    57ac:	ldmia	r4!, {r0, r1, r2, r3}
    57ae:	cmp	r4, r7
    57b0:	str.w	r0, [r5, #-16]
    57b4:	str.w	r1, [r5, #-12]
    57b8:	str.w	r2, [r5, #-8]
    57bc:	str.w	r3, [r5, #-4]
    57c0:	bne.n	57a6 <SdioCard::readSDS(sds_t*)+0xa>
  return true;
}
    57c2:	movs	r0, #1
    57c4:	pop	{r4, r5, r6, r7}
    57c6:	bx	lr
    57c8:	.word	0x200214b0

000057cc <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    57cc:	bx	lr
    57ce:	nop

000057d0 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    57d0:	push	{r3, r4, r5, r6, r7, lr}
    57d2:	mov	r5, r0
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    57d4:	ldr	r7, [pc, #28]	; (57f4 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    57d6:	bl	7ee8 <micros>
    57da:	mov	r6, r0
    57dc:	b.n	57e8 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    57de:	bl	7ee8 <micros>
    57e2:	subs	r0, r0, r6
    57e4:	cmp	r0, r7
    57e6:	bhi.n	57f0 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    57e8:	blx	r5
    57ea:	mov	r4, r0
    57ec:	cmp	r0, #0
    57ee:	bne.n	57de <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    57f0:	mov	r0, r4
    57f2:	pop	{r3, r4, r5, r6, r7, pc}
    57f4:	.word	0x000f4240

000057f8 <yieldTimeout(bool (*)())>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    57f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    57fc:	ldr.w	r8, [pc, #64]	; 5840 <yieldTimeout(bool (*)())+0x48>
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    5800:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5802:	ldr	r7, [pc, #56]	; (583c <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    5804:	str.w	r0, [r8]
  uint32_t m = micros();
    5808:	bl	7ee8 <micros>
    580c:	mov	r6, r0
    580e:	b.n	581e <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5810:	bl	7ee8 <micros>
    5814:	subs	r0, r0, r6
    5816:	cmp	r0, r7
    5818:	bhi.n	5830 <yieldTimeout(bool (*)())+0x38>
      m_busyFcn = 0;
      return true;
    }
    yield();
    581a:	bl	86b8 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    581e:	blx	r5
    5820:	mov	r4, r0
    5822:	cmp	r0, #0
    5824:	bne.n	5810 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    yield();
  }
  m_busyFcn = 0;
    5826:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    582a:	mov	r0, r4
    582c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    5830:	movs	r3, #0
    }
    yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    5832:	mov	r0, r4
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    5834:	str.w	r3, [r8]
    }
    yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    5838:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    583c:	.word	0x000f4240
    5840:	.word	0x20021b90

00005844 <SdioCard::~SdioCard()>:
    5844:	push	{r4, lr}
    5846:	mov	r4, r0
    5848:	movs	r1, #12
    584a:	bl	8c48 <operator delete(void*, unsigned int)>
    584e:	mov	r0, r4
    5850:	pop	{r4, pc}
    5852:	nop

00005854 <enableGPIO(bool) [clone .part.0]>:
static uint32_t baseClock() { return F_CPU; }

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    5854:	ldr	r3, [pc, #60]	; (5894 <enableGPIO(bool) [clone .part.0]+0x40>)
    5856:	movs	r2, #0

  const uint32_t DATA_MASK =
      CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    5858:	movw	r1, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    585c:	movw	r0, #4280	; 0x10b8
static uint32_t baseClock() { return F_CPU; }

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    5860:	str.w	r2, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    5864:	str.w	r2, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    5868:	str.w	r2, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    586c:	str.w	r2, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    5870:	str.w	r2, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    5874:	str.w	r2, [r3, #456]	; 0x1c8

  const uint32_t DATA_MASK =
      CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    5878:	str.w	r1, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    587c:	str.w	r1, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    5880:	str.w	r1, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    5884:	str.w	r0, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    5888:	str.w	r1, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    588c:	str.w	r1, [r3, #952]	; 0x3b8
    5890:	bx	lr
    5892:	nop
    5894:	.word	0x401f8000

00005898 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
                    : SD_CARD_TYPE_SD1;
    5898:	ldr	r3, [pc, #20]	; (58b0 <SdioCard::type() const+0x18>)
    589a:	ldrb	r3, [r3, #0]
    589c:	cbz	r3, 58ac <SdioCard::type() const+0x14>
    589e:	ldr	r3, [pc, #20]	; (58b4 <SdioCard::type() const+0x1c>)
    58a0:	ldrb	r3, [r3, #0]
    58a2:	cmp	r3, #0
    58a4:	ite	ne
    58a6:	movne	r0, #3
    58a8:	moveq	r0, #2
    58aa:	bx	lr
    58ac:	movs	r0, #1
}
    58ae:	bx	lr
    58b0:	.word	0x200224af
    58b4:	.word	0x200224b0

000058b8 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    58b8:	push	{r3, r4, r5, lr}
    58ba:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    58bc:	ldr	r0, [pc, #80]	; (5910 <cardCommand(unsigned long, unsigned long)+0x58>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    58be:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    58c0:	bl	57d0 <waitTimeout(bool (*)())>
    58c4:	cbnz	r0, 590a <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    58c6:	ldr	r3, [pc, #76]	; (5914 <cardCommand(unsigned long, unsigned long)+0x5c>)
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    58c8:	lsls	r1, r4, #10
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    58ca:	str	r5, [r3, #8]
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    58cc:	bpl.n	58de <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    58ce:	ldr	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    58d0:	uxtb	r2, r4
  }
  SDHC_CMDARG = arg;
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    58d2:	bic.w	r1, r1, #255	; 0xff
    58d6:	str	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    58d8:	ldr	r1, [r3, #72]	; 0x48
    58da:	orrs	r2, r1
    58dc:	str	r2, [r3, #72]	; 0x48
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    58de:	bic.w	r4, r4, #255	; 0xff
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    58e2:	ldr	r5, [pc, #48]	; (5914 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    58e4:	ldr	r0, [pc, #48]	; (5918 <cardCommand(unsigned long, unsigned long)+0x60>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    58e6:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    58e8:	bl	57d0 <waitTimeout(bool (*)())>
    58ec:	cbnz	r0, 590a <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    58ee:	ldr	r2, [r5, #48]	; 0x30
    58f0:	ldr	r3, [pc, #40]	; (591c <cardCommand(unsigned long, unsigned long)+0x64>)
    58f2:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    58f4:	ldr	r2, [r3, #0]
    58f6:	str	r2, [r5, #48]	; 0x30

  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    58f8:	ldr	r2, [r3, #0]
    58fa:	lsls	r2, r2, #31
    58fc:	bpl.n	590a <cardCommand(unsigned long, unsigned long)+0x52>
    58fe:	ldr	r3, [r3, #0]
    5900:	tst.w	r3, #983040	; 0xf0000
    5904:	bne.n	590a <cardCommand(unsigned long, unsigned long)+0x52>
    5906:	movs	r0, #1
}
    5908:	pop	{r3, r4, r5, pc}
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    590a:	movs	r0, #0
    590c:	pop	{r3, r4, r5, pc}
    590e:	nop
    5910:	.word	0x000055e9
    5914:	.word	0x402c0000
    5918:	.word	0x000055d1
    591c:	.word	0x20021b94

00005920 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    5920:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5922:	ldr	r3, [pc, #28]	; (5940 <isBusyCMD13()+0x20>)
    5924:	ldr	r0, [pc, #28]	; (5944 <isBusyCMD13()+0x24>)
    5926:	ldr	r1, [r3, #0]
    5928:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    592c:	cbz	r0, 593c <isBusyCMD13()+0x1c>
    592e:	ldr	r3, [pc, #24]	; (5948 <isBusyCMD13()+0x28>)
    5930:	ldr	r0, [r3, #16]
    5932:	eor.w	r0, r0, #256	; 0x100
    5936:	ubfx	r0, r0, #8, #1
    593a:	pop	{r3, pc}
    593c:	movs	r0, #1
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
    593e:	pop	{r3, pc}
    5940:	.word	0x200214a4
    5944:	.word	0x0d1a0000
    5948:	.word	0x402c0000

0000594c <SdioCard::status()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() { return transferStop(); }
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
//------------------------------------------------------------------------------
uint32_t SdioCard::status() { return statusCMD13(); }
    594c:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    594e:	ldr	r3, [pc, #16]	; (5960 <SdioCard::status()+0x14>)
    5950:	ldr	r0, [pc, #16]	; (5964 <SdioCard::status()+0x18>)
    5952:	ldr	r1, [r3, #0]
    5954:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    5958:	cbz	r0, 595e <SdioCard::status()+0x12>
    595a:	ldr	r3, [pc, #12]	; (5968 <SdioCard::status()+0x1c>)
    595c:	ldr	r0, [r3, #16]
//------------------------------------------------------------------------------
bool SdioCard::readStop() { return transferStop(); }
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
//------------------------------------------------------------------------------
uint32_t SdioCard::status() { return statusCMD13(); }
    595e:	pop	{r3, pc}
    5960:	.word	0x200214a4
    5964:	.word	0x0d1a0000
    5968:	.word	0x402c0000

0000596c <readReg16(unsigned long, void*)>:
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    596c:	ldr	r3, [pc, #80]	; (59c0 <readReg16(unsigned long, void*)+0x54>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    596e:	push	{r4, r5, r6, lr}
    5970:	mov	r6, r1
    5972:	sub	sp, #16
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    5974:	ldr	r1, [r3, #0]
    5976:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    597a:	cbz	r0, 59ba <readReg16(unsigned long, void*)+0x4e>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    597c:	ldr	r1, [pc, #68]	; (59c4 <readReg16(unsigned long, void*)+0x58>)
    597e:	add.w	r5, r6, #15
  for (int i = 0; i < 15; i++) {
    5982:	movs	r3, #0
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    5984:	ldr	r2, [r1, #16]
    5986:	str	r2, [sp, #0]
    5988:	ldr	r4, [r1, #20]
    598a:	str	r4, [sp, #4]
    598c:	ldr	r4, [r1, #24]
    598e:	str	r4, [sp, #8]
    5990:	ldr	r1, [r1, #28]
    5992:	str	r1, [sp, #12]
    5994:	b.n	599a <readReg16(unsigned long, void*)+0x2e>
    5996:	ldr.w	r2, [r4, #-16]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    599a:	and.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    599e:	adds	r3, #1
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    59a0:	lsls	r1, r1, #3
    59a2:	bic.w	r4, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    59a6:	cmp	r3, #15
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    59a8:	lsr.w	r2, r2, r1
    59ac:	add	r1, sp, #16
    59ae:	strb.w	r2, [r5, #-1]!
    59b2:	add	r4, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    59b4:	bne.n	5996 <readReg16(unsigned long, void*)+0x2a>
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
  }
  d[15] = 0;
    59b6:	movs	r3, #0
    59b8:	strb	r3, [r6, #15]
  return true;
}
    59ba:	add	sp, #16
    59bc:	pop	{r4, r5, r6, pc}
    59be:	nop
    59c0:	.word	0x200214a4
    59c4:	.word	0x402c0000

000059c8 <cardAcmd(unsigned long, unsigned long, unsigned long)>:
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
    59c8:	push	{r3, r4, r5, lr}
    59ca:	mov	r4, r1
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    59cc:	mov	r1, r0
    59ce:	ldr	r0, [pc, #24]	; (59e8 <cardAcmd(unsigned long, unsigned long, unsigned long)+0x20>)
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
    59d0:	mov	r5, r2
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    59d2:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    59d6:	cbnz	r0, 59da <cardAcmd(unsigned long, unsigned long, unsigned long)+0x12>
}
    59d8:	pop	{r3, r4, r5, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    59da:	mov	r1, r5
    59dc:	mov	r0, r4
}
    59de:	ldmia.w	sp!, {r3, r4, r5, lr}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    59e2:	b.w	58b8 <cardCommand(unsigned long, unsigned long)>
    59e6:	nop
    59e8:	.word	0x371a0000

000059ec <waitDmaStatus()>:
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
    59ec:	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    59ee:	ldr	r0, [pc, #32]	; (5a10 <waitDmaStatus()+0x24>)
    59f0:	bl	57f8 <yieldTimeout(bool (*)())>
    59f4:	cbnz	r0, 5a0c <waitDmaStatus()+0x20>
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    59f6:	ldr	r3, [pc, #28]	; (5a14 <waitDmaStatus()+0x28>)
    59f8:	ldr	r2, [r3, #0]
    59fa:	lsls	r2, r2, #30
    59fc:	bpl.n	5a0e <waitDmaStatus()+0x22>
    59fe:	ldr	r3, [r3, #0]
    5a00:	ldr	r0, [pc, #20]	; (5a18 <waitDmaStatus()+0x2c>)
    5a02:	ands	r0, r3
    5a04:	clz	r0, r0
    5a08:	lsrs	r0, r0, #5
    5a0a:	pop	{r3, pc}
    5a0c:	movs	r0, #0
}
    5a0e:	pop	{r3, pc}
    5a10:	.word	0x0000560d
    5a14:	.word	0x20021b94
    5a18:	.word	0x117f0000

00005a1c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp, uint32_t sector, uint8_t* buf,
                        size_t n) {
    5a1c:	push	{r3, r4, r5, r6, r7, lr}
    5a1e:	ands.w	r4, r2, #3
    5a22:	it	ne
    5a24:	movne	r4, #1
    5a26:	cmp	r3, #0
    5a28:	it	eq
    5a2a:	orreq.w	r4, r4, #1
  if ((3 & (uint32_t)buf) || n == 0) {
    5a2e:	cbz	r4, 5a42 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x26>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5a30:	ldr	r1, [pc, #112]	; (5aa4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
    5a32:	movs	r0, #38	; 0x26
  m_errorLine = line;
    5a34:	ldr	r3, [pc, #112]	; (5aa8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
    5a36:	movw	r2, #547	; 0x223
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5a3a:	strb	r0, [r1, #0]
  m_errorLine = line;
    5a3c:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    return false;
  }
  return waitDmaStatus();
}
    5a3e:	movs	r0, #0
    5a40:	pop	{r3, r4, r5, r6, r7, pc}
    5a42:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp, uint32_t sector, uint8_t* buf,
                        size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    5a44:	ldr	r0, [pc, #100]	; (5aac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    5a46:	mov	r5, r3
    5a48:	mov	r7, r1
    5a4a:	mov	r4, r2
    5a4c:	bl	57f8 <yieldTimeout(bool (*)())>
    5a50:	cbnz	r0, 5a8e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    5a52:	lsls	r3, r5, #16
    5a54:	ldr	r2, [pc, #88]	; (5ab0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    5a56:	ldr	r5, [pc, #92]	; (5ab4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    5a58:	mov.w	lr, #1
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    5a5c:	ands	r2, r3
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    5a5e:	ldr	r1, [pc, #88]	; (5ab8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    5a60:	strb.w	lr, [r5]
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)buf;
    5a64:	ldr	r3, [pc, #84]	; (5abc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    5a66:	orr.w	r2, r2, #512	; 0x200
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    5a6a:	str	r0, [r1, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5a6c:	ldr	r5, [pc, #80]	; (5ac0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    5a6e:	ldr	r1, [pc, #84]	; (5ac4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)buf;
    5a70:	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    5a72:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5a74:	str	r5, [r3, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    5a76:	ldrb	r3, [r1, #0]
    5a78:	cbnz	r3, 5a9e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    5a7a:	lsls	r1, r7, #9
    5a7c:	mov	r0, r6
    5a7e:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    5a82:	cmp	r0, #0
    5a84:	beq.n	5a3e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
    return false;
  }
  return waitDmaStatus();
}
    5a86:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    return false;
  }
  return waitDmaStatus();
    5a8a:	b.w	59ec <waitDmaStatus()>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5a8e:	ldr	r1, [pc, #20]	; (5aa4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
    5a90:	movs	r0, #10
  m_errorLine = line;
    5a92:	ldr	r3, [pc, #20]	; (5aa8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
    5a94:	movw	r2, #550	; 0x226
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5a98:	strb	r0, [r1, #0]
  m_errorLine = line;
    5a9a:	str	r2, [r3, #0]
                        size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    5a9c:	b.n	5a3e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    5a9e:	mov	r1, r7
    5aa0:	b.n	5a7c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x60>
    5aa2:	nop
    5aa4:	.word	0x200021d6
    5aa8:	.word	0x20021274
    5aac:	.word	0x00005921
    5ab0:	.word	0x1fff0000
    5ab4:	.word	0x200224b2
    5ab8:	.word	0x20021b94
    5abc:	.word	0x402c0000
    5ac0:	.word	0x117f0002
    5ac4:	.word	0x200224b0

00005ac8 <SdioCard::sectorCount()>:
  uint8_t csd[16];
  // Extract big endian fields.
  /** \return Capacity in sectors */
  uint32_t capacity() const {
    uint32_t c_size;
    uint8_t ver = csd[0] >> 6;
    5ac8:	ldr	r1, [pc, #92]	; (5b28 <SdioCard::sectorCount()+0x60>)
    5aca:	ldrb	r3, [r1, #0]
    if (ver == 0) {
    5acc:	asrs	r3, r3, #6
    5ace:	beq.n	5aee <SdioCard::sectorCount()+0x26>
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
    5ad0:	cmp	r3, #1
    5ad2:	beq.n	5ad8 <SdioCard::sectorCount()+0x10>
      c_size = (uint32_t)(csd[7] & 63) << 16;
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
      return (c_size + 1) << 10;
    } else {
      return 0;
    5ad4:	movs	r0, #0
    5ad6:	bx	lr
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5ad8:	ldrb	r0, [r1, #7]
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
      return (c_size + 1) << 10;
    5ada:	ldrh	r2, [r1, #8]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5adc:	lsls	r0, r0, #16
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
      return (c_size + 1) << 10;
    5ade:	rev16	r2, r2
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5ae0:	and.w	r3, r0, #4128768	; 0x3f0000
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
      return (c_size + 1) << 10;
    5ae4:	uxth	r0, r2
    5ae6:	orrs	r0, r3
    5ae8:	adds	r0, #1
    5aea:	lsls	r0, r0, #10
    5aec:	bx	lr
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() { return transferStop(); }
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
    5aee:	push	{r4, r5, r6, r7}
    5af0:	ldrb	r2, [r1, #6]
    if (ver == 0) {
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5af2:	ldrb	r5, [r1, #9]
    5af4:	lsls	r2, r2, #10
    5af6:	ldrb	r7, [r1, #10]
    5af8:	lsls	r5, r5, #1
    5afa:	ldrb	r3, [r1, #8]
    5afc:	and.w	r2, r2, #3072	; 0xc00
    5b00:	ldrb	r4, [r1, #5]
    5b02:	and.w	r5, r5, #6
    5b06:	ldrb	r6, [r1, #7]
    5b08:	orr.w	r3, r2, r3, lsr #6
    5b0c:	and.w	r1, r4, #15
    5b10:	orr.w	r2, r5, r7, lsr #7
    5b14:	orr.w	r0, r3, r6, lsl #2
    5b18:	add	r2, r1
    5b1a:	adds	r3, r0, #1
    5b1c:	subs	r0, r2, #7
    5b1e:	pop	{r4, r5, r6, r7}
    5b20:	lsl.w	r0, r3, r0
    5b24:	bx	lr
    5b26:	nop
    5b28:	.word	0x20021490

00005b2c <SdioCard::isBusy()>:
uint32_t SdioCard::errorData() const { return m_irqstat; }
//------------------------------------------------------------------------------
uint32_t SdioCard::errorLine() const { return m_errorLine; }
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  if (m_sdioConfig.useDma()) {
    5b2c:	ldrb	r3, [r0, #8]
    5b2e:	lsls	r3, r3, #31
    5b30:	bpl.n	5b3a <SdioCard::isBusy()+0xe>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5b32:	ldr	r3, [pc, #56]	; (5b6c <SdioCard::isBusy()+0x40>)
    5b34:	ldr	r3, [r3, #0]
    5b36:	cbz	r3, 5b5e <SdioCard::isBusy()+0x32>
    5b38:	bx	r3
  } else {
    if (m_transferActive) {
    5b3a:	ldr	r3, [pc, #52]	; (5b70 <SdioCard::isBusy()+0x44>)
    5b3c:	ldrb	r3, [r3, #0]
    5b3e:	cbnz	r3, 5b4e <SdioCard::isBusy()+0x22>
#else   // defined(__MK64FX512__) || defined(__MK66FX1M0__)
      return false;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    }
    // Use DAT0 low as busy.
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5b40:	ldr	r3, [pc, #48]	; (5b74 <SdioCard::isBusy()+0x48>)
    5b42:	ldr	r0, [r3, #36]	; 0x24
    5b44:	eor.w	r0, r0, #16777216	; 0x1000000
    5b48:	ubfx	r0, r0, #24, #1
  }
}
    5b4c:	bx	lr
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5b4e:	ldr	r3, [pc, #36]	; (5b74 <SdioCard::isBusy()+0x48>)
bool SdioCard::isBusy() {
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    5b50:	ldr	r0, [pc, #36]	; (5b78 <SdioCard::isBusy()+0x4c>)
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5b52:	ldr	r3, [r3, #48]	; 0x30
bool SdioCard::isBusy() {
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    5b54:	ands	r0, r3
    5b56:	clz	r0, r0
    5b5a:	lsrs	r0, r0, #5
    5b5c:	bx	lr
//------------------------------------------------------------------------------
uint32_t SdioCard::errorLine() const { return m_errorLine; }
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5b5e:	ldr	r3, [pc, #28]	; (5b7c <SdioCard::isBusy()+0x50>)
    5b60:	ldrb	r0, [r3, #0]
    5b62:	cmp	r0, #0
    5b64:	beq.n	5b4c <SdioCard::isBusy()+0x20>
    5b66:	b.w	5920 <isBusyCMD13()>
    5b6a:	nop
    5b6c:	.word	0x20021b90
    5b70:	.word	0x200224b1
    5b74:	.word	0x402c0000
    5b78:	.word	0x117f0002
    5b7c:	.word	0x200224ae

00005b80 <SdioCard::cardCMD6(unsigned long, unsigned char*)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
    5b80:	push	{r3, r4, r5, r6, r7, lr}
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    5b82:	ldr	r0, [pc, #100]	; (5be8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x68>)
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
    5b84:	mov	r5, r1
    5b86:	mov	r4, r2
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    5b88:	bl	57d0 <waitTimeout(bool (*)())>
    5b8c:	cbz	r0, 5ba0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5b8e:	ldr	r1, [pc, #92]	; (5bec <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x6c>)
    5b90:	movs	r0, #10
  m_errorLine = line;
    5b92:	ldr	r3, [pc, #92]	; (5bf0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>)
    5b94:	mov.w	r2, #788	; 0x314
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5b98:	strb	r0, [r1, #0]
}
//------------------------------------------------------------------------------
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    5b9a:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5b9c:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    5b9e:	pop	{r3, r4, r5, r6, r7, pc}
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    5ba0:	ldr	r2, [pc, #80]	; (5bf4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x74>)
    5ba2:	movs	r7, #1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)status;
    5ba4:	ldr	r3, [pc, #80]	; (5bf8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x78>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5ba6:	mov	r1, r5
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    5ba8:	strb	r7, [r2, #0]
  m_irqstat = 0;
    5baa:	ldr	r6, [pc, #80]	; (5bfc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x7c>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5bac:	ldr	r5, [pc, #80]	; (5c00 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5bae:	ldr	r2, [pc, #84]	; (5c04 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x84>)
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    5bb0:	str	r0, [r6, #0]
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)status;
    5bb2:	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5bb4:	ldr	r0, [pc, #80]	; (5c08 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x88>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5bb6:	str	r5, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5bb8:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5bba:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    5bbe:	cbnz	r0, 5bd0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x50>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5bc0:	ldr	r1, [pc, #40]	; (5bec <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x6c>)
    5bc2:	movs	r4, #4
  m_errorLine = line;
    5bc4:	ldr	r3, [pc, #40]	; (5bf0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>)
    5bc6:	movw	r2, #795	; 0x31b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5bca:	strb	r4, [r1, #0]
  m_errorLine = line;
    5bcc:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    5bce:	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (!waitDmaStatus()) {
    5bd0:	bl	59ec <waitDmaStatus()>
    5bd4:	cbnz	r0, 5be4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x64>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5bd6:	ldr	r1, [pc, #20]	; (5bec <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x6c>)
    5bd8:	movs	r4, #38	; 0x26
  m_errorLine = line;
    5bda:	ldr	r3, [pc, #20]	; (5bf0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>)
    5bdc:	movw	r2, #798	; 0x31e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5be0:	strb	r4, [r1, #0]
  m_errorLine = line;
    5be2:	str	r2, [r3, #0]
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    5be4:	pop	{r3, r4, r5, r6, r7, pc}
    5be6:	nop
    5be8:	.word	0x00005921
    5bec:	.word	0x200021d6
    5bf0:	.word	0x20021274
    5bf4:	.word	0x200224b2
    5bf8:	.word	0x402c0000
    5bfc:	.word	0x20021b94
    5c00:	.word	0x00010040
    5c04:	.word	0x117f0002
    5c08:	.word	0x063a0011

00005c0c <SdioCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5c0c:	push	{r4, r5, r6, lr}
    5c0e:	mov	r6, r2
  if (m_curState != IDLE_STATE && !syncDevice()) {
    5c10:	ldrb	r2, [r0, #9]
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5c12:	mov	r5, r1
  if (m_curState != IDLE_STATE && !syncDevice()) {
    5c14:	cbnz	r2, 5c72 <SdioCard::erase(unsigned long, unsigned long)+0x66>
    5c16:	ldr	r2, [pc, #192]	; (5cd8 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    5c18:	ldrb	r3, [r2, #10]
    return false;
  }
  // check for single sector erase
  if (!m_csd.eraseSingleBlock()) {
    5c1a:	and.w	r0, r3, #64	; 0x40
    5c1e:	and.w	r4, r0, #255	; 0xff
    5c22:	cbz	r0, 5c4c <SdioCard::erase(unsigned long, unsigned long)+0x40>
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    5c24:	ldr	r3, [pc, #180]	; (5cdc <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    5c26:	ldrb	r3, [r3, #0]
    5c28:	cbnz	r3, 5c2e <SdioCard::erase(unsigned long, unsigned long)+0x22>
    firstSector <<= 9;
    5c2a:	lsls	r5, r5, #9
    lastSector <<= 9;
    5c2c:	lsls	r6, r6, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    5c2e:	mov	r1, r5
    5c30:	ldr	r0, [pc, #172]	; (5ce0 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5c32:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    5c36:	mov	r4, r0
    5c38:	cbnz	r0, 5c82 <SdioCard::erase(unsigned long, unsigned long)+0x76>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c3a:	ldr	r1, [pc, #168]	; (5ce4 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5c3c:	movs	r0, #15
  m_errorLine = line;
    5c3e:	ldr	r3, [pc, #168]	; (5ce8 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    5c40:	movw	r2, #821	; 0x335
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c44:	strb	r0, [r1, #0]
  m_errorLine = line;
    5c46:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    5c48:	mov	r0, r4
    5c4a:	pop	{r4, r5, r6, pc}
  }
  // check for single sector erase
  if (!m_csd.eraseSingleBlock()) {
    // erase size mask
    uint8_t m = m_csd.eraseSize() - 1;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    5c4c:	lsls	r3, r3, #1
    5c4e:	ldrb	r1, [r2, #11]
    5c50:	adds	r2, r6, #1
    5c52:	and.w	r3, r3, #126	; 0x7e
    5c56:	orrs	r2, r5
    5c58:	orr.w	r3, r3, r1, lsr #7
    5c5c:	tst	r3, r2
    5c5e:	beq.n	5c24 <SdioCard::erase(unsigned long, unsigned long)+0x18>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c60:	ldr	r1, [pc, #128]	; (5ce4 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5c62:	movs	r0, #40	; 0x28
  m_errorLine = line;
    5c64:	ldr	r3, [pc, #128]	; (5ce8 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    5c66:	movw	r2, #813	; 0x32d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c6a:	strb	r0, [r1, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    5c6c:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5c6e:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    5c70:	pop	{r4, r5, r6, pc}
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  if (m_curState != IDLE_STATE && !syncDevice()) {
    5c72:	ldr	r3, [r0, #0]
    5c74:	ldr	r3, [r3, #28]
    5c76:	blx	r3
    5c78:	mov	r4, r0
    5c7a:	cmp	r0, #0
    5c7c:	bne.n	5c16 <SdioCard::erase(unsigned long, unsigned long)+0xa>
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    5c7e:	mov	r0, r4
    5c80:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    5c82:	mov	r1, r6
    5c84:	ldr	r0, [pc, #100]	; (5cec <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    5c86:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    5c8a:	mov	r4, r0
    5c8c:	cbnz	r0, 5c9e <SdioCard::erase(unsigned long, unsigned long)+0x92>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c8e:	ldr	r1, [pc, #84]	; (5ce4 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5c90:	movs	r0, #16
  m_errorLine = line;
    5c92:	ldr	r3, [pc, #84]	; (5ce8 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    5c94:	mov.w	r2, #824	; 0x338
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c98:	strb	r0, [r1, #0]
  m_errorLine = line;
    5c9a:	str	r2, [r3, #0]
    5c9c:	b.n	5c48 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    5c9e:	movs	r1, #0
    5ca0:	ldr	r0, [pc, #76]	; (5cf0 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    5ca2:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    5ca6:	mov	r4, r0
    5ca8:	cbnz	r0, 5cba <SdioCard::erase(unsigned long, unsigned long)+0xae>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5caa:	ldr	r1, [pc, #56]	; (5ce4 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5cac:	movs	r0, #17
  m_errorLine = line;
    5cae:	ldr	r3, [pc, #56]	; (5ce8 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    5cb0:	movw	r2, #827	; 0x33b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5cb4:	strb	r0, [r1, #0]
  m_errorLine = line;
    5cb6:	str	r2, [r3, #0]
    5cb8:	b.n	5c48 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    5cba:	ldr	r0, [pc, #56]	; (5cf4 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    5cbc:	bl	57d0 <waitTimeout(bool (*)())>
    5cc0:	cmp	r0, #0
    5cc2:	beq.n	5c48 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5cc4:	ldr	r1, [pc, #28]	; (5ce4 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5cc6:	movs	r0, #41	; 0x29
  m_errorLine = line;
    5cc8:	ldr	r3, [pc, #28]	; (5ce8 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    5cca:	movw	r2, #830	; 0x33e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5cce:	strb	r0, [r1, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    5cd0:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5cd2:	str	r2, [r3, #0]
    5cd4:	b.n	5c48 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    5cd6:	nop
    5cd8:	.word	0x20021490
    5cdc:	.word	0x200224b0
    5ce0:	.word	0x201a0000
    5ce4:	.word	0x200021d6
    5ce8:	.word	0x20021274
    5cec:	.word	0x211a0000
    5cf0:	.word	0x261b0000
    5cf4:	.word	0x00005921

00005cf8 <waitTransferComplete() [clone .part.13]>:
    }
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
    5cf8:	push	{r4, lr}
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
    5cfa:	ldr	r0, [pc, #56]	; (5d34 <waitTransferComplete() [clone .part.13]+0x3c>)
  m_transferActive = false;
    5cfc:	movs	r4, #0
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
    5cfe:	bl	57d0 <waitTimeout(bool (*)())>
  m_transferActive = false;
    5d02:	ldr	r1, [pc, #52]	; (5d38 <waitTransferComplete() [clone .part.13]+0x40>)
  m_irqstat = SDHC_IRQSTAT;
    5d04:	ldr	r2, [pc, #52]	; (5d3c <waitTransferComplete() [clone .part.13]+0x44>)
    5d06:	ldr	r3, [pc, #56]	; (5d40 <waitTransferComplete() [clone .part.13]+0x48>)
static bool waitTransferComplete() {
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
    5d08:	strb	r4, [r1, #0]
  m_irqstat = SDHC_IRQSTAT;
    5d0a:	ldr	r1, [r2, #48]	; 0x30
    5d0c:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5d0e:	ldr	r1, [r3, #0]
    5d10:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    5d12:	cbnz	r0, 5d1c <waitTransferComplete() [clone .part.13]+0x24>
    5d14:	ldr	r2, [r3, #0]
    5d16:	ldr	r3, [pc, #44]	; (5d44 <waitTransferComplete() [clone .part.13]+0x4c>)
    5d18:	ands	r3, r2
    5d1a:	cbz	r3, 5d2e <waitTransferComplete() [clone .part.13]+0x36>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5d1c:	ldr	r1, [pc, #40]	; (5d48 <waitTransferComplete() [clone .part.13]+0x50>)
    5d1e:	movs	r4, #32
  m_errorLine = line;
    5d20:	ldr	r3, [pc, #40]	; (5d4c <waitTransferComplete() [clone .part.13]+0x54>)
    5d22:	movw	r2, #682	; 0x2aa
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    5d26:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5d28:	strb	r4, [r1, #0]
  m_errorLine = line;
    5d2a:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
  }
  return true;
}
    5d2c:	pop	{r4, pc}
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
  }
  return true;
    5d2e:	movs	r0, #1
    5d30:	pop	{r4, pc}
    5d32:	nop
    5d34:	.word	0x00005641
    5d38:	.word	0x200224b1
    5d3c:	.word	0x402c0000
    5d40:	.word	0x20021b94
    5d44:	.word	0x117f0000
    5d48:	.word	0x200021d6
    5d4c:	.word	0x20021274

00005d50 <SdioCard::readStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() { return transferStop(); }
    5d50:	push	{r3, r4, r5, lr}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5d52:	ldr	r4, [pc, #96]	; (5db4 <SdioCard::readStop()+0x64>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    5d54:	movs	r1, #0
    5d56:	ldr	r0, [pc, #96]	; (5db8 <SdioCard::readStop()+0x68>)
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5d58:	ldr	r3, [r4, #40]	; 0x28
    5d5a:	bic.w	r3, r3, #65536	; 0x10000
    5d5e:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    5d60:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    5d64:	mov	r5, r0
    5d66:	cbnz	r0, 5d7a <SdioCard::readStop()+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5d68:	ldr	r1, [pc, #80]	; (5dbc <SdioCard::readStop()+0x6c>)
    5d6a:	movs	r0, #9
  m_errorLine = line;
    5d6c:	ldr	r3, [pc, #80]	; (5dc0 <SdioCard::readStop()+0x70>)
    5d6e:	movw	r2, #621	; 0x26d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5d72:	strb	r0, [r1, #0]
  m_errorLine = line;
    5d74:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() { return transferStop(); }
    5d76:	mov	r0, r5
    5d78:	pop	{r3, r4, r5, pc}
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyDat)) {
    5d7a:	ldr	r0, [pc, #72]	; (5dc4 <SdioCard::readStop()+0x74>)
    5d7c:	bl	57f8 <yieldTimeout(bool (*)())>
    5d80:	cbnz	r0, 5da0 <SdioCard::readStop()+0x50>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    5d82:	ldr	r3, [r4, #36]	; 0x24
    5d84:	lsls	r3, r3, #30
    5d86:	bpl.n	5d76 <SdioCard::readStop()+0x26>
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    5d88:	ldr	r1, [r4, #52]	; 0x34
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() { return transferStop(); }
    5d8a:	mov	r0, r5
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    5d8c:	ldr	r3, [r4, #40]	; 0x28
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    5d8e:	ldr	r2, [r4, #44]	; 0x2c
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    5d90:	bic.w	r3, r3, #65536	; 0x10000
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    5d94:	orr.w	r2, r2, #67108864	; 0x4000000
    5d98:	str	r2, [r4, #44]	; 0x2c
    // Restore registers.
    SDHC_IRQSTATEN = irqsststen;
    5d9a:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    5d9c:	str	r3, [r4, #40]	; 0x28
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() { return transferStop(); }
    5d9e:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5da0:	ldr	r1, [pc, #24]	; (5dbc <SdioCard::readStop()+0x6c>)
    5da2:	movs	r0, #10
  m_errorLine = line;
    5da4:	ldr	r3, [pc, #24]	; (5dc0 <SdioCard::readStop()+0x70>)
    5da6:	mov.w	r2, #624	; 0x270
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyDat)) {
    return sdError(SD_CARD_ERROR_CMD13);
    5daa:	movs	r5, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5dac:	strb	r0, [r1, #0]
  m_errorLine = line;
    5dae:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() { return transferStop(); }
    5db0:	mov	r0, r5
    5db2:	pop	{r3, r4, r5, pc}
    5db4:	.word	0x402c0000
    5db8:	.word	0x0cdb0000
    5dbc:	.word	0x200021d6
    5dc0:	.word	0x20021274
    5dc4:	.word	0x000055f9

00005dc8 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
                    : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    5dc8:	push	{r4, r5, r6, lr}
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    5dca:	ldr	r6, [pc, #120]	; (5e44 <SdioCard::writeData(unsigned char const*)+0x7c>)
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
                    : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    5dcc:	mov	r5, r1
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    5dce:	ldrb	r3, [r6, #0]
    5dd0:	cmp	r3, #0
    5dd2:	bne.n	5e38 <SdioCard::writeData(unsigned char const*)+0x70>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    5dd4:	ldr	r3, [pc, #112]	; (5e48 <SdioCard::writeData(unsigned char const*)+0x80>)
    5dd6:	ldr	r2, [r3, #36]	; 0x24
    5dd8:	lsls	r1, r2, #23
    5dda:	bmi.n	5dec <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5ddc:	ldr	r2, [r3, #40]	; 0x28
    5dde:	bic.w	r2, r2, #65536	; 0x10000
    5de2:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    5de4:	ldr	r2, [r3, #40]	; 0x28
    5de6:	orr.w	r2, r2, #131072	; 0x20000
    5dea:	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5dec:	ldr	r4, [pc, #88]	; (5e48 <SdioCard::writeData(unsigned char const*)+0x80>)
  if (waitTimeout(isBusyFifoWrite)) {
    5dee:	ldr	r0, [pc, #92]	; (5e4c <SdioCard::writeData(unsigned char const*)+0x84>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5df0:	ldr	r3, [r4, #40]	; 0x28
    5df2:	orr.w	r3, r3, #65536	; 0x10000
    5df6:	str	r3, [r4, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    5df8:	bl	57d0 <waitTimeout(bool (*)())>
    5dfc:	cbnz	r0, 5e26 <SdioCard::writeData(unsigned char const*)+0x5e>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    5dfe:	mov	r0, r4
    5e00:	subs	r3, r5, #4
    5e02:	add.w	r4, r5, #508	; 0x1fc
    5e06:	ldr	r2, [r0, #36]	; 0x24
    5e08:	lsls	r2, r2, #21
    5e0a:	bpl.n	5e06 <SdioCard::writeData(unsigned char const*)+0x3e>
    5e0c:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    5e10:	ldr.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5e14:	cmp	r1, r3
      SDHC_DATPORT = p32[i];
    5e16:	str	r2, [r0, #32]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5e18:	bne.n	5e10 <SdioCard::writeData(unsigned char const*)+0x48>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    5e1a:	cmp	r4, r1
    5e1c:	mov	r3, r1
    5e1e:	bne.n	5e06 <SdioCard::writeData(unsigned char const*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    5e20:	movs	r0, #1
    5e22:	strb	r0, [r6, #0]
    5e24:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5e26:	ldr	r1, [pc, #40]	; (5e50 <SdioCard::writeData(unsigned char const*)+0x88>)
    5e28:	movs	r4, #34	; 0x22
  m_errorLine = line;
    5e2a:	ldr	r3, [pc, #40]	; (5e54 <SdioCard::writeData(unsigned char const*)+0x8c>)
    5e2c:	movw	r2, #1055	; 0x41f
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    5e30:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5e32:	strb	r4, [r1, #0]
  m_errorLine = line;
    5e34:	str	r2, [r3, #0]
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
  return true;
}
    5e36:	pop	{r4, r5, r6, pc}
    5e38:	bl	5cf8 <waitTransferComplete() [clone .part.13]>
                    : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    5e3c:	cmp	r0, #0
    5e3e:	bne.n	5dd4 <SdioCard::writeData(unsigned char const*)+0xc>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
  return true;
}
    5e40:	pop	{r4, r5, r6, pc}
    5e42:	nop
    5e44:	.word	0x200224b1
    5e48:	.word	0x402c0000
    5e4c:	.word	0x0000562d
    5e50:	.word	0x200021d6
    5e54:	.word	0x20021274

00005e58 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    5e58:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    5e5a:	ldr	r0, [pc, #80]	; (5eac <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    5e5c:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    5e5e:	bl	57f8 <yieldTimeout(bool (*)())>
    5e62:	cbnz	r0, 5e98 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5e64:	ldr	r3, [pc, #72]	; (5eb0 <SdioCard::writeStart(unsigned long)+0x58>)

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5e66:	mov.w	r0, #512	; 0x200
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5e6a:	ldr	r1, [pc, #72]	; (5eb4 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5e6c:	ldr	r2, [r3, #40]	; 0x28
    5e6e:	bic.w	r2, r2, #65536	; 0x10000
    5e72:	str	r2, [r3, #40]	; 0x28

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5e74:	str	r0, [r3, #4]
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5e76:	ldrb	r3, [r1, #0]
    5e78:	cbnz	r3, 5e94 <SdioCard::writeStart(unsigned long)+0x3c>
    5e7a:	lsls	r1, r4, #9
    5e7c:	ldr	r0, [pc, #56]	; (5eb8 <SdioCard::writeStart(unsigned long)+0x60>)
    5e7e:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    5e82:	cbnz	r0, 5e92 <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5e84:	ldr	r1, [pc, #52]	; (5ebc <SdioCard::writeStart(unsigned long)+0x64>)
    5e86:	movs	r4, #14
  m_errorLine = line;
    5e88:	ldr	r3, [pc, #52]	; (5ec0 <SdioCard::writeStart(unsigned long)+0x68>)
    5e8a:	movw	r2, #1150	; 0x47e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5e8e:	strb	r4, [r1, #0]
  m_errorLine = line;
    5e90:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    5e92:	pop	{r4, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    5e94:	mov	r1, r4
    5e96:	b.n	5e7c <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5e98:	ldr	r1, [pc, #32]	; (5ebc <SdioCard::writeStart(unsigned long)+0x64>)
    5e9a:	movs	r0, #10
  m_errorLine = line;
    5e9c:	ldr	r3, [pc, #32]	; (5ec0 <SdioCard::writeStart(unsigned long)+0x68>)
    5e9e:	movw	r2, #1138	; 0x472
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5ea2:	strb	r0, [r1, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    5ea4:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5ea6:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    5ea8:	pop	{r4, pc}
    5eaa:	nop
    5eac:	.word	0x00005921
    5eb0:	.word	0x402c0000
    5eb4:	.word	0x200224b0
    5eb8:	.word	0x193a0020
    5ebc:	.word	0x200021d6
    5ec0:	.word	0x20021274

00005ec4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    5ec4:	push	{r3, r4, r5, r6, r7, lr}
    5ec6:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    5ec8:	ldrb	r0, [r0, #8]
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    5eca:	mov	r4, r1
    5ecc:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    5ece:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    5ed0:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    5ed2:	bmi.n	5efc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    5ed4:	cbz	r3, 5ef8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    5ed6:	add	r7, r1
    5ed8:	b.n	5ede <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    5eda:	cmp	r4, r7
    5edc:	beq.n	5ef8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i * 512UL)) {
    5ede:	ldr	r3, [r6, #0]
    5ee0:	mov	r2, r5
    5ee2:	mov	r1, r4
    5ee4:	mov	r0, r6
    5ee6:	ldr	r3, [r3, #16]
    5ee8:	add.w	r5, r5, #512	; 0x200
    5eec:	adds	r4, #1
    5eee:	blx	r3
    5ef0:	cmp	r0, #0
    5ef2:	bne.n	5eda <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    5ef4:	movs	r0, #0
    5ef6:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i * 512UL)) {
        return false;
      }
    }
  }
  return true;
    5ef8:	movs	r0, #1
    5efa:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    5efc:	lsls	r0, r2, #30
    5efe:	beq.n	5f26 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    5f00:	cmp	r3, #0
    5f02:	beq.n	5ef8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    5f04:	add	r7, r1
    5f06:	b.n	5f0c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    5f08:	cmp	r7, r4
    5f0a:	beq.n	5ef8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    5f0c:	ldr	r3, [r6, #0]
    5f0e:	mov	r2, r5
    5f10:	mov	r1, r4
    5f12:	mov	r0, r6
    5f14:	ldr	r3, [r3, #16]
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    5f16:	add.w	r5, r5, #512	; 0x200
    5f1a:	adds	r4, #1
        if (!readSector(sector, dst)) {
    5f1c:	blx	r3
    5f1e:	cmp	r0, #0
    5f20:	bne.n	5f08 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    5f22:	movs	r0, #0
    5f24:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    5f26:	ldr	r0, [pc, #24]	; (5f40 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    5f28:	bl	5a1c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    5f2c:	cmp	r0, #0
    5f2e:	bne.n	5ef8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5f30:	ldr	r1, [pc, #16]	; (5f44 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    5f32:	movs	r4, #12
  m_errorLine = line;
    5f34:	ldr	r3, [pc, #16]	; (5f48 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    5f36:	movw	r2, #974	; 0x3ce
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5f3a:	strb	r4, [r1, #0]
  m_errorLine = line;
    5f3c:	str	r2, [r3, #0]
    5f3e:	pop	{r3, r4, r5, r6, r7, pc}
    5f40:	.word	0x123a0037
    5f44:	.word	0x200021d6
    5f48:	.word	0x20021274

00005f4c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    5f4c:	push	{r3, r4, r5, r6, r7, lr}
    5f4e:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    5f50:	ldrb	r0, [r0, #8]
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    5f52:	mov	r4, r1
    5f54:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    5f56:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    5f58:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    5f5a:	bmi.n	5f84 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    5f5c:	cbz	r3, 5f80 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    5f5e:	add	r7, r1
    5f60:	b.n	5f66 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    5f62:	cmp	r4, r7
    5f64:	beq.n	5f80 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i * 512UL)) {
    5f66:	ldr	r3, [r6, #0]
    5f68:	mov	r2, r5
    5f6a:	mov	r1, r4
    5f6c:	mov	r0, r6
    5f6e:	ldr	r3, [r3, #32]
    5f70:	add.w	r5, r5, #512	; 0x200
    5f74:	adds	r4, #1
    5f76:	blx	r3
    5f78:	cmp	r0, #0
    5f7a:	bne.n	5f62 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    5f7c:	movs	r0, #0
    5f7e:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i * 512UL)) {
        return false;
      }
    }
  }
  return true;
    5f80:	movs	r0, #1
    5f82:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    5f84:	lsls	r0, r2, #30
    5f86:	beq.n	5fae <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    5f88:	cmp	r3, #0
    5f8a:	beq.n	5f80 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    5f8c:	add	r7, r1
    5f8e:	b.n	5f94 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    5f90:	cmp	r7, r4
    5f92:	beq.n	5f80 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    5f94:	ldr	r3, [r6, #0]
    5f96:	mov	r2, r5
    5f98:	mov	r1, r4
    5f9a:	mov	r0, r6
    5f9c:	ldr	r3, [r3, #32]
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    5f9e:	add.w	r5, r5, #512	; 0x200
    5fa2:	adds	r4, #1
        if (!writeSector(sector, ptr)) {
    5fa4:	blx	r3
    5fa6:	cmp	r0, #0
    5fa8:	bne.n	5f90 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    5faa:	movs	r0, #0
    5fac:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    5fae:	ldr	r0, [pc, #24]	; (5fc8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    5fb0:	bl	5a1c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    5fb4:	cmp	r0, #0
    5fb6:	bne.n	5f80 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5fb8:	ldr	r1, [pc, #16]	; (5fcc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    5fba:	movs	r4, #14
  m_errorLine = line;
    5fbc:	ldr	r3, [pc, #16]	; (5fd0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    5fbe:	movw	r2, #1124	; 0x464
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5fc2:	strb	r4, [r1, #0]
  m_errorLine = line;
    5fc4:	str	r2, [r3, #0]
    5fc6:	pop	{r3, r4, r5, r6, r7, pc}
    5fc8:	.word	0x193a0027
    5fcc:	.word	0x200021d6
    5fd0:	.word	0x20021274

00005fd4 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  }
  m_transferActive = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    5fd4:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    5fd6:	ldrb	r3, [r0, #8]
  }
  m_transferActive = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    5fd8:	mov	r5, r2
    5fda:	sub.w	sp, sp, #512	; 0x200
    5fde:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    5fe0:	lsls	r2, r3, #31
    5fe2:	bpl.n	6018 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    5fe4:	lsls	r3, r5, #30
    5fe6:	beq.n	5ff6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    5fe8:	mov	r1, r5
    5fea:	mov.w	r2, #512	; 0x200
    5fee:	mov	r0, sp
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    5ff0:	mov	r5, sp
      memcpy(aligned, src, 512);
    5ff2:	bl	69a8 <memcpy>
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    5ff6:	mov	r2, r5
    5ff8:	mov	r1, r6
    5ffa:	movs	r3, #1
    5ffc:	ldr	r0, [pc, #132]	; (6084 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
    5ffe:	bl	5a1c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6002:	cbnz	r0, 6012 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6004:	ldr	r1, [pc, #128]	; (6088 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb4>)
    6006:	movs	r4, #13
  m_errorLine = line;
    6008:	ldr	r3, [pc, #128]	; (608c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb8>)
    600a:	mov.w	r2, #1080	; 0x438
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    600e:	strb	r4, [r1, #0]
  m_errorLine = line;
    6010:	str	r2, [r3, #0]
      return false;
    }
    m_curSector++;
  }
  return true;
}
    6012:	add.w	sp, sp, #512	; 0x200
    6016:	pop	{r4, r5, r6, pc}
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    6018:	ldr	r3, [pc, #116]	; (6090 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xbc>)
    601a:	mov	r4, r0
    601c:	ldrb	r3, [r3, #0]
    601e:	cbnz	r3, 604c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x78>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6020:	ldrb	r3, [r4, #9]
    6022:	cmp	r3, #2
    6024:	beq.n	6038 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
      if (!syncDevice()) {
    6026:	ldr	r3, [r4, #0]
    6028:	mov	r0, r4
    602a:	ldr	r3, [r3, #28]
    602c:	blx	r3
    602e:	cbnz	r0, 6058 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (!waitTransferComplete()) {
      return false;
    6030:	movs	r0, #0
      return false;
    }
    m_curSector++;
  }
  return true;
}
    6032:	add.w	sp, sp, #512	; 0x200
    6036:	pop	{r4, r5, r6, pc}
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6038:	ldr	r3, [r4, #4]
    603a:	cmp	r6, r3
    603c:	beq.n	606c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>
      if (!syncDevice()) {
    603e:	ldr	r3, [r4, #0]
    6040:	mov	r0, r4
    6042:	ldr	r3, [r3, #28]
    6044:	blx	r3
    6046:	cmp	r0, #0
    6048:	beq.n	6030 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
    604a:	b.n	6058 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    604c:	bl	5cf8 <waitTransferComplete() [clone .part.13]>
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (!waitTransferComplete()) {
    6050:	cmp	r0, #0
    6052:	bne.n	6020 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
      return false;
    6054:	movs	r0, #0
    6056:	b.n	6032 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector)) {
    6058:	ldr	r3, [r4, #0]
    605a:	mov	r1, r6
    605c:	mov	r0, r4
    605e:	ldr	r3, [r3, #100]	; 0x64
    6060:	blx	r3
    6062:	cmp	r0, #0
    6064:	beq.n	6030 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    6066:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector)) {
        return false;
      }
      m_curSector = sector;
    6068:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    606a:	strb	r3, [r4, #9]
    }
    if (!writeData(src)) {
    606c:	ldr	r3, [r4, #0]
    606e:	mov	r1, r5
    6070:	mov	r0, r4
    6072:	ldr	r3, [r3, #96]	; 0x60
    6074:	blx	r3
    6076:	cmp	r0, #0
    6078:	beq.n	6030 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
      return false;
    }
    m_curSector++;
    607a:	ldr	r3, [r4, #4]
    607c:	adds	r3, #1
    607e:	str	r3, [r4, #4]
    6080:	b.n	6012 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    6082:	nop
    6084:	.word	0x183a0001
    6088:	.word	0x200021d6
    608c:	.word	0x20021274
    6090:	.word	0x200224b1

00006094 <SdioCard::begin(SdioConfig)>:
  return true;
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    6094:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    6098:	ldr	r2, [pc, #680]	; (6344 <SdioCard::begin(SdioConfig)+0x2b0>)
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    609a:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    609c:	ldr	r4, [pc, #680]	; (6348 <SdioCard::begin(SdioConfig)+0x2b4>)
static uint32_t baseClock() { return F_CPU; }

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    609e:	mov.w	lr, #5
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    60a2:	strb	r3, [r0, #9]
  return true;
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    60a4:	mov	r5, r0
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    60a6:	strb	r3, [r4, #0]
  return true;
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    60a8:	sub	sp, #76	; 0x4c
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    60aa:	strb	r1, [r0, #8]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    60ac:	ldr.w	r1, [r2, #256]	; 0x100
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    60b0:	ldr.w	r8, [pc, #772]	; 63b8 <SdioCard::begin(SdioConfig)+0x324>
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    60b4:	orr.w	r1, r1, #128	; 0x80
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    60b8:	ldr	r7, [pc, #656]	; (634c <SdioCard::begin(SdioConfig)+0x2b8>)
  m_version2 = false;
    60ba:	ldr	r6, [pc, #660]	; (6350 <SdioCard::begin(SdioConfig)+0x2bc>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    60bc:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    60c0:	strb	r3, [r7, #0]
  m_version2 = false;
    60c2:	strb	r3, [r6, #0]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    60c4:	str.w	r1, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    60c8:	ldr.w	r1, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
  CCM_ANALOG_PFD_528 &= ~(1 << 7);

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    60cc:	ldr	r3, [pc, #644]	; (6354 <SdioCard::begin(SdioConfig)+0x2c0>)
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    60ce:	bic.w	r1, r1, #63	; 0x3f
static uint32_t baseClock() { return F_CPU; }

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    60d2:	ldr	r0, [pc, #644]	; (6358 <SdioCard::begin(SdioConfig)+0x2c4>)
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    60d4:	str.w	r1, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    60d8:	ldr.w	r1, [r2, #256]	; 0x100
    60dc:	orr.w	r1, r1, #24
    60e0:	str.w	r1, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    60e4:	ldr.w	r1, [r2, #256]	; 0x100
    60e8:	bic.w	r1, r1, #128	; 0x80
    60ec:	str.w	r1, [r2, #256]	; 0x100

  // Disable GPIO clock.
  enableGPIO(false);

#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    60f0:	add.w	r2, r2, #1998848	; 0x1e8000
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
  CCM_ANALOG_PFD_528 &= ~(1 << 7);

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    60f4:	ldr.w	r1, [r3, #128]	; 0x80
    60f8:	orr.w	r1, r1, #12
    60fc:	str.w	r1, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    6100:	ldr	r1, [r3, #36]	; 0x24
    6102:	bic.w	r1, r1, #14336	; 0x3800
    6106:	str	r1, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;  // PLL2PFD0
    6108:	ldr	r1, [r3, #28]
    610a:	orr.w	r1, r1, #65536	; 0x10000
    610e:	str	r1, [r3, #28]
  //  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    6110:	ldr	r1, [r3, #36]	; 0x24
    6112:	orr.w	r1, r1, #2048	; 0x800
    6116:	str	r1, [r3, #36]	; 0x24
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    6118:	mov	r1, r2
static uint32_t baseClock() { return F_CPU; }

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    611a:	str.w	lr, [r0, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    611e:	str.w	lr, [r0, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    6122:	str.w	lr, [r0, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    6126:	str.w	lr, [r0, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    612a:	str.w	lr, [r0, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    612e:	str.w	lr, [r0, #456]	; 0x1c8

  // Disable GPIO clock.
  enableGPIO(false);

#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    6132:	ldr	r0, [r2, #72]	; 0x48
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    6134:	ldr	r3, [pc, #548]	; (635c <SdioCard::begin(SdioConfig)+0x2c8>)

  // Disable GPIO clock.
  enableGPIO(false);

#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    6136:	orr.w	r0, r0, #2147483648	; 0x80000000
    613a:	str	r0, [r2, #72]	; 0x48
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    613c:	ldr	r0, [r2, #44]	; 0x2c
    613e:	orrs	r3, r0
    6140:	str	r3, [r2, #44]	; 0x2c

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    6142:	ldr	r3, [r1, #44]	; 0x2c
    6144:	ldr	r2, [pc, #536]	; (6360 <SdioCard::begin(SdioConfig)+0x2cc>)
    6146:	lsls	r3, r3, #7
    6148:	bmi.n	6142 <SdioCard::begin(SdioConfig)+0xae>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    614a:	mov.w	r0, #400	; 0x190
    614e:	str	r2, [sp, #4]
    6150:	bl	5658 <setSdclk(unsigned long)>
    6154:	bl	5854 <enableGPIO(bool) [clone .part.0]>

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    6158:	ldr	r0, [pc, #520]	; (6364 <SdioCard::begin(SdioConfig)+0x2d0>)


#ifdef __cplusplus
extern "C" void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    615a:	ldr	r3, [pc, #524]	; (6368 <SdioCard::begin(SdioConfig)+0x2d4>)
    615c:	ldr	r1, [pc, #524]	; (636c <SdioCard::begin(SdioConfig)+0x2d8>)
    615e:	ldr	r2, [sp, #4]
    6160:	str	r0, [r2, #52]	; 0x34
    6162:	str.w	r1, [r3, #504]	; 0x1f8

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    6166:	ldr	r3, [pc, #520]	; (6370 <SdioCard::begin(SdioConfig)+0x2dc>)
    6168:	mov.w	lr, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    616c:	ldr	r1, [pc, #516]	; (6374 <SdioCard::begin(SdioConfig)+0x2e0>)
    616e:	mov.w	r0, #16384	; 0x4000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    6172:	strb.w	lr, [r3]
  NVIC_ENABLE_IRQ(IRQ_SDHC);

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    6176:	mov	r3, r2
  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    6178:	str	r0, [r1, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    617a:	ldr	r1, [r2, #44]	; 0x2c
    617c:	orr.w	r1, r1, #134217728	; 0x8000000
    6180:	str	r1, [r2, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    6182:	ldr	r1, [r3, #44]	; 0x2c
    6184:	ands.w	r1, r1, #134217728	; 0x8000000
    6188:	bne.n	6182 <SdioCard::begin(SdioConfig)+0xee>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    618a:	mov	r0, r1
    618c:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    6190:	mov	r9, r0
    6192:	cmp	r0, #0
    6194:	beq.n	6248 <SdioCard::begin(SdioConfig)+0x1b4>
    6196:	mov.w	sl, #3
        return sdError(SD_CARD_ERROR_CMD8);
      }
      m_version2 = true;
      break;
    }
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    619a:	ldr.w	r9, [pc, #452]	; 6360 <SdioCard::begin(SdioConfig)+0x2cc>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    619e:	mov.w	r1, #426	; 0x1aa
    61a2:	ldr	r0, [pc, #468]	; (6378 <SdioCard::begin(SdioConfig)+0x2e4>)
    61a4:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    61a8:	cmp	r0, #0
    61aa:	bne.n	6276 <SdioCard::begin(SdioConfig)+0x1e2>
        return sdError(SD_CARD_ERROR_CMD8);
      }
      m_version2 = true;
      break;
    }
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    61ac:	ldr.w	r3, [r9, #44]	; 0x2c
    61b0:	orr.w	r3, r3, #16777216	; 0x1000000
    61b4:	str.w	r3, [r9, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    61b8:	ldr.w	r3, [r9, #44]	; 0x2c
    61bc:	lsls	r0, r3, #7
    61be:	bmi.n	61b8 <SdioCard::begin(SdioConfig)+0x124>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    61c0:	subs.w	sl, sl, #1
    61c4:	bne.n	619e <SdioCard::begin(SdioConfig)+0x10a>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    }
  }
  // Must support 3.2-3.4 Volts
  arg = m_version2 ? 0X40300000 : 0x00300000;
    61c6:	ldrb	r2, [r6, #0]
    61c8:	ldr	r3, [pc, #432]	; (637c <SdioCard::begin(SdioConfig)+0x2e8>)
    61ca:	cmp	r2, #0
    61cc:	ite	ne
    61ce:	movne	r9, r3
    61d0:	moveq.w	r9, #3145728	; 0x300000
  int m = micros();
    61d4:	bl	7ee8 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    61d8:	ldr.w	sl, [pc, #480]	; 63bc <SdioCard::begin(SdioConfig)+0x328>
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    }
  }
  // Must support 3.2-3.4 Volts
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    61dc:	mov	fp, r0
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    61de:	ldr	r6, [pc, #384]	; (6360 <SdioCard::begin(SdioConfig)+0x2cc>)
  }
  // Must support 3.2-3.4 Volts
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    61e0:	mov	r2, r9
    61e2:	ldr	r1, [pc, #412]	; (6380 <SdioCard::begin(SdioConfig)+0x2ec>)
    61e4:	movs	r0, #0
    61e6:	bl	59c8 <cardAcmd(unsigned long, unsigned long, unsigned long)>
    61ea:	cbnz	r0, 6204 <SdioCard::begin(SdioConfig)+0x170>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    61ec:	movs	r1, #23
  m_errorLine = line;
    61ee:	ldr	r3, [pc, #404]	; (6384 <SdioCard::begin(SdioConfig)+0x2f0>)
    61f0:	movw	r2, #723	; 0x2d3
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    61f4:	mov.w	r9, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    61f8:	strb	r1, [r4, #0]
  m_errorLine = line;
    61fa:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    61fc:	mov	r0, r9
    61fe:	add	sp, #76	; 0x4c
    6200:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // Must support 3.2-3.4 Volts
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    6204:	bl	7ee8 <micros>
  }
  // Must support 3.2-3.4 Volts
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    6208:	rsb	r0, fp, r0
    620c:	cmp	r0, sl
    620e:	bhi.n	61ec <SdioCard::begin(SdioConfig)+0x158>
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    6210:	ldr	r3, [r6, #16]
    6212:	ldr	r2, [pc, #332]	; (6360 <SdioCard::begin(SdioConfig)+0x2cc>)
    }
  }
  // Must support 3.2-3.4 Volts
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    6214:	cmp	r3, #0
    6216:	bge.n	61e0 <SdioCard::begin(SdioConfig)+0x14c>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    6218:	ldr	r1, [r2, #16]
    621a:	ldr	r3, [pc, #364]	; (6388 <SdioCard::begin(SdioConfig)+0x2f4>)
    621c:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    621e:	ldr	r3, [r2, #16]
    6220:	lsls	r1, r3, #1
    6222:	bpl.n	6228 <SdioCard::begin(SdioConfig)+0x194>
    // Is high capacity.
    m_highCapacity = true;
    6224:	movs	r3, #1
    6226:	strb	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    6228:	movs	r1, #0
    622a:	ldr	r0, [pc, #352]	; (638c <SdioCard::begin(SdioConfig)+0x2f8>)
    622c:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    6230:	mov	r9, r0
    6232:	cbnz	r0, 625c <SdioCard::begin(SdioConfig)+0x1c8>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6234:	movs	r1, #2
  m_errorLine = line;
    6236:	ldr	r3, [pc, #332]	; (6384 <SdioCard::begin(SdioConfig)+0x2f0>)
    6238:	mov.w	r2, #732	; 0x2dc

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    623c:	mov	r0, r9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    623e:	strb	r1, [r4, #0]
  m_errorLine = line;
    6240:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    6242:	add	sp, #76	; 0x4c
    6244:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6248:	movs	r1, #1
  m_errorLine = line;
    624a:	ldr	r3, [pc, #312]	; (6384 <SdioCard::begin(SdioConfig)+0x2f0>)
    624c:	movw	r2, #702	; 0x2be

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    6250:	mov	r0, r9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6252:	strb	r1, [r4, #0]
  m_errorLine = line;
    6254:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    6256:	add	sp, #76	; 0x4c
    6258:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    625c:	movs	r1, #0
    625e:	ldr	r0, [pc, #304]	; (6390 <SdioCard::begin(SdioConfig)+0x2fc>)
    6260:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    6264:	mov	r9, r0
    6266:	cbnz	r0, 629c <SdioCard::begin(SdioConfig)+0x208>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6268:	movs	r1, #3
  m_errorLine = line;
    626a:	ldr	r3, [pc, #280]	; (6384 <SdioCard::begin(SdioConfig)+0x2f0>)
    626c:	movw	r2, #735	; 0x2df
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6270:	strb	r1, [r4, #0]
  m_errorLine = line;
    6272:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    6274:	b.n	61fc <SdioCard::begin(SdioConfig)+0x168>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    6276:	ldr	r3, [pc, #232]	; (6360 <SdioCard::begin(SdioConfig)+0x2cc>)
    6278:	ldr	r3, [r3, #16]
    627a:	cmp.w	r3, #426	; 0x1aa
    627e:	beq.n	6292 <SdioCard::begin(SdioConfig)+0x1fe>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6280:	movs	r1, #6
  m_errorLine = line;
    6282:	ldr	r3, [pc, #256]	; (6384 <SdioCard::begin(SdioConfig)+0x2f0>)
    6284:	mov.w	r2, #708	; 0x2c4
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    6288:	mov.w	r9, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    628c:	strb	r1, [r4, #0]
  m_errorLine = line;
    628e:	str	r2, [r3, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    6290:	b.n	61fc <SdioCard::begin(SdioConfig)+0x168>
      }
      m_version2 = true;
    6292:	movs	r3, #1
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    }
  }
  // Must support 3.2-3.4 Volts
  arg = m_version2 ? 0X40300000 : 0x00300000;
    6294:	ldr.w	r9, [pc, #228]	; 637c <SdioCard::begin(SdioConfig)+0x2e8>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
      }
      m_version2 = true;
    6298:	strb	r3, [r6, #0]
    629a:	b.n	61d4 <SdioCard::begin(SdioConfig)+0x140>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    629c:	ldr	r6, [pc, #192]	; (6360 <SdioCard::begin(SdioConfig)+0x2cc>)
    629e:	ldr	r3, [pc, #244]	; (6394 <SdioCard::begin(SdioConfig)+0x300>)
    62a0:	ldr	r2, [r6, #16]
    62a2:	ldr	r7, [pc, #244]	; (6398 <SdioCard::begin(SdioConfig)+0x304>)
    62a4:	ands	r3, r2

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    62a6:	ldr	r1, [pc, #244]	; (639c <SdioCard::begin(SdioConfig)+0x308>)
    62a8:	ldr	r0, [pc, #244]	; (63a0 <SdioCard::begin(SdioConfig)+0x30c>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    62aa:	str	r3, [r7, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    62ac:	bl	596c <readReg16(unsigned long, void*)>
    62b0:	mov	r9, r0
    62b2:	cbnz	r0, 62c2 <SdioCard::begin(SdioConfig)+0x22e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    62b4:	movs	r1, #7
  m_errorLine = line;
    62b6:	ldr	r3, [pc, #204]	; (6384 <SdioCard::begin(SdioConfig)+0x2f0>)
    62b8:	mov.w	r2, #740	; 0x2e4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    62bc:	strb	r1, [r4, #0]
  m_errorLine = line;
    62be:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    62c0:	b.n	61fc <SdioCard::begin(SdioConfig)+0x168>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    62c2:	ldr	r1, [pc, #224]	; (63a4 <SdioCard::begin(SdioConfig)+0x310>)
    62c4:	ldr	r0, [pc, #224]	; (63a8 <SdioCard::begin(SdioConfig)+0x314>)
    62c6:	bl	596c <readReg16(unsigned long, void*)>
    62ca:	mov	r9, r0
    62cc:	cbnz	r0, 62dc <SdioCard::begin(SdioConfig)+0x248>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    62ce:	movs	r1, #8
  m_errorLine = line;
    62d0:	ldr	r3, [pc, #176]	; (6384 <SdioCard::begin(SdioConfig)+0x2f0>)
    62d2:	movw	r2, #743	; 0x2e7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    62d6:	strb	r1, [r4, #0]
  m_errorLine = line;
    62d8:	str	r2, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    62da:	b.n	61fc <SdioCard::begin(SdioConfig)+0x168>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    62dc:	ldr	r1, [r7, #0]
    62de:	ldr	r0, [pc, #204]	; (63ac <SdioCard::begin(SdioConfig)+0x318>)
    62e0:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    62e4:	mov	r9, r0
    62e6:	cbnz	r0, 62f6 <SdioCard::begin(SdioConfig)+0x262>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    62e8:	movs	r1, #5
  m_errorLine = line;
    62ea:	ldr	r3, [pc, #152]	; (6384 <SdioCard::begin(SdioConfig)+0x2f0>)
    62ec:	movw	r2, #746	; 0x2ea
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    62f0:	strb	r1, [r4, #0]
  m_errorLine = line;
    62f2:	str	r2, [r3, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    62f4:	b.n	61fc <SdioCard::begin(SdioConfig)+0x168>
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    62f6:	movs	r2, #2
    62f8:	ldr	r1, [pc, #180]	; (63b0 <SdioCard::begin(SdioConfig)+0x31c>)
    62fa:	ldr	r0, [r7, #0]
    62fc:	bl	59c8 <cardAcmd(unsigned long, unsigned long, unsigned long)>
    6300:	mov	r9, r0
    6302:	cbnz	r0, 6312 <SdioCard::begin(SdioConfig)+0x27e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6304:	movs	r1, #20
  m_errorLine = line;
    6306:	ldr	r3, [pc, #124]	; (6384 <SdioCard::begin(SdioConfig)+0x2f0>)
    6308:	movw	r2, #750	; 0x2ee
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    630c:	strb	r1, [r4, #0]
  m_errorLine = line;
    630e:	str	r2, [r3, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    6310:	b.n	61fc <SdioCard::begin(SdioConfig)+0x168>
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    6312:	ldr	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    6314:	mov.w	r2, #1048592	; 0x100010
  return true;
}
//------------------------------------------------------------------------------
static bool cardACMD51(scr_t* scr) {
  // ACMD51 returns 8 bytes.
  if (waitTimeout(isBusyCMD13)) {
    6318:	ldr	r0, [pc, #152]	; (63b4 <SdioCard::begin(SdioConfig)+0x320>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    631a:	bic.w	r3, r3, #6
    631e:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    6320:	ldr	r3, [r6, #40]	; 0x28
    6322:	orr.w	r3, r3, #2
    6326:	str	r3, [r6, #40]	; 0x28

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    6328:	str	r2, [r6, #68]	; 0x44
  return true;
}
//------------------------------------------------------------------------------
static bool cardACMD51(scr_t* scr) {
  // ACMD51 returns 8 bytes.
  if (waitTimeout(isBusyCMD13)) {
    632a:	bl	57d0 <waitTimeout(bool (*)())>
    632e:	cmp	r0, #0
    6330:	beq.n	63c0 <SdioCard::begin(SdioConfig)+0x32c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6332:	movs	r1, #10
  m_errorLine = line;
    6334:	ldr	r3, [pc, #76]	; (6384 <SdioCard::begin(SdioConfig)+0x2f0>)
    6336:	mov.w	r2, #464	; 0x1d0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    633a:	strb	r1, [r4, #0]
  m_errorLine = line;
    633c:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  if (!cardACMD51(&m_scr)) {
    return false;
    633e:	mov.w	r9, #0
    6342:	b.n	61fc <SdioCard::begin(SdioConfig)+0x168>
    6344:	.word	0x400d8000
    6348:	.word	0x200021d6
    634c:	.word	0x200224b0
    6350:	.word	0x200224af
    6354:	.word	0x400fc000
    6358:	.word	0x401f8000
    635c:	.word	0x01008000
    6360:	.word	0x402c0000
    6364:	.word	0x117f000b
    6368:	.word	0x20002400
    636c:	.word	0x000055a1
    6370:	.word	0xe000e46e
    6374:	.word	0xe000e10c
    6378:	.word	0x081a0000
    637c:	.word	0x40300000
    6380:	.word	0x29020000
    6384:	.word	0x20021274
    6388:	.word	0x200214a0
    638c:	.word	0x02090000
    6390:	.word	0x031a0000
    6394:	.word	0xffff0000
    6398:	.word	0x200214a4
    639c:	.word	0x20021490
    63a0:	.word	0x09090000
    63a4:	.word	0x20021480
    63a8:	.word	0x0a090000
    63ac:	.word	0x071b0000
    63b0:	.word	0x061a0000
    63b4:	.word	0x00005921
    63b8:	.word	0x200224ae
    63bc:	.word	0x000f4240
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    63c0:	movs	r3, #1
    63c2:	ldr.w	fp, [pc, #332]	; 6510 <SdioCard::begin(SdioConfig)+0x47c>
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)scr;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    63c6:	ldr	r1, [pc, #284]	; (64e4 <SdioCard::begin(SdioConfig)+0x450>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardAcmd(m_rca, ACMD51_XFERTYP, 0)) {
    63c8:	mov	r2, r0
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    63ca:	strb.w	r3, [fp]
  m_irqstat = 0;
    63ce:	ldr.w	r9, [pc, #324]	; 6514 <SdioCard::begin(SdioConfig)+0x480>
  // ACMD51 returns 8 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)scr;
    63d2:	ldr.w	sl, [pc, #324]	; 6518 <SdioCard::begin(SdioConfig)+0x484>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    63d6:	ldr	r3, [pc, #272]	; (64e8 <SdioCard::begin(SdioConfig)+0x454>)
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    63d8:	str.w	r0, [r9]
  // ACMD51 returns 8 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)scr;
    63dc:	str.w	sl, [r6]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    63e0:	str	r1, [r6, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    63e2:	str	r3, [r6, #56]	; 0x38
  if (!cardAcmd(m_rca, ACMD51_XFERTYP, 0)) {
    63e4:	ldr	r1, [pc, #260]	; (64ec <SdioCard::begin(SdioConfig)+0x458>)
    63e6:	ldr	r0, [r7, #0]
    63e8:	bl	59c8 <cardAcmd(unsigned long, unsigned long, unsigned long)>
    63ec:	cbnz	r0, 63fc <SdioCard::begin(SdioConfig)+0x368>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    63ee:	movs	r1, #24
  m_errorLine = line;
    63f0:	ldr	r3, [pc, #252]	; (64f0 <SdioCard::begin(SdioConfig)+0x45c>)
    63f2:	movw	r2, #471	; 0x1d7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    63f6:	strb	r1, [r4, #0]
  m_errorLine = line;
    63f8:	str	r2, [r3, #0]
    63fa:	b.n	633e <SdioCard::begin(SdioConfig)+0x2aa>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardAcmd(m_rca, ACMD51_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_ACMD51);
  }
  if (!waitDmaStatus()) {
    63fc:	bl	59ec <waitDmaStatus()>
    6400:	cbnz	r0, 6410 <SdioCard::begin(SdioConfig)+0x37c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6402:	movs	r1, #38	; 0x26
  m_errorLine = line;
    6404:	ldr	r3, [pc, #232]	; (64f0 <SdioCard::begin(SdioConfig)+0x45c>)
    6406:	mov.w	r2, #474	; 0x1da
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    640a:	strb	r1, [r4, #0]
  m_errorLine = line;
    640c:	str	r2, [r3, #0]
    640e:	b.n	633e <SdioCard::begin(SdioConfig)+0x2aa>
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardACMD13(sds_t* scr) {
  // ACMD13 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    6410:	ldr	r0, [pc, #224]	; (64f4 <SdioCard::begin(SdioConfig)+0x460>)
    6412:	bl	57d0 <waitTimeout(bool (*)())>
    6416:	cbz	r0, 6426 <SdioCard::begin(SdioConfig)+0x392>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6418:	movs	r1, #10
  m_errorLine = line;
    641a:	ldr	r3, [pc, #212]	; (64f0 <SdioCard::begin(SdioConfig)+0x45c>)
    641c:	mov.w	r2, #446	; 0x1be
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6420:	strb	r1, [r4, #0]
  m_errorLine = line;
    6422:	str	r2, [r3, #0]
    6424:	b.n	633e <SdioCard::begin(SdioConfig)+0x2aa>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    6426:	movs	r3, #0
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    6428:	movs	r2, #1
  // ACMD13 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)scr;
    642a:	ldr	r1, [pc, #204]	; (64f8 <SdioCard::begin(SdioConfig)+0x464>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    642c:	strb.w	r2, [fp]
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)scr;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardAcmd(m_rca, ACMD13_XFERTYP, 0)) {
    6430:	mov	r2, r3
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    6432:	str.w	r3, [r9]
  // ACMD13 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)scr;
    6436:	ldr	r3, [pc, #196]	; (64fc <SdioCard::begin(SdioConfig)+0x468>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    6438:	ldr	r0, [pc, #196]	; (6500 <SdioCard::begin(SdioConfig)+0x46c>)
  // ACMD13 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)scr;
    643a:	str	r1, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    643c:	ldr	r1, [pc, #168]	; (64e8 <SdioCard::begin(SdioConfig)+0x454>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR = (uint32_t)scr;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    643e:	str	r0, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6440:	str	r1, [r3, #56]	; 0x38
  if (!cardAcmd(m_rca, ACMD13_XFERTYP, 0)) {
    6442:	ldr	r0, [r7, #0]
    6444:	ldr	r1, [pc, #188]	; (6504 <SdioCard::begin(SdioConfig)+0x470>)
    6446:	bl	59c8 <cardAcmd(unsigned long, unsigned long, unsigned long)>
    644a:	cbnz	r0, 645a <SdioCard::begin(SdioConfig)+0x3c6>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    644c:	movs	r1, #21
  m_errorLine = line;
    644e:	ldr	r3, [pc, #160]	; (64f0 <SdioCard::begin(SdioConfig)+0x45c>)
    6450:	movw	r2, #453	; 0x1c5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6454:	strb	r1, [r4, #0]
  m_errorLine = line;
    6456:	str	r2, [r3, #0]
    6458:	b.n	633e <SdioCard::begin(SdioConfig)+0x2aa>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardAcmd(m_rca, ACMD13_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_ACMD13);
  }
  if (!waitDmaStatus()) {
    645a:	bl	59ec <waitDmaStatus()>
    645e:	mov	r9, r0
    6460:	cbnz	r0, 6470 <SdioCard::begin(SdioConfig)+0x3dc>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6462:	movs	r1, #38	; 0x26
  m_errorLine = line;
    6464:	ldr	r3, [pc, #136]	; (64f0 <SdioCard::begin(SdioConfig)+0x45c>)
    6466:	mov.w	r2, #456	; 0x1c8
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    646a:	strb	r1, [r4, #0]
  m_errorLine = line;
    646c:	str	r2, [r3, #0]
    646e:	b.n	633e <SdioCard::begin(SdioConfig)+0x2aa>
  }
  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    6470:	ldrb.w	r3, [sl]
    6474:	lsls	r3, r3, #28
    6476:	bne.n	64a8 <SdioCard::begin(SdioConfig)+0x414>
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    6478:	movw	r0, #25000	; 0x61a8
static uint32_t baseClock() { return F_CPU; }

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    647c:	ldr	r3, [pc, #136]	; (6508 <SdioCard::begin(SdioConfig)+0x474>)
    647e:	movs	r2, #5
    6480:	str.w	r2, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    6484:	str.w	r2, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    6488:	str.w	r2, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    648c:	str.w	r2, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    6490:	str.w	r2, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    6494:	str.w	r2, [r3, #456]	; 0x1c8
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    6498:	bl	5658 <setSdclk(unsigned long)>
    649c:	bl	5854 <enableGPIO(bool) [clone .part.0]>

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    64a0:	movs	r3, #1
    64a2:	strb.w	r3, [r8]
  return true;
    64a6:	b.n	61fc <SdioCard::begin(SdioConfig)+0x168>
    return false;
  }
  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    64a8:	ldr	r3, [r5, #0]
    64aa:	mvn.w	r1, #4278190080	; 0xff000000
    64ae:	mov	r0, r5
    64b0:	add	r2, sp, #8
    64b2:	ldr	r3, [r3, #40]	; 0x28
    64b4:	blx	r3
    64b6:	cmp	r0, #0
    64b8:	beq.n	6478 <SdioCard::begin(SdioConfig)+0x3e4>
    64ba:	ldrb.w	r3, [sp, #21]
    64be:	lsls	r2, r3, #30
    64c0:	bpl.n	6478 <SdioCard::begin(SdioConfig)+0x3e4>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    64c2:	ldr	r3, [r5, #0]
    64c4:	add	r2, sp, #8
    64c6:	mov	r0, r5
    64c8:	ldr	r1, [pc, #64]	; (650c <SdioCard::begin(SdioConfig)+0x478>)
    64ca:	ldr	r3, [r3, #40]	; 0x28
    64cc:	blx	r3
    return false;
  }
  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    64ce:	cmp	r0, #0
    64d0:	beq.n	6478 <SdioCard::begin(SdioConfig)+0x3e4>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    64d2:	ldrb.w	r3, [sp, #24]
    64d6:	and.w	r3, r3, #15
    64da:	cmp	r3, #1
    64dc:	bne.n	6478 <SdioCard::begin(SdioConfig)+0x3e4>
    kHzSdClk = 50000;
    64de:	movw	r0, #50000	; 0xc350
    64e2:	b.n	647c <SdioCard::begin(SdioConfig)+0x3e8>
    64e4:	.word	0x00010008
    64e8:	.word	0x117f0002
    64ec:	.word	0x333a0011
    64f0:	.word	0x20021274
    64f4:	.word	0x00005921
    64f8:	.word	0x200214b0
    64fc:	.word	0x402c0000
    6500:	.word	0x00010040
    6504:	.word	0x0d3a0011
    6508:	.word	0x401f8000
    650c:	.word	0x80fffff1
    6510:	.word	0x200224b2
    6514:	.word	0x20021b94
    6518:	.word	0x200214a8

0000651c <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, sizeof(csd_t));
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    651c:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    651e:	ldr	r3, [pc, #156]	; (65bc <SdioCard::readData(unsigned char*)+0xa0>)
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, sizeof(csd_t));
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    6520:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    6522:	ldr	r2, [r3, #36]	; 0x24
    6524:	lsls	r4, r2, #22
    6526:	bmi.n	6544 <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6528:	ldr	r2, [r3, #40]	; 0x28
    652a:	bic.w	r2, r2, #65536	; 0x10000
    652e:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    6530:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    6532:	ldr	r2, [r3, #40]	; 0x28
    6534:	orr.w	r2, r2, #131072	; 0x20000
    6538:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    653a:	ldr	r2, [r3, #40]	; 0x28
    653c:	orr.w	r2, r2, #65536	; 0x10000
    6540:	str	r2, [r3, #40]	; 0x28
    interrupts();
    6542:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    6544:	ldr	r0, [pc, #120]	; (65c0 <SdioCard::readData(unsigned char*)+0xa4>)
    6546:	bl	57d0 <waitTimeout(bool (*)())>
    654a:	cmp	r0, #0
    654c:	bne.n	65aa <SdioCard::readData(unsigned char*)+0x8e>
    654e:	subs	r3, r5, #4
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    6550:	ldr	r1, [pc, #104]	; (65bc <SdioCard::readData(unsigned char*)+0xa0>)
    6552:	add.w	r5, r5, #508	; 0x1fc
    6556:	ldr	r2, [r1, #36]	; 0x24
    6558:	lsls	r0, r2, #20
    655a:	bpl.n	6556 <SdioCard::readData(unsigned char*)+0x3a>
    655c:	add.w	r0, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    6560:	ldr	r2, [r1, #32]
    6562:	ldr	r4, [pc, #88]	; (65bc <SdioCard::readData(unsigned char*)+0xa0>)
    6564:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    6568:	cmp	r0, r3
    656a:	bne.n	6560 <SdioCard::readData(unsigned char*)+0x44>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    656c:	cmp	r5, r0
    656e:	mov	r3, r0
    6570:	bne.n	6556 <SdioCard::readData(unsigned char*)+0x3a>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    6572:	ldr	r0, [pc, #80]	; (65c4 <SdioCard::readData(unsigned char*)+0xa8>)
    6574:	bl	57d0 <waitTimeout(bool (*)())>
    6578:	cbnz	r0, 6598 <SdioCard::readData(unsigned char*)+0x7c>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    657a:	ldr	r2, [r4, #48]	; 0x30
    657c:	ldr	r3, [pc, #72]	; (65c8 <SdioCard::readData(unsigned char*)+0xac>)
    657e:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    6580:	ldr	r2, [r3, #0]
    6582:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    6584:	ldr	r2, [r3, #0]
    6586:	lsls	r2, r2, #30
    6588:	bpl.n	65ba <SdioCard::readData(unsigned char*)+0x9e>
    658a:	ldr	r3, [r3, #0]
    658c:	ldr	r0, [pc, #60]	; (65cc <SdioCard::readData(unsigned char*)+0xb0>)
    658e:	ands	r0, r3
    6590:	clz	r0, r0
    6594:	lsrs	r0, r0, #5
    6596:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6598:	ldr	r1, [pc, #52]	; (65d0 <SdioCard::readData(unsigned char*)+0xb4>)
    659a:	movs	r0, #30
  m_errorLine = line;
    659c:	ldr	r3, [pc, #52]	; (65d4 <SdioCard::readData(unsigned char*)+0xb8>)
    659e:	mov.w	r2, #900	; 0x384
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    65a2:	strb	r0, [r1, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    65a4:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    65a6:	str	r2, [r3, #0]
    65a8:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    65aa:	ldr	r1, [pc, #36]	; (65d0 <SdioCard::readData(unsigned char*)+0xb4>)
    65ac:	movs	r4, #27
  m_errorLine = line;
    65ae:	ldr	r3, [pc, #36]	; (65d4 <SdioCard::readData(unsigned char*)+0xb8>)
    65b0:	movw	r2, #889	; 0x379
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    65b4:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    65b6:	strb	r4, [r1, #0]
  m_errorLine = line;
    65b8:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    65ba:	pop	{r3, r4, r5, pc}
    65bc:	.word	0x402c0000
    65c0:	.word	0x00005619
    65c4:	.word	0x00005641
    65c8:	.word	0x20021b94
    65cc:	.word	0x117f0000
    65d0:	.word	0x200021d6
    65d4:	.word	0x20021274

000065d8 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    65d8:	push	{r4, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    65da:	ldr	r0, [pc, #80]	; (662c <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    65dc:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    65de:	bl	57f8 <yieldTimeout(bool (*)())>
    65e2:	cbnz	r0, 6618 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    65e4:	ldr	r3, [pc, #72]	; (6630 <SdioCard::readStart(unsigned long)+0x58>)
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    65e6:	mov.w	r0, #512	; 0x200
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    65ea:	ldr	r1, [pc, #72]	; (6634 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    65ec:	ldr	r2, [r3, #40]	; 0x28
    65ee:	orr.w	r2, r2, #65536	; 0x10000
    65f2:	str	r2, [r3, #40]	; 0x28
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    65f4:	str	r0, [r3, #4]
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    65f6:	ldrb	r3, [r1, #0]
    65f8:	cbnz	r3, 6614 <SdioCard::readStart(unsigned long)+0x3c>
    65fa:	lsls	r1, r4, #9
    65fc:	ldr	r0, [pc, #56]	; (6638 <SdioCard::readStart(unsigned long)+0x60>)
    65fe:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    6602:	cbnz	r0, 6612 <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6604:	ldr	r1, [pc, #52]	; (663c <SdioCard::readStart(unsigned long)+0x64>)
    6606:	movs	r4, #12
  m_errorLine = line;
    6608:	ldr	r3, [pc, #52]	; (6640 <SdioCard::readStart(unsigned long)+0x68>)
    660a:	movw	r2, #1002	; 0x3ea
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    660e:	strb	r4, [r1, #0]
  m_errorLine = line;
    6610:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    6612:	pop	{r4, pc}
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    6614:	mov	r1, r4
    6616:	b.n	65fc <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6618:	ldr	r1, [pc, #32]	; (663c <SdioCard::readStart(unsigned long)+0x64>)
    661a:	movs	r0, #10
  m_errorLine = line;
    661c:	ldr	r3, [pc, #32]	; (6640 <SdioCard::readStart(unsigned long)+0x68>)
    661e:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6622:	strb	r0, [r1, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    6624:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    6626:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    6628:	pop	{r4, pc}
    662a:	nop
    662c:	.word	0x00005921
    6630:	.word	0x402c0000
    6634:	.word	0x200224b0
    6638:	.word	0x123a0030
    663c:	.word	0x200021d6
    6640:	.word	0x20021274

00006644 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSDS(sds_t* sds) {
  memcpy(sds, &m_sds, sizeof(sds_t));
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    6644:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    6646:	ldrb	r3, [r0, #8]
bool SdioCard::readSDS(sds_t* sds) {
  memcpy(sds, &m_sds, sizeof(sds_t));
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    6648:	sub.w	sp, sp, #512	; 0x200
    664c:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    664e:	lsls	r4, r3, #31
    6650:	bpl.n	6676 <SdioCard::readSector(unsigned long, unsigned char*)+0x32>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    6652:	lsls	r3, r2, #30
    6654:	beq.n	6698 <SdioCard::readSector(unsigned long, unsigned char*)+0x54>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6656:	movs	r3, #1
    6658:	ldr	r0, [pc, #164]	; (6700 <SdioCard::readSector(unsigned long, unsigned char*)+0xbc>)
    665a:	mov	r2, sp
    665c:	bl	5a1c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6660:	cbz	r0, 66a4 <SdioCard::readSector(unsigned long, unsigned char*)+0x60>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    6662:	mov	r1, sp
    6664:	mov	r0, r5
    6666:	mov.w	r2, #512	; 0x200
    666a:	bl	69a8 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    666e:	movs	r0, #1
}
    6670:	add.w	sp, sp, #512	; 0x200
    6674:	pop	{r4, r5, r6, pc}
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    6676:	ldr	r3, [pc, #140]	; (6704 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    6678:	mov	r4, r0
    667a:	mov	r6, r1
    667c:	ldrb	r3, [r3, #0]
    667e:	cbnz	r3, 66ce <SdioCard::readSector(unsigned long, unsigned char*)+0x8a>
    }
  } else {
    if (!waitTransferComplete()) {
      return false;
    }
    if (m_curState != READ_STATE || sector != m_curSector) {
    6680:	ldrb	r3, [r4, #9]
    6682:	cmp	r3, #1
    6684:	beq.n	66ba <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    6686:	ldr	r3, [r4, #0]
    6688:	mov	r0, r4
    668a:	ldr	r3, [r3, #28]
    668c:	blx	r3
    668e:	cbnz	r0, 66da <SdioCard::readSector(unsigned long, unsigned char*)+0x96>
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (!waitTransferComplete()) {
      return false;
    6690:	movs	r0, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    6692:	add.w	sp, sp, #512	; 0x200
    6696:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6698:	movs	r3, #1
    669a:	ldr	r0, [pc, #100]	; (6700 <SdioCard::readSector(unsigned long, unsigned char*)+0xbc>)
    669c:	bl	5a1c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    66a0:	cmp	r0, #0
    66a2:	bne.n	666e <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    66a4:	movs	r0, #11
    66a6:	ldr	r1, [pc, #96]	; (6708 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    66a8:	ldr	r3, [pc, #96]	; (670c <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
    66aa:	movw	r2, #929	; 0x3a1
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    66ae:	strb	r0, [r1, #0]
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    66b0:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    66b2:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    66b4:	add.w	sp, sp, #512	; 0x200
    66b8:	pop	{r4, r5, r6, pc}
    }
  } else {
    if (!waitTransferComplete()) {
      return false;
    }
    if (m_curState != READ_STATE || sector != m_curSector) {
    66ba:	ldr	r3, [r4, #4]
    66bc:	cmp	r6, r3
    66be:	beq.n	66ec <SdioCard::readSector(unsigned long, unsigned char*)+0xa8>
      if (!syncDevice()) {
    66c0:	ldr	r3, [r4, #0]
    66c2:	mov	r0, r4
    66c4:	ldr	r3, [r3, #28]
    66c6:	blx	r3
    66c8:	cmp	r0, #0
    66ca:	beq.n	6690 <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
    66cc:	b.n	66da <SdioCard::readSector(unsigned long, unsigned char*)+0x96>
    66ce:	bl	5cf8 <waitTransferComplete() [clone .part.13]>
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (!waitTransferComplete()) {
    66d2:	cmp	r0, #0
    66d4:	bne.n	6680 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
      return false;
    66d6:	movs	r0, #0
    66d8:	b.n	6692 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
    }
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    66da:	mov	r1, r6
    66dc:	mov	r0, r4
    66de:	bl	65d8 <SdioCard::readStart(unsigned long)>
    66e2:	cmp	r0, #0
    66e4:	beq.n	6690 <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    66e6:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    66e8:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    66ea:	strb	r3, [r4, #9]
    }
    if (!readData(dst)) {
    66ec:	mov	r1, r5
    66ee:	mov	r0, r4
    66f0:	bl	651c <SdioCard::readData(unsigned char*)>
    66f4:	cmp	r0, #0
    66f6:	beq.n	6690 <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    66f8:	ldr	r3, [r4, #4]
    66fa:	adds	r3, #1
    66fc:	str	r3, [r4, #4]
    66fe:	b.n	66b4 <SdioCard::readSector(unsigned long, unsigned char*)+0x70>
    6700:	.word	0x113a0011
    6704:	.word	0x200224b1
    6708:	.word	0x200021d6
    670c:	.word	0x20021274

00006710 <SdioCard::stopTransmission(bool)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
//------------------------------------------------------------------------------
uint32_t SdioCard::status() { return statusCMD13(); }
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    6710:	push	{r4, r5, r6, lr}
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6712:	ldr	r2, [pc, #80]	; (6764 <SdioCard::stopTransmission(bool)+0x54>)
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
//------------------------------------------------------------------------------
uint32_t SdioCard::status() { return statusCMD13(); }
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
    6714:	movs	r5, #0
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
//------------------------------------------------------------------------------
uint32_t SdioCard::status() { return statusCMD13(); }
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    6716:	mov	r6, r1
  m_curState = IDLE_STATE;
    6718:	strb	r5, [r0, #9]
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    671a:	mov	r1, r5
uint32_t SdioCard::status() { return statusCMD13(); }
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    671c:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    671e:	ldr	r0, [pc, #72]	; (6768 <SdioCard::stopTransmission(bool)+0x58>)
uint32_t SdioCard::status() { return statusCMD13(); }
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6720:	bic.w	r3, r3, #65536	; 0x10000
    6724:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6726:	bl	58b8 <cardCommand(unsigned long, unsigned long)>
    672a:	mov	r4, r0
    672c:	cbz	r0, 6752 <SdioCard::stopTransmission(bool)+0x42>
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    672e:	cbnz	r6, 6734 <SdioCard::stopTransmission(bool)+0x24>
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    6730:	mov	r0, r4
    6732:	pop	{r4, r5, r6, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    if (yieldTimeout(isBusyDat)) {
    6734:	ldr	r0, [pc, #52]	; (676c <SdioCard::stopTransmission(bool)+0x5c>)
    6736:	bl	57f8 <yieldTimeout(bool (*)())>
    673a:	cmp	r0, #0
    673c:	beq.n	6730 <SdioCard::stopTransmission(bool)+0x20>
      return sdError(SD_CARD_ERROR_CMD13);
    673e:	mov	r4, r5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6740:	ldr	r1, [pc, #44]	; (6770 <SdioCard::stopTransmission(bool)+0x60>)
    6742:	movs	r0, #10
  m_errorLine = line;
    6744:	ldr	r3, [pc, #44]	; (6774 <SdioCard::stopTransmission(bool)+0x64>)
    6746:	movw	r2, #1022	; 0x3fe
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    674a:	strb	r0, [r1, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    674c:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    674e:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    6750:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    6752:	ldr	r1, [pc, #28]	; (6770 <SdioCard::stopTransmission(bool)+0x60>)
    6754:	movs	r0, #9
  m_errorLine = line;
    6756:	ldr	r3, [pc, #28]	; (6774 <SdioCard::stopTransmission(bool)+0x64>)
    6758:	movw	r2, #1018	; 0x3fa
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    675c:	strb	r0, [r1, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    675e:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    6760:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    6762:	pop	{r4, r5, r6, pc}
    6764:	.word	0x402c0000
    6768:	.word	0x0cdb0000
    676c:	.word	0x000055f9
    6770:	.word	0x200021d6
    6774:	.word	0x20021274

00006778 <SdioCard::syncDevice()>:
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    6778:	ldr	r3, [pc, #36]	; (67a0 <SdioCard::syncDevice()+0x28>)
    677a:	ldrb	r3, [r3, #0]
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
    677c:	push	{r4, lr}
    677e:	mov	r4, r0
  }
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    6780:	cbnz	r3, 6796 <SdioCard::syncDevice()+0x1e>
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    6782:	ldrb	r3, [r4, #9]
    6784:	cbnz	r3, 678a <SdioCard::syncDevice()+0x12>
    return stopTransmission(true);
  }
  return true;
    6786:	movs	r0, #1
    6788:	pop	{r4, pc}
bool SdioCard::syncDevice() {
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    678a:	mov	r0, r4
    678c:	movs	r1, #1
  }
  return true;
}
    678e:	ldmia.w	sp!, {r4, lr}
bool SdioCard::syncDevice() {
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    6792:	b.w	6710 <SdioCard::stopTransmission(bool)>
    6796:	bl	5cf8 <waitTransferComplete() [clone .part.13]>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (!waitTransferComplete()) {
    679a:	cmp	r0, #0
    679c:	bne.n	6782 <SdioCard::syncDevice()+0xa>
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
  }
  return true;
}
    679e:	pop	{r4, pc}
    67a0:	.word	0x200224b1

000067a4 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) && defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
    67a4:	ldr	r3, [r0, #0]
    67a6:	ldr	r1, [r0, #4]
    67a8:	push	{r4, r5}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    67aa:	ldrb	r2, [r3, #19]
    67ac:	ldr	r4, [r0, #8]
    67ae:	cmp	r2, #0
    67b0:	beq.n	6804 <SdSpiArduinoDriver::activate()+0x60>
			__disable_irq();
    67b2:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    67b4:	ldrb	r2, [r3, #19]
    67b6:	lsls	r5, r2, #31
    67b8:	bpl.n	67c8 <SdSpiArduinoDriver::activate()+0x24>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    67ba:	ldr	r0, [pc, #204]	; (6888 <SdSpiArduinoDriver::activate()+0xe4>)
    67bc:	ldr	r2, [r3, #20]
    67be:	ldr	r5, [r0, #0]
    67c0:	ands	r2, r5
    67c2:	str	r2, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    67c4:	str	r2, [r0, #0]
    67c6:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x02) {
    67c8:	lsls	r0, r2, #30
    67ca:	bpl.n	67da <SdSpiArduinoDriver::activate()+0x36>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    67cc:	ldr	r0, [pc, #188]	; (688c <SdSpiArduinoDriver::activate()+0xe8>)
    67ce:	ldr	r2, [r3, #24]
    67d0:	ldr	r5, [r0, #0]
    67d2:	ands	r2, r5
    67d4:	str	r2, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    67d6:	str	r2, [r0, #0]
    67d8:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x04) {
    67da:	lsls	r5, r2, #29
    67dc:	bpl.n	67ec <SdSpiArduinoDriver::activate()+0x48>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    67de:	ldr	r0, [pc, #176]	; (6890 <SdSpiArduinoDriver::activate()+0xec>)
    67e0:	ldr	r2, [r3, #28]
    67e2:	ldr	r5, [r0, #0]
    67e4:	ands	r2, r5
    67e6:	str	r2, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    67e8:	str	r2, [r0, #0]
    67ea:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x08) {
    67ec:	lsls	r0, r2, #28
    67ee:	bpl.n	67fe <SdSpiArduinoDriver::activate()+0x5a>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    67f0:	ldr	r0, [pc, #160]	; (6894 <SdSpiArduinoDriver::activate()+0xf0>)
    67f2:	ldr	r2, [r3, #32]
    67f4:	ldr	r5, [r0, #0]
    67f6:	ands	r2, r5
    67f8:	str	r2, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    67fa:	str	r2, [r0, #0]
    67fc:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x10) {
    67fe:	lsls	r2, r2, #27
    6800:	bmi.n	685a <SdSpiArduinoDriver::activate()+0xb6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    6802:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    6804:	ldr	r2, [r3, #8]
    6806:	cmp	r2, r1
    6808:	beq.n	6868 <SdSpiArduinoDriver::activate()+0xc4>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    680a:	ldr	r2, [pc, #140]	; (6898 <SdSpiArduinoDriver::activate()+0xf4>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    680c:	str	r1, [r3, #8]

			uint32_t cbcmr = CCM_CBCMR;
    680e:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    6810:	ldr	r0, [pc, #136]	; (689c <SdSpiArduinoDriver::activate()+0xf8>)
    6812:	ubfx	r5, r2, #4, #2
    6816:	ubfx	r2, r2, #26, #3
    681a:	ldr.w	r0, [r0, r5, lsl #2]
    681e:	adds	r2, #1
    6820:	udiv	r0, r0, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    6824:	cbz	r1, 6856 <SdSpiArduinoDriver::activate()+0xb2>
    6826:	udiv	r2, r0, r1

			if (d && clkhz/d > _clock) d++;
    682a:	cbz	r2, 683e <SdSpiArduinoDriver::activate()+0x9a>
    682c:	udiv	r0, r0, r2
    6830:	cmp	r0, r1
    6832:	it	hi
    6834:	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    6836:	cmp.w	r2, #258	; 0x102
    683a:	bcc.n	686c <SdSpiArduinoDriver::activate()+0xc8>
    683c:	ldr	r2, [pc, #96]	; (68a0 <SdSpiArduinoDriver::activate()+0xfc>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    683e:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6840:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    6842:	movs	r5, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6844:	movs	r0, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    6846:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    6848:	str	r5, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    684a:	str	r0, [r3, #36]	; 0x24
		port().CCR = _ccr;
    684c:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    684e:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    6850:	str	r1, [r3, #16]
    6852:	pop	{r4, r5}
    6854:	bx	lr

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    6856:	mov	r2, r0
    6858:	b.n	682a <SdSpiArduinoDriver::activate()+0x86>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    685a:	ldr	r0, [pc, #72]	; (68a4 <SdSpiArduinoDriver::activate()+0x100>)
    685c:	ldr	r2, [r3, #36]	; 0x24
    685e:	ldr	r5, [r0, #0]
    6860:	ands	r2, r5
    6862:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    6864:	str	r2, [r0, #0]
    6866:	b.n	6802 <SdSpiArduinoDriver::activate()+0x5e>
    6868:	ldr	r2, [r3, #12]
    686a:	b.n	6840 <SdSpiArduinoDriver::activate()+0x9c>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    686c:	cmp	r2, #2
    686e:	it	ls
    6870:	movls	r2, #0
    6872:	bls.n	683e <SdSpiArduinoDriver::activate()+0x9a>
    6874:	subs	r2, #2
    6876:	lsrs	r0, r2, #1
    6878:	lsls	r1, r0, #16
    687a:	orr.w	r2, r2, r0, lsl #8
    687e:	and.w	r1, r1, #16711680	; 0xff0000
    6882:	orrs	r2, r1
    6884:	b.n	683e <SdSpiArduinoDriver::activate()+0x9a>
    6886:	nop
    6888:	.word	0xe000e180
    688c:	.word	0xe000e184
    6890:	.word	0xe000e188
    6894:	.word	0xe000e18c
    6898:	.word	0x400fc000
    689c:	.word	0x2000050c
    68a0:	.word	0x007f7fff
    68a4:	.word	0xe000e190

000068a8 <SdSpiArduinoDriver::deactivate()>:
    m_spi = &SPI;
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
    68a8:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    68aa:	ldrb	r3, [r2, #19]
    68ac:	cbz	r3, 68e8 <SdSpiArduinoDriver::deactivate()+0x40>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    68ae:	lsls	r0, r3, #31
    68b0:	bpl.n	68ba <SdSpiArduinoDriver::deactivate()+0x12>
    68b2:	ldr	r3, [pc, #56]	; (68ec <SdSpiArduinoDriver::deactivate()+0x44>)
    68b4:	ldr	r1, [r2, #40]	; 0x28
    68b6:	str	r1, [r3, #0]
    68b8:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    68ba:	lsls	r1, r3, #30
    68bc:	bpl.n	68c6 <SdSpiArduinoDriver::deactivate()+0x1e>
    68be:	ldr	r3, [pc, #48]	; (68f0 <SdSpiArduinoDriver::deactivate()+0x48>)
    68c0:	ldr	r1, [r2, #44]	; 0x2c
    68c2:	str	r1, [r3, #0]
    68c4:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    68c6:	lsls	r0, r3, #29
    68c8:	bpl.n	68d2 <SdSpiArduinoDriver::deactivate()+0x2a>
    68ca:	ldr	r3, [pc, #40]	; (68f4 <SdSpiArduinoDriver::deactivate()+0x4c>)
    68cc:	ldr	r1, [r2, #48]	; 0x30
    68ce:	str	r1, [r3, #0]
    68d0:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    68d2:	lsls	r1, r3, #28
    68d4:	bpl.n	68de <SdSpiArduinoDriver::deactivate()+0x36>
    68d6:	ldr	r3, [pc, #32]	; (68f8 <SdSpiArduinoDriver::deactivate()+0x50>)
    68d8:	ldr	r1, [r2, #52]	; 0x34
    68da:	str	r1, [r3, #0]
    68dc:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    68de:	lsls	r3, r3, #27
    68e0:	bpl.n	68e8 <SdSpiArduinoDriver::deactivate()+0x40>
    68e2:	ldr	r2, [r2, #56]	; 0x38
    68e4:	ldr	r3, [pc, #20]	; (68fc <SdSpiArduinoDriver::deactivate()+0x54>)
    68e6:	str	r2, [r3, #0]
    68e8:	bx	lr
    68ea:	nop
    68ec:	.word	0xe000e100
    68f0:	.word	0xe000e104
    68f4:	.word	0xe000e108
    68f8:	.word	0xe000e10c
    68fc:	.word	0xe000e110

00006900 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
    6900:	ldr	r0, [r0, #0]
    6902:	b.w	1f04 <SPIClass::end()>
    6906:	nop

00006908 <SdSpiArduinoDriver::receive()>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
    6908:	ldr	r2, [r0, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    690a:	movs	r3, #255	; 0xff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    690c:	ldr	r2, [r2, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    690e:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6910:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6912:	tst.w	r3, #2031616	; 0x1f0000
    6916:	beq.n	6910 <SdSpiArduinoDriver::receive()+0x8>
    6918:	ldr	r0, [r2, #116]	; 0x74
    691a:	uxtb	r0, r0
    691c:	bx	lr
    691e:	nop

00006920 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    6920:	push	{r4, r5, r6, lr}
    6922:	mov	r4, r1
    6924:	mov	r6, r2
    6926:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    6928:	movs	r1, #255	; 0xff
    692a:	mov	r0, r4
    692c:	bl	980c <memset>
				transfer16(buf, buf, count >> 1);
				return;
			}
		}
#endif
		transfer(buf, buf, count);
    6930:	ldr	r0, [r5, #0]
    6932:	mov	r3, r6
    6934:	mov	r2, r4
    6936:	mov	r1, r4
    6938:	bl	1efc <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    693c:	movs	r0, #0
    693e:	pop	{r4, r5, r6, pc}

00006940 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
    6940:	ldr	r3, [r0, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6942:	ldr	r2, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    6944:	str	r1, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6946:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6948:	tst.w	r3, #2031616	; 0x1f0000
    694c:	beq.n	6946 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    694e:	ldr	r3, [r2, #116]	; 0x74
    6950:	bx	lr
    6952:	nop

00006954 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
    6954:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    6956:	subs	r5, r2, #1
  return 0;
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
    6958:	sub.w	sp, sp, #516	; 0x204
    695c:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    695e:	cmp.w	r5, #512	; 0x200
    6962:	bcc.n	6986 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x32>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    6964:	cbz	r2, 6980 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x2c>
    6966:	ldr	r2, [r0, #0]
    6968:	adds	r0, r1, r3
    696a:	ldr	r2, [r2, #0]
    m_spi->transfer(buf[i]);
    696c:	ldrb.w	r3, [r1], #1
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    6970:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6972:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6974:	tst.w	r3, #2031616	; 0x1f0000
    6978:	beq.n	6972 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1e>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    697a:	cmp	r1, r0
    697c:	ldr	r3, [r2, #116]	; 0x74
    697e:	bne.n	696c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x18>
    m_spi->transfer(buf[i]);
  }
}
    6980:	add.w	sp, sp, #516	; 0x204
    6984:	pop	{r4, r5, pc}
    6986:	mov	r4, r2
    6988:	mov	r5, r0
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    698a:	mov	r0, sp
    698c:	bl	69a8 <memcpy>
				transfer16(buf, buf, count >> 1);
				return;
			}
		}
#endif
		transfer(buf, buf, count);
    6990:	mov	r3, r4
    6992:	mov	r2, sp
    6994:	mov	r1, sp
    6996:	ldr	r0, [r5, #0]
    6998:	bl	1efc <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    699c:	add.w	sp, sp, #516	; 0x204
    69a0:	pop	{r4, r5, pc}
    69a2:	nop

000069a4 <sdCsWrite(unsigned char, bool)>:
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) { digitalWrite(pin, level); }
    69a4:	b.w	831c <digitalWrite>

000069a8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    69a8:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    69aa:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    69ae:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    69b2:	bne.n	6a90 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    69b4:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    69b6:	bcc.n	6a3c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    69b8:	ldr.w	r3, [r1], #4
    69bc:	str.w	r3, [r0], #4
    69c0:	ldr.w	r3, [r1], #4
    69c4:	str.w	r3, [r0], #4
    69c8:	ldr.w	r3, [r1], #4
    69cc:	str.w	r3, [r0], #4
    69d0:	ldr.w	r3, [r1], #4
    69d4:	str.w	r3, [r0], #4
    69d8:	ldr.w	r3, [r1], #4
    69dc:	str.w	r3, [r0], #4
    69e0:	ldr.w	r3, [r1], #4
    69e4:	str.w	r3, [r0], #4
    69e8:	ldr.w	r3, [r1], #4
    69ec:	str.w	r3, [r0], #4
    69f0:	ldr.w	r3, [r1], #4
    69f4:	str.w	r3, [r0], #4
    69f8:	ldr.w	r3, [r1], #4
    69fc:	str.w	r3, [r0], #4
    6a00:	ldr.w	r3, [r1], #4
    6a04:	str.w	r3, [r0], #4
    6a08:	ldr.w	r3, [r1], #4
    6a0c:	str.w	r3, [r0], #4
    6a10:	ldr.w	r3, [r1], #4
    6a14:	str.w	r3, [r0], #4
    6a18:	ldr.w	r3, [r1], #4
    6a1c:	str.w	r3, [r0], #4
    6a20:	ldr.w	r3, [r1], #4
    6a24:	str.w	r3, [r0], #4
    6a28:	ldr.w	r3, [r1], #4
    6a2c:	str.w	r3, [r0], #4
    6a30:	ldr.w	r3, [r1], #4
    6a34:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    6a38:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    6a3a:	bcs.n	69b8 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    6a3c:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    6a3e:	bcc.n	6a64 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    6a40:	ldr.w	r3, [r1], #4
    6a44:	str.w	r3, [r0], #4
    6a48:	ldr.w	r3, [r1], #4
    6a4c:	str.w	r3, [r0], #4
    6a50:	ldr.w	r3, [r1], #4
    6a54:	str.w	r3, [r0], #4
    6a58:	ldr.w	r3, [r1], #4
    6a5c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    6a60:	subs	r2, #16
	bhs	.Lmid_block_loop
    6a62:	bcs.n	6a40 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    6a64:	adds	r2, #12
	blo	.Lcopy_less_than_4
    6a66:	bcc.n	6a74 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    6a68:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    6a6c:	str.w	r3, [r0], #4
	subs	r2, #4
    6a70:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    6a72:	bcs.n	6a68 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    6a74:	adds	r2, #4
	beq	.Ldone
    6a76:	beq.n	6a8a <memcpy+0xe2>

	lsls	r2, r2, #31
    6a78:	lsls	r2, r2, #31
	itt ne
    6a7a:	itt	ne
	ldrbne  r3, [r1], #1
    6a7c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    6a80:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    6a84:	bcc.n	6a8a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    6a86:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    6a88:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    6a8a:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    6a8c:	bx	lr
    6a8e:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    6a90:	cmp	r2, #8
	blo	.Lbyte_copy
    6a92:	bcc.n	6abc <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    6a94:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    6a96:	beq.n	69b4 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    6a98:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    6a9c:	beq.n	69b4 <memcpy+0xc>

	rsb	r3, #4
    6a9e:	rsb	r3, r3, #4
	subs	r2, r3
    6aa2:	subs	r2, r2, r3

	lsls    r3, r3, #31
    6aa4:	lsls	r3, r3, #31
	itt ne
    6aa6:	itt	ne
	ldrbne  r3, [r1], #1
    6aa8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    6aac:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    6ab0:	bcc.n	69b4 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    6ab2:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    6ab6:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    6aba:	b.n	69b4 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    6abc:	subs	r2, #4
	blo	.Lcopy_less_than_4
    6abe:	bcc.n	6a74 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    6ac0:	subs	r2, #1
	ldrb    r3, [r1], #1
    6ac2:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    6ac6:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    6aca:	bcs.n	6ac0 <memcpy+0x118>

	ldrb	r3, [r1]
    6acc:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    6ace:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    6ad0:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    6ad2:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    6ad4:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    6ad6:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    6ad8:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    6ada:	bx	lr

00006adc <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    6adc:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    6ade:	ldr	r1, [pc, #80]	; (6b30 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    6ae0:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    6ae4:	ldr	r5, [pc, #76]	; (6b34 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    6ae6:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    6ae8:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    6aec:	ldr	r6, [pc, #72]	; (6b38 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    6aee:	ldr	r2, [pc, #76]	; (6b3c <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    6af0:	add.w	r5, r5, r0, lsl #5
    6af4:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    6af6:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    6af8:	mov	r0, r5
    6afa:	ldrh	r2, [r6, #0]
    6afc:	bl	7d9c <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    6b00:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    6b02:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    6b06:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    6b08:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    6b0c:	ldr	r2, [pc, #48]	; (6b40 <rx_queue_transfer+0x64>)
    6b0e:	str	r3, [r2, #0]
		location += 32;
    6b10:	adds	r3, #32
	} while (location < end_addr);
    6b12:	cmp	r1, r3
    6b14:	bhi.n	6b0e <rx_queue_transfer+0x32>
	asm("dsb");
    6b16:	dsb	sy
	asm("isb");
    6b1a:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    6b1e:	movs	r0, #3
    6b20:	mov	r1, r5
    6b22:	bl	7df4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    6b26:	ldr	r3, [pc, #28]	; (6b44 <rx_queue_transfer+0x68>)
    6b28:	mov.w	r2, #131072	; 0x20000
    6b2c:	str	r2, [r3, #0]
    6b2e:	pop	{r3, r4, r5, r6, r7, pc}
    6b30:	.word	0x200026c0
    6b34:	.word	0x200036c0
    6b38:	.word	0x200224a6
    6b3c:	.word	0xe000e18c
    6b40:	.word	0xe000ef5c
    6b44:	.word	0xe000e10c

00006b48 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    6b48:	ldr	r2, [pc, #144]	; (6bdc <rx_event+0x94>)
    6b4a:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    6b4c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    6b50:	ubfx	r3, r3, #16, #15
    6b54:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    6b56:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    6b58:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    6b5a:	cmp	r4, #0
    6b5c:	ble.n	6bd0 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    6b5e:	ldr	r1, [pc, #128]	; (6be0 <rx_event+0x98>)
		if (head != rx_tail) {
    6b60:	ldr	r2, [pc, #128]	; (6be4 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    6b62:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    6b64:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    6b66:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    6b68:	ldr	r0, [pc, #124]	; (6be8 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    6b6a:	ldr	r6, [pc, #128]	; (6bec <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    6b6c:	cmp	r3, r2
    6b6e:	beq.n	6b80 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    6b70:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    6b74:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    6b78:	rsb	r2, r7, #512	; 0x200
    6b7c:	cmp	r4, r2
    6b7e:	bls.n	6ba6 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    6b80:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    6b82:	movs	r2, #0
    6b84:	ldr	r7, [pc, #104]	; (6bf0 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    6b86:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    6b88:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    6b8c:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    6b90:	ldr	r6, [pc, #96]	; (6bf4 <rx_event+0xac>)
    6b92:	ite	ls
    6b94:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    6b96:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    6b98:	strb	r2, [r1, #0]
		rx_available += len;
    6b9a:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    6b9c:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    6b9e:	add	r4, r2
    6ba0:	str	r4, [r6, #0]
    6ba2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    6ba6:	ldr	r3, [pc, #80]	; (6bf8 <rx_event+0xb0>)
    6ba8:	add.w	r0, r7, r8, lsl #9
    6bac:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    6bae:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    6bb0:	add.w	r1, r3, r5, lsl #9
    6bb4:	add	r0, r3
    6bb6:	bl	69a8 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    6bba:	ldr	r2, [pc, #56]	; (6bf4 <rx_event+0xac>)
				rx_queue_transfer(i);
    6bbc:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    6bbe:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    6bc2:	ldr	r3, [r2, #0]
    6bc4:	add	r4, r3
    6bc6:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    6bc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    6bcc:	b.w	6adc <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    6bd0:	mov	r0, r5
	}
}
    6bd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    6bd6:	b.w	6adc <rx_queue_transfer>
    6bda:	nop
    6bdc:	.word	0x200224a6
    6be0:	.word	0x200224b8
    6be4:	.word	0x200224b9
    6be8:	.word	0x20021fa4
    6bec:	.word	0x20021f84
    6bf0:	.word	0x20021f94
    6bf4:	.word	0x20021f80
    6bf8:	.word	0x200026c0

00006bfc <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    6bfc:	ldr	r3, [pc, #120]	; (6c78 <usb_serial_flush_callback+0x7c>)
    6bfe:	ldrb	r2, [r3, #0]
    6c00:	cbnz	r2, 6c1a <usb_serial_flush_callback+0x1e>
    6c02:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    6c06:	ldr	r2, [pc, #116]	; (6c7c <usb_serial_flush_callback+0x80>)
    6c08:	ldrb	r2, [r2, #0]
    6c0a:	cbz	r2, 6c1a <usb_serial_flush_callback+0x1e>
	asm("dsb" ::: "memory");
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    6c0c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    6c10:	ldr	r5, [pc, #108]	; (6c80 <usb_serial_flush_callback+0x84>)
    6c12:	ldrh	r2, [r5, #0]
    6c14:	cbnz	r2, 6c1c <usb_serial_flush_callback+0x20>
    6c16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c1a:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    6c1c:	ldr	r6, [pc, #100]	; (6c84 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    6c1e:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    6c22:	ldr	r7, [pc, #100]	; (6c88 <usb_serial_flush_callback+0x8c>)
    6c24:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    6c26:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    6c28:	ldr	r4, [pc, #96]	; (6c8c <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    6c2a:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    6c2e:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    6c32:	mov	r0, r7
    6c34:	mov	r1, r4
    6c36:	bl	7d9c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    6c3a:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    6c3e:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    6c42:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    6c46:	ldr	r3, [pc, #72]	; (6c90 <usb_serial_flush_callback+0x94>)
    6c48:	str	r1, [r3, #0]
		location += 32;
    6c4a:	adds	r1, #32
	} while (location < end_addr);
    6c4c:	cmp	r2, r1
    6c4e:	bhi.n	6c48 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    6c50:	dsb	sy
	asm("isb");
    6c54:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    6c58:	movs	r0, #4
    6c5a:	mov	r1, r7
    6c5c:	bl	7dcc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    6c60:	ldrb	r3, [r6, #0]
    6c62:	ldr	r2, [pc, #32]	; (6c84 <usb_serial_flush_callback+0x88>)
    6c64:	adds	r3, #1
    6c66:	uxtb	r3, r3
    6c68:	cmp	r3, #3
    6c6a:	it	hi
    6c6c:	movhi	r3, #0
    6c6e:	strb	r3, [r2, #0]
	tx_available = 0;
    6c70:	movs	r3, #0
    6c72:	strh	r3, [r5, #0]
    6c74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c78:	.word	0x200224bd
    6c7c:	.word	0x200224bf
    6c80:	.word	0x200224aa
    6c84:	.word	0x200224bc
    6c88:	.word	0x200037c0
    6c8c:	.word	0x20003840
    6c90:	.word	0xe000ef70

00006c94 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    6c94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c98:	sub	sp, #20
    6c9a:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    6c9c:	str	r1, [sp, #0]
    6c9e:	cmp	r1, #0
    6ca0:	beq.w	6dfa <usb_serial_write.part.1+0x166>
    6ca4:	movs	r3, #0
    6ca6:	ldr	r5, [pc, #344]	; (6e00 <usb_serial_write.part.1+0x16c>)
    6ca8:	ldr.w	r8, [pc, #372]	; 6e20 <usb_serial_write.part.1+0x18c>
    6cac:	ldr.w	sl, [pc, #352]	; 6e10 <usb_serial_write.part.1+0x17c>
				break;
			}
			asm("dsb" ::: "memory");
			tx_noautoflush = 0;
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    6cb0:	ldr	r7, [pc, #336]	; (6e04 <usb_serial_write.part.1+0x170>)
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    6cb2:	ldr.w	fp, [pc, #368]	; 6e24 <usb_serial_write.part.1+0x190>
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    6cb6:	str	r3, [sp, #4]
		tx_noautoflush = 1;
    6cb8:	movs	r2, #1
		transfer_t *xfer = tx_transfer + tx_head;
    6cba:	ldr	r3, [pc, #332]	; (6e08 <usb_serial_write.part.1+0x174>)
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
    6cbc:	strb	r2, [r5, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    6cbe:	ldrb	r4, [r3, #0]
    6cc0:	ldr	r2, [pc, #328]	; (6e0c <usb_serial_write.part.1+0x178>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    6cc2:	ldrh.w	r3, [r8]
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
    6cc6:	add.w	r9, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    6cca:	cbnz	r3, 6d16 <usb_serial_write.part.1+0x82>
    6ccc:	mov	r6, r3
    6cce:	mov	r4, r3
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    6cd0:	mov	r0, r9
    6cd2:	bl	7e18 <usb_transfer_status>
			if (!(status & 0x80)) {
    6cd6:	ands.w	r0, r0, #128	; 0x80
    6cda:	beq.n	6dda <usb_serial_write.part.1+0x146>
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			asm("dsb" ::: "memory");
    6cdc:	dsb	sy
			tx_noautoflush = 0;
    6ce0:	movs	r2, #0
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    6ce2:	ldrb.w	r3, [sl]
    6ce6:	ldr	r1, [pc, #296]	; (6e10 <usb_serial_write.part.1+0x17c>)
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			asm("dsb" ::: "memory");
			tx_noautoflush = 0;
    6ce8:	strb	r2, [r5, #0]
			if (!waiting) {
    6cea:	cbnz	r4, 6cee <usb_serial_write.part.1+0x5a>
				wait_begin_at = systick_millis_count;
    6cec:	ldr	r6, [r7, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    6cee:	cmp	r3, #0
    6cf0:	bne.n	6da8 <usb_serial_write.part.1+0x114>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    6cf2:	ldr	r3, [r7, #0]
    6cf4:	subs	r3, r3, r6
    6cf6:	cmp	r3, #120	; 0x78
    6cf8:	bhi.n	6dee <usb_serial_write.part.1+0x15a>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    6cfa:	ldrb.w	r3, [fp]
    6cfe:	cmp	r3, #0
    6d00:	beq.n	6da8 <usb_serial_write.part.1+0x114>
			yield();
    6d02:	bl	86b8 <yield>
			tx_noautoflush = 1;
    6d06:	movs	r4, #1
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    6d08:	ldrh.w	r3, [r8]
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
    6d0c:	strb	r4, [r5, #0]
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    6d0e:	cmp	r3, #0
    6d10:	beq.n	6cd0 <usb_serial_write.part.1+0x3c>
    6d12:	ldr	r2, [pc, #244]	; (6e08 <usb_serial_write.part.1+0x174>)
    6d14:	ldrb	r4, [r2, #0]
    6d16:	mov	r2, r3
    6d18:	rsb	r0, r3, #2048	; 0x800
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    6d1c:	lsls	r4, r4, #11
		if (size >= tx_available) {
    6d1e:	ldr	r6, [sp, #0]
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    6d20:	ldr	r1, [pc, #240]	; (6e14 <usb_serial_write.part.1+0x180>)
    6d22:	add	r0, r4
		if (size >= tx_available) {
    6d24:	cmp	r6, r2
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    6d26:	add	r0, r1
		if (size >= tx_available) {
    6d28:	bcc.n	6db0 <usb_serial_write.part.1+0x11c>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    6d2a:	add	r4, r1
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    6d2c:	ldr	r1, [sp, #8]
    6d2e:	bl	69a8 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    6d32:	movs	r3, #0
    6d34:	mov	r1, r4
    6d36:	mov.w	r2, #2048	; 0x800
    6d3a:	mov	r0, r9
    6d3c:	bl	7d9c <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    6d40:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    6d44:	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    6d48:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    6d4c:	ldr	r2, [pc, #200]	; (6e18 <usb_serial_write.part.1+0x184>)
    6d4e:	str	r3, [r2, #0]
		location += 32;
    6d50:	adds	r3, #32
	} while (location < end_addr);
    6d52:	cmp	r4, r3
    6d54:	bhi.n	6d4c <usb_serial_write.part.1+0xb8>
	asm("dsb");
    6d56:	dsb	sy
	asm("isb");
    6d5a:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    6d5e:	movs	r0, #4
    6d60:	mov	r1, r9
    6d62:	bl	7dcc <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    6d66:	ldr	r3, [pc, #160]	; (6e08 <usb_serial_write.part.1+0x174>)
    6d68:	ldr	r2, [pc, #156]	; (6e08 <usb_serial_write.part.1+0x174>)
    6d6a:	ldrb	r3, [r3, #0]
			size -= tx_available;
    6d6c:	ldr	r0, [sp, #0]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    6d6e:	adds	r3, #1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    6d70:	ldr	r1, [pc, #168]	; (6e1c <usb_serial_write.part.1+0x188>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    6d72:	uxtb	r3, r3
    6d74:	cmp	r3, #3
    6d76:	it	hi
    6d78:	movhi	r3, #0
    6d7a:	strb	r3, [r2, #0]
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    6d7c:	movs	r2, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
    6d7e:	ldrh.w	r3, [r8]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    6d82:	strh.w	r2, [r8]
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
    6d86:	subs	r0, r0, r3
    6d88:	str	r0, [sp, #0]
			sent += tx_available;
    6d8a:	ldr	r0, [sp, #4]
    6d8c:	add	r0, r3
    6d8e:	str	r0, [sp, #4]
			data += tx_available;
    6d90:	ldr	r0, [sp, #8]
    6d92:	add	r0, r3
    6d94:	str	r0, [sp, #8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    6d96:	str.w	r2, [r1, #132]	; 0x84
			tx_available -= size;
			sent += size;
			size = 0;
			timer_start_oneshot();
		}
		asm("dsb" ::: "memory");
    6d9a:	dsb	sy
		tx_noautoflush = 0;
    6d9e:	movs	r3, #0
    6da0:	strb	r3, [r5, #0]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    6da2:	ldr	r3, [sp, #0]
    6da4:	cmp	r3, #0
    6da6:	bne.n	6cb8 <usb_serial_write.part.1+0x24>
    6da8:	ldr	r0, [sp, #4]
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    6daa:	add	sp, #20
    6dac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    6db0:	ldr	r4, [sp, #0]
    6db2:	str	r3, [sp, #12]
			tx_available -= size;
			sent += size;
    6db4:	ldr	r3, [sp, #4]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    6db6:	mov	r2, r4
    6db8:	ldr	r1, [sp, #8]
			tx_available -= size;
			sent += size;
    6dba:	add	r3, r4
    6dbc:	str	r3, [sp, #4]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    6dbe:	bl	69a8 <memcpy>
			tx_available -= size;
    6dc2:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    6dc4:	mov.w	r1, #3221225472	; 0xc0000000
    6dc8:	ldr	r2, [pc, #80]	; (6e1c <usb_serial_write.part.1+0x188>)
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
			sent += size;
			size = 0;
    6dca:	movs	r0, #0
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    6dcc:	subs	r3, r3, r4
			sent += size;
			size = 0;
    6dce:	str	r0, [sp, #0]
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    6dd0:	strh.w	r3, [r8]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    6dd4:	str.w	r1, [r2, #132]	; 0x84
    6dd8:	b.n	6d9a <usb_serial_write.part.1+0x106>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    6dda:	mov.w	r3, #2048	; 0x800
    6dde:	ldr	r2, [pc, #40]	; (6e08 <usb_serial_write.part.1+0x174>)
				transmit_previous_timeout = 0;
    6de0:	strb.w	r0, [sl]
    6de4:	ldrb	r4, [r2, #0]
    6de6:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    6de8:	strh.w	r3, [r8]
    6dec:	b.n	6d1c <usb_serial_write.part.1+0x88>
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    6dee:	movs	r3, #1
				return sent;
    6df0:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    6df2:	strb	r3, [r1, #0]
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    6df4:	add	sp, #20
    6df6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    6dfa:	ldr	r0, [sp, #0]
    6dfc:	b.n	6daa <usb_serial_write.part.1+0x116>
    6dfe:	nop
    6e00:	.word	0x200224bd
    6e04:	.word	0x20022480
    6e08:	.word	0x200224bc
    6e0c:	.word	0x200037c0
    6e10:	.word	0x200224bb
    6e14:	.word	0x20003840
    6e18:	.word	0xe000ef70
    6e1c:	.word	0x402e0000
    6e20:	.word	0x200224aa
    6e24:	.word	0x200224bf

00006e28 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    6e28:	bx	lr
    6e2a:	nop

00006e2c <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    6e2c:	ldr	r3, [pc, #196]	; (6ef4 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    6e2e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    6e32:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    6e34:	ldr	r7, [pc, #192]	; (6ef8 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    6e36:	cmp	r3, #0
    6e38:	beq.n	6ee4 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    6e3a:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    6e3e:	ldr.w	r8, [pc, #236]	; 6f2c <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    6e42:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    6e44:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    6e48:	movs	r1, #0
    6e4a:	movs	r2, #128	; 0x80
    6e4c:	ldr	r0, [pc, #172]	; (6efc <usb_serial_configure+0xd0>)
	tx_head = 0;
    6e4e:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    6e50:	ldr	r6, [pc, #172]	; (6f00 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    6e52:	bl	980c <memset>
	tx_head = 0;
    6e56:	ldr	r4, [pc, #172]	; (6f04 <usb_serial_configure+0xd8>)
	tx_available = 0;
    6e58:	ldr	r3, [pc, #172]	; (6f08 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    6e5a:	mov	r1, r5
    6e5c:	mov.w	r2, #256	; 0x100
    6e60:	ldr	r0, [pc, #168]	; (6f0c <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    6e62:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    6e64:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    6e66:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    6e68:	bl	980c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    6e6c:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    6e6e:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    6e70:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    6e72:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    6e74:	str	r5, [r6, #8]
    6e76:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    6e78:	ldr	r1, [pc, #148]	; (6f10 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    6e7a:	ldr	r6, [pc, #152]	; (6f14 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    6e7c:	ldr	r0, [pc, #152]	; (6f18 <usb_serial_configure+0xec>)
	rx_available = 0;
    6e7e:	ldr.w	lr, [pc, #176]	; 6f30 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    6e82:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    6e84:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    6e86:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    6e88:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    6e8a:	str	r5, [r6, #0]
    6e8c:	str	r5, [r6, #4]
    6e8e:	str	r5, [r6, #8]
    6e90:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    6e92:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    6e96:	bl	7d34 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    6e9a:	ldrh.w	r1, [r8]
    6e9e:	mov	r2, r5
    6ea0:	ldr	r3, [pc, #120]	; (6f1c <usb_serial_configure+0xf0>)
    6ea2:	movs	r0, #3
    6ea4:	bl	7cd0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    6ea8:	mov	r3, r5
    6eaa:	ldrh	r1, [r7, #0]
    6eac:	movs	r2, #1
    6eae:	movs	r0, #4
    6eb0:	bl	7d34 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    6eb4:	mov	r0, r4
    6eb6:	adds	r4, #1
    6eb8:	bl	6adc <rx_queue_transfer>
    6ebc:	cmp	r4, #8
    6ebe:	bne.n	6eb4 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    6ec0:	ldr	r3, [pc, #92]	; (6f20 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    6ec2:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    6ec4:	ldr	r0, [pc, #92]	; (6f24 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    6ec6:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    6ec8:	ldr	r4, [pc, #92]	; (6f28 <usb_serial_configure+0xfc>)
    6eca:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    6ecc:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    6ed0:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    6ed4:	ldr.w	r2, [r3, #328]	; 0x148
    6ed8:	orr.w	r2, r2, #16777216	; 0x1000000
    6edc:	str.w	r2, [r3, #328]	; 0x148
    6ee0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    6ee4:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    6ee6:	ldr.w	r8, [pc, #68]	; 6f2c <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    6eea:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    6eec:	strh.w	r3, [r8]
    6ef0:	b.n	6e48 <usb_serial_configure+0x1c>
    6ef2:	nop
    6ef4:	.word	0x200224c0
    6ef8:	.word	0x200224ac
    6efc:	.word	0x200037c0
    6f00:	.word	0x20021f84
    6f04:	.word	0x200224bc
    6f08:	.word	0x200224aa
    6f0c:	.word	0x200036c0
    6f10:	.word	0x200224b8
    6f14:	.word	0x20021f94
    6f18:	.word	0x200224b9
    6f1c:	.word	0x00006b49
    6f20:	.word	0x402e0000
    6f24:	.word	0x20022494
    6f28:	.word	0x00006bfd
    6f2c:	.word	0x200224a6
    6f30:	.word	0x20021f80

00006f34 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    6f34:	ldr	r3, [pc, #196]	; (6ffc <usb_serial_read+0xc8>)
    6f36:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    6f3a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    6f3e:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    6f40:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    6f42:	ldr	r3, [pc, #188]	; (7000 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    6f44:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    6f46:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    6f48:	cmp	r1, #0
    6f4a:	beq.n	6ff4 <usb_serial_read+0xc0>
    6f4c:	ldr	r3, [pc, #180]	; (7004 <usb_serial_read+0xd0>)
    6f4e:	uxtb	r4, r4
    6f50:	ldrb	r3, [r3, #0]
    6f52:	cmp	r4, r3
    6f54:	beq.n	6ff8 <usb_serial_read+0xc4>
    6f56:	mov	sl, r0
    6f58:	movs	r7, #0
    6f5a:	ldr.w	fp, [pc, #192]	; 701c <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    6f5e:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    6f60:	ldr	r3, [pc, #164]	; (7008 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    6f62:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    6f66:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    6f68:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    6f6a:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    6f6c:	ldr	r3, [pc, #156]	; (700c <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    6f6e:	it	cs
    6f70:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    6f72:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    6f74:	ldr	r3, [pc, #144]	; (7008 <usb_serial_read+0xd4>)
    6f76:	ldrh.w	lr, [r3, r5, lsl #1]
    6f7a:	ldr	r3, [pc, #148]	; (7010 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    6f7c:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    6f80:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    6f84:	ldr	r3, [pc, #140]	; (7014 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    6f86:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    6f8a:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    6f8c:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    6f8e:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    6f90:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    6f92:	bcs.n	6fc8 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    6f94:	add.w	r1, lr, r5, lsl #9
    6f98:	mov	r2, r8
    6f9a:	add	r1, r3
    6f9c:	bl	69a8 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    6fa0:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    6fa2:	ldr.w	r1, [fp]
    6fa6:	mov	r0, r9
			rx_index[i] += len;
    6fa8:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    6fac:	rsb	r1, r8, r1
			rx_index[i] += len;
    6fb0:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    6fb2:	str.w	r1, [fp]
			rx_index[i] += len;
    6fb6:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    6fba:	ldr	r3, [pc, #92]	; (7018 <usb_serial_read+0xe4>)
    6fbc:	mov.w	r2, #131072	; 0x20000
    6fc0:	str	r2, [r3, #0]
	return count;
}
    6fc2:	add	sp, #12
    6fc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    6fc8:	bl	69a8 <memcpy>
			p += avail;
			rx_available -= avail;
    6fcc:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    6fd0:	uxtb	r3, r4
			rx_queue_transfer(i);
    6fd2:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    6fd4:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    6fd6:	add	sl, r6
			rx_available -= avail;
    6fd8:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    6fdc:	ldr	r2, [pc, #32]	; (7000 <usb_serial_read+0xcc>)
    6fde:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    6fe0:	bl	6adc <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    6fe4:	cmp	r9, r7
    6fe6:	bls.n	6ff0 <usb_serial_read+0xbc>
    6fe8:	ldr	r3, [pc, #24]	; (7004 <usb_serial_read+0xd0>)
    6fea:	ldrb	r3, [r3, #0]
    6fec:	cmp	r4, r3
    6fee:	bne.n	6f5e <usb_serial_read+0x2a>
    6ff0:	mov	r0, r7
    6ff2:	b.n	6fba <usb_serial_read+0x86>
    6ff4:	mov	r0, r1
    6ff6:	b.n	6fba <usb_serial_read+0x86>
    6ff8:	movs	r0, #0
    6ffa:	b.n	6fba <usb_serial_read+0x86>
    6ffc:	.word	0xe000e18c
    7000:	.word	0x200224b9
    7004:	.word	0x200224b8
    7008:	.word	0x20021f94
    700c:	.word	0x20021fa4
    7010:	.word	0x20021f84
    7014:	.word	0x200026c0
    7018:	.word	0xe000e10c
    701c:	.word	0x20021f80

00007020 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    7020:	ldr	r3, [pc, #44]	; (7050 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    7022:	ldr	r2, [pc, #48]	; (7054 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    7024:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    7026:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    7028:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    702a:	cmp	r3, r2
    702c:	beq.n	704a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    702e:	adds	r3, #1
	uint32_t i = rx_list[tail];
    7030:	ldr	r0, [pc, #36]	; (7058 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    7032:	ldr	r2, [pc, #40]	; (705c <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    7034:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    7036:	ldr	r1, [pc, #40]	; (7060 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    7038:	it	cs
    703a:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    703c:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    703e:	ldrh.w	r1, [r1, r3, lsl #1]
    7042:	add.w	r3, r2, r3, lsl #9
    7046:	ldrb	r0, [r3, r1]
    7048:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    704a:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    704e:	bx	lr
    7050:	.word	0x200224b9
    7054:	.word	0x200224b8
    7058:	.word	0x20021fa4
    705c:	.word	0x200026c0
    7060:	.word	0x20021f94

00007064 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	uint32_t n = rx_available;
    7064:	ldr	r3, [pc, #12]	; (7074 <usb_serial_available+0x10>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
    7066:	push	{r4, lr}
	uint32_t n = rx_available;
    7068:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    706a:	cbnz	r4, 7070 <usb_serial_available+0xc>
    706c:	bl	86b8 <yield>
	return n;
}
    7070:	mov	r0, r4
    7072:	pop	{r4, pc}
    7074:	.word	0x20021f80

00007078 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    7078:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    707c:	ldr	r6, [pc, #84]	; (70d4 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    707e:	ldr	r5, [pc, #88]	; (70d8 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    7080:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    7082:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    7084:	uxtb	r4, r4
	while (tail != rx_head) {
    7086:	cmp	r4, r3
    7088:	beq.n	70ce <usb_serial_flush_input+0x56>
    708a:	ldr.w	r9, [pc, #84]	; 70e0 <usb_serial_flush_input+0x68>
    708e:	ldr.w	fp, [pc, #84]	; 70e4 <usb_serial_flush_input+0x6c>
    7092:	ldr.w	r8, [pc, #84]	; 70e8 <usb_serial_flush_input+0x70>
    7096:	ldr	r7, [pc, #68]	; (70dc <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    7098:	adds	r4, #1
    709a:	cmp	r4, #8
    709c:	uxtb.w	sl, r4
    70a0:	bls.n	70a6 <usb_serial_flush_input+0x2e>
    70a2:	movs	r4, #0
    70a4:	mov	sl, r4
		uint32_t i = rx_list[tail];
    70a6:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    70aa:	ldr.w	r2, [fp]
    70ae:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    70b2:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    70b4:	ldrh.w	r1, [r7, r1, lsl #1]
    70b8:	subs	r3, r3, r1
    70ba:	subs	r3, r2, r3
    70bc:	str.w	r3, [fp]
		rx_queue_transfer(i);
    70c0:	bl	6adc <rx_queue_transfer>
		rx_tail = tail;
    70c4:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    70c8:	ldrb	r3, [r5, #0]
    70ca:	cmp	r4, r3
    70cc:	bne.n	7098 <usb_serial_flush_input+0x20>
    70ce:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    70d2:	nop
    70d4:	.word	0x200224b9
    70d8:	.word	0x200224b8
    70dc:	.word	0x20021f94
    70e0:	.word	0x20021fa4
    70e4:	.word	0x20021f80
    70e8:	.word	0x20021f84

000070ec <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    70ec:	push	{lr}
    70ee:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    70f0:	movs	r1, #1
    70f2:	add.w	r0, sp, #7
    70f6:	bl	6f34 <usb_serial_read>
    70fa:	cbz	r0, 7106 <usb_serial_getchar+0x1a>
    70fc:	ldrb.w	r0, [sp, #7]
	return -1;
}
    7100:	add	sp, #12
    7102:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    7106:	mov.w	r0, #4294967295
    710a:	b.n	7100 <usb_serial_getchar+0x14>

0000710c <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    710c:	ldr	r3, [pc, #36]	; (7134 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    710e:	push	{lr}
    7110:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    7112:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    7114:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    7118:	cbnz	r3, 7124 <usb_serial_putchar+0x18>
    711a:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    711e:	add	sp, #12
    7120:	ldr.w	pc, [sp], #4
    7124:	movs	r1, #1
    7126:	add.w	r0, sp, #7
    712a:	bl	6c94 <usb_serial_write.part.1>
    712e:	add	sp, #12
    7130:	ldr.w	pc, [sp], #4
    7134:	.word	0x200224bf

00007138 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    7138:	ldr	r3, [pc, #16]	; (714c <usb_serial_write+0x14>)
    713a:	ldrb	r3, [r3, #0]
    713c:	and.w	r2, r3, #255	; 0xff
    7140:	cbz	r3, 7146 <usb_serial_write+0xe>
    7142:	b.w	6c94 <usb_serial_write.part.1>
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    7146:	mov	r0, r2
    7148:	bx	lr
    714a:	nop
    714c:	.word	0x200224bf

00007150 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    7150:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    7154:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    7156:	ldr.w	r8, [pc, #68]	; 719c <usb_serial_write_buffer_free+0x4c>
    715a:	movs	r3, #1
    715c:	ldr	r5, [pc, #52]	; (7194 <usb_serial_write_buffer_free+0x44>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    715e:	mov	r7, r4
    7160:	ldr	r6, [pc, #52]	; (7198 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    7162:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    7166:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    7168:	mov	r0, r5
    716a:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    716c:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    716e:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    7172:	beq.n	7180 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    7174:	bl	7e18 <usb_transfer_status>
    7178:	lsls	r3, r0, #24
    717a:	it	pl
    717c:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    7180:	cmp	r4, #4
    7182:	bne.n	7166 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	asm("dsb" ::: "memory");
    7184:	dsb	sy
	tx_noautoflush = 0;
    7188:	movs	r3, #0
	return sum;
}
    718a:	mov	r0, r7
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	asm("dsb" ::: "memory");
	tx_noautoflush = 0;
    718c:	strb.w	r3, [r8]
	return sum;
}
    7190:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7194:	.word	0x200037c0
    7198:	.word	0x200224bc
    719c:	.word	0x200224bd

000071a0 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    71a0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    71a4:	ldr	r3, [pc, #128]	; (7228 <usb_serial_flush_output+0x88>)
    71a6:	ldrb	r3, [r3, #0]
    71a8:	cbz	r3, 71b0 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    71aa:	ldr	r5, [pc, #128]	; (722c <usb_serial_flush_output+0x8c>)
    71ac:	ldrh	r2, [r5, #0]
    71ae:	cbnz	r2, 71b4 <usb_serial_flush_output+0x14>
    71b0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    71b4:	ldr.w	r8, [pc, #136]	; 7240 <usb_serial_flush_output+0xa0>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    71b8:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    71bc:	ldr	r6, [pc, #112]	; (7230 <usb_serial_flush_output+0x90>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    71be:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    71c2:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    71c6:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    71c8:	ldr	r4, [pc, #104]	; (7234 <usb_serial_flush_output+0x94>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    71ca:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    71cc:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    71d0:	ldr	r7, [pc, #100]	; (7238 <usb_serial_flush_output+0x98>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    71d2:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    71d6:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    71d8:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    71dc:	mov	r1, r4
    71de:	bl	7d9c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    71e2:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    71e6:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    71ea:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    71ee:	ldr	r3, [pc, #76]	; (723c <usb_serial_flush_output+0x9c>)
    71f0:	str	r1, [r3, #0]
		location += 32;
    71f2:	adds	r1, #32
	} while (location < end_addr);
    71f4:	cmp	r2, r1
    71f6:	bhi.n	71f0 <usb_serial_flush_output+0x50>
	asm("dsb");
    71f8:	dsb	sy
	asm("isb");
    71fc:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    7200:	movs	r0, #4
    7202:	mov	r1, r6
    7204:	bl	7dcc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    7208:	ldrb.w	r3, [r8]
    720c:	ldr	r2, [pc, #48]	; (7240 <usb_serial_flush_output+0xa0>)
    720e:	adds	r3, #1
    7210:	uxtb	r3, r3
    7212:	cmp	r3, #3
    7214:	it	hi
    7216:	movhi	r3, #0
    7218:	strb	r3, [r2, #0]
	tx_available = 0;
    721a:	movs	r3, #0
    721c:	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    721e:	dsb	sy
	tx_noautoflush = 0;
    7222:	strb	r3, [r7, #0]
    7224:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7228:	.word	0x200224bf
    722c:	.word	0x200224aa
    7230:	.word	0x200037c0
    7234:	.word	0x20003840
    7238:	.word	0x200224bd
    723c:	.word	0xe000ef70
    7240:	.word	0x200224bc

00007244 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    7244:	ldr	r2, [pc, #600]	; (74a0 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7246:	ldr	r3, [pc, #604]	; (74a4 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    7248:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    724a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    724e:	ldr	r4, [pc, #600]	; (74a8 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7250:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    7254:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    7256:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    7258:	bls.n	7294 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    725a:	ldr	r3, [pc, #592]	; (74ac <set_arm_clock+0x268>)
    725c:	cmp	r0, r3
    725e:	bls.w	748c <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    7262:	ldr	r3, [pc, #588]	; (74b0 <set_arm_clock+0x26c>)
    7264:	movw	r5, #1575	; 0x627
    7268:	ldr	r7, [pc, #584]	; (74b4 <set_arm_clock+0x270>)
    726a:	add	r3, r0
    726c:	ldr	r4, [pc, #584]	; (74b8 <set_arm_clock+0x274>)
    726e:	lsrs	r2, r3, #8
    7270:	umull	r3, r2, r7, r2
    7274:	lsrs	r3, r2, #7
    7276:	add.w	r3, r3, r3, lsl #2
    727a:	add.w	r2, r3, r3, lsl #2
    727e:	addw	r3, r2, #1250	; 0x4e2
    7282:	cmp	r3, r5
    7284:	it	cs
    7286:	movcs	r3, r5
    7288:	sub.w	r3, r3, #800	; 0x320
    728c:	umull	r3, r5, r4, r3
    7290:	lsrs	r5, r5, #3
    7292:	b.n	729e <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    7294:	ldr	r5, [pc, #548]	; (74bc <set_arm_clock+0x278>)
    7296:	cmp	r0, r5
    7298:	ite	ls
    729a:	movls	r5, #6
    729c:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    729e:	ldr	r2, [pc, #516]	; (74a4 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    72a0:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    72a4:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    72a8:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    72aa:	orr.w	r3, r3, #192	; 0xc0
    72ae:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    72b2:	bcs.n	72ca <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    72b4:	ldr	r3, [pc, #496]	; (74a8 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    72b6:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    72ba:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    72bc:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    72be:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    72c0:	ldr	r3, [r2, #0]
    72c2:	cmp	r3, #0
    72c4:	bge.n	72c0 <set_arm_clock+0x7c>
    72c6:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    72ca:	ands.w	r3, lr, #33554432	; 0x2000000
    72ce:	bne.n	7334 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    72d0:	ldr	r4, [pc, #492]	; (74c0 <set_arm_clock+0x27c>)
    72d2:	ldr	r2, [pc, #496]	; (74c4 <set_arm_clock+0x280>)
    72d4:	ldr.w	ip, [r4, #16]
    72d8:	mov	r4, r2
    72da:	and.w	r2, ip, r2
    72de:	cmp	r2, r4
    72e0:	itet	eq
    72e2:	moveq.w	r3, #402653184	; 0x18000000
    72e6:	movne.w	r2, #4096	; 0x1000
    72ea:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    72ec:	eor.w	r4, lr, r3
    72f0:	tst.w	r4, #939524096	; 0x38000000
    72f4:	beq.n	7308 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    72f6:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    72fa:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    72fe:	ldr	r4, [pc, #420]	; (74a4 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    7300:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    7304:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7308:	eor.w	r3, r1, r2
    730c:	tst.w	r3, #12288	; 0x3000
    7310:	beq.n	7324 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    7312:	ldr	r3, [pc, #400]	; (74a4 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    7314:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    7318:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    731a:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    731c:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    731e:	ldr	r3, [r2, #72]	; 0x48
    7320:	lsls	r4, r3, #28
    7322:	bmi.n	731e <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    7324:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    7328:	ldr	r2, [pc, #376]	; (74a4 <set_arm_clock+0x260>)
    732a:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    732e:	ldr	r3, [r2, #72]	; 0x48
    7330:	lsls	r1, r3, #26
    7332:	bmi.n	732e <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    7334:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7336:	ldr	r4, [pc, #400]	; (74c8 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    7338:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    733a:	mul.w	r3, r1, r2
    733e:	mul.w	r3, r0, r3
    7342:	cmp	r3, r4
    7344:	bhi.n	735a <set_arm_clock+0x116>
		if (div_arm < 8) {
    7346:	cmp	r2, #7
    7348:	bhi.w	7476 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    734c:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    734e:	mul.w	r3, r1, r2
    7352:	mul.w	r3, r0, r3
    7356:	cmp	r3, r4
    7358:	bls.n	7346 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    735a:	ldr	r0, [pc, #368]	; (74cc <set_arm_clock+0x288>)
    735c:	ldr	r4, [pc, #368]	; (74d0 <set_arm_clock+0x28c>)
    735e:	add	r0, r3
    7360:	umull	r0, r3, r4, r0
    7364:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    7366:	cmp	r3, #108	; 0x6c
    7368:	bhi.w	7482 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    736c:	cmp	r3, #53	; 0x35
    736e:	bhi.w	7490 <set_arm_clock+0x24c>
    7372:	ldr.w	r8, [pc, #392]	; 74fc <set_arm_clock+0x2b8>
    7376:	movs	r3, #54	; 0x36
    7378:	ldr	r0, [pc, #344]	; (74d4 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    737a:	ldr.w	ip, [pc, #324]	; 74c0 <set_arm_clock+0x27c>
    737e:	ldr	r4, [pc, #344]	; (74d8 <set_arm_clock+0x294>)
    7380:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    7384:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7388:	and.w	r4, r9, r4
    738c:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    738e:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7392:	beq.n	73ac <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    7394:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    7398:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    739c:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    739e:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    73a2:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    73a6:	ldr	r3, [r4, #0]
    73a8:	cmp	r3, #0
    73aa:	bge.n	73a6 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    73ac:	ldr.w	ip, [pc, #244]	; 74a4 <set_arm_clock+0x260>
    73b0:	subs	r2, #1
    73b2:	ldr.w	r3, [ip, #16]
    73b6:	and.w	r3, r3, #7
    73ba:	cmp	r3, r2
    73bc:	beq.n	73ce <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    73be:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    73c2:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    73c4:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    73c8:	ldr	r3, [r4, #72]	; 0x48
    73ca:	lsls	r3, r3, #15
    73cc:	bmi.n	73c8 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    73ce:	subs	r1, #1
    73d0:	lsls	r1, r1, #10
    73d2:	eor.w	r3, lr, r1
    73d6:	tst.w	r3, #7168	; 0x1c00
    73da:	beq.n	73f6 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    73dc:	ldr	r3, [pc, #196]	; (74a4 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    73de:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    73e2:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    73e6:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    73e8:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    73ec:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    73f0:	ldr	r3, [r2, #72]	; 0x48
    73f2:	lsls	r1, r3, #30
    73f4:	bmi.n	73f0 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    73f6:	ldr	r3, [pc, #228]	; (74dc <set_arm_clock+0x298>)
    73f8:	ldr	r1, [pc, #228]	; (74e0 <set_arm_clock+0x29c>)
    73fa:	add	r3, r0
    73fc:	lsrs	r3, r3, #7
    73fe:	umull	r3, r1, r1, r3
    7402:	lsrs	r1, r1, #12
    7404:	cmp	r1, #4
    7406:	it	cs
    7408:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    740a:	subs	r3, r1, #1
    740c:	lsls	r3, r3, #8
    740e:	eor.w	r2, lr, r3
    7412:	tst.w	r2, #768	; 0x300
    7416:	beq.n	7428 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    7418:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    741c:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    7420:	ldr	r2, [pc, #128]	; (74a4 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    7422:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    7426:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    7428:	ldr	r3, [pc, #120]	; (74a4 <set_arm_clock+0x260>)
    742a:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    742c:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    742e:	bic.w	r4, r4, #33554432	; 0x2000000
    7432:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7434:	ldr	r3, [r2, #72]	; 0x48
    7436:	lsls	r3, r3, #26
    7438:	bmi.n	7434 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    743a:	ldr	r3, [pc, #168]	; (74e4 <set_arm_clock+0x2a0>)
    743c:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    7440:	ldr	r4, [pc, #164]	; (74e8 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7442:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7444:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    7448:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    744a:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    744e:	ldr	r4, [pc, #156]	; (74ec <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7450:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    7454:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7458:	ldr	r2, [pc, #148]	; (74f0 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    745a:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    745c:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    745e:	bcs.n	7472 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    7460:	ldr	r3, [pc, #68]	; (74a8 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    7462:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7466:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7468:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    746a:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    746c:	ldr	r3, [r2, #0]
    746e:	cmp	r3, #0
    7470:	bge.n	746c <set_arm_clock+0x228>
	}

	return frequency;
}
    7472:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    7476:	cmp	r1, #4
    7478:	bhi.w	735a <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    747c:	adds	r1, #1
				div_arm = 1;
    747e:	movs	r2, #1
    7480:	b.n	733a <set_arm_clock+0xf6>
    7482:	ldr.w	r8, [pc, #124]	; 7500 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    7486:	movs	r3, #108	; 0x6c
    7488:	ldr	r0, [pc, #104]	; (74f4 <set_arm_clock+0x2b0>)
    748a:	b.n	737a <set_arm_clock+0x136>
    748c:	movs	r5, #18
    748e:	b.n	729e <set_arm_clock+0x5a>
    7490:	ldr	r0, [pc, #100]	; (74f8 <set_arm_clock+0x2b4>)
    7492:	ldr.w	r8, [pc, #112]	; 7504 <set_arm_clock+0x2c0>
    7496:	mul.w	r0, r0, r3
    749a:	orr.w	r8, r3, r8
    749e:	b.n	737a <set_arm_clock+0x136>
    74a0:	.word	0x1f78a400
    74a4:	.word	0x400fc000
    74a8:	.word	0x40080000
    74ac:	.word	0x23c34600
    74b0:	.word	0xdc3cba00
    74b4:	.word	0x004cb223
    74b8:	.word	0x51eb851f
    74bc:	.word	0x016e3600
    74c0:	.word	0x400d8000
    74c4:	.word	0x80003040
    74c8:	.word	0x269fb1ff
    74cc:	.word	0x005b8d80
    74d0:	.word	0x165e9f81
    74d4:	.word	0x269fb200
    74d8:	.word	0x8001307f
    74dc:	.word	0x08f0d17f
    74e0:	.word	0x00e5109f
    74e4:	.word	0x431bde83
    74e8:	.word	0x20001bc4
    74ec:	.word	0x20001bc0
    74f0:	.word	0x20021fc0
    74f4:	.word	0x4d3f6400
    74f8:	.word	0x00b71b00
    74fc:	.word	0x80002036
    7500:	.word	0x8000206c
    7504:	.word	0x80002000

00007508 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    7508:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    750a:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    750c:	cbz	r3, 7516 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    750e:	ldr	r3, [r2, #4]
    7510:	orr.w	r3, r3, #32768	; 0x8000
    7514:	str	r3, [r2, #4]
	}
	__disable_irq();
    7516:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    7518:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    751a:	cbz	r4, 7574 <schedule_transfer+0x6c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    751c:	ldr	r3, [pc, #112]	; (7590 <schedule_transfer+0x88>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    751e:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    7520:	ldr.w	r4, [r3, #432]	; 0x1b0
    7524:	tst	r4, r1
    7526:	bne.n	7554 <schedule_transfer+0x4c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    7528:	ldr	r6, [pc, #104]	; (7594 <schedule_transfer+0x8c>)
    752a:	ldr	r7, [r6, #0]
    752c:	b.n	7538 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    752e:	ldr	r4, [r6, #0]
    7530:	subs	r4, r4, r7
    7532:	cmp.w	r4, #2400	; 0x960
    7536:	bcs.n	7550 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    7538:	ldr.w	r4, [r3, #320]	; 0x140
    753c:	orr.w	r4, r4, #16384	; 0x4000
    7540:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    7544:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    7548:	ldr.w	r4, [r3, #320]	; 0x140
    754c:	lsls	r4, r4, #17
    754e:	bpl.n	752e <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    7550:	ands	r5, r1
    7552:	beq.n	755c <schedule_transfer+0x54>
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    7554:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    7556:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    7558:	pop	{r4, r5, r6, r7}
    755a:	bx	lr
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    755c:	ldr	r4, [pc, #48]	; (7590 <schedule_transfer+0x88>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
    755e:	str	r2, [r0, #8]
		endpoint->status = 0;
    7560:	str	r5, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
    7562:	ldr.w	r3, [r4, #432]	; 0x1b0
    7566:	orrs	r1, r3
    7568:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    756c:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    756e:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    7570:	pop	{r4, r5, r6, r7}
    7572:	bx	lr
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
    7574:	ldr	r5, [pc, #24]	; (7590 <schedule_transfer+0x88>)
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    7576:	str	r2, [r0, #8]
	endpoint->status = 0;
    7578:	str	r4, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    757a:	ldr.w	r3, [r5, #432]	; 0x1b0
    757e:	orrs	r1, r3
    7580:	str.w	r1, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    7584:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    7586:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    7588:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    758a:	pop	{r4, r5, r6, r7}
    758c:	bx	lr
    758e:	nop
    7590:	.word	0x402e0000
    7594:	.word	0xe0001004

00007598 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    7598:	push	{r4, r5, r6, lr}
    759a:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    759c:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    759e:	cbz	r0, 75c6 <run_callbacks+0x2e>
    75a0:	mov	r2, r0
    75a2:	movs	r4, #0
    75a4:	b.n	75ae <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    75a6:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    75a8:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    75aa:	cmp	r2, #1
    75ac:	beq.n	75c8 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    75ae:	ldr	r3, [r2, #4]
    75b0:	ands.w	r3, r3, #128	; 0x80
    75b4:	beq.n	75a6 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    75b6:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    75b8:	cbz	r4, 75c6 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    75ba:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    75bc:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    75be:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    75c0:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    75c2:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    75c4:	bne.n	75ba <run_callbacks+0x22>
    75c6:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    75c8:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    75ca:	str	r3, [r6, #52]	; 0x34
			break;
    75cc:	b.n	75b8 <run_callbacks+0x20>
    75ce:	nop

000075d0 <endpoint0_transmit.constprop.1>:
	}
	printf("endpoint 0 stall\n");
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    75d0:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    75d2:	cbnz	r1, 760e <endpoint0_transmit.constprop.1+0x3e>
    75d4:	ldr	r4, [pc, #132]	; (765c <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    75d6:	ldr	r1, [pc, #136]	; (7660 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    75d8:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    75da:	ldr	r3, [pc, #136]	; (7664 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    75dc:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    75de:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    75e2:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    75e4:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    75e6:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    75e8:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    75ea:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    75ec:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    75ee:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    75f2:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    75f6:	ldr	r5, [pc, #112]	; (7668 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    75f8:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    75fc:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    75fe:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    7602:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    7604:	ldr.w	r3, [r2, #432]	; 0x1b0
    7608:	cmp	r3, #0
    760a:	bne.n	7604 <endpoint0_transmit.constprop.1+0x34>
}
    760c:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    760e:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    7610:	ldr	r3, [pc, #88]	; (766c <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    7612:	ldr	r5, [pc, #80]	; (7664 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    7614:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    7616:	ldr	r4, [pc, #68]	; (765c <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    7618:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    761c:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    761e:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    7620:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    7622:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    7626:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    7628:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    762c:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    762e:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    7632:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    7636:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    763a:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    763c:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    763e:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    7642:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    7646:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    764a:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    764c:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    764e:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    7652:	ldr.w	r3, [r2, #432]	; 0x1b0
    7656:	cmp	r3, #0
    7658:	bne.n	7652 <endpoint0_transmit.constprop.1+0x82>
    765a:	b.n	75d6 <endpoint0_transmit.constprop.1+0x6>
    765c:	.word	0x20000000
    7660:	.word	0x20022500
    7664:	.word	0x402e0000
    7668:	.word	0x20021e84
    766c:	.word	0x200224e0

00007670 <usb_isr>:
	__builtin_unreachable();
}


void usb_isr(void)
{
    7670:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    7674:	ldr	r4, [pc, #728]	; (7950 <usb_isr+0x2e0>)
	__builtin_unreachable();
}


void usb_isr(void)
{
    7676:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    7678:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    767c:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    7680:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    7684:	beq.n	7750 <usb_isr+0xe0>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    7686:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    768a:	cmp	r3, #0
    768c:	beq.n	7746 <usb_isr+0xd6>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    768e:	mov.w	fp, #65537	; 0x10001
    7692:	ldr	r7, [pc, #704]	; (7954 <usb_isr+0x2e4>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    7694:	mov	r6, r4
    7696:	ldr.w	r9, [pc, #704]	; 7958 <usb_isr+0x2e8>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    769a:	mov	sl, fp
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    769c:	str.w	r8, [sp]
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    76a0:	str.w	r3, [r4, #428]	; 0x1ac
    76a4:	ldr	r2, [r7, #40]	; 0x28
    76a6:	ldr	r1, [r7, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    76a8:	ldr.w	r3, [r4, #320]	; 0x140
    76ac:	orr.w	r3, r3, #8192	; 0x2000
    76b0:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    76b4:	ldr.w	r3, [r4, #320]	; 0x140
    76b8:	lsls	r0, r3, #18
    76ba:	bpl.n	76a8 <usb_isr+0x38>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    76bc:	ldr.w	r3, [r6, #320]	; 0x140
    76c0:	bic.w	r3, r3, #8192	; 0x2000
    76c4:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    76c8:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    76cc:	ldr.w	r5, [r4, #436]	; 0x1b4
    76d0:	ands.w	r5, r5, #65537	; 0x10001
    76d4:	bne.n	76cc <usb_isr+0x5c>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    76d6:	uxth	r0, r2
    76d8:	movw	ip, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    76dc:	str.w	r5, [r9]
{
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
    76e0:	mov	lr, r1
	switch (setup.wRequestAndType) {
    76e2:	cmp	r0, ip
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    76e4:	ldr	r3, [pc, #624]	; (7958 <usb_isr+0x2e8>)
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    76e6:	bhi.w	7848 <usb_isr+0x1d8>
    76ea:	cmp.w	r0, #1664	; 0x680
    76ee:	bcs.w	79e6 <usb_isr+0x376>
    76f2:	cmp.w	r0, #258	; 0x102
    76f6:	beq.w	7a78 <usb_isr+0x408>
    76fa:	bhi.w	7886 <usb_isr+0x216>
    76fe:	cmp	r0, #128	; 0x80
    7700:	beq.w	7aca <usb_isr+0x45a>
    7704:	cmp	r0, #130	; 0x82
    7706:	bne.w	7872 <usb_isr+0x202>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    770a:	uxth	r1, r1
    770c:	and.w	r3, r1, #127	; 0x7f
		if (endpoint > 7) break;
    7710:	cmp	r3, #7
    7712:	bhi.w	7872 <usb_isr+0x202>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    7716:	lsls	r3, r3, #2
    7718:	ldr	r2, [pc, #576]	; (795c <usb_isr+0x2ec>)
		reply_buffer[0] = 0;
    771a:	ldr	r0, [pc, #580]	; (7960 <usb_isr+0x2f0>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    771c:	add	r2, r3
    771e:	ldr	r3, [r2, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    7720:	lsls	r2, r1, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    7722:	strb	r5, [r0, #0]
		reply_buffer[1] = 0;
    7724:	strb	r5, [r0, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    7726:	bpl.w	7bc6 <usb_isr+0x556>
    772a:	lsls	r3, r3, #15
    772c:	bpl.n	7732 <usb_isr+0xc2>
			reply_buffer[0] = 1;
    772e:	movs	r3, #1
    7730:	strb	r3, [r0, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    7732:	movs	r1, #2
    7734:	ldr	r0, [pc, #552]	; (7960 <usb_isr+0x2f0>)
    7736:	bl	75d0 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    773a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    773e:	cmp	r3, #0
    7740:	bne.n	76a0 <usb_isr+0x30>
    7742:	ldr.w	r8, [sp]
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    7746:	ldr	r2, [pc, #520]	; (7950 <usb_isr+0x2e0>)
    7748:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    774c:	cmp	r3, #0
    774e:	bne.n	77e4 <usb_isr+0x174>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    7750:	tst.w	r8, #64	; 0x40
    7754:	beq.n	7788 <usb_isr+0x118>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    7756:	ldr	r3, [pc, #504]	; (7950 <usb_isr+0x2e0>)
    7758:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    775c:	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    775e:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    7762:	ldr.w	r1, [r3, #444]	; 0x1bc
    7766:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    776a:	ldr.w	r4, [r2, #432]	; 0x1b0
    776e:	ldr	r3, [pc, #480]	; (7950 <usb_isr+0x2e0>)
    7770:	cmp	r4, #0
    7772:	bne.n	776a <usb_isr+0xfa>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    7774:	mov.w	r2, #4294967295
    7778:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    777c:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    7780:	bl	6e28 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    7784:	ldr	r3, [pc, #476]	; (7964 <usb_isr+0x2f4>)
    7786:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    7788:	tst.w	r8, #16777216	; 0x1000000
    778c:	beq.n	7796 <usb_isr+0x126>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    778e:	ldr	r3, [pc, #472]	; (7968 <usb_isr+0x2f8>)
    7790:	ldr	r3, [r3, #0]
    7792:	cbz	r3, 7796 <usb_isr+0x126>
    7794:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    7796:	tst.w	r8, #33554432	; 0x2000000
    779a:	beq.n	77a4 <usb_isr+0x134>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    779c:	ldr	r3, [pc, #460]	; (796c <usb_isr+0x2fc>)
    779e:	ldr	r3, [r3, #0]
    77a0:	cbz	r3, 77a4 <usb_isr+0x134>
    77a2:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    77a4:	tst.w	r8, #4
    77a8:	beq.n	77bc <usb_isr+0x14c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    77aa:	ldr	r3, [pc, #420]	; (7950 <usb_isr+0x2e0>)
    77ac:	ldr.w	r3, [r3, #388]	; 0x184
    77b0:	ands.w	r3, r3, #512	; 0x200
    77b4:	beq.n	7842 <usb_isr+0x1d2>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    77b6:	ldr	r3, [pc, #440]	; (7970 <usb_isr+0x300>)
    77b8:	movs	r2, #1
    77ba:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    77bc:	ldr	r3, [pc, #400]	; (7950 <usb_isr+0x2e0>)
    77be:	ldr.w	r2, [r3, #328]	; 0x148
    77c2:	lsls	r2, r2, #24
    77c4:	bpl.n	77de <usb_isr+0x16e>
    77c6:	tst.w	r8, #128	; 0x80
    77ca:	beq.n	77de <usb_isr+0x16e>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    77cc:	ldr	r1, [pc, #420]	; (7974 <usb_isr+0x304>)
    77ce:	ldrb	r2, [r1, #0]
    77d0:	cbz	r2, 77de <usb_isr+0x16e>
			if (--usb_reboot_timer == 0) {
    77d2:	subs	r2, #1
    77d4:	uxtb	r2, r2
    77d6:	strb	r2, [r1, #0]
    77d8:	cmp	r2, #0
    77da:	beq.w	7c62 <usb_isr+0x5f2>
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    77de:	add	sp, #12
    77e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    77e4:	ldr	r1, [pc, #368]	; (7958 <usb_isr+0x2e8>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    77e6:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    77ea:	ldr	r0, [r1, #0]
    77ec:	tst	r3, r0
    77ee:	bne.w	7bce <usb_isr+0x55e>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    77f2:	ldr	r2, [pc, #368]	; (7964 <usb_isr+0x2f4>)
    77f4:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    77f6:	ands	r5, r3
    77f8:	beq.n	7750 <usb_isr+0xe0>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    77fa:	lsrs	r6, r5, #16
    77fc:	beq.n	781e <usb_isr+0x1ae>
    77fe:	ldr	r7, [pc, #340]	; (7954 <usb_isr+0x2e4>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    7800:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    7804:	rbit	r4, r6
    7808:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    780c:	add.w	r0, r7, r4, lsl #7
					tx &= ~(1<<p);
    7810:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    7814:	adds	r0, #64	; 0x40
    7816:	bl	7598 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    781a:	bics	r6, r4
    781c:	bne.n	7804 <usb_isr+0x194>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    781e:	uxth	r5, r5
				while(rx) {
    7820:	cmp	r5, #0
    7822:	beq.n	7750 <usb_isr+0xe0>
    7824:	ldr	r7, [pc, #300]	; (7954 <usb_isr+0x2e4>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    7826:	movs	r6, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    7828:	rbit	r4, r5
    782c:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    7830:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    7834:	lsl.w	r4, r6, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    7838:	bl	7598 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    783c:	bics	r5, r4
    783e:	bne.n	7828 <usb_isr+0x1b8>
    7840:	b.n	7750 <usb_isr+0xe0>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    7842:	ldr	r2, [pc, #300]	; (7970 <usb_isr+0x300>)
    7844:	strb	r3, [r2, #0]
    7846:	b.n	77bc <usb_isr+0x14c>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    7848:	movw	ip, #8225	; 0x2021
    784c:	cmp	r0, ip
    784e:	beq.w	7b2c <usb_isr+0x4bc>
    7852:	bls.n	78cc <usb_isr+0x25c>
    7854:	movw	r3, #8993	; 0x2321
    7858:	cmp	r0, r3
    785a:	beq.w	79a8 <usb_isr+0x338>
    785e:	movw	r3, #63680	; 0xf8c0
    7862:	cmp	r0, r3
    7864:	beq.w	79d4 <usb_isr+0x364>
    7868:	movw	r3, #8737	; 0x2221
    786c:	cmp	r0, r3
    786e:	beq.w	7994 <usb_isr+0x324>
		}
		break;
#endif
	}
	printf("endpoint 0 stall\n");
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    7872:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    7876:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    787a:	cmp	r3, #0
    787c:	bne.w	76a0 <usb_isr+0x30>
    7880:	ldr.w	r8, [sp]
    7884:	b.n	7746 <usb_isr+0xd6>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    7886:	movw	r3, #770	; 0x302
    788a:	cmp	r0, r3
    788c:	beq.w	7ada <usb_isr+0x46a>
    7890:	cmp.w	r0, #1280	; 0x500
    7894:	bne.n	7872 <usb_isr+0x202>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    7896:	ldr	r3, [pc, #224]	; (7978 <usb_isr+0x308>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7898:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    789a:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    789c:	str	r5, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    789e:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    78a0:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    78a2:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    78a4:	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    78a8:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    78ac:	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    78ae:	orr.w	r3, r1, #65536	; 0x10000
    78b2:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    78b6:	ldr.w	r3, [r4, #432]	; 0x1b0
    78ba:	cmp	r3, #0
    78bc:	bne.n	78b6 <usb_isr+0x246>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    78be:	lsrs	r3, r2, #16
    78c0:	lsls	r3, r3, #25
    78c2:	orr.w	r3, r3, #16777216	; 0x1000000
    78c6:	str.w	r3, [r6, #340]	; 0x154
    78ca:	b.n	7876 <usb_isr+0x206>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    78cc:	cmp.w	r0, #2176	; 0x880
    78d0:	beq.w	7bb4 <usb_isr+0x544>
    78d4:	cmp.w	r0, #2304	; 0x900
    78d8:	bne.n	7872 <usb_isr+0x202>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    78da:	ubfx	lr, r2, #16, #8
    78de:	ldr	r2, [pc, #156]	; (797c <usb_isr+0x30c>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    78e0:	ldr	r0, [pc, #156]	; (7980 <usb_isr+0x310>)
		#endif
		#if defined(MTP_INTERFACE)
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    78e2:	mov.w	r8, #128	; 0x80
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    78e6:	strb.w	lr, [r2]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    78ea:	ldr	r1, [pc, #152]	; (7984 <usb_isr+0x314>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    78ec:	ldr	r2, [pc, #152]	; (7988 <usb_isr+0x318>)
    78ee:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    78f0:	str.w	r0, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    78f4:	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    78f8:	str.w	r2, [r6, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    78fc:	bl	6e2c <usb_serial_configure>
		#endif
		#if defined(MTP_INTERFACE)
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    7900:	mov	r2, r8
    7902:	mov	r1, r5
    7904:	ldr	r0, [pc, #132]	; (798c <usb_isr+0x31c>)
    7906:	bl	980c <memset>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    790a:	ldr	r3, [pc, #132]	; (7990 <usb_isr+0x320>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    790c:	ldr	r2, [pc, #104]	; (7978 <usb_isr+0x308>)
    790e:	movs	r1, #1
		#if defined(MTP_INTERFACE)
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    7910:	str.w	r3, [r7, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    7914:	add.w	r3, r3, #3154116608	; 0xbc000000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7918:	str.w	r8, [r2, #4]
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    791c:	add.w	r3, r3, #966656	; 0xec000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    7920:	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    7922:	str	r1, [r2, #0]
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    7924:	add.w	r3, r3, #956	; 0x3bc
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    7928:	str	r5, [r7, #76]	; 0x4c
		usb_mtp_configure();
		#endif
		#if defined(EXPERIMENTAL_INTERFACE)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    792a:	str.w	r3, [r7, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    792e:	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    7932:	ldr.w	r1, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    7936:	ldr	r3, [sp, #4]
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    7938:	str	r5, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    793a:	orr.w	r2, r1, #65536	; 0x10000
    793e:	str.w	r2, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    7942:	str	r5, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    7944:	ldr.w	r3, [r4, #432]	; 0x1b0
    7948:	cmp	r3, #0
    794a:	bne.n	7944 <usb_isr+0x2d4>
    794c:	b.n	7876 <usb_isr+0x206>
    794e:	nop
    7950:	.word	0x402e0000
    7954:	.word	0x20000000
    7958:	.word	0x20021e84
    795c:	.word	0x402e01c0
    7960:	.word	0x20021f78
    7964:	.word	0x20021e88
    7968:	.word	0x20022494
    796c:	.word	0x20022498
    7970:	.word	0x200224c0
    7974:	.word	0x200224c1
    7978:	.word	0x20022500
    797c:	.word	0x200224bf
    7980:	.word	0x00cc0002
    7984:	.word	0x000200c8
    7988:	.word	0x00c80002
    798c:	.word	0x20000080
    7990:	.word	0xb8c6cf5d
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    7994:	uxth	r1, r1
    7996:	cbnz	r1, 79a8 <usb_isr+0x338>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    7998:	ldr	r3, [pc, #740]	; (7c80 <usb_isr+0x610>)
			usb_cdc_line_rtsdtr = setup.wValue;
    799a:	ubfx	r2, r2, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    799e:	ldr	r1, [pc, #740]	; (7c84 <usb_isr+0x614>)
    79a0:	ldr	r0, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    79a2:	ldr	r3, [pc, #740]	; (7c88 <usb_isr+0x618>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    79a4:	str	r0, [r1, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    79a6:	strb	r2, [r3, #0]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    79a8:	ldr	r3, [pc, #736]	; (7c8c <usb_isr+0x61c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    79aa:	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    79ac:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    79ae:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    79b0:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    79b2:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    79b4:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    79b6:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    79b8:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    79bc:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    79c0:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    79c2:	orr.w	r3, r2, #65536	; 0x10000
    79c6:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    79ca:	ldr.w	r3, [r4, #432]	; 0x1b0
    79ce:	cmp	r3, #0
    79d0:	bne.n	79ca <usb_isr+0x35a>
    79d2:	b.n	7876 <usb_isr+0x206>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
#ifdef EXPERIMENTAL_INTERFACE
	  case 0xF8C0: // GET_MS_DESCRIPTOR (bRequest=0xF8 because microsoft_os_string_desc)
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    79d4:	uxth	r3, r1
    79d6:	tst.w	r3, #65280	; 0xff00
    79da:	bne.w	7872 <usb_isr+0x202>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    79de:	orr.w	r3, r3, #60928	; 0xee00
    79e2:	bfi	lr, r3, #0, #16
		__attribute__((fallthrough));
#endif
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    79e6:	ldr	r3, [pc, #680]	; (7c90 <usb_isr+0x620>)
    79e8:	ldr	r1, [r3, #4]
    79ea:	cmp	r1, #0
    79ec:	beq.w	7872 <usb_isr+0x202>
    79f0:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    79f2:	uxth.w	r5, lr
    79f6:	b.n	7a02 <usb_isr+0x392>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
		__attribute__((fallthrough));
#endif
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    79f8:	adds	r3, #12
    79fa:	ldr	r1, [r3, #4]
    79fc:	cmp	r1, #0
    79fe:	beq.w	7872 <usb_isr+0x202>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    7a02:	ldrh	r0, [r3, #0]
    7a04:	cmp	r0, r2
    7a06:	bne.n	79f8 <usb_isr+0x388>
    7a08:	ldrh	r0, [r3, #2]
    7a0a:	cmp	r0, r5
    7a0c:	bne.n	79f8 <usb_isr+0x388>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    7a0e:	lsrs	r0, r2, #8
    7a10:	cmp	r0, #3
    7a12:	beq.w	7c54 <usb_isr+0x5e4>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    7a16:	ldrh	r5, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    7a18:	mov.w	lr, lr, lsr #16
    7a1c:	cmp	r5, lr
    7a1e:	it	cs
    7a20:	movcs	r5, lr

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    7a22:	cmp.w	r2, #512	; 0x200
    7a26:	beq.w	7c38 <usb_isr+0x5c8>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    7a2a:	cmp.w	r2, #1792	; 0x700
    7a2e:	bne.w	7c2a <usb_isr+0x5ba>
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    7a32:	ldr	r3, [pc, #608]	; (7c94 <usb_isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    7a34:	mov	r2, r5
    7a36:	ldr.w	r8, [pc, #620]	; 7ca4 <usb_isr+0x634>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    7a3a:	ldrb	r0, [r3, #0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    7a3c:	ldr	r1, [pc, #600]	; (7c98 <usb_isr+0x628>)
    7a3e:	ldr	r3, [pc, #604]	; (7c9c <usb_isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    7a40:	cmp	r0, #0
    7a42:	it	eq
    7a44:	moveq	r1, r3
    7a46:	mov	r0, r8
    7a48:	bl	69a8 <memcpy>
					usb_descriptor_buffer[1] = 7;
    7a4c:	movs	r3, #7
    7a4e:	strb.w	r3, [r8, #1]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    7a52:	bic.w	r3, r8, #31
	uint32_t end_addr = (uint32_t)addr + size;
    7a56:	add	r8, r5
	asm volatile("": : :"memory");
	asm("dsb");
    7a58:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    7a5c:	ldr	r2, [pc, #576]	; (7ca0 <usb_isr+0x630>)
    7a5e:	str	r3, [r2, #0]
		location += 32;
    7a60:	adds	r3, #32
	} while (location < end_addr);
    7a62:	cmp	r8, r3
    7a64:	bhi.n	7a5c <usb_isr+0x3ec>
	asm("dsb");
    7a66:	dsb	sy
	asm("isb");
    7a6a:	isb	sy
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    7a6e:	ldr	r0, [pc, #564]	; (7ca4 <usb_isr+0x634>)
    7a70:	mov	r1, r5
    7a72:	bl	75d0 <endpoint0_transmit.constprop.1>
    7a76:	b.n	7876 <usb_isr+0x206>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    7a78:	uxth	r1, r1
    7a7a:	and.w	r3, r1, #127	; 0x7f
		if (endpoint > 7) break;
    7a7e:	cmp	r3, #7
    7a80:	bhi.w	7872 <usb_isr+0x202>
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    7a84:	lsls	r3, r3, #2
    7a86:	ldr	r2, [pc, #544]	; (7ca8 <usb_isr+0x638>)
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
    7a88:	lsls	r5, r1, #24
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    7a8a:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    7a8e:	add	r2, r3
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    7a90:	mov.w	r1, #0
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    7a94:	ldr	r3, [r2, #0]
    7a96:	ite	mi
    7a98:	bicmi.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    7a9c:	bicpl.w	r3, r3, #1
    7aa0:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7aa2:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    7aa4:	ldr	r3, [pc, #484]	; (7c8c <usb_isr+0x61c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    7aa6:	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    7aa8:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    7aaa:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7aac:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    7aae:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    7ab2:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    7ab6:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    7ab8:	orr.w	r3, r2, #65536	; 0x10000
    7abc:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    7ac0:	ldr.w	r3, [r4, #432]	; 0x1b0
    7ac4:	cmp	r3, #0
    7ac6:	bne.n	7ac0 <usb_isr+0x450>
    7ac8:	b.n	7876 <usb_isr+0x206>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    7aca:	ldr	r3, [pc, #480]	; (7cac <usb_isr+0x63c>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    7acc:	movs	r1, #2
    7ace:	mov	r0, r3
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    7ad0:	strb	r5, [r3, #0]
		reply_buffer[1] = 0;
    7ad2:	strb	r5, [r3, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    7ad4:	bl	75d0 <endpoint0_transmit.constprop.1>
    7ad8:	b.n	7876 <usb_isr+0x206>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    7ada:	uxth	r1, r1
    7adc:	and.w	r3, r1, #127	; 0x7f
		if (endpoint > 7) break;
    7ae0:	cmp	r3, #7
    7ae2:	bhi.w	7872 <usb_isr+0x202>
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    7ae6:	lsls	r3, r3, #2
    7ae8:	ldr	r2, [pc, #444]	; (7ca8 <usb_isr+0x638>)
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
    7aea:	lsls	r1, r1, #24
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    7aec:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    7af0:	add	r2, r3
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    7af2:	mov.w	r1, #0
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    7af6:	ldr	r3, [r2, #0]
    7af8:	ite	mi
    7afa:	orrmi.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    7afe:	orrpl.w	r3, r3, #1
    7b02:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7b04:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    7b06:	ldr	r3, [pc, #388]	; (7c8c <usb_isr+0x61c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    7b08:	str	r1, [r7, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    7b0a:	str	r3, [r7, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    7b0c:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7b0e:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    7b10:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    7b14:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    7b18:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    7b1a:	orr.w	r3, r2, #65536	; 0x10000
    7b1e:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    7b22:	ldr.w	r3, [r4, #432]	; 0x1b0
    7b26:	cmp	r3, #0
    7b28:	bne.n	7b22 <usb_isr+0x4b2>
    7b2a:	b.n	7876 <usb_isr+0x206>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    7b2c:	lsrs	r3, r1, #16
    7b2e:	cmp	r3, #7
    7b30:	bne.w	7872 <usb_isr+0x202>
		endpoint0_setupdata.bothwords = setupdata;
    7b34:	ldr.w	lr, [pc, #392]	; 7cc0 <usb_isr+0x650>
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    7b38:	movs	r0, #1
    7b3a:	ldr	r3, [pc, #372]	; (7cb0 <usb_isr+0x640>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    7b3c:	str.w	r2, [lr]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    7b40:	ldr	r2, [pc, #368]	; (7cb4 <usb_isr+0x644>)
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    7b42:	str	r5, [r7, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    7b44:	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    7b46:	str	r3, [r7, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    7b48:	ldr	r2, [pc, #364]	; (7cb8 <usb_isr+0x648>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    7b4a:	str	r0, [r3, #0]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    7b4c:	ldr.w	r0, [r6, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    7b50:	add.w	r5, r2, #4096	; 0x1000
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    7b54:	str.w	r1, [lr, #4]
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    7b58:	add.w	lr, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    7b5c:	orr.w	r1, r0, #1
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    7b60:	str	r2, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    7b62:	add.w	r0, r2, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    7b66:	add.w	r2, r2, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    7b6a:	str.w	r1, [r6, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    7b6e:	str	r5, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    7b70:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    7b74:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    7b76:	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    7b78:	ldr.w	r3, [r4, #432]	; 0x1b0
    7b7c:	cmp	r3, #0
    7b7e:	bne.n	7b78 <usb_isr+0x508>
	}
	endpoint0_transfer_ack.next = 1;
    7b80:	ldr	r2, [pc, #264]	; (7c8c <usb_isr+0x61c>)
    7b82:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7b84:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    7b88:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    7b8a:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    7b8c:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    7b90:	str	r2, [r7, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7b92:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    7b94:	str.w	fp, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    7b98:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    7b9c:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    7b9e:	orr.w	r3, r1, r0
    7ba2:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    7ba6:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    7baa:	ldr.w	r3, [r4, #432]	; 0x1b0
    7bae:	cmp	r3, #0
    7bb0:	bne.n	7baa <usb_isr+0x53a>
    7bb2:	b.n	7876 <usb_isr+0x206>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    7bb4:	ldr	r2, [pc, #260]	; (7cbc <usb_isr+0x64c>)
		endpoint0_transmit(reply_buffer, 1, 0);
    7bb6:	movs	r1, #1
		endpoint_queue_head[3].pointer4 = 0x74D59319;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    7bb8:	ldr	r3, [pc, #240]	; (7cac <usb_isr+0x63c>)
    7bba:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    7bbc:	mov	r0, r3
		endpoint_queue_head[3].pointer4 = 0x74D59319;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    7bbe:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    7bc0:	bl	75d0 <endpoint0_transmit.constprop.1>
    7bc4:	b.n	7876 <usb_isr+0x206>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    7bc6:	lsls	r5, r3, #31
    7bc8:	bpl.w	7732 <usb_isr+0xc2>
    7bcc:	b.n	772e <usb_isr+0xbe>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    7bce:	ldr	r0, [pc, #240]	; (7cc0 <usb_isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    7bd0:	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    7bd4:	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    7bd6:	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    7bd8:	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    7bda:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    7bdc:	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    7bde:	bne.w	77f2 <usb_isr+0x182>
    7be2:	uxth	r1, r0
    7be4:	cmp	r1, #0
    7be6:	bne.w	77f2 <usb_isr+0x182>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    7bea:	ldr	r1, [pc, #204]	; (7cb8 <usb_isr+0x648>)
    7bec:	ldr	r4, [pc, #212]	; (7cc4 <usb_isr+0x654>)
    7bee:	ldmia	r1, {r0, r1}
    7bf0:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    7bf2:	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    7bf4:	str	r0, [r4, #0]
    7bf6:	strh	r1, [r4, #4]
    7bf8:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    7bfa:	bne.w	77f2 <usb_isr+0x182>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    7bfe:	cpsid	i
	sof_usage |= (1 << interface);
    7c00:	ldr	r0, [pc, #196]	; (7cc8 <usb_isr+0x658>)
    7c02:	ldrb	r1, [r0, #0]
    7c04:	orr.w	r1, r1, #8
    7c08:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    7c0a:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    7c0e:	lsls	r0, r1, #24
    7c10:	bmi.n	7c20 <usb_isr+0x5b0>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    7c12:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    7c16:	movs	r0, #128	; 0x80
    7c18:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    7c1c:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    7c20:	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    7c22:	ldr	r2, [pc, #168]	; (7ccc <usb_isr+0x65c>)
    7c24:	movs	r1, #80	; 0x50
    7c26:	strb	r1, [r2, #0]
    7c28:	b.n	77f2 <usb_isr+0x182>
    7c2a:	ldr.w	r8, [pc, #120]	; 7ca4 <usb_isr+0x634>
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    7c2e:	mov	r2, r5
    7c30:	mov	r0, r8
    7c32:	bl	69a8 <memcpy>
    7c36:	b.n	7a52 <usb_isr+0x3e2>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    7c38:	ldr	r3, [pc, #88]	; (7c94 <usb_isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    7c3a:	mov	r2, r5
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    7c3c:	ldr	r1, [pc, #92]	; (7c9c <usb_isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    7c3e:	ldrb	r0, [r3, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    7c40:	ldr	r3, [pc, #84]	; (7c98 <usb_isr+0x628>)
    7c42:	ldr.w	r8, [pc, #96]	; 7ca4 <usb_isr+0x634>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    7c46:	cmp	r0, #0
    7c48:	it	eq
    7c4a:	moveq	r1, r3
    7c4c:	ldr	r0, [pc, #84]	; (7ca4 <usb_isr+0x634>)
    7c4e:	bl	69a8 <memcpy>
    7c52:	b.n	7a52 <usb_isr+0x3e2>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    7c54:	mov.w	lr, lr, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    7c58:	ldrb	r5, [r1, #0]
    7c5a:	cmp	r5, lr
    7c5c:	it	cs
    7c5e:	movcs	r5, lr
    7c60:	b.n	7a2a <usb_isr+0x3ba>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    7c62:	ldr	r1, [pc, #100]	; (7cc8 <usb_isr+0x658>)
    7c64:	ldrb	r2, [r1, #0]
    7c66:	and.w	r2, r2, #247	; 0xf7
    7c6a:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    7c6c:	cbnz	r2, 7c7a <usb_isr+0x60a>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    7c6e:	ldr.w	r2, [r3, #328]	; 0x148
    7c72:	bic.w	r2, r2, #128	; 0x80
    7c76:	str.w	r2, [r3, #328]	; 0x148
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				_reboot_Teensyduino_();
    7c7a:	bl	ffa0 <___reboot_Teensyduino__veneer>
    7c7e:	nop
    7c80:	.word	0x20022480
    7c84:	.word	0x20022528
    7c88:	.word	0x200224be
    7c8c:	.word	0x20022500
    7c90:	.word	0x200016fc
    7c94:	.word	0x200224c0
    7c98:	.word	0x600025c0
    7c9c:	.word	0x60002624
    7ca0:	.word	0xe000ef70
    7ca4:	.word	0x20200800
    7ca8:	.word	0x402e01c0
    7cac:	.word	0x20021f78
    7cb0:	.word	0x200224e0
    7cb4:	.word	0x00070080
    7cb8:	.word	0x20021e7c
    7cbc:	.word	0x200224bf
    7cc0:	.word	0x20005840
    7cc4:	.word	0x20022520
    7cc8:	.word	0x200224ba
    7ccc:	.word	0x200224c1

00007cd0 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    7cd0:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    7cd2:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    7cd6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    7cda:	ite	ne
    7cdc:	movne	r7, #0
    7cde:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    7ce2:	cmp	r2, #2
    7ce4:	bls.n	7cea <usb_config_rx+0x1a>
    7ce6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    7cea:	mov.w	r9, r0, lsl #7
    7cee:	ldr.w	sl, [pc, #64]	; 7d30 <usb_config_rx+0x60>
    7cf2:	mov	r5, r1
    7cf4:	mov	r4, r0
    7cf6:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    7cfa:	movs	r1, #0
    7cfc:	movs	r2, #64	; 0x40
    7cfe:	mov	r8, r3
    7d00:	mov	r0, r6
    7d02:	bl	980c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    7d06:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    7d08:	orr.w	r1, r7, r5, lsl #16
    7d0c:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    7d10:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    7d14:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    7d16:	cmp.w	r8, #0
    7d1a:	beq.n	7ce6 <usb_config_rx+0x16>
    7d1c:	ldr	r3, [pc, #12]	; (7d2c <usb_config_rx+0x5c>)
    7d1e:	lsls	r0, r4
    7d20:	ldr	r4, [r3, #0]
    7d22:	orrs	r0, r4
    7d24:	str	r0, [r3, #0]
    7d26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7d2a:	nop
    7d2c:	.word	0x20021e88
    7d30:	.word	0x20000000

00007d34 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    7d34:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    7d36:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    7d3a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    7d3e:	ite	ne
    7d40:	movne	r7, #0
    7d42:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    7d46:	cmp	r2, #2
    7d48:	bls.n	7d4e <usb_config_tx+0x1a>
    7d4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    7d4e:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    7d50:	lsls	r5, r0, #7
    7d52:	ldr.w	r9, [pc, #68]	; 7d98 <usb_config_tx+0x64>
    7d56:	mov	r8, r1
    7d58:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    7d5a:	movs	r1, #0
    7d5c:	mov	r4, r0
    7d5e:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    7d60:	add.w	sl, r9, r5
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    7d64:	mov	r0, sl
    7d66:	bl	980c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    7d6a:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    7d6c:	orr.w	r1, r7, r8, lsl #16
    7d70:	str.w	r1, [r9, r5]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    7d74:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    7d78:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    7d7c:	cmp	r6, #0
    7d7e:	beq.n	7d4a <usb_config_tx+0x16>
    7d80:	add.w	r0, r4, #16
    7d84:	ldr	r3, [pc, #12]	; (7d94 <usb_config_tx+0x60>)
    7d86:	lsls	r2, r0
    7d88:	ldr	r0, [r3, #0]
    7d8a:	orrs	r2, r0
    7d8c:	str	r2, [r3, #0]
    7d8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7d92:	nop
    7d94:	.word	0x20021e88
    7d98:	.word	0x20000000

00007d9c <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    7d9c:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    7d9e:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    7da0:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    7da2:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    7da6:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    7da8:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    7daa:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    7dac:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    7db0:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    7db4:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    7db8:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    7dbc:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    7dbe:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    7dc0:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    7dc2:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    7dc4:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    7dc6:	pop	{r4, r5, r6, r7}
    7dc8:	bx	lr
    7dca:	nop

00007dcc <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    7dcc:	subs	r3, r0, #2
    7dce:	cmp	r3, #2
    7dd0:	bls.n	7dd4 <usb_transmit+0x8>
    7dd2:	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    7dd4:	ldr	r3, [pc, #24]	; (7df0 <usb_transmit+0x24>)
    7dd6:	mov	r2, r1
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    7dd8:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    7dda:	add.w	r4, r0, #16
    7dde:	movs	r5, #1
    7de0:	add.w	r0, r3, r0, lsl #7
    7de4:	lsl.w	r1, r5, r4
    7de8:	adds	r0, #64	; 0x40
}
    7dea:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    7dec:	b.w	7508 <schedule_transfer>
    7df0:	.word	0x20000000

00007df4 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    7df4:	subs	r3, r0, #2
    7df6:	cmp	r3, #2
    7df8:	bls.n	7dfc <usb_receive+0x8>
    7dfa:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    7dfc:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    7dfe:	ldr	r3, [pc, #20]	; (7e14 <usb_receive+0x20>)
    7e00:	movs	r4, #1
    7e02:	mov	r2, r1
    7e04:	lsl.w	r1, r4, r0
    7e08:	add.w	r0, r3, r0, lsl #7
}
    7e0c:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    7e10:	b.w	7508 <schedule_transfer>
    7e14:	.word	0x20000000

00007e18 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    7e18:	ldr	r0, [r0, #4]
#endif
}
    7e1a:	bx	lr

00007e1c <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    7e1c:	cmp	r0, #0
    7e1e:	beq.n	7ed0 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7e20:	movs	r2, #1
// active, but the rest of your program becomes effectively stalled.  Usually
// delay() is used in very simple programs.  To achieve delay without waiting
// use millis() or elapsedMillis.  For shorter delay, use delayMicroseconds()
// or delayNanoseconds().
void delay(uint32_t msec)
{
    7e22:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e26:	sub	sp, #20
    7e28:	mov	fp, r0
    7e2a:	ldr	r4, [pc, #168]	; (7ed4 <delay+0xb8>)
    7e2c:	ldr	r5, [pc, #168]	; (7ed8 <delay+0xbc>)
    7e2e:	ldr	r6, [pc, #172]	; (7edc <delay+0xc0>)
    7e30:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7e34:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    7e38:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    7e3a:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7e3c:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    7e40:	cmp	r1, #0
    7e42:	bne.n	7e34 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7e44:	ldr	r7, [pc, #152]	; (7ee0 <delay+0xc4>)
    7e46:	strd	r8, r9, [sp, #8]
    7e4a:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    7e4c:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7e4e:	ldr	r2, [pc, #148]	; (7ee4 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    7e50:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7e54:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7e56:	ldr	r2, [r2, #0]
    7e58:	movs	r7, #1
    7e5a:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    7e5e:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7e62:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    7e64:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7e66:	cmp	r3, r1
    7e68:	it	eq
    7e6a:	cmpeq	r2, r8
    7e6c:	ite	cs
    7e6e:	movcs	sl, r8
    7e70:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    7e72:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7e76:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    7e7a:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    7e7c:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7e7e:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    7e82:	cmp	r3, #0
    7e84:	bne.n	7e76 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7e86:	ldr	r0, [sp, #4]
    7e88:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    7e8a:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7e8c:	ldr	r0, [pc, #84]	; (7ee4 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    7e8e:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7e92:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    7e94:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7e98:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    7e9c:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    7ea0:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7ea4:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    7ea6:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7ea8:	cmp	r1, r3
    7eaa:	it	eq
    7eac:	cmpeq	r0, r8
    7eae:	ite	cs
    7eb0:	movcs	r3, r8
    7eb2:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    7eb4:	add	r2, r3
    7eb6:	cmp	r2, lr
    7eb8:	bcc.n	7eca <delay+0xae>
			if (--msec == 0) return;
    7eba:	subs.w	fp, fp, #1
			start += 1000;
    7ebe:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    7ec2:	bne.n	7e76 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    7ec4:	add	sp, #20
    7ec6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    7eca:	bl	86b8 <yield>
	}
    7ece:	b.n	7e76 <delay+0x5a>
    7ed0:	bx	lr
    7ed2:	nop
    7ed4:	.word	0x2002252c
    7ed8:	.word	0x20022480
    7edc:	.word	0x2002247c
    7ee0:	.word	0xe0001004
    7ee4:	.word	0x20021fc0

00007ee8 <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    7ee8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    7eec:	ldr	r2, [pc, #72]	; (7f38 <micros+0x50>)
    7eee:	movs	r6, #1
    7ef0:	ldr	r5, [pc, #72]	; (7f3c <micros+0x54>)
    7ef2:	ldr	r4, [pc, #76]	; (7f40 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    7ef4:	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    7ef8:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    7efa:	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    7efc:	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    7f00:	cmp	r3, #0
    7f02:	bne.n	7ef4 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    7f04:	ldr	r2, [pc, #60]	; (7f44 <micros+0x5c>)
    7f06:	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7f08:	ldr	r7, [pc, #60]	; (7f48 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    7f0a:	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    7f0c:	mov.w	r9, #0
    7f10:	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7f14:	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    7f16:	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    7f1a:	cmp	r9, r3
    7f1c:	umull	r6, r7, r2, r6
    7f20:	it	eq
    7f22:	cmpeq	r8, r7
    7f24:	mov	r4, r7
    7f26:	ite	cs
    7f28:	movcs	r4, r7
    7f2a:	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    7f2c:	mla	r0, r0, r1, r4
    7f30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    7f34:	bx	lr
    7f36:	nop
    7f38:	.word	0x2002252c
    7f3c:	.word	0x20022480
    7f40:	.word	0x2002247c
    7f44:	.word	0xe0001004
    7f48:	.word	0x20021fc0

00007f4c <unused_interrupt_vector>:
	const uint32_t *stack;
	struct arm_fault_info_struct *info;
	const uint32_t *p, *end;

	// disallow any nested interrupts
	__disable_irq();
    7f4c:	cpsid	i
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    7f4e:	mrs	r3, IPSR
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
    7f52:	ldr	r5, [pc, #292]	; (8078 <unused_interrupt_vector+0x12c>)
    7f54:	str	r3, [r5, #4]
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    7f56:	mrs	r3, MSP
	info->cfsr = SCB_CFSR;
    7f5a:	ldr	r4, [pc, #288]	; (807c <unused_interrupt_vector+0x130>)
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
	info->len = sizeof(*info) / 4;
    7f5c:	mov	r6, r5
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
    7f5e:	ldr	r0, [pc, #288]	; (8080 <unused_interrupt_vector+0x134>)
	info->mmfar = SCB_MMFAR;
    7f60:	ldr	r1, [pc, #288]	; (8084 <unused_interrupt_vector+0x138>)
	info->bfar = SCB_BFAR;
    7f62:	ldr	r2, [pc, #292]	; (8088 <unused_interrupt_vector+0x13c>)
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    7f64:	ldr	r4, [r4, #0]
	info->hfsr = SCB_HFSR;
    7f66:	ldr	r0, [r0, #0]
	info->mmfar = SCB_MMFAR;
    7f68:	ldr	r1, [r1, #0]
	info->bfar = SCB_BFAR;
    7f6a:	ldr	r2, [r2, #0]
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
    7f6c:	str	r1, [r5, #16]
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    7f6e:	str	r4, [r5, #8]
	info->hfsr = SCB_HFSR;
    7f70:	str	r0, [r5, #12]
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
    7f72:	str	r2, [r5, #20]
	info->ret = stack[6];
    7f74:	ldr	r2, [r3, #24]
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    7f76:	ldr	r4, [pc, #276]	; (808c <unused_interrupt_vector+0x140>)
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
    7f78:	str	r2, [r5, #24]
	info->xpsr = stack[7];
    7f7a:	ldr	r3, [r3, #28]
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    7f7c:	ldr	r7, [pc, #272]	; (8090 <unused_interrupt_vector+0x144>)
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
    7f7e:	str	r3, [r5, #28]
	info->temp = tempmonGetTemp();
    7f80:	bl	8270 <tempmonGetTemp>
    7f84:	vstr	s0, [r5, #32]
	info->time = rtc_get();
    7f88:	bl	810c <rtc_get>
	info->len = sizeof(*info) / 4;
    7f8c:	movs	r3, #11
	// add CRC to crash report
	crc = 0xFFFFFFFF;
    7f8e:	mov.w	r2, #4294967295
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
    7f92:	str	r0, [r5, #36]	; 0x24
	info->len = sizeof(*info) / 4;
    7f94:	mov	r1, r3
    7f96:	str	r3, [r5, #0]
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
    7f98:	eors	r2, r1
    7f9a:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    7f9c:	and.w	r3, r2, #1
    7fa0:	subs	r1, #1
    7fa2:	mul.w	r3, r4, r3
    7fa6:	eor.w	r2, r3, r2, lsr #1
    7faa:	bne.n	7f9c <unused_interrupt_vector+0x50>
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    7fac:	cmp	r6, r7
    7fae:	beq.n	7fb6 <unused_interrupt_vector+0x6a>
    7fb0:	ldr.w	r1, [r6, #4]!
    7fb4:	b.n	7f98 <unused_interrupt_vector+0x4c>
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
	}
	info->crc = crc;
    7fb6:	ldr	r1, [pc, #192]	; (8078 <unused_interrupt_vector+0x12c>)
    7fb8:	str	r2, [r1, #40]	; 0x28
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    7fba:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    7fbe:	ldr	r3, [pc, #212]	; (8094 <unused_interrupt_vector+0x148>)
    7fc0:	ldr	r2, [pc, #212]	; (8098 <unused_interrupt_vector+0x14c>)
    7fc2:	str	r1, [r3, #0]
    7fc4:	str	r2, [r3, #0]
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    7fc6:	dsb	sy
	asm("isb");
    7fca:	isb	sy
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7fce:	ldr	r2, [pc, #204]	; (809c <unused_interrupt_vector+0x150>)
	PIT_MCR = PIT_MCR_MDIS;
    7fd0:	movs	r5, #2
    7fd2:	ldr	r4, [pc, #204]	; (80a0 <unused_interrupt_vector+0x154>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7fd4:	ldr	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    7fd6:	ldr	r1, [pc, #204]	; (80a4 <unused_interrupt_vector+0x158>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7fd8:	orr.w	r3, r3, #12288	; 0x3000
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    7fdc:	ldr	r0, [pc, #200]	; (80a8 <unused_interrupt_vector+0x15c>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7fde:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    7fe0:	str	r5, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    7fe2:	ldr	r3, [r2, #28]
    7fe4:	bic.w	r3, r3, #127	; 0x7f
    7fe8:	orr.w	r3, r3, #64	; 0x40
    7fec:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    7fee:	ldr	r3, [r1, #0]
    7ff0:	cmp	r3, r0
    7ff2:	bhi.n	8072 <unused_interrupt_vector+0x126>
	PIT_MCR = 0;
    7ff4:	ldr	r2, [pc, #168]	; (80a0 <unused_interrupt_vector+0x154>)
    7ff6:	movs	r1, #0
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    7ff8:	movs	r0, #1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    7ffa:	ldr	r6, [pc, #176]	; (80ac <unused_interrupt_vector+0x160>)
	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
    7ffc:	str	r1, [r2, #0]
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    7ffe:	mov.w	r3, #4294967295
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
    8002:	str.w	r1, [r2, #264]	; 0x108
	NVIC_ICER4 = 0xFFFFFFFF;

	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
    8006:	mov	r4, r1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    8008:	str.w	r6, [r2, #256]	; 0x100
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    800c:	mov	r5, r2
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    800e:	str.w	r0, [r2, #264]	; 0x108
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    8012:	mov	r7, r0
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    8014:	ldr.w	lr, [pc, #192]	; 80d8 <unused_interrupt_vector+0x18c>
	NVIC_ICER1 = 0xFFFFFFFF;
    8018:	ldr	r6, [pc, #148]	; (80b0 <unused_interrupt_vector+0x164>)
	NVIC_ICER2 = 0xFFFFFFFF;
    801a:	ldr	r0, [pc, #152]	; (80b4 <unused_interrupt_vector+0x168>)
	NVIC_ICER3 = 0xFFFFFFFF;
    801c:	ldr	r1, [pc, #152]	; (80b8 <unused_interrupt_vector+0x16c>)
	NVIC_ICER4 = 0xFFFFFFFF;
    801e:	ldr	r2, [pc, #156]	; (80bc <unused_interrupt_vector+0x170>)
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    8020:	str.w	r3, [lr]
	NVIC_ICER1 = 0xFFFFFFFF;
    8024:	str	r3, [r6, #0]
	NVIC_ICER2 = 0xFFFFFFFF;
    8026:	str	r3, [r0, #0]
	NVIC_ICER3 = 0xFFFFFFFF;
    8028:	str	r3, [r1, #0]
	NVIC_ICER4 = 0xFFFFFFFF;
    802a:	str	r3, [r2, #0]
    802c:	b.n	8032 <unused_interrupt_vector+0xe6>
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
		}
		usb_isr();
    802e:	bl	7670 <usb_isr>
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    8032:	ldr.w	r2, [r5, #268]	; 0x10c
    8036:	ldr	r3, [pc, #104]	; (80a0 <unused_interrupt_vector+0x154>)
    8038:	cmp	r2, #0
    803a:	beq.n	802e <unused_interrupt_vector+0xe2>
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
    803c:	adds	r4, #1
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    803e:	str.w	r7, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    8042:	cmp	r4, #79	; 0x4f
    8044:	bls.n	802e <unused_interrupt_vector+0xe2>
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8046:	ldr	r2, [pc, #120]	; (80c0 <unused_interrupt_vector+0x174>)
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    8048:	movs	r4, #2
    804a:	ldr	r0, [pc, #120]	; (80c4 <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    804c:	mov.w	r1, #2147483648	; 0x80000000
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    8050:	str.w	r4, [r0, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8054:	str	r1, [r2, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8056:	ldr.w	r2, [r3, #268]	; 0x10c
    805a:	cbnz	r2, 806a <unused_interrupt_vector+0x11e>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
    805c:	ldr	r1, [pc, #104]	; (80c8 <unused_interrupt_vector+0x17c>)
    805e:	ldr	r2, [pc, #108]	; (80cc <unused_interrupt_vector+0x180>)
    8060:	str	r2, [r1, #48]	; 0x30
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8062:	ldr.w	r0, [r3, #268]	; 0x10c
    8066:	cmp	r0, #0
    8068:	beq.n	8060 <unused_interrupt_vector+0x114>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
	SCB_AIRCR = 0x05FA0004;
    806a:	ldr	r3, [pc, #100]	; (80d0 <unused_interrupt_vector+0x184>)
    806c:	ldr	r2, [pc, #100]	; (80d4 <unused_interrupt_vector+0x188>)
    806e:	str	r2, [r3, #0]
    8070:	b.n	8070 <unused_interrupt_vector+0x124>

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8072:	bl	7244 <set_arm_clock>
    8076:	b.n	7ff4 <unused_interrupt_vector+0xa8>
    8078:	.word	0x2027ff80
    807c:	.word	0xe000ed28
    8080:	.word	0xe000ed2c
    8084:	.word	0xe000ed34
    8088:	.word	0xe000ed38
    808c:	.word	0xedb88320
    8090:	.word	0x2027ffa4
    8094:	.word	0xe000ef70
    8098:	.word	0x2027ffa0
    809c:	.word	0x400fc000
    80a0:	.word	0x40084000
    80a4:	.word	0x20001bc4
    80a8:	.word	0x0bcd3d80
    80ac:	.word	0x00249f00
    80b0:	.word	0xe000e184
    80b4:	.word	0xe000e188
    80b8:	.word	0xe000e18c
    80bc:	.word	0xe000e190
    80c0:	.word	0x400d9000
    80c4:	.word	0x402e0000
    80c8:	.word	0x400f8000
    80cc:	.word	0x0bad00f1
    80d0:	.word	0xe000ed0c
    80d4:	.word	0x05fa0004
    80d8:	.word	0xe000e180

000080dc <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    80dc:	ldr	r2, [pc, #36]	; (8104 <_sbrk+0x28>)

char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
    80de:	push	{r3, lr}
        char *prev = __brkval;
    80e0:	ldr	r3, [r2, #0]
        if (incr != 0) {
    80e2:	cbz	r0, 80ee <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    80e4:	add	r0, r3
    80e6:	ldr	r1, [pc, #32]	; (8108 <_sbrk+0x2c>)
    80e8:	cmp	r0, r1
    80ea:	bhi.n	80f2 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    80ec:	str	r0, [r2, #0]
        }
        return prev;
}
    80ee:	mov	r0, r3
    80f0:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    80f2:	bl	8fcc <__errno>
    80f6:	movs	r2, #12
                        return (void *)-1;
    80f8:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    80fc:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    80fe:	mov	r0, r3
    8100:	pop	{r3, pc}
    8102:	nop
    8104:	.word	0x20001bdc
    8108:	.word	0x20280000

0000810c <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    810c:	ldr	r3, [pc, #40]	; (8138 <rtc_get+0x2c>)
#include "imxrt.h"
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
    810e:	push	{r4, r5}
	uint32_t hi1 = SNVS_HPRTCMR;
    8110:	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    8112:	mov	r4, r3
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
    8114:	ldr	r1, [r3, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    8116:	ldr	r2, [r4, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    8118:	ldr	r3, [r4, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    811a:	cmp	r1, r3
    811c:	it	eq
    811e:	cmpeq	r0, r2
unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    8120:	mov	r0, r2
		uint32_t lo2 = SNVS_HPRTCLR;
    8122:	mov	r1, r3
		if (lo1 == lo2 && hi1 == hi2) {
    8124:	ite	eq
    8126:	moveq	r5, #1
    8128:	movne	r5, #0
    812a:	cmp	r5, #0
    812c:	beq.n	8116 <rtc_get+0xa>
			return (hi2 << 17) | (lo2 >> 15);
    812e:	lsrs	r1, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    8130:	pop	{r4, r5}
    8132:	orr.w	r0, r1, r2, lsl #17
    8136:	bx	lr
    8138:	.word	0x400d4000

0000813c <rtc_set>:

void rtc_set(unsigned long t)
{
	// stop the RTC
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    813c:	ldr	r3, [pc, #72]	; (8188 <rtc_set+0x4c>)
    813e:	ldr	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    8140:	mov	r1, r3
}

void rtc_set(unsigned long t)
{
	// stop the RTC
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    8142:	bic.w	r2, r2, #65537	; 0x10001
    8146:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    8148:	ldr	r3, [r1, #8]
    814a:	ldr	r2, [pc, #60]	; (8188 <rtc_set+0x4c>)
    814c:	lsls	r3, r3, #31
    814e:	bmi.n	8148 <rtc_set+0xc>
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    8150:	ldr	r3, [r2, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    8152:	mov	r1, r2
{
	// stop the RTC
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    8154:	bic.w	r3, r3, #1
    8158:	str	r3, [r2, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    815a:	ldr	r3, [r1, #56]	; 0x38
    815c:	ldr	r2, [pc, #40]	; (8188 <rtc_set+0x4c>)
    815e:	lsls	r3, r3, #31
    8160:	bmi.n	815a <rtc_set+0x1e>
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
    8162:	lsls	r3, r0, #15
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    8164:	mov	r1, r2
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
	SNVS_LPSRTCMR = t >> 17;
    8166:	lsrs	r0, r0, #17
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
    8168:	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    816a:	str	r0, [r2, #80]	; 0x50
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    816c:	ldr	r3, [r2, #56]	; 0x38
    816e:	orr.w	r3, r3, #1
    8172:	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    8174:	ldr	r3, [r1, #56]	; 0x38
    8176:	ldr	r2, [pc, #16]	; (8188 <rtc_set+0x4c>)
    8178:	lsls	r3, r3, #31
    817a:	bpl.n	8174 <rtc_set+0x38>
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    817c:	ldr	r3, [r2, #8]
    817e:	orr.w	r3, r3, #65537	; 0x10001
    8182:	str	r3, [r2, #8]
    8184:	bx	lr
    8186:	nop
    8188:	.word	0x400d4000

0000818c <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    818c:	push	{r3, lr}

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    818e:	ldr	r3, [r0, #0]
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    8190:	ldr	r2, [r0, #4]

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    8192:	cbz	r3, 81c4 <sm_align_pool+0x38>
    8194:	cbz	r2, 81b6 <sm_align_pool+0x2a>
	if (spool->pool_size % HEADER_SZ) return 0;
    8196:	ldr	r3, [pc, #64]	; (81d8 <sm_align_pool+0x4c>)
    8198:	umull	r1, r3, r3, r2
    819c:	lsrs	r3, r3, #3
    819e:	add.w	r3, r3, r3, lsl #1
    81a2:	subs.w	r3, r2, r3, lsl #2
    81a6:	beq.n	81b0 <sm_align_pool+0x24>
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
    81a8:	subs	r2, r2, r3
    81aa:	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    81ac:	cmp	r2, #240	; 0xf0
    81ae:	bls.n	81b6 <sm_align_pool+0x2a>

int sm_align_pool(struct smalloc_pool *spool)
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    81b0:	movs	r3, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    81b2:	mov	r0, r3
    81b4:	pop	{r3, pc}
	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
	if (spool->pool_size <= MIN_POOL_SZ) {
		errno = ENOSPC;
    81b6:	bl	8fcc <__errno>
    81ba:	movs	r2, #28
    81bc:	movs	r3, #0
    81be:	str	r2, [r0, #0]
		return 0;
	}

	return 1;
}
    81c0:	mov	r0, r3
    81c2:	pop	{r3, pc}
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    81c4:	ldr	r3, [pc, #16]	; (81d8 <sm_align_pool+0x4c>)
    81c6:	umull	r1, r3, r3, r2
    81ca:	lsrs	r3, r3, #3
    81cc:	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    81d0:	subs.w	r3, r2, r3, lsl #2
    81d4:	bne.n	81a8 <sm_align_pool+0x1c>
    81d6:	b.n	81ac <sm_align_pool+0x20>
    81d8:	.word	0xaaaaaaab

000081dc <sm_set_pool>:

	return 1;
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    81dc:	push	{r4, r5, r6, lr}
	if (!spool) {
    81de:	mov	r4, r0
    81e0:	cmp	r0, #0
    81e2:	beq.n	825a <sm_set_pool+0x7e>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    81e4:	cbz	r1, 81ee <sm_set_pool+0x12>
    81e6:	clz	r5, r2
    81ea:	lsrs	r5, r5, #5
    81ec:	cbz	r5, 822e <sm_set_pool+0x52>

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    81ee:	ldr	r0, [r4, #0]
    81f0:	cbz	r0, 81f6 <sm_set_pool+0x1a>
    81f2:	ldr	r2, [r4, #4]
    81f4:	cbnz	r2, 8204 <sm_set_pool+0x28>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    81f6:	bl	8fcc <__errno>
    81fa:	movs	r3, #22
		return 0;
    81fc:	movs	r2, #0
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    81fe:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    8200:	mov	r0, r2
    8202:	pop	{r4, r5, r6, pc}
struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
	if (spool->pool_size % HEADER_SZ) return 0;
    8204:	ldr	r1, [pc, #96]	; (8268 <sm_set_pool+0x8c>)
    8206:	umull	r3, r1, r1, r2
    820a:	lsrs	r1, r1, #3
    820c:	add.w	r1, r1, r1, lsl #1
    8210:	subs.w	r1, r2, r1, lsl #2
    8214:	bne.n	81f6 <sm_set_pool+0x1a>
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    8216:	ldr	r3, [r4, #8]
    8218:	cbz	r3, 821e <sm_set_pool+0x42>
    821a:	bl	980c <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    821e:	movs	r3, #0
			return 1;
    8220:	movs	r2, #1
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    8222:	str	r3, [r4, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    8224:	mov	r0, r2
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    8226:	str	r3, [r4, #4]
    8228:	str	r3, [r4, #8]
    822a:	str	r3, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    822c:	pop	{r4, r5, r6, pc}
    822e:	mov	r6, r3
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
    8230:	ldr	r3, [sp, #16]
		errno = EINVAL;
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
    8232:	stmia.w	r0, {r1, r2}
	spool->oomfn = oom_handler;
    8236:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    8238:	bl	818c <sm_align_pool>
    823c:	mov	r2, r0
    823e:	cmp	r0, #0
    8240:	beq.n	8200 <sm_set_pool+0x24>

	if (do_zero) {
    8242:	cbnz	r6, 824a <sm_set_pool+0x6e>
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
    8244:	movs	r2, #1
}
    8246:	mov	r0, r2
    8248:	pop	{r4, r5, r6, pc}
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
    824a:	ldmia.w	r4, {r0, r2}
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
    824e:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    8250:	mov	r1, r5
    8252:	bl	980c <memset>
	}

	return 1;
    8256:	movs	r2, #1
    8258:	b.n	8200 <sm_set_pool+0x24>
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    825a:	bl	8fcc <__errno>
    825e:	movs	r3, #22
		return 0;
    8260:	mov	r2, r4
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    8262:	str	r3, [r0, #0]
		return 0;
    8264:	b.n	8200 <sm_set_pool+0x24>
    8266:	nop
    8268:	.word	0xaaaaaaab

0000826c <Panic_Temp_isr>:
static float s_hot_ROOM, s_roomC_hotC;

extern void unused_interrupt_vector(void); // startup.c

void Panic_Temp_isr(void) {
  unused_interrupt_vector();
    826c:	b.w	7f4c <unused_interrupt_vector>

00008270 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    8270:	ldr	r1, [pc, #72]	; (82bc <tempmonGetTemp+0x4c>)
    8272:	ldr	r3, [r1, #0]
    8274:	ldr	r2, [pc, #68]	; (82bc <tempmonGetTemp+0x4c>)
    8276:	lsls	r3, r3, #29
    8278:	bpl.n	8272 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    827a:	ldr	r3, [r2, #0]
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    827c:	ldr	r1, [pc, #64]	; (82c0 <tempmonGetTemp+0x50>)

    return tmeas;
    827e:	ubfx	r3, r3, #8, #12
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8282:	ldr	r2, [pc, #64]	; (82c4 <tempmonGetTemp+0x54>)

    return tmeas;
    8284:	vmov	s15, r3
    8288:	ldr	r3, [r1, #0]
    828a:	vldr	s12, [r2]
    828e:	vcvt.f32.s32	s14, s15
    8292:	vmov	s15, r3
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8296:	ldr	r2, [pc, #48]	; (82c8 <tempmonGetTemp+0x58>)

    return tmeas;
    8298:	vcvt.f32.u32	s15, s15
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    829c:	ldr	r3, [pc, #44]	; (82cc <tempmonGetTemp+0x5c>)

    return tmeas;
    829e:	vldr	s13, [r2]
    82a2:	vsub.f32	s15, s14, s15
    82a6:	vldr	s14, [r3]
    82aa:	vcvt.f32.u32	s14, s14
    82ae:	vmul.f32	s15, s15, s12
    82b2:	vdiv.f32	s0, s15, s13
}
    82b6:	vsub.f32	s0, s14, s0
    82ba:	bx	lr
    82bc:	.word	0x400d8180
    82c0:	.word	0x20021fb0
    82c4:	.word	0x20021fb8
    82c8:	.word	0x20021fbc
    82cc:	.word	0x20021fb4

000082d0 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    82d0:	lsls	r0, r0, #4
    82d2:	ldr	r3, [pc, #60]	; (8310 <digitalWrite.part.0+0x40>)
    82d4:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    82d6:	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
    82d8:	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
    82da:	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    82dc:	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    82de:	tst	r4, r0
    82e0:	beq.n	82ee <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
    82e2:	cbz	r1, 82fc <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
    82e4:	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    82e8:	ldr.w	r4, [sp], #4
    82ec:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    82ee:	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
    82f0:	cbnz	r1, 8306 <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    82f2:	ldr	r2, [pc, #32]	; (8314 <digitalWrite.part.0+0x44>)
		}
	}
}
    82f4:	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    82f8:	str	r2, [r3, #0]
		}
	}
}
    82fa:	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    82fc:	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    8300:	ldr.w	r4, [sp], #4
    8304:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8306:	ldr	r2, [pc, #16]	; (8318 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    8308:	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    830c:	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    830e:	bx	lr
    8310:	.word	0x20000758
    8314:	.word	0x00013038
    8318:	.word	0x0001f038

0000831c <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    831c:	cmp	r0, #54	; 0x36
    831e:	bhi.n	8324 <digitalWrite+0x8>
    8320:	b.w	82d0 <digitalWrite.part.0>
    8324:	bx	lr
    8326:	nop

00008328 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    8328:	cmp	r0, #54	; 0x36
    832a:	bhi.n	8366 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    832c:	lsls	r0, r0, #4
    832e:	ldr	r2, [pc, #104]	; (8398 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8330:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    8332:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8336:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    8338:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    833a:	beq.n	8368 <pinMode+0x40>
    833c:	cmp	r1, #4
    833e:	beq.n	8368 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8340:	ldr	r4, [r3, #12]
    8342:	ldr	r2, [r0, #4]
    8344:	bic.w	r2, r2, r4
    8348:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    834a:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    834c:	cbz	r1, 838a <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    834e:	cmp	r1, #2
    8350:	beq.n	8390 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    8352:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    8354:	ldr	r3, [r3, #4]
}
    8356:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    835a:	ite	eq
    835c:	ldreq	r1, [pc, #60]	; (839c <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    835e:	ldrne	r1, [pc, #64]	; (83a0 <pinMode+0x78>)
    8360:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    8362:	movs	r2, #21
    8364:	str	r2, [r3, #0]
}
    8366:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    8368:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    836a:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    836c:	ldr	r4, [r0, #4]
    836e:	orr.w	r2, r2, r4
    8372:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8374:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    8376:	beq.n	838a <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    8378:	movw	r1, #2104	; 0x838
    837c:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    837e:	ldr	r3, [r3, #4]
    8380:	movs	r2, #21
}
    8382:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    8386:	str	r2, [r3, #0]
}
    8388:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    838a:	movs	r1, #56	; 0x38
    838c:	str	r1, [r2, #0]
    838e:	b.n	837e <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8390:	ldr	r1, [pc, #16]	; (83a4 <pinMode+0x7c>)
    8392:	str	r1, [r2, #0]
    8394:	b.n	837e <pinMode+0x56>
    8396:	nop
    8398:	.word	0x20000758
    839c:	.word	0x00013038
    83a0:	.word	0x00010038
    83a4:	.word	0x0001f038

000083a8 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    83a8:	ldr	r0, [pc, #656]	; (863c <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    83aa:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    83ae:	ldr	r3, [pc, #656]	; (8640 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    83b0:	ldr	r2, [r0, #120]	; 0x78
    83b2:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    83b6:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    83b8:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    83ba:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    83bc:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    83c0:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    83c4:	ldr	r4, [pc, #636]	; (8644 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    83c6:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    83ca:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    83cc:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    83d0:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    83d2:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    83d4:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    83d8:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    83dc:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    83e0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    83e4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    83e8:	ldrh.w	r0, [r3, #392]	; 0x188
    83ec:	uxth	r0, r0
    83ee:	orr.w	r0, r0, #240	; 0xf0
    83f2:	strh.w	r0, [r3, #392]	; 0x188
    83f6:	add.w	r0, r1, r1, lsl #1
    83fa:	ldr	r3, [pc, #580]	; (8640 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    83fc:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    83fe:	movs	r5, #0
    8400:	lsls	r0, r0, #5
    8402:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    8404:	cmp	r1, #4
    8406:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    8408:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    840c:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    840e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    8410:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    8412:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    8414:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    8416:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    8418:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    841a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    841c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    841e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    8420:	bne.n	83f6 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    8422:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    8426:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    842a:	ldr	r3, [pc, #540]	; (8648 <pwm_init+0x2a0>)
    842c:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    8430:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    8432:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    8434:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    8438:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    843a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    843e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    8442:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    8446:	ldrh.w	r0, [r4, #392]	; 0x188
    844a:	uxth	r0, r0
    844c:	orr.w	r0, r0, #3840	; 0xf00
    8450:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    8454:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    8458:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    845c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    8460:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    8464:	ldrh.w	r0, [r3, #392]	; 0x188
    8468:	uxth	r0, r0
    846a:	orr.w	r0, r0, #240	; 0xf0
    846e:	strh.w	r0, [r3, #392]	; 0x188
    8472:	add.w	r0, r1, r1, lsl #1
    8476:	ldr	r3, [pc, #464]	; (8648 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    8478:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    847a:	movs	r5, #0
    847c:	lsls	r0, r0, #5
    847e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    8480:	cmp	r1, #4
    8482:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    8484:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    8486:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    848a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    848c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    848e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    8490:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    8492:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    8494:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    8496:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    8498:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    849a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    849c:	bne.n	8472 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    849e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    84a2:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    84a6:	ldr	r3, [pc, #420]	; (864c <pwm_init+0x2a4>)
    84a8:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    84ac:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    84ae:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    84b0:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    84b4:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    84b6:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    84ba:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    84be:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    84c2:	ldrh.w	r0, [r4, #392]	; 0x188
    84c6:	uxth	r0, r0
    84c8:	orr.w	r0, r0, #3840	; 0xf00
    84cc:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    84d0:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    84d4:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    84d8:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    84dc:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    84e0:	ldrh.w	r0, [r3, #392]	; 0x188
    84e4:	uxth	r0, r0
    84e6:	orr.w	r0, r0, #240	; 0xf0
    84ea:	strh.w	r0, [r3, #392]	; 0x188
    84ee:	add.w	r0, r1, r1, lsl #1
    84f2:	ldr	r3, [pc, #344]	; (864c <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    84f4:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    84f6:	movs	r5, #0
    84f8:	lsls	r0, r0, #5
    84fa:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    84fc:	cmp	r1, #4
    84fe:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    8500:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    8502:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    8506:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    8508:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    850a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    850c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    850e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    8510:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    8512:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    8514:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    8516:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    8518:	bne.n	84ee <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    851a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    851e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    8522:	ldr	r3, [pc, #300]	; (8650 <pwm_init+0x2a8>)
    8524:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    8528:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    852a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    852c:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    8530:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    8532:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    8536:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    853a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    853e:	ldrh.w	r0, [r4, #392]	; 0x188
    8542:	uxth	r0, r0
    8544:	orr.w	r0, r0, #3840	; 0xf00
    8548:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    854c:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    8550:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    8554:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    8558:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    855c:	ldrh.w	r0, [r3, #392]	; 0x188
    8560:	uxth	r0, r0
    8562:	orr.w	r0, r0, #240	; 0xf0
    8566:	strh.w	r0, [r3, #392]	; 0x188
    856a:	add.w	r0, r1, r1, lsl #1
    856e:	ldr	r3, [pc, #224]	; (8650 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    8570:	adds	r1, #1
    8572:	lsls	r0, r0, #5
    8574:	mov	r4, r3
    8576:	cmp	r1, #4
    8578:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    857a:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    857c:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    8580:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    8582:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    8584:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    8586:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    8588:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    858a:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    858c:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    858e:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    8590:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    8592:	bne.n	856a <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    8594:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    8598:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    859a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    859c:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    85a0:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    85a2:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    85a6:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    85a8:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    85ac:	orrs	r3, r7
    85ae:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    85b2:	ldrh.w	r3, [r4, #392]	; 0x188
    85b6:	uxth	r3, r3
    85b8:	orr.w	r3, r3, #3840	; 0xf00
    85bc:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    85c0:	lsls	r0, r2, #5
    85c2:	ldr	r3, [pc, #144]	; (8654 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    85c4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    85c6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    85c8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    85ca:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    85cc:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    85ce:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    85d0:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    85d2:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    85d6:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    85d8:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    85da:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    85dc:	bne.n	85c0 <pwm_init+0x218>
    85de:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    85e0:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    85e2:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    85e6:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    85ea:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    85ec:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    85f0:	lsls	r0, r2, #5
    85f2:	ldr	r3, [pc, #100]	; (8658 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    85f4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    85f6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    85f8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    85fa:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    85fc:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    85fe:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    8600:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    8602:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    8604:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    8606:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    8608:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    860a:	bne.n	85f0 <pwm_init+0x248>
    860c:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    860e:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    8610:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    8614:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    8618:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    861a:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    861e:	lsls	r0, r2, #5
    8620:	ldr	r3, [pc, #56]	; (865c <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    8622:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    8624:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    8626:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    8628:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    862a:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    862c:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    862e:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    8630:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    8632:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    8634:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    8636:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    8638:	bne.n	861e <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    863a:	pop	{r4, r5, r6, r7, pc}
    863c:	.word	0x400fc000
    8640:	.word	0x403dc000
    8644:	.word	0xfc030000
    8648:	.word	0x403e0000
    864c:	.word	0x403e4000
    8650:	.word	0x403e8000
    8654:	.word	0x401dc000
    8658:	.word	0x401e0000
    865c:	.word	0x401e4000

00008660 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    8660:	ldr	r2, [pc, #72]	; (86ac <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    8662:	ldr	r3, [pc, #76]	; (86b0 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    8664:	ldr.w	r0, [r2, #544]	; 0x220
    8668:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    866c:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    866e:	push	{r4, lr}
    8670:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    8672:	bhi.n	867a <usb_init_serialnumber+0x1a>
    8674:	add.w	r0, r0, r0, lsl #2
    8678:	lsls	r0, r0, #1
    867a:	ldr	r4, [pc, #56]	; (86b4 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    867c:	add	r1, sp, #4
    867e:	movs	r2, #10
    8680:	bl	8c4c <ultoa>
    8684:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    8686:	movs	r3, #0
    8688:	mov	r0, r4
		char c = buf[i];
    868a:	ldrb.w	r2, [r1], #1
    868e:	adds	r3, #1
		if (!c) break;
    8690:	cbz	r2, 86a2 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    8692:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    8694:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    8698:	bne.n	868a <usb_init_serialnumber+0x2a>
    869a:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    869c:	strb	r3, [r4, #0]
}
    869e:	add	sp, #16
    86a0:	pop	{r4, pc}
    86a2:	lsls	r3, r3, #1
    86a4:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    86a6:	strb	r3, [r4, #0]
}
    86a8:	add	sp, #16
    86aa:	pop	{r4, pc}
    86ac:	.word	0x401f4400
    86b0:	.word	0x0098967f
    86b4:	.word	0x200021c0

000086b8 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    86b8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    86bc:	ldr	r6, [pc, #200]	; (8788 <yield+0xd0>)
    86be:	ldrb	r3, [r6, #0]
    86c0:	cbz	r3, 86e8 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    86c2:	ldr	r7, [pc, #200]	; (878c <yield+0xd4>)
    86c4:	ldrb	r2, [r7, #0]
    86c6:	cbnz	r2, 86e8 <yield+0x30>
	running = 1;
    86c8:	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    86ca:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    86cc:	strb	r2, [r7, #0]


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    86ce:	bmi.n	8740 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    86d0:	lsls	r2, r3, #30
    86d2:	bmi.n	8708 <yield+0x50>

	running = 0;
    86d4:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    86d6:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    86d8:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    86da:	bpl.n	86e8 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    86dc:	ldr	r3, [pc, #176]	; (8790 <yield+0xd8>)
    86de:	ldr	r2, [r3, #0]
    86e0:	cbz	r2, 86e8 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    86e2:	mrs	r2, IPSR
		if (ipsr != 0) return;
    86e6:	cbz	r2, 86ec <yield+0x34>
    86e8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    86ec:	mrs	r0, PRIMASK
		__disable_irq();
    86f0:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    86f2:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    86f4:	cbz	r2, 86fe <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    86f6:	ldr	r4, [pc, #156]	; (8794 <yield+0xdc>)
    86f8:	ldrb	r1, [r4, #0]
    86fa:	cmp	r1, #0
    86fc:	beq.n	875e <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    86fe:	cmp	r0, #0
    8700:	bne.n	86e8 <yield+0x30>
    8702:	cpsie	i
    8704:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    8708:	ldr.w	r8, [pc, #148]	; 87a0 <yield+0xe8>
    870c:	ldrb.w	r2, [r8]
    8710:	cmp	r2, #0
    8712:	beq.n	86d4 <yield+0x1c>
    8714:	movs	r4, #0
    8716:	ldr.w	r9, [pc, #140]	; 87a4 <yield+0xec>
    871a:	b.n	8728 <yield+0x70>
    871c:	adds	r4, #1
    871e:	ldrb.w	r3, [r8]
    8722:	uxtb	r4, r4
    8724:	cmp	r3, r4
    8726:	bls.n	8750 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    8728:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    872c:	ldr	r3, [r5, #0]
    872e:	mov	r0, r5
    8730:	ldr	r3, [r3, #16]
    8732:	blx	r3
    8734:	cmp	r0, #0
    8736:	beq.n	871c <yield+0x64>
    8738:	ldr	r3, [r5, #20]
    873a:	ldr	r3, [r3, #8]
    873c:	blx	r3
    873e:	b.n	871c <yield+0x64>
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
    8740:	bl	7064 <usb_serial_available>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    8744:	cbnz	r0, 877c <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    8746:	ldr	r3, [pc, #80]	; (8798 <yield+0xe0>)
    8748:	ldrb	r3, [r3, #0]
    874a:	cbnz	r3, 8754 <yield+0x9c>
    874c:	ldrb	r3, [r6, #0]
    874e:	b.n	86d0 <yield+0x18>
    8750:	ldrb	r3, [r6, #0]
    8752:	b.n	86d4 <yield+0x1c>
    8754:	ldrb	r3, [r6, #0]
    8756:	and.w	r3, r3, #254	; 0xfe
    875a:	strb	r3, [r6, #0]
    875c:	b.n	86d0 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    875e:	movs	r6, #1
		firstYield = first->_next;
    8760:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    8762:	strb	r6, [r4, #0]
		firstYield = first->_next;
    8764:	str	r5, [r3, #0]
		if (firstYield) {
    8766:	cbz	r5, 8782 <yield+0xca>
			firstYield->_prev = nullptr;
    8768:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    876a:	cbnz	r0, 876e <yield+0xb6>
    876c:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    876e:	movs	r5, #0
		(*(first->_function))(*first);
    8770:	ldr	r3, [r2, #8]
    8772:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    8774:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    8776:	blx	r3
		runningFromYield = false;
    8778:	strb	r5, [r4, #0]
    877a:	b.n	86e8 <yield+0x30>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    877c:	bl	8c44 <serialEvent()>
    8780:	b.n	8746 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    8782:	ldr	r3, [pc, #24]	; (879c <yield+0xe4>)
    8784:	str	r5, [r3, #0]
    8786:	b.n	876a <yield+0xb2>
    8788:	.word	0x200021d7
    878c:	.word	0x200224b5
    8790:	.word	0x20021ba0
    8794:	.word	0x200224b3
    8798:	.word	0x60002694
    879c:	.word	0x20021bac
    87a0:	.word	0x200224b4
    87a4:	.word	0x20021bb0

000087a8 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    87a8:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    87aa:	mrs	r1, PRIMASK
		__disable_irq();
    87ae:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    87b0:	ldr	r4, [pc, #48]	; (87e4 <EventResponder::runFromInterrupt()+0x3c>)
    87b2:	ldr	r3, [r4, #0]
		if (first) {
    87b4:	cbz	r3, 87da <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    87b6:	ldr	r6, [pc, #48]	; (87e8 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    87b8:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    87ba:	ldr	r2, [r3, #20]
    87bc:	str	r2, [r4, #0]
			if (firstInterrupt) {
    87be:	cbz	r2, 87e0 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    87c0:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    87c2:	cbnz	r1, 87c6 <EventResponder::runFromInterrupt()+0x1e>
    87c4:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    87c6:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    87c8:	mov	r0, r3
    87ca:	ldr	r3, [r3, #8]
    87cc:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    87ce:	mrs	r1, PRIMASK
		__disable_irq();
    87d2:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    87d4:	ldr	r3, [r4, #0]
		if (first) {
    87d6:	cmp	r3, #0
    87d8:	bne.n	87ba <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    87da:	cbnz	r1, 87de <EventResponder::runFromInterrupt()+0x36>
    87dc:	cpsie	i
    87de:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    87e0:	str	r2, [r6, #0]
    87e2:	b.n	87c2 <EventResponder::runFromInterrupt()+0x1a>
    87e4:	.word	0x20021ba8
    87e8:	.word	0x20021ba4

000087ec <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    87ec:	b.w	87a8 <EventResponder::runFromInterrupt()>

000087f0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    87f0:	ldr	r2, [pc, #16]	; (8804 <systick_isr+0x14>)
    87f2:	ldr	r3, [pc, #20]	; (8808 <systick_isr+0x18>)
    87f4:	ldr	r1, [r2, #0]
	systick_millis_count++;
    87f6:	ldr	r2, [pc, #20]	; (880c <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    87f8:	str	r1, [r3, #0]
	systick_millis_count++;
    87fa:	ldr	r3, [r2, #0]
    87fc:	adds	r3, #1
    87fe:	str	r3, [r2, #0]
    8800:	bx	lr
    8802:	nop
    8804:	.word	0xe0001004
    8808:	.word	0x2002247c
    880c:	.word	0x20022480

00008810 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    8810:	push	{r4, r5, r6, r7}
	uint32_t ch = 0;

	__disable_irq();
    8812:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    8814:	cbnz	r1, 883a <DMAChannel::begin(bool)+0x2a>
    8816:	ldr	r2, [r0, #0]
    8818:	cbz	r2, 883a <DMAChannel::begin(bool)+0x2a>
    881a:	ldrb	r3, [r0, #4]
    881c:	cmp	r3, #15
    881e:	bhi.n	883a <DMAChannel::begin(bool)+0x2a>
	  && (dma_channel_allocated_mask & (1 << channel))
    8820:	ldr	r4, [pc, #124]	; (88a0 <DMAChannel::begin(bool)+0x90>)
    8822:	ldrh	r1, [r4, #0]
    8824:	asr.w	r5, r1, r3
    8828:	lsls	r5, r5, #31
    882a:	bpl.n	883e <DMAChannel::begin(bool)+0x2e>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    882c:	ldr	r5, [pc, #116]	; (88a4 <DMAChannel::begin(bool)+0x94>)
    882e:	add	r5, r3
    8830:	cmp.w	r2, r5, lsl #5
    8834:	bne.n	883e <DMAChannel::begin(bool)+0x2e>
		// DMA channel already allocated
		__enable_irq();
    8836:	cpsie	i
		return;
    8838:	b.n	8858 <DMAChannel::begin(bool)+0x48>
    883a:	ldr	r4, [pc, #100]	; (88a0 <DMAChannel::begin(bool)+0x90>)
    883c:	ldrh	r1, [r4, #0]
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    883e:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    8840:	asr.w	r2, r1, r3
    8844:	ands.w	r2, r2, #1
    8848:	beq.n	885c <DMAChannel::begin(bool)+0x4c>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    884a:	adds	r3, #1
    884c:	cmp	r3, #16
    884e:	bne.n	8840 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    8850:	cpsie	i
			TCD = (TCD_t *)0;
    8852:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    8854:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    8856:	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    8858:	pop	{r4, r5, r6, r7}
    885a:	bx	lr
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    885c:	movs	r5, #1
    885e:	lsls	r5, r3
    8860:	orrs	r1, r5
    8862:	strh	r1, [r4, #0]
			__enable_irq();
    8864:	cpsie	i
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    8866:	ldr	r6, [pc, #64]	; (88a8 <DMAChannel::begin(bool)+0x98>)
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    8868:	uxtb	r4, r3
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    886a:	ldr	r1, [pc, #56]	; (88a4 <DMAChannel::begin(bool)+0x94>)
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    886c:	movw	r7, #1154	; 0x482
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    8870:	strb	r4, [r0, #4]
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    8872:	add	r1, r3
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    8874:	ldr	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    8876:	lsls	r3, r1, #5
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    8878:	orr.w	r5, r5, #192	; 0xc0
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    887c:	ldr	r1, [pc, #44]	; (88ac <DMAChannel::begin(bool)+0x9c>)
			// attempts to use this object will hardfault
		}
	}
	channel = ch;

	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    887e:	str	r5, [r6, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    8880:	str	r7, [r1, #0]
	DMA_CERQ = ch;
    8882:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    8884:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    8886:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    8888:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    888a:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    888c:	str	r2, [r3, #0]
	*p++ = 0;
    888e:	str	r2, [r3, #4]
	*p++ = 0;
    8890:	str	r2, [r3, #8]
	*p++ = 0;
    8892:	str	r2, [r3, #12]
	*p++ = 0;
    8894:	str	r2, [r3, #16]
	*p++ = 0;
    8896:	str	r2, [r3, #20]
	*p++ = 0;
    8898:	str	r2, [r3, #24]
	*p++ = 0;
    889a:	str	r2, [r3, #28]
}
    889c:	pop	{r4, r5, r6, r7}
    889e:	bx	lr
    88a0:	.word	0x200224a2
    88a4:	.word	0x02007480
    88a8:	.word	0x400fc000
    88ac:	.word	0x400e8000

000088b0 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    88b0:	ldrb	r3, [r0, #4]
    88b2:	cmp	r3, #15
    88b4:	bhi.n	88d8 <DMAChannel::release()+0x28>
	DMA_CERQ = channel;
    88b6:	ldr	r2, [pc, #36]	; (88dc <DMAChannel::release()+0x2c>)
    88b8:	strb	r3, [r2, #26]
	__disable_irq();
    88ba:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    88bc:	ldr	r1, [pc, #32]	; (88e0 <DMAChannel::release()+0x30>)
    88be:	movs	r3, #1
    88c0:	ldrb	r2, [r0, #4]
    88c2:	lsl.w	r2, r3, r2
    88c6:	ldrh	r3, [r1, #0]
    88c8:	bic.w	r3, r3, r2
    88cc:	strh	r3, [r1, #0]
	__enable_irq();
    88ce:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    88d0:	movs	r2, #16
	TCD = (TCD_t *)0;
    88d2:	movs	r3, #0
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    88d4:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    88d6:	str	r3, [r0, #0]
    88d8:	bx	lr
    88da:	nop
    88dc:	.word	0x400e8000
    88e0:	.word	0x200224a2

000088e4 <Print::println(char const*)>:
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    88e4:	push	{r3, r4, r5, lr}
    88e6:	mov	r5, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    88e8:	mov	r4, r1
    88ea:	cbz	r1, 8900 <Print::println(char const*)+0x1c>
							  return write((const uint8_t *)str, strlen(str)); }
    88ec:	mov	r0, r1
    88ee:	bl	9e40 <strlen>
    88f2:	ldr	r3, [r5, #0]
    88f4:	mov	r2, r0
    88f6:	mov	r1, r4
    88f8:	ldr	r3, [r3, #4]
    88fa:	mov	r0, r5
    88fc:	blx	r3
    88fe:	mov	r4, r0
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    8900:	mov	r0, r5
    8902:	bl	89e4 <Print::println()>
    8906:	add	r0, r4
    8908:	pop	{r3, r4, r5, pc}
    890a:	nop

0000890c <Print::println(unsigned long, int)>:
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    890c:	push	{r3, r4, r5, lr}
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    890e:	uxtb	r2, r2
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    8910:	mov	r5, r0
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    8912:	movs	r3, #0
    8914:	bl	8a38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    8918:	mov	r4, r0
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    891a:	mov	r0, r5
    891c:	bl	89e4 <Print::println()>
    8920:	add	r0, r4
    8922:	pop	{r3, r4, r5, pc}

00008924 <usb_serial_class::clear()>:
	// returns early, when buffered data has been given to Teensy's USB device
	// controller, but before your PC's USB host controller actually transfers
	// the data across your USB cable.
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
    8924:	b.w	7078 <usb_serial_flush_input>

00008928 <usb_serial_class::peek()>:
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
	// Returns the next received byte, but does not remove it from the receive
	// buffer.  Returns -1 if nothing has been received from your PC.
        virtual int peek() { return usb_serial_peekchar(); }
    8928:	b.w	7020 <usb_serial_peekchar>

0000892c <usb_serial_class::read()>:
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
    892c:	b.w	70ec <usb_serial_getchar>

00008930 <usb_serial_class::available()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
    8930:	b.w	7064 <usb_serial_available>

00008934 <usb_serial_class::flush()>:
	// Wait for all data written by print() or write() to actually transmit to
	// your PC.  On Teensy 4, this function has a known limitation where it
	// returns early, when buffered data has been given to Teensy's USB device
	// controller, but before your PC's USB host controller actually transfers
	// the data across your USB cable.
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    8934:	b.w	71a0 <usb_serial_flush_output>

00008938 <usb_serial_class::availableForWrite()>:
	size_t write(int n) { return write((uint8_t)n); }
	// Returns the number of bytes which may be transmitted by write() or print()
	// without waiting.  Typically programs which must maintain rapid checking
	// and response to sensors use availableForWrite() to decide whether to
	// transmit.
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    8938:	b.w	7150 <usb_serial_write_buffer_free>

0000893c <usb_serial_class::write(unsigned char const*, unsigned int)>:
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    893c:	mov	r0, r1
    893e:	mov	r1, r2
    8940:	b.w	7138 <usb_serial_write>

00008944 <usb_serial_class::write(unsigned char)>:
	// the data across your USB cable.
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8944:	mov	r0, r1
    8946:	b.w	710c <usb_serial_putchar>
    894a:	nop

0000894c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    894c:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    894e:	bl	1d4c <setup>
	while (1) {
		loop();
    8952:	bl	1a98 <loop>
		yield();
    8956:	bl	86b8 <yield>
    895a:	b.n	8952 <main+0x6>

0000895c <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    895c:	push	{r4, r5, r6, lr}
    895e:	ldr	r5, [pc, #40]	; (8988 <Stream::timedRead()+0x2c>)
    8960:	mov	r4, r0
    8962:	ldr	r6, [r5, #0]
    8964:	b.n	8974 <Stream::timedRead()+0x18>
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    if (c >= 0) return c;
    yield();
    8966:	bl	86b8 <yield>
    896a:	ldr	r3, [r5, #0]
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  unsigned long startMillis = millis();
  do {
    896c:	ldr	r2, [r4, #8]
    896e:	subs	r3, r3, r6
    8970:	cmp	r3, r2
    8972:	bcs.n	8982 <Stream::timedRead()+0x26>
    c = read();
    8974:	ldr	r3, [r4, #0]
    8976:	mov	r0, r4
    8978:	ldr	r3, [r3, #20]
    897a:	blx	r3
    if (c >= 0) return c;
    897c:	cmp	r0, #0
    897e:	blt.n	8966 <Stream::timedRead()+0xa>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    8980:	pop	{r4, r5, r6, pc}
  do {
    c = read();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    8982:	mov.w	r0, #4294967295
}
    8986:	pop	{r4, r5, r6, pc}
    8988:	.word	0x20022480

0000898c <Stream::readBytesUntil(char, char*, unsigned int)>:
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    898c:	cbz	r3, 89c8 <Stream::readBytesUntil(char, char*, unsigned int)+0x3c>
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    898e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    8992:	clz	r4, r2
    8996:	mov	r5, r2
    8998:	lsrs	r4, r4, #5
    899a:	cbnz	r4, 89cc <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
	length--;
	size_t index = 0;
	while (index < length) {
    899c:	subs	r6, r3, #1
    899e:	mov	r7, r0
    89a0:	mov	r8, r1
    89a2:	bne.n	89b4 <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    89a4:	b.n	89e0 <Stream::readBytesUntil(char, char*, unsigned int)+0x54>
		int c = timedRead();
		if (c == terminator) break;
		if (c < 0) {
    89a6:	cmp	r0, #0
    89a8:	blt.n	89d2 <Stream::readBytesUntil(char, char*, unsigned int)+0x46>
			setReadError();
			break;
		}
		*buffer++ = (char)c;
		index++;
    89aa:	adds	r4, #1
		if (c == terminator) break;
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    89ac:	strb.w	r0, [r5], #1
{
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
	length--;
	size_t index = 0;
	while (index < length) {
    89b0:	cmp	r6, r4
    89b2:	beq.n	89be <Stream::readBytesUntil(char, char*, unsigned int)+0x32>
		int c = timedRead();
    89b4:	mov	r0, r7
    89b6:	bl	895c <Stream::timedRead()>
		if (c == terminator) break;
    89ba:	cmp	r8, r0
    89bc:	bne.n	89a6 <Stream::readBytesUntil(char, char*, unsigned int)+0x1a>
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    89be:	movs	r3, #0
	return index; // return number of characters, not including null terminator
    89c0:	mov	r0, r4
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    89c2:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
    89c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    89c8:	movs	r0, #0
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
	return index; // return number of characters, not including null terminator
}
    89ca:	bx	lr
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    89cc:	movs	r0, #0
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
	return index; // return number of characters, not including null terminator
}
    89ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    89d2:	movs	r3, #1
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
	return index; // return number of characters, not including null terminator
    89d4:	mov	r0, r4
    89d6:	strb	r3, [r7, #12]
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    89d8:	movs	r3, #0
    89da:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
    89dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
	length--;
	size_t index = 0;
    89e0:	mov	r4, r6
    89e2:	b.n	89be <Stream::readBytesUntil(char, char*, unsigned int)+0x32>

000089e4 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    89e4:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    89e6:	ldr	r4, [pc, #24]	; (8a00 <Print::println()+0x1c>)
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    89e8:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    89ea:	ldr	r3, [r0, #0]
    89ec:	movs	r2, #2
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    89ee:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    89f0:	add	r1, sp, #4
    89f2:	ldr	r3, [r3, #4]
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    89f4:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    89f8:	blx	r3
}
    89fa:	add	sp, #8
    89fc:	pop	{r4, pc}
    89fe:	nop
    8a00:	.word	0x20000398

00008a04 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	if (file >= 0 && file <= 2) file = (int)&Serial;
    8a04:	ldr	r3, [pc, #12]	; (8a14 <_write+0x10>)
    8a06:	cmp	r0, #2
    8a08:	it	ls
    8a0a:	movls	r0, r3
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    8a0c:	ldr	r3, [r0, #0]
    8a0e:	ldr	r3, [r3, #4]
    8a10:	bx	r3
    8a12:	nop
    8a14:	.word	0x20001bc8

00008a18 <Print::printf(char const*, ...)>:
}
}

int Print::printf(const char *format, ...)
{
    8a18:	push	{r1, r2, r3}
    8a1a:	push	{lr}
    8a1c:	sub	sp, #8
    8a1e:	add	r3, sp, #12
    8a20:	ldr.w	r1, [r3], #4
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    8a24:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    8a26:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    8a28:	bl	d418 <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    8a2c:	add	sp, #8
    8a2e:	ldr.w	lr, [sp], #4
    8a32:	add	sp, #12
    8a34:	bx	lr
    8a36:	nop

00008a38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return retval;
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    8a38:	push	{r4, r5, r6, r7, lr}
    8a3a:	mov	r6, r0
    8a3c:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    8a3e:	cmp	r2, #0
    8a40:	beq.n	8aaa <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    8a42:	cmp	r2, #1
    8a44:	it	eq
    8a46:	moveq	r2, #10
	}


	if (n == 0) {
    8a48:	cbz	r1, 8aa0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    8a4a:	movs	r5, #33	; 0x21
    8a4c:	b.n	8a50 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    8a4e:	uxtb	r5, r7
    8a50:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    8a52:	udiv	r4, r1, r2
    8a56:	mls	r1, r2, r4, r1
    8a5a:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8a5c:	cmp	r1, #9
    8a5e:	add.w	r1, r0, #55	; 0x37
    8a62:	add.w	r0, r0, #48	; 0x30
    8a66:	it	hi
    8a68:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    8a6a:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8a6c:	add	r4, sp, #40	; 0x28
    8a6e:	it	ls
    8a70:	uxtbls	r0, r0
    8a72:	add	r4, r5
    8a74:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    8a78:	cmp	r1, #0
    8a7a:	bne.n	8a4e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    8a7c:	cbz	r3, 8a8c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    8a7e:	subs	r5, #1
		buf[i] = '-';
    8a80:	add	r3, sp, #40	; 0x28
    8a82:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    8a84:	uxtb	r5, r5
		buf[i] = '-';
    8a86:	add	r3, r5
    8a88:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    8a8c:	ldr	r3, [r6, #0]
    8a8e:	add	r1, sp, #4
    8a90:	rsb	r2, r5, #34	; 0x22
    8a94:	mov	r0, r6
    8a96:	add	r1, r5
    8a98:	ldr	r3, [r3, #4]
    8a9a:	blx	r3
}
    8a9c:	add	sp, #44	; 0x2c
    8a9e:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    8aa0:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    8aa2:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    8aa4:	strb.w	r2, [sp, #37]	; 0x25
    8aa8:	b.n	8a7c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    8aaa:	ldr	r3, [r0, #0]
    8aac:	uxtb	r1, r1
    8aae:	ldr	r3, [r3, #0]
    8ab0:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    8ab2:	add	sp, #44	; 0x2c
    8ab4:	pop	{r4, r5, r6, r7, pc}
    8ab6:	nop

00008ab8 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    8ab8:	cmp	r1, #0
    8aba:	blt.n	8ac4 <Print::print(long)+0xc>
	return count;
}

size_t Print::print(long n)
{
	uint8_t sign=0;
    8abc:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    8abe:	movs	r2, #10
    8ac0:	b.w	8a38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    8ac4:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    8ac6:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    8ac8:	movs	r2, #10
    8aca:	b.w	8a38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    8ace:	nop

00008ad0 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    8ad0:	vcmp.f64	d0, d0
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    8ad4:	push	{r4, r5, r6, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    8ad6:	vmrs	APSR_nzcv, fpscr
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    8ada:	mov	r5, r0
    8adc:	vpush	{d8}
    8ae0:	sub	sp, #24
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    8ae2:	bvs.w	8c08 <Print::printFloat(double, unsigned char)+0x138>
    	if (isinf(number)) return print("inf");
    8ae6:	vabs.f64	d7, d0
    8aea:	vldr	d6, [pc, #300]	; 8c18 <Print::printFloat(double, unsigned char)+0x148>
    8aee:	vcmp.f64	d7, d6
    8af2:	vmrs	APSR_nzcv, fpscr
    8af6:	ble.n	8b0e <Print::printFloat(double, unsigned char)+0x3e>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
    8af8:	ldr	r3, [r0, #0]
    8afa:	movs	r2, #3
    8afc:	ldr	r1, [pc, #312]	; (8c38 <Print::printFloat(double, unsigned char)+0x168>)
    8afe:	ldr	r3, [r3, #4]
    8b00:	blx	r3
    8b02:	mov	r6, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    8b04:	mov	r0, r6
    8b06:	add	sp, #24
    8b08:	vpop	{d8}
    8b0c:	pop	{r4, r5, r6, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    8b0e:	vldr	d7, [pc, #272]	; 8c20 <Print::printFloat(double, unsigned char)+0x150>
    8b12:	vcmpe.f64	d0, d7
    8b16:	vmrs	APSR_nzcv, fpscr
    8b1a:	bgt.n	8bce <Print::printFloat(double, unsigned char)+0xfe>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    8b1c:	vldr	d7, [pc, #264]	; 8c28 <Print::printFloat(double, unsigned char)+0x158>
    8b20:	vcmpe.f64	d0, d7
    8b24:	vmrs	APSR_nzcv, fpscr
    8b28:	bmi.n	8bce <Print::printFloat(double, unsigned char)+0xfe>
	
	// Handle negative numbers
	if (number < 0.0) {
    8b2a:	vcmpe.f64	d0, #0.0
    8b2e:	mov	r4, r1
    8b30:	vmrs	APSR_nzcv, fpscr
    8b34:	bmi.n	8be4 <Print::printFloat(double, unsigned char)+0x114>
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    8b36:	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    8b38:	cmp	r4, #0
    8b3a:	beq.n	8bec <Print::printFloat(double, unsigned char)+0x11c>
    8b3c:	vmov.f64	d8, #96	; 0x3f000000  0.5
    8b40:	movs	r2, #0
		rounding *= 0.1;
    8b42:	vldr	d7, [pc, #236]	; 8c30 <Print::printFloat(double, unsigned char)+0x160>
    8b46:	adds	r2, #1
    8b48:	vmul.f64	d8, d8, d7
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    8b4c:	uxtb	r1, r2
    8b4e:	cmp	r4, r1
    8b50:	bhi.n	8b46 <Print::printFloat(double, unsigned char)+0x76>
		rounding *= 0.1;
	}
	number += rounding;
    8b52:	vadd.f64	d0, d0, d8

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    8b56:	movs	r2, #10
    8b58:	mov	r0, r5
		rounding *= 0.1;
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    8b5a:	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    8b5e:	vcvt.f64.u32	d8, s15
	count += printNumber(int_part, 10, sign);
    8b62:	vmov	r1, s15
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    8b66:	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    8b6a:	bl	8a38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    8b6e:	cmp	r4, #15

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    8b70:	mov.w	r2, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    8b74:	vmov.f64	d7, #36	; 0x41200000  10.0
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    8b78:	mov.w	r3, #46	; 0x2e
    8b7c:	it	cs
    8b7e:	movcs	r4, #15
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    8b80:	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    8b82:	strb.w	r3, [sp, #8]
    8b86:	add	r4, r2
    8b88:	uxtb	r4, r4

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    8b8a:	vmul.f64	d0, d8, d7
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    8b8e:	adds	r3, r2, #1
    8b90:	add	r1, sp, #24
    8b92:	add	r1, r2
    8b94:	uxtb	r2, r3
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    8b96:	cmp	r2, r4
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    8b98:	vcvt.u32.f64	s13, d0
    8b9c:	vstr	s13, [sp, #4]
    8ba0:	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    8ba4:	vmov	s13, r3
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    8ba8:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    8bac:	vcvt.f64.s32	d8, s13
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    8bb0:	strb.w	r3, [r1, #-16]
			remainder -= n; 
    8bb4:	vsub.f64	d8, d0, d8
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    8bb8:	bne.n	8b8a <Print::printFloat(double, unsigned char)+0xba>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    8bba:	ldr	r3, [r5, #0]
    8bbc:	mov	r0, r5
    8bbe:	add	r1, sp, #8
    8bc0:	ldr	r3, [r3, #4]
    8bc2:	blx	r3
	}
	return count;
}
    8bc4:	mov	r0, r6
    8bc6:	add	sp, #24
    8bc8:	vpop	{d8}
    8bcc:	pop	{r4, r5, r6, pc}
    8bce:	ldr	r3, [r5, #0]
    8bd0:	movs	r2, #3
    8bd2:	ldr	r1, [pc, #104]	; (8c3c <Print::printFloat(double, unsigned char)+0x16c>)
    8bd4:	ldr	r3, [r3, #4]
    8bd6:	blx	r3
    8bd8:	mov	r6, r0
    8bda:	mov	r0, r6
    8bdc:	add	sp, #24
    8bde:	vpop	{d8}
    8be2:	pop	{r4, r5, r6, pc}
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    8be4:	vneg.f64	d0, d0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    8be8:	movs	r3, #1
    8bea:	b.n	8b38 <Print::printFloat(double, unsigned char)+0x68>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    8bec:	vmov.f64	d7, #96	; 0x3f000000  0.5
    8bf0:	mov	r0, r5
    8bf2:	movs	r2, #10
    8bf4:	vadd.f64	d0, d0, d7
    8bf8:	vcvt.u32.f64	s15, d0
    8bfc:	vmov	r1, s15
    8c00:	bl	8a38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    8c04:	mov	r6, r0
    8c06:	b.n	8b04 <Print::printFloat(double, unsigned char)+0x34>
    8c08:	ldr	r3, [r0, #0]
    8c0a:	movs	r2, #3
    8c0c:	ldr	r1, [pc, #48]	; (8c40 <Print::printFloat(double, unsigned char)+0x170>)
    8c0e:	ldr	r3, [r3, #4]
    8c10:	blx	r3
    8c12:	mov	r6, r0
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    8c14:	b.n	8b04 <Print::printFloat(double, unsigned char)+0x34>
    8c16:	nop
    8c18:	.word	0xffffffff
    8c1c:	.word	0x7fefffff
    8c20:	.word	0xe0000000
    8c24:	.word	0x41efffff
    8c28:	.word	0xe0000000
    8c2c:	.word	0xc1efffff
    8c30:	.word	0xa0000000
    8c34:	.word	0x3fb99999
    8c38:	.word	0x20001688
    8c3c:	.word	0x20001684
    8c40:	.word	0x20001680

00008c44 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    8c44:	bx	lr
    8c46:	nop

00008c48 <operator delete(void*, unsigned int)>:
    8c48:	b.w	9088 <free>

00008c4c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    8c4c:	push	{r4, r5, r6, r7}
    8c4e:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    8c50:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    8c52:	mov	r7, r6
    8c54:	b.n	8c58 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    8c56:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    8c58:	udiv	r3, r0, r2
    8c5c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8c60:	add.w	r4, r0, #55	; 0x37
    8c64:	cmp	r0, #9
    8c66:	add.w	r0, r0, #48	; 0x30
    8c6a:	uxtb	r4, r4
    8c6c:	it	ls
    8c6e:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    8c70:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8c72:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    8c76:	cmp	r3, #0
    8c78:	bne.n	8c56 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    8c7a:	adds	r2, r1, r5
    8c7c:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    8c7e:	cbz	r5, 8c94 <ultoa+0x48>
    8c80:	adds	r3, #1
		t = buf[j];
    8c82:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    8c86:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    8c88:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    8c8a:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    8c8c:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    8c8e:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    8c92:	blt.n	8c80 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    8c94:	mov	r0, r1
    8c96:	pop	{r4, r5, r6, r7}
    8c98:	bx	lr
    8c9a:	nop

00008c9c <__aeabi_atexit>:
    8c9c:	mov	r3, r1
    8c9e:	mov	r1, r0
    8ca0:	mov	r0, r3
    8ca2:	b.w	8fc0 <__cxa_atexit>
    8ca6:	nop

00008ca8 <__aeabi_uldivmod>:
    8ca8:	cbnz	r3, 8cc0 <__aeabi_uldivmod+0x18>
    8caa:	cbnz	r2, 8cc0 <__aeabi_uldivmod+0x18>
    8cac:	cmp	r1, #0
    8cae:	it	eq
    8cb0:	cmpeq	r0, #0
    8cb2:	itt	ne
    8cb4:	movne.w	r1, #4294967295
    8cb8:	movne.w	r0, #4294967295
    8cbc:	b.w	8fbc <__aeabi_idiv0>
    8cc0:	sub.w	ip, sp, #8
    8cc4:	strd	ip, lr, [sp, #-16]!
    8cc8:	bl	8cd8 <__udivmoddi4>
    8ccc:	ldr.w	lr, [sp, #4]
    8cd0:	ldrd	r2, r3, [sp, #8]
    8cd4:	add	sp, #16
    8cd6:	bx	lr

00008cd8 <__udivmoddi4>:
    8cd8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8cdc:	mov	ip, r1
    8cde:	mov	r6, r1
    8ce0:	mov	r4, r0
    8ce2:	ldr	r5, [sp, #32]
    8ce4:	cmp	r3, #0
    8ce6:	bne.n	8d8a <__udivmoddi4+0xb2>
    8ce8:	cmp	r2, r1
    8cea:	mov	r7, r2
    8cec:	bls.n	8dc8 <__udivmoddi4+0xf0>
    8cee:	clz	lr, r2
    8cf2:	cmp.w	lr, #0
    8cf6:	beq.n	8d10 <__udivmoddi4+0x38>
    8cf8:	rsb	r4, lr, #32
    8cfc:	lsr.w	r4, r0, r4
    8d00:	lsl.w	r6, r1, lr
    8d04:	orr.w	ip, r4, r6
    8d08:	lsl.w	r7, r2, lr
    8d0c:	lsl.w	r4, r0, lr
    8d10:	mov.w	r9, r7, lsr #16
    8d14:	lsrs	r2, r4, #16
    8d16:	udiv	r0, ip, r9
    8d1a:	uxth.w	r8, r7
    8d1e:	mls	r6, r9, r0, ip
    8d22:	orr.w	r6, r2, r6, lsl #16
    8d26:	mul.w	r3, r0, r8
    8d2a:	cmp	r3, r6
    8d2c:	bls.n	8d42 <__udivmoddi4+0x6a>
    8d2e:	adds	r6, r6, r7
    8d30:	add.w	r2, r0, #4294967295
    8d34:	bcs.w	8f7c <__udivmoddi4+0x2a4>
    8d38:	cmp	r3, r6
    8d3a:	bls.w	8f7c <__udivmoddi4+0x2a4>
    8d3e:	subs	r0, #2
    8d40:	add	r6, r7
    8d42:	subs	r6, r6, r3
    8d44:	uxth	r2, r4
    8d46:	udiv	r3, r6, r9
    8d4a:	mls	r6, r9, r3, r6
    8d4e:	orr.w	r4, r2, r6, lsl #16
    8d52:	mul.w	r8, r3, r8
    8d56:	cmp	r8, r4
    8d58:	bls.n	8d6e <__udivmoddi4+0x96>
    8d5a:	adds	r4, r4, r7
    8d5c:	add.w	r2, r3, #4294967295
    8d60:	bcs.w	8f78 <__udivmoddi4+0x2a0>
    8d64:	cmp	r8, r4
    8d66:	bls.w	8f78 <__udivmoddi4+0x2a0>
    8d6a:	subs	r3, #2
    8d6c:	add	r4, r7
    8d6e:	rsb	r4, r8, r4
    8d72:	orr.w	r0, r3, r0, lsl #16
    8d76:	movs	r1, #0
    8d78:	cmp	r5, #0
    8d7a:	beq.n	8e42 <__udivmoddi4+0x16a>
    8d7c:	lsr.w	r4, r4, lr
    8d80:	movs	r3, #0
    8d82:	str	r4, [r5, #0]
    8d84:	str	r3, [r5, #4]
    8d86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8d8a:	cmp	r3, r1
    8d8c:	bls.n	8d9e <__udivmoddi4+0xc6>
    8d8e:	cmp	r5, #0
    8d90:	beq.n	8e3e <__udivmoddi4+0x166>
    8d92:	movs	r1, #0
    8d94:	stmia.w	r5, {r0, r6}
    8d98:	mov	r0, r1
    8d9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8d9e:	clz	r1, r3
    8da2:	cmp	r1, #0
    8da4:	bne.w	8ec8 <__udivmoddi4+0x1f0>
    8da8:	cmp	r3, r6
    8daa:	bcc.n	8db2 <__udivmoddi4+0xda>
    8dac:	cmp	r2, r0
    8dae:	bhi.w	8fa2 <__udivmoddi4+0x2ca>
    8db2:	subs	r4, r0, r2
    8db4:	sbc.w	r6, r6, r3
    8db8:	movs	r0, #1
    8dba:	mov	ip, r6
    8dbc:	cmp	r5, #0
    8dbe:	beq.n	8e42 <__udivmoddi4+0x16a>
    8dc0:	stmia.w	r5, {r4, ip}
    8dc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8dc8:	cbnz	r2, 8dd0 <__udivmoddi4+0xf8>
    8dca:	movs	r7, #1
    8dcc:	udiv	r7, r7, r2
    8dd0:	clz	lr, r7
    8dd4:	cmp.w	lr, #0
    8dd8:	bne.n	8e46 <__udivmoddi4+0x16e>
    8dda:	subs	r3, r6, r7
    8ddc:	mov.w	r8, r7, lsr #16
    8de0:	uxth.w	ip, r7
    8de4:	movs	r1, #1
    8de6:	udiv	r0, r3, r8
    8dea:	lsrs	r2, r4, #16
    8dec:	mls	r6, r8, r0, r3
    8df0:	orr.w	r6, r2, r6, lsl #16
    8df4:	mul.w	r3, ip, r0
    8df8:	cmp	r3, r6
    8dfa:	bls.n	8e0c <__udivmoddi4+0x134>
    8dfc:	adds	r6, r6, r7
    8dfe:	add.w	r2, r0, #4294967295
    8e02:	bcs.n	8e0a <__udivmoddi4+0x132>
    8e04:	cmp	r3, r6
    8e06:	bhi.w	8fa6 <__udivmoddi4+0x2ce>
    8e0a:	mov	r0, r2
    8e0c:	subs	r6, r6, r3
    8e0e:	uxth	r2, r4
    8e10:	udiv	r3, r6, r8
    8e14:	mls	r6, r8, r3, r6
    8e18:	orr.w	r4, r2, r6, lsl #16
    8e1c:	mul.w	ip, ip, r3
    8e20:	cmp	ip, r4
    8e22:	bls.n	8e34 <__udivmoddi4+0x15c>
    8e24:	adds	r4, r4, r7
    8e26:	add.w	r2, r3, #4294967295
    8e2a:	bcs.n	8e32 <__udivmoddi4+0x15a>
    8e2c:	cmp	ip, r4
    8e2e:	bhi.w	8f9c <__udivmoddi4+0x2c4>
    8e32:	mov	r3, r2
    8e34:	rsb	r4, ip, r4
    8e38:	orr.w	r0, r3, r0, lsl #16
    8e3c:	b.n	8d78 <__udivmoddi4+0xa0>
    8e3e:	mov	r1, r5
    8e40:	mov	r0, r5
    8e42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8e46:	rsb	r1, lr, #32
    8e4a:	lsl.w	r3, r6, lr
    8e4e:	lsl.w	r7, r7, lr
    8e52:	lsr.w	r9, r0, r1
    8e56:	mov.w	r8, r7, lsr #16
    8e5a:	lsrs	r6, r1
    8e5c:	orr.w	r9, r9, r3
    8e60:	udiv	sl, r6, r8
    8e64:	mov.w	r4, r9, lsr #16
    8e68:	mls	r6, r8, sl, r6
    8e6c:	uxth.w	ip, r7
    8e70:	orr.w	r3, r4, r6, lsl #16
    8e74:	mul.w	r2, sl, ip
    8e78:	cmp	r2, r3
    8e7a:	lsl.w	r4, r0, lr
    8e7e:	bls.n	8e96 <__udivmoddi4+0x1be>
    8e80:	adds	r3, r3, r7
    8e82:	add.w	r1, sl, #4294967295
    8e86:	bcs.w	8f98 <__udivmoddi4+0x2c0>
    8e8a:	cmp	r2, r3
    8e8c:	bls.w	8f98 <__udivmoddi4+0x2c0>
    8e90:	sub.w	sl, sl, #2
    8e94:	add	r3, r7
    8e96:	subs	r3, r3, r2
    8e98:	uxth.w	r9, r9
    8e9c:	udiv	r1, r3, r8
    8ea0:	mls	r3, r8, r1, r3
    8ea4:	orr.w	r3, r9, r3, lsl #16
    8ea8:	mul.w	r6, r1, ip
    8eac:	cmp	r6, r3
    8eae:	bls.n	8ec0 <__udivmoddi4+0x1e8>
    8eb0:	adds	r3, r3, r7
    8eb2:	add.w	r2, r1, #4294967295
    8eb6:	bcs.n	8f90 <__udivmoddi4+0x2b8>
    8eb8:	cmp	r6, r3
    8eba:	bls.n	8f90 <__udivmoddi4+0x2b8>
    8ebc:	subs	r1, #2
    8ebe:	add	r3, r7
    8ec0:	subs	r3, r3, r6
    8ec2:	orr.w	r1, r1, sl, lsl #16
    8ec6:	b.n	8de6 <__udivmoddi4+0x10e>
    8ec8:	rsb	lr, r1, #32
    8ecc:	lsr.w	r4, r2, lr
    8ed0:	lsls	r3, r1
    8ed2:	orrs	r3, r4
    8ed4:	lsr.w	r7, r0, lr
    8ed8:	lsl.w	r4, r6, r1
    8edc:	mov.w	ip, r3, lsr #16
    8ee0:	lsr.w	r6, r6, lr
    8ee4:	orrs	r4, r7
    8ee6:	udiv	r9, r6, ip
    8eea:	lsrs	r7, r4, #16
    8eec:	mls	r6, ip, r9, r6
    8ef0:	uxth.w	r8, r3
    8ef4:	orr.w	r6, r7, r6, lsl #16
    8ef8:	mul.w	r7, r9, r8
    8efc:	cmp	r7, r6
    8efe:	lsl.w	r2, r2, r1
    8f02:	lsl.w	sl, r0, r1
    8f06:	bls.n	8f1a <__udivmoddi4+0x242>
    8f08:	adds	r6, r6, r3
    8f0a:	add.w	r0, r9, #4294967295
    8f0e:	bcs.n	8f94 <__udivmoddi4+0x2bc>
    8f10:	cmp	r7, r6
    8f12:	bls.n	8f94 <__udivmoddi4+0x2bc>
    8f14:	sub.w	r9, r9, #2
    8f18:	add	r6, r3
    8f1a:	subs	r6, r6, r7
    8f1c:	uxth	r0, r4
    8f1e:	udiv	r4, r6, ip
    8f22:	mls	r6, ip, r4, r6
    8f26:	orr.w	r7, r0, r6, lsl #16
    8f2a:	mul.w	r8, r4, r8
    8f2e:	cmp	r8, r7
    8f30:	bls.n	8f42 <__udivmoddi4+0x26a>
    8f32:	adds	r7, r7, r3
    8f34:	add.w	r0, r4, #4294967295
    8f38:	bcs.n	8f8c <__udivmoddi4+0x2b4>
    8f3a:	cmp	r8, r7
    8f3c:	bls.n	8f8c <__udivmoddi4+0x2b4>
    8f3e:	subs	r4, #2
    8f40:	add	r7, r3
    8f42:	orr.w	r0, r4, r9, lsl #16
    8f46:	rsb	r7, r8, r7
    8f4a:	umull	r8, r9, r0, r2
    8f4e:	cmp	r7, r9
    8f50:	mov	r4, r8
    8f52:	mov	r6, r9
    8f54:	bcc.n	8f80 <__udivmoddi4+0x2a8>
    8f56:	beq.n	8fac <__udivmoddi4+0x2d4>
    8f58:	cbz	r5, 8fb4 <__udivmoddi4+0x2dc>
    8f5a:	subs.w	r3, sl, r4
    8f5e:	sbc.w	r7, r7, r6
    8f62:	lsl.w	lr, r7, lr
    8f66:	lsrs	r3, r1
    8f68:	lsrs	r7, r1
    8f6a:	orr.w	r3, lr, r3
    8f6e:	stmia.w	r5, {r3, r7}
    8f72:	movs	r1, #0
    8f74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8f78:	mov	r3, r2
    8f7a:	b.n	8d6e <__udivmoddi4+0x96>
    8f7c:	mov	r0, r2
    8f7e:	b.n	8d42 <__udivmoddi4+0x6a>
    8f80:	subs.w	r4, r8, r2
    8f84:	sbc.w	r6, r9, r3
    8f88:	subs	r0, #1
    8f8a:	b.n	8f58 <__udivmoddi4+0x280>
    8f8c:	mov	r4, r0
    8f8e:	b.n	8f42 <__udivmoddi4+0x26a>
    8f90:	mov	r1, r2
    8f92:	b.n	8ec0 <__udivmoddi4+0x1e8>
    8f94:	mov	r9, r0
    8f96:	b.n	8f1a <__udivmoddi4+0x242>
    8f98:	mov	sl, r1
    8f9a:	b.n	8e96 <__udivmoddi4+0x1be>
    8f9c:	subs	r3, #2
    8f9e:	add	r4, r7
    8fa0:	b.n	8e34 <__udivmoddi4+0x15c>
    8fa2:	mov	r0, r1
    8fa4:	b.n	8dbc <__udivmoddi4+0xe4>
    8fa6:	subs	r0, #2
    8fa8:	add	r6, r7
    8faa:	b.n	8e0c <__udivmoddi4+0x134>
    8fac:	cmp	sl, r8
    8fae:	bcc.n	8f80 <__udivmoddi4+0x2a8>
    8fb0:	mov	r6, r7
    8fb2:	b.n	8f58 <__udivmoddi4+0x280>
    8fb4:	mov	r1, r5
    8fb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8fba:	nop

00008fbc <__aeabi_idiv0>:
    8fbc:	bx	lr
    8fbe:	nop

00008fc0 <__cxa_atexit>:
    8fc0:	mov	r3, r2
    8fc2:	mov	r2, r1
    8fc4:	mov	r1, r0
    8fc6:	movs	r0, #2
    8fc8:	b.w	d478 <__register_exitproc>

00008fcc <__errno>:
    8fcc:	ldr	r3, [pc, #4]	; (8fd4 <__errno+0x8>)
    8fce:	ldr	r0, [r3, #0]
    8fd0:	bx	lr
    8fd2:	nop
    8fd4:	.word	0x2000215c

00008fd8 <__libc_init_array>:
    8fd8:	push	{r4, r5, r6, lr}
    8fda:	ldr	r6, [pc, #60]	; (9018 <__libc_init_array+0x40>)
    8fdc:	ldr	r5, [pc, #60]	; (901c <__libc_init_array+0x44>)
    8fde:	subs	r6, r6, r5
    8fe0:	asrs	r6, r6, #2
    8fe2:	it	ne
    8fe4:	movne	r4, #0
    8fe6:	beq.n	8ff4 <__libc_init_array+0x1c>
    8fe8:	adds	r4, #1
    8fea:	ldr.w	r3, [r5], #4
    8fee:	blx	r3
    8ff0:	cmp	r6, r4
    8ff2:	bne.n	8fe8 <__libc_init_array+0x10>
    8ff4:	ldr	r6, [pc, #40]	; (9020 <__libc_init_array+0x48>)
    8ff6:	ldr	r5, [pc, #44]	; (9024 <__libc_init_array+0x4c>)
    8ff8:	subs	r6, r6, r5
    8ffa:	bl	ff98 <___init_veneer>
    8ffe:	asrs	r6, r6, #2
    9000:	it	ne
    9002:	movne	r4, #0
    9004:	beq.n	9014 <__libc_init_array+0x3c>
    9006:	adds	r4, #1
    9008:	ldr.w	r3, [r5], #4
    900c:	blx	r3
    900e:	cmp	r6, r4
    9010:	bne.n	9006 <__libc_init_array+0x2e>
    9012:	pop	{r4, r5, r6, pc}
    9014:	pop	{r4, r5, r6, pc}
    9016:	nop
    9018:	.word	0x60002580
    901c:	.word	0x60002580
    9020:	.word	0x6000258c
    9024:	.word	0x60002580

00009028 <__get_current_locale>:
    9028:	ldr	r2, [pc, #12]	; (9038 <__get_current_locale+0x10>)
    902a:	ldr	r3, [pc, #16]	; (903c <__get_current_locale+0x14>)
    902c:	ldr	r2, [r2, #0]
    902e:	ldr	r0, [r2, #52]	; 0x34
    9030:	cmp	r0, #0
    9032:	it	eq
    9034:	moveq	r0, r3
    9036:	bx	lr
    9038:	.word	0x2000215c
    903c:	.word	0x20001be0

00009040 <__locale_mb_cur_max>:
    9040:	ldr	r3, [pc, #16]	; (9054 <__locale_mb_cur_max+0x14>)
    9042:	ldr	r2, [pc, #20]	; (9058 <__locale_mb_cur_max+0x18>)
    9044:	ldr	r3, [r3, #0]
    9046:	ldr	r3, [r3, #52]	; 0x34
    9048:	cmp	r3, #0
    904a:	it	eq
    904c:	moveq	r3, r2
    904e:	ldrb.w	r0, [r3, #296]	; 0x128
    9052:	bx	lr
    9054:	.word	0x2000215c
    9058:	.word	0x20001be0

0000905c <__locale_ctype_ptr_l>:
    905c:	ldr.w	r0, [r0, #236]	; 0xec
    9060:	bx	lr
    9062:	nop

00009064 <__locale_ctype_ptr>:
    9064:	push	{r3, lr}
    9066:	ldr	r3, [pc, #12]	; (9074 <__locale_ctype_ptr+0x10>)
    9068:	ldr	r0, [r3, #0]
    906a:	bl	9028 <__get_current_locale>
    906e:	ldr.w	r0, [r0, #236]	; 0xec
    9072:	pop	{r3, pc}
    9074:	.word	0x2000215c

00009078 <malloc>:
    9078:	ldr	r3, [pc, #8]	; (9084 <malloc+0xc>)
    907a:	mov	r1, r0
    907c:	ldr	r0, [r3, #0]
    907e:	b.w	9098 <_malloc_r>
    9082:	nop
    9084:	.word	0x2000215c

00009088 <free>:
    9088:	ldr	r3, [pc, #8]	; (9094 <free+0xc>)
    908a:	mov	r1, r0
    908c:	ldr	r0, [r3, #0]
    908e:	b.w	e368 <_free_r>
    9092:	nop
    9094:	.word	0x2000215c

00009098 <_malloc_r>:
    9098:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    909c:	add.w	r5, r1, #11
    90a0:	cmp	r5, #22
    90a2:	sub	sp, #12
    90a4:	mov	r6, r0
    90a6:	bls.w	91e8 <_malloc_r+0x150>
    90aa:	bics.w	r5, r5, #7
    90ae:	bmi.w	9230 <_malloc_r+0x198>
    90b2:	cmp	r1, r5
    90b4:	bhi.w	9230 <_malloc_r+0x198>
    90b8:	bl	98a8 <__malloc_lock>
    90bc:	cmp.w	r5, #504	; 0x1f8
    90c0:	bcc.w	95fc <_malloc_r+0x564>
    90c4:	lsrs	r3, r5, #9
    90c6:	beq.w	923e <_malloc_r+0x1a6>
    90ca:	cmp	r3, #4
    90cc:	bhi.w	93d6 <_malloc_r+0x33e>
    90d0:	lsrs	r0, r5, #6
    90d2:	add.w	lr, r0, #57	; 0x39
    90d6:	mov.w	r3, lr, lsl #1
    90da:	adds	r0, #56	; 0x38
    90dc:	ldr	r7, [pc, #784]	; (93f0 <_malloc_r+0x358>)
    90de:	add.w	r3, r7, r3, lsl #2
    90e2:	sub.w	r1, r3, #8
    90e6:	ldr	r4, [r3, #4]
    90e8:	cmp	r1, r4
    90ea:	bne.n	90fc <_malloc_r+0x64>
    90ec:	b.n	9248 <_malloc_r+0x1b0>
    90ee:	cmp	r2, #0
    90f0:	bge.w	924c <_malloc_r+0x1b4>
    90f4:	ldr	r4, [r4, #12]
    90f6:	cmp	r1, r4
    90f8:	beq.w	9248 <_malloc_r+0x1b0>
    90fc:	ldr	r3, [r4, #4]
    90fe:	bic.w	r3, r3, #3
    9102:	subs	r2, r3, r5
    9104:	cmp	r2, #15
    9106:	ble.n	90ee <_malloc_r+0x56>
    9108:	ldr	r1, [pc, #740]	; (93f0 <_malloc_r+0x358>)
    910a:	ldr	r4, [r7, #16]
    910c:	add.w	lr, r1, #8
    9110:	cmp	r4, lr
    9112:	beq.w	947c <_malloc_r+0x3e4>
    9116:	ldr	r3, [r4, #4]
    9118:	bic.w	r3, r3, #3
    911c:	subs	r2, r3, r5
    911e:	cmp	r2, #15
    9120:	bgt.w	9456 <_malloc_r+0x3be>
    9124:	cmp	r2, #0
    9126:	str.w	lr, [r1, #20]
    912a:	str.w	lr, [r1, #16]
    912e:	bge.w	926e <_malloc_r+0x1d6>
    9132:	cmp.w	r3, #512	; 0x200
    9136:	bcs.w	9408 <_malloc_r+0x370>
    913a:	lsrs	r3, r3, #3
    913c:	add.w	ip, r3, #1
    9140:	movs	r2, #1
    9142:	asrs	r3, r3, #2
    9144:	lsl.w	r3, r2, r3
    9148:	ldr	r2, [r1, #4]
    914a:	ldr.w	r8, [r1, ip, lsl #3]
    914e:	str.w	r8, [r4, #8]
    9152:	add.w	r9, r1, ip, lsl #3
    9156:	orrs	r2, r3
    9158:	sub.w	r3, r9, #8
    915c:	str	r3, [r4, #12]
    915e:	str	r2, [r1, #4]
    9160:	str.w	r4, [r1, ip, lsl #3]
    9164:	str.w	r4, [r8, #12]
    9168:	asrs	r3, r0, #2
    916a:	movs	r4, #1
    916c:	lsls	r4, r3
    916e:	cmp	r4, r2
    9170:	bhi.w	9288 <_malloc_r+0x1f0>
    9174:	tst	r4, r2
    9176:	bne.n	9186 <_malloc_r+0xee>
    9178:	bic.w	r0, r0, #3
    917c:	lsls	r4, r4, #1
    917e:	tst	r4, r2
    9180:	add.w	r0, r0, #4
    9184:	beq.n	917c <_malloc_r+0xe4>
    9186:	add.w	r9, r7, r0, lsl #3
    918a:	mov	ip, r9
    918c:	mov	r8, r0
    918e:	ldr.w	r1, [ip, #12]
    9192:	cmp	ip, r1
    9194:	bne.n	91a6 <_malloc_r+0x10e>
    9196:	b.n	9480 <_malloc_r+0x3e8>
    9198:	cmp	r2, #0
    919a:	bge.w	94a0 <_malloc_r+0x408>
    919e:	ldr	r1, [r1, #12]
    91a0:	cmp	ip, r1
    91a2:	beq.w	9480 <_malloc_r+0x3e8>
    91a6:	ldr	r3, [r1, #4]
    91a8:	bic.w	r3, r3, #3
    91ac:	subs	r2, r3, r5
    91ae:	cmp	r2, #15
    91b0:	ble.n	9198 <_malloc_r+0x100>
    91b2:	mov	r4, r1
    91b4:	ldr.w	ip, [r1, #12]
    91b8:	ldr.w	r8, [r4, #8]!
    91bc:	adds	r3, r1, r5
    91be:	orr.w	r5, r5, #1
    91c2:	str	r5, [r1, #4]
    91c4:	orr.w	r1, r2, #1
    91c8:	str.w	ip, [r8, #12]
    91cc:	mov	r0, r6
    91ce:	str.w	r8, [ip, #8]
    91d2:	str	r3, [r7, #20]
    91d4:	str	r3, [r7, #16]
    91d6:	str.w	lr, [r3, #12]
    91da:	str.w	lr, [r3, #8]
    91de:	str	r1, [r3, #4]
    91e0:	str	r2, [r3, r2]
    91e2:	bl	98ac <__malloc_unlock>
    91e6:	b.n	9228 <_malloc_r+0x190>
    91e8:	cmp	r1, #16
    91ea:	bhi.n	9230 <_malloc_r+0x198>
    91ec:	bl	98a8 <__malloc_lock>
    91f0:	movs	r5, #16
    91f2:	movs	r3, #6
    91f4:	movs	r0, #2
    91f6:	ldr	r7, [pc, #504]	; (93f0 <_malloc_r+0x358>)
    91f8:	add.w	r3, r7, r3, lsl #2
    91fc:	sub.w	r2, r3, #8
    9200:	ldr	r4, [r3, #4]
    9202:	cmp	r4, r2
    9204:	beq.w	9492 <_malloc_r+0x3fa>
    9208:	ldr	r3, [r4, #4]
    920a:	ldr	r1, [r4, #12]
    920c:	ldr	r5, [r4, #8]
    920e:	bic.w	r3, r3, #3
    9212:	add	r3, r4
    9214:	mov	r0, r6
    9216:	ldr	r2, [r3, #4]
    9218:	str	r1, [r5, #12]
    921a:	orr.w	r2, r2, #1
    921e:	str	r5, [r1, #8]
    9220:	str	r2, [r3, #4]
    9222:	bl	98ac <__malloc_unlock>
    9226:	adds	r4, #8
    9228:	mov	r0, r4
    922a:	add	sp, #12
    922c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9230:	movs	r4, #0
    9232:	movs	r3, #12
    9234:	mov	r0, r4
    9236:	str	r3, [r6, #0]
    9238:	add	sp, #12
    923a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    923e:	movs	r3, #128	; 0x80
    9240:	mov.w	lr, #64	; 0x40
    9244:	movs	r0, #63	; 0x3f
    9246:	b.n	90dc <_malloc_r+0x44>
    9248:	mov	r0, lr
    924a:	b.n	9108 <_malloc_r+0x70>
    924c:	add	r3, r4
    924e:	ldr	r1, [r4, #12]
    9250:	ldr	r2, [r3, #4]
    9252:	ldr	r5, [r4, #8]
    9254:	orr.w	r2, r2, #1
    9258:	str	r1, [r5, #12]
    925a:	mov	r0, r6
    925c:	str	r5, [r1, #8]
    925e:	str	r2, [r3, #4]
    9260:	bl	98ac <__malloc_unlock>
    9264:	adds	r4, #8
    9266:	mov	r0, r4
    9268:	add	sp, #12
    926a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    926e:	add	r3, r4
    9270:	mov	r0, r6
    9272:	ldr	r2, [r3, #4]
    9274:	orr.w	r2, r2, #1
    9278:	str	r2, [r3, #4]
    927a:	bl	98ac <__malloc_unlock>
    927e:	adds	r4, #8
    9280:	mov	r0, r4
    9282:	add	sp, #12
    9284:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9288:	ldr	r4, [r7, #8]
    928a:	ldr	r3, [r4, #4]
    928c:	bic.w	r8, r3, #3
    9290:	cmp	r8, r5
    9292:	bcc.n	929e <_malloc_r+0x206>
    9294:	rsb	r3, r5, r8
    9298:	cmp	r3, #15
    929a:	bgt.w	93b6 <_malloc_r+0x31e>
    929e:	ldr	r3, [pc, #340]	; (93f4 <_malloc_r+0x35c>)
    92a0:	ldr.w	r9, [pc, #352]	; 9404 <_malloc_r+0x36c>
    92a4:	ldr	r2, [r3, #0]
    92a6:	ldr.w	r3, [r9]
    92aa:	adds	r3, #1
    92ac:	add	r2, r5
    92ae:	add.w	sl, r4, r8
    92b2:	beq.w	9576 <_malloc_r+0x4de>
    92b6:	add.w	r2, r2, #4096	; 0x1000
    92ba:	adds	r2, #15
    92bc:	bic.w	r2, r2, #4080	; 0xff0
    92c0:	bic.w	r2, r2, #15
    92c4:	mov	r1, r2
    92c6:	mov	r0, r6
    92c8:	str	r2, [sp, #4]
    92ca:	bl	9c90 <_sbrk_r>
    92ce:	cmp.w	r0, #4294967295
    92d2:	mov	fp, r0
    92d4:	ldr	r2, [sp, #4]
    92d6:	beq.w	958a <_malloc_r+0x4f2>
    92da:	cmp	sl, r0
    92dc:	bhi.w	94d8 <_malloc_r+0x440>
    92e0:	ldr	r3, [pc, #276]	; (93f8 <_malloc_r+0x360>)
    92e2:	ldr	r1, [r3, #0]
    92e4:	cmp	sl, fp
    92e6:	add	r1, r2
    92e8:	str	r1, [r3, #0]
    92ea:	beq.w	9594 <_malloc_r+0x4fc>
    92ee:	ldr.w	r0, [r9]
    92f2:	ldr.w	lr, [pc, #272]	; 9404 <_malloc_r+0x36c>
    92f6:	adds	r0, #1
    92f8:	ittet	ne
    92fa:	rsbne	sl, sl, fp
    92fe:	addne	r1, sl
    9300:	streq.w	fp, [lr]
    9304:	strne	r1, [r3, #0]
    9306:	ands.w	r1, fp, #7
    930a:	beq.w	953c <_malloc_r+0x4a4>
    930e:	rsb	r0, r1, #8
    9312:	rsb	r1, r1, #4096	; 0x1000
    9316:	add	fp, r0
    9318:	adds	r1, #8
    931a:	add	r2, fp
    931c:	ubfx	r2, r2, #0, #12
    9320:	rsb	r9, r2, r1
    9324:	mov	r1, r9
    9326:	mov	r0, r6
    9328:	str	r3, [sp, #4]
    932a:	bl	9c90 <_sbrk_r>
    932e:	adds	r3, r0, #1
    9330:	ldr	r3, [sp, #4]
    9332:	beq.w	95b4 <_malloc_r+0x51c>
    9336:	rsb	r2, fp, r0
    933a:	add	r2, r9
    933c:	orr.w	r2, r2, #1
    9340:	ldr	r1, [r3, #0]
    9342:	str.w	fp, [r7, #8]
    9346:	add	r1, r9
    9348:	cmp	r4, r7
    934a:	str.w	r2, [fp, #4]
    934e:	str	r1, [r3, #0]
    9350:	ldr.w	r9, [pc, #164]	; 93f8 <_malloc_r+0x360>
    9354:	beq.n	9384 <_malloc_r+0x2ec>
    9356:	cmp.w	r8, #15
    935a:	bls.w	9558 <_malloc_r+0x4c0>
    935e:	ldr	r2, [r4, #4]
    9360:	sub.w	r3, r8, #12
    9364:	bic.w	r3, r3, #7
    9368:	adds	r0, r4, r3
    936a:	and.w	r2, r2, #1
    936e:	mov.w	lr, #5
    9372:	orrs	r2, r3
    9374:	cmp	r3, #15
    9376:	str	r2, [r4, #4]
    9378:	str.w	lr, [r0, #4]
    937c:	str.w	lr, [r0, #8]
    9380:	bhi.w	95bc <_malloc_r+0x524>
    9384:	ldr	r3, [pc, #116]	; (93fc <_malloc_r+0x364>)
    9386:	ldr	r4, [r7, #8]
    9388:	ldr	r2, [r3, #0]
    938a:	cmp	r1, r2
    938c:	it	hi
    938e:	strhi	r1, [r3, #0]
    9390:	ldr	r3, [pc, #108]	; (9400 <_malloc_r+0x368>)
    9392:	ldr	r2, [r3, #0]
    9394:	cmp	r1, r2
    9396:	ldr	r2, [r4, #4]
    9398:	it	hi
    939a:	strhi	r1, [r3, #0]
    939c:	bic.w	r2, r2, #3
    93a0:	cmp	r5, r2
    93a2:	sub.w	r3, r2, r5
    93a6:	bhi.n	93ac <_malloc_r+0x314>
    93a8:	cmp	r3, #15
    93aa:	bgt.n	93b6 <_malloc_r+0x31e>
    93ac:	mov	r0, r6
    93ae:	bl	98ac <__malloc_unlock>
    93b2:	movs	r4, #0
    93b4:	b.n	9228 <_malloc_r+0x190>
    93b6:	adds	r2, r4, r5
    93b8:	orr.w	r3, r3, #1
    93bc:	orr.w	r5, r5, #1
    93c0:	str	r5, [r4, #4]
    93c2:	mov	r0, r6
    93c4:	str	r2, [r7, #8]
    93c6:	str	r3, [r2, #4]
    93c8:	bl	98ac <__malloc_unlock>
    93cc:	adds	r4, #8
    93ce:	mov	r0, r4
    93d0:	add	sp, #12
    93d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93d6:	cmp	r3, #20
    93d8:	bls.n	94be <_malloc_r+0x426>
    93da:	cmp	r3, #84	; 0x54
    93dc:	bhi.w	9528 <_malloc_r+0x490>
    93e0:	lsrs	r0, r5, #12
    93e2:	add.w	lr, r0, #111	; 0x6f
    93e6:	mov.w	r3, lr, lsl #1
    93ea:	adds	r0, #110	; 0x6e
    93ec:	b.n	90dc <_malloc_r+0x44>
    93ee:	nop
    93f0:	.word	0x20001d4c
    93f4:	.word	0x20021c70
    93f8:	.word	0x20021c40
    93fc:	.word	0x20021c68
    9400:	.word	0x20021c6c
    9404:	.word	0x20002154
    9408:	lsrs	r2, r3, #9
    940a:	cmp	r2, #4
    940c:	bls.n	94cc <_malloc_r+0x434>
    940e:	cmp	r2, #20
    9410:	bhi.w	957a <_malloc_r+0x4e2>
    9414:	add.w	r1, r2, #92	; 0x5c
    9418:	lsls	r1, r1, #1
    941a:	adds	r2, #91	; 0x5b
    941c:	add.w	ip, r7, r1, lsl #2
    9420:	ldr.w	r1, [r7, r1, lsl #2]
    9424:	ldr.w	r8, [pc, #476]	; 9604 <_malloc_r+0x56c>
    9428:	sub.w	ip, ip, #8
    942c:	cmp	ip, r1
    942e:	beq.w	9542 <_malloc_r+0x4aa>
    9432:	ldr	r2, [r1, #4]
    9434:	bic.w	r2, r2, #3
    9438:	cmp	r3, r2
    943a:	bcs.n	9442 <_malloc_r+0x3aa>
    943c:	ldr	r1, [r1, #8]
    943e:	cmp	ip, r1
    9440:	bne.n	9432 <_malloc_r+0x39a>
    9442:	ldr.w	ip, [r1, #12]
    9446:	ldr	r2, [r7, #4]
    9448:	str.w	ip, [r4, #12]
    944c:	str	r1, [r4, #8]
    944e:	str.w	r4, [ip, #8]
    9452:	str	r4, [r1, #12]
    9454:	b.n	9168 <_malloc_r+0xd0>
    9456:	adds	r3, r4, r5
    9458:	orr.w	r7, r2, #1
    945c:	orr.w	r5, r5, #1
    9460:	str	r5, [r4, #4]
    9462:	mov	r0, r6
    9464:	str	r3, [r1, #20]
    9466:	str	r3, [r1, #16]
    9468:	str.w	lr, [r3, #12]
    946c:	str.w	lr, [r3, #8]
    9470:	str	r7, [r3, #4]
    9472:	str	r2, [r3, r2]
    9474:	adds	r4, #8
    9476:	bl	98ac <__malloc_unlock>
    947a:	b.n	9228 <_malloc_r+0x190>
    947c:	ldr	r2, [r1, #4]
    947e:	b.n	9168 <_malloc_r+0xd0>
    9480:	add.w	r8, r8, #1
    9484:	tst.w	r8, #3
    9488:	add.w	ip, ip, #8
    948c:	bne.w	918e <_malloc_r+0xf6>
    9490:	b.n	94f4 <_malloc_r+0x45c>
    9492:	ldr	r4, [r3, #12]
    9494:	cmp	r3, r4
    9496:	it	eq
    9498:	addeq	r0, #2
    949a:	beq.w	9108 <_malloc_r+0x70>
    949e:	b.n	9208 <_malloc_r+0x170>
    94a0:	add	r3, r1
    94a2:	mov	r4, r1
    94a4:	ldr	r2, [r3, #4]
    94a6:	ldr	r1, [r1, #12]
    94a8:	ldr.w	r5, [r4, #8]!
    94ac:	orr.w	r2, r2, #1
    94b0:	str	r2, [r3, #4]
    94b2:	mov	r0, r6
    94b4:	str	r1, [r5, #12]
    94b6:	str	r5, [r1, #8]
    94b8:	bl	98ac <__malloc_unlock>
    94bc:	b.n	9228 <_malloc_r+0x190>
    94be:	add.w	lr, r3, #92	; 0x5c
    94c2:	add.w	r0, r3, #91	; 0x5b
    94c6:	mov.w	r3, lr, lsl #1
    94ca:	b.n	90dc <_malloc_r+0x44>
    94cc:	lsrs	r2, r3, #6
    94ce:	add.w	r1, r2, #57	; 0x39
    94d2:	lsls	r1, r1, #1
    94d4:	adds	r2, #56	; 0x38
    94d6:	b.n	941c <_malloc_r+0x384>
    94d8:	cmp	r4, r7
    94da:	ldr	r3, [pc, #296]	; (9604 <_malloc_r+0x56c>)
    94dc:	beq.w	92e0 <_malloc_r+0x248>
    94e0:	ldr	r4, [r3, #8]
    94e2:	ldr	r2, [r4, #4]
    94e4:	bic.w	r2, r2, #3
    94e8:	b.n	93a0 <_malloc_r+0x308>
    94ea:	ldr.w	r3, [r9], #-8
    94ee:	cmp	r9, r3
    94f0:	bne.w	95f8 <_malloc_r+0x560>
    94f4:	tst.w	r0, #3
    94f8:	add.w	r0, r0, #4294967295
    94fc:	bne.n	94ea <_malloc_r+0x452>
    94fe:	ldr	r3, [r7, #4]
    9500:	bic.w	r3, r3, r4
    9504:	str	r3, [r7, #4]
    9506:	lsls	r4, r4, #1
    9508:	cmp	r4, r3
    950a:	bhi.w	9288 <_malloc_r+0x1f0>
    950e:	cmp	r4, #0
    9510:	beq.w	9288 <_malloc_r+0x1f0>
    9514:	tst	r4, r3
    9516:	mov	r0, r8
    9518:	bne.w	9186 <_malloc_r+0xee>
    951c:	lsls	r4, r4, #1
    951e:	tst	r4, r3
    9520:	add.w	r0, r0, #4
    9524:	beq.n	951c <_malloc_r+0x484>
    9526:	b.n	9186 <_malloc_r+0xee>
    9528:	cmp.w	r3, #340	; 0x154
    952c:	bhi.n	9560 <_malloc_r+0x4c8>
    952e:	lsrs	r0, r5, #15
    9530:	add.w	lr, r0, #120	; 0x78
    9534:	mov.w	r3, lr, lsl #1
    9538:	adds	r0, #119	; 0x77
    953a:	b.n	90dc <_malloc_r+0x44>
    953c:	mov.w	r1, #4096	; 0x1000
    9540:	b.n	931a <_malloc_r+0x282>
    9542:	movs	r1, #1
    9544:	ldr.w	r3, [r8, #4]
    9548:	asrs	r2, r2, #2
    954a:	lsl.w	r2, r1, r2
    954e:	orrs	r2, r3
    9550:	str.w	r2, [r8, #4]
    9554:	mov	r1, ip
    9556:	b.n	9448 <_malloc_r+0x3b0>
    9558:	movs	r3, #1
    955a:	str.w	r3, [fp, #4]
    955e:	b.n	93ac <_malloc_r+0x314>
    9560:	movw	r2, #1364	; 0x554
    9564:	cmp	r3, r2
    9566:	bhi.n	95aa <_malloc_r+0x512>
    9568:	lsrs	r0, r5, #18
    956a:	add.w	lr, r0, #125	; 0x7d
    956e:	mov.w	r3, lr, lsl #1
    9572:	adds	r0, #124	; 0x7c
    9574:	b.n	90dc <_malloc_r+0x44>
    9576:	adds	r2, #16
    9578:	b.n	92c4 <_malloc_r+0x22c>
    957a:	cmp	r2, #84	; 0x54
    957c:	bhi.n	95cc <_malloc_r+0x534>
    957e:	lsrs	r2, r3, #12
    9580:	add.w	r1, r2, #111	; 0x6f
    9584:	lsls	r1, r1, #1
    9586:	adds	r2, #110	; 0x6e
    9588:	b.n	941c <_malloc_r+0x384>
    958a:	ldr	r4, [r7, #8]
    958c:	ldr	r2, [r4, #4]
    958e:	bic.w	r2, r2, #3
    9592:	b.n	93a0 <_malloc_r+0x308>
    9594:	ubfx	r0, sl, #0, #12
    9598:	cmp	r0, #0
    959a:	bne.w	92ee <_malloc_r+0x256>
    959e:	add	r2, r8
    95a0:	ldr	r3, [r7, #8]
    95a2:	orr.w	r2, r2, #1
    95a6:	str	r2, [r3, #4]
    95a8:	b.n	9384 <_malloc_r+0x2ec>
    95aa:	movs	r3, #254	; 0xfe
    95ac:	mov.w	lr, #127	; 0x7f
    95b0:	movs	r0, #126	; 0x7e
    95b2:	b.n	90dc <_malloc_r+0x44>
    95b4:	movs	r2, #1
    95b6:	mov.w	r9, #0
    95ba:	b.n	9340 <_malloc_r+0x2a8>
    95bc:	add.w	r1, r4, #8
    95c0:	mov	r0, r6
    95c2:	bl	e368 <_free_r>
    95c6:	ldr.w	r1, [r9]
    95ca:	b.n	9384 <_malloc_r+0x2ec>
    95cc:	cmp.w	r2, #340	; 0x154
    95d0:	bhi.n	95de <_malloc_r+0x546>
    95d2:	lsrs	r2, r3, #15
    95d4:	add.w	r1, r2, #120	; 0x78
    95d8:	lsls	r1, r1, #1
    95da:	adds	r2, #119	; 0x77
    95dc:	b.n	941c <_malloc_r+0x384>
    95de:	movw	r1, #1364	; 0x554
    95e2:	cmp	r2, r1
    95e4:	bhi.n	95f2 <_malloc_r+0x55a>
    95e6:	lsrs	r2, r3, #18
    95e8:	add.w	r1, r2, #125	; 0x7d
    95ec:	lsls	r1, r1, #1
    95ee:	adds	r2, #124	; 0x7c
    95f0:	b.n	941c <_malloc_r+0x384>
    95f2:	movs	r1, #254	; 0xfe
    95f4:	movs	r2, #126	; 0x7e
    95f6:	b.n	941c <_malloc_r+0x384>
    95f8:	ldr	r3, [r7, #4]
    95fa:	b.n	9506 <_malloc_r+0x46e>
    95fc:	lsrs	r0, r5, #3
    95fe:	adds	r3, r0, #1
    9600:	lsls	r3, r3, #1
    9602:	b.n	91f6 <_malloc_r+0x15e>
    9604:	.word	0x20001d4c

00009608 <__ascii_mbtowc>:
    9608:	sub	sp, #8
    960a:	cbz	r1, 9620 <__ascii_mbtowc+0x18>
    960c:	cbz	r2, 9626 <__ascii_mbtowc+0x1e>
    960e:	cbz	r3, 962c <__ascii_mbtowc+0x24>
    9610:	ldrb	r3, [r2, #0]
    9612:	str	r3, [r1, #0]
    9614:	ldrb	r2, [r2, #0]
    9616:	adds	r0, r2, #0
    9618:	it	ne
    961a:	movne	r0, #1
    961c:	add	sp, #8
    961e:	bx	lr
    9620:	add	r1, sp, #4
    9622:	cmp	r2, #0
    9624:	bne.n	960e <__ascii_mbtowc+0x6>
    9626:	mov	r0, r2
    9628:	add	sp, #8
    962a:	bx	lr
    962c:	mvn.w	r0, #1
    9630:	b.n	961c <__ascii_mbtowc+0x14>
    9632:	nop
	...

00009640 <memchr>:
    9640:	and.w	r1, r1, #255	; 0xff
    9644:	cmp	r2, #16
    9646:	blt.n	96a0 <memchr+0x60>
    9648:	tst.w	r0, #7
    964c:	beq.n	9660 <memchr+0x20>
    964e:	ldrb.w	r3, [r0], #1
    9652:	subs	r2, #1
    9654:	cmp	r3, r1
    9656:	beq.n	96b4 <memchr+0x74>
    9658:	tst.w	r0, #7
    965c:	cbz	r2, 96b0 <memchr+0x70>
    965e:	bne.n	964e <memchr+0xe>
    9660:	push	{r4, r5, r6, r7}
    9662:	orr.w	r1, r1, r1, lsl #8
    9666:	orr.w	r1, r1, r1, lsl #16
    966a:	bic.w	r4, r2, #7
    966e:	mvns.w	r7, #0
    9672:	movs	r3, #0
    9674:	ldrd	r5, r6, [r0], #8
    9678:	subs	r4, #8
    967a:	eor.w	r5, r5, r1
    967e:	eor.w	r6, r6, r1
    9682:	uadd8	r5, r5, r7
    9686:	sel	r5, r3, r7
    968a:	uadd8	r6, r6, r7
    968e:	sel	r6, r5, r7
    9692:	cbnz	r6, 96b8 <memchr+0x78>
    9694:	bne.n	9674 <memchr+0x34>
    9696:	pop	{r4, r5, r6, r7}
    9698:	and.w	r1, r1, #255	; 0xff
    969c:	and.w	r2, r2, #7
    96a0:	cbz	r2, 96b0 <memchr+0x70>
    96a2:	ldrb.w	r3, [r0], #1
    96a6:	subs	r2, #1
    96a8:	eor.w	r3, r3, r1
    96ac:	cbz	r3, 96b4 <memchr+0x74>
    96ae:	bne.n	96a2 <memchr+0x62>
    96b0:	movs	r0, #0
    96b2:	bx	lr
    96b4:	subs	r0, #1
    96b6:	bx	lr
    96b8:	cmp	r5, #0
    96ba:	itte	eq
    96bc:	moveq	r5, r6
    96be:	subeq	r0, #3
    96c0:	subne	r0, #7
    96c2:	tst.w	r5, #1
    96c6:	bne.n	96d8 <memchr+0x98>
    96c8:	adds	r0, #1
    96ca:	tst.w	r5, #256	; 0x100
    96ce:	ittt	eq
    96d0:	addeq	r0, #1
    96d2:	tsteq.w	r5, #98304	; 0x18000
    96d6:	addeq	r0, #1
    96d8:	pop	{r4, r5, r6, r7}
    96da:	subs	r0, #1
    96dc:	bx	lr
    96de:	nop

000096e0 <memcmp>:
    96e0:	cmp	r2, #3
    96e2:	push	{r4, r5, r6}
    96e4:	bls.n	9734 <memcmp+0x54>
    96e6:	orr.w	r3, r0, r1
    96ea:	lsls	r3, r3, #30
    96ec:	beq.n	9712 <memcmp+0x32>
    96ee:	ldrb	r4, [r0, #0]
    96f0:	ldrb	r5, [r1, #0]
    96f2:	cmp	r4, r5
    96f4:	bne.n	973c <memcmp+0x5c>
    96f6:	add	r2, r0
    96f8:	adds	r3, r0, #1
    96fa:	b.n	9708 <memcmp+0x28>
    96fc:	ldrb.w	r4, [r3], #1
    9700:	ldrb.w	r5, [r1, #1]!
    9704:	cmp	r4, r5
    9706:	bne.n	973c <memcmp+0x5c>
    9708:	cmp	r3, r2
    970a:	bne.n	96fc <memcmp+0x1c>
    970c:	movs	r0, #0
    970e:	pop	{r4, r5, r6}
    9710:	bx	lr
    9712:	mov	r4, r1
    9714:	mov	r3, r0
    9716:	ldr	r6, [r3, #0]
    9718:	ldr	r5, [r4, #0]
    971a:	cmp	r6, r5
    971c:	mov	r0, r3
    971e:	mov	r1, r4
    9720:	add.w	r3, r3, #4
    9724:	add.w	r4, r4, #4
    9728:	bne.n	96ee <memcmp+0xe>
    972a:	subs	r2, #4
    972c:	cmp	r2, #3
    972e:	mov	r0, r3
    9730:	mov	r1, r4
    9732:	bhi.n	9716 <memcmp+0x36>
    9734:	cmp	r2, #0
    9736:	bne.n	96ee <memcmp+0xe>
    9738:	mov	r0, r2
    973a:	b.n	970e <memcmp+0x2e>
    973c:	subs	r0, r4, r5
    973e:	pop	{r4, r5, r6}
    9740:	bx	lr
    9742:	nop

00009744 <memmove>:
    9744:	cmp	r0, r1
    9746:	push	{r4, r5, r6, r7, lr}
    9748:	bls.n	9766 <memmove+0x22>
    974a:	adds	r3, r1, r2
    974c:	cmp	r0, r3
    974e:	bcs.n	9766 <memmove+0x22>
    9750:	adds	r1, r0, r2
    9752:	cmp	r2, #0
    9754:	beq.n	97fa <memmove+0xb6>
    9756:	subs	r2, r3, r2
    9758:	ldrb.w	r4, [r3, #-1]!
    975c:	strb.w	r4, [r1, #-1]!
    9760:	cmp	r3, r2
    9762:	bne.n	9758 <memmove+0x14>
    9764:	pop	{r4, r5, r6, r7, pc}
    9766:	cmp	r2, #15
    9768:	bls.n	97fc <memmove+0xb8>
    976a:	orr.w	r3, r1, r0
    976e:	lsls	r3, r3, #30
    9770:	bne.n	9800 <memmove+0xbc>
    9772:	add.w	r4, r0, #16
    9776:	add.w	r3, r1, #16
    977a:	mov	r5, r2
    977c:	ldr.w	r6, [r3, #-16]
    9780:	str.w	r6, [r4, #-16]
    9784:	ldr.w	r6, [r3, #-12]
    9788:	str.w	r6, [r4, #-12]
    978c:	ldr.w	r6, [r3, #-8]
    9790:	str.w	r6, [r4, #-8]
    9794:	subs	r5, #16
    9796:	ldr.w	r6, [r3, #-4]
    979a:	str.w	r6, [r4, #-4]
    979e:	cmp	r5, #15
    97a0:	add.w	r3, r3, #16
    97a4:	add.w	r4, r4, #16
    97a8:	bhi.n	977c <memmove+0x38>
    97aa:	sub.w	r3, r2, #16
    97ae:	bic.w	r3, r3, #15
    97b2:	and.w	lr, r2, #15
    97b6:	adds	r3, #16
    97b8:	cmp.w	lr, #3
    97bc:	add	r1, r3
    97be:	add	r3, r0
    97c0:	bls.n	9806 <memmove+0xc2>
    97c2:	subs	r6, r3, #4
    97c4:	mov	r5, r1
    97c6:	mov	r4, lr
    97c8:	subs	r4, #4
    97ca:	ldr.w	r7, [r5], #4
    97ce:	str.w	r7, [r6, #4]!
    97d2:	cmp	r4, #3
    97d4:	bhi.n	97c8 <memmove+0x84>
    97d6:	sub.w	r4, lr, #4
    97da:	bic.w	r4, r4, #3
    97de:	adds	r4, #4
    97e0:	add	r3, r4
    97e2:	add	r1, r4
    97e4:	and.w	r2, r2, #3
    97e8:	cbz	r2, 9804 <memmove+0xc0>
    97ea:	subs	r3, #1
    97ec:	add	r2, r1
    97ee:	ldrb.w	r4, [r1], #1
    97f2:	strb.w	r4, [r3, #1]!
    97f6:	cmp	r2, r1
    97f8:	bne.n	97ee <memmove+0xaa>
    97fa:	pop	{r4, r5, r6, r7, pc}
    97fc:	mov	r3, r0
    97fe:	b.n	97e8 <memmove+0xa4>
    9800:	mov	r3, r0
    9802:	b.n	97ea <memmove+0xa6>
    9804:	pop	{r4, r5, r6, r7, pc}
    9806:	mov	r2, lr
    9808:	b.n	97e8 <memmove+0xa4>
    980a:	nop

0000980c <memset>:
    980c:	push	{r4, r5, r6}
    980e:	lsls	r4, r0, #30
    9810:	beq.n	98a0 <memset+0x94>
    9812:	subs	r4, r2, #1
    9814:	cmp	r2, #0
    9816:	beq.n	989c <memset+0x90>
    9818:	uxtb	r5, r1
    981a:	mov	r3, r0
    981c:	b.n	9824 <memset+0x18>
    981e:	subs	r2, r4, #1
    9820:	cbz	r4, 989c <memset+0x90>
    9822:	mov	r4, r2
    9824:	strb.w	r5, [r3], #1
    9828:	lsls	r2, r3, #30
    982a:	bne.n	981e <memset+0x12>
    982c:	cmp	r4, #3
    982e:	bls.n	988e <memset+0x82>
    9830:	uxtb	r5, r1
    9832:	orr.w	r5, r5, r5, lsl #8
    9836:	cmp	r4, #15
    9838:	orr.w	r5, r5, r5, lsl #16
    983c:	bls.n	9872 <memset+0x66>
    983e:	add.w	r2, r3, #16
    9842:	mov	r6, r4
    9844:	subs	r6, #16
    9846:	cmp	r6, #15
    9848:	str.w	r5, [r2, #-16]
    984c:	str.w	r5, [r2, #-12]
    9850:	str.w	r5, [r2, #-8]
    9854:	str.w	r5, [r2, #-4]
    9858:	add.w	r2, r2, #16
    985c:	bhi.n	9844 <memset+0x38>
    985e:	sub.w	r2, r4, #16
    9862:	bic.w	r2, r2, #15
    9866:	and.w	r4, r4, #15
    986a:	adds	r2, #16
    986c:	cmp	r4, #3
    986e:	add	r3, r2
    9870:	bls.n	988e <memset+0x82>
    9872:	mov	r6, r3
    9874:	mov	r2, r4
    9876:	subs	r2, #4
    9878:	cmp	r2, #3
    987a:	str.w	r5, [r6], #4
    987e:	bhi.n	9876 <memset+0x6a>
    9880:	subs	r2, r4, #4
    9882:	bic.w	r2, r2, #3
    9886:	adds	r2, #4
    9888:	add	r3, r2
    988a:	and.w	r4, r4, #3
    988e:	cbz	r4, 989c <memset+0x90>
    9890:	uxtb	r1, r1
    9892:	add	r4, r3
    9894:	strb.w	r1, [r3], #1
    9898:	cmp	r3, r4
    989a:	bne.n	9894 <memset+0x88>
    989c:	pop	{r4, r5, r6}
    989e:	bx	lr
    98a0:	mov	r4, r2
    98a2:	mov	r3, r0
    98a4:	b.n	982c <memset+0x20>
    98a6:	nop

000098a8 <__malloc_lock>:
    98a8:	bx	lr
    98aa:	nop

000098ac <__malloc_unlock>:
    98ac:	bx	lr
    98ae:	nop

000098b0 <_realloc_r>:
    98b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    98b4:	mov	r7, r2
    98b6:	sub	sp, #12
    98b8:	cmp	r1, #0
    98ba:	beq.w	9a40 <_realloc_r+0x190>
    98be:	mov	r6, r1
    98c0:	mov	r9, r0
    98c2:	add.w	r5, r7, #11
    98c6:	bl	98a8 <__malloc_lock>
    98ca:	ldr.w	lr, [r6, #-4]
    98ce:	cmp	r5, #22
    98d0:	bic.w	r4, lr, #3
    98d4:	sub.w	r8, r6, #8
    98d8:	bhi.n	995c <_realloc_r+0xac>
    98da:	movs	r2, #16
    98dc:	mov	r5, r2
    98de:	cmp	r7, r5
    98e0:	bhi.n	9966 <_realloc_r+0xb6>
    98e2:	cmp	r4, r2
    98e4:	bge.n	99d2 <_realloc_r+0x122>
    98e6:	ldr	r3, [pc, #804]	; (9c0c <_realloc_r+0x35c>)
    98e8:	ldr	r1, [r3, #8]
    98ea:	add.w	r0, r8, r4
    98ee:	cmp	r0, r1
    98f0:	ldr	r1, [r0, #4]
    98f2:	beq.w	9aa8 <_realloc_r+0x1f8>
    98f6:	bic.w	r3, r1, #1
    98fa:	add	r3, r0
    98fc:	ldr	r3, [r3, #4]
    98fe:	lsls	r3, r3, #31
    9900:	bpl.n	99fe <_realloc_r+0x14e>
    9902:	tst.w	lr, #1
    9906:	beq.n	9974 <_realloc_r+0xc4>
    9908:	mov	r1, r7
    990a:	mov	r0, r9
    990c:	bl	9098 <_malloc_r>
    9910:	mov	r7, r0
    9912:	cbz	r0, 994e <_realloc_r+0x9e>
    9914:	ldr.w	r3, [r6, #-4]
    9918:	bic.w	r3, r3, #1
    991c:	add	r3, r8
    991e:	sub.w	r2, r0, #8
    9922:	cmp	r2, r3
    9924:	beq.w	9bb0 <_realloc_r+0x300>
    9928:	subs	r2, r4, #4
    992a:	cmp	r2, #36	; 0x24
    992c:	bhi.w	9b92 <_realloc_r+0x2e2>
    9930:	cmp	r2, #19
    9932:	bhi.w	9b3e <_realloc_r+0x28e>
    9936:	mov	r3, r0
    9938:	mov	r2, r6
    993a:	ldr	r1, [r2, #0]
    993c:	str	r1, [r3, #0]
    993e:	ldr	r1, [r2, #4]
    9940:	str	r1, [r3, #4]
    9942:	ldr	r2, [r2, #8]
    9944:	str	r2, [r3, #8]
    9946:	mov	r1, r6
    9948:	mov	r0, r9
    994a:	bl	e368 <_free_r>
    994e:	mov	r0, r9
    9950:	bl	98ac <__malloc_unlock>
    9954:	mov	r0, r7
    9956:	add	sp, #12
    9958:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    995c:	bic.w	r5, r5, #7
    9960:	cmp	r5, #0
    9962:	mov	r2, r5
    9964:	bge.n	98de <_realloc_r+0x2e>
    9966:	movs	r3, #12
    9968:	movs	r0, #0
    996a:	str.w	r3, [r9]
    996e:	add	sp, #12
    9970:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9974:	ldr.w	r3, [r6, #-8]
    9978:	rsb	sl, r3, r8
    997c:	ldr.w	r3, [sl, #4]
    9980:	bic.w	ip, r3, #3
    9984:	add.w	r3, r4, ip
    9988:	cmp	r3, r2
    998a:	blt.n	9908 <_realloc_r+0x58>
    998c:	mov	r7, sl
    998e:	ldr.w	r1, [sl, #12]
    9992:	ldr.w	r0, [r7, #8]!
    9996:	subs	r2, r4, #4
    9998:	cmp	r2, #36	; 0x24
    999a:	str	r1, [r0, #12]
    999c:	str	r0, [r1, #8]
    999e:	bhi.w	9bd0 <_realloc_r+0x320>
    99a2:	cmp	r2, #19
    99a4:	bls.w	9bcc <_realloc_r+0x31c>
    99a8:	ldr	r1, [r6, #0]
    99aa:	str.w	r1, [sl, #8]
    99ae:	ldr	r1, [r6, #4]
    99b0:	str.w	r1, [sl, #12]
    99b4:	cmp	r2, #27
    99b6:	bhi.w	9c10 <_realloc_r+0x360>
    99ba:	adds	r6, #8
    99bc:	add.w	r2, sl, #16
    99c0:	ldr	r1, [r6, #0]
    99c2:	str	r1, [r2, #0]
    99c4:	ldr	r1, [r6, #4]
    99c6:	str	r1, [r2, #4]
    99c8:	ldr	r1, [r6, #8]
    99ca:	str	r1, [r2, #8]
    99cc:	mov	r6, r7
    99ce:	mov	r4, r3
    99d0:	mov	r8, sl
    99d2:	subs	r3, r4, r5
    99d4:	cmp	r3, #15
    99d6:	bhi.n	9a14 <_realloc_r+0x164>
    99d8:	ldr.w	r3, [r8, #4]
    99dc:	and.w	r3, r3, #1
    99e0:	orrs	r3, r4
    99e2:	add	r4, r8
    99e4:	str.w	r3, [r8, #4]
    99e8:	ldr	r3, [r4, #4]
    99ea:	orr.w	r3, r3, #1
    99ee:	str	r3, [r4, #4]
    99f0:	mov	r0, r9
    99f2:	bl	98ac <__malloc_unlock>
    99f6:	mov	r0, r6
    99f8:	add	sp, #12
    99fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99fe:	bic.w	r1, r1, #3
    9a02:	add	r1, r4
    9a04:	cmp	r1, r2
    9a06:	blt.n	9a4c <_realloc_r+0x19c>
    9a08:	ldr	r3, [r0, #12]
    9a0a:	ldr	r2, [r0, #8]
    9a0c:	mov	r4, r1
    9a0e:	str	r3, [r2, #12]
    9a10:	str	r2, [r3, #8]
    9a12:	b.n	99d2 <_realloc_r+0x122>
    9a14:	ldr.w	r2, [r8, #4]
    9a18:	add.w	r1, r8, r5
    9a1c:	and.w	r2, r2, #1
    9a20:	orrs	r5, r2
    9a22:	orr.w	r2, r3, #1
    9a26:	add	r3, r1
    9a28:	str.w	r5, [r8, #4]
    9a2c:	str	r2, [r1, #4]
    9a2e:	ldr	r2, [r3, #4]
    9a30:	orr.w	r2, r2, #1
    9a34:	adds	r1, #8
    9a36:	str	r2, [r3, #4]
    9a38:	mov	r0, r9
    9a3a:	bl	e368 <_free_r>
    9a3e:	b.n	99f0 <_realloc_r+0x140>
    9a40:	mov	r1, r2
    9a42:	add	sp, #12
    9a44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a48:	b.w	9098 <_malloc_r>
    9a4c:	tst.w	lr, #1
    9a50:	bne.w	9908 <_realloc_r+0x58>
    9a54:	ldr.w	r3, [r6, #-8]
    9a58:	rsb	sl, r3, r8
    9a5c:	ldr.w	r3, [sl, #4]
    9a60:	bic.w	ip, r3, #3
    9a64:	add.w	lr, r1, ip
    9a68:	cmp	lr, r2
    9a6a:	blt.n	9984 <_realloc_r+0xd4>
    9a6c:	ldr	r3, [r0, #12]
    9a6e:	ldr	r2, [r0, #8]
    9a70:	mov	r7, sl
    9a72:	str	r3, [r2, #12]
    9a74:	str	r2, [r3, #8]
    9a76:	ldr.w	r1, [r7, #8]!
    9a7a:	ldr.w	r3, [sl, #12]
    9a7e:	str	r3, [r1, #12]
    9a80:	subs	r2, r4, #4
    9a82:	cmp	r2, #36	; 0x24
    9a84:	str	r1, [r3, #8]
    9a86:	bhi.w	9bbc <_realloc_r+0x30c>
    9a8a:	cmp	r2, #19
    9a8c:	bls.n	9b54 <_realloc_r+0x2a4>
    9a8e:	ldr	r3, [r6, #0]
    9a90:	str.w	r3, [sl, #8]
    9a94:	ldr	r3, [r6, #4]
    9a96:	str.w	r3, [sl, #12]
    9a9a:	cmp	r2, #27
    9a9c:	bhi.w	9be0 <_realloc_r+0x330>
    9aa0:	adds	r6, #8
    9aa2:	add.w	r3, sl, #16
    9aa6:	b.n	9b56 <_realloc_r+0x2a6>
    9aa8:	bic.w	fp, r1, #3
    9aac:	add	fp, r4
    9aae:	add.w	r0, r5, #16
    9ab2:	cmp	fp, r0
    9ab4:	bge.n	9b6a <_realloc_r+0x2ba>
    9ab6:	tst.w	lr, #1
    9aba:	bne.w	9908 <_realloc_r+0x58>
    9abe:	ldr.w	r1, [r6, #-8]
    9ac2:	rsb	sl, r1, r8
    9ac6:	ldr.w	r1, [sl, #4]
    9aca:	bic.w	ip, r1, #3
    9ace:	add	fp, ip
    9ad0:	cmp	r0, fp
    9ad2:	bgt.w	9984 <_realloc_r+0xd4>
    9ad6:	mov	r7, sl
    9ad8:	ldr.w	r1, [sl, #12]
    9adc:	ldr.w	r0, [r7, #8]!
    9ae0:	subs	r2, r4, #4
    9ae2:	cmp	r2, #36	; 0x24
    9ae4:	str	r1, [r0, #12]
    9ae6:	str	r0, [r1, #8]
    9ae8:	bhi.w	9c54 <_realloc_r+0x3a4>
    9aec:	cmp	r2, #19
    9aee:	bls.w	9c3c <_realloc_r+0x38c>
    9af2:	ldr	r1, [r6, #0]
    9af4:	str.w	r1, [sl, #8]
    9af8:	ldr	r1, [r6, #4]
    9afa:	str.w	r1, [sl, #12]
    9afe:	cmp	r2, #27
    9b00:	bhi.w	9c62 <_realloc_r+0x3b2>
    9b04:	adds	r6, #8
    9b06:	add.w	r2, sl, #16
    9b0a:	ldr	r1, [r6, #0]
    9b0c:	str	r1, [r2, #0]
    9b0e:	ldr	r1, [r6, #4]
    9b10:	str	r1, [r2, #4]
    9b12:	ldr	r1, [r6, #8]
    9b14:	str	r1, [r2, #8]
    9b16:	add.w	r1, sl, r5
    9b1a:	rsb	r2, r5, fp
    9b1e:	orr.w	r2, r2, #1
    9b22:	str	r1, [r3, #8]
    9b24:	str	r2, [r1, #4]
    9b26:	ldr.w	r3, [sl, #4]
    9b2a:	and.w	r3, r3, #1
    9b2e:	orrs	r5, r3
    9b30:	mov	r0, r9
    9b32:	str.w	r5, [sl, #4]
    9b36:	bl	98ac <__malloc_unlock>
    9b3a:	mov	r0, r7
    9b3c:	b.n	99f8 <_realloc_r+0x148>
    9b3e:	ldr	r3, [r6, #0]
    9b40:	str	r3, [r0, #0]
    9b42:	ldr	r3, [r6, #4]
    9b44:	str	r3, [r0, #4]
    9b46:	cmp	r2, #27
    9b48:	bhi.n	9b9a <_realloc_r+0x2ea>
    9b4a:	add.w	r3, r0, #8
    9b4e:	add.w	r2, r6, #8
    9b52:	b.n	993a <_realloc_r+0x8a>
    9b54:	mov	r3, r7
    9b56:	ldr	r2, [r6, #0]
    9b58:	str	r2, [r3, #0]
    9b5a:	ldr	r2, [r6, #4]
    9b5c:	str	r2, [r3, #4]
    9b5e:	ldr	r2, [r6, #8]
    9b60:	str	r2, [r3, #8]
    9b62:	mov	r6, r7
    9b64:	mov	r4, lr
    9b66:	mov	r8, sl
    9b68:	b.n	99d2 <_realloc_r+0x122>
    9b6a:	add.w	r1, r8, r5
    9b6e:	rsb	fp, r5, fp
    9b72:	orr.w	r2, fp, #1
    9b76:	str	r1, [r3, #8]
    9b78:	str	r2, [r1, #4]
    9b7a:	ldr.w	r3, [r6, #-4]
    9b7e:	and.w	r3, r3, #1
    9b82:	orrs	r5, r3
    9b84:	mov	r0, r9
    9b86:	str.w	r5, [r6, #-4]
    9b8a:	bl	98ac <__malloc_unlock>
    9b8e:	mov	r0, r6
    9b90:	b.n	99f8 <_realloc_r+0x148>
    9b92:	mov	r1, r6
    9b94:	bl	9744 <memmove>
    9b98:	b.n	9946 <_realloc_r+0x96>
    9b9a:	ldr	r3, [r6, #8]
    9b9c:	str	r3, [r0, #8]
    9b9e:	ldr	r3, [r6, #12]
    9ba0:	str	r3, [r0, #12]
    9ba2:	cmp	r2, #36	; 0x24
    9ba4:	beq.n	9bf8 <_realloc_r+0x348>
    9ba6:	add.w	r3, r0, #16
    9baa:	add.w	r2, r6, #16
    9bae:	b.n	993a <_realloc_r+0x8a>
    9bb0:	ldr.w	r3, [r0, #-4]
    9bb4:	bic.w	r3, r3, #3
    9bb8:	add	r4, r3
    9bba:	b.n	99d2 <_realloc_r+0x122>
    9bbc:	mov	r1, r6
    9bbe:	mov	r0, r7
    9bc0:	mov	r4, lr
    9bc2:	mov	r8, sl
    9bc4:	bl	9744 <memmove>
    9bc8:	mov	r6, r7
    9bca:	b.n	99d2 <_realloc_r+0x122>
    9bcc:	mov	r2, r7
    9bce:	b.n	99c0 <_realloc_r+0x110>
    9bd0:	mov	r1, r6
    9bd2:	mov	r0, r7
    9bd4:	mov	r4, r3
    9bd6:	mov	r8, sl
    9bd8:	bl	9744 <memmove>
    9bdc:	mov	r6, r7
    9bde:	b.n	99d2 <_realloc_r+0x122>
    9be0:	ldr	r3, [r6, #8]
    9be2:	str.w	r3, [sl, #16]
    9be6:	ldr	r3, [r6, #12]
    9be8:	str.w	r3, [sl, #20]
    9bec:	cmp	r2, #36	; 0x24
    9bee:	beq.n	9c28 <_realloc_r+0x378>
    9bf0:	adds	r6, #16
    9bf2:	add.w	r3, sl, #24
    9bf6:	b.n	9b56 <_realloc_r+0x2a6>
    9bf8:	ldr	r3, [r6, #16]
    9bfa:	str	r3, [r0, #16]
    9bfc:	ldr	r3, [r6, #20]
    9bfe:	str	r3, [r0, #20]
    9c00:	add.w	r2, r6, #24
    9c04:	add.w	r3, r0, #24
    9c08:	b.n	993a <_realloc_r+0x8a>
    9c0a:	nop
    9c0c:	.word	0x20001d4c
    9c10:	ldr	r1, [r6, #8]
    9c12:	str.w	r1, [sl, #16]
    9c16:	ldr	r1, [r6, #12]
    9c18:	str.w	r1, [sl, #20]
    9c1c:	cmp	r2, #36	; 0x24
    9c1e:	beq.n	9c40 <_realloc_r+0x390>
    9c20:	adds	r6, #16
    9c22:	add.w	r2, sl, #24
    9c26:	b.n	99c0 <_realloc_r+0x110>
    9c28:	ldr	r3, [r6, #16]
    9c2a:	str.w	r3, [sl, #24]
    9c2e:	ldr	r3, [r6, #20]
    9c30:	str.w	r3, [sl, #28]
    9c34:	adds	r6, #24
    9c36:	add.w	r3, sl, #32
    9c3a:	b.n	9b56 <_realloc_r+0x2a6>
    9c3c:	mov	r2, r7
    9c3e:	b.n	9b0a <_realloc_r+0x25a>
    9c40:	ldr	r2, [r6, #16]
    9c42:	str.w	r2, [sl, #24]
    9c46:	ldr	r2, [r6, #20]
    9c48:	str.w	r2, [sl, #28]
    9c4c:	adds	r6, #24
    9c4e:	add.w	r2, sl, #32
    9c52:	b.n	99c0 <_realloc_r+0x110>
    9c54:	mov	r1, r6
    9c56:	mov	r0, r7
    9c58:	str	r3, [sp, #4]
    9c5a:	bl	9744 <memmove>
    9c5e:	ldr	r3, [sp, #4]
    9c60:	b.n	9b16 <_realloc_r+0x266>
    9c62:	ldr	r1, [r6, #8]
    9c64:	str.w	r1, [sl, #16]
    9c68:	ldr	r1, [r6, #12]
    9c6a:	str.w	r1, [sl, #20]
    9c6e:	cmp	r2, #36	; 0x24
    9c70:	beq.n	9c7a <_realloc_r+0x3ca>
    9c72:	adds	r6, #16
    9c74:	add.w	r2, sl, #24
    9c78:	b.n	9b0a <_realloc_r+0x25a>
    9c7a:	ldr	r2, [r6, #16]
    9c7c:	str.w	r2, [sl, #24]
    9c80:	ldr	r2, [r6, #20]
    9c82:	str.w	r2, [sl, #28]
    9c86:	adds	r6, #24
    9c88:	add.w	r2, sl, #32
    9c8c:	b.n	9b0a <_realloc_r+0x25a>
    9c8e:	nop

00009c90 <_sbrk_r>:
    9c90:	push	{r3, r4, r5, lr}
    9c92:	ldr	r4, [pc, #28]	; (9cb0 <_sbrk_r+0x20>)
    9c94:	movs	r3, #0
    9c96:	mov	r5, r0
    9c98:	mov	r0, r1
    9c9a:	str	r3, [r4, #0]
    9c9c:	bl	80dc <_sbrk>
    9ca0:	adds	r3, r0, #1
    9ca2:	beq.n	9ca6 <_sbrk_r+0x16>
    9ca4:	pop	{r3, r4, r5, pc}
    9ca6:	ldr	r3, [r4, #0]
    9ca8:	cmp	r3, #0
    9caa:	beq.n	9ca4 <_sbrk_r+0x14>
    9cac:	str	r3, [r5, #0]
    9cae:	pop	{r3, r4, r5, pc}
    9cb0:	.word	0x20022540

00009cb4 <sprintf>:
    9cb4:	push	{r1, r2, r3}
    9cb6:	push	{r4, r5, r6, r7, lr}
    9cb8:	sub	sp, #112	; 0x70
    9cba:	add	r3, sp, #132	; 0x84
    9cbc:	ldr	r1, [pc, #60]	; (9cfc <sprintf+0x48>)
    9cbe:	ldr.w	r2, [r3], #4
    9cc2:	str	r3, [sp, #4]
    9cc4:	mov	r5, r0
    9cc6:	mvn.w	r4, #2147483648	; 0x80000000
    9cca:	ldr	r0, [r1, #0]
    9ccc:	str	r5, [sp, #8]
    9cce:	mov.w	r7, #520	; 0x208
    9cd2:	movw	r6, #65535	; 0xffff
    9cd6:	add	r1, sp, #8
    9cd8:	str	r5, [sp, #24]
    9cda:	strh.w	r7, [sp, #20]
    9cde:	str	r4, [sp, #16]
    9ce0:	str	r4, [sp, #28]
    9ce2:	strh.w	r6, [sp, #22]
    9ce6:	bl	afe0 <_svfprintf_r>
    9cea:	ldr	r3, [sp, #8]
    9cec:	movs	r2, #0
    9cee:	strb	r2, [r3, #0]
    9cf0:	add	sp, #112	; 0x70
    9cf2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9cf6:	add	sp, #12
    9cf8:	bx	lr
    9cfa:	nop
    9cfc:	.word	0x2000215c

00009d00 <sscanf>:
    9d00:	push	{r1, r2, r3}
    9d02:	push	{r4, r5, r6, r7, lr}
    9d04:	sub	sp, #112	; 0x70
    9d06:	add	r4, sp, #132	; 0x84
    9d08:	mov.w	r2, #516	; 0x204
    9d0c:	ldr.w	r6, [r4], #4
    9d10:	strh.w	r2, [sp, #20]
    9d14:	str	r0, [sp, #8]
    9d16:	str	r0, [sp, #24]
    9d18:	bl	9e40 <strlen>
    9d1c:	ldr	r3, [pc, #48]	; (9d50 <sscanf+0x50>)
    9d1e:	str	r4, [sp, #4]
    9d20:	mov	r5, r0
    9d22:	mov	r2, r6
    9d24:	ldr	r7, [pc, #44]	; (9d54 <sscanf+0x54>)
    9d26:	ldr	r0, [r3, #0]
    9d28:	str	r5, [sp, #12]
    9d2a:	mov	r3, r4
    9d2c:	movw	r6, #65535	; 0xffff
    9d30:	movs	r4, #0
    9d32:	add	r1, sp, #8
    9d34:	str	r5, [sp, #28]
    9d36:	str	r7, [sp, #40]	; 0x28
    9d38:	str	r4, [sp, #56]	; 0x38
    9d3a:	str	r4, [sp, #76]	; 0x4c
    9d3c:	strh.w	r6, [sp, #22]
    9d40:	bl	c550 <__ssvfscanf_r>
    9d44:	add	sp, #112	; 0x70
    9d46:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9d4a:	add	sp, #12
    9d4c:	bx	lr
    9d4e:	nop
    9d50:	.word	0x2000215c
    9d54:	.word	0x00009d59

00009d58 <__seofread>:
    9d58:	movs	r0, #0
    9d5a:	bx	lr

00009d5c <strcpy>:
    9d5c:	eor.w	r2, r0, r1
    9d60:	mov	ip, r0
    9d62:	tst.w	r2, #3
    9d66:	bne.n	9e08 <strcpy+0xac>
    9d68:	tst.w	r1, #3
    9d6c:	bne.n	9dd4 <strcpy+0x78>
    9d6e:	str.w	r4, [sp, #-4]!
    9d72:	tst.w	r1, #4
    9d76:	ldr.w	r3, [r1], #4
    9d7a:	beq.n	9d94 <strcpy+0x38>
    9d7c:	sub.w	r2, r3, #16843009	; 0x1010101
    9d80:	bics	r2, r3
    9d82:	tst.w	r2, #2155905152	; 0x80808080
    9d86:	itt	eq
    9d88:	streq.w	r3, [ip], #4
    9d8c:	ldreq.w	r3, [r1], #4
    9d90:	bne.n	9dc0 <strcpy+0x64>
    9d92:	nop
    9d94:	ldr.w	r4, [r1], #4
    9d98:	sub.w	r2, r3, #16843009	; 0x1010101
    9d9c:	bics	r2, r3
    9d9e:	tst.w	r2, #2155905152	; 0x80808080
    9da2:	sub.w	r2, r4, #16843009	; 0x1010101
    9da6:	bne.n	9dc0 <strcpy+0x64>
    9da8:	str.w	r3, [ip], #4
    9dac:	bics	r2, r4
    9dae:	tst.w	r2, #2155905152	; 0x80808080
    9db2:	itt	eq
    9db4:	ldreq.w	r3, [r1], #4
    9db8:	streq.w	r4, [ip], #4
    9dbc:	beq.n	9d94 <strcpy+0x38>
    9dbe:	mov	r3, r4
    9dc0:	strb.w	r3, [ip], #1
    9dc4:	tst.w	r3, #255	; 0xff
    9dc8:	mov.w	r3, r3, ror #8
    9dcc:	bne.n	9dc0 <strcpy+0x64>
    9dce:	ldr.w	r4, [sp], #4
    9dd2:	bx	lr
    9dd4:	tst.w	r1, #1
    9dd8:	beq.n	9de8 <strcpy+0x8c>
    9dda:	ldrb.w	r2, [r1], #1
    9dde:	strb.w	r2, [ip], #1
    9de2:	cmp	r2, #0
    9de4:	it	eq
    9de6:	bxeq	lr
    9de8:	tst.w	r1, #2
    9dec:	beq.n	9d6e <strcpy+0x12>
    9dee:	ldrh.w	r2, [r1], #2
    9df2:	tst.w	r2, #255	; 0xff
    9df6:	itet	ne
    9df8:	strhne.w	r2, [ip], #2
    9dfc:	strbeq.w	r2, [ip]
    9e00:	tstne.w	r2, #65280	; 0xff00
    9e04:	bne.n	9d6e <strcpy+0x12>
    9e06:	bx	lr
    9e08:	ldrb.w	r2, [r1], #1
    9e0c:	strb.w	r2, [ip], #1
    9e10:	cmp	r2, #0
    9e12:	bne.n	9e08 <strcpy+0xac>
    9e14:	bx	lr
    9e16:	nop
	...

00009e40 <strlen>:
    9e40:	pld	[r0]
    9e44:	strd	r4, r5, [sp, #-8]!
    9e48:	bic.w	r1, r0, #7
    9e4c:	mvn.w	ip, #0
    9e50:	ands.w	r4, r0, #7
    9e54:	pld	[r1, #32]
    9e58:	bne.w	9eee <strlen+0xae>
    9e5c:	mov.w	r4, #0
    9e60:	mvn.w	r0, #7
    9e64:	ldrd	r2, r3, [r1]
    9e68:	pld	[r1, #64]	; 0x40
    9e6c:	add.w	r0, r0, #8
    9e70:	uadd8	r2, r2, ip
    9e74:	sel	r2, r4, ip
    9e78:	uadd8	r3, r3, ip
    9e7c:	sel	r3, r2, ip
    9e80:	cbnz	r3, 9ed6 <strlen+0x96>
    9e82:	ldrd	r2, r3, [r1, #8]
    9e86:	uadd8	r2, r2, ip
    9e8a:	add.w	r0, r0, #8
    9e8e:	sel	r2, r4, ip
    9e92:	uadd8	r3, r3, ip
    9e96:	sel	r3, r2, ip
    9e9a:	cbnz	r3, 9ed6 <strlen+0x96>
    9e9c:	ldrd	r2, r3, [r1, #16]
    9ea0:	uadd8	r2, r2, ip
    9ea4:	add.w	r0, r0, #8
    9ea8:	sel	r2, r4, ip
    9eac:	uadd8	r3, r3, ip
    9eb0:	sel	r3, r2, ip
    9eb4:	cbnz	r3, 9ed6 <strlen+0x96>
    9eb6:	ldrd	r2, r3, [r1, #24]
    9eba:	add.w	r1, r1, #32
    9ebe:	uadd8	r2, r2, ip
    9ec2:	add.w	r0, r0, #8
    9ec6:	sel	r2, r4, ip
    9eca:	uadd8	r3, r3, ip
    9ece:	sel	r3, r2, ip
    9ed2:	cmp	r3, #0
    9ed4:	beq.n	9e64 <strlen+0x24>
    9ed6:	cmp	r2, #0
    9ed8:	itt	eq
    9eda:	addeq	r0, #4
    9edc:	moveq	r2, r3
    9ede:	rev	r2, r2
    9ee0:	clz	r2, r2
    9ee4:	ldrd	r4, r5, [sp], #8
    9ee8:	add.w	r0, r0, r2, lsr #3
    9eec:	bx	lr
    9eee:	ldrd	r2, r3, [r1]
    9ef2:	and.w	r5, r4, #3
    9ef6:	rsb	r0, r4, #0
    9efa:	mov.w	r5, r5, lsl #3
    9efe:	tst.w	r4, #4
    9f02:	pld	[r1, #64]	; 0x40
    9f06:	lsl.w	r5, ip, r5
    9f0a:	orn	r2, r2, r5
    9f0e:	itt	ne
    9f10:	ornne	r3, r3, r5
    9f14:	movne	r2, ip
    9f16:	mov.w	r4, #0
    9f1a:	b.n	9e70 <strlen+0x30>

00009f1c <strncmp>:
    9f1c:	cmp	r2, #0
    9f1e:	beq.n	9fa4 <strncmp+0x88>
    9f20:	orr.w	r3, r0, r1
    9f24:	ands.w	r3, r3, #3
    9f28:	push	{r4, r5, r6, r7}
    9f2a:	bne.n	9f78 <strncmp+0x5c>
    9f2c:	cmp	r2, #3
    9f2e:	bls.n	9f78 <strncmp+0x5c>
    9f30:	ldr	r4, [r0, #0]
    9f32:	ldr	r5, [r1, #0]
    9f34:	cmp	r4, r5
    9f36:	bne.n	9f78 <strncmp+0x5c>
    9f38:	subs	r2, #4
    9f3a:	beq.n	9fa8 <strncmp+0x8c>
    9f3c:	sub.w	r5, r4, #16843009	; 0x1010101
    9f40:	bic.w	r4, r5, r4
    9f44:	tst.w	r4, #2155905152	; 0x80808080
    9f48:	bne.n	9fae <strncmp+0x92>
    9f4a:	adds	r7, r0, #4
    9f4c:	adds	r5, r1, #4
    9f4e:	b.n	9f6c <strncmp+0x50>
    9f50:	ldr.w	r3, [r7], #4
    9f54:	ldr	r6, [r1, #0]
    9f56:	sub.w	r4, r3, #16843009	; 0x1010101
    9f5a:	cmp	r3, r6
    9f5c:	bic.w	r4, r4, r3
    9f60:	bne.n	9f78 <strncmp+0x5c>
    9f62:	subs	r2, #4
    9f64:	beq.n	9fa8 <strncmp+0x8c>
    9f66:	tst.w	r4, #2155905152	; 0x80808080
    9f6a:	bne.n	9fb4 <strncmp+0x98>
    9f6c:	cmp	r2, #3
    9f6e:	mov	r1, r5
    9f70:	mov	r0, r7
    9f72:	add.w	r5, r5, #4
    9f76:	bhi.n	9f50 <strncmp+0x34>
    9f78:	ldrb	r3, [r0, #0]
    9f7a:	ldrb	r4, [r1, #0]
    9f7c:	cmp	r4, r3
    9f7e:	add.w	r2, r2, #4294967295
    9f82:	bne.n	9f9e <strncmp+0x82>
    9f84:	cbz	r2, 9fa8 <strncmp+0x8c>
    9f86:	cbnz	r4, 9f8e <strncmp+0x72>
    9f88:	b.n	9fb8 <strncmp+0x9c>
    9f8a:	cbz	r2, 9fa8 <strncmp+0x8c>
    9f8c:	cbz	r3, 9fae <strncmp+0x92>
    9f8e:	ldrb.w	r3, [r0, #1]!
    9f92:	ldrb.w	r4, [r1, #1]!
    9f96:	cmp	r3, r4
    9f98:	add.w	r2, r2, #4294967295
    9f9c:	beq.n	9f8a <strncmp+0x6e>
    9f9e:	subs	r0, r3, r4
    9fa0:	pop	{r4, r5, r6, r7}
    9fa2:	bx	lr
    9fa4:	mov	r0, r2
    9fa6:	bx	lr
    9fa8:	mov	r0, r2
    9faa:	pop	{r4, r5, r6, r7}
    9fac:	bx	lr
    9fae:	mov	r0, r3
    9fb0:	pop	{r4, r5, r6, r7}
    9fb2:	bx	lr
    9fb4:	movs	r0, #0
    9fb6:	b.n	9fa0 <strncmp+0x84>
    9fb8:	mov	r0, r4
    9fba:	b.n	9fa0 <strncmp+0x84>

00009fbc <sulp>:
    9fbc:	push	{r4, r5, r6, lr}
    9fbe:	mov	r4, r0
    9fc0:	mov	r5, r1
    9fc2:	mov	r6, r2
    9fc4:	vmov	d0, r4, r5
    9fc8:	bl	f338 <__ulp>
    9fcc:	cbz	r6, 9fee <sulp+0x32>
    9fce:	ubfx	r3, r5, #20, #11
    9fd2:	rsb	r3, r3, #107	; 0x6b
    9fd6:	cmp	r3, #0
    9fd8:	ble.n	9fee <sulp+0x32>
    9fda:	lsls	r3, r3, #20
    9fdc:	add.w	r1, r3, #1069547520	; 0x3fc00000
    9fe0:	movs	r0, #0
    9fe2:	add.w	r1, r1, #3145728	; 0x300000
    9fe6:	vmov	d7, r0, r1
    9fea:	vmul.f64	d0, d0, d7
    9fee:	pop	{r4, r5, r6, pc}

00009ff0 <_strtod_l>:
    9ff0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ff4:	vpush	{d8-d14}
    9ff8:	mov	r6, r3
    9ffa:	sub	sp, #100	; 0x64
    9ffc:	movs	r3, #0
    9ffe:	mov	r9, r0
    a000:	mov	r0, r6
    a002:	mov	r8, r1
    a004:	mov	sl, r2
    a006:	str	r3, [sp, #80]	; 0x50
    a008:	bl	ecbc <__localeconv_l>
    a00c:	movs	r4, #0
    a00e:	movs	r3, #0
    a010:	mov	fp, r0
    a012:	ldr	r0, [r0, #0]
    a014:	strd	r3, r4, [sp, #24]
    a018:	bl	9e40 <strlen>
    a01c:	str.w	r8, [sp, #76]	; 0x4c
    a020:	str	r0, [sp, #16]
    a022:	mov	r3, r8
    a024:	mov	r5, r3
    a026:	ldrb.w	r4, [r3], #1
    a02a:	cmp	r4, #45	; 0x2d
    a02c:	bhi.w	a266 <_strtod_l+0x276>
    a030:	tbh	[pc, r4, lsl #1]
    a034:	.word	0x0119002e
    a038:	.word	0x01190119
    a03c:	.word	0x01190119
    a040:	.word	0x01190119
    a044:	.word	0x00ef0119
    a048:	.word	0x00ef00ef
    a04c:	.word	0x00ef00ef
    a050:	.word	0x01190119
    a054:	.word	0x01190119
    a058:	.word	0x01190119
    a05c:	.word	0x01190119
    a060:	.word	0x01190119
    a064:	.word	0x01190119
    a068:	.word	0x01190119
    a06c:	.word	0x01190119
    a070:	.word	0x01190119
    a074:	.word	0x011900ef
    a078:	.word	0x01190119
    a07c:	.word	0x01190119
    a080:	.word	0x01190119
    a084:	.word	0x01190119
    a088:	.word	0x00490119
    a08c:	.word	0x00ec0119
    a090:	vldr	d7, [pc, #700]	; a350 <_strtod_l+0x360>
    a094:	vstr	d7, [sp, #16]
    a098:	cmp.w	sl, #0
    a09c:	beq.n	a0b8 <_strtod_l+0xc8>
    a09e:	movs	r2, #0
    a0a0:	mov	r3, r8
    a0a2:	str	r2, [sp, #32]
    a0a4:	str.w	r3, [sl]
    a0a8:	ldr	r3, [sp, #32]
    a0aa:	cbz	r3, a0b8 <_strtod_l+0xc8>
    a0ac:	vldr	d7, [sp, #16]
    a0b0:	vneg.f64	d7, d7
    a0b4:	vstr	d7, [sp, #16]
    a0b8:	vldr	d0, [sp, #16]
    a0bc:	add	sp, #100	; 0x64
    a0be:	vpop	{d8-d14}
    a0c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0c6:	movs	r3, #0
    a0c8:	str	r3, [sp, #32]
    a0ca:	adds	r3, r5, #1
    a0cc:	str	r3, [sp, #76]	; 0x4c
    a0ce:	ldrb	r4, [r5, #1]
    a0d0:	cmp	r4, #0
    a0d2:	beq.n	a090 <_strtod_l+0xa0>
    a0d4:	cmp	r4, #48	; 0x30
    a0d6:	mov	r5, r3
    a0d8:	beq.w	a270 <_strtod_l+0x280>
    a0dc:	movs	r3, #0
    a0de:	str	r5, [sp, #40]	; 0x28
    a0e0:	str	r3, [sp, #36]	; 0x24
    a0e2:	sub.w	r3, r4, #48	; 0x30
    a0e6:	cmp	r3, #9
    a0e8:	bhi.w	a896 <_strtod_l+0x8a6>
    a0ec:	movs	r7, #0
    a0ee:	mov	r0, r5
    a0f0:	mov	r6, r7
    a0f2:	mov	r5, r7
    a0f4:	cmp	r5, #8
    a0f6:	it	gt
    a0f8:	addgt.w	r7, r7, r7, lsl #2
    a0fc:	add.w	r3, r6, r6, lsl #2
    a100:	add.w	r0, r0, #1
    a104:	add.w	r3, r4, r3, lsl #1
    a108:	str	r0, [sp, #76]	; 0x4c
    a10a:	itt	gt
    a10c:	addgt.w	r4, r4, r7, lsl #1
    a110:	subgt.w	r7, r4, #48	; 0x30
    a114:	ldrb	r4, [r0, #0]
    a116:	it	le
    a118:	suble.w	r6, r3, #48	; 0x30
    a11c:	sub.w	r3, r4, #48	; 0x30
    a120:	cmp	r3, #9
    a122:	add.w	r5, r5, #1
    a126:	bls.n	a0f4 <_strtod_l+0x104>
    a128:	ldr.w	r1, [fp]
    a12c:	ldr	r2, [sp, #16]
    a12e:	bl	9f1c <strncmp>
    a132:	cmp	r0, #0
    a134:	beq.n	a216 <_strtod_l+0x226>
    a136:	movs	r0, #0
    a138:	mov	ip, r0
    a13a:	mov	fp, r0
    a13c:	mov	r2, r5
    a13e:	cmp	r4, #101	; 0x65
    a140:	beq.w	a368 <_strtod_l+0x378>
    a144:	cmp	r4, #69	; 0x45
    a146:	beq.w	a368 <_strtod_l+0x378>
    a14a:	movs	r3, #0
    a14c:	cmp	r5, #0
    a14e:	bne.w	a2a6 <_strtod_l+0x2b6>
    a152:	cmp	r0, #0
    a154:	bne.w	a292 <_strtod_l+0x2a2>
    a158:	ldr	r3, [sp, #36]	; 0x24
    a15a:	cmp	r3, #0
    a15c:	bne.w	a292 <_strtod_l+0x2a2>
    a160:	cmp.w	fp, #0
    a164:	bne.n	a090 <_strtod_l+0xa0>
    a166:	subs	r4, #73	; 0x49
    a168:	cmp	r4, #37	; 0x25
    a16a:	bhi.n	a090 <_strtod_l+0xa0>
    a16c:	add	r3, pc, #4	; (adr r3, a174 <_strtod_l+0x184>)
    a16e:	ldr.w	pc, [r3, r4, lsl #2]
    a172:	nop
    a174:	.word	0x0000a31b
    a178:	.word	0x0000a091
    a17c:	.word	0x0000a091
    a180:	.word	0x0000a091
    a184:	.word	0x0000a091
    a188:	.word	0x0000a82f
    a18c:	.word	0x0000a091
    a190:	.word	0x0000a091
    a194:	.word	0x0000a091
    a198:	.word	0x0000a091
    a19c:	.word	0x0000a091
    a1a0:	.word	0x0000a091
    a1a4:	.word	0x0000a091
    a1a8:	.word	0x0000a091
    a1ac:	.word	0x0000a091
    a1b0:	.word	0x0000a091
    a1b4:	.word	0x0000a091
    a1b8:	.word	0x0000a091
    a1bc:	.word	0x0000a091
    a1c0:	.word	0x0000a091
    a1c4:	.word	0x0000a091
    a1c8:	.word	0x0000a091
    a1cc:	.word	0x0000a091
    a1d0:	.word	0x0000a091
    a1d4:	.word	0x0000a091
    a1d8:	.word	0x0000a091
    a1dc:	.word	0x0000a091
    a1e0:	.word	0x0000a091
    a1e4:	.word	0x0000a091
    a1e8:	.word	0x0000a091
    a1ec:	.word	0x0000a091
    a1f0:	.word	0x0000a091
    a1f4:	.word	0x0000a31b
    a1f8:	.word	0x0000a091
    a1fc:	.word	0x0000a091
    a200:	.word	0x0000a091
    a204:	.word	0x0000a091
    a208:	.word	0x0000a82f
    a20c:	movs	r3, #1
    a20e:	str	r3, [sp, #32]
    a210:	b.n	a0ca <_strtod_l+0xda>
    a212:	str	r3, [sp, #76]	; 0x4c
    a214:	b.n	a024 <_strtod_l+0x34>
    a216:	ldr	r3, [sp, #76]	; 0x4c
    a218:	ldr	r1, [sp, #16]
    a21a:	adds	r2, r3, r1
    a21c:	str	r2, [sp, #76]	; 0x4c
    a21e:	ldrb	r4, [r3, r1]
    a220:	mov	ip, r0
    a222:	mov	r2, r5
    a224:	sub.w	r3, r4, #48	; 0x30
    a228:	cmp	r3, #9
    a22a:	bhi.w	a6b6 <_strtod_l+0x6c6>
    a22e:	adds	r1, r0, #1
    a230:	mov	r4, r3
    a232:	cmp	r3, #0
    a234:	beq.w	ae46 <_strtod_l+0xe56>
    a238:	cmp	r1, #1
    a23a:	add	ip, r1
    a23c:	it	ne
    a23e:	addne	r0, r0, r5
    a240:	bne.n	a24e <_strtod_l+0x25e>
    a242:	b.w	ae2a <_strtod_l+0xe3a>
    a246:	lsls	r6, r1, #1
    a248:	cmp	r5, r0
    a24a:	beq.w	aad2 <_strtod_l+0xae2>
    a24e:	adds	r5, #1
    a250:	subs	r1, r5, #1
    a252:	cmp	r1, #8
    a254:	add.w	r1, r6, r6, lsl #2
    a258:	ble.n	a246 <_strtod_l+0x256>
    a25a:	cmp	r5, #16
    a25c:	itt	le
    a25e:	addle.w	r7, r7, r7, lsl #2
    a262:	lslle	r7, r7, #1
    a264:	b.n	a248 <_strtod_l+0x258>
    a266:	movs	r3, #0
    a268:	cmp	r4, #48	; 0x30
    a26a:	str	r3, [sp, #32]
    a26c:	bne.w	a0dc <_strtod_l+0xec>
    a270:	ldrb	r3, [r5, #1]
    a272:	cmp	r3, #88	; 0x58
    a274:	beq.w	a85e <_strtod_l+0x86e>
    a278:	cmp	r3, #120	; 0x78
    a27a:	beq.w	a85e <_strtod_l+0x86e>
    a27e:	adds	r5, #1
    a280:	str	r5, [sp, #76]	; 0x4c
    a282:	ldrb	r4, [r5, #0]
    a284:	cmp	r4, #48	; 0x30
    a286:	beq.n	a27e <_strtod_l+0x28e>
    a288:	cbz	r4, a292 <_strtod_l+0x2a2>
    a28a:	movs	r3, #1
    a28c:	str	r5, [sp, #40]	; 0x28
    a28e:	str	r3, [sp, #36]	; 0x24
    a290:	b.n	a0e2 <_strtod_l+0xf2>
    a292:	vldr	d7, [pc, #188]	; a350 <_strtod_l+0x360>
    a296:	vstr	d7, [sp, #16]
    a29a:	cmp.w	sl, #0
    a29e:	beq.w	a0a8 <_strtod_l+0xb8>
    a2a2:	ldr	r3, [sp, #76]	; 0x4c
    a2a4:	b.n	a0a4 <_strtod_l+0xb4>
    a2a6:	vmov	s15, r6
    a2aa:	vcvt.f64.u32	d7, s15
    a2ae:	cmp	r5, #16
    a2b0:	vstr	d7, [sp, #16]
    a2b4:	rsb	r4, ip, r3
    a2b8:	ldrd	fp, ip, [sp, #16]
    a2bc:	mov	r1, r5
    a2be:	it	ge
    a2c0:	movge	r1, #16
    a2c2:	cmp	r2, #0
    a2c4:	it	eq
    a2c6:	moveq	r2, r5
    a2c8:	cmp	r1, #9
    a2ca:	strd	fp, ip, [sp, #24]
    a2ce:	ble.n	a2ee <_strtod_l+0x2fe>
    a2d0:	ldr	r3, [pc, #132]	; (a358 <_strtod_l+0x368>)
    a2d2:	add.w	r3, r3, r1, lsl #3
    a2d6:	vldr	d6, [r3, #-72]	; 0xffffffb8
    a2da:	vldr	d5, [sp, #16]
    a2de:	vmov	s15, r7
    a2e2:	vcvt.f64.u32	d7, s15
    a2e6:	vfma.f64	d7, d5, d6
    a2ea:	vstr	d7, [sp, #24]
    a2ee:	cmp	r5, #15
    a2f0:	bgt.w	a40a <_strtod_l+0x41a>
    a2f4:	cmp	r4, #0
    a2f6:	beq.n	a346 <_strtod_l+0x356>
    a2f8:	ble.w	abfe <_strtod_l+0xc0e>
    a2fc:	cmp	r4, #22
    a2fe:	bgt.w	ab04 <_strtod_l+0xb14>
    a302:	ldr	r3, [pc, #84]	; (a358 <_strtod_l+0x368>)
    a304:	add.w	r4, r3, r4, lsl #3
    a308:	vldr	d7, [r4]
    a30c:	vldr	d6, [sp, #24]
    a310:	vmul.f64	d7, d7, d6
    a314:	vstr	d7, [sp, #16]
    a318:	b.n	a29a <_strtod_l+0x2aa>
    a31a:	add	r0, sp, #76	; 0x4c
    a31c:	ldr	r1, [pc, #60]	; (a35c <_strtod_l+0x36c>)
    a31e:	bl	eaf0 <__match>
    a322:	cmp	r0, #0
    a324:	beq.w	a090 <_strtod_l+0xa0>
    a328:	ldr	r3, [sp, #76]	; 0x4c
    a32a:	ldr	r1, [pc, #52]	; (a360 <_strtod_l+0x370>)
    a32c:	subs	r3, #1
    a32e:	add	r0, sp, #76	; 0x4c
    a330:	str	r3, [sp, #76]	; 0x4c
    a332:	bl	eaf0 <__match>
    a336:	cbnz	r0, a33e <_strtod_l+0x34e>
    a338:	ldr	r3, [sp, #76]	; 0x4c
    a33a:	adds	r3, #1
    a33c:	str	r3, [sp, #76]	; 0x4c
    a33e:	ldr	r3, [pc, #36]	; (a364 <_strtod_l+0x374>)
    a340:	str	r3, [sp, #28]
    a342:	movs	r3, #0
    a344:	str	r3, [sp, #24]
    a346:	vldr	d7, [sp, #24]
    a34a:	vstr	d7, [sp, #16]
    a34e:	b.n	a29a <_strtod_l+0x2aa>
	...
    a358:	.word	0x200002a8
    a35c:	.word	0x20001698
    a360:	.word	0x2000169c
    a364:	.word	0x7ff00000
    a368:	cmp	r5, #0
    a36a:	beq.w	a6a0 <_strtod_l+0x6b0>
    a36e:	ldr.w	r8, [sp, #76]	; 0x4c
    a372:	add.w	r3, r8, #1
    a376:	str	r3, [sp, #76]	; 0x4c
    a378:	ldrb.w	r4, [r8, #1]
    a37c:	cmp	r4, #43	; 0x2b
    a37e:	beq.w	a858 <_strtod_l+0x868>
    a382:	cmp	r4, #45	; 0x2d
    a384:	beq.w	a6f2 <_strtod_l+0x702>
    a388:	movs	r3, #0
    a38a:	str	r3, [sp, #16]
    a38c:	sub.w	r3, r4, #48	; 0x30
    a390:	cmp	r3, #9
    a392:	bhi.w	a850 <_strtod_l+0x860>
    a396:	cmp	r4, #48	; 0x30
    a398:	bne.n	a3a6 <_strtod_l+0x3b6>
    a39a:	ldr	r3, [sp, #76]	; 0x4c
    a39c:	adds	r3, #1
    a39e:	str	r3, [sp, #76]	; 0x4c
    a3a0:	ldrb	r4, [r3, #0]
    a3a2:	cmp	r4, #48	; 0x30
    a3a4:	beq.n	a39c <_strtod_l+0x3ac>
    a3a6:	sub.w	r3, r4, #49	; 0x31
    a3aa:	cmp	r3, #8
    a3ac:	bhi.w	a14a <_strtod_l+0x15a>
    a3b0:	ldr	r3, [sp, #76]	; 0x4c
    a3b2:	str	r3, [sp, #48]	; 0x30
    a3b4:	adds	r1, r3, #1
    a3b6:	subs	r4, #48	; 0x30
    a3b8:	str	r1, [sp, #76]	; 0x4c
    a3ba:	str	r4, [sp, #44]	; 0x2c
    a3bc:	ldrb	r4, [r3, #1]
    a3be:	sub.w	lr, r4, #48	; 0x30
    a3c2:	cmp.w	lr, #9
    a3c6:	bhi.n	a3e8 <_strtod_l+0x3f8>
    a3c8:	ldr	r3, [sp, #44]	; 0x2c
    a3ca:	adds	r1, #1
    a3cc:	str	r1, [sp, #76]	; 0x4c
    a3ce:	add.w	r3, r3, r3, lsl #2
    a3d2:	add.w	r3, r4, r3, lsl #1
    a3d6:	ldrb	r4, [r1, #0]
    a3d8:	sub.w	lr, r4, #48	; 0x30
    a3dc:	cmp.w	lr, #9
    a3e0:	sub.w	r3, r3, #48	; 0x30
    a3e4:	bls.n	a3ca <_strtod_l+0x3da>
    a3e6:	str	r3, [sp, #44]	; 0x2c
    a3e8:	ldr	r3, [sp, #48]	; 0x30
    a3ea:	subs	r1, r1, r3
    a3ec:	cmp	r1, #8
    a3ee:	bgt.w	aaf4 <_strtod_l+0xb04>
    a3f2:	ldr	r3, [sp, #44]	; 0x2c
    a3f4:	movw	r1, #19999	; 0x4e1f
    a3f8:	cmp	r3, r1
    a3fa:	it	ge
    a3fc:	movge	r3, r1
    a3fe:	ldr	r1, [sp, #16]
    a400:	cmp	r1, #0
    a402:	beq.w	a14c <_strtod_l+0x15c>
    a406:	negs	r3, r3
    a408:	b.n	a14c <_strtod_l+0x15c>
    a40a:	subs	r3, r5, r1
    a40c:	add	r3, r4
    a40e:	cmp	r3, #0
    a410:	ble.w	aa18 <_strtod_l+0xa28>
    a414:	ands.w	r0, r3, #15
    a418:	beq.n	a430 <_strtod_l+0x440>
    a41a:	ldr	r1, [pc, #780]	; (a728 <_strtod_l+0x738>)
    a41c:	add.w	r1, r1, r0, lsl #3
    a420:	vldr	d6, [sp, #24]
    a424:	vldr	d7, [r1]
    a428:	vmul.f64	d7, d7, d6
    a42c:	vstr	d7, [sp, #24]
    a430:	bics.w	r3, r3, #15
    a434:	bne.w	a744 <_strtod_l+0x754>
    a438:	movs	r3, #0
    a43a:	str	r3, [sp, #36]	; 0x24
    a43c:	str	r6, [sp, #0]
    a43e:	mov	r3, r5
    a440:	ldr	r1, [sp, #40]	; 0x28
    a442:	mov	r0, r9
    a444:	bl	ee18 <__s2b>
    a448:	mov	fp, r0
    a44a:	cmp	r0, #0
    a44c:	beq.w	a93c <_strtod_l+0x94c>
    a450:	cmp	r4, #0
    a452:	mov.w	r8, #0
    a456:	rsb	r3, r4, #0
    a45a:	vldr	d10, [pc, #684]	; a708 <_strtod_l+0x718>
    a45e:	it	ge
    a460:	movge	r3, r8
    a462:	vldr	d9, [pc, #684]	; a710 <_strtod_l+0x720>
    a466:	vldr	d11, [pc, #688]	; a718 <_strtod_l+0x728>
    a46a:	vldr	d8, [pc, #692]	; a720 <_strtod_l+0x730>
    a46e:	str	r3, [sp, #44]	; 0x2c
    a470:	bic.w	r3, r4, r4, asr #31
    a474:	str	r3, [sp, #40]	; 0x28
    a476:	mov	r4, r8
    a478:	str.w	sl, [sp, #60]	; 0x3c
    a47c:	ldr.w	r1, [fp, #4]
    a480:	mov	r0, r9
    a482:	bl	ed38 <_Balloc>
    a486:	mov	r6, r0
    a488:	cmp	r0, #0
    a48a:	beq.w	a9b8 <_strtod_l+0x9c8>
    a48e:	ldr.w	r2, [fp, #16]
    a492:	vldr	d7, [sp, #24]
    a496:	adds	r2, #2
    a498:	lsls	r2, r2, #2
    a49a:	add.w	r1, fp, #12
    a49e:	adds	r0, #12
    a4a0:	vstr	d7, [sp, #16]
    a4a4:	bl	69a8 <memcpy>
    a4a8:	vldr	d0, [sp, #16]
    a4ac:	add	r2, sp, #88	; 0x58
    a4ae:	add	r1, sp, #84	; 0x54
    a4b0:	mov	r0, r9
    a4b2:	bl	f45c <__d2b>
    a4b6:	str	r0, [sp, #80]	; 0x50
    a4b8:	cmp	r0, #0
    a4ba:	beq.w	ac20 <_strtod_l+0xc30>
    a4be:	movs	r1, #1
    a4c0:	mov	r0, r9
    a4c2:	bl	ef4c <__i2b>
    a4c6:	mov	r4, r0
    a4c8:	cmp	r0, #0
    a4ca:	beq.w	a9b8 <_strtod_l+0x9c8>
    a4ce:	ldr	r2, [sp, #84]	; 0x54
    a4d0:	cmp	r2, #0
    a4d2:	blt.w	a6ae <_strtod_l+0x6be>
    a4d6:	ldr	r3, [sp, #44]	; 0x2c
    a4d8:	ldr	r5, [sp, #40]	; 0x28
    a4da:	adds	r7, r3, r2
    a4dc:	ldr	r1, [sp, #36]	; 0x24
    a4de:	ldr	r3, [sp, #88]	; 0x58
    a4e0:	subs	r2, r2, r1
    a4e2:	add	r2, r3
    a4e4:	ldr	r1, [pc, #580]	; (a72c <_strtod_l+0x73c>)
    a4e6:	subs	r2, #1
    a4e8:	cmp	r2, r1
    a4ea:	rsb	r3, r3, #54	; 0x36
    a4ee:	bge.w	a67c <_strtod_l+0x68c>
    a4f2:	subs	r1, r1, r2
    a4f4:	cmp	r1, #31
    a4f6:	sub.w	r3, r3, r1
    a4fa:	bgt.w	a6bc <_strtod_l+0x6cc>
    a4fe:	movs	r2, #1
    a500:	lsls	r2, r1
    a502:	str	r2, [sp, #52]	; 0x34
    a504:	movs	r2, #0
    a506:	str	r2, [sp, #56]	; 0x38
    a508:	add.w	sl, r7, r3
    a50c:	add	r5, r3
    a50e:	ldr	r3, [sp, #36]	; 0x24
    a510:	cmp	r7, sl
    a512:	mov	r2, r7
    a514:	add	r5, r3
    a516:	it	ge
    a518:	movge	r2, sl
    a51a:	cmp	r2, r5
    a51c:	it	ge
    a51e:	movge	r2, r5
    a520:	cmp	r2, #0
    a522:	ble.n	a52c <_strtod_l+0x53c>
    a524:	rsb	sl, r2, sl
    a528:	subs	r5, r5, r2
    a52a:	subs	r7, r7, r2
    a52c:	ldr	r3, [sp, #44]	; 0x2c
    a52e:	cbz	r3, a560 <_strtod_l+0x570>
    a530:	mov	r1, r4
    a532:	mov	r2, r3
    a534:	mov	r0, r9
    a536:	bl	f090 <__pow5mult>
    a53a:	mov	r4, r0
    a53c:	cmp	r0, #0
    a53e:	beq.w	a9b8 <_strtod_l+0x9c8>
    a542:	mov	r1, r0
    a544:	ldr	r2, [sp, #80]	; 0x50
    a546:	mov	r0, r9
    a548:	bl	ef60 <__multiply>
    a54c:	cmp	r0, #0
    a54e:	beq.w	a9b8 <_strtod_l+0x9c8>
    a552:	str	r0, [sp, #48]	; 0x30
    a554:	ldr	r1, [sp, #80]	; 0x50
    a556:	mov	r0, r9
    a558:	bl	ed84 <_Bfree>
    a55c:	ldr	r2, [sp, #48]	; 0x30
    a55e:	str	r2, [sp, #80]	; 0x50
    a560:	cmp.w	sl, #0
    a564:	ble.n	a578 <_strtod_l+0x588>
    a566:	mov	r2, sl
    a568:	ldr	r1, [sp, #80]	; 0x50
    a56a:	mov	r0, r9
    a56c:	bl	f130 <__lshift>
    a570:	str	r0, [sp, #80]	; 0x50
    a572:	cmp	r0, #0
    a574:	beq.w	ac20 <_strtod_l+0xc30>
    a578:	ldr	r3, [sp, #40]	; 0x28
    a57a:	cbz	r3, a58e <_strtod_l+0x59e>
    a57c:	mov	r1, r6
    a57e:	ldr	r2, [sp, #40]	; 0x28
    a580:	mov	r0, r9
    a582:	bl	f090 <__pow5mult>
    a586:	mov	r6, r0
    a588:	cmp	r0, #0
    a58a:	beq.w	a9b8 <_strtod_l+0x9c8>
    a58e:	cmp	r5, #0
    a590:	ble.n	a5a4 <_strtod_l+0x5b4>
    a592:	mov	r1, r6
    a594:	mov	r2, r5
    a596:	mov	r0, r9
    a598:	bl	f130 <__lshift>
    a59c:	mov	r6, r0
    a59e:	cmp	r0, #0
    a5a0:	beq.w	a9b8 <_strtod_l+0x9c8>
    a5a4:	cmp	r7, #0
    a5a6:	ble.n	a5ba <_strtod_l+0x5ca>
    a5a8:	mov	r1, r4
    a5aa:	mov	r2, r7
    a5ac:	mov	r0, r9
    a5ae:	bl	f130 <__lshift>
    a5b2:	mov	r4, r0
    a5b4:	cmp	r0, #0
    a5b6:	beq.w	a9b8 <_strtod_l+0x9c8>
    a5ba:	mov	r2, r6
    a5bc:	ldr	r1, [sp, #80]	; 0x50
    a5be:	mov	r0, r9
    a5c0:	bl	f224 <__mdiff>
    a5c4:	mov	r8, r0
    a5c6:	cmp	r0, #0
    a5c8:	beq.w	a9b8 <_strtod_l+0x9c8>
    a5cc:	movs	r3, #0
    a5ce:	ldr	r5, [r0, #12]
    a5d0:	str	r3, [r0, #12]
    a5d2:	mov	r1, r4
    a5d4:	bl	f1e0 <__mcmp>
    a5d8:	cmp	r0, #0
    a5da:	blt.w	ac26 <_strtod_l+0xc36>
    a5de:	beq.w	ace8 <_strtod_l+0xcf8>
    a5e2:	mov	r1, r4
    a5e4:	mov	r0, r8
    a5e6:	bl	f518 <__ratio>
    a5ea:	vmov.f64	d7, #0	; 0x40000000  2.0
    a5ee:	vcmpe.f64	d0, d7
    a5f2:	vmrs	APSR_nzcv, fpscr
    a5f6:	bhi.n	a686 <_strtod_l+0x696>
    a5f8:	cmp	r5, #0
    a5fa:	beq.n	a6cc <_strtod_l+0x6dc>
    a5fc:	vmov.f64	d13, #112	; 0x3f800000  1.0
    a600:	ldr	r3, [pc, #300]	; (a730 <_strtod_l+0x740>)
    a602:	ldr	r1, [sp, #28]
    a604:	movs	r2, #0
    a606:	ldr	r7, [pc, #300]	; (a734 <_strtod_l+0x744>)
    a608:	ldr	r0, [pc, #300]	; (a738 <_strtod_l+0x748>)
    a60a:	ands	r7, r1
    a60c:	cmp	r7, r0
    a60e:	beq.w	a8f0 <_strtod_l+0x900>
    a612:	ldr	r1, [sp, #36]	; 0x24
    a614:	cbz	r1, a62e <_strtod_l+0x63e>
    a616:	cmp.w	r7, #111149056	; 0x6a00000
    a61a:	bhi.n	a62e <_strtod_l+0x63e>
    a61c:	vcmpe.f64	d13, d8
    a620:	vmrs	APSR_nzcv, fpscr
    a624:	bls.w	a80c <_strtod_l+0x81c>
    a628:	add.w	r1, r3, #112197632	; 0x6b00000
    a62c:	subs	r3, r1, r7
    a62e:	vldr	d0, [sp, #16]
    a632:	vmov	d12, r2, r3
    a636:	bl	f338 <__ulp>
    a63a:	vldr	d7, [sp, #16]
    a63e:	vfma.f64	d7, d12, d0
    a642:	vmov	r2, r3, d7
    a646:	strd	r2, r3, [sp, #24]
    a64a:	mov	r2, r3
    a64c:	ldr	r3, [sp, #36]	; 0x24
    a64e:	cbnz	r3, a65a <_strtod_l+0x66a>
    a650:	ldr	r3, [pc, #224]	; (a734 <_strtod_l+0x744>)
    a652:	ands	r3, r2
    a654:	cmp	r7, r3
    a656:	beq.w	a954 <_strtod_l+0x964>
    a65a:	ldr	r1, [sp, #80]	; 0x50
    a65c:	mov	r0, r9
    a65e:	bl	ed84 <_Bfree>
    a662:	mov	r1, r6
    a664:	mov	r0, r9
    a666:	bl	ed84 <_Bfree>
    a66a:	mov	r1, r4
    a66c:	mov	r0, r9
    a66e:	bl	ed84 <_Bfree>
    a672:	mov	r1, r8
    a674:	mov	r0, r9
    a676:	bl	ed84 <_Bfree>
    a67a:	b.n	a47c <_strtod_l+0x48c>
    a67c:	movs	r2, #0
    a67e:	str	r2, [sp, #56]	; 0x38
    a680:	movs	r2, #1
    a682:	str	r2, [sp, #52]	; 0x34
    a684:	b.n	a508 <_strtod_l+0x518>
    a686:	vmov.f64	d7, #96	; 0x3f000000  0.5
    a68a:	vmul.f64	d13, d0, d7
    a68e:	cbnz	r5, a6ec <_strtod_l+0x6fc>
    a690:	vneg.f64	d7, d13
    a694:	vmov	r2, r3, d7
    a698:	ldr	r1, [sp, #28]
    a69a:	b.n	a606 <_strtod_l+0x616>
    a69c:	mov.w	fp, #1
    a6a0:	cbnz	r0, a702 <_strtod_l+0x712>
    a6a2:	ldr	r3, [sp, #36]	; 0x24
    a6a4:	cmp	r3, #0
    a6a6:	beq.w	a090 <_strtod_l+0xa0>
    a6aa:	mov	r5, r0
    a6ac:	b.n	a36e <_strtod_l+0x37e>
    a6ae:	ldr	r3, [sp, #40]	; 0x28
    a6b0:	ldr	r7, [sp, #44]	; 0x2c
    a6b2:	subs	r5, r3, r2
    a6b4:	b.n	a4dc <_strtod_l+0x4ec>
    a6b6:	mov.w	fp, #1
    a6ba:	b.n	a13e <_strtod_l+0x14e>
    a6bc:	ldr	r1, [pc, #124]	; (a73c <_strtod_l+0x74c>)
    a6be:	subs	r1, r1, r2
    a6c0:	movs	r2, #1
    a6c2:	lsl.w	r1, r2, r1
    a6c6:	str	r1, [sp, #56]	; 0x38
    a6c8:	str	r2, [sp, #52]	; 0x34
    a6ca:	b.n	a508 <_strtod_l+0x518>
    a6cc:	ldrd	r1, r2, [sp, #24]
    a6d0:	cmp	r1, #0
    a6d2:	beq.w	a7de <_strtod_l+0x7ee>
    a6d6:	ldrd	r1, r2, [sp, #24]
    a6da:	cmp	r1, #1
    a6dc:	beq.w	abbc <_strtod_l+0xbcc>
    a6e0:	mov	r1, r2
    a6e2:	vmov.f64	d13, #112	; 0x3f800000  1.0
    a6e6:	movs	r2, #0
    a6e8:	ldr	r3, [pc, #84]	; (a740 <_strtod_l+0x750>)
    a6ea:	b.n	a606 <_strtod_l+0x616>
    a6ec:	vmov	r2, r3, d13
    a6f0:	b.n	a698 <_strtod_l+0x6a8>
    a6f2:	movs	r3, #1
    a6f4:	str	r3, [sp, #16]
    a6f6:	add.w	r3, r8, #2
    a6fa:	str	r3, [sp, #76]	; 0x4c
    a6fc:	ldrb.w	r4, [r8, #2]
    a700:	b.n	a38c <_strtod_l+0x39c>
    a702:	movs	r5, #0
    a704:	b.n	a36e <_strtod_l+0x37e>
    a706:	nop
    a708:	.word	0x94a03595
    a70c:	.word	0x3fdfffff
    a710:	.word	0x35afe535
    a714:	.word	0x3fe00000
    a718:	.word	0x94a03595
    a71c:	.word	0x3fcfffff
    a720:	.word	0xffc00000
    a724:	.word	0x41dfffff
    a728:	.word	0x200002a8
    a72c:	.word	0xfffffc02
    a730:	.word	0x3ff00000
    a734:	.word	0x7ff00000
    a738:	.word	0x7fe00000
    a73c:	.word	0xfffffbe2
    a740:	.word	0xbff00000
    a744:	cmp.w	r3, #308	; 0x134
    a748:	bgt.w	a93c <_strtod_l+0x94c>
    a74c:	asrs	r3, r3, #4
    a74e:	cmp	r3, #1
    a750:	ldr.w	lr, [pc, #704]	; aa14 <_strtod_l+0xa24>
    a754:	ble.w	ad52 <_strtod_l+0xd62>
    a758:	vldr	d7, [sp, #24]
    a75c:	vstr	d7, [sp, #16]
    a760:	movs	r7, #0
    a762:	mov	r1, lr
    a764:	mov	r0, r7
    a766:	tst.w	r3, #1
    a76a:	add.w	r0, r0, #1
    a76e:	mov.w	r3, r3, asr #1
    a772:	beq.n	a786 <_strtod_l+0x796>
    a774:	vldr	d6, [sp, #16]
    a778:	vldr	d7, [r1]
    a77c:	vmul.f64	d7, d6, d7
    a780:	vstr	d7, [sp, #16]
    a784:	movs	r7, #1
    a786:	cmp	r3, #1
    a788:	add.w	r1, r1, #8
    a78c:	bne.n	a766 <_strtod_l+0x776>
    a78e:	cmp	r7, #0
    a790:	bne.w	ae32 <_strtod_l+0xe42>
    a794:	ldr	r3, [sp, #28]
    a796:	ldr	r1, [pc, #608]	; (a9f8 <_strtod_l+0xa08>)
    a798:	sub.w	r3, r3, #55574528	; 0x3500000
    a79c:	str	r3, [sp, #28]
    a79e:	add.w	r0, lr, r0, lsl #3
    a7a2:	vldr	d6, [sp, #24]
    a7a6:	vldr	d7, [r0]
    a7aa:	vmul.f64	d7, d7, d6
    a7ae:	vmov	r7, r8, d7
    a7b2:	bic.w	r3, r8, #2147483648	; 0x80000000
    a7b6:	lsrs	r3, r3, #20
    a7b8:	lsls	r3, r3, #20
    a7ba:	cmp	r3, r1
    a7bc:	strd	r7, r8, [sp, #24]
    a7c0:	bhi.w	a93c <_strtod_l+0x94c>
    a7c4:	sub.w	r1, r1, #1048576	; 0x100000
    a7c8:	cmp	r3, r1
    a7ca:	bls.w	ad20 <_strtod_l+0xd30>
    a7ce:	ldr	r3, [pc, #556]	; (a9fc <_strtod_l+0xa0c>)
    a7d0:	str	r3, [sp, #28]
    a7d2:	movs	r3, #0
    a7d4:	str	r3, [sp, #36]	; 0x24
    a7d6:	mov.w	r3, #4294967295
    a7da:	str	r3, [sp, #24]
    a7dc:	b.n	a43c <_strtod_l+0x44c>
    a7de:	ubfx	r3, r2, #0, #20
    a7e2:	mov	r1, r2
    a7e4:	cmp	r3, #0
    a7e6:	bne.w	a6e2 <_strtod_l+0x6f2>
    a7ea:	vmov.f64	d7, #112	; 0x3f800000  1.0
    a7ee:	vcmpe.f64	d0, d7
    a7f2:	vmrs	APSR_nzcv, fpscr
    a7f6:	bmi.w	ad2a <_strtod_l+0xd3a>
    a7fa:	vmov.f64	d7, #96	; 0x3f000000  0.5
    a7fe:	vmul.f64	d13, d0, d7
    a802:	vneg.f64	d7, d13
    a806:	vmov	r2, r3, d7
    a80a:	b.n	a606 <_strtod_l+0x616>
    a80c:	vcvt.u32.f64	s0, d13
    a810:	vmov	r3, s0
    a814:	cmp	r3, #0
    a816:	beq.w	ab3a <_strtod_l+0xb4a>
    a81a:	vcvt.f64.u32	d13, s0
    a81e:	cmp	r5, #0
    a820:	bne.w	abb6 <_strtod_l+0xbc6>
    a824:	vneg.f64	d7, d13
    a828:	vmov	r2, r3, d7
    a82c:	b.n	a628 <_strtod_l+0x638>
    a82e:	add	r0, sp, #76	; 0x4c
    a830:	ldr	r1, [pc, #460]	; (aa00 <_strtod_l+0xa10>)
    a832:	bl	eaf0 <__match>
    a836:	cmp	r0, #0
    a838:	beq.w	a090 <_strtod_l+0xa0>
    a83c:	ldr	r3, [sp, #76]	; 0x4c
    a83e:	ldrb	r3, [r3, #0]
    a840:	cmp	r3, #40	; 0x28
    a842:	beq.w	add4 <_strtod_l+0xde4>
    a846:	ldr	r3, [pc, #444]	; (aa04 <_strtod_l+0xa14>)
    a848:	str	r3, [sp, #28]
    a84a:	movs	r3, #0
    a84c:	str	r3, [sp, #24]
    a84e:	b.n	a346 <_strtod_l+0x356>
    a850:	str.w	r8, [sp, #76]	; 0x4c
    a854:	movs	r3, #0
    a856:	b.n	a14c <_strtod_l+0x15c>
    a858:	movs	r3, #0
    a85a:	str	r3, [sp, #16]
    a85c:	b.n	a6f6 <_strtod_l+0x706>
    a85e:	ldr	r2, [sp, #32]
    a860:	str	r6, [sp, #8]
    a862:	add	r3, sp, #80	; 0x50
    a864:	str	r2, [sp, #4]
    a866:	str	r3, [sp, #0]
    a868:	ldr	r2, [pc, #412]	; (aa08 <_strtod_l+0xa18>)
    a86a:	add	r3, sp, #84	; 0x54
    a86c:	add	r1, sp, #76	; 0x4c
    a86e:	mov	r0, r9
    a870:	bl	e5e0 <__gethex>
    a874:	ands.w	r6, r0, #7
    a878:	mov	r4, r0
    a87a:	beq.w	a292 <_strtod_l+0x2a2>
    a87e:	cmp	r6, #6
    a880:	bne.w	ab40 <_strtod_l+0xb50>
    a884:	vldr	d7, [pc, #360]	; a9f0 <_strtod_l+0xa00>
    a888:	adds	r5, #1
    a88a:	movs	r3, #0
    a88c:	str	r5, [sp, #76]	; 0x4c
    a88e:	vstr	d7, [sp, #16]
    a892:	str	r3, [sp, #32]
    a894:	b.n	a29a <_strtod_l+0x2aa>
    a896:	ldr.w	r1, [fp]
    a89a:	ldr	r2, [sp, #16]
    a89c:	mov	r0, r5
    a89e:	bl	9f1c <strncmp>
    a8a2:	cbz	r0, a8b4 <_strtod_l+0x8c4>
    a8a4:	movs	r2, #0
    a8a6:	mov	r7, r2
    a8a8:	mov	r6, r2
    a8aa:	mov	r0, r2
    a8ac:	mov	ip, r2
    a8ae:	mov	r5, r2
    a8b0:	mov	fp, r2
    a8b2:	b.n	a13e <_strtod_l+0x14e>
    a8b4:	ldr	r2, [sp, #76]	; 0x4c
    a8b6:	ldr	r1, [sp, #16]
    a8b8:	adds	r3, r2, r1
    a8ba:	str	r3, [sp, #76]	; 0x4c
    a8bc:	ldrb	r4, [r2, r1]
    a8be:	cmp	r4, #48	; 0x30
    a8c0:	bne.n	a8d0 <_strtod_l+0x8e0>
    a8c2:	adds	r3, #1
    a8c4:	str	r3, [sp, #76]	; 0x4c
    a8c6:	ldrb	r4, [r3, #0]
    a8c8:	cmp	r4, #48	; 0x30
    a8ca:	add.w	r0, r0, #1
    a8ce:	beq.n	a8c2 <_strtod_l+0x8d2>
    a8d0:	sub.w	r3, r4, #49	; 0x31
    a8d4:	cmp	r3, #8
    a8d6:	bls.w	abde <_strtod_l+0xbee>
    a8da:	movs	r2, #0
    a8dc:	cmp	r4, #101	; 0x65
    a8de:	mov	r7, r2
    a8e0:	mov	r6, r2
    a8e2:	mov	ip, r2
    a8e4:	beq.w	a69c <_strtod_l+0x6ac>
    a8e8:	mov	r5, r2
    a8ea:	mov.w	fp, #1
    a8ee:	b.n	a144 <_strtod_l+0x154>
    a8f0:	sub.w	r1, r1, #55574528	; 0x3500000
    a8f4:	str	r1, [sp, #28]
    a8f6:	vldr	d14, [sp, #24]
    a8fa:	vmov.f64	d0, d14
    a8fe:	vmov	d12, r2, r3
    a902:	bl	f338 <__ulp>
    a906:	vfma.f64	d14, d12, d0
    a90a:	vmov	r2, r3, d14
    a90e:	strd	r2, r3, [sp, #24]
    a912:	bic.w	r3, r3, #2147483648	; 0x80000000
    a916:	lsrs	r3, r3, #20
    a918:	ldr	r2, [pc, #240]	; (aa0c <_strtod_l+0xa1c>)
    a91a:	ldrd	r0, r1, [sp, #16]
    a91e:	lsls	r3, r3, #20
    a920:	cmp	r3, r2
    a922:	strd	r0, r1, [sp, #64]	; 0x40
    a926:	bls.w	aafa <_strtod_l+0xb0a>
    a92a:	ldr	r3, [pc, #208]	; (a9fc <_strtod_l+0xa0c>)
    a92c:	cmp	r1, r3
    a92e:	beq.n	a9b2 <_strtod_l+0x9c2>
    a930:	ldr	r3, [pc, #200]	; (a9fc <_strtod_l+0xa0c>)
    a932:	str	r3, [sp, #28]
    a934:	mov.w	r3, #4294967295
    a938:	str	r3, [sp, #24]
    a93a:	b.n	a65a <_strtod_l+0x66a>
    a93c:	ldr	r3, [pc, #208]	; (aa10 <_strtod_l+0xa20>)
    a93e:	str	r3, [sp, #28]
    a940:	movs	r2, #0
    a942:	str	r2, [sp, #24]
    a944:	vldr	d7, [sp, #24]
    a948:	movs	r3, #34	; 0x22
    a94a:	vstr	d7, [sp, #16]
    a94e:	str.w	r3, [r9]
    a952:	b.n	a29a <_strtod_l+0x2aa>
    a954:	vcvt.s32.f64	s14, d13
    a958:	vcvt.f64.s32	d7, s14
    a95c:	vsub.f64	d7, d13, d7
    a960:	cmp	r5, #0
    a962:	bne.n	a9d6 <_strtod_l+0x9e6>
    a964:	ldr	r3, [sp, #24]
    a966:	cbnz	r3, a9d6 <_strtod_l+0x9e6>
    a968:	ubfx	r2, r2, #0, #20
    a96c:	cbnz	r2, a9d6 <_strtod_l+0x9e6>
    a96e:	vcmpe.f64	d7, d11
    a972:	vmrs	APSR_nzcv, fpscr
    a976:	bpl.w	a65a <_strtod_l+0x66a>
    a97a:	vldr	d7, [sp, #24]
    a97e:	vstr	d7, [sp, #16]
    a982:	ldr.w	sl, [sp, #60]	; 0x3c
    a986:	ldr	r0, [sp, #80]	; 0x50
    a988:	mov	r1, r0
    a98a:	mov	r0, r9
    a98c:	bl	ed84 <_Bfree>
    a990:	mov	r1, r6
    a992:	mov	r0, r9
    a994:	bl	ed84 <_Bfree>
    a998:	mov	r1, r4
    a99a:	mov	r0, r9
    a99c:	bl	ed84 <_Bfree>
    a9a0:	mov	r1, fp
    a9a2:	mov	r0, r9
    a9a4:	bl	ed84 <_Bfree>
    a9a8:	mov	r1, r8
    a9aa:	mov	r0, r9
    a9ac:	bl	ed84 <_Bfree>
    a9b0:	b.n	a29a <_strtod_l+0x2aa>
    a9b2:	ldr	r3, [sp, #64]	; 0x40
    a9b4:	adds	r3, #1
    a9b6:	bne.n	a930 <_strtod_l+0x940>
    a9b8:	ldr.w	sl, [sp, #60]	; 0x3c
    a9bc:	ldr	r0, [sp, #80]	; 0x50
    a9be:	ldr	r3, [pc, #80]	; (aa10 <_strtod_l+0xa20>)
    a9c0:	str	r3, [sp, #28]
    a9c2:	movs	r2, #0
    a9c4:	str	r2, [sp, #24]
    a9c6:	vldr	d7, [sp, #24]
    a9ca:	movs	r3, #34	; 0x22
    a9cc:	vstr	d7, [sp, #16]
    a9d0:	str.w	r3, [r9]
    a9d4:	b.n	a988 <_strtod_l+0x998>
    a9d6:	vcmpe.f64	d7, d10
    a9da:	vmrs	APSR_nzcv, fpscr
    a9de:	bmi.n	a97a <_strtod_l+0x98a>
    a9e0:	vcmpe.f64	d7, d9
    a9e4:	vmrs	APSR_nzcv, fpscr
    a9e8:	ble.w	a65a <_strtod_l+0x66a>
    a9ec:	b.n	a97a <_strtod_l+0x98a>
    a9ee:	nop
	...
    a9f8:	.word	0x7ca00000
    a9fc:	.word	0x7fefffff
    aa00:	.word	0x200016a4
    aa04:	.word	0xfff80000
    aa08:	.word	0x20000ac8
    aa0c:	.word	0x7c9fffff
    aa10:	.word	0x7ff00000
    aa14:	.word	0x20000280
    aa18:	beq.w	a438 <_strtod_l+0x448>
    aa1c:	negs	r3, r3
    aa1e:	ands.w	r0, r3, #15
    aa22:	beq.n	aa3a <_strtod_l+0xa4a>
    aa24:	ldr	r1, [pc, #688]	; (acd8 <_strtod_l+0xce8>)
    aa26:	add.w	r1, r1, r0, lsl #3
    aa2a:	vldr	d5, [sp, #24]
    aa2e:	vldr	d7, [r1]
    aa32:	vdiv.f64	d6, d5, d7
    aa36:	vstr	d6, [sp, #24]
    aa3a:	asrs	r3, r3, #4
    aa3c:	beq.w	a438 <_strtod_l+0x448>
    aa40:	cmp	r3, #31
    aa42:	bgt.n	aac0 <_strtod_l+0xad0>
    aa44:	ands.w	r1, r3, #16
    aa48:	beq.w	adba <_strtod_l+0xdca>
    aa4c:	cmp	r3, #0
    aa4e:	ble.w	ae24 <_strtod_l+0xe34>
    aa52:	movs	r1, #106	; 0x6a
    aa54:	str	r1, [sp, #36]	; 0x24
    aa56:	vldr	d7, [sp, #24]
    aa5a:	vstr	d7, [sp, #16]
    aa5e:	ldr	r1, [pc, #636]	; (acdc <_strtod_l+0xcec>)
    aa60:	movs	r0, #0
    aa62:	lsls	r7, r3, #31
    aa64:	bpl.n	aa78 <_strtod_l+0xa88>
    aa66:	vldr	d6, [sp, #16]
    aa6a:	vldr	d7, [r1]
    aa6e:	vmul.f64	d7, d6, d7
    aa72:	vstr	d7, [sp, #16]
    aa76:	movs	r0, #1
    aa78:	asrs	r3, r3, #1
    aa7a:	add.w	r1, r1, #8
    aa7e:	bne.n	aa62 <_strtod_l+0xa72>
    aa80:	cmp	r0, #0
    aa82:	bne.w	ae3c <_strtod_l+0xe4c>
    aa86:	ldr	r3, [sp, #36]	; 0x24
    aa88:	cbz	r3, aab0 <_strtod_l+0xac0>
    aa8a:	ldrd	r0, r1, [sp, #24]
    aa8e:	ubfx	r3, r1, #20, #11
    aa92:	rsb	r3, r3, #107	; 0x6b
    aa96:	cmp	r3, #0
    aa98:	ble.n	aab0 <_strtod_l+0xac0>
    aa9a:	cmp	r3, #31
    aa9c:	ble.w	adc4 <_strtod_l+0xdd4>
    aaa0:	movs	r0, #0
    aaa2:	cmp	r3, #52	; 0x34
    aaa4:	str	r0, [sp, #24]
    aaa6:	ble.w	ae0e <_strtod_l+0xe1e>
    aaaa:	mov.w	r3, #57671680	; 0x3700000
    aaae:	str	r3, [sp, #28]
    aab0:	vldr	d7, [sp, #24]
    aab4:	vcmp.f64	d7, #0.0
    aab8:	vmrs	APSR_nzcv, fpscr
    aabc:	bne.w	a43c <_strtod_l+0x44c>
    aac0:	vldr	d7, [pc, #524]	; acd0 <_strtod_l+0xce0>
    aac4:	movs	r3, #34	; 0x22
    aac6:	str.w	r3, [r9]
    aaca:	vstr	d7, [sp, #16]
    aace:	b.w	a29a <_strtod_l+0x2aa>
    aad2:	ldr	r1, [sp, #76]	; 0x4c
    aad4:	adds	r5, #1
    aad6:	cmp	r0, #8
    aad8:	ble.w	abf2 <_strtod_l+0xc02>
    aadc:	cmp	r5, #16
    aade:	itt	le
    aae0:	addle.w	r7, r7, r7, lsl #2
    aae4:	addle.w	r7, r3, r7, lsl #1
    aae8:	movs	r0, #0
    aaea:	adds	r3, r1, #1
    aaec:	str	r3, [sp, #76]	; 0x4c
    aaee:	ldrb	r4, [r1, #1]
    aaf0:	b.w	a224 <_strtod_l+0x234>
    aaf4:	movw	r3, #19999	; 0x4e1f
    aaf8:	b.n	a3fe <_strtod_l+0x40e>
    aafa:	ldr	r3, [sp, #28]
    aafc:	add.w	r2, r3, #55574528	; 0x3500000
    ab00:	str	r2, [sp, #28]
    ab02:	b.n	a64c <_strtod_l+0x65c>
    ab04:	rsb	r3, r5, #37	; 0x25
    ab08:	cmp	r4, r3
    ab0a:	bgt.w	a40a <_strtod_l+0x41a>
    ab0e:	rsb	r5, r5, #15
    ab12:	ldr	r3, [pc, #452]	; (acd8 <_strtod_l+0xce8>)
    ab14:	subs	r2, r4, r5
    ab16:	add.w	r2, r3, r2, lsl #3
    ab1a:	add.w	r3, r3, r5, lsl #3
    ab1e:	vldr	d6, [r2]
    ab22:	vldr	d7, [r3]
    ab26:	vldr	d5, [sp, #24]
    ab2a:	vmul.f64	d7, d7, d5
    ab2e:	vmul.f64	d7, d7, d6
    ab32:	vstr	d7, [sp, #16]
    ab36:	b.w	a29a <_strtod_l+0x2aa>
    ab3a:	vmov.f64	d13, #112	; 0x3f800000  1.0
    ab3e:	b.n	a81e <_strtod_l+0x82e>
    ab40:	ldr	r2, [sp, #80]	; 0x50
    ab42:	cbz	r2, ab54 <_strtod_l+0xb64>
    ab44:	movs	r1, #53	; 0x35
    ab46:	add	r0, sp, #88	; 0x58
    ab48:	bl	f574 <__copybits>
    ab4c:	mov	r0, r9
    ab4e:	ldr	r1, [sp, #80]	; 0x50
    ab50:	bl	ed84 <_Bfree>
    ab54:	cmp	r6, #6
    ab56:	bhi.n	ab70 <_strtod_l+0xb80>
    ab58:	tbb	[pc, r6]
    ab5c:	.word	0x13181d29
    ab60:	.short	0x1d04
    ab62:	.byte	0x29
    ab63:	.byte	0x00
    ab64:	mvn.w	r3, #2147483648	; 0x80000000
    ab68:	str	r3, [sp, #28]
    ab6a:	mov.w	r3, #4294967295
    ab6e:	str	r3, [sp, #24]
    ab70:	lsls	r3, r4, #28
    ab72:	bpl.w	a346 <_strtod_l+0x356>
    ab76:	ldr	r3, [sp, #28]
    ab78:	orr.w	r3, r3, #2147483648	; 0x80000000
    ab7c:	str	r3, [sp, #28]
    ab7e:	b.w	a346 <_strtod_l+0x356>
    ab82:	ldr	r3, [pc, #348]	; (ace0 <_strtod_l+0xcf0>)
    ab84:	str	r3, [sp, #28]
    ab86:	movs	r3, #0
    ab88:	str	r3, [sp, #24]
    ab8a:	b.n	ab70 <_strtod_l+0xb80>
    ab8c:	ldr	r3, [sp, #88]	; 0x58
    ab8e:	str	r3, [sp, #24]
    ab90:	ldr	r3, [sp, #92]	; 0x5c
    ab92:	str	r3, [sp, #28]
    ab94:	b.n	ab70 <_strtod_l+0xb80>
    ab96:	ldr	r2, [sp, #84]	; 0x54
    ab98:	ldr	r3, [sp, #92]	; 0x5c
    ab9a:	ldr	r1, [sp, #88]	; 0x58
    ab9c:	str	r1, [sp, #24]
    ab9e:	addw	r2, r2, #1075	; 0x433
    aba2:	bic.w	r3, r3, #1048576	; 0x100000
    aba6:	orr.w	r3, r3, r2, lsl #20
    abaa:	str	r3, [sp, #28]
    abac:	b.n	ab70 <_strtod_l+0xb80>
    abae:	movs	r3, #0
    abb0:	str	r3, [sp, #28]
    abb2:	str	r3, [sp, #24]
    abb4:	b.n	ab70 <_strtod_l+0xb80>
    abb6:	vmov	r2, r3, d13
    abba:	b.n	a628 <_strtod_l+0x638>
    abbc:	ldrd	r2, r3, [sp, #24]
    abc0:	mov	r1, r3
    abc2:	cmp	r3, #0
    abc4:	bne.w	a6e2 <_strtod_l+0x6f2>
    abc8:	ldr.w	sl, [sp, #60]	; 0x3c
    abcc:	ldr	r0, [sp, #80]	; 0x50
    abce:	vldr	d7, [pc, #256]	; acd0 <_strtod_l+0xce0>
    abd2:	movs	r3, #34	; 0x22
    abd4:	str.w	r3, [r9]
    abd8:	vstr	d7, [sp, #16]
    abdc:	b.n	a988 <_strtod_l+0x998>
    abde:	ldr	r3, [sp, #76]	; 0x4c
    abe0:	str	r3, [sp, #40]	; 0x28
    abe2:	movs	r6, #0
    abe4:	subs	r4, #48	; 0x30
    abe6:	add.w	ip, r0, #1
    abea:	mov	r1, r3
    abec:	mov	r2, r6
    abee:	mov	r7, r6
    abf0:	movs	r5, #1
    abf2:	add.w	r6, r6, r6, lsl #2
    abf6:	add.w	r6, r4, r6, lsl #1
    abfa:	movs	r0, #0
    abfc:	b.n	aaea <_strtod_l+0xafa>
    abfe:	cmn.w	r4, #22
    ac02:	blt.w	a40a <_strtod_l+0x41a>
    ac06:	ldr	r3, [pc, #208]	; (acd8 <_strtod_l+0xce8>)
    ac08:	sub.w	r4, r3, r4, lsl #3
    ac0c:	vldr	d7, [r4]
    ac10:	vldr	d5, [sp, #24]
    ac14:	vdiv.f64	d6, d5, d7
    ac18:	vstr	d6, [sp, #16]
    ac1c:	b.w	a29a <_strtod_l+0x2aa>
    ac20:	ldr.w	sl, [sp, #60]	; 0x3c
    ac24:	b.n	a9be <_strtod_l+0x9ce>
    ac26:	ldr.w	sl, [sp, #60]	; 0x3c
    ac2a:	cbnz	r5, ac94 <_strtod_l+0xca4>
    ac2c:	ldrd	r1, r2, [sp, #24]
    ac30:	cbnz	r1, ac94 <_strtod_l+0xca4>
    ac32:	ubfx	r3, r2, #0, #20
    ac36:	mov	r7, r2
    ac38:	cbnz	r3, ac94 <_strtod_l+0xca4>
    ac3a:	bic.w	r3, r2, #2147483648	; 0x80000000
    ac3e:	lsrs	r3, r3, #20
    ac40:	lsls	r3, r3, #20
    ac42:	cmp.w	r3, #112197632	; 0x6b00000
    ac46:	bls.n	ac94 <_strtod_l+0xca4>
    ac48:	ldr.w	r3, [r8, #20]
    ac4c:	cbnz	r3, ac56 <_strtod_l+0xc66>
    ac4e:	ldr.w	r3, [r8, #16]
    ac52:	cmp	r3, #1
    ac54:	ble.n	ac94 <_strtod_l+0xca4>
    ac56:	mov	r1, r8
    ac58:	movs	r2, #1
    ac5a:	mov	r0, r9
    ac5c:	bl	f130 <__lshift>
    ac60:	mov	r1, r4
    ac62:	mov	r8, r0
    ac64:	bl	f1e0 <__mcmp>
    ac68:	cmp	r0, #0
    ac6a:	ble.n	ac94 <_strtod_l+0xca4>
    ac6c:	ldr	r3, [sp, #36]	; 0x24
    ac6e:	cmp	r3, #0
    ac70:	bne.w	adf8 <_strtod_l+0xe08>
    ac74:	ldr	r3, [pc, #104]	; (ace0 <_strtod_l+0xcf0>)
    ac76:	ands	r3, r7
    ac78:	sub.w	r3, r3, #1048576	; 0x100000
    ac7c:	mvn.w	r3, r3, lsr #20
    ac80:	mvn.w	r3, r3, lsl #20
    ac84:	str	r3, [sp, #28]
    ac86:	mov.w	r3, #4294967295
    ac8a:	str	r3, [sp, #24]
    ac8c:	vldr	d7, [sp, #24]
    ac90:	vstr	d7, [sp, #16]
    ac94:	ldr	r3, [sp, #36]	; 0x24
    ac96:	cbz	r3, acc8 <_strtod_l+0xcd8>
    ac98:	ldr	r3, [pc, #72]	; (ace4 <_strtod_l+0xcf4>)
    ac9a:	str	r3, [sp, #68]	; 0x44
    ac9c:	movs	r3, #0
    ac9e:	str	r3, [sp, #64]	; 0x40
    aca0:	vldr	d7, [sp, #16]
    aca4:	vldr	d6, [sp, #64]	; 0x40
    aca8:	vmul.f64	d7, d7, d6
    acac:	vstr	d7, [sp, #16]
    acb0:	ldrd	r2, r3, [sp, #16]
    acb4:	strd	r2, r3, [sp, #24]
    acb8:	cbnz	r3, acc8 <_strtod_l+0xcd8>
    acba:	ldr	r3, [sp, #24]
    acbc:	cbnz	r3, acc8 <_strtod_l+0xcd8>
    acbe:	movs	r3, #34	; 0x22
    acc0:	ldr	r0, [sp, #80]	; 0x50
    acc2:	str.w	r3, [r9]
    acc6:	b.n	a988 <_strtod_l+0x998>
    acc8:	ldr	r0, [sp, #80]	; 0x50
    acca:	b.n	a988 <_strtod_l+0x998>
    accc:	nop.w
	...
    acd8:	.word	0x200002a8
    acdc:	.word	0x20000370
    ace0:	.word	0x7ff00000
    ace4:	.word	0x39500000
    ace8:	ldr.w	sl, [sp, #60]	; 0x3c
    acec:	cbz	r5, ad34 <_strtod_l+0xd44>
    acee:	ldr	r2, [sp, #28]
    acf0:	ldr	r3, [pc, #344]	; (ae4c <_strtod_l+0xe5c>)
    acf2:	ubfx	r1, r2, #0, #20
    acf6:	cmp	r1, r3
    acf8:	beq.n	ad56 <_strtod_l+0xd66>
    acfa:	ldr	r3, [sp, #56]	; 0x38
    acfc:	cbz	r3, ad48 <_strtod_l+0xd58>
    acfe:	ldr	r2, [sp, #28]
    ad00:	tst	r3, r2
    ad02:	beq.n	ac94 <_strtod_l+0xca4>
    ad04:	ldrd	r0, r1, [sp, #24]
    ad08:	ldr	r2, [sp, #36]	; 0x24
    ad0a:	cmp	r5, #0
    ad0c:	beq.n	ad96 <_strtod_l+0xda6>
    ad0e:	bl	9fbc <sulp>
    ad12:	vldr	d7, [sp, #16]
    ad16:	vadd.f64	d7, d7, d0
    ad1a:	vstr	d7, [sp, #16]
    ad1e:	b.n	ac94 <_strtod_l+0xca4>
    ad20:	add.w	r3, r8, #55574528	; 0x3500000
    ad24:	str	r3, [sp, #28]
    ad26:	b.w	a438 <_strtod_l+0x448>
    ad2a:	movs	r2, #0
    ad2c:	ldr	r3, [pc, #288]	; (ae50 <_strtod_l+0xe60>)
    ad2e:	vmov.f64	d13, #96	; 0x3f000000  0.5
    ad32:	b.n	a606 <_strtod_l+0x616>
    ad34:	ldrd	r1, r2, [sp, #24]
    ad38:	ubfx	r3, r2, #0, #20
    ad3c:	mov	r7, r2
    ad3e:	cmp	r3, #0
    ad40:	bne.n	acfa <_strtod_l+0xd0a>
    ad42:	cmp	r1, #0
    ad44:	bne.n	acfa <_strtod_l+0xd0a>
    ad46:	b.n	ac6c <_strtod_l+0xc7c>
    ad48:	ldr	r3, [sp, #52]	; 0x34
    ad4a:	ldr	r2, [sp, #24]
    ad4c:	tst	r3, r2
    ad4e:	beq.n	ac94 <_strtod_l+0xca4>
    ad50:	b.n	ad04 <_strtod_l+0xd14>
    ad52:	movs	r0, #0
    ad54:	b.n	a794 <_strtod_l+0x7a4>
    ad56:	ldr	r3, [sp, #36]	; 0x24
    ad58:	ldr	r1, [sp, #24]
    ad5a:	cbz	r3, adb4 <_strtod_l+0xdc4>
    ad5c:	ldr	r3, [pc, #244]	; (ae54 <_strtod_l+0xe64>)
    ad5e:	ands	r3, r2
    ad60:	cmp.w	r3, #111149056	; 0x6a00000
    ad64:	bhi.n	adb4 <_strtod_l+0xdc4>
    ad66:	lsrs	r3, r3, #20
    ad68:	rsb	r3, r3, #107	; 0x6b
    ad6c:	mov.w	r0, #4294967295
    ad70:	lsl.w	r3, r0, r3
    ad74:	cmp	r3, r1
    ad76:	bne.n	acfa <_strtod_l+0xd0a>
    ad78:	ldr	r1, [pc, #220]	; (ae58 <_strtod_l+0xe68>)
    ad7a:	cmp	r2, r1
    ad7c:	beq.n	ae1e <_strtod_l+0xe2e>
    ad7e:	ldr	r3, [pc, #212]	; (ae54 <_strtod_l+0xe64>)
    ad80:	ands	r3, r2
    ad82:	add.w	r3, r3, #1048576	; 0x100000
    ad86:	str	r3, [sp, #28]
    ad88:	movs	r3, #0
    ad8a:	str	r3, [sp, #24]
    ad8c:	vldr	d7, [sp, #24]
    ad90:	vstr	d7, [sp, #16]
    ad94:	b.n	ac94 <_strtod_l+0xca4>
    ad96:	bl	9fbc <sulp>
    ad9a:	vldr	d7, [sp, #16]
    ad9e:	vsub.f64	d7, d7, d0
    ada2:	vcmp.f64	d7, #0.0
    ada6:	vmrs	APSR_nzcv, fpscr
    adaa:	vstr	d7, [sp, #16]
    adae:	beq.w	abcc <_strtod_l+0xbdc>
    adb2:	b.n	ac94 <_strtod_l+0xca4>
    adb4:	mov.w	r3, #4294967295
    adb8:	b.n	ad74 <_strtod_l+0xd84>
    adba:	cmp	r3, #0
    adbc:	str	r1, [sp, #36]	; 0x24
    adbe:	bgt.w	aa56 <_strtod_l+0xa66>
    adc2:	b.n	aab0 <_strtod_l+0xac0>
    adc4:	mov.w	r1, #4294967295
    adc8:	lsl.w	r3, r1, r3
    adcc:	ldr	r1, [sp, #24]
    adce:	ands	r1, r3
    add0:	str	r1, [sp, #24]
    add2:	b.n	aab0 <_strtod_l+0xac0>
    add4:	add	r0, sp, #76	; 0x4c
    add6:	add	r2, sp, #88	; 0x58
    add8:	ldr	r1, [pc, #128]	; (ae5c <_strtod_l+0xe6c>)
    adda:	bl	eb20 <__hexnan>
    adde:	cmp	r0, #5
    ade0:	bne.w	a846 <_strtod_l+0x856>
    ade4:	ldr	r3, [sp, #92]	; 0x5c
    ade6:	orr.w	r3, r3, #2139095040	; 0x7f800000
    adea:	orr.w	r3, r3, #7340032	; 0x700000
    adee:	str	r3, [sp, #28]
    adf0:	ldr	r3, [sp, #88]	; 0x58
    adf2:	str	r3, [sp, #24]
    adf4:	b.w	a346 <_strtod_l+0x356>
    adf8:	ldr	r3, [pc, #88]	; (ae54 <_strtod_l+0xe64>)
    adfa:	ands	r3, r7
    adfc:	cmp.w	r3, #112197632	; 0x6b00000
    ae00:	bgt.w	ac78 <_strtod_l+0xc88>
    ae04:	cmp.w	r3, #57671680	; 0x3700000
    ae08:	bgt.w	ac98 <_strtod_l+0xca8>
    ae0c:	b.n	abcc <_strtod_l+0xbdc>
    ae0e:	subs	r3, #32
    ae10:	mov.w	r0, #4294967295
    ae14:	lsl.w	r3, r0, r3
    ae18:	ands	r3, r1
    ae1a:	str	r3, [sp, #28]
    ae1c:	b.n	aab0 <_strtod_l+0xac0>
    ae1e:	adds	r3, #1
    ae20:	bne.n	ad7e <_strtod_l+0xd8e>
    ae22:	b.n	a9bc <_strtod_l+0x9cc>
    ae24:	movs	r3, #106	; 0x6a
    ae26:	str	r3, [sp, #36]	; 0x24
    ae28:	b.n	aa8a <_strtod_l+0xa9a>
    ae2a:	mov	r0, r5
    ae2c:	ldr	r1, [sp, #76]	; 0x4c
    ae2e:	adds	r5, #1
    ae30:	b.n	aad6 <_strtod_l+0xae6>
    ae32:	ldrd	r7, r8, [sp, #16]
    ae36:	strd	r7, r8, [sp, #24]
    ae3a:	b.n	a794 <_strtod_l+0x7a4>
    ae3c:	ldrd	r0, r1, [sp, #16]
    ae40:	strd	r0, r1, [sp, #24]
    ae44:	b.n	aa86 <_strtod_l+0xa96>
    ae46:	mov	r0, r1
    ae48:	ldr	r1, [sp, #76]	; 0x4c
    ae4a:	b.n	aaea <_strtod_l+0xafa>
    ae4c:	.word	0x000fffff
    ae50:	.word	0xbfe00000
    ae54:	.word	0x7ff00000
    ae58:	.word	0x7fefffff
    ae5c:	.word	0x20000adc

0000ae60 <_strtod_r>:
    ae60:	ldr	r3, [pc, #20]	; (ae78 <_strtod_r+0x18>)
    ae62:	ldr	r3, [r3, #0]
    ae64:	push	{r4}
    ae66:	ldr	r3, [r3, #52]	; 0x34
    ae68:	ldr	r4, [pc, #16]	; (ae7c <_strtod_r+0x1c>)
    ae6a:	cmp	r3, #0
    ae6c:	it	eq
    ae6e:	moveq	r3, r4
    ae70:	ldr.w	r4, [sp], #4
    ae74:	b.w	9ff0 <_strtod_l>
    ae78:	.word	0x2000215c
    ae7c:	.word	0x20001be0

0000ae80 <_strtol_l.isra.0>:
    ae80:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae84:	ldr.w	r9, [sp, #40]	; 0x28
    ae88:	mov	r7, r1
    ae8a:	mov	r8, r0
    ae8c:	mov	r6, r2
    ae8e:	mov	r5, r3
    ae90:	mov	fp, r1
    ae92:	b.n	ae96 <_strtol_l.isra.0+0x16>
    ae94:	mov	fp, r4
    ae96:	mov	r4, fp
    ae98:	mov	r0, r9
    ae9a:	ldrb.w	sl, [r4], #1
    ae9e:	bl	905c <__locale_ctype_ptr_l>
    aea2:	add	r0, sl
    aea4:	ldrb	r1, [r0, #1]
    aea6:	and.w	r1, r1, #8
    aeaa:	and.w	ip, r1, #255	; 0xff
    aeae:	cmp	r1, #0
    aeb0:	bne.n	ae94 <_strtol_l.isra.0+0x14>
    aeb2:	mov	r2, sl
    aeb4:	cmp	r2, #45	; 0x2d
    aeb6:	beq.n	af7c <_strtol_l.isra.0+0xfc>
    aeb8:	cmp	r2, #43	; 0x2b
    aeba:	itt	eq
    aebc:	ldrbeq.w	r2, [fp, #1]
    aec0:	addeq.w	r4, fp, #2
    aec4:	cmp	r5, #0
    aec6:	beq.n	af50 <_strtol_l.isra.0+0xd0>
    aec8:	cmp	r5, #16
    aeca:	beq.n	af98 <_strtol_l.isra.0+0x118>
    aecc:	mov	r9, r5
    aece:	cmp.w	ip, #0
    aed2:	ite	eq
    aed4:	mvneq.w	sl, #2147483648	; 0x80000000
    aed8:	movne.w	sl, #2147483648	; 0x80000000
    aedc:	movs	r1, #0
    aede:	udiv	lr, sl, r9
    aee2:	mov	r0, r1
    aee4:	mls	sl, r9, lr, sl
    aee8:	b.n	aef6 <_strtol_l.isra.0+0x76>
    aeea:	beq.n	af40 <_strtol_l.isra.0+0xc0>
    aeec:	mla	r0, r9, r0, r3
    aef0:	movs	r1, #1
    aef2:	ldrb.w	r2, [r4], #1
    aef6:	sub.w	r3, r2, #48	; 0x30
    aefa:	cmp	r3, #9
    aefc:	bls.n	af0a <_strtol_l.isra.0+0x8a>
    aefe:	sub.w	r3, r2, #65	; 0x41
    af02:	cmp	r3, #25
    af04:	bhi.n	af1c <_strtol_l.isra.0+0x9c>
    af06:	sub.w	r3, r2, #55	; 0x37
    af0a:	cmp	r5, r3
    af0c:	ble.n	af2c <_strtol_l.isra.0+0xac>
    af0e:	adds	r2, r1, #1
    af10:	beq.n	aef2 <_strtol_l.isra.0+0x72>
    af12:	cmp	lr, r0
    af14:	bcs.n	aeea <_strtol_l.isra.0+0x6a>
    af16:	mov.w	r1, #4294967295
    af1a:	b.n	aef2 <_strtol_l.isra.0+0x72>
    af1c:	sub.w	r3, r2, #97	; 0x61
    af20:	cmp	r3, #25
    af22:	bhi.n	af2c <_strtol_l.isra.0+0xac>
    af24:	sub.w	r3, r2, #87	; 0x57
    af28:	cmp	r5, r3
    af2a:	bgt.n	af0e <_strtol_l.isra.0+0x8e>
    af2c:	adds	r3, r1, #1
    af2e:	beq.n	af5c <_strtol_l.isra.0+0xdc>
    af30:	cmp.w	ip, #0
    af34:	bne.n	af58 <_strtol_l.isra.0+0xd8>
    af36:	cbz	r6, af4c <_strtol_l.isra.0+0xcc>
    af38:	cbnz	r1, af74 <_strtol_l.isra.0+0xf4>
    af3a:	str	r7, [r6, #0]
    af3c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af40:	cmp	sl, r3
    af42:	bge.n	aeec <_strtol_l.isra.0+0x6c>
    af44:	mov	r0, lr
    af46:	mov.w	r1, #4294967295
    af4a:	b.n	aef2 <_strtol_l.isra.0+0x72>
    af4c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af50:	cmp	r2, #48	; 0x30
    af52:	beq.n	af8a <_strtol_l.isra.0+0x10a>
    af54:	movs	r5, #10
    af56:	b.n	aecc <_strtol_l.isra.0+0x4c>
    af58:	negs	r0, r0
    af5a:	b.n	af36 <_strtol_l.isra.0+0xb6>
    af5c:	cmp.w	ip, #0
    af60:	mov.w	r3, #34	; 0x22
    af64:	ite	eq
    af66:	mvneq.w	r0, #2147483648	; 0x80000000
    af6a:	movne.w	r0, #2147483648	; 0x80000000
    af6e:	str.w	r3, [r8]
    af72:	cbz	r6, afb2 <_strtol_l.isra.0+0x132>
    af74:	subs	r7, r4, #1
    af76:	str	r7, [r6, #0]
    af78:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af7c:	add.w	r4, fp, #2
    af80:	ldrb.w	r2, [fp, #1]
    af84:	mov.w	ip, #1
    af88:	b.n	aec4 <_strtol_l.isra.0+0x44>
    af8a:	ldrb	r3, [r4, #0]
    af8c:	and.w	r3, r3, #223	; 0xdf
    af90:	cmp	r3, #88	; 0x58
    af92:	beq.n	afa6 <_strtol_l.isra.0+0x126>
    af94:	movs	r5, #8
    af96:	b.n	aecc <_strtol_l.isra.0+0x4c>
    af98:	cmp	r2, #48	; 0x30
    af9a:	bne.n	aecc <_strtol_l.isra.0+0x4c>
    af9c:	ldrb	r3, [r4, #0]
    af9e:	and.w	r3, r3, #223	; 0xdf
    afa2:	cmp	r3, #88	; 0x58
    afa4:	bne.n	aecc <_strtol_l.isra.0+0x4c>
    afa6:	mov.w	r9, #16
    afaa:	ldrb	r2, [r4, #1]
    afac:	mov	r5, r9
    afae:	adds	r4, #2
    afb0:	b.n	aece <_strtol_l.isra.0+0x4e>
    afb2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afb6:	nop

0000afb8 <_strtol_r>:
    afb8:	push	{r4, r5, lr}
    afba:	ldr	r4, [pc, #24]	; (afd4 <_strtol_r+0x1c>)
    afbc:	ldr	r5, [pc, #24]	; (afd8 <_strtol_r+0x20>)
    afbe:	ldr	r4, [r4, #0]
    afc0:	ldr	r4, [r4, #52]	; 0x34
    afc2:	sub	sp, #12
    afc4:	cmp	r4, #0
    afc6:	it	eq
    afc8:	moveq	r4, r5
    afca:	str	r4, [sp, #0]
    afcc:	bl	ae80 <_strtol_l.isra.0>
    afd0:	add	sp, #12
    afd2:	pop	{r4, r5, pc}
    afd4:	.word	0x2000215c
    afd8:	.word	0x20001be0
    afdc:	.word	0x00000000

0000afe0 <_svfprintf_r>:
    afe0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    afe4:	vpush	{d8-d10}
    afe8:	sub	sp, #228	; 0xe4
    afea:	mov	r4, r1
    afec:	str	r1, [sp, #12]
    afee:	mov	sl, r2
    aff0:	str	r3, [sp, #36]	; 0x24
    aff2:	str	r0, [sp, #20]
    aff4:	bl	ecc0 <_localeconv_r>
    aff8:	ldr	r3, [r0, #0]
    affa:	str	r3, [sp, #64]	; 0x40
    affc:	mov	r0, r3
    affe:	bl	9e40 <strlen>
    b002:	ldrh	r3, [r4, #12]
    b004:	str	r0, [sp, #60]	; 0x3c
    b006:	lsls	r1, r3, #24
    b008:	bpl.n	b012 <_svfprintf_r+0x32>
    b00a:	ldr	r3, [r4, #16]
    b00c:	cmp	r3, #0
    b00e:	beq.w	c10c <_svfprintf_r+0x112c>
    b012:	movs	r3, #0
    b014:	vldr	d8, [pc, #656]	; b2a8 <_svfprintf_r+0x2c8>
    b018:	vldr	d9, [pc, #660]	; b2b0 <_svfprintf_r+0x2d0>
    b01c:	str	r3, [sp, #52]	; 0x34
    b01e:	str	r3, [sp, #116]	; 0x74
    b020:	str	r3, [sp, #112]	; 0x70
    b022:	str	r3, [sp, #68]	; 0x44
    b024:	str	r3, [sp, #24]
    b026:	add	r3, sp, #160	; 0xa0
    b028:	str	r3, [sp, #108]	; 0x6c
    b02a:	mov	r9, r3
    b02c:	ldrb.w	r3, [sl]
    b030:	mov	r4, sl
    b032:	cbz	r3, b070 <_svfprintf_r+0x90>
    b034:	cmp	r3, #37	; 0x25
    b036:	bne.n	b03e <_svfprintf_r+0x5e>
    b038:	b.n	b070 <_svfprintf_r+0x90>
    b03a:	cmp	r3, #37	; 0x25
    b03c:	beq.n	b046 <_svfprintf_r+0x66>
    b03e:	ldrb.w	r3, [r4, #1]!
    b042:	cmp	r3, #0
    b044:	bne.n	b03a <_svfprintf_r+0x5a>
    b046:	rsb	r5, sl, r4
    b04a:	cbz	r5, b070 <_svfprintf_r+0x90>
    b04c:	ldr	r3, [sp, #112]	; 0x70
    b04e:	ldr	r2, [sp, #116]	; 0x74
    b050:	str.w	sl, [r9]
    b054:	adds	r3, #1
    b056:	add	r2, r5
    b058:	cmp	r3, #7
    b05a:	str.w	r5, [r9, #4]
    b05e:	str	r2, [sp, #116]	; 0x74
    b060:	str	r3, [sp, #112]	; 0x70
    b062:	bgt.w	b1ac <_svfprintf_r+0x1cc>
    b066:	add.w	r9, r9, #8
    b06a:	ldr	r3, [sp, #24]
    b06c:	add	r3, r5
    b06e:	str	r3, [sp, #24]
    b070:	ldrb	r3, [r4, #0]
    b072:	cmp	r3, #0
    b074:	beq.w	b1be <_svfprintf_r+0x1de>
    b078:	movs	r3, #0
    b07a:	mov	r2, r3
    b07c:	strb.w	r3, [sp, #79]	; 0x4f
    b080:	mov	r1, r3
    b082:	str	r3, [sp, #28]
    b084:	mov	fp, r3
    b086:	mov.w	r8, #4294967295
    b08a:	ldrb	r3, [r4, #1]
    b08c:	add.w	sl, r4, #1
    b090:	mov	r5, r8
    b092:	add.w	sl, sl, #1
    b096:	sub.w	r0, r3, #32
    b09a:	cmp	r0, #88	; 0x58
    b09c:	bhi.w	b890 <_svfprintf_r+0x8b0>
    b0a0:	tbh	[pc, r0, lsl #1]
    b0a4:	.word	0x03f60363
    b0a8:	.word	0x036b03f6
    b0ac:	.word	0x03f603f6
    b0b0:	.word	0x03f603f6
    b0b4:	.word	0x03f603f6
    b0b8:	.word	0x037e0370
    b0bc:	.word	0x005d03f6
    b0c0:	.word	0x03f600df
    b0c4:	.word	0x010c00fb
    b0c8:	.word	0x010c010c
    b0cc:	.word	0x010c010c
    b0d0:	.word	0x010c010c
    b0d4:	.word	0x010c010c
    b0d8:	.word	0x03f603f6
    b0dc:	.word	0x03f603f6
    b0e0:	.word	0x03f603f6
    b0e4:	.word	0x03f603f6
    b0e8:	.word	0x03f603f6
    b0ec:	.word	0x015e011c
    b0f0:	.word	0x015e03f6
    b0f4:	.word	0x03f603f6
    b0f8:	.word	0x03f603f6
    b0fc:	.word	0x03f602a1
    b100:	.word	0x02a603f6
    b104:	.word	0x03f603f6
    b108:	.word	0x03f603f6
    b10c:	.word	0x02d803f6
    b110:	.word	0x03f603f6
    b114:	.word	0x03f60305
    b118:	.word	0x03f603f6
    b11c:	.word	0x03f603f6
    b120:	.word	0x03f603f6
    b124:	.word	0x03f603f6
    b128:	.word	0x034303f6
    b12c:	.word	0x015e0356
    b130:	.word	0x015e015e
    b134:	.word	0x0356035e
    b138:	.word	0x03f603f6
    b13c:	.word	0x03f603a4
    b140:	.word	0x00a203b1
    b144:	.word	0x03c30062
    b148:	.word	0x03c803f6
    b14c:	.word	0x038303f6
    b150:	.word	0x03f603f6
    b154:	.short	0x038b
    b156:	ldr	r0, [sp, #28]
    b158:	str	r3, [sp, #36]	; 0x24
    b15a:	negs	r0, r0
    b15c:	str	r0, [sp, #28]
    b15e:	orr.w	fp, fp, #4
    b162:	ldrb.w	r3, [sl]
    b166:	b.n	b092 <_svfprintf_r+0xb2>
    b168:	mov	r8, r5
    b16a:	ldr	r0, [sp, #36]	; 0x24
    b16c:	movs	r1, #0
    b16e:	movs	r3, #48	; 0x30
    b170:	movs	r2, #120	; 0x78
    b172:	cmp	r8, r1
    b174:	strb.w	r3, [sp, #80]	; 0x50
    b178:	ldr	r4, [r0, #0]
    b17a:	strb.w	r2, [sp, #81]	; 0x51
    b17e:	add.w	r7, r0, #4
    b182:	mov.w	r5, #0
    b186:	strb.w	r1, [sp, #79]	; 0x4f
    b18a:	orr.w	r3, fp, #2
    b18e:	blt.w	b8ca <_svfprintf_r+0x8ea>
    b192:	bic.w	r3, fp, #128	; 0x80
    b196:	orr.w	fp, r3, #2
    b19a:	orrs.w	r3, r4, r5
    b19e:	str	r7, [sp, #36]	; 0x24
    b1a0:	beq.w	b876 <_svfprintf_r+0x896>
    b1a4:	mov	r7, r1
    b1a6:	str	r2, [sp, #48]	; 0x30
    b1a8:	ldr	r0, [pc, #268]	; (b2b8 <_svfprintf_r+0x2d8>)
    b1aa:	b.n	b70a <_svfprintf_r+0x72a>
    b1ac:	add	r2, sp, #108	; 0x6c
    b1ae:	ldr	r1, [sp, #12]
    b1b0:	ldr	r0, [sp, #20]
    b1b2:	bl	fc08 <__ssprint_r>
    b1b6:	cbnz	r0, b1cc <_svfprintf_r+0x1ec>
    b1b8:	add.w	r9, sp, #160	; 0xa0
    b1bc:	b.n	b06a <_svfprintf_r+0x8a>
    b1be:	ldr	r3, [sp, #116]	; 0x74
    b1c0:	cbz	r3, b1cc <_svfprintf_r+0x1ec>
    b1c2:	ldr	r0, [sp, #20]
    b1c4:	ldr	r1, [sp, #12]
    b1c6:	add	r2, sp, #108	; 0x6c
    b1c8:	bl	fc08 <__ssprint_r>
    b1cc:	ldr	r3, [sp, #12]
    b1ce:	ldrh	r3, [r3, #12]
    b1d0:	tst.w	r3, #64	; 0x40
    b1d4:	ldr	r3, [sp, #24]
    b1d6:	it	ne
    b1d8:	movne.w	r3, #4294967295
    b1dc:	mov	r0, r3
    b1de:	add	sp, #228	; 0xe4
    b1e0:	vpop	{d8-d10}
    b1e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1e8:	str	r3, [sp, #48]	; 0x30
    b1ea:	mov	r8, r5
    b1ec:	cmp	r2, #0
    b1ee:	bne.w	c526 <_svfprintf_r+0x1546>
    b1f2:	ands.w	r3, fp, #32
    b1f6:	beq.w	b606 <_svfprintf_r+0x626>
    b1fa:	ldr	r7, [sp, #36]	; 0x24
    b1fc:	adds	r7, #7
    b1fe:	bic.w	r3, r7, #7
    b202:	movs	r7, #0
    b204:	add.w	r2, r3, #8
    b208:	cmp	r8, r7
    b20a:	str	r2, [sp, #36]	; 0x24
    b20c:	ldrd	r4, r5, [r3]
    b210:	strb.w	r7, [sp, #79]	; 0x4f
    b214:	blt.w	bed4 <_svfprintf_r+0xef4>
    b218:	orrs.w	r3, r4, r5
    b21c:	bic.w	fp, fp, #128	; 0x80
    b220:	beq.w	b8ba <_svfprintf_r+0x8da>
    b224:	add	r6, sp, #160	; 0xa0
    b226:	lsrs	r2, r4, #3
    b228:	orr.w	r2, r2, r5, lsl #29
    b22c:	lsrs	r1, r5, #3
    b22e:	and.w	r3, r4, #7
    b232:	mov	r5, r1
    b234:	mov	r4, r2
    b236:	adds	r3, #48	; 0x30
    b238:	orrs.w	r2, r4, r5
    b23c:	strb.w	r3, [r6, #-1]!
    b240:	bne.n	b226 <_svfprintf_r+0x246>
    b242:	tst.w	fp, #1
    b246:	beq.w	b698 <_svfprintf_r+0x6b8>
    b24a:	cmp	r3, #48	; 0x30
    b24c:	beq.w	b698 <_svfprintf_r+0x6b8>
    b250:	movs	r2, #48	; 0x30
    b252:	subs	r3, r6, #1
    b254:	strb.w	r2, [r6, #-1]
    b258:	add	r2, sp, #160	; 0xa0
    b25a:	subs	r2, r2, r3
    b25c:	str	r2, [sp, #32]
    b25e:	mov	r6, r3
    b260:	b.n	b69e <_svfprintf_r+0x6be>
    b262:	ldrb.w	r3, [sl]
    b266:	cmp	r3, #42	; 0x2a
    b268:	add.w	r4, sl, #1
    b26c:	beq.w	c4ce <_svfprintf_r+0x14ee>
    b270:	sub.w	r0, r3, #48	; 0x30
    b274:	cmp	r0, #9
    b276:	it	ls
    b278:	movls	r5, #0
    b27a:	bhi.w	c428 <_svfprintf_r+0x1448>
    b27e:	ldrb.w	r3, [r4], #1
    b282:	add.w	r5, r5, r5, lsl #2
    b286:	add.w	r5, r0, r5, lsl #1
    b28a:	sub.w	r0, r3, #48	; 0x30
    b28e:	cmp	r0, #9
    b290:	bls.n	b27e <_svfprintf_r+0x29e>
    b292:	orr.w	r5, r5, r5, asr #31
    b296:	mov	sl, r4
    b298:	b.n	b096 <_svfprintf_r+0xb6>
    b29a:	orr.w	fp, fp, #128	; 0x80
    b29e:	ldrb.w	r3, [sl]
    b2a2:	b.n	b092 <_svfprintf_r+0xb2>
    b2a4:	nop.w
	...
    b2b0:	.word	0xffffffff
    b2b4:	.word	0x7fefffff
    b2b8:	.word	0x200016c4
    b2bc:	sub.w	r0, r3, #48	; 0x30
    b2c0:	movs	r3, #0
    b2c2:	mov	r4, r3
    b2c4:	ldrb.w	r3, [sl], #1
    b2c8:	add.w	r4, r4, r4, lsl #2
    b2cc:	add.w	r4, r0, r4, lsl #1
    b2d0:	sub.w	r0, r3, #48	; 0x30
    b2d4:	cmp	r0, #9
    b2d6:	bls.n	b2c4 <_svfprintf_r+0x2e4>
    b2d8:	str	r4, [sp, #28]
    b2da:	b.n	b096 <_svfprintf_r+0xb6>
    b2dc:	str	r3, [sp, #48]	; 0x30
    b2de:	mov	r8, r5
    b2e0:	cmp	r2, #0
    b2e2:	bne.w	c53e <_svfprintf_r+0x155e>
    b2e6:	orr.w	fp, fp, #16
    b2ea:	tst.w	fp, #32
    b2ee:	beq.w	bcf8 <_svfprintf_r+0xd18>
    b2f2:	ldr	r7, [sp, #36]	; 0x24
    b2f4:	adds	r7, #7
    b2f6:	bic.w	r7, r7, #7
    b2fa:	ldrd	r2, r3, [r7]
    b2fe:	add.w	r1, r7, #8
    b302:	str	r1, [sp, #36]	; 0x24
    b304:	mov	r4, r2
    b306:	mov	r5, r3
    b308:	cmp	r2, #0
    b30a:	sbcs.w	r3, r3, #0
    b30e:	blt.w	bd80 <_svfprintf_r+0xda0>
    b312:	cmp.w	r8, #0
    b316:	ldrb.w	r7, [sp, #79]	; 0x4f
    b31a:	blt.w	b688 <_svfprintf_r+0x6a8>
    b31e:	orrs.w	r3, r4, r5
    b322:	bic.w	fp, fp, #128	; 0x80
    b326:	beq.w	bb16 <_svfprintf_r+0xb36>
    b32a:	cmp	r5, #0
    b32c:	it	eq
    b32e:	cmpeq	r4, #10
    b330:	bcc.w	b690 <_svfprintf_r+0x6b0>
    b334:	add	r6, sp, #160	; 0xa0
    b336:	mov	r0, r4
    b338:	mov	r1, r5
    b33a:	movs	r2, #10
    b33c:	movs	r3, #0
    b33e:	bl	8ca8 <__aeabi_uldivmod>
    b342:	adds	r2, #48	; 0x30
    b344:	strb.w	r2, [r6, #-1]!
    b348:	mov	r0, r4
    b34a:	mov	r1, r5
    b34c:	movs	r3, #0
    b34e:	movs	r2, #10
    b350:	bl	8ca8 <__aeabi_uldivmod>
    b354:	mov	r4, r0
    b356:	mov	r5, r1
    b358:	orrs.w	r3, r4, r5
    b35c:	bne.n	b336 <_svfprintf_r+0x356>
    b35e:	b.n	b698 <_svfprintf_r+0x6b8>
    b360:	str	r3, [sp, #48]	; 0x30
    b362:	mov	r8, r5
    b364:	cmp	r2, #0
    b366:	bne.w	c536 <_svfprintf_r+0x1556>
    b36a:	ldr	r7, [sp, #36]	; 0x24
    b36c:	tst.w	fp, #8
    b370:	add.w	r7, r7, #7
    b374:	beq.w	bff8 <_svfprintf_r+0x1018>
    b378:	bic.w	r3, r7, #7
    b37c:	vldr	d8, [r3]
    b380:	add.w	r2, r3, #8
    b384:	str	r2, [sp, #36]	; 0x24
    b386:	vabs.f64	d7, d8
    b38a:	vcmp.f64	d7, d9
    b38e:	vmrs	APSR_nzcv, fpscr
    b392:	ble.w	bf0e <_svfprintf_r+0xf2e>
    b396:	vcmpe.f64	d8, #0.0
    b39a:	vmrs	APSR_nzcv, fpscr
    b39e:	bmi.w	c336 <_svfprintf_r+0x1356>
    b3a2:	ldrb.w	r7, [sp, #79]	; 0x4f
    b3a6:	ldr	r6, [pc, #668]	; (b644 <_svfprintf_r+0x664>)
    b3a8:	ldr	r3, [pc, #668]	; (b648 <_svfprintf_r+0x668>)
    b3aa:	ldr	r1, [sp, #48]	; 0x30
    b3ac:	movs	r2, #3
    b3ae:	mov.w	r8, #0
    b3b2:	str	r2, [sp, #16]
    b3b4:	bic.w	fp, fp, #128	; 0x80
    b3b8:	cmp	r1, #71	; 0x47
    b3ba:	it	le
    b3bc:	movle	r6, r3
    b3be:	str	r2, [sp, #32]
    b3c0:	str.w	r8, [sp, #56]	; 0x38
    b3c4:	cbz	r7, b3cc <_svfprintf_r+0x3ec>
    b3c6:	ldr	r3, [sp, #16]
    b3c8:	adds	r3, #1
    b3ca:	str	r3, [sp, #16]
    b3cc:	ands.w	r3, fp, #2
    b3d0:	str	r3, [sp, #40]	; 0x28
    b3d2:	beq.n	b3da <_svfprintf_r+0x3fa>
    b3d4:	ldr	r3, [sp, #16]
    b3d6:	adds	r3, #2
    b3d8:	str	r3, [sp, #16]
    b3da:	ands.w	r3, fp, #132	; 0x84
    b3de:	str	r3, [sp, #44]	; 0x2c
    b3e0:	bne.w	b8e4 <_svfprintf_r+0x904>
    b3e4:	ldr	r3, [sp, #28]
    b3e6:	ldr	r2, [sp, #16]
    b3e8:	subs	r4, r3, r2
    b3ea:	cmp	r4, #0
    b3ec:	ble.w	b8e4 <_svfprintf_r+0x904>
    b3f0:	cmp	r4, #16
    b3f2:	ldr	r1, [sp, #116]	; 0x74
    b3f4:	ldr	r2, [sp, #112]	; 0x70
    b3f6:	ldr	r7, [pc, #596]	; (b64c <_svfprintf_r+0x66c>)
    b3f8:	ble.n	b442 <_svfprintf_r+0x462>
    b3fa:	mov	r0, r9
    b3fc:	movs	r5, #16
    b3fe:	mov	r9, r8
    b400:	mov	r8, r6
    b402:	ldr	r6, [sp, #20]
    b404:	b.n	b410 <_svfprintf_r+0x430>
    b406:	subs	r4, #16
    b408:	cmp	r4, #16
    b40a:	add.w	r0, r0, #8
    b40e:	ble.n	b43c <_svfprintf_r+0x45c>
    b410:	adds	r2, #1
    b412:	adds	r1, #16
    b414:	cmp	r2, #7
    b416:	str	r1, [sp, #116]	; 0x74
    b418:	str	r2, [sp, #112]	; 0x70
    b41a:	str	r7, [r0, #0]
    b41c:	str	r5, [r0, #4]
    b41e:	ble.n	b406 <_svfprintf_r+0x426>
    b420:	add	r2, sp, #108	; 0x6c
    b422:	ldr	r1, [sp, #12]
    b424:	mov	r0, r6
    b426:	bl	fc08 <__ssprint_r>
    b42a:	cmp	r0, #0
    b42c:	bne.w	b1cc <_svfprintf_r+0x1ec>
    b430:	subs	r4, #16
    b432:	cmp	r4, #16
    b434:	ldr	r1, [sp, #116]	; 0x74
    b436:	ldr	r2, [sp, #112]	; 0x70
    b438:	add	r0, sp, #160	; 0xa0
    b43a:	bgt.n	b410 <_svfprintf_r+0x430>
    b43c:	mov	r6, r8
    b43e:	mov	r8, r9
    b440:	mov	r9, r0
    b442:	adds	r2, #1
    b444:	adds	r3, r4, r1
    b446:	cmp	r2, #7
    b448:	str	r3, [sp, #116]	; 0x74
    b44a:	str	r2, [sp, #112]	; 0x70
    b44c:	str.w	r7, [r9]
    b450:	str.w	r4, [r9, #4]
    b454:	bgt.w	bc1c <_svfprintf_r+0xc3c>
    b458:	ldrb.w	r7, [sp, #79]	; 0x4f
    b45c:	add.w	r9, r9, #8
    b460:	cbz	r7, b480 <_svfprintf_r+0x4a0>
    b462:	ldr	r2, [sp, #112]	; 0x70
    b464:	adds	r2, #1
    b466:	adds	r3, #1
    b468:	add.w	r0, sp, #79	; 0x4f
    b46c:	movs	r1, #1
    b46e:	cmp	r2, #7
    b470:	str	r3, [sp, #116]	; 0x74
    b472:	str	r2, [sp, #112]	; 0x70
    b474:	stmia.w	r9, {r0, r1}
    b478:	bgt.w	bb3a <_svfprintf_r+0xb5a>
    b47c:	add.w	r9, r9, #8
    b480:	ldr	r2, [sp, #40]	; 0x28
    b482:	cbz	r2, b4a0 <_svfprintf_r+0x4c0>
    b484:	ldr	r2, [sp, #112]	; 0x70
    b486:	adds	r2, #1
    b488:	adds	r3, #2
    b48a:	add	r0, sp, #80	; 0x50
    b48c:	movs	r1, #2
    b48e:	cmp	r2, #7
    b490:	str	r3, [sp, #116]	; 0x74
    b492:	str	r2, [sp, #112]	; 0x70
    b494:	stmia.w	r9, {r0, r1}
    b498:	bgt.w	bb52 <_svfprintf_r+0xb72>
    b49c:	add.w	r9, r9, #8
    b4a0:	ldr	r2, [sp, #44]	; 0x2c
    b4a2:	cmp	r2, #128	; 0x80
    b4a4:	beq.w	b9a4 <_svfprintf_r+0x9c4>
    b4a8:	ldr	r2, [sp, #32]
    b4aa:	rsb	r4, r2, r8
    b4ae:	cmp	r4, #0
    b4b0:	ble.n	b51c <_svfprintf_r+0x53c>
    b4b2:	cmp	r4, #16
    b4b4:	ldr	r2, [sp, #112]	; 0x70
    b4b6:	ldr	r7, [pc, #408]	; (b650 <_svfprintf_r+0x670>)
    b4b8:	ble.n	b502 <_svfprintf_r+0x522>
    b4ba:	mov	r1, r9
    b4bc:	mov.w	r8, #16
    b4c0:	mov	r9, r6
    b4c2:	ldr	r5, [sp, #20]
    b4c4:	ldr	r6, [sp, #12]
    b4c6:	b.n	b4d2 <_svfprintf_r+0x4f2>
    b4c8:	subs	r4, #16
    b4ca:	cmp	r4, #16
    b4cc:	add.w	r1, r1, #8
    b4d0:	ble.n	b4fe <_svfprintf_r+0x51e>
    b4d2:	adds	r2, #1
    b4d4:	adds	r3, #16
    b4d6:	cmp	r2, #7
    b4d8:	str	r3, [sp, #116]	; 0x74
    b4da:	str	r2, [sp, #112]	; 0x70
    b4dc:	stmia.w	r1, {r7, r8}
    b4e0:	ble.n	b4c8 <_svfprintf_r+0x4e8>
    b4e2:	add	r2, sp, #108	; 0x6c
    b4e4:	mov	r1, r6
    b4e6:	mov	r0, r5
    b4e8:	bl	fc08 <__ssprint_r>
    b4ec:	cmp	r0, #0
    b4ee:	bne.w	b1cc <_svfprintf_r+0x1ec>
    b4f2:	subs	r4, #16
    b4f4:	cmp	r4, #16
    b4f6:	ldr	r3, [sp, #116]	; 0x74
    b4f8:	ldr	r2, [sp, #112]	; 0x70
    b4fa:	add	r1, sp, #160	; 0xa0
    b4fc:	bgt.n	b4d2 <_svfprintf_r+0x4f2>
    b4fe:	mov	r6, r9
    b500:	mov	r9, r1
    b502:	adds	r2, #1
    b504:	add	r3, r4
    b506:	cmp	r2, #7
    b508:	str	r3, [sp, #116]	; 0x74
    b50a:	str	r2, [sp, #112]	; 0x70
    b50c:	str.w	r7, [r9]
    b510:	str.w	r4, [r9, #4]
    b514:	bgt.w	bb22 <_svfprintf_r+0xb42>
    b518:	add.w	r9, r9, #8
    b51c:	tst.w	fp, #256	; 0x100
    b520:	bne.w	b8e8 <_svfprintf_r+0x908>
    b524:	ldr	r2, [sp, #112]	; 0x70
    b526:	ldr	r0, [sp, #32]
    b528:	str.w	r6, [r9]
    b52c:	adds	r2, #1
    b52e:	add	r3, r0
    b530:	cmp	r2, #7
    b532:	str	r3, [sp, #116]	; 0x74
    b534:	str.w	r0, [r9, #4]
    b538:	str	r2, [sp, #112]	; 0x70
    b53a:	bgt.w	bac2 <_svfprintf_r+0xae2>
    b53e:	add.w	r9, r9, #8
    b542:	tst.w	fp, #4
    b546:	beq.n	b5c6 <_svfprintf_r+0x5e6>
    b548:	ldr	r2, [sp, #28]
    b54a:	ldr	r1, [sp, #16]
    b54c:	subs	r4, r2, r1
    b54e:	cmp	r4, #0
    b550:	ble.n	b5c6 <_svfprintf_r+0x5e6>
    b552:	cmp	r4, #16
    b554:	ldr	r2, [sp, #112]	; 0x70
    b556:	ldr	r7, [pc, #244]	; (b64c <_svfprintf_r+0x66c>)
    b558:	ble.n	b5a0 <_svfprintf_r+0x5c0>
    b55a:	movs	r5, #16
    b55c:	ldr	r6, [sp, #20]
    b55e:	ldr.w	r8, [sp, #12]
    b562:	b.n	b56e <_svfprintf_r+0x58e>
    b564:	subs	r4, #16
    b566:	cmp	r4, #16
    b568:	add.w	r9, r9, #8
    b56c:	ble.n	b5a0 <_svfprintf_r+0x5c0>
    b56e:	adds	r2, #1
    b570:	adds	r3, #16
    b572:	cmp	r2, #7
    b574:	str	r3, [sp, #116]	; 0x74
    b576:	str	r2, [sp, #112]	; 0x70
    b578:	str.w	r7, [r9]
    b57c:	str.w	r5, [r9, #4]
    b580:	ble.n	b564 <_svfprintf_r+0x584>
    b582:	add	r2, sp, #108	; 0x6c
    b584:	mov	r1, r8
    b586:	mov	r0, r6
    b588:	bl	fc08 <__ssprint_r>
    b58c:	cmp	r0, #0
    b58e:	bne.w	b1cc <_svfprintf_r+0x1ec>
    b592:	subs	r4, #16
    b594:	cmp	r4, #16
    b596:	ldr	r3, [sp, #116]	; 0x74
    b598:	ldr	r2, [sp, #112]	; 0x70
    b59a:	add.w	r9, sp, #160	; 0xa0
    b59e:	bgt.n	b56e <_svfprintf_r+0x58e>
    b5a0:	adds	r2, #1
    b5a2:	add	r3, r4
    b5a4:	cmp	r2, #7
    b5a6:	str	r3, [sp, #116]	; 0x74
    b5a8:	str	r2, [sp, #112]	; 0x70
    b5aa:	str.w	r7, [r9]
    b5ae:	str.w	r4, [r9, #4]
    b5b2:	ble.n	b5c6 <_svfprintf_r+0x5e6>
    b5b4:	add	r2, sp, #108	; 0x6c
    b5b6:	ldr	r1, [sp, #12]
    b5b8:	ldr	r0, [sp, #20]
    b5ba:	bl	fc08 <__ssprint_r>
    b5be:	cmp	r0, #0
    b5c0:	bne.w	b1cc <_svfprintf_r+0x1ec>
    b5c4:	ldr	r3, [sp, #116]	; 0x74
    b5c6:	ldr	r2, [sp, #24]
    b5c8:	ldr	r1, [sp, #28]
    b5ca:	ldr	r0, [sp, #16]
    b5cc:	cmp	r1, r0
    b5ce:	ite	ge
    b5d0:	addge	r2, r2, r1
    b5d2:	addlt	r2, r2, r0
    b5d4:	str	r2, [sp, #24]
    b5d6:	cmp	r3, #0
    b5d8:	bne.w	bada <_svfprintf_r+0xafa>
    b5dc:	movs	r3, #0
    b5de:	str	r3, [sp, #112]	; 0x70
    b5e0:	add.w	r9, sp, #160	; 0xa0
    b5e4:	b.n	b02c <_svfprintf_r+0x4c>
    b5e6:	orr.w	fp, fp, #8
    b5ea:	ldrb.w	r3, [sl]
    b5ee:	b.n	b092 <_svfprintf_r+0xb2>
    b5f0:	str	r3, [sp, #48]	; 0x30
    b5f2:	mov	r8, r5
    b5f4:	cmp	r2, #0
    b5f6:	bne.w	c52e <_svfprintf_r+0x154e>
    b5fa:	orr.w	fp, fp, #16
    b5fe:	ands.w	r3, fp, #32
    b602:	bne.w	b1fa <_svfprintf_r+0x21a>
    b606:	ands.w	r2, fp, #16
    b60a:	bne.w	bd30 <_svfprintf_r+0xd50>
    b60e:	ands.w	r3, fp, #64	; 0x40
    b612:	beq.w	bd30 <_svfprintf_r+0xd50>
    b616:	ldr	r1, [sp, #36]	; 0x24
    b618:	strb.w	r2, [sp, #79]	; 0x4f
    b61c:	mov	r3, r1
    b61e:	cmp.w	r8, #0
    b622:	add.w	r3, r3, #4
    b626:	ldrh	r4, [r1, #0]
    b628:	mov.w	r5, #0
    b62c:	blt.w	c186 <_svfprintf_r+0x11a6>
    b630:	orrs.w	r1, r4, r5
    b634:	bic.w	fp, fp, #128	; 0x80
    b638:	str	r3, [sp, #36]	; 0x24
    b63a:	beq.w	b8ba <_svfprintf_r+0x8da>
    b63e:	mov	r7, r2
    b640:	b.n	b224 <_svfprintf_r+0x244>
    b642:	nop
    b644:	.word	0x20001688
    b648:	.word	0x200016a8
    b64c:	.word	0x20000748
    b650:	.word	0x20001780
    b654:	str	r3, [sp, #48]	; 0x30
    b656:	mov	r8, r5
    b658:	cmp	r2, #0
    b65a:	bne.w	c510 <_svfprintf_r+0x1530>
    b65e:	orr.w	fp, fp, #16
    b662:	ands.w	r3, fp, #32
    b666:	beq.w	bc38 <_svfprintf_r+0xc58>
    b66a:	ldr	r7, [sp, #36]	; 0x24
    b66c:	adds	r7, #7
    b66e:	bic.w	r3, r7, #7
    b672:	movs	r7, #0
    b674:	add.w	r2, r3, #8
    b678:	cmp	r8, r7
    b67a:	str	r2, [sp, #36]	; 0x24
    b67c:	ldrd	r4, r5, [r3]
    b680:	strb.w	r7, [sp, #79]	; 0x4f
    b684:	bge.w	b31e <_svfprintf_r+0x33e>
    b688:	orrs.w	r3, r4, r5
    b68c:	bne.w	b32a <_svfprintf_r+0x34a>
    b690:	add	r6, sp, #224	; 0xe0
    b692:	adds	r4, #48	; 0x30
    b694:	strb.w	r4, [r6, #-65]!
    b698:	add	r3, sp, #160	; 0xa0
    b69a:	subs	r3, r3, r6
    b69c:	str	r3, [sp, #32]
    b69e:	ldr	r3, [sp, #32]
    b6a0:	cmp	r3, r8
    b6a2:	it	lt
    b6a4:	movlt	r3, r8
    b6a6:	str	r3, [sp, #16]
    b6a8:	movs	r3, #0
    b6aa:	str	r3, [sp, #56]	; 0x38
    b6ac:	b.n	b3c4 <_svfprintf_r+0x3e4>
    b6ae:	str	r3, [sp, #48]	; 0x30
    b6b0:	mov	r8, r5
    b6b2:	cmp	r2, #0
    b6b4:	bne.w	c508 <_svfprintf_r+0x1528>
    b6b8:	tst.w	fp, #32
    b6bc:	ldr	r0, [pc, #776]	; (b9c8 <_svfprintf_r+0x9e8>)
    b6be:	beq.w	b7ce <_svfprintf_r+0x7ee>
    b6c2:	ldr	r7, [sp, #36]	; 0x24
    b6c4:	adds	r7, #7
    b6c6:	bic.w	r3, r7, #7
    b6ca:	ldrd	r4, r5, [r3]
    b6ce:	add.w	r2, r3, #8
    b6d2:	str	r2, [sp, #36]	; 0x24
    b6d4:	ands.w	r7, fp, #1
    b6d8:	beq.w	bb6a <_svfprintf_r+0xb8a>
    b6dc:	orrs.w	r3, r4, r5
    b6e0:	beq.w	c02a <_svfprintf_r+0x104a>
    b6e4:	movs	r7, #0
    b6e6:	movs	r3, #48	; 0x30
    b6e8:	ldrb.w	r2, [sp, #48]	; 0x30
    b6ec:	strb.w	r3, [sp, #80]	; 0x50
    b6f0:	cmp	r8, r7
    b6f2:	strb.w	r2, [sp, #81]	; 0x51
    b6f6:	strb.w	r7, [sp, #79]	; 0x4f
    b6fa:	orr.w	r3, fp, #2
    b6fe:	blt.w	c330 <_svfprintf_r+0x1350>
    b702:	bic.w	r3, fp, #128	; 0x80
    b706:	orr.w	fp, r3, #2
    b70a:	add	r6, sp, #160	; 0xa0
    b70c:	lsrs	r3, r4, #4
    b70e:	and.w	r1, r4, #15
    b712:	orr.w	r3, r3, r5, lsl #28
    b716:	lsrs	r2, r5, #4
    b718:	mov	r4, r3
    b71a:	mov	r5, r2
    b71c:	ldrb	r3, [r0, r1]
    b71e:	strb.w	r3, [r6, #-1]!
    b722:	orrs.w	r3, r4, r5
    b726:	bne.n	b70c <_svfprintf_r+0x72c>
    b728:	b.n	b698 <_svfprintf_r+0x6b8>
    b72a:	ldr	r1, [sp, #36]	; 0x24
    b72c:	str	r3, [sp, #48]	; 0x30
    b72e:	ldr	r2, [r1, #0]
    b730:	strb.w	r2, [sp, #120]	; 0x78
    b734:	movs	r3, #0
    b736:	mov	r2, r1
    b738:	mov	r7, r3
    b73a:	strb.w	r3, [sp, #79]	; 0x4f
    b73e:	adds	r2, #4
    b740:	movs	r3, #1
    b742:	str	r3, [sp, #16]
    b744:	mov	r8, r7
    b746:	str	r7, [sp, #56]	; 0x38
    b748:	str	r2, [sp, #36]	; 0x24
    b74a:	str	r3, [sp, #32]
    b74c:	add	r6, sp, #120	; 0x78
    b74e:	b.n	b3cc <_svfprintf_r+0x3ec>
    b750:	str	r3, [sp, #48]	; 0x30
    b752:	mov	r8, r5
    b754:	cmp	r2, #0
    b756:	beq.w	b2ea <_svfprintf_r+0x30a>
    b75a:	strb.w	r1, [sp, #79]	; 0x4f
    b75e:	b.n	b2ea <_svfprintf_r+0x30a>
    b760:	orr.w	fp, fp, #64	; 0x40
    b764:	ldrb.w	r3, [sl]
    b768:	b.n	b092 <_svfprintf_r+0xb2>
    b76a:	ldrb.w	r3, [sl]
    b76e:	cmp	r1, #0
    b770:	bne.w	b092 <_svfprintf_r+0xb2>
    b774:	movs	r2, #1
    b776:	movs	r1, #32
    b778:	b.n	b092 <_svfprintf_r+0xb2>
    b77a:	orr.w	fp, fp, #1
    b77e:	ldrb.w	r3, [sl]
    b782:	b.n	b092 <_svfprintf_r+0xb2>
    b784:	ldr	r4, [sp, #36]	; 0x24
    b786:	ldr	r3, [r4, #0]
    b788:	str	r3, [sp, #28]
    b78a:	mov	r0, r3
    b78c:	cmp	r0, #0
    b78e:	mov	r3, r4
    b790:	add.w	r3, r3, #4
    b794:	blt.w	b156 <_svfprintf_r+0x176>
    b798:	str	r3, [sp, #36]	; 0x24
    b79a:	ldrb.w	r3, [sl]
    b79e:	b.n	b092 <_svfprintf_r+0xb2>
    b7a0:	ldrb.w	r3, [sl]
    b7a4:	movs	r2, #1
    b7a6:	movs	r1, #43	; 0x2b
    b7a8:	b.n	b092 <_svfprintf_r+0xb2>
    b7aa:	str	r3, [sp, #48]	; 0x30
    b7ac:	mov	r8, r5
    b7ae:	cmp	r2, #0
    b7b0:	beq.w	b662 <_svfprintf_r+0x682>
    b7b4:	strb.w	r1, [sp, #79]	; 0x4f
    b7b8:	b.n	b662 <_svfprintf_r+0x682>
    b7ba:	str	r3, [sp, #48]	; 0x30
    b7bc:	mov	r8, r5
    b7be:	cmp	r2, #0
    b7c0:	bne.w	c518 <_svfprintf_r+0x1538>
    b7c4:	tst.w	fp, #32
    b7c8:	ldr	r0, [pc, #512]	; (b9cc <_svfprintf_r+0x9ec>)
    b7ca:	bne.w	b6c2 <_svfprintf_r+0x6e2>
    b7ce:	ldr	r2, [sp, #36]	; 0x24
    b7d0:	tst.w	fp, #16
    b7d4:	mov	r3, r2
    b7d6:	bne.w	bd5c <_svfprintf_r+0xd7c>
    b7da:	tst.w	fp, #64	; 0x40
    b7de:	beq.w	bd5c <_svfprintf_r+0xd7c>
    b7e2:	adds	r3, #4
    b7e4:	ldrh	r4, [r2, #0]
    b7e6:	str	r3, [sp, #36]	; 0x24
    b7e8:	movs	r5, #0
    b7ea:	b.n	b6d4 <_svfprintf_r+0x6f4>
    b7ec:	ldrb.w	r3, [sl]
    b7f0:	cmp	r3, #108	; 0x6c
    b7f2:	ittte	eq
    b7f4:	ldrbeq.w	r3, [sl, #1]
    b7f8:	orreq.w	fp, fp, #32
    b7fc:	addeq.w	sl, sl, #1
    b800:	orrne.w	fp, fp, #16
    b804:	b.n	b092 <_svfprintf_r+0xb2>
    b806:	cmp	r2, #0
    b808:	bne.w	c4ea <_svfprintf_r+0x150a>
    b80c:	tst.w	fp, #32
    b810:	beq.w	bee0 <_svfprintf_r+0xf00>
    b814:	ldr	r2, [sp, #36]	; 0x24
    b816:	ldr	r1, [sp, #24]
    b818:	ldr	r3, [r2, #0]
    b81a:	asrs	r5, r1, #31
    b81c:	mov	r0, r1
    b81e:	adds	r2, #4
    b820:	mov	r1, r5
    b822:	str	r2, [sp, #36]	; 0x24
    b824:	strd	r0, r1, [r3]
    b828:	b.n	b02c <_svfprintf_r+0x4c>
    b82a:	orr.w	fp, fp, #32
    b82e:	ldrb.w	r3, [sl]
    b832:	b.n	b092 <_svfprintf_r+0xb2>
    b834:	ldr	r2, [sp, #36]	; 0x24
    b836:	str	r3, [sp, #48]	; 0x30
    b838:	ldr	r6, [r2, #0]
    b83a:	movs	r4, #0
    b83c:	strb.w	r4, [sp, #79]	; 0x4f
    b840:	adds	r7, r2, #4
    b842:	cmp	r6, #0
    b844:	beq.w	c312 <_svfprintf_r+0x1332>
    b848:	cmp	r5, #0
    b84a:	blt.w	c192 <_svfprintf_r+0x11b2>
    b84e:	mov	r2, r5
    b850:	mov	r1, r4
    b852:	mov	r0, r6
    b854:	bl	9640 <memchr>
    b858:	cmp	r0, #0
    b85a:	beq.w	c3f6 <_svfprintf_r+0x1416>
    b85e:	subs	r3, r0, r6
    b860:	str	r3, [sp, #32]
    b862:	mov	r8, r4
    b864:	bic.w	r3, r3, r3, asr #31
    b868:	str	r7, [sp, #36]	; 0x24
    b86a:	str	r3, [sp, #16]
    b86c:	str.w	r8, [sp, #56]	; 0x38
    b870:	ldrb.w	r7, [sp, #79]	; 0x4f
    b874:	b.n	b3c4 <_svfprintf_r+0x3e4>
    b876:	ldr	r0, [pc, #340]	; (b9cc <_svfprintf_r+0x9ec>)
    b878:	str	r2, [sp, #48]	; 0x30
    b87a:	cmp.w	r8, #0
    b87e:	bne.w	bb8a <_svfprintf_r+0xbaa>
    b882:	mov	r7, r8
    b884:	mov.w	r8, #0
    b888:	str.w	r8, [sp, #32]
    b88c:	add	r6, sp, #160	; 0xa0
    b88e:	b.n	b69e <_svfprintf_r+0x6be>
    b890:	str	r3, [sp, #48]	; 0x30
    b892:	cmp	r2, #0
    b894:	bne.w	c4f2 <_svfprintf_r+0x1512>
    b898:	ldr	r2, [sp, #48]	; 0x30
    b89a:	cmp	r2, #0
    b89c:	beq.w	b1be <_svfprintf_r+0x1de>
    b8a0:	movs	r3, #0
    b8a2:	movs	r1, #1
    b8a4:	mov	r7, r3
    b8a6:	str	r1, [sp, #16]
    b8a8:	strb.w	r2, [sp, #120]	; 0x78
    b8ac:	strb.w	r3, [sp, #79]	; 0x4f
    b8b0:	mov	r8, r3
    b8b2:	str	r3, [sp, #56]	; 0x38
    b8b4:	str	r1, [sp, #32]
    b8b6:	add	r6, sp, #120	; 0x78
    b8b8:	b.n	b3cc <_svfprintf_r+0x3ec>
    b8ba:	cmp.w	r8, #0
    b8be:	beq.w	c3d8 <_svfprintf_r+0x13f8>
    b8c2:	movs	r7, #0
    b8c4:	movs	r4, #0
    b8c6:	movs	r5, #0
    b8c8:	b.n	b224 <_svfprintf_r+0x244>
    b8ca:	ldr	r0, [pc, #256]	; (b9cc <_svfprintf_r+0x9ec>)
    b8cc:	str	r2, [sp, #48]	; 0x30
    b8ce:	mov	fp, r3
    b8d0:	orrs.w	r3, r4, r5
    b8d4:	str	r7, [sp, #36]	; 0x24
    b8d6:	mov.w	r7, #0
    b8da:	bne.w	b70a <_svfprintf_r+0x72a>
    b8de:	movs	r4, #0
    b8e0:	movs	r5, #0
    b8e2:	b.n	b70a <_svfprintf_r+0x72a>
    b8e4:	ldr	r3, [sp, #116]	; 0x74
    b8e6:	b.n	b460 <_svfprintf_r+0x480>
    b8e8:	ldr	r2, [sp, #48]	; 0x30
    b8ea:	cmp	r2, #101	; 0x65
    b8ec:	ble.w	ba32 <_svfprintf_r+0xa52>
    b8f0:	vcmp.f64	d8, #0.0
    b8f4:	vmrs	APSR_nzcv, fpscr
    b8f8:	bne.w	bb8e <_svfprintf_r+0xbae>
    b8fc:	ldr	r2, [sp, #112]	; 0x70
    b8fe:	ldr	r1, [pc, #208]	; (b9d0 <_svfprintf_r+0x9f0>)
    b900:	str.w	r1, [r9]
    b904:	adds	r2, #1
    b906:	adds	r3, #1
    b908:	movs	r1, #1
    b90a:	cmp	r2, #7
    b90c:	str	r3, [sp, #116]	; 0x74
    b90e:	str	r2, [sp, #112]	; 0x70
    b910:	str.w	r1, [r9, #4]
    b914:	bgt.w	c03c <_svfprintf_r+0x105c>
    b918:	add.w	r9, r9, #8
    b91c:	ldr	r2, [sp, #84]	; 0x54
    b91e:	ldr	r1, [sp, #52]	; 0x34
    b920:	cmp	r2, r1
    b922:	blt.n	b92c <_svfprintf_r+0x94c>
    b924:	tst.w	fp, #1
    b928:	beq.w	b542 <_svfprintf_r+0x562>
    b92c:	ldr	r2, [sp, #112]	; 0x70
    b92e:	ldr	r0, [sp, #60]	; 0x3c
    b930:	ldr	r1, [sp, #64]	; 0x40
    b932:	str.w	r1, [r9]
    b936:	adds	r2, #1
    b938:	add	r3, r0
    b93a:	cmp	r2, #7
    b93c:	str	r3, [sp, #116]	; 0x74
    b93e:	str.w	r0, [r9, #4]
    b942:	str	r2, [sp, #112]	; 0x70
    b944:	bgt.w	c0f4 <_svfprintf_r+0x1114>
    b948:	add.w	r9, r9, #8
    b94c:	ldr	r2, [sp, #52]	; 0x34
    b94e:	subs	r4, r2, #1
    b950:	cmp	r4, #0
    b952:	ble.w	b542 <_svfprintf_r+0x562>
    b956:	cmp	r4, #16
    b958:	ldr	r2, [sp, #112]	; 0x70
    b95a:	ldr	r7, [pc, #120]	; (b9d4 <_svfprintf_r+0x9f4>)
    b95c:	ble.w	bd18 <_svfprintf_r+0xd38>
    b960:	movs	r5, #16
    b962:	ldr	r6, [sp, #20]
    b964:	ldr.w	r8, [sp, #12]
    b968:	b.n	b976 <_svfprintf_r+0x996>
    b96a:	add.w	r9, r9, #8
    b96e:	subs	r4, #16
    b970:	cmp	r4, #16
    b972:	ble.w	bd18 <_svfprintf_r+0xd38>
    b976:	adds	r2, #1
    b978:	adds	r3, #16
    b97a:	cmp	r2, #7
    b97c:	str	r3, [sp, #116]	; 0x74
    b97e:	str	r2, [sp, #112]	; 0x70
    b980:	str.w	r7, [r9]
    b984:	str.w	r5, [r9, #4]
    b988:	ble.n	b96a <_svfprintf_r+0x98a>
    b98a:	add	r2, sp, #108	; 0x6c
    b98c:	mov	r1, r8
    b98e:	mov	r0, r6
    b990:	bl	fc08 <__ssprint_r>
    b994:	cmp	r0, #0
    b996:	bne.w	b1cc <_svfprintf_r+0x1ec>
    b99a:	ldr	r3, [sp, #116]	; 0x74
    b99c:	ldr	r2, [sp, #112]	; 0x70
    b99e:	add.w	r9, sp, #160	; 0xa0
    b9a2:	b.n	b96e <_svfprintf_r+0x98e>
    b9a4:	ldr	r2, [sp, #28]
    b9a6:	ldr	r1, [sp, #16]
    b9a8:	subs	r4, r2, r1
    b9aa:	cmp	r4, #0
    b9ac:	ble.w	b4a8 <_svfprintf_r+0x4c8>
    b9b0:	cmp	r4, #16
    b9b2:	ldr	r2, [sp, #112]	; 0x70
    b9b4:	ldr	r7, [pc, #28]	; (b9d4 <_svfprintf_r+0x9f4>)
    b9b6:	ble.n	ba16 <_svfprintf_r+0xa36>
    b9b8:	mov	r1, r9
    b9ba:	movs	r5, #16
    b9bc:	mov	r9, r8
    b9be:	mov	r0, r3
    b9c0:	mov	r8, r6
    b9c2:	ldr	r6, [sp, #20]
    b9c4:	b.n	b9e2 <_svfprintf_r+0xa02>
    b9c6:	nop
    b9c8:	.word	0x200016b0
    b9cc:	.word	0x200016c4
    b9d0:	.word	0x200016e0
    b9d4:	.word	0x20001780
    b9d8:	subs	r4, #16
    b9da:	cmp	r4, #16
    b9dc:	add.w	r1, r1, #8
    b9e0:	ble.n	ba0e <_svfprintf_r+0xa2e>
    b9e2:	adds	r2, #1
    b9e4:	adds	r0, #16
    b9e6:	cmp	r2, #7
    b9e8:	str	r0, [sp, #116]	; 0x74
    b9ea:	str	r2, [sp, #112]	; 0x70
    b9ec:	str	r7, [r1, #0]
    b9ee:	str	r5, [r1, #4]
    b9f0:	ble.n	b9d8 <_svfprintf_r+0x9f8>
    b9f2:	add	r2, sp, #108	; 0x6c
    b9f4:	ldr	r1, [sp, #12]
    b9f6:	mov	r0, r6
    b9f8:	bl	fc08 <__ssprint_r>
    b9fc:	cmp	r0, #0
    b9fe:	bne.w	b1cc <_svfprintf_r+0x1ec>
    ba02:	subs	r4, #16
    ba04:	cmp	r4, #16
    ba06:	ldr	r0, [sp, #116]	; 0x74
    ba08:	ldr	r2, [sp, #112]	; 0x70
    ba0a:	add	r1, sp, #160	; 0xa0
    ba0c:	bgt.n	b9e2 <_svfprintf_r+0xa02>
    ba0e:	mov	r6, r8
    ba10:	mov	r3, r0
    ba12:	mov	r8, r9
    ba14:	mov	r9, r1
    ba16:	adds	r2, #1
    ba18:	add	r3, r4
    ba1a:	cmp	r2, #7
    ba1c:	str	r3, [sp, #116]	; 0x74
    ba1e:	str	r2, [sp, #112]	; 0x70
    ba20:	str.w	r7, [r9]
    ba24:	str.w	r4, [r9, #4]
    ba28:	bgt.w	beb8 <_svfprintf_r+0xed8>
    ba2c:	add.w	r9, r9, #8
    ba30:	b.n	b4a8 <_svfprintf_r+0x4c8>
    ba32:	ldr	r2, [sp, #52]	; 0x34
    ba34:	str.w	r6, [r9]
    ba38:	cmp	r2, #1
    ba3a:	ldr	r2, [sp, #112]	; 0x70
    ba3c:	add.w	r3, r3, #1
    ba40:	add.w	r2, r2, #1
    ba44:	mov.w	r1, #1
    ba48:	str	r3, [sp, #116]	; 0x74
    ba4a:	str	r2, [sp, #112]	; 0x70
    ba4c:	str.w	r1, [r9, #4]
    ba50:	ble.w	be74 <_svfprintf_r+0xe94>
    ba54:	cmp	r2, #7
    ba56:	bgt.w	be84 <_svfprintf_r+0xea4>
    ba5a:	add.w	r9, r9, #8
    ba5e:	ldr	r0, [sp, #60]	; 0x3c
    ba60:	ldr	r1, [sp, #64]	; 0x40
    ba62:	str.w	r1, [r9]
    ba66:	adds	r2, #1
    ba68:	add	r3, r0
    ba6a:	cmp	r2, #7
    ba6c:	str	r3, [sp, #116]	; 0x74
    ba6e:	str	r2, [sp, #112]	; 0x70
    ba70:	str.w	r0, [r9, #4]
    ba74:	bgt.w	be9e <_svfprintf_r+0xebe>
    ba78:	add.w	r9, r9, #8
    ba7c:	vcmp.f64	d8, #0.0
    ba80:	vmrs	APSR_nzcv, fpscr
    ba84:	ldr	r1, [sp, #52]	; 0x34
    ba86:	beq.w	bc74 <_svfprintf_r+0xc94>
    ba8a:	subs	r1, #1
    ba8c:	adds	r2, #1
    ba8e:	adds	r6, #1
    ba90:	add	r3, r1
    ba92:	cmp	r2, #7
    ba94:	str.w	r6, [r9]
    ba98:	str	r2, [sp, #112]	; 0x70
    ba9a:	str	r3, [sp, #116]	; 0x74
    ba9c:	str.w	r1, [r9, #4]
    baa0:	bgt.w	bcde <_svfprintf_r+0xcfe>
    baa4:	add.w	r9, r9, #8
    baa8:	ldr	r0, [sp, #68]	; 0x44
    baaa:	str.w	r0, [r9, #4]
    baae:	adds	r2, #1
    bab0:	add	r3, r0
    bab2:	add	r1, sp, #92	; 0x5c
    bab4:	cmp	r2, #7
    bab6:	str	r3, [sp, #116]	; 0x74
    bab8:	str	r2, [sp, #112]	; 0x70
    baba:	str.w	r1, [r9]
    babe:	ble.w	b53e <_svfprintf_r+0x55e>
    bac2:	add	r2, sp, #108	; 0x6c
    bac4:	ldr	r1, [sp, #12]
    bac6:	ldr	r0, [sp, #20]
    bac8:	bl	fc08 <__ssprint_r>
    bacc:	cmp	r0, #0
    bace:	bne.w	b1cc <_svfprintf_r+0x1ec>
    bad2:	ldr	r3, [sp, #116]	; 0x74
    bad4:	add.w	r9, sp, #160	; 0xa0
    bad8:	b.n	b542 <_svfprintf_r+0x562>
    bada:	add	r2, sp, #108	; 0x6c
    badc:	ldr	r1, [sp, #12]
    bade:	ldr	r0, [sp, #20]
    bae0:	bl	fc08 <__ssprint_r>
    bae4:	cmp	r0, #0
    bae6:	beq.w	b5dc <_svfprintf_r+0x5fc>
    baea:	b.w	b1cc <_svfprintf_r+0x1ec>
    baee:	ldr	r1, [sp, #36]	; 0x24
    baf0:	cmp.w	r8, #0
    baf4:	ldr	r4, [r1, #0]
    baf6:	strb.w	r3, [sp, #79]	; 0x4f
    bafa:	add.w	r7, r1, #4
    bafe:	mov.w	r5, #0
    bb02:	blt.w	c1e8 <_svfprintf_r+0x1208>
    bb06:	orrs.w	r2, r4, r5
    bb0a:	str	r7, [sp, #36]	; 0x24
    bb0c:	bic.w	fp, fp, #128	; 0x80
    bb10:	mov	r7, r3
    bb12:	bne.w	b32a <_svfprintf_r+0x34a>
    bb16:	cmp.w	r8, #0
    bb1a:	beq.w	b884 <_svfprintf_r+0x8a4>
    bb1e:	movs	r4, #0
    bb20:	b.n	b690 <_svfprintf_r+0x6b0>
    bb22:	add	r2, sp, #108	; 0x6c
    bb24:	ldr	r1, [sp, #12]
    bb26:	ldr	r0, [sp, #20]
    bb28:	bl	fc08 <__ssprint_r>
    bb2c:	cmp	r0, #0
    bb2e:	bne.w	b1cc <_svfprintf_r+0x1ec>
    bb32:	ldr	r3, [sp, #116]	; 0x74
    bb34:	add.w	r9, sp, #160	; 0xa0
    bb38:	b.n	b51c <_svfprintf_r+0x53c>
    bb3a:	add	r2, sp, #108	; 0x6c
    bb3c:	ldr	r1, [sp, #12]
    bb3e:	ldr	r0, [sp, #20]
    bb40:	bl	fc08 <__ssprint_r>
    bb44:	cmp	r0, #0
    bb46:	bne.w	b1cc <_svfprintf_r+0x1ec>
    bb4a:	ldr	r3, [sp, #116]	; 0x74
    bb4c:	add.w	r9, sp, #160	; 0xa0
    bb50:	b.n	b480 <_svfprintf_r+0x4a0>
    bb52:	add	r2, sp, #108	; 0x6c
    bb54:	ldr	r1, [sp, #12]
    bb56:	ldr	r0, [sp, #20]
    bb58:	bl	fc08 <__ssprint_r>
    bb5c:	cmp	r0, #0
    bb5e:	bne.w	b1cc <_svfprintf_r+0x1ec>
    bb62:	ldr	r3, [sp, #116]	; 0x74
    bb64:	add.w	r9, sp, #160	; 0xa0
    bb68:	b.n	b4a0 <_svfprintf_r+0x4c0>
    bb6a:	cmp.w	r8, #0
    bb6e:	strb.w	r7, [sp, #79]	; 0x4f
    bb72:	blt.w	c054 <_svfprintf_r+0x1074>
    bb76:	orrs.w	r3, r4, r5
    bb7a:	bic.w	fp, fp, #128	; 0x80
    bb7e:	bne.w	b70a <_svfprintf_r+0x72a>
    bb82:	cmp.w	r8, #0
    bb86:	beq.w	b882 <_svfprintf_r+0x8a2>
    bb8a:	movs	r7, #0
    bb8c:	b.n	b8de <_svfprintf_r+0x8fe>
    bb8e:	ldr	r4, [sp, #84]	; 0x54
    bb90:	cmp	r4, #0
    bb92:	ble.w	c058 <_svfprintf_r+0x1078>
    bb96:	ldr	r2, [sp, #56]	; 0x38
    bb98:	ldr	r1, [sp, #52]	; 0x34
    bb9a:	cmp	r2, r1
    bb9c:	it	ge
    bb9e:	movge	r2, r1
    bba0:	cmp	r2, #0
    bba2:	mov	r4, r2
    bba4:	ble.n	bbc2 <_svfprintf_r+0xbe2>
    bba6:	ldr	r2, [sp, #112]	; 0x70
    bba8:	str.w	r6, [r9]
    bbac:	adds	r2, #1
    bbae:	add	r3, r4
    bbb0:	cmp	r2, #7
    bbb2:	str	r3, [sp, #116]	; 0x74
    bbb4:	str.w	r4, [r9, #4]
    bbb8:	str	r2, [sp, #112]	; 0x70
    bbba:	bgt.w	c2a2 <_svfprintf_r+0x12c2>
    bbbe:	add.w	r9, r9, #8
    bbc2:	ldr	r2, [sp, #56]	; 0x38
    bbc4:	cmp	r4, #0
    bbc6:	it	ge
    bbc8:	subge	r2, r2, r4
    bbca:	cmp	r2, #0
    bbcc:	mov	r4, r2
    bbce:	ble.w	bdb4 <_svfprintf_r+0xdd4>
    bbd2:	cmp	r4, #16
    bbd4:	ldr	r2, [sp, #112]	; 0x70
    bbd6:	ldr	r7, [pc, #772]	; (bedc <_svfprintf_r+0xefc>)
    bbd8:	ble.w	c00e <_svfprintf_r+0x102e>
    bbdc:	mov	r1, r9
    bbde:	movs	r5, #16
    bbe0:	mov	r9, r6
    bbe2:	ldr.w	r8, [sp, #20]
    bbe6:	ldr	r6, [sp, #12]
    bbe8:	b.n	bbf4 <_svfprintf_r+0xc14>
    bbea:	adds	r1, #8
    bbec:	subs	r4, #16
    bbee:	cmp	r4, #16
    bbf0:	ble.w	c00a <_svfprintf_r+0x102a>
    bbf4:	adds	r2, #1
    bbf6:	adds	r3, #16
    bbf8:	cmp	r2, #7
    bbfa:	str	r3, [sp, #116]	; 0x74
    bbfc:	str	r2, [sp, #112]	; 0x70
    bbfe:	str	r7, [r1, #0]
    bc00:	str	r5, [r1, #4]
    bc02:	ble.n	bbea <_svfprintf_r+0xc0a>
    bc04:	add	r2, sp, #108	; 0x6c
    bc06:	mov	r1, r6
    bc08:	mov	r0, r8
    bc0a:	bl	fc08 <__ssprint_r>
    bc0e:	cmp	r0, #0
    bc10:	bne.w	b1cc <_svfprintf_r+0x1ec>
    bc14:	ldr	r3, [sp, #116]	; 0x74
    bc16:	ldr	r2, [sp, #112]	; 0x70
    bc18:	add	r1, sp, #160	; 0xa0
    bc1a:	b.n	bbec <_svfprintf_r+0xc0c>
    bc1c:	add	r2, sp, #108	; 0x6c
    bc1e:	ldr	r1, [sp, #12]
    bc20:	ldr	r0, [sp, #20]
    bc22:	bl	fc08 <__ssprint_r>
    bc26:	cmp	r0, #0
    bc28:	bne.w	b1cc <_svfprintf_r+0x1ec>
    bc2c:	ldrb.w	r7, [sp, #79]	; 0x4f
    bc30:	ldr	r3, [sp, #116]	; 0x74
    bc32:	add.w	r9, sp, #160	; 0xa0
    bc36:	b.n	b460 <_svfprintf_r+0x480>
    bc38:	ands.w	r2, fp, #16
    bc3c:	bne.w	baee <_svfprintf_r+0xb0e>
    bc40:	ands.w	r3, fp, #64	; 0x40
    bc44:	beq.w	baee <_svfprintf_r+0xb0e>
    bc48:	ldr	r1, [sp, #36]	; 0x24
    bc4a:	strb.w	r2, [sp, #79]	; 0x4f
    bc4e:	mov	r3, r1
    bc50:	cmp.w	r8, #0
    bc54:	add.w	r3, r3, #4
    bc58:	ldrh	r4, [r1, #0]
    bc5a:	mov.w	r5, #0
    bc5e:	blt.w	c18a <_svfprintf_r+0x11aa>
    bc62:	orrs.w	r1, r4, r5
    bc66:	bic.w	fp, fp, #128	; 0x80
    bc6a:	str	r3, [sp, #36]	; 0x24
    bc6c:	mov	r7, r2
    bc6e:	bne.w	b32a <_svfprintf_r+0x34a>
    bc72:	b.n	bb16 <_svfprintf_r+0xb36>
    bc74:	subs	r4, r1, #1
    bc76:	cmp	r4, #0
    bc78:	ble.w	baa8 <_svfprintf_r+0xac8>
    bc7c:	cmp	r4, #16
    bc7e:	ldr	r7, [pc, #604]	; (bedc <_svfprintf_r+0xefc>)
    bc80:	ble.n	bcc8 <_svfprintf_r+0xce8>
    bc82:	movs	r5, #16
    bc84:	ldr	r6, [sp, #20]
    bc86:	ldr.w	r8, [sp, #12]
    bc8a:	b.n	bc96 <_svfprintf_r+0xcb6>
    bc8c:	subs	r4, #16
    bc8e:	cmp	r4, #16
    bc90:	add.w	r9, r9, #8
    bc94:	ble.n	bcc8 <_svfprintf_r+0xce8>
    bc96:	adds	r2, #1
    bc98:	adds	r3, #16
    bc9a:	cmp	r2, #7
    bc9c:	str	r3, [sp, #116]	; 0x74
    bc9e:	str	r2, [sp, #112]	; 0x70
    bca0:	str.w	r7, [r9]
    bca4:	str.w	r5, [r9, #4]
    bca8:	ble.n	bc8c <_svfprintf_r+0xcac>
    bcaa:	add	r2, sp, #108	; 0x6c
    bcac:	mov	r1, r8
    bcae:	mov	r0, r6
    bcb0:	bl	fc08 <__ssprint_r>
    bcb4:	cmp	r0, #0
    bcb6:	bne.w	b1cc <_svfprintf_r+0x1ec>
    bcba:	subs	r4, #16
    bcbc:	cmp	r4, #16
    bcbe:	ldr	r3, [sp, #116]	; 0x74
    bcc0:	ldr	r2, [sp, #112]	; 0x70
    bcc2:	add.w	r9, sp, #160	; 0xa0
    bcc6:	bgt.n	bc96 <_svfprintf_r+0xcb6>
    bcc8:	adds	r2, #1
    bcca:	add	r3, r4
    bccc:	cmp	r2, #7
    bcce:	str	r3, [sp, #116]	; 0x74
    bcd0:	str	r2, [sp, #112]	; 0x70
    bcd2:	str.w	r7, [r9]
    bcd6:	str.w	r4, [r9, #4]
    bcda:	ble.w	baa4 <_svfprintf_r+0xac4>
    bcde:	add	r2, sp, #108	; 0x6c
    bce0:	ldr	r1, [sp, #12]
    bce2:	ldr	r0, [sp, #20]
    bce4:	bl	fc08 <__ssprint_r>
    bce8:	cmp	r0, #0
    bcea:	bne.w	b1cc <_svfprintf_r+0x1ec>
    bcee:	ldr	r3, [sp, #116]	; 0x74
    bcf0:	ldr	r2, [sp, #112]	; 0x70
    bcf2:	add.w	r9, sp, #160	; 0xa0
    bcf6:	b.n	baa8 <_svfprintf_r+0xac8>
    bcf8:	tst.w	fp, #16
    bcfc:	bne.n	bd66 <_svfprintf_r+0xd86>
    bcfe:	tst.w	fp, #64	; 0x40
    bd02:	beq.n	bd66 <_svfprintf_r+0xd86>
    bd04:	ldr	r1, [sp, #36]	; 0x24
    bd06:	ldrsh.w	r4, [r1]
    bd0a:	adds	r1, #4
    bd0c:	asrs	r5, r4, #31
    bd0e:	mov	r2, r4
    bd10:	mov	r3, r5
    bd12:	str	r1, [sp, #36]	; 0x24
    bd14:	b.w	b308 <_svfprintf_r+0x328>
    bd18:	adds	r2, #1
    bd1a:	add	r3, r4
    bd1c:	cmp	r2, #7
    bd1e:	str	r3, [sp, #116]	; 0x74
    bd20:	str	r2, [sp, #112]	; 0x70
    bd22:	str.w	r7, [r9]
    bd26:	str.w	r4, [r9, #4]
    bd2a:	ble.w	b53e <_svfprintf_r+0x55e>
    bd2e:	b.n	bac2 <_svfprintf_r+0xae2>
    bd30:	ldr	r1, [sp, #36]	; 0x24
    bd32:	cmp.w	r8, #0
    bd36:	ldr	r4, [r1, #0]
    bd38:	strb.w	r3, [sp, #79]	; 0x4f
    bd3c:	add.w	r7, r1, #4
    bd40:	mov.w	r5, #0
    bd44:	blt.w	bed2 <_svfprintf_r+0xef2>
    bd48:	orrs.w	r2, r4, r5
    bd4c:	bic.w	fp, fp, #128	; 0x80
    bd50:	str	r7, [sp, #36]	; 0x24
    bd52:	beq.w	b8ba <_svfprintf_r+0x8da>
    bd56:	mov	r7, r3
    bd58:	b.w	b224 <_svfprintf_r+0x244>
    bd5c:	ldr	r4, [r3, #0]
    bd5e:	adds	r3, #4
    bd60:	str	r3, [sp, #36]	; 0x24
    bd62:	movs	r5, #0
    bd64:	b.n	b6d4 <_svfprintf_r+0x6f4>
    bd66:	ldr	r2, [sp, #36]	; 0x24
    bd68:	ldr	r4, [r2, #0]
    bd6a:	mov	r3, r2
    bd6c:	adds	r3, #4
    bd6e:	asrs	r5, r4, #31
    bd70:	mov	r2, r4
    bd72:	str	r3, [sp, #36]	; 0x24
    bd74:	cmp	r2, #0
    bd76:	mov	r3, r5
    bd78:	sbcs.w	r3, r3, #0
    bd7c:	bge.w	b312 <_svfprintf_r+0x332>
    bd80:	negs	r4, r4
    bd82:	mov.w	r7, #45	; 0x2d
    bd86:	sbc.w	r5, r5, r5, lsl #1
    bd8a:	cmp.w	r8, #0
    bd8e:	strb.w	r7, [sp, #79]	; 0x4f
    bd92:	blt.w	b32a <_svfprintf_r+0x34a>
    bd96:	bic.w	fp, fp, #128	; 0x80
    bd9a:	b.w	b32a <_svfprintf_r+0x34a>
    bd9e:	add	r2, sp, #108	; 0x6c
    bda0:	ldr	r1, [sp, #12]
    bda2:	ldr	r0, [sp, #20]
    bda4:	bl	fc08 <__ssprint_r>
    bda8:	cmp	r0, #0
    bdaa:	bne.w	b1cc <_svfprintf_r+0x1ec>
    bdae:	ldr	r3, [sp, #116]	; 0x74
    bdb0:	add.w	r9, sp, #160	; 0xa0
    bdb4:	ldr	r1, [sp, #56]	; 0x38
    bdb6:	ldr	r2, [sp, #84]	; 0x54
    bdb8:	add	r1, r6
    bdba:	mov	r5, r1
    bdbc:	ldr	r1, [sp, #52]	; 0x34
    bdbe:	cmp	r2, r1
    bdc0:	blt.n	be52 <_svfprintf_r+0xe72>
    bdc2:	tst.w	fp, #1
    bdc6:	bne.n	be52 <_svfprintf_r+0xe72>
    bdc8:	ldr	r0, [sp, #52]	; 0x34
    bdca:	add	r6, r0
    bdcc:	subs	r4, r6, r5
    bdce:	subs	r2, r0, r2
    bdd0:	cmp	r4, r2
    bdd2:	it	ge
    bdd4:	movge	r4, r2
    bdd6:	cmp	r4, #0
    bdd8:	mov	r6, r4
    bdda:	ble.n	bdf8 <_svfprintf_r+0xe18>
    bddc:	ldr	r1, [sp, #112]	; 0x70
    bdde:	str.w	r5, [r9]
    bde2:	adds	r1, #1
    bde4:	add	r3, r4
    bde6:	cmp	r1, #7
    bde8:	str	r3, [sp, #116]	; 0x74
    bdea:	str.w	r4, [r9, #4]
    bdee:	str	r1, [sp, #112]	; 0x70
    bdf0:	bgt.w	c2f4 <_svfprintf_r+0x1314>
    bdf4:	add.w	r9, r9, #8
    bdf8:	cmp	r6, #0
    bdfa:	ite	ge
    bdfc:	subge	r4, r2, r6
    bdfe:	movlt	r4, r2
    be00:	cmp	r4, #0
    be02:	ble.w	b542 <_svfprintf_r+0x562>
    be06:	cmp	r4, #16
    be08:	ldr	r2, [sp, #112]	; 0x70
    be0a:	ldr	r7, [pc, #208]	; (bedc <_svfprintf_r+0xefc>)
    be0c:	ble.n	bd18 <_svfprintf_r+0xd38>
    be0e:	movs	r5, #16
    be10:	ldr	r6, [sp, #20]
    be12:	ldr.w	r8, [sp, #12]
    be16:	b.n	be24 <_svfprintf_r+0xe44>
    be18:	add.w	r9, r9, #8
    be1c:	subs	r4, #16
    be1e:	cmp	r4, #16
    be20:	ble.w	bd18 <_svfprintf_r+0xd38>
    be24:	adds	r2, #1
    be26:	adds	r3, #16
    be28:	cmp	r2, #7
    be2a:	str	r3, [sp, #116]	; 0x74
    be2c:	str	r2, [sp, #112]	; 0x70
    be2e:	str.w	r7, [r9]
    be32:	str.w	r5, [r9, #4]
    be36:	ble.n	be18 <_svfprintf_r+0xe38>
    be38:	add	r2, sp, #108	; 0x6c
    be3a:	mov	r1, r8
    be3c:	mov	r0, r6
    be3e:	bl	fc08 <__ssprint_r>
    be42:	cmp	r0, #0
    be44:	bne.w	b1cc <_svfprintf_r+0x1ec>
    be48:	ldr	r3, [sp, #116]	; 0x74
    be4a:	ldr	r2, [sp, #112]	; 0x70
    be4c:	add.w	r9, sp, #160	; 0xa0
    be50:	b.n	be1c <_svfprintf_r+0xe3c>
    be52:	ldr	r1, [sp, #112]	; 0x70
    be54:	ldr	r4, [sp, #60]	; 0x3c
    be56:	ldr	r0, [sp, #64]	; 0x40
    be58:	str.w	r0, [r9]
    be5c:	adds	r1, #1
    be5e:	add	r3, r4
    be60:	cmp	r1, #7
    be62:	str	r3, [sp, #116]	; 0x74
    be64:	str.w	r4, [r9, #4]
    be68:	str	r1, [sp, #112]	; 0x70
    be6a:	bgt.w	c2ba <_svfprintf_r+0x12da>
    be6e:	add.w	r9, r9, #8
    be72:	b.n	bdc8 <_svfprintf_r+0xde8>
    be74:	tst.w	fp, #1
    be78:	bne.w	ba54 <_svfprintf_r+0xa74>
    be7c:	cmp	r2, #7
    be7e:	ble.w	baa4 <_svfprintf_r+0xac4>
    be82:	b.n	bcde <_svfprintf_r+0xcfe>
    be84:	add	r2, sp, #108	; 0x6c
    be86:	ldr	r1, [sp, #12]
    be88:	ldr	r0, [sp, #20]
    be8a:	bl	fc08 <__ssprint_r>
    be8e:	cmp	r0, #0
    be90:	bne.w	b1cc <_svfprintf_r+0x1ec>
    be94:	ldr	r3, [sp, #116]	; 0x74
    be96:	ldr	r2, [sp, #112]	; 0x70
    be98:	add.w	r9, sp, #160	; 0xa0
    be9c:	b.n	ba5e <_svfprintf_r+0xa7e>
    be9e:	add	r2, sp, #108	; 0x6c
    bea0:	ldr	r1, [sp, #12]
    bea2:	ldr	r0, [sp, #20]
    bea4:	bl	fc08 <__ssprint_r>
    bea8:	cmp	r0, #0
    beaa:	bne.w	b1cc <_svfprintf_r+0x1ec>
    beae:	ldr	r3, [sp, #116]	; 0x74
    beb0:	ldr	r2, [sp, #112]	; 0x70
    beb2:	add.w	r9, sp, #160	; 0xa0
    beb6:	b.n	ba7c <_svfprintf_r+0xa9c>
    beb8:	add	r2, sp, #108	; 0x6c
    beba:	ldr	r1, [sp, #12]
    bebc:	ldr	r0, [sp, #20]
    bebe:	bl	fc08 <__ssprint_r>
    bec2:	cmp	r0, #0
    bec4:	bne.w	b1cc <_svfprintf_r+0x1ec>
    bec8:	ldr	r3, [sp, #116]	; 0x74
    beca:	add.w	r9, sp, #160	; 0xa0
    bece:	b.w	b4a8 <_svfprintf_r+0x4c8>
    bed2:	str	r7, [sp, #36]	; 0x24
    bed4:	movs	r7, #0
    bed6:	b.w	b224 <_svfprintf_r+0x244>
    beda:	nop
    bedc:	.word	0x20001780
    bee0:	tst.w	fp, #16
    bee4:	bne.n	befe <_svfprintf_r+0xf1e>
    bee6:	tst.w	fp, #64	; 0x40
    beea:	beq.n	befe <_svfprintf_r+0xf1e>
    beec:	ldr	r2, [sp, #36]	; 0x24
    beee:	ldr	r3, [r2, #0]
    bef0:	adds	r2, #4
    bef2:	str	r2, [sp, #36]	; 0x24
    bef4:	ldrh.w	r2, [sp, #24]
    bef8:	strh	r2, [r3, #0]
    befa:	b.w	b02c <_svfprintf_r+0x4c>
    befe:	ldr	r2, [sp, #36]	; 0x24
    bf00:	ldr	r3, [r2, #0]
    bf02:	adds	r2, #4
    bf04:	str	r2, [sp, #36]	; 0x24
    bf06:	ldr	r2, [sp, #24]
    bf08:	str	r2, [r3, #0]
    bf0a:	b.w	b02c <_svfprintf_r+0x4c>
    bf0e:	vcmp.f64	d8, d8
    bf12:	vmrs	APSR_nzcv, fpscr
    bf16:	bvs.w	c456 <_svfprintf_r+0x1476>
    bf1a:	ldr	r3, [sp, #48]	; 0x30
    bf1c:	cmp.w	r8, #4294967295
    bf20:	bic.w	r5, r3, #32
    bf24:	beq.w	c372 <_svfprintf_r+0x1392>
    bf28:	cmp	r5, #71	; 0x47
    bf2a:	beq.w	c17a <_svfprintf_r+0x119a>
    bf2e:	orr.w	r3, fp, #256	; 0x100
    bf32:	str	r3, [sp, #40]	; 0x28
    bf34:	vmov	r3, s17
    bf38:	cmp	r3, #0
    bf3a:	blt.w	c378 <_svfprintf_r+0x1398>
    bf3e:	vmov.f64	d10, d8
    bf42:	movs	r7, #0
    bf44:	ldr	r3, [sp, #48]	; 0x30
    bf46:	cmp	r3, #102	; 0x66
    bf48:	beq.w	c350 <_svfprintf_r+0x1370>
    bf4c:	cmp	r3, #70	; 0x46
    bf4e:	beq.w	c12a <_svfprintf_r+0x114a>
    bf52:	vmov.f64	d0, d10
    bf56:	cmp	r5, #69	; 0x45
    bf58:	ite	eq
    bf5a:	addeq.w	r4, r8, #1
    bf5e:	movne	r4, r8
    bf60:	add	r2, sp, #100	; 0x64
    bf62:	add	r3, sp, #88	; 0x58
    bf64:	str	r2, [sp, #4]
    bf66:	str	r3, [sp, #0]
    bf68:	mov	r2, r4
    bf6a:	add	r3, sp, #84	; 0x54
    bf6c:	movs	r1, #2
    bf6e:	ldr	r0, [sp, #20]
    bf70:	bl	d648 <_dtoa_r>
    bf74:	ldr	r3, [sp, #48]	; 0x30
    bf76:	cmp	r3, #103	; 0x67
    bf78:	mov	r6, r0
    bf7a:	bne.w	c39a <_svfprintf_r+0x13ba>
    bf7e:	tst.w	fp, #1
    bf82:	beq.w	c452 <_svfprintf_r+0x1472>
    bf86:	adds	r1, r6, r4
    bf88:	vcmp.f64	d10, #0.0
    bf8c:	vmrs	APSR_nzcv, fpscr
    bf90:	beq.w	c29e <_svfprintf_r+0x12be>
    bf94:	ldr	r3, [sp, #100]	; 0x64
    bf96:	cmp	r1, r3
    bf98:	bls.n	bfa8 <_svfprintf_r+0xfc8>
    bf9a:	movs	r0, #48	; 0x30
    bf9c:	adds	r2, r3, #1
    bf9e:	str	r2, [sp, #100]	; 0x64
    bfa0:	strb	r0, [r3, #0]
    bfa2:	ldr	r3, [sp, #100]	; 0x64
    bfa4:	cmp	r1, r3
    bfa6:	bhi.n	bf9c <_svfprintf_r+0xfbc>
    bfa8:	subs	r3, r3, r6
    bfaa:	cmp	r5, #71	; 0x47
    bfac:	str	r3, [sp, #52]	; 0x34
    bfae:	beq.w	c1f0 <_svfprintf_r+0x1210>
    bfb2:	ldr	r3, [sp, #48]	; 0x30
    bfb4:	cmp	r3, #101	; 0x65
    bfb6:	ble.w	c3b8 <_svfprintf_r+0x13d8>
    bfba:	ldr	r3, [sp, #48]	; 0x30
    bfbc:	cmp	r3, #102	; 0x66
    bfbe:	ldr	r3, [sp, #84]	; 0x54
    bfc0:	beq.w	c3bc <_svfprintf_r+0x13dc>
    bfc4:	str	r3, [sp, #56]	; 0x38
    bfc6:	ldr	r2, [sp, #56]	; 0x38
    bfc8:	ldr	r1, [sp, #52]	; 0x34
    bfca:	cmp	r2, r1
    bfcc:	blt.w	c380 <_svfprintf_r+0x13a0>
    bfd0:	tst.w	fp, #1
    bfd4:	bne.w	c440 <_svfprintf_r+0x1460>
    bfd8:	bic.w	r3, r2, r2, asr #31
    bfdc:	str	r2, [sp, #32]
    bfde:	movs	r2, #103	; 0x67
    bfe0:	str	r2, [sp, #48]	; 0x30
    bfe2:	cmp	r7, #0
    bfe4:	bne.w	c1d4 <_svfprintf_r+0x11f4>
    bfe8:	mov	r8, r7
    bfea:	str	r3, [sp, #16]
    bfec:	ldr.w	fp, [sp, #40]	; 0x28
    bff0:	ldrb.w	r7, [sp, #79]	; 0x4f
    bff4:	b.w	b3c4 <_svfprintf_r+0x3e4>
    bff8:	bic.w	r7, r7, #7
    bffc:	add.w	r3, r7, #8
    c000:	vldr	d8, [r7]
    c004:	str	r3, [sp, #36]	; 0x24
    c006:	b.w	b386 <_svfprintf_r+0x3a6>
    c00a:	mov	r6, r9
    c00c:	mov	r9, r1
    c00e:	adds	r2, #1
    c010:	add	r3, r4
    c012:	cmp	r2, #7
    c014:	str	r3, [sp, #116]	; 0x74
    c016:	str	r2, [sp, #112]	; 0x70
    c018:	str.w	r7, [r9]
    c01c:	str.w	r4, [r9, #4]
    c020:	bgt.w	bd9e <_svfprintf_r+0xdbe>
    c024:	add.w	r9, r9, #8
    c028:	b.n	bdb4 <_svfprintf_r+0xdd4>
    c02a:	movs	r7, #0
    c02c:	cmp	r8, r7
    c02e:	strb.w	r7, [sp, #79]	; 0x4f
    c032:	blt.w	b8de <_svfprintf_r+0x8fe>
    c036:	bic.w	fp, fp, #128	; 0x80
    c03a:	b.n	b87a <_svfprintf_r+0x89a>
    c03c:	add	r2, sp, #108	; 0x6c
    c03e:	ldr	r1, [sp, #12]
    c040:	ldr	r0, [sp, #20]
    c042:	bl	fc08 <__ssprint_r>
    c046:	cmp	r0, #0
    c048:	bne.w	b1cc <_svfprintf_r+0x1ec>
    c04c:	ldr	r3, [sp, #116]	; 0x74
    c04e:	add.w	r9, sp, #160	; 0xa0
    c052:	b.n	b91c <_svfprintf_r+0x93c>
    c054:	ldr	r7, [sp, #36]	; 0x24
    c056:	b.n	b8d0 <_svfprintf_r+0x8f0>
    c058:	ldr	r2, [sp, #112]	; 0x70
    c05a:	ldr	r1, [pc, #740]	; (c340 <_svfprintf_r+0x1360>)
    c05c:	str.w	r1, [r9]
    c060:	adds	r2, #1
    c062:	adds	r3, #1
    c064:	movs	r1, #1
    c066:	cmp	r2, #7
    c068:	str	r3, [sp, #116]	; 0x74
    c06a:	str	r2, [sp, #112]	; 0x70
    c06c:	str.w	r1, [r9, #4]
    c070:	bgt.n	c160 <_svfprintf_r+0x1180>
    c072:	add.w	r9, r9, #8
    c076:	cbnz	r4, c084 <_svfprintf_r+0x10a4>
    c078:	ldr	r2, [sp, #52]	; 0x34
    c07a:	cbnz	r2, c084 <_svfprintf_r+0x10a4>
    c07c:	tst.w	fp, #1
    c080:	beq.w	b542 <_svfprintf_r+0x562>
    c084:	ldr	r2, [sp, #112]	; 0x70
    c086:	ldr	r0, [sp, #60]	; 0x3c
    c088:	ldr	r1, [sp, #64]	; 0x40
    c08a:	str.w	r1, [r9]
    c08e:	adds	r2, #1
    c090:	add	r3, r0
    c092:	cmp	r2, #7
    c094:	str	r3, [sp, #116]	; 0x74
    c096:	str.w	r0, [r9, #4]
    c09a:	str	r2, [sp, #112]	; 0x70
    c09c:	bgt.w	c40c <_svfprintf_r+0x142c>
    c0a0:	add.w	r9, r9, #8
    c0a4:	negs	r4, r4
    c0a6:	cmp	r4, #0
    c0a8:	ble.w	c1ba <_svfprintf_r+0x11da>
    c0ac:	cmp	r4, #16
    c0ae:	ldr	r7, [pc, #660]	; (c344 <_svfprintf_r+0x1364>)
    c0b0:	ble.w	c2d8 <_svfprintf_r+0x12f8>
    c0b4:	mov	r1, r9
    c0b6:	movs	r5, #16
    c0b8:	mov	r9, r6
    c0ba:	ldr.w	r8, [sp, #20]
    c0be:	ldr	r6, [sp, #12]
    c0c0:	b.n	c0cc <_svfprintf_r+0x10ec>
    c0c2:	adds	r1, #8
    c0c4:	subs	r4, #16
    c0c6:	cmp	r4, #16
    c0c8:	ble.w	c2d4 <_svfprintf_r+0x12f4>
    c0cc:	adds	r2, #1
    c0ce:	adds	r3, #16
    c0d0:	cmp	r2, #7
    c0d2:	str	r3, [sp, #116]	; 0x74
    c0d4:	str	r2, [sp, #112]	; 0x70
    c0d6:	str	r7, [r1, #0]
    c0d8:	str	r5, [r1, #4]
    c0da:	ble.n	c0c2 <_svfprintf_r+0x10e2>
    c0dc:	add	r2, sp, #108	; 0x6c
    c0de:	mov	r1, r6
    c0e0:	mov	r0, r8
    c0e2:	bl	fc08 <__ssprint_r>
    c0e6:	cmp	r0, #0
    c0e8:	bne.w	b1cc <_svfprintf_r+0x1ec>
    c0ec:	ldr	r3, [sp, #116]	; 0x74
    c0ee:	ldr	r2, [sp, #112]	; 0x70
    c0f0:	add	r1, sp, #160	; 0xa0
    c0f2:	b.n	c0c4 <_svfprintf_r+0x10e4>
    c0f4:	add	r2, sp, #108	; 0x6c
    c0f6:	ldr	r1, [sp, #12]
    c0f8:	ldr	r0, [sp, #20]
    c0fa:	bl	fc08 <__ssprint_r>
    c0fe:	cmp	r0, #0
    c100:	bne.w	b1cc <_svfprintf_r+0x1ec>
    c104:	ldr	r3, [sp, #116]	; 0x74
    c106:	add.w	r9, sp, #160	; 0xa0
    c10a:	b.n	b94c <_svfprintf_r+0x96c>
    c10c:	movs	r1, #64	; 0x40
    c10e:	ldr	r0, [sp, #20]
    c110:	bl	9098 <_malloc_r>
    c114:	ldr	r2, [sp, #12]
    c116:	str	r0, [r2, #0]
    c118:	str	r0, [r2, #16]
    c11a:	cmp	r0, #0
    c11c:	beq.w	c4fa <_svfprintf_r+0x151a>
    c120:	ldr	r2, [sp, #12]
    c122:	movs	r3, #64	; 0x40
    c124:	str	r3, [r2, #20]
    c126:	b.w	b012 <_svfprintf_r+0x32>
    c12a:	add	r2, sp, #100	; 0x64
    c12c:	add	r3, sp, #88	; 0x58
    c12e:	str	r2, [sp, #4]
    c130:	str	r3, [sp, #0]
    c132:	mov	r2, r8
    c134:	add	r3, sp, #84	; 0x54
    c136:	movs	r1, #3
    c138:	vmov.f64	d0, d10
    c13c:	ldr	r0, [sp, #20]
    c13e:	bl	d648 <_dtoa_r>
    c142:	mov	r4, r8
    c144:	mov	r6, r0
    c146:	ldr	r3, [sp, #48]	; 0x30
    c148:	cmp	r3, #70	; 0x46
    c14a:	add.w	r1, r6, r4
    c14e:	bne.w	bf88 <_svfprintf_r+0xfa8>
    c152:	ldrb	r3, [r6, #0]
    c154:	cmp	r3, #48	; 0x30
    c156:	beq.w	c474 <_svfprintf_r+0x1494>
    c15a:	ldr	r4, [sp, #84]	; 0x54
    c15c:	add	r1, r4
    c15e:	b.n	bf88 <_svfprintf_r+0xfa8>
    c160:	add	r2, sp, #108	; 0x6c
    c162:	ldr	r1, [sp, #12]
    c164:	ldr	r0, [sp, #20]
    c166:	bl	fc08 <__ssprint_r>
    c16a:	cmp	r0, #0
    c16c:	bne.w	b1cc <_svfprintf_r+0x1ec>
    c170:	ldr	r4, [sp, #84]	; 0x54
    c172:	ldr	r3, [sp, #116]	; 0x74
    c174:	add.w	r9, sp, #160	; 0xa0
    c178:	b.n	c076 <_svfprintf_r+0x1096>
    c17a:	cmp.w	r8, #0
    c17e:	it	eq
    c180:	moveq.w	r8, #1
    c184:	b.n	bf2e <_svfprintf_r+0xf4e>
    c186:	str	r3, [sp, #36]	; 0x24
    c188:	b.n	bed4 <_svfprintf_r+0xef4>
    c18a:	str	r3, [sp, #36]	; 0x24
    c18c:	mov	r7, r2
    c18e:	b.w	b688 <_svfprintf_r+0x6a8>
    c192:	mov	r0, r6
    c194:	bl	9e40 <strlen>
    c198:	mov	r8, r4
    c19a:	mov	r3, r0
    c19c:	str	r0, [sp, #32]
    c19e:	b.w	b864 <_svfprintf_r+0x884>
    c1a2:	add	r2, sp, #108	; 0x6c
    c1a4:	ldr	r1, [sp, #12]
    c1a6:	ldr	r0, [sp, #20]
    c1a8:	bl	fc08 <__ssprint_r>
    c1ac:	cmp	r0, #0
    c1ae:	bne.w	b1cc <_svfprintf_r+0x1ec>
    c1b2:	ldr	r3, [sp, #116]	; 0x74
    c1b4:	ldr	r2, [sp, #112]	; 0x70
    c1b6:	add.w	r9, sp, #160	; 0xa0
    c1ba:	ldr	r0, [sp, #52]	; 0x34
    c1bc:	str.w	r6, [r9]
    c1c0:	adds	r2, #1
    c1c2:	add	r3, r0
    c1c4:	cmp	r2, #7
    c1c6:	str	r3, [sp, #116]	; 0x74
    c1c8:	str	r2, [sp, #112]	; 0x70
    c1ca:	str.w	r0, [r9, #4]
    c1ce:	ble.w	b53e <_svfprintf_r+0x55e>
    c1d2:	b.n	bac2 <_svfprintf_r+0xae2>
    c1d4:	movs	r7, #45	; 0x2d
    c1d6:	str	r3, [sp, #16]
    c1d8:	ldr.w	fp, [sp, #40]	; 0x28
    c1dc:	strb.w	r7, [sp, #79]	; 0x4f
    c1e0:	mov.w	r8, #0
    c1e4:	b.w	b3c6 <_svfprintf_r+0x3e6>
    c1e8:	str	r7, [sp, #36]	; 0x24
    c1ea:	mov	r7, r3
    c1ec:	b.w	b688 <_svfprintf_r+0x6a8>
    c1f0:	ldr	r3, [sp, #84]	; 0x54
    c1f2:	adds	r2, r3, #3
    c1f4:	blt.n	c1fc <_svfprintf_r+0x121c>
    c1f6:	cmp	r8, r3
    c1f8:	bge.w	bfc4 <_svfprintf_r+0xfe4>
    c1fc:	ldr	r2, [sp, #48]	; 0x30
    c1fe:	subs	r2, #2
    c200:	str	r2, [sp, #48]	; 0x30
    c202:	subs	r3, #1
    c204:	cmp	r3, #0
    c206:	ldrb.w	r2, [sp, #48]	; 0x30
    c20a:	str	r3, [sp, #84]	; 0x54
    c20c:	it	lt
    c20e:	neglt	r3, r3
    c210:	strb.w	r2, [sp, #92]	; 0x5c
    c214:	ite	lt
    c216:	movlt	r2, #45	; 0x2d
    c218:	movge	r2, #43	; 0x2b
    c21a:	cmp	r3, #9
    c21c:	strb.w	r2, [sp, #93]	; 0x5d
    c220:	ble.w	c430 <_svfprintf_r+0x1450>
    c224:	add.w	r0, sp, #107	; 0x6b
    c228:	mov	r4, r0
    c22a:	ldr	r2, [pc, #284]	; (c348 <_svfprintf_r+0x1368>)
    c22c:	smull	r2, r1, r2, r3
    c230:	asrs	r2, r3, #31
    c232:	rsb	r2, r2, r1, asr #2
    c236:	add.w	r1, r2, r2, lsl #2
    c23a:	sub.w	r3, r3, r1, lsl #1
    c23e:	add.w	r1, r3, #48	; 0x30
    c242:	cmp	r2, #9
    c244:	mov	r3, r2
    c246:	strb.w	r1, [r4, #-1]!
    c24a:	bgt.n	c22a <_svfprintf_r+0x124a>
    c24c:	mov	r1, r4
    c24e:	adds	r3, #48	; 0x30
    c250:	uxtb	r2, r3
    c252:	strb.w	r2, [r1, #-1]!
    c256:	cmp	r0, r1
    c258:	bls.w	c520 <_svfprintf_r+0x1540>
    c25c:	add.w	r1, sp, #94	; 0x5e
    c260:	mov	r3, r4
    c262:	b.n	c268 <_svfprintf_r+0x1288>
    c264:	ldrb.w	r2, [r3], #1
    c268:	strb.w	r2, [r1], #1
    c26c:	cmp	r0, r3
    c26e:	bne.n	c264 <_svfprintf_r+0x1284>
    c270:	adds	r3, r0, #1
    c272:	subs	r3, r3, r4
    c274:	add.w	r2, sp, #94	; 0x5e
    c278:	add	r3, r2
    c27a:	add	r2, sp, #92	; 0x5c
    c27c:	subs	r3, r3, r2
    c27e:	ldr	r2, [sp, #52]	; 0x34
    c280:	str	r3, [sp, #68]	; 0x44
    c282:	cmp	r2, #1
    c284:	add	r3, r2
    c286:	str	r3, [sp, #32]
    c288:	ble.w	c48a <_svfprintf_r+0x14aa>
    c28c:	ldr	r3, [sp, #32]
    c28e:	ldr	r2, [sp, #60]	; 0x3c
    c290:	add	r3, r2
    c292:	movs	r2, #0
    c294:	str	r3, [sp, #32]
    c296:	str	r2, [sp, #56]	; 0x38
    c298:	bic.w	r3, r3, r3, asr #31
    c29c:	b.n	bfe2 <_svfprintf_r+0x1002>
    c29e:	mov	r3, r1
    c2a0:	b.n	bfa8 <_svfprintf_r+0xfc8>
    c2a2:	add	r2, sp, #108	; 0x6c
    c2a4:	ldr	r1, [sp, #12]
    c2a6:	ldr	r0, [sp, #20]
    c2a8:	bl	fc08 <__ssprint_r>
    c2ac:	cmp	r0, #0
    c2ae:	bne.w	b1cc <_svfprintf_r+0x1ec>
    c2b2:	ldr	r3, [sp, #116]	; 0x74
    c2b4:	add.w	r9, sp, #160	; 0xa0
    c2b8:	b.n	bbc2 <_svfprintf_r+0xbe2>
    c2ba:	add	r2, sp, #108	; 0x6c
    c2bc:	ldr	r1, [sp, #12]
    c2be:	ldr	r0, [sp, #20]
    c2c0:	bl	fc08 <__ssprint_r>
    c2c4:	cmp	r0, #0
    c2c6:	bne.w	b1cc <_svfprintf_r+0x1ec>
    c2ca:	ldr	r2, [sp, #84]	; 0x54
    c2cc:	ldr	r3, [sp, #116]	; 0x74
    c2ce:	add.w	r9, sp, #160	; 0xa0
    c2d2:	b.n	bdc8 <_svfprintf_r+0xde8>
    c2d4:	mov	r6, r9
    c2d6:	mov	r9, r1
    c2d8:	adds	r2, #1
    c2da:	add	r3, r4
    c2dc:	cmp	r2, #7
    c2de:	str	r3, [sp, #116]	; 0x74
    c2e0:	str	r2, [sp, #112]	; 0x70
    c2e2:	str.w	r7, [r9]
    c2e6:	str.w	r4, [r9, #4]
    c2ea:	bgt.w	c1a2 <_svfprintf_r+0x11c2>
    c2ee:	add.w	r9, r9, #8
    c2f2:	b.n	c1ba <_svfprintf_r+0x11da>
    c2f4:	add	r2, sp, #108	; 0x6c
    c2f6:	ldr	r1, [sp, #12]
    c2f8:	ldr	r0, [sp, #20]
    c2fa:	bl	fc08 <__ssprint_r>
    c2fe:	cmp	r0, #0
    c300:	bne.w	b1cc <_svfprintf_r+0x1ec>
    c304:	ldr	r2, [sp, #84]	; 0x54
    c306:	ldr	r1, [sp, #52]	; 0x34
    c308:	ldr	r3, [sp, #116]	; 0x74
    c30a:	subs	r2, r1, r2
    c30c:	add.w	r9, sp, #160	; 0xa0
    c310:	b.n	bdf8 <_svfprintf_r+0xe18>
    c312:	cmp	r5, #6
    c314:	mov	r3, r5
    c316:	it	cs
    c318:	movcs	r3, #6
    c31a:	str	r3, [sp, #32]
    c31c:	bic.w	r3, r3, r3, asr #31
    c320:	mov	r8, r6
    c322:	str	r7, [sp, #36]	; 0x24
    c324:	str	r6, [sp, #56]	; 0x38
    c326:	mov	r7, r6
    c328:	str	r3, [sp, #16]
    c32a:	ldr	r6, [pc, #32]	; (c34c <_svfprintf_r+0x136c>)
    c32c:	b.w	b3c4 <_svfprintf_r+0x3e4>
    c330:	mov	fp, r3
    c332:	b.w	b70a <_svfprintf_r+0x72a>
    c336:	movs	r7, #45	; 0x2d
    c338:	strb.w	r7, [sp, #79]	; 0x4f
    c33c:	b.w	b3a6 <_svfprintf_r+0x3c6>
    c340:	.word	0x200016e0
    c344:	.word	0x20001780
    c348:	.word	0x66666667
    c34c:	.word	0x200016d8
    c350:	add	r2, sp, #100	; 0x64
    c352:	add	r3, sp, #88	; 0x58
    c354:	str	r2, [sp, #4]
    c356:	str	r3, [sp, #0]
    c358:	movs	r1, #3
    c35a:	add	r3, sp, #84	; 0x54
    c35c:	mov	r2, r8
    c35e:	vmov.f64	d0, d10
    c362:	ldr	r0, [sp, #20]
    c364:	bl	d648 <_dtoa_r>
    c368:	mov	r4, r8
    c36a:	mov	r6, r0
    c36c:	add.w	r1, r0, r8
    c370:	b.n	c152 <_svfprintf_r+0x1172>
    c372:	mov.w	r8, #6
    c376:	b.n	bf2e <_svfprintf_r+0xf4e>
    c378:	vneg.f64	d10, d8
    c37c:	movs	r7, #45	; 0x2d
    c37e:	b.n	bf44 <_svfprintf_r+0xf64>
    c380:	ldr	r2, [sp, #60]	; 0x3c
    c382:	ldr	r3, [sp, #52]	; 0x34
    c384:	add	r3, r2
    c386:	ldr	r2, [sp, #56]	; 0x38
    c388:	str	r3, [sp, #32]
    c38a:	cmp	r2, #0
    c38c:	ble.w	c49c <_svfprintf_r+0x14bc>
    c390:	movs	r2, #103	; 0x67
    c392:	bic.w	r3, r3, r3, asr #31
    c396:	str	r2, [sp, #48]	; 0x30
    c398:	b.n	bfe2 <_svfprintf_r+0x1002>
    c39a:	ldr	r3, [sp, #48]	; 0x30
    c39c:	cmp	r3, #71	; 0x47
    c39e:	bne.w	bf86 <_svfprintf_r+0xfa6>
    c3a2:	tst.w	fp, #1
    c3a6:	bne.w	c146 <_svfprintf_r+0x1166>
    c3aa:	ldr	r3, [sp, #100]	; 0x64
    c3ac:	cmp	r5, #71	; 0x47
    c3ae:	sub.w	r3, r3, r6
    c3b2:	str	r3, [sp, #52]	; 0x34
    c3b4:	beq.w	c1f0 <_svfprintf_r+0x1210>
    c3b8:	ldr	r3, [sp, #84]	; 0x54
    c3ba:	b.n	c202 <_svfprintf_r+0x1222>
    c3bc:	cmp	r3, #0
    c3be:	mov	r2, r3
    c3c0:	str	r3, [sp, #56]	; 0x38
    c3c2:	ble.n	c4ac <_svfprintf_r+0x14cc>
    c3c4:	cmp.w	r8, #0
    c3c8:	bne.n	c462 <_svfprintf_r+0x1482>
    c3ca:	tst.w	fp, #1
    c3ce:	bne.n	c462 <_svfprintf_r+0x1482>
    c3d0:	bic.w	r3, r3, r3, asr #31
    c3d4:	str	r2, [sp, #32]
    c3d6:	b.n	bfe2 <_svfprintf_r+0x1002>
    c3d8:	tst.w	fp, #1
    c3dc:	mov	r7, r8
    c3de:	beq.n	c3ec <_svfprintf_r+0x140c>
    c3e0:	add	r6, sp, #224	; 0xe0
    c3e2:	movs	r3, #48	; 0x30
    c3e4:	strb.w	r3, [r6, #-65]!
    c3e8:	b.w	b698 <_svfprintf_r+0x6b8>
    c3ec:	str.w	r8, [sp, #32]
    c3f0:	add	r6, sp, #160	; 0xa0
    c3f2:	b.w	b69e <_svfprintf_r+0x6be>
    c3f6:	bic.w	r3, r5, r5, asr #31
    c3fa:	str	r7, [sp, #36]	; 0x24
    c3fc:	str	r3, [sp, #16]
    c3fe:	str	r5, [sp, #32]
    c400:	mov	r8, r0
    c402:	str	r0, [sp, #56]	; 0x38
    c404:	ldrb.w	r7, [sp, #79]	; 0x4f
    c408:	b.w	b3c4 <_svfprintf_r+0x3e4>
    c40c:	add	r2, sp, #108	; 0x6c
    c40e:	ldr	r1, [sp, #12]
    c410:	ldr	r0, [sp, #20]
    c412:	bl	fc08 <__ssprint_r>
    c416:	cmp	r0, #0
    c418:	bne.w	b1cc <_svfprintf_r+0x1ec>
    c41c:	ldr	r4, [sp, #84]	; 0x54
    c41e:	ldr	r3, [sp, #116]	; 0x74
    c420:	ldr	r2, [sp, #112]	; 0x70
    c422:	add.w	r9, sp, #160	; 0xa0
    c426:	b.n	c0a4 <_svfprintf_r+0x10c4>
    c428:	mov	sl, r4
    c42a:	movs	r5, #0
    c42c:	b.w	b096 <_svfprintf_r+0xb6>
    c430:	adds	r3, #48	; 0x30
    c432:	movs	r2, #48	; 0x30
    c434:	strb.w	r3, [sp, #95]	; 0x5f
    c438:	strb.w	r2, [sp, #94]	; 0x5e
    c43c:	add	r3, sp, #96	; 0x60
    c43e:	b.n	c27a <_svfprintf_r+0x129a>
    c440:	ldr	r2, [sp, #60]	; 0x3c
    c442:	ldr	r3, [sp, #56]	; 0x38
    c444:	add	r3, r2
    c446:	movs	r2, #103	; 0x67
    c448:	str	r3, [sp, #32]
    c44a:	str	r2, [sp, #48]	; 0x30
    c44c:	bic.w	r3, r3, r3, asr #31
    c450:	b.n	bfe2 <_svfprintf_r+0x1002>
    c452:	ldr	r3, [sp, #100]	; 0x64
    c454:	b.n	bfa8 <_svfprintf_r+0xfc8>
    c456:	ldr	r6, [pc, #240]	; (c548 <_svfprintf_r+0x1568>)
    c458:	ldr	r3, [pc, #240]	; (c54c <_svfprintf_r+0x156c>)
    c45a:	ldrb.w	r7, [sp, #79]	; 0x4f
    c45e:	b.w	b3aa <_svfprintf_r+0x3ca>
    c462:	ldr	r3, [sp, #56]	; 0x38
    c464:	ldr	r2, [sp, #60]	; 0x3c
    c466:	adds	r5, r3, r2
    c468:	add.w	r3, r5, r8
    c46c:	str	r3, [sp, #32]
    c46e:	bic.w	r3, r3, r3, asr #31
    c472:	b.n	bfe2 <_svfprintf_r+0x1002>
    c474:	vcmp.f64	d10, #0.0
    c478:	vmrs	APSR_nzcv, fpscr
    c47c:	beq.w	c15a <_svfprintf_r+0x117a>
    c480:	rsb	r4, r4, #1
    c484:	str	r4, [sp, #84]	; 0x54
    c486:	add	r1, r4
    c488:	b.n	bf88 <_svfprintf_r+0xfa8>
    c48a:	ands.w	r3, fp, #1
    c48e:	bne.w	c28c <_svfprintf_r+0x12ac>
    c492:	str	r3, [sp, #56]	; 0x38
    c494:	ldr	r3, [sp, #32]
    c496:	bic.w	r3, r3, r3, asr #31
    c49a:	b.n	bfe2 <_svfprintf_r+0x1002>
    c49c:	ldr	r3, [sp, #56]	; 0x38
    c49e:	ldr	r2, [sp, #32]
    c4a0:	rsb	r3, r3, #1
    c4a4:	add	r2, r3
    c4a6:	mov	r3, r2
    c4a8:	str	r2, [sp, #32]
    c4aa:	b.n	c390 <_svfprintf_r+0x13b0>
    c4ac:	cmp.w	r8, #0
    c4b0:	bne.n	c4b8 <_svfprintf_r+0x14d8>
    c4b2:	tst.w	fp, #1
    c4b6:	beq.n	c4c8 <_svfprintf_r+0x14e8>
    c4b8:	ldr	r3, [sp, #60]	; 0x3c
    c4ba:	adds	r5, r3, #1
    c4bc:	add.w	r3, r5, r8
    c4c0:	str	r3, [sp, #32]
    c4c2:	bic.w	r3, r3, r3, asr #31
    c4c6:	b.n	bfe2 <_svfprintf_r+0x1002>
    c4c8:	movs	r3, #1
    c4ca:	str	r3, [sp, #32]
    c4cc:	b.n	bfe2 <_svfprintf_r+0x1002>
    c4ce:	ldr	r0, [sp, #36]	; 0x24
    c4d0:	ldrb.w	r3, [sl, #1]
    c4d4:	ldr	r5, [r0, #0]
    c4d6:	adds	r0, #4
    c4d8:	cmp	r5, #0
    c4da:	str	r0, [sp, #36]	; 0x24
    c4dc:	mov	sl, r4
    c4de:	bge.w	b092 <_svfprintf_r+0xb2>
    c4e2:	mov.w	r5, #4294967295
    c4e6:	b.w	b092 <_svfprintf_r+0xb2>
    c4ea:	strb.w	r1, [sp, #79]	; 0x4f
    c4ee:	b.w	b80c <_svfprintf_r+0x82c>
    c4f2:	strb.w	r1, [sp, #79]	; 0x4f
    c4f6:	b.w	b898 <_svfprintf_r+0x8b8>
    c4fa:	ldr	r2, [sp, #20]
    c4fc:	movs	r3, #12
    c4fe:	str	r3, [r2, #0]
    c500:	mov.w	r0, #4294967295
    c504:	b.w	b1de <_svfprintf_r+0x1fe>
    c508:	strb.w	r1, [sp, #79]	; 0x4f
    c50c:	b.w	b6b8 <_svfprintf_r+0x6d8>
    c510:	strb.w	r1, [sp, #79]	; 0x4f
    c514:	b.w	b65e <_svfprintf_r+0x67e>
    c518:	strb.w	r1, [sp, #79]	; 0x4f
    c51c:	b.w	b7c4 <_svfprintf_r+0x7e4>
    c520:	add.w	r3, sp, #94	; 0x5e
    c524:	b.n	c27a <_svfprintf_r+0x129a>
    c526:	strb.w	r1, [sp, #79]	; 0x4f
    c52a:	b.w	b1f2 <_svfprintf_r+0x212>
    c52e:	strb.w	r1, [sp, #79]	; 0x4f
    c532:	b.w	b5fa <_svfprintf_r+0x61a>
    c536:	strb.w	r1, [sp, #79]	; 0x4f
    c53a:	b.w	b36a <_svfprintf_r+0x38a>
    c53e:	strb.w	r1, [sp, #79]	; 0x4f
    c542:	b.w	b2e6 <_svfprintf_r+0x306>
    c546:	nop
    c548:	.word	0x20001680
    c54c:	.word	0x200016ac

0000c550 <__ssvfscanf_r>:
    c550:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c554:	mov	fp, r1
    c556:	ldrsh.w	r1, [r1, #12]
    c55a:	sub.w	sp, sp, #684	; 0x2ac
    c55e:	mov	sl, r0
    c560:	lsls	r0, r1, #18
    c562:	mov	r4, r2
    c564:	str	r3, [sp, #16]
    c566:	bmi.n	c57c <__ssvfscanf_r+0x2c>
    c568:	ldr.w	r3, [fp, #100]	; 0x64
    c56c:	orr.w	r1, r1, #8192	; 0x2000
    c570:	bic.w	r3, r3, #8192	; 0x2000
    c574:	strh.w	r1, [fp, #12]
    c578:	str.w	r3, [fp, #100]	; 0x64
    c57c:	mov	r6, r4
    c57e:	movs	r3, #0
    c580:	str	r3, [sp, #24]
    c582:	str	r3, [sp, #12]
    c584:	mov	r7, r3
    c586:	str	r3, [sp, #20]
    c588:	ldrb.w	r3, [r6], #1
    c58c:	str	r3, [sp, #60]	; 0x3c
    c58e:	cbz	r3, c5ec <__ssvfscanf_r+0x9c>
    c590:	bl	9064 <__locale_ctype_ptr>
    c594:	ldr	r2, [sp, #60]	; 0x3c
    c596:	add	r0, r2
    c598:	ldrb	r3, [r0, #1]
    c59a:	and.w	r3, r3, #8
    c59e:	and.w	r5, r3, #255	; 0xff
    c5a2:	cbz	r3, c5f6 <__ssvfscanf_r+0xa6>
    c5a4:	ldr.w	r3, [fp, #4]
    c5a8:	b.n	c5ce <__ssvfscanf_r+0x7e>
    c5aa:	bl	9064 <__locale_ctype_ptr>
    c5ae:	ldr.w	r3, [fp]
    c5b2:	ldrb	r2, [r3, #0]
    c5b4:	add	r0, r2
    c5b6:	adds	r3, #1
    c5b8:	ldrb	r2, [r0, #1]
    c5ba:	lsls	r1, r2, #28
    c5bc:	bpl.n	c5de <__ssvfscanf_r+0x8e>
    c5be:	ldr.w	r2, [fp, #4]
    c5c2:	str.w	r3, [fp]
    c5c6:	subs	r3, r2, #1
    c5c8:	adds	r7, #1
    c5ca:	str.w	r3, [fp, #4]
    c5ce:	cmp	r3, #0
    c5d0:	bgt.n	c5aa <__ssvfscanf_r+0x5a>
    c5d2:	mov	r1, fp
    c5d4:	mov	r0, sl
    c5d6:	bl	fd8c <__ssrefill_r>
    c5da:	cmp	r0, #0
    c5dc:	beq.n	c5aa <__ssvfscanf_r+0x5a>
    c5de:	mov	r4, r6
    c5e0:	mov	r6, r4
    c5e2:	ldrb.w	r3, [r6], #1
    c5e6:	str	r3, [sp, #60]	; 0x3c
    c5e8:	cmp	r3, #0
    c5ea:	bne.n	c590 <__ssvfscanf_r+0x40>
    c5ec:	ldr	r0, [sp, #20]
    c5ee:	add.w	sp, sp, #684	; 0x2ac
    c5f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c5f6:	cmp	r2, #37	; 0x25
    c5f8:	bne.w	c704 <__ssvfscanf_r+0x1b4>
    c5fc:	ldrb.w	r8, [r4, #1]
    c600:	mov	r4, r5
    c602:	adds	r3, r6, #1
    c604:	cmp.w	r8, #120	; 0x78
    c608:	bhi.w	ca92 <__ssvfscanf_r+0x542>
    c60c:	tbh	[pc, r8, lsl #1]
    c610:	.word	0x02410092
    c614:	.word	0x02410241
    c618:	.word	0x02410241
    c61c:	.word	0x02410241
    c620:	.word	0x02410241
    c624:	.word	0x02410241
    c628:	.word	0x02410241
    c62c:	.word	0x02410241
    c630:	.word	0x02410241
    c634:	.word	0x02410241
    c638:	.word	0x02410241
    c63c:	.word	0x02410241
    c640:	.word	0x02410241
    c644:	.word	0x02410241
    c648:	.word	0x02410241
    c64c:	.word	0x02410241
    c650:	.word	0x02410241
    c654:	.word	0x02410241
    c658:	.word	0x00790241
    c65c:	.word	0x02410241
    c660:	.word	0x02410241
    c664:	.word	0x024101d8
    c668:	.word	0x02410241
    c66c:	.word	0x02410241
    c670:	.word	0x01cf01cf
    c674:	.word	0x01cf01cf
    c678:	.word	0x01cf01cf
    c67c:	.word	0x01cf01cf
    c680:	.word	0x01cf01cf
    c684:	.word	0x02410241
    c688:	.word	0x02410241
    c68c:	.word	0x02410241
    c690:	.word	0x02410241
    c694:	.word	0x02410241
    c698:	.word	0x01b901c1
    c69c:	.word	0x01b90241
    c6a0:	.word	0x02410241
    c6a4:	.word	0x02410241
    c6a8:	.word	0x024101b3
    c6ac:	.word	0x01a30241
    c6b0:	.word	0x02410241
    c6b4:	.word	0x02410241
    c6b8:	.word	0x02410241
    c6bc:	.word	0x02410241
    c6c0:	.word	0x02410193
    c6c4:	.word	0x01510241
    c6c8:	.word	0x02410241
    c6cc:	.word	0x02410241
    c6d0:	.word	0x02410241
    c6d4:	.word	0x01220241
    c6d8:	.word	0x01b90188
    c6dc:	.word	0x01b901b9
    c6e0:	.word	0x0098011c
    c6e4:	.word	0x02410241
    c6e8:	.word	0x024100d5
    c6ec:	.word	0x0101010d
    c6f0:	.word	0x024100f3
    c6f4:	.word	0x00eb0241
    c6f8:	.word	0x00df0241
    c6fc:	.word	0x02410241
    c700:	.short	0x0193
    c702:	mov	r6, r3
    c704:	ldr.w	r3, [fp, #4]
    c708:	cmp	r3, #0
    c70a:	ble.w	cbb4 <__ssvfscanf_r+0x664>
    c70e:	ldr.w	r3, [fp]
    c712:	ldrb.w	r2, [r6, #-1]
    c716:	ldrb	r1, [r3, #0]
    c718:	cmp	r1, r2
    c71a:	bne.w	c5ec <__ssvfscanf_r+0x9c>
    c71e:	ldr.w	r2, [fp, #4]
    c722:	adds	r3, #1
    c724:	subs	r2, #1
    c726:	str.w	r3, [fp]
    c72a:	adds	r7, #1
    c72c:	str.w	r2, [fp, #4]
    c730:	mov	r4, r6
    c732:	b.n	c5e0 <__ssvfscanf_r+0x90>
    c734:	mov.w	r0, #4294967295
    c738:	add.w	sp, sp, #684	; 0x2ac
    c73c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c740:	str	r3, [sp, #8]
    c742:	ldr.w	r3, [fp, #4]
    c746:	cmp	r3, #0
    c748:	ble.w	cc12 <__ssvfscanf_r+0x6c2>
    c74c:	ldr	r3, [pc, #736]	; (ca30 <__ssvfscanf_r+0x4e0>)
    c74e:	str	r3, [sp, #24]
    c750:	movs	r3, #0
    c752:	str	r3, [sp, #12]
    c754:	movs	r6, #3
    c756:	b.n	c75c <__ssvfscanf_r+0x20c>
    c758:	str.w	lr, [fp]
    c75c:	bl	9064 <__locale_ctype_ptr>
    c760:	ldr.w	r2, [fp]
    c764:	ldrb	r1, [r2, #0]
    c766:	add	r0, r1
    c768:	add.w	lr, r2, #1
    c76c:	ldrb	r3, [r0, #1]
    c76e:	and.w	r3, r3, #8
    c772:	and.w	r8, r3, #255	; 0xff
    c776:	cmp	r3, #0
    c778:	beq.w	cc7a <__ssvfscanf_r+0x72a>
    c77c:	ldr.w	r3, [fp, #4]
    c780:	subs	r3, #1
    c782:	cmp	r3, #0
    c784:	add.w	r7, r7, #1
    c788:	str.w	r3, [fp, #4]
    c78c:	bgt.n	c758 <__ssvfscanf_r+0x208>
    c78e:	mov	r1, fp
    c790:	mov	r0, sl
    c792:	bl	fd8c <__ssrefill_r>
    c796:	cmp	r0, #0
    c798:	beq.n	c75c <__ssvfscanf_r+0x20c>
    c79a:	ldr	r2, [sp, #20]
    c79c:	cmp	r2, #0
    c79e:	beq.n	c734 <__ssvfscanf_r+0x1e4>
    c7a0:	ldrh.w	r3, [fp, #12]
    c7a4:	tst.w	r3, #64	; 0x40
    c7a8:	mov	r3, r2
    c7aa:	it	ne
    c7ac:	movne.w	r3, #4294967295
    c7b0:	mov	r0, r3
    c7b2:	add.w	sp, sp, #684	; 0x2ac
    c7b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c7ba:	ldrb.w	r8, [r6, #1]
    c7be:	cmp.w	r8, #108	; 0x6c
    c7c2:	beq.w	cbca <__ssvfscanf_r+0x67a>
    c7c6:	orr.w	r5, r5, #1
    c7ca:	mov	r6, r3
    c7cc:	b.n	c602 <__ssvfscanf_r+0xb2>
    c7ce:	str	r3, [sp, #8]
    c7d0:	ldr.w	r3, [fp, #4]
    c7d4:	cmp	r3, #0
    c7d6:	ble.w	cc6a <__ssvfscanf_r+0x71a>
    c7da:	ldr	r3, [pc, #600]	; (ca34 <__ssvfscanf_r+0x4e4>)
    c7dc:	str	r3, [sp, #24]
    c7de:	movs	r3, #10
    c7e0:	str	r3, [sp, #12]
    c7e2:	movs	r6, #3
    c7e4:	b.n	c75c <__ssvfscanf_r+0x20c>
    c7e6:	str	r3, [sp, #8]
    c7e8:	ldr.w	r3, [fp, #4]
    c7ec:	cmp	r3, #0
    c7ee:	ble.w	cc5a <__ssvfscanf_r+0x70a>
    c7f2:	movs	r6, #2
    c7f4:	b.n	c75c <__ssvfscanf_r+0x20c>
    c7f6:	str	r3, [sp, #8]
    c7f8:	ldr.w	r3, [fp, #4]
    c7fc:	cmp	r3, #0
    c7fe:	orr.w	r5, r5, #544	; 0x220
    c802:	ble.w	c946 <__ssvfscanf_r+0x3f6>
    c806:	ldr	r3, [pc, #556]	; (ca34 <__ssvfscanf_r+0x4e4>)
    c808:	str	r3, [sp, #24]
    c80a:	movs	r3, #16
    c80c:	str	r3, [sp, #12]
    c80e:	movs	r6, #3
    c810:	b.n	c75c <__ssvfscanf_r+0x20c>
    c812:	str	r3, [sp, #8]
    c814:	ldr.w	r3, [fp, #4]
    c818:	cmp	r3, #0
    c81a:	ble.w	c966 <__ssvfscanf_r+0x416>
    c81e:	ldr	r3, [pc, #532]	; (ca34 <__ssvfscanf_r+0x4e4>)
    c820:	str	r3, [sp, #24]
    c822:	movs	r3, #8
    c824:	str	r3, [sp, #12]
    c826:	movs	r6, #3
    c828:	b.n	c75c <__ssvfscanf_r+0x20c>
    c82a:	lsls	r2, r5, #27
    c82c:	mov	r6, r3
    c82e:	str	r3, [sp, #8]
    c830:	bmi.w	ca18 <__ssvfscanf_r+0x4c8>
    c834:	lsls	r3, r5, #29
    c836:	bpl.w	cbe2 <__ssvfscanf_r+0x692>
    c83a:	ldr	r1, [sp, #16]
    c83c:	ldr	r3, [r1, #0]
    c83e:	strh	r7, [r3, #0]
    c840:	adds	r3, r1, #4
    c842:	str	r3, [sp, #16]
    c844:	mov	r4, r6
    c846:	b.n	c5e0 <__ssvfscanf_r+0x90>
    c848:	ldrb.w	r8, [r6, #1]
    c84c:	orr.w	r5, r5, #4
    c850:	mov	r6, r3
    c852:	b.n	c602 <__ssvfscanf_r+0xb2>
    c854:	str	r3, [sp, #8]
    c856:	ldr.w	r3, [fp, #4]
    c85a:	cmp	r3, #0
    c85c:	ble.w	cc3a <__ssvfscanf_r+0x6ea>
    c860:	cmp	r4, #0
    c862:	it	eq
    c864:	moveq	r4, #1
    c866:	ands.w	r3, r5, #1
    c86a:	bne.w	cab2 <__ssvfscanf_r+0x562>
    c86e:	lsls	r2, r5, #27
    c870:	bpl.w	cb8a <__ssvfscanf_r+0x63a>
    c874:	mov	r5, r3
    c876:	b.n	c88c <__ssvfscanf_r+0x33c>
    c878:	add	r3, r2
    c87a:	str.w	r3, [fp]
    c87e:	add	r5, r2
    c880:	subs	r4, r4, r2
    c882:	bl	fd8c <__ssrefill_r>
    c886:	cmp	r0, #0
    c888:	bne.w	cb82 <__ssvfscanf_r+0x632>
    c88c:	ldr.w	r2, [fp, #4]
    c890:	ldr.w	r3, [fp]
    c894:	cmp	r2, r4
    c896:	mov	r1, fp
    c898:	mov	r0, sl
    c89a:	blt.n	c878 <__ssvfscanf_r+0x328>
    c89c:	subs	r2, r2, r4
    c89e:	add	r3, r4
    c8a0:	str.w	r2, [fp, #4]
    c8a4:	add	r5, r4
    c8a6:	str.w	r3, [fp]
    c8aa:	ldr	r6, [sp, #8]
    c8ac:	add	r7, r5
    c8ae:	mov	r4, r6
    c8b0:	b.n	c5e0 <__ssvfscanf_r+0x90>
    c8b2:	add.w	r9, sp, #72	; 0x48
    c8b6:	mov	r1, r3
    c8b8:	mov	r0, r9
    c8ba:	bl	f61c <__sccl>
    c8be:	ldr.w	r3, [fp, #4]
    c8c2:	cmp	r3, #0
    c8c4:	mov	r6, r0
    c8c6:	ble.w	cc2a <__ssvfscanf_r+0x6da>
    c8ca:	cmp	r4, #0
    c8cc:	ldr.w	r2, [fp]
    c8d0:	it	eq
    c8d2:	moveq.w	r4, #4294967295
    c8d6:	lsls	r3, r5, #27
    c8d8:	ldrb	r1, [r2, #0]
    c8da:	bpl.w	ca1e <__ssvfscanf_r+0x4ce>
    c8de:	mov	r8, r4
    c8e0:	movs	r5, #0
    c8e2:	b.n	c8e6 <__ssvfscanf_r+0x396>
    c8e4:	ldrb	r1, [r2, #0]
    c8e6:	ldrb.w	r3, [r9, r1]
    c8ea:	adds	r2, #1
    c8ec:	cmp	r3, #0
    c8ee:	beq.w	cb78 <__ssvfscanf_r+0x628>
    c8f2:	ldr.w	r3, [fp, #4]
    c8f6:	str.w	r2, [fp]
    c8fa:	adds	r5, #1
    c8fc:	subs	r3, #1
    c8fe:	cmp	r5, r4
    c900:	str.w	r3, [fp, #4]
    c904:	beq.w	cb72 <__ssvfscanf_r+0x622>
    c908:	cmp	r3, #0
    c90a:	bgt.n	c8e4 <__ssvfscanf_r+0x394>
    c90c:	mov	r1, fp
    c90e:	mov	r0, sl
    c910:	bl	fd8c <__ssrefill_r>
    c914:	cmp	r0, #0
    c916:	bne.w	cb70 <__ssvfscanf_r+0x620>
    c91a:	ldr.w	r2, [fp]
    c91e:	b.n	c8e4 <__ssvfscanf_r+0x394>
    c920:	str	r3, [sp, #8]
    c922:	ldr.w	r3, [fp, #4]
    c926:	cmp	r3, #0
    c928:	ble.n	c9a0 <__ssvfscanf_r+0x450>
    c92a:	ldr	r3, [pc, #260]	; (ca30 <__ssvfscanf_r+0x4e0>)
    c92c:	str	r3, [sp, #24]
    c92e:	movs	r3, #10
    c930:	str	r3, [sp, #12]
    c932:	movs	r6, #3
    c934:	b.n	c75c <__ssvfscanf_r+0x20c>
    c936:	str	r3, [sp, #8]
    c938:	ldr.w	r3, [fp, #4]
    c93c:	cmp	r3, #0
    c93e:	orr.w	r5, r5, #512	; 0x200
    c942:	bgt.w	c806 <__ssvfscanf_r+0x2b6>
    c946:	mov	r1, fp
    c948:	mov	r0, sl
    c94a:	bl	fd8c <__ssrefill_r>
    c94e:	cmp	r0, #0
    c950:	beq.w	c806 <__ssvfscanf_r+0x2b6>
    c954:	b.n	c79a <__ssvfscanf_r+0x24a>
    c956:	str	r3, [sp, #8]
    c958:	ldr.w	r3, [fp, #4]
    c95c:	cmp	r3, #0
    c95e:	orr.w	r5, r5, #1
    c962:	bgt.w	c81e <__ssvfscanf_r+0x2ce>
    c966:	mov	r1, fp
    c968:	mov	r0, sl
    c96a:	bl	fd8c <__ssrefill_r>
    c96e:	cmp	r0, #0
    c970:	beq.w	c81e <__ssvfscanf_r+0x2ce>
    c974:	b.n	c79a <__ssvfscanf_r+0x24a>
    c976:	ldrb.w	r8, [r6, #1]
    c97a:	orr.w	r5, r5, #2
    c97e:	mov	r6, r3
    c980:	b.n	c602 <__ssvfscanf_r+0xb2>
    c982:	str	r3, [sp, #8]
    c984:	ldr.w	r3, [fp, #4]
    c988:	cmp	r3, #0
    c98a:	ble.w	cc4a <__ssvfscanf_r+0x6fa>
    c98e:	movs	r6, #4
    c990:	b.n	c75c <__ssvfscanf_r+0x20c>
    c992:	str	r3, [sp, #8]
    c994:	ldr.w	r3, [fp, #4]
    c998:	cmp	r3, #0
    c99a:	orr.w	r5, r5, #1
    c99e:	bgt.n	c92a <__ssvfscanf_r+0x3da>
    c9a0:	mov	r1, fp
    c9a2:	mov	r0, sl
    c9a4:	bl	fd8c <__ssrefill_r>
    c9a8:	cmp	r0, #0
    c9aa:	beq.n	c92a <__ssvfscanf_r+0x3da>
    c9ac:	b.n	c79a <__ssvfscanf_r+0x24a>
    c9ae:	add.w	r4, r4, r4, lsl #2
    c9b2:	add.w	r4, r8, r4, lsl #1
    c9b6:	subs	r4, #48	; 0x30
    c9b8:	ldrb.w	r8, [r6, #1]
    c9bc:	mov	r6, r3
    c9be:	b.n	c602 <__ssvfscanf_r+0xb2>
    c9c0:	ldrb.w	r8, [r6, #1]
    c9c4:	orr.w	r5, r5, #16
    c9c8:	mov	r6, r3
    c9ca:	b.n	c602 <__ssvfscanf_r+0xb2>
    c9cc:	add	r3, sp, #64	; 0x40
    c9ce:	mov	r1, r8
    c9d0:	mov	r0, r3
    c9d2:	movs	r2, #8
    c9d4:	str	r3, [sp, #28]
    c9d6:	bl	980c <memset>
    c9da:	ands.w	r9, r5, #16
    c9de:	bne.w	d296 <__ssvfscanf_r+0xd46>
    c9e2:	ldr	r2, [sp, #16]
    c9e4:	mov	r3, r2
    c9e6:	adds	r3, #4
    c9e8:	ldr.w	r8, [r2]
    c9ec:	str	r3, [sp, #16]
    c9ee:	movs	r6, #0
    c9f0:	bl	9064 <__locale_ctype_ptr>
    c9f4:	ldr.w	r3, [fp]
    c9f8:	ldrb	r3, [r3, #0]
    c9fa:	add	r0, r3
    c9fc:	ldrb	r3, [r0, #1]
    c9fe:	lsls	r0, r3, #28
    ca00:	bmi.n	ca08 <__ssvfscanf_r+0x4b8>
    ca02:	cmp	r4, #0
    ca04:	bne.w	d1fa <__ssvfscanf_r+0xcaa>
    ca08:	cmp.w	r9, #0
    ca0c:	bne.n	ca18 <__ssvfscanf_r+0x4c8>
    ca0e:	str.w	r9, [r8]
    ca12:	ldr	r3, [sp, #20]
    ca14:	adds	r3, #1
    ca16:	str	r3, [sp, #20]
    ca18:	ldr	r6, [sp, #8]
    ca1a:	mov	r4, r6
    ca1c:	b.n	c5e0 <__ssvfscanf_r+0x90>
    ca1e:	ldr	r0, [sp, #16]
    ca20:	ldr	r5, [r0, #0]
    ca22:	mov	r3, r0
    ca24:	adds	r3, #4
    ca26:	add.w	r8, r5, r4
    ca2a:	str	r3, [sp, #8]
    ca2c:	mov	r4, r5
    ca2e:	b.n	ca3e <__ssvfscanf_r+0x4ee>
    ca30:	.word	0x0000afb9
    ca34:	.word	0x0000f9d5
    ca38:	ldr.w	r2, [fp]
    ca3c:	ldrb	r1, [r2, #0]
    ca3e:	ldrb.w	r3, [r9, r1]
    ca42:	adds	r0, r2, #1
    ca44:	cbz	r3, ca78 <__ssvfscanf_r+0x528>
    ca46:	ldr.w	r3, [fp, #4]
    ca4a:	str.w	r0, [fp]
    ca4e:	subs	r3, #1
    ca50:	str.w	r3, [fp, #4]
    ca54:	ldrb	r3, [r2, #0]
    ca56:	strb.w	r3, [r4], #1
    ca5a:	cmp	r8, r4
    ca5c:	beq.n	ca78 <__ssvfscanf_r+0x528>
    ca5e:	ldr.w	r3, [fp, #4]
    ca62:	cmp	r3, #0
    ca64:	bgt.n	ca38 <__ssvfscanf_r+0x4e8>
    ca66:	mov	r1, fp
    ca68:	mov	r0, sl
    ca6a:	bl	fd8c <__ssrefill_r>
    ca6e:	cmp	r0, #0
    ca70:	beq.n	ca38 <__ssvfscanf_r+0x4e8>
    ca72:	cmp	r5, r4
    ca74:	beq.w	c79a <__ssvfscanf_r+0x24a>
    ca78:	subs	r5, r4, r5
    ca7a:	beq.w	c5ec <__ssvfscanf_r+0x9c>
    ca7e:	ldr	r2, [sp, #20]
    ca80:	adds	r2, #1
    ca82:	movs	r3, #0
    ca84:	str	r2, [sp, #20]
    ca86:	ldr	r2, [sp, #8]
    ca88:	str	r2, [sp, #16]
    ca8a:	strb	r3, [r4, #0]
    ca8c:	add	r7, r5
    ca8e:	mov	r4, r6
    ca90:	b.n	c5e0 <__ssvfscanf_r+0x90>
    ca92:	str	r3, [sp, #8]
    ca94:	bl	9064 <__locale_ctype_ptr>
    ca98:	add	r0, r8
    ca9a:	ldrb	r3, [r0, #1]
    ca9c:	and.w	r3, r3, #3
    caa0:	cmp	r3, #1
    caa2:	ldr.w	r3, [fp, #4]
    caa6:	beq.w	cbd6 <__ssvfscanf_r+0x686>
    caaa:	cmp	r3, #0
    caac:	bgt.w	c92a <__ssvfscanf_r+0x3da>
    cab0:	b.n	c9a0 <__ssvfscanf_r+0x450>
    cab2:	add	r3, sp, #64	; 0x40
    cab4:	mov	r0, r3
    cab6:	movs	r2, #8
    cab8:	movs	r1, #0
    caba:	str	r3, [sp, #28]
    cabc:	bl	980c <memset>
    cac0:	ands.w	r3, r5, #16
    cac4:	str	r3, [sp, #32]
    cac6:	bne.n	cbc4 <__ssvfscanf_r+0x674>
    cac8:	ldr	r2, [sp, #16]
    caca:	mov	r3, r2
    cacc:	adds	r3, #4
    cace:	ldr.w	r9, [r2]
    cad2:	str	r3, [sp, #16]
    cad4:	movs	r5, #0
    cad6:	add.w	r8, sp, #328	; 0x148
    cada:	bl	9040 <__locale_mb_cur_max>
    cade:	cmp	r0, r5
    cae0:	beq.w	c79a <__ssvfscanf_r+0x24a>
    cae4:	ldmia.w	fp, {r2, r3}
    cae8:	ldrb.w	r0, [r2], #1
    caec:	str.w	r2, [fp]
    caf0:	subs	r3, #1
    caf2:	ldr	r2, [sp, #28]
    caf4:	str	r2, [sp, #0]
    caf6:	adds	r6, r5, #1
    caf8:	str.w	r3, [fp, #4]
    cafc:	mov	r1, r9
    cafe:	strb.w	r0, [r8, r5]
    cb02:	mov	r3, r6
    cb04:	mov	r2, r8
    cb06:	mov	r0, sl
    cb08:	bl	ecdc <_mbrtowc_r>
    cb0c:	adds	r1, r0, #1
    cb0e:	beq.w	c79a <__ssvfscanf_r+0x24a>
    cb12:	cbnz	r0, cb3e <__ssvfscanf_r+0x5ee>
    cb14:	ldr	r3, [sp, #32]
    cb16:	cbnz	r3, cb5e <__ssvfscanf_r+0x60e>
    cb18:	str.w	r3, [r9]
    cb1c:	add	r7, r6
    cb1e:	subs	r4, #1
    cb20:	add.w	r9, r9, #4
    cb24:	ldr.w	r3, [fp, #4]
    cb28:	cmp	r3, #0
    cb2a:	mov.w	r5, #0
    cb2e:	ble.n	cb4c <__ssvfscanf_r+0x5fc>
    cb30:	cmp	r4, #0
    cb32:	bne.n	cada <__ssvfscanf_r+0x58a>
    cb34:	ldr	r3, [sp, #32]
    cb36:	cmp	r3, #0
    cb38:	beq.w	ca12 <__ssvfscanf_r+0x4c2>
    cb3c:	b.n	ca18 <__ssvfscanf_r+0x4c8>
    cb3e:	adds	r0, #2
    cb40:	bne.n	cb64 <__ssvfscanf_r+0x614>
    cb42:	ldr.w	r3, [fp, #4]
    cb46:	cmp	r3, #0
    cb48:	mov	r5, r6
    cb4a:	bgt.n	cada <__ssvfscanf_r+0x58a>
    cb4c:	mov	r1, fp
    cb4e:	mov	r0, sl
    cb50:	bl	fd8c <__ssrefill_r>
    cb54:	cmp	r0, #0
    cb56:	beq.n	cb30 <__ssvfscanf_r+0x5e0>
    cb58:	cmp	r5, #0
    cb5a:	beq.n	cb34 <__ssvfscanf_r+0x5e4>
    cb5c:	b.n	c79a <__ssvfscanf_r+0x24a>
    cb5e:	add	r7, r6
    cb60:	subs	r4, #1
    cb62:	b.n	cb24 <__ssvfscanf_r+0x5d4>
    cb64:	ldr	r3, [sp, #32]
    cb66:	add	r7, r6
    cb68:	subs	r4, #1
    cb6a:	cmp	r3, #0
    cb6c:	bne.n	cb24 <__ssvfscanf_r+0x5d4>
    cb6e:	b.n	cb20 <__ssvfscanf_r+0x5d0>
    cb70:	mov	r8, r5
    cb72:	mov	r5, r8
    cb74:	add	r7, r5
    cb76:	b.n	ca8e <__ssvfscanf_r+0x53e>
    cb78:	cmp	r5, #0
    cb7a:	beq.w	c5ec <__ssvfscanf_r+0x9c>
    cb7e:	add	r7, r5
    cb80:	b.n	ca8e <__ssvfscanf_r+0x53e>
    cb82:	cmp	r5, #0
    cb84:	bne.w	c8aa <__ssvfscanf_r+0x35a>
    cb88:	b.n	c79a <__ssvfscanf_r+0x24a>
    cb8a:	ldr	r5, [sp, #16]
    cb8c:	mov	r3, r4
    cb8e:	ldr	r1, [r5, #0]
    cb90:	str.w	fp, [sp]
    cb94:	movs	r2, #1
    cb96:	mov	r0, sl
    cb98:	bl	fdc8 <_sfread_r>
    cb9c:	adds	r6, r5, #4
    cb9e:	cmp	r0, #0
    cba0:	beq.w	c79a <__ssvfscanf_r+0x24a>
    cba4:	ldr	r3, [sp, #20]
    cba6:	str	r6, [sp, #16]
    cba8:	ldr	r6, [sp, #8]
    cbaa:	adds	r3, #1
    cbac:	add	r7, r0
    cbae:	str	r3, [sp, #20]
    cbb0:	mov	r4, r6
    cbb2:	b.n	c5e0 <__ssvfscanf_r+0x90>
    cbb4:	mov	r1, fp
    cbb6:	mov	r0, sl
    cbb8:	bl	fd8c <__ssrefill_r>
    cbbc:	cmp	r0, #0
    cbbe:	beq.w	c70e <__ssvfscanf_r+0x1be>
    cbc2:	b.n	c79a <__ssvfscanf_r+0x24a>
    cbc4:	mov.w	r9, #0
    cbc8:	b.n	cad4 <__ssvfscanf_r+0x584>
    cbca:	ldrb.w	r8, [r6, #2]
    cbce:	orr.w	r5, r5, #2
    cbd2:	adds	r6, #2
    cbd4:	b.n	c602 <__ssvfscanf_r+0xb2>
    cbd6:	cmp	r3, #0
    cbd8:	orr.w	r5, r5, #1
    cbdc:	bgt.w	c92a <__ssvfscanf_r+0x3da>
    cbe0:	b.n	c9a0 <__ssvfscanf_r+0x450>
    cbe2:	lsls	r4, r5, #31
    cbe4:	bmi.n	cc00 <__ssvfscanf_r+0x6b0>
    cbe6:	lsls	r0, r5, #30
    cbe8:	bpl.n	cc00 <__ssvfscanf_r+0x6b0>
    cbea:	ldr	r2, [sp, #16]
    cbec:	ldr	r6, [sp, #8]
    cbee:	ldr	r3, [r2, #0]
    cbf0:	mov	r0, r7
    cbf2:	asrs	r1, r7, #31
    cbf4:	adds	r2, #4
    cbf6:	str	r2, [sp, #16]
    cbf8:	strd	r0, r1, [r3]
    cbfc:	mov	r4, r6
    cbfe:	b.n	c5e0 <__ssvfscanf_r+0x90>
    cc00:	ldr	r2, [sp, #16]
    cc02:	ldr	r6, [sp, #8]
    cc04:	ldr	r3, [r2, #0]
    cc06:	str	r7, [r3, #0]
    cc08:	mov	r3, r2
    cc0a:	adds	r3, #4
    cc0c:	str	r3, [sp, #16]
    cc0e:	mov	r4, r6
    cc10:	b.n	c5e0 <__ssvfscanf_r+0x90>
    cc12:	mov	r1, fp
    cc14:	mov	r0, sl
    cc16:	bl	fd8c <__ssrefill_r>
    cc1a:	cmp	r0, #0
    cc1c:	bne.w	c79a <__ssvfscanf_r+0x24a>
    cc20:	ldr	r3, [pc, #504]	; (ce1c <__ssvfscanf_r+0x8cc>)
    cc22:	str	r0, [sp, #12]
    cc24:	str	r3, [sp, #24]
    cc26:	movs	r6, #3
    cc28:	b.n	c75c <__ssvfscanf_r+0x20c>
    cc2a:	mov	r1, fp
    cc2c:	mov	r0, sl
    cc2e:	bl	fd8c <__ssrefill_r>
    cc32:	cmp	r0, #0
    cc34:	beq.w	c8ca <__ssvfscanf_r+0x37a>
    cc38:	b.n	c79a <__ssvfscanf_r+0x24a>
    cc3a:	mov	r1, fp
    cc3c:	mov	r0, sl
    cc3e:	bl	fd8c <__ssrefill_r>
    cc42:	cmp	r0, #0
    cc44:	beq.w	c860 <__ssvfscanf_r+0x310>
    cc48:	b.n	c79a <__ssvfscanf_r+0x24a>
    cc4a:	mov	r1, fp
    cc4c:	mov	r0, sl
    cc4e:	bl	fd8c <__ssrefill_r>
    cc52:	cmp	r0, #0
    cc54:	beq.w	c98e <__ssvfscanf_r+0x43e>
    cc58:	b.n	c79a <__ssvfscanf_r+0x24a>
    cc5a:	mov	r1, fp
    cc5c:	mov	r0, sl
    cc5e:	bl	fd8c <__ssrefill_r>
    cc62:	cmp	r0, #0
    cc64:	beq.w	c7f2 <__ssvfscanf_r+0x2a2>
    cc68:	b.n	c79a <__ssvfscanf_r+0x24a>
    cc6a:	mov	r1, fp
    cc6c:	mov	r0, sl
    cc6e:	bl	fd8c <__ssrefill_r>
    cc72:	cmp	r0, #0
    cc74:	beq.w	c7da <__ssvfscanf_r+0x28a>
    cc78:	b.n	c79a <__ssvfscanf_r+0x24a>
    cc7a:	cmp	r6, #3
    cc7c:	beq.w	cfb0 <__ssvfscanf_r+0xa60>
    cc80:	cmp	r6, #4
    cc82:	bne.w	d0f2 <__ssvfscanf_r+0xba2>
    cc86:	mov	r0, sl
    cc88:	bl	ecc0 <_localeconv_r>
    cc8c:	subs	r3, r4, #1
    cc8e:	ldr	r2, [r0, #0]
    cc90:	str	r2, [sp, #40]	; 0x28
    cc92:	cmp.w	r3, #348	; 0x15c
    cc96:	bls.w	d15a <__ssvfscanf_r+0xc0a>
    cc9a:	mvn.w	r1, #348	; 0x15c
    cc9e:	adds	r3, r4, r1
    cca0:	str	r3, [sp, #48]	; 0x30
    cca2:	movw	r4, #349	; 0x15d
    cca6:	add	r3, sp, #328	; 0x148
    cca8:	mov.w	r8, #0
    ccac:	mov	r2, r3
    ccae:	str	r3, [sp, #32]
    ccb0:	orr.w	r5, r5, #1920	; 0x780
    ccb4:	mov	r3, r8
    ccb6:	str.w	r8, [sp, #52]	; 0x34
    ccba:	str.w	r8, [sp, #44]	; 0x2c
    ccbe:	mov	r6, r8
    ccc0:	str.w	r8, [sp, #36]	; 0x24
    ccc4:	mov	r9, r2
    ccc6:	ldr.w	r0, [fp]
    ccca:	ldrb	r1, [r0, #0]
    cccc:	sub.w	lr, r1, #43	; 0x2b
    ccd0:	cmp.w	lr, #78	; 0x4e
    ccd4:	bhi.w	cf60 <__ssvfscanf_r+0xa10>
    ccd8:	tbh	[pc, lr, lsl #1]
    ccdc:	.word	0x0142007a
    cce0:	.word	0x0142007a
    cce4:	.word	0x006e0142
    cce8:	.word	0x004f004f
    ccec:	.word	0x004f004f
    ccf0:	.word	0x004f004f
    ccf4:	.word	0x004f004f
    ccf8:	.word	0x0142004f
    ccfc:	.word	0x01420142
    cd00:	.word	0x01420142
    cd04:	.word	0x01420142
    cd08:	.word	0x0142013d
    cd0c:	.word	0x01420142
    cd10:	.word	0x011e0125
    cd14:	.word	0x01420142
    cd18:	.word	0x014200a2
    cd1c:	.word	0x01420142
    cd20:	.word	0x008b0142
    cd24:	.word	0x01420142
    cd28:	.word	0x01420142
    cd2c:	.word	0x00850142
    cd30:	.word	0x01420142
    cd34:	.word	0x01420142
    cd38:	.word	0x0142007f
    cd3c:	.word	0x01420142
    cd40:	.word	0x01420142
    cd44:	.word	0x01420142
    cd48:	.word	0x0142013d
    cd4c:	.word	0x01420142
    cd50:	.word	0x011e0125
    cd54:	.word	0x01420142
    cd58:	.word	0x014200a2
    cd5c:	.word	0x01420142
    cd60:	.word	0x008b0142
    cd64:	.word	0x01420142
    cd68:	.word	0x01420142
    cd6c:	.word	0x00850142
    cd70:	.word	0x01420142
    cd74:	.word	0x01420142
    cd78:	.short	0x007f
    cd7a:	cmn.w	r3, r8
    cd7e:	bne.n	cdae <__ssvfscanf_r+0x85e>
    cd80:	bic.w	r5, r5, #384	; 0x180
    cd84:	strb.w	r1, [r9]
    cd88:	add.w	r9, r9, #1
    cd8c:	ldr.w	r1, [fp, #4]
    cd90:	subs	r1, #1
    cd92:	cmp	r1, #0
    cd94:	add.w	r4, r4, #4294967295
    cd98:	add.w	r7, r7, #1
    cd9c:	str.w	r1, [fp, #4]
    cda0:	ble.w	cf7a <__ssvfscanf_r+0xa2a>
    cda4:	adds	r0, #1
    cda6:	str.w	r0, [fp]
    cdaa:	cmp	r4, #0
    cdac:	bne.n	ccc6 <__ssvfscanf_r+0x776>
    cdae:	cmp	r6, #0
    cdb0:	beq.n	ce38 <__ssvfscanf_r+0x8e8>
    cdb2:	bic.w	r5, r5, #256	; 0x100
    cdb6:	b.n	ce38 <__ssvfscanf_r+0x8e8>
    cdb8:	lsls	r2, r5, #23
    cdba:	bpl.n	cd7a <__ssvfscanf_r+0x82a>
    cdbc:	ldr	r2, [sp, #48]	; 0x30
    cdbe:	bic.w	r5, r5, #128	; 0x80
    cdc2:	adds	r6, #1
    cdc4:	cmp	r2, #0
    cdc6:	beq.n	cd8c <__ssvfscanf_r+0x83c>
    cdc8:	subs	r2, #1
    cdca:	str	r2, [sp, #48]	; 0x30
    cdcc:	adds	r4, #1
    cdce:	b.n	cd8c <__ssvfscanf_r+0x83c>
    cdd0:	lsls	r2, r5, #24
    cdd2:	bpl.n	cdae <__ssvfscanf_r+0x85e>
    cdd4:	bic.w	r5, r5, #128	; 0x80
    cdd8:	b.n	cd84 <__ssvfscanf_r+0x834>
    cdda:	cmp.w	r8, #7
    cdde:	bne.n	cdae <__ssvfscanf_r+0x85e>
    cde0:	mov.w	r8, #8
    cde4:	b.n	cd84 <__ssvfscanf_r+0x834>
    cde6:	cmp.w	r8, #6
    cdea:	bne.n	cdae <__ssvfscanf_r+0x85e>
    cdec:	mov.w	r8, #7
    cdf0:	b.n	cd84 <__ssvfscanf_r+0x834>
    cdf2:	cmp	r3, #0
    cdf4:	bne.w	cfa6 <__ssvfscanf_r+0xa56>
    cdf8:	cbnz	r6, ce06 <__ssvfscanf_r+0x8b6>
    cdfa:	and.w	lr, r5, #1792	; 0x700
    cdfe:	cmp.w	lr, #1792	; 0x700
    ce02:	beq.w	d27e <__ssvfscanf_r+0xd2e>
    ce06:	cmp.w	r8, #1
    ce0a:	beq.n	ce12 <__ssvfscanf_r+0x8c2>
    ce0c:	cmp.w	r8, #4
    ce10:	bne.n	cdae <__ssvfscanf_r+0x85e>
    ce12:	add.w	r8, r8, #1
    ce16:	uxtb.w	r8, r8
    ce1a:	b.n	cd84 <__ssvfscanf_r+0x834>
    ce1c:	.word	0x0000afb9
    ce20:	cmp.w	r8, #0
    ce24:	bne.w	cf94 <__ssvfscanf_r+0xa44>
    ce28:	cmp	r6, #0
    ce2a:	bne.n	cdb2 <__ssvfscanf_r+0x862>
    ce2c:	and.w	lr, r5, #1792	; 0x700
    ce30:	cmp.w	lr, #1792	; 0x700
    ce34:	beq.w	d29e <__ssvfscanf_r+0xd4e>
    ce38:	subs	r3, #1
    ce3a:	cmp	r3, #1
    ce3c:	bls.w	d334 <__ssvfscanf_r+0xde4>
    ce40:	add.w	r3, r8, #4294967295
    ce44:	cmp	r3, #6
    ce46:	bhi.n	ce76 <__ssvfscanf_r+0x926>
    ce48:	cmp.w	r8, #2
    ce4c:	bls.w	d384 <__ssvfscanf_r+0xe34>
    ce50:	cmp.w	r8, #3
    ce54:	beq.n	ce76 <__ssvfscanf_r+0x926>
    ce56:	sub.w	r4, r8, #4
    ce5a:	uxtb	r4, r4
    ce5c:	mvn.w	r8, r4
    ce60:	add	r8, r9
    ce62:	ldrb.w	r1, [r9, #-1]!
    ce66:	mov	r2, fp
    ce68:	mov	r0, sl
    ce6a:	bl	fd08 <_sungetc_r>
    ce6e:	cmp	r8, r9
    ce70:	bne.n	ce62 <__ssvfscanf_r+0x912>
    ce72:	subs	r7, #1
    ce74:	subs	r7, r7, r4
    ce76:	lsls	r1, r5, #23
    ce78:	bpl.n	ceb4 <__ssvfscanf_r+0x964>
    ce7a:	lsls	r2, r5, #21
    ce7c:	bmi.w	d358 <__ssvfscanf_r+0xe08>
    ce80:	ldrb.w	r1, [r9, #-1]
    ce84:	cmp	r1, #101	; 0x65
    ce86:	add.w	r4, r9, #4294967295
    ce8a:	add.w	r8, r7, #4294967295
    ce8e:	beq.n	cea8 <__ssvfscanf_r+0x958>
    ce90:	cmp	r1, #69	; 0x45
    ce92:	beq.n	cea8 <__ssvfscanf_r+0x958>
    ce94:	mov	r2, fp
    ce96:	mov	r0, sl
    ce98:	bl	fd08 <_sungetc_r>
    ce9c:	ldrb.w	r1, [r9, #-2]
    cea0:	sub.w	r8, r7, #2
    cea4:	sub.w	r4, r9, #2
    cea8:	mov	r2, fp
    ceaa:	mov	r0, sl
    ceac:	bl	fd08 <_sungetc_r>
    ceb0:	mov	r7, r8
    ceb2:	mov	r9, r4
    ceb4:	ands.w	r2, r5, #16
    ceb8:	bne.w	ca18 <__ssvfscanf_r+0x4c8>
    cebc:	and.w	r3, r5, #1536	; 0x600
    cec0:	cmp.w	r3, #1024	; 0x400
    cec4:	strb.w	r2, [r9]
    cec8:	beq.w	d2a8 <__ssvfscanf_r+0xd58>
    cecc:	ldr	r3, [sp, #44]	; 0x2c
    cece:	cmp	r3, #0
    ced0:	bne.w	d2ca <__ssvfscanf_r+0xd7a>
    ced4:	ldr	r1, [sp, #32]
    ced6:	movs	r2, #0
    ced8:	mov	r0, sl
    ceda:	bl	ae60 <_strtod_r>
    cede:	lsls	r3, r5, #31
    cee0:	bmi.w	d160 <__ssvfscanf_r+0xc10>
    cee4:	ands.w	r0, r5, #2
    cee8:	bne.w	d160 <__ssvfscanf_r+0xc10>
    ceec:	vcmp.f64	d0, d0
    cef0:	ldr	r3, [sp, #16]
    cef2:	vmrs	APSR_nzcv, fpscr
    cef6:	add.w	r5, r3, #4
    cefa:	ldr	r4, [r3, #0]
    cefc:	bvs.w	d3b8 <__ssvfscanf_r+0xe68>
    cf00:	vcvt.f32.f64	s0, d0
    cf04:	str	r5, [sp, #16]
    cf06:	vstr	s0, [r4]
    cf0a:	ldr	r3, [sp, #20]
    cf0c:	ldr	r6, [sp, #8]
    cf0e:	adds	r3, #1
    cf10:	str	r3, [sp, #20]
    cf12:	mov	r4, r6
    cf14:	b.w	c5e0 <__ssvfscanf_r+0x90>
    cf18:	cmp.w	r8, #2
    cf1c:	bne.w	cdae <__ssvfscanf_r+0x85e>
    cf20:	mov.w	r8, #3
    cf24:	b.n	cd84 <__ssvfscanf_r+0x834>
    cf26:	and.w	lr, r5, #1280	; 0x500
    cf2a:	cmp.w	lr, #1024	; 0x400
    cf2e:	beq.n	cf3c <__ssvfscanf_r+0x9ec>
    cf30:	lsls	r2, r5, #21
    cf32:	bpl.w	cdae <__ssvfscanf_r+0x85e>
    cf36:	cmp	r6, #0
    cf38:	beq.w	ce38 <__ssvfscanf_r+0x8e8>
    cf3c:	lsls	r2, r5, #22
    cf3e:	bmi.n	cf4a <__ssvfscanf_r+0x9fa>
    cf40:	ldr	r2, [sp, #36]	; 0x24
    cf42:	str.w	r9, [sp, #52]	; 0x34
    cf46:	subs	r2, r6, r2
    cf48:	str	r2, [sp, #44]	; 0x2c
    cf4a:	bic.w	r5, r5, #1920	; 0x780
    cf4e:	orr.w	r5, r5, #384	; 0x180
    cf52:	movs	r6, #0
    cf54:	b.n	cd84 <__ssvfscanf_r+0x834>
    cf56:	cmp	r3, #1
    cf58:	bne.w	cdae <__ssvfscanf_r+0x85e>
    cf5c:	movs	r3, #2
    cf5e:	b.n	cd84 <__ssvfscanf_r+0x834>
    cf60:	ldr	r2, [sp, #40]	; 0x28
    cf62:	ldrb.w	lr, [r2]
    cf66:	cmp	lr, r1
    cf68:	bne.w	cdae <__ssvfscanf_r+0x85e>
    cf6c:	lsls	r2, r5, #22
    cf6e:	bpl.w	cdae <__ssvfscanf_r+0x85e>
    cf72:	bic.w	r5, r5, #640	; 0x280
    cf76:	str	r6, [sp, #36]	; 0x24
    cf78:	b.n	cd84 <__ssvfscanf_r+0x834>
    cf7a:	mov	r1, fp
    cf7c:	mov	r0, sl
    cf7e:	str	r3, [sp, #28]
    cf80:	bl	fd8c <__ssrefill_r>
    cf84:	ldr	r3, [sp, #28]
    cf86:	cmp	r0, #0
    cf88:	bne.w	cdae <__ssvfscanf_r+0x85e>
    cf8c:	cmp	r4, #0
    cf8e:	bne.w	ccc6 <__ssvfscanf_r+0x776>
    cf92:	b.n	cdae <__ssvfscanf_r+0x85e>
    cf94:	cmp.w	r8, #3
    cf98:	beq.w	ce12 <__ssvfscanf_r+0x8c2>
    cf9c:	cmp.w	r8, #5
    cfa0:	beq.w	ce12 <__ssvfscanf_r+0x8c2>
    cfa4:	b.n	cdae <__ssvfscanf_r+0x85e>
    cfa6:	cmp	r3, #2
    cfa8:	bne.w	ce06 <__ssvfscanf_r+0x8b6>
    cfac:	movs	r3, #3
    cfae:	b.n	cd84 <__ssvfscanf_r+0x834>
    cfb0:	subs	r3, r4, #1
    cfb2:	cmp.w	r3, #348	; 0x15c
    cfb6:	itte	hi
    cfb8:	mvnhi.w	r0, #348	; 0x15c
    cfbc:	addhi.w	r9, r4, r0
    cfc0:	movls	r9, r8
    cfc2:	add	r3, sp, #328	; 0x148
    cfc4:	mov	r0, r2
    cfc6:	mov	r2, r7
    cfc8:	mov	r7, r9
    cfca:	ldr.w	r9, [sp, #12]
    cfce:	str	r3, [sp, #32]
    cfd0:	it	hi
    cfd2:	movwhi	r4, #349	; 0x15d
    cfd6:	orr.w	r5, r5, #3456	; 0xd80
    cfda:	mov	r6, r3
    cfdc:	mov.w	r8, #0
    cfe0:	sub.w	r3, r1, #43	; 0x2b
    cfe4:	cmp	r3, #77	; 0x4d
    cfe6:	bhi.n	d08c <__ssvfscanf_r+0xb3c>
    cfe8:	tbb	[pc, r3]
    cfec:	.word	0x507e507e
    cff0:	.word	0x69696f50
    cff4:	.word	0x69696969
    cff8:	.word	0x504a4a69
    cffc:	.word	0x50505050
    d000:	.word	0x44445050
    d004:	.word	0x44444444
    d008:	.word	0x50505050
    d00c:	.word	0x50505050
    d010:	.word	0x50505050
    d014:	.word	0x50505050
    d018:	.word	0x50502750
    d01c:	.word	0x50505050
    d020:	.word	0x44445050
    d024:	.word	0x44444444
    d028:	.word	0x50505050
    d02c:	.word	0x50505050
    d030:	.word	0x50505050
    d034:	.word	0x50505050
    d038:	.short	0x2750
    d03a:	and.w	r3, r5, #1536	; 0x600
    d03e:	cmp.w	r3, #512	; 0x200
    d042:	bne.n	d08c <__ssvfscanf_r+0xb3c>
    d044:	bic.w	r5, r5, #512	; 0x200
    d048:	orr.w	r5, r5, #1280	; 0x500
    d04c:	mov.w	r9, #16
    d050:	strb	r1, [r6, #0]
    d052:	adds	r6, #1
    d054:	ldr.w	r3, [fp, #4]
    d058:	subs	r3, #1
    d05a:	cmp	r3, #0
    d05c:	str.w	r3, [fp, #4]
    d060:	ble.n	d148 <__ssvfscanf_r+0xbf8>
    d062:	adds	r0, #1
    d064:	str.w	r0, [fp]
    d068:	subs	r4, #1
    d06a:	beq.n	d08c <__ssvfscanf_r+0xb3c>
    d06c:	ldr.w	r0, [fp]
    d070:	ldrb	r1, [r0, #0]
    d072:	b.n	cfe0 <__ssvfscanf_r+0xa90>
    d074:	cmp.w	r9, #10
    d078:	ble.n	d08c <__ssvfscanf_r+0xb3c>
    d07a:	bic.w	r5, r5, #2944	; 0xb80
    d07e:	b.n	d050 <__ssvfscanf_r+0xb00>
    d080:	ldr	r3, [pc, #756]	; (d378 <__ssvfscanf_r+0xe28>)
    d082:	ldrsh.w	r9, [r3, r9, lsl #1]
    d086:	cmp.w	r9, #8
    d08a:	bgt.n	d07a <__ssvfscanf_r+0xb2a>
    d08c:	lsls	r1, r5, #23
    d08e:	mov	r7, r2
    d090:	str.w	r9, [sp, #12]
    d094:	bpl.n	d0a6 <__ssvfscanf_r+0xb56>
    d096:	ldr	r3, [sp, #32]
    d098:	cmp	r6, r3
    d09a:	bhi.w	d286 <__ssvfscanf_r+0xd36>
    d09e:	ldr	r3, [sp, #32]
    d0a0:	cmp	r6, r3
    d0a2:	beq.w	c5ec <__ssvfscanf_r+0x9c>
    d0a6:	ands.w	r4, r5, #16
    d0aa:	beq.w	d1d2 <__ssvfscanf_r+0xc82>
    d0ae:	ldr	r3, [sp, #32]
    d0b0:	subs	r6, r6, r3
    d0b2:	add	r6, r8
    d0b4:	add	r7, r6
    d0b6:	ldr	r6, [sp, #8]
    d0b8:	mov	r4, r6
    d0ba:	b.w	c5e0 <__ssvfscanf_r+0x90>
    d0be:	ldr	r3, [pc, #696]	; (d378 <__ssvfscanf_r+0xe28>)
    d0c0:	bic.w	r5, r5, #2944	; 0xb80
    d0c4:	ldrsh.w	r9, [r3, r9, lsl #1]
    d0c8:	b.n	d050 <__ssvfscanf_r+0xb00>
    d0ca:	lsls	r3, r5, #20
    d0cc:	bpl.n	d050 <__ssvfscanf_r+0xb00>
    d0ce:	cmp.w	r9, #0
    d0d2:	bne.n	d0dc <__ssvfscanf_r+0xb8c>
    d0d4:	orr.w	r5, r5, #512	; 0x200
    d0d8:	mov.w	r9, #8
    d0dc:	lsls	r3, r5, #21
    d0de:	bpl.w	d262 <__ssvfscanf_r+0xd12>
    d0e2:	bic.w	r5, r5, #1408	; 0x580
    d0e6:	b.n	d050 <__ssvfscanf_r+0xb00>
    d0e8:	lsls	r3, r5, #24
    d0ea:	bpl.n	d08c <__ssvfscanf_r+0xb3c>
    d0ec:	bic.w	r5, r5, #128	; 0x80
    d0f0:	b.n	d050 <__ssvfscanf_r+0xb00>
    d0f2:	cmp	r4, #0
    d0f4:	it	eq
    d0f6:	moveq.w	r4, #4294967295
    d0fa:	ands.w	r3, r5, #1
    d0fe:	bne.w	c9cc <__ssvfscanf_r+0x47c>
    d102:	lsls	r1, r5, #27
    d104:	bpl.n	d16e <__ssvfscanf_r+0xc1e>
    d106:	mov	r5, r3
    d108:	bl	9064 <__locale_ctype_ptr>
    d10c:	ldr.w	r3, [fp]
    d110:	ldrb	r2, [r3, #0]
    d112:	add	r0, r2
    d114:	adds	r3, #1
    d116:	ldrb	r2, [r0, #1]
    d118:	lsls	r2, r2, #28
    d11a:	bmi.w	c8aa <__ssvfscanf_r+0x35a>
    d11e:	ldr.w	r2, [fp, #4]
    d122:	str.w	r3, [fp]
    d126:	adds	r5, #1
    d128:	subs	r3, r2, #1
    d12a:	cmp	r4, r5
    d12c:	str.w	r3, [fp, #4]
    d130:	beq.w	c8aa <__ssvfscanf_r+0x35a>
    d134:	cmp	r3, #0
    d136:	bgt.n	d108 <__ssvfscanf_r+0xbb8>
    d138:	mov	r1, fp
    d13a:	mov	r0, sl
    d13c:	bl	fd8c <__ssrefill_r>
    d140:	cmp	r0, #0
    d142:	beq.n	d108 <__ssvfscanf_r+0xbb8>
    d144:	b.w	c8aa <__ssvfscanf_r+0x35a>
    d148:	mov	r1, fp
    d14a:	mov	r0, sl
    d14c:	str	r2, [sp, #12]
    d14e:	bl	fd8c <__ssrefill_r>
    d152:	ldr	r2, [sp, #12]
    d154:	cmp	r0, #0
    d156:	beq.n	d068 <__ssvfscanf_r+0xb18>
    d158:	b.n	d08c <__ssvfscanf_r+0xb3c>
    d15a:	str.w	r8, [sp, #48]	; 0x30
    d15e:	b.n	cca6 <__ssvfscanf_r+0x756>
    d160:	ldr	r2, [sp, #16]
    d162:	ldr	r3, [r2, #0]
    d164:	adds	r2, #4
    d166:	str	r2, [sp, #16]
    d168:	vstr	d0, [r3]
    d16c:	b.n	cf0a <__ssvfscanf_r+0x9ba>
    d16e:	ldr	r2, [sp, #16]
    d170:	ldr	r5, [r2, #0]
    d172:	adds	r6, r2, #4
    d174:	add	r4, r5
    d176:	mov	r8, r5
    d178:	bl	9064 <__locale_ctype_ptr>
    d17c:	ldr.w	r2, [fp]
    d180:	ldrb	r3, [r2, #0]
    d182:	add	r0, r3
    d184:	adds	r1, r2, #1
    d186:	ldrb	r3, [r0, #1]
    d188:	lsls	r3, r3, #28
    d18a:	bmi.n	d1b8 <__ssvfscanf_r+0xc68>
    d18c:	ldr.w	r3, [fp, #4]
    d190:	str.w	r1, [fp]
    d194:	subs	r3, #1
    d196:	str.w	r3, [fp, #4]
    d19a:	ldrb	r3, [r2, #0]
    d19c:	strb.w	r3, [r8], #1
    d1a0:	cmp	r4, r8
    d1a2:	beq.n	d1ba <__ssvfscanf_r+0xc6a>
    d1a4:	ldr.w	r3, [fp, #4]
    d1a8:	cmp	r3, #0
    d1aa:	bgt.n	d178 <__ssvfscanf_r+0xc28>
    d1ac:	mov	r1, fp
    d1ae:	mov	r0, sl
    d1b0:	bl	fd8c <__ssrefill_r>
    d1b4:	cmp	r0, #0
    d1b6:	beq.n	d178 <__ssvfscanf_r+0xc28>
    d1b8:	mov	r4, r8
    d1ba:	ldr	r2, [sp, #20]
    d1bc:	str	r6, [sp, #16]
    d1be:	ldr	r6, [sp, #8]
    d1c0:	subs	r5, r4, r5
    d1c2:	movs	r3, #0
    d1c4:	adds	r2, #1
    d1c6:	strb	r3, [r4, #0]
    d1c8:	add	r7, r5
    d1ca:	str	r2, [sp, #20]
    d1cc:	mov	r4, r6
    d1ce:	b.w	c5e0 <__ssvfscanf_r+0x90>
    d1d2:	mov	r2, r4
    d1d4:	strb	r4, [r6, #0]
    d1d6:	ldr	r3, [sp, #12]
    d1d8:	ldr	r1, [sp, #32]
    d1da:	ldr	r4, [sp, #24]
    d1dc:	mov	r0, sl
    d1de:	blx	r4
    d1e0:	lsls	r2, r5, #26
    d1e2:	bmi.n	d272 <__ssvfscanf_r+0xd22>
    d1e4:	lsls	r3, r5, #29
    d1e6:	bpl.n	d2e0 <__ssvfscanf_r+0xd90>
    d1e8:	ldr	r2, [sp, #16]
    d1ea:	ldr	r3, [r2, #0]
    d1ec:	adds	r2, #4
    d1ee:	str	r2, [sp, #16]
    d1f0:	strh	r0, [r3, #0]
    d1f2:	ldr	r3, [sp, #20]
    d1f4:	adds	r3, #1
    d1f6:	str	r3, [sp, #20]
    d1f8:	b.n	d0ae <__ssvfscanf_r+0xb5e>
    d1fa:	bl	9040 <__locale_mb_cur_max>
    d1fe:	cmp	r6, r0
    d200:	beq.w	c79a <__ssvfscanf_r+0x24a>
    d204:	ldmia.w	fp, {r2, r3}
    d208:	ldrb.w	r0, [r2], #1
    d20c:	str.w	r2, [fp]
    d210:	ldr	r2, [sp, #28]
    d212:	str	r2, [sp, #0]
    d214:	add	r2, sp, #328	; 0x148
    d216:	adds	r5, r6, #1
    d218:	subs	r3, #1
    d21a:	strb	r0, [r2, r6]
    d21c:	str.w	r3, [fp, #4]
    d220:	mov	r1, r8
    d222:	mov	r3, r5
    d224:	mov	r0, sl
    d226:	bl	ecdc <_mbrtowc_r>
    d22a:	adds	r6, r0, #1
    d22c:	beq.w	c79a <__ssvfscanf_r+0x24a>
    d230:	cmp	r0, #0
    d232:	bne.n	d30c <__ssvfscanf_r+0xdbc>
    d234:	str.w	r0, [r8]
    d238:	bl	eca0 <iswspace>
    d23c:	cmp	r0, #0
    d23e:	beq.w	d3a2 <__ssvfscanf_r+0xe52>
    d242:	cmp	r5, #0
    d244:	beq.w	ca08 <__ssvfscanf_r+0x4b8>
    d248:	add	r3, sp, #328	; 0x148
    d24a:	adds	r4, r3, r5
    d24c:	subs	r5, #1
    d24e:	mov	r2, fp
    d250:	ldrb.w	r1, [r4, #-1]!
    d254:	mov	r0, sl
    d256:	bl	fd08 <_sungetc_r>
    d25a:	cmp	r5, #0
    d25c:	bne.n	d24c <__ssvfscanf_r+0xcfc>
    d25e:	b.w	ca08 <__ssvfscanf_r+0x4b8>
    d262:	bic.w	r5, r5, #896	; 0x380
    d266:	cbz	r7, d26c <__ssvfscanf_r+0xd1c>
    d268:	subs	r7, #1
    d26a:	adds	r4, #1
    d26c:	add.w	r8, r8, #1
    d270:	b.n	d054 <__ssvfscanf_r+0xb04>
    d272:	ldr	r2, [sp, #16]
    d274:	ldr	r3, [r2, #0]
    d276:	adds	r2, #4
    d278:	str	r2, [sp, #16]
    d27a:	str	r0, [r3, #0]
    d27c:	b.n	d1f2 <__ssvfscanf_r+0xca2>
    d27e:	bic.w	r5, r5, #1920	; 0x780
    d282:	movs	r3, #1
    d284:	b.n	cd84 <__ssvfscanf_r+0x834>
    d286:	ldrb.w	r1, [r6, #-1]
    d28a:	mov	r2, fp
    d28c:	mov	r0, sl
    d28e:	bl	fd08 <_sungetc_r>
    d292:	subs	r6, #1
    d294:	b.n	d09e <__ssvfscanf_r+0xb4e>
    d296:	add.w	r8, sp, #60	; 0x3c
    d29a:	b.w	c9ee <__ssvfscanf_r+0x49e>
    d29e:	bic.w	r5, r5, #1920	; 0x780
    d2a2:	mov.w	r8, #1
    d2a6:	b.n	cd84 <__ssvfscanf_r+0x834>
    d2a8:	ldr	r3, [sp, #36]	; 0x24
    d2aa:	subs	r6, r6, r3
    d2ac:	negs	r2, r6
    d2ae:	cmp	r6, #0
    d2b0:	beq.w	ced4 <__ssvfscanf_r+0x984>
    d2b4:	addw	r3, sp, #667	; 0x29b
    d2b8:	cmp	r9, r3
    d2ba:	it	cs
    d2bc:	addwcs	r9, sp, #666	; 0x29a
    d2c0:	mov	r0, r9
    d2c2:	ldr	r1, [pc, #184]	; (d37c <__ssvfscanf_r+0xe2c>)
    d2c4:	bl	9cb4 <sprintf>
    d2c8:	b.n	ced4 <__ssvfscanf_r+0x984>
    d2ca:	ldr	r4, [sp, #52]	; 0x34
    d2cc:	mov	r1, r4
    d2ce:	movs	r3, #10
    d2d0:	adds	r1, #1
    d2d2:	mov	r0, sl
    d2d4:	bl	afb8 <_strtol_r>
    d2d8:	ldr	r3, [sp, #44]	; 0x2c
    d2da:	mov	r9, r4
    d2dc:	subs	r2, r0, r3
    d2de:	b.n	d2b4 <__ssvfscanf_r+0xd64>
    d2e0:	ands.w	r2, r5, #1
    d2e4:	bne.n	d272 <__ssvfscanf_r+0xd22>
    d2e6:	lsls	r4, r5, #30
    d2e8:	bpl.n	d272 <__ssvfscanf_r+0xd22>
    d2ea:	ldr	r3, [sp, #24]
    d2ec:	mov	r1, r3
    d2ee:	ldr	r3, [pc, #144]	; (d380 <__ssvfscanf_r+0xe30>)
    d2f0:	cmp	r1, r3
    d2f2:	mov	r0, sl
    d2f4:	ldr	r3, [sp, #12]
    d2f6:	ldr	r1, [sp, #32]
    d2f8:	beq.n	d3c4 <__ssvfscanf_r+0xe74>
    d2fa:	bl	f848 <_strtoll_r>
    d2fe:	ldr	r2, [sp, #16]
    d300:	ldr	r3, [r2, #0]
    d302:	adds	r2, #4
    d304:	str	r2, [sp, #16]
    d306:	strd	r0, r1, [r3]
    d30a:	b.n	d1f2 <__ssvfscanf_r+0xca2>
    d30c:	adds	r0, #2
    d30e:	bne.n	d352 <__ssvfscanf_r+0xe02>
    d310:	mov	r6, r5
    d312:	ldr.w	r3, [fp, #4]
    d316:	cmp	r3, #0
    d318:	bgt.w	c9f0 <__ssvfscanf_r+0x4a0>
    d31c:	mov	r1, fp
    d31e:	mov	r0, sl
    d320:	bl	fd8c <__ssrefill_r>
    d324:	cmp	r0, #0
    d326:	beq.w	c9f0 <__ssvfscanf_r+0x4a0>
    d32a:	cmp	r6, #0
    d32c:	bne.w	c79a <__ssvfscanf_r+0x24a>
    d330:	b.w	ca08 <__ssvfscanf_r+0x4b8>
    d334:	ldr	r3, [sp, #32]
    d336:	cmp	r9, r3
    d338:	bls.w	c5ec <__ssvfscanf_r+0x9c>
    d33c:	ldrb.w	r1, [r9, #-1]!
    d340:	mov	r2, fp
    d342:	mov	r0, sl
    d344:	bl	fd08 <_sungetc_r>
    d348:	ldr	r3, [sp, #32]
    d34a:	cmp	r9, r3
    d34c:	bne.n	d33c <__ssvfscanf_r+0xdec>
    d34e:	b.w	c5ec <__ssvfscanf_r+0x9c>
    d352:	ldr.w	r0, [r8]
    d356:	b.n	d238 <__ssvfscanf_r+0xce8>
    d358:	ldr	r3, [sp, #32]
    d35a:	cmp	r9, r3
    d35c:	bls.w	c5ec <__ssvfscanf_r+0x9c>
    d360:	ldrb.w	r1, [r9, #-1]!
    d364:	mov	r2, fp
    d366:	mov	r0, sl
    d368:	bl	fd08 <_sungetc_r>
    d36c:	ldr	r3, [sp, #32]
    d36e:	cmp	r9, r3
    d370:	bne.n	d360 <__ssvfscanf_r+0xe10>
    d372:	b.w	c5ec <__ssvfscanf_r+0x9c>
    d376:	nop
    d378:	.word	0x20000724
    d37c:	.word	0x200016e4
    d380:	.word	0x0000f9d5
    d384:	ldr	r3, [sp, #32]
    d386:	cmp	r9, r3
    d388:	bls.w	c5ec <__ssvfscanf_r+0x9c>
    d38c:	ldrb.w	r1, [r9, #-1]!
    d390:	mov	r2, fp
    d392:	mov	r0, sl
    d394:	bl	fd08 <_sungetc_r>
    d398:	ldr	r3, [sp, #32]
    d39a:	cmp	r9, r3
    d39c:	bne.n	d38c <__ssvfscanf_r+0xe3c>
    d39e:	b.w	c5ec <__ssvfscanf_r+0x9c>
    d3a2:	add	r7, r5
    d3a4:	subs	r4, #1
    d3a6:	cmp.w	r9, #0
    d3aa:	bne.n	d3b4 <__ssvfscanf_r+0xe64>
    d3ac:	add.w	r8, r8, #4
    d3b0:	mov	r6, r9
    d3b2:	b.n	d312 <__ssvfscanf_r+0xdc2>
    d3b4:	mov	r6, r0
    d3b6:	b.n	d312 <__ssvfscanf_r+0xdc2>
    d3b8:	bl	f690 <nanf>
    d3bc:	str	r5, [sp, #16]
    d3be:	vstr	s0, [r4]
    d3c2:	b.n	cf0a <__ssvfscanf_r+0x9ba>
    d3c4:	bl	fbe4 <_strtoull_r>
    d3c8:	b.n	d2fe <__ssvfscanf_r+0xdae>
    d3ca:	nop

0000d3cc <_vdprintf_r>:
    d3cc:	push	{r4, r5, r6, r7, lr}
    d3ce:	sub.w	sp, sp, #532	; 0x214
    d3d2:	add	r5, sp, #16
    d3d4:	str	r3, [sp, #0]
    d3d6:	mov	r7, r1
    d3d8:	mov	r3, r2
    d3da:	mov.w	r4, #512	; 0x200
    d3de:	add	r2, sp, #12
    d3e0:	mov	r1, r5
    d3e2:	str	r4, [sp, #12]
    d3e4:	mov	r6, r0
    d3e6:	bl	fec4 <_vasnprintf_r>
    d3ea:	cbz	r0, d410 <_vdprintf_r+0x44>
    d3ec:	mov	r4, r0
    d3ee:	mov	r2, r0
    d3f0:	mov	r1, r7
    d3f2:	ldr	r3, [sp, #12]
    d3f4:	mov	r0, r6
    d3f6:	bl	d44c <_write_r>
    d3fa:	cmp	r4, r5
    d3fc:	str	r0, [sp, #12]
    d3fe:	beq.n	d40a <_vdprintf_r+0x3e>
    d400:	mov	r0, r6
    d402:	mov	r1, r4
    d404:	bl	e368 <_free_r>
    d408:	ldr	r0, [sp, #12]
    d40a:	add.w	sp, sp, #532	; 0x214
    d40e:	pop	{r4, r5, r6, r7, pc}
    d410:	mov.w	r0, #4294967295
    d414:	b.n	d40a <_vdprintf_r+0x3e>
    d416:	nop

0000d418 <vdprintf>:
    d418:	push	{r4}
    d41a:	ldr	r4, [pc, #16]	; (d42c <vdprintf+0x14>)
    d41c:	mov	r3, r2
    d41e:	mov	r2, r1
    d420:	mov	r1, r0
    d422:	ldr	r0, [r4, #0]
    d424:	ldr.w	r4, [sp], #4
    d428:	b.w	d3cc <_vdprintf_r>
    d42c:	.word	0x2000215c

0000d430 <__ascii_wctomb>:
    d430:	cbz	r1, d43c <__ascii_wctomb+0xc>
    d432:	cmp	r2, #255	; 0xff
    d434:	bhi.n	d440 <__ascii_wctomb+0x10>
    d436:	strb	r2, [r1, #0]
    d438:	movs	r0, #1
    d43a:	bx	lr
    d43c:	mov	r0, r1
    d43e:	bx	lr
    d440:	movs	r3, #138	; 0x8a
    d442:	str	r3, [r0, #0]
    d444:	mov.w	r0, #4294967295
    d448:	bx	lr
    d44a:	nop

0000d44c <_write_r>:
    d44c:	push	{r4, r5, r6, lr}
    d44e:	mov	r5, r1
    d450:	ldr	r4, [pc, #32]	; (d474 <_write_r+0x28>)
    d452:	mov	r1, r2
    d454:	mov	r6, r0
    d456:	mov	r2, r3
    d458:	mov	r0, r5
    d45a:	movs	r3, #0
    d45c:	str	r3, [r4, #0]
    d45e:	bl	8a04 <_write>
    d462:	adds	r3, r0, #1
    d464:	beq.n	d468 <_write_r+0x1c>
    d466:	pop	{r4, r5, r6, pc}
    d468:	ldr	r3, [r4, #0]
    d46a:	cmp	r3, #0
    d46c:	beq.n	d466 <_write_r+0x1a>
    d46e:	str	r3, [r6, #0]
    d470:	pop	{r4, r5, r6, pc}
    d472:	nop
    d474:	.word	0x20022540

0000d478 <__register_exitproc>:
    d478:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d47c:	ldr	r4, [pc, #148]	; (d514 <__register_exitproc+0x9c>)
    d47e:	ldr	r5, [r4, #0]
    d480:	ldr.w	r4, [r5, #328]	; 0x148
    d484:	mov	r6, r0
    d486:	mov	r8, r1
    d488:	mov	sl, r2
    d48a:	mov	r9, r3
    d48c:	cbz	r4, d500 <__register_exitproc+0x88>
    d48e:	ldr	r0, [r4, #4]
    d490:	cmp	r0, #31
    d492:	bgt.n	d4c4 <__register_exitproc+0x4c>
    d494:	adds	r3, r0, #1
    d496:	cbz	r6, d4b6 <__register_exitproc+0x3e>
    d498:	add.w	r5, r4, r0, lsl #2
    d49c:	movs	r2, #1
    d49e:	str.w	sl, [r5, #136]	; 0x88
    d4a2:	ldr.w	r1, [r4, #392]	; 0x188
    d4a6:	lsls	r2, r0
    d4a8:	orrs	r1, r2
    d4aa:	cmp	r6, #2
    d4ac:	str.w	r1, [r4, #392]	; 0x188
    d4b0:	str.w	r9, [r5, #264]	; 0x108
    d4b4:	beq.n	d4f4 <__register_exitproc+0x7c>
    d4b6:	adds	r0, #2
    d4b8:	str	r3, [r4, #4]
    d4ba:	str.w	r8, [r4, r0, lsl #2]
    d4be:	movs	r0, #0
    d4c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d4c4:	ldr	r3, [pc, #80]	; (d518 <__register_exitproc+0xa0>)
    d4c6:	cbz	r3, d50a <__register_exitproc+0x92>
    d4c8:	mov.w	r0, #400	; 0x190
    d4cc:	bl	9078 <malloc>
    d4d0:	mov	r4, r0
    d4d2:	cbz	r0, d50a <__register_exitproc+0x92>
    d4d4:	ldr.w	r3, [r5, #328]	; 0x148
    d4d8:	movs	r7, #0
    d4da:	stmia.w	r0, {r3, r7}
    d4de:	str.w	r4, [r5, #328]	; 0x148
    d4e2:	mov	r0, r7
    d4e4:	movs	r3, #1
    d4e6:	str.w	r7, [r4, #392]	; 0x188
    d4ea:	str.w	r7, [r4, #396]	; 0x18c
    d4ee:	cmp	r6, #0
    d4f0:	beq.n	d4b6 <__register_exitproc+0x3e>
    d4f2:	b.n	d498 <__register_exitproc+0x20>
    d4f4:	ldr.w	r1, [r4, #396]	; 0x18c
    d4f8:	orrs	r2, r1
    d4fa:	str.w	r2, [r4, #396]	; 0x18c
    d4fe:	b.n	d4b6 <__register_exitproc+0x3e>
    d500:	add.w	r4, r5, #332	; 0x14c
    d504:	str.w	r4, [r5, #328]	; 0x148
    d508:	b.n	d48e <__register_exitproc+0x16>
    d50a:	mov.w	r0, #4294967295
    d50e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d512:	nop
    d514:	.word	0x20000720
    d518:	.word	0x00009079

0000d51c <quorem>:
    d51c:	ldr	r2, [r0, #16]
    d51e:	ldr	r3, [r1, #16]
    d520:	cmp	r3, r2
    d522:	bgt.w	d640 <quorem+0x124>
    d526:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d52a:	add.w	r8, r3, #4294967295
    d52e:	add.w	r7, r1, #20
    d532:	add.w	fp, r0, #20
    d536:	ldr.w	r2, [r7, r8, lsl #2]
    d53a:	ldr.w	r3, [fp, r8, lsl #2]
    d53e:	mov.w	r4, r8, lsl #2
    d542:	sub	sp, #12
    d544:	adds	r2, #1
    d546:	udiv	r9, r3, r2
    d54a:	add.w	r3, fp, r4
    d54e:	str	r4, [sp, #0]
    d550:	add.w	sl, r7, r4
    d554:	str	r3, [sp, #4]
    d556:	cmp.w	r9, #0
    d55a:	beq.n	d5d0 <quorem+0xb4>
    d55c:	movs	r5, #0
    d55e:	mov	ip, r7
    d560:	mov	lr, fp
    d562:	mov	r3, r5
    d564:	ldr.w	r6, [ip], #4
    d568:	ldr.w	r2, [lr]
    d56c:	uxth	r4, r6
    d56e:	mla	r5, r9, r4, r5
    d572:	lsrs	r6, r6, #16
    d574:	lsrs	r4, r5, #16
    d576:	mla	r4, r9, r6, r4
    d57a:	uxth	r5, r5
    d57c:	subs	r3, r3, r5
    d57e:	uxth	r6, r4
    d580:	uxtah	r3, r3, r2
    d584:	rsb	r6, r6, r2, lsr #16
    d588:	add.w	r6, r6, r3, asr #16
    d58c:	uxth	r3, r3
    d58e:	orr.w	r3, r3, r6, lsl #16
    d592:	cmp	sl, ip
    d594:	str.w	r3, [lr], #4
    d598:	mov.w	r5, r4, lsr #16
    d59c:	mov.w	r3, r6, asr #16
    d5a0:	bcs.n	d564 <quorem+0x48>
    d5a2:	ldr	r3, [sp, #0]
    d5a4:	ldr.w	r3, [fp, r3]
    d5a8:	cbnz	r3, d5d0 <quorem+0xb4>
    d5aa:	ldr	r4, [sp, #4]
    d5ac:	subs	r3, r4, #4
    d5ae:	cmp	fp, r3
    d5b0:	bcs.n	d5cc <quorem+0xb0>
    d5b2:	ldr.w	r3, [r4, #-4]
    d5b6:	cbnz	r3, d5cc <quorem+0xb0>
    d5b8:	sub.w	r3, r4, #8
    d5bc:	b.n	d5c4 <quorem+0xa8>
    d5be:	ldr	r2, [r3, #0]
    d5c0:	subs	r3, #4
    d5c2:	cbnz	r2, d5cc <quorem+0xb0>
    d5c4:	cmp	fp, r3
    d5c6:	add.w	r8, r8, #4294967295
    d5ca:	bcc.n	d5be <quorem+0xa2>
    d5cc:	str.w	r8, [r0, #16]
    d5d0:	mov	r4, r0
    d5d2:	bl	f1e0 <__mcmp>
    d5d6:	cmp	r0, #0
    d5d8:	blt.n	d638 <quorem+0x11c>
    d5da:	add.w	r9, r9, #1
    d5de:	mov	r5, fp
    d5e0:	movs	r3, #0
    d5e2:	ldr.w	r1, [r7], #4
    d5e6:	ldr	r0, [r5, #0]
    d5e8:	uxth	r2, r1
    d5ea:	subs	r2, r3, r2
    d5ec:	lsrs	r1, r1, #16
    d5ee:	uxtah	r2, r2, r0
    d5f2:	rsb	r3, r1, r0, lsr #16
    d5f6:	add.w	r3, r3, r2, asr #16
    d5fa:	uxth	r1, r2
    d5fc:	orr.w	r1, r1, r3, lsl #16
    d600:	cmp	sl, r7
    d602:	str.w	r1, [r5], #4
    d606:	mov.w	r3, r3, asr #16
    d60a:	bcs.n	d5e2 <quorem+0xc6>
    d60c:	ldr.w	r2, [fp, r8, lsl #2]
    d610:	add.w	r3, fp, r8, lsl #2
    d614:	cbnz	r2, d638 <quorem+0x11c>
    d616:	subs	r2, r3, #4
    d618:	cmp	fp, r2
    d61a:	bcs.n	d634 <quorem+0x118>
    d61c:	ldr.w	r2, [r3, #-4]
    d620:	cbnz	r2, d634 <quorem+0x118>
    d622:	subs	r3, #8
    d624:	b.n	d62c <quorem+0x110>
    d626:	ldr	r2, [r3, #0]
    d628:	subs	r3, #4
    d62a:	cbnz	r2, d634 <quorem+0x118>
    d62c:	cmp	fp, r3
    d62e:	add.w	r8, r8, #4294967295
    d632:	bcc.n	d626 <quorem+0x10a>
    d634:	str.w	r8, [r4, #16]
    d638:	mov	r0, r9
    d63a:	add	sp, #12
    d63c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d640:	movs	r0, #0
    d642:	bx	lr
    d644:	movs	r0, r0
	...

0000d648 <_dtoa_r>:
    d648:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d64c:	vmov	r6, r7, d0
    d650:	sub	sp, #76	; 0x4c
    d652:	ldr	r5, [r0, #64]	; 0x40
    d654:	str	r1, [sp, #4]
    d656:	mov	r4, r0
    d658:	mov	r8, r2
    d65a:	str	r3, [sp, #16]
    d65c:	vmov	sl, s0
    d660:	mov	fp, r7
    d662:	cbz	r5, d678 <_dtoa_r+0x30>
    d664:	ldr	r2, [r0, #68]	; 0x44
    d666:	str	r2, [r5, #4]
    d668:	movs	r3, #1
    d66a:	lsls	r3, r2
    d66c:	str	r3, [r5, #8]
    d66e:	mov	r1, r5
    d670:	bl	ed84 <_Bfree>
    d674:	movs	r3, #0
    d676:	str	r3, [r4, #64]	; 0x40
    d678:	cmp.w	fp, #0
    d67c:	mov	r6, fp
    d67e:	blt.n	d6ea <_dtoa_r+0xa2>
    d680:	ldr	r2, [sp, #112]	; 0x70
    d682:	movs	r3, #0
    d684:	str	r3, [r2, #0]
    d686:	ldr	r3, [pc, #784]	; (d998 <_dtoa_r+0x350>)
    d688:	mov	r2, r3
    d68a:	ands	r3, r6
    d68c:	cmp	r3, r2
    d68e:	beq.n	d6bc <_dtoa_r+0x74>
    d690:	vmov	d7, sl, fp
    d694:	vcmp.f64	d7, #0.0
    d698:	vmrs	APSR_nzcv, fpscr
    d69c:	strd	sl, fp, [sp, #8]
    d6a0:	bne.n	d6f8 <_dtoa_r+0xb0>
    d6a2:	ldr	r2, [sp, #16]
    d6a4:	movs	r3, #1
    d6a6:	str	r3, [r2, #0]
    d6a8:	ldr	r3, [sp, #116]	; 0x74
    d6aa:	cmp	r3, #0
    d6ac:	beq.w	d81e <_dtoa_r+0x1d6>
    d6b0:	ldr	r0, [pc, #744]	; (d99c <_dtoa_r+0x354>)
    d6b2:	str	r0, [r3, #0]
    d6b4:	subs	r0, #1
    d6b6:	add	sp, #76	; 0x4c
    d6b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d6bc:	ldr	r2, [sp, #16]
    d6be:	movw	r3, #9999	; 0x270f
    d6c2:	str	r3, [r2, #0]
    d6c4:	cmp.w	sl, #0
    d6c8:	beq.w	d7f0 <_dtoa_r+0x1a8>
    d6cc:	ldr	r0, [pc, #720]	; (d9a0 <_dtoa_r+0x358>)
    d6ce:	ldr	r3, [sp, #116]	; 0x74
    d6d0:	cmp	r3, #0
    d6d2:	beq.n	d6b6 <_dtoa_r+0x6e>
    d6d4:	ldrb	r3, [r0, #3]
    d6d6:	cmp	r3, #0
    d6d8:	beq.w	d822 <_dtoa_r+0x1da>
    d6dc:	add.w	r3, r0, #8
    d6e0:	ldr	r2, [sp, #116]	; 0x74
    d6e2:	str	r3, [r2, #0]
    d6e4:	add	sp, #76	; 0x4c
    d6e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d6ea:	ldr	r2, [sp, #112]	; 0x70
    d6ec:	movs	r3, #1
    d6ee:	bic.w	r6, fp, #2147483648	; 0x80000000
    d6f2:	str	r3, [r2, #0]
    d6f4:	mov	fp, r6
    d6f6:	b.n	d686 <_dtoa_r+0x3e>
    d6f8:	add	r1, sp, #68	; 0x44
    d6fa:	add	r2, sp, #64	; 0x40
    d6fc:	vldr	d0, [sp, #8]
    d700:	mov	r0, r4
    d702:	bl	f45c <__d2b>
    d706:	lsrs	r1, r6, #20
    d708:	str	r0, [sp, #28]
    d70a:	bne.n	d802 <_dtoa_r+0x1ba>
    d70c:	ldr	r0, [sp, #64]	; 0x40
    d70e:	ldr	r1, [sp, #68]	; 0x44
    d710:	add	r1, r0
    d712:	addw	r3, r1, #1074	; 0x432
    d716:	cmp	r3, #32
    d718:	ble.w	db9e <_dtoa_r+0x556>
    d71c:	rsb	r3, r3, #64	; 0x40
    d720:	addw	r2, r1, #1042	; 0x412
    d724:	lsls	r6, r3
    d726:	lsr.w	r3, sl, r2
    d72a:	orrs	r3, r6
    d72c:	vmov	s15, r3
    d730:	vcvt.f64.u32	d7, s15
    d734:	movs	r5, #1
    d736:	vmov	r2, r3, d7
    d73a:	subs	r1, #1
    d73c:	sub.w	r3, r3, #32505856	; 0x1f00000
    d740:	str	r5, [sp, #40]	; 0x28
    d742:	vmov	d7, r2, r3
    d746:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    d74a:	vldr	d4, [pc, #564]	; d980 <_dtoa_r+0x338>
    d74e:	vsub.f64	d6, d7, d6
    d752:	vldr	d7, [pc, #564]	; d988 <_dtoa_r+0x340>
    d756:	vldr	d5, [pc, #568]	; d990 <_dtoa_r+0x348>
    d75a:	vfma.f64	d7, d6, d4
    d75e:	vmov	s13, r1
    d762:	vcvt.f64.s32	d6, s13
    d766:	vfma.f64	d7, d6, d5
    d76a:	vcvt.s32.f64	s13, d7
    d76e:	vcmpe.f64	d7, #0.0
    d772:	vmrs	APSR_nzcv, fpscr
    d776:	vstr	s13, [sp, #8]
    d77a:	bmi.w	d9b6 <_dtoa_r+0x36e>
    d77e:	ldr	r5, [sp, #8]
    d780:	cmp	r5, #22
    d782:	bhi.w	d9b0 <_dtoa_r+0x368>
    d786:	ldr	r3, [pc, #540]	; (d9a4 <_dtoa_r+0x35c>)
    d788:	add.w	r3, r3, r5, lsl #3
    d78c:	vldr	d7, [r3]
    d790:	vmov	d6, sl, fp
    d794:	vcmpe.f64	d7, d6
    d798:	vmrs	APSR_nzcv, fpscr
    d79c:	ble.w	dbac <_dtoa_r+0x564>
    d7a0:	subs	r3, r5, #1
    d7a2:	str	r3, [sp, #8]
    d7a4:	movs	r3, #0
    d7a6:	str	r3, [sp, #48]	; 0x30
    d7a8:	subs	r1, r0, r1
    d7aa:	subs.w	r9, r1, #1
    d7ae:	bmi.w	d9e0 <_dtoa_r+0x398>
    d7b2:	movs	r3, #0
    d7b4:	str	r3, [sp, #24]
    d7b6:	ldr	r3, [sp, #8]
    d7b8:	cmp	r3, #0
    d7ba:	blt.w	d9ce <_dtoa_r+0x386>
    d7be:	add	r9, r3
    d7c0:	str	r3, [sp, #44]	; 0x2c
    d7c2:	movs	r3, #0
    d7c4:	str	r3, [sp, #20]
    d7c6:	ldr	r3, [sp, #4]
    d7c8:	cmp	r3, #9
    d7ca:	bhi.n	d826 <_dtoa_r+0x1de>
    d7cc:	cmp	r3, #5
    d7ce:	ble.w	e290 <_dtoa_r+0xc48>
    d7d2:	subs	r3, #4
    d7d4:	str	r3, [sp, #4]
    d7d6:	movs	r3, #0
    d7d8:	str	r3, [sp, #56]	; 0x38
    d7da:	ldr	r3, [sp, #4]
    d7dc:	subs	r3, #2
    d7de:	cmp	r3, #3
    d7e0:	bhi.w	e2a2 <_dtoa_r+0xc5a>
    d7e4:	tbh	[pc, r3, lsl #1]
    d7e8:	.word	0x01e502a9
    d7ec:	.word	0x03c802b5
    d7f0:	ldr	r3, [pc, #428]	; (d9a0 <_dtoa_r+0x358>)
    d7f2:	ldr	r2, [pc, #436]	; (d9a8 <_dtoa_r+0x360>)
    d7f4:	ubfx	r0, r6, #0, #20
    d7f8:	cmp	r0, #0
    d7fa:	ite	ne
    d7fc:	movne	r0, r3
    d7fe:	moveq	r0, r2
    d800:	b.n	d6ce <_dtoa_r+0x86>
    d802:	ldrd	r2, r3, [sp, #8]
    d806:	ubfx	r0, r3, #0, #20
    d80a:	orr.w	r3, r0, #1069547520	; 0x3fc00000
    d80e:	movs	r5, #0
    d810:	subw	r1, r1, #1023	; 0x3ff
    d814:	orr.w	r3, r3, #3145728	; 0x300000
    d818:	ldr	r0, [sp, #64]	; 0x40
    d81a:	str	r5, [sp, #40]	; 0x28
    d81c:	b.n	d742 <_dtoa_r+0xfa>
    d81e:	ldr	r0, [pc, #396]	; (d9ac <_dtoa_r+0x364>)
    d820:	b.n	d6b6 <_dtoa_r+0x6e>
    d822:	adds	r3, r0, #3
    d824:	b.n	d6e0 <_dtoa_r+0x98>
    d826:	movs	r1, #0
    d828:	str	r1, [r4, #68]	; 0x44
    d82a:	mov	r0, r4
    d82c:	mov	r8, r1
    d82e:	str	r1, [sp, #4]
    d830:	bl	ed38 <_Balloc>
    d834:	mov.w	r7, #4294967295
    d838:	movs	r3, #1
    d83a:	str	r0, [sp, #32]
    d83c:	str	r0, [r4, #64]	; 0x40
    d83e:	str	r7, [sp, #52]	; 0x34
    d840:	str	r3, [sp, #36]	; 0x24
    d842:	ldr	r3, [sp, #68]	; 0x44
    d844:	cmp	r3, #0
    d846:	blt.n	d93e <_dtoa_r+0x2f6>
    d848:	ldr	r2, [sp, #8]
    d84a:	cmp	r2, #14
    d84c:	bgt.n	d93e <_dtoa_r+0x2f6>
    d84e:	ldr	r3, [pc, #340]	; (d9a4 <_dtoa_r+0x35c>)
    d850:	cmp.w	r8, #0
    d854:	add.w	r3, r3, r2, lsl #3
    d858:	vldr	d4, [r3]
    d85c:	blt.w	dd68 <_dtoa_r+0x720>
    d860:	vneg.f64	d2, d4
    d864:	vmov	d7, sl, fp
    d868:	vdiv.f64	d6, d7, d4
    d86c:	vcvt.s32.f64	s12, d6
    d870:	ldr	r2, [sp, #32]
    d872:	vmov	r3, s12
    d876:	cmp	r7, #1
    d878:	add.w	r3, r3, #48	; 0x30
    d87c:	vcvt.f64.s32	d5, s12
    d880:	add.w	fp, r2, #1
    d884:	strb	r3, [r2, #0]
    d886:	vfma.f64	d7, d2, d5
    d88a:	beq.n	d8d2 <_dtoa_r+0x28a>
    d88c:	vmov.f64	d3, #36	; 0x41200000  10.0
    d890:	vmul.f64	d7, d7, d3
    d894:	vcmp.f64	d7, #0.0
    d898:	vmrs	APSR_nzcv, fpscr
    d89c:	beq.n	d914 <_dtoa_r+0x2cc>
    d89e:	ldr	r2, [sp, #32]
    d8a0:	b.n	d8b0 <_dtoa_r+0x268>
    d8a2:	vmul.f64	d7, d7, d3
    d8a6:	vcmp.f64	d7, #0.0
    d8aa:	vmrs	APSR_nzcv, fpscr
    d8ae:	beq.n	d914 <_dtoa_r+0x2cc>
    d8b0:	vdiv.f64	d6, d7, d4
    d8b4:	vcvt.s32.f64	s12, d6
    d8b8:	vmov	r3, s12
    d8bc:	adds	r3, #48	; 0x30
    d8be:	strb.w	r3, [fp], #1
    d8c2:	rsb	r3, r2, fp
    d8c6:	cmp	r3, r7
    d8c8:	vcvt.f64.s32	d5, s12
    d8cc:	vfma.f64	d7, d2, d5
    d8d0:	bne.n	d8a2 <_dtoa_r+0x25a>
    d8d2:	vadd.f64	d7, d7, d7
    d8d6:	vcmpe.f64	d4, d7
    d8da:	vmrs	APSR_nzcv, fpscr
    d8de:	bmi.n	d8f2 <_dtoa_r+0x2aa>
    d8e0:	vcmp.f64	d4, d7
    d8e4:	vmrs	APSR_nzcv, fpscr
    d8e8:	bne.n	d914 <_dtoa_r+0x2cc>
    d8ea:	vmov	r3, s12
    d8ee:	lsls	r3, r3, #31
    d8f0:	bpl.n	d914 <_dtoa_r+0x2cc>
    d8f2:	ldrb.w	r0, [fp, #-1]
    d8f6:	ldr	r2, [sp, #32]
    d8f8:	add.w	r3, fp, #4294967295
    d8fc:	b.n	d908 <_dtoa_r+0x2c0>
    d8fe:	cmp	r2, r3
    d900:	beq.w	e0ce <_dtoa_r+0xa86>
    d904:	ldrb.w	r0, [r3, #-1]!
    d908:	cmp	r0, #57	; 0x39
    d90a:	add.w	fp, r3, #1
    d90e:	beq.n	d8fe <_dtoa_r+0x2b6>
    d910:	adds	r0, #1
    d912:	strb	r0, [r3, #0]
    d914:	ldr	r1, [sp, #28]
    d916:	mov	r0, r4
    d918:	bl	ed84 <_Bfree>
    d91c:	movs	r2, #0
    d91e:	ldr	r3, [sp, #8]
    d920:	strb.w	r2, [fp]
    d924:	ldr	r2, [sp, #16]
    d926:	adds	r3, #1
    d928:	str	r3, [r2, #0]
    d92a:	ldr	r3, [sp, #116]	; 0x74
    d92c:	cmp	r3, #0
    d92e:	beq.w	dffe <_dtoa_r+0x9b6>
    d932:	ldr	r0, [sp, #32]
    d934:	str.w	fp, [r3]
    d938:	add	sp, #76	; 0x4c
    d93a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d93e:	ldr	r2, [sp, #36]	; 0x24
    d940:	cmp	r2, #0
    d942:	beq.n	d9ec <_dtoa_r+0x3a4>
    d944:	ldr	r2, [sp, #4]
    d946:	cmp	r2, #1
    d948:	ble.w	dda8 <_dtoa_r+0x760>
    d94c:	ldr	r1, [sp, #20]
    d94e:	subs	r2, r7, #1
    d950:	cmp	r1, r2
    d952:	blt.w	e004 <_dtoa_r+0x9bc>
    d956:	subs	r3, r1, r2
    d958:	str	r3, [sp, #56]	; 0x38
    d95a:	cmp	r7, #0
    d95c:	ldr	r3, [sp, #24]
    d95e:	blt.w	e1aa <_dtoa_r+0xb62>
    d962:	str	r3, [sp, #40]	; 0x28
    d964:	mov	r3, r7
    d966:	ldr	r2, [sp, #24]
    d968:	movs	r1, #1
    d96a:	add	r2, r3
    d96c:	mov	r0, r4
    d96e:	str	r2, [sp, #24]
    d970:	add	r9, r3
    d972:	bl	ef4c <__i2b>
    d976:	mov	r6, r0
    d978:	b.n	d9f6 <_dtoa_r+0x3ae>
    d97a:	nop
    d97c:	nop.w
    d980:	.word	0x636f4361
    d984:	.word	0x3fd287a7
    d988:	.word	0x8b60c8b3
    d98c:	.word	0x3fc68a28
    d990:	.word	0x509f79fb
    d994:	.word	0x3fd34413
    d998:	.word	0x7ff00000
    d99c:	.word	0x200016e1
    d9a0:	.word	0x200016f8
    d9a4:	.word	0x200002a8
    d9a8:	.word	0x200016ec
    d9ac:	.word	0x200016e0
    d9b0:	movs	r3, #1
    d9b2:	str	r3, [sp, #48]	; 0x30
    d9b4:	b.n	d7a8 <_dtoa_r+0x160>
    d9b6:	vcvt.f64.s32	d6, s13
    d9ba:	vcmp.f64	d7, d6
    d9be:	vmrs	APSR_nzcv, fpscr
    d9c2:	beq.w	d77e <_dtoa_r+0x136>
    d9c6:	ldr	r3, [sp, #8]
    d9c8:	subs	r3, #1
    d9ca:	str	r3, [sp, #8]
    d9cc:	b.n	d77e <_dtoa_r+0x136>
    d9ce:	ldr	r2, [sp, #24]
    d9d0:	ldr	r3, [sp, #8]
    d9d2:	subs	r2, r2, r3
    d9d4:	negs	r3, r3
    d9d6:	str	r3, [sp, #20]
    d9d8:	movs	r3, #0
    d9da:	str	r2, [sp, #24]
    d9dc:	str	r3, [sp, #44]	; 0x2c
    d9de:	b.n	d7c6 <_dtoa_r+0x17e>
    d9e0:	rsb	r3, r9, #0
    d9e4:	str	r3, [sp, #24]
    d9e6:	mov.w	r9, #0
    d9ea:	b.n	d7b6 <_dtoa_r+0x16e>
    d9ec:	ldr	r3, [sp, #20]
    d9ee:	str	r3, [sp, #56]	; 0x38
    d9f0:	ldr	r6, [sp, #36]	; 0x24
    d9f2:	ldr	r3, [sp, #24]
    d9f4:	str	r3, [sp, #40]	; 0x28
    d9f6:	ldr	r1, [sp, #40]	; 0x28
    d9f8:	mov	r3, r1
    d9fa:	cbz	r1, da16 <_dtoa_r+0x3ce>
    d9fc:	cmp.w	r9, #0
    da00:	ble.n	da16 <_dtoa_r+0x3ce>
    da02:	cmp	r1, r9
    da04:	ldr	r2, [sp, #24]
    da06:	it	ge
    da08:	movge	r3, r9
    da0a:	subs	r2, r2, r3
    da0c:	str	r2, [sp, #24]
    da0e:	subs	r2, r1, r3
    da10:	str	r2, [sp, #40]	; 0x28
    da12:	rsb	r9, r3, r9
    da16:	ldr	r3, [sp, #20]
    da18:	cmp	r3, #0
    da1a:	ble.w	df1e <_dtoa_r+0x8d6>
    da1e:	ldr	r2, [sp, #36]	; 0x24
    da20:	cmp	r2, #0
    da22:	beq.w	dd5a <_dtoa_r+0x712>
    da26:	ldr	r2, [sp, #56]	; 0x38
    da28:	cmp	r2, #0
    da2a:	beq.w	dd5a <_dtoa_r+0x712>
    da2e:	mov	r1, r6
    da30:	mov	r0, r4
    da32:	bl	f090 <__pow5mult>
    da36:	ldr	r2, [sp, #28]
    da38:	mov	r1, r0
    da3a:	mov	r6, r0
    da3c:	mov	r0, r4
    da3e:	bl	ef60 <__multiply>
    da42:	ldr	r1, [sp, #28]
    da44:	mov	r5, r0
    da46:	mov	r0, r4
    da48:	bl	ed84 <_Bfree>
    da4c:	ldr	r3, [sp, #20]
    da4e:	ldr	r2, [sp, #56]	; 0x38
    da50:	subs	r3, r3, r2
    da52:	str	r3, [sp, #20]
    da54:	bne.w	dd58 <_dtoa_r+0x710>
    da58:	movs	r1, #1
    da5a:	mov	r0, r4
    da5c:	bl	ef4c <__i2b>
    da60:	ldr	r3, [sp, #44]	; 0x2c
    da62:	str	r0, [sp, #20]
    da64:	cmp	r3, #0
    da66:	beq.w	ddc2 <_dtoa_r+0x77a>
    da6a:	mov	r1, r0
    da6c:	mov	r2, r3
    da6e:	mov	r0, r4
    da70:	bl	f090 <__pow5mult>
    da74:	ldr	r3, [sp, #4]
    da76:	str	r0, [sp, #20]
    da78:	cmp	r3, #1
    da7a:	ble.w	df7e <_dtoa_r+0x936>
    da7e:	movs	r3, #0
    da80:	str	r3, [sp, #28]
    da82:	ldr	r2, [sp, #20]
    da84:	ldr	r3, [r2, #16]
    da86:	add.w	r3, r2, r3, lsl #2
    da8a:	ldr	r0, [r3, #16]
    da8c:	bl	eeb0 <__hi0bits>
    da90:	rsb	r0, r0, #32
    da94:	add	r0, r9
    da96:	ands.w	r0, r0, #31
    da9a:	beq.w	ddbe <_dtoa_r+0x776>
    da9e:	rsb	r3, r0, #32
    daa2:	cmp	r3, #4
    daa4:	ble.w	e298 <_dtoa_r+0xc50>
    daa8:	rsb	r0, r0, #28
    daac:	ldr	r3, [sp, #24]
    daae:	add	r3, r0
    dab0:	str	r3, [sp, #24]
    dab2:	ldr	r3, [sp, #40]	; 0x28
    dab4:	add	r3, r0
    dab6:	str	r3, [sp, #40]	; 0x28
    dab8:	add	r9, r0
    daba:	ldr	r3, [sp, #24]
    dabc:	cmp	r3, #0
    dabe:	ble.n	dacc <_dtoa_r+0x484>
    dac0:	mov	r1, r5
    dac2:	mov	r2, r3
    dac4:	mov	r0, r4
    dac6:	bl	f130 <__lshift>
    daca:	mov	r5, r0
    dacc:	cmp.w	r9, #0
    dad0:	ble.n	dade <_dtoa_r+0x496>
    dad2:	mov	r2, r9
    dad4:	ldr	r1, [sp, #20]
    dad6:	mov	r0, r4
    dad8:	bl	f130 <__lshift>
    dadc:	str	r0, [sp, #20]
    dade:	ldr	r3, [sp, #48]	; 0x30
    dae0:	cmp	r3, #0
    dae2:	bne.w	dee8 <_dtoa_r+0x8a0>
    dae6:	cmp	r7, #0
    dae8:	ble.w	df2c <_dtoa_r+0x8e4>
    daec:	ldr	r3, [sp, #36]	; 0x24
    daee:	cmp	r3, #0
    daf0:	bne.w	ddea <_dtoa_r+0x7a2>
    daf4:	ldr.w	fp, [sp, #32]
    daf8:	ldr.w	sl, [sp, #20]
    dafc:	mov	r8, fp
    dafe:	b.n	db06 <_dtoa_r+0x4be>
    db00:	bl	ed98 <__multadd>
    db04:	mov	r5, r0
    db06:	mov	r1, sl
    db08:	mov	r0, r5
    db0a:	bl	d51c <quorem>
    db0e:	add.w	r9, r0, #48	; 0x30
    db12:	strb.w	r9, [r8], #1
    db16:	rsb	r3, fp, r8
    db1a:	cmp	r3, r7
    db1c:	mov.w	r2, #10
    db20:	mov.w	r3, #0
    db24:	mov	r1, r5
    db26:	mov	r0, r4
    db28:	blt.n	db00 <_dtoa_r+0x4b8>
    db2a:	ldr	r3, [sp, #32]
    db2c:	cmp	r7, #1
    db2e:	ite	ge
    db30:	addge	r3, r3, r7
    db32:	addlt	r3, #1
    db34:	mov	fp, r3
    db36:	mov.w	sl, #0
    db3a:	mov	r1, r5
    db3c:	movs	r2, #1
    db3e:	mov	r0, r4
    db40:	bl	f130 <__lshift>
    db44:	ldr	r1, [sp, #20]
    db46:	str	r0, [sp, #28]
    db48:	bl	f1e0 <__mcmp>
    db4c:	cmp	r0, #0
    db4e:	ble.w	e06a <_dtoa_r+0xa22>
    db52:	ldrb.w	r2, [fp, #-1]
    db56:	ldr	r1, [sp, #32]
    db58:	add.w	r3, fp, #4294967295
    db5c:	b.n	db68 <_dtoa_r+0x520>
    db5e:	cmp	r3, r1
    db60:	beq.w	df6a <_dtoa_r+0x922>
    db64:	ldrb.w	r2, [r3, #-1]!
    db68:	cmp	r2, #57	; 0x39
    db6a:	add.w	fp, r3, #1
    db6e:	beq.n	db5e <_dtoa_r+0x516>
    db70:	adds	r2, #1
    db72:	strb	r2, [r3, #0]
    db74:	ldr	r1, [sp, #20]
    db76:	mov	r0, r4
    db78:	bl	ed84 <_Bfree>
    db7c:	cmp	r6, #0
    db7e:	beq.w	d914 <_dtoa_r+0x2cc>
    db82:	cmp.w	sl, #0
    db86:	beq.n	db94 <_dtoa_r+0x54c>
    db88:	cmp	sl, r6
    db8a:	beq.n	db94 <_dtoa_r+0x54c>
    db8c:	mov	r1, sl
    db8e:	mov	r0, r4
    db90:	bl	ed84 <_Bfree>
    db94:	mov	r1, r6
    db96:	mov	r0, r4
    db98:	bl	ed84 <_Bfree>
    db9c:	b.n	d914 <_dtoa_r+0x2cc>
    db9e:	rsb	r3, r3, #32
    dba2:	lsl.w	r3, sl, r3
    dba6:	vmov	s15, r3
    dbaa:	b.n	d730 <_dtoa_r+0xe8>
    dbac:	movs	r3, #0
    dbae:	str	r3, [sp, #48]	; 0x30
    dbb0:	b.n	d7a8 <_dtoa_r+0x160>
    dbb2:	movs	r3, #0
    dbb4:	str	r3, [sp, #36]	; 0x24
    dbb6:	ldr	r3, [sp, #8]
    dbb8:	add	r3, r8
    dbba:	adds	r7, r3, #1
    dbbc:	cmp	r7, #0
    dbbe:	str	r3, [sp, #52]	; 0x34
    dbc0:	ble.w	e01e <_dtoa_r+0x9d6>
    dbc4:	mov	r6, r7
    dbc6:	mov	r5, r7
    dbc8:	movs	r1, #0
    dbca:	cmp	r6, #23
    dbcc:	str	r1, [r4, #68]	; 0x44
    dbce:	bls.n	dbe6 <_dtoa_r+0x59e>
    dbd0:	movs	r2, #1
    dbd2:	movs	r3, #4
    dbd4:	lsls	r3, r3, #1
    dbd6:	add.w	r0, r3, #20
    dbda:	cmp	r0, r6
    dbdc:	mov	r1, r2
    dbde:	add.w	r2, r2, #1
    dbe2:	bls.n	dbd4 <_dtoa_r+0x58c>
    dbe4:	str	r1, [r4, #68]	; 0x44
    dbe6:	mov	r0, r4
    dbe8:	bl	ed38 <_Balloc>
    dbec:	cmp	r5, #14
    dbee:	str	r0, [sp, #32]
    dbf0:	str	r0, [r4, #64]	; 0x40
    dbf2:	bhi.w	d842 <_dtoa_r+0x1fa>
    dbf6:	ldr	r3, [sp, #56]	; 0x38
    dbf8:	cmp	r3, #0
    dbfa:	beq.w	d842 <_dtoa_r+0x1fa>
    dbfe:	ldr	r1, [sp, #8]
    dc00:	cmp	r1, #0
    dc02:	strd	sl, fp, [sp, #56]	; 0x38
    dc06:	ble.w	e08c <_dtoa_r+0xa44>
    dc0a:	ldr	r3, [pc, #792]	; (df24 <_dtoa_r+0x8dc>)
    dc0c:	and.w	r2, r1, #15
    dc10:	add.w	r2, r3, r2, lsl #3
    dc14:	asrs	r3, r1, #4
    dc16:	lsls	r6, r3, #27
    dc18:	vldr	d6, [r2]
    dc1c:	bpl.w	e016 <_dtoa_r+0x9ce>
    dc20:	ldr	r2, [pc, #772]	; (df28 <_dtoa_r+0x8e0>)
    dc22:	vldr	d7, [r2, #32]
    dc26:	vmov	d4, sl, fp
    dc2a:	and.w	r3, r3, #15
    dc2e:	movs	r1, #3
    dc30:	vdiv.f64	d5, d4, d7
    dc34:	cbz	r3, dc4e <_dtoa_r+0x606>
    dc36:	ldr	r2, [pc, #752]	; (df28 <_dtoa_r+0x8e0>)
    dc38:	lsls	r5, r3, #31
    dc3a:	bpl.n	dc46 <_dtoa_r+0x5fe>
    dc3c:	vldr	d7, [r2]
    dc40:	adds	r1, #1
    dc42:	vmul.f64	d6, d6, d7
    dc46:	asrs	r3, r3, #1
    dc48:	add.w	r2, r2, #8
    dc4c:	bne.n	dc38 <_dtoa_r+0x5f0>
    dc4e:	vdiv.f64	d4, d5, d6
    dc52:	ldr	r3, [sp, #48]	; 0x30
    dc54:	cbz	r3, dc66 <_dtoa_r+0x61e>
    dc56:	vmov.f64	d7, #112	; 0x3f800000  1.0
    dc5a:	vcmpe.f64	d4, d7
    dc5e:	vmrs	APSR_nzcv, fpscr
    dc62:	bmi.w	e1d4 <_dtoa_r+0xb8c>
    dc66:	vmov	s15, r1
    dc6a:	vcvt.f64.s32	d6, s15
    dc6e:	vmov.f64	d7, #28	; 0x40e00000  7.0
    dc72:	vfma.f64	d7, d6, d4
    dc76:	vmov	r2, r3, d7
    dc7a:	sub.w	r3, r3, #54525952	; 0x3400000
    dc7e:	cmp	r7, #0
    dc80:	beq.w	dfd0 <_dtoa_r+0x988>
    dc84:	ldr	r6, [sp, #8]
    dc86:	mov	r1, r7
    dc88:	ldr	r0, [sp, #36]	; 0x24
    dc8a:	cmp	r0, #0
    dc8c:	beq.w	e12a <_dtoa_r+0xae2>
    dc90:	vmov.f64	d3, #96	; 0x3f000000  0.5
    dc94:	ldr	r0, [pc, #652]	; (df24 <_dtoa_r+0x8dc>)
    dc96:	ldr	r5, [sp, #32]
    dc98:	add.w	r0, r0, r1, lsl #3
    dc9c:	vldr	d6, [r0, #-8]
    dca0:	vcvt.s32.f64	s14, d4
    dca4:	vdiv.f64	d5, d3, d6
    dca8:	vmov	r0, s14
    dcac:	vmov	d6, r2, r3
    dcb0:	adds	r0, #48	; 0x30
    dcb2:	uxtb	r0, r0
    dcb4:	vsub.f64	d5, d5, d6
    dcb8:	vcvt.f64.s32	d7, s14
    dcbc:	vsub.f64	d7, d4, d7
    dcc0:	vcmpe.f64	d5, d7
    dcc4:	vmrs	APSR_nzcv, fpscr
    dcc8:	strb	r0, [r5, #0]
    dcca:	add.w	fp, r5, #1
    dcce:	bgt.n	dd36 <_dtoa_r+0x6ee>
    dcd0:	vmov.f64	d3, #112	; 0x3f800000  1.0
    dcd4:	vsub.f64	d6, d3, d7
    dcd8:	vcmpe.f64	d5, d6
    dcdc:	vmrs	APSR_nzcv, fpscr
    dce0:	bgt.w	e240 <_dtoa_r+0xbf8>
    dce4:	cmp	r1, #1
    dce6:	ble.w	e084 <_dtoa_r+0xa3c>
    dcea:	vmov.f64	d4, #36	; 0x41200000  10.0
    dcee:	ldr	r3, [sp, #32]
    dcf0:	add	r1, r3
    dcf2:	b.n	dd0a <_dtoa_r+0x6c2>
    dcf4:	vsub.f64	d6, d3, d7
    dcf8:	vcmpe.f64	d6, d5
    dcfc:	vmrs	APSR_nzcv, fpscr
    dd00:	bmi.w	e240 <_dtoa_r+0xbf8>
    dd04:	cmp	fp, r1
    dd06:	beq.w	e084 <_dtoa_r+0xa3c>
    dd0a:	vmul.f64	d7, d7, d4
    dd0e:	vmul.f64	d5, d5, d4
    dd12:	vcvt.s32.f64	s12, d7
    dd16:	vmov	r3, s12
    dd1a:	add.w	r0, r3, #48	; 0x30
    dd1e:	uxtb	r0, r0
    dd20:	vcvt.f64.s32	d6, s12
    dd24:	vsub.f64	d7, d7, d6
    dd28:	vcmpe.f64	d7, d5
    dd2c:	vmrs	APSR_nzcv, fpscr
    dd30:	strb.w	r0, [fp], #1
    dd34:	bpl.n	dcf4 <_dtoa_r+0x6ac>
    dd36:	str	r6, [sp, #8]
    dd38:	b.n	d914 <_dtoa_r+0x2cc>
    dd3a:	movs	r3, #0
    dd3c:	str	r3, [sp, #36]	; 0x24
    dd3e:	cmp.w	r8, #0
    dd42:	ble.w	e026 <_dtoa_r+0x9de>
    dd46:	mov	r6, r8
    dd48:	mov	r5, r8
    dd4a:	str.w	r8, [sp, #52]	; 0x34
    dd4e:	mov	r7, r8
    dd50:	b.n	dbc8 <_dtoa_r+0x580>
    dd52:	movs	r3, #1
    dd54:	str	r3, [sp, #36]	; 0x24
    dd56:	b.n	dd3e <_dtoa_r+0x6f6>
    dd58:	str	r5, [sp, #28]
    dd5a:	ldr	r2, [sp, #20]
    dd5c:	ldr	r1, [sp, #28]
    dd5e:	mov	r0, r4
    dd60:	bl	f090 <__pow5mult>
    dd64:	mov	r5, r0
    dd66:	b.n	da58 <_dtoa_r+0x410>
    dd68:	cmp	r7, #0
    dd6a:	bgt.w	d860 <_dtoa_r+0x218>
    dd6e:	bne.w	dff6 <_dtoa_r+0x9ae>
    dd72:	vmov.f64	d7, #20	; 0x40a00000  5.0
    dd76:	vmul.f64	d4, d4, d7
    dd7a:	vmov	d7, sl, fp
    dd7e:	vcmpe.f64	d4, d7
    dd82:	vmrs	APSR_nzcv, fpscr
    dd86:	mov	r6, r7
    dd88:	str	r7, [sp, #20]
    dd8a:	blt.w	df58 <_dtoa_r+0x910>
    dd8e:	mvn.w	r3, r8
    dd92:	ldr.w	fp, [sp, #32]
    dd96:	str	r3, [sp, #8]
    dd98:	ldr	r1, [sp, #20]
    dd9a:	mov	r0, r4
    dd9c:	bl	ed84 <_Bfree>
    dda0:	cmp	r6, #0
    dda2:	beq.w	d914 <_dtoa_r+0x2cc>
    dda6:	b.n	db94 <_dtoa_r+0x54c>
    dda8:	ldr	r2, [sp, #40]	; 0x28
    ddaa:	cmp	r2, #0
    ddac:	beq.w	e1b4 <_dtoa_r+0xb6c>
    ddb0:	ldr	r2, [sp, #20]
    ddb2:	str	r2, [sp, #56]	; 0x38
    ddb4:	ldr	r2, [sp, #24]
    ddb6:	str	r2, [sp, #40]	; 0x28
    ddb8:	addw	r3, r3, #1075	; 0x433
    ddbc:	b.n	d966 <_dtoa_r+0x31e>
    ddbe:	movs	r0, #28
    ddc0:	b.n	daac <_dtoa_r+0x464>
    ddc2:	ldr	r3, [sp, #4]
    ddc4:	cmp	r3, #1
    ddc6:	ble.w	e24a <_dtoa_r+0xc02>
    ddca:	ldr	r3, [sp, #44]	; 0x2c
    ddcc:	str	r3, [sp, #28]
    ddce:	movs	r0, #1
    ddd0:	b.n	da94 <_dtoa_r+0x44c>
    ddd2:	mov	r1, r6
    ddd4:	movs	r3, #0
    ddd6:	movs	r2, #10
    ddd8:	mov	r0, r4
    ddda:	bl	ed98 <__multadd>
    ddde:	ldr	r3, [sp, #52]	; 0x34
    dde0:	cmp	r3, #0
    dde2:	mov	r6, r0
    dde4:	ble.w	e282 <_dtoa_r+0xc3a>
    dde8:	mov	r7, r3
    ddea:	ldr	r3, [sp, #40]	; 0x28
    ddec:	cmp	r3, #0
    ddee:	ble.n	ddfc <_dtoa_r+0x7b4>
    ddf0:	mov	r1, r6
    ddf2:	mov	r2, r3
    ddf4:	mov	r0, r4
    ddf6:	bl	f130 <__lshift>
    ddfa:	mov	r6, r0
    ddfc:	ldr	r3, [sp, #28]
    ddfe:	cmp	r3, #0
    de00:	bne.w	e0e0 <_dtoa_r+0xa98>
    de04:	mov	r8, r6
    de06:	ldr	r3, [sp, #32]
    de08:	subs	r7, #1
    de0a:	adds	r2, r3, r7
    de0c:	str	r2, [sp, #36]	; 0x24
    de0e:	and.w	r2, sl, #1
    de12:	str	r2, [sp, #40]	; 0x28
    de14:	mov	r7, r3
    de16:	ldr.w	fp, [sp, #20]
    de1a:	mov	r0, r5
    de1c:	mov	r1, fp
    de1e:	bl	d51c <quorem>
    de22:	mov	r1, r6
    de24:	mov	sl, r0
    de26:	mov	r0, r5
    de28:	bl	f1e0 <__mcmp>
    de2c:	mov	r2, r8
    de2e:	mov	r1, fp
    de30:	mov	r9, r0
    de32:	mov	r0, r4
    de34:	bl	f224 <__mdiff>
    de38:	ldr	r3, [r0, #12]
    de3a:	mov	fp, r0
    de3c:	add.w	r2, sl, #48	; 0x30
    de40:	cmp	r3, #0
    de42:	bne.n	ded8 <_dtoa_r+0x890>
    de44:	mov	r1, r0
    de46:	mov	r0, r5
    de48:	str	r2, [sp, #28]
    de4a:	bl	f1e0 <__mcmp>
    de4e:	mov	r1, fp
    de50:	str	r0, [sp, #24]
    de52:	mov	r0, r4
    de54:	bl	ed84 <_Bfree>
    de58:	ldr	r3, [sp, #24]
    de5a:	ldr	r2, [sp, #28]
    de5c:	cbnz	r3, de6a <_dtoa_r+0x822>
    de5e:	ldr	r1, [sp, #4]
    de60:	cbnz	r1, de6a <_dtoa_r+0x822>
    de62:	ldr	r1, [sp, #40]	; 0x28
    de64:	cmp	r1, #0
    de66:	beq.w	e254 <_dtoa_r+0xc0c>
    de6a:	cmp.w	r9, #0
    de6e:	blt.w	e030 <_dtoa_r+0x9e8>
    de72:	bne.n	de80 <_dtoa_r+0x838>
    de74:	ldr	r1, [sp, #4]
    de76:	cbnz	r1, de80 <_dtoa_r+0x838>
    de78:	ldr	r1, [sp, #40]	; 0x28
    de7a:	cmp	r1, #0
    de7c:	beq.w	e030 <_dtoa_r+0x9e8>
    de80:	cmp	r3, #0
    de82:	bgt.w	e108 <_dtoa_r+0xac0>
    de86:	ldr	r3, [sp, #36]	; 0x24
    de88:	strb	r2, [r7, #0]
    de8a:	add.w	r9, r7, #1
    de8e:	cmp	r7, r3
    de90:	mov	fp, r9
    de92:	beq.w	e122 <_dtoa_r+0xada>
    de96:	mov	r1, r5
    de98:	movs	r3, #0
    de9a:	movs	r2, #10
    de9c:	mov	r0, r4
    de9e:	bl	ed98 <__multadd>
    dea2:	cmp	r6, r8
    dea4:	mov	r5, r0
    dea6:	mov	r1, r6
    dea8:	mov.w	r3, #0
    deac:	mov.w	r2, #10
    deb0:	mov	r0, r4
    deb2:	beq.n	decc <_dtoa_r+0x884>
    deb4:	bl	ed98 <__multadd>
    deb8:	mov	r1, r8
    deba:	mov	r6, r0
    debc:	movs	r3, #0
    debe:	movs	r2, #10
    dec0:	mov	r0, r4
    dec2:	bl	ed98 <__multadd>
    dec6:	mov	r7, r9
    dec8:	mov	r8, r0
    deca:	b.n	de16 <_dtoa_r+0x7ce>
    decc:	bl	ed98 <__multadd>
    ded0:	mov	r7, r9
    ded2:	mov	r6, r0
    ded4:	mov	r8, r0
    ded6:	b.n	de16 <_dtoa_r+0x7ce>
    ded8:	mov	r1, r0
    deda:	mov	r0, r4
    dedc:	str	r2, [sp, #24]
    dede:	bl	ed84 <_Bfree>
    dee2:	movs	r3, #1
    dee4:	ldr	r2, [sp, #24]
    dee6:	b.n	de6a <_dtoa_r+0x822>
    dee8:	ldr	r1, [sp, #20]
    deea:	mov	r0, r5
    deec:	bl	f1e0 <__mcmp>
    def0:	cmp	r0, #0
    def2:	bge.w	dae6 <_dtoa_r+0x49e>
    def6:	mov	r1, r5
    def8:	ldr	r5, [sp, #8]
    defa:	movs	r3, #0
    defc:	subs	r5, #1
    defe:	movs	r2, #10
    df00:	mov	r0, r4
    df02:	str	r5, [sp, #8]
    df04:	bl	ed98 <__multadd>
    df08:	ldr	r3, [sp, #36]	; 0x24
    df0a:	mov	r5, r0
    df0c:	cmp	r3, #0
    df0e:	bne.w	ddd2 <_dtoa_r+0x78a>
    df12:	ldr	r3, [sp, #52]	; 0x34
    df14:	cmp	r3, #0
    df16:	ble.w	e274 <_dtoa_r+0xc2c>
    df1a:	mov	r7, r3
    df1c:	b.n	daf4 <_dtoa_r+0x4ac>
    df1e:	ldr	r5, [sp, #28]
    df20:	b.n	da58 <_dtoa_r+0x410>
    df22:	nop
    df24:	.word	0x200002a8
    df28:	.word	0x20000280
    df2c:	ldr	r3, [sp, #4]
    df2e:	cmp	r3, #2
    df30:	ble.w	daec <_dtoa_r+0x4a4>
    df34:	cmp	r7, #0
    df36:	bne.w	e20c <_dtoa_r+0xbc4>
    df3a:	mov	r3, r7
    df3c:	ldr	r1, [sp, #20]
    df3e:	movs	r2, #5
    df40:	mov	r0, r4
    df42:	bl	ed98 <__multadd>
    df46:	mov	r1, r0
    df48:	str	r0, [sp, #20]
    df4a:	mov	r0, r5
    df4c:	bl	f1e0 <__mcmp>
    df50:	cmp	r0, #0
    df52:	str	r5, [sp, #28]
    df54:	ble.w	dd8e <_dtoa_r+0x746>
    df58:	ldr	r2, [sp, #8]
    df5a:	ldr	r1, [sp, #32]
    df5c:	movs	r3, #49	; 0x31
    df5e:	adds	r2, #1
    df60:	str	r2, [sp, #8]
    df62:	strb	r3, [r1, #0]
    df64:	add.w	fp, r1, #1
    df68:	b.n	dd98 <_dtoa_r+0x750>
    df6a:	ldr	r2, [sp, #8]
    df6c:	adds	r2, #1
    df6e:	str	r2, [sp, #8]
    df70:	ldr	r2, [sp, #32]
    df72:	movs	r3, #49	; 0x31
    df74:	strb	r3, [r2, #0]
    df76:	b.n	db74 <_dtoa_r+0x52c>
    df78:	movs	r3, #1
    df7a:	str	r3, [sp, #36]	; 0x24
    df7c:	b.n	dbb6 <_dtoa_r+0x56e>
    df7e:	cmp.w	sl, #0
    df82:	bne.w	da7e <_dtoa_r+0x436>
    df86:	ubfx	r3, fp, #0, #20
    df8a:	cmp	r3, #0
    df8c:	bne.w	e1c6 <_dtoa_r+0xb7e>
    df90:	bic.w	r3, fp, #2147483648	; 0x80000000
    df94:	lsrs	r3, r3, #20
    df96:	lsls	r3, r3, #20
    df98:	cmp	r3, #0
    df9a:	beq.w	e246 <_dtoa_r+0xbfe>
    df9e:	ldr	r3, [sp, #24]
    dfa0:	adds	r3, #1
    dfa2:	str	r3, [sp, #24]
    dfa4:	movs	r3, #1
    dfa6:	add.w	r9, r9, #1
    dfaa:	str	r3, [sp, #28]
    dfac:	ldr	r3, [sp, #44]	; 0x2c
    dfae:	movs	r0, #1
    dfb0:	cmp	r3, #0
    dfb2:	beq.w	da94 <_dtoa_r+0x44c>
    dfb6:	b.n	da82 <_dtoa_r+0x43a>
    dfb8:	vmov	s15, r1
    dfbc:	vcvt.f64.s32	d6, s15
    dfc0:	vmov.f64	d7, #28	; 0x40e00000  7.0
    dfc4:	vfma.f64	d7, d4, d6
    dfc8:	vmov	r2, r3, d7
    dfcc:	sub.w	r3, r3, #54525952	; 0x3400000
    dfd0:	vmov	d6, r2, r3
    dfd4:	vmov.f64	d7, #20	; 0x40a00000  5.0
    dfd8:	vsub.f64	d7, d4, d7
    dfdc:	vcmpe.f64	d7, d6
    dfe0:	vmrs	APSR_nzcv, fpscr
    dfe4:	bgt.w	e1a2 <_dtoa_r+0xb5a>
    dfe8:	vneg.f64	d6, d6
    dfec:	vcmpe.f64	d7, d6
    dff0:	vmrs	APSR_nzcv, fpscr
    dff4:	bpl.n	e084 <_dtoa_r+0xa3c>
    dff6:	movs	r3, #0
    dff8:	str	r3, [sp, #20]
    dffa:	mov	r6, r3
    dffc:	b.n	dd8e <_dtoa_r+0x746>
    dffe:	ldr	r0, [sp, #32]
    e000:	b.w	d6b6 <_dtoa_r+0x6e>
    e004:	ldr	r3, [sp, #20]
    e006:	ldr	r1, [sp, #44]	; 0x2c
    e008:	str	r2, [sp, #20]
    e00a:	subs	r3, r2, r3
    e00c:	add	r1, r3
    e00e:	movs	r3, #0
    e010:	str	r1, [sp, #44]	; 0x2c
    e012:	str	r3, [sp, #56]	; 0x38
    e014:	b.n	d95a <_dtoa_r+0x312>
    e016:	vldr	d5, [sp, #56]	; 0x38
    e01a:	movs	r1, #2
    e01c:	b.n	dc34 <_dtoa_r+0x5ec>
    e01e:	mov	r5, r7
    e020:	movs	r1, #0
    e022:	str	r1, [r4, #68]	; 0x44
    e024:	b.n	dbe6 <_dtoa_r+0x59e>
    e026:	movs	r5, #1
    e028:	str	r5, [sp, #52]	; 0x34
    e02a:	mov	r7, r5
    e02c:	mov	r8, r5
    e02e:	b.n	e020 <_dtoa_r+0x9d8>
    e030:	cmp	r3, #0
    e032:	mov	r9, r2
    e034:	ble.n	e05a <_dtoa_r+0xa12>
    e036:	mov	r1, r5
    e038:	movs	r2, #1
    e03a:	mov	r0, r4
    e03c:	bl	f130 <__lshift>
    e040:	ldr	r1, [sp, #20]
    e042:	mov	r5, r0
    e044:	bl	f1e0 <__mcmp>
    e048:	cmp	r0, #0
    e04a:	ble.w	e266 <_dtoa_r+0xc1e>
    e04e:	cmp.w	r9, #57	; 0x39
    e052:	beq.w	e210 <_dtoa_r+0xbc8>
    e056:	add.w	r9, sl, #49	; 0x31
    e05a:	mov	sl, r6
    e05c:	strb.w	r9, [r7]
    e060:	add.w	fp, r7, #1
    e064:	mov	r6, r8
    e066:	str	r5, [sp, #28]
    e068:	b.n	db74 <_dtoa_r+0x52c>
    e06a:	bne.n	e076 <_dtoa_r+0xa2e>
    e06c:	tst.w	r9, #1
    e070:	beq.n	e076 <_dtoa_r+0xa2e>
    e072:	b.n	db52 <_dtoa_r+0x50a>
    e074:	mov	fp, r2
    e076:	ldrb.w	r3, [fp, #-1]
    e07a:	cmp	r3, #48	; 0x30
    e07c:	add.w	r2, fp, #4294967295
    e080:	beq.n	e074 <_dtoa_r+0xa2c>
    e082:	b.n	db74 <_dtoa_r+0x52c>
    e084:	ldrd	sl, fp, [sp, #56]	; 0x38
    e088:	b.w	d842 <_dtoa_r+0x1fa>
    e08c:	ldr	r3, [sp, #8]
    e08e:	negs	r3, r3
    e090:	cmp	r3, #0
    e092:	beq.w	e1cc <_dtoa_r+0xb84>
    e096:	ldr	r2, [pc, #556]	; (e2c4 <_dtoa_r+0xc7c>)
    e098:	and.w	r1, r3, #15
    e09c:	add.w	r2, r2, r1, lsl #3
    e0a0:	vldr	d7, [r2]
    e0a4:	vldr	d6, [sp, #56]	; 0x38
    e0a8:	asrs	r3, r3, #4
    e0aa:	vmul.f64	d4, d6, d7
    e0ae:	beq.w	e27e <_dtoa_r+0xc36>
    e0b2:	ldr	r2, [pc, #532]	; (e2c8 <_dtoa_r+0xc80>)
    e0b4:	movs	r1, #2
    e0b6:	lsls	r0, r3, #31
    e0b8:	bpl.n	e0c4 <_dtoa_r+0xa7c>
    e0ba:	vldr	d7, [r2]
    e0be:	adds	r1, #1
    e0c0:	vmul.f64	d4, d4, d7
    e0c4:	asrs	r3, r3, #1
    e0c6:	add.w	r2, r2, #8
    e0ca:	bne.n	e0b6 <_dtoa_r+0xa6e>
    e0cc:	b.n	dc52 <_dtoa_r+0x60a>
    e0ce:	ldr	r1, [sp, #32]
    e0d0:	movs	r2, #48	; 0x30
    e0d2:	strb	r2, [r1, #0]
    e0d4:	ldr	r2, [sp, #8]
    e0d6:	ldrb.w	r0, [fp, #-1]
    e0da:	adds	r2, #1
    e0dc:	str	r2, [sp, #8]
    e0de:	b.n	d910 <_dtoa_r+0x2c8>
    e0e0:	ldr	r1, [r6, #4]
    e0e2:	mov	r0, r4
    e0e4:	bl	ed38 <_Balloc>
    e0e8:	ldr	r3, [r6, #16]
    e0ea:	adds	r2, r3, #2
    e0ec:	mov	r8, r0
    e0ee:	lsls	r2, r2, #2
    e0f0:	add.w	r1, r6, #12
    e0f4:	adds	r0, #12
    e0f6:	bl	69a8 <memcpy>
    e0fa:	mov	r1, r8
    e0fc:	movs	r2, #1
    e0fe:	mov	r0, r4
    e100:	bl	f130 <__lshift>
    e104:	mov	r8, r0
    e106:	b.n	de06 <_dtoa_r+0x7be>
    e108:	cmp	r2, #57	; 0x39
    e10a:	beq.w	e210 <_dtoa_r+0xbc8>
    e10e:	add.w	r9, r2, #1
    e112:	mov	sl, r6
    e114:	strb.w	r9, [r7]
    e118:	add.w	fp, r7, #1
    e11c:	mov	r6, r8
    e11e:	str	r5, [sp, #28]
    e120:	b.n	db74 <_dtoa_r+0x52c>
    e122:	mov	sl, r6
    e124:	mov	r9, r2
    e126:	mov	r6, r8
    e128:	b.n	db3a <_dtoa_r+0x4f2>
    e12a:	ldr	r0, [pc, #408]	; (e2c4 <_dtoa_r+0xc7c>)
    e12c:	vcvt.s32.f64	s12, d4
    e130:	subs	r5, r1, #1
    e132:	add.w	r0, r0, r5, lsl #3
    e136:	vmov	d7, r2, r3
    e13a:	vldr	d3, [r0]
    e13e:	vmov	r3, s12
    e142:	vmul.f64	d3, d3, d7
    e146:	ldr	r0, [sp, #32]
    e148:	adds	r3, #48	; 0x30
    e14a:	cmp	r1, #1
    e14c:	vcvt.f64.s32	d6, s12
    e150:	strb	r3, [r0, #0]
    e152:	add.w	fp, r0, #1
    e156:	vsub.f64	d7, d4, d6
    e15a:	beq.n	e186 <_dtoa_r+0xb3e>
    e15c:	vmov.f64	d5, #36	; 0x41200000  10.0
    e160:	ldr	r3, [sp, #32]
    e162:	add	r1, r3
    e164:	mov	r3, fp
    e166:	vmul.f64	d7, d7, d5
    e16a:	vcvt.s32.f64	s12, d7
    e16e:	vmov	r2, s12
    e172:	adds	r2, #48	; 0x30
    e174:	strb.w	r2, [r3], #1
    e178:	cmp	r1, r3
    e17a:	vcvt.f64.s32	d6, s12
    e17e:	vsub.f64	d7, d7, d6
    e182:	bne.n	e166 <_dtoa_r+0xb1e>
    e184:	add	fp, r5
    e186:	vmov.f64	d6, #96	; 0x3f000000  0.5
    e18a:	vadd.f64	d5, d3, d6
    e18e:	vcmpe.f64	d5, d7
    e192:	vmrs	APSR_nzcv, fpscr
    e196:	bpl.n	e220 <_dtoa_r+0xbd8>
    e198:	str	r6, [sp, #8]
    e19a:	ldrb.w	r0, [fp, #-1]
    e19e:	b.w	d8f6 <_dtoa_r+0x2ae>
    e1a2:	movs	r3, #0
    e1a4:	str	r3, [sp, #20]
    e1a6:	mov	r6, r3
    e1a8:	b.n	df58 <_dtoa_r+0x910>
    e1aa:	subs	r3, r3, r7
    e1ac:	str	r3, [sp, #40]	; 0x28
    e1ae:	movs	r3, #0
    e1b0:	b.w	d966 <_dtoa_r+0x31e>
    e1b4:	ldr	r2, [sp, #20]
    e1b6:	ldr	r3, [sp, #64]	; 0x40
    e1b8:	str	r2, [sp, #56]	; 0x38
    e1ba:	ldr	r2, [sp, #24]
    e1bc:	str	r2, [sp, #40]	; 0x28
    e1be:	rsb	r3, r3, #54	; 0x36
    e1c2:	b.w	d966 <_dtoa_r+0x31e>
    e1c6:	movs	r3, #0
    e1c8:	str	r3, [sp, #28]
    e1ca:	b.n	dfac <_dtoa_r+0x964>
    e1cc:	vldr	d4, [sp, #56]	; 0x38
    e1d0:	movs	r1, #2
    e1d2:	b.n	dc52 <_dtoa_r+0x60a>
    e1d4:	cmp	r7, #0
    e1d6:	beq.w	dfb8 <_dtoa_r+0x970>
    e1da:	ldr	r0, [sp, #52]	; 0x34
    e1dc:	cmp	r0, #0
    e1de:	ble.w	e084 <_dtoa_r+0xa3c>
    e1e2:	vmov.f64	d5, #36	; 0x41200000  10.0
    e1e6:	vmov.f64	d7, #28	; 0x40e00000  7.0
    e1ea:	adds	r1, #1
    e1ec:	vmov	s13, r1
    e1f0:	vmul.f64	d4, d4, d5
    e1f4:	ldr	r3, [sp, #8]
    e1f6:	vcvt.f64.s32	d6, s13
    e1fa:	subs	r6, r3, #1
    e1fc:	vfma.f64	d7, d4, d6
    e200:	vmov	r2, r3, d7
    e204:	mov	r1, r0
    e206:	sub.w	r3, r3, #54525952	; 0x3400000
    e20a:	b.n	dc88 <_dtoa_r+0x640>
    e20c:	str	r5, [sp, #28]
    e20e:	b.n	dd8e <_dtoa_r+0x746>
    e210:	movs	r2, #57	; 0x39
    e212:	mov	sl, r6
    e214:	str	r5, [sp, #28]
    e216:	mov	r6, r8
    e218:	strb	r2, [r7, #0]
    e21a:	add.w	fp, r7, #1
    e21e:	b.n	db56 <_dtoa_r+0x50e>
    e220:	vsub.f64	d6, d6, d3
    e224:	vcmpe.f64	d6, d7
    e228:	vmrs	APSR_nzcv, fpscr
    e22c:	bgt.n	e232 <_dtoa_r+0xbea>
    e22e:	b.n	e084 <_dtoa_r+0xa3c>
    e230:	mov	fp, r2
    e232:	ldrb.w	r3, [fp, #-1]
    e236:	cmp	r3, #48	; 0x30
    e238:	add.w	r2, fp, #4294967295
    e23c:	beq.n	e230 <_dtoa_r+0xbe8>
    e23e:	b.n	dd36 <_dtoa_r+0x6ee>
    e240:	str	r6, [sp, #8]
    e242:	b.w	d8f6 <_dtoa_r+0x2ae>
    e246:	str	r3, [sp, #28]
    e248:	b.n	dfac <_dtoa_r+0x964>
    e24a:	cmp.w	sl, #0
    e24e:	bne.w	ddca <_dtoa_r+0x782>
    e252:	b.n	df86 <_dtoa_r+0x93e>
    e254:	cmp	r2, #57	; 0x39
    e256:	mov	fp, r9
    e258:	mov	r9, r2
    e25a:	beq.n	e210 <_dtoa_r+0xbc8>
    e25c:	cmp.w	fp, #0
    e260:	bgt.w	e056 <_dtoa_r+0xa0e>
    e264:	b.n	e05a <_dtoa_r+0xa12>
    e266:	bne.w	e05a <_dtoa_r+0xa12>
    e26a:	tst.w	r9, #1
    e26e:	beq.w	e05a <_dtoa_r+0xa12>
    e272:	b.n	e04e <_dtoa_r+0xa06>
    e274:	ldr	r3, [sp, #4]
    e276:	cmp	r3, #2
    e278:	bgt.n	e28c <_dtoa_r+0xc44>
    e27a:	ldr	r7, [sp, #52]	; 0x34
    e27c:	b.n	daf4 <_dtoa_r+0x4ac>
    e27e:	movs	r1, #2
    e280:	b.n	dc52 <_dtoa_r+0x60a>
    e282:	ldr	r3, [sp, #4]
    e284:	cmp	r3, #2
    e286:	bgt.n	e28c <_dtoa_r+0xc44>
    e288:	ldr	r7, [sp, #52]	; 0x34
    e28a:	b.n	ddea <_dtoa_r+0x7a2>
    e28c:	ldr	r7, [sp, #52]	; 0x34
    e28e:	b.n	df34 <_dtoa_r+0x8ec>
    e290:	movs	r3, #1
    e292:	str	r3, [sp, #56]	; 0x38
    e294:	b.w	d7da <_dtoa_r+0x192>
    e298:	beq.w	daba <_dtoa_r+0x472>
    e29c:	rsb	r0, r0, #60	; 0x3c
    e2a0:	b.n	daac <_dtoa_r+0x464>
    e2a2:	movs	r5, #0
    e2a4:	str	r5, [r4, #68]	; 0x44
    e2a6:	mov	r1, r5
    e2a8:	mov	r0, r4
    e2aa:	bl	ed38 <_Balloc>
    e2ae:	mov.w	r7, #4294967295
    e2b2:	movs	r3, #1
    e2b4:	str	r0, [sp, #32]
    e2b6:	mov	r8, r5
    e2b8:	str	r0, [r4, #64]	; 0x40
    e2ba:	str	r7, [sp, #52]	; 0x34
    e2bc:	str	r3, [sp, #36]	; 0x24
    e2be:	b.w	d842 <_dtoa_r+0x1fa>
    e2c2:	nop
    e2c4:	.word	0x200002a8
    e2c8:	.word	0x20000280

0000e2cc <_malloc_trim_r>:
    e2cc:	push	{r3, r4, r5, r6, r7, lr}
    e2ce:	ldr	r7, [pc, #140]	; (e35c <_malloc_trim_r+0x90>)
    e2d0:	mov	r4, r1
    e2d2:	mov	r6, r0
    e2d4:	bl	98a8 <__malloc_lock>
    e2d8:	ldr	r3, [r7, #8]
    e2da:	ldr	r5, [r3, #4]
    e2dc:	bic.w	r5, r5, #3
    e2e0:	subs	r1, r5, r4
    e2e2:	addw	r1, r1, #4079	; 0xfef
    e2e6:	bic.w	r1, r1, #4080	; 0xff0
    e2ea:	bic.w	r1, r1, #15
    e2ee:	sub.w	r4, r1, #4096	; 0x1000
    e2f2:	cmp.w	r4, #4096	; 0x1000
    e2f6:	blt.n	e308 <_malloc_trim_r+0x3c>
    e2f8:	movs	r1, #0
    e2fa:	mov	r0, r6
    e2fc:	bl	9c90 <_sbrk_r>
    e300:	ldr	r3, [r7, #8]
    e302:	add	r3, r5
    e304:	cmp	r0, r3
    e306:	beq.n	e312 <_malloc_trim_r+0x46>
    e308:	mov	r0, r6
    e30a:	bl	98ac <__malloc_unlock>
    e30e:	movs	r0, #0
    e310:	pop	{r3, r4, r5, r6, r7, pc}
    e312:	negs	r1, r4
    e314:	mov	r0, r6
    e316:	bl	9c90 <_sbrk_r>
    e31a:	adds	r0, #1
    e31c:	beq.n	e33a <_malloc_trim_r+0x6e>
    e31e:	ldr	r3, [pc, #64]	; (e360 <_malloc_trim_r+0x94>)
    e320:	ldr	r2, [r7, #8]
    e322:	ldr	r1, [r3, #0]
    e324:	subs	r5, r5, r4
    e326:	orr.w	r5, r5, #1
    e32a:	mov	r0, r6
    e32c:	subs	r1, r1, r4
    e32e:	str	r5, [r2, #4]
    e330:	str	r1, [r3, #0]
    e332:	bl	98ac <__malloc_unlock>
    e336:	movs	r0, #1
    e338:	pop	{r3, r4, r5, r6, r7, pc}
    e33a:	movs	r1, #0
    e33c:	mov	r0, r6
    e33e:	bl	9c90 <_sbrk_r>
    e342:	ldr	r2, [r7, #8]
    e344:	subs	r3, r0, r2
    e346:	cmp	r3, #15
    e348:	ble.n	e308 <_malloc_trim_r+0x3c>
    e34a:	ldr	r4, [pc, #24]	; (e364 <_malloc_trim_r+0x98>)
    e34c:	ldr	r1, [pc, #16]	; (e360 <_malloc_trim_r+0x94>)
    e34e:	ldr	r4, [r4, #0]
    e350:	orr.w	r3, r3, #1
    e354:	subs	r0, r0, r4
    e356:	str	r3, [r2, #4]
    e358:	str	r0, [r1, #0]
    e35a:	b.n	e308 <_malloc_trim_r+0x3c>
    e35c:	.word	0x20001d4c
    e360:	.word	0x20021c40
    e364:	.word	0x20002154

0000e368 <_free_r>:
    e368:	cmp	r1, #0
    e36a:	beq.n	e3f8 <_free_r+0x90>
    e36c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e370:	mov	r5, r1
    e372:	mov	r8, r0
    e374:	bl	98a8 <__malloc_lock>
    e378:	ldr.w	r7, [r5, #-4]
    e37c:	ldr	r1, [pc, #424]	; (e528 <_free_r+0x1c0>)
    e37e:	bic.w	r3, r7, #1
    e382:	sub.w	r4, r5, #8
    e386:	adds	r2, r4, r3
    e388:	ldr	r6, [r1, #8]
    e38a:	ldr	r0, [r2, #4]
    e38c:	cmp	r2, r6
    e38e:	bic.w	r0, r0, #3
    e392:	beq.n	e45a <_free_r+0xf2>
    e394:	lsls	r6, r7, #31
    e396:	str	r0, [r2, #4]
    e398:	bmi.n	e3b2 <_free_r+0x4a>
    e39a:	ldr.w	r7, [r5, #-8]
    e39e:	subs	r4, r4, r7
    e3a0:	add.w	lr, r1, #8
    e3a4:	ldr	r5, [r4, #8]
    e3a6:	cmp	r5, lr
    e3a8:	add	r3, r7
    e3aa:	beq.n	e48c <_free_r+0x124>
    e3ac:	ldr	r7, [r4, #12]
    e3ae:	str	r7, [r5, #12]
    e3b0:	str	r5, [r7, #8]
    e3b2:	adds	r5, r2, r0
    e3b4:	ldr	r5, [r5, #4]
    e3b6:	lsls	r5, r5, #31
    e3b8:	bpl.n	e440 <_free_r+0xd8>
    e3ba:	orr.w	r2, r3, #1
    e3be:	str	r2, [r4, #4]
    e3c0:	str	r3, [r4, r3]
    e3c2:	cmp.w	r3, #512	; 0x200
    e3c6:	bcs.n	e3fa <_free_r+0x92>
    e3c8:	lsrs	r3, r3, #3
    e3ca:	adds	r2, r3, #1
    e3cc:	ldr	r5, [r1, #4]
    e3ce:	ldr.w	r7, [r1, r2, lsl #3]
    e3d2:	str	r7, [r4, #8]
    e3d4:	movs	r0, #1
    e3d6:	asrs	r3, r3, #2
    e3d8:	lsl.w	r3, r0, r3
    e3dc:	add.w	r0, r1, r2, lsl #3
    e3e0:	orrs	r5, r3
    e3e2:	subs	r0, #8
    e3e4:	str	r0, [r4, #12]
    e3e6:	str	r5, [r1, #4]
    e3e8:	str.w	r4, [r1, r2, lsl #3]
    e3ec:	str	r4, [r7, #12]
    e3ee:	mov	r0, r8
    e3f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e3f4:	b.w	98ac <__malloc_unlock>
    e3f8:	bx	lr
    e3fa:	lsrs	r2, r3, #9
    e3fc:	cmp	r2, #4
    e3fe:	bhi.n	e4a8 <_free_r+0x140>
    e400:	lsrs	r2, r3, #6
    e402:	add.w	r7, r2, #57	; 0x39
    e406:	lsls	r7, r7, #1
    e408:	add.w	r5, r2, #56	; 0x38
    e40c:	add.w	r0, r1, r7, lsl #2
    e410:	ldr.w	r2, [r1, r7, lsl #2]
    e414:	ldr	r1, [pc, #272]	; (e528 <_free_r+0x1c0>)
    e416:	subs	r0, #8
    e418:	cmp	r0, r2
    e41a:	beq.n	e4b8 <_free_r+0x150>
    e41c:	ldr	r1, [r2, #4]
    e41e:	bic.w	r1, r1, #3
    e422:	cmp	r3, r1
    e424:	bcs.n	e42c <_free_r+0xc4>
    e426:	ldr	r2, [r2, #8]
    e428:	cmp	r0, r2
    e42a:	bne.n	e41c <_free_r+0xb4>
    e42c:	ldr	r0, [r2, #12]
    e42e:	str	r0, [r4, #12]
    e430:	str	r2, [r4, #8]
    e432:	str	r4, [r0, #8]
    e434:	str	r4, [r2, #12]
    e436:	mov	r0, r8
    e438:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e43c:	b.w	98ac <__malloc_unlock>
    e440:	ldr	r5, [r2, #8]
    e442:	ldr	r7, [pc, #232]	; (e52c <_free_r+0x1c4>)
    e444:	cmp	r5, r7
    e446:	add	r3, r0
    e448:	beq.n	e4ca <_free_r+0x162>
    e44a:	ldr	r0, [r2, #12]
    e44c:	str	r0, [r5, #12]
    e44e:	orr.w	r2, r3, #1
    e452:	str	r5, [r0, #8]
    e454:	str	r2, [r4, #4]
    e456:	str	r3, [r4, r3]
    e458:	b.n	e3c2 <_free_r+0x5a>
    e45a:	lsls	r7, r7, #31
    e45c:	add	r3, r0
    e45e:	bmi.n	e470 <_free_r+0x108>
    e460:	ldr.w	r2, [r5, #-8]
    e464:	subs	r4, r4, r2
    e466:	add	r3, r2
    e468:	ldr	r0, [r4, #8]
    e46a:	ldr	r2, [r4, #12]
    e46c:	str	r2, [r0, #12]
    e46e:	str	r0, [r2, #8]
    e470:	ldr	r2, [pc, #188]	; (e530 <_free_r+0x1c8>)
    e472:	ldr	r2, [r2, #0]
    e474:	orr.w	r0, r3, #1
    e478:	cmp	r3, r2
    e47a:	str	r0, [r4, #4]
    e47c:	str	r4, [r1, #8]
    e47e:	bcc.n	e3ee <_free_r+0x86>
    e480:	ldr	r3, [pc, #176]	; (e534 <_free_r+0x1cc>)
    e482:	mov	r0, r8
    e484:	ldr	r1, [r3, #0]
    e486:	bl	e2cc <_malloc_trim_r>
    e48a:	b.n	e3ee <_free_r+0x86>
    e48c:	adds	r1, r2, r0
    e48e:	ldr	r1, [r1, #4]
    e490:	lsls	r1, r1, #31
    e492:	bmi.n	e51e <_free_r+0x1b6>
    e494:	ldr	r1, [r2, #8]
    e496:	ldr	r2, [r2, #12]
    e498:	str	r2, [r1, #12]
    e49a:	add	r3, r0
    e49c:	orr.w	r0, r3, #1
    e4a0:	str	r1, [r2, #8]
    e4a2:	str	r0, [r4, #4]
    e4a4:	str	r3, [r4, r3]
    e4a6:	b.n	e3ee <_free_r+0x86>
    e4a8:	cmp	r2, #20
    e4aa:	bhi.n	e4dc <_free_r+0x174>
    e4ac:	add.w	r7, r2, #92	; 0x5c
    e4b0:	lsls	r7, r7, #1
    e4b2:	add.w	r5, r2, #91	; 0x5b
    e4b6:	b.n	e40c <_free_r+0xa4>
    e4b8:	asrs	r2, r5, #2
    e4ba:	ldr	r3, [r1, #4]
    e4bc:	movs	r5, #1
    e4be:	lsl.w	r2, r5, r2
    e4c2:	orrs	r3, r2
    e4c4:	str	r3, [r1, #4]
    e4c6:	mov	r2, r0
    e4c8:	b.n	e42e <_free_r+0xc6>
    e4ca:	orr.w	r2, r3, #1
    e4ce:	str	r4, [r1, #20]
    e4d0:	str	r4, [r1, #16]
    e4d2:	str	r5, [r4, #12]
    e4d4:	str	r5, [r4, #8]
    e4d6:	str	r2, [r4, #4]
    e4d8:	str	r3, [r4, r3]
    e4da:	b.n	e3ee <_free_r+0x86>
    e4dc:	cmp	r2, #84	; 0x54
    e4de:	bhi.n	e4ee <_free_r+0x186>
    e4e0:	lsrs	r2, r3, #12
    e4e2:	add.w	r7, r2, #111	; 0x6f
    e4e6:	lsls	r7, r7, #1
    e4e8:	add.w	r5, r2, #110	; 0x6e
    e4ec:	b.n	e40c <_free_r+0xa4>
    e4ee:	cmp.w	r2, #340	; 0x154
    e4f2:	bhi.n	e502 <_free_r+0x19a>
    e4f4:	lsrs	r2, r3, #15
    e4f6:	add.w	r7, r2, #120	; 0x78
    e4fa:	lsls	r7, r7, #1
    e4fc:	add.w	r5, r2, #119	; 0x77
    e500:	b.n	e40c <_free_r+0xa4>
    e502:	movw	r0, #1364	; 0x554
    e506:	cmp	r2, r0
    e508:	bhi.n	e518 <_free_r+0x1b0>
    e50a:	lsrs	r2, r3, #18
    e50c:	add.w	r7, r2, #125	; 0x7d
    e510:	lsls	r7, r7, #1
    e512:	add.w	r5, r2, #124	; 0x7c
    e516:	b.n	e40c <_free_r+0xa4>
    e518:	movs	r7, #254	; 0xfe
    e51a:	movs	r5, #126	; 0x7e
    e51c:	b.n	e40c <_free_r+0xa4>
    e51e:	orr.w	r2, r3, #1
    e522:	str	r2, [r4, #4]
    e524:	str	r3, [r4, r3]
    e526:	b.n	e3ee <_free_r+0x86>
    e528:	.word	0x20001d4c
    e52c:	.word	0x20001d54
    e530:	.word	0x20002158
    e534:	.word	0x20021c70

0000e538 <rshift>:
    e538:	ldr	r2, [r0, #16]
    e53a:	asrs	r3, r1, #5
    e53c:	cmp	r3, r2
    e53e:	bge.n	e59e <rshift+0x66>
    e540:	push	{r4, r5, r6, r7, lr}
    e542:	ands.w	r1, r1, #31
    e546:	add.w	r6, r0, #20
    e54a:	add.w	r2, r6, r2, lsl #2
    e54e:	add.w	lr, r6, r3, lsl #2
    e552:	beq.n	e5a8 <rshift+0x70>
    e554:	ldr.w	r3, [r6, r3, lsl #2]
    e558:	add.w	r5, lr, #4
    e55c:	cmp	r2, r5
    e55e:	lsr.w	r4, r3, r1
    e562:	rsb	ip, r1, #32
    e566:	bls.n	e5dc <rshift+0xa4>
    e568:	add.w	r7, r0, #16
    e56c:	ldr	r3, [r5, #0]
    e56e:	lsl.w	r3, r3, ip
    e572:	orrs	r3, r4
    e574:	str.w	r3, [r7, #4]!
    e578:	ldr.w	r3, [r5], #4
    e57c:	cmp	r2, r5
    e57e:	lsr.w	r4, r3, r1
    e582:	bhi.n	e56c <rshift+0x34>
    e584:	rsb	r2, lr, r2
    e588:	subs	r2, #5
    e58a:	bic.w	r2, r2, #3
    e58e:	adds	r2, #4
    e590:	add	r2, r6
    e592:	str	r4, [r2, #0]
    e594:	cbz	r4, e598 <rshift+0x60>
    e596:	adds	r2, #4
    e598:	subs	r3, r2, r6
    e59a:	asrs	r3, r3, #2
    e59c:	b.n	e5cc <rshift+0x94>
    e59e:	movs	r3, #0
    e5a0:	str	r3, [r0, #16]
    e5a2:	movs	r3, #0
    e5a4:	str	r3, [r0, #20]
    e5a6:	bx	lr
    e5a8:	cmp	r2, lr
    e5aa:	bls.n	e5d2 <rshift+0x9a>
    e5ac:	add.w	r4, r0, #16
    e5b0:	mov	r1, lr
    e5b2:	ldr.w	r5, [r1], #4
    e5b6:	str.w	r5, [r4, #4]!
    e5ba:	cmp	r2, r1
    e5bc:	bhi.n	e5b2 <rshift+0x7a>
    e5be:	mvn.w	r3, lr
    e5c2:	add	r3, r2
    e5c4:	bic.w	r3, r3, #3
    e5c8:	adds	r3, #4
    e5ca:	asrs	r3, r3, #2
    e5cc:	str	r3, [r0, #16]
    e5ce:	cbz	r3, e5d6 <rshift+0x9e>
    e5d0:	pop	{r4, r5, r6, r7, pc}
    e5d2:	movs	r3, #0
    e5d4:	str	r3, [r0, #16]
    e5d6:	movs	r3, #0
    e5d8:	str	r3, [r0, #20]
    e5da:	pop	{r4, r5, r6, r7, pc}
    e5dc:	mov	r2, r6
    e5de:	b.n	e592 <rshift+0x5a>

0000e5e0 <__gethex>:
    e5e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5e4:	sub	sp, #44	; 0x2c
    e5e6:	mov	r9, r1
    e5e8:	str	r0, [sp, #20]
    e5ea:	ldr	r0, [sp, #88]	; 0x58
    e5ec:	str	r2, [sp, #12]
    e5ee:	str	r3, [sp, #32]
    e5f0:	bl	ecbc <__localeconv_l>
    e5f4:	ldr	r3, [r0, #0]
    e5f6:	str	r3, [sp, #8]
    e5f8:	mov	r0, r3
    e5fa:	mov	r4, r3
    e5fc:	bl	9e40 <strlen>
    e600:	ldr.w	r3, [r9]
    e604:	str	r0, [sp, #0]
    e606:	ldrb	r2, [r3, #2]
    e608:	adds	r1, r4, r0
    e60a:	cmp	r2, #48	; 0x30
    e60c:	ldrb.w	fp, [r1, #-1]
    e610:	bne.w	e966 <__gethex+0x386>
    e614:	adds	r3, #3
    e616:	mov.w	r8, #0
    e61a:	mov	r4, r3
    e61c:	ldrb.w	r2, [r3], #1
    e620:	cmp	r2, #48	; 0x30
    e622:	add.w	r8, r8, #1
    e626:	beq.n	e61a <__gethex+0x3a>
    e628:	ldr	r6, [pc, #712]	; (e8f4 <__gethex+0x314>)
    e62a:	ldrb	r3, [r6, r2]
    e62c:	cmp	r3, #0
    e62e:	beq.w	e812 <__gethex+0x232>
    e632:	ldrb	r3, [r4, #0]
    e634:	mov.w	sl, #0
    e638:	ldrb	r3, [r6, r3]
    e63a:	mov	r5, sl
    e63c:	mov	r7, r4
    e63e:	cbz	r3, e64a <__gethex+0x6a>
    e640:	ldrb.w	r3, [r7, #1]!
    e644:	ldrb	r3, [r6, r3]
    e646:	cmp	r3, #0
    e648:	bne.n	e640 <__gethex+0x60>
    e64a:	ldr	r2, [sp, #0]
    e64c:	ldr	r1, [sp, #8]
    e64e:	mov	r0, r7
    e650:	bl	9f1c <strncmp>
    e654:	cmp	r0, #0
    e656:	beq.w	e77e <__gethex+0x19e>
    e65a:	ldrb	r3, [r7, #0]
    e65c:	cmp	r5, #0
    e65e:	beq.w	e944 <__gethex+0x364>
    e662:	subs	r5, r5, r7
    e664:	lsls	r2, r5, #2
    e666:	str	r2, [sp, #4]
    e668:	cmp	r3, #80	; 0x50
    e66a:	beq.w	e790 <__gethex+0x1b0>
    e66e:	cmp	r3, #112	; 0x70
    e670:	beq.w	e790 <__gethex+0x1b0>
    e674:	mov	r5, r7
    e676:	str.w	r7, [r9]
    e67a:	cmp.w	sl, #0
    e67e:	bne.w	e7f0 <__gethex+0x210>
    e682:	subs	r3, r5, r4
    e684:	subs	r3, #1
    e686:	cmp	r3, #7
    e688:	mov	r1, sl
    e68a:	ble.n	e696 <__gethex+0xb6>
    e68c:	asrs	r3, r3, #1
    e68e:	cmp	r3, #7
    e690:	add.w	r1, r1, #1
    e694:	bgt.n	e68c <__gethex+0xac>
    e696:	ldr	r0, [sp, #20]
    e698:	bl	ed38 <_Balloc>
    e69c:	mov	r3, r0
    e69e:	adds	r3, #20
    e6a0:	cmp	r5, r4
    e6a2:	str	r0, [sp, #16]
    e6a4:	str	r3, [sp, #28]
    e6a6:	bls.w	ea50 <__gethex+0x470>
    e6aa:	mov	r9, r3
    e6ac:	ldr	r3, [sp, #0]
    e6ae:	mov.w	r8, #0
    e6b2:	rsb	r3, r3, #1
    e6b6:	mov	r7, r8
    e6b8:	str	r3, [sp, #24]
    e6ba:	b.n	e6dc <__gethex+0xfc>
    e6bc:	cmp	r7, #32
    e6be:	beq.w	e800 <__gethex+0x220>
    e6c2:	mov	r2, r7
    e6c4:	adds	r7, #4
    e6c6:	ldrb.w	r3, [r5, #-1]
    e6ca:	ldrb	r3, [r6, r3]
    e6cc:	mov	r5, sl
    e6ce:	and.w	r3, r3, #15
    e6d2:	lsls	r3, r2
    e6d4:	cmp	r5, r4
    e6d6:	orr.w	r8, r8, r3
    e6da:	bls.n	e708 <__gethex+0x128>
    e6dc:	ldrb.w	r3, [r5, #-1]
    e6e0:	cmp	r3, fp
    e6e2:	add.w	sl, r5, #4294967295
    e6e6:	bne.n	e6bc <__gethex+0xdc>
    e6e8:	ldr	r3, [sp, #24]
    e6ea:	add	r3, sl
    e6ec:	cmp	r3, r4
    e6ee:	bcc.n	e6bc <__gethex+0xdc>
    e6f0:	mov	r0, r3
    e6f2:	ldr	r2, [sp, #0]
    e6f4:	ldr	r1, [sp, #8]
    e6f6:	str	r3, [sp, #36]	; 0x24
    e6f8:	bl	9f1c <strncmp>
    e6fc:	ldr	r3, [sp, #36]	; 0x24
    e6fe:	cmp	r0, #0
    e700:	bne.n	e6bc <__gethex+0xdc>
    e702:	mov	r5, r3
    e704:	cmp	r5, r4
    e706:	bhi.n	e6dc <__gethex+0xfc>
    e708:	str.w	r8, [r9], #4
    e70c:	ldr	r3, [sp, #28]
    e70e:	ldr	r2, [sp, #16]
    e710:	rsb	r9, r3, r9
    e714:	mov.w	r3, r9, asr #2
    e718:	str	r3, [r2, #16]
    e71a:	mov	r0, r8
    e71c:	mov.w	r9, r3, lsl #5
    e720:	bl	eeb0 <__hi0bits>
    e724:	ldr	r3, [sp, #12]
    e726:	ldr	r6, [r3, #0]
    e728:	rsb	r0, r0, r9
    e72c:	cmp	r0, r6
    e72e:	bgt.w	e8f8 <__gethex+0x318>
    e732:	blt.w	e948 <__gethex+0x368>
    e736:	movs	r7, #0
    e738:	ldr	r3, [sp, #12]
    e73a:	ldr	r2, [sp, #4]
    e73c:	ldr	r3, [r3, #8]
    e73e:	cmp	r2, r3
    e740:	bgt.w	e872 <__gethex+0x292>
    e744:	ldr	r0, [sp, #12]
    e746:	ldr	r1, [sp, #4]
    e748:	ldr	r3, [r0, #4]
    e74a:	cmp	r1, r3
    e74c:	bge.w	e8ba <__gethex+0x2da>
    e750:	subs	r5, r3, r1
    e752:	cmp	r6, r5
    e754:	bgt.w	e976 <__gethex+0x396>
    e758:	ldr	r2, [r0, #12]
    e75a:	cmp	r2, #2
    e75c:	beq.w	ea5e <__gethex+0x47e>
    e760:	cmp	r2, #3
    e762:	beq.w	ea1e <__gethex+0x43e>
    e766:	cmp	r2, #1
    e768:	beq.w	ea66 <__gethex+0x486>
    e76c:	ldr	r0, [sp, #20]
    e76e:	ldr	r1, [sp, #16]
    e770:	bl	ed84 <_Bfree>
    e774:	ldr	r2, [sp, #80]	; 0x50
    e776:	movs	r3, #0
    e778:	str	r3, [r2, #0]
    e77a:	movs	r0, #80	; 0x50
    e77c:	b.n	e7fa <__gethex+0x21a>
    e77e:	cmp	r5, #0
    e780:	beq.w	e9b6 <__gethex+0x3d6>
    e784:	ldrb	r3, [r7, #0]
    e786:	b.n	e662 <__gethex+0x82>
    e788:	movs	r3, #0
    e78a:	str	r3, [sp, #4]
    e78c:	mov.w	sl, #1
    e790:	ldrb	r3, [r7, #1]
    e792:	cmp	r3, #43	; 0x2b
    e794:	beq.w	e8f0 <__gethex+0x310>
    e798:	cmp	r3, #45	; 0x2d
    e79a:	beq.n	e888 <__gethex+0x2a8>
    e79c:	adds	r1, r7, #1
    e79e:	movs	r5, #0
    e7a0:	ldrb	r3, [r6, r3]
    e7a2:	ldr	r0, [pc, #336]	; (e8f4 <__gethex+0x314>)
    e7a4:	subs	r2, r3, #1
    e7a6:	cmp	r2, #24
    e7a8:	bhi.w	e674 <__gethex+0x94>
    e7ac:	ldrb	r2, [r1, #1]
    e7ae:	ldrb	r2, [r0, r2]
    e7b0:	subs	r0, r2, #1
    e7b2:	cmp	r0, #24
    e7b4:	sub.w	r3, r3, #16
    e7b8:	add.w	r1, r1, #1
    e7bc:	bhi.n	e7d6 <__gethex+0x1f6>
    e7be:	ldrb.w	r0, [r1, #1]!
    e7c2:	add.w	r3, r3, r3, lsl #2
    e7c6:	add.w	r3, r2, r3, lsl #1
    e7ca:	ldrb	r2, [r6, r0]
    e7cc:	subs	r0, r2, #1
    e7ce:	cmp	r0, #24
    e7d0:	sub.w	r3, r3, #16
    e7d4:	bls.n	e7be <__gethex+0x1de>
    e7d6:	cbz	r5, e7da <__gethex+0x1fa>
    e7d8:	negs	r3, r3
    e7da:	ldr	r2, [sp, #4]
    e7dc:	mov	r5, r7
    e7de:	add	r2, r3
    e7e0:	mov	r7, r1
    e7e2:	str	r2, [sp, #4]
    e7e4:	str.w	r7, [r9]
    e7e8:	cmp.w	sl, #0
    e7ec:	beq.w	e682 <__gethex+0xa2>
    e7f0:	cmp.w	r8, #0
    e7f4:	ite	eq
    e7f6:	moveq	r0, #6
    e7f8:	movne	r0, #0
    e7fa:	add	sp, #44	; 0x2c
    e7fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e800:	str.w	r8, [r9]
    e804:	mov.w	r8, #0
    e808:	add.w	r9, r9, #4
    e80c:	mov	r2, r8
    e80e:	movs	r7, #4
    e810:	b.n	e6c6 <__gethex+0xe6>
    e812:	ldr	r5, [sp, #0]
    e814:	ldr	r1, [sp, #8]
    e816:	mov	r2, r5
    e818:	mov	r0, r4
    e81a:	bl	9f1c <strncmp>
    e81e:	cmp	r0, #0
    e820:	beq.n	e890 <__gethex+0x2b0>
    e822:	ldrb	r3, [r4, #0]
    e824:	mov	r7, r4
    e826:	cmp	r3, #80	; 0x50
    e828:	beq.n	e788 <__gethex+0x1a8>
    e82a:	cmp	r3, #112	; 0x70
    e82c:	beq.n	e788 <__gethex+0x1a8>
    e82e:	str.w	r7, [r9]
    e832:	b.n	e7f0 <__gethex+0x210>
    e834:	ldr	r3, [sp, #16]
    e836:	ldr	r3, [r3, #8]
    e838:	cmp	r7, r3
    e83a:	bge.w	eaa6 <__gethex+0x4c6>
    e83e:	mov	r3, r7
    e840:	ldr	r0, [sp, #16]
    e842:	add.w	r2, r0, r3, lsl #2
    e846:	movs	r1, #1
    e848:	adds	r3, #1
    e84a:	cmp	r4, #2
    e84c:	str	r3, [r0, #16]
    e84e:	str	r1, [r2, #20]
    e850:	beq.w	ea84 <__gethex+0x4a4>
    e854:	cmp	r7, r3
    e856:	bge.w	ea10 <__gethex+0x430>
    e85a:	movs	r1, #1
    e85c:	ldr	r0, [sp, #16]
    e85e:	bl	e538 <rshift>
    e862:	ldr	r3, [sp, #12]
    e864:	ldr	r2, [sp, #4]
    e866:	ldr	r3, [r3, #8]
    e868:	adds	r2, #1
    e86a:	cmp	r2, r3
    e86c:	str	r2, [sp, #4]
    e86e:	ble.w	ea16 <__gethex+0x436>
    e872:	ldr	r0, [sp, #20]
    e874:	ldr	r1, [sp, #16]
    e876:	bl	ed84 <_Bfree>
    e87a:	ldr	r2, [sp, #80]	; 0x50
    e87c:	movs	r3, #0
    e87e:	movs	r0, #163	; 0xa3
    e880:	str	r3, [r2, #0]
    e882:	add	sp, #44	; 0x2c
    e884:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e888:	movs	r5, #1
    e88a:	ldrb	r3, [r7, #2]
    e88c:	adds	r1, r7, #2
    e88e:	b.n	e7a0 <__gethex+0x1c0>
    e890:	ldrb	r2, [r4, r5]
    e892:	ldrb	r3, [r6, r2]
    e894:	adds	r7, r4, r5
    e896:	cmp	r3, #0
    e898:	beq.n	e96e <__gethex+0x38e>
    e89a:	cmp	r2, #48	; 0x30
    e89c:	mov	r4, r7
    e89e:	bne.n	e8aa <__gethex+0x2ca>
    e8a0:	ldrb.w	r3, [r4, #1]!
    e8a4:	cmp	r3, #48	; 0x30
    e8a6:	beq.n	e8a0 <__gethex+0x2c0>
    e8a8:	ldrb	r3, [r6, r3]
    e8aa:	clz	sl, r3
    e8ae:	mov	r5, r7
    e8b0:	mov.w	sl, sl, lsr #5
    e8b4:	mov.w	r8, #1
    e8b8:	b.n	e63c <__gethex+0x5c>
    e8ba:	movs	r4, #1
    e8bc:	cbz	r7, e8d8 <__gethex+0x2f8>
    e8be:	ldr	r3, [sp, #12]
    e8c0:	ldr	r3, [r3, #12]
    e8c2:	cmp	r3, #2
    e8c4:	beq.w	e9d2 <__gethex+0x3f2>
    e8c8:	cmp	r3, #3
    e8ca:	beq.w	e9da <__gethex+0x3fa>
    e8ce:	cmp	r3, #1
    e8d0:	beq.w	ea3e <__gethex+0x45e>
    e8d4:	orr.w	r4, r4, #16
    e8d8:	ldr	r3, [sp, #80]	; 0x50
    e8da:	mov	r2, r3
    e8dc:	ldr	r3, [sp, #16]
    e8de:	str	r3, [r2, #0]
    e8e0:	ldr	r3, [sp, #32]
    e8e2:	mov	r2, r3
    e8e4:	ldr	r3, [sp, #4]
    e8e6:	str	r3, [r2, #0]
    e8e8:	mov	r0, r4
    e8ea:	add	sp, #44	; 0x2c
    e8ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e8f0:	movs	r5, #0
    e8f2:	b.n	e88a <__gethex+0x2aa>
    e8f4:	.word	0x2000051c
    e8f8:	subs	r4, r0, r6
    e8fa:	mov	r1, r4
    e8fc:	ldr	r0, [sp, #16]
    e8fe:	bl	f5bc <__any_on>
    e902:	cmp	r0, #0
    e904:	beq.n	e972 <__gethex+0x392>
    e906:	subs	r2, r4, #1
    e908:	asrs	r1, r2, #5
    e90a:	ldr	r0, [sp, #28]
    e90c:	and.w	r3, r2, #31
    e910:	ldr.w	r1, [r0, r1, lsl #2]
    e914:	movs	r7, #1
    e916:	lsl.w	r3, r7, r3
    e91a:	tst	r3, r1
    e91c:	beq.n	e934 <__gethex+0x354>
    e91e:	cmp	r2, r7
    e920:	ble.w	ea5a <__gethex+0x47a>
    e924:	subs	r1, r4, #2
    e926:	ldr	r0, [sp, #16]
    e928:	bl	f5bc <__any_on>
    e92c:	cmp	r0, #0
    e92e:	beq.w	ea5a <__gethex+0x47a>
    e932:	movs	r7, #3
    e934:	ldr	r3, [sp, #4]
    e936:	ldr	r0, [sp, #16]
    e938:	add	r3, r4
    e93a:	mov	r1, r4
    e93c:	str	r3, [sp, #4]
    e93e:	bl	e538 <rshift>
    e942:	b.n	e738 <__gethex+0x158>
    e944:	str	r5, [sp, #4]
    e946:	b.n	e668 <__gethex+0x88>
    e948:	subs	r4, r6, r0
    e94a:	ldr	r1, [sp, #16]
    e94c:	ldr	r0, [sp, #20]
    e94e:	mov	r2, r4
    e950:	bl	f130 <__lshift>
    e954:	ldr	r3, [sp, #4]
    e956:	str	r0, [sp, #16]
    e958:	subs	r3, r3, r4
    e95a:	str	r3, [sp, #4]
    e95c:	mov	r3, r0
    e95e:	adds	r3, #20
    e960:	str	r3, [sp, #28]
    e962:	movs	r7, #0
    e964:	b.n	e738 <__gethex+0x158>
    e966:	adds	r4, r3, #2
    e968:	mov.w	r8, #0
    e96c:	b.n	e628 <__gethex+0x48>
    e96e:	mov	r3, r2
    e970:	b.n	e826 <__gethex+0x246>
    e972:	mov	r7, r0
    e974:	b.n	e934 <__gethex+0x354>
    e976:	subs	r4, r5, #1
    e978:	cmp	r7, #0
    e97a:	bne.n	ea1a <__gethex+0x43a>
    e97c:	cbz	r4, e988 <__gethex+0x3a8>
    e97e:	mov	r1, r4
    e980:	ldr	r0, [sp, #16]
    e982:	bl	f5bc <__any_on>
    e986:	mov	r7, r0
    e988:	asrs	r3, r4, #5
    e98a:	ldr	r2, [sp, #28]
    e98c:	ldr	r0, [sp, #16]
    e98e:	ldr.w	r2, [r2, r3, lsl #2]
    e992:	and.w	r4, r4, #31
    e996:	movs	r3, #1
    e998:	lsl.w	r4, r3, r4
    e99c:	tst	r4, r2
    e99e:	mov	r1, r5
    e9a0:	it	ne
    e9a2:	orrne.w	r7, r7, #2
    e9a6:	bl	e538 <rshift>
    e9aa:	ldr	r3, [sp, #12]
    e9ac:	ldr	r3, [r3, #4]
    e9ae:	str	r3, [sp, #4]
    e9b0:	subs	r6, r6, r5
    e9b2:	movs	r4, #2
    e9b4:	b.n	e8bc <__gethex+0x2dc>
    e9b6:	ldr	r1, [sp, #0]
    e9b8:	ldrb	r3, [r7, r1]
    e9ba:	ldrb	r2, [r6, r3]
    e9bc:	adds	r5, r7, r1
    e9be:	mov	r7, r5
    e9c0:	cmp	r2, #0
    e9c2:	beq.w	e662 <__gethex+0x82>
    e9c6:	ldrb.w	r3, [r7, #1]!
    e9ca:	ldrb	r2, [r6, r3]
    e9cc:	cmp	r2, #0
    e9ce:	bne.n	e9c6 <__gethex+0x3e6>
    e9d0:	b.n	e662 <__gethex+0x82>
    e9d2:	ldr	r3, [sp, #84]	; 0x54
    e9d4:	rsb	r3, r3, #1
    e9d8:	str	r3, [sp, #84]	; 0x54
    e9da:	ldr	r3, [sp, #84]	; 0x54
    e9dc:	cmp	r3, #0
    e9de:	beq.w	e8d4 <__gethex+0x2f4>
    e9e2:	ldr	r3, [sp, #16]
    e9e4:	ldr	r5, [sp, #28]
    e9e6:	ldr	r7, [r3, #16]
    e9e8:	mov.w	r8, r7, lsl #2
    e9ec:	add.w	r0, r5, r8
    e9f0:	mov	r3, r5
    e9f2:	movs	r1, #0
    e9f4:	b.n	ea00 <__gethex+0x420>
    e9f6:	str.w	r1, [r3], #4
    e9fa:	cmp	r0, r3
    e9fc:	bls.w	e834 <__gethex+0x254>
    ea00:	ldr	r2, [r3, #0]
    ea02:	cmp.w	r2, #4294967295
    ea06:	beq.n	e9f6 <__gethex+0x416>
    ea08:	adds	r2, #1
    ea0a:	cmp	r4, #2
    ea0c:	str	r2, [r3, #0]
    ea0e:	beq.n	ea84 <__gethex+0x4a4>
    ea10:	ands.w	r6, r6, #31
    ea14:	bne.n	ea92 <__gethex+0x4b2>
    ea16:	movs	r4, #33	; 0x21
    ea18:	b.n	e8d8 <__gethex+0x2f8>
    ea1a:	movs	r7, #1
    ea1c:	b.n	e988 <__gethex+0x3a8>
    ea1e:	ldr	r2, [sp, #84]	; 0x54
    ea20:	cmp	r2, #0
    ea22:	beq.w	e76c <__gethex+0x18c>
    ea26:	ldr	r1, [sp, #32]
    ea28:	str	r3, [r1, #0]
    ea2a:	ldr	r3, [sp, #28]
    ea2c:	ldr	r1, [sp, #16]
    ea2e:	movs	r2, #1
    ea30:	str	r2, [r1, #16]
    ea32:	str	r2, [r3, #0]
    ea34:	ldr	r3, [sp, #80]	; 0x50
    ea36:	mov	r2, r3
    ea38:	movs	r0, #98	; 0x62
    ea3a:	str	r1, [r2, #0]
    ea3c:	b.n	e7fa <__gethex+0x21a>
    ea3e:	lsls	r2, r7, #30
    ea40:	bpl.w	e8d4 <__gethex+0x2f4>
    ea44:	ldr	r3, [sp, #28]
    ea46:	ldr	r3, [r3, #0]
    ea48:	orrs	r3, r7
    ea4a:	lsls	r3, r3, #31
    ea4c:	bmi.n	e9e2 <__gethex+0x402>
    ea4e:	b.n	e8d4 <__gethex+0x2f4>
    ea50:	ldr.w	r9, [sp, #28]
    ea54:	mov.w	r8, #0
    ea58:	b.n	e708 <__gethex+0x128>
    ea5a:	movs	r7, #2
    ea5c:	b.n	e934 <__gethex+0x354>
    ea5e:	ldr	r2, [sp, #84]	; 0x54
    ea60:	cmp	r2, #0
    ea62:	beq.n	ea26 <__gethex+0x446>
    ea64:	b.n	e76c <__gethex+0x18c>
    ea66:	cmp	r6, r5
    ea68:	bne.w	e76c <__gethex+0x18c>
    ea6c:	cmp	r6, #1
    ea6e:	ble.n	ea26 <__gethex+0x446>
    ea70:	subs	r1, r6, #1
    ea72:	ldr	r0, [sp, #16]
    ea74:	bl	f5bc <__any_on>
    ea78:	cmp	r0, #0
    ea7a:	beq.w	e76c <__gethex+0x18c>
    ea7e:	ldr	r3, [sp, #12]
    ea80:	ldr	r3, [r3, #4]
    ea82:	b.n	ea26 <__gethex+0x446>
    ea84:	ldr	r3, [sp, #12]
    ea86:	ldr	r3, [r3, #0]
    ea88:	subs	r3, #1
    ea8a:	cmp	r6, r3
    ea8c:	beq.n	ead8 <__gethex+0x4f8>
    ea8e:	movs	r4, #34	; 0x22
    ea90:	b.n	e8d8 <__gethex+0x2f8>
    ea92:	add	r5, r8
    ea94:	rsb	r6, r6, #32
    ea98:	ldr.w	r0, [r5, #-4]
    ea9c:	bl	eeb0 <__hi0bits>
    eaa0:	cmp	r0, r6
    eaa2:	bge.n	ea16 <__gethex+0x436>
    eaa4:	b.n	e85a <__gethex+0x27a>
    eaa6:	ldr	r3, [sp, #16]
    eaa8:	ldr.w	r9, [sp, #20]
    eaac:	ldr	r1, [r3, #4]
    eaae:	mov	r0, r9
    eab0:	adds	r1, #1
    eab2:	bl	ed38 <_Balloc>
    eab6:	ldr	r1, [sp, #16]
    eab8:	ldr	r3, [r1, #16]
    eaba:	adds	r2, r3, #2
    eabc:	mov	r5, r0
    eabe:	lsls	r2, r2, #2
    eac0:	adds	r1, #12
    eac2:	adds	r0, #12
    eac4:	bl	69a8 <memcpy>
    eac8:	ldr	r1, [sp, #16]
    eaca:	mov	r0, r9
    eacc:	bl	ed84 <_Bfree>
    ead0:	str	r5, [sp, #16]
    ead2:	ldr	r3, [r5, #16]
    ead4:	adds	r5, #20
    ead6:	b.n	e840 <__gethex+0x260>
    ead8:	asrs	r3, r6, #5
    eada:	and.w	r6, r6, #31
    eade:	ldr.w	r2, [r5, r3, lsl #2]
    eae2:	movs	r3, #1
    eae4:	lsls	r3, r6
    eae6:	tst	r3, r2
    eae8:	ite	ne
    eaea:	movne	r4, #33	; 0x21
    eaec:	moveq	r4, #34	; 0x22
    eaee:	b.n	e8d8 <__gethex+0x2f8>

0000eaf0 <__match>:
    eaf0:	push	{r4, r5}
    eaf2:	ldr	r4, [r0, #0]
    eaf4:	b.n	eb08 <__match+0x18>
    eaf6:	ldrb.w	r3, [r4, #1]!
    eafa:	sub.w	r5, r3, #65	; 0x41
    eafe:	cmp	r5, #25
    eb00:	it	ls
    eb02:	addls	r3, #32
    eb04:	cmp	r3, r2
    eb06:	bne.n	eb1a <__match+0x2a>
    eb08:	ldrb.w	r2, [r1], #1
    eb0c:	cmp	r2, #0
    eb0e:	bne.n	eaf6 <__match+0x6>
    eb10:	adds	r4, #1
    eb12:	str	r4, [r0, #0]
    eb14:	movs	r0, #1
    eb16:	pop	{r4, r5}
    eb18:	bx	lr
    eb1a:	movs	r0, #0
    eb1c:	pop	{r4, r5}
    eb1e:	bx	lr

0000eb20 <__hexnan>:
    eb20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb24:	ldr	r3, [r1, #0]
    eb26:	ldr.w	r9, [pc, #372]	; ec9c <__hexnan+0x17c>
    eb2a:	sub	sp, #20
    eb2c:	asrs	r1, r3, #5
    eb2e:	add.w	r1, r2, r1, lsl #2
    eb32:	ands.w	r3, r3, #31
    eb36:	str	r1, [sp, #4]
    eb38:	itt	ne
    eb3a:	addne	r1, #4
    eb3c:	strne	r1, [sp, #4]
    eb3e:	ldr	r4, [sp, #4]
    eb40:	str	r0, [sp, #8]
    eb42:	str	r3, [sp, #12]
    eb44:	movs	r3, #0
    eb46:	mov	r1, r3
    eb48:	str.w	r3, [r4, #-4]
    eb4c:	mov	sl, r3
    eb4e:	mov	lr, r3
    eb50:	ldr	r3, [sp, #8]
    eb52:	sub.w	ip, r4, #4
    eb56:	ldr	r5, [r3, #0]
    eb58:	mov	r8, ip
    eb5a:	mov	r0, ip
    eb5c:	ldrb.w	r3, [r5, #1]!
    eb60:	cbz	r3, ebac <__hexnan+0x8c>
    eb62:	ldrb.w	r4, [r9, r3]
    eb66:	cmp	r4, #0
    eb68:	bne.n	ebf2 <__hexnan+0xd2>
    eb6a:	cmp	r3, #32
    eb6c:	bhi.n	ec2a <__hexnan+0x10a>
    eb6e:	cmp	lr, sl
    eb70:	ble.n	eb5c <__hexnan+0x3c>
    eb72:	cmp	r0, r8
    eb74:	bcs.n	eb9e <__hexnan+0x7e>
    eb76:	cmp	r1, #7
    eb78:	bgt.n	eb9e <__hexnan+0x7e>
    eb7a:	rsb	r1, r1, #8
    eb7e:	lsls	r1, r1, #2
    eb80:	ldr	r6, [r0, #0]
    eb82:	rsb	fp, r1, #32
    eb86:	mov	r3, r0
    eb88:	ldr	r7, [r3, #4]
    eb8a:	lsl.w	r4, r7, fp
    eb8e:	orrs	r4, r6
    eb90:	lsr.w	r6, r7, r1
    eb94:	str	r4, [r3, #0]
    eb96:	str.w	r6, [r3, #4]!
    eb9a:	cmp	r8, r3
    eb9c:	bhi.n	eb88 <__hexnan+0x68>
    eb9e:	cmp	r0, r2
    eba0:	bhi.n	ec18 <__hexnan+0xf8>
    eba2:	ldrb.w	r3, [r5, #1]!
    eba6:	movs	r1, #8
    eba8:	cmp	r3, #0
    ebaa:	bne.n	eb62 <__hexnan+0x42>
    ebac:	cmp.w	lr, #0
    ebb0:	beq.n	ec2e <__hexnan+0x10e>
    ebb2:	cmp	r0, r8
    ebb4:	bcs.n	ebba <__hexnan+0x9a>
    ebb6:	cmp	r1, #7
    ebb8:	ble.n	ec74 <__hexnan+0x154>
    ebba:	cmp	r0, r2
    ebbc:	bls.n	ec36 <__hexnan+0x116>
    ebbe:	mov	r3, r2
    ebc0:	ldr.w	r1, [r0], #4
    ebc4:	str.w	r1, [r3], #4
    ebc8:	cmp	ip, r0
    ebca:	bcs.n	ebc0 <__hexnan+0xa0>
    ebcc:	movs	r1, #0
    ebce:	str.w	r1, [r3], #4
    ebd2:	cmp	ip, r3
    ebd4:	bcs.n	ebce <__hexnan+0xae>
    ebd6:	ldr	r3, [sp, #4]
    ebd8:	ldr.w	r3, [r3, #-4]
    ebdc:	cbnz	r3, ebea <__hexnan+0xca>
    ebde:	cmp	r2, ip
    ebe0:	beq.n	ec58 <__hexnan+0x138>
    ebe2:	ldr.w	r3, [ip, #-4]!
    ebe6:	cmp	r3, #0
    ebe8:	beq.n	ebde <__hexnan+0xbe>
    ebea:	movs	r0, #5
    ebec:	add	sp, #20
    ebee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ebf2:	adds	r1, #1
    ebf4:	cmp	r1, #8
    ebf6:	add.w	lr, lr, #1
    ebfa:	ble.n	ec0a <__hexnan+0xea>
    ebfc:	cmp	r0, r2
    ebfe:	bls.n	eb5c <__hexnan+0x3c>
    ec00:	movs	r3, #0
    ec02:	str.w	r3, [r0, #-4]
    ec06:	movs	r1, #1
    ec08:	subs	r0, #4
    ec0a:	ldr	r3, [r0, #0]
    ec0c:	and.w	r4, r4, #15
    ec10:	orr.w	r4, r4, r3, lsl #4
    ec14:	str	r4, [r0, #0]
    ec16:	b.n	eb5c <__hexnan+0x3c>
    ec18:	movs	r3, #0
    ec1a:	sub.w	r8, r0, #4
    ec1e:	str.w	r3, [r0, #-4]
    ec22:	mov	sl, lr
    ec24:	mov	r0, r8
    ec26:	mov	r1, r3
    ec28:	b.n	eb5c <__hexnan+0x3c>
    ec2a:	cmp	r3, #41	; 0x29
    ec2c:	beq.n	ec66 <__hexnan+0x146>
    ec2e:	movs	r0, #4
    ec30:	add	sp, #20
    ec32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec36:	ldr	r3, [sp, #12]
    ec38:	cmp	r3, #0
    ec3a:	beq.n	ebd6 <__hexnan+0xb6>
    ec3c:	ldr	r4, [sp, #4]
    ec3e:	ldr	r3, [sp, #12]
    ec40:	ldr.w	r1, [r4, #-4]
    ec44:	rsb	r3, r3, #32
    ec48:	mov.w	r0, #4294967295
    ec4c:	lsr.w	r3, r0, r3
    ec50:	ands	r3, r1
    ec52:	str.w	r3, [r4, #-4]
    ec56:	b.n	ebdc <__hexnan+0xbc>
    ec58:	movs	r3, #1
    ec5a:	movs	r0, #5
    ec5c:	str.w	r3, [ip]
    ec60:	add	sp, #20
    ec62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec66:	ldr	r3, [sp, #8]
    ec68:	adds	r5, #1
    ec6a:	str	r5, [r3, #0]
    ec6c:	cmp.w	lr, #0
    ec70:	bne.n	ebb2 <__hexnan+0x92>
    ec72:	b.n	ec2e <__hexnan+0x10e>
    ec74:	rsb	r3, r1, #8
    ec78:	lsls	r3, r3, #2
    ec7a:	ldr	r5, [r0, #0]
    ec7c:	rsb	r7, r3, #32
    ec80:	mov	r1, r0
    ec82:	ldr	r6, [r1, #4]
    ec84:	lsl.w	r4, r6, r7
    ec88:	orrs	r4, r5
    ec8a:	lsr.w	r5, r6, r3
    ec8e:	str	r4, [r1, #0]
    ec90:	str.w	r5, [r1, #4]!
    ec94:	cmp	r8, r1
    ec96:	bhi.n	ec82 <__hexnan+0x162>
    ec98:	b.n	ebba <__hexnan+0x9a>
    ec9a:	nop
    ec9c:	.word	0x2000051c

0000eca0 <iswspace>:
    eca0:	cmp	r0, #255	; 0xff
    eca2:	bls.n	eca8 <iswspace+0x8>
    eca4:	movs	r0, #0
    eca6:	bx	lr
    eca8:	push	{r4, lr}
    ecaa:	mov	r4, r0
    ecac:	bl	9064 <__locale_ctype_ptr>
    ecb0:	add	r0, r4
    ecb2:	ldrb	r0, [r0, #1]
    ecb4:	and.w	r0, r0, #8
    ecb8:	uxtb	r0, r0
    ecba:	pop	{r4, pc}

0000ecbc <__localeconv_l>:
    ecbc:	adds	r0, #240	; 0xf0
    ecbe:	bx	lr

0000ecc0 <_localeconv_r>:
    ecc0:	ldr	r2, [pc, #16]	; (ecd4 <_localeconv_r+0x14>)
    ecc2:	ldr	r3, [pc, #20]	; (ecd8 <_localeconv_r+0x18>)
    ecc4:	ldr	r2, [r2, #0]
    ecc6:	ldr	r0, [r2, #52]	; 0x34
    ecc8:	cmp	r0, #0
    ecca:	it	eq
    eccc:	moveq	r0, r3
    ecce:	adds	r0, #240	; 0xf0
    ecd0:	bx	lr
    ecd2:	nop
    ecd4:	.word	0x2000215c
    ecd8:	.word	0x20001be0

0000ecdc <_mbrtowc_r>:
    ecdc:	push	{r4, r5, r6, r7, lr}
    ecde:	sub	sp, #12
    ece0:	mov	r7, r0
    ece2:	ldr	r5, [sp, #32]
    ece4:	cbz	r2, ed0c <_mbrtowc_r+0x30>
    ece6:	ldr	r4, [pc, #68]	; (ed2c <_mbrtowc_r+0x50>)
    ece8:	ldr	r6, [pc, #68]	; (ed30 <_mbrtowc_r+0x54>)
    ecea:	ldr	r4, [r4, #0]
    ecec:	ldr	r4, [r4, #52]	; 0x34
    ecee:	str	r5, [sp, #0]
    ecf0:	cmp	r4, #0
    ecf2:	it	eq
    ecf4:	moveq	r4, r6
    ecf6:	ldr.w	r4, [r4, #228]	; 0xe4
    ecfa:	blx	r4
    ecfc:	adds	r3, r0, #1
    ecfe:	bne.n	ed08 <_mbrtowc_r+0x2c>
    ed00:	movs	r2, #0
    ed02:	movs	r3, #138	; 0x8a
    ed04:	str	r2, [r5, #0]
    ed06:	str	r3, [r7, #0]
    ed08:	add	sp, #12
    ed0a:	pop	{r4, r5, r6, r7, pc}
    ed0c:	ldr	r3, [pc, #28]	; (ed2c <_mbrtowc_r+0x50>)
    ed0e:	ldr	r1, [pc, #32]	; (ed30 <_mbrtowc_r+0x54>)
    ed10:	ldr	r3, [r3, #0]
    ed12:	ldr	r3, [r3, #52]	; 0x34
    ed14:	str	r5, [sp, #0]
    ed16:	cmp	r3, #0
    ed18:	it	eq
    ed1a:	moveq	r3, r1
    ed1c:	mov	r4, r2
    ed1e:	mov	r1, r4
    ed20:	ldr	r2, [pc, #16]	; (ed34 <_mbrtowc_r+0x58>)
    ed22:	ldr.w	r4, [r3, #228]	; 0xe4
    ed26:	movs	r3, #1
    ed28:	blx	r4
    ed2a:	b.n	ecfc <_mbrtowc_r+0x20>
    ed2c:	.word	0x2000215c
    ed30:	.word	0x20001be0
    ed34:	.word	0x200012e8

0000ed38 <_Balloc>:
    ed38:	ldr	r3, [r0, #76]	; 0x4c
    ed3a:	push	{r4, r5, r6, lr}
    ed3c:	mov	r5, r0
    ed3e:	mov	r4, r1
    ed40:	cbz	r3, ed56 <_Balloc+0x1e>
    ed42:	ldr.w	r0, [r3, r4, lsl #2]
    ed46:	cbz	r0, ed6a <_Balloc+0x32>
    ed48:	ldr	r2, [r0, #0]
    ed4a:	str.w	r2, [r3, r4, lsl #2]
    ed4e:	movs	r3, #0
    ed50:	str	r3, [r0, #16]
    ed52:	str	r3, [r0, #12]
    ed54:	pop	{r4, r5, r6, pc}
    ed56:	movs	r2, #33	; 0x21
    ed58:	movs	r1, #4
    ed5a:	bl	ff24 <_calloc_r>
    ed5e:	str	r0, [r5, #76]	; 0x4c
    ed60:	mov	r3, r0
    ed62:	cmp	r0, #0
    ed64:	bne.n	ed42 <_Balloc+0xa>
    ed66:	movs	r0, #0
    ed68:	pop	{r4, r5, r6, pc}
    ed6a:	movs	r1, #1
    ed6c:	lsl.w	r6, r1, r4
    ed70:	adds	r2, r6, #5
    ed72:	mov	r0, r5
    ed74:	lsls	r2, r2, #2
    ed76:	bl	ff24 <_calloc_r>
    ed7a:	cmp	r0, #0
    ed7c:	beq.n	ed66 <_Balloc+0x2e>
    ed7e:	str	r4, [r0, #4]
    ed80:	str	r6, [r0, #8]
    ed82:	b.n	ed4e <_Balloc+0x16>

0000ed84 <_Bfree>:
    ed84:	cbz	r1, ed94 <_Bfree+0x10>
    ed86:	ldr	r3, [r0, #76]	; 0x4c
    ed88:	ldr	r2, [r1, #4]
    ed8a:	ldr.w	r0, [r3, r2, lsl #2]
    ed8e:	str	r0, [r1, #0]
    ed90:	str.w	r1, [r3, r2, lsl #2]
    ed94:	bx	lr
    ed96:	nop

0000ed98 <__multadd>:
    ed98:	push	{r4, r5, r6, r7, lr}
    ed9a:	ldr	r4, [r1, #16]
    ed9c:	sub	sp, #12
    ed9e:	mov	r5, r1
    eda0:	mov	r6, r0
    eda2:	add.w	lr, r1, #20
    eda6:	movs	r7, #0
    eda8:	ldr.w	r0, [lr]
    edac:	uxth	r1, r0
    edae:	mla	r1, r2, r1, r3
    edb2:	lsrs	r3, r1, #16
    edb4:	lsrs	r0, r0, #16
    edb6:	mla	r3, r2, r0, r3
    edba:	uxth	r1, r1
    edbc:	adds	r7, #1
    edbe:	add.w	r1, r1, r3, lsl #16
    edc2:	cmp	r4, r7
    edc4:	str.w	r1, [lr], #4
    edc8:	mov.w	r3, r3, lsr #16
    edcc:	bgt.n	eda8 <__multadd+0x10>
    edce:	cbz	r3, ede0 <__multadd+0x48>
    edd0:	ldr	r2, [r5, #8]
    edd2:	cmp	r4, r2
    edd4:	bge.n	ede6 <__multadd+0x4e>
    edd6:	add.w	r2, r5, r4, lsl #2
    edda:	adds	r4, #1
    eddc:	str	r3, [r2, #20]
    edde:	str	r4, [r5, #16]
    ede0:	mov	r0, r5
    ede2:	add	sp, #12
    ede4:	pop	{r4, r5, r6, r7, pc}
    ede6:	ldr	r1, [r5, #4]
    ede8:	str	r3, [sp, #4]
    edea:	adds	r1, #1
    edec:	mov	r0, r6
    edee:	bl	ed38 <_Balloc>
    edf2:	ldr	r2, [r5, #16]
    edf4:	adds	r2, #2
    edf6:	add.w	r1, r5, #12
    edfa:	mov	r7, r0
    edfc:	lsls	r2, r2, #2
    edfe:	adds	r0, #12
    ee00:	bl	69a8 <memcpy>
    ee04:	ldr	r2, [r6, #76]	; 0x4c
    ee06:	ldr	r1, [r5, #4]
    ee08:	ldr	r3, [sp, #4]
    ee0a:	ldr.w	r0, [r2, r1, lsl #2]
    ee0e:	str	r0, [r5, #0]
    ee10:	str.w	r5, [r2, r1, lsl #2]
    ee14:	mov	r5, r7
    ee16:	b.n	edd6 <__multadd+0x3e>

0000ee18 <__s2b>:
    ee18:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ee1c:	ldr	r4, [pc, #140]	; (eeac <__s2b+0x94>)
    ee1e:	ldr	r5, [sp, #32]
    ee20:	mov	r7, r3
    ee22:	adds	r3, #8
    ee24:	smull	r4, lr, r4, r3
    ee28:	asrs	r3, r3, #31
    ee2a:	rsb	lr, r3, lr, asr #1
    ee2e:	cmp.w	lr, #1
    ee32:	mov	r6, r0
    ee34:	mov	r4, r1
    ee36:	mov	r8, r2
    ee38:	ble.n	eea6 <__s2b+0x8e>
    ee3a:	movs	r3, #1
    ee3c:	movs	r1, #0
    ee3e:	lsls	r3, r3, #1
    ee40:	cmp	lr, r3
    ee42:	add.w	r1, r1, #1
    ee46:	bgt.n	ee3e <__s2b+0x26>
    ee48:	mov	r0, r6
    ee4a:	bl	ed38 <_Balloc>
    ee4e:	movs	r3, #1
    ee50:	cmp.w	r8, #9
    ee54:	str	r5, [r0, #20]
    ee56:	str	r3, [r0, #16]
    ee58:	ble.n	ee9e <__s2b+0x86>
    ee5a:	add.w	r9, r4, #9
    ee5e:	mov	r5, r9
    ee60:	add	r4, r8
    ee62:	ldrb.w	r3, [r5], #1
    ee66:	mov	r1, r0
    ee68:	subs	r3, #48	; 0x30
    ee6a:	movs	r2, #10
    ee6c:	mov	r0, r6
    ee6e:	bl	ed98 <__multadd>
    ee72:	cmp	r5, r4
    ee74:	bne.n	ee62 <__s2b+0x4a>
    ee76:	add.w	r4, r9, r8
    ee7a:	subs	r4, #8
    ee7c:	cmp	r7, r8
    ee7e:	ble.n	ee9a <__s2b+0x82>
    ee80:	rsb	r7, r8, r7
    ee84:	add	r7, r4
    ee86:	ldrb.w	r3, [r4], #1
    ee8a:	mov	r1, r0
    ee8c:	subs	r3, #48	; 0x30
    ee8e:	movs	r2, #10
    ee90:	mov	r0, r6
    ee92:	bl	ed98 <__multadd>
    ee96:	cmp	r7, r4
    ee98:	bne.n	ee86 <__s2b+0x6e>
    ee9a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ee9e:	adds	r4, #10
    eea0:	mov.w	r8, #9
    eea4:	b.n	ee7c <__s2b+0x64>
    eea6:	movs	r1, #0
    eea8:	b.n	ee48 <__s2b+0x30>
    eeaa:	nop
    eeac:	.word	0x38e38e39

0000eeb0 <__hi0bits>:
    eeb0:	lsrs	r3, r0, #16
    eeb2:	lsls	r3, r3, #16
    eeb4:	cbnz	r3, eee4 <__hi0bits+0x34>
    eeb6:	lsls	r0, r0, #16
    eeb8:	movs	r3, #16
    eeba:	tst.w	r0, #4278190080	; 0xff000000
    eebe:	itt	eq
    eec0:	lsleq	r0, r0, #8
    eec2:	addeq	r3, #8
    eec4:	tst.w	r0, #4026531840	; 0xf0000000
    eec8:	itt	eq
    eeca:	lsleq	r0, r0, #4
    eecc:	addeq	r3, #4
    eece:	tst.w	r0, #3221225472	; 0xc0000000
    eed2:	itt	eq
    eed4:	lsleq	r0, r0, #2
    eed6:	addeq	r3, #2
    eed8:	cmp	r0, #0
    eeda:	blt.n	eeec <__hi0bits+0x3c>
    eedc:	lsls	r2, r0, #1
    eede:	bmi.n	eee8 <__hi0bits+0x38>
    eee0:	movs	r0, #32
    eee2:	bx	lr
    eee4:	movs	r3, #0
    eee6:	b.n	eeba <__hi0bits+0xa>
    eee8:	adds	r0, r3, #1
    eeea:	bx	lr
    eeec:	mov	r0, r3
    eeee:	bx	lr

0000eef0 <__lo0bits>:
    eef0:	ldr	r3, [r0, #0]
    eef2:	ands.w	r2, r3, #7
    eef6:	beq.n	ef08 <__lo0bits+0x18>
    eef8:	lsls	r1, r3, #31
    eefa:	bmi.n	ef3e <__lo0bits+0x4e>
    eefc:	lsls	r2, r3, #30
    eefe:	bmi.n	ef42 <__lo0bits+0x52>
    ef00:	lsrs	r3, r3, #2
    ef02:	str	r3, [r0, #0]
    ef04:	movs	r0, #2
    ef06:	bx	lr
    ef08:	uxth	r1, r3
    ef0a:	cbnz	r1, ef10 <__lo0bits+0x20>
    ef0c:	lsrs	r3, r3, #16
    ef0e:	movs	r2, #16
    ef10:	tst.w	r3, #255	; 0xff
    ef14:	itt	eq
    ef16:	lsreq	r3, r3, #8
    ef18:	addeq	r2, #8
    ef1a:	lsls	r1, r3, #28
    ef1c:	itt	eq
    ef1e:	lsreq	r3, r3, #4
    ef20:	addeq	r2, #4
    ef22:	lsls	r1, r3, #30
    ef24:	itt	eq
    ef26:	lsreq	r3, r3, #2
    ef28:	addeq	r2, #2
    ef2a:	lsls	r1, r3, #31
    ef2c:	bmi.n	ef38 <__lo0bits+0x48>
    ef2e:	lsrs	r3, r3, #1
    ef30:	bne.n	ef36 <__lo0bits+0x46>
    ef32:	movs	r0, #32
    ef34:	bx	lr
    ef36:	adds	r2, #1
    ef38:	str	r3, [r0, #0]
    ef3a:	mov	r0, r2
    ef3c:	bx	lr
    ef3e:	movs	r0, #0
    ef40:	bx	lr
    ef42:	lsrs	r3, r3, #1
    ef44:	str	r3, [r0, #0]
    ef46:	movs	r0, #1
    ef48:	bx	lr
    ef4a:	nop

0000ef4c <__i2b>:
    ef4c:	push	{r4, lr}
    ef4e:	mov	r4, r1
    ef50:	movs	r1, #1
    ef52:	bl	ed38 <_Balloc>
    ef56:	movs	r2, #1
    ef58:	str	r4, [r0, #20]
    ef5a:	str	r2, [r0, #16]
    ef5c:	pop	{r4, pc}
    ef5e:	nop

0000ef60 <__multiply>:
    ef60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef64:	ldr	r5, [r1, #16]
    ef66:	ldr	r7, [r2, #16]
    ef68:	cmp	r5, r7
    ef6a:	sub	sp, #12
    ef6c:	mov	r4, r1
    ef6e:	mov	r6, r2
    ef70:	bge.n	ef7c <__multiply+0x1c>
    ef72:	mov	r2, r5
    ef74:	mov	r4, r6
    ef76:	mov	r5, r7
    ef78:	mov	r6, r1
    ef7a:	mov	r7, r2
    ef7c:	ldr	r3, [r4, #8]
    ef7e:	ldr	r1, [r4, #4]
    ef80:	add.w	r8, r5, r7
    ef84:	cmp	r8, r3
    ef86:	it	gt
    ef88:	addgt	r1, #1
    ef8a:	bl	ed38 <_Balloc>
    ef8e:	add.w	ip, r0, #20
    ef92:	add.w	r9, ip, r8, lsl #2
    ef96:	cmp	ip, r9
    ef98:	str	r0, [sp, #0]
    ef9a:	bcs.n	efa8 <__multiply+0x48>
    ef9c:	mov	r3, ip
    ef9e:	movs	r1, #0
    efa0:	str.w	r1, [r3], #4
    efa4:	cmp	r9, r3
    efa6:	bhi.n	efa0 <__multiply+0x40>
    efa8:	add.w	r2, r6, #20
    efac:	add.w	sl, r2, r7, lsl #2
    efb0:	add.w	r3, r4, #20
    efb4:	cmp	r2, sl
    efb6:	add.w	lr, r3, r5, lsl #2
    efba:	bcs.n	f066 <__multiply+0x106>
    efbc:	str.w	r9, [sp, #4]
    efc0:	mov	r9, r3
    efc2:	ldr.w	r3, [r2], #4
    efc6:	uxth.w	fp, r3
    efca:	cmp.w	fp, #0
    efce:	beq.n	f012 <__multiply+0xb2>
    efd0:	movs	r0, #0
    efd2:	mov	r7, r9
    efd4:	mov	r6, ip
    efd6:	mov	r5, r0
    efd8:	b.n	efdc <__multiply+0x7c>
    efda:	mov	r6, r3
    efdc:	ldr.w	r4, [r7], #4
    efe0:	ldr	r0, [r6, #0]
    efe2:	uxth	r1, r4
    efe4:	uxth	r3, r0
    efe6:	mla	r1, fp, r1, r3
    efea:	lsrs	r4, r4, #16
    efec:	lsrs	r0, r0, #16
    efee:	adds	r3, r1, r5
    eff0:	mla	r0, fp, r4, r0
    eff4:	add.w	r0, r0, r3, lsr #16
    eff8:	uxth	r1, r3
    effa:	mov	r3, r6
    effc:	orr.w	r1, r1, r0, lsl #16
    f000:	cmp	lr, r7
    f002:	mov.w	r5, r0, lsr #16
    f006:	str.w	r1, [r3], #4
    f00a:	bhi.n	efda <__multiply+0x7a>
    f00c:	str	r5, [r6, #4]
    f00e:	ldr.w	r3, [r2, #-4]
    f012:	movs.w	fp, r3, lsr #16
    f016:	beq.n	f05a <__multiply+0xfa>
    f018:	ldr.w	r3, [ip]
    f01c:	mov	r7, ip
    f01e:	mov	r0, r3
    f020:	mov	r5, r9
    f022:	movs	r1, #0
    f024:	b.n	f028 <__multiply+0xc8>
    f026:	mov	r7, r6
    f028:	ldrh	r4, [r5, #0]
    f02a:	lsrs	r0, r0, #16
    f02c:	mla	r0, fp, r4, r0
    f030:	add	r1, r0
    f032:	uxth	r4, r3
    f034:	mov	r6, r7
    f036:	orr.w	r3, r4, r1, lsl #16
    f03a:	str.w	r3, [r6], #4
    f03e:	ldr	r0, [r7, #4]
    f040:	ldr.w	r4, [r5], #4
    f044:	uxth	r3, r0
    f046:	lsrs	r4, r4, #16
    f048:	mla	r4, fp, r4, r3
    f04c:	add.w	r3, r4, r1, lsr #16
    f050:	cmp	lr, r5
    f052:	mov.w	r1, r3, lsr #16
    f056:	bhi.n	f026 <__multiply+0xc6>
    f058:	str	r3, [r7, #4]
    f05a:	cmp	sl, r2
    f05c:	add.w	ip, ip, #4
    f060:	bhi.n	efc2 <__multiply+0x62>
    f062:	ldr.w	r9, [sp, #4]
    f066:	cmp.w	r8, #0
    f06a:	ble.n	f084 <__multiply+0x124>
    f06c:	ldr.w	r3, [r9, #-4]
    f070:	sub.w	r9, r9, #4
    f074:	cbz	r3, f07e <__multiply+0x11e>
    f076:	b.n	f084 <__multiply+0x124>
    f078:	ldr.w	r3, [r9, #-4]!
    f07c:	cbnz	r3, f084 <__multiply+0x124>
    f07e:	subs.w	r8, r8, #1
    f082:	bne.n	f078 <__multiply+0x118>
    f084:	ldr	r0, [sp, #0]
    f086:	str.w	r8, [r0, #16]
    f08a:	add	sp, #12
    f08c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f090 <__pow5mult>:
    f090:	ands.w	r3, r2, #3
    f094:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f098:	mov	r4, r2
    f09a:	mov	r7, r0
    f09c:	bne.n	f0fc <__pow5mult+0x6c>
    f09e:	mov	r6, r1
    f0a0:	asrs	r4, r4, #2
    f0a2:	beq.n	f0de <__pow5mult+0x4e>
    f0a4:	ldr	r5, [r7, #72]	; 0x48
    f0a6:	cbz	r5, f10e <__pow5mult+0x7e>
    f0a8:	lsls	r3, r4, #31
    f0aa:	mov.w	r8, #0
    f0ae:	bmi.n	f0be <__pow5mult+0x2e>
    f0b0:	asrs	r4, r4, #1
    f0b2:	beq.n	f0de <__pow5mult+0x4e>
    f0b4:	ldr	r0, [r5, #0]
    f0b6:	cbz	r0, f0e4 <__pow5mult+0x54>
    f0b8:	mov	r5, r0
    f0ba:	lsls	r3, r4, #31
    f0bc:	bpl.n	f0b0 <__pow5mult+0x20>
    f0be:	mov	r2, r5
    f0c0:	mov	r1, r6
    f0c2:	mov	r0, r7
    f0c4:	bl	ef60 <__multiply>
    f0c8:	cbz	r6, f0f8 <__pow5mult+0x68>
    f0ca:	ldr	r2, [r6, #4]
    f0cc:	ldr	r3, [r7, #76]	; 0x4c
    f0ce:	asrs	r4, r4, #1
    f0d0:	ldr.w	r1, [r3, r2, lsl #2]
    f0d4:	str	r1, [r6, #0]
    f0d6:	str.w	r6, [r3, r2, lsl #2]
    f0da:	mov	r6, r0
    f0dc:	bne.n	f0b4 <__pow5mult+0x24>
    f0de:	mov	r0, r6
    f0e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f0e4:	mov	r2, r5
    f0e6:	mov	r1, r5
    f0e8:	mov	r0, r7
    f0ea:	bl	ef60 <__multiply>
    f0ee:	str	r0, [r5, #0]
    f0f0:	str.w	r8, [r0]
    f0f4:	mov	r5, r0
    f0f6:	b.n	f0ba <__pow5mult+0x2a>
    f0f8:	mov	r6, r0
    f0fa:	b.n	f0b0 <__pow5mult+0x20>
    f0fc:	subs	r2, r3, #1
    f0fe:	ldr	r5, [pc, #44]	; (f12c <__pow5mult+0x9c>)
    f100:	movs	r3, #0
    f102:	ldr.w	r2, [r5, r2, lsl #2]
    f106:	bl	ed98 <__multadd>
    f10a:	mov	r6, r0
    f10c:	b.n	f0a0 <__pow5mult+0x10>
    f10e:	movs	r1, #1
    f110:	mov	r0, r7
    f112:	bl	ed38 <_Balloc>
    f116:	movw	r1, #625	; 0x271
    f11a:	movs	r2, #1
    f11c:	movs	r3, #0
    f11e:	str	r1, [r0, #20]
    f120:	str	r2, [r0, #16]
    f122:	mov	r5, r0
    f124:	str	r0, [r7, #72]	; 0x48
    f126:	str	r3, [r0, #0]
    f128:	b.n	f0a8 <__pow5mult+0x18>
    f12a:	nop
    f12c:	.word	0x20000af0

0000f130 <__lshift>:
    f130:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f134:	mov	r9, r2
    f136:	ldr	r2, [r1, #16]
    f138:	ldr	r3, [r1, #8]
    f13a:	mov.w	r4, r9, asr #5
    f13e:	add.w	r8, r4, r2
    f142:	add.w	r5, r8, #1
    f146:	cmp	r5, r3
    f148:	mov	r6, r1
    f14a:	mov	sl, r0
    f14c:	ldr	r1, [r1, #4]
    f14e:	ble.n	f15a <__lshift+0x2a>
    f150:	lsls	r3, r3, #1
    f152:	cmp	r5, r3
    f154:	add.w	r1, r1, #1
    f158:	bgt.n	f150 <__lshift+0x20>
    f15a:	mov	r0, sl
    f15c:	bl	ed38 <_Balloc>
    f160:	cmp	r4, #0
    f162:	add.w	r2, r0, #20
    f166:	ble.n	f1da <__lshift+0xaa>
    f168:	add.w	r3, r2, r4, lsl #2
    f16c:	movs	r1, #0
    f16e:	str.w	r1, [r2], #4
    f172:	cmp	r3, r2
    f174:	bne.n	f16e <__lshift+0x3e>
    f176:	ldr	r4, [r6, #16]
    f178:	add.w	r1, r6, #20
    f17c:	ands.w	r9, r9, #31
    f180:	add.w	lr, r1, r4, lsl #2
    f184:	beq.n	f1ca <__lshift+0x9a>
    f186:	rsb	r2, r9, #32
    f18a:	movs	r4, #0
    f18c:	ldr	r7, [r1, #0]
    f18e:	lsl.w	ip, r7, r9
    f192:	orr.w	r4, ip, r4
    f196:	mov	ip, r3
    f198:	str.w	r4, [r3], #4
    f19c:	ldr.w	r4, [r1], #4
    f1a0:	cmp	lr, r1
    f1a2:	lsr.w	r4, r4, r2
    f1a6:	bhi.n	f18c <__lshift+0x5c>
    f1a8:	str.w	r4, [ip, #4]
    f1ac:	cbz	r4, f1b2 <__lshift+0x82>
    f1ae:	add.w	r5, r8, #2
    f1b2:	ldr.w	r3, [sl, #76]	; 0x4c
    f1b6:	ldr	r2, [r6, #4]
    f1b8:	subs	r5, #1
    f1ba:	ldr.w	r1, [r3, r2, lsl #2]
    f1be:	str	r5, [r0, #16]
    f1c0:	str	r1, [r6, #0]
    f1c2:	str.w	r6, [r3, r2, lsl #2]
    f1c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f1ca:	subs	r3, #4
    f1cc:	ldr.w	r2, [r1], #4
    f1d0:	str.w	r2, [r3, #4]!
    f1d4:	cmp	lr, r1
    f1d6:	bhi.n	f1cc <__lshift+0x9c>
    f1d8:	b.n	f1b2 <__lshift+0x82>
    f1da:	mov	r3, r2
    f1dc:	b.n	f176 <__lshift+0x46>
    f1de:	nop

0000f1e0 <__mcmp>:
    f1e0:	ldr	r2, [r0, #16]
    f1e2:	ldr	r3, [r1, #16]
    f1e4:	subs	r2, r2, r3
    f1e6:	bne.n	f210 <__mcmp+0x30>
    f1e8:	lsls	r3, r3, #2
    f1ea:	adds	r0, #20
    f1ec:	adds	r1, #20
    f1ee:	add	r1, r3
    f1f0:	push	{r4}
    f1f2:	add	r3, r0
    f1f4:	b.n	f1fa <__mcmp+0x1a>
    f1f6:	cmp	r0, r3
    f1f8:	bcs.n	f214 <__mcmp+0x34>
    f1fa:	ldr.w	r4, [r3, #-4]!
    f1fe:	ldr.w	r2, [r1, #-4]!
    f202:	cmp	r4, r2
    f204:	beq.n	f1f6 <__mcmp+0x16>
    f206:	bcc.n	f21c <__mcmp+0x3c>
    f208:	movs	r0, #1
    f20a:	ldr.w	r4, [sp], #4
    f20e:	bx	lr
    f210:	mov	r0, r2
    f212:	bx	lr
    f214:	movs	r0, #0
    f216:	ldr.w	r4, [sp], #4
    f21a:	bx	lr
    f21c:	mov.w	r0, #4294967295
    f220:	b.n	f20a <__mcmp+0x2a>
    f222:	nop

0000f224 <__mdiff>:
    f224:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f228:	ldr	r3, [r1, #16]
    f22a:	mov	r7, r1
    f22c:	ldr	r1, [r2, #16]
    f22e:	subs	r3, r3, r1
    f230:	cmp	r3, #0
    f232:	mov	r8, r2
    f234:	bne.n	f266 <__mdiff+0x42>
    f236:	lsls	r1, r1, #2
    f238:	add.w	r2, r7, #20
    f23c:	add.w	r5, r8, #20
    f240:	adds	r3, r2, r1
    f242:	add	r1, r5
    f244:	b.n	f24a <__mdiff+0x26>
    f246:	cmp	r2, r3
    f248:	bcs.n	f308 <__mdiff+0xe4>
    f24a:	ldr.w	r6, [r3, #-4]!
    f24e:	ldr.w	r4, [r1, #-4]!
    f252:	cmp	r6, r4
    f254:	beq.n	f246 <__mdiff+0x22>
    f256:	bcs.n	f31a <__mdiff+0xf6>
    f258:	mov	r3, r7
    f25a:	mov	r4, r2
    f25c:	mov	r7, r8
    f25e:	mov.w	r9, #1
    f262:	mov	r8, r3
    f264:	b.n	f274 <__mdiff+0x50>
    f266:	blt.n	f324 <__mdiff+0x100>
    f268:	add.w	r5, r7, #20
    f26c:	add.w	r4, r2, #20
    f270:	mov.w	r9, #0
    f274:	ldr	r1, [r7, #4]
    f276:	bl	ed38 <_Balloc>
    f27a:	ldr.w	r3, [r8, #16]
    f27e:	ldr	r6, [r7, #16]
    f280:	str.w	r9, [r0, #12]
    f284:	add.w	ip, r4, r3, lsl #2
    f288:	mov	lr, r4
    f28a:	add.w	r7, r5, r6, lsl #2
    f28e:	add.w	r4, r0, #20
    f292:	movs	r3, #0
    f294:	ldr.w	r1, [lr], #4
    f298:	ldr.w	r8, [r5], #4
    f29c:	uxth	r2, r1
    f29e:	uxtah	r3, r3, r8
    f2a2:	lsrs	r1, r1, #16
    f2a4:	subs	r2, r3, r2
    f2a6:	rsb	r3, r1, r8, lsr #16
    f2aa:	add.w	r3, r3, r2, asr #16
    f2ae:	uxth	r2, r2
    f2b0:	orr.w	r2, r2, r3, lsl #16
    f2b4:	cmp	ip, lr
    f2b6:	str.w	r2, [r4], #4
    f2ba:	mov.w	r3, r3, asr #16
    f2be:	bhi.n	f294 <__mdiff+0x70>
    f2c0:	cmp	r7, r5
    f2c2:	bls.n	f2f4 <__mdiff+0xd0>
    f2c4:	mov	ip, r4
    f2c6:	mov	r1, r5
    f2c8:	ldr.w	lr, [r1], #4
    f2cc:	uxtah	r2, r3, lr
    f2d0:	asrs	r3, r2, #16
    f2d2:	add.w	r3, r3, lr, lsr #16
    f2d6:	uxth	r2, r2
    f2d8:	orr.w	r2, r2, r3, lsl #16
    f2dc:	cmp	r7, r1
    f2de:	str.w	r2, [ip], #4
    f2e2:	mov.w	r3, r3, asr #16
    f2e6:	bhi.n	f2c8 <__mdiff+0xa4>
    f2e8:	mvns	r5, r5
    f2ea:	add	r5, r7
    f2ec:	bic.w	r5, r5, #3
    f2f0:	adds	r5, #4
    f2f2:	add	r4, r5
    f2f4:	subs	r4, #4
    f2f6:	cbnz	r2, f302 <__mdiff+0xde>
    f2f8:	ldr.w	r3, [r4, #-4]!
    f2fc:	subs	r6, #1
    f2fe:	cmp	r3, #0
    f300:	beq.n	f2f8 <__mdiff+0xd4>
    f302:	str	r6, [r0, #16]
    f304:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f308:	movs	r1, #0
    f30a:	bl	ed38 <_Balloc>
    f30e:	movs	r2, #1
    f310:	movs	r3, #0
    f312:	str	r2, [r0, #16]
    f314:	str	r3, [r0, #20]
    f316:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f31a:	mov	r4, r5
    f31c:	mov.w	r9, #0
    f320:	mov	r5, r2
    f322:	b.n	f274 <__mdiff+0x50>
    f324:	mov	r3, r7
    f326:	add.w	r4, r7, #20
    f32a:	add.w	r5, r8, #20
    f32e:	mov	r7, r8
    f330:	mov.w	r9, #1
    f334:	mov	r8, r3
    f336:	b.n	f274 <__mdiff+0x50>

0000f338 <__ulp>:
    f338:	ldr	r3, [pc, #76]	; (f388 <__ulp+0x50>)
    f33a:	vmov	r2, s1
    f33e:	ands	r2, r3
    f340:	sub.w	r3, r2, #54525952	; 0x3400000
    f344:	cmp	r3, #0
    f346:	ble.n	f352 <__ulp+0x1a>
    f348:	movs	r0, #0
    f34a:	mov	r1, r3
    f34c:	vmov	d0, r0, r1
    f350:	bx	lr
    f352:	negs	r3, r3
    f354:	asrs	r3, r3, #20
    f356:	cmp	r3, #19
    f358:	ble.n	f376 <__ulp+0x3e>
    f35a:	subs	r3, #20
    f35c:	cmp	r3, #30
    f35e:	ittte	le
    f360:	rsble	r3, r3, #31
    f364:	movle	r2, #1
    f366:	lslle.w	r3, r2, r3
    f36a:	movgt	r3, #1
    f36c:	movs	r1, #0
    f36e:	mov	r0, r3
    f370:	vmov	d0, r0, r1
    f374:	bx	lr
    f376:	mov.w	r2, #524288	; 0x80000
    f37a:	movs	r0, #0
    f37c:	asr.w	r1, r2, r3
    f380:	vmov	d0, r0, r1
    f384:	bx	lr
    f386:	nop
    f388:	.word	0x7ff00000

0000f38c <__b2d>:
    f38c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f390:	ldr	r6, [r0, #16]
    f392:	add.w	r8, r0, #20
    f396:	add.w	r6, r8, r6, lsl #2
    f39a:	ldr.w	r7, [r6, #-4]
    f39e:	mov	r0, r7
    f3a0:	bl	eeb0 <__hi0bits>
    f3a4:	rsb	r3, r0, #32
    f3a8:	cmp	r0, #10
    f3aa:	str	r3, [r1, #0]
    f3ac:	sub.w	r3, r6, #4
    f3b0:	bgt.n	f3e4 <__b2d+0x58>
    f3b2:	cmp	r8, r3
    f3b4:	rsb	r2, r0, #11
    f3b8:	it	cc
    f3ba:	ldrcc.w	r3, [r6, #-8]
    f3be:	lsr.w	r1, r7, r2
    f3c2:	add.w	r0, r0, #21
    f3c6:	orr.w	r5, r1, #1069547520	; 0x3fc00000
    f3ca:	ite	cc
    f3cc:	lsrcc	r3, r2
    f3ce:	movcs	r3, #0
    f3d0:	lsl.w	r0, r7, r0
    f3d4:	orr.w	r5, r5, #3145728	; 0x300000
    f3d8:	orr.w	r4, r0, r3
    f3dc:	vmov	d0, r4, r5
    f3e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f3e4:	cmp	r8, r3
    f3e6:	bcs.n	f42a <__b2d+0x9e>
    f3e8:	subs.w	r3, r0, #11
    f3ec:	ldr.w	r2, [r6, #-8]
    f3f0:	beq.n	f430 <__b2d+0xa4>
    f3f2:	lsl.w	r0, r7, r3
    f3f6:	orr.w	r7, r0, #1069547520	; 0x3fc00000
    f3fa:	rsb	lr, r3, #32
    f3fe:	sub.w	r1, r6, #8
    f402:	orr.w	r7, r7, #3145728	; 0x300000
    f406:	lsr.w	r0, r2, lr
    f40a:	cmp	r8, r1
    f40c:	orr.w	r5, r7, r0
    f410:	bcs.n	f454 <__b2d+0xc8>
    f412:	ldr.w	r1, [r6, #-12]
    f416:	lsl.w	r0, r2, r3
    f41a:	lsr.w	r3, r1, lr
    f41e:	orrs	r0, r3
    f420:	mov	r4, r0
    f422:	vmov	d0, r4, r5
    f426:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f42a:	subs	r0, #11
    f42c:	bne.n	f442 <__b2d+0xb6>
    f42e:	mov	r2, r0
    f430:	orr.w	r5, r7, #1069547520	; 0x3fc00000
    f434:	orr.w	r5, r5, #3145728	; 0x300000
    f438:	mov	r4, r2
    f43a:	vmov	d0, r4, r5
    f43e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f442:	lsl.w	r0, r7, r0
    f446:	orr.w	r5, r0, #1069547520	; 0x3fc00000
    f44a:	movs	r0, #0
    f44c:	orr.w	r5, r5, #3145728	; 0x300000
    f450:	mov	r4, r0
    f452:	b.n	f422 <__b2d+0x96>
    f454:	lsl.w	r0, r2, r3
    f458:	mov	r4, r0
    f45a:	b.n	f422 <__b2d+0x96>

0000f45c <__d2b>:
    f45c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f460:	vmov	r6, r7, d0
    f464:	sub	sp, #12
    f466:	mov	r8, r1
    f468:	movs	r1, #1
    f46a:	mov	r4, r7
    f46c:	ubfx	r5, r7, #20, #11
    f470:	mov	r7, r2
    f472:	bl	ed38 <_Balloc>
    f476:	ubfx	r4, r4, #0, #20
    f47a:	mov	r9, r0
    f47c:	cbz	r5, f482 <__d2b+0x26>
    f47e:	orr.w	r4, r4, #1048576	; 0x100000
    f482:	str	r4, [sp, #4]
    f484:	cbz	r6, f4ce <__d2b+0x72>
    f486:	add	r0, sp, #8
    f488:	str.w	r6, [r0, #-8]!
    f48c:	bl	eef0 <__lo0bits>
    f490:	cmp	r0, #0
    f492:	bne.n	f4fe <__d2b+0xa2>
    f494:	ldmia.w	sp, {r2, r3}
    f498:	str.w	r2, [r9, #20]
    f49c:	cmp	r3, #0
    f49e:	ite	eq
    f4a0:	moveq	r1, #1
    f4a2:	movne	r1, #2
    f4a4:	str.w	r3, [r9, #24]
    f4a8:	str.w	r1, [r9, #16]
    f4ac:	cbnz	r5, f4e6 <__d2b+0x8a>
    f4ae:	add.w	r3, r9, r1, lsl #2
    f4b2:	subw	r0, r0, #1074	; 0x432
    f4b6:	str.w	r0, [r8]
    f4ba:	ldr	r0, [r3, #16]
    f4bc:	bl	eeb0 <__hi0bits>
    f4c0:	rsb	r0, r0, r1, lsl #5
    f4c4:	str	r0, [r7, #0]
    f4c6:	mov	r0, r9
    f4c8:	add	sp, #12
    f4ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f4ce:	add	r0, sp, #4
    f4d0:	bl	eef0 <__lo0bits>
    f4d4:	ldr	r3, [sp, #4]
    f4d6:	str.w	r3, [r9, #20]
    f4da:	movs	r1, #1
    f4dc:	adds	r0, #32
    f4de:	str.w	r1, [r9, #16]
    f4e2:	cmp	r5, #0
    f4e4:	beq.n	f4ae <__d2b+0x52>
    f4e6:	subw	r5, r5, #1075	; 0x433
    f4ea:	add	r5, r0
    f4ec:	rsb	r0, r0, #53	; 0x35
    f4f0:	str.w	r5, [r8]
    f4f4:	str	r0, [r7, #0]
    f4f6:	mov	r0, r9
    f4f8:	add	sp, #12
    f4fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f4fe:	ldmia.w	sp, {r2, r3}
    f502:	rsb	r1, r0, #32
    f506:	lsl.w	r1, r3, r1
    f50a:	orrs	r2, r1
    f50c:	lsrs	r3, r0
    f50e:	str	r3, [sp, #4]
    f510:	str.w	r2, [r9, #20]
    f514:	b.n	f49c <__d2b+0x40>
    f516:	nop

0000f518 <__ratio>:
    f518:	push	{r4, r5, lr}
    f51a:	sub	sp, #28
    f51c:	mov	r4, r1
    f51e:	add	r1, sp, #16
    f520:	mov	r5, r0
    f522:	bl	f38c <__b2d>
    f526:	mov	r0, r4
    f528:	add	r1, sp, #20
    f52a:	vstr	d0, [sp]
    f52e:	bl	f38c <__b2d>
    f532:	ldr	r0, [r4, #16]
    f534:	ldr	r1, [r5, #16]
    f536:	ldr	r3, [sp, #20]
    f538:	ldr	r2, [sp, #16]
    f53a:	subs	r1, r1, r0
    f53c:	subs	r2, r2, r3
    f53e:	add.w	r3, r2, r1, lsl #5
    f542:	vstr	d0, [sp, #8]
    f546:	cmp	r3, #0
    f548:	ldrd	r0, r1, [sp]
    f54c:	ldrd	r4, r5, [sp, #8]
    f550:	ble.n	f56a <__ratio+0x52>
    f552:	add.w	r1, r1, r3, lsl #20
    f556:	strd	r0, r1, [sp]
    f55a:	vldr	d7, [sp]
    f55e:	vldr	d6, [sp, #8]
    f562:	vdiv.f64	d0, d7, d6
    f566:	add	sp, #28
    f568:	pop	{r4, r5, pc}
    f56a:	sub.w	r5, r5, r3, lsl #20
    f56e:	strd	r4, r5, [sp, #8]
    f572:	b.n	f55a <__ratio+0x42>

0000f574 <__copybits>:
    f574:	push	{r4, r5, r6}
    f576:	ldr	r4, [r2, #16]
    f578:	add.w	r3, r2, #20
    f57c:	subs	r1, #1
    f57e:	asrs	r6, r1, #5
    f580:	add.w	r4, r3, r4, lsl #2
    f584:	adds	r6, #1
    f586:	cmp	r3, r4
    f588:	add.w	r6, r0, r6, lsl #2
    f58c:	bcs.n	f5a8 <__copybits+0x34>
    f58e:	subs	r1, r0, #4
    f590:	ldr.w	r5, [r3], #4
    f594:	str.w	r5, [r1, #4]!
    f598:	cmp	r4, r3
    f59a:	bhi.n	f590 <__copybits+0x1c>
    f59c:	subs	r3, r4, r2
    f59e:	subs	r3, #21
    f5a0:	bic.w	r3, r3, #3
    f5a4:	adds	r3, #4
    f5a6:	add	r0, r3
    f5a8:	cmp	r6, r0
    f5aa:	bls.n	f5b6 <__copybits+0x42>
    f5ac:	movs	r3, #0
    f5ae:	str.w	r3, [r0], #4
    f5b2:	cmp	r6, r0
    f5b4:	bhi.n	f5ae <__copybits+0x3a>
    f5b6:	pop	{r4, r5, r6}
    f5b8:	bx	lr
    f5ba:	nop

0000f5bc <__any_on>:
    f5bc:	ldr	r3, [r0, #16]
    f5be:	asrs	r2, r1, #5
    f5c0:	cmp	r3, r2
    f5c2:	push	{r4}
    f5c4:	add.w	r4, r0, #20
    f5c8:	bge.n	f5ec <__any_on+0x30>
    f5ca:	add.w	r3, r4, r3, lsl #2
    f5ce:	cmp	r4, r3
    f5d0:	bcs.n	f616 <__any_on+0x5a>
    f5d2:	ldr.w	r0, [r3, #-4]
    f5d6:	subs	r3, #4
    f5d8:	cbz	r0, f5e2 <__any_on+0x26>
    f5da:	b.n	f608 <__any_on+0x4c>
    f5dc:	ldr.w	r2, [r3, #-4]!
    f5e0:	cbnz	r2, f608 <__any_on+0x4c>
    f5e2:	cmp	r4, r3
    f5e4:	bcc.n	f5dc <__any_on+0x20>
    f5e6:	ldr.w	r4, [sp], #4
    f5ea:	bx	lr
    f5ec:	ble.n	f610 <__any_on+0x54>
    f5ee:	ands.w	r1, r1, #31
    f5f2:	beq.n	f610 <__any_on+0x54>
    f5f4:	ldr.w	r0, [r4, r2, lsl #2]
    f5f8:	lsr.w	r3, r0, r1
    f5fc:	lsl.w	r1, r3, r1
    f600:	cmp	r0, r1
    f602:	add.w	r3, r4, r2, lsl #2
    f606:	beq.n	f5ce <__any_on+0x12>
    f608:	movs	r0, #1
    f60a:	ldr.w	r4, [sp], #4
    f60e:	bx	lr
    f610:	add.w	r3, r4, r2, lsl #2
    f614:	b.n	f5ce <__any_on+0x12>
    f616:	movs	r0, #0
    f618:	b.n	f5e6 <__any_on+0x2a>
    f61a:	nop

0000f61c <__sccl>:
    f61c:	push	{r4, r5, r6}
    f61e:	ldrb	r5, [r1, #0]
    f620:	cmp	r5, #94	; 0x5e
    f622:	beq.n	f684 <__sccl+0x68>
    f624:	movs	r2, #0
    f626:	adds	r1, #1
    f628:	mov	r6, r2
    f62a:	subs	r3, r0, #1
    f62c:	add.w	r4, r0, #255	; 0xff
    f630:	strb.w	r2, [r3, #1]!
    f634:	cmp	r3, r4
    f636:	bne.n	f630 <__sccl+0x14>
    f638:	cbz	r5, f65c <__sccl+0x40>
    f63a:	eor.w	r2, r6, #1
    f63e:	strb	r2, [r0, r5]
    f640:	adds	r4, r1, #1
    f642:	ldrb.w	r3, [r4, #-1]
    f646:	cmp	r3, #45	; 0x2d
    f648:	beq.n	f668 <__sccl+0x4c>
    f64a:	cmp	r3, #93	; 0x5d
    f64c:	beq.n	f662 <__sccl+0x46>
    f64e:	cbz	r3, f656 <__sccl+0x3a>
    f650:	mov	r5, r3
    f652:	mov	r1, r4
    f654:	b.n	f63e <__sccl+0x22>
    f656:	mov	r0, r1
    f658:	pop	{r4, r5, r6}
    f65a:	bx	lr
    f65c:	subs	r0, r1, #1
    f65e:	pop	{r4, r5, r6}
    f660:	bx	lr
    f662:	mov	r0, r4
    f664:	pop	{r4, r5, r6}
    f666:	bx	lr
    f668:	ldrb	r6, [r1, #1]
    f66a:	cmp	r6, #93	; 0x5d
    f66c:	beq.n	f650 <__sccl+0x34>
    f66e:	cmp	r5, r6
    f670:	bgt.n	f650 <__sccl+0x34>
    f672:	adds	r1, #2
    f674:	adds	r3, r0, r5
    f676:	adds	r5, #1
    f678:	cmp	r6, r5
    f67a:	strb.w	r2, [r3, #1]!
    f67e:	bgt.n	f676 <__sccl+0x5a>
    f680:	adds	r4, #2
    f682:	b.n	f642 <__sccl+0x26>
    f684:	movs	r2, #1
    f686:	ldrb	r5, [r1, #1]
    f688:	mov	r6, r2
    f68a:	adds	r1, #2
    f68c:	b.n	f62a <__sccl+0xe>
    f68e:	nop

0000f690 <nanf>:
    f690:	vldr	s0, [pc, #4]	; f698 <nanf+0x8>
    f694:	bx	lr
    f696:	nop
    f698:	.word	0x7fc00000

0000f69c <_strtoll_l.isra.0>:
    f69c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f6a0:	sub	sp, #20
    f6a2:	mov	sl, r3
    f6a4:	str	r1, [sp, #8]
    f6a6:	str	r0, [sp, #12]
    f6a8:	str	r2, [sp, #4]
    f6aa:	mov	r7, r1
    f6ac:	ldr	r6, [sp, #56]	; 0x38
    f6ae:	b.n	f6b2 <_strtoll_l.isra.0+0x16>
    f6b0:	mov	r7, r5
    f6b2:	mov	r5, r7
    f6b4:	mov	r0, r6
    f6b6:	ldrb.w	r4, [r5], #1
    f6ba:	bl	905c <__locale_ctype_ptr_l>
    f6be:	add	r0, r4
    f6c0:	ldrb	r3, [r0, #1]
    f6c2:	and.w	r3, r3, #8
    f6c6:	and.w	r2, r3, #255	; 0xff
    f6ca:	cmp	r3, #0
    f6cc:	bne.n	f6b0 <_strtoll_l.isra.0+0x14>
    f6ce:	cmp	r4, #45	; 0x2d
    f6d0:	beq.w	f7da <_strtoll_l.isra.0+0x13e>
    f6d4:	cmp	r4, #43	; 0x2b
    f6d6:	it	eq
    f6d8:	ldrbeq	r4, [r7, #1]
    f6da:	str	r2, [sp, #0]
    f6dc:	it	eq
    f6de:	addeq	r5, r7, #2
    f6e0:	cmp.w	sl, #0
    f6e4:	beq.n	f700 <_strtoll_l.isra.0+0x64>
    f6e6:	cmp.w	sl, #16
    f6ea:	beq.w	f818 <_strtoll_l.isra.0+0x17c>
    f6ee:	ldr	r3, [sp, #0]
    f6f0:	mov	r6, sl
    f6f2:	asrs	r7, r6, #31
    f6f4:	cbnz	r3, f712 <_strtoll_l.isra.0+0x76>
    f6f6:	mov.w	r8, #4294967295
    f6fa:	mvn.w	r9, #2147483648	; 0x80000000
    f6fe:	b.n	f71a <_strtoll_l.isra.0+0x7e>
    f700:	cmp	r4, #48	; 0x30
    f702:	beq.n	f804 <_strtoll_l.isra.0+0x168>
    f704:	movs	r6, #10
    f706:	movs	r7, #0
    f708:	mov.w	sl, #10
    f70c:	ldr	r3, [sp, #0]
    f70e:	cmp	r3, #0
    f710:	beq.n	f6f6 <_strtoll_l.isra.0+0x5a>
    f712:	mov.w	r8, #0
    f716:	mov.w	r9, #2147483648	; 0x80000000
    f71a:	mov	r2, r6
    f71c:	mov	r3, r7
    f71e:	mov	r0, r8
    f720:	mov	r1, r9
    f722:	bl	8ca8 <__aeabi_uldivmod>
    f726:	mov	r3, r7
    f728:	mov	fp, r2
    f72a:	mov	r0, r8
    f72c:	mov	r2, r6
    f72e:	mov	r1, r9
    f730:	bl	8ca8 <__aeabi_uldivmod>
    f734:	mov.w	lr, #0
    f738:	movs	r2, #0
    f73a:	movs	r3, #0
    f73c:	b.n	f75e <_strtoll_l.isra.0+0xc2>
    f73e:	beq.n	f7cc <_strtoll_l.isra.0+0x130>
    f740:	mul.w	r4, r2, r7
    f744:	mla	r4, r6, r3, r4
    f748:	umull	r2, r3, r2, r6
    f74c:	add	r3, r4
    f74e:	adds.w	r2, r2, ip
    f752:	adc.w	r3, r3, ip, asr #31
    f756:	mov.w	lr, #1
    f75a:	ldrb.w	r4, [r5], #1
    f75e:	sub.w	ip, r4, #48	; 0x30
    f762:	cmp.w	ip, #9
    f766:	bls.n	f776 <_strtoll_l.isra.0+0xda>
    f768:	sub.w	ip, r4, #65	; 0x41
    f76c:	cmp.w	ip, #25
    f770:	bhi.n	f78e <_strtoll_l.isra.0+0xf2>
    f772:	sub.w	ip, r4, #55	; 0x37
    f776:	cmp	sl, ip
    f778:	ble.n	f7a0 <_strtoll_l.isra.0+0x104>
    f77a:	cmp.w	lr, #4294967295
    f77e:	beq.n	f75a <_strtoll_l.isra.0+0xbe>
    f780:	cmp	r1, r3
    f782:	it	eq
    f784:	cmpeq	r0, r2
    f786:	bcs.n	f73e <_strtoll_l.isra.0+0xa2>
    f788:	mov.w	lr, #4294967295
    f78c:	b.n	f75a <_strtoll_l.isra.0+0xbe>
    f78e:	sub.w	ip, r4, #97	; 0x61
    f792:	cmp.w	ip, #25
    f796:	bhi.n	f7a0 <_strtoll_l.isra.0+0x104>
    f798:	sub.w	ip, r4, #87	; 0x57
    f79c:	cmp	sl, ip
    f79e:	bgt.n	f77a <_strtoll_l.isra.0+0xde>
    f7a0:	cmp.w	lr, #4294967295
    f7a4:	beq.n	f7e4 <_strtoll_l.isra.0+0x148>
    f7a6:	ldr	r1, [sp, #0]
    f7a8:	cbz	r1, f7b0 <_strtoll_l.isra.0+0x114>
    f7aa:	negs	r2, r2
    f7ac:	sbc.w	r3, r3, r3, lsl #1
    f7b0:	ldr	r1, [sp, #4]
    f7b2:	cmp	r1, #0
    f7b4:	beq.n	f83c <_strtoll_l.isra.0+0x1a0>
    f7b6:	cmp.w	lr, #0
    f7ba:	bne.n	f7fc <_strtoll_l.isra.0+0x160>
    f7bc:	ldr	r5, [sp, #8]
    f7be:	mov	r0, r2
    f7c0:	mov	r1, r3
    f7c2:	ldr	r3, [sp, #4]
    f7c4:	str	r5, [r3, #0]
    f7c6:	add	sp, #20
    f7c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7cc:	cmp	fp, ip
    f7ce:	bge.n	f740 <_strtoll_l.isra.0+0xa4>
    f7d0:	mov	r2, r0
    f7d2:	mov	r3, r1
    f7d4:	mov.w	lr, #4294967295
    f7d8:	b.n	f75a <_strtoll_l.isra.0+0xbe>
    f7da:	movs	r3, #1
    f7dc:	adds	r5, r7, #2
    f7de:	ldrb	r4, [r7, #1]
    f7e0:	str	r3, [sp, #0]
    f7e2:	b.n	f6e0 <_strtoll_l.isra.0+0x44>
    f7e4:	ldr	r3, [sp, #0]
    f7e6:	cbnz	r3, f834 <_strtoll_l.isra.0+0x198>
    f7e8:	mov.w	r0, #4294967295
    f7ec:	mvn.w	r1, #2147483648	; 0x80000000
    f7f0:	ldr	r2, [sp, #12]
    f7f2:	movs	r3, #34	; 0x22
    f7f4:	str	r3, [r2, #0]
    f7f6:	ldr	r3, [sp, #4]
    f7f8:	cbnz	r3, f800 <_strtoll_l.isra.0+0x164>
    f7fa:	b.n	f7c6 <_strtoll_l.isra.0+0x12a>
    f7fc:	mov	r0, r2
    f7fe:	mov	r1, r3
    f800:	subs	r5, #1
    f802:	b.n	f7c2 <_strtoll_l.isra.0+0x126>
    f804:	ldrb	r3, [r5, #0]
    f806:	and.w	r3, r3, #223	; 0xdf
    f80a:	cmp	r3, #88	; 0x58
    f80c:	beq.n	f826 <_strtoll_l.isra.0+0x18a>
    f80e:	movs	r6, #8
    f810:	movs	r7, #0
    f812:	mov.w	sl, #8
    f816:	b.n	f70c <_strtoll_l.isra.0+0x70>
    f818:	cmp	r4, #48	; 0x30
    f81a:	bne.n	f842 <_strtoll_l.isra.0+0x1a6>
    f81c:	ldrb	r3, [r5, #0]
    f81e:	and.w	r3, r3, #223	; 0xdf
    f822:	cmp	r3, #88	; 0x58
    f824:	bne.n	f842 <_strtoll_l.isra.0+0x1a6>
    f826:	ldrb	r4, [r5, #1]
    f828:	movs	r6, #16
    f82a:	movs	r7, #0
    f82c:	adds	r5, #2
    f82e:	mov.w	sl, #16
    f832:	b.n	f70c <_strtoll_l.isra.0+0x70>
    f834:	movs	r0, #0
    f836:	mov.w	r1, #2147483648	; 0x80000000
    f83a:	b.n	f7f0 <_strtoll_l.isra.0+0x154>
    f83c:	mov	r0, r2
    f83e:	mov	r1, r3
    f840:	b.n	f7c6 <_strtoll_l.isra.0+0x12a>
    f842:	movs	r6, #16
    f844:	movs	r7, #0
    f846:	b.n	f70c <_strtoll_l.isra.0+0x70>

0000f848 <_strtoll_r>:
    f848:	push	{r4, r5, lr}
    f84a:	ldr	r4, [pc, #24]	; (f864 <_strtoll_r+0x1c>)
    f84c:	ldr	r5, [pc, #24]	; (f868 <_strtoll_r+0x20>)
    f84e:	ldr	r4, [r4, #0]
    f850:	ldr	r4, [r4, #52]	; 0x34
    f852:	sub	sp, #12
    f854:	cmp	r4, #0
    f856:	it	eq
    f858:	moveq	r4, r5
    f85a:	str	r4, [sp, #0]
    f85c:	bl	f69c <_strtoll_l.isra.0>
    f860:	add	sp, #12
    f862:	pop	{r4, r5, pc}
    f864:	.word	0x2000215c
    f868:	.word	0x20001be0

0000f86c <_strtoul_l.isra.0>:
    f86c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f870:	ldr.w	r9, [sp, #40]	; 0x28
    f874:	mov	r6, r1
    f876:	mov	r7, r0
    f878:	mov	r5, r2
    f87a:	mov	r8, r3
    f87c:	mov	fp, r1
    f87e:	b.n	f882 <_strtoul_l.isra.0+0x16>
    f880:	mov	fp, r4
    f882:	mov	r4, fp
    f884:	mov	r0, r9
    f886:	ldrb.w	sl, [r4], #1
    f88a:	bl	905c <__locale_ctype_ptr_l>
    f88e:	add	r0, sl
    f890:	ldrb	r0, [r0, #1]
    f892:	and.w	r0, r0, #8
    f896:	and.w	ip, r0, #255	; 0xff
    f89a:	cmp	r0, #0
    f89c:	bne.n	f880 <_strtoul_l.isra.0+0x14>
    f89e:	mov	r1, sl
    f8a0:	cmp	r1, #45	; 0x2d
    f8a2:	beq.n	f968 <_strtoul_l.isra.0+0xfc>
    f8a4:	cmp	r1, #43	; 0x2b
    f8a6:	itt	eq
    f8a8:	ldrbeq.w	r1, [fp, #1]
    f8ac:	addeq.w	r4, fp, #2
    f8b0:	cmp.w	r8, #0
    f8b4:	beq.n	f8d0 <_strtoul_l.isra.0+0x64>
    f8b6:	cmp.w	r8, #16
    f8ba:	beq.n	f976 <_strtoul_l.isra.0+0x10a>
    f8bc:	mov.w	r3, #4294967295
    f8c0:	udiv	r3, r3, r8
    f8c4:	mul.w	sl, r8, r3
    f8c8:	mvn.w	sl, sl
    f8cc:	mov	r9, r8
    f8ce:	b.n	f8e0 <_strtoul_l.isra.0+0x74>
    f8d0:	cmp	r1, #48	; 0x30
    f8d2:	beq.n	f998 <_strtoul_l.isra.0+0x12c>
    f8d4:	mov.w	r8, #10
    f8d8:	ldr	r3, [pc, #244]	; (f9d0 <_strtoul_l.isra.0+0x164>)
    f8da:	mov	r9, r8
    f8dc:	mov.w	sl, #5
    f8e0:	mov.w	lr, #0
    f8e4:	mov	r0, lr
    f8e6:	b.n	f8f6 <_strtoul_l.isra.0+0x8a>
    f8e8:	beq.n	f94a <_strtoul_l.isra.0+0xde>
    f8ea:	mla	r0, r9, r0, r2
    f8ee:	mov.w	lr, #1
    f8f2:	ldrb.w	r1, [r4], #1
    f8f6:	sub.w	r2, r1, #48	; 0x30
    f8fa:	cmp	r2, #9
    f8fc:	bls.n	f90a <_strtoul_l.isra.0+0x9e>
    f8fe:	sub.w	r2, r1, #65	; 0x41
    f902:	cmp	r2, #25
    f904:	bhi.n	f91e <_strtoul_l.isra.0+0xb2>
    f906:	sub.w	r2, r1, #55	; 0x37
    f90a:	cmp	r8, r2
    f90c:	ble.n	f92e <_strtoul_l.isra.0+0xc2>
    f90e:	cmp.w	lr, #4294967295
    f912:	beq.n	f8f2 <_strtoul_l.isra.0+0x86>
    f914:	cmp	r0, r3
    f916:	bls.n	f8e8 <_strtoul_l.isra.0+0x7c>
    f918:	mov.w	lr, #4294967295
    f91c:	b.n	f8f2 <_strtoul_l.isra.0+0x86>
    f91e:	sub.w	r2, r1, #97	; 0x61
    f922:	cmp	r2, #25
    f924:	bhi.n	f92e <_strtoul_l.isra.0+0xc2>
    f926:	sub.w	r2, r1, #87	; 0x57
    f92a:	cmp	r8, r2
    f92c:	bgt.n	f90e <_strtoul_l.isra.0+0xa2>
    f92e:	cmp.w	lr, #4294967295
    f932:	beq.n	f958 <_strtoul_l.isra.0+0xec>
    f934:	cmp.w	ip, #0
    f938:	beq.n	f93c <_strtoul_l.isra.0+0xd0>
    f93a:	negs	r0, r0
    f93c:	cbz	r5, f954 <_strtoul_l.isra.0+0xe8>
    f93e:	cmp.w	lr, #0
    f942:	bne.n	f960 <_strtoul_l.isra.0+0xf4>
    f944:	str	r6, [r5, #0]
    f946:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f94a:	cmp	r2, sl
    f94c:	ble.n	f8ea <_strtoul_l.isra.0+0x7e>
    f94e:	mov.w	lr, #4294967295
    f952:	b.n	f8f2 <_strtoul_l.isra.0+0x86>
    f954:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f958:	movs	r3, #34	; 0x22
    f95a:	str	r3, [r7, #0]
    f95c:	mov	r0, lr
    f95e:	cbz	r5, f9b2 <_strtoul_l.isra.0+0x146>
    f960:	subs	r6, r4, #1
    f962:	str	r6, [r5, #0]
    f964:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f968:	add.w	r4, fp, #2
    f96c:	ldrb.w	r1, [fp, #1]
    f970:	mov.w	ip, #1
    f974:	b.n	f8b0 <_strtoul_l.isra.0+0x44>
    f976:	cmp	r1, #48	; 0x30
    f978:	bne.n	f9b6 <_strtoul_l.isra.0+0x14a>
    f97a:	ldrb	r3, [r4, #0]
    f97c:	and.w	r3, r3, #223	; 0xdf
    f980:	cmp	r3, #88	; 0x58
    f982:	bne.n	f9c2 <_strtoul_l.isra.0+0x156>
    f984:	mov.w	r9, #16
    f988:	ldrb	r1, [r4, #1]
    f98a:	mov	r8, r9
    f98c:	mov.w	sl, #15
    f990:	adds	r4, #2
    f992:	mvn.w	r3, #4026531840	; 0xf0000000
    f996:	b.n	f8e0 <_strtoul_l.isra.0+0x74>
    f998:	ldrb	r3, [r4, #0]
    f99a:	and.w	r3, r3, #223	; 0xdf
    f99e:	cmp	r3, #88	; 0x58
    f9a0:	beq.n	f984 <_strtoul_l.isra.0+0x118>
    f9a2:	mov.w	r8, #8
    f9a6:	mov	r9, r8
    f9a8:	mov.w	sl, #7
    f9ac:	mvn.w	r3, #3758096384	; 0xe0000000
    f9b0:	b.n	f8e0 <_strtoul_l.isra.0+0x74>
    f9b2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f9b6:	mov.w	sl, #15
    f9ba:	mvn.w	r3, #4026531840	; 0xf0000000
    f9be:	mov	r9, r8
    f9c0:	b.n	f8e0 <_strtoul_l.isra.0+0x74>
    f9c2:	mov	r9, r8
    f9c4:	mov.w	sl, #15
    f9c8:	mvn.w	r3, #4026531840	; 0xf0000000
    f9cc:	b.n	f8e0 <_strtoul_l.isra.0+0x74>
    f9ce:	nop
    f9d0:	.word	0x19999999

0000f9d4 <_strtoul_r>:
    f9d4:	push	{r4, r5, lr}
    f9d6:	ldr	r4, [pc, #24]	; (f9f0 <_strtoul_r+0x1c>)
    f9d8:	ldr	r5, [pc, #24]	; (f9f4 <_strtoul_r+0x20>)
    f9da:	ldr	r4, [r4, #0]
    f9dc:	ldr	r4, [r4, #52]	; 0x34
    f9de:	sub	sp, #12
    f9e0:	cmp	r4, #0
    f9e2:	it	eq
    f9e4:	moveq	r4, r5
    f9e6:	str	r4, [sp, #0]
    f9e8:	bl	f86c <_strtoul_l.isra.0>
    f9ec:	add	sp, #12
    f9ee:	pop	{r4, r5, pc}
    f9f0:	.word	0x2000215c
    f9f4:	.word	0x20001be0

0000f9f8 <_strtoull_l.isra.0>:
    f9f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f9fc:	sub	sp, #20
    f9fe:	mov	fp, r1
    fa00:	str	r0, [sp, #8]
    fa02:	mov	r7, r2
    fa04:	mov	r6, r3
    fa06:	mov	r8, r1
    fa08:	ldr	r4, [sp, #56]	; 0x38
    fa0a:	b.n	fa0e <_strtoull_l.isra.0+0x16>
    fa0c:	mov	r8, r5
    fa0e:	mov	r5, r8
    fa10:	mov	r0, r4
    fa12:	ldrb.w	r9, [r5], #1
    fa16:	bl	905c <__locale_ctype_ptr_l>
    fa1a:	add	r0, r9
    fa1c:	ldrb	r3, [r0, #1]
    fa1e:	and.w	r3, r3, #8
    fa22:	and.w	r2, r3, #255	; 0xff
    fa26:	cmp	r3, #0
    fa28:	bne.n	fa0c <_strtoull_l.isra.0+0x14>
    fa2a:	mov	r4, r9
    fa2c:	cmp	r4, #45	; 0x2d
    fa2e:	beq.w	fb4a <_strtoull_l.isra.0+0x152>
    fa32:	cmp	r4, #43	; 0x2b
    fa34:	it	eq
    fa36:	ldrbeq.w	r4, [r8, #1]
    fa3a:	str	r2, [sp, #4]
    fa3c:	it	eq
    fa3e:	addeq.w	r5, r8, #2
    fa42:	cbz	r6, fa7c <_strtoull_l.isra.0+0x84>
    fa44:	cmp	r6, #16
    fa46:	beq.w	fb58 <_strtoull_l.isra.0+0x160>
    fa4a:	mov.w	r9, r6, asr #31
    fa4e:	mov	r2, r6
    fa50:	mov	r3, r9
    fa52:	mov.w	r0, #4294967295
    fa56:	mov.w	r1, #4294967295
    fa5a:	bl	8ca8 <__aeabi_uldivmod>
    fa5e:	mov	r2, r6
    fa60:	str	r0, [sp, #12]
    fa62:	mov	sl, r1
    fa64:	mov	r3, r9
    fa66:	mov.w	r0, #4294967295
    fa6a:	mov.w	r1, #4294967295
    fa6e:	bl	8ca8 <__aeabi_uldivmod>
    fa72:	mov	r8, r6
    fa74:	mov	lr, r2
    fa76:	ldr	r2, [sp, #12]
    fa78:	mov	r3, sl
    fa7a:	b.n	fa96 <_strtoull_l.isra.0+0x9e>
    fa7c:	cmp	r4, #48	; 0x30
    fa7e:	beq.w	fb84 <_strtoull_l.isra.0+0x18c>
    fa82:	ldr	r3, [pc, #348]	; (fbe0 <_strtoull_l.isra.0+0x1e8>)
    fa84:	mov.w	lr, #5
    fa88:	mov.w	r2, #2576980377	; 0x99999999
    fa8c:	mov.w	r8, #10
    fa90:	mov.w	r9, #0
    fa94:	movs	r6, #10
    fa96:	mov.w	ip, #0
    fa9a:	movs	r0, #0
    fa9c:	movs	r1, #0
    fa9e:	b.n	fac6 <_strtoull_l.isra.0+0xce>
    faa0:	cmp	r1, r3
    faa2:	it	eq
    faa4:	cmpeq	r0, r2
    faa6:	beq.n	fb2a <_strtoull_l.isra.0+0x132>
    faa8:	mul.w	r4, r0, r9
    faac:	mla	r4, r8, r1, r4
    fab0:	umull	r0, r1, r0, r8
    fab4:	add	r1, r4
    fab6:	adds.w	r0, r0, sl
    faba:	adc.w	r1, r1, sl, asr #31
    fabe:	mov.w	ip, #1
    fac2:	ldrb.w	r4, [r5], #1
    fac6:	sub.w	sl, r4, #48	; 0x30
    faca:	cmp.w	sl, #9
    face:	bls.n	fade <_strtoull_l.isra.0+0xe6>
    fad0:	sub.w	sl, r4, #65	; 0x41
    fad4:	cmp.w	sl, #25
    fad8:	bhi.n	faf6 <_strtoull_l.isra.0+0xfe>
    fada:	sub.w	sl, r4, #55	; 0x37
    fade:	cmp	r6, sl
    fae0:	ble.n	fb08 <_strtoull_l.isra.0+0x110>
    fae2:	cmp.w	ip, #4294967295
    fae6:	beq.n	fac2 <_strtoull_l.isra.0+0xca>
    fae8:	cmp	r3, r1
    faea:	it	eq
    faec:	cmpeq	r2, r0
    faee:	bcs.n	faa0 <_strtoull_l.isra.0+0xa8>
    faf0:	mov.w	ip, #4294967295
    faf4:	b.n	fac2 <_strtoull_l.isra.0+0xca>
    faf6:	sub.w	sl, r4, #97	; 0x61
    fafa:	cmp.w	sl, #25
    fafe:	bhi.n	fb08 <_strtoull_l.isra.0+0x110>
    fb00:	sub.w	sl, r4, #87	; 0x57
    fb04:	cmp	r6, sl
    fb06:	bgt.n	fae2 <_strtoull_l.isra.0+0xea>
    fb08:	cmp.w	ip, #4294967295
    fb0c:	beq.n	fb34 <_strtoull_l.isra.0+0x13c>
    fb0e:	ldr	r3, [sp, #4]
    fb10:	cbz	r3, fb18 <_strtoull_l.isra.0+0x120>
    fb12:	negs	r0, r0
    fb14:	sbc.w	r1, r1, r1, lsl #1
    fb18:	cbz	r7, fb24 <_strtoull_l.isra.0+0x12c>
    fb1a:	cmp.w	ip, #0
    fb1e:	bne.n	fb46 <_strtoull_l.isra.0+0x14e>
    fb20:	mov	r5, fp
    fb22:	str	r5, [r7, #0]
    fb24:	add	sp, #20
    fb26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb2a:	cmp	sl, lr
    fb2c:	ble.n	faa8 <_strtoull_l.isra.0+0xb0>
    fb2e:	mov.w	ip, #4294967295
    fb32:	b.n	fac2 <_strtoull_l.isra.0+0xca>
    fb34:	ldr	r2, [sp, #8]
    fb36:	movs	r3, #34	; 0x22
    fb38:	str	r3, [r2, #0]
    fb3a:	mov.w	r0, #4294967295
    fb3e:	mov.w	r1, #4294967295
    fb42:	cmp	r7, #0
    fb44:	beq.n	fb24 <_strtoull_l.isra.0+0x12c>
    fb46:	subs	r5, #1
    fb48:	b.n	fb22 <_strtoull_l.isra.0+0x12a>
    fb4a:	movs	r3, #1
    fb4c:	add.w	r5, r8, #2
    fb50:	ldrb.w	r4, [r8, #1]
    fb54:	str	r3, [sp, #4]
    fb56:	b.n	fa42 <_strtoull_l.isra.0+0x4a>
    fb58:	cmp	r4, #48	; 0x30
    fb5a:	bne.n	fba6 <_strtoull_l.isra.0+0x1ae>
    fb5c:	ldrb	r3, [r5, #0]
    fb5e:	and.w	r3, r3, #223	; 0xdf
    fb62:	cmp	r3, #88	; 0x58
    fb64:	bne.n	fbbc <_strtoull_l.isra.0+0x1c4>
    fb66:	mov.w	r3, #4294967295
    fb6a:	ldrb	r4, [r5, #1]
    fb6c:	str	r3, [sp, #12]
    fb6e:	mov.w	lr, #15
    fb72:	adds	r5, #2
    fb74:	mvn.w	sl, #4026531840	; 0xf0000000
    fb78:	mov.w	r8, #16
    fb7c:	mov.w	r9, #0
    fb80:	movs	r6, #16
    fb82:	b.n	fa76 <_strtoull_l.isra.0+0x7e>
    fb84:	ldrb	r3, [r5, #0]
    fb86:	and.w	r3, r3, #223	; 0xdf
    fb8a:	cmp	r3, #88	; 0x58
    fb8c:	beq.n	fb66 <_strtoull_l.isra.0+0x16e>
    fb8e:	mov.w	lr, #7
    fb92:	mov.w	r2, #4294967295
    fb96:	mvn.w	r3, #3758096384	; 0xe0000000
    fb9a:	mov.w	r8, #8
    fb9e:	mov.w	r9, #0
    fba2:	movs	r6, #8
    fba4:	b.n	fa96 <_strtoull_l.isra.0+0x9e>
    fba6:	mov.w	lr, #15
    fbaa:	mov.w	r2, #4294967295
    fbae:	mvn.w	r3, #4026531840	; 0xf0000000
    fbb2:	mov.w	r8, #16
    fbb6:	mov.w	r9, #0
    fbba:	b.n	fa96 <_strtoull_l.isra.0+0x9e>
    fbbc:	mov.w	r8, #16
    fbc0:	mov.w	r9, #0
    fbc4:	mov	r2, r8
    fbc6:	mov	r3, r9
    fbc8:	mov.w	r0, #4294967295
    fbcc:	mov.w	r1, #4294967295
    fbd0:	bl	8ca8 <__aeabi_uldivmod>
    fbd4:	mvn.w	r3, #4026531840	; 0xf0000000
    fbd8:	mov	lr, r2
    fbda:	mov.w	r2, #4294967295
    fbde:	b.n	fa96 <_strtoull_l.isra.0+0x9e>
    fbe0:	.word	0x19999999

0000fbe4 <_strtoull_r>:
    fbe4:	push	{r4, r5, lr}
    fbe6:	ldr	r4, [pc, #24]	; (fc00 <_strtoull_r+0x1c>)
    fbe8:	ldr	r5, [pc, #24]	; (fc04 <_strtoull_r+0x20>)
    fbea:	ldr	r4, [r4, #0]
    fbec:	ldr	r4, [r4, #52]	; 0x34
    fbee:	sub	sp, #12
    fbf0:	cmp	r4, #0
    fbf2:	it	eq
    fbf4:	moveq	r4, r5
    fbf6:	str	r4, [sp, #0]
    fbf8:	bl	f9f8 <_strtoull_l.isra.0>
    fbfc:	add	sp, #12
    fbfe:	pop	{r4, r5, pc}
    fc00:	.word	0x2000215c
    fc04:	.word	0x20001be0

0000fc08 <__ssprint_r>:
    fc08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc0c:	ldr	r3, [r2, #8]
    fc0e:	sub	sp, #12
    fc10:	mov	r8, r2
    fc12:	cmp	r3, #0
    fc14:	beq.n	fcfc <__ssprint_r+0xf4>
    fc16:	mov	fp, r0
    fc18:	mov.w	r9, #0
    fc1c:	ldr	r6, [r2, #0]
    fc1e:	ldr	r0, [r1, #0]
    fc20:	ldr	r3, [r1, #8]
    fc22:	mov	r5, r1
    fc24:	mov	r4, r9
    fc26:	cmp	r4, #0
    fc28:	beq.n	fcb6 <__ssprint_r+0xae>
    fc2a:	cmp	r4, r3
    fc2c:	mov	r7, r3
    fc2e:	mov	sl, r3
    fc30:	bcc.n	fcc0 <__ssprint_r+0xb8>
    fc32:	ldrh	r3, [r5, #12]
    fc34:	tst.w	r3, #1152	; 0x480
    fc38:	beq.n	fc96 <__ssprint_r+0x8e>
    fc3a:	ldr	r7, [r5, #20]
    fc3c:	ldr	r1, [r5, #16]
    fc3e:	add.w	r7, r7, r7, lsl #1
    fc42:	rsb	sl, r1, r0
    fc46:	add.w	r7, r7, r7, lsr #31
    fc4a:	adds	r0, r4, #1
    fc4c:	asrs	r7, r7, #1
    fc4e:	add	r0, sl
    fc50:	cmp	r0, r7
    fc52:	mov	r2, r7
    fc54:	itt	hi
    fc56:	movhi	r7, r0
    fc58:	movhi	r2, r7
    fc5a:	lsls	r3, r3, #21
    fc5c:	bpl.n	fcc6 <__ssprint_r+0xbe>
    fc5e:	mov	r1, r2
    fc60:	mov	r0, fp
    fc62:	bl	9098 <_malloc_r>
    fc66:	cmp	r0, #0
    fc68:	beq.n	fcda <__ssprint_r+0xd2>
    fc6a:	mov	r2, sl
    fc6c:	ldr	r1, [r5, #16]
    fc6e:	str	r0, [sp, #4]
    fc70:	bl	69a8 <memcpy>
    fc74:	ldrh	r2, [r5, #12]
    fc76:	ldr	r3, [sp, #4]
    fc78:	bic.w	r2, r2, #1152	; 0x480
    fc7c:	orr.w	r2, r2, #128	; 0x80
    fc80:	strh	r2, [r5, #12]
    fc82:	rsb	r2, sl, r7
    fc86:	add.w	r0, r3, sl
    fc8a:	str	r7, [r5, #20]
    fc8c:	str	r3, [r5, #16]
    fc8e:	str	r0, [r5, #0]
    fc90:	str	r2, [r5, #8]
    fc92:	mov	r7, r4
    fc94:	mov	sl, r4
    fc96:	mov	r2, sl
    fc98:	mov	r1, r9
    fc9a:	bl	9744 <memmove>
    fc9e:	ldr.w	r2, [r8, #8]
    fca2:	ldr	r3, [r5, #8]
    fca4:	ldr	r0, [r5, #0]
    fca6:	subs	r3, r3, r7
    fca8:	add	r0, sl
    fcaa:	subs	r4, r2, r4
    fcac:	str	r3, [r5, #8]
    fcae:	str	r0, [r5, #0]
    fcb0:	str.w	r4, [r8, #8]
    fcb4:	cbz	r4, fcfc <__ssprint_r+0xf4>
    fcb6:	ldr.w	r9, [r6]
    fcba:	ldr	r4, [r6, #4]
    fcbc:	adds	r6, #8
    fcbe:	b.n	fc26 <__ssprint_r+0x1e>
    fcc0:	mov	r7, r4
    fcc2:	mov	sl, r4
    fcc4:	b.n	fc96 <__ssprint_r+0x8e>
    fcc6:	mov	r0, fp
    fcc8:	bl	98b0 <_realloc_r>
    fccc:	mov	r3, r0
    fcce:	cmp	r0, #0
    fcd0:	bne.n	fc82 <__ssprint_r+0x7a>
    fcd2:	ldr	r1, [r5, #16]
    fcd4:	mov	r0, fp
    fcd6:	bl	e368 <_free_r>
    fcda:	movs	r3, #12
    fcdc:	str.w	r3, [fp]
    fce0:	ldrh	r3, [r5, #12]
    fce2:	movs	r2, #0
    fce4:	orr.w	r3, r3, #64	; 0x40
    fce8:	mov.w	r0, #4294967295
    fcec:	strh	r3, [r5, #12]
    fcee:	str.w	r2, [r8, #8]
    fcf2:	str.w	r2, [r8, #4]
    fcf6:	add	sp, #12
    fcf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fcfc:	movs	r0, #0
    fcfe:	str.w	r0, [r8, #4]
    fd02:	add	sp, #12
    fd04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fd08 <_sungetc_r>:
    fd08:	adds	r3, r1, #1
    fd0a:	push	{r4, r5, r6, lr}
    fd0c:	beq.n	fd46 <_sungetc_r+0x3e>
    fd0e:	ldrh	r3, [r2, #12]
    fd10:	ldr	r4, [r2, #48]	; 0x30
    fd12:	bic.w	r3, r3, #32
    fd16:	strh	r3, [r2, #12]
    fd18:	uxtb	r5, r1
    fd1a:	cbz	r4, fd4c <_sungetc_r+0x44>
    fd1c:	mov	r4, r2
    fd1e:	ldr	r2, [r2, #4]
    fd20:	ldr	r3, [r4, #52]	; 0x34
    fd22:	cmp	r2, r3
    fd24:	mov	r6, r1
    fd26:	bge.n	fd3c <_sungetc_r+0x34>
    fd28:	ldr	r3, [r4, #0]
    fd2a:	subs	r2, r3, #1
    fd2c:	str	r2, [r4, #0]
    fd2e:	strb.w	r6, [r3, #-1]
    fd32:	ldr	r3, [r4, #4]
    fd34:	adds	r3, #1
    fd36:	str	r3, [r4, #4]
    fd38:	mov	r0, r5
    fd3a:	pop	{r4, r5, r6, pc}
    fd3c:	mov	r1, r4
    fd3e:	bl	fe4c <__submore>
    fd42:	cmp	r0, #0
    fd44:	beq.n	fd28 <_sungetc_r+0x20>
    fd46:	mov.w	r5, #4294967295
    fd4a:	b.n	fd38 <_sungetc_r+0x30>
    fd4c:	ldr	r0, [r2, #16]
    fd4e:	ldr	r3, [r2, #0]
    fd50:	cbz	r0, fd5e <_sungetc_r+0x56>
    fd52:	cmp	r0, r3
    fd54:	bcs.n	fd5e <_sungetc_r+0x56>
    fd56:	ldrb.w	r0, [r3, #-1]
    fd5a:	cmp	r5, r0
    fd5c:	beq.n	fd7e <_sungetc_r+0x76>
    fd5e:	str	r3, [r2, #56]	; 0x38
    fd60:	mov	r3, r2
    fd62:	ldr	r6, [r2, #4]
    fd64:	str	r6, [r2, #60]	; 0x3c
    fd66:	add.w	r4, r2, #64	; 0x40
    fd6a:	movs	r0, #3
    fd6c:	str	r0, [r2, #52]	; 0x34
    fd6e:	str	r4, [r2, #48]	; 0x30
    fd70:	strb.w	r1, [r3, #66]!
    fd74:	movs	r1, #1
    fd76:	str	r3, [r2, #0]
    fd78:	str	r1, [r2, #4]
    fd7a:	mov	r0, r5
    fd7c:	pop	{r4, r5, r6, pc}
    fd7e:	ldr	r1, [r2, #4]
    fd80:	subs	r3, #1
    fd82:	adds	r1, #1
    fd84:	str	r3, [r2, #0]
    fd86:	str	r1, [r2, #4]
    fd88:	b.n	fd38 <_sungetc_r+0x30>
    fd8a:	nop

0000fd8c <__ssrefill_r>:
    fd8c:	push	{r4, lr}
    fd8e:	mov	r4, r1
    fd90:	ldr	r1, [r1, #48]	; 0x30
    fd92:	cbz	r1, fdb0 <__ssrefill_r+0x24>
    fd94:	add.w	r3, r4, #64	; 0x40
    fd98:	cmp	r1, r3
    fd9a:	beq.n	fda0 <__ssrefill_r+0x14>
    fd9c:	bl	e368 <_free_r>
    fda0:	ldr	r3, [r4, #60]	; 0x3c
    fda2:	str	r3, [r4, #4]
    fda4:	movs	r0, #0
    fda6:	str	r0, [r4, #48]	; 0x30
    fda8:	cbz	r3, fdb0 <__ssrefill_r+0x24>
    fdaa:	ldr	r3, [r4, #56]	; 0x38
    fdac:	str	r3, [r4, #0]
    fdae:	pop	{r4, pc}
    fdb0:	ldrh	r3, [r4, #12]
    fdb2:	ldr	r2, [r4, #16]
    fdb4:	str	r2, [r4, #0]
    fdb6:	orr.w	r3, r3, #32
    fdba:	movs	r2, #0
    fdbc:	strh	r3, [r4, #12]
    fdbe:	str	r2, [r4, #4]
    fdc0:	mov.w	r0, #4294967295
    fdc4:	pop	{r4, pc}
    fdc6:	nop

0000fdc8 <_sfread_r>:
    fdc8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fdcc:	sub	sp, #12
    fdce:	mul.w	r9, r2, r3
    fdd2:	str	r2, [sp, #4]
    fdd4:	mov	sl, r3
    fdd6:	ldr	r4, [sp, #48]	; 0x30
    fdd8:	cmp.w	r9, #0
    fddc:	beq.n	fe32 <_sfread_r+0x6a>
    fdde:	mov	r7, r0
    fde0:	mov	r6, r1
    fde2:	mov	r5, r9
    fde4:	mov.w	r8, #0
    fde8:	b.n	fe0a <_sfread_r+0x42>
    fdea:	ldr	r1, [r4, #0]
    fdec:	bl	69a8 <memcpy>
    fdf0:	ldr	r2, [r4, #0]
    fdf2:	str.w	r8, [r4, #4]
    fdf6:	add	r2, fp
    fdf8:	str	r2, [r4, #0]
    fdfa:	mov	r1, r4
    fdfc:	mov	r0, r7
    fdfe:	add	r6, fp
    fe00:	rsb	r5, fp, r5
    fe04:	bl	fd8c <__ssrefill_r>
    fe08:	cbnz	r0, fe3a <_sfread_r+0x72>
    fe0a:	ldr.w	fp, [r4, #4]
    fe0e:	cmp	r5, fp
    fe10:	mov	r0, r6
    fe12:	mov	r2, fp
    fe14:	bhi.n	fdea <_sfread_r+0x22>
    fe16:	mov	r2, r5
    fe18:	ldr	r1, [r4, #0]
    fe1a:	bl	69a8 <memcpy>
    fe1e:	ldr	r2, [r4, #4]
    fe20:	ldr	r3, [r4, #0]
    fe22:	subs	r2, r2, r5
    fe24:	add	r3, r5
    fe26:	mov	r0, sl
    fe28:	str	r2, [r4, #4]
    fe2a:	str	r3, [r4, #0]
    fe2c:	add	sp, #12
    fe2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe32:	mov	r0, r9
    fe34:	add	sp, #12
    fe36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe3a:	ldr	r3, [sp, #4]
    fe3c:	rsb	r9, r5, r9
    fe40:	udiv	r0, r9, r3
    fe44:	add	sp, #12
    fe46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe4a:	nop

0000fe4c <__submore>:
    fe4c:	add.w	r3, r1, #64	; 0x40
    fe50:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe54:	mov	r4, r1
    fe56:	ldr	r1, [r1, #48]	; 0x30
    fe58:	cmp	r1, r3
    fe5a:	beq.n	fe86 <__submore+0x3a>
    fe5c:	ldr	r6, [r4, #52]	; 0x34
    fe5e:	lsls	r7, r6, #1
    fe60:	mov	r2, r7
    fe62:	bl	98b0 <_realloc_r>
    fe66:	mov	r5, r0
    fe68:	cbz	r0, febc <__submore+0x70>
    fe6a:	add.w	r8, r0, r6
    fe6e:	mov	r2, r6
    fe70:	mov	r0, r8
    fe72:	mov	r1, r5
    fe74:	bl	69a8 <memcpy>
    fe78:	str.w	r8, [r4]
    fe7c:	str	r5, [r4, #48]	; 0x30
    fe7e:	str	r7, [r4, #52]	; 0x34
    fe80:	movs	r0, #0
    fe82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe86:	mov.w	r1, #1024	; 0x400
    fe8a:	bl	9098 <_malloc_r>
    fe8e:	cbz	r0, febc <__submore+0x70>
    fe90:	ldrb.w	r3, [r4, #66]	; 0x42
    fe94:	str	r0, [r4, #48]	; 0x30
    fe96:	mov.w	r2, #1024	; 0x400
    fe9a:	str	r2, [r4, #52]	; 0x34
    fe9c:	strb.w	r3, [r0, #1023]	; 0x3ff
    fea0:	ldrb.w	r3, [r4, #65]	; 0x41
    fea4:	strb.w	r3, [r0, #1022]	; 0x3fe
    fea8:	ldrb.w	r3, [r4, #64]	; 0x40
    feac:	strb.w	r3, [r0, #1021]	; 0x3fd
    feb0:	addw	r0, r0, #1021	; 0x3fd
    feb4:	str	r0, [r4, #0]
    feb6:	movs	r0, #0
    feb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    febc:	mov.w	r0, #4294967295
    fec0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fec4 <_vasnprintf_r>:
    fec4:	push	{r4, r5, r6, lr}
    fec6:	mov	r5, r2
    fec8:	sub	sp, #104	; 0x68
    feca:	ldr	r4, [r2, #0]
    fecc:	cbz	r1, fed2 <_vasnprintf_r+0xe>
    fece:	cmp	r4, #0
    fed0:	bne.n	ff08 <_vasnprintf_r+0x44>
    fed2:	movs	r4, #0
    fed4:	mov.w	r2, #648	; 0x288
    fed8:	strh.w	r2, [sp, #12]
    fedc:	str	r4, [sp, #0]
    fede:	str	r4, [sp, #16]
    fee0:	mov	r2, r3
    fee2:	movw	r6, #65535	; 0xffff
    fee6:	ldr	r3, [sp, #120]	; 0x78
    fee8:	str	r4, [sp, #8]
    feea:	mov	r1, sp
    feec:	str	r4, [sp, #20]
    feee:	strh.w	r6, [sp, #14]
    fef2:	bl	afe0 <_svfprintf_r>
    fef6:	cmp	r0, #0
    fef8:	blt.n	ff1e <_vasnprintf_r+0x5a>
    fefa:	ldr	r3, [sp, #0]
    fefc:	str	r0, [r5, #0]
    fefe:	movs	r2, #0
    ff00:	strb	r2, [r3, #0]
    ff02:	ldr	r0, [sp, #16]
    ff04:	add	sp, #104	; 0x68
    ff06:	pop	{r4, r5, r6, pc}
    ff08:	mov.w	r2, #1544	; 0x608
    ff0c:	str	r1, [sp, #0]
    ff0e:	str	r1, [sp, #16]
    ff10:	strh.w	r2, [sp, #12]
    ff14:	bge.n	fee0 <_vasnprintf_r+0x1c>
    ff16:	movs	r3, #139	; 0x8b
    ff18:	str	r3, [r0, #0]
    ff1a:	movs	r0, #0
    ff1c:	b.n	ff04 <_vasnprintf_r+0x40>
    ff1e:	movs	r0, #0
    ff20:	b.n	ff04 <_vasnprintf_r+0x40>
    ff22:	nop

0000ff24 <_calloc_r>:
    ff24:	push	{r4, lr}
    ff26:	mul.w	r1, r2, r1
    ff2a:	bl	9098 <_malloc_r>
    ff2e:	mov	r4, r0
    ff30:	cbz	r0, ff6a <_calloc_r+0x46>
    ff32:	ldr.w	r2, [r0, #-4]
    ff36:	bic.w	r2, r2, #3
    ff3a:	subs	r2, #4
    ff3c:	cmp	r2, #36	; 0x24
    ff3e:	bhi.n	ff72 <_calloc_r+0x4e>
    ff40:	cmp	r2, #19
    ff42:	bls.n	ff6e <_calloc_r+0x4a>
    ff44:	movs	r3, #0
    ff46:	cmp	r2, #27
    ff48:	str	r3, [r0, #0]
    ff4a:	str	r3, [r0, #4]
    ff4c:	bls.n	ff7c <_calloc_r+0x58>
    ff4e:	cmp	r2, #36	; 0x24
    ff50:	str	r3, [r0, #8]
    ff52:	str	r3, [r0, #12]
    ff54:	iteee	ne
    ff56:	addne.w	r2, r0, #16
    ff5a:	streq	r3, [r0, #16]
    ff5c:	streq	r3, [r0, #20]
    ff5e:	addeq.w	r2, r0, #24
    ff62:	movs	r3, #0
    ff64:	str	r3, [r2, #0]
    ff66:	str	r3, [r2, #4]
    ff68:	str	r3, [r2, #8]
    ff6a:	mov	r0, r4
    ff6c:	pop	{r4, pc}
    ff6e:	mov	r2, r0
    ff70:	b.n	ff62 <_calloc_r+0x3e>
    ff72:	movs	r1, #0
    ff74:	bl	980c <memset>
    ff78:	mov	r0, r4
    ff7a:	pop	{r4, pc}
    ff7c:	add.w	r2, r0, #8
    ff80:	b.n	ff62 <_calloc_r+0x3e>
    ff82:	nop
    ff84:	movs	r0, r0
	...

0000ff88 <___ZN16CrashReportClasscvbEv_veneer>:
    ff88:	ldr.w	pc, [pc]	; ff8c <___ZN16CrashReportClasscvbEv_veneer+0x4>
    ff8c:	.word	0x60002481

0000ff90 <___ZNK16CrashReportClass7printToER5Print_veneer>:
    ff90:	ldr.w	pc, [pc]	; ff94 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
    ff94:	.word	0x60001e55

0000ff98 <___init_veneer>:
    ff98:	ldr.w	pc, [pc]	; ff9c <___init_veneer+0x4>
    ff9c:	.word	0x600024f9

0000ffa0 <___reboot_Teensyduino__veneer>:
    ffa0:	ldr.w	pc, [pc]	; ffa4 <___reboot_Teensyduino__veneer+0x4>
    ffa4:	.word	0x60001749
	...

Disassembly of section .fini:

0000ffb0 <_fini>:
    ffb0:	push	{r3, r4, r5, r6, r7, lr}
    ffb2:	nop

Disassembly of section .text.csf:

60014d14 <_heap_end+0x3fd94d14>:
60014d14:	.word	0xffffffff
60014d18:	.word	0xffffffff
60014d1c:	.word	0xffffffff
60014d20:	.word	0xffffffff
60014d24:	.word	0xffffffff
60014d28:	.word	0xffffffff
60014d2c:	.word	0xffffffff
60014d30:	.word	0xffffffff
60014d34:	.word	0xffffffff
60014d38:	.word	0xffffffff
60014d3c:	.word	0xffffffff
60014d40:	.word	0xffffffff
60014d44:	.word	0xffffffff
60014d48:	.word	0xffffffff
60014d4c:	.word	0xffffffff
60014d50:	.word	0xffffffff
60014d54:	.word	0xffffffff
60014d58:	.word	0xffffffff
60014d5c:	.word	0xffffffff
60014d60:	.word	0xffffffff
60014d64:	.word	0xffffffff
60014d68:	.word	0xffffffff
60014d6c:	.word	0xffffffff
60014d70:	.word	0xffffffff
60014d74:	.word	0xffffffff
60014d78:	.word	0xffffffff
60014d7c:	.word	0xffffffff
60014d80:	.word	0xffffffff
60014d84:	.word	0xffffffff
60014d88:	.word	0xffffffff
60014d8c:	.word	0xffffffff
60014d90:	.word	0xffffffff
60014d94:	.word	0xffffffff
60014d98:	.word	0xffffffff
60014d9c:	.word	0xffffffff
60014da0:	.word	0xffffffff
60014da4:	.word	0xffffffff
60014da8:	.word	0xffffffff
60014dac:	.word	0xffffffff
60014db0:	.word	0xffffffff
60014db4:	.word	0xffffffff
60014db8:	.word	0xffffffff
60014dbc:	.word	0xffffffff
60014dc0:	.word	0xffffffff
60014dc4:	.word	0xffffffff
60014dc8:	.word	0xffffffff
60014dcc:	.word	0xffffffff
60014dd0:	.word	0xffffffff
60014dd4:	.word	0xffffffff
60014dd8:	.word	0xffffffff
60014ddc:	.word	0xffffffff
60014de0:	.word	0xffffffff
60014de4:	.word	0xffffffff
60014de8:	.word	0xffffffff
60014dec:	.word	0xffffffff
60014df0:	.word	0xffffffff
60014df4:	.word	0xffffffff
60014df8:	.word	0xffffffff
60014dfc:	.word	0xffffffff
60014e00:	.word	0xffffffff
60014e04:	.word	0xffffffff
60014e08:	.word	0xffffffff
60014e0c:	.word	0xffffffff
60014e10:	.word	0xffffffff
60014e14:	.word	0xffffffff
60014e18:	.word	0xffffffff
60014e1c:	.word	0xffffffff
60014e20:	.word	0xffffffff
60014e24:	.word	0xffffffff
60014e28:	.word	0xffffffff
60014e2c:	.word	0xffffffff
60014e30:	.word	0xffffffff
60014e34:	.word	0xffffffff
60014e38:	.word	0xffffffff
60014e3c:	.word	0xffffffff
60014e40:	.word	0xffffffff
60014e44:	.word	0xffffffff
60014e48:	.word	0xffffffff
60014e4c:	.word	0xffffffff
60014e50:	.word	0xffffffff
60014e54:	.word	0xffffffff
60014e58:	.word	0xffffffff
60014e5c:	.word	0xffffffff
60014e60:	.word	0xffffffff
60014e64:	.word	0xffffffff
60014e68:	.word	0xffffffff
60014e6c:	.word	0xffffffff
60014e70:	.word	0xffffffff
60014e74:	.word	0xffffffff
60014e78:	.word	0xffffffff
60014e7c:	.word	0xffffffff
60014e80:	.word	0xffffffff
60014e84:	.word	0xffffffff
60014e88:	.word	0xffffffff
60014e8c:	.word	0xffffffff
60014e90:	.word	0xffffffff
60014e94:	.word	0xffffffff
60014e98:	.word	0xffffffff
60014e9c:	.word	0xffffffff
60014ea0:	.word	0xffffffff
60014ea4:	.word	0xffffffff
60014ea8:	.word	0xffffffff
60014eac:	.word	0xffffffff
60014eb0:	.word	0xffffffff
60014eb4:	.word	0xffffffff
60014eb8:	.word	0xffffffff
60014ebc:	.word	0xffffffff
60014ec0:	.word	0xffffffff
60014ec4:	.word	0xffffffff
60014ec8:	.word	0xffffffff
60014ecc:	.word	0xffffffff
60014ed0:	.word	0xffffffff
60014ed4:	.word	0xffffffff
60014ed8:	.word	0xffffffff
60014edc:	.word	0xffffffff
60014ee0:	.word	0xffffffff
60014ee4:	.word	0xffffffff
60014ee8:	.word	0xffffffff
60014eec:	.word	0xffffffff
60014ef0:	.word	0xffffffff
60014ef4:	.word	0xffffffff
60014ef8:	.word	0xffffffff
60014efc:	.word	0xffffffff
60014f00:	.word	0xffffffff
60014f04:	.word	0xffffffff
60014f08:	.word	0xffffffff
60014f0c:	.word	0xffffffff
60014f10:	.word	0xffffffff
60014f14:	.word	0xffffffff
60014f18:	.word	0xffffffff
60014f1c:	.word	0xffffffff
60014f20:	.word	0xffffffff
60014f24:	.word	0xffffffff
60014f28:	.word	0xffffffff
60014f2c:	.word	0xffffffff
60014f30:	.word	0xffffffff
60014f34:	.word	0xffffffff
60014f38:	.word	0xffffffff
60014f3c:	.word	0xffffffff
60014f40:	.word	0xffffffff
60014f44:	.word	0xffffffff
60014f48:	.word	0xffffffff
60014f4c:	.word	0xffffffff
60014f50:	.word	0xffffffff
60014f54:	.word	0xffffffff
60014f58:	.word	0xffffffff
60014f5c:	.word	0xffffffff
60014f60:	.word	0xffffffff
60014f64:	.word	0xffffffff
60014f68:	.word	0xffffffff
60014f6c:	.word	0xffffffff
60014f70:	.word	0xffffffff
60014f74:	.word	0xffffffff
60014f78:	.word	0xffffffff
60014f7c:	.word	0xffffffff
60014f80:	.word	0xffffffff
60014f84:	.word	0xffffffff
60014f88:	.word	0xffffffff
60014f8c:	.word	0xffffffff
60014f90:	.word	0xffffffff
60014f94:	.word	0xffffffff
60014f98:	.word	0xffffffff
60014f9c:	.word	0xffffffff
60014fa0:	.word	0xffffffff
60014fa4:	.word	0xffffffff
60014fa8:	.word	0xffffffff
60014fac:	.word	0xffffffff
60014fb0:	.word	0xffffffff
60014fb4:	.word	0xffffffff
60014fb8:	.word	0xffffffff
60014fbc:	.word	0xffffffff
60014fc0:	.word	0xffffffff
60014fc4:	.word	0xffffffff
60014fc8:	.word	0xffffffff
60014fcc:	.word	0xffffffff
60014fd0:	.word	0xffffffff
60014fd4:	.word	0xffffffff
60014fd8:	.word	0xffffffff
60014fdc:	.word	0xffffffff
60014fe0:	.word	0xffffffff
60014fe4:	.word	0xffffffff
60014fe8:	.word	0xffffffff
60014fec:	.word	0xffffffff
60014ff0:	.word	0xffffffff
60014ff4:	.word	0xffffffff
60014ff8:	.word	0xffffffff
60014ffc:	.word	0xffffffff

60015000 <hab_csf>:
	...

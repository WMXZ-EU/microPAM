
C:\Users\zimme\AppData\Local\Temp\arduino\sketches\B6A2B96C86D1458F5F30CD00E995713A/microPAM_V2.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 fd70 	bl	60001f10 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 fd1c 	bl	60001f20 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 ff3e 	bl	6000239c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f001 f8e9 	bl	60002708 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 fd4c 	bl	60002018 <configure_external_ram>
	analog_init();
60001580:	f001 f870 	bl	60002664 <analog_init>
	pwm_init();
60001584:	f001 f8d0 	bl	60002728 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 ff36 	bl	600023f8 <tempmon_init>
	startup_middle_hook();
6000158c:	f000 fcc2 	bl	60001f14 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 ffc7 	bl	60002528 <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 fcbb 	bl	60001f1c <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 fcb7 	bl	60001f18 <startup_default_late_hook>
	__libc_init_array();
600015aa:	f001 f895 	bl	600026d8 <____libc_init_array_veneer>
	main();
600015ae:	f001 f8b3 	bl	60002718 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	00015268 	.word	0x00015268
600015c0:	60002b44 	.word	0x60002b44
600015c4:	00000000 	.word	0x00000000
600015c8:	200092c0 	.word	0x200092c0
600015cc:	60017db0 	.word	0x60017db0
600015d0:	20000000 	.word	0x20000000
600015d4:	20022640 	.word	0x20022640
600015d8:	200092c0 	.word	0x200092c0
600015dc:	20009000 	.word	0x20009000
600015e0:	000084d9 	.word	0x000084d9
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	00007955 	.word	0x00007955
600015f4:	20022550 	.word	0x20022550
600015f8:	00007959 	.word	0x00007959
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	016e3600 	.word	0x016e3600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	20022554 	.word	0x20022554
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaabf 	.word	0xaaaaaabf
6000164c:	00200007 	.word	0x00200007
60001650:	20068000 	.word	0x20068000

60001654 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:
	unsigned int i;
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
60001654:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
{
60001658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000165a:	460e      	mov	r6, r1
6000165c:	460f      	mov	r7, r1
6000165e:	bf28      	it	cs
60001660:	f44f 7660 	movcs.w	r6, #896	; 0x380
60001664:	4605      	mov	r5, r0
	__disable_irq();
60001666:	b672      	cpsid	i
	memory_pool = data;
60001668:	4b23      	ldr	r3, [pc, #140]	; (600016f8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa4>)
	memory_pool_first_mask = 0;
6000166a:	2400      	movs	r4, #0
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
6000166c:	2270      	movs	r2, #112	; 0x70
	memory_pool = data;
6000166e:	6018      	str	r0, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001670:	4621      	mov	r1, r4
	memory_pool_first_mask = 0;
60001672:	4b22      	ldr	r3, [pc, #136]	; (600016fc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa8>)
		memory_pool_available_mask[i] = 0;
60001674:	4822      	ldr	r0, [pc, #136]	; (60001700 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
	memory_pool_first_mask = 0;
60001676:	801c      	strh	r4, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001678:	f001 f836 	bl	600026e8 <__memset_veneer>
	}
	for (i=0; i < num; i++) {
6000167c:	b1cf      	cbz	r7, 600016b2 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5e>
6000167e:	4621      	mov	r1, r4
60001680:	481f      	ldr	r0, [pc, #124]	; (60001700 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001682:	f04f 0c01 	mov.w	ip, #1
60001686:	094a      	lsrs	r2, r1, #5
60001688:	f001 031f 	and.w	r3, r1, #31
	for (i=0; i < num; i++) {
6000168c:	3101      	adds	r1, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
6000168e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
60001692:	fa0c f303 	lsl.w	r3, ip, r3
	for (i=0; i < num; i++) {
60001696:	428e      	cmp	r6, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001698:	ea43 0304 	orr.w	r3, r3, r4
6000169c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i=0; i < num; i++) {
600016a0:	d8f1      	bhi.n	60001686 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x32>
600016a2:	4628      	mov	r0, r5
600016a4:	2300      	movs	r3, #0
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
600016a6:	8043      	strh	r3, [r0, #2]
	for (i=0; i < num; i++) {
600016a8:	3301      	adds	r3, #1
600016aa:	f500 7082 	add.w	r0, r0, #260	; 0x104
600016ae:	429e      	cmp	r6, r3
600016b0:	d8f9      	bhi.n	600016a6 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x52>
	}
	if (update_scheduled == false) {
600016b2:	4c14      	ldr	r4, [pc, #80]	; (60001704 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb0>)
600016b4:	7825      	ldrb	r5, [r4, #0]
600016b6:	b10d      	cbz	r5, 600016bc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>
			float usec = 1e6 * AUDIO_BLOCK_SAMPLES / AUDIO_SAMPLE_RATE_EXACT;
			timer->begin(update_all, usec);
			update_setup();
		}
	}
	__enable_irq();
600016b8:	b662      	cpsie	i
}
600016ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		IntervalTimer *timer = new IntervalTimer();
600016bc:	2008      	movs	r0, #8
600016be:	f001 f807 	bl	600026d0 <___Znwj_veneer>
// some of these 4 possible instances may be in use by libraries.
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
600016c2:	2280      	movs	r2, #128	; 0x80
	// or false if all hardware timers are already in use.
	bool begin(void (*funct)(), float microseconds) {
		if (microseconds <= 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (float)(24000000 / 1000000) * microseconds - 0.5f;
		if (cycles < 17) return false;
		return beginCycles(funct, cycles);
600016c4:	4910      	ldr	r1, [pc, #64]	; (60001708 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb4>)
	constexpr IntervalTimer() {
600016c6:	7102      	strb	r2, [r0, #4]
600016c8:	6005      	str	r5, [r0, #0]
		return beginCycles(funct, cycles);
600016ca:	4a10      	ldr	r2, [pc, #64]	; (6000170c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb8>)
600016cc:	f001 f828 	bl	60002720 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
600016d0:	7823      	ldrb	r3, [r4, #0]
600016d2:	2b00      	cmp	r3, #0
600016d4:	d1f0      	bne.n	600016b8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>


#ifdef __cplusplus
extern "C" void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600016d6:	4b0e      	ldr	r3, [pc, #56]	; (60001710 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xbc>)
600016d8:	4a0e      	ldr	r2, [pc, #56]	; (60001714 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc0>)
600016da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
600016de:	490e      	ldr	r1, [pc, #56]	; (60001718 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc4>)
600016e0:	20d0      	movs	r0, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
600016e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600016e6:	2240      	movs	r2, #64	; 0x40
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
600016e8:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
600016ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	update_scheduled = true;
600016f0:	2301      	movs	r3, #1
600016f2:	7023      	strb	r3, [r4, #0]
	__enable_irq();
600016f4:	b662      	cpsie	i
}
600016f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
600016f8:	200210a0 	.word	0x200210a0
600016fc:	200225cc 	.word	0x200225cc
60001700:	200210a8 	.word	0x200210a8
60001704:	200225eb 	.word	0x200225eb
60001708:	00007395 	.word	0x00007395
6000170c:	0001101b 	.word	0x0001101b
60001710:	20009000 	.word	0x20009000
60001714:	000073a1 	.word	0x000073a1
60001718:	e000e400 	.word	0xe000e400

6000171c <CrashReportClass::printTo(Print&) const>:
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
6000171c:	4b7c      	ldr	r3, [pc, #496]	; (60001910 <CrashReportClass::printTo(Print&) const+0x1f4>)
6000171e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001722:	2a0b      	cmp	r2, #11
{
60001724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001728:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
6000172a:	d11c      	bne.n	60001766 <CrashReportClass::printTo(Print&) const+0x4a>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
6000172c:	f04f 30ff 	mov.w	r0, #4294967295
	data = (uint32_t *)info;
60001730:	4978      	ldr	r1, [pc, #480]	; (60001914 <CrashReportClass::printTo(Print&) const+0x1f8>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001732:	4b79      	ldr	r3, [pc, #484]	; (60001918 <CrashReportClass::printTo(Print&) const+0x1fc>)
	while (data < end) {
60001734:	4e79      	ldr	r6, [pc, #484]	; (6000191c <CrashReportClass::printTo(Print&) const+0x200>)
		crc ^= *data++;
60001736:	f101 0c04 	add.w	ip, r1, #4
6000173a:	4050      	eors	r0, r2
6000173c:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
6000173e:	f000 0201 	and.w	r2, r0, #1
60001742:	3c01      	subs	r4, #1
60001744:	fb03 f202 	mul.w	r2, r3, r2
60001748:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
6000174c:	d1f7      	bne.n	6000173e <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
6000174e:	45b4      	cmp	ip, r6
60001750:	d002      	beq.n	60001758 <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
60001752:	684a      	ldr	r2, [r1, #4]
60001754:	4661      	mov	r1, ip
60001756:	e7ee      	b.n	60001736 <CrashReportClass::printTo(Print&) const+0x1a>
	}
	if (crc != info->crc) return 0;
60001758:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 60001910 <CrashReportClass::printTo(Print&) const+0x1f4>
6000175c:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
60001760:	4298      	cmp	r0, r3
60001762:	f000 80fd 	beq.w	60001960 <CrashReportClass::printTo(Print&) const+0x244>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001766:	682b      	ldr	r3, [r5, #0]
60001768:	2217      	movs	r2, #23
6000176a:	496d      	ldr	r1, [pc, #436]	; (60001920 <CrashReportClass::printTo(Print&) const+0x204>)
6000176c:	4628      	mov	r0, r5
6000176e:	685b      	ldr	r3, [r3, #4]
60001770:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001772:	4628      	mov	r0, r5
60001774:	f000 ffcc 	bl	60002710 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001778:	682b      	ldr	r3, [r5, #0]
6000177a:	2248      	movs	r2, #72	; 0x48
6000177c:	4969      	ldr	r1, [pc, #420]	; (60001924 <CrashReportClass::printTo(Print&) const+0x208>)
6000177e:	685b      	ldr	r3, [r3, #4]
60001780:	4628      	mov	r0, r5
60001782:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001784:	4628      	mov	r0, r5
60001786:	f000 ffc3 	bl	60002710 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000178a:	682b      	ldr	r3, [r5, #0]
6000178c:	2249      	movs	r2, #73	; 0x49
6000178e:	4966      	ldr	r1, [pc, #408]	; (60001928 <CrashReportClass::printTo(Print&) const+0x20c>)
60001790:	685b      	ldr	r3, [r3, #4]
60001792:	4628      	mov	r0, r5
60001794:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001796:	4628      	mov	r0, r5
60001798:	f000 ffba 	bl	60002710 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000179c:	682b      	ldr	r3, [r5, #0]
6000179e:	2224      	movs	r2, #36	; 0x24
600017a0:	4962      	ldr	r1, [pc, #392]	; (6000192c <CrashReportClass::printTo(Print&) const+0x210>)
600017a2:	685b      	ldr	r3, [r3, #4]
600017a4:	4628      	mov	r0, r5
600017a6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017a8:	4628      	mov	r0, r5
600017aa:	f000 ffb1 	bl	60002710 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017ae:	682b      	ldr	r3, [r5, #0]
600017b0:	2247      	movs	r2, #71	; 0x47
600017b2:	495f      	ldr	r1, [pc, #380]	; (60001930 <CrashReportClass::printTo(Print&) const+0x214>)
600017b4:	685b      	ldr	r3, [r3, #4]
600017b6:	4628      	mov	r0, r5
600017b8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017ba:	4628      	mov	r0, r5
600017bc:	f000 ffa8 	bl	60002710 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017c0:	682b      	ldr	r3, [r5, #0]
600017c2:	223f      	movs	r2, #63	; 0x3f
600017c4:	495b      	ldr	r1, [pc, #364]	; (60001934 <CrashReportClass::printTo(Print&) const+0x218>)
600017c6:	685b      	ldr	r3, [r3, #4]
600017c8:	4628      	mov	r0, r5
600017ca:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017cc:	4628      	mov	r0, r5
600017ce:	f000 ff9f 	bl	60002710 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
600017d2:	4b59      	ldr	r3, [pc, #356]	; (60001938 <CrashReportClass::printTo(Print&) const+0x21c>)
600017d4:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
600017d6:	07a2      	lsls	r2, r4, #30
600017d8:	d50d      	bpl.n	600017f6 <CrashReportClass::printTo(Print&) const+0xda>
    uint32_t gpr5 = SRC_GPR5;
600017da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
600017dc:	4b57      	ldr	r3, [pc, #348]	; (6000193c <CrashReportClass::printTo(Print&) const+0x220>)
600017de:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
600017e0:	682b      	ldr	r3, [r5, #0]
600017e2:	f000 81b8 	beq.w	60001b56 <CrashReportClass::printTo(Print&) const+0x43a>
600017e6:	2240      	movs	r2, #64	; 0x40
600017e8:	4955      	ldr	r1, [pc, #340]	; (60001940 <CrashReportClass::printTo(Print&) const+0x224>)
600017ea:	685b      	ldr	r3, [r3, #4]
600017ec:	4628      	mov	r0, r5
600017ee:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017f0:	4628      	mov	r0, r5
600017f2:	f000 ff8d 	bl	60002710 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
600017f6:	0763      	lsls	r3, r4, #29
600017f8:	f100 81a3 	bmi.w	60001b42 <CrashReportClass::printTo(Print&) const+0x426>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
600017fc:	0727      	lsls	r7, r4, #28
600017fe:	f100 8196 	bmi.w	60001b2e <CrashReportClass::printTo(Print&) const+0x412>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60001802:	06e6      	lsls	r6, r4, #27
60001804:	f100 8189 	bmi.w	60001b1a <CrashReportClass::printTo(Print&) const+0x3fe>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001808:	06a0      	lsls	r0, r4, #26
6000180a:	f100 817c 	bmi.w	60001b06 <CrashReportClass::printTo(Print&) const+0x3ea>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
6000180e:	0661      	lsls	r1, r4, #25
60001810:	f100 816f 	bmi.w	60001af2 <CrashReportClass::printTo(Print&) const+0x3d6>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60001814:	0622      	lsls	r2, r4, #24
60001816:	f100 8134 	bmi.w	60001a82 <CrashReportClass::printTo(Print&) const+0x366>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
6000181a:	05e3      	lsls	r3, r4, #23
6000181c:	f100 813d 	bmi.w	60001a9a <CrashReportClass::printTo(Print&) const+0x37e>
  if (bc->bitmask) {
60001820:	4f3b      	ldr	r7, [pc, #236]	; (60001910 <CrashReportClass::printTo(Print&) const+0x1f4>)
60001822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
60001826:	2b00      	cmp	r3, #0
60001828:	d051      	beq.n	600018ce <CrashReportClass::printTo(Print&) const+0x1b2>
6000182a:	2401      	movs	r4, #1
							  return write((const uint8_t *)str, strlen(str)); }
6000182c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 6000195c <CrashReportClass::printTo(Print&) const+0x240>
60001830:	f8df 8120 	ldr.w	r8, [pc, #288]	; 60001954 <CrashReportClass::printTo(Print&) const+0x238>
60001834:	e004      	b.n	60001840 <CrashReportClass::printTo(Print&) const+0x124>
    for (int i=0; i < 6; i++) {
60001836:	3401      	adds	r4, #1
60001838:	2c07      	cmp	r4, #7
6000183a:	d039      	beq.n	600018b0 <CrashReportClass::printTo(Print&) const+0x194>
      if (bc->bitmask & (1 << i)) {
6000183c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
60001840:	1e62      	subs	r2, r4, #1
60001842:	2601      	movs	r6, #1
60001844:	fa06 f102 	lsl.w	r1, r6, r2
60001848:	4219      	tst	r1, r3
6000184a:	d0f4      	beq.n	60001836 <CrashReportClass::printTo(Print&) const+0x11a>
6000184c:	682b      	ldr	r3, [r5, #0]
6000184e:	eb08 0a82 	add.w	sl, r8, r2, lsl #2
60001852:	4649      	mov	r1, r9
60001854:	220e      	movs	r2, #14
60001856:	685b      	ldr	r3, [r3, #4]
60001858:	4628      	mov	r0, r5
6000185a:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
6000185c:	4621      	mov	r1, r4
6000185e:	4628      	mov	r0, r5
    for (int i=0; i < 6; i++) {
60001860:	3401      	adds	r4, #1
60001862:	f000 ff31 	bl	600026c8 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001866:	682b      	ldr	r3, [r5, #0]
60001868:	2205      	movs	r2, #5
6000186a:	4936      	ldr	r1, [pc, #216]	; (60001944 <CrashReportClass::printTo(Print&) const+0x228>)
6000186c:	685b      	ldr	r3, [r3, #4]
6000186e:	4628      	mov	r0, r5
60001870:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001872:	2300      	movs	r3, #0
60001874:	f8da 1004 	ldr.w	r1, [sl, #4]
60001878:	220a      	movs	r2, #10
6000187a:	4628      	mov	r0, r5
6000187c:	f000 ff30 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001880:	682b      	ldr	r3, [r5, #0]
60001882:	2204      	movs	r2, #4
60001884:	4930      	ldr	r1, [pc, #192]	; (60001948 <CrashReportClass::printTo(Print&) const+0x22c>)
60001886:	685b      	ldr	r3, [r3, #4]
60001888:	4628      	mov	r0, r5
6000188a:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
6000188c:	f8da 1004 	ldr.w	r1, [sl, #4]
60001890:	2300      	movs	r3, #0
60001892:	2210      	movs	r2, #16
60001894:	4628      	mov	r0, r5
60001896:	f000 ff23 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000189a:	682b      	ldr	r3, [r5, #0]
6000189c:	4632      	mov	r2, r6
6000189e:	492b      	ldr	r1, [pc, #172]	; (6000194c <CrashReportClass::printTo(Print&) const+0x230>)
600018a0:	685b      	ldr	r3, [r3, #4]
600018a2:	4628      	mov	r0, r5
600018a4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600018a6:	4628      	mov	r0, r5
600018a8:	f000 ff32 	bl	60002710 <___ZN5Print7printlnEv_veneer>
600018ac:	2c07      	cmp	r4, #7
600018ae:	d1c5      	bne.n	6000183c <CrashReportClass::printTo(Print&) const+0x120>
    *(volatile uint32_t *)(&bc->bitmask) = 0;
600018b0:	4b27      	ldr	r3, [pc, #156]	; (60001950 <CrashReportClass::printTo(Print&) const+0x234>)
600018b2:	2200      	movs	r2, #0
600018b4:	f8c3 2fc0 	str.w	r2, [r3, #4032]	; 0xfc0
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
600018b8:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
600018bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018c0:	4a24      	ldr	r2, [pc, #144]	; (60001954 <CrashReportClass::printTo(Print&) const+0x238>)
600018c2:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
		location += 32;
	} while (location < end_addr);
	asm("dsb");
600018c6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018ca:	f3bf 8f6f 	isb	sy
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
600018ce:	4a10      	ldr	r2, [pc, #64]	; (60001910 <CrashReportClass::printTo(Print&) const+0x1f4>)
600018d0:	2300      	movs	r3, #0
	info->ipsr  = 0;
600018d2:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
600018d6:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
600018da:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
600018de:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
600018e2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
600018e6:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
600018ea:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600018ee:	4809      	ldr	r0, [pc, #36]	; (60001914 <CrashReportClass::printTo(Print&) const+0x1f8>)
600018f0:	4919      	ldr	r1, [pc, #100]	; (60001958 <CrashReportClass::printTo(Print&) const+0x23c>)
600018f2:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
600018f6:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
600018fa:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018fe:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001902:	4a0d      	ldr	r2, [pc, #52]	; (60001938 <CrashReportClass::printTo(Print&) const+0x21c>)
}
60001904:	2001      	movs	r0, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001906:	6891      	ldr	r1, [r2, #8]
60001908:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
6000190a:	6313      	str	r3, [r2, #48]	; 0x30
}
6000190c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60001910:	2027ff00 	.word	0x2027ff00
60001914:	2027ff80 	.word	0x2027ff80
60001918:	edb88320 	.word	0xedb88320
6000191c:	2027ffa8 	.word	0x2027ffa8
60001920:	200082dc 	.word	0x200082dc
60001924:	200082f4 	.word	0x200082f4
60001928:	20008340 	.word	0x20008340
6000192c:	2000838c 	.word	0x2000838c
60001930:	200083b4 	.word	0x200083b4
60001934:	200083fc 	.word	0x200083fc
60001938:	400f8000 	.word	0x400f8000
6000193c:	0bad00f1 	.word	0x0bad00f1
60001940:	20008488 	.word	0x20008488
60001944:	20008660 	.word	0x20008660
60001948:	20008668 	.word	0x20008668
6000194c:	20008388 	.word	0x20008388
60001950:	2027f000 	.word	0x2027f000
60001954:	2027ffc0 	.word	0x2027ffc0
60001958:	2027ffa0 	.word	0x2027ffa0
6000195c:	20008650 	.word	0x20008650
							  return write((const uint8_t *)str, strlen(str)); }
60001960:	682b      	ldr	r3, [r5, #0]
60001962:	220c      	movs	r2, #12
60001964:	49aa      	ldr	r1, [pc, #680]	; (60001c10 <CrashReportClass::printTo(Print&) const+0x4f4>)
60001966:	4628      	mov	r0, r5
60001968:	685b      	ldr	r3, [r3, #4]
6000196a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000196c:	4628      	mov	r0, r5
6000196e:	f000 fecf 	bl	60002710 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001972:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
60001974:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
60001978:	4628      	mov	r0, r5
    info->time /= 60;
6000197a:	4ba6      	ldr	r3, [pc, #664]	; (60001c14 <CrashReportClass::printTo(Print&) const+0x4f8>)
6000197c:	f8d2 a004 	ldr.w	sl, [r2, #4]
60001980:	fba3 2709 	umull	r2, r7, r3, r9
60001984:	49a4      	ldr	r1, [pc, #656]	; (60001c18 <CrashReportClass::printTo(Print&) const+0x4fc>)
60001986:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
60001988:	fba3 2307 	umull	r2, r3, r3, r7
6000198c:	2226      	movs	r2, #38	; 0x26
6000198e:	095e      	lsrs	r6, r3, #5
60001990:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
60001994:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
60001996:	49a1      	ldr	r1, [pc, #644]	; (60001c1c <CrashReportClass::printTo(Print&) const+0x500>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001998:	220a      	movs	r2, #10
6000199a:	4628      	mov	r0, r5
6000199c:	fba1 3106 	umull	r3, r1, r1, r6
600019a0:	4623      	mov	r3, r4
600019a2:	0909      	lsrs	r1, r1, #4
600019a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
600019a8:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
600019ac:	f000 fe98 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019b0:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
600019b2:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
600019b6:	2201      	movs	r2, #1
600019b8:	685b      	ldr	r3, [r3, #4]
600019ba:	4628      	mov	r0, r5
600019bc:	4998      	ldr	r1, [pc, #608]	; (60001c20 <CrashReportClass::printTo(Print&) const+0x504>)
600019be:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600019c0:	4623      	mov	r3, r4
600019c2:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
600019c6:	220a      	movs	r2, #10
600019c8:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
600019ca:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
600019ce:	f000 fe87 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019d2:	682b      	ldr	r3, [r5, #0]
600019d4:	2201      	movs	r2, #1
600019d6:	4992      	ldr	r1, [pc, #584]	; (60001c20 <CrashReportClass::printTo(Print&) const+0x504>)
600019d8:	685b      	ldr	r3, [r3, #4]
600019da:	4628      	mov	r0, r5
600019dc:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600019de:	4623      	mov	r3, r4
600019e0:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
600019e4:	220a      	movs	r2, #10
600019e6:	4628      	mov	r0, r5
600019e8:	f000 fe7a 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
600019ec:	4628      	mov	r0, r5
600019ee:	f000 fe8f 	bl	60002710 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019f2:	682b      	ldr	r3, [r5, #0]
600019f4:	2224      	movs	r2, #36	; 0x24
600019f6:	498b      	ldr	r1, [pc, #556]	; (60001c24 <CrashReportClass::printTo(Print&) const+0x508>)
600019f8:	685b      	ldr	r3, [r3, #4]
600019fa:	4628      	mov	r0, r5
600019fc:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
600019fe:	4623      	mov	r3, r4
60001a00:	2210      	movs	r2, #16
60001a02:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
60001a06:	4628      	mov	r0, r5
60001a08:	f000 fe6a 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001a0c:	4628      	mov	r0, r5
60001a0e:	f000 fe7f 	bl	60002710 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
60001a12:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
60001a16:	2e00      	cmp	r6, #0
60001a18:	f040 80a0 	bne.w	60001b5c <CrashReportClass::printTo(Print&) const+0x440>
    uint32_t _HFSR = info->hfsr;
60001a1c:	4e82      	ldr	r6, [pc, #520]	; (60001c28 <CrashReportClass::printTo(Print&) const+0x50c>)
60001a1e:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001a22:	2c00      	cmp	r4, #0
60001a24:	f040 80bb 	bne.w	60001b9e <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001a28:	682b      	ldr	r3, [r5, #0]
60001a2a:	2222      	movs	r2, #34	; 0x22
60001a2c:	497f      	ldr	r1, [pc, #508]	; (60001c2c <CrashReportClass::printTo(Print&) const+0x510>)
60001a2e:	4628      	mov	r0, r5
60001a30:	685b      	ldr	r3, [r3, #4]
60001a32:	4798      	blx	r3
    p.print(info->temp);
60001a34:	4b7c      	ldr	r3, [pc, #496]	; (60001c28 <CrashReportClass::printTo(Print&) const+0x50c>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60001a36:	2102      	movs	r1, #2
60001a38:	4628      	mov	r0, r5
60001a3a:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
60001a3e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
60001a42:	f000 fe5d 	bl	60002700 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a46:	682b      	ldr	r3, [r5, #0]
60001a48:	2205      	movs	r2, #5
60001a4a:	4979      	ldr	r1, [pc, #484]	; (60001c30 <CrashReportClass::printTo(Print&) const+0x514>)
60001a4c:	685b      	ldr	r3, [r3, #4]
60001a4e:	4628      	mov	r0, r5
60001a50:	4798      	blx	r3
60001a52:	682b      	ldr	r3, [r5, #0]
60001a54:	221d      	movs	r2, #29
60001a56:	4977      	ldr	r1, [pc, #476]	; (60001c34 <CrashReportClass::printTo(Print&) const+0x518>)
60001a58:	685b      	ldr	r3, [r3, #4]
60001a5a:	4628      	mov	r0, r5
60001a5c:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
60001a5e:	4a76      	ldr	r2, [pc, #472]	; (60001c38 <CrashReportClass::printTo(Print&) const+0x51c>)
60001a60:	4876      	ldr	r0, [pc, #472]	; (60001c3c <CrashReportClass::printTo(Print&) const+0x520>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001a62:	2300      	movs	r3, #0
60001a64:	6811      	ldr	r1, [r2, #0]
60001a66:	220a      	movs	r2, #10
60001a68:	fba0 0101 	umull	r0, r1, r0, r1
60001a6c:	4628      	mov	r0, r5
60001a6e:	0c89      	lsrs	r1, r1, #18
60001a70:	f000 fe36 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a74:	682b      	ldr	r3, [r5, #0]
60001a76:	2204      	movs	r2, #4
60001a78:	4971      	ldr	r1, [pc, #452]	; (60001c40 <CrashReportClass::printTo(Print&) const+0x524>)
60001a7a:	685b      	ldr	r3, [r3, #4]
60001a7c:	4628      	mov	r0, r5
60001a7e:	4798      	blx	r3
60001a80:	e6a7      	b.n	600017d2 <CrashReportClass::printTo(Print&) const+0xb6>
60001a82:	682b      	ldr	r3, [r5, #0]
60001a84:	2221      	movs	r2, #33	; 0x21
60001a86:	496f      	ldr	r1, [pc, #444]	; (60001c44 <CrashReportClass::printTo(Print&) const+0x528>)
60001a88:	4628      	mov	r0, r5
60001a8a:	685b      	ldr	r3, [r3, #4]
60001a8c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a8e:	4628      	mov	r0, r5
60001a90:	f000 fe3e 	bl	60002710 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001a94:	05e3      	lsls	r3, r4, #23
60001a96:	f57f aec3 	bpl.w	60001820 <CrashReportClass::printTo(Print&) const+0x104>
							  return write((const uint8_t *)str, strlen(str)); }
60001a9a:	682b      	ldr	r3, [r5, #0]
60001a9c:	2229      	movs	r2, #41	; 0x29
60001a9e:	496a      	ldr	r1, [pc, #424]	; (60001c48 <CrashReportClass::printTo(Print&) const+0x52c>)
60001aa0:	4628      	mov	r0, r5
60001aa2:	685b      	ldr	r3, [r3, #4]
60001aa4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001aa6:	4628      	mov	r0, r5
60001aa8:	f000 fe32 	bl	60002710 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60001aac:	4967      	ldr	r1, [pc, #412]	; (60001c4c <CrashReportClass::printTo(Print&) const+0x530>)
							  return write((const uint8_t *)str, strlen(str)); }
60001aae:	6828      	ldr	r0, [r5, #0]
60001ab0:	2221      	movs	r2, #33	; 0x21
60001ab2:	688b      	ldr	r3, [r1, #8]
60001ab4:	6844      	ldr	r4, [r0, #4]
60001ab6:	4628      	mov	r0, r5
60001ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
60001abc:	608b      	str	r3, [r1, #8]
60001abe:	4964      	ldr	r1, [pc, #400]	; (60001c50 <CrashReportClass::printTo(Print&) const+0x534>)
60001ac0:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
60001ac2:	4628      	mov	r0, r5
60001ac4:	f000 fe24 	bl	60002710 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001ac8:	682b      	ldr	r3, [r5, #0]
60001aca:	2242      	movs	r2, #66	; 0x42
60001acc:	4961      	ldr	r1, [pc, #388]	; (60001c54 <CrashReportClass::printTo(Print&) const+0x538>)
60001ace:	685b      	ldr	r3, [r3, #4]
60001ad0:	4628      	mov	r0, r5
60001ad2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001ad4:	4628      	mov	r0, r5
60001ad6:	f000 fe1b 	bl	60002710 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001ada:	4a5f      	ldr	r2, [pc, #380]	; (60001c58 <CrashReportClass::printTo(Print&) const+0x53c>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001adc:	4b5f      	ldr	r3, [pc, #380]	; (60001c5c <CrashReportClass::printTo(Print&) const+0x540>)
60001ade:	2107      	movs	r1, #7
60001ae0:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001ae2:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001ae8:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60001aea:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
60001aee:	bf30      	wfi
60001af0:	e7fd      	b.n	60001aee <CrashReportClass::printTo(Print&) const+0x3d2>
							  return write((const uint8_t *)str, strlen(str)); }
60001af2:	682b      	ldr	r3, [r5, #0]
60001af4:	2221      	movs	r2, #33	; 0x21
60001af6:	495a      	ldr	r1, [pc, #360]	; (60001c60 <CrashReportClass::printTo(Print&) const+0x544>)
60001af8:	4628      	mov	r0, r5
60001afa:	685b      	ldr	r3, [r3, #4]
60001afc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001afe:	4628      	mov	r0, r5
60001b00:	f000 fe06 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001b04:	e686      	b.n	60001814 <CrashReportClass::printTo(Print&) const+0xf8>
							  return write((const uint8_t *)str, strlen(str)); }
60001b06:	682b      	ldr	r3, [r5, #0]
60001b08:	2229      	movs	r2, #41	; 0x29
60001b0a:	4956      	ldr	r1, [pc, #344]	; (60001c64 <CrashReportClass::printTo(Print&) const+0x548>)
60001b0c:	4628      	mov	r0, r5
60001b0e:	685b      	ldr	r3, [r3, #4]
60001b10:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b12:	4628      	mov	r0, r5
60001b14:	f000 fdfc 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001b18:	e679      	b.n	6000180e <CrashReportClass::printTo(Print&) const+0xf2>
							  return write((const uint8_t *)str, strlen(str)); }
60001b1a:	682b      	ldr	r3, [r5, #0]
60001b1c:	2226      	movs	r2, #38	; 0x26
60001b1e:	4952      	ldr	r1, [pc, #328]	; (60001c68 <CrashReportClass::printTo(Print&) const+0x54c>)
60001b20:	4628      	mov	r0, r5
60001b22:	685b      	ldr	r3, [r3, #4]
60001b24:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b26:	4628      	mov	r0, r5
60001b28:	f000 fdf2 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001b2c:	e66c      	b.n	60001808 <CrashReportClass::printTo(Print&) const+0xec>
							  return write((const uint8_t *)str, strlen(str)); }
60001b2e:	682b      	ldr	r3, [r5, #0]
60001b30:	222a      	movs	r2, #42	; 0x2a
60001b32:	494e      	ldr	r1, [pc, #312]	; (60001c6c <CrashReportClass::printTo(Print&) const+0x550>)
60001b34:	4628      	mov	r0, r5
60001b36:	685b      	ldr	r3, [r3, #4]
60001b38:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b3a:	4628      	mov	r0, r5
60001b3c:	f000 fde8 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001b40:	e65f      	b.n	60001802 <CrashReportClass::printTo(Print&) const+0xe6>
							  return write((const uint8_t *)str, strlen(str)); }
60001b42:	682b      	ldr	r3, [r5, #0]
60001b44:	2227      	movs	r2, #39	; 0x27
60001b46:	494a      	ldr	r1, [pc, #296]	; (60001c70 <CrashReportClass::printTo(Print&) const+0x554>)
60001b48:	4628      	mov	r0, r5
60001b4a:	685b      	ldr	r3, [r3, #4]
60001b4c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b4e:	4628      	mov	r0, r5
60001b50:	f000 fdde 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001b54:	e652      	b.n	600017fc <CrashReportClass::printTo(Print&) const+0xe0>
							  return write((const uint8_t *)str, strlen(str)); }
60001b56:	2248      	movs	r2, #72	; 0x48
60001b58:	4946      	ldr	r1, [pc, #280]	; (60001c74 <CrashReportClass::printTo(Print&) const+0x558>)
60001b5a:	e646      	b.n	600017ea <CrashReportClass::printTo(Print&) const+0xce>
60001b5c:	682b      	ldr	r3, [r5, #0]
60001b5e:	2208      	movs	r2, #8
60001b60:	4945      	ldr	r1, [pc, #276]	; (60001c78 <CrashReportClass::printTo(Print&) const+0x55c>)
60001b62:	4628      	mov	r0, r5
60001b64:	685b      	ldr	r3, [r3, #4]
60001b66:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001b68:	4623      	mov	r3, r4
60001b6a:	2210      	movs	r2, #16
60001b6c:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
60001b70:	4628      	mov	r0, r5
60001b72:	f000 fdb5 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001b76:	4628      	mov	r0, r5
60001b78:	f000 fdca 	bl	60002710 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001b7c:	07f4      	lsls	r4, r6, #31
60001b7e:	d427      	bmi.n	60001bd0 <CrashReportClass::printTo(Print&) const+0x4b4>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001b80:	07b0      	lsls	r0, r6, #30
60001b82:	f100 811d 	bmi.w	60001dc0 <CrashReportClass::printTo(Print&) const+0x6a4>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001b86:	0731      	lsls	r1, r6, #28
60001b88:	f100 810e 	bmi.w	60001da8 <CrashReportClass::printTo(Print&) const+0x68c>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001b8c:	06f2      	lsls	r2, r6, #27
60001b8e:	f100 8127 	bmi.w	60001de0 <CrashReportClass::printTo(Print&) const+0x6c4>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001b92:	06b3      	lsls	r3, r6, #26
60001b94:	d525      	bpl.n	60001be2 <CrashReportClass::printTo(Print&) const+0x4c6>
							  return write((const uint8_t *)str, strlen(str)); }
60001b96:	682b      	ldr	r3, [r5, #0]
60001b98:	222a      	movs	r2, #42	; 0x2a
60001b9a:	4938      	ldr	r1, [pc, #224]	; (60001c7c <CrashReportClass::printTo(Print&) const+0x560>)
60001b9c:	e01b      	b.n	60001bd6 <CrashReportClass::printTo(Print&) const+0x4ba>
60001b9e:	682b      	ldr	r3, [r5, #0]
60001ba0:	2208      	movs	r2, #8
60001ba2:	4937      	ldr	r1, [pc, #220]	; (60001c80 <CrashReportClass::printTo(Print&) const+0x564>)
60001ba4:	4628      	mov	r0, r5
60001ba6:	685b      	ldr	r3, [r3, #4]
60001ba8:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001baa:	2300      	movs	r3, #0
60001bac:	2210      	movs	r2, #16
60001bae:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60001bb2:	4628      	mov	r0, r5
60001bb4:	f000 fd94 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001bb8:	4628      	mov	r0, r5
60001bba:	f000 fda9 	bl	60002710 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001bbe:	07a0      	lsls	r0, r4, #30
60001bc0:	d466      	bmi.n	60001c90 <CrashReportClass::printTo(Print&) const+0x574>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001bc2:	0061      	lsls	r1, r4, #1
60001bc4:	f57f af30 	bpl.w	60001a28 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001bc8:	682b      	ldr	r3, [r5, #0]
60001bca:	221b      	movs	r2, #27
60001bcc:	492d      	ldr	r1, [pc, #180]	; (60001c84 <CrashReportClass::printTo(Print&) const+0x568>)
60001bce:	e062      	b.n	60001c96 <CrashReportClass::printTo(Print&) const+0x57a>
60001bd0:	682b      	ldr	r3, [r5, #0]
60001bd2:	2228      	movs	r2, #40	; 0x28
60001bd4:	492c      	ldr	r1, [pc, #176]	; (60001c88 <CrashReportClass::printTo(Print&) const+0x56c>)
60001bd6:	685b      	ldr	r3, [r3, #4]
60001bd8:	4628      	mov	r0, r5
60001bda:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001bdc:	4628      	mov	r0, r5
60001bde:	f000 fd97 	bl	60002710 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001be2:	0637      	lsls	r7, r6, #24
60001be4:	d47d      	bmi.n	60001ce2 <CrashReportClass::printTo(Print&) const+0x5c6>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001be6:	05f4      	lsls	r4, r6, #23
60001be8:	d45c      	bmi.n	60001ca4 <CrashReportClass::printTo(Print&) const+0x588>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001bea:	05b0      	lsls	r0, r6, #22
60001bec:	f100 80e4 	bmi.w	60001db8 <CrashReportClass::printTo(Print&) const+0x69c>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001bf0:	0571      	lsls	r1, r6, #21
60001bf2:	f100 80dd 	bmi.w	60001db0 <CrashReportClass::printTo(Print&) const+0x694>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001bf6:	0532      	lsls	r2, r6, #20
60001bf8:	f100 80ee 	bmi.w	60001dd8 <CrashReportClass::printTo(Print&) const+0x6bc>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001bfc:	04f3      	lsls	r3, r6, #19
60001bfe:	f100 80e7 	bmi.w	60001dd0 <CrashReportClass::printTo(Print&) const+0x6b4>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001c02:	04b7      	lsls	r7, r6, #18
60001c04:	d557      	bpl.n	60001cb6 <CrashReportClass::printTo(Print&) const+0x59a>
							  return write((const uint8_t *)str, strlen(str)); }
60001c06:	682b      	ldr	r3, [r5, #0]
60001c08:	2231      	movs	r2, #49	; 0x31
60001c0a:	4920      	ldr	r1, [pc, #128]	; (60001c8c <CrashReportClass::printTo(Print&) const+0x570>)
60001c0c:	e04d      	b.n	60001caa <CrashReportClass::printTo(Print&) const+0x58e>
60001c0e:	bf00      	nop
60001c10:	20007dc4 	.word	0x20007dc4
60001c14:	88888889 	.word	0x88888889
60001c18:	20007dd4 	.word	0x20007dd4
60001c1c:	aaaaaaab 	.word	0xaaaaaaab
60001c20:	20007dfc 	.word	0x20007dfc
60001c24:	20007e00 	.word	0x20007e00
60001c28:	2027ff00 	.word	0x2027ff00
60001c2c:	20008288 	.word	0x20008288
60001c30:	200082ac 	.word	0x200082ac
60001c34:	200082b4 	.word	0x200082b4
60001c38:	20008868 	.word	0x20008868
60001c3c:	431bde83 	.word	0x431bde83
60001c40:	200082d4 	.word	0x200082d4
60001c44:	20008598 	.word	0x20008598
60001c48:	200085bc 	.word	0x200085bc
60001c4c:	400f8000 	.word	0x400f8000
60001c50:	200085e8 	.word	0x200085e8
60001c54:	2000860c 	.word	0x2000860c
60001c58:	400d4000 	.word	0x400d4000
60001c5c:	400ac000 	.word	0x400ac000
60001c60:	20008574 	.word	0x20008574
60001c64:	20008548 	.word	0x20008548
60001c68:	20008520 	.word	0x20008520
60001c6c:	200084f4 	.word	0x200084f4
60001c70:	200084cc 	.word	0x200084cc
60001c74:	2000843c 	.word	0x2000843c
60001c78:	20007e28 	.word	0x20007e28
60001c7c:	20007ed8 	.word	0x20007ed8
60001c80:	20008238 	.word	0x20008238
60001c84:	2000826c 	.word	0x2000826c
60001c88:	20007e34 	.word	0x20007e34
60001c8c:	200080fc 	.word	0x200080fc
60001c90:	682b      	ldr	r3, [r5, #0]
60001c92:	2226      	movs	r2, #38	; 0x26
60001c94:	495c      	ldr	r1, [pc, #368]	; (60001e08 <CrashReportClass::printTo(Print&) const+0x6ec>)
60001c96:	4628      	mov	r0, r5
60001c98:	685b      	ldr	r3, [r3, #4]
60001c9a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c9c:	4628      	mov	r0, r5
60001c9e:	f000 fd37 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001ca2:	e6c1      	b.n	60001a28 <CrashReportClass::printTo(Print&) const+0x30c>
							  return write((const uint8_t *)str, strlen(str)); }
60001ca4:	682b      	ldr	r3, [r5, #0]
60001ca6:	2220      	movs	r2, #32
60001ca8:	4958      	ldr	r1, [pc, #352]	; (60001e0c <CrashReportClass::printTo(Print&) const+0x6f0>)
60001caa:	685b      	ldr	r3, [r3, #4]
60001cac:	4628      	mov	r0, r5
60001cae:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001cb0:	4628      	mov	r0, r5
60001cb2:	f000 fd2d 	bl	60002710 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001cb6:	0434      	lsls	r4, r6, #16
60001cb8:	d43f      	bmi.n	60001d3a <CrashReportClass::printTo(Print&) const+0x61e>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001cba:	03f0      	lsls	r0, r6, #15
60001cbc:	d42d      	bmi.n	60001d1a <CrashReportClass::printTo(Print&) const+0x5fe>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001cbe:	03b1      	lsls	r1, r6, #14
60001cc0:	f100 8082 	bmi.w	60001dc8 <CrashReportClass::printTo(Print&) const+0x6ac>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001cc4:	0372      	lsls	r2, r6, #13
60001cc6:	d44a      	bmi.n	60001d5e <CrashReportClass::printTo(Print&) const+0x642>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001cc8:	0333      	lsls	r3, r6, #12
60001cca:	f100 8091 	bmi.w	60001df0 <CrashReportClass::printTo(Print&) const+0x6d4>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001cce:	01f7      	lsls	r7, r6, #7
60001cd0:	f100 808a 	bmi.w	60001de8 <CrashReportClass::printTo(Print&) const+0x6cc>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001cd4:	01b4      	lsls	r4, r6, #6
60001cd6:	f57f aea1 	bpl.w	60001a1c <CrashReportClass::printTo(Print&) const+0x300>
							  return write((const uint8_t *)str, strlen(str)); }
60001cda:	682b      	ldr	r3, [r5, #0]
60001cdc:	221b      	movs	r2, #27
60001cde:	494c      	ldr	r1, [pc, #304]	; (60001e10 <CrashReportClass::printTo(Print&) const+0x6f4>)
60001ce0:	e01e      	b.n	60001d20 <CrashReportClass::printTo(Print&) const+0x604>
60001ce2:	682b      	ldr	r3, [r5, #0]
60001ce4:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60001ce6:	4c4b      	ldr	r4, [pc, #300]	; (60001e14 <CrashReportClass::printTo(Print&) const+0x6f8>)
60001ce8:	4628      	mov	r0, r5
60001cea:	494b      	ldr	r1, [pc, #300]	; (60001e18 <CrashReportClass::printTo(Print&) const+0x6fc>)
60001cec:	685b      	ldr	r3, [r3, #4]
60001cee:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001cf0:	2210      	movs	r2, #16
60001cf2:	2300      	movs	r3, #0
60001cf4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60001cf8:	4628      	mov	r0, r5
60001cfa:	f000 fcf1 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001cfe:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60001d02:	2a1f      	cmp	r2, #31
60001d04:	d92f      	bls.n	60001d66 <CrashReportClass::printTo(Print&) const+0x64a>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001d06:	4b45      	ldr	r3, [pc, #276]	; (60001e1c <CrashReportClass::printTo(Print&) const+0x700>)
60001d08:	429a      	cmp	r2, r3
60001d0a:	d302      	bcc.n	60001d12 <CrashReportClass::printTo(Print&) const+0x5f6>
60001d0c:	3320      	adds	r3, #32
60001d0e:	429a      	cmp	r2, r3
60001d10:	d372      	bcc.n	60001df8 <CrashReportClass::printTo(Print&) const+0x6dc>
        p.println();
60001d12:	4628      	mov	r0, r5
60001d14:	f000 fcfc 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001d18:	e765      	b.n	60001be6 <CrashReportClass::printTo(Print&) const+0x4ca>
							  return write((const uint8_t *)str, strlen(str)); }
60001d1a:	682b      	ldr	r3, [r5, #0]
60001d1c:	2223      	movs	r2, #35	; 0x23
60001d1e:	4940      	ldr	r1, [pc, #256]	; (60001e20 <CrashReportClass::printTo(Print&) const+0x704>)
60001d20:	685b      	ldr	r3, [r3, #4]
60001d22:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60001d24:	4e3b      	ldr	r6, [pc, #236]	; (60001e14 <CrashReportClass::printTo(Print&) const+0x6f8>)
60001d26:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d28:	4628      	mov	r0, r5
60001d2a:	f000 fcf1 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001d2e:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001d32:	2c00      	cmp	r4, #0
60001d34:	f43f ae78 	beq.w	60001a28 <CrashReportClass::printTo(Print&) const+0x30c>
60001d38:	e731      	b.n	60001b9e <CrashReportClass::printTo(Print&) const+0x482>
							  return write((const uint8_t *)str, strlen(str)); }
60001d3a:	682b      	ldr	r3, [r5, #0]
60001d3c:	2221      	movs	r2, #33	; 0x21
60001d3e:	4939      	ldr	r1, [pc, #228]	; (60001e24 <CrashReportClass::printTo(Print&) const+0x708>)
60001d40:	4628      	mov	r0, r5
60001d42:	685b      	ldr	r3, [r3, #4]
60001d44:	4798      	blx	r3
        p.println(info->bfar, HEX);
60001d46:	4933      	ldr	r1, [pc, #204]	; (60001e14 <CrashReportClass::printTo(Print&) const+0x6f8>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d48:	2300      	movs	r3, #0
60001d4a:	2210      	movs	r2, #16
60001d4c:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001d50:	4628      	mov	r0, r5
60001d52:	f000 fcc5 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001d56:	4628      	mov	r0, r5
60001d58:	f000 fcda 	bl	60002710 <___ZN5Print7printlnEv_veneer>
60001d5c:	e7ad      	b.n	60001cba <CrashReportClass::printTo(Print&) const+0x59e>
							  return write((const uint8_t *)str, strlen(str)); }
60001d5e:	682b      	ldr	r3, [r5, #0]
60001d60:	2228      	movs	r2, #40	; 0x28
60001d62:	4931      	ldr	r1, [pc, #196]	; (60001e28 <CrashReportClass::printTo(Print&) const+0x70c>)
60001d64:	e7dc      	b.n	60001d20 <CrashReportClass::printTo(Print&) const+0x604>
60001d66:	682b      	ldr	r3, [r5, #0]
60001d68:	221e      	movs	r2, #30
60001d6a:	4930      	ldr	r1, [pc, #192]	; (60001e2c <CrashReportClass::printTo(Print&) const+0x710>)
60001d6c:	4628      	mov	r0, r5
60001d6e:	685b      	ldr	r3, [r3, #4]
60001d70:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d72:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001d76:	2300      	movs	r3, #0
60001d78:	2210      	movs	r2, #16
60001d7a:	4628      	mov	r0, r5
60001d7c:	f000 fcb0 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d80:	682b      	ldr	r3, [r5, #0]
60001d82:	223e      	movs	r2, #62	; 0x3e
60001d84:	492a      	ldr	r1, [pc, #168]	; (60001e30 <CrashReportClass::printTo(Print&) const+0x714>)
60001d86:	685b      	ldr	r3, [r3, #4]
60001d88:	4628      	mov	r0, r5
60001d8a:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d8c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001d90:	2300      	movs	r3, #0
60001d92:	2210      	movs	r2, #16
60001d94:	4628      	mov	r0, r5
60001d96:	f000 fca3 	bl	600026e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d9a:	682b      	ldr	r3, [r5, #0]
60001d9c:	221d      	movs	r2, #29
60001d9e:	4925      	ldr	r1, [pc, #148]	; (60001e34 <CrashReportClass::printTo(Print&) const+0x718>)
60001da0:	685b      	ldr	r3, [r3, #4]
60001da2:	4628      	mov	r0, r5
60001da4:	4798      	blx	r3
60001da6:	e7b4      	b.n	60001d12 <CrashReportClass::printTo(Print&) const+0x5f6>
60001da8:	682b      	ldr	r3, [r5, #0]
60001daa:	2229      	movs	r2, #41	; 0x29
60001dac:	4922      	ldr	r1, [pc, #136]	; (60001e38 <CrashReportClass::printTo(Print&) const+0x71c>)
60001dae:	e712      	b.n	60001bd6 <CrashReportClass::printTo(Print&) const+0x4ba>
60001db0:	682b      	ldr	r3, [r5, #0]
60001db2:	2244      	movs	r2, #68	; 0x44
60001db4:	4921      	ldr	r1, [pc, #132]	; (60001e3c <CrashReportClass::printTo(Print&) const+0x720>)
60001db6:	e778      	b.n	60001caa <CrashReportClass::printTo(Print&) const+0x58e>
60001db8:	682b      	ldr	r3, [r5, #0]
60001dba:	222c      	movs	r2, #44	; 0x2c
60001dbc:	4920      	ldr	r1, [pc, #128]	; (60001e40 <CrashReportClass::printTo(Print&) const+0x724>)
60001dbe:	e774      	b.n	60001caa <CrashReportClass::printTo(Print&) const+0x58e>
60001dc0:	682b      	ldr	r3, [r5, #0]
60001dc2:	2221      	movs	r2, #33	; 0x21
60001dc4:	491f      	ldr	r1, [pc, #124]	; (60001e44 <CrashReportClass::printTo(Print&) const+0x728>)
60001dc6:	e706      	b.n	60001bd6 <CrashReportClass::printTo(Print&) const+0x4ba>
60001dc8:	682b      	ldr	r3, [r5, #0]
60001dca:	2232      	movs	r2, #50	; 0x32
60001dcc:	491e      	ldr	r1, [pc, #120]	; (60001e48 <CrashReportClass::printTo(Print&) const+0x72c>)
60001dce:	e7a7      	b.n	60001d20 <CrashReportClass::printTo(Print&) const+0x604>
60001dd0:	682b      	ldr	r3, [r5, #0]
60001dd2:	2233      	movs	r2, #51	; 0x33
60001dd4:	491d      	ldr	r1, [pc, #116]	; (60001e4c <CrashReportClass::printTo(Print&) const+0x730>)
60001dd6:	e768      	b.n	60001caa <CrashReportClass::printTo(Print&) const+0x58e>
60001dd8:	682b      	ldr	r3, [r5, #0]
60001dda:	223f      	movs	r2, #63	; 0x3f
60001ddc:	491c      	ldr	r1, [pc, #112]	; (60001e50 <CrashReportClass::printTo(Print&) const+0x734>)
60001dde:	e764      	b.n	60001caa <CrashReportClass::printTo(Print&) const+0x58e>
60001de0:	682b      	ldr	r3, [r5, #0]
60001de2:	2225      	movs	r2, #37	; 0x25
60001de4:	491b      	ldr	r1, [pc, #108]	; (60001e54 <CrashReportClass::printTo(Print&) const+0x738>)
60001de6:	e6f6      	b.n	60001bd6 <CrashReportClass::printTo(Print&) const+0x4ba>
60001de8:	682b      	ldr	r3, [r5, #0]
60001dea:	2228      	movs	r2, #40	; 0x28
60001dec:	491a      	ldr	r1, [pc, #104]	; (60001e58 <CrashReportClass::printTo(Print&) const+0x73c>)
60001dee:	e797      	b.n	60001d20 <CrashReportClass::printTo(Print&) const+0x604>
60001df0:	682b      	ldr	r3, [r5, #0]
60001df2:	2216      	movs	r2, #22
60001df4:	4919      	ldr	r1, [pc, #100]	; (60001e5c <CrashReportClass::printTo(Print&) const+0x740>)
60001df6:	e793      	b.n	60001d20 <CrashReportClass::printTo(Print&) const+0x604>
60001df8:	682b      	ldr	r3, [r5, #0]
60001dfa:	2241      	movs	r2, #65	; 0x41
60001dfc:	4918      	ldr	r1, [pc, #96]	; (60001e60 <CrashReportClass::printTo(Print&) const+0x744>)
60001dfe:	4628      	mov	r0, r5
60001e00:	685b      	ldr	r3, [r3, #4]
60001e02:	4798      	blx	r3
60001e04:	e785      	b.n	60001d12 <CrashReportClass::printTo(Print&) const+0x5f6>
60001e06:	bf00      	nop
60001e08:	20008244 	.word	0x20008244
60001e0c:	20007fec 	.word	0x20007fec
60001e10:	2000821c 	.word	0x2000821c
60001e14:	2027ff00 	.word	0x2027ff00
60001e18:	20007f04 	.word	0x20007f04
60001e1c:	20022640 	.word	0x20022640
60001e20:	20008154 	.word	0x20008154
60001e24:	20008130 	.word	0x20008130
60001e28:	200081ac 	.word	0x200081ac
60001e2c:	20007f28 	.word	0x20007f28
60001e30:	20007f48 	.word	0x20007f48
60001e34:	20007f88 	.word	0x20007f88
60001e38:	20007e84 	.word	0x20007e84
60001e3c:	20008040 	.word	0x20008040
60001e40:	20008010 	.word	0x20008010
60001e44:	20007e60 	.word	0x20007e60
60001e48:	20008178 	.word	0x20008178
60001e4c:	200080c8 	.word	0x200080c8
60001e50:	20008088 	.word	0x20008088
60001e54:	20007eb0 	.word	0x20007eb0
60001e58:	200081f0 	.word	0x200081f0
60001e5c:	200081d8 	.word	0x200081d8
60001e60:	20007fa8 	.word	0x20007fa8

60001e64 <CrashReportClass::clear()>:
	info->len = 0;
60001e64:	4a0f      	ldr	r2, [pc, #60]	; (60001ea4 <CrashReportClass::clear()+0x40>)
60001e66:	2300      	movs	r3, #0
	info->ipsr  = 0;
60001e68:	e9c2 3320 	strd	r3, r3, [r2, #128]	; 0x80
	info->hfsr  = 0;
60001e6c:	e9c2 3322 	strd	r3, r3, [r2, #136]	; 0x88
	info->bfar  = 0;
60001e70:	e9c2 3324 	strd	r3, r3, [r2, #144]	; 0x90
	info->xpsr  = 0;
60001e74:	e9c2 3326 	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001e78:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	asm("dsb");
60001e7c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
60001e80:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001e84:	4808      	ldr	r0, [pc, #32]	; (60001ea8 <CrashReportClass::clear()+0x44>)
60001e86:	4909      	ldr	r1, [pc, #36]	; (60001eac <CrashReportClass::clear()+0x48>)
60001e88:	f8c2 0f70 	str.w	r0, [r2, #3952]	; 0xf70
60001e8c:	f8c2 1f70 	str.w	r1, [r2, #3952]	; 0xf70
	asm("dsb");
60001e90:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001e94:	f3bf 8f6f 	isb	sy
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001e98:	4a05      	ldr	r2, [pc, #20]	; (60001eb0 <CrashReportClass::clear()+0x4c>)
60001e9a:	6891      	ldr	r1, [r2, #8]
60001e9c:	6091      	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001e9e:	6313      	str	r3, [r2, #48]	; 0x30
}
60001ea0:	4770      	bx	lr
60001ea2:	bf00      	nop
60001ea4:	2027ff00 	.word	0x2027ff00
60001ea8:	2027ff80 	.word	0x2027ff80
60001eac:	2027ffa0 	.word	0x2027ffa0
60001eb0:	400f8000 	.word	0x400f8000

60001eb4 <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60001eb4:	4b12      	ldr	r3, [pc, #72]	; (60001f00 <CrashReportClass::operator bool()+0x4c>)
60001eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
60001eba:	2b0b      	cmp	r3, #11
60001ebc:	d11e      	bne.n	60001efc <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
60001ebe:	f04f 32ff 	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001ec2:	4810      	ldr	r0, [pc, #64]	; (60001f04 <CrashReportClass::operator bool()+0x50>)
{
60001ec4:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
60001ec6:	4d10      	ldr	r5, [pc, #64]	; (60001f08 <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
60001ec8:	4c10      	ldr	r4, [pc, #64]	; (60001f0c <CrashReportClass::operator bool()+0x58>)
60001eca:	e001      	b.n	60001ed0 <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
60001ecc:	686b      	ldr	r3, [r5, #4]
60001ece:	4675      	mov	r5, lr
60001ed0:	f105 0e04 	add.w	lr, r5, #4
60001ed4:	405a      	eors	r2, r3
60001ed6:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001ed8:	f002 0301 	and.w	r3, r2, #1
60001edc:	3901      	subs	r1, #1
60001ede:	fb00 f303 	mul.w	r3, r0, r3
60001ee2:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
60001ee6:	d1f7      	bne.n	60001ed8 <CrashReportClass::operator bool()+0x24>
	while (data < end) {
60001ee8:	45a6      	cmp	lr, r4
60001eea:	d1ef      	bne.n	60001ecc <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
60001eec:	4b04      	ldr	r3, [pc, #16]	; (60001f00 <CrashReportClass::operator bool()+0x4c>)
60001eee:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60001ef2:	1a80      	subs	r0, r0, r2
60001ef4:	fab0 f080 	clz	r0, r0
60001ef8:	0940      	lsrs	r0, r0, #5
}
60001efa:	bd30      	pop	{r4, r5, pc}
	return false;
60001efc:	2000      	movs	r0, #0
}
60001efe:	4770      	bx	lr
60001f00:	2027ff00 	.word	0x2027ff00
60001f04:	edb88320 	.word	0xedb88320
60001f08:	2027ff80 	.word	0x2027ff80
60001f0c:	2027ffa8 	.word	0x2027ffa8

60001f10 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001f10:	4770      	bx	lr
60001f12:	bf00      	nop

60001f14 <startup_default_middle_hook>:
60001f14:	4770      	bx	lr
60001f16:	bf00      	nop

60001f18 <startup_default_late_hook>:
60001f18:	4770      	bx	lr
60001f1a:	bf00      	nop

60001f1c <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001f1c:	bf00      	nop
60001f1e:	4770      	bx	lr

60001f20 <configure_cache>:
{
60001f20:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001f22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001f26:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001f28:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001f2a:	482b      	ldr	r0, [pc, #172]	; (60001fd8 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001f2c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001f30:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001f34:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001f36:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001f3a:	4828      	ldr	r0, [pc, #160]	; (60001fdc <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001f3c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001f40:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001f42:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001f46:	4826      	ldr	r0, [pc, #152]	; (60001fe0 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001f48:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001f4c:	4a25      	ldr	r2, [pc, #148]	; (60001fe4 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001f4e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001f52:	4c25      	ldr	r4, [pc, #148]	; (60001fe8 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001f54:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001f58:	4824      	ldr	r0, [pc, #144]	; (60001fec <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001f5a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001f5e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001f62:	4c23      	ldr	r4, [pc, #140]	; (60001ff0 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001f64:	4823      	ldr	r0, [pc, #140]	; (60001ff4 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001f66:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001f6a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001f6e:	4c22      	ldr	r4, [pc, #136]	; (60001ff8 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001f70:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001f74:	4821      	ldr	r0, [pc, #132]	; (60001ffc <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001f76:	4a22      	ldr	r2, [pc, #136]	; (60002000 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001f78:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001f7c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001f80:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001f84:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001f88:	4c1e      	ldr	r4, [pc, #120]	; (60002004 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001f8a:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001f8c:	481e      	ldr	r0, [pc, #120]	; (60002008 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001f8e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001f92:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001f96:	4a1d      	ldr	r2, [pc, #116]	; (6000200c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001f98:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001f9c:	4c1c      	ldr	r4, [pc, #112]	; (60002010 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001f9e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001fa2:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001fa4:	481b      	ldr	r0, [pc, #108]	; (60002014 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001fa6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001faa:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001fae:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001fb2:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001fb6:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001fba:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001fbe:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001fc2:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001fc6:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001fca:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001fce:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001fd2:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001fd6:	4770      	bx	lr
60001fd8:	1000003f 	.word	0x1000003f
60001fdc:	03080025 	.word	0x03080025
60001fe0:	00100009 	.word	0x00100009
60001fe4:	20022640 	.word	0x20022640
60001fe8:	00200013 	.word	0x00200013
60001fec:	07020021 	.word	0x07020021
60001ff0:	20000014 	.word	0x20000014
60001ff4:	13080025 	.word	0x13080025
60001ff8:	10000009 	.word	0x10000009
60001ffc:	20200016 	.word	0x20200016
60002000:	130b0027 	.word	0x130b0027
60002004:	40000017 	.word	0x40000017
60002008:	60000018 	.word	0x60000018
6000200c:	070b002f 	.word	0x070b002f
60002010:	70000019 	.word	0x70000019
60002014:	130b002f 	.word	0x130b002f

60002018 <configure_external_ram>:
{
60002018:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000201a:	4bb8      	ldr	r3, [pc, #736]	; (600022fc <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
6000201c:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000201e:	4eb8      	ldr	r6, [pc, #736]	; (60002300 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60002020:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60002022:	4fb8      	ldr	r7, [pc, #736]	; (60002304 <configure_external_ram+0x2ec>)
{
60002024:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60002026:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000202a:	49b7      	ldr	r1, [pc, #732]	; (60002308 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000202c:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002030:	4db6      	ldr	r5, [pc, #728]	; (6000230c <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60002032:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60002036:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000203a:	4cb5      	ldr	r4, [pc, #724]	; (60002310 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000203c:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002040:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002044:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002048:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000204c:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002050:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60002054:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60002056:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60002058:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000205a:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
6000205c:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
6000205e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60002062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60002066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000206a:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000206e:	4aa9      	ldr	r2, [pc, #676]	; (60002314 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60002070:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60002074:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60002078:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000207c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60002080:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002084:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60002086:	4ba4      	ldr	r3, [pc, #656]	; (60002318 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002088:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000208a:	48a4      	ldr	r0, [pc, #656]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000208c:	49a4      	ldr	r1, [pc, #656]	; (60002320 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000208e:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002090:	4aa4      	ldr	r2, [pc, #656]	; (60002324 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002092:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60002094:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60002098:	f043 030c 	orr.w	r3, r3, #12
6000209c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600020a0:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600020a4:	6803      	ldr	r3, [r0, #0]
600020a6:	f043 0302 	orr.w	r3, r3, #2
600020aa:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600020ac:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600020ae:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600020b0:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600020b4:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600020b6:	4b9c      	ldr	r3, [pc, #624]	; (60002328 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600020b8:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600020ba:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600020bc:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600020be:	4c9b      	ldr	r4, [pc, #620]	; (6000232c <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600020c0:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020c2:	4a9b      	ldr	r2, [pc, #620]	; (60002330 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
600020c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600020c8:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
600020ca:	68c3      	ldr	r3, [r0, #12]
600020cc:	f023 0378 	bic.w	r3, r3, #120	; 0x78
600020d0:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020d2:	6a03      	ldr	r3, [r0, #32]
600020d4:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600020d6:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020d8:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020da:	6a03      	ldr	r3, [r0, #32]
600020dc:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600020de:	4a95      	ldr	r2, [pc, #596]	; (60002334 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600020e0:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600020e2:	4c95      	ldr	r4, [pc, #596]	; (60002338 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600020e4:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600020e6:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600020e8:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600020ea:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600020ec:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600020f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600020f4:	f043 0301 	orr.w	r3, r3, #1
600020f8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600020fc:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002100:	498e      	ldr	r1, [pc, #568]	; (6000233c <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60002102:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60002106:	f043 0301 	orr.w	r3, r3, #1
6000210a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000210e:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60002112:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60002114:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60002116:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002118:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
6000211c:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000211e:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002120:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002122:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60002126:	6803      	ldr	r3, [r0, #0]
60002128:	f023 0302 	bic.w	r3, r3, #2
6000212c:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000212e:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002130:	4b83      	ldr	r3, [pc, #524]	; (60002340 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60002132:	4984      	ldr	r1, [pc, #528]	; (60002344 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002134:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60002136:	f843 2b04 	str.w	r2, [r3], #4
6000213a:	428b      	cmp	r3, r1
6000213c:	d1fb      	bne.n	60002136 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
6000213e:	4a77      	ldr	r2, [pc, #476]	; (6000231c <configure_external_ram+0x304>)
60002140:	6813      	ldr	r3, [r2, #0]
60002142:	f043 0301 	orr.w	r3, r3, #1
60002146:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60002148:	6813      	ldr	r3, [r2, #0]
6000214a:	f013 0301 	ands.w	r3, r3, #1
6000214e:	d1fb      	bne.n	60002148 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002150:	487a      	ldr	r0, [pc, #488]	; (6000233c <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002152:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60002154:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002158:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000215a:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000215e:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60002160:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60002164:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60002168:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000216c:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60002170:	4975      	ldr	r1, [pc, #468]	; (60002348 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60002172:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60002176:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000217a:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000217e:	4873      	ldr	r0, [pc, #460]	; (6000234c <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60002180:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60002184:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60002188:	4c71      	ldr	r4, [pc, #452]	; (60002350 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000218a:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000218e:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60002192:	4970      	ldr	r1, [pc, #448]	; (60002354 <configure_external_ram+0x33c>)
60002194:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002198:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000219a:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000219e:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021a2:	485e      	ldr	r0, [pc, #376]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600021a4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021a8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021ac:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021b0:	6943      	ldr	r3, [r0, #20]
600021b2:	07da      	lsls	r2, r3, #31
600021b4:	d5fc      	bpl.n	600021b0 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021b6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021b8:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021be:	4957      	ldr	r1, [pc, #348]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021c0:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600021c2:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021c6:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021ca:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ce:	694b      	ldr	r3, [r1, #20]
600021d0:	07db      	lsls	r3, r3, #31
600021d2:	d5fc      	bpl.n	600021ce <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021d4:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021d6:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021dc:	4a4f      	ldr	r2, [pc, #316]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021de:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600021e0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021e4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021e8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ec:	6953      	ldr	r3, [r2, #20]
600021ee:	07df      	lsls	r7, r3, #31
600021f0:	d5fc      	bpl.n	600021ec <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021f2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021f4:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600021f6:	4858      	ldr	r0, [pc, #352]	; (60002358 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021f8:	4948      	ldr	r1, [pc, #288]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021fa:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021fc:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002200:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002204:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002208:	694b      	ldr	r3, [r1, #20]
6000220a:	07de      	lsls	r6, r3, #31
6000220c:	d5fc      	bpl.n	60002208 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
6000220e:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002212:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60002216:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60002218:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000221a:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000221c:	4293      	cmp	r3, r2
6000221e:	d165      	bne.n	600022ec <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60002220:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002222:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002226:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002228:	483c      	ldr	r0, [pc, #240]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000222a:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000222e:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002232:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002236:	6943      	ldr	r3, [r0, #20]
60002238:	07dd      	lsls	r5, r3, #31
6000223a:	d5fc      	bpl.n	60002236 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000223c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000223e:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002242:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002244:	4a35      	ldr	r2, [pc, #212]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002246:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60002248:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000224c:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002250:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002254:	6953      	ldr	r3, [r2, #20]
60002256:	07dc      	lsls	r4, r3, #31
60002258:	d5fc      	bpl.n	60002254 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000225a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000225c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002260:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002264:	492d      	ldr	r1, [pc, #180]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002266:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60002268:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000226c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002270:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002274:	694b      	ldr	r3, [r1, #20]
60002276:	07d8      	lsls	r0, r3, #31
60002278:	d5fc      	bpl.n	60002274 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000227a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000227c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002280:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002284:	4a25      	ldr	r2, [pc, #148]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002286:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60002288:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000228c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002290:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002294:	6953      	ldr	r3, [r2, #20]
60002296:	07d9      	lsls	r1, r3, #31
60002298:	d5fc      	bpl.n	60002294 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000229a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000229c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600022a0:	482d      	ldr	r0, [pc, #180]	; (60002358 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022a2:	491e      	ldr	r1, [pc, #120]	; (6000231c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022a4:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600022a6:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600022aa:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022ae:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022b2:	694b      	ldr	r3, [r1, #20]
600022b4:	07da      	lsls	r2, r3, #31
600022b6:	d5fc      	bpl.n	600022b2 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600022b8:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600022bc:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600022c0:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600022c2:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600022c4:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600022c6:	4293      	cmp	r3, r2
600022c8:	d050      	beq.n	6000236c <configure_external_ram+0x354>
600022ca:	2508      	movs	r5, #8
600022cc:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
600022d0:	4922      	ldr	r1, [pc, #136]	; (6000235c <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600022d2:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
600022d4:	4b22      	ldr	r3, [pc, #136]	; (60002360 <configure_external_ram+0x348>)
			external_psram_size = 16;
600022d6:	4a23      	ldr	r2, [pc, #140]	; (60002364 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600022d8:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
600022da:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
600022dc:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600022de:	2301      	movs	r3, #1
600022e0:	4821      	ldr	r0, [pc, #132]	; (60002368 <configure_external_ram+0x350>)
600022e2:	4422      	add	r2, r4
600022e4:	f000 fa24 	bl	60002730 <__sm_set_pool_veneer>
}
600022e8:	b003      	add	sp, #12
600022ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
600022ec:	4b1e      	ldr	r3, [pc, #120]	; (60002368 <configure_external_ram+0x350>)
600022ee:	2200      	movs	r2, #0
600022f0:	e9c3 2200 	strd	r2, r2, [r3]
600022f4:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
600022f8:	b003      	add	sp, #12
600022fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
600022fc:	401f8000 	.word	0x401f8000
60002300:	0001b0f9 	.word	0x0001b0f9
60002304:	000110f9 	.word	0x000110f9
60002308:	401f8400 	.word	0x401f8400
6000230c:	000170f9 	.word	0x000170f9
60002310:	400fc000 	.word	0x400fc000
60002314:	1ffffcff 	.word	0x1ffffcff
60002318:	a0000300 	.word	0xa0000300
6000231c:	402a4000 	.word	0x402a4000
60002320:	402a8000 	.word	0x402a8000
60002324:	ffff0012 	.word	0xffff0012
60002328:	00f737ff 	.word	0x00f737ff
6000232c:	80000040 	.word	0x80000040
60002330:	7cf0ff00 	.word	0x7cf0ff00
60002334:	830f00ff 	.word	0x830f00ff
60002338:	00020063 	.word	0x00020063
6000233c:	5af05af0 	.word	0x5af05af0
60002340:	402a4200 	.word	0x402a4200
60002344:	402a4300 	.word	0x402a4300
60002348:	3018049f 	.word	0x3018049f
6000234c:	0a1806eb 	.word	0x0a1806eb
60002350:	0a180638 	.word	0x0a180638
60002354:	26013206 	.word	0x26013206
60002358:	00030004 	.word	0x00030004
6000235c:	70000000 	.word	0x70000000
60002360:	70000000 	.word	0x70000000
60002364:	200225f3 	.word	0x200225f3
60002368:	200216d8 	.word	0x200216d8
	FLEXSPI2_IPCR0 = addr;
6000236c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002370:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002374:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002376:	4808      	ldr	r0, [pc, #32]	; (60002398 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60002378:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000237c:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002380:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002384:	6943      	ldr	r3, [r0, #20]
60002386:	07db      	lsls	r3, r3, #31
60002388:	d5fc      	bpl.n	60002384 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000238a:	2301      	movs	r3, #1
6000238c:	2510      	movs	r5, #16
6000238e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60002392:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60002394:	e79c      	b.n	600022d0 <configure_external_ram+0x2b8>
60002396:	bf00      	nop
60002398:	402a4000 	.word	0x402a4000

6000239c <usb_pll_start>:
{
6000239c:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000239e:	4a15      	ldr	r2, [pc, #84]	; (600023f4 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600023a0:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600023a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600023a6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600023aa:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600023ae:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600023b2:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600023b6:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600023b8:	f013 0f02 	tst.w	r3, #2
600023bc:	d10e      	bne.n	600023dc <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600023be:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600023c2:	d00f      	beq.n	600023e4 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600023c4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600023c8:	d00e      	beq.n	600023e8 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600023ca:	2b00      	cmp	r3, #0
600023cc:	daf3      	bge.n	600023b6 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600023ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600023d2:	d10b      	bne.n	600023ec <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600023d4:	065b      	lsls	r3, r3, #25
600023d6:	d50b      	bpl.n	600023f0 <usb_pll_start+0x54>
}
600023d8:	bcf0      	pop	{r4, r5, r6, r7}
600023da:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600023dc:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600023de:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600023e0:	6190      	str	r0, [r2, #24]
			continue;
600023e2:	e7e8      	b.n	600023b6 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600023e4:	6155      	str	r5, [r2, #20]
			continue;
600023e6:	e7e6      	b.n	600023b6 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600023e8:	6156      	str	r6, [r2, #20]
			continue;
600023ea:	e7e4      	b.n	600023b6 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600023ec:	6191      	str	r1, [r2, #24]
			continue;
600023ee:	e7e2      	b.n	600023b6 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600023f0:	6157      	str	r7, [r2, #20]
			continue;
600023f2:	e7e0      	b.n	600023b6 <usb_pll_start+0x1a>
600023f4:	400d8000 	.word	0x400d8000

600023f8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600023f8:	4a3f      	ldr	r2, [pc, #252]	; (600024f8 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600023fa:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600023fc:	493f      	ldr	r1, [pc, #252]	; (600024fc <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023fe:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002402:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002406:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000240a:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60002500 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000240e:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002412:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60002504 <tempmon_init+0x10c>
{
60002416:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002418:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000241c:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60002420:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002424:	4d38      	ldr	r5, [pc, #224]	; (60002508 <tempmon_init+0x110>)
60002426:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002428:	4c38      	ldr	r4, [pc, #224]	; (6000250c <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000242a:	4839      	ldr	r0, [pc, #228]	; (60002510 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000242c:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000242e:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002432:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002434:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
6000243c:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002440:	ee07 1a10 	vmov	s14, r1
60002444:	4b33      	ldr	r3, [pc, #204]	; (60002514 <tempmon_init+0x11c>)
60002446:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000244a:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000244c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002450:	4931      	ldr	r1, [pc, #196]	; (60002518 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002452:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002456:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000245a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000245e:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002462:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002466:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000246a:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000246e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002472:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002476:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000247a:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000247e:	4827      	ldr	r0, [pc, #156]	; (6000251c <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002480:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002484:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002488:	ee75 5a87 	vadd.f32	s11, s11, s14
6000248c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002490:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002494:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002498:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000249c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600024a0:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600024a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600024a8:	ee16 3a10 	vmov	r3, s12
600024ac:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600024b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600024b4:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600024b8:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600024ba:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600024be:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600024c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
600024c6:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
600024ca:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600024cc:	4914      	ldr	r1, [pc, #80]	; (60002520 <tempmon_init+0x128>)
600024ce:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600024d2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
600024d6:	f043 0302 	orr.w	r3, r3, #2
600024da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
600024de:	4b11      	ldr	r3, [pc, #68]	; (60002524 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600024e0:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
600024e4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600024e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600024ec:	2201      	movs	r2, #1
}
600024ee:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600024f0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
600024f4:	4770      	bx	lr
600024f6:	bf00      	nop
600024f8:	400d8100 	.word	0x400d8100
600024fc:	401f4400 	.word	0x401f4400
60002500:	42aa0000 	.word	0x42aa0000
60002504:	42b40000 	.word	0x42b40000
60002508:	20022074 	.word	0x20022074
6000250c:	20022070 	.word	0x20022070
60002510:	20022078 	.word	0x20022078
60002514:	2002207c 	.word	0x2002207c
60002518:	0fff0000 	.word	0x0fff0000
6000251c:	e000e400 	.word	0xe000e400
60002520:	20009000 	.word	0x20009000
60002524:	000086b9 	.word	0x000086b9

60002528 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002528:	4b31      	ldr	r3, [pc, #196]	; (600025f0 <usb_init+0xc8>)
6000252a:	f640 7261 	movw	r2, #3937	; 0xf61
{
6000252e:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002530:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60002534:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60002538:	f000 f8de 	bl	600026f8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000253c:	4a2d      	ldr	r2, [pc, #180]	; (600025f4 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
6000253e:	492e      	ldr	r1, [pc, #184]	; (600025f8 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002540:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002544:	482d      	ldr	r0, [pc, #180]	; (600025fc <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002546:	f043 0303 	orr.w	r3, r3, #3
6000254a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000254e:	4b2c      	ldr	r3, [pc, #176]	; (60002600 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60002550:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002554:	6802      	ldr	r2, [r0, #0]
60002556:	421a      	tst	r2, r3
60002558:	d103      	bne.n	60002562 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000255a:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
6000255e:	079a      	lsls	r2, r3, #30
60002560:	d01b      	beq.n	6000259a <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60002562:	4a25      	ldr	r2, [pc, #148]	; (600025f8 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60002564:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60002568:	4b24      	ldr	r3, [pc, #144]	; (600025fc <usb_init+0xd4>)
6000256a:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000256c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60002570:	f043 0302 	orr.w	r3, r3, #2
60002574:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60002578:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
6000257c:	079b      	lsls	r3, r3, #30
6000257e:	d4fb      	bmi.n	60002578 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60002580:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60002584:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60002588:	4b1c      	ldr	r3, [pc, #112]	; (600025fc <usb_init+0xd4>)
6000258a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000258e:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60002592:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60002594:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60002596:	f000 f8ab 	bl	600026f0 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000259a:	4a18      	ldr	r2, [pc, #96]	; (600025fc <usb_init+0xd4>)
6000259c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600025a0:	4c15      	ldr	r4, [pc, #84]	; (600025f8 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600025a2:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600025a4:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600025a6:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600025a8:	4b16      	ldr	r3, [pc, #88]	; (60002604 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600025aa:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600025ac:	f44f 7260 	mov.w	r2, #896	; 0x380
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600025b0:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600025b4:	4618      	mov	r0, r3
600025b6:	f000 f897 	bl	600026e8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600025ba:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600025be:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600025c0:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600025c4:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600025c8:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600025ca:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600025ce:	641a      	str	r2, [r3, #64]	; 0x40
600025d0:	4b0d      	ldr	r3, [pc, #52]	; (60002608 <usb_init+0xe0>)
600025d2:	4a0e      	ldr	r2, [pc, #56]	; (6000260c <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600025d4:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
600025d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600025dc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600025e0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600025e4:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
600025e6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
600025ea:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
600025ee:	bd10      	pop	{r4, pc}
600025f0:	400d8000 	.word	0x400d8000
600025f4:	400fc000 	.word	0x400fc000
600025f8:	402e0000 	.word	0x402e0000
600025fc:	400d9000 	.word	0x400d9000
60002600:	001e1c00 	.word	0x001e1c00
60002604:	20000000 	.word	0x20000000
60002608:	20009000 	.word	0x20009000
6000260c:	00008969 	.word	0x00008969

60002610 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60002610:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60002612:	4b0e      	ldr	r3, [pc, #56]	; (6000264c <_reboot_Teensyduino_+0x3c>)
60002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60002616:	079b      	lsls	r3, r3, #30
60002618:	d400      	bmi.n	6000261c <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
6000261a:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
6000261c:	b672      	cpsid	i
		USB1_USBCMD = 0;
6000261e:	4b0c      	ldr	r3, [pc, #48]	; (60002650 <_reboot_Teensyduino_+0x40>)
60002620:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60002622:	4a0c      	ldr	r2, [pc, #48]	; (60002654 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60002624:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002628:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000262c:	490a      	ldr	r1, [pc, #40]	; (60002658 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000262e:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002632:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002634:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60002636:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000263a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
6000263e:	4807      	ldr	r0, [pc, #28]	; (6000265c <_reboot_Teensyduino_+0x4c>)
60002640:	4a07      	ldr	r2, [pc, #28]	; (60002660 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002642:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60002644:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002646:	689b      	ldr	r3, [r3, #8]
60002648:	4798      	blx	r3
	}
	__builtin_unreachable();
6000264a:	bf00      	nop
6000264c:	401f4400 	.word	0x401f4400
60002650:	402e0000 	.word	0x402e0000
60002654:	400ac000 	.word	0x400ac000
60002658:	00200003 	.word	0x00200003
6000265c:	20208000 	.word	0x20208000
60002660:	eb120000 	.word	0xeb120000

60002664 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002664:	4b10      	ldr	r3, [pc, #64]	; (600026a8 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002666:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002668:	4a10      	ldr	r2, [pc, #64]	; (600026ac <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000266a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000266c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60002670:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002672:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002674:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60002678:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000267a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
6000267e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002680:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002682:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60002684:	6c93      	ldr	r3, [r2, #72]	; 0x48
60002686:	061b      	lsls	r3, r3, #24
60002688:	d4fc      	bmi.n	60002684 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000268a:	4a09      	ldr	r2, [pc, #36]	; (600026b0 <analog_init+0x4c>)
6000268c:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002690:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60002692:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002694:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60002696:	6c93      	ldr	r3, [r2, #72]	; 0x48
60002698:	f013 0380 	ands.w	r3, r3, #128	; 0x80
6000269c:	d1fb      	bne.n	60002696 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
6000269e:	4a05      	ldr	r2, [pc, #20]	; (600026b4 <analog_init+0x50>)
600026a0:	7013      	strb	r3, [r2, #0]
}
600026a2:	f85d 4b04 	ldr.w	r4, [sp], #4
600026a6:	4770      	bx	lr
600026a8:	400fc000 	.word	0x400fc000
600026ac:	400c4000 	.word	0x400c4000
600026b0:	400c8000 	.word	0x400c8000
600026b4:	200225f2 	.word	0x200225f2

600026b8 <_init>:
600026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600026ba:	bf00      	nop
600026bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
600026be:	bc08      	pop	{r3}
600026c0:	469e      	mov	lr, r3
600026c2:	4770      	bx	lr
600026c4:	0000      	movs	r0, r0
	...

600026c8 <___ZN5Print5printEl_veneer>:
600026c8:	f85f f000 	ldr.w	pc, [pc]	; 600026cc <___ZN5Print5printEl_veneer+0x4>
600026cc:	00007b81 	.word	0x00007b81

600026d0 <___Znwj_veneer>:
600026d0:	f85f f000 	ldr.w	pc, [pc]	; 600026d4 <___Znwj_veneer+0x4>
600026d4:	00008401 	.word	0x00008401

600026d8 <____libc_init_array_veneer>:
600026d8:	f85f f000 	ldr.w	pc, [pc]	; 600026dc <____libc_init_array_veneer+0x4>
600026dc:	0000ca75 	.word	0x0000ca75

600026e0 <___ZN5Print11printNumberEmhh_veneer>:
600026e0:	f85f f000 	ldr.w	pc, [pc]	; 600026e4 <___ZN5Print11printNumberEmhh_veneer+0x4>
600026e4:	00007bed 	.word	0x00007bed

600026e8 <__memset_veneer>:
600026e8:	f85f f000 	ldr.w	pc, [pc]	; 600026ec <__memset_veneer+0x4>
600026ec:	0000c7fd 	.word	0x0000c7fd

600026f0 <__delay_veneer>:
600026f0:	f85f f000 	ldr.w	pc, [pc]	; 600026f4 <__delay_veneer+0x4>
600026f4:	000080fd 	.word	0x000080fd

600026f8 <__usb_init_serialnumber_veneer>:
600026f8:	f85f f000 	ldr.w	pc, [pc]	; 600026fc <__usb_init_serialnumber_veneer+0x4>
600026fc:	00009975 	.word	0x00009975

60002700 <___ZN5Print10printFloatEdh_veneer>:
60002700:	f85f f000 	ldr.w	pc, [pc]	; 60002704 <___ZN5Print10printFloatEdh_veneer+0x4>
60002704:	00007c19 	.word	0x00007c19

60002708 <__set_arm_clock_veneer>:
60002708:	f85f f000 	ldr.w	pc, [pc]	; 6000270c <__set_arm_clock_veneer+0x4>
6000270c:	00007e0d 	.word	0x00007e0d

60002710 <___ZN5Print7printlnEv_veneer>:
60002710:	f85f f000 	ldr.w	pc, [pc]	; 60002714 <___ZN5Print7printlnEv_veneer+0x4>
60002714:	00007b99 	.word	0x00007b99

60002718 <__main_veneer>:
60002718:	f85f f000 	ldr.w	pc, [pc]	; 6000271c <__main_veneer+0x4>
6000271c:	000082bd 	.word	0x000082bd

60002720 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>:
60002720:	f85f f000 	ldr.w	pc, [pc]	; 60002724 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer+0x4>
60002724:	000079d1 	.word	0x000079d1

60002728 <__pwm_init_veneer>:
60002728:	f85f f000 	ldr.w	pc, [pc]	; 6000272c <__pwm_init_veneer+0x4>
6000272c:	0000a4bd 	.word	0x0000a4bd

60002730 <__sm_set_pool_veneer>:
60002730:	f85f f000 	ldr.w	pc, [pc]	; 60002734 <__sm_set_pool_veneer+0x4>
60002734:	0000a601 	.word	0x0000a601

60002738 <__frame_dummy_init_array_entry>:
60002738:	00000045 00000309 000008d5 00000aa9     E...............
60002748:	000013e9 0000711d 00007351              .....q..Qs..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
	}
	__enable_irq();
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
}
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      38:	200092c0 	.word	0x200092c0
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
      3c:	200092c0 	.word	0x200092c0
  }
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
    {
      if ( head==tail ) return 0;                 // queue is empty
      for(int ii=0;ii<NBUF_I2S;ii++) data[ii]=audio_buffer[head][ii];
      head = (head+1)%MAUDIO;
      return 1;   // signal success.
    }
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
    // read error
    return -1;
  }
  str[n] = '\0';
  return n;
}
      60:	20021f68 	.word	0x20021f68
      64:	60022000 	.word	0x60022000

00000068 <AudioTrigger::update()>:
      class AudioTrigger : public AudioStream
      {
      public:
          AudioTrigger() : AudioStream(0, NULL) {init(); prio = 8;}
          void init(void);
          virtual void update(void) {;}
      68:	4770      	bx	lr
    return -1;
      6a:	bf00      	nop

0000006c <loop>:
      6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
      70:	4c7c      	ldr	r4, [pc, #496]	; (264 <loop+0x1f8>)
    *--str = 'T';
      72:	b08b      	sub	sp, #44	; 0x2c
    *--str = 'U';
      74:	4d7c      	ldr	r5, [pc, #496]	; (268 <loop+0x1fc>)
    *--str = 'C';
      76:	6823      	ldr	r3, [r4, #0]
    *--str = 'T';
      78:	3301      	adds	r3, #1
    *--str = 'U';
      7a:	6023      	str	r3, [r4, #0]
  }
  return str;
}
      7c:	f001 f9fa 	bl	1474 <getDataCount()>
    *--str = '0';
      80:	882b      	ldrh	r3, [r5, #0]
      82:	4283      	cmp	r3, r0
      84:	bf38      	it	cc
      sign = '+';
      86:	8028      	strhcc	r0, [r5, #0]
      88:	f00a f87a 	bl	a180 <usb_serial_available>
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
      8c:	b980      	cbnz	r0, b0 <loop+0x44>
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8e:	4f77      	ldr	r7, [pc, #476]	; (26c <loop+0x200>)
      90:	8838      	ldrh	r0, [r7, #0]
      92:	4e77      	ldr	r6, [pc, #476]	; (270 <loop+0x204>)
    } else {
       if (n < 4) goto fail;
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
      94:	b200      	sxth	r0, r0
      96:	f001 f94f 	bl	1338 <saveData(short)>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
      9a:	4b76      	ldr	r3, [pc, #472]	; (274 <loop+0x208>)
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      9c:	8038      	strh	r0, [r7, #0]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
      9e:	681f      	ldr	r7, [r3, #0]
    }
    return str;

   fail:
    return nullptr;
      a0:	6833      	ldr	r3, [r6, #0]
      a2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
      a6:	42bb      	cmp	r3, r7
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
		txBufferLength = 1;
      a8:	d30d      	bcc.n	c6 <loop+0x5a>
		txBuffer[0] = (address << 1);
      aa:	b00b      	add	sp, #44	; 0x2c
      ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}

static void i2c_write_data(uint8_t address, uint8_t reg, uint8_t *buffer, uint16_t nbuf)
{
  Wire.beginTransmission(address);
  Wire.write(reg);
      b0:	f00a f8aa 	bl	a208 <usb_serial_getchar>
  for(int ii=0; ii<nbuf; ii++) Wire.write(buffer[ii]);
      b4:	b2c0      	uxtb	r0, r0
      b6:	2873      	cmp	r0, #115	; 0x73
      b8:	d028      	beq.n	10c <loop+0xa0>
      ba:	2865      	cmp	r0, #101	; 0x65
  return str - name;

 fail:
  *name = 0;
  return 0;
}
      bc:	d11d      	bne.n	fa <loop+0x8e>
      be:	4f6b      	ldr	r7, [pc, #428]	; (26c <loop+0x200>)
      c0:	2304      	movs	r3, #4
  for (uint8_t is = 2; is <= m_setCount; is++) {
      c2:	803b      	strh	r3, [r7, #0]
      c4:	e7e4      	b.n	90 <loop+0x24>
      c6:	a808      	add	r0, sp, #32
      c8:	f001 fb8a 	bl	17e0 <rtc_get_datetime(datetime_t*)>
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      cc:	4b6a      	ldr	r3, [pc, #424]	; (278 <loop+0x20c>)
      ce:	f9b3 3000 	ldrsh.w	r3, [r3]
	while (newdiv > 65535 && prescale < 7) {
      d2:	b9fb      	cbnz	r3, 114 <loop+0xa8>
      d4:	4b69      	ldr	r3, [pc, #420]	; (27c <loop+0x210>)
      d6:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 2bc <loop+0x250>
      da:	9306      	str	r3, [sp, #24]
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    else if (c == '.')
      isFraction = true;
      dc:	4b68      	ldr	r3, [pc, #416]	; (280 <loop+0x214>)
      de:	9307      	str	r3, [sp, #28]
      e0:	2300      	movs	r3, #0
    return 0; // zero returned if timeout
      e2:	9a06      	ldr	r2, [sp, #24]
      e4:	6037      	str	r7, [r6, #0]
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
      e6:	6013      	str	r3, [r2, #0]
      e8:	9a07      	ldr	r2, [sp, #28]
      ea:	6023      	str	r3, [r4, #0]
      ec:	f8cb 3000 	str.w	r3, [fp]
      f0:	802b      	strh	r3, [r5, #0]
      f2:	6013      	str	r3, [r2, #0]
      f4:	b00b      	add	sp, #44	; 0x2c
      f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      fa:	286d      	cmp	r0, #109	; 0x6d
      fc:	d17f      	bne.n	1fe <loop+0x192>
      fe:	4a5e      	ldr	r2, [pc, #376]	; (278 <loop+0x20c>)
     100:	4f5a      	ldr	r7, [pc, #360]	; (26c <loop+0x200>)
     102:	8813      	ldrh	r3, [r2, #0]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     104:	f1c3 0301 	rsb	r3, r3, #1
    return m_blockDev->syncDevice();
     108:	8013      	strh	r3, [r2, #0]
     10a:	e7c1      	b.n	90 <loop+0x24>
     10c:	4f57      	ldr	r7, [pc, #348]	; (26c <loop+0x200>)
     10e:	2300      	movs	r3, #0
      } else if (!FsUtf::isSurrogate(c)) {
        if (c == 0) {
          break;
        }
        cp = c;
      } else if (FsUtf::isHighSurrogate(c)) {
     110:	803b      	strh	r3, [r7, #0]
     112:	e7bd      	b.n	90 <loop+0x24>
     114:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
     118:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     11c:	9304      	str	r3, [sp, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     11e:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     122:	4958      	ldr	r1, [pc, #352]	; (284 <loop+0x218>)
     124:	9303      	str	r3, [sp, #12]
     126:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
				break;
			}
		}
		yield();
	}
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     12a:	4857      	ldr	r0, [pc, #348]	; (288 <loop+0x21c>)
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     12c:	9302      	str	r3, [sp, #8]
     12e:	f99d 3025 	ldrsb.w	r3, [sp, #37]	; 0x25
     132:	f8df b188 	ldr.w	fp, [pc, #392]	; 2bc <loop+0x250>
	return rxBufferLength;
}
     136:	9301      	str	r3, [sp, #4]
     138:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
     13c:	9300      	str	r3, [sp, #0]
     13e:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     142:	f007 fd45 	bl	7bd0 <Print::printf(char const*, ...)>
     146:	2103      	movs	r1, #3
     148:	4850      	ldr	r0, [pc, #320]	; (28c <loop+0x220>)
     14a:	f00a f883 	bl	a254 <usb_serial_write>
     14e:	2300      	movs	r3, #0
     150:	220a      	movs	r2, #10
     152:	6821      	ldr	r1, [r4, #0]
     154:	484c      	ldr	r0, [pc, #304]	; (288 <loop+0x21c>)
     156:	f007 fd49 	bl	7bec <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     15a:	2101      	movs	r1, #1
        if (flags & T_ACCESS) {
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        if (flags & T_CREATE) {
          df->createTimeMs = ms10;
     15c:	484c      	ldr	r0, [pc, #304]	; (290 <loop+0x224>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
     15e:	f00a f879 	bl	a254 <usb_serial_write>
     162:	4b46      	ldr	r3, [pc, #280]	; (27c <loop+0x210>)
          setLe16(df->createTime, time);
          setLe16(df->createDate, date);
        }
        if (flags & T_WRITE) {
     164:	220a      	movs	r2, #10
     166:	f8db 1000 	ldr.w	r1, [fp]
     16a:	9306      	str	r3, [sp, #24]
     16c:	2300      	movs	r3, #0
     16e:	4846      	ldr	r0, [pc, #280]	; (288 <loop+0x21c>)
  bool skip = data[0] == EXFAT_TYPE_FILE;
     170:	f007 fd3c 	bl	7bec <Print::printNumber(unsigned long, unsigned char, unsigned char)>
}
     174:	2101      	movs	r1, #1
  setLe32(fsi->nextFree, 0XFFFFFFFF);
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
     176:	4846      	ldr	r0, [pc, #280]	; (290 <loop+0x224>)
     178:	f00a f86c 	bl	a254 <usb_serial_write>
     17c:	9906      	ldr	r1, [sp, #24]
     17e:	2300      	movs	r3, #0
     180:	220a      	movs	r2, #10
     182:	6809      	ldr	r1, [r1, #0]
}
     184:	4840      	ldr	r0, [pc, #256]	; (288 <loop+0x21c>)
     186:	f007 fd31 	bl	7bec <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
     18a:	2101      	movs	r1, #1
    writeMsg("Bad cluster count\r\n");
     18c:	4840      	ldr	r0, [pc, #256]	; (290 <loop+0x224>)
     18e:	f00a f861 	bl	a254 <usb_serial_write>
     192:	882a      	ldrh	r2, [r5, #0]
     194:	493f      	ldr	r1, [pc, #252]	; (294 <loop+0x228>)
     196:	483c      	ldr	r0, [pc, #240]	; (288 <loop+0x21c>)
     198:	f007 fd1a 	bl	7bd0 <Print::printf(char const*, ...)>
     19c:	2102      	movs	r1, #2
}
     19e:	483e      	ldr	r0, [pc, #248]	; (298 <loop+0x22c>)
     1a0:	f00a f858 	bl	a254 <usb_serial_write>
     1a4:	4b3d      	ldr	r3, [pc, #244]	; (29c <loop+0x230>)
     1a6:	493e      	ldr	r1, [pc, #248]	; (2a0 <loop+0x234>)
     1a8:	681a      	ldr	r2, [r3, #0]
     1aa:	4837      	ldr	r0, [pc, #220]	; (288 <loop+0x21c>)
     1ac:	f007 fd10 	bl	7bd0 <Print::printf(char const*, ...)>
     1b0:	4b33      	ldr	r3, [pc, #204]	; (280 <loop+0x214>)
     1b2:	2101      	movs	r1, #1
     1b4:	4836      	ldr	r0, [pc, #216]	; (290 <loop+0x224>)
     1b6:	9307      	str	r3, [sp, #28]
     1b8:	f00a f84c 	bl	a254 <usb_serial_write>
     1bc:	9907      	ldr	r1, [sp, #28]
     1be:	2300      	movs	r3, #0
     1c0:	220a      	movs	r2, #10
     1c2:	4831      	ldr	r0, [pc, #196]	; (288 <loop+0x21c>)
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    for (unsigned i = 2; i < todo; i++) {
     1c4:	6809      	ldr	r1, [r1, #0]
     1c6:	f007 fd11 	bl	7bec <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
	if (priority(ch2) < priority(ch3)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
}
     1ca:	2104      	movs	r1, #4
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
     1cc:	4835      	ldr	r0, [pc, #212]	; (2a4 <loop+0x238>)
     1ce:	f00a f841 	bl	a254 <usb_serial_write>
    return m_blockDev->syncDevice();
     1d2:	4b35      	ldr	r3, [pc, #212]	; (2a8 <loop+0x23c>)
     1d4:	f9b3 3000 	ldrsh.w	r3, [r3]
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
     1d8:	bb23      	cbnz	r3, 224 <loop+0x1b8>
     1da:	4699      	mov	r9, r3
     1dc:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 2c0 <loop+0x254>
     1e0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 288 <loop+0x21c>
     1e4:	4b31      	ldr	r3, [pc, #196]	; (2ac <loop+0x240>)
     1e6:	4651      	mov	r1, sl
     1e8:	4640      	mov	r0, r8
      goto fail;
    }
  }

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
     1ea:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
     1ee:	f109 0901 	add.w	r9, r9, #1
     1f2:	f007 fced 	bl	7bd0 <Print::printf(char const*, ...)>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
     1f6:	f1b9 0f08 	cmp.w	r9, #8

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
		port().CCR = _ccr;
     1fa:	d1f3      	bne.n	1e4 <loop+0x178>
     1fc:	e770      	b.n	e0 <loop+0x74>
			if (d > 2) {
     1fe:	283a      	cmp	r0, #58	; 0x3a
     200:	d103      	bne.n	20a <loop+0x19e>
				div = d-2;
     202:	4f1a      	ldr	r7, [pc, #104]	; (26c <loop+0x200>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     204:	f001 fb84 	bl	1910 <menu1()>
     208:	e742      	b.n	90 <loop+0x24>
     20a:	283f      	cmp	r0, #63	; 0x3f
     20c:	d103      	bne.n	216 <loop+0x1aa>
     20e:	4f17      	ldr	r7, [pc, #92]	; (26c <loop+0x200>)
     210:	f001 fb88 	bl	1924 <menu2()>
     214:	e73c      	b.n	90 <loop+0x24>
     216:	2821      	cmp	r0, #33	; 0x21
     218:	4f14      	ldr	r7, [pc, #80]	; (26c <loop+0x200>)
     21a:	f47f af39 	bne.w	90 <loop+0x24>
     21e:	f001 fc2b 	bl	1a78 <menu3()>
     222:	e735      	b.n	90 <loop+0x24>
     224:	f8df a09c 	ldr.w	sl, [pc, #156]	; 2c4 <loop+0x258>
     228:	4921      	ldr	r1, [pc, #132]	; (2b0 <loop+0x244>)
     22a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 288 <loop+0x21c>
     22e:	f10a 0860 	add.w	r8, sl, #96	; 0x60
     232:	f85a 2f04 	ldr.w	r2, [sl, #4]!
      {
        for(int ii=0; ii<8;ii++){ Serial.printf("%8X ",logBuffer[ii]);}        
      }
      else
      {
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     236:	4648      	mov	r0, r9
     238:	f007 fcca 	bl	7bd0 <Print::printf(char const*, ...)>
     23c:	491c      	ldr	r1, [pc, #112]	; (2b0 <loop+0x244>)
     23e:	45d0      	cmp	r8, sl
     240:	d1f7      	bne.n	232 <loop+0x1c6>
        Serial.printf("%2d",max_stat);
     242:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2c8 <loop+0x25c>
     246:	491b      	ldr	r1, [pc, #108]	; (2b4 <loop+0x248>)
     248:	f8d8 2000 	ldr.w	r2, [r8]
     24c:	480e      	ldr	r0, [pc, #56]	; (288 <loop+0x21c>)
     24e:	f007 fcbf 	bl	7bd0 <Print::printf(char const*, ...)>

        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     252:	2260      	movs	r2, #96	; 0x60
     254:	2100      	movs	r1, #0
     256:	4818      	ldr	r0, [pc, #96]	; (2b8 <loop+0x24c>)
     258:	f00c fad0 	bl	c7fc <memset>
        max_stat=0;        
     25c:	2300      	movs	r3, #0
     25e:	f8c8 3000 	str.w	r3, [r8]
     262:	e73d      	b.n	e0 <loop+0x74>
     264:	20021180 	.word	0x20021180
     268:	200225d2 	.word	0x200225d2
     26c:	200225d4 	.word	0x200225d4
     270:	2002117c 	.word	0x2002117c
     274:	20022554 	.word	0x20022554
     278:	200225d6 	.word	0x200225d6
     27c:	20021fac 	.word	0x20021fac
     280:	200216c0 	.word	0x200216c0
     284:	20007cfc 	.word	0x20007cfc
     288:	2000886c 	.word	0x2000886c
     28c:	20007d20 	.word	0x20007d20
     290:	20008664 	.word	0x20008664
     294:	20007d24 	.word	0x20007d24
     298:	20007d28 	.word	0x20007d28
     29c:	200216b8 	.word	0x200216b8
     2a0:	20007d2c 	.word	0x20007d2c
     2a4:	20007d30 	.word	0x20007d30
     2a8:	20008e6a 	.word	0x20008e6a
     2ac:	20021f44 	.word	0x20021f44
     2b0:	20007d40 	.word	0x20007d40
     2b4:	20007d48 	.word	0x20007d48
     2b8:	20021fb0 	.word	0x20021fb0
     2bc:	20021fa8 	.word	0x20021fa8
     2c0:	20007d38 	.word	0x20007d38
     2c4:	20021fac 	.word	0x20021fac
     2c8:	20021f64 	.word	0x20021f64

000002cc <setup1()>:
  }
}
/**********************************************************************************/
// rp2040 has dial core. let acq run on its own core
void setup1()
{ while(!ready) {delay(1);} // wait for setup() to finish
     2cc:	b510      	push	{r4, lr}
     2ce:	4c0b      	ldr	r4, [pc, #44]	; (2fc <setup1()+0x30>)
     2d0:	6823      	ldr	r3, [r4, #0]
     2d2:	b92b      	cbnz	r3, 2e0 <setup1()+0x14>
     2d4:	2001      	movs	r0, #1
     2d6:	f007 ff11 	bl	80fc <delay>
     2da:	6823      	ldr	r3, [r4, #0]
     2dc:	2b00      	cmp	r3, #0
     2de:	d0f9      	beq.n	2d4 <setup1()+0x8>
  i2s_setup();
     2e0:	f000 fa4c 	bl	77c <i2s_setup()>
  dma_setup();
     2e4:	f000 fa90 	bl	808 <dma_setup()>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     2e8:	210b      	movs	r1, #11
     2ea:	4805      	ldr	r0, [pc, #20]	; (300 <setup1()+0x34>)
     2ec:	f009 ffb2 	bl	a254 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     2f0:	4804      	ldr	r0, [pc, #16]	; (304 <setup1()+0x38>)

  Serial.println("Setup1 done");
}
     2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2f6:	f007 bc4f 	b.w	7b98 <Print::println()>
     2fa:	bf00      	nop
     2fc:	20022010 	.word	0x20022010
     300:	200005c4 	.word	0x200005c4
     304:	2000886c 	.word	0x2000886c

00000308 <_GLOBAL__sub_I_trigger>:

void loop1(){}  // nothing to be done here
     308:	b5f0      	push	{r4, r5, r6, r7, lr}
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     30a:	4e38      	ldr	r6, [pc, #224]	; (3ec <_GLOBAL__sub_I_trigger+0xe4>)
		num_inputs(ninput), inputQueue(iqueue) {
     30c:	2200      	movs	r2, #0
     30e:	4c38      	ldr	r4, [pc, #224]	; (3f0 <_GLOBAL__sub_I_trigger+0xe8>)
     310:	b083      	sub	sp, #12
     312:	4f38      	ldr	r7, [pc, #224]	; (3f4 <_GLOBAL__sub_I_trigger+0xec>)
			if (first_update == NULL) {
     314:	6833      	ldr	r3, [r6, #0]
		num_inputs(ninput), inputQueue(iqueue) {
     316:	6027      	str	r7, [r4, #0]
     318:	6122      	str	r2, [r4, #16]
			active = false;
     31a:	8122      	strh	r2, [r4, #8]
			destination_list = NULL;
     31c:	60e2      	str	r2, [r4, #12]
			if (first_update == NULL) {
     31e:	2b00      	cmp	r3, #0
     320:	d05e      	beq.n	3e0 <_GLOBAL__sub_I_trigger+0xd8>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     322:	461a      	mov	r2, r3
     324:	695b      	ldr	r3, [r3, #20]
     326:	2b00      	cmp	r3, #0
     328:	d1fb      	bne.n	322 <_GLOBAL__sub_I_trigger+0x1a>
				p->next_update = this;
     32a:	6154      	str	r4, [r2, #20]
			}
			next_update = NULL;
     32c:	2500      	movs	r5, #0
          AudioTrigger() : AudioStream(0, NULL) {init(); prio = 8;}
     32e:	4b32      	ldr	r3, [pc, #200]	; (3f8 <_GLOBAL__sub_I_trigger+0xf0>)
     330:	482f      	ldr	r0, [pc, #188]	; (3f0 <_GLOBAL__sub_I_trigger+0xe8>)
     332:	6023      	str	r3, [r4, #0]
     334:	6165      	str	r5, [r4, #20]
			cpu_cycles = 0;
     336:	6065      	str	r5, [r4, #4]
			cpu_cycles_max = 0;
			numConnections = 0;
     338:	72a5      	strb	r5, [r4, #10]
     33a:	f000 fb7f 	bl	a3c <AudioTrigger::init()>
     33e:	2308      	movs	r3, #8
		num_inputs(ninput), inputQueue(iqueue) {
     340:	4a2e      	ldr	r2, [pc, #184]	; (3fc <_GLOBAL__sub_I_trigger+0xf4>)
     342:	61a3      	str	r3, [r4, #24]
			if (first_update == NULL) {
     344:	6834      	ldr	r4, [r6, #0]
		num_inputs(ninput), inputQueue(iqueue) {
     346:	6017      	str	r7, [r2, #0]
     348:	6115      	str	r5, [r2, #16]
			active = false;
     34a:	8115      	strh	r5, [r2, #8]
			destination_list = NULL;
     34c:	60d5      	str	r5, [r2, #12]
			if (first_update == NULL) {
     34e:	2c00      	cmp	r4, #0
     350:	d048      	beq.n	3e4 <_GLOBAL__sub_I_trigger+0xdc>
     352:	4623      	mov	r3, r4
				for (p=first_update; p->next_update; p = p->next_update) ;
     354:	4619      	mov	r1, r3
     356:	695b      	ldr	r3, [r3, #20]
     358:	2b00      	cmp	r3, #0
     35a:	d1fb      	bne.n	354 <_GLOBAL__sub_I_trigger+0x4c>
				p->next_update = this;
     35c:	614a      	str	r2, [r1, #20]
      int16_t __not_in_flash_func(getAudio)(int32_t *data);

      class AudioIF : public AudioStream
      {
      public:
        AudioIF(int fsamp) : AudioStream(0, NULL) { this->fsamp=fsamp;}
     35e:	4828      	ldr	r0, [pc, #160]	; (400 <_GLOBAL__sub_I_trigger+0xf8>)
			next_update = NULL;
     360:	2100      	movs	r1, #0
		num_inputs(ninput), inputQueue(iqueue) {
     362:	4b28      	ldr	r3, [pc, #160]	; (404 <_GLOBAL__sub_I_trigger+0xfc>)
     364:	6010      	str	r0, [r2, #0]
     366:	f64a 4044 	movw	r0, #44100	; 0xac44
			next_update = NULL;
     36a:	6151      	str	r1, [r2, #20]
     36c:	6190      	str	r0, [r2, #24]
		num_inputs(ninput), inputQueue(iqueue) {
     36e:	2002      	movs	r0, #2
			cpu_cycles = 0;
     370:	6051      	str	r1, [r2, #4]
			numConnections = 0;
     372:	7291      	strb	r1, [r2, #10]
		num_inputs(ninput), inputQueue(iqueue) {
     374:	f103 0218 	add.w	r2, r3, #24
			active = false;
     378:	7219      	strb	r1, [r3, #8]
			destination_list = NULL;
     37a:	60d9      	str	r1, [r3, #12]
				inputQueue[i] = NULL;
     37c:	6199      	str	r1, [r3, #24]
     37e:	61d9      	str	r1, [r3, #28]
		num_inputs(ninput), inputQueue(iqueue) {
     380:	7258      	strb	r0, [r3, #9]
     382:	611a      	str	r2, [r3, #16]
				for (p=first_update; p->next_update; p = p->next_update) ;
     384:	4622      	mov	r2, r4
     386:	6964      	ldr	r4, [r4, #20]
     388:	2c00      	cmp	r4, #0
     38a:	d1fb      	bne.n	384 <_GLOBAL__sub_I_trigger+0x7c>
};

class AudioOutputUSB : public AudioStream
{
public:
	AudioOutputUSB(void) : AudioStream(2, inputQueueArray) { begin(); }
     38c:	491e      	ldr	r1, [pc, #120]	; (408 <_GLOBAL__sub_I_trigger+0x100>)
				p->next_update = this;
     38e:	6153      	str	r3, [r2, #20]
			cpu_cycles = 0;
     390:	605c      	str	r4, [r3, #4]
			next_update = NULL;
     392:	615c      	str	r4, [r3, #20]
			numConnections = 0;
     394:	729c      	strb	r4, [r3, #10]
     396:	6019      	str	r1, [r3, #0]
     398:	481a      	ldr	r0, [pc, #104]	; (404 <_GLOBAL__sub_I_trigger+0xfc>)
     39a:	f009 f967 	bl	966c <AudioOutputUSB::begin()>
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
     39e:	481b      	ldr	r0, [pc, #108]	; (40c <_GLOBAL__sub_I_trigger+0x104>)
     3a0:	f007 f8f6 	bl	7590 <AudioConnection::AudioConnection()>
     3a4:	4b17      	ldr	r3, [pc, #92]	; (404 <_GLOBAL__sub_I_trigger+0xfc>)
     3a6:	4622      	mov	r2, r4
     3a8:	4914      	ldr	r1, [pc, #80]	; (3fc <_GLOBAL__sub_I_trigger+0xf4>)
     3aa:	9400      	str	r4, [sp, #0]
     3ac:	4817      	ldr	r0, [pc, #92]	; (40c <_GLOBAL__sub_I_trigger+0x104>)
     3ae:	f007 f963 	bl	7678 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
  AudioConnection patchCord1(acqIF, 0, usb, 0);
     3b2:	4a17      	ldr	r2, [pc, #92]	; (410 <_GLOBAL__sub_I_trigger+0x108>)
     3b4:	4917      	ldr	r1, [pc, #92]	; (414 <_GLOBAL__sub_I_trigger+0x10c>)
     3b6:	4815      	ldr	r0, [pc, #84]	; (40c <_GLOBAL__sub_I_trigger+0x104>)
     3b8:	f00a f964 	bl	a684 <__aeabi_atexit>
     3bc:	4816      	ldr	r0, [pc, #88]	; (418 <_GLOBAL__sub_I_trigger+0x110>)
     3be:	f007 f8e7 	bl	7590 <AudioConnection::AudioConnection()>
     3c2:	2201      	movs	r2, #1
     3c4:	490d      	ldr	r1, [pc, #52]	; (3fc <_GLOBAL__sub_I_trigger+0xf4>)
     3c6:	9200      	str	r2, [sp, #0]
     3c8:	4b0e      	ldr	r3, [pc, #56]	; (404 <_GLOBAL__sub_I_trigger+0xfc>)
     3ca:	4813      	ldr	r0, [pc, #76]	; (418 <_GLOBAL__sub_I_trigger+0x110>)
     3cc:	f007 f954 	bl	7678 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
  AudioConnection patchCord2(acqIF, 1, usb, 1);
     3d0:	4a0f      	ldr	r2, [pc, #60]	; (410 <_GLOBAL__sub_I_trigger+0x108>)
     3d2:	4910      	ldr	r1, [pc, #64]	; (414 <_GLOBAL__sub_I_trigger+0x10c>)
     3d4:	4810      	ldr	r0, [pc, #64]	; (418 <_GLOBAL__sub_I_trigger+0x110>)
void loop1(){}  // nothing to be done here
     3d6:	b003      	add	sp, #12
     3d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  AudioConnection patchCord2(acqIF, 1, usb, 1);
     3dc:	f00a b952 	b.w	a684 <__aeabi_atexit>
				first_update = this;
     3e0:	6034      	str	r4, [r6, #0]
     3e2:	e7a3      	b.n	32c <_GLOBAL__sub_I_trigger+0x24>
     3e4:	4614      	mov	r4, r2
     3e6:	6032      	str	r2, [r6, #0]
     3e8:	e7b9      	b.n	35e <_GLOBAL__sub_I_trigger+0x56>
     3ea:	bf00      	nop
     3ec:	200210a4 	.word	0x200210a4
     3f0:	20022568 	.word	0x20022568
     3f4:	200009a8 	.word	0x200009a8
     3f8:	200009b4 	.word	0x200009b4
     3fc:	2002169c 	.word	0x2002169c
     400:	20000a94 	.word	0x20000a94
     404:	20022584 	.word	0x20022584
     408:	200009c0 	.word	0x200009c0
     40c:	20021f80 	.word	0x20021f80
     410:	20008898 	.word	0x20008898
     414:	0000772d 	.word	0x0000772d
     418:	20021f94 	.word	0x20021f94

0000041c <setup>:
{
     41c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     420:	4d4b      	ldr	r5, [pc, #300]	; (550 <setup+0x134>)
     422:	b087      	sub	sp, #28
     424:	4c4b      	ldr	r4, [pc, #300]	; (554 <setup+0x138>)
				if (elapsed > 750) break;
     426:	f240 28ee 	movw	r8, #750	; 0x2ee
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     42a:	4f4b      	ldr	r7, [pc, #300]	; (558 <setup+0x13c>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     42c:	f8df 9150 	ldr.w	r9, [pc, #336]	; 580 <setup+0x164>
		uint32_t millis_begin = systick_millis_count;
     430:	682e      	ldr	r6, [r5, #0]
		yield();
     432:	f009 ff8d 	bl	a350 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     436:	7823      	ldrb	r3, [r4, #0]
     438:	2b00      	cmp	r3, #0
     43a:	d066      	beq.n	50a <setup+0xee>
     43c:	783b      	ldrb	r3, [r7, #0]
     43e:	07da      	lsls	r2, r3, #31
     440:	d563      	bpl.n	50a <setup+0xee>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     442:	682b      	ldr	r3, [r5, #0]
     444:	f8d9 2000 	ldr.w	r2, [r9]
     448:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     44a:	2b0e      	cmp	r3, #14
     44c:	d95d      	bls.n	50a <setup+0xee>
     44e:	682b      	ldr	r3, [r5, #0]
  while(millis()<60000) if(Serial) break;
     450:	f64e 265f 	movw	r6, #59999	; 0xea5f
     454:	42b3      	cmp	r3, r6
     456:	d810      	bhi.n	47a <setup+0x5e>
     458:	4f3f      	ldr	r7, [pc, #252]	; (558 <setup+0x13c>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     45a:	f8df 8124 	ldr.w	r8, [pc, #292]	; 580 <setup+0x164>
		yield();
     45e:	f009 ff77 	bl	a350 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     462:	7823      	ldrb	r3, [r4, #0]
     464:	2b00      	cmp	r3, #0
     466:	d05a      	beq.n	51e <setup+0x102>
     468:	783b      	ldrb	r3, [r7, #0]
     46a:	07db      	lsls	r3, r3, #31
     46c:	d557      	bpl.n	51e <setup+0x102>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     46e:	682b      	ldr	r3, [r5, #0]
     470:	f8d8 2000 	ldr.w	r2, [r8]
     474:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     476:	2b0e      	cmp	r3, #14
     478:	d951      	bls.n	51e <setup+0x102>
    if(CrashReport) Serial.print(CrashReport);
     47a:	4838      	ldr	r0, [pc, #224]	; (55c <setup+0x140>)
     47c:	f014 feec 	bl	15258 <___ZN16CrashReportClasscvbEv_veneer>
     480:	2800      	cmp	r0, #0
     482:	d154      	bne.n	52e <setup+0x112>
      AudioMemory(8);
     484:	2108      	movs	r1, #8
     486:	4836      	ldr	r0, [pc, #216]	; (560 <setup+0x144>)
     488:	f014 fede 	bl	15248 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
  rtc_setup();
     48c:	2113      	movs	r1, #19
     48e:	2012      	movs	r0, #18
     490:	f001 f9a4 	bl	17dc <rtc_setup(unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     494:	2110      	movs	r1, #16
     496:	4833      	ldr	r0, [pc, #204]	; (564 <setup+0x148>)
     498:	f009 fedc 	bl	a254 <usb_serial_write>
     49c:	4832      	ldr	r0, [pc, #200]	; (568 <setup+0x14c>)
     49e:	f007 fb7b 	bl	7b98 <Print::println()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     4a2:	a804      	add	r0, sp, #16
     4a4:	f001 f99c 	bl	17e0 <rtc_get_datetime(datetime_t*)>
     4a8:	2800      	cmp	r0, #0
     4aa:	d048      	beq.n	53e <setup+0x122>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     4ac:	f99d 1017 	ldrsb.w	r1, [sp, #23]
     4b0:	f99d 2016 	ldrsb.w	r2, [sp, #22]
     4b4:	f99d 0013 	ldrsb.w	r0, [sp, #19]
     4b8:	f99d 4015 	ldrsb.w	r4, [sp, #21]
     4bc:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     4c0:	e9cd 2102 	strd	r2, r1, [sp, #8]
     4c4:	e9cd 0400 	strd	r0, r4, [sp]
     4c8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     4cc:	4927      	ldr	r1, [pc, #156]	; (56c <setup+0x150>)
     4ce:	4826      	ldr	r0, [pc, #152]	; (568 <setup+0x14c>)
     4d0:	f007 fb7e 	bl	7bd0 <Print::printf(char const*, ...)>
                      t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
     4d4:	4824      	ldr	r0, [pc, #144]	; (568 <setup+0x14c>)
     4d6:	f007 fb5f 	bl	7b98 <Print::println()>
     4da:	210b      	movs	r1, #11
     4dc:	4824      	ldr	r0, [pc, #144]	; (570 <setup+0x154>)
     4de:	f009 feb9 	bl	a254 <usb_serial_write>
     4e2:	4821      	ldr	r0, [pc, #132]	; (568 <setup+0x14c>)
     4e4:	f007 fb58 	bl	7b98 <Print::println()>
  filing_init();
     4e8:	f000 fce8 	bl	ebc <filing_init()>
     4ec:	210a      	movs	r1, #10
     4ee:	4821      	ldr	r0, [pc, #132]	; (574 <setup+0x158>)
     4f0:	f009 feb0 	bl	a254 <usb_serial_write>
     4f4:	481c      	ldr	r0, [pc, #112]	; (568 <setup+0x14c>)
     4f6:	f007 fb4f 	bl	7b98 <Print::println()>
  ready=1;
     4fa:	4b1f      	ldr	r3, [pc, #124]	; (578 <setup+0x15c>)
     4fc:	2201      	movs	r2, #1
     4fe:	601a      	str	r2, [r3, #0]
    setup1();
     500:	f7ff fee4 	bl	2cc <setup1()>
}
     504:	b007      	add	sp, #28
     506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     50a:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     50c:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     50e:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     510:	b192      	cbz	r2, 538 <setup+0x11c>
				if (elapsed > 2000) break;
     512:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     516:	d89a      	bhi.n	44e <setup+0x32>
			yield();
     518:	f009 ff1a 	bl	a350 <yield>
     51c:	e789      	b.n	432 <setup+0x16>
     51e:	682b      	ldr	r3, [r5, #0]
  while(millis()<60000) if(Serial) break;
     520:	42b3      	cmp	r3, r6
     522:	d99c      	bls.n	45e <setup+0x42>
    if(CrashReport) Serial.print(CrashReport);
     524:	480d      	ldr	r0, [pc, #52]	; (55c <setup+0x140>)
     526:	f014 fe97 	bl	15258 <___ZN16CrashReportClasscvbEv_veneer>
     52a:	2800      	cmp	r0, #0
     52c:	d0aa      	beq.n	484 <setup+0x68>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     52e:	490e      	ldr	r1, [pc, #56]	; (568 <setup+0x14c>)
     530:	480a      	ldr	r0, [pc, #40]	; (55c <setup+0x140>)
     532:	f014 fe81 	bl	15238 <___ZNK16CrashReportClass7printToER5Print_veneer>
     536:	e7a5      	b.n	484 <setup+0x68>
				if (elapsed > 750) break;
     538:	4543      	cmp	r3, r8
     53a:	d9ed      	bls.n	518 <setup+0xfc>
     53c:	e787      	b.n	44e <setup+0x32>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     53e:	2114      	movs	r1, #20
     540:	480e      	ldr	r0, [pc, #56]	; (57c <setup+0x160>)
     542:	f009 fe87 	bl	a254 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     546:	4808      	ldr	r0, [pc, #32]	; (568 <setup+0x14c>)
     548:	f007 fb26 	bl	7b98 <Print::println()>
     54c:	e7ae      	b.n	4ac <setup+0x90>
     54e:	bf00      	nop
     550:	20022554 	.word	0x20022554
     554:	20022604 	.word	0x20022604
     558:	20022603 	.word	0x20022603
     55c:	20008860 	.word	0x20008860
     560:	20200000 	.word	0x20200000
     564:	20007d58 	.word	0x20007d58
     568:	2000886c 	.word	0x2000886c
     56c:	20007d84 	.word	0x20007d84
     570:	20007dac 	.word	0x20007dac
     574:	20007db8 	.word	0x20007db8
     578:	20022010 	.word	0x20022010
     57c:	20007d6c 	.word	0x20007d6c
     580:	200225b8 	.word	0x200225b8

00000584 <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     584:	4b2c      	ldr	r3, [pc, #176]	; (638 <acq_isr()+0xb4>)

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     586:	4a2d      	ldr	r2, [pc, #180]	; (63c <acq_isr()+0xb8>)
    daddr = (uint32_t)(dma.TCD->DADDR);
     588:	6818      	ldr	r0, [r3, #0]
    // need to remove data from the first half
      src = (int32_t *)&i2s_buffer[0];
    }

    #if NCH==1
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     58a:	492d      	ldr	r1, [pc, #180]	; (640 <acq_isr()+0xbc>)
    daddr = (uint32_t)(dma.TCD->DADDR);
     58c:	6900      	ldr	r0, [r0, #16]
  {
     58e:	b510      	push	{r4, lr}
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     590:	4c2c      	ldr	r4, [pc, #176]	; (644 <acq_isr()+0xc0>)
     592:	791b      	ldrb	r3, [r3, #4]
     594:	77e3      	strb	r3, [r4, #31]
      src = (int32_t *)&i2s_buffer[0];
     596:	f5a2 6480 	sub.w	r4, r2, #1024	; 0x400
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     59a:	f9b1 1000 	ldrsh.w	r1, [r1]
     59e:	2300      	movs	r3, #0
      src = (int32_t *)&i2s_buffer[0];
     5a0:	4290      	cmp	r0, r2
     5a2:	bf38      	it	cc
     5a4:	4614      	movcc	r4, r2
      for(int ii=0; ii<NBUF_ACQ; ii++) src[2*ii+ICH]  = (src[2*ii+ICH]-BIAS) >> shift;
     5a6:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
     5aa:	410a      	asrs	r2, r1
     5ac:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
     5b0:	3301      	adds	r3, #1
     5b2:	2b80      	cmp	r3, #128	; 0x80
     5b4:	d1f7      	bne.n	5a6 <acq_isr()+0x22>
#endif

int32_t acqbias=0;
/***************************************************************************/
static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     5b6:	4824      	ldr	r0, [pc, #144]	; (648 <acq_isr()+0xc4>)

  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
     5b8:	2300      	movs	r3, #0
     5ba:	4a24      	ldr	r2, [pc, #144]	; (64c <acq_isr()+0xc8>)
{ procCount++;
     5bc:	6801      	ldr	r1, [r0, #0]
     5be:	3101      	adds	r1, #1
     5c0:	6001      	str	r1, [r0, #0]
     5c2:	4611      	mov	r1, r2
  for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[2*ii+ICH];
     5c4:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
     5c8:	3301      	adds	r3, #1
     5ca:	2b80      	cmp	r3, #128	; 0x80
     5cc:	f841 0f04 	str.w	r0, [r1, #4]!
     5d0:	d1f8      	bne.n	5c4 <acq_isr()+0x40>
     5d2:	4b1f      	ldr	r3, [pc, #124]	; (650 <acq_isr()+0xcc>)
  
  float tmp=0.0f;
     5d4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 654 <acq_isr()+0xd0>
  for(int ii=0; ii<NBUF_ACQ; ii++) tmp +=(float)acqBuffer[ii]/(float)NBUF_ACQ;
     5d8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 658 <acq_isr()+0xd4>
     5dc:	edd2 7a01 	vldr	s15, [r2, #4]
     5e0:	3204      	adds	r2, #4
     5e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     5e6:	4293      	cmp	r3, r2
     5e8:	eea7 7aa6 	vfma.f32	s14, s15, s13
     5ec:	d1f6      	bne.n	5dc <acq_isr()+0x58>
  acqbias=(int32_t) tmp;

  if(proc==0)
     5ee:	4b1b      	ldr	r3, [pc, #108]	; (65c <acq_isr()+0xd8>)
  acqbias=(int32_t) tmp;
     5f0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
     5f4:	4a1a      	ldr	r2, [pc, #104]	; (660 <acq_isr()+0xdc>)
  if(proc==0)
     5f6:	f9b3 3000 	ldrsh.w	r3, [r3]
  acqbias=(int32_t) tmp;
     5fa:	ed82 7a00 	vstr	s14, [r2]
  if(proc==0)
     5fe:	b133      	cbz	r3, 60e <acq_isr()+0x8a>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     600:	2b01      	cmp	r3, #1
     602:	d012      	beq.n	62a <acq_isr()+0xa6>
      putAudio(src);
     604:	4620      	mov	r0, r4
  }
     606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      putAudio(src);
     60a:	f000 b9d7 	b.w	9bc <putAudio(long*)>
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     60e:	4815      	ldr	r0, [pc, #84]	; (664 <acq_isr()+0xe0>)
     610:	f000 ff3e 	bl	1490 <pushData(unsigned long*)>
     614:	2800      	cmp	r0, #0
     616:	d1f5      	bne.n	604 <acq_isr()+0x80>
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     618:	4a13      	ldr	r2, [pc, #76]	; (668 <acq_isr()+0xe4>)
      putAudio(src);
     61a:	4620      	mov	r0, r4
   if(!compress((void *)acqBuffer)) procMiss++;
     61c:	6813      	ldr	r3, [r2, #0]
     61e:	3301      	adds	r3, #1
  }
     620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   if(!compress((void *)acqBuffer)) procMiss++;
     624:	6013      	str	r3, [r2, #0]
      putAudio(src);
     626:	f000 b9c9 	b.w	9bc <putAudio(long*)>
   if(!compress((void *)acqBuffer)) procMiss++;
     62a:	480e      	ldr	r0, [pc, #56]	; (664 <acq_isr()+0xe0>)
     62c:	f000 fa48 	bl	ac0 <compress(void*)>
     630:	2800      	cmp	r0, #0
     632:	d1e7      	bne.n	604 <acq_isr()+0x80>
     634:	e7f0      	b.n	618 <acq_isr()+0x94>
     636:	bf00      	nop
     638:	200209bc 	.word	0x200209bc
     63c:	20021b44 	.word	0x20021b44
     640:	20008e6c 	.word	0x20008e6c
     644:	400e8000 	.word	0x400e8000
     648:	20021fa8 	.word	0x20021fa8
     64c:	20021498 	.word	0x20021498
     650:	20021698 	.word	0x20021698
     654:	00000000 	.word	0x00000000
     658:	3c000000 	.word	0x3c000000
     65c:	20008e6a 	.word	0x20008e6a
     660:	200216b8 	.word	0x200216b8
     664:	2002149c 	.word	0x2002149c
     668:	20021fac 	.word	0x20021fac

0000066c <DMAChannel::~DMAChannel()>:
	~DMAChannel() {
     66c:	b510      	push	{r4, lr}
     66e:	4604      	mov	r4, r0
		release();
     670:	f007 f8f2 	bl	7858 <DMAChannel::release()>
	}
     674:	4620      	mov	r0, r4
     676:	bd10      	pop	{r4, pc}

00000678 <setAudioFrequency(int)>:
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     678:	ee07 0a90 	vmov	s15, r0
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     67c:	4938      	ldr	r1, [pc, #224]	; (760 <setAudioFrequency(int)+0xe8>)
     67e:	0280      	lsls	r0, r0, #10
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     680:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
     684:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     688:	4b36      	ldr	r3, [pc, #216]	; (764 <setAudioFrequency(int)+0xec>)
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     68a:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 748 <setAudioFrequency(int)+0xd0>
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     68e:	fb91 f1f0 	sdiv	r1, r1, r0
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     692:	ee27 7b06 	vmul.f64	d7, d7, d6
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     696:	1c4a      	adds	r2, r1, #1
     698:	ee06 2a10 	vmov	s12, r2
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     69c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
     6a0:	ee27 7b03 	vmul.f64	d7, d7, d3
     6a4:	ed9f 4b2a 	vldr	d4, [pc, #168]	; 750 <setAudioFrequency(int)+0xd8>
  {
     6a8:	b410      	push	{r4}
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     6aa:	ee27 7b06 	vmul.f64	d7, d7, d6
    int c1 = C * c2 - (c0 * c2);
     6ae:	f242 7410 	movw	r4, #10000	; 0x2710
     6b2:	ed9f 5b29 	vldr	d5, [pc, #164]	; 758 <setAudioFrequency(int)+0xe0>
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     6b6:	ee87 6b04 	vdiv.f64	d6, d7, d4
    int c0 = C;
     6ba:	eefd 7bc6 	vcvt.s32.f64	s15, d6
     6be:	ee17 2a90 	vmov	r2, s15
    int c1 = C * c2 - (c0 * c2);
     6c2:	fb04 f002 	mul.w	r0, r4, r2
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     6c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    int c1 = C * c2 - (c0 * c2);
     6ca:	ee07 0a10 	vmov	s14, r0
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     6ce:	f442 1289 	orr.w	r2, r2, #1122304	; 0x112000
    int c1 = C * c2 - (c0 * c2);
     6d2:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     6d6:	671a      	str	r2, [r3, #112]	; 0x70
    int c1 = C * c2 - (c0 * c2);
     6d8:	ee96 7b05 	vfnms.f64	d7, d6, d5
     6dc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     6e0:	ee17 2a90 	vmov	r2, s15
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     6e4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
     6e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     6ec:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     6f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     6f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
     6f6:	671a      	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     6f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     6fa:	2a00      	cmp	r2, #0
     6fc:	dafc      	bge.n	6f8 <setAudioFrequency(int)+0x80>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     6fe:	f8d3 4170 	ldr.w	r4, [r3, #368]	; 0x170
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     702:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     706:	4a18      	ldr	r2, [pc, #96]	; (768 <setAudioFrequency(int)+0xf0>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     708:	4818      	ldr	r0, [pc, #96]	; (76c <setAudioFrequency(int)+0xf4>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     70a:	4022      	ands	r2, r4
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     70c:	4c18      	ldr	r4, [pc, #96]	; (770 <setAudioFrequency(int)+0xf8>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     70e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     712:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     714:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     718:	671a      	str	r2, [r3, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     71a:	69c2      	ldr	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     71c:	4b15      	ldr	r3, [pc, #84]	; (774 <setAudioFrequency(int)+0xfc>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     71e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     726:	61c2      	str	r2, [r0, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     728:	6a82      	ldr	r2, [r0, #40]	; 0x28
     72a:	4013      	ands	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     72c:	4a12      	ldr	r2, [pc, #72]	; (778 <setAudioFrequency(int)+0x100>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     72e:	430b      	orrs	r3, r1
     730:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     734:	6283      	str	r3, [r0, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     736:	6863      	ldr	r3, [r4, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     738:	401a      	ands	r2, r3
     73a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     73e:	6062      	str	r2, [r4, #4]
  }
     740:	f85d 4b04 	ldr.w	r4, [sp], #4
     744:	4770      	bx	lr
     746:	bf00      	nop
     748:	00000000 	.word	0x00000000
     74c:	40700000 	.word	0x40700000
     750:	00000000 	.word	0x00000000
     754:	4176e360 	.word	0x4176e360
     758:	00000000 	.word	0x00000000
     75c:	40c38800 	.word	0x40c38800
     760:	269fb200 	.word	0x269fb200
     764:	400d8000 	.word	0x400d8000
     768:	ff7f7fff 	.word	0xff7f7fff
     76c:	400fc000 	.word	0x400fc000
     770:	400ac000 	.word	0x400ac000
     774:	fffffe00 	.word	0xfffffe00
     778:	fff7fff8 	.word	0xfff7fff8

0000077c <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     77c:	4a19      	ldr	r2, [pc, #100]	; (7e4 <i2s_setup()+0x68>)
     77e:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  {
     780:	b510      	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     782:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     786:	4c18      	ldr	r4, [pc, #96]	; (7e8 <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     788:	67d3      	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     78a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     78e:	2b00      	cmp	r3, #0
     790:	db27      	blt.n	7e2 <i2s_setup()+0x66>
    int fs = fsamp;
     792:	4b16      	ldr	r3, [pc, #88]	; (7ec <i2s_setup()+0x70>)
    setAudioFrequency(fs);
     794:	6818      	ldr	r0, [r3, #0]
     796:	f7ff ff6f 	bl	678 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     79a:	4b15      	ldr	r3, [pc, #84]	; (7f0 <i2s_setup()+0x74>)
     79c:	2203      	movs	r2, #3
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     79e:	4915      	ldr	r1, [pc, #84]	; (7f4 <i2s_setup()+0x78>)
     7a0:	2002      	movs	r0, #2
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     7a2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     7a6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     7aa:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     7ae:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     7b2:	2201      	movs	r2, #1
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     7b4:	f8c1 0194 	str.w	r0, [r1, #404]	; 0x194
    I2S1_RCR3 = I2S_RCR3_RCE;
     7b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    I2S1_RMR = 0;
     7bc:	2100      	movs	r1, #0
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     7be:	480e      	ldr	r0, [pc, #56]	; (7f8 <i2s_setup()+0x7c>)
    I2S1_RMR = 0;
     7c0:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(1);
     7c4:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     7c8:	490c      	ldr	r1, [pc, #48]	; (7fc <i2s_setup()+0x80>)
    I2S1_RCR2 = I2S_RCR2_SYNC(0) | I2S_RCR2_BCP  
     7ca:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     7ce:	4a0c      	ldr	r2, [pc, #48]	; (800 <i2s_setup()+0x84>)
    I2S1_RCR3 = I2S_RCR3_RCE;
     7d0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     7d4:	4b0b      	ldr	r3, [pc, #44]	; (804 <i2s_setup()+0x88>)
    I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((MBIT-1)) | I2S_RCR4_MF
     7d6:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     7da:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     7de:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     7e2:	bd10      	pop	{r4, pc}
     7e4:	400fc000 	.word	0x400fc000
     7e8:	40384000 	.word	0x40384000
     7ec:	20008e3c 	.word	0x20008e3c
     7f0:	401f8000 	.word	0x401f8000
     7f4:	401f8400 	.word	0x401f8400
     7f8:	07000001 	.word	0x07000001
     7fc:	00011f1b 	.word	0x00011f1b
     800:	1f1f1f00 	.word	0x1f1f1f00
     804:	92000001 	.word	0x92000001

00000808 <dma_setup()>:
  {
     808:	b538      	push	{r3, r4, r5, lr}
    dma.begin(true); // Allocate the DMA channel first
     80a:	4c1c      	ldr	r4, [pc, #112]	; (87c <dma_setup()+0x74>)
     80c:	2101      	movs	r1, #1
    dma.TCD->SOFF = 0;
     80e:	4d1c      	ldr	r5, [pc, #112]	; (880 <dma_setup()+0x78>)
    dma.begin(true); // Allocate the DMA channel first
     810:	4620      	mov	r0, r4
     812:	f006 ffc7 	bl	77a4 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     816:	6823      	ldr	r3, [r4, #0]
     818:	481a      	ldr	r0, [pc, #104]	; (884 <dma_setup()+0x7c>)
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     81a:	f44f 7200 	mov.w	r2, #512	; 0x200
    dma.TCD->DADDR = i2s_buffer;
     81e:	491a      	ldr	r1, [pc, #104]	; (888 <dma_setup()+0x80>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     820:	6018      	str	r0, [r3, #0]
    dma.TCD->DADDR = i2s_buffer;
     822:	6119      	str	r1, [r3, #16]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     824:	82da      	strh	r2, [r3, #22]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     826:	8ada      	ldrh	r2, [r3, #22]
    dma.TCD->SOFF = 0;
     828:	605d      	str	r5, [r3, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     82a:	b292      	uxth	r2, r2
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     82c:	4d17      	ldr	r5, [pc, #92]	; (88c <dma_setup()+0x84>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     82e:	7920      	ldrb	r0, [r4, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     830:	83da      	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     832:	2206      	movs	r2, #6
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     834:	619d      	str	r5, [r3, #24]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     836:	839a      	strh	r2, [r3, #28]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     838:	2204      	movs	r2, #4
     83a:	4915      	ldr	r1, [pc, #84]	; (890 <dma_setup()+0x88>)
     83c:	609a      	str	r2, [r3, #8]
    dma.TCD->DOFF = (MBIT/8);
     83e:	829a      	strh	r2, [r3, #20]
    dma.TCD->SLAST = 0;
     840:	2200      	movs	r2, #0
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     842:	4d14      	ldr	r5, [pc, #80]	; (894 <dma_setup()+0x8c>)
     844:	60da      	str	r2, [r3, #12]
		*mux = 0;
     846:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     84a:	4b13      	ldr	r3, [pc, #76]	; (898 <dma_setup()+0x90>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     84c:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     850:	2101      	movs	r1, #1
     852:	7922      	ldrb	r2, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     854:	4811      	ldr	r0, [pc, #68]	; (89c <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     856:	f002 051f 	and.w	r5, r2, #31
     85a:	eb03 1352 	add.w	r3, r3, r2, lsr #5
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     85e:	f102 0c10 	add.w	ip, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     862:	40a9      	lsls	r1, r5
     864:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     866:	4d0e      	ldr	r5, [pc, #56]	; (8a0 <dma_setup()+0x98>)
     868:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     86c:	2060      	movs	r0, #96	; 0x60
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     86e:	6019      	str	r1, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     870:	490c      	ldr	r1, [pc, #48]	; (8a4 <dma_setup()+0x9c>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     872:	4b0d      	ldr	r3, [pc, #52]	; (8a8 <dma_setup()+0xa0>)
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     874:	5450      	strb	r0, [r2, r1]
		DMA_SERQ = channel;
     876:	7922      	ldrb	r2, [r4, #4]
     878:	76da      	strb	r2, [r3, #27]
  }
     87a:	bd38      	pop	{r3, r4, r5, pc}
     87c:	200209bc 	.word	0x200209bc
     880:	02020000 	.word	0x02020000
     884:	403840a0 	.word	0x403840a0
     888:	20021744 	.word	0x20021744
     88c:	fffff800 	.word	0xfffff800
     890:	400ec000 	.word	0x400ec000
     894:	80000013 	.word	0x80000013
     898:	38003840 	.word	0x38003840
     89c:	20009000 	.word	0x20009000
     8a0:	00000585 	.word	0x00000585
     8a4:	e000e400 	.word	0xe000e400
     8a8:	400e8000 	.word	0x400e8000

000008ac <acqModifyFrequency(unsigned long)>:
  {
     8ac:	b510      	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     8ae:	4c08      	ldr	r4, [pc, #32]	; (8d0 <acqModifyFrequency(unsigned long)+0x24>)
     8b0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     8b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
     8b8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     8bc:	f7ff fedc 	bl	678 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     8c0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     8c4:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
     8c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     8cc:	bd10      	pop	{r4, pc}
     8ce:	bf00      	nop
     8d0:	40384000 	.word	0x40384000

000008d4 <_GLOBAL__sub_I_procCount>:
		begin();
     8d4:	4805      	ldr	r0, [pc, #20]	; (8ec <_GLOBAL__sub_I_procCount+0x18>)
     8d6:	2100      	movs	r1, #0
  }
}
     8d8:	b508      	push	{r3, lr}
     8da:	f006 ff63 	bl	77a4 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     8de:	4a04      	ldr	r2, [pc, #16]	; (8f0 <_GLOBAL__sub_I_procCount+0x1c>)
     8e0:	4904      	ldr	r1, [pc, #16]	; (8f4 <_GLOBAL__sub_I_procCount+0x20>)
     8e2:	4802      	ldr	r0, [pc, #8]	; (8ec <_GLOBAL__sub_I_procCount+0x18>)
}
     8e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     8e8:	f009 becc 	b.w	a684 <__aeabi_atexit>
     8ec:	200209bc 	.word	0x200209bc
     8f0:	20008898 	.word	0x20008898
     8f4:	0000066d 	.word	0x0000066d

000008f8 <AudioIF::update()>:
    }
    //
    uint32_t usbCount=0;
    static int32_t src_buffer[NBUF_I2S];
    void AudioIF::update(void)
    {	
     8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      if ( head==tail ) return 0;                 // queue is empty
     8fc:	4b29      	ldr	r3, [pc, #164]	; (9a4 <AudioIF::update()+0xac>)
     8fe:	4d2a      	ldr	r5, [pc, #168]	; (9a8 <AudioIF::update()+0xb0>)
     900:	681b      	ldr	r3, [r3, #0]
     902:	682c      	ldr	r4, [r5, #0]
     904:	429c      	cmp	r4, r3
     906:	d019      	beq.n	93c <AudioIF::update()+0x44>
      for(int ii=0;ii<NBUF_I2S;ii++) data[ii]=audio_buffer[head][ii];
     908:	4928      	ldr	r1, [pc, #160]	; (9ac <AudioIF::update()+0xb4>)
     90a:	4606      	mov	r6, r0
     90c:	f44f 6280 	mov.w	r2, #1024	; 0x400
     910:	4827      	ldr	r0, [pc, #156]	; (9b0 <AudioIF::update()+0xb8>)
     912:	eb01 2184 	add.w	r1, r1, r4, lsl #10
      head = (head+1)%MAUDIO;
     916:	3401      	adds	r4, #1
      for(int ii=0;ii<NBUF_I2S;ii++) data[ii]=audio_buffer[head][ii];
     918:	f007 fcd8 	bl	82cc <memcpy>
      head = (head+1)%MAUDIO;
     91c:	4a25      	ldr	r2, [pc, #148]	; (9b4 <AudioIF::update()+0xbc>)
     91e:	17e3      	asrs	r3, r4, #31
     920:	fb82 1204 	smull	r1, r2, r2, r4
     924:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
      audio_block_t *left, *right;
      //
      if(!getAudio(src_buffer)) return;
      if(fsamp != 44100) return;
     928:	69b2      	ldr	r2, [r6, #24]
      head = (head+1)%MAUDIO;
     92a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     92e:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
      if(fsamp != 44100) return;
     932:	f64a 4344 	movw	r3, #44100	; 0xac44
     936:	429a      	cmp	r2, r3
      head = (head+1)%MAUDIO;
     938:	602c      	str	r4, [r5, #0]
      if(fsamp != 44100) return;
     93a:	d001      	beq.n	940 <AudioIF::update()+0x48>
      
      transmit(left,0);
      transmit(right,1);
      release(left);
      release(right);
    }
     93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      left  = allocate(); if (!left) return;
     940:	f006 fd60 	bl	7404 <AudioStream::allocate()>
     944:	4607      	mov	r7, r0
     946:	2800      	cmp	r0, #0
     948:	d0f8      	beq.n	93c <AudioIF::update()+0x44>
      right = allocate(); if (!right) {release(left); return;}
     94a:	f006 fd5b 	bl	7404 <AudioStream::allocate()>
     94e:	4680      	mov	r8, r0
     950:	b318      	cbz	r0, 99a <AudioIF::update()+0xa2>
      usbCount++;
     952:	4a19      	ldr	r2, [pc, #100]	; (9b8 <AudioIF::update()+0xc0>)
     954:	1cb9      	adds	r1, r7, #2
     956:	6813      	ldr	r3, [r2, #0]
     958:	3301      	adds	r3, #1
     95a:	6013      	str	r3, [r2, #0]
      for(int ii=0,jj=0; ii<NBUF_ACQ; ii++) 
     95c:	1c82      	adds	r2, r0, #2
     95e:	4b14      	ldr	r3, [pc, #80]	; (9b0 <AudioIF::update()+0xb8>)
     960:	f503 6c80 	add.w	ip, r3, #1024	; 0x400
        dst2[ii]=(int16_t)src[jj++];  
     964:	e9d3 5400 	ldrd	r5, r4, [r3]
      for(int ii=0,jj=0; ii<NBUF_ACQ; ii++) 
     968:	3308      	adds	r3, #8
      { dst1[ii]=(int16_t)src[jj++];   
     96a:	f821 5f02 	strh.w	r5, [r1, #2]!
      for(int ii=0,jj=0; ii<NBUF_ACQ; ii++) 
     96e:	459c      	cmp	ip, r3
        dst2[ii]=(int16_t)src[jj++];  
     970:	f822 4f02 	strh.w	r4, [r2, #2]!
      for(int ii=0,jj=0; ii<NBUF_ACQ; ii++) 
     974:	d1f6      	bne.n	964 <AudioIF::update()+0x6c>
      transmit(left,0);
     976:	4639      	mov	r1, r7
     978:	4630      	mov	r0, r6
     97a:	2200      	movs	r2, #0
     97c:	f006 fdc0 	bl	7500 <AudioStream::transmit(audio_block_struct*, unsigned char)>
      transmit(right,1);
     980:	4641      	mov	r1, r8
     982:	4630      	mov	r0, r6
     984:	2201      	movs	r2, #1
     986:	f006 fdbb 	bl	7500 <AudioStream::transmit(audio_block_struct*, unsigned char)>
      release(left);
     98a:	4638      	mov	r0, r7
     98c:	f006 fd90 	bl	74b0 <AudioStream::release(audio_block_struct*)>
      release(right);
     990:	4640      	mov	r0, r8
    }
     992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      release(right);
     996:	f006 bd8b 	b.w	74b0 <AudioStream::release(audio_block_struct*)>
      right = allocate(); if (!right) {release(left); return;}
     99a:	4638      	mov	r0, r7
    }
     99c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      right = allocate(); if (!right) {release(left); return;}
     9a0:	f006 bd86 	b.w	74b0 <AudioStream::release(audio_block_struct*)>
     9a4:	20020bc8 	.word	0x20020bc8
     9a8:	20020bc4 	.word	0x20020bc4
     9ac:	2001e1bc 	.word	0x2001e1bc
     9b0:	2000ddb8 	.word	0x2000ddb8
     9b4:	66666667 	.word	0x66666667
     9b8:	200225a4 	.word	0x200225a4

000009bc <putAudio(long*)>:
    {
     9bc:	b470      	push	{r4, r5, r6}
      if ( (tail+1)%MAUDIO == head ) return 0;    // queue is full
     9be:	4d12      	ldr	r5, [pc, #72]	; (a08 <putAudio(long*)+0x4c>)
     9c0:	4b12      	ldr	r3, [pc, #72]	; (a0c <putAudio(long*)+0x50>)
     9c2:	6829      	ldr	r1, [r5, #0]
     9c4:	681e      	ldr	r6, [r3, #0]
     9c6:	4a12      	ldr	r2, [pc, #72]	; (a10 <putAudio(long*)+0x54>)
     9c8:	1c4b      	adds	r3, r1, #1
     9ca:	fb82 4203 	smull	r4, r2, r2, r3
     9ce:	17dc      	asrs	r4, r3, #31
     9d0:	ebc4 04a2 	rsb	r4, r4, r2, asr #2
     9d4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
     9d8:	eba3 0444 	sub.w	r4, r3, r4, lsl #1
     9dc:	42b4      	cmp	r4, r6
     9de:	d00f      	beq.n	a00 <putAudio(long*)+0x44>
     9e0:	4a0c      	ldr	r2, [pc, #48]	; (a14 <putAudio(long*)+0x58>)
     9e2:	1f03      	subs	r3, r0, #4
     9e4:	f500 707f 	add.w	r0, r0, #1020	; 0x3fc
     9e8:	eb02 2281 	add.w	r2, r2, r1, lsl #10
      for(int ii=0;ii<NBUF_I2S;ii++) audio_buffer[tail][ii]=data[ii];
     9ec:	f853 1f04 	ldr.w	r1, [r3, #4]!
     9f0:	4283      	cmp	r3, r0
     9f2:	f842 1f04 	str.w	r1, [r2, #4]!
     9f6:	d1f9      	bne.n	9ec <putAudio(long*)+0x30>
      return 1;   // signal success.
     9f8:	2001      	movs	r0, #1
      tail = (tail+1)%MAUDIO;
     9fa:	602c      	str	r4, [r5, #0]
    }
     9fc:	bc70      	pop	{r4, r5, r6}
     9fe:	4770      	bx	lr
      if ( (tail+1)%MAUDIO == head ) return 0;    // queue is full
     a00:	2000      	movs	r0, #0
    }
     a02:	bc70      	pop	{r4, r5, r6}
     a04:	4770      	bx	lr
     a06:	bf00      	nop
     a08:	20020bc8 	.word	0x20020bc8
     a0c:	20020bc4 	.word	0x20020bc4
     a10:	66666667 	.word	0x66666667
     a14:	2001e1b8 	.word	0x2001e1b8

00000a18 <AudioTrigger::m_isr()>:
      t1.priority(prio*16);
    }

    void AudioTrigger::m_isr(void)
    {
      if (update_responsibility) AudioStream::update_all();
     a18:	4b04      	ldr	r3, [pc, #16]	; (a2c <AudioTrigger::m_isr()+0x14>)
     a1a:	781b      	ldrb	r3, [r3, #0]
     a1c:	b123      	cbz	r3, a28 <AudioTrigger::m_isr()+0x10>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
     a1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     a22:	2240      	movs	r2, #64	; 0x40
     a24:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    }
     a28:	4770      	bx	lr
     a2a:	bf00      	nop
     a2c:	200225ec 	.word	0x200225ec

00000a30 <IntervalTimer::~IntervalTimer()>:
	~IntervalTimer() {
     a30:	b510      	push	{r4, lr}
     a32:	4604      	mov	r4, r0
		end();
     a34:	f007 f830 	bl	7a98 <IntervalTimer::end()>
	}
     a38:	4620      	mov	r0, r4
     a3a:	bd10      	pop	{r4, pc}

00000a3c <AudioTrigger::init()>:
    {	// check with AudioStream if we are responsable for updates
     a3c:	b538      	push	{r3, r4, r5, lr}
		return beginCycles(funct, cycles);
     a3e:	4c13      	ldr	r4, [pc, #76]	; (a8c <AudioTrigger::init()+0x50>)
     a40:	4605      	mov	r5, r0
      update_responsibility = update_setup();  
     a42:	f006 fe8d 	bl	7760 <AudioStream::update_setup()>
     a46:	4b12      	ldr	r3, [pc, #72]	; (a90 <AudioTrigger::init()+0x54>)
     a48:	4a12      	ldr	r2, [pc, #72]	; (a94 <AudioTrigger::init()+0x58>)
     a4a:	7018      	strb	r0, [r3, #0]
     a4c:	4620      	mov	r0, r4
     a4e:	4912      	ldr	r1, [pc, #72]	; (a98 <AudioTrigger::init()+0x5c>)
     a50:	f006 ffbe 	bl	79d0 <IntervalTimer::beginCycles(void (*)(), unsigned long)>
      t1.priority(prio*16);
     a54:	69ab      	ldr	r3, [r5, #24]
	// the highest and 255 the lowest. Most other interrupts default to 128. As
	// a general guideline, interrupt routines that run longer should be given
	// lower priority (higher numerical values).
	void priority(uint8_t n) {
		nvic_priority = n;
		if (channel) {
     a56:	6820      	ldr	r0, [r4, #0]
     a58:	011b      	lsls	r3, r3, #4
     a5a:	b2db      	uxtb	r3, r3
		nvic_priority = n;
     a5c:	7123      	strb	r3, [r4, #4]
		if (channel) {
     a5e:	b1a0      	cbz	r0, a8a <AudioTrigger::init()+0x4e>
			int index = channel - IMXRT_PIT_CHANNELS;
     a60:	490e      	ldr	r1, [pc, #56]	; (a9c <AudioTrigger::init()+0x60>)
			nvic_priorites[index] = nvic_priority;
     a62:	4a0f      	ldr	r2, [pc, #60]	; (aa0 <AudioTrigger::init()+0x64>)
			int index = channel - IMXRT_PIT_CHANNELS;
     a64:	4401      	add	r1, r0
			uint8_t top_priority = nvic_priorites[0];
			for (uint8_t i=1; i < (sizeof(nvic_priorites)/sizeof(nvic_priorites[0])); i++) {
				if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
			}
			NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
     a66:	4c0f      	ldr	r4, [pc, #60]	; (aa4 <AudioTrigger::init()+0x68>)
			int index = channel - IMXRT_PIT_CHANNELS;
     a68:	1109      	asrs	r1, r1, #4
			nvic_priorites[index] = nvic_priority;
     a6a:	5453      	strb	r3, [r2, r1]
				if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
     a6c:	7813      	ldrb	r3, [r2, #0]
     a6e:	7850      	ldrb	r0, [r2, #1]
     a70:	7891      	ldrb	r1, [r2, #2]
     a72:	4283      	cmp	r3, r0
     a74:	78d2      	ldrb	r2, [r2, #3]
     a76:	bf28      	it	cs
     a78:	4603      	movcs	r3, r0
     a7a:	428b      	cmp	r3, r1
     a7c:	bf28      	it	cs
     a7e:	460b      	movcs	r3, r1
     a80:	4293      	cmp	r3, r2
     a82:	bf28      	it	cs
     a84:	4613      	movcs	r3, r2
			NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
     a86:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
    }
     a8a:	bd38      	pop	{r3, r4, r5, pc}
     a8c:	20008e40 	.word	0x20008e40
     a90:	200225ec 	.word	0x200225ec
     a94:	0001100f 	.word	0x0001100f
     a98:	00000a19 	.word	0x00000a19
     a9c:	bff7bf00 	.word	0xbff7bf00
     aa0:	20008888 	.word	0x20008888
     aa4:	e000e400 	.word	0xe000e400

00000aa8 <_GLOBAL__sub_I__ZN12AudioTrigger21update_responsibilityE>:
    IntervalTimer t1;
     aa8:	4a02      	ldr	r2, [pc, #8]	; (ab4 <_GLOBAL__sub_I__ZN12AudioTrigger21update_responsibilityE+0xc>)
     aaa:	4903      	ldr	r1, [pc, #12]	; (ab8 <_GLOBAL__sub_I__ZN12AudioTrigger21update_responsibilityE+0x10>)
     aac:	4803      	ldr	r0, [pc, #12]	; (abc <_GLOBAL__sub_I__ZN12AudioTrigger21update_responsibilityE+0x14>)
     aae:	f009 bde9 	b.w	a684 <__aeabi_atexit>
     ab2:	bf00      	nop
     ab4:	20008898 	.word	0x20008898
     ab8:	00000a31 	.word	0x00000a31
     abc:	20008e40 	.word	0x20008e40

00000ac0 <compress(void*)>:
int32_t tempData0[NCH];

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
     ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ac4:	b083      	sub	sp, #12
     ac6:	4604      	mov	r4, r0
  int ret=1;
  uint32_t to = rtc_get();
     ac8:	f007 fcd0 	bl	846c <rtc_get>
     acc:	4682      	mov	sl, r0
  uint32_t t1 = micros();
     ace:	f007 fb69 	bl	81a4 <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy reference (first sample of all channels)
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     ad2:	49a1      	ldr	r1, [pc, #644]	; (d58 <compress(void*)+0x298>)
     ad4:	6822      	ldr	r2, [r4, #0]
     ad6:	4623      	mov	r3, r4
     ad8:	680d      	ldr	r5, [r1, #0]
     ada:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     ade:	499f      	ldr	r1, [pc, #636]	; (d5c <compress(void*)+0x29c>)
  uint32_t t1 = micros();
     ae0:	4681      	mov	r9, r0
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     ae2:	602a      	str	r2, [r5, #0]
     ae4:	462c      	mov	r4, r5
     ae6:	600a      	str	r2, [r1, #0]
  
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);
     ae8:	4629      	mov	r1, r5
     aea:	4618      	mov	r0, r3
     aec:	3304      	adds	r3, #4
     aee:	e9d0 0200 	ldrd	r0, r2, [r0]
     af2:	42b3      	cmp	r3, r6
     af4:	eba2 0200 	sub.w	r2, r2, r0
     af8:	f844 2f04 	str.w	r2, [r4, #4]!
     afc:	d1f5      	bne.n	aea <compress(void*)+0x2a>
     afe:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc

  // find maximum in filtered data
  int32_t mx = 0;
     b02:	2200      	movs	r2, #0
  for (int ii = NCH; ii < NSAMP; ii++)
  {
    int32_t dd =  tempDatai[ii];
     b04:	f851 3f04 	ldr.w	r3, [r1, #4]!
    if(dd<0)  dd = -dd;
    if(dd>mx) mx = dd;
     b08:	2b00      	cmp	r3, #0
     b0a:	bfb8      	it	lt
     b0c:	425b      	neglt	r3, r3
     b0e:	429a      	cmp	r2, r3
     b10:	bfb8      	it	lt
     b12:	461a      	movlt	r2, r3
  for (int ii = NCH; ii < NSAMP; ii++)
     b14:	4281      	cmp	r1, r0
     b16:	d1f5      	bne.n	b04 <compress(void*)+0x44>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     b18:	2702      	movs	r7, #2
     b1a:	2101      	movs	r1, #1
     b1c:	e003      	b.n	b26 <compress(void*)+0x66>
     b1e:	3701      	adds	r7, #1
     b20:	2f18      	cmp	r7, #24
     b22:	f000 8110 	beq.w	d46 <compress(void*)+0x286>
     b26:	1e7c      	subs	r4, r7, #1
     b28:	fa01 f304 	lsl.w	r3, r1, r4
     b2c:	4293      	cmp	r3, r2
     b2e:	ddf6      	ble.n	b1e <compress(void*)+0x5e>
  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }

  // pack all data
  int ncmp = (NSAMP*nb) / MBIT;
     b30:	ea4f 0887 	mov.w	r8, r7, lsl #2
  uint32_t msk = (1 << nb) - 1;
     b34:	40b9      	lsls	r1, r7
  int ndat = NH+NCH + ncmp;
     b36:	f108 0307 	add.w	r3, r8, #7
  uint32_t msk = (1 << nb) - 1;
     b3a:	1e48      	subs	r0, r1, #1
  int ndat = NH+NCH + ncmp;
     b3c:	9301      	str	r3, [sp, #4]
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
     b3e:	f108 0301 	add.w	r3, r8, #1
  ndat= ((ndat>>1) + 1)<<1;
     b42:	f108 0808 	add.w	r8, r8, #8
  proc_stat[nb-1]++;
     b46:	4986      	ldr	r1, [pc, #536]	; (d60 <compress(void*)+0x2a0>)
  if((uint32_t)nb>max_stat) max_stat=nb;
     b48:	4d86      	ldr	r5, [pc, #536]	; (d64 <compress(void*)+0x2a4>)
  proc_stat[nb-1]++;
     b4a:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
     b4e:	3201      	adds	r2, #1
     b50:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
     b54:	682a      	ldr	r2, [r5, #0]
     b56:	4c84      	ldr	r4, [pc, #528]	; (d68 <compress(void*)+0x2a8>)
     b58:	42ba      	cmp	r2, r7
     b5a:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     b5e:	46a3      	mov	fp, r4
     b60:	4622      	mov	r2, r4
     b62:	bf38      	it	cc
     b64:	602f      	strcc	r7, [r5, #0]
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }
     b66:	f852 1f04 	ldr.w	r1, [r2, #4]!
     b6a:	4001      	ands	r1, r0
     b6c:	4296      	cmp	r6, r2
     b6e:	6011      	str	r1, [r2, #0]
     b70:	d1f9      	bne.n	b66 <compress(void*)+0xa6>
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     b72:	4d7e      	ldr	r5, [pc, #504]	; (d6c <compress(void*)+0x2ac>)
     b74:	f44f 7200 	mov.w	r2, #512	; 0x200
     b78:	2100      	movs	r1, #0
     b7a:	9300      	str	r3, [sp, #0]
     b7c:	4628      	mov	r0, r5
     b7e:	f00b fe3d 	bl	c7fc <memset>
  *iptr++ = nb | shift<<16;
     b82:	4a7b      	ldr	r2, [pc, #492]	; (d70 <compress(void*)+0x2b0>)
  *iptr++ = NCH+ncmp; // number of data after header
     b84:	9b00      	ldr	r3, [sp, #0]
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     b86:	2100      	movs	r1, #0
  *iptr++ = nb | shift<<16;
     b88:	f9b2 2000 	ldrsh.w	r2, [r2]

  // pack data
  // 
  int nx = MBIT;
     b8c:	f04f 0c20 	mov.w	ip, #32
  outData[kk++] = tempData[0]; tempData[0] = 0;
     b90:	2007      	movs	r0, #7
  *iptr++ = NCH+ncmp; // number of data after header
     b92:	616b      	str	r3, [r5, #20]
  *iptr++ = nb | shift<<16;
     b94:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
     b98:	606a      	str	r2, [r5, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     b9a:	f8db 2000 	ldr.w	r2, [fp]
     b9e:	f8cb 1000 	str.w	r1, [fp]
     ba2:	61aa      	str	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
     ba4:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     ba8:	602a      	str	r2, [r5, #0]
  *iptr++ = NCH;
     baa:	2201      	movs	r2, #1
  *iptr++ = t1;
     bac:	e9c5 a902 	strd	sl, r9, [r5, #8]
  *iptr++ = NCH;
     bb0:	612a      	str	r2, [r5, #16]
  for (int ii = 0; ii < NSAMP; ii ++)
     bb2:	e00a      	b.n	bca <compress(void*)+0x10a>
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
     bb4:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
     bb8:	4694      	mov	ip, r2
     bba:	ea41 010e 	orr.w	r1, r1, lr
     bbe:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  for (int ii = 0; ii < NSAMP; ii ++)
     bc2:	42a6      	cmp	r6, r4
     bc4:	d018      	beq.n	bf8 <compress(void*)+0x138>
      {   outData[kk] |= (tempData[ii] << nx);
     bc6:	f854 1f04 	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
     bca:	ebac 0207 	sub.w	r2, ip, r7
      if(nx > 0)
     bce:	2a00      	cmp	r2, #0
      {   outData[kk] |= (tempData[ii] << nx);
     bd0:	fa01 fe02 	lsl.w	lr, r1, r2
      if(nx > 0)
     bd4:	dcee      	bgt.n	bb4 <compress(void*)+0xf4>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     bd6:	eba7 0e0c 	sub.w	lr, r7, ip
     bda:	f100 0901 	add.w	r9, r0, #1
          nx += MBIT;
     bde:	f102 0c20 	add.w	ip, r2, #32
      {   outData[kk++] |= tempData[ii];
     be2:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
      else if(nx==0) 
     be6:	d12f      	bne.n	c48 <compress(void*)+0x188>
      {   outData[kk++] |= tempData[ii];
     be8:	430a      	orrs	r2, r1
  for (int ii = 0; ii < NSAMP; ii ++)
     bea:	42a6      	cmp	r6, r4
          nx=MBIT;
     bec:	f04f 0c20 	mov.w	ip, #32
      {   outData[kk++] |= tempData[ii];
     bf0:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     bf4:	4648      	mov	r0, r9
  for (int ii = 0; ii < NSAMP; ii ++)
     bf6:	d1e6      	bne.n	bc6 <compress(void*)+0x106>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBLOCK)
     bf8:	4e5e      	ldr	r6, [pc, #376]	; (d74 <compress(void*)+0x2b4>)
     bfa:	6834      	ldr	r4, [r6, #0]
     bfc:	eb04 0208 	add.w	r2, r4, r8
     c00:	2a80      	cmp	r2, #128	; 0x80
     c02:	dc2d      	bgt.n	c60 <compress(void*)+0x1a0>
     c04:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     c08:	4a5b      	ldr	r2, [pc, #364]	; (d78 <compress(void*)+0x2b8>)
     c0a:	4858      	ldr	r0, [pc, #352]	; (d6c <compress(void*)+0x2ac>)
     c0c:	f04f 31a5 	mov.w	r1, #2779096485	; 0xa5a5a5a5
     c10:	4423      	add	r3, r4
     c12:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     c16:	2300      	movs	r3, #0
     c18:	e001      	b.n	c1e <compress(void*)+0x15e>
     c1a:	f850 1f04 	ldr.w	r1, [r0, #4]!
     c1e:	3301      	adds	r3, #1
     c20:	f842 1f04 	str.w	r1, [r2, #4]!
     c24:	4543      	cmp	r3, r8
     c26:	dbf8      	blt.n	c1a <compress(void*)+0x15a>
     c28:	f1b8 0f00 	cmp.w	r8, #0
     c2c:	f108 33ff 	add.w	r3, r8, #4294967295
     c30:	f104 0401 	add.w	r4, r4, #1
  int ret=1;
     c34:	f04f 0701 	mov.w	r7, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     c38:	bfd8      	it	le
     c3a:	2300      	movle	r3, #0
     c3c:	4423      	add	r3, r4
     c3e:	6033      	str	r3, [r6, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     c40:	4638      	mov	r0, r7
     c42:	b003      	add	sp, #12
     c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     c48:	fa21 fe0e 	lsr.w	lr, r1, lr
          outData[kk] = (tempData[ii] << nx);
     c4c:	fa01 f10c 	lsl.w	r1, r1, ip
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     c50:	ea4e 0202 	orr.w	r2, lr, r2
     c54:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     c58:	4648      	mov	r0, r9
          outData[kk] = (tempData[ii] << nx);
     c5a:	f845 1029 	str.w	r1, [r5, r9, lsl #2]
     c5e:	e7b0      	b.n	bc2 <compress(void*)+0x102>
  else if ((nout + NH) > NBLOCK) //avoid partial header (special case)
     c60:	2c7a      	cmp	r4, #122	; 0x7a
     c62:	dd22      	ble.n	caa <compress(void*)+0x1ea>
      while(nout<NBLOCK) dout[nout++] = 0; // fill rest of block with zero
     c64:	2c7f      	cmp	r4, #127	; 0x7f
     c66:	dc0a      	bgt.n	c7e <compress(void*)+0x1be>
     c68:	f1c4 0280 	rsb	r2, r4, #128	; 0x80
     c6c:	4842      	ldr	r0, [pc, #264]	; (d78 <compress(void*)+0x2b8>)
     c6e:	2100      	movs	r1, #0
     c70:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     c74:	0092      	lsls	r2, r2, #2
     c76:	f00b fdc1 	bl	c7fc <memset>
     c7a:	2380      	movs	r3, #128	; 0x80
     c7c:	6033      	str	r3, [r6, #0]
      if(!pushData(dout)) ret = 0;
     c7e:	483e      	ldr	r0, [pc, #248]	; (d78 <compress(void*)+0x2b8>)
     c80:	f000 fc06 	bl	1490 <pushData(unsigned long*)>
     c84:	1e07      	subs	r7, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     c86:	ea4f 0288 	mov.w	r2, r8, lsl #2
     c8a:	4938      	ldr	r1, [pc, #224]	; (d6c <compress(void*)+0x2ac>)
      if(!pushData(dout)) ret = 0;
     c8c:	bf18      	it	ne
     c8e:	2701      	movne	r7, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     c90:	f1b8 0f00 	cmp.w	r8, #0
     c94:	4838      	ldr	r0, [pc, #224]	; (d78 <compress(void*)+0x2b8>)
     c96:	bfd8      	it	le
     c98:	2204      	movle	r2, #4
     c9a:	f007 fb17 	bl	82cc <memcpy>
}
     c9e:	4638      	mov	r0, r7
     ca0:	f8c6 8000 	str.w	r8, [r6]
     ca4:	b003      	add	sp, #12
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     caa:	f1c4 027a 	rsb	r2, r4, #122	; 0x7a
     cae:	4832      	ldr	r0, [pc, #200]	; (d78 <compress(void*)+0x2b8>)
     cb0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     cb4:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     cb8:	616b      	str	r3, [r5, #20]
      while (nout < NBLOCK) dout[nout++] = outData[ii++];
     cba:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     cbe:	4d2b      	ldr	r5, [pc, #172]	; (d6c <compress(void*)+0x2ac>)
     cc0:	4423      	add	r3, r4
     cc2:	4629      	mov	r1, r5
     cc4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     cc8:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
     ccc:	e001      	b.n	cd2 <compress(void*)+0x212>
     cce:	f851 2f04 	ldr.w	r2, [r1, #4]!
     cd2:	f843 2f04 	str.w	r2, [r3, #4]!
     cd6:	4298      	cmp	r0, r3
     cd8:	d1f9      	bne.n	cce <compress(void*)+0x20e>
     cda:	2380      	movs	r3, #128	; 0x80
      if(!pushData(dout)) ret = 0;
     cdc:	4826      	ldr	r0, [pc, #152]	; (d78 <compress(void*)+0x2b8>)
     cde:	f1c4 0980 	rsb	r9, r4, #128	; 0x80
     ce2:	6033      	str	r3, [r6, #0]
     ce4:	f000 fbd4 	bl	1490 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     ce8:	6969      	ldr	r1, [r5, #20]
      if(!pushData(dout)) ret = 0;
     cea:	1e07      	subs	r7, r0, #0
      nr=ndat0-ii; // for header
     cec:	9b01      	ldr	r3, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     cee:	4a23      	ldr	r2, [pc, #140]	; (d7c <compress(void*)+0x2bc>)
      if(!pushData(dout)) ret = 0;
     cf0:	bf18      	it	ne
     cf2:	2701      	movne	r7, #1
      nr=ndat0-ii; // for header
     cf4:	eba3 0309 	sub.w	r3, r3, r9
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     cf8:	f8df e070 	ldr.w	lr, [pc, #112]	; d6c <compress(void*)+0x2ac>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     cfc:	400a      	ands	r2, r1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     cfe:	f8df c078 	ldr.w	ip, [pc, #120]	; d78 <compress(void*)+0x2b8>
      while (ii < ndat) dout[nout++] = outData[ii++];
     d02:	45c1      	cmp	r9, r8
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     d04:	ea42 0203 	orr.w	r2, r2, r3
     d08:	f04f 0306 	mov.w	r3, #6
     d0c:	616a      	str	r2, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     d0e:	6033      	str	r3, [r6, #0]
     d10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     d14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     d18:	e89e 0003 	ldmia.w	lr, {r0, r1}
     d1c:	e88c 0003 	stmia.w	ip, {r0, r1}
      while (ii < ndat) dout[nout++] = outData[ii++];
     d20:	da8e      	bge.n	c40 <compress(void*)+0x180>
     d22:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
     d26:	eb05 0189 	add.w	r1, r5, r9, lsl #2
     d2a:	f10c 0008 	add.w	r0, ip, #8
     d2e:	4442      	add	r2, r8
     d30:	0092      	lsls	r2, r2, #2
     d32:	f007 facb 	bl	82cc <memcpy>
     d36:	f1a4 037a 	sub.w	r3, r4, #122	; 0x7a
}
     d3a:	4638      	mov	r0, r7
      while (ii < ndat) dout[nout++] = outData[ii++];
     d3c:	4443      	add	r3, r8
     d3e:	6033      	str	r3, [r6, #0]
}
     d40:	b003      	add	sp, #12
     d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d46:	2267      	movs	r2, #103	; 0x67
     d48:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
     d4c:	f04f 0868 	mov.w	r8, #104	; 0x68
     d50:	2361      	movs	r3, #97	; 0x61
     d52:	2417      	movs	r4, #23
     d54:	9201      	str	r2, [sp, #4]
     d56:	e6f6      	b.n	b46 <compress(void*)+0x86>
     d58:	20008e50 	.word	0x20008e50
     d5c:	20022564 	.word	0x20022564
     d60:	20021fb0 	.word	0x20021fb0
     d64:	20021f64 	.word	0x20021f64
     d68:	20020e94 	.word	0x20020e94
     d6c:	20020c44 	.word	0x20020c44
     d70:	20008e6c 	.word	0x20008e6c
     d74:	20021188 	.word	0x20021188
     d78:	200209c4 	.word	0x200209c4
     d7c:	ffff0000 	.word	0xffff0000

00000d80 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     d80:	2000      	movs	r0, #0
     d82:	4770      	bx	lr

00000d84 <SdFs::~SdFs()>:
//------------------------------------------------------------------------------
/**
 * \class SdFs
 * \brief SD file system class for FAT16, FAT32, and exFAT volumes.
 */
class SdFs : public SdBase<FsVolume, FsFormatter> {
     d84:	4770      	bx	lr
     d86:	bf00      	nop

00000d88 <FsFile::~FsFile()>:
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     d88:	4b04      	ldr	r3, [pc, #16]	; (d9c <FsFile::~FsFile()+0x14>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     d8a:	b510      	push	{r4, lr}
     d8c:	4604      	mov	r4, r0
     d8e:	f840 3b10 	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
     d92:	f003 fdb1 	bl	48f8 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     d96:	4620      	mov	r0, r4
     d98:	bd10      	pop	{r4, pc}
     d9a:	bf00      	nop
     d9c:	20000984 	.word	0x20000984

00000da0 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
     da0:	6c83      	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     da2:	b500      	push	{lr}
     da4:	b083      	sub	sp, #12
     da6:	b163      	cbz	r3, dc2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     da8:	2201      	movs	r2, #1
     daa:	f10d 0107 	add.w	r1, sp, #7
     dae:	4618      	mov	r0, r3
     db0:	f002 fc40 	bl	3634 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     db4:	2801      	cmp	r0, #1
     db6:	d10c      	bne.n	dd2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     db8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     dbc:	b003      	add	sp, #12
     dbe:	f85d fb04 	ldr.w	pc, [sp], #4
     dc2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
     dc4:	b128      	cbz	r0, dd2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     dc6:	2201      	movs	r2, #1
     dc8:	f10d 0107 	add.w	r1, sp, #7
     dcc:	f000 ff52 	bl	1c74 <ExFatFile::read(void*, unsigned int)>
     dd0:	e7f0      	b.n	db4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     dd2:	f04f 30ff 	mov.w	r0, #4294967295
     dd6:	e7f1      	b.n	dbc <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000dd8 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
     dd8:	6c83      	ldr	r3, [r0, #72]	; 0x48
     dda:	b113      	cbz	r3, de2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     ddc:	4618      	mov	r0, r3
     dde:	f002 bcfd 	b.w	37dc <FatFile::peek()>
     de2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
     de4:	b108      	cbz	r0, dea <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     de6:	f001 b815 	b.w	1e14 <ExFatFile::peek()>
  }
     dea:	f04f 30ff 	mov.w	r0, #4294967295
     dee:	4770      	bx	lr

00000df0 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     df0:	6c83      	ldr	r3, [r0, #72]	; 0x48
     df2:	b153      	cbz	r3, e0a <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     df4:	7818      	ldrb	r0, [r3, #0]
     df6:	f010 0008 	ands.w	r0, r0, #8
     dfa:	d00d      	beq.n	e18 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     dfc:	69d8      	ldr	r0, [r3, #28]
     dfe:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     e00:	1ac0      	subs	r0, r0, r3
     e02:	bf48      	it	mi
     e04:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     e08:	4770      	bx	lr
     e0a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
     e0c:	b1a3      	cbz	r3, e38 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     e0e:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     e12:	f010 0008 	ands.w	r0, r0, #8
     e16:	d100      	bne.n	e1a <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
     e18:	4770      	bx	lr
     e1a:	6918      	ldr	r0, [r3, #16]
     e1c:	6819      	ldr	r1, [r3, #0]
     e1e:	695a      	ldr	r2, [r3, #20]
     e20:	1a40      	subs	r0, r0, r1
     e22:	685b      	ldr	r3, [r3, #4]
     e24:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     e28:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     e2c:	f173 0300 	sbcs.w	r3, r3, #0
     e30:	d3f2      	bcc.n	e18 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     e32:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     e36:	4770      	bx	lr
     e38:	4618      	mov	r0, r3
    return BaseFile::available();
     e3a:	e7ed      	b.n	e18 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000e3c <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
     e3c:	6c83      	ldr	r3, [r0, #72]	; 0x48
     e3e:	b113      	cbz	r3, e46 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     e40:	4618      	mov	r0, r3
     e42:	f002 bdcb 	b.w	39dc <FatFile::sync()>
     e46:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
     e48:	b108      	cbz	r0, e4e <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     e4a:	f001 bba5 	b.w	2598 <ExFatFile::sync()>
  }
     e4e:	4770      	bx	lr

00000e50 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     e50:	6c83      	ldr	r3, [r0, #72]	; 0x48
     e52:	b113      	cbz	r3, e5a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     e54:	4618      	mov	r0, r3
     e56:	f002 bdc7 	b.w	39e8 <FatFile::write(void const*, unsigned int)>
     e5a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     e5c:	b108      	cbz	r0, e62 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     e5e:	f001 bd31 	b.w	28c4 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     e62:	4770      	bx	lr

00000e64 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     e64:	b500      	push	{lr}
    return m_fFile ? m_fFile->write(buf, count) :
     e66:	6c83      	ldr	r3, [r0, #72]	; 0x48
     e68:	b083      	sub	sp, #12
     e6a:	f88d 1007 	strb.w	r1, [sp, #7]
     e6e:	b143      	cbz	r3, e82 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     e70:	2201      	movs	r2, #1
     e72:	f10d 0107 	add.w	r1, sp, #7
     e76:	4618      	mov	r0, r3
     e78:	f002 fdb6 	bl	39e8 <FatFile::write(void const*, unsigned int)>
  }
     e7c:	b003      	add	sp, #12
     e7e:	f85d fb04 	ldr.w	pc, [sp], #4
     e82:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     e84:	2800      	cmp	r0, #0
     e86:	d0f9      	beq.n	e7c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     e88:	2201      	movs	r2, #1
     e8a:	f10d 0107 	add.w	r1, sp, #7
     e8e:	f001 fd19 	bl	28c4 <ExFatFile::write(void const*, unsigned int)>
     e92:	b003      	add	sp, #12
     e94:	f85d fb04 	ldr.w	pc, [sp], #4

00000e98 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     e98:	b538      	push	{r3, r4, r5, lr}
     e9a:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     e9c:	b149      	cbz	r1, eb2 <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
     e9e:	4608      	mov	r0, r1
     ea0:	460d      	mov	r5, r1
     ea2:	f00b ffed 	bl	ce80 <strlen>
     ea6:	6823      	ldr	r3, [r4, #0]
     ea8:	4602      	mov	r2, r0
     eaa:	4629      	mov	r1, r5
     eac:	685b      	ldr	r3, [r3, #4]
     eae:	4620      	mov	r0, r4
     eb0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     eb2:	4620      	mov	r0, r4
     eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     eb8:	f006 be6e 	b.w	7b98 <Print::println()>

00000ebc <filing_init()>:
    *time = FS_TIME(t.hour,t.min,t.sec);
    *ms10 = 0;
}

int16_t filing_init(void)
{
     ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    FsDateTime::callback = dateTime;

    flash_get_unique_id((uint8_t *) UniqueID);
    SerNum=UniqueID[1];
  #else
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     ebe:	4b23      	ldr	r3, [pc, #140]	; (f4c <filing_init()+0x90>)
     ec0:	2505      	movs	r5, #5
     ec2:	4c23      	ldr	r4, [pc, #140]	; (f50 <filing_init()+0x94>)
     ec4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
     ec8:	4a22      	ldr	r2, [pc, #136]	; (f54 <filing_init()+0x98>)
     eca:	f504 6692 	add.w	r6, r4, #1168	; 0x490
     ece:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     ed2:	4f21      	ldr	r7, [pc, #132]	; (f58 <filing_init()+0x9c>)
     ed4:	6013      	str	r3, [r2, #0]
    sdioConfigBackup = sdioConfig;
     ed6:	2300      	movs	r3, #0
    spiConfigBackupPin = 255;
     ed8:	22ff      	movs	r2, #255	; 0xff
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     eda:	4630      	mov	r0, r6
     edc:	4619      	mov	r1, r3
     ede:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
     ee2:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
     ee6:	f005 f953 	bl	6190 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     eea:	4630      	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
     eec:	f8c4 648c 	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     ef0:	f004 fc44 	bl	577c <SdioCard::errorCode() const>
     ef4:	4602      	mov	r2, r0
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     ef6:	2301      	movs	r3, #1
     ef8:	4620      	mov	r0, r4
    return m_card && !m_card->errorCode();
     efa:	b98a      	cbnz	r2, f20 <filing_init()+0x64>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     efc:	461a      	mov	r2, r3
     efe:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
     f02:	f003 fd67 	bl	49d4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     f06:	b158      	cbz	r0, f20 <filing_init()+0x64>
     f08:	2111      	movs	r1, #17
     f0a:	4814      	ldr	r0, [pc, #80]	; (f5c <filing_init()+0xa0>)
     f0c:	f009 f9a2 	bl	a254 <usb_serial_write>
     f10:	4813      	ldr	r0, [pc, #76]	; (f60 <filing_init()+0xa4>)
     f12:	f006 fe41 	bl	7b98 <Print::println()>

  for(int ii=0; ii<5;ii++)
  {
    if (sd.begin(SD_CONFIG)) 
    { Serial.println("card initialized.");
      haveStore=1;
     f16:	2301      	movs	r3, #1
     f18:	4a12      	ldr	r2, [pc, #72]	; (f64 <filing_init()+0xa8>)
      return 1;
     f1a:	4618      	mov	r0, r3
      haveStore=1;
     f1c:	6013      	str	r3, [r2, #0]
  }

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
}
     f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f20:	210f      	movs	r1, #15
     f22:	4638      	mov	r0, r7
     f24:	f009 f996 	bl	a254 <usb_serial_write>
     f28:	480d      	ldr	r0, [pc, #52]	; (f60 <filing_init()+0xa4>)
     f2a:	f006 fe35 	bl	7b98 <Print::println()>
      delay(100);
     f2e:	2064      	movs	r0, #100	; 0x64
     f30:	f007 f8e4 	bl	80fc <delay>
  for(int ii=0; ii<5;ii++)
     f34:	3d01      	subs	r5, #1
     f36:	d1ce      	bne.n	ed6 <filing_init()+0x1a>
     f38:	211b      	movs	r1, #27
     f3a:	480b      	ldr	r0, [pc, #44]	; (f68 <filing_init()+0xac>)
     f3c:	f009 f98a 	bl	a254 <usb_serial_write>
     f40:	4807      	ldr	r0, [pc, #28]	; (f60 <filing_init()+0xa4>)
     f42:	f006 fe29 	bl	7b98 <Print::println()>
  return 0;
     f46:	4628      	mov	r0, r5
}
     f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f4a:	bf00      	nop
     f4c:	401f4400 	.word	0x401f4400
     f50:	20022084 	.word	0x20022084
     f54:	2000c7f0 	.word	0x2000c7f0
     f58:	200004d0 	.word	0x200004d0
     f5c:	200004bc 	.word	0x200004bc
     f60:	2000886c 	.word	0x2000886c
     f64:	2002173c 	.word	0x2002173c
     f68:	200004e0 	.word	0x200004e0

00000f6c <makeHeader(long*)>:


int16_t makeHeader(int32_t *header)
{
     f6c:	b530      	push	{r4, r5, lr}
     f6e:	b089      	sub	sp, #36	; 0x24
     f70:	4604      	mov	r4, r0

    header[5] = 20;          // SW version
    header[6] = SerNum;      // serial number
    header[7] = FSAMP;
    header[8] = NCH;
    header[9] = t_acq;
     f72:	4d1b      	ldr	r5, [pc, #108]	; (fe0 <makeHeader(long*)+0x74>)
    rtc_get_datetime(&t);
     f74:	a806      	add	r0, sp, #24
     f76:	f000 fc33 	bl	17e0 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
     f7a:	f99d 001f 	ldrsb.w	r0, [sp, #31]
     f7e:	f99d 301e 	ldrsb.w	r3, [sp, #30]
     f82:	f99d 101d 	ldrsb.w	r1, [sp, #29]
     f86:	f99d 201b 	ldrsb.w	r2, [sp, #27]
     f8a:	e9cd 3003 	strd	r3, r0, [sp, #12]
     f8e:	f99d 001a 	ldrsb.w	r0, [sp, #26]
     f92:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
     f96:	9000      	str	r0, [sp, #0]
     f98:	4620      	mov	r0, r4
     f9a:	e9cd 2101 	strd	r2, r1, [sp, #4]
     f9e:	4a11      	ldr	r2, [pc, #68]	; (fe4 <makeHeader(long*)+0x78>)
     fa0:	4911      	ldr	r1, [pc, #68]	; (fe8 <makeHeader(long*)+0x7c>)
     fa2:	f00b fa85 	bl	c4b0 <sprintf>
    header[10] = t_on;
     fa6:	4a11      	ldr	r2, [pc, #68]	; (fec <makeHeader(long*)+0x80>)
    header[11] = t_off;
     fa8:	4b11      	ldr	r3, [pc, #68]	; (ff0 <makeHeader(long*)+0x84>)
    header[8] = NCH;
     faa:	2001      	movs	r0, #1
    header[9] = t_acq;
     fac:	682d      	ldr	r5, [r5, #0]
    header[10] = t_on;
     fae:	6812      	ldr	r2, [r2, #0]
    header[6] = SerNum;      // serial number
     fb0:	4910      	ldr	r1, [pc, #64]	; (ff4 <makeHeader(long*)+0x88>)
    header[11] = t_off;
     fb2:	681b      	ldr	r3, [r3, #0]
    header[6] = SerNum;      // serial number
     fb4:	6809      	ldr	r1, [r1, #0]
    header[9] = t_acq;
     fb6:	6265      	str	r5, [r4, #36]	; 0x24
    header[5] = 20;          // SW version
     fb8:	2514      	movs	r5, #20
    header[6] = SerNum;      // serial number
     fba:	61a1      	str	r1, [r4, #24]
    header[7] = FSAMP;
     fbc:	f64a 4144 	movw	r1, #44100	; 0xac44
    header[5] = 20;          // SW version
     fc0:	6165      	str	r5, [r4, #20]
    header[8] = NCH;
     fc2:	6220      	str	r0, [r4, #32]
    header[7] = FSAMP;
     fc4:	61e1      	str	r1, [r4, #28]
    header[12] = PROC_MODE;
     fc6:	6320      	str	r0, [r4, #48]	; 0x30
    header[11] = t_off;
     fc8:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    header[13] = shift;
     fcc:	4b0a      	ldr	r3, [pc, #40]	; (ff8 <makeHeader(long*)+0x8c>)

    header[127]=0x55555555;
     fce:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    header[13] = shift;
     fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
    header[127]=0x55555555;
     fd6:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
    header[13] = shift;
     fda:	6363      	str	r3, [r4, #52]	; 0x34
    return 1;
}
     fdc:	b009      	add	sp, #36	; 0x24
     fde:	bd30      	pop	{r4, r5, pc}
     fe0:	20008e48 	.word	0x20008e48
     fe4:	20000498 	.word	0x20000498
     fe8:	200004a0 	.word	0x200004a0
     fec:	20008e4c 	.word	0x20008e4c
     ff0:	2002255c 	.word	0x2002255c
     ff4:	2000c7f0 	.word	0x2000c7f0
     ff8:	20008e6c 	.word	0x20008e6c

00000ffc <newDirectory(char*)>:
  ho=h;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
     ffc:	b530      	push	{r4, r5, lr}
     ffe:	b087      	sub	sp, #28
    1000:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    1002:	a804      	add	r0, sp, #16
    1004:	f000 fbec 	bl	17e0 <rtc_get_datetime(datetime_t*)>
  if(h==ho) return 0;
    1008:	4913      	ldr	r1, [pc, #76]	; (1058 <newDirectory(char*)+0x5c>)

    if(newHour(t.hour))
    100a:	f99d 2015 	ldrsb.w	r2, [sp, #21]
  if(h==ho) return 0;
    100e:	680b      	ldr	r3, [r1, #0]
    1010:	429a      	cmp	r2, r3
    1012:	d01e      	beq.n	1052 <newDirectory(char*)+0x56>
    {   
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    1014:	f99d 0012 	ldrsb.w	r0, [sp, #18]
    1018:	f99d 5013 	ldrsb.w	r5, [sp, #19]
    101c:	4b0f      	ldr	r3, [pc, #60]	; (105c <newDirectory(char*)+0x60>)
    101e:	e9cd 5202 	strd	r5, r2, [sp, #8]
    1022:	681b      	ldr	r3, [r3, #0]
    1024:	9001      	str	r0, [sp, #4]
    1026:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
  ho=h;
    102a:	600a      	str	r2, [r1, #0]
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    102c:	4a0c      	ldr	r2, [pc, #48]	; (1060 <newDirectory(char*)+0x64>)
    102e:	490d      	ldr	r1, [pc, #52]	; (1064 <newDirectory(char*)+0x68>)
    1030:	9000      	str	r0, [sp, #0]
    1032:	4620      	mov	r0, r4
    1034:	f00b fa3c 	bl	c4b0 <sprintf>
            DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
        //
        Serial.println(); Serial.print(dirName);
    1038:	480b      	ldr	r0, [pc, #44]	; (1068 <newDirectory(char*)+0x6c>)
    103a:	f006 fdad 	bl	7b98 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    103e:	4620      	mov	r0, r4
    1040:	f00b ff1e 	bl	ce80 <strlen>
    1044:	4601      	mov	r1, r0
    1046:	4620      	mov	r0, r4
    1048:	f009 f904 	bl	a254 <usb_serial_write>
        return 1;   // have new directory
    104c:	2001      	movs	r0, #1
    }
    return 0;       // keep old directory

}
    104e:	b007      	add	sp, #28
    1050:	bd30      	pop	{r4, r5, pc}
    return 0;       // keep old directory
    1052:	2000      	movs	r0, #0
}
    1054:	b007      	add	sp, #28
    1056:	bd30      	pop	{r4, r5, pc}
    1058:	20021184 	.word	0x20021184
    105c:	2000c7f0 	.word	0x2000c7f0
    1060:	20000518 	.word	0x20000518
    1064:	2000051c 	.word	0x2000051c
    1068:	2000886c 	.word	0x2000886c

0000106c <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    106c:	b510      	push	{r4, lr}
    106e:	b084      	sub	sp, #16
    1070:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    1072:	a802      	add	r0, sp, #8
    1074:	f000 fbb4 	bl	17e0 <rtc_get_datetime(datetime_t*)>
    sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    1078:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    107c:	f99d 100e 	ldrsb.w	r1, [sp, #14]
    1080:	f99d 300d 	ldrsb.w	r3, [sp, #13]
    1084:	4a0b      	ldr	r2, [pc, #44]	; (10b4 <newFileName(char*)+0x48>)
    1086:	e9cd 1000 	strd	r1, r0, [sp]
    108a:	490b      	ldr	r1, [pc, #44]	; (10b8 <newFileName(char*)+0x4c>)
    108c:	4620      	mov	r0, r4
    108e:	f00b fa0f 	bl	c4b0 <sprintf>
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    1092:	480a      	ldr	r0, [pc, #40]	; (10bc <newFileName(char*)+0x50>)
    1094:	f006 fd80 	bl	7b98 <Print::println()>
    1098:	2102      	movs	r1, #2
    109a:	4809      	ldr	r0, [pc, #36]	; (10c0 <newFileName(char*)+0x54>)
    109c:	f009 f8da 	bl	a254 <usb_serial_write>
    10a0:	4620      	mov	r0, r4
    10a2:	f00b feed 	bl	ce80 <strlen>
    10a6:	4601      	mov	r1, r0
    10a8:	4620      	mov	r0, r4
    10aa:	f009 f8d3 	bl	a254 <usb_serial_write>
    return 1;
}
    10ae:	2001      	movs	r0, #1
    10b0:	b004      	add	sp, #16
    10b2:	bd10      	pop	{r4, pc}
    10b4:	200004fc 	.word	0x200004fc
    10b8:	20000500 	.word	0x20000500
    10bc:	2000886c 	.word	0x2000886c
    10c0:	20000514 	.word	0x20000514

000010c4 <storeData(short)>:
static char fileName[80];
static int32_t fileHeader[128];

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    10c4:	b570      	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
    10c6:	4604      	mov	r4, r0
{
    10c8:	b094      	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
    10ca:	2800      	cmp	r0, #0
    10cc:	d03a      	beq.n	1144 <storeData(short)+0x80>
        else
        {  return STOPPED; // if file open fails: don't do anything
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    10ce:	2801      	cmp	r0, #1
    10d0:	d015      	beq.n	10fe <storeData(short)+0x3a>
        { status = DOCLOSE;
        } 
        else status=RUNNING;
    }
    //
    if(status==RUNNING) // file is open, header written: store data records
    10d2:	2802      	cmp	r0, #2
    10d4:	f000 80c0 	beq.w	1258 <storeData(short)+0x194>
        { Serial.print(">"); Serial.print(nd); Serial.print(" "); Serial.println(status); status=DOCLOSE; }
        disk_count++;
    }    

    // following is done independent of data availability
    if(status==DOCLOSE) // should close file
    10d8:	2803      	cmp	r0, #3
    10da:	f000 80b1 	beq.w	1240 <storeData(short)+0x17c>
            file.close();
        }
        status = CLOSED;
    }
    //
    if(status==MUSTSTOP) // should close file and stop
    10de:	2804      	cmp	r0, #4
    10e0:	d10b      	bne.n	10fa <storeData(short)+0x36>
  bool isOpen() const {return m_fFile || m_xFile;}
    10e2:	4b86      	ldr	r3, [pc, #536]	; (12fc <storeData(short)+0x238>)
    10e4:	6c98      	ldr	r0, [r3, #72]	; 0x48
    10e6:	2800      	cmp	r0, #0
    10e8:	f000 80f2 	beq.w	12d0 <storeData(short)+0x20c>
    return m_fFile ? m_fFile->sync() :
    10ec:	f002 fc76 	bl	39dc <FatFile::sync()>
    {   if(file)
        {
            file.flush();
            file.close();
    10f0:	4883      	ldr	r0, [pc, #524]	; (1300 <storeData(short)+0x23c>)
    10f2:	f003 fc01 	bl	48f8 <FsBaseFile::close()>
        }
        status = STOPPED;
    10f6:	f04f 30ff 	mov.w	r0, #4294967295
    }
    return status;
}
    10fa:	b014      	add	sp, #80	; 0x50
    10fc:	bd70      	pop	{r4, r5, r6, pc}
    10fe:	4c7f      	ldr	r4, [pc, #508]	; (12fc <storeData(short)+0x238>)
    {   makeHeader(fileHeader);
    1100:	4880      	ldr	r0, [pc, #512]	; (1304 <storeData(short)+0x240>)
    1102:	f7ff ff33 	bl	f6c <makeHeader(long*)>
    return m_fFile ? m_fFile->write(buf, count) :
    1106:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    1108:	2800      	cmp	r0, #0
    110a:	d068      	beq.n	11de <storeData(short)+0x11a>
    110c:	f44f 7200 	mov.w	r2, #512	; 0x200
    1110:	497c      	ldr	r1, [pc, #496]	; (1304 <storeData(short)+0x240>)
    1112:	f002 fc69 	bl	39e8 <FatFile::write(void const*, unsigned int)>
        if(file.write((const void *)fileHeader,512) < 512) 
    1116:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    111a:	d36b      	bcc.n	11f4 <storeData(short)+0x130>
    111c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    111e:	2800      	cmp	r0, #0
    1120:	f000 8090 	beq.w	1244 <storeData(short)+0x180>
    1124:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1128:	4977      	ldr	r1, [pc, #476]	; (1308 <storeData(short)+0x244>)
    112a:	f002 fc5d 	bl	39e8 <FatFile::write(void const*, unsigned int)>
    112e:	4605      	mov	r5, r0
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    1130:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    1134:	d36a      	bcc.n	120c <storeData(short)+0x148>
        disk_count++;
    1136:	4a75      	ldr	r2, [pc, #468]	; (130c <storeData(short)+0x248>)
    1138:	2002      	movs	r0, #2
    113a:	6813      	ldr	r3, [r2, #0]
    113c:	3301      	adds	r3, #1
    113e:	6013      	str	r3, [r2, #0]
}
    1140:	b014      	add	sp, #80	; 0x50
    1142:	bd70      	pop	{r4, r5, r6, pc}
        if(newDirectory(dirName))
    1144:	4872      	ldr	r0, [pc, #456]	; (1310 <storeData(short)+0x24c>)
    1146:	f7ff ff59 	bl	ffc <newDirectory(char*)>
    114a:	b1d8      	cbz	r0, 1184 <storeData(short)+0xc0>
    return m_fVol ? m_fVol->exists(path) :
    114c:	4d71      	ldr	r5, [pc, #452]	; (1314 <storeData(short)+0x250>)
    114e:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    1152:	2a00      	cmp	r2, #0
    1154:	f000 8082 	beq.w	125c <storeData(short)+0x198>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1158:	466e      	mov	r6, sp
    115a:	4611      	mov	r1, r2
    115c:	4623      	mov	r3, r4
    115e:	4a6c      	ldr	r2, [pc, #432]	; (1310 <storeData(short)+0x24c>)
    1160:	4630      	mov	r0, r6
  FatFile() {}
    1162:	9400      	str	r4, [sp, #0]
    1164:	f002 fa40 	bl	35e8 <FatFile::open(FatVolume*, char const*, int)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    1168:	2800      	cmp	r0, #0
    116a:	f000 8084 	beq.w	1276 <storeData(short)+0x1b2>
    return m_fVol ? m_fVol->chdir(path) :
    116e:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    1172:	2800      	cmp	r0, #0
    1174:	f000 8095 	beq.w	12a2 <storeData(short)+0x1de>
    1178:	4965      	ldr	r1, [pc, #404]	; (1310 <storeData(short)+0x24c>)
    117a:	f003 fb3b 	bl	47f4 <FatVolume::chdir(char const*)>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    117e:	2800      	cmp	r0, #0
    1180:	f000 8098 	beq.w	12b4 <storeData(short)+0x1f0>
        if(newFileName(fileName))
    1184:	4864      	ldr	r0, [pc, #400]	; (1318 <storeData(short)+0x254>)
    1186:	f7ff ff71 	bl	106c <newFileName(char*)>
    118a:	b328      	cbz	r0, 11d8 <storeData(short)+0x114>
            file = sd.open(fileName, FILE_WRITE); 
    118c:	f244 2302 	movw	r3, #16898	; 0x4202
    1190:	4a61      	ldr	r2, [pc, #388]	; (1318 <storeData(short)+0x254>)
    1192:	4960      	ldr	r1, [pc, #384]	; (1314 <storeData(short)+0x250>)
    1194:	4668      	mov	r0, sp
    1196:	f003 fc8f 	bl	4ab8 <FsVolume::open(char const*, int)>
class Print
    119a:	4c58      	ldr	r4, [pc, #352]	; (12fc <storeData(short)+0x238>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    119c:	f89d 300c 	ldrb.w	r3, [sp, #12]
class StreamFile : public stream_t, public BaseFile {
    11a0:	f104 0010 	add.w	r0, r4, #16
    11a4:	7323      	strb	r3, [r4, #12]
    11a6:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    11aa:	e9c4 1201 	strd	r1, r2, [r4, #4]
    11ae:	a904      	add	r1, sp, #16
    11b0:	f003 fb48 	bl	4844 <FsBaseFile::operator=(FsBaseFile const&)>
    11b4:	4b59      	ldr	r3, [pc, #356]	; (131c <storeData(short)+0x258>)
  ~FsBaseFile() {close();}
    11b6:	a804      	add	r0, sp, #16
    11b8:	9300      	str	r3, [sp, #0]
    11ba:	f003 fb9d 	bl	48f8 <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    11be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    11c0:	2b00      	cmp	r3, #0
    11c2:	d19d      	bne.n	1100 <storeData(short)+0x3c>
    11c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    11c6:	2b00      	cmp	r3, #0
    11c8:	d19a      	bne.n	1100 <storeData(short)+0x3c>
    11ca:	2111      	movs	r1, #17
    11cc:	4854      	ldr	r0, [pc, #336]	; (1320 <storeData(short)+0x25c>)
    11ce:	f009 f841 	bl	a254 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    11d2:	4854      	ldr	r0, [pc, #336]	; (1324 <storeData(short)+0x260>)
    11d4:	f006 fce0 	bl	7b98 <Print::println()>
                return STOPPED; 
    11d8:	f04f 30ff 	mov.w	r0, #4294967295
    11dc:	e78d      	b.n	10fa <storeData(short)+0x36>
    11de:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    11e0:	2800      	cmp	r0, #0
    11e2:	d08a      	beq.n	10fa <storeData(short)+0x36>
    11e4:	f44f 7200 	mov.w	r2, #512	; 0x200
    11e8:	4946      	ldr	r1, [pc, #280]	; (1304 <storeData(short)+0x240>)
    11ea:	f001 fb6b 	bl	28c4 <ExFatFile::write(void const*, unsigned int)>
        if(file.write((const void *)fileHeader,512) < 512) 
    11ee:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    11f2:	d293      	bcs.n	111c <storeData(short)+0x58>
  bool isOpen() const {return m_fFile || m_xFile;}
    11f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    11f6:	2800      	cmp	r0, #0
    11f8:	d063      	beq.n	12c2 <storeData(short)+0x1fe>
    return m_fFile ? m_fFile->sync() :
    11fa:	f002 fbef 	bl	39dc <FatFile::sync()>
            file.close();
    11fe:	4840      	ldr	r0, [pc, #256]	; (1300 <storeData(short)+0x23c>)
    1200:	f003 fb7a 	bl	48f8 <FsBaseFile::close()>
        status = CLOSED;
    1204:	2000      	movs	r0, #0
}
    1206:	b014      	add	sp, #80	; 0x50
    1208:	bd70      	pop	{r4, r5, r6, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
    120a:	4605      	mov	r5, r0
    120c:	2101      	movs	r1, #1
    120e:	4846      	ldr	r0, [pc, #280]	; (1328 <storeData(short)+0x264>)
    1210:	f009 f820 	bl	a254 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1214:	2300      	movs	r3, #0
    1216:	220a      	movs	r2, #10
    1218:	4629      	mov	r1, r5
    121a:	4842      	ldr	r0, [pc, #264]	; (1324 <storeData(short)+0x260>)
    121c:	f006 fce6 	bl	7bec <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1220:	2101      	movs	r1, #1
    1222:	4842      	ldr	r0, [pc, #264]	; (132c <storeData(short)+0x268>)
    1224:	f009 f816 	bl	a254 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1228:	2102      	movs	r1, #2
    122a:	483e      	ldr	r0, [pc, #248]	; (1324 <storeData(short)+0x260>)
    122c:	f006 fca8 	bl	7b80 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1230:	483c      	ldr	r0, [pc, #240]	; (1324 <storeData(short)+0x260>)
    1232:	f006 fcb1 	bl	7b98 <Print::println()>
        disk_count++;
    1236:	4a35      	ldr	r2, [pc, #212]	; (130c <storeData(short)+0x248>)
    1238:	6813      	ldr	r3, [r2, #0]
    123a:	3301      	adds	r3, #1
    123c:	6013      	str	r3, [r2, #0]
    if(status==DOCLOSE) // should close file
    123e:	e7d9      	b.n	11f4 <storeData(short)+0x130>
    1240:	4c2e      	ldr	r4, [pc, #184]	; (12fc <storeData(short)+0x238>)
    1242:	e7d7      	b.n	11f4 <storeData(short)+0x130>
    1244:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    1246:	2800      	cmp	r0, #0
    1248:	d0df      	beq.n	120a <storeData(short)+0x146>
    124a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    124e:	492e      	ldr	r1, [pc, #184]	; (1308 <storeData(short)+0x244>)
    1250:	f001 fb38 	bl	28c4 <ExFatFile::write(void const*, unsigned int)>
    1254:	4605      	mov	r5, r0
    1256:	e76b      	b.n	1130 <storeData(short)+0x6c>
    1258:	4c28      	ldr	r4, [pc, #160]	; (12fc <storeData(short)+0x238>)
    125a:	e75f      	b.n	111c <storeData(short)+0x58>
    125c:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    1260:	b1c1      	cbz	r1, 1294 <storeData(short)+0x1d0>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1262:	466e      	mov	r6, sp
    1264:	4613      	mov	r3, r2
  ExFatFile() {}
    1266:	920c      	str	r2, [sp, #48]	; 0x30
    1268:	4630      	mov	r0, r6
    126a:	4a29      	ldr	r2, [pc, #164]	; (1310 <storeData(short)+0x24c>)
    126c:	f001 f8a6 	bl	23bc <ExFatFile::open(ExFatVolume*, char const*, int)>
    1270:	2800      	cmp	r0, #0
    1272:	f47f af7c 	bne.w	116e <storeData(short)+0xaa>
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    1276:	f8d5 2480 	ldr.w	r2, [r5, #1152]	; 0x480
    127a:	b37a      	cbz	r2, 12dc <storeData(short)+0x218>
    127c:	2400      	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    127e:	f502 6189 	add.w	r1, r2, #1096	; 0x448
    1282:	2301      	movs	r3, #1
    1284:	4630      	mov	r0, r6
    1286:	4a22      	ldr	r2, [pc, #136]	; (1310 <storeData(short)+0x24c>)
    1288:	9400      	str	r4, [sp, #0]
    128a:	f002 f8b5 	bl	33f8 <FatFile::mkdir(FatFile*, char const*, bool)>
        {   if(!sd.exists(dirName) && !sd.mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    128e:	2800      	cmp	r0, #0
    1290:	f47f af6d 	bne.w	116e <storeData(short)+0xaa>
    1294:	4823      	ldr	r0, [pc, #140]	; (1324 <storeData(short)+0x260>)
    1296:	4926      	ldr	r1, [pc, #152]	; (1330 <storeData(short)+0x26c>)
    1298:	f7ff fdfe 	bl	e98 <Print::println(char const*) [clone .isra.0]>
    129c:	f04f 30ff 	mov.w	r0, #4294967295
    12a0:	e72b      	b.n	10fa <storeData(short)+0x36>
    12a2:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    12a6:	b128      	cbz	r0, 12b4 <storeData(short)+0x1f0>
    12a8:	4919      	ldr	r1, [pc, #100]	; (1310 <storeData(short)+0x24c>)
    12aa:	f001 feff 	bl	30ac <ExFatVolume::chdir(char const*)>
    12ae:	2800      	cmp	r0, #0
    12b0:	f47f af68 	bne.w	1184 <storeData(short)+0xc0>
            if(!sd.chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    12b4:	481b      	ldr	r0, [pc, #108]	; (1324 <storeData(short)+0x260>)
    12b6:	491f      	ldr	r1, [pc, #124]	; (1334 <storeData(short)+0x270>)
    12b8:	f7ff fdee 	bl	e98 <Print::println(char const*) [clone .isra.0]>
    12bc:	f04f 30ff 	mov.w	r0, #4294967295
    12c0:	e71b      	b.n	10fa <storeData(short)+0x36>
  bool isOpen() const {return m_fFile || m_xFile;}
    12c2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    12c4:	2800      	cmp	r0, #0
    12c6:	f43f af18 	beq.w	10fa <storeData(short)+0x36>
           m_xFile ? m_xFile->sync() : false;
    12ca:	f001 f965 	bl	2598 <ExFatFile::sync()>
    12ce:	e796      	b.n	11fe <storeData(short)+0x13a>
  bool isOpen() const {return m_fFile || m_xFile;}
    12d0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    12d2:	2800      	cmp	r0, #0
    12d4:	d080      	beq.n	11d8 <storeData(short)+0x114>
           m_xFile ? m_xFile->sync() : false;
    12d6:	f001 f95f 	bl	2598 <ExFatFile::sync()>
    12da:	e709      	b.n	10f0 <storeData(short)+0x2c>
    12dc:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    12e0:	2900      	cmp	r1, #0
    12e2:	d0d7      	beq.n	1294 <storeData(short)+0x1d0>
    12e4:	920c      	str	r2, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    12e6:	2301      	movs	r3, #1
    12e8:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    12ec:	4630      	mov	r0, r6
    12ee:	4a08      	ldr	r2, [pc, #32]	; (1310 <storeData(short)+0x24c>)
    12f0:	f001 fa0a 	bl	2708 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    12f4:	2800      	cmp	r0, #0
    12f6:	d0cd      	beq.n	1294 <storeData(short)+0x1d0>
    12f8:	e739      	b.n	116e <storeData(short)+0xaa>
    12fa:	bf00      	nop
    12fc:	200216ec 	.word	0x200216ec
    1300:	200216fc 	.word	0x200216fc
    1304:	2000dbb4 	.word	0x2000dbb4
    1308:	2000cbb4 	.word	0x2000cbb4
    130c:	200216c0 	.word	0x200216c0
    1310:	20020bf4 	.word	0x20020bf4
    1314:	20022084 	.word	0x20022084
    1318:	20020e44 	.word	0x20020e44
    131c:	20000984 	.word	0x20000984
    1320:	200005e8 	.word	0x200005e8
    1324:	2000886c 	.word	0x2000886c
    1328:	200005fc 	.word	0x200005fc
    132c:	20008664 	.word	0x20008664
    1330:	200005d0 	.word	0x200005d0
    1334:	200005dc 	.word	0x200005dc

00001338 <saveData(short)>:
//
volatile uint32_t logBuffer[8];
int16_t saveData(int16_t status)
{
    if(status==STOPPED) 
    1338:	1c43      	adds	r3, r0, #1
{
    133a:	b570      	push	{r4, r5, r6, lr}
    if(status==STOPPED) 
    133c:	d031      	beq.n	13a2 <saveData(short)+0x6a>
    { pullData(diskBuffer);
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    }
    if(status<CLOSED) return status; // we are stopped: don't do anything
    133e:	2800      	cmp	r0, #0
    1340:	4605      	mov	r5, r0
    1342:	db2c      	blt.n	139e <saveData(short)+0x66>
  uint32_t tx=rtc_get();
    1344:	f007 f892 	bl	846c <rtc_get>
  tx = tx % t_acq;
    1348:	4b21      	ldr	r3, [pc, #132]	; (13d0 <saveData(short)+0x98>)
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    134a:	2d01      	cmp	r5, #1
  tx = tx % t_acq;
    134c:	681b      	ldr	r3, [r3, #0]
    134e:	fbb0 f2f3 	udiv	r2, r0, r3
    1352:	fb02 0013 	mls	r0, r2, r3, r0
  if((status>OPENED) && (tx_>0) && (tx < tx_)) status=DOCLOSE;
    1356:	4b1f      	ldr	r3, [pc, #124]	; (13d4 <saveData(short)+0x9c>)
    1358:	dd05      	ble.n	1366 <saveData(short)+0x2e>
    135a:	681a      	ldr	r2, [r3, #0]
    135c:	b11a      	cbz	r2, 1366 <saveData(short)+0x2e>
    135e:	681a      	ldr	r2, [r3, #0]
    1360:	4290      	cmp	r0, r2
    1362:	bf38      	it	cc
    1364:	2503      	movcc	r5, #3
  tx_=tx;
    1366:	6018      	str	r0, [r3, #0]

    status=checkEndOfFile(status);

    if(getDataCount()>=NDBL)
    1368:	f000 f884 	bl	1474 <getDataCount()>
    136c:	2807      	cmp	r0, #7
    136e:	d916      	bls.n	139e <saveData(short)+0x66>
    1370:	4c19      	ldr	r4, [pc, #100]	; (13d8 <saveData(short)+0xa0>)
    1372:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    {
      for(int ii=0; ii<NDBL; ii++) pullData(&diskBuffer[ii*NBUF_ACQ]);
    1376:	4620      	mov	r0, r4
    1378:	f504 7400 	add.w	r4, r4, #512	; 0x200
    137c:	f000 f8c4 	bl	1508 <pullData(unsigned long*)>
    1380:	42b4      	cmp	r4, r6
    1382:	d1f8      	bne.n	1376 <saveData(short)+0x3e>
    1384:	4a15      	ldr	r2, [pc, #84]	; (13dc <saveData(short)+0xa4>)
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    1386:	2300      	movs	r3, #0
    1388:	4815      	ldr	r0, [pc, #84]	; (13e0 <saveData(short)+0xa8>)
    138a:	f852 1f04 	ldr.w	r1, [r2, #4]!
    138e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    1392:	3301      	adds	r3, #1
    1394:	2b08      	cmp	r3, #8
    1396:	d1f8      	bne.n	138a <saveData(short)+0x52>
      if(haveStore)
    1398:	4b12      	ldr	r3, [pc, #72]	; (13e4 <saveData(short)+0xac>)
    139a:	681b      	ldr	r3, [r3, #0]
    139c:	b993      	cbnz	r3, 13c4 <saveData(short)+0x8c>
        status=storeData(status);
    }
    return status;
}
    139e:	4628      	mov	r0, r5
    13a0:	bd70      	pop	{r4, r5, r6, pc}
    { pullData(diskBuffer);
    13a2:	480d      	ldr	r0, [pc, #52]	; (13d8 <saveData(short)+0xa0>)
    13a4:	f000 f8b0 	bl	1508 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    13a8:	4a0c      	ldr	r2, [pc, #48]	; (13dc <saveData(short)+0xa4>)
    13aa:	2300      	movs	r3, #0
    13ac:	480c      	ldr	r0, [pc, #48]	; (13e0 <saveData(short)+0xa8>)
    13ae:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13b2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    13b6:	3301      	adds	r3, #1
    13b8:	2b08      	cmp	r3, #8
    13ba:	d1f8      	bne.n	13ae <saveData(short)+0x76>
    13bc:	f04f 35ff 	mov.w	r5, #4294967295
}
    13c0:	4628      	mov	r0, r5
    13c2:	bd70      	pop	{r4, r5, r6, pc}
        status=storeData(status);
    13c4:	4628      	mov	r0, r5
}
    13c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        status=storeData(status);
    13ca:	f7ff be7b 	b.w	10c4 <storeData(short)>
    13ce:	bf00      	nop
    13d0:	20008e48 	.word	0x20008e48
    13d4:	20021178 	.word	0x20021178
    13d8:	2000cbb4 	.word	0x2000cbb4
    13dc:	2000cbb0 	.word	0x2000cbb0
    13e0:	20021f44 	.word	0x20021f44
    13e4:	2002173c 	.word	0x2002173c

000013e8 <_GLOBAL__sub_I_t_acq>:
  FsVolume() {}
    13e8:	4819      	ldr	r0, [pc, #100]	; (1450 <_GLOBAL__sub_I_t_acq+0x68>)
	SPISettings() : _clock(4000000) {
    13ea:	4b1a      	ldr	r3, [pc, #104]	; (1454 <_GLOBAL__sub_I_t_acq+0x6c>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    13ec:	491a      	ldr	r1, [pc, #104]	; (1458 <_GLOBAL__sub_I_t_acq+0x70>)
SdFs sd;
    13ee:	4a1b      	ldr	r2, [pc, #108]	; (145c <_GLOBAL__sub_I_t_acq+0x74>)
}
    13f0:	b510      	push	{r4, lr}
    13f2:	f8c0 34a4 	str.w	r3, [r0, #1188]	; 0x4a4
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    13f6:	2329      	movs	r3, #41	; 0x29
    13f8:	2400      	movs	r4, #0
    13fa:	f8c0 1490 	str.w	r1, [r0, #1168]	; 0x490
    13fe:	f880 34ad 	strb.w	r3, [r0, #1197]	; 0x4ad
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    1402:	2107      	movs	r1, #7
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    1404:	4b16      	ldr	r3, [pc, #88]	; (1460 <_GLOBAL__sub_I_t_acq+0x78>)
    1406:	f8c0 4480 	str.w	r4, [r0, #1152]	; 0x480
    140a:	f8c0 4484 	str.w	r4, [r0, #1156]	; 0x484
class SdBase : public Vol {
    140e:	f8c0 448c 	str.w	r4, [r0, #1164]	; 0x48c
  SdioConfig() {}
    1412:	f8a0 4498 	strh.w	r4, [r0, #1176]	; 0x498
  SharedSpiCard() {}
    1416:	f880 44b1 	strb.w	r4, [r0, #1201]	; 0x4b1
  DedicatedSpiCard() {}
    141a:	f880 44b8 	strb.w	r4, [r0, #1208]	; 0x4b8
    141e:	f8c0 14a8 	str.w	r1, [r0, #1192]	; 0x4a8
    1422:	f880 44c8 	strb.w	r4, [r0, #1224]	; 0x4c8
SdFs sd;
    1426:	490f      	ldr	r1, [pc, #60]	; (1464 <_GLOBAL__sub_I_t_acq+0x7c>)
    1428:	f8c0 349c 	str.w	r3, [r0, #1180]	; 0x49c
    142c:	f009 f92a 	bl	a684 <__aeabi_atexit>
	constexpr Print() : write_error(0) {}
    1430:	480d      	ldr	r0, [pc, #52]	; (1468 <_GLOBAL__sub_I_t_acq+0x80>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1432:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1436:	4b0d      	ldr	r3, [pc, #52]	; (146c <_GLOBAL__sub_I_t_acq+0x84>)
    1438:	7304      	strb	r4, [r0, #12]
FsFile file;
    143a:	4a08      	ldr	r2, [pc, #32]	; (145c <_GLOBAL__sub_I_t_acq+0x74>)
    143c:	6003      	str	r3, [r0, #0]
    143e:	e9c0 4101 	strd	r4, r1, [r0, #4]
  FsBaseFile() {}
    1442:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
    1446:	490a      	ldr	r1, [pc, #40]	; (1470 <_GLOBAL__sub_I_t_acq+0x88>)
}
    1448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
FsFile file;
    144c:	f009 b91a 	b.w	a684 <__aeabi_atexit>
    1450:	20022084 	.word	0x20022084
    1454:	003d0900 	.word	0x003d0900
    1458:	20000ac4 	.word	0x20000ac4
    145c:	20008898 	.word	0x20008898
    1460:	200009d8 	.word	0x200009d8
    1464:	00000d85 	.word	0x00000d85
    1468:	200216ec 	.word	0x200216ec
    146c:	20000a70 	.word	0x20000a70
    1470:	00000d89 	.word	0x00000d89

00001474 <getDataCount()>:
  volatile int busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile int head=0;
  volatile int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    1474:	4a04      	ldr	r2, [pc, #16]	; (1488 <getDataCount()+0x14>)
    1476:	4b05      	ldr	r3, [pc, #20]	; (148c <getDataCount()+0x18>)
    1478:	6810      	ldr	r0, [r2, #0]
    147a:	681b      	ldr	r3, [r3, #0]
    147c:	1ac0      	subs	r0, r0, r3
    147e:	bf48      	it	mi
    1480:	3080      	addmi	r0, #128	; 0x80
    1482:	b280      	uxth	r0, r0
    1484:	4770      	bx	lr
    1486:	bf00      	nop
    1488:	20022560 	.word	0x20022560
    148c:	20021740 	.word	0x20021740

00001490 <pushData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    1490:	b470      	push	{r4, r5, r6}
    if ( (tail+1)%MAXBUF == head ) return 0;
    1492:	4c19      	ldr	r4, [pc, #100]	; (14f8 <pushData(unsigned long*)+0x68>)
    1494:	4a19      	ldr	r2, [pc, #100]	; (14fc <pushData(unsigned long*)+0x6c>)
    1496:	6823      	ldr	r3, [r4, #0]
    1498:	6811      	ldr	r1, [r2, #0]
    149a:	3301      	adds	r3, #1
    149c:	425a      	negs	r2, r3
    149e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    14a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    14a6:	bf58      	it	pl
    14a8:	4253      	negpl	r3, r2
    14aa:	428b      	cmp	r3, r1
    14ac:	d020      	beq.n	14f0 <pushData(unsigned long*)+0x60>
    14ae:	4e14      	ldr	r6, [pc, #80]	; (1500 <pushData(unsigned long*)+0x70>)
    while(busy); busy=1;
    14b0:	6833      	ldr	r3, [r6, #0]
    14b2:	2b00      	cmp	r3, #0
    14b4:	d1fc      	bne.n	14b0 <pushData(unsigned long*)+0x20>
    14b6:	2201      	movs	r2, #1
    14b8:	1f01      	subs	r1, r0, #4
    14ba:	4d12      	ldr	r5, [pc, #72]	; (1504 <pushData(unsigned long*)+0x74>)
    14bc:	6032      	str	r2, [r6, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    14be:	6822      	ldr	r2, [r4, #0]
    14c0:	f851 0f04 	ldr.w	r0, [r1, #4]!
    14c4:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    14c8:	3301      	adds	r3, #1
    14ca:	2b80      	cmp	r3, #128	; 0x80
    14cc:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    14d0:	d1f5      	bne.n	14be <pushData(unsigned long*)+0x2e>
    tail = (tail+1)%MAXBUF;
    14d2:	6823      	ldr	r3, [r4, #0]
    busy=0;
    return 1; // signal success.
    14d4:	2001      	movs	r0, #1
    tail = (tail+1)%MAXBUF;
    14d6:	3301      	adds	r3, #1
    14d8:	425a      	negs	r2, r3
    14da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    14de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    14e2:	bf58      	it	pl
    14e4:	4253      	negpl	r3, r2
    busy=0;
    14e6:	2200      	movs	r2, #0
    tail = (tail+1)%MAXBUF;
    14e8:	6023      	str	r3, [r4, #0]
    busy=0;
    14ea:	6032      	str	r2, [r6, #0]
  }
    14ec:	bc70      	pop	{r4, r5, r6}
    14ee:	4770      	bx	lr
    if ( (tail+1)%MAXBUF == head ) return 0;
    14f0:	2000      	movs	r0, #0
  }
    14f2:	bc70      	pop	{r4, r5, r6}
    14f4:	4770      	bx	lr
    14f6:	bf00      	nop
    14f8:	20022560 	.word	0x20022560
    14fc:	20021740 	.word	0x20021740
    1500:	200216bc 	.word	0x200216bc
    1504:	2000e1b8 	.word	0x2000e1b8

00001508 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    1508:	4b15      	ldr	r3, [pc, #84]	; (1560 <pullData(unsigned long*)+0x58>)
  {
    150a:	b430      	push	{r4, r5}
    if ( head==tail ) return 0;
    150c:	4c15      	ldr	r4, [pc, #84]	; (1564 <pullData(unsigned long*)+0x5c>)
    150e:	6822      	ldr	r2, [r4, #0]
    1510:	681b      	ldr	r3, [r3, #0]
    1512:	429a      	cmp	r2, r3
    1514:	d020      	beq.n	1558 <pullData(unsigned long*)+0x50>
    1516:	4d14      	ldr	r5, [pc, #80]	; (1568 <pullData(unsigned long*)+0x60>)
    while(busy); busy=1;
    1518:	682b      	ldr	r3, [r5, #0]
    151a:	2b00      	cmp	r3, #0
    151c:	d1fc      	bne.n	1518 <pullData(unsigned long*)+0x10>
    151e:	2201      	movs	r2, #1
    1520:	1f01      	subs	r1, r0, #4
    1522:	4812      	ldr	r0, [pc, #72]	; (156c <pullData(unsigned long*)+0x64>)
    1524:	602a      	str	r2, [r5, #0]
    for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    1526:	6822      	ldr	r2, [r4, #0]
    1528:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
    152c:	3301      	adds	r3, #1
    152e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    1532:	2b80      	cmp	r3, #128	; 0x80
    1534:	f841 2f04 	str.w	r2, [r1, #4]!
    1538:	d1f5      	bne.n	1526 <pullData(unsigned long*)+0x1e>
    head = (head+1)%MAXBUF;
    153a:	6823      	ldr	r3, [r4, #0]
    busy=0;
    return 1;
    153c:	2001      	movs	r0, #1
    head = (head+1)%MAXBUF;
    153e:	3301      	adds	r3, #1
    1540:	425a      	negs	r2, r3
    1542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1546:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    154a:	bf58      	it	pl
    154c:	4253      	negpl	r3, r2
    busy=0;
    154e:	2200      	movs	r2, #0
    head = (head+1)%MAXBUF;
    1550:	6023      	str	r3, [r4, #0]
    busy=0;
    1552:	602a      	str	r2, [r5, #0]
  }
    1554:	bc30      	pop	{r4, r5}
    1556:	4770      	bx	lr
    if ( head==tail ) return 0;
    1558:	2000      	movs	r0, #0
  }
    155a:	bc30      	pop	{r4, r5}
    155c:	4770      	bx	lr
    155e:	bf00      	nop
    1560:	20022560 	.word	0x20022560
    1564:	20021740 	.word	0x20021740
    1568:	200216bc 	.word	0x200216bc
    156c:	2000e1b8 	.word	0x2000e1b8

00001570 <time2date(unsigned long, datetime_t*)>:

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    1570:	4a54      	ldr	r2, [pc, #336]	; (16c4 <time2date(unsigned long, datetime_t*)+0x154>)
  {
    1572:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1576:	fba2 4300 	umull	r4, r3, r2, r0

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    157a:	f240 196d 	movw	r9, #365	; 0x16d
    157e:	4e52      	ldr	r6, [pc, #328]	; (16c8 <time2date(unsigned long, datetime_t*)+0x158>)
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1580:	095b      	lsrs	r3, r3, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1582:	4f52      	ldr	r7, [pc, #328]	; (16cc <time2date(unsigned long, datetime_t*)+0x15c>)
    1584:	f8df 8158 	ldr.w	r8, [pc, #344]	; 16e0 <time2date(unsigned long, datetime_t*)+0x170>
    tm->min  = time % 60; time /= 60; // now it is hours
    1588:	fba2 4203 	umull	r4, r2, r2, r3
    tm->sec  = time % 60; time /= 60; // now it is minutes
    158c:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    tm->min  = time % 60; time /= 60; // now it is hours
    1590:	0952      	lsrs	r2, r2, #5
    tm->sec  = time % 60; time /= 60; // now it is minutes
    1592:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    tm->hour = time % 24; time /= 24; // now it is days
    1596:	4c4e      	ldr	r4, [pc, #312]	; (16d0 <time2date(unsigned long, datetime_t*)+0x160>)
    tm->min  = time % 60; time /= 60; // now it is hours
    1598:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    tm->hour = time % 24; time /= 24; // now it is days
    159c:	fba4 4e02 	umull	r4, lr, r4, r2
    tm->min  = time % 60; time /= 60; // now it is hours
    15a0:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    15a4:	71c8      	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    15a6:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    tm->min  = time % 60; time /= 60; // now it is hours
    15aa:	718b      	strb	r3, [r1, #6]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    15ac:	f10e 0404 	add.w	r4, lr, #4
    tm->hour = time % 24; time /= 24; // now it is days
    15b0:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    15b4:	4b47      	ldr	r3, [pc, #284]	; (16d4 <time2date(unsigned long, datetime_t*)+0x164>)
    tm->hour = time % 24; time /= 24; // now it is days
    15b6:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    15ba:	fba3 0304 	umull	r0, r3, r3, r4
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    15be:	2000      	movs	r0, #0
    tm->hour = time % 24; time /= 24; // now it is days
    15c0:	714a      	strb	r2, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    15c2:	1ae2      	subs	r2, r4, r3
    15c4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    days = 0;
    15c8:	4602      	mov	r2, r0
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    15ca:	089b      	lsrs	r3, r3, #2
    15cc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    15d0:	1ae4      	subs	r4, r4, r3
    15d2:	710c      	strb	r4, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    15d4:	b2c3      	uxtb	r3, r0
    15d6:	f240 1c6d 	movw	ip, #365	; 0x16d
    15da:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
    15de:	f013 0403 	ands.w	r4, r3, #3
    15e2:	fb06 f503 	mul.w	r5, r6, r3
    15e6:	d108      	bne.n	15fa <time2date(unsigned long, datetime_t*)+0x8a>
    15e8:	ebb7 0fb5 	cmp.w	r7, r5, ror #2
    15ec:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    15f0:	d303      	bcc.n	15fa <time2date(unsigned long, datetime_t*)+0x8a>
    15f2:	ebb8 1f35 	cmp.w	r8, r5, ror #4
    15f6:	bf38      	it	cc
    15f8:	46cc      	movcc	ip, r9
    15fa:	4462      	add	r2, ip
    15fc:	3001      	adds	r0, #1
    15fe:	4596      	cmp	lr, r2
    1600:	d2e8      	bcs.n	15d4 <time2date(unsigned long, datetime_t*)+0x64>
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    1602:	4d35      	ldr	r5, [pc, #212]	; (16d8 <time2date(unsigned long, datetime_t*)+0x168>)
    tm->year = year+YEAR0;
    1604:	800b      	strh	r3, [r1, #0]
    days -= LEAP_YEAR(year) ? 366 : 365;
    1606:	fba5 0503 	umull	r0, r5, r5, r3
    160a:	b3a4      	cbz	r4, 1676 <time2date(unsigned long, datetime_t*)+0x106>
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    160c:	096e      	lsrs	r6, r5, #5
    160e:	2764      	movs	r7, #100	; 0x64
    1610:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1614:	09ed      	lsrs	r5, r5, #7
    1616:	fb07 3616 	mls	r6, r7, r6, r3
    161a:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    161e:	f240 106d 	movw	r0, #365	; 0x16d
    time  -= days; // now it is days in this year, starting at 0
    1622:	ebae 0e02 	sub.w	lr, lr, r2
    1626:	2300      	movs	r3, #0
    1628:	2201      	movs	r2, #1
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    162a:	4f2c      	ldr	r7, [pc, #176]	; (16dc <time2date(unsigned long, datetime_t*)+0x16c>)
    time  -= days; // now it is days in this year, starting at 0
    162c:	4470      	add	r0, lr
    for (month=0; month<12; month++) {
    162e:	e00a      	b.n	1646 <time2date(unsigned long, datetime_t*)+0xd6>
      }
      
      if (time >= monthLength) {
    1630:	f813 c007 	ldrb.w	ip, [r3, r7]
    1634:	4584      	cmp	ip, r0
    1636:	d837      	bhi.n	16a8 <time2date(unsigned long, datetime_t*)+0x138>
    for (month=0; month<12; month++) {
    1638:	2a0c      	cmp	r2, #12
        time -= monthLength;
    163a:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    163e:	d012      	beq.n	1666 <time2date(unsigned long, datetime_t*)+0xf6>
    1640:	3201      	adds	r2, #1
    1642:	3301      	adds	r3, #1
    1644:	b2d2      	uxtb	r2, r2
      if (month==1) { // february
    1646:	2b01      	cmp	r3, #1
    1648:	fa5f fe83 	uxtb.w	lr, r3
    164c:	d1f0      	bne.n	1630 <time2date(unsigned long, datetime_t*)+0xc0>
        if (LEAP_YEAR(year)) {
    164e:	b91c      	cbnz	r4, 1658 <time2date(unsigned long, datetime_t*)+0xe8>
    1650:	b1f6      	cbz	r6, 1690 <time2date(unsigned long, datetime_t*)+0x120>
    1652:	f04f 0c1d 	mov.w	ip, #29
    1656:	e001      	b.n	165c <time2date(unsigned long, datetime_t*)+0xec>
    1658:	f04f 0c1c 	mov.w	ip, #28
      if (time >= monthLength) {
    165c:	4560      	cmp	r0, ip
    165e:	d32d      	bcc.n	16bc <time2date(unsigned long, datetime_t*)+0x14c>
        time -= monthLength;
    1660:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    1664:	e7ec      	b.n	1640 <time2date(unsigned long, datetime_t*)+0xd0>
    1666:	f04f 0e0d 	mov.w	lr, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
    166a:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    166c:	f881 e002 	strb.w	lr, [r1, #2]
    tm->day = time + 1;     // day of month
    1670:	70c8      	strb	r0, [r1, #3]
  }
    1672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    days -= LEAP_YEAR(year) ? 366 : 365;
    1676:	2064      	movs	r0, #100	; 0x64
    1678:	096e      	lsrs	r6, r5, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    167a:	09ed      	lsrs	r5, r5, #7
    days -= LEAP_YEAR(year) ? 366 : 365;
    167c:	fb00 3616 	mls	r6, r0, r6, r3
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1680:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1684:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    1688:	b14e      	cbz	r6, 169e <time2date(unsigned long, datetime_t*)+0x12e>
    168a:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    168e:	e7c8      	b.n	1622 <time2date(unsigned long, datetime_t*)+0xb2>
        if (LEAP_YEAR(year)) {
    1690:	2d00      	cmp	r5, #0
    1692:	bf14      	ite	ne
    1694:	f04f 0c1c 	movne.w	ip, #28
    1698:	f04f 0c1d 	moveq.w	ip, #29
    169c:	e7de      	b.n	165c <time2date(unsigned long, datetime_t*)+0xec>
    days -= LEAP_YEAR(year) ? 366 : 365;
    169e:	2d00      	cmp	r5, #0
    16a0:	d1bd      	bne.n	161e <time2date(unsigned long, datetime_t*)+0xae>
    16a2:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    16a6:	e7bc      	b.n	1622 <time2date(unsigned long, datetime_t*)+0xb2>
    for (month=0; month<12; month++) {
    16a8:	f10e 0e01 	add.w	lr, lr, #1
    tm->day = time + 1;     // day of month
    16ac:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    16ae:	fa4f fe8e 	sxtb.w	lr, lr
    tm->day = time + 1;     // day of month
    16b2:	70c8      	strb	r0, [r1, #3]
    tm->month = month + 1;  // jan is month 1  
    16b4:	f881 e002 	strb.w	lr, [r1, #2]
  }
    16b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (time >= monthLength) {
    16bc:	f04f 0e02 	mov.w	lr, #2
    16c0:	e7d3      	b.n	166a <time2date(unsigned long, datetime_t*)+0xfa>
    16c2:	bf00      	nop
    16c4:	88888889 	.word	0x88888889
    16c8:	c28f5c29 	.word	0xc28f5c29
    16cc:	028f5c28 	.word	0x028f5c28
    16d0:	aaaaaaab 	.word	0xaaaaaaab
    16d4:	24924925 	.word	0x24924925
    16d8:	51eb851f 	.word	0x51eb851f
    16dc:	2000080c 	.word	0x2000080c
    16e0:	00a3d70a 	.word	0x00a3d70a

000016e4 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    16e4:	8801      	ldrh	r1, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    16e6:	4a35      	ldr	r2, [pc, #212]	; (17bc <date2time(datetime_t*)+0xd8>)
    year=tm->year-YEAR0;
    16e8:	314e      	adds	r1, #78	; 0x4e
    16ea:	b2c9      	uxtb	r1, r1
  {
    16ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    seconds= year*(SECS_PER_DAY * 365);
    16f0:	fb01 f202 	mul.w	r2, r1, r2
    for (ii = 0; ii < year; ii++) {
    16f4:	b1e1      	cbz	r1, 1730 <date2time(datetime_t*)+0x4c>
    16f6:	f201 7cb2 	addw	ip, r1, #1970	; 0x7b2
    16fa:	f240 73b3 	movw	r3, #1971	; 0x7b3
    16fe:	4d30      	ldr	r5, [pc, #192]	; (17c0 <date2time(datetime_t*)+0xdc>)
      if (LEAP_YEAR(ii)) {
    1700:	4e30      	ldr	r6, [pc, #192]	; (17c4 <date2time(datetime_t*)+0xe0>)
        seconds += SECS_PER_DAY;   // add extra days for leap years
    1702:	4f31      	ldr	r7, [pc, #196]	; (17c8 <date2time(datetime_t*)+0xe4>)
      if (LEAP_YEAR(ii)) {
    1704:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 17d4 <date2time(datetime_t*)+0xf0>
    for (ii = 0; ii < year; ii++) {
    1708:	4563      	cmp	r3, ip
    170a:	fb05 f403 	mul.w	r4, r5, r3
    170e:	d00f      	beq.n	1730 <date2time(datetime_t*)+0x4c>
      if (LEAP_YEAR(ii)) {
    1710:	f013 0f03 	tst.w	r3, #3
    1714:	f103 0301 	add.w	r3, r3, #1
    1718:	d1f6      	bne.n	1708 <date2time(datetime_t*)+0x24>
    171a:	ebb6 0fb4 	cmp.w	r6, r4, ror #2
    171e:	d302      	bcc.n	1726 <date2time(datetime_t*)+0x42>
    1720:	ebbe 1f34 	cmp.w	lr, r4, ror #4
    1724:	d3f0      	bcc.n	1708 <date2time(datetime_t*)+0x24>
    for (ii = 0; ii < year; ii++) {
    1726:	4563      	cmp	r3, ip
        seconds += SECS_PER_DAY;   // add extra days for leap years
    1728:	443a      	add	r2, r7
    for (ii = 0; ii < year; ii++) {
    172a:	fb05 f403 	mul.w	r4, r5, r3
    172e:	d1ef      	bne.n	1710 <date2time(datetime_t*)+0x2c>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
    1730:	f990 e002 	ldrsb.w	lr, [r0, #2]
    1734:	f1be 0f01 	cmp.w	lr, #1
    1738:	dd29      	ble.n	178e <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    173a:	f201 73b2 	addw	r3, r1, #1970	; 0x7b2
    173e:	4e23      	ldr	r6, [pc, #140]	; (17cc <date2time(datetime_t*)+0xe8>)
    1740:	2564      	movs	r5, #100	; 0x64
    1742:	f44f 74c8 	mov.w	r4, #400	; 0x190
    1746:	fba6 1603 	umull	r1, r6, r6, r3
        seconds += SECS_PER_DAY * 29;
    174a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 17d8 <date2time(datetime_t*)+0xf4>
    174e:	4920      	ldr	r1, [pc, #128]	; (17d0 <date2time(datetime_t*)+0xec>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    1750:	0977      	lsrs	r7, r6, #5
    1752:	09f6      	lsrs	r6, r6, #7
    1754:	fb05 3717 	mls	r7, r5, r7, r3
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    1758:	4d1b      	ldr	r5, [pc, #108]	; (17c8 <date2time(datetime_t*)+0xe4>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    175a:	fb04 3616 	mls	r6, r4, r6, r3
    175e:	f003 0403 	and.w	r4, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    1762:	2301      	movs	r3, #1
    1764:	e007      	b.n	1776 <date2time(datetime_t*)+0x92>
    1766:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    1768:	f891 c000 	ldrb.w	ip, [r1]
    for (ii = 1; ii < tm->month; ii++) {
    176c:	3101      	adds	r1, #1
    176e:	4573      	cmp	r3, lr
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    1770:	fb05 220c 	mla	r2, r5, ip, r2
    for (ii = 1; ii < tm->month; ii++) {
    1774:	d00b      	beq.n	178e <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    1776:	2b02      	cmp	r3, #2
    1778:	d1f5      	bne.n	1766 <date2time(datetime_t*)+0x82>
    177a:	2c00      	cmp	r4, #0
    177c:	d1f3      	bne.n	1766 <date2time(datetime_t*)+0x82>
    177e:	b90f      	cbnz	r7, 1784 <date2time(datetime_t*)+0xa0>
    1780:	2e00      	cmp	r6, #0
    1782:	d1f0      	bne.n	1766 <date2time(datetime_t*)+0x82>
    for (ii = 1; ii < tm->month; ii++) {
    1784:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * 29;
    1786:	4442      	add	r2, r8
    for (ii = 1; ii < tm->month; ii++) {
    1788:	3101      	adds	r1, #1
    178a:	4573      	cmp	r3, lr
    178c:	d1f3      	bne.n	1776 <date2time(datetime_t*)+0x92>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    178e:	f990 3006 	ldrsb.w	r3, [r0, #6]
    seconds+= tm->hour * SECS_PER_HOUR;
    1792:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    1796:	f990 1005 	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    179a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    seconds+= tm->sec;
    179e:	f990 5007 	ldrsb.w	r5, [r0, #7]
    seconds+= tm->min * SECS_PER_MIN;
    17a2:	009b      	lsls	r3, r3, #2
    seconds+= tm->sec;
    17a4:	fb04 3301 	mla	r3, r4, r1, r3
    seconds+= (tm->day-1) * SECS_PER_DAY;
    17a8:	f990 1003 	ldrsb.w	r1, [r0, #3]
    17ac:	4c06      	ldr	r4, [pc, #24]	; (17c8 <date2time(datetime_t*)+0xe4>)
    seconds+= tm->sec;
    17ae:	1958      	adds	r0, r3, r5
    seconds+= (tm->day-1) * SECS_PER_DAY;
    17b0:	1e4b      	subs	r3, r1, #1
    seconds+= tm->sec;
    17b2:	fb04 0003 	mla	r0, r4, r3, r0
    return seconds; 
  }
    17b6:	4410      	add	r0, r2
    17b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    17bc:	01e13380 	.word	0x01e13380
    17c0:	c28f5c29 	.word	0xc28f5c29
    17c4:	028f5c28 	.word	0x028f5c28
    17c8:	00015180 	.word	0x00015180
    17cc:	51eb851f 	.word	0x51eb851f
    17d0:	2000080c 	.word	0x2000080c
    17d4:	00a3d70a 	.word	0x00a3d70a
    17d8:	00263b80 	.word	0x00263b80

000017dc <rtc_setup(unsigned char, unsigned char)>:

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;
  }
    17dc:	2001      	movs	r0, #1
    17de:	4770      	bx	lr

000017e0 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    17e0:	b500      	push	{lr}
    17e2:	b083      	sub	sp, #12
    17e4:	9001      	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    17e6:	f006 fe41 	bl	846c <rtc_get>
    17ea:	9901      	ldr	r1, [sp, #4]
    17ec:	f7ff fec0 	bl	1570 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    17f0:	2001      	movs	r0, #1
    17f2:	b003      	add	sp, #12
    17f4:	f85d fb04 	ldr.w	pc, [sp], #4

000017f8 <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    17f8:	b570      	push	{r4, r5, r6, lr}
    17fa:	b082      	sub	sp, #8
    17fc:	4614      	mov	r4, r2
    17fe:	460d      	mov	r5, r1
    1800:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    1802:	f006 fe33 	bl	846c <rtc_get>
    1806:	4669      	mov	r1, sp
    1808:	f7ff feb2 	bl	1570 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.year=year;
    180c:	f8ad 6000 	strh.w	r6, [sp]
    rtc_set(date2time(t));
    1810:	4608      	mov	r0, r1
    t.month=month;
    1812:	f88d 5002 	strb.w	r5, [sp, #2]
    t.day=day;
    1816:	f88d 4003 	strb.w	r4, [sp, #3]
    rtc_set(date2time(t));
    181a:	f7ff ff63 	bl	16e4 <date2time(datetime_t*)>
    181e:	f006 fe37 	bl	8490 <rtc_set>
    rtc_set_datetime(&t);
  }
    1822:	b002      	add	sp, #8
    1824:	bd70      	pop	{r4, r5, r6, pc}
    1826:	bf00      	nop

00001828 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    1828:	b570      	push	{r4, r5, r6, lr}
    182a:	b082      	sub	sp, #8
    182c:	4614      	mov	r4, r2
    182e:	460d      	mov	r5, r1
    1830:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    1832:	f006 fe1b 	bl	846c <rtc_get>
    1836:	4669      	mov	r1, sp
    1838:	f7ff fe9a 	bl	1570 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.hour=hour;
    183c:	f88d 6005 	strb.w	r6, [sp, #5]
    rtc_set(date2time(t));
    1840:	4608      	mov	r0, r1
    t.min=minutes;
    1842:	f88d 5006 	strb.w	r5, [sp, #6]
    t.sec=seconds;
    1846:	f88d 4007 	strb.w	r4, [sp, #7]
    rtc_set(date2time(t));
    184a:	f7ff ff4b 	bl	16e4 <date2time(datetime_t*)>
    184e:	f006 fe1f 	bl	8490 <rtc_set>
    rtc_set_datetime(&t);
  }
    1852:	b002      	add	sp, #8
    1854:	bd70      	pop	{r4, r5, r6, pc}
    1856:	bf00      	nop

00001858 <menuGetInt16(short*) [clone .isra.0]>:
#include "mConfig.h"
#include "menu.h"
#include "mRTC.h"
#include "mAcq.h"

static int menuGetInt16(int16_t *val)
    1858:	b510      	push	{r4, lr}
    185a:	4604      	mov	r4, r0
    185c:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    185e:	f008 fc8f 	bl	a180 <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    1862:	2800      	cmp	r0, #0
    1864:	d0fb      	beq.n	185e <menuGetInt16(short*) [clone .isra.0]+0x6>
  int count = Serial.readBytesUntil('\r',buffer,40);
    1866:	210d      	movs	r1, #13
    1868:	aa02      	add	r2, sp, #8
    186a:	2328      	movs	r3, #40	; 0x28
    186c:	480d      	ldr	r0, [pc, #52]	; (18a4 <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    186e:	f006 fa89 	bl	7d84 <Stream::readBytesUntil(char, char*, unsigned int)>
    1872:	4603      	mov	r3, r0
  buffer[count]=0;
    1874:	2200      	movs	r2, #0
							  return write((const uint8_t *)str, strlen(str)); }
    1876:	a802      	add	r0, sp, #8
    1878:	3330      	adds	r3, #48	; 0x30
    187a:	446b      	add	r3, sp
    187c:	f803 2c28 	strb.w	r2, [r3, #-40]
    1880:	f00b fafe 	bl	ce80 <strlen>
    1884:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1886:	a802      	add	r0, sp, #8
    1888:	f008 fce4 	bl	a254 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    188c:	4805      	ldr	r0, [pc, #20]	; (18a4 <menuGetInt16(short*) [clone .isra.0]+0x4c>)
    188e:	f006 f983 	bl	7b98 <Print::println()>
  Serial.println(buffer);
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1892:	aa01      	add	r2, sp, #4
    1894:	4904      	ldr	r1, [pc, #16]	; (18a8 <menuGetInt16(short*) [clone .isra.0]+0x50>)
    1896:	a802      	add	r0, sp, #8
    1898:	f00a fe2a 	bl	c4f0 <sscanf>
    189c:	9b01      	ldr	r3, [sp, #4]
    189e:	8023      	strh	r3, [r4, #0]
  return 1;
}
    18a0:	b00c      	add	sp, #48	; 0x30
    18a2:	bd10      	pop	{r4, pc}
    18a4:	2000886c 	.word	0x2000886c
    18a8:	20000734 	.word	0x20000734

000018ac <menuGet3Int(int*, int*, int*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
  return 1;
}

static int menuGet3Int(int *val1, int *val2, int *val3)
    18ac:	b570      	push	{r4, r5, r6, lr}
    18ae:	4606      	mov	r6, r0
    18b0:	b090      	sub	sp, #64	; 0x40
    18b2:	460c      	mov	r4, r1
    18b4:	4615      	mov	r5, r2
        virtual int available() { return usb_serial_available(); }
    18b6:	f008 fc63 	bl	a180 <usb_serial_available>
{ char buffer[40];
  while(!Serial.available()) continue;
    18ba:	2800      	cmp	r0, #0
    18bc:	d0fb      	beq.n	18b6 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0xa>
  int count = Serial.readBytesUntil('\r',buffer,40);
    18be:	aa06      	add	r2, sp, #24
    18c0:	210d      	movs	r1, #13
    18c2:	2328      	movs	r3, #40	; 0x28
    18c4:	4810      	ldr	r0, [pc, #64]	; (1908 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    18c6:	f006 fa5d 	bl	7d84 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    18ca:	f100 0340 	add.w	r3, r0, #64	; 0x40
    18ce:	eb0d 0003 	add.w	r0, sp, r3
    18d2:	2300      	movs	r3, #0
    18d4:	f800 3c28 	strb.w	r3, [r0, #-40]
							  return write((const uint8_t *)str, strlen(str)); }
    18d8:	a806      	add	r0, sp, #24
    18da:	f00b fad1 	bl	ce80 <strlen>
    18de:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    18e0:	a806      	add	r0, sp, #24
    18e2:	f008 fcb7 	bl	a254 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    18e6:	4808      	ldr	r0, [pc, #32]	; (1908 <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x5c>)
    18e8:	f006 f956 	bl	7b98 <Print::println()>
  Serial.println(buffer);
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    18ec:	f10d 0317 	add.w	r3, sp, #23
    18f0:	4632      	mov	r2, r6
    18f2:	4906      	ldr	r1, [pc, #24]	; (190c <menuGet3Int(int*, int*, int*) [clone .isra.0]+0x60>)
    18f4:	a806      	add	r0, sp, #24
    18f6:	9400      	str	r4, [sp, #0]
    18f8:	e9cd 3501 	strd	r3, r5, [sp, #4]
    18fc:	f10d 0316 	add.w	r3, sp, #22
    1900:	f00a fdf6 	bl	c4f0 <sscanf>
}
    1904:	b010      	add	sp, #64	; 0x40
    1906:	bd70      	pop	{r4, r5, r6, pc}
    1908:	2000886c 	.word	0x2000886c
    190c:	2000072c 	.word	0x2000072c

00001910 <menu1()>:

void menu1(void)
{   // have ':'
    1910:	b508      	push	{r3, lr}
        virtual int available() { return usb_serial_available(); }
    1912:	f008 fc35 	bl	a180 <usb_serial_available>
    while(!Serial.available()) ;
    1916:	2800      	cmp	r0, #0
    1918:	d0fb      	beq.n	1912 <menu1()+0x2>
    char ch=Serial.read();
    if(ch=='x') return;
}
    191a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        virtual int read() { return usb_serial_getchar(); }
    191e:	f008 bc73 	b.w	a208 <usb_serial_getchar>
    1922:	bf00      	nop

00001924 <menu2()>:

void menu2(void)
{   // have '?'
    1924:	b510      	push	{r4, lr}
    1926:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    1928:	f008 fc2a 	bl	a180 <usb_serial_available>
    datetime_t t;

    while(!Serial.available()) ;
    192c:	2800      	cmp	r0, #0
    192e:	d0fb      	beq.n	1928 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1930:	f008 fc6a 	bl	a208 <usb_serial_getchar>
    char ch=Serial.read();
    1934:	b2c0      	uxtb	r0, r0
    if(ch=='p') // get parameters
    1936:	2870      	cmp	r0, #112	; 0x70
    1938:	d017      	beq.n	196a <menu2()+0x46>
                   t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw);
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
      Serial.print("shift (s) = "); Serial.println(shift);
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    if(ch=='d') // get date
    193a:	2864      	cmp	r0, #100	; 0x64
    193c:	d056      	beq.n	19ec <menu2()+0xc8>
    {
      rtc_get_datetime(&t);
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    }
    else if(ch=='t') // get time
    193e:	3863      	subs	r0, #99	; 0x63
    1940:	2811      	cmp	r0, #17
    1942:	d80c      	bhi.n	195e <menu2()+0x3a>
    1944:	e8df f000 	tbb	[pc, r0]
    1948:	700b0b44 	.word	0x700b0b44
    194c:	0b0b0b0b 	.word	0x0b0b0b0b
    1950:	0b0b0b0b 	.word	0x0b0b0b0b
    1954:	0b0b0b0b 	.word	0x0b0b0b0b
    1958:	617d      	.short	0x617d
    195a:	f008 fc55 	bl	a208 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    195e:	f008 fc0f 	bl	a180 <usb_serial_available>
    }
    else if(ch=='c')
    {
      Serial.print("proc  (c) = "); Serial.println(proc);
    }
    while(Serial.available()) ch=Serial.read();
    1962:	2800      	cmp	r0, #0
    1964:	d1f9      	bne.n	195a <menu2()+0x36>

}
    1966:	b008      	add	sp, #32
    1968:	bd10      	pop	{r4, pc}
      rtc_get_datetime(&t);
    196a:	a806      	add	r0, sp, #24
    196c:	f7ff ff38 	bl	17e0 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    1970:	f99d 201c 	ldrsb.w	r2, [sp, #28]
    1974:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    1978:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    197c:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    1980:	f99d 401e 	ldrsb.w	r4, [sp, #30]
    1984:	9000      	str	r0, [sp, #0]
    1986:	4832      	ldr	r0, [pc, #200]	; (1a50 <menu2()+0x12c>)
    1988:	e9cd 3203 	strd	r3, r2, [sp, #12]
    198c:	e9cd 1401 	strd	r1, r4, [sp, #4]
    1990:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1994:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    1998:	492e      	ldr	r1, [pc, #184]	; (1a54 <menu2()+0x130>)
    199a:	f006 f919 	bl	7bd0 <Print::printf(char const*, ...)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    199e:	210c      	movs	r1, #12
    19a0:	482d      	ldr	r0, [pc, #180]	; (1a58 <menu2()+0x134>)
    19a2:	f008 fc57 	bl	a254 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    19a6:	4b2d      	ldr	r3, [pc, #180]	; (1a5c <menu2()+0x138>)
	size_t println(long n)				{ return print(n) + println(); }
    19a8:	4829      	ldr	r0, [pc, #164]	; (1a50 <menu2()+0x12c>)
    19aa:	6819      	ldr	r1, [r3, #0]
    19ac:	f006 f8e8 	bl	7b80 <Print::print(long)>
    19b0:	4827      	ldr	r0, [pc, #156]	; (1a50 <menu2()+0x12c>)
    19b2:	f006 f8f1 	bl	7b98 <Print::println()>
    19b6:	210c      	movs	r1, #12
    19b8:	4829      	ldr	r0, [pc, #164]	; (1a60 <menu2()+0x13c>)
    19ba:	f008 fc4b 	bl	a254 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    19be:	4b29      	ldr	r3, [pc, #164]	; (1a64 <menu2()+0x140>)
	size_t print(int n)				{ return print((long)n); }
    19c0:	4823      	ldr	r0, [pc, #140]	; (1a50 <menu2()+0x12c>)
    19c2:	f9b3 1000 	ldrsh.w	r1, [r3]
    19c6:	f006 f8db 	bl	7b80 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    19ca:	4821      	ldr	r0, [pc, #132]	; (1a50 <menu2()+0x12c>)
    19cc:	f006 f8e4 	bl	7b98 <Print::println()>
    19d0:	210c      	movs	r1, #12
    19d2:	4825      	ldr	r0, [pc, #148]	; (1a68 <menu2()+0x144>)
    19d4:	f008 fc3e 	bl	a254 <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    19d8:	4b24      	ldr	r3, [pc, #144]	; (1a6c <menu2()+0x148>)
	size_t print(int n)				{ return print((long)n); }
    19da:	f9b3 1000 	ldrsh.w	r1, [r3]
    19de:	481c      	ldr	r0, [pc, #112]	; (1a50 <menu2()+0x12c>)
    19e0:	f006 f8ce 	bl	7b80 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    19e4:	481a      	ldr	r0, [pc, #104]	; (1a50 <menu2()+0x12c>)
    19e6:	f006 f8d7 	bl	7b98 <Print::println()>
    19ea:	e7b8      	b.n	195e <menu2()+0x3a>
      rtc_get_datetime(&t);
    19ec:	a806      	add	r0, sp, #24
    19ee:	f7ff fef7 	bl	17e0 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    19f2:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    19f6:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    19fa:	9000      	str	r0, [sp, #0]
    19fc:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1a00:	491b      	ldr	r1, [pc, #108]	; (1a70 <menu2()+0x14c>)
    1a02:	4813      	ldr	r0, [pc, #76]	; (1a50 <menu2()+0x12c>)
    1a04:	f006 f8e4 	bl	7bd0 <Print::printf(char const*, ...)>
    1a08:	e7a9      	b.n	195e <menu2()+0x3a>
      rtc_get_datetime(&t);
    1a0a:	a806      	add	r0, sp, #24
    1a0c:	f7ff fee8 	bl	17e0 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    1a10:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    1a14:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1a18:	9000      	str	r0, [sp, #0]
    1a1a:	f99d 201d 	ldrsb.w	r2, [sp, #29]
    1a1e:	4915      	ldr	r1, [pc, #84]	; (1a74 <menu2()+0x150>)
    1a20:	480b      	ldr	r0, [pc, #44]	; (1a50 <menu2()+0x12c>)
    1a22:	f006 f8d5 	bl	7bd0 <Print::printf(char const*, ...)>
    1a26:	e79a      	b.n	195e <menu2()+0x3a>
    1a28:	210c      	movs	r1, #12
    1a2a:	480b      	ldr	r0, [pc, #44]	; (1a58 <menu2()+0x134>)
    1a2c:	f008 fc12 	bl	a254 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    1a30:	4b0a      	ldr	r3, [pc, #40]	; (1a5c <menu2()+0x138>)
	size_t println(long n)				{ return print(n) + println(); }
    1a32:	4807      	ldr	r0, [pc, #28]	; (1a50 <menu2()+0x12c>)
    1a34:	6819      	ldr	r1, [r3, #0]
    1a36:	f006 f8a3 	bl	7b80 <Print::print(long)>
    1a3a:	4805      	ldr	r0, [pc, #20]	; (1a50 <menu2()+0x12c>)
    1a3c:	f006 f8ac 	bl	7b98 <Print::println()>
    1a40:	e78d      	b.n	195e <menu2()+0x3a>
    1a42:	210c      	movs	r1, #12
    1a44:	4806      	ldr	r0, [pc, #24]	; (1a60 <menu2()+0x13c>)
    1a46:	f008 fc05 	bl	a254 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    1a4a:	4b06      	ldr	r3, [pc, #24]	; (1a64 <menu2()+0x140>)
    1a4c:	e7c5      	b.n	19da <menu2()+0xb6>
    1a4e:	bf00      	nop
    1a50:	2000886c 	.word	0x2000886c
    1a54:	20000538 	.word	0x20000538
    1a58:	2000055c 	.word	0x2000055c
    1a5c:	20008e3c 	.word	0x20008e3c
    1a60:	2000056c 	.word	0x2000056c
    1a64:	20008e6c 	.word	0x20008e6c
    1a68:	2000057c 	.word	0x2000057c
    1a6c:	20008e6a 	.word	0x20008e6a
    1a70:	2000058c 	.word	0x2000058c
    1a74:	200005a8 	.word	0x200005a8

00001a78 <menu3()>:

void menu3(void)
{   // have '!'
    1a78:	b510      	push	{r4, lr}
    1a7a:	b08c      	sub	sp, #48	; 0x30
        virtual int available() { return usb_serial_available(); }
    1a7c:	f008 fb80 	bl	a180 <usb_serial_available>

    while(!Serial.available()) ;
    1a80:	2800      	cmp	r0, #0
    1a82:	d0fb      	beq.n	1a7c <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1a84:	f008 fbc0 	bl	a208 <usb_serial_getchar>
    char ch=Serial.read();
    1a88:	b2c0      	uxtb	r0, r0
    if(ch=='d') // set date
    1a8a:	2864      	cmp	r0, #100	; 0x64
    1a8c:	d00d      	beq.n	1aaa <menu3()+0x32>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    } 
    else if(ch=='t') // set time
    1a8e:	3863      	subs	r0, #99	; 0x63
    1a90:	2811      	cmp	r0, #17
    1a92:	d814      	bhi.n	1abe <menu3()+0x46>
    1a94:	e8df f000 	tbb	[pc, r0]
    1a98:	15131353 	.word	0x15131353
    1a9c:	13131313 	.word	0x13131313
    1aa0:	13131313 	.word	0x13131313
    1aa4:	13131313 	.word	0x13131313
    1aa8:	473c      	.short	0x473c
      menuGet3Int(&year,&month,&day);
    1aaa:	aa02      	add	r2, sp, #8
    1aac:	a901      	add	r1, sp, #4
    1aae:	4668      	mov	r0, sp
    1ab0:	f7ff fefc 	bl	18ac <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetDate(year,month,day);
    1ab4:	9800      	ldr	r0, [sp, #0]
    1ab6:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    1aba:	f7ff fe9d 	bl	17f8 <rtcSetDate(int, int, int)>
    }
    else if(ch=='c')
    {
      menuGetInt16(&proc);
    }
}
    1abe:	b00c      	add	sp, #48	; 0x30
    1ac0:	bd10      	pop	{r4, pc}
        virtual int available() { return usb_serial_available(); }
    1ac2:	f008 fb5d 	bl	a180 <usb_serial_available>
  while(!Serial.available()) continue;
    1ac6:	2800      	cmp	r0, #0
    1ac8:	d0fb      	beq.n	1ac2 <menu3()+0x4a>
  int count = Serial.readBytesUntil('\r',buffer,40);
    1aca:	210d      	movs	r1, #13
    1acc:	aa02      	add	r2, sp, #8
    1ace:	2328      	movs	r3, #40	; 0x28
    1ad0:	481e      	ldr	r0, [pc, #120]	; (1b4c <menu3()+0xd4>)
    1ad2:	f006 f957 	bl	7d84 <Stream::readBytesUntil(char, char*, unsigned int)>
    1ad6:	4603      	mov	r3, r0
  buffer[count]=0;
    1ad8:	2200      	movs	r2, #0
							  return write((const uint8_t *)str, strlen(str)); }
    1ada:	a802      	add	r0, sp, #8
    1adc:	3330      	adds	r3, #48	; 0x30
    1ade:	446b      	add	r3, sp
    1ae0:	f803 2c28 	strb.w	r2, [r3, #-40]
    1ae4:	f00b f9cc 	bl	ce80 <strlen>
    1ae8:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1aea:	a802      	add	r0, sp, #8
    1aec:	f008 fbb2 	bl	a254 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1af0:	4816      	ldr	r0, [pc, #88]	; (1b4c <menu3()+0xd4>)
    1af2:	f006 f851 	bl	7b98 <Print::println()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1af6:	aa01      	add	r2, sp, #4
    1af8:	4915      	ldr	r1, [pc, #84]	; (1b50 <menu3()+0xd8>)
    1afa:	a802      	add	r0, sp, #8
    1afc:	f00a fcf8 	bl	c4f0 <sscanf>
    1b00:	9801      	ldr	r0, [sp, #4]
    1b02:	4b14      	ldr	r3, [pc, #80]	; (1b54 <menu3()+0xdc>)
    1b04:	6018      	str	r0, [r3, #0]
}
    1b06:	b00c      	add	sp, #48	; 0x30
    1b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    1b0c:	f7fe bece 	b.w	8ac <acqModifyFrequency(unsigned long)>
      menuGetInt16(&shift); if(shift<0) shift=0;
    1b10:	4c11      	ldr	r4, [pc, #68]	; (1b58 <menu3()+0xe0>)
    1b12:	4620      	mov	r0, r4
    1b14:	f7ff fea0 	bl	1858 <menuGetInt16(short*) [clone .isra.0]>
    1b18:	f9b4 3000 	ldrsh.w	r3, [r4]
    1b1c:	2b00      	cmp	r3, #0
    1b1e:	dace      	bge.n	1abe <menu3()+0x46>
    1b20:	2300      	movs	r3, #0
    1b22:	8023      	strh	r3, [r4, #0]
    1b24:	e7cb      	b.n	1abe <menu3()+0x46>
      menuGet3Int(&hour,&minutes,&seconds);
    1b26:	aa02      	add	r2, sp, #8
    1b28:	a901      	add	r1, sp, #4
    1b2a:	4668      	mov	r0, sp
    1b2c:	f7ff febe 	bl	18ac <menuGet3Int(int*, int*, int*) [clone .isra.0]>
      rtcSetTime(hour,minutes,seconds);
    1b30:	9800      	ldr	r0, [sp, #0]
    1b32:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    1b36:	f7ff fe77 	bl	1828 <rtcSetTime(int, int, int)>
}
    1b3a:	b00c      	add	sp, #48	; 0x30
    1b3c:	bd10      	pop	{r4, pc}
      menuGetInt16(&proc);
    1b3e:	4807      	ldr	r0, [pc, #28]	; (1b5c <menu3()+0xe4>)
}
    1b40:	b00c      	add	sp, #48	; 0x30
    1b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      menuGetInt16(&proc);
    1b46:	f7ff be87 	b.w	1858 <menuGetInt16(short*) [clone .isra.0]>
    1b4a:	bf00      	nop
    1b4c:	2000886c 	.word	0x2000886c
    1b50:	20000734 	.word	0x20000734
    1b54:	20008e3c 	.word	0x20008e3c
    1b58:	20008e6c 	.word	0x20008e6c
    1b5c:	20008e6a 	.word	0x20008e6a

00001b60 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1b60:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    1b62:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1b66:	b084      	sub	sp, #16
    1b68:	468c      	mov	ip, r1
    1b6a:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    1b6c:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    1b6e:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    1b70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1b74:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    1b78:	ea4f 124c 	mov.w	r2, ip, lsl #5
    1b7c:	4629      	mov	r1, r5
    1b7e:	6a20      	ldr	r0, [r4, #32]
    1b80:	f001 f934 	bl	2dec <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    1b84:	2801      	cmp	r0, #1
    1b86:	d106      	bne.n	1b96 <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    1b88:	4632      	mov	r2, r6
    1b8a:	4629      	mov	r1, r5
    1b8c:	6a20      	ldr	r0, [r4, #32]
    1b8e:	f001 f911 	bl	2db4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    1b92:	b004      	add	sp, #16
    1b94:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    1b96:	2000      	movs	r0, #0
}
    1b98:	b004      	add	sp, #16
    1b9a:	bd70      	pop	{r4, r5, r6, pc}

00001b9c <ExFatFile::close()>:
bool ExFatFile::close() {
    1b9c:	b510      	push	{r4, lr}
    1b9e:	4604      	mov	r4, r0
  bool rtn = sync();
    1ba0:	f000 fcfa 	bl	2598 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    1ba4:	2300      	movs	r3, #0
    1ba6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    1baa:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    1bae:	bd10      	pop	{r4, pc}

00001bb0 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    1bb0:	b538      	push	{r3, r4, r5, lr}
    1bb2:	460d      	mov	r5, r1
  if (isOpen()) {
    1bb4:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    1bb8:	b109      	cbz	r1, 1bbe <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    1bba:	2000      	movs	r0, #0
}
    1bbc:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    1bbe:	2238      	movs	r2, #56	; 0x38
    1bc0:	4604      	mov	r4, r0
    1bc2:	f00a fe1b 	bl	c7fc <memset>
  m_flags = FILE_FLAG_READ;
    1bc6:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    1bc8:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    1bca:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    1bcc:	4618      	mov	r0, r3
    1bce:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    1bd2:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    1bd6:	bd38      	pop	{r3, r4, r5, pc}

00001bd8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    1bd8:	b4f0      	push	{r4, r5, r6, r7}
    1bda:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    1bdc:	7809      	ldrb	r1, [r1, #0]
    1bde:	2920      	cmp	r1, #32
    1be0:	d103      	bne.n	1bea <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    1be2:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1be6:	2c20      	cmp	r4, #32
    1be8:	d0fb      	beq.n	1be2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    1bea:	6015      	str	r5, [r2, #0]
  fname->end = path;
    1bec:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    1bee:	782c      	ldrb	r4, [r5, #0]
    1bf0:	2c2f      	cmp	r4, #47	; 0x2f
    1bf2:	d011      	beq.n	1c18 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1bf4:	b184      	cbz	r4, 1c18 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1bf6:	1c6e      	adds	r6, r5, #1
    1bf8:	2c3c      	cmp	r4, #60	; 0x3c
    1bfa:	4f1d      	ldr	r7, [pc, #116]	; (1c70 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    1bfc:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    1bfe:	d82a      	bhi.n	1c56 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    1c00:	2c21      	cmp	r4, #33	; 0x21
    1c02:	d812      	bhi.n	1c2a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    1c04:	f104 3cff 	add.w	ip, r4, #4294967295
    1c08:	f1bc 0f1e 	cmp.w	ip, #30
    1c0c:	d816      	bhi.n	1c3c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    1c0e:	2000      	movs	r0, #0
    1c10:	bcf0      	pop	{r4, r5, r6, r7}
    1c12:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    1c14:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    1c18:	2c20      	cmp	r4, #32
    1c1a:	d0fb      	beq.n	1c14 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    1c1c:	2c2f      	cmp	r4, #47	; 0x2f
    1c1e:	d0f9      	beq.n	1c14 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    1c20:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    1c22:	4611      	mov	r1, r2
}
    1c24:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    1c26:	f000 bfb3 	b.w	2b90 <ExFatFile::hashName(ExName_t*)>
    1c2a:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    1c2e:	fa5f fc8c 	uxtb.w	ip, ip
    1c32:	fa27 fc0c 	lsr.w	ip, r7, ip
    1c36:	f01c 0f01 	tst.w	ip, #1
    1c3a:	d1e8      	bne.n	1c0e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    1c3c:	2c2e      	cmp	r4, #46	; 0x2e
    1c3e:	d001      	beq.n	1c44 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1c40:	2c20      	cmp	r4, #32
    1c42:	d10d      	bne.n	1c60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    1c44:	f816 4b01 	ldrb.w	r4, [r6], #1
    1c48:	2c00      	cmp	r4, #0
    1c4a:	d0e5      	beq.n	1c18 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    1c4c:	2c2f      	cmp	r4, #47	; 0x2f
    1c4e:	d0e3      	beq.n	1c18 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    1c50:	2c3c      	cmp	r4, #60	; 0x3c
    1c52:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    1c54:	d9d4      	bls.n	1c00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    1c56:	2c5c      	cmp	r4, #92	; 0x5c
    1c58:	d0d9      	beq.n	1c0e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    1c5a:	d903      	bls.n	1c64 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    1c5c:	2c7c      	cmp	r4, #124	; 0x7c
    1c5e:	d0d6      	beq.n	1c0e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    1c60:	6096      	str	r6, [r2, #8]
    1c62:	e7ef      	b.n	1c44 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    1c64:	3c3e      	subs	r4, #62	; 0x3e
    1c66:	2c01      	cmp	r4, #1
    1c68:	d8fa      	bhi.n	1c60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    1c6a:	2000      	movs	r0, #0
    1c6c:	bcf0      	pop	{r4, r5, r6, r7}
    1c6e:	4770      	bx	lr
    1c70:	05002101 	.word	0x05002101

00001c74 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    1c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    1c78:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    1c7c:	b083      	sub	sp, #12
    1c7e:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    1c80:	07dc      	lsls	r4, r3, #31
    1c82:	d574      	bpl.n	1d6e <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    1c84:	0658      	lsls	r0, r3, #25
    1c86:	460f      	mov	r7, r1
    1c88:	4690      	mov	r8, r2
    1c8a:	f140 80b0 	bpl.w	1dee <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    1c8e:	e9d5 2300 	ldrd	r2, r3, [r5]
    1c92:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    1c96:	eb18 0402 	adds.w	r4, r8, r2
    1c9a:	f143 0300 	adc.w	r3, r3, #0
    1c9e:	42a1      	cmp	r1, r4
    1ca0:	eb70 0303 	sbcs.w	r3, r0, r3
    1ca4:	f0c0 80a9 	bcc.w	1dfa <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    1ca8:	f1b8 0f00 	cmp.w	r8, #0
    1cac:	d05b      	beq.n	1d66 <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    1cae:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1cb0:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    1cb4:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    1cb8:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1cbc:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    1cc0:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    1cc2:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    1cc6:	2c00      	cmp	r4, #0
    1cc8:	d170      	bne.n	1dac <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    1cca:	4313      	orrs	r3, r2
    1ccc:	d170      	bne.n	1db0 <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    1cce:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1cd2:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    1cd4:	bf4c      	ite	mi
    1cd6:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    1cda:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    1cdc:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    1cde:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    1ce2:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    1ce4:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    1ce8:	0a63      	lsrs	r3, r4, #9
    1cea:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    1cec:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    1cf0:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    1cf2:	f1bb 0f00 	cmp.w	fp, #0
    1cf6:	d145      	bne.n	1d84 <ExFatFile::read(void*, unsigned int)+0x110>
    1cf8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1cfc:	d342      	bcc.n	1d84 <ExFatFile::read(void*, unsigned int)+0x110>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    1cfe:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    1d02:	4291      	cmp	r1, r2
    1d04:	d03e      	beq.n	1d84 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    1d06:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    1d0a:	d358      	bcc.n	1dbe <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    1d0c:	f04f 0b01 	mov.w	fp, #1
    1d10:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    1d14:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    1d18:	0a73      	lsrs	r3, r6, #9
    1d1a:	459b      	cmp	fp, r3
    1d1c:	bf28      	it	cs
    1d1e:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    1d20:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    1d22:	ea4f 244b 	mov.w	r4, fp, lsl #9
    1d26:	d80a      	bhi.n	1d3e <ExFatFile::read(void*, unsigned int)+0xca>
    1d28:	eb01 030b 	add.w	r3, r1, fp
    1d2c:	429a      	cmp	r2, r3
    1d2e:	d206      	bcs.n	1d3e <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    1d30:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1d34:	9101      	str	r1, [sp, #4]
    1d36:	f004 ff79 	bl	6c2c <FsCache::sync()>
    1d3a:	9901      	ldr	r1, [sp, #4]
    1d3c:	b1b8      	cbz	r0, 1d6e <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    1d3e:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1d42:	465b      	mov	r3, fp
    1d44:	6802      	ldr	r2, [r0, #0]
    1d46:	f8d2 a014 	ldr.w	sl, [r2, #20]
    1d4a:	463a      	mov	r2, r7
    1d4c:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    1d4e:	b170      	cbz	r0, 1d6e <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    1d50:	4623      	mov	r3, r4
    dst += n;
    1d52:	4427      	add	r7, r4
    m_curPosition += n;
    1d54:	e9d5 1200 	ldrd	r1, r2, [r5]
    1d58:	185b      	adds	r3, r3, r1
    1d5a:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    1d5e:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    1d60:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    1d64:	d1a8      	bne.n	1cb8 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    1d66:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    1d68:	b003      	add	sp, #12
    1d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    1d6e:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    1d72:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    1d76:	f043 0302 	orr.w	r3, r3, #2
    1d7a:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    1d7e:	b003      	add	sp, #12
    1d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    1d84:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    1d88:	2200      	movs	r2, #0
    1d8a:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    1d8e:	42b4      	cmp	r4, r6
    1d90:	bf28      	it	cs
    1d92:	4634      	movcs	r4, r6
    1d94:	f004 ff76 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    1d98:	2800      	cmp	r0, #0
    1d9a:	d0e8      	beq.n	1d6e <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    1d9c:	eb00 010b 	add.w	r1, r0, fp
    1da0:	4622      	mov	r2, r4
    1da2:	4638      	mov	r0, r7
    1da4:	f006 fa92 	bl	82cc <memcpy>
    m_curPosition += n;
    1da8:	4623      	mov	r3, r4
    1daa:	e7d2      	b.n	1d52 <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    1dac:	69aa      	ldr	r2, [r5, #24]
    1dae:	e796      	b.n	1cde <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    1db0:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    1db4:	065b      	lsls	r3, r3, #25
    1db6:	d50e      	bpl.n	1dd6 <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    1db8:	69aa      	ldr	r2, [r5, #24]
    1dba:	3201      	adds	r2, #1
    1dbc:	e78e      	b.n	1cdc <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    1dbe:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    1dc2:	463a      	mov	r2, r7
    1dc4:	6803      	ldr	r3, [r0, #0]
    1dc6:	691b      	ldr	r3, [r3, #16]
    1dc8:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    1dca:	2800      	cmp	r0, #0
    1dcc:	d0cf      	beq.n	1d6e <ExFatFile::read(void*, unsigned int)+0xfa>
    1dce:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    1dd2:	461c      	mov	r4, r3
    1dd4:	e7bd      	b.n	1d52 <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1dd6:	464a      	mov	r2, r9
    1dd8:	4650      	mov	r0, sl
    1dda:	69a9      	ldr	r1, [r5, #24]
    1ddc:	f001 f848 	bl	2e70 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    1de0:	2800      	cmp	r0, #0
    1de2:	dbc4      	blt.n	1d6e <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    1de4:	d00c      	beq.n	1e00 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    1de6:	f8d5 a020 	ldr.w	sl, [r5, #32]
    1dea:	69aa      	ldr	r2, [r5, #24]
    1dec:	e777      	b.n	1cde <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    1dee:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1df2:	0719      	lsls	r1, r3, #28
    1df4:	f57f af58 	bpl.w	1ca8 <ExFatFile::read(void*, unsigned int)+0x34>
    1df8:	e749      	b.n	1c8e <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    1dfa:	eba1 0802 	sub.w	r8, r1, r2
    1dfe:	e753      	b.n	1ca8 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    1e00:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    1e04:	f013 0f50 	tst.w	r3, #80	; 0x50
    1e08:	d0b1      	beq.n	1d6e <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    1e0a:	eba8 0806 	sub.w	r8, r8, r6
    1e0e:	4640      	mov	r0, r8
    1e10:	e7aa      	b.n	1d68 <ExFatFile::read(void*, unsigned int)+0xf4>
    1e12:	bf00      	nop

00001e14 <ExFatFile::peek()>:
int ExFatFile::peek() {
    1e14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e16:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    1e18:	2201      	movs	r2, #1
    1e1a:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    1e1c:	6985      	ldr	r5, [r0, #24]
    1e1e:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    1e22:	e9d0 6700 	ldrd	r6, r7, [r0]
    1e26:	f7ff ff25 	bl	1c74 <ExFatFile::read(void*, unsigned int)>
    1e2a:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    1e2c:	61a5      	str	r5, [r4, #24]
    1e2e:	bf0c      	ite	eq
    1e30:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    1e34:	f04f 30ff 	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    1e38:	e9c4 6700 	strd	r6, r7, [r4]
}
    1e3c:	b003      	add	sp, #12
    1e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001e40 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    1e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e44:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    1e46:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    1e4a:	b083      	sub	sp, #12
    1e4c:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    1e4e:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    1e52:	2b00      	cmp	r3, #0
    1e54:	d051      	beq.n	1efa <ExFatFile::seekSet(unsigned long long)+0xba>
    1e56:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    1e58:	e9d0 1c00 	ldrd	r1, ip, [r0]
    1e5c:	45bc      	cmp	ip, r7
    1e5e:	bf08      	it	eq
    1e60:	4291      	cmpeq	r1, r2
    1e62:	d05c      	beq.n	1f1e <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    1e64:	ea56 0207 	orrs.w	r2, r6, r7
    1e68:	d04d      	beq.n	1f06 <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    1e6a:	071d      	lsls	r5, r3, #28
    1e6c:	d504      	bpl.n	1e78 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    1e6e:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    1e72:	42b0      	cmp	r0, r6
    1e74:	41ba      	sbcs	r2, r7
    1e76:	d340      	bcc.n	1efa <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    1e78:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    1e7c:	1e75      	subs	r5, r6, #1
    1e7e:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    1e82:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    1e84:	f147 30ff 	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    1e88:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    1e8c:	3209      	adds	r2, #9
    1e8e:	b2d2      	uxtb	r2, r2
    1e90:	f1c2 0e20 	rsb	lr, r2, #32
    1e94:	40d5      	lsrs	r5, r2
    1e96:	f1a2 0920 	sub.w	r9, r2, #32
    1e9a:	fa00 fb0e 	lsl.w	fp, r0, lr
    1e9e:	fa20 f009 	lsr.w	r0, r0, r9
    1ea2:	ea45 050b 	orr.w	r5, r5, fp
    1ea6:	4305      	orrs	r5, r0
  if (isContiguous()) {
    1ea8:	9801      	ldr	r0, [sp, #4]
    1eaa:	0640      	lsls	r0, r0, #25
    1eac:	d433      	bmi.n	1f16 <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    1eae:	1e48      	subs	r0, r1, #1
    1eb0:	fa20 f202 	lsr.w	r2, r0, r2
    1eb4:	f14c 30ff 	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    1eb8:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    1ebc:	fa00 fe0e 	lsl.w	lr, r0, lr
    1ec0:	fa20 f009 	lsr.w	r0, r0, r9
    1ec4:	ea42 020e 	orr.w	r2, r2, lr
    1ec8:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    1ecc:	d001      	beq.n	1ed2 <ExFatFile::seekSet(unsigned long long)+0x92>
    1ece:	4295      	cmp	r5, r2
    1ed0:	d229      	bcs.n	1f26 <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    1ed2:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    1ed4:	bf4c      	ite	mi
    1ed6:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    1eda:	69e3      	ldrpl	r3, [r4, #28]
    1edc:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    1ede:	f104 0918 	add.w	r9, r4, #24
    1ee2:	e006      	b.n	1ef2 <ExFatFile::seekSet(unsigned long long)+0xb2>
    1ee4:	69a1      	ldr	r1, [r4, #24]
    1ee6:	3d01      	subs	r5, #1
    1ee8:	6a20      	ldr	r0, [r4, #32]
    1eea:	f000 ffc1 	bl	2e70 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    1eee:	2800      	cmp	r0, #0
    1ef0:	dd03      	ble.n	1efa <ExFatFile::seekSet(unsigned long long)+0xba>
    1ef2:	464a      	mov	r2, r9
  while (nNew--) {
    1ef4:	2d00      	cmp	r5, #0
    1ef6:	d1f5      	bne.n	1ee4 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    1ef8:	e007      	b.n	1f0a <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    1efa:	2000      	movs	r0, #0
  m_curCluster = tmp;
    1efc:	f8c4 8018 	str.w	r8, [r4, #24]
}
    1f00:	b003      	add	sp, #12
    1f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    1f06:	2300      	movs	r3, #0
    1f08:	6183      	str	r3, [r0, #24]
  return true;
    1f0a:	2001      	movs	r0, #1
  m_curPosition = pos;
    1f0c:	e9c4 6700 	strd	r6, r7, [r4]
}
    1f10:	b003      	add	sp, #12
    1f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    1f16:	69e3      	ldr	r3, [r4, #28]
    1f18:	442b      	add	r3, r5
    1f1a:	61a3      	str	r3, [r4, #24]
    goto done;
    1f1c:	e7f5      	b.n	1f0a <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    1f1e:	2001      	movs	r0, #1
}
    1f20:	b003      	add	sp, #12
    1f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    1f26:	1aad      	subs	r5, r5, r2
    1f28:	e7d9      	b.n	1ede <ExFatFile::seekSet(unsigned long long)+0x9e>
    1f2a:	bf00      	nop

00001f2c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    1f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f30:	4617      	mov	r7, r2
    1f32:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    1f36:	b08f      	sub	sp, #60	; 0x3c
    1f38:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    1f3a:	2a00      	cmp	r2, #0
    1f3c:	f040 80d7 	bne.w	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    1f40:	468b      	mov	fp, r1
    1f42:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    1f46:	f011 0f50 	tst.w	r1, #80	; 0x50
    1f4a:	f000 80d0 	beq.w	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    1f4e:	f003 0103 	and.w	r1, r3, #3
    1f52:	469a      	mov	sl, r3
    1f54:	2903      	cmp	r1, #3
    1f56:	f000 80ca 	beq.w	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    1f5a:	3101      	adds	r1, #1
    1f5c:	f003 0008 	and.w	r0, r3, #8
    1f60:	ea41 0300 	orr.w	r3, r1, r0
    1f64:	9302      	str	r3, [sp, #8]
  if (fname) {
    1f66:	2f00      	cmp	r7, #0
    1f68:	f000 80cb 	beq.w	2102 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    1f6c:	6939      	ldr	r1, [r7, #16]
    1f6e:	f101 080e 	add.w	r8, r1, #14
    1f72:	49b6      	ldr	r1, [pc, #728]	; (224c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    1f74:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    1f78:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    1f7c:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    1f80:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    1f82:	f108 0802 	add.w	r8, r8, #2
    1f86:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    1f8a:	d005      	beq.n	1f98 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    1f8c:	2000      	movs	r0, #0
    1f8e:	2100      	movs	r1, #0
    m_curCluster = 0;
    1f90:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    1f94:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    1f98:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    1f9a:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    1f9c:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    1f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1fa2:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    1fa4:	2220      	movs	r2, #32
    1fa6:	a906      	add	r1, sp, #24
    1fa8:	4658      	mov	r0, fp
    1faa:	f7ff fe63 	bl	1c74 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    1fae:	b300      	cbz	r0, 1ff2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    1fb0:	2820      	cmp	r0, #32
    1fb2:	f040 809c 	bne.w	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    1fb6:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    1fba:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1fbe:	2a00      	cmp	r2, #0
    1fc0:	f2c0 80a2 	blt.w	2108 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    1fc4:	b934      	cbnz	r4, 1fd4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    1fc6:	f8db 2000 	ldr.w	r2, [fp]
    1fca:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    1fce:	f8db 2018 	ldr.w	r2, [fp, #24]
    1fd2:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    1fd4:	4544      	cmp	r4, r8
    1fd6:	d201      	bcs.n	1fdc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    1fd8:	3401      	adds	r4, #1
    1fda:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    1fdc:	2b00      	cmp	r3, #0
    1fde:	f000 8113 	beq.w	2208 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    1fe2:	2220      	movs	r2, #32
    1fe4:	a906      	add	r1, sp, #24
    1fe6:	4658      	mov	r0, fp
      inSet = false;
    1fe8:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    1fea:	f7ff fe43 	bl	1c74 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    1fee:	2800      	cmp	r0, #0
    1ff0:	d1de      	bne.n	1fb0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    1ff2:	f41a 7f00 	tst.w	sl, #512	; 0x200
    1ff6:	d07a      	beq.n	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    1ff8:	9b02      	ldr	r3, [sp, #8]
    1ffa:	079b      	lsls	r3, r3, #30
    1ffc:	d577      	bpl.n	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    1ffe:	2f00      	cmp	r7, #0
    2000:	d075      	beq.n	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    2002:	4544      	cmp	r4, r8
    2004:	d217      	bcs.n	2036 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    2006:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    200a:	2220      	movs	r2, #32
    200c:	a906      	add	r1, sp, #24
    200e:	4658      	mov	r0, fp
    2010:	f7ff fe30 	bl	1c74 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    2014:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    2016:	2800      	cmp	r0, #0
    2018:	d061      	beq.n	20de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    201a:	2820      	cmp	r0, #32
    201c:	d167      	bne.n	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    201e:	b92c      	cbnz	r4, 202c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    2020:	f8db 2000 	ldr.w	r2, [fp]
    2024:	f8db a018 	ldr.w	sl, [fp, #24]
    2028:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    202c:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    202e:	45a0      	cmp	r8, r4
    2030:	d8eb      	bhi.n	200a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    2032:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    2036:	2238      	movs	r2, #56	; 0x38
    2038:	2100      	movs	r1, #0
    203a:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    203c:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    2040:	f00a fbdc 	bl	c7fc <memset>
  ExFatVolume* volume() const {return m_vol;}
    2044:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    2048:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    204c:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    204e:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    2050:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    2052:	2600      	movs	r6, #0
  m_dirPos = freePos;
    2054:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    2058:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    205c:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    205e:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    2062:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    2064:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    2066:	f1b8 0f00 	cmp.w	r8, #0
    206a:	d033      	beq.n	20d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    206c:	f108 39ff 	add.w	r9, r8, #4294967295
    2070:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    2072:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 2250 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    2076:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    207a:	2201      	movs	r2, #1
    207c:	4659      	mov	r1, fp
    207e:	4628      	mov	r0, r5
    2080:	f7ff fd6e 	bl	1b60 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    2084:	4604      	mov	r4, r0
    2086:	b390      	cbz	r0, 20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    2088:	f990 2000 	ldrsb.w	r2, [r0]
    208c:	2a00      	cmp	r2, #0
    208e:	db2e      	blt.n	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    2090:	2220      	movs	r2, #32
    2092:	2100      	movs	r1, #0
    2094:	f00a fbb2 	bl	c7fc <memset>
    if (i == 0) {
    2098:	2e00      	cmp	r6, #0
    209a:	f000 80bc 	beq.w	2216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    209e:	f1bb 0f01 	cmp.w	fp, #1
    20a2:	f000 80d7 	beq.w	2254 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    20a6:	23c1      	movs	r3, #193	; 0xc1
    20a8:	46a3      	mov	fp, r4
    20aa:	341e      	adds	r4, #30
    20ac:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    20b0:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    20b2:	4638      	mov	r0, r7
    20b4:	b91b      	cbnz	r3, 20be <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    20b6:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    20ba:	429a      	cmp	r2, r3
    20bc:	d005      	beq.n	20ca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    20be:	f004 fe09 	bl	6cd4 <FsName::get16()>
  *reinterpret_cast<uint16_t*>(dst) = src;
    20c2:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    20c6:	45a3      	cmp	fp, r4
    20c8:	d1f2      	bne.n	20b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    20ca:	3601      	adds	r6, #1
    20cc:	fa5f fb86 	uxtb.w	fp, r6
    20d0:	45d8      	cmp	r8, fp
    20d2:	d8d2      	bhi.n	207a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    20d4:	4628      	mov	r0, r5
    20d6:	f000 fa5f 	bl	2598 <ExFatFile::sync()>
    20da:	4606      	mov	r6, r0
    20dc:	e00d      	b.n	20fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    20de:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    20e0:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    20e4:	f000 fa88 	bl	25f8 <ExFatFile::addDirCluster()>
    20e8:	2800      	cmp	r0, #0
    20ea:	f040 8091 	bne.w	2210 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    20ee:	2300      	movs	r3, #0
  return false;
    20f0:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    20f2:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    20f6:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    20fa:	4630      	mov	r0, r6
    20fc:	b00f      	add	sp, #60	; 0x3c
    20fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    2102:	f04f 0803 	mov.w	r8, #3
    2106:	e747      	b.n	1f98 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    2108:	bb56      	cbnz	r6, 2160 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    210a:	4544      	cmp	r4, r8
    210c:	bf38      	it	cc
    210e:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    2110:	2b85      	cmp	r3, #133	; 0x85
    2112:	f47f af47 	bne.w	1fa4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    2116:	4631      	mov	r1, r6
    2118:	2238      	movs	r2, #56	; 0x38
    211a:	4628      	mov	r0, r5
      inSet = true;
    211c:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    211e:	f00a fb6d 	bl	c7fc <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    2122:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    2126:	f89d 3019 	ldrb.w	r3, [sp, #25]
    212a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    212e:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    2132:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    2134:	bf58      	it	pl
    2136:	f043 0308 	orrpl.w	r3, r3, #8
    213a:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    213e:	f8db 3000 	ldr.w	r3, [fp]
    2142:	f8db 2020 	ldr.w	r2, [fp, #32]
    2146:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    2148:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    214a:	f8db 2018 	ldr.w	r2, [fp, #24]
    214e:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    2152:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    2156:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    215a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    215e:	e721      	b.n	1fa4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    2160:	2bc0      	cmp	r3, #192	; 0xc0
    2162:	d028      	beq.n	21b6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    2164:	2bc1      	cmp	r3, #193	; 0xc1
    2166:	f47f af3c 	bne.w	1fe2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    216a:	463a      	mov	r2, r7
    216c:	a906      	add	r1, sp, #24
    216e:	4628      	mov	r0, r5
    2170:	f000 fce8 	bl	2b44 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    2174:	b1e8      	cbz	r0, 21b2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    2176:	89bb      	ldrh	r3, [r7, #12]
    2178:	b9db      	cbnz	r3, 21b2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    217a:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    217e:	429a      	cmp	r2, r3
    2180:	d117      	bne.n	21b2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    2182:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    2186:	d1b2      	bne.n	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    2188:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    218c:	d170      	bne.n	2270 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    218e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    2192:	0798      	lsls	r0, r3, #30
    2194:	d46c      	bmi.n	2270 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    2196:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    219a:	d1a8      	bne.n	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    219c:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    21a0:	d0ab      	beq.n	20fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    21a2:	4628      	mov	r0, r5
    21a4:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    21a8:	f7ff fe4a 	bl	1e40 <ExFatFile::seekSet(unsigned long long)>
    21ac:	2800      	cmp	r0, #0
    21ae:	d1a4      	bne.n	20fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    21b0:	e79d      	b.n	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    21b2:	4606      	mov	r6, r0
    21b4:	e6f6      	b.n	1fa4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    21b6:	9b02      	ldr	r3, [sp, #8]
    21b8:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    21bc:	f89d 3019 	ldrb.w	r3, [sp, #25]
    21c0:	079b      	lsls	r3, r3, #30
    21c2:	d502      	bpl.n	21ca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    21c4:	9b03      	ldr	r3, [sp, #12]
    21c6:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    21ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    21cc:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    21ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    21d2:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    21d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    21da:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    21de:	2f00      	cmp	r7, #0
    21e0:	d0cf      	beq.n	2182 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    21e2:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    21e6:	693a      	ldr	r2, [r7, #16]
    21e8:	81bb      	strh	r3, [r7, #12]
    next = begin;
    21ea:	683b      	ldr	r3, [r7, #0]
    21ec:	607b      	str	r3, [r7, #4]
    21ee:	f89d 301b 	ldrb.w	r3, [sp, #27]
    21f2:	429a      	cmp	r2, r3
    21f4:	f47f aef5 	bne.w	1fe2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    21f8:	8abe      	ldrh	r6, [r7, #20]
    21fa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    21fe:	1af6      	subs	r6, r6, r3
    2200:	fab6 f686 	clz	r6, r6
    2204:	0976      	lsrs	r6, r6, #5
    2206:	e6cd      	b.n	1fa4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    2208:	2f00      	cmp	r7, #0
    220a:	f47f aef2 	bne.w	1ff2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    220e:	e76e      	b.n	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    2210:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    2214:	e70b      	b.n	202e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    2216:	2385      	movs	r3, #133	; 0x85
    2218:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    221a:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    221e:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    2222:	f8da 3000 	ldr.w	r3, [sl]
    2226:	2b00      	cmp	r3, #0
    2228:	d046      	beq.n	22b8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    222a:	f10d 0213 	add.w	r2, sp, #19
    222e:	f10d 0116 	add.w	r1, sp, #22
    2232:	a805      	add	r0, sp, #20
    2234:	4798      	blx	r3
    2236:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    223a:	8163      	strh	r3, [r4, #10]
    223c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    2240:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    2242:	f89d 3013 	ldrb.w	r3, [sp, #19]
    2246:	7523      	strb	r3, [r4, #20]
    2248:	e73f      	b.n	20ca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    224a:	bf00      	nop
    224c:	88888889 	.word	0x88888889
    2250:	2002109c 	.word	0x2002109c
      dirStream->type = EXFAT_TYPE_STREAM;
    2254:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    2256:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    225a:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    225c:	9b02      	ldr	r3, [sp, #8]
    225e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2262:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    2266:	693b      	ldr	r3, [r7, #16]
    2268:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    226a:	8abb      	ldrh	r3, [r7, #20]
    226c:	80a3      	strh	r3, [r4, #4]
}
    226e:	e72c      	b.n	20ca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    2270:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    2274:	06d9      	lsls	r1, r3, #27
    2276:	f53f af3a 	bmi.w	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    227a:	f013 0101 	ands.w	r1, r3, #1
    227e:	f47f af36 	bne.w	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    2282:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    2286:	d089      	beq.n	219c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    2288:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    228c:	0792      	lsls	r2, r2, #30
    228e:	f57f af2e 	bpl.w	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    2292:	2b00      	cmp	r3, #0
    2294:	f43f af2b 	beq.w	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    2298:	e9d5 3200 	ldrd	r3, r2, [r5]
    229c:	4313      	orrs	r3, r2
    229e:	d004      	beq.n	22aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    22a0:	2200      	movs	r2, #0
    22a2:	2300      	movs	r3, #0
    m_curCluster = 0;
    22a4:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    22a6:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    22aa:	4628      	mov	r0, r5
    22ac:	f000 fa98 	bl	27e0 <ExFatFile::truncate()>
    22b0:	2800      	cmp	r0, #0
    22b2:	f43f af1c 	beq.w	20ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    22b6:	e720      	b.n	20fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    22b8:	f245 6321 	movw	r3, #22049	; 0x5621
    22bc:	8163      	strh	r3, [r4, #10]
    22be:	81e3      	strh	r3, [r4, #14]
    22c0:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    22c2:	e702      	b.n	20ca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

000022c4 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    22c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    22c8:	2500      	movs	r5, #0
    22ca:	b097      	sub	sp, #92	; 0x5c
    22cc:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    22ce:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    22d2:	9201      	str	r2, [sp, #4]
    22d4:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    22d6:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    22da:	2b00      	cmp	r3, #0
    22dc:	d13e      	bne.n	235c <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    22de:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    22e2:	460f      	mov	r7, r1
    22e4:	f013 0f50 	tst.w	r3, #80	; 0x50
    22e8:	d038      	beq.n	235c <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    22ea:	7813      	ldrb	r3, [r2, #0]
    22ec:	4604      	mov	r4, r0
    22ee:	4616      	mov	r6, r2
    22f0:	2b2f      	cmp	r3, #47	; 0x2f
    22f2:	d037      	beq.n	2364 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    22f4:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    22f8:	ab01      	add	r3, sp, #4
    22fa:	aa02      	add	r2, sp, #8
    22fc:	4631      	mov	r1, r6
    22fe:	4620      	mov	r0, r4
    2300:	f7ff fc6a 	bl	1bd8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2304:	b350      	cbz	r0, 235c <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    2306:	9e01      	ldr	r6, [sp, #4]
    2308:	7833      	ldrb	r3, [r6, #0]
    230a:	2b00      	cmp	r3, #0
    230c:	d03e      	beq.n	238c <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    230e:	2300      	movs	r3, #0
    2310:	aa02      	add	r2, sp, #8
    2312:	4639      	mov	r1, r7
    2314:	4620      	mov	r0, r4
    2316:	f7ff fe09 	bl	1f2c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    231a:	b1f8      	cbz	r0, 235c <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    231c:	46a4      	mov	ip, r4
    231e:	ad08      	add	r5, sp, #32
    2320:	f104 0730 	add.w	r7, r4, #48	; 0x30
    2324:	f8dc 0000 	ldr.w	r0, [ip]
    2328:	f10c 0c10 	add.w	ip, ip, #16
    232c:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    2330:	46ae      	mov	lr, r5
    2332:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    2336:	3510      	adds	r5, #16
    2338:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    233c:	45bc      	cmp	ip, r7
    233e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2342:	d1ef      	bne.n	2324 <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    2344:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    2348:	af08      	add	r7, sp, #32
    tmpDir = *this;
    234a:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    234c:	4620      	mov	r0, r4
    234e:	f000 f923 	bl	2598 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    2352:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    2356:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    235a:	e7cd      	b.n	22f8 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    235c:	2000      	movs	r0, #0
}
    235e:	b017      	add	sp, #92	; 0x5c
    2360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    2364:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    2368:	292f      	cmp	r1, #47	; 0x2f
    236a:	d0fb      	beq.n	2364 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    236c:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    236e:	b9b1      	cbnz	r1, 239e <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    2370:	2238      	movs	r2, #56	; 0x38
    2372:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    2374:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    2376:	f00a fa41 	bl	c7fc <memset>
  m_flags = FILE_FLAG_READ;
    237a:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    237c:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    237e:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    2380:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    2382:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    2386:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    238a:	e7e8      	b.n	235e <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    238c:	464b      	mov	r3, r9
    238e:	aa02      	add	r2, sp, #8
    2390:	4639      	mov	r1, r7
    2392:	4620      	mov	r0, r4
    2394:	f7ff fdca 	bl	1f2c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    2398:	b017      	add	sp, #92	; 0x5c
    239a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    239e:	2238      	movs	r2, #56	; 0x38
    23a0:	2100      	movs	r1, #0
    23a2:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    23a4:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    23a6:	f00a fa29 	bl	c7fc <memset>
  m_flags = FILE_FLAG_READ;
    23aa:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    23ac:	af08      	add	r7, sp, #32
  m_vol = vol;
    23ae:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    23b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    23b4:	2340      	movs	r3, #64	; 0x40
    23b6:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    23ba:	e79b      	b.n	22f4 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

000023bc <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    23bc:	b119      	cbz	r1, 23c6 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    23be:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    23c2:	f7ff bf7f 	b.w	22c4 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    23c6:	4608      	mov	r0, r1
    23c8:	4770      	bx	lr
    23ca:	bf00      	nop

000023cc <ExFatFile::addCluster()>:
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    23cc:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    23ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23d0:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    23d2:	6a00      	ldr	r0, [r0, #32]
    23d4:	b101      	cbz	r1, 23d8 <ExFatFile::addCluster()+0xc>
    23d6:	3101      	adds	r1, #1
    23d8:	2201      	movs	r2, #1
    23da:	f000 fc0f 	bl	2bfc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    23de:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    23e0:	4605      	mov	r5, r0
  if (find < 2) {
    23e2:	d932      	bls.n	244a <ExFatFile::addCluster()+0x7e>
  if (!m_vol->bitmapModify(find, 1, 1)) {
    23e4:	2301      	movs	r3, #1
    23e6:	4601      	mov	r1, r0
    23e8:	6a20      	ldr	r0, [r4, #32]
    23ea:	461a      	mov	r2, r3
    23ec:	f000 fc66 	bl	2cbc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    23f0:	4606      	mov	r6, r0
    23f2:	b350      	cbz	r0, 244a <ExFatFile::addCluster()+0x7e>
  if (m_curCluster == 0) {
    23f4:	69a3      	ldr	r3, [r4, #24]
    23f6:	b35b      	cbz	r3, 2450 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    23f8:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  if (isContiguous()) {
    23fc:	0651      	lsls	r1, r2, #25
    23fe:	d512      	bpl.n	2426 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    2400:	1c59      	adds	r1, r3, #1
    2402:	42a9      	cmp	r1, r5
    2404:	d018      	beq.n	2438 <ExFatFile::addCluster()+0x6c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    2406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    240a:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    240c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2410:	e005      	b.n	241e <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    2412:	6a20      	ldr	r0, [r4, #32]
    2414:	f000 fd4e 	bl	2eb4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2418:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    241a:	b1b0      	cbz	r0, 244a <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    241c:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    241e:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2420:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    2422:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    2424:	d3f5      	bcc.n	2412 <ExFatFile::addCluster()+0x46>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    2426:	f04f 32ff 	mov.w	r2, #4294967295
    242a:	4629      	mov	r1, r5
    242c:	6a20      	ldr	r0, [r4, #32]
    242e:	f000 fd41 	bl	2eb4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2432:	b150      	cbz	r0, 244a <ExFatFile::addCluster()+0x7e>
  if (m_curCluster) {
    2434:	69a1      	ldr	r1, [r4, #24]
    2436:	b911      	cbnz	r1, 243e <ExFatFile::addCluster()+0x72>
}
    2438:	4630      	mov	r0, r6
  m_curCluster = find;
    243a:	61a5      	str	r5, [r4, #24]
}
    243c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    243e:	462a      	mov	r2, r5
    2440:	6a20      	ldr	r0, [r4, #32]
    2442:	f000 fd37 	bl	2eb4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2446:	2800      	cmp	r0, #0
    2448:	d1f6      	bne.n	2438 <ExFatFile::addCluster()+0x6c>
  return false;
    244a:	2600      	movs	r6, #0
}
    244c:	4630      	mov	r0, r6
    244e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    2450:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2458:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    245c:	e7ec      	b.n	2438 <ExFatFile::addCluster()+0x6c>
    245e:	bf00      	nop

00002460 <ExFatFile::syncDir()>:
bool ExFatFile::syncDir() {
    2460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2464:	f04f 0800 	mov.w	r8, #0
    2468:	b082      	sub	sp, #8
        if (FsDateTime::callback) {
    246a:	4f4a      	ldr	r7, [pc, #296]	; (2594 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    246c:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    246e:	4644      	mov	r4, r8
    2470:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    2472:	2200      	movs	r2, #0
    2474:	4630      	mov	r0, r6
    2476:	f7ff fb73 	bl	1b60 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    247a:	4605      	mov	r5, r0
    247c:	b130      	cbz	r0, 248c <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    247e:	7801      	ldrb	r1, [r0, #0]
    2480:	29c0      	cmp	r1, #192	; 0xc0
    2482:	d069      	beq.n	2558 <ExFatFile::syncDir()+0xf8>
    2484:	29c1      	cmp	r1, #193	; 0xc1
    2486:	d02b      	beq.n	24e0 <ExFatFile::syncDir()+0x80>
    2488:	2985      	cmp	r1, #133	; 0x85
    248a:	d009      	beq.n	24a0 <ExFatFile::syncDir()+0x40>
  m_error |= WRITE_ERROR;
    248c:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    2490:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2492:	f043 0301 	orr.w	r3, r3, #1
    2496:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    249a:	b002      	add	sp, #8
    249c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    24a0:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    24a4:	f003 0337 	and.w	r3, r3, #55	; 0x37
    24a8:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    24aa:	683b      	ldr	r3, [r7, #0]
    24ac:	b183      	cbz	r3, 24d0 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    24ae:	f10d 0203 	add.w	r2, sp, #3
    24b2:	f10d 0106 	add.w	r1, sp, #6
    24b6:	a801      	add	r0, sp, #4
    24b8:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    24ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    24be:	81ab      	strh	r3, [r5, #12]
    24c0:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    24c2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    24c6:	81eb      	strh	r3, [r5, #14]
    24c8:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    24ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
    24ce:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    24d0:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    24d2:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    24d6:	f043 0301 	orr.w	r3, r3, #1
    24da:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    24de:	7829      	ldrb	r1, [r5, #0]
    24e0:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    24e4:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    24e6:	fab0 f080 	clz	r0, r0
    24ea:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    24ec:	e001      	b.n	24f2 <ExFatFile::syncDir()+0x92>
    24ee:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    24f0:	5ca9      	ldrb	r1, [r5, r2]
    24f2:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    24f4:	2a01      	cmp	r2, #1
    24f6:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    24fa:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    24fe:	fa11 f383 	uxtah	r3, r1, r3
    2502:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    2504:	d101      	bne.n	250a <ExFatFile::syncDir()+0xaa>
    2506:	2800      	cmp	r0, #0
    2508:	d1f1      	bne.n	24ee <ExFatFile::syncDir()+0x8e>
    250a:	2a1f      	cmp	r2, #31
    250c:	d9f0      	bls.n	24f0 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    250e:	f108 0801 	add.w	r8, r8, #1
    2512:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    2516:	fa5f f188 	uxtb.w	r1, r8
    251a:	428b      	cmp	r3, r1
    251c:	d2a9      	bcs.n	2472 <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    251e:	2201      	movs	r2, #1
    2520:	f106 0124 	add.w	r1, r6, #36	; 0x24
    2524:	6a30      	ldr	r0, [r6, #32]
    2526:	f000 fc45 	bl	2db4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    252a:	2800      	cmp	r0, #0
    252c:	d0ae      	beq.n	248c <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    252e:	6a35      	ldr	r5, [r6, #32]
    2530:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2532:	4628      	mov	r0, r5
    2534:	f004 fb7a 	bl	6c2c <FsCache::sync()>
    2538:	2800      	cmp	r0, #0
    253a:	d0a7      	beq.n	248c <ExFatFile::syncDir()+0x2c>
    253c:	f505 7004 	add.w	r0, r5, #528	; 0x210
    2540:	f004 fb74 	bl	6c2c <FsCache::sync()>
    2544:	2800      	cmp	r0, #0
    2546:	d0a1      	beq.n	248c <ExFatFile::syncDir()+0x2c>
    2548:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    254c:	6803      	ldr	r3, [r0, #0]
    254e:	6a1b      	ldr	r3, [r3, #32]
    2550:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    2552:	2800      	cmp	r0, #0
    2554:	d1a1      	bne.n	249a <ExFatFile::syncDir()+0x3a>
    2556:	e799      	b.n	248c <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    2558:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    255c:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    2560:	7843      	ldrb	r3, [r0, #1]
    2562:	bf14      	ite	ne
    2564:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    2568:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    256c:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    256e:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    2572:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    2576:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    257a:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    257e:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    2580:	e9c5 0106 	strd	r0, r1, [r5, #24]
    2584:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    2588:	f043 0301 	orr.w	r3, r3, #1
    258c:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    2590:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    2592:	e7a5      	b.n	24e0 <ExFatFile::syncDir()+0x80>
    2594:	2002109c 	.word	0x2002109c

00002598 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    2598:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    259a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    259e:	b343      	cbz	r3, 25f2 <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    25a0:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    25a4:	4604      	mov	r4, r0
    25a6:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    25aa:	2a00      	cmp	r2, #0
    25ac:	db0c      	blt.n	25c8 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    25ae:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    25b0:	4628      	mov	r0, r5
    25b2:	f004 fb3b 	bl	6c2c <FsCache::sync()>
    25b6:	b978      	cbnz	r0, 25d8 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    25b8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    25bc:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    25be:	f043 0301 	orr.w	r3, r3, #1
    25c2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    25c6:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    25c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    25cc:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    25d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    25d4:	f7ff bf44 	b.w	2460 <ExFatFile::syncDir()>
    25d8:	f505 7004 	add.w	r0, r5, #528	; 0x210
    25dc:	f004 fb26 	bl	6c2c <FsCache::sync()>
    25e0:	2800      	cmp	r0, #0
    25e2:	d0e9      	beq.n	25b8 <ExFatFile::sync()+0x20>
    25e4:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    25e8:	6803      	ldr	r3, [r0, #0]
    25ea:	6a1b      	ldr	r3, [r3, #32]
    25ec:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    25ee:	2800      	cmp	r0, #0
    25f0:	d0e2      	beq.n	25b8 <ExFatFile::sync()+0x20>
    return true;
    25f2:	2001      	movs	r0, #1
}
    25f4:	bd38      	pop	{r3, r4, r5, pc}
    25f6:	bf00      	nop

000025f8 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    25f8:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    25fa:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    25fe:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    2600:	065a      	lsls	r2, r3, #25
    2602:	d44c      	bmi.n	269e <ExFatFile::addDirCluster()+0xa6>
    2604:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    2606:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    2608:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    260c:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    260e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    2612:	d301      	bcc.n	2618 <ExFatFile::addDirCluster()+0x20>
}
    2614:	2000      	movs	r0, #0
    2616:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    2618:	4628      	mov	r0, r5
    261a:	f7ff fed7 	bl	23cc <ExFatFile::addCluster()>
    261e:	2800      	cmp	r0, #0
    2620:	d0f8      	beq.n	2614 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    2622:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    2624:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    2626:	69ae      	ldr	r6, [r5, #24]
    2628:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    262c:	3e02      	subs	r6, #2
    262e:	409e      	lsls	r6, r3
    2630:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2634:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    2636:	1931      	adds	r1, r6, r4
    2638:	2205      	movs	r2, #5
    263a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    263e:	3401      	adds	r4, #1
    2640:	f004 fb20 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    2644:	f44f 7200 	mov.w	r2, #512	; 0x200
    2648:	2100      	movs	r1, #0
    if (!cache) {
    264a:	2800      	cmp	r0, #0
    264c:	d0e2      	beq.n	2614 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    264e:	f00a f8d5 	bl	c7fc <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    2652:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    2654:	2301      	movs	r3, #1
    2656:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    265a:	4093      	lsls	r3, r2
    265c:	429c      	cmp	r4, r3
    265e:	d3ea      	bcc.n	2636 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    2660:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    2664:	065b      	lsls	r3, r3, #25
    2666:	d415      	bmi.n	2694 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2668:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    266c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    2670:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2674:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    2678:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    267c:	189b      	adds	r3, r3, r2
    267e:	f141 0000 	adc.w	r0, r1, #0
    2682:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    2684:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    2688:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    268a:	189b      	adds	r3, r3, r2
    268c:	f141 0100 	adc.w	r1, r1, #0
    2690:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    2694:	4628      	mov	r0, r5
}
    2696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    269a:	f7ff bf7d 	b.w	2598 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    269e:	6a00      	ldr	r0, [r0, #32]
    26a0:	f000 fcf8 	bl	3094 <ExFatPartition::rootLength()>
    26a4:	e7af      	b.n	2606 <ExFatFile::addDirCluster()+0xe>
    26a6:	bf00      	nop

000026a8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    26a8:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    26aa:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    26ae:	f013 0f50 	tst.w	r3, #80	; 0x50
    26b2:	d102      	bne.n	26ba <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    26b4:	2500      	movs	r5, #0
}
    26b6:	4628      	mov	r0, r5
    26b8:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    26ba:	f640 2302 	movw	r3, #2562	; 0xa02
    26be:	4604      	mov	r4, r0
    26c0:	f7ff fc34 	bl	1f2c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    26c4:	2800      	cmp	r0, #0
    26c6:	d0f5      	beq.n	26b4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    26c8:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    26ca:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    26cc:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    26d0:	f7ff ff92 	bl	25f8 <ExFatFile::addDirCluster()>
    26d4:	4605      	mov	r5, r0
    26d6:	2800      	cmp	r0, #0
    26d8:	d0ec      	beq.n	26b4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    26da:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    26dc:	2200      	movs	r2, #0
    26de:	2300      	movs	r3, #0
    26e0:	4620      	mov	r0, r4
    26e2:	61e1      	str	r1, [r4, #28]
    26e4:	f7ff fbac 	bl	1e40 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    26e8:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    26ea:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    26ee:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    26f2:	2b00      	cmp	r3, #0
    26f4:	d0df      	beq.n	26b6 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    26f6:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    26f8:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    26fa:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    26fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    2702:	f7ff bead 	b.w	2460 <ExFatFile::syncDir()>
    2706:	bf00      	nop

00002708 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    2708:	b5f0      	push	{r4, r5, r6, r7, lr}
    270a:	2500      	movs	r5, #0
    270c:	b097      	sub	sp, #92	; 0x5c
    270e:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    2710:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    2714:	9201      	str	r2, [sp, #4]
    2716:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    271a:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    271c:	2b00      	cmp	r3, #0
    271e:	d146      	bne.n	27ae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    2720:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    2724:	460e      	mov	r6, r1
    2726:	f013 0f50 	tst.w	r3, #80	; 0x50
    272a:	d040      	beq.n	27ae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    272c:	7813      	ldrb	r3, [r2, #0]
    272e:	4604      	mov	r4, r0
    2730:	4611      	mov	r1, r2
    2732:	2b2f      	cmp	r3, #47	; 0x2f
    2734:	d03e      	beq.n	27b4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    2736:	ab01      	add	r3, sp, #4
    2738:	aa02      	add	r2, sp, #8
    273a:	4620      	mov	r0, r4
    273c:	f7ff fa4c 	bl	1bd8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2740:	2800      	cmp	r0, #0
    2742:	d034      	beq.n	27ae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    2744:	9b01      	ldr	r3, [sp, #4]
    2746:	781b      	ldrb	r3, [r3, #0]
    2748:	2b00      	cmp	r3, #0
    274a:	d041      	beq.n	27d0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    274c:	2300      	movs	r3, #0
    274e:	aa02      	add	r2, sp, #8
    2750:	4631      	mov	r1, r6
    2752:	4620      	mov	r0, r4
    2754:	f7ff fbea 	bl	1f2c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    2758:	b930      	cbnz	r0, 2768 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    275a:	b347      	cbz	r7, 27ae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    275c:	aa02      	add	r2, sp, #8
    275e:	4631      	mov	r1, r6
    2760:	4620      	mov	r0, r4
    2762:	f7ff ffa1 	bl	26a8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    2766:	b310      	cbz	r0, 27ae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    2768:	46a4      	mov	ip, r4
    276a:	ad08      	add	r5, sp, #32
    276c:	f104 0630 	add.w	r6, r4, #48	; 0x30
    2770:	f8dc 0000 	ldr.w	r0, [ip]
    2774:	f10c 0c10 	add.w	ip, ip, #16
    2778:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    277c:	46ae      	mov	lr, r5
    277e:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    2782:	3510      	adds	r5, #16
    2784:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    2788:	45b4      	cmp	ip, r6
    278a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    278e:	d1ef      	bne.n	2770 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    2790:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    2794:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    2796:	6028      	str	r0, [r5, #0]
    close();
    2798:	4620      	mov	r0, r4
    279a:	f7ff f9ff 	bl	1b9c <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    279e:	9901      	ldr	r1, [sp, #4]
    27a0:	ab01      	add	r3, sp, #4
    27a2:	aa02      	add	r2, sp, #8
    27a4:	4620      	mov	r0, r4
    27a6:	f7ff fa17 	bl	1bd8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    27aa:	2800      	cmp	r0, #0
    27ac:	d1ca      	bne.n	2744 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    27ae:	2000      	movs	r0, #0
}
    27b0:	b017      	add	sp, #92	; 0x5c
    27b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    27b4:	3101      	adds	r1, #1
    27b6:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    27b8:	780b      	ldrb	r3, [r1, #0]
    27ba:	2b2f      	cmp	r3, #47	; 0x2f
    27bc:	d0fa      	beq.n	27b4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    27be:	6a31      	ldr	r1, [r6, #32]
    27c0:	a808      	add	r0, sp, #32
    27c2:	f7ff f9f5 	bl	1bb0 <ExFatFile::openRoot(ExFatVolume*)>
    27c6:	2800      	cmp	r0, #0
    27c8:	d0f1      	beq.n	27ae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    27ca:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    27cc:	ae08      	add	r6, sp, #32
    27ce:	e7b2      	b.n	2736 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    27d0:	aa02      	add	r2, sp, #8
    27d2:	4631      	mov	r1, r6
    27d4:	4620      	mov	r0, r4
    27d6:	f7ff ff67 	bl	26a8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    27da:	b017      	add	sp, #92	; 0x5c
    27dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27de:	bf00      	nop

000027e0 <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    27e0:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    27e4:	079a      	lsls	r2, r3, #30
    27e6:	d562      	bpl.n	28ae <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    27e8:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    27ea:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    27ec:	b082      	sub	sp, #8
    27ee:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    27f0:	b3a5      	cbz	r5, 285c <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    27f2:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    27f6:	d034      	beq.n	2862 <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    27f8:	6a00      	ldr	r0, [r0, #32]
    27fa:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    27fc:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    2800:	3a01      	subs	r2, #1
    2802:	68e1      	ldr	r1, [r4, #12]
    2804:	f10c 0c09 	add.w	ip, ip, #9
    2808:	f141 31ff 	adc.w	r1, r1, #4294967295
    280c:	fa5f fc8c 	uxtb.w	ip, ip
    2810:	f1cc 0e20 	rsb	lr, ip, #32
    2814:	fa22 f20c 	lsr.w	r2, r2, ip
    2818:	f1ac 0c20 	sub.w	ip, ip, #32
    281c:	fa01 fe0e 	lsl.w	lr, r1, lr
    2820:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    2824:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2826:	ea42 020e 	orr.w	r2, r2, lr
    282a:	ea42 020c 	orr.w	r2, r2, ip
    282e:	3201      	adds	r2, #1
    if (m_curCluster) {
    2830:	b319      	cbz	r1, 287a <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    2832:	3d01      	subs	r5, #1
    2834:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    2836:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    2838:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    283a:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    283c:	bb72      	cbnz	r2, 289c <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    283e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    2842:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    2844:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2848:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    284c:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    2850:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    2854:	f7ff fea0 	bl	2598 <ExFatFile::sync()>

 fail:
  return false;
}
    2858:	b002      	add	sp, #8
    285a:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    285c:	2001      	movs	r0, #1
}
    285e:	b002      	add	sp, #8
    2860:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    2862:	6981      	ldr	r1, [r0, #24]
    2864:	b961      	cbnz	r1, 2880 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    2866:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    2868:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    286a:	4629      	mov	r1, r5
    286c:	6a20      	ldr	r0, [r4, #32]
    286e:	f000 fb41 	bl	2ef4 <ExFatPartition::freeChain(unsigned long)>
    2872:	b1c8      	cbz	r0, 28a8 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2874:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    2878:	e7e1      	b.n	283e <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    287a:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    287c:	61e1      	str	r1, [r4, #28]
    287e:	e7dd      	b.n	283c <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2880:	aa01      	add	r2, sp, #4
    2882:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    2884:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2886:	f000 faf3 	bl	2e70 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    288a:	2800      	cmp	r0, #0
    288c:	db0c      	blt.n	28a8 <ExFatFile::truncate()+0xc8>
      if (fg) {
    288e:	d110      	bne.n	28b2 <ExFatFile::truncate()+0xd2>
    if (toFree) {
    2890:	9d01      	ldr	r5, [sp, #4]
    2892:	2d00      	cmp	r5, #0
    2894:	d1e9      	bne.n	286a <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2896:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    289a:	e7d0      	b.n	283e <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    289c:	2300      	movs	r3, #0
    289e:	9901      	ldr	r1, [sp, #4]
    28a0:	f000 fa0c 	bl	2cbc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    28a4:	2800      	cmp	r0, #0
    28a6:	d1e5      	bne.n	2874 <ExFatFile::truncate()+0x94>
  return false;
    28a8:	2000      	movs	r0, #0
}
    28aa:	b002      	add	sp, #8
    28ac:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    28ae:	2000      	movs	r0, #0
}
    28b0:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    28b2:	f04f 32ff 	mov.w	r2, #4294967295
    28b6:	69a1      	ldr	r1, [r4, #24]
    28b8:	6a20      	ldr	r0, [r4, #32]
    28ba:	f000 fafb 	bl	2eb4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    28be:	2800      	cmp	r0, #0
    28c0:	d1e6      	bne.n	2890 <ExFatFile::truncate()+0xb0>
    28c2:	e7f1      	b.n	28a8 <ExFatFile::truncate()+0xc8>

000028c4 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    28c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    28c8:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    28cc:	b083      	sub	sp, #12
    28ce:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    28d0:	079d      	lsls	r5, r3, #30
    28d2:	f140 80a1 	bpl.w	2a18 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    28d6:	4691      	mov	r9, r2
    28d8:	071a      	lsls	r2, r3, #28
    28da:	460e      	mov	r6, r1
    28dc:	f100 8095 	bmi.w	2a0a <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    28e0:	f1b9 0f00 	cmp.w	r9, #0
    28e4:	f000 8128 	beq.w	2b38 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    28e8:	6823      	ldr	r3, [r4, #0]
    28ea:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    28ec:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    28ee:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    28f0:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    28f4:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    28f8:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    28fc:	f1b8 0f00 	cmp.w	r8, #0
    2900:	f040 8094 	bne.w	2a2c <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    2904:	2900      	cmp	r1, #0
    2906:	f000 80d4 	beq.w	2ab2 <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    290a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    290e:	065b      	lsls	r3, r3, #25
    2910:	f140 80ec 	bpl.w	2aec <ExFatFile::write(void const*, unsigned int)+0x228>
    2914:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    2918:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    291c:	f10c 0c09 	add.w	ip, ip, #9
    2920:	3b01      	subs	r3, #1
    2922:	fa5f fc8c 	uxtb.w	ip, ip
    2926:	f142 32ff 	adc.w	r2, r2, #4294967295
    292a:	f1cc 0e20 	rsb	lr, ip, #32
    292e:	fa23 f30c 	lsr.w	r3, r3, ip
    2932:	f1ac 0c20 	sub.w	ip, ip, #32
    2936:	fa02 fe0e 	lsl.w	lr, r2, lr
    293a:	fa22 fc0c 	lsr.w	ip, r2, ip
    293e:	69e2      	ldr	r2, [r4, #28]
    2940:	ea43 030e 	orr.w	r3, r3, lr
    2944:	ea43 030c 	orr.w	r3, r3, ip
    2948:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    294a:	4299      	cmp	r1, r3
    294c:	f080 80d5 	bcs.w	2afa <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    2950:	3101      	adds	r1, #1
    2952:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    2954:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2958:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    295a:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    295e:	4091      	lsls	r1, r2
    2960:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2962:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    2966:	f0c0 808a 	bcc.w	2a7e <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    296a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    296e:	f0c0 80a6 	bcc.w	2abe <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    2972:	2301      	movs	r3, #1
    2974:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    2976:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    2978:	eba3 0308 	sub.w	r3, r3, r8
    297c:	4293      	cmp	r3, r2
    297e:	bf28      	it	cs
    2980:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    2982:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    2986:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    2988:	ea4f 2843 	mov.w	r8, r3, lsl #9
    298c:	d309      	bcc.n	29a2 <ExFatFile::write(void const*, unsigned int)+0xde>
    298e:	185f      	adds	r7, r3, r1
    2990:	42ba      	cmp	r2, r7
    2992:	d206      	bcs.n	29a2 <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    2994:	2200      	movs	r2, #0
    2996:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    299a:	f04f 32ff 	mov.w	r2, #4294967295
    299e:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    29a2:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    29a6:	4632      	mov	r2, r6
    29a8:	6807      	ldr	r7, [r0, #0]
    29aa:	6abf      	ldr	r7, [r7, #40]	; 0x28
    29ac:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    29ae:	b398      	cbz	r0, 2a18 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    29b0:	4643      	mov	r3, r8
    src += n;
    29b2:	4446      	add	r6, r8
    toWrite -= n;
    29b4:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    29b8:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    29bc:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    29c0:	19db      	adds	r3, r3, r7
    29c2:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    29c6:	4298      	cmp	r0, r3
    29c8:	4191      	sbcs	r1, r2
    m_curPosition += n;
    29ca:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    29ce:	d207      	bcs.n	29e0 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    29d0:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    29d4:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    29d8:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    29dc:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    29e0:	2d00      	cmp	r5, #0
    29e2:	d183      	bne.n	28ec <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    29e4:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    29e8:	4298      	cmp	r0, r3
    29ea:	4191      	sbcs	r1, r2
    29ec:	f0c0 8096 	bcc.w	2b1c <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    29f0:	4b53      	ldr	r3, [pc, #332]	; (2b40 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    29f2:	681b      	ldr	r3, [r3, #0]
    29f4:	2b00      	cmp	r3, #0
    29f6:	f000 809d 	beq.w	2b34 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    29fa:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    29fe:	4648      	mov	r0, r9
    2a00:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2a04:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    2a08:	e00d      	b.n	2a26 <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    2a0a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    2a0e:	f7ff fa17 	bl	1e40 <ExFatFile::seekSet(unsigned long long)>
    2a12:	2800      	cmp	r0, #0
    2a14:	f47f af64 	bne.w	28e0 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    2a18:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    2a1c:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    2a1e:	f043 0301 	orr.w	r3, r3, #1
    2a22:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    2a26:	b003      	add	sp, #12
    2a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    2a2c:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    2a30:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    2a32:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    2a36:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    2a3a:	4091      	lsls	r1, r2
    2a3c:	4441      	add	r1, r8
    2a3e:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    2a40:	2f00      	cmp	r7, #0
    2a42:	d08e      	beq.n	2962 <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    2a44:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    2a48:	2201      	movs	r2, #1
    2a4a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2a4e:	45a8      	cmp	r8, r5
    2a50:	bf28      	it	cs
    2a52:	46a8      	movcs	r8, r5
    2a54:	f004 f916 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2a58:	2800      	cmp	r0, #0
    2a5a:	d0dd      	beq.n	2a18 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2a5c:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2a5e:	4447      	add	r7, r8
      memcpy(dst, src, n);
    2a60:	4642      	mov	r2, r8
    2a62:	4631      	mov	r1, r6
    2a64:	f005 fc32 	bl	82cc <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2a68:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    2a6c:	6a20      	ldr	r0, [r4, #32]
    2a6e:	d19f      	bne.n	29b0 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    2a70:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2a74:	f004 f8da 	bl	6c2c <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    2a78:	2800      	cmp	r0, #0
    2a7a:	d199      	bne.n	29b0 <ExFatFile::write(void const*, unsigned int)+0xec>
    2a7c:	e7cc      	b.n	2a18 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    2a7e:	6862      	ldr	r2, [r4, #4]
    2a80:	6963      	ldr	r3, [r4, #20]
    2a82:	9200      	str	r2, [sp, #0]
    2a84:	9301      	str	r3, [sp, #4]
    2a86:	6922      	ldr	r2, [r4, #16]
    2a88:	6823      	ldr	r3, [r4, #0]
    2a8a:	4293      	cmp	r3, r2
    2a8c:	e9dd 2300 	ldrd	r2, r3, [sp]
    2a90:	419a      	sbcs	r2, r3
    2a92:	d212      	bcs.n	2aba <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    2a94:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    2a96:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2a9a:	f004 f8f3 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    2a9e:	2800      	cmp	r0, #0
    2aa0:	d0ba      	beq.n	2a18 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    2aa2:	462a      	mov	r2, r5
    2aa4:	4631      	mov	r1, r6
    2aa6:	4438      	add	r0, r7
    m_curPosition += n;
    2aa8:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    2aaa:	f005 fc0f 	bl	82cc <memcpy>
    m_curPosition += n;
    2aae:	462b      	mov	r3, r5
    2ab0:	e77f      	b.n	29b2 <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    2ab2:	69e1      	ldr	r1, [r4, #28]
    2ab4:	b349      	cbz	r1, 2b0a <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    2ab6:	61a1      	str	r1, [r4, #24]
    2ab8:	e74c      	b.n	2954 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    2aba:	2205      	movs	r2, #5
    2abc:	e7eb      	b.n	2a96 <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    2abe:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    2ac2:	428b      	cmp	r3, r1
    2ac4:	d106      	bne.n	2ad4 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    2ac6:	2300      	movs	r3, #0
    2ac8:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2acc:	f04f 33ff 	mov.w	r3, #4294967295
    2ad0:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    2ad4:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    2ad8:	4632      	mov	r2, r6
    2ada:	6803      	ldr	r3, [r0, #0]
    2adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2ade:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    2ae0:	2800      	cmp	r0, #0
    2ae2:	d099      	beq.n	2a18 <ExFatFile::write(void const*, unsigned int)+0x154>
    2ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    2ae8:	4698      	mov	r8, r3
    2aea:	e762      	b.n	29b2 <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    2aec:	f104 0218 	add.w	r2, r4, #24
    2af0:	f000 f9be 	bl	2e70 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    2af4:	2800      	cmp	r0, #0
    2af6:	db8f      	blt.n	2a18 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    2af8:	d104      	bne.n	2b04 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    2afa:	4620      	mov	r0, r4
    2afc:	f7ff fc66 	bl	23cc <ExFatFile::addCluster()>
    2b00:	2800      	cmp	r0, #0
    2b02:	d089      	beq.n	2a18 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    2b04:	69a1      	ldr	r1, [r4, #24]
    2b06:	6a20      	ldr	r0, [r4, #32]
    2b08:	e724      	b.n	2954 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    2b0a:	4620      	mov	r0, r4
    2b0c:	f7ff fc5e 	bl	23cc <ExFatFile::addCluster()>
    2b10:	2800      	cmp	r0, #0
    2b12:	d081      	beq.n	2a18 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    2b14:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    2b16:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    2b18:	61e1      	str	r1, [r4, #28]
    2b1a:	e71b      	b.n	2954 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2b1c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    2b20:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    2b22:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2b26:	f061 037f 	orn	r3, r1, #127	; 0x7f
    2b2a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    2b2e:	b003      	add	sp, #12
    2b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2b34:	4648      	mov	r0, r9
    2b36:	e776      	b.n	2a26 <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    2b38:	e9d4 3200 	ldrd	r3, r2, [r4]
    2b3c:	e752      	b.n	29e4 <ExFatFile::write(void const*, unsigned int)+0x120>
    2b3e:	bf00      	nop
    2b40:	2002109c 	.word	0x2002109c

00002b44 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    2b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b48:	460c      	mov	r4, r1
    2b4a:	4615      	mov	r5, r2
    2b4c:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    2b50:	89ab      	ldrh	r3, [r5, #12]
    uint16_t cp = fname->get16();
    2b52:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    2b54:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    2b58:	b91b      	cbnz	r3, 2b62 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    2b5a:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    2b5e:	429a      	cmp	r2, r3
    2b60:	d00e      	beq.n	2b80 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    2b62:	f004 f8b7 	bl	6cd4 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    2b66:	f004 f927 	bl	6db8 <toUpcase(unsigned short)>
    2b6a:	4606      	mov	r6, r0
    2b6c:	4638      	mov	r0, r7
    2b6e:	f004 f923 	bl	6db8 <toUpcase(unsigned short)>
    2b72:	4286      	cmp	r6, r0
    2b74:	d109      	bne.n	2b8a <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    2b76:	4544      	cmp	r4, r8
    2b78:	d1ea      	bne.n	2b50 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    2b7a:	2001      	movs	r0, #1
}
    2b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    2b80:	fab7 f087 	clz	r0, r7
    2b84:	0940      	lsrs	r0, r0, #5
}
    2b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    2b8a:	2000      	movs	r0, #0
}
    2b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002b90 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    2b90:	b570      	push	{r4, r5, r6, lr}
    2b92:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    2b94:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    2b96:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    2b9a:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    2b9c:	4619      	mov	r1, r3
  uint16_t hash = 0;
    2b9e:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    2ba0:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    2ba2:	6123      	str	r3, [r4, #16]
    next = begin;
    2ba4:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    2ba6:	e017      	b.n	2bd8 <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    2ba8:	f004 f894 	bl	6cd4 <FsName::get16()>
    if (u == 0XFFFF) {
    2bac:	42a8      	cmp	r0, r5
    2bae:	d022      	beq.n	2bf6 <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    2bb0:	f004 f902 	bl	6db8 <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    2bb4:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    2bb6:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    2bb8:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    2bba:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    2bbc:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    2bc0:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    2bc2:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    2bc4:	fa52 f080 	uxtab	r0, r2, r0
    2bc8:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    2bca:	f3c0 004e 	ubfx	r0, r0, #1, #15
    2bce:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    2bd2:	fa16 f080 	uxtah	r0, r6, r0
    2bd6:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    2bd8:	4620      	mov	r0, r4
    2bda:	2900      	cmp	r1, #0
    2bdc:	d1e4      	bne.n	2ba8 <ExFatFile::hashName(ExName_t*)+0x18>
    2bde:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    2be2:	429a      	cmp	r2, r3
    2be4:	d1e0      	bne.n	2ba8 <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2be6:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    2be8:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2bea:	3801      	subs	r0, #1
    2bec:	28fe      	cmp	r0, #254	; 0xfe
    2bee:	bf8c      	ite	hi
    2bf0:	2000      	movhi	r0, #0
    2bf2:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    2bf4:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    2bf6:	2000      	movs	r0, #0
}
    2bf8:	bd70      	pop	{r4, r5, r6, pc}
    2bfa:	bf00      	nop

00002bfc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c00:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2c02:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2c04:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2c06:	2900      	cmp	r1, #0
    2c08:	d042      	beq.n	2c90 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    2c0a:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    2c0e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2c12:	4543      	cmp	r3, r8
    2c14:	d942      	bls.n	2c9c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    2c16:	f008 0307 	and.w	r3, r8, #7
    2c1a:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    2c1c:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    2c20:	409d      	lsls	r5, r3
    2c22:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    2c24:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    2c26:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    2c28:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    2c2c:	2200      	movs	r2, #0
    2c2e:	4638      	mov	r0, r7
    2c30:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    2c34:	f004 f826 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    2c38:	b1e8      	cbz	r0, 2c76 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    2c3a:	f10b 3bff 	add.w	fp, fp, #4294967295
    2c3e:	4483      	add	fp, r0
    2c40:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    2c44:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    2c48:	e00a      	b.n	2c60 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    2c4a:	454a      	cmp	r2, r9
    2c4c:	d02b      	beq.n	2ca6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    2c4e:	45a0      	cmp	r8, r4
    2c50:	d010      	beq.n	2c74 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    2c52:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    2c56:	42a5      	cmp	r5, r4
    2c58:	d914      	bls.n	2c84 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    2c5a:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    2c5e:	d00c      	beq.n	2c7a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    2c60:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    2c62:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    2c64:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    2c68:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    2c6c:	d0ed      	beq.n	2c4a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    2c6e:	45a0      	cmp	r8, r4
        endAlloc++;
    2c70:	4626      	mov	r6, r4
        if (endAlloc == start) {
    2c72:	d1ee      	bne.n	2c52 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    2c74:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    2c76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    2c7a:	4558      	cmp	r0, fp
      mask = 1;
    2c7c:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    2c80:	d1e0      	bne.n	2c44 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    2c82:	e001      	b.n	2c88 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    2c84:	2600      	movs	r6, #0
    2c86:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    2c88:	2501      	movs	r5, #1
    i = 0;
    2c8a:	f04f 0b00 	mov.w	fp, #0
    2c8e:	e7cb      	b.n	2c28 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2c90:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    2c94:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    2c98:	4543      	cmp	r3, r8
    2c9a:	d8bc      	bhi.n	2c16 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    2c9c:	f04f 0800 	mov.w	r8, #0
    2ca0:	2501      	movs	r5, #1
    start = 0;
    2ca2:	46c3      	mov	fp, r8
    2ca4:	e7be      	b.n	2c24 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    2ca6:	f1ba 0f00 	cmp.w	sl, #0
    2caa:	d104      	bne.n	2cb6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    2cac:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    2cb0:	bf08      	it	eq
    2cb2:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    2cb6:	1cb0      	adds	r0, r6, #2
}
    2cb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002cbc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    2cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2cc0:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    2cc2:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    2cc4:	4615      	mov	r5, r2
    2cc6:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    2cc8:	1883      	adds	r3, r0, r2
    2cca:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    2cce:	4293      	cmp	r3, r2
    2cd0:	d837      	bhi.n	2d42 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    2cd2:	bbce      	cbnz	r6, 2d48 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    2cd4:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    2cd8:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    2cda:	bf88      	it	hi
    2cdc:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    2ce0:	f000 0307 	and.w	r3, r0, #7
    2ce4:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    2ce6:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    2cea:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    2cee:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    2cf0:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    2cf4:	b2e4      	uxtb	r4, r4
    2cf6:	2201      	movs	r2, #1
    2cf8:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2cfa:	188f      	adds	r7, r1, r2
    2cfc:	f003 ffc2 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    2d00:	b1f8      	cbz	r0, 2d42 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    2d02:	f109 3eff 	add.w	lr, r9, #4294967295
    2d06:	4486      	add	lr, r0
    2d08:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    2d0c:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    2d10:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    2d14:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    2d18:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    2d1c:	bf14      	ite	ne
    2d1e:	2201      	movne	r2, #1
    2d20:	2200      	moveq	r2, #0
    2d22:	42b2      	cmp	r2, r6
    2d24:	d00d      	beq.n	2d42 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    2d26:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    2d28:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    2d2c:	d018      	beq.n	2d60 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    2d2e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2d32:	d1ed      	bne.n	2d10 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    2d34:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    2d36:	46a1      	mov	r9, r4
    2d38:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    2d3c:	d1e6      	bne.n	2d0c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    2d3e:	4639      	mov	r1, r7
    2d40:	e7d9      	b.n	2cf6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

 fail:
  return false;
    2d42:	2000      	movs	r0, #0
}
    2d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    2d48:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    2d4c:	428b      	cmp	r3, r1
    2d4e:	d9c7      	bls.n	2ce0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    2d50:	4281      	cmp	r1, r0
    2d52:	d3c5      	bcc.n	2ce0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    2d54:	4293      	cmp	r3, r2
    2d56:	bf28      	it	cs
    2d58:	2300      	movcs	r3, #0
    2d5a:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    2d5e:	e7bf      	b.n	2ce0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    2d60:	2001      	movs	r0, #1
}
    2d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2d66:	bf00      	nop

00002d68 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    2d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    2d6a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2d6e:	3301      	adds	r3, #1
    2d70:	428b      	cmp	r3, r1
    2d72:	d201      	bcs.n	2d78 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    2d74:	2000      	movs	r0, #0
}
    2d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d78:	4607      	mov	r7, r0
    2d7a:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    2d7c:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    2d80:	2500      	movs	r5, #0
    2d82:	e005      	b.n	2d90 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    2d84:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    2d88:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    2d8a:	3301      	adds	r3, #1
    2d8c:	42a3      	cmp	r3, r4
    2d8e:	d3f1      	bcc.n	2d74 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2d90:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    2d94:	2200      	movs	r2, #0
    2d96:	4630      	mov	r0, r6
    2d98:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2d9c:	f003 ff72 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2da0:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    2da2:	2800      	cmp	r0, #0
    2da4:	d0e6      	beq.n	2d74 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2da6:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    2daa:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    2dac:	1c63      	adds	r3, r4, #1
    2dae:	d1e9      	bne.n	2d84 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    2db0:	1c68      	adds	r0, r5, #1
}
    2db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002db4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    2db4:	b538      	push	{r3, r4, r5, lr}
    2db6:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    2db8:	680b      	ldr	r3, [r1, #0]
    2dba:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    2dbe:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    2dc2:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    2dc6:	3b02      	subs	r3, #2
    2dc8:	6865      	ldr	r5, [r4, #4]
    2dca:	fa03 f30c 	lsl.w	r3, r3, ip
    2dce:	4029      	ands	r1, r5
    2dd0:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    2dd4:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    2dd8:	4419      	add	r1, r3
    2dda:	f003 ff53 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    2dde:	b118      	cbz	r0, 2de8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    2de0:	6863      	ldr	r3, [r4, #4]
    2de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2de6:	4418      	add	r0, r3
}
    2de8:	bd38      	pop	{r3, r4, r5, pc}
    2dea:	bf00      	nop

00002dec <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    2dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2df0:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2df2:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    2df6:	6849      	ldr	r1, [r1, #4]
    2df8:	400b      	ands	r3, r1
  pos->position += offset;
    2dfa:	4411      	add	r1, r2
    2dfc:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2dfe:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2e00:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    2e04:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    2e08:	b2d2      	uxtb	r2, r2
    2e0a:	40d3      	lsrs	r3, r2
  while (tmp--) {
    2e0c:	b32b      	cbz	r3, 2e5a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    2e0e:	4680      	mov	r8, r0
    2e10:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    2e12:	f500 7904 	add.w	r9, r0, #528	; 0x210
    2e16:	e005      	b.n	2e24 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    2e18:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    2e1a:	3d01      	subs	r5, #1
      pos->cluster++;
    2e1c:	f103 0301 	add.w	r3, r3, #1
    2e20:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    2e22:	d31a      	bcc.n	2e5a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    2e24:	7a26      	ldrb	r6, [r4, #8]
    2e26:	2e00      	cmp	r6, #0
    2e28:	d1f6      	bne.n	2e18 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    2e2a:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    2e2e:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    2e30:	6827      	ldr	r7, [r4, #0]
    2e32:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    2e34:	3301      	adds	r3, #1
    2e36:	429f      	cmp	r7, r3
    2e38:	d812      	bhi.n	2e60 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2e3a:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    2e3e:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    2e42:	f003 ff1f 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2e46:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    2e48:	b150      	cbz	r0, 2e60 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2e4a:	f3c7 0708 	ubfx	r7, r7, #0, #9
    2e4e:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    2e50:	1c5a      	adds	r2, r3, #1
    2e52:	d009      	beq.n	2e68 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    2e54:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    2e56:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    2e58:	d2e4      	bcs.n	2e24 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    2e5a:	2001      	movs	r0, #1
}
    2e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    2e60:	f04f 30ff 	mov.w	r0, #4294967295
}
    2e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    2e68:	4630      	mov	r0, r6
}
    2e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e6e:	bf00      	nop

00002e70 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    2e70:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    2e72:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2e76:	3301      	adds	r3, #1
    2e78:	428b      	cmp	r3, r1
    2e7a:	d202      	bcs.n	2e82 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    2e7c:	f04f 30ff 	mov.w	r0, #4294967295
  return 1;
}
    2e80:	bd38      	pop	{r3, r4, r5, pc}
    2e82:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2e84:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    2e88:	4615      	mov	r5, r2
    2e8a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2e8e:	2200      	movs	r2, #0
    2e90:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2e94:	f003 fef6 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2e98:	2800      	cmp	r0, #0
    2e9a:	d0ef      	beq.n	2e7c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2e9c:	00a4      	lsls	r4, r4, #2
    2e9e:	f3c4 0408 	ubfx	r4, r4, #0, #9
    2ea2:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    2ea4:	1c5a      	adds	r2, r3, #1
    2ea6:	d002      	beq.n	2eae <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    2ea8:	2001      	movs	r0, #1
  *value = next;
    2eaa:	602b      	str	r3, [r5, #0]
}
    2eac:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    2eae:	2000      	movs	r0, #0
}
    2eb0:	bd38      	pop	{r3, r4, r5, pc}
    2eb2:	bf00      	nop

00002eb4 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2eb4:	2901      	cmp	r1, #1
    2eb6:	d91b      	bls.n	2ef0 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    2eb8:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2eba:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2ebe:	460c      	mov	r4, r1
    2ec0:	3301      	adds	r3, #1
    2ec2:	428b      	cmp	r3, r1
    2ec4:	d201      	bcs.n	2eca <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    2ec6:	2000      	movs	r0, #0
}
    2ec8:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2eca:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    2ece:	4615      	mov	r5, r2
    2ed0:	f500 7004 	add.w	r0, r0, #528	; 0x210
    2ed4:	2201      	movs	r2, #1
    2ed6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2eda:	f003 fed3 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2ede:	4603      	mov	r3, r0
    2ee0:	2800      	cmp	r0, #0
    2ee2:	d0f0      	beq.n	2ec6 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    2ee4:	00a4      	lsls	r4, r4, #2
  return true;
    2ee6:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    2ee8:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    2eec:	511d      	str	r5, [r3, r4]
}
    2eee:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    2ef0:	2000      	movs	r0, #0
}
    2ef2:	4770      	bx	lr

00002ef4 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    2ef4:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    2ef8:	3301      	adds	r3, #1
    2efa:	4299      	cmp	r1, r3
    2efc:	d901      	bls.n	2f02 <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

 fail:
  return false;
}
    2efe:	2000      	movs	r0, #0
    2f00:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    2f02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f06:	4605      	mov	r5, r0
    2f08:	b083      	sub	sp, #12
    2f0a:	460c      	mov	r4, r1
    2f0c:	f500 7904 	add.w	r9, r0, #528	; 0x210
    2f10:	460f      	mov	r7, r1
    2f12:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2f16:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    2f1a:	2200      	movs	r2, #0
    2f1c:	4648      	mov	r0, r9
    2f1e:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    2f22:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    2f26:	f003 fead 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2f2a:	b190      	cbz	r0, 2f52 <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2f2c:	00a3      	lsls	r3, r4, #2
    2f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    2f32:	58c2      	ldr	r2, [r0, r3]
    2f34:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    2f36:	1c53      	adds	r3, r2, #1
    2f38:	bf16      	itet	ne
    2f3a:	4616      	movne	r6, r2
    2f3c:	f04f 0a00 	moveq.w	sl, #0
    2f40:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2f44:	2c01      	cmp	r4, #1
    2f46:	d904      	bls.n	2f52 <ExFatPartition::freeChain(unsigned long)+0x5e>
    2f48:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    2f4c:	3201      	adds	r2, #1
    2f4e:	4294      	cmp	r4, r2
    2f50:	d903      	bls.n	2f5a <ExFatPartition::freeChain(unsigned long)+0x66>
}
    2f52:	2000      	movs	r0, #0
    2f54:	b003      	add	sp, #12
    2f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2f5a:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    2f5e:	2201      	movs	r2, #1
    2f60:	4648      	mov	r0, r9
    2f62:	4459      	add	r1, fp
    2f64:	f003 fe8e 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2f68:	2800      	cmp	r0, #0
    2f6a:	d0f2      	beq.n	2f52 <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    2f6c:	9b01      	ldr	r3, [sp, #4]
    2f6e:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    2f72:	f1ba 0f00 	cmp.w	sl, #0
    2f76:	d012      	beq.n	2f9e <ExFatPartition::freeChain(unsigned long)+0xaa>
    2f78:	3401      	adds	r4, #1
    2f7a:	42b4      	cmp	r4, r6
    2f7c:	d008      	beq.n	2f90 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2f7e:	2300      	movs	r3, #0
    2f80:	1be2      	subs	r2, r4, r7
    2f82:	4639      	mov	r1, r7
    2f84:	4628      	mov	r0, r5
    2f86:	f7ff fe99 	bl	2cbc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2f8a:	2800      	cmp	r0, #0
    2f8c:	d0e1      	beq.n	2f52 <ExFatPartition::freeChain(unsigned long)+0x5e>
    2f8e:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    2f90:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    2f94:	3301      	adds	r3, #1
    2f96:	42b3      	cmp	r3, r6
    2f98:	d3db      	bcc.n	2f52 <ExFatPartition::freeChain(unsigned long)+0x5e>
    2f9a:	4634      	mov	r4, r6
    2f9c:	e7bb      	b.n	2f16 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2f9e:	1c62      	adds	r2, r4, #1
    2fa0:	4653      	mov	r3, sl
    2fa2:	4639      	mov	r1, r7
    2fa4:	4628      	mov	r0, r5
    2fa6:	1bd2      	subs	r2, r2, r7
}
    2fa8:	b003      	add	sp, #12
    2faa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2fae:	f7ff be85 	b.w	2cbc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2fb2:	bf00      	nop

00002fb4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    2fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    2fb6:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    2fb8:	f04f 36ff 	mov.w	r6, #4294967295
    2fbc:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    2fc0:	4615      	mov	r5, r2
  m_blockDev = dev;
    2fc2:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    2fc6:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    2fc8:	6041      	str	r1, [r0, #4]
    2fca:	461a      	mov	r2, r3
    2fcc:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    2fd0:	4619      	mov	r1, r3
  m_fatType = 0;
    2fd2:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    2fd6:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    2fd8:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    2fda:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    2fde:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    2fe2:	4638      	mov	r0, r7
    2fe4:	f003 fe4e 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    2fe8:	2d04      	cmp	r5, #4
    2fea:	d80d      	bhi.n	3008 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    2fec:	4606      	mov	r6, r0
    2fee:	b158      	cbz	r0, 3008 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    2ff0:	b1bd      	cbz	r5, 3022 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    2ff2:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    2ff4:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    2ff8:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    2ffc:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    3000:	d102      	bne.n	3008 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    3002:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    3006:	b90b      	cbnz	r3, 300c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    3008:	2000      	movs	r0, #0
}
    300a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    300c:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    3010:	4638      	mov	r0, r7
    3012:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    3016:	4629      	mov	r1, r5
    3018:	f003 fe34 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    301c:	4606      	mov	r6, r0
    301e:	2800      	cmp	r0, #0
    3020:	d0f2      	beq.n	3008 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    3022:	2205      	movs	r2, #5
    3024:	491a      	ldr	r1, [pc, #104]	; (3090 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    3026:	1cf0      	adds	r0, r6, #3
    3028:	f009 fc3a 	bl	c8a0 <strncmp>
    302c:	2800      	cmp	r0, #0
    302e:	d1eb      	bne.n	3008 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    3030:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    3034:	2b09      	cmp	r3, #9
    3036:	d1e7      	bne.n	3008 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3038:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    303a:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    303c:	442b      	add	r3, r5
    303e:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    3042:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    3044:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3048:	6db3      	ldr	r3, [r6, #88]	; 0x58
    304a:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    304c:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    304e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    3052:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    3054:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    3058:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    305a:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    305e:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    3062:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    3066:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3068:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    306c:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3070:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    3074:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3076:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    307a:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    307e:	462a      	mov	r2, r5
    3080:	f7ff fdbc 	bl	2bfc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    3084:	2340      	movs	r3, #64	; 0x40
  return true;
    3086:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    3088:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    308c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    308e:	bf00      	nop
    3090:	20000818 	.word	0x20000818

00003094 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    3094:	b510      	push	{r4, lr}
    3096:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    3098:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    309c:	f7ff fe64 	bl	2d68 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    30a0:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    30a4:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    30a6:	b2db      	uxtb	r3, r3
}
    30a8:	4098      	lsls	r0, r3
    30aa:	bd10      	pop	{r4, pc}

000030ac <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    30ac:	b570      	push	{r4, r5, r6, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    30ae:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    30b2:	b08e      	sub	sp, #56	; 0x38
  ExFatFile() {}
    30b4:	2300      	movs	r3, #0
    30b6:	460a      	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    30b8:	4668      	mov	r0, sp
    30ba:	4621      	mov	r1, r4
    30bc:	930c      	str	r3, [sp, #48]	; 0x30
    30be:	f7ff f901 	bl	22c4 <ExFatFile::open(ExFatFile*, char const*, int)>
    30c2:	4605      	mov	r5, r0
    30c4:	b1d8      	cbz	r0, 30fe <ExFatVolume::chdir(char const*)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    30c6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    30ca:	f013 0350 	ands.w	r3, r3, #80	; 0x50
    30ce:	d019      	beq.n	3104 <ExFatVolume::chdir(char const*)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    30d0:	46ee      	mov	lr, sp
    30d2:	46a4      	mov	ip, r4
    30d4:	ae0c      	add	r6, sp, #48	; 0x30
    30d6:	4674      	mov	r4, lr
    30d8:	f10c 0c10 	add.w	ip, ip, #16
    30dc:	f10e 0e10 	add.w	lr, lr, #16
    30e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    30e2:	42b4      	cmp	r4, r6
    30e4:	f84c 0c10 	str.w	r0, [ip, #-16]
    30e8:	f84c 1c0c 	str.w	r1, [ip, #-12]
    30ec:	f84c 2c08 	str.w	r2, [ip, #-8]
    30f0:	f84c 3c04 	str.w	r3, [ip, #-4]
    30f4:	d1ef      	bne.n	30d6 <ExFatVolume::chdir(char const*)+0x2a>
    30f6:	f8de 0000 	ldr.w	r0, [lr]
    30fa:	f8cc 0000 	str.w	r0, [ip]
  return true;

 fail:
  return false;
}
    30fe:	4628      	mov	r0, r5
    3100:	b00e      	add	sp, #56	; 0x38
    3102:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    3104:	461d      	mov	r5, r3
}
    3106:	4628      	mov	r0, r5
    3108:	b00e      	add	sp, #56	; 0x38
    310a:	bd70      	pop	{r4, r5, r6, pc}

0000310c <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    310c:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    310e:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    3112:	b082      	sub	sp, #8
    3114:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    3116:	2b00      	cmp	r3, #0
    3118:	db0d      	blt.n	3136 <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    311a:	68a5      	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    311c:	f105 0028 	add.w	r0, r5, #40	; 0x28
    3120:	f003 fd84 	bl	6c2c <FsCache::sync()>
    3124:	2800      	cmp	r0, #0
    3126:	d13b      	bne.n	31a0 <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    3128:	7863      	ldrb	r3, [r4, #1]
  return false;
    312a:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    312c:	f043 0301 	orr.w	r3, r3, #1
    3130:	7063      	strb	r3, [r4, #1]
}
    3132:	b002      	add	sp, #8
    3134:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    3136:	6880      	ldr	r0, [r0, #8]
    3138:	2201      	movs	r2, #1
    313a:	69a1      	ldr	r1, [r4, #24]
    313c:	3028      	adds	r0, #40	; 0x28
    313e:	f003 fda1 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    3142:	2800      	cmp	r0, #0
    3144:	d0f0      	beq.n	3128 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    3146:	88a5      	ldrh	r5, [r4, #4]
    3148:	f005 050f 	and.w	r5, r5, #15
    314c:	016b      	lsls	r3, r5, #5
    314e:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    3152:	5cc3      	ldrb	r3, [r0, r3]
    3154:	2be5      	cmp	r3, #229	; 0xe5
    3156:	d0e7      	beq.n	3128 <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    3158:	7823      	ldrb	r3, [r4, #0]
    315a:	071b      	lsls	r3, r3, #28
    315c:	d501      	bpl.n	3162 <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    315e:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    3160:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    3162:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    3164:	4915      	ldr	r1, [pc, #84]	; (31bc <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    3166:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    3168:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    316a:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    316c:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    316e:	b166      	cbz	r6, 318a <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    3170:	f10d 0203 	add.w	r2, sp, #3
    3174:	f10d 0106 	add.w	r1, sp, #6
    3178:	a801      	add	r0, sp, #4
    317a:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    317c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    3180:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3184:	832b      	strh	r3, [r5, #24]
    3186:	826b      	strh	r3, [r5, #18]
    3188:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    318a:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    318c:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    318e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3192:	f105 0028 	add.w	r0, r5, #40	; 0x28
    3196:	70a3      	strb	r3, [r4, #2]
    3198:	f003 fd48 	bl	6c2c <FsCache::sync()>
    319c:	2800      	cmp	r0, #0
    319e:	d0c3      	beq.n	3128 <FatFile::sync() [clone .part.0]+0x1c>
    31a0:	f505 700e 	add.w	r0, r5, #568	; 0x238
    31a4:	f003 fd42 	bl	6c2c <FsCache::sync()>
    31a8:	2800      	cmp	r0, #0
    31aa:	d0bd      	beq.n	3128 <FatFile::sync() [clone .part.0]+0x1c>
    31ac:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    31ae:	6803      	ldr	r3, [r0, #0]
    31b0:	6a1b      	ldr	r3, [r3, #32]
    31b2:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    31b4:	2800      	cmp	r0, #0
    31b6:	d0b7      	beq.n	3128 <FatFile::sync() [clone .part.0]+0x1c>
    31b8:	e7bb      	b.n	3132 <FatFile::sync() [clone .part.0]+0x26>
    31ba:	bf00      	nop
    31bc:	2002109c 	.word	0x2002109c

000031c0 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    31c0:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    31c2:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    31c4:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    31c8:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    31ca:	6880      	ldr	r0, [r0, #8]
    31cc:	4629      	mov	r1, r5
    31ce:	f001 f9f3 	bl	45b8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    31d2:	b150      	cbz	r0, 31ea <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    31d4:	b155      	cbz	r5, 31ec <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    31d6:	6923      	ldr	r3, [r4, #16]
    31d8:	3501      	adds	r5, #1
    31da:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    31dc:	78a3      	ldrb	r3, [r4, #2]
    31de:	bf18      	it	ne
    31e0:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    31e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    31e8:	70a3      	strb	r3, [r4, #2]
}
    31ea:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    31ec:	78a3      	ldrb	r3, [r4, #2]
    31ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    31f2:	e7f7      	b.n	31e4 <FatFile::addCluster()+0x24>

000031f4 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    31f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    31f6:	7804      	ldrb	r4, [r0, #0]
    31f8:	f014 0420 	ands.w	r4, r4, #32
    31fc:	d104      	bne.n	3208 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    31fe:	4b1a      	ldr	r3, [pc, #104]	; (3268 <FatFile::addDirCluster()+0x74>)
    3200:	4605      	mov	r5, r0
    3202:	6942      	ldr	r2, [r0, #20]
    3204:	429a      	cmp	r2, r3
    3206:	d302      	bcc.n	320e <FatFile::addDirCluster()+0x1a>
  return false;
    3208:	2700      	movs	r7, #0
}
    320a:	4638      	mov	r0, r7
    320c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    320e:	f7ff ffd7 	bl	31c0 <FatFile::addCluster()>
    3212:	4607      	mov	r7, r0
    3214:	2800      	cmp	r0, #0
    3216:	d0f7      	beq.n	3208 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    3218:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    321a:	692e      	ldr	r6, [r5, #16]
    321c:	7982      	ldrb	r2, [r0, #6]
    321e:	3e02      	subs	r6, #2
    3220:	6941      	ldr	r1, [r0, #20]
    3222:	4096      	lsls	r6, r2
    3224:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    3226:	7901      	ldrb	r1, [r0, #4]
    3228:	b1a9      	cbz	r1, 3256 <FatFile::addDirCluster()+0x62>
    322a:	4621      	mov	r1, r4
    322c:	e006      	b.n	323c <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    322e:	f009 fae5 	bl	c7fc <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    3232:	68a8      	ldr	r0, [r5, #8]
    3234:	b2e1      	uxtb	r1, r4
    3236:	7902      	ldrb	r2, [r0, #4]
    3238:	428a      	cmp	r2, r1
    323a:	d90b      	bls.n	3254 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    323c:	4431      	add	r1, r6
    323e:	2205      	movs	r2, #5
    3240:	3028      	adds	r0, #40	; 0x28
    3242:	3401      	adds	r4, #1
    3244:	f003 fd1e 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    3248:	f44f 7200 	mov.w	r2, #512	; 0x200
    324c:	2100      	movs	r1, #0
    if (!pc) {
    324e:	2800      	cmp	r0, #0
    3250:	d1ed      	bne.n	322e <FatFile::addDirCluster()+0x3a>
    3252:	e7d9      	b.n	3208 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    3254:	7982      	ldrb	r2, [r0, #6]
    3256:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    325a:	6969      	ldr	r1, [r5, #20]
}
    325c:	4638      	mov	r0, r7
    325e:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    3260:	fa11 f383 	uxtah	r3, r1, r3
    3264:	616b      	str	r3, [r5, #20]
}
    3266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3268:	001ffe00 	.word	0x001ffe00

0000326c <FatFile::close()>:
bool FatFile::close() {
    326c:	b510      	push	{r4, lr}
  if (!isOpen()) {
    326e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    3270:	4604      	mov	r4, r0
  if (!isOpen()) {
    3272:	b12b      	cbz	r3, 3280 <FatFile::close()+0x14>
    3274:	f7ff ff4a 	bl	310c <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    3278:	2300      	movs	r3, #0
    327a:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    327c:	70a3      	strb	r3, [r4, #2]
}
    327e:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    3280:	2300      	movs	r3, #0
    return true;
    3282:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    3284:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3286:	70a3      	strb	r3, [r4, #2]
}
    3288:	bd10      	pop	{r4, pc}
    328a:	bf00      	nop

0000328c <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    328c:	780b      	ldrb	r3, [r1, #0]
    328e:	f013 0f70 	tst.w	r3, #112	; 0x70
    3292:	d101      	bne.n	3298 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    3294:	2000      	movs	r0, #0
    3296:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    3298:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    329a:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    329e:	b089      	sub	sp, #36	; 0x24
    32a0:	460d      	mov	r5, r1
    32a2:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    32a4:	f000 fe78 	bl	3f98 <FatFile::open(FatFile*, FatLfn_t*, int)>
    32a8:	b138      	cbz	r0, 32ba <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    32aa:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    32ac:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    32ae:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    32b0:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    32b2:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    32b4:	f7ff ff9e 	bl	31f4 <FatFile::addDirCluster()>
    32b8:	b910      	cbnz	r0, 32c0 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    32ba:	2000      	movs	r0, #0
    32bc:	b009      	add	sp, #36	; 0x24
    32be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    32c0:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    32c2:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    32c4:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    32c6:	b16b      	cbz	r3, 32e4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    32c8:	6963      	ldr	r3, [r4, #20]
    32ca:	b133      	cbz	r3, 32da <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    32cc:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    32ce:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    32d0:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    32d4:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    32d8:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    32da:	4620      	mov	r0, r4
    32dc:	f7ff ff16 	bl	310c <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    32e0:	2800      	cmp	r0, #0
    32e2:	d0ea      	beq.n	32ba <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    return m_cache.prepare(sector, options);
    32e4:	68a0      	ldr	r0, [r4, #8]
    32e6:	2201      	movs	r2, #1
    32e8:	69a1      	ldr	r1, [r4, #24]
    32ea:	3028      	adds	r0, #40	; 0x28
    32ec:	f003 fcca 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    32f0:	2800      	cmp	r0, #0
    32f2:	d0e2      	beq.n	32ba <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    32f4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    32f8:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    32fa:	f00c 0c0f 	and.w	ip, ip, #15
    32fe:	ea4f 134c 	mov.w	r3, ip, lsl #5
    3302:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    3306:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    330a:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    330c:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    330e:	6a23      	ldr	r3, [r4, #32]
    3310:	f897 e006 	ldrb.w	lr, [r7, #6]
    3314:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    3316:	f8dc 1004 	ldr.w	r1, [ip, #4]
    331a:	f8dc 2008 	ldr.w	r2, [ip, #8]
    331e:	f8dc 300c 	ldr.w	r3, [ip, #12]
    3322:	fa06 f60e 	lsl.w	r6, r6, lr
    3326:	46ee      	mov	lr, sp
    3328:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    332c:	f8dc 0010 	ldr.w	r0, [ip, #16]
    3330:	f8dc 1014 	ldr.w	r1, [ip, #20]
    3334:	f8dc 2018 	ldr.w	r2, [ip, #24]
    3338:	f8dc 301c 	ldr.w	r3, [ip, #28]
    333c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    3340:	697b      	ldr	r3, [r7, #20]
    3342:	f107 0028 	add.w	r0, r7, #40	; 0x28
    3346:	2201      	movs	r2, #1
    3348:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    334a:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    334e:	f8cd 3001 	str.w	r3, [sp, #1]
    3352:	f8cd 3005 	str.w	r3, [sp, #5]
    3356:	f8ad 3009 	strh.w	r3, [sp, #9]
    335a:	f003 fc93 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    335e:	4684      	mov	ip, r0
    3360:	2800      	cmp	r0, #0
    3362:	d0aa      	beq.n	32ba <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    3364:	272e      	movs	r7, #46	; 0x2e
    3366:	46ee      	mov	lr, sp
    3368:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    336c:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    336e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3372:	f8cc 0000 	str.w	r0, [ip]
    3376:	f8cc 1004 	str.w	r1, [ip, #4]
    337a:	f8cc 2008 	str.w	r2, [ip, #8]
    337e:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    3382:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    3386:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    338a:	f8cc 0010 	str.w	r0, [ip, #16]
    338e:	f8cc 1014 	str.w	r1, [ip, #20]
    3392:	f8cc 2018 	str.w	r2, [ip, #24]
    3396:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    339a:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    339c:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    339e:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    33a2:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    33a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    33a8:	f8cc 0020 	str.w	r0, [ip, #32]
    33ac:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    33b0:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    33b4:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    33b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    33ba:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    33be:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    33c2:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    33c6:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    33ca:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    33cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    33d0:	f003 fc2c 	bl	6c2c <FsCache::sync()>
    33d4:	2800      	cmp	r0, #0
    33d6:	f43f af70 	beq.w	32ba <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    33da:	f504 700e 	add.w	r0, r4, #568	; 0x238
    33de:	f003 fc25 	bl	6c2c <FsCache::sync()>
    33e2:	2800      	cmp	r0, #0
    33e4:	f43f af69 	beq.w	32ba <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    33e8:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    33ea:	6803      	ldr	r3, [r0, #0]
    33ec:	6a1b      	ldr	r3, [r3, #32]
}
    33ee:	b009      	add	sp, #36	; 0x24
    33f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    33f4:	4718      	bx	r3
    33f6:	bf00      	nop

000033f8 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    33f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
class FsName {
    33fc:	2600      	movs	r6, #0
    33fe:	b094      	sub	sp, #80	; 0x50
    3400:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    3402:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    3404:	9201      	str	r2, [sp, #4]
    3406:	f8ad 6014 	strh.w	r6, [sp, #20]
    340a:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    340c:	2b00      	cmp	r3, #0
    340e:	d141      	bne.n	3494 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    3410:	780b      	ldrb	r3, [r1, #0]
    3412:	460d      	mov	r5, r1
    3414:	f013 0f70 	tst.w	r3, #112	; 0x70
    3418:	d03c      	beq.n	3494 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    341a:	7813      	ldrb	r3, [r2, #0]
    341c:	4604      	mov	r4, r0
    341e:	4616      	mov	r6, r2
    3420:	2b2f      	cmp	r3, #47	; 0x2f
    3422:	d03b      	beq.n	349c <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    3424:	2700      	movs	r7, #0
    3426:	e028      	b.n	347a <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    3428:	9e01      	ldr	r6, [sp, #4]
    342a:	7836      	ldrb	r6, [r6, #0]
    342c:	2e00      	cmp	r6, #0
    342e:	d050      	beq.n	34d2 <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    3430:	f000 fdb2 	bl	3f98 <FatFile::open(FatFile*, FatLfn_t*, int)>
    3434:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    3436:	aa02      	add	r2, sp, #8
    3438:	4629      	mov	r1, r5
    343a:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    343c:	b92b      	cbnz	r3, 344a <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    343e:	f1b8 0f00 	cmp.w	r8, #0
    3442:	d027      	beq.n	3494 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    3444:	f7ff ff22 	bl	328c <FatFile::mkdir(FatFile*, FatLfn_t*)>
    3448:	b320      	cbz	r0, 3494 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    344a:	46a6      	mov	lr, r4
    344c:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    3450:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3454:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3458:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    345c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3460:	f8de 5000 	ldr.w	r5, [lr]
    3464:	4620      	mov	r0, r4
  if (!isOpen()) {
    3466:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    3468:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    346c:	b10b      	cbz	r3, 3472 <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    346e:	f7ff fe4d 	bl	310c <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    3472:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    3474:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    3476:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    3478:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    347a:	4631      	mov	r1, r6
    347c:	ab01      	add	r3, sp, #4
    347e:	aa02      	add	r2, sp, #8
    3480:	4620      	mov	r0, r4
    3482:	f000 fed5 	bl	4230 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    3486:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    3488:	aa02      	add	r2, sp, #8
    348a:	4629      	mov	r1, r5
    348c:	2300      	movs	r3, #0
    348e:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    3490:	2e00      	cmp	r6, #0
    3492:	d1c9      	bne.n	3428 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    3494:	2000      	movs	r0, #0
}
    3496:	b014      	add	sp, #80	; 0x50
    3498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    349c:	3601      	adds	r6, #1
    349e:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    34a0:	7833      	ldrb	r3, [r6, #0]
    34a2:	2b2f      	cmp	r3, #47	; 0x2f
    34a4:	d0fa      	beq.n	349c <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    34a6:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    34a8:	2224      	movs	r2, #36	; 0x24
    34aa:	2100      	movs	r1, #0
    34ac:	a80b      	add	r0, sp, #44	; 0x2c
    34ae:	f009 f9a5 	bl	c7fc <memset>
  m_vol = vol;
    34b2:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    34b4:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    34b6:	2b10      	cmp	r3, #16
    34b8:	d003      	beq.n	34c2 <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    34ba:	2b20      	cmp	r3, #32
    34bc:	d00f      	beq.n	34de <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    34be:	2b0c      	cmp	r3, #12
    34c0:	d1e8      	bne.n	3494 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    34c2:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    34c4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    34c8:	2301      	movs	r3, #1
    parent = &tmpDir;
    34ca:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    34cc:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    34d0:	e7a8      	b.n	3424 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    34d2:	aa02      	add	r2, sp, #8
    34d4:	f7ff feda 	bl	328c <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    34d8:	b014      	add	sp, #80	; 0x50
    34da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    34de:	2340      	movs	r3, #64	; 0x40
    34e0:	e7f0      	b.n	34c4 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    34e2:	bf00      	nop

000034e4 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    34e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34e8:	2500      	movs	r5, #0
    34ea:	b094      	sub	sp, #80	; 0x50
    34ec:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    34ee:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    34f0:	9201      	str	r2, [sp, #4]
    34f2:	9502      	str	r5, [sp, #8]
    34f4:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    34f8:	2b00      	cmp	r3, #0
    34fa:	d137      	bne.n	356c <FatFile::open(FatFile*, char const*, int)+0x88>
    34fc:	780b      	ldrb	r3, [r1, #0]
    34fe:	460e      	mov	r6, r1
    3500:	f013 0f70 	tst.w	r3, #112	; 0x70
    3504:	d032      	beq.n	356c <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    3506:	7813      	ldrb	r3, [r2, #0]
    3508:	4604      	mov	r4, r0
    350a:	4615      	mov	r5, r2
    350c:	2b2f      	cmp	r3, #47	; 0x2f
    350e:	d031      	beq.n	3574 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    3510:	2700      	movs	r7, #0
    3512:	e01e      	b.n	3552 <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    3514:	9d01      	ldr	r5, [sp, #4]
    3516:	782d      	ldrb	r5, [r5, #0]
    3518:	2d00      	cmp	r5, #0
    351a:	d040      	beq.n	359e <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    351c:	f000 fd3c 	bl	3f98 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    3520:	46a6      	mov	lr, r4
    3522:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    3526:	b308      	cbz	r0, 356c <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    3528:	4666      	mov	r6, ip
  if (!isOpen()) {
    352a:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    352c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3530:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3534:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3538:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    353c:	f8de 3000 	ldr.w	r3, [lr]
    3540:	4620      	mov	r0, r4
    3542:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    3546:	b10d      	cbz	r5, 354c <FatFile::open(FatFile*, char const*, int)+0x68>
    3548:	f7ff fde0 	bl	310c <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    354c:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    354e:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    3550:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    3552:	4629      	mov	r1, r5
    3554:	ab01      	add	r3, sp, #4
    3556:	aa0b      	add	r2, sp, #44	; 0x2c
    3558:	4620      	mov	r0, r4
    355a:	f000 fe69 	bl	4230 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    355e:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    3560:	aa0b      	add	r2, sp, #44	; 0x2c
    3562:	4631      	mov	r1, r6
    3564:	2300      	movs	r3, #0
    3566:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    3568:	2d00      	cmp	r5, #0
    356a:	d1d3      	bne.n	3514 <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    356c:	2000      	movs	r0, #0
}
    356e:	b014      	add	sp, #80	; 0x50
    3570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    3574:	3501      	adds	r5, #1
    3576:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    3578:	7829      	ldrb	r1, [r5, #0]
    357a:	292f      	cmp	r1, #47	; 0x2f
    357c:	d0fa      	beq.n	3574 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    357e:	b9a9      	cbnz	r1, 35ac <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    3580:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    3582:	2224      	movs	r2, #36	; 0x24
    3584:	4620      	mov	r0, r4
    3586:	f009 f939 	bl	c7fc <memset>
  m_vol = vol;
    358a:	60a5      	str	r5, [r4, #8]
    358c:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    358e:	2b10      	cmp	r3, #16
    3590:	d003      	beq.n	359a <FatFile::open(FatFile*, char const*, int)+0xb6>
    3592:	2b20      	cmp	r3, #32
    3594:	d022      	beq.n	35dc <FatFile::open(FatFile*, char const*, int)+0xf8>
    3596:	2b0c      	cmp	r3, #12
    3598:	d1e8      	bne.n	356c <FatFile::open(FatFile*, char const*, int)+0x88>
    359a:	2220      	movs	r2, #32
    359c:	e01f      	b.n	35de <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    359e:	4643      	mov	r3, r8
    35a0:	aa0b      	add	r2, sp, #44	; 0x2c
    35a2:	f000 fcf9 	bl	3f98 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    35a6:	b014      	add	sp, #80	; 0x50
    35a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    35ac:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    35ae:	2224      	movs	r2, #36	; 0x24
    35b0:	2100      	movs	r1, #0
    35b2:	a802      	add	r0, sp, #8
    35b4:	f009 f922 	bl	c7fc <memset>
  m_vol = vol;
    35b8:	9604      	str	r6, [sp, #16]
    35ba:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    35bc:	2b10      	cmp	r3, #16
    35be:	d003      	beq.n	35c8 <FatFile::open(FatFile*, char const*, int)+0xe4>
    35c0:	2b20      	cmp	r3, #32
    35c2:	d003      	beq.n	35cc <FatFile::open(FatFile*, char const*, int)+0xe8>
    35c4:	2b0c      	cmp	r3, #12
    35c6:	d1d1      	bne.n	356c <FatFile::open(FatFile*, char const*, int)+0x88>
    35c8:	2320      	movs	r3, #32
    35ca:	e000      	b.n	35ce <FatFile::open(FatFile*, char const*, int)+0xea>
    35cc:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    35ce:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    35d2:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    35d4:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    35d6:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    35da:	e799      	b.n	3510 <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    35dc:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    35de:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    35e0:	7022      	strb	r2, [r4, #0]
  return true;
    35e2:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    35e4:	70a3      	strb	r3, [r4, #2]
  return true;
    35e6:	e7c2      	b.n	356e <FatFile::open(FatFile*, char const*, int)+0x8a>

000035e8 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    35e8:	b119      	cbz	r1, 35f2 <FatFile::open(FatVolume*, char const*, int)+0xa>
    35ea:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    35ee:	f7ff bf79 	b.w	34e4 <FatFile::open(FatFile*, char const*, int)>
}
    35f2:	4608      	mov	r0, r1
    35f4:	4770      	bx	lr
    35f6:	bf00      	nop

000035f8 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    35f8:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    35fa:	7805      	ldrb	r5, [r0, #0]
    35fc:	b10d      	cbz	r5, 3602 <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    35fe:	2000      	movs	r0, #0
}
    3600:	bd70      	pop	{r4, r5, r6, pc}
    3602:	460e      	mov	r6, r1
    3604:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    3606:	2224      	movs	r2, #36	; 0x24
    3608:	4629      	mov	r1, r5
    360a:	f009 f8f7 	bl	c7fc <memset>
  m_vol = vol;
    360e:	60a6      	str	r6, [r4, #8]
    3610:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    3612:	2b10      	cmp	r3, #16
    3614:	d00b      	beq.n	362e <FatFile::openRoot(FatVolume*)+0x36>
    3616:	2b20      	cmp	r3, #32
    3618:	d003      	beq.n	3622 <FatFile::openRoot(FatVolume*)+0x2a>
    361a:	2b0c      	cmp	r3, #12
    361c:	d007      	beq.n	362e <FatFile::openRoot(FatVolume*)+0x36>
    361e:	4628      	mov	r0, r5
}
    3620:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    3622:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    3624:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    3626:	7022      	strb	r2, [r4, #0]
  return true;
    3628:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    362a:	70a3      	strb	r3, [r4, #2]
}
    362c:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    362e:	2220      	movs	r2, #32
    3630:	e7f8      	b.n	3624 <FatFile::openRoot(FatVolume*)+0x2c>
    3632:	bf00      	nop

00003634 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    3634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3638:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const {return m_lfnOrd;}
  /** \return True if this is an open file/directory. */
  bool isOpen() const {return m_attributes;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    363c:	7883      	ldrb	r3, [r0, #2]
    363e:	b083      	sub	sp, #12
    3640:	4605      	mov	r5, r0
  if (!isReadable()) {
    3642:	07df      	lsls	r7, r3, #31
    3644:	f140 808c 	bpl.w	3760 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    3648:	4688      	mov	r8, r1
    364a:	7801      	ldrb	r1, [r0, #0]
    364c:	4692      	mov	sl, r2
  if (isFile()) {
    364e:	070e      	lsls	r6, r1, #28
    3650:	f100 8091 	bmi.w	3776 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    3654:	068c      	lsls	r4, r1, #26
    3656:	d508      	bpl.n	366a <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    3658:	6883      	ldr	r3, [r0, #8]
    365a:	895a      	ldrh	r2, [r3, #10]
    365c:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    365e:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    3662:	b29b      	uxth	r3, r3
    3664:	459a      	cmp	sl, r3
    3666:	bf28      	it	cs
    3668:	469a      	movcs	sl, r3
  while (toRead) {
    366a:	f1ba 0f00 	cmp.w	sl, #0
    366e:	f000 80af 	beq.w	37d0 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    3672:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3674:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    3678:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    367a:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    367c:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3680:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    3684:	68af      	ldr	r7, [r5, #8]
    3686:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    368a:	d53d      	bpl.n	3708 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    368c:	6a39      	ldr	r1, [r7, #32]
    368e:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    3692:	f1bb 0f00 	cmp.w	fp, #0
    3696:	d151      	bne.n	373c <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    3698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    369c:	d34e      	bcc.n	373c <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    369e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    36a0:	4291      	cmp	r1, r2
    36a2:	d04b      	beq.n	373c <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    36a4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    36a8:	f0c0 8082 	bcc.w	37b0 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    36ac:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    36ae:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    36b0:	0680      	lsls	r0, r0, #26
    36b2:	d405      	bmi.n	36c0 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    36b4:	7938      	ldrb	r0, [r7, #4]
    36b6:	eba0 0009 	sub.w	r0, r0, r9
    36ba:	4283      	cmp	r3, r0
    36bc:	bf28      	it	cs
    36be:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    36c0:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    36c2:	ea4f 2443 	mov.w	r4, r3, lsl #9
    36c6:	d80c      	bhi.n	36e2 <FatFile::read(void*, unsigned int)+0xae>
    36c8:	18c8      	adds	r0, r1, r3
    36ca:	4282      	cmp	r2, r0
    36cc:	d209      	bcs.n	36e2 <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    36ce:	f107 0028 	add.w	r0, r7, #40	; 0x28
    36d2:	e9cd 1300 	strd	r1, r3, [sp]
    36d6:	f003 faa9 	bl	6c2c <FsCache::sync()>
    36da:	e9dd 1300 	ldrd	r1, r3, [sp]
    36de:	2800      	cmp	r0, #0
    36e0:	d03e      	beq.n	3760 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    36e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    36e4:	6802      	ldr	r2, [r0, #0]
    36e6:	6957      	ldr	r7, [r2, #20]
    36e8:	4642      	mov	r2, r8
    36ea:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    36ec:	2800      	cmp	r0, #0
    36ee:	d037      	beq.n	3760 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    36f0:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    36f2:	1b36      	subs	r6, r6, r4
    dst += n;
    36f4:	44a0      	add	r8, r4
    m_curPosition += n;
    36f6:	4422      	add	r2, r4
    36f8:	616a      	str	r2, [r5, #20]
  while (toRead) {
    36fa:	d069      	beq.n	37d0 <FatFile::read(void*, unsigned int)+0x19c>
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const {return m_attributes & FILE_ATTR_ROOT32;}
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    36fc:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    36fe:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    3702:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    3704:	0688      	lsls	r0, r1, #26
    3706:	d4c1      	bmi.n	368c <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    3708:	f897 9005 	ldrb.w	r9, [r7, #5]
    370c:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    3710:	f1bb 0f00 	cmp.w	fp, #0
    3714:	d136      	bne.n	3784 <FatFile::read(void*, unsigned int)+0x150>
    3716:	f1b9 0f00 	cmp.w	r9, #0
    371a:	d133      	bne.n	3784 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    371c:	2a00      	cmp	r2, #0
    371e:	d133      	bne.n	3788 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    3720:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    3722:	bf4c      	ite	mi
    3724:	6a3a      	ldrmi	r2, [r7, #32]
    3726:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    3728:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    372a:	3a02      	subs	r2, #2
    372c:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    372e:	6979      	ldr	r1, [r7, #20]
    3730:	4082      	lsls	r2, r0
    3732:	4449      	add	r1, r9
    3734:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    3736:	f1bb 0f00 	cmp.w	fp, #0
    373a:	d0ad      	beq.n	3698 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    373c:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    3740:	2200      	movs	r2, #0
    3742:	f107 0028 	add.w	r0, r7, #40	; 0x28
    3746:	42b4      	cmp	r4, r6
    3748:	bf28      	it	cs
    374a:	4634      	movcs	r4, r6
    374c:	f003 fa9a 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    3750:	b130      	cbz	r0, 3760 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    3752:	eb00 010b 	add.w	r1, r0, fp
    3756:	4622      	mov	r2, r4
    3758:	4640      	mov	r0, r8
    375a:	f004 fdb7 	bl	82cc <memcpy>
    375e:	e7c7      	b.n	36f0 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    3760:	786b      	ldrb	r3, [r5, #1]
  return -1;
    3762:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    3766:	f043 0302 	orr.w	r3, r3, #2
    376a:	706b      	strb	r3, [r5, #1]
}
    376c:	b003      	add	sp, #12
    376e:	ecbd 8b02 	vpop	{d8}
    3772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    3776:	69c3      	ldr	r3, [r0, #28]
    3778:	6942      	ldr	r2, [r0, #20]
    377a:	1a9b      	subs	r3, r3, r2
    377c:	459a      	cmp	sl, r3
    377e:	bf28      	it	cs
    3780:	469a      	movcs	sl, r3
    3782:	e772      	b.n	366a <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    3784:	692a      	ldr	r2, [r5, #16]
    3786:	e7d0      	b.n	372a <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    3788:	070b      	lsls	r3, r1, #28
    378a:	d505      	bpl.n	3798 <FatFile::read(void*, unsigned int)+0x164>
    378c:	78aa      	ldrb	r2, [r5, #2]
    378e:	0654      	lsls	r4, r2, #25
    3790:	d502      	bpl.n	3798 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    3792:	692a      	ldr	r2, [r5, #16]
    3794:	3201      	adds	r2, #1
    3796:	e7c7      	b.n	3728 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3798:	ee18 2a10 	vmov	r2, s16
    379c:	4638      	mov	r0, r7
    379e:	6929      	ldr	r1, [r5, #16]
    37a0:	f000 ff58 	bl	4654 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    37a4:	2800      	cmp	r0, #0
    37a6:	dbdb      	blt.n	3760 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    37a8:	d00c      	beq.n	37c4 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    37aa:	68af      	ldr	r7, [r5, #8]
    37ac:	692a      	ldr	r2, [r5, #16]
    37ae:	e7bc      	b.n	372a <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    37b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    37b2:	4642      	mov	r2, r8
    37b4:	6803      	ldr	r3, [r0, #0]
    37b6:	691b      	ldr	r3, [r3, #16]
    37b8:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    37ba:	2800      	cmp	r0, #0
    37bc:	d0d0      	beq.n	3760 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    37be:	f44f 7400 	mov.w	r4, #512	; 0x200
    37c2:	e795      	b.n	36f0 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    37c4:	782b      	ldrb	r3, [r5, #0]
    37c6:	f013 0f70 	tst.w	r3, #112	; 0x70
    37ca:	d0c9      	beq.n	3760 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    37cc:	ebaa 0a06 	sub.w	sl, sl, r6
    37d0:	4650      	mov	r0, sl
}
    37d2:	b003      	add	sp, #12
    37d4:	ecbd 8b02 	vpop	{d8}
    37d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000037dc <FatFile::peek()>:
int FatFile::peek() {
    37dc:	b570      	push	{r4, r5, r6, lr}
    37de:	b082      	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    37e0:	2201      	movs	r2, #1
    37e2:	4604      	mov	r4, r0
    37e4:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    37e8:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    37ec:	f7ff ff22 	bl	3634 <FatFile::read(void*, unsigned int)>
    37f0:	2801      	cmp	r0, #1
    37f2:	bf0c      	ite	eq
    37f4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    37f8:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    37fc:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    3800:	b002      	add	sp, #8
    3802:	bd70      	pop	{r4, r5, r6, pc}

00003804 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3804:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    3806:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    380a:	b530      	push	{r4, r5, lr}
    380c:	4604      	mov	r4, r0
    380e:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    3810:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    3814:	d009      	beq.n	382a <FatFile::readDirCache(bool)+0x26>
    3816:	2901      	cmp	r1, #1
    3818:	d107      	bne.n	382a <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    381a:	3320      	adds	r3, #32
    381c:	6143      	str	r3, [r0, #20]
    return m_buffer;
    381e:	68a0      	ldr	r0, [r4, #8]
    3820:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    3822:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    3826:	b003      	add	sp, #12
    3828:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    382a:	2201      	movs	r2, #1
    382c:	f10d 0107 	add.w	r1, sp, #7
    3830:	4620      	mov	r0, r4
    3832:	f7ff feff 	bl	3634 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    3836:	b240      	sxtb	r0, r0
    3838:	2801      	cmp	r0, #1
    383a:	d103      	bne.n	3844 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    383c:	6963      	ldr	r3, [r4, #20]
    383e:	331f      	adds	r3, #31
    3840:	6163      	str	r3, [r4, #20]
    3842:	e7ec      	b.n	381e <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    3844:	2000      	movs	r0, #0
    3846:	e7ee      	b.n	3826 <FatFile::readDirCache(bool)+0x22>

00003848 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    3848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
    384c:	7803      	ldrb	r3, [r0, #0]
    384e:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    3850:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    3852:	2b00      	cmp	r3, #0
    3854:	d039      	beq.n	38ca <FatFile::seekSet(unsigned long)+0x82>
    3856:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    3858:	6941      	ldr	r1, [r0, #20]
    385a:	42a9      	cmp	r1, r5
    385c:	d042      	beq.n	38e4 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    385e:	2d00      	cmp	r5, #0
    3860:	d037      	beq.n	38d2 <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    3862:	0718      	lsls	r0, r3, #28
    3864:	d52a      	bpl.n	38bc <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    3866:	69e2      	ldr	r2, [r4, #28]
    3868:	42aa      	cmp	r2, r5
    386a:	d32e      	bcc.n	38ca <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    386c:	f8d4 c008 	ldr.w	ip, [r4, #8]
    3870:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    3872:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    3874:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    3878:	f012 0f40 	tst.w	r2, #64	; 0x40
    387c:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    3880:	b2c0      	uxtb	r0, r0
    3882:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    3886:	d130      	bne.n	38ea <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    3888:	1e4a      	subs	r2, r1, #1
    388a:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    388c:	b109      	cbz	r1, 3892 <FatFile::seekSet(unsigned long)+0x4a>
    388e:	4296      	cmp	r6, r2
    3890:	d22f      	bcs.n	38f2 <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    3892:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
    3894:	bf4c      	ite	mi
    3896:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    389a:	6a23      	ldrpl	r3, [r4, #32]
    389c:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    389e:	f104 0810 	add.w	r8, r4, #16
    38a2:	e006      	b.n	38b2 <FatFile::seekSet(unsigned long)+0x6a>
    38a4:	6921      	ldr	r1, [r4, #16]
    38a6:	3e01      	subs	r6, #1
    38a8:	68a0      	ldr	r0, [r4, #8]
    38aa:	f000 fed3 	bl	4654 <FatPartition::fatGet(unsigned long, unsigned long*)>
    38ae:	2800      	cmp	r0, #0
    38b0:	dd0b      	ble.n	38ca <FatFile::seekSet(unsigned long)+0x82>
    38b2:	4642      	mov	r2, r8
  while (nNew--) {
    38b4:	2e00      	cmp	r6, #0
    38b6:	d1f5      	bne.n	38a4 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    38b8:	78a2      	ldrb	r2, [r4, #2]
    38ba:	e00c      	b.n	38d6 <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    38bc:	069a      	lsls	r2, r3, #26
    38be:	d5d5      	bpl.n	386c <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
    38c0:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    38c2:	895b      	ldrh	r3, [r3, #10]
    38c4:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    38c8:	d9f6      	bls.n	38b8 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    38ca:	2000      	movs	r0, #0
  m_curCluster = tmp;
    38cc:	6127      	str	r7, [r4, #16]
}
    38ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38d2:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    38d4:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    38d6:	f022 0220 	bic.w	r2, r2, #32
  return true;
    38da:	2001      	movs	r0, #1
  m_curPosition = pos;
    38dc:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    38de:	70a2      	strb	r2, [r4, #2]
}
    38e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    38e4:	2001      	movs	r0, #1
}
    38e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    38ea:	6a23      	ldr	r3, [r4, #32]
    38ec:	4433      	add	r3, r6
    38ee:	6123      	str	r3, [r4, #16]
    goto done;
    38f0:	e7f1      	b.n	38d6 <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    38f2:	1ab6      	subs	r6, r6, r2
    38f4:	e7d3      	b.n	389e <FatFile::seekSet(unsigned long)+0x56>
    38f6:	bf00      	nop

000038f8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    38f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38fc:	460e      	mov	r6, r1
    38fe:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    3900:	2100      	movs	r1, #0
    3902:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    3904:	4604      	mov	r4, r0
    3906:	4698      	mov	r8, r3
    3908:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    390c:	f008 ff76 	bl	c7fc <memset>
  m_vol = dirFile->m_vol;
    3910:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    3912:	6a33      	ldr	r3, [r6, #32]
    3914:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
    3918:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    391a:	f005 050f 	and.w	r5, r5, #15
    391e:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    3922:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    3926:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    3928:	070b      	lsls	r3, r1, #28
    392a:	d411      	bmi.n	3950 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    392c:	f001 0117 	and.w	r1, r1, #23
    3930:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    3932:	7ad3      	ldrb	r3, [r2, #11]
    3934:	f013 0f18 	tst.w	r3, #24
    3938:	d102      	bne.n	3940 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    393a:	f041 0108 	orr.w	r1, r1, #8
    393e:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    3940:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    3944:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    3946:	2b01      	cmp	r3, #1
    3948:	d038      	beq.n	39bc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    394a:	2b02      	cmp	r3, #2
    394c:	d006      	beq.n	395c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    394e:	b1f3      	cbz	r3, 398e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
    3950:	2300      	movs	r3, #0
  return false;
    3952:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    3954:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    3956:	70a3      	strb	r3, [r4, #2]
}
    3958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    395c:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    395e:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    3960:	06cd      	lsls	r5, r1, #27
    3962:	d4f5      	bmi.n	3950 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    3964:	07ce      	lsls	r6, r1, #31
    3966:	d4f3      	bmi.n	3950 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3968:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
    396c:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3970:	ea43 0301 	orr.w	r3, r3, r1
    3974:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    3976:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    3978:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    397a:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    397c:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    397e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    3982:	d012      	beq.n	39aa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    3984:	bb19      	cbnz	r1, 39ce <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3986:	f063 037f 	orn	r3, r3, #127	; 0x7f
    398a:	70a3      	strb	r3, [r4, #2]
    398c:	e010      	b.n	39b0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
    398e:	f418 6f80 	tst.w	r8, #1024	; 0x400
    3992:	d1dd      	bne.n	3950 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    3994:	f008 0308 	and.w	r3, r8, #8
    3998:	f043 0301 	orr.w	r3, r3, #1
    399c:	70a3      	strb	r3, [r4, #2]
    399e:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    39a0:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    39a2:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    39a4:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    39a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    39aa:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    39ac:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    39ae:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    39b0:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    39b4:	d104      	bne.n	39c0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
    39b6:	2001      	movs	r0, #1
}
    39b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    39bc:	2302      	movs	r3, #2
    39be:	e7ce      	b.n	395e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    39c0:	69e1      	ldr	r1, [r4, #28]
    39c2:	4620      	mov	r0, r4
    39c4:	f7ff ff40 	bl	3848 <FatFile::seekSet(unsigned long)>
    39c8:	2800      	cmp	r0, #0
    39ca:	d1f4      	bne.n	39b6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
    39cc:	e7c0      	b.n	3950 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    39ce:	f000 fe53 	bl	4678 <FatPartition::freeChain(unsigned long)>
    39d2:	2800      	cmp	r0, #0
    39d4:	d0bc      	beq.n	3950 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    39d6:	78a3      	ldrb	r3, [r4, #2]
    39d8:	e7d5      	b.n	3986 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    39da:	bf00      	nop

000039dc <FatFile::sync()>:
  if (!isOpen()) {
    39dc:	7803      	ldrb	r3, [r0, #0]
    39de:	b10b      	cbz	r3, 39e4 <FatFile::sync()+0x8>
    39e0:	f7ff bb94 	b.w	310c <FatFile::sync() [clone .part.0]>
}
    39e4:	2001      	movs	r0, #1
    39e6:	4770      	bx	lr

000039e8 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    39e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    39ec:	7883      	ldrb	r3, [r0, #2]
    39ee:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    39f0:	079c      	lsls	r4, r3, #30
    39f2:	d577      	bpl.n	3ae4 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    39f4:	4688      	mov	r8, r1
    39f6:	0719      	lsls	r1, r3, #28
    39f8:	4691      	mov	r9, r2
    39fa:	f100 80b5 	bmi.w	3b68 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    39fe:	696b      	ldr	r3, [r5, #20]
    3a00:	eb13 0209 	adds.w	r2, r3, r9
    3a04:	d26e      	bcs.n	3ae4 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    3a06:	f1b9 0f00 	cmp.w	r9, #0
    3a0a:	d040      	beq.n	3a8e <FatFile::write(void const*, unsigned int)+0xa6>
    3a0c:	464f      	mov	r7, r9
    m_status = 0;
    3a0e:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    3a12:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    3a14:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    3a18:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    3a1a:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    3a1c:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    3a20:	d13f      	bne.n	3aa2 <FatFile::write(void const*, unsigned int)+0xba>
    3a22:	2e00      	cmp	r6, #0
    3a24:	d13d      	bne.n	3aa2 <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    3a26:	2900      	cmp	r1, #0
    3a28:	d06e      	beq.n	3b08 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    3a2a:	78aa      	ldrb	r2, [r5, #2]
    3a2c:	0652      	lsls	r2, r2, #25
    3a2e:	d576      	bpl.n	3b1e <FatFile::write(void const*, unsigned int)+0x136>
    3a30:	69ea      	ldr	r2, [r5, #28]
    3a32:	429a      	cmp	r2, r3
    3a34:	d973      	bls.n	3b1e <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    3a36:	3101      	adds	r1, #1
    3a38:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3a3a:	3902      	subs	r1, #2
    3a3c:	7982      	ldrb	r2, [r0, #6]
    3a3e:	6943      	ldr	r3, [r0, #20]
    3a40:	4091      	lsls	r1, r2
    3a42:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3a44:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    3a48:	d353      	bcc.n	3af2 <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    3a4a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    3a4e:	d370      	bcc.n	3b32 <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3a50:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    3a52:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    3a54:	1b1b      	subs	r3, r3, r4
    3a56:	4293      	cmp	r3, r2
    3a58:	bf28      	it	cs
    3a5a:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    3a5c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    3a5e:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    3a60:	ea4f 2443 	mov.w	r4, r3, lsl #9
    3a64:	d307      	bcc.n	3a76 <FatFile::write(void const*, unsigned int)+0x8e>
    3a66:	185e      	adds	r6, r3, r1
    3a68:	42b2      	cmp	r2, r6
    3a6a:	d204      	bcs.n	3a76 <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    3a6c:	f04f 32ff 	mov.w	r2, #4294967295
    m_status = 0;
    3a70:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    3a74:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    3a76:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    3a78:	4642      	mov	r2, r8
    3a7a:	6806      	ldr	r6, [r0, #0]
    3a7c:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    3a7e:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    3a80:	b380      	cbz	r0, 3ae4 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    3a82:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    3a84:	1b3f      	subs	r7, r7, r4
    src += n;
    3a86:	44a0      	add	r8, r4
    m_curPosition += n;
    3a88:	4423      	add	r3, r4
    3a8a:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    3a8c:	d1c1      	bne.n	3a12 <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    3a8e:	69ea      	ldr	r2, [r5, #28]
    3a90:	429a      	cmp	r2, r3
    3a92:	d276      	bcs.n	3b82 <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3a94:	78aa      	ldrb	r2, [r5, #2]
    3a96:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    3a98:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3a9a:	f062 037f 	orn	r3, r2, #127	; 0x7f
    3a9e:	70ab      	strb	r3, [r5, #2]
    3aa0:	e025      	b.n	3aee <FatFile::write(void const*, unsigned int)+0x106>
    3aa2:	7982      	ldrb	r2, [r0, #6]
    3aa4:	3902      	subs	r1, #2
    3aa6:	6943      	ldr	r3, [r0, #20]
    3aa8:	4091      	lsls	r1, r2
    3aaa:	4419      	add	r1, r3
                      + sectorOfCluster;
    3aac:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3aae:	2e00      	cmp	r6, #0
    3ab0:	d0c8      	beq.n	3a44 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    3ab2:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3ab6:	2201      	movs	r2, #1
    3ab8:	42bc      	cmp	r4, r7
    3aba:	bf28      	it	cs
    3abc:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    3abe:	3028      	adds	r0, #40	; 0x28
    3ac0:	f003 f8e0 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    3ac4:	b170      	cbz	r0, 3ae4 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    3ac6:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3ac8:	4426      	add	r6, r4
      memcpy(dst, src, n);
    3aca:	4622      	mov	r2, r4
    3acc:	4641      	mov	r1, r8
    3ace:	f004 fbfd 	bl	82cc <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3ad2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3ad6:	68a8      	ldr	r0, [r5, #8]
    3ad8:	d1d3      	bne.n	3a82 <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
    3ada:	3028      	adds	r0, #40	; 0x28
    3adc:	f003 f8a6 	bl	6c2c <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    3ae0:	2800      	cmp	r0, #0
    3ae2:	d1ce      	bne.n	3a82 <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    3ae4:	786b      	ldrb	r3, [r5, #1]
  return 0;
    3ae6:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    3ae8:	f043 0301 	orr.w	r3, r3, #1
    3aec:	706b      	strb	r3, [r5, #1]
}
    3aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    3af2:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    3af6:	696a      	ldr	r2, [r5, #20]
    3af8:	69eb      	ldr	r3, [r5, #28]
    3afa:	42bc      	cmp	r4, r7
    3afc:	bf28      	it	cs
    3afe:	463c      	movcs	r4, r7
    3b00:	429a      	cmp	r2, r3
    3b02:	d305      	bcc.n	3b10 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    3b04:	2205      	movs	r2, #5
    3b06:	e7da      	b.n	3abe <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    3b08:	6a29      	ldr	r1, [r5, #32]
    3b0a:	b321      	cbz	r1, 3b56 <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    3b0c:	6129      	str	r1, [r5, #16]
    3b0e:	e794      	b.n	3a3a <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    3b10:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3b12:	f013 0f20 	tst.w	r3, #32
    3b16:	bf14      	ite	ne
    3b18:	2205      	movne	r2, #5
    3b1a:	2201      	moveq	r2, #1
    3b1c:	e7cf      	b.n	3abe <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3b1e:	f105 0210 	add.w	r2, r5, #16
    3b22:	f000 fd97 	bl	4654 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3b26:	2800      	cmp	r0, #0
    3b28:	dbdc      	blt.n	3ae4 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    3b2a:	d024      	beq.n	3b76 <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    3b2c:	68a8      	ldr	r0, [r5, #8]
    3b2e:	6929      	ldr	r1, [r5, #16]
    3b30:	e783      	b.n	3a3a <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    3b32:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3b34:	428b      	cmp	r3, r1
    3b36:	d104      	bne.n	3b42 <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    3b38:	f04f 33ff 	mov.w	r3, #4294967295
    m_status = 0;
    3b3c:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    3b40:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    3b42:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    3b44:	4642      	mov	r2, r8
    3b46:	6803      	ldr	r3, [r0, #0]
    3b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3b4a:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    3b4c:	2800      	cmp	r0, #0
    3b4e:	d0c9      	beq.n	3ae4 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    3b50:	f44f 7400 	mov.w	r4, #512	; 0x200
    3b54:	e795      	b.n	3a82 <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    3b56:	4628      	mov	r0, r5
    3b58:	f7ff fb32 	bl	31c0 <FatFile::addCluster()>
    3b5c:	2800      	cmp	r0, #0
    3b5e:	d0c1      	beq.n	3ae4 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    3b60:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    3b62:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    3b64:	6229      	str	r1, [r5, #32]
    3b66:	e768      	b.n	3a3a <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    3b68:	69c1      	ldr	r1, [r0, #28]
    3b6a:	f7ff fe6d 	bl	3848 <FatFile::seekSet(unsigned long)>
    3b6e:	2800      	cmp	r0, #0
    3b70:	f47f af45 	bne.w	39fe <FatFile::write(void const*, unsigned int)+0x16>
    3b74:	e7b6      	b.n	3ae4 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    3b76:	4628      	mov	r0, r5
    3b78:	f7ff fb22 	bl	31c0 <FatFile::addCluster()>
    3b7c:	2800      	cmp	r0, #0
    3b7e:	d1d5      	bne.n	3b2c <FatFile::write(void const*, unsigned int)+0x144>
    3b80:	e7b0      	b.n	3ae4 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    3b82:	4b05      	ldr	r3, [pc, #20]	; (3b98 <FatFile::write(void const*, unsigned int)+0x1b0>)
    3b84:	681b      	ldr	r3, [r3, #0]
    3b86:	b12b      	cbz	r3, 3b94 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3b88:	78ab      	ldrb	r3, [r5, #2]
    3b8a:	4648      	mov	r0, r9
    3b8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3b90:	70ab      	strb	r3, [r5, #2]
    3b92:	e7ac      	b.n	3aee <FatFile::write(void const*, unsigned int)+0x106>
    3b94:	4648      	mov	r0, r9
    3b96:	e7aa      	b.n	3aee <FatFile::write(void const*, unsigned int)+0x106>
    3b98:	2002109c 	.word	0x2002109c

00003b9c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    3ba0:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3ba2:	b08d      	sub	sp, #52	; 0x34
    3ba4:	4614      	mov	r4, r2
    next = begin;
    3ba6:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3ba8:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3baa:	4606      	mov	r6, r0
    3bac:	4689      	mov	r9, r1
  FatFile dir = *this;
    3bae:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3bb0:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
    3bb2:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
    3bb6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3bba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    3bbc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3bc0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    3bc2:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
    3bc6:	6065      	str	r5, [r4, #4]
    3bc8:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3bca:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
    3bcc:	f8a4 e00c 	strh.w	lr, [r4, #12]
    3bd0:	2b00      	cmp	r3, #0
    3bd2:	d03f      	beq.n	3c54 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    3bd4:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3bd8:	eba9 010a 	sub.w	r1, r9, sl
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    3bdc:	a803      	add	r0, sp, #12
    3bde:	b289      	uxth	r1, r1
    3be0:	0149      	lsls	r1, r1, #5
    3be2:	f7ff fe31 	bl	3848 <FatFile::seekSet(unsigned long)>
    3be6:	b350      	cbz	r0, 3c3e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    3be8:	2100      	movs	r1, #0
    3bea:	a803      	add	r0, sp, #12
    3bec:	f7ff fe0a 	bl	3804 <FatFile::readDirCache(bool)>
    if (!ldir) {
    3bf0:	4607      	mov	r7, r0
    3bf2:	b320      	cbz	r0, 3c3e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    3bf4:	2500      	movs	r5, #0
    3bf6:	e00d      	b.n	3c14 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    3bf8:	f003 f86c 	bl	6cd4 <FsName::get16()>
    3bfc:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    3bfe:	4658      	mov	r0, fp
    3c00:	f003 f8da 	bl	6db8 <toUpcase(unsigned short)>
    3c04:	4683      	mov	fp, r0
    3c06:	4640      	mov	r0, r8
    3c08:	f003 f8d6 	bl	6db8 <toUpcase(unsigned short)>
    3c0c:	4583      	cmp	fp, r0
    3c0e:	d116      	bne.n	3c3e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
    3c10:	2d0d      	cmp	r5, #13
    3c12:	d018      	beq.n	3c46 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
    3c14:	b2ea      	uxtb	r2, r5
    3c16:	4639      	mov	r1, r7
    3c18:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    3c1a:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
    3c1c:	f000 fb90 	bl	4340 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    3c20:	89a3      	ldrh	r3, [r4, #12]
    3c22:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
    3c24:	4620      	mov	r0, r4
    3c26:	2b00      	cmp	r3, #0
    3c28:	d1e6      	bne.n	3bf8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
    3c2a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    3c2e:	4293      	cmp	r3, r2
    3c30:	d1e2      	bne.n	3bf8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
    3c32:	fabb f08b 	clz	r0, fp
    3c36:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    3c38:	b00d      	add	sp, #52	; 0x34
    3c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    3c3e:	2000      	movs	r0, #0
}
    3c40:	b00d      	add	sp, #52	; 0x34
    3c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3c46:	f10a 0a01 	add.w	sl, sl, #1
    3c4a:	9b01      	ldr	r3, [sp, #4]
    3c4c:	fa5f fa8a 	uxtb.w	sl, sl
    3c50:	4553      	cmp	r3, sl
    3c52:	d2c1      	bcs.n	3bd8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
    3c54:	2001      	movs	r0, #1
    3c56:	e7ef      	b.n	3c38 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

00003c58 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    3c5c:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3c5e:	b08d      	sub	sp, #52	; 0x34
    3c60:	4616      	mov	r6, r2
    3c62:	469a      	mov	sl, r3
  FatFile dir = *this;
    3c64:	f10d 0c0c 	add.w	ip, sp, #12
    3c68:	f102 0415 	add.w	r4, r2, #21
    3c6c:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    3c70:	9101      	str	r1, [sp, #4]
  DirFat_t* cacheDirEntry(uint8_t action);
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    3c72:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
    3c76:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3c78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3c7c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3c7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3c82:	683b      	ldr	r3, [r7, #0]
    3c84:	f8cc 3000 	str.w	r3, [ip]
    for (uint8_t i = 0; i < 11; i++) {
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3c88:	ea4f 13c9 	mov.w	r3, r9, lsl #7
    3c8c:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    3c90:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    3c94:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    3c96:	fa52 f383 	uxtab	r3, r2, r3
    3c9a:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
    3c9e:	d1f3      	bne.n	3c88 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
    3ca0:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
    3ca2:	f04f 0800 	mov.w	r8, #0
    next = begin;
    3ca6:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    3ca8:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3cac:	f1ba 0f00 	cmp.w	sl, #0
    3cb0:	d04e      	beq.n	3d50 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
    3cb2:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    3cb4:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    3cb6:	a803      	add	r0, sp, #12
    3cb8:	1bd9      	subs	r1, r3, r7
    3cba:	b289      	uxth	r1, r1
    3cbc:	0149      	lsls	r1, r1, #5
    3cbe:	f7ff fdc3 	bl	3848 <FatFile::seekSet(unsigned long)>
    3cc2:	2800      	cmp	r0, #0
    3cc4:	d055      	beq.n	3d72 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    3cc6:	2100      	movs	r1, #0
    3cc8:	a803      	add	r0, sp, #12
    3cca:	f7ff fd9b 	bl	3804 <FatFile::readDirCache(bool)>
    if (!ldir) {
    3cce:	2800      	cmp	r0, #0
    3cd0:	d04f      	beq.n	3d72 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    3cd2:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3cd4:	4557      	cmp	r7, sl
    3cd6:	f100 0b01 	add.w	fp, r0, #1
  *reinterpret_cast<uint16_t*>(dst) = src;
    3cda:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
    3cde:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    3ce2:	f04f 0500 	mov.w	r5, #0
    3ce6:	f043 0301 	orr.w	r3, r3, #1
    3cea:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3cee:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3cf2:	bf0c      	ite	eq
    3cf4:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
    3cf8:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3cfa:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    3cfc:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3d00:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
    3d02:	7303      	strb	r3, [r0, #12]
    3d04:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
    3d08:	f880 900d 	strb.w	r9, [r0, #13]
    3d0c:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    3d0e:	e006      	b.n	3d1e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    3d10:	f8ab 0000 	strh.w	r0, [fp]
    3d14:	3401      	adds	r4, #1
    3d16:	3501      	adds	r5, #1
    3d18:	f10b 0b02 	add.w	fp, fp, #2
    3d1c:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
    3d1e:	89b0      	ldrh	r0, [r6, #12]
    3d20:	b918      	cbnz	r0, 3d2a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
    3d22:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
    3d26:	429a      	cmp	r2, r3
    3d28:	d016      	beq.n	3d58 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    3d2a:	4630      	mov	r0, r6
    3d2c:	f002 ffd2 	bl	6cd4 <FsName::get16()>
  if (i < 5) {
    3d30:	2d04      	cmp	r5, #4
    3d32:	b2eb      	uxtb	r3, r5
    3d34:	d9ec      	bls.n	3d10 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
    3d36:	2b0a      	cmp	r3, #10
    3d38:	d802      	bhi.n	3d40 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    3d3a:	f8ab 0003 	strh.w	r0, [fp, #3]
}
    3d3e:	e7e9      	b.n	3d14 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
    3d40:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    3d42:	f8ab 0005 	strh.w	r0, [fp, #5]
    3d46:	d1e5      	bne.n	3d14 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    3d48:	3701      	adds	r7, #1
    3d4a:	b2ff      	uxtb	r7, r7
    3d4c:	45ba      	cmp	sl, r7
    3d4e:	d2b1      	bcs.n	3cb4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    3d50:	2001      	movs	r0, #1

 fail:
  return false;
}
    3d52:	b00d      	add	sp, #52	; 0x34
    3d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    3d58:	f1b8 0f00 	cmp.w	r8, #0
    3d5c:	d006      	beq.n	3d6c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    3d5e:	f108 0801 	add.w	r8, r8, #1
    3d62:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3d66:	fa5f f888 	uxtb.w	r8, r8
    3d6a:	e7e1      	b.n	3d30 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
    3d6c:	f04f 0801 	mov.w	r8, #1
    3d70:	e7de      	b.n	3d30 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
    3d72:	2000      	movs	r0, #0
}
    3d74:	b00d      	add	sp, #52	; 0x34
    3d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d7a:	bf00      	nop

00003d7c <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    3d7c:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    3d7e:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    3d82:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    3d86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    3d8a:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
    3d8e:	4686      	mov	lr, r0
  const char* end = fname->end;
    3d90:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    3d92:	6051      	str	r1, [r2, #4]
    3d94:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    3d98:	781a      	ldrb	r2, [r3, #0]
    3d9a:	2a2e      	cmp	r2, #46	; 0x2e
    3d9c:	bf14      	ite	ne
    3d9e:	2001      	movne	r0, #1
    3da0:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    3da2:	d103      	bne.n	3dac <FatFile::makeSFN(FatLfn_t*)+0x30>
    3da4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3da8:	2a2e      	cmp	r2, #46	; 0x2e
    3daa:	d0fb      	beq.n	3da4 <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    3dac:	1e61      	subs	r1, r4, #1
    3dae:	4299      	cmp	r1, r3
    3db0:	d90b      	bls.n	3dca <FatFile::makeSFN(FatLfn_t*)+0x4e>
    3db2:	460a      	mov	r2, r1
    3db4:	e002      	b.n	3dbc <FatFile::makeSFN(FatLfn_t*)+0x40>
    3db6:	4293      	cmp	r3, r2
    3db8:	4611      	mov	r1, r2
    3dba:	d006      	beq.n	3dca <FatFile::makeSFN(FatLfn_t*)+0x4e>
    3dbc:	4611      	mov	r1, r2
    3dbe:	3a01      	subs	r2, #1
    3dc0:	f891 c000 	ldrb.w	ip, [r1]
    3dc4:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    3dc8:	d1f5      	bne.n	3db6 <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
    3dca:	429c      	cmp	r4, r3
    3dcc:	f04f 0500 	mov.w	r5, #0
    3dd0:	f240 8086 	bls.w	3ee0 <FatFile::makeSFN(FatLfn_t*)+0x164>
    3dd4:	2607      	movs	r6, #7
    3dd6:	2708      	movs	r7, #8
    3dd8:	46a9      	mov	r9, r5
    3dda:	46a8      	mov	r8, r5
    3ddc:	e006      	b.n	3dec <FatFile::makeSFN(FatLfn_t*)+0x70>
    3dde:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    3de0:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
    3de2:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    3de6:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    3de8:	429c      	cmp	r4, r3
    3dea:	d95b      	bls.n	3ea4 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    3dec:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    3dee:	2a2e      	cmp	r2, #46	; 0x2e
    3df0:	bf08      	it	eq
    3df2:	4299      	cmpeq	r1, r3
    3df4:	d0f3      	beq.n	3dde <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    3df6:	2a22      	cmp	r2, #34	; 0x22
    3df8:	d00d      	beq.n	3e16 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    3dfa:	2a7c      	cmp	r2, #124	; 0x7c
    3dfc:	d00b      	beq.n	3e16 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    3dfe:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    3e02:	f1bc 0f02 	cmp.w	ip, #2
    3e06:	d906      	bls.n	3e16 <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    3e08:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    3e0c:	f1bc 0f05 	cmp.w	ip, #5
    3e10:	d821      	bhi.n	3e56 <FatFile::makeSFN(FatLfn_t*)+0xda>
    3e12:	2a2d      	cmp	r2, #45	; 0x2d
    3e14:	d01f      	beq.n	3e56 <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    3e16:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    3e1a:	2a80      	cmp	r2, #128	; 0x80
    3e1c:	d05d      	beq.n	3eda <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    3e1e:	454e      	cmp	r6, r9
    3e20:	d22f      	bcs.n	3e82 <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    3e22:	4299      	cmp	r1, r3
    3e24:	bf2c      	ite	cs
    3e26:	2000      	movcs	r0, #0
    3e28:	2001      	movcc	r0, #1
    3e2a:	2e0a      	cmp	r6, #10
    3e2c:	bf08      	it	eq
    3e2e:	f040 0001 	orreq.w	r0, r0, #1
    3e32:	2800      	cmp	r0, #0
    3e34:	d047      	beq.n	3ec6 <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    3e36:	f89e 3016 	ldrb.w	r3, [lr, #22]
    3e3a:	2b20      	cmp	r3, #32
    3e3c:	d040      	beq.n	3ec0 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    3e3e:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    3e42:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    3e44:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    3e46:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    3e48:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    3e4a:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    3e4e:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    3e50:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
    3e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3e56:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    3e5a:	f1bc 0f05 	cmp.w	ip, #5
    3e5e:	d9da      	bls.n	3e16 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    3e60:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    3e64:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    3e68:	d8d5      	bhi.n	3e16 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    3e6a:	454e      	cmp	r6, r9
    3e6c:	d3d9      	bcc.n	3e22 <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    3e6e:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    3e72:	f1bc 0f19 	cmp.w	ip, #25
    3e76:	d828      	bhi.n	3eca <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    3e78:	3a20      	subs	r2, #32
        lc |= bit;
    3e7a:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    3e7c:	b2d2      	uxtb	r2, r2
        lc |= bit;
    3e7e:	b2ed      	uxtb	r5, r5
    3e80:	e001      	b.n	3e86 <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    3e82:	2000      	movs	r0, #0
        c = '_';
    3e84:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    3e86:	f109 0c01 	add.w	ip, r9, #1
    3e8a:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    3e8c:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    3e8e:	f889 2016 	strb.w	r2, [r9, #22]
    3e92:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    3e96:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    3e98:	4691      	mov	r9, r2
    3e9a:	bf98      	it	ls
    3e9c:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
    3ea0:	429c      	cmp	r4, r3
    3ea2:	d8a3      	bhi.n	3dec <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    3ea4:	f89e 3016 	ldrb.w	r3, [lr, #22]
    3ea8:	2b20      	cmp	r3, #32
    3eaa:	d009      	beq.n	3ec0 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    3eac:	2800      	cmp	r0, #0
    3eae:	d0c6      	beq.n	3e3e <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    3eb0:	ea18 0f05 	tst.w	r8, r5
    3eb4:	bf18      	it	ne
    3eb6:	2502      	movne	r5, #2
    3eb8:	f88e 5015 	strb.w	r5, [lr, #21]
}
    3ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    3ec0:	2000      	movs	r0, #0
}
    3ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3ec6:	460b      	mov	r3, r1
    3ec8:	e78e      	b.n	3de8 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    3eca:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    3ece:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    3ed2:	bf98      	it	ls
    3ed4:	ea47 0808 	orrls.w	r8, r7, r8
    3ed8:	e7d5      	b.n	3e86 <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    3eda:	3301      	adds	r3, #1
        is83 = false;
    3edc:	2000      	movs	r0, #0
    3ede:	e783      	b.n	3de8 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    3ee0:	46a8      	mov	r8, r5
    3ee2:	e7df      	b.n	3ea4 <FatFile::makeSFN(FatLfn_t*)+0x128>

00003ee4 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    3ee4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    3ee8:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    3eec:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    3eee:	460f      	mov	r7, r1
    3ef0:	4604      	mov	r4, r0
    3ef2:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 3f94 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    3ef6:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    3efa:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3efe:	f101 0616 	add.w	r6, r1, #22
    3f02:	f1b8 0f03 	cmp.w	r8, #3
    3f06:	f8db 3000 	ldr.w	r3, [fp]
    3f0a:	bf28      	it	cs
    3f0c:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    3f10:	442b      	add	r3, r5
    3f12:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    3f14:	f108 0304 	add.w	r3, r8, #4
    3f18:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    3f1a:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    3f1e:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    3f20:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    3f22:	2a09      	cmp	r2, #9
    3f24:	f102 0137 	add.w	r1, r2, #55	; 0x37
    3f28:	bf98      	it	ls
    3f2a:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    3f2e:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    3f30:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    3f32:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    3f34:	4598      	cmp	r8, r3
    3f36:	d1f0      	bne.n	3f1a <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    3f38:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
    3f3c:	2100      	movs	r1, #0
    3f3e:	4620      	mov	r0, r4
    3f40:	f883 a016 	strb.w	sl, [r3, #22]
    3f44:	f7ff fc80 	bl	3848 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    3f48:	2101      	movs	r1, #1
    3f4a:	4620      	mov	r0, r4
    3f4c:	f7ff fc5a 	bl	3804 <FatFile::readDirCache(bool)>
    3f50:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3f52:	220b      	movs	r2, #11
    3f54:	4630      	mov	r0, r6
      if (!dir) {
    3f56:	b19b      	cbz	r3, 3f80 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    3f58:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3f5c:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    3f5e:	f1bc 0f00 	cmp.w	ip, #0
    3f62:	d013      	beq.n	3f8c <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3f64:	7adb      	ldrb	r3, [r3, #11]
    3f66:	071b      	lsls	r3, r3, #28
    3f68:	d4ee      	bmi.n	3f48 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    3f6a:	f008 fb9b 	bl	c6a4 <memcmp>
    3f6e:	2800      	cmp	r0, #0
    3f70:	d1ea      	bne.n	3f48 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    3f72:	f109 39ff 	add.w	r9, r9, #4294967295
    3f76:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    3f7a:	d1c2      	bne.n	3f02 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    3f7c:	4648      	mov	r0, r9
 fail:
    3f7e:	e003      	b.n	3f88 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    3f80:	7860      	ldrb	r0, [r4, #1]
    3f82:	fab0 f080 	clz	r0, r0
    3f86:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
    3f88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    3f8c:	2001      	movs	r0, #1
}
    3f8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f92:	bf00      	nop
    3f94:	20022554 	.word	0x20022554

00003f98 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    3f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f9c:	ed2d 8b02 	vpush	{d8}
    3fa0:	b08b      	sub	sp, #44	; 0x2c
    3fa2:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    3fa6:	688b      	ldr	r3, [r1, #8]
    3fa8:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    3faa:	780b      	ldrb	r3, [r1, #0]
    3fac:	f013 0f70 	tst.w	r3, #112	; 0x70
    3fb0:	d053      	beq.n	405a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
    3fb2:	9b02      	ldr	r3, [sp, #8]
    3fb4:	781b      	ldrb	r3, [r3, #0]
    3fb6:	2b00      	cmp	r3, #0
    3fb8:	d14f      	bne.n	405a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    3fba:	6913      	ldr	r3, [r2, #16]
    3fbc:	4690      	mov	r8, r2
    3fbe:	4a9a      	ldr	r2, [pc, #616]	; (4228 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    3fc0:	460e      	mov	r6, r1
    3fc2:	330c      	adds	r3, #12
    3fc4:	fba2 2303 	umull	r2, r3, r2, r3
    3fc8:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    3fcc:	f898 3015 	ldrb.w	r3, [r8, #21]
    3fd0:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
    3fd2:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    3fd4:	f000 80a7 	beq.w	4126 <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    3fd8:	1c57      	adds	r7, r2, #1
    3fda:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    3fdc:	2300      	movs	r3, #0
    seekSet(0);
    3fde:	4630      	mov	r0, r6
    3fe0:	4619      	mov	r1, r3
    3fe2:	461c      	mov	r4, r3
    3fe4:	9306      	str	r3, [sp, #24]
    3fe6:	f7ff fc2f 	bl	3848 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    3fea:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
    3fee:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    3ff0:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    3ff2:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    3ff4:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    3ff8:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    3ffa:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    3ffc:	2100      	movs	r1, #0
    3ffe:	4630      	mov	r0, r6
    4000:	f7ff fc00 	bl	3804 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    4004:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    4008:	4603      	mov	r3, r0
    400a:	b320      	cbz	r0, 4056 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    400c:	7802      	ldrb	r2, [r0, #0]
    400e:	2ae5      	cmp	r2, #229	; 0xe5
    4010:	d029      	beq.n	4066 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    4012:	b342      	cbz	r2, 4066 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    4014:	42bc      	cmp	r4, r7
    4016:	bf38      	it	cc
    4018:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    401a:	2a2e      	cmp	r2, #46	; 0x2e
    401c:	d02b      	beq.n	4076 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    401e:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
    4022:	f1bc 0f0f 	cmp.w	ip, #15
    4026:	d054      	beq.n	40d2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
    4028:	f01c 0c08 	ands.w	ip, ip, #8
    402c:	d123      	bne.n	4076 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    402e:	f1b9 0f00 	cmp.w	r9, #0
    4032:	f040 80d5 	bne.w	41e0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    4036:	220b      	movs	r2, #11
    4038:	ee18 1a10 	vmov	r1, s16
    403c:	f008 fb32 	bl	c6a4 <memcmp>
    4040:	2800      	cmp	r0, #0
    4042:	d1da      	bne.n	3ffa <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    4044:	f898 3015 	ldrb.w	r3, [r8, #21]
    4048:	f013 0301 	ands.w	r3, r3, #1
    404c:	f000 80e4 	beq.w	4218 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    4050:	2301      	movs	r3, #1
    4052:	9305      	str	r3, [sp, #20]
    4054:	e7d1      	b.n	3ffa <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    4056:	7873      	ldrb	r3, [r6, #1]
    4058:	b183      	cbz	r3, 407c <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
    405a:	2000      	movs	r0, #0
}
    405c:	b00b      	add	sp, #44	; 0x2c
    405e:	ecbd 8b02 	vpop	{d8}
    4062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    4066:	2c00      	cmp	r4, #0
    4068:	bf08      	it	eq
    406a:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    406c:	42bc      	cmp	r4, r7
    406e:	d201      	bcs.n	4074 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    4070:	3401      	adds	r4, #1
    4072:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    4074:	b112      	cbz	r2, 407c <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    4076:	f04f 0900 	mov.w	r9, #0
    407a:	e7be      	b.n	3ffa <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    407c:	9b03      	ldr	r3, [sp, #12]
    407e:	059a      	lsls	r2, r3, #22
    4080:	d5eb      	bpl.n	405a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    4082:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    4086:	3b01      	subs	r3, #1
    4088:	2b01      	cmp	r3, #1
    408a:	d8e6      	bhi.n	405a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    408c:	2c00      	cmp	r4, #0
    408e:	bf08      	it	eq
    4090:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    4092:	42bc      	cmp	r4, r7
    4094:	d303      	bcc.n	409e <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    4096:	e048      	b.n	412a <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    4098:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    409a:	42a7      	cmp	r7, r4
    409c:	d045      	beq.n	412a <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    409e:	2100      	movs	r1, #0
    40a0:	4630      	mov	r0, r6
    40a2:	f7ff fbaf 	bl	3804 <FatFile::readDirCache(bool)>
    freeFound++;
    40a6:	1c63      	adds	r3, r4, #1
    if (!dir) {
    40a8:	2800      	cmp	r0, #0
    40aa:	d1f5      	bne.n	4098 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    40ac:	7873      	ldrb	r3, [r6, #1]
    40ae:	2b00      	cmp	r3, #0
    40b0:	d1d3      	bne.n	405a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    40b2:	42a7      	cmp	r7, r4
    40b4:	d939      	bls.n	412a <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    40b6:	9d07      	ldr	r5, [sp, #28]
    40b8:	e005      	b.n	40c6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    40ba:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    40bc:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    40c0:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    40c2:	42a7      	cmp	r7, r4
    40c4:	d931      	bls.n	412a <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    40c6:	4630      	mov	r0, r6
    40c8:	f7ff f894 	bl	31f4 <FatFile::addDirCluster()>
    40cc:	2800      	cmp	r0, #0
    40ce:	d1f4      	bne.n	40ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    40d0:	e7c3      	b.n	405a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    40d2:	f1b9 0f00 	cmp.w	r9, #0
    40d6:	d119      	bne.n	410c <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    40d8:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    40dc:	9904      	ldr	r1, [sp, #16]
    40de:	4559      	cmp	r1, fp
    40e0:	d18b      	bne.n	3ffa <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    40e2:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    40e6:	d088      	beq.n	3ffa <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    40e8:	7b43      	ldrb	r3, [r0, #13]
    40ea:	4689      	mov	r9, r1
    40ec:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    40ee:	f1bb 0f01 	cmp.w	fp, #1
    40f2:	d182      	bne.n	3ffa <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    40f4:	1c69      	adds	r1, r5, #1
    40f6:	464b      	mov	r3, r9
    40f8:	4642      	mov	r2, r8
    40fa:	4630      	mov	r0, r6
    40fc:	b289      	uxth	r1, r1
    40fe:	f7ff fd4d 	bl	3b9c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    4102:	2800      	cmp	r0, #0
    4104:	bf08      	it	eq
    4106:	f04f 0900 	moveq.w	r9, #0
    410a:	e776      	b.n	3ffa <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    410c:	f10b 3bff 	add.w	fp, fp, #4294967295
    4110:	fa5f fb8b 	uxtb.w	fp, fp
    4114:	455a      	cmp	r2, fp
    4116:	d1ae      	bne.n	4076 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    4118:	7b43      	ldrb	r3, [r0, #13]
    411a:	9a06      	ldr	r2, [sp, #24]
    411c:	4293      	cmp	r3, r2
    411e:	d0e6      	beq.n	40ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    4120:	f04f 0900 	mov.w	r9, #0
    4124:	e769      	b.n	3ffa <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    4126:	2701      	movs	r7, #1
    4128:	e758      	b.n	3fdc <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    412a:	9b05      	ldr	r3, [sp, #20]
    412c:	b12b      	cbz	r3, 413a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    412e:	4641      	mov	r1, r8
    4130:	4630      	mov	r0, r6
    4132:	f7ff fed7 	bl	3ee4 <FatFile::makeUniqueSfn(FatLfn_t*)>
    4136:	2800      	cmp	r0, #0
    4138:	d08f      	beq.n	405a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    413a:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    413c:	4642      	mov	r2, r8
    413e:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    4140:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    4142:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    4146:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    4148:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    414a:	4629      	mov	r1, r5
    414c:	f7ff fd84 	bl	3c58 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    4150:	2800      	cmp	r0, #0
    4152:	d082      	beq.n	405a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    4154:	0169      	lsls	r1, r5, #5
    4156:	4630      	mov	r0, r6
    4158:	f7ff fb76 	bl	3848 <FatFile::seekSet(unsigned long)>
    415c:	2800      	cmp	r0, #0
    415e:	f43f af7c 	beq.w	405a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    4162:	2100      	movs	r1, #0
    4164:	4630      	mov	r0, r6
    4166:	f7ff fb4d 	bl	3804 <FatFile::readDirCache(bool)>
  if (!dir) {
    416a:	4604      	mov	r4, r0
    416c:	2800      	cmp	r0, #0
    416e:	f43f af74 	beq.w	405a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    4172:	2220      	movs	r2, #32
    4174:	2100      	movs	r1, #0
    4176:	f008 fb41 	bl	c7fc <memset>
  memcpy(dir->name, fname->sfn, 11);
    417a:	f8d8 2016 	ldr.w	r2, [r8, #22]
    417e:	f8d8 301a 	ldr.w	r3, [r8, #26]
    4182:	6022      	str	r2, [r4, #0]
    4184:	6063      	str	r3, [r4, #4]
    4186:	f898 3020 	ldrb.w	r3, [r8, #32]
    418a:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    418e:	72a3      	strb	r3, [r4, #10]
    4190:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    4192:	f898 3015 	ldrb.w	r3, [r8, #21]
    4196:	f003 0318 	and.w	r3, r3, #24
    419a:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    419c:	4b23      	ldr	r3, [pc, #140]	; (422c <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    419e:	681b      	ldr	r3, [r3, #0]
    41a0:	2b00      	cmp	r3, #0
    41a2:	d03b      	beq.n	421c <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    41a4:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    41a8:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    41ac:	a809      	add	r0, sp, #36	; 0x24
    41ae:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    41b0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    41b4:	8223      	strh	r3, [r4, #16]
    41b6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    41ba:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    41bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    41c0:	7363      	strb	r3, [r4, #13]
    41c2:	9a07      	ldr	r2, [sp, #28]
    41c4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    41c8:	f043 0301 	orr.w	r3, r3, #1
    41cc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    41d0:	9b03      	ldr	r3, [sp, #12]
    41d2:	462a      	mov	r2, r5
    41d4:	4631      	mov	r1, r6
    41d6:	9802      	ldr	r0, [sp, #8]
    41d8:	9700      	str	r7, [sp, #0]
    41da:	f7ff fb8d 	bl	38f8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    41de:	e73d      	b.n	405c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    41e0:	f1bb 0f01 	cmp.w	fp, #1
    41e4:	f47f af39 	bne.w	405a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    41e8:	300a      	adds	r0, #10
    41ea:	e001      	b.n	41f0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    41ec:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    41f0:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    41f4:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    41f6:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    41fa:	fa52 f281 	uxtab	r2, r2, r1
    41fe:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    4202:	d1f3      	bne.n	41ec <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    4204:	9b06      	ldr	r3, [sp, #24]
    4206:	4563      	cmp	r3, ip
    4208:	f47f af27 	bne.w	405a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    420c:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    420e:	9b03      	ldr	r3, [sp, #12]
    4210:	0519      	lsls	r1, r3, #20
    4212:	f53f af22 	bmi.w	405a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    4216:	e7db      	b.n	41d0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    4218:	461f      	mov	r7, r3
    421a:	e7f8      	b.n	420e <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    421c:	f245 6321 	movw	r3, #22049	; 0x5621
    4220:	8223      	strh	r3, [r4, #16]
    4222:	8323      	strh	r3, [r4, #24]
    4224:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    4226:	e7cc      	b.n	41c2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    4228:	4ec4ec4f 	.word	0x4ec4ec4f
    422c:	2002109c 	.word	0x2002109c

00004230 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    4230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4234:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    4236:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
    4238:	b082      	sub	sp, #8
    423a:	460c      	mov	r4, r1
  while (*path == ' ') {
    423c:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
    423e:	4615      	mov	r5, r2
  while (*path == ' ') {
    4240:	d103      	bne.n	424a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    4242:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    4246:	2b20      	cmp	r3, #32
    4248:	d0fb      	beq.n	4242 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
    424a:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    424c:	7823      	ldrb	r3, [r4, #0]
    424e:	b363      	cbz	r3, 42aa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    4250:	2b2f      	cmp	r3, #47	; 0x2f
    4252:	d02a      	beq.n	42aa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
    4254:	f04f 0800 	mov.w	r8, #0
    4258:	4e29      	ldr	r6, [pc, #164]	; (4300 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    425a:	1d21      	adds	r1, r4, #4
    425c:	4620      	mov	r0, r4
    425e:	aa01      	add	r2, sp, #4
    4260:	f002 fd5e 	bl	6d20 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    4264:	4604      	mov	r4, r0
    4266:	b170      	cbz	r0, 4286 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    4268:	9b01      	ldr	r3, [sp, #4]
    426a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    426e:	d240      	bcs.n	42f2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
    4270:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    4272:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    4276:	d831      	bhi.n	42dc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
    4278:	2b3c      	cmp	r3, #60	; 0x3c
    427a:	b2d9      	uxtb	r1, r3
    427c:	d829      	bhi.n	42d2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    427e:	2921      	cmp	r1, #33	; 0x21
    4280:	d805      	bhi.n	428e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
    4282:	291f      	cmp	r1, #31
    4284:	d809      	bhi.n	429a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
    4286:	2000      	movs	r0, #0
    4288:	b002      	add	sp, #8
    428a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    428e:	3922      	subs	r1, #34	; 0x22
    4290:	b2c9      	uxtb	r1, r1
    4292:	fa26 f101 	lsr.w	r1, r6, r1
    4296:	07ca      	lsls	r2, r1, #31
    4298:	d4f5      	bmi.n	4286 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
    429a:	2b2e      	cmp	r3, #46	; 0x2e
    429c:	d001      	beq.n	42a2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    429e:	2b20      	cmp	r3, #32
    42a0:	d11c      	bne.n	42dc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
    42a2:	7823      	ldrb	r3, [r4, #0]
    42a4:	b10b      	cbz	r3, 42aa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    42a6:	2b2f      	cmp	r3, #47	; 0x2f
    42a8:	d1d7      	bne.n	425a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    42aa:	692b      	ldr	r3, [r5, #16]
    42ac:	3b01      	subs	r3, #1
    42ae:	2bfe      	cmp	r3, #254	; 0xfe
    42b0:	d8e9      	bhi.n	4286 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    42b2:	7823      	ldrb	r3, [r4, #0]
    42b4:	2b20      	cmp	r3, #32
    42b6:	d103      	bne.n	42c0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    42b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    42bc:	2b20      	cmp	r3, #32
    42be:	d0fb      	beq.n	42b8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
    42c0:	2b2f      	cmp	r3, #47	; 0x2f
    42c2:	d0f9      	beq.n	42b8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
    42c4:	4628      	mov	r0, r5
  *ptr = path;
    42c6:	603c      	str	r4, [r7, #0]
}
    42c8:	b002      	add	sp, #8
    42ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
    42ce:	f7ff bd55 	b.w	3d7c <FatFile::makeSFN(FatLfn_t*)>
    42d2:	295c      	cmp	r1, #92	; 0x5c
    42d4:	d0d7      	beq.n	4286 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    42d6:	d905      	bls.n	42e4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
    42d8:	297c      	cmp	r1, #124	; 0x7c
    42da:	d0d4      	beq.n	4286 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
    42dc:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    42e0:	60ac      	str	r4, [r5, #8]
    42e2:	e7de      	b.n	42a2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    42e4:	393e      	subs	r1, #62	; 0x3e
    42e6:	2901      	cmp	r1, #1
    42e8:	d8f8      	bhi.n	42dc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
    42ea:	2000      	movs	r0, #0
    42ec:	b002      	add	sp, #8
    42ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
    42f2:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
    42f6:	60ac      	str	r4, [r5, #8]
      fname->len = len;
    42f8:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    42fc:	e7d1      	b.n	42a2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    42fe:	bf00      	nop
    4300:	05002101 	.word	0x05002101

00004304 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    4304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4308:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    430c:	b1a2      	cbz	r2, 4338 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    430e:	4605      	mov	r5, r0
    4310:	460c      	mov	r4, r1
    4312:	4698      	mov	r8, r3
    4314:	1857      	adds	r7, r2, r1
    4316:	e001      	b.n	431c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
    4318:	42bc      	cmp	r4, r7
    431a:	d00d      	beq.n	4338 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    431c:	682b      	ldr	r3, [r5, #0]
    431e:	4620      	mov	r0, r4
    4320:	4649      	mov	r1, r9
    4322:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    4324:	47c0      	blx	r8
    4326:	4621      	mov	r1, r4
    4328:	4602      	mov	r2, r0
    432a:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
    432c:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    432e:	47b0      	blx	r6
    4330:	2800      	cmp	r0, #0
    4332:	d1f1      	bne.n	4318 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    4334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    4338:	2001      	movs	r0, #1
  }
    433a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    433e:	bf00      	nop

00004340 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
  if (i < 5) {
    4340:	2a04      	cmp	r2, #4
    4342:	d804      	bhi.n	434e <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    4344:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    4348:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    434c:	4770      	bx	lr
  } else if (i < 11) {
    434e:	2a0a      	cmp	r2, #10
    4350:	d803      	bhi.n	435a <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    4352:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    4356:	8890      	ldrh	r0, [r2, #4]
    4358:	4770      	bx	lr
  } else if (i < 13) {
    435a:	2a0c      	cmp	r2, #12
    435c:	d803      	bhi.n	4366 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
    435e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    4362:	88c8      	ldrh	r0, [r1, #6]
    4364:	4770      	bx	lr
  return 0;
    4366:	2000      	movs	r0, #0
}
    4368:	4770      	bx	lr
    436a:	bf00      	nop

0000436c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    436c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4370:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
    4374:	b1c3      	cbz	r3, 43a8 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    4376:	4681      	mov	r9, r0
    4378:	460c      	mov	r4, r1
    437a:	4615      	mov	r5, r2
    437c:	185e      	adds	r6, r3, r1
    437e:	e002      	b.n	4386 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
    4380:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    4382:	42b4      	cmp	r4, r6
    4384:	d010      	beq.n	43a8 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
    4386:	f8d9 3000 	ldr.w	r3, [r9]
    438a:	4621      	mov	r1, r4
    438c:	462a      	mov	r2, r5
    438e:	4648      	mov	r0, r9
    4390:	691b      	ldr	r3, [r3, #16]
    4392:	4798      	blx	r3
    4394:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
    4396:	463a      	mov	r2, r7
    4398:	4620      	mov	r0, r4
    439a:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
    439c:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
    439e:	2b00      	cmp	r3, #0
    43a0:	d1ee      	bne.n	4380 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
    43a2:	4618      	mov	r0, r3
    43a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
    43a8:	2301      	movs	r3, #1
  }
    43aa:	4618      	mov	r0, r3
    43ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000043b0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    43b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    43b4:	79c3      	ldrb	r3, [r0, #7]
    43b6:	4604      	mov	r4, r0
    43b8:	460d      	mov	r5, r1
    43ba:	4617      	mov	r7, r2
  if (fatType() == 32) {
    43bc:	2b20      	cmp	r3, #32
    43be:	d059      	beq.n	4474 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
    43c0:	2b10      	cmp	r3, #16
    43c2:	d030      	beq.n	4426 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    43c4:	2b0c      	cmp	r3, #12
    43c6:	d151      	bne.n	446c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    43c8:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
    43ca:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    43ce:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    43d0:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    43d4:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    43d8:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    43dc:	4648      	mov	r0, r9
    43de:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    43e0:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    43e4:	f3c1 2146 	ubfx	r1, r1, #9, #7
    43e8:	0952      	lsrs	r2, r2, #5
    43ea:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
    43ee:	0052      	lsls	r2, r2, #1
    43f0:	4641      	mov	r1, r8
    43f2:	f002 fc47 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    43f6:	2800      	cmp	r0, #0
    43f8:	d038      	beq.n	446c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
    43fa:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
    43fe:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
    4400:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
    4402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4406:	d023      	beq.n	4450 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
    4408:	4418      	add	r0, r3
    440a:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    440c:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
    440e:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
    4410:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    4414:	bf4c      	ite	mi
    4416:	091b      	lsrmi	r3, r3, #4
    4418:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
    441c:	429a      	cmp	r2, r3
    441e:	d240      	bcs.n	44a2 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
    4420:	2000      	movs	r0, #0
}
    4422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4426:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    4428:	f3c1 2107 	ubfx	r1, r1, #8, #8
    442c:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    442e:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4432:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    4436:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4438:	fab2 f282 	clz	r2, r2
    443c:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    443e:	0052      	lsls	r2, r2, #1
    4440:	f002 fc20 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4444:	b190      	cbz	r0, 446c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    4446:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
    4448:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
    444c:	5b43      	ldrh	r3, [r0, r5]
    444e:	e025      	b.n	449c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4450:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
    4452:	f108 0101 	add.w	r1, r8, #1
    4456:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4458:	f1a2 0202 	sub.w	r2, r2, #2
    445c:	fab2 f282 	clz	r2, r2
    4460:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    4462:	0052      	lsls	r2, r2, #1
    4464:	f002 fc0e 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    4468:	2800      	cmp	r0, #0
    446a:	d1ce      	bne.n	440a <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
    446c:	f04f 30ff 	mov.w	r0, #4294967295
}
    4470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4474:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4476:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    4478:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    447c:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    4480:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4484:	fab2 f282 	clz	r2, r2
    4488:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    448a:	0052      	lsls	r2, r2, #1
    448c:	f002 fbfa 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4490:	2800      	cmp	r0, #0
    4492:	d0eb      	beq.n	446c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    4494:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
    4496:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    449a:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
    449c:	69e2      	ldr	r2, [r4, #28]
    449e:	429a      	cmp	r2, r3
    44a0:	d3be      	bcc.n	4420 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
    44a2:	2001      	movs	r0, #1
  *value = next;
    44a4:	603b      	str	r3, [r7, #0]
}
    44a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    44aa:	bf00      	nop

000044ac <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    44ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    44b0:	79c3      	ldrb	r3, [r0, #7]
    44b2:	4605      	mov	r5, r0
    44b4:	460c      	mov	r4, r1
    44b6:	4616      	mov	r6, r2
  if (fatType() == 32) {
    44b8:	2b20      	cmp	r3, #32
    44ba:	d048      	beq.n	454e <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
    44bc:	2b10      	cmp	r3, #16
    44be:	d02d      	beq.n	451c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
    44c0:	2b0c      	cmp	r3, #12
    44c2:	d141      	bne.n	4548 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
    44c4:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    44c8:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    44ca:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    44ce:	fa11 f184 	uxtah	r1, r1, r4
    44d2:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    44d6:	f3c1 2146 	ubfx	r1, r1, #9, #7
    44da:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    44dc:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    44de:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    44e0:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    44e2:	4639      	mov	r1, r7
    44e4:	bf14      	ite	ne
    44e6:	2201      	movne	r2, #1
    44e8:	2203      	moveq	r2, #3
    44ea:	f002 fbcb 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    44ee:	b358      	cbz	r0, 4548 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
    44f0:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
    44f4:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
    44f8:	d03f      	beq.n	457a <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
    44fa:	5cc2      	ldrb	r2, [r0, r3]
    44fc:	f002 020f 	and.w	r2, r2, #15
    4500:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
    4504:	54c2      	strb	r2, [r0, r3]
    index++;
    4506:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    4508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    450c:	d03a      	beq.n	4584 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
    450e:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    4512:	4403      	add	r3, r0
    return true;
    4514:	2001      	movs	r0, #1
    pc[index] = tmp;
    4516:	701a      	strb	r2, [r3, #0]
}
    4518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    451c:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    451e:	f3c1 2107 	ubfx	r1, r1, #8, #8
    4522:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    4524:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4528:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    452a:	4419      	add	r1, r3
    452c:	bf14      	ite	ne
    452e:	2201      	movne	r2, #1
    4530:	2203      	moveq	r2, #3
    4532:	f002 fba7 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4536:	4603      	mov	r3, r0
    4538:	b130      	cbz	r0, 4548 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    453a:	0064      	lsls	r4, r4, #1
    return true;
    453c:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    453e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    4542:	531e      	strh	r6, [r3, r4]
}
    4544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    4548:	2000      	movs	r0, #0
}
    454a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    454e:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4550:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    4552:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4556:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    4558:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    455c:	bf14      	ite	ne
    455e:	2201      	movne	r2, #1
    4560:	2203      	moveq	r2, #3
    4562:	f002 fb8f 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4566:	4603      	mov	r3, r0
    4568:	2800      	cmp	r0, #0
    456a:	d0ed      	beq.n	4548 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    456c:	00a4      	lsls	r4, r4, #2
    return true;
    456e:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    4570:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    4574:	511e      	str	r6, [r3, r4]
}
    4576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
    457a:	54c6      	strb	r6, [r0, r3]
    index++;
    457c:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    457e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4582:	d115      	bne.n	45b0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    4584:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    4586:	1c79      	adds	r1, r7, #1
    4588:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    458a:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    458c:	bf14      	ite	ne
    458e:	2201      	movne	r2, #1
    4590:	2203      	moveq	r2, #3
    4592:	f002 fb77 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    4596:	4603      	mov	r3, r0
    4598:	2800      	cmp	r0, #0
    459a:	d0d5      	beq.n	4548 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
    459c:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
    45a0:	2c00      	cmp	r4, #0
    45a2:	d1b7      	bne.n	4514 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    45a4:	7819      	ldrb	r1, [r3, #0]
    45a6:	f021 010f 	bic.w	r1, r1, #15
    45aa:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
    45ae:	e7b1      	b.n	4514 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
    45b0:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    45b4:	4403      	add	r3, r0
    45b6:	e7f5      	b.n	45a4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

000045b8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    45b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    45bc:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    45be:	b082      	sub	sp, #8
    45c0:	4605      	mov	r5, r0
    45c2:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    45c4:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    45c6:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    45c8:	d340      	bcc.n	464c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
    45ca:	2701      	movs	r7, #1
    find++;
    45cc:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    45ce:	69eb      	ldr	r3, [r5, #28]
    45d0:	aa01      	add	r2, sp, #4
    45d2:	4628      	mov	r0, r5
    45d4:	42a3      	cmp	r3, r4
    45d6:	d205      	bcs.n	45e4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    45d8:	bb9f      	cbnz	r7, 4642 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
    45da:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    45dc:	2701      	movs	r7, #1
    find++;
    45de:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    45e0:	42a3      	cmp	r3, r4
    45e2:	d32e      	bcc.n	4642 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
    45e4:	42a6      	cmp	r6, r4
    45e6:	bf18      	it	ne
    45e8:	2c01      	cmpne	r4, #1
    45ea:	4621      	mov	r1, r4
    45ec:	d929      	bls.n	4642 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    45ee:	f7ff fedf 	bl	43b0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    45f2:	2800      	cmp	r0, #0
    45f4:	db25      	blt.n	4642 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
    45f6:	d0e9      	beq.n	45cc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    45f8:	9b01      	ldr	r3, [sp, #4]
    45fa:	2b00      	cmp	r3, #0
    45fc:	d1e6      	bne.n	45cc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    45fe:	b107      	cbz	r7, 4602 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    4600:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
    4602:	69eb      	ldr	r3, [r5, #28]
    4604:	42a3      	cmp	r3, r4
    4606:	d31c      	bcc.n	4642 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    4608:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    460c:	4621      	mov	r1, r4
    460e:	4628      	mov	r0, r5
    4610:	f7ff ff4c 	bl	44ac <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
    4614:	4607      	mov	r7, r0
    4616:	b1a0      	cbz	r0, 4642 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
    4618:	b93e      	cbnz	r6, 462a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
    461a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    461c:	2b00      	cmp	r3, #0
    461e:	db01      	blt.n	4624 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
    4620:	3b01      	subs	r3, #1
    4622:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    4624:	f8c8 4000 	str.w	r4, [r8]
  return true;
    4628:	e00c      	b.n	4644 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
    462a:	2e01      	cmp	r6, #1
    462c:	d009      	beq.n	4642 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    462e:	69eb      	ldr	r3, [r5, #28]
    4630:	429e      	cmp	r6, r3
    4632:	d806      	bhi.n	4642 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    4634:	4631      	mov	r1, r6
    4636:	4622      	mov	r2, r4
    4638:	4628      	mov	r0, r5
    463a:	f7ff ff37 	bl	44ac <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
    463e:	2800      	cmp	r0, #0
    4640:	d1eb      	bne.n	461a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
    4642:	2700      	movs	r7, #0
}
    4644:	4638      	mov	r0, r7
    4646:	b002      	add	sp, #8
    4648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    464c:	460c      	mov	r4, r1
    setStart = false;
    464e:	2700      	movs	r7, #0
    4650:	e7bc      	b.n	45cc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    4652:	bf00      	nop

00004654 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    4654:	2901      	cmp	r1, #1
    4656:	d90c      	bls.n	4672 <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4658:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    465a:	69c4      	ldr	r4, [r0, #28]
    465c:	428c      	cmp	r4, r1
    465e:	d303      	bcc.n	4668 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    4660:	f85d 4b04 	ldr.w	r4, [sp], #4
    4664:	f7ff bea4 	b.w	43b0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    4668:	f04f 30ff 	mov.w	r0, #4294967295
    466c:	f85d 4b04 	ldr.w	r4, [sp], #4
    4670:	4770      	bx	lr
    4672:	f04f 30ff 	mov.w	r0, #4294967295
    4676:	4770      	bx	lr

00004678 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    4678:	b570      	push	{r4, r5, r6, lr}
    467a:	4605      	mov	r5, r0
    467c:	b082      	sub	sp, #8
    467e:	460c      	mov	r4, r1
    4680:	e01d      	b.n	46be <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    4682:	69eb      	ldr	r3, [r5, #28]
    4684:	429c      	cmp	r4, r3
    4686:	d81f      	bhi.n	46c8 <FatPartition::freeChain(unsigned long)+0x50>
    4688:	f7ff fe92 	bl	43b0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    468c:	4606      	mov	r6, r0
    if (fg < 0) {
    468e:	4621      	mov	r1, r4
    4690:	2200      	movs	r2, #0
    4692:	2e00      	cmp	r6, #0
    4694:	4628      	mov	r0, r5
    4696:	db17      	blt.n	46c8 <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
    4698:	69eb      	ldr	r3, [r5, #28]
    469a:	429c      	cmp	r4, r3
    469c:	d814      	bhi.n	46c8 <FatPartition::freeChain(unsigned long)+0x50>
    469e:	f7ff ff05 	bl	44ac <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
    46a2:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    46a4:	b180      	cbz	r0, 46c8 <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
    46a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    46a8:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
    46aa:	f103 0301 	add.w	r3, r3, #1
    46ae:	bfa8      	it	ge
    46b0:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    46b2:	68eb      	ldr	r3, [r5, #12]
    46b4:	42a3      	cmp	r3, r4
    cluster = next;
    46b6:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    46b8:	bf88      	it	hi
    46ba:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    46bc:	b12e      	cbz	r6, 46ca <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
    46be:	2c01      	cmp	r4, #1
    46c0:	4621      	mov	r1, r4
    46c2:	aa01      	add	r2, sp, #4
    46c4:	4628      	mov	r0, r5
    46c6:	d8dc      	bhi.n	4682 <FatPartition::freeChain(unsigned long)+0xa>
  return false;
    46c8:	2000      	movs	r0, #0
}
    46ca:	b002      	add	sp, #8
    46cc:	bd70      	pop	{r4, r5, r6, pc}
    46ce:	bf00      	nop

000046d0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
  return state.free_count;
}


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    46d0:	b570      	push	{r4, r5, r6, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    46d2:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    46d4:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    46d6:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
    46d8:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
    46da:	f04f 32ff 	mov.w	r2, #4294967295
  m_cache.init(dev);
    46de:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
    46e2:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
    46e4:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
    46e6:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
    46e8:	62e1      	str	r1, [r4, #44]	; 0x2c
    46ea:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    46ee:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    46f2:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    46f6:	6362      	str	r2, [r4, #52]	; 0x34
    46f8:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
    46fc:	b1cd      	cbz	r5, 4732 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    46fe:	2d04      	cmp	r5, #4
    4700:	d901      	bls.n	4706 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    4702:	2000      	movs	r0, #0
}
    4704:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    4706:	461a      	mov	r2, r3
    4708:	4619      	mov	r1, r3
    470a:	4630      	mov	r0, r6
    470c:	f002 faba 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    4710:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    4714:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    4718:	442b      	add	r3, r5
    471a:	011d      	lsls	r5, r3, #4
    471c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    4720:	2800      	cmp	r0, #0
    4722:	d0ee      	beq.n	4702 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    4724:	7919      	ldrb	r1, [r3, #4]
    4726:	2900      	cmp	r1, #0
    4728:	d0eb      	beq.n	4702 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    472a:	5d52      	ldrb	r2, [r2, r5]
    472c:	0652      	lsls	r2, r2, #25
    472e:	d1e8      	bne.n	4702 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    4730:	689d      	ldr	r5, [r3, #8]
    4732:	2200      	movs	r2, #0
    4734:	4629      	mov	r1, r5
    4736:	4630      	mov	r0, r6
    4738:	f002 faa4 	bl	6c84 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    473c:	2800      	cmp	r0, #0
    473e:	d0e0      	beq.n	4702 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    4740:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    4744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4748:	d1db      	bne.n	4702 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    474a:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    474c:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
    474e:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    4750:	2a01      	cmp	r2, #1
    4752:	d8d6      	bhi.n	4702 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    4754:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    4756:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4758:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    475a:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    475c:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    475e:	f04f 0300 	mov.w	r3, #0
    4762:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4764:	d044      	beq.n	47f0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
    4766:	2201      	movs	r2, #1
    4768:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    476a:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    476c:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    476e:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4770:	4291      	cmp	r1, r2
    4772:	d004      	beq.n	477e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
    4774:	2b08      	cmp	r3, #8
    4776:	d1f7      	bne.n	4768 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
    4778:	2000      	movs	r0, #0
    477a:	71a3      	strb	r3, [r4, #6]
}
    477c:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
    477e:	461e      	mov	r6, r3
    4780:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    4782:	8ac1      	ldrh	r1, [r0, #22]
    4784:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    4786:	b909      	cbnz	r1, 478c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
    4788:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    478a:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    478c:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    478e:	f8b0 3011 	ldrh.w	r3, [r0, #17]
    4792:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    4794:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    4796:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    4798:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    479a:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    479e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    47a2:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
    47a6:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    47aa:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
    47ac:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    47b0:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    47b2:	b902      	cbnz	r2, 47b6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
    47b4:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    47b6:	1aed      	subs	r5, r5, r3
    47b8:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
    47ba:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
    47bc:	1c5a      	adds	r2, r3, #1
    47be:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    47c0:	f04f 32ff 	mov.w	r2, #4294967295
    47c4:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    47c6:	f640 72f4 	movw	r2, #4084	; 0xff4
    47ca:	4293      	cmp	r3, r2
    47cc:	d90c      	bls.n	47e8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    47ce:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    47d2:	4293      	cmp	r3, r2
    47d4:	d90a      	bls.n	47ec <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
    47d6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    47d8:	2320      	movs	r3, #32
    47da:	6222      	str	r2, [r4, #32]
  return true;
    47dc:	2001      	movs	r0, #1
    m_fatType = 12;
    47de:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    47e0:	6321      	str	r1, [r4, #48]	; 0x30
    47e2:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    47e6:	bd70      	pop	{r4, r5, r6, pc}
    47e8:	230c      	movs	r3, #12
    47ea:	e7f7      	b.n	47dc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
    47ec:	2310      	movs	r3, #16
    47ee:	e7f5      	b.n	47dc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    47f0:	461e      	mov	r6, r3
    47f2:	e7c6      	b.n	4782 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

000047f4 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    47f4:	b530      	push	{r4, r5, lr}
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    47f6:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    47fa:	b08b      	sub	sp, #44	; 0x2c
  FatFile() {}
    47fc:	2300      	movs	r3, #0
    47fe:	460a      	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    4800:	a801      	add	r0, sp, #4
    4802:	4621      	mov	r1, r4
    4804:	9301      	str	r3, [sp, #4]
    4806:	f7fe fe6d 	bl	34e4 <FatFile::open(FatFile*, char const*, int)>
    480a:	4605      	mov	r5, r0
    480c:	b198      	cbz	r0, 4836 <FatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    480e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4812:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    4816:	d011      	beq.n	483c <FatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    4818:	f10d 0e04 	add.w	lr, sp, #4
    481c:	46a4      	mov	ip, r4
    481e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4822:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4826:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    482a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    482e:	f8de 3000 	ldr.w	r3, [lr]
    4832:	f8cc 3000 	str.w	r3, [ip]
  return true;

 fail:
  return false;
}
    4836:	4628      	mov	r0, r5
    4838:	b00b      	add	sp, #44	; 0x2c
    483a:	bd30      	pop	{r4, r5, pc}
  return false;
    483c:	461d      	mov	r5, r3
}
    483e:	4628      	mov	r0, r5
    4840:	b00b      	add	sp, #44	; 0x2c
    4842:	bd30      	pop	{r4, r5, pc}

00004844 <FsBaseFile::operator=(FsBaseFile const&)>:
  if (this == &from) return *this;
    4844:	4288      	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    4846:	b570      	push	{r4, r5, r6, lr}
    4848:	4604      	mov	r4, r0
  if (this == &from) return *this;
    484a:	d021      	beq.n	4890 <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
  if (m_fFile && m_fFile->close()) {
    484c:	6b80      	ldr	r0, [r0, #56]	; 0x38
    484e:	460d      	mov	r5, r1
    4850:	b118      	cbz	r0, 485a <FsBaseFile::operator=(FsBaseFile const&)+0x16>
    4852:	f7fe fd0b 	bl	326c <FatFile::close()>
    4856:	2800      	cmp	r0, #0
    4858:	d141      	bne.n	48de <FsBaseFile::operator=(FsBaseFile const&)+0x9a>
  if (m_xFile && m_xFile->close()) {
    485a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    485c:	b118      	cbz	r0, 4866 <FsBaseFile::operator=(FsBaseFile const&)+0x22>
    485e:	f7fd f99d 	bl	1b9c <ExFatFile::close()>
    4862:	2800      	cmp	r0, #0
    4864:	d141      	bne.n	48ea <FsBaseFile::operator=(FsBaseFile const&)+0xa6>
  if (from.m_fFile) {
    4866:	6bae      	ldr	r6, [r5, #56]	; 0x38
    4868:	b1a6      	cbz	r6, 4894 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_fFile = new (m_fileMem) FatFile;
    486a:	4621      	mov	r1, r4
    486c:	2024      	movs	r0, #36	; 0x24
    486e:	f000 f8af 	bl	49d0 <operator new(unsigned int, unsigned long*)>
    4872:	2300      	movs	r3, #0
    4874:	4684      	mov	ip, r0
    4876:	8003      	strh	r3, [r0, #0]
    4878:	7083      	strb	r3, [r0, #2]
    487a:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    487c:	6bad      	ldr	r5, [r5, #56]	; 0x38
    487e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4880:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4886:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    488a:	682b      	ldr	r3, [r5, #0]
    488c:	f8cc 3000 	str.w	r3, [ip]
}
    4890:	4620      	mov	r0, r4
    4892:	bd70      	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    4894:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    4896:	2b00      	cmp	r3, #0
    4898:	d0fa      	beq.n	4890 <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
    m_xFile = new (m_fileMem) ExFatFile;
    489a:	4621      	mov	r1, r4
    489c:	2038      	movs	r0, #56	; 0x38
    489e:	f000 f897 	bl	49d0 <operator new(unsigned int, unsigned long*)>
    48a2:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    48a6:	8646      	strh	r6, [r0, #50]	; 0x32
    48a8:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    48aa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    48ac:	f103 0c30 	add.w	ip, r3, #48	; 0x30
    48b0:	681e      	ldr	r6, [r3, #0]
    48b2:	3310      	adds	r3, #16
    48b4:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    48b8:	3010      	adds	r0, #16
    48ba:	f853 1c08 	ldr.w	r1, [r3, #-8]
    48be:	f853 2c04 	ldr.w	r2, [r3, #-4]
    48c2:	4563      	cmp	r3, ip
    48c4:	f840 6c10 	str.w	r6, [r0, #-16]
    48c8:	f840 5c0c 	str.w	r5, [r0, #-12]
    48cc:	f840 1c08 	str.w	r1, [r0, #-8]
    48d0:	f840 2c04 	str.w	r2, [r0, #-4]
    48d4:	d1ec      	bne.n	48b0 <FsBaseFile::operator=(FsBaseFile const&)+0x6c>
    48d6:	681b      	ldr	r3, [r3, #0]
    48d8:	6003      	str	r3, [r0, #0]
}
    48da:	4620      	mov	r0, r4
    48dc:	bd70      	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    48de:	2300      	movs	r3, #0
    48e0:	63a3      	str	r3, [r4, #56]	; 0x38
  if (from.m_fFile) {
    48e2:	6bae      	ldr	r6, [r5, #56]	; 0x38
    48e4:	2e00      	cmp	r6, #0
    48e6:	d1c0      	bne.n	486a <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    48e8:	e7d4      	b.n	4894 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_xFile = nullptr;
    48ea:	2300      	movs	r3, #0
  if (from.m_fFile) {
    48ec:	6bae      	ldr	r6, [r5, #56]	; 0x38
    m_xFile = nullptr;
    48ee:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (from.m_fFile) {
    48f0:	2e00      	cmp	r6, #0
    48f2:	d1ba      	bne.n	486a <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    48f4:	e7ce      	b.n	4894 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    48f6:	bf00      	nop

000048f8 <FsBaseFile::close()>:
bool FsBaseFile::close() {
    48f8:	b510      	push	{r4, lr}
    48fa:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    48fc:	6b80      	ldr	r0, [r0, #56]	; 0x38
    48fe:	b110      	cbz	r0, 4906 <FsBaseFile::close()+0xe>
    4900:	f7fe fcb4 	bl	326c <FatFile::close()>
    4904:	b930      	cbnz	r0, 4914 <FsBaseFile::close()+0x1c>
  if (m_xFile && m_xFile->close()) {
    4906:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    4908:	b110      	cbz	r0, 4910 <FsBaseFile::close()+0x18>
    490a:	f7fd f947 	bl	1b9c <ExFatFile::close()>
    490e:	b920      	cbnz	r0, 491a <FsBaseFile::close()+0x22>
  return false;
    4910:	2000      	movs	r0, #0
}
    4912:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
    4914:	2300      	movs	r3, #0
    4916:	63a3      	str	r3, [r4, #56]	; 0x38
}
    4918:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
    491a:	2300      	movs	r3, #0
    491c:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    491e:	bd10      	pop	{r4, pc}

00004920 <FsBaseFile::open(FsVolume*, char const*, int)>:
  if (!vol) {
    4920:	2900      	cmp	r1, #0
    4922:	d052      	beq.n	49ca <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    4924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4928:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    492a:	6b80      	ldr	r0, [r0, #56]	; 0x38
    492c:	460d      	mov	r5, r1
    492e:	4617      	mov	r7, r2
    4930:	461e      	mov	r6, r3
    4932:	b110      	cbz	r0, 493a <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
    4934:	f7fe fc9a 	bl	326c <FatFile::close()>
    4938:	bba0      	cbnz	r0, 49a4 <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
    493a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    493c:	b110      	cbz	r0, 4944 <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
    493e:	f7fd f92d 	bl	1b9c <ExFatFile::close()>
    4942:	bbb8      	cbnz	r0, 49b4 <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
  if (vol->m_fVol) {
    4944:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    4948:	f1b8 0f00 	cmp.w	r8, #0
    494c:	d011      	beq.n	4972 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
    494e:	4621      	mov	r1, r4
    4950:	2024      	movs	r0, #36	; 0x24
    4952:	f000 f83d 	bl	49d0 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4956:	4633      	mov	r3, r6
    4958:	2600      	movs	r6, #0
    495a:	463a      	mov	r2, r7
    495c:	8006      	strh	r6, [r0, #0]
    495e:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    4960:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4962:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    4966:	f7fe fe3f 	bl	35e8 <FatFile::open(FatVolume*, char const*, int)>
    496a:	bb58      	cbnz	r0, 49c4 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_fFile = nullptr;
    496c:	63a0      	str	r0, [r4, #56]	; 0x38
}
    496e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    4972:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    4976:	b193      	cbz	r3, 499e <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
    4978:	4621      	mov	r1, r4
    497a:	2038      	movs	r0, #56	; 0x38
    497c:	f000 f828 	bl	49d0 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    4980:	4633      	mov	r3, r6
    4982:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
    4986:	463a      	mov	r2, r7
    4988:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    498c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    498e:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    4992:	f7fd fd13 	bl	23bc <ExFatFile::open(ExFatVolume*, char const*, int)>
    4996:	b9a8      	cbnz	r0, 49c4 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
    4998:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    499a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    499e:	2000      	movs	r0, #0
}
    49a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
    49a4:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    49a6:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
    49aa:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    49ac:	f1b8 0f00 	cmp.w	r8, #0
    49b0:	d1cd      	bne.n	494e <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    49b2:	e7de      	b.n	4972 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
    49b4:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    49b6:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
    49ba:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
    49bc:	f1b8 0f00 	cmp.w	r8, #0
    49c0:	d1c5      	bne.n	494e <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    49c2:	e7d6      	b.n	4972 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
    49c4:	2001      	movs	r0, #1
}
    49c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    49ca:	2000      	movs	r0, #0
}
    49cc:	4770      	bx	lr
    49ce:	bf00      	nop

000049d0 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    49d0:	4608      	mov	r0, r1
    49d2:	4770      	bx	lr

000049d4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    49d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    49d8:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    49da:	4604      	mov	r4, r0
    49dc:	4698      	mov	r8, r3
  m_blockDev = blockDev;
    49de:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    49e2:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    49e6:	4601      	mov	r1, r0
    49e8:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    49ec:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
    49ee:	f7ff ffef 	bl	49d0 <operator new(unsigned int, unsigned long*)>
    if (!init(dev, part)) {
    49f2:	4642      	mov	r2, r8
  ExFatPartition() {}
    49f4:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    49f8:	4605      	mov	r5, r0
    49fa:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    49fe:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
    4a02:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
    4a06:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    4a0a:	f7fe fad3 	bl	2fb4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    4a0e:	bba0      	cbnz	r0, 4a7a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    4a10:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    4a12:	4621      	mov	r1, r4
    4a14:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    4a18:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    4a1c:	f7ff ffd8 	bl	49d0 <operator new(unsigned int, unsigned long*)>
  FatPartition() {}
    4a20:	2302      	movs	r3, #2
    4a22:	71c6      	strb	r6, [r0, #7]
    if (!init(dev, part)) {
    4a24:	4642      	mov	r2, r8
    4a26:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
    4a2a:	4605      	mov	r5, r0
    4a2c:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
    4a30:	7203      	strb	r3, [r0, #8]
    4a32:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
    4a36:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    4a3a:	f7ff fe49 	bl	46d0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    4a3e:	b938      	cbnz	r0, 4a50 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    4a40:	2300      	movs	r3, #0
    4a42:	4a1a      	ldr	r2, [pc, #104]	; (4aac <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  m_fVol = nullptr;
  return false;
    4a44:	4618      	mov	r0, r3
  m_cwv = nullptr;
    4a46:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
    4a48:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    4a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    4a50:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    4a54:	4630      	mov	r0, r6
    4a56:	f7fe fc09 	bl	326c <FatFile::close()>
    return m_vwd.openRoot(this);
    4a5a:	4629      	mov	r1, r5
    4a5c:	4630      	mov	r0, r6
    4a5e:	f7fe fdcb 	bl	35f8 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    4a62:	2800      	cmp	r0, #0
    4a64:	d0ec      	beq.n	4a40 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
    4a66:	4b12      	ldr	r3, [pc, #72]	; (4ab0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
    4a68:	681a      	ldr	r2, [r3, #0]
    4a6a:	b9aa      	cbnz	r2, 4a98 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
    4a6c:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
    4a6e:	4b0f      	ldr	r3, [pc, #60]	; (4aac <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    4a70:	b1af      	cbz	r7, 4a9e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
    4a72:	2001      	movs	r0, #1
    m_cwv = this;
    4a74:	601c      	str	r4, [r3, #0]
}
    4a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    4a7a:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    4a7e:	4630      	mov	r0, r6
    4a80:	f7fd f88c 	bl	1b9c <ExFatFile::close()>
    return m_vwd.openRoot(this);
    4a84:	4629      	mov	r1, r5
    4a86:	4630      	mov	r0, r6
    4a88:	f7fd f892 	bl	1bb0 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    4a8c:	2800      	cmp	r0, #0
    4a8e:	d0bf      	beq.n	4a10 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
    4a90:	4b08      	ldr	r3, [pc, #32]	; (4ab4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    4a92:	681a      	ldr	r2, [r3, #0]
    4a94:	2a00      	cmp	r2, #0
    4a96:	d0e9      	beq.n	4a6c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
    4a98:	4b04      	ldr	r3, [pc, #16]	; (4aac <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    4a9a:	2f00      	cmp	r7, #0
    4a9c:	d1e9      	bne.n	4a72 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    4a9e:	681a      	ldr	r2, [r3, #0]
    4aa0:	2a00      	cmp	r2, #0
    4aa2:	d0e6      	beq.n	4a72 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
    4aa4:	2001      	movs	r0, #1
}
    4aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4aaa:	bf00      	nop
    4aac:	20021170 	.word	0x20021170
    4ab0:	20021174 	.word	0x20021174
    4ab4:	2002111c 	.word	0x2002111c

00004ab8 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    4ab8:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    4aba:	2500      	movs	r5, #0
    4abc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    4ac0:	4604      	mov	r4, r0
    4ac2:	6045      	str	r5, [r0, #4]
    4ac4:	7305      	strb	r5, [r0, #12]
    4ac6:	6086      	str	r6, [r0, #8]
    4ac8:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    4acc:	4d03      	ldr	r5, [pc, #12]	; (4adc <FsVolume::open(char const*, int)+0x24>)
    4ace:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    4ad2:	f7ff ff25 	bl	4920 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    4ad6:	4620      	mov	r0, r4
    4ad8:	bd70      	pop	{r4, r5, r6, pc}
    4ada:	bf00      	nop
    4adc:	20000a70 	.word	0x20000a70

00004ae0 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    4ae0:	f04f 30ff 	mov.w	r0, #4294967295
    4ae4:	4770      	bx	lr
    4ae6:	bf00      	nop

00004ae8 <SharedSpiCard::errorCode() const>:
  }
    4ae8:	7c40      	ldrb	r0, [r0, #17]
    4aea:	4770      	bx	lr

00004aec <SharedSpiCard::errorData() const>:
  }
    4aec:	7d00      	ldrb	r0, [r0, #20]
    4aee:	4770      	bx	lr

00004af0 <SharedSpiCard::type() const>:
  }
    4af0:	7d40      	ldrb	r0, [r0, #21]
    4af2:	4770      	bx	lr

00004af4 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    4af4:	2001      	movs	r0, #1
    4af6:	4770      	bx	lr

00004af8 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    4af8:	7f00      	ldrb	r0, [r0, #28]
    4afa:	4770      	bx	lr

00004afc <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    4afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b00:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4b02:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    4b04:	4605      	mov	r5, r0
    4b06:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4b08:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    4b0a:	4691      	mov	r9, r2
    4b0c:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4b0e:	d028      	beq.n	4b62 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
    4b10:	682b      	ldr	r3, [r5, #0]
    4b12:	4621      	mov	r1, r4
    4b14:	4628      	mov	r0, r5
    4b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    4b18:	4798      	blx	r3
    4b1a:	b198      	cbz	r0, 4b44 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    4b1c:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    4b1e:	f1b9 0f00 	cmp.w	r9, #0
    4b22:	d012      	beq.n	4b4a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    4b24:	eb04 0809 	add.w	r8, r4, r9
    4b28:	e001      	b.n	4b2e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    4b2a:	45a0      	cmp	r8, r4
    4b2c:	d00d      	beq.n	4b4a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    4b2e:	4639      	mov	r1, r7
    4b30:	4620      	mov	r0, r4
    4b32:	47b0      	blx	r6
    if (!writeData(src)) {
    4b34:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
    4b36:	4601      	mov	r1, r0
    if (!writeData(src)) {
    4b38:	4628      	mov	r0, r5
    4b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
    4b3c:	3401      	adds	r4, #1
    if (!writeData(src)) {
    4b3e:	4798      	blx	r3
    4b40:	2800      	cmp	r0, #0
    4b42:	d1f2      	bne.n	4b2a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    4b44:	2000      	movs	r0, #0
}
    4b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
    4b4a:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    4b4c:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    4b4e:	444b      	add	r3, r9
    4b50:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    4b52:	2800      	cmp	r0, #0
    4b54:	d1f7      	bne.n	4b46 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    4b56:	682b      	ldr	r3, [r5, #0]
    4b58:	4628      	mov	r0, r5
    4b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    4b5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    4b60:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4b62:	6983      	ldr	r3, [r0, #24]
    4b64:	428b      	cmp	r3, r1
    4b66:	d1d3      	bne.n	4b10 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
    4b68:	e7d9      	b.n	4b1e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
    4b6a:	bf00      	nop

00004b6c <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    4b6c:	4770      	bx	lr
    4b6e:	bf00      	nop

00004b70 <SharedSpiCard::end()>:
    m_spiDriver.end();
    4b70:	3004      	adds	r0, #4
    4b72:	f002 b807 	b.w	6b84 <SdSpiArduinoDriver::end()>
    4b76:	bf00      	nop

00004b78 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    4b78:	b510      	push	{r4, lr}
    4b7a:	4604      	mov	r4, r0
    4b7c:	2120      	movs	r1, #32
    4b7e:	f003 fc41 	bl	8404 <operator delete(void*, unsigned int)>
    4b82:	4620      	mov	r0, r4
    4b84:	bd10      	pop	{r4, pc}
    4b86:	bf00      	nop

00004b88 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    4b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b8c:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4b8e:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    4b90:	4605      	mov	r5, r0
    4b92:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4b94:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    4b96:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4b98:	d024      	beq.n	4be4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
    4b9a:	682b      	ldr	r3, [r5, #0]
    4b9c:	4631      	mov	r1, r6
    4b9e:	4628      	mov	r0, r5
    4ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    4ba2:	4798      	blx	r3
    4ba4:	b178      	cbz	r0, 4bc6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
    4ba6:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
    4ba8:	b187      	cbz	r7, 4bcc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
    4baa:	2600      	movs	r6, #0
    4bac:	e001      	b.n	4bb2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
    4bae:	42b7      	cmp	r7, r6
    4bb0:	d00c      	beq.n	4bcc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    4bb2:	682a      	ldr	r2, [r5, #0]
    4bb4:	4621      	mov	r1, r4
    4bb6:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
    4bb8:	3601      	adds	r6, #1
    if (!writeData(src)) {
    4bba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
    4bbc:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    4bc0:	4790      	blx	r2
    4bc2:	2800      	cmp	r0, #0
    4bc4:	d1f3      	bne.n	4bae <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
    4bc6:	2000      	movs	r0, #0
}
    4bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
    4bcc:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    4bce:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    4bd0:	443b      	add	r3, r7
    4bd2:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    4bd4:	2800      	cmp	r0, #0
    4bd6:	d1f7      	bne.n	4bc8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    4bd8:	682b      	ldr	r3, [r5, #0]
    4bda:	4628      	mov	r0, r5
    4bdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    4bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    4be2:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    4be4:	6983      	ldr	r3, [r0, #24]
    4be6:	428b      	cmp	r3, r1
    4be8:	d1d7      	bne.n	4b9a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    4bea:	e7dd      	b.n	4ba8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

00004bec <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    4bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bf0:	4e20      	ldr	r6, [pc, #128]	; (4c74 <SharedSpiCard::writeStop()+0x88>)
    4bf2:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    4bf4:	f100 0804 	add.w	r8, r0, #4
    4bf8:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
    4bfa:	f505 7516 	add.w	r5, r5, #600	; 0x258
    4bfe:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    4c00:	e003      	b.n	4c0a <SharedSpiCard::writeStop()+0x1e>
    4c02:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    4c04:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4c06:	041b      	lsls	r3, r3, #16
    4c08:	d410      	bmi.n	4c2c <SharedSpiCard::writeStop()+0x40>
    4c0a:	4640      	mov	r0, r8
    4c0c:	f001 ffbe 	bl	6b8c <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4c10:	28ff      	cmp	r0, #255	; 0xff
    4c12:	4604      	mov	r4, r0
    4c14:	d1f5      	bne.n	4c02 <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    4c16:	21fd      	movs	r1, #253	; 0xfd
    4c18:	4640      	mov	r0, r8
    4c1a:	f001 ffd5 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    4c1e:	7cbb      	ldrb	r3, [r7, #18]
    4c20:	b9cb      	cbnz	r3, 4c56 <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
    4c22:	2300      	movs	r3, #0
    4c24:	2001      	movs	r0, #1
    4c26:	74fb      	strb	r3, [r7, #19]
}
    4c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    4c2c:	231e      	movs	r3, #30
  if (m_spiActive) {
    4c2e:	7cb8      	ldrb	r0, [r7, #18]
    4c30:	747b      	strb	r3, [r7, #17]
    4c32:	2800      	cmp	r0, #0
    4c34:	d0f8      	beq.n	4c28 <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
    4c36:	7c38      	ldrb	r0, [r7, #16]
    4c38:	2101      	movs	r1, #1
    4c3a:	f001 fee7 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4c3e:	21ff      	movs	r1, #255	; 0xff
    4c40:	4640      	mov	r0, r8
    4c42:	f001 ffc1 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4c46:	4640      	mov	r0, r8
    4c48:	f001 ff74 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4c4c:	2300      	movs	r3, #0
  return false;
    4c4e:	4618      	mov	r0, r3
    m_spiActive = false;
    4c50:	74bb      	strb	r3, [r7, #18]
}
    4c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
    4c56:	2101      	movs	r1, #1
    4c58:	7c38      	ldrb	r0, [r7, #16]
    4c5a:	f001 fed7 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4c5e:	4621      	mov	r1, r4
    4c60:	4640      	mov	r0, r8
    4c62:	f001 ffb1 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4c66:	4640      	mov	r0, r8
    4c68:	f001 ff64 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4c6c:	2300      	movs	r3, #0
    4c6e:	74bb      	strb	r3, [r7, #18]
}
    4c70:	e7d7      	b.n	4c22 <SharedSpiCard::writeStop()+0x36>
    4c72:	bf00      	nop
    4c74:	20022554 	.word	0x20022554

00004c78 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    4c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    4c7c:	7cc3      	ldrb	r3, [r0, #19]
    4c7e:	2b01      	cmp	r3, #1
    4c80:	d035      	beq.n	4cee <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    4c82:	7c86      	ldrb	r6, [r0, #18]
    4c84:	4604      	mov	r4, r0
    4c86:	b14e      	cbz	r6, 4c9c <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    4c88:	3004      	adds	r0, #4
    4c8a:	f001 ff7f 	bl	6b8c <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    4c8e:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4c92:	bf18      	it	ne
    4c94:	2501      	movne	r5, #1
}
    4c96:	4628      	mov	r0, r5
    4c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
    4c9c:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    4c9e:	f04f 0801 	mov.w	r8, #1
    4ca2:	4638      	mov	r0, r7
    4ca4:	f001 ff3c 	bl	6b20 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    4ca8:	4631      	mov	r1, r6
    4caa:	7c20      	ldrb	r0, [r4, #16]
    4cac:	f001 feae 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4cb0:	21ff      	movs	r1, #255	; 0xff
    4cb2:	4638      	mov	r0, r7
    4cb4:	f001 ff88 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4cb8:	4638      	mov	r0, r7
    4cba:	f884 8012 	strb.w	r8, [r4, #18]
    4cbe:	f001 ff65 	bl	6b8c <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    4cc2:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
    4cc4:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    4cc8:	bf18      	it	ne
    4cca:	2501      	movne	r5, #1
  if (m_spiActive) {
    4ccc:	2b00      	cmp	r3, #0
    4cce:	d0e2      	beq.n	4c96 <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
    4cd0:	4641      	mov	r1, r8
    4cd2:	7c20      	ldrb	r0, [r4, #16]
    4cd4:	f001 fe9a 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4cd8:	21ff      	movs	r1, #255	; 0xff
    4cda:	4638      	mov	r0, r7
    4cdc:	f001 ff74 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4ce0:	4638      	mov	r0, r7
    4ce2:	f001 ff27 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
}
    4ce6:	4628      	mov	r0, r5
    m_spiActive = false;
    4ce8:	74a6      	strb	r6, [r4, #18]
}
    4cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    4cee:	2500      	movs	r5, #0
}
    4cf0:	4628      	mov	r0, r5
    4cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4cf6:	bf00      	nop

00004cf8 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    4cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4cfc:	4f20      	ldr	r7, [pc, #128]	; (4d80 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    4cfe:	4604      	mov	r4, r0
    4d00:	4688      	mov	r8, r1
    4d02:	4691      	mov	r9, r2
    4d04:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    4d06:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
    4d08:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    4d0c:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    4d0e:	e003      	b.n	4d18 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    4d10:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    4d12:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    4d14:	041b      	lsls	r3, r3, #16
    4d16:	d40d      	bmi.n	4d34 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    4d18:	4630      	mov	r0, r6
    4d1a:	f001 ff37 	bl	6b8c <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    4d1e:	28ff      	cmp	r0, #255	; 0xff
    4d20:	7520      	strb	r0, [r4, #20]
    4d22:	d0f5      	beq.n	4d10 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    4d24:	28fe      	cmp	r0, #254	; 0xfe
    4d26:	d01a      	beq.n	4d5e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    4d28:	2318      	movs	r3, #24
  if (m_spiActive) {
    4d2a:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
    4d2c:	7463      	strb	r3, [r4, #17]
    4d2e:	b930      	cbnz	r0, 4d3e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    4d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4d34:	231d      	movs	r3, #29
  if (m_spiActive) {
    4d36:	7ca0      	ldrb	r0, [r4, #18]
    4d38:	7463      	strb	r3, [r4, #17]
    4d3a:	2800      	cmp	r0, #0
    4d3c:	d0f8      	beq.n	4d30 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
    4d3e:	7c20      	ldrb	r0, [r4, #16]
    4d40:	2101      	movs	r1, #1
    4d42:	f001 fe63 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4d46:	21ff      	movs	r1, #255	; 0xff
    4d48:	4630      	mov	r0, r6
    4d4a:	f001 ff3d 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4d4e:	4630      	mov	r0, r6
    4d50:	f001 fef0 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4d54:	2300      	movs	r3, #0
  return false;
    4d56:	4618      	mov	r0, r3
    m_spiActive = false;
    4d58:	74a3      	strb	r3, [r4, #18]
}
    4d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    4d5e:	464a      	mov	r2, r9
    4d60:	4641      	mov	r1, r8
    4d62:	4630      	mov	r0, r6
    4d64:	f001 ff1e 	bl	6ba4 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    4d68:	7520      	strb	r0, [r4, #20]
    4d6a:	b938      	cbnz	r0, 4d7c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    4d6c:	4630      	mov	r0, r6
    4d6e:	f001 ff0d 	bl	6b8c <SdSpiArduinoDriver::receive()>
    4d72:	4630      	mov	r0, r6
    4d74:	f001 ff0a 	bl	6b8c <SdSpiArduinoDriver::receive()>
  return true;
    4d78:	2001      	movs	r0, #1
    4d7a:	e7d9      	b.n	4d30 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    4d7c:	2325      	movs	r3, #37	; 0x25
    4d7e:	e7d4      	b.n	4d2a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    4d80:	20022554 	.word	0x20022554

00004d84 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    4d84:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    4d86:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    4d88:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    4d8a:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    4d8c:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    4d8e:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    4d90:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    4d92:	f000 f85b 	bl	4e4c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4d96:	b9b0      	cbnz	r0, 4dc6 <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    4d98:	7ca6      	ldrb	r6, [r4, #18]
    4d9a:	b91e      	cbnz	r6, 4da4 <SharedSpiCard::readStop()+0x20>
  return true;
    4d9c:	2601      	movs	r6, #1
}
    4d9e:	4630      	mov	r0, r6
    4da0:	b003      	add	sp, #12
    4da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    4da4:	4605      	mov	r5, r0
    4da6:	2101      	movs	r1, #1
    4da8:	7c20      	ldrb	r0, [r4, #16]
    4daa:	f001 fe2f 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4dae:	1d20      	adds	r0, r4, #4
    4db0:	21ff      	movs	r1, #255	; 0xff
    4db2:	9001      	str	r0, [sp, #4]
    4db4:	f001 ff08 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4db8:	9801      	ldr	r0, [sp, #4]
    4dba:	f001 febb 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
    4dbe:	4630      	mov	r0, r6
    m_spiActive = false;
    4dc0:	74a5      	strb	r5, [r4, #18]
}
    4dc2:	b003      	add	sp, #12
    4dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    4dc6:	2309      	movs	r3, #9
  if (m_spiActive) {
    4dc8:	7ca6      	ldrb	r6, [r4, #18]
    4dca:	7463      	strb	r3, [r4, #17]
    4dcc:	2e00      	cmp	r6, #0
    4dce:	d0e6      	beq.n	4d9e <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    4dd0:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    4dd2:	7c20      	ldrb	r0, [r4, #16]
    4dd4:	2101      	movs	r1, #1
}
    4dd6:	463e      	mov	r6, r7
    4dd8:	f001 fe18 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4ddc:	21ff      	movs	r1, #255	; 0xff
    4dde:	4628      	mov	r0, r5
    4de0:	f001 fef2 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4de4:	4628      	mov	r0, r5
    4de6:	f001 fea5 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
}
    4dea:	4630      	mov	r0, r6
    m_spiActive = false;
    4dec:	74a7      	strb	r7, [r4, #18]
}
    4dee:	b003      	add	sp, #12
    4df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4df2:	bf00      	nop

00004df4 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    4df4:	7cc2      	ldrb	r2, [r0, #19]
    4df6:	2a02      	cmp	r2, #2
    4df8:	d003      	beq.n	4e02 <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    4dfa:	2a01      	cmp	r2, #1
    4dfc:	d004      	beq.n	4e08 <SharedSpiCard::syncDevice()+0x14>
}
    4dfe:	2001      	movs	r0, #1
    4e00:	4770      	bx	lr
    return writeStop();
    4e02:	6803      	ldr	r3, [r0, #0]
    4e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4e06:	4718      	bx	r3
    return readStop();
    4e08:	f7ff bfbc 	b.w	4d84 <SharedSpiCard::readStop()>

00004e0c <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    4e0c:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    4e0e:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    4e10:	460d      	mov	r5, r1
    4e12:	490d      	ldr	r1, [pc, #52]	; (4e48 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
    4e14:	4604      	mov	r4, r0
  if (!syncDevice()) {
    4e16:	6a1a      	ldr	r2, [r3, #32]
    4e18:	428a      	cmp	r2, r1
    4e1a:	d10c      	bne.n	4e36 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
    4e1c:	7cc2      	ldrb	r2, [r0, #19]
    4e1e:	2a02      	cmp	r2, #2
    4e20:	d004      	beq.n	4e2c <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
    4e22:	2a01      	cmp	r2, #1
    4e24:	d00b      	beq.n	4e3e <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
    4e26:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    4e28:	7725      	strb	r5, [r4, #28]
}
    4e2a:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
    4e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4e2e:	4798      	blx	r3
  if (!syncDevice()) {
    4e30:	2800      	cmp	r0, #0
    4e32:	d1f8      	bne.n	4e26 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
    4e34:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
    4e36:	4790      	blx	r2
    4e38:	2800      	cmp	r0, #0
    4e3a:	d0fb      	beq.n	4e34 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    4e3c:	e7f3      	b.n	4e26 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
    4e3e:	f7ff ffa1 	bl	4d84 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    4e42:	2800      	cmp	r0, #0
    4e44:	d0f6      	beq.n	4e34 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    4e46:	e7ee      	b.n	4e26 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    4e48:	00004df5 	.word	0x00004df5

00004e4c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    4e50:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4e52:	b082      	sub	sp, #8
    4e54:	460f      	mov	r7, r1
    4e56:	4935      	ldr	r1, [pc, #212]	; (4f2c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
    4e58:	9201      	str	r2, [sp, #4]
    4e5a:	4606      	mov	r6, r0
  if (!syncDevice()) {
    4e5c:	6a1a      	ldr	r2, [r3, #32]
    4e5e:	428a      	cmp	r2, r1
    4e60:	d15e      	bne.n	4f20 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
    4e62:	7cc2      	ldrb	r2, [r0, #19]
    4e64:	2a02      	cmp	r2, #2
    4e66:	d041      	beq.n	4eec <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
    4e68:	2a01      	cmp	r2, #1
    4e6a:	d05b      	beq.n	4f24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
    4e6c:	7cb4      	ldrb	r4, [r6, #18]
    4e6e:	2c00      	cmp	r4, #0
    4e70:	d047      	beq.n	4f02 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
    4e72:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
    4e74:	2f0c      	cmp	r7, #12
    4e76:	d011      	beq.n	4e9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    4e78:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 4f30 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
    4e7c:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
    4e80:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    4e84:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    4e86:	e004      	b.n	4e92 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
    4e88:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    4e8c:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    4e8e:	041a      	lsls	r2, r3, #16
    4e90:	d434      	bmi.n	4efc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
    4e92:	4628      	mov	r0, r5
    4e94:	f001 fe7a 	bl	6b8c <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    4e98:	28ff      	cmp	r0, #255	; 0xff
    4e9a:	d1f5      	bne.n	4e88 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
    4e9c:	f10d 0804 	add.w	r8, sp, #4
    4ea0:	ac02      	add	r4, sp, #8
    4ea2:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    4ea6:	4628      	mov	r0, r5
    4ea8:	f001 fe8e 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    4eac:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    4eb0:	4628      	mov	r0, r5
    4eb2:	f001 fe89 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    4eb6:	45a0      	cmp	r8, r4
    4eb8:	d1f8      	bne.n	4eac <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    4eba:	2f00      	cmp	r7, #0
    4ebc:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    4ebe:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    4ec2:	bf0c      	ite	eq
    4ec4:	2195      	moveq	r1, #149	; 0x95
    4ec6:	2187      	movne	r1, #135	; 0x87
    4ec8:	f001 fe7e 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    4ecc:	4628      	mov	r0, r5
    4ece:	f001 fe5d 	bl	6b8c <SdSpiArduinoDriver::receive()>
    4ed2:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
    4ed4:	3c01      	subs	r4, #1
    4ed6:	f001 fe59 	bl	6b8c <SdSpiArduinoDriver::receive()>
    4eda:	0603      	lsls	r3, r0, #24
    4edc:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
    4ede:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
    4ee0:	d501      	bpl.n	4ee6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    4ee2:	2c00      	cmp	r4, #0
    4ee4:	d1f5      	bne.n	4ed2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
    4ee6:	b002      	add	sp, #8
    4ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    4eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    4eee:	4798      	blx	r3
  if (!syncDevice()) {
    4ef0:	2800      	cmp	r0, #0
    4ef2:	d1bb      	bne.n	4e6c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    4ef4:	20ff      	movs	r0, #255	; 0xff
}
    4ef6:	b002      	add	sp, #8
    4ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    4efc:	2f00      	cmp	r7, #0
    4efe:	d0cd      	beq.n	4e9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    4f00:	e7f8      	b.n	4ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
    4f02:	1d35      	adds	r5, r6, #4
    4f04:	4628      	mov	r0, r5
    4f06:	f001 fe0b 	bl	6b20 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    4f0a:	4621      	mov	r1, r4
    4f0c:	7c30      	ldrb	r0, [r6, #16]
    4f0e:	f001 fd7d 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4f12:	21ff      	movs	r1, #255	; 0xff
    4f14:	4628      	mov	r0, r5
    4f16:	f001 fe57 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    4f1a:	2301      	movs	r3, #1
    4f1c:	74b3      	strb	r3, [r6, #18]
}
    4f1e:	e7a9      	b.n	4e74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    4f20:	4790      	blx	r2
    4f22:	e7e5      	b.n	4ef0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
    4f24:	f7ff ff2e 	bl	4d84 <SharedSpiCard::readStop()>
    4f28:	e7e2      	b.n	4ef0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    4f2a:	bf00      	nop
    4f2c:	00004df5 	.word	0x00004df5
    4f30:	20022554 	.word	0x20022554

00004f34 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    4f36:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4f38:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    4f3a:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    4f3c:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    4f3e:	f7ff ff85 	bl	4e4c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4f42:	b9e0      	cbnz	r0, 4f7e <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    4f44:	1d37      	adds	r7, r6, #4
    4f46:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    4f48:	4638      	mov	r0, r7
    4f4a:	f001 fe1f 	bl	6b8c <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    4f4e:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    4f52:	42a5      	cmp	r5, r4
    4f54:	d1f8      	bne.n	4f48 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    4f56:	7cb4      	ldrb	r4, [r6, #18]
    4f58:	b914      	cbnz	r4, 4f60 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    4f5a:	2401      	movs	r4, #1
}
    4f5c:	4620      	mov	r0, r4
    4f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    4f60:	7c30      	ldrb	r0, [r6, #16]
    4f62:	2101      	movs	r1, #1
    4f64:	f001 fd52 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4f68:	21ff      	movs	r1, #255	; 0xff
    4f6a:	4638      	mov	r0, r7
    4f6c:	f001 fe2c 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4f70:	4638      	mov	r0, r7
    4f72:	f001 fddf 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4f76:	2300      	movs	r3, #0
}
    4f78:	4620      	mov	r0, r4
    m_spiActive = false;
    4f7a:	74b3      	strb	r3, [r6, #18]
}
    4f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    4f7e:	2312      	movs	r3, #18
  if (m_spiActive) {
    4f80:	7cb4      	ldrb	r4, [r6, #18]
    4f82:	7473      	strb	r3, [r6, #17]
    4f84:	2c00      	cmp	r4, #0
    4f86:	d0e9      	beq.n	4f5c <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    4f88:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
    4f8a:	7c30      	ldrb	r0, [r6, #16]
    4f8c:	2101      	movs	r1, #1
    4f8e:	f001 fd3d 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4f92:	21ff      	movs	r1, #255	; 0xff
    4f94:	4620      	mov	r0, r4
    4f96:	f001 fe17 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4f9a:	4620      	mov	r0, r4
    4f9c:	f001 fdca 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4fa0:	2300      	movs	r3, #0
  return false;
    4fa2:	461c      	mov	r4, r3
    m_spiActive = false;
    4fa4:	74b3      	strb	r3, [r6, #18]
}
    4fa6:	4620      	mov	r0, r4
    4fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4faa:	bf00      	nop

00004fac <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    4fac:	b570      	push	{r4, r5, r6, lr}
    4fae:	4616      	mov	r6, r2
    4fb0:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    4fb2:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    4fb4:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    4fb6:	f7ff ff49 	bl	4e4c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    4fba:	b1b0      	cbz	r0, 4fea <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    4fbc:	231b      	movs	r3, #27
    4fbe:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    4fc0:	7ca0      	ldrb	r0, [r4, #18]
    4fc2:	b908      	cbnz	r0, 4fc8 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    4fc4:	b002      	add	sp, #8
    4fc6:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    4fc8:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    4fca:	7c20      	ldrb	r0, [r4, #16]
    4fcc:	2101      	movs	r1, #1
    4fce:	f001 fd1d 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    4fd2:	21ff      	movs	r1, #255	; 0xff
    4fd4:	4628      	mov	r0, r5
    4fd6:	f001 fdf7 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    4fda:	4628      	mov	r0, r5
    4fdc:	f001 fdaa 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    4fe0:	2300      	movs	r3, #0
  return false;
    4fe2:	4618      	mov	r0, r3
    m_spiActive = false;
    4fe4:	74a3      	strb	r3, [r4, #18]
}
    4fe6:	b002      	add	sp, #8
    4fe8:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    4fea:	4605      	mov	r5, r0
    4fec:	2210      	movs	r2, #16
    4fee:	4631      	mov	r1, r6
    4ff0:	4620      	mov	r0, r4
    4ff2:	f7ff fe81 	bl	4cf8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    4ff6:	2800      	cmp	r0, #0
    4ff8:	d0e2      	beq.n	4fc0 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    4ffa:	7ca6      	ldrb	r6, [r4, #18]
    4ffc:	2e00      	cmp	r6, #0
    4ffe:	d0e1      	beq.n	4fc4 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
    5000:	7c20      	ldrb	r0, [r4, #16]
    5002:	2101      	movs	r1, #1
    5004:	f001 fd02 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5008:	1d20      	adds	r0, r4, #4
    500a:	21ff      	movs	r1, #255	; 0xff
    500c:	9001      	str	r0, [sp, #4]
    500e:	f001 fddb 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5012:	9801      	ldr	r0, [sp, #4]
    5014:	f001 fd8e 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
}
    5018:	4630      	mov	r0, r6
    m_spiActive = false;
    501a:	74a5      	strb	r5, [r4, #18]
}
    501c:	b002      	add	sp, #8
    501e:	bd70      	pop	{r4, r5, r6, pc}

00005020 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    5020:	6803      	ldr	r3, [r0, #0]
    5022:	4a25      	ldr	r2, [pc, #148]	; (50b8 <SharedSpiCard::sectorCount()+0x98>)
    5024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5026:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    5028:	b500      	push	{lr}
    502a:	b085      	sub	sp, #20
    502c:	d10f      	bne.n	504e <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
    502e:	466a      	mov	r2, sp
    5030:	2109      	movs	r1, #9
    5032:	f7ff ffbb 	bl	4fac <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    5036:	b138      	cbz	r0, 5048 <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    5038:	f89d 3000 	ldrb.w	r3, [sp]
    503c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    5040:	d008      	beq.n	5054 <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    5042:	2b40      	cmp	r3, #64	; 0x40
    5044:	d027      	beq.n	5096 <SharedSpiCard::sectorCount()+0x76>
    5046:	2000      	movs	r0, #0
}
    5048:	b005      	add	sp, #20
    504a:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    504e:	4669      	mov	r1, sp
    5050:	4798      	blx	r3
    5052:	e7f0      	b.n	5036 <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    5054:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
    5058:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    505c:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
    5060:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5064:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
    5068:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
    506a:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    506e:	0080      	lsls	r0, r0, #2
    5070:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    5074:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    5078:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    507c:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    5080:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5084:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    5088:	4413      	add	r3, r2
    508a:	3001      	adds	r0, #1
    508c:	3b07      	subs	r3, #7
    508e:	4098      	lsls	r0, r3
}
    5090:	b005      	add	sp, #20
    5092:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    5096:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    509a:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    509e:	3001      	adds	r0, #1
    50a0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    50a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    50a8:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    50ac:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    50b0:	0280      	lsls	r0, r0, #10
    50b2:	b005      	add	sp, #20
    50b4:	f85d fb04 	ldr.w	pc, [sp], #4
    50b8:	000053dd 	.word	0x000053dd

000050bc <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    50bc:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    50be:	460a      	mov	r2, r1
    50c0:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    50c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
    50c4:	b083      	sub	sp, #12
    50c6:	4d16      	ldr	r5, [pc, #88]	; (5120 <SharedSpiCard::readStart(unsigned long)+0x64>)
    50c8:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    50ca:	42ab      	cmp	r3, r5
    50cc:	d124      	bne.n	5118 <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
    50ce:	7d40      	ldrb	r0, [r0, #21]
    50d0:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    50d2:	f04f 0112 	mov.w	r1, #18
    50d6:	4620      	mov	r0, r4
    sector <<= 9;
    50d8:	bf18      	it	ne
    50da:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    50dc:	f7ff feb6 	bl	4e4c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    50e0:	b920      	cbnz	r0, 50ec <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    50e2:	2301      	movs	r3, #1
  return true;
    50e4:	4618      	mov	r0, r3
  m_state = READ_STATE;
    50e6:	74e3      	strb	r3, [r4, #19]
}
    50e8:	b003      	add	sp, #12
    50ea:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    50ec:	230c      	movs	r3, #12
  if (m_spiActive) {
    50ee:	7ca0      	ldrb	r0, [r4, #18]
    50f0:	7463      	strb	r3, [r4, #17]
    50f2:	2800      	cmp	r0, #0
    50f4:	d0f8      	beq.n	50e8 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    50f6:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    50f8:	7c20      	ldrb	r0, [r4, #16]
    50fa:	2101      	movs	r1, #1
    50fc:	f001 fc86 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5100:	21ff      	movs	r1, #255	; 0xff
    5102:	4628      	mov	r0, r5
    5104:	f001 fd60 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5108:	4628      	mov	r0, r5
    510a:	f001 fd13 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    510e:	2300      	movs	r3, #0
}
    5110:	4618      	mov	r0, r3
    m_spiActive = false;
    5112:	74a3      	strb	r3, [r4, #18]
}
    5114:	b003      	add	sp, #12
    5116:	bd30      	pop	{r4, r5, pc}
    5118:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    511a:	4798      	blx	r3
    511c:	9a01      	ldr	r2, [sp, #4]
    511e:	e7d7      	b.n	50d0 <SharedSpiCard::readStart(unsigned long)+0x14>
    5120:	00004af1 	.word	0x00004af1

00005124 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    5124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5126:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    5128:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    512a:	4606      	mov	r6, r0
    512c:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    512e:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    5130:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    5132:	d102      	bne.n	513a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    5134:	6983      	ldr	r3, [r0, #24]
    5136:	428b      	cmp	r3, r1
    5138:	d005      	beq.n	5146 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
    513a:	4629      	mov	r1, r5
    513c:	4630      	mov	r0, r6
    513e:	f7ff ffbd 	bl	50bc <SharedSpiCard::readStart(unsigned long)>
    5142:	b180      	cbz	r0, 5166 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
    5144:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    5146:	b187      	cbz	r7, 516a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    5148:	2500      	movs	r5, #0
    514a:	e001      	b.n	5150 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    514c:	42af      	cmp	r7, r5
    514e:	d00c      	beq.n	516a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
    5150:	4621      	mov	r1, r4
    5152:	f44f 7200 	mov.w	r2, #512	; 0x200
    5156:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    5158:	3501      	adds	r5, #1
    515a:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
    515e:	f7ff fdcb 	bl	4cf8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    5162:	2800      	cmp	r0, #0
    5164:	d1f2      	bne.n	514c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
    5166:	2000      	movs	r0, #0
}
    5168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
    516a:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    516c:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    516e:	443b      	add	r3, r7
    5170:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    5172:	2800      	cmp	r0, #0
    5174:	d1f8      	bne.n	5168 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    5176:	4630      	mov	r0, r6
}
    5178:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    517c:	f7ff be02 	b.w	4d84 <SharedSpiCard::readStop()>

00005180 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    5180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5184:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    5186:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    5188:	4606      	mov	r6, r0
    518a:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    518c:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    518e:	4615      	mov	r5, r2
    5190:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    5194:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
    5198:	d102      	bne.n	51a0 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    519a:	6983      	ldr	r3, [r0, #24]
    519c:	428b      	cmp	r3, r1
    519e:	d005      	beq.n	51ac <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    51a0:	4621      	mov	r1, r4
    51a2:	4630      	mov	r0, r6
    51a4:	f7ff ff8a 	bl	50bc <SharedSpiCard::readStart(unsigned long)>
    51a8:	b1b0      	cbz	r0, 51d8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
    51aa:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    51ac:	f1bb 0f00 	cmp.w	fp, #0
    51b0:	d015      	beq.n	51de <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
    51b2:	eb04 0a0b 	add.w	sl, r4, fp
    51b6:	e002      	b.n	51be <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
    51b8:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
    51ba:	45a2      	cmp	sl, r4
    51bc:	d00f      	beq.n	51de <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
    51be:	f44f 7200 	mov.w	r2, #512	; 0x200
    51c2:	4629      	mov	r1, r5
    51c4:	4630      	mov	r0, r6
    51c6:	f7ff fd97 	bl	4cf8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    51ca:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
    51cc:	4642      	mov	r2, r8
    51ce:	4620      	mov	r0, r4
    51d0:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
    51d2:	3401      	adds	r4, #1
    if (readData(dst)) {
    51d4:	2f00      	cmp	r7, #0
    51d6:	d1ef      	bne.n	51b8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
    51d8:	2000      	movs	r0, #0
}
    51da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
    51de:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    51e0:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    51e2:	445b      	add	r3, fp
    51e4:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    51e6:	2800      	cmp	r0, #0
    51e8:	d1f7      	bne.n	51da <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    51ea:	4630      	mov	r0, r6
}
    51ec:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
    51f0:	f7ff bdc8 	b.w	4d84 <SharedSpiCard::readStop()>

000051f4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
    51f4:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    51f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    51fa:	695f      	ldr	r7, [r3, #20]
    51fc:	4b16      	ldr	r3, [pc, #88]	; (5258 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    51fe:	429f      	cmp	r7, r3
    5200:	d11f      	bne.n	5242 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
    5202:	7cc3      	ldrb	r3, [r0, #19]
    5204:	4604      	mov	r4, r0
    5206:	460d      	mov	r5, r1
    5208:	4616      	mov	r6, r2
    520a:	2b01      	cmp	r3, #1
    520c:	d102      	bne.n	5214 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    520e:	6983      	ldr	r3, [r0, #24]
    5210:	4299      	cmp	r1, r3
    5212:	d005      	beq.n	5220 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    5214:	4629      	mov	r1, r5
    5216:	4620      	mov	r0, r4
    5218:	f7ff ff50 	bl	50bc <SharedSpiCard::readStart(unsigned long)>
    521c:	b170      	cbz	r0, 523c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
    521e:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
    5220:	f44f 7200 	mov.w	r2, #512	; 0x200
    5224:	4631      	mov	r1, r6
    5226:	4620      	mov	r0, r4
    5228:	f7ff fd66 	bl	4cf8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    522c:	b130      	cbz	r0, 523c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
    522e:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    5230:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    5232:	3301      	adds	r3, #1
    5234:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    5236:	b148      	cbz	r0, 524c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    5238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    523c:	2000      	movs	r0, #0
}
    523e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    5242:	46bc      	mov	ip, r7
    5244:	2301      	movs	r3, #1
}
    5246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    524a:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    524c:	4620      	mov	r0, r4
}
    524e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    5252:	f7ff bd97 	b.w	4d84 <SharedSpiCard::readStop()>
    5256:	bf00      	nop
    5258:	00005125 	.word	0x00005125

0000525c <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    525c:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    525e:	460a      	mov	r2, r1
    5260:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    5262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
    5264:	b083      	sub	sp, #12
    5266:	4d16      	ldr	r5, [pc, #88]	; (52c0 <SharedSpiCard::writeStart(unsigned long)+0x64>)
    5268:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    526a:	42ab      	cmp	r3, r5
    526c:	d124      	bne.n	52b8 <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
    526e:	7d40      	ldrb	r0, [r0, #21]
    5270:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    5272:	f04f 0119 	mov.w	r1, #25
    5276:	4620      	mov	r0, r4
    sector <<= 9;
    5278:	bf18      	it	ne
    527a:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    527c:	f7ff fde6 	bl	4e4c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5280:	b920      	cbnz	r0, 528c <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    5282:	2302      	movs	r3, #2
  return true;
    5284:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    5286:	74e3      	strb	r3, [r4, #19]
}
    5288:	b003      	add	sp, #12
    528a:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    528c:	230e      	movs	r3, #14
  if (m_spiActive) {
    528e:	7ca0      	ldrb	r0, [r4, #18]
    5290:	7463      	strb	r3, [r4, #17]
    5292:	2800      	cmp	r0, #0
    5294:	d0f8      	beq.n	5288 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    5296:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    5298:	7c20      	ldrb	r0, [r4, #16]
    529a:	2101      	movs	r1, #1
    529c:	f001 fbb6 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    52a0:	21ff      	movs	r1, #255	; 0xff
    52a2:	4628      	mov	r0, r5
    52a4:	f001 fc90 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    52a8:	4628      	mov	r0, r5
    52aa:	f001 fc43 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    52ae:	2300      	movs	r3, #0
}
    52b0:	4618      	mov	r0, r3
    m_spiActive = false;
    52b2:	74a3      	strb	r3, [r4, #18]
}
    52b4:	b003      	add	sp, #12
    52b6:	bd30      	pop	{r4, r5, pc}
    52b8:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    52ba:	4798      	blx	r3
    52bc:	9a01      	ldr	r2, [sp, #4]
    52be:	e7d7      	b.n	5270 <SharedSpiCard::writeStart(unsigned long)+0x14>
    52c0:	00004af1 	.word	0x00004af1

000052c4 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    52c4:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    52c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    52ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    52cc:	4617      	mov	r7, r2
    52ce:	4a41      	ldr	r2, [pc, #260]	; (53d4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    52d0:	b085      	sub	sp, #20
    52d2:	4604      	mov	r4, r0
    52d4:	460e      	mov	r6, r1
    52d6:	4293      	cmp	r3, r2
    52d8:	d145      	bne.n	5366 <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
    52da:	466a      	mov	r2, sp
    52dc:	2109      	movs	r1, #9
    52de:	f7ff fe65 	bl	4fac <SharedSpiCard::readRegister(unsigned char, void*)>
    52e2:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    52e4:	b1b5      	cbz	r5, 5314 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
    52e6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    52ea:	065a      	lsls	r2, r3, #25
    52ec:	d518      	bpl.n	5320 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    52ee:	7d63      	ldrb	r3, [r4, #21]
    52f0:	2b03      	cmp	r3, #3
    52f2:	d001      	beq.n	52f8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    52f4:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    52f6:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
    52f8:	4632      	mov	r2, r6
    52fa:	2120      	movs	r1, #32
    52fc:	4620      	mov	r0, r4
    52fe:	f7ff fda5 	bl	4e4c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    5302:	b928      	cbnz	r0, 5310 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
    5304:	463a      	mov	r2, r7
    5306:	2121      	movs	r1, #33	; 0x21
    5308:	4620      	mov	r0, r4
    530a:	f7ff fd9f 	bl	4e4c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    530e:	b370      	cbz	r0, 536e <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    5310:	2326      	movs	r3, #38	; 0x26
    5312:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    5314:	7ca5      	ldrb	r5, [r4, #18]
    5316:	b99d      	cbnz	r5, 5340 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    5318:	4628      	mov	r0, r5
    531a:	b005      	add	sp, #20
    531c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    5320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5324:	f89d 200b 	ldrb.w	r2, [sp, #11]
    5328:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    532a:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    532e:	1c7a      	adds	r2, r7, #1
    5330:	4332      	orrs	r2, r6
    5332:	4213      	tst	r3, r2
    5334:	d0db      	beq.n	52ee <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    5336:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
    5338:	7ca5      	ldrb	r5, [r4, #18]
    533a:	7463      	strb	r3, [r4, #17]
    533c:	2d00      	cmp	r5, #0
    533e:	d0eb      	beq.n	5318 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    5340:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    5342:	7c20      	ldrb	r0, [r4, #16]
    5344:	2101      	movs	r1, #1
    5346:	f001 fb61 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    534a:	21ff      	movs	r1, #255	; 0xff
    534c:	4628      	mov	r0, r5
    534e:	f001 fc3b 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5352:	4628      	mov	r0, r5
    5354:	f001 fbee 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5358:	2300      	movs	r3, #0
  return false;
    535a:	461d      	mov	r5, r3
    m_spiActive = false;
    535c:	74a3      	strb	r3, [r4, #18]
}
    535e:	4628      	mov	r0, r5
    5360:	b005      	add	sp, #20
    5362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    5366:	4669      	mov	r1, sp
    5368:	4798      	blx	r3
    536a:	4605      	mov	r5, r0
    536c:	e7ba      	b.n	52e4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
    536e:	4602      	mov	r2, r0
    5370:	2126      	movs	r1, #38	; 0x26
    5372:	4620      	mov	r0, r4
    5374:	f7ff fd6a 	bl	4e4c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5378:	2800      	cmp	r0, #0
    537a:	d1c9      	bne.n	5310 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    537c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 53d8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
    5380:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    5384:	f104 0904 	add.w	r9, r4, #4
    5388:	f8d8 3000 	ldr.w	r3, [r8]
    538c:	441f      	add	r7, r3
    538e:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
    5390:	e004      	b.n	539c <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    5392:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    5396:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    5398:	041b      	lsls	r3, r3, #16
    539a:	d417      	bmi.n	53cc <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    539c:	4648      	mov	r0, r9
    539e:	f001 fbf5 	bl	6b8c <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    53a2:	28ff      	cmp	r0, #255	; 0xff
    53a4:	4606      	mov	r6, r0
    53a6:	d1f4      	bne.n	5392 <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    53a8:	7ca3      	ldrb	r3, [r4, #18]
    53aa:	2b00      	cmp	r3, #0
    53ac:	d0b4      	beq.n	5318 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
    53ae:	2101      	movs	r1, #1
    53b0:	7c20      	ldrb	r0, [r4, #16]
  return true;
    53b2:	461d      	mov	r5, r3
    53b4:	f001 fb2a 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    53b8:	4631      	mov	r1, r6
    53ba:	4648      	mov	r0, r9
    53bc:	f001 fc04 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    53c0:	4648      	mov	r0, r9
    53c2:	f001 fbb7 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    53c6:	2300      	movs	r3, #0
    53c8:	74a3      	strb	r3, [r4, #18]
}
    53ca:	e7a5      	b.n	5318 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    53cc:	2328      	movs	r3, #40	; 0x28
    53ce:	7463      	strb	r3, [r4, #17]
    goto fail;
    53d0:	e7a0      	b.n	5314 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    53d2:	bf00      	nop
    53d4:	000053dd 	.word	0x000053dd
    53d8:	20022554 	.word	0x20022554

000053dc <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    53dc:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    53de:	2200      	movs	r2, #0
    53e0:	b082      	sub	sp, #8
    53e2:	460e      	mov	r6, r1
    53e4:	2109      	movs	r1, #9
    53e6:	4604      	mov	r4, r0
    53e8:	f7ff fd30 	bl	4e4c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    53ec:	b1b0      	cbz	r0, 541c <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    53ee:	231b      	movs	r3, #27
    53f0:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    53f2:	7ca0      	ldrb	r0, [r4, #18]
    53f4:	b908      	cbnz	r0, 53fa <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
    53f6:	b002      	add	sp, #8
    53f8:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    53fa:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    53fc:	7c20      	ldrb	r0, [r4, #16]
    53fe:	2101      	movs	r1, #1
    5400:	f001 fb04 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5404:	21ff      	movs	r1, #255	; 0xff
    5406:	4628      	mov	r0, r5
    5408:	f001 fbde 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    540c:	4628      	mov	r0, r5
    540e:	f001 fb91 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5412:	2300      	movs	r3, #0
  return false;
    5414:	4618      	mov	r0, r3
    m_spiActive = false;
    5416:	74a3      	strb	r3, [r4, #18]
  }
    5418:	b002      	add	sp, #8
    541a:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    541c:	4605      	mov	r5, r0
    541e:	2210      	movs	r2, #16
    5420:	4631      	mov	r1, r6
    5422:	4620      	mov	r0, r4
    5424:	f7ff fc68 	bl	4cf8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5428:	2800      	cmp	r0, #0
    542a:	d0e2      	beq.n	53f2 <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    542c:	7ca6      	ldrb	r6, [r4, #18]
    542e:	2e00      	cmp	r6, #0
    5430:	d0e1      	beq.n	53f6 <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
    5432:	7c20      	ldrb	r0, [r4, #16]
    5434:	2101      	movs	r1, #1
    5436:	f001 fae9 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    543a:	1d20      	adds	r0, r4, #4
    543c:	21ff      	movs	r1, #255	; 0xff
    543e:	9001      	str	r0, [sp, #4]
    5440:	f001 fbc2 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5444:	9801      	ldr	r0, [sp, #4]
    5446:	f001 fb75 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
}
    544a:	4630      	mov	r0, r6
    m_spiActive = false;
    544c:	74a5      	strb	r5, [r4, #18]
  }
    544e:	b002      	add	sp, #8
    5450:	bd70      	pop	{r4, r5, r6, pc}
    5452:	bf00      	nop

00005454 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    5454:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    5456:	2200      	movs	r2, #0
    5458:	b082      	sub	sp, #8
    545a:	460e      	mov	r6, r1
    545c:	210a      	movs	r1, #10
    545e:	4604      	mov	r4, r0
    5460:	f7ff fcf4 	bl	4e4c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5464:	b1b0      	cbz	r0, 5494 <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
    5466:	231b      	movs	r3, #27
    5468:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    546a:	7ca0      	ldrb	r0, [r4, #18]
    546c:	b908      	cbnz	r0, 5472 <SharedSpiCard::readCID(CID*)+0x1e>
  }
    546e:	b002      	add	sp, #8
    5470:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    5472:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    5474:	7c20      	ldrb	r0, [r4, #16]
    5476:	2101      	movs	r1, #1
    5478:	f001 fac8 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    547c:	21ff      	movs	r1, #255	; 0xff
    547e:	4628      	mov	r0, r5
    5480:	f001 fba2 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5484:	4628      	mov	r0, r5
    5486:	f001 fb55 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    548a:	2300      	movs	r3, #0
  return false;
    548c:	4618      	mov	r0, r3
    m_spiActive = false;
    548e:	74a3      	strb	r3, [r4, #18]
  }
    5490:	b002      	add	sp, #8
    5492:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    5494:	4605      	mov	r5, r0
    5496:	2210      	movs	r2, #16
    5498:	4631      	mov	r1, r6
    549a:	4620      	mov	r0, r4
    549c:	f7ff fc2c 	bl	4cf8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    54a0:	2800      	cmp	r0, #0
    54a2:	d0e2      	beq.n	546a <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
    54a4:	7ca6      	ldrb	r6, [r4, #18]
    54a6:	2e00      	cmp	r6, #0
    54a8:	d0e1      	beq.n	546e <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
    54aa:	7c20      	ldrb	r0, [r4, #16]
    54ac:	2101      	movs	r1, #1
    54ae:	f001 faad 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    54b2:	1d20      	adds	r0, r4, #4
    54b4:	21ff      	movs	r1, #255	; 0xff
    54b6:	9001      	str	r0, [sp, #4]
    54b8:	f001 fb86 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    54bc:	9801      	ldr	r0, [sp, #4]
    54be:	f001 fb39 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
}
    54c2:	4630      	mov	r0, r6
    m_spiActive = false;
    54c4:	74a5      	strb	r5, [r4, #18]
  }
    54c6:	b002      	add	sp, #8
    54c8:	bd70      	pop	{r4, r5, r6, pc}
    54ca:	bf00      	nop

000054cc <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    54cc:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    54ce:	1d05      	adds	r5, r0, #4
    54d0:	4616      	mov	r6, r2
    54d2:	4604      	mov	r4, r0
    54d4:	4628      	mov	r0, r5
    54d6:	f001 fb77 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    54da:	f44f 7200 	mov.w	r2, #512	; 0x200
    54de:	4631      	mov	r1, r6
    54e0:	4628      	mov	r0, r5
    54e2:	f001 fb7b 	bl	6bdc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    54e6:	21ff      	movs	r1, #255	; 0xff
    54e8:	4628      	mov	r0, r5
    54ea:	f001 fb6d 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    54ee:	21ff      	movs	r1, #255	; 0xff
    54f0:	4628      	mov	r0, r5
    54f2:	f001 fb69 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    54f6:	4628      	mov	r0, r5
    54f8:	f001 fb48 	bl	6b8c <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    54fc:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    5500:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    5502:	2b05      	cmp	r3, #5
    5504:	d004      	beq.n	5510 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    5506:	2320      	movs	r3, #32
  if (m_spiActive) {
    5508:	7ca0      	ldrb	r0, [r4, #18]
    550a:	7463      	strb	r3, [r4, #17]
    550c:	b910      	cbnz	r0, 5514 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    550e:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    5510:	2001      	movs	r0, #1
}
    5512:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
    5514:	7c20      	ldrb	r0, [r4, #16]
    5516:	2101      	movs	r1, #1
    5518:	f001 fa78 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    551c:	21ff      	movs	r1, #255	; 0xff
    551e:	4628      	mov	r0, r5
    5520:	f001 fb52 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5524:	4628      	mov	r0, r5
    5526:	f001 fb05 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    552a:	2300      	movs	r3, #0
}
    552c:	4618      	mov	r0, r3
    m_spiActive = false;
    552e:	74a3      	strb	r3, [r4, #18]
}
    5530:	bd70      	pop	{r4, r5, r6, pc}
    5532:	bf00      	nop

00005534 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    5534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5538:	4d17      	ldr	r5, [pc, #92]	; (5598 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    553a:	4606      	mov	r6, r0
    553c:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    553e:	f100 0804 	add.w	r8, r0, #4
    5542:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
    5544:	f504 7416 	add.w	r4, r4, #600	; 0x258
    5548:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    554a:	e003      	b.n	5554 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    554c:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    554e:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    5550:	041b      	lsls	r3, r3, #16
    5552:	d40c      	bmi.n	556e <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    5554:	4640      	mov	r0, r8
    5556:	f001 fb19 	bl	6b8c <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    555a:	28ff      	cmp	r0, #255	; 0xff
    555c:	d1f6      	bne.n	554c <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    555e:	463a      	mov	r2, r7
    5560:	21fc      	movs	r1, #252	; 0xfc
    5562:	4630      	mov	r0, r6
    5564:	f7ff ffb2 	bl	54cc <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    5568:	b118      	cbz	r0, 5572 <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    556a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    556e:	2324      	movs	r3, #36	; 0x24
    5570:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
    5572:	7cb0      	ldrb	r0, [r6, #18]
    5574:	2800      	cmp	r0, #0
    5576:	d0f8      	beq.n	556a <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
    5578:	7c30      	ldrb	r0, [r6, #16]
    557a:	2101      	movs	r1, #1
    557c:	f001 fa46 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5580:	21ff      	movs	r1, #255	; 0xff
    5582:	4640      	mov	r0, r8
    5584:	f001 fb20 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    5588:	4640      	mov	r0, r8
    558a:	f001 fad3 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    558e:	2300      	movs	r3, #0
}
    5590:	4618      	mov	r0, r3
    m_spiActive = false;
    5592:	74b3      	strb	r3, [r6, #18]
}
    5594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5598:	20022554 	.word	0x20022554

0000559c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    559c:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    559e:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    55a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    55a2:	4616      	mov	r6, r2
    55a4:	4a22      	ldr	r2, [pc, #136]	; (5630 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    55a6:	b082      	sub	sp, #8
    55a8:	4604      	mov	r4, r0
    55aa:	460d      	mov	r5, r1
    55ac:	4293      	cmp	r3, r2
    55ae:	d13c      	bne.n	562a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
    55b0:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
    55b2:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    55b4:	f04f 0118 	mov.w	r1, #24
    55b8:	4620      	mov	r0, r4
    sector <<= 9;
    55ba:	bf18      	it	ne
    55bc:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    55be:	462a      	mov	r2, r5
    55c0:	f7ff fc44 	bl	4e4c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    55c4:	4605      	mov	r5, r0
    55c6:	b1b0      	cbz	r0, 55f6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
    55c8:	230d      	movs	r3, #13
    55ca:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    55cc:	7ca0      	ldrb	r0, [r4, #18]
    55ce:	b908      	cbnz	r0, 55d4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
    55d0:	b002      	add	sp, #8
    55d2:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    55d4:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    55d6:	7c20      	ldrb	r0, [r4, #16]
    55d8:	2101      	movs	r1, #1
    55da:	f001 fa17 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    55de:	21ff      	movs	r1, #255	; 0xff
    55e0:	4628      	mov	r0, r5
    55e2:	f001 faf1 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    55e6:	4628      	mov	r0, r5
    55e8:	f001 faa4 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    55ec:	2300      	movs	r3, #0
  return false;
    55ee:	4618      	mov	r0, r3
    m_spiActive = false;
    55f0:	74a3      	strb	r3, [r4, #18]
}
    55f2:	b002      	add	sp, #8
    55f4:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    55f6:	4632      	mov	r2, r6
    55f8:	21fe      	movs	r1, #254	; 0xfe
    55fa:	4620      	mov	r0, r4
    55fc:	f7ff ff66 	bl	54cc <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    5600:	2800      	cmp	r0, #0
    5602:	d0e3      	beq.n	55cc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
    5604:	7ca6      	ldrb	r6, [r4, #18]
    5606:	2e00      	cmp	r6, #0
    5608:	d0e2      	beq.n	55d0 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
    560a:	7c20      	ldrb	r0, [r4, #16]
    560c:	2101      	movs	r1, #1
    560e:	f001 f9fd 	bl	6a0c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5612:	1d20      	adds	r0, r4, #4
    5614:	21ff      	movs	r1, #255	; 0xff
    5616:	9001      	str	r0, [sp, #4]
    5618:	f001 fad6 	bl	6bc8 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    561c:	9801      	ldr	r0, [sp, #4]
    561e:	f001 fa89 	bl	6b34 <SdSpiArduinoDriver::deactivate()>
  return true;
    5622:	4630      	mov	r0, r6
    m_spiActive = false;
    5624:	74a5      	strb	r5, [r4, #18]
}
    5626:	b002      	add	sp, #8
    5628:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    562a:	4798      	blx	r3
    562c:	e7c1      	b.n	55b2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    562e:	bf00      	nop
    5630:	00004af1 	.word	0x00004af1

00005634 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    5634:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    5636:	7f04      	ldrb	r4, [r0, #28]
    5638:	b134      	cbz	r4, 5648 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    563a:	6804      	ldr	r4, [r0, #0]
    563c:	2301      	movs	r3, #1
    563e:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    5640:	46a4      	mov	ip, r4
}
    5642:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    5646:	4760      	bx	ip
}
    5648:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    564c:	f7ff bfa6 	b.w	559c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

00005650 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    5650:	2000      	movs	r0, #0
    5652:	4770      	bx	lr

00005654 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    5654:	2000      	movs	r0, #0
    5656:	4770      	bx	lr

00005658 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    5658:	2000      	movs	r0, #0
    565a:	4770      	bx	lr

0000565c <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    565c:	4770      	bx	lr
    565e:	bf00      	nop

00005660 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    5660:	4b08      	ldr	r3, [pc, #32]	; (5684 <sdIrs()+0x24>)
    5662:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    5664:	4a08      	ldr	r2, [pc, #32]	; (5688 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    5666:	4809      	ldr	r0, [pc, #36]	; (568c <sdIrs()+0x2c>)
static void sdIrs() {
    5668:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    566a:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    566c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    566e:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    5670:	6812      	ldr	r2, [r2, #0]
}
    5672:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    5676:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    5678:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    567a:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    567e:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    5680:	7001      	strb	r1, [r0, #0]
}
    5682:	4770      	bx	lr
    5684:	402c0000 	.word	0x402c0000
    5688:	20021098 	.word	0x20021098
    568c:	200225ea 	.word	0x200225ea

00005690 <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5690:	4b03      	ldr	r3, [pc, #12]	; (56a0 <isBusyDat()+0x10>)
    5692:	6a58      	ldr	r0, [r3, #36]	; 0x24
    5694:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    5698:	f3c0 6000 	ubfx	r0, r0, #24, #1
    569c:	4770      	bx	lr
    569e:	bf00      	nop
    56a0:	402c0000 	.word	0x402c0000

000056a4 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    56a4:	4b01      	ldr	r3, [pc, #4]	; (56ac <isBusyDMA()+0x8>)
    56a6:	7818      	ldrb	r0, [r3, #0]
}
    56a8:	4770      	bx	lr
    56aa:	bf00      	nop
    56ac:	200225ea 	.word	0x200225ea

000056b0 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    56b0:	4a2b      	ldr	r2, [pc, #172]	; (5760 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    56b2:	4b2c      	ldr	r3, [pc, #176]	; (5764 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    56b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    56b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    56ba:	492b      	ldr	r1, [pc, #172]	; (5768 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    56bc:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    56c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    56c4:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    56c6:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    56c8:	4c28      	ldr	r4, [pc, #160]	; (576c <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    56ca:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    56ce:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
    56d2:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    56d6:	089b      	lsrs	r3, r3, #2
    56d8:	fbb1 fef3 	udiv	lr, r1, r3
    56dc:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    56e0:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    56e4:	d235      	bcs.n	5752 <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    56e6:	2301      	movs	r3, #1
    sdclkfs <<= 1;
    56e8:	461e      	mov	r6, r3
    56ea:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    56ec:	011a      	lsls	r2, r3, #4
    56ee:	fbbe f2f2 	udiv	r2, lr, r2
    56f2:	4282      	cmp	r2, r0
    56f4:	d901      	bls.n	56fa <setSdclk(unsigned long)+0x4a>
    56f6:	2bff      	cmp	r3, #255	; 0xff
    56f8:	d9f6      	bls.n	56e8 <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    56fa:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    56fe:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5700:	4290      	cmp	r0, r2
    5702:	d22a      	bcs.n	575a <setSdclk(unsigned long)+0xaa>
    5704:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5708:	2201      	movs	r2, #1
    570a:	e000      	b.n	570e <setSdclk(unsigned long)+0x5e>
    570c:	46a4      	mov	ip, r4
    dvs++;
    570e:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5710:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    5714:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5716:	fbbe f1fc 	udiv	r1, lr, ip
    571a:	4281      	cmp	r1, r0
    571c:	d917      	bls.n	574e <setSdclk(unsigned long)+0x9e>
    571e:	2a10      	cmp	r2, #16
    5720:	d1f4      	bne.n	570c <setSdclk(unsigned long)+0x5c>
    5722:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    5724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5728:	4911      	ldr	r1, [pc, #68]	; (5770 <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    572a:	4a12      	ldr	r2, [pc, #72]	; (5774 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    572c:	fb03 fc0c 	mul.w	ip, r3, ip
    5730:	fbbe f3fc 	udiv	r3, lr, ip
    5734:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    5736:	4b10      	ldr	r3, [pc, #64]	; (5778 <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    5738:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    573a:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    573c:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    573e:	4333      	orrs	r3, r6
    5740:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    5744:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    5746:	6a53      	ldr	r3, [r2, #36]	; 0x24
    5748:	071b      	lsls	r3, r3, #28
    574a:	d5fc      	bpl.n	5746 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    574c:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    574e:	012d      	lsls	r5, r5, #4
    5750:	e7e8      	b.n	5724 <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    5752:	4672      	mov	r2, lr
    5754:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    5756:	2301      	movs	r3, #1
    5758:	e7d2      	b.n	5700 <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    575a:	469c      	mov	ip, r3
    575c:	2500      	movs	r5, #0
    575e:	e7e1      	b.n	5724 <setSdclk(unsigned long)+0x74>
    5760:	400fc000 	.word	0x400fc000
    5764:	400d8000 	.word	0x400d8000
    5768:	5e69ec00 	.word	0x5e69ec00
    576c:	aaaaaaab 	.word	0xaaaaaaab
    5770:	2000ddb4 	.word	0x2000ddb4
    5774:	402c0000 	.word	0x402c0000
    5778:	fff0000f 	.word	0xfff0000f

0000577c <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    577c:	4b01      	ldr	r3, [pc, #4]	; (5784 <SdioCard::errorCode() const+0x8>)
}
    577e:	7818      	ldrb	r0, [r3, #0]
    5780:	4770      	bx	lr
    5782:	bf00      	nop
    5784:	20008e6e 	.word	0x20008e6e

00005788 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    5788:	4b01      	ldr	r3, [pc, #4]	; (5790 <SdioCard::errorData() const+0x8>)
    578a:	6818      	ldr	r0, [r3, #0]
}
    578c:	4770      	bx	lr
    578e:	bf00      	nop
    5790:	20021098 	.word	0x20021098

00005794 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    5794:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
    5796:	4c07      	ldr	r4, [pc, #28]	; (57b4 <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    5798:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    579a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    579c:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    57a0:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
    57a2:	f8cc 1004 	str.w	r1, [ip, #4]
    57a6:	f8cc 2008 	str.w	r2, [ip, #8]
    57aa:	f8cc 300c 	str.w	r3, [ip, #12]
}
    57ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    57b2:	4770      	bx	lr
    57b4:	20020bcc 	.word	0x20020bcc

000057b8 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    57b8:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
    57ba:	4c07      	ldr	r4, [pc, #28]	; (57d8 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    57bc:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    57be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    57c0:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    57c4:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
    57c6:	f8cc 1004 	str.w	r1, [ip, #4]
    57ca:	f8cc 2008 	str.w	r2, [ip, #8]
    57ce:	f8cc 300c 	str.w	r3, [ip, #12]
}
    57d2:	f85d 4b04 	ldr.w	r4, [sp], #4
    57d6:	4770      	bx	lr
    57d8:	20020bdc 	.word	0x20020bdc

000057dc <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    57dc:	4b02      	ldr	r3, [pc, #8]	; (57e8 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    57de:	2001      	movs	r0, #1
  *ocr = m_ocr;
    57e0:	681b      	ldr	r3, [r3, #0]
    57e2:	600b      	str	r3, [r1, #0]
}
    57e4:	4770      	bx	lr
    57e6:	bf00      	nop
    57e8:	20020bec 	.word	0x20020bec

000057ec <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    57ec:	4770      	bx	lr
    57ee:	bf00      	nop

000057f0 <SdioCard::~SdioCard()>:
    57f0:	b510      	push	{r4, lr}
    57f2:	4604      	mov	r4, r0
    57f4:	210c      	movs	r1, #12
    57f6:	f002 fe05 	bl	8404 <operator delete(void*, unsigned int)>
    57fa:	4620      	mov	r0, r4
    57fc:	bd10      	pop	{r4, pc}
    57fe:	bf00      	nop

00005800 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    5800:	4b04      	ldr	r3, [pc, #16]	; (5814 <SdioCard::type() const+0x14>)
    5802:	781b      	ldrb	r3, [r3, #0]
    5804:	b123      	cbz	r3, 5810 <SdioCard::type() const+0x10>
    5806:	4b04      	ldr	r3, [pc, #16]	; (5818 <SdioCard::type() const+0x18>)
    5808:	7818      	ldrb	r0, [r3, #0]
    580a:	3002      	adds	r0, #2
    580c:	b2c0      	uxtb	r0, r0
    580e:	4770      	bx	lr
    5810:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    5812:	4770      	bx	lr
    5814:	200225e7 	.word	0x200225e7
    5818:	200225e8 	.word	0x200225e8

0000581c <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    581c:	4b18      	ldr	r3, [pc, #96]	; (5880 <SdioCard::sectorCount()+0x64>)
    581e:	781a      	ldrb	r2, [r3, #0]
    5820:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    5824:	d00f      	beq.n	5846 <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
    5826:	2a40      	cmp	r2, #64	; 0x40
    5828:	d001      	beq.n	582e <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
    582a:	2000      	movs	r0, #0
}
    582c:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    582e:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    5830:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    5832:	7a19      	ldrb	r1, [r3, #8]
    5834:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    5836:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    583a:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    583e:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    5842:	0280      	lsls	r0, r0, #10
    5844:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    5846:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    5848:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    584a:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    584c:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5850:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    5854:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5858:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
    585a:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    585c:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
    5860:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
    5862:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5866:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
    586a:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    586c:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
    5870:	3001      	adds	r0, #1
    5872:	f003 030f 	and.w	r3, r3, #15
    5876:	4413      	add	r3, r2
    5878:	3b07      	subs	r3, #7
    587a:	4098      	lsls	r0, r3
}
    587c:	f85d fb04 	ldr.w	pc, [sp], #4
    5880:	20020bdc 	.word	0x20020bdc

00005884 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    5884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    5888:	f002 fc8c 	bl	81a4 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    588c:	4e17      	ldr	r6, [pc, #92]	; (58ec <waitTransferComplete() [clone .part.0]+0x68>)
    588e:	4d18      	ldr	r5, [pc, #96]	; (58f0 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    5890:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5892:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5908 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    5896:	e004      	b.n	58a2 <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5898:	f002 fc84 	bl	81a4 <micros>
    589c:	1bc0      	subs	r0, r0, r7
    589e:	4540      	cmp	r0, r8
    58a0:	d81b      	bhi.n	58da <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    58a2:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    58a4:	402c      	ands	r4, r5
    58a6:	d0f7      	beq.n	5898 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    58a8:	4a12      	ldr	r2, [pc, #72]	; (58f4 <waitTransferComplete() [clone .part.0]+0x70>)
    58aa:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    58ac:	4b12      	ldr	r3, [pc, #72]	; (58f8 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    58ae:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    58b0:	6b32      	ldr	r2, [r6, #48]	; 0x30
    58b2:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    58b4:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    58b6:	4a11      	ldr	r2, [pc, #68]	; (58fc <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    58b8:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    58ba:	681b      	ldr	r3, [r3, #0]
    58bc:	4213      	tst	r3, r2
    58be:	d009      	beq.n	58d4 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    58c0:	490f      	ldr	r1, [pc, #60]	; (5900 <waitTransferComplete() [clone .part.0]+0x7c>)
    58c2:	241f      	movs	r4, #31
  m_errorLine = line;
    58c4:	4b0f      	ldr	r3, [pc, #60]	; (5904 <waitTransferComplete() [clone .part.0]+0x80>)
    58c6:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    58ca:	2000      	movs	r0, #0
  m_errorCode = code;
    58cc:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    58ce:	601a      	str	r2, [r3, #0]
}
    58d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    58d4:	2001      	movs	r0, #1
}
    58d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    58da:	4a06      	ldr	r2, [pc, #24]	; (58f4 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    58dc:	4b06      	ldr	r3, [pc, #24]	; (58f8 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    58de:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    58e0:	6b32      	ldr	r2, [r6, #48]	; 0x30
    58e2:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    58e4:	681b      	ldr	r3, [r3, #0]
    58e6:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    58e8:	e7ea      	b.n	58c0 <waitTransferComplete() [clone .part.0]+0x3c>
    58ea:	bf00      	nop
    58ec:	402c0000 	.word	0x402c0000
    58f0:	117f0002 	.word	0x117f0002
    58f4:	200225e9 	.word	0x200225e9
    58f8:	20021098 	.word	0x20021098
    58fc:	117f0000 	.word	0x117f0000
    5900:	20008e6e 	.word	0x20008e6e
    5904:	2001e1b8 	.word	0x2001e1b8
    5908:	000f4240 	.word	0x000f4240

0000590c <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    590c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    5910:	4c26      	ldr	r4, [pc, #152]	; (59ac <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    5912:	460f      	mov	r7, r1
  if (!m_transferActive) {
    5914:	7823      	ldrb	r3, [r4, #0]
    5916:	2b00      	cmp	r3, #0
    5918:	d138      	bne.n	598c <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    591a:	4b25      	ldr	r3, [pc, #148]	; (59b0 <SdioCard::writeData(unsigned char const*)+0xa4>)
    591c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    591e:	05d2      	lsls	r2, r2, #23
    5920:	d52b      	bpl.n	597a <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5922:	4d23      	ldr	r5, [pc, #140]	; (59b0 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5924:	f8df 8094 	ldr.w	r8, [pc, #148]	; 59bc <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5928:	6aab      	ldr	r3, [r5, #40]	; 0x28
    592a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    592e:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    5930:	f002 fc38 	bl	81a4 <micros>
    5934:	4606      	mov	r6, r0
  while (fcn()) {
    5936:	e004      	b.n	5942 <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5938:	f002 fc34 	bl	81a4 <micros>
    593c:	1b80      	subs	r0, r0, r6
    593e:	4540      	cmp	r0, r8
    5940:	d82a      	bhi.n	5998 <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    5942:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    5944:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    5948:	d0f6      	beq.n	5938 <SdioCard::writeData(unsigned char const*)+0x2c>
    594a:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    594e:	4818      	ldr	r0, [pc, #96]	; (59b0 <SdioCard::writeData(unsigned char const*)+0xa4>)
    5950:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    5954:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5956:	055b      	lsls	r3, r3, #21
    5958:	d5fc      	bpl.n	5954 <SdioCard::writeData(unsigned char const*)+0x48>
    595a:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    595e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5962:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    5964:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5966:	d1fa      	bne.n	595e <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    5968:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    596c:	45bc      	cmp	ip, r7
    596e:	d1f1      	bne.n	5954 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    5970:	2301      	movs	r3, #1
  return true;
    5972:	4618      	mov	r0, r3
  m_transferActive = true;
    5974:	7023      	strb	r3, [r4, #0]
}
    5976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    597a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    597c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    5980:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    5982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5984:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    5988:	629a      	str	r2, [r3, #40]	; 0x28
    598a:	e7ca      	b.n	5922 <SdioCard::writeData(unsigned char const*)+0x16>
    598c:	f7ff ff7a 	bl	5884 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    5990:	2800      	cmp	r0, #0
    5992:	d1c2      	bne.n	591a <SdioCard::writeData(unsigned char const*)+0xe>
}
    5994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    5998:	4906      	ldr	r1, [pc, #24]	; (59b4 <SdioCard::writeData(unsigned char const*)+0xa8>)
    599a:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
    599c:	4b06      	ldr	r3, [pc, #24]	; (59b8 <SdioCard::writeData(unsigned char const*)+0xac>)
    599e:	f240 32d9 	movw	r2, #985	; 0x3d9
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    59a2:	4648      	mov	r0, r9
  m_errorCode = code;
    59a4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    59a6:	601a      	str	r2, [r3, #0]
}
    59a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    59ac:	200225e9 	.word	0x200225e9
    59b0:	402c0000 	.word	0x402c0000
    59b4:	20008e6e 	.word	0x20008e6e
    59b8:	2001e1b8 	.word	0x2001e1b8
    59bc:	000f4240 	.word	0x000f4240

000059c0 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    59c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59c4:	4607      	mov	r7, r0
    59c6:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    59c8:	4c1f      	ldr	r4, [pc, #124]	; (5a48 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    59ca:	f002 fbeb 	bl	81a4 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    59ce:	4e1f      	ldr	r6, [pc, #124]	; (5a4c <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    59d0:	4605      	mov	r5, r0
  while (fcn()) {
    59d2:	e004      	b.n	59de <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    59d4:	f002 fbe6 	bl	81a4 <micros>
    59d8:	1b43      	subs	r3, r0, r5
    59da:	42b3      	cmp	r3, r6
    59dc:	d824      	bhi.n	5a28 <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    59de:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    59e0:	07d9      	lsls	r1, r3, #31
    59e2:	d4f7      	bmi.n	59d4 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    59e4:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    59e6:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    59ea:	d420      	bmi.n	5a2e <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    59ec:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    59f0:	4c15      	ldr	r4, [pc, #84]	; (5a48 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    59f2:	4e17      	ldr	r6, [pc, #92]	; (5a50 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    59f4:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    59f6:	f002 fbd5 	bl	81a4 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    59fa:	4f14      	ldr	r7, [pc, #80]	; (5a4c <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    59fc:	4605      	mov	r5, r0
  while (fcn()) {
    59fe:	e004      	b.n	5a0a <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5a00:	f002 fbd0 	bl	81a4 <micros>
    5a04:	1b40      	subs	r0, r0, r5
    5a06:	42b8      	cmp	r0, r7
    5a08:	d80e      	bhi.n	5a28 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    5a0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    5a0c:	4233      	tst	r3, r6
    5a0e:	d0f7      	beq.n	5a00 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    5a10:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5a12:	4b10      	ldr	r3, [pc, #64]	; (5a54 <cardCommand(unsigned long, unsigned long)+0x94>)
    5a14:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5a16:	681a      	ldr	r2, [r3, #0]
    5a18:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    5a1a:	681a      	ldr	r2, [r3, #0]
    5a1c:	07d2      	lsls	r2, r2, #31
    5a1e:	d503      	bpl.n	5a28 <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5a20:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    5a22:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    5a26:	d00b      	beq.n	5a40 <cardCommand(unsigned long, unsigned long)+0x80>
    5a28:	2000      	movs	r0, #0
}
    5a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5a2e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5a30:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    5a32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    5a36:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    5a38:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    5a3a:	4313      	orrs	r3, r2
    5a3c:	64a3      	str	r3, [r4, #72]	; 0x48
    5a3e:	e7d5      	b.n	59ec <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    5a40:	2001      	movs	r0, #1
}
    5a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a46:	bf00      	nop
    5a48:	402c0000 	.word	0x402c0000
    5a4c:	000f4240 	.word	0x000f4240
    5a50:	000f0001 	.word	0x000f0001
    5a54:	20021098 	.word	0x20021098

00005a58 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    5a58:	4b15      	ldr	r3, [pc, #84]	; (5ab0 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    5a5a:	b530      	push	{r4, r5, lr}
    5a5c:	460d      	mov	r5, r1
    5a5e:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    5a60:	6819      	ldr	r1, [r3, #0]
    5a62:	f7ff ffad 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    5a66:	b308      	cbz	r0, 5aac <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    5a68:	4b12      	ldr	r3, [pc, #72]	; (5ab4 <readReg16(unsigned long, void*)+0x5c>)
    5a6a:	f105 040f 	add.w	r4, r5, #15
    5a6e:	691a      	ldr	r2, [r3, #16]
    5a70:	9200      	str	r2, [sp, #0]
    5a72:	6959      	ldr	r1, [r3, #20]
    5a74:	9101      	str	r1, [sp, #4]
    5a76:	6999      	ldr	r1, [r3, #24]
    5a78:	9102      	str	r1, [sp, #8]
    5a7a:	69db      	ldr	r3, [r3, #28]
    5a7c:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    5a7e:	2300      	movs	r3, #0
    5a80:	e001      	b.n	5a86 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
    5a82:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    5a86:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    5a8a:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    5a8c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    5a90:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    5a94:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    5a96:	fa22 f20c 	lsr.w	r2, r2, ip
    5a9a:	f10e 0110 	add.w	r1, lr, #16
    5a9e:	f804 2d01 	strb.w	r2, [r4, #-1]!
    5aa2:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    5aa6:	d1ec      	bne.n	5a82 <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    5aa8:	2300      	movs	r3, #0
    5aaa:	73eb      	strb	r3, [r5, #15]
}
    5aac:	b005      	add	sp, #20
    5aae:	bd30      	pop	{r4, r5, pc}
    5ab0:	20020bf0 	.word	0x20020bf0
    5ab4:	402c0000 	.word	0x402c0000

00005ab8 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    5ab8:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
    5aba:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    5abc:	07db      	lsls	r3, r3, #31
    5abe:	d505      	bpl.n	5acc <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5ac0:	4b15      	ldr	r3, [pc, #84]	; (5b18 <SdioCard::isBusy()+0x60>)
    5ac2:	681b      	ldr	r3, [r3, #0]
    5ac4:	b1b3      	cbz	r3, 5af4 <SdioCard::isBusy()+0x3c>
}
    5ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5aca:	4718      	bx	r3
    if (m_transferActive) {
    5acc:	4b13      	ldr	r3, [pc, #76]	; (5b1c <SdioCard::isBusy()+0x64>)
    5ace:	781b      	ldrb	r3, [r3, #0]
    5ad0:	b93b      	cbnz	r3, 5ae2 <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5ad2:	4b13      	ldr	r3, [pc, #76]	; (5b20 <SdioCard::isBusy()+0x68>)
    5ad4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    5ad6:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    5ada:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    5ade:	4620      	mov	r0, r4
    5ae0:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5ae2:	4b0f      	ldr	r3, [pc, #60]	; (5b20 <SdioCard::isBusy()+0x68>)
    5ae4:	4c0f      	ldr	r4, [pc, #60]	; (5b24 <SdioCard::isBusy()+0x6c>)
    5ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5ae8:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    5aea:	fab4 f484 	clz	r4, r4
    5aee:	0964      	lsrs	r4, r4, #5
}
    5af0:	4620      	mov	r0, r4
    5af2:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5af4:	4b0c      	ldr	r3, [pc, #48]	; (5b28 <SdioCard::isBusy()+0x70>)
    5af6:	781c      	ldrb	r4, [r3, #0]
    5af8:	2c00      	cmp	r4, #0
    5afa:	d0f0      	beq.n	5ade <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5afc:	4b0b      	ldr	r3, [pc, #44]	; (5b2c <SdioCard::isBusy()+0x74>)
    5afe:	480c      	ldr	r0, [pc, #48]	; (5b30 <SdioCard::isBusy()+0x78>)
    5b00:	6819      	ldr	r1, [r3, #0]
    5b02:	f7ff ff5d 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    5b06:	2800      	cmp	r0, #0
    5b08:	d0e9      	beq.n	5ade <SdioCard::isBusy()+0x26>
    5b0a:	4b05      	ldr	r3, [pc, #20]	; (5b20 <SdioCard::isBusy()+0x68>)
    5b0c:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5b0e:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    5b12:	f3c4 2400 	ubfx	r4, r4, #8, #1
    5b16:	e7e2      	b.n	5ade <SdioCard::isBusy()+0x26>
    5b18:	20021094 	.word	0x20021094
    5b1c:	200225e9 	.word	0x200225e9
    5b20:	402c0000 	.word	0x402c0000
    5b24:	117f0002 	.word	0x117f0002
    5b28:	200225e6 	.word	0x200225e6
    5b2c:	20020bf0 	.word	0x20020bf0
    5b30:	0d1a0000 	.word	0x0d1a0000

00005b34 <SdioCard::status()>:
uint32_t SdioCard::status() {
    5b34:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5b36:	4b04      	ldr	r3, [pc, #16]	; (5b48 <SdioCard::status()+0x14>)
    5b38:	4804      	ldr	r0, [pc, #16]	; (5b4c <SdioCard::status()+0x18>)
    5b3a:	6819      	ldr	r1, [r3, #0]
    5b3c:	f7ff ff40 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    5b40:	b108      	cbz	r0, 5b46 <SdioCard::status()+0x12>
    5b42:	4b03      	ldr	r3, [pc, #12]	; (5b50 <SdioCard::status()+0x1c>)
    5b44:	6918      	ldr	r0, [r3, #16]
}
    5b46:	bd08      	pop	{r3, pc}
    5b48:	20020bf0 	.word	0x20020bf0
    5b4c:	0d1a0000 	.word	0x0d1a0000
    5b50:	402c0000 	.word	0x402c0000

00005b54 <isBusyCMD13()>:
static bool isBusyCMD13() {
    5b54:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5b56:	4b07      	ldr	r3, [pc, #28]	; (5b74 <isBusyCMD13()+0x20>)
    5b58:	4807      	ldr	r0, [pc, #28]	; (5b78 <isBusyCMD13()+0x24>)
    5b5a:	6819      	ldr	r1, [r3, #0]
    5b5c:	f7ff ff30 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    5b60:	b130      	cbz	r0, 5b70 <isBusyCMD13()+0x1c>
    5b62:	4b06      	ldr	r3, [pc, #24]	; (5b7c <isBusyCMD13()+0x28>)
    5b64:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    5b66:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    5b6a:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    5b6e:	bd08      	pop	{r3, pc}
    5b70:	2001      	movs	r0, #1
    5b72:	bd08      	pop	{r3, pc}
    5b74:	20020bf0 	.word	0x20020bf0
    5b78:	0d1a0000 	.word	0x0d1a0000
    5b7c:	402c0000 	.word	0x402c0000

00005b80 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    5b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    5b84:	4b29      	ldr	r3, [pc, #164]	; (5c2c <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    5b86:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    5b88:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 5c4c <SdioCard::writeStart(unsigned long)+0xcc>
    5b8c:	4e28      	ldr	r6, [pc, #160]	; (5c30 <SdioCard::writeStart(unsigned long)+0xb0>)
    5b8e:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    5b92:	f002 fb07 	bl	81a4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5b96:	4d27      	ldr	r5, [pc, #156]	; (5c34 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    5b98:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5b9a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 5c50 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5b9e:	4f26      	ldr	r7, [pc, #152]	; (5c38 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    5ba0:	e006      	b.n	5bb0 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5ba2:	f002 faff 	bl	81a4 <micros>
    5ba6:	1b00      	subs	r0, r0, r4
    5ba8:	42b8      	cmp	r0, r7
    5baa:	d829      	bhi.n	5c00 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    5bac:	f004 fbd0 	bl	a350 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5bb0:	6831      	ldr	r1, [r6, #0]
    5bb2:	4628      	mov	r0, r5
    5bb4:	f7ff ff04 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    5bb8:	2800      	cmp	r0, #0
    5bba:	d0f2      	beq.n	5ba2 <SdioCard::writeStart(unsigned long)+0x22>
    5bbc:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5bc0:	05db      	lsls	r3, r3, #23
    5bc2:	d5ee      	bpl.n	5ba2 <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    5bc4:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    5bca:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5bce:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    5bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5bd6:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5bda:	4b18      	ldr	r3, [pc, #96]	; (5c3c <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    5bdc:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5be0:	781b      	ldrb	r3, [r3, #0]
    5be2:	b1cb      	cbz	r3, 5c18 <SdioCard::writeStart(unsigned long)+0x98>
    5be4:	4649      	mov	r1, r9
    5be6:	4816      	ldr	r0, [pc, #88]	; (5c40 <SdioCard::writeStart(unsigned long)+0xc0>)
    5be8:	f7ff feea 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    5bec:	b930      	cbnz	r0, 5bfc <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    5bee:	4915      	ldr	r1, [pc, #84]	; (5c44 <SdioCard::writeStart(unsigned long)+0xc4>)
    5bf0:	240e      	movs	r4, #14
  m_errorLine = line;
    5bf2:	4b15      	ldr	r3, [pc, #84]	; (5c48 <SdioCard::writeStart(unsigned long)+0xc8>)
    5bf4:	f44f 6287 	mov.w	r2, #1080	; 0x438
  m_errorCode = code;
    5bf8:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5bfa:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    5bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    5c00:	4a10      	ldr	r2, [pc, #64]	; (5c44 <SdioCard::writeStart(unsigned long)+0xc4>)
    5c02:	210a      	movs	r1, #10
      m_busyFcn = 0;
    5c04:	2000      	movs	r0, #0
  m_errorLine = line;
    5c06:	4b10      	ldr	r3, [pc, #64]	; (5c48 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    5c08:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    5c0a:	f240 422c 	movw	r2, #1068	; 0x42c
      m_busyFcn = 0;
    5c0e:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    5c12:	601a      	str	r2, [r3, #0]
}
    5c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5c18:	ea4f 2949 	mov.w	r9, r9, lsl #9
    5c1c:	4808      	ldr	r0, [pc, #32]	; (5c40 <SdioCard::writeStart(unsigned long)+0xc0>)
    5c1e:	4649      	mov	r1, r9
    5c20:	f7ff fece 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    5c24:	2800      	cmp	r0, #0
    5c26:	d1e9      	bne.n	5bfc <SdioCard::writeStart(unsigned long)+0x7c>
    5c28:	e7e1      	b.n	5bee <SdioCard::writeStart(unsigned long)+0x6e>
    5c2a:	bf00      	nop
    5c2c:	00005b55 	.word	0x00005b55
    5c30:	20020bf0 	.word	0x20020bf0
    5c34:	0d1a0000 	.word	0x0d1a0000
    5c38:	000f4240 	.word	0x000f4240
    5c3c:	200225e8 	.word	0x200225e8
    5c40:	193a0020 	.word	0x193a0020
    5c44:	20008e6e 	.word	0x20008e6e
    5c48:	2001e1b8 	.word	0x2001e1b8
    5c4c:	20021094 	.word	0x20021094
    5c50:	402c0000 	.word	0x402c0000

00005c54 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    5c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5c58:	4c25      	ldr	r4, [pc, #148]	; (5cf0 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    5c5a:	2100      	movs	r1, #0
    5c5c:	4825      	ldr	r0, [pc, #148]	; (5cf4 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5c5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5c64:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    5c66:	f7ff feab 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    5c6a:	4605      	mov	r5, r0
    5c6c:	b948      	cbnz	r0, 5c82 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    5c6e:	4922      	ldr	r1, [pc, #136]	; (5cf8 <SdioCard::readStop()+0xa4>)
    5c70:	2009      	movs	r0, #9
  m_errorLine = line;
    5c72:	4b22      	ldr	r3, [pc, #136]	; (5cfc <SdioCard::readStop()+0xa8>)
    5c74:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
    5c78:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    5c7a:	601a      	str	r2, [r3, #0]
}
    5c7c:	4628      	mov	r0, r5
    5c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    5c82:	4b1f      	ldr	r3, [pc, #124]	; (5d00 <SdioCard::readStop()+0xac>)
    5c84:	f8df 8080 	ldr.w	r8, [pc, #128]	; 5d08 <SdioCard::readStop()+0xb4>
    5c88:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    5c8c:	f002 fa8a 	bl	81a4 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    5c92:	4606      	mov	r6, r0
  while (fcn()) {
    5c94:	01d8      	lsls	r0, r3, #7
    5c96:	d418      	bmi.n	5cca <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5c98:	4f1a      	ldr	r7, [pc, #104]	; (5d04 <SdioCard::readStop()+0xb0>)
    5c9a:	e004      	b.n	5ca6 <SdioCard::readStop()+0x52>
    yield();
    5c9c:	f004 fb58 	bl	a350 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    5ca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    5ca2:	01d9      	lsls	r1, r3, #7
    5ca4:	d411      	bmi.n	5cca <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5ca6:	f002 fa7d 	bl	81a4 <micros>
    5caa:	1b83      	subs	r3, r0, r6
    5cac:	42bb      	cmp	r3, r7
    5cae:	d9f5      	bls.n	5c9c <SdioCard::readStop()+0x48>
  m_errorCode = code;
    5cb0:	4a11      	ldr	r2, [pc, #68]	; (5cf8 <SdioCard::readStop()+0xa4>)
    5cb2:	210a      	movs	r1, #10
      m_busyFcn = 0;
    5cb4:	2500      	movs	r5, #0
  m_errorLine = line;
    5cb6:	4b11      	ldr	r3, [pc, #68]	; (5cfc <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    5cb8:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    5cba:	f44f 7210 	mov.w	r2, #576	; 0x240
}
    5cbe:	4628      	mov	r0, r5
      m_busyFcn = 0;
    5cc0:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    5cc4:	601a      	str	r2, [r3, #0]
}
    5cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    5cca:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    5ccc:	4b08      	ldr	r3, [pc, #32]	; (5cf0 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    5cce:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    5cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5cd4:	0792      	lsls	r2, r2, #30
    5cd6:	d5d1      	bpl.n	5c7c <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    5cd8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    5cda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    5cdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    5cde:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    5ce2:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    5ce6:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    5ce8:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    5cea:	629a      	str	r2, [r3, #40]	; 0x28
    5cec:	e7c6      	b.n	5c7c <SdioCard::readStop()+0x28>
    5cee:	bf00      	nop
    5cf0:	402c0000 	.word	0x402c0000
    5cf4:	0cdb0000 	.word	0x0cdb0000
    5cf8:	20008e6e 	.word	0x20008e6e
    5cfc:	2001e1b8 	.word	0x2001e1b8
    5d00:	00005691 	.word	0x00005691
    5d04:	000f4240 	.word	0x000f4240
    5d08:	20021094 	.word	0x20021094

00005d0c <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    5d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d10:	4682      	mov	sl, r0
    5d12:	4689      	mov	r9, r1
    5d14:	4e36      	ldr	r6, [pc, #216]	; (5df0 <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
    5d16:	f002 fa45 	bl	81a4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5d1a:	4d36      	ldr	r5, [pc, #216]	; (5df4 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
    5d1c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5d1e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 5e20 <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d22:	4f35      	ldr	r7, [pc, #212]	; (5df8 <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
    5d24:	e004      	b.n	5d30 <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5d26:	f002 fa3d 	bl	81a4 <micros>
    5d2a:	1b03      	subs	r3, r0, r4
    5d2c:	42bb      	cmp	r3, r7
    5d2e:	d827      	bhi.n	5d80 <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5d30:	6831      	ldr	r1, [r6, #0]
    5d32:	4628      	mov	r0, r5
    5d34:	f7ff fe44 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    5d38:	2800      	cmp	r0, #0
    5d3a:	d0f4      	beq.n	5d26 <cardCMD6(unsigned long, unsigned char*)+0x1a>
    5d3c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5d40:	05da      	lsls	r2, r3, #23
    5d42:	d5f0      	bpl.n	5d26 <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    5d44:	2301      	movs	r3, #1
    5d46:	4d2d      	ldr	r5, [pc, #180]	; (5dfc <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
    5d48:	4f2d      	ldr	r7, [pc, #180]	; (5e00 <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5d4a:	4651      	mov	r1, sl
  m_dmaBusy = true;
    5d4c:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
    5d4e:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5d50:	482c      	ldr	r0, [pc, #176]	; (5e04 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
    5d52:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5d54:	4b2c      	ldr	r3, [pc, #176]	; (5e08 <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
    5d56:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5d5a:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5d5e:	4b2b      	ldr	r3, [pc, #172]	; (5e0c <cardCMD6(unsigned long, unsigned char*)+0x100>)
    5d60:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5d64:	f7ff fe2c 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    5d68:	4604      	mov	r4, r0
    5d6a:	b9a0      	cbnz	r0, 5d96 <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
    5d6c:	4928      	ldr	r1, [pc, #160]	; (5e10 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    5d6e:	2004      	movs	r0, #4
  m_errorLine = line;
    5d70:	4b28      	ldr	r3, [pc, #160]	; (5e14 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    5d72:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
    5d76:	7008      	strb	r0, [r1, #0]
}
    5d78:	4620      	mov	r0, r4
  m_errorLine = line;
    5d7a:	601a      	str	r2, [r3, #0]
}
    5d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    5d80:	4923      	ldr	r1, [pc, #140]	; (5e10 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    5d82:	200a      	movs	r0, #10
  m_errorLine = line;
    5d84:	4b23      	ldr	r3, [pc, #140]	; (5e14 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    5d86:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
    5d8a:	2400      	movs	r4, #0
  m_errorCode = code;
    5d8c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    5d8e:	601a      	str	r2, [r3, #0]
}
    5d90:	4620      	mov	r0, r4
    5d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
    5d96:	4b20      	ldr	r3, [pc, #128]	; (5e18 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
    5d98:	f8df 9088 	ldr.w	r9, [pc, #136]	; 5e24 <cardCMD6(unsigned long, unsigned char*)+0x118>
    5d9c:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
    5da0:	f002 fa00 	bl	81a4 <micros>
  return m_dmaBusy;
    5da4:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
    5da6:	4606      	mov	r6, r0
  while (fcn()) {
    5da8:	b1bb      	cbz	r3, 5dda <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5daa:	f8df 804c 	ldr.w	r8, [pc, #76]	; 5df8 <cardCMD6(unsigned long, unsigned char*)+0xec>
    5dae:	e003      	b.n	5db8 <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
    5db0:	f004 face 	bl	a350 <yield>
  return m_dmaBusy;
    5db4:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    5db6:	b183      	cbz	r3, 5dda <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5db8:	f002 f9f4 	bl	81a4 <micros>
    5dbc:	1b83      	subs	r3, r0, r6
    5dbe:	4543      	cmp	r3, r8
    5dc0:	d9f6      	bls.n	5db0 <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
    5dc2:	2300      	movs	r3, #0
    5dc4:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
    5dc8:	4911      	ldr	r1, [pc, #68]	; (5e10 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    5dca:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    5dcc:	4b11      	ldr	r3, [pc, #68]	; (5e14 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    5dce:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
    5dd2:	2400      	movs	r4, #0
  m_errorCode = code;
    5dd4:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    5dd6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    5dd8:	e7da      	b.n	5d90 <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5dda:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
    5ddc:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5dde:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
    5de0:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5de4:	d5f0      	bpl.n	5dc8 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    5de6:	683a      	ldr	r2, [r7, #0]
    5de8:	4b0c      	ldr	r3, [pc, #48]	; (5e1c <cardCMD6(unsigned long, unsigned char*)+0x110>)
    5dea:	421a      	tst	r2, r3
    5dec:	d0d0      	beq.n	5d90 <cardCMD6(unsigned long, unsigned char*)+0x84>
    5dee:	e7eb      	b.n	5dc8 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    5df0:	20020bf0 	.word	0x20020bf0
    5df4:	0d1a0000 	.word	0x0d1a0000
    5df8:	000f4240 	.word	0x000f4240
    5dfc:	200225ea 	.word	0x200225ea
    5e00:	20021098 	.word	0x20021098
    5e04:	063a0011 	.word	0x063a0011
    5e08:	00010040 	.word	0x00010040
    5e0c:	117f0002 	.word	0x117f0002
    5e10:	20008e6e 	.word	0x20008e6e
    5e14:	2001e1b8 	.word	0x2001e1b8
    5e18:	000056a5 	.word	0x000056a5
    5e1c:	117f0000 	.word	0x117f0000
    5e20:	402c0000 	.word	0x402c0000
    5e24:	20021094 	.word	0x20021094

00005e28 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
    5e2c:	4d32      	ldr	r5, [pc, #200]	; (5ef8 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5e2e:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    5e30:	7aab      	ldrb	r3, [r5, #10]
    5e32:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    5e36:	d112      	bne.n	5e5e <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    5e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5e3c:	7aea      	ldrb	r2, [r5, #11]
    5e3e:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    5e40:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    5e44:	1c62      	adds	r2, r4, #1
    5e46:	430a      	orrs	r2, r1
    5e48:	4213      	tst	r3, r2
    5e4a:	d008      	beq.n	5e5e <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    5e4c:	492b      	ldr	r1, [pc, #172]	; (5efc <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5e4e:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
    5e50:	4b2b      	ldr	r3, [pc, #172]	; (5f00 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5e52:	f240 22e3 	movw	r2, #739	; 0x2e3
  m_errorCode = code;
    5e56:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5e58:	601a      	str	r2, [r3, #0]
}
    5e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    5e5e:	4b29      	ldr	r3, [pc, #164]	; (5f04 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    5e60:	781b      	ldrb	r3, [r3, #0]
    5e62:	b90b      	cbnz	r3, 5e68 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    5e64:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    5e66:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    5e68:	4827      	ldr	r0, [pc, #156]	; (5f08 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    5e6a:	f7ff fda9 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    5e6e:	b940      	cbnz	r0, 5e82 <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
    5e70:	4922      	ldr	r1, [pc, #136]	; (5efc <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5e72:	240f      	movs	r4, #15
  m_errorLine = line;
    5e74:	4b22      	ldr	r3, [pc, #136]	; (5f00 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5e76:	f240 22eb 	movw	r2, #747	; 0x2eb
  m_errorCode = code;
    5e7a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5e7c:	601a      	str	r2, [r3, #0]
}
    5e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    5e82:	4621      	mov	r1, r4
    5e84:	4821      	ldr	r0, [pc, #132]	; (5f0c <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    5e86:	f7ff fd9b 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    5e8a:	b940      	cbnz	r0, 5e9e <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
    5e8c:	491b      	ldr	r1, [pc, #108]	; (5efc <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5e8e:	2410      	movs	r4, #16
  m_errorLine = line;
    5e90:	4b1b      	ldr	r3, [pc, #108]	; (5f00 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5e92:	f240 22ee 	movw	r2, #750	; 0x2ee
  m_errorCode = code;
    5e96:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5e98:	601a      	str	r2, [r3, #0]
}
    5e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    5e9e:	2100      	movs	r1, #0
    5ea0:	481b      	ldr	r0, [pc, #108]	; (5f10 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    5ea2:	f7ff fd8d 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    5ea6:	b938      	cbnz	r0, 5eb8 <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
    5ea8:	4914      	ldr	r1, [pc, #80]	; (5efc <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5eaa:	2411      	movs	r4, #17
  m_errorLine = line;
    5eac:	4b14      	ldr	r3, [pc, #80]	; (5f00 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5eae:	f240 22f1 	movw	r2, #753	; 0x2f1
  m_errorCode = code;
    5eb2:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5eb4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    5eb6:	e7e2      	b.n	5e7e <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
    5eb8:	f002 f974 	bl	81a4 <micros>
    5ebc:	4e15      	ldr	r6, [pc, #84]	; (5f14 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5ebe:	4d16      	ldr	r5, [pc, #88]	; (5f18 <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
    5ec0:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5ec2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5f20 <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5ec6:	4f15      	ldr	r7, [pc, #84]	; (5f1c <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5ec8:	6831      	ldr	r1, [r6, #0]
    5eca:	4628      	mov	r0, r5
    5ecc:	f7ff fd78 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    5ed0:	b118      	cbz	r0, 5eda <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    5ed2:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    5ed6:	05db      	lsls	r3, r3, #23
    5ed8:	d4d1      	bmi.n	5e7e <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5eda:	f002 f963 	bl	81a4 <micros>
    5ede:	1b00      	subs	r0, r0, r4
    5ee0:	42b8      	cmp	r0, r7
    5ee2:	d9f1      	bls.n	5ec8 <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    5ee4:	4905      	ldr	r1, [pc, #20]	; (5efc <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    5ee6:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    5ee8:	4b05      	ldr	r3, [pc, #20]	; (5f00 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    5eea:	f44f 723d 	mov.w	r2, #756	; 0x2f4
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    5eee:	2000      	movs	r0, #0
  m_errorCode = code;
    5ef0:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    5ef2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    5ef4:	e7c3      	b.n	5e7e <SdioCard::erase(unsigned long, unsigned long)+0x56>
    5ef6:	bf00      	nop
    5ef8:	20020bdc 	.word	0x20020bdc
    5efc:	20008e6e 	.word	0x20008e6e
    5f00:	2001e1b8 	.word	0x2001e1b8
    5f04:	200225e8 	.word	0x200225e8
    5f08:	201a0000 	.word	0x201a0000
    5f0c:	211a0000 	.word	0x211a0000
    5f10:	261b0000 	.word	0x261b0000
    5f14:	20020bf0 	.word	0x20020bf0
    5f18:	0d1a0000 	.word	0x0d1a0000
    5f1c:	000f4240 	.word	0x000f4240
    5f20:	402c0000 	.word	0x402c0000

00005f24 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    5f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    5f28:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
    5f2c:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    5f2e:	bf18      	it	ne
    5f30:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
    5f32:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
    5f34:	9300      	str	r3, [sp, #0]
    5f36:	2b00      	cmp	r3, #0
    5f38:	bf08      	it	eq
    5f3a:	f044 0401 	orreq.w	r4, r4, #1
    5f3e:	b15c      	cbz	r4, 5f58 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    5f40:	4940      	ldr	r1, [pc, #256]	; (6044 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    5f42:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    5f44:	4b40      	ldr	r3, [pc, #256]	; (6048 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
    5f46:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
    5f4a:	2400      	movs	r4, #0
  m_errorCode = code;
    5f4c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    5f4e:	601a      	str	r2, [r3, #0]
}
    5f50:	4620      	mov	r0, r4
    5f52:	b003      	add	sp, #12
    5f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    5f58:	4b3c      	ldr	r3, [pc, #240]	; (604c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
    5f5a:	4615      	mov	r5, r2
    5f5c:	4a3c      	ldr	r2, [pc, #240]	; (6050 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    5f5e:	460e      	mov	r6, r1
    5f60:	f8df 910c 	ldr.w	r9, [pc, #268]	; 6070 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
    5f64:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    5f66:	f002 f91d 	bl	81a4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f6a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 6074 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
    5f6e:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f70:	f8df b104 	ldr.w	fp, [pc, #260]	; 6078 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5f74:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 6068 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
    5f78:	e006      	b.n	5f88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5f7a:	f002 f913 	bl	81a4 <micros>
    5f7e:	1bc0      	subs	r0, r0, r7
    5f80:	4550      	cmp	r0, sl
    5f82:	d844      	bhi.n	600e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
    5f84:	f004 f9e4 	bl	a350 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    5f88:	f8d9 1000 	ldr.w	r1, [r9]
    5f8c:	4640      	mov	r0, r8
    5f8e:	f7ff fd17 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    5f92:	2800      	cmp	r0, #0
    5f94:	d0f1      	beq.n	5f7a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    5f96:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    5f9a:	05da      	lsls	r2, r3, #23
    5f9c:	d5ed      	bpl.n	5f7a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    5f9e:	9a00      	ldr	r2, [sp, #0]
    5fa0:	4b2c      	ldr	r3, [pc, #176]	; (6054 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
    5fa2:	492b      	ldr	r1, [pc, #172]	; (6050 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    5fa4:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    5fa8:	2200      	movs	r2, #0
  m_dmaBusy = true;
    5faa:	4f2b      	ldr	r7, [pc, #172]	; (6058 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
    5fac:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    5fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    5fb2:	2101      	movs	r1, #1
  m_irqstat = 0;
    5fb4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 607c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
    5fb8:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
    5fba:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
    5fbe:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    5fc2:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5fc6:	4b25      	ldr	r3, [pc, #148]	; (605c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
    5fc8:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    5fcc:	4b24      	ldr	r3, [pc, #144]	; (6060 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    5fce:	781b      	ldrb	r3, [r3, #0]
    5fd0:	b343      	cbz	r3, 6024 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
    5fd2:	4631      	mov	r1, r6
    5fd4:	9801      	ldr	r0, [sp, #4]
    5fd6:	f7ff fcf3 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    5fda:	4681      	mov	r9, r0
    5fdc:	2800      	cmp	r0, #0
    5fde:	d0b7      	beq.n	5f50 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
    5fe0:	4b20      	ldr	r3, [pc, #128]	; (6064 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
    5fe2:	4a1b      	ldr	r2, [pc, #108]	; (6050 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    5fe4:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    5fe6:	f002 f8dd 	bl	81a4 <micros>
  return m_dmaBusy;
    5fea:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
    5fec:	4605      	mov	r5, r0
  while (fcn()) {
    5fee:	b1db      	cbz	r3, 6028 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5ff0:	4e1d      	ldr	r6, [pc, #116]	; (6068 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    5ff2:	e003      	b.n	5ffc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
    5ff4:	f004 f9ac 	bl	a350 <yield>
  return m_dmaBusy;
    5ff8:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
    5ffa:	b1ab      	cbz	r3, 6028 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5ffc:	f002 f8d2 	bl	81a4 <micros>
    6000:	1b40      	subs	r0, r0, r5
    6002:	42b0      	cmp	r0, r6
    6004:	d9f6      	bls.n	5ff4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
    6006:	2300      	movs	r3, #0
    6008:	4a11      	ldr	r2, [pc, #68]	; (6050 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    600a:	6013      	str	r3, [r2, #0]
      return true;
    600c:	e7a0      	b.n	5f50 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
    600e:	4b0d      	ldr	r3, [pc, #52]	; (6044 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    6010:	220a      	movs	r2, #10
      m_busyFcn = 0;
    6012:	2100      	movs	r1, #0
    6014:	480e      	ldr	r0, [pc, #56]	; (6050 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
    6016:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    6018:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    601c:	4b0a      	ldr	r3, [pc, #40]	; (6048 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
    601e:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
    6020:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    6022:	e795      	b.n	5f50 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    6024:	0276      	lsls	r6, r6, #9
    6026:	e7d4      	b.n	5fd2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
    6028:	2300      	movs	r3, #0
    602a:	4a09      	ldr	r2, [pc, #36]	; (6050 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    602c:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    602e:	f8d8 3000 	ldr.w	r3, [r8]
    6032:	079b      	lsls	r3, r3, #30
    6034:	d58c      	bpl.n	5f50 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    6036:	f8d8 2000 	ldr.w	r2, [r8]
    603a:	4b0c      	ldr	r3, [pc, #48]	; (606c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
    603c:	421a      	tst	r2, r3
    603e:	bf08      	it	eq
    6040:	464c      	moveq	r4, r9
    6042:	e785      	b.n	5f50 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    6044:	20008e6e 	.word	0x20008e6e
    6048:	2001e1b8 	.word	0x2001e1b8
    604c:	00005b55 	.word	0x00005b55
    6050:	20021094 	.word	0x20021094
    6054:	1fff0000 	.word	0x1fff0000
    6058:	200225ea 	.word	0x200225ea
    605c:	117f0002 	.word	0x117f0002
    6060:	200225e8 	.word	0x200225e8
    6064:	000056a5 	.word	0x000056a5
    6068:	000f4240 	.word	0x000f4240
    606c:	117f0000 	.word	0x117f0000
    6070:	20020bf0 	.word	0x20020bf0
    6074:	0d1a0000 	.word	0x0d1a0000
    6078:	402c0000 	.word	0x402c0000
    607c:	20021098 	.word	0x20021098

00006080 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    6080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6082:	4606      	mov	r6, r0
    6084:	7a00      	ldrb	r0, [r0, #8]
    6086:	460c      	mov	r4, r1
    6088:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    608a:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    608c:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    608e:	d413      	bmi.n	60b8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    6090:	b183      	cbz	r3, 60b4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    6092:	440f      	add	r7, r1
    6094:	e001      	b.n	609a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    6096:	42bc      	cmp	r4, r7
    6098:	d00c      	beq.n	60b4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    609a:	6833      	ldr	r3, [r6, #0]
    609c:	462a      	mov	r2, r5
    609e:	4621      	mov	r1, r4
    60a0:	4630      	mov	r0, r6
    60a2:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    60a4:	3401      	adds	r4, #1
    60a6:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
    60aa:	4798      	blx	r3
    60ac:	2800      	cmp	r0, #0
    60ae:	d1f2      	bne.n	6096 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    60b0:	2000      	movs	r0, #0
}
    60b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    60b4:	2001      	movs	r0, #1
}
    60b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    60b8:	0790      	lsls	r0, r2, #30
    60ba:	d012      	beq.n	60e2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    60bc:	2b00      	cmp	r3, #0
    60be:	d0f9      	beq.n	60b4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    60c0:	440f      	add	r7, r1
    60c2:	e001      	b.n	60c8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    60c4:	42bc      	cmp	r4, r7
    60c6:	d0f5      	beq.n	60b4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    60c8:	6833      	ldr	r3, [r6, #0]
    60ca:	462a      	mov	r2, r5
    60cc:	4621      	mov	r1, r4
    60ce:	4630      	mov	r0, r6
    60d0:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    60d2:	3401      	adds	r4, #1
    60d4:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    60d8:	4798      	blx	r3
    60da:	2800      	cmp	r0, #0
    60dc:	d1f2      	bne.n	60c4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    60de:	2000      	movs	r0, #0
    60e0:	e7e7      	b.n	60b2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    60e2:	4806      	ldr	r0, [pc, #24]	; (60fc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    60e4:	f7ff ff1e 	bl	5f24 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    60e8:	2800      	cmp	r0, #0
    60ea:	d1e3      	bne.n	60b4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    60ec:	4904      	ldr	r1, [pc, #16]	; (6100 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    60ee:	240c      	movs	r4, #12
  m_errorLine = line;
    60f0:	4b04      	ldr	r3, [pc, #16]	; (6104 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    60f2:	f240 3282 	movw	r2, #898	; 0x382
  m_errorCode = code;
    60f6:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    60f8:	601a      	str	r2, [r3, #0]
}
    60fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    60fc:	123a0037 	.word	0x123a0037
    6100:	20008e6e 	.word	0x20008e6e
    6104:	2001e1b8 	.word	0x2001e1b8

00006108 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    6108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    610a:	4606      	mov	r6, r0
    610c:	7a00      	ldrb	r0, [r0, #8]
    610e:	460c      	mov	r4, r1
    6110:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    6112:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    6114:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    6116:	d413      	bmi.n	6140 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    6118:	b183      	cbz	r3, 613c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    611a:	440f      	add	r7, r1
    611c:	e001      	b.n	6122 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    611e:	42bc      	cmp	r4, r7
    6120:	d00c      	beq.n	613c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    6122:	6833      	ldr	r3, [r6, #0]
    6124:	462a      	mov	r2, r5
    6126:	4621      	mov	r1, r4
    6128:	4630      	mov	r0, r6
    612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
    612c:	3401      	adds	r4, #1
    612e:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
    6132:	4798      	blx	r3
    6134:	2800      	cmp	r0, #0
    6136:	d1f2      	bne.n	611e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    6138:	2000      	movs	r0, #0
}
    613a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    613c:	2001      	movs	r0, #1
}
    613e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    6140:	0790      	lsls	r0, r2, #30
    6142:	d012      	beq.n	616a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    6144:	2b00      	cmp	r3, #0
    6146:	d0f9      	beq.n	613c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    6148:	440f      	add	r7, r1
    614a:	e001      	b.n	6150 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    614c:	42bc      	cmp	r4, r7
    614e:	d0f5      	beq.n	613c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    6150:	6833      	ldr	r3, [r6, #0]
    6152:	462a      	mov	r2, r5
    6154:	4621      	mov	r1, r4
    6156:	4630      	mov	r0, r6
    6158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    615a:	3401      	adds	r4, #1
    615c:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    6160:	4798      	blx	r3
    6162:	2800      	cmp	r0, #0
    6164:	d1f2      	bne.n	614c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    6166:	2000      	movs	r0, #0
    6168:	e7e7      	b.n	613a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    616a:	4806      	ldr	r0, [pc, #24]	; (6184 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    616c:	f7ff feda 	bl	5f24 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6170:	2800      	cmp	r0, #0
    6172:	d1e3      	bne.n	613c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    6174:	4904      	ldr	r1, [pc, #16]	; (6188 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    6176:	240e      	movs	r4, #14
  m_errorLine = line;
    6178:	4b04      	ldr	r3, [pc, #16]	; (618c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    617a:	f240 421e 	movw	r2, #1054	; 0x41e
  m_errorCode = code;
    617e:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    6180:	601a      	str	r2, [r3, #0]
}
    6182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6184:	193a0027 	.word	0x193a0027
    6188:	20008e6e 	.word	0x20008e6e
    618c:	2001e1b8 	.word	0x2001e1b8

00006190 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    6190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    6194:	4ba8      	ldr	r3, [pc, #672]	; (6438 <SdioCard::begin(SdioConfig)+0x2a8>)
  m_curState = IDLE_STATE;
    6196:	2200      	movs	r2, #0
  m_initDone = false;
    6198:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 6498 <SdioCard::begin(SdioConfig)+0x308>
bool SdioCard::begin(SdioConfig sdioConfig) {
    619c:	b091      	sub	sp, #68	; 0x44
  m_errorCode = SD_CARD_ERROR_NONE;
    619e:	4da7      	ldr	r5, [pc, #668]	; (643c <SdioCard::begin(SdioConfig)+0x2ac>)
  m_highCapacity = false;
    61a0:	4fa7      	ldr	r7, [pc, #668]	; (6440 <SdioCard::begin(SdioConfig)+0x2b0>)
  m_version2 = false;
    61a2:	4ea8      	ldr	r6, [pc, #672]	; (6444 <SdioCard::begin(SdioConfig)+0x2b4>)
  m_errorCode = SD_CARD_ERROR_NONE;
    61a4:	702a      	strb	r2, [r5, #0]
  m_curState = IDLE_STATE;
    61a6:	7242      	strb	r2, [r0, #9]
  m_initDone = false;
    61a8:	f888 2000 	strb.w	r2, [r8]
  m_highCapacity = false;
    61ac:	703a      	strb	r2, [r7, #0]
  m_version2 = false;
    61ae:	7032      	strb	r2, [r6, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    61b0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
  m_sdioConfig = sdioConfig;
    61b4:	7201      	strb	r1, [r0, #8]
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    61b6:	2105      	movs	r1, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    61b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    61bc:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 6460 <SdioCard::begin(SdioConfig)+0x2d0>
  CCM_ANALOG_PFD_528 |= (1 << 7);
    61c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    61c4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    61c8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    61cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    61d0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    61d4:	f042 0218 	orr.w	r2, r2, #24
    61d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    61dc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    61e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    61e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    61e8:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    61ec:	4a96      	ldr	r2, [pc, #600]	; (6448 <SdioCard::begin(SdioConfig)+0x2b8>)
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    61ee:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    61f2:	f040 000c 	orr.w	r0, r0, #12
    61f6:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    61fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
    61fc:	f420 5060 	bic.w	r0, r0, #14336	; 0x3800
    6200:	6258      	str	r0, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    6202:	69d8      	ldr	r0, [r3, #28]
    6204:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    6208:	61d8      	str	r0, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    620a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    620c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    6210:	6258      	str	r0, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6212:	f8c2 11cc 	str.w	r1, [r2, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    6216:	f8c2 11d0 	str.w	r1, [r2, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    621a:	f8c2 11bc 	str.w	r1, [r2, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    621e:	f8c2 11c0 	str.w	r1, [r2, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    6222:	f8c2 11c4 	str.w	r1, [r2, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    6226:	f8c2 11c8 	str.w	r1, [r2, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    622a:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    622e:	4b87      	ldr	r3, [pc, #540]	; (644c <SdioCard::begin(SdioConfig)+0x2bc>)
  SDHC_MIX_CTRL |= 0x80000000;
    6230:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    6234:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    6238:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
    623c:	4313      	orrs	r3, r2
    623e:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    6242:	f8d9 402c 	ldr.w	r4, [r9, #44]	; 0x2c
    6246:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
    624a:	d1fa      	bne.n	6242 <SdioCard::begin(SdioConfig)+0xb2>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    624c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    6250:	f7ff fa2e 	bl	56b0 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6254:	4b7c      	ldr	r3, [pc, #496]	; (6448 <SdioCard::begin(SdioConfig)+0x2b8>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6256:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    625a:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    625e:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    6262:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    6266:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    626a:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    626e:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    6272:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6276:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    627a:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    627e:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    6282:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    6286:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    628a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    628e:	4b70      	ldr	r3, [pc, #448]	; (6450 <SdioCard::begin(SdioConfig)+0x2c0>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    6290:	4a70      	ldr	r2, [pc, #448]	; (6454 <SdioCard::begin(SdioConfig)+0x2c4>)
    6292:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
    6296:	4b70      	ldr	r3, [pc, #448]	; (6458 <SdioCard::begin(SdioConfig)+0x2c8>)
    6298:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    629c:	4b6f      	ldr	r3, [pc, #444]	; (645c <SdioCard::begin(SdioConfig)+0x2cc>)
    629e:	2260      	movs	r2, #96	; 0x60
    62a0:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    62a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    62a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    62ac:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    62b0:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
    62b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    62b8:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    62bc:	4b68      	ldr	r3, [pc, #416]	; (6460 <SdioCard::begin(SdioConfig)+0x2d0>)
    62be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    62c0:	f011 6100 	ands.w	r1, r1, #134217728	; 0x8000000
    62c4:	d1fb      	bne.n	62be <SdioCard::begin(SdioConfig)+0x12e>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    62c6:	4608      	mov	r0, r1
    62c8:	f7ff fb7a 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    62cc:	4604      	mov	r4, r0
    62ce:	b948      	cbnz	r0, 62e4 <SdioCard::begin(SdioConfig)+0x154>
  m_errorCode = code;
    62d0:	2101      	movs	r1, #1
  m_errorLine = line;
    62d2:	4b64      	ldr	r3, [pc, #400]	; (6464 <SdioCard::begin(SdioConfig)+0x2d4>)
    62d4:	f240 228e 	movw	r2, #654	; 0x28e
  m_errorCode = code;
    62d8:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    62da:	601a      	str	r2, [r3, #0]
}
    62dc:	4620      	mov	r0, r4
    62de:	b011      	add	sp, #68	; 0x44
    62e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    62e4:	2403      	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    62e6:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 649c <SdioCard::begin(SdioConfig)+0x30c>
    62ea:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    62ee:	4648      	mov	r0, r9
    62f0:	f7ff fb66 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    62f4:	2800      	cmp	r0, #0
    62f6:	d144      	bne.n	6382 <SdioCard::begin(SdioConfig)+0x1f2>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    62f8:	3c01      	subs	r4, #1
    62fa:	d1f6      	bne.n	62ea <SdioCard::begin(SdioConfig)+0x15a>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    62fc:	7832      	ldrb	r2, [r6, #0]
    62fe:	4b5a      	ldr	r3, [pc, #360]	; (6468 <SdioCard::begin(SdioConfig)+0x2d8>)
    6300:	2a00      	cmp	r2, #0
    6302:	bf14      	ite	ne
    6304:	469a      	movne	sl, r3
    6306:	f44f 1a40 	moveq.w	sl, #3145728	; 0x300000
  int m = micros();
    630a:	f001 ff4b 	bl	81a4 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    630e:	4e57      	ldr	r6, [pc, #348]	; (646c <SdioCard::begin(SdioConfig)+0x2dc>)
  int m = micros();
    6310:	4604      	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    6312:	f8df b18c 	ldr.w	fp, [pc, #396]	; 64a0 <SdioCard::begin(SdioConfig)+0x310>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    6316:	f8df 918c 	ldr.w	r9, [pc, #396]	; 64a4 <SdioCard::begin(SdioConfig)+0x314>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    631a:	2100      	movs	r1, #0
    631c:	4630      	mov	r0, r6
    631e:	f7ff fb4f 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    6322:	b950      	cbnz	r0, 633a <SdioCard::begin(SdioConfig)+0x1aa>
      return sdError(SD_CARD_ERROR_ACMD41);
    6324:	2400      	movs	r4, #0
  m_errorCode = code;
    6326:	2117      	movs	r1, #23
  m_errorLine = line;
    6328:	4b4e      	ldr	r3, [pc, #312]	; (6464 <SdioCard::begin(SdioConfig)+0x2d4>)
    632a:	f240 229f 	movw	r2, #671	; 0x29f
}
    632e:	4620      	mov	r0, r4
  m_errorCode = code;
    6330:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    6332:	601a      	str	r2, [r3, #0]
}
    6334:	b011      	add	sp, #68	; 0x44
    6336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    633a:	4651      	mov	r1, sl
    633c:	4658      	mov	r0, fp
    633e:	f7ff fb3f 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    6342:	2800      	cmp	r0, #0
    6344:	d0ee      	beq.n	6324 <SdioCard::begin(SdioConfig)+0x194>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    6346:	f001 ff2d 	bl	81a4 <micros>
    634a:	1b00      	subs	r0, r0, r4
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    634c:	4b44      	ldr	r3, [pc, #272]	; (6460 <SdioCard::begin(SdioConfig)+0x2d0>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    634e:	4548      	cmp	r0, r9
    6350:	d8e8      	bhi.n	6324 <SdioCard::begin(SdioConfig)+0x194>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    6352:	691a      	ldr	r2, [r3, #16]
    6354:	2a00      	cmp	r2, #0
    6356:	dae0      	bge.n	631a <SdioCard::begin(SdioConfig)+0x18a>
  m_ocr = SDHC_CMDRSP0;
    6358:	6919      	ldr	r1, [r3, #16]
    635a:	4a45      	ldr	r2, [pc, #276]	; (6470 <SdioCard::begin(SdioConfig)+0x2e0>)
    635c:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    635e:	691b      	ldr	r3, [r3, #16]
    6360:	005a      	lsls	r2, r3, #1
    6362:	d501      	bpl.n	6368 <SdioCard::begin(SdioConfig)+0x1d8>
    m_highCapacity = true;
    6364:	2301      	movs	r3, #1
    6366:	703b      	strb	r3, [r7, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    6368:	2100      	movs	r1, #0
    636a:	4842      	ldr	r0, [pc, #264]	; (6474 <SdioCard::begin(SdioConfig)+0x2e4>)
    636c:	f7ff fb28 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    6370:	4604      	mov	r4, r0
    6372:	b9c0      	cbnz	r0, 63a6 <SdioCard::begin(SdioConfig)+0x216>
  m_errorCode = code;
    6374:	2102      	movs	r1, #2
  m_errorLine = line;
    6376:	4b3b      	ldr	r3, [pc, #236]	; (6464 <SdioCard::begin(SdioConfig)+0x2d4>)
    6378:	f44f 722a 	mov.w	r2, #680	; 0x2a8
  m_errorCode = code;
    637c:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    637e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    6380:	e7ac      	b.n	62dc <SdioCard::begin(SdioConfig)+0x14c>
      if (SDHC_CMDRSP0 != 0X1AA) {
    6382:	4b37      	ldr	r3, [pc, #220]	; (6460 <SdioCard::begin(SdioConfig)+0x2d0>)
    6384:	691b      	ldr	r3, [r3, #16]
    6386:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    638a:	d007      	beq.n	639c <SdioCard::begin(SdioConfig)+0x20c>
  m_errorCode = code;
    638c:	2106      	movs	r1, #6
  m_errorLine = line;
    638e:	4b35      	ldr	r3, [pc, #212]	; (6464 <SdioCard::begin(SdioConfig)+0x2d4>)
    6390:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
    6394:	2400      	movs	r4, #0
  m_errorCode = code;
    6396:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    6398:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    639a:	e79f      	b.n	62dc <SdioCard::begin(SdioConfig)+0x14c>
      m_version2 = true;
    639c:	2301      	movs	r3, #1
  arg = m_version2 ? 0X40300000 : 0x00300000;
    639e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 6468 <SdioCard::begin(SdioConfig)+0x2d8>
      m_version2 = true;
    63a2:	7033      	strb	r3, [r6, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    63a4:	e7b1      	b.n	630a <SdioCard::begin(SdioConfig)+0x17a>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    63a6:	2100      	movs	r1, #0
    63a8:	4833      	ldr	r0, [pc, #204]	; (6478 <SdioCard::begin(SdioConfig)+0x2e8>)
    63aa:	f7ff fb09 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    63ae:	4604      	mov	r4, r0
    63b0:	b930      	cbnz	r0, 63c0 <SdioCard::begin(SdioConfig)+0x230>
  m_errorCode = code;
    63b2:	2103      	movs	r1, #3
  m_errorLine = line;
    63b4:	4b2b      	ldr	r3, [pc, #172]	; (6464 <SdioCard::begin(SdioConfig)+0x2d4>)
    63b6:	f240 22ab 	movw	r2, #683	; 0x2ab
  m_errorCode = code;
    63ba:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    63bc:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    63be:	e78d      	b.n	62dc <SdioCard::begin(SdioConfig)+0x14c>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    63c0:	4e27      	ldr	r6, [pc, #156]	; (6460 <SdioCard::begin(SdioConfig)+0x2d0>)
    63c2:	4b2e      	ldr	r3, [pc, #184]	; (647c <SdioCard::begin(SdioConfig)+0x2ec>)
    63c4:	6932      	ldr	r2, [r6, #16]
    63c6:	4f2e      	ldr	r7, [pc, #184]	; (6480 <SdioCard::begin(SdioConfig)+0x2f0>)
    63c8:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    63ca:	492e      	ldr	r1, [pc, #184]	; (6484 <SdioCard::begin(SdioConfig)+0x2f4>)
    63cc:	482e      	ldr	r0, [pc, #184]	; (6488 <SdioCard::begin(SdioConfig)+0x2f8>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    63ce:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    63d0:	f7ff fb42 	bl	5a58 <readReg16(unsigned long, void*)>
    63d4:	4604      	mov	r4, r0
    63d6:	b930      	cbnz	r0, 63e6 <SdioCard::begin(SdioConfig)+0x256>
  m_errorCode = code;
    63d8:	2107      	movs	r1, #7
  m_errorLine = line;
    63da:	4b22      	ldr	r3, [pc, #136]	; (6464 <SdioCard::begin(SdioConfig)+0x2d4>)
    63dc:	f44f 722c 	mov.w	r2, #688	; 0x2b0
  m_errorCode = code;
    63e0:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    63e2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    63e4:	e77a      	b.n	62dc <SdioCard::begin(SdioConfig)+0x14c>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    63e6:	4929      	ldr	r1, [pc, #164]	; (648c <SdioCard::begin(SdioConfig)+0x2fc>)
    63e8:	4829      	ldr	r0, [pc, #164]	; (6490 <SdioCard::begin(SdioConfig)+0x300>)
    63ea:	f7ff fb35 	bl	5a58 <readReg16(unsigned long, void*)>
    63ee:	4604      	mov	r4, r0
    63f0:	b930      	cbnz	r0, 6400 <SdioCard::begin(SdioConfig)+0x270>
  m_errorCode = code;
    63f2:	2108      	movs	r1, #8
  m_errorLine = line;
    63f4:	4b1b      	ldr	r3, [pc, #108]	; (6464 <SdioCard::begin(SdioConfig)+0x2d4>)
    63f6:	f240 22b3 	movw	r2, #691	; 0x2b3
  m_errorCode = code;
    63fa:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    63fc:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    63fe:	e76d      	b.n	62dc <SdioCard::begin(SdioConfig)+0x14c>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    6400:	6839      	ldr	r1, [r7, #0]
    6402:	4824      	ldr	r0, [pc, #144]	; (6494 <SdioCard::begin(SdioConfig)+0x304>)
    6404:	f7ff fadc 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    6408:	4604      	mov	r4, r0
    640a:	b930      	cbnz	r0, 641a <SdioCard::begin(SdioConfig)+0x28a>
  m_errorCode = code;
    640c:	2105      	movs	r1, #5
  m_errorLine = line;
    640e:	4b15      	ldr	r3, [pc, #84]	; (6464 <SdioCard::begin(SdioConfig)+0x2d4>)
    6410:	f240 22b6 	movw	r2, #694	; 0x2b6
  m_errorCode = code;
    6414:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    6416:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    6418:	e760      	b.n	62dc <SdioCard::begin(SdioConfig)+0x14c>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    641a:	6839      	ldr	r1, [r7, #0]
    641c:	4813      	ldr	r0, [pc, #76]	; (646c <SdioCard::begin(SdioConfig)+0x2dc>)
    641e:	f7ff facf 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    6422:	2800      	cmp	r0, #0
    6424:	d140      	bne.n	64a8 <SdioCard::begin(SdioConfig)+0x318>
  m_errorCode = code;
    6426:	2114      	movs	r1, #20
  m_errorLine = line;
    6428:	4b0e      	ldr	r3, [pc, #56]	; (6464 <SdioCard::begin(SdioConfig)+0x2d4>)
    642a:	f240 22ba 	movw	r2, #698	; 0x2ba
    return sdError(SD_CARD_ERROR_ACMD6);
    642e:	2400      	movs	r4, #0
  m_errorCode = code;
    6430:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    6432:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    6434:	e752      	b.n	62dc <SdioCard::begin(SdioConfig)+0x14c>
    6436:	bf00      	nop
    6438:	400d8000 	.word	0x400d8000
    643c:	20008e6e 	.word	0x20008e6e
    6440:	200225e8 	.word	0x200225e8
    6444:	200225e7 	.word	0x200225e7
    6448:	401f8000 	.word	0x401f8000
    644c:	01008000 	.word	0x01008000
    6450:	117f000b 	.word	0x117f000b
    6454:	00005661 	.word	0x00005661
    6458:	20009000 	.word	0x20009000
    645c:	e000e400 	.word	0xe000e400
    6460:	402c0000 	.word	0x402c0000
    6464:	2001e1b8 	.word	0x2001e1b8
    6468:	40300000 	.word	0x40300000
    646c:	371a0000 	.word	0x371a0000
    6470:	20020bec 	.word	0x20020bec
    6474:	02090000 	.word	0x02090000
    6478:	031a0000 	.word	0x031a0000
    647c:	ffff0000 	.word	0xffff0000
    6480:	20020bf0 	.word	0x20020bf0
    6484:	20020bdc 	.word	0x20020bdc
    6488:	09090000 	.word	0x09090000
    648c:	20020bcc 	.word	0x20020bcc
    6490:	0a090000 	.word	0x0a090000
    6494:	071b0000 	.word	0x071b0000
    6498:	200225e6 	.word	0x200225e6
    649c:	081a0000 	.word	0x081a0000
    64a0:	29020000 	.word	0x29020000
    64a4:	000f4240 	.word	0x000f4240
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    64a8:	2102      	movs	r1, #2
    64aa:	482e      	ldr	r0, [pc, #184]	; (6564 <SdioCard::begin(SdioConfig)+0x3d4>)
    64ac:	f7ff fa88 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    64b0:	4604      	mov	r4, r0
    64b2:	2800      	cmp	r0, #0
    64b4:	d0b7      	beq.n	6426 <SdioCard::begin(SdioConfig)+0x296>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    64b6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    64b8:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    64bc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    64c0:	4669      	mov	r1, sp
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    64c2:	f023 0306 	bic.w	r3, r3, #6
    64c6:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    64c8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    64ca:	f043 0302 	orr.w	r3, r3, #2
    64ce:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    64d0:	6472      	str	r2, [r6, #68]	; 0x44
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    64d2:	f7ff fc1b 	bl	5d0c <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    64d6:	b118      	cbz	r0, 64e0 <SdioCard::begin(SdioConfig)+0x350>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    64d8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    64dc:	079b      	lsls	r3, r3, #30
    64de:	d432      	bmi.n	6546 <SdioCard::begin(SdioConfig)+0x3b6>
    kHzSdClk = 25000;
    64e0:	f246 10a8 	movw	r0, #25000	; 0x61a8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    64e4:	4d20      	ldr	r5, [pc, #128]	; (6568 <SdioCard::begin(SdioConfig)+0x3d8>)
    64e6:	2305      	movs	r3, #5
    64e8:	f8c5 31cc 	str.w	r3, [r5, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    64ec:	f8c5 31d0 	str.w	r3, [r5, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    64f0:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    64f4:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    64f8:	f8c5 31c4 	str.w	r3, [r5, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    64fc:	f8c5 31c8 	str.w	r3, [r5, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    6500:	f7ff f8d6 	bl	56b0 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    6504:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6506:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    650a:	f8c5 31cc 	str.w	r3, [r5, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    650e:	f8c5 31d0 	str.w	r3, [r5, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    6512:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    6516:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    651a:	f8c5 31c4 	str.w	r3, [r5, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    651e:	f8c5 31c8 	str.w	r3, [r5, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    6522:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6526:	f8c5 23bc 	str.w	r2, [r5, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    652a:	f8c5 23c0 	str.w	r2, [r5, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    652e:	f8c5 23ac 	str.w	r2, [r5, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    6532:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
  m_initDone = true;
    6536:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    6538:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    653c:	f8c5 23b8 	str.w	r2, [r5, #952]	; 0x3b8
  m_initDone = true;
    6540:	f888 3000 	strb.w	r3, [r8]
  return true;
    6544:	e6ca      	b.n	62dc <SdioCard::begin(SdioConfig)+0x14c>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    6546:	4669      	mov	r1, sp
    6548:	4808      	ldr	r0, [pc, #32]	; (656c <SdioCard::begin(SdioConfig)+0x3dc>)
    654a:	f7ff fbdf 	bl	5d0c <cardCMD6(unsigned long, unsigned char*)>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    654e:	2800      	cmp	r0, #0
    6550:	d0c6      	beq.n	64e0 <SdioCard::begin(SdioConfig)+0x350>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    6552:	f89d 3010 	ldrb.w	r3, [sp, #16]
    6556:	f003 030f 	and.w	r3, r3, #15
    655a:	2b01      	cmp	r3, #1
    655c:	d1c0      	bne.n	64e0 <SdioCard::begin(SdioConfig)+0x350>
    kHzSdClk = 50000;
    655e:	f24c 3050 	movw	r0, #50000	; 0xc350
    6562:	e7bf      	b.n	64e4 <SdioCard::begin(SdioConfig)+0x354>
    6564:	061a0000 	.word	0x061a0000
    6568:	401f8000 	.word	0x401f8000
    656c:	80fffff1 	.word	0x80fffff1

00006570 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    6570:	4b37      	ldr	r3, [pc, #220]	; (6650 <SdioCard::readData(unsigned char*)+0xe0>)
    6572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6574:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    6576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    657a:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    657c:	d40d      	bmi.n	659a <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    657e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6580:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    6584:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    6586:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    6588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    658a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    658e:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    6590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6592:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    6596:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    6598:	b662      	cpsie	i
  uint32_t m = micros();
    659a:	f001 fe03 	bl	81a4 <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    659e:	4e2c      	ldr	r6, [pc, #176]	; (6650 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    65a0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 6668 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    65a4:	4605      	mov	r5, r0
  while (fcn()) {
    65a6:	e004      	b.n	65b2 <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    65a8:	f001 fdfc 	bl	81a4 <micros>
    65ac:	1b43      	subs	r3, r0, r5
    65ae:	4543      	cmp	r3, r8
    65b0:	d837      	bhi.n	6622 <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    65b2:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    65b4:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    65b8:	d0f6      	beq.n	65a8 <SdioCard::readData(unsigned char*)+0x38>
    65ba:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    65be:	4824      	ldr	r0, [pc, #144]	; (6650 <SdioCard::readData(unsigned char*)+0xe0>)
    65c0:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    65c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    65c6:	051b      	lsls	r3, r3, #20
    65c8:	d5fc      	bpl.n	65c4 <SdioCard::readData(unsigned char*)+0x54>
    65ca:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    65ce:	6a02      	ldr	r2, [r0, #32]
    65d0:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    65d4:	459c      	cmp	ip, r3
    65d6:	d1fa      	bne.n	65ce <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    65d8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    65dc:	4567      	cmp	r7, ip
    65de:	d1f1      	bne.n	65c4 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    65e0:	f001 fde0 	bl	81a4 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    65e4:	4f1a      	ldr	r7, [pc, #104]	; (6650 <SdioCard::readData(unsigned char*)+0xe0>)
    65e6:	4d1b      	ldr	r5, [pc, #108]	; (6654 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    65e8:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    65ea:	f8df 807c 	ldr.w	r8, [pc, #124]	; 6668 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    65ee:	e004      	b.n	65fa <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    65f0:	f001 fdd8 	bl	81a4 <micros>
    65f4:	1b83      	subs	r3, r0, r6
    65f6:	4543      	cmp	r3, r8
    65f8:	d81d      	bhi.n	6636 <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    65fa:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    65fc:	402c      	ands	r4, r5
    65fe:	d0f7      	beq.n	65f0 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    6600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6602:	4a15      	ldr	r2, [pc, #84]	; (6658 <SdioCard::readData(unsigned char*)+0xe8>)
    6604:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    6606:	6813      	ldr	r3, [r2, #0]
    6608:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    660a:	6813      	ldr	r3, [r2, #0]
    660c:	f013 0302 	ands.w	r3, r3, #2
    6610:	d01b      	beq.n	664a <SdioCard::readData(unsigned char*)+0xda>
    6612:	6812      	ldr	r2, [r2, #0]
    6614:	4b11      	ldr	r3, [pc, #68]	; (665c <SdioCard::readData(unsigned char*)+0xec>)
    6616:	421a      	tst	r2, r3
    6618:	bf0c      	ite	eq
    661a:	2001      	moveq	r0, #1
    661c:	2000      	movne	r0, #0
}
    661e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    6622:	490f      	ldr	r1, [pc, #60]	; (6660 <SdioCard::readData(unsigned char*)+0xf0>)
    6624:	251a      	movs	r5, #26
  m_errorLine = line;
    6626:	4b0f      	ldr	r3, [pc, #60]	; (6664 <SdioCard::readData(unsigned char*)+0xf4>)
    6628:	f240 3237 	movw	r2, #823	; 0x337
    return sdError(SD_CARD_ERROR_READ_FIFO);
    662c:	4620      	mov	r0, r4
  m_errorCode = code;
    662e:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    6630:	601a      	str	r2, [r3, #0]
}
    6632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    6636:	490a      	ldr	r1, [pc, #40]	; (6660 <SdioCard::readData(unsigned char*)+0xf0>)
    6638:	251d      	movs	r5, #29
  m_errorLine = line;
    663a:	4b0a      	ldr	r3, [pc, #40]	; (6664 <SdioCard::readData(unsigned char*)+0xf4>)
    663c:	f240 3242 	movw	r2, #834	; 0x342
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    6640:	4620      	mov	r0, r4
  m_errorCode = code;
    6642:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    6644:	601a      	str	r2, [r3, #0]
}
    6646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    664a:	4618      	mov	r0, r3
}
    664c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6650:	402c0000 	.word	0x402c0000
    6654:	117f0002 	.word	0x117f0002
    6658:	20021098 	.word	0x20021098
    665c:	117f0000 	.word	0x117f0000
    6660:	20008e6e 	.word	0x20008e6e
    6664:	2001e1b8 	.word	0x2001e1b8
    6668:	000f4240 	.word	0x000f4240

0000666c <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    666c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    6670:	4b29      	ldr	r3, [pc, #164]	; (6718 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    6672:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    6674:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6738 <SdioCard::readStart(unsigned long)+0xcc>
    6678:	4e28      	ldr	r6, [pc, #160]	; (671c <SdioCard::readStart(unsigned long)+0xb0>)
    667a:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    667e:	f001 fd91 	bl	81a4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6682:	4d27      	ldr	r5, [pc, #156]	; (6720 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    6684:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    6686:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 673c <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    668a:	4f26      	ldr	r7, [pc, #152]	; (6724 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    668c:	e006      	b.n	669c <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    668e:	f001 fd89 	bl	81a4 <micros>
    6692:	1b00      	subs	r0, r0, r4
    6694:	42b8      	cmp	r0, r7
    6696:	d829      	bhi.n	66ec <SdioCard::readStart(unsigned long)+0x80>
    yield();
    6698:	f003 fe5a 	bl	a350 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    669c:	6831      	ldr	r1, [r6, #0]
    669e:	4628      	mov	r0, r5
    66a0:	f7ff f98e 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    66a4:	2800      	cmp	r0, #0
    66a6:	d0f2      	beq.n	668e <SdioCard::readStart(unsigned long)+0x22>
    66a8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    66ac:	05db      	lsls	r3, r3, #23
    66ae:	d5ee      	bpl.n	668e <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    66b0:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    66b2:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    66b6:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    66ba:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    66be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    66c2:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    66c6:	4b18      	ldr	r3, [pc, #96]	; (6728 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    66c8:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    66cc:	781b      	ldrb	r3, [r3, #0]
    66ce:	b1cb      	cbz	r3, 6704 <SdioCard::readStart(unsigned long)+0x98>
    66d0:	4649      	mov	r1, r9
    66d2:	4816      	ldr	r0, [pc, #88]	; (672c <SdioCard::readStart(unsigned long)+0xc0>)
    66d4:	f7ff f974 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    66d8:	b930      	cbnz	r0, 66e8 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    66da:	4915      	ldr	r1, [pc, #84]	; (6730 <SdioCard::readStart(unsigned long)+0xc4>)
    66dc:	240c      	movs	r4, #12
  m_errorLine = line;
    66de:	4b15      	ldr	r3, [pc, #84]	; (6734 <SdioCard::readStart(unsigned long)+0xc8>)
    66e0:	f240 329e 	movw	r2, #926	; 0x39e
  m_errorCode = code;
    66e4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    66e6:	601a      	str	r2, [r3, #0]
}
    66e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    66ec:	4a10      	ldr	r2, [pc, #64]	; (6730 <SdioCard::readStart(unsigned long)+0xc4>)
    66ee:	210a      	movs	r1, #10
      m_busyFcn = 0;
    66f0:	2000      	movs	r0, #0
  m_errorLine = line;
    66f2:	4b10      	ldr	r3, [pc, #64]	; (6734 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    66f4:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    66f6:	f240 3292 	movw	r2, #914	; 0x392
      m_busyFcn = 0;
    66fa:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    66fe:	601a      	str	r2, [r3, #0]
}
    6700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    6704:	ea4f 2949 	mov.w	r9, r9, lsl #9
    6708:	4808      	ldr	r0, [pc, #32]	; (672c <SdioCard::readStart(unsigned long)+0xc0>)
    670a:	4649      	mov	r1, r9
    670c:	f7ff f958 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    6710:	2800      	cmp	r0, #0
    6712:	d1e9      	bne.n	66e8 <SdioCard::readStart(unsigned long)+0x7c>
    6714:	e7e1      	b.n	66da <SdioCard::readStart(unsigned long)+0x6e>
    6716:	bf00      	nop
    6718:	00005b55 	.word	0x00005b55
    671c:	20020bf0 	.word	0x20020bf0
    6720:	0d1a0000 	.word	0x0d1a0000
    6724:	000f4240 	.word	0x000f4240
    6728:	200225e8 	.word	0x200225e8
    672c:	123a0030 	.word	0x123a0030
    6730:	20008e6e 	.word	0x20008e6e
    6734:	2001e1b8 	.word	0x2001e1b8
    6738:	20021094 	.word	0x20021094
    673c:	402c0000 	.word	0x402c0000

00006740 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    6740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    6744:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6746:	4c1d      	ldr	r4, [pc, #116]	; (67bc <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    6748:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    674a:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    674c:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    674e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6750:	481b      	ldr	r0, [pc, #108]	; (67c0 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    6756:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    6758:	f7ff f932 	bl	59c0 <cardCommand(unsigned long, unsigned long)>
    675c:	b940      	cbnz	r0, 6770 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    675e:	4919      	ldr	r1, [pc, #100]	; (67c4 <SdioCard::stopTransmission(bool)+0x84>)
    6760:	2409      	movs	r4, #9
  m_errorLine = line;
    6762:	4b19      	ldr	r3, [pc, #100]	; (67c8 <SdioCard::stopTransmission(bool)+0x88>)
    6764:	f44f 726d 	mov.w	r2, #948	; 0x3b4
  m_errorCode = code;
    6768:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    676a:	601a      	str	r2, [r3, #0]
}
    676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    6770:	2d00      	cmp	r5, #0
    6772:	d0fb      	beq.n	676c <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    6774:	4b15      	ldr	r3, [pc, #84]	; (67cc <SdioCard::stopTransmission(bool)+0x8c>)
    6776:	4e16      	ldr	r6, [pc, #88]	; (67d0 <SdioCard::stopTransmission(bool)+0x90>)
    6778:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    677a:	f001 fd13 	bl	81a4 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    677e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    6780:	4607      	mov	r7, r0
  while (fcn()) {
    6782:	01da      	lsls	r2, r3, #7
    6784:	d416      	bmi.n	67b4 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6786:	f8df 804c 	ldr.w	r8, [pc, #76]	; 67d4 <SdioCard::stopTransmission(bool)+0x94>
    678a:	e004      	b.n	6796 <SdioCard::stopTransmission(bool)+0x56>
    yield();
    678c:	f003 fde0 	bl	a350 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    6790:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    6792:	01db      	lsls	r3, r3, #7
    6794:	d40e      	bmi.n	67b4 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    6796:	f001 fd05 	bl	81a4 <micros>
    679a:	1bc0      	subs	r0, r0, r7
    679c:	4540      	cmp	r0, r8
    679e:	d9f5      	bls.n	678c <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    67a0:	4a08      	ldr	r2, [pc, #32]	; (67c4 <SdioCard::stopTransmission(bool)+0x84>)
    67a2:	210a      	movs	r1, #10
      m_busyFcn = 0;
    67a4:	2000      	movs	r0, #0
  m_errorLine = line;
    67a6:	4b08      	ldr	r3, [pc, #32]	; (67c8 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    67a8:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    67aa:	f44f 726e 	mov.w	r2, #952	; 0x3b8
      m_busyFcn = 0;
    67ae:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    67b0:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    67b2:	e7db      	b.n	676c <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    67b4:	2300      	movs	r3, #0
  return true;
    67b6:	4628      	mov	r0, r5
  m_busyFcn = 0;
    67b8:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    67ba:	e7d7      	b.n	676c <SdioCard::stopTransmission(bool)+0x2c>
    67bc:	402c0000 	.word	0x402c0000
    67c0:	0cdb0000 	.word	0x0cdb0000
    67c4:	20008e6e 	.word	0x20008e6e
    67c8:	2001e1b8 	.word	0x2001e1b8
    67cc:	00005691 	.word	0x00005691
    67d0:	20021094 	.word	0x20021094
    67d4:	000f4240 	.word	0x000f4240

000067d8 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    67d8:	4b0a      	ldr	r3, [pc, #40]	; (6804 <SdioCard::syncDevice()+0x2c>)
    67da:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    67dc:	b510      	push	{r4, lr}
    67de:	4604      	mov	r4, r0
  if (!m_transferActive) {
    67e0:	b91b      	cbnz	r3, 67ea <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    67e2:	7a63      	ldrb	r3, [r4, #9]
    67e4:	b943      	cbnz	r3, 67f8 <SdioCard::syncDevice()+0x20>
  return true;
    67e6:	2001      	movs	r0, #1
}
    67e8:	bd10      	pop	{r4, pc}
    67ea:	f7ff f84b 	bl	5884 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    67ee:	2800      	cmp	r0, #0
    67f0:	d0fa      	beq.n	67e8 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    67f2:	7a63      	ldrb	r3, [r4, #9]
    67f4:	2b00      	cmp	r3, #0
    67f6:	d0f6      	beq.n	67e6 <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    67f8:	4620      	mov	r0, r4
    67fa:	2101      	movs	r1, #1
}
    67fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    6800:	f7ff bf9e 	b.w	6740 <SdioCard::stopTransmission(bool)>
    6804:	200225e9 	.word	0x200225e9

00006808 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    6808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    680c:	4604      	mov	r4, r0
    680e:	7a00      	ldrb	r0, [r0, #8]
    6810:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    6814:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    6816:	f010 0501 	ands.w	r5, r0, #1
    681a:	d013      	beq.n	6844 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    681c:	0793      	lsls	r3, r2, #30
    681e:	d03c      	beq.n	689a <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    6820:	2301      	movs	r3, #1
    6822:	4838      	ldr	r0, [pc, #224]	; (6904 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    6824:	466a      	mov	r2, sp
    6826:	f7ff fb7d 	bl	5f24 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    682a:	2800      	cmp	r0, #0
    682c:	d03a      	beq.n	68a4 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    682e:	f44f 7200 	mov.w	r2, #512	; 0x200
    6832:	4669      	mov	r1, sp
    6834:	4630      	mov	r0, r6
    6836:	f001 fd49 	bl	82cc <memcpy>
}
    683a:	4628      	mov	r0, r5
    683c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    6844:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 6914 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    6848:	460f      	mov	r7, r1
    684a:	f898 3000 	ldrb.w	r3, [r8]
    684e:	2b00      	cmp	r3, #0
    6850:	d135      	bne.n	68be <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    6852:	7a63      	ldrb	r3, [r4, #9]
    6854:	2b01      	cmp	r3, #1
    6856:	d039      	beq.n	68cc <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    6858:	6822      	ldr	r2, [r4, #0]
    685a:	492b      	ldr	r1, [pc, #172]	; (6908 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    685c:	6a12      	ldr	r2, [r2, #32]
    685e:	428a      	cmp	r2, r1
    6860:	d14a      	bne.n	68f8 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    6862:	f898 2000 	ldrb.w	r2, [r8]
    6866:	2a00      	cmp	r2, #0
    6868:	d134      	bne.n	68d4 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    686a:	2b00      	cmp	r3, #0
    686c:	d139      	bne.n	68e2 <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    686e:	4639      	mov	r1, r7
    6870:	4620      	mov	r0, r4
    6872:	f7ff fefb 	bl	666c <SdioCard::readStart(unsigned long)>
    6876:	b1e8      	cbz	r0, 68b4 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    6878:	2301      	movs	r3, #1
      m_curSector = sector;
    687a:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    687c:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    687e:	4631      	mov	r1, r6
    6880:	4620      	mov	r0, r4
    6882:	f7ff fe75 	bl	6570 <SdioCard::readData(unsigned char*)>
    6886:	b1a8      	cbz	r0, 68b4 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    6888:	6863      	ldr	r3, [r4, #4]
  return true;
    688a:	4605      	mov	r5, r0
    m_curSector++;
    688c:	3301      	adds	r3, #1
}
    688e:	4628      	mov	r0, r5
    m_curSector++;
    6890:	6063      	str	r3, [r4, #4]
}
    6892:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    689a:	2301      	movs	r3, #1
    689c:	4819      	ldr	r0, [pc, #100]	; (6904 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    689e:	f7ff fb41 	bl	5f24 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    68a2:	b938      	cbnz	r0, 68b4 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    68a4:	4919      	ldr	r1, [pc, #100]	; (690c <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    68a6:	200b      	movs	r0, #11
  m_errorLine = line;
    68a8:	4b19      	ldr	r3, [pc, #100]	; (6910 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    68aa:	f240 3255 	movw	r2, #853	; 0x355
      return sdError(SD_CARD_ERROR_CMD17);
    68ae:	2500      	movs	r5, #0
  m_errorCode = code;
    68b0:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    68b2:	601a      	str	r2, [r3, #0]
}
    68b4:	4628      	mov	r0, r5
    68b6:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    68ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68be:	f7fe ffe1 	bl	5884 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    68c2:	2800      	cmp	r0, #0
    68c4:	d0f6      	beq.n	68b4 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    68c6:	7a63      	ldrb	r3, [r4, #9]
    68c8:	2b01      	cmp	r3, #1
    68ca:	d1c5      	bne.n	6858 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    68cc:	6862      	ldr	r2, [r4, #4]
    68ce:	42ba      	cmp	r2, r7
    68d0:	d1c2      	bne.n	6858 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    68d2:	e7d4      	b.n	687e <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    68d4:	f7fe ffd6 	bl	5884 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    68d8:	2800      	cmp	r0, #0
    68da:	d0eb      	beq.n	68b4 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    68dc:	7a63      	ldrb	r3, [r4, #9]
    68de:	2b00      	cmp	r3, #0
    68e0:	d0c5      	beq.n	686e <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    68e2:	2101      	movs	r1, #1
    68e4:	4620      	mov	r0, r4
    68e6:	f7ff ff2b 	bl	6740 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    68ea:	2800      	cmp	r0, #0
    68ec:	d1bf      	bne.n	686e <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    68ee:	4628      	mov	r0, r5
    68f0:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    68f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    68f8:	4620      	mov	r0, r4
    68fa:	4790      	blx	r2
    68fc:	2800      	cmp	r0, #0
    68fe:	d0f6      	beq.n	68ee <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    6900:	e7b5      	b.n	686e <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    6902:	bf00      	nop
    6904:	113a0011 	.word	0x113a0011
    6908:	000067d9 	.word	0x000067d9
    690c:	20008e6e 	.word	0x20008e6e
    6910:	2001e1b8 	.word	0x2001e1b8
    6914:	200225e9 	.word	0x200225e9

00006918 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    6918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    691c:	7a04      	ldrb	r4, [r0, #8]
    691e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    6922:	460f      	mov	r7, r1
    6924:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    6926:	f014 0401 	ands.w	r4, r4, #1
    692a:	d01d      	beq.n	6968 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    692c:	f012 0f03 	tst.w	r2, #3
    6930:	d006      	beq.n	6940 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    6932:	4668      	mov	r0, sp
    6934:	4611      	mov	r1, r2
    6936:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    693a:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    693c:	f001 fcc6 	bl	82cc <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    6940:	2301      	movs	r3, #1
    6942:	4642      	mov	r2, r8
    6944:	4639      	mov	r1, r7
    6946:	482c      	ldr	r0, [pc, #176]	; (69f8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    6948:	f7ff faec 	bl	5f24 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    694c:	4604      	mov	r4, r0
    694e:	b930      	cbnz	r0, 695e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    6950:	492a      	ldr	r1, [pc, #168]	; (69fc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    6952:	200d      	movs	r0, #13
  m_errorLine = line;
    6954:	4b2a      	ldr	r3, [pc, #168]	; (6a00 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    6956:	f240 32f2 	movw	r2, #1010	; 0x3f2
  m_errorCode = code;
    695a:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    695c:	601a      	str	r2, [r3, #0]
}
    695e:	4620      	mov	r0, r4
    6960:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    6964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    6968:	4d26      	ldr	r5, [pc, #152]	; (6a04 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    696a:	4606      	mov	r6, r0
    696c:	782b      	ldrb	r3, [r5, #0]
    696e:	bb2b      	cbnz	r3, 69bc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6970:	7a73      	ldrb	r3, [r6, #9]
    6972:	2b02      	cmp	r3, #2
    6974:	d029      	beq.n	69ca <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    6976:	6832      	ldr	r2, [r6, #0]
    6978:	4923      	ldr	r1, [pc, #140]	; (6a08 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    697a:	6a12      	ldr	r2, [r2, #32]
    697c:	428a      	cmp	r2, r1
    697e:	d136      	bne.n	69ee <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    6980:	782a      	ldrb	r2, [r5, #0]
    6982:	bb32      	cbnz	r2, 69d2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    6984:	2b00      	cmp	r3, #0
    6986:	d12b      	bne.n	69e0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
    6988:	6833      	ldr	r3, [r6, #0]
    698a:	4639      	mov	r1, r7
    698c:	4630      	mov	r0, r6
    698e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    6990:	4798      	blx	r3
    6992:	2800      	cmp	r0, #0
    6994:	d0e3      	beq.n	695e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    6996:	2302      	movs	r3, #2
      m_curSector = sector;
    6998:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    699a:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    699c:	6833      	ldr	r3, [r6, #0]
    699e:	4641      	mov	r1, r8
    69a0:	4630      	mov	r0, r6
    69a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    69a4:	4798      	blx	r3
    69a6:	2800      	cmp	r0, #0
    69a8:	d0d9      	beq.n	695e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    69aa:	6873      	ldr	r3, [r6, #4]
  return true;
    69ac:	4604      	mov	r4, r0
    m_curSector++;
    69ae:	3301      	adds	r3, #1
}
    69b0:	4620      	mov	r0, r4
    m_curSector++;
    69b2:	6073      	str	r3, [r6, #4]
}
    69b4:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    69b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69bc:	f7fe ff62 	bl	5884 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    69c0:	2800      	cmp	r0, #0
    69c2:	d0cc      	beq.n	695e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    69c4:	7a73      	ldrb	r3, [r6, #9]
    69c6:	2b02      	cmp	r3, #2
    69c8:	d1d5      	bne.n	6976 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    69ca:	6872      	ldr	r2, [r6, #4]
    69cc:	42ba      	cmp	r2, r7
    69ce:	d1d2      	bne.n	6976 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    69d0:	e7e4      	b.n	699c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    69d2:	f7fe ff57 	bl	5884 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    69d6:	2800      	cmp	r0, #0
    69d8:	d0c1      	beq.n	695e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    69da:	7a73      	ldrb	r3, [r6, #9]
    69dc:	2b00      	cmp	r3, #0
    69de:	d0d3      	beq.n	6988 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    69e0:	2101      	movs	r1, #1
    69e2:	4630      	mov	r0, r6
    69e4:	f7ff feac 	bl	6740 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    69e8:	2800      	cmp	r0, #0
    69ea:	d0b8      	beq.n	695e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    69ec:	e7cc      	b.n	6988 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    69ee:	4630      	mov	r0, r6
    69f0:	4790      	blx	r2
    69f2:	2800      	cmp	r0, #0
    69f4:	d0b3      	beq.n	695e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    69f6:	e7c7      	b.n	6988 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    69f8:	183a0001 	.word	0x183a0001
    69fc:	20008e6e 	.word	0x20008e6e
    6a00:	2001e1b8 	.word	0x2001e1b8
    6a04:	200225e9 	.word	0x200225e9
    6a08:	000067d9 	.word	0x000067d9

00006a0c <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    6a0c:	f001 bbf4 	b.w	81f8 <digitalWrite>

00006a10 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    6a10:	b430      	push	{r4, r5}
    6a12:	b082      	sub	sp, #8
    6a14:	460c      	mov	r4, r1
    6a16:	ab02      	add	r3, sp, #8
    6a18:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    6a1c:	7cc3      	ldrb	r3, [r0, #19]
    6a1e:	2b00      	cmp	r3, #0
    6a20:	d030      	beq.n	6a84 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    6a22:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    6a24:	7cc3      	ldrb	r3, [r0, #19]
    6a26:	07da      	lsls	r2, r3, #31
    6a28:	d508      	bpl.n	6a3c <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    6a2a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6a2e:	6945      	ldr	r5, [r0, #20]
    6a30:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    6a34:	402a      	ands	r2, r5
    6a36:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    6a38:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    6a3c:	079d      	lsls	r5, r3, #30
    6a3e:	d508      	bpl.n	6a52 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    6a40:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6a44:	6985      	ldr	r5, [r0, #24]
    6a46:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    6a4a:	402a      	ands	r2, r5
    6a4c:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    6a4e:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    6a52:	0759      	lsls	r1, r3, #29
    6a54:	d508      	bpl.n	6a68 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    6a56:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6a5a:	69c5      	ldr	r5, [r0, #28]
    6a5c:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    6a60:	402a      	ands	r2, r5
    6a62:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    6a64:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    6a68:	071a      	lsls	r2, r3, #28
    6a6a:	d508      	bpl.n	6a7e <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    6a6c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6a70:	6a05      	ldr	r5, [r0, #32]
    6a72:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    6a76:	402a      	ands	r2, r5
    6a78:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    6a7a:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    6a7e:	06db      	lsls	r3, r3, #27
    6a80:	d42f      	bmi.n	6ae2 <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
    6a82:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    6a84:	6883      	ldr	r3, [r0, #8]
    6a86:	429c      	cmp	r4, r3
    6a88:	d035      	beq.n	6af6 <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
    6a8a:	4b22      	ldr	r3, [pc, #136]	; (6b14 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    6a8c:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    6a8e:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    6a90:	4a21      	ldr	r2, [pc, #132]	; (6b18 <SPIClass::beginTransaction(SPISettings)+0x108>)
    6a92:	f3c3 1101 	ubfx	r1, r3, #4, #2
    6a96:	f3c3 6382 	ubfx	r3, r3, #26, #3
    6a9a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    6a9e:	3301      	adds	r3, #1
    6aa0:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
    6aa4:	b1cc      	cbz	r4, 6ada <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
    6aa6:	4294      	cmp	r4, r2
    6aa8:	d827      	bhi.n	6afa <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    6aaa:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    6aae:	fbb2 f2f3 	udiv	r2, r2, r3
    6ab2:	4294      	cmp	r4, r2
    6ab4:	d32c      	bcc.n	6b10 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    6ab6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    6aba:	d320      	bcc.n	6afe <SPIClass::beginTransaction(SPISettings)+0xee>
    6abc:	4c17      	ldr	r4, [pc, #92]	; (6b1c <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    6abe:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6ac0:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6ac2:	2203      	movs	r2, #3
		port().CR = 0;
    6ac4:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    6ac6:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    6ac8:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    6aca:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    6acc:	2201      	movs	r2, #1
		port().CCR = _ccr;
    6ace:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    6ad0:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    6ad2:	611a      	str	r2, [r3, #16]
	}
    6ad4:	b002      	add	sp, #8
    6ad6:	bc30      	pop	{r4, r5}
    6ad8:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    6ada:	4299      	cmp	r1, r3
    6adc:	d3ef      	bcc.n	6abe <SPIClass::beginTransaction(SPISettings)+0xae>
    6ade:	1c53      	adds	r3, r2, #1
    6ae0:	e7e9      	b.n	6ab6 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    6ae2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    6ae6:	6a41      	ldr	r1, [r0, #36]	; 0x24
    6ae8:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    6aec:	400b      	ands	r3, r1
    6aee:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    6af0:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    6af4:	e7c5      	b.n	6a82 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    6af6:	68c4      	ldr	r4, [r0, #12]
    6af8:	e7e2      	b.n	6ac0 <SPIClass::beginTransaction(SPISettings)+0xb0>
    6afa:	2400      	movs	r4, #0
    6afc:	e7df      	b.n	6abe <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    6afe:	2b02      	cmp	r3, #2
    6b00:	d9fb      	bls.n	6afa <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    6b02:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    6b04:	085a      	lsrs	r2, r3, #1
    6b06:	0214      	lsls	r4, r2, #8
    6b08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    6b0c:	431c      	orrs	r4, r3
    6b0e:	e7d6      	b.n	6abe <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    6b10:	461a      	mov	r2, r3
    6b12:	e7e4      	b.n	6ade <SPIClass::beginTransaction(SPISettings)+0xce>
    6b14:	400fc000 	.word	0x400fc000
    6b18:	20000b2c 	.word	0x20000b2c
    6b1c:	007f7fff 	.word	0x007f7fff

00006b20 <SdSpiArduinoDriver::activate()>:
void SdSpiArduinoDriver::activate() {
    6b20:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    6b22:	4603      	mov	r3, r0
    6b24:	f853 0b04 	ldr.w	r0, [r3], #4
    6b28:	e893 0006 	ldmia.w	r3, {r1, r2}
    6b2c:	f7ff ff70 	bl	6a10 <SPIClass::beginTransaction(SPISettings)>
}
    6b30:	bd08      	pop	{r3, pc}
    6b32:	bf00      	nop

00006b34 <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    6b34:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    6b36:	7cd3      	ldrb	r3, [r2, #19]
    6b38:	b313      	cbz	r3, 6b80 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    6b3a:	07d8      	lsls	r0, r3, #31
    6b3c:	d504      	bpl.n	6b48 <SdSpiArduinoDriver::deactivate()+0x14>
    6b3e:	6a90      	ldr	r0, [r2, #40]	; 0x28
    6b40:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6b44:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    6b48:	0799      	lsls	r1, r3, #30
    6b4a:	d504      	bpl.n	6b56 <SdSpiArduinoDriver::deactivate()+0x22>
    6b4c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    6b4e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6b52:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    6b56:	0758      	lsls	r0, r3, #29
    6b58:	d504      	bpl.n	6b64 <SdSpiArduinoDriver::deactivate()+0x30>
    6b5a:	6b10      	ldr	r0, [r2, #48]	; 0x30
    6b5c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6b60:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    6b64:	0719      	lsls	r1, r3, #28
    6b66:	d504      	bpl.n	6b72 <SdSpiArduinoDriver::deactivate()+0x3e>
    6b68:	6b50      	ldr	r0, [r2, #52]	; 0x34
    6b6a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6b6e:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    6b72:	06db      	lsls	r3, r3, #27
    6b74:	d504      	bpl.n	6b80 <SdSpiArduinoDriver::deactivate()+0x4c>
    6b76:	6b92      	ldr	r2, [r2, #56]	; 0x38
    6b78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6b7c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    6b80:	4770      	bx	lr
    6b82:	bf00      	nop

00006b84 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    6b84:	6800      	ldr	r0, [r0, #0]
    6b86:	f000 baa5 	b.w	70d4 <SPIClass::end()>
    6b8a:	bf00      	nop

00006b8c <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6b8c:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    6b8e:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6b90:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    6b92:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6b94:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6b96:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    6b9a:	d0fb      	beq.n	6b94 <SdSpiArduinoDriver::receive()+0x8>
    6b9c:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
    6b9e:	b2c0      	uxtb	r0, r0
    6ba0:	4770      	bx	lr
    6ba2:	bf00      	nop

00006ba4 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    6ba4:	b530      	push	{r4, r5, lr}
    6ba6:	460c      	mov	r4, r1
    6ba8:	b083      	sub	sp, #12
    6baa:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    6bac:	21ff      	movs	r1, #255	; 0xff
    6bae:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    6bb0:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    6bb2:	f005 fe23 	bl	c7fc <memset>
		transfer(buf, buf, count);
    6bb6:	6828      	ldr	r0, [r5, #0]
    6bb8:	9b01      	ldr	r3, [sp, #4]
    6bba:	4622      	mov	r2, r4
    6bbc:	4621      	mov	r1, r4
    6bbe:	f000 fa85 	bl	70cc <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    6bc2:	2000      	movs	r0, #0
    6bc4:	b003      	add	sp, #12
    6bc6:	bd30      	pop	{r4, r5, pc}

00006bc8 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6bc8:	6803      	ldr	r3, [r0, #0]
    6bca:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    6bcc:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6bce:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6bd0:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    6bd4:	d0fb      	beq.n	6bce <SdSpiArduinoDriver::send(unsigned char)+0x6>
    6bd6:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
    6bd8:	4770      	bx	lr
    6bda:	bf00      	nop

00006bdc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    6bdc:	1e53      	subs	r3, r2, #1
    6bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    6be2:	b530      	push	{r4, r5, lr}
    6be4:	4614      	mov	r4, r2
    6be6:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    6bea:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    6bec:	d311      	bcc.n	6c12 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    6bee:	b16a      	cbz	r2, 6c0c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6bf0:	6803      	ldr	r3, [r0, #0]
    6bf2:	1e48      	subs	r0, r1, #1
    6bf4:	6819      	ldr	r1, [r3, #0]
    6bf6:	1882      	adds	r2, r0, r2
		port().TDR = data;
    6bf8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    6bfc:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    6bfe:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    6c00:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    6c04:	d0fb      	beq.n	6bfe <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    6c06:	4290      	cmp	r0, r2
    6c08:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    6c0a:	d1f5      	bne.n	6bf8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    6c0c:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    6c10:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    6c12:	4668      	mov	r0, sp
    6c14:	f001 fb5a 	bl	82cc <memcpy>
		transfer(buf, buf, count);
    6c18:	466a      	mov	r2, sp
    6c1a:	4623      	mov	r3, r4
    6c1c:	6828      	ldr	r0, [r5, #0]
    6c1e:	4611      	mov	r1, r2
    6c20:	f000 fa54 	bl	70cc <SPIClass::transfer(void const*, void*, unsigned int)>
}
    6c24:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    6c28:	bd30      	pop	{r4, r5, pc}
    6c2a:	bf00      	nop

00006c2c <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    6c2c:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    6c2e:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    6c30:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    6c32:	07dc      	lsls	r4, r3, #31
    6c34:	d51d      	bpl.n	6c72 <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    6c36:	4604      	mov	r4, r0
    6c38:	6840      	ldr	r0, [r0, #4]
    6c3a:	f104 0210 	add.w	r2, r4, #16
    6c3e:	6803      	ldr	r3, [r0, #0]
    6c40:	68e1      	ldr	r1, [r4, #12]
    6c42:	9201      	str	r2, [sp, #4]
    6c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6c46:	4798      	blx	r3
    6c48:	9a01      	ldr	r2, [sp, #4]
    6c4a:	4605      	mov	r5, r0
    6c4c:	b1a8      	cbz	r0, 6c7a <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    6c4e:	7823      	ldrb	r3, [r4, #0]
    6c50:	0799      	lsls	r1, r3, #30
    6c52:	d508      	bpl.n	6c66 <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    6c54:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    6c56:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    6c5a:	4419      	add	r1, r3
    6c5c:	6803      	ldr	r3, [r0, #0]
    6c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6c60:	4798      	blx	r3
    6c62:	b150      	cbz	r0, 6c7a <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    6c64:	7823      	ldrb	r3, [r4, #0]
    6c66:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    6c6a:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    6c6c:	7023      	strb	r3, [r4, #0]
}
    6c6e:	b003      	add	sp, #12
    6c70:	bd30      	pop	{r4, r5, pc}
  return true;
    6c72:	2501      	movs	r5, #1
}
    6c74:	4628      	mov	r0, r5
    6c76:	b003      	add	sp, #12
    6c78:	bd30      	pop	{r4, r5, pc}
  return false;
    6c7a:	2500      	movs	r5, #0
}
    6c7c:	4628      	mov	r0, r5
    6c7e:	b003      	add	sp, #12
    6c80:	bd30      	pop	{r4, r5, pc}
    6c82:	bf00      	nop

00006c84 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    6c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    6c86:	6843      	ldr	r3, [r0, #4]
    6c88:	b30b      	cbz	r3, 6cce <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    6c8a:	68c3      	ldr	r3, [r0, #12]
    6c8c:	4604      	mov	r4, r0
    6c8e:	460f      	mov	r7, r1
    6c90:	4615      	mov	r5, r2
    6c92:	428b      	cmp	r3, r1
    6c94:	d106      	bne.n	6ca4 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    6c96:	f810 3b10 	ldrb.w	r3, [r0], #16
    6c9a:	f005 0503 	and.w	r5, r5, #3
    6c9e:	432b      	orrs	r3, r5
    6ca0:	7023      	strb	r3, [r4, #0]
}
    6ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    6ca4:	f7ff ffc2 	bl	6c2c <FsCache::sync()>
    6ca8:	b188      	cbz	r0, 6cce <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    6caa:	076b      	lsls	r3, r5, #29
    6cac:	d505      	bpl.n	6cba <FsCache::prepare(unsigned long, unsigned char)+0x36>
    6cae:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    6cb2:	4630      	mov	r0, r6
    m_sector = sector;
    6cb4:	2300      	movs	r3, #0
    6cb6:	60e7      	str	r7, [r4, #12]
    6cb8:	e7ef      	b.n	6c9a <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    6cba:	6860      	ldr	r0, [r4, #4]
    6cbc:	f104 0610 	add.w	r6, r4, #16
    6cc0:	4639      	mov	r1, r7
    6cc2:	6803      	ldr	r3, [r0, #0]
    6cc4:	4632      	mov	r2, r6
    6cc6:	691b      	ldr	r3, [r3, #16]
    6cc8:	4798      	blx	r3
    6cca:	2800      	cmp	r0, #0
    6ccc:	d1f1      	bne.n	6cb2 <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    6cce:	2000      	movs	r0, #0
}
    6cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6cd2:	bf00      	nop

00006cd4 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    6cd4:	b510      	push	{r4, lr}
    6cd6:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    6cd8:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
    6cda:	b082      	sub	sp, #8
  if (ls) {
    6cdc:	b118      	cbz	r0, 6ce6 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    6cde:	2300      	movs	r3, #0
    6ce0:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    6ce2:	b002      	add	sp, #8
    6ce4:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    6ce6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    6cea:	428b      	cmp	r3, r1
    6cec:	d2f9      	bcs.n	6ce2 <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    6cee:	aa01      	add	r2, sp, #4
    6cf0:	4618      	mov	r0, r3
    6cf2:	f000 f815 	bl	6d20 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    6cf6:	b180      	cbz	r0, 6d1a <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
    6cf8:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
    6cfa:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    6cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    6d00:	d201      	bcs.n	6d06 <FsName::get16()+0x32>
      rtn = cp;
    6d02:	b298      	uxth	r0, r3
    6d04:	e7ed      	b.n	6ce2 <FsName::get16()+0xe>
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    6d06:	0a98      	lsrs	r0, r3, #10
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
    6d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    6d0c:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
    6d10:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    6d14:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
    6d16:	81a3      	strh	r3, [r4, #12]
    6d18:	e7e3      	b.n	6ce2 <FsName::get16()+0xe>
  return 0XFFFF;
    6d1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6d1e:	e7e0      	b.n	6ce2 <FsName::get16()+0xe>

00006d20 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
  //----------------------------------------------------------------------------
  // to do?  improve error check
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    size_t n;
    uint32_t cp;
    if (str >= end) {
    6d20:	4288      	cmp	r0, r1
    6d22:	d23d      	bcs.n	6da0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    6d24:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    6d26:	b410      	push	{r4}
      return nullptr;
    }
    uint8_t ch = str[0];
    if ((ch & 0X80) == 0) {
    6d28:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
    6d2c:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
    6d2e:	2800      	cmp	r0, #0
    6d30:	da2d      	bge.n	6d8e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      *rtn = ch;
      return str + 1;
    }
    if ((ch & 0XE0) == 0XC0) {
    6d32:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    6d36:	28c0      	cmp	r0, #192	; 0xc0
    6d38:	d034      	beq.n	6da4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
      cp = ch & 0X1F;
      n = 2;
    } else if ((ch & 0XF0) == 0XE0) {
    6d3a:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    6d3e:	28e0      	cmp	r0, #224	; 0xe0
    6d40:	d034      	beq.n	6dac <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
      cp = ch & 0X0F;
      n = 3;
    } else if ((ch & 0XF8) == 0XF0) {
    6d42:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    6d46:	28f0      	cmp	r0, #240	; 0xf0
    6d48:	d126      	bne.n	6d98 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
    6d4a:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    6d4e:	2004      	movs	r0, #4
    } else {
      return nullptr;
    }
    if ((str + n) > end) {
    6d50:	4418      	add	r0, r3
    6d52:	4288      	cmp	r0, r1
    6d54:	d820      	bhi.n	6d98 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    6d56:	3301      	adds	r3, #1
      return nullptr;
    }
    for (size_t i = 1; i < n; i++) {
      ch = str[i];
    6d58:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
    6d5c:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
        return nullptr;
      }
      cp <<= 6;
      cp |= ch & 0X3F;
    6d60:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
    6d64:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
    6d68:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
    6d6c:	d114      	bne.n	6d98 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
    6d6e:	4283      	cmp	r3, r0
    6d70:	d1f2      	bne.n	6d58 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    }
    // Don't allow over long as ASCII.
    if (cp < 0X80 || !isValidCp(cp)) {
    6d72:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    6d76:	4b0f      	ldr	r3, [pc, #60]	; (6db4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
    6d78:	4299      	cmp	r1, r3
    6d7a:	d80d      	bhi.n	6d98 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    6d7c:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    6d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6d84:	d308      	bcc.n	6d98 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      return nullptr;
    }
    *rtn = cp;
    6d86:	6014      	str	r4, [r2, #0]
    return str + n;
  }
    6d88:	f85d 4b04 	ldr.w	r4, [sp], #4
    6d8c:	4770      	bx	lr
      return str + 1;
    6d8e:	1c58      	adds	r0, r3, #1
      *rtn = ch;
    6d90:	6014      	str	r4, [r2, #0]
  }
    6d92:	f85d 4b04 	ldr.w	r4, [sp], #4
    6d96:	4770      	bx	lr
      return nullptr;
    6d98:	2000      	movs	r0, #0
  }
    6d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
    6d9e:	4770      	bx	lr
      return nullptr;
    6da0:	2000      	movs	r0, #0
  }
    6da2:	4770      	bx	lr
      cp = ch & 0X1F;
    6da4:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    6da8:	2002      	movs	r0, #2
    6daa:	e7d1      	b.n	6d50 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
    6dac:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    6db0:	2003      	movs	r0, #3
    6db2:	e7cd      	b.n	6d50 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
    6db4:	0010ff7f 	.word	0x0010ff7f

00006db8 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    6db8:	287e      	cmp	r0, #126	; 0x7e
    6dba:	d93e      	bls.n	6e3a <toUpcase(unsigned short)+0x82>
  size_t right = size;
    6dbc:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    6dc0:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    6dc2:	b430      	push	{r4, r5}
    6dc4:	4c28      	ldr	r4, [pc, #160]	; (6e68 <toUpcase(unsigned short)+0xb0>)
    6dc6:	e004      	b.n	6dd2 <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    6dc8:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
    6dcc:	4282      	cmp	r2, r0
    6dce:	d820      	bhi.n	6e12 <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
    6dd0:	460b      	mov	r3, r1
  while (right - left > 1) {
    6dd2:	ebac 0203 	sub.w	r2, ip, r3
    6dd6:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    6dd8:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    6ddc:	d8f4      	bhi.n	6dc8 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    6dde:	b29b      	uxth	r3, r3
    6de0:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    6de4:	4290      	cmp	r0, r2
    6de6:	d216      	bcs.n	6e16 <toUpcase(unsigned short)+0x5e>
    6de8:	244b      	movs	r4, #75	; 0x4b
    6dea:	2300      	movs	r3, #0
    6dec:	4d1f      	ldr	r5, [pc, #124]	; (6e6c <toUpcase(unsigned short)+0xb4>)
    6dee:	e004      	b.n	6dfa <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    6df0:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
    6df4:	4282      	cmp	r2, r0
    6df6:	d81e      	bhi.n	6e36 <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
    6df8:	460b      	mov	r3, r1
  while (right - left > 1) {
    6dfa:	1ae2      	subs	r2, r4, r3
    6dfc:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    6dfe:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    6e02:	d8f5      	bhi.n	6df0 <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    6e04:	b29b      	uxth	r3, r3
    6e06:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
    6e0a:	4282      	cmp	r2, r0
    6e0c:	d01f      	beq.n	6e4e <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    6e0e:	bc30      	pop	{r4, r5}
    6e10:	4770      	bx	lr
    mid = left + (right - left)/2;
    6e12:	468c      	mov	ip, r1
    6e14:	e7dd      	b.n	6dd2 <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    6e16:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    6e1a:	1a82      	subs	r2, r0, r2
    6e1c:	78e3      	ldrb	r3, [r4, #3]
    6e1e:	429a      	cmp	r2, r3
    6e20:	dae2      	bge.n	6de8 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    6e22:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    6e26:	2b01      	cmp	r3, #1
    6e28:	d016      	beq.n	6e58 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    6e2a:	b1d3      	cbz	r3, 6e62 <toUpcase(unsigned short)+0xaa>
    6e2c:	b29b      	uxth	r3, r3
    6e2e:	4403      	add	r3, r0
}
    6e30:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    6e32:	b298      	uxth	r0, r3
}
    6e34:	4770      	bx	lr
    mid = left + (right - left)/2;
    6e36:	460c      	mov	r4, r1
    6e38:	e7df      	b.n	6dfa <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    6e3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    6e3e:	2b19      	cmp	r3, #25
    6e40:	bf8c      	ite	hi
    6e42:	2300      	movhi	r3, #0
    6e44:	2301      	movls	r3, #1
    6e46:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    6e4a:	b298      	uxth	r0, r3
}
    6e4c:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    6e4e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    6e52:	8868      	ldrh	r0, [r5, #2]
}
    6e54:	bc30      	pop	{r4, r5}
    6e56:	4770      	bx	lr
      return chr - ((chr - first) & 1);
    6e58:	f002 0201 	and.w	r2, r2, #1
    6e5c:	1a83      	subs	r3, r0, r2
    6e5e:	b298      	uxth	r0, r3
    6e60:	e7d5      	b.n	6e0e <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    6e62:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    6e66:	e7e2      	b.n	6e2e <toUpcase(unsigned short)+0x76>
    6e68:	20000738 	.word	0x20000738
    6e6c:	20000600 	.word	0x20000600

00006e70 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    6e70:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    6e74:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    6e76:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    6e7a:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    6e7c:	d101      	bne.n	6e82 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    6e7e:	6883      	ldr	r3, [r0, #8]
    6e80:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    6e82:	f000 bd03 	b.w	788c <EventResponder::triggerEventNotImmediate()>
    6e86:	bf00      	nop

00006e88 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    6e88:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    6e8a:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    6e8c:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    6e90:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    6e92:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    6e94:	b1a3      	cbz	r3, 6ec0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    6e96:	b321      	cbz	r1, 6ee2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    6e98:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    6e9c:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    6e9e:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    6ea0:	6f25      	ldr	r5, [r4, #112]	; 0x70
    6ea2:	07af      	lsls	r7, r5, #30
    6ea4:	d407      	bmi.n	6eb6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    6ea6:	4615      	mov	r5, r2
				count_read--;
    6ea8:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    6eaa:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    6eac:	b11a      	cbz	r2, 6eb6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    6eae:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    6eb2:	462a      	mov	r2, r5
    6eb4:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    6eb6:	6965      	ldr	r5, [r4, #20]
    6eb8:	07ed      	lsls	r5, r5, #31
    6eba:	d5f1      	bpl.n	6ea0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    6ebc:	2b00      	cmp	r3, #0
    6ebe:	d1ea      	bne.n	6e96 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    6ec0:	b16e      	cbz	r6, 6ede <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    6ec2:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    6ec4:	6f19      	ldr	r1, [r3, #112]	; 0x70
    6ec6:	0789      	lsls	r1, r1, #30
    6ec8:	d4fa      	bmi.n	6ec0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    6eca:	4611      	mov	r1, r2
			count_read--;
    6ecc:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    6ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    6ed0:	2a00      	cmp	r2, #0
    6ed2:	d0f5      	beq.n	6ec0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    6ed4:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    6ed8:	460a      	mov	r2, r1
	while (count_read) {
    6eda:	2e00      	cmp	r6, #0
    6edc:	d1f1      	bne.n	6ec2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    6ede:	bcf0      	pop	{r4, r5, r6, r7}
    6ee0:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    6ee2:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    6ee6:	e7d9      	b.n	6e9c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00006ee8 <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    6ee8:	4b32      	ldr	r3, [pc, #200]	; (6fb4 <_spi_dma_rxISR1()+0xcc>)
		DMA_CINT = channel;
    6eea:	4933      	ldr	r1, [pc, #204]	; (6fb8 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6eec:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    6eee:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    6ef2:	7920      	ldrb	r0, [r4, #4]
    6ef4:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    6ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    6ef8:	f895 c004 	ldrb.w	ip, [r5, #4]
    6efc:	f881 c01c 	strb.w	ip, [r1, #28]
    6f00:	7708      	strb	r0, [r1, #28]
    6f02:	b152      	cbz	r2, 6f1a <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    6f04:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    6f08:	d323      	bcc.n	6f52 <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    6f0a:	492c      	ldr	r1, [pc, #176]	; (6fbc <_spi_dma_rxISR1()+0xd4>)
    6f0c:	4411      	add	r1, r2
		DMA_SERQ = channel;
    6f0e:	4a2a      	ldr	r2, [pc, #168]	; (6fb8 <_spi_dma_rxISR1()+0xd0>)
    6f10:	6419      	str	r1, [r3, #64]	; 0x40
    6f12:	76d0      	strb	r0, [r2, #27]
    6f14:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6f18:	bd30      	pop	{r4, r5, pc}
    6f1a:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    6f1c:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    6f1e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    6f20:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    6f22:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    6f26:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    6f28:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    6f2a:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    6f2e:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    6f30:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    6f32:	6804      	ldr	r4, [r0, #0]
    6f34:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    6f36:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    6f3a:	4b21      	ldr	r3, [pc, #132]	; (6fc0 <_spi_dma_rxISR1()+0xd8>)
    6f3c:	429c      	cmp	r4, r3
    6f3e:	d126      	bne.n	6f8e <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    6f40:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    6f42:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    6f44:	2b02      	cmp	r3, #2
		_data = data;
    6f46:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    6f48:	d126      	bne.n	6f98 <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    6f4a:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6f4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    6f50:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    6f52:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    6f54:	8be9      	ldrh	r1, [r5, #30]
    6f56:	0409      	lsls	r1, r1, #16
    6f58:	d422      	bmi.n	6fa0 <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    6f5a:	b292      	uxth	r2, r2
    6f5c:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    6f5e:	6821      	ldr	r1, [r4, #0]
    6f60:	8bec      	ldrh	r4, [r5, #30]
    6f62:	b2a4      	uxth	r4, r4
    6f64:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    6f66:	8bcc      	ldrh	r4, [r1, #30]
    6f68:	0424      	lsls	r4, r4, #16
    6f6a:	d505      	bpl.n	6f78 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    6f6c:	8bcc      	ldrh	r4, [r1, #30]
    6f6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
    6f72:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    6f76:	4322      	orrs	r2, r4
    6f78:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    6f7a:	8bca      	ldrh	r2, [r1, #30]
    6f7c:	b292      	uxth	r2, r2
    6f7e:	82ca      	strh	r2, [r1, #22]
    6f80:	2100      	movs	r1, #0
    6f82:	4a0d      	ldr	r2, [pc, #52]	; (6fb8 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    6f84:	6419      	str	r1, [r3, #64]	; 0x40
    6f86:	76d0      	strb	r0, [r2, #27]
    6f88:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6f8c:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    6f8e:	4623      	mov	r3, r4
    6f90:	4611      	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6f92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    6f96:	4718      	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    6f98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    6f9c:	f000 bc76 	b.w	788c <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    6fa0:	8be9      	ldrh	r1, [r5, #30]
    6fa2:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    6fa6:	b292      	uxth	r2, r2
    6fa8:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    6fac:	ea41 010e 	orr.w	r1, r1, lr
    6fb0:	83e9      	strh	r1, [r5, #30]
    6fb2:	e7d4      	b.n	6f5e <_spi_dma_rxISR1()+0x76>
    6fb4:	2000c750 	.word	0x2000c750
    6fb8:	400e8000 	.word	0x400e8000
    6fbc:	ffff8001 	.word	0xffff8001
    6fc0:	00006e71 	.word	0x00006e71

00006fc4 <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    6fc4:	4b32      	ldr	r3, [pc, #200]	; (7090 <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    6fc6:	4933      	ldr	r1, [pc, #204]	; (7094 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6fc8:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    6fca:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    6fce:	7920      	ldrb	r0, [r4, #4]
    6fd0:	77c8      	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    6fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    6fd4:	f895 c004 	ldrb.w	ip, [r5, #4]
    6fd8:	f881 c01c 	strb.w	ip, [r1, #28]
    6fdc:	7708      	strb	r0, [r1, #28]
    6fde:	b152      	cbz	r2, 6ff6 <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    6fe0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    6fe4:	d323      	bcc.n	702e <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    6fe6:	492c      	ldr	r1, [pc, #176]	; (7098 <_spi_dma_rxISR0()+0xd4>)
    6fe8:	4411      	add	r1, r2
		DMA_SERQ = channel;
    6fea:	4a2a      	ldr	r2, [pc, #168]	; (7094 <_spi_dma_rxISR0()+0xd0>)
    6fec:	6419      	str	r1, [r3, #64]	; 0x40
    6fee:	76d0      	strb	r0, [r2, #27]
    6ff0:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6ff4:	bd30      	pop	{r4, r5, pc}
    6ff6:	6819      	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    6ff8:	240f      	movs	r4, #15
		_dma_event_responder->triggerEvent();
    6ffa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    6ffc:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    6ffe:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    7002:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    7004:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    7006:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    700a:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    700c:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    700e:	6804      	ldr	r4, [r0, #0]
    7010:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7012:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    7016:	4b21      	ldr	r3, [pc, #132]	; (709c <_spi_dma_rxISR0()+0xd8>)
    7018:	429c      	cmp	r4, r3
    701a:	d126      	bne.n	706a <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    701c:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    701e:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    7020:	2b02      	cmp	r3, #2
		_data = data;
    7022:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7024:	d126      	bne.n	7074 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    7026:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    702c:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    702e:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7030:	8be9      	ldrh	r1, [r5, #30]
    7032:	0409      	lsls	r1, r1, #16
    7034:	d422      	bmi.n	707c <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    7036:	b292      	uxth	r2, r2
    7038:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    703a:	6821      	ldr	r1, [r4, #0]
    703c:	8bec      	ldrh	r4, [r5, #30]
    703e:	b2a4      	uxth	r4, r4
    7040:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7042:	8bcc      	ldrh	r4, [r1, #30]
    7044:	0424      	lsls	r4, r4, #16
    7046:	d505      	bpl.n	7054 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7048:	8bcc      	ldrh	r4, [r1, #30]
    704a:	f3c2 0208 	ubfx	r2, r2, #0, #9
    704e:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    7052:	4322      	orrs	r2, r4
    7054:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    7056:	8bca      	ldrh	r2, [r1, #30]
    7058:	b292      	uxth	r2, r2
    705a:	82ca      	strh	r2, [r1, #22]
    705c:	2100      	movs	r1, #0
    705e:	4a0d      	ldr	r2, [pc, #52]	; (7094 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    7060:	6419      	str	r1, [r3, #64]	; 0x40
    7062:	76d0      	strb	r0, [r2, #27]
    7064:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7068:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    706a:	4623      	mov	r3, r4
    706c:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    706e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    7072:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    7078:	f000 bc08 	b.w	788c <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    707c:	8be9      	ldrh	r1, [r5, #30]
    707e:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    7082:	b292      	uxth	r2, r2
    7084:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    7088:	ea41 010e 	orr.w	r1, r1, lr
    708c:	83e9      	strh	r1, [r5, #30]
    708e:	e7d4      	b.n	703a <_spi_dma_rxISR0()+0x76>
    7090:	2000c700 	.word	0x2000c700
    7094:	400e8000 	.word	0x400e8000
    7098:	ffff8001 	.word	0xffff8001
    709c:	00006e71 	.word	0x00006e71

000070a0 <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    70a0:	2300      	movs	r3, #0
    70a2:	e9c0 1200 	strd	r1, r2, [r0]
    70a6:	e9c0 3302 	strd	r3, r3, [r0, #8]
    70aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
    70ae:	e9c0 3306 	strd	r3, r3, [r0, #24]
    70b2:	e9c0 3308 	strd	r3, r3, [r0, #32]
    70b6:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
    70ba:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    70be:	6383      	str	r3, [r0, #56]	; 0x38
    70c0:	8783      	strh	r3, [r0, #60]	; 0x3c
    70c2:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    70c6:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
	}
    70ca:	4770      	bx	lr

000070cc <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    70cc:	b10b      	cbz	r3, 70d2 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    70ce:	f7ff bedb 	b.w	6e88 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    70d2:	4770      	bx	lr

000070d4 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    70d4:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    70d6:	e9d3 1200 	ldrd	r1, r2, [r3]
    70da:	6809      	ldr	r1, [r1, #0]
    70dc:	4211      	tst	r1, r2
    70de:	d100      	bne.n	70e2 <SPIClass::end()+0xe>
    70e0:	4770      	bx	lr
void SPIClass::end() {
    70e2:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    70e4:	6802      	ldr	r2, [r0, #0]
    70e6:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    70e8:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    70ea:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    70ec:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    70ee:	7c22      	ldrb	r2, [r4, #16]
    70f0:	4413      	add	r3, r2
    70f2:	7c18      	ldrb	r0, [r3, #16]
    70f4:	f001 f8aa 	bl	824c <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    70f8:	7c62      	ldrb	r2, [r4, #17]
    70fa:	6863      	ldr	r3, [r4, #4]
    70fc:	2105      	movs	r1, #5
    70fe:	4413      	add	r3, r2
    7100:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    7104:	f001 f8a2 	bl	824c <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    7108:	6863      	ldr	r3, [r4, #4]
    710a:	7ca2      	ldrb	r2, [r4, #18]
    710c:	2105      	movs	r1, #5
    710e:	4413      	add	r3, r2
}
    7110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    7114:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    7118:	f001 b898 	b.w	824c <pinMode>

0000711c <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    711c:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    711e:	4a08      	ldr	r2, [pc, #32]	; (7140 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    7120:	4908      	ldr	r1, [pc, #32]	; (7144 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    7122:	4809      	ldr	r0, [pc, #36]	; (7148 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    7124:	f7ff ffbc 	bl	70a0 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    7128:	4a08      	ldr	r2, [pc, #32]	; (714c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    712a:	4909      	ldr	r1, [pc, #36]	; (7150 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    712c:	4809      	ldr	r0, [pc, #36]	; (7154 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    712e:	f7ff ffb7 	bl	70a0 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    7132:	4a09      	ldr	r2, [pc, #36]	; (7158 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    7134:	4909      	ldr	r1, [pc, #36]	; (715c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    7136:	480a      	ldr	r0, [pc, #40]	; (7160 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    7138:	f7ff ffb2 	bl	70a0 <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    713c:	bd08      	pop	{r3, pc}
    713e:	bf00      	nop
    7140:	2000090c 	.word	0x2000090c
    7144:	403a0000 	.word	0x403a0000
    7148:	2000c700 	.word	0x2000c700
    714c:	2000089c 	.word	0x2000089c
    7150:	4039c000 	.word	0x4039c000
    7154:	2000c750 	.word	0x2000c750
    7158:	2000082c 	.word	0x2000082c
    715c:	40394000 	.word	0x40394000
    7160:	2000c7a0 	.word	0x2000c7a0

00007164 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    7164:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    7168:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    716c:	1a10      	subs	r0, r2, r0
    716e:	4770      	bx	lr

00007170 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    7170:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    7174:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    7178:	429a      	cmp	r2, r3
    717a:	d905      	bls.n	7188 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    717c:	1c5a      	adds	r2, r3, #1
    717e:	4403      	add	r3, r0
    7180:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    7184:	7e98      	ldrb	r0, [r3, #26]
    7186:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    7188:	f04f 30ff 	mov.w	r0, #4294967295
	}
    718c:	4770      	bx	lr
    718e:	bf00      	nop

00007190 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    7190:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    7194:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    7198:	429a      	cmp	r2, r3
    719a:	d902      	bls.n	71a2 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    719c:	4418      	add	r0, r3
    719e:	7e80      	ldrb	r0, [r0, #26]
    71a0:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    71a2:	f04f 30ff 	mov.w	r0, #4294967295
	}
    71a6:	4770      	bx	lr

000071a8 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    71a8:	4770      	bx	lr
    71aa:	bf00      	nop

000071ac <TwoWire::write(unsigned char)>:
{
    71ac:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    71ae:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    71b2:	b178      	cbz	r0, 71d4 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    71b4:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    71b8:	2a88      	cmp	r2, #136	; 0x88
    71ba:	d903      	bls.n	71c4 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    71bc:	2201      	movs	r2, #1
			return 0;
    71be:	2000      	movs	r0, #0
    71c0:	605a      	str	r2, [r3, #4]
    71c2:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    71c4:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    71c8:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    71ca:	441a      	add	r2, r3
    71cc:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    71d0:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    71d4:	4770      	bx	lr
    71d6:	bf00      	nop

000071d8 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    71d8:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    71da:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    71de:	b90c      	cbnz	r4, 71e4 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    71e0:	4620      	mov	r0, r4
    71e2:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    71e4:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    71e8:	4605      	mov	r5, r0
    71ea:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    71ee:	42a2      	cmp	r2, r4
    71f0:	d80d      	bhi.n	720e <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    71f2:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    71f4:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    71f8:	4622      	mov	r2, r4
    71fa:	4418      	add	r0, r3
    71fc:	f001 f866 	bl	82cc <memcpy>
		txBufferLength += quantity;
    7200:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    7204:	4620      	mov	r0, r4
		txBufferLength += quantity;
    7206:	4423      	add	r3, r4
    7208:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    720c:	bd38      	pop	{r3, r4, r5, pc}
    720e:	2201      	movs	r2, #1
    7210:	6042      	str	r2, [r0, #4]
    7212:	e7ef      	b.n	71f4 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00007214 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    7214:	b538      	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
    7216:	2500      	movs	r5, #0
    7218:	4613      	mov	r3, r2
    721a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    721e:	4604      	mov	r4, r0
    7220:	e9c0 5201 	strd	r5, r2, [r0, #4]
		: port(myport), hardware(myhardware) {
    7224:	4815      	ldr	r0, [pc, #84]	; (727c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    7226:	2288      	movs	r2, #136	; 0x88
    7228:	6121      	str	r1, [r4, #16]
    722a:	4629      	mov	r1, r5
    722c:	6020      	str	r0, [r4, #0]
    722e:	f104 001a 	add.w	r0, r4, #26
    7232:	6163      	str	r3, [r4, #20]
    7234:	7325      	strb	r5, [r4, #12]
    7236:	7625      	strb	r5, [r4, #24]
    7238:	7665      	strb	r5, [r4, #25]
    723a:	f005 fadf 	bl	c7fc <memset>
    723e:	2289      	movs	r2, #137	; 0x89
    7240:	4629      	mov	r1, r5
    7242:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
    7246:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    724a:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    724e:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    7252:	f005 fad3 	bl	c7fc <memset>
	}
    7256:	4620      	mov	r0, r4
		: port(myport), hardware(myhardware) {
    7258:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
    725c:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    7260:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    7264:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
    7268:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
    726c:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
    7270:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    7274:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
	}
    7278:	bd38      	pop	{r3, r4, r5, pc}
    727a:	bf00      	nop
    727c:	20000aa0 	.word	0x20000aa0

00007280 <TwoWire::isr()>:
}


void TwoWire::isr(void)
{
	uint32_t status = port->SSR;
    7280:	6903      	ldr	r3, [r0, #16]
{
    7282:	b570      	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    7284:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
{
    7288:	4604      	mov	r4, r0
	uint32_t w1c_bits = status & 0xF00;
	if (w1c_bits) port->SSR = w1c_bits;
    728a:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
    728e:	d001      	beq.n	7294 <TwoWire::isr()+0x14>
    7290:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	//Serial.print("isr ");
	//Serial.println(status, HEX);

	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    7294:	07ae      	lsls	r6, r5, #30
    7296:	d50b      	bpl.n	72b0 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    7298:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    729c:	0408      	lsls	r0, r1, #16
    729e:	d53e      	bpl.n	731e <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
    72a0:	2200      	movs	r2, #0
    72a2:	2001      	movs	r0, #1
    72a4:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
			rxBufferLength = 0;
		}
		if (rxBufferLength < BUFFER_LENGTH) {
			rxBuffer[rxBufferLength++] = rx & 255;
    72a8:	4422      	add	r2, r4
    72aa:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
    72ae:	7691      	strb	r1, [r2, #26]
		}
		//Serial.print("rx = ");
		//Serial.println(rx, HEX);
	}
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    72b0:	07ea      	lsls	r2, r5, #31
    72b2:	d510      	bpl.n	72d6 <TwoWire::isr()+0x56>
		if (!transmitting) {
    72b4:	f894 6130 	ldrb.w	r6, [r4, #304]	; 0x130
    72b8:	b1f6      	cbz	r6, 72f8 <TwoWire::isr()+0x78>
				(*user_onRequest)();
			}
			txBufferIndex = 0;
			transmitting = 1;
		}
		if (txBufferIndex < txBufferLength) {
    72ba:	f894 612e 	ldrb.w	r6, [r4, #302]	; 0x12e
    72be:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    72c2:	42b2      	cmp	r2, r6
    72c4:	d927      	bls.n	7316 <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    72c6:	1c72      	adds	r2, r6, #1
    72c8:	4426      	add	r6, r4
    72ca:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
    72ce:	f896 20a5 	ldrb.w	r2, [r6, #165]	; 0xa5
    72d2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
			port->STDR = 0;
		}
		//Serial.println("tx");
	}

	if (status & LPI2C_SSR_SDF) { // Stop
    72d6:	05ab      	lsls	r3, r5, #22
    72d8:	d50d      	bpl.n	72f6 <TwoWire::isr()+0x76>
		//Serial.println("Stop");
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    72da:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    72de:	b118      	cbz	r0, 72e8 <TwoWire::isr()+0x68>
    72e0:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    72e4:	b103      	cbz	r3, 72e8 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    72e6:	4798      	blx	r3
		}
		rxBufferIndex = 0;
    72e8:	2300      	movs	r3, #0
    72ea:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
		txBufferIndex = 0;
    72ee:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
		transmitting = 0;
    72f2:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
	}
}
    72f6:	bd70      	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    72f8:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    72fc:	b10a      	cbz	r2, 7302 <TwoWire::isr()+0x82>
				(*user_onRequest)();
    72fe:	4790      	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    7300:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    7302:	2200      	movs	r2, #0
    7304:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    7308:	2201      	movs	r2, #1
    730a:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    730e:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    7312:	42b2      	cmp	r2, r6
    7314:	d8d7      	bhi.n	72c6 <TwoWire::isr()+0x46>
			port->STDR = 0;
    7316:	2200      	movs	r2, #0
    7318:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    731c:	e7db      	b.n	72d6 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    731e:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
    7322:	2a87      	cmp	r2, #135	; 0x87
    7324:	d8c4      	bhi.n	72b0 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    7326:	1c50      	adds	r0, r2, #1
    7328:	b2c0      	uxtb	r0, r0
    732a:	e7bd      	b.n	72a8 <TwoWire::isr()+0x28>

0000732c <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    732c:	4801      	ldr	r0, [pc, #4]	; (7334 <lpi2c1_isr()+0x8>)
    732e:	f7ff bfa7 	b.w	7280 <TwoWire::isr()>
    7332:	bf00      	nop
    7334:	2000c7f4 	.word	0x2000c7f4

00007338 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    7338:	4801      	ldr	r0, [pc, #4]	; (7340 <lpi2c3_isr()+0x8>)
    733a:	f7ff bfa1 	b.w	7280 <TwoWire::isr()>
    733e:	bf00      	nop
    7340:	2000c934 	.word	0x2000c934

00007344 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    7344:	4801      	ldr	r0, [pc, #4]	; (734c <lpi2c4_isr()+0x8>)
    7346:	f7ff bf9b 	b.w	7280 <TwoWire::isr()>
    734a:	bf00      	nop
    734c:	2000ca74 	.word	0x2000ca74

00007350 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    7350:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    7352:	4c09      	ldr	r4, [pc, #36]	; (7378 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    7354:	4909      	ldr	r1, [pc, #36]	; (737c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    7356:	4622      	mov	r2, r4
    7358:	4809      	ldr	r0, [pc, #36]	; (7380 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    735a:	f7ff ff5b 	bl	7214 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    735e:	f104 0250 	add.w	r2, r4, #80	; 0x50
    7362:	4908      	ldr	r1, [pc, #32]	; (7384 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    7364:	4808      	ldr	r0, [pc, #32]	; (7388 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    7366:	f7ff ff55 	bl	7214 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    736a:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    736e:	4907      	ldr	r1, [pc, #28]	; (738c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    7370:	4807      	ldr	r0, [pc, #28]	; (7390 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    7372:	f7ff ff4f 	bl	7214 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    7376:	bd10      	pop	{r4, pc}
    7378:	60002754 	.word	0x60002754
    737c:	403f0000 	.word	0x403f0000
    7380:	2000c7f4 	.word	0x2000c7f4
    7384:	403f8000 	.word	0x403f8000
    7388:	2000c934 	.word	0x2000c934
    738c:	403fc000 	.word	0x403fc000
    7390:	2000ca74 	.word	0x2000ca74

00007394 <AudioStream::update_all()>:
    7394:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7398:	2240      	movs	r2, #64	; 0x40
    739a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    739e:	4770      	bx	lr

000073a0 <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    73a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    73a2:	4b14      	ldr	r3, [pc, #80]	; (73f4 <software_isr()+0x54>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    73a4:	4d14      	ldr	r5, [pc, #80]	; (73f8 <software_isr()+0x58>)
	for (p = AudioStream::first_update; p; p = p->next_update) {
    73a6:	681c      	ldr	r4, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    73a8:	686e      	ldr	r6, [r5, #4]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    73aa:	b19c      	cbz	r4, 73d4 <software_isr()+0x34>
		if (p->active) {
    73ac:	7a23      	ldrb	r3, [r4, #8]
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    73ae:	4620      	mov	r0, r4
		if (p->active) {
    73b0:	b16b      	cbz	r3, 73ce <software_isr()+0x2e>
			p->update();
    73b2:	6823      	ldr	r3, [r4, #0]
			uint32_t cycles = ARM_DWT_CYCCNT;
    73b4:	686f      	ldr	r7, [r5, #4]
			p->update();
    73b6:	681b      	ldr	r3, [r3, #0]
    73b8:	4798      	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    73ba:	686b      	ldr	r3, [r5, #4]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    73bc:	88e1      	ldrh	r1, [r4, #6]
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    73be:	1bdb      	subs	r3, r3, r7
			p->cpu_cycles = cycles;
    73c0:	f3c3 128f 	ubfx	r2, r3, #6, #16
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    73c4:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
			p->cpu_cycles = cycles;
    73c8:	80a2      	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    73ca:	bf38      	it	cc
    73cc:	80e2      	strhcc	r2, [r4, #6]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    73ce:	6964      	ldr	r4, [r4, #20]
    73d0:	2c00      	cmp	r4, #0
    73d2:	d1eb      	bne.n	73ac <software_isr()+0xc>
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    73d4:	4b08      	ldr	r3, [pc, #32]	; (73f8 <software_isr()+0x58>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    73d6:	4a09      	ldr	r2, [pc, #36]	; (73fc <software_isr()+0x5c>)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    73d8:	685b      	ldr	r3, [r3, #4]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    73da:	8810      	ldrh	r0, [r2, #0]
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    73dc:	1b9b      	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
    73de:	4c08      	ldr	r4, [pc, #32]	; (7400 <software_isr()+0x60>)
    73e0:	f3c3 118f 	ubfx	r1, r3, #6, #16
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    73e4:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
	AudioStream::cpu_cycles_total = totalcycles;
    73e8:	8021      	strh	r1, [r4, #0]
		AudioStream::cpu_cycles_total_max = totalcycles;
    73ea:	bf38      	it	cc
    73ec:	8011      	strhcc	r1, [r2, #0]

	asm("DSB");
    73ee:	f3bf 8f4f 	dsb	sy
}
    73f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    73f4:	200210a4 	.word	0x200210a4
    73f8:	e0001000 	.word	0xe0001000
    73fc:	200225ca 	.word	0x200225ca
    7400:	200225c8 	.word	0x200225c8

00007404 <AudioStream::allocate()>:
{
    7404:	b430      	push	{r4, r5}
	__disable_irq();
    7406:	b672      	cpsid	i
	index = memory_pool_first_mask;
    7408:	4d24      	ldr	r5, [pc, #144]	; (749c <AudioStream::allocate()+0x98>)
	p += index;
    740a:	4c25      	ldr	r4, [pc, #148]	; (74a0 <AudioStream::allocate()+0x9c>)
	index = memory_pool_first_mask;
    740c:	882a      	ldrh	r2, [r5, #0]
		if (p >= end) {
    740e:	f104 0170 	add.w	r1, r4, #112	; 0x70
	p += index;
    7412:	eb04 0382 	add.w	r3, r4, r2, lsl #2
		if (p >= end) {
    7416:	428b      	cmp	r3, r1
    7418:	d23c      	bcs.n	7494 <AudioStream::allocate()+0x90>
    741a:	f104 016f 	add.w	r1, r4, #111	; 0x6f
    741e:	1c50      	adds	r0, r2, #1
    7420:	1ac9      	subs	r1, r1, r3
    7422:	eb00 0091 	add.w	r0, r0, r1, lsr #2
    7426:	e002      	b.n	742e <AudioStream::allocate()+0x2a>
		index++;
    7428:	3201      	adds	r2, #1
		if (p >= end) {
    742a:	4282      	cmp	r2, r0
    742c:	d032      	beq.n	7494 <AudioStream::allocate()+0x90>
		index++;
    742e:	469c      	mov	ip, r3
		avail = *p;
    7430:	f853 1b04 	ldr.w	r1, [r3], #4
		if (avail) break;
    7434:	2900      	cmp	r1, #0
    7436:	d0f7      	beq.n	7428 <AudioStream::allocate()+0x24>
	n = __builtin_clz(avail);
    7438:	fab1 f081 	clz	r0, r1
	avail &= ~(0x80000000 >> n);
    743c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    7440:	40c3      	lsrs	r3, r0
    7442:	ea21 0103 	bic.w	r1, r1, r3
	*p = avail;
    7446:	f8cc 1000 	str.w	r1, [ip]
	if (!avail) index++;
    744a:	b901      	cbnz	r1, 744e <AudioStream::allocate()+0x4a>
    744c:	3201      	adds	r2, #1
	used = memory_used + 1;
    744e:	4b15      	ldr	r3, [pc, #84]	; (74a4 <AudioStream::allocate()+0xa0>)
	memory_pool_first_mask = index;
    7450:	802a      	strh	r2, [r5, #0]
	used = memory_used + 1;
    7452:	881a      	ldrh	r2, [r3, #0]
	memory_used = used;
    7454:	3201      	adds	r2, #1
    7456:	b291      	uxth	r1, r2
    7458:	8019      	strh	r1, [r3, #0]
	__enable_irq();
    745a:	b662      	cpsie	i
	index = p - memory_pool_available_mask;
    745c:	ebac 0c04 	sub.w	ip, ip, r4
	block = memory_pool + ((index << 5) + (31 - n));
    7460:	f641 737c 	movw	r3, #8060	; 0x1f7c
    7464:	ebc0 6400 	rsb	r4, r0, r0, lsl #24
	index = p - memory_pool_available_mask;
    7468:	ea4f 0cac 	mov.w	ip, ip, asr #2
	block = memory_pool + ((index << 5) + (31 - n));
    746c:	ebc0 1084 	rsb	r0, r0, r4, lsl #6
	block->ref_count = 1;
    7470:	2401      	movs	r4, #1
	block = memory_pool + ((index << 5) + (31 - n));
    7472:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
    7476:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
    747a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    747e:	480a      	ldr	r0, [pc, #40]	; (74a8 <AudioStream::allocate()+0xa4>)
    7480:	6800      	ldr	r0, [r0, #0]
	block->ref_count = 1;
    7482:	54c4      	strb	r4, [r0, r3]
	block = memory_pool + ((index << 5) + (31 - n));
    7484:	4418      	add	r0, r3
	if (used > memory_used_max) memory_used_max = used;
    7486:	4b09      	ldr	r3, [pc, #36]	; (74ac <AudioStream::allocate()+0xa8>)
    7488:	881c      	ldrh	r4, [r3, #0]
    748a:	4294      	cmp	r4, r2
}
    748c:	bc30      	pop	{r4, r5}
	if (used > memory_used_max) memory_used_max = used;
    748e:	bf38      	it	cc
    7490:	8019      	strhcc	r1, [r3, #0]
}
    7492:	4770      	bx	lr
			__enable_irq();
    7494:	b662      	cpsie	i
			return NULL;
    7496:	2000      	movs	r0, #0
}
    7498:	bc30      	pop	{r4, r5}
    749a:	4770      	bx	lr
    749c:	200225cc 	.word	0x200225cc
    74a0:	200210a8 	.word	0x200210a8
    74a4:	200225c4 	.word	0x200225c4
    74a8:	200210a0 	.word	0x200210a0
    74ac:	200225c6 	.word	0x200225c6

000074b0 <AudioStream::release(audio_block_struct*)>:
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    74b0:	8842      	ldrh	r2, [r0, #2]
	__disable_irq();
    74b2:	b672      	cpsid	i
	if (block->ref_count > 1) {
    74b4:	7803      	ldrb	r3, [r0, #0]
    74b6:	2b01      	cmp	r3, #1
    74b8:	d903      	bls.n	74c2 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    74ba:	3b01      	subs	r3, #1
    74bc:	7003      	strb	r3, [r0, #0]
	__enable_irq();
    74be:	b662      	cpsie	i
}
    74c0:	4770      	bx	lr
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    74c2:	43d1      	mvns	r1, r2
	uint32_t index = block->memory_pool_index >> 5;
    74c4:	0953      	lsrs	r3, r2, #5
		memory_pool_available_mask[index] |= mask;
    74c6:	480b      	ldr	r0, [pc, #44]	; (74f4 <AudioStream::release(audio_block_struct*)+0x44>)
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    74c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    74cc:	f001 011f 	and.w	r1, r1, #31
    74d0:	40ca      	lsrs	r2, r1
		memory_pool_available_mask[index] |= mask;
    74d2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    74d6:	430a      	orrs	r2, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    74d8:	4907      	ldr	r1, [pc, #28]	; (74f8 <AudioStream::release(audio_block_struct*)+0x48>)
    74da:	f8b1 c000 	ldrh.w	ip, [r1]
		memory_pool_available_mask[index] |= mask;
    74de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    74e2:	459c      	cmp	ip, r3
		memory_used--;
    74e4:	4a05      	ldr	r2, [pc, #20]	; (74fc <AudioStream::release(audio_block_struct*)+0x4c>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    74e6:	bf88      	it	hi
    74e8:	800b      	strhhi	r3, [r1, #0]
		memory_used--;
    74ea:	8813      	ldrh	r3, [r2, #0]
    74ec:	3b01      	subs	r3, #1
    74ee:	8013      	strh	r3, [r2, #0]
	__enable_irq();
    74f0:	b662      	cpsie	i
}
    74f2:	4770      	bx	lr
    74f4:	200210a8 	.word	0x200210a8
    74f8:	200225cc 	.word	0x200225cc
    74fc:	200225c4 	.word	0x200225c4

00007500 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    7500:	68c3      	ldr	r3, [r0, #12]
    7502:	b913      	cbnz	r3, 750a <AudioStream::transmit(audio_block_struct*, unsigned char)+0xa>
    7504:	e01d      	b.n	7542 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x42>
    7506:	68db      	ldr	r3, [r3, #12]
    7508:	b1e3      	cbz	r3, 7544 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x44>
		if (c->src_index == index) {
    750a:	7a18      	ldrb	r0, [r3, #8]
    750c:	4290      	cmp	r0, r2
    750e:	d1fa      	bne.n	7506 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x6>
{
    7510:	b410      	push	{r4}
			if (c->dst->inputQueue[c->dest_index] == NULL) {
    7512:	6858      	ldr	r0, [r3, #4]
    7514:	f893 c009 	ldrb.w	ip, [r3, #9]
    7518:	6900      	ldr	r0, [r0, #16]
    751a:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    751e:	b154      	cbz	r4, 7536 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x36>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    7520:	68db      	ldr	r3, [r3, #12]
    7522:	b12b      	cbz	r3, 7530 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    7524:	7a18      	ldrb	r0, [r3, #8]
    7526:	4290      	cmp	r0, r2
    7528:	d0f3      	beq.n	7512 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x12>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    752a:	68db      	ldr	r3, [r3, #12]
    752c:	2b00      	cmp	r3, #0
    752e:	d1f9      	bne.n	7524 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x24>
}
    7530:	f85d 4b04 	ldr.w	r4, [sp], #4
    7534:	4770      	bx	lr
				c->dst->inputQueue[c->dest_index] = block;
    7536:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
				block->ref_count++;
    753a:	7808      	ldrb	r0, [r1, #0]
    753c:	3001      	adds	r0, #1
    753e:	7008      	strb	r0, [r1, #0]
    7540:	e7ee      	b.n	7520 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x20>
    7542:	4770      	bx	lr
    7544:	4770      	bx	lr
    7546:	bf00      	nop

00007548 <AudioStream::receiveWritable(unsigned int)>:
{
    7548:	b538      	push	{r3, r4, r5, lr}
	if (index >= num_inputs) return NULL;
    754a:	7a43      	ldrb	r3, [r0, #9]
    754c:	428b      	cmp	r3, r1
    754e:	d91b      	bls.n	7588 <AudioStream::receiveWritable(unsigned int)+0x40>
	in = inputQueue[index];
    7550:	6903      	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    7552:	2200      	movs	r2, #0
	in = inputQueue[index];
    7554:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    7558:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    755c:	b1a4      	cbz	r4, 7588 <AudioStream::receiveWritable(unsigned int)+0x40>
    755e:	7823      	ldrb	r3, [r4, #0]
    7560:	2b01      	cmp	r3, #1
    7562:	d801      	bhi.n	7568 <AudioStream::receiveWritable(unsigned int)+0x20>
}
    7564:	4620      	mov	r0, r4
    7566:	bd38      	pop	{r3, r4, r5, pc}
		p = allocate();
    7568:	f7ff ff4c 	bl	7404 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    756c:	4605      	mov	r5, r0
    756e:	b128      	cbz	r0, 757c <AudioStream::receiveWritable(unsigned int)+0x34>
    7570:	f44f 7280 	mov.w	r2, #256	; 0x100
    7574:	1d21      	adds	r1, r4, #4
    7576:	3004      	adds	r0, #4
    7578:	f000 fea8 	bl	82cc <memcpy>
		in->ref_count--;
    757c:	7823      	ldrb	r3, [r4, #0]
    757e:	3b01      	subs	r3, #1
    7580:	7023      	strb	r3, [r4, #0]
		p = allocate();
    7582:	462c      	mov	r4, r5
}
    7584:	4620      	mov	r0, r4
    7586:	bd38      	pop	{r3, r4, r5, pc}
	if (index >= num_inputs) return NULL;
    7588:	2400      	movs	r4, #0
}
    758a:	4620      	mov	r0, r4
    758c:	bd38      	pop	{r3, r4, r5, pc}
    758e:	bf00      	nop

00007590 <AudioConnection::AudioConnection()>:
	: src(NULL), dst(NULL),
    7590:	2200      	movs	r2, #0
	next_dest = AudioStream::unused;
    7592:	4904      	ldr	r1, [pc, #16]	; (75a4 <AudioConnection::AudioConnection()+0x14>)
	: src(NULL), dst(NULL),
    7594:	e9c0 2200 	strd	r2, r2, [r0]
	  src_index(0), dest_index(0),
    7598:	8102      	strh	r2, [r0, #8]
	  isConnected(false)
    759a:	7402      	strb	r2, [r0, #16]
	next_dest = AudioStream::unused;
    759c:	680a      	ldr	r2, [r1, #0]
	AudioStream::unused = this;
    759e:	6008      	str	r0, [r1, #0]
	next_dest = AudioStream::unused;
    75a0:	60c2      	str	r2, [r0, #12]
}
    75a2:	4770      	bx	lr
    75a4:	20021118 	.word	0x20021118

000075a8 <AudioConnection::connect()>:
		if (isConnected) // already connected
    75a8:	7c03      	ldrb	r3, [r0, #16]
    75aa:	b9fb      	cbnz	r3, 75ec <AudioConnection::connect()+0x44>
		if (!src || !dst) // NULL src or dst - [old] Stream object destroyed
    75ac:	6803      	ldr	r3, [r0, #0]
    75ae:	4601      	mov	r1, r0
    75b0:	b1fb      	cbz	r3, 75f2 <AudioConnection::connect()+0x4a>
    75b2:	6843      	ldr	r3, [r0, #4]
    75b4:	b1eb      	cbz	r3, 75f2 <AudioConnection::connect()+0x4a>
		if (dest_index >= dst->num_inputs) // input number too high
    75b6:	7a42      	ldrb	r2, [r0, #9]
    75b8:	7a5b      	ldrb	r3, [r3, #9]
    75ba:	429a      	cmp	r2, r3
    75bc:	d21c      	bcs.n	75f8 <AudioConnection::connect()+0x50>
{
    75be:	b430      	push	{r4, r5}
		__disable_irq();
    75c0:	b672      	cpsid	i
		s = AudioStream::first_update; // first AudioStream in the stream list
    75c2:	4b2b      	ldr	r3, [pc, #172]	; (7670 <AudioConnection::connect()+0xc8>)
    75c4:	681c      	ldr	r4, [r3, #0]
		while (s) // go through all AudioStream objects
    75c6:	b1ec      	cbz	r4, 7604 <AudioConnection::connect()+0x5c>
			p = s->destination_list;	// first patchCord in this stream's list
    75c8:	68e3      	ldr	r3, [r4, #12]
			while (p)
    75ca:	b1c3      	cbz	r3, 75fe <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    75cc:	6848      	ldr	r0, [r1, #4]
    75ce:	e001      	b.n	75d4 <AudioConnection::connect()+0x2c>
				p = p->next_dest;
    75d0:	68db      	ldr	r3, [r3, #12]
			while (p)
    75d2:	b1a3      	cbz	r3, 75fe <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    75d4:	685a      	ldr	r2, [r3, #4]
    75d6:	4282      	cmp	r2, r0
    75d8:	d1fa      	bne.n	75d0 <AudioConnection::connect()+0x28>
    75da:	f893 c009 	ldrb.w	ip, [r3, #9]
    75de:	7a4a      	ldrb	r2, [r1, #9]
    75e0:	4594      	cmp	ip, r2
    75e2:	d1f5      	bne.n	75d0 <AudioConnection::connect()+0x28>
					__enable_irq();
    75e4:	b662      	cpsie	i
					return 4;
    75e6:	2004      	movs	r0, #4
}
    75e8:	bc30      	pop	{r4, r5}
    75ea:	4770      	bx	lr
	int result = 1;
    75ec:	2001      	movs	r0, #1
	__enable_irq();
    75ee:	b662      	cpsie	i
}
    75f0:	4770      	bx	lr
			result = 3;
    75f2:	2003      	movs	r0, #3
	__enable_irq();
    75f4:	b662      	cpsie	i
}
    75f6:	4770      	bx	lr
			result = 2;
    75f8:	2002      	movs	r0, #2
	__enable_irq();
    75fa:	b662      	cpsie	i
}
    75fc:	4770      	bx	lr
			s = s->next_update;
    75fe:	6964      	ldr	r4, [r4, #20]
		while (s) // go through all AudioStream objects
    7600:	2c00      	cmp	r4, #0
    7602:	d1e1      	bne.n	75c8 <AudioConnection::connect()+0x20>
		pp = &AudioStream::unused;
    7604:	4c1b      	ldr	r4, [pc, #108]	; (7674 <AudioConnection::connect()+0xcc>)
    7606:	6823      	ldr	r3, [r4, #0]
		while (*pp && *pp != this)
    7608:	b143      	cbz	r3, 761c <AudioConnection::connect()+0x74>
    760a:	4299      	cmp	r1, r3
    760c:	d102      	bne.n	7614 <AudioConnection::connect()+0x6c>
    760e:	e00b      	b.n	7628 <AudioConnection::connect()+0x80>
    7610:	4299      	cmp	r1, r3
    7612:	d007      	beq.n	7624 <AudioConnection::connect()+0x7c>
			pp = &((*pp)->next_dest);
    7614:	461a      	mov	r2, r3
    7616:	68db      	ldr	r3, [r3, #12]
		while (*pp && *pp != this)
    7618:	2b00      	cmp	r3, #0
    761a:	d1f9      	bne.n	7610 <AudioConnection::connect()+0x68>
			result = 5;
    761c:	2005      	movs	r0, #5
	__enable_irq();
    761e:	b662      	cpsie	i
}
    7620:	bc30      	pop	{r4, r5}
    7622:	4770      	bx	lr
			pp = &((*pp)->next_dest);
    7624:	f102 040c 	add.w	r4, r2, #12
		p = src->destination_list; // first AudioConnection
    7628:	680d      	ldr	r5, [r1, #0]
    762a:	68e8      	ldr	r0, [r5, #12]
		if (p == NULL) 
    762c:	b1e8      	cbz	r0, 766a <AudioConnection::connect()+0xc2>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    762e:	68c3      	ldr	r3, [r0, #12]
    7630:	b91b      	cbnz	r3, 763a <AudioConnection::connect()+0x92>
    7632:	e008      	b.n	7646 <AudioConnection::connect()+0x9e>
    7634:	68da      	ldr	r2, [r3, #12]
    7636:	b13a      	cbz	r2, 7648 <AudioConnection::connect()+0xa0>
    7638:	4613      	mov	r3, r2
				if (&p->src == &this->src && &p->dst == &this->dst
    763a:	4281      	cmp	r1, r0
    763c:	4618      	mov	r0, r3
    763e:	d1f9      	bne.n	7634 <AudioConnection::connect()+0x8c>
					__enable_irq();
    7640:	b662      	cpsie	i
					return 6;
    7642:	2006      	movs	r0, #6
    7644:	e7d0      	b.n	75e8 <AudioConnection::connect()+0x40>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    7646:	4603      	mov	r3, r0
			p->next_dest = this; // end of list, can link ourselves in
    7648:	60d9      	str	r1, [r3, #12]
		*pp = next_dest;  // remove ourselves from the unused list
    764a:	68cb      	ldr	r3, [r1, #12]
		next_dest = NULL; // we're last in the source's destination list
    764c:	2000      	movs	r0, #0
		*pp = next_dest;  // remove ourselves from the unused list
    764e:	6023      	str	r3, [r4, #0]
		src->active = true;
    7650:	2301      	movs	r3, #1
		next_dest = NULL; // we're last in the source's destination list
    7652:	60c8      	str	r0, [r1, #12]
		src->numConnections++;
    7654:	7aaa      	ldrb	r2, [r5, #10]
		src->active = true;
    7656:	722b      	strb	r3, [r5, #8]
		src->numConnections++;
    7658:	441a      	add	r2, r3
    765a:	72aa      	strb	r2, [r5, #10]
		dst->numConnections++;
    765c:	684a      	ldr	r2, [r1, #4]
    765e:	7a94      	ldrb	r4, [r2, #10]
		dst->active = true;
    7660:	7213      	strb	r3, [r2, #8]
		dst->numConnections++;
    7662:	441c      	add	r4, r3
    7664:	7294      	strb	r4, [r2, #10]
		isConnected = true;
    7666:	740b      	strb	r3, [r1, #16]
		result = 0;
    7668:	e7d9      	b.n	761e <AudioConnection::connect()+0x76>
			src->destination_list = this;
    766a:	60e9      	str	r1, [r5, #12]
    766c:	e7ed      	b.n	764a <AudioConnection::connect()+0xa2>
    766e:	bf00      	nop
    7670:	200210a4 	.word	0x200210a4
    7674:	20021118 	.word	0x20021118

00007678 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>:
{
    7678:	b510      	push	{r4, lr}
	if (!isConnected)
    767a:	7c04      	ldrb	r4, [r0, #16]
{
    767c:	f89d e008 	ldrb.w	lr, [sp, #8]
	if (!isConnected)
    7680:	b10c      	cbz	r4, 7686 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)+0xe>
}
    7682:	2001      	movs	r0, #1
    7684:	bd10      	pop	{r4, pc}
		src_index = sourceOutput;
    7686:	7202      	strb	r2, [r0, #8]
		dest_index = destinationInput;
    7688:	f880 e009 	strb.w	lr, [r0, #9]
		dst = &destination;
    768c:	e9c0 1300 	strd	r1, r3, [r0]
}
    7690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		result = connect();
    7694:	f7ff bf88 	b.w	75a8 <AudioConnection::connect()>

00007698 <AudioConnection::disconnect()>:
{
    7698:	b538      	push	{r3, r4, r5, lr}
	if (!isConnected) return 1;
    769a:	7c03      	ldrb	r3, [r0, #16]
    769c:	2b00      	cmp	r3, #0
    769e:	d036      	beq.n	770e <AudioConnection::disconnect()+0x76>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    76a0:	6843      	ldr	r3, [r0, #4]
    76a2:	4604      	mov	r4, r0
    76a4:	7a42      	ldrb	r2, [r0, #9]
    76a6:	7a5b      	ldrb	r3, [r3, #9]
    76a8:	429a      	cmp	r2, r3
    76aa:	d238      	bcs.n	771e <AudioConnection::disconnect()+0x86>
	__disable_irq();
    76ac:	b672      	cpsid	i
	p = src->destination_list;
    76ae:	6801      	ldr	r1, [r0, #0]
    76b0:	68cb      	ldr	r3, [r1, #12]
	if (p == NULL) {
    76b2:	2b00      	cmp	r3, #0
    76b4:	d02d      	beq.n	7712 <AudioConnection::disconnect()+0x7a>
	} else if (p == this) {
    76b6:	4298      	cmp	r0, r3
    76b8:	d033      	beq.n	7722 <AudioConnection::disconnect()+0x8a>
			if (p->next_dest == this) // found the parent of the disconnecting object
    76ba:	461a      	mov	r2, r3
    76bc:	68db      	ldr	r3, [r3, #12]
    76be:	429c      	cmp	r4, r3
    76c0:	d02a      	beq.n	7718 <AudioConnection::disconnect()+0x80>
		while (p)
    76c2:	2b00      	cmp	r3, #0
    76c4:	d1f9      	bne.n	76ba <AudioConnection::disconnect()+0x22>
	if(dst->inputQueue[dest_index] != NULL) {
    76c6:	6862      	ldr	r2, [r4, #4]
    76c8:	7a60      	ldrb	r0, [r4, #9]
    76ca:	6913      	ldr	r3, [r2, #16]
    76cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    76d0:	b148      	cbz	r0, 76e6 <AudioConnection::disconnect()+0x4e>
		AudioStream::release(dst->inputQueue[dest_index]);
    76d2:	f7ff feed 	bl	74b0 <AudioStream::release(audio_block_struct*)>
		__disable_irq();
    76d6:	b672      	cpsid	i
		dst->inputQueue[dest_index] = NULL;
    76d8:	6862      	ldr	r2, [r4, #4]
    76da:	2500      	movs	r5, #0
    76dc:	7a60      	ldrb	r0, [r4, #9]
    76de:	6913      	ldr	r3, [r2, #16]
	src->numConnections--;
    76e0:	6821      	ldr	r1, [r4, #0]
		dst->inputQueue[dest_index] = NULL;
    76e2:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
	src->numConnections--;
    76e6:	7a8b      	ldrb	r3, [r1, #10]
    76e8:	3b01      	subs	r3, #1
    76ea:	b2db      	uxtb	r3, r3
    76ec:	728b      	strb	r3, [r1, #10]
	if (src->numConnections == 0) {
    76ee:	b903      	cbnz	r3, 76f2 <AudioConnection::disconnect()+0x5a>
		src->active = false;
    76f0:	720b      	strb	r3, [r1, #8]
	dst->numConnections--;
    76f2:	7a93      	ldrb	r3, [r2, #10]
    76f4:	3b01      	subs	r3, #1
    76f6:	b2db      	uxtb	r3, r3
    76f8:	7293      	strb	r3, [r2, #10]
	if (dst->numConnections == 0) {
    76fa:	b903      	cbnz	r3, 76fe <AudioConnection::disconnect()+0x66>
		dst->active = false;
    76fc:	7213      	strb	r3, [r2, #8]
	next_dest = dst->unused;
    76fe:	4b0a      	ldr	r3, [pc, #40]	; (7728 <AudioConnection::disconnect()+0x90>)
	isConnected = false;
    7700:	2000      	movs	r0, #0
	next_dest = dst->unused;
    7702:	681a      	ldr	r2, [r3, #0]
	isConnected = false;
    7704:	7420      	strb	r0, [r4, #16]
	dst->unused = this;
    7706:	601c      	str	r4, [r3, #0]
	next_dest = dst->unused;
    7708:	60e2      	str	r2, [r4, #12]
	__enable_irq();
    770a:	b662      	cpsie	i
}
    770c:	bd38      	pop	{r3, r4, r5, pc}
	if (!isConnected) return 1;
    770e:	2001      	movs	r0, #1
}
    7710:	bd38      	pop	{r3, r4, r5, pc}
		__enable_irq();
    7712:	b662      	cpsie	i
		return 3;
    7714:	2003      	movs	r0, #3
}
    7716:	bd38      	pop	{r3, r4, r5, pc}
				p-> next_dest = this->next_dest; // skip parent's link past us
    7718:	68e3      	ldr	r3, [r4, #12]
    771a:	60d3      	str	r3, [r2, #12]
				break;
    771c:	e7d3      	b.n	76c6 <AudioConnection::disconnect()+0x2e>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    771e:	2002      	movs	r0, #2
}
    7720:	bd38      	pop	{r3, r4, r5, pc}
		if (p->next_dest) {
    7722:	68c3      	ldr	r3, [r0, #12]
			src->destination_list = NULL;
    7724:	60cb      	str	r3, [r1, #12]
    7726:	e7ce      	b.n	76c6 <AudioConnection::disconnect()+0x2e>
    7728:	20021118 	.word	0x20021118

0000772c <AudioConnection::~AudioConnection()>:
AudioConnection::~AudioConnection()
    772c:	b510      	push	{r4, lr}
    772e:	4604      	mov	r4, r0
	disconnect(); // disconnect ourselves: puts us on the unused list
    7730:	f7ff ffb2 	bl	7698 <AudioConnection::disconnect()>
	pp = &AudioStream::unused;
    7734:	4a09      	ldr	r2, [pc, #36]	; (775c <AudioConnection::~AudioConnection()+0x30>)
    7736:	6813      	ldr	r3, [r2, #0]
	while (*pp && *pp != this)
    7738:	b143      	cbz	r3, 774c <AudioConnection::~AudioConnection()+0x20>
    773a:	429c      	cmp	r4, r3
    773c:	d102      	bne.n	7744 <AudioConnection::~AudioConnection()+0x18>
    773e:	e008      	b.n	7752 <AudioConnection::~AudioConnection()+0x26>
    7740:	429c      	cmp	r4, r3
    7742:	d005      	beq.n	7750 <AudioConnection::~AudioConnection()+0x24>
		pp = &((*pp)->next_dest);
    7744:	461a      	mov	r2, r3
    7746:	68db      	ldr	r3, [r3, #12]
	while (*pp && *pp != this)
    7748:	2b00      	cmp	r3, #0
    774a:	d1f9      	bne.n	7740 <AudioConnection::~AudioConnection()+0x14>
}
    774c:	4620      	mov	r0, r4
    774e:	bd10      	pop	{r4, pc}
		pp = &((*pp)->next_dest);
    7750:	320c      	adds	r2, #12
		*pp = next_dest; // remove ourselves from the unused list
    7752:	68e3      	ldr	r3, [r4, #12]
}
    7754:	4620      	mov	r0, r4
		*pp = next_dest; // remove ourselves from the unused list
    7756:	6013      	str	r3, [r2, #0]
}
    7758:	bd10      	pop	{r4, pc}
    775a:	bf00      	nop
    775c:	20021118 	.word	0x20021118

00007760 <AudioStream::update_setup()>:
	if (update_scheduled) return false;
    7760:	4b0c      	ldr	r3, [pc, #48]	; (7794 <AudioStream::update_setup()+0x34>)
    7762:	781a      	ldrb	r2, [r3, #0]
    7764:	b99a      	cbnz	r2, 778e <AudioStream::update_setup()+0x2e>
    7766:	4a0c      	ldr	r2, [pc, #48]	; (7798 <AudioStream::update_setup()+0x38>)
    7768:	490c      	ldr	r1, [pc, #48]	; (779c <AudioStream::update_setup()+0x3c>)
{
    776a:	b410      	push	{r4}
    776c:	f8c2 1158 	str.w	r1, [r2, #344]	; 0x158
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    7770:	480b      	ldr	r0, [pc, #44]	; (77a0 <AudioStream::update_setup()+0x40>)
    7772:	24d0      	movs	r4, #208	; 0xd0
	update_scheduled = true;
    7774:	2201      	movs	r2, #1
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    7776:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    777a:	f880 4046 	strb.w	r4, [r0, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    777e:	2440      	movs	r4, #64	; 0x40
	update_scheduled = true;
    7780:	4610      	mov	r0, r2
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    7782:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
}
    7786:	f85d 4b04 	ldr.w	r4, [sp], #4
	update_scheduled = true;
    778a:	701a      	strb	r2, [r3, #0]
}
    778c:	4770      	bx	lr
	if (update_scheduled) return false;
    778e:	2000      	movs	r0, #0
}
    7790:	4770      	bx	lr
    7792:	bf00      	nop
    7794:	200225eb 	.word	0x200225eb
    7798:	20009000 	.word	0x20009000
    779c:	000073a1 	.word	0x000073a1
    77a0:	e000e400 	.word	0xe000e400

000077a4 <DMAChannel::begin(bool)>:
{
    77a4:	b430      	push	{r4, r5}
	__disable_irq();
    77a6:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    77a8:	b921      	cbnz	r1, 77b4 <DMAChannel::begin(bool)+0x10>
    77aa:	6803      	ldr	r3, [r0, #0]
    77ac:	b113      	cbz	r3, 77b4 <DMAChannel::begin(bool)+0x10>
    77ae:	7902      	ldrb	r2, [r0, #4]
    77b0:	2a0f      	cmp	r2, #15
    77b2:	d93b      	bls.n	782c <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    77b4:	4c24      	ldr	r4, [pc, #144]	; (7848 <DMAChannel::begin(bool)+0xa4>)
    77b6:	8821      	ldrh	r1, [r4, #0]
{
    77b8:	2300      	movs	r3, #0
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    77ba:	fa41 f203 	asr.w	r2, r1, r3
    77be:	f012 0201 	ands.w	r2, r2, #1
    77c2:	d008      	beq.n	77d6 <DMAChannel::begin(bool)+0x32>
		if (++ch >= DMA_MAX_CHANNELS) {
    77c4:	3301      	adds	r3, #1
    77c6:	2b10      	cmp	r3, #16
    77c8:	d1f7      	bne.n	77ba <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    77ca:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    77cc:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    77ce:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    77d0:	6002      	str	r2, [r0, #0]
}
    77d2:	bc30      	pop	{r4, r5}
    77d4:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    77d6:	f04f 0c01 	mov.w	ip, #1
    77da:	fa0c fc03 	lsl.w	ip, ip, r3
    77de:	ea41 010c 	orr.w	r1, r1, ip
    77e2:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    77e4:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    77e6:	4919      	ldr	r1, [pc, #100]	; (784c <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    77e8:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    77ec:	4c18      	ldr	r4, [pc, #96]	; (7850 <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    77ee:	4419      	add	r1, r3
	channel = ch;
    77f0:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    77f4:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    77f6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    77f8:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    77fc:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    77fe:	f240 4482 	movw	r4, #1154	; 0x482
    7802:	4914      	ldr	r1, [pc, #80]	; (7854 <DMAChannel::begin(bool)+0xb0>)
    7804:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    7806:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    780a:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    780e:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    7812:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    7816:	6003      	str	r3, [r0, #0]
}
    7818:	bc30      	pop	{r4, r5}
	*p++ = 0;
    781a:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    781e:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    7822:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    7826:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    782a:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    782c:	4c06      	ldr	r4, [pc, #24]	; (7848 <DMAChannel::begin(bool)+0xa4>)
    782e:	8821      	ldrh	r1, [r4, #0]
    7830:	fa41 f502 	asr.w	r5, r1, r2
    7834:	07ed      	lsls	r5, r5, #31
    7836:	d5bf      	bpl.n	77b8 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    7838:	4d04      	ldr	r5, [pc, #16]	; (784c <DMAChannel::begin(bool)+0xa8>)
    783a:	4415      	add	r5, r2
    783c:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    7840:	d1ba      	bne.n	77b8 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    7842:	b662      	cpsie	i
		return;
    7844:	e7c5      	b.n	77d2 <DMAChannel::begin(bool)+0x2e>
    7846:	bf00      	nop
    7848:	200225d8 	.word	0x200225d8
    784c:	02007480 	.word	0x02007480
    7850:	400fc000 	.word	0x400fc000
    7854:	400e8000 	.word	0x400e8000

00007858 <DMAChannel::release()>:
	if (channel >= DMA_MAX_CHANNELS) return;
    7858:	7903      	ldrb	r3, [r0, #4]
    785a:	2b0f      	cmp	r3, #15
    785c:	d811      	bhi.n	7882 <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    785e:	4a09      	ldr	r2, [pc, #36]	; (7884 <DMAChannel::release()+0x2c>)
    7860:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    7862:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    7864:	4908      	ldr	r1, [pc, #32]	; (7888 <DMAChannel::release()+0x30>)
    7866:	2201      	movs	r2, #1
    7868:	f890 c004 	ldrb.w	ip, [r0, #4]
    786c:	880b      	ldrh	r3, [r1, #0]
    786e:	fa02 f20c 	lsl.w	r2, r2, ip
    7872:	ea23 0302 	bic.w	r3, r3, r2
    7876:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    7878:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    787a:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    787c:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    787e:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    7880:	6003      	str	r3, [r0, #0]
}
    7882:	4770      	bx	lr
    7884:	400e8000 	.word	0x400e8000
    7888:	200225d8 	.word	0x200225d8

0000788c <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    788c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7890:	b672      	cpsid	i
	if (_triggered == false) {
    7892:	7f43      	ldrb	r3, [r0, #29]
    7894:	b95b      	cbnz	r3, 78ae <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    7896:	7f01      	ldrb	r1, [r0, #28]
    7898:	2901      	cmp	r1, #1
{
    789a:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    789c:	d00b      	beq.n	78b6 <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    789e:	2903      	cmp	r1, #3
    78a0:	d013      	beq.n	78ca <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    78a2:	2301      	movs	r3, #1
    78a4:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    78a6:	b902      	cbnz	r2, 78aa <EventResponder::triggerEventNotImmediate()+0x1e>
    78a8:	b662      	cpsie	i
}
    78aa:	bc30      	pop	{r4, r5}
    78ac:	4770      	bx	lr
    78ae:	b90a      	cbnz	r2, 78b4 <EventResponder::triggerEventNotImmediate()+0x28>
    78b0:	b662      	cpsie	i
    78b2:	4770      	bx	lr
    78b4:	4770      	bx	lr
			if (firstYield == nullptr) {
    78b6:	4c12      	ldr	r4, [pc, #72]	; (7900 <EventResponder::triggerEventNotImmediate()+0x74>)
    78b8:	6821      	ldr	r1, [r4, #0]
    78ba:	b1b1      	cbz	r1, 78ea <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    78bc:	4911      	ldr	r1, [pc, #68]	; (7904 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    78be:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    78c0:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    78c2:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    78c4:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    78c6:	6158      	str	r0, [r3, #20]
				lastYield = this;
    78c8:	e7eb      	b.n	78a2 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    78ca:	4d0f      	ldr	r5, [pc, #60]	; (7908 <EventResponder::triggerEventNotImmediate()+0x7c>)
    78cc:	490f      	ldr	r1, [pc, #60]	; (790c <EventResponder::triggerEventNotImmediate()+0x80>)
    78ce:	682c      	ldr	r4, [r5, #0]
    78d0:	b18c      	cbz	r4, 78f6 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    78d2:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    78d4:	680b      	ldr	r3, [r1, #0]
    78d6:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    78d8:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    78da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    78de:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    78e2:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    78e4:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    78e8:	e7db      	b.n	78a2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    78ea:	4b06      	ldr	r3, [pc, #24]	; (7904 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    78ec:	6020      	str	r0, [r4, #0]
				lastYield = this;
    78ee:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    78f0:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    78f4:	e7d5      	b.n	78a2 <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    78f6:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    78fa:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    78fc:	e7ed      	b.n	78da <EventResponder::triggerEventNotImmediate()+0x4e>
    78fe:	bf00      	nop
    7900:	20021140 	.word	0x20021140
    7904:	2002114c 	.word	0x2002114c
    7908:	20021148 	.word	0x20021148
    790c:	20021144 	.word	0x20021144

00007910 <EventResponder::runFromInterrupt()>:
{
    7910:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7912:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7916:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    7918:	4c0c      	ldr	r4, [pc, #48]	; (794c <EventResponder::runFromInterrupt()+0x3c>)
    791a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    791c:	b180      	cbz	r0, 7940 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    791e:	4e0c      	ldr	r6, [pc, #48]	; (7950 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    7920:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    7922:	6943      	ldr	r3, [r0, #20]
    7924:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    7926:	b173      	cbz	r3, 7946 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    7928:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    792a:	b902      	cbnz	r2, 792e <EventResponder::runFromInterrupt()+0x1e>
    792c:	b662      	cpsie	i
			(*(first->_function))(*first);
    792e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    7930:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    7932:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7934:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7938:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    793a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    793c:	2800      	cmp	r0, #0
    793e:	d1f0      	bne.n	7922 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    7940:	b902      	cbnz	r2, 7944 <EventResponder::runFromInterrupt()+0x34>
    7942:	b662      	cpsie	i
}
    7944:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    7946:	6033      	str	r3, [r6, #0]
    7948:	e7ef      	b.n	792a <EventResponder::runFromInterrupt()+0x1a>
    794a:	bf00      	nop
    794c:	20021148 	.word	0x20021148
    7950:	20021144 	.word	0x20021144

00007954 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    7954:	f7ff bfdc 	b.w	7910 <EventResponder::runFromInterrupt()>

00007958 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    7958:	4904      	ldr	r1, [pc, #16]	; (796c <systick_isr+0x14>)
	systick_millis_count++;
    795a:	4a05      	ldr	r2, [pc, #20]	; (7970 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    795c:	6849      	ldr	r1, [r1, #4]
    795e:	4b05      	ldr	r3, [pc, #20]	; (7974 <systick_isr+0x1c>)
    7960:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    7962:	6813      	ldr	r3, [r2, #0]
    7964:	3301      	adds	r3, #1
    7966:	6013      	str	r3, [r2, #0]
}
    7968:	4770      	bx	lr
    796a:	bf00      	nop
    796c:	e0001000 	.word	0xe0001000
    7970:	20022554 	.word	0x20022554
    7974:	20022550 	.word	0x20022550

00007978 <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
    7978:	b510      	push	{r4, lr}

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    797a:	4c13      	ldr	r4, [pc, #76]	; (79c8 <pit_isr()+0x50>)
    797c:	6823      	ldr	r3, [r4, #0]
    797e:	b113      	cbz	r3, 7986 <pit_isr()+0xe>
    7980:	4a12      	ldr	r2, [pc, #72]	; (79cc <pit_isr()+0x54>)
    7982:	68d1      	ldr	r1, [r2, #12]
    7984:	b9e1      	cbnz	r1, 79c0 <pit_isr()+0x48>
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    7986:	6863      	ldr	r3, [r4, #4]
    7988:	b113      	cbz	r3, 7990 <pit_isr()+0x18>
    798a:	4a10      	ldr	r2, [pc, #64]	; (79cc <pit_isr()+0x54>)
    798c:	69d1      	ldr	r1, [r2, #28]
    798e:	b999      	cbnz	r1, 79b8 <pit_isr()+0x40>
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    7990:	68a3      	ldr	r3, [r4, #8]
    7992:	b113      	cbz	r3, 799a <pit_isr()+0x22>
    7994:	4a0d      	ldr	r2, [pc, #52]	; (79cc <pit_isr()+0x54>)
    7996:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    7998:	b951      	cbnz	r1, 79b0 <pit_isr()+0x38>
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    799a:	68e3      	ldr	r3, [r4, #12]
    799c:	b13b      	cbz	r3, 79ae <pit_isr()+0x36>
    799e:	4a0b      	ldr	r2, [pc, #44]	; (79cc <pit_isr()+0x54>)
    79a0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    79a2:	b121      	cbz	r1, 79ae <pit_isr()+0x36>
    79a4:	2101      	movs	r1, #1
#endif
}
    79a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    79aa:	63d1      	str	r1, [r2, #60]	; 0x3c
    79ac:	4718      	bx	r3
}
    79ae:	bd10      	pop	{r4, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    79b0:	2101      	movs	r1, #1
    79b2:	62d1      	str	r1, [r2, #44]	; 0x2c
    79b4:	4798      	blx	r3
    79b6:	e7f0      	b.n	799a <pit_isr()+0x22>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    79b8:	2101      	movs	r1, #1
    79ba:	61d1      	str	r1, [r2, #28]
    79bc:	4798      	blx	r3
    79be:	e7e7      	b.n	7990 <pit_isr()+0x18>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    79c0:	2101      	movs	r1, #1
    79c2:	60d1      	str	r1, [r2, #12]
    79c4:	4798      	blx	r3
    79c6:	e7de      	b.n	7986 <pit_isr()+0xe>
    79c8:	200092c0 	.word	0x200092c0
    79cc:	40084100 	.word	0x40084100

000079d0 <IntervalTimer::beginCycles(void (*)(), unsigned long)>:
	if (channel) {
    79d0:	6803      	ldr	r3, [r0, #0]
{
    79d2:	4684      	mov	ip, r0
    79d4:	b410      	push	{r4}
	if (channel) {
    79d6:	b373      	cbz	r3, 7a36 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x66>
		channel->TCTRL = 0;
    79d8:	2000      	movs	r0, #0
    79da:	6098      	str	r0, [r3, #8]
		channel->TFLG = 1;
    79dc:	2001      	movs	r0, #1
    79de:	60d8      	str	r0, [r3, #12]
	channel->LDVAL = cycles;
    79e0:	601a      	str	r2, [r3, #0]
	int index = channel - IMXRT_PIT_CHANNELS;
    79e2:	4a23      	ldr	r2, [pc, #140]	; (7a70 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa0>)
	funct_table[index] = funct;
    79e4:	4823      	ldr	r0, [pc, #140]	; (7a74 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa4>)
	int index = channel - IMXRT_PIT_CHANNELS;
    79e6:	441a      	add	r2, r3
    79e8:	4c23      	ldr	r4, [pc, #140]	; (7a78 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa8>)
    79ea:	1112      	asrs	r2, r2, #4
	funct_table[index] = funct;
    79ec:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	channel->TCTRL = 3;
    79f0:	2003      	movs	r0, #3
	nvic_priorites[index] = nvic_priority;
    79f2:	4922      	ldr	r1, [pc, #136]	; (7a7c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xac>)
	channel->TCTRL = 3;
    79f4:	6098      	str	r0, [r3, #8]
	nvic_priorites[index] = nvic_priority;
    79f6:	f89c 3004 	ldrb.w	r3, [ip, #4]
    79fa:	4821      	ldr	r0, [pc, #132]	; (7a80 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb0>)
    79fc:	548b      	strb	r3, [r1, r2]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    79fe:	780b      	ldrb	r3, [r1, #0]
    7a00:	784a      	ldrb	r2, [r1, #1]
    7a02:	f8c0 4228 	str.w	r4, [r0, #552]	; 0x228
    7a06:	4293      	cmp	r3, r2
    7a08:	7888      	ldrb	r0, [r1, #2]
    7a0a:	bf28      	it	cs
    7a0c:	4613      	movcs	r3, r2
    7a0e:	78ca      	ldrb	r2, [r1, #3]
    7a10:	4283      	cmp	r3, r0
    7a12:	bf28      	it	cs
    7a14:	4603      	movcs	r3, r0
    7a16:	4293      	cmp	r3, r2
    7a18:	bf28      	it	cs
    7a1a:	4613      	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    7a1c:	4c19      	ldr	r4, [pc, #100]	; (7a84 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb4>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
    7a1e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    7a22:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return true;
    7a26:	2001      	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    7a28:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
}
    7a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
	NVIC_ENABLE_IRQ(IRQ_PIT);
    7a30:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
}
    7a34:	4770      	bx	lr
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7a36:	4814      	ldr	r0, [pc, #80]	; (7a88 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb8>)
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    7a38:	4c14      	ldr	r4, [pc, #80]	; (7a8c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xbc>)
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7a3a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    7a3c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    7a40:	66c3      	str	r3, [r0, #108]	; 0x6c
		PIT_MCR = 1;
    7a42:	2001      	movs	r0, #1
    7a44:	4b12      	ldr	r3, [pc, #72]	; (7a90 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc0>)
    7a46:	6018      	str	r0, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
    7a48:	4812      	ldr	r0, [pc, #72]	; (7a94 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc4>)
    7a4a:	4603      	mov	r3, r0
    7a4c:	f8cc 0000 	str.w	r0, [ip]
			if (channel->TCTRL == 0) break;
    7a50:	6898      	ldr	r0, [r3, #8]
    7a52:	2800      	cmp	r0, #0
    7a54:	d0c4      	beq.n	79e0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x10>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    7a56:	3310      	adds	r3, #16
    7a58:	42a3      	cmp	r3, r4
    7a5a:	f8cc 3000 	str.w	r3, [ip]
    7a5e:	d1f7      	bne.n	7a50 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x80>
				channel = NULL;
    7a60:	2300      	movs	r3, #0
}
    7a62:	f85d 4b04 	ldr.w	r4, [sp], #4
				return false;
    7a66:	4618      	mov	r0, r3
				channel = NULL;
    7a68:	f8cc 3000 	str.w	r3, [ip]
}
    7a6c:	4770      	bx	lr
    7a6e:	bf00      	nop
    7a70:	bff7bf00 	.word	0xbff7bf00
    7a74:	200092c0 	.word	0x200092c0
    7a78:	00007979 	.word	0x00007979
    7a7c:	20008888 	.word	0x20008888
    7a80:	20009000 	.word	0x20009000
    7a84:	e000e400 	.word	0xe000e400
    7a88:	400fc000 	.word	0x400fc000
    7a8c:	40084140 	.word	0x40084140
    7a90:	40084000 	.word	0x40084000
    7a94:	40084100 	.word	0x40084100

00007a98 <IntervalTimer::end()>:
	if (channel) {
    7a98:	6802      	ldr	r2, [r0, #0]
    7a9a:	b322      	cbz	r2, 7ae6 <IntervalTimer::end()+0x4e>
		int index = channel - IMXRT_PIT_CHANNELS;
    7a9c:	4b12      	ldr	r3, [pc, #72]	; (7ae8 <IntervalTimer::end()+0x50>)
		funct_table[index] = nullptr;
    7a9e:	2100      	movs	r1, #0
		nvic_priorites[index] = 255;
    7aa0:	f04f 0cff 	mov.w	ip, #255	; 0xff
		int index = channel - IMXRT_PIT_CHANNELS;
    7aa4:	4413      	add	r3, r2
void IntervalTimer::end() {
    7aa6:	b510      	push	{r4, lr}
		int index = channel - IMXRT_PIT_CHANNELS;
    7aa8:	111b      	asrs	r3, r3, #4
		funct_table[index] = nullptr;
    7aaa:	4c10      	ldr	r4, [pc, #64]	; (7aec <IntervalTimer::end()+0x54>)
		channel->TCTRL = 0;
    7aac:	6091      	str	r1, [r2, #8]
		funct_table[index] = nullptr;
    7aae:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
		channel->TFLG = 1;
    7ab2:	2401      	movs	r4, #1
    7ab4:	60d4      	str	r4, [r2, #12]
		nvic_priorites[index] = 255;
    7ab6:	4a0e      	ldr	r2, [pc, #56]	; (7af0 <IntervalTimer::end()+0x58>)
    7ab8:	f802 c003 	strb.w	ip, [r2, r3]
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    7abc:	7813      	ldrb	r3, [r2, #0]
    7abe:	f892 c001 	ldrb.w	ip, [r2, #1]
    7ac2:	f892 e002 	ldrb.w	lr, [r2, #2]
    7ac6:	4563      	cmp	r3, ip
    7ac8:	bf28      	it	cs
    7aca:	4663      	movcs	r3, ip
    7acc:	f892 c003 	ldrb.w	ip, [r2, #3]
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    7ad0:	4a08      	ldr	r2, [pc, #32]	; (7af4 <IntervalTimer::end()+0x5c>)
    7ad2:	4573      	cmp	r3, lr
    7ad4:	bf28      	it	cs
    7ad6:	4673      	movcs	r3, lr
    7ad8:	4563      	cmp	r3, ip
    7ada:	bf28      	it	cs
    7adc:	4663      	movcs	r3, ip
    7ade:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		channel = 0;
    7ae2:	6001      	str	r1, [r0, #0]
}
    7ae4:	bd10      	pop	{r4, pc}
    7ae6:	4770      	bx	lr
    7ae8:	bff7bf00 	.word	0xbff7bf00
    7aec:	200092c0 	.word	0x200092c0
    7af0:	20008888 	.word	0x20008888
    7af4:	e000e400 	.word	0xe000e400

00007af8 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7af8:	4608      	mov	r0, r1
    7afa:	f002 bb95 	b.w	a228 <usb_serial_putchar>
    7afe:	bf00      	nop

00007b00 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    7b00:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    7b02:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    7b04:	bf08      	it	eq
    7b06:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    7b08:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    7b0a:	b391      	cbz	r1, 7b72 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    7b0c:	f04f 0e21 	mov.w	lr, #33	; 0x21
    7b10:	e001      	b.n	7b16 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    7b12:	fa5f fe86 	uxtb.w	lr, r6
    7b16:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    7b1a:	fbb1 f5f2 	udiv	r5, r1, r2
    7b1e:	fb02 1415 	mls	r4, r2, r5, r1
    7b22:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7b26:	2c09      	cmp	r4, #9
    7b28:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    7b2c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    7b30:	bf98      	it	ls
    7b32:	fa5f f48c 	uxtbls.w	r4, ip
    7b36:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    7b3a:	bf88      	it	hi
    7b3c:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    7b3e:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7b40:	44ec      	add	ip, sp
			n /= base;
    7b42:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7b44:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    7b48:	d2e3      	bcs.n	7b12 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    7b4a:	b14b      	cbz	r3, 7b60 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    7b4c:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    7b50:	222d      	movs	r2, #45	; 0x2d
		i--;
    7b52:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    7b56:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    7b5a:	446b      	add	r3, sp
    7b5c:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    7b60:	6803      	ldr	r3, [r0, #0]
    7b62:	a901      	add	r1, sp, #4
    7b64:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    7b68:	685b      	ldr	r3, [r3, #4]
    7b6a:	4471      	add	r1, lr
    7b6c:	4798      	blx	r3
}
    7b6e:	b00a      	add	sp, #40	; 0x28
    7b70:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    7b72:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    7b74:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    7b78:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    7b7c:	e7e5      	b.n	7b4a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    7b7e:	bf00      	nop

00007b80 <Print::print(long)>:
	if (n < 0) {
    7b80:	2900      	cmp	r1, #0
    7b82:	db03      	blt.n	7b8c <Print::print(long)+0xc>
	uint8_t sign=0;
    7b84:	2300      	movs	r3, #0
	if (base == 0) {
    7b86:	220a      	movs	r2, #10
    7b88:	f7ff bfba 	b.w	7b00 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    7b8c:	4249      	negs	r1, r1
		sign = '-';
    7b8e:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    7b90:	220a      	movs	r2, #10
    7b92:	f7ff bfb5 	b.w	7b00 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7b96:	bf00      	nop

00007b98 <Print::println()>:
{
    7b98:	b500      	push	{lr}
	return write(buf, 2);
    7b9a:	6803      	ldr	r3, [r0, #0]
{
    7b9c:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    7b9e:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    7ba2:	2202      	movs	r2, #2
    7ba4:	a901      	add	r1, sp, #4
    7ba6:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    7ba8:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    7bac:	4798      	blx	r3
}
    7bae:	b003      	add	sp, #12
    7bb0:	f85d fb04 	ldr.w	pc, [sp], #4

00007bb4 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    7bb4:	4b05      	ldr	r3, [pc, #20]	; (7bcc <_write+0x18>)
    7bb6:	2802      	cmp	r0, #2
    7bb8:	bf88      	it	hi
    7bba:	4603      	movhi	r3, r0
{
    7bbc:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    7bbe:	681c      	ldr	r4, [r3, #0]
    7bc0:	4618      	mov	r0, r3
    7bc2:	6863      	ldr	r3, [r4, #4]
}
    7bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    7bc8:	4718      	bx	r3
    7bca:	bf00      	nop
    7bcc:	2000886c 	.word	0x2000886c

00007bd0 <Print::printf(char const*, ...)>:
{
    7bd0:	b40e      	push	{r1, r2, r3}
    7bd2:	b500      	push	{lr}
    7bd4:	b082      	sub	sp, #8
    7bd6:	aa03      	add	r2, sp, #12
    7bd8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    7bdc:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    7bde:	f004 fd21 	bl	c624 <vdprintf>
}
    7be2:	b002      	add	sp, #8
    7be4:	f85d eb04 	ldr.w	lr, [sp], #4
    7be8:	b003      	add	sp, #12
    7bea:	4770      	bx	lr

00007bec <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    7bec:	b95a      	cbnz	r2, 7c06 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    7bee:	6803      	ldr	r3, [r0, #0]
    7bf0:	b2c9      	uxtb	r1, r1
    7bf2:	4a07      	ldr	r2, [pc, #28]	; (7c10 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    7bf4:	681b      	ldr	r3, [r3, #0]
    7bf6:	4293      	cmp	r3, r2
{
    7bf8:	b500      	push	{lr}
    7bfa:	d106      	bne.n	7c0a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    7bfc:	4608      	mov	r0, r1
}
    7bfe:	f85d eb04 	ldr.w	lr, [sp], #4
    7c02:	f002 bb11 	b.w	a228 <usb_serial_putchar>
    7c06:	f7ff bf7b 	b.w	7b00 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7c0a:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    7c0e:	4718      	bx	r3
    7c10:	00007af9 	.word	0x00007af9
    7c14:	00000000 	.word	0x00000000

00007c18 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    7c18:	eeb4 0b40 	vcmp.f64	d0, d0
{
    7c1c:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    7c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    7c22:	4605      	mov	r5, r0
    7c24:	ed2d 8b02 	vpush	{d8}
    7c28:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    7c2a:	d67c      	bvs.n	7d26 <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    7c2c:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    7c30:	ed9f 6b47 	vldr	d6, [pc, #284]	; 7d50 <Print::printFloat(double, unsigned char)+0x138>
    7c34:	eeb4 7b46 	vcmp.f64	d7, d6
    7c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c3c:	dc6b      	bgt.n	7d16 <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    7c3e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 7d58 <Print::printFloat(double, unsigned char)+0x140>
    7c42:	eeb4 0bc7 	vcmpe.f64	d0, d7
    7c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c4a:	dc5a      	bgt.n	7d02 <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    7c4c:	ed9f 7b44 	vldr	d7, [pc, #272]	; 7d60 <Print::printFloat(double, unsigned char)+0x148>
    7c50:	eeb4 0bc7 	vcmpe.f64	d0, d7
    7c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c58:	d453      	bmi.n	7d02 <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    7c5a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    7c5e:	460c      	mov	r4, r1
    7c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c64:	d45b      	bmi.n	7d1e <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    7c66:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    7c68:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    7c6c:	2c00      	cmp	r4, #0
    7c6e:	d05e      	beq.n	7d2e <Print::printFloat(double, unsigned char)+0x116>
    7c70:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    7c74:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 7d68 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    7c78:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    7c7c:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    7c80:	fa5f f28c 	uxtb.w	r2, ip
    7c84:	42a2      	cmp	r2, r4
    7c86:	d3f7      	bcc.n	7c78 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    7c88:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    7c8c:	220a      	movs	r2, #10
    7c8e:	4628      	mov	r0, r5
    7c90:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    7c94:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    7c98:	ee17 1a90 	vmov	r1, s15
    7c9c:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    7ca0:	f7ff ff2e 	bl	7b00 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7ca4:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    7ca6:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    7caa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    7cae:	4606      	mov	r6, r0
		buf[0] = '.';
    7cb0:	bf28      	it	cs
    7cb2:	240f      	movcs	r4, #15
    7cb4:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    7cb8:	f10d 0309 	add.w	r3, sp, #9
    7cbc:	aa02      	add	r2, sp, #8
    7cbe:	1e61      	subs	r1, r4, #1
    7cc0:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    7cc4:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    7cc8:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    7ccc:	edcd 7a01 	vstr	s15, [sp, #4]
    7cd0:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    7cd4:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    7cd8:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    7cda:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    7cde:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    7ce2:	4291      	cmp	r1, r2
			remainder -= n; 
    7ce4:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    7ce8:	d1ec      	bne.n	7cc4 <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    7cea:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    7cec:	3401      	adds	r4, #1
		count += write(buf, count);
    7cee:	a902      	add	r1, sp, #8
    7cf0:	4628      	mov	r0, r5
    7cf2:	685b      	ldr	r3, [r3, #4]
    7cf4:	b2e2      	uxtb	r2, r4
    7cf6:	4798      	blx	r3
	}
	return count;
}
    7cf8:	4630      	mov	r0, r6
    7cfa:	b006      	add	sp, #24
    7cfc:	ecbd 8b02 	vpop	{d8}
    7d00:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    7d02:	682b      	ldr	r3, [r5, #0]
    7d04:	2203      	movs	r2, #3
    7d06:	491a      	ldr	r1, [pc, #104]	; (7d70 <Print::printFloat(double, unsigned char)+0x158>)
    7d08:	685b      	ldr	r3, [r3, #4]
    7d0a:	b006      	add	sp, #24
    7d0c:	ecbd 8b02 	vpop	{d8}
    7d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d14:	4718      	bx	r3
    7d16:	6803      	ldr	r3, [r0, #0]
    7d18:	2203      	movs	r2, #3
    7d1a:	4916      	ldr	r1, [pc, #88]	; (7d74 <Print::printFloat(double, unsigned char)+0x15c>)
    7d1c:	e7f4      	b.n	7d08 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    7d1e:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    7d22:	2301      	movs	r3, #1
    7d24:	e7a0      	b.n	7c68 <Print::printFloat(double, unsigned char)+0x50>
    7d26:	6803      	ldr	r3, [r0, #0]
    7d28:	2203      	movs	r2, #3
    7d2a:	4913      	ldr	r1, [pc, #76]	; (7d78 <Print::printFloat(double, unsigned char)+0x160>)
    7d2c:	e7ec      	b.n	7d08 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    7d2e:	ee30 0b07 	vadd.f64	d0, d0, d7
    7d32:	220a      	movs	r2, #10
    7d34:	4628      	mov	r0, r5
    7d36:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    7d3a:	ee17 1a90 	vmov	r1, s15
}
    7d3e:	b006      	add	sp, #24
    7d40:	ecbd 8b02 	vpop	{d8}
    7d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d48:	f7ff beda 	b.w	7b00 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    7d4c:	f3af 8000 	nop.w
    7d50:	ffffffff 	.word	0xffffffff
    7d54:	7fefffff 	.word	0x7fefffff
    7d58:	e0000000 	.word	0xe0000000
    7d5c:	41efffff 	.word	0x41efffff
    7d60:	e0000000 	.word	0xe0000000
    7d64:	c1efffff 	.word	0xc1efffff
    7d68:	9999999a 	.word	0x9999999a
    7d6c:	3fb99999 	.word	0x3fb99999
    7d70:	20000828 	.word	0x20000828
    7d74:	20000824 	.word	0x20000824
    7d78:	20000820 	.word	0x20000820

00007d7c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    7d7c:	f002 ba44 	b.w	a208 <usb_serial_getchar>

00007d80 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    7d80:	f002 b9dc 	b.w	a13c <usb_serial_peekchar>

00007d84 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    7d84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    7d88:	b392      	cbz	r2, 7df0 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
    7d8a:	4617      	mov	r7, r2
    7d8c:	fab3 f283 	clz	r2, r3
    7d90:	0952      	lsrs	r2, r2, #5
    7d92:	b36b      	cbz	r3, 7df0 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
	length--;
	size_t index = 0;
	while (index < length) {
    7d94:	f1b3 0801 	subs.w	r8, r3, #1
    7d98:	d025      	beq.n	7de6 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    7d9a:	eb07 0a08 	add.w	sl, r7, r8
    7d9e:	4683      	mov	fp, r0
    7da0:	4689      	mov	r9, r1
	size_t index = 0;
    7da2:	4690      	mov	r8, r2
    7da4:	4c17      	ldr	r4, [pc, #92]	; (7e04 <Stream::readBytesUntil(char, char*, unsigned int)+0x80>)
    7da6:	4e18      	ldr	r6, [pc, #96]	; (7e08 <Stream::readBytesUntil(char, char*, unsigned int)+0x84>)
    7da8:	6825      	ldr	r5, [r4, #0]
    7daa:	e00b      	b.n	7dc4 <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
        virtual int read() { return usb_serial_getchar(); }
    7dac:	f002 fa2c 	bl	a208 <usb_serial_getchar>
    if (c >= 0) return c;
    7db0:	2800      	cmp	r0, #0
    7db2:	da10      	bge.n	7dd6 <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    yield();
    7db4:	f002 facc 	bl	a350 <yield>
    7db8:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    7dba:	f8db 2008 	ldr.w	r2, [fp, #8]
    7dbe:	1b5b      	subs	r3, r3, r5
    7dc0:	4293      	cmp	r3, r2
    7dc2:	d21a      	bcs.n	7dfa <Stream::readBytesUntil(char, char*, unsigned int)+0x76>
    c = read();
    7dc4:	f8db 3000 	ldr.w	r3, [fp]
    7dc8:	695b      	ldr	r3, [r3, #20]
    7dca:	42b3      	cmp	r3, r6
    7dcc:	d0ee      	beq.n	7dac <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    7dce:	4658      	mov	r0, fp
    7dd0:	4798      	blx	r3
    if (c >= 0) return c;
    7dd2:	2800      	cmp	r0, #0
    7dd4:	dbee      	blt.n	7db4 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
		int c = timedRead();
		if (c == terminator) break;
    7dd6:	4548      	cmp	r0, r9
    7dd8:	d005      	beq.n	7de6 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    7dda:	f807 0b01 	strb.w	r0, [r7], #1
	while (index < length) {
    7dde:	45ba      	cmp	sl, r7
		index++;
    7de0:	f108 0801 	add.w	r8, r8, #1
	while (index < length) {
    7de4:	d1e0      	bne.n	7da8 <Stream::readBytesUntil(char, char*, unsigned int)+0x24>
	}
	*buffer = 0;
    7de6:	2300      	movs	r3, #0
	return index; // return number of characters, not including null terminator
}
    7de8:	4640      	mov	r0, r8
	*buffer = 0;
    7dea:	703b      	strb	r3, [r7, #0]
}
    7dec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 1) return 0;
    7df0:	f04f 0800 	mov.w	r8, #0
}
    7df4:	4640      	mov	r0, r8
    7df6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    7dfa:	2301      	movs	r3, #1
    7dfc:	f88b 300c 	strb.w	r3, [fp, #12]
    7e00:	e7f1      	b.n	7de6 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    7e02:	bf00      	nop
    7e04:	20022554 	.word	0x20022554
    7e08:	00007d7d 	.word	0x00007d7d

00007e0c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    7e0c:	49a2      	ldr	r1, [pc, #648]	; (8098 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7e0e:	4ba3      	ldr	r3, [pc, #652]	; (809c <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    7e10:	4288      	cmp	r0, r1
{
    7e12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    7e16:	4ca2      	ldr	r4, [pc, #648]	; (80a0 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7e18:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    7e1a:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    7e1c:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    7e20:	d91b      	bls.n	7e5a <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    7e22:	4ba0      	ldr	r3, [pc, #640]	; (80a4 <set_arm_clock+0x298>)
    7e24:	4298      	cmp	r0, r3
    7e26:	f240 8102 	bls.w	802e <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    7e2a:	1ac3      	subs	r3, r0, r3
    7e2c:	499e      	ldr	r1, [pc, #632]	; (80a8 <set_arm_clock+0x29c>)
    7e2e:	0a1b      	lsrs	r3, r3, #8
    7e30:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7e34:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    7e38:	09db      	lsrs	r3, r3, #7
    7e3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7e3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7e42:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7e46:	428b      	cmp	r3, r1
    7e48:	bf28      	it	cs
    7e4a:	460b      	movcs	r3, r1
    7e4c:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    7e50:	4b96      	ldr	r3, [pc, #600]	; (80ac <set_arm_clock+0x2a0>)
    7e52:	fba3 3707 	umull	r3, r7, r3, r7
    7e56:	08ff      	lsrs	r7, r7, #3
    7e58:	e004      	b.n	7e64 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    7e5a:	4f95      	ldr	r7, [pc, #596]	; (80b0 <set_arm_clock+0x2a4>)
    7e5c:	42b8      	cmp	r0, r7
    7e5e:	bf8c      	ite	hi
    7e60:	270e      	movhi	r7, #14
    7e62:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7e64:	498d      	ldr	r1, [pc, #564]	; (809c <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7e66:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7e6a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7e6e:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7e70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    7e74:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7e78:	d20c      	bcs.n	7e94 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    7e7a:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    7e7e:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7e82:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    7e86:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7e8a:	680b      	ldr	r3, [r1, #0]
    7e8c:	2b00      	cmp	r3, #0
    7e8e:	dafc      	bge.n	7e8a <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7e90:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    7e94:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    7e98:	d124      	bne.n	7ee4 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    7e9a:	4986      	ldr	r1, [pc, #536]	; (80b4 <set_arm_clock+0x2a8>)
    7e9c:	690c      	ldr	r4, [r1, #16]
    7e9e:	4986      	ldr	r1, [pc, #536]	; (80b8 <set_arm_clock+0x2ac>)
    7ea0:	43a1      	bics	r1, r4
    7ea2:	f000 80ea 	beq.w	807a <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7ea6:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    7eaa:	4634      	mov	r4, r6
    7eac:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    7eb0:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    7eb4:	d004      	beq.n	7ec0 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    7eb6:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    7eba:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    7ebc:	4b77      	ldr	r3, [pc, #476]	; (809c <set_arm_clock+0x290>)
    7ebe:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7ec0:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    7ec4:	d007      	beq.n	7ed6 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    7ec6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    7eca:	4974      	ldr	r1, [pc, #464]	; (809c <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    7ecc:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    7ece:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    7ed0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    7ed2:	071a      	lsls	r2, r3, #28
    7ed4:	d4fc      	bmi.n	7ed0 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    7ed6:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    7eda:	4a70      	ldr	r2, [pc, #448]	; (809c <set_arm_clock+0x290>)
    7edc:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7ede:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7ee0:	069b      	lsls	r3, r3, #26
    7ee2:	d4fc      	bmi.n	7ede <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    7ee4:	4c75      	ldr	r4, [pc, #468]	; (80bc <set_arm_clock+0x2b0>)
    7ee6:	42a0      	cmp	r0, r4
    7ee8:	f200 80ce 	bhi.w	8088 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    7eec:	f04f 0c01 	mov.w	ip, #1
    7ef0:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    7ef2:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    7ef4:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    7ef8:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    7efc:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7f00:	42a2      	cmp	r2, r4
    7f02:	d818      	bhi.n	7f36 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    7f04:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    7f08:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    7f0c:	f040 808d 	bne.w	802a <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    7f10:	f1bc 0f04 	cmp.w	ip, #4
    7f14:	f200 8091 	bhi.w	803a <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    7f18:	180a      	adds	r2, r1, r0
    7f1a:	42a2      	cmp	r2, r4
    7f1c:	f200 80a4 	bhi.w	8068 <set_arm_clock+0x25c>
    7f20:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    7f24:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    7f26:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7f2a:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    7f2e:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7f32:	42a2      	cmp	r2, r4
    7f34:	d9e6      	bls.n	7f04 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7f36:	f10c 31ff 	add.w	r1, ip, #4294967295
    7f3a:	028c      	lsls	r4, r1, #10
    7f3c:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7f40:	485f      	ldr	r0, [pc, #380]	; (80c0 <set_arm_clock+0x2b4>)
    7f42:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    7f44:	4a5f      	ldr	r2, [pc, #380]	; (80c4 <set_arm_clock+0x2b8>)
    7f46:	4290      	cmp	r0, r2
    7f48:	d97f      	bls.n	804a <set_arm_clock+0x23e>
    7f4a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 80f0 <set_arm_clock+0x2e4>
    7f4e:	226c      	movs	r2, #108	; 0x6c
    7f50:	485d      	ldr	r0, [pc, #372]	; (80c8 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7f52:	4d58      	ldr	r5, [pc, #352]	; (80b4 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    7f54:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7f58:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    7f5c:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7f60:	f8df c190 	ldr.w	ip, [pc, #400]	; 80f4 <set_arm_clock+0x2e8>
    7f64:	ea0e 0c0c 	and.w	ip, lr, ip
    7f68:	45d4      	cmp	ip, sl
    7f6a:	d009      	beq.n	7f80 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    7f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    7f70:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    7f74:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    7f78:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    7f7a:	682a      	ldr	r2, [r5, #0]
    7f7c:	2a00      	cmp	r2, #0
    7f7e:	dafc      	bge.n	7f7a <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    7f80:	4a46      	ldr	r2, [pc, #280]	; (809c <set_arm_clock+0x290>)
    7f82:	6915      	ldr	r5, [r2, #16]
    7f84:	f005 0507 	and.w	r5, r5, #7
    7f88:	429d      	cmp	r5, r3
    7f8a:	d003      	beq.n	7f94 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    7f8c:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    7f8e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7f90:	03dd      	lsls	r5, r3, #15
    7f92:	d4fc      	bmi.n	7f8e <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7f94:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    7f98:	d009      	beq.n	7fae <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    7f9a:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7f9e:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    7fa2:	4a3e      	ldr	r2, [pc, #248]	; (809c <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7fa4:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    7fa6:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    7fa8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7faa:	0799      	lsls	r1, r3, #30
    7fac:	d4fc      	bmi.n	7fa8 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7fae:	4947      	ldr	r1, [pc, #284]	; (80cc <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    7fb0:	4a47      	ldr	r2, [pc, #284]	; (80d0 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7fb2:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    7fb4:	4291      	cmp	r1, r2
    7fb6:	d83c      	bhi.n	8032 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7fb8:	4b46      	ldr	r3, [pc, #280]	; (80d4 <set_arm_clock+0x2c8>)
    7fba:	09c9      	lsrs	r1, r1, #7
    7fbc:	fba3 3101 	umull	r3, r1, r3, r1
    7fc0:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    7fc2:	1e4b      	subs	r3, r1, #1
    7fc4:	021b      	lsls	r3, r3, #8
    7fc6:	ea86 0203 	eor.w	r2, r6, r3
    7fca:	f412 7f40 	tst.w	r2, #768	; 0x300
    7fce:	d006      	beq.n	7fde <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    7fd0:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    7fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    7fd8:	4a30      	ldr	r2, [pc, #192]	; (809c <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    7fda:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    7fdc:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    7fde:	4a2f      	ldr	r2, [pc, #188]	; (809c <set_arm_clock+0x290>)
    7fe0:	6953      	ldr	r3, [r2, #20]
    7fe2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    7fe6:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7fe8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7fea:	069b      	lsls	r3, r3, #26
    7fec:	d4fc      	bmi.n	7fe8 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7fee:	4b3a      	ldr	r3, [pc, #232]	; (80d8 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7ff0:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7ff2:	fba3 2300 	umull	r2, r3, r3, r0
    7ff6:	f04f 32ff 	mov.w	r2, #4294967295
    7ffa:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    7ffe:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8002:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    8006:	4a35      	ldr	r2, [pc, #212]	; (80dc <set_arm_clock+0x2d0>)
    8008:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    800a:	4a35      	ldr	r2, [pc, #212]	; (80e0 <set_arm_clock+0x2d4>)
    800c:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    800e:	4a35      	ldr	r2, [pc, #212]	; (80e4 <set_arm_clock+0x2d8>)
    8010:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    8012:	d208      	bcs.n	8026 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    8014:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    8018:	4a21      	ldr	r2, [pc, #132]	; (80a0 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    801a:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    801e:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8020:	6813      	ldr	r3, [r2, #0]
    8022:	2b00      	cmp	r3, #0
    8024:	dafc      	bge.n	8020 <set_arm_clock+0x214>
	}

	return frequency;
}
    8026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    802a:	4673      	mov	r3, lr
    802c:	e762      	b.n	7ef4 <set_arm_clock+0xe8>
    802e:	2712      	movs	r7, #18
    8030:	e718      	b.n	7e64 <set_arm_clock+0x58>
    8032:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    8036:	2104      	movs	r1, #4
    8038:	e7c5      	b.n	7fc6 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    803a:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    803e:	4820      	ldr	r0, [pc, #128]	; (80c0 <set_arm_clock+0x2b4>)
    8040:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    8042:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    8044:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    8046:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    804a:	4a27      	ldr	r2, [pc, #156]	; (80e8 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    804c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80f8 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    8050:	fba2 2000 	umull	r2, r0, r2, r0
    8054:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    8056:	4825      	ldr	r0, [pc, #148]	; (80ec <set_arm_clock+0x2e0>)
    8058:	2a36      	cmp	r2, #54	; 0x36
    805a:	bf38      	it	cc
    805c:	2236      	movcc	r2, #54	; 0x36
    805e:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    8062:	ea42 0a0a 	orr.w	sl, r2, sl
    8066:	e774      	b.n	7f52 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    8068:	ea4f 248c 	mov.w	r4, ip, lsl #10
    806c:	2300      	movs	r3, #0
    806e:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    8072:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    8076:	46ac      	mov	ip, r5
    8078:	e762      	b.n	7f40 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    807a:	461d      	mov	r5, r3
    807c:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    8080:	4611      	mov	r1, r2
    8082:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    8086:	e713      	b.n	7eb0 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    8088:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    808a:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    808e:	4602      	mov	r2, r0
    8090:	4631      	mov	r1, r6
    8092:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    8094:	46e6      	mov	lr, ip
    8096:	e753      	b.n	7f40 <set_arm_clock+0x134>
    8098:	1f78a400 	.word	0x1f78a400
    809c:	400fc000 	.word	0x400fc000
    80a0:	40080000 	.word	0x40080000
    80a4:	23c34600 	.word	0x23c34600
    80a8:	004cb223 	.word	0x004cb223
    80ac:	51eb851f 	.word	0x51eb851f
    80b0:	016e3600 	.word	0x016e3600
    80b4:	400d8000 	.word	0x400d8000
    80b8:	80003040 	.word	0x80003040
    80bc:	269fb1ff 	.word	0x269fb1ff
    80c0:	005b8d80 	.word	0x005b8d80
    80c4:	4df67eff 	.word	0x4df67eff
    80c8:	4d3f6400 	.word	0x4d3f6400
    80cc:	08f0d17f 	.word	0x08f0d17f
    80d0:	2cb4177f 	.word	0x2cb4177f
    80d4:	00e5109f 	.word	0x00e5109f
    80d8:	431bde83 	.word	0x431bde83
    80dc:	20008868 	.word	0x20008868
    80e0:	20008864 	.word	0x20008864
    80e4:	20022080 	.word	0x20022080
    80e8:	165e9f81 	.word	0x165e9f81
    80ec:	00b71b00 	.word	0x00b71b00
    80f0:	8000206c 	.word	0x8000206c
    80f4:	8001307f 	.word	0x8001307f
    80f8:	80002000 	.word	0x80002000

000080fc <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    80fc:	b900      	cbnz	r0, 8100 <delay+0x4>
    80fe:	4770      	bx	lr
{
    8100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8104:	2101      	movs	r1, #1
    8106:	4681      	mov	r9, r0
    8108:	4c21      	ldr	r4, [pc, #132]	; (8190 <delay+0x94>)
    810a:	4d22      	ldr	r5, [pc, #136]	; (8194 <delay+0x98>)
    810c:	4e22      	ldr	r6, [pc, #136]	; (8198 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    810e:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    8112:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    8114:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8116:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    811a:	2b00      	cmp	r3, #0
    811c:	d1f7      	bne.n	810e <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    811e:	491f      	ldr	r1, [pc, #124]	; (819c <delay+0xa0>)
    8120:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    8122:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8126:	f8df a078 	ldr.w	sl, [pc, #120]	; 81a0 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    812a:	1a1b      	subs	r3, r3, r0
    812c:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    812e:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8132:	f8da 2000 	ldr.w	r2, [sl]
    8136:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    813a:	455a      	cmp	r2, fp
    813c:	bf94      	ite	ls
    813e:	4490      	addls	r8, r2
    8140:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    8142:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    8146:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    8148:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    814a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    814e:	2b00      	cmp	r3, #0
    8150:	d1f7      	bne.n	8142 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    8152:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8154:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    8158:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    815a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    815e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    8162:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    8166:	bf94      	ite	ls
    8168:	4462      	addls	r2, ip
    816a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    816e:	eba2 0208 	sub.w	r2, r2, r8
    8172:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    8176:	d306      	bcc.n	8186 <delay+0x8a>
			if (--msec == 0) return;
    8178:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    817c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    8180:	d1df      	bne.n	8142 <delay+0x46>
}
    8182:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    8186:	f002 f8e3 	bl	a350 <yield>
		while ((micros() - start) >= 1000) {
    818a:	4904      	ldr	r1, [pc, #16]	; (819c <delay+0xa0>)
    818c:	e7d9      	b.n	8142 <delay+0x46>
    818e:	bf00      	nop
    8190:	20022558 	.word	0x20022558
    8194:	20022554 	.word	0x20022554
    8198:	20022550 	.word	0x20022550
    819c:	e0001000 	.word	0xe0001000
    81a0:	20022080 	.word	0x20022080

000081a4 <micros>:
{
    81a4:	b430      	push	{r4, r5}
    81a6:	4b0f      	ldr	r3, [pc, #60]	; (81e4 <micros+0x40>)
    81a8:	f04f 0c01 	mov.w	ip, #1
    81ac:	4d0e      	ldr	r5, [pc, #56]	; (81e8 <micros+0x44>)
    81ae:	4c0f      	ldr	r4, [pc, #60]	; (81ec <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    81b0:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    81b4:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    81b6:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    81b8:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    81bc:	2a00      	cmp	r2, #0
    81be:	d1f7      	bne.n	81b0 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    81c0:	4b0b      	ldr	r3, [pc, #44]	; (81f0 <micros+0x4c>)
    81c2:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    81c4:	4a0b      	ldr	r2, [pc, #44]	; (81f4 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    81c6:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    81c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    81cc:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    81ce:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    81d2:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    81d6:	bc30      	pop	{r4, r5}
    81d8:	428a      	cmp	r2, r1
    81da:	bf94      	ite	ls
    81dc:	1880      	addls	r0, r0, r2
    81de:	1840      	addhi	r0, r0, r1
    81e0:	4770      	bx	lr
    81e2:	bf00      	nop
    81e4:	20022558 	.word	0x20022558
    81e8:	20022554 	.word	0x20022554
    81ec:	20022550 	.word	0x20022550
    81f0:	e0001000 	.word	0xe0001000
    81f4:	20022080 	.word	0x20022080

000081f8 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    81f8:	2836      	cmp	r0, #54	; 0x36
    81fa:	d816      	bhi.n	822a <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    81fc:	0102      	lsls	r2, r0, #4
    81fe:	4b10      	ldr	r3, [pc, #64]	; (8240 <digitalWrite+0x48>)
    8200:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    8204:	589b      	ldr	r3, [r3, r2]
{
    8206:	b410      	push	{r4}
	mask = p->mask;
    8208:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    820a:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    820c:	4214      	tst	r4, r2
    820e:	d005      	beq.n	821c <digitalWrite+0x24>
		if (val) {
    8210:	b961      	cbnz	r1, 822c <digitalWrite+0x34>
		}
	}
}
    8212:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    8216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    821a:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    821c:	6883      	ldr	r3, [r0, #8]
		if (val) {
    821e:	b151      	cbz	r1, 8236 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8220:	4a08      	ldr	r2, [pc, #32]	; (8244 <digitalWrite+0x4c>)
}
    8222:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8226:	601a      	str	r2, [r3, #0]
}
    8228:	4770      	bx	lr
    822a:	4770      	bx	lr
    822c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    8230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    8234:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8236:	4a04      	ldr	r2, [pc, #16]	; (8248 <digitalWrite+0x50>)
}
    8238:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    823c:	601a      	str	r2, [r3, #0]
}
    823e:	4770      	bx	lr
    8240:	20007964 	.word	0x20007964
    8244:	0001f038 	.word	0x0001f038
    8248:	00013038 	.word	0x00013038

0000824c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    824c:	2836      	cmp	r0, #54	; 0x36
    824e:	d829      	bhi.n	82a4 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    8250:	4b16      	ldr	r3, [pc, #88]	; (82ac <pinMode+0x60>)
    8252:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8254:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    8256:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    825a:	589a      	ldr	r2, [r3, r2]
{
    825c:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    825e:	6853      	ldr	r3, [r2, #4]
    8260:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8262:	d00e      	beq.n	8282 <pinMode+0x36>
    8264:	2904      	cmp	r1, #4
    8266:	d00c      	beq.n	8282 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8268:	ea23 0304 	bic.w	r3, r3, r4
    826c:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    826e:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    8270:	b1a9      	cbz	r1, 829e <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    8272:	2902      	cmp	r1, #2
    8274:	d017      	beq.n	82a6 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    8276:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8278:	bf0c      	ite	eq
    827a:	4a0d      	ldreq	r2, [pc, #52]	; (82b0 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    827c:	4a0d      	ldrne	r2, [pc, #52]	; (82b4 <pinMode+0x68>)
    827e:	601a      	str	r2, [r3, #0]
    8280:	e007      	b.n	8292 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    8282:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    8284:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    8286:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8288:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    828a:	d008      	beq.n	829e <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    828c:	f640 0238 	movw	r2, #2104	; 0x838
    8290:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    8292:	6843      	ldr	r3, [r0, #4]
    8294:	2215      	movs	r2, #21
}
    8296:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    829a:	601a      	str	r2, [r3, #0]
}
    829c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    829e:	2238      	movs	r2, #56	; 0x38
    82a0:	601a      	str	r2, [r3, #0]
    82a2:	e7f6      	b.n	8292 <pinMode+0x46>
    82a4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    82a6:	4a04      	ldr	r2, [pc, #16]	; (82b8 <pinMode+0x6c>)
    82a8:	601a      	str	r2, [r3, #0]
    82aa:	e7f2      	b.n	8292 <pinMode+0x46>
    82ac:	20007964 	.word	0x20007964
    82b0:	00013038 	.word	0x00013038
    82b4:	00010038 	.word	0x00010038
    82b8:	0001f038 	.word	0x0001f038

000082bc <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    82bc:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    82be:	f7f8 f8ad 	bl	41c <setup>
	while (1) {
		loop();
    82c2:	f7f7 fed3 	bl	6c <loop>
		yield();
    82c6:	f002 f843 	bl	a350 <yield>
	while (1) {
    82ca:	e7fa      	b.n	82c2 <main+0x6>

000082cc <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    82cc:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    82ce:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    82d2:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    82d6:	d16d      	bne.n	83b4 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    82d8:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    82da:	d341      	bcc.n	8360 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    82dc:	f851 3b04 	ldr.w	r3, [r1], #4
    82e0:	f840 3b04 	str.w	r3, [r0], #4
    82e4:	f851 3b04 	ldr.w	r3, [r1], #4
    82e8:	f840 3b04 	str.w	r3, [r0], #4
    82ec:	f851 3b04 	ldr.w	r3, [r1], #4
    82f0:	f840 3b04 	str.w	r3, [r0], #4
    82f4:	f851 3b04 	ldr.w	r3, [r1], #4
    82f8:	f840 3b04 	str.w	r3, [r0], #4
    82fc:	f851 3b04 	ldr.w	r3, [r1], #4
    8300:	f840 3b04 	str.w	r3, [r0], #4
    8304:	f851 3b04 	ldr.w	r3, [r1], #4
    8308:	f840 3b04 	str.w	r3, [r0], #4
    830c:	f851 3b04 	ldr.w	r3, [r1], #4
    8310:	f840 3b04 	str.w	r3, [r0], #4
    8314:	f851 3b04 	ldr.w	r3, [r1], #4
    8318:	f840 3b04 	str.w	r3, [r0], #4
    831c:	f851 3b04 	ldr.w	r3, [r1], #4
    8320:	f840 3b04 	str.w	r3, [r0], #4
    8324:	f851 3b04 	ldr.w	r3, [r1], #4
    8328:	f840 3b04 	str.w	r3, [r0], #4
    832c:	f851 3b04 	ldr.w	r3, [r1], #4
    8330:	f840 3b04 	str.w	r3, [r0], #4
    8334:	f851 3b04 	ldr.w	r3, [r1], #4
    8338:	f840 3b04 	str.w	r3, [r0], #4
    833c:	f851 3b04 	ldr.w	r3, [r1], #4
    8340:	f840 3b04 	str.w	r3, [r0], #4
    8344:	f851 3b04 	ldr.w	r3, [r1], #4
    8348:	f840 3b04 	str.w	r3, [r0], #4
    834c:	f851 3b04 	ldr.w	r3, [r1], #4
    8350:	f840 3b04 	str.w	r3, [r0], #4
    8354:	f851 3b04 	ldr.w	r3, [r1], #4
    8358:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    835c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    835e:	d2bd      	bcs.n	82dc <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8360:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    8362:	d311      	bcc.n	8388 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8364:	f851 3b04 	ldr.w	r3, [r1], #4
    8368:	f840 3b04 	str.w	r3, [r0], #4
    836c:	f851 3b04 	ldr.w	r3, [r1], #4
    8370:	f840 3b04 	str.w	r3, [r0], #4
    8374:	f851 3b04 	ldr.w	r3, [r1], #4
    8378:	f840 3b04 	str.w	r3, [r0], #4
    837c:	f851 3b04 	ldr.w	r3, [r1], #4
    8380:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    8384:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    8386:	d2ed      	bcs.n	8364 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8388:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    838a:	d305      	bcc.n	8398 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    838c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8390:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    8394:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    8396:	d2f9      	bcs.n	838c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8398:	3204      	adds	r2, #4
	beq	.Ldone
    839a:	d008      	beq.n	83ae <memcpy+0xe2>

	lsls	r2, r2, #31
    839c:	07d2      	lsls	r2, r2, #31
	itt ne
    839e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    83a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    83a4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    83a8:	d301      	bcc.n	83ae <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    83aa:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    83ac:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    83ae:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    83b0:	4770      	bx	lr
    83b2:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    83b4:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    83b6:	d313      	bcc.n	83e0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    83b8:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    83ba:	d08d      	beq.n	82d8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    83bc:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    83c0:	d08a      	beq.n	82d8 <memcpy+0xc>

	rsb	r3, #4
    83c2:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    83c6:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    83c8:	07db      	lsls	r3, r3, #31
	itt ne
    83ca:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    83cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    83d0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    83d4:	d380      	bcc.n	82d8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    83d6:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    83da:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    83de:	e77b      	b.n	82d8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    83e0:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    83e2:	d3d9      	bcc.n	8398 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    83e4:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    83e6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    83ea:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    83ee:	d2f9      	bcs.n	83e4 <memcpy+0x118>

	ldrb	r3, [r1]
    83f0:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    83f2:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    83f4:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    83f6:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    83f8:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    83fa:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    83fc:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    83fe:	4770      	bx	lr

00008400 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    8400:	f002 bac4 	b.w	a98c <malloc>

00008404 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    8404:	f002 baca 	b.w	a99c <free>

00008408 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    8408:	f101 3cff 	add.w	ip, r1, #4294967295
{
    840c:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    840e:	4666      	mov	r6, ip
	int i=0, j;
    8410:	2400      	movs	r4, #0
    8412:	e000      	b.n	8416 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    8414:	3401      	adds	r4, #1
		digit = val % radix;
    8416:	fbb0 f5f2 	udiv	r5, r0, r2
    841a:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    841e:	2b09      	cmp	r3, #9
    8420:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    8424:	f103 0330 	add.w	r3, r3, #48	; 0x30
    8428:	fa5f fe8e 	uxtb.w	lr, lr
    842c:	bf98      	it	ls
    842e:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    8432:	4290      	cmp	r0, r2
		val /= radix;
    8434:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8436:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    843a:	d2eb      	bcs.n	8414 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    843c:	1c63      	adds	r3, r4, #1
    843e:	2200      	movs	r2, #0
    8440:	18c8      	adds	r0, r1, r3
    8442:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    8444:	b17c      	cbz	r4, 8466 <ultoa+0x5e>
		t = buf[j];
    8446:	4662      	mov	r2, ip
    8448:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    844c:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    8450:	eba1 030c 	sub.w	r3, r1, ip
    8454:	3202      	adds	r2, #2
		buf[j] = buf[i];
    8456:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    845a:	3b01      	subs	r3, #1
    845c:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    845e:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    8460:	4423      	add	r3, r4
    8462:	429a      	cmp	r2, r3
    8464:	dbef      	blt.n	8446 <ultoa+0x3e>
	}
	return buf;
}
    8466:	4608      	mov	r0, r1
    8468:	bd70      	pop	{r4, r5, r6, pc}
    846a:	bf00      	nop

0000846c <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    846c:	4a07      	ldr	r2, [pc, #28]	; (848c <rtc_get+0x20>)
    846e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    8470:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    8472:	4619      	mov	r1, r3
    8474:	4684      	mov	ip, r0
    8476:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    8478:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    847a:	4299      	cmp	r1, r3
    847c:	d1f9      	bne.n	8472 <rtc_get+0x6>
    847e:	4584      	cmp	ip, r0
    8480:	d1f7      	bne.n	8472 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    8482:	0bdb      	lsrs	r3, r3, #15
}
    8484:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    8488:	4770      	bx	lr
    848a:	bf00      	nop
    848c:	400d4000 	.word	0x400d4000

00008490 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    8490:	4910      	ldr	r1, [pc, #64]	; (84d4 <rtc_set+0x44>)
    8492:	688b      	ldr	r3, [r1, #8]
    8494:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    8498:	608b      	str	r3, [r1, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    849a:	688b      	ldr	r3, [r1, #8]
    849c:	07db      	lsls	r3, r3, #31
    849e:	d4fc      	bmi.n	849a <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    84a0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    84a2:	4a0c      	ldr	r2, [pc, #48]	; (84d4 <rtc_set+0x44>)
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    84a4:	f023 0301 	bic.w	r3, r3, #1
    84a8:	638b      	str	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    84aa:	6b93      	ldr	r3, [r2, #56]	; 0x38
    84ac:	07d9      	lsls	r1, r3, #31
    84ae:	d4fc      	bmi.n	84aa <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    84b0:	03c3      	lsls	r3, r0, #15
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    84b2:	4908      	ldr	r1, [pc, #32]	; (84d4 <rtc_set+0x44>)
	SNVS_LPSRTCMR = t >> 17;
    84b4:	0c40      	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    84b6:	6553      	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    84b8:	6510      	str	r0, [r2, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    84ba:	6b93      	ldr	r3, [r2, #56]	; 0x38
    84bc:	f043 0301 	orr.w	r3, r3, #1
    84c0:	6393      	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    84c2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    84c4:	07db      	lsls	r3, r3, #31
    84c6:	d5fc      	bpl.n	84c2 <rtc_set+0x32>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    84c8:	688b      	ldr	r3, [r1, #8]
    84ca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    84ce:	608b      	str	r3, [r1, #8]
}
    84d0:	4770      	bx	lr
    84d2:	bf00      	nop
    84d4:	400d4000 	.word	0x400d4000

000084d8 <unused_interrupt_vector>:
	__disable_irq();
    84d8:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    84da:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    84de:	4c4f      	ldr	r4, [pc, #316]	; (861c <unused_interrupt_vector+0x144>)
    84e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    84e4:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    84e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    84ec:	4e4c      	ldr	r6, [pc, #304]	; (8620 <unused_interrupt_vector+0x148>)
	while (p < end) {
    84ee:	4d4d      	ldr	r5, [pc, #308]	; (8624 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    84f0:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    84f4:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    84f8:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    84fc:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    8500:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    8504:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    8508:	6993      	ldr	r3, [r2, #24]
    850a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    850e:	69d3      	ldr	r3, [r2, #28]
    8510:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    8514:	f000 f8d2 	bl	86bc <tempmonGetTemp>
    8518:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    851c:	f7ff ffa6 	bl	846c <rtc_get>
	info->len = sizeof(*info) / 4;
    8520:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    8522:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    8526:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    852a:	460b      	mov	r3, r1
    852c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    8530:	493d      	ldr	r1, [pc, #244]	; (8628 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    8532:	1d30      	adds	r0, r6, #4
    8534:	405a      	eors	r2, r3
    8536:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    8538:	f002 0301 	and.w	r3, r2, #1
    853c:	3c01      	subs	r4, #1
    853e:	fb01 f303 	mul.w	r3, r1, r3
    8542:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    8546:	d1f7      	bne.n	8538 <unused_interrupt_vector+0x60>
	while (p < end) {
    8548:	42a8      	cmp	r0, r5
    854a:	d002      	beq.n	8552 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    854c:	6873      	ldr	r3, [r6, #4]
    854e:	4606      	mov	r6, r0
    8550:	e7ef      	b.n	8532 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    8552:	4b32      	ldr	r3, [pc, #200]	; (861c <unused_interrupt_vector+0x144>)
    8554:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    8558:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    855c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8560:	492f      	ldr	r1, [pc, #188]	; (8620 <unused_interrupt_vector+0x148>)
    8562:	4a32      	ldr	r2, [pc, #200]	; (862c <unused_interrupt_vector+0x154>)
    8564:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    8568:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    856c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8570:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    8574:	4a2e      	ldr	r2, [pc, #184]	; (8630 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    8576:	2502      	movs	r5, #2
    8578:	482e      	ldr	r0, [pc, #184]	; (8634 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    857a:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    857c:	492e      	ldr	r1, [pc, #184]	; (8638 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    857e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    8582:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    8584:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    8586:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8588:	482c      	ldr	r0, [pc, #176]	; (863c <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    858a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    858e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8592:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8594:	680b      	ldr	r3, [r1, #0]
    8596:	4283      	cmp	r3, r0
    8598:	d83d      	bhi.n	8616 <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    859a:	4d26      	ldr	r5, [pc, #152]	; (8634 <unused_interrupt_vector+0x15c>)
    859c:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    859e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    85a2:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    85a6:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    85a8:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    85aa:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    85ae:	4924      	ldr	r1, [pc, #144]	; (8640 <unused_interrupt_vector+0x168>)
    85b0:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    85b4:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    85b8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    85bc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    85c0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    85c4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    85c8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    85cc:	e001      	b.n	85d2 <unused_interrupt_vector+0xfa>
		usb_isr();
    85ce:	f000 f9cb 	bl	8968 <usb_isr>
		if (PIT_TFLG0) {
    85d2:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    85d6:	2b00      	cmp	r3, #0
    85d8:	d0f9      	beq.n	85ce <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    85da:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    85dc:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    85e0:	2c4f      	cmp	r4, #79	; 0x4f
    85e2:	d9f4      	bls.n	85ce <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    85e4:	4b17      	ldr	r3, [pc, #92]	; (8644 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    85e6:	2002      	movs	r0, #2
    85e8:	4917      	ldr	r1, [pc, #92]	; (8648 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    85ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    85ee:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    85f2:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    85f4:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    85f8:	b93b      	cbnz	r3, 860a <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    85fa:	4814      	ldr	r0, [pc, #80]	; (864c <unused_interrupt_vector+0x174>)
    85fc:	4914      	ldr	r1, [pc, #80]	; (8650 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    85fe:	4a0d      	ldr	r2, [pc, #52]	; (8634 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    8600:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8602:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    8606:	2b00      	cmp	r3, #0
    8608:	d0fa      	beq.n	8600 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    860a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    860e:	4a11      	ldr	r2, [pc, #68]	; (8654 <unused_interrupt_vector+0x17c>)
    8610:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    8614:	e7fe      	b.n	8614 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8616:	f7ff fbf9 	bl	7e0c <set_arm_clock>
    861a:	e7be      	b.n	859a <unused_interrupt_vector+0xc2>
    861c:	2027ff00 	.word	0x2027ff00
    8620:	2027ff80 	.word	0x2027ff80
    8624:	2027ffa8 	.word	0x2027ffa8
    8628:	edb88320 	.word	0xedb88320
    862c:	2027ffa0 	.word	0x2027ffa0
    8630:	400fc000 	.word	0x400fc000
    8634:	40084000 	.word	0x40084000
    8638:	20008868 	.word	0x20008868
    863c:	0bcd3d80 	.word	0x0bcd3d80
    8640:	00249f00 	.word	0x00249f00
    8644:	400d9000 	.word	0x400d9000
    8648:	402e0000 	.word	0x402e0000
    864c:	400f8000 	.word	0x400f8000
    8650:	0bad00f1 	.word	0x0bad00f1
    8654:	05fa0004 	.word	0x05fa0004

00008658 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    8658:	490a      	ldr	r1, [pc, #40]	; (8684 <_sbrk+0x2c>)
    865a:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    865c:	b138      	cbz	r0, 866e <_sbrk+0x16>
{
    865e:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    8660:	1813      	adds	r3, r2, r0
    8662:	4809      	ldr	r0, [pc, #36]	; (8688 <_sbrk+0x30>)
    8664:	4283      	cmp	r3, r0
    8666:	d804      	bhi.n	8672 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    8668:	4610      	mov	r0, r2
                __brkval = prev + incr;
    866a:	600b      	str	r3, [r1, #0]
}
    866c:	bd08      	pop	{r3, pc}
    866e:	4610      	mov	r0, r2
    8670:	4770      	bx	lr
                        errno = ENOMEM;
    8672:	f004 f9f9 	bl	ca68 <__errno>
    8676:	230c      	movs	r3, #12
                        return (void *)-1;
    8678:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    867c:	6003      	str	r3, [r0, #0]
}
    867e:	4610      	mov	r0, r2
    8680:	bd08      	pop	{r3, pc}
    8682:	bf00      	nop
    8684:	20008894 	.word	0x20008894
    8688:	20280000 	.word	0x20280000

0000868c <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    868c:	2000      	movs	r0, #0
    868e:	4770      	bx	lr

00008690 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    8690:	f04f 30ff 	mov.w	r0, #4294967295
    8694:	4770      	bx	lr
    8696:	bf00      	nop

00008698 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    8698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    869c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    869e:	604b      	str	r3, [r1, #4]
}
    86a0:	4770      	bx	lr
    86a2:	bf00      	nop

000086a4 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    86a4:	2001      	movs	r0, #1
    86a6:	4770      	bx	lr

000086a8 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    86a8:	f04f 30ff 	mov.w	r0, #4294967295
    86ac:	4770      	bx	lr
    86ae:	bf00      	nop

000086b0 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    86b0:	bf30      	wfi
    86b2:	e7fd      	b.n	86b0 <__cxa_pure_virtual>

000086b4 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    86b4:	bf30      	wfi
    86b6:	e7fd      	b.n	86b4 <abort>

000086b8 <Panic_Temp_isr>:
  unused_interrupt_vector();
    86b8:	f7ff bf0e 	b.w	84d8 <unused_interrupt_vector>

000086bc <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    86bc:	4a12      	ldr	r2, [pc, #72]	; (8708 <tempmonGetTemp+0x4c>)
    86be:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    86c2:	075b      	lsls	r3, r3, #29
    86c4:	d5fb      	bpl.n	86be <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    86c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    86ca:	4810      	ldr	r0, [pc, #64]	; (870c <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    86cc:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    86d0:	490f      	ldr	r1, [pc, #60]	; (8710 <tempmonGetTemp+0x54>)
    86d2:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    86d6:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    86da:	ed91 6a00 	vldr	s12, [r1]
    86de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    86e2:	4a0c      	ldr	r2, [pc, #48]	; (8714 <tempmonGetTemp+0x58>)
    86e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    86e8:	4b0b      	ldr	r3, [pc, #44]	; (8718 <tempmonGetTemp+0x5c>)
    86ea:	edd2 6a00 	vldr	s13, [r2]
    86ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
    86f2:	ed93 7a00 	vldr	s14, [r3]
    86f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    86fa:	ee67 7a86 	vmul.f32	s15, s15, s12
    86fe:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    8702:	ee37 0a40 	vsub.f32	s0, s14, s0
    8706:	4770      	bx	lr
    8708:	400d8100 	.word	0x400d8100
    870c:	20022070 	.word	0x20022070
    8710:	20022078 	.word	0x20022078
    8714:	2002207c 	.word	0x2002207c
    8718:	20022074 	.word	0x20022074

0000871c <endpoint0_receive>:
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
    871c:	b430      	push	{r4, r5}
	//printf("rx %lu\n", len);
	if (len > 0) {
    871e:	2900      	cmp	r1, #0
    8720:	d131      	bne.n	8786 <endpoint0_receive+0x6a>
    8722:	4c2b      	ldr	r4, [pc, #172]	; (87d0 <endpoint0_receive+0xb4>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8724:	4b2b      	ldr	r3, [pc, #172]	; (87d4 <endpoint0_receive+0xb8>)
    8726:	2101      	movs	r1, #1
    8728:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    872a:	b1da      	cbz	r2, 8764 <endpoint0_receive+0x48>
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    872c:	492a      	ldr	r1, [pc, #168]	; (87d8 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.pointer0 = 0;
    872e:	2200      	movs	r2, #0
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8730:	f248 0580 	movw	r5, #32896	; 0x8080
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8734:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    8738:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    873a:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    873c:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8740:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8744:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	USB1_ENDPTPRIME |= (1<<16);
    8748:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    874c:	4313      	orrs	r3, r2
    874e:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8752:	4b22      	ldr	r3, [pc, #136]	; (87dc <endpoint0_receive+0xc0>)
	while (USB1_ENDPTPRIME) ;
    8754:	4920      	ldr	r1, [pc, #128]	; (87d8 <endpoint0_receive+0xbc>)
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8756:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    8758:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    875c:	2b00      	cmp	r3, #0
    875e:	d1fb      	bne.n	8758 <endpoint0_receive+0x3c>
}
    8760:	bc30      	pop	{r4, r5}
    8762:	4770      	bx	lr
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8764:	491c      	ldr	r1, [pc, #112]	; (87d8 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8766:	2580      	movs	r5, #128	; 0x80
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8768:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    876c:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    876e:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    8770:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8774:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8778:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    877c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8780:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8784:	e7e5      	b.n	8752 <endpoint0_receive+0x36>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8786:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    8788:	4b15      	ldr	r3, [pc, #84]	; (87e0 <endpoint0_receive+0xc4>)
    878a:	2401      	movs	r4, #1
		endpoint_queue_head[0].status = 0;
    878c:	2500      	movs	r5, #0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    878e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8792:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.next = 1;
    8794:	601c      	str	r4, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8796:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8798:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    879c:	4c0c      	ldr	r4, [pc, #48]	; (87d0 <endpoint0_receive+0xb4>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    879e:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    87a0:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[0].status = 0;
    87a4:	60e5      	str	r5, [r4, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    87a6:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    87a8:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    87ac:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    87b0:	60a3      	str	r3, [r4, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    87b2:	6159      	str	r1, [r3, #20]
		USB1_ENDPTPRIME |= (1<<0);
    87b4:	4908      	ldr	r1, [pc, #32]	; (87d8 <endpoint0_receive+0xbc>)
		endpoint0_transfer_data.pointer4 = addr + 16384;
    87b6:	6198      	str	r0, [r3, #24]
		USB1_ENDPTPRIME |= (1<<0);
    87b8:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    87bc:	f043 0301 	orr.w	r3, r3, #1
    87c0:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    87c4:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    87c8:	2b00      	cmp	r3, #0
    87ca:	d1fb      	bne.n	87c4 <endpoint0_receive+0xa8>
    87cc:	e7aa      	b.n	8724 <endpoint0_receive+0x8>
    87ce:	bf00      	nop
    87d0:	20000000 	.word	0x20000000
    87d4:	200092e0 	.word	0x200092e0
    87d8:	402e0000 	.word	0x402e0000
    87dc:	200216cc 	.word	0x200216cc
    87e0:	20009300 	.word	0x20009300

000087e4 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    87e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    87e6:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    87e8:	b11b      	cbz	r3, 87f2 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    87ea:	6853      	ldr	r3, [r2, #4]
    87ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    87f0:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    87f2:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    87f4:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    87f6:	b33c      	cbz	r4, 8848 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    87f8:	4b1a      	ldr	r3, [pc, #104]	; (8864 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    87fa:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    87fc:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    8800:	420c      	tst	r4, r1
    8802:	d11d      	bne.n	8840 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    8804:	4e18      	ldr	r6, [pc, #96]	; (8868 <schedule_transfer+0x84>)
    8806:	6877      	ldr	r7, [r6, #4]
    8808:	e004      	b.n	8814 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    880a:	6874      	ldr	r4, [r6, #4]
    880c:	1be4      	subs	r4, r4, r7
    880e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    8812:	d20b      	bcs.n	882c <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    8814:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    8818:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    881c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    8820:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8824:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    8828:	0464      	lsls	r4, r4, #17
    882a:	d5ee      	bpl.n	880a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    882c:	400d      	ands	r5, r1
    882e:	d107      	bne.n	8840 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    8830:	4c0c      	ldr	r4, [pc, #48]	; (8864 <schedule_transfer+0x80>)
		endpoint->status = 0;
    8832:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    8836:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    883a:	430b      	orrs	r3, r1
    883c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    8840:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8842:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    8844:	bcf0      	pop	{r4, r5, r6, r7}
    8846:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    8848:	4d06      	ldr	r5, [pc, #24]	; (8864 <schedule_transfer+0x80>)
	endpoint->status = 0;
    884a:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    884e:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    8852:	430b      	orrs	r3, r1
    8854:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    8858:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    885a:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    885c:	b662      	cpsie	i
}
    885e:	bcf0      	pop	{r4, r5, r6, r7}
    8860:	4770      	bx	lr
    8862:	bf00      	nop
    8864:	402e0000 	.word	0x402e0000
    8868:	e0001000 	.word	0xe0001000

0000886c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    886c:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    886e:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    8870:	b19d      	cbz	r5, 889a <run_callbacks+0x2e>
    8872:	4606      	mov	r6, r0
    8874:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    8876:	2400      	movs	r4, #0
    8878:	e003      	b.n	8882 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    887a:	6812      	ldr	r2, [r2, #0]
		count++;
    887c:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    887e:	2a01      	cmp	r2, #1
    8880:	d00c      	beq.n	889c <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    8882:	6853      	ldr	r3, [r2, #4]
    8884:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    8888:	d0f7      	beq.n	887a <run_callbacks+0xe>
			ep->first_transfer = t;
    888a:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    888c:	b12c      	cbz	r4, 889a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    888e:	4628      	mov	r0, r5
		ep->callback_function(first);
    8890:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    8892:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    8894:	4798      	blx	r3
	while (count) {
    8896:	3c01      	subs	r4, #1
    8898:	d1f9      	bne.n	888e <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    889a:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    889c:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    88a0:	e7f4      	b.n	888c <run_callbacks+0x20>
    88a2:	bf00      	nop

000088a4 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    88a4:	b430      	push	{r4, r5}
	if (len > 0) {
    88a6:	b9d9      	cbnz	r1, 88e0 <endpoint0_transmit.constprop.0+0x3c>
    88a8:	4c1f      	ldr	r4, [pc, #124]	; (8928 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    88aa:	4b20      	ldr	r3, [pc, #128]	; (892c <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    88ac:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    88ae:	4a20      	ldr	r2, [pc, #128]	; (8930 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    88b0:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    88b2:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    88b6:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    88b8:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    88ba:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    88be:	2480      	movs	r4, #128	; 0x80
    88c0:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    88c2:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    88c6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    88ca:	481a      	ldr	r0, [pc, #104]	; (8934 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    88cc:	432b      	orrs	r3, r5
    88ce:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    88d2:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    88d4:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    88d8:	2b00      	cmp	r3, #0
    88da:	d1fb      	bne.n	88d4 <endpoint0_transmit.constprop.0+0x30>
}
    88dc:	bc30      	pop	{r4, r5}
    88de:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    88e0:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    88e2:	4b15      	ldr	r3, [pc, #84]	; (8938 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    88e4:	4c10      	ldr	r4, [pc, #64]	; (8928 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    88e6:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    88e8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    88ec:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    88ee:	4a10      	ldr	r2, [pc, #64]	; (8930 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    88f0:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    88f2:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    88f6:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    88f8:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    88fa:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    88fe:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8900:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8902:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8906:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    890a:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    890c:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    890e:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    8910:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    8912:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    8916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    891a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    891e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    8922:	2b00      	cmp	r3, #0
    8924:	d1fb      	bne.n	891e <endpoint0_transmit.constprop.0+0x7a>
    8926:	e7c0      	b.n	88aa <endpoint0_transmit.constprop.0+0x6>
    8928:	20000000 	.word	0x20000000
    892c:	200092e0 	.word	0x200092e0
    8930:	402e0000 	.word	0x402e0000
    8934:	200216cc 	.word	0x200216cc
    8938:	20009300 	.word	0x20009300

0000893c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    893c:	4908      	ldr	r1, [pc, #32]	; (8960 <usb_stop_sof_interrupts+0x24>)
    893e:	2201      	movs	r2, #1
    8940:	780b      	ldrb	r3, [r1, #0]
    8942:	fa02 f000 	lsl.w	r0, r2, r0
    8946:	ea23 0000 	bic.w	r0, r3, r0
    894a:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    894c:	b930      	cbnz	r0, 895c <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    894e:	4a05      	ldr	r2, [pc, #20]	; (8964 <usb_stop_sof_interrupts+0x28>)
    8950:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    8954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8958:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    895c:	4770      	bx	lr
    895e:	bf00      	nop
    8960:	200225f8 	.word	0x200225f8
    8964:	402e0000 	.word	0x402e0000

00008968 <usb_isr>:
{
    8968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    896c:	4ca8      	ldr	r4, [pc, #672]	; (8c10 <usb_isr+0x2a8>)
{
    896e:	b087      	sub	sp, #28
	uint32_t status = USB1_USBSTS;
    8970:	f8d4 6144 	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    8974:	07f1      	lsls	r1, r6, #31
	USB1_USBSTS = status;
    8976:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    897a:	f140 809c 	bpl.w	8ab6 <usb_isr+0x14e>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    897e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    8982:	2b00      	cmp	r3, #0
    8984:	d063      	beq.n	8a4e <usb_isr+0xe6>
    8986:	4da3      	ldr	r5, [pc, #652]	; (8c14 <usb_isr+0x2ac>)
    8988:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8c1c <usb_isr+0x2b4>
		usb_configuration = setup.wValue;
    898c:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8c3c <usb_isr+0x2d4>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    8990:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8c40 <usb_isr+0x2d8>
			USB1_ENDPTSETUPSTAT = setupstatus;
    8994:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    8998:	e9d5 700a 	ldrd	r7, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    899c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    89a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    89a4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    89a8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    89ac:	049b      	lsls	r3, r3, #18
    89ae:	d5f5      	bpl.n	899c <usb_isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    89b0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    89b4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    89b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    89bc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    89c0:	f8c4 21b4 	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    89c4:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    89c8:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    89cc:	d1fa      	bne.n	89c4 <usb_isr+0x5c>
			endpoint0_notify_mask = 0;
    89ce:	b2ba      	uxth	r2, r7
    89d0:	f8c9 3000 	str.w	r3, [r9]
	switch (setup.wRequestAndType) {
    89d4:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
	setup.bothwords = setupdata;
    89d8:	e9cd 7004 	strd	r7, r0, [sp, #16]
	switch (setup.wRequestAndType) {
    89dc:	f000 81b2 	beq.w	8d44 <usb_isr+0x3dc>
    89e0:	f200 80c3 	bhi.w	8b6a <usb_isr+0x202>
    89e4:	f240 3102 	movw	r1, #770	; 0x302
    89e8:	428a      	cmp	r2, r1
    89ea:	f000 8226 	beq.w	8e3a <usb_isr+0x4d2>
    89ee:	f240 80dd 	bls.w	8bac <usb_isr+0x244>
    89f2:	f240 6181 	movw	r1, #1665	; 0x681
    89f6:	428a      	cmp	r2, r1
    89f8:	f200 80ac 	bhi.w	8b54 <usb_isr+0x1ec>
    89fc:	f5b2 6fd0 	cmp.w	r2, #1664	; 0x680
    8a00:	f080 81d5 	bcs.w	8dae <usb_isr+0x446>
    8a04:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    8a08:	f040 809e 	bne.w	8b48 <usb_isr+0x1e0>
	endpoint0_transfer_ack.next = 1;
    8a0c:	4a82      	ldr	r2, [pc, #520]	; (8c18 <usb_isr+0x2b0>)
	endpoint_queue_head[1].status = 0;
    8a0e:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8a10:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    8a12:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8a14:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8a16:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a18:	2380      	movs	r3, #128	; 0x80
    8a1a:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8a1c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8a20:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8a24:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8a2c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8a30:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8a34:	2b00      	cmp	r3, #0
    8a36:	d1fb      	bne.n	8a30 <usb_isr+0xc8>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    8a38:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    8a3c:	065b      	lsls	r3, r3, #25
    8a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    8a42:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8a46:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    8a4a:	2b00      	cmp	r3, #0
    8a4c:	d1a2      	bne.n	8994 <usb_isr+0x2c>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    8a4e:	4b70      	ldr	r3, [pc, #448]	; (8c10 <usb_isr+0x2a8>)
    8a50:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
		if (completestatus) {
    8a54:	b37c      	cbz	r4, 8ab6 <usb_isr+0x14e>
			if (completestatus & endpoint0_notify_mask) {
    8a56:	4a71      	ldr	r2, [pc, #452]	; (8c1c <usb_isr+0x2b4>)
			USB1_ENDPTCOMPLETE = completestatus;
    8a58:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    8a5c:	6811      	ldr	r1, [r2, #0]
    8a5e:	420c      	tst	r4, r1
    8a60:	f040 8288 	bne.w	8f74 <usb_isr+0x60c>
			completestatus &= endpointN_notify_mask;
    8a64:	4b6e      	ldr	r3, [pc, #440]	; (8c20 <usb_isr+0x2b8>)
    8a66:	681b      	ldr	r3, [r3, #0]
			if (completestatus) {
    8a68:	401c      	ands	r4, r3
    8a6a:	d024      	beq.n	8ab6 <usb_isr+0x14e>
				while (tx) {
    8a6c:	ea5f 4814 	movs.w	r8, r4, lsr #16
    8a70:	d010      	beq.n	8a94 <usb_isr+0x12c>
    8a72:	4d68      	ldr	r5, [pc, #416]	; (8c14 <usb_isr+0x2ac>)
					tx &= ~(1<<p);
    8a74:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    8a78:	fa98 f7a8 	rbit	r7, r8
    8a7c:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8a80:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					tx &= ~(1<<p);
    8a84:	fa09 f707 	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8a88:	3040      	adds	r0, #64	; 0x40
    8a8a:	f7ff feef 	bl	886c <run_callbacks>
				while (tx) {
    8a8e:	ea38 0807 	bics.w	r8, r8, r7
    8a92:	d1f1      	bne.n	8a78 <usb_isr+0x110>
				uint32_t rx = completestatus & 0xffff;
    8a94:	b2a4      	uxth	r4, r4
				while(rx) {
    8a96:	b174      	cbz	r4, 8ab6 <usb_isr+0x14e>
    8a98:	4d5e      	ldr	r5, [pc, #376]	; (8c14 <usb_isr+0x2ac>)
					rx &= ~(1<<p);
    8a9a:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    8a9e:	fa94 f7a4 	rbit	r7, r4
    8aa2:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2);
    8aa6:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					rx &= ~(1<<p);
    8aaa:	fa08 f707 	lsl.w	r7, r8, r7
					run_callbacks(endpoint_queue_head + p * 2);
    8aae:	f7ff fedd 	bl	886c <run_callbacks>
				while(rx) {
    8ab2:	43bc      	bics	r4, r7
    8ab4:	d1f3      	bne.n	8a9e <usb_isr+0x136>
	if (status & USB_USBSTS_URI) { // page 3164
    8ab6:	0672      	lsls	r2, r6, #25
    8ab8:	d516      	bpl.n	8ae8 <usb_isr+0x180>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    8aba:	4b55      	ldr	r3, [pc, #340]	; (8c10 <usb_isr+0x2a8>)
    8abc:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    8ac0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    8ac4:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    8ac8:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    8acc:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    8ad0:	2c00      	cmp	r4, #0
    8ad2:	d1fb      	bne.n	8acc <usb_isr+0x164>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    8ad4:	f04f 32ff 	mov.w	r2, #4294967295
    8ad8:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    8adc:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    8ae0:	f001 fa44 	bl	9f6c <usb_serial_reset>
		endpointN_notify_mask = 0;
    8ae4:	4b4e      	ldr	r3, [pc, #312]	; (8c20 <usb_isr+0x2b8>)
    8ae6:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    8ae8:	01f4      	lsls	r4, r6, #7
    8aea:	d503      	bpl.n	8af4 <usb_isr+0x18c>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    8aec:	4b4d      	ldr	r3, [pc, #308]	; (8c24 <usb_isr+0x2bc>)
    8aee:	681b      	ldr	r3, [r3, #0]
    8af0:	b103      	cbz	r3, 8af4 <usb_isr+0x18c>
    8af2:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    8af4:	01b0      	lsls	r0, r6, #6
    8af6:	d503      	bpl.n	8b00 <usb_isr+0x198>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    8af8:	4b4b      	ldr	r3, [pc, #300]	; (8c28 <usb_isr+0x2c0>)
    8afa:	681b      	ldr	r3, [r3, #0]
    8afc:	b103      	cbz	r3, 8b00 <usb_isr+0x198>
    8afe:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    8b00:	0771      	lsls	r1, r6, #29
    8b02:	d509      	bpl.n	8b18 <usb_isr+0x1b0>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    8b04:	4b42      	ldr	r3, [pc, #264]	; (8c10 <usb_isr+0x2a8>)
    8b06:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    8b0a:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    8b0e:	f000 8110 	beq.w	8d32 <usb_isr+0x3ca>
			usb_high_speed = 1;
    8b12:	4b46      	ldr	r3, [pc, #280]	; (8c2c <usb_isr+0x2c4>)
    8b14:	2201      	movs	r2, #1
    8b16:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    8b18:	4b3d      	ldr	r3, [pc, #244]	; (8c10 <usb_isr+0x2a8>)
    8b1a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    8b1e:	061a      	lsls	r2, r3, #24
    8b20:	d50f      	bpl.n	8b42 <usb_isr+0x1da>
    8b22:	0633      	lsls	r3, r6, #24
    8b24:	d50d      	bpl.n	8b42 <usb_isr+0x1da>
		if (usb_reboot_timer) {
    8b26:	4a42      	ldr	r2, [pc, #264]	; (8c30 <usb_isr+0x2c8>)
    8b28:	7813      	ldrb	r3, [r2, #0]
    8b2a:	b12b      	cbz	r3, 8b38 <usb_isr+0x1d0>
			if (--usb_reboot_timer == 0) {
    8b2c:	3b01      	subs	r3, #1
    8b2e:	b2db      	uxtb	r3, r3
    8b30:	7013      	strb	r3, [r2, #0]
    8b32:	2b00      	cmp	r3, #0
    8b34:	f000 8299 	beq.w	906a <usb_isr+0x702>
}
    8b38:	b007      	add	sp, #28
    8b3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_midi_flush_output();
    8b3e:	f001 b815 	b.w	9b6c <usb_midi_flush_output>
}
    8b42:	b007      	add	sp, #28
    8b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (setup.wRequestAndType) {
    8b48:	d97c      	bls.n	8c44 <usb_isr+0x2dc>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    8b4a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8b4e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
    8b52:	e778      	b.n	8a46 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    8b54:	f5b2 6f08 	cmp.w	r2, #2176	; 0x880
    8b58:	d1f7      	bne.n	8b4a <usb_isr+0x1e2>
		reply_buffer[0] = usb_configuration;
    8b5a:	4836      	ldr	r0, [pc, #216]	; (8c34 <usb_isr+0x2cc>)
		endpoint0_transmit(reply_buffer, 1, 0);
    8b5c:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    8b5e:	f89b 3000 	ldrb.w	r3, [fp]
    8b62:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    8b64:	f7ff fe9e 	bl	88a4 <endpoint0_transmit.constprop.0>
		return;
    8b68:	e76d      	b.n	8a46 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    8b6a:	f242 2121 	movw	r1, #8737	; 0x2221
    8b6e:	428a      	cmp	r2, r1
    8b70:	f000 81d3 	beq.w	8f1a <usb_isr+0x5b2>
    8b74:	f240 8099 	bls.w	8caa <usb_isr+0x342>
    8b78:	f248 11a2 	movw	r1, #33186	; 0x81a2
    8b7c:	428a      	cmp	r2, r1
    8b7e:	f000 81bf 	beq.w	8f00 <usb_isr+0x598>
    8b82:	d976      	bls.n	8c72 <usb_isr+0x30a>
    8b84:	f248 43a1 	movw	r3, #33953	; 0x84a1
    8b88:	429a      	cmp	r2, r3
    8b8a:	f040 80b6 	bne.w	8cfa <usb_isr+0x392>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    8b8e:	f5b0 2f10 	cmp.w	r0, #589824	; 0x90000
    8b92:	d2da      	bcs.n	8b4a <usb_isr+0x1e2>
			if (usb_audio_get_feature(&setup, endpoint0_buffer, &len)) {
    8b94:	aa03      	add	r2, sp, #12
    8b96:	4928      	ldr	r1, [pc, #160]	; (8c38 <usb_isr+0x2d0>)
    8b98:	a804      	add	r0, sp, #16
    8b9a:	f000 fe9b 	bl	98d4 <usb_audio_get_feature>
    8b9e:	2800      	cmp	r0, #0
    8ba0:	d0d3      	beq.n	8b4a <usb_isr+0x1e2>
				endpoint0_transmit(endpoint0_buffer, len, 0);
    8ba2:	9903      	ldr	r1, [sp, #12]
    8ba4:	4824      	ldr	r0, [pc, #144]	; (8c38 <usb_isr+0x2d0>)
    8ba6:	f7ff fe7d 	bl	88a4 <endpoint0_transmit.constprop.0>
				return;
    8baa:	e74c      	b.n	8a46 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    8bac:	2a82      	cmp	r2, #130	; 0x82
    8bae:	f000 8191 	beq.w	8ed4 <usb_isr+0x56c>
    8bb2:	f240 80b5 	bls.w	8d20 <usb_isr+0x3b8>
    8bb6:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
    8bba:	f040 80a6 	bne.w	8d0a <usb_isr+0x3a2>
		if (endpoint > 7) break;
    8bbe:	f010 0f78 	tst.w	r0, #120	; 0x78
    8bc2:	b283      	uxth	r3, r0
    8bc4:	d1c1      	bne.n	8b4a <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    8bc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    8bca:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    8bce:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    8bd2:	bf14      	ite	ne
    8bd4:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    8bd8:	f023 0301 	biceq.w	r3, r3, #1
    8bdc:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    8be0:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    8be2:	4b0d      	ldr	r3, [pc, #52]	; (8c18 <usb_isr+0x2b0>)
	endpoint_queue_head[1].status = 0;
    8be4:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8be6:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8be8:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8bea:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8bec:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8bee:	2280      	movs	r2, #128	; 0x80
    8bf0:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8bf2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8bf6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8bfa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8c02:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8c06:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8c0a:	2b00      	cmp	r3, #0
    8c0c:	d1fb      	bne.n	8c06 <usb_isr+0x29e>
    8c0e:	e71a      	b.n	8a46 <usb_isr+0xde>
    8c10:	402e0000 	.word	0x402e0000
    8c14:	20000000 	.word	0x20000000
    8c18:	200092e0 	.word	0x200092e0
    8c1c:	200216cc 	.word	0x200216cc
    8c20:	200216d0 	.word	0x200216d0
    8c24:	200225bc 	.word	0x200225bc
    8c28:	200225c0 	.word	0x200225c0
    8c2c:	20022605 	.word	0x20022605
    8c30:	20022606 	.word	0x20022606
    8c34:	20022014 	.word	0x20022014
    8c38:	200216c4 	.word	0x200216c4
    8c3c:	20022604 	.word	0x20022604
    8c40:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    8c44:	f240 3321 	movw	r3, #801	; 0x321
    8c48:	429a      	cmp	r2, r3
    8c4a:	d004      	beq.n	8c56 <usb_isr+0x2ee>
    8c4c:	f240 4321 	movw	r3, #1057	; 0x421
    8c50:	429a      	cmp	r2, r3
    8c52:	f47f af7a 	bne.w	8b4a <usb_isr+0x1e2>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    8c56:	f5b0 2f10 	cmp.w	r0, #589824	; 0x90000
    8c5a:	ea4f 4110 	mov.w	r1, r0, lsr #16
    8c5e:	f4bf af74 	bcs.w	8b4a <usb_isr+0x1e2>
			endpoint0_setupdata.bothwords = setupdata;
    8c62:	4bb5      	ldr	r3, [pc, #724]	; (8f38 <usb_isr+0x5d0>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    8c64:	2201      	movs	r2, #1
			endpoint0_setupdata.bothwords = setupdata;
    8c66:	e9c3 7000 	strd	r7, r0, [r3]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    8c6a:	48b4      	ldr	r0, [pc, #720]	; (8f3c <usb_isr+0x5d4>)
    8c6c:	f7ff fd56 	bl	871c <endpoint0_receive>
			return; // handle these after ACK
    8c70:	e6e9      	b.n	8a46 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    8c72:	f242 3321 	movw	r3, #8993	; 0x2321
    8c76:	429a      	cmp	r2, r3
    8c78:	d125      	bne.n	8cc6 <usb_isr+0x35e>
	endpoint0_transfer_ack.next = 1;
    8c7a:	4bb1      	ldr	r3, [pc, #708]	; (8f40 <usb_isr+0x5d8>)
	endpoint0_transfer_ack.pointer0 = 0;
    8c7c:	2200      	movs	r2, #0
    8c7e:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    8c80:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    8c82:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8c84:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8c86:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8c88:	2280      	movs	r2, #128	; 0x80
    8c8a:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8c8c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8c90:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8c94:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8c9c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8ca0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8ca4:	2b00      	cmp	r3, #0
    8ca6:	d1fb      	bne.n	8ca0 <usb_isr+0x338>
    8ca8:	e6cd      	b.n	8a46 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    8caa:	f640 3101 	movw	r1, #2817	; 0xb01
    8cae:	428a      	cmp	r2, r1
    8cb0:	f000 80ed 	beq.w	8e8e <usb_isr+0x526>
    8cb4:	f242 0321 	movw	r3, #8225	; 0x2021
    8cb8:	429a      	cmp	r2, r3
    8cba:	d10a      	bne.n	8cd2 <usb_isr+0x36a>
		if (setup.wLength != 7) break;
    8cbc:	0c01      	lsrs	r1, r0, #16
    8cbe:	2907      	cmp	r1, #7
    8cc0:	f47f af43 	bne.w	8b4a <usb_isr+0x1e2>
    8cc4:	e7cd      	b.n	8c62 <usb_isr+0x2fa>
	switch (setup.wRequestAndType) {
    8cc6:	f248 13a1 	movw	r3, #33185	; 0x81a1
    8cca:	429a      	cmp	r2, r3
    8ccc:	f43f af5f 	beq.w	8b8e <usb_isr+0x226>
    8cd0:	e73b      	b.n	8b4a <usb_isr+0x1e2>
    8cd2:	f640 2381 	movw	r3, #2689	; 0xa81
    8cd6:	429a      	cmp	r2, r3
    8cd8:	f47f af37 	bne.w	8b4a <usb_isr+0x1e2>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    8cdc:	b280      	uxth	r0, r0
    8cde:	2804      	cmp	r0, #4
    8ce0:	f000 81ba 	beq.w	9058 <usb_isr+0x6f0>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    8ce4:	2805      	cmp	r0, #5
    8ce6:	f47f af30 	bne.w	8b4a <usb_isr+0x1e2>
			endpoint0_buffer[0] = usb_audio_receive_setting;
    8cea:	4b96      	ldr	r3, [pc, #600]	; (8f44 <usb_isr+0x5dc>)
    8cec:	781b      	ldrb	r3, [r3, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    8cee:	2101      	movs	r1, #1
			endpoint0_buffer[0] = usb_audio_receive_setting;
    8cf0:	4892      	ldr	r0, [pc, #584]	; (8f3c <usb_isr+0x5d4>)
    8cf2:	7003      	strb	r3, [r0, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    8cf4:	f7ff fdd6 	bl	88a4 <endpoint0_transmit.constprop.0>
			return;
    8cf8:	e6a5      	b.n	8a46 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    8cfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    8cfe:	f248 23a1 	movw	r3, #33441	; 0x82a1
    8d02:	429a      	cmp	r2, r3
    8d04:	f43f af43 	beq.w	8b8e <usb_isr+0x226>
    8d08:	e71f      	b.n	8b4a <usb_isr+0x1e2>
    8d0a:	f4ff af1e 	bcc.w	8b4a <usb_isr+0x1e2>
    8d0e:	f240 1321 	movw	r3, #289	; 0x121
    8d12:	429a      	cmp	r2, r3
    8d14:	d09f      	beq.n	8c56 <usb_isr+0x2ee>
    8d16:	f240 2321 	movw	r3, #545	; 0x221
    8d1a:	429a      	cmp	r2, r3
    8d1c:	d09b      	beq.n	8c56 <usb_isr+0x2ee>
    8d1e:	e714      	b.n	8b4a <usb_isr+0x1e2>
    8d20:	2a80      	cmp	r2, #128	; 0x80
    8d22:	f47f af12 	bne.w	8b4a <usb_isr+0x1e2>
		reply_buffer[0] = 0;
    8d26:	4888      	ldr	r0, [pc, #544]	; (8f48 <usb_isr+0x5e0>)
		endpoint0_transmit(reply_buffer, 2, 0);
    8d28:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    8d2a:	8003      	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    8d2c:	f7ff fdba 	bl	88a4 <endpoint0_transmit.constprop.0>
		return;
    8d30:	e689      	b.n	8a46 <usb_isr+0xde>
			usb_high_speed = 0;
    8d32:	4a86      	ldr	r2, [pc, #536]	; (8f4c <usb_isr+0x5e4>)
    8d34:	7013      	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    8d36:	4b86      	ldr	r3, [pc, #536]	; (8f50 <usb_isr+0x5e8>)
    8d38:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    8d3c:	061a      	lsls	r2, r3, #24
    8d3e:	f57f af00 	bpl.w	8b42 <usb_isr+0x1da>
    8d42:	e6ee      	b.n	8b22 <usb_isr+0x1ba>
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8d44:	4983      	ldr	r1, [pc, #524]	; (8f54 <usb_isr+0x5ec>)
		usb_configuration = setup.wValue;
    8d46:	f3c7 4c07 	ubfx	ip, r7, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    8d4a:	f04f 12c8 	mov.w	r2, #13107400	; 0xc800c8
    8d4e:	9301      	str	r3, [sp, #4]
		usb_configuration = setup.wValue;
    8d50:	f88b c000 	strb.w	ip, [fp]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8d54:	f8c4 11c8 	str.w	r1, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    8d58:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    8d5c:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    8d60:	f04f 12c4 	mov.w	r2, #12845252	; 0xc400c4
    8d64:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
		USB1_ENDPTCTRL6 = ENDPOINT6_CONFIG;
    8d68:	3ac2      	subs	r2, #194	; 0xc2
    8d6a:	f8c4 21d8 	str.w	r2, [r4, #472]	; 0x1d8
		usb_serial_configure();
    8d6e:	f001 f8ff 	bl	9f70 <usb_serial_configure>
		usb_midi_configure();
    8d72:	f000 fe99 	bl	9aa8 <usb_midi_configure>
		usb_audio_configure();
    8d76:	f000 fd39 	bl	97ec <usb_audio_configure>
	endpoint0_transfer_ack.next = 1;
    8d7a:	4a71      	ldr	r2, [pc, #452]	; (8f40 <usb_isr+0x5d8>)
    8d7c:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    8d7e:	9b01      	ldr	r3, [sp, #4]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8d80:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8d82:	6011      	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8d84:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    8d86:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8d88:	6051      	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8d8a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
    8d8e:	64eb      	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8d90:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8d94:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
    8d98:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    8d9c:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8da0:	f8c9 3000 	str.w	r3, [r9]
	while (USB1_ENDPTPRIME) ;
    8da4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8da8:	2b00      	cmp	r3, #0
    8daa:	d1fb      	bne.n	8da4 <usb_isr+0x43c>
    8dac:	e64b      	b.n	8a46 <usb_isr+0xde>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    8dae:	4b6a      	ldr	r3, [pc, #424]	; (8f58 <usb_isr+0x5f0>)
    8db0:	6859      	ldr	r1, [r3, #4]
    8db2:	2900      	cmp	r1, #0
    8db4:	f43f aec9 	beq.w	8b4a <usb_isr+0x1e2>
    8db8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    8dbc:	fa1f fe80 	uxth.w	lr, r0
    8dc0:	e004      	b.n	8dcc <usb_isr+0x464>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    8dc2:	6919      	ldr	r1, [r3, #16]
    8dc4:	330c      	adds	r3, #12
    8dc6:	2900      	cmp	r1, #0
    8dc8:	f43f aebf 	beq.w	8b4a <usb_isr+0x1e2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    8dcc:	881a      	ldrh	r2, [r3, #0]
    8dce:	4562      	cmp	r2, ip
    8dd0:	d1f7      	bne.n	8dc2 <usb_isr+0x45a>
    8dd2:	885a      	ldrh	r2, [r3, #2]
    8dd4:	4572      	cmp	r2, lr
    8dd6:	d1f4      	bne.n	8dc2 <usb_isr+0x45a>
				if ((setup.wValue >> 8) == 3) {
    8dd8:	ea4f 221c 	mov.w	r2, ip, lsr #8
    8ddc:	2a03      	cmp	r2, #3
    8dde:	f000 80e2 	beq.w	8fa6 <usb_isr+0x63e>
					datalen = list->length;
    8de2:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    8de4:	0c00      	lsrs	r0, r0, #16
    8de6:	4282      	cmp	r2, r0
    8de8:	bf28      	it	cs
    8dea:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    8dec:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
    8df0:	4617      	mov	r7, r2
    8df2:	f040 80de 	bne.w	8fb2 <usb_isr+0x64a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    8df6:	4b55      	ldr	r3, [pc, #340]	; (8f4c <usb_isr+0x5e4>)
    8df8:	4958      	ldr	r1, [pc, #352]	; (8f5c <usb_isr+0x5f4>)
    8dfa:	7818      	ldrb	r0, [r3, #0]
    8dfc:	4b58      	ldr	r3, [pc, #352]	; (8f60 <usb_isr+0x5f8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8dfe:	f8df a164 	ldr.w	sl, [pc, #356]	; 8f64 <usb_isr+0x5fc>
    8e02:	2800      	cmp	r0, #0
    8e04:	bf18      	it	ne
    8e06:	4619      	movne	r1, r3
    8e08:	4856      	ldr	r0, [pc, #344]	; (8f64 <usb_isr+0x5fc>)
    8e0a:	f7ff fa5f 	bl	82cc <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8e0e:	f02a 031f 	bic.w	r3, sl, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8e12:	eb0a 0107 	add.w	r1, sl, r7
	asm("dsb");
    8e16:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    8e1a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    8e1e:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    8e22:	3320      	adds	r3, #32
	} while (location < end_addr);
    8e24:	4299      	cmp	r1, r3
    8e26:	d8fa      	bhi.n	8e1e <usb_isr+0x4b6>
	asm("dsb");
    8e28:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8e2c:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    8e30:	484c      	ldr	r0, [pc, #304]	; (8f64 <usb_isr+0x5fc>)
    8e32:	4639      	mov	r1, r7
    8e34:	f7ff fd36 	bl	88a4 <endpoint0_transmit.constprop.0>
				return;
    8e38:	e605      	b.n	8a46 <usb_isr+0xde>
		if (endpoint > 7) break;
    8e3a:	f010 0f78 	tst.w	r0, #120	; 0x78
    8e3e:	b283      	uxth	r3, r0
    8e40:	f47f ae83 	bne.w	8b4a <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    8e44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    8e48:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    8e4c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    8e50:	bf14      	ite	ne
    8e52:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    8e56:	f043 0301 	orreq.w	r3, r3, #1
    8e5a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    8e5e:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    8e60:	4b37      	ldr	r3, [pc, #220]	; (8f40 <usb_isr+0x5d8>)
	endpoint_queue_head[1].status = 0;
    8e62:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8e64:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8e66:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8e68:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    8e6a:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8e6c:	2280      	movs	r2, #128	; 0x80
    8e6e:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8e70:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8e74:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8e78:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8e80:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8e84:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8e88:	2b00      	cmp	r3, #0
    8e8a:	d1fb      	bne.n	8e84 <usb_isr+0x51c>
    8e8c:	e5db      	b.n	8a46 <usb_isr+0xde>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    8e8e:	b280      	uxth	r0, r0
    8e90:	2804      	cmp	r0, #4
    8e92:	f000 80c5 	beq.w	9020 <usb_isr+0x6b8>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    8e96:	2805      	cmp	r0, #5
    8e98:	f47f ae57 	bne.w	8b4a <usb_isr+0x1e2>
	endpoint0_transfer_ack.next = 1;
    8e9c:	4a28      	ldr	r2, [pc, #160]	; (8f40 <usb_isr+0x5d8>)
			usb_audio_receive_setting = setup.wValue;
    8e9e:	f3c7 4c0f 	ubfx	ip, r7, #16, #16
	endpoint_queue_head[1].status = 0;
    8ea2:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    8ea4:	6093      	str	r3, [r2, #8]
			usb_audio_receive_setting = setup.wValue;
    8ea6:	4b27      	ldr	r3, [pc, #156]	; (8f44 <usb_isr+0x5dc>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8ea8:	64aa      	str	r2, [r5, #72]	; 0x48
			usb_audio_receive_setting = setup.wValue;
    8eaa:	f883 c000 	strb.w	ip, [r3]
	endpoint0_transfer_ack.next = 1;
    8eae:	2301      	movs	r3, #1
    8eb0:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8eb2:	2380      	movs	r3, #128	; 0x80
    8eb4:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8eb6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8eba:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8ebe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8ec6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    8eca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8ece:	2b00      	cmp	r3, #0
    8ed0:	d1fb      	bne.n	8eca <usb_isr+0x562>
    8ed2:	e5b8      	b.n	8a46 <usb_isr+0xde>
		endpoint = setup.wIndex & 0x7F;
    8ed4:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    8ed6:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    8eda:	f47f ae36 	bne.w	8b4a <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    8ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    8ee2:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    8ee6:	4a18      	ldr	r2, [pc, #96]	; (8f48 <usb_isr+0x5e0>)
    8ee8:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8eea:	0618      	lsls	r0, r3, #24
    8eec:	d458      	bmi.n	8fa0 <usb_isr+0x638>
    8eee:	07cf      	lsls	r7, r1, #31
    8ef0:	d501      	bpl.n	8ef6 <usb_isr+0x58e>
			reply_buffer[0] = 1;
    8ef2:	2301      	movs	r3, #1
    8ef4:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    8ef6:	2102      	movs	r1, #2
    8ef8:	4813      	ldr	r0, [pc, #76]	; (8f48 <usb_isr+0x5e0>)
    8efa:	f7ff fcd3 	bl	88a4 <endpoint0_transmit.constprop.0>
		return;
    8efe:	e5a2      	b.n	8a46 <usb_isr+0xde>
		if (setup.wLength >= 3) {
    8f00:	f5b0 3f40 	cmp.w	r0, #196608	; 0x30000
    8f04:	f4ff ae21 	bcc.w	8b4a <usb_isr+0x1e2>
			endpoint0_buffer[0] = 44100 & 255;
    8f08:	480c      	ldr	r0, [pc, #48]	; (8f3c <usb_isr+0x5d4>)
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    8f0a:	2103      	movs	r1, #3
			endpoint0_buffer[2] = 0;
    8f0c:	7083      	strb	r3, [r0, #2]
			endpoint0_buffer[0] = 44100 & 255;
    8f0e:	f64a 4344 	movw	r3, #44100	; 0xac44
    8f12:	8003      	strh	r3, [r0, #0]
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    8f14:	f7ff fcc6 	bl	88a4 <endpoint0_transmit.constprop.0>
			return;
    8f18:	e595      	b.n	8a46 <usb_isr+0xde>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    8f1a:	b280      	uxth	r0, r0
    8f1c:	2800      	cmp	r0, #0
    8f1e:	f47f aeac 	bne.w	8c7a <usb_isr+0x312>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8f22:	4b11      	ldr	r3, [pc, #68]	; (8f68 <usb_isr+0x600>)
			usb_cdc_line_rtsdtr = setup.wValue;
    8f24:	f3c7 4c07 	ubfx	ip, r7, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8f28:	681a      	ldr	r2, [r3, #0]
    8f2a:	4b10      	ldr	r3, [pc, #64]	; (8f6c <usb_isr+0x604>)
    8f2c:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    8f2e:	4b10      	ldr	r3, [pc, #64]	; (8f70 <usb_isr+0x608>)
    8f30:	f883 c000 	strb.w	ip, [r3]
    8f34:	e6a1      	b.n	8c7a <usb_isr+0x312>
    8f36:	bf00      	nop
    8f38:	2000c6f8 	.word	0x2000c6f8
    8f3c:	200216c4 	.word	0x200216c4
    8f40:	200092e0 	.word	0x200092e0
    8f44:	200225ff 	.word	0x200225ff
    8f48:	20022014 	.word	0x20022014
    8f4c:	20022605 	.word	0x20022605
    8f50:	402e0000 	.word	0x402e0000
    8f54:	00cc0002 	.word	0x00cc0002
    8f58:	200086b4 	.word	0x200086b4
    8f5c:	60002888 	.word	0x60002888
    8f60:	600029e0 	.word	0x600029e0
    8f64:	202009c0 	.word	0x202009c0
    8f68:	20022554 	.word	0x20022554
    8f6c:	200225b8 	.word	0x200225b8
    8f70:	20022603 	.word	0x20022603
				endpoint0_notify_mask = 0;
    8f74:	2100      	movs	r1, #0
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8f76:	f242 0021 	movw	r0, #8225	; 0x2021
				endpoint0_notify_mask = 0;
    8f7a:	6011      	str	r1, [r2, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    8f7c:	493d      	ldr	r1, [pc, #244]	; (9074 <usb_isr+0x70c>)
    8f7e:	e9d1 2100 	ldrd	r2, r1, [r1]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8f82:	b295      	uxth	r5, r2
    8f84:	4285      	cmp	r5, r0
    8f86:	d028      	beq.n	8fda <usb_isr+0x672>
	if (setup.word1 == 0x02010121 || setup.word1 == 0x01000121 /* TODO: check setup.word2 */) {
    8f88:	4b3b      	ldr	r3, [pc, #236]	; (9078 <usb_isr+0x710>)
    8f8a:	429a      	cmp	r2, r3
    8f8c:	d003      	beq.n	8f96 <usb_isr+0x62e>
    8f8e:	4b3b      	ldr	r3, [pc, #236]	; (907c <usb_isr+0x714>)
    8f90:	429a      	cmp	r2, r3
    8f92:	f47f ad67 	bne.w	8a64 <usb_isr+0xfc>
		usb_audio_set_feature(&endpoint0_setupdata, endpoint0_buffer);
    8f96:	493a      	ldr	r1, [pc, #232]	; (9080 <usb_isr+0x718>)
    8f98:	4836      	ldr	r0, [pc, #216]	; (9074 <usb_isr+0x70c>)
    8f9a:	f000 fccd 	bl	9938 <usb_audio_set_feature>
    8f9e:	e561      	b.n	8a64 <usb_isr+0xfc>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8fa0:	03cb      	lsls	r3, r1, #15
    8fa2:	d4a6      	bmi.n	8ef2 <usb_isr+0x58a>
    8fa4:	e7a7      	b.n	8ef6 <usb_isr+0x58e>
					datalen = *(list->addr);
    8fa6:	780a      	ldrb	r2, [r1, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;
    8fa8:	0c00      	lsrs	r0, r0, #16
    8faa:	4282      	cmp	r2, r0
    8fac:	bf28      	it	cs
    8fae:	4602      	movcs	r2, r0
    8fb0:	4617      	mov	r7, r2
				} else if (setup.wValue == 0x700) {
    8fb2:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
    8fb6:	d151      	bne.n	905c <usb_isr+0x6f4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    8fb8:	4b32      	ldr	r3, [pc, #200]	; (9084 <usb_isr+0x71c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8fba:	463a      	mov	r2, r7
    8fbc:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 90a4 <usb_isr+0x73c>
					if (usb_high_speed) src = usb_config_descriptor_12;
    8fc0:	7818      	ldrb	r0, [r3, #0]
    8fc2:	4931      	ldr	r1, [pc, #196]	; (9088 <usb_isr+0x720>)
    8fc4:	4b31      	ldr	r3, [pc, #196]	; (908c <usb_isr+0x724>)
					memcpy(usb_descriptor_buffer, src, datalen);
    8fc6:	2800      	cmp	r0, #0
    8fc8:	bf18      	it	ne
    8fca:	4619      	movne	r1, r3
    8fcc:	4650      	mov	r0, sl
    8fce:	f7ff f97d 	bl	82cc <memcpy>
					usb_descriptor_buffer[1] = 7;
    8fd2:	2307      	movs	r3, #7
    8fd4:	f88a 3001 	strb.w	r3, [sl, #1]
    8fd8:	e719      	b.n	8e0e <usb_isr+0x4a6>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8fda:	b289      	uxth	r1, r1
    8fdc:	2900      	cmp	r1, #0
    8fde:	d1d3      	bne.n	8f88 <usb_isr+0x620>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    8fe0:	4927      	ldr	r1, [pc, #156]	; (9080 <usb_isr+0x718>)
    8fe2:	4d2b      	ldr	r5, [pc, #172]	; (9090 <usb_isr+0x728>)
    8fe4:	c903      	ldmia	r1, {r0, r1}
    8fe6:	80a9      	strh	r1, [r5, #4]
		if (usb_cdc_line_coding[0] == 134) {
    8fe8:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    8fea:	ea4f 4111 	mov.w	r1, r1, lsr #16
    8fee:	6028      	str	r0, [r5, #0]
    8ff0:	71a9      	strb	r1, [r5, #6]
		if (usb_cdc_line_coding[0] == 134) {
    8ff2:	d1c9      	bne.n	8f88 <usb_isr+0x620>
	__disable_irq();
    8ff4:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    8ff6:	4827      	ldr	r0, [pc, #156]	; (9094 <usb_isr+0x72c>)
    8ff8:	7801      	ldrb	r1, [r0, #0]
    8ffa:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    8ffe:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    9000:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    9004:	060d      	lsls	r5, r1, #24
    9006:	d406      	bmi.n	9016 <usb_isr+0x6ae>
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    9008:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    900c:	2080      	movs	r0, #128	; 0x80
    900e:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    9012:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
	__enable_irq();
    9016:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    9018:	4b1f      	ldr	r3, [pc, #124]	; (9098 <usb_isr+0x730>)
    901a:	2150      	movs	r1, #80	; 0x50
    901c:	7019      	strb	r1, [r3, #0]
    901e:	e7b3      	b.n	8f88 <usb_isr+0x620>
	endpoint0_transfer_ack.next = 1;
    9020:	4a1e      	ldr	r2, [pc, #120]	; (909c <usb_isr+0x734>)
			usb_audio_transmit_setting = setup.wValue;
    9022:	f3c7 4c0f 	ubfx	ip, r7, #16, #16
	endpoint_queue_head[1].status = 0;
    9026:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    9028:	6093      	str	r3, [r2, #8]
			usb_audio_transmit_setting = setup.wValue;
    902a:	4b1d      	ldr	r3, [pc, #116]	; (90a0 <usb_isr+0x738>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    902c:	64aa      	str	r2, [r5, #72]	; 0x48
			usb_audio_transmit_setting = setup.wValue;
    902e:	f883 c000 	strb.w	ip, [r3]
	endpoint0_transfer_ack.next = 1;
    9032:	2301      	movs	r3, #1
    9034:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9036:	2380      	movs	r3, #128	; 0x80
    9038:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    903a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    903e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9042:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    904a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    904e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9052:	2b00      	cmp	r3, #0
    9054:	d1fb      	bne.n	904e <usb_isr+0x6e6>
    9056:	e4f6      	b.n	8a46 <usb_isr+0xde>
			endpoint0_buffer[0] = usb_audio_transmit_setting;
    9058:	4b11      	ldr	r3, [pc, #68]	; (90a0 <usb_isr+0x738>)
    905a:	e647      	b.n	8cec <usb_isr+0x384>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    905c:	f8df a044 	ldr.w	sl, [pc, #68]	; 90a4 <usb_isr+0x73c>
    9060:	463a      	mov	r2, r7
    9062:	4650      	mov	r0, sl
    9064:	f7ff f932 	bl	82cc <memcpy>
    9068:	e6d1      	b.n	8e0e <usb_isr+0x4a6>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    906a:	2006      	movs	r0, #6
    906c:	f7ff fc66 	bl	893c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    9070:	f00c f8e6 	bl	15240 <___reboot_Teensyduino__veneer>
    9074:	2000c6f8 	.word	0x2000c6f8
    9078:	02010121 	.word	0x02010121
    907c:	01000121 	.word	0x01000121
    9080:	200216c4 	.word	0x200216c4
    9084:	20022605 	.word	0x20022605
    9088:	600029e0 	.word	0x600029e0
    908c:	60002888 	.word	0x60002888
    9090:	200225b0 	.word	0x200225b0
    9094:	200225f8 	.word	0x200225f8
    9098:	20022606 	.word	0x20022606
    909c:	200092e0 	.word	0x200092e0
    90a0:	20022602 	.word	0x20022602
    90a4:	202009c0 	.word	0x202009c0

000090a8 <usb_config_rx>:
{
    90a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    90ac:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    90ae:	1e83      	subs	r3, r0, #2
    90b0:	2b04      	cmp	r3, #4
    90b2:	d901      	bls.n	90b8 <usb_config_rx+0x10>
}
    90b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    90b8:	f8df 904c 	ldr.w	r9, [pc, #76]	; 9108 <usb_config_rx+0x60>
    90bc:	4615      	mov	r5, r2
    90be:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    90c0:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    90c2:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    90c6:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    90c8:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    90cc:	2100      	movs	r1, #0
    90ce:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    90d2:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    90d4:	f003 fb92 	bl	c7fc <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    90d8:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    90dc:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    90de:	0952      	lsrs	r2, r2, #5
    90e0:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    90e4:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    90e8:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    90ec:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    90f0:	2f00      	cmp	r7, #0
    90f2:	d0df      	beq.n	90b4 <usb_config_rx+0xc>
    90f4:	4a03      	ldr	r2, [pc, #12]	; (9104 <usb_config_rx+0x5c>)
    90f6:	40b3      	lsls	r3, r6
    90f8:	6811      	ldr	r1, [r2, #0]
    90fa:	430b      	orrs	r3, r1
    90fc:	6013      	str	r3, [r2, #0]
}
    90fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9102:	bf00      	nop
    9104:	200216d0 	.word	0x200216d0
    9108:	20000000 	.word	0x20000000

0000910c <usb_config_tx>:
{
    910c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9110:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9112:	1e81      	subs	r1, r0, #2
    9114:	2904      	cmp	r1, #4
    9116:	d901      	bls.n	911c <usb_config_tx+0x10>
}
    9118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    911c:	01c7      	lsls	r7, r0, #7
    911e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 916c <usb_config_tx+0x60>
    9122:	4692      	mov	sl, r2
    9124:	4604      	mov	r4, r0
    9126:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    9128:	223c      	movs	r2, #60	; 0x3c
    912a:	2100      	movs	r1, #0
    912c:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    912e:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9132:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    9134:	f108 0004 	add.w	r0, r8, #4
    9138:	f003 fb60 	bl	c7fc <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    913c:	faba f28a 	clz	r2, sl
    9140:	0952      	lsrs	r2, r2, #5
    9142:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    9146:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    914a:	2201      	movs	r2, #1
	qh->callback_function = callback;
    914c:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    9150:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    9154:	2e00      	cmp	r6, #0
    9156:	d0df      	beq.n	9118 <usb_config_tx+0xc>
    9158:	4b03      	ldr	r3, [pc, #12]	; (9168 <usb_config_tx+0x5c>)
    915a:	3410      	adds	r4, #16
    915c:	6819      	ldr	r1, [r3, #0]
    915e:	40a2      	lsls	r2, r4
    9160:	430a      	orrs	r2, r1
    9162:	601a      	str	r2, [r3, #0]
}
    9164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9168:	200216d0 	.word	0x200216d0
    916c:	20000000 	.word	0x20000000

00009170 <usb_config_rx_iso>:
{
    9170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9174:	4614      	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    9176:	3a01      	subs	r2, #1
    9178:	2a02      	cmp	r2, #2
    917a:	d804      	bhi.n	9186 <usb_config_rx_iso+0x16>
    917c:	461d      	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    917e:	1e83      	subs	r3, r0, #2
    9180:	4607      	mov	r7, r0
    9182:	2b04      	cmp	r3, #4
    9184:	d901      	bls.n	918a <usb_config_rx_iso+0x1a>
}
    9186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    918a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 91d0 <usb_config_rx_iso+0x60>
    918e:	460e      	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    9190:	07a4      	lsls	r4, r4, #30
	memset(qh, 0, sizeof(endpoint_t));
    9192:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9194:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    9198:	2100      	movs	r1, #0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    919a:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    919e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (mult << 30);
    91a2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
	memset(qh, 0, sizeof(endpoint_t));
    91a6:	f003 fb29 	bl	c7fc <memset>
	qh->next = 1; // Terminate bit = 1
    91aa:	2301      	movs	r3, #1
	qh->config = config;
    91ac:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    91b0:	f8c8 5038 	str.w	r5, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    91b4:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    91b8:	2d00      	cmp	r5, #0
    91ba:	d0e4      	beq.n	9186 <usb_config_rx_iso+0x16>
    91bc:	4a03      	ldr	r2, [pc, #12]	; (91cc <usb_config_rx_iso+0x5c>)
    91be:	40bb      	lsls	r3, r7
    91c0:	6811      	ldr	r1, [r2, #0]
    91c2:	430b      	orrs	r3, r1
    91c4:	6013      	str	r3, [r2, #0]
}
    91c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    91ca:	bf00      	nop
    91cc:	200216d0 	.word	0x200216d0
    91d0:	20000000 	.word	0x20000000

000091d4 <usb_config_tx_iso>:
{
    91d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    91d8:	4614      	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    91da:	3a01      	subs	r2, #1
    91dc:	2a02      	cmp	r2, #2
    91de:	d804      	bhi.n	91ea <usb_config_tx_iso+0x16>
    91e0:	461d      	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    91e2:	1e83      	subs	r3, r0, #2
    91e4:	4607      	mov	r7, r0
    91e6:	2b04      	cmp	r3, #4
    91e8:	d901      	bls.n	91ee <usb_config_tx_iso+0x1a>
}
    91ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    91ee:	ea4f 18c0 	mov.w	r8, r0, lsl #7
    91f2:	f8df a048 	ldr.w	sl, [pc, #72]	; 923c <usb_config_tx_iso+0x68>
    91f6:	460e      	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    91f8:	07a4      	lsls	r4, r4, #30
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    91fa:	f108 0840 	add.w	r8, r8, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    91fe:	223c      	movs	r2, #60	; 0x3c
    9200:	2100      	movs	r1, #0
	uint32_t config = (packet_size << 16) | (mult << 30);
    9202:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9206:	eb0a 0908 	add.w	r9, sl, r8
	memset(qh, 0, sizeof(endpoint_t));
    920a:	f109 0004 	add.w	r0, r9, #4
    920e:	f003 faf5 	bl	c7fc <memset>
	qh->next = 1; // Terminate bit = 1
    9212:	2301      	movs	r3, #1
	qh->config = config;
    9214:	f84a 4008 	str.w	r4, [sl, r8]
	qh->callback_function = callback;
    9218:	f8c9 5038 	str.w	r5, [r9, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    921c:	f8c9 3008 	str.w	r3, [r9, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    9220:	2d00      	cmp	r5, #0
    9222:	d0e2      	beq.n	91ea <usb_config_tx_iso+0x16>
    9224:	4a04      	ldr	r2, [pc, #16]	; (9238 <usb_config_tx_iso+0x64>)
    9226:	f107 0010 	add.w	r0, r7, #16
    922a:	6811      	ldr	r1, [r2, #0]
    922c:	4083      	lsls	r3, r0
    922e:	430b      	orrs	r3, r1
    9230:	6013      	str	r3, [r2, #0]
}
    9232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9236:	bf00      	nop
    9238:	200216d0 	.word	0x200216d0
    923c:	20000000 	.word	0x20000000

00009240 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    9240:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    9242:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    9244:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    9246:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    924a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    924e:	b410      	push	{r4}
	transfer->next = 1;
    9250:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    9252:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    9254:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    9258:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    925a:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    925e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    9262:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    9264:	6181      	str	r1, [r0, #24]
}
    9266:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    926a:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    926e:	4770      	bx	lr

00009270 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9270:	1e83      	subs	r3, r0, #2
{
    9272:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9274:	2b04      	cmp	r3, #4
    9276:	d900      	bls.n	927a <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    9278:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    927a:	4b06      	ldr	r3, [pc, #24]	; (9294 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    927c:	f100 0110 	add.w	r1, r0, #16
    9280:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    9284:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    9288:	fa0c f101 	lsl.w	r1, ip, r1
    928c:	3040      	adds	r0, #64	; 0x40
    928e:	f7ff baa9 	b.w	87e4 <schedule_transfer>
    9292:	bf00      	nop
    9294:	20000000 	.word	0x20000000

00009298 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9298:	1e83      	subs	r3, r0, #2
{
    929a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    929c:	2b04      	cmp	r3, #4
    929e:	d900      	bls.n	92a2 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    92a0:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    92a2:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    92a4:	4b02      	ldr	r3, [pc, #8]	; (92b0 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    92a6:	4081      	lsls	r1, r0
    92a8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    92ac:	f7ff ba9a 	b.w	87e4 <schedule_transfer>
    92b0:	20000000 	.word	0x20000000

000092b4 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    92b4:	6840      	ldr	r0, [r0, #4]
#endif
}
    92b6:	4770      	bx	lr

000092b8 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>:
	update_responsibility = false;
}

static void copy_to_buffers(const uint32_t *src, int16_t *left, int16_t *right, unsigned int len)
{
	uint32_t *target = (uint32_t*) src + len; 
    92b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    92bc:	4298      	cmp	r0, r3
{
    92be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    92c2:	d309      	bcc.n	92d8 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x20>
    92c4:	e00a      	b.n	92dc <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
		uint32_t n = *src++;
    92c6:	f850 4b04 	ldr.w	r4, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    92ca:	0c25      	lsrs	r5, r4, #16
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    92cc:	4283      	cmp	r3, r0
		*left++ = n & 0xFFFF;
    92ce:	f821 4b02 	strh.w	r4, [r1], #2
		*right++ = n >> 16;
    92d2:	f822 5b02 	strh.w	r5, [r2], #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    92d6:	d901      	bls.n	92dc <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
    92d8:	078c      	lsls	r4, r1, #30
    92da:	d4f4      	bmi.n	92c6 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0xe>
	}

	while ((src < target - 2)) {
    92dc:	f1a3 0408 	sub.w	r4, r3, #8
    92e0:	42a0      	cmp	r0, r4
    92e2:	d230      	bcs.n	9346 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x8e>
    92e4:	f1a3 0809 	sub.w	r8, r3, #9
    92e8:	f100 0c08 	add.w	ip, r0, #8
    92ec:	4696      	mov	lr, r2
		uint32_t n1 = *src++;
		uint32_t n = *src++;
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
		left+=2;
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    92ee:	4f17      	ldr	r7, [pc, #92]	; (934c <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x94>)
    92f0:	eba8 0800 	sub.w	r8, r8, r0
    92f4:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    92f8:	f108 0801 	add.w	r8, r8, #1
    92fc:	ea4f 0988 	mov.w	r9, r8, lsl #2
    9300:	eb01 0688 	add.w	r6, r1, r8, lsl #2
		uint32_t n = *src++;
    9304:	e95c a402 	ldrd	sl, r4, [ip, #-8]
	while ((src < target - 2)) {
    9308:	f10c 0c08 	add.w	ip, ip, #8
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    930c:	fa1f f58a 	uxth.w	r5, sl
    9310:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    9314:	403c      	ands	r4, r7
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    9316:	f841 5b04 	str.w	r5, [r1], #4
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    931a:	ea44 441a 	orr.w	r4, r4, sl, lsr #16
	while ((src < target - 2)) {
    931e:	42b1      	cmp	r1, r6
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    9320:	f84e 4b04 	str.w	r4, [lr], #4
	while ((src < target - 2)) {
    9324:	d1ee      	bne.n	9304 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x4c>
		uint32_t n = *src++;
    9326:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
		right+=2;
    932a:	444a      	add	r2, r9
	}

	while ((src < target)) {
    932c:	4283      	cmp	r3, r0
    932e:	d908      	bls.n	9342 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x8a>
		uint32_t n = *src++;
    9330:	f850 1b04 	ldr.w	r1, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    9334:	0c0c      	lsrs	r4, r1, #16
	while ((src < target)) {
    9336:	4283      	cmp	r3, r0
		*left++ = n & 0xFFFF;
    9338:	f826 1b02 	strh.w	r1, [r6], #2
		*right++ = n >> 16;
    933c:	f822 4b02 	strh.w	r4, [r2], #2
	while ((src < target)) {
    9340:	d8f6      	bhi.n	9330 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x78>
	}
}
    9342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while ((src < target - 2)) {
    9346:	460e      	mov	r6, r1
	while ((src < target)) {
    9348:	e7f0      	b.n	932c <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x74>
    934a:	bf00      	nop
    934c:	ffff0000 	.word	0xffff0000

00009350 <sync_event(transfer_struct*)>:
{
    9350:	b538      	push	{r3, r4, r5, lr}
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9352:	4a11      	ldr	r2, [pc, #68]	; (9398 <sync_event(transfer_struct*)+0x48>)
    9354:	4b11      	ldr	r3, [pc, #68]	; (939c <sync_event(transfer_struct*)+0x4c>)
    9356:	7811      	ldrb	r1, [r2, #0]
    9358:	681a      	ldr	r2, [r3, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    935a:	2300      	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    935c:	4c10      	ldr	r4, [pc, #64]	; (93a0 <sync_event(transfer_struct*)+0x50>)
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    935e:	4d11      	ldr	r5, [pc, #68]	; (93a4 <sync_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9360:	40ca      	lsrs	r2, r1
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    9362:	4811      	ldr	r0, [pc, #68]	; (93a8 <sync_event(transfer_struct*)+0x58>)
    9364:	4621      	mov	r1, r4
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9366:	6022      	str	r2, [r4, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    9368:	782a      	ldrb	r2, [r5, #0]
    936a:	f7ff ff69 	bl	9240 <usb_prepare_transfer>
	arm_dcache_flush(&usb_audio_sync_feedback, usb_audio_sync_nbytes);
    936e:	782b      	ldrb	r3, [r5, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    9370:	4423      	add	r3, r4
	asm("dsb");
    9372:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCMVAC = location;
    9376:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    937a:	f8c2 4f68 	str.w	r4, [r2, #3944]	; 0xf68
		location += 32;
    937e:	3420      	adds	r4, #32
	} while (location < end_addr);
    9380:	42a3      	cmp	r3, r4
    9382:	d8fa      	bhi.n	937a <sync_event(transfer_struct*)+0x2a>
	asm("dsb");
    9384:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9388:	f3bf 8f6f 	isb	sy
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    938c:	4906      	ldr	r1, [pc, #24]	; (93a8 <sync_event(transfer_struct*)+0x58>)
    938e:	2006      	movs	r0, #6
}
    9390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    9394:	f7ff bf6c 	b.w	9270 <usb_transmit>
    9398:	20022601 	.word	0x20022601
    939c:	200216e8 	.word	0x200216e8
    93a0:	20200820 	.word	0x20200820
    93a4:	20022600 	.word	0x20022600
    93a8:	2000a500 	.word	0x2000a500

000093ac <AudioOutputUSB::update()>:
		len--;
	}
}

void AudioOutputUSB::update(void)
{
    93ac:	b538      	push	{r3, r4, r5, lr}
    93ae:	4605      	mov	r5, r0
	audio_block_t *left, *right;

	// TODO: we shouldn't be writing to these......
	//left = receiveReadOnly(0); // input 0 = left channel
	//right = receiveReadOnly(1); // input 1 = right channel
	left = receiveWritable(0); // input 0 = left channel
    93b0:	2100      	movs	r1, #0
    93b2:	f7fe f8c9 	bl	7548 <AudioStream::receiveWritable(unsigned int)>
	right = receiveWritable(1); // input 1 = right channel
    93b6:	2101      	movs	r1, #1
	left = receiveWritable(0); // input 0 = left channel
    93b8:	4604      	mov	r4, r0
	right = receiveWritable(1); // input 1 = right channel
    93ba:	4628      	mov	r0, r5
    93bc:	f7fe f8c4 	bl	7548 <AudioStream::receiveWritable(unsigned int)>
	if (usb_audio_transmit_setting == 0) {
    93c0:	4b3b      	ldr	r3, [pc, #236]	; (94b0 <AudioOutputUSB::update()+0x104>)
	right = receiveWritable(1); // input 1 = right channel
    93c2:	4605      	mov	r5, r0
	if (usb_audio_transmit_setting == 0) {
    93c4:	781b      	ldrb	r3, [r3, #0]
    93c6:	b1f3      	cbz	r3, 9406 <AudioOutputUSB::update()+0x5a>
		if (right_1st) { release(right_1st); right_1st = NULL; }
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
		offset_1st = 0;
		return;
	}
	if (left == NULL) {
    93c8:	2c00      	cmp	r4, #0
    93ca:	d04a      	beq.n	9462 <AudioOutputUSB::update()+0xb6>
			if (right) release(right);
			return;
		}
		memset(left->data, 0, sizeof(left->data));
	}
	if (right == NULL) {
    93cc:	2d00      	cmp	r5, #0
    93ce:	d054      	beq.n	947a <AudioOutputUSB::update()+0xce>
			release(left);
			return;
		}
		memset(right->data, 0, sizeof(right->data));
	}
	__disable_irq();
    93d0:	b672      	cpsid	i
	if (left_1st == NULL) {
    93d2:	4b38      	ldr	r3, [pc, #224]	; (94b4 <AudioOutputUSB::update()+0x108>)
    93d4:	6818      	ldr	r0, [r3, #0]
    93d6:	2800      	cmp	r0, #0
    93d8:	d03d      	beq.n	9456 <AudioOutputUSB::update()+0xaa>
		left_1st = left;
		right_1st = right;
		offset_1st = 0;
	} else if (left_2nd == NULL) {
    93da:	4a37      	ldr	r2, [pc, #220]	; (94b8 <AudioOutputUSB::update()+0x10c>)
    93dc:	6811      	ldr	r1, [r2, #0]
    93de:	2900      	cmp	r1, #0
    93e0:	d056      	beq.n	9490 <AudioOutputUSB::update()+0xe4>
		left_2nd = left;
		right_2nd = right;
	} else {
		// buffer overrun - PC is consuming too slowly
		audio_block_t *discard1 = left_1st;
		left_1st = left_2nd;
    93e2:	6019      	str	r1, [r3, #0]
		left_2nd = left;
		audio_block_t *discard2 = right_1st;
		right_1st = right_2nd;
    93e4:	4935      	ldr	r1, [pc, #212]	; (94bc <AudioOutputUSB::update()+0x110>)
		audio_block_t *discard2 = right_1st;
    93e6:	4b36      	ldr	r3, [pc, #216]	; (94c0 <AudioOutputUSB::update()+0x114>)
		left_2nd = left;
    93e8:	6014      	str	r4, [r2, #0]
		right_2nd = right;
		offset_1st = 0; // TODO: discard part of this data?
    93ea:	2400      	movs	r4, #0
		right_1st = right_2nd;
    93ec:	680a      	ldr	r2, [r1, #0]
		right_2nd = right;
    93ee:	600d      	str	r5, [r1, #0]
		offset_1st = 0; // TODO: discard part of this data?
    93f0:	4934      	ldr	r1, [pc, #208]	; (94c4 <AudioOutputUSB::update()+0x118>)
    93f2:	800c      	strh	r4, [r1, #0]
		audio_block_t *discard2 = right_1st;
    93f4:	681c      	ldr	r4, [r3, #0]
		right_1st = right_2nd;
    93f6:	601a      	str	r2, [r3, #0]
		//serial_print("*");
		release(discard1);
    93f8:	f7fe f85a 	bl	74b0 <AudioStream::release(audio_block_struct*)>
		release(discard2);
    93fc:	4620      	mov	r0, r4
    93fe:	f7fe f857 	bl	74b0 <AudioStream::release(audio_block_struct*)>
	}
	__enable_irq();
    9402:	b662      	cpsie	i
}
    9404:	bd38      	pop	{r3, r4, r5, pc}
		if (left) release(left);
    9406:	b114      	cbz	r4, 940e <AudioOutputUSB::update()+0x62>
    9408:	4620      	mov	r0, r4
    940a:	f7fe f851 	bl	74b0 <AudioStream::release(audio_block_struct*)>
		if (right) release(right);
    940e:	b115      	cbz	r5, 9416 <AudioOutputUSB::update()+0x6a>
    9410:	4628      	mov	r0, r5
    9412:	f7fe f84d 	bl	74b0 <AudioStream::release(audio_block_struct*)>
		if (left_1st) { release(left_1st); left_1st = NULL; }
    9416:	4c27      	ldr	r4, [pc, #156]	; (94b4 <AudioOutputUSB::update()+0x108>)
    9418:	6820      	ldr	r0, [r4, #0]
    941a:	b118      	cbz	r0, 9424 <AudioOutputUSB::update()+0x78>
    941c:	f7fe f848 	bl	74b0 <AudioStream::release(audio_block_struct*)>
    9420:	2300      	movs	r3, #0
    9422:	6023      	str	r3, [r4, #0]
		if (left_2nd) { release(left_2nd); left_2nd = NULL; }
    9424:	4c24      	ldr	r4, [pc, #144]	; (94b8 <AudioOutputUSB::update()+0x10c>)
    9426:	6820      	ldr	r0, [r4, #0]
    9428:	b118      	cbz	r0, 9432 <AudioOutputUSB::update()+0x86>
    942a:	f7fe f841 	bl	74b0 <AudioStream::release(audio_block_struct*)>
    942e:	2300      	movs	r3, #0
    9430:	6023      	str	r3, [r4, #0]
		if (right_1st) { release(right_1st); right_1st = NULL; }
    9432:	4c23      	ldr	r4, [pc, #140]	; (94c0 <AudioOutputUSB::update()+0x114>)
    9434:	6820      	ldr	r0, [r4, #0]
    9436:	b118      	cbz	r0, 9440 <AudioOutputUSB::update()+0x94>
    9438:	f7fe f83a 	bl	74b0 <AudioStream::release(audio_block_struct*)>
    943c:	2300      	movs	r3, #0
    943e:	6023      	str	r3, [r4, #0]
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
    9440:	4c1e      	ldr	r4, [pc, #120]	; (94bc <AudioOutputUSB::update()+0x110>)
    9442:	6820      	ldr	r0, [r4, #0]
    9444:	b118      	cbz	r0, 944e <AudioOutputUSB::update()+0xa2>
    9446:	f7fe f833 	bl	74b0 <AudioStream::release(audio_block_struct*)>
    944a:	2300      	movs	r3, #0
    944c:	6023      	str	r3, [r4, #0]
		offset_1st = 0;
    944e:	4b1d      	ldr	r3, [pc, #116]	; (94c4 <AudioOutputUSB::update()+0x118>)
    9450:	2200      	movs	r2, #0
    9452:	801a      	strh	r2, [r3, #0]
}
    9454:	bd38      	pop	{r3, r4, r5, pc}
		left_1st = left;
    9456:	601c      	str	r4, [r3, #0]
		right_1st = right;
    9458:	4a19      	ldr	r2, [pc, #100]	; (94c0 <AudioOutputUSB::update()+0x114>)
		offset_1st = 0;
    945a:	4b1a      	ldr	r3, [pc, #104]	; (94c4 <AudioOutputUSB::update()+0x118>)
		right_1st = right;
    945c:	6015      	str	r5, [r2, #0]
		offset_1st = 0;
    945e:	8018      	strh	r0, [r3, #0]
    9460:	e7cf      	b.n	9402 <AudioOutputUSB::update()+0x56>
		left = allocate();
    9462:	f7fd ffcf 	bl	7404 <AudioStream::allocate()>
		if (left == NULL) {
    9466:	4604      	mov	r4, r0
    9468:	b1b0      	cbz	r0, 9498 <AudioOutputUSB::update()+0xec>
		memset(left->data, 0, sizeof(left->data));
    946a:	f44f 7280 	mov.w	r2, #256	; 0x100
    946e:	2100      	movs	r1, #0
    9470:	3004      	adds	r0, #4
    9472:	f003 f9c3 	bl	c7fc <memset>
	if (right == NULL) {
    9476:	2d00      	cmp	r5, #0
    9478:	d1aa      	bne.n	93d0 <AudioOutputUSB::update()+0x24>
		right = allocate();
    947a:	f7fd ffc3 	bl	7404 <AudioStream::allocate()>
		if (right == NULL) {
    947e:	4605      	mov	r5, r0
    9480:	b188      	cbz	r0, 94a6 <AudioOutputUSB::update()+0xfa>
		memset(right->data, 0, sizeof(right->data));
    9482:	f44f 7280 	mov.w	r2, #256	; 0x100
    9486:	2100      	movs	r1, #0
    9488:	3004      	adds	r0, #4
    948a:	f003 f9b7 	bl	c7fc <memset>
    948e:	e79f      	b.n	93d0 <AudioOutputUSB::update()+0x24>
		right_2nd = right;
    9490:	4b0a      	ldr	r3, [pc, #40]	; (94bc <AudioOutputUSB::update()+0x110>)
		left_2nd = left;
    9492:	6014      	str	r4, [r2, #0]
		right_2nd = right;
    9494:	601d      	str	r5, [r3, #0]
    9496:	e7b4      	b.n	9402 <AudioOutputUSB::update()+0x56>
			if (right) release(right);
    9498:	2d00      	cmp	r5, #0
    949a:	d0b3      	beq.n	9404 <AudioOutputUSB::update()+0x58>
    949c:	4628      	mov	r0, r5
}
    949e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			if (right) release(right);
    94a2:	f7fe b805 	b.w	74b0 <AudioStream::release(audio_block_struct*)>
			release(left);
    94a6:	4620      	mov	r0, r4
}
    94a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			release(left);
    94ac:	f7fe b800 	b.w	74b0 <AudioStream::release(audio_block_struct*)>
    94b0:	20022602 	.word	0x20022602
    94b4:	20021130 	.word	0x20021130
    94b8:	20021134 	.word	0x20021134
    94bc:	2002113c 	.word	0x2002113c
    94c0:	20021138 	.word	0x20021138
    94c4:	200225d0 	.word	0x200225d0

000094c8 <usb_audio_receive_callback>:
{
    94c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	AudioInputUSB::receive_flag = 1;
    94cc:	2201      	movs	r2, #1
    94ce:	4b4a      	ldr	r3, [pc, #296]	; (95f8 <usb_audio_receive_callback+0x130>)
	left = AudioInputUSB::incoming_left;
    94d0:	f8df a138 	ldr.w	sl, [pc, #312]	; 960c <usb_audio_receive_callback+0x144>
	len >>= 2; // 1 sample = 4 bytes: 2 left, 2 right
    94d4:	0886      	lsrs	r6, r0, #2
	AudioInputUSB::receive_flag = 1;
    94d6:	701a      	strb	r2, [r3, #0]
	count = AudioInputUSB::incoming_count;
    94d8:	4b48      	ldr	r3, [pc, #288]	; (95fc <usb_audio_receive_callback+0x134>)
	left = AudioInputUSB::incoming_left;
    94da:	f8da 4000 	ldr.w	r4, [sl]
	count = AudioInputUSB::incoming_count;
    94de:	881f      	ldrh	r7, [r3, #0]
	right = AudioInputUSB::incoming_right;
    94e0:	4b47      	ldr	r3, [pc, #284]	; (9600 <usb_audio_receive_callback+0x138>)
	count = AudioInputUSB::incoming_count;
    94e2:	46b9      	mov	r9, r7
	right = AudioInputUSB::incoming_right;
    94e4:	681d      	ldr	r5, [r3, #0]
	if (left == NULL) {
    94e6:	2c00      	cmp	r4, #0
    94e8:	d04a      	beq.n	9580 <usb_audio_receive_callback+0xb8>
	if (right == NULL) {
    94ea:	2d00      	cmp	r5, #0
    94ec:	d051      	beq.n	9592 <usb_audio_receive_callback+0xca>
	while (len > 0) {
    94ee:	2e00      	cmp	r6, #0
    94f0:	d058      	beq.n	95a4 <usb_audio_receive_callback+0xdc>
		avail = AUDIO_BLOCK_SAMPLES - count;
    94f2:	f1c7 0380 	rsb	r3, r7, #128	; 0x80
		if (len < avail) {
    94f6:	429e      	cmp	r6, r3
    94f8:	d37a      	bcc.n	95f0 <usb_audio_receive_callback+0x128>
    94fa:	f8df b114 	ldr.w	fp, [pc, #276]	; 9610 <usb_audio_receive_callback+0x148>
    94fe:	4f41      	ldr	r7, [pc, #260]	; (9604 <usb_audio_receive_callback+0x13c>)
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    9500:	f8df 8110 	ldr.w	r8, [pc, #272]	; 9614 <usb_audio_receive_callback+0x14c>
		} else if (avail > 0) {
    9504:	b9fb      	cbnz	r3, 9546 <usb_audio_receive_callback+0x7e>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    9506:	683b      	ldr	r3, [r7, #0]
    9508:	2b00      	cmp	r3, #0
    950a:	d137      	bne.n	957c <usb_audio_receive_callback+0xb4>
    950c:	f8d8 3000 	ldr.w	r3, [r8]
    9510:	2b00      	cmp	r3, #0
    9512:	d133      	bne.n	957c <usb_audio_receive_callback+0xb4>
			AudioInputUSB::ready_left = left;
    9514:	603c      	str	r4, [r7, #0]
			AudioInputUSB::ready_right = right;
    9516:	f8c8 5000 	str.w	r5, [r8]
			left = AudioStream::allocate();
    951a:	f7fd ff73 	bl	7404 <AudioStream::allocate()>
			if (left == NULL) {
    951e:	4604      	mov	r4, r0
    9520:	2800      	cmp	r0, #0
    9522:	d043      	beq.n	95ac <usb_audio_receive_callback+0xe4>
			right = AudioStream::allocate();
    9524:	f7fd ff6e 	bl	7404 <AudioStream::allocate()>
			if (right == NULL) {
    9528:	4605      	mov	r5, r0
    952a:	2800      	cmp	r0, #0
    952c:	d046      	beq.n	95bc <usb_audio_receive_callback+0xf4>
			AudioInputUSB::incoming_right = right;
    952e:	4b34      	ldr	r3, [pc, #208]	; (9600 <usb_audio_receive_callback+0x138>)
			AudioInputUSB::incoming_left = left;
    9530:	f8ca 4000 	str.w	r4, [sl]
			AudioInputUSB::incoming_right = right;
    9534:	6018      	str	r0, [r3, #0]
	while (len > 0) {
    9536:	2e00      	cmp	r6, #0
    9538:	d033      	beq.n	95a2 <usb_audio_receive_callback+0xda>
		if (len < avail) {
    953a:	2e7f      	cmp	r6, #127	; 0x7f
			count = 0;
    953c:	f04f 0900 	mov.w	r9, #0
		avail = AUDIO_BLOCK_SAMPLES - count;
    9540:	f04f 0380 	mov.w	r3, #128	; 0x80
		if (len < avail) {
    9544:	d945      	bls.n	95d2 <usb_audio_receive_callback+0x10a>
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    9546:	1d2a      	adds	r2, r5, #4
    9548:	1d21      	adds	r1, r4, #4
    954a:	4658      	mov	r0, fp
    954c:	444e      	add	r6, r9
    954e:	eb02 0249 	add.w	r2, r2, r9, lsl #1
    9552:	eb01 0149 	add.w	r1, r1, r9, lsl #1
			len -= avail;
    9556:	3e80      	subs	r6, #128	; 0x80
			data += avail;
    9558:	eb0b 0b83 	add.w	fp, fp, r3, lsl #2
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    955c:	f7ff feac 	bl	92b8 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) {
    9560:	683b      	ldr	r3, [r7, #0]
    9562:	b91b      	cbnz	r3, 956c <usb_audio_receive_callback+0xa4>
    9564:	f8d8 3000 	ldr.w	r3, [r8]
    9568:	2b00      	cmp	r3, #0
    956a:	d0d3      	beq.n	9514 <usb_audio_receive_callback+0x4c>
				AudioInputUSB::incoming_count = count + avail;
    956c:	2380      	movs	r3, #128	; 0x80
    956e:	4a23      	ldr	r2, [pc, #140]	; (95fc <usb_audio_receive_callback+0x134>)
    9570:	8013      	strh	r3, [r2, #0]
				if (len > 0) {
    9572:	b11e      	cbz	r6, 957c <usb_audio_receive_callback+0xb4>
					usb_audio_overrun_count++;
    9574:	4a24      	ldr	r2, [pc, #144]	; (9608 <usb_audio_receive_callback+0x140>)
    9576:	6813      	ldr	r3, [r2, #0]
    9578:	3301      	adds	r3, #1
    957a:	6013      	str	r3, [r2, #0]
}
    957c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		left = AudioStream::allocate();
    9580:	f7fd ff40 	bl	7404 <AudioStream::allocate()>
		if (left == NULL) return;
    9584:	4604      	mov	r4, r0
    9586:	2800      	cmp	r0, #0
    9588:	d0f8      	beq.n	957c <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_left = left;
    958a:	f8ca 0000 	str.w	r0, [sl]
	if (right == NULL) {
    958e:	2d00      	cmp	r5, #0
    9590:	d1ad      	bne.n	94ee <usb_audio_receive_callback+0x26>
		right = AudioStream::allocate();
    9592:	f7fd ff37 	bl	7404 <AudioStream::allocate()>
		if (right == NULL) return;
    9596:	4605      	mov	r5, r0
    9598:	2800      	cmp	r0, #0
    959a:	d0ef      	beq.n	957c <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_right = right;
    959c:	4b18      	ldr	r3, [pc, #96]	; (9600 <usb_audio_receive_callback+0x138>)
    959e:	6018      	str	r0, [r3, #0]
    95a0:	e7a5      	b.n	94ee <usb_audio_receive_callback+0x26>
    95a2:	4637      	mov	r7, r6
	AudioInputUSB::incoming_count = count;
    95a4:	4b15      	ldr	r3, [pc, #84]	; (95fc <usb_audio_receive_callback+0x134>)
    95a6:	801f      	strh	r7, [r3, #0]
}
    95a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioInputUSB::incoming_right = NULL;
    95ac:	4b14      	ldr	r3, [pc, #80]	; (9600 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    95ae:	f8ca 0000 	str.w	r0, [sl]
				AudioInputUSB::incoming_right = NULL;
    95b2:	6018      	str	r0, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    95b4:	4b11      	ldr	r3, [pc, #68]	; (95fc <usb_audio_receive_callback+0x134>)
    95b6:	8018      	strh	r0, [r3, #0]
}
    95b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioStream::release(left);
    95bc:	4620      	mov	r0, r4
    95be:	f7fd ff77 	bl	74b0 <AudioStream::release(audio_block_struct*)>
				AudioInputUSB::incoming_right = NULL;
    95c2:	4b0f      	ldr	r3, [pc, #60]	; (9600 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    95c4:	f8ca 5000 	str.w	r5, [sl]
				AudioInputUSB::incoming_right = NULL;
    95c8:	601d      	str	r5, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    95ca:	4b0c      	ldr	r3, [pc, #48]	; (95fc <usb_audio_receive_callback+0x134>)
    95cc:	801d      	strh	r5, [r3, #0]
}
    95ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95d2:	464f      	mov	r7, r9
    95d4:	464b      	mov	r3, r9
			copy_to_buffers(data, left->data + count, right->data + count, len);
    95d6:	1d2a      	adds	r2, r5, #4
    95d8:	1d21      	adds	r1, r4, #4
    95da:	4658      	mov	r0, fp
			AudioInputUSB::incoming_count = count + len;
    95dc:	4437      	add	r7, r6
			copy_to_buffers(data, left->data + count, right->data + count, len);
    95de:	441a      	add	r2, r3
    95e0:	4419      	add	r1, r3
    95e2:	4633      	mov	r3, r6
    95e4:	f7ff fe68 	bl	92b8 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			AudioInputUSB::incoming_count = count + len;
    95e8:	4b04      	ldr	r3, [pc, #16]	; (95fc <usb_audio_receive_callback+0x134>)
    95ea:	801f      	strh	r7, [r3, #0]
}
    95ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_to_buffers(data, left->data + count, right->data + count, len);
    95f0:	007b      	lsls	r3, r7, #1
    95f2:	f8df b01c 	ldr.w	fp, [pc, #28]	; 9610 <usb_audio_receive_callback+0x148>
    95f6:	e7ee      	b.n	95d6 <usb_audio_receive_callback+0x10e>
    95f8:	200225ed 	.word	0x200225ed
    95fc:	200225ce 	.word	0x200225ce
    9600:	2002112c 	.word	0x2002112c
    9604:	20021120 	.word	0x20021120
    9608:	200225a8 	.word	0x200225a8
    960c:	20021128 	.word	0x20021128
    9610:	20200840 	.word	0x20200840
    9614:	20021124 	.word	0x20021124

00009618 <rx_event(transfer_struct*)>:
{
    9618:	b508      	push	{r3, lr}
	if (t) {
    961a:	b138      	cbz	r0, 962c <rx_event(transfer_struct*)+0x14>
		int len = AUDIO_RX_SIZE - ((rx_transfer.status >> 16) & 0x7FFF);
    961c:	4b11      	ldr	r3, [pc, #68]	; (9664 <rx_event(transfer_struct*)+0x4c>)
    961e:	6858      	ldr	r0, [r3, #4]
    9620:	f3c0 400e 	ubfx	r0, r0, #16, #15
		usb_audio_receive_callback(len);
    9624:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
    9628:	f7ff ff4e 	bl	94c8 <usb_audio_receive_callback>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    962c:	2300      	movs	r3, #0
    962e:	22b4      	movs	r2, #180	; 0xb4
    9630:	490d      	ldr	r1, [pc, #52]	; (9668 <rx_event(transfer_struct*)+0x50>)
    9632:	480c      	ldr	r0, [pc, #48]	; (9664 <rx_event(transfer_struct*)+0x4c>)
    9634:	f7ff fe04 	bl	9240 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9638:	4b0b      	ldr	r3, [pc, #44]	; (9668 <rx_event(transfer_struct*)+0x50>)
	uint32_t end_addr = (uint32_t)addr + size;
    963a:	f103 01b4 	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    963e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    9642:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9646:	f8c2 3f5c 	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    964a:	3320      	adds	r3, #32
	} while (location < end_addr);
    964c:	4299      	cmp	r1, r3
    964e:	d8fa      	bhi.n	9646 <rx_event(transfer_struct*)+0x2e>
	asm("dsb");
    9650:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9654:	f3bf 8f6f 	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    9658:	4902      	ldr	r1, [pc, #8]	; (9664 <rx_event(transfer_struct*)+0x4c>)
    965a:	2005      	movs	r0, #5
}
    965c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    9660:	f7ff be1a 	b.w	9298 <usb_receive>
    9664:	2000a320 	.word	0x2000a320
    9668:	20200840 	.word	0x20200840

0000966c <AudioOutputUSB::begin()>:
	update_responsibility = false;
    966c:	2300      	movs	r3, #0
    966e:	4803      	ldr	r0, [pc, #12]	; (967c <AudioOutputUSB::begin()+0x10>)
	left_1st = NULL;
    9670:	4903      	ldr	r1, [pc, #12]	; (9680 <AudioOutputUSB::begin()+0x14>)
	right_1st = NULL;
    9672:	4a04      	ldr	r2, [pc, #16]	; (9684 <AudioOutputUSB::begin()+0x18>)
	update_responsibility = false;
    9674:	7003      	strb	r3, [r0, #0]
	left_1st = NULL;
    9676:	600b      	str	r3, [r1, #0]
	right_1st = NULL;
    9678:	6013      	str	r3, [r2, #0]
}
    967a:	4770      	bx	lr
    967c:	200225ee 	.word	0x200225ee
    9680:	20021130 	.word	0x20021130
    9684:	20021138 	.word	0x20021138

00009688 <usb_audio_transmit_callback>:
{
	static uint32_t count=5;
	uint32_t avail, num, target, offset, len=0;
	audio_block_t *left, *right;

	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    9688:	4a39      	ldr	r2, [pc, #228]	; (9770 <usb_audio_transmit_callback+0xe8>)
{
    968a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    968e:	6813      	ldr	r3, [r2, #0]
    9690:	3301      	adds	r3, #1
    9692:	2b09      	cmp	r3, #9
{
    9694:	ed2d 8b02 	vpush	{d8}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    9698:	d955      	bls.n	9746 <usb_audio_transmit_callback+0xbe>
		target = 44;
	} else {
		count = 0;
    969a:	21b4      	movs	r1, #180	; 0xb4
    969c:	2300      	movs	r3, #0
		target = 45;
    969e:	f04f 092d 	mov.w	r9, #45	; 0x2d
		count = 0;
    96a2:	ee08 1a10 	vmov	s16, r1
    96a6:	6013      	str	r3, [r2, #0]
{
    96a8:	2700      	movs	r7, #0
    96aa:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 9784 <usb_audio_transmit_callback+0xfc>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
			//serial_print("%");
			break;
		}
		right = AudioOutputUSB::right_1st;
		offset = AudioOutputUSB::offset_1st;
    96ae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 9788 <usb_audio_transmit_callback+0x100>
		left = AudioOutputUSB::left_1st;
    96b2:	f8db 0000 	ldr.w	r0, [fp]
		num = target - len;
    96b6:	eba9 0207 	sub.w	r2, r9, r7
		if (left == NULL) {
    96ba:	2800      	cmp	r0, #0
    96bc:	d04a      	beq.n	9754 <usb_audio_transmit_callback+0xcc>
		offset = AudioOutputUSB::offset_1st;
    96be:	f8ba c000 	ldrh.w	ip, [sl]

		avail = AUDIO_BLOCK_SAMPLES - offset;
		if (num > avail) num = avail;

		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
			left->data + offset, right->data + offset, num);
    96c2:	1d05      	adds	r5, r0, #4
		right = AudioOutputUSB::right_1st;
    96c4:	4b2b      	ldr	r3, [pc, #172]	; (9774 <usb_audio_transmit_callback+0xec>)
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    96c6:	eb05 054c 	add.w	r5, r5, ip, lsl #1
		right = AudioOutputUSB::right_1st;
    96ca:	f8d3 8000 	ldr.w	r8, [r3]
		avail = AUDIO_BLOCK_SAMPLES - offset;
    96ce:	f1cc 0380 	rsb	r3, ip, #128	; 0x80
    96d2:	429a      	cmp	r2, r3
			left->data + offset, right->data + offset, num);
    96d4:	f108 0404 	add.w	r4, r8, #4
    96d8:	bf28      	it	cs
    96da:	461a      	movcs	r2, r3
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    96dc:	4b26      	ldr	r3, [pc, #152]	; (9778 <usb_audio_transmit_callback+0xf0>)
    96de:	eb04 044c 	add.w	r4, r4, ip, lsl #1
    96e2:	eb03 0687 	add.w	r6, r3, r7, lsl #2
	while (len > 0) {
    96e6:	b15a      	cbz	r2, 9700 <usb_audio_transmit_callback+0x78>
    96e8:	4611      	mov	r1, r2
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    96ea:	f935 3b02 	ldrsh.w	r3, [r5], #2
	while (len > 0) {
    96ee:	3901      	subs	r1, #1
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    96f0:	f934 eb02 	ldrsh.w	lr, [r4], #2
    96f4:	b29b      	uxth	r3, r3
    96f6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    96fa:	f846 3b04 	str.w	r3, [r6], #4
	while (len > 0) {
    96fe:	d1f4      	bne.n	96ea <usb_audio_transmit_callback+0x62>
		len += num;
		offset += num;
    9700:	4494      	add	ip, r2
		len += num;
    9702:	4417      	add	r7, r2
		if (offset >= AUDIO_BLOCK_SAMPLES) {
    9704:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
    9708:	d80b      	bhi.n	9722 <usb_audio_transmit_callback+0x9a>
			AudioOutputUSB::left_2nd = NULL;
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
			AudioOutputUSB::right_2nd = NULL;
			AudioOutputUSB::offset_1st = 0;
		} else {
			AudioOutputUSB::offset_1st = offset;
    970a:	fa1f fc8c 	uxth.w	ip, ip
	while (len < target) {
    970e:	454f      	cmp	r7, r9
			AudioOutputUSB::offset_1st = offset;
    9710:	f8aa c000 	strh.w	ip, [sl]
	while (len < target) {
    9714:	d3cd      	bcc.n	96b2 <usb_audio_transmit_callback+0x2a>
		}
	}
	return target * 4;
}
    9716:	ee18 0a10 	vmov	r0, s16
    971a:	ecbd 8b02 	vpop	{d8}
    971e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			AudioStream::release(left);
    9722:	f7fd fec5 	bl	74b0 <AudioStream::release(audio_block_struct*)>
			AudioStream::release(right);
    9726:	4640      	mov	r0, r8
    9728:	f7fd fec2 	bl	74b0 <AudioStream::release(audio_block_struct*)>
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    972c:	4813      	ldr	r0, [pc, #76]	; (977c <usb_audio_transmit_callback+0xf4>)
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    972e:	4b14      	ldr	r3, [pc, #80]	; (9780 <usb_audio_transmit_callback+0xf8>)
			AudioOutputUSB::left_2nd = NULL;
    9730:	2200      	movs	r2, #0
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    9732:	6801      	ldr	r1, [r0, #0]
    9734:	4694      	mov	ip, r2
			AudioOutputUSB::left_2nd = NULL;
    9736:	6002      	str	r2, [r0, #0]
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    9738:	f8cb 1000 	str.w	r1, [fp]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    973c:	6819      	ldr	r1, [r3, #0]
			AudioOutputUSB::right_2nd = NULL;
    973e:	601a      	str	r2, [r3, #0]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    9740:	4b0c      	ldr	r3, [pc, #48]	; (9774 <usb_audio_transmit_callback+0xec>)
    9742:	6019      	str	r1, [r3, #0]
			AudioOutputUSB::offset_1st = 0;
    9744:	e7e3      	b.n	970e <usb_audio_transmit_callback+0x86>
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    9746:	21b0      	movs	r1, #176	; 0xb0
		target = 44;
    9748:	f04f 092c 	mov.w	r9, #44	; 0x2c
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    974c:	6013      	str	r3, [r2, #0]
    974e:	ee08 1a10 	vmov	s16, r1
    9752:	e7a9      	b.n	96a8 <usb_audio_transmit_callback+0x20>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
    9754:	4b08      	ldr	r3, [pc, #32]	; (9778 <usb_audio_transmit_callback+0xf0>)
    9756:	4601      	mov	r1, r0
    9758:	0092      	lsls	r2, r2, #2
    975a:	eb03 0047 	add.w	r0, r3, r7, lsl #1
    975e:	f003 f84d 	bl	c7fc <memset>
}
    9762:	ee18 0a10 	vmov	r0, s16
    9766:	ecbd 8b02 	vpop	{d8}
    976a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    976e:	bf00      	nop
    9770:	2000888c 	.word	0x2000888c
    9774:	20021138 	.word	0x20021138
    9778:	2000c640 	.word	0x2000c640
    977c:	20021134 	.word	0x20021134
    9780:	2002113c 	.word	0x2002113c
    9784:	20021130 	.word	0x20021130
    9788:	200225d0 	.word	0x200225d0

0000978c <tx_event(transfer_struct*)>:
{
    978c:	b538      	push	{r3, r4, r5, lr}
	int len = usb_audio_transmit_callback();
    978e:	f7ff ff7b 	bl	9688 <usb_audio_transmit_callback>
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9792:	4a11      	ldr	r2, [pc, #68]	; (97d8 <tx_event(transfer_struct*)+0x4c>)
    9794:	4b11      	ldr	r3, [pc, #68]	; (97dc <tx_event(transfer_struct*)+0x50>)
	int len = usb_audio_transmit_callback();
    9796:	4605      	mov	r5, r0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9798:	6812      	ldr	r2, [r2, #0]
    979a:	781b      	ldrb	r3, [r3, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    979c:	4c10      	ldr	r4, [pc, #64]	; (97e0 <tx_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    979e:	40da      	lsrs	r2, r3
    97a0:	4910      	ldr	r1, [pc, #64]	; (97e4 <tx_event(transfer_struct*)+0x58>)
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    97a2:	2300      	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    97a4:	600a      	str	r2, [r1, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    97a6:	4602      	mov	r2, r0
    97a8:	4621      	mov	r1, r4
    97aa:	480f      	ldr	r0, [pc, #60]	; (97e8 <tx_event(transfer_struct*)+0x5c>)
    97ac:	f7ff fd48 	bl	9240 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    97b0:	1960      	adds	r0, r4, r5
	asm("dsb");
    97b2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    97b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    97ba:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    97be:	3420      	adds	r4, #32
	} while (location < end_addr);
    97c0:	42a0      	cmp	r0, r4
    97c2:	d8fa      	bhi.n	97ba <tx_event(transfer_struct*)+0x2e>
	asm("dsb");
    97c4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    97c8:	f3bf 8f6f 	isb	sy
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    97cc:	4906      	ldr	r1, [pc, #24]	; (97e8 <tx_event(transfer_struct*)+0x5c>)
    97ce:	2005      	movs	r0, #5
}
    97d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    97d4:	f7ff bd4c 	b.w	9270 <usb_transmit>
    97d8:	200216e8 	.word	0x200216e8
    97dc:	20022601 	.word	0x20022601
    97e0:	2000c640 	.word	0x2000c640
    97e4:	20200820 	.word	0x20200820
    97e8:	2000a520 	.word	0x2000a520

000097ec <usb_audio_configure>:
{
    97ec:	b538      	push	{r3, r4, r5, lr}
	usb_audio_overrun_count = 0;
    97ee:	492b      	ldr	r1, [pc, #172]	; (989c <usb_audio_configure+0xb0>)
	usb_audio_underrun_count = 0;
    97f0:	2400      	movs	r4, #0
    97f2:	4b2b      	ldr	r3, [pc, #172]	; (98a0 <usb_audio_configure+0xb4>)
	if (usb_high_speed) {
    97f4:	4a2b      	ldr	r2, [pc, #172]	; (98a4 <usb_audio_configure+0xb8>)
	usb_audio_underrun_count = 0;
    97f6:	601c      	str	r4, [r3, #0]
	usb_audio_overrun_count = 0;
    97f8:	600c      	str	r4, [r1, #0]
	if (usb_high_speed) {
    97fa:	7811      	ldrb	r1, [r2, #0]
	feedback_accumulator = 739875226; // 44.1 * 2^24
    97fc:	4b2a      	ldr	r3, [pc, #168]	; (98a8 <usb_audio_configure+0xbc>)
	if (usb_high_speed) {
    97fe:	42a1      	cmp	r1, r4
	feedback_accumulator = 739875226; // 44.1 * 2^24
    9800:	4a2a      	ldr	r2, [pc, #168]	; (98ac <usb_audio_configure+0xc0>)
		usb_audio_sync_nbytes = 4;
    9802:	4d2b      	ldr	r5, [pc, #172]	; (98b0 <usb_audio_configure+0xc4>)
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    9804:	4621      	mov	r1, r4
	feedback_accumulator = 739875226; // 44.1 * 2^24
    9806:	601a      	str	r2, [r3, #0]
	if (usb_high_speed) {
    9808:	bf0b      	itete	eq
    980a:	2303      	moveq	r3, #3
    980c:	2304      	movne	r3, #4
    980e:	200a      	moveq	r0, #10
    9810:	2008      	movne	r0, #8
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    9812:	2220      	movs	r2, #32
		usb_audio_sync_nbytes = 4;
    9814:	702b      	strb	r3, [r5, #0]
		usb_audio_sync_rshift = 8;
    9816:	4b27      	ldr	r3, [pc, #156]	; (98b4 <usb_audio_configure+0xc8>)
    9818:	7018      	strb	r0, [r3, #0]
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    981a:	4827      	ldr	r0, [pc, #156]	; (98b8 <usb_audio_configure+0xcc>)
    981c:	f002 ffee 	bl	c7fc <memset>
	usb_config_rx_iso(AUDIO_RX_ENDPOINT, AUDIO_RX_SIZE, 1, rx_event);
    9820:	2201      	movs	r2, #1
    9822:	21b4      	movs	r1, #180	; 0xb4
    9824:	2005      	movs	r0, #5
    9826:	4b25      	ldr	r3, [pc, #148]	; (98bc <usb_audio_configure+0xd0>)
    9828:	f7ff fca2 	bl	9170 <usb_config_rx_iso>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    982c:	4623      	mov	r3, r4
    982e:	22b4      	movs	r2, #180	; 0xb4
    9830:	4923      	ldr	r1, [pc, #140]	; (98c0 <usb_audio_configure+0xd4>)
    9832:	4821      	ldr	r0, [pc, #132]	; (98b8 <usb_audio_configure+0xcc>)
    9834:	f7ff fd04 	bl	9240 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9838:	4b21      	ldr	r3, [pc, #132]	; (98c0 <usb_audio_configure+0xd4>)
	uint32_t end_addr = (uint32_t)addr + size;
    983a:	f103 01b4 	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    983e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    9842:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9846:	f8c2 3f5c 	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    984a:	3320      	adds	r3, #32
	} while (location < end_addr);
    984c:	4299      	cmp	r1, r3
    984e:	d8fa      	bhi.n	9846 <usb_audio_configure+0x5a>
	asm("dsb");
    9850:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9854:	f3bf 8f6f 	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    9858:	4917      	ldr	r1, [pc, #92]	; (98b8 <usb_audio_configure+0xcc>)
    985a:	2005      	movs	r0, #5
    985c:	f7ff fd1c 	bl	9298 <usb_receive>
	memset(&sync_transfer, 0, sizeof(sync_transfer));
    9860:	2220      	movs	r2, #32
    9862:	2100      	movs	r1, #0
    9864:	4817      	ldr	r0, [pc, #92]	; (98c4 <usb_audio_configure+0xd8>)
    9866:	f002 ffc9 	bl	c7fc <memset>
	usb_config_tx_iso(AUDIO_SYNC_ENDPOINT, usb_audio_sync_nbytes, 1, sync_event);
    986a:	4b17      	ldr	r3, [pc, #92]	; (98c8 <usb_audio_configure+0xdc>)
    986c:	7829      	ldrb	r1, [r5, #0]
    986e:	2201      	movs	r2, #1
    9870:	2006      	movs	r0, #6
    9872:	f7ff fcaf 	bl	91d4 <usb_config_tx_iso>
	sync_event(NULL);
    9876:	2000      	movs	r0, #0
    9878:	f7ff fd6a 	bl	9350 <sync_event(transfer_struct*)>
	memset(&tx_transfer, 0, sizeof(tx_transfer));
    987c:	2220      	movs	r2, #32
    987e:	2100      	movs	r1, #0
    9880:	4812      	ldr	r0, [pc, #72]	; (98cc <usb_audio_configure+0xe0>)
    9882:	f002 ffbb 	bl	c7fc <memset>
	usb_config_tx_iso(AUDIO_TX_ENDPOINT, AUDIO_TX_SIZE, 1, tx_event);
    9886:	2005      	movs	r0, #5
    9888:	4b11      	ldr	r3, [pc, #68]	; (98d0 <usb_audio_configure+0xe4>)
    988a:	2201      	movs	r2, #1
    988c:	21b4      	movs	r1, #180	; 0xb4
    988e:	f7ff fca1 	bl	91d4 <usb_config_tx_iso>
	tx_event(NULL);
    9892:	2000      	movs	r0, #0
}
    9894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tx_event(NULL);
    9898:	f7ff bf78 	b.w	978c <tx_event(transfer_struct*)>
    989c:	200225a8 	.word	0x200225a8
    98a0:	200225ac 	.word	0x200225ac
    98a4:	20022605 	.word	0x20022605
    98a8:	200216e8 	.word	0x200216e8
    98ac:	2c19999a 	.word	0x2c19999a
    98b0:	20022600 	.word	0x20022600
    98b4:	20022601 	.word	0x20022601
    98b8:	2000a320 	.word	0x2000a320
    98bc:	00009619 	.word	0x00009619
    98c0:	20200840 	.word	0x20200840
    98c4:	2000a500 	.word	0x2000a500
    98c8:	00009351 	.word	0x00009351
    98cc:	2000a520 	.word	0x2000a520
    98d0:	0000978d 	.word	0x0000978d

000098d4 <usb_audio_get_feature>:
};

int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen)
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0xA1) { // should check bRequest, bChannel, and UnitID
    98d4:	7803      	ldrb	r3, [r0, #0]
    98d6:	2ba1      	cmp	r3, #161	; 0xa1
    98d8:	d001      	beq.n	98de <usb_audio_get_feature+0xa>
			if (setup.bCS==0x01) { // mute
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
				*datalen = 1;
				return 1;
			}
			else if (setup.bCS==0x02) { // volume
    98da:	2000      	movs	r0, #0
				*datalen = 2;
				return 1;
			}
	}
	return 0;
}
    98dc:	4770      	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    98de:	78c3      	ldrb	r3, [r0, #3]
    98e0:	7840      	ldrb	r0, [r0, #1]
			if (setup.bCS==0x01) { // mute
    98e2:	2b01      	cmp	r3, #1
    98e4:	d008      	beq.n	98f8 <usb_audio_get_feature+0x24>
			else if (setup.bCS==0x02) { // volume
    98e6:	2b02      	cmp	r3, #2
    98e8:	d1f7      	bne.n	98da <usb_audio_get_feature+0x6>
				if (setup.bRequest==0x81) { // GET_CURR
    98ea:	3881      	subs	r0, #129	; 0x81
    98ec:	2803      	cmp	r0, #3
    98ee:	d8f4      	bhi.n	98da <usb_audio_get_feature+0x6>
    98f0:	e8df f000 	tbb	[pc, r0]
    98f4:	0b13171b 	.word	0x0b13171b
{
    98f8:	b410      	push	{r4}
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    98fa:	4c0e      	ldr	r4, [pc, #56]	; (9934 <usb_audio_get_feature+0x60>)
				return 1;
    98fc:	4618      	mov	r0, r3
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    98fe:	6864      	ldr	r4, [r4, #4]
    9900:	700c      	strb	r4, [r1, #0]
}
    9902:	f85d 4b04 	ldr.w	r4, [sp], #4
				*datalen = 1;
    9906:	6013      	str	r3, [r2, #0]
}
    9908:	4770      	bx	lr
					data[0] = 1; // increment vol by by 1
    990a:	2301      	movs	r3, #1
    990c:	2000      	movs	r0, #0
    990e:	700b      	strb	r3, [r1, #0]
				*datalen = 2;
    9910:	2302      	movs	r3, #2
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    9912:	7048      	strb	r0, [r1, #1]
				return 1;
    9914:	2001      	movs	r0, #1
				*datalen = 2;
    9916:	6013      	str	r3, [r2, #0]
				return 1;
    9918:	4770      	bx	lr
					data[0] = FEATURE_MAX_VOLUME;  // max level, for range of 0 to MAX
    991a:	23ff      	movs	r3, #255	; 0xff
    991c:	2000      	movs	r0, #0
    991e:	700b      	strb	r3, [r1, #0]
					data[1] = 0;
    9920:	e7f6      	b.n	9910 <usb_audio_get_feature+0x3c>
					data[0] = 0;     // min level is 0
    9922:	2300      	movs	r3, #0
    9924:	4618      	mov	r0, r3
    9926:	700b      	strb	r3, [r1, #0]
					data[1] = 0;
    9928:	e7f2      	b.n	9910 <usb_audio_get_feature+0x3c>
					data[0] = AudioInputUSB::features.volume & 0xFF;
    992a:	4b02      	ldr	r3, [pc, #8]	; (9934 <usb_audio_get_feature+0x60>)
    992c:	6898      	ldr	r0, [r3, #8]
    992e:	7008      	strb	r0, [r1, #0]
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    9930:	7a58      	ldrb	r0, [r3, #9]
    9932:	e7ed      	b.n	9910 <usb_audio_get_feature+0x3c>
    9934:	2000887c 	.word	0x2000887c

00009938 <usb_audio_set_feature>:

int usb_audio_set_feature(void *stp, uint8_t *buf) 
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0x21) { // should check bRequest, bChannel and UnitID
    9938:	7803      	ldrb	r3, [r0, #0]
    993a:	2b21      	cmp	r3, #33	; 0x21
    993c:	d001      	beq.n	9942 <usb_audio_set_feature+0xa>
					AudioInputUSB::features.change = 1;
					return 1;
				}
			}
	}
	return 0;
    993e:	2000      	movs	r0, #0
}
    9940:	4770      	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    9942:	78c3      	ldrb	r3, [r0, #3]
    9944:	7842      	ldrb	r2, [r0, #1]
			if (setup.bCS==0x01) { // mute
    9946:	2b01      	cmp	r3, #1
    9948:	d009      	beq.n	995e <usb_audio_set_feature+0x26>
				if (setup.bRequest==0x01) { // SET_CUR
    994a:	2b02      	cmp	r3, #2
    994c:	d1f7      	bne.n	993e <usb_audio_set_feature+0x6>
    994e:	2a01      	cmp	r2, #1
    9950:	d1f5      	bne.n	993e <usb_audio_set_feature+0x6>
					AudioInputUSB::features.volume = buf[0];
    9952:	4b07      	ldr	r3, [pc, #28]	; (9970 <usb_audio_set_feature+0x38>)
					return 1;
    9954:	4610      	mov	r0, r2
					AudioInputUSB::features.volume = buf[0];
    9956:	7809      	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    9958:	601a      	str	r2, [r3, #0]
					AudioInputUSB::features.volume = buf[0];
    995a:	6099      	str	r1, [r3, #8]
					return 1;
    995c:	4770      	bx	lr
				if (setup.bRequest==0x01) { // SET_CUR
    995e:	2a01      	cmp	r2, #1
    9960:	d1ed      	bne.n	993e <usb_audio_set_feature+0x6>
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    9962:	4b03      	ldr	r3, [pc, #12]	; (9970 <usb_audio_set_feature+0x38>)
					return 1;
    9964:	4610      	mov	r0, r2
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    9966:	7809      	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    9968:	e9c3 2100 	strd	r2, r1, [r3]
					return 1;
    996c:	4770      	bx	lr
    996e:	bf00      	nop
    9970:	2000887c 	.word	0x2000887c

00009974 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9974:	4a12      	ldr	r2, [pc, #72]	; (99c0 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9976:	4b13      	ldr	r3, [pc, #76]	; (99c4 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9978:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    997c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    9980:	4298      	cmp	r0, r3
{
    9982:	b510      	push	{r4, lr}
    9984:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    9986:	d202      	bcs.n	998e <usb_init_serialnumber+0x1a>
    9988:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    998c:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    998e:	4c0e      	ldr	r4, [pc, #56]	; (99c8 <usb_init_serialnumber+0x54>)
    9990:	a901      	add	r1, sp, #4
    9992:	220a      	movs	r2, #10
    9994:	f7fe fd38 	bl	8408 <ultoa>
	for (i=0; i<10; i++) {
    9998:	a901      	add	r1, sp, #4
    999a:	2300      	movs	r3, #0
    999c:	4620      	mov	r0, r4
		char c = buf[i];
    999e:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    99a2:	3301      	adds	r3, #1
		if (!c) break;
    99a4:	b13a      	cbz	r2, 99b6 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    99a6:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    99a8:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    99ac:	d1f7      	bne.n	999e <usb_init_serialnumber+0x2a>
    99ae:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    99b0:	7023      	strb	r3, [r4, #0]
}
    99b2:	b004      	add	sp, #16
    99b4:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    99b6:	005b      	lsls	r3, r3, #1
    99b8:	b2db      	uxtb	r3, r3
    99ba:	7023      	strb	r3, [r4, #0]
}
    99bc:	b004      	add	sp, #16
    99be:	bd10      	pop	{r4, pc}
    99c0:	401f4400 	.word	0x401f4400
    99c4:	00989680 	.word	0x00989680
    99c8:	20008e54 	.word	0x20008e54

000099cc <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    99cc:	f000 bbe4 	b.w	a198 <usb_serial_flush_input>

000099d0 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    99d0:	f000 bbd6 	b.w	a180 <usb_serial_available>

000099d4 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    99d4:	f000 bc72 	b.w	a2bc <usb_serial_flush_output>

000099d8 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    99d8:	f000 bc48 	b.w	a26c <usb_serial_write_buffer_free>

000099dc <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    99dc:	4608      	mov	r0, r1
    99de:	4611      	mov	r1, r2
    99e0:	f000 bc38 	b.w	a254 <usb_serial_write>

000099e4 <rx_queue_transfer>:




static void rx_queue_transfer(int i)
{
    99e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    99e6:	4c14      	ldr	r4, [pc, #80]	; (9a38 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    99e8:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    99ec:	4e13      	ldr	r6, [pc, #76]	; (9a3c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    99ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    99f2:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    99f6:	4f12      	ldr	r7, [pc, #72]	; (9a40 <rx_queue_transfer+0x5c>)
    99f8:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    99fc:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    99fe:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9a02:	4621      	mov	r1, r4
    9a04:	883a      	ldrh	r2, [r7, #0]
    9a06:	4630      	mov	r0, r6
    9a08:	f7ff fc1a 	bl	9240 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    9a0c:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    9a0e:	4423      	add	r3, r4
	asm("dsb");
    9a10:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    9a14:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    9a18:	3420      	adds	r4, #32
	} while (location < end_addr);
    9a1a:	42a3      	cmp	r3, r4
    9a1c:	d8fa      	bhi.n	9a14 <rx_queue_transfer+0x30>
	asm("dsb");
    9a1e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9a22:	f3bf 8f6f 	isb	sy
	usb_receive(MIDI_RX_ENDPOINT, rx_transfer + i);
    9a26:	2004      	movs	r0, #4
    9a28:	4631      	mov	r1, r6
    9a2a:	f7ff fc35 	bl	9298 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9a2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    9a32:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    9a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a38:	20200b20 	.word	0x20200b20
    9a3c:	2000a340 	.word	0x2000a340
    9a40:	200225da 	.word	0x200225da

00009a44 <rx_event>:


// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9a44:	6842      	ldr	r2, [r0, #4]
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
    9a46:	f64f 71fc 	movw	r1, #65532	; 0xfffc
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9a4a:	4b11      	ldr	r3, [pc, #68]	; (9a90 <rx_event+0x4c>)
    9a4c:	f3c2 420e 	ubfx	r2, r2, #16, #15
	int i = t->callback_param;
    9a50:	69c0      	ldr	r0, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9a52:	881b      	ldrh	r3, [r3, #0]
    9a54:	1a9b      	subs	r3, r3, r2
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    9a56:	400b      	ands	r3, r1
    9a58:	d017      	beq.n	9a8a <rx_event+0x46>
		uint32_t head = rx_head;
		rx_count[i] = len;
    9a5a:	490e      	ldr	r1, [pc, #56]	; (9a94 <rx_event+0x50>)
{
    9a5c:	b430      	push	{r4, r5}
		uint32_t head = rx_head;
    9a5e:	4c0e      	ldr	r4, [pc, #56]	; (9a98 <rx_event+0x54>)
		rx_index[i] = 0;
    9a60:	4d0e      	ldr	r5, [pc, #56]	; (9a9c <rx_event+0x58>)
		uint32_t head = rx_head;
    9a62:	7822      	ldrb	r2, [r4, #0]
		rx_count[i] = len;
    9a64:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
		rx_index[i] = 0;
    9a68:	2100      	movs	r1, #0
		if (++head > RX_NUM) head = 0;
    9a6a:	3201      	adds	r2, #1
		rx_index[i] = 0;
    9a6c:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
		if (++head > RX_NUM) head = 0;
    9a70:	2a06      	cmp	r2, #6
		rx_list[head] = i;
		rx_head = head;
    9a72:	bf94      	ite	ls
    9a74:	b2d1      	uxtbls	r1, r2
		if (++head > RX_NUM) head = 0;
    9a76:	460a      	movhi	r2, r1
		rx_head = head;
    9a78:	7021      	strb	r1, [r4, #0]
		rx_available += len;
    9a7a:	4909      	ldr	r1, [pc, #36]	; (9aa0 <rx_event+0x5c>)
    9a7c:	680c      	ldr	r4, [r1, #0]
    9a7e:	4423      	add	r3, r4
    9a80:	600b      	str	r3, [r1, #0]
		rx_list[head] = i;
    9a82:	4b08      	ldr	r3, [pc, #32]	; (9aa4 <rx_event+0x60>)
    9a84:	5498      	strb	r0, [r3, r2]
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    9a86:	bc30      	pop	{r4, r5}
    9a88:	4770      	bx	lr
		rx_queue_transfer(i);
    9a8a:	f7ff bfab 	b.w	99e4 <rx_queue_transfer>
    9a8e:	bf00      	nop
    9a90:	200225da 	.word	0x200225da
    9a94:	20022024 	.word	0x20022024
    9a98:	200225f4 	.word	0x200225f4
    9a9c:	20022040 	.word	0x20022040
    9aa0:	2002201c 	.word	0x2002201c
    9aa4:	2002205c 	.word	0x2002205c

00009aa8 <usb_midi_configure>:
	if (usb_high_speed) {
    9aa8:	4b21      	ldr	r3, [pc, #132]	; (9b30 <usb_midi_configure+0x88>)
{
    9aaa:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    9aac:	781b      	ldrb	r3, [r3, #0]
    9aae:	2b00      	cmp	r3, #0
    9ab0:	d03b      	beq.n	9b2a <usb_midi_configure+0x82>
    9ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
    9ab6:	461e      	mov	r6, r3
		rx_packet_size = MIDI_RX_SIZE_480;
    9ab8:	491e      	ldr	r1, [pc, #120]	; (9b34 <usb_midi_configure+0x8c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9aba:	2280      	movs	r2, #128	; 0x80
		tx_packet_size = MIDI_TX_SIZE_480;
    9abc:	4d1e      	ldr	r5, [pc, #120]	; (9b38 <usb_midi_configure+0x90>)
	tx_head = 0;
    9abe:	2400      	movs	r4, #0
		rx_packet_size = MIDI_RX_SIZE_480;
    9ac0:	800b      	strh	r3, [r1, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9ac2:	2100      	movs	r1, #0
    9ac4:	481d      	ldr	r0, [pc, #116]	; (9b3c <usb_midi_configure+0x94>)
		tx_packet_size = MIDI_TX_SIZE_480;
    9ac6:	802b      	strh	r3, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9ac8:	f002 fe98 	bl	c7fc <memset>
	tx_head = 0;
    9acc:	4a1c      	ldr	r2, [pc, #112]	; (9b40 <usb_midi_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9ace:	4621      	mov	r1, r4
	tx_available = 0;
    9ad0:	4b1c      	ldr	r3, [pc, #112]	; (9b44 <usb_midi_configure+0x9c>)
	tx_head = 0;
    9ad2:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9ad4:	22c0      	movs	r2, #192	; 0xc0
    9ad6:	481c      	ldr	r0, [pc, #112]	; (9b48 <usb_midi_configure+0xa0>)
	tx_available = 0;
    9ad8:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9ada:	f002 fe8f 	bl	c7fc <memset>
	memset(rx_count, 0, sizeof(rx_count));
    9ade:	4a1b      	ldr	r2, [pc, #108]	; (9b4c <usb_midi_configure+0xa4>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9ae0:	4631      	mov	r1, r6
	memset(rx_index, 0, sizeof(rx_index));
    9ae2:	4b1b      	ldr	r3, [pc, #108]	; (9b50 <usb_midi_configure+0xa8>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9ae4:	2004      	movs	r0, #4
	memset(rx_count, 0, sizeof(rx_count));
    9ae6:	6094      	str	r4, [r2, #8]
	memset(rx_index, 0, sizeof(rx_index));
    9ae8:	609c      	str	r4, [r3, #8]
	memset(rx_count, 0, sizeof(rx_count));
    9aea:	e9c2 4400 	strd	r4, r4, [r2]
	rx_head = 0;
    9aee:	4a19      	ldr	r2, [pc, #100]	; (9b54 <usb_midi_configure+0xac>)
	memset(rx_index, 0, sizeof(rx_index));
    9af0:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    9af4:	7014      	strb	r4, [r2, #0]
	rx_tail = 0;
    9af6:	4b18      	ldr	r3, [pc, #96]	; (9b58 <usb_midi_configure+0xb0>)
	rx_available = 0;
    9af8:	4a18      	ldr	r2, [pc, #96]	; (9b5c <usb_midi_configure+0xb4>)
	rx_tail = 0;
    9afa:	701c      	strb	r4, [r3, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9afc:	4b18      	ldr	r3, [pc, #96]	; (9b60 <usb_midi_configure+0xb8>)
	rx_available = 0;
    9afe:	6014      	str	r4, [r2, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9b00:	4622      	mov	r2, r4
    9b02:	f7ff fad1 	bl	90a8 <usb_config_rx>
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
    9b06:	4623      	mov	r3, r4
    9b08:	4622      	mov	r2, r4
    9b0a:	8829      	ldrh	r1, [r5, #0]
    9b0c:	2004      	movs	r0, #4
    9b0e:	f7ff fafd 	bl	910c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    9b12:	4620      	mov	r0, r4
    9b14:	3401      	adds	r4, #1
    9b16:	f7ff ff65 	bl	99e4 <rx_queue_transfer>
    9b1a:	2c06      	cmp	r4, #6
    9b1c:	d1f9      	bne.n	9b12 <usb_midi_configure+0x6a>
	transmit_previous_timeout = 0;
    9b1e:	2300      	movs	r3, #0
    9b20:	4910      	ldr	r1, [pc, #64]	; (9b64 <usb_midi_configure+0xbc>)
	tx_noautoflush = 0;
    9b22:	4a11      	ldr	r2, [pc, #68]	; (9b68 <usb_midi_configure+0xc0>)
	transmit_previous_timeout = 0;
    9b24:	700b      	strb	r3, [r1, #0]
	tx_noautoflush = 0;
    9b26:	7013      	strb	r3, [r2, #0]
}
    9b28:	bd70      	pop	{r4, r5, r6, pc}
    9b2a:	2340      	movs	r3, #64	; 0x40
    9b2c:	461e      	mov	r6, r3
    9b2e:	e7c3      	b.n	9ab8 <usb_midi_configure+0x10>
    9b30:	20022605 	.word	0x20022605
    9b34:	200225da 	.word	0x200225da
    9b38:	200225e2 	.word	0x200225e2
    9b3c:	2000a540 	.word	0x2000a540
    9b40:	200225fb 	.word	0x200225fb
    9b44:	200225de 	.word	0x200225de
    9b48:	2000a340 	.word	0x2000a340
    9b4c:	20022024 	.word	0x20022024
    9b50:	20022040 	.word	0x20022040
    9b54:	200225f4 	.word	0x200225f4
    9b58:	200225f6 	.word	0x200225f6
    9b5c:	2002201c 	.word	0x2002201c
    9b60:	00009a45 	.word	0x00009a45
    9b64:	200225f9 	.word	0x200225f9
    9b68:	200225fd 	.word	0x200225fd

00009b6c <usb_midi_flush_output>:
{
    9b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tx_noautoflush == 0 && tx_available > 0) {
    9b70:	4b21      	ldr	r3, [pc, #132]	; (9bf8 <usb_midi_flush_output+0x8c>)
    9b72:	781d      	ldrb	r5, [r3, #0]
    9b74:	b915      	cbnz	r5, 9b7c <usb_midi_flush_output+0x10>
    9b76:	4e21      	ldr	r6, [pc, #132]	; (9bfc <usb_midi_flush_output+0x90>)
    9b78:	8833      	ldrh	r3, [r6, #0]
    9b7a:	b90b      	cbnz	r3, 9b80 <usb_midi_flush_output+0x14>
}
    9b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint32_t head = tx_head;
    9b80:	f8df 8088 	ldr.w	r8, [pc, #136]	; 9c0c <usb_midi_flush_output+0xa0>
		transfer_t *xfer = tx_transfer + head;
    9b84:	4a1e      	ldr	r2, [pc, #120]	; (9c00 <usb_midi_flush_output+0x94>)
		uint32_t head = tx_head;
    9b86:	f898 7000 	ldrb.w	r7, [r8]
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    9b8a:	4c1e      	ldr	r4, [pc, #120]	; (9c04 <usb_midi_flush_output+0x98>)
		transfer_t *xfer = tx_transfer + head;
    9b8c:	eb02 1947 	add.w	r9, r2, r7, lsl #5
		uint32_t len = tx_packet_size - tx_available;
    9b90:	4a1d      	ldr	r2, [pc, #116]	; (9c08 <usb_midi_flush_output+0x9c>)
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    9b92:	eb04 2447 	add.w	r4, r4, r7, lsl #9
		uint32_t len = tx_packet_size - tx_available;
    9b96:	8812      	ldrh	r2, [r2, #0]
		usb_prepare_transfer(xfer, txbuf, len, 0);
    9b98:	4648      	mov	r0, r9
    9b9a:	4621      	mov	r1, r4
    9b9c:	1ad2      	subs	r2, r2, r3
    9b9e:	462b      	mov	r3, r5
    9ba0:	f7ff fb4e 	bl	9240 <usb_prepare_transfer>
	asm("dsb");
    9ba4:	f3bf 8f4f 	dsb	sy
    9ba8:	f104 0220 	add.w	r2, r4, #32
	uint32_t end_addr = (uint32_t)addr + size;
    9bac:	f504 7300 	add.w	r3, r4, #512	; 0x200
    9bb0:	4293      	cmp	r3, r2
    9bb2:	bf34      	ite	cc
    9bb4:	2301      	movcc	r3, #1
    9bb6:	2310      	movcs	r3, #16
		SCB_CACHE_DCCIMVAC = location;
    9bb8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9bbc:	eb04 1343 	add.w	r3, r4, r3, lsl #5
    9bc0:	f8c2 4f70 	str.w	r4, [r2, #3952]	; 0xf70
		location += 32;
    9bc4:	3420      	adds	r4, #32
	} while (location < end_addr);
    9bc6:	429c      	cmp	r4, r3
    9bc8:	d1fa      	bne.n	9bc0 <usb_midi_flush_output+0x54>
	asm("dsb");
    9bca:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9bce:	f3bf 8f6f 	isb	sy
		if (++head >= TX_NUM) head = 0;
    9bd2:	3701      	adds	r7, #1
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
    9bd4:	4649      	mov	r1, r9
    9bd6:	2004      	movs	r0, #4
    9bd8:	f7ff fb4a 	bl	9270 <usb_transmit>
		if (++head >= TX_NUM) head = 0;
    9bdc:	2f03      	cmp	r7, #3
		tx_available = 0;
    9bde:	f04f 0300 	mov.w	r3, #0
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    9be2:	f04f 0002 	mov.w	r0, #2
		tx_head = head;
    9be6:	bf98      	it	ls
    9be8:	b2fd      	uxtbls	r5, r7
		tx_available = 0;
    9bea:	8033      	strh	r3, [r6, #0]
		tx_head = head;
    9bec:	f888 5000 	strb.w	r5, [r8]
}
    9bf0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    9bf4:	f7fe bea2 	b.w	893c <usb_stop_sof_interrupts>
    9bf8:	200225fd 	.word	0x200225fd
    9bfc:	200225de 	.word	0x200225de
    9c00:	2000a540 	.word	0x2000a540
    9c04:	20201720 	.word	0x20201720
    9c08:	200225e2 	.word	0x200225e2
    9c0c:	200225fb 	.word	0x200225fb

00009c10 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9c12:	4c14      	ldr	r4, [pc, #80]	; (9c64 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9c14:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9c18:	4e13      	ldr	r6, [pc, #76]	; (9c68 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9c1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9c1e:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9c22:	4f12      	ldr	r7, [pc, #72]	; (9c6c <rx_queue_transfer+0x5c>)
    9c24:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    9c28:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9c2a:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9c2e:	4621      	mov	r1, r4
    9c30:	883a      	ldrh	r2, [r7, #0]
    9c32:	4630      	mov	r0, r6
    9c34:	f7ff fb04 	bl	9240 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    9c38:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    9c3a:	4423      	add	r3, r4
	asm("dsb");
    9c3c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    9c40:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    9c44:	3420      	adds	r4, #32
	} while (location < end_addr);
    9c46:	42a3      	cmp	r3, r4
    9c48:	d8fa      	bhi.n	9c40 <rx_queue_transfer+0x30>
	asm("dsb");
    9c4a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9c4e:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    9c52:	2003      	movs	r0, #3
    9c54:	4631      	mov	r1, r6
    9c56:	f7ff fb1f 	bl	9298 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9c5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    9c5e:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    9c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c64:	20009320 	.word	0x20009320
    9c68:	2000a400 	.word	0x2000a400
    9c6c:	200225dc 	.word	0x200225dc

00009c70 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9c70:	4b24      	ldr	r3, [pc, #144]	; (9d04 <rx_event+0x94>)
{
    9c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9c76:	881c      	ldrh	r4, [r3, #0]
    9c78:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    9c7a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9c7c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    9c80:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    9c82:	2c00      	cmp	r4, #0
    9c84:	dd24      	ble.n	9cd0 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    9c86:	4920      	ldr	r1, [pc, #128]	; (9d08 <rx_event+0x98>)
		if (head != rx_tail) {
    9c88:	4820      	ldr	r0, [pc, #128]	; (9d0c <rx_event+0x9c>)
		uint32_t head = rx_head;
    9c8a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    9c8c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    9c8e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    9c90:	4e1f      	ldr	r6, [pc, #124]	; (9d10 <rx_event+0xa0>)
		if (head != rx_tail) {
    9c92:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    9c94:	481f      	ldr	r0, [pc, #124]	; (9d14 <rx_event+0xa4>)
		if (head != rx_tail) {
    9c96:	d007      	beq.n	9ca8 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    9c98:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    9c9c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    9ca0:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    9ca4:	4294      	cmp	r4, r2
    9ca6:	d918      	bls.n	9cda <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    9ca8:	3301      	adds	r3, #1
		rx_index[i] = 0;
    9caa:	2200      	movs	r2, #0
		rx_count[i] = len;
    9cac:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    9cb0:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    9cb2:	4e19      	ldr	r6, [pc, #100]	; (9d18 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    9cb4:	bf88      	it	hi
    9cb6:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    9cb8:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    9cbc:	bf98      	it	ls
    9cbe:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    9cc0:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    9cc2:	4b16      	ldr	r3, [pc, #88]	; (9d1c <rx_event+0xac>)
		rx_head = head;
    9cc4:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    9cc6:	681a      	ldr	r2, [r3, #0]
    9cc8:	4414      	add	r4, r2
    9cca:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    9ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    9cd0:	4628      	mov	r0, r5
}
    9cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    9cd6:	f7ff bf9b 	b.w	9c10 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9cda:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    9cde:	4910      	ldr	r1, [pc, #64]	; (9d20 <rx_event+0xb0>)
    9ce0:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    9ce2:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9ce4:	4408      	add	r0, r1
    9ce6:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    9cea:	f7fe faef 	bl	82cc <memcpy>
				rx_available += len;
    9cee:	4a0b      	ldr	r2, [pc, #44]	; (9d1c <rx_event+0xac>)
				rx_queue_transfer(i);
    9cf0:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    9cf2:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    9cf6:	6813      	ldr	r3, [r2, #0]
    9cf8:	4423      	add	r3, r4
}
    9cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    9cfe:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    9d00:	f7ff bf86 	b.w	9c10 <rx_queue_transfer>
    9d04:	200225dc 	.word	0x200225dc
    9d08:	200225f5 	.word	0x200225f5
    9d0c:	200225f7 	.word	0x200225f7
    9d10:	20022030 	.word	0x20022030
    9d14:	20022064 	.word	0x20022064
    9d18:	2002204c 	.word	0x2002204c
    9d1c:	20022020 	.word	0x20022020
    9d20:	20009320 	.word	0x20009320

00009d24 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    9d24:	4b1d      	ldr	r3, [pc, #116]	; (9d9c <usb_serial_flush_callback+0x78>)
    9d26:	781a      	ldrb	r2, [r3, #0]
    9d28:	2a00      	cmp	r2, #0
    9d2a:	d136      	bne.n	9d9a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    9d2c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    9d30:	4a1b      	ldr	r2, [pc, #108]	; (9da0 <usb_serial_flush_callback+0x7c>)
    9d32:	7812      	ldrb	r2, [r2, #0]
    9d34:	b38a      	cbz	r2, 9d9a <usb_serial_flush_callback+0x76>
{
    9d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    9d3a:	4d1a      	ldr	r5, [pc, #104]	; (9da4 <usb_serial_flush_callback+0x80>)
    9d3c:	882a      	ldrh	r2, [r5, #0]
    9d3e:	b352      	cbz	r2, 9d96 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9d40:	4e19      	ldr	r6, [pc, #100]	; (9da8 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    9d42:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    9d46:	4f19      	ldr	r7, [pc, #100]	; (9dac <usb_serial_flush_callback+0x88>)
    9d48:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9d4a:	4c19      	ldr	r4, [pc, #100]	; (9db0 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    9d4c:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9d50:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9d54:	4642      	mov	r2, r8
    9d56:	4638      	mov	r0, r7
    9d58:	4621      	mov	r1, r4
    9d5a:	f7ff fa71 	bl	9240 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    9d5e:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    9d62:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    9d66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9d6a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    9d6e:	3420      	adds	r4, #32
	} while (location < end_addr);
    9d70:	42a2      	cmp	r2, r4
    9d72:	d8fa      	bhi.n	9d6a <usb_serial_flush_callback+0x46>
	asm("dsb");
    9d74:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9d78:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9d7c:	2003      	movs	r0, #3
    9d7e:	4639      	mov	r1, r7
    9d80:	f7ff fa76 	bl	9270 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9d84:	7833      	ldrb	r3, [r6, #0]
    9d86:	3301      	adds	r3, #1
    9d88:	b2db      	uxtb	r3, r3
    9d8a:	2b03      	cmp	r3, #3
    9d8c:	bf88      	it	hi
    9d8e:	2300      	movhi	r3, #0
    9d90:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    9d92:	2300      	movs	r3, #0
    9d94:	802b      	strh	r3, [r5, #0]
}
    9d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9d9a:	4770      	bx	lr
    9d9c:	200225fe 	.word	0x200225fe
    9da0:	20022604 	.word	0x20022604
    9da4:	200225e0 	.word	0x200225e0
    9da8:	200225fc 	.word	0x200225fc
    9dac:	2000a5c0 	.word	0x2000a5c0
    9db0:	2000a640 	.word	0x2000a640

00009db4 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    9db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9db8:	b085      	sub	sp, #20
	while (size > 0) {
    9dba:	e9cd 1001 	strd	r1, r0, [sp, #4]
    9dbe:	2900      	cmp	r1, #0
    9dc0:	f000 80bf 	beq.w	9f42 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    9dc4:	2300      	movs	r3, #0
    9dc6:	4c60      	ldr	r4, [pc, #384]	; (9f48 <usb_serial_write.part.0+0x194>)
    9dc8:	f8df 8198 	ldr.w	r8, [pc, #408]	; 9f64 <usb_serial_write.part.0+0x1b0>
    9dcc:	f8df a198 	ldr.w	sl, [pc, #408]	; 9f68 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    9dd0:	4f5e      	ldr	r7, [pc, #376]	; (9f4c <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    9dd2:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    9dd4:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    9dd6:	4a5e      	ldr	r2, [pc, #376]	; (9f50 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    9dd8:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    9dda:	4b5e      	ldr	r3, [pc, #376]	; (9f54 <usb_serial_write.part.0+0x1a0>)
    9ddc:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    9dde:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    9de2:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    9de6:	2b00      	cmp	r3, #0
    9de8:	f040 80a7 	bne.w	9f3a <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    9dec:	461e      	mov	r6, r3
		int waiting=0;
    9dee:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    9df0:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    9df2:	4648      	mov	r0, r9
    9df4:	f7ff fa5e 	bl	92b4 <usb_transfer_status>
			if (!(status & 0x80)) {
    9df8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    9dfc:	f000 808c 	beq.w	9f18 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    9e00:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    9e04:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    9e08:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    9e0c:	b905      	cbnz	r5, 9e10 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    9e0e:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    9e10:	2b00      	cmp	r3, #0
    9e12:	d17d      	bne.n	9f10 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9e14:	683b      	ldr	r3, [r7, #0]
    9e16:	1b9b      	subs	r3, r3, r6
    9e18:	2b78      	cmp	r3, #120	; 0x78
    9e1a:	f200 8087 	bhi.w	9f2c <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    9e1e:	4b4e      	ldr	r3, [pc, #312]	; (9f58 <usb_serial_write.part.0+0x1a4>)
    9e20:	781b      	ldrb	r3, [r3, #0]
    9e22:	2b00      	cmp	r3, #0
    9e24:	d074      	beq.n	9f10 <usb_serial_write.part.0+0x15c>
			yield();
    9e26:	f000 fa93 	bl	a350 <yield>
			tx_noautoflush = 1;
    9e2a:	2201      	movs	r2, #1
		while (!tx_available) {
    9e2c:	f8b8 3000 	ldrh.w	r3, [r8]
    9e30:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    9e32:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    9e34:	2b00      	cmp	r3, #0
    9e36:	d0dc      	beq.n	9df2 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9e38:	4a46      	ldr	r2, [pc, #280]	; (9f54 <usb_serial_write.part.0+0x1a0>)
    9e3a:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    9e3e:	7811      	ldrb	r1, [r2, #0]
    9e40:	461a      	mov	r2, r3
    9e42:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    9e46:	4d45      	ldr	r5, [pc, #276]	; (9f5c <usb_serial_write.part.0+0x1a8>)
    9e48:	02c9      	lsls	r1, r1, #11
    9e4a:	4428      	add	r0, r5
		if (size >= tx_available) {
    9e4c:	9d01      	ldr	r5, [sp, #4]
    9e4e:	4295      	cmp	r5, r2
    9e50:	d217      	bcs.n	9e82 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    9e52:	9303      	str	r3, [sp, #12]
    9e54:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    9e58:	462a      	mov	r2, r5
    9e5a:	f7fe fa37 	bl	82cc <memcpy>
			tx_available -= size;
    9e5e:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9e60:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    9e64:	1b5b      	subs	r3, r3, r5
    9e66:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9e6a:	4b3d      	ldr	r3, [pc, #244]	; (9f60 <usb_serial_write.part.0+0x1ac>)
    9e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    9e70:	f3bf 8f4f 	dsb	sy
			sent += size;
    9e74:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    9e76:	2300      	movs	r3, #0
			sent += size;
    9e78:	4428      	add	r0, r5
		tx_noautoflush = 0;
    9e7a:	7023      	strb	r3, [r4, #0]
}
    9e7c:	b005      	add	sp, #20
    9e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9e82:	4b36      	ldr	r3, [pc, #216]	; (9f5c <usb_serial_write.part.0+0x1a8>)
    9e84:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    9e86:	9902      	ldr	r1, [sp, #8]
    9e88:	f7fe fa20 	bl	82cc <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    9e8c:	2300      	movs	r3, #0
    9e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9e92:	4629      	mov	r1, r5
    9e94:	4648      	mov	r0, r9
    9e96:	f7ff f9d3 	bl	9240 <usb_prepare_transfer>
	asm("dsb");
    9e9a:	f3bf 8f4f 	dsb	sy
    9e9e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    9ea2:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    9ea6:	4293      	cmp	r3, r2
    9ea8:	bf34      	ite	cc
    9eaa:	2301      	movcc	r3, #1
    9eac:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    9eae:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9eb2:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    9eb6:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    9eba:	3520      	adds	r5, #32
	} while (location < end_addr);
    9ebc:	42ab      	cmp	r3, r5
    9ebe:	d1fa      	bne.n	9eb6 <usb_serial_write.part.0+0x102>
	asm("dsb");
    9ec0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9ec4:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    9ec8:	2003      	movs	r0, #3
    9eca:	4649      	mov	r1, r9
    9ecc:	f7ff f9d0 	bl	9270 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    9ed0:	4a20      	ldr	r2, [pc, #128]	; (9f54 <usb_serial_write.part.0+0x1a0>)
    9ed2:	7813      	ldrb	r3, [r2, #0]
    9ed4:	3301      	adds	r3, #1
    9ed6:	b2db      	uxtb	r3, r3
    9ed8:	2b03      	cmp	r3, #3
    9eda:	bf84      	itt	hi
    9edc:	2300      	movhi	r3, #0
    9ede:	4a1d      	ldrhi	r2, [pc, #116]	; (9f54 <usb_serial_write.part.0+0x1a0>)
    9ee0:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    9ee2:	f8b8 3000 	ldrh.w	r3, [r8]
    9ee6:	9a01      	ldr	r2, [sp, #4]
    9ee8:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    9eea:	9a00      	ldr	r2, [sp, #0]
    9eec:	441a      	add	r2, r3
			size -= tx_available;
    9eee:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    9ef0:	9200      	str	r2, [sp, #0]
			data += tx_available;
    9ef2:	9a02      	ldr	r2, [sp, #8]
    9ef4:	441a      	add	r2, r3
			tx_available = 0;
    9ef6:	2300      	movs	r3, #0
			data += tx_available;
    9ef8:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    9efa:	4a19      	ldr	r2, [pc, #100]	; (9f60 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    9efc:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    9f00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    9f04:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    9f08:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    9f0a:	2900      	cmp	r1, #0
    9f0c:	f47f af62 	bne.w	9dd4 <usb_serial_write.part.0+0x20>
	return sent;
    9f10:	9800      	ldr	r0, [sp, #0]
}
    9f12:	b005      	add	sp, #20
    9f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    9f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9f1c:	4b0d      	ldr	r3, [pc, #52]	; (9f54 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    9f1e:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9f22:	7819      	ldrb	r1, [r3, #0]
				break;
    9f24:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    9f26:	f8a8 2000 	strh.w	r2, [r8]
				break;
    9f2a:	e78a      	b.n	9e42 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    9f2c:	2301      	movs	r3, #1
				return sent;
    9f2e:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    9f30:	f88a 3000 	strb.w	r3, [sl]
}
    9f34:	b005      	add	sp, #20
    9f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9f3a:	461a      	mov	r2, r3
    9f3c:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    9f40:	e77f      	b.n	9e42 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    9f42:	9801      	ldr	r0, [sp, #4]
	return sent;
    9f44:	e7e5      	b.n	9f12 <usb_serial_write.part.0+0x15e>
    9f46:	bf00      	nop
    9f48:	200225fe 	.word	0x200225fe
    9f4c:	20022554 	.word	0x20022554
    9f50:	2000a5c0 	.word	0x2000a5c0
    9f54:	200225fc 	.word	0x200225fc
    9f58:	20022604 	.word	0x20022604
    9f5c:	2000a640 	.word	0x2000a640
    9f60:	402e0000 	.word	0x402e0000
    9f64:	200225e0 	.word	0x200225e0
    9f68:	200225fa 	.word	0x200225fa

00009f6c <usb_serial_reset>:
}
    9f6c:	4770      	bx	lr
    9f6e:	bf00      	nop

00009f70 <usb_serial_configure>:
	if (usb_high_speed) {
    9f70:	4b2a      	ldr	r3, [pc, #168]	; (a01c <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9f72:	2100      	movs	r1, #0
    9f74:	2280      	movs	r2, #128	; 0x80
    9f76:	482a      	ldr	r0, [pc, #168]	; (a020 <usb_serial_configure+0xb0>)
{
    9f78:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    9f7a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    9f7c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    9f7e:	4d29      	ldr	r5, [pc, #164]	; (a024 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    9f80:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    9f82:	4e29      	ldr	r6, [pc, #164]	; (a028 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    9f84:	bf0c      	ite	eq
    9f86:	2340      	moveq	r3, #64	; 0x40
    9f88:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    9f8c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    9f8e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9f90:	f002 fc34 	bl	c7fc <memset>
	tx_head = 0;
    9f94:	4a25      	ldr	r2, [pc, #148]	; (a02c <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9f96:	4621      	mov	r1, r4
	tx_available = 0;
    9f98:	4b25      	ldr	r3, [pc, #148]	; (a030 <usb_serial_configure+0xc0>)
	tx_head = 0;
    9f9a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
    9fa0:	4824      	ldr	r0, [pc, #144]	; (a034 <usb_serial_configure+0xc4>)
	tx_available = 0;
    9fa2:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9fa4:	f002 fc2a 	bl	c7fc <memset>
	memset(rx_count, 0, sizeof(rx_count));
    9fa8:	4a23      	ldr	r2, [pc, #140]	; (a038 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9faa:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    9fac:	4b23      	ldr	r3, [pc, #140]	; (a03c <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9fae:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    9fb0:	e9c2 4400 	strd	r4, r4, [r2]
    9fb4:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    9fb8:	4a21      	ldr	r2, [pc, #132]	; (a040 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    9fba:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    9fbe:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    9fc0:	4a20      	ldr	r2, [pc, #128]	; (a044 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    9fc2:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    9fc6:	4b20      	ldr	r3, [pc, #128]	; (a048 <usb_serial_configure+0xd8>)
    9fc8:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9fca:	4623      	mov	r3, r4
	rx_available = 0;
    9fcc:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9fce:	4622      	mov	r2, r4
    9fd0:	f7ff f89c 	bl	910c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9fd4:	4622      	mov	r2, r4
    9fd6:	8831      	ldrh	r1, [r6, #0]
    9fd8:	2003      	movs	r0, #3
    9fda:	4b1c      	ldr	r3, [pc, #112]	; (a04c <usb_serial_configure+0xdc>)
    9fdc:	f7ff f864 	bl	90a8 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    9fe0:	4623      	mov	r3, r4
    9fe2:	2201      	movs	r2, #1
    9fe4:	8829      	ldrh	r1, [r5, #0]
    9fe6:	2003      	movs	r0, #3
    9fe8:	f7ff f890 	bl	910c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    9fec:	4620      	mov	r0, r4
    9fee:	3401      	adds	r4, #1
    9ff0:	f7ff fe0e 	bl	9c10 <rx_queue_transfer>
    9ff4:	2c08      	cmp	r4, #8
    9ff6:	d1f9      	bne.n	9fec <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    9ff8:	4b15      	ldr	r3, [pc, #84]	; (a050 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    9ffa:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    9ffc:	4815      	ldr	r0, [pc, #84]	; (a054 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    9ffe:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    a000:	4c15      	ldr	r4, [pc, #84]	; (a058 <usb_serial_configure+0xe8>)
    a002:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    a004:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a00c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    a010:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    a014:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    a018:	bd70      	pop	{r4, r5, r6, pc}
    a01a:	bf00      	nop
    a01c:	20022605 	.word	0x20022605
    a020:	2000a5c0 	.word	0x2000a5c0
    a024:	200225e4 	.word	0x200225e4
    a028:	200225dc 	.word	0x200225dc
    a02c:	200225fc 	.word	0x200225fc
    a030:	200225e0 	.word	0x200225e0
    a034:	2000a400 	.word	0x2000a400
    a038:	20022030 	.word	0x20022030
    a03c:	2002204c 	.word	0x2002204c
    a040:	200225f5 	.word	0x200225f5
    a044:	20022020 	.word	0x20022020
    a048:	200225f7 	.word	0x200225f7
    a04c:	00009c71 	.word	0x00009c71
    a050:	402e0000 	.word	0x402e0000
    a054:	200225bc 	.word	0x200225bc
    a058:	00009d25 	.word	0x00009d25

0000a05c <usb_serial_read>:
{
    a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a060:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a064:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    a068:	f8df a0c8 	ldr.w	sl, [pc, #200]	; a134 <usb_serial_read+0xd8>
{
    a06c:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a06e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    a072:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    a074:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    a078:	2900      	cmp	r1, #0
    a07a:	d04f      	beq.n	a11c <usb_serial_read+0xc0>
    a07c:	4680      	mov	r8, r0
    a07e:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    a080:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    a082:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a138 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    a086:	4b26      	ldr	r3, [pc, #152]	; (a120 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a088:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a08c:	4925      	ldr	r1, [pc, #148]	; (a124 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    a08e:	781b      	ldrb	r3, [r3, #0]
    a090:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    a092:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    a096:	d03f      	beq.n	a118 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    a098:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    a09a:	4b23      	ldr	r3, [pc, #140]	; (a128 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a09c:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    a09e:	bf28      	it	cs
    a0a0:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a0a2:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a0a4:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a0a8:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    a0ac:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    a0ae:	4b1f      	ldr	r3, [pc, #124]	; (a12c <usb_serial_read+0xd0>)
    a0b0:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    a0b4:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    a0b8:	42aa      	cmp	r2, r5
    a0ba:	d21c      	bcs.n	a0f6 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a0bc:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    a0c0:	4918      	ldr	r1, [pc, #96]	; (a124 <usb_serial_read+0xc8>)
			rx_available -= len;
    a0c2:	4c1b      	ldr	r4, [pc, #108]	; (a130 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a0c4:	4461      	add	r1, ip
    a0c6:	9201      	str	r2, [sp, #4]
    a0c8:	f7fe f900 	bl	82cc <memcpy>
			rx_available -= len;
    a0cc:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    a0ce:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    a0d2:	4658      	mov	r0, fp
			rx_index[i] += len;
    a0d4:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    a0d6:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    a0da:	442a      	add	r2, r5
			rx_available -= len;
    a0dc:	4439      	add	r1, r7
			rx_index[i] += len;
    a0de:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    a0e2:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a0e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a0e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a0ec:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    a0f0:	b003      	add	sp, #12
    a0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a0f6:	462a      	mov	r2, r5
			count += avail;
    a0f8:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a0fa:	f7fe f8e7 	bl	82cc <memcpy>
			rx_available -= avail;
    a0fe:	490c      	ldr	r1, [pc, #48]	; (a130 <usb_serial_read+0xd4>)
			rx_tail = tail;
    a100:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    a102:	4630      	mov	r0, r6
			rx_available -= avail;
    a104:	680a      	ldr	r2, [r1, #0]
			p += avail;
    a106:	44a8      	add	r8, r5
			rx_available -= avail;
    a108:	1b52      	subs	r2, r2, r5
    a10a:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    a10c:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    a110:	f7ff fd7e 	bl	9c10 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    a114:	45bb      	cmp	fp, r7
    a116:	d8b6      	bhi.n	a086 <usb_serial_read+0x2a>
	return count;
    a118:	4638      	mov	r0, r7
    a11a:	e7e3      	b.n	a0e4 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    a11c:	4608      	mov	r0, r1
    a11e:	e7e1      	b.n	a0e4 <usb_serial_read+0x88>
    a120:	200225f5 	.word	0x200225f5
    a124:	20009320 	.word	0x20009320
    a128:	20022064 	.word	0x20022064
    a12c:	20022030 	.word	0x20022030
    a130:	20022020 	.word	0x20022020
    a134:	200225f7 	.word	0x200225f7
    a138:	2002204c 	.word	0x2002204c

0000a13c <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    a13c:	4b0b      	ldr	r3, [pc, #44]	; (a16c <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    a13e:	4a0c      	ldr	r2, [pc, #48]	; (a170 <usb_serial_peekchar+0x34>)
    a140:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    a142:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    a144:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a146:	428a      	cmp	r2, r1
    a148:	d00d      	beq.n	a166 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a14a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    a14c:	4809      	ldr	r0, [pc, #36]	; (a174 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a14e:	4a0a      	ldr	r2, [pc, #40]	; (a178 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    a150:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a152:	490a      	ldr	r1, [pc, #40]	; (a17c <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    a154:	bf28      	it	cs
    a156:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a158:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a15a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    a15e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    a162:	5c58      	ldrb	r0, [r3, r1]
    a164:	4770      	bx	lr
	if (tail == rx_head) return -1;
    a166:	f04f 30ff 	mov.w	r0, #4294967295
}
    a16a:	4770      	bx	lr
    a16c:	200225f5 	.word	0x200225f5
    a170:	200225f7 	.word	0x200225f7
    a174:	20022064 	.word	0x20022064
    a178:	20009320 	.word	0x20009320
    a17c:	2002204c 	.word	0x2002204c

0000a180 <usb_serial_available>:
	uint32_t n = rx_available;
    a180:	4b04      	ldr	r3, [pc, #16]	; (a194 <usb_serial_available+0x14>)
{
    a182:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    a184:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a186:	b10c      	cbz	r4, a18c <usb_serial_available+0xc>
}
    a188:	4620      	mov	r0, r4
    a18a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    a18c:	f000 f8e0 	bl	a350 <yield>
}
    a190:	4620      	mov	r0, r4
    a192:	bd10      	pop	{r4, pc}
    a194:	20022020 	.word	0x20022020

0000a198 <usb_serial_flush_input>:
{
    a198:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    a19c:	4e14      	ldr	r6, [pc, #80]	; (a1f0 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    a19e:	4d15      	ldr	r5, [pc, #84]	; (a1f4 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    a1a0:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    a1a2:	782a      	ldrb	r2, [r5, #0]
    a1a4:	4293      	cmp	r3, r2
    a1a6:	d021      	beq.n	a1ec <usb_serial_flush_input+0x54>
    a1a8:	b2dc      	uxtb	r4, r3
    a1aa:	f8df 9050 	ldr.w	r9, [pc, #80]	; a1fc <usb_serial_flush_input+0x64>
    a1ae:	f8df b050 	ldr.w	fp, [pc, #80]	; a200 <usb_serial_flush_input+0x68>
    a1b2:	f8df 8050 	ldr.w	r8, [pc, #80]	; a204 <usb_serial_flush_input+0x6c>
    a1b6:	4f10      	ldr	r7, [pc, #64]	; (a1f8 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    a1b8:	3401      	adds	r4, #1
    a1ba:	2c08      	cmp	r4, #8
		rx_tail = tail;
    a1bc:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    a1c0:	d901      	bls.n	a1c6 <usb_serial_flush_input+0x2e>
    a1c2:	2400      	movs	r4, #0
    a1c4:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    a1c6:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a1ca:	f8db 3000 	ldr.w	r3, [fp]
    a1ce:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    a1d2:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    a1d6:	1a52      	subs	r2, r2, r1
    a1d8:	1a9b      	subs	r3, r3, r2
    a1da:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    a1de:	f7ff fd17 	bl	9c10 <rx_queue_transfer>
		rx_tail = tail;
    a1e2:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    a1e6:	782b      	ldrb	r3, [r5, #0]
    a1e8:	42a3      	cmp	r3, r4
    a1ea:	d1e5      	bne.n	a1b8 <usb_serial_flush_input+0x20>
}
    a1ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a1f0:	200225f7 	.word	0x200225f7
    a1f4:	200225f5 	.word	0x200225f5
    a1f8:	2002204c 	.word	0x2002204c
    a1fc:	20022064 	.word	0x20022064
    a200:	20022020 	.word	0x20022020
    a204:	20022030 	.word	0x20022030

0000a208 <usb_serial_getchar>:
{
    a208:	b500      	push	{lr}
    a20a:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    a20c:	2101      	movs	r1, #1
    a20e:	f10d 0007 	add.w	r0, sp, #7
    a212:	f7ff ff23 	bl	a05c <usb_serial_read>
    a216:	b120      	cbz	r0, a222 <usb_serial_getchar+0x1a>
    a218:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    a21c:	b003      	add	sp, #12
    a21e:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    a222:	f04f 30ff 	mov.w	r0, #4294967295
    a226:	e7f9      	b.n	a21c <usb_serial_getchar+0x14>

0000a228 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    a228:	4b09      	ldr	r3, [pc, #36]	; (a250 <usb_serial_putchar+0x28>)
{
    a22a:	b500      	push	{lr}
    a22c:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    a22e:	781b      	ldrb	r3, [r3, #0]
{
    a230:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    a234:	b13b      	cbz	r3, a246 <usb_serial_putchar+0x1e>
    a236:	2101      	movs	r1, #1
    a238:	f10d 0007 	add.w	r0, sp, #7
    a23c:	f7ff fdba 	bl	9db4 <usb_serial_write.part.0>
}
    a240:	b003      	add	sp, #12
    a242:	f85d fb04 	ldr.w	pc, [sp], #4
    a246:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    a24a:	b003      	add	sp, #12
    a24c:	f85d fb04 	ldr.w	pc, [sp], #4
    a250:	20022604 	.word	0x20022604

0000a254 <usb_serial_write>:
	if (!usb_configuration) return 0;
    a254:	4b04      	ldr	r3, [pc, #16]	; (a268 <usb_serial_write+0x14>)
    a256:	781b      	ldrb	r3, [r3, #0]
    a258:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    a25c:	b10b      	cbz	r3, a262 <usb_serial_write+0xe>
    a25e:	f7ff bda9 	b.w	9db4 <usb_serial_write.part.0>
}
    a262:	4610      	mov	r0, r2
    a264:	4770      	bx	lr
    a266:	bf00      	nop
    a268:	20022604 	.word	0x20022604

0000a26c <usb_serial_write_buffer_free>:
{
    a26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a270:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    a272:	f8df 8044 	ldr.w	r8, [pc, #68]	; a2b8 <usb_serial_write_buffer_free+0x4c>
    a276:	2301      	movs	r3, #1
    a278:	4d0d      	ldr	r5, [pc, #52]	; (a2b0 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a27a:	4627      	mov	r7, r4
    a27c:	4e0d      	ldr	r6, [pc, #52]	; (a2b4 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    a27e:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    a282:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a284:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    a286:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    a288:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    a28a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a28e:	d005      	beq.n	a29c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a290:	f7ff f810 	bl	92b4 <usb_transfer_status>
    a294:	0603      	lsls	r3, r0, #24
    a296:	bf58      	it	pl
    a298:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a29c:	2c04      	cmp	r4, #4
    a29e:	d1f0      	bne.n	a282 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    a2a0:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    a2a4:	2300      	movs	r3, #0
}
    a2a6:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    a2a8:	f888 3000 	strb.w	r3, [r8]
}
    a2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a2b0:	2000a5c0 	.word	0x2000a5c0
    a2b4:	200225fc 	.word	0x200225fc
    a2b8:	200225fe 	.word	0x200225fe

0000a2bc <usb_serial_flush_output>:
{
    a2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a2c0:	4b1d      	ldr	r3, [pc, #116]	; (a338 <usb_serial_flush_output+0x7c>)
    a2c2:	781b      	ldrb	r3, [r3, #0]
    a2c4:	b113      	cbz	r3, a2cc <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    a2c6:	4d1d      	ldr	r5, [pc, #116]	; (a33c <usb_serial_flush_output+0x80>)
    a2c8:	882a      	ldrh	r2, [r5, #0]
    a2ca:	b90a      	cbnz	r2, a2d0 <usb_serial_flush_output+0x14>
}
    a2cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    a2d0:	4e1b      	ldr	r6, [pc, #108]	; (a340 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a2d2:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a2d6:	491b      	ldr	r1, [pc, #108]	; (a344 <usb_serial_flush_output+0x88>)
    a2d8:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a2da:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a2dc:	4c1a      	ldr	r4, [pc, #104]	; (a348 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a2de:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    a2e2:	4f1a      	ldr	r7, [pc, #104]	; (a34c <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a2e4:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    a2e8:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a2ea:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    a2ec:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a2ee:	4621      	mov	r1, r4
    a2f0:	2300      	movs	r3, #0
    a2f2:	f7fe ffa5 	bl	9240 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    a2f6:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    a2fa:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a2fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a302:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a306:	3420      	adds	r4, #32
	} while (location < end_addr);
    a308:	42a2      	cmp	r2, r4
    a30a:	d8fa      	bhi.n	a302 <usb_serial_flush_output+0x46>
	asm("dsb");
    a30c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a310:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a314:	2003      	movs	r0, #3
    a316:	4641      	mov	r1, r8
    a318:	f7fe ffaa 	bl	9270 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a31c:	7833      	ldrb	r3, [r6, #0]
    a31e:	3301      	adds	r3, #1
    a320:	b2db      	uxtb	r3, r3
    a322:	2b03      	cmp	r3, #3
    a324:	bf88      	it	hi
    a326:	2300      	movhi	r3, #0
    a328:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    a32a:	2300      	movs	r3, #0
    a32c:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    a32e:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    a332:	703b      	strb	r3, [r7, #0]
}
    a334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a338:	20022604 	.word	0x20022604
    a33c:	200225e0 	.word	0x200225e0
    a340:	200225fc 	.word	0x200225fc
    a344:	2000a5c0 	.word	0x2000a5c0
    a348:	2000a640 	.word	0x2000a640
    a34c:	200225fe 	.word	0x200225fe

0000a350 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    a354:	4e32      	ldr	r6, [pc, #200]	; (a420 <yield+0xd0>)
    a356:	7833      	ldrb	r3, [r6, #0]
    a358:	b163      	cbz	r3, a374 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    a35a:	4f32      	ldr	r7, [pc, #200]	; (a424 <yield+0xd4>)
    a35c:	783a      	ldrb	r2, [r7, #0]
    a35e:	b94a      	cbnz	r2, a374 <yield+0x24>
	running = 1;
    a360:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a362:	07d9      	lsls	r1, r3, #31
	running = 1;
    a364:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a366:	d444      	bmi.n	a3f2 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    a368:	079a      	lsls	r2, r3, #30
    a36a:	d426      	bmi.n	a3ba <yield+0x6a>

	running = 0;
    a36c:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a36e:	075b      	lsls	r3, r3, #29
	running = 0;
    a370:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a372:	d401      	bmi.n	a378 <yield+0x28>
	
};
    a374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    a378:	4b2b      	ldr	r3, [pc, #172]	; (a428 <yield+0xd8>)
    a37a:	681a      	ldr	r2, [r3, #0]
    a37c:	2a00      	cmp	r2, #0
    a37e:	d0f9      	beq.n	a374 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a380:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    a384:	2a00      	cmp	r2, #0
    a386:	d1f5      	bne.n	a374 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a388:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    a38c:	b672      	cpsid	i
		EventResponder *first = firstYield;
    a38e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    a390:	2800      	cmp	r0, #0
    a392:	d03b      	beq.n	a40c <yield+0xbc>
		if (runningFromYield) {
    a394:	4c25      	ldr	r4, [pc, #148]	; (a42c <yield+0xdc>)
    a396:	7821      	ldrb	r1, [r4, #0]
    a398:	2900      	cmp	r1, #0
    a39a:	d137      	bne.n	a40c <yield+0xbc>
		runningFromYield = true;
    a39c:	2201      	movs	r2, #1
    a39e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    a3a0:	6942      	ldr	r2, [r0, #20]
    a3a2:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    a3a4:	2a00      	cmp	r2, #0
    a3a6:	d038      	beq.n	a41a <yield+0xca>
			firstYield->_prev = nullptr;
    a3a8:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    a3aa:	b905      	cbnz	r5, a3ae <yield+0x5e>
    a3ac:	b662      	cpsie	i
		first->_triggered = false;
    a3ae:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    a3b0:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    a3b2:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    a3b4:	4798      	blx	r3
		runningFromYield = false;
    a3b6:	7025      	strb	r5, [r4, #0]
    a3b8:	e7dc      	b.n	a374 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a3ba:	f8df 807c 	ldr.w	r8, [pc, #124]	; a438 <yield+0xe8>
    a3be:	f898 2000 	ldrb.w	r2, [r8]
    a3c2:	2a00      	cmp	r2, #0
    a3c4:	d0d2      	beq.n	a36c <yield+0x1c>
    a3c6:	2500      	movs	r5, #0
    a3c8:	f8df 9070 	ldr.w	r9, [pc, #112]	; a43c <yield+0xec>
    a3cc:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    a3ce:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a3d2:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    a3d4:	6823      	ldr	r3, [r4, #0]
    a3d6:	4620      	mov	r0, r4
    a3d8:	691b      	ldr	r3, [r3, #16]
    a3da:	4798      	blx	r3
    a3dc:	b110      	cbz	r0, a3e4 <yield+0x94>
    a3de:	6963      	ldr	r3, [r4, #20]
    a3e0:	689b      	ldr	r3, [r3, #8]
    a3e2:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a3e4:	f898 2000 	ldrb.w	r2, [r8]
    a3e8:	b2eb      	uxtb	r3, r5
    a3ea:	429a      	cmp	r2, r3
    a3ec:	d8ef      	bhi.n	a3ce <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a3ee:	7833      	ldrb	r3, [r6, #0]
    a3f0:	e7bc      	b.n	a36c <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    a3f2:	f7ff fec5 	bl	a180 <usb_serial_available>
		if (Serial.available()) serialEvent();
    a3f6:	b968      	cbnz	r0, a414 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    a3f8:	4b0d      	ldr	r3, [pc, #52]	; (a430 <yield+0xe0>)
    a3fa:	781b      	ldrb	r3, [r3, #0]
    a3fc:	b90b      	cbnz	r3, a402 <yield+0xb2>
    a3fe:	7833      	ldrb	r3, [r6, #0]
    a400:	e7b2      	b.n	a368 <yield+0x18>
    a402:	7833      	ldrb	r3, [r6, #0]
    a404:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    a408:	7033      	strb	r3, [r6, #0]
    a40a:	e7ad      	b.n	a368 <yield+0x18>
		if (doit) __enable_irq();
    a40c:	2d00      	cmp	r5, #0
    a40e:	d1b1      	bne.n	a374 <yield+0x24>
    a410:	b662      	cpsie	i
    a412:	e7af      	b.n	a374 <yield+0x24>
		if (Serial.available()) serialEvent();
    a414:	f000 f8cc 	bl	a5b0 <serialEvent()>
    a418:	e7ee      	b.n	a3f8 <yield+0xa8>
			lastYield = nullptr;
    a41a:	4b06      	ldr	r3, [pc, #24]	; (a434 <yield+0xe4>)
    a41c:	601a      	str	r2, [r3, #0]
    a41e:	e7c4      	b.n	a3aa <yield+0x5a>
    a420:	20008e6f 	.word	0x20008e6f
    a424:	200225f1 	.word	0x200225f1
    a428:	20021140 	.word	0x20021140
    a42c:	200225ef 	.word	0x200225ef
    a430:	60002846 	.word	0x60002846
    a434:	2002114c 	.word	0x2002114c
    a438:	200225f0 	.word	0x200225f0
    a43c:	20021150 	.word	0x20021150

0000a440 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    a440:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    a442:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    a444:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    a448:	4619      	mov	r1, r3
{
    a44a:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a44c:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a450:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a454:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a458:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    a45c:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    a460:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    a462:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    a466:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a46a:	b29b      	uxth	r3, r3
    a46c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    a470:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a474:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    a478:	3101      	adds	r1, #1
    a47a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    a47e:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a480:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a482:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    a486:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    a488:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    a48a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    a48c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    a48e:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    a492:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    a494:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    a496:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    a498:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    a49a:	d1eb      	bne.n	a474 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a49c:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a4a0:	b29b      	uxth	r3, r3
    a4a2:	f043 030f 	orr.w	r3, r3, #15
    a4a6:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    a4aa:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a4ae:	b29b      	uxth	r3, r3
    a4b0:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    a4b4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    a4b8:	bd10      	pop	{r4, pc}
    a4ba:	bf00      	nop

0000a4bc <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a4bc:	4b37      	ldr	r3, [pc, #220]	; (a59c <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a4be:	4a38      	ldr	r2, [pc, #224]	; (a5a0 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a4c0:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    a4c2:	4838      	ldr	r0, [pc, #224]	; (a5a4 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a4c4:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    a4c8:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a4ca:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a4cc:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a4d0:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a4d4:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a4d8:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a4dc:	430a      	orrs	r2, r1
    a4de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    a4e2:	f7ff ffad 	bl	a440 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    a4e6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a4ea:	f7ff ffa9 	bl	a440 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    a4ee:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a4f2:	f7ff ffa5 	bl	a440 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    a4f6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a4fa:	f7ff ffa1 	bl	a440 <flexpwm_init>
	for (i=0; i < 4; i++) {
    a4fe:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a500:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a504:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    a508:	4611      	mov	r1, r2
    a50a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a50e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a512:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a514:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a516:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a518:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a51a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a51e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a520:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a522:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a526:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a528:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    a52a:	d1ee      	bne.n	a50a <pwm_init+0x4e>
    a52c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a52e:	481e      	ldr	r0, [pc, #120]	; (a5a8 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a530:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a534:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    a538:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a53a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a53e:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    a542:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a546:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a54a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a54c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a54e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a550:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a552:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a556:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a558:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a55a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a55e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a560:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    a562:	d1ee      	bne.n	a542 <pwm_init+0x86>
    a564:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a566:	4811      	ldr	r0, [pc, #68]	; (a5ac <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a568:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a56a:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    a56e:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a570:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a574:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    a578:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a57c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a580:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a582:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a584:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a586:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a588:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a58a:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a58c:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a58e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a592:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a594:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    a598:	d1ee      	bne.n	a578 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    a59a:	bd70      	pop	{r4, r5, r6, pc}
    a59c:	400fc000 	.word	0x400fc000
    a5a0:	fc030000 	.word	0xfc030000
    a5a4:	403dc000 	.word	0x403dc000
    a5a8:	401e0000 	.word	0x401e0000
    a5ac:	401e4000 	.word	0x401e4000

0000a5b0 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    a5b0:	4770      	bx	lr
    a5b2:	bf00      	nop

0000a5b4 <sm_align_pool>:
{
    a5b4:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    a5b6:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    a5ba:	b15b      	cbz	r3, a5d4 <sm_align_pool+0x20>
    a5bc:	b1ba      	cbz	r2, a5ee <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    a5be:	4b0f      	ldr	r3, [pc, #60]	; (a5fc <sm_align_pool+0x48>)
    a5c0:	fba3 1302 	umull	r1, r3, r3, r2
    a5c4:	08db      	lsrs	r3, r3, #3
    a5c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a5ca:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    a5ce:	d10a      	bne.n	a5e6 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    a5d0:	2001      	movs	r0, #1
}
    a5d2:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    a5d4:	4b09      	ldr	r3, [pc, #36]	; (a5fc <sm_align_pool+0x48>)
    a5d6:	fba3 1302 	umull	r1, r3, r3, r2
    a5da:	08db      	lsrs	r3, r3, #3
    a5dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    a5e0:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    a5e4:	d001      	beq.n	a5ea <sm_align_pool+0x36>
    a5e6:	1ad2      	subs	r2, r2, r3
    a5e8:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    a5ea:	2af0      	cmp	r2, #240	; 0xf0
    a5ec:	d8f0      	bhi.n	a5d0 <sm_align_pool+0x1c>
		errno = ENOSPC;
    a5ee:	f002 fa3b 	bl	ca68 <__errno>
    a5f2:	221c      	movs	r2, #28
    a5f4:	4603      	mov	r3, r0
    a5f6:	2000      	movs	r0, #0
    a5f8:	601a      	str	r2, [r3, #0]
}
    a5fa:	bd08      	pop	{r3, pc}
    a5fc:	aaaaaaab 	.word	0xaaaaaaab

0000a600 <sm_set_pool>:
{
    a600:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    a602:	4604      	mov	r4, r0
    a604:	b338      	cbz	r0, a656 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    a606:	b119      	cbz	r1, a610 <sm_set_pool+0x10>
    a608:	fab2 f682 	clz	r6, r2
    a60c:	0976      	lsrs	r6, r6, #5
    a60e:	b9a2      	cbnz	r2, a63a <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    a610:	6820      	ldr	r0, [r4, #0]
    a612:	b300      	cbz	r0, a656 <sm_set_pool+0x56>
    a614:	6862      	ldr	r2, [r4, #4]
    a616:	b1f2      	cbz	r2, a656 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    a618:	4b18      	ldr	r3, [pc, #96]	; (a67c <sm_set_pool+0x7c>)
    a61a:	4919      	ldr	r1, [pc, #100]	; (a680 <sm_set_pool+0x80>)
    a61c:	fb02 f303 	mul.w	r3, r2, r3
    a620:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    a624:	d317      	bcc.n	a656 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    a626:	68a3      	ldr	r3, [r4, #8]
    a628:	b9e3      	cbnz	r3, a664 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    a62a:	2200      	movs	r2, #0
			return 1;
    a62c:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    a62e:	6022      	str	r2, [r4, #0]
    a630:	6062      	str	r2, [r4, #4]
    a632:	60a2      	str	r2, [r4, #8]
    a634:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    a636:	4618      	mov	r0, r3
    a638:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    a63a:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    a63c:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    a63e:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    a642:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    a644:	f7ff ffb6 	bl	a5b4 <sm_align_pool>
    a648:	4603      	mov	r3, r0
    a64a:	2800      	cmp	r0, #0
    a64c:	d0f3      	beq.n	a636 <sm_set_pool+0x36>
	if (do_zero) {
    a64e:	b96d      	cbnz	r5, a66c <sm_set_pool+0x6c>
	return 1;
    a650:	2301      	movs	r3, #1
}
    a652:	4618      	mov	r0, r3
    a654:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    a656:	f002 fa07 	bl	ca68 <__errno>
    a65a:	2216      	movs	r2, #22
		return 0;
    a65c:	2300      	movs	r3, #0
		errno = EINVAL;
    a65e:	6002      	str	r2, [r0, #0]
}
    a660:	4618      	mov	r0, r3
    a662:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    a664:	2100      	movs	r1, #0
    a666:	f002 f8c9 	bl	c7fc <memset>
    a66a:	e7de      	b.n	a62a <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    a66c:	6862      	ldr	r2, [r4, #4]
    a66e:	4631      	mov	r1, r6
    a670:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    a672:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    a674:	f002 f8c2 	bl	c7fc <memset>
	return 1;
    a678:	2301      	movs	r3, #1
    a67a:	e7dc      	b.n	a636 <sm_set_pool+0x36>
    a67c:	aaaaaaab 	.word	0xaaaaaaab
    a680:	15555555 	.word	0x15555555

0000a684 <__aeabi_atexit>:
    a684:	4603      	mov	r3, r0
    a686:	4608      	mov	r0, r1
    a688:	4619      	mov	r1, r3
    a68a:	f001 be27 	b.w	c2dc <__cxa_atexit>
    a68e:	bf00      	nop

0000a690 <__aeabi_uldivmod>:
    a690:	b953      	cbnz	r3, a6a8 <__aeabi_uldivmod+0x18>
    a692:	b94a      	cbnz	r2, a6a8 <__aeabi_uldivmod+0x18>
    a694:	2900      	cmp	r1, #0
    a696:	bf08      	it	eq
    a698:	2800      	cmpeq	r0, #0
    a69a:	bf1c      	itt	ne
    a69c:	f04f 31ff 	movne.w	r1, #4294967295
    a6a0:	f04f 30ff 	movne.w	r0, #4294967295
    a6a4:	f000 b970 	b.w	a988 <__aeabi_idiv0>
    a6a8:	f1ad 0c08 	sub.w	ip, sp, #8
    a6ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    a6b0:	f000 f806 	bl	a6c0 <__udivmoddi4>
    a6b4:	f8dd e004 	ldr.w	lr, [sp, #4]
    a6b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a6bc:	b004      	add	sp, #16
    a6be:	4770      	bx	lr

0000a6c0 <__udivmoddi4>:
    a6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a6c4:	9e08      	ldr	r6, [sp, #32]
    a6c6:	460d      	mov	r5, r1
    a6c8:	4604      	mov	r4, r0
    a6ca:	460f      	mov	r7, r1
    a6cc:	2b00      	cmp	r3, #0
    a6ce:	d14a      	bne.n	a766 <__udivmoddi4+0xa6>
    a6d0:	428a      	cmp	r2, r1
    a6d2:	4694      	mov	ip, r2
    a6d4:	d965      	bls.n	a7a2 <__udivmoddi4+0xe2>
    a6d6:	fab2 f382 	clz	r3, r2
    a6da:	b143      	cbz	r3, a6ee <__udivmoddi4+0x2e>
    a6dc:	fa02 fc03 	lsl.w	ip, r2, r3
    a6e0:	f1c3 0220 	rsb	r2, r3, #32
    a6e4:	409f      	lsls	r7, r3
    a6e6:	fa20 f202 	lsr.w	r2, r0, r2
    a6ea:	4317      	orrs	r7, r2
    a6ec:	409c      	lsls	r4, r3
    a6ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    a6f2:	fa1f f58c 	uxth.w	r5, ip
    a6f6:	fbb7 f1fe 	udiv	r1, r7, lr
    a6fa:	0c22      	lsrs	r2, r4, #16
    a6fc:	fb0e 7711 	mls	r7, lr, r1, r7
    a700:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    a704:	fb01 f005 	mul.w	r0, r1, r5
    a708:	4290      	cmp	r0, r2
    a70a:	d90a      	bls.n	a722 <__udivmoddi4+0x62>
    a70c:	eb1c 0202 	adds.w	r2, ip, r2
    a710:	f101 37ff 	add.w	r7, r1, #4294967295
    a714:	f080 811c 	bcs.w	a950 <__udivmoddi4+0x290>
    a718:	4290      	cmp	r0, r2
    a71a:	f240 8119 	bls.w	a950 <__udivmoddi4+0x290>
    a71e:	3902      	subs	r1, #2
    a720:	4462      	add	r2, ip
    a722:	1a12      	subs	r2, r2, r0
    a724:	b2a4      	uxth	r4, r4
    a726:	fbb2 f0fe 	udiv	r0, r2, lr
    a72a:	fb0e 2210 	mls	r2, lr, r0, r2
    a72e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    a732:	fb00 f505 	mul.w	r5, r0, r5
    a736:	42a5      	cmp	r5, r4
    a738:	d90a      	bls.n	a750 <__udivmoddi4+0x90>
    a73a:	eb1c 0404 	adds.w	r4, ip, r4
    a73e:	f100 32ff 	add.w	r2, r0, #4294967295
    a742:	f080 8107 	bcs.w	a954 <__udivmoddi4+0x294>
    a746:	42a5      	cmp	r5, r4
    a748:	f240 8104 	bls.w	a954 <__udivmoddi4+0x294>
    a74c:	4464      	add	r4, ip
    a74e:	3802      	subs	r0, #2
    a750:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    a754:	1b64      	subs	r4, r4, r5
    a756:	2100      	movs	r1, #0
    a758:	b11e      	cbz	r6, a762 <__udivmoddi4+0xa2>
    a75a:	40dc      	lsrs	r4, r3
    a75c:	2300      	movs	r3, #0
    a75e:	e9c6 4300 	strd	r4, r3, [r6]
    a762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a766:	428b      	cmp	r3, r1
    a768:	d908      	bls.n	a77c <__udivmoddi4+0xbc>
    a76a:	2e00      	cmp	r6, #0
    a76c:	f000 80ed 	beq.w	a94a <__udivmoddi4+0x28a>
    a770:	2100      	movs	r1, #0
    a772:	e9c6 0500 	strd	r0, r5, [r6]
    a776:	4608      	mov	r0, r1
    a778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a77c:	fab3 f183 	clz	r1, r3
    a780:	2900      	cmp	r1, #0
    a782:	d149      	bne.n	a818 <__udivmoddi4+0x158>
    a784:	42ab      	cmp	r3, r5
    a786:	d302      	bcc.n	a78e <__udivmoddi4+0xce>
    a788:	4282      	cmp	r2, r0
    a78a:	f200 80f8 	bhi.w	a97e <__udivmoddi4+0x2be>
    a78e:	1a84      	subs	r4, r0, r2
    a790:	eb65 0203 	sbc.w	r2, r5, r3
    a794:	2001      	movs	r0, #1
    a796:	4617      	mov	r7, r2
    a798:	2e00      	cmp	r6, #0
    a79a:	d0e2      	beq.n	a762 <__udivmoddi4+0xa2>
    a79c:	e9c6 4700 	strd	r4, r7, [r6]
    a7a0:	e7df      	b.n	a762 <__udivmoddi4+0xa2>
    a7a2:	b902      	cbnz	r2, a7a6 <__udivmoddi4+0xe6>
    a7a4:	deff      	udf	#255	; 0xff
    a7a6:	fab2 f382 	clz	r3, r2
    a7aa:	2b00      	cmp	r3, #0
    a7ac:	f040 8090 	bne.w	a8d0 <__udivmoddi4+0x210>
    a7b0:	1a8a      	subs	r2, r1, r2
    a7b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
    a7b6:	fa1f fe8c 	uxth.w	lr, ip
    a7ba:	2101      	movs	r1, #1
    a7bc:	fbb2 f5f7 	udiv	r5, r2, r7
    a7c0:	fb07 2015 	mls	r0, r7, r5, r2
    a7c4:	0c22      	lsrs	r2, r4, #16
    a7c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    a7ca:	fb0e f005 	mul.w	r0, lr, r5
    a7ce:	4290      	cmp	r0, r2
    a7d0:	d908      	bls.n	a7e4 <__udivmoddi4+0x124>
    a7d2:	eb1c 0202 	adds.w	r2, ip, r2
    a7d6:	f105 38ff 	add.w	r8, r5, #4294967295
    a7da:	d202      	bcs.n	a7e2 <__udivmoddi4+0x122>
    a7dc:	4290      	cmp	r0, r2
    a7de:	f200 80cb 	bhi.w	a978 <__udivmoddi4+0x2b8>
    a7e2:	4645      	mov	r5, r8
    a7e4:	1a12      	subs	r2, r2, r0
    a7e6:	b2a4      	uxth	r4, r4
    a7e8:	fbb2 f0f7 	udiv	r0, r2, r7
    a7ec:	fb07 2210 	mls	r2, r7, r0, r2
    a7f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    a7f4:	fb0e fe00 	mul.w	lr, lr, r0
    a7f8:	45a6      	cmp	lr, r4
    a7fa:	d908      	bls.n	a80e <__udivmoddi4+0x14e>
    a7fc:	eb1c 0404 	adds.w	r4, ip, r4
    a800:	f100 32ff 	add.w	r2, r0, #4294967295
    a804:	d202      	bcs.n	a80c <__udivmoddi4+0x14c>
    a806:	45a6      	cmp	lr, r4
    a808:	f200 80bb 	bhi.w	a982 <__udivmoddi4+0x2c2>
    a80c:	4610      	mov	r0, r2
    a80e:	eba4 040e 	sub.w	r4, r4, lr
    a812:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    a816:	e79f      	b.n	a758 <__udivmoddi4+0x98>
    a818:	f1c1 0720 	rsb	r7, r1, #32
    a81c:	408b      	lsls	r3, r1
    a81e:	fa22 fc07 	lsr.w	ip, r2, r7
    a822:	ea4c 0c03 	orr.w	ip, ip, r3
    a826:	fa05 f401 	lsl.w	r4, r5, r1
    a82a:	fa20 f307 	lsr.w	r3, r0, r7
    a82e:	40fd      	lsrs	r5, r7
    a830:	ea4f 491c 	mov.w	r9, ip, lsr #16
    a834:	4323      	orrs	r3, r4
    a836:	fbb5 f8f9 	udiv	r8, r5, r9
    a83a:	fa1f fe8c 	uxth.w	lr, ip
    a83e:	fb09 5518 	mls	r5, r9, r8, r5
    a842:	0c1c      	lsrs	r4, r3, #16
    a844:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    a848:	fb08 f50e 	mul.w	r5, r8, lr
    a84c:	42a5      	cmp	r5, r4
    a84e:	fa02 f201 	lsl.w	r2, r2, r1
    a852:	fa00 f001 	lsl.w	r0, r0, r1
    a856:	d90b      	bls.n	a870 <__udivmoddi4+0x1b0>
    a858:	eb1c 0404 	adds.w	r4, ip, r4
    a85c:	f108 3aff 	add.w	sl, r8, #4294967295
    a860:	f080 8088 	bcs.w	a974 <__udivmoddi4+0x2b4>
    a864:	42a5      	cmp	r5, r4
    a866:	f240 8085 	bls.w	a974 <__udivmoddi4+0x2b4>
    a86a:	f1a8 0802 	sub.w	r8, r8, #2
    a86e:	4464      	add	r4, ip
    a870:	1b64      	subs	r4, r4, r5
    a872:	b29d      	uxth	r5, r3
    a874:	fbb4 f3f9 	udiv	r3, r4, r9
    a878:	fb09 4413 	mls	r4, r9, r3, r4
    a87c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    a880:	fb03 fe0e 	mul.w	lr, r3, lr
    a884:	45a6      	cmp	lr, r4
    a886:	d908      	bls.n	a89a <__udivmoddi4+0x1da>
    a888:	eb1c 0404 	adds.w	r4, ip, r4
    a88c:	f103 35ff 	add.w	r5, r3, #4294967295
    a890:	d26c      	bcs.n	a96c <__udivmoddi4+0x2ac>
    a892:	45a6      	cmp	lr, r4
    a894:	d96a      	bls.n	a96c <__udivmoddi4+0x2ac>
    a896:	3b02      	subs	r3, #2
    a898:	4464      	add	r4, ip
    a89a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    a89e:	fba3 9502 	umull	r9, r5, r3, r2
    a8a2:	eba4 040e 	sub.w	r4, r4, lr
    a8a6:	42ac      	cmp	r4, r5
    a8a8:	46c8      	mov	r8, r9
    a8aa:	46ae      	mov	lr, r5
    a8ac:	d356      	bcc.n	a95c <__udivmoddi4+0x29c>
    a8ae:	d053      	beq.n	a958 <__udivmoddi4+0x298>
    a8b0:	b156      	cbz	r6, a8c8 <__udivmoddi4+0x208>
    a8b2:	ebb0 0208 	subs.w	r2, r0, r8
    a8b6:	eb64 040e 	sbc.w	r4, r4, lr
    a8ba:	fa04 f707 	lsl.w	r7, r4, r7
    a8be:	40ca      	lsrs	r2, r1
    a8c0:	40cc      	lsrs	r4, r1
    a8c2:	4317      	orrs	r7, r2
    a8c4:	e9c6 7400 	strd	r7, r4, [r6]
    a8c8:	4618      	mov	r0, r3
    a8ca:	2100      	movs	r1, #0
    a8cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a8d0:	f1c3 0120 	rsb	r1, r3, #32
    a8d4:	fa02 fc03 	lsl.w	ip, r2, r3
    a8d8:	fa20 f201 	lsr.w	r2, r0, r1
    a8dc:	fa25 f101 	lsr.w	r1, r5, r1
    a8e0:	409d      	lsls	r5, r3
    a8e2:	432a      	orrs	r2, r5
    a8e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
    a8e8:	fa1f fe8c 	uxth.w	lr, ip
    a8ec:	fbb1 f0f7 	udiv	r0, r1, r7
    a8f0:	fb07 1510 	mls	r5, r7, r0, r1
    a8f4:	0c11      	lsrs	r1, r2, #16
    a8f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    a8fa:	fb00 f50e 	mul.w	r5, r0, lr
    a8fe:	428d      	cmp	r5, r1
    a900:	fa04 f403 	lsl.w	r4, r4, r3
    a904:	d908      	bls.n	a918 <__udivmoddi4+0x258>
    a906:	eb1c 0101 	adds.w	r1, ip, r1
    a90a:	f100 38ff 	add.w	r8, r0, #4294967295
    a90e:	d22f      	bcs.n	a970 <__udivmoddi4+0x2b0>
    a910:	428d      	cmp	r5, r1
    a912:	d92d      	bls.n	a970 <__udivmoddi4+0x2b0>
    a914:	3802      	subs	r0, #2
    a916:	4461      	add	r1, ip
    a918:	1b49      	subs	r1, r1, r5
    a91a:	b292      	uxth	r2, r2
    a91c:	fbb1 f5f7 	udiv	r5, r1, r7
    a920:	fb07 1115 	mls	r1, r7, r5, r1
    a924:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    a928:	fb05 f10e 	mul.w	r1, r5, lr
    a92c:	4291      	cmp	r1, r2
    a92e:	d908      	bls.n	a942 <__udivmoddi4+0x282>
    a930:	eb1c 0202 	adds.w	r2, ip, r2
    a934:	f105 38ff 	add.w	r8, r5, #4294967295
    a938:	d216      	bcs.n	a968 <__udivmoddi4+0x2a8>
    a93a:	4291      	cmp	r1, r2
    a93c:	d914      	bls.n	a968 <__udivmoddi4+0x2a8>
    a93e:	3d02      	subs	r5, #2
    a940:	4462      	add	r2, ip
    a942:	1a52      	subs	r2, r2, r1
    a944:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    a948:	e738      	b.n	a7bc <__udivmoddi4+0xfc>
    a94a:	4631      	mov	r1, r6
    a94c:	4630      	mov	r0, r6
    a94e:	e708      	b.n	a762 <__udivmoddi4+0xa2>
    a950:	4639      	mov	r1, r7
    a952:	e6e6      	b.n	a722 <__udivmoddi4+0x62>
    a954:	4610      	mov	r0, r2
    a956:	e6fb      	b.n	a750 <__udivmoddi4+0x90>
    a958:	4548      	cmp	r0, r9
    a95a:	d2a9      	bcs.n	a8b0 <__udivmoddi4+0x1f0>
    a95c:	ebb9 0802 	subs.w	r8, r9, r2
    a960:	eb65 0e0c 	sbc.w	lr, r5, ip
    a964:	3b01      	subs	r3, #1
    a966:	e7a3      	b.n	a8b0 <__udivmoddi4+0x1f0>
    a968:	4645      	mov	r5, r8
    a96a:	e7ea      	b.n	a942 <__udivmoddi4+0x282>
    a96c:	462b      	mov	r3, r5
    a96e:	e794      	b.n	a89a <__udivmoddi4+0x1da>
    a970:	4640      	mov	r0, r8
    a972:	e7d1      	b.n	a918 <__udivmoddi4+0x258>
    a974:	46d0      	mov	r8, sl
    a976:	e77b      	b.n	a870 <__udivmoddi4+0x1b0>
    a978:	3d02      	subs	r5, #2
    a97a:	4462      	add	r2, ip
    a97c:	e732      	b.n	a7e4 <__udivmoddi4+0x124>
    a97e:	4608      	mov	r0, r1
    a980:	e70a      	b.n	a798 <__udivmoddi4+0xd8>
    a982:	4464      	add	r4, ip
    a984:	3802      	subs	r0, #2
    a986:	e742      	b.n	a80e <__udivmoddi4+0x14e>

0000a988 <__aeabi_idiv0>:
    a988:	4770      	bx	lr
    a98a:	bf00      	nop

0000a98c <malloc>:
    a98c:	4b02      	ldr	r3, [pc, #8]	; (a998 <malloc+0xc>)
    a98e:	4601      	mov	r1, r0
    a990:	6818      	ldr	r0, [r3, #0]
    a992:	f000 b80b 	b.w	a9ac <_malloc_r>
    a996:	bf00      	nop
    a998:	20008e24 	.word	0x20008e24

0000a99c <free>:
    a99c:	4b02      	ldr	r3, [pc, #8]	; (a9a8 <free+0xc>)
    a99e:	4601      	mov	r1, r0
    a9a0:	6818      	ldr	r0, [r3, #0]
    a9a2:	f002 bb7f 	b.w	d0a4 <_free_r>
    a9a6:	bf00      	nop
    a9a8:	20008e24 	.word	0x20008e24

0000a9ac <_malloc_r>:
    a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a9b0:	f101 060b 	add.w	r6, r1, #11
    a9b4:	2e16      	cmp	r6, #22
    a9b6:	b083      	sub	sp, #12
    a9b8:	4604      	mov	r4, r0
    a9ba:	d824      	bhi.n	aa06 <_malloc_r+0x5a>
    a9bc:	2910      	cmp	r1, #16
    a9be:	f200 80ba 	bhi.w	ab36 <_malloc_r+0x18a>
    a9c2:	f000 faa3 	bl	af0c <__malloc_lock>
    a9c6:	2610      	movs	r6, #16
    a9c8:	2218      	movs	r2, #24
    a9ca:	2002      	movs	r0, #2
    a9cc:	4fb5      	ldr	r7, [pc, #724]	; (aca4 <_malloc_r+0x2f8>)
    a9ce:	443a      	add	r2, r7
    a9d0:	f1a2 0108 	sub.w	r1, r2, #8
    a9d4:	6853      	ldr	r3, [r2, #4]
    a9d6:	428b      	cmp	r3, r1
    a9d8:	f000 80ba 	beq.w	ab50 <_malloc_r+0x1a4>
    a9dc:	685a      	ldr	r2, [r3, #4]
    a9de:	68d9      	ldr	r1, [r3, #12]
    a9e0:	f022 0203 	bic.w	r2, r2, #3
    a9e4:	441a      	add	r2, r3
    a9e6:	689d      	ldr	r5, [r3, #8]
    a9e8:	60e9      	str	r1, [r5, #12]
    a9ea:	608d      	str	r5, [r1, #8]
    a9ec:	6851      	ldr	r1, [r2, #4]
    a9ee:	f041 0101 	orr.w	r1, r1, #1
    a9f2:	4620      	mov	r0, r4
    a9f4:	6051      	str	r1, [r2, #4]
    a9f6:	f103 0508 	add.w	r5, r3, #8
    a9fa:	f000 fa8d 	bl	af18 <__malloc_unlock>
    a9fe:	4628      	mov	r0, r5
    aa00:	b003      	add	sp, #12
    aa02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa06:	f036 0607 	bics.w	r6, r6, #7
    aa0a:	f100 8094 	bmi.w	ab36 <_malloc_r+0x18a>
    aa0e:	42b1      	cmp	r1, r6
    aa10:	f200 8091 	bhi.w	ab36 <_malloc_r+0x18a>
    aa14:	f000 fa7a 	bl	af0c <__malloc_lock>
    aa18:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    aa1c:	f0c0 819a 	bcc.w	ad54 <_malloc_r+0x3a8>
    aa20:	0a73      	lsrs	r3, r6, #9
    aa22:	f000 808f 	beq.w	ab44 <_malloc_r+0x198>
    aa26:	2b04      	cmp	r3, #4
    aa28:	f200 816f 	bhi.w	ad0a <_malloc_r+0x35e>
    aa2c:	09b3      	lsrs	r3, r6, #6
    aa2e:	f103 0039 	add.w	r0, r3, #57	; 0x39
    aa32:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    aa36:	00c3      	lsls	r3, r0, #3
    aa38:	4f9a      	ldr	r7, [pc, #616]	; (aca4 <_malloc_r+0x2f8>)
    aa3a:	443b      	add	r3, r7
    aa3c:	f1a3 0508 	sub.w	r5, r3, #8
    aa40:	685b      	ldr	r3, [r3, #4]
    aa42:	429d      	cmp	r5, r3
    aa44:	d106      	bne.n	aa54 <_malloc_r+0xa8>
    aa46:	e00c      	b.n	aa62 <_malloc_r+0xb6>
    aa48:	2900      	cmp	r1, #0
    aa4a:	f280 8127 	bge.w	ac9c <_malloc_r+0x2f0>
    aa4e:	68db      	ldr	r3, [r3, #12]
    aa50:	429d      	cmp	r5, r3
    aa52:	d006      	beq.n	aa62 <_malloc_r+0xb6>
    aa54:	685a      	ldr	r2, [r3, #4]
    aa56:	f022 0203 	bic.w	r2, r2, #3
    aa5a:	1b91      	subs	r1, r2, r6
    aa5c:	290f      	cmp	r1, #15
    aa5e:	ddf3      	ble.n	aa48 <_malloc_r+0x9c>
    aa60:	4660      	mov	r0, ip
    aa62:	693d      	ldr	r5, [r7, #16]
    aa64:	f8df c250 	ldr.w	ip, [pc, #592]	; acb8 <_malloc_r+0x30c>
    aa68:	4565      	cmp	r5, ip
    aa6a:	d07c      	beq.n	ab66 <_malloc_r+0x1ba>
    aa6c:	686a      	ldr	r2, [r5, #4]
    aa6e:	f022 0203 	bic.w	r2, r2, #3
    aa72:	1b93      	subs	r3, r2, r6
    aa74:	2b0f      	cmp	r3, #15
    aa76:	f300 817b 	bgt.w	ad70 <_malloc_r+0x3c4>
    aa7a:	2b00      	cmp	r3, #0
    aa7c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    aa80:	f280 816c 	bge.w	ad5c <_malloc_r+0x3b0>
    aa84:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    aa88:	f080 811a 	bcs.w	acc0 <_malloc_r+0x314>
    aa8c:	08d3      	lsrs	r3, r2, #3
    aa8e:	6879      	ldr	r1, [r7, #4]
    aa90:	3301      	adds	r3, #1
    aa92:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    aa96:	2201      	movs	r2, #1
    aa98:	fa02 f20e 	lsl.w	r2, r2, lr
    aa9c:	430a      	orrs	r2, r1
    aa9e:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    aaa2:	f8c5 e008 	str.w	lr, [r5, #8]
    aaa6:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    aaaa:	3908      	subs	r1, #8
    aaac:	60e9      	str	r1, [r5, #12]
    aaae:	607a      	str	r2, [r7, #4]
    aab0:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    aab4:	f8ce 500c 	str.w	r5, [lr, #12]
    aab8:	1083      	asrs	r3, r0, #2
    aaba:	2101      	movs	r1, #1
    aabc:	4099      	lsls	r1, r3
    aabe:	4291      	cmp	r1, r2
    aac0:	d857      	bhi.n	ab72 <_malloc_r+0x1c6>
    aac2:	4211      	tst	r1, r2
    aac4:	d106      	bne.n	aad4 <_malloc_r+0x128>
    aac6:	f020 0003 	bic.w	r0, r0, #3
    aaca:	0049      	lsls	r1, r1, #1
    aacc:	4211      	tst	r1, r2
    aace:	f100 0004 	add.w	r0, r0, #4
    aad2:	d0fa      	beq.n	aaca <_malloc_r+0x11e>
    aad4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    aad8:	464d      	mov	r5, r9
    aada:	4686      	mov	lr, r0
    aadc:	f8d5 800c 	ldr.w	r8, [r5, #12]
    aae0:	4545      	cmp	r5, r8
    aae2:	d108      	bne.n	aaf6 <_malloc_r+0x14a>
    aae4:	e11d      	b.n	ad22 <_malloc_r+0x376>
    aae6:	2b00      	cmp	r3, #0
    aae8:	f280 8124 	bge.w	ad34 <_malloc_r+0x388>
    aaec:	f8d8 800c 	ldr.w	r8, [r8, #12]
    aaf0:	4545      	cmp	r5, r8
    aaf2:	f000 8116 	beq.w	ad22 <_malloc_r+0x376>
    aaf6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    aafa:	f022 0203 	bic.w	r2, r2, #3
    aafe:	1b93      	subs	r3, r2, r6
    ab00:	2b0f      	cmp	r3, #15
    ab02:	ddf0      	ble.n	aae6 <_malloc_r+0x13a>
    ab04:	4620      	mov	r0, r4
    ab06:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    ab0a:	eb08 0106 	add.w	r1, r8, r6
    ab0e:	f046 0601 	orr.w	r6, r6, #1
    ab12:	f8c8 6004 	str.w	r6, [r8, #4]
    ab16:	60ec      	str	r4, [r5, #12]
    ab18:	60a5      	str	r5, [r4, #8]
    ab1a:	f043 0401 	orr.w	r4, r3, #1
    ab1e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    ab22:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    ab26:	604c      	str	r4, [r1, #4]
    ab28:	f848 3002 	str.w	r3, [r8, r2]
    ab2c:	f000 f9f4 	bl	af18 <__malloc_unlock>
    ab30:	f108 0508 	add.w	r5, r8, #8
    ab34:	e002      	b.n	ab3c <_malloc_r+0x190>
    ab36:	230c      	movs	r3, #12
    ab38:	6023      	str	r3, [r4, #0]
    ab3a:	2500      	movs	r5, #0
    ab3c:	4628      	mov	r0, r5
    ab3e:	b003      	add	sp, #12
    ab40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ab44:	f44f 7300 	mov.w	r3, #512	; 0x200
    ab48:	2040      	movs	r0, #64	; 0x40
    ab4a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    ab4e:	e773      	b.n	aa38 <_malloc_r+0x8c>
    ab50:	68d3      	ldr	r3, [r2, #12]
    ab52:	429a      	cmp	r2, r3
    ab54:	bf08      	it	eq
    ab56:	3002      	addeq	r0, #2
    ab58:	f47f af40 	bne.w	a9dc <_malloc_r+0x30>
    ab5c:	693d      	ldr	r5, [r7, #16]
    ab5e:	f8df c158 	ldr.w	ip, [pc, #344]	; acb8 <_malloc_r+0x30c>
    ab62:	4565      	cmp	r5, ip
    ab64:	d182      	bne.n	aa6c <_malloc_r+0xc0>
    ab66:	687a      	ldr	r2, [r7, #4]
    ab68:	1083      	asrs	r3, r0, #2
    ab6a:	2101      	movs	r1, #1
    ab6c:	4099      	lsls	r1, r3
    ab6e:	4291      	cmp	r1, r2
    ab70:	d9a7      	bls.n	aac2 <_malloc_r+0x116>
    ab72:	68bd      	ldr	r5, [r7, #8]
    ab74:	686b      	ldr	r3, [r5, #4]
    ab76:	f023 0903 	bic.w	r9, r3, #3
    ab7a:	454e      	cmp	r6, r9
    ab7c:	d803      	bhi.n	ab86 <_malloc_r+0x1da>
    ab7e:	eba9 0306 	sub.w	r3, r9, r6
    ab82:	2b0f      	cmp	r3, #15
    ab84:	dc7a      	bgt.n	ac7c <_malloc_r+0x2d0>
    ab86:	f8df b134 	ldr.w	fp, [pc, #308]	; acbc <_malloc_r+0x310>
    ab8a:	4b47      	ldr	r3, [pc, #284]	; (aca8 <_malloc_r+0x2fc>)
    ab8c:	f8db 2000 	ldr.w	r2, [fp]
    ab90:	681b      	ldr	r3, [r3, #0]
    ab92:	3201      	adds	r2, #1
    ab94:	4433      	add	r3, r6
    ab96:	eb05 0a09 	add.w	sl, r5, r9
    ab9a:	f000 8133 	beq.w	ae04 <_malloc_r+0x458>
    ab9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    aba2:	330f      	adds	r3, #15
    aba4:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    aba8:	f028 080f 	bic.w	r8, r8, #15
    abac:	4641      	mov	r1, r8
    abae:	4620      	mov	r0, r4
    abb0:	f001 ff32 	bl	ca18 <_sbrk_r>
    abb4:	1c41      	adds	r1, r0, #1
    abb6:	4602      	mov	r2, r0
    abb8:	f000 80f3 	beq.w	ada2 <_malloc_r+0x3f6>
    abbc:	4582      	cmp	sl, r0
    abbe:	f200 80ee 	bhi.w	ad9e <_malloc_r+0x3f2>
    abc2:	4b3a      	ldr	r3, [pc, #232]	; (acac <_malloc_r+0x300>)
    abc4:	6819      	ldr	r1, [r3, #0]
    abc6:	4441      	add	r1, r8
    abc8:	6019      	str	r1, [r3, #0]
    abca:	4608      	mov	r0, r1
    abcc:	f000 814e 	beq.w	ae6c <_malloc_r+0x4c0>
    abd0:	f8db 1000 	ldr.w	r1, [fp]
    abd4:	9301      	str	r3, [sp, #4]
    abd6:	3101      	adds	r1, #1
    abd8:	bf1b      	ittet	ne
    abda:	eba2 010a 	subne.w	r1, r2, sl
    abde:	1809      	addne	r1, r1, r0
    abe0:	f8cb 2000 	streq.w	r2, [fp]
    abe4:	6019      	strne	r1, [r3, #0]
    abe6:	f012 0b07 	ands.w	fp, r2, #7
    abea:	f000 8117 	beq.w	ae1c <_malloc_r+0x470>
    abee:	f1cb 0108 	rsb	r1, fp, #8
    abf2:	440a      	add	r2, r1
    abf4:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    abf8:	4490      	add	r8, r2
    abfa:	3108      	adds	r1, #8
    abfc:	eba1 0108 	sub.w	r1, r1, r8
    ac00:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    ac04:	4651      	mov	r1, sl
    ac06:	4620      	mov	r0, r4
    ac08:	9200      	str	r2, [sp, #0]
    ac0a:	f001 ff05 	bl	ca18 <_sbrk_r>
    ac0e:	1c42      	adds	r2, r0, #1
    ac10:	e9dd 2300 	ldrd	r2, r3, [sp]
    ac14:	f000 814f 	beq.w	aeb6 <_malloc_r+0x50a>
    ac18:	1a80      	subs	r0, r0, r2
    ac1a:	eb00 080a 	add.w	r8, r0, sl
    ac1e:	6819      	ldr	r1, [r3, #0]
    ac20:	60ba      	str	r2, [r7, #8]
    ac22:	f048 0001 	orr.w	r0, r8, #1
    ac26:	4451      	add	r1, sl
    ac28:	42bd      	cmp	r5, r7
    ac2a:	6050      	str	r0, [r2, #4]
    ac2c:	6019      	str	r1, [r3, #0]
    ac2e:	f000 8129 	beq.w	ae84 <_malloc_r+0x4d8>
    ac32:	f1b9 0f0f 	cmp.w	r9, #15
    ac36:	f240 8127 	bls.w	ae88 <_malloc_r+0x4dc>
    ac3a:	6868      	ldr	r0, [r5, #4]
    ac3c:	f1a9 0c0c 	sub.w	ip, r9, #12
    ac40:	f02c 0c07 	bic.w	ip, ip, #7
    ac44:	f000 0001 	and.w	r0, r0, #1
    ac48:	ea40 000c 	orr.w	r0, r0, ip
    ac4c:	6068      	str	r0, [r5, #4]
    ac4e:	f04f 0e05 	mov.w	lr, #5
    ac52:	eb05 000c 	add.w	r0, r5, ip
    ac56:	f1bc 0f0f 	cmp.w	ip, #15
    ac5a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    ac5e:	f200 8132 	bhi.w	aec6 <_malloc_r+0x51a>
    ac62:	6850      	ldr	r0, [r2, #4]
    ac64:	4615      	mov	r5, r2
    ac66:	4b12      	ldr	r3, [pc, #72]	; (acb0 <_malloc_r+0x304>)
    ac68:	681a      	ldr	r2, [r3, #0]
    ac6a:	428a      	cmp	r2, r1
    ac6c:	bf38      	it	cc
    ac6e:	6019      	strcc	r1, [r3, #0]
    ac70:	4b10      	ldr	r3, [pc, #64]	; (acb4 <_malloc_r+0x308>)
    ac72:	681a      	ldr	r2, [r3, #0]
    ac74:	428a      	cmp	r2, r1
    ac76:	bf38      	it	cc
    ac78:	6019      	strcc	r1, [r3, #0]
    ac7a:	e094      	b.n	ada6 <_malloc_r+0x3fa>
    ac7c:	19aa      	adds	r2, r5, r6
    ac7e:	f043 0301 	orr.w	r3, r3, #1
    ac82:	f046 0601 	orr.w	r6, r6, #1
    ac86:	606e      	str	r6, [r5, #4]
    ac88:	4620      	mov	r0, r4
    ac8a:	60ba      	str	r2, [r7, #8]
    ac8c:	6053      	str	r3, [r2, #4]
    ac8e:	f000 f943 	bl	af18 <__malloc_unlock>
    ac92:	3508      	adds	r5, #8
    ac94:	4628      	mov	r0, r5
    ac96:	b003      	add	sp, #12
    ac98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac9c:	68d9      	ldr	r1, [r3, #12]
    ac9e:	441a      	add	r2, r3
    aca0:	e6a1      	b.n	a9e6 <_malloc_r+0x3a>
    aca2:	bf00      	nop
    aca4:	20008a08 	.word	0x20008a08
    aca8:	2002135c 	.word	0x2002135c
    acac:	2002132c 	.word	0x2002132c
    acb0:	20021354 	.word	0x20021354
    acb4:	20021358 	.word	0x20021358
    acb8:	20008a10 	.word	0x20008a10
    acbc:	20008e10 	.word	0x20008e10
    acc0:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    acc4:	ea4f 2352 	mov.w	r3, r2, lsr #9
    acc8:	d363      	bcc.n	ad92 <_malloc_r+0x3e6>
    acca:	2b14      	cmp	r3, #20
    accc:	f200 80b7 	bhi.w	ae3e <_malloc_r+0x492>
    acd0:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    acd4:	00c9      	lsls	r1, r1, #3
    acd6:	335b      	adds	r3, #91	; 0x5b
    acd8:	eb07 0e01 	add.w	lr, r7, r1
    acdc:	5879      	ldr	r1, [r7, r1]
    acde:	f1ae 0e08 	sub.w	lr, lr, #8
    ace2:	458e      	cmp	lr, r1
    ace4:	f000 8091 	beq.w	ae0a <_malloc_r+0x45e>
    ace8:	684b      	ldr	r3, [r1, #4]
    acea:	f023 0303 	bic.w	r3, r3, #3
    acee:	4293      	cmp	r3, r2
    acf0:	d902      	bls.n	acf8 <_malloc_r+0x34c>
    acf2:	6889      	ldr	r1, [r1, #8]
    acf4:	458e      	cmp	lr, r1
    acf6:	d1f7      	bne.n	ace8 <_malloc_r+0x33c>
    acf8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    acfc:	687a      	ldr	r2, [r7, #4]
    acfe:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    ad02:	f8ce 5008 	str.w	r5, [lr, #8]
    ad06:	60cd      	str	r5, [r1, #12]
    ad08:	e6d6      	b.n	aab8 <_malloc_r+0x10c>
    ad0a:	2b14      	cmp	r3, #20
    ad0c:	d959      	bls.n	adc2 <_malloc_r+0x416>
    ad0e:	2b54      	cmp	r3, #84	; 0x54
    ad10:	f200 809d 	bhi.w	ae4e <_malloc_r+0x4a2>
    ad14:	0b33      	lsrs	r3, r6, #12
    ad16:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    ad1a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    ad1e:	00c3      	lsls	r3, r0, #3
    ad20:	e68a      	b.n	aa38 <_malloc_r+0x8c>
    ad22:	f10e 0e01 	add.w	lr, lr, #1
    ad26:	f01e 0f03 	tst.w	lr, #3
    ad2a:	f105 0508 	add.w	r5, r5, #8
    ad2e:	f47f aed5 	bne.w	aadc <_malloc_r+0x130>
    ad32:	e051      	b.n	add8 <_malloc_r+0x42c>
    ad34:	4442      	add	r2, r8
    ad36:	4645      	mov	r5, r8
    ad38:	6853      	ldr	r3, [r2, #4]
    ad3a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    ad3e:	f043 0301 	orr.w	r3, r3, #1
    ad42:	6053      	str	r3, [r2, #4]
    ad44:	f855 3f08 	ldr.w	r3, [r5, #8]!
    ad48:	4620      	mov	r0, r4
    ad4a:	60d9      	str	r1, [r3, #12]
    ad4c:	608b      	str	r3, [r1, #8]
    ad4e:	f000 f8e3 	bl	af18 <__malloc_unlock>
    ad52:	e6f3      	b.n	ab3c <_malloc_r+0x190>
    ad54:	08f0      	lsrs	r0, r6, #3
    ad56:	f106 0208 	add.w	r2, r6, #8
    ad5a:	e637      	b.n	a9cc <_malloc_r+0x20>
    ad5c:	442a      	add	r2, r5
    ad5e:	4620      	mov	r0, r4
    ad60:	6853      	ldr	r3, [r2, #4]
    ad62:	f043 0301 	orr.w	r3, r3, #1
    ad66:	6053      	str	r3, [r2, #4]
    ad68:	3508      	adds	r5, #8
    ad6a:	f000 f8d5 	bl	af18 <__malloc_unlock>
    ad6e:	e6e5      	b.n	ab3c <_malloc_r+0x190>
    ad70:	19a9      	adds	r1, r5, r6
    ad72:	4620      	mov	r0, r4
    ad74:	f046 0601 	orr.w	r6, r6, #1
    ad78:	f043 0401 	orr.w	r4, r3, #1
    ad7c:	606e      	str	r6, [r5, #4]
    ad7e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    ad82:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    ad86:	604c      	str	r4, [r1, #4]
    ad88:	50ab      	str	r3, [r5, r2]
    ad8a:	f000 f8c5 	bl	af18 <__malloc_unlock>
    ad8e:	3508      	adds	r5, #8
    ad90:	e6d4      	b.n	ab3c <_malloc_r+0x190>
    ad92:	0993      	lsrs	r3, r2, #6
    ad94:	f103 0139 	add.w	r1, r3, #57	; 0x39
    ad98:	00c9      	lsls	r1, r1, #3
    ad9a:	3338      	adds	r3, #56	; 0x38
    ad9c:	e79c      	b.n	acd8 <_malloc_r+0x32c>
    ad9e:	42bd      	cmp	r5, r7
    ada0:	d05f      	beq.n	ae62 <_malloc_r+0x4b6>
    ada2:	68bd      	ldr	r5, [r7, #8]
    ada4:	6868      	ldr	r0, [r5, #4]
    ada6:	f020 0803 	bic.w	r8, r0, #3
    adaa:	4546      	cmp	r6, r8
    adac:	eba8 0306 	sub.w	r3, r8, r6
    adb0:	d802      	bhi.n	adb8 <_malloc_r+0x40c>
    adb2:	2b0f      	cmp	r3, #15
    adb4:	f73f af62 	bgt.w	ac7c <_malloc_r+0x2d0>
    adb8:	4620      	mov	r0, r4
    adba:	f000 f8ad 	bl	af18 <__malloc_unlock>
    adbe:	2500      	movs	r5, #0
    adc0:	e6bc      	b.n	ab3c <_malloc_r+0x190>
    adc2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    adc6:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    adca:	00c3      	lsls	r3, r0, #3
    adcc:	e634      	b.n	aa38 <_malloc_r+0x8c>
    adce:	f859 3908 	ldr.w	r3, [r9], #-8
    add2:	454b      	cmp	r3, r9
    add4:	f040 8096 	bne.w	af04 <_malloc_r+0x558>
    add8:	f010 0f03 	tst.w	r0, #3
    addc:	f100 30ff 	add.w	r0, r0, #4294967295
    ade0:	d1f5      	bne.n	adce <_malloc_r+0x422>
    ade2:	687b      	ldr	r3, [r7, #4]
    ade4:	ea23 0301 	bic.w	r3, r3, r1
    ade8:	607b      	str	r3, [r7, #4]
    adea:	0049      	lsls	r1, r1, #1
    adec:	4299      	cmp	r1, r3
    adee:	f63f aec0 	bhi.w	ab72 <_malloc_r+0x1c6>
    adf2:	b919      	cbnz	r1, adfc <_malloc_r+0x450>
    adf4:	e6bd      	b.n	ab72 <_malloc_r+0x1c6>
    adf6:	0049      	lsls	r1, r1, #1
    adf8:	f10e 0e04 	add.w	lr, lr, #4
    adfc:	4219      	tst	r1, r3
    adfe:	d0fa      	beq.n	adf6 <_malloc_r+0x44a>
    ae00:	4670      	mov	r0, lr
    ae02:	e667      	b.n	aad4 <_malloc_r+0x128>
    ae04:	f103 0810 	add.w	r8, r3, #16
    ae08:	e6d0      	b.n	abac <_malloc_r+0x200>
    ae0a:	109a      	asrs	r2, r3, #2
    ae0c:	f04f 0801 	mov.w	r8, #1
    ae10:	687b      	ldr	r3, [r7, #4]
    ae12:	fa08 f202 	lsl.w	r2, r8, r2
    ae16:	431a      	orrs	r2, r3
    ae18:	607a      	str	r2, [r7, #4]
    ae1a:	e770      	b.n	acfe <_malloc_r+0x352>
    ae1c:	eb02 0108 	add.w	r1, r2, r8
    ae20:	4249      	negs	r1, r1
    ae22:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    ae26:	4651      	mov	r1, sl
    ae28:	4620      	mov	r0, r4
    ae2a:	9200      	str	r2, [sp, #0]
    ae2c:	f001 fdf4 	bl	ca18 <_sbrk_r>
    ae30:	1c43      	adds	r3, r0, #1
    ae32:	e9dd 2300 	ldrd	r2, r3, [sp]
    ae36:	f47f aeef 	bne.w	ac18 <_malloc_r+0x26c>
    ae3a:	46da      	mov	sl, fp
    ae3c:	e6ef      	b.n	ac1e <_malloc_r+0x272>
    ae3e:	2b54      	cmp	r3, #84	; 0x54
    ae40:	d825      	bhi.n	ae8e <_malloc_r+0x4e2>
    ae42:	0b13      	lsrs	r3, r2, #12
    ae44:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    ae48:	00c9      	lsls	r1, r1, #3
    ae4a:	336e      	adds	r3, #110	; 0x6e
    ae4c:	e744      	b.n	acd8 <_malloc_r+0x32c>
    ae4e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    ae52:	d825      	bhi.n	aea0 <_malloc_r+0x4f4>
    ae54:	0bf3      	lsrs	r3, r6, #15
    ae56:	f103 0078 	add.w	r0, r3, #120	; 0x78
    ae5a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    ae5e:	00c3      	lsls	r3, r0, #3
    ae60:	e5ea      	b.n	aa38 <_malloc_r+0x8c>
    ae62:	4b29      	ldr	r3, [pc, #164]	; (af08 <_malloc_r+0x55c>)
    ae64:	6818      	ldr	r0, [r3, #0]
    ae66:	4440      	add	r0, r8
    ae68:	6018      	str	r0, [r3, #0]
    ae6a:	e6b1      	b.n	abd0 <_malloc_r+0x224>
    ae6c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    ae70:	f1bc 0f00 	cmp.w	ip, #0
    ae74:	f47f aeac 	bne.w	abd0 <_malloc_r+0x224>
    ae78:	68bd      	ldr	r5, [r7, #8]
    ae7a:	44c8      	add	r8, r9
    ae7c:	f048 0001 	orr.w	r0, r8, #1
    ae80:	6068      	str	r0, [r5, #4]
    ae82:	e6f0      	b.n	ac66 <_malloc_r+0x2ba>
    ae84:	4615      	mov	r5, r2
    ae86:	e6ee      	b.n	ac66 <_malloc_r+0x2ba>
    ae88:	2301      	movs	r3, #1
    ae8a:	6053      	str	r3, [r2, #4]
    ae8c:	e794      	b.n	adb8 <_malloc_r+0x40c>
    ae8e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    ae92:	d823      	bhi.n	aedc <_malloc_r+0x530>
    ae94:	0bd3      	lsrs	r3, r2, #15
    ae96:	f103 0178 	add.w	r1, r3, #120	; 0x78
    ae9a:	00c9      	lsls	r1, r1, #3
    ae9c:	3377      	adds	r3, #119	; 0x77
    ae9e:	e71b      	b.n	acd8 <_malloc_r+0x32c>
    aea0:	f240 5254 	movw	r2, #1364	; 0x554
    aea4:	4293      	cmp	r3, r2
    aea6:	d823      	bhi.n	aef0 <_malloc_r+0x544>
    aea8:	0cb3      	lsrs	r3, r6, #18
    aeaa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    aeae:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    aeb2:	00c3      	lsls	r3, r0, #3
    aeb4:	e5c0      	b.n	aa38 <_malloc_r+0x8c>
    aeb6:	f1ab 0b08 	sub.w	fp, fp, #8
    aeba:	44d8      	add	r8, fp
    aebc:	eba8 0802 	sub.w	r8, r8, r2
    aec0:	f04f 0a00 	mov.w	sl, #0
    aec4:	e6ab      	b.n	ac1e <_malloc_r+0x272>
    aec6:	f105 0108 	add.w	r1, r5, #8
    aeca:	4620      	mov	r0, r4
    aecc:	9300      	str	r3, [sp, #0]
    aece:	f002 f8e9 	bl	d0a4 <_free_r>
    aed2:	68bd      	ldr	r5, [r7, #8]
    aed4:	9b00      	ldr	r3, [sp, #0]
    aed6:	6868      	ldr	r0, [r5, #4]
    aed8:	6819      	ldr	r1, [r3, #0]
    aeda:	e6c4      	b.n	ac66 <_malloc_r+0x2ba>
    aedc:	f240 5154 	movw	r1, #1364	; 0x554
    aee0:	428b      	cmp	r3, r1
    aee2:	d80b      	bhi.n	aefc <_malloc_r+0x550>
    aee4:	0c93      	lsrs	r3, r2, #18
    aee6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    aeea:	00c9      	lsls	r1, r1, #3
    aeec:	337c      	adds	r3, #124	; 0x7c
    aeee:	e6f3      	b.n	acd8 <_malloc_r+0x32c>
    aef0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    aef4:	207f      	movs	r0, #127	; 0x7f
    aef6:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    aefa:	e59d      	b.n	aa38 <_malloc_r+0x8c>
    aefc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    af00:	237e      	movs	r3, #126	; 0x7e
    af02:	e6e9      	b.n	acd8 <_malloc_r+0x32c>
    af04:	687b      	ldr	r3, [r7, #4]
    af06:	e770      	b.n	adea <_malloc_r+0x43e>
    af08:	2002132c 	.word	0x2002132c

0000af0c <__malloc_lock>:
    af0c:	4801      	ldr	r0, [pc, #4]	; (af14 <__malloc_lock+0x8>)
    af0e:	f001 bdd9 	b.w	cac4 <__retarget_lock_acquire_recursive>
    af12:	bf00      	nop
    af14:	20021324 	.word	0x20021324

0000af18 <__malloc_unlock>:
    af18:	4801      	ldr	r0, [pc, #4]	; (af20 <__malloc_unlock+0x8>)
    af1a:	f001 bdd5 	b.w	cac8 <__retarget_lock_release_recursive>
    af1e:	bf00      	nop
    af20:	20021324 	.word	0x20021324

0000af24 <realloc>:
    af24:	b410      	push	{r4}
    af26:	4c04      	ldr	r4, [pc, #16]	; (af38 <realloc+0x14>)
    af28:	4603      	mov	r3, r0
    af2a:	460a      	mov	r2, r1
    af2c:	6820      	ldr	r0, [r4, #0]
    af2e:	f85d 4b04 	ldr.w	r4, [sp], #4
    af32:	4619      	mov	r1, r3
    af34:	f000 b802 	b.w	af3c <_realloc_r>
    af38:	20008e24 	.word	0x20008e24

0000af3c <_realloc_r>:
    af3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af40:	4617      	mov	r7, r2
    af42:	2900      	cmp	r1, #0
    af44:	f000 8098 	beq.w	b078 <_realloc_r+0x13c>
    af48:	460c      	mov	r4, r1
    af4a:	f107 050b 	add.w	r5, r7, #11
    af4e:	4680      	mov	r8, r0
    af50:	f7ff ffdc 	bl	af0c <__malloc_lock>
    af54:	2d16      	cmp	r5, #22
    af56:	f854 1c04 	ldr.w	r1, [r4, #-4]
    af5a:	d85b      	bhi.n	b014 <_realloc_r+0xd8>
    af5c:	2510      	movs	r5, #16
    af5e:	462a      	mov	r2, r5
    af60:	42af      	cmp	r7, r5
    af62:	d85c      	bhi.n	b01e <_realloc_r+0xe2>
    af64:	f021 0603 	bic.w	r6, r1, #3
    af68:	4296      	cmp	r6, r2
    af6a:	f1a4 0908 	sub.w	r9, r4, #8
    af6e:	da62      	bge.n	b036 <_realloc_r+0xfa>
    af70:	4bbc      	ldr	r3, [pc, #752]	; (b264 <_realloc_r+0x328>)
    af72:	f8d3 c008 	ldr.w	ip, [r3, #8]
    af76:	eb09 0006 	add.w	r0, r9, r6
    af7a:	4584      	cmp	ip, r0
    af7c:	f000 8097 	beq.w	b0ae <_realloc_r+0x172>
    af80:	f8d0 c004 	ldr.w	ip, [r0, #4]
    af84:	f02c 0301 	bic.w	r3, ip, #1
    af88:	4403      	add	r3, r0
    af8a:	685b      	ldr	r3, [r3, #4]
    af8c:	07db      	lsls	r3, r3, #31
    af8e:	d468      	bmi.n	b062 <_realloc_r+0x126>
    af90:	f02c 0c03 	bic.w	ip, ip, #3
    af94:	eb06 030c 	add.w	r3, r6, ip
    af98:	4293      	cmp	r3, r2
    af9a:	da47      	bge.n	b02c <_realloc_r+0xf0>
    af9c:	07cb      	lsls	r3, r1, #31
    af9e:	d410      	bmi.n	afc2 <_realloc_r+0x86>
    afa0:	f854 3c08 	ldr.w	r3, [r4, #-8]
    afa4:	eba9 0a03 	sub.w	sl, r9, r3
    afa8:	f8da 3004 	ldr.w	r3, [sl, #4]
    afac:	f023 0103 	bic.w	r1, r3, #3
    afb0:	448c      	add	ip, r1
    afb2:	44b4      	add	ip, r6
    afb4:	4594      	cmp	ip, r2
    afb6:	f280 8111 	bge.w	b1dc <_realloc_r+0x2a0>
    afba:	1873      	adds	r3, r6, r1
    afbc:	4293      	cmp	r3, r2
    afbe:	f280 80e8 	bge.w	b192 <_realloc_r+0x256>
    afc2:	4639      	mov	r1, r7
    afc4:	4640      	mov	r0, r8
    afc6:	f7ff fcf1 	bl	a9ac <_malloc_r>
    afca:	4607      	mov	r7, r0
    afcc:	b1e0      	cbz	r0, b008 <_realloc_r+0xcc>
    afce:	f854 3c04 	ldr.w	r3, [r4, #-4]
    afd2:	f023 0301 	bic.w	r3, r3, #1
    afd6:	444b      	add	r3, r9
    afd8:	f1a0 0208 	sub.w	r2, r0, #8
    afdc:	4293      	cmp	r3, r2
    afde:	f000 80d2 	beq.w	b186 <_realloc_r+0x24a>
    afe2:	1f32      	subs	r2, r6, #4
    afe4:	2a24      	cmp	r2, #36	; 0x24
    afe6:	f200 80f5 	bhi.w	b1d4 <_realloc_r+0x298>
    afea:	2a13      	cmp	r2, #19
    afec:	f200 80ac 	bhi.w	b148 <_realloc_r+0x20c>
    aff0:	4603      	mov	r3, r0
    aff2:	4622      	mov	r2, r4
    aff4:	6811      	ldr	r1, [r2, #0]
    aff6:	6019      	str	r1, [r3, #0]
    aff8:	6851      	ldr	r1, [r2, #4]
    affa:	6059      	str	r1, [r3, #4]
    affc:	6892      	ldr	r2, [r2, #8]
    affe:	609a      	str	r2, [r3, #8]
    b000:	4621      	mov	r1, r4
    b002:	4640      	mov	r0, r8
    b004:	f002 f84e 	bl	d0a4 <_free_r>
    b008:	4640      	mov	r0, r8
    b00a:	f7ff ff85 	bl	af18 <__malloc_unlock>
    b00e:	4638      	mov	r0, r7
    b010:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b014:	f025 0507 	bic.w	r5, r5, #7
    b018:	2d00      	cmp	r5, #0
    b01a:	462a      	mov	r2, r5
    b01c:	daa0      	bge.n	af60 <_realloc_r+0x24>
    b01e:	230c      	movs	r3, #12
    b020:	f8c8 3000 	str.w	r3, [r8]
    b024:	2700      	movs	r7, #0
    b026:	4638      	mov	r0, r7
    b028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b02c:	461e      	mov	r6, r3
    b02e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    b032:	60d3      	str	r3, [r2, #12]
    b034:	609a      	str	r2, [r3, #8]
    b036:	1b73      	subs	r3, r6, r5
    b038:	2b0f      	cmp	r3, #15
    b03a:	d822      	bhi.n	b082 <_realloc_r+0x146>
    b03c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    b040:	f003 0301 	and.w	r3, r3, #1
    b044:	4333      	orrs	r3, r6
    b046:	444e      	add	r6, r9
    b048:	f8c9 3004 	str.w	r3, [r9, #4]
    b04c:	6873      	ldr	r3, [r6, #4]
    b04e:	f043 0301 	orr.w	r3, r3, #1
    b052:	6073      	str	r3, [r6, #4]
    b054:	4640      	mov	r0, r8
    b056:	4627      	mov	r7, r4
    b058:	f7ff ff5e 	bl	af18 <__malloc_unlock>
    b05c:	4638      	mov	r0, r7
    b05e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b062:	07c9      	lsls	r1, r1, #31
    b064:	d4ad      	bmi.n	afc2 <_realloc_r+0x86>
    b066:	f854 3c08 	ldr.w	r3, [r4, #-8]
    b06a:	eba9 0a03 	sub.w	sl, r9, r3
    b06e:	f8da 1004 	ldr.w	r1, [sl, #4]
    b072:	f021 0103 	bic.w	r1, r1, #3
    b076:	e7a0      	b.n	afba <_realloc_r+0x7e>
    b078:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b07c:	4611      	mov	r1, r2
    b07e:	f7ff bc95 	b.w	a9ac <_malloc_r>
    b082:	f8d9 2004 	ldr.w	r2, [r9, #4]
    b086:	eb09 0105 	add.w	r1, r9, r5
    b08a:	f002 0201 	and.w	r2, r2, #1
    b08e:	444e      	add	r6, r9
    b090:	f043 0301 	orr.w	r3, r3, #1
    b094:	432a      	orrs	r2, r5
    b096:	f8c9 2004 	str.w	r2, [r9, #4]
    b09a:	604b      	str	r3, [r1, #4]
    b09c:	6873      	ldr	r3, [r6, #4]
    b09e:	f043 0301 	orr.w	r3, r3, #1
    b0a2:	3108      	adds	r1, #8
    b0a4:	6073      	str	r3, [r6, #4]
    b0a6:	4640      	mov	r0, r8
    b0a8:	f001 fffc 	bl	d0a4 <_free_r>
    b0ac:	e7d2      	b.n	b054 <_realloc_r+0x118>
    b0ae:	f8dc 0004 	ldr.w	r0, [ip, #4]
    b0b2:	f020 0b03 	bic.w	fp, r0, #3
    b0b6:	eb06 0c0b 	add.w	ip, r6, fp
    b0ba:	f105 0010 	add.w	r0, r5, #16
    b0be:	4584      	cmp	ip, r0
    b0c0:	da4d      	bge.n	b15e <_realloc_r+0x222>
    b0c2:	07c9      	lsls	r1, r1, #31
    b0c4:	f53f af7d 	bmi.w	afc2 <_realloc_r+0x86>
    b0c8:	f854 1c08 	ldr.w	r1, [r4, #-8]
    b0cc:	eba9 0a01 	sub.w	sl, r9, r1
    b0d0:	f8da 1004 	ldr.w	r1, [sl, #4]
    b0d4:	f021 0103 	bic.w	r1, r1, #3
    b0d8:	448b      	add	fp, r1
    b0da:	44b3      	add	fp, r6
    b0dc:	4558      	cmp	r0, fp
    b0de:	f73f af6c 	bgt.w	afba <_realloc_r+0x7e>
    b0e2:	4657      	mov	r7, sl
    b0e4:	f8da 100c 	ldr.w	r1, [sl, #12]
    b0e8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b0ec:	1f32      	subs	r2, r6, #4
    b0ee:	2a24      	cmp	r2, #36	; 0x24
    b0f0:	60c1      	str	r1, [r0, #12]
    b0f2:	6088      	str	r0, [r1, #8]
    b0f4:	f200 80db 	bhi.w	b2ae <_realloc_r+0x372>
    b0f8:	2a13      	cmp	r2, #19
    b0fa:	f240 80d6 	bls.w	b2aa <_realloc_r+0x36e>
    b0fe:	6821      	ldr	r1, [r4, #0]
    b100:	f8ca 1008 	str.w	r1, [sl, #8]
    b104:	6861      	ldr	r1, [r4, #4]
    b106:	f8ca 100c 	str.w	r1, [sl, #12]
    b10a:	2a1b      	cmp	r2, #27
    b10c:	f200 80df 	bhi.w	b2ce <_realloc_r+0x392>
    b110:	3408      	adds	r4, #8
    b112:	f10a 0210 	add.w	r2, sl, #16
    b116:	6821      	ldr	r1, [r4, #0]
    b118:	6011      	str	r1, [r2, #0]
    b11a:	6861      	ldr	r1, [r4, #4]
    b11c:	6051      	str	r1, [r2, #4]
    b11e:	68a1      	ldr	r1, [r4, #8]
    b120:	6091      	str	r1, [r2, #8]
    b122:	eb0a 0105 	add.w	r1, sl, r5
    b126:	ebab 0205 	sub.w	r2, fp, r5
    b12a:	f042 0201 	orr.w	r2, r2, #1
    b12e:	6099      	str	r1, [r3, #8]
    b130:	604a      	str	r2, [r1, #4]
    b132:	f8da 3004 	ldr.w	r3, [sl, #4]
    b136:	f003 0301 	and.w	r3, r3, #1
    b13a:	432b      	orrs	r3, r5
    b13c:	4640      	mov	r0, r8
    b13e:	f8ca 3004 	str.w	r3, [sl, #4]
    b142:	f7ff fee9 	bl	af18 <__malloc_unlock>
    b146:	e76e      	b.n	b026 <_realloc_r+0xea>
    b148:	6823      	ldr	r3, [r4, #0]
    b14a:	6003      	str	r3, [r0, #0]
    b14c:	6863      	ldr	r3, [r4, #4]
    b14e:	6043      	str	r3, [r0, #4]
    b150:	2a1b      	cmp	r2, #27
    b152:	d868      	bhi.n	b226 <_realloc_r+0x2ea>
    b154:	f104 0208 	add.w	r2, r4, #8
    b158:	f100 0308 	add.w	r3, r0, #8
    b15c:	e74a      	b.n	aff4 <_realloc_r+0xb8>
    b15e:	eb09 0205 	add.w	r2, r9, r5
    b162:	609a      	str	r2, [r3, #8]
    b164:	ebac 0305 	sub.w	r3, ip, r5
    b168:	f043 0301 	orr.w	r3, r3, #1
    b16c:	6053      	str	r3, [r2, #4]
    b16e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b172:	f003 0301 	and.w	r3, r3, #1
    b176:	432b      	orrs	r3, r5
    b178:	4640      	mov	r0, r8
    b17a:	f844 3c04 	str.w	r3, [r4, #-4]
    b17e:	f7ff fecb 	bl	af18 <__malloc_unlock>
    b182:	4627      	mov	r7, r4
    b184:	e74f      	b.n	b026 <_realloc_r+0xea>
    b186:	f850 3c04 	ldr.w	r3, [r0, #-4]
    b18a:	f023 0303 	bic.w	r3, r3, #3
    b18e:	441e      	add	r6, r3
    b190:	e751      	b.n	b036 <_realloc_r+0xfa>
    b192:	4657      	mov	r7, sl
    b194:	f8da 100c 	ldr.w	r1, [sl, #12]
    b198:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b19c:	1f32      	subs	r2, r6, #4
    b19e:	2a24      	cmp	r2, #36	; 0x24
    b1a0:	60c1      	str	r1, [r0, #12]
    b1a2:	6088      	str	r0, [r1, #8]
    b1a4:	d84c      	bhi.n	b240 <_realloc_r+0x304>
    b1a6:	2a13      	cmp	r2, #19
    b1a8:	d948      	bls.n	b23c <_realloc_r+0x300>
    b1aa:	6821      	ldr	r1, [r4, #0]
    b1ac:	f8ca 1008 	str.w	r1, [sl, #8]
    b1b0:	6861      	ldr	r1, [r4, #4]
    b1b2:	f8ca 100c 	str.w	r1, [sl, #12]
    b1b6:	2a1b      	cmp	r2, #27
    b1b8:	d856      	bhi.n	b268 <_realloc_r+0x32c>
    b1ba:	3408      	adds	r4, #8
    b1bc:	f10a 0210 	add.w	r2, sl, #16
    b1c0:	461e      	mov	r6, r3
    b1c2:	6823      	ldr	r3, [r4, #0]
    b1c4:	6013      	str	r3, [r2, #0]
    b1c6:	6863      	ldr	r3, [r4, #4]
    b1c8:	6053      	str	r3, [r2, #4]
    b1ca:	68a3      	ldr	r3, [r4, #8]
    b1cc:	6093      	str	r3, [r2, #8]
    b1ce:	46d1      	mov	r9, sl
    b1d0:	463c      	mov	r4, r7
    b1d2:	e730      	b.n	b036 <_realloc_r+0xfa>
    b1d4:	4621      	mov	r1, r4
    b1d6:	f001 fa95 	bl	c704 <memmove>
    b1da:	e711      	b.n	b000 <_realloc_r+0xc4>
    b1dc:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    b1e0:	4657      	mov	r7, sl
    b1e2:	60cb      	str	r3, [r1, #12]
    b1e4:	6099      	str	r1, [r3, #8]
    b1e6:	f857 1f08 	ldr.w	r1, [r7, #8]!
    b1ea:	f8da 300c 	ldr.w	r3, [sl, #12]
    b1ee:	60cb      	str	r3, [r1, #12]
    b1f0:	1f32      	subs	r2, r6, #4
    b1f2:	2a24      	cmp	r2, #36	; 0x24
    b1f4:	6099      	str	r1, [r3, #8]
    b1f6:	d82d      	bhi.n	b254 <_realloc_r+0x318>
    b1f8:	2a13      	cmp	r2, #19
    b1fa:	d929      	bls.n	b250 <_realloc_r+0x314>
    b1fc:	6823      	ldr	r3, [r4, #0]
    b1fe:	f8ca 3008 	str.w	r3, [sl, #8]
    b202:	6863      	ldr	r3, [r4, #4]
    b204:	f8ca 300c 	str.w	r3, [sl, #12]
    b208:	2a1b      	cmp	r2, #27
    b20a:	d842      	bhi.n	b292 <_realloc_r+0x356>
    b20c:	3408      	adds	r4, #8
    b20e:	f10a 0310 	add.w	r3, sl, #16
    b212:	6822      	ldr	r2, [r4, #0]
    b214:	601a      	str	r2, [r3, #0]
    b216:	6862      	ldr	r2, [r4, #4]
    b218:	605a      	str	r2, [r3, #4]
    b21a:	68a2      	ldr	r2, [r4, #8]
    b21c:	609a      	str	r2, [r3, #8]
    b21e:	4666      	mov	r6, ip
    b220:	46d1      	mov	r9, sl
    b222:	463c      	mov	r4, r7
    b224:	e707      	b.n	b036 <_realloc_r+0xfa>
    b226:	68a3      	ldr	r3, [r4, #8]
    b228:	6083      	str	r3, [r0, #8]
    b22a:	68e3      	ldr	r3, [r4, #12]
    b22c:	60c3      	str	r3, [r0, #12]
    b22e:	2a24      	cmp	r2, #36	; 0x24
    b230:	d026      	beq.n	b280 <_realloc_r+0x344>
    b232:	f104 0210 	add.w	r2, r4, #16
    b236:	f100 0310 	add.w	r3, r0, #16
    b23a:	e6db      	b.n	aff4 <_realloc_r+0xb8>
    b23c:	463a      	mov	r2, r7
    b23e:	e7bf      	b.n	b1c0 <_realloc_r+0x284>
    b240:	4621      	mov	r1, r4
    b242:	4638      	mov	r0, r7
    b244:	461e      	mov	r6, r3
    b246:	46d1      	mov	r9, sl
    b248:	f001 fa5c 	bl	c704 <memmove>
    b24c:	463c      	mov	r4, r7
    b24e:	e6f2      	b.n	b036 <_realloc_r+0xfa>
    b250:	463b      	mov	r3, r7
    b252:	e7de      	b.n	b212 <_realloc_r+0x2d6>
    b254:	4621      	mov	r1, r4
    b256:	4638      	mov	r0, r7
    b258:	4666      	mov	r6, ip
    b25a:	46d1      	mov	r9, sl
    b25c:	f001 fa52 	bl	c704 <memmove>
    b260:	463c      	mov	r4, r7
    b262:	e6e8      	b.n	b036 <_realloc_r+0xfa>
    b264:	20008a08 	.word	0x20008a08
    b268:	68a1      	ldr	r1, [r4, #8]
    b26a:	f8ca 1010 	str.w	r1, [sl, #16]
    b26e:	68e1      	ldr	r1, [r4, #12]
    b270:	f8ca 1014 	str.w	r1, [sl, #20]
    b274:	2a24      	cmp	r2, #36	; 0x24
    b276:	d020      	beq.n	b2ba <_realloc_r+0x37e>
    b278:	3410      	adds	r4, #16
    b27a:	f10a 0218 	add.w	r2, sl, #24
    b27e:	e79f      	b.n	b1c0 <_realloc_r+0x284>
    b280:	6923      	ldr	r3, [r4, #16]
    b282:	6103      	str	r3, [r0, #16]
    b284:	6961      	ldr	r1, [r4, #20]
    b286:	6141      	str	r1, [r0, #20]
    b288:	f104 0218 	add.w	r2, r4, #24
    b28c:	f100 0318 	add.w	r3, r0, #24
    b290:	e6b0      	b.n	aff4 <_realloc_r+0xb8>
    b292:	68a3      	ldr	r3, [r4, #8]
    b294:	f8ca 3010 	str.w	r3, [sl, #16]
    b298:	68e3      	ldr	r3, [r4, #12]
    b29a:	f8ca 3014 	str.w	r3, [sl, #20]
    b29e:	2a24      	cmp	r2, #36	; 0x24
    b2a0:	d021      	beq.n	b2e6 <_realloc_r+0x3aa>
    b2a2:	3410      	adds	r4, #16
    b2a4:	f10a 0318 	add.w	r3, sl, #24
    b2a8:	e7b3      	b.n	b212 <_realloc_r+0x2d6>
    b2aa:	463a      	mov	r2, r7
    b2ac:	e733      	b.n	b116 <_realloc_r+0x1da>
    b2ae:	4621      	mov	r1, r4
    b2b0:	4638      	mov	r0, r7
    b2b2:	f001 fa27 	bl	c704 <memmove>
    b2b6:	4b16      	ldr	r3, [pc, #88]	; (b310 <_realloc_r+0x3d4>)
    b2b8:	e733      	b.n	b122 <_realloc_r+0x1e6>
    b2ba:	6922      	ldr	r2, [r4, #16]
    b2bc:	f8ca 2018 	str.w	r2, [sl, #24]
    b2c0:	6962      	ldr	r2, [r4, #20]
    b2c2:	f8ca 201c 	str.w	r2, [sl, #28]
    b2c6:	3418      	adds	r4, #24
    b2c8:	f10a 0220 	add.w	r2, sl, #32
    b2cc:	e778      	b.n	b1c0 <_realloc_r+0x284>
    b2ce:	68a1      	ldr	r1, [r4, #8]
    b2d0:	f8ca 1010 	str.w	r1, [sl, #16]
    b2d4:	68e1      	ldr	r1, [r4, #12]
    b2d6:	f8ca 1014 	str.w	r1, [sl, #20]
    b2da:	2a24      	cmp	r2, #36	; 0x24
    b2dc:	d00d      	beq.n	b2fa <_realloc_r+0x3be>
    b2de:	3410      	adds	r4, #16
    b2e0:	f10a 0218 	add.w	r2, sl, #24
    b2e4:	e717      	b.n	b116 <_realloc_r+0x1da>
    b2e6:	6923      	ldr	r3, [r4, #16]
    b2e8:	f8ca 3018 	str.w	r3, [sl, #24]
    b2ec:	6963      	ldr	r3, [r4, #20]
    b2ee:	f8ca 301c 	str.w	r3, [sl, #28]
    b2f2:	3418      	adds	r4, #24
    b2f4:	f10a 0320 	add.w	r3, sl, #32
    b2f8:	e78b      	b.n	b212 <_realloc_r+0x2d6>
    b2fa:	6922      	ldr	r2, [r4, #16]
    b2fc:	f8ca 2018 	str.w	r2, [sl, #24]
    b300:	6962      	ldr	r2, [r4, #20]
    b302:	f8ca 201c 	str.w	r2, [sl, #28]
    b306:	3418      	adds	r4, #24
    b308:	f10a 0220 	add.w	r2, sl, #32
    b30c:	e703      	b.n	b116 <_realloc_r+0x1da>
    b30e:	bf00      	nop
    b310:	20008a08 	.word	0x20008a08
    b314:	00000000 	.word	0x00000000

0000b318 <_strtod_l>:
    b318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b31c:	ed2d 8b10 	vpush	{d8-d15}
    b320:	b097      	sub	sp, #92	; 0x5c
    b322:	468a      	mov	sl, r1
    b324:	2100      	movs	r1, #0
    b326:	9207      	str	r2, [sp, #28]
    b328:	9112      	str	r1, [sp, #72]	; 0x48
    b32a:	2200      	movs	r2, #0
    b32c:	2100      	movs	r1, #0
    b32e:	e9cd 1204 	strd	r1, r2, [sp, #16]
    b332:	4680      	mov	r8, r0
    b334:	4651      	mov	r1, sl
    b336:	9111      	str	r1, [sp, #68]	; 0x44
    b338:	460f      	mov	r7, r1
    b33a:	f811 2b01 	ldrb.w	r2, [r1], #1
    b33e:	2a2d      	cmp	r2, #45	; 0x2d
    b340:	d85e      	bhi.n	b400 <_strtod_l+0xe8>
    b342:	a001      	add	r0, pc, #4	; (adr r0, b348 <_strtod_l+0x30>)
    b344:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    b348:	0000b4e9 	.word	0x0000b4e9
    b34c:	0000b401 	.word	0x0000b401
    b350:	0000b401 	.word	0x0000b401
    b354:	0000b401 	.word	0x0000b401
    b358:	0000b401 	.word	0x0000b401
    b35c:	0000b401 	.word	0x0000b401
    b360:	0000b401 	.word	0x0000b401
    b364:	0000b401 	.word	0x0000b401
    b368:	0000b401 	.word	0x0000b401
    b36c:	0000b337 	.word	0x0000b337
    b370:	0000b337 	.word	0x0000b337
    b374:	0000b337 	.word	0x0000b337
    b378:	0000b337 	.word	0x0000b337
    b37c:	0000b337 	.word	0x0000b337
    b380:	0000b401 	.word	0x0000b401
    b384:	0000b401 	.word	0x0000b401
    b388:	0000b401 	.word	0x0000b401
    b38c:	0000b401 	.word	0x0000b401
    b390:	0000b401 	.word	0x0000b401
    b394:	0000b401 	.word	0x0000b401
    b398:	0000b401 	.word	0x0000b401
    b39c:	0000b401 	.word	0x0000b401
    b3a0:	0000b401 	.word	0x0000b401
    b3a4:	0000b401 	.word	0x0000b401
    b3a8:	0000b401 	.word	0x0000b401
    b3ac:	0000b401 	.word	0x0000b401
    b3b0:	0000b401 	.word	0x0000b401
    b3b4:	0000b401 	.word	0x0000b401
    b3b8:	0000b401 	.word	0x0000b401
    b3bc:	0000b401 	.word	0x0000b401
    b3c0:	0000b401 	.word	0x0000b401
    b3c4:	0000b401 	.word	0x0000b401
    b3c8:	0000b337 	.word	0x0000b337
    b3cc:	0000b401 	.word	0x0000b401
    b3d0:	0000b401 	.word	0x0000b401
    b3d4:	0000b401 	.word	0x0000b401
    b3d8:	0000b401 	.word	0x0000b401
    b3dc:	0000b401 	.word	0x0000b401
    b3e0:	0000b401 	.word	0x0000b401
    b3e4:	0000b401 	.word	0x0000b401
    b3e8:	0000b401 	.word	0x0000b401
    b3ec:	0000b401 	.word	0x0000b401
    b3f0:	0000b401 	.word	0x0000b401
    b3f4:	0000bb23 	.word	0x0000bb23
    b3f8:	0000b401 	.word	0x0000b401
    b3fc:	0000bb0f 	.word	0x0000bb0f
    b400:	2100      	movs	r1, #0
    b402:	9109      	str	r1, [sp, #36]	; 0x24
    b404:	2a30      	cmp	r2, #48	; 0x30
    b406:	d07d      	beq.n	b504 <_strtod_l+0x1ec>
    b408:	2300      	movs	r3, #0
    b40a:	9308      	str	r3, [sp, #32]
    b40c:	2a2f      	cmp	r2, #47	; 0x2f
    b40e:	4614      	mov	r4, r2
    b410:	f240 84cd 	bls.w	bdae <_strtod_l+0xa96>
    b414:	f04f 0900 	mov.w	r9, #0
    b418:	4638      	mov	r0, r7
    b41a:	464e      	mov	r6, r9
    b41c:	464d      	mov	r5, r9
    b41e:	e012      	b.n	b446 <_strtod_l+0x12e>
    b420:	3001      	adds	r0, #1
    b422:	2d08      	cmp	r5, #8
    b424:	9011      	str	r0, [sp, #68]	; 0x44
    b426:	bfc8      	it	gt
    b428:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    b42c:	7804      	ldrb	r4, [r0, #0]
    b42e:	bfc6      	itte	gt
    b430:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    b434:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    b438:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    b43c:	2c2f      	cmp	r4, #47	; 0x2f
    b43e:	f105 0501 	add.w	r5, r5, #1
    b442:	4622      	mov	r2, r4
    b444:	dd6f      	ble.n	b526 <_strtod_l+0x20e>
    b446:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    b44a:	2c39      	cmp	r4, #57	; 0x39
    b44c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    b450:	dde6      	ble.n	b420 <_strtod_l+0x108>
    b452:	499f      	ldr	r1, [pc, #636]	; (b6d0 <_strtod_l+0x3b8>)
    b454:	2201      	movs	r2, #1
    b456:	f001 fa23 	bl	c8a0 <strncmp>
    b45a:	2800      	cmp	r0, #0
    b45c:	d137      	bne.n	b4ce <_strtod_l+0x1b6>
    b45e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b460:	461a      	mov	r2, r3
    b462:	3301      	adds	r3, #1
    b464:	9311      	str	r3, [sp, #68]	; 0x44
    b466:	7854      	ldrb	r4, [r2, #1]
    b468:	2d00      	cmp	r5, #0
    b46a:	f040 8543 	bne.w	bef4 <_strtod_l+0xbdc>
    b46e:	2c30      	cmp	r4, #48	; 0x30
    b470:	f040 8524 	bne.w	bebc <_strtod_l+0xba4>
    b474:	f1c3 0201 	rsb	r2, r3, #1
    b478:	1898      	adds	r0, r3, r2
    b47a:	3301      	adds	r3, #1
    b47c:	9311      	str	r3, [sp, #68]	; 0x44
    b47e:	781c      	ldrb	r4, [r3, #0]
    b480:	2c30      	cmp	r4, #48	; 0x30
    b482:	d0f9      	beq.n	b478 <_strtod_l+0x160>
    b484:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    b488:	2b08      	cmp	r3, #8
    b48a:	f200 8301 	bhi.w	ba90 <_strtod_l+0x778>
    b48e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b490:	1c43      	adds	r3, r0, #1
    b492:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    b496:	930b      	str	r3, [sp, #44]	; 0x2c
    b498:	2501      	movs	r5, #1
    b49a:	46bc      	mov	ip, r7
    b49c:	f04f 0e00 	mov.w	lr, #0
    b4a0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    b4a4:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    b4a8:	2000      	movs	r0, #0
    b4aa:	f10c 0301 	add.w	r3, ip, #1
    b4ae:	9311      	str	r3, [sp, #68]	; 0x44
    b4b0:	f89c 4001 	ldrb.w	r4, [ip, #1]
    b4b4:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    b4b8:	2909      	cmp	r1, #9
    b4ba:	f200 82bb 	bhi.w	ba34 <_strtod_l+0x71c>
    b4be:	3001      	adds	r0, #1
    b4c0:	468b      	mov	fp, r1
    b4c2:	2900      	cmp	r1, #0
    b4c4:	f040 844f 	bne.w	bd66 <_strtod_l+0xa4e>
    b4c8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    b4cc:	e7ed      	b.n	b4aa <_strtod_l+0x192>
    b4ce:	2000      	movs	r0, #0
    b4d0:	2c65      	cmp	r4, #101	; 0x65
    b4d2:	46ae      	mov	lr, r5
    b4d4:	900b      	str	r0, [sp, #44]	; 0x2c
    b4d6:	4684      	mov	ip, r0
    b4d8:	d001      	beq.n	b4de <_strtod_l+0x1c6>
    b4da:	2c45      	cmp	r4, #69	; 0x45
    b4dc:	d130      	bne.n	b540 <_strtod_l+0x228>
    b4de:	2d00      	cmp	r5, #0
    b4e0:	d16b      	bne.n	b5ba <_strtod_l+0x2a2>
    b4e2:	9b08      	ldr	r3, [sp, #32]
    b4e4:	4303      	orrs	r3, r0
    b4e6:	d167      	bne.n	b5b8 <_strtod_l+0x2a0>
    b4e8:	9b07      	ldr	r3, [sp, #28]
    b4ea:	ed9f 8b77 	vldr	d8, [pc, #476]	; b6c8 <_strtod_l+0x3b0>
    b4ee:	b113      	cbz	r3, b4f6 <_strtod_l+0x1de>
    b4f0:	9b07      	ldr	r3, [sp, #28]
    b4f2:	f8c3 a000 	str.w	sl, [r3]
    b4f6:	eeb0 0b48 	vmov.f64	d0, d8
    b4fa:	b017      	add	sp, #92	; 0x5c
    b4fc:	ecbd 8b10 	vpop	{d8-d15}
    b500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b504:	787a      	ldrb	r2, [r7, #1]
    b506:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    b50a:	2a58      	cmp	r2, #88	; 0x58
    b50c:	f000 840c 	beq.w	bd28 <_strtod_l+0xa10>
    b510:	3701      	adds	r7, #1
    b512:	9711      	str	r7, [sp, #68]	; 0x44
    b514:	783a      	ldrb	r2, [r7, #0]
    b516:	2a30      	cmp	r2, #48	; 0x30
    b518:	d0fa      	beq.n	b510 <_strtod_l+0x1f8>
    b51a:	2a00      	cmp	r2, #0
    b51c:	f000 80b7 	beq.w	b68e <_strtod_l+0x376>
    b520:	2301      	movs	r3, #1
    b522:	9308      	str	r3, [sp, #32]
    b524:	e772      	b.n	b40c <_strtod_l+0xf4>
    b526:	496a      	ldr	r1, [pc, #424]	; (b6d0 <_strtod_l+0x3b8>)
    b528:	2201      	movs	r2, #1
    b52a:	f001 f9b9 	bl	c8a0 <strncmp>
    b52e:	2800      	cmp	r0, #0
    b530:	f000 80c0 	beq.w	b6b4 <_strtod_l+0x39c>
    b534:	46ae      	mov	lr, r5
    b536:	f04f 0c00 	mov.w	ip, #0
    b53a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    b53e:	4660      	mov	r0, ip
    b540:	f04f 0b00 	mov.w	fp, #0
    b544:	2d00      	cmp	r5, #0
    b546:	d07e      	beq.n	b646 <_strtod_l+0x32e>
    b548:	ee07 6a90 	vmov	s15, r6
    b54c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b54e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    b552:	ebab 0303 	sub.w	r3, fp, r3
    b556:	f1be 0f00 	cmp.w	lr, #0
    b55a:	bf08      	it	eq
    b55c:	46ae      	moveq	lr, r5
    b55e:	2d10      	cmp	r5, #16
    b560:	930a      	str	r3, [sp, #40]	; 0x28
    b562:	462b      	mov	r3, r5
    b564:	bfa8      	it	ge
    b566:	2310      	movge	r3, #16
    b568:	2d09      	cmp	r5, #9
    b56a:	ed8d 7b04 	vstr	d7, [sp, #16]
    b56e:	dd0c      	ble.n	b58a <_strtod_l+0x272>
    b570:	4a58      	ldr	r2, [pc, #352]	; (b6d4 <_strtod_l+0x3bc>)
    b572:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    b576:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    b57a:	ee06 9a90 	vmov	s13, r9
    b57e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    b582:	eea7 6b05 	vfma.f64	d6, d7, d5
    b586:	ed8d 6b04 	vstr	d6, [sp, #16]
    b58a:	2d0f      	cmp	r5, #15
    b58c:	f300 80a8 	bgt.w	b6e0 <_strtod_l+0x3c8>
    b590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b592:	2a00      	cmp	r2, #0
    b594:	f000 83e4 	beq.w	bd60 <_strtod_l+0xa48>
    b598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b59a:	f340 833c 	ble.w	bc16 <_strtod_l+0x8fe>
    b59e:	2a16      	cmp	r2, #22
    b5a0:	f340 8498 	ble.w	bed4 <_strtod_l+0xbbc>
    b5a4:	990a      	ldr	r1, [sp, #40]	; 0x28
    b5a6:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    b5aa:	428a      	cmp	r2, r1
    b5ac:	f280 84a6 	bge.w	befc <_strtod_l+0xbe4>
    b5b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b5b2:	1aeb      	subs	r3, r5, r3
    b5b4:	4413      	add	r3, r2
    b5b6:	e099      	b.n	b6ec <_strtod_l+0x3d4>
    b5b8:	2500      	movs	r5, #0
    b5ba:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    b5be:	f10a 0301 	add.w	r3, sl, #1
    b5c2:	9311      	str	r3, [sp, #68]	; 0x44
    b5c4:	f89a 4001 	ldrb.w	r4, [sl, #1]
    b5c8:	2c2b      	cmp	r4, #43	; 0x2b
    b5ca:	f000 825e 	beq.w	ba8a <_strtod_l+0x772>
    b5ce:	2c2d      	cmp	r4, #45	; 0x2d
    b5d0:	f000 81f7 	beq.w	b9c2 <_strtod_l+0x6aa>
    b5d4:	2300      	movs	r3, #0
    b5d6:	930a      	str	r3, [sp, #40]	; 0x28
    b5d8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    b5dc:	2b09      	cmp	r3, #9
    b5de:	f200 81eb 	bhi.w	b9b8 <_strtod_l+0x6a0>
    b5e2:	2c30      	cmp	r4, #48	; 0x30
    b5e4:	d105      	bne.n	b5f2 <_strtod_l+0x2da>
    b5e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b5e8:	3301      	adds	r3, #1
    b5ea:	9311      	str	r3, [sp, #68]	; 0x44
    b5ec:	781c      	ldrb	r4, [r3, #0]
    b5ee:	2c30      	cmp	r4, #48	; 0x30
    b5f0:	d0fa      	beq.n	b5e8 <_strtod_l+0x2d0>
    b5f2:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    b5f6:	2b08      	cmp	r3, #8
    b5f8:	d8a2      	bhi.n	b540 <_strtod_l+0x228>
    b5fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b5fc:	920c      	str	r2, [sp, #48]	; 0x30
    b5fe:	1c53      	adds	r3, r2, #1
    b600:	9311      	str	r3, [sp, #68]	; 0x44
    b602:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    b606:	7854      	ldrb	r4, [r2, #1]
    b608:	2c2f      	cmp	r4, #47	; 0x2f
    b60a:	dc07      	bgt.n	b61c <_strtod_l+0x304>
    b60c:	e3de      	b.n	bdcc <_strtod_l+0xab4>
    b60e:	3301      	adds	r3, #1
    b610:	9311      	str	r3, [sp, #68]	; 0x44
    b612:	784c      	ldrb	r4, [r1, #1]
    b614:	2c2f      	cmp	r4, #47	; 0x2f
    b616:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    b61a:	dd06      	ble.n	b62a <_strtod_l+0x312>
    b61c:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    b620:	2c39      	cmp	r4, #57	; 0x39
    b622:	4619      	mov	r1, r3
    b624:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    b628:	ddf1      	ble.n	b60e <_strtod_l+0x2f6>
    b62a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b62c:	1a9b      	subs	r3, r3, r2
    b62e:	2b08      	cmp	r3, #8
    b630:	f340 83cc 	ble.w	bdcc <_strtod_l+0xab4>
    b634:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    b638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b63a:	2b00      	cmp	r3, #0
    b63c:	d082      	beq.n	b544 <_strtod_l+0x22c>
    b63e:	f1cb 0b00 	rsb	fp, fp, #0
    b642:	2d00      	cmp	r5, #0
    b644:	d180      	bne.n	b548 <_strtod_l+0x230>
    b646:	9b08      	ldr	r3, [sp, #32]
    b648:	4303      	orrs	r3, r0
    b64a:	d120      	bne.n	b68e <_strtod_l+0x376>
    b64c:	f1bc 0f00 	cmp.w	ip, #0
    b650:	f47f af4a 	bne.w	b4e8 <_strtod_l+0x1d0>
    b654:	2c69      	cmp	r4, #105	; 0x69
    b656:	f000 83cf 	beq.w	bdf8 <_strtod_l+0xae0>
    b65a:	f300 82f3 	bgt.w	bc44 <_strtod_l+0x92c>
    b65e:	2c49      	cmp	r4, #73	; 0x49
    b660:	f000 83ca 	beq.w	bdf8 <_strtod_l+0xae0>
    b664:	2c4e      	cmp	r4, #78	; 0x4e
    b666:	f47f af3f 	bne.w	b4e8 <_strtod_l+0x1d0>
    b66a:	491b      	ldr	r1, [pc, #108]	; (b6d8 <_strtod_l+0x3c0>)
    b66c:	a811      	add	r0, sp, #68	; 0x44
    b66e:	f002 f93b 	bl	d8e8 <__match>
    b672:	2800      	cmp	r0, #0
    b674:	f43f af38 	beq.w	b4e8 <_strtod_l+0x1d0>
    b678:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b67a:	781b      	ldrb	r3, [r3, #0]
    b67c:	2b28      	cmp	r3, #40	; 0x28
    b67e:	f000 84f2 	beq.w	c066 <_strtod_l+0xd4e>
    b682:	4816      	ldr	r0, [pc, #88]	; (b6dc <_strtod_l+0x3c4>)
    b684:	f001 fc6c 	bl	cf60 <nan>
    b688:	eeb0 8b40 	vmov.f64	d8, d0
    b68c:	e001      	b.n	b692 <_strtod_l+0x37a>
    b68e:	ed9f 8b0e 	vldr	d8, [pc, #56]	; b6c8 <_strtod_l+0x3b0>
    b692:	9a07      	ldr	r2, [sp, #28]
    b694:	b10a      	cbz	r2, b69a <_strtod_l+0x382>
    b696:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b698:	6013      	str	r3, [r2, #0]
    b69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b69c:	2b00      	cmp	r3, #0
    b69e:	f43f af2a 	beq.w	b4f6 <_strtod_l+0x1de>
    b6a2:	eeb1 8b48 	vneg.f64	d8, d8
    b6a6:	eeb0 0b48 	vmov.f64	d0, d8
    b6aa:	b017      	add	sp, #92	; 0x5c
    b6ac:	ecbd 8b10 	vpop	{d8-d15}
    b6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b6b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b6b6:	900b      	str	r0, [sp, #44]	; 0x2c
    b6b8:	1c5a      	adds	r2, r3, #1
    b6ba:	9211      	str	r2, [sp, #68]	; 0x44
    b6bc:	785c      	ldrb	r4, [r3, #1]
    b6be:	46ae      	mov	lr, r5
    b6c0:	e6f8      	b.n	b4b4 <_strtod_l+0x19c>
    b6c2:	bf00      	nop
    b6c4:	f3af 8000 	nop.w
	...
    b6d0:	20007fe8 	.word	0x20007fe8
    b6d4:	200003a8 	.word	0x200003a8
    b6d8:	20000ee8 	.word	0x20000ee8
    b6dc:	200082d8 	.word	0x200082d8
    b6e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b6e2:	1aeb      	subs	r3, r5, r3
    b6e4:	4413      	add	r3, r2
    b6e6:	2b00      	cmp	r3, #0
    b6e8:	f340 82b0 	ble.w	bc4c <_strtod_l+0x934>
    b6ec:	f013 010f 	ands.w	r1, r3, #15
    b6f0:	d00a      	beq.n	b708 <_strtod_l+0x3f0>
    b6f2:	4ac3      	ldr	r2, [pc, #780]	; (ba00 <_strtod_l+0x6e8>)
    b6f4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    b6f8:	ed9d 6b04 	vldr	d6, [sp, #16]
    b6fc:	ed92 7b00 	vldr	d7, [r2]
    b700:	ee27 7b06 	vmul.f64	d7, d7, d6
    b704:	ed8d 7b04 	vstr	d7, [sp, #16]
    b708:	f033 020f 	bics.w	r2, r3, #15
    b70c:	f040 8238 	bne.w	bb80 <_strtod_l+0x868>
    b710:	2300      	movs	r3, #0
    b712:	9308      	str	r3, [sp, #32]
    b714:	9600      	str	r6, [sp, #0]
    b716:	462b      	mov	r3, r5
    b718:	4672      	mov	r2, lr
    b71a:	4639      	mov	r1, r7
    b71c:	4640      	mov	r0, r8
    b71e:	f002 fa6f 	bl	dc00 <__s2b>
    b722:	4681      	mov	r9, r0
    b724:	2800      	cmp	r0, #0
    b726:	f000 82e1 	beq.w	bcec <_strtod_l+0x9d4>
    b72a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b72c:	eba3 0b0b 	sub.w	fp, r3, fp
    b730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b732:	ed9f eba9 	vldr	d14, [pc, #676]	; b9d8 <_strtod_l+0x6c0>
    b736:	2b00      	cmp	r3, #0
    b738:	ed9f cba9 	vldr	d12, [pc, #676]	; b9e0 <_strtod_l+0x6c8>
    b73c:	ed9f dbaa 	vldr	d13, [pc, #680]	; b9e8 <_strtod_l+0x6d0>
    b740:	ed9f bbab 	vldr	d11, [pc, #684]	; b9f0 <_strtod_l+0x6d8>
    b744:	bfb4      	ite	lt
    b746:	465a      	movlt	r2, fp
    b748:	2200      	movge	r2, #0
    b74a:	f04f 0a00 	mov.w	sl, #0
    b74e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b752:	920b      	str	r2, [sp, #44]	; 0x2c
    b754:	930c      	str	r3, [sp, #48]	; 0x30
    b756:	4654      	mov	r4, sl
    b758:	f8d9 1004 	ldr.w	r1, [r9, #4]
    b75c:	4640      	mov	r0, r8
    b75e:	f002 f9cd 	bl	dafc <_Balloc>
    b762:	4606      	mov	r6, r0
    b764:	2800      	cmp	r0, #0
    b766:	f000 810e 	beq.w	b986 <_strtod_l+0x66e>
    b76a:	f8d9 2010 	ldr.w	r2, [r9, #16]
    b76e:	ed9d 8b04 	vldr	d8, [sp, #16]
    b772:	3202      	adds	r2, #2
    b774:	0092      	lsls	r2, r2, #2
    b776:	f109 010c 	add.w	r1, r9, #12
    b77a:	300c      	adds	r0, #12
    b77c:	f7fc fda6 	bl	82cc <memcpy>
    b780:	eeb0 0b48 	vmov.f64	d0, d8
    b784:	aa14      	add	r2, sp, #80	; 0x50
    b786:	a913      	add	r1, sp, #76	; 0x4c
    b788:	4640      	mov	r0, r8
    b78a:	f002 fdf5 	bl	e378 <__d2b>
    b78e:	9012      	str	r0, [sp, #72]	; 0x48
    b790:	2800      	cmp	r0, #0
    b792:	f000 80e4 	beq.w	b95e <_strtod_l+0x646>
    b796:	2101      	movs	r1, #1
    b798:	4640      	mov	r0, r8
    b79a:	f002 fad9 	bl	dd50 <__i2b>
    b79e:	4604      	mov	r4, r0
    b7a0:	2800      	cmp	r0, #0
    b7a2:	f000 80f0 	beq.w	b986 <_strtod_l+0x66e>
    b7a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b7a8:	2a00      	cmp	r2, #0
    b7aa:	f2c0 80de 	blt.w	b96a <_strtod_l+0x652>
    b7ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b7b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    b7b2:	eb02 0b03 	add.w	fp, r2, r3
    b7b6:	9b08      	ldr	r3, [sp, #32]
    b7b8:	9d14      	ldr	r5, [sp, #80]	; 0x50
    b7ba:	1ad2      	subs	r2, r2, r3
    b7bc:	442a      	add	r2, r5
    b7be:	4b91      	ldr	r3, [pc, #580]	; (ba04 <_strtod_l+0x6ec>)
    b7c0:	3a01      	subs	r2, #1
    b7c2:	429a      	cmp	r2, r3
    b7c4:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    b7c8:	f280 8098 	bge.w	b8fc <_strtod_l+0x5e4>
    b7cc:	1a99      	subs	r1, r3, r2
    b7ce:	291f      	cmp	r1, #31
    b7d0:	eba5 0501 	sub.w	r5, r5, r1
    b7d4:	f300 80e3 	bgt.w	b99e <_strtod_l+0x686>
    b7d8:	2201      	movs	r2, #1
    b7da:	fa02 f301 	lsl.w	r3, r2, r1
    b7de:	930d      	str	r3, [sp, #52]	; 0x34
    b7e0:	2300      	movs	r3, #0
    b7e2:	930e      	str	r3, [sp, #56]	; 0x38
    b7e4:	442f      	add	r7, r5
    b7e6:	9b08      	ldr	r3, [sp, #32]
    b7e8:	445d      	add	r5, fp
    b7ea:	45ab      	cmp	fp, r5
    b7ec:	465a      	mov	r2, fp
    b7ee:	441f      	add	r7, r3
    b7f0:	bfa8      	it	ge
    b7f2:	462a      	movge	r2, r5
    b7f4:	42ba      	cmp	r2, r7
    b7f6:	bfa8      	it	ge
    b7f8:	463a      	movge	r2, r7
    b7fa:	2a00      	cmp	r2, #0
    b7fc:	dd03      	ble.n	b806 <_strtod_l+0x4ee>
    b7fe:	1aad      	subs	r5, r5, r2
    b800:	1abf      	subs	r7, r7, r2
    b802:	ebab 0b02 	sub.w	fp, fp, r2
    b806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b808:	2b00      	cmp	r3, #0
    b80a:	f300 8088 	bgt.w	b91e <_strtod_l+0x606>
    b80e:	2d00      	cmp	r5, #0
    b810:	f300 809c 	bgt.w	b94c <_strtod_l+0x634>
    b814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b816:	2b00      	cmp	r3, #0
    b818:	f300 80b7 	bgt.w	b98a <_strtod_l+0x672>
    b81c:	2f00      	cmp	r7, #0
    b81e:	f300 80a9 	bgt.w	b974 <_strtod_l+0x65c>
    b822:	f1bb 0f00 	cmp.w	fp, #0
    b826:	dd08      	ble.n	b83a <_strtod_l+0x522>
    b828:	4621      	mov	r1, r4
    b82a:	465a      	mov	r2, fp
    b82c:	4640      	mov	r0, r8
    b82e:	f002 fbcb 	bl	dfc8 <__lshift>
    b832:	4604      	mov	r4, r0
    b834:	2800      	cmp	r0, #0
    b836:	f000 80a6 	beq.w	b986 <_strtod_l+0x66e>
    b83a:	9912      	ldr	r1, [sp, #72]	; 0x48
    b83c:	4632      	mov	r2, r6
    b83e:	4640      	mov	r0, r8
    b840:	f002 fc5c 	bl	e0fc <__mdiff>
    b844:	4682      	mov	sl, r0
    b846:	2800      	cmp	r0, #0
    b848:	f000 809d 	beq.w	b986 <_strtod_l+0x66e>
    b84c:	2300      	movs	r3, #0
    b84e:	68c5      	ldr	r5, [r0, #12]
    b850:	60c3      	str	r3, [r0, #12]
    b852:	4621      	mov	r1, r4
    b854:	f002 fc30 	bl	e0b8 <__mcmp>
    b858:	2800      	cmp	r0, #0
    b85a:	f2c0 83c7 	blt.w	bfec <_strtod_l+0xcd4>
    b85e:	f000 8361 	beq.w	bf24 <_strtod_l+0xc0c>
    b862:	4621      	mov	r1, r4
    b864:	4650      	mov	r0, sl
    b866:	f002 fdf1 	bl	e44c <__ratio>
    b86a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    b86e:	eeb4 0bc7 	vcmpe.f64	d0, d7
    b872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b876:	d846      	bhi.n	b906 <_strtod_l+0x5ee>
    b878:	2d00      	cmp	r5, #0
    b87a:	f000 80cb 	beq.w	ba14 <_strtod_l+0x6fc>
    b87e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    b882:	9805      	ldr	r0, [sp, #20]
    b884:	4b60      	ldr	r3, [pc, #384]	; (ba08 <_strtod_l+0x6f0>)
    b886:	2200      	movs	r2, #0
    b888:	4960      	ldr	r1, [pc, #384]	; (ba0c <_strtod_l+0x6f4>)
    b88a:	f8df c184 	ldr.w	ip, [pc, #388]	; ba10 <_strtod_l+0x6f8>
    b88e:	ea00 0701 	and.w	r7, r0, r1
    b892:	4567      	cmp	r7, ip
    b894:	f000 80d4 	beq.w	ba40 <_strtod_l+0x728>
    b898:	9908      	ldr	r1, [sp, #32]
    b89a:	b159      	cbz	r1, b8b4 <_strtod_l+0x59c>
    b89c:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    b8a0:	d808      	bhi.n	b8b4 <_strtod_l+0x59c>
    b8a2:	eeb4 9bcb 	vcmpe.f64	d9, d11
    b8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b8aa:	f240 8156 	bls.w	bb5a <_strtod_l+0x842>
    b8ae:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    b8b2:	1bcb      	subs	r3, r1, r7
    b8b4:	eeb0 0b48 	vmov.f64	d0, d8
    b8b8:	ec43 2b1a 	vmov	d10, r2, r3
    b8bc:	f002 fcc8 	bl	e250 <__ulp>
    b8c0:	eeaa 8b00 	vfma.f64	d8, d10, d0
    b8c4:	ed8d 8b04 	vstr	d8, [sp, #16]
    b8c8:	ee18 3a90 	vmov	r3, s17
    b8cc:	9a08      	ldr	r2, [sp, #32]
    b8ce:	b922      	cbnz	r2, b8da <_strtod_l+0x5c2>
    b8d0:	4a4e      	ldr	r2, [pc, #312]	; (ba0c <_strtod_l+0x6f4>)
    b8d2:	401a      	ands	r2, r3
    b8d4:	4297      	cmp	r7, r2
    b8d6:	f000 80e4 	beq.w	baa2 <_strtod_l+0x78a>
    b8da:	9912      	ldr	r1, [sp, #72]	; 0x48
    b8dc:	4640      	mov	r0, r8
    b8de:	f002 f933 	bl	db48 <_Bfree>
    b8e2:	4631      	mov	r1, r6
    b8e4:	4640      	mov	r0, r8
    b8e6:	f002 f92f 	bl	db48 <_Bfree>
    b8ea:	4621      	mov	r1, r4
    b8ec:	4640      	mov	r0, r8
    b8ee:	f002 f92b 	bl	db48 <_Bfree>
    b8f2:	4651      	mov	r1, sl
    b8f4:	4640      	mov	r0, r8
    b8f6:	f002 f927 	bl	db48 <_Bfree>
    b8fa:	e72d      	b.n	b758 <_strtod_l+0x440>
    b8fc:	2301      	movs	r3, #1
    b8fe:	2100      	movs	r1, #0
    b900:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    b904:	e76e      	b.n	b7e4 <_strtod_l+0x4cc>
    b906:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    b90a:	ee20 9b09 	vmul.f64	d9, d0, d9
    b90e:	2d00      	cmp	r5, #0
    b910:	d15f      	bne.n	b9d2 <_strtod_l+0x6ba>
    b912:	eeb1 7b49 	vneg.f64	d7, d9
    b916:	9805      	ldr	r0, [sp, #20]
    b918:	ec53 2b17 	vmov	r2, r3, d7
    b91c:	e7b4      	b.n	b888 <_strtod_l+0x570>
    b91e:	4621      	mov	r1, r4
    b920:	461a      	mov	r2, r3
    b922:	4640      	mov	r0, r8
    b924:	f002 faf0 	bl	df08 <__pow5mult>
    b928:	4604      	mov	r4, r0
    b92a:	b360      	cbz	r0, b986 <_strtod_l+0x66e>
    b92c:	4601      	mov	r1, r0
    b92e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b930:	4640      	mov	r0, r8
    b932:	f002 fa3b 	bl	ddac <__multiply>
    b936:	b330      	cbz	r0, b986 <_strtod_l+0x66e>
    b938:	900f      	str	r0, [sp, #60]	; 0x3c
    b93a:	9912      	ldr	r1, [sp, #72]	; 0x48
    b93c:	4640      	mov	r0, r8
    b93e:	f002 f903 	bl	db48 <_Bfree>
    b942:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b944:	9212      	str	r2, [sp, #72]	; 0x48
    b946:	2d00      	cmp	r5, #0
    b948:	f77f af64 	ble.w	b814 <_strtod_l+0x4fc>
    b94c:	9912      	ldr	r1, [sp, #72]	; 0x48
    b94e:	462a      	mov	r2, r5
    b950:	4640      	mov	r0, r8
    b952:	f002 fb39 	bl	dfc8 <__lshift>
    b956:	9012      	str	r0, [sp, #72]	; 0x48
    b958:	2800      	cmp	r0, #0
    b95a:	f47f af5b 	bne.w	b814 <_strtod_l+0x4fc>
    b95e:	2322      	movs	r3, #34	; 0x22
    b960:	ed9f 8b25 	vldr	d8, [pc, #148]	; b9f8 <_strtod_l+0x6e0>
    b964:	f8c8 3000 	str.w	r3, [r8]
    b968:	e0bc      	b.n	bae4 <_strtod_l+0x7cc>
    b96a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b96c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    b970:	1a9f      	subs	r7, r3, r2
    b972:	e720      	b.n	b7b6 <_strtod_l+0x49e>
    b974:	4631      	mov	r1, r6
    b976:	463a      	mov	r2, r7
    b978:	4640      	mov	r0, r8
    b97a:	f002 fb25 	bl	dfc8 <__lshift>
    b97e:	4606      	mov	r6, r0
    b980:	2800      	cmp	r0, #0
    b982:	f47f af4e 	bne.w	b822 <_strtod_l+0x50a>
    b986:	9812      	ldr	r0, [sp, #72]	; 0x48
    b988:	e7e9      	b.n	b95e <_strtod_l+0x646>
    b98a:	4631      	mov	r1, r6
    b98c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b98e:	4640      	mov	r0, r8
    b990:	f002 faba 	bl	df08 <__pow5mult>
    b994:	4606      	mov	r6, r0
    b996:	2800      	cmp	r0, #0
    b998:	f47f af40 	bne.w	b81c <_strtod_l+0x504>
    b99c:	e7f3      	b.n	b986 <_strtod_l+0x66e>
    b99e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    b9a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    b9a6:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    b9aa:	2101      	movs	r1, #1
    b9ac:	32e2      	adds	r2, #226	; 0xe2
    b9ae:	fa01 f302 	lsl.w	r3, r1, r2
    b9b2:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    b9b6:	e715      	b.n	b7e4 <_strtod_l+0x4cc>
    b9b8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    b9bc:	f04f 0b00 	mov.w	fp, #0
    b9c0:	e5c0      	b.n	b544 <_strtod_l+0x22c>
    b9c2:	2301      	movs	r3, #1
    b9c4:	930a      	str	r3, [sp, #40]	; 0x28
    b9c6:	f10a 0302 	add.w	r3, sl, #2
    b9ca:	9311      	str	r3, [sp, #68]	; 0x44
    b9cc:	f89a 4002 	ldrb.w	r4, [sl, #2]
    b9d0:	e602      	b.n	b5d8 <_strtod_l+0x2c0>
    b9d2:	eeb0 7b49 	vmov.f64	d7, d9
    b9d6:	e79e      	b.n	b916 <_strtod_l+0x5fe>
    b9d8:	94a03595 	.word	0x94a03595
    b9dc:	3fcfffff 	.word	0x3fcfffff
    b9e0:	94a03595 	.word	0x94a03595
    b9e4:	3fdfffff 	.word	0x3fdfffff
    b9e8:	35afe535 	.word	0x35afe535
    b9ec:	3fe00000 	.word	0x3fe00000
    b9f0:	ffc00000 	.word	0xffc00000
    b9f4:	41dfffff 	.word	0x41dfffff
    b9f8:	00000000 	.word	0x00000000
    b9fc:	7ff00000 	.word	0x7ff00000
    ba00:	200003a8 	.word	0x200003a8
    ba04:	fffffc02 	.word	0xfffffc02
    ba08:	3ff00000 	.word	0x3ff00000
    ba0c:	7ff00000 	.word	0x7ff00000
    ba10:	7fe00000 	.word	0x7fe00000
    ba14:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    ba18:	2900      	cmp	r1, #0
    ba1a:	f000 8085 	beq.w	bb28 <_strtod_l+0x810>
    ba1e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    ba22:	2901      	cmp	r1, #1
    ba24:	f000 81d8 	beq.w	bdd8 <_strtod_l+0xac0>
    ba28:	4610      	mov	r0, r2
    ba2a:	4bb7      	ldr	r3, [pc, #732]	; (bd08 <_strtod_l+0x9f0>)
    ba2c:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    ba30:	2200      	movs	r2, #0
    ba32:	e729      	b.n	b888 <_strtod_l+0x570>
    ba34:	2c65      	cmp	r4, #101	; 0x65
    ba36:	f04f 0c01 	mov.w	ip, #1
    ba3a:	f43f adbe 	beq.w	b5ba <_strtod_l+0x2a2>
    ba3e:	e54c      	b.n	b4da <_strtod_l+0x1c2>
    ba40:	ec43 2b1a 	vmov	d10, r2, r3
    ba44:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    ba48:	9305      	str	r3, [sp, #20]
    ba4a:	ed9d fb04 	vldr	d15, [sp, #16]
    ba4e:	eeb0 0b4f 	vmov.f64	d0, d15
    ba52:	f002 fbfd 	bl	e250 <__ulp>
    ba56:	49ad      	ldr	r1, [pc, #692]	; (bd0c <_strtod_l+0x9f4>)
    ba58:	eeaa fb00 	vfma.f64	d15, d10, d0
    ba5c:	ee1f 3a90 	vmov	r3, s31
    ba60:	4aab      	ldr	r2, [pc, #684]	; (bd10 <_strtod_l+0x9f8>)
    ba62:	4019      	ands	r1, r3
    ba64:	4291      	cmp	r1, r2
    ba66:	ed8d fb04 	vstr	d15, [sp, #16]
    ba6a:	d972      	bls.n	bb52 <_strtod_l+0x83a>
    ba6c:	4ba9      	ldr	r3, [pc, #676]	; (bd14 <_strtod_l+0x9fc>)
    ba6e:	ee18 2a90 	vmov	r2, s17
    ba72:	429a      	cmp	r2, r3
    ba74:	d103      	bne.n	ba7e <_strtod_l+0x766>
    ba76:	ee18 3a10 	vmov	r3, s16
    ba7a:	3301      	adds	r3, #1
    ba7c:	d083      	beq.n	b986 <_strtod_l+0x66e>
    ba7e:	4aa5      	ldr	r2, [pc, #660]	; (bd14 <_strtod_l+0x9fc>)
    ba80:	f04f 33ff 	mov.w	r3, #4294967295
    ba84:	e9cd 3204 	strd	r3, r2, [sp, #16]
    ba88:	e727      	b.n	b8da <_strtod_l+0x5c2>
    ba8a:	2300      	movs	r3, #0
    ba8c:	930a      	str	r3, [sp, #40]	; 0x28
    ba8e:	e79a      	b.n	b9c6 <_strtod_l+0x6ae>
    ba90:	2c65      	cmp	r4, #101	; 0x65
    ba92:	f000 80d0 	beq.w	bc36 <_strtod_l+0x91e>
    ba96:	2c45      	cmp	r4, #69	; 0x45
    ba98:	f000 80cd 	beq.w	bc36 <_strtod_l+0x91e>
    ba9c:	f04f 0c01 	mov.w	ip, #1
    baa0:	e5d1      	b.n	b646 <_strtod_l+0x32e>
    baa2:	ec51 0b19 	vmov	r0, r1, d9
    baa6:	930d      	str	r3, [sp, #52]	; 0x34
    baa8:	f009 fb8c 	bl	151c4 <__aeabi_d2lz>
    baac:	f009 fb5c 	bl	15168 <__aeabi_l2d>
    bab0:	9b04      	ldr	r3, [sp, #16]
    bab2:	431d      	orrs	r5, r3
    bab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bab6:	ec41 0b17 	vmov	d7, r0, r1
    baba:	f3c3 0313 	ubfx	r3, r3, #0, #20
    babe:	431d      	orrs	r5, r3
    bac0:	ee39 9b47 	vsub.f64	d9, d9, d7
    bac4:	f000 80a0 	beq.w	bc08 <_strtod_l+0x8f0>
    bac8:	eeb4 9bcc 	vcmpe.f64	d9, d12
    bacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bad0:	d405      	bmi.n	bade <_strtod_l+0x7c6>
    bad2:	eeb4 9bcd 	vcmpe.f64	d9, d13
    bad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bada:	f77f aefe 	ble.w	b8da <_strtod_l+0x5c2>
    bade:	ed9d 8b04 	vldr	d8, [sp, #16]
    bae2:	9812      	ldr	r0, [sp, #72]	; 0x48
    bae4:	4601      	mov	r1, r0
    bae6:	4640      	mov	r0, r8
    bae8:	f002 f82e 	bl	db48 <_Bfree>
    baec:	4631      	mov	r1, r6
    baee:	4640      	mov	r0, r8
    baf0:	f002 f82a 	bl	db48 <_Bfree>
    baf4:	4621      	mov	r1, r4
    baf6:	4640      	mov	r0, r8
    baf8:	f002 f826 	bl	db48 <_Bfree>
    bafc:	4649      	mov	r1, r9
    bafe:	4640      	mov	r0, r8
    bb00:	f002 f822 	bl	db48 <_Bfree>
    bb04:	4651      	mov	r1, sl
    bb06:	4640      	mov	r0, r8
    bb08:	f002 f81e 	bl	db48 <_Bfree>
    bb0c:	e5c1      	b.n	b692 <_strtod_l+0x37a>
    bb0e:	2201      	movs	r2, #1
    bb10:	9209      	str	r2, [sp, #36]	; 0x24
    bb12:	1c79      	adds	r1, r7, #1
    bb14:	9111      	str	r1, [sp, #68]	; 0x44
    bb16:	787a      	ldrb	r2, [r7, #1]
    bb18:	2a00      	cmp	r2, #0
    bb1a:	f43f ace5 	beq.w	b4e8 <_strtod_l+0x1d0>
    bb1e:	460f      	mov	r7, r1
    bb20:	e470      	b.n	b404 <_strtod_l+0xec>
    bb22:	2200      	movs	r2, #0
    bb24:	9209      	str	r2, [sp, #36]	; 0x24
    bb26:	e7f4      	b.n	bb12 <_strtod_l+0x7fa>
    bb28:	f3c2 0313 	ubfx	r3, r2, #0, #20
    bb2c:	4610      	mov	r0, r2
    bb2e:	2b00      	cmp	r3, #0
    bb30:	f47f af7b 	bne.w	ba2a <_strtod_l+0x712>
    bb34:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    bb38:	eeb4 0bc7 	vcmpe.f64	d0, d7
    bb3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bb40:	f100 81d3 	bmi.w	beea <_strtod_l+0xbd2>
    bb44:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    bb48:	ee20 9b09 	vmul.f64	d9, d0, d9
    bb4c:	eeb1 7b49 	vneg.f64	d7, d9
    bb50:	e6e2      	b.n	b918 <_strtod_l+0x600>
    bb52:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    bb56:	9305      	str	r3, [sp, #20]
    bb58:	e6b8      	b.n	b8cc <_strtod_l+0x5b4>
    bb5a:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    bb5e:	ee19 3a10 	vmov	r3, s18
    bb62:	2b01      	cmp	r3, #1
    bb64:	bf38      	it	cc
    bb66:	2301      	movcc	r3, #1
    bb68:	ee09 3a10 	vmov	s18, r3
    bb6c:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    bb70:	2d00      	cmp	r5, #0
    bb72:	f040 813e 	bne.w	bdf2 <_strtod_l+0xada>
    bb76:	eeb1 7b49 	vneg.f64	d7, d9
    bb7a:	ec53 2b17 	vmov	r2, r3, d7
    bb7e:	e696      	b.n	b8ae <_strtod_l+0x596>
    bb80:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    bb84:	f300 80b2 	bgt.w	bcec <_strtod_l+0x9d4>
    bb88:	2a10      	cmp	r2, #16
    bb8a:	ea4f 1322 	mov.w	r3, r2, asr #4
    bb8e:	f340 8286 	ble.w	c09e <_strtod_l+0xd86>
    bb92:	4c61      	ldr	r4, [pc, #388]	; (bd18 <_strtod_l+0xa00>)
    bb94:	ed9d 7b04 	vldr	d7, [sp, #16]
    bb98:	2000      	movs	r0, #0
    bb9a:	4622      	mov	r2, r4
    bb9c:	4601      	mov	r1, r0
    bb9e:	f013 0f01 	tst.w	r3, #1
    bba2:	f101 0101 	add.w	r1, r1, #1
    bba6:	ea4f 0363 	mov.w	r3, r3, asr #1
    bbaa:	d004      	beq.n	bbb6 <_strtod_l+0x89e>
    bbac:	ed92 6b00 	vldr	d6, [r2]
    bbb0:	2001      	movs	r0, #1
    bbb2:	ee27 7b06 	vmul.f64	d7, d7, d6
    bbb6:	2b01      	cmp	r3, #1
    bbb8:	f102 0208 	add.w	r2, r2, #8
    bbbc:	d1ef      	bne.n	bb9e <_strtod_l+0x886>
    bbbe:	b108      	cbz	r0, bbc4 <_strtod_l+0x8ac>
    bbc0:	ed8d 7b04 	vstr	d7, [sp, #16]
    bbc4:	9b05      	ldr	r3, [sp, #20]
    bbc6:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    bbca:	9305      	str	r3, [sp, #20]
    bbcc:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    bbd0:	ed9d 6b04 	vldr	d6, [sp, #16]
    bbd4:	ed94 7b00 	vldr	d7, [r4]
    bbd8:	4b4c      	ldr	r3, [pc, #304]	; (bd0c <_strtod_l+0x9f4>)
    bbda:	ee27 7b06 	vmul.f64	d7, d7, d6
    bbde:	ee17 2a90 	vmov	r2, s15
    bbe2:	494e      	ldr	r1, [pc, #312]	; (bd1c <_strtod_l+0xa04>)
    bbe4:	4013      	ands	r3, r2
    bbe6:	428b      	cmp	r3, r1
    bbe8:	ed8d 7b04 	vstr	d7, [sp, #16]
    bbec:	d87e      	bhi.n	bcec <_strtod_l+0x9d4>
    bbee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    bbf2:	428b      	cmp	r3, r1
    bbf4:	f240 81d6 	bls.w	bfa4 <_strtod_l+0xc8c>
    bbf8:	4c46      	ldr	r4, [pc, #280]	; (bd14 <_strtod_l+0x9fc>)
    bbfa:	f04f 33ff 	mov.w	r3, #4294967295
    bbfe:	e9cd 3404 	strd	r3, r4, [sp, #16]
    bc02:	2300      	movs	r3, #0
    bc04:	9308      	str	r3, [sp, #32]
    bc06:	e585      	b.n	b714 <_strtod_l+0x3fc>
    bc08:	eeb4 9bce 	vcmpe.f64	d9, d14
    bc0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bc10:	f57f ae63 	bpl.w	b8da <_strtod_l+0x5c2>
    bc14:	e763      	b.n	bade <_strtod_l+0x7c6>
    bc16:	3216      	adds	r2, #22
    bc18:	f6ff ad62 	blt.w	b6e0 <_strtod_l+0x3c8>
    bc1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bc1e:	eba3 0b0b 	sub.w	fp, r3, fp
    bc22:	4b3f      	ldr	r3, [pc, #252]	; (bd20 <_strtod_l+0xa08>)
    bc24:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    bc28:	ed93 7b00 	vldr	d7, [r3]
    bc2c:	ed9d 6b04 	vldr	d6, [sp, #16]
    bc30:	ee86 8b07 	vdiv.f64	d8, d6, d7
    bc34:	e52d      	b.n	b692 <_strtod_l+0x37a>
    bc36:	f04f 0e00 	mov.w	lr, #0
    bc3a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    bc3e:	f04f 0c01 	mov.w	ip, #1
    bc42:	e44e      	b.n	b4e2 <_strtod_l+0x1ca>
    bc44:	2c6e      	cmp	r4, #110	; 0x6e
    bc46:	f43f ad10 	beq.w	b66a <_strtod_l+0x352>
    bc4a:	e44d      	b.n	b4e8 <_strtod_l+0x1d0>
    bc4c:	f43f ad60 	beq.w	b710 <_strtod_l+0x3f8>
    bc50:	425b      	negs	r3, r3
    bc52:	f013 010f 	ands.w	r1, r3, #15
    bc56:	d00a      	beq.n	bc6e <_strtod_l+0x956>
    bc58:	4a31      	ldr	r2, [pc, #196]	; (bd20 <_strtod_l+0xa08>)
    bc5a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    bc5e:	ed9d 6b04 	vldr	d6, [sp, #16]
    bc62:	ed92 7b00 	vldr	d7, [r2]
    bc66:	ee86 7b07 	vdiv.f64	d7, d6, d7
    bc6a:	ed8d 7b04 	vstr	d7, [sp, #16]
    bc6e:	111b      	asrs	r3, r3, #4
    bc70:	f43f ad4e 	beq.w	b710 <_strtod_l+0x3f8>
    bc74:	2b1f      	cmp	r3, #31
    bc76:	dc33      	bgt.n	bce0 <_strtod_l+0x9c8>
    bc78:	f013 0210 	ands.w	r2, r3, #16
    bc7c:	bf18      	it	ne
    bc7e:	226a      	movne	r2, #106	; 0x6a
    bc80:	ed9d 7b04 	vldr	d7, [sp, #16]
    bc84:	9208      	str	r2, [sp, #32]
    bc86:	4a27      	ldr	r2, [pc, #156]	; (bd24 <_strtod_l+0xa0c>)
    bc88:	2100      	movs	r1, #0
    bc8a:	07d8      	lsls	r0, r3, #31
    bc8c:	d504      	bpl.n	bc98 <_strtod_l+0x980>
    bc8e:	ed92 6b00 	vldr	d6, [r2]
    bc92:	2101      	movs	r1, #1
    bc94:	ee27 7b06 	vmul.f64	d7, d7, d6
    bc98:	105b      	asrs	r3, r3, #1
    bc9a:	f102 0208 	add.w	r2, r2, #8
    bc9e:	d1f4      	bne.n	bc8a <_strtod_l+0x972>
    bca0:	b109      	cbz	r1, bca6 <_strtod_l+0x98e>
    bca2:	ed8d 7b04 	vstr	d7, [sp, #16]
    bca6:	9b08      	ldr	r3, [sp, #32]
    bca8:	b193      	cbz	r3, bcd0 <_strtod_l+0x9b8>
    bcaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    bcae:	f3c1 520a 	ubfx	r2, r1, #20, #11
    bcb2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    bcb6:	2b00      	cmp	r3, #0
    bcb8:	dd0a      	ble.n	bcd0 <_strtod_l+0x9b8>
    bcba:	2b1f      	cmp	r3, #31
    bcbc:	f340 822f 	ble.w	c11e <_strtod_l+0xe06>
    bcc0:	2000      	movs	r0, #0
    bcc2:	2b34      	cmp	r3, #52	; 0x34
    bcc4:	9004      	str	r0, [sp, #16]
    bcc6:	f340 8240 	ble.w	c14a <_strtod_l+0xe32>
    bcca:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    bcce:	9305      	str	r3, [sp, #20]
    bcd0:	ed9d 7b04 	vldr	d7, [sp, #16]
    bcd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
    bcd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bcdc:	f47f ad1a 	bne.w	b714 <_strtod_l+0x3fc>
    bce0:	2322      	movs	r3, #34	; 0x22
    bce2:	ed9f 8b05 	vldr	d8, [pc, #20]	; bcf8 <_strtod_l+0x9e0>
    bce6:	f8c8 3000 	str.w	r3, [r8]
    bcea:	e4d2      	b.n	b692 <_strtod_l+0x37a>
    bcec:	2322      	movs	r3, #34	; 0x22
    bcee:	ed9f 8b04 	vldr	d8, [pc, #16]	; bd00 <_strtod_l+0x9e8>
    bcf2:	f8c8 3000 	str.w	r3, [r8]
    bcf6:	e4cc      	b.n	b692 <_strtod_l+0x37a>
	...
    bd04:	7ff00000 	.word	0x7ff00000
    bd08:	bff00000 	.word	0xbff00000
    bd0c:	7ff00000 	.word	0x7ff00000
    bd10:	7c9fffff 	.word	0x7c9fffff
    bd14:	7fefffff 	.word	0x7fefffff
    bd18:	20000380 	.word	0x20000380
    bd1c:	7ca00000 	.word	0x7ca00000
    bd20:	200003a8 	.word	0x200003a8
    bd24:	20000470 	.word	0x20000470
    bd28:	9302      	str	r3, [sp, #8]
    bd2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bd2c:	9301      	str	r3, [sp, #4]
    bd2e:	ab12      	add	r3, sp, #72	; 0x48
    bd30:	9300      	str	r3, [sp, #0]
    bd32:	4aa7      	ldr	r2, [pc, #668]	; (bfd0 <_strtod_l+0xcb8>)
    bd34:	ab13      	add	r3, sp, #76	; 0x4c
    bd36:	a911      	add	r1, sp, #68	; 0x44
    bd38:	4640      	mov	r0, r8
    bd3a:	f001 fb0b 	bl	d354 <__gethex>
    bd3e:	f010 050f 	ands.w	r5, r0, #15
    bd42:	4604      	mov	r4, r0
    bd44:	f43f aca3 	beq.w	b68e <_strtod_l+0x376>
    bd48:	2d06      	cmp	r5, #6
    bd4a:	d174      	bne.n	be36 <_strtod_l+0xb1e>
    bd4c:	9b07      	ldr	r3, [sp, #28]
    bd4e:	ed9f 8b9a 	vldr	d8, [pc, #616]	; bfb8 <_strtod_l+0xca0>
    bd52:	3701      	adds	r7, #1
    bd54:	2b00      	cmp	r3, #0
    bd56:	f43f abce 	beq.w	b4f6 <_strtod_l+0x1de>
    bd5a:	601f      	str	r7, [r3, #0]
    bd5c:	f7ff bbcb 	b.w	b4f6 <_strtod_l+0x1de>
    bd60:	ed9d 8b04 	vldr	d8, [sp, #16]
    bd64:	e495      	b.n	b692 <_strtod_l+0x37a>
    bd66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bd68:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    bd6c:	4403      	add	r3, r0
    bd6e:	930b      	str	r3, [sp, #44]	; 0x2c
    bd70:	2801      	cmp	r0, #1
    bd72:	f105 0301 	add.w	r3, r5, #1
    bd76:	461a      	mov	r2, r3
    bd78:	d014      	beq.n	bda4 <_strtod_l+0xa8c>
    bd7a:	4428      	add	r0, r5
    bd7c:	1e44      	subs	r4, r0, #1
    bd7e:	e003      	b.n	bd88 <_strtod_l+0xa70>
    bd80:	0046      	lsls	r6, r0, #1
    bd82:	429c      	cmp	r4, r3
    bd84:	d00d      	beq.n	bda2 <_strtod_l+0xa8a>
    bd86:	3301      	adds	r3, #1
    bd88:	462a      	mov	r2, r5
    bd8a:	2a08      	cmp	r2, #8
    bd8c:	461d      	mov	r5, r3
    bd8e:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    bd92:	d9f5      	bls.n	bd80 <_strtod_l+0xa68>
    bd94:	2b10      	cmp	r3, #16
    bd96:	bfdc      	itt	le
    bd98:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    bd9c:	ea4f 0949 	movle.w	r9, r9, lsl #1
    bda0:	e7ef      	b.n	bd82 <_strtod_l+0xa6a>
    bda2:	3202      	adds	r2, #2
    bda4:	2d08      	cmp	r5, #8
    bda6:	dc3c      	bgt.n	be22 <_strtod_l+0xb0a>
    bda8:	4615      	mov	r5, r2
    bdaa:	f7ff bb79 	b.w	b4a0 <_strtod_l+0x188>
    bdae:	4989      	ldr	r1, [pc, #548]	; (bfd4 <_strtod_l+0xcbc>)
    bdb0:	2201      	movs	r2, #1
    bdb2:	4638      	mov	r0, r7
    bdb4:	f000 fd74 	bl	c8a0 <strncmp>
    bdb8:	2800      	cmp	r0, #0
    bdba:	f000 8082 	beq.w	bec2 <_strtod_l+0xbaa>
    bdbe:	f04f 0e00 	mov.w	lr, #0
    bdc2:	46f1      	mov	r9, lr
    bdc4:	4676      	mov	r6, lr
    bdc6:	4675      	mov	r5, lr
    bdc8:	f7ff bbb5 	b.w	b536 <_strtod_l+0x21e>
    bdcc:	f644 631f 	movw	r3, #19999	; 0x4e1f
    bdd0:	459b      	cmp	fp, r3
    bdd2:	bfa8      	it	ge
    bdd4:	469b      	movge	fp, r3
    bdd6:	e42f      	b.n	b638 <_strtod_l+0x320>
    bdd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    bddc:	4618      	mov	r0, r3
    bdde:	2b00      	cmp	r3, #0
    bde0:	f47f ae23 	bne.w	ba2a <_strtod_l+0x712>
    bde4:	2322      	movs	r3, #34	; 0x22
    bde6:	ed9f 8b74 	vldr	d8, [pc, #464]	; bfb8 <_strtod_l+0xca0>
    bdea:	9812      	ldr	r0, [sp, #72]	; 0x48
    bdec:	f8c8 3000 	str.w	r3, [r8]
    bdf0:	e678      	b.n	bae4 <_strtod_l+0x7cc>
    bdf2:	eeb0 7b49 	vmov.f64	d7, d9
    bdf6:	e6c0      	b.n	bb7a <_strtod_l+0x862>
    bdf8:	4977      	ldr	r1, [pc, #476]	; (bfd8 <_strtod_l+0xcc0>)
    bdfa:	a811      	add	r0, sp, #68	; 0x44
    bdfc:	f001 fd74 	bl	d8e8 <__match>
    be00:	2800      	cmp	r0, #0
    be02:	f43f ab71 	beq.w	b4e8 <_strtod_l+0x1d0>
    be06:	9b11      	ldr	r3, [sp, #68]	; 0x44
    be08:	4974      	ldr	r1, [pc, #464]	; (bfdc <_strtod_l+0xcc4>)
    be0a:	3b01      	subs	r3, #1
    be0c:	a811      	add	r0, sp, #68	; 0x44
    be0e:	9311      	str	r3, [sp, #68]	; 0x44
    be10:	f001 fd6a 	bl	d8e8 <__match>
    be14:	b910      	cbnz	r0, be1c <_strtod_l+0xb04>
    be16:	9b11      	ldr	r3, [sp, #68]	; 0x44
    be18:	3301      	adds	r3, #1
    be1a:	9311      	str	r3, [sp, #68]	; 0x44
    be1c:	ed9f 8b68 	vldr	d8, [pc, #416]	; bfc0 <_strtod_l+0xca8>
    be20:	e437      	b.n	b692 <_strtod_l+0x37a>
    be22:	2a10      	cmp	r2, #16
    be24:	bfdc      	itt	le
    be26:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    be2a:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    be2e:	4615      	mov	r5, r2
    be30:	2000      	movs	r0, #0
    be32:	f7ff bb3a 	b.w	b4aa <_strtod_l+0x192>
    be36:	9a12      	ldr	r2, [sp, #72]	; 0x48
    be38:	b13a      	cbz	r2, be4a <_strtod_l+0xb32>
    be3a:	2135      	movs	r1, #53	; 0x35
    be3c:	a814      	add	r0, sp, #80	; 0x50
    be3e:	f002 fb37 	bl	e4b0 <__copybits>
    be42:	9912      	ldr	r1, [sp, #72]	; 0x48
    be44:	4640      	mov	r0, r8
    be46:	f001 fe7f 	bl	db48 <_Bfree>
    be4a:	3d01      	subs	r5, #1
    be4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    be4e:	2d04      	cmp	r5, #4
    be50:	f200 818f 	bhi.w	c172 <_strtod_l+0xe5a>
    be54:	e8df f005 	tbb	[pc, r5]
    be58:	1f2a2d03 	.word	0x1f2a2d03
    be5c:	03          	.byte	0x03
    be5d:	00          	.byte	0x00
    be5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    be60:	9204      	str	r2, [sp, #16]
    be62:	f203 4233 	addw	r2, r3, #1075	; 0x433
    be66:	9b15      	ldr	r3, [sp, #84]	; 0x54
    be68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    be6c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    be70:	9305      	str	r3, [sp, #20]
    be72:	05e5      	lsls	r5, r4, #23
    be74:	d502      	bpl.n	be7c <_strtod_l+0xb64>
    be76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    be7a:	9305      	str	r3, [sp, #20]
    be7c:	4a58      	ldr	r2, [pc, #352]	; (bfe0 <_strtod_l+0xcc8>)
    be7e:	401a      	ands	r2, r3
    be80:	ed9d 8b04 	vldr	d8, [sp, #16]
    be84:	2a00      	cmp	r2, #0
    be86:	f47f ac04 	bne.w	b692 <_strtod_l+0x37a>
    be8a:	f000 fded 	bl	ca68 <__errno>
    be8e:	2322      	movs	r3, #34	; 0x22
    be90:	6003      	str	r3, [r0, #0]
    be92:	f7ff bbfe 	b.w	b692 <_strtod_l+0x37a>
    be96:	f04f 33ff 	mov.w	r3, #4294967295
    be9a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    be9e:	e9cd 3604 	strd	r3, r6, [sp, #16]
    bea2:	05e3      	lsls	r3, r4, #23
    bea4:	f57f af5c 	bpl.w	bd60 <_strtod_l+0xa48>
    bea8:	9b05      	ldr	r3, [sp, #20]
    beaa:	e7e4      	b.n	be76 <_strtod_l+0xb5e>
    beac:	4b4c      	ldr	r3, [pc, #304]	; (bfe0 <_strtod_l+0xcc8>)
    beae:	9305      	str	r3, [sp, #20]
    beb0:	e7f7      	b.n	bea2 <_strtod_l+0xb8a>
    beb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    beb4:	9304      	str	r3, [sp, #16]
    beb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    beb8:	9305      	str	r3, [sp, #20]
    beba:	e7da      	b.n	be72 <_strtod_l+0xb5a>
    bebc:	2000      	movs	r0, #0
    bebe:	f7ff bae1 	b.w	b484 <_strtod_l+0x16c>
    bec2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bec4:	461a      	mov	r2, r3
    bec6:	3301      	adds	r3, #1
    bec8:	9311      	str	r3, [sp, #68]	; 0x44
    beca:	7854      	ldrb	r4, [r2, #1]
    becc:	4606      	mov	r6, r0
    bece:	4681      	mov	r9, r0
    bed0:	f7ff bacd 	b.w	b46e <_strtod_l+0x156>
    bed4:	4b43      	ldr	r3, [pc, #268]	; (bfe4 <_strtod_l+0xccc>)
    bed6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    beda:	ed93 8b00 	vldr	d8, [r3]
    bede:	ed9d 7b04 	vldr	d7, [sp, #16]
    bee2:	ee28 8b07 	vmul.f64	d8, d8, d7
    bee6:	f7ff bbd4 	b.w	b692 <_strtod_l+0x37a>
    beea:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    beee:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    bef2:	e511      	b.n	b918 <_strtod_l+0x600>
    bef4:	46ae      	mov	lr, r5
    bef6:	900b      	str	r0, [sp, #44]	; 0x2c
    bef8:	f7ff badc 	b.w	b4b4 <_strtod_l+0x19c>
    befc:	4b39      	ldr	r3, [pc, #228]	; (bfe4 <_strtod_l+0xccc>)
    befe:	f1c5 050f 	rsb	r5, r5, #15
    bf02:	1b4a      	subs	r2, r1, r5
    bf04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    bf08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    bf0c:	ed95 8b00 	vldr	d8, [r5]
    bf10:	ed93 7b00 	vldr	d7, [r3]
    bf14:	ed9d 6b04 	vldr	d6, [sp, #16]
    bf18:	ee28 8b06 	vmul.f64	d8, d8, d6
    bf1c:	ee28 8b07 	vmul.f64	d8, d8, d7
    bf20:	f7ff bbb7 	b.w	b692 <_strtod_l+0x37a>
    bf24:	2d00      	cmp	r5, #0
    bf26:	f000 8095 	beq.w	c054 <_strtod_l+0xd3c>
    bf2a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    bf2e:	4b2e      	ldr	r3, [pc, #184]	; (bfe8 <_strtod_l+0xcd0>)
    bf30:	f3cc 0113 	ubfx	r1, ip, #0, #20
    bf34:	4299      	cmp	r1, r3
    bf36:	4662      	mov	r2, ip
    bf38:	f000 80d2 	beq.w	c0e0 <_strtod_l+0xdc8>
    bf3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bf3e:	2b00      	cmp	r3, #0
    bf40:	f000 80a5 	beq.w	c08e <_strtod_l+0xd76>
    bf44:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    bf48:	4213      	tst	r3, r2
    bf4a:	4617      	mov	r7, r2
    bf4c:	d01a      	beq.n	bf84 <_strtod_l+0xc6c>
    bf4e:	eeb0 0b48 	vmov.f64	d0, d8
    bf52:	2d00      	cmp	r5, #0
    bf54:	f000 80a6 	beq.w	c0a4 <_strtod_l+0xd8c>
    bf58:	f002 f97a 	bl	e250 <__ulp>
    bf5c:	9b08      	ldr	r3, [sp, #32]
    bf5e:	b17b      	cbz	r3, bf80 <_strtod_l+0xc68>
    bf60:	f3c7 530a 	ubfx	r3, r7, #20, #11
    bf64:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    bf68:	2b00      	cmp	r3, #0
    bf6a:	dd09      	ble.n	bf80 <_strtod_l+0xc68>
    bf6c:	051b      	lsls	r3, r3, #20
    bf6e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    bf72:	2000      	movs	r0, #0
    bf74:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    bf78:	ec41 0b17 	vmov	d7, r0, r1
    bf7c:	ee20 0b07 	vmul.f64	d0, d0, d7
    bf80:	ee38 8b00 	vadd.f64	d8, d8, d0
    bf84:	9b08      	ldr	r3, [sp, #32]
    bf86:	b15b      	cbz	r3, bfa0 <_strtod_l+0xc88>
    bf88:	ed9f 7b0f 	vldr	d7, [pc, #60]	; bfc8 <_strtod_l+0xcb0>
    bf8c:	4b14      	ldr	r3, [pc, #80]	; (bfe0 <_strtod_l+0xcc8>)
    bf8e:	ee28 8b07 	vmul.f64	d8, d8, d7
    bf92:	ee18 2a90 	vmov	r2, s17
    bf96:	4013      	ands	r3, r2
    bf98:	b913      	cbnz	r3, bfa0 <_strtod_l+0xc88>
    bf9a:	2322      	movs	r3, #34	; 0x22
    bf9c:	f8c8 3000 	str.w	r3, [r8]
    bfa0:	9812      	ldr	r0, [sp, #72]	; 0x48
    bfa2:	e59f      	b.n	bae4 <_strtod_l+0x7cc>
    bfa4:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    bfa8:	9305      	str	r3, [sp, #20]
    bfaa:	2300      	movs	r3, #0
    bfac:	9308      	str	r3, [sp, #32]
    bfae:	f7ff bbb1 	b.w	b714 <_strtod_l+0x3fc>
    bfb2:	bf00      	nop
    bfb4:	f3af 8000 	nop.w
	...
    bfc4:	7ff00000 	.word	0x7ff00000
    bfc8:	00000000 	.word	0x00000000
    bfcc:	39500000 	.word	0x39500000
    bfd0:	20007cd4 	.word	0x20007cd4
    bfd4:	20007fe8 	.word	0x20007fe8
    bfd8:	20000edc 	.word	0x20000edc
    bfdc:	20000ee0 	.word	0x20000ee0
    bfe0:	7ff00000 	.word	0x7ff00000
    bfe4:	200003a8 	.word	0x200003a8
    bfe8:	000fffff 	.word	0x000fffff
    bfec:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    bff0:	430d      	orrs	r5, r1
    bff2:	d1c7      	bne.n	bf84 <_strtod_l+0xc6c>
    bff4:	f3c2 0313 	ubfx	r3, r2, #0, #20
    bff8:	4617      	mov	r7, r2
    bffa:	2b00      	cmp	r3, #0
    bffc:	d1c2      	bne.n	bf84 <_strtod_l+0xc6c>
    bffe:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    c002:	0d1b      	lsrs	r3, r3, #20
    c004:	051b      	lsls	r3, r3, #20
    c006:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    c00a:	d9bb      	bls.n	bf84 <_strtod_l+0xc6c>
    c00c:	f8da 3014 	ldr.w	r3, [sl, #20]
    c010:	b91b      	cbnz	r3, c01a <_strtod_l+0xd02>
    c012:	f8da 3010 	ldr.w	r3, [sl, #16]
    c016:	2b01      	cmp	r3, #1
    c018:	ddb4      	ble.n	bf84 <_strtod_l+0xc6c>
    c01a:	4651      	mov	r1, sl
    c01c:	2201      	movs	r2, #1
    c01e:	4640      	mov	r0, r8
    c020:	f001 ffd2 	bl	dfc8 <__lshift>
    c024:	4621      	mov	r1, r4
    c026:	4682      	mov	sl, r0
    c028:	f002 f846 	bl	e0b8 <__mcmp>
    c02c:	2800      	cmp	r0, #0
    c02e:	dda9      	ble.n	bf84 <_strtod_l+0xc6c>
    c030:	9b08      	ldr	r3, [sp, #32]
    c032:	2b00      	cmp	r3, #0
    c034:	d17e      	bne.n	c134 <_strtod_l+0xe1c>
    c036:	4b50      	ldr	r3, [pc, #320]	; (c178 <_strtod_l+0xe60>)
    c038:	403b      	ands	r3, r7
    c03a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    c03e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    c042:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    c046:	9305      	str	r3, [sp, #20]
    c048:	f04f 33ff 	mov.w	r3, #4294967295
    c04c:	9304      	str	r3, [sp, #16]
    c04e:	ed9d 8b04 	vldr	d8, [sp, #16]
    c052:	e797      	b.n	bf84 <_strtod_l+0xc6c>
    c054:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    c058:	f3c2 0313 	ubfx	r3, r2, #0, #20
    c05c:	430b      	orrs	r3, r1
    c05e:	4617      	mov	r7, r2
    c060:	f47f af6c 	bne.w	bf3c <_strtod_l+0xc24>
    c064:	e7e4      	b.n	c030 <_strtod_l+0xd18>
    c066:	4945      	ldr	r1, [pc, #276]	; (c17c <_strtod_l+0xe64>)
    c068:	a811      	add	r0, sp, #68	; 0x44
    c06a:	aa14      	add	r2, sp, #80	; 0x50
    c06c:	f001 fc58 	bl	d920 <__hexnan>
    c070:	2805      	cmp	r0, #5
    c072:	f47f ab06 	bne.w	b682 <_strtod_l+0x36a>
    c076:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c078:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    c07c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    c080:	9305      	str	r3, [sp, #20]
    c082:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c084:	9304      	str	r3, [sp, #16]
    c086:	ed9d 8b04 	vldr	d8, [sp, #16]
    c08a:	f7ff bb02 	b.w	b692 <_strtod_l+0x37a>
    c08e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c094:	4203      	tst	r3, r0
    c096:	f43f af75 	beq.w	bf84 <_strtod_l+0xc6c>
    c09a:	460f      	mov	r7, r1
    c09c:	e757      	b.n	bf4e <_strtod_l+0xc36>
    c09e:	4c38      	ldr	r4, [pc, #224]	; (c180 <_strtod_l+0xe68>)
    c0a0:	2100      	movs	r1, #0
    c0a2:	e58f      	b.n	bbc4 <_strtod_l+0x8ac>
    c0a4:	f002 f8d4 	bl	e250 <__ulp>
    c0a8:	9b08      	ldr	r3, [sp, #32]
    c0aa:	2b00      	cmp	r3, #0
    c0ac:	d055      	beq.n	c15a <_strtod_l+0xe42>
    c0ae:	f3c7 530a 	ubfx	r3, r7, #20, #11
    c0b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    c0b6:	2b00      	cmp	r3, #0
    c0b8:	dd09      	ble.n	c0ce <_strtod_l+0xdb6>
    c0ba:	051b      	lsls	r3, r3, #20
    c0bc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    c0c0:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    c0c4:	4628      	mov	r0, r5
    c0c6:	ec41 0b17 	vmov	d7, r0, r1
    c0ca:	ee20 0b07 	vmul.f64	d0, d0, d7
    c0ce:	ee38 8b40 	vsub.f64	d8, d8, d0
    c0d2:	eeb5 8b40 	vcmp.f64	d8, #0.0
    c0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c0da:	f47f af55 	bne.w	bf88 <_strtod_l+0xc70>
    c0de:	e681      	b.n	bde4 <_strtod_l+0xacc>
    c0e0:	9b08      	ldr	r3, [sp, #32]
    c0e2:	9904      	ldr	r1, [sp, #16]
    c0e4:	b31b      	cbz	r3, c12e <_strtod_l+0xe16>
    c0e6:	4b24      	ldr	r3, [pc, #144]	; (c178 <_strtod_l+0xe60>)
    c0e8:	4013      	ands	r3, r2
    c0ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    c0ee:	d81e      	bhi.n	c12e <_strtod_l+0xe16>
    c0f0:	0d1b      	lsrs	r3, r3, #20
    c0f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    c0f6:	f04f 30ff 	mov.w	r0, #4294967295
    c0fa:	fa00 f303 	lsl.w	r3, r0, r3
    c0fe:	4299      	cmp	r1, r3
    c100:	f47f af1c 	bne.w	bf3c <_strtod_l+0xc24>
    c104:	4b1f      	ldr	r3, [pc, #124]	; (c184 <_strtod_l+0xe6c>)
    c106:	429a      	cmp	r2, r3
    c108:	d030      	beq.n	c16c <_strtod_l+0xe54>
    c10a:	4b1b      	ldr	r3, [pc, #108]	; (c178 <_strtod_l+0xe60>)
    c10c:	4013      	ands	r3, r2
    c10e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    c112:	9305      	str	r3, [sp, #20]
    c114:	2300      	movs	r3, #0
    c116:	9304      	str	r3, [sp, #16]
    c118:	ed9d 8b04 	vldr	d8, [sp, #16]
    c11c:	e732      	b.n	bf84 <_strtod_l+0xc6c>
    c11e:	f04f 32ff 	mov.w	r2, #4294967295
    c122:	fa02 f303 	lsl.w	r3, r2, r3
    c126:	9a04      	ldr	r2, [sp, #16]
    c128:	401a      	ands	r2, r3
    c12a:	9204      	str	r2, [sp, #16]
    c12c:	e5d0      	b.n	bcd0 <_strtod_l+0x9b8>
    c12e:	f04f 33ff 	mov.w	r3, #4294967295
    c132:	e7e4      	b.n	c0fe <_strtod_l+0xde6>
    c134:	4b10      	ldr	r3, [pc, #64]	; (c178 <_strtod_l+0xe60>)
    c136:	403b      	ands	r3, r7
    c138:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    c13c:	f73f af7d 	bgt.w	c03a <_strtod_l+0xd22>
    c140:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    c144:	f73f af20 	bgt.w	bf88 <_strtod_l+0xc70>
    c148:	e64c      	b.n	bde4 <_strtod_l+0xacc>
    c14a:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    c14e:	f04f 33ff 	mov.w	r3, #4294967295
    c152:	4093      	lsls	r3, r2
    c154:	400b      	ands	r3, r1
    c156:	9305      	str	r3, [sp, #20]
    c158:	e5ba      	b.n	bcd0 <_strtod_l+0x9b8>
    c15a:	ee38 8b40 	vsub.f64	d8, d8, d0
    c15e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    c162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c166:	f47f af1b 	bne.w	bfa0 <_strtod_l+0xc88>
    c16a:	e63b      	b.n	bde4 <_strtod_l+0xacc>
    c16c:	3101      	adds	r1, #1
    c16e:	d1cc      	bne.n	c10a <_strtod_l+0xdf2>
    c170:	e409      	b.n	b986 <_strtod_l+0x66e>
    c172:	2300      	movs	r3, #0
    c174:	e67d      	b.n	be72 <_strtod_l+0xb5a>
    c176:	bf00      	nop
    c178:	7ff00000 	.word	0x7ff00000
    c17c:	20007ce8 	.word	0x20007ce8
    c180:	20000380 	.word	0x20000380
    c184:	7fefffff 	.word	0x7fefffff

0000c188 <_strtod_r>:
    c188:	4b01      	ldr	r3, [pc, #4]	; (c190 <_strtod_r+0x8>)
    c18a:	f7ff b8c5 	b.w	b318 <_strtod_l>
    c18e:	bf00      	nop
    c190:	2000889c 	.word	0x2000889c

0000c194 <_strtol_l.constprop.0>:
    c194:	2b01      	cmp	r3, #1
    c196:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c19a:	d040      	beq.n	c21e <_strtol_l.constprop.0+0x8a>
    c19c:	2b24      	cmp	r3, #36	; 0x24
    c19e:	4698      	mov	r8, r3
    c1a0:	d83d      	bhi.n	c21e <_strtol_l.constprop.0+0x8a>
    c1a2:	4d4c      	ldr	r5, [pc, #304]	; (c2d4 <_strtol_l.constprop.0+0x140>)
    c1a4:	468e      	mov	lr, r1
    c1a6:	4676      	mov	r6, lr
    c1a8:	f81e bb01 	ldrb.w	fp, [lr], #1
    c1ac:	f815 400b 	ldrb.w	r4, [r5, fp]
    c1b0:	f014 0408 	ands.w	r4, r4, #8
    c1b4:	d1f7      	bne.n	c1a6 <_strtol_l.constprop.0+0x12>
    c1b6:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    c1ba:	d072      	beq.n	c2a2 <_strtol_l.constprop.0+0x10e>
    c1bc:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    c1c0:	bf08      	it	eq
    c1c2:	f89e b000 	ldrbeq.w	fp, [lr]
    c1c6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    c1ca:	bf08      	it	eq
    c1cc:	f106 0e02 	addeq.w	lr, r6, #2
    c1d0:	2b00      	cmp	r3, #0
    c1d2:	d042      	beq.n	c25a <_strtol_l.constprop.0+0xc6>
    c1d4:	2b10      	cmp	r3, #16
    c1d6:	d057      	beq.n	c288 <_strtol_l.constprop.0+0xf4>
    c1d8:	fbb9 f7f8 	udiv	r7, r9, r8
    c1dc:	2500      	movs	r5, #0
    c1de:	462e      	mov	r6, r5
    c1e0:	fb08 9a17 	mls	sl, r8, r7, r9
    c1e4:	e005      	b.n	c1f2 <_strtol_l.constprop.0+0x5e>
    c1e6:	d033      	beq.n	c250 <_strtol_l.constprop.0+0xbc>
    c1e8:	fb08 c606 	mla	r6, r8, r6, ip
    c1ec:	2501      	movs	r5, #1
    c1ee:	f81e bb01 	ldrb.w	fp, [lr], #1
    c1f2:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    c1f6:	f1bc 0f09 	cmp.w	ip, #9
    c1fa:	d906      	bls.n	c20a <_strtol_l.constprop.0+0x76>
    c1fc:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    c200:	f1bc 0f19 	cmp.w	ip, #25
    c204:	d812      	bhi.n	c22c <_strtol_l.constprop.0+0x98>
    c206:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    c20a:	4563      	cmp	r3, ip
    c20c:	dd17      	ble.n	c23e <_strtol_l.constprop.0+0xaa>
    c20e:	f1b5 3fff 	cmp.w	r5, #4294967295
    c212:	d0ec      	beq.n	c1ee <_strtol_l.constprop.0+0x5a>
    c214:	42b7      	cmp	r7, r6
    c216:	d2e6      	bcs.n	c1e6 <_strtol_l.constprop.0+0x52>
    c218:	f04f 35ff 	mov.w	r5, #4294967295
    c21c:	e7e7      	b.n	c1ee <_strtol_l.constprop.0+0x5a>
    c21e:	f000 fc23 	bl	ca68 <__errno>
    c222:	2316      	movs	r3, #22
    c224:	6003      	str	r3, [r0, #0]
    c226:	2000      	movs	r0, #0
    c228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c22c:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    c230:	f1bc 0f19 	cmp.w	ip, #25
    c234:	d803      	bhi.n	c23e <_strtol_l.constprop.0+0xaa>
    c236:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    c23a:	4563      	cmp	r3, ip
    c23c:	dce7      	bgt.n	c20e <_strtol_l.constprop.0+0x7a>
    c23e:	1c6b      	adds	r3, r5, #1
    c240:	d027      	beq.n	c292 <_strtol_l.constprop.0+0xfe>
    c242:	b98c      	cbnz	r4, c268 <_strtol_l.constprop.0+0xd4>
    c244:	b10a      	cbz	r2, c24a <_strtol_l.constprop.0+0xb6>
    c246:	bba5      	cbnz	r5, c2b2 <_strtol_l.constprop.0+0x11e>
    c248:	6011      	str	r1, [r2, #0]
    c24a:	4630      	mov	r0, r6
    c24c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c250:	45e2      	cmp	sl, ip
    c252:	dac9      	bge.n	c1e8 <_strtol_l.constprop.0+0x54>
    c254:	f04f 35ff 	mov.w	r5, #4294967295
    c258:	e7c9      	b.n	c1ee <_strtol_l.constprop.0+0x5a>
    c25a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    c25e:	d005      	beq.n	c26c <_strtol_l.constprop.0+0xd8>
    c260:	f04f 080a 	mov.w	r8, #10
    c264:	4643      	mov	r3, r8
    c266:	e7b7      	b.n	c1d8 <_strtol_l.constprop.0+0x44>
    c268:	4276      	negs	r6, r6
    c26a:	e7eb      	b.n	c244 <_strtol_l.constprop.0+0xb0>
    c26c:	f89e 3000 	ldrb.w	r3, [lr]
    c270:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c274:	2b58      	cmp	r3, #88	; 0x58
    c276:	d121      	bne.n	c2bc <_strtol_l.constprop.0+0x128>
    c278:	f04f 0810 	mov.w	r8, #16
    c27c:	f89e b001 	ldrb.w	fp, [lr, #1]
    c280:	4643      	mov	r3, r8
    c282:	f10e 0e02 	add.w	lr, lr, #2
    c286:	e7a7      	b.n	c1d8 <_strtol_l.constprop.0+0x44>
    c288:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    c28c:	d01a      	beq.n	c2c4 <_strtol_l.constprop.0+0x130>
    c28e:	4698      	mov	r8, r3
    c290:	e7a2      	b.n	c1d8 <_strtol_l.constprop.0+0x44>
    c292:	2322      	movs	r3, #34	; 0x22
    c294:	6003      	str	r3, [r0, #0]
    c296:	b172      	cbz	r2, c2b6 <_strtol_l.constprop.0+0x122>
    c298:	f10e 31ff 	add.w	r1, lr, #4294967295
    c29c:	464e      	mov	r6, r9
    c29e:	6011      	str	r1, [r2, #0]
    c2a0:	e7d3      	b.n	c24a <_strtol_l.constprop.0+0xb6>
    c2a2:	f89e b000 	ldrb.w	fp, [lr]
    c2a6:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    c2aa:	f106 0e02 	add.w	lr, r6, #2
    c2ae:	2401      	movs	r4, #1
    c2b0:	e78e      	b.n	c1d0 <_strtol_l.constprop.0+0x3c>
    c2b2:	46b1      	mov	r9, r6
    c2b4:	e7f0      	b.n	c298 <_strtol_l.constprop.0+0x104>
    c2b6:	464e      	mov	r6, r9
    c2b8:	4630      	mov	r0, r6
    c2ba:	e7c7      	b.n	c24c <_strtol_l.constprop.0+0xb8>
    c2bc:	f04f 0808 	mov.w	r8, #8
    c2c0:	4643      	mov	r3, r8
    c2c2:	e789      	b.n	c1d8 <_strtol_l.constprop.0+0x44>
    c2c4:	f89e 5000 	ldrb.w	r5, [lr]
    c2c8:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    c2cc:	2d58      	cmp	r5, #88	; 0x58
    c2ce:	d0d3      	beq.n	c278 <_strtol_l.constprop.0+0xe4>
    c2d0:	4698      	mov	r8, r3
    c2d2:	e781      	b.n	c1d8 <_strtol_l.constprop.0+0x44>
    c2d4:	20000d59 	.word	0x20000d59

0000c2d8 <_strtol_r>:
    c2d8:	f7ff bf5c 	b.w	c194 <_strtol_l.constprop.0>

0000c2dc <__cxa_atexit>:
    c2dc:	4613      	mov	r3, r2
    c2de:	460a      	mov	r2, r1
    c2e0:	4601      	mov	r1, r0
    c2e2:	2002      	movs	r0, #2
    c2e4:	f000 be4a 	b.w	cf7c <__register_exitproc>

0000c2e8 <stdio_exit_handler>:
    c2e8:	4a02      	ldr	r2, [pc, #8]	; (c2f4 <stdio_exit_handler+0xc>)
    c2ea:	4903      	ldr	r1, [pc, #12]	; (c2f8 <stdio_exit_handler+0x10>)
    c2ec:	4803      	ldr	r0, [pc, #12]	; (c2fc <stdio_exit_handler+0x14>)
    c2ee:	f000 b8bb 	b.w	c468 <_fwalk_sglue>
    c2f2:	bf00      	nop
    c2f4:	20008e18 	.word	0x20008e18
    c2f8:	00011925 	.word	0x00011925
    c2fc:	20008740 	.word	0x20008740

0000c300 <cleanup_stdio>:
    c300:	4b0c      	ldr	r3, [pc, #48]	; (c334 <cleanup_stdio+0x34>)
    c302:	6841      	ldr	r1, [r0, #4]
    c304:	4299      	cmp	r1, r3
    c306:	b510      	push	{r4, lr}
    c308:	4604      	mov	r4, r0
    c30a:	d001      	beq.n	c310 <cleanup_stdio+0x10>
    c30c:	f005 fb0a 	bl	11924 <_fclose_r>
    c310:	68a1      	ldr	r1, [r4, #8]
    c312:	4b09      	ldr	r3, [pc, #36]	; (c338 <cleanup_stdio+0x38>)
    c314:	4299      	cmp	r1, r3
    c316:	d002      	beq.n	c31e <cleanup_stdio+0x1e>
    c318:	4620      	mov	r0, r4
    c31a:	f005 fb03 	bl	11924 <_fclose_r>
    c31e:	68e1      	ldr	r1, [r4, #12]
    c320:	4b06      	ldr	r3, [pc, #24]	; (c33c <cleanup_stdio+0x3c>)
    c322:	4299      	cmp	r1, r3
    c324:	d004      	beq.n	c330 <cleanup_stdio+0x30>
    c326:	4620      	mov	r0, r4
    c328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c32c:	f005 bafa 	b.w	11924 <_fclose_r>
    c330:	bd10      	pop	{r4, pc}
    c332:	bf00      	nop
    c334:	20021360 	.word	0x20021360
    c338:	200213c8 	.word	0x200213c8
    c33c:	20021430 	.word	0x20021430

0000c340 <global_stdio_init.part.0>:
    c340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c344:	4c2a      	ldr	r4, [pc, #168]	; (c3f0 <global_stdio_init.part.0+0xb0>)
    c346:	4b2b      	ldr	r3, [pc, #172]	; (c3f4 <global_stdio_init.part.0+0xb4>)
    c348:	482b      	ldr	r0, [pc, #172]	; (c3f8 <global_stdio_init.part.0+0xb8>)
    c34a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; c40c <global_stdio_init.part.0+0xcc>
    c34e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; c410 <global_stdio_init.part.0+0xd0>
    c352:	4f2a      	ldr	r7, [pc, #168]	; (c3fc <global_stdio_init.part.0+0xbc>)
    c354:	6018      	str	r0, [r3, #0]
    c356:	2500      	movs	r5, #0
    c358:	2304      	movs	r3, #4
    c35a:	2208      	movs	r2, #8
    c35c:	4629      	mov	r1, r5
    c35e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    c362:	4e27      	ldr	r6, [pc, #156]	; (c400 <global_stdio_init.part.0+0xc0>)
    c364:	6665      	str	r5, [r4, #100]	; 0x64
    c366:	e9c4 5302 	strd	r5, r3, [r4, #8]
    c36a:	e9c4 5500 	strd	r5, r5, [r4]
    c36e:	e9c4 5504 	strd	r5, r5, [r4, #16]
    c372:	61a5      	str	r5, [r4, #24]
    c374:	f000 fa42 	bl	c7fc <memset>
    c378:	4b22      	ldr	r3, [pc, #136]	; (c404 <global_stdio_init.part.0+0xc4>)
    c37a:	6763      	str	r3, [r4, #116]	; 0x74
    c37c:	2208      	movs	r2, #8
    c37e:	4629      	mov	r1, r5
    c380:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    c384:	e9c4 4907 	strd	r4, r9, [r4, #28]
    c388:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    c38c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    c390:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    c394:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    c398:	6725      	str	r5, [r4, #112]	; 0x70
    c39a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    c39e:	62e6      	str	r6, [r4, #44]	; 0x2c
    c3a0:	f000 fa2c 	bl	c7fc <memset>
    c3a4:	4b18      	ldr	r3, [pc, #96]	; (c408 <global_stdio_init.part.0+0xc8>)
    c3a6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    c3aa:	4629      	mov	r1, r5
    c3ac:	f104 0368 	add.w	r3, r4, #104	; 0x68
    c3b0:	2208      	movs	r2, #8
    c3b2:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    c3b6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    c3ba:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    c3be:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    c3c2:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    c3c6:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    c3ca:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    c3ce:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    c3d2:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    c3d6:	f000 fa11 	bl	c7fc <memset>
    c3da:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    c3de:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    c3e2:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    c3e6:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    c3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c3ee:	bf00      	nop
    c3f0:	20021360 	.word	0x20021360
    c3f4:	20021498 	.word	0x20021498
    c3f8:	0000c2e9 	.word	0x0000c2e9
    c3fc:	0000c5b1 	.word	0x0000c5b1
    c400:	0000c5d1 	.word	0x0000c5d1
    c404:	00010009 	.word	0x00010009
    c408:	00020012 	.word	0x00020012
    c40c:	0000c549 	.word	0x0000c549
    c410:	0000c571 	.word	0x0000c571

0000c414 <__sinit>:
    c414:	b510      	push	{r4, lr}
    c416:	4604      	mov	r4, r0
    c418:	480a      	ldr	r0, [pc, #40]	; (c444 <__sinit+0x30>)
    c41a:	f000 fb53 	bl	cac4 <__retarget_lock_acquire_recursive>
    c41e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c420:	b923      	cbnz	r3, c42c <__sinit+0x18>
    c422:	4b09      	ldr	r3, [pc, #36]	; (c448 <__sinit+0x34>)
    c424:	4a09      	ldr	r2, [pc, #36]	; (c44c <__sinit+0x38>)
    c426:	681b      	ldr	r3, [r3, #0]
    c428:	6362      	str	r2, [r4, #52]	; 0x34
    c42a:	b123      	cbz	r3, c436 <__sinit+0x22>
    c42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c430:	4804      	ldr	r0, [pc, #16]	; (c444 <__sinit+0x30>)
    c432:	f000 bb49 	b.w	cac8 <__retarget_lock_release_recursive>
    c436:	f7ff ff83 	bl	c340 <global_stdio_init.part.0>
    c43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c43e:	4801      	ldr	r0, [pc, #4]	; (c444 <__sinit+0x30>)
    c440:	f000 bb42 	b.w	cac8 <__retarget_lock_release_recursive>
    c444:	20021328 	.word	0x20021328
    c448:	20021498 	.word	0x20021498
    c44c:	0000c301 	.word	0x0000c301

0000c450 <__sfp_lock_acquire>:
    c450:	4801      	ldr	r0, [pc, #4]	; (c458 <__sfp_lock_acquire+0x8>)
    c452:	f000 bb37 	b.w	cac4 <__retarget_lock_acquire_recursive>
    c456:	bf00      	nop
    c458:	20021328 	.word	0x20021328

0000c45c <__sfp_lock_release>:
    c45c:	4801      	ldr	r0, [pc, #4]	; (c464 <__sfp_lock_release+0x8>)
    c45e:	f000 bb33 	b.w	cac8 <__retarget_lock_release_recursive>
    c462:	bf00      	nop
    c464:	20021328 	.word	0x20021328

0000c468 <_fwalk_sglue>:
    c468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c46c:	4680      	mov	r8, r0
    c46e:	460f      	mov	r7, r1
    c470:	4616      	mov	r6, r2
    c472:	f04f 0900 	mov.w	r9, #0
    c476:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    c47a:	3d01      	subs	r5, #1
    c47c:	d411      	bmi.n	c4a2 <_fwalk_sglue+0x3a>
    c47e:	89a3      	ldrh	r3, [r4, #12]
    c480:	2b01      	cmp	r3, #1
    c482:	f105 35ff 	add.w	r5, r5, #4294967295
    c486:	d908      	bls.n	c49a <_fwalk_sglue+0x32>
    c488:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    c48c:	3301      	adds	r3, #1
    c48e:	4621      	mov	r1, r4
    c490:	d003      	beq.n	c49a <_fwalk_sglue+0x32>
    c492:	4640      	mov	r0, r8
    c494:	47b8      	blx	r7
    c496:	ea49 0900 	orr.w	r9, r9, r0
    c49a:	1c6b      	adds	r3, r5, #1
    c49c:	f104 0468 	add.w	r4, r4, #104	; 0x68
    c4a0:	d1ed      	bne.n	c47e <_fwalk_sglue+0x16>
    c4a2:	6836      	ldr	r6, [r6, #0]
    c4a4:	2e00      	cmp	r6, #0
    c4a6:	d1e6      	bne.n	c476 <_fwalk_sglue+0xe>
    c4a8:	4648      	mov	r0, r9
    c4aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c4ae:	bf00      	nop

0000c4b0 <sprintf>:
    c4b0:	b40e      	push	{r1, r2, r3}
    c4b2:	b510      	push	{r4, lr}
    c4b4:	b09d      	sub	sp, #116	; 0x74
    c4b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c4ba:	ab1f      	add	r3, sp, #124	; 0x7c
    c4bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    c4c0:	9104      	str	r1, [sp, #16]
    c4c2:	4909      	ldr	r1, [pc, #36]	; (c4e8 <sprintf+0x38>)
    c4c4:	f853 2b04 	ldr.w	r2, [r3], #4
    c4c8:	9002      	str	r0, [sp, #8]
    c4ca:	4c08      	ldr	r4, [pc, #32]	; (c4ec <sprintf+0x3c>)
    c4cc:	6808      	ldr	r0, [r1, #0]
    c4ce:	9301      	str	r3, [sp, #4]
    c4d0:	a902      	add	r1, sp, #8
    c4d2:	9405      	str	r4, [sp, #20]
    c4d4:	f002 f85c 	bl	e590 <_svfprintf_r>
    c4d8:	9b02      	ldr	r3, [sp, #8]
    c4da:	2200      	movs	r2, #0
    c4dc:	701a      	strb	r2, [r3, #0]
    c4de:	b01d      	add	sp, #116	; 0x74
    c4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c4e4:	b003      	add	sp, #12
    c4e6:	4770      	bx	lr
    c4e8:	20008e24 	.word	0x20008e24
    c4ec:	ffff0208 	.word	0xffff0208

0000c4f0 <sscanf>:
    c4f0:	b40e      	push	{r1, r2, r3}
    c4f2:	b510      	push	{r4, lr}
    c4f4:	b09f      	sub	sp, #124	; 0x7c
    c4f6:	ac21      	add	r4, sp, #132	; 0x84
    c4f8:	f44f 7101 	mov.w	r1, #516	; 0x204
    c4fc:	f854 2b04 	ldr.w	r2, [r4], #4
    c500:	9201      	str	r2, [sp, #4]
    c502:	f8ad 101c 	strh.w	r1, [sp, #28]
    c506:	9004      	str	r0, [sp, #16]
    c508:	9008      	str	r0, [sp, #32]
    c50a:	f000 fcb9 	bl	ce80 <strlen>
    c50e:	9005      	str	r0, [sp, #20]
    c510:	9009      	str	r0, [sp, #36]	; 0x24
    c512:	480b      	ldr	r0, [pc, #44]	; (c540 <sscanf+0x50>)
    c514:	490b      	ldr	r1, [pc, #44]	; (c544 <sscanf+0x54>)
    c516:	910c      	str	r1, [sp, #48]	; 0x30
    c518:	2300      	movs	r3, #0
    c51a:	f64f 7cff 	movw	ip, #65535	; 0xffff
    c51e:	9310      	str	r3, [sp, #64]	; 0x40
    c520:	9315      	str	r3, [sp, #84]	; 0x54
    c522:	9a01      	ldr	r2, [sp, #4]
    c524:	6800      	ldr	r0, [r0, #0]
    c526:	f8ad c01e 	strh.w	ip, [sp, #30]
    c52a:	4623      	mov	r3, r4
    c52c:	a904      	add	r1, sp, #16
    c52e:	9403      	str	r4, [sp, #12]
    c530:	f003 fdd0 	bl	100d4 <__ssvfscanf_r>
    c534:	b01f      	add	sp, #124	; 0x7c
    c536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c53a:	b003      	add	sp, #12
    c53c:	4770      	bx	lr
    c53e:	bf00      	nop
    c540:	20008e24 	.word	0x20008e24
    c544:	0000c56d 	.word	0x0000c56d

0000c548 <__sread>:
    c548:	b510      	push	{r4, lr}
    c54a:	460c      	mov	r4, r1
    c54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c550:	f000 fa4c 	bl	c9ec <_read_r>
    c554:	2800      	cmp	r0, #0
    c556:	db03      	blt.n	c560 <__sread+0x18>
    c558:	6d23      	ldr	r3, [r4, #80]	; 0x50
    c55a:	4403      	add	r3, r0
    c55c:	6523      	str	r3, [r4, #80]	; 0x50
    c55e:	bd10      	pop	{r4, pc}
    c560:	89a3      	ldrh	r3, [r4, #12]
    c562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    c566:	81a3      	strh	r3, [r4, #12]
    c568:	bd10      	pop	{r4, pc}
    c56a:	bf00      	nop

0000c56c <__seofread>:
    c56c:	2000      	movs	r0, #0
    c56e:	4770      	bx	lr

0000c570 <__swrite>:
    c570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c574:	460c      	mov	r4, r1
    c576:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    c57a:	461f      	mov	r7, r3
    c57c:	05cb      	lsls	r3, r1, #23
    c57e:	4605      	mov	r5, r0
    c580:	4616      	mov	r6, r2
    c582:	d40b      	bmi.n	c59c <__swrite+0x2c>
    c584:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    c588:	81a1      	strh	r1, [r4, #12]
    c58a:	463b      	mov	r3, r7
    c58c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c590:	4632      	mov	r2, r6
    c592:	4628      	mov	r0, r5
    c594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c598:	f000 ba50 	b.w	ca3c <_write_r>
    c59c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c5a0:	2302      	movs	r3, #2
    c5a2:	2200      	movs	r2, #0
    c5a4:	f000 fa0c 	bl	c9c0 <_lseek_r>
    c5a8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    c5ac:	e7ea      	b.n	c584 <__swrite+0x14>
    c5ae:	bf00      	nop

0000c5b0 <__sseek>:
    c5b0:	b510      	push	{r4, lr}
    c5b2:	460c      	mov	r4, r1
    c5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c5b8:	f000 fa02 	bl	c9c0 <_lseek_r>
    c5bc:	89a3      	ldrh	r3, [r4, #12]
    c5be:	1c42      	adds	r2, r0, #1
    c5c0:	bf0e      	itee	eq
    c5c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    c5c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    c5ca:	6520      	strne	r0, [r4, #80]	; 0x50
    c5cc:	81a3      	strh	r3, [r4, #12]
    c5ce:	bd10      	pop	{r4, pc}

0000c5d0 <__sclose>:
    c5d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c5d4:	f000 b9e2 	b.w	c99c <_close_r>

0000c5d8 <_vdprintf_r>:
    c5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5da:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    c5de:	af04      	add	r7, sp, #16
    c5e0:	9300      	str	r3, [sp, #0]
    c5e2:	4613      	mov	r3, r2
    c5e4:	f44f 7200 	mov.w	r2, #512	; 0x200
    c5e8:	460e      	mov	r6, r1
    c5ea:	9203      	str	r2, [sp, #12]
    c5ec:	4639      	mov	r1, r7
    c5ee:	aa03      	add	r2, sp, #12
    c5f0:	4605      	mov	r5, r0
    c5f2:	f000 f825 	bl	c640 <_vasnprintf_r>
    c5f6:	b188      	cbz	r0, c61c <_vdprintf_r+0x44>
    c5f8:	4604      	mov	r4, r0
    c5fa:	4602      	mov	r2, r0
    c5fc:	9b03      	ldr	r3, [sp, #12]
    c5fe:	4631      	mov	r1, r6
    c600:	4628      	mov	r0, r5
    c602:	f000 fa1b 	bl	ca3c <_write_r>
    c606:	42bc      	cmp	r4, r7
    c608:	9003      	str	r0, [sp, #12]
    c60a:	d004      	beq.n	c616 <_vdprintf_r+0x3e>
    c60c:	4628      	mov	r0, r5
    c60e:	4621      	mov	r1, r4
    c610:	f000 fd48 	bl	d0a4 <_free_r>
    c614:	9803      	ldr	r0, [sp, #12]
    c616:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    c61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c61c:	f04f 30ff 	mov.w	r0, #4294967295
    c620:	e7f9      	b.n	c616 <_vdprintf_r+0x3e>
    c622:	bf00      	nop

0000c624 <vdprintf>:
    c624:	b410      	push	{r4}
    c626:	4c05      	ldr	r4, [pc, #20]	; (c63c <vdprintf+0x18>)
    c628:	4684      	mov	ip, r0
    c62a:	4613      	mov	r3, r2
    c62c:	6820      	ldr	r0, [r4, #0]
    c62e:	f85d 4b04 	ldr.w	r4, [sp], #4
    c632:	460a      	mov	r2, r1
    c634:	4661      	mov	r1, ip
    c636:	f7ff bfcf 	b.w	c5d8 <_vdprintf_r>
    c63a:	bf00      	nop
    c63c:	20008e24 	.word	0x20008e24

0000c640 <_vasnprintf_r>:
    c640:	b530      	push	{r4, r5, lr}
    c642:	6814      	ldr	r4, [r2, #0]
    c644:	4615      	mov	r5, r2
    c646:	b09b      	sub	sp, #108	; 0x6c
    c648:	461a      	mov	r2, r3
    c64a:	b109      	cbz	r1, c650 <_vasnprintf_r+0x10>
    c64c:	2c00      	cmp	r4, #0
    c64e:	d119      	bne.n	c684 <_vasnprintf_r+0x44>
    c650:	2100      	movs	r1, #0
    c652:	f44f 7322 	mov.w	r3, #648	; 0x288
    c656:	f8ad 300c 	strh.w	r3, [sp, #12]
    c65a:	9100      	str	r1, [sp, #0]
    c65c:	9104      	str	r1, [sp, #16]
    c65e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c662:	9102      	str	r1, [sp, #8]
    c664:	9105      	str	r1, [sp, #20]
    c666:	f8ad 300e 	strh.w	r3, [sp, #14]
    c66a:	4669      	mov	r1, sp
    c66c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    c66e:	f001 ff8f 	bl	e590 <_svfprintf_r>
    c672:	2800      	cmp	r0, #0
    c674:	db13      	blt.n	c69e <_vasnprintf_r+0x5e>
    c676:	9b00      	ldr	r3, [sp, #0]
    c678:	6028      	str	r0, [r5, #0]
    c67a:	2200      	movs	r2, #0
    c67c:	701a      	strb	r2, [r3, #0]
    c67e:	9804      	ldr	r0, [sp, #16]
    c680:	b01b      	add	sp, #108	; 0x6c
    c682:	bd30      	pop	{r4, r5, pc}
    c684:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    c688:	9100      	str	r1, [sp, #0]
    c68a:	9104      	str	r1, [sp, #16]
    c68c:	f8ad 300c 	strh.w	r3, [sp, #12]
    c690:	4621      	mov	r1, r4
    c692:	dae4      	bge.n	c65e <_vasnprintf_r+0x1e>
    c694:	238b      	movs	r3, #139	; 0x8b
    c696:	6003      	str	r3, [r0, #0]
    c698:	2000      	movs	r0, #0
    c69a:	b01b      	add	sp, #108	; 0x6c
    c69c:	bd30      	pop	{r4, r5, pc}
    c69e:	2000      	movs	r0, #0
    c6a0:	e7ee      	b.n	c680 <_vasnprintf_r+0x40>
    c6a2:	bf00      	nop

0000c6a4 <memcmp>:
    c6a4:	2a03      	cmp	r2, #3
    c6a6:	b570      	push	{r4, r5, r6, lr}
    c6a8:	d914      	bls.n	c6d4 <memcmp+0x30>
    c6aa:	ea40 0301 	orr.w	r3, r0, r1
    c6ae:	079b      	lsls	r3, r3, #30
    c6b0:	d122      	bne.n	c6f8 <memcmp+0x54>
    c6b2:	4604      	mov	r4, r0
    c6b4:	460b      	mov	r3, r1
    c6b6:	4619      	mov	r1, r3
    c6b8:	4620      	mov	r0, r4
    c6ba:	680e      	ldr	r6, [r1, #0]
    c6bc:	6805      	ldr	r5, [r0, #0]
    c6be:	42b5      	cmp	r5, r6
    c6c0:	f104 0404 	add.w	r4, r4, #4
    c6c4:	f103 0304 	add.w	r3, r3, #4
    c6c8:	d116      	bne.n	c6f8 <memcmp+0x54>
    c6ca:	3a04      	subs	r2, #4
    c6cc:	2a03      	cmp	r2, #3
    c6ce:	4620      	mov	r0, r4
    c6d0:	4619      	mov	r1, r3
    c6d2:	d8f0      	bhi.n	c6b6 <memcmp+0x12>
    c6d4:	1e54      	subs	r4, r2, #1
    c6d6:	b19a      	cbz	r2, c700 <memcmp+0x5c>
    c6d8:	1e42      	subs	r2, r0, #1
    c6da:	3901      	subs	r1, #1
    c6dc:	e001      	b.n	c6e2 <memcmp+0x3e>
    c6de:	18c3      	adds	r3, r0, r3
    c6e0:	d00c      	beq.n	c6fc <memcmp+0x58>
    c6e2:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    c6e6:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c6ea:	45e6      	cmp	lr, ip
    c6ec:	eba4 0302 	sub.w	r3, r4, r2
    c6f0:	d0f5      	beq.n	c6de <memcmp+0x3a>
    c6f2:	ebae 000c 	sub.w	r0, lr, ip
    c6f6:	bd70      	pop	{r4, r5, r6, pc}
    c6f8:	1e54      	subs	r4, r2, #1
    c6fa:	e7ed      	b.n	c6d8 <memcmp+0x34>
    c6fc:	4618      	mov	r0, r3
    c6fe:	bd70      	pop	{r4, r5, r6, pc}
    c700:	4610      	mov	r0, r2
    c702:	bd70      	pop	{r4, r5, r6, pc}

0000c704 <memmove>:
    c704:	4288      	cmp	r0, r1
    c706:	d90d      	bls.n	c724 <memmove+0x20>
    c708:	188b      	adds	r3, r1, r2
    c70a:	4283      	cmp	r3, r0
    c70c:	d90a      	bls.n	c724 <memmove+0x20>
    c70e:	eb00 0c02 	add.w	ip, r0, r2
    c712:	b1ba      	cbz	r2, c744 <memmove+0x40>
    c714:	4662      	mov	r2, ip
    c716:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    c71a:	f802 cd01 	strb.w	ip, [r2, #-1]!
    c71e:	4299      	cmp	r1, r3
    c720:	d1f9      	bne.n	c716 <memmove+0x12>
    c722:	4770      	bx	lr
    c724:	2a0f      	cmp	r2, #15
    c726:	d80e      	bhi.n	c746 <memmove+0x42>
    c728:	4603      	mov	r3, r0
    c72a:	f102 3cff 	add.w	ip, r2, #4294967295
    c72e:	b14a      	cbz	r2, c744 <memmove+0x40>
    c730:	f10c 0c01 	add.w	ip, ip, #1
    c734:	3b01      	subs	r3, #1
    c736:	448c      	add	ip, r1
    c738:	f811 2b01 	ldrb.w	r2, [r1], #1
    c73c:	f803 2f01 	strb.w	r2, [r3, #1]!
    c740:	4561      	cmp	r1, ip
    c742:	d1f9      	bne.n	c738 <memmove+0x34>
    c744:	4770      	bx	lr
    c746:	ea40 0301 	orr.w	r3, r0, r1
    c74a:	079b      	lsls	r3, r3, #30
    c74c:	d150      	bne.n	c7f0 <memmove+0xec>
    c74e:	f1a2 0310 	sub.w	r3, r2, #16
    c752:	b570      	push	{r4, r5, r6, lr}
    c754:	f101 0c20 	add.w	ip, r1, #32
    c758:	f023 050f 	bic.w	r5, r3, #15
    c75c:	f101 0e10 	add.w	lr, r1, #16
    c760:	f100 0410 	add.w	r4, r0, #16
    c764:	44ac      	add	ip, r5
    c766:	091b      	lsrs	r3, r3, #4
    c768:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    c76c:	f844 5c10 	str.w	r5, [r4, #-16]
    c770:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    c774:	f844 5c0c 	str.w	r5, [r4, #-12]
    c778:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    c77c:	f844 5c08 	str.w	r5, [r4, #-8]
    c780:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    c784:	f844 5c04 	str.w	r5, [r4, #-4]
    c788:	f10e 0e10 	add.w	lr, lr, #16
    c78c:	45e6      	cmp	lr, ip
    c78e:	f104 0410 	add.w	r4, r4, #16
    c792:	d1e9      	bne.n	c768 <memmove+0x64>
    c794:	3301      	adds	r3, #1
    c796:	f012 0f0c 	tst.w	r2, #12
    c79a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    c79e:	f002 040f 	and.w	r4, r2, #15
    c7a2:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    c7a6:	d027      	beq.n	c7f8 <memmove+0xf4>
    c7a8:	3c04      	subs	r4, #4
    c7aa:	f024 0603 	bic.w	r6, r4, #3
    c7ae:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    c7b2:	441e      	add	r6, r3
    c7b4:	1f1c      	subs	r4, r3, #4
    c7b6:	468e      	mov	lr, r1
    c7b8:	f85e 5b04 	ldr.w	r5, [lr], #4
    c7bc:	f844 5f04 	str.w	r5, [r4, #4]!
    c7c0:	42b4      	cmp	r4, r6
    c7c2:	d1f9      	bne.n	c7b8 <memmove+0xb4>
    c7c4:	f10c 0401 	add.w	r4, ip, #1
    c7c8:	f002 0203 	and.w	r2, r2, #3
    c7cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    c7d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    c7d4:	f102 3cff 	add.w	ip, r2, #4294967295
    c7d8:	b14a      	cbz	r2, c7ee <memmove+0xea>
    c7da:	f10c 0c01 	add.w	ip, ip, #1
    c7de:	3b01      	subs	r3, #1
    c7e0:	448c      	add	ip, r1
    c7e2:	f811 2b01 	ldrb.w	r2, [r1], #1
    c7e6:	f803 2f01 	strb.w	r2, [r3, #1]!
    c7ea:	4561      	cmp	r1, ip
    c7ec:	d1f9      	bne.n	c7e2 <memmove+0xde>
    c7ee:	bd70      	pop	{r4, r5, r6, pc}
    c7f0:	f102 3cff 	add.w	ip, r2, #4294967295
    c7f4:	4603      	mov	r3, r0
    c7f6:	e79b      	b.n	c730 <memmove+0x2c>
    c7f8:	4622      	mov	r2, r4
    c7fa:	e7eb      	b.n	c7d4 <memmove+0xd0>

0000c7fc <memset>:
    c7fc:	0783      	lsls	r3, r0, #30
    c7fe:	b530      	push	{r4, r5, lr}
    c800:	d048      	beq.n	c894 <memset+0x98>
    c802:	1e54      	subs	r4, r2, #1
    c804:	2a00      	cmp	r2, #0
    c806:	d03f      	beq.n	c888 <memset+0x8c>
    c808:	b2ca      	uxtb	r2, r1
    c80a:	4603      	mov	r3, r0
    c80c:	e001      	b.n	c812 <memset+0x16>
    c80e:	3c01      	subs	r4, #1
    c810:	d33a      	bcc.n	c888 <memset+0x8c>
    c812:	f803 2b01 	strb.w	r2, [r3], #1
    c816:	079d      	lsls	r5, r3, #30
    c818:	d1f9      	bne.n	c80e <memset+0x12>
    c81a:	2c03      	cmp	r4, #3
    c81c:	d92d      	bls.n	c87a <memset+0x7e>
    c81e:	b2cd      	uxtb	r5, r1
    c820:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    c824:	2c0f      	cmp	r4, #15
    c826:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    c82a:	d936      	bls.n	c89a <memset+0x9e>
    c82c:	f1a4 0210 	sub.w	r2, r4, #16
    c830:	f022 0c0f 	bic.w	ip, r2, #15
    c834:	f103 0e20 	add.w	lr, r3, #32
    c838:	44e6      	add	lr, ip
    c83a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    c83e:	f103 0210 	add.w	r2, r3, #16
    c842:	e942 5504 	strd	r5, r5, [r2, #-16]
    c846:	e942 5502 	strd	r5, r5, [r2, #-8]
    c84a:	3210      	adds	r2, #16
    c84c:	4572      	cmp	r2, lr
    c84e:	d1f8      	bne.n	c842 <memset+0x46>
    c850:	f10c 0201 	add.w	r2, ip, #1
    c854:	f014 0f0c 	tst.w	r4, #12
    c858:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    c85c:	f004 0c0f 	and.w	ip, r4, #15
    c860:	d013      	beq.n	c88a <memset+0x8e>
    c862:	f1ac 0304 	sub.w	r3, ip, #4
    c866:	f023 0303 	bic.w	r3, r3, #3
    c86a:	3304      	adds	r3, #4
    c86c:	4413      	add	r3, r2
    c86e:	f842 5b04 	str.w	r5, [r2], #4
    c872:	4293      	cmp	r3, r2
    c874:	d1fb      	bne.n	c86e <memset+0x72>
    c876:	f00c 0403 	and.w	r4, ip, #3
    c87a:	b12c      	cbz	r4, c888 <memset+0x8c>
    c87c:	b2c9      	uxtb	r1, r1
    c87e:	441c      	add	r4, r3
    c880:	f803 1b01 	strb.w	r1, [r3], #1
    c884:	429c      	cmp	r4, r3
    c886:	d1fb      	bne.n	c880 <memset+0x84>
    c888:	bd30      	pop	{r4, r5, pc}
    c88a:	4664      	mov	r4, ip
    c88c:	4613      	mov	r3, r2
    c88e:	2c00      	cmp	r4, #0
    c890:	d1f4      	bne.n	c87c <memset+0x80>
    c892:	e7f9      	b.n	c888 <memset+0x8c>
    c894:	4603      	mov	r3, r0
    c896:	4614      	mov	r4, r2
    c898:	e7bf      	b.n	c81a <memset+0x1e>
    c89a:	461a      	mov	r2, r3
    c89c:	46a4      	mov	ip, r4
    c89e:	e7e0      	b.n	c862 <memset+0x66>

0000c8a0 <strncmp>:
    c8a0:	2a00      	cmp	r2, #0
    c8a2:	d03e      	beq.n	c922 <strncmp+0x82>
    c8a4:	ea40 0301 	orr.w	r3, r0, r1
    c8a8:	079b      	lsls	r3, r3, #30
    c8aa:	b530      	push	{r4, r5, lr}
    c8ac:	4684      	mov	ip, r0
    c8ae:	d12f      	bne.n	c910 <strncmp+0x70>
    c8b0:	2a03      	cmp	r2, #3
    c8b2:	d92d      	bls.n	c910 <strncmp+0x70>
    c8b4:	460b      	mov	r3, r1
    c8b6:	e008      	b.n	c8ca <strncmp+0x2a>
    c8b8:	3a04      	subs	r2, #4
    c8ba:	4684      	mov	ip, r0
    c8bc:	4619      	mov	r1, r3
    c8be:	d025      	beq.n	c90c <strncmp+0x6c>
    c8c0:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    c8c4:	d122      	bne.n	c90c <strncmp+0x6c>
    c8c6:	2a03      	cmp	r2, #3
    c8c8:	d922      	bls.n	c910 <strncmp+0x70>
    c8ca:	6804      	ldr	r4, [r0, #0]
    c8cc:	4619      	mov	r1, r3
    c8ce:	f853 5b04 	ldr.w	r5, [r3], #4
    c8d2:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    c8d6:	42ac      	cmp	r4, r5
    c8d8:	4684      	mov	ip, r0
    c8da:	ea2e 0e04 	bic.w	lr, lr, r4
    c8de:	f100 0004 	add.w	r0, r0, #4
    c8e2:	d0e9      	beq.n	c8b8 <strncmp+0x18>
    c8e4:	f89c 0000 	ldrb.w	r0, [ip]
    c8e8:	780c      	ldrb	r4, [r1, #0]
    c8ea:	42a0      	cmp	r0, r4
    c8ec:	d11b      	bne.n	c926 <strncmp+0x86>
    c8ee:	46e6      	mov	lr, ip
    c8f0:	b168      	cbz	r0, c90e <strncmp+0x6e>
    c8f2:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    c8f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    c8fa:	eba2 030e 	sub.w	r3, r2, lr
    c8fe:	42a0      	cmp	r0, r4
    c900:	f103 33ff 	add.w	r3, r3, #4294967295
    c904:	d10f      	bne.n	c926 <strncmp+0x86>
    c906:	eb1c 0303 	adds.w	r3, ip, r3
    c90a:	d1f1      	bne.n	c8f0 <strncmp+0x50>
    c90c:	2000      	movs	r0, #0
    c90e:	bd30      	pop	{r4, r5, pc}
    c910:	f89c 0000 	ldrb.w	r0, [ip]
    c914:	780c      	ldrb	r4, [r1, #0]
    c916:	4284      	cmp	r4, r0
    c918:	d105      	bne.n	c926 <strncmp+0x86>
    c91a:	2a01      	cmp	r2, #1
    c91c:	d0f6      	beq.n	c90c <strncmp+0x6c>
    c91e:	46e6      	mov	lr, ip
    c920:	e7e6      	b.n	c8f0 <strncmp+0x50>
    c922:	4610      	mov	r0, r2
    c924:	4770      	bx	lr
    c926:	1b00      	subs	r0, r0, r4
    c928:	bd30      	pop	{r4, r5, pc}
    c92a:	bf00      	nop

0000c92c <strncpy>:
    c92c:	ea40 0301 	orr.w	r3, r0, r1
    c930:	079b      	lsls	r3, r3, #30
    c932:	b530      	push	{r4, r5, lr}
    c934:	d101      	bne.n	c93a <strncpy+0xe>
    c936:	2a03      	cmp	r2, #3
    c938:	d80f      	bhi.n	c95a <strncpy+0x2e>
    c93a:	4684      	mov	ip, r0
    c93c:	f101 3eff 	add.w	lr, r1, #4294967295
    c940:	e007      	b.n	c952 <strncpy+0x26>
    c942:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    c946:	f803 1b01 	strb.w	r1, [r3], #1
    c94a:	1e54      	subs	r4, r2, #1
    c94c:	b1c1      	cbz	r1, c980 <strncpy+0x54>
    c94e:	469c      	mov	ip, r3
    c950:	4622      	mov	r2, r4
    c952:	4663      	mov	r3, ip
    c954:	2a00      	cmp	r2, #0
    c956:	d1f4      	bne.n	c942 <strncpy+0x16>
    c958:	bd30      	pop	{r4, r5, pc}
    c95a:	460b      	mov	r3, r1
    c95c:	4684      	mov	ip, r0
    c95e:	4619      	mov	r1, r3
    c960:	f853 5b04 	ldr.w	r5, [r3], #4
    c964:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    c968:	ea24 0405 	bic.w	r4, r4, r5
    c96c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    c970:	d1e4      	bne.n	c93c <strncpy+0x10>
    c972:	3a04      	subs	r2, #4
    c974:	2a03      	cmp	r2, #3
    c976:	f84c 5b04 	str.w	r5, [ip], #4
    c97a:	4619      	mov	r1, r3
    c97c:	d8ef      	bhi.n	c95e <strncpy+0x32>
    c97e:	e7dd      	b.n	c93c <strncpy+0x10>
    c980:	4494      	add	ip, r2
    c982:	2c00      	cmp	r4, #0
    c984:	d0e8      	beq.n	c958 <strncpy+0x2c>
    c986:	f803 1b01 	strb.w	r1, [r3], #1
    c98a:	4563      	cmp	r3, ip
    c98c:	d1fb      	bne.n	c986 <strncpy+0x5a>
    c98e:	bd30      	pop	{r4, r5, pc}

0000c990 <__locale_mb_cur_max>:
    c990:	4b01      	ldr	r3, [pc, #4]	; (c998 <__locale_mb_cur_max+0x8>)
    c992:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    c996:	4770      	bx	lr
    c998:	2000889c 	.word	0x2000889c

0000c99c <_close_r>:
    c99c:	b538      	push	{r3, r4, r5, lr}
    c99e:	4d07      	ldr	r5, [pc, #28]	; (c9bc <_close_r+0x20>)
    c9a0:	2200      	movs	r2, #0
    c9a2:	4604      	mov	r4, r0
    c9a4:	4608      	mov	r0, r1
    c9a6:	602a      	str	r2, [r5, #0]
    c9a8:	f7fb fe72 	bl	8690 <_close>
    c9ac:	1c43      	adds	r3, r0, #1
    c9ae:	d000      	beq.n	c9b2 <_close_r+0x16>
    c9b0:	bd38      	pop	{r3, r4, r5, pc}
    c9b2:	682b      	ldr	r3, [r5, #0]
    c9b4:	2b00      	cmp	r3, #0
    c9b6:	d0fb      	beq.n	c9b0 <_close_r+0x14>
    c9b8:	6023      	str	r3, [r4, #0]
    c9ba:	bd38      	pop	{r3, r4, r5, pc}
    c9bc:	200216d4 	.word	0x200216d4

0000c9c0 <_lseek_r>:
    c9c0:	b538      	push	{r3, r4, r5, lr}
    c9c2:	460c      	mov	r4, r1
    c9c4:	4d08      	ldr	r5, [pc, #32]	; (c9e8 <_lseek_r+0x28>)
    c9c6:	4684      	mov	ip, r0
    c9c8:	4611      	mov	r1, r2
    c9ca:	4620      	mov	r0, r4
    c9cc:	461a      	mov	r2, r3
    c9ce:	2300      	movs	r3, #0
    c9d0:	602b      	str	r3, [r5, #0]
    c9d2:	4664      	mov	r4, ip
    c9d4:	f7fb fe68 	bl	86a8 <_lseek>
    c9d8:	1c43      	adds	r3, r0, #1
    c9da:	d000      	beq.n	c9de <_lseek_r+0x1e>
    c9dc:	bd38      	pop	{r3, r4, r5, pc}
    c9de:	682b      	ldr	r3, [r5, #0]
    c9e0:	2b00      	cmp	r3, #0
    c9e2:	d0fb      	beq.n	c9dc <_lseek_r+0x1c>
    c9e4:	6023      	str	r3, [r4, #0]
    c9e6:	bd38      	pop	{r3, r4, r5, pc}
    c9e8:	200216d4 	.word	0x200216d4

0000c9ec <_read_r>:
    c9ec:	b538      	push	{r3, r4, r5, lr}
    c9ee:	460c      	mov	r4, r1
    c9f0:	4d08      	ldr	r5, [pc, #32]	; (ca14 <_read_r+0x28>)
    c9f2:	4684      	mov	ip, r0
    c9f4:	4611      	mov	r1, r2
    c9f6:	4620      	mov	r0, r4
    c9f8:	461a      	mov	r2, r3
    c9fa:	2300      	movs	r3, #0
    c9fc:	602b      	str	r3, [r5, #0]
    c9fe:	4664      	mov	r4, ip
    ca00:	f7fb fe44 	bl	868c <_read>
    ca04:	1c43      	adds	r3, r0, #1
    ca06:	d000      	beq.n	ca0a <_read_r+0x1e>
    ca08:	bd38      	pop	{r3, r4, r5, pc}
    ca0a:	682b      	ldr	r3, [r5, #0]
    ca0c:	2b00      	cmp	r3, #0
    ca0e:	d0fb      	beq.n	ca08 <_read_r+0x1c>
    ca10:	6023      	str	r3, [r4, #0]
    ca12:	bd38      	pop	{r3, r4, r5, pc}
    ca14:	200216d4 	.word	0x200216d4

0000ca18 <_sbrk_r>:
    ca18:	b538      	push	{r3, r4, r5, lr}
    ca1a:	4d07      	ldr	r5, [pc, #28]	; (ca38 <_sbrk_r+0x20>)
    ca1c:	2200      	movs	r2, #0
    ca1e:	4604      	mov	r4, r0
    ca20:	4608      	mov	r0, r1
    ca22:	602a      	str	r2, [r5, #0]
    ca24:	f7fb fe18 	bl	8658 <_sbrk>
    ca28:	1c43      	adds	r3, r0, #1
    ca2a:	d000      	beq.n	ca2e <_sbrk_r+0x16>
    ca2c:	bd38      	pop	{r3, r4, r5, pc}
    ca2e:	682b      	ldr	r3, [r5, #0]
    ca30:	2b00      	cmp	r3, #0
    ca32:	d0fb      	beq.n	ca2c <_sbrk_r+0x14>
    ca34:	6023      	str	r3, [r4, #0]
    ca36:	bd38      	pop	{r3, r4, r5, pc}
    ca38:	200216d4 	.word	0x200216d4

0000ca3c <_write_r>:
    ca3c:	b538      	push	{r3, r4, r5, lr}
    ca3e:	460c      	mov	r4, r1
    ca40:	4d08      	ldr	r5, [pc, #32]	; (ca64 <_write_r+0x28>)
    ca42:	4684      	mov	ip, r0
    ca44:	4611      	mov	r1, r2
    ca46:	4620      	mov	r0, r4
    ca48:	461a      	mov	r2, r3
    ca4a:	2300      	movs	r3, #0
    ca4c:	602b      	str	r3, [r5, #0]
    ca4e:	4664      	mov	r4, ip
    ca50:	f7fb f8b0 	bl	7bb4 <_write>
    ca54:	1c43      	adds	r3, r0, #1
    ca56:	d000      	beq.n	ca5a <_write_r+0x1e>
    ca58:	bd38      	pop	{r3, r4, r5, pc}
    ca5a:	682b      	ldr	r3, [r5, #0]
    ca5c:	2b00      	cmp	r3, #0
    ca5e:	d0fb      	beq.n	ca58 <_write_r+0x1c>
    ca60:	6023      	str	r3, [r4, #0]
    ca62:	bd38      	pop	{r3, r4, r5, pc}
    ca64:	200216d4 	.word	0x200216d4

0000ca68 <__errno>:
    ca68:	4b01      	ldr	r3, [pc, #4]	; (ca70 <__errno+0x8>)
    ca6a:	6818      	ldr	r0, [r3, #0]
    ca6c:	4770      	bx	lr
    ca6e:	bf00      	nop
    ca70:	20008e24 	.word	0x20008e24

0000ca74 <__libc_init_array>:
    ca74:	b570      	push	{r4, r5, r6, lr}
    ca76:	4e0d      	ldr	r6, [pc, #52]	; (caac <__libc_init_array+0x38>)
    ca78:	4d0d      	ldr	r5, [pc, #52]	; (cab0 <__libc_init_array+0x3c>)
    ca7a:	1b76      	subs	r6, r6, r5
    ca7c:	10b6      	asrs	r6, r6, #2
    ca7e:	d006      	beq.n	ca8e <__libc_init_array+0x1a>
    ca80:	2400      	movs	r4, #0
    ca82:	f855 3b04 	ldr.w	r3, [r5], #4
    ca86:	3401      	adds	r4, #1
    ca88:	4798      	blx	r3
    ca8a:	42a6      	cmp	r6, r4
    ca8c:	d1f9      	bne.n	ca82 <__libc_init_array+0xe>
    ca8e:	4e09      	ldr	r6, [pc, #36]	; (cab4 <__libc_init_array+0x40>)
    ca90:	4d09      	ldr	r5, [pc, #36]	; (cab8 <__libc_init_array+0x44>)
    ca92:	1b76      	subs	r6, r6, r5
    ca94:	f008 fbdc 	bl	15250 <___init_veneer>
    ca98:	10b6      	asrs	r6, r6, #2
    ca9a:	d006      	beq.n	caaa <__libc_init_array+0x36>
    ca9c:	2400      	movs	r4, #0
    ca9e:	f855 3b04 	ldr.w	r3, [r5], #4
    caa2:	3401      	adds	r4, #1
    caa4:	4798      	blx	r3
    caa6:	42a6      	cmp	r6, r4
    caa8:	d1f9      	bne.n	ca9e <__libc_init_array+0x2a>
    caaa:	bd70      	pop	{r4, r5, r6, pc}
    caac:	60002738 	.word	0x60002738
    cab0:	60002738 	.word	0x60002738
    cab4:	60002754 	.word	0x60002754
    cab8:	60002738 	.word	0x60002738

0000cabc <__retarget_lock_init_recursive>:
    cabc:	4770      	bx	lr
    cabe:	bf00      	nop

0000cac0 <__retarget_lock_close_recursive>:
    cac0:	4770      	bx	lr
    cac2:	bf00      	nop

0000cac4 <__retarget_lock_acquire_recursive>:
    cac4:	4770      	bx	lr
    cac6:	bf00      	nop

0000cac8 <__retarget_lock_release_recursive>:
    cac8:	4770      	bx	lr
    caca:	bf00      	nop
	...
    cae0:	eba2 0003 	sub.w	r0, r2, r3
    cae4:	4770      	bx	lr
    cae6:	bf00      	nop

0000cae8 <strcmp>:
    cae8:	7802      	ldrb	r2, [r0, #0]
    caea:	780b      	ldrb	r3, [r1, #0]
    caec:	2a01      	cmp	r2, #1
    caee:	bf28      	it	cs
    caf0:	429a      	cmpcs	r2, r3
    caf2:	d1f5      	bne.n	cae0 <__retarget_lock_release_recursive+0x18>
    caf4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    caf8:	ea40 0401 	orr.w	r4, r0, r1
    cafc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    cb00:	f06f 0c00 	mvn.w	ip, #0
    cb04:	ea4f 7244 	mov.w	r2, r4, lsl #29
    cb08:	b312      	cbz	r2, cb50 <strcmp+0x68>
    cb0a:	ea80 0401 	eor.w	r4, r0, r1
    cb0e:	f014 0f07 	tst.w	r4, #7
    cb12:	d16a      	bne.n	cbea <strcmp+0x102>
    cb14:	f000 0407 	and.w	r4, r0, #7
    cb18:	f020 0007 	bic.w	r0, r0, #7
    cb1c:	f004 0503 	and.w	r5, r4, #3
    cb20:	f021 0107 	bic.w	r1, r1, #7
    cb24:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    cb28:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    cb2c:	f014 0f04 	tst.w	r4, #4
    cb30:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    cb34:	fa0c f405 	lsl.w	r4, ip, r5
    cb38:	ea62 0204 	orn	r2, r2, r4
    cb3c:	ea66 0604 	orn	r6, r6, r4
    cb40:	d00a      	beq.n	cb58 <strcmp+0x70>
    cb42:	ea63 0304 	orn	r3, r3, r4
    cb46:	4662      	mov	r2, ip
    cb48:	ea67 0704 	orn	r7, r7, r4
    cb4c:	4666      	mov	r6, ip
    cb4e:	e003      	b.n	cb58 <strcmp+0x70>
    cb50:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    cb54:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    cb58:	fa82 f54c 	uadd8	r5, r2, ip
    cb5c:	ea82 0406 	eor.w	r4, r2, r6
    cb60:	faa4 f48c 	sel	r4, r4, ip
    cb64:	bb6c      	cbnz	r4, cbc2 <strcmp+0xda>
    cb66:	fa83 f54c 	uadd8	r5, r3, ip
    cb6a:	ea83 0507 	eor.w	r5, r3, r7
    cb6e:	faa5 f58c 	sel	r5, r5, ip
    cb72:	b995      	cbnz	r5, cb9a <strcmp+0xb2>
    cb74:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    cb78:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    cb7c:	fa82 f54c 	uadd8	r5, r2, ip
    cb80:	ea82 0406 	eor.w	r4, r2, r6
    cb84:	faa4 f48c 	sel	r4, r4, ip
    cb88:	fa83 f54c 	uadd8	r5, r3, ip
    cb8c:	ea83 0507 	eor.w	r5, r3, r7
    cb90:	faa5 f58c 	sel	r5, r5, ip
    cb94:	4325      	orrs	r5, r4
    cb96:	d0db      	beq.n	cb50 <strcmp+0x68>
    cb98:	b99c      	cbnz	r4, cbc2 <strcmp+0xda>
    cb9a:	ba2d      	rev	r5, r5
    cb9c:	fab5 f485 	clz	r4, r5
    cba0:	f024 0407 	bic.w	r4, r4, #7
    cba4:	fa27 f104 	lsr.w	r1, r7, r4
    cba8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    cbac:	fa23 f304 	lsr.w	r3, r3, r4
    cbb0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    cbb4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cbb8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    cbbc:	eba0 0001 	sub.w	r0, r0, r1
    cbc0:	4770      	bx	lr
    cbc2:	ba24      	rev	r4, r4
    cbc4:	fab4 f484 	clz	r4, r4
    cbc8:	f024 0407 	bic.w	r4, r4, #7
    cbcc:	fa26 f104 	lsr.w	r1, r6, r4
    cbd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    cbd4:	fa22 f204 	lsr.w	r2, r2, r4
    cbd8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    cbdc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cbe0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    cbe4:	eba0 0001 	sub.w	r0, r0, r1
    cbe8:	4770      	bx	lr
    cbea:	f014 0f03 	tst.w	r4, #3
    cbee:	d13c      	bne.n	cc6a <strcmp+0x182>
    cbf0:	f010 0403 	ands.w	r4, r0, #3
    cbf4:	d128      	bne.n	cc48 <strcmp+0x160>
    cbf6:	f850 2b08 	ldr.w	r2, [r0], #8
    cbfa:	f851 3b08 	ldr.w	r3, [r1], #8
    cbfe:	fa82 f54c 	uadd8	r5, r2, ip
    cc02:	ea82 0503 	eor.w	r5, r2, r3
    cc06:	faa5 f58c 	sel	r5, r5, ip
    cc0a:	b95d      	cbnz	r5, cc24 <strcmp+0x13c>
    cc0c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    cc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
    cc14:	fa82 f54c 	uadd8	r5, r2, ip
    cc18:	ea82 0503 	eor.w	r5, r2, r3
    cc1c:	faa5 f58c 	sel	r5, r5, ip
    cc20:	2d00      	cmp	r5, #0
    cc22:	d0e8      	beq.n	cbf6 <strcmp+0x10e>
    cc24:	ba2d      	rev	r5, r5
    cc26:	fab5 f485 	clz	r4, r5
    cc2a:	f024 0407 	bic.w	r4, r4, #7
    cc2e:	fa23 f104 	lsr.w	r1, r3, r4
    cc32:	fa22 f204 	lsr.w	r2, r2, r4
    cc36:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    cc3a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cc3e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    cc42:	eba0 0001 	sub.w	r0, r0, r1
    cc46:	4770      	bx	lr
    cc48:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    cc4c:	f020 0003 	bic.w	r0, r0, #3
    cc50:	f850 2b08 	ldr.w	r2, [r0], #8
    cc54:	f021 0103 	bic.w	r1, r1, #3
    cc58:	f851 3b08 	ldr.w	r3, [r1], #8
    cc5c:	fa0c f404 	lsl.w	r4, ip, r4
    cc60:	ea62 0204 	orn	r2, r2, r4
    cc64:	ea63 0304 	orn	r3, r3, r4
    cc68:	e7c9      	b.n	cbfe <strcmp+0x116>
    cc6a:	f010 0403 	ands.w	r4, r0, #3
    cc6e:	d01a      	beq.n	cca6 <strcmp+0x1be>
    cc70:	eba1 0104 	sub.w	r1, r1, r4
    cc74:	f020 0003 	bic.w	r0, r0, #3
    cc78:	07e4      	lsls	r4, r4, #31
    cc7a:	f850 2b04 	ldr.w	r2, [r0], #4
    cc7e:	d006      	beq.n	cc8e <strcmp+0x1a6>
    cc80:	d20f      	bcs.n	cca2 <strcmp+0x1ba>
    cc82:	788b      	ldrb	r3, [r1, #2]
    cc84:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    cc88:	1ae4      	subs	r4, r4, r3
    cc8a:	d106      	bne.n	cc9a <strcmp+0x1b2>
    cc8c:	b12b      	cbz	r3, cc9a <strcmp+0x1b2>
    cc8e:	78cb      	ldrb	r3, [r1, #3]
    cc90:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    cc94:	1ae4      	subs	r4, r4, r3
    cc96:	d100      	bne.n	cc9a <strcmp+0x1b2>
    cc98:	b91b      	cbnz	r3, cca2 <strcmp+0x1ba>
    cc9a:	4620      	mov	r0, r4
    cc9c:	f85d 4b10 	ldr.w	r4, [sp], #16
    cca0:	4770      	bx	lr
    cca2:	f101 0104 	add.w	r1, r1, #4
    cca6:	f850 2b04 	ldr.w	r2, [r0], #4
    ccaa:	07cc      	lsls	r4, r1, #31
    ccac:	f021 0103 	bic.w	r1, r1, #3
    ccb0:	f851 3b04 	ldr.w	r3, [r1], #4
    ccb4:	d848      	bhi.n	cd48 <strcmp+0x260>
    ccb6:	d224      	bcs.n	cd02 <strcmp+0x21a>
    ccb8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    ccbc:	fa82 f54c 	uadd8	r5, r2, ip
    ccc0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    ccc4:	faa5 f58c 	sel	r5, r5, ip
    ccc8:	d10a      	bne.n	cce0 <strcmp+0x1f8>
    ccca:	b965      	cbnz	r5, cce6 <strcmp+0x1fe>
    cccc:	f851 3b04 	ldr.w	r3, [r1], #4
    ccd0:	ea84 0402 	eor.w	r4, r4, r2
    ccd4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    ccd8:	d10e      	bne.n	ccf8 <strcmp+0x210>
    ccda:	f850 2b04 	ldr.w	r2, [r0], #4
    ccde:	e7eb      	b.n	ccb8 <strcmp+0x1d0>
    cce0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    cce4:	e055      	b.n	cd92 <strcmp+0x2aa>
    cce6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    ccea:	d14d      	bne.n	cd88 <strcmp+0x2a0>
    ccec:	7808      	ldrb	r0, [r1, #0]
    ccee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    ccf2:	f1c0 0000 	rsb	r0, r0, #0
    ccf6:	4770      	bx	lr
    ccf8:	ea4f 6212 	mov.w	r2, r2, lsr #24
    ccfc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    cd00:	e047      	b.n	cd92 <strcmp+0x2aa>
    cd02:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    cd06:	fa82 f54c 	uadd8	r5, r2, ip
    cd0a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    cd0e:	faa5 f58c 	sel	r5, r5, ip
    cd12:	d10a      	bne.n	cd2a <strcmp+0x242>
    cd14:	b965      	cbnz	r5, cd30 <strcmp+0x248>
    cd16:	f851 3b04 	ldr.w	r3, [r1], #4
    cd1a:	ea84 0402 	eor.w	r4, r4, r2
    cd1e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    cd22:	d10c      	bne.n	cd3e <strcmp+0x256>
    cd24:	f850 2b04 	ldr.w	r2, [r0], #4
    cd28:	e7eb      	b.n	cd02 <strcmp+0x21a>
    cd2a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    cd2e:	e030      	b.n	cd92 <strcmp+0x2aa>
    cd30:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    cd34:	d128      	bne.n	cd88 <strcmp+0x2a0>
    cd36:	880b      	ldrh	r3, [r1, #0]
    cd38:	ea4f 4212 	mov.w	r2, r2, lsr #16
    cd3c:	e029      	b.n	cd92 <strcmp+0x2aa>
    cd3e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    cd42:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    cd46:	e024      	b.n	cd92 <strcmp+0x2aa>
    cd48:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    cd4c:	fa82 f54c 	uadd8	r5, r2, ip
    cd50:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    cd54:	faa5 f58c 	sel	r5, r5, ip
    cd58:	d10a      	bne.n	cd70 <strcmp+0x288>
    cd5a:	b965      	cbnz	r5, cd76 <strcmp+0x28e>
    cd5c:	f851 3b04 	ldr.w	r3, [r1], #4
    cd60:	ea84 0402 	eor.w	r4, r4, r2
    cd64:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    cd68:	d109      	bne.n	cd7e <strcmp+0x296>
    cd6a:	f850 2b04 	ldr.w	r2, [r0], #4
    cd6e:	e7eb      	b.n	cd48 <strcmp+0x260>
    cd70:	ea4f 6313 	mov.w	r3, r3, lsr #24
    cd74:	e00d      	b.n	cd92 <strcmp+0x2aa>
    cd76:	f015 0fff 	tst.w	r5, #255	; 0xff
    cd7a:	d105      	bne.n	cd88 <strcmp+0x2a0>
    cd7c:	680b      	ldr	r3, [r1, #0]
    cd7e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    cd82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cd86:	e004      	b.n	cd92 <strcmp+0x2aa>
    cd88:	f04f 0000 	mov.w	r0, #0
    cd8c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    cd90:	4770      	bx	lr
    cd92:	ba12      	rev	r2, r2
    cd94:	ba1b      	rev	r3, r3
    cd96:	fa82 f44c 	uadd8	r4, r2, ip
    cd9a:	ea82 0403 	eor.w	r4, r2, r3
    cd9e:	faa4 f58c 	sel	r5, r4, ip
    cda2:	fab5 f485 	clz	r4, r5
    cda6:	fa02 f204 	lsl.w	r2, r2, r4
    cdaa:	fa03 f304 	lsl.w	r3, r3, r4
    cdae:	ea4f 6012 	mov.w	r0, r2, lsr #24
    cdb2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    cdb6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    cdba:	4770      	bx	lr
    cdbc:	0000      	movs	r0, r0
	...

0000cdc0 <memchr>:
    cdc0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cdc4:	2a10      	cmp	r2, #16
    cdc6:	db2b      	blt.n	ce20 <memchr+0x60>
    cdc8:	f010 0f07 	tst.w	r0, #7
    cdcc:	d008      	beq.n	cde0 <memchr+0x20>
    cdce:	f810 3b01 	ldrb.w	r3, [r0], #1
    cdd2:	3a01      	subs	r2, #1
    cdd4:	428b      	cmp	r3, r1
    cdd6:	d02d      	beq.n	ce34 <memchr+0x74>
    cdd8:	f010 0f07 	tst.w	r0, #7
    cddc:	b342      	cbz	r2, ce30 <memchr+0x70>
    cdde:	d1f6      	bne.n	cdce <memchr+0xe>
    cde0:	b4f0      	push	{r4, r5, r6, r7}
    cde2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    cde6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    cdea:	f022 0407 	bic.w	r4, r2, #7
    cdee:	f07f 0700 	mvns.w	r7, #0
    cdf2:	2300      	movs	r3, #0
    cdf4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    cdf8:	3c08      	subs	r4, #8
    cdfa:	ea85 0501 	eor.w	r5, r5, r1
    cdfe:	ea86 0601 	eor.w	r6, r6, r1
    ce02:	fa85 f547 	uadd8	r5, r5, r7
    ce06:	faa3 f587 	sel	r5, r3, r7
    ce0a:	fa86 f647 	uadd8	r6, r6, r7
    ce0e:	faa5 f687 	sel	r6, r5, r7
    ce12:	b98e      	cbnz	r6, ce38 <memchr+0x78>
    ce14:	d1ee      	bne.n	cdf4 <memchr+0x34>
    ce16:	bcf0      	pop	{r4, r5, r6, r7}
    ce18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ce1c:	f002 0207 	and.w	r2, r2, #7
    ce20:	b132      	cbz	r2, ce30 <memchr+0x70>
    ce22:	f810 3b01 	ldrb.w	r3, [r0], #1
    ce26:	3a01      	subs	r2, #1
    ce28:	ea83 0301 	eor.w	r3, r3, r1
    ce2c:	b113      	cbz	r3, ce34 <memchr+0x74>
    ce2e:	d1f8      	bne.n	ce22 <memchr+0x62>
    ce30:	2000      	movs	r0, #0
    ce32:	4770      	bx	lr
    ce34:	3801      	subs	r0, #1
    ce36:	4770      	bx	lr
    ce38:	2d00      	cmp	r5, #0
    ce3a:	bf06      	itte	eq
    ce3c:	4635      	moveq	r5, r6
    ce3e:	3803      	subeq	r0, #3
    ce40:	3807      	subne	r0, #7
    ce42:	f015 0f01 	tst.w	r5, #1
    ce46:	d107      	bne.n	ce58 <memchr+0x98>
    ce48:	3001      	adds	r0, #1
    ce4a:	f415 7f80 	tst.w	r5, #256	; 0x100
    ce4e:	bf02      	ittt	eq
    ce50:	3001      	addeq	r0, #1
    ce52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    ce56:	3001      	addeq	r0, #1
    ce58:	bcf0      	pop	{r4, r5, r6, r7}
    ce5a:	3801      	subs	r0, #1
    ce5c:	4770      	bx	lr
    ce5e:	bf00      	nop
	...

0000ce80 <strlen>:
    ce80:	f890 f000 	pld	[r0]
    ce84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    ce88:	f020 0107 	bic.w	r1, r0, #7
    ce8c:	f06f 0c00 	mvn.w	ip, #0
    ce90:	f010 0407 	ands.w	r4, r0, #7
    ce94:	f891 f020 	pld	[r1, #32]
    ce98:	f040 8049 	bne.w	cf2e <strlen+0xae>
    ce9c:	f04f 0400 	mov.w	r4, #0
    cea0:	f06f 0007 	mvn.w	r0, #7
    cea4:	e9d1 2300 	ldrd	r2, r3, [r1]
    cea8:	f891 f040 	pld	[r1, #64]	; 0x40
    ceac:	f100 0008 	add.w	r0, r0, #8
    ceb0:	fa82 f24c 	uadd8	r2, r2, ip
    ceb4:	faa4 f28c 	sel	r2, r4, ip
    ceb8:	fa83 f34c 	uadd8	r3, r3, ip
    cebc:	faa2 f38c 	sel	r3, r2, ip
    cec0:	bb4b      	cbnz	r3, cf16 <strlen+0x96>
    cec2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    cec6:	fa82 f24c 	uadd8	r2, r2, ip
    ceca:	f100 0008 	add.w	r0, r0, #8
    cece:	faa4 f28c 	sel	r2, r4, ip
    ced2:	fa83 f34c 	uadd8	r3, r3, ip
    ced6:	faa2 f38c 	sel	r3, r2, ip
    ceda:	b9e3      	cbnz	r3, cf16 <strlen+0x96>
    cedc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    cee0:	fa82 f24c 	uadd8	r2, r2, ip
    cee4:	f100 0008 	add.w	r0, r0, #8
    cee8:	faa4 f28c 	sel	r2, r4, ip
    ceec:	fa83 f34c 	uadd8	r3, r3, ip
    cef0:	faa2 f38c 	sel	r3, r2, ip
    cef4:	b97b      	cbnz	r3, cf16 <strlen+0x96>
    cef6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    cefa:	f101 0120 	add.w	r1, r1, #32
    cefe:	fa82 f24c 	uadd8	r2, r2, ip
    cf02:	f100 0008 	add.w	r0, r0, #8
    cf06:	faa4 f28c 	sel	r2, r4, ip
    cf0a:	fa83 f34c 	uadd8	r3, r3, ip
    cf0e:	faa2 f38c 	sel	r3, r2, ip
    cf12:	2b00      	cmp	r3, #0
    cf14:	d0c6      	beq.n	cea4 <strlen+0x24>
    cf16:	2a00      	cmp	r2, #0
    cf18:	bf04      	itt	eq
    cf1a:	3004      	addeq	r0, #4
    cf1c:	461a      	moveq	r2, r3
    cf1e:	ba12      	rev	r2, r2
    cf20:	fab2 f282 	clz	r2, r2
    cf24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    cf28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    cf2c:	4770      	bx	lr
    cf2e:	e9d1 2300 	ldrd	r2, r3, [r1]
    cf32:	f004 0503 	and.w	r5, r4, #3
    cf36:	f1c4 0000 	rsb	r0, r4, #0
    cf3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    cf3e:	f014 0f04 	tst.w	r4, #4
    cf42:	f891 f040 	pld	[r1, #64]	; 0x40
    cf46:	fa0c f505 	lsl.w	r5, ip, r5
    cf4a:	ea62 0205 	orn	r2, r2, r5
    cf4e:	bf1c      	itt	ne
    cf50:	ea63 0305 	ornne	r3, r3, r5
    cf54:	4662      	movne	r2, ip
    cf56:	f04f 0400 	mov.w	r4, #0
    cf5a:	e7a9      	b.n	ceb0 <strlen+0x30>
    cf5c:	0000      	movs	r0, r0
	...

0000cf60 <nan>:
    cf60:	ed9f 0b01 	vldr	d0, [pc, #4]	; cf68 <nan+0x8>
    cf64:	4770      	bx	lr
    cf66:	bf00      	nop
    cf68:	00000000 	.word	0x00000000
    cf6c:	7ff80000 	.word	0x7ff80000

0000cf70 <nanf>:
    cf70:	ed9f 0a01 	vldr	s0, [pc, #4]	; cf78 <nanf+0x8>
    cf74:	4770      	bx	lr
    cf76:	bf00      	nop
    cf78:	7fc00000 	.word	0x7fc00000

0000cf7c <__register_exitproc>:
    cf7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf80:	f8df a07c 	ldr.w	sl, [pc, #124]	; d000 <__register_exitproc+0x84>
    cf84:	4606      	mov	r6, r0
    cf86:	f8da 0000 	ldr.w	r0, [sl]
    cf8a:	4698      	mov	r8, r3
    cf8c:	460f      	mov	r7, r1
    cf8e:	4691      	mov	r9, r2
    cf90:	f7ff fd98 	bl	cac4 <__retarget_lock_acquire_recursive>
    cf94:	4b18      	ldr	r3, [pc, #96]	; (cff8 <__register_exitproc+0x7c>)
    cf96:	681c      	ldr	r4, [r3, #0]
    cf98:	b324      	cbz	r4, cfe4 <__register_exitproc+0x68>
    cf9a:	6865      	ldr	r5, [r4, #4]
    cf9c:	2d1f      	cmp	r5, #31
    cf9e:	dc24      	bgt.n	cfea <__register_exitproc+0x6e>
    cfa0:	b95e      	cbnz	r6, cfba <__register_exitproc+0x3e>
    cfa2:	1c6b      	adds	r3, r5, #1
    cfa4:	3502      	adds	r5, #2
    cfa6:	f8da 0000 	ldr.w	r0, [sl]
    cfaa:	6063      	str	r3, [r4, #4]
    cfac:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    cfb0:	f7ff fd8a 	bl	cac8 <__retarget_lock_release_recursive>
    cfb4:	2000      	movs	r0, #0
    cfb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cfba:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    cfbe:	2301      	movs	r3, #1
    cfc0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    cfc4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    cfc8:	40ab      	lsls	r3, r5
    cfca:	431a      	orrs	r2, r3
    cfcc:	2e02      	cmp	r6, #2
    cfce:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    cfd2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    cfd6:	d1e4      	bne.n	cfa2 <__register_exitproc+0x26>
    cfd8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    cfdc:	431a      	orrs	r2, r3
    cfde:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    cfe2:	e7de      	b.n	cfa2 <__register_exitproc+0x26>
    cfe4:	4c05      	ldr	r4, [pc, #20]	; (cffc <__register_exitproc+0x80>)
    cfe6:	601c      	str	r4, [r3, #0]
    cfe8:	e7d7      	b.n	cf9a <__register_exitproc+0x1e>
    cfea:	f8da 0000 	ldr.w	r0, [sl]
    cfee:	f7ff fd6b 	bl	cac8 <__retarget_lock_release_recursive>
    cff2:	f04f 30ff 	mov.w	r0, #4294967295
    cff6:	e7de      	b.n	cfb6 <__register_exitproc+0x3a>
    cff8:	2002118c 	.word	0x2002118c
    cffc:	20021190 	.word	0x20021190
    d000:	20008890 	.word	0x20008890

0000d004 <_malloc_trim_r>:
    d004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d006:	4f24      	ldr	r7, [pc, #144]	; (d098 <_malloc_trim_r+0x94>)
    d008:	460c      	mov	r4, r1
    d00a:	4606      	mov	r6, r0
    d00c:	f7fd ff7e 	bl	af0c <__malloc_lock>
    d010:	68bb      	ldr	r3, [r7, #8]
    d012:	685d      	ldr	r5, [r3, #4]
    d014:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    d018:	310f      	adds	r1, #15
    d01a:	f025 0503 	bic.w	r5, r5, #3
    d01e:	194b      	adds	r3, r1, r5
    d020:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    d024:	f023 030f 	bic.w	r3, r3, #15
    d028:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    d02c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    d030:	db07      	blt.n	d042 <_malloc_trim_r+0x3e>
    d032:	2100      	movs	r1, #0
    d034:	4630      	mov	r0, r6
    d036:	f7ff fcef 	bl	ca18 <_sbrk_r>
    d03a:	68bb      	ldr	r3, [r7, #8]
    d03c:	442b      	add	r3, r5
    d03e:	4298      	cmp	r0, r3
    d040:	d004      	beq.n	d04c <_malloc_trim_r+0x48>
    d042:	4630      	mov	r0, r6
    d044:	f7fd ff68 	bl	af18 <__malloc_unlock>
    d048:	2000      	movs	r0, #0
    d04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d04c:	4261      	negs	r1, r4
    d04e:	4630      	mov	r0, r6
    d050:	f7ff fce2 	bl	ca18 <_sbrk_r>
    d054:	3001      	adds	r0, #1
    d056:	d00d      	beq.n	d074 <_malloc_trim_r+0x70>
    d058:	4a10      	ldr	r2, [pc, #64]	; (d09c <_malloc_trim_r+0x98>)
    d05a:	68bb      	ldr	r3, [r7, #8]
    d05c:	1b2d      	subs	r5, r5, r4
    d05e:	f045 0501 	orr.w	r5, r5, #1
    d062:	605d      	str	r5, [r3, #4]
    d064:	6813      	ldr	r3, [r2, #0]
    d066:	4630      	mov	r0, r6
    d068:	1b1b      	subs	r3, r3, r4
    d06a:	6013      	str	r3, [r2, #0]
    d06c:	f7fd ff54 	bl	af18 <__malloc_unlock>
    d070:	2001      	movs	r0, #1
    d072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d074:	2100      	movs	r1, #0
    d076:	4630      	mov	r0, r6
    d078:	f7ff fcce 	bl	ca18 <_sbrk_r>
    d07c:	68ba      	ldr	r2, [r7, #8]
    d07e:	1a83      	subs	r3, r0, r2
    d080:	2b0f      	cmp	r3, #15
    d082:	ddde      	ble.n	d042 <_malloc_trim_r+0x3e>
    d084:	f043 0301 	orr.w	r3, r3, #1
    d088:	6053      	str	r3, [r2, #4]
    d08a:	4b05      	ldr	r3, [pc, #20]	; (d0a0 <_malloc_trim_r+0x9c>)
    d08c:	4903      	ldr	r1, [pc, #12]	; (d09c <_malloc_trim_r+0x98>)
    d08e:	681b      	ldr	r3, [r3, #0]
    d090:	1ac0      	subs	r0, r0, r3
    d092:	6008      	str	r0, [r1, #0]
    d094:	e7d5      	b.n	d042 <_malloc_trim_r+0x3e>
    d096:	bf00      	nop
    d098:	20008a08 	.word	0x20008a08
    d09c:	2002132c 	.word	0x2002132c
    d0a0:	20008e10 	.word	0x20008e10

0000d0a4 <_free_r>:
    d0a4:	2900      	cmp	r1, #0
    d0a6:	d061      	beq.n	d16c <_free_r+0xc8>
    d0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0aa:	460c      	mov	r4, r1
    d0ac:	4606      	mov	r6, r0
    d0ae:	f7fd ff2d 	bl	af0c <__malloc_lock>
    d0b2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    d0b6:	4f7b      	ldr	r7, [pc, #492]	; (d2a4 <_free_r+0x200>)
    d0b8:	f1a4 0508 	sub.w	r5, r4, #8
    d0bc:	f022 0101 	bic.w	r1, r2, #1
    d0c0:	eb05 0c01 	add.w	ip, r5, r1
    d0c4:	68b8      	ldr	r0, [r7, #8]
    d0c6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    d0ca:	4560      	cmp	r0, ip
    d0cc:	f023 0303 	bic.w	r3, r3, #3
    d0d0:	f000 808b 	beq.w	d1ea <_free_r+0x146>
    d0d4:	07d2      	lsls	r2, r2, #31
    d0d6:	f8cc 3004 	str.w	r3, [ip, #4]
    d0da:	d432      	bmi.n	d142 <_free_r+0x9e>
    d0dc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    d0e0:	1aad      	subs	r5, r5, r2
    d0e2:	4411      	add	r1, r2
    d0e4:	68aa      	ldr	r2, [r5, #8]
    d0e6:	f107 0008 	add.w	r0, r7, #8
    d0ea:	4282      	cmp	r2, r0
    d0ec:	d06a      	beq.n	d1c4 <_free_r+0x120>
    d0ee:	eb0c 0403 	add.w	r4, ip, r3
    d0f2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    d0f6:	68ec      	ldr	r4, [r5, #12]
    d0f8:	60d4      	str	r4, [r2, #12]
    d0fa:	f01e 0f01 	tst.w	lr, #1
    d0fe:	60a2      	str	r2, [r4, #8]
    d100:	f000 8097 	beq.w	d232 <_free_r+0x18e>
    d104:	f041 0301 	orr.w	r3, r1, #1
    d108:	606b      	str	r3, [r5, #4]
    d10a:	f8cc 1000 	str.w	r1, [ip]
    d10e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d112:	d235      	bcs.n	d180 <_free_r+0xdc>
    d114:	6878      	ldr	r0, [r7, #4]
    d116:	08cb      	lsrs	r3, r1, #3
    d118:	2201      	movs	r2, #1
    d11a:	0949      	lsrs	r1, r1, #5
    d11c:	3301      	adds	r3, #1
    d11e:	408a      	lsls	r2, r1
    d120:	4302      	orrs	r2, r0
    d122:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    d126:	607a      	str	r2, [r7, #4]
    d128:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    d12c:	3a08      	subs	r2, #8
    d12e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    d132:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    d136:	60cd      	str	r5, [r1, #12]
    d138:	4630      	mov	r0, r6
    d13a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d13e:	f7fd beeb 	b.w	af18 <__malloc_unlock>
    d142:	eb0c 0203 	add.w	r2, ip, r3
    d146:	6852      	ldr	r2, [r2, #4]
    d148:	07d0      	lsls	r0, r2, #31
    d14a:	d410      	bmi.n	d16e <_free_r+0xca>
    d14c:	4419      	add	r1, r3
    d14e:	f107 0008 	add.w	r0, r7, #8
    d152:	f8dc 3008 	ldr.w	r3, [ip, #8]
    d156:	4283      	cmp	r3, r0
    d158:	d073      	beq.n	d242 <_free_r+0x19e>
    d15a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d15e:	60da      	str	r2, [r3, #12]
    d160:	6093      	str	r3, [r2, #8]
    d162:	f041 0301 	orr.w	r3, r1, #1
    d166:	606b      	str	r3, [r5, #4]
    d168:	5069      	str	r1, [r5, r1]
    d16a:	e7d0      	b.n	d10e <_free_r+0x6a>
    d16c:	4770      	bx	lr
    d16e:	f041 0301 	orr.w	r3, r1, #1
    d172:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d176:	f844 3c04 	str.w	r3, [r4, #-4]
    d17a:	f8cc 1000 	str.w	r1, [ip]
    d17e:	d3c9      	bcc.n	d114 <_free_r+0x70>
    d180:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    d184:	ea4f 2351 	mov.w	r3, r1, lsr #9
    d188:	d248      	bcs.n	d21c <_free_r+0x178>
    d18a:	098b      	lsrs	r3, r1, #6
    d18c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    d190:	f103 0238 	add.w	r2, r3, #56	; 0x38
    d194:	00c3      	lsls	r3, r0, #3
    d196:	18f8      	adds	r0, r7, r3
    d198:	58fb      	ldr	r3, [r7, r3]
    d19a:	3808      	subs	r0, #8
    d19c:	4298      	cmp	r0, r3
    d19e:	d059      	beq.n	d254 <_free_r+0x1b0>
    d1a0:	685a      	ldr	r2, [r3, #4]
    d1a2:	f022 0203 	bic.w	r2, r2, #3
    d1a6:	428a      	cmp	r2, r1
    d1a8:	d902      	bls.n	d1b0 <_free_r+0x10c>
    d1aa:	689b      	ldr	r3, [r3, #8]
    d1ac:	4298      	cmp	r0, r3
    d1ae:	d1f7      	bne.n	d1a0 <_free_r+0xfc>
    d1b0:	68d8      	ldr	r0, [r3, #12]
    d1b2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    d1b6:	6085      	str	r5, [r0, #8]
    d1b8:	60dd      	str	r5, [r3, #12]
    d1ba:	4630      	mov	r0, r6
    d1bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d1c0:	f7fd beaa 	b.w	af18 <__malloc_unlock>
    d1c4:	eb0c 0203 	add.w	r2, ip, r3
    d1c8:	6852      	ldr	r2, [r2, #4]
    d1ca:	07d2      	lsls	r2, r2, #31
    d1cc:	d463      	bmi.n	d296 <_free_r+0x1f2>
    d1ce:	440b      	add	r3, r1
    d1d0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    d1d4:	60ca      	str	r2, [r1, #12]
    d1d6:	6091      	str	r1, [r2, #8]
    d1d8:	f043 0201 	orr.w	r2, r3, #1
    d1dc:	606a      	str	r2, [r5, #4]
    d1de:	4630      	mov	r0, r6
    d1e0:	50eb      	str	r3, [r5, r3]
    d1e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d1e6:	f7fd be97 	b.w	af18 <__malloc_unlock>
    d1ea:	440b      	add	r3, r1
    d1ec:	07d1      	lsls	r1, r2, #31
    d1ee:	d407      	bmi.n	d200 <_free_r+0x15c>
    d1f0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    d1f4:	1aad      	subs	r5, r5, r2
    d1f6:	4413      	add	r3, r2
    d1f8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    d1fc:	60ca      	str	r2, [r1, #12]
    d1fe:	6091      	str	r1, [r2, #8]
    d200:	f043 0201 	orr.w	r2, r3, #1
    d204:	606a      	str	r2, [r5, #4]
    d206:	4a28      	ldr	r2, [pc, #160]	; (d2a8 <_free_r+0x204>)
    d208:	60bd      	str	r5, [r7, #8]
    d20a:	6812      	ldr	r2, [r2, #0]
    d20c:	429a      	cmp	r2, r3
    d20e:	d893      	bhi.n	d138 <_free_r+0x94>
    d210:	4b26      	ldr	r3, [pc, #152]	; (d2ac <_free_r+0x208>)
    d212:	4630      	mov	r0, r6
    d214:	6819      	ldr	r1, [r3, #0]
    d216:	f7ff fef5 	bl	d004 <_malloc_trim_r>
    d21a:	e78d      	b.n	d138 <_free_r+0x94>
    d21c:	2b14      	cmp	r3, #20
    d21e:	d90a      	bls.n	d236 <_free_r+0x192>
    d220:	2b54      	cmp	r3, #84	; 0x54
    d222:	d81f      	bhi.n	d264 <_free_r+0x1c0>
    d224:	0b0b      	lsrs	r3, r1, #12
    d226:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    d22a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    d22e:	00c3      	lsls	r3, r0, #3
    d230:	e7b1      	b.n	d196 <_free_r+0xf2>
    d232:	4419      	add	r1, r3
    d234:	e78d      	b.n	d152 <_free_r+0xae>
    d236:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    d23a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    d23e:	00c3      	lsls	r3, r0, #3
    d240:	e7a9      	b.n	d196 <_free_r+0xf2>
    d242:	f041 0301 	orr.w	r3, r1, #1
    d246:	e9c7 5504 	strd	r5, r5, [r7, #16]
    d24a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    d24e:	606b      	str	r3, [r5, #4]
    d250:	5069      	str	r1, [r5, r1]
    d252:	e771      	b.n	d138 <_free_r+0x94>
    d254:	6879      	ldr	r1, [r7, #4]
    d256:	1092      	asrs	r2, r2, #2
    d258:	2401      	movs	r4, #1
    d25a:	fa04 f202 	lsl.w	r2, r4, r2
    d25e:	430a      	orrs	r2, r1
    d260:	607a      	str	r2, [r7, #4]
    d262:	e7a6      	b.n	d1b2 <_free_r+0x10e>
    d264:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d268:	d806      	bhi.n	d278 <_free_r+0x1d4>
    d26a:	0bcb      	lsrs	r3, r1, #15
    d26c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    d270:	f103 0277 	add.w	r2, r3, #119	; 0x77
    d274:	00c3      	lsls	r3, r0, #3
    d276:	e78e      	b.n	d196 <_free_r+0xf2>
    d278:	f240 5254 	movw	r2, #1364	; 0x554
    d27c:	4293      	cmp	r3, r2
    d27e:	d806      	bhi.n	d28e <_free_r+0x1ea>
    d280:	0c8b      	lsrs	r3, r1, #18
    d282:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    d286:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    d28a:	00c3      	lsls	r3, r0, #3
    d28c:	e783      	b.n	d196 <_free_r+0xf2>
    d28e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    d292:	227e      	movs	r2, #126	; 0x7e
    d294:	e77f      	b.n	d196 <_free_r+0xf2>
    d296:	f041 0301 	orr.w	r3, r1, #1
    d29a:	606b      	str	r3, [r5, #4]
    d29c:	f8cc 1000 	str.w	r1, [ip]
    d2a0:	e74a      	b.n	d138 <_free_r+0x94>
    d2a2:	bf00      	nop
    d2a4:	20008a08 	.word	0x20008a08
    d2a8:	20008e14 	.word	0x20008e14
    d2ac:	2002135c 	.word	0x2002135c

0000d2b0 <rshift>:
    d2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2b4:	6904      	ldr	r4, [r0, #16]
    d2b6:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    d2ba:	dd2f      	ble.n	d31c <rshift+0x6c>
    d2bc:	f100 0e14 	add.w	lr, r0, #20
    d2c0:	114e      	asrs	r6, r1, #5
    d2c2:	f011 0c1f 	ands.w	ip, r1, #31
    d2c6:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    d2ca:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    d2ce:	d02b      	beq.n	d328 <rshift+0x78>
    d2d0:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    d2d4:	3304      	adds	r3, #4
    d2d6:	429d      	cmp	r5, r3
    d2d8:	fa21 f10c 	lsr.w	r1, r1, ip
    d2dc:	f1cc 0820 	rsb	r8, ip, #32
    d2e0:	d918      	bls.n	d314 <rshift+0x64>
    d2e2:	4677      	mov	r7, lr
    d2e4:	681a      	ldr	r2, [r3, #0]
    d2e6:	fa02 f208 	lsl.w	r2, r2, r8
    d2ea:	430a      	orrs	r2, r1
    d2ec:	f847 2b04 	str.w	r2, [r7], #4
    d2f0:	f853 1b04 	ldr.w	r1, [r3], #4
    d2f4:	429d      	cmp	r5, r3
    d2f6:	fa21 f10c 	lsr.w	r1, r1, ip
    d2fa:	d8f3      	bhi.n	d2e4 <rshift+0x34>
    d2fc:	1ba3      	subs	r3, r4, r6
    d2fe:	009b      	lsls	r3, r3, #2
    d300:	3b05      	subs	r3, #5
    d302:	089b      	lsrs	r3, r3, #2
    d304:	3301      	adds	r3, #1
    d306:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    d30a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    d30e:	b1c9      	cbz	r1, d344 <rshift+0x94>
    d310:	3404      	adds	r4, #4
    d312:	e017      	b.n	d344 <rshift+0x94>
    d314:	6141      	str	r1, [r0, #20]
    d316:	4674      	mov	r4, lr
    d318:	2900      	cmp	r1, #0
    d31a:	d1f9      	bne.n	d310 <rshift+0x60>
    d31c:	2300      	movs	r3, #0
    d31e:	6103      	str	r3, [r0, #16]
    d320:	2300      	movs	r3, #0
    d322:	6143      	str	r3, [r0, #20]
    d324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d328:	429d      	cmp	r5, r3
    d32a:	bf88      	it	hi
    d32c:	f100 0210 	addhi.w	r2, r0, #16
    d330:	d9f4      	bls.n	d31c <rshift+0x6c>
    d332:	f853 1b04 	ldr.w	r1, [r3], #4
    d336:	f842 1f04 	str.w	r1, [r2, #4]!
    d33a:	429d      	cmp	r5, r3
    d33c:	d8f9      	bhi.n	d332 <rshift+0x82>
    d33e:	1ba4      	subs	r4, r4, r6
    d340:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    d344:	eba4 030e 	sub.w	r3, r4, lr
    d348:	109b      	asrs	r3, r3, #2
    d34a:	4574      	cmp	r4, lr
    d34c:	6103      	str	r3, [r0, #16]
    d34e:	d0e7      	beq.n	d320 <rshift+0x70>
    d350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d354 <__gethex>:
    d354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d358:	ed2d 8b02 	vpush	{d8}
    d35c:	680c      	ldr	r4, [r1, #0]
    d35e:	468b      	mov	fp, r1
    d360:	78a1      	ldrb	r1, [r4, #2]
    d362:	b085      	sub	sp, #20
    d364:	2930      	cmp	r1, #48	; 0x30
    d366:	ee08 0a10 	vmov	s16, r0
    d36a:	4692      	mov	sl, r2
    d36c:	9302      	str	r3, [sp, #8]
    d36e:	f040 81ce 	bne.w	d70e <__gethex+0x3ba>
    d372:	f06f 0001 	mvn.w	r0, #1
    d376:	1b00      	subs	r0, r0, r4
    d378:	1ce2      	adds	r2, r4, #3
    d37a:	1883      	adds	r3, r0, r2
    d37c:	4614      	mov	r4, r2
    d37e:	f812 1b01 	ldrb.w	r1, [r2], #1
    d382:	2930      	cmp	r1, #48	; 0x30
    d384:	d0f9      	beq.n	d37a <__gethex+0x26>
    d386:	f8df 8300 	ldr.w	r8, [pc, #768]	; d688 <__gethex+0x334>
    d38a:	f818 2001 	ldrb.w	r2, [r8, r1]
    d38e:	2a00      	cmp	r2, #0
    d390:	f000 80e5 	beq.w	d55e <__gethex+0x20a>
    d394:	7822      	ldrb	r2, [r4, #0]
    d396:	2700      	movs	r7, #0
    d398:	f818 2002 	ldrb.w	r2, [r8, r2]
    d39c:	463d      	mov	r5, r7
    d39e:	4626      	mov	r6, r4
    d3a0:	b12a      	cbz	r2, d3ae <__gethex+0x5a>
    d3a2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    d3a6:	f818 2002 	ldrb.w	r2, [r8, r2]
    d3aa:	2a00      	cmp	r2, #0
    d3ac:	d1f9      	bne.n	d3a2 <__gethex+0x4e>
    d3ae:	49b5      	ldr	r1, [pc, #724]	; (d684 <__gethex+0x330>)
    d3b0:	9301      	str	r3, [sp, #4]
    d3b2:	2201      	movs	r2, #1
    d3b4:	4630      	mov	r0, r6
    d3b6:	f7ff fa73 	bl	c8a0 <strncmp>
    d3ba:	9b01      	ldr	r3, [sp, #4]
    d3bc:	4681      	mov	r9, r0
    d3be:	2800      	cmp	r0, #0
    d3c0:	d04d      	beq.n	d45e <__gethex+0x10a>
    d3c2:	2d00      	cmp	r5, #0
    d3c4:	d14e      	bne.n	d464 <__gethex+0x110>
    d3c6:	7832      	ldrb	r2, [r6, #0]
    d3c8:	46a9      	mov	r9, r5
    d3ca:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    d3ce:	2a50      	cmp	r2, #80	; 0x50
    d3d0:	4635      	mov	r5, r6
    d3d2:	d050      	beq.n	d476 <__gethex+0x122>
    d3d4:	f8cb 6000 	str.w	r6, [fp]
    d3d8:	2f00      	cmp	r7, #0
    d3da:	d169      	bne.n	d4b0 <__gethex+0x15c>
    d3dc:	1b2b      	subs	r3, r5, r4
    d3de:	3b01      	subs	r3, #1
    d3e0:	2b07      	cmp	r3, #7
    d3e2:	4639      	mov	r1, r7
    d3e4:	dd04      	ble.n	d3f0 <__gethex+0x9c>
    d3e6:	105b      	asrs	r3, r3, #1
    d3e8:	2b07      	cmp	r3, #7
    d3ea:	f101 0101 	add.w	r1, r1, #1
    d3ee:	dcfa      	bgt.n	d3e6 <__gethex+0x92>
    d3f0:	ee18 0a10 	vmov	r0, s16
    d3f4:	f000 fb82 	bl	dafc <_Balloc>
    d3f8:	4683      	mov	fp, r0
    d3fa:	2800      	cmp	r0, #0
    d3fc:	f000 8266 	beq.w	d8cc <__gethex+0x578>
    d400:	f100 0614 	add.w	r6, r0, #20
    d404:	42ac      	cmp	r4, r5
    d406:	9601      	str	r6, [sp, #4]
    d408:	f080 81d2 	bcs.w	d7b0 <__gethex+0x45c>
    d40c:	2700      	movs	r7, #0
    d40e:	f8cd 900c 	str.w	r9, [sp, #12]
    d412:	499c      	ldr	r1, [pc, #624]	; (d684 <__gethex+0x330>)
    d414:	46a1      	mov	r9, r4
    d416:	463c      	mov	r4, r7
    d418:	e00c      	b.n	d434 <__gethex+0xe0>
    d41a:	2f20      	cmp	r7, #32
    d41c:	d019      	beq.n	d452 <__gethex+0xfe>
    d41e:	4638      	mov	r0, r7
    d420:	3704      	adds	r7, #4
    d422:	782a      	ldrb	r2, [r5, #0]
    d424:	f818 2002 	ldrb.w	r2, [r8, r2]
    d428:	f002 020f 	and.w	r2, r2, #15
    d42c:	4082      	lsls	r2, r0
    d42e:	4314      	orrs	r4, r2
    d430:	454d      	cmp	r5, r9
    d432:	d047      	beq.n	d4c4 <__gethex+0x170>
    d434:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    d438:	2a2e      	cmp	r2, #46	; 0x2e
    d43a:	d1ee      	bne.n	d41a <__gethex+0xc6>
    d43c:	454d      	cmp	r5, r9
    d43e:	d3ec      	bcc.n	d41a <__gethex+0xc6>
    d440:	2201      	movs	r2, #1
    d442:	4628      	mov	r0, r5
    d444:	f7ff fa2c 	bl	c8a0 <strncmp>
    d448:	498e      	ldr	r1, [pc, #568]	; (d684 <__gethex+0x330>)
    d44a:	2800      	cmp	r0, #0
    d44c:	d0f0      	beq.n	d430 <__gethex+0xdc>
    d44e:	2f20      	cmp	r7, #32
    d450:	d1e5      	bne.n	d41e <__gethex+0xca>
    d452:	2000      	movs	r0, #0
    d454:	f846 4b04 	str.w	r4, [r6], #4
    d458:	2704      	movs	r7, #4
    d45a:	4604      	mov	r4, r0
    d45c:	e7e1      	b.n	d422 <__gethex+0xce>
    d45e:	2d00      	cmp	r5, #0
    d460:	f000 8142 	beq.w	d6e8 <__gethex+0x394>
    d464:	7832      	ldrb	r2, [r6, #0]
    d466:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    d46a:	1bad      	subs	r5, r5, r6
    d46c:	2a50      	cmp	r2, #80	; 0x50
    d46e:	ea4f 0985 	mov.w	r9, r5, lsl #2
    d472:	4635      	mov	r5, r6
    d474:	d1ae      	bne.n	d3d4 <__gethex+0x80>
    d476:	786a      	ldrb	r2, [r5, #1]
    d478:	2a2b      	cmp	r2, #43	; 0x2b
    d47a:	f000 8125 	beq.w	d6c8 <__gethex+0x374>
    d47e:	2a2d      	cmp	r2, #45	; 0x2d
    d480:	f000 80a5 	beq.w	d5ce <__gethex+0x27a>
    d484:	1c6e      	adds	r6, r5, #1
    d486:	2000      	movs	r0, #0
    d488:	f818 1002 	ldrb.w	r1, [r8, r2]
    d48c:	1e4a      	subs	r2, r1, #1
    d48e:	2a18      	cmp	r2, #24
    d490:	f200 809b 	bhi.w	d5ca <__gethex+0x276>
    d494:	7872      	ldrb	r2, [r6, #1]
    d496:	f818 2002 	ldrb.w	r2, [r8, r2]
    d49a:	3910      	subs	r1, #16
    d49c:	3601      	adds	r6, #1
    d49e:	2a00      	cmp	r2, #0
    d4a0:	d15a      	bne.n	d558 <__gethex+0x204>
    d4a2:	b100      	cbz	r0, d4a6 <__gethex+0x152>
    d4a4:	4249      	negs	r1, r1
    d4a6:	4489      	add	r9, r1
    d4a8:	f8cb 6000 	str.w	r6, [fp]
    d4ac:	2f00      	cmp	r7, #0
    d4ae:	d095      	beq.n	d3dc <__gethex+0x88>
    d4b0:	2b00      	cmp	r3, #0
    d4b2:	bf14      	ite	ne
    d4b4:	2500      	movne	r5, #0
    d4b6:	2506      	moveq	r5, #6
    d4b8:	4628      	mov	r0, r5
    d4ba:	b005      	add	sp, #20
    d4bc:	ecbd 8b02 	vpop	{d8}
    d4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
    d4c8:	4623      	mov	r3, r4
    d4ca:	f846 3b04 	str.w	r3, [r6], #4
    d4ce:	4618      	mov	r0, r3
    d4d0:	9b01      	ldr	r3, [sp, #4]
    d4d2:	1af6      	subs	r6, r6, r3
    d4d4:	10b6      	asrs	r6, r6, #2
    d4d6:	f8cb 6010 	str.w	r6, [fp, #16]
    d4da:	f000 fbe9 	bl	dcb0 <__hi0bits>
    d4de:	0176      	lsls	r6, r6, #5
    d4e0:	f8da 4000 	ldr.w	r4, [sl]
    d4e4:	1a30      	subs	r0, r6, r0
    d4e6:	42a0      	cmp	r0, r4
    d4e8:	dc75      	bgt.n	d5d6 <__gethex+0x282>
    d4ea:	f2c0 80ef 	blt.w	d6cc <__gethex+0x378>
    d4ee:	2700      	movs	r7, #0
    d4f0:	f8da 3008 	ldr.w	r3, [sl, #8]
    d4f4:	454b      	cmp	r3, r9
    d4f6:	f2c0 8151 	blt.w	d79c <__gethex+0x448>
    d4fa:	f8da 3004 	ldr.w	r3, [sl, #4]
    d4fe:	454b      	cmp	r3, r9
    d500:	dd4a      	ble.n	d598 <__gethex+0x244>
    d502:	eba3 0909 	sub.w	r9, r3, r9
    d506:	454c      	cmp	r4, r9
    d508:	f300 8082 	bgt.w	d610 <__gethex+0x2bc>
    d50c:	f8da 200c 	ldr.w	r2, [sl, #12]
    d510:	2a02      	cmp	r2, #2
    d512:	f000 8165 	beq.w	d7e0 <__gethex+0x48c>
    d516:	2a03      	cmp	r2, #3
    d518:	f000 8181 	beq.w	d81e <__gethex+0x4ca>
    d51c:	2a01      	cmp	r2, #1
    d51e:	f000 816f 	beq.w	d800 <__gethex+0x4ac>
    d522:	ee18 0a10 	vmov	r0, s16
    d526:	4659      	mov	r1, fp
    d528:	f000 fb0e 	bl	db48 <_Bfree>
    d52c:	2550      	movs	r5, #80	; 0x50
    d52e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d530:	2300      	movs	r3, #0
    d532:	4628      	mov	r0, r5
    d534:	6013      	str	r3, [r2, #0]
    d536:	b005      	add	sp, #20
    d538:	ecbd 8b02 	vpop	{d8}
    d53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d540:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d544:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    d548:	f1a2 0110 	sub.w	r1, r2, #16
    d54c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    d550:	f818 2002 	ldrb.w	r2, [r8, r2]
    d554:	2a00      	cmp	r2, #0
    d556:	d0a4      	beq.n	d4a2 <__gethex+0x14e>
    d558:	2a19      	cmp	r2, #25
    d55a:	ddf1      	ble.n	d540 <__gethex+0x1ec>
    d55c:	e7a1      	b.n	d4a2 <__gethex+0x14e>
    d55e:	4949      	ldr	r1, [pc, #292]	; (d684 <__gethex+0x330>)
    d560:	9301      	str	r3, [sp, #4]
    d562:	2201      	movs	r2, #1
    d564:	4620      	mov	r0, r4
    d566:	f7ff f99b 	bl	c8a0 <strncmp>
    d56a:	9b01      	ldr	r3, [sp, #4]
    d56c:	2800      	cmp	r0, #0
    d56e:	d16d      	bne.n	d64c <__gethex+0x2f8>
    d570:	7861      	ldrb	r1, [r4, #1]
    d572:	f818 2001 	ldrb.w	r2, [r8, r1]
    d576:	1c65      	adds	r5, r4, #1
    d578:	2a00      	cmp	r2, #0
    d57a:	d069      	beq.n	d650 <__gethex+0x2fc>
    d57c:	2930      	cmp	r1, #48	; 0x30
    d57e:	462c      	mov	r4, r5
    d580:	d105      	bne.n	d58e <__gethex+0x23a>
    d582:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    d586:	2b30      	cmp	r3, #48	; 0x30
    d588:	d0fb      	beq.n	d582 <__gethex+0x22e>
    d58a:	f818 2003 	ldrb.w	r2, [r8, r3]
    d58e:	fab2 f782 	clz	r7, r2
    d592:	097f      	lsrs	r7, r7, #5
    d594:	2301      	movs	r3, #1
    d596:	e702      	b.n	d39e <__gethex+0x4a>
    d598:	2501      	movs	r5, #1
    d59a:	b157      	cbz	r7, d5b2 <__gethex+0x25e>
    d59c:	f8da 300c 	ldr.w	r3, [sl, #12]
    d5a0:	2b02      	cmp	r3, #2
    d5a2:	d05d      	beq.n	d660 <__gethex+0x30c>
    d5a4:	2b03      	cmp	r3, #3
    d5a6:	d05f      	beq.n	d668 <__gethex+0x314>
    d5a8:	2b01      	cmp	r3, #1
    d5aa:	f000 8084 	beq.w	d6b6 <__gethex+0x362>
    d5ae:	f045 0510 	orr.w	r5, r5, #16
    d5b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5b4:	f8c3 b000 	str.w	fp, [r3]
    d5b8:	9b02      	ldr	r3, [sp, #8]
    d5ba:	4628      	mov	r0, r5
    d5bc:	f8c3 9000 	str.w	r9, [r3]
    d5c0:	b005      	add	sp, #20
    d5c2:	ecbd 8b02 	vpop	{d8}
    d5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d5ca:	462e      	mov	r6, r5
    d5cc:	e702      	b.n	d3d4 <__gethex+0x80>
    d5ce:	2001      	movs	r0, #1
    d5d0:	78aa      	ldrb	r2, [r5, #2]
    d5d2:	1cae      	adds	r6, r5, #2
    d5d4:	e758      	b.n	d488 <__gethex+0x134>
    d5d6:	1b06      	subs	r6, r0, r4
    d5d8:	4631      	mov	r1, r6
    d5da:	4658      	mov	r0, fp
    d5dc:	f000 ff96 	bl	e50c <__any_on>
    d5e0:	4607      	mov	r7, r0
    d5e2:	b178      	cbz	r0, d604 <__gethex+0x2b0>
    d5e4:	1e72      	subs	r2, r6, #1
    d5e6:	1153      	asrs	r3, r2, #5
    d5e8:	9901      	ldr	r1, [sp, #4]
    d5ea:	2701      	movs	r7, #1
    d5ec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    d5f0:	f002 031f 	and.w	r3, r2, #31
    d5f4:	fa07 f303 	lsl.w	r3, r7, r3
    d5f8:	420b      	tst	r3, r1
    d5fa:	d003      	beq.n	d604 <__gethex+0x2b0>
    d5fc:	42ba      	cmp	r2, r7
    d5fe:	f300 80e2 	bgt.w	d7c6 <__gethex+0x472>
    d602:	2702      	movs	r7, #2
    d604:	4631      	mov	r1, r6
    d606:	4658      	mov	r0, fp
    d608:	44b1      	add	r9, r6
    d60a:	f7ff fe51 	bl	d2b0 <rshift>
    d60e:	e76f      	b.n	d4f0 <__gethex+0x19c>
    d610:	f109 35ff 	add.w	r5, r9, #4294967295
    d614:	2f00      	cmp	r7, #0
    d616:	f040 80ce 	bne.w	d7b6 <__gethex+0x462>
    d61a:	2d00      	cmp	r5, #0
    d61c:	f040 80cd 	bne.w	d7ba <__gethex+0x466>
    d620:	116b      	asrs	r3, r5, #5
    d622:	9a01      	ldr	r2, [sp, #4]
    d624:	f005 051f 	and.w	r5, r5, #31
    d628:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    d62c:	2301      	movs	r3, #1
    d62e:	40ab      	lsls	r3, r5
    d630:	4213      	tst	r3, r2
    d632:	4649      	mov	r1, r9
    d634:	4658      	mov	r0, fp
    d636:	bf18      	it	ne
    d638:	f047 0702 	orrne.w	r7, r7, #2
    d63c:	eba4 0409 	sub.w	r4, r4, r9
    d640:	f7ff fe36 	bl	d2b0 <rshift>
    d644:	2502      	movs	r5, #2
    d646:	f8da 9004 	ldr.w	r9, [sl, #4]
    d64a:	e7a6      	b.n	d59a <__gethex+0x246>
    d64c:	7821      	ldrb	r1, [r4, #0]
    d64e:	4625      	mov	r5, r4
    d650:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    d654:	2950      	cmp	r1, #80	; 0x50
    d656:	f000 80bf 	beq.w	d7d8 <__gethex+0x484>
    d65a:	f8cb 5000 	str.w	r5, [fp]
    d65e:	e727      	b.n	d4b0 <__gethex+0x15c>
    d660:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d662:	f1c3 0301 	rsb	r3, r3, #1
    d666:	9311      	str	r3, [sp, #68]	; 0x44
    d668:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d66a:	2b00      	cmp	r3, #0
    d66c:	d09f      	beq.n	d5ae <__gethex+0x25a>
    d66e:	f8db 7010 	ldr.w	r7, [fp, #16]
    d672:	f8dd 8004 	ldr.w	r8, [sp, #4]
    d676:	00ba      	lsls	r2, r7, #2
    d678:	4643      	mov	r3, r8
    d67a:	9201      	str	r2, [sp, #4]
    d67c:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    d680:	2100      	movs	r1, #0
    d682:	e007      	b.n	d694 <__gethex+0x340>
    d684:	20007fe8 	.word	0x20007fe8
    d688:	20000bf4 	.word	0x20000bf4
    d68c:	4298      	cmp	r0, r3
    d68e:	f843 1c04 	str.w	r1, [r3, #-4]
    d692:	d93f      	bls.n	d714 <__gethex+0x3c0>
    d694:	461e      	mov	r6, r3
    d696:	f853 2b04 	ldr.w	r2, [r3], #4
    d69a:	f1b2 3fff 	cmp.w	r2, #4294967295
    d69e:	d0f5      	beq.n	d68c <__gethex+0x338>
    d6a0:	3201      	adds	r2, #1
    d6a2:	2d02      	cmp	r5, #2
    d6a4:	6032      	str	r2, [r6, #0]
    d6a6:	f000 80bf 	beq.w	d828 <__gethex+0x4d4>
    d6aa:	f014 041f 	ands.w	r4, r4, #31
    d6ae:	f040 80e7 	bne.w	d880 <__gethex+0x52c>
    d6b2:	2521      	movs	r5, #33	; 0x21
    d6b4:	e77d      	b.n	d5b2 <__gethex+0x25e>
    d6b6:	07ba      	lsls	r2, r7, #30
    d6b8:	f57f af79 	bpl.w	d5ae <__gethex+0x25a>
    d6bc:	9b01      	ldr	r3, [sp, #4]
    d6be:	681b      	ldr	r3, [r3, #0]
    d6c0:	431f      	orrs	r7, r3
    d6c2:	07fb      	lsls	r3, r7, #31
    d6c4:	d4d3      	bmi.n	d66e <__gethex+0x31a>
    d6c6:	e772      	b.n	d5ae <__gethex+0x25a>
    d6c8:	2000      	movs	r0, #0
    d6ca:	e781      	b.n	d5d0 <__gethex+0x27c>
    d6cc:	1a22      	subs	r2, r4, r0
    d6ce:	4659      	mov	r1, fp
    d6d0:	ee18 0a10 	vmov	r0, s16
    d6d4:	eba9 0902 	sub.w	r9, r9, r2
    d6d8:	f000 fc76 	bl	dfc8 <__lshift>
    d6dc:	f100 0314 	add.w	r3, r0, #20
    d6e0:	4683      	mov	fp, r0
    d6e2:	9301      	str	r3, [sp, #4]
    d6e4:	2700      	movs	r7, #0
    d6e6:	e703      	b.n	d4f0 <__gethex+0x19c>
    d6e8:	7872      	ldrb	r2, [r6, #1]
    d6ea:	f818 0002 	ldrb.w	r0, [r8, r2]
    d6ee:	1c71      	adds	r1, r6, #1
    d6f0:	2800      	cmp	r0, #0
    d6f2:	f000 80a0 	beq.w	d836 <__gethex+0x4e2>
    d6f6:	460d      	mov	r5, r1
    d6f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    d6fc:	f818 0002 	ldrb.w	r0, [r8, r2]
    d700:	2800      	cmp	r0, #0
    d702:	d1f8      	bne.n	d6f6 <__gethex+0x3a2>
    d704:	1b75      	subs	r5, r6, r5
    d706:	ea4f 0985 	mov.w	r9, r5, lsl #2
    d70a:	460e      	mov	r6, r1
    d70c:	e65d      	b.n	d3ca <__gethex+0x76>
    d70e:	3402      	adds	r4, #2
    d710:	2300      	movs	r3, #0
    d712:	e638      	b.n	d386 <__gethex+0x32>
    d714:	f8db 3008 	ldr.w	r3, [fp, #8]
    d718:	429f      	cmp	r7, r3
    d71a:	f280 808e 	bge.w	d83a <__gethex+0x4e6>
    d71e:	463b      	mov	r3, r7
    d720:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    d724:	2101      	movs	r1, #1
    d726:	3301      	adds	r3, #1
    d728:	2d02      	cmp	r5, #2
    d72a:	f8cb 3010 	str.w	r3, [fp, #16]
    d72e:	6151      	str	r1, [r2, #20]
    d730:	d07a      	beq.n	d828 <__gethex+0x4d4>
    d732:	429f      	cmp	r7, r3
    d734:	dab9      	bge.n	d6aa <__gethex+0x356>
    d736:	2b00      	cmp	r3, #0
    d738:	f340 809b 	ble.w	d872 <__gethex+0x51e>
    d73c:	f8db 2014 	ldr.w	r2, [fp, #20]
    d740:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    d744:	f10b 0018 	add.w	r0, fp, #24
    d748:	4283      	cmp	r3, r0
    d74a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    d74e:	f240 80b1 	bls.w	d8b4 <__gethex+0x560>
    d752:	4644      	mov	r4, r8
    d754:	6801      	ldr	r1, [r0, #0]
    d756:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    d75a:	f844 2b04 	str.w	r2, [r4], #4
    d75e:	f850 2b04 	ldr.w	r2, [r0], #4
    d762:	4283      	cmp	r3, r0
    d764:	ea4f 0252 	mov.w	r2, r2, lsr #1
    d768:	d8f4      	bhi.n	d754 <__gethex+0x400>
    d76a:	eba3 030b 	sub.w	r3, r3, fp
    d76e:	3b19      	subs	r3, #25
    d770:	089b      	lsrs	r3, r3, #2
    d772:	3301      	adds	r3, #1
    d774:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    d778:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    d77c:	2a00      	cmp	r2, #0
    d77e:	f040 809d 	bne.w	d8bc <__gethex+0x568>
    d782:	eba3 0208 	sub.w	r2, r3, r8
    d786:	1092      	asrs	r2, r2, #2
    d788:	4543      	cmp	r3, r8
    d78a:	f8cb 2010 	str.w	r2, [fp, #16]
    d78e:	d073      	beq.n	d878 <__gethex+0x524>
    d790:	f8da 3008 	ldr.w	r3, [sl, #8]
    d794:	f109 0901 	add.w	r9, r9, #1
    d798:	454b      	cmp	r3, r9
    d79a:	da8a      	bge.n	d6b2 <__gethex+0x35e>
    d79c:	ee18 0a10 	vmov	r0, s16
    d7a0:	4659      	mov	r1, fp
    d7a2:	f000 f9d1 	bl	db48 <_Bfree>
    d7a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d7a8:	2300      	movs	r3, #0
    d7aa:	6013      	str	r3, [r2, #0]
    d7ac:	25a3      	movs	r5, #163	; 0xa3
    d7ae:	e683      	b.n	d4b8 <__gethex+0x164>
    d7b0:	9e01      	ldr	r6, [sp, #4]
    d7b2:	2300      	movs	r3, #0
    d7b4:	e689      	b.n	d4ca <__gethex+0x176>
    d7b6:	2701      	movs	r7, #1
    d7b8:	e732      	b.n	d620 <__gethex+0x2cc>
    d7ba:	4629      	mov	r1, r5
    d7bc:	4658      	mov	r0, fp
    d7be:	f000 fea5 	bl	e50c <__any_on>
    d7c2:	4607      	mov	r7, r0
    d7c4:	e72c      	b.n	d620 <__gethex+0x2cc>
    d7c6:	1eb1      	subs	r1, r6, #2
    d7c8:	4658      	mov	r0, fp
    d7ca:	f000 fe9f 	bl	e50c <__any_on>
    d7ce:	2800      	cmp	r0, #0
    d7d0:	f43f af17 	beq.w	d602 <__gethex+0x2ae>
    d7d4:	2703      	movs	r7, #3
    d7d6:	e715      	b.n	d604 <__gethex+0x2b0>
    d7d8:	f04f 0900 	mov.w	r9, #0
    d7dc:	2701      	movs	r7, #1
    d7de:	e64a      	b.n	d476 <__gethex+0x122>
    d7e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d7e2:	2a00      	cmp	r2, #0
    d7e4:	f47f ae9d 	bne.w	d522 <__gethex+0x1ce>
    d7e8:	9902      	ldr	r1, [sp, #8]
    d7ea:	600b      	str	r3, [r1, #0]
    d7ec:	9b01      	ldr	r3, [sp, #4]
    d7ee:	2201      	movs	r2, #1
    d7f0:	f8cb 2010 	str.w	r2, [fp, #16]
    d7f4:	601a      	str	r2, [r3, #0]
    d7f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d7f8:	2562      	movs	r5, #98	; 0x62
    d7fa:	f8c3 b000 	str.w	fp, [r3]
    d7fe:	e65b      	b.n	d4b8 <__gethex+0x164>
    d800:	454c      	cmp	r4, r9
    d802:	f47f ae8e 	bne.w	d522 <__gethex+0x1ce>
    d806:	2c01      	cmp	r4, #1
    d808:	d0ee      	beq.n	d7e8 <__gethex+0x494>
    d80a:	1e61      	subs	r1, r4, #1
    d80c:	4658      	mov	r0, fp
    d80e:	f000 fe7d 	bl	e50c <__any_on>
    d812:	2800      	cmp	r0, #0
    d814:	f43f ae85 	beq.w	d522 <__gethex+0x1ce>
    d818:	f8da 3004 	ldr.w	r3, [sl, #4]
    d81c:	e7e4      	b.n	d7e8 <__gethex+0x494>
    d81e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d820:	2a00      	cmp	r2, #0
    d822:	f43f ae7e 	beq.w	d522 <__gethex+0x1ce>
    d826:	e7df      	b.n	d7e8 <__gethex+0x494>
    d828:	f8da 3000 	ldr.w	r3, [sl]
    d82c:	3b01      	subs	r3, #1
    d82e:	42a3      	cmp	r3, r4
    d830:	d034      	beq.n	d89c <__gethex+0x548>
    d832:	2522      	movs	r5, #34	; 0x22
    d834:	e6bd      	b.n	d5b2 <__gethex+0x25e>
    d836:	460e      	mov	r6, r1
    d838:	e5c7      	b.n	d3ca <__gethex+0x76>
    d83a:	f8db 1004 	ldr.w	r1, [fp, #4]
    d83e:	ee18 0a10 	vmov	r0, s16
    d842:	3101      	adds	r1, #1
    d844:	f000 f95a 	bl	dafc <_Balloc>
    d848:	4606      	mov	r6, r0
    d84a:	b3c8      	cbz	r0, d8c0 <__gethex+0x56c>
    d84c:	f8db 3010 	ldr.w	r3, [fp, #16]
    d850:	3302      	adds	r3, #2
    d852:	009a      	lsls	r2, r3, #2
    d854:	f10b 010c 	add.w	r1, fp, #12
    d858:	300c      	adds	r0, #12
    d85a:	f7fa fd37 	bl	82cc <memcpy>
    d85e:	4659      	mov	r1, fp
    d860:	ee18 0a10 	vmov	r0, s16
    d864:	f000 f970 	bl	db48 <_Bfree>
    d868:	f106 0814 	add.w	r8, r6, #20
    d86c:	6933      	ldr	r3, [r6, #16]
    d86e:	46b3      	mov	fp, r6
    d870:	e756      	b.n	d720 <__gethex+0x3cc>
    d872:	2300      	movs	r3, #0
    d874:	f8cb 3010 	str.w	r3, [fp, #16]
    d878:	2300      	movs	r3, #0
    d87a:	f8cb 3014 	str.w	r3, [fp, #20]
    d87e:	e787      	b.n	d790 <__gethex+0x43c>
    d880:	9b01      	ldr	r3, [sp, #4]
    d882:	4443      	add	r3, r8
    d884:	f1c4 0420 	rsb	r4, r4, #32
    d888:	f853 0c04 	ldr.w	r0, [r3, #-4]
    d88c:	f000 fa10 	bl	dcb0 <__hi0bits>
    d890:	42a0      	cmp	r0, r4
    d892:	f6bf af0e 	bge.w	d6b2 <__gethex+0x35e>
    d896:	f8db 3010 	ldr.w	r3, [fp, #16]
    d89a:	e74c      	b.n	d736 <__gethex+0x3e2>
    d89c:	1163      	asrs	r3, r4, #5
    d89e:	f004 041f 	and.w	r4, r4, #31
    d8a2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    d8a6:	2301      	movs	r3, #1
    d8a8:	40a3      	lsls	r3, r4
    d8aa:	4213      	tst	r3, r2
    d8ac:	bf0c      	ite	eq
    d8ae:	2522      	moveq	r5, #34	; 0x22
    d8b0:	2521      	movne	r5, #33	; 0x21
    d8b2:	e67e      	b.n	d5b2 <__gethex+0x25e>
    d8b4:	f8c8 2000 	str.w	r2, [r8]
    d8b8:	4643      	mov	r3, r8
    d8ba:	b16a      	cbz	r2, d8d8 <__gethex+0x584>
    d8bc:	3304      	adds	r3, #4
    d8be:	e760      	b.n	d782 <__gethex+0x42e>
    d8c0:	4b07      	ldr	r3, [pc, #28]	; (d8e0 <__gethex+0x58c>)
    d8c2:	4808      	ldr	r0, [pc, #32]	; (d8e4 <__gethex+0x590>)
    d8c4:	4632      	mov	r2, r6
    d8c6:	2184      	movs	r1, #132	; 0x84
    d8c8:	f004 fa0a 	bl	11ce0 <__assert_func>
    d8cc:	4b04      	ldr	r3, [pc, #16]	; (d8e0 <__gethex+0x58c>)
    d8ce:	4805      	ldr	r0, [pc, #20]	; (d8e4 <__gethex+0x590>)
    d8d0:	465a      	mov	r2, fp
    d8d2:	21e4      	movs	r1, #228	; 0xe4
    d8d4:	f004 fa04 	bl	11ce0 <__assert_func>
    d8d8:	f8cb 2010 	str.w	r2, [fp, #16]
    d8dc:	e7cc      	b.n	d878 <__gethex+0x524>
    d8de:	bf00      	nop
    d8e0:	20000b7c 	.word	0x20000b7c
    d8e4:	20000b90 	.word	0x20000b90

0000d8e8 <__match>:
    d8e8:	b410      	push	{r4}
    d8ea:	6804      	ldr	r4, [r0, #0]
    d8ec:	e009      	b.n	d902 <__match+0x1a>
    d8ee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    d8f2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    d8f6:	f1bc 0f19 	cmp.w	ip, #25
    d8fa:	bf98      	it	ls
    d8fc:	3320      	addls	r3, #32
    d8fe:	4293      	cmp	r3, r2
    d900:	d109      	bne.n	d916 <__match+0x2e>
    d902:	f811 2b01 	ldrb.w	r2, [r1], #1
    d906:	2a00      	cmp	r2, #0
    d908:	d1f1      	bne.n	d8ee <__match+0x6>
    d90a:	3401      	adds	r4, #1
    d90c:	6004      	str	r4, [r0, #0]
    d90e:	2001      	movs	r0, #1
    d910:	f85d 4b04 	ldr.w	r4, [sp], #4
    d914:	4770      	bx	lr
    d916:	2000      	movs	r0, #0
    d918:	f85d 4b04 	ldr.w	r4, [sp], #4
    d91c:	4770      	bx	lr
    d91e:	bf00      	nop

0000d920 <__hexnan>:
    d920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d924:	6809      	ldr	r1, [r1, #0]
    d926:	b085      	sub	sp, #20
    d928:	114b      	asrs	r3, r1, #5
    d92a:	f011 011f 	ands.w	r1, r1, #31
    d92e:	9002      	str	r0, [sp, #8]
    d930:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d934:	9103      	str	r1, [sp, #12]
    d936:	f040 808f 	bne.w	da58 <__hexnan+0x138>
    d93a:	1f1d      	subs	r5, r3, #4
    d93c:	9301      	str	r3, [sp, #4]
    d93e:	9b02      	ldr	r3, [sp, #8]
    d940:	9901      	ldr	r1, [sp, #4]
    d942:	681c      	ldr	r4, [r3, #0]
    d944:	2300      	movs	r3, #0
    d946:	f841 3c04 	str.w	r3, [r1, #-4]
    d94a:	7861      	ldrb	r1, [r4, #1]
    d94c:	3401      	adds	r4, #1
    d94e:	2900      	cmp	r1, #0
    d950:	f000 8098 	beq.w	da84 <__hexnan+0x164>
    d954:	f8df 9174 	ldr.w	r9, [pc, #372]	; dacc <__hexnan+0x1ac>
    d958:	46a8      	mov	r8, r5
    d95a:	46ac      	mov	ip, r5
    d95c:	469a      	mov	sl, r3
    d95e:	461e      	mov	r6, r3
    d960:	e00e      	b.n	d980 <__hexnan+0x60>
    d962:	2920      	cmp	r1, #32
    d964:	f200 808c 	bhi.w	da80 <__hexnan+0x160>
    d968:	4556      	cmp	r6, sl
    d96a:	dd06      	ble.n	d97a <__hexnan+0x5a>
    d96c:	45c4      	cmp	ip, r8
    d96e:	d201      	bcs.n	d974 <__hexnan+0x54>
    d970:	2b07      	cmp	r3, #7
    d972:	dd5b      	ble.n	da2c <__hexnan+0x10c>
    d974:	4562      	cmp	r2, ip
    d976:	d351      	bcc.n	da1c <__hexnan+0xfc>
    d978:	2308      	movs	r3, #8
    d97a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    d97e:	b1a1      	cbz	r1, d9aa <__hexnan+0x8a>
    d980:	f819 0001 	ldrb.w	r0, [r9, r1]
    d984:	2800      	cmp	r0, #0
    d986:	d0ec      	beq.n	d962 <__hexnan+0x42>
    d988:	3301      	adds	r3, #1
    d98a:	2b08      	cmp	r3, #8
    d98c:	f106 0601 	add.w	r6, r6, #1
    d990:	dc3a      	bgt.n	da08 <__hexnan+0xe8>
    d992:	f8dc 1000 	ldr.w	r1, [ip]
    d996:	0109      	lsls	r1, r1, #4
    d998:	f000 000f 	and.w	r0, r0, #15
    d99c:	4308      	orrs	r0, r1
    d99e:	f8cc 0000 	str.w	r0, [ip]
    d9a2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    d9a6:	2900      	cmp	r1, #0
    d9a8:	d1ea      	bne.n	d980 <__hexnan+0x60>
    d9aa:	2e00      	cmp	r6, #0
    d9ac:	d06a      	beq.n	da84 <__hexnan+0x164>
    d9ae:	45c4      	cmp	ip, r8
    d9b0:	d201      	bcs.n	d9b6 <__hexnan+0x96>
    d9b2:	2b07      	cmp	r3, #7
    d9b4:	dd74      	ble.n	daa0 <__hexnan+0x180>
    d9b6:	4562      	cmp	r2, ip
    d9b8:	d252      	bcs.n	da60 <__hexnan+0x140>
    d9ba:	1f11      	subs	r1, r2, #4
    d9bc:	4663      	mov	r3, ip
    d9be:	f853 0b04 	ldr.w	r0, [r3], #4
    d9c2:	f841 0f04 	str.w	r0, [r1, #4]!
    d9c6:	42ab      	cmp	r3, r5
    d9c8:	d9f9      	bls.n	d9be <__hexnan+0x9e>
    d9ca:	eba5 030c 	sub.w	r3, r5, ip
    d9ce:	f023 0303 	bic.w	r3, r3, #3
    d9d2:	1c69      	adds	r1, r5, #1
    d9d4:	3304      	adds	r3, #4
    d9d6:	f10c 0c01 	add.w	ip, ip, #1
    d9da:	4561      	cmp	r1, ip
    d9dc:	bf38      	it	cc
    d9de:	2304      	movcc	r3, #4
    d9e0:	4413      	add	r3, r2
    d9e2:	2100      	movs	r1, #0
    d9e4:	f843 1b04 	str.w	r1, [r3], #4
    d9e8:	42ab      	cmp	r3, r5
    d9ea:	d9fb      	bls.n	d9e4 <__hexnan+0xc4>
    d9ec:	9b01      	ldr	r3, [sp, #4]
    d9ee:	f853 3c04 	ldr.w	r3, [r3, #-4]
    d9f2:	b92b      	cbnz	r3, da00 <__hexnan+0xe0>
    d9f4:	42aa      	cmp	r2, r5
    d9f6:	d049      	beq.n	da8c <__hexnan+0x16c>
    d9f8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    d9fc:	2b00      	cmp	r3, #0
    d9fe:	d0f9      	beq.n	d9f4 <__hexnan+0xd4>
    da00:	2005      	movs	r0, #5
    da02:	b005      	add	sp, #20
    da04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da08:	4562      	cmp	r2, ip
    da0a:	d2b6      	bcs.n	d97a <__hexnan+0x5a>
    da0c:	2300      	movs	r3, #0
    da0e:	f84c 3c04 	str.w	r3, [ip, #-4]
    da12:	4619      	mov	r1, r3
    da14:	f1ac 0c04 	sub.w	ip, ip, #4
    da18:	2301      	movs	r3, #1
    da1a:	e7bd      	b.n	d998 <__hexnan+0x78>
    da1c:	2300      	movs	r3, #0
    da1e:	f1ac 0804 	sub.w	r8, ip, #4
    da22:	f84c 3c04 	str.w	r3, [ip, #-4]
    da26:	46b2      	mov	sl, r6
    da28:	46c4      	mov	ip, r8
    da2a:	e7a6      	b.n	d97a <__hexnan+0x5a>
    da2c:	f1c3 0108 	rsb	r1, r3, #8
    da30:	f8dc 3000 	ldr.w	r3, [ip]
    da34:	0089      	lsls	r1, r1, #2
    da36:	f1c1 0e20 	rsb	lr, r1, #32
    da3a:	4660      	mov	r0, ip
    da3c:	469b      	mov	fp, r3
    da3e:	6847      	ldr	r7, [r0, #4]
    da40:	fa07 f30e 	lsl.w	r3, r7, lr
    da44:	ea43 030b 	orr.w	r3, r3, fp
    da48:	fa27 fb01 	lsr.w	fp, r7, r1
    da4c:	6003      	str	r3, [r0, #0]
    da4e:	f840 bf04 	str.w	fp, [r0, #4]!
    da52:	4540      	cmp	r0, r8
    da54:	d3f3      	bcc.n	da3e <__hexnan+0x11e>
    da56:	e78d      	b.n	d974 <__hexnan+0x54>
    da58:	1d19      	adds	r1, r3, #4
    da5a:	9101      	str	r1, [sp, #4]
    da5c:	461d      	mov	r5, r3
    da5e:	e76e      	b.n	d93e <__hexnan+0x1e>
    da60:	9b03      	ldr	r3, [sp, #12]
    da62:	2b00      	cmp	r3, #0
    da64:	d0c2      	beq.n	d9ec <__hexnan+0xcc>
    da66:	9b03      	ldr	r3, [sp, #12]
    da68:	9801      	ldr	r0, [sp, #4]
    da6a:	f1c3 0120 	rsb	r1, r3, #32
    da6e:	f04f 33ff 	mov.w	r3, #4294967295
    da72:	40cb      	lsrs	r3, r1
    da74:	f850 1c04 	ldr.w	r1, [r0, #-4]
    da78:	400b      	ands	r3, r1
    da7a:	f840 3c04 	str.w	r3, [r0, #-4]
    da7e:	e7b8      	b.n	d9f2 <__hexnan+0xd2>
    da80:	2929      	cmp	r1, #41	; 0x29
    da82:	d009      	beq.n	da98 <__hexnan+0x178>
    da84:	2004      	movs	r0, #4
    da86:	b005      	add	sp, #20
    da88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da8c:	2301      	movs	r3, #1
    da8e:	2005      	movs	r0, #5
    da90:	602b      	str	r3, [r5, #0]
    da92:	b005      	add	sp, #20
    da94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da98:	9902      	ldr	r1, [sp, #8]
    da9a:	3401      	adds	r4, #1
    da9c:	600c      	str	r4, [r1, #0]
    da9e:	e784      	b.n	d9aa <__hexnan+0x8a>
    daa0:	f8dc 1000 	ldr.w	r1, [ip]
    daa4:	f1c3 0308 	rsb	r3, r3, #8
    daa8:	009b      	lsls	r3, r3, #2
    daaa:	f1c3 0720 	rsb	r7, r3, #32
    daae:	4664      	mov	r4, ip
    dab0:	4608      	mov	r0, r1
    dab2:	6866      	ldr	r6, [r4, #4]
    dab4:	fa06 f107 	lsl.w	r1, r6, r7
    dab8:	4301      	orrs	r1, r0
    daba:	fa26 f003 	lsr.w	r0, r6, r3
    dabe:	6021      	str	r1, [r4, #0]
    dac0:	f844 0f04 	str.w	r0, [r4, #4]!
    dac4:	4544      	cmp	r4, r8
    dac6:	d3f4      	bcc.n	dab2 <__hexnan+0x192>
    dac8:	e775      	b.n	d9b6 <__hexnan+0x96>
    daca:	bf00      	nop
    dacc:	20000bf4 	.word	0x20000bf4

0000dad0 <__ascii_mbtowc>:
    dad0:	b082      	sub	sp, #8
    dad2:	b149      	cbz	r1, dae8 <__ascii_mbtowc+0x18>
    dad4:	b15a      	cbz	r2, daee <__ascii_mbtowc+0x1e>
    dad6:	b16b      	cbz	r3, daf4 <__ascii_mbtowc+0x24>
    dad8:	7813      	ldrb	r3, [r2, #0]
    dada:	600b      	str	r3, [r1, #0]
    dadc:	7812      	ldrb	r2, [r2, #0]
    dade:	1e10      	subs	r0, r2, #0
    dae0:	bf18      	it	ne
    dae2:	2001      	movne	r0, #1
    dae4:	b002      	add	sp, #8
    dae6:	4770      	bx	lr
    dae8:	a901      	add	r1, sp, #4
    daea:	2a00      	cmp	r2, #0
    daec:	d1f3      	bne.n	dad6 <__ascii_mbtowc+0x6>
    daee:	4610      	mov	r0, r2
    daf0:	b002      	add	sp, #8
    daf2:	4770      	bx	lr
    daf4:	f06f 0001 	mvn.w	r0, #1
    daf8:	e7f4      	b.n	dae4 <__ascii_mbtowc+0x14>
    dafa:	bf00      	nop

0000dafc <_Balloc>:
    dafc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    dafe:	b570      	push	{r4, r5, r6, lr}
    db00:	4605      	mov	r5, r0
    db02:	460c      	mov	r4, r1
    db04:	b14b      	cbz	r3, db1a <_Balloc+0x1e>
    db06:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    db0a:	b180      	cbz	r0, db2e <_Balloc+0x32>
    db0c:	6802      	ldr	r2, [r0, #0]
    db0e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    db12:	2300      	movs	r3, #0
    db14:	e9c0 3303 	strd	r3, r3, [r0, #12]
    db18:	bd70      	pop	{r4, r5, r6, pc}
    db1a:	2221      	movs	r2, #33	; 0x21
    db1c:	2104      	movs	r1, #4
    db1e:	f004 f8ff 	bl	11d20 <_calloc_r>
    db22:	4603      	mov	r3, r0
    db24:	6468      	str	r0, [r5, #68]	; 0x44
    db26:	2800      	cmp	r0, #0
    db28:	d1ed      	bne.n	db06 <_Balloc+0xa>
    db2a:	2000      	movs	r0, #0
    db2c:	bd70      	pop	{r4, r5, r6, pc}
    db2e:	2101      	movs	r1, #1
    db30:	fa01 f604 	lsl.w	r6, r1, r4
    db34:	1d72      	adds	r2, r6, #5
    db36:	0092      	lsls	r2, r2, #2
    db38:	4628      	mov	r0, r5
    db3a:	f004 f8f1 	bl	11d20 <_calloc_r>
    db3e:	2800      	cmp	r0, #0
    db40:	d0f3      	beq.n	db2a <_Balloc+0x2e>
    db42:	e9c0 4601 	strd	r4, r6, [r0, #4]
    db46:	e7e4      	b.n	db12 <_Balloc+0x16>

0000db48 <_Bfree>:
    db48:	b131      	cbz	r1, db58 <_Bfree+0x10>
    db4a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    db4c:	684a      	ldr	r2, [r1, #4]
    db4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    db52:	6008      	str	r0, [r1, #0]
    db54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    db58:	4770      	bx	lr
    db5a:	bf00      	nop

0000db5c <__multadd>:
    db5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db60:	690e      	ldr	r6, [r1, #16]
    db62:	4680      	mov	r8, r0
    db64:	460f      	mov	r7, r1
    db66:	461d      	mov	r5, r3
    db68:	f101 0e14 	add.w	lr, r1, #20
    db6c:	2000      	movs	r0, #0
    db6e:	f8de 1000 	ldr.w	r1, [lr]
    db72:	b28c      	uxth	r4, r1
    db74:	fb02 5304 	mla	r3, r2, r4, r5
    db78:	0c09      	lsrs	r1, r1, #16
    db7a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    db7e:	fb02 cc01 	mla	ip, r2, r1, ip
    db82:	3001      	adds	r0, #1
    db84:	b29c      	uxth	r4, r3
    db86:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    db8a:	4286      	cmp	r6, r0
    db8c:	f84e 4b04 	str.w	r4, [lr], #4
    db90:	ea4f 451c 	mov.w	r5, ip, lsr #16
    db94:	dceb      	bgt.n	db6e <__multadd+0x12>
    db96:	b13d      	cbz	r5, dba8 <__multadd+0x4c>
    db98:	68bb      	ldr	r3, [r7, #8]
    db9a:	42b3      	cmp	r3, r6
    db9c:	dd07      	ble.n	dbae <__multadd+0x52>
    db9e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    dba2:	3601      	adds	r6, #1
    dba4:	615d      	str	r5, [r3, #20]
    dba6:	613e      	str	r6, [r7, #16]
    dba8:	4638      	mov	r0, r7
    dbaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dbae:	6879      	ldr	r1, [r7, #4]
    dbb0:	4640      	mov	r0, r8
    dbb2:	3101      	adds	r1, #1
    dbb4:	f7ff ffa2 	bl	dafc <_Balloc>
    dbb8:	4604      	mov	r4, r0
    dbba:	b1b0      	cbz	r0, dbea <__multadd+0x8e>
    dbbc:	693a      	ldr	r2, [r7, #16]
    dbbe:	3202      	adds	r2, #2
    dbc0:	f107 010c 	add.w	r1, r7, #12
    dbc4:	0092      	lsls	r2, r2, #2
    dbc6:	300c      	adds	r0, #12
    dbc8:	f7fa fb80 	bl	82cc <memcpy>
    dbcc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    dbd0:	687a      	ldr	r2, [r7, #4]
    dbd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    dbd6:	6039      	str	r1, [r7, #0]
    dbd8:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    dbdc:	4627      	mov	r7, r4
    dbde:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    dbe2:	3601      	adds	r6, #1
    dbe4:	615d      	str	r5, [r3, #20]
    dbe6:	613e      	str	r6, [r7, #16]
    dbe8:	e7de      	b.n	dba8 <__multadd+0x4c>
    dbea:	4b03      	ldr	r3, [pc, #12]	; (dbf8 <__multadd+0x9c>)
    dbec:	4803      	ldr	r0, [pc, #12]	; (dbfc <__multadd+0xa0>)
    dbee:	4622      	mov	r2, r4
    dbf0:	21ba      	movs	r1, #186	; 0xba
    dbf2:	f004 f875 	bl	11ce0 <__assert_func>
    dbf6:	bf00      	nop
    dbf8:	20000b7c 	.word	0x20000b7c
    dbfc:	20000cf4 	.word	0x20000cf4

0000dc00 <__s2b>:
    dc00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dc04:	4617      	mov	r7, r2
    dc06:	4a27      	ldr	r2, [pc, #156]	; (dca4 <__s2b+0xa4>)
    dc08:	461e      	mov	r6, r3
    dc0a:	3308      	adds	r3, #8
    dc0c:	460c      	mov	r4, r1
    dc0e:	2e09      	cmp	r6, #9
    dc10:	fb82 1203 	smull	r1, r2, r2, r3
    dc14:	ea4f 73e3 	mov.w	r3, r3, asr #31
    dc18:	4605      	mov	r5, r0
    dc1a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    dc1e:	dd39      	ble.n	dc94 <__s2b+0x94>
    dc20:	f04f 0c01 	mov.w	ip, #1
    dc24:	2100      	movs	r1, #0
    dc26:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    dc2a:	4563      	cmp	r3, ip
    dc2c:	f101 0101 	add.w	r1, r1, #1
    dc30:	dcf9      	bgt.n	dc26 <__s2b+0x26>
    dc32:	4628      	mov	r0, r5
    dc34:	f7ff ff62 	bl	dafc <_Balloc>
    dc38:	4601      	mov	r1, r0
    dc3a:	b368      	cbz	r0, dc98 <__s2b+0x98>
    dc3c:	9b08      	ldr	r3, [sp, #32]
    dc3e:	6143      	str	r3, [r0, #20]
    dc40:	2f09      	cmp	r7, #9
    dc42:	f04f 0301 	mov.w	r3, #1
    dc46:	6103      	str	r3, [r0, #16]
    dc48:	dc12      	bgt.n	dc70 <__s2b+0x70>
    dc4a:	340a      	adds	r4, #10
    dc4c:	2709      	movs	r7, #9
    dc4e:	42be      	cmp	r6, r7
    dc50:	dd0b      	ble.n	dc6a <__s2b+0x6a>
    dc52:	1bf2      	subs	r2, r6, r7
    dc54:	18a6      	adds	r6, r4, r2
    dc56:	f814 3b01 	ldrb.w	r3, [r4], #1
    dc5a:	220a      	movs	r2, #10
    dc5c:	3b30      	subs	r3, #48	; 0x30
    dc5e:	4628      	mov	r0, r5
    dc60:	f7ff ff7c 	bl	db5c <__multadd>
    dc64:	42a6      	cmp	r6, r4
    dc66:	4601      	mov	r1, r0
    dc68:	d1f5      	bne.n	dc56 <__s2b+0x56>
    dc6a:	4608      	mov	r0, r1
    dc6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dc70:	f104 0909 	add.w	r9, r4, #9
    dc74:	46c8      	mov	r8, r9
    dc76:	443c      	add	r4, r7
    dc78:	f818 3b01 	ldrb.w	r3, [r8], #1
    dc7c:	220a      	movs	r2, #10
    dc7e:	3b30      	subs	r3, #48	; 0x30
    dc80:	4628      	mov	r0, r5
    dc82:	f7ff ff6b 	bl	db5c <__multadd>
    dc86:	45a0      	cmp	r8, r4
    dc88:	4601      	mov	r1, r0
    dc8a:	d1f5      	bne.n	dc78 <__s2b+0x78>
    dc8c:	f1a7 0408 	sub.w	r4, r7, #8
    dc90:	444c      	add	r4, r9
    dc92:	e7dc      	b.n	dc4e <__s2b+0x4e>
    dc94:	2100      	movs	r1, #0
    dc96:	e7cc      	b.n	dc32 <__s2b+0x32>
    dc98:	460a      	mov	r2, r1
    dc9a:	4b03      	ldr	r3, [pc, #12]	; (dca8 <__s2b+0xa8>)
    dc9c:	4803      	ldr	r0, [pc, #12]	; (dcac <__s2b+0xac>)
    dc9e:	21d3      	movs	r1, #211	; 0xd3
    dca0:	f004 f81e 	bl	11ce0 <__assert_func>
    dca4:	38e38e39 	.word	0x38e38e39
    dca8:	20000b7c 	.word	0x20000b7c
    dcac:	20000cf4 	.word	0x20000cf4

0000dcb0 <__hi0bits>:
    dcb0:	0c03      	lsrs	r3, r0, #16
    dcb2:	041b      	lsls	r3, r3, #16
    dcb4:	b9d3      	cbnz	r3, dcec <__hi0bits+0x3c>
    dcb6:	0400      	lsls	r0, r0, #16
    dcb8:	2310      	movs	r3, #16
    dcba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    dcbe:	bf04      	itt	eq
    dcc0:	0200      	lsleq	r0, r0, #8
    dcc2:	3308      	addeq	r3, #8
    dcc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    dcc8:	bf04      	itt	eq
    dcca:	0100      	lsleq	r0, r0, #4
    dccc:	3304      	addeq	r3, #4
    dcce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    dcd2:	bf04      	itt	eq
    dcd4:	0080      	lsleq	r0, r0, #2
    dcd6:	3302      	addeq	r3, #2
    dcd8:	2800      	cmp	r0, #0
    dcda:	db05      	blt.n	dce8 <__hi0bits+0x38>
    dcdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    dce0:	f103 0301 	add.w	r3, r3, #1
    dce4:	bf08      	it	eq
    dce6:	2320      	moveq	r3, #32
    dce8:	4618      	mov	r0, r3
    dcea:	4770      	bx	lr
    dcec:	2300      	movs	r3, #0
    dcee:	e7e4      	b.n	dcba <__hi0bits+0xa>

0000dcf0 <__lo0bits>:
    dcf0:	6803      	ldr	r3, [r0, #0]
    dcf2:	f013 0207 	ands.w	r2, r3, #7
    dcf6:	d008      	beq.n	dd0a <__lo0bits+0x1a>
    dcf8:	07d9      	lsls	r1, r3, #31
    dcfa:	d41f      	bmi.n	dd3c <__lo0bits+0x4c>
    dcfc:	079a      	lsls	r2, r3, #30
    dcfe:	d522      	bpl.n	dd46 <__lo0bits+0x56>
    dd00:	085b      	lsrs	r3, r3, #1
    dd02:	6003      	str	r3, [r0, #0]
    dd04:	2201      	movs	r2, #1
    dd06:	4610      	mov	r0, r2
    dd08:	4770      	bx	lr
    dd0a:	b299      	uxth	r1, r3
    dd0c:	b909      	cbnz	r1, dd12 <__lo0bits+0x22>
    dd0e:	0c1b      	lsrs	r3, r3, #16
    dd10:	2210      	movs	r2, #16
    dd12:	b2d9      	uxtb	r1, r3
    dd14:	b909      	cbnz	r1, dd1a <__lo0bits+0x2a>
    dd16:	3208      	adds	r2, #8
    dd18:	0a1b      	lsrs	r3, r3, #8
    dd1a:	0719      	lsls	r1, r3, #28
    dd1c:	bf04      	itt	eq
    dd1e:	091b      	lsreq	r3, r3, #4
    dd20:	3204      	addeq	r2, #4
    dd22:	0799      	lsls	r1, r3, #30
    dd24:	bf04      	itt	eq
    dd26:	089b      	lsreq	r3, r3, #2
    dd28:	3202      	addeq	r2, #2
    dd2a:	07d9      	lsls	r1, r3, #31
    dd2c:	d403      	bmi.n	dd36 <__lo0bits+0x46>
    dd2e:	085b      	lsrs	r3, r3, #1
    dd30:	f102 0201 	add.w	r2, r2, #1
    dd34:	d005      	beq.n	dd42 <__lo0bits+0x52>
    dd36:	6003      	str	r3, [r0, #0]
    dd38:	4610      	mov	r0, r2
    dd3a:	4770      	bx	lr
    dd3c:	2200      	movs	r2, #0
    dd3e:	4610      	mov	r0, r2
    dd40:	4770      	bx	lr
    dd42:	2220      	movs	r2, #32
    dd44:	e7df      	b.n	dd06 <__lo0bits+0x16>
    dd46:	089b      	lsrs	r3, r3, #2
    dd48:	2202      	movs	r2, #2
    dd4a:	6003      	str	r3, [r0, #0]
    dd4c:	4610      	mov	r0, r2
    dd4e:	4770      	bx	lr

0000dd50 <__i2b>:
    dd50:	b538      	push	{r3, r4, r5, lr}
    dd52:	6c43      	ldr	r3, [r0, #68]	; 0x44
    dd54:	4604      	mov	r4, r0
    dd56:	460d      	mov	r5, r1
    dd58:	b14b      	cbz	r3, dd6e <__i2b+0x1e>
    dd5a:	6858      	ldr	r0, [r3, #4]
    dd5c:	b1b0      	cbz	r0, dd8c <__i2b+0x3c>
    dd5e:	6802      	ldr	r2, [r0, #0]
    dd60:	605a      	str	r2, [r3, #4]
    dd62:	2200      	movs	r2, #0
    dd64:	2301      	movs	r3, #1
    dd66:	e9c0 3504 	strd	r3, r5, [r0, #16]
    dd6a:	60c2      	str	r2, [r0, #12]
    dd6c:	bd38      	pop	{r3, r4, r5, pc}
    dd6e:	2221      	movs	r2, #33	; 0x21
    dd70:	2104      	movs	r1, #4
    dd72:	f003 ffd5 	bl	11d20 <_calloc_r>
    dd76:	4603      	mov	r3, r0
    dd78:	6460      	str	r0, [r4, #68]	; 0x44
    dd7a:	2800      	cmp	r0, #0
    dd7c:	d1ed      	bne.n	dd5a <__i2b+0xa>
    dd7e:	4b09      	ldr	r3, [pc, #36]	; (dda4 <__i2b+0x54>)
    dd80:	4809      	ldr	r0, [pc, #36]	; (dda8 <__i2b+0x58>)
    dd82:	2200      	movs	r2, #0
    dd84:	f240 1145 	movw	r1, #325	; 0x145
    dd88:	f003 ffaa 	bl	11ce0 <__assert_func>
    dd8c:	221c      	movs	r2, #28
    dd8e:	2101      	movs	r1, #1
    dd90:	4620      	mov	r0, r4
    dd92:	f003 ffc5 	bl	11d20 <_calloc_r>
    dd96:	2800      	cmp	r0, #0
    dd98:	d0f1      	beq.n	dd7e <__i2b+0x2e>
    dd9a:	2201      	movs	r2, #1
    dd9c:	2302      	movs	r3, #2
    dd9e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    dda2:	e7de      	b.n	dd62 <__i2b+0x12>
    dda4:	20000b7c 	.word	0x20000b7c
    dda8:	20000cf4 	.word	0x20000cf4

0000ddac <__multiply>:
    ddac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ddb0:	690e      	ldr	r6, [r1, #16]
    ddb2:	6915      	ldr	r5, [r2, #16]
    ddb4:	42ae      	cmp	r6, r5
    ddb6:	b085      	sub	sp, #20
    ddb8:	4688      	mov	r8, r1
    ddba:	4614      	mov	r4, r2
    ddbc:	db05      	blt.n	ddca <__multiply+0x1e>
    ddbe:	462a      	mov	r2, r5
    ddc0:	4623      	mov	r3, r4
    ddc2:	4635      	mov	r5, r6
    ddc4:	460c      	mov	r4, r1
    ddc6:	4616      	mov	r6, r2
    ddc8:	4698      	mov	r8, r3
    ddca:	68a3      	ldr	r3, [r4, #8]
    ddcc:	6861      	ldr	r1, [r4, #4]
    ddce:	19af      	adds	r7, r5, r6
    ddd0:	42bb      	cmp	r3, r7
    ddd2:	bfb8      	it	lt
    ddd4:	3101      	addlt	r1, #1
    ddd6:	f7ff fe91 	bl	dafc <_Balloc>
    ddda:	9001      	str	r0, [sp, #4]
    dddc:	2800      	cmp	r0, #0
    ddde:	f000 8087 	beq.w	def0 <__multiply+0x144>
    dde2:	9b01      	ldr	r3, [sp, #4]
    dde4:	f103 0914 	add.w	r9, r3, #20
    dde8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    ddec:	45d1      	cmp	r9, sl
    ddee:	d205      	bcs.n	ddfc <__multiply+0x50>
    ddf0:	464b      	mov	r3, r9
    ddf2:	2200      	movs	r2, #0
    ddf4:	f843 2b04 	str.w	r2, [r3], #4
    ddf8:	459a      	cmp	sl, r3
    ddfa:	d8fb      	bhi.n	ddf4 <__multiply+0x48>
    ddfc:	f108 0814 	add.w	r8, r8, #20
    de00:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    de04:	f104 0314 	add.w	r3, r4, #20
    de08:	45d8      	cmp	r8, fp
    de0a:	461a      	mov	r2, r3
    de0c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    de10:	d25f      	bcs.n	ded2 <__multiply+0x126>
    de12:	1b2b      	subs	r3, r5, r4
    de14:	3b15      	subs	r3, #21
    de16:	f023 0303 	bic.w	r3, r3, #3
    de1a:	3304      	adds	r3, #4
    de1c:	3415      	adds	r4, #21
    de1e:	42a5      	cmp	r5, r4
    de20:	bf38      	it	cc
    de22:	2304      	movcc	r3, #4
    de24:	e9cd a702 	strd	sl, r7, [sp, #8]
    de28:	46ac      	mov	ip, r5
    de2a:	461f      	mov	r7, r3
    de2c:	4692      	mov	sl, r2
    de2e:	e005      	b.n	de3c <__multiply+0x90>
    de30:	0c09      	lsrs	r1, r1, #16
    de32:	d129      	bne.n	de88 <__multiply+0xdc>
    de34:	45c3      	cmp	fp, r8
    de36:	f109 0904 	add.w	r9, r9, #4
    de3a:	d948      	bls.n	dece <__multiply+0x122>
    de3c:	f858 1b04 	ldr.w	r1, [r8], #4
    de40:	b28d      	uxth	r5, r1
    de42:	2d00      	cmp	r5, #0
    de44:	d0f4      	beq.n	de30 <__multiply+0x84>
    de46:	4656      	mov	r6, sl
    de48:	464c      	mov	r4, r9
    de4a:	2300      	movs	r3, #0
    de4c:	f856 1b04 	ldr.w	r1, [r6], #4
    de50:	6822      	ldr	r2, [r4, #0]
    de52:	fa1f fe81 	uxth.w	lr, r1
    de56:	b290      	uxth	r0, r2
    de58:	0c09      	lsrs	r1, r1, #16
    de5a:	fb05 000e 	mla	r0, r5, lr, r0
    de5e:	0c12      	lsrs	r2, r2, #16
    de60:	4403      	add	r3, r0
    de62:	fb05 2201 	mla	r2, r5, r1, r2
    de66:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    de6a:	b29b      	uxth	r3, r3
    de6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    de70:	45b4      	cmp	ip, r6
    de72:	f844 3b04 	str.w	r3, [r4], #4
    de76:	ea4f 4312 	mov.w	r3, r2, lsr #16
    de7a:	d8e7      	bhi.n	de4c <__multiply+0xa0>
    de7c:	f849 3007 	str.w	r3, [r9, r7]
    de80:	f858 1c04 	ldr.w	r1, [r8, #-4]
    de84:	0c09      	lsrs	r1, r1, #16
    de86:	d0d5      	beq.n	de34 <__multiply+0x88>
    de88:	f8d9 3000 	ldr.w	r3, [r9]
    de8c:	4650      	mov	r0, sl
    de8e:	461a      	mov	r2, r3
    de90:	464c      	mov	r4, r9
    de92:	2600      	movs	r6, #0
    de94:	8805      	ldrh	r5, [r0, #0]
    de96:	0c12      	lsrs	r2, r2, #16
    de98:	fb01 2205 	mla	r2, r1, r5, r2
    de9c:	4416      	add	r6, r2
    de9e:	b29b      	uxth	r3, r3
    dea0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    dea4:	f844 3b04 	str.w	r3, [r4], #4
    dea8:	f850 5b04 	ldr.w	r5, [r0], #4
    deac:	6822      	ldr	r2, [r4, #0]
    deae:	0c2d      	lsrs	r5, r5, #16
    deb0:	b293      	uxth	r3, r2
    deb2:	fb01 3305 	mla	r3, r1, r5, r3
    deb6:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    deba:	4584      	cmp	ip, r0
    debc:	ea4f 4613 	mov.w	r6, r3, lsr #16
    dec0:	d8e8      	bhi.n	de94 <__multiply+0xe8>
    dec2:	45c3      	cmp	fp, r8
    dec4:	f849 3007 	str.w	r3, [r9, r7]
    dec8:	f109 0904 	add.w	r9, r9, #4
    decc:	d8b6      	bhi.n	de3c <__multiply+0x90>
    dece:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    ded2:	2f00      	cmp	r7, #0
    ded4:	dc02      	bgt.n	dedc <__multiply+0x130>
    ded6:	e005      	b.n	dee4 <__multiply+0x138>
    ded8:	3f01      	subs	r7, #1
    deda:	d003      	beq.n	dee4 <__multiply+0x138>
    dedc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    dee0:	2b00      	cmp	r3, #0
    dee2:	d0f9      	beq.n	ded8 <__multiply+0x12c>
    dee4:	9b01      	ldr	r3, [sp, #4]
    dee6:	4618      	mov	r0, r3
    dee8:	611f      	str	r7, [r3, #16]
    deea:	b005      	add	sp, #20
    deec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    def0:	4b03      	ldr	r3, [pc, #12]	; (df00 <__multiply+0x154>)
    def2:	4804      	ldr	r0, [pc, #16]	; (df04 <__multiply+0x158>)
    def4:	9a01      	ldr	r2, [sp, #4]
    def6:	f44f 71b1 	mov.w	r1, #354	; 0x162
    defa:	f003 fef1 	bl	11ce0 <__assert_func>
    defe:	bf00      	nop
    df00:	20000b7c 	.word	0x20000b7c
    df04:	20000cf4 	.word	0x20000cf4

0000df08 <__pow5mult>:
    df08:	f012 0303 	ands.w	r3, r2, #3
    df0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df10:	4614      	mov	r4, r2
    df12:	4606      	mov	r6, r0
    df14:	d132      	bne.n	df7c <__pow5mult+0x74>
    df16:	460d      	mov	r5, r1
    df18:	10a4      	asrs	r4, r4, #2
    df1a:	d020      	beq.n	df5e <__pow5mult+0x56>
    df1c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    df20:	f1b8 0f00 	cmp.w	r8, #0
    df24:	d033      	beq.n	df8e <__pow5mult+0x86>
    df26:	07e3      	lsls	r3, r4, #31
    df28:	f04f 0700 	mov.w	r7, #0
    df2c:	d407      	bmi.n	df3e <__pow5mult+0x36>
    df2e:	1064      	asrs	r4, r4, #1
    df30:	d015      	beq.n	df5e <__pow5mult+0x56>
    df32:	f8d8 0000 	ldr.w	r0, [r8]
    df36:	b1a8      	cbz	r0, df64 <__pow5mult+0x5c>
    df38:	4680      	mov	r8, r0
    df3a:	07e3      	lsls	r3, r4, #31
    df3c:	d5f7      	bpl.n	df2e <__pow5mult+0x26>
    df3e:	4642      	mov	r2, r8
    df40:	4629      	mov	r1, r5
    df42:	4630      	mov	r0, r6
    df44:	f7ff ff32 	bl	ddac <__multiply>
    df48:	b1b5      	cbz	r5, df78 <__pow5mult+0x70>
    df4a:	6869      	ldr	r1, [r5, #4]
    df4c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    df4e:	1064      	asrs	r4, r4, #1
    df50:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    df54:	602a      	str	r2, [r5, #0]
    df56:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    df5a:	4605      	mov	r5, r0
    df5c:	d1e9      	bne.n	df32 <__pow5mult+0x2a>
    df5e:	4628      	mov	r0, r5
    df60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df64:	4642      	mov	r2, r8
    df66:	4641      	mov	r1, r8
    df68:	4630      	mov	r0, r6
    df6a:	f7ff ff1f 	bl	ddac <__multiply>
    df6e:	f8c8 0000 	str.w	r0, [r8]
    df72:	6007      	str	r7, [r0, #0]
    df74:	4680      	mov	r8, r0
    df76:	e7e0      	b.n	df3a <__pow5mult+0x32>
    df78:	4605      	mov	r5, r0
    df7a:	e7d8      	b.n	df2e <__pow5mult+0x26>
    df7c:	3b01      	subs	r3, #1
    df7e:	4a0f      	ldr	r2, [pc, #60]	; (dfbc <__pow5mult+0xb4>)
    df80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    df84:	2300      	movs	r3, #0
    df86:	f7ff fde9 	bl	db5c <__multadd>
    df8a:	4605      	mov	r5, r0
    df8c:	e7c4      	b.n	df18 <__pow5mult+0x10>
    df8e:	2101      	movs	r1, #1
    df90:	4630      	mov	r0, r6
    df92:	f7ff fdb3 	bl	dafc <_Balloc>
    df96:	4680      	mov	r8, r0
    df98:	b140      	cbz	r0, dfac <__pow5mult+0xa4>
    df9a:	2301      	movs	r3, #1
    df9c:	f240 2271 	movw	r2, #625	; 0x271
    dfa0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    dfa4:	2300      	movs	r3, #0
    dfa6:	6430      	str	r0, [r6, #64]	; 0x40
    dfa8:	6003      	str	r3, [r0, #0]
    dfaa:	e7bc      	b.n	df26 <__pow5mult+0x1e>
    dfac:	4b04      	ldr	r3, [pc, #16]	; (dfc0 <__pow5mult+0xb8>)
    dfae:	4805      	ldr	r0, [pc, #20]	; (dfc4 <__pow5mult+0xbc>)
    dfb0:	4642      	mov	r2, r8
    dfb2:	f240 1145 	movw	r1, #325	; 0x145
    dfb6:	f003 fe93 	bl	11ce0 <__assert_func>
    dfba:	bf00      	nop
    dfbc:	20007d4c 	.word	0x20007d4c
    dfc0:	20000b7c 	.word	0x20000b7c
    dfc4:	20000cf4 	.word	0x20000cf4

0000dfc8 <__lshift>:
    dfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dfcc:	460d      	mov	r5, r1
    dfce:	4614      	mov	r4, r2
    dfd0:	692f      	ldr	r7, [r5, #16]
    dfd2:	68ab      	ldr	r3, [r5, #8]
    dfd4:	6849      	ldr	r1, [r1, #4]
    dfd6:	eb07 1762 	add.w	r7, r7, r2, asr #5
    dfda:	1c7e      	adds	r6, r7, #1
    dfdc:	429e      	cmp	r6, r3
    dfde:	4680      	mov	r8, r0
    dfe0:	ea4f 1962 	mov.w	r9, r2, asr #5
    dfe4:	dd04      	ble.n	dff0 <__lshift+0x28>
    dfe6:	005b      	lsls	r3, r3, #1
    dfe8:	429e      	cmp	r6, r3
    dfea:	f101 0101 	add.w	r1, r1, #1
    dfee:	dcfa      	bgt.n	dfe6 <__lshift+0x1e>
    dff0:	4640      	mov	r0, r8
    dff2:	f7ff fd83 	bl	dafc <_Balloc>
    dff6:	4684      	mov	ip, r0
    dff8:	2800      	cmp	r0, #0
    dffa:	d052      	beq.n	e0a2 <__lshift+0xda>
    dffc:	f1b9 0f00 	cmp.w	r9, #0
    e000:	f100 0214 	add.w	r2, r0, #20
    e004:	dd0e      	ble.n	e024 <__lshift+0x5c>
    e006:	f109 0105 	add.w	r1, r9, #5
    e00a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    e00e:	4613      	mov	r3, r2
    e010:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    e014:	2000      	movs	r0, #0
    e016:	f843 0b04 	str.w	r0, [r3], #4
    e01a:	428b      	cmp	r3, r1
    e01c:	d1fb      	bne.n	e016 <__lshift+0x4e>
    e01e:	f1ae 0314 	sub.w	r3, lr, #20
    e022:	441a      	add	r2, r3
    e024:	6929      	ldr	r1, [r5, #16]
    e026:	f105 0314 	add.w	r3, r5, #20
    e02a:	f014 0e1f 	ands.w	lr, r4, #31
    e02e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    e032:	d02e      	beq.n	e092 <__lshift+0xca>
    e034:	f1ce 0920 	rsb	r9, lr, #32
    e038:	4610      	mov	r0, r2
    e03a:	f04f 0a00 	mov.w	sl, #0
    e03e:	681c      	ldr	r4, [r3, #0]
    e040:	fa04 f40e 	lsl.w	r4, r4, lr
    e044:	ea44 040a 	orr.w	r4, r4, sl
    e048:	f840 4b04 	str.w	r4, [r0], #4
    e04c:	f853 4b04 	ldr.w	r4, [r3], #4
    e050:	4299      	cmp	r1, r3
    e052:	fa24 fa09 	lsr.w	sl, r4, r9
    e056:	d8f2      	bhi.n	e03e <__lshift+0x76>
    e058:	1b4b      	subs	r3, r1, r5
    e05a:	3b15      	subs	r3, #21
    e05c:	f023 0303 	bic.w	r3, r3, #3
    e060:	3304      	adds	r3, #4
    e062:	f105 0015 	add.w	r0, r5, #21
    e066:	4281      	cmp	r1, r0
    e068:	bf38      	it	cc
    e06a:	2304      	movcc	r3, #4
    e06c:	f1ba 0f00 	cmp.w	sl, #0
    e070:	bf18      	it	ne
    e072:	4637      	movne	r7, r6
    e074:	f842 a003 	str.w	sl, [r2, r3]
    e078:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    e07c:	686a      	ldr	r2, [r5, #4]
    e07e:	f8cc 7010 	str.w	r7, [ip, #16]
    e082:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e086:	6029      	str	r1, [r5, #0]
    e088:	4660      	mov	r0, ip
    e08a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    e08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e092:	3a04      	subs	r2, #4
    e094:	f853 0b04 	ldr.w	r0, [r3], #4
    e098:	f842 0f04 	str.w	r0, [r2, #4]!
    e09c:	4299      	cmp	r1, r3
    e09e:	d8f9      	bhi.n	e094 <__lshift+0xcc>
    e0a0:	e7ea      	b.n	e078 <__lshift+0xb0>
    e0a2:	4b03      	ldr	r3, [pc, #12]	; (e0b0 <__lshift+0xe8>)
    e0a4:	4803      	ldr	r0, [pc, #12]	; (e0b4 <__lshift+0xec>)
    e0a6:	4662      	mov	r2, ip
    e0a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    e0ac:	f003 fe18 	bl	11ce0 <__assert_func>
    e0b0:	20000b7c 	.word	0x20000b7c
    e0b4:	20000cf4 	.word	0x20000cf4

0000e0b8 <__mcmp>:
    e0b8:	690b      	ldr	r3, [r1, #16]
    e0ba:	4684      	mov	ip, r0
    e0bc:	6900      	ldr	r0, [r0, #16]
    e0be:	1ac0      	subs	r0, r0, r3
    e0c0:	d116      	bne.n	e0f0 <__mcmp+0x38>
    e0c2:	f10c 0c14 	add.w	ip, ip, #20
    e0c6:	3114      	adds	r1, #20
    e0c8:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    e0cc:	b410      	push	{r4}
    e0ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    e0d2:	e001      	b.n	e0d8 <__mcmp+0x20>
    e0d4:	4594      	cmp	ip, r2
    e0d6:	d208      	bcs.n	e0ea <__mcmp+0x32>
    e0d8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    e0dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    e0e0:	428c      	cmp	r4, r1
    e0e2:	d0f7      	beq.n	e0d4 <__mcmp+0x1c>
    e0e4:	d205      	bcs.n	e0f2 <__mcmp+0x3a>
    e0e6:	f04f 30ff 	mov.w	r0, #4294967295
    e0ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    e0ee:	4770      	bx	lr
    e0f0:	4770      	bx	lr
    e0f2:	2001      	movs	r0, #1
    e0f4:	f85d 4b04 	ldr.w	r4, [sp], #4
    e0f8:	4770      	bx	lr
    e0fa:	bf00      	nop

0000e0fc <__mdiff>:
    e0fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e100:	690f      	ldr	r7, [r1, #16]
    e102:	6913      	ldr	r3, [r2, #16]
    e104:	1aff      	subs	r7, r7, r3
    e106:	2f00      	cmp	r7, #0
    e108:	460e      	mov	r6, r1
    e10a:	4690      	mov	r8, r2
    e10c:	d17f      	bne.n	e20e <__mdiff+0x112>
    e10e:	f101 0514 	add.w	r5, r1, #20
    e112:	3214      	adds	r2, #20
    e114:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    e118:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    e11c:	e001      	b.n	e122 <__mdiff+0x26>
    e11e:	429d      	cmp	r5, r3
    e120:	d278      	bcs.n	e214 <__mdiff+0x118>
    e122:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    e126:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    e12a:	42a1      	cmp	r1, r4
    e12c:	d0f7      	beq.n	e11e <__mdiff+0x22>
    e12e:	d369      	bcc.n	e204 <__mdiff+0x108>
    e130:	6871      	ldr	r1, [r6, #4]
    e132:	f7ff fce3 	bl	dafc <_Balloc>
    e136:	4681      	mov	r9, r0
    e138:	2800      	cmp	r0, #0
    e13a:	d077      	beq.n	e22c <__mdiff+0x130>
    e13c:	6935      	ldr	r5, [r6, #16]
    e13e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    e142:	60c7      	str	r7, [r0, #12]
    e144:	f108 0e14 	add.w	lr, r8, #20
    e148:	f106 0014 	add.w	r0, r6, #20
    e14c:	f109 0a14 	add.w	sl, r9, #20
    e150:	f106 0110 	add.w	r1, r6, #16
    e154:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    e158:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    e15c:	4656      	mov	r6, sl
    e15e:	f04f 0c00 	mov.w	ip, #0
    e162:	f85e 4b04 	ldr.w	r4, [lr], #4
    e166:	f851 bf04 	ldr.w	fp, [r1, #4]!
    e16a:	b2a3      	uxth	r3, r4
    e16c:	fa1c fc8b 	uxtah	ip, ip, fp
    e170:	ebac 0303 	sub.w	r3, ip, r3
    e174:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    e178:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    e17c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    e180:	b29b      	uxth	r3, r3
    e182:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    e186:	4572      	cmp	r2, lr
    e188:	f846 3b04 	str.w	r3, [r6], #4
    e18c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    e190:	d8e7      	bhi.n	e162 <__mdiff+0x66>
    e192:	eba2 0108 	sub.w	r1, r2, r8
    e196:	3915      	subs	r1, #21
    e198:	f108 0815 	add.w	r8, r8, #21
    e19c:	4542      	cmp	r2, r8
    e19e:	f021 0403 	bic.w	r4, r1, #3
    e1a2:	f104 0404 	add.w	r4, r4, #4
    e1a6:	bf38      	it	cc
    e1a8:	2404      	movcc	r4, #4
    e1aa:	4420      	add	r0, r4
    e1ac:	f021 0203 	bic.w	r2, r1, #3
    e1b0:	bf38      	it	cc
    e1b2:	2200      	movcc	r2, #0
    e1b4:	4287      	cmp	r7, r0
    e1b6:	4452      	add	r2, sl
    e1b8:	4454      	add	r4, sl
    e1ba:	d918      	bls.n	e1ee <__mdiff+0xf2>
    e1bc:	4626      	mov	r6, r4
    e1be:	4601      	mov	r1, r0
    e1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    e1c4:	fa1c fc83 	uxtah	ip, ip, r3
    e1c8:	ea4f 422c 	mov.w	r2, ip, asr #16
    e1cc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    e1d0:	fa1f fc8c 	uxth.w	ip, ip
    e1d4:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    e1d8:	428f      	cmp	r7, r1
    e1da:	f846 3b04 	str.w	r3, [r6], #4
    e1de:	ea4f 4c22 	mov.w	ip, r2, asr #16
    e1e2:	d8ed      	bhi.n	e1c0 <__mdiff+0xc4>
    e1e4:	3f01      	subs	r7, #1
    e1e6:	1a3f      	subs	r7, r7, r0
    e1e8:	f027 0703 	bic.w	r7, r7, #3
    e1ec:	19e2      	adds	r2, r4, r7
    e1ee:	b923      	cbnz	r3, e1fa <__mdiff+0xfe>
    e1f0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    e1f4:	3d01      	subs	r5, #1
    e1f6:	2b00      	cmp	r3, #0
    e1f8:	d0fa      	beq.n	e1f0 <__mdiff+0xf4>
    e1fa:	f8c9 5010 	str.w	r5, [r9, #16]
    e1fe:	4648      	mov	r0, r9
    e200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e204:	4633      	mov	r3, r6
    e206:	2701      	movs	r7, #1
    e208:	4646      	mov	r6, r8
    e20a:	4698      	mov	r8, r3
    e20c:	e790      	b.n	e130 <__mdiff+0x34>
    e20e:	dbf9      	blt.n	e204 <__mdiff+0x108>
    e210:	2700      	movs	r7, #0
    e212:	e78d      	b.n	e130 <__mdiff+0x34>
    e214:	2100      	movs	r1, #0
    e216:	f7ff fc71 	bl	dafc <_Balloc>
    e21a:	4681      	mov	r9, r0
    e21c:	b168      	cbz	r0, e23a <__mdiff+0x13e>
    e21e:	2201      	movs	r2, #1
    e220:	2300      	movs	r3, #0
    e222:	e9c9 2304 	strd	r2, r3, [r9, #16]
    e226:	4648      	mov	r0, r9
    e228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e22c:	4b06      	ldr	r3, [pc, #24]	; (e248 <__mdiff+0x14c>)
    e22e:	4807      	ldr	r0, [pc, #28]	; (e24c <__mdiff+0x150>)
    e230:	464a      	mov	r2, r9
    e232:	f240 2145 	movw	r1, #581	; 0x245
    e236:	f003 fd53 	bl	11ce0 <__assert_func>
    e23a:	4b03      	ldr	r3, [pc, #12]	; (e248 <__mdiff+0x14c>)
    e23c:	4803      	ldr	r0, [pc, #12]	; (e24c <__mdiff+0x150>)
    e23e:	464a      	mov	r2, r9
    e240:	f240 2137 	movw	r1, #567	; 0x237
    e244:	f003 fd4c 	bl	11ce0 <__assert_func>
    e248:	20000b7c 	.word	0x20000b7c
    e24c:	20000cf4 	.word	0x20000cf4

0000e250 <__ulp>:
    e250:	b082      	sub	sp, #8
    e252:	ed8d 0b00 	vstr	d0, [sp]
    e256:	4b16      	ldr	r3, [pc, #88]	; (e2b0 <__ulp+0x60>)
    e258:	9a01      	ldr	r2, [sp, #4]
    e25a:	4013      	ands	r3, r2
    e25c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    e260:	2b00      	cmp	r3, #0
    e262:	dd06      	ble.n	e272 <__ulp+0x22>
    e264:	2200      	movs	r2, #0
    e266:	4619      	mov	r1, r3
    e268:	4610      	mov	r0, r2
    e26a:	ec41 0b10 	vmov	d0, r0, r1
    e26e:	b002      	add	sp, #8
    e270:	4770      	bx	lr
    e272:	425b      	negs	r3, r3
    e274:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    e278:	ea4f 5223 	mov.w	r2, r3, asr #20
    e27c:	da09      	bge.n	e292 <__ulp+0x42>
    e27e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    e282:	4113      	asrs	r3, r2
    e284:	2200      	movs	r2, #0
    e286:	4619      	mov	r1, r3
    e288:	4610      	mov	r0, r2
    e28a:	ec41 0b10 	vmov	d0, r0, r1
    e28e:	b002      	add	sp, #8
    e290:	4770      	bx	lr
    e292:	f1a2 0314 	sub.w	r3, r2, #20
    e296:	2b1e      	cmp	r3, #30
    e298:	bfda      	itte	le
    e29a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    e29e:	40da      	lsrle	r2, r3
    e2a0:	2201      	movgt	r2, #1
    e2a2:	2300      	movs	r3, #0
    e2a4:	4619      	mov	r1, r3
    e2a6:	4610      	mov	r0, r2
    e2a8:	ec41 0b10 	vmov	d0, r0, r1
    e2ac:	b002      	add	sp, #8
    e2ae:	4770      	bx	lr
    e2b0:	7ff00000 	.word	0x7ff00000

0000e2b4 <__b2d>:
    e2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2b6:	6904      	ldr	r4, [r0, #16]
    e2b8:	f100 0614 	add.w	r6, r0, #20
    e2bc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    e2c0:	1f27      	subs	r7, r4, #4
    e2c2:	f854 5c04 	ldr.w	r5, [r4, #-4]
    e2c6:	4628      	mov	r0, r5
    e2c8:	f7ff fcf2 	bl	dcb0 <__hi0bits>
    e2cc:	f1c0 0320 	rsb	r3, r0, #32
    e2d0:	280a      	cmp	r0, #10
    e2d2:	600b      	str	r3, [r1, #0]
    e2d4:	dd1b      	ble.n	e30e <__b2d+0x5a>
    e2d6:	42be      	cmp	r6, r7
    e2d8:	d20b      	bcs.n	e2f2 <__b2d+0x3e>
    e2da:	380b      	subs	r0, #11
    e2dc:	f854 1c08 	ldr.w	r1, [r4, #-8]
    e2e0:	d12e      	bne.n	e340 <__b2d+0x8c>
    e2e2:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    e2e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    e2ea:	460a      	mov	r2, r1
    e2ec:	ec43 2b10 	vmov	d0, r2, r3
    e2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e2f2:	f1b0 010b 	subs.w	r1, r0, #11
    e2f6:	d0f4      	beq.n	e2e2 <__b2d+0x2e>
    e2f8:	fa05 f101 	lsl.w	r1, r5, r1
    e2fc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    e300:	2100      	movs	r1, #0
    e302:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    e306:	460a      	mov	r2, r1
    e308:	ec43 2b10 	vmov	d0, r2, r3
    e30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e30e:	f1c0 0c0b 	rsb	ip, r0, #11
    e312:	fa25 f10c 	lsr.w	r1, r5, ip
    e316:	42be      	cmp	r6, r7
    e318:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    e31c:	bf38      	it	cc
    e31e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    e322:	f100 0015 	add.w	r0, r0, #21
    e326:	bf34      	ite	cc
    e328:	fa21 f10c 	lsrcc.w	r1, r1, ip
    e32c:	2100      	movcs	r1, #0
    e32e:	fa05 f000 	lsl.w	r0, r5, r0
    e332:	4301      	orrs	r1, r0
    e334:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    e338:	460a      	mov	r2, r1
    e33a:	ec43 2b10 	vmov	d0, r2, r3
    e33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e340:	f1c0 0c20 	rsb	ip, r0, #32
    e344:	4085      	lsls	r5, r0
    e346:	fa21 f30c 	lsr.w	r3, r1, ip
    e34a:	ea45 0703 	orr.w	r7, r5, r3
    e34e:	f1a4 0508 	sub.w	r5, r4, #8
    e352:	42ae      	cmp	r6, r5
    e354:	fa01 f100 	lsl.w	r1, r1, r0
    e358:	bf3c      	itt	cc
    e35a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    e35e:	fa20 f00c 	lsrcc.w	r0, r0, ip
    e362:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    e366:	bf38      	it	cc
    e368:	4301      	orrcc	r1, r0
    e36a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    e36e:	460a      	mov	r2, r1
    e370:	ec43 2b10 	vmov	d0, r2, r3
    e374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e376:	bf00      	nop

0000e378 <__d2b>:
    e378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e37c:	4688      	mov	r8, r1
    e37e:	b083      	sub	sp, #12
    e380:	2101      	movs	r1, #1
    e382:	ec57 6b10 	vmov	r6, r7, d0
    e386:	4615      	mov	r5, r2
    e388:	f7ff fbb8 	bl	dafc <_Balloc>
    e38c:	4604      	mov	r4, r0
    e38e:	2800      	cmp	r0, #0
    e390:	d051      	beq.n	e436 <__d2b+0xbe>
    e392:	f3c7 590a 	ubfx	r9, r7, #20, #11
    e396:	f3c7 0313 	ubfx	r3, r7, #0, #20
    e39a:	f1b9 0f00 	cmp.w	r9, #0
    e39e:	d001      	beq.n	e3a4 <__d2b+0x2c>
    e3a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e3a4:	2e00      	cmp	r6, #0
    e3a6:	9301      	str	r3, [sp, #4]
    e3a8:	d118      	bne.n	e3dc <__d2b+0x64>
    e3aa:	a801      	add	r0, sp, #4
    e3ac:	f7ff fca0 	bl	dcf0 <__lo0bits>
    e3b0:	9a01      	ldr	r2, [sp, #4]
    e3b2:	6162      	str	r2, [r4, #20]
    e3b4:	2201      	movs	r2, #1
    e3b6:	f100 0320 	add.w	r3, r0, #32
    e3ba:	6122      	str	r2, [r4, #16]
    e3bc:	f1b9 0f00 	cmp.w	r9, #0
    e3c0:	d025      	beq.n	e40e <__d2b+0x96>
    e3c2:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    e3c6:	eb09 0203 	add.w	r2, r9, r3
    e3ca:	4620      	mov	r0, r4
    e3cc:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    e3d0:	f8c8 2000 	str.w	r2, [r8]
    e3d4:	602b      	str	r3, [r5, #0]
    e3d6:	b003      	add	sp, #12
    e3d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e3dc:	4668      	mov	r0, sp
    e3de:	9600      	str	r6, [sp, #0]
    e3e0:	f7ff fc86 	bl	dcf0 <__lo0bits>
    e3e4:	4603      	mov	r3, r0
    e3e6:	b310      	cbz	r0, e42e <__d2b+0xb6>
    e3e8:	e9dd 0200 	ldrd	r0, r2, [sp]
    e3ec:	f1c3 0120 	rsb	r1, r3, #32
    e3f0:	fa02 f101 	lsl.w	r1, r2, r1
    e3f4:	4301      	orrs	r1, r0
    e3f6:	40da      	lsrs	r2, r3
    e3f8:	6161      	str	r1, [r4, #20]
    e3fa:	9201      	str	r2, [sp, #4]
    e3fc:	2a00      	cmp	r2, #0
    e3fe:	61a2      	str	r2, [r4, #24]
    e400:	bf14      	ite	ne
    e402:	2202      	movne	r2, #2
    e404:	2201      	moveq	r2, #1
    e406:	6122      	str	r2, [r4, #16]
    e408:	f1b9 0f00 	cmp.w	r9, #0
    e40c:	d1d9      	bne.n	e3c2 <__d2b+0x4a>
    e40e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    e412:	f8c8 3000 	str.w	r3, [r8]
    e416:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    e41a:	6918      	ldr	r0, [r3, #16]
    e41c:	f7ff fc48 	bl	dcb0 <__hi0bits>
    e420:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    e424:	4620      	mov	r0, r4
    e426:	602b      	str	r3, [r5, #0]
    e428:	b003      	add	sp, #12
    e42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e42e:	9a00      	ldr	r2, [sp, #0]
    e430:	6162      	str	r2, [r4, #20]
    e432:	9a01      	ldr	r2, [sp, #4]
    e434:	e7e2      	b.n	e3fc <__d2b+0x84>
    e436:	4b03      	ldr	r3, [pc, #12]	; (e444 <__d2b+0xcc>)
    e438:	4803      	ldr	r0, [pc, #12]	; (e448 <__d2b+0xd0>)
    e43a:	4622      	mov	r2, r4
    e43c:	f240 310f 	movw	r1, #783	; 0x30f
    e440:	f003 fc4e 	bl	11ce0 <__assert_func>
    e444:	20000b7c 	.word	0x20000b7c
    e448:	20000cf4 	.word	0x20000cf4

0000e44c <__ratio>:
    e44c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e44e:	b083      	sub	sp, #12
    e450:	460e      	mov	r6, r1
    e452:	4669      	mov	r1, sp
    e454:	4607      	mov	r7, r0
    e456:	f7ff ff2d 	bl	e2b4 <__b2d>
    e45a:	a901      	add	r1, sp, #4
    e45c:	4630      	mov	r0, r6
    e45e:	ec55 4b10 	vmov	r4, r5, d0
    e462:	eeb0 7b40 	vmov.f64	d7, d0
    e466:	f7ff ff25 	bl	e2b4 <__b2d>
    e46a:	6933      	ldr	r3, [r6, #16]
    e46c:	693a      	ldr	r2, [r7, #16]
    e46e:	1ad2      	subs	r2, r2, r3
    e470:	e9dd 3100 	ldrd	r3, r1, [sp]
    e474:	1a5b      	subs	r3, r3, r1
    e476:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    e47a:	2b00      	cmp	r3, #0
    e47c:	dd09      	ble.n	e492 <__ratio+0x46>
    e47e:	ee17 2a90 	vmov	r2, s15
    e482:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    e486:	ec45 4b17 	vmov	d7, r4, r5
    e48a:	ee87 0b00 	vdiv.f64	d0, d7, d0
    e48e:	b003      	add	sp, #12
    e490:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e492:	ee10 2a90 	vmov	r2, s1
    e496:	ec51 0b10 	vmov	r0, r1, d0
    e49a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    e49e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    e4a2:	ec41 0b10 	vmov	d0, r0, r1
    e4a6:	ee87 0b00 	vdiv.f64	d0, d7, d0
    e4aa:	b003      	add	sp, #12
    e4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e4ae:	bf00      	nop

0000e4b0 <__copybits>:
    e4b0:	3901      	subs	r1, #1
    e4b2:	1149      	asrs	r1, r1, #5
    e4b4:	f101 0c01 	add.w	ip, r1, #1
    e4b8:	6911      	ldr	r1, [r2, #16]
    e4ba:	f102 0314 	add.w	r3, r2, #20
    e4be:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    e4c2:	428b      	cmp	r3, r1
    e4c4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    e4c8:	d217      	bcs.n	e4fa <__copybits+0x4a>
    e4ca:	b510      	push	{r4, lr}
    e4cc:	f1a0 0e04 	sub.w	lr, r0, #4
    e4d0:	f853 4b04 	ldr.w	r4, [r3], #4
    e4d4:	f84e 4f04 	str.w	r4, [lr, #4]!
    e4d8:	4299      	cmp	r1, r3
    e4da:	d8f9      	bhi.n	e4d0 <__copybits+0x20>
    e4dc:	1a8a      	subs	r2, r1, r2
    e4de:	f1a2 0315 	sub.w	r3, r2, #21
    e4e2:	f023 0303 	bic.w	r3, r3, #3
    e4e6:	3304      	adds	r3, #4
    e4e8:	4418      	add	r0, r3
    e4ea:	4584      	cmp	ip, r0
    e4ec:	d904      	bls.n	e4f8 <__copybits+0x48>
    e4ee:	2300      	movs	r3, #0
    e4f0:	f840 3b04 	str.w	r3, [r0], #4
    e4f4:	4584      	cmp	ip, r0
    e4f6:	d8fb      	bhi.n	e4f0 <__copybits+0x40>
    e4f8:	bd10      	pop	{r4, pc}
    e4fa:	4584      	cmp	ip, r0
    e4fc:	d905      	bls.n	e50a <__copybits+0x5a>
    e4fe:	2300      	movs	r3, #0
    e500:	f840 3b04 	str.w	r3, [r0], #4
    e504:	4584      	cmp	ip, r0
    e506:	d8fb      	bhi.n	e500 <__copybits+0x50>
    e508:	4770      	bx	lr
    e50a:	4770      	bx	lr

0000e50c <__any_on>:
    e50c:	6903      	ldr	r3, [r0, #16]
    e50e:	114a      	asrs	r2, r1, #5
    e510:	4293      	cmp	r3, r2
    e512:	f100 0014 	add.w	r0, r0, #20
    e516:	da09      	bge.n	e52c <__any_on+0x20>
    e518:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    e51c:	e002      	b.n	e524 <__any_on+0x18>
    e51e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    e522:	b9c2      	cbnz	r2, e556 <__any_on+0x4a>
    e524:	4283      	cmp	r3, r0
    e526:	d8fa      	bhi.n	e51e <__any_on+0x12>
    e528:	2000      	movs	r0, #0
    e52a:	4770      	bx	lr
    e52c:	dd10      	ble.n	e550 <__any_on+0x44>
    e52e:	f011 011f 	ands.w	r1, r1, #31
    e532:	d00d      	beq.n	e550 <__any_on+0x44>
    e534:	b410      	push	{r4}
    e536:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    e53a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    e53e:	fa24 f201 	lsr.w	r2, r4, r1
    e542:	408a      	lsls	r2, r1
    e544:	4294      	cmp	r4, r2
    e546:	d00c      	beq.n	e562 <__any_on+0x56>
    e548:	2001      	movs	r0, #1
    e54a:	f85d 4b04 	ldr.w	r4, [sp], #4
    e54e:	4770      	bx	lr
    e550:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    e554:	e7e6      	b.n	e524 <__any_on+0x18>
    e556:	2001      	movs	r0, #1
    e558:	4770      	bx	lr
    e55a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    e55e:	2a00      	cmp	r2, #0
    e560:	d1f2      	bne.n	e548 <__any_on+0x3c>
    e562:	4283      	cmp	r3, r0
    e564:	d8f9      	bhi.n	e55a <__any_on+0x4e>
    e566:	2000      	movs	r0, #0
    e568:	f85d 4b04 	ldr.w	r4, [sp], #4
    e56c:	4770      	bx	lr
    e56e:	bf00      	nop

0000e570 <__ascii_wctomb>:
    e570:	b149      	cbz	r1, e586 <__ascii_wctomb+0x16>
    e572:	2aff      	cmp	r2, #255	; 0xff
    e574:	d802      	bhi.n	e57c <__ascii_wctomb+0xc>
    e576:	700a      	strb	r2, [r1, #0]
    e578:	2001      	movs	r0, #1
    e57a:	4770      	bx	lr
    e57c:	238a      	movs	r3, #138	; 0x8a
    e57e:	6003      	str	r3, [r0, #0]
    e580:	f04f 30ff 	mov.w	r0, #4294967295
    e584:	4770      	bx	lr
    e586:	4608      	mov	r0, r1
    e588:	4770      	bx	lr
    e58a:	bf00      	nop
    e58c:	0000      	movs	r0, r0
	...

0000e590 <_svfprintf_r>:
    e590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e594:	ed2d 8b08 	vpush	{d8-d11}
    e598:	b0d1      	sub	sp, #324	; 0x144
    e59a:	460c      	mov	r4, r1
    e59c:	ee0b 1a10 	vmov	s22, r1
    e5a0:	4690      	mov	r8, r2
    e5a2:	9308      	str	r3, [sp, #32]
    e5a4:	4683      	mov	fp, r0
    e5a6:	f003 fb59 	bl	11c5c <_localeconv_r>
    e5aa:	6803      	ldr	r3, [r0, #0]
    e5ac:	9312      	str	r3, [sp, #72]	; 0x48
    e5ae:	4618      	mov	r0, r3
    e5b0:	f7fe fc66 	bl	ce80 <strlen>
    e5b4:	af20      	add	r7, sp, #128	; 0x80
    e5b6:	9010      	str	r0, [sp, #64]	; 0x40
    e5b8:	2208      	movs	r2, #8
    e5ba:	2100      	movs	r1, #0
    e5bc:	4638      	mov	r0, r7
    e5be:	f7fe f91d 	bl	c7fc <memset>
    e5c2:	89a3      	ldrh	r3, [r4, #12]
    e5c4:	061b      	lsls	r3, r3, #24
    e5c6:	d503      	bpl.n	e5d0 <_svfprintf_r+0x40>
    e5c8:	6923      	ldr	r3, [r4, #16]
    e5ca:	2b00      	cmp	r3, #0
    e5cc:	f000 8755 	beq.w	f47a <_svfprintf_r+0xeea>
    e5d0:	2300      	movs	r3, #0
    e5d2:	ed9f 8b83 	vldr	d8, [pc, #524]	; e7e0 <_svfprintf_r+0x250>
    e5d6:	ed9f 9b84 	vldr	d9, [pc, #528]	; e7e8 <_svfprintf_r+0x258>
    e5da:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    e5de:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    e5e2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    e5e6:	aa27      	add	r2, sp, #156	; 0x9c
    e5e8:	930e      	str	r3, [sp, #56]	; 0x38
    e5ea:	9224      	str	r2, [sp, #144]	; 0x90
    e5ec:	4692      	mov	sl, r2
    e5ee:	9311      	str	r3, [sp, #68]	; 0x44
    e5f0:	9304      	str	r3, [sp, #16]
    e5f2:	4644      	mov	r4, r8
    e5f4:	46a1      	mov	r9, r4
    e5f6:	4b7e      	ldr	r3, [pc, #504]	; (e7f0 <_svfprintf_r+0x260>)
    e5f8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    e5fc:	f7fe f9c8 	bl	c990 <__locale_mb_cur_max>
    e600:	464a      	mov	r2, r9
    e602:	4603      	mov	r3, r0
    e604:	a91c      	add	r1, sp, #112	; 0x70
    e606:	9700      	str	r7, [sp, #0]
    e608:	4658      	mov	r0, fp
    e60a:	47a8      	blx	r5
    e60c:	2800      	cmp	r0, #0
    e60e:	f000 80b0 	beq.w	e772 <_svfprintf_r+0x1e2>
    e612:	f2c0 80a6 	blt.w	e762 <_svfprintf_r+0x1d2>
    e616:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    e618:	2a25      	cmp	r2, #37	; 0x25
    e61a:	4603      	mov	r3, r0
    e61c:	d001      	beq.n	e622 <_svfprintf_r+0x92>
    e61e:	4499      	add	r9, r3
    e620:	e7e9      	b.n	e5f6 <_svfprintf_r+0x66>
    e622:	ebb9 0504 	subs.w	r5, r9, r4
    e626:	4606      	mov	r6, r0
    e628:	f040 80a7 	bne.w	e77a <_svfprintf_r+0x1ea>
    e62c:	2300      	movs	r3, #0
    e62e:	f04f 32ff 	mov.w	r2, #4294967295
    e632:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    e636:	4698      	mov	r8, r3
    e638:	9306      	str	r3, [sp, #24]
    e63a:	f109 0901 	add.w	r9, r9, #1
    e63e:	f899 3000 	ldrb.w	r3, [r9]
    e642:	9203      	str	r2, [sp, #12]
    e644:	252b      	movs	r5, #43	; 0x2b
    e646:	2620      	movs	r6, #32
    e648:	f109 0901 	add.w	r9, r9, #1
    e64c:	f1a3 0220 	sub.w	r2, r3, #32
    e650:	2a5a      	cmp	r2, #90	; 0x5a
    e652:	f200 80cf 	bhi.w	e7f4 <_svfprintf_r+0x264>
    e656:	e8df f012 	tbh	[pc, r2, lsl #1]
    e65a:	02e8      	.short	0x02e8
    e65c:	00cd00cd 	.word	0x00cd00cd
    e660:	00cd02e3 	.word	0x00cd02e3
    e664:	00cd00cd 	.word	0x00cd00cd
    e668:	00cd006a 	.word	0x00cd006a
    e66c:	020500cd 	.word	0x020500cd
    e670:	00cd0284 	.word	0x00cd0284
    e674:	02c90210 	.word	0x02c90210
    e678:	02bd00cd 	.word	0x02bd00cd
    e67c:	005b005b 	.word	0x005b005b
    e680:	005b005b 	.word	0x005b005b
    e684:	005b005b 	.word	0x005b005b
    e688:	005b005b 	.word	0x005b005b
    e68c:	00cd005b 	.word	0x00cd005b
    e690:	00cd00cd 	.word	0x00cd00cd
    e694:	00cd00cd 	.word	0x00cd00cd
    e698:	00cd00cd 	.word	0x00cd00cd
    e69c:	00cd0153 	.word	0x00cd0153
    e6a0:	021a0183 	.word	0x021a0183
    e6a4:	01530153 	.word	0x01530153
    e6a8:	00cd0153 	.word	0x00cd0153
    e6ac:	00cd00cd 	.word	0x00cd00cd
    e6b0:	021500cd 	.word	0x021500cd
    e6b4:	00cd00cd 	.word	0x00cd00cd
    e6b8:	00cd0296 	.word	0x00cd0296
    e6bc:	00cd00cd 	.word	0x00cd00cd
    e6c0:	00cd01ab 	.word	0x00cd01ab
    e6c4:	00cd02aa 	.word	0x00cd02aa
    e6c8:	06e300cd 	.word	0x06e300cd
    e6cc:	00cd00cd 	.word	0x00cd00cd
    e6d0:	00cd00cd 	.word	0x00cd00cd
    e6d4:	00cd00cd 	.word	0x00cd00cd
    e6d8:	00cd00cd 	.word	0x00cd00cd
    e6dc:	00cd0153 	.word	0x00cd0153
    e6e0:	01de0183 	.word	0x01de0183
    e6e4:	01530153 	.word	0x01530153
    e6e8:	02770153 	.word	0x02770153
    e6ec:	007f01de 	.word	0x007f01de
    e6f0:	028900cd 	.word	0x028900cd
    e6f4:	025f00cd 	.word	0x025f00cd
    e6f8:	022f06e0 	.word	0x022f06e0
    e6fc:	00cd007f 	.word	0x00cd007f
    e700:	007c01ab 	.word	0x007c01ab
    e704:	00cd06b8 	.word	0x00cd06b8
    e708:	06bd00cd 	.word	0x06bd00cd
    e70c:	007c00cd 	.word	0x007c00cd
    e710:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e714:	2100      	movs	r1, #0
    e716:	f819 3b01 	ldrb.w	r3, [r9], #1
    e71a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    e71e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    e722:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e726:	2a09      	cmp	r2, #9
    e728:	d9f5      	bls.n	e716 <_svfprintf_r+0x186>
    e72a:	9106      	str	r1, [sp, #24]
    e72c:	e78e      	b.n	e64c <_svfprintf_r+0xbc>
    e72e:	4658      	mov	r0, fp
    e730:	f003 fa94 	bl	11c5c <_localeconv_r>
    e734:	6843      	ldr	r3, [r0, #4]
    e736:	9315      	str	r3, [sp, #84]	; 0x54
    e738:	4618      	mov	r0, r3
    e73a:	f7fe fba1 	bl	ce80 <strlen>
    e73e:	9016      	str	r0, [sp, #88]	; 0x58
    e740:	4658      	mov	r0, fp
    e742:	f003 fa8b 	bl	11c5c <_localeconv_r>
    e746:	6883      	ldr	r3, [r0, #8]
    e748:	9313      	str	r3, [sp, #76]	; 0x4c
    e74a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e74c:	2b00      	cmp	r3, #0
    e74e:	f040 862d 	bne.w	f3ac <_svfprintf_r+0xe1c>
    e752:	f899 3000 	ldrb.w	r3, [r9]
    e756:	e777      	b.n	e648 <_svfprintf_r+0xb8>
    e758:	f899 3000 	ldrb.w	r3, [r9]
    e75c:	f048 0820 	orr.w	r8, r8, #32
    e760:	e772      	b.n	e648 <_svfprintf_r+0xb8>
    e762:	2208      	movs	r2, #8
    e764:	2100      	movs	r1, #0
    e766:	4638      	mov	r0, r7
    e768:	f7fe f848 	bl	c7fc <memset>
    e76c:	2301      	movs	r3, #1
    e76e:	4499      	add	r9, r3
    e770:	e741      	b.n	e5f6 <_svfprintf_r+0x66>
    e772:	ebb9 0504 	subs.w	r5, r9, r4
    e776:	4606      	mov	r6, r0
    e778:	d011      	beq.n	e79e <_svfprintf_r+0x20e>
    e77a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e77c:	442b      	add	r3, r5
    e77e:	9326      	str	r3, [sp, #152]	; 0x98
    e780:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e782:	3301      	adds	r3, #1
    e784:	2b07      	cmp	r3, #7
    e786:	e9ca 4500 	strd	r4, r5, [sl]
    e78a:	9325      	str	r3, [sp, #148]	; 0x94
    e78c:	dc1c      	bgt.n	e7c8 <_svfprintf_r+0x238>
    e78e:	f10a 0a08 	add.w	sl, sl, #8
    e792:	9b04      	ldr	r3, [sp, #16]
    e794:	442b      	add	r3, r5
    e796:	9304      	str	r3, [sp, #16]
    e798:	2e00      	cmp	r6, #0
    e79a:	f47f af47 	bne.w	e62c <_svfprintf_r+0x9c>
    e79e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e7a0:	2b00      	cmp	r3, #0
    e7a2:	f041 820b 	bne.w	fbbc <_svfprintf_r+0x162c>
    e7a6:	ee1b 3a10 	vmov	r3, s22
    e7aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    e7ae:	f013 0f40 	tst.w	r3, #64	; 0x40
    e7b2:	9b04      	ldr	r3, [sp, #16]
    e7b4:	bf18      	it	ne
    e7b6:	f04f 33ff 	movne.w	r3, #4294967295
    e7ba:	9304      	str	r3, [sp, #16]
    e7bc:	9804      	ldr	r0, [sp, #16]
    e7be:	b051      	add	sp, #324	; 0x144
    e7c0:	ecbd 8b08 	vpop	{d8-d11}
    e7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7c8:	ee1b 1a10 	vmov	r1, s22
    e7cc:	aa24      	add	r2, sp, #144	; 0x90
    e7ce:	4658      	mov	r0, fp
    e7d0:	f004 fd6a 	bl	132a8 <__ssprint_r>
    e7d4:	2800      	cmp	r0, #0
    e7d6:	d1e6      	bne.n	e7a6 <_svfprintf_r+0x216>
    e7d8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e7dc:	e7d9      	b.n	e792 <_svfprintf_r+0x202>
    e7de:	bf00      	nop
	...
    e7e8:	ffffffff 	.word	0xffffffff
    e7ec:	7fefffff 	.word	0x7fefffff
    e7f0:	2000889c 	.word	0x2000889c
    e7f4:	930b      	str	r3, [sp, #44]	; 0x2c
    e7f6:	2b00      	cmp	r3, #0
    e7f8:	d0d1      	beq.n	e79e <_svfprintf_r+0x20e>
    e7fa:	2100      	movs	r1, #0
    e7fc:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    e800:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    e804:	2301      	movs	r3, #1
    e806:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e80a:	9302      	str	r3, [sp, #8]
    e80c:	9107      	str	r1, [sp, #28]
    e80e:	9305      	str	r3, [sp, #20]
    e810:	9103      	str	r1, [sp, #12]
    e812:	910f      	str	r1, [sp, #60]	; 0x3c
    e814:	ac37      	add	r4, sp, #220	; 0xdc
    e816:	f018 0302 	ands.w	r3, r8, #2
    e81a:	9309      	str	r3, [sp, #36]	; 0x24
    e81c:	d002      	beq.n	e824 <_svfprintf_r+0x294>
    e81e:	9b02      	ldr	r3, [sp, #8]
    e820:	3302      	adds	r3, #2
    e822:	9302      	str	r3, [sp, #8]
    e824:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    e828:	930a      	str	r3, [sp, #40]	; 0x28
    e82a:	d105      	bne.n	e838 <_svfprintf_r+0x2a8>
    e82c:	9b06      	ldr	r3, [sp, #24]
    e82e:	9a02      	ldr	r2, [sp, #8]
    e830:	1a9d      	subs	r5, r3, r2
    e832:	2d00      	cmp	r5, #0
    e834:	f300 8369 	bgt.w	ef0a <_svfprintf_r+0x97a>
    e838:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e83a:	b189      	cbz	r1, e860 <_svfprintf_r+0x2d0>
    e83c:	9925      	ldr	r1, [sp, #148]	; 0x94
    e83e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    e842:	3101      	adds	r1, #1
    e844:	3201      	adds	r2, #1
    e846:	f8ca 0000 	str.w	r0, [sl]
    e84a:	2907      	cmp	r1, #7
    e84c:	f04f 0001 	mov.w	r0, #1
    e850:	9226      	str	r2, [sp, #152]	; 0x98
    e852:	9125      	str	r1, [sp, #148]	; 0x94
    e854:	f8ca 0004 	str.w	r0, [sl, #4]
    e858:	f300 83a2 	bgt.w	efa0 <_svfprintf_r+0xa10>
    e85c:	f10a 0a08 	add.w	sl, sl, #8
    e860:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e862:	b183      	cbz	r3, e886 <_svfprintf_r+0x2f6>
    e864:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e866:	a91a      	add	r1, sp, #104	; 0x68
    e868:	3301      	adds	r3, #1
    e86a:	3202      	adds	r2, #2
    e86c:	f8ca 1000 	str.w	r1, [sl]
    e870:	2b07      	cmp	r3, #7
    e872:	f04f 0102 	mov.w	r1, #2
    e876:	9226      	str	r2, [sp, #152]	; 0x98
    e878:	9325      	str	r3, [sp, #148]	; 0x94
    e87a:	f8ca 1004 	str.w	r1, [sl, #4]
    e87e:	f300 83a3 	bgt.w	efc8 <_svfprintf_r+0xa38>
    e882:	f10a 0a08 	add.w	sl, sl, #8
    e886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e888:	2b80      	cmp	r3, #128	; 0x80
    e88a:	f000 826c 	beq.w	ed66 <_svfprintf_r+0x7d6>
    e88e:	9b03      	ldr	r3, [sp, #12]
    e890:	9905      	ldr	r1, [sp, #20]
    e892:	1a5d      	subs	r5, r3, r1
    e894:	2d00      	cmp	r5, #0
    e896:	f300 82a5 	bgt.w	ede4 <_svfprintf_r+0x854>
    e89a:	f418 7f80 	tst.w	r8, #256	; 0x100
    e89e:	f040 820d 	bne.w	ecbc <_svfprintf_r+0x72c>
    e8a2:	9b05      	ldr	r3, [sp, #20]
    e8a4:	f8ca 3004 	str.w	r3, [sl, #4]
    e8a8:	441a      	add	r2, r3
    e8aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e8ac:	f8ca 4000 	str.w	r4, [sl]
    e8b0:	3301      	adds	r3, #1
    e8b2:	2b07      	cmp	r3, #7
    e8b4:	9226      	str	r2, [sp, #152]	; 0x98
    e8b6:	9325      	str	r3, [sp, #148]	; 0x94
    e8b8:	f300 831b 	bgt.w	eef2 <_svfprintf_r+0x962>
    e8bc:	f10a 0a08 	add.w	sl, sl, #8
    e8c0:	f018 0f04 	tst.w	r8, #4
    e8c4:	d005      	beq.n	e8d2 <_svfprintf_r+0x342>
    e8c6:	9b06      	ldr	r3, [sp, #24]
    e8c8:	9902      	ldr	r1, [sp, #8]
    e8ca:	1a5c      	subs	r4, r3, r1
    e8cc:	2c00      	cmp	r4, #0
    e8ce:	f300 8388 	bgt.w	efe2 <_svfprintf_r+0xa52>
    e8d2:	9b04      	ldr	r3, [sp, #16]
    e8d4:	9906      	ldr	r1, [sp, #24]
    e8d6:	9802      	ldr	r0, [sp, #8]
    e8d8:	4281      	cmp	r1, r0
    e8da:	bfac      	ite	ge
    e8dc:	185b      	addge	r3, r3, r1
    e8de:	181b      	addlt	r3, r3, r0
    e8e0:	9304      	str	r3, [sp, #16]
    e8e2:	2a00      	cmp	r2, #0
    e8e4:	f040 82b0 	bne.w	ee48 <_svfprintf_r+0x8b8>
    e8e8:	2300      	movs	r3, #0
    e8ea:	9325      	str	r3, [sp, #148]	; 0x94
    e8ec:	9b07      	ldr	r3, [sp, #28]
    e8ee:	b11b      	cbz	r3, e8f8 <_svfprintf_r+0x368>
    e8f0:	9907      	ldr	r1, [sp, #28]
    e8f2:	4658      	mov	r0, fp
    e8f4:	f7fe fbd6 	bl	d0a4 <_free_r>
    e8f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e8fc:	464c      	mov	r4, r9
    e8fe:	e679      	b.n	e5f4 <_svfprintf_r+0x64>
    e900:	930b      	str	r3, [sp, #44]	; 0x2c
    e902:	9b08      	ldr	r3, [sp, #32]
    e904:	3307      	adds	r3, #7
    e906:	f023 0307 	bic.w	r3, r3, #7
    e90a:	ecb3 8b02 	vldmia	r3!, {d8}
    e90e:	eeb0 7bc8 	vabs.f64	d7, d8
    e912:	eeb4 7b49 	vcmp.f64	d7, d9
    e916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e91a:	9308      	str	r3, [sp, #32]
    e91c:	f340 84e9 	ble.w	f2f2 <_svfprintf_r+0xd62>
    e920:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    e924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e928:	f101 8059 	bmi.w	f9de <_svfprintf_r+0x144e>
    e92c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e930:	4cab      	ldr	r4, [pc, #684]	; (ebe0 <_svfprintf_r+0x650>)
    e932:	4bac      	ldr	r3, [pc, #688]	; (ebe4 <_svfprintf_r+0x654>)
    e934:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    e938:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e93a:	2a47      	cmp	r2, #71	; 0x47
    e93c:	bfc8      	it	gt
    e93e:	461c      	movgt	r4, r3
    e940:	2300      	movs	r3, #0
    e942:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e946:	2203      	movs	r2, #3
    e948:	9307      	str	r3, [sp, #28]
    e94a:	9202      	str	r2, [sp, #8]
    e94c:	9205      	str	r2, [sp, #20]
    e94e:	9303      	str	r3, [sp, #12]
    e950:	930f      	str	r3, [sp, #60]	; 0x3c
    e952:	2900      	cmp	r1, #0
    e954:	f43f af5f 	beq.w	e816 <_svfprintf_r+0x286>
    e958:	9b02      	ldr	r3, [sp, #8]
    e95a:	3301      	adds	r3, #1
    e95c:	9302      	str	r3, [sp, #8]
    e95e:	e75a      	b.n	e816 <_svfprintf_r+0x286>
    e960:	2b43      	cmp	r3, #67	; 0x43
    e962:	930b      	str	r3, [sp, #44]	; 0x2c
    e964:	d003      	beq.n	e96e <_svfprintf_r+0x3de>
    e966:	f018 0f10 	tst.w	r8, #16
    e96a:	f000 855d 	beq.w	f428 <_svfprintf_r+0xe98>
    e96e:	9d08      	ldr	r5, [sp, #32]
    e970:	2208      	movs	r2, #8
    e972:	2100      	movs	r1, #0
    e974:	a822      	add	r0, sp, #136	; 0x88
    e976:	ac37      	add	r4, sp, #220	; 0xdc
    e978:	f7fd ff40 	bl	c7fc <memset>
    e97c:	ab22      	add	r3, sp, #136	; 0x88
    e97e:	f855 2b04 	ldr.w	r2, [r5], #4
    e982:	4621      	mov	r1, r4
    e984:	4658      	mov	r0, fp
    e986:	f004 fb65 	bl	13054 <_wcrtomb_r>
    e98a:	4603      	mov	r3, r0
    e98c:	3301      	adds	r3, #1
    e98e:	9005      	str	r0, [sp, #20]
    e990:	f001 82ee 	beq.w	ff70 <_svfprintf_r+0x19e0>
    e994:	9b05      	ldr	r3, [sp, #20]
    e996:	9508      	str	r5, [sp, #32]
    e998:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e99c:	9302      	str	r3, [sp, #8]
    e99e:	2100      	movs	r1, #0
    e9a0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    e9a4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e9a8:	9107      	str	r1, [sp, #28]
    e9aa:	9103      	str	r1, [sp, #12]
    e9ac:	910f      	str	r1, [sp, #60]	; 0x3c
    e9ae:	e732      	b.n	e816 <_svfprintf_r+0x286>
    e9b0:	930b      	str	r3, [sp, #44]	; 0x2c
    e9b2:	9b08      	ldr	r3, [sp, #32]
    e9b4:	461a      	mov	r2, r3
    e9b6:	2300      	movs	r3, #0
    e9b8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    e9bc:	4613      	mov	r3, r2
    e9be:	f853 4b04 	ldr.w	r4, [r3], #4
    e9c2:	9308      	str	r3, [sp, #32]
    e9c4:	2c00      	cmp	r4, #0
    e9c6:	f000 8548 	beq.w	f45a <_svfprintf_r+0xeca>
    e9ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e9cc:	2b53      	cmp	r3, #83	; 0x53
    e9ce:	f000 86ec 	beq.w	f7aa <_svfprintf_r+0x121a>
    e9d2:	f018 0310 	ands.w	r3, r8, #16
    e9d6:	930c      	str	r3, [sp, #48]	; 0x30
    e9d8:	f040 86e7 	bne.w	f7aa <_svfprintf_r+0x121a>
    e9dc:	9b03      	ldr	r3, [sp, #12]
    e9de:	1c5d      	adds	r5, r3, #1
    e9e0:	f001 80e5 	beq.w	fbae <_svfprintf_r+0x161e>
    e9e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    e9e6:	461a      	mov	r2, r3
    e9e8:	4620      	mov	r0, r4
    e9ea:	f7fe f9e9 	bl	cdc0 <memchr>
    e9ee:	9007      	str	r0, [sp, #28]
    e9f0:	2800      	cmp	r0, #0
    e9f2:	f001 8328 	beq.w	10046 <_svfprintf_r+0x1ab6>
    e9f6:	9b07      	ldr	r3, [sp, #28]
    e9f8:	1b1a      	subs	r2, r3, r4
    e9fa:	9205      	str	r2, [sp, #20]
    e9fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e9fe:	9303      	str	r3, [sp, #12]
    ea00:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    ea04:	930f      	str	r3, [sp, #60]	; 0x3c
    ea06:	930d      	str	r3, [sp, #52]	; 0x34
    ea08:	9307      	str	r3, [sp, #28]
    ea0a:	2373      	movs	r3, #115	; 0x73
    ea0c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ea10:	9202      	str	r2, [sp, #8]
    ea12:	930b      	str	r3, [sp, #44]	; 0x2c
    ea14:	e79d      	b.n	e952 <_svfprintf_r+0x3c2>
    ea16:	f018 0f20 	tst.w	r8, #32
    ea1a:	930b      	str	r3, [sp, #44]	; 0x2c
    ea1c:	9b08      	ldr	r3, [sp, #32]
    ea1e:	d03d      	beq.n	ea9c <_svfprintf_r+0x50c>
    ea20:	3307      	adds	r3, #7
    ea22:	f023 0307 	bic.w	r3, r3, #7
    ea26:	461a      	mov	r2, r3
    ea28:	4611      	mov	r1, r2
    ea2a:	685b      	ldr	r3, [r3, #4]
    ea2c:	f851 2b08 	ldr.w	r2, [r1], #8
    ea30:	9108      	str	r1, [sp, #32]
    ea32:	4619      	mov	r1, r3
    ea34:	2b00      	cmp	r3, #0
    ea36:	f2c0 840c 	blt.w	f252 <_svfprintf_r+0xcc2>
    ea3a:	9b03      	ldr	r3, [sp, #12]
    ea3c:	3301      	adds	r3, #1
    ea3e:	f000 829e 	beq.w	ef7e <_svfprintf_r+0x9ee>
    ea42:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    ea46:	ea52 0301 	orrs.w	r3, r2, r1
    ea4a:	9002      	str	r0, [sp, #8]
    ea4c:	f040 8299 	bne.w	ef82 <_svfprintf_r+0x9f2>
    ea50:	9b03      	ldr	r3, [sp, #12]
    ea52:	2b00      	cmp	r3, #0
    ea54:	f040 829a 	bne.w	ef8c <_svfprintf_r+0x9fc>
    ea58:	4680      	mov	r8, r0
    ea5a:	2300      	movs	r3, #0
    ea5c:	9303      	str	r3, [sp, #12]
    ea5e:	9305      	str	r3, [sp, #20]
    ea60:	ac50      	add	r4, sp, #320	; 0x140
    ea62:	e106      	b.n	ec72 <_svfprintf_r+0x6e2>
    ea64:	9b08      	ldr	r3, [sp, #32]
    ea66:	f853 2b04 	ldr.w	r2, [r3], #4
    ea6a:	9206      	str	r2, [sp, #24]
    ea6c:	2a00      	cmp	r2, #0
    ea6e:	f280 8419 	bge.w	f2a4 <_svfprintf_r+0xd14>
    ea72:	9a06      	ldr	r2, [sp, #24]
    ea74:	9308      	str	r3, [sp, #32]
    ea76:	4252      	negs	r2, r2
    ea78:	9206      	str	r2, [sp, #24]
    ea7a:	f899 3000 	ldrb.w	r3, [r9]
    ea7e:	f048 0804 	orr.w	r8, r8, #4
    ea82:	e5e1      	b.n	e648 <_svfprintf_r+0xb8>
    ea84:	f899 3000 	ldrb.w	r3, [r9]
    ea88:	f048 0808 	orr.w	r8, r8, #8
    ea8c:	e5dc      	b.n	e648 <_svfprintf_r+0xb8>
    ea8e:	f048 0810 	orr.w	r8, r8, #16
    ea92:	f018 0f20 	tst.w	r8, #32
    ea96:	930b      	str	r3, [sp, #44]	; 0x2c
    ea98:	9b08      	ldr	r3, [sp, #32]
    ea9a:	d1c1      	bne.n	ea20 <_svfprintf_r+0x490>
    ea9c:	f018 0f10 	tst.w	r8, #16
    eaa0:	f040 840b 	bne.w	f2ba <_svfprintf_r+0xd2a>
    eaa4:	f018 0f40 	tst.w	r8, #64	; 0x40
    eaa8:	f000 8403 	beq.w	f2b2 <_svfprintf_r+0xd22>
    eaac:	f933 2b04 	ldrsh.w	r2, [r3], #4
    eab0:	9308      	str	r3, [sp, #32]
    eab2:	17d1      	asrs	r1, r2, #31
    eab4:	460b      	mov	r3, r1
    eab6:	e7bd      	b.n	ea34 <_svfprintf_r+0x4a4>
    eab8:	9b08      	ldr	r3, [sp, #32]
    eaba:	f048 0202 	orr.w	r2, r8, #2
    eabe:	9202      	str	r2, [sp, #8]
    eac0:	f853 2b04 	ldr.w	r2, [r3], #4
    eac4:	9308      	str	r3, [sp, #32]
    eac6:	f647 0330 	movw	r3, #30768	; 0x7830
    eaca:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    eace:	2078      	movs	r0, #120	; 0x78
    ead0:	4b45      	ldr	r3, [pc, #276]	; (ebe8 <_svfprintf_r+0x658>)
    ead2:	9311      	str	r3, [sp, #68]	; 0x44
    ead4:	2100      	movs	r1, #0
    ead6:	2302      	movs	r3, #2
    ead8:	900b      	str	r0, [sp, #44]	; 0x2c
    eada:	2000      	movs	r0, #0
    eadc:	9c03      	ldr	r4, [sp, #12]
    eade:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    eae2:	1c60      	adds	r0, r4, #1
    eae4:	f000 80ad 	beq.w	ec42 <_svfprintf_r+0x6b2>
    eae8:	9802      	ldr	r0, [sp, #8]
    eaea:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    eaee:	ea52 0001 	orrs.w	r0, r2, r1
    eaf2:	f040 80a4 	bne.w	ec3e <_svfprintf_r+0x6ae>
    eaf6:	2c00      	cmp	r4, #0
    eaf8:	f040 86ae 	bne.w	f858 <_svfprintf_r+0x12c8>
    eafc:	2b00      	cmp	r3, #0
    eafe:	d1ac      	bne.n	ea5a <_svfprintf_r+0x4ca>
    eb00:	9b02      	ldr	r3, [sp, #8]
    eb02:	f013 0301 	ands.w	r3, r3, #1
    eb06:	9305      	str	r3, [sp, #20]
    eb08:	f000 83d1 	beq.w	f2ae <_svfprintf_r+0xd1e>
    eb0c:	2330      	movs	r3, #48	; 0x30
    eb0e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    eb12:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    eb16:	e0ac      	b.n	ec72 <_svfprintf_r+0x6e2>
    eb18:	f018 0f20 	tst.w	r8, #32
    eb1c:	f040 83d4 	bne.w	f2c8 <_svfprintf_r+0xd38>
    eb20:	f018 0f10 	tst.w	r8, #16
    eb24:	f040 869f 	bne.w	f866 <_svfprintf_r+0x12d6>
    eb28:	f018 0f40 	tst.w	r8, #64	; 0x40
    eb2c:	f040 8797 	bne.w	fa5e <_svfprintf_r+0x14ce>
    eb30:	f418 7f00 	tst.w	r8, #512	; 0x200
    eb34:	f000 8697 	beq.w	f866 <_svfprintf_r+0x12d6>
    eb38:	9b08      	ldr	r3, [sp, #32]
    eb3a:	9904      	ldr	r1, [sp, #16]
    eb3c:	f853 2b04 	ldr.w	r2, [r3], #4
    eb40:	9308      	str	r3, [sp, #32]
    eb42:	7011      	strb	r1, [r2, #0]
    eb44:	464c      	mov	r4, r9
    eb46:	e555      	b.n	e5f4 <_svfprintf_r+0x64>
    eb48:	f899 3000 	ldrb.w	r3, [r9]
    eb4c:	2b68      	cmp	r3, #104	; 0x68
    eb4e:	bf03      	ittte	eq
    eb50:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    eb54:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    eb58:	f109 0901 	addeq.w	r9, r9, #1
    eb5c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    eb60:	e572      	b.n	e648 <_svfprintf_r+0xb8>
    eb62:	f899 3000 	ldrb.w	r3, [r9]
    eb66:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    eb6a:	e56d      	b.n	e648 <_svfprintf_r+0xb8>
    eb6c:	f899 3000 	ldrb.w	r3, [r9]
    eb70:	2b6c      	cmp	r3, #108	; 0x6c
    eb72:	bf03      	ittte	eq
    eb74:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    eb78:	f048 0820 	orreq.w	r8, r8, #32
    eb7c:	f109 0901 	addeq.w	r9, r9, #1
    eb80:	f048 0810 	orrne.w	r8, r8, #16
    eb84:	e560      	b.n	e648 <_svfprintf_r+0xb8>
    eb86:	930b      	str	r3, [sp, #44]	; 0x2c
    eb88:	f048 0810 	orr.w	r8, r8, #16
    eb8c:	f018 0120 	ands.w	r1, r8, #32
    eb90:	f000 8351 	beq.w	f236 <_svfprintf_r+0xca6>
    eb94:	9b08      	ldr	r3, [sp, #32]
    eb96:	3307      	adds	r3, #7
    eb98:	f023 0307 	bic.w	r3, r3, #7
    eb9c:	6859      	ldr	r1, [r3, #4]
    eb9e:	f853 2b08 	ldr.w	r2, [r3], #8
    eba2:	9308      	str	r3, [sp, #32]
    eba4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    eba8:	9302      	str	r3, [sp, #8]
    ebaa:	2300      	movs	r3, #0
    ebac:	e795      	b.n	eada <_svfprintf_r+0x54a>
    ebae:	930b      	str	r3, [sp, #44]	; 0x2c
    ebb0:	f048 0310 	orr.w	r3, r8, #16
    ebb4:	9302      	str	r3, [sp, #8]
    ebb6:	9b02      	ldr	r3, [sp, #8]
    ebb8:	f013 0120 	ands.w	r1, r3, #32
    ebbc:	f000 8329 	beq.w	f212 <_svfprintf_r+0xc82>
    ebc0:	9b08      	ldr	r3, [sp, #32]
    ebc2:	3307      	adds	r3, #7
    ebc4:	f023 0307 	bic.w	r3, r3, #7
    ebc8:	6859      	ldr	r1, [r3, #4]
    ebca:	f853 2b08 	ldr.w	r2, [r3], #8
    ebce:	9308      	str	r3, [sp, #32]
    ebd0:	2301      	movs	r3, #1
    ebd2:	e782      	b.n	eada <_svfprintf_r+0x54a>
    ebd4:	f899 3000 	ldrb.w	r3, [r9]
    ebd8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    ebdc:	e534      	b.n	e648 <_svfprintf_r+0xb8>
    ebde:	bf00      	nop
    ebe0:	20000eec 	.word	0x20000eec
    ebe4:	20000824 	.word	0x20000824
    ebe8:	20000ef4 	.word	0x20000ef4
    ebec:	4649      	mov	r1, r9
    ebee:	f811 3b01 	ldrb.w	r3, [r1], #1
    ebf2:	2b2a      	cmp	r3, #42	; 0x2a
    ebf4:	f001 8249 	beq.w	1008a <_svfprintf_r+0x1afa>
    ebf8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ebfc:	2a09      	cmp	r2, #9
    ebfe:	4689      	mov	r9, r1
    ec00:	bf98      	it	ls
    ec02:	2100      	movls	r1, #0
    ec04:	f201 8144 	bhi.w	fe90 <_svfprintf_r+0x1900>
    ec08:	f819 3b01 	ldrb.w	r3, [r9], #1
    ec0c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    ec10:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    ec14:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ec18:	2a09      	cmp	r2, #9
    ec1a:	d9f5      	bls.n	ec08 <_svfprintf_r+0x678>
    ec1c:	9103      	str	r1, [sp, #12]
    ec1e:	e515      	b.n	e64c <_svfprintf_r+0xbc>
    ec20:	f899 3000 	ldrb.w	r3, [r9]
    ec24:	f048 0801 	orr.w	r8, r8, #1
    ec28:	e50e      	b.n	e648 <_svfprintf_r+0xb8>
    ec2a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    ec2e:	2b00      	cmp	r3, #0
    ec30:	f47f ad8f 	bne.w	e752 <_svfprintf_r+0x1c2>
    ec34:	f899 3000 	ldrb.w	r3, [r9]
    ec38:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    ec3c:	e504      	b.n	e648 <_svfprintf_r+0xb8>
    ec3e:	f8cd 8008 	str.w	r8, [sp, #8]
    ec42:	2b01      	cmp	r3, #1
    ec44:	f000 819d 	beq.w	ef82 <_svfprintf_r+0x9f2>
    ec48:	2b02      	cmp	r3, #2
    ec4a:	ac50      	add	r4, sp, #320	; 0x140
    ec4c:	d120      	bne.n	ec90 <_svfprintf_r+0x700>
    ec4e:	9811      	ldr	r0, [sp, #68]	; 0x44
    ec50:	f002 030f 	and.w	r3, r2, #15
    ec54:	0912      	lsrs	r2, r2, #4
    ec56:	5cc3      	ldrb	r3, [r0, r3]
    ec58:	f804 3d01 	strb.w	r3, [r4, #-1]!
    ec5c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    ec60:	0909      	lsrs	r1, r1, #4
    ec62:	ea52 0301 	orrs.w	r3, r2, r1
    ec66:	d1f3      	bne.n	ec50 <_svfprintf_r+0x6c0>
    ec68:	ab50      	add	r3, sp, #320	; 0x140
    ec6a:	1b1b      	subs	r3, r3, r4
    ec6c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    ec70:	9305      	str	r3, [sp, #20]
    ec72:	9a05      	ldr	r2, [sp, #20]
    ec74:	9803      	ldr	r0, [sp, #12]
    ec76:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ec7a:	4282      	cmp	r2, r0
    ec7c:	f04f 0300 	mov.w	r3, #0
    ec80:	bfb8      	it	lt
    ec82:	4602      	movlt	r2, r0
    ec84:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ec88:	9307      	str	r3, [sp, #28]
    ec8a:	9202      	str	r2, [sp, #8]
    ec8c:	930f      	str	r3, [sp, #60]	; 0x3c
    ec8e:	e660      	b.n	e952 <_svfprintf_r+0x3c2>
    ec90:	f002 0307 	and.w	r3, r2, #7
    ec94:	08d2      	lsrs	r2, r2, #3
    ec96:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    ec9a:	08c9      	lsrs	r1, r1, #3
    ec9c:	3330      	adds	r3, #48	; 0x30
    ec9e:	ea52 0501 	orrs.w	r5, r2, r1
    eca2:	4620      	mov	r0, r4
    eca4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    eca8:	d1f2      	bne.n	ec90 <_svfprintf_r+0x700>
    ecaa:	9a02      	ldr	r2, [sp, #8]
    ecac:	07d1      	lsls	r1, r2, #31
    ecae:	f100 824d 	bmi.w	f14c <_svfprintf_r+0xbbc>
    ecb2:	ab50      	add	r3, sp, #320	; 0x140
    ecb4:	1b1b      	subs	r3, r3, r4
    ecb6:	4690      	mov	r8, r2
    ecb8:	9305      	str	r3, [sp, #20]
    ecba:	e7da      	b.n	ec72 <_svfprintf_r+0x6e2>
    ecbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ecbe:	2b65      	cmp	r3, #101	; 0x65
    ecc0:	f340 80d4 	ble.w	ee6c <_svfprintf_r+0x8dc>
    ecc4:	eeb5 8b40 	vcmp.f64	d8, #0.0
    ecc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eccc:	f040 81c1 	bne.w	f052 <_svfprintf_r+0xac2>
    ecd0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ecd2:	49ba      	ldr	r1, [pc, #744]	; (efbc <_svfprintf_r+0xa2c>)
    ecd4:	f8ca 1000 	str.w	r1, [sl]
    ecd8:	3301      	adds	r3, #1
    ecda:	3201      	adds	r2, #1
    ecdc:	2101      	movs	r1, #1
    ecde:	2b07      	cmp	r3, #7
    ece0:	9226      	str	r2, [sp, #152]	; 0x98
    ece2:	9325      	str	r3, [sp, #148]	; 0x94
    ece4:	f8ca 1004 	str.w	r1, [sl, #4]
    ece8:	f300 8551 	bgt.w	f78e <_svfprintf_r+0x11fe>
    ecec:	f10a 0a08 	add.w	sl, sl, #8
    ecf0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ecf2:	990e      	ldr	r1, [sp, #56]	; 0x38
    ecf4:	428b      	cmp	r3, r1
    ecf6:	f280 82d0 	bge.w	f29a <_svfprintf_r+0xd0a>
    ecfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ecfc:	9912      	ldr	r1, [sp, #72]	; 0x48
    ecfe:	441a      	add	r2, r3
    ed00:	e9ca 1300 	strd	r1, r3, [sl]
    ed04:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ed06:	9226      	str	r2, [sp, #152]	; 0x98
    ed08:	3301      	adds	r3, #1
    ed0a:	2b07      	cmp	r3, #7
    ed0c:	9325      	str	r3, [sp, #148]	; 0x94
    ed0e:	f300 8397 	bgt.w	f440 <_svfprintf_r+0xeb0>
    ed12:	f10a 0a08 	add.w	sl, sl, #8
    ed16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ed18:	1e5c      	subs	r4, r3, #1
    ed1a:	2c00      	cmp	r4, #0
    ed1c:	f77f add0 	ble.w	e8c0 <_svfprintf_r+0x330>
    ed20:	2c10      	cmp	r4, #16
    ed22:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ed24:	f340 856e 	ble.w	f804 <_svfprintf_r+0x1274>
    ed28:	ee1b 6a10 	vmov	r6, s22
    ed2c:	2510      	movs	r5, #16
    ed2e:	e005      	b.n	ed3c <_svfprintf_r+0x7ac>
    ed30:	f10a 0a08 	add.w	sl, sl, #8
    ed34:	3c10      	subs	r4, #16
    ed36:	2c10      	cmp	r4, #16
    ed38:	f340 8564 	ble.w	f804 <_svfprintf_r+0x1274>
    ed3c:	3301      	adds	r3, #1
    ed3e:	49a0      	ldr	r1, [pc, #640]	; (efc0 <_svfprintf_r+0xa30>)
    ed40:	3210      	adds	r2, #16
    ed42:	2b07      	cmp	r3, #7
    ed44:	e9ca 1500 	strd	r1, r5, [sl]
    ed48:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ed4c:	ddf0      	ble.n	ed30 <_svfprintf_r+0x7a0>
    ed4e:	aa24      	add	r2, sp, #144	; 0x90
    ed50:	4631      	mov	r1, r6
    ed52:	4658      	mov	r0, fp
    ed54:	f004 faa8 	bl	132a8 <__ssprint_r>
    ed58:	2800      	cmp	r0, #0
    ed5a:	d17e      	bne.n	ee5a <_svfprintf_r+0x8ca>
    ed5c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ed60:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ed64:	e7e6      	b.n	ed34 <_svfprintf_r+0x7a4>
    ed66:	9b06      	ldr	r3, [sp, #24]
    ed68:	9902      	ldr	r1, [sp, #8]
    ed6a:	1a5d      	subs	r5, r3, r1
    ed6c:	2d00      	cmp	r5, #0
    ed6e:	f77f ad8e 	ble.w	e88e <_svfprintf_r+0x2fe>
    ed72:	2d10      	cmp	r5, #16
    ed74:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ed76:	dd21      	ble.n	edbc <_svfprintf_r+0x82c>
    ed78:	9409      	str	r4, [sp, #36]	; 0x24
    ed7a:	2610      	movs	r6, #16
    ed7c:	ee1b 4a10 	vmov	r4, s22
    ed80:	e004      	b.n	ed8c <_svfprintf_r+0x7fc>
    ed82:	3d10      	subs	r5, #16
    ed84:	2d10      	cmp	r5, #16
    ed86:	f10a 0a08 	add.w	sl, sl, #8
    ed8a:	dd16      	ble.n	edba <_svfprintf_r+0x82a>
    ed8c:	3301      	adds	r3, #1
    ed8e:	498c      	ldr	r1, [pc, #560]	; (efc0 <_svfprintf_r+0xa30>)
    ed90:	3210      	adds	r2, #16
    ed92:	2b07      	cmp	r3, #7
    ed94:	e9ca 1600 	strd	r1, r6, [sl]
    ed98:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ed9c:	ddf1      	ble.n	ed82 <_svfprintf_r+0x7f2>
    ed9e:	aa24      	add	r2, sp, #144	; 0x90
    eda0:	4621      	mov	r1, r4
    eda2:	4658      	mov	r0, fp
    eda4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eda8:	f004 fa7e 	bl	132a8 <__ssprint_r>
    edac:	2800      	cmp	r0, #0
    edae:	d154      	bne.n	ee5a <_svfprintf_r+0x8ca>
    edb0:	3d10      	subs	r5, #16
    edb2:	2d10      	cmp	r5, #16
    edb4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    edb8:	dce8      	bgt.n	ed8c <_svfprintf_r+0x7fc>
    edba:	9c09      	ldr	r4, [sp, #36]	; 0x24
    edbc:	4980      	ldr	r1, [pc, #512]	; (efc0 <_svfprintf_r+0xa30>)
    edbe:	f8ca 5004 	str.w	r5, [sl, #4]
    edc2:	3301      	adds	r3, #1
    edc4:	442a      	add	r2, r5
    edc6:	2b07      	cmp	r3, #7
    edc8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    edcc:	f8ca 1000 	str.w	r1, [sl]
    edd0:	f300 8526 	bgt.w	f820 <_svfprintf_r+0x1290>
    edd4:	9b03      	ldr	r3, [sp, #12]
    edd6:	9905      	ldr	r1, [sp, #20]
    edd8:	1a5d      	subs	r5, r3, r1
    edda:	2d00      	cmp	r5, #0
    eddc:	f10a 0a08 	add.w	sl, sl, #8
    ede0:	f77f ad5b 	ble.w	e89a <_svfprintf_r+0x30a>
    ede4:	2d10      	cmp	r5, #16
    ede6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ede8:	dd1f      	ble.n	ee2a <_svfprintf_r+0x89a>
    edea:	4651      	mov	r1, sl
    edec:	2610      	movs	r6, #16
    edee:	ee1b aa10 	vmov	sl, s22
    edf2:	e004      	b.n	edfe <_svfprintf_r+0x86e>
    edf4:	3d10      	subs	r5, #16
    edf6:	2d10      	cmp	r5, #16
    edf8:	f101 0108 	add.w	r1, r1, #8
    edfc:	dd14      	ble.n	ee28 <_svfprintf_r+0x898>
    edfe:	3301      	adds	r3, #1
    ee00:	486f      	ldr	r0, [pc, #444]	; (efc0 <_svfprintf_r+0xa30>)
    ee02:	3210      	adds	r2, #16
    ee04:	2b07      	cmp	r3, #7
    ee06:	e9c1 0600 	strd	r0, r6, [r1]
    ee0a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ee0e:	ddf1      	ble.n	edf4 <_svfprintf_r+0x864>
    ee10:	aa24      	add	r2, sp, #144	; 0x90
    ee12:	4651      	mov	r1, sl
    ee14:	4658      	mov	r0, fp
    ee16:	f004 fa47 	bl	132a8 <__ssprint_r>
    ee1a:	b9f0      	cbnz	r0, ee5a <_svfprintf_r+0x8ca>
    ee1c:	3d10      	subs	r5, #16
    ee1e:	2d10      	cmp	r5, #16
    ee20:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ee24:	a927      	add	r1, sp, #156	; 0x9c
    ee26:	dcea      	bgt.n	edfe <_svfprintf_r+0x86e>
    ee28:	468a      	mov	sl, r1
    ee2a:	3301      	adds	r3, #1
    ee2c:	4964      	ldr	r1, [pc, #400]	; (efc0 <_svfprintf_r+0xa30>)
    ee2e:	f8ca 5004 	str.w	r5, [sl, #4]
    ee32:	442a      	add	r2, r5
    ee34:	2b07      	cmp	r3, #7
    ee36:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ee3a:	f8ca 1000 	str.w	r1, [sl]
    ee3e:	f300 81da 	bgt.w	f1f6 <_svfprintf_r+0xc66>
    ee42:	f10a 0a08 	add.w	sl, sl, #8
    ee46:	e528      	b.n	e89a <_svfprintf_r+0x30a>
    ee48:	ee1b 1a10 	vmov	r1, s22
    ee4c:	aa24      	add	r2, sp, #144	; 0x90
    ee4e:	4658      	mov	r0, fp
    ee50:	f004 fa2a 	bl	132a8 <__ssprint_r>
    ee54:	2800      	cmp	r0, #0
    ee56:	f43f ad47 	beq.w	e8e8 <_svfprintf_r+0x358>
    ee5a:	9b07      	ldr	r3, [sp, #28]
    ee5c:	2b00      	cmp	r3, #0
    ee5e:	f43f aca2 	beq.w	e7a6 <_svfprintf_r+0x216>
    ee62:	9907      	ldr	r1, [sp, #28]
    ee64:	4658      	mov	r0, fp
    ee66:	f7fe f91d 	bl	d0a4 <_free_r>
    ee6a:	e49c      	b.n	e7a6 <_svfprintf_r+0x216>
    ee6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ee6e:	2b01      	cmp	r3, #1
    ee70:	f340 817a 	ble.w	f168 <_svfprintf_r+0xbd8>
    ee74:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ee76:	f8ca 4000 	str.w	r4, [sl]
    ee7a:	3301      	adds	r3, #1
    ee7c:	3201      	adds	r2, #1
    ee7e:	2101      	movs	r1, #1
    ee80:	2b07      	cmp	r3, #7
    ee82:	9226      	str	r2, [sp, #152]	; 0x98
    ee84:	9325      	str	r3, [sp, #148]	; 0x94
    ee86:	f8ca 1004 	str.w	r1, [sl, #4]
    ee8a:	f300 81f8 	bgt.w	f27e <_svfprintf_r+0xcee>
    ee8e:	f10a 0a08 	add.w	sl, sl, #8
    ee92:	9910      	ldr	r1, [sp, #64]	; 0x40
    ee94:	9812      	ldr	r0, [sp, #72]	; 0x48
    ee96:	3301      	adds	r3, #1
    ee98:	440a      	add	r2, r1
    ee9a:	2b07      	cmp	r3, #7
    ee9c:	e9ca 0100 	strd	r0, r1, [sl]
    eea0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eea4:	f300 81dd 	bgt.w	f262 <_svfprintf_r+0xcd2>
    eea8:	f10a 0a08 	add.w	sl, sl, #8
    eeac:	eeb5 8b40 	vcmp.f64	d8, #0.0
    eeb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eeb4:	f000 8177 	beq.w	f1a6 <_svfprintf_r+0xc16>
    eeb8:	990e      	ldr	r1, [sp, #56]	; 0x38
    eeba:	3301      	adds	r3, #1
    eebc:	3901      	subs	r1, #1
    eebe:	3401      	adds	r4, #1
    eec0:	440a      	add	r2, r1
    eec2:	2b07      	cmp	r3, #7
    eec4:	f8ca 4000 	str.w	r4, [sl]
    eec8:	9325      	str	r3, [sp, #148]	; 0x94
    eeca:	f8ca 1004 	str.w	r1, [sl, #4]
    eece:	9226      	str	r2, [sp, #152]	; 0x98
    eed0:	f300 815b 	bgt.w	f18a <_svfprintf_r+0xbfa>
    eed4:	f10a 0a08 	add.w	sl, sl, #8
    eed8:	9914      	ldr	r1, [sp, #80]	; 0x50
    eeda:	f8ca 1004 	str.w	r1, [sl, #4]
    eede:	3301      	adds	r3, #1
    eee0:	440a      	add	r2, r1
    eee2:	2b07      	cmp	r3, #7
    eee4:	a91e      	add	r1, sp, #120	; 0x78
    eee6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eeea:	f8ca 1000 	str.w	r1, [sl]
    eeee:	f77f ace5 	ble.w	e8bc <_svfprintf_r+0x32c>
    eef2:	ee1b 1a10 	vmov	r1, s22
    eef6:	aa24      	add	r2, sp, #144	; 0x90
    eef8:	4658      	mov	r0, fp
    eefa:	f004 f9d5 	bl	132a8 <__ssprint_r>
    eefe:	2800      	cmp	r0, #0
    ef00:	d1ab      	bne.n	ee5a <_svfprintf_r+0x8ca>
    ef02:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ef04:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ef08:	e4da      	b.n	e8c0 <_svfprintf_r+0x330>
    ef0a:	2d10      	cmp	r5, #16
    ef0c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    ef10:	4e2c      	ldr	r6, [pc, #176]	; (efc4 <_svfprintf_r+0xa34>)
    ef12:	dd24      	ble.n	ef5e <_svfprintf_r+0x9ce>
    ef14:	9417      	str	r4, [sp, #92]	; 0x5c
    ef16:	2310      	movs	r3, #16
    ef18:	ee1b 4a10 	vmov	r4, s22
    ef1c:	4608      	mov	r0, r1
    ef1e:	e004      	b.n	ef2a <_svfprintf_r+0x99a>
    ef20:	3d10      	subs	r5, #16
    ef22:	2d10      	cmp	r5, #16
    ef24:	f10a 0a08 	add.w	sl, sl, #8
    ef28:	dd17      	ble.n	ef5a <_svfprintf_r+0x9ca>
    ef2a:	3001      	adds	r0, #1
    ef2c:	3210      	adds	r2, #16
    ef2e:	2807      	cmp	r0, #7
    ef30:	e9ca 6300 	strd	r6, r3, [sl]
    ef34:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    ef38:	ddf2      	ble.n	ef20 <_svfprintf_r+0x990>
    ef3a:	aa24      	add	r2, sp, #144	; 0x90
    ef3c:	4621      	mov	r1, r4
    ef3e:	4658      	mov	r0, fp
    ef40:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ef44:	f004 f9b0 	bl	132a8 <__ssprint_r>
    ef48:	2800      	cmp	r0, #0
    ef4a:	d186      	bne.n	ee5a <_svfprintf_r+0x8ca>
    ef4c:	3d10      	subs	r5, #16
    ef4e:	2d10      	cmp	r5, #16
    ef50:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    ef54:	f04f 0310 	mov.w	r3, #16
    ef58:	dce7      	bgt.n	ef2a <_svfprintf_r+0x99a>
    ef5a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    ef5c:	4601      	mov	r1, r0
    ef5e:	3101      	adds	r1, #1
    ef60:	442a      	add	r2, r5
    ef62:	2907      	cmp	r1, #7
    ef64:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    ef68:	f8ca 6000 	str.w	r6, [sl]
    ef6c:	f8ca 5004 	str.w	r5, [sl, #4]
    ef70:	f300 83bd 	bgt.w	f6ee <_svfprintf_r+0x115e>
    ef74:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ef78:	f10a 0a08 	add.w	sl, sl, #8
    ef7c:	e45d      	b.n	e83a <_svfprintf_r+0x2aa>
    ef7e:	f8cd 8008 	str.w	r8, [sp, #8]
    ef82:	2a0a      	cmp	r2, #10
    ef84:	f171 0300 	sbcs.w	r3, r1, #0
    ef88:	f080 8345 	bcs.w	f616 <_svfprintf_r+0x1086>
    ef8c:	3230      	adds	r2, #48	; 0x30
    ef8e:	2301      	movs	r3, #1
    ef90:	f8dd 8008 	ldr.w	r8, [sp, #8]
    ef94:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    ef98:	9305      	str	r3, [sp, #20]
    ef9a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    ef9e:	e668      	b.n	ec72 <_svfprintf_r+0x6e2>
    efa0:	ee1b 1a10 	vmov	r1, s22
    efa4:	aa24      	add	r2, sp, #144	; 0x90
    efa6:	4658      	mov	r0, fp
    efa8:	f004 f97e 	bl	132a8 <__ssprint_r>
    efac:	2800      	cmp	r0, #0
    efae:	f47f af54 	bne.w	ee5a <_svfprintf_r+0x8ca>
    efb2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    efb4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    efb8:	e452      	b.n	e860 <_svfprintf_r+0x2d0>
    efba:	bf00      	nop
    efbc:	20000f24 	.word	0x20000f24
    efc0:	20008720 	.word	0x20008720
    efc4:	200029a0 	.word	0x200029a0
    efc8:	ee1b 1a10 	vmov	r1, s22
    efcc:	aa24      	add	r2, sp, #144	; 0x90
    efce:	4658      	mov	r0, fp
    efd0:	f004 f96a 	bl	132a8 <__ssprint_r>
    efd4:	2800      	cmp	r0, #0
    efd6:	f47f af40 	bne.w	ee5a <_svfprintf_r+0x8ca>
    efda:	9a26      	ldr	r2, [sp, #152]	; 0x98
    efdc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    efe0:	e451      	b.n	e886 <_svfprintf_r+0x2f6>
    efe2:	2c10      	cmp	r4, #16
    efe4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    efe6:	4ebe      	ldr	r6, [pc, #760]	; (f2e0 <_svfprintf_r+0xd50>)
    efe8:	dd1f      	ble.n	f02a <_svfprintf_r+0xa9a>
    efea:	ee1b 8a10 	vmov	r8, s22
    efee:	2510      	movs	r5, #16
    eff0:	e004      	b.n	effc <_svfprintf_r+0xa6c>
    eff2:	3c10      	subs	r4, #16
    eff4:	2c10      	cmp	r4, #16
    eff6:	f10a 0a08 	add.w	sl, sl, #8
    effa:	dd16      	ble.n	f02a <_svfprintf_r+0xa9a>
    effc:	3301      	adds	r3, #1
    effe:	3210      	adds	r2, #16
    f000:	2b07      	cmp	r3, #7
    f002:	e9ca 6500 	strd	r6, r5, [sl]
    f006:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f00a:	ddf2      	ble.n	eff2 <_svfprintf_r+0xa62>
    f00c:	aa24      	add	r2, sp, #144	; 0x90
    f00e:	4641      	mov	r1, r8
    f010:	4658      	mov	r0, fp
    f012:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f016:	f004 f947 	bl	132a8 <__ssprint_r>
    f01a:	2800      	cmp	r0, #0
    f01c:	f47f af1d 	bne.w	ee5a <_svfprintf_r+0x8ca>
    f020:	3c10      	subs	r4, #16
    f022:	2c10      	cmp	r4, #16
    f024:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f028:	dce8      	bgt.n	effc <_svfprintf_r+0xa6c>
    f02a:	3301      	adds	r3, #1
    f02c:	4422      	add	r2, r4
    f02e:	2b07      	cmp	r3, #7
    f030:	e9ca 6400 	strd	r6, r4, [sl]
    f034:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f038:	f77f ac4b 	ble.w	e8d2 <_svfprintf_r+0x342>
    f03c:	ee1b 1a10 	vmov	r1, s22
    f040:	aa24      	add	r2, sp, #144	; 0x90
    f042:	4658      	mov	r0, fp
    f044:	f004 f930 	bl	132a8 <__ssprint_r>
    f048:	2800      	cmp	r0, #0
    f04a:	f47f af06 	bne.w	ee5a <_svfprintf_r+0x8ca>
    f04e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f050:	e43f      	b.n	e8d2 <_svfprintf_r+0x342>
    f052:	991b      	ldr	r1, [sp, #108]	; 0x6c
    f054:	2900      	cmp	r1, #0
    f056:	f340 835a 	ble.w	f70e <_svfprintf_r+0x117e>
    f05a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f05c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f05e:	429e      	cmp	r6, r3
    f060:	bfa8      	it	ge
    f062:	461e      	movge	r6, r3
    f064:	2e00      	cmp	r6, #0
    f066:	dd0b      	ble.n	f080 <_svfprintf_r+0xaf0>
    f068:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f06a:	3301      	adds	r3, #1
    f06c:	4432      	add	r2, r6
    f06e:	2b07      	cmp	r3, #7
    f070:	e9ca 4600 	strd	r4, r6, [sl]
    f074:	9226      	str	r2, [sp, #152]	; 0x98
    f076:	9325      	str	r3, [sp, #148]	; 0x94
    f078:	f300 8689 	bgt.w	fd8e <_svfprintf_r+0x17fe>
    f07c:	f10a 0a08 	add.w	sl, sl, #8
    f080:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    f082:	2e00      	cmp	r6, #0
    f084:	bfa8      	it	ge
    f086:	1bad      	subge	r5, r5, r6
    f088:	2d00      	cmp	r5, #0
    f08a:	f300 8203 	bgt.w	f494 <_svfprintf_r+0xf04>
    f08e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f090:	f418 6f80 	tst.w	r8, #1024	; 0x400
    f094:	4423      	add	r3, r4
    f096:	9305      	str	r3, [sp, #20]
    f098:	f040 821f 	bne.w	f4da <_svfprintf_r+0xf4a>
    f09c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f09e:	990e      	ldr	r1, [sp, #56]	; 0x38
    f0a0:	428b      	cmp	r3, r1
    f0a2:	db03      	blt.n	f0ac <_svfprintf_r+0xb1c>
    f0a4:	f018 0f01 	tst.w	r8, #1
    f0a8:	f000 84cf 	beq.w	fa4a <_svfprintf_r+0x14ba>
    f0ac:	9910      	ldr	r1, [sp, #64]	; 0x40
    f0ae:	9812      	ldr	r0, [sp, #72]	; 0x48
    f0b0:	440a      	add	r2, r1
    f0b2:	e9ca 0100 	strd	r0, r1, [sl]
    f0b6:	9925      	ldr	r1, [sp, #148]	; 0x94
    f0b8:	9226      	str	r2, [sp, #152]	; 0x98
    f0ba:	3101      	adds	r1, #1
    f0bc:	2907      	cmp	r1, #7
    f0be:	9125      	str	r1, [sp, #148]	; 0x94
    f0c0:	f300 86a5 	bgt.w	fe0e <_svfprintf_r+0x187e>
    f0c4:	f10a 0a08 	add.w	sl, sl, #8
    f0c8:	990e      	ldr	r1, [sp, #56]	; 0x38
    f0ca:	1865      	adds	r5, r4, r1
    f0cc:	1acc      	subs	r4, r1, r3
    f0ce:	9b05      	ldr	r3, [sp, #20]
    f0d0:	1aed      	subs	r5, r5, r3
    f0d2:	42a5      	cmp	r5, r4
    f0d4:	bfa8      	it	ge
    f0d6:	4625      	movge	r5, r4
    f0d8:	2d00      	cmp	r5, #0
    f0da:	dd0d      	ble.n	f0f8 <_svfprintf_r+0xb68>
    f0dc:	f8ca 3000 	str.w	r3, [sl]
    f0e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f0e2:	f8ca 5004 	str.w	r5, [sl, #4]
    f0e6:	3301      	adds	r3, #1
    f0e8:	442a      	add	r2, r5
    f0ea:	2b07      	cmp	r3, #7
    f0ec:	9226      	str	r2, [sp, #152]	; 0x98
    f0ee:	9325      	str	r3, [sp, #148]	; 0x94
    f0f0:	f300 86bb 	bgt.w	fe6a <_svfprintf_r+0x18da>
    f0f4:	f10a 0a08 	add.w	sl, sl, #8
    f0f8:	2d00      	cmp	r5, #0
    f0fa:	bfa8      	it	ge
    f0fc:	1b64      	subge	r4, r4, r5
    f0fe:	2c00      	cmp	r4, #0
    f100:	f77f abde 	ble.w	e8c0 <_svfprintf_r+0x330>
    f104:	2c10      	cmp	r4, #16
    f106:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f108:	f340 837c 	ble.w	f804 <_svfprintf_r+0x1274>
    f10c:	ee1b 6a10 	vmov	r6, s22
    f110:	2510      	movs	r5, #16
    f112:	e005      	b.n	f120 <_svfprintf_r+0xb90>
    f114:	f10a 0a08 	add.w	sl, sl, #8
    f118:	3c10      	subs	r4, #16
    f11a:	2c10      	cmp	r4, #16
    f11c:	f340 8372 	ble.w	f804 <_svfprintf_r+0x1274>
    f120:	3301      	adds	r3, #1
    f122:	4970      	ldr	r1, [pc, #448]	; (f2e4 <_svfprintf_r+0xd54>)
    f124:	3210      	adds	r2, #16
    f126:	2b07      	cmp	r3, #7
    f128:	e9ca 1500 	strd	r1, r5, [sl]
    f12c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f130:	ddf0      	ble.n	f114 <_svfprintf_r+0xb84>
    f132:	aa24      	add	r2, sp, #144	; 0x90
    f134:	4631      	mov	r1, r6
    f136:	4658      	mov	r0, fp
    f138:	f004 f8b6 	bl	132a8 <__ssprint_r>
    f13c:	2800      	cmp	r0, #0
    f13e:	f47f ae8c 	bne.w	ee5a <_svfprintf_r+0x8ca>
    f142:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f146:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f14a:	e7e5      	b.n	f118 <_svfprintf_r+0xb88>
    f14c:	2b30      	cmp	r3, #48	; 0x30
    f14e:	f43f ad8b 	beq.w	ec68 <_svfprintf_r+0x6d8>
    f152:	2330      	movs	r3, #48	; 0x30
    f154:	3802      	subs	r0, #2
    f156:	f804 3c01 	strb.w	r3, [r4, #-1]
    f15a:	ab50      	add	r3, sp, #320	; 0x140
    f15c:	1a1b      	subs	r3, r3, r0
    f15e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    f162:	9305      	str	r3, [sp, #20]
    f164:	4604      	mov	r4, r0
    f166:	e584      	b.n	ec72 <_svfprintf_r+0x6e2>
    f168:	f018 0f01 	tst.w	r8, #1
    f16c:	f47f ae82 	bne.w	ee74 <_svfprintf_r+0x8e4>
    f170:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f172:	f8ca 4000 	str.w	r4, [sl]
    f176:	3301      	adds	r3, #1
    f178:	3201      	adds	r2, #1
    f17a:	2101      	movs	r1, #1
    f17c:	2b07      	cmp	r3, #7
    f17e:	9226      	str	r2, [sp, #152]	; 0x98
    f180:	9325      	str	r3, [sp, #148]	; 0x94
    f182:	f8ca 1004 	str.w	r1, [sl, #4]
    f186:	f77f aea5 	ble.w	eed4 <_svfprintf_r+0x944>
    f18a:	ee1b 1a10 	vmov	r1, s22
    f18e:	aa24      	add	r2, sp, #144	; 0x90
    f190:	4658      	mov	r0, fp
    f192:	f004 f889 	bl	132a8 <__ssprint_r>
    f196:	2800      	cmp	r0, #0
    f198:	f47f ae5f 	bne.w	ee5a <_svfprintf_r+0x8ca>
    f19c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f1a0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f1a4:	e698      	b.n	eed8 <_svfprintf_r+0x948>
    f1a6:	990e      	ldr	r1, [sp, #56]	; 0x38
    f1a8:	1e4c      	subs	r4, r1, #1
    f1aa:	2c00      	cmp	r4, #0
    f1ac:	f77f ae94 	ble.w	eed8 <_svfprintf_r+0x948>
    f1b0:	2c10      	cmp	r4, #16
    f1b2:	f340 8361 	ble.w	f878 <_svfprintf_r+0x12e8>
    f1b6:	ee1b 6a10 	vmov	r6, s22
    f1ba:	2510      	movs	r5, #16
    f1bc:	e005      	b.n	f1ca <_svfprintf_r+0xc3a>
    f1be:	f10a 0a08 	add.w	sl, sl, #8
    f1c2:	3c10      	subs	r4, #16
    f1c4:	2c10      	cmp	r4, #16
    f1c6:	f340 8357 	ble.w	f878 <_svfprintf_r+0x12e8>
    f1ca:	3301      	adds	r3, #1
    f1cc:	4945      	ldr	r1, [pc, #276]	; (f2e4 <_svfprintf_r+0xd54>)
    f1ce:	3210      	adds	r2, #16
    f1d0:	2b07      	cmp	r3, #7
    f1d2:	e9ca 1500 	strd	r1, r5, [sl]
    f1d6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f1da:	ddf0      	ble.n	f1be <_svfprintf_r+0xc2e>
    f1dc:	aa24      	add	r2, sp, #144	; 0x90
    f1de:	4631      	mov	r1, r6
    f1e0:	4658      	mov	r0, fp
    f1e2:	f004 f861 	bl	132a8 <__ssprint_r>
    f1e6:	2800      	cmp	r0, #0
    f1e8:	f47f ae37 	bne.w	ee5a <_svfprintf_r+0x8ca>
    f1ec:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f1f0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f1f4:	e7e5      	b.n	f1c2 <_svfprintf_r+0xc32>
    f1f6:	ee1b 1a10 	vmov	r1, s22
    f1fa:	aa24      	add	r2, sp, #144	; 0x90
    f1fc:	4658      	mov	r0, fp
    f1fe:	f004 f853 	bl	132a8 <__ssprint_r>
    f202:	2800      	cmp	r0, #0
    f204:	f47f ae29 	bne.w	ee5a <_svfprintf_r+0x8ca>
    f208:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f20a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f20e:	f7ff bb44 	b.w	e89a <_svfprintf_r+0x30a>
    f212:	9b02      	ldr	r3, [sp, #8]
    f214:	f013 0310 	ands.w	r3, r3, #16
    f218:	f040 80c1 	bne.w	f39e <_svfprintf_r+0xe0e>
    f21c:	9a02      	ldr	r2, [sp, #8]
    f21e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    f222:	f000 837a 	beq.w	f91a <_svfprintf_r+0x138a>
    f226:	9808      	ldr	r0, [sp, #32]
    f228:	f850 2b04 	ldr.w	r2, [r0], #4
    f22c:	9008      	str	r0, [sp, #32]
    f22e:	4619      	mov	r1, r3
    f230:	b292      	uxth	r2, r2
    f232:	2301      	movs	r3, #1
    f234:	e451      	b.n	eada <_svfprintf_r+0x54a>
    f236:	f018 0310 	ands.w	r3, r8, #16
    f23a:	d155      	bne.n	f2e8 <_svfprintf_r+0xd58>
    f23c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    f240:	f000 835d 	beq.w	f8fe <_svfprintf_r+0x136e>
    f244:	9808      	ldr	r0, [sp, #32]
    f246:	f850 2b04 	ldr.w	r2, [r0], #4
    f24a:	9008      	str	r0, [sp, #32]
    f24c:	4619      	mov	r1, r3
    f24e:	b292      	uxth	r2, r2
    f250:	e4a8      	b.n	eba4 <_svfprintf_r+0x614>
    f252:	4252      	negs	r2, r2
    f254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    f258:	f8cd 8008 	str.w	r8, [sp, #8]
    f25c:	202d      	movs	r0, #45	; 0x2d
    f25e:	2301      	movs	r3, #1
    f260:	e43c      	b.n	eadc <_svfprintf_r+0x54c>
    f262:	ee1b 1a10 	vmov	r1, s22
    f266:	aa24      	add	r2, sp, #144	; 0x90
    f268:	4658      	mov	r0, fp
    f26a:	f004 f81d 	bl	132a8 <__ssprint_r>
    f26e:	2800      	cmp	r0, #0
    f270:	f47f adf3 	bne.w	ee5a <_svfprintf_r+0x8ca>
    f274:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f278:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f27c:	e616      	b.n	eeac <_svfprintf_r+0x91c>
    f27e:	ee1b 1a10 	vmov	r1, s22
    f282:	aa24      	add	r2, sp, #144	; 0x90
    f284:	4658      	mov	r0, fp
    f286:	f004 f80f 	bl	132a8 <__ssprint_r>
    f28a:	2800      	cmp	r0, #0
    f28c:	f47f ade5 	bne.w	ee5a <_svfprintf_r+0x8ca>
    f290:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f294:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f298:	e5fb      	b.n	ee92 <_svfprintf_r+0x902>
    f29a:	f018 0f01 	tst.w	r8, #1
    f29e:	f43f ab0f 	beq.w	e8c0 <_svfprintf_r+0x330>
    f2a2:	e52a      	b.n	ecfa <_svfprintf_r+0x76a>
    f2a4:	9308      	str	r3, [sp, #32]
    f2a6:	f899 3000 	ldrb.w	r3, [r9]
    f2aa:	f7ff b9cd 	b.w	e648 <_svfprintf_r+0xb8>
    f2ae:	ac50      	add	r4, sp, #320	; 0x140
    f2b0:	e4df      	b.n	ec72 <_svfprintf_r+0x6e2>
    f2b2:	f418 7f00 	tst.w	r8, #512	; 0x200
    f2b6:	f040 83db 	bne.w	fa70 <_svfprintf_r+0x14e0>
    f2ba:	f853 2b04 	ldr.w	r2, [r3], #4
    f2be:	9308      	str	r3, [sp, #32]
    f2c0:	17d1      	asrs	r1, r2, #31
    f2c2:	460b      	mov	r3, r1
    f2c4:	f7ff bbb6 	b.w	ea34 <_svfprintf_r+0x4a4>
    f2c8:	9b08      	ldr	r3, [sp, #32]
    f2ca:	9804      	ldr	r0, [sp, #16]
    f2cc:	f853 1b04 	ldr.w	r1, [r3], #4
    f2d0:	9308      	str	r3, [sp, #32]
    f2d2:	17c2      	asrs	r2, r0, #31
    f2d4:	e9c1 0200 	strd	r0, r2, [r1]
    f2d8:	464c      	mov	r4, r9
    f2da:	f7ff b98b 	b.w	e5f4 <_svfprintf_r+0x64>
    f2de:	bf00      	nop
    f2e0:	200029a0 	.word	0x200029a0
    f2e4:	20008720 	.word	0x20008720
    f2e8:	9b08      	ldr	r3, [sp, #32]
    f2ea:	f853 2b04 	ldr.w	r2, [r3], #4
    f2ee:	9308      	str	r3, [sp, #32]
    f2f0:	e458      	b.n	eba4 <_svfprintf_r+0x614>
    f2f2:	eeb4 8b48 	vcmp.f64	d8, d8
    f2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f2fa:	f180 8694 	bvs.w	10026 <_svfprintf_r+0x1a96>
    f2fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f300:	2b61      	cmp	r3, #97	; 0x61
    f302:	f000 8552 	beq.w	fdaa <_svfprintf_r+0x181a>
    f306:	2b41      	cmp	r3, #65	; 0x41
    f308:	f000 85c0 	beq.w	fe8c <_svfprintf_r+0x18fc>
    f30c:	9b03      	ldr	r3, [sp, #12]
    f30e:	3301      	adds	r3, #1
    f310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f312:	f023 0520 	bic.w	r5, r3, #32
    f316:	f000 8480 	beq.w	fc1a <_svfprintf_r+0x168a>
    f31a:	2d47      	cmp	r5, #71	; 0x47
    f31c:	d104      	bne.n	f328 <_svfprintf_r+0xd98>
    f31e:	9b03      	ldr	r3, [sp, #12]
    f320:	2b00      	cmp	r3, #0
    f322:	bf08      	it	eq
    f324:	2301      	moveq	r3, #1
    f326:	9303      	str	r3, [sp, #12]
    f328:	ee18 3a90 	vmov	r3, s17
    f32c:	2b00      	cmp	r3, #0
    f32e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    f332:	4646      	mov	r6, r8
    f334:	f2c0 8618 	blt.w	ff68 <_svfprintf_r+0x19d8>
    f338:	eeb0 ab48 	vmov.f64	d10, d8
    f33c:	2300      	movs	r3, #0
    f33e:	4690      	mov	r8, r2
    f340:	9309      	str	r3, [sp, #36]	; 0x24
    f342:	9307      	str	r3, [sp, #28]
    f344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f346:	3b41      	subs	r3, #65	; 0x41
    f348:	2b25      	cmp	r3, #37	; 0x25
    f34a:	f200 8398 	bhi.w	fa7e <_svfprintf_r+0x14ee>
    f34e:	e8df f013 	tbh	[pc, r3, lsl #1]
    f352:	046f      	.short	0x046f
    f354:	03960396 	.word	0x03960396
    f358:	04680396 	.word	0x04680396
    f35c:	0396046c 	.word	0x0396046c
    f360:	03960396 	.word	0x03960396
    f364:	03960396 	.word	0x03960396
    f368:	03960396 	.word	0x03960396
    f36c:	03960396 	.word	0x03960396
    f370:	03960396 	.word	0x03960396
    f374:	03960396 	.word	0x03960396
    f378:	03960396 	.word	0x03960396
    f37c:	03960396 	.word	0x03960396
    f380:	03960396 	.word	0x03960396
    f384:	03960396 	.word	0x03960396
    f388:	03960396 	.word	0x03960396
    f38c:	03960396 	.word	0x03960396
    f390:	03960396 	.word	0x03960396
    f394:	03960396 	.word	0x03960396
    f398:	04680396 	.word	0x04680396
    f39c:	046c      	.short	0x046c
    f39e:	9b08      	ldr	r3, [sp, #32]
    f3a0:	f853 2b04 	ldr.w	r2, [r3], #4
    f3a4:	9308      	str	r3, [sp, #32]
    f3a6:	2301      	movs	r3, #1
    f3a8:	f7ff bb97 	b.w	eada <_svfprintf_r+0x54a>
    f3ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f3ae:	2b00      	cmp	r3, #0
    f3b0:	f43f a9cf 	beq.w	e752 <_svfprintf_r+0x1c2>
    f3b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f3b6:	781b      	ldrb	r3, [r3, #0]
    f3b8:	2b00      	cmp	r3, #0
    f3ba:	f43f a9ca 	beq.w	e752 <_svfprintf_r+0x1c2>
    f3be:	f899 3000 	ldrb.w	r3, [r9]
    f3c2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    f3c6:	f7ff b93f 	b.w	e648 <_svfprintf_r+0xb8>
    f3ca:	930b      	str	r3, [sp, #44]	; 0x2c
    f3cc:	f8cd 8008 	str.w	r8, [sp, #8]
    f3d0:	f7ff bbf1 	b.w	ebb6 <_svfprintf_r+0x626>
    f3d4:	930b      	str	r3, [sp, #44]	; 0x2c
    f3d6:	4b9a      	ldr	r3, [pc, #616]	; (f640 <_svfprintf_r+0x10b0>)
    f3d8:	9311      	str	r3, [sp, #68]	; 0x44
    f3da:	f018 0120 	ands.w	r1, r8, #32
    f3de:	f000 8105 	beq.w	f5ec <_svfprintf_r+0x105c>
    f3e2:	9b08      	ldr	r3, [sp, #32]
    f3e4:	3307      	adds	r3, #7
    f3e6:	f023 0307 	bic.w	r3, r3, #7
    f3ea:	6859      	ldr	r1, [r3, #4]
    f3ec:	f853 2b08 	ldr.w	r2, [r3], #8
    f3f0:	9308      	str	r3, [sp, #32]
    f3f2:	f018 0f01 	tst.w	r8, #1
    f3f6:	d00a      	beq.n	f40e <_svfprintf_r+0xe7e>
    f3f8:	ea52 0301 	orrs.w	r3, r2, r1
    f3fc:	d007      	beq.n	f40e <_svfprintf_r+0xe7e>
    f3fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f400:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    f404:	2330      	movs	r3, #48	; 0x30
    f406:	f048 0802 	orr.w	r8, r8, #2
    f40a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    f40e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    f412:	9302      	str	r3, [sp, #8]
    f414:	2302      	movs	r3, #2
    f416:	f7ff bb60 	b.w	eada <_svfprintf_r+0x54a>
    f41a:	930b      	str	r3, [sp, #44]	; 0x2c
    f41c:	f7ff bbb6 	b.w	eb8c <_svfprintf_r+0x5fc>
    f420:	930b      	str	r3, [sp, #44]	; 0x2c
    f422:	4b88      	ldr	r3, [pc, #544]	; (f644 <_svfprintf_r+0x10b4>)
    f424:	9311      	str	r3, [sp, #68]	; 0x44
    f426:	e7d8      	b.n	f3da <_svfprintf_r+0xe4a>
    f428:	9b08      	ldr	r3, [sp, #32]
    f42a:	2101      	movs	r1, #1
    f42c:	f853 2b04 	ldr.w	r2, [r3], #4
    f430:	9102      	str	r1, [sp, #8]
    f432:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    f436:	9308      	str	r3, [sp, #32]
    f438:	9105      	str	r1, [sp, #20]
    f43a:	ac37      	add	r4, sp, #220	; 0xdc
    f43c:	f7ff baaf 	b.w	e99e <_svfprintf_r+0x40e>
    f440:	ee1b 1a10 	vmov	r1, s22
    f444:	aa24      	add	r2, sp, #144	; 0x90
    f446:	4658      	mov	r0, fp
    f448:	f003 ff2e 	bl	132a8 <__ssprint_r>
    f44c:	2800      	cmp	r0, #0
    f44e:	f47f ad04 	bne.w	ee5a <_svfprintf_r+0x8ca>
    f452:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f454:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f458:	e45d      	b.n	ed16 <_svfprintf_r+0x786>
    f45a:	9b03      	ldr	r3, [sp, #12]
    f45c:	9407      	str	r4, [sp, #28]
    f45e:	2b06      	cmp	r3, #6
    f460:	4622      	mov	r2, r4
    f462:	bf28      	it	cs
    f464:	2306      	movcs	r3, #6
    f466:	9403      	str	r4, [sp, #12]
    f468:	4621      	mov	r1, r4
    f46a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    f46e:	4c76      	ldr	r4, [pc, #472]	; (f648 <_svfprintf_r+0x10b8>)
    f470:	9302      	str	r3, [sp, #8]
    f472:	9305      	str	r3, [sp, #20]
    f474:	920f      	str	r2, [sp, #60]	; 0x3c
    f476:	f7ff ba6c 	b.w	e952 <_svfprintf_r+0x3c2>
    f47a:	2140      	movs	r1, #64	; 0x40
    f47c:	4658      	mov	r0, fp
    f47e:	f7fb fa95 	bl	a9ac <_malloc_r>
    f482:	6020      	str	r0, [r4, #0]
    f484:	6120      	str	r0, [r4, #16]
    f486:	2800      	cmp	r0, #0
    f488:	f000 860f 	beq.w	100aa <_svfprintf_r+0x1b1a>
    f48c:	2340      	movs	r3, #64	; 0x40
    f48e:	6163      	str	r3, [r4, #20]
    f490:	f7ff b89e 	b.w	e5d0 <_svfprintf_r+0x40>
    f494:	2d10      	cmp	r5, #16
    f496:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f498:	f340 825d 	ble.w	f956 <_svfprintf_r+0x13c6>
    f49c:	4651      	mov	r1, sl
    f49e:	2610      	movs	r6, #16
    f4a0:	ee1b aa10 	vmov	sl, s22
    f4a4:	e004      	b.n	f4b0 <_svfprintf_r+0xf20>
    f4a6:	3108      	adds	r1, #8
    f4a8:	3d10      	subs	r5, #16
    f4aa:	2d10      	cmp	r5, #16
    f4ac:	f340 8252 	ble.w	f954 <_svfprintf_r+0x13c4>
    f4b0:	3301      	adds	r3, #1
    f4b2:	4866      	ldr	r0, [pc, #408]	; (f64c <_svfprintf_r+0x10bc>)
    f4b4:	3210      	adds	r2, #16
    f4b6:	2b07      	cmp	r3, #7
    f4b8:	e9c1 0600 	strd	r0, r6, [r1]
    f4bc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f4c0:	ddf1      	ble.n	f4a6 <_svfprintf_r+0xf16>
    f4c2:	aa24      	add	r2, sp, #144	; 0x90
    f4c4:	4651      	mov	r1, sl
    f4c6:	4658      	mov	r0, fp
    f4c8:	f003 feee 	bl	132a8 <__ssprint_r>
    f4cc:	2800      	cmp	r0, #0
    f4ce:	f47f acc4 	bne.w	ee5a <_svfprintf_r+0x8ca>
    f4d2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f4d6:	a927      	add	r1, sp, #156	; 0x9c
    f4d8:	e7e6      	b.n	f4a8 <_svfprintf_r+0xf18>
    f4da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f4dc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    f4e0:	18e3      	adds	r3, r4, r3
    f4e2:	9303      	str	r3, [sp, #12]
    f4e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f4e6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    f4ea:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    f4ec:	9d05      	ldr	r5, [sp, #20]
    f4ee:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    f4f2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    f4f6:	940b      	str	r4, [sp, #44]	; 0x2c
    f4f8:	ee1b 1a10 	vmov	r1, s22
    f4fc:	4650      	mov	r0, sl
    f4fe:	2b00      	cmp	r3, #0
    f500:	d034      	beq.n	f56c <_svfprintf_r+0xfdc>
    f502:	f1b8 0f00 	cmp.w	r8, #0
    f506:	d135      	bne.n	f574 <_svfprintf_r+0xfe4>
    f508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f50a:	3b01      	subs	r3, #1
    f50c:	3e01      	subs	r6, #1
    f50e:	930d      	str	r3, [sp, #52]	; 0x34
    f510:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f512:	e9c0 3900 	strd	r3, r9, [r0]
    f516:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f518:	3301      	adds	r3, #1
    f51a:	444a      	add	r2, r9
    f51c:	2b07      	cmp	r3, #7
    f51e:	9226      	str	r2, [sp, #152]	; 0x98
    f520:	9325      	str	r3, [sp, #148]	; 0x94
    f522:	dc6c      	bgt.n	f5fe <_svfprintf_r+0x106e>
    f524:	3008      	adds	r0, #8
    f526:	9b03      	ldr	r3, [sp, #12]
    f528:	f896 c000 	ldrb.w	ip, [r6]
    f52c:	1b5b      	subs	r3, r3, r5
    f52e:	4563      	cmp	r3, ip
    f530:	bfa8      	it	ge
    f532:	4663      	movge	r3, ip
    f534:	2b00      	cmp	r3, #0
    f536:	469a      	mov	sl, r3
    f538:	dd0c      	ble.n	f554 <_svfprintf_r+0xfc4>
    f53a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    f53c:	3401      	adds	r4, #1
    f53e:	441a      	add	r2, r3
    f540:	2c07      	cmp	r4, #7
    f542:	e9c0 5300 	strd	r5, r3, [r0]
    f546:	9226      	str	r2, [sp, #152]	; 0x98
    f548:	9425      	str	r4, [sp, #148]	; 0x94
    f54a:	f300 8177 	bgt.w	f83c <_svfprintf_r+0x12ac>
    f54e:	f896 c000 	ldrb.w	ip, [r6]
    f552:	3008      	adds	r0, #8
    f554:	f1ba 0f00 	cmp.w	sl, #0
    f558:	bfac      	ite	ge
    f55a:	ebac 040a 	subge.w	r4, ip, sl
    f55e:	4664      	movlt	r4, ip
    f560:	2c00      	cmp	r4, #0
    f562:	dc0a      	bgt.n	f57a <_svfprintf_r+0xfea>
    f564:	4465      	add	r5, ip
    f566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f568:	2b00      	cmp	r3, #0
    f56a:	d1ca      	bne.n	f502 <_svfprintf_r+0xf72>
    f56c:	f1b8 0f00 	cmp.w	r8, #0
    f570:	f000 83ac 	beq.w	fccc <_svfprintf_r+0x173c>
    f574:	f108 38ff 	add.w	r8, r8, #4294967295
    f578:	e7ca      	b.n	f510 <_svfprintf_r+0xf80>
    f57a:	2c10      	cmp	r4, #16
    f57c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    f580:	dd24      	ble.n	f5cc <_svfprintf_r+0x103c>
    f582:	9505      	str	r5, [sp, #20]
    f584:	f04f 0a10 	mov.w	sl, #16
    f588:	4663      	mov	r3, ip
    f58a:	460d      	mov	r5, r1
    f58c:	e004      	b.n	f598 <_svfprintf_r+0x1008>
    f58e:	3c10      	subs	r4, #16
    f590:	2c10      	cmp	r4, #16
    f592:	f100 0008 	add.w	r0, r0, #8
    f596:	dd16      	ble.n	f5c6 <_svfprintf_r+0x1036>
    f598:	3301      	adds	r3, #1
    f59a:	492c      	ldr	r1, [pc, #176]	; (f64c <_svfprintf_r+0x10bc>)
    f59c:	3210      	adds	r2, #16
    f59e:	2b07      	cmp	r3, #7
    f5a0:	e9c0 1a00 	strd	r1, sl, [r0]
    f5a4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f5a8:	ddf1      	ble.n	f58e <_svfprintf_r+0xffe>
    f5aa:	aa24      	add	r2, sp, #144	; 0x90
    f5ac:	4629      	mov	r1, r5
    f5ae:	4658      	mov	r0, fp
    f5b0:	f003 fe7a 	bl	132a8 <__ssprint_r>
    f5b4:	2800      	cmp	r0, #0
    f5b6:	f47f ac50 	bne.w	ee5a <_svfprintf_r+0x8ca>
    f5ba:	3c10      	subs	r4, #16
    f5bc:	2c10      	cmp	r4, #16
    f5be:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f5c2:	a827      	add	r0, sp, #156	; 0x9c
    f5c4:	dce8      	bgt.n	f598 <_svfprintf_r+0x1008>
    f5c6:	4629      	mov	r1, r5
    f5c8:	9d05      	ldr	r5, [sp, #20]
    f5ca:	469c      	mov	ip, r3
    f5cc:	f10c 0301 	add.w	r3, ip, #1
    f5d0:	4422      	add	r2, r4
    f5d2:	6044      	str	r4, [r0, #4]
    f5d4:	2b07      	cmp	r3, #7
    f5d6:	4c1d      	ldr	r4, [pc, #116]	; (f64c <_svfprintf_r+0x10bc>)
    f5d8:	6004      	str	r4, [r0, #0]
    f5da:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f5de:	f300 83c6 	bgt.w	fd6e <_svfprintf_r+0x17de>
    f5e2:	f896 c000 	ldrb.w	ip, [r6]
    f5e6:	3008      	adds	r0, #8
    f5e8:	4465      	add	r5, ip
    f5ea:	e7bc      	b.n	f566 <_svfprintf_r+0xfd6>
    f5ec:	f018 0310 	ands.w	r3, r8, #16
    f5f0:	f000 80c2 	beq.w	f778 <_svfprintf_r+0x11e8>
    f5f4:	9b08      	ldr	r3, [sp, #32]
    f5f6:	f853 2b04 	ldr.w	r2, [r3], #4
    f5fa:	9308      	str	r3, [sp, #32]
    f5fc:	e6f9      	b.n	f3f2 <_svfprintf_r+0xe62>
    f5fe:	aa24      	add	r2, sp, #144	; 0x90
    f600:	4658      	mov	r0, fp
    f602:	9105      	str	r1, [sp, #20]
    f604:	f003 fe50 	bl	132a8 <__ssprint_r>
    f608:	2800      	cmp	r0, #0
    f60a:	f47f ac26 	bne.w	ee5a <_svfprintf_r+0x8ca>
    f60e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f610:	9905      	ldr	r1, [sp, #20]
    f612:	a827      	add	r0, sp, #156	; 0x9c
    f614:	e787      	b.n	f526 <_svfprintf_r+0xf96>
    f616:	9802      	ldr	r0, [sp, #8]
    f618:	f8cd a01c 	str.w	sl, [sp, #28]
    f61c:	ac50      	add	r4, sp, #320	; 0x140
    f61e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    f622:	2500      	movs	r5, #0
    f624:	ee0a ba10 	vmov	s20, fp
    f628:	4b09      	ldr	r3, [pc, #36]	; (f650 <_svfprintf_r+0x10c0>)
    f62a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    f62e:	f8cd 9014 	str.w	r9, [sp, #20]
    f632:	46a3      	mov	fp, r4
    f634:	f04f 0805 	mov.w	r8, #5
    f638:	46ac      	mov	ip, r5
    f63a:	4604      	mov	r4, r0
    f63c:	e010      	b.n	f660 <_svfprintf_r+0x10d0>
    f63e:	bf00      	nop
    f640:	20000ef4 	.word	0x20000ef4
    f644:	20000f08 	.word	0x20000f08
    f648:	20000f1c 	.word	0x20000f1c
    f64c:	20008720 	.word	0x20008720
    f650:	cccccccd 	.word	0xcccccccd
    f654:	2a0a      	cmp	r2, #10
    f656:	f171 0100 	sbcs.w	r1, r1, #0
    f65a:	d336      	bcc.n	f6ca <_svfprintf_r+0x113a>
    f65c:	464a      	mov	r2, r9
    f65e:	4631      	mov	r1, r6
    f660:	1850      	adds	r0, r2, r1
    f662:	f140 0000 	adc.w	r0, r0, #0
    f666:	fba3 5600 	umull	r5, r6, r3, r0
    f66a:	f026 0503 	bic.w	r5, r6, #3
    f66e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    f672:	1b40      	subs	r0, r0, r5
    f674:	1a15      	subs	r5, r2, r0
    f676:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    f67a:	f161 0e00 	sbc.w	lr, r1, #0
    f67e:	fb06 f605 	mul.w	r6, r6, r5
    f682:	fba5 9503 	umull	r9, r5, r5, r3
    f686:	fb03 660e 	mla	r6, r3, lr, r6
    f68a:	f009 0e01 	and.w	lr, r9, #1
    f68e:	442e      	add	r6, r5
    f690:	fbae 5e08 	umull	r5, lr, lr, r8
    f694:	182d      	adds	r5, r5, r0
    f696:	ea4f 0959 	mov.w	r9, r9, lsr #1
    f69a:	3530      	adds	r5, #48	; 0x30
    f69c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    f6a0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    f6a4:	f10c 0c01 	add.w	ip, ip, #1
    f6a8:	f10b 3bff 	add.w	fp, fp, #4294967295
    f6ac:	0876      	lsrs	r6, r6, #1
    f6ae:	2c00      	cmp	r4, #0
    f6b0:	d0d0      	beq.n	f654 <_svfprintf_r+0x10c4>
    f6b2:	f89a 0000 	ldrb.w	r0, [sl]
    f6b6:	4584      	cmp	ip, r0
    f6b8:	d1cc      	bne.n	f654 <_svfprintf_r+0x10c4>
    f6ba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    f6be:	d0c9      	beq.n	f654 <_svfprintf_r+0x10c4>
    f6c0:	2a0a      	cmp	r2, #10
    f6c2:	f171 0100 	sbcs.w	r1, r1, #0
    f6c6:	f080 818f 	bcs.w	f9e8 <_svfprintf_r+0x1458>
    f6ca:	465c      	mov	r4, fp
    f6cc:	ab50      	add	r3, sp, #320	; 0x140
    f6ce:	1b1b      	subs	r3, r3, r4
    f6d0:	f8dd 9014 	ldr.w	r9, [sp, #20]
    f6d4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    f6d8:	ee1a ba10 	vmov	fp, s20
    f6dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
    f6e0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    f6e4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    f6e8:	9305      	str	r3, [sp, #20]
    f6ea:	f7ff bac2 	b.w	ec72 <_svfprintf_r+0x6e2>
    f6ee:	ee1b 1a10 	vmov	r1, s22
    f6f2:	aa24      	add	r2, sp, #144	; 0x90
    f6f4:	4658      	mov	r0, fp
    f6f6:	f003 fdd7 	bl	132a8 <__ssprint_r>
    f6fa:	2800      	cmp	r0, #0
    f6fc:	f47f abad 	bne.w	ee5a <_svfprintf_r+0x8ca>
    f700:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f704:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f706:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f70a:	f7ff b896 	b.w	e83a <_svfprintf_r+0x2aa>
    f70e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f710:	48be      	ldr	r0, [pc, #760]	; (fa0c <_svfprintf_r+0x147c>)
    f712:	f8ca 0000 	str.w	r0, [sl]
    f716:	3301      	adds	r3, #1
    f718:	3201      	adds	r2, #1
    f71a:	2001      	movs	r0, #1
    f71c:	2b07      	cmp	r3, #7
    f71e:	9226      	str	r2, [sp, #152]	; 0x98
    f720:	9325      	str	r3, [sp, #148]	; 0x94
    f722:	f8ca 0004 	str.w	r0, [sl, #4]
    f726:	f300 8177 	bgt.w	fa18 <_svfprintf_r+0x1488>
    f72a:	f10a 0a08 	add.w	sl, sl, #8
    f72e:	2900      	cmp	r1, #0
    f730:	f040 80af 	bne.w	f892 <_svfprintf_r+0x1302>
    f734:	990e      	ldr	r1, [sp, #56]	; 0x38
    f736:	f008 0301 	and.w	r3, r8, #1
    f73a:	430b      	orrs	r3, r1
    f73c:	f43f a8c0 	beq.w	e8c0 <_svfprintf_r+0x330>
    f740:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f742:	9912      	ldr	r1, [sp, #72]	; 0x48
    f744:	441a      	add	r2, r3
    f746:	e9ca 1300 	strd	r1, r3, [sl]
    f74a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f74c:	9226      	str	r2, [sp, #152]	; 0x98
    f74e:	3301      	adds	r3, #1
    f750:	2b07      	cmp	r3, #7
    f752:	9325      	str	r3, [sp, #148]	; 0x94
    f754:	f300 8252 	bgt.w	fbfc <_svfprintf_r+0x166c>
    f758:	f10a 0a08 	add.w	sl, sl, #8
    f75c:	990e      	ldr	r1, [sp, #56]	; 0x38
    f75e:	f8ca 4000 	str.w	r4, [sl]
    f762:	3301      	adds	r3, #1
    f764:	440a      	add	r2, r1
    f766:	2b07      	cmp	r3, #7
    f768:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f76c:	f8ca 1004 	str.w	r1, [sl, #4]
    f770:	f77f a8a4 	ble.w	e8bc <_svfprintf_r+0x32c>
    f774:	f7ff bbbd 	b.w	eef2 <_svfprintf_r+0x962>
    f778:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    f77c:	f000 80dd 	beq.w	f93a <_svfprintf_r+0x13aa>
    f780:	9808      	ldr	r0, [sp, #32]
    f782:	f850 2b04 	ldr.w	r2, [r0], #4
    f786:	9008      	str	r0, [sp, #32]
    f788:	4619      	mov	r1, r3
    f78a:	b292      	uxth	r2, r2
    f78c:	e631      	b.n	f3f2 <_svfprintf_r+0xe62>
    f78e:	ee1b 1a10 	vmov	r1, s22
    f792:	aa24      	add	r2, sp, #144	; 0x90
    f794:	4658      	mov	r0, fp
    f796:	f003 fd87 	bl	132a8 <__ssprint_r>
    f79a:	2800      	cmp	r0, #0
    f79c:	f47f ab5d 	bne.w	ee5a <_svfprintf_r+0x8ca>
    f7a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f7a2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f7a6:	f7ff baa3 	b.w	ecf0 <_svfprintf_r+0x760>
    f7aa:	ae22      	add	r6, sp, #136	; 0x88
    f7ac:	2208      	movs	r2, #8
    f7ae:	2100      	movs	r1, #0
    f7b0:	4630      	mov	r0, r6
    f7b2:	941d      	str	r4, [sp, #116]	; 0x74
    f7b4:	f7fd f822 	bl	c7fc <memset>
    f7b8:	9b03      	ldr	r3, [sp, #12]
    f7ba:	1c5a      	adds	r2, r3, #1
    f7bc:	f000 80db 	beq.w	f976 <_svfprintf_r+0x13e6>
    f7c0:	2500      	movs	r5, #0
    f7c2:	f8cd 9008 	str.w	r9, [sp, #8]
    f7c6:	f8cd 801c 	str.w	r8, [sp, #28]
    f7ca:	4699      	mov	r9, r3
    f7cc:	46a8      	mov	r8, r5
    f7ce:	e00c      	b.n	f7ea <_svfprintf_r+0x125a>
    f7d0:	a937      	add	r1, sp, #220	; 0xdc
    f7d2:	4658      	mov	r0, fp
    f7d4:	f003 fc3e 	bl	13054 <_wcrtomb_r>
    f7d8:	1c43      	adds	r3, r0, #1
    f7da:	4440      	add	r0, r8
    f7dc:	f000 83c8 	beq.w	ff70 <_svfprintf_r+0x19e0>
    f7e0:	4548      	cmp	r0, r9
    f7e2:	dc08      	bgt.n	f7f6 <_svfprintf_r+0x1266>
    f7e4:	f000 8418 	beq.w	10018 <_svfprintf_r+0x1a88>
    f7e8:	4680      	mov	r8, r0
    f7ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    f7ec:	5952      	ldr	r2, [r2, r5]
    f7ee:	4633      	mov	r3, r6
    f7f0:	3504      	adds	r5, #4
    f7f2:	2a00      	cmp	r2, #0
    f7f4:	d1ec      	bne.n	f7d0 <_svfprintf_r+0x1240>
    f7f6:	f8cd 8014 	str.w	r8, [sp, #20]
    f7fa:	f8dd 9008 	ldr.w	r9, [sp, #8]
    f7fe:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f802:	e0c5      	b.n	f990 <_svfprintf_r+0x1400>
    f804:	3301      	adds	r3, #1
    f806:	4982      	ldr	r1, [pc, #520]	; (fa10 <_svfprintf_r+0x1480>)
    f808:	f8ca 4004 	str.w	r4, [sl, #4]
    f80c:	4422      	add	r2, r4
    f80e:	2b07      	cmp	r3, #7
    f810:	f8ca 1000 	str.w	r1, [sl]
    f814:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f818:	f77f a850 	ble.w	e8bc <_svfprintf_r+0x32c>
    f81c:	f7ff bb69 	b.w	eef2 <_svfprintf_r+0x962>
    f820:	ee1b 1a10 	vmov	r1, s22
    f824:	aa24      	add	r2, sp, #144	; 0x90
    f826:	4658      	mov	r0, fp
    f828:	f003 fd3e 	bl	132a8 <__ssprint_r>
    f82c:	2800      	cmp	r0, #0
    f82e:	f47f ab14 	bne.w	ee5a <_svfprintf_r+0x8ca>
    f832:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f834:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f838:	f7ff b829 	b.w	e88e <_svfprintf_r+0x2fe>
    f83c:	aa24      	add	r2, sp, #144	; 0x90
    f83e:	4658      	mov	r0, fp
    f840:	9105      	str	r1, [sp, #20]
    f842:	f003 fd31 	bl	132a8 <__ssprint_r>
    f846:	2800      	cmp	r0, #0
    f848:	f47f ab07 	bne.w	ee5a <_svfprintf_r+0x8ca>
    f84c:	f896 c000 	ldrb.w	ip, [r6]
    f850:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f852:	9905      	ldr	r1, [sp, #20]
    f854:	a827      	add	r0, sp, #156	; 0x9c
    f856:	e67d      	b.n	f554 <_svfprintf_r+0xfc4>
    f858:	2b01      	cmp	r3, #1
    f85a:	f8cd 8008 	str.w	r8, [sp, #8]
    f85e:	f47f a9f3 	bne.w	ec48 <_svfprintf_r+0x6b8>
    f862:	f7ff bb93 	b.w	ef8c <_svfprintf_r+0x9fc>
    f866:	9b08      	ldr	r3, [sp, #32]
    f868:	9904      	ldr	r1, [sp, #16]
    f86a:	f853 2b04 	ldr.w	r2, [r3], #4
    f86e:	464c      	mov	r4, r9
    f870:	6011      	str	r1, [r2, #0]
    f872:	9308      	str	r3, [sp, #32]
    f874:	f7fe bebe 	b.w	e5f4 <_svfprintf_r+0x64>
    f878:	3301      	adds	r3, #1
    f87a:	4965      	ldr	r1, [pc, #404]	; (fa10 <_svfprintf_r+0x1480>)
    f87c:	f8ca 4004 	str.w	r4, [sl, #4]
    f880:	4422      	add	r2, r4
    f882:	2b07      	cmp	r3, #7
    f884:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f888:	f8ca 1000 	str.w	r1, [sl]
    f88c:	f77f ab22 	ble.w	eed4 <_svfprintf_r+0x944>
    f890:	e47b      	b.n	f18a <_svfprintf_r+0xbfa>
    f892:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f894:	9812      	ldr	r0, [sp, #72]	; 0x48
    f896:	441a      	add	r2, r3
    f898:	e9ca 0300 	strd	r0, r3, [sl]
    f89c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f89e:	9226      	str	r2, [sp, #152]	; 0x98
    f8a0:	3301      	adds	r3, #1
    f8a2:	2b07      	cmp	r3, #7
    f8a4:	9325      	str	r3, [sp, #148]	; 0x94
    f8a6:	f300 81a9 	bgt.w	fbfc <_svfprintf_r+0x166c>
    f8aa:	f10a 0a08 	add.w	sl, sl, #8
    f8ae:	2900      	cmp	r1, #0
    f8b0:	f6bf af54 	bge.w	f75c <_svfprintf_r+0x11cc>
    f8b4:	424d      	negs	r5, r1
    f8b6:	3110      	adds	r1, #16
    f8b8:	f280 830f 	bge.w	feda <_svfprintf_r+0x194a>
    f8bc:	ee1b 1a10 	vmov	r1, s22
    f8c0:	2610      	movs	r6, #16
    f8c2:	e005      	b.n	f8d0 <_svfprintf_r+0x1340>
    f8c4:	f10a 0a08 	add.w	sl, sl, #8
    f8c8:	3d10      	subs	r5, #16
    f8ca:	2d10      	cmp	r5, #16
    f8cc:	f340 8305 	ble.w	feda <_svfprintf_r+0x194a>
    f8d0:	3301      	adds	r3, #1
    f8d2:	484f      	ldr	r0, [pc, #316]	; (fa10 <_svfprintf_r+0x1480>)
    f8d4:	3210      	adds	r2, #16
    f8d6:	2b07      	cmp	r3, #7
    f8d8:	e9ca 0600 	strd	r0, r6, [sl]
    f8dc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f8e0:	ddf0      	ble.n	f8c4 <_svfprintf_r+0x1334>
    f8e2:	aa24      	add	r2, sp, #144	; 0x90
    f8e4:	4658      	mov	r0, fp
    f8e6:	9103      	str	r1, [sp, #12]
    f8e8:	f003 fcde 	bl	132a8 <__ssprint_r>
    f8ec:	2800      	cmp	r0, #0
    f8ee:	f47f aab4 	bne.w	ee5a <_svfprintf_r+0x8ca>
    f8f2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f8f6:	9903      	ldr	r1, [sp, #12]
    f8f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f8fc:	e7e4      	b.n	f8c8 <_svfprintf_r+0x1338>
    f8fe:	9b08      	ldr	r3, [sp, #32]
    f900:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    f904:	bf1a      	itte	ne
    f906:	4611      	movne	r1, r2
    f908:	f853 2b04 	ldrne.w	r2, [r3], #4
    f90c:	f853 2b04 	ldreq.w	r2, [r3], #4
    f910:	9308      	str	r3, [sp, #32]
    f912:	bf18      	it	ne
    f914:	b2d2      	uxtbne	r2, r2
    f916:	f7ff b945 	b.w	eba4 <_svfprintf_r+0x614>
    f91a:	9b02      	ldr	r3, [sp, #8]
    f91c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    f920:	9b08      	ldr	r3, [sp, #32]
    f922:	bf1a      	itte	ne
    f924:	4611      	movne	r1, r2
    f926:	f853 2b04 	ldrne.w	r2, [r3], #4
    f92a:	f853 2b04 	ldreq.w	r2, [r3], #4
    f92e:	9308      	str	r3, [sp, #32]
    f930:	bf18      	it	ne
    f932:	b2d2      	uxtbne	r2, r2
    f934:	2301      	movs	r3, #1
    f936:	f7ff b8d0 	b.w	eada <_svfprintf_r+0x54a>
    f93a:	9b08      	ldr	r3, [sp, #32]
    f93c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    f940:	bf1a      	itte	ne
    f942:	4611      	movne	r1, r2
    f944:	f853 2b04 	ldrne.w	r2, [r3], #4
    f948:	f853 2b04 	ldreq.w	r2, [r3], #4
    f94c:	9308      	str	r3, [sp, #32]
    f94e:	bf18      	it	ne
    f950:	b2d2      	uxtbne	r2, r2
    f952:	e54e      	b.n	f3f2 <_svfprintf_r+0xe62>
    f954:	468a      	mov	sl, r1
    f956:	3301      	adds	r3, #1
    f958:	492d      	ldr	r1, [pc, #180]	; (fa10 <_svfprintf_r+0x1480>)
    f95a:	f8ca 5004 	str.w	r5, [sl, #4]
    f95e:	442a      	add	r2, r5
    f960:	2b07      	cmp	r3, #7
    f962:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f966:	f8ca 1000 	str.w	r1, [sl]
    f96a:	f300 8139 	bgt.w	fbe0 <_svfprintf_r+0x1650>
    f96e:	f10a 0a08 	add.w	sl, sl, #8
    f972:	f7ff bb8c 	b.w	f08e <_svfprintf_r+0xafe>
    f976:	2300      	movs	r3, #0
    f978:	4619      	mov	r1, r3
    f97a:	9600      	str	r6, [sp, #0]
    f97c:	aa1d      	add	r2, sp, #116	; 0x74
    f97e:	4658      	mov	r0, fp
    f980:	f003 fb8e 	bl	130a0 <_wcsrtombs_r>
    f984:	4603      	mov	r3, r0
    f986:	3301      	adds	r3, #1
    f988:	9005      	str	r0, [sp, #20]
    f98a:	f000 82f1 	beq.w	ff70 <_svfprintf_r+0x19e0>
    f98e:	941d      	str	r4, [sp, #116]	; 0x74
    f990:	9b05      	ldr	r3, [sp, #20]
    f992:	2b00      	cmp	r3, #0
    f994:	d04e      	beq.n	fa34 <_svfprintf_r+0x14a4>
    f996:	2b63      	cmp	r3, #99	; 0x63
    f998:	f300 8118 	bgt.w	fbcc <_svfprintf_r+0x163c>
    f99c:	2300      	movs	r3, #0
    f99e:	9307      	str	r3, [sp, #28]
    f9a0:	ac37      	add	r4, sp, #220	; 0xdc
    f9a2:	2208      	movs	r2, #8
    f9a4:	2100      	movs	r1, #0
    f9a6:	4630      	mov	r0, r6
    f9a8:	f7fc ff28 	bl	c7fc <memset>
    f9ac:	9d05      	ldr	r5, [sp, #20]
    f9ae:	9600      	str	r6, [sp, #0]
    f9b0:	462b      	mov	r3, r5
    f9b2:	aa1d      	add	r2, sp, #116	; 0x74
    f9b4:	4621      	mov	r1, r4
    f9b6:	4658      	mov	r0, fp
    f9b8:	f003 fb72 	bl	130a0 <_wcsrtombs_r>
    f9bc:	4285      	cmp	r5, r0
    f9be:	f040 837c 	bne.w	100ba <_svfprintf_r+0x1b2a>
    f9c2:	9a05      	ldr	r2, [sp, #20]
    f9c4:	2300      	movs	r3, #0
    f9c6:	54a3      	strb	r3, [r4, r2]
    f9c8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    f9cc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    f9d0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f9d4:	9303      	str	r3, [sp, #12]
    f9d6:	9202      	str	r2, [sp, #8]
    f9d8:	930f      	str	r3, [sp, #60]	; 0x3c
    f9da:	f7fe bfba 	b.w	e952 <_svfprintf_r+0x3c2>
    f9de:	212d      	movs	r1, #45	; 0x2d
    f9e0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    f9e4:	f7fe bfa4 	b.w	e930 <_svfprintf_r+0x3a0>
    f9e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f9ea:	9915      	ldr	r1, [sp, #84]	; 0x54
    f9ec:	ebab 0b03 	sub.w	fp, fp, r3
    f9f0:	461a      	mov	r2, r3
    f9f2:	4658      	mov	r0, fp
    f9f4:	f7fc ff9a 	bl	c92c <strncpy>
    f9f8:	f89a 2001 	ldrb.w	r2, [sl, #1]
    f9fc:	4b05      	ldr	r3, [pc, #20]	; (fa14 <_svfprintf_r+0x1484>)
    f9fe:	b10a      	cbz	r2, fa04 <_svfprintf_r+0x1474>
    fa00:	f10a 0a01 	add.w	sl, sl, #1
    fa04:	f04f 0c00 	mov.w	ip, #0
    fa08:	e628      	b.n	f65c <_svfprintf_r+0x10cc>
    fa0a:	bf00      	nop
    fa0c:	20000f24 	.word	0x20000f24
    fa10:	20008720 	.word	0x20008720
    fa14:	cccccccd 	.word	0xcccccccd
    fa18:	ee1b 1a10 	vmov	r1, s22
    fa1c:	aa24      	add	r2, sp, #144	; 0x90
    fa1e:	4658      	mov	r0, fp
    fa20:	f003 fc42 	bl	132a8 <__ssprint_r>
    fa24:	2800      	cmp	r0, #0
    fa26:	f47f aa18 	bne.w	ee5a <_svfprintf_r+0x8ca>
    fa2a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    fa2c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fa2e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fa32:	e67c      	b.n	f72e <_svfprintf_r+0x119e>
    fa34:	9b05      	ldr	r3, [sp, #20]
    fa36:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    fa3a:	930f      	str	r3, [sp, #60]	; 0x3c
    fa3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    fa40:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    fa44:	9307      	str	r3, [sp, #28]
    fa46:	f7fe bf84 	b.w	e952 <_svfprintf_r+0x3c2>
    fa4a:	990e      	ldr	r1, [sp, #56]	; 0x38
    fa4c:	9805      	ldr	r0, [sp, #20]
    fa4e:	1865      	adds	r5, r4, r1
    fa50:	1a2d      	subs	r5, r5, r0
    fa52:	1acc      	subs	r4, r1, r3
    fa54:	42a5      	cmp	r5, r4
    fa56:	bfa8      	it	ge
    fa58:	4625      	movge	r5, r4
    fa5a:	f7ff bb4d 	b.w	f0f8 <_svfprintf_r+0xb68>
    fa5e:	9b08      	ldr	r3, [sp, #32]
    fa60:	9904      	ldr	r1, [sp, #16]
    fa62:	f853 2b04 	ldr.w	r2, [r3], #4
    fa66:	9308      	str	r3, [sp, #32]
    fa68:	8011      	strh	r1, [r2, #0]
    fa6a:	464c      	mov	r4, r9
    fa6c:	f7fe bdc2 	b.w	e5f4 <_svfprintf_r+0x64>
    fa70:	f913 2b04 	ldrsb.w	r2, [r3], #4
    fa74:	9308      	str	r3, [sp, #32]
    fa76:	17d1      	asrs	r1, r2, #31
    fa78:	460b      	mov	r3, r1
    fa7a:	f7fe bfdb 	b.w	ea34 <_svfprintf_r+0x4a4>
    fa7e:	9a03      	ldr	r2, [sp, #12]
    fa80:	2102      	movs	r1, #2
    fa82:	ab22      	add	r3, sp, #136	; 0x88
    fa84:	9301      	str	r3, [sp, #4]
    fa86:	ab1d      	add	r3, sp, #116	; 0x74
    fa88:	9300      	str	r3, [sp, #0]
    fa8a:	4658      	mov	r0, fp
    fa8c:	ab1b      	add	r3, sp, #108	; 0x6c
    fa8e:	eeb0 0b4a 	vmov.f64	d0, d10
    fa92:	9202      	str	r2, [sp, #8]
    fa94:	f002 fa14 	bl	11ec0 <_dtoa_r>
    fa98:	2d47      	cmp	r5, #71	; 0x47
    fa9a:	9a02      	ldr	r2, [sp, #8]
    fa9c:	4604      	mov	r4, r0
    fa9e:	f000 8161 	beq.w	fd64 <_svfprintf_r+0x17d4>
    faa2:	2d46      	cmp	r5, #70	; 0x46
    faa4:	4410      	add	r0, r2
    faa6:	d105      	bne.n	fab4 <_svfprintf_r+0x1524>
    faa8:	7823      	ldrb	r3, [r4, #0]
    faaa:	2b30      	cmp	r3, #48	; 0x30
    faac:	f000 826f 	beq.w	ff8e <_svfprintf_r+0x19fe>
    fab0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    fab2:	4410      	add	r0, r2
    fab4:	eeb5 ab40 	vcmp.f64	d10, #0.0
    fab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fabc:	f040 8146 	bne.w	fd4c <_svfprintf_r+0x17bc>
    fac0:	4603      	mov	r3, r0
    fac2:	1b1b      	subs	r3, r3, r4
    fac4:	930e      	str	r3, [sp, #56]	; 0x38
    fac6:	2d47      	cmp	r5, #71	; 0x47
    fac8:	f000 8110 	beq.w	fcec <_svfprintf_r+0x175c>
    facc:	2d46      	cmp	r5, #70	; 0x46
    face:	f000 81b5 	beq.w	fe3c <_svfprintf_r+0x18ac>
    fad2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fad4:	930c      	str	r3, [sp, #48]	; 0x30
    fad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fad8:	2d41      	cmp	r5, #65	; 0x41
    fada:	f103 33ff 	add.w	r3, r3, #4294967295
    fade:	931b      	str	r3, [sp, #108]	; 0x6c
    fae0:	f000 81e5 	beq.w	feae <_svfprintf_r+0x191e>
    fae4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    fae8:	2100      	movs	r1, #0
    faea:	2b00      	cmp	r3, #0
    faec:	bfb8      	it	lt
    faee:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    faf0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    faf4:	bfba      	itte	lt
    faf6:	f1c3 0301 	rsblt	r3, r3, #1
    fafa:	222d      	movlt	r2, #45	; 0x2d
    fafc:	222b      	movge	r2, #43	; 0x2b
    fafe:	2b09      	cmp	r3, #9
    fb00:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    fb04:	f340 81da 	ble.w	febc <_svfprintf_r+0x192c>
    fb08:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    fb0c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; ff2c <_svfprintf_r+0x199c>
    fb10:	462a      	mov	r2, r5
    fb12:	4610      	mov	r0, r2
    fb14:	fb8c 2103 	smull	r2, r1, ip, r3
    fb18:	17da      	asrs	r2, r3, #31
    fb1a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    fb1e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    fb22:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    fb26:	3130      	adds	r1, #48	; 0x30
    fb28:	f800 1c01 	strb.w	r1, [r0, #-1]
    fb2c:	4619      	mov	r1, r3
    fb2e:	2963      	cmp	r1, #99	; 0x63
    fb30:	4613      	mov	r3, r2
    fb32:	f100 32ff 	add.w	r2, r0, #4294967295
    fb36:	dcec      	bgt.n	fb12 <_svfprintf_r+0x1582>
    fb38:	3330      	adds	r3, #48	; 0x30
    fb3a:	b2d9      	uxtb	r1, r3
    fb3c:	1e83      	subs	r3, r0, #2
    fb3e:	429d      	cmp	r5, r3
    fb40:	f802 1c01 	strb.w	r1, [r2, #-1]
    fb44:	f240 828b 	bls.w	1005e <_svfprintf_r+0x1ace>
    fb48:	4613      	mov	r3, r2
    fb4a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    fb4e:	e001      	b.n	fb54 <_svfprintf_r+0x15c4>
    fb50:	f813 1b01 	ldrb.w	r1, [r3], #1
    fb54:	f802 1b01 	strb.w	r1, [r2], #1
    fb58:	429d      	cmp	r5, r3
    fb5a:	d1f9      	bne.n	fb50 <_svfprintf_r+0x15c0>
    fb5c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    fb60:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    fb64:	1a1b      	subs	r3, r3, r0
    fb66:	4413      	add	r3, r2
    fb68:	aa1e      	add	r2, sp, #120	; 0x78
    fb6a:	1a9b      	subs	r3, r3, r2
    fb6c:	9314      	str	r3, [sp, #80]	; 0x50
    fb6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fb70:	9a14      	ldr	r2, [sp, #80]	; 0x50
    fb72:	2b01      	cmp	r3, #1
    fb74:	441a      	add	r2, r3
    fb76:	9205      	str	r2, [sp, #20]
    fb78:	f340 8203 	ble.w	ff82 <_svfprintf_r+0x19f2>
    fb7c:	9b05      	ldr	r3, [sp, #20]
    fb7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fb80:	4413      	add	r3, r2
    fb82:	9305      	str	r3, [sp, #20]
    fb84:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    fb88:	9a05      	ldr	r2, [sp, #20]
    fb8a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    fb8e:	2300      	movs	r3, #0
    fb90:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    fb94:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    fb98:	930f      	str	r3, [sp, #60]	; 0x3c
    fb9a:	9202      	str	r2, [sp, #8]
    fb9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb9e:	2b00      	cmp	r3, #0
    fba0:	f040 80b1 	bne.w	fd06 <_svfprintf_r+0x1776>
    fba4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    fba8:	9303      	str	r3, [sp, #12]
    fbaa:	f7fe bed2 	b.w	e952 <_svfprintf_r+0x3c2>
    fbae:	4620      	mov	r0, r4
    fbb0:	f7fd f966 	bl	ce80 <strlen>
    fbb4:	4602      	mov	r2, r0
    fbb6:	9005      	str	r0, [sp, #20]
    fbb8:	f7fe bf20 	b.w	e9fc <_svfprintf_r+0x46c>
    fbbc:	ee1b 1a10 	vmov	r1, s22
    fbc0:	aa24      	add	r2, sp, #144	; 0x90
    fbc2:	4658      	mov	r0, fp
    fbc4:	f003 fb70 	bl	132a8 <__ssprint_r>
    fbc8:	f7fe bded 	b.w	e7a6 <_svfprintf_r+0x216>
    fbcc:	1c59      	adds	r1, r3, #1
    fbce:	4658      	mov	r0, fp
    fbd0:	f7fa feec 	bl	a9ac <_malloc_r>
    fbd4:	4604      	mov	r4, r0
    fbd6:	2800      	cmp	r0, #0
    fbd8:	f000 81ca 	beq.w	ff70 <_svfprintf_r+0x19e0>
    fbdc:	9007      	str	r0, [sp, #28]
    fbde:	e6e0      	b.n	f9a2 <_svfprintf_r+0x1412>
    fbe0:	ee1b 1a10 	vmov	r1, s22
    fbe4:	aa24      	add	r2, sp, #144	; 0x90
    fbe6:	4658      	mov	r0, fp
    fbe8:	f003 fb5e 	bl	132a8 <__ssprint_r>
    fbec:	2800      	cmp	r0, #0
    fbee:	f47f a934 	bne.w	ee5a <_svfprintf_r+0x8ca>
    fbf2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fbf4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fbf8:	f7ff ba49 	b.w	f08e <_svfprintf_r+0xafe>
    fbfc:	ee1b 1a10 	vmov	r1, s22
    fc00:	aa24      	add	r2, sp, #144	; 0x90
    fc02:	4658      	mov	r0, fp
    fc04:	f003 fb50 	bl	132a8 <__ssprint_r>
    fc08:	2800      	cmp	r0, #0
    fc0a:	f47f a926 	bne.w	ee5a <_svfprintf_r+0x8ca>
    fc0e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    fc12:	991b      	ldr	r1, [sp, #108]	; 0x6c
    fc14:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fc18:	e649      	b.n	f8ae <_svfprintf_r+0x131e>
    fc1a:	2306      	movs	r3, #6
    fc1c:	9303      	str	r3, [sp, #12]
    fc1e:	f7ff bb83 	b.w	f328 <_svfprintf_r+0xd98>
    fc22:	9b03      	ldr	r3, [sp, #12]
    fc24:	2102      	movs	r1, #2
    fc26:	1c5a      	adds	r2, r3, #1
    fc28:	e72b      	b.n	fa82 <_svfprintf_r+0x14f2>
    fc2a:	9a03      	ldr	r2, [sp, #12]
    fc2c:	2103      	movs	r1, #3
    fc2e:	e728      	b.n	fa82 <_svfprintf_r+0x14f2>
    fc30:	a81b      	add	r0, sp, #108	; 0x6c
    fc32:	eeb0 0b4a 	vmov.f64	d0, d10
    fc36:	f002 f817 	bl	11c68 <frexp>
    fc3a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    fc3e:	ee20 0b07 	vmul.f64	d0, d0, d7
    fc42:	eeb5 0b40 	vcmp.f64	d0, #0.0
    fc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fc4a:	d101      	bne.n	fc50 <_svfprintf_r+0x16c0>
    fc4c:	2301      	movs	r3, #1
    fc4e:	931b      	str	r3, [sp, #108]	; 0x6c
    fc50:	48b3      	ldr	r0, [pc, #716]	; (ff20 <_svfprintf_r+0x1990>)
    fc52:	9b03      	ldr	r3, [sp, #12]
    fc54:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    fc58:	3b01      	subs	r3, #1
    fc5a:	4622      	mov	r2, r4
    fc5c:	e004      	b.n	fc68 <_svfprintf_r+0x16d8>
    fc5e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    fc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fc66:	d013      	beq.n	fc90 <_svfprintf_r+0x1700>
    fc68:	ee20 0b05 	vmul.f64	d0, d0, d5
    fc6c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    fc70:	f1b3 3fff 	cmp.w	r3, #4294967295
    fc74:	ee17 1a90 	vmov	r1, s15
    fc78:	5c41      	ldrb	r1, [r0, r1]
    fc7a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    fc7e:	4694      	mov	ip, r2
    fc80:	ee30 0b46 	vsub.f64	d0, d0, d6
    fc84:	f802 1b01 	strb.w	r1, [r2], #1
    fc88:	4619      	mov	r1, r3
    fc8a:	f103 33ff 	add.w	r3, r3, #4294967295
    fc8e:	d1e6      	bne.n	fc5e <_svfprintf_r+0x16ce>
    fc90:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    fc94:	eeb4 0bc6 	vcmpe.f64	d0, d6
    fc98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fc9c:	f300 8148 	bgt.w	ff30 <_svfprintf_r+0x19a0>
    fca0:	eeb4 0b46 	vcmp.f64	d0, d6
    fca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fca8:	d104      	bne.n	fcb4 <_svfprintf_r+0x1724>
    fcaa:	ee17 3a90 	vmov	r3, s15
    fcae:	07db      	lsls	r3, r3, #31
    fcb0:	f100 813e 	bmi.w	ff30 <_svfprintf_r+0x19a0>
    fcb4:	2900      	cmp	r1, #0
    fcb6:	db06      	blt.n	fcc6 <_svfprintf_r+0x1736>
    fcb8:	1c4b      	adds	r3, r1, #1
    fcba:	4413      	add	r3, r2
    fcbc:	2130      	movs	r1, #48	; 0x30
    fcbe:	f802 1b01 	strb.w	r1, [r2], #1
    fcc2:	4293      	cmp	r3, r2
    fcc4:	d1fb      	bne.n	fcbe <_svfprintf_r+0x172e>
    fcc6:	1b13      	subs	r3, r2, r4
    fcc8:	930e      	str	r3, [sp, #56]	; 0x38
    fcca:	e6fc      	b.n	fac6 <_svfprintf_r+0x1536>
    fccc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    fcce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fcd0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    fcd4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    fcd8:	9613      	str	r6, [sp, #76]	; 0x4c
    fcda:	18e3      	adds	r3, r4, r3
    fcdc:	429d      	cmp	r5, r3
    fcde:	4629      	mov	r1, r5
    fce0:	bf28      	it	cs
    fce2:	4619      	movcs	r1, r3
    fce4:	4682      	mov	sl, r0
    fce6:	9105      	str	r1, [sp, #20]
    fce8:	f7ff b9d8 	b.w	f09c <_svfprintf_r+0xb0c>
    fcec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fcee:	930c      	str	r3, [sp, #48]	; 0x30
    fcf0:	1cda      	adds	r2, r3, #3
    fcf2:	db02      	blt.n	fcfa <_svfprintf_r+0x176a>
    fcf4:	9a03      	ldr	r2, [sp, #12]
    fcf6:	4293      	cmp	r3, r2
    fcf8:	dd0c      	ble.n	fd14 <_svfprintf_r+0x1784>
    fcfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fcfc:	3b02      	subs	r3, #2
    fcfe:	930b      	str	r3, [sp, #44]	; 0x2c
    fd00:	f023 0520 	bic.w	r5, r3, #32
    fd04:	e6e7      	b.n	fad6 <_svfprintf_r+0x1546>
    fd06:	212d      	movs	r1, #45	; 0x2d
    fd08:	2300      	movs	r3, #0
    fd0a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    fd0e:	9303      	str	r3, [sp, #12]
    fd10:	f7fe be22 	b.w	e958 <_svfprintf_r+0x3c8>
    fd14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fd16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    fd18:	4293      	cmp	r3, r2
    fd1a:	f2c0 80bd 	blt.w	fe98 <_svfprintf_r+0x1908>
    fd1e:	07f0      	lsls	r0, r6, #31
    fd20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fd22:	f140 8132 	bpl.w	ff8a <_svfprintf_r+0x19fa>
    fd26:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fd28:	4413      	add	r3, r2
    fd2a:	9305      	str	r3, [sp, #20]
    fd2c:	0571      	lsls	r1, r6, #21
    fd2e:	d503      	bpl.n	fd38 <_svfprintf_r+0x17a8>
    fd30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fd32:	2b00      	cmp	r3, #0
    fd34:	f300 8135 	bgt.w	ffa2 <_svfprintf_r+0x1a12>
    fd38:	9b05      	ldr	r3, [sp, #20]
    fd3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fd3e:	9302      	str	r3, [sp, #8]
    fd40:	2367      	movs	r3, #103	; 0x67
    fd42:	930b      	str	r3, [sp, #44]	; 0x2c
    fd44:	2300      	movs	r3, #0
    fd46:	930f      	str	r3, [sp, #60]	; 0x3c
    fd48:	930d      	str	r3, [sp, #52]	; 0x34
    fd4a:	e727      	b.n	fb9c <_svfprintf_r+0x160c>
    fd4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fd4e:	4283      	cmp	r3, r0
    fd50:	f4bf aeb7 	bcs.w	fac2 <_svfprintf_r+0x1532>
    fd54:	2130      	movs	r1, #48	; 0x30
    fd56:	1c5a      	adds	r2, r3, #1
    fd58:	9222      	str	r2, [sp, #136]	; 0x88
    fd5a:	7019      	strb	r1, [r3, #0]
    fd5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fd5e:	4298      	cmp	r0, r3
    fd60:	d8f9      	bhi.n	fd56 <_svfprintf_r+0x17c6>
    fd62:	e6ae      	b.n	fac2 <_svfprintf_r+0x1532>
    fd64:	07f3      	lsls	r3, r6, #31
    fd66:	f100 80a7 	bmi.w	feb8 <_svfprintf_r+0x1928>
    fd6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fd6c:	e6a9      	b.n	fac2 <_svfprintf_r+0x1532>
    fd6e:	aa24      	add	r2, sp, #144	; 0x90
    fd70:	4658      	mov	r0, fp
    fd72:	9105      	str	r1, [sp, #20]
    fd74:	f003 fa98 	bl	132a8 <__ssprint_r>
    fd78:	2800      	cmp	r0, #0
    fd7a:	f47f a86e 	bne.w	ee5a <_svfprintf_r+0x8ca>
    fd7e:	f896 c000 	ldrb.w	ip, [r6]
    fd82:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fd84:	9905      	ldr	r1, [sp, #20]
    fd86:	a827      	add	r0, sp, #156	; 0x9c
    fd88:	4465      	add	r5, ip
    fd8a:	f7ff bbec 	b.w	f566 <_svfprintf_r+0xfd6>
    fd8e:	ee1b 1a10 	vmov	r1, s22
    fd92:	aa24      	add	r2, sp, #144	; 0x90
    fd94:	4658      	mov	r0, fp
    fd96:	f003 fa87 	bl	132a8 <__ssprint_r>
    fd9a:	2800      	cmp	r0, #0
    fd9c:	f47f a85d 	bne.w	ee5a <_svfprintf_r+0x8ca>
    fda0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fda2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fda6:	f7ff b96b 	b.w	f080 <_svfprintf_r+0xaf0>
    fdaa:	2378      	movs	r3, #120	; 0x78
    fdac:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    fdb0:	2330      	movs	r3, #48	; 0x30
    fdb2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    fdb6:	9b03      	ldr	r3, [sp, #12]
    fdb8:	2b63      	cmp	r3, #99	; 0x63
    fdba:	f048 0602 	orr.w	r6, r8, #2
    fdbe:	f300 80a6 	bgt.w	ff0e <_svfprintf_r+0x197e>
    fdc2:	2300      	movs	r3, #0
    fdc4:	9307      	str	r3, [sp, #28]
    fdc6:	ac37      	add	r4, sp, #220	; 0xdc
    fdc8:	ee18 3a90 	vmov	r3, s17
    fdcc:	2b00      	cmp	r3, #0
    fdce:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    fdd2:	db2b      	blt.n	fe2c <_svfprintf_r+0x189c>
    fdd4:	eeb0 ab48 	vmov.f64	d10, d8
    fdd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fdda:	f023 0520 	bic.w	r5, r3, #32
    fdde:	2300      	movs	r3, #0
    fde0:	9309      	str	r3, [sp, #36]	; 0x24
    fde2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fde4:	2b61      	cmp	r3, #97	; 0x61
    fde6:	f47f aaad 	bne.w	f344 <_svfprintf_r+0xdb4>
    fdea:	eeb0 0b4a 	vmov.f64	d0, d10
    fdee:	a81b      	add	r0, sp, #108	; 0x6c
    fdf0:	f001 ff3a 	bl	11c68 <frexp>
    fdf4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    fdf8:	ee20 0b07 	vmul.f64	d0, d0, d7
    fdfc:	eeb5 0b40 	vcmp.f64	d0, #0.0
    fe00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fe04:	d101      	bne.n	fe0a <_svfprintf_r+0x187a>
    fe06:	2301      	movs	r3, #1
    fe08:	931b      	str	r3, [sp, #108]	; 0x6c
    fe0a:	4846      	ldr	r0, [pc, #280]	; (ff24 <_svfprintf_r+0x1994>)
    fe0c:	e721      	b.n	fc52 <_svfprintf_r+0x16c2>
    fe0e:	ee1b 1a10 	vmov	r1, s22
    fe12:	aa24      	add	r2, sp, #144	; 0x90
    fe14:	4658      	mov	r0, fp
    fe16:	f003 fa47 	bl	132a8 <__ssprint_r>
    fe1a:	2800      	cmp	r0, #0
    fe1c:	f47f a81d 	bne.w	ee5a <_svfprintf_r+0x8ca>
    fe20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fe22:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fe24:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fe28:	f7ff b94e 	b.w	f0c8 <_svfprintf_r+0xb38>
    fe2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fe2e:	f023 0520 	bic.w	r5, r3, #32
    fe32:	232d      	movs	r3, #45	; 0x2d
    fe34:	9309      	str	r3, [sp, #36]	; 0x24
    fe36:	eeb1 ab48 	vneg.f64	d10, d8
    fe3a:	e7d2      	b.n	fde2 <_svfprintf_r+0x1852>
    fe3c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    fe3e:	920c      	str	r2, [sp, #48]	; 0x30
    fe40:	2a00      	cmp	r2, #0
    fe42:	f006 0301 	and.w	r3, r6, #1
    fe46:	f340 810d 	ble.w	10064 <_svfprintf_r+0x1ad4>
    fe4a:	9903      	ldr	r1, [sp, #12]
    fe4c:	430b      	orrs	r3, r1
    fe4e:	f040 80cf 	bne.w	fff0 <_svfprintf_r+0x1a60>
    fe52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fe54:	9305      	str	r3, [sp, #20]
    fe56:	2366      	movs	r3, #102	; 0x66
    fe58:	930b      	str	r3, [sp, #44]	; 0x2c
    fe5a:	0572      	lsls	r2, r6, #21
    fe5c:	f100 80a3 	bmi.w	ffa6 <_svfprintf_r+0x1a16>
    fe60:	9b05      	ldr	r3, [sp, #20]
    fe62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fe66:	9302      	str	r3, [sp, #8]
    fe68:	e76c      	b.n	fd44 <_svfprintf_r+0x17b4>
    fe6a:	ee1b 1a10 	vmov	r1, s22
    fe6e:	aa24      	add	r2, sp, #144	; 0x90
    fe70:	4658      	mov	r0, fp
    fe72:	f003 fa19 	bl	132a8 <__ssprint_r>
    fe76:	2800      	cmp	r0, #0
    fe78:	f47e afef 	bne.w	ee5a <_svfprintf_r+0x8ca>
    fe7c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    fe7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fe80:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fe82:	1b1c      	subs	r4, r3, r4
    fe84:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    fe88:	f7ff b936 	b.w	f0f8 <_svfprintf_r+0xb68>
    fe8c:	2358      	movs	r3, #88	; 0x58
    fe8e:	e78d      	b.n	fdac <_svfprintf_r+0x181c>
    fe90:	2200      	movs	r2, #0
    fe92:	9203      	str	r2, [sp, #12]
    fe94:	f7fe bbda 	b.w	e64c <_svfprintf_r+0xbc>
    fe98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fe9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fe9c:	189a      	adds	r2, r3, r2
    fe9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fea0:	9205      	str	r2, [sp, #20]
    fea2:	2b00      	cmp	r3, #0
    fea4:	f340 80ab 	ble.w	fffe <_svfprintf_r+0x1a6e>
    fea8:	2367      	movs	r3, #103	; 0x67
    feaa:	930b      	str	r3, [sp, #44]	; 0x2c
    feac:	e7d5      	b.n	fe5a <_svfprintf_r+0x18ca>
    feae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    feb0:	320f      	adds	r2, #15
    feb2:	b2d2      	uxtb	r2, r2
    feb4:	2101      	movs	r1, #1
    feb6:	e618      	b.n	faea <_svfprintf_r+0x155a>
    feb8:	18a0      	adds	r0, r4, r2
    feba:	e5fb      	b.n	fab4 <_svfprintf_r+0x1524>
    febc:	2900      	cmp	r1, #0
    febe:	f040 80a8 	bne.w	10012 <_svfprintf_r+0x1a82>
    fec2:	2230      	movs	r2, #48	; 0x30
    fec4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    fec8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    fecc:	3330      	adds	r3, #48	; 0x30
    fece:	f802 3b01 	strb.w	r3, [r2], #1
    fed2:	ab1e      	add	r3, sp, #120	; 0x78
    fed4:	1ad3      	subs	r3, r2, r3
    fed6:	9314      	str	r3, [sp, #80]	; 0x50
    fed8:	e649      	b.n	fb6e <_svfprintf_r+0x15de>
    feda:	3301      	adds	r3, #1
    fedc:	4912      	ldr	r1, [pc, #72]	; (ff28 <_svfprintf_r+0x1998>)
    fede:	f8ca 5004 	str.w	r5, [sl, #4]
    fee2:	442a      	add	r2, r5
    fee4:	2b07      	cmp	r3, #7
    fee6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    feea:	f8ca 1000 	str.w	r1, [sl]
    feee:	f77f ac33 	ble.w	f758 <_svfprintf_r+0x11c8>
    fef2:	ee1b 1a10 	vmov	r1, s22
    fef6:	aa24      	add	r2, sp, #144	; 0x90
    fef8:	4658      	mov	r0, fp
    fefa:	f003 f9d5 	bl	132a8 <__ssprint_r>
    fefe:	2800      	cmp	r0, #0
    ff00:	f47e afab 	bne.w	ee5a <_svfprintf_r+0x8ca>
    ff04:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ff08:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ff0c:	e426      	b.n	f75c <_svfprintf_r+0x11cc>
    ff0e:	1c59      	adds	r1, r3, #1
    ff10:	4658      	mov	r0, fp
    ff12:	f7fa fd4b 	bl	a9ac <_malloc_r>
    ff16:	4604      	mov	r4, r0
    ff18:	b350      	cbz	r0, ff70 <_svfprintf_r+0x19e0>
    ff1a:	9007      	str	r0, [sp, #28]
    ff1c:	e754      	b.n	fdc8 <_svfprintf_r+0x1838>
    ff1e:	bf00      	nop
    ff20:	20000f08 	.word	0x20000f08
    ff24:	20000ef4 	.word	0x20000ef4
    ff28:	20008720 	.word	0x20008720
    ff2c:	66666667 	.word	0x66666667
    ff30:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    ff34:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    ff38:	f890 c00f 	ldrb.w	ip, [r0, #15]
    ff3c:	4561      	cmp	r1, ip
    ff3e:	4613      	mov	r3, r2
    ff40:	d10a      	bne.n	ff58 <_svfprintf_r+0x19c8>
    ff42:	f04f 0e30 	mov.w	lr, #48	; 0x30
    ff46:	f803 ec01 	strb.w	lr, [r3, #-1]
    ff4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ff4c:	1e59      	subs	r1, r3, #1
    ff4e:	9122      	str	r1, [sp, #136]	; 0x88
    ff50:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    ff54:	458c      	cmp	ip, r1
    ff56:	d0f6      	beq.n	ff46 <_svfprintf_r+0x19b6>
    ff58:	2939      	cmp	r1, #57	; 0x39
    ff5a:	bf16      	itet	ne
    ff5c:	3101      	addne	r1, #1
    ff5e:	7a81      	ldrbeq	r1, [r0, #10]
    ff60:	b2c9      	uxtbne	r1, r1
    ff62:	f803 1c01 	strb.w	r1, [r3, #-1]
    ff66:	e6ae      	b.n	fcc6 <_svfprintf_r+0x1736>
    ff68:	2300      	movs	r3, #0
    ff6a:	4690      	mov	r8, r2
    ff6c:	9307      	str	r3, [sp, #28]
    ff6e:	e760      	b.n	fe32 <_svfprintf_r+0x18a2>
    ff70:	ee1b 2a10 	vmov	r2, s22
    ff74:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    ff78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ff7c:	8193      	strh	r3, [r2, #12]
    ff7e:	f7fe bc16 	b.w	e7ae <_svfprintf_r+0x21e>
    ff82:	07f5      	lsls	r5, r6, #31
    ff84:	f57f adfe 	bpl.w	fb84 <_svfprintf_r+0x15f4>
    ff88:	e5f8      	b.n	fb7c <_svfprintf_r+0x15ec>
    ff8a:	9305      	str	r3, [sp, #20]
    ff8c:	e6ce      	b.n	fd2c <_svfprintf_r+0x179c>
    ff8e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    ff92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ff96:	f43f ad8b 	beq.w	fab0 <_svfprintf_r+0x1520>
    ff9a:	f1c2 0201 	rsb	r2, r2, #1
    ff9e:	921b      	str	r2, [sp, #108]	; 0x6c
    ffa0:	e587      	b.n	fab2 <_svfprintf_r+0x1522>
    ffa2:	2367      	movs	r3, #103	; 0x67
    ffa4:	930b      	str	r3, [sp, #44]	; 0x2c
    ffa6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ffa8:	780b      	ldrb	r3, [r1, #0]
    ffaa:	2bff      	cmp	r3, #255	; 0xff
    ffac:	d079      	beq.n	100a2 <_svfprintf_r+0x1b12>
    ffae:	2500      	movs	r5, #0
    ffb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ffb2:	4628      	mov	r0, r5
    ffb4:	e003      	b.n	ffbe <_svfprintf_r+0x1a2e>
    ffb6:	3001      	adds	r0, #1
    ffb8:	3101      	adds	r1, #1
    ffba:	2bff      	cmp	r3, #255	; 0xff
    ffbc:	d008      	beq.n	ffd0 <_svfprintf_r+0x1a40>
    ffbe:	4293      	cmp	r3, r2
    ffc0:	da06      	bge.n	ffd0 <_svfprintf_r+0x1a40>
    ffc2:	1ad2      	subs	r2, r2, r3
    ffc4:	784b      	ldrb	r3, [r1, #1]
    ffc6:	2b00      	cmp	r3, #0
    ffc8:	d1f5      	bne.n	ffb6 <_svfprintf_r+0x1a26>
    ffca:	780b      	ldrb	r3, [r1, #0]
    ffcc:	3501      	adds	r5, #1
    ffce:	e7f4      	b.n	ffba <_svfprintf_r+0x1a2a>
    ffd0:	920c      	str	r2, [sp, #48]	; 0x30
    ffd2:	9113      	str	r1, [sp, #76]	; 0x4c
    ffd4:	900d      	str	r0, [sp, #52]	; 0x34
    ffd6:	950f      	str	r5, [sp, #60]	; 0x3c
    ffd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ffda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ffdc:	9916      	ldr	r1, [sp, #88]	; 0x58
    ffde:	4413      	add	r3, r2
    ffe0:	9a05      	ldr	r2, [sp, #20]
    ffe2:	fb01 2303 	mla	r3, r1, r3, r2
    ffe6:	9305      	str	r3, [sp, #20]
    ffe8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ffec:	9302      	str	r3, [sp, #8]
    ffee:	e5d5      	b.n	fb9c <_svfprintf_r+0x160c>
    fff0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fff2:	18d3      	adds	r3, r2, r3
    fff4:	4419      	add	r1, r3
    fff6:	2366      	movs	r3, #102	; 0x66
    fff8:	9105      	str	r1, [sp, #20]
    fffa:	930b      	str	r3, [sp, #44]	; 0x2c
    fffc:	e72d      	b.n	fe5a <_svfprintf_r+0x18ca>
    fffe:	f1c3 0301 	rsb	r3, r3, #1
   10002:	441a      	add	r2, r3
   10004:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10008:	9302      	str	r3, [sp, #8]
   1000a:	2367      	movs	r3, #103	; 0x67
   1000c:	9205      	str	r2, [sp, #20]
   1000e:	930b      	str	r3, [sp, #44]	; 0x2c
   10010:	e698      	b.n	fd44 <_svfprintf_r+0x17b4>
   10012:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   10016:	e759      	b.n	fecc <_svfprintf_r+0x193c>
   10018:	9b03      	ldr	r3, [sp, #12]
   1001a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1001e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   10022:	9305      	str	r3, [sp, #20]
   10024:	e4b4      	b.n	f990 <_svfprintf_r+0x1400>
   10026:	ee18 3a90 	vmov	r3, s17
   1002a:	2b00      	cmp	r3, #0
   1002c:	bfb4      	ite	lt
   1002e:	212d      	movlt	r1, #45	; 0x2d
   10030:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   10034:	4c25      	ldr	r4, [pc, #148]	; (100cc <_svfprintf_r+0x1b3c>)
   10036:	4b26      	ldr	r3, [pc, #152]	; (100d0 <_svfprintf_r+0x1b40>)
   10038:	bfb8      	it	lt
   1003a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   1003e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   10042:	f7fe bc79 	b.w	e938 <_svfprintf_r+0x3a8>
   10046:	9b03      	ldr	r3, [sp, #12]
   10048:	9302      	str	r3, [sp, #8]
   1004a:	9305      	str	r3, [sp, #20]
   1004c:	2373      	movs	r3, #115	; 0x73
   1004e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   10052:	9003      	str	r0, [sp, #12]
   10054:	900f      	str	r0, [sp, #60]	; 0x3c
   10056:	900d      	str	r0, [sp, #52]	; 0x34
   10058:	930b      	str	r3, [sp, #44]	; 0x2c
   1005a:	f7fe bc7a 	b.w	e952 <_svfprintf_r+0x3c2>
   1005e:	2302      	movs	r3, #2
   10060:	9314      	str	r3, [sp, #80]	; 0x50
   10062:	e584      	b.n	fb6e <_svfprintf_r+0x15de>
   10064:	9a03      	ldr	r2, [sp, #12]
   10066:	4313      	orrs	r3, r2
   10068:	d105      	bne.n	10076 <_svfprintf_r+0x1ae6>
   1006a:	2301      	movs	r3, #1
   1006c:	2266      	movs	r2, #102	; 0x66
   1006e:	9302      	str	r3, [sp, #8]
   10070:	920b      	str	r2, [sp, #44]	; 0x2c
   10072:	9305      	str	r3, [sp, #20]
   10074:	e666      	b.n	fd44 <_svfprintf_r+0x17b4>
   10076:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10078:	3301      	adds	r3, #1
   1007a:	441a      	add	r2, r3
   1007c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10080:	9302      	str	r3, [sp, #8]
   10082:	2366      	movs	r3, #102	; 0x66
   10084:	9205      	str	r2, [sp, #20]
   10086:	930b      	str	r3, [sp, #44]	; 0x2c
   10088:	e65c      	b.n	fd44 <_svfprintf_r+0x17b4>
   1008a:	9a08      	ldr	r2, [sp, #32]
   1008c:	f899 3001 	ldrb.w	r3, [r9, #1]
   10090:	4689      	mov	r9, r1
   10092:	f852 1b04 	ldr.w	r1, [r2], #4
   10096:	9208      	str	r2, [sp, #32]
   10098:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   1009c:	9103      	str	r1, [sp, #12]
   1009e:	f7fe bad3 	b.w	e648 <_svfprintf_r+0xb8>
   100a2:	2300      	movs	r3, #0
   100a4:	930f      	str	r3, [sp, #60]	; 0x3c
   100a6:	930d      	str	r3, [sp, #52]	; 0x34
   100a8:	e796      	b.n	ffd8 <_svfprintf_r+0x1a48>
   100aa:	230c      	movs	r3, #12
   100ac:	f8cb 3000 	str.w	r3, [fp]
   100b0:	f04f 33ff 	mov.w	r3, #4294967295
   100b4:	9304      	str	r3, [sp, #16]
   100b6:	f7fe bb81 	b.w	e7bc <_svfprintf_r+0x22c>
   100ba:	ee1b 2a10 	vmov	r2, s22
   100be:	8993      	ldrh	r3, [r2, #12]
   100c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   100c4:	8193      	strh	r3, [r2, #12]
   100c6:	f7fe bec8 	b.w	ee5a <_svfprintf_r+0x8ca>
   100ca:	bf00      	nop
   100cc:	20000ef0 	.word	0x20000ef0
   100d0:	20000820 	.word	0x20000820

000100d4 <__ssvfscanf_r>:
   100d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   100d8:	ed2d 8b02 	vpush	{d8}
   100dc:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
   100e0:	468b      	mov	fp, r1
   100e2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   100e6:	af02      	add	r7, sp, #8
   100e8:	048c      	lsls	r4, r1, #18
   100ea:	4681      	mov	r9, r0
   100ec:	64fa      	str	r2, [r7, #76]	; 0x4c
   100ee:	633b      	str	r3, [r7, #48]	; 0x30
   100f0:	d409      	bmi.n	10106 <__ssvfscanf_r+0x32>
   100f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   100f6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   100fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   100fe:	f8ab 100c 	strh.w	r1, [fp, #12]
   10102:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   10106:	2300      	movs	r3, #0
   10108:	461c      	mov	r4, r3
   1010a:	2208      	movs	r2, #8
   1010c:	4619      	mov	r1, r3
   1010e:	f107 0058 	add.w	r0, r7, #88	; 0x58
   10112:	62fb      	str	r3, [r7, #44]	; 0x2c
   10114:	46a2      	mov	sl, r4
   10116:	f7fc fb71 	bl	c7fc <memset>
   1011a:	643c      	str	r4, [r7, #64]	; 0x40
   1011c:	627c      	str	r4, [r7, #36]	; 0x24
   1011e:	63bc      	str	r4, [r7, #56]	; 0x38
   10120:	647c      	str	r4, [r7, #68]	; 0x44
   10122:	4b83      	ldr	r3, [pc, #524]	; (10330 <__ssvfscanf_r+0x25c>)
   10124:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   10128:	f7fc fc32 	bl	c990 <__locale_mb_cur_max>
   1012c:	f107 0258 	add.w	r2, r7, #88	; 0x58
   10130:	4603      	mov	r3, r0
   10132:	9200      	str	r2, [sp, #0]
   10134:	f107 0154 	add.w	r1, r7, #84	; 0x54
   10138:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1013a:	4648      	mov	r0, r9
   1013c:	47a0      	blx	r4
   1013e:	1e05      	subs	r5, r0, #0
   10140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10142:	db33      	blt.n	101ac <__ssvfscanf_r+0xd8>
   10144:	442b      	add	r3, r5
   10146:	64fb      	str	r3, [r7, #76]	; 0x4c
   10148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1014a:	462e      	mov	r6, r5
   1014c:	2b00      	cmp	r3, #0
   1014e:	f000 80b6 	beq.w	102be <__ssvfscanf_r+0x1ea>
   10152:	2d01      	cmp	r5, #1
   10154:	d038      	beq.n	101c8 <__ssvfscanf_r+0xf4>
   10156:	2b25      	cmp	r3, #37	; 0x25
   10158:	d040      	beq.n	101dc <__ssvfscanf_r+0x108>
   1015a:	2d00      	cmp	r5, #0
   1015c:	d0e1      	beq.n	10122 <__ssvfscanf_r+0x4e>
   1015e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10160:	1b9e      	subs	r6, r3, r6
   10162:	f8db 3004 	ldr.w	r3, [fp, #4]
   10166:	1e74      	subs	r4, r6, #1
   10168:	2b00      	cmp	r3, #0
   1016a:	f340 8098 	ble.w	1029e <__ssvfscanf_r+0x1ca>
   1016e:	f8db 1000 	ldr.w	r1, [fp]
   10172:	f894 c001 	ldrb.w	ip, [r4, #1]
   10176:	f891 e000 	ldrb.w	lr, [r1]
   1017a:	1ca3      	adds	r3, r4, #2
   1017c:	eb0a 0003 	add.w	r0, sl, r3
   10180:	45e6      	cmp	lr, ip
   10182:	f101 0101 	add.w	r1, r1, #1
   10186:	eba3 0206 	sub.w	r2, r3, r6
   1018a:	f104 0401 	add.w	r4, r4, #1
   1018e:	eba0 0006 	sub.w	r0, r0, r6
   10192:	f040 8094 	bne.w	102be <__ssvfscanf_r+0x1ea>
   10196:	f8db 3004 	ldr.w	r3, [fp, #4]
   1019a:	f8cb 1000 	str.w	r1, [fp]
   1019e:	3b01      	subs	r3, #1
   101a0:	42aa      	cmp	r2, r5
   101a2:	f8cb 3004 	str.w	r3, [fp, #4]
   101a6:	dbdf      	blt.n	10168 <__ssvfscanf_r+0x94>
   101a8:	4682      	mov	sl, r0
   101aa:	e7ba      	b.n	10122 <__ssvfscanf_r+0x4e>
   101ac:	3301      	adds	r3, #1
   101ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   101b0:	2208      	movs	r2, #8
   101b2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   101b6:	2100      	movs	r1, #0
   101b8:	f107 0058 	add.w	r0, r7, #88	; 0x58
   101bc:	657b      	str	r3, [r7, #84]	; 0x54
   101be:	f7fc fb1d 	bl	c7fc <memset>
   101c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   101c4:	2b00      	cmp	r3, #0
   101c6:	d07a      	beq.n	102be <__ssvfscanf_r+0x1ea>
   101c8:	4e5a      	ldr	r6, [pc, #360]	; (10334 <__ssvfscanf_r+0x260>)
   101ca:	5cf2      	ldrb	r2, [r6, r3]
   101cc:	0710      	lsls	r0, r2, #28
   101ce:	f100 851c 	bmi.w	10c0a <__ssvfscanf_r+0xb36>
   101d2:	2b25      	cmp	r3, #37	; 0x25
   101d4:	f040 8086 	bne.w	102e4 <__ssvfscanf_r+0x210>
   101d8:	2501      	movs	r5, #1
   101da:	462e      	mov	r6, r5
   101dc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   101de:	2400      	movs	r4, #0
   101e0:	7802      	ldrb	r2, [r0, #0]
   101e2:	46a0      	mov	r8, r4
   101e4:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   101e8:	1c41      	adds	r1, r0, #1
   101ea:	2b55      	cmp	r3, #85	; 0x55
   101ec:	d867      	bhi.n	102be <__ssvfscanf_r+0x1ea>
   101ee:	e8df f013 	tbh	[pc, r3, lsl #1]
   101f2:	070a      	.short	0x070a
   101f4:	00660066 	.word	0x00660066
   101f8:	00660066 	.word	0x00660066
   101fc:	00660701 	.word	0x00660701
   10200:	00660066 	.word	0x00660066
   10204:	00660066 	.word	0x00660066
   10208:	060c060c 	.word	0x060c060c
   1020c:	060c060c 	.word	0x060c060c
   10210:	060c060c 	.word	0x060c060c
   10214:	060c060c 	.word	0x060c060c
   10218:	060c060c 	.word	0x060c060c
   1021c:	00660066 	.word	0x00660066
   10220:	00660066 	.word	0x00660066
   10224:	00660066 	.word	0x00660066
   10228:	06180066 	.word	0x06180066
   1022c:	048e0066 	.word	0x048e0066
   10230:	061804c9 	.word	0x061804c9
   10234:	06180618 	.word	0x06180618
   10238:	00660066 	.word	0x00660066
   1023c:	00660066 	.word	0x00660066
   10240:	00660082 	.word	0x00660082
   10244:	04bf0066 	.word	0x04bf0066
   10248:	00660066 	.word	0x00660066
   1024c:	00890066 	.word	0x00890066
   10250:	00660066 	.word	0x00660066
   10254:	00660066 	.word	0x00660066
   10258:	0066066b 	.word	0x0066066b
   1025c:	06dd0066 	.word	0x06dd0066
   10260:	00660066 	.word	0x00660066
   10264:	00660066 	.word	0x00660066
   10268:	06180066 	.word	0x06180066
   1026c:	04900066 	.word	0x04900066
   10270:	061804cb 	.word	0x061804cb
   10274:	06180618 	.word	0x06180618
   10278:	06d206be 	.word	0x06d206be
   1027c:	00660082 	.word	0x00660082
   10280:	06f306e7 	.word	0x06f306e7
   10284:	04c106ac 	.word	0x04c106ac
   10288:	006606da 	.word	0x006606da
   1028c:	008b0066 	.word	0x008b0066
   10290:	06ca007d 	.word	0x06ca007d
   10294:	00660066 	.word	0x00660066
   10298:	0066066b 	.word	0x0066066b
   1029c:	007d      	.short	0x007d
   1029e:	4659      	mov	r1, fp
   102a0:	4648      	mov	r0, r9
   102a2:	f003 f8c1 	bl	13428 <__ssrefill_r>
   102a6:	2800      	cmp	r0, #0
   102a8:	f43f af61 	beq.w	1016e <__ssvfscanf_r+0x9a>
   102ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   102ae:	2b00      	cmp	r3, #0
   102b0:	f001 8052 	beq.w	11358 <__ssvfscanf_r+0x1284>
   102b4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   102b8:	065a      	lsls	r2, r3, #25
   102ba:	f101 804d 	bmi.w	11358 <__ssvfscanf_r+0x1284>
   102be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   102c0:	b143      	cbz	r3, 102d4 <__ssvfscanf_r+0x200>
   102c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   102c4:	f8d3 8000 	ldr.w	r8, [r3]
   102c8:	f1b8 0f00 	cmp.w	r8, #0
   102cc:	d002      	beq.n	102d4 <__ssvfscanf_r+0x200>
   102ce:	4640      	mov	r0, r8
   102d0:	f7fa fb64 	bl	a99c <free>
   102d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
   102d6:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
   102da:	46bd      	mov	sp, r7
   102dc:	ecbd 8b02 	vpop	{d8}
   102e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   102e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   102e6:	2501      	movs	r5, #1
   102e8:	1e5e      	subs	r6, r3, #1
   102ea:	e73a      	b.n	10162 <__ssvfscanf_r+0x8e>
   102ec:	0723      	lsls	r3, r4, #28
   102ee:	d1e6      	bne.n	102be <__ssvfscanf_r+0x1ea>
   102f0:	7842      	ldrb	r2, [r0, #1]
   102f2:	4608      	mov	r0, r1
   102f4:	e776      	b.n	101e4 <__ssvfscanf_r+0x110>
   102f6:	0722      	lsls	r2, r4, #28
   102f8:	d1e1      	bne.n	102be <__ssvfscanf_r+0x1ea>
   102fa:	7842      	ldrb	r2, [r0, #1]
   102fc:	f044 0402 	orr.w	r4, r4, #2
   10300:	4608      	mov	r0, r1
   10302:	e76f      	b.n	101e4 <__ssvfscanf_r+0x110>
   10304:	f044 0401 	orr.w	r4, r4, #1
   10308:	64f9      	str	r1, [r7, #76]	; 0x4c
   1030a:	2502      	movs	r5, #2
   1030c:	f8db 3004 	ldr.w	r3, [fp, #4]
   10310:	2b00      	cmp	r3, #0
   10312:	f340 8408 	ble.w	10b26 <__ssvfscanf_r+0xa52>
   10316:	0660      	lsls	r0, r4, #25
   10318:	f140 840f 	bpl.w	10b3a <__ssvfscanf_r+0xa66>
   1031c:	1e6b      	subs	r3, r5, #1
   1031e:	2b03      	cmp	r3, #3
   10320:	f201 80eb 	bhi.w	114fa <__ssvfscanf_r+0x1426>
   10324:	e8df f013 	tbh	[pc, r3, lsl #1]
   10328:	01f1027b 	.word	0x01f1027b
   1032c:	0008014b 	.word	0x0008014b
   10330:	2000889c 	.word	0x2000889c
   10334:	20000d59 	.word	0x20000d59
   10338:	4648      	mov	r0, r9
   1033a:	f001 fc8f 	bl	11c5c <_localeconv_r>
   1033e:	6803      	ldr	r3, [r0, #0]
   10340:	623b      	str	r3, [r7, #32]
   10342:	f108 33ff 	add.w	r3, r8, #4294967295
   10346:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   1034a:	f240 855a 	bls.w	10e02 <__ssvfscanf_r+0xd2e>
   1034e:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
   10352:	eb08 0305 	add.w	r3, r8, r5
   10356:	613b      	str	r3, [r7, #16]
   10358:	f240 185d 	movw	r8, #349	; 0x15d
   1035c:	2600      	movs	r6, #0
   1035e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   10362:	ee08 9a10 	vmov	s16, r9
   10366:	e9c7 6605 	strd	r6, r6, [r7, #20]
   1036a:	63fe      	str	r6, [r7, #60]	; 0x3c
   1036c:	637e      	str	r6, [r7, #52]	; 0x34
   1036e:	61fe      	str	r6, [r7, #28]
   10370:	64be      	str	r6, [r7, #72]	; 0x48
   10372:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
   10376:	62bb      	str	r3, [r7, #40]	; 0x28
   10378:	461d      	mov	r5, r3
   1037a:	4646      	mov	r6, r8
   1037c:	f8db 1000 	ldr.w	r1, [fp]
   10380:	780a      	ldrb	r2, [r1, #0]
   10382:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   10386:	2b4e      	cmp	r3, #78	; 0x4e
   10388:	d850      	bhi.n	1042c <__ssvfscanf_r+0x358>
   1038a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1038e:	037e      	.short	0x037e
   10390:	037e004f 	.word	0x037e004f
   10394:	004f004f 	.word	0x004f004f
   10398:	00a600a3 	.word	0x00a600a3
   1039c:	00a600a6 	.word	0x00a600a6
   103a0:	00a600a6 	.word	0x00a600a6
   103a4:	00a600a6 	.word	0x00a600a6
   103a8:	00a600a6 	.word	0x00a600a6
   103ac:	004f004f 	.word	0x004f004f
   103b0:	004f004f 	.word	0x004f004f
   103b4:	004f004f 	.word	0x004f004f
   103b8:	0374004f 	.word	0x0374004f
   103bc:	030b030b 	.word	0x030b030b
   103c0:	039e030b 	.word	0x039e030b
   103c4:	004f0394 	.word	0x004f0394
   103c8:	0384004f 	.word	0x0384004f
   103cc:	004f004f 	.word	0x004f004f
   103d0:	004f004f 	.word	0x004f004f
   103d4:	004f035d 	.word	0x004f035d
   103d8:	004f033a 	.word	0x004f033a
   103dc:	004f004f 	.word	0x004f004f
   103e0:	004f0333 	.word	0x004f0333
   103e4:	004f004f 	.word	0x004f004f
   103e8:	036d031e 	.word	0x036d031e
   103ec:	004f004f 	.word	0x004f004f
   103f0:	004f004f 	.word	0x004f004f
   103f4:	004f004f 	.word	0x004f004f
   103f8:	0374004f 	.word	0x0374004f
   103fc:	030b030b 	.word	0x030b030b
   10400:	039e030b 	.word	0x039e030b
   10404:	004f0394 	.word	0x004f0394
   10408:	0384004f 	.word	0x0384004f
   1040c:	004f004f 	.word	0x004f004f
   10410:	004f004f 	.word	0x004f004f
   10414:	004f035d 	.word	0x004f035d
   10418:	004f033a 	.word	0x004f033a
   1041c:	004f004f 	.word	0x004f004f
   10420:	004f0333 	.word	0x004f0333
   10424:	004f004f 	.word	0x004f004f
   10428:	036d031e 	.word	0x036d031e
   1042c:	05a0      	lsls	r0, r4, #22
   1042e:	d56f      	bpl.n	10510 <__ssvfscanf_r+0x43c>
   10430:	6a38      	ldr	r0, [r7, #32]
   10432:	7803      	ldrb	r3, [r0, #0]
   10434:	4293      	cmp	r3, r2
   10436:	d16b      	bne.n	10510 <__ssvfscanf_r+0x43c>
   10438:	e9c7 4502 	strd	r4, r5, [r7, #8]
   1043c:	607e      	str	r6, [r7, #4]
   1043e:	4681      	mov	r9, r0
   10440:	ee18 6a10 	vmov	r6, s16
   10444:	f04f 0800 	mov.w	r8, #0
   10448:	465c      	mov	r4, fp
   1044a:	e007      	b.n	1045c <__ssvfscanf_r+0x388>
   1044c:	6021      	str	r1, [r4, #0]
   1044e:	f891 e000 	ldrb.w	lr, [r1]
   10452:	f899 0000 	ldrb.w	r0, [r9]
   10456:	4586      	cmp	lr, r0
   10458:	d11c      	bne.n	10494 <__ssvfscanf_r+0x3c0>
   1045a:	46da      	mov	sl, fp
   1045c:	f819 0f01 	ldrb.w	r0, [r9, #1]!
   10460:	4645      	mov	r5, r8
   10462:	f10a 0b01 	add.w	fp, sl, #1
   10466:	3101      	adds	r1, #1
   10468:	f108 0801 	add.w	r8, r8, #1
   1046c:	2800      	cmp	r0, #0
   1046e:	f000 8664 	beq.w	1113a <__ssvfscanf_r+0x1066>
   10472:	6860      	ldr	r0, [r4, #4]
   10474:	3801      	subs	r0, #1
   10476:	2800      	cmp	r0, #0
   10478:	6060      	str	r0, [r4, #4]
   1047a:	dce7      	bgt.n	1044c <__ssvfscanf_r+0x378>
   1047c:	4621      	mov	r1, r4
   1047e:	4630      	mov	r0, r6
   10480:	f002 ffd2 	bl	13428 <__ssrefill_r>
   10484:	b930      	cbnz	r0, 10494 <__ssvfscanf_r+0x3c0>
   10486:	6821      	ldr	r1, [r4, #0]
   10488:	f899 0000 	ldrb.w	r0, [r9]
   1048c:	f891 e000 	ldrb.w	lr, [r1]
   10490:	4586      	cmp	lr, r0
   10492:	d0e2      	beq.n	1045a <__ssvfscanf_r+0x386>
   10494:	46a3      	mov	fp, r4
   10496:	6a3a      	ldr	r2, [r7, #32]
   10498:	68bc      	ldr	r4, [r7, #8]
   1049a:	613d      	str	r5, [r7, #16]
   1049c:	462b      	mov	r3, r5
   1049e:	46b1      	mov	r9, r6
   104a0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   104a2:	68fd      	ldr	r5, [r7, #12]
   104a4:	64bd      	str	r5, [r7, #72]	; 0x48
   104a6:	3301      	adds	r3, #1
   104a8:	465d      	mov	r5, fp
   104aa:	eb02 0803 	add.w	r8, r2, r3
   104ae:	46b3      	mov	fp, r6
   104b0:	4626      	mov	r6, r4
   104b2:	4614      	mov	r4, r2
   104b4:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
   104b8:	462a      	mov	r2, r5
   104ba:	4648      	mov	r0, r9
   104bc:	f002 ff74 	bl	133a8 <_sungetc_r>
   104c0:	4544      	cmp	r4, r8
   104c2:	d1f7      	bne.n	104b4 <__ssvfscanf_r+0x3e0>
   104c4:	693b      	ldr	r3, [r7, #16]
   104c6:	4634      	mov	r4, r6
   104c8:	ebaa 0a03 	sub.w	sl, sl, r3
   104cc:	465e      	mov	r6, fp
   104ce:	46ab      	mov	fp, r5
   104d0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   104d2:	e020      	b.n	10516 <__ssvfscanf_r+0x442>
   104d4:	05e0      	lsls	r0, r4, #23
   104d6:	f100 8501 	bmi.w	10edc <__ssvfscanf_r+0xe08>
   104da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   104dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   104de:	42d9      	cmn	r1, r3
   104e0:	d116      	bne.n	10510 <__ssvfscanf_r+0x43c>
   104e2:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   104e6:	f805 2b01 	strb.w	r2, [r5], #1
   104ea:	3e01      	subs	r6, #1
   104ec:	f8db 3004 	ldr.w	r3, [fp, #4]
   104f0:	3b01      	subs	r3, #1
   104f2:	2b00      	cmp	r3, #0
   104f4:	f10a 0a01 	add.w	sl, sl, #1
   104f8:	f8cb 3004 	str.w	r3, [fp, #4]
   104fc:	f340 836f 	ble.w	10bde <__ssvfscanf_r+0xb0a>
   10500:	f8db 3000 	ldr.w	r3, [fp]
   10504:	3301      	adds	r3, #1
   10506:	f8cb 3000 	str.w	r3, [fp]
   1050a:	2e00      	cmp	r6, #0
   1050c:	f47f af36 	bne.w	1037c <__ssvfscanf_r+0x2a8>
   10510:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   10512:	ee18 9a10 	vmov	r9, s16
   10516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10518:	2b00      	cmp	r3, #0
   1051a:	f040 82dc 	bne.w	10ad6 <__ssvfscanf_r+0xa02>
   1051e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10520:	3b01      	subs	r3, #1
   10522:	2b01      	cmp	r3, #1
   10524:	f241 8016 	bls.w	11554 <__ssvfscanf_r+0x1480>
   10528:	1e73      	subs	r3, r6, #1
   1052a:	2b06      	cmp	r3, #6
   1052c:	f240 8627 	bls.w	1117e <__ssvfscanf_r+0x10aa>
   10530:	05e3      	lsls	r3, r4, #23
   10532:	d51b      	bpl.n	1056c <__ssvfscanf_r+0x498>
   10534:	0566      	lsls	r6, r4, #21
   10536:	f101 80b5 	bmi.w	116a4 <__ssvfscanf_r+0x15d0>
   1053a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1053e:	2965      	cmp	r1, #101	; 0x65
   10540:	f105 33ff 	add.w	r3, r5, #4294967295
   10544:	f10a 36ff 	add.w	r6, sl, #4294967295
   10548:	d00a      	beq.n	10560 <__ssvfscanf_r+0x48c>
   1054a:	2945      	cmp	r1, #69	; 0x45
   1054c:	d008      	beq.n	10560 <__ssvfscanf_r+0x48c>
   1054e:	465a      	mov	r2, fp
   10550:	4648      	mov	r0, r9
   10552:	f002 ff29 	bl	133a8 <_sungetc_r>
   10556:	f815 1c02 	ldrb.w	r1, [r5, #-2]
   1055a:	f1aa 0602 	sub.w	r6, sl, #2
   1055e:	1eab      	subs	r3, r5, #2
   10560:	465a      	mov	r2, fp
   10562:	4648      	mov	r0, r9
   10564:	46b2      	mov	sl, r6
   10566:	461d      	mov	r5, r3
   10568:	f002 ff1e 	bl	133a8 <_sungetc_r>
   1056c:	f014 0210 	ands.w	r2, r4, #16
   10570:	f47f add7 	bne.w	10122 <__ssvfscanf_r+0x4e>
   10574:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   10578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1057c:	702a      	strb	r2, [r5, #0]
   1057e:	f000 84d2 	beq.w	10f26 <__ssvfscanf_r+0xe52>
   10582:	69bb      	ldr	r3, [r7, #24]
   10584:	2b00      	cmp	r3, #0
   10586:	f040 872c 	bne.w	113e2 <__ssvfscanf_r+0x130e>
   1058a:	4648      	mov	r0, r9
   1058c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1058e:	2200      	movs	r2, #0
   10590:	f7fb fdfa 	bl	c188 <_strtod_r>
   10594:	07e0      	lsls	r0, r4, #31
   10596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10598:	f100 85c9 	bmi.w	1112e <__ssvfscanf_r+0x105a>
   1059c:	07a1      	lsls	r1, r4, #30
   1059e:	f100 85c6 	bmi.w	1112e <__ssvfscanf_r+0x105a>
   105a2:	eeb4 0b40 	vcmp.f64	d0, d0
   105a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   105aa:	f853 4b04 	ldr.w	r4, [r3], #4
   105ae:	f180 86f4 	bvs.w	1139a <__ssvfscanf_r+0x12c6>
   105b2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   105b6:	633b      	str	r3, [r7, #48]	; 0x30
   105b8:	ed84 0a00 	vstr	s0, [r4]
   105bc:	e3a2      	b.n	10d04 <__ssvfscanf_r+0xc30>
   105be:	f108 33ff 	add.w	r3, r8, #4294967295
   105c2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   105c6:	f240 83a2 	bls.w	10d0e <__ssvfscanf_r+0xc3a>
   105ca:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
   105ce:	eb08 0302 	add.w	r3, r8, r2
   105d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   105d4:	f240 185d 	movw	r8, #349	; 0x15d
   105d8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   105dc:	2200      	movs	r2, #0
   105de:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   105e0:	62bb      	str	r3, [r7, #40]	; 0x28
   105e2:	4659      	mov	r1, fp
   105e4:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
   105e8:	46d3      	mov	fp, sl
   105ea:	461d      	mov	r5, r3
   105ec:	4692      	mov	sl, r2
   105ee:	680a      	ldr	r2, [r1, #0]
   105f0:	7810      	ldrb	r0, [r2, #0]
   105f2:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   105f6:	2b4d      	cmp	r3, #77	; 0x4d
   105f8:	d860      	bhi.n	106bc <__ssvfscanf_r+0x5e8>
   105fa:	e8df f013 	tbh	[pc, r3, lsl #1]
   105fe:	0282      	.short	0x0282
   10600:	0282005f 	.word	0x0282005f
   10604:	005f005f 	.word	0x005f005f
   10608:	01e002cd 	.word	0x01e002cd
   1060c:	01e001e0 	.word	0x01e001e0
   10610:	01e001e0 	.word	0x01e001e0
   10614:	01e001e0 	.word	0x01e001e0
   10618:	026f026f 	.word	0x026f026f
   1061c:	005f005f 	.word	0x005f005f
   10620:	005f005f 	.word	0x005f005f
   10624:	005f005f 	.word	0x005f005f
   10628:	004e005f 	.word	0x004e005f
   1062c:	004e004e 	.word	0x004e004e
   10630:	004e004e 	.word	0x004e004e
   10634:	005f004e 	.word	0x005f004e
   10638:	005f005f 	.word	0x005f005f
   1063c:	005f005f 	.word	0x005f005f
   10640:	005f005f 	.word	0x005f005f
   10644:	005f005f 	.word	0x005f005f
   10648:	005f005f 	.word	0x005f005f
   1064c:	005f005f 	.word	0x005f005f
   10650:	005f005f 	.word	0x005f005f
   10654:	005f005f 	.word	0x005f005f
   10658:	005f0276 	.word	0x005f0276
   1065c:	005f005f 	.word	0x005f005f
   10660:	005f005f 	.word	0x005f005f
   10664:	005f005f 	.word	0x005f005f
   10668:	004e005f 	.word	0x004e005f
   1066c:	004e004e 	.word	0x004e004e
   10670:	004e004e 	.word	0x004e004e
   10674:	005f004e 	.word	0x005f004e
   10678:	005f005f 	.word	0x005f005f
   1067c:	005f005f 	.word	0x005f005f
   10680:	005f005f 	.word	0x005f005f
   10684:	005f005f 	.word	0x005f005f
   10688:	005f005f 	.word	0x005f005f
   1068c:	005f005f 	.word	0x005f005f
   10690:	005f005f 	.word	0x005f005f
   10694:	005f005f 	.word	0x005f005f
   10698:	0276      	.short	0x0276
   1069a:	2e0a      	cmp	r6, #10
   1069c:	dd0e      	ble.n	106bc <__ssvfscanf_r+0x5e8>
   1069e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   106a2:	684b      	ldr	r3, [r1, #4]
   106a4:	f805 0b01 	strb.w	r0, [r5], #1
   106a8:	3b01      	subs	r3, #1
   106aa:	2b00      	cmp	r3, #0
   106ac:	604b      	str	r3, [r1, #4]
   106ae:	f340 828d 	ble.w	10bcc <__ssvfscanf_r+0xaf8>
   106b2:	3201      	adds	r2, #1
   106b4:	600a      	str	r2, [r1, #0]
   106b6:	f1b8 0801 	subs.w	r8, r8, #1
   106ba:	d198      	bne.n	105ee <__ssvfscanf_r+0x51a>
   106bc:	05e0      	lsls	r0, r4, #23
   106be:	46d0      	mov	r8, sl
   106c0:	63be      	str	r6, [r7, #56]	; 0x38
   106c2:	46da      	mov	sl, fp
   106c4:	468b      	mov	fp, r1
   106c6:	d507      	bpl.n	106d8 <__ssvfscanf_r+0x604>
   106c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   106ca:	429d      	cmp	r5, r3
   106cc:	f200 8422 	bhi.w	10f14 <__ssvfscanf_r+0xe40>
   106d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   106d2:	429d      	cmp	r5, r3
   106d4:	f43f adf3 	beq.w	102be <__ssvfscanf_r+0x1ea>
   106d8:	f014 0210 	ands.w	r2, r4, #16
   106dc:	d110      	bne.n	10700 <__ssvfscanf_r+0x62c>
   106de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   106e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   106e2:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   106e4:	702a      	strb	r2, [r5, #0]
   106e6:	4648      	mov	r0, r9
   106e8:	47b0      	blx	r6
   106ea:	06a1      	lsls	r1, r4, #26
   106ec:	f140 8408 	bpl.w	10f00 <__ssvfscanf_r+0xe2c>
   106f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   106f2:	f853 2b04 	ldr.w	r2, [r3], #4
   106f6:	6010      	str	r0, [r2, #0]
   106f8:	633b      	str	r3, [r7, #48]	; 0x30
   106fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   106fc:	3301      	adds	r3, #1
   106fe:	647b      	str	r3, [r7, #68]	; 0x44
   10700:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10702:	1aed      	subs	r5, r5, r3
   10704:	4445      	add	r5, r8
   10706:	44aa      	add	sl, r5
   10708:	e50b      	b.n	10122 <__ssvfscanf_r+0x4e>
   1070a:	f1b8 0f00 	cmp.w	r8, #0
   1070e:	bf08      	it	eq
   10710:	f04f 38ff 	moveq.w	r8, #4294967295
   10714:	07e0      	lsls	r0, r4, #31
   10716:	f140 8295 	bpl.w	10c44 <__ssvfscanf_r+0xb70>
   1071a:	f014 0310 	ands.w	r3, r4, #16
   1071e:	637b      	str	r3, [r7, #52]	; 0x34
   10720:	f040 8474 	bne.w	1100c <__ssvfscanf_r+0xf38>
   10724:	0621      	lsls	r1, r4, #24
   10726:	f140 8666 	bpl.w	113f6 <__ssvfscanf_r+0x1322>
   1072a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   1072c:	f854 3b04 	ldr.w	r3, [r4], #4
   10730:	63fb      	str	r3, [r7, #60]	; 0x3c
   10732:	2b00      	cmp	r3, #0
   10734:	f43f adc3 	beq.w	102be <__ssvfscanf_r+0x1ea>
   10738:	2080      	movs	r0, #128	; 0x80
   1073a:	f7fa f927 	bl	a98c <malloc>
   1073e:	64b8      	str	r0, [r7, #72]	; 0x48
   10740:	2800      	cmp	r0, #0
   10742:	f000 8778 	beq.w	11636 <__ssvfscanf_r+0x1562>
   10746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10748:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1074a:	601a      	str	r2, [r3, #0]
   1074c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1074e:	88d5      	ldrh	r5, [r2, #6]
   10750:	8893      	ldrh	r3, [r2, #4]
   10752:	429d      	cmp	r5, r3
   10754:	f080 8552 	bcs.w	111fc <__ssvfscanf_r+0x1128>
   10758:	6810      	ldr	r0, [r2, #0]
   1075a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1075c:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   10760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10762:	633c      	str	r4, [r7, #48]	; 0x30
   10764:	3501      	adds	r5, #1
   10766:	80dd      	strh	r5, [r3, #6]
   10768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1076a:	62bb      	str	r3, [r7, #40]	; 0x28
   1076c:	2320      	movs	r3, #32
   1076e:	623b      	str	r3, [r7, #32]
   10770:	f8db 3000 	ldr.w	r3, [fp]
   10774:	4eb1      	ldr	r6, [pc, #708]	; (10a3c <__ssvfscanf_r+0x968>)
   10776:	781b      	ldrb	r3, [r3, #0]
   10778:	5cf3      	ldrb	r3, [r6, r3]
   1077a:	f013 0308 	ands.w	r3, r3, #8
   1077e:	f040 84bb 	bne.w	110f8 <__ssvfscanf_r+0x1024>
   10782:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   10784:	627e      	str	r6, [r7, #36]	; 0x24
   10786:	461d      	mov	r5, r3
   10788:	f7fc f902 	bl	c990 <__locale_mb_cur_max>
   1078c:	42a8      	cmp	r0, r5
   1078e:	f43f ad8d 	beq.w	102ac <__ssvfscanf_r+0x1d8>
   10792:	e9db 3200 	ldrd	r3, r2, [fp]
   10796:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   1079a:	f813 1b01 	ldrb.w	r1, [r3], #1
   1079e:	5541      	strb	r1, [r0, r5]
   107a0:	3a01      	subs	r2, #1
   107a2:	2c03      	cmp	r4, #3
   107a4:	e9cb 3200 	strd	r3, r2, [fp]
   107a8:	f105 0501 	add.w	r5, r5, #1
   107ac:	f107 0668 	add.w	r6, r7, #104	; 0x68
   107b0:	d102      	bne.n	107b8 <__ssvfscanf_r+0x6e4>
   107b2:	6833      	ldr	r3, [r6, #0]
   107b4:	2b04      	cmp	r3, #4
   107b6:	d004      	beq.n	107c2 <__ssvfscanf_r+0x6ee>
   107b8:	2208      	movs	r2, #8
   107ba:	2100      	movs	r1, #0
   107bc:	4630      	mov	r0, r6
   107be:	f7fc f81d 	bl	c7fc <memset>
   107c2:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   107c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   107c8:	9600      	str	r6, [sp, #0]
   107ca:	462b      	mov	r3, r5
   107cc:	4648      	mov	r0, r9
   107ce:	f002 fc17 	bl	13000 <_mbrtowc_r>
   107d2:	1c42      	adds	r2, r0, #1
   107d4:	4604      	mov	r4, r0
   107d6:	f43f ad69 	beq.w	102ac <__ssvfscanf_r+0x1d8>
   107da:	2800      	cmp	r0, #0
   107dc:	f040 8478 	bne.w	110d0 <__ssvfscanf_r+0xffc>
   107e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   107e2:	6018      	str	r0, [r3, #0]
   107e4:	f002 fc68 	bl	130b8 <iswspace>
   107e8:	2800      	cmp	r0, #0
   107ea:	f040 865c 	bne.w	114a6 <__ssvfscanf_r+0x13d2>
   107ee:	44aa      	add	sl, r5
   107f0:	f108 38ff 	add.w	r8, r8, #4294967295
   107f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   107f6:	2b00      	cmp	r3, #0
   107f8:	f040 8633 	bne.w	11462 <__ssvfscanf_r+0x138e>
   107fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   107fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   10800:	3304      	adds	r3, #4
   10802:	64bb      	str	r3, [r7, #72]	; 0x48
   10804:	2a00      	cmp	r2, #0
   10806:	f000 862c 	beq.w	11462 <__ssvfscanf_r+0x138e>
   1080a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1080c:	1a9d      	subs	r5, r3, r2
   1080e:	6a3b      	ldr	r3, [r7, #32]
   10810:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
   10814:	f240 8756 	bls.w	116c4 <__ssvfscanf_r+0x15f0>
   10818:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   1081a:	f000 bc5c 	b.w	110d6 <__ssvfscanf_r+0x1002>
   1081e:	f1b8 0f00 	cmp.w	r8, #0
   10822:	bf08      	it	eq
   10824:	f04f 38ff 	moveq.w	r8, #4294967295
   10828:	07e0      	lsls	r0, r4, #31
   1082a:	f140 827b 	bpl.w	10d24 <__ssvfscanf_r+0xc50>
   1082e:	f014 0310 	ands.w	r3, r4, #16
   10832:	62bb      	str	r3, [r7, #40]	; 0x28
   10834:	f040 83f3 	bne.w	1101e <__ssvfscanf_r+0xf4a>
   10838:	0621      	lsls	r1, r4, #24
   1083a:	f140 85ed 	bpl.w	11418 <__ssvfscanf_r+0x1344>
   1083e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
   10840:	f856 3b04 	ldr.w	r3, [r6], #4
   10844:	623b      	str	r3, [r7, #32]
   10846:	2b00      	cmp	r3, #0
   10848:	f43f ad39 	beq.w	102be <__ssvfscanf_r+0x1ea>
   1084c:	2080      	movs	r0, #128	; 0x80
   1084e:	f7fa f89d 	bl	a98c <malloc>
   10852:	4604      	mov	r4, r0
   10854:	2800      	cmp	r0, #0
   10856:	f000 86ee 	beq.w	11636 <__ssvfscanf_r+0x1562>
   1085a:	6a3b      	ldr	r3, [r7, #32]
   1085c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1085e:	6018      	str	r0, [r3, #0]
   10860:	88d5      	ldrh	r5, [r2, #6]
   10862:	8893      	ldrh	r3, [r2, #4]
   10864:	429d      	cmp	r5, r3
   10866:	f080 84dd 	bcs.w	11224 <__ssvfscanf_r+0x1150>
   1086a:	6810      	ldr	r0, [r2, #0]
   1086c:	6a3b      	ldr	r3, [r7, #32]
   1086e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   10872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10874:	633e      	str	r6, [r7, #48]	; 0x30
   10876:	3501      	adds	r5, #1
   10878:	80dd      	strh	r5, [r3, #6]
   1087a:	2320      	movs	r3, #32
   1087c:	61fc      	str	r4, [r7, #28]
   1087e:	61bb      	str	r3, [r7, #24]
   10880:	6a7e      	ldr	r6, [r7, #36]	; 0x24
   10882:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   10886:	2500      	movs	r5, #0
   10888:	46c2      	mov	sl, r8
   1088a:	46a0      	mov	r8, r4
   1088c:	f7fc f880 	bl	c990 <__locale_mb_cur_max>
   10890:	42a8      	cmp	r0, r5
   10892:	f43f ad0b 	beq.w	102ac <__ssvfscanf_r+0x1d8>
   10896:	e9db 3200 	ldrd	r3, r2, [fp]
   1089a:	f813 1b01 	ldrb.w	r1, [r3], #1
   1089e:	3a01      	subs	r2, #1
   108a0:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   108a4:	e9cb 3200 	strd	r3, r2, [fp]
   108a8:	2e03      	cmp	r6, #3
   108aa:	f105 0301 	add.w	r3, r5, #1
   108ae:	5541      	strb	r1, [r0, r5]
   108b0:	64bb      	str	r3, [r7, #72]	; 0x48
   108b2:	f107 0460 	add.w	r4, r7, #96	; 0x60
   108b6:	d102      	bne.n	108be <__ssvfscanf_r+0x7ea>
   108b8:	6823      	ldr	r3, [r4, #0]
   108ba:	2b04      	cmp	r3, #4
   108bc:	d004      	beq.n	108c8 <__ssvfscanf_r+0x7f4>
   108be:	2208      	movs	r2, #8
   108c0:	2100      	movs	r1, #0
   108c2:	4620      	mov	r0, r4
   108c4:	f7fb ff9a 	bl	c7fc <memset>
   108c8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   108cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   108ce:	9400      	str	r4, [sp, #0]
   108d0:	4641      	mov	r1, r8
   108d2:	4648      	mov	r0, r9
   108d4:	f002 fb94 	bl	13000 <_mbrtowc_r>
   108d8:	1c42      	adds	r2, r0, #1
   108da:	4606      	mov	r6, r0
   108dc:	f43f ace6 	beq.w	102ac <__ssvfscanf_r+0x1d8>
   108e0:	2800      	cmp	r0, #0
   108e2:	f040 82ca 	bne.w	10e7a <__ssvfscanf_r+0xda6>
   108e6:	f8c8 0000 	str.w	r0, [r8]
   108ea:	4605      	mov	r5, r0
   108ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
   108f0:	2208      	movs	r2, #8
   108f2:	2100      	movs	r1, #0
   108f4:	4618      	mov	r0, r3
   108f6:	637b      	str	r3, [r7, #52]	; 0x34
   108f8:	f7fb ff80 	bl	c7fc <memset>
   108fc:	4950      	ldr	r1, [pc, #320]	; (10a40 <__ssvfscanf_r+0x96c>)
   108fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10900:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
   10904:	462a      	mov	r2, r5
   10906:	4648      	mov	r0, r9
   10908:	460d      	mov	r5, r1
   1090a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   1090e:	47a8      	blx	r5
   10910:	2801      	cmp	r0, #1
   10912:	f000 83d5 	beq.w	110c0 <__ssvfscanf_r+0xfec>
   10916:	2200      	movs	r2, #0
   10918:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1091c:	5c9b      	ldrb	r3, [r3, r2]
   1091e:	2b00      	cmp	r3, #0
   10920:	f000 85a1 	beq.w	11466 <__ssvfscanf_r+0x1392>
   10924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10926:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10928:	2e03      	cmp	r6, #3
   1092a:	4413      	add	r3, r2
   1092c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1092e:	f000 83ca 	beq.w	110c6 <__ssvfscanf_r+0xff2>
   10932:	f10a 3aff 	add.w	sl, sl, #4294967295
   10936:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10938:	b95b      	cbnz	r3, 10952 <__ssvfscanf_r+0x87e>
   1093a:	6a3b      	ldr	r3, [r7, #32]
   1093c:	f108 0804 	add.w	r8, r8, #4
   10940:	b13b      	cbz	r3, 10952 <__ssvfscanf_r+0x87e>
   10942:	69fb      	ldr	r3, [r7, #28]
   10944:	eba8 0403 	sub.w	r4, r8, r3
   10948:	69bb      	ldr	r3, [r7, #24]
   1094a:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   1094e:	f240 8405 	bls.w	1115c <__ssvfscanf_r+0x1088>
   10952:	f8db 3004 	ldr.w	r3, [fp, #4]
   10956:	2b00      	cmp	r3, #0
   10958:	f04f 0500 	mov.w	r5, #0
   1095c:	f340 8296 	ble.w	10e8c <__ssvfscanf_r+0xdb8>
   10960:	f1ba 0f00 	cmp.w	sl, #0
   10964:	d192      	bne.n	1088c <__ssvfscanf_r+0x7b8>
   10966:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1096a:	627e      	str	r6, [r7, #36]	; 0x24
   1096c:	4644      	mov	r4, r8
   1096e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10970:	2b00      	cmp	r3, #0
   10972:	f47f abd6 	bne.w	10122 <__ssvfscanf_r+0x4e>
   10976:	6023      	str	r3, [r4, #0]
   10978:	6a3b      	ldr	r3, [r7, #32]
   1097a:	2b00      	cmp	r3, #0
   1097c:	f000 81c2 	beq.w	10d04 <__ssvfscanf_r+0xc30>
   10980:	69fb      	ldr	r3, [r7, #28]
   10982:	69ba      	ldr	r2, [r7, #24]
   10984:	1ae1      	subs	r1, r4, r3
   10986:	108b      	asrs	r3, r1, #2
   10988:	3301      	adds	r3, #1
   1098a:	429a      	cmp	r2, r3
   1098c:	f240 81ba 	bls.w	10d04 <__ssvfscanf_r+0xc30>
   10990:	6a3c      	ldr	r4, [r7, #32]
   10992:	3104      	adds	r1, #4
   10994:	6820      	ldr	r0, [r4, #0]
   10996:	f7fa fac5 	bl	af24 <realloc>
   1099a:	2800      	cmp	r0, #0
   1099c:	f000 81b2 	beq.w	10d04 <__ssvfscanf_r+0xc30>
   109a0:	6020      	str	r0, [r4, #0]
   109a2:	e1af      	b.n	10d04 <__ssvfscanf_r+0xc30>
   109a4:	0521      	lsls	r1, r4, #20
   109a6:	f57f adb3 	bpl.w	10510 <__ssvfscanf_r+0x43c>
   109aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   109ac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   109ae:	185b      	adds	r3, r3, r1
   109b0:	f47f adae 	bne.w	10510 <__ssvfscanf_r+0x43c>
   109b4:	64bb      	str	r3, [r7, #72]	; 0x48
   109b6:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   109ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   109bc:	e593      	b.n	104e6 <__ssvfscanf_r+0x412>
   109be:	4b21      	ldr	r3, [pc, #132]	; (10a44 <__ssvfscanf_r+0x970>)
   109c0:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   109c4:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   109c8:	e66b      	b.n	106a2 <__ssvfscanf_r+0x5ce>
   109ca:	f404 6318 	and.w	r3, r4, #2432	; 0x980
   109ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   109d2:	f47f ad9d 	bne.w	10510 <__ssvfscanf_r+0x43c>
   109d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   109d8:	2b01      	cmp	r3, #1
   109da:	f47f ad99 	bne.w	10510 <__ssvfscanf_r+0x43c>
   109de:	2330      	movs	r3, #48	; 0x30
   109e0:	f805 3b01 	strb.w	r3, [r5], #1
   109e4:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   109e8:	2300      	movs	r3, #0
   109ea:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   109ee:	3e01      	subs	r6, #1
   109f0:	637b      	str	r3, [r7, #52]	; 0x34
   109f2:	e578      	b.n	104e6 <__ssvfscanf_r+0x412>
   109f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   109f6:	2b06      	cmp	r3, #6
   109f8:	f040 8574 	bne.w	114e4 <__ssvfscanf_r+0x1410>
   109fc:	2307      	movs	r3, #7
   109fe:	64bb      	str	r3, [r7, #72]	; 0x48
   10a00:	e571      	b.n	104e6 <__ssvfscanf_r+0x412>
   10a02:	0523      	lsls	r3, r4, #20
   10a04:	f57f ad84 	bpl.w	10510 <__ssvfscanf_r+0x43c>
   10a08:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
   10a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   10a10:	d005      	beq.n	10a1e <__ssvfscanf_r+0x94a>
   10a12:	0561      	lsls	r1, r4, #21
   10a14:	f57f ad7c 	bpl.w	10510 <__ssvfscanf_r+0x43c>
   10a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10a1a:	2b00      	cmp	r3, #0
   10a1c:	d047      	beq.n	10aae <__ssvfscanf_r+0x9da>
   10a1e:	05a3      	lsls	r3, r4, #22
   10a20:	d404      	bmi.n	10a2c <__ssvfscanf_r+0x958>
   10a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10a24:	69f9      	ldr	r1, [r7, #28]
   10a26:	1a5b      	subs	r3, r3, r1
   10a28:	e9c7 5305 	strd	r5, r3, [r7, #20]
   10a2c:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
   10a30:	2300      	movs	r3, #0
   10a32:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
   10a36:	637b      	str	r3, [r7, #52]	; 0x34
   10a38:	e555      	b.n	104e6 <__ssvfscanf_r+0x412>
   10a3a:	bf00      	nop
   10a3c:	20000d59 	.word	0x20000d59
   10a40:	2000889c 	.word	0x2000889c
   10a44:	2000297c 	.word	0x2000297c
   10a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10a4a:	2b00      	cmp	r3, #0
   10a4c:	f000 81ff 	beq.w	10e4e <__ssvfscanf_r+0xd7a>
   10a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10a52:	2b02      	cmp	r3, #2
   10a54:	f000 83b0 	beq.w	111b8 <__ssvfscanf_r+0x10e4>
   10a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10a5a:	2b01      	cmp	r3, #1
   10a5c:	f000 81f1 	beq.w	10e42 <__ssvfscanf_r+0xd6e>
   10a60:	2b04      	cmp	r3, #4
   10a62:	f000 81ee 	beq.w	10e42 <__ssvfscanf_r+0xd6e>
   10a66:	e553      	b.n	10510 <__ssvfscanf_r+0x43c>
   10a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10a6a:	2b07      	cmp	r3, #7
   10a6c:	f040 853a 	bne.w	114e4 <__ssvfscanf_r+0x1410>
   10a70:	2308      	movs	r3, #8
   10a72:	64bb      	str	r3, [r7, #72]	; 0x48
   10a74:	e537      	b.n	104e6 <__ssvfscanf_r+0x412>
   10a76:	0520      	lsls	r0, r4, #20
   10a78:	f100 81f9 	bmi.w	10e6e <__ssvfscanf_r+0xd9a>
   10a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10a7e:	2b01      	cmp	r3, #1
   10a80:	f47f ad46 	bne.w	10510 <__ssvfscanf_r+0x43c>
   10a84:	2302      	movs	r3, #2
   10a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   10a88:	e52d      	b.n	104e6 <__ssvfscanf_r+0x412>
   10a8a:	0623      	lsls	r3, r4, #24
   10a8c:	f57f ad40 	bpl.w	10510 <__ssvfscanf_r+0x43c>
   10a90:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   10a94:	e527      	b.n	104e6 <__ssvfscanf_r+0x412>
   10a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10a98:	2b00      	cmp	r3, #0
   10a9a:	f040 81cc 	bne.w	10e36 <__ssvfscanf_r+0xd62>
   10a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10aa0:	b9b3      	cbnz	r3, 10ad0 <__ssvfscanf_r+0x9fc>
   10aa2:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   10aa6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   10aaa:	f000 8520 	beq.w	114ee <__ssvfscanf_r+0x141a>
   10aae:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   10ab0:	ee18 9a10 	vmov	r9, s16
   10ab4:	e533      	b.n	1051e <__ssvfscanf_r+0x44a>
   10ab6:	0521      	lsls	r1, r4, #20
   10ab8:	f100 81b7 	bmi.w	10e2a <__ssvfscanf_r+0xd56>
   10abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10abe:	2b02      	cmp	r3, #2
   10ac0:	f040 8510 	bne.w	114e4 <__ssvfscanf_r+0x1410>
   10ac4:	2303      	movs	r3, #3
   10ac6:	64bb      	str	r3, [r7, #72]	; 0x48
   10ac8:	e50d      	b.n	104e6 <__ssvfscanf_r+0x412>
   10aca:	0520      	lsls	r0, r4, #20
   10acc:	d59c      	bpl.n	10a08 <__ssvfscanf_r+0x934>
   10ace:	e76c      	b.n	109aa <__ssvfscanf_r+0x8d6>
   10ad0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   10ad2:	ee18 9a10 	vmov	r9, s16
   10ad6:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   10ada:	e520      	b.n	1051e <__ssvfscanf_r+0x44a>
   10adc:	4b8d      	ldr	r3, [pc, #564]	; (10d14 <__ssvfscanf_r+0xc40>)
   10ade:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   10ae2:	2e08      	cmp	r6, #8
   10ae4:	f73f addb 	bgt.w	1069e <__ssvfscanf_r+0x5ca>
   10ae8:	e5e8      	b.n	106bc <__ssvfscanf_r+0x5e8>
   10aea:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   10aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   10af2:	f47f ade3 	bne.w	106bc <__ssvfscanf_r+0x5e8>
   10af6:	f424 7400 	bic.w	r4, r4, #512	; 0x200
   10afa:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
   10afe:	2610      	movs	r6, #16
   10b00:	e5cf      	b.n	106a2 <__ssvfscanf_r+0x5ce>
   10b02:	0623      	lsls	r3, r4, #24
   10b04:	f57f adda 	bpl.w	106bc <__ssvfscanf_r+0x5e8>
   10b08:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   10b0c:	e5c9      	b.n	106a2 <__ssvfscanf_r+0x5ce>
   10b0e:	f044 0401 	orr.w	r4, r4, #1
   10b12:	f8db 3004 	ldr.w	r3, [fp, #4]
   10b16:	64f9      	str	r1, [r7, #76]	; 0x4c
   10b18:	2b00      	cmp	r3, #0
   10b1a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   10b1e:	f04f 0500 	mov.w	r5, #0
   10b22:	f73f abf8 	bgt.w	10316 <__ssvfscanf_r+0x242>
   10b26:	4659      	mov	r1, fp
   10b28:	4648      	mov	r0, r9
   10b2a:	f002 fc7d 	bl	13428 <__ssrefill_r>
   10b2e:	2800      	cmp	r0, #0
   10b30:	f47f abbc 	bne.w	102ac <__ssvfscanf_r+0x1d8>
   10b34:	0660      	lsls	r0, r4, #25
   10b36:	f53f abf1 	bmi.w	1031c <__ssvfscanf_r+0x248>
   10b3a:	f8db 2000 	ldr.w	r2, [fp]
   10b3e:	4e76      	ldr	r6, [pc, #472]	; (10d18 <__ssvfscanf_r+0xc44>)
   10b40:	7813      	ldrb	r3, [r2, #0]
   10b42:	5cf3      	ldrb	r3, [r6, r3]
   10b44:	0719      	lsls	r1, r3, #28
   10b46:	f57f abe9 	bpl.w	1031c <__ssvfscanf_r+0x248>
   10b4a:	f8db 3004 	ldr.w	r3, [fp, #4]
   10b4e:	3b01      	subs	r3, #1
   10b50:	2b00      	cmp	r3, #0
   10b52:	f10a 0a01 	add.w	sl, sl, #1
   10b56:	f8cb 3004 	str.w	r3, [fp, #4]
   10b5a:	f102 0201 	add.w	r2, r2, #1
   10b5e:	dd4a      	ble.n	10bf6 <__ssvfscanf_r+0xb22>
   10b60:	f8cb 2000 	str.w	r2, [fp]
   10b64:	7813      	ldrb	r3, [r2, #0]
   10b66:	5cf3      	ldrb	r3, [r6, r3]
   10b68:	0719      	lsls	r1, r3, #28
   10b6a:	f57f abd7 	bpl.w	1031c <__ssvfscanf_r+0x248>
   10b6e:	e7ec      	b.n	10b4a <__ssvfscanf_r+0xa76>
   10b70:	f044 0401 	orr.w	r4, r4, #1
   10b74:	4b69      	ldr	r3, [pc, #420]	; (10d1c <__ssvfscanf_r+0xc48>)
   10b76:	62fb      	str	r3, [r7, #44]	; 0x2c
   10b78:	2308      	movs	r3, #8
   10b7a:	64f9      	str	r1, [r7, #76]	; 0x4c
   10b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   10b7e:	2503      	movs	r5, #3
   10b80:	f7ff bbc4 	b.w	1030c <__ssvfscanf_r+0x238>
   10b84:	f044 0401 	orr.w	r4, r4, #1
   10b88:	4b65      	ldr	r3, [pc, #404]	; (10d20 <__ssvfscanf_r+0xc4c>)
   10b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   10b8c:	230a      	movs	r3, #10
   10b8e:	64f9      	str	r1, [r7, #76]	; 0x4c
   10b90:	63bb      	str	r3, [r7, #56]	; 0x38
   10b92:	2503      	movs	r5, #3
   10b94:	f7ff bbba 	b.w	1030c <__ssvfscanf_r+0x238>
   10b98:	0523      	lsls	r3, r4, #20
   10b9a:	f57f ad82 	bpl.w	106a2 <__ssvfscanf_r+0x5ce>
   10b9e:	b916      	cbnz	r6, 10ba6 <__ssvfscanf_r+0xad2>
   10ba0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   10ba4:	2608      	movs	r6, #8
   10ba6:	0563      	lsls	r3, r4, #21
   10ba8:	f100 81a6 	bmi.w	10ef8 <__ssvfscanf_r+0xe24>
   10bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10bae:	f424 7460 	bic.w	r4, r4, #896	; 0x380
   10bb2:	b11b      	cbz	r3, 10bbc <__ssvfscanf_r+0xae8>
   10bb4:	3b01      	subs	r3, #1
   10bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   10bb8:	f108 0801 	add.w	r8, r8, #1
   10bbc:	684b      	ldr	r3, [r1, #4]
   10bbe:	3b01      	subs	r3, #1
   10bc0:	2b00      	cmp	r3, #0
   10bc2:	f10a 0a01 	add.w	sl, sl, #1
   10bc6:	604b      	str	r3, [r1, #4]
   10bc8:	f73f ad73 	bgt.w	106b2 <__ssvfscanf_r+0x5de>
   10bcc:	4648      	mov	r0, r9
   10bce:	64b9      	str	r1, [r7, #72]	; 0x48
   10bd0:	f002 fc2a 	bl	13428 <__ssrefill_r>
   10bd4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   10bd6:	2800      	cmp	r0, #0
   10bd8:	f43f ad6d 	beq.w	106b6 <__ssvfscanf_r+0x5e2>
   10bdc:	e56e      	b.n	106bc <__ssvfscanf_r+0x5e8>
   10bde:	ee18 0a10 	vmov	r0, s16
   10be2:	4659      	mov	r1, fp
   10be4:	f002 fc20 	bl	13428 <__ssrefill_r>
   10be8:	2800      	cmp	r0, #0
   10bea:	f47f ac91 	bne.w	10510 <__ssvfscanf_r+0x43c>
   10bee:	2e00      	cmp	r6, #0
   10bf0:	f47f abc4 	bne.w	1037c <__ssvfscanf_r+0x2a8>
   10bf4:	e48c      	b.n	10510 <__ssvfscanf_r+0x43c>
   10bf6:	4659      	mov	r1, fp
   10bf8:	4648      	mov	r0, r9
   10bfa:	f002 fc15 	bl	13428 <__ssrefill_r>
   10bfe:	2800      	cmp	r0, #0
   10c00:	f47f ab54 	bne.w	102ac <__ssvfscanf_r+0x1d8>
   10c04:	f8db 2000 	ldr.w	r2, [fp]
   10c08:	e79a      	b.n	10b40 <__ssvfscanf_r+0xa6c>
   10c0a:	f8db 2004 	ldr.w	r2, [fp, #4]
   10c0e:	e00f      	b.n	10c30 <__ssvfscanf_r+0xb5c>
   10c10:	f8db 3000 	ldr.w	r3, [fp]
   10c14:	781a      	ldrb	r2, [r3, #0]
   10c16:	5cb2      	ldrb	r2, [r6, r2]
   10c18:	0711      	lsls	r1, r2, #28
   10c1a:	f103 0301 	add.w	r3, r3, #1
   10c1e:	f57f aa80 	bpl.w	10122 <__ssvfscanf_r+0x4e>
   10c22:	f8db 2004 	ldr.w	r2, [fp, #4]
   10c26:	3a01      	subs	r2, #1
   10c28:	e9cb 3200 	strd	r3, r2, [fp]
   10c2c:	f10a 0a01 	add.w	sl, sl, #1
   10c30:	2a00      	cmp	r2, #0
   10c32:	dced      	bgt.n	10c10 <__ssvfscanf_r+0xb3c>
   10c34:	4659      	mov	r1, fp
   10c36:	4648      	mov	r0, r9
   10c38:	f002 fbf6 	bl	13428 <__ssrefill_r>
   10c3c:	2800      	cmp	r0, #0
   10c3e:	d0e7      	beq.n	10c10 <__ssvfscanf_r+0xb3c>
   10c40:	f7ff ba6f 	b.w	10122 <__ssvfscanf_r+0x4e>
   10c44:	06e1      	lsls	r1, r4, #27
   10c46:	f100 8349 	bmi.w	112dc <__ssvfscanf_r+0x1208>
   10c4a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   10c4e:	f000 83ab 	beq.w	113a8 <__ssvfscanf_r+0x12d4>
   10c52:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   10c54:	f854 6b04 	ldr.w	r6, [r4], #4
   10c58:	64be      	str	r6, [r7, #72]	; 0x48
   10c5a:	2e00      	cmp	r6, #0
   10c5c:	f43f ab2f 	beq.w	102be <__ssvfscanf_r+0x1ea>
   10c60:	2020      	movs	r0, #32
   10c62:	f7f9 fe93 	bl	a98c <malloc>
   10c66:	4605      	mov	r5, r0
   10c68:	2800      	cmp	r0, #0
   10c6a:	f000 8462 	beq.w	11532 <__ssvfscanf_r+0x145e>
   10c6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10c70:	6030      	str	r0, [r6, #0]
   10c72:	8893      	ldrh	r3, [r2, #4]
   10c74:	88d6      	ldrh	r6, [r2, #6]
   10c76:	429e      	cmp	r6, r3
   10c78:	f080 82a8 	bcs.w	111cc <__ssvfscanf_r+0x10f8>
   10c7c:	6810      	ldr	r0, [r2, #0]
   10c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10c80:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   10c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10c86:	633c      	str	r4, [r7, #48]	; 0x30
   10c88:	3601      	adds	r6, #1
   10c8a:	80de      	strh	r6, [r3, #6]
   10c8c:	2320      	movs	r3, #32
   10c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   10c90:	f8db 2000 	ldr.w	r2, [fp]
   10c94:	4e20      	ldr	r6, [pc, #128]	; (10d18 <__ssvfscanf_r+0xc44>)
   10c96:	7811      	ldrb	r1, [r2, #0]
   10c98:	5c71      	ldrb	r1, [r6, r1]
   10c9a:	0708      	lsls	r0, r1, #28
   10c9c:	f100 82ac 	bmi.w	111f8 <__ssvfscanf_r+0x1124>
   10ca0:	4633      	mov	r3, r6
   10ca2:	462c      	mov	r4, r5
   10ca4:	4610      	mov	r0, r2
   10ca6:	462e      	mov	r6, r5
   10ca8:	f8db 1004 	ldr.w	r1, [fp, #4]
   10cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10cae:	3901      	subs	r1, #1
   10cb0:	f8cb 1004 	str.w	r1, [fp, #4]
   10cb4:	1c41      	adds	r1, r0, #1
   10cb6:	f8cb 1000 	str.w	r1, [fp]
   10cba:	4635      	mov	r5, r6
   10cbc:	7801      	ldrb	r1, [r0, #0]
   10cbe:	f805 1b01 	strb.w	r1, [r5], #1
   10cc2:	b122      	cbz	r2, 10cce <__ssvfscanf_r+0xbfa>
   10cc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   10cc6:	1b2e      	subs	r6, r5, r4
   10cc8:	4296      	cmp	r6, r2
   10cca:	f080 837a 	bcs.w	113c2 <__ssvfscanf_r+0x12ee>
   10cce:	f1b8 0801 	subs.w	r8, r8, #1
   10cd2:	d00b      	beq.n	10cec <__ssvfscanf_r+0xc18>
   10cd4:	f8db 1004 	ldr.w	r1, [fp, #4]
   10cd8:	2900      	cmp	r1, #0
   10cda:	462e      	mov	r6, r5
   10cdc:	f340 83ae 	ble.w	1143c <__ssvfscanf_r+0x1368>
   10ce0:	f8db 0000 	ldr.w	r0, [fp]
   10ce4:	7801      	ldrb	r1, [r0, #0]
   10ce6:	5c59      	ldrb	r1, [r3, r1]
   10ce8:	0709      	lsls	r1, r1, #28
   10cea:	d5dd      	bpl.n	10ca8 <__ssvfscanf_r+0xbd4>
   10cec:	1b29      	subs	r1, r5, r4
   10cee:	448a      	add	sl, r1
   10cf0:	3101      	adds	r1, #1
   10cf2:	f04f 0300 	mov.w	r3, #0
   10cf6:	702b      	strb	r3, [r5, #0]
   10cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10cfa:	b11b      	cbz	r3, 10d04 <__ssvfscanf_r+0xc30>
   10cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10cfe:	428b      	cmp	r3, r1
   10d00:	f200 8394 	bhi.w	1142c <__ssvfscanf_r+0x1358>
   10d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10d06:	3301      	adds	r3, #1
   10d08:	647b      	str	r3, [r7, #68]	; 0x44
   10d0a:	f7ff ba0a 	b.w	10122 <__ssvfscanf_r+0x4e>
   10d0e:	2300      	movs	r3, #0
   10d10:	63fb      	str	r3, [r7, #60]	; 0x3c
   10d12:	e461      	b.n	105d8 <__ssvfscanf_r+0x504>
   10d14:	2000297c 	.word	0x2000297c
   10d18:	20000d59 	.word	0x20000d59
   10d1c:	00012ced 	.word	0x00012ced
   10d20:	0000c2d9 	.word	0x0000c2d9
   10d24:	06e6      	lsls	r6, r4, #27
   10d26:	f100 8181 	bmi.w	1102c <__ssvfscanf_r+0xf58>
   10d2a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   10d2e:	f000 836d 	beq.w	1140c <__ssvfscanf_r+0x1338>
   10d32:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   10d34:	f854 6b04 	ldr.w	r6, [r4], #4
   10d38:	64be      	str	r6, [r7, #72]	; 0x48
   10d3a:	2e00      	cmp	r6, #0
   10d3c:	f43f aabf 	beq.w	102be <__ssvfscanf_r+0x1ea>
   10d40:	2020      	movs	r0, #32
   10d42:	f7f9 fe23 	bl	a98c <malloc>
   10d46:	4605      	mov	r5, r0
   10d48:	2800      	cmp	r0, #0
   10d4a:	f000 83f2 	beq.w	11532 <__ssvfscanf_r+0x145e>
   10d4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10d50:	6030      	str	r0, [r6, #0]
   10d52:	8893      	ldrh	r3, [r2, #4]
   10d54:	88d6      	ldrh	r6, [r2, #6]
   10d56:	429e      	cmp	r6, r3
   10d58:	f080 827a 	bcs.w	11250 <__ssvfscanf_r+0x117c>
   10d5c:	6810      	ldr	r0, [r2, #0]
   10d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10d60:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   10d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10d66:	633c      	str	r4, [r7, #48]	; 0x30
   10d68:	3601      	adds	r6, #1
   10d6a:	80de      	strh	r6, [r3, #6]
   10d6c:	2420      	movs	r4, #32
   10d6e:	f8db 2000 	ldr.w	r2, [fp]
   10d72:	f107 0370 	add.w	r3, r7, #112	; 0x70
   10d76:	4619      	mov	r1, r3
   10d78:	7813      	ldrb	r3, [r2, #0]
   10d7a:	5ccb      	ldrb	r3, [r1, r3]
   10d7c:	2b00      	cmp	r3, #0
   10d7e:	f43f aa9e 	beq.w	102be <__ssvfscanf_r+0x1ea>
   10d82:	ee08 9a10 	vmov	s16, r9
   10d86:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
   10d8a:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   10d8e:	462e      	mov	r6, r5
   10d90:	46a2      	mov	sl, r4
   10d92:	4610      	mov	r0, r2
   10d94:	460c      	mov	r4, r1
   10d96:	f8db 1004 	ldr.w	r1, [fp, #4]
   10d9a:	1c43      	adds	r3, r0, #1
   10d9c:	3901      	subs	r1, #1
   10d9e:	e9cb 3100 	strd	r3, r1, [fp]
   10da2:	4629      	mov	r1, r5
   10da4:	7800      	ldrb	r0, [r0, #0]
   10da6:	f801 0b01 	strb.w	r0, [r1], #1
   10daa:	f1b9 0f00 	cmp.w	r9, #0
   10dae:	d002      	beq.n	10db6 <__ssvfscanf_r+0xce2>
   10db0:	1b8d      	subs	r5, r1, r6
   10db2:	4555      	cmp	r5, sl
   10db4:	d27a      	bcs.n	10eac <__ssvfscanf_r+0xdd8>
   10db6:	460d      	mov	r5, r1
   10db8:	f1b8 0801 	subs.w	r8, r8, #1
   10dbc:	d00a      	beq.n	10dd4 <__ssvfscanf_r+0xd00>
   10dbe:	f8db 1004 	ldr.w	r1, [fp, #4]
   10dc2:	2900      	cmp	r1, #0
   10dc4:	f340 816a 	ble.w	1109c <__ssvfscanf_r+0xfc8>
   10dc8:	f8db 0000 	ldr.w	r0, [fp]
   10dcc:	7801      	ldrb	r1, [r0, #0]
   10dce:	5c61      	ldrb	r1, [r4, r1]
   10dd0:	2900      	cmp	r1, #0
   10dd2:	d1e0      	bne.n	10d96 <__ssvfscanf_r+0xcc2>
   10dd4:	4654      	mov	r4, sl
   10dd6:	ee18 9a10 	vmov	r9, s16
   10dda:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   10dde:	1bae      	subs	r6, r5, r6
   10de0:	f43f aa6d 	beq.w	102be <__ssvfscanf_r+0x1ea>
   10de4:	f04f 0300 	mov.w	r3, #0
   10de8:	702b      	strb	r3, [r5, #0]
   10dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10dec:	b11b      	cbz	r3, 10df6 <__ssvfscanf_r+0xd22>
   10dee:	1c71      	adds	r1, r6, #1
   10df0:	428c      	cmp	r4, r1
   10df2:	f200 832d 	bhi.w	11450 <__ssvfscanf_r+0x137c>
   10df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10df8:	3301      	adds	r3, #1
   10dfa:	44b2      	add	sl, r6
   10dfc:	647b      	str	r3, [r7, #68]	; 0x44
   10dfe:	f7ff b990 	b.w	10122 <__ssvfscanf_r+0x4e>
   10e02:	2300      	movs	r3, #0
   10e04:	613b      	str	r3, [r7, #16]
   10e06:	f7ff baa9 	b.w	1035c <__ssvfscanf_r+0x288>
   10e0a:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   10e0e:	f47f aa56 	bne.w	102be <__ssvfscanf_r+0x1ea>
   10e12:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   10e16:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   10e1a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   10e1e:	f7ff ba67 	b.w	102f0 <__ssvfscanf_r+0x21c>
   10e22:	64f9      	str	r1, [r7, #76]	; 0x4c
   10e24:	2504      	movs	r5, #4
   10e26:	f7ff ba71 	b.w	1030c <__ssvfscanf_r+0x238>
   10e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10e2c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   10e2e:	185b      	adds	r3, r3, r1
   10e30:	f47f ae44 	bne.w	10abc <__ssvfscanf_r+0x9e8>
   10e34:	e5be      	b.n	109b4 <__ssvfscanf_r+0x8e0>
   10e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10e38:	2b03      	cmp	r3, #3
   10e3a:	d002      	beq.n	10e42 <__ssvfscanf_r+0xd6e>
   10e3c:	2b05      	cmp	r3, #5
   10e3e:	f47f ab67 	bne.w	10510 <__ssvfscanf_r+0x43c>
   10e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10e44:	3301      	adds	r3, #1
   10e46:	b2db      	uxtb	r3, r3
   10e48:	64bb      	str	r3, [r7, #72]	; 0x48
   10e4a:	f7ff bb4c 	b.w	104e6 <__ssvfscanf_r+0x412>
   10e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10e50:	2b00      	cmp	r3, #0
   10e52:	f47f ae01 	bne.w	10a58 <__ssvfscanf_r+0x984>
   10e56:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   10e5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   10e5e:	f47f adfb 	bne.w	10a58 <__ssvfscanf_r+0x984>
   10e62:	2301      	movs	r3, #1
   10e64:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   10e68:	63fb      	str	r3, [r7, #60]	; 0x3c
   10e6a:	f7ff bb3c 	b.w	104e6 <__ssvfscanf_r+0x412>
   10e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10e70:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   10e72:	185b      	adds	r3, r3, r1
   10e74:	f47f ae02 	bne.w	10a7c <__ssvfscanf_r+0x9a8>
   10e78:	e59c      	b.n	109b4 <__ssvfscanf_r+0x8e0>
   10e7a:	1c83      	adds	r3, r0, #2
   10e7c:	f040 845b 	bne.w	11736 <__ssvfscanf_r+0x1662>
   10e80:	f8db 3004 	ldr.w	r3, [fp, #4]
   10e84:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   10e86:	2b00      	cmp	r3, #0
   10e88:	f73f ad00 	bgt.w	1088c <__ssvfscanf_r+0x7b8>
   10e8c:	4659      	mov	r1, fp
   10e8e:	4648      	mov	r0, r9
   10e90:	f002 faca 	bl	13428 <__ssrefill_r>
   10e94:	2800      	cmp	r0, #0
   10e96:	f43f ad63 	beq.w	10960 <__ssvfscanf_r+0x88c>
   10e9a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   10e9e:	627e      	str	r6, [r7, #36]	; 0x24
   10ea0:	4644      	mov	r4, r8
   10ea2:	2d00      	cmp	r5, #0
   10ea4:	f43f ad63 	beq.w	1096e <__ssvfscanf_r+0x89a>
   10ea8:	f7ff ba00 	b.w	102ac <__ssvfscanf_r+0x1d8>
   10eac:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   10eb0:	4630      	mov	r0, r6
   10eb2:	4651      	mov	r1, sl
   10eb4:	f7fa f836 	bl	af24 <realloc>
   10eb8:	4606      	mov	r6, r0
   10eba:	2800      	cmp	r0, #0
   10ebc:	f000 8339 	beq.w	11532 <__ssvfscanf_r+0x145e>
   10ec0:	4405      	add	r5, r0
   10ec2:	f8c9 0000 	str.w	r0, [r9]
   10ec6:	e777      	b.n	10db8 <__ssvfscanf_r+0xce4>
   10ec8:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   10ecc:	4bbc      	ldr	r3, [pc, #752]	; (111c0 <__ssvfscanf_r+0x10ec>)
   10ece:	62fb      	str	r3, [r7, #44]	; 0x2c
   10ed0:	2310      	movs	r3, #16
   10ed2:	64f9      	str	r1, [r7, #76]	; 0x4c
   10ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   10ed6:	2503      	movs	r5, #3
   10ed8:	f7ff ba18 	b.w	1030c <__ssvfscanf_r+0x238>
   10edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10ede:	3301      	adds	r3, #1
   10ee0:	637b      	str	r3, [r7, #52]	; 0x34
   10ee2:	693b      	ldr	r3, [r7, #16]
   10ee4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   10ee8:	2b00      	cmp	r3, #0
   10eea:	f43f aafe 	beq.w	104ea <__ssvfscanf_r+0x416>
   10eee:	693b      	ldr	r3, [r7, #16]
   10ef0:	3b01      	subs	r3, #1
   10ef2:	613b      	str	r3, [r7, #16]
   10ef4:	f7ff bafa 	b.w	104ec <__ssvfscanf_r+0x418>
   10ef8:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   10efc:	f7ff bbd1 	b.w	106a2 <__ssvfscanf_r+0x5ce>
   10f00:	0722      	lsls	r2, r4, #28
   10f02:	f140 81c7 	bpl.w	11294 <__ssvfscanf_r+0x11c0>
   10f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10f08:	f853 2b04 	ldr.w	r2, [r3], #4
   10f0c:	633b      	str	r3, [r7, #48]	; 0x30
   10f0e:	7010      	strb	r0, [r2, #0]
   10f10:	f7ff bbf3 	b.w	106fa <__ssvfscanf_r+0x626>
   10f14:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   10f18:	465a      	mov	r2, fp
   10f1a:	4648      	mov	r0, r9
   10f1c:	3d01      	subs	r5, #1
   10f1e:	f002 fa43 	bl	133a8 <_sungetc_r>
   10f22:	f7ff bbd5 	b.w	106d0 <__ssvfscanf_r+0x5fc>
   10f26:	69fb      	ldr	r3, [r7, #28]
   10f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10f2a:	4293      	cmp	r3, r2
   10f2c:	f43f ab2d 	beq.w	1058a <__ssvfscanf_r+0x4b6>
   10f30:	1a9a      	subs	r2, r3, r2
   10f32:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
   10f36:	429d      	cmp	r5, r3
   10f38:	bf28      	it	cs
   10f3a:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
   10f3e:	49a1      	ldr	r1, [pc, #644]	; (111c4 <__ssvfscanf_r+0x10f0>)
   10f40:	4628      	mov	r0, r5
   10f42:	f7fb fab5 	bl	c4b0 <sprintf>
   10f46:	f7ff bb20 	b.w	1058a <__ssvfscanf_r+0x4b6>
   10f4a:	06e2      	lsls	r2, r4, #27
   10f4c:	f100 8131 	bmi.w	111b2 <__ssvfscanf_r+0x10de>
   10f50:	0723      	lsls	r3, r4, #28
   10f52:	f100 81ba 	bmi.w	112ca <__ssvfscanf_r+0x11f6>
   10f56:	0766      	lsls	r6, r4, #29
   10f58:	f140 82b4 	bpl.w	114c4 <__ssvfscanf_r+0x13f0>
   10f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10f5e:	64f9      	str	r1, [r7, #76]	; 0x4c
   10f60:	f853 2b04 	ldr.w	r2, [r3], #4
   10f64:	633b      	str	r3, [r7, #48]	; 0x30
   10f66:	f8a2 a000 	strh.w	sl, [r2]
   10f6a:	f7ff b8da 	b.w	10122 <__ssvfscanf_r+0x4e>
   10f6e:	0723      	lsls	r3, r4, #28
   10f70:	f47f a9a5 	bne.w	102be <__ssvfscanf_r+0x1ea>
   10f74:	7842      	ldrb	r2, [r0, #1]
   10f76:	2a68      	cmp	r2, #104	; 0x68
   10f78:	f000 8186 	beq.w	11288 <__ssvfscanf_r+0x11b4>
   10f7c:	f044 0404 	orr.w	r4, r4, #4
   10f80:	4608      	mov	r0, r1
   10f82:	f7ff b92f 	b.w	101e4 <__ssvfscanf_r+0x110>
   10f86:	4b8e      	ldr	r3, [pc, #568]	; (111c0 <__ssvfscanf_r+0x10ec>)
   10f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   10f8a:	230a      	movs	r3, #10
   10f8c:	64f9      	str	r1, [r7, #76]	; 0x4c
   10f8e:	63bb      	str	r3, [r7, #56]	; 0x38
   10f90:	2503      	movs	r5, #3
   10f92:	f7ff b9bb 	b.w	1030c <__ssvfscanf_r+0x238>
   10f96:	4b8c      	ldr	r3, [pc, #560]	; (111c8 <__ssvfscanf_r+0x10f4>)
   10f98:	62fb      	str	r3, [r7, #44]	; 0x2c
   10f9a:	2300      	movs	r3, #0
   10f9c:	64f9      	str	r1, [r7, #76]	; 0x4c
   10f9e:	63bb      	str	r3, [r7, #56]	; 0x38
   10fa0:	2503      	movs	r5, #3
   10fa2:	f7ff b9b3 	b.w	1030c <__ssvfscanf_r+0x238>
   10fa6:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   10faa:	e78f      	b.n	10ecc <__ssvfscanf_r+0xdf8>
   10fac:	f107 0070 	add.w	r0, r7, #112	; 0x70
   10fb0:	f000 fdde 	bl	11b70 <__sccl>
   10fb4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   10fb8:	64f8      	str	r0, [r7, #76]	; 0x4c
   10fba:	2501      	movs	r5, #1
   10fbc:	f7ff b9a6 	b.w	1030c <__ssvfscanf_r+0x238>
   10fc0:	0722      	lsls	r2, r4, #28
   10fc2:	f47f a97c 	bne.w	102be <__ssvfscanf_r+0x1ea>
   10fc6:	7842      	ldrb	r2, [r0, #1]
   10fc8:	2a6c      	cmp	r2, #108	; 0x6c
   10fca:	f000 8157 	beq.w	1127c <__ssvfscanf_r+0x11a8>
   10fce:	f044 0401 	orr.w	r4, r4, #1
   10fd2:	4608      	mov	r0, r1
   10fd4:	f7ff b906 	b.w	101e4 <__ssvfscanf_r+0x110>
   10fd8:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   10fdc:	f47f a96f 	bne.w	102be <__ssvfscanf_r+0x1ea>
   10fe0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10fe2:	2a00      	cmp	r2, #0
   10fe4:	f000 81e7 	beq.w	113b6 <__ssvfscanf_r+0x12e2>
   10fe8:	7842      	ldrb	r2, [r0, #1]
   10fea:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   10fee:	4608      	mov	r0, r1
   10ff0:	f7ff b8f8 	b.w	101e4 <__ssvfscanf_r+0x110>
   10ff4:	ea58 0804 	orrs.w	r8, r8, r4
   10ff8:	f47f a961 	bne.w	102be <__ssvfscanf_r+0x1ea>
   10ffc:	7842      	ldrb	r2, [r0, #1]
   10ffe:	2410      	movs	r4, #16
   11000:	4608      	mov	r0, r1
   11002:	f7ff b8ef 	b.w	101e4 <__ssvfscanf_r+0x110>
   11006:	64f9      	str	r1, [r7, #76]	; 0x4c
   11008:	f7ff b8a7 	b.w	1015a <__ssvfscanf_r+0x86>
   1100c:	2300      	movs	r3, #0
   1100e:	623b      	str	r3, [r7, #32]
   11010:	62bb      	str	r3, [r7, #40]	; 0x28
   11012:	63fb      	str	r3, [r7, #60]	; 0x3c
   11014:	f107 0354 	add.w	r3, r7, #84	; 0x54
   11018:	64bb      	str	r3, [r7, #72]	; 0x48
   1101a:	f7ff bba9 	b.w	10770 <__ssvfscanf_r+0x69c>
   1101e:	2300      	movs	r3, #0
   11020:	e9c7 3306 	strd	r3, r3, [r7, #24]
   11024:	623b      	str	r3, [r7, #32]
   11026:	f107 0454 	add.w	r4, r7, #84	; 0x54
   1102a:	e429      	b.n	10880 <__ssvfscanf_r+0x7ac>
   1102c:	f8db 3000 	ldr.w	r3, [fp]
   11030:	f107 0270 	add.w	r2, r7, #112	; 0x70
   11034:	4611      	mov	r1, r2
   11036:	781a      	ldrb	r2, [r3, #0]
   11038:	5c8a      	ldrb	r2, [r1, r2]
   1103a:	2a00      	cmp	r2, #0
   1103c:	f43f a93f 	beq.w	102be <__ssvfscanf_r+0x1ea>
   11040:	3301      	adds	r3, #1
   11042:	f8cb 3000 	str.w	r3, [fp]
   11046:	f8db 3004 	ldr.w	r3, [fp, #4]
   1104a:	f1b8 0f01 	cmp.w	r8, #1
   1104e:	f103 33ff 	add.w	r3, r3, #4294967295
   11052:	f8cb 3004 	str.w	r3, [fp, #4]
   11056:	bf18      	it	ne
   11058:	460c      	movne	r4, r1
   1105a:	d114      	bne.n	11086 <__ssvfscanf_r+0xfb2>
   1105c:	f7ff bb53 	b.w	10706 <__ssvfscanf_r+0x632>
   11060:	f8db 3000 	ldr.w	r3, [fp]
   11064:	781a      	ldrb	r2, [r3, #0]
   11066:	5ca2      	ldrb	r2, [r4, r2]
   11068:	3301      	adds	r3, #1
   1106a:	2a00      	cmp	r2, #0
   1106c:	f43f ab4b 	beq.w	10706 <__ssvfscanf_r+0x632>
   11070:	f8cb 3000 	str.w	r3, [fp]
   11074:	f8db 3004 	ldr.w	r3, [fp, #4]
   11078:	3501      	adds	r5, #1
   1107a:	3b01      	subs	r3, #1
   1107c:	4545      	cmp	r5, r8
   1107e:	f8cb 3004 	str.w	r3, [fp, #4]
   11082:	f43f ab40 	beq.w	10706 <__ssvfscanf_r+0x632>
   11086:	2b00      	cmp	r3, #0
   11088:	dcea      	bgt.n	11060 <__ssvfscanf_r+0xf8c>
   1108a:	4659      	mov	r1, fp
   1108c:	4648      	mov	r0, r9
   1108e:	f002 f9cb 	bl	13428 <__ssrefill_r>
   11092:	2800      	cmp	r0, #0
   11094:	d0e4      	beq.n	11060 <__ssvfscanf_r+0xf8c>
   11096:	44aa      	add	sl, r5
   11098:	f7ff b843 	b.w	10122 <__ssvfscanf_r+0x4e>
   1109c:	ee18 0a10 	vmov	r0, s16
   110a0:	4659      	mov	r1, fp
   110a2:	f002 f9c1 	bl	13428 <__ssrefill_r>
   110a6:	2800      	cmp	r0, #0
   110a8:	f43f ae8e 	beq.w	10dc8 <__ssvfscanf_r+0xcf4>
   110ac:	42b5      	cmp	r5, r6
   110ae:	4654      	mov	r4, sl
   110b0:	ee18 9a10 	vmov	r9, s16
   110b4:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   110b8:	f47f ae91 	bne.w	10dde <__ssvfscanf_r+0xd0a>
   110bc:	f7ff b8f6 	b.w	102ac <__ssvfscanf_r+0x1d8>
   110c0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   110c4:	e428      	b.n	10918 <__ssvfscanf_r+0x844>
   110c6:	6823      	ldr	r3, [r4, #0]
   110c8:	2b04      	cmp	r3, #4
   110ca:	f47f ac32 	bne.w	10932 <__ssvfscanf_r+0x85e>
   110ce:	e432      	b.n	10936 <__ssvfscanf_r+0x862>
   110d0:	1c83      	adds	r3, r0, #2
   110d2:	f040 8339 	bne.w	11748 <__ssvfscanf_r+0x1674>
   110d6:	f8db 3004 	ldr.w	r3, [fp, #4]
   110da:	2b00      	cmp	r3, #0
   110dc:	f340 81d7 	ble.w	1148e <__ssvfscanf_r+0x13ba>
   110e0:	f8db 3000 	ldr.w	r3, [fp]
   110e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   110e6:	781b      	ldrb	r3, [r3, #0]
   110e8:	5cd3      	ldrb	r3, [r2, r3]
   110ea:	0718      	lsls	r0, r3, #28
   110ec:	d403      	bmi.n	110f6 <__ssvfscanf_r+0x1022>
   110ee:	f1b8 0f00 	cmp.w	r8, #0
   110f2:	f47f ab49 	bne.w	10788 <__ssvfscanf_r+0x6b4>
   110f6:	627c      	str	r4, [r7, #36]	; 0x24
   110f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   110fa:	2b00      	cmp	r3, #0
   110fc:	f47f a811 	bne.w	10122 <__ssvfscanf_r+0x4e>
   11100:	6cba      	ldr	r2, [r7, #72]	; 0x48
   11102:	6013      	str	r3, [r2, #0]
   11104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11106:	2b00      	cmp	r3, #0
   11108:	f43f adfc 	beq.w	10d04 <__ssvfscanf_r+0xc30>
   1110c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1110e:	1ad1      	subs	r1, r2, r3
   11110:	108b      	asrs	r3, r1, #2
   11112:	6a3a      	ldr	r2, [r7, #32]
   11114:	3301      	adds	r3, #1
   11116:	429a      	cmp	r2, r3
   11118:	f67f adf4 	bls.w	10d04 <__ssvfscanf_r+0xc30>
   1111c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   1111e:	3104      	adds	r1, #4
   11120:	6820      	ldr	r0, [r4, #0]
   11122:	f7f9 feff 	bl	af24 <realloc>
   11126:	2800      	cmp	r0, #0
   11128:	f47f ac3a 	bne.w	109a0 <__ssvfscanf_r+0x8cc>
   1112c:	e5ea      	b.n	10d04 <__ssvfscanf_r+0xc30>
   1112e:	f853 2b04 	ldr.w	r2, [r3], #4
   11132:	ed82 0b00 	vstr	d0, [r2]
   11136:	633b      	str	r3, [r7, #48]	; 0x30
   11138:	e5e4      	b.n	10d04 <__ssvfscanf_r+0xc30>
   1113a:	68fd      	ldr	r5, [r7, #12]
   1113c:	6a39      	ldr	r1, [r7, #32]
   1113e:	687e      	ldr	r6, [r7, #4]
   11140:	4628      	mov	r0, r5
   11142:	4642      	mov	r2, r8
   11144:	46a3      	mov	fp, r4
   11146:	68bc      	ldr	r4, [r7, #8]
   11148:	f000 fd56 	bl	11bf8 <stpncpy>
   1114c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1114e:	61fb      	str	r3, [r7, #28]
   11150:	f424 7420 	bic.w	r4, r4, #640	; 0x280
   11154:	3e01      	subs	r6, #1
   11156:	4605      	mov	r5, r0
   11158:	f7ff b9c8 	b.w	104ec <__ssvfscanf_r+0x418>
   1115c:	69f8      	ldr	r0, [r7, #28]
   1115e:	00d9      	lsls	r1, r3, #3
   11160:	461d      	mov	r5, r3
   11162:	f7f9 fedf 	bl	af24 <realloc>
   11166:	61f8      	str	r0, [r7, #28]
   11168:	2800      	cmp	r0, #0
   1116a:	f000 8264 	beq.w	11636 <__ssvfscanf_r+0x1562>
   1116e:	6a3a      	ldr	r2, [r7, #32]
   11170:	006b      	lsls	r3, r5, #1
   11172:	eb00 0804 	add.w	r8, r0, r4
   11176:	6010      	str	r0, [r2, #0]
   11178:	61bb      	str	r3, [r7, #24]
   1117a:	f7ff bbea 	b.w	10952 <__ssvfscanf_r+0x87e>
   1117e:	2e02      	cmp	r6, #2
   11180:	f240 82c4 	bls.w	1170c <__ssvfscanf_r+0x1638>
   11184:	2e03      	cmp	r6, #3
   11186:	f43f a9d3 	beq.w	10530 <__ssvfscanf_r+0x45c>
   1118a:	3e04      	subs	r6, #4
   1118c:	fa5f f886 	uxtb.w	r8, r6
   11190:	ea6f 0308 	mvn.w	r3, r8
   11194:	18ee      	adds	r6, r5, r3
   11196:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1119a:	465a      	mov	r2, fp
   1119c:	4648      	mov	r0, r9
   1119e:	f002 f903 	bl	133a8 <_sungetc_r>
   111a2:	42ae      	cmp	r6, r5
   111a4:	d1f7      	bne.n	11196 <__ssvfscanf_r+0x10c2>
   111a6:	f10a 3aff 	add.w	sl, sl, #4294967295
   111aa:	ebaa 0a08 	sub.w	sl, sl, r8
   111ae:	f7ff b9bf 	b.w	10530 <__ssvfscanf_r+0x45c>
   111b2:	64f9      	str	r1, [r7, #76]	; 0x4c
   111b4:	f7fe bfb5 	b.w	10122 <__ssvfscanf_r+0x4e>
   111b8:	2303      	movs	r3, #3
   111ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   111bc:	f7ff b993 	b.w	104e6 <__ssvfscanf_r+0x412>
   111c0:	00012ced 	.word	0x00012ced
   111c4:	20000d50 	.word	0x20000d50
   111c8:	0000c2d9 	.word	0x0000c2d9
   111cc:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   111d0:	4293      	cmp	r3, r2
   111d2:	f200 8297 	bhi.w	11704 <__ssvfscanf_r+0x1630>
   111d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   111d8:	3308      	adds	r3, #8
   111da:	b29b      	uxth	r3, r3
   111dc:	6810      	ldr	r0, [r2, #0]
   111de:	63f8      	str	r0, [r7, #60]	; 0x3c
   111e0:	0099      	lsls	r1, r3, #2
   111e2:	637b      	str	r3, [r7, #52]	; 0x34
   111e4:	f7f9 fe9e 	bl	af24 <realloc>
   111e8:	2800      	cmp	r0, #0
   111ea:	f000 827b 	beq.w	116e4 <__ssvfscanf_r+0x1610>
   111ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   111f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   111f2:	8093      	strh	r3, [r2, #4]
   111f4:	6010      	str	r0, [r2, #0]
   111f6:	e542      	b.n	10c7e <__ssvfscanf_r+0xbaa>
   111f8:	2101      	movs	r1, #1
   111fa:	e57a      	b.n	10cf2 <__ssvfscanf_r+0xc1e>
   111fc:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   11200:	4293      	cmp	r3, r2
   11202:	f200 8293 	bhi.w	1172c <__ssvfscanf_r+0x1658>
   11206:	3308      	adds	r3, #8
   11208:	b29e      	uxth	r6, r3
   1120a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1120c:	00b1      	lsls	r1, r6, #2
   1120e:	6818      	ldr	r0, [r3, #0]
   11210:	f7f9 fe88 	bl	af24 <realloc>
   11214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11216:	2800      	cmp	r0, #0
   11218:	f000 823e 	beq.w	11698 <__ssvfscanf_r+0x15c4>
   1121c:	809e      	strh	r6, [r3, #4]
   1121e:	6018      	str	r0, [r3, #0]
   11220:	f7ff ba9b 	b.w	1075a <__ssvfscanf_r+0x686>
   11224:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   11228:	4293      	cmp	r3, r2
   1122a:	f200 827f 	bhi.w	1172c <__ssvfscanf_r+0x1658>
   1122e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11230:	3308      	adds	r3, #8
   11232:	b29b      	uxth	r3, r3
   11234:	0099      	lsls	r1, r3, #2
   11236:	6810      	ldr	r0, [r2, #0]
   11238:	64bb      	str	r3, [r7, #72]	; 0x48
   1123a:	f7f9 fe73 	bl	af24 <realloc>
   1123e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11240:	2800      	cmp	r0, #0
   11242:	f000 8228 	beq.w	11696 <__ssvfscanf_r+0x15c2>
   11246:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11248:	8093      	strh	r3, [r2, #4]
   1124a:	6010      	str	r0, [r2, #0]
   1124c:	f7ff bb0e 	b.w	1086c <__ssvfscanf_r+0x798>
   11250:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   11254:	4293      	cmp	r3, r2
   11256:	f200 8255 	bhi.w	11704 <__ssvfscanf_r+0x1630>
   1125a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1125c:	3308      	adds	r3, #8
   1125e:	b29b      	uxth	r3, r3
   11260:	6810      	ldr	r0, [r2, #0]
   11262:	63f8      	str	r0, [r7, #60]	; 0x3c
   11264:	0099      	lsls	r1, r3, #2
   11266:	637b      	str	r3, [r7, #52]	; 0x34
   11268:	f7f9 fe5c 	bl	af24 <realloc>
   1126c:	2800      	cmp	r0, #0
   1126e:	f000 8239 	beq.w	116e4 <__ssvfscanf_r+0x1610>
   11272:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11276:	8093      	strh	r3, [r2, #4]
   11278:	6010      	str	r0, [r2, #0]
   1127a:	e570      	b.n	10d5e <__ssvfscanf_r+0xc8a>
   1127c:	7882      	ldrb	r2, [r0, #2]
   1127e:	f044 0402 	orr.w	r4, r4, #2
   11282:	3002      	adds	r0, #2
   11284:	f7fe bfae 	b.w	101e4 <__ssvfscanf_r+0x110>
   11288:	7882      	ldrb	r2, [r0, #2]
   1128a:	f044 0408 	orr.w	r4, r4, #8
   1128e:	3002      	adds	r0, #2
   11290:	f7fe bfa8 	b.w	101e4 <__ssvfscanf_r+0x110>
   11294:	0763      	lsls	r3, r4, #29
   11296:	d458      	bmi.n	1134a <__ssvfscanf_r+0x1276>
   11298:	f014 0201 	ands.w	r2, r4, #1
   1129c:	f47f aa28 	bne.w	106f0 <__ssvfscanf_r+0x61c>
   112a0:	07a6      	lsls	r6, r4, #30
   112a2:	f57f aa25 	bpl.w	106f0 <__ssvfscanf_r+0x61c>
   112a6:	4bb3      	ldr	r3, [pc, #716]	; (11574 <__ssvfscanf_r+0x14a0>)
   112a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   112aa:	4299      	cmp	r1, r3
   112ac:	4648      	mov	r0, r9
   112ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   112b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   112b2:	f000 823d 	beq.w	11730 <__ssvfscanf_r+0x165c>
   112b6:	f001 fdd1 	bl	12e5c <_strtoll_r>
   112ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   112bc:	f853 2b04 	ldr.w	r2, [r3], #4
   112c0:	633b      	str	r3, [r7, #48]	; 0x30
   112c2:	e9c2 0100 	strd	r0, r1, [r2]
   112c6:	f7ff ba18 	b.w	106fa <__ssvfscanf_r+0x626>
   112ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   112cc:	64f9      	str	r1, [r7, #76]	; 0x4c
   112ce:	f853 2b04 	ldr.w	r2, [r3], #4
   112d2:	633b      	str	r3, [r7, #48]	; 0x30
   112d4:	f882 a000 	strb.w	sl, [r2]
   112d8:	f7fe bf23 	b.w	10122 <__ssvfscanf_r+0x4e>
   112dc:	f8db 3000 	ldr.w	r3, [fp]
   112e0:	4ea5      	ldr	r6, [pc, #660]	; (11578 <__ssvfscanf_r+0x14a4>)
   112e2:	781a      	ldrb	r2, [r3, #0]
   112e4:	5cb2      	ldrb	r2, [r6, r2]
   112e6:	0712      	lsls	r2, r2, #28
   112e8:	f53e af1b 	bmi.w	10122 <__ssvfscanf_r+0x4e>
   112ec:	3301      	adds	r3, #1
   112ee:	f8cb 3000 	str.w	r3, [fp]
   112f2:	f8db 3004 	ldr.w	r3, [fp, #4]
   112f6:	f1b8 0f01 	cmp.w	r8, #1
   112fa:	f103 33ff 	add.w	r3, r3, #4294967295
   112fe:	f8cb 3004 	str.w	r3, [fp, #4]
   11302:	bf08      	it	eq
   11304:	f10a 0a01 	addeq.w	sl, sl, #1
   11308:	f43e af0b 	beq.w	10122 <__ssvfscanf_r+0x4e>
   1130c:	2401      	movs	r4, #1
   1130e:	e011      	b.n	11334 <__ssvfscanf_r+0x1260>
   11310:	f8db 3000 	ldr.w	r3, [fp]
   11314:	781a      	ldrb	r2, [r3, #0]
   11316:	5cb2      	ldrb	r2, [r6, r2]
   11318:	0715      	lsls	r5, r2, #28
   1131a:	f103 0301 	add.w	r3, r3, #1
   1131e:	d411      	bmi.n	11344 <__ssvfscanf_r+0x1270>
   11320:	f8cb 3000 	str.w	r3, [fp]
   11324:	f8db 3004 	ldr.w	r3, [fp, #4]
   11328:	3401      	adds	r4, #1
   1132a:	3b01      	subs	r3, #1
   1132c:	4544      	cmp	r4, r8
   1132e:	f8cb 3004 	str.w	r3, [fp, #4]
   11332:	d007      	beq.n	11344 <__ssvfscanf_r+0x1270>
   11334:	2b00      	cmp	r3, #0
   11336:	dceb      	bgt.n	11310 <__ssvfscanf_r+0x123c>
   11338:	4659      	mov	r1, fp
   1133a:	4648      	mov	r0, r9
   1133c:	f002 f874 	bl	13428 <__ssrefill_r>
   11340:	2800      	cmp	r0, #0
   11342:	d0e5      	beq.n	11310 <__ssvfscanf_r+0x123c>
   11344:	44a2      	add	sl, r4
   11346:	f7fe beec 	b.w	10122 <__ssvfscanf_r+0x4e>
   1134a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1134c:	f853 2b04 	ldr.w	r2, [r3], #4
   11350:	633b      	str	r3, [r7, #48]	; 0x30
   11352:	8010      	strh	r0, [r2, #0]
   11354:	f7ff b9d1 	b.w	106fa <__ssvfscanf_r+0x626>
   11358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1135a:	2b00      	cmp	r3, #0
   1135c:	f000 816e 	beq.w	1163c <__ssvfscanf_r+0x1568>
   11360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11362:	f8d3 8000 	ldr.w	r8, [r3]
   11366:	88de      	ldrh	r6, [r3, #6]
   11368:	b176      	cbz	r6, 11388 <__ssvfscanf_r+0x12b4>
   1136a:	2400      	movs	r4, #0
   1136c:	f1a8 0504 	sub.w	r5, r8, #4
   11370:	46a1      	mov	r9, r4
   11372:	f855 3f04 	ldr.w	r3, [r5, #4]!
   11376:	6818      	ldr	r0, [r3, #0]
   11378:	f7f9 fb10 	bl	a99c <free>
   1137c:	3401      	adds	r4, #1
   1137e:	682b      	ldr	r3, [r5, #0]
   11380:	42a6      	cmp	r6, r4
   11382:	f8c3 9000 	str.w	r9, [r3]
   11386:	d1f4      	bne.n	11372 <__ssvfscanf_r+0x129e>
   11388:	f04f 33ff 	mov.w	r3, #4294967295
   1138c:	647b      	str	r3, [r7, #68]	; 0x44
   1138e:	f1b8 0f00 	cmp.w	r8, #0
   11392:	f47e af9c 	bne.w	102ce <__ssvfscanf_r+0x1fa>
   11396:	f7fe bf9d 	b.w	102d4 <__ssvfscanf_r+0x200>
   1139a:	4878      	ldr	r0, [pc, #480]	; (1157c <__ssvfscanf_r+0x14a8>)
   1139c:	633b      	str	r3, [r7, #48]	; 0x30
   1139e:	f7fb fde7 	bl	cf70 <nanf>
   113a2:	ed84 0a00 	vstr	s0, [r4]
   113a6:	e4ad      	b.n	10d04 <__ssvfscanf_r+0xc30>
   113a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   113aa:	63fc      	str	r4, [r7, #60]	; 0x3c
   113ac:	f852 5b04 	ldr.w	r5, [r2], #4
   113b0:	633a      	str	r2, [r7, #48]	; 0x30
   113b2:	64bc      	str	r4, [r7, #72]	; 0x48
   113b4:	e46c      	b.n	10c90 <__ssvfscanf_r+0xbbc>
   113b6:	b082      	sub	sp, #8
   113b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   113bc:	ab02      	add	r3, sp, #8
   113be:	643b      	str	r3, [r7, #64]	; 0x40
   113c0:	e612      	b.n	10fe8 <__ssvfscanf_r+0xf14>
   113c2:	637b      	str	r3, [r7, #52]	; 0x34
   113c4:	0053      	lsls	r3, r2, #1
   113c6:	4620      	mov	r0, r4
   113c8:	4619      	mov	r1, r3
   113ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   113cc:	f7f9 fdaa 	bl	af24 <realloc>
   113d0:	4604      	mov	r4, r0
   113d2:	2800      	cmp	r0, #0
   113d4:	f000 80ad 	beq.w	11532 <__ssvfscanf_r+0x145e>
   113d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   113da:	1985      	adds	r5, r0, r6
   113dc:	6018      	str	r0, [r3, #0]
   113de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   113e0:	e475      	b.n	10cce <__ssvfscanf_r+0xbfa>
   113e2:	697d      	ldr	r5, [r7, #20]
   113e4:	4629      	mov	r1, r5
   113e6:	230a      	movs	r3, #10
   113e8:	3101      	adds	r1, #1
   113ea:	4648      	mov	r0, r9
   113ec:	f7fa ff74 	bl	c2d8 <_strtol_r>
   113f0:	69bb      	ldr	r3, [r7, #24]
   113f2:	1ac2      	subs	r2, r0, r3
   113f4:	e59d      	b.n	10f32 <__ssvfscanf_r+0xe5e>
   113f6:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   113fa:	f853 1b04 	ldr.w	r1, [r3], #4
   113fe:	623a      	str	r2, [r7, #32]
   11400:	64b9      	str	r1, [r7, #72]	; 0x48
   11402:	633b      	str	r3, [r7, #48]	; 0x30
   11404:	62ba      	str	r2, [r7, #40]	; 0x28
   11406:	63fa      	str	r2, [r7, #60]	; 0x3c
   11408:	f7ff b9b2 	b.w	10770 <__ssvfscanf_r+0x69c>
   1140c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1140e:	64bc      	str	r4, [r7, #72]	; 0x48
   11410:	f853 5b04 	ldr.w	r5, [r3], #4
   11414:	633b      	str	r3, [r7, #48]	; 0x30
   11416:	e4aa      	b.n	10d6e <__ssvfscanf_r+0xc9a>
   11418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1141a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1141c:	f853 4b04 	ldr.w	r4, [r3], #4
   11420:	61ba      	str	r2, [r7, #24]
   11422:	e9c7 2207 	strd	r2, r2, [r7, #28]
   11426:	633b      	str	r3, [r7, #48]	; 0x30
   11428:	f7ff ba2a 	b.w	10880 <__ssvfscanf_r+0x7ac>
   1142c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1142e:	6820      	ldr	r0, [r4, #0]
   11430:	f7f9 fd78 	bl	af24 <realloc>
   11434:	2800      	cmp	r0, #0
   11436:	f47f aab3 	bne.w	109a0 <__ssvfscanf_r+0x8cc>
   1143a:	e463      	b.n	10d04 <__ssvfscanf_r+0xc30>
   1143c:	4659      	mov	r1, fp
   1143e:	4648      	mov	r0, r9
   11440:	637b      	str	r3, [r7, #52]	; 0x34
   11442:	f001 fff1 	bl	13428 <__ssrefill_r>
   11446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11448:	2800      	cmp	r0, #0
   1144a:	f43f ac49 	beq.w	10ce0 <__ssvfscanf_r+0xc0c>
   1144e:	e44d      	b.n	10cec <__ssvfscanf_r+0xc18>
   11450:	6818      	ldr	r0, [r3, #0]
   11452:	461c      	mov	r4, r3
   11454:	f7f9 fd66 	bl	af24 <realloc>
   11458:	2800      	cmp	r0, #0
   1145a:	f43f accc 	beq.w	10df6 <__ssvfscanf_r+0xd22>
   1145e:	6020      	str	r0, [r4, #0]
   11460:	e4c9      	b.n	10df6 <__ssvfscanf_r+0xd22>
   11462:	2500      	movs	r5, #0
   11464:	e637      	b.n	110d6 <__ssvfscanf_r+0x1002>
   11466:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   11468:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1146c:	627e      	str	r6, [r7, #36]	; 0x24
   1146e:	4644      	mov	r4, r8
   11470:	2d00      	cmp	r5, #0
   11472:	f43f aa7c 	beq.w	1096e <__ssvfscanf_r+0x89a>
   11476:	3d01      	subs	r5, #1
   11478:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   1147c:	465a      	mov	r2, fp
   1147e:	5d59      	ldrb	r1, [r3, r5]
   11480:	4648      	mov	r0, r9
   11482:	f001 ff91 	bl	133a8 <_sungetc_r>
   11486:	2d00      	cmp	r5, #0
   11488:	d1f5      	bne.n	11476 <__ssvfscanf_r+0x13a2>
   1148a:	f7ff ba70 	b.w	1096e <__ssvfscanf_r+0x89a>
   1148e:	4659      	mov	r1, fp
   11490:	4648      	mov	r0, r9
   11492:	f001 ffc9 	bl	13428 <__ssrefill_r>
   11496:	2800      	cmp	r0, #0
   11498:	f43f ae22 	beq.w	110e0 <__ssvfscanf_r+0x100c>
   1149c:	627c      	str	r4, [r7, #36]	; 0x24
   1149e:	2d00      	cmp	r5, #0
   114a0:	f47e af04 	bne.w	102ac <__ssvfscanf_r+0x1d8>
   114a4:	e628      	b.n	110f8 <__ssvfscanf_r+0x1024>
   114a6:	627c      	str	r4, [r7, #36]	; 0x24
   114a8:	2d00      	cmp	r5, #0
   114aa:	f43f ae25 	beq.w	110f8 <__ssvfscanf_r+0x1024>
   114ae:	3d01      	subs	r5, #1
   114b0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   114b4:	465a      	mov	r2, fp
   114b6:	5d59      	ldrb	r1, [r3, r5]
   114b8:	4648      	mov	r0, r9
   114ba:	f001 ff75 	bl	133a8 <_sungetc_r>
   114be:	2d00      	cmp	r5, #0
   114c0:	d1f5      	bne.n	114ae <__ssvfscanf_r+0x13da>
   114c2:	e619      	b.n	110f8 <__ssvfscanf_r+0x1024>
   114c4:	07e5      	lsls	r5, r4, #31
   114c6:	d43c      	bmi.n	11542 <__ssvfscanf_r+0x146e>
   114c8:	07a4      	lsls	r4, r4, #30
   114ca:	d53a      	bpl.n	11542 <__ssvfscanf_r+0x146e>
   114cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   114ce:	64f9      	str	r1, [r7, #76]	; 0x4c
   114d0:	f853 2b04 	ldr.w	r2, [r3], #4
   114d4:	633b      	str	r3, [r7, #48]	; 0x30
   114d6:	ea4f 73ea 	mov.w	r3, sl, asr #31
   114da:	f8c2 a000 	str.w	sl, [r2]
   114de:	6053      	str	r3, [r2, #4]
   114e0:	f7fe be1f 	b.w	10122 <__ssvfscanf_r+0x4e>
   114e4:	ee18 9a10 	vmov	r9, s16
   114e8:	461e      	mov	r6, r3
   114ea:	f7ff b814 	b.w	10516 <__ssvfscanf_r+0x442>
   114ee:	2301      	movs	r3, #1
   114f0:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   114f4:	64bb      	str	r3, [r7, #72]	; 0x48
   114f6:	f7fe bff6 	b.w	104e6 <__ssvfscanf_r+0x412>
   114fa:	f1b8 0f01 	cmp.w	r8, #1
   114fe:	bf38      	it	cc
   11500:	f04f 0801 	movcc.w	r8, #1
   11504:	f014 0301 	ands.w	r3, r4, #1
   11508:	d13a      	bne.n	11580 <__ssvfscanf_r+0x14ac>
   1150a:	06e5      	lsls	r5, r4, #27
   1150c:	f100 8136 	bmi.w	1177c <__ssvfscanf_r+0x16a8>
   11510:	0624      	lsls	r4, r4, #24
   11512:	f140 814c 	bpl.w	117ae <__ssvfscanf_r+0x16da>
   11516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11518:	f853 5b04 	ldr.w	r5, [r3], #4
   1151c:	64bb      	str	r3, [r7, #72]	; 0x48
   1151e:	2d00      	cmp	r5, #0
   11520:	f43e aecd 	beq.w	102be <__ssvfscanf_r+0x1ea>
   11524:	4640      	mov	r0, r8
   11526:	f7f9 fa31 	bl	a98c <malloc>
   1152a:	4603      	mov	r3, r0
   1152c:	2800      	cmp	r0, #0
   1152e:	f040 80dc 	bne.w	116ea <__ssvfscanf_r+0x1616>
   11532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11534:	2b00      	cmp	r3, #0
   11536:	f000 8081 	beq.w	1163c <__ssvfscanf_r+0x1568>
   1153a:	f8d3 8000 	ldr.w	r8, [r3]
   1153e:	88de      	ldrh	r6, [r3, #6]
   11540:	e712      	b.n	11368 <__ssvfscanf_r+0x1294>
   11542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11544:	64f9      	str	r1, [r7, #76]	; 0x4c
   11546:	f853 2b04 	ldr.w	r2, [r3], #4
   1154a:	f8c2 a000 	str.w	sl, [r2]
   1154e:	633b      	str	r3, [r7, #48]	; 0x30
   11550:	f7fe bde7 	b.w	10122 <__ssvfscanf_r+0x4e>
   11554:	462b      	mov	r3, r5
   11556:	6abd      	ldr	r5, [r7, #40]	; 0x28
   11558:	42ab      	cmp	r3, r5
   1155a:	f67e aeb0 	bls.w	102be <__ssvfscanf_r+0x1ea>
   1155e:	461c      	mov	r4, r3
   11560:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   11564:	465a      	mov	r2, fp
   11566:	4648      	mov	r0, r9
   11568:	f001 ff1e 	bl	133a8 <_sungetc_r>
   1156c:	42ac      	cmp	r4, r5
   1156e:	d1f7      	bne.n	11560 <__ssvfscanf_r+0x148c>
   11570:	f7fe bea5 	b.w	102be <__ssvfscanf_r+0x1ea>
   11574:	00012ced 	.word	0x00012ced
   11578:	20000d59 	.word	0x20000d59
   1157c:	200082d8 	.word	0x200082d8
   11580:	f014 0310 	ands.w	r3, r4, #16
   11584:	637b      	str	r3, [r7, #52]	; 0x34
   11586:	d05e      	beq.n	11646 <__ssvfscanf_r+0x1572>
   11588:	2500      	movs	r5, #0
   1158a:	63fd      	str	r5, [r7, #60]	; 0x3c
   1158c:	64bd      	str	r5, [r7, #72]	; 0x48
   1158e:	462e      	mov	r6, r5
   11590:	2400      	movs	r4, #0
   11592:	464b      	mov	r3, r9
   11594:	46c1      	mov	r9, r8
   11596:	46a8      	mov	r8, r5
   11598:	4625      	mov	r5, r4
   1159a:	461c      	mov	r4, r3
   1159c:	f7fb f9f8 	bl	c990 <__locale_mb_cur_max>
   115a0:	42a8      	cmp	r0, r5
   115a2:	f43e ae83 	beq.w	102ac <__ssvfscanf_r+0x1d8>
   115a6:	e9db 3200 	ldrd	r3, r2, [fp]
   115aa:	f813 1b01 	ldrb.w	r1, [r3], #1
   115ae:	3a01      	subs	r2, #1
   115b0:	e9cb 3200 	strd	r3, r2, [fp]
   115b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   115b6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   115ba:	2a03      	cmp	r2, #3
   115bc:	5541      	strb	r1, [r0, r5]
   115be:	f105 0301 	add.w	r3, r5, #1
   115c2:	f107 0568 	add.w	r5, r7, #104	; 0x68
   115c6:	d102      	bne.n	115ce <__ssvfscanf_r+0x14fa>
   115c8:	682a      	ldr	r2, [r5, #0]
   115ca:	2a04      	cmp	r2, #4
   115cc:	d006      	beq.n	115dc <__ssvfscanf_r+0x1508>
   115ce:	2208      	movs	r2, #8
   115d0:	2100      	movs	r1, #0
   115d2:	4628      	mov	r0, r5
   115d4:	62bb      	str	r3, [r7, #40]	; 0x28
   115d6:	f7fb f911 	bl	c7fc <memset>
   115da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   115dc:	9500      	str	r5, [sp, #0]
   115de:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   115e2:	4631      	mov	r1, r6
   115e4:	4620      	mov	r0, r4
   115e6:	62bb      	str	r3, [r7, #40]	; 0x28
   115e8:	f001 fd0a 	bl	13000 <_mbrtowc_r>
   115ec:	1c43      	adds	r3, r0, #1
   115ee:	6278      	str	r0, [r7, #36]	; 0x24
   115f0:	f43e ae5c 	beq.w	102ac <__ssvfscanf_r+0x1d8>
   115f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   115f6:	2800      	cmp	r0, #0
   115f8:	f040 8147 	bne.w	1188a <__ssvfscanf_r+0x17b6>
   115fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   115fe:	b902      	cbnz	r2, 11602 <__ssvfscanf_r+0x152e>
   11600:	6032      	str	r2, [r6, #0]
   11602:	449a      	add	sl, r3
   11604:	f109 39ff 	add.w	r9, r9, #4294967295
   11608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1160a:	2b00      	cmp	r3, #0
   1160c:	f040 8175 	bne.w	118fa <__ssvfscanf_r+0x1826>
   11610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11612:	2b00      	cmp	r3, #0
   11614:	f000 8170 	beq.w	118f8 <__ssvfscanf_r+0x1824>
   11618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1161a:	1af5      	subs	r5, r6, r3
   1161c:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   11620:	f200 816a 	bhi.w	118f8 <__ssvfscanf_r+0x1824>
   11624:	4618      	mov	r0, r3
   11626:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   1162a:	f7f9 fc7b 	bl	af24 <realloc>
   1162e:	63f8      	str	r0, [r7, #60]	; 0x3c
   11630:	2800      	cmp	r0, #0
   11632:	f040 815c 	bne.w	118ee <__ssvfscanf_r+0x181a>
   11636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11638:	2b00      	cmp	r3, #0
   1163a:	d12d      	bne.n	11698 <__ssvfscanf_r+0x15c4>
   1163c:	f04f 33ff 	mov.w	r3, #4294967295
   11640:	647b      	str	r3, [r7, #68]	; 0x44
   11642:	f7fe be47 	b.w	102d4 <__ssvfscanf_r+0x200>
   11646:	0622      	lsls	r2, r4, #24
   11648:	f140 808f 	bpl.w	1176a <__ssvfscanf_r+0x1696>
   1164c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   1164e:	f854 3b04 	ldr.w	r3, [r4], #4
   11652:	64bb      	str	r3, [r7, #72]	; 0x48
   11654:	2b00      	cmp	r3, #0
   11656:	f43e ae32 	beq.w	102be <__ssvfscanf_r+0x1ea>
   1165a:	2080      	movs	r0, #128	; 0x80
   1165c:	f7f9 f996 	bl	a98c <malloc>
   11660:	4606      	mov	r6, r0
   11662:	2800      	cmp	r0, #0
   11664:	d0e7      	beq.n	11636 <__ssvfscanf_r+0x1562>
   11666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11668:	6018      	str	r0, [r3, #0]
   1166a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1166c:	88dd      	ldrh	r5, [r3, #6]
   1166e:	889a      	ldrh	r2, [r3, #4]
   11670:	4295      	cmp	r5, r2
   11672:	f0c0 80b3 	bcc.w	117dc <__ssvfscanf_r+0x1708>
   11676:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   1167a:	428a      	cmp	r2, r1
   1167c:	d856      	bhi.n	1172c <__ssvfscanf_r+0x1658>
   1167e:	3208      	adds	r2, #8
   11680:	b293      	uxth	r3, r2
   11682:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11684:	63fb      	str	r3, [r7, #60]	; 0x3c
   11686:	0099      	lsls	r1, r3, #2
   11688:	6810      	ldr	r0, [r2, #0]
   1168a:	f7f9 fc4b 	bl	af24 <realloc>
   1168e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11690:	2800      	cmp	r0, #0
   11692:	f040 80ae 	bne.w	117f2 <__ssvfscanf_r+0x171e>
   11696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11698:	88db      	ldrh	r3, [r3, #6]
   1169a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1169c:	461e      	mov	r6, r3
   1169e:	f8d2 8000 	ldr.w	r8, [r2]
   116a2:	e661      	b.n	11368 <__ssvfscanf_r+0x1294>
   116a4:	462b      	mov	r3, r5
   116a6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   116a8:	42ab      	cmp	r3, r5
   116aa:	f67e ae08 	bls.w	102be <__ssvfscanf_r+0x1ea>
   116ae:	461c      	mov	r4, r3
   116b0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   116b4:	465a      	mov	r2, fp
   116b6:	4648      	mov	r0, r9
   116b8:	f001 fe76 	bl	133a8 <_sungetc_r>
   116bc:	42ac      	cmp	r4, r5
   116be:	d1f7      	bne.n	116b0 <__ssvfscanf_r+0x15dc>
   116c0:	f7fe bdfd 	b.w	102be <__ssvfscanf_r+0x1ea>
   116c4:	4610      	mov	r0, r2
   116c6:	00d9      	lsls	r1, r3, #3
   116c8:	461e      	mov	r6, r3
   116ca:	f7f9 fc2b 	bl	af24 <realloc>
   116ce:	62b8      	str	r0, [r7, #40]	; 0x28
   116d0:	2800      	cmp	r0, #0
   116d2:	d0b0      	beq.n	11636 <__ssvfscanf_r+0x1562>
   116d4:	1942      	adds	r2, r0, r5
   116d6:	64ba      	str	r2, [r7, #72]	; 0x48
   116d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   116da:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   116dc:	6010      	str	r0, [r2, #0]
   116de:	0073      	lsls	r3, r6, #1
   116e0:	623b      	str	r3, [r7, #32]
   116e2:	e4f8      	b.n	110d6 <__ssvfscanf_r+0x1002>
   116e4:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   116e8:	e63e      	b.n	11368 <__ssvfscanf_r+0x1294>
   116ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
   116ec:	6028      	str	r0, [r5, #0]
   116ee:	88ce      	ldrh	r6, [r1, #6]
   116f0:	888a      	ldrh	r2, [r1, #4]
   116f2:	4296      	cmp	r6, r2
   116f4:	f0c0 808e 	bcc.w	11814 <__ssvfscanf_r+0x1740>
   116f8:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   116fc:	428a      	cmp	r2, r1
   116fe:	6338      	str	r0, [r7, #48]	; 0x30
   11700:	f240 80a5 	bls.w	1184e <__ssvfscanf_r+0x177a>
   11704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11706:	f8d3 8000 	ldr.w	r8, [r3]
   1170a:	e62d      	b.n	11368 <__ssvfscanf_r+0x1294>
   1170c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1170e:	4295      	cmp	r5, r2
   11710:	f67e add5 	bls.w	102be <__ssvfscanf_r+0x1ea>
   11714:	462c      	mov	r4, r5
   11716:	6abd      	ldr	r5, [r7, #40]	; 0x28
   11718:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   1171c:	465a      	mov	r2, fp
   1171e:	4648      	mov	r0, r9
   11720:	f001 fe42 	bl	133a8 <_sungetc_r>
   11724:	42ac      	cmp	r4, r5
   11726:	d1f7      	bne.n	11718 <__ssvfscanf_r+0x1644>
   11728:	f7fe bdc9 	b.w	102be <__ssvfscanf_r+0x1ea>
   1172c:	462b      	mov	r3, r5
   1172e:	e7b4      	b.n	1169a <__ssvfscanf_r+0x15c6>
   11730:	f001 fc64 	bl	12ffc <_strtoull_r>
   11734:	e5c1      	b.n	112ba <__ssvfscanf_r+0x11e6>
   11736:	f8d8 3000 	ldr.w	r3, [r8]
   1173a:	461d      	mov	r5, r3
   1173c:	3301      	adds	r3, #1
   1173e:	f47f a8d5 	bne.w	108ec <__ssvfscanf_r+0x818>
   11742:	462a      	mov	r2, r5
   11744:	f7ff b8e8 	b.w	10918 <__ssvfscanf_r+0x844>
   11748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1174a:	6818      	ldr	r0, [r3, #0]
   1174c:	f001 fcb4 	bl	130b8 <iswspace>
   11750:	2800      	cmp	r0, #0
   11752:	f47f aea8 	bne.w	114a6 <__ssvfscanf_r+0x13d2>
   11756:	2c03      	cmp	r4, #3
   11758:	44aa      	add	sl, r5
   1175a:	f47f a849 	bne.w	107f0 <__ssvfscanf_r+0x71c>
   1175e:	6833      	ldr	r3, [r6, #0]
   11760:	2b04      	cmp	r3, #4
   11762:	f47f a845 	bne.w	107f0 <__ssvfscanf_r+0x71c>
   11766:	f7ff b845 	b.w	107f4 <__ssvfscanf_r+0x720>
   1176a:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   1176e:	f853 6b04 	ldr.w	r6, [r3], #4
   11772:	633b      	str	r3, [r7, #48]	; 0x30
   11774:	4615      	mov	r5, r2
   11776:	63fa      	str	r2, [r7, #60]	; 0x3c
   11778:	64ba      	str	r2, [r7, #72]	; 0x48
   1177a:	e709      	b.n	11590 <__ssvfscanf_r+0x14bc>
   1177c:	461c      	mov	r4, r3
   1177e:	f8db 3004 	ldr.w	r3, [fp, #4]
   11782:	4598      	cmp	r8, r3
   11784:	dd39      	ble.n	117fa <__ssvfscanf_r+0x1726>
   11786:	f8db 2000 	ldr.w	r2, [fp]
   1178a:	441a      	add	r2, r3
   1178c:	f8cb 2000 	str.w	r2, [fp]
   11790:	4659      	mov	r1, fp
   11792:	4648      	mov	r0, r9
   11794:	441c      	add	r4, r3
   11796:	eba8 0803 	sub.w	r8, r8, r3
   1179a:	f001 fe45 	bl	13428 <__ssrefill_r>
   1179e:	2800      	cmp	r0, #0
   117a0:	d0ed      	beq.n	1177e <__ssvfscanf_r+0x16aa>
   117a2:	2c00      	cmp	r4, #0
   117a4:	f43e ad82 	beq.w	102ac <__ssvfscanf_r+0x1d8>
   117a8:	44a2      	add	sl, r4
   117aa:	f7fe bcba 	b.w	10122 <__ssvfscanf_r+0x4e>
   117ae:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   117b0:	4643      	mov	r3, r8
   117b2:	6829      	ldr	r1, [r5, #0]
   117b4:	f8cd b000 	str.w	fp, [sp]
   117b8:	2201      	movs	r2, #1
   117ba:	4648      	mov	r0, r9
   117bc:	f001 fe52 	bl	13464 <_sfread_r>
   117c0:	4604      	mov	r4, r0
   117c2:	2800      	cmp	r0, #0
   117c4:	f43e ad72 	beq.w	102ac <__ssvfscanf_r+0x1d8>
   117c8:	3504      	adds	r5, #4
   117ca:	64bd      	str	r5, [r7, #72]	; 0x48
   117cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   117ce:	3301      	adds	r3, #1
   117d0:	647b      	str	r3, [r7, #68]	; 0x44
   117d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   117d4:	633b      	str	r3, [r7, #48]	; 0x30
   117d6:	44a2      	add	sl, r4
   117d8:	f7fe bca3 	b.w	10122 <__ssvfscanf_r+0x4e>
   117dc:	6818      	ldr	r0, [r3, #0]
   117de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   117e0:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   117e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   117e6:	633c      	str	r4, [r7, #48]	; 0x30
   117e8:	3501      	adds	r5, #1
   117ea:	80dd      	strh	r5, [r3, #6]
   117ec:	63fe      	str	r6, [r7, #60]	; 0x3c
   117ee:	2520      	movs	r5, #32
   117f0:	e6ce      	b.n	11590 <__ssvfscanf_r+0x14bc>
   117f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   117f4:	8093      	strh	r3, [r2, #4]
   117f6:	6010      	str	r0, [r2, #0]
   117f8:	e7f1      	b.n	117de <__ssvfscanf_r+0x170a>
   117fa:	eba3 0308 	sub.w	r3, r3, r8
   117fe:	f8cb 3004 	str.w	r3, [fp, #4]
   11802:	f8db 3000 	ldr.w	r3, [fp]
   11806:	4444      	add	r4, r8
   11808:	4443      	add	r3, r8
   1180a:	f8cb 3000 	str.w	r3, [fp]
   1180e:	44a2      	add	sl, r4
   11810:	f7fe bc87 	b.w	10122 <__ssvfscanf_r+0x4e>
   11814:	680a      	ldr	r2, [r1, #0]
   11816:	63fa      	str	r2, [r7, #60]	; 0x3c
   11818:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1181a:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   1181e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11820:	3601      	adds	r6, #1
   11822:	b2b6      	uxth	r6, r6
   11824:	80d6      	strh	r6, [r2, #6]
   11826:	4619      	mov	r1, r3
   11828:	f8cd b000 	str.w	fp, [sp]
   1182c:	4643      	mov	r3, r8
   1182e:	2201      	movs	r2, #1
   11830:	4648      	mov	r0, r9
   11832:	f001 fe17 	bl	13464 <_sfread_r>
   11836:	4604      	mov	r4, r0
   11838:	b1d8      	cbz	r0, 11872 <__ssvfscanf_r+0x179e>
   1183a:	4580      	cmp	r8, r0
   1183c:	d9c6      	bls.n	117cc <__ssvfscanf_r+0x16f8>
   1183e:	6828      	ldr	r0, [r5, #0]
   11840:	4621      	mov	r1, r4
   11842:	f7f9 fb6f 	bl	af24 <realloc>
   11846:	2800      	cmp	r0, #0
   11848:	d0c0      	beq.n	117cc <__ssvfscanf_r+0x16f8>
   1184a:	6028      	str	r0, [r5, #0]
   1184c:	e7be      	b.n	117cc <__ssvfscanf_r+0x16f8>
   1184e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11850:	3208      	adds	r2, #8
   11852:	b294      	uxth	r4, r2
   11854:	681a      	ldr	r2, [r3, #0]
   11856:	637a      	str	r2, [r7, #52]	; 0x34
   11858:	4610      	mov	r0, r2
   1185a:	00a1      	lsls	r1, r4, #2
   1185c:	f7f9 fb62 	bl	af24 <realloc>
   11860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   11862:	63f8      	str	r0, [r7, #60]	; 0x3c
   11864:	2800      	cmp	r0, #0
   11866:	d05b      	beq.n	11920 <__ssvfscanf_r+0x184c>
   11868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1186a:	809c      	strh	r4, [r3, #4]
   1186c:	6018      	str	r0, [r3, #0]
   1186e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11870:	e7d2      	b.n	11818 <__ssvfscanf_r+0x1744>
   11872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   11874:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   11878:	2b00      	cmp	r3, #0
   1187a:	f43f ad75 	beq.w	11368 <__ssvfscanf_r+0x1294>
   1187e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   11882:	065b      	lsls	r3, r3, #25
   11884:	f57e ad1d 	bpl.w	102c2 <__ssvfscanf_r+0x1ee>
   11888:	e56a      	b.n	11360 <__ssvfscanf_r+0x128c>
   1188a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1188c:	3202      	adds	r2, #2
   1188e:	d11d      	bne.n	118cc <__ssvfscanf_r+0x17f8>
   11890:	f8db 2004 	ldr.w	r2, [fp, #4]
   11894:	2a00      	cmp	r2, #0
   11896:	461d      	mov	r5, r3
   11898:	f73f ae80 	bgt.w	1159c <__ssvfscanf_r+0x14c8>
   1189c:	4659      	mov	r1, fp
   1189e:	4620      	mov	r0, r4
   118a0:	f001 fdc2 	bl	13428 <__ssrefill_r>
   118a4:	b9e0      	cbnz	r0, 118e0 <__ssvfscanf_r+0x180c>
   118a6:	f1b9 0f00 	cmp.w	r9, #0
   118aa:	f47f ae77 	bne.w	1159c <__ssvfscanf_r+0x14c8>
   118ae:	4645      	mov	r5, r8
   118b0:	46a1      	mov	r9, r4
   118b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   118b4:	b123      	cbz	r3, 118c0 <__ssvfscanf_r+0x17ec>
   118b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   118b8:	1af1      	subs	r1, r6, r3
   118ba:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   118be:	d827      	bhi.n	11910 <__ssvfscanf_r+0x183c>
   118c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   118c2:	2b00      	cmp	r3, #0
   118c4:	f47e ac2d 	bne.w	10122 <__ssvfscanf_r+0x4e>
   118c8:	f7ff ba1c 	b.w	10d04 <__ssvfscanf_r+0xc30>
   118cc:	449a      	add	sl, r3
   118ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   118d0:	2b03      	cmp	r3, #3
   118d2:	f47f ae97 	bne.w	11604 <__ssvfscanf_r+0x1530>
   118d6:	682b      	ldr	r3, [r5, #0]
   118d8:	2b04      	cmp	r3, #4
   118da:	f47f ae93 	bne.w	11604 <__ssvfscanf_r+0x1530>
   118de:	e693      	b.n	11608 <__ssvfscanf_r+0x1534>
   118e0:	46a1      	mov	r9, r4
   118e2:	462c      	mov	r4, r5
   118e4:	4645      	mov	r5, r8
   118e6:	2c00      	cmp	r4, #0
   118e8:	d0e3      	beq.n	118b2 <__ssvfscanf_r+0x17de>
   118ea:	f7fe bcdf 	b.w	102ac <__ssvfscanf_r+0x1d8>
   118ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
   118f0:	1946      	adds	r6, r0, r5
   118f2:	6010      	str	r0, [r2, #0]
   118f4:	ea4f 0848 	mov.w	r8, r8, lsl #1
   118f8:	3604      	adds	r6, #4
   118fa:	f8db 3004 	ldr.w	r3, [fp, #4]
   118fe:	2b00      	cmp	r3, #0
   11900:	f04f 0500 	mov.w	r5, #0
   11904:	ddca      	ble.n	1189c <__ssvfscanf_r+0x17c8>
   11906:	f1b9 0f00 	cmp.w	r9, #0
   1190a:	f47f ae47 	bne.w	1159c <__ssvfscanf_r+0x14c8>
   1190e:	e7ce      	b.n	118ae <__ssvfscanf_r+0x17da>
   11910:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   11912:	6820      	ldr	r0, [r4, #0]
   11914:	f7f9 fb06 	bl	af24 <realloc>
   11918:	2800      	cmp	r0, #0
   1191a:	d0d1      	beq.n	118c0 <__ssvfscanf_r+0x17ec>
   1191c:	6020      	str	r0, [r4, #0]
   1191e:	e7cf      	b.n	118c0 <__ssvfscanf_r+0x17ec>
   11920:	4690      	mov	r8, r2
   11922:	e521      	b.n	11368 <__ssvfscanf_r+0x1294>

00011924 <_fclose_r>:
   11924:	b570      	push	{r4, r5, r6, lr}
   11926:	2900      	cmp	r1, #0
   11928:	d04b      	beq.n	119c2 <_fclose_r+0x9e>
   1192a:	4606      	mov	r6, r0
   1192c:	460c      	mov	r4, r1
   1192e:	b110      	cbz	r0, 11936 <_fclose_r+0x12>
   11930:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11932:	2b00      	cmp	r3, #0
   11934:	d048      	beq.n	119c8 <_fclose_r+0xa4>
   11936:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11938:	07d8      	lsls	r0, r3, #31
   1193a:	d534      	bpl.n	119a6 <_fclose_r+0x82>
   1193c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11940:	2b00      	cmp	r3, #0
   11942:	d03e      	beq.n	119c2 <_fclose_r+0x9e>
   11944:	4621      	mov	r1, r4
   11946:	4630      	mov	r0, r6
   11948:	f000 f850 	bl	119ec <__sflush_r>
   1194c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1194e:	4605      	mov	r5, r0
   11950:	b133      	cbz	r3, 11960 <_fclose_r+0x3c>
   11952:	69e1      	ldr	r1, [r4, #28]
   11954:	4630      	mov	r0, r6
   11956:	4798      	blx	r3
   11958:	2800      	cmp	r0, #0
   1195a:	bfb8      	it	lt
   1195c:	f04f 35ff 	movlt.w	r5, #4294967295
   11960:	89a3      	ldrh	r3, [r4, #12]
   11962:	061a      	lsls	r2, r3, #24
   11964:	d43c      	bmi.n	119e0 <_fclose_r+0xbc>
   11966:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11968:	b141      	cbz	r1, 1197c <_fclose_r+0x58>
   1196a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1196e:	4299      	cmp	r1, r3
   11970:	d002      	beq.n	11978 <_fclose_r+0x54>
   11972:	4630      	mov	r0, r6
   11974:	f7fb fb96 	bl	d0a4 <_free_r>
   11978:	2300      	movs	r3, #0
   1197a:	6323      	str	r3, [r4, #48]	; 0x30
   1197c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1197e:	b121      	cbz	r1, 1198a <_fclose_r+0x66>
   11980:	4630      	mov	r0, r6
   11982:	f7fb fb8f 	bl	d0a4 <_free_r>
   11986:	2300      	movs	r3, #0
   11988:	6463      	str	r3, [r4, #68]	; 0x44
   1198a:	f7fa fd61 	bl	c450 <__sfp_lock_acquire>
   1198e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11990:	2200      	movs	r2, #0
   11992:	07db      	lsls	r3, r3, #31
   11994:	81a2      	strh	r2, [r4, #12]
   11996:	d51f      	bpl.n	119d8 <_fclose_r+0xb4>
   11998:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1199a:	f7fb f891 	bl	cac0 <__retarget_lock_close_recursive>
   1199e:	f7fa fd5d 	bl	c45c <__sfp_lock_release>
   119a2:	4628      	mov	r0, r5
   119a4:	bd70      	pop	{r4, r5, r6, pc}
   119a6:	89a3      	ldrh	r3, [r4, #12]
   119a8:	0599      	lsls	r1, r3, #22
   119aa:	d4cb      	bmi.n	11944 <_fclose_r+0x20>
   119ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   119ae:	f7fb f889 	bl	cac4 <__retarget_lock_acquire_recursive>
   119b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   119b6:	2b00      	cmp	r3, #0
   119b8:	d1c4      	bne.n	11944 <_fclose_r+0x20>
   119ba:	6e65      	ldr	r5, [r4, #100]	; 0x64
   119bc:	f015 0501 	ands.w	r5, r5, #1
   119c0:	d005      	beq.n	119ce <_fclose_r+0xaa>
   119c2:	2500      	movs	r5, #0
   119c4:	4628      	mov	r0, r5
   119c6:	bd70      	pop	{r4, r5, r6, pc}
   119c8:	f7fa fd24 	bl	c414 <__sinit>
   119cc:	e7b3      	b.n	11936 <_fclose_r+0x12>
   119ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
   119d0:	f7fb f87a 	bl	cac8 <__retarget_lock_release_recursive>
   119d4:	4628      	mov	r0, r5
   119d6:	bd70      	pop	{r4, r5, r6, pc}
   119d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   119da:	f7fb f875 	bl	cac8 <__retarget_lock_release_recursive>
   119de:	e7db      	b.n	11998 <_fclose_r+0x74>
   119e0:	6921      	ldr	r1, [r4, #16]
   119e2:	4630      	mov	r0, r6
   119e4:	f7fb fb5e 	bl	d0a4 <_free_r>
   119e8:	e7bd      	b.n	11966 <_fclose_r+0x42>
   119ea:	bf00      	nop

000119ec <__sflush_r>:
   119ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   119f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   119f4:	460c      	mov	r4, r1
   119f6:	0711      	lsls	r1, r2, #28
   119f8:	4680      	mov	r8, r0
   119fa:	d447      	bmi.n	11a8c <__sflush_r+0xa0>
   119fc:	6863      	ldr	r3, [r4, #4]
   119fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   11a02:	2b00      	cmp	r3, #0
   11a04:	81a2      	strh	r2, [r4, #12]
   11a06:	dd5e      	ble.n	11ac6 <__sflush_r+0xda>
   11a08:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   11a0a:	2d00      	cmp	r5, #0
   11a0c:	d058      	beq.n	11ac0 <__sflush_r+0xd4>
   11a0e:	2300      	movs	r3, #0
   11a10:	f8d8 6000 	ldr.w	r6, [r8]
   11a14:	f8c8 3000 	str.w	r3, [r8]
   11a18:	b293      	uxth	r3, r2
   11a1a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   11a1e:	d156      	bne.n	11ace <__sflush_r+0xe2>
   11a20:	2301      	movs	r3, #1
   11a22:	69e1      	ldr	r1, [r4, #28]
   11a24:	4640      	mov	r0, r8
   11a26:	47a8      	blx	r5
   11a28:	1c43      	adds	r3, r0, #1
   11a2a:	d067      	beq.n	11afc <__sflush_r+0x110>
   11a2c:	89a3      	ldrh	r3, [r4, #12]
   11a2e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   11a30:	075f      	lsls	r7, r3, #29
   11a32:	d505      	bpl.n	11a40 <__sflush_r+0x54>
   11a34:	6863      	ldr	r3, [r4, #4]
   11a36:	1ac0      	subs	r0, r0, r3
   11a38:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11a3a:	b10b      	cbz	r3, 11a40 <__sflush_r+0x54>
   11a3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   11a3e:	1ac0      	subs	r0, r0, r3
   11a40:	69e1      	ldr	r1, [r4, #28]
   11a42:	4602      	mov	r2, r0
   11a44:	2300      	movs	r3, #0
   11a46:	4640      	mov	r0, r8
   11a48:	47a8      	blx	r5
   11a4a:	1c41      	adds	r1, r0, #1
   11a4c:	d141      	bne.n	11ad2 <__sflush_r+0xe6>
   11a4e:	f8d8 3000 	ldr.w	r3, [r8]
   11a52:	2b00      	cmp	r3, #0
   11a54:	d03d      	beq.n	11ad2 <__sflush_r+0xe6>
   11a56:	2b1d      	cmp	r3, #29
   11a58:	d001      	beq.n	11a5e <__sflush_r+0x72>
   11a5a:	2b16      	cmp	r3, #22
   11a5c:	d156      	bne.n	11b0c <__sflush_r+0x120>
   11a5e:	89a3      	ldrh	r3, [r4, #12]
   11a60:	6922      	ldr	r2, [r4, #16]
   11a62:	6022      	str	r2, [r4, #0]
   11a64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   11a68:	2100      	movs	r1, #0
   11a6a:	6061      	str	r1, [r4, #4]
   11a6c:	81a3      	strh	r3, [r4, #12]
   11a6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11a70:	f8c8 6000 	str.w	r6, [r8]
   11a74:	b321      	cbz	r1, 11ac0 <__sflush_r+0xd4>
   11a76:	f104 0340 	add.w	r3, r4, #64	; 0x40
   11a7a:	4299      	cmp	r1, r3
   11a7c:	d002      	beq.n	11a84 <__sflush_r+0x98>
   11a7e:	4640      	mov	r0, r8
   11a80:	f7fb fb10 	bl	d0a4 <_free_r>
   11a84:	2000      	movs	r0, #0
   11a86:	6320      	str	r0, [r4, #48]	; 0x30
   11a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11a8c:	6926      	ldr	r6, [r4, #16]
   11a8e:	b1be      	cbz	r6, 11ac0 <__sflush_r+0xd4>
   11a90:	b293      	uxth	r3, r2
   11a92:	6825      	ldr	r5, [r4, #0]
   11a94:	6026      	str	r6, [r4, #0]
   11a96:	079a      	lsls	r2, r3, #30
   11a98:	bf0c      	ite	eq
   11a9a:	6963      	ldreq	r3, [r4, #20]
   11a9c:	2300      	movne	r3, #0
   11a9e:	1bad      	subs	r5, r5, r6
   11aa0:	60a3      	str	r3, [r4, #8]
   11aa2:	e00b      	b.n	11abc <__sflush_r+0xd0>
   11aa4:	462b      	mov	r3, r5
   11aa6:	4632      	mov	r2, r6
   11aa8:	69e1      	ldr	r1, [r4, #28]
   11aaa:	6a67      	ldr	r7, [r4, #36]	; 0x24
   11aac:	4640      	mov	r0, r8
   11aae:	47b8      	blx	r7
   11ab0:	f1b0 0c00 	subs.w	ip, r0, #0
   11ab4:	eba5 050c 	sub.w	r5, r5, ip
   11ab8:	4466      	add	r6, ip
   11aba:	dd17      	ble.n	11aec <__sflush_r+0x100>
   11abc:	2d00      	cmp	r5, #0
   11abe:	dcf1      	bgt.n	11aa4 <__sflush_r+0xb8>
   11ac0:	2000      	movs	r0, #0
   11ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11ac6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   11ac8:	2b00      	cmp	r3, #0
   11aca:	dc9d      	bgt.n	11a08 <__sflush_r+0x1c>
   11acc:	e7f8      	b.n	11ac0 <__sflush_r+0xd4>
   11ace:	6d20      	ldr	r0, [r4, #80]	; 0x50
   11ad0:	e7ae      	b.n	11a30 <__sflush_r+0x44>
   11ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11ad6:	6922      	ldr	r2, [r4, #16]
   11ad8:	6022      	str	r2, [r4, #0]
   11ada:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   11ade:	81a3      	strh	r3, [r4, #12]
   11ae0:	2200      	movs	r2, #0
   11ae2:	04db      	lsls	r3, r3, #19
   11ae4:	6062      	str	r2, [r4, #4]
   11ae6:	d5c2      	bpl.n	11a6e <__sflush_r+0x82>
   11ae8:	6520      	str	r0, [r4, #80]	; 0x50
   11aea:	e7c0      	b.n	11a6e <__sflush_r+0x82>
   11aec:	89a3      	ldrh	r3, [r4, #12]
   11aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11af2:	f04f 30ff 	mov.w	r0, #4294967295
   11af6:	81a3      	strh	r3, [r4, #12]
   11af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11afc:	f8d8 3000 	ldr.w	r3, [r8]
   11b00:	2b00      	cmp	r3, #0
   11b02:	d093      	beq.n	11a2c <__sflush_r+0x40>
   11b04:	2b1d      	cmp	r3, #29
   11b06:	d006      	beq.n	11b16 <__sflush_r+0x12a>
   11b08:	2b16      	cmp	r3, #22
   11b0a:	d004      	beq.n	11b16 <__sflush_r+0x12a>
   11b0c:	89a3      	ldrh	r3, [r4, #12]
   11b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11b12:	81a3      	strh	r3, [r4, #12]
   11b14:	e7d5      	b.n	11ac2 <__sflush_r+0xd6>
   11b16:	f8c8 6000 	str.w	r6, [r8]
   11b1a:	e7d1      	b.n	11ac0 <__sflush_r+0xd4>

00011b1c <_fflush_r>:
   11b1c:	b538      	push	{r3, r4, r5, lr}
   11b1e:	460c      	mov	r4, r1
   11b20:	4605      	mov	r5, r0
   11b22:	b108      	cbz	r0, 11b28 <_fflush_r+0xc>
   11b24:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11b26:	b303      	cbz	r3, 11b6a <_fflush_r+0x4e>
   11b28:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   11b2c:	b188      	cbz	r0, 11b52 <_fflush_r+0x36>
   11b2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11b30:	07db      	lsls	r3, r3, #31
   11b32:	d401      	bmi.n	11b38 <_fflush_r+0x1c>
   11b34:	0581      	lsls	r1, r0, #22
   11b36:	d50f      	bpl.n	11b58 <_fflush_r+0x3c>
   11b38:	4628      	mov	r0, r5
   11b3a:	4621      	mov	r1, r4
   11b3c:	f7ff ff56 	bl	119ec <__sflush_r>
   11b40:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11b42:	07da      	lsls	r2, r3, #31
   11b44:	4605      	mov	r5, r0
   11b46:	d402      	bmi.n	11b4e <_fflush_r+0x32>
   11b48:	89a3      	ldrh	r3, [r4, #12]
   11b4a:	059b      	lsls	r3, r3, #22
   11b4c:	d508      	bpl.n	11b60 <_fflush_r+0x44>
   11b4e:	4628      	mov	r0, r5
   11b50:	bd38      	pop	{r3, r4, r5, pc}
   11b52:	4605      	mov	r5, r0
   11b54:	4628      	mov	r0, r5
   11b56:	bd38      	pop	{r3, r4, r5, pc}
   11b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11b5a:	f7fa ffb3 	bl	cac4 <__retarget_lock_acquire_recursive>
   11b5e:	e7eb      	b.n	11b38 <_fflush_r+0x1c>
   11b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11b62:	f7fa ffb1 	bl	cac8 <__retarget_lock_release_recursive>
   11b66:	4628      	mov	r0, r5
   11b68:	bd38      	pop	{r3, r4, r5, pc}
   11b6a:	f7fa fc53 	bl	c414 <__sinit>
   11b6e:	e7db      	b.n	11b28 <_fflush_r+0xc>

00011b70 <__sccl>:
   11b70:	b570      	push	{r4, r5, r6, lr}
   11b72:	780c      	ldrb	r4, [r1, #0]
   11b74:	2c5e      	cmp	r4, #94	; 0x5e
   11b76:	4686      	mov	lr, r0
   11b78:	d01e      	beq.n	11bb8 <__sccl+0x48>
   11b7a:	2200      	movs	r2, #0
   11b7c:	1c48      	adds	r0, r1, #1
   11b7e:	4694      	mov	ip, r2
   11b80:	f10e 33ff 	add.w	r3, lr, #4294967295
   11b84:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   11b88:	f803 2f01 	strb.w	r2, [r3, #1]!
   11b8c:	428b      	cmp	r3, r1
   11b8e:	d1fb      	bne.n	11b88 <__sccl+0x18>
   11b90:	b184      	cbz	r4, 11bb4 <__sccl+0x44>
   11b92:	f08c 0101 	eor.w	r1, ip, #1
   11b96:	f80e 1004 	strb.w	r1, [lr, r4]
   11b9a:	1c45      	adds	r5, r0, #1
   11b9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   11ba0:	2b2d      	cmp	r3, #45	; 0x2d
   11ba2:	d00e      	beq.n	11bc2 <__sccl+0x52>
   11ba4:	2b5d      	cmp	r3, #93	; 0x5d
   11ba6:	d003      	beq.n	11bb0 <__sccl+0x40>
   11ba8:	b11b      	cbz	r3, 11bb2 <__sccl+0x42>
   11baa:	461c      	mov	r4, r3
   11bac:	4628      	mov	r0, r5
   11bae:	e7f2      	b.n	11b96 <__sccl+0x26>
   11bb0:	4628      	mov	r0, r5
   11bb2:	bd70      	pop	{r4, r5, r6, pc}
   11bb4:	3801      	subs	r0, #1
   11bb6:	bd70      	pop	{r4, r5, r6, pc}
   11bb8:	2201      	movs	r2, #1
   11bba:	784c      	ldrb	r4, [r1, #1]
   11bbc:	1c88      	adds	r0, r1, #2
   11bbe:	4694      	mov	ip, r2
   11bc0:	e7de      	b.n	11b80 <__sccl+0x10>
   11bc2:	f890 c001 	ldrb.w	ip, [r0, #1]
   11bc6:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   11bca:	d0ee      	beq.n	11baa <__sccl+0x3a>
   11bcc:	4564      	cmp	r4, ip
   11bce:	dcec      	bgt.n	11baa <__sccl+0x3a>
   11bd0:	1c66      	adds	r6, r4, #1
   11bd2:	3002      	adds	r0, #2
   11bd4:	eb0e 0206 	add.w	r2, lr, r6
   11bd8:	f802 1b01 	strb.w	r1, [r2], #1
   11bdc:	eba2 030e 	sub.w	r3, r2, lr
   11be0:	3b01      	subs	r3, #1
   11be2:	459c      	cmp	ip, r3
   11be4:	dcf8      	bgt.n	11bd8 <__sccl+0x68>
   11be6:	ebac 0304 	sub.w	r3, ip, r4
   11bea:	3b01      	subs	r3, #1
   11bec:	4564      	cmp	r4, ip
   11bee:	bfa8      	it	ge
   11bf0:	2300      	movge	r3, #0
   11bf2:	3502      	adds	r5, #2
   11bf4:	199c      	adds	r4, r3, r6
   11bf6:	e7d1      	b.n	11b9c <__sccl+0x2c>

00011bf8 <stpncpy>:
   11bf8:	ea41 0300 	orr.w	r3, r1, r0
   11bfc:	079b      	lsls	r3, r3, #30
   11bfe:	b430      	push	{r4, r5}
   11c00:	d101      	bne.n	11c06 <stpncpy+0xe>
   11c02:	2a03      	cmp	r2, #3
   11c04:	d80f      	bhi.n	11c26 <stpncpy+0x2e>
   11c06:	f101 3cff 	add.w	ip, r1, #4294967295
   11c0a:	e007      	b.n	11c1c <stpncpy+0x24>
   11c0c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   11c10:	f803 1b01 	strb.w	r1, [r3], #1
   11c14:	1e54      	subs	r4, r2, #1
   11c16:	b1c1      	cbz	r1, 11c4a <stpncpy+0x52>
   11c18:	4622      	mov	r2, r4
   11c1a:	4618      	mov	r0, r3
   11c1c:	4603      	mov	r3, r0
   11c1e:	2a00      	cmp	r2, #0
   11c20:	d1f4      	bne.n	11c0c <stpncpy+0x14>
   11c22:	bc30      	pop	{r4, r5}
   11c24:	4770      	bx	lr
   11c26:	460b      	mov	r3, r1
   11c28:	4619      	mov	r1, r3
   11c2a:	f853 5b04 	ldr.w	r5, [r3], #4
   11c2e:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   11c32:	ea24 0405 	bic.w	r4, r4, r5
   11c36:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   11c3a:	d1e4      	bne.n	11c06 <stpncpy+0xe>
   11c3c:	3a04      	subs	r2, #4
   11c3e:	2a03      	cmp	r2, #3
   11c40:	f840 5b04 	str.w	r5, [r0], #4
   11c44:	4619      	mov	r1, r3
   11c46:	d8ef      	bhi.n	11c28 <stpncpy+0x30>
   11c48:	e7dd      	b.n	11c06 <stpncpy+0xe>
   11c4a:	4402      	add	r2, r0
   11c4c:	2c00      	cmp	r4, #0
   11c4e:	d0e8      	beq.n	11c22 <stpncpy+0x2a>
   11c50:	f803 1b01 	strb.w	r1, [r3], #1
   11c54:	4293      	cmp	r3, r2
   11c56:	d1fb      	bne.n	11c50 <stpncpy+0x58>
   11c58:	bc30      	pop	{r4, r5}
   11c5a:	4770      	bx	lr

00011c5c <_localeconv_r>:
   11c5c:	4800      	ldr	r0, [pc, #0]	; (11c60 <_localeconv_r+0x4>)
   11c5e:	4770      	bx	lr
   11c60:	2000898c 	.word	0x2000898c
   11c64:	00000000 	.word	0x00000000

00011c68 <frexp>:
   11c68:	b430      	push	{r4, r5}
   11c6a:	b082      	sub	sp, #8
   11c6c:	ed8d 0b00 	vstr	d0, [sp]
   11c70:	9a01      	ldr	r2, [sp, #4]
   11c72:	4c19      	ldr	r4, [pc, #100]	; (11cd8 <frexp+0x70>)
   11c74:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   11c78:	2100      	movs	r1, #0
   11c7a:	42a3      	cmp	r3, r4
   11c7c:	6001      	str	r1, [r0, #0]
   11c7e:	dc21      	bgt.n	11cc4 <frexp+0x5c>
   11c80:	9c00      	ldr	r4, [sp, #0]
   11c82:	431c      	orrs	r4, r3
   11c84:	d01e      	beq.n	11cc4 <frexp+0x5c>
   11c86:	4c15      	ldr	r4, [pc, #84]	; (11cdc <frexp+0x74>)
   11c88:	4014      	ands	r4, r2
   11c8a:	b954      	cbnz	r4, 11ca2 <frexp+0x3a>
   11c8c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 11cd0 <frexp+0x68>
   11c90:	ee20 7b07 	vmul.f64	d7, d0, d7
   11c94:	ed8d 7b00 	vstr	d7, [sp]
   11c98:	9a01      	ldr	r2, [sp, #4]
   11c9a:	f06f 0135 	mvn.w	r1, #53	; 0x35
   11c9e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   11ca2:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   11ca6:	e9dd 4500 	ldrd	r4, r5, [sp]
   11caa:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   11cae:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   11cb2:	151b      	asrs	r3, r3, #20
   11cb4:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   11cb8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   11cbc:	e9cd 4500 	strd	r4, r5, [sp]
   11cc0:	440b      	add	r3, r1
   11cc2:	6003      	str	r3, [r0, #0]
   11cc4:	ed9d 0b00 	vldr	d0, [sp]
   11cc8:	b002      	add	sp, #8
   11cca:	bc30      	pop	{r4, r5}
   11ccc:	4770      	bx	lr
   11cce:	bf00      	nop
   11cd0:	00000000 	.word	0x00000000
   11cd4:	43500000 	.word	0x43500000
   11cd8:	7fefffff 	.word	0x7fefffff
   11cdc:	7ff00000 	.word	0x7ff00000

00011ce0 <__assert_func>:
   11ce0:	b500      	push	{lr}
   11ce2:	4c0b      	ldr	r4, [pc, #44]	; (11d10 <__assert_func+0x30>)
   11ce4:	6825      	ldr	r5, [r4, #0]
   11ce6:	4614      	mov	r4, r2
   11ce8:	68ee      	ldr	r6, [r5, #12]
   11cea:	461a      	mov	r2, r3
   11cec:	b085      	sub	sp, #20
   11cee:	4603      	mov	r3, r0
   11cf0:	460d      	mov	r5, r1
   11cf2:	b14c      	cbz	r4, 11d08 <__assert_func+0x28>
   11cf4:	4907      	ldr	r1, [pc, #28]	; (11d14 <__assert_func+0x34>)
   11cf6:	9500      	str	r5, [sp, #0]
   11cf8:	e9cd 1401 	strd	r1, r4, [sp, #4]
   11cfc:	4630      	mov	r0, r6
   11cfe:	4906      	ldr	r1, [pc, #24]	; (11d18 <__assert_func+0x38>)
   11d00:	f001 fabe 	bl	13280 <fiprintf>
   11d04:	f7f6 fcd6 	bl	86b4 <abort>
   11d08:	4904      	ldr	r1, [pc, #16]	; (11d1c <__assert_func+0x3c>)
   11d0a:	460c      	mov	r4, r1
   11d0c:	e7f3      	b.n	11cf6 <__assert_func+0x16>
   11d0e:	bf00      	nop
   11d10:	20008e24 	.word	0x20008e24
   11d14:	20000b3c 	.word	0x20000b3c
   11d18:	20000b4c 	.word	0x20000b4c
   11d1c:	200082d8 	.word	0x200082d8

00011d20 <_calloc_r>:
   11d20:	b538      	push	{r3, r4, r5, lr}
   11d22:	fba1 1402 	umull	r1, r4, r1, r2
   11d26:	bb8c      	cbnz	r4, 11d8c <_calloc_r+0x6c>
   11d28:	f7f8 fe40 	bl	a9ac <_malloc_r>
   11d2c:	4605      	mov	r5, r0
   11d2e:	b1e0      	cbz	r0, 11d6a <_calloc_r+0x4a>
   11d30:	f850 2c04 	ldr.w	r2, [r0, #-4]
   11d34:	f022 0203 	bic.w	r2, r2, #3
   11d38:	3a04      	subs	r2, #4
   11d3a:	2a24      	cmp	r2, #36	; 0x24
   11d3c:	d817      	bhi.n	11d6e <_calloc_r+0x4e>
   11d3e:	2a13      	cmp	r2, #19
   11d40:	d91a      	bls.n	11d78 <_calloc_r+0x58>
   11d42:	2a1b      	cmp	r2, #27
   11d44:	e9c0 4400 	strd	r4, r4, [r0]
   11d48:	d91d      	bls.n	11d86 <_calloc_r+0x66>
   11d4a:	2a24      	cmp	r2, #36	; 0x24
   11d4c:	bf14      	ite	ne
   11d4e:	f100 0210 	addne.w	r2, r0, #16
   11d52:	f100 0218 	addeq.w	r2, r0, #24
   11d56:	f04f 0300 	mov.w	r3, #0
   11d5a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   11d5e:	bf04      	itt	eq
   11d60:	6104      	streq	r4, [r0, #16]
   11d62:	6144      	streq	r4, [r0, #20]
   11d64:	e9c2 3300 	strd	r3, r3, [r2]
   11d68:	6093      	str	r3, [r2, #8]
   11d6a:	4628      	mov	r0, r5
   11d6c:	bd38      	pop	{r3, r4, r5, pc}
   11d6e:	4621      	mov	r1, r4
   11d70:	f7fa fd44 	bl	c7fc <memset>
   11d74:	4628      	mov	r0, r5
   11d76:	bd38      	pop	{r3, r4, r5, pc}
   11d78:	4602      	mov	r2, r0
   11d7a:	2300      	movs	r3, #0
   11d7c:	e9c2 3300 	strd	r3, r3, [r2]
   11d80:	6093      	str	r3, [r2, #8]
   11d82:	4628      	mov	r0, r5
   11d84:	bd38      	pop	{r3, r4, r5, pc}
   11d86:	f100 0208 	add.w	r2, r0, #8
   11d8a:	e7f6      	b.n	11d7a <_calloc_r+0x5a>
   11d8c:	f7fa fe6c 	bl	ca68 <__errno>
   11d90:	230c      	movs	r3, #12
   11d92:	2500      	movs	r5, #0
   11d94:	6003      	str	r3, [r0, #0]
   11d96:	e7e8      	b.n	11d6a <_calloc_r+0x4a>

00011d98 <quorem>:
   11d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d9c:	6903      	ldr	r3, [r0, #16]
   11d9e:	690c      	ldr	r4, [r1, #16]
   11da0:	42a3      	cmp	r3, r4
   11da2:	b083      	sub	sp, #12
   11da4:	f2c0 8087 	blt.w	11eb6 <quorem+0x11e>
   11da8:	3c01      	subs	r4, #1
   11daa:	f101 0514 	add.w	r5, r1, #20
   11dae:	00a3      	lsls	r3, r4, #2
   11db0:	f100 0814 	add.w	r8, r0, #20
   11db4:	9300      	str	r3, [sp, #0]
   11db6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   11dba:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   11dbe:	3301      	adds	r3, #1
   11dc0:	4681      	mov	r9, r0
   11dc2:	429a      	cmp	r2, r3
   11dc4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   11dc8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   11dcc:	9001      	str	r0, [sp, #4]
   11dce:	fbb2 f6f3 	udiv	r6, r2, r3
   11dd2:	d33b      	bcc.n	11e4c <quorem+0xb4>
   11dd4:	f04f 0c00 	mov.w	ip, #0
   11dd8:	46ae      	mov	lr, r5
   11dda:	4640      	mov	r0, r8
   11ddc:	46e2      	mov	sl, ip
   11dde:	4663      	mov	r3, ip
   11de0:	f85e bb04 	ldr.w	fp, [lr], #4
   11de4:	6802      	ldr	r2, [r0, #0]
   11de6:	fa1f fc8b 	uxth.w	ip, fp
   11dea:	fb06 330c 	mla	r3, r6, ip, r3
   11dee:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   11df2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   11df6:	fb06 cc0b 	mla	ip, r6, fp, ip
   11dfa:	b29b      	uxth	r3, r3
   11dfc:	ebaa 0303 	sub.w	r3, sl, r3
   11e00:	fa1f fa8c 	uxth.w	sl, ip
   11e04:	fa13 f382 	uxtah	r3, r3, r2
   11e08:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   11e0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   11e10:	b29b      	uxth	r3, r3
   11e12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   11e16:	4577      	cmp	r7, lr
   11e18:	f840 3b04 	str.w	r3, [r0], #4
   11e1c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   11e20:	ea4f 431c 	mov.w	r3, ip, lsr #16
   11e24:	d2dc      	bcs.n	11de0 <quorem+0x48>
   11e26:	9b00      	ldr	r3, [sp, #0]
   11e28:	f858 3003 	ldr.w	r3, [r8, r3]
   11e2c:	b973      	cbnz	r3, 11e4c <quorem+0xb4>
   11e2e:	9b01      	ldr	r3, [sp, #4]
   11e30:	3b04      	subs	r3, #4
   11e32:	4598      	cmp	r8, r3
   11e34:	d304      	bcc.n	11e40 <quorem+0xa8>
   11e36:	e007      	b.n	11e48 <quorem+0xb0>
   11e38:	4598      	cmp	r8, r3
   11e3a:	f104 34ff 	add.w	r4, r4, #4294967295
   11e3e:	d203      	bcs.n	11e48 <quorem+0xb0>
   11e40:	f853 2904 	ldr.w	r2, [r3], #-4
   11e44:	2a00      	cmp	r2, #0
   11e46:	d0f7      	beq.n	11e38 <quorem+0xa0>
   11e48:	f8c9 4010 	str.w	r4, [r9, #16]
   11e4c:	4648      	mov	r0, r9
   11e4e:	f7fc f933 	bl	e0b8 <__mcmp>
   11e52:	2800      	cmp	r0, #0
   11e54:	db2b      	blt.n	11eae <quorem+0x116>
   11e56:	3601      	adds	r6, #1
   11e58:	4641      	mov	r1, r8
   11e5a:	2300      	movs	r3, #0
   11e5c:	f855 0b04 	ldr.w	r0, [r5], #4
   11e60:	f8d1 c000 	ldr.w	ip, [r1]
   11e64:	b282      	uxth	r2, r0
   11e66:	1a9a      	subs	r2, r3, r2
   11e68:	0c03      	lsrs	r3, r0, #16
   11e6a:	fa12 f28c 	uxtah	r2, r2, ip
   11e6e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   11e72:	eb03 4322 	add.w	r3, r3, r2, asr #16
   11e76:	b292      	uxth	r2, r2
   11e78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   11e7c:	42af      	cmp	r7, r5
   11e7e:	f841 2b04 	str.w	r2, [r1], #4
   11e82:	ea4f 4323 	mov.w	r3, r3, asr #16
   11e86:	d2e9      	bcs.n	11e5c <quorem+0xc4>
   11e88:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   11e8c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   11e90:	b96a      	cbnz	r2, 11eae <quorem+0x116>
   11e92:	3b04      	subs	r3, #4
   11e94:	4598      	cmp	r8, r3
   11e96:	d304      	bcc.n	11ea2 <quorem+0x10a>
   11e98:	e007      	b.n	11eaa <quorem+0x112>
   11e9a:	4598      	cmp	r8, r3
   11e9c:	f104 34ff 	add.w	r4, r4, #4294967295
   11ea0:	d203      	bcs.n	11eaa <quorem+0x112>
   11ea2:	f853 2904 	ldr.w	r2, [r3], #-4
   11ea6:	2a00      	cmp	r2, #0
   11ea8:	d0f7      	beq.n	11e9a <quorem+0x102>
   11eaa:	f8c9 4010 	str.w	r4, [r9, #16]
   11eae:	4630      	mov	r0, r6
   11eb0:	b003      	add	sp, #12
   11eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11eb6:	2000      	movs	r0, #0
   11eb8:	b003      	add	sp, #12
   11eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ebe:	bf00      	nop

00011ec0 <_dtoa_r>:
   11ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ec4:	ed2d 8b02 	vpush	{d8}
   11ec8:	b08f      	sub	sp, #60	; 0x3c
   11eca:	ed8d 0b02 	vstr	d0, [sp, #8]
   11ece:	9101      	str	r1, [sp, #4]
   11ed0:	6b81      	ldr	r1, [r0, #56]	; 0x38
   11ed2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   11ed4:	9305      	str	r3, [sp, #20]
   11ed6:	ec57 6b10 	vmov	r6, r7, d0
   11eda:	4604      	mov	r4, r0
   11edc:	4693      	mov	fp, r2
   11ede:	b141      	cbz	r1, 11ef2 <_dtoa_r+0x32>
   11ee0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   11ee2:	604a      	str	r2, [r1, #4]
   11ee4:	2301      	movs	r3, #1
   11ee6:	4093      	lsls	r3, r2
   11ee8:	608b      	str	r3, [r1, #8]
   11eea:	f7fb fe2d 	bl	db48 <_Bfree>
   11eee:	2300      	movs	r3, #0
   11ef0:	63a3      	str	r3, [r4, #56]	; 0x38
   11ef2:	f1b7 0800 	subs.w	r8, r7, #0
   11ef6:	bfb4      	ite	lt
   11ef8:	2301      	movlt	r3, #1
   11efa:	2300      	movge	r3, #0
   11efc:	602b      	str	r3, [r5, #0]
   11efe:	4bbe      	ldr	r3, [pc, #760]	; (121f8 <_dtoa_r+0x338>)
   11f00:	bfbc      	itt	lt
   11f02:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   11f06:	f8cd 800c 	strlt.w	r8, [sp, #12]
   11f0a:	ea33 0308 	bics.w	r3, r3, r8
   11f0e:	f000 809f 	beq.w	12050 <_dtoa_r+0x190>
   11f12:	ed9d 8b02 	vldr	d8, [sp, #8]
   11f16:	eeb5 8b40 	vcmp.f64	d8, #0.0
   11f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11f1e:	d111      	bne.n	11f44 <_dtoa_r+0x84>
   11f20:	9a05      	ldr	r2, [sp, #20]
   11f22:	2301      	movs	r3, #1
   11f24:	6013      	str	r3, [r2, #0]
   11f26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11f28:	2b00      	cmp	r3, #0
   11f2a:	f000 823f 	beq.w	123ac <_dtoa_r+0x4ec>
   11f2e:	4bb3      	ldr	r3, [pc, #716]	; (121fc <_dtoa_r+0x33c>)
   11f30:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11f32:	6013      	str	r3, [r2, #0]
   11f34:	3b01      	subs	r3, #1
   11f36:	9300      	str	r3, [sp, #0]
   11f38:	9800      	ldr	r0, [sp, #0]
   11f3a:	b00f      	add	sp, #60	; 0x3c
   11f3c:	ecbd 8b02 	vpop	{d8}
   11f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f44:	aa0c      	add	r2, sp, #48	; 0x30
   11f46:	a90d      	add	r1, sp, #52	; 0x34
   11f48:	4620      	mov	r0, r4
   11f4a:	eeb0 0b48 	vmov.f64	d0, d8
   11f4e:	f7fc fa13 	bl	e378 <__d2b>
   11f52:	ea5f 5318 	movs.w	r3, r8, lsr #20
   11f56:	4605      	mov	r5, r0
   11f58:	f040 8092 	bne.w	12080 <_dtoa_r+0x1c0>
   11f5c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   11f60:	440b      	add	r3, r1
   11f62:	f203 4232 	addw	r2, r3, #1074	; 0x432
   11f66:	2a20      	cmp	r2, #32
   11f68:	f340 82fa 	ble.w	12560 <_dtoa_r+0x6a0>
   11f6c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   11f70:	fa08 f802 	lsl.w	r8, r8, r2
   11f74:	f203 4212 	addw	r2, r3, #1042	; 0x412
   11f78:	40d6      	lsrs	r6, r2
   11f7a:	ea48 0206 	orr.w	r2, r8, r6
   11f7e:	ee07 2a10 	vmov	s14, r2
   11f82:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   11f86:	1e58      	subs	r0, r3, #1
   11f88:	ee17 6a90 	vmov	r6, s15
   11f8c:	ec53 2b17 	vmov	r2, r3, d7
   11f90:	f04f 0a01 	mov.w	sl, #1
   11f94:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   11f98:	ed9f 3b91 	vldr	d3, [pc, #580]	; 121e0 <_dtoa_r+0x320>
   11f9c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 121e8 <_dtoa_r+0x328>
   11fa0:	ed9f 5b93 	vldr	d5, [pc, #588]	; 121f0 <_dtoa_r+0x330>
   11fa4:	ee06 0a90 	vmov	s13, r0
   11fa8:	ec43 2b12 	vmov	d2, r2, r3
   11fac:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   11fb0:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   11fb4:	ee32 6b46 	vsub.f64	d6, d2, d6
   11fb8:	eea6 7b03 	vfma.f64	d7, d6, d3
   11fbc:	eea4 7b05 	vfma.f64	d7, d4, d5
   11fc0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   11fc4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   11fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11fcc:	ee16 7a90 	vmov	r7, s13
   11fd0:	d508      	bpl.n	11fe4 <_dtoa_r+0x124>
   11fd2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   11fd6:	eeb4 6b47 	vcmp.f64	d6, d7
   11fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11fde:	bf18      	it	ne
   11fe0:	f107 37ff 	addne.w	r7, r7, #4294967295
   11fe4:	2f16      	cmp	r7, #22
   11fe6:	f200 8145 	bhi.w	12274 <_dtoa_r+0x3b4>
   11fea:	4b85      	ldr	r3, [pc, #532]	; (12200 <_dtoa_r+0x340>)
   11fec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   11ff0:	ed93 7b00 	vldr	d7, [r3]
   11ff4:	eeb4 8bc7 	vcmpe.f64	d8, d7
   11ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11ffc:	d557      	bpl.n	120ae <_dtoa_r+0x1ee>
   11ffe:	1a09      	subs	r1, r1, r0
   12000:	2300      	movs	r3, #0
   12002:	f1b1 0801 	subs.w	r8, r1, #1
   12006:	f107 37ff 	add.w	r7, r7, #4294967295
   1200a:	930a      	str	r3, [sp, #40]	; 0x28
   1200c:	f100 8139 	bmi.w	12282 <_dtoa_r+0x3c2>
   12010:	2300      	movs	r3, #0
   12012:	9306      	str	r3, [sp, #24]
   12014:	2f00      	cmp	r7, #0
   12016:	da52      	bge.n	120be <_dtoa_r+0x1fe>
   12018:	9b06      	ldr	r3, [sp, #24]
   1201a:	9704      	str	r7, [sp, #16]
   1201c:	1bdb      	subs	r3, r3, r7
   1201e:	9306      	str	r3, [sp, #24]
   12020:	427b      	negs	r3, r7
   12022:	9308      	str	r3, [sp, #32]
   12024:	9b01      	ldr	r3, [sp, #4]
   12026:	2b09      	cmp	r3, #9
   12028:	f04f 0700 	mov.w	r7, #0
   1202c:	d84e      	bhi.n	120cc <_dtoa_r+0x20c>
   1202e:	2b05      	cmp	r3, #5
   12030:	f340 829d 	ble.w	1256e <_dtoa_r+0x6ae>
   12034:	3b04      	subs	r3, #4
   12036:	9301      	str	r3, [sp, #4]
   12038:	2600      	movs	r6, #0
   1203a:	9b01      	ldr	r3, [sp, #4]
   1203c:	1e9a      	subs	r2, r3, #2
   1203e:	2a03      	cmp	r2, #3
   12040:	f200 8125 	bhi.w	1228e <_dtoa_r+0x3ce>
   12044:	e8df f012 	tbh	[pc, r2, lsl #1]
   12048:	03a703aa 	.word	0x03a703aa
   1204c:	037e039d 	.word	0x037e039d
   12050:	9a05      	ldr	r2, [sp, #20]
   12052:	f3c8 0813 	ubfx	r8, r8, #0, #20
   12056:	f242 730f 	movw	r3, #9999	; 0x270f
   1205a:	ea58 0806 	orrs.w	r8, r8, r6
   1205e:	6013      	str	r3, [r2, #0]
   12060:	d11e      	bne.n	120a0 <_dtoa_r+0x1e0>
   12062:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   12064:	2b00      	cmp	r3, #0
   12066:	f000 8591 	beq.w	12b8c <_dtoa_r+0xccc>
   1206a:	4b66      	ldr	r3, [pc, #408]	; (12204 <_dtoa_r+0x344>)
   1206c:	9300      	str	r3, [sp, #0]
   1206e:	3308      	adds	r3, #8
   12070:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   12072:	9800      	ldr	r0, [sp, #0]
   12074:	6013      	str	r3, [r2, #0]
   12076:	b00f      	add	sp, #60	; 0x3c
   12078:	ecbd 8b02 	vpop	{d8}
   1207c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12080:	ee18 6a90 	vmov	r6, s17
   12084:	f3c6 0613 	ubfx	r6, r6, #0, #20
   12088:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   1208c:	ec53 2b18 	vmov	r2, r3, d8
   12090:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   12094:	990c      	ldr	r1, [sp, #48]	; 0x30
   12096:	f04f 0a00 	mov.w	sl, #0
   1209a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1209e:	e77b      	b.n	11f98 <_dtoa_r+0xd8>
   120a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   120a2:	2b00      	cmp	r3, #0
   120a4:	f040 833b 	bne.w	1271e <_dtoa_r+0x85e>
   120a8:	4b57      	ldr	r3, [pc, #348]	; (12208 <_dtoa_r+0x348>)
   120aa:	9300      	str	r3, [sp, #0]
   120ac:	e744      	b.n	11f38 <_dtoa_r+0x78>
   120ae:	1a09      	subs	r1, r1, r0
   120b0:	2300      	movs	r3, #0
   120b2:	f1b1 0801 	subs.w	r8, r1, #1
   120b6:	930a      	str	r3, [sp, #40]	; 0x28
   120b8:	f100 80e3 	bmi.w	12282 <_dtoa_r+0x3c2>
   120bc:	9306      	str	r3, [sp, #24]
   120be:	2300      	movs	r3, #0
   120c0:	9308      	str	r3, [sp, #32]
   120c2:	9b01      	ldr	r3, [sp, #4]
   120c4:	9704      	str	r7, [sp, #16]
   120c6:	2b09      	cmp	r3, #9
   120c8:	44b8      	add	r8, r7
   120ca:	d9b0      	bls.n	1202e <_dtoa_r+0x16e>
   120cc:	2300      	movs	r3, #0
   120ce:	2601      	movs	r6, #1
   120d0:	9301      	str	r3, [sp, #4]
   120d2:	9607      	str	r6, [sp, #28]
   120d4:	f04f 39ff 	mov.w	r9, #4294967295
   120d8:	469b      	mov	fp, r3
   120da:	2100      	movs	r1, #0
   120dc:	63e1      	str	r1, [r4, #60]	; 0x3c
   120de:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   120e2:	4620      	mov	r0, r4
   120e4:	f7fb fd0a 	bl	dafc <_Balloc>
   120e8:	9000      	str	r0, [sp, #0]
   120ea:	2800      	cmp	r0, #0
   120ec:	f000 8540 	beq.w	12b70 <_dtoa_r+0xcb0>
   120f0:	9b00      	ldr	r3, [sp, #0]
   120f2:	63a3      	str	r3, [r4, #56]	; 0x38
   120f4:	f1b9 0f0e 	cmp.w	r9, #14
   120f8:	f200 80dc 	bhi.w	122b4 <_dtoa_r+0x3f4>
   120fc:	2e00      	cmp	r6, #0
   120fe:	f000 80d9 	beq.w	122b4 <_dtoa_r+0x3f4>
   12102:	9b04      	ldr	r3, [sp, #16]
   12104:	2b00      	cmp	r3, #0
   12106:	f340 83de 	ble.w	128c6 <_dtoa_r+0xa06>
   1210a:	4a3d      	ldr	r2, [pc, #244]	; (12200 <_dtoa_r+0x340>)
   1210c:	f003 010f 	and.w	r1, r3, #15
   12110:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   12114:	ed92 7b00 	vldr	d7, [r2]
   12118:	111a      	asrs	r2, r3, #4
   1211a:	05db      	lsls	r3, r3, #23
   1211c:	f140 8382 	bpl.w	12824 <_dtoa_r+0x964>
   12120:	493a      	ldr	r1, [pc, #232]	; (1220c <_dtoa_r+0x34c>)
   12122:	ed91 6b08 	vldr	d6, [r1, #32]
   12126:	f002 020f 	and.w	r2, r2, #15
   1212a:	2003      	movs	r0, #3
   1212c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   12130:	b15a      	cbz	r2, 1214a <_dtoa_r+0x28a>
   12132:	4936      	ldr	r1, [pc, #216]	; (1220c <_dtoa_r+0x34c>)
   12134:	07d6      	lsls	r6, r2, #31
   12136:	d504      	bpl.n	12142 <_dtoa_r+0x282>
   12138:	ed91 6b00 	vldr	d6, [r1]
   1213c:	3001      	adds	r0, #1
   1213e:	ee27 7b06 	vmul.f64	d7, d7, d6
   12142:	1052      	asrs	r2, r2, #1
   12144:	f101 0108 	add.w	r1, r1, #8
   12148:	d1f4      	bne.n	12134 <_dtoa_r+0x274>
   1214a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   1214e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12150:	b13b      	cbz	r3, 12162 <_dtoa_r+0x2a2>
   12152:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   12156:	eeb4 6bc7 	vcmpe.f64	d6, d7
   1215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1215e:	f100 84ae 	bmi.w	12abe <_dtoa_r+0xbfe>
   12162:	ee07 0a90 	vmov	s15, r0
   12166:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   1216a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   1216e:	eea5 7b06 	vfma.f64	d7, d5, d6
   12172:	ee17 2a90 	vmov	r2, s15
   12176:	ec51 0b17 	vmov	r0, r1, d7
   1217a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   1217e:	f1b9 0f00 	cmp.w	r9, #0
   12182:	f000 8388 	beq.w	12896 <_dtoa_r+0x9d6>
   12186:	9e04      	ldr	r6, [sp, #16]
   12188:	464a      	mov	r2, r9
   1218a:	9b07      	ldr	r3, [sp, #28]
   1218c:	2b00      	cmp	r3, #0
   1218e:	f000 8447 	beq.w	12a20 <_dtoa_r+0xb60>
   12192:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   12196:	4b1a      	ldr	r3, [pc, #104]	; (12200 <_dtoa_r+0x340>)
   12198:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   1219c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   121a0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   121a4:	ee36 7b47 	vsub.f64	d7, d6, d7
   121a8:	ed1c 6b02 	vldr	d6, [ip, #-8]
   121ac:	ee83 5b06 	vdiv.f64	d5, d3, d6
   121b0:	ec41 0b16 	vmov	d6, r0, r1
   121b4:	ee14 0a90 	vmov	r0, s9
   121b8:	ee35 5b46 	vsub.f64	d5, d5, d6
   121bc:	9900      	ldr	r1, [sp, #0]
   121be:	eeb4 5bc7 	vcmpe.f64	d5, d7
   121c2:	3030      	adds	r0, #48	; 0x30
   121c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   121c8:	f801 0b01 	strb.w	r0, [r1], #1
   121cc:	f300 84ac 	bgt.w	12b28 <_dtoa_r+0xc68>
   121d0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   121d4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   121d8:	f04f 0c00 	mov.w	ip, #0
   121dc:	e031      	b.n	12242 <_dtoa_r+0x382>
   121de:	bf00      	nop
   121e0:	636f4361 	.word	0x636f4361
   121e4:	3fd287a7 	.word	0x3fd287a7
   121e8:	8b60c8b3 	.word	0x8b60c8b3
   121ec:	3fc68a28 	.word	0x3fc68a28
   121f0:	509f79fb 	.word	0x509f79fb
   121f4:	3fd34413 	.word	0x3fd34413
   121f8:	7ff00000 	.word	0x7ff00000
   121fc:	20000f25 	.word	0x20000f25
   12200:	200003a8 	.word	0x200003a8
   12204:	20000e5c 	.word	0x20000e5c
   12208:	20000e68 	.word	0x20000e68
   1220c:	20000380 	.word	0x20000380
   12210:	f10c 0c01 	add.w	ip, ip, #1
   12214:	4594      	cmp	ip, r2
   12216:	da4d      	bge.n	122b4 <_dtoa_r+0x3f4>
   12218:	ee27 7b04 	vmul.f64	d7, d7, d4
   1221c:	ee25 5b04 	vmul.f64	d5, d5, d4
   12220:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   12224:	ee16 3a90 	vmov	r3, s13
   12228:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   1222c:	3330      	adds	r3, #48	; 0x30
   1222e:	ee37 7b43 	vsub.f64	d7, d7, d3
   12232:	eeb4 7bc5 	vcmpe.f64	d7, d5
   12236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1223a:	f801 3b01 	strb.w	r3, [r1], #1
   1223e:	f100 8473 	bmi.w	12b28 <_dtoa_r+0xc68>
   12242:	ee32 6b47 	vsub.f64	d6, d2, d7
   12246:	eeb4 6bc5 	vcmpe.f64	d6, d5
   1224a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1224e:	d5df      	bpl.n	12210 <_dtoa_r+0x350>
   12250:	9a00      	ldr	r2, [sp, #0]
   12252:	9604      	str	r6, [sp, #16]
   12254:	e002      	b.n	1225c <_dtoa_r+0x39c>
   12256:	428a      	cmp	r2, r1
   12258:	f000 8450 	beq.w	12afc <_dtoa_r+0xc3c>
   1225c:	4689      	mov	r9, r1
   1225e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   12262:	2b39      	cmp	r3, #57	; 0x39
   12264:	d0f7      	beq.n	12256 <_dtoa_r+0x396>
   12266:	3301      	adds	r3, #1
   12268:	b2db      	uxtb	r3, r3
   1226a:	700b      	strb	r3, [r1, #0]
   1226c:	9b04      	ldr	r3, [sp, #16]
   1226e:	3301      	adds	r3, #1
   12270:	9304      	str	r3, [sp, #16]
   12272:	e155      	b.n	12520 <_dtoa_r+0x660>
   12274:	1a09      	subs	r1, r1, r0
   12276:	2301      	movs	r3, #1
   12278:	f1b1 0801 	subs.w	r8, r1, #1
   1227c:	930a      	str	r3, [sp, #40]	; 0x28
   1227e:	f57f aec7 	bpl.w	12010 <_dtoa_r+0x150>
   12282:	f1c1 0301 	rsb	r3, r1, #1
   12286:	9306      	str	r3, [sp, #24]
   12288:	f04f 0800 	mov.w	r8, #0
   1228c:	e6c2      	b.n	12014 <_dtoa_r+0x154>
   1228e:	2600      	movs	r6, #0
   12290:	63e6      	str	r6, [r4, #60]	; 0x3c
   12292:	4631      	mov	r1, r6
   12294:	4620      	mov	r0, r4
   12296:	f7fb fc31 	bl	dafc <_Balloc>
   1229a:	9000      	str	r0, [sp, #0]
   1229c:	2800      	cmp	r0, #0
   1229e:	f000 8467 	beq.w	12b70 <_dtoa_r+0xcb0>
   122a2:	9b00      	ldr	r3, [sp, #0]
   122a4:	63a3      	str	r3, [r4, #56]	; 0x38
   122a6:	f04f 33ff 	mov.w	r3, #4294967295
   122aa:	930b      	str	r3, [sp, #44]	; 0x2c
   122ac:	4699      	mov	r9, r3
   122ae:	2301      	movs	r3, #1
   122b0:	46b3      	mov	fp, r6
   122b2:	9307      	str	r3, [sp, #28]
   122b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   122b6:	2a00      	cmp	r2, #0
   122b8:	db55      	blt.n	12366 <_dtoa_r+0x4a6>
   122ba:	9904      	ldr	r1, [sp, #16]
   122bc:	290e      	cmp	r1, #14
   122be:	dc52      	bgt.n	12366 <_dtoa_r+0x4a6>
   122c0:	4bb7      	ldr	r3, [pc, #732]	; (125a0 <_dtoa_r+0x6e0>)
   122c2:	f1bb 0f00 	cmp.w	fp, #0
   122c6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   122ca:	ed93 6b00 	vldr	d6, [r3]
   122ce:	da15      	bge.n	122fc <_dtoa_r+0x43c>
   122d0:	f1b9 0f00 	cmp.w	r9, #0
   122d4:	dc12      	bgt.n	122fc <_dtoa_r+0x43c>
   122d6:	f040 82f2 	bne.w	128be <_dtoa_r+0x9fe>
   122da:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   122de:	ee26 7b07 	vmul.f64	d7, d6, d7
   122e2:	eeb4 8bc7 	vcmpe.f64	d8, d7
   122e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   122ea:	46ca      	mov	sl, r9
   122ec:	464e      	mov	r6, r9
   122ee:	f200 826d 	bhi.w	127cc <_dtoa_r+0x90c>
   122f2:	f8dd 8000 	ldr.w	r8, [sp]
   122f6:	ea6f 0b0b 	mvn.w	fp, fp
   122fa:	e270      	b.n	127de <_dtoa_r+0x91e>
   122fc:	ee88 7b06 	vdiv.f64	d7, d8, d6
   12300:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   12304:	9900      	ldr	r1, [sp, #0]
   12306:	ee17 3a10 	vmov	r3, s14
   1230a:	f1b9 0f01 	cmp.w	r9, #1
   1230e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   12312:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   12316:	f801 3b01 	strb.w	r3, [r1], #1
   1231a:	eea5 8b46 	vfms.f64	d8, d5, d6
   1231e:	f000 8334 	beq.w	1298a <_dtoa_r+0xaca>
   12322:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   12326:	2301      	movs	r3, #1
   12328:	e011      	b.n	1234e <_dtoa_r+0x48e>
   1232a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   1232e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   12332:	3301      	adds	r3, #1
   12334:	ee17 2a10 	vmov	r2, s14
   12338:	454b      	cmp	r3, r9
   1233a:	f102 0230 	add.w	r2, r2, #48	; 0x30
   1233e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   12342:	f801 2b01 	strb.w	r2, [r1], #1
   12346:	eea5 8b46 	vfms.f64	d8, d5, d6
   1234a:	f000 831e 	beq.w	1298a <_dtoa_r+0xaca>
   1234e:	ee28 8b04 	vmul.f64	d8, d8, d4
   12352:	eeb5 8b40 	vcmp.f64	d8, #0.0
   12356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1235a:	d1e6      	bne.n	1232a <_dtoa_r+0x46a>
   1235c:	9b04      	ldr	r3, [sp, #16]
   1235e:	3301      	adds	r3, #1
   12360:	9304      	str	r3, [sp, #16]
   12362:	4689      	mov	r9, r1
   12364:	e0dc      	b.n	12520 <_dtoa_r+0x660>
   12366:	9b07      	ldr	r3, [sp, #28]
   12368:	b343      	cbz	r3, 123bc <_dtoa_r+0x4fc>
   1236a:	9b01      	ldr	r3, [sp, #4]
   1236c:	2b01      	cmp	r3, #1
   1236e:	f340 8276 	ble.w	1285e <_dtoa_r+0x99e>
   12372:	9b08      	ldr	r3, [sp, #32]
   12374:	f109 3aff 	add.w	sl, r9, #4294967295
   12378:	4553      	cmp	r3, sl
   1237a:	f280 823f 	bge.w	127fc <_dtoa_r+0x93c>
   1237e:	9b08      	ldr	r3, [sp, #32]
   12380:	f8cd a020 	str.w	sl, [sp, #32]
   12384:	ebaa 0203 	sub.w	r2, sl, r3
   12388:	4417      	add	r7, r2
   1238a:	f04f 0a00 	mov.w	sl, #0
   1238e:	f1b9 0f00 	cmp.w	r9, #0
   12392:	f2c0 8325 	blt.w	129e0 <_dtoa_r+0xb20>
   12396:	9b06      	ldr	r3, [sp, #24]
   12398:	9309      	str	r3, [sp, #36]	; 0x24
   1239a:	444b      	add	r3, r9
   1239c:	44c8      	add	r8, r9
   1239e:	9306      	str	r3, [sp, #24]
   123a0:	2101      	movs	r1, #1
   123a2:	4620      	mov	r0, r4
   123a4:	f7fb fcd4 	bl	dd50 <__i2b>
   123a8:	4606      	mov	r6, r0
   123aa:	e00c      	b.n	123c6 <_dtoa_r+0x506>
   123ac:	4b7d      	ldr	r3, [pc, #500]	; (125a4 <_dtoa_r+0x6e4>)
   123ae:	9300      	str	r3, [sp, #0]
   123b0:	9800      	ldr	r0, [sp, #0]
   123b2:	b00f      	add	sp, #60	; 0x3c
   123b4:	ecbd 8b02 	vpop	{d8}
   123b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123bc:	9b06      	ldr	r3, [sp, #24]
   123be:	f8dd a020 	ldr.w	sl, [sp, #32]
   123c2:	9e07      	ldr	r6, [sp, #28]
   123c4:	9309      	str	r3, [sp, #36]	; 0x24
   123c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   123c8:	b16b      	cbz	r3, 123e6 <_dtoa_r+0x526>
   123ca:	f1b8 0f00 	cmp.w	r8, #0
   123ce:	dd0a      	ble.n	123e6 <_dtoa_r+0x526>
   123d0:	4543      	cmp	r3, r8
   123d2:	9906      	ldr	r1, [sp, #24]
   123d4:	461a      	mov	r2, r3
   123d6:	bfa8      	it	ge
   123d8:	4642      	movge	r2, r8
   123da:	1a89      	subs	r1, r1, r2
   123dc:	1a9b      	subs	r3, r3, r2
   123de:	9106      	str	r1, [sp, #24]
   123e0:	9309      	str	r3, [sp, #36]	; 0x24
   123e2:	eba8 0802 	sub.w	r8, r8, r2
   123e6:	9b08      	ldr	r3, [sp, #32]
   123e8:	b163      	cbz	r3, 12404 <_dtoa_r+0x544>
   123ea:	9b07      	ldr	r3, [sp, #28]
   123ec:	2b00      	cmp	r3, #0
   123ee:	f000 82a7 	beq.w	12940 <_dtoa_r+0xa80>
   123f2:	f1ba 0f00 	cmp.w	sl, #0
   123f6:	f300 8204 	bgt.w	12802 <_dtoa_r+0x942>
   123fa:	9b08      	ldr	r3, [sp, #32]
   123fc:	ebb3 020a 	subs.w	r2, r3, sl
   12400:	f040 82ff 	bne.w	12a02 <_dtoa_r+0xb42>
   12404:	2101      	movs	r1, #1
   12406:	4620      	mov	r0, r4
   12408:	f7fb fca2 	bl	dd50 <__i2b>
   1240c:	2f00      	cmp	r7, #0
   1240e:	4682      	mov	sl, r0
   12410:	f300 80af 	bgt.w	12572 <_dtoa_r+0x6b2>
   12414:	9b01      	ldr	r3, [sp, #4]
   12416:	2b01      	cmp	r3, #1
   12418:	f340 8187 	ble.w	1272a <_dtoa_r+0x86a>
   1241c:	2300      	movs	r3, #0
   1241e:	9308      	str	r3, [sp, #32]
   12420:	2001      	movs	r0, #1
   12422:	2f00      	cmp	r7, #0
   12424:	f040 80b1 	bne.w	1258a <_dtoa_r+0x6ca>
   12428:	4440      	add	r0, r8
   1242a:	f010 001f 	ands.w	r0, r0, #31
   1242e:	f000 817a 	beq.w	12726 <_dtoa_r+0x866>
   12432:	f1c0 0220 	rsb	r2, r0, #32
   12436:	2a04      	cmp	r2, #4
   12438:	f300 8088 	bgt.w	1254c <_dtoa_r+0x68c>
   1243c:	f040 81f6 	bne.w	1282c <_dtoa_r+0x96c>
   12440:	9b06      	ldr	r3, [sp, #24]
   12442:	2b00      	cmp	r3, #0
   12444:	dd05      	ble.n	12452 <_dtoa_r+0x592>
   12446:	4629      	mov	r1, r5
   12448:	461a      	mov	r2, r3
   1244a:	4620      	mov	r0, r4
   1244c:	f7fb fdbc 	bl	dfc8 <__lshift>
   12450:	4605      	mov	r5, r0
   12452:	f1b8 0f00 	cmp.w	r8, #0
   12456:	dd05      	ble.n	12464 <_dtoa_r+0x5a4>
   12458:	4651      	mov	r1, sl
   1245a:	4642      	mov	r2, r8
   1245c:	4620      	mov	r0, r4
   1245e:	f7fb fdb3 	bl	dfc8 <__lshift>
   12462:	4682      	mov	sl, r0
   12464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12466:	2b00      	cmp	r3, #0
   12468:	f040 813f 	bne.w	126ea <_dtoa_r+0x82a>
   1246c:	f1b9 0f00 	cmp.w	r9, #0
   12470:	f340 8125 	ble.w	126be <_dtoa_r+0x7fe>
   12474:	9b07      	ldr	r3, [sp, #28]
   12476:	2b00      	cmp	r3, #0
   12478:	f040 80a3 	bne.w	125c2 <_dtoa_r+0x702>
   1247c:	9b04      	ldr	r3, [sp, #16]
   1247e:	3301      	adds	r3, #1
   12480:	9304      	str	r3, [sp, #16]
   12482:	f8dd 8000 	ldr.w	r8, [sp]
   12486:	2701      	movs	r7, #1
   12488:	e007      	b.n	1249a <_dtoa_r+0x5da>
   1248a:	4629      	mov	r1, r5
   1248c:	2300      	movs	r3, #0
   1248e:	220a      	movs	r2, #10
   12490:	4620      	mov	r0, r4
   12492:	f7fb fb63 	bl	db5c <__multadd>
   12496:	3701      	adds	r7, #1
   12498:	4605      	mov	r5, r0
   1249a:	4651      	mov	r1, sl
   1249c:	4628      	mov	r0, r5
   1249e:	f7ff fc7b 	bl	11d98 <quorem>
   124a2:	45b9      	cmp	r9, r7
   124a4:	f100 0030 	add.w	r0, r0, #48	; 0x30
   124a8:	f808 0b01 	strb.w	r0, [r8], #1
   124ac:	dced      	bgt.n	1248a <_dtoa_r+0x5ca>
   124ae:	f1b9 0f00 	cmp.w	r9, #0
   124b2:	9a00      	ldr	r2, [sp, #0]
   124b4:	bfcc      	ite	gt
   124b6:	46cb      	movgt	fp, r9
   124b8:	f04f 0b01 	movle.w	fp, #1
   124bc:	4603      	mov	r3, r0
   124be:	4493      	add	fp, r2
   124c0:	2700      	movs	r7, #0
   124c2:	4629      	mov	r1, r5
   124c4:	2201      	movs	r2, #1
   124c6:	4620      	mov	r0, r4
   124c8:	9301      	str	r3, [sp, #4]
   124ca:	f7fb fd7d 	bl	dfc8 <__lshift>
   124ce:	4651      	mov	r1, sl
   124d0:	4605      	mov	r5, r0
   124d2:	f7fb fdf1 	bl	e0b8 <__mcmp>
   124d6:	2800      	cmp	r0, #0
   124d8:	f340 81af 	ble.w	1283a <_dtoa_r+0x97a>
   124dc:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   124e0:	9a00      	ldr	r2, [sp, #0]
   124e2:	f10b 3bff 	add.w	fp, fp, #4294967295
   124e6:	e004      	b.n	124f2 <_dtoa_r+0x632>
   124e8:	455a      	cmp	r2, fp
   124ea:	f000 81b1 	beq.w	12850 <_dtoa_r+0x990>
   124ee:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   124f2:	2b39      	cmp	r3, #57	; 0x39
   124f4:	f10b 0901 	add.w	r9, fp, #1
   124f8:	d0f6      	beq.n	124e8 <_dtoa_r+0x628>
   124fa:	3301      	adds	r3, #1
   124fc:	f88b 3000 	strb.w	r3, [fp]
   12500:	4651      	mov	r1, sl
   12502:	4620      	mov	r0, r4
   12504:	f7fb fb20 	bl	db48 <_Bfree>
   12508:	b156      	cbz	r6, 12520 <_dtoa_r+0x660>
   1250a:	b12f      	cbz	r7, 12518 <_dtoa_r+0x658>
   1250c:	42b7      	cmp	r7, r6
   1250e:	d003      	beq.n	12518 <_dtoa_r+0x658>
   12510:	4639      	mov	r1, r7
   12512:	4620      	mov	r0, r4
   12514:	f7fb fb18 	bl	db48 <_Bfree>
   12518:	4631      	mov	r1, r6
   1251a:	4620      	mov	r0, r4
   1251c:	f7fb fb14 	bl	db48 <_Bfree>
   12520:	4629      	mov	r1, r5
   12522:	4620      	mov	r0, r4
   12524:	f7fb fb10 	bl	db48 <_Bfree>
   12528:	2300      	movs	r3, #0
   1252a:	f889 3000 	strb.w	r3, [r9]
   1252e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   12532:	601a      	str	r2, [r3, #0]
   12534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   12536:	2b00      	cmp	r3, #0
   12538:	f43f acfe 	beq.w	11f38 <_dtoa_r+0x78>
   1253c:	9800      	ldr	r0, [sp, #0]
   1253e:	f8c3 9000 	str.w	r9, [r3]
   12542:	b00f      	add	sp, #60	; 0x3c
   12544:	ecbd 8b02 	vpop	{d8}
   12548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1254c:	f1c0 001c 	rsb	r0, r0, #28
   12550:	9b06      	ldr	r3, [sp, #24]
   12552:	4403      	add	r3, r0
   12554:	9306      	str	r3, [sp, #24]
   12556:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12558:	4403      	add	r3, r0
   1255a:	9309      	str	r3, [sp, #36]	; 0x24
   1255c:	4480      	add	r8, r0
   1255e:	e76f      	b.n	12440 <_dtoa_r+0x580>
   12560:	f1c2 0220 	rsb	r2, r2, #32
   12564:	fa06 f202 	lsl.w	r2, r6, r2
   12568:	ee07 2a10 	vmov	s14, r2
   1256c:	e509      	b.n	11f82 <_dtoa_r+0xc2>
   1256e:	2601      	movs	r6, #1
   12570:	e563      	b.n	1203a <_dtoa_r+0x17a>
   12572:	4601      	mov	r1, r0
   12574:	463a      	mov	r2, r7
   12576:	4620      	mov	r0, r4
   12578:	f7fb fcc6 	bl	df08 <__pow5mult>
   1257c:	9b01      	ldr	r3, [sp, #4]
   1257e:	2b01      	cmp	r3, #1
   12580:	4682      	mov	sl, r0
   12582:	f340 81c5 	ble.w	12910 <_dtoa_r+0xa50>
   12586:	2300      	movs	r3, #0
   12588:	9308      	str	r3, [sp, #32]
   1258a:	f8da 2010 	ldr.w	r2, [sl, #16]
   1258e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   12592:	6910      	ldr	r0, [r2, #16]
   12594:	f7fb fb8c 	bl	dcb0 <__hi0bits>
   12598:	f1c0 0020 	rsb	r0, r0, #32
   1259c:	e744      	b.n	12428 <_dtoa_r+0x568>
   1259e:	bf00      	nop
   125a0:	200003a8 	.word	0x200003a8
   125a4:	20000f24 	.word	0x20000f24
   125a8:	4631      	mov	r1, r6
   125aa:	2300      	movs	r3, #0
   125ac:	220a      	movs	r2, #10
   125ae:	4620      	mov	r0, r4
   125b0:	f7fb fad4 	bl	db5c <__multadd>
   125b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   125b6:	2b00      	cmp	r3, #0
   125b8:	4606      	mov	r6, r0
   125ba:	f340 82ce 	ble.w	12b5a <_dtoa_r+0xc9a>
   125be:	9704      	str	r7, [sp, #16]
   125c0:	4699      	mov	r9, r3
   125c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   125c4:	2b00      	cmp	r3, #0
   125c6:	dd05      	ble.n	125d4 <_dtoa_r+0x714>
   125c8:	4631      	mov	r1, r6
   125ca:	461a      	mov	r2, r3
   125cc:	4620      	mov	r0, r4
   125ce:	f7fb fcfb 	bl	dfc8 <__lshift>
   125d2:	4606      	mov	r6, r0
   125d4:	9b08      	ldr	r3, [sp, #32]
   125d6:	2b00      	cmp	r3, #0
   125d8:	f040 81eb 	bne.w	129b2 <_dtoa_r+0xaf2>
   125dc:	46b0      	mov	r8, r6
   125de:	9b02      	ldr	r3, [sp, #8]
   125e0:	9f00      	ldr	r7, [sp, #0]
   125e2:	f003 0201 	and.w	r2, r3, #1
   125e6:	1e7b      	subs	r3, r7, #1
   125e8:	444b      	add	r3, r9
   125ea:	9308      	str	r3, [sp, #32]
   125ec:	9b01      	ldr	r3, [sp, #4]
   125ee:	920a      	str	r2, [sp, #40]	; 0x28
   125f0:	4313      	orrs	r3, r2
   125f2:	9309      	str	r3, [sp, #36]	; 0x24
   125f4:	4651      	mov	r1, sl
   125f6:	4628      	mov	r0, r5
   125f8:	f7ff fbce 	bl	11d98 <quorem>
   125fc:	4631      	mov	r1, r6
   125fe:	4683      	mov	fp, r0
   12600:	4628      	mov	r0, r5
   12602:	f7fb fd59 	bl	e0b8 <__mcmp>
   12606:	4642      	mov	r2, r8
   12608:	4651      	mov	r1, sl
   1260a:	4681      	mov	r9, r0
   1260c:	4620      	mov	r0, r4
   1260e:	f7fb fd75 	bl	e0fc <__mdiff>
   12612:	68c2      	ldr	r2, [r0, #12]
   12614:	4601      	mov	r1, r0
   12616:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   1261a:	2a00      	cmp	r2, #0
   1261c:	d142      	bne.n	126a4 <_dtoa_r+0x7e4>
   1261e:	e9cd 0306 	strd	r0, r3, [sp, #24]
   12622:	4628      	mov	r0, r5
   12624:	f7fb fd48 	bl	e0b8 <__mcmp>
   12628:	9906      	ldr	r1, [sp, #24]
   1262a:	9002      	str	r0, [sp, #8]
   1262c:	4620      	mov	r0, r4
   1262e:	f7fb fa8b 	bl	db48 <_Bfree>
   12632:	9a02      	ldr	r2, [sp, #8]
   12634:	9b07      	ldr	r3, [sp, #28]
   12636:	b91a      	cbnz	r2, 12640 <_dtoa_r+0x780>
   12638:	9909      	ldr	r1, [sp, #36]	; 0x24
   1263a:	2900      	cmp	r1, #0
   1263c:	f000 827e 	beq.w	12b3c <_dtoa_r+0xc7c>
   12640:	f1b9 0f00 	cmp.w	r9, #0
   12644:	f2c0 8183 	blt.w	1294e <_dtoa_r+0xa8e>
   12648:	9901      	ldr	r1, [sp, #4]
   1264a:	ea49 0901 	orr.w	r9, r9, r1
   1264e:	990a      	ldr	r1, [sp, #40]	; 0x28
   12650:	ea51 0909 	orrs.w	r9, r1, r9
   12654:	f000 817b 	beq.w	1294e <_dtoa_r+0xa8e>
   12658:	2a00      	cmp	r2, #0
   1265a:	f300 81c6 	bgt.w	129ea <_dtoa_r+0xb2a>
   1265e:	9a08      	ldr	r2, [sp, #32]
   12660:	703b      	strb	r3, [r7, #0]
   12662:	f107 0901 	add.w	r9, r7, #1
   12666:	4297      	cmp	r7, r2
   12668:	46cb      	mov	fp, r9
   1266a:	f000 81c4 	beq.w	129f6 <_dtoa_r+0xb36>
   1266e:	4629      	mov	r1, r5
   12670:	2300      	movs	r3, #0
   12672:	220a      	movs	r2, #10
   12674:	4620      	mov	r0, r4
   12676:	f7fb fa71 	bl	db5c <__multadd>
   1267a:	4546      	cmp	r6, r8
   1267c:	4605      	mov	r5, r0
   1267e:	4631      	mov	r1, r6
   12680:	f04f 0300 	mov.w	r3, #0
   12684:	f04f 020a 	mov.w	r2, #10
   12688:	4620      	mov	r0, r4
   1268a:	d012      	beq.n	126b2 <_dtoa_r+0x7f2>
   1268c:	f7fb fa66 	bl	db5c <__multadd>
   12690:	4641      	mov	r1, r8
   12692:	4606      	mov	r6, r0
   12694:	2300      	movs	r3, #0
   12696:	220a      	movs	r2, #10
   12698:	4620      	mov	r0, r4
   1269a:	f7fb fa5f 	bl	db5c <__multadd>
   1269e:	464f      	mov	r7, r9
   126a0:	4680      	mov	r8, r0
   126a2:	e7a7      	b.n	125f4 <_dtoa_r+0x734>
   126a4:	4620      	mov	r0, r4
   126a6:	9302      	str	r3, [sp, #8]
   126a8:	f7fb fa4e 	bl	db48 <_Bfree>
   126ac:	9b02      	ldr	r3, [sp, #8]
   126ae:	2201      	movs	r2, #1
   126b0:	e7c6      	b.n	12640 <_dtoa_r+0x780>
   126b2:	f7fb fa53 	bl	db5c <__multadd>
   126b6:	464f      	mov	r7, r9
   126b8:	4606      	mov	r6, r0
   126ba:	4680      	mov	r8, r0
   126bc:	e79a      	b.n	125f4 <_dtoa_r+0x734>
   126be:	9b01      	ldr	r3, [sp, #4]
   126c0:	2b02      	cmp	r3, #2
   126c2:	dc71      	bgt.n	127a8 <_dtoa_r+0x8e8>
   126c4:	9b07      	ldr	r3, [sp, #28]
   126c6:	2b00      	cmp	r3, #0
   126c8:	f47f af7b 	bne.w	125c2 <_dtoa_r+0x702>
   126cc:	9b04      	ldr	r3, [sp, #16]
   126ce:	4651      	mov	r1, sl
   126d0:	3301      	adds	r3, #1
   126d2:	4628      	mov	r0, r5
   126d4:	9304      	str	r3, [sp, #16]
   126d6:	f7ff fb5f 	bl	11d98 <quorem>
   126da:	f8dd b000 	ldr.w	fp, [sp]
   126de:	f100 0330 	add.w	r3, r0, #48	; 0x30
   126e2:	f80b 3b01 	strb.w	r3, [fp], #1
   126e6:	2700      	movs	r7, #0
   126e8:	e6eb      	b.n	124c2 <_dtoa_r+0x602>
   126ea:	4651      	mov	r1, sl
   126ec:	4628      	mov	r0, r5
   126ee:	f7fb fce3 	bl	e0b8 <__mcmp>
   126f2:	2800      	cmp	r0, #0
   126f4:	f6bf aeba 	bge.w	1246c <_dtoa_r+0x5ac>
   126f8:	4629      	mov	r1, r5
   126fa:	2300      	movs	r3, #0
   126fc:	220a      	movs	r2, #10
   126fe:	4620      	mov	r0, r4
   12700:	f7fb fa2c 	bl	db5c <__multadd>
   12704:	9b04      	ldr	r3, [sp, #16]
   12706:	1e5f      	subs	r7, r3, #1
   12708:	9b07      	ldr	r3, [sp, #28]
   1270a:	4605      	mov	r5, r0
   1270c:	2b00      	cmp	r3, #0
   1270e:	f47f af4b 	bne.w	125a8 <_dtoa_r+0x6e8>
   12712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12714:	2b00      	cmp	r3, #0
   12716:	f340 8218 	ble.w	12b4a <_dtoa_r+0xc8a>
   1271a:	4699      	mov	r9, r3
   1271c:	e6b1      	b.n	12482 <_dtoa_r+0x5c2>
   1271e:	4bbc      	ldr	r3, [pc, #752]	; (12a10 <_dtoa_r+0xb50>)
   12720:	9300      	str	r3, [sp, #0]
   12722:	3303      	adds	r3, #3
   12724:	e4a4      	b.n	12070 <_dtoa_r+0x1b0>
   12726:	201c      	movs	r0, #28
   12728:	e712      	b.n	12550 <_dtoa_r+0x690>
   1272a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1272e:	2800      	cmp	r0, #0
   12730:	f47f ae74 	bne.w	1241c <_dtoa_r+0x55c>
   12734:	f3c1 0213 	ubfx	r2, r1, #0, #20
   12738:	2a00      	cmp	r2, #0
   1273a:	f000 80f4 	beq.w	12926 <_dtoa_r+0xa66>
   1273e:	9b02      	ldr	r3, [sp, #8]
   12740:	9308      	str	r3, [sp, #32]
   12742:	e66d      	b.n	12420 <_dtoa_r+0x560>
   12744:	2301      	movs	r3, #1
   12746:	9307      	str	r3, [sp, #28]
   12748:	9b04      	ldr	r3, [sp, #16]
   1274a:	445b      	add	r3, fp
   1274c:	f103 0901 	add.w	r9, r3, #1
   12750:	f1b9 0f01 	cmp.w	r9, #1
   12754:	46cc      	mov	ip, r9
   12756:	930b      	str	r3, [sp, #44]	; 0x2c
   12758:	bfb8      	it	lt
   1275a:	f04f 0c01 	movlt.w	ip, #1
   1275e:	2100      	movs	r1, #0
   12760:	f1bc 0f17 	cmp.w	ip, #23
   12764:	63e1      	str	r1, [r4, #60]	; 0x3c
   12766:	f77f acbc 	ble.w	120e2 <_dtoa_r+0x222>
   1276a:	2001      	movs	r0, #1
   1276c:	2204      	movs	r2, #4
   1276e:	0052      	lsls	r2, r2, #1
   12770:	f102 0314 	add.w	r3, r2, #20
   12774:	4563      	cmp	r3, ip
   12776:	4601      	mov	r1, r0
   12778:	f100 0001 	add.w	r0, r0, #1
   1277c:	d9f7      	bls.n	1276e <_dtoa_r+0x8ae>
   1277e:	63e1      	str	r1, [r4, #60]	; 0x3c
   12780:	e4af      	b.n	120e2 <_dtoa_r+0x222>
   12782:	2301      	movs	r3, #1
   12784:	9307      	str	r3, [sp, #28]
   12786:	f1bb 0f00 	cmp.w	fp, #0
   1278a:	dd52      	ble.n	12832 <_dtoa_r+0x972>
   1278c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   12790:	46d9      	mov	r9, fp
   12792:	46dc      	mov	ip, fp
   12794:	e7e3      	b.n	1275e <_dtoa_r+0x89e>
   12796:	2300      	movs	r3, #0
   12798:	9307      	str	r3, [sp, #28]
   1279a:	e7d5      	b.n	12748 <_dtoa_r+0x888>
   1279c:	2300      	movs	r3, #0
   1279e:	9307      	str	r3, [sp, #28]
   127a0:	e7f1      	b.n	12786 <_dtoa_r+0x8c6>
   127a2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   127a6:	9704      	str	r7, [sp, #16]
   127a8:	f1b9 0f00 	cmp.w	r9, #0
   127ac:	f47f ada1 	bne.w	122f2 <_dtoa_r+0x432>
   127b0:	4651      	mov	r1, sl
   127b2:	464b      	mov	r3, r9
   127b4:	2205      	movs	r2, #5
   127b6:	4620      	mov	r0, r4
   127b8:	f7fb f9d0 	bl	db5c <__multadd>
   127bc:	4601      	mov	r1, r0
   127be:	4682      	mov	sl, r0
   127c0:	4628      	mov	r0, r5
   127c2:	f7fb fc79 	bl	e0b8 <__mcmp>
   127c6:	2800      	cmp	r0, #0
   127c8:	f77f ad93 	ble.w	122f2 <_dtoa_r+0x432>
   127cc:	9b04      	ldr	r3, [sp, #16]
   127ce:	f103 0b01 	add.w	fp, r3, #1
   127d2:	9b00      	ldr	r3, [sp, #0]
   127d4:	2231      	movs	r2, #49	; 0x31
   127d6:	4698      	mov	r8, r3
   127d8:	f803 2b01 	strb.w	r2, [r3], #1
   127dc:	9300      	str	r3, [sp, #0]
   127de:	4651      	mov	r1, sl
   127e0:	4620      	mov	r0, r4
   127e2:	f7fb f9b1 	bl	db48 <_Bfree>
   127e6:	f10b 0301 	add.w	r3, fp, #1
   127ea:	f8dd 9000 	ldr.w	r9, [sp]
   127ee:	9304      	str	r3, [sp, #16]
   127f0:	f8cd 8000 	str.w	r8, [sp]
   127f4:	2e00      	cmp	r6, #0
   127f6:	f47f ae8f 	bne.w	12518 <_dtoa_r+0x658>
   127fa:	e691      	b.n	12520 <_dtoa_r+0x660>
   127fc:	eba3 0a0a 	sub.w	sl, r3, sl
   12800:	e5c5      	b.n	1238e <_dtoa_r+0x4ce>
   12802:	4631      	mov	r1, r6
   12804:	4652      	mov	r2, sl
   12806:	4620      	mov	r0, r4
   12808:	f7fb fb7e 	bl	df08 <__pow5mult>
   1280c:	462a      	mov	r2, r5
   1280e:	4601      	mov	r1, r0
   12810:	4606      	mov	r6, r0
   12812:	4620      	mov	r0, r4
   12814:	f7fb faca 	bl	ddac <__multiply>
   12818:	4629      	mov	r1, r5
   1281a:	4605      	mov	r5, r0
   1281c:	4620      	mov	r0, r4
   1281e:	f7fb f993 	bl	db48 <_Bfree>
   12822:	e5ea      	b.n	123fa <_dtoa_r+0x53a>
   12824:	2002      	movs	r0, #2
   12826:	eeb0 5b48 	vmov.f64	d5, d8
   1282a:	e481      	b.n	12130 <_dtoa_r+0x270>
   1282c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   12830:	e68e      	b.n	12550 <_dtoa_r+0x690>
   12832:	f04f 0b01 	mov.w	fp, #1
   12836:	46d9      	mov	r9, fp
   12838:	e44f      	b.n	120da <_dtoa_r+0x21a>
   1283a:	d103      	bne.n	12844 <_dtoa_r+0x984>
   1283c:	9b01      	ldr	r3, [sp, #4]
   1283e:	07db      	lsls	r3, r3, #31
   12840:	f53f ae4c 	bmi.w	124dc <_dtoa_r+0x61c>
   12844:	46d9      	mov	r9, fp
   12846:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   1284a:	2b30      	cmp	r3, #48	; 0x30
   1284c:	d0fa      	beq.n	12844 <_dtoa_r+0x984>
   1284e:	e657      	b.n	12500 <_dtoa_r+0x640>
   12850:	9b04      	ldr	r3, [sp, #16]
   12852:	9a00      	ldr	r2, [sp, #0]
   12854:	3301      	adds	r3, #1
   12856:	9304      	str	r3, [sp, #16]
   12858:	2331      	movs	r3, #49	; 0x31
   1285a:	7013      	strb	r3, [r2, #0]
   1285c:	e650      	b.n	12500 <_dtoa_r+0x640>
   1285e:	f1ba 0f00 	cmp.w	sl, #0
   12862:	f000 8123 	beq.w	12aac <_dtoa_r+0xbec>
   12866:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1286a:	9b06      	ldr	r3, [sp, #24]
   1286c:	9309      	str	r3, [sp, #36]	; 0x24
   1286e:	4413      	add	r3, r2
   12870:	f8dd a020 	ldr.w	sl, [sp, #32]
   12874:	9306      	str	r3, [sp, #24]
   12876:	4490      	add	r8, r2
   12878:	e592      	b.n	123a0 <_dtoa_r+0x4e0>
   1287a:	ee07 0a90 	vmov	s15, r0
   1287e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   12882:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   12886:	eea6 5b07 	vfma.f64	d5, d6, d7
   1288a:	ee15 2a90 	vmov	r2, s11
   1288e:	ec51 0b15 	vmov	r0, r1, d5
   12892:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   12896:	ec41 0b15 	vmov	d5, r0, r1
   1289a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1289e:	ee36 7b47 	vsub.f64	d7, d6, d7
   128a2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   128a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   128aa:	f300 8137 	bgt.w	12b1c <_dtoa_r+0xc5c>
   128ae:	eeb1 5b45 	vneg.f64	d5, d5
   128b2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   128b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   128ba:	f57f acfb 	bpl.w	122b4 <_dtoa_r+0x3f4>
   128be:	f04f 0a00 	mov.w	sl, #0
   128c2:	4656      	mov	r6, sl
   128c4:	e515      	b.n	122f2 <_dtoa_r+0x432>
   128c6:	f000 80f5 	beq.w	12ab4 <_dtoa_r+0xbf4>
   128ca:	9b04      	ldr	r3, [sp, #16]
   128cc:	4951      	ldr	r1, [pc, #324]	; (12a14 <_dtoa_r+0xb54>)
   128ce:	425a      	negs	r2, r3
   128d0:	f002 000f 	and.w	r0, r2, #15
   128d4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   128d8:	ed91 6b00 	vldr	d6, [r1]
   128dc:	1112      	asrs	r2, r2, #4
   128de:	ee28 6b06 	vmul.f64	d6, d8, d6
   128e2:	f000 8142 	beq.w	12b6a <_dtoa_r+0xcaa>
   128e6:	eeb0 7b46 	vmov.f64	d7, d6
   128ea:	494b      	ldr	r1, [pc, #300]	; (12a18 <_dtoa_r+0xb58>)
   128ec:	2600      	movs	r6, #0
   128ee:	2002      	movs	r0, #2
   128f0:	07d3      	lsls	r3, r2, #31
   128f2:	d505      	bpl.n	12900 <_dtoa_r+0xa40>
   128f4:	ed91 5b00 	vldr	d5, [r1]
   128f8:	3001      	adds	r0, #1
   128fa:	2601      	movs	r6, #1
   128fc:	ee27 7b05 	vmul.f64	d7, d7, d5
   12900:	1052      	asrs	r2, r2, #1
   12902:	f101 0108 	add.w	r1, r1, #8
   12906:	d1f3      	bne.n	128f0 <_dtoa_r+0xa30>
   12908:	2e00      	cmp	r6, #0
   1290a:	fe06 6b07 	vseleq.f64	d6, d6, d7
   1290e:	e41e      	b.n	1214e <_dtoa_r+0x28e>
   12910:	9b02      	ldr	r3, [sp, #8]
   12912:	2b00      	cmp	r3, #0
   12914:	f47f ae37 	bne.w	12586 <_dtoa_r+0x6c6>
   12918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1291c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   12920:	2a00      	cmp	r2, #0
   12922:	f040 8137 	bne.w	12b94 <_dtoa_r+0xcd4>
   12926:	4a3d      	ldr	r2, [pc, #244]	; (12a1c <_dtoa_r+0xb5c>)
   12928:	400a      	ands	r2, r1
   1292a:	2a00      	cmp	r2, #0
   1292c:	f000 80fa 	beq.w	12b24 <_dtoa_r+0xc64>
   12930:	9b06      	ldr	r3, [sp, #24]
   12932:	3301      	adds	r3, #1
   12934:	9306      	str	r3, [sp, #24]
   12936:	2301      	movs	r3, #1
   12938:	f108 0801 	add.w	r8, r8, #1
   1293c:	9308      	str	r3, [sp, #32]
   1293e:	e56f      	b.n	12420 <_dtoa_r+0x560>
   12940:	4629      	mov	r1, r5
   12942:	9a08      	ldr	r2, [sp, #32]
   12944:	4620      	mov	r0, r4
   12946:	f7fb fadf 	bl	df08 <__pow5mult>
   1294a:	4605      	mov	r5, r0
   1294c:	e55a      	b.n	12404 <_dtoa_r+0x544>
   1294e:	2a00      	cmp	r2, #0
   12950:	dd12      	ble.n	12978 <_dtoa_r+0xab8>
   12952:	4629      	mov	r1, r5
   12954:	2201      	movs	r2, #1
   12956:	4620      	mov	r0, r4
   12958:	9301      	str	r3, [sp, #4]
   1295a:	f7fb fb35 	bl	dfc8 <__lshift>
   1295e:	4651      	mov	r1, sl
   12960:	4605      	mov	r5, r0
   12962:	f7fb fba9 	bl	e0b8 <__mcmp>
   12966:	2800      	cmp	r0, #0
   12968:	9b01      	ldr	r3, [sp, #4]
   1296a:	f340 80e1 	ble.w	12b30 <_dtoa_r+0xc70>
   1296e:	2b39      	cmp	r3, #57	; 0x39
   12970:	f000 80ca 	beq.w	12b08 <_dtoa_r+0xc48>
   12974:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   12978:	46b9      	mov	r9, r7
   1297a:	f809 3b01 	strb.w	r3, [r9], #1
   1297e:	9b04      	ldr	r3, [sp, #16]
   12980:	3301      	adds	r3, #1
   12982:	4637      	mov	r7, r6
   12984:	9304      	str	r3, [sp, #16]
   12986:	4646      	mov	r6, r8
   12988:	e5ba      	b.n	12500 <_dtoa_r+0x640>
   1298a:	ee38 8b08 	vadd.f64	d8, d8, d8
   1298e:	eeb4 8bc6 	vcmpe.f64	d8, d6
   12992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12996:	dc0a      	bgt.n	129ae <_dtoa_r+0xaee>
   12998:	eeb4 8b46 	vcmp.f64	d8, d6
   1299c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   129a0:	f47f acdc 	bne.w	1235c <_dtoa_r+0x49c>
   129a4:	ee17 3a10 	vmov	r3, s14
   129a8:	07d8      	lsls	r0, r3, #31
   129aa:	f57f acd7 	bpl.w	1235c <_dtoa_r+0x49c>
   129ae:	9a00      	ldr	r2, [sp, #0]
   129b0:	e454      	b.n	1225c <_dtoa_r+0x39c>
   129b2:	6871      	ldr	r1, [r6, #4]
   129b4:	4620      	mov	r0, r4
   129b6:	f7fb f8a1 	bl	dafc <_Balloc>
   129ba:	4607      	mov	r7, r0
   129bc:	2800      	cmp	r0, #0
   129be:	f000 80de 	beq.w	12b7e <_dtoa_r+0xcbe>
   129c2:	6933      	ldr	r3, [r6, #16]
   129c4:	3302      	adds	r3, #2
   129c6:	009a      	lsls	r2, r3, #2
   129c8:	f106 010c 	add.w	r1, r6, #12
   129cc:	300c      	adds	r0, #12
   129ce:	f7f5 fc7d 	bl	82cc <memcpy>
   129d2:	4639      	mov	r1, r7
   129d4:	2201      	movs	r2, #1
   129d6:	4620      	mov	r0, r4
   129d8:	f7fb faf6 	bl	dfc8 <__lshift>
   129dc:	4680      	mov	r8, r0
   129de:	e5fe      	b.n	125de <_dtoa_r+0x71e>
   129e0:	9b06      	ldr	r3, [sp, #24]
   129e2:	eba3 0309 	sub.w	r3, r3, r9
   129e6:	9309      	str	r3, [sp, #36]	; 0x24
   129e8:	e4da      	b.n	123a0 <_dtoa_r+0x4e0>
   129ea:	2b39      	cmp	r3, #57	; 0x39
   129ec:	f000 808c 	beq.w	12b08 <_dtoa_r+0xc48>
   129f0:	46b9      	mov	r9, r7
   129f2:	3301      	adds	r3, #1
   129f4:	e7c1      	b.n	1297a <_dtoa_r+0xaba>
   129f6:	9a04      	ldr	r2, [sp, #16]
   129f8:	3201      	adds	r2, #1
   129fa:	4637      	mov	r7, r6
   129fc:	9204      	str	r2, [sp, #16]
   129fe:	4646      	mov	r6, r8
   12a00:	e55f      	b.n	124c2 <_dtoa_r+0x602>
   12a02:	4629      	mov	r1, r5
   12a04:	4620      	mov	r0, r4
   12a06:	f7fb fa7f 	bl	df08 <__pow5mult>
   12a0a:	4605      	mov	r5, r0
   12a0c:	e4fa      	b.n	12404 <_dtoa_r+0x544>
   12a0e:	bf00      	nop
   12a10:	20000e68 	.word	0x20000e68
   12a14:	200003a8 	.word	0x200003a8
   12a18:	20000380 	.word	0x20000380
   12a1c:	7ff00000 	.word	0x7ff00000
   12a20:	4b5e      	ldr	r3, [pc, #376]	; (12b9c <_dtoa_r+0xcdc>)
   12a22:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   12a26:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   12a2a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   12a2e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   12a32:	ee36 7b47 	vsub.f64	d7, d6, d7
   12a36:	ec41 0b16 	vmov	d6, r0, r1
   12a3a:	ee15 1a90 	vmov	r1, s11
   12a3e:	ee23 3b06 	vmul.f64	d3, d3, d6
   12a42:	9800      	ldr	r0, [sp, #0]
   12a44:	3130      	adds	r1, #48	; 0x30
   12a46:	2a01      	cmp	r2, #1
   12a48:	f800 1b01 	strb.w	r1, [r0], #1
   12a4c:	f000 8083 	beq.w	12b56 <_dtoa_r+0xc96>
   12a50:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   12a54:	9b00      	ldr	r3, [sp, #0]
   12a56:	1899      	adds	r1, r3, r2
   12a58:	ee27 7b04 	vmul.f64	d7, d7, d4
   12a5c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   12a60:	ee16 3a90 	vmov	r3, s13
   12a64:	3330      	adds	r3, #48	; 0x30
   12a66:	f800 3b01 	strb.w	r3, [r0], #1
   12a6a:	4281      	cmp	r1, r0
   12a6c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   12a70:	ee37 7b45 	vsub.f64	d7, d7, d5
   12a74:	d1f0      	bne.n	12a58 <_dtoa_r+0xb98>
   12a76:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   12a7a:	ee33 5b06 	vadd.f64	d5, d3, d6
   12a7e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   12a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12a86:	f53f abe3 	bmi.w	12250 <_dtoa_r+0x390>
   12a8a:	ee36 6b43 	vsub.f64	d6, d6, d3
   12a8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   12a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12a96:	f77f ac0d 	ble.w	122b4 <_dtoa_r+0x3f4>
   12a9a:	4689      	mov	r9, r1
   12a9c:	3901      	subs	r1, #1
   12a9e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   12aa2:	2b30      	cmp	r3, #48	; 0x30
   12aa4:	d0f9      	beq.n	12a9a <_dtoa_r+0xbda>
   12aa6:	1c73      	adds	r3, r6, #1
   12aa8:	9304      	str	r3, [sp, #16]
   12aaa:	e539      	b.n	12520 <_dtoa_r+0x660>
   12aac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12aae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   12ab2:	e6da      	b.n	1286a <_dtoa_r+0x9aa>
   12ab4:	2002      	movs	r0, #2
   12ab6:	eeb0 6b48 	vmov.f64	d6, d8
   12aba:	f7ff bb48 	b.w	1214e <_dtoa_r+0x28e>
   12abe:	f1b9 0f00 	cmp.w	r9, #0
   12ac2:	f43f aeda 	beq.w	1287a <_dtoa_r+0x9ba>
   12ac6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12ac8:	2a00      	cmp	r2, #0
   12aca:	f77f abf3 	ble.w	122b4 <_dtoa_r+0x3f4>
   12ace:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   12ad2:	ee26 6b04 	vmul.f64	d6, d6, d4
   12ad6:	3001      	adds	r0, #1
   12ad8:	ee07 0a90 	vmov	s15, r0
   12adc:	9b04      	ldr	r3, [sp, #16]
   12ade:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   12ae2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   12ae6:	eea6 7b05 	vfma.f64	d7, d6, d5
   12aea:	ee17 ca90 	vmov	ip, s15
   12aee:	ec51 0b17 	vmov	r0, r1, d7
   12af2:	1e5e      	subs	r6, r3, #1
   12af4:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   12af8:	f7ff bb47 	b.w	1218a <_dtoa_r+0x2ca>
   12afc:	9b04      	ldr	r3, [sp, #16]
   12afe:	3301      	adds	r3, #1
   12b00:	9304      	str	r3, [sp, #16]
   12b02:	2331      	movs	r3, #49	; 0x31
   12b04:	f7ff bbb1 	b.w	1226a <_dtoa_r+0x3aa>
   12b08:	9b04      	ldr	r3, [sp, #16]
   12b0a:	46bb      	mov	fp, r7
   12b0c:	3301      	adds	r3, #1
   12b0e:	9304      	str	r3, [sp, #16]
   12b10:	2339      	movs	r3, #57	; 0x39
   12b12:	4637      	mov	r7, r6
   12b14:	f80b 3b01 	strb.w	r3, [fp], #1
   12b18:	4646      	mov	r6, r8
   12b1a:	e4e1      	b.n	124e0 <_dtoa_r+0x620>
   12b1c:	f04f 0a00 	mov.w	sl, #0
   12b20:	4656      	mov	r6, sl
   12b22:	e653      	b.n	127cc <_dtoa_r+0x90c>
   12b24:	9208      	str	r2, [sp, #32]
   12b26:	e47b      	b.n	12420 <_dtoa_r+0x560>
   12b28:	1c73      	adds	r3, r6, #1
   12b2a:	9304      	str	r3, [sp, #16]
   12b2c:	4689      	mov	r9, r1
   12b2e:	e4f7      	b.n	12520 <_dtoa_r+0x660>
   12b30:	f47f af22 	bne.w	12978 <_dtoa_r+0xab8>
   12b34:	07da      	lsls	r2, r3, #31
   12b36:	f57f af1f 	bpl.w	12978 <_dtoa_r+0xab8>
   12b3a:	e718      	b.n	1296e <_dtoa_r+0xaae>
   12b3c:	2b39      	cmp	r3, #57	; 0x39
   12b3e:	d0e3      	beq.n	12b08 <_dtoa_r+0xc48>
   12b40:	f1b9 0f00 	cmp.w	r9, #0
   12b44:	f73f af16 	bgt.w	12974 <_dtoa_r+0xab4>
   12b48:	e716      	b.n	12978 <_dtoa_r+0xab8>
   12b4a:	9b01      	ldr	r3, [sp, #4]
   12b4c:	2b02      	cmp	r3, #2
   12b4e:	f73f ae28 	bgt.w	127a2 <_dtoa_r+0x8e2>
   12b52:	9704      	str	r7, [sp, #16]
   12b54:	e5ba      	b.n	126cc <_dtoa_r+0x80c>
   12b56:	4601      	mov	r1, r0
   12b58:	e78d      	b.n	12a76 <_dtoa_r+0xbb6>
   12b5a:	9b01      	ldr	r3, [sp, #4]
   12b5c:	2b02      	cmp	r3, #2
   12b5e:	f73f ae20 	bgt.w	127a2 <_dtoa_r+0x8e2>
   12b62:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   12b66:	9704      	str	r7, [sp, #16]
   12b68:	e52b      	b.n	125c2 <_dtoa_r+0x702>
   12b6a:	2002      	movs	r0, #2
   12b6c:	f7ff baef 	b.w	1214e <_dtoa_r+0x28e>
   12b70:	4b0b      	ldr	r3, [pc, #44]	; (12ba0 <_dtoa_r+0xce0>)
   12b72:	480c      	ldr	r0, [pc, #48]	; (12ba4 <_dtoa_r+0xce4>)
   12b74:	2200      	movs	r2, #0
   12b76:	f240 11af 	movw	r1, #431	; 0x1af
   12b7a:	f7ff f8b1 	bl	11ce0 <__assert_func>
   12b7e:	4b08      	ldr	r3, [pc, #32]	; (12ba0 <_dtoa_r+0xce0>)
   12b80:	4808      	ldr	r0, [pc, #32]	; (12ba4 <_dtoa_r+0xce4>)
   12b82:	463a      	mov	r2, r7
   12b84:	f240 21ef 	movw	r1, #751	; 0x2ef
   12b88:	f7ff f8aa 	bl	11ce0 <__assert_func>
   12b8c:	4b06      	ldr	r3, [pc, #24]	; (12ba8 <_dtoa_r+0xce8>)
   12b8e:	9300      	str	r3, [sp, #0]
   12b90:	f7ff b9d2 	b.w	11f38 <_dtoa_r+0x78>
   12b94:	9b02      	ldr	r3, [sp, #8]
   12b96:	9308      	str	r3, [sp, #32]
   12b98:	e4f7      	b.n	1258a <_dtoa_r+0x6ca>
   12b9a:	bf00      	nop
   12b9c:	200003a8 	.word	0x200003a8
   12ba0:	20000b7c 	.word	0x20000b7c
   12ba4:	20000e6c 	.word	0x20000e6c
   12ba8:	20000e5c 	.word	0x20000e5c

00012bac <_strtoul_l.constprop.0>:
   12bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12bb0:	4607      	mov	r7, r0
   12bb2:	484c      	ldr	r0, [pc, #304]	; (12ce4 <_strtoul_l.constprop.0+0x138>)
   12bb4:	460e      	mov	r6, r1
   12bb6:	4635      	mov	r5, r6
   12bb8:	f816 eb01 	ldrb.w	lr, [r6], #1
   12bbc:	f810 c00e 	ldrb.w	ip, [r0, lr]
   12bc0:	f01c 0c08 	ands.w	ip, ip, #8
   12bc4:	d1f7      	bne.n	12bb6 <_strtoul_l.constprop.0+0xa>
   12bc6:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   12bca:	d05a      	beq.n	12c82 <_strtoul_l.constprop.0+0xd6>
   12bcc:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   12bd0:	bf03      	ittte	eq
   12bd2:	f896 e000 	ldrbeq.w	lr, [r6]
   12bd6:	4664      	moveq	r4, ip
   12bd8:	1cae      	addeq	r6, r5, #2
   12bda:	4664      	movne	r4, ip
   12bdc:	b15b      	cbz	r3, 12bf6 <_strtoul_l.constprop.0+0x4a>
   12bde:	2b10      	cmp	r3, #16
   12be0:	d054      	beq.n	12c8c <_strtoul_l.constprop.0+0xe0>
   12be2:	f04f 38ff 	mov.w	r8, #4294967295
   12be6:	fbb8 f8f3 	udiv	r8, r8, r3
   12bea:	fb03 fa08 	mul.w	sl, r3, r8
   12bee:	ea6f 0a0a 	mvn.w	sl, sl
   12bf2:	4699      	mov	r9, r3
   12bf4:	e008      	b.n	12c08 <_strtoul_l.constprop.0+0x5c>
   12bf6:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   12bfa:	d05a      	beq.n	12cb2 <_strtoul_l.constprop.0+0x106>
   12bfc:	230a      	movs	r3, #10
   12bfe:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 12ce8 <_strtoul_l.constprop.0+0x13c>
   12c02:	f04f 0a05 	mov.w	sl, #5
   12c06:	4699      	mov	r9, r3
   12c08:	2500      	movs	r5, #0
   12c0a:	4628      	mov	r0, r5
   12c0c:	e005      	b.n	12c1a <_strtoul_l.constprop.0+0x6e>
   12c0e:	d02c      	beq.n	12c6a <_strtoul_l.constprop.0+0xbe>
   12c10:	fb09 c000 	mla	r0, r9, r0, ip
   12c14:	2501      	movs	r5, #1
   12c16:	f816 eb01 	ldrb.w	lr, [r6], #1
   12c1a:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   12c1e:	f1bc 0f09 	cmp.w	ip, #9
   12c22:	d906      	bls.n	12c32 <_strtoul_l.constprop.0+0x86>
   12c24:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   12c28:	f1bc 0f19 	cmp.w	ip, #25
   12c2c:	d80b      	bhi.n	12c46 <_strtoul_l.constprop.0+0x9a>
   12c2e:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   12c32:	4563      	cmp	r3, ip
   12c34:	dd10      	ble.n	12c58 <_strtoul_l.constprop.0+0xac>
   12c36:	f1b5 3fff 	cmp.w	r5, #4294967295
   12c3a:	d0ec      	beq.n	12c16 <_strtoul_l.constprop.0+0x6a>
   12c3c:	4540      	cmp	r0, r8
   12c3e:	d9e6      	bls.n	12c0e <_strtoul_l.constprop.0+0x62>
   12c40:	f04f 35ff 	mov.w	r5, #4294967295
   12c44:	e7e7      	b.n	12c16 <_strtoul_l.constprop.0+0x6a>
   12c46:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   12c4a:	f1bc 0f19 	cmp.w	ip, #25
   12c4e:	d803      	bhi.n	12c58 <_strtoul_l.constprop.0+0xac>
   12c50:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   12c54:	4563      	cmp	r3, ip
   12c56:	dcee      	bgt.n	12c36 <_strtoul_l.constprop.0+0x8a>
   12c58:	1c6b      	adds	r3, r5, #1
   12c5a:	d00b      	beq.n	12c74 <_strtoul_l.constprop.0+0xc8>
   12c5c:	b104      	cbz	r4, 12c60 <_strtoul_l.constprop.0+0xb4>
   12c5e:	4240      	negs	r0, r0
   12c60:	b10a      	cbz	r2, 12c66 <_strtoul_l.constprop.0+0xba>
   12c62:	b965      	cbnz	r5, 12c7e <_strtoul_l.constprop.0+0xd2>
   12c64:	6011      	str	r1, [r2, #0]
   12c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12c6a:	45d4      	cmp	ip, sl
   12c6c:	ddd0      	ble.n	12c10 <_strtoul_l.constprop.0+0x64>
   12c6e:	f04f 35ff 	mov.w	r5, #4294967295
   12c72:	e7d0      	b.n	12c16 <_strtoul_l.constprop.0+0x6a>
   12c74:	2322      	movs	r3, #34	; 0x22
   12c76:	603b      	str	r3, [r7, #0]
   12c78:	4628      	mov	r0, r5
   12c7a:	2a00      	cmp	r2, #0
   12c7c:	d0f3      	beq.n	12c66 <_strtoul_l.constprop.0+0xba>
   12c7e:	1e71      	subs	r1, r6, #1
   12c80:	e7f0      	b.n	12c64 <_strtoul_l.constprop.0+0xb8>
   12c82:	f896 e000 	ldrb.w	lr, [r6]
   12c86:	2401      	movs	r4, #1
   12c88:	1cae      	adds	r6, r5, #2
   12c8a:	e7a7      	b.n	12bdc <_strtoul_l.constprop.0+0x30>
   12c8c:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   12c90:	d121      	bne.n	12cd6 <_strtoul_l.constprop.0+0x12a>
   12c92:	7830      	ldrb	r0, [r6, #0]
   12c94:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   12c98:	2858      	cmp	r0, #88	; 0x58
   12c9a:	d116      	bne.n	12cca <_strtoul_l.constprop.0+0x11e>
   12c9c:	f04f 0910 	mov.w	r9, #16
   12ca0:	f896 e001 	ldrb.w	lr, [r6, #1]
   12ca4:	f04f 0a0f 	mov.w	sl, #15
   12ca8:	3602      	adds	r6, #2
   12caa:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   12cae:	464b      	mov	r3, r9
   12cb0:	e7aa      	b.n	12c08 <_strtoul_l.constprop.0+0x5c>
   12cb2:	7833      	ldrb	r3, [r6, #0]
   12cb4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12cb8:	2b58      	cmp	r3, #88	; 0x58
   12cba:	d0ef      	beq.n	12c9c <_strtoul_l.constprop.0+0xf0>
   12cbc:	2308      	movs	r3, #8
   12cbe:	f04f 0a07 	mov.w	sl, #7
   12cc2:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   12cc6:	4699      	mov	r9, r3
   12cc8:	e79e      	b.n	12c08 <_strtoul_l.constprop.0+0x5c>
   12cca:	4699      	mov	r9, r3
   12ccc:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   12cd0:	f04f 0a0f 	mov.w	sl, #15
   12cd4:	e798      	b.n	12c08 <_strtoul_l.constprop.0+0x5c>
   12cd6:	f04f 0a0f 	mov.w	sl, #15
   12cda:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   12cde:	4699      	mov	r9, r3
   12ce0:	e792      	b.n	12c08 <_strtoul_l.constprop.0+0x5c>
   12ce2:	bf00      	nop
   12ce4:	20000d59 	.word	0x20000d59
   12ce8:	19999999 	.word	0x19999999

00012cec <_strtoul_r>:
   12cec:	f7ff bf5e 	b.w	12bac <_strtoul_l.constprop.0>

00012cf0 <_strtoll_l.constprop.0>:
   12cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cf4:	b085      	sub	sp, #20
   12cf6:	461f      	mov	r7, r3
   12cf8:	4b57      	ldr	r3, [pc, #348]	; (12e58 <_strtoll_l.constprop.0+0x168>)
   12cfa:	9003      	str	r0, [sp, #12]
   12cfc:	468a      	mov	sl, r1
   12cfe:	9200      	str	r2, [sp, #0]
   12d00:	460d      	mov	r5, r1
   12d02:	462a      	mov	r2, r5
   12d04:	f815 4b01 	ldrb.w	r4, [r5], #1
   12d08:	5d1e      	ldrb	r6, [r3, r4]
   12d0a:	f016 0608 	ands.w	r6, r6, #8
   12d0e:	d1f8      	bne.n	12d02 <_strtoll_l.constprop.0+0x12>
   12d10:	2c2d      	cmp	r4, #45	; 0x2d
   12d12:	d075      	beq.n	12e00 <_strtoll_l.constprop.0+0x110>
   12d14:	2c2b      	cmp	r4, #43	; 0x2b
   12d16:	bf05      	ittet	eq
   12d18:	782c      	ldrbeq	r4, [r5, #0]
   12d1a:	9602      	streq	r6, [sp, #8]
   12d1c:	9602      	strne	r6, [sp, #8]
   12d1e:	1c95      	addeq	r5, r2, #2
   12d20:	f04f 36ff 	mov.w	r6, #4294967295
   12d24:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   12d28:	b12f      	cbz	r7, 12d36 <_strtoll_l.constprop.0+0x46>
   12d2a:	2f10      	cmp	r7, #16
   12d2c:	d06f      	beq.n	12e0e <_strtoll_l.constprop.0+0x11e>
   12d2e:	46b8      	mov	r8, r7
   12d30:	ea4f 79e7 	mov.w	r9, r7, asr #31
   12d34:	e005      	b.n	12d42 <_strtoll_l.constprop.0+0x52>
   12d36:	2c30      	cmp	r4, #48	; 0x30
   12d38:	d074      	beq.n	12e24 <_strtoll_l.constprop.0+0x134>
   12d3a:	f04f 080a 	mov.w	r8, #10
   12d3e:	46b9      	mov	r9, r7
   12d40:	4647      	mov	r7, r8
   12d42:	4642      	mov	r2, r8
   12d44:	464b      	mov	r3, r9
   12d46:	4630      	mov	r0, r6
   12d48:	4659      	mov	r1, fp
   12d4a:	f7f7 fca1 	bl	a690 <__aeabi_uldivmod>
   12d4e:	2300      	movs	r3, #0
   12d50:	9201      	str	r2, [sp, #4]
   12d52:	4684      	mov	ip, r0
   12d54:	460a      	mov	r2, r1
   12d56:	4618      	mov	r0, r3
   12d58:	4619      	mov	r1, r3
   12d5a:	e011      	b.n	12d80 <_strtoll_l.constprop.0+0x90>
   12d5c:	428a      	cmp	r2, r1
   12d5e:	bf08      	it	eq
   12d60:	4584      	cmpeq	ip, r0
   12d62:	d03d      	beq.n	12de0 <_strtoll_l.constprop.0+0xf0>
   12d64:	fb00 f309 	mul.w	r3, r0, r9
   12d68:	fb08 3301 	mla	r3, r8, r1, r3
   12d6c:	fba0 0108 	umull	r0, r1, r0, r8
   12d70:	440b      	add	r3, r1
   12d72:	eb1e 0000 	adds.w	r0, lr, r0
   12d76:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   12d7a:	2301      	movs	r3, #1
   12d7c:	f815 4b01 	ldrb.w	r4, [r5], #1
   12d80:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   12d84:	f1be 0f09 	cmp.w	lr, #9
   12d88:	d906      	bls.n	12d98 <_strtoll_l.constprop.0+0xa8>
   12d8a:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   12d8e:	f1be 0f19 	cmp.w	lr, #25
   12d92:	d80c      	bhi.n	12dae <_strtoll_l.constprop.0+0xbe>
   12d94:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   12d98:	4577      	cmp	r7, lr
   12d9a:	dd11      	ble.n	12dc0 <_strtoll_l.constprop.0+0xd0>
   12d9c:	1c5c      	adds	r4, r3, #1
   12d9e:	d0ed      	beq.n	12d7c <_strtoll_l.constprop.0+0x8c>
   12da0:	4584      	cmp	ip, r0
   12da2:	eb72 0301 	sbcs.w	r3, r2, r1
   12da6:	d2d9      	bcs.n	12d5c <_strtoll_l.constprop.0+0x6c>
   12da8:	f04f 33ff 	mov.w	r3, #4294967295
   12dac:	e7e6      	b.n	12d7c <_strtoll_l.constprop.0+0x8c>
   12dae:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   12db2:	f1be 0f19 	cmp.w	lr, #25
   12db6:	d803      	bhi.n	12dc0 <_strtoll_l.constprop.0+0xd0>
   12db8:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   12dbc:	4577      	cmp	r7, lr
   12dbe:	dced      	bgt.n	12d9c <_strtoll_l.constprop.0+0xac>
   12dc0:	1c5a      	adds	r2, r3, #1
   12dc2:	d013      	beq.n	12dec <_strtoll_l.constprop.0+0xfc>
   12dc4:	9a02      	ldr	r2, [sp, #8]
   12dc6:	b112      	cbz	r2, 12dce <_strtoll_l.constprop.0+0xde>
   12dc8:	4240      	negs	r0, r0
   12dca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12dce:	9a00      	ldr	r2, [sp, #0]
   12dd0:	b11a      	cbz	r2, 12dda <_strtoll_l.constprop.0+0xea>
   12dd2:	bba3      	cbnz	r3, 12e3e <_strtoll_l.constprop.0+0x14e>
   12dd4:	9b00      	ldr	r3, [sp, #0]
   12dd6:	f8c3 a000 	str.w	sl, [r3]
   12dda:	b005      	add	sp, #20
   12ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12de0:	9b01      	ldr	r3, [sp, #4]
   12de2:	4573      	cmp	r3, lr
   12de4:	dabe      	bge.n	12d64 <_strtoll_l.constprop.0+0x74>
   12de6:	f04f 33ff 	mov.w	r3, #4294967295
   12dea:	e7c7      	b.n	12d7c <_strtoll_l.constprop.0+0x8c>
   12dec:	9a03      	ldr	r2, [sp, #12]
   12dee:	2322      	movs	r3, #34	; 0x22
   12df0:	6013      	str	r3, [r2, #0]
   12df2:	9b00      	ldr	r3, [sp, #0]
   12df4:	b333      	cbz	r3, 12e44 <_strtoll_l.constprop.0+0x154>
   12df6:	f105 3aff 	add.w	sl, r5, #4294967295
   12dfa:	4630      	mov	r0, r6
   12dfc:	4659      	mov	r1, fp
   12dfe:	e7e9      	b.n	12dd4 <_strtoll_l.constprop.0+0xe4>
   12e00:	2301      	movs	r3, #1
   12e02:	782c      	ldrb	r4, [r5, #0]
   12e04:	9302      	str	r3, [sp, #8]
   12e06:	1c95      	adds	r5, r2, #2
   12e08:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   12e0c:	e78c      	b.n	12d28 <_strtoll_l.constprop.0+0x38>
   12e0e:	2c30      	cmp	r4, #48	; 0x30
   12e10:	d104      	bne.n	12e1c <_strtoll_l.constprop.0+0x12c>
   12e12:	782b      	ldrb	r3, [r5, #0]
   12e14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12e18:	2b58      	cmp	r3, #88	; 0x58
   12e1a:	d008      	beq.n	12e2e <_strtoll_l.constprop.0+0x13e>
   12e1c:	46b8      	mov	r8, r7
   12e1e:	f04f 0900 	mov.w	r9, #0
   12e22:	e78e      	b.n	12d42 <_strtoll_l.constprop.0+0x52>
   12e24:	782b      	ldrb	r3, [r5, #0]
   12e26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12e2a:	2b58      	cmp	r3, #88	; 0x58
   12e2c:	d10f      	bne.n	12e4e <_strtoll_l.constprop.0+0x15e>
   12e2e:	f04f 0810 	mov.w	r8, #16
   12e32:	786c      	ldrb	r4, [r5, #1]
   12e34:	f04f 0900 	mov.w	r9, #0
   12e38:	3502      	adds	r5, #2
   12e3a:	4647      	mov	r7, r8
   12e3c:	e781      	b.n	12d42 <_strtoll_l.constprop.0+0x52>
   12e3e:	4606      	mov	r6, r0
   12e40:	468b      	mov	fp, r1
   12e42:	e7d8      	b.n	12df6 <_strtoll_l.constprop.0+0x106>
   12e44:	4630      	mov	r0, r6
   12e46:	4659      	mov	r1, fp
   12e48:	b005      	add	sp, #20
   12e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e4e:	f04f 0808 	mov.w	r8, #8
   12e52:	46b9      	mov	r9, r7
   12e54:	4647      	mov	r7, r8
   12e56:	e774      	b.n	12d42 <_strtoll_l.constprop.0+0x52>
   12e58:	20000d59 	.word	0x20000d59

00012e5c <_strtoll_r>:
   12e5c:	f7ff bf48 	b.w	12cf0 <_strtoll_l.constprop.0>

00012e60 <_strtoull_l.constprop.0>:
   12e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e64:	b085      	sub	sp, #20
   12e66:	468b      	mov	fp, r1
   12e68:	9201      	str	r2, [sp, #4]
   12e6a:	4a62      	ldr	r2, [pc, #392]	; (12ff4 <_strtoull_l.constprop.0+0x194>)
   12e6c:	9003      	str	r0, [sp, #12]
   12e6e:	461e      	mov	r6, r3
   12e70:	460d      	mov	r5, r1
   12e72:	4629      	mov	r1, r5
   12e74:	f815 4b01 	ldrb.w	r4, [r5], #1
   12e78:	5d13      	ldrb	r3, [r2, r4]
   12e7a:	f013 0308 	ands.w	r3, r3, #8
   12e7e:	d1f8      	bne.n	12e72 <_strtoull_l.constprop.0+0x12>
   12e80:	2c2d      	cmp	r4, #45	; 0x2d
   12e82:	f000 8082 	beq.w	12f8a <_strtoull_l.constprop.0+0x12a>
   12e86:	2c2b      	cmp	r4, #43	; 0x2b
   12e88:	bf03      	ittte	eq
   12e8a:	782c      	ldrbeq	r4, [r5, #0]
   12e8c:	9302      	streq	r3, [sp, #8]
   12e8e:	1c8d      	addeq	r5, r1, #2
   12e90:	9302      	strne	r3, [sp, #8]
   12e92:	b1be      	cbz	r6, 12ec4 <_strtoull_l.constprop.0+0x64>
   12e94:	2e10      	cmp	r6, #16
   12e96:	d07d      	beq.n	12f94 <_strtoull_l.constprop.0+0x134>
   12e98:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   12e9c:	4632      	mov	r2, r6
   12e9e:	4653      	mov	r3, sl
   12ea0:	f04f 30ff 	mov.w	r0, #4294967295
   12ea4:	f04f 31ff 	mov.w	r1, #4294967295
   12ea8:	f7f7 fbf2 	bl	a690 <__aeabi_uldivmod>
   12eac:	4632      	mov	r2, r6
   12eae:	4607      	mov	r7, r0
   12eb0:	4688      	mov	r8, r1
   12eb2:	4653      	mov	r3, sl
   12eb4:	f04f 30ff 	mov.w	r0, #4294967295
   12eb8:	f04f 31ff 	mov.w	r1, #4294967295
   12ebc:	46b1      	mov	r9, r6
   12ebe:	f7f7 fbe7 	bl	a690 <__aeabi_uldivmod>
   12ec2:	e00a      	b.n	12eda <_strtoull_l.constprop.0+0x7a>
   12ec4:	2c30      	cmp	r4, #48	; 0x30
   12ec6:	d079      	beq.n	12fbc <_strtoull_l.constprop.0+0x15c>
   12ec8:	f04f 090a 	mov.w	r9, #10
   12ecc:	f8df 8128 	ldr.w	r8, [pc, #296]	; 12ff8 <_strtoull_l.constprop.0+0x198>
   12ed0:	46b2      	mov	sl, r6
   12ed2:	2205      	movs	r2, #5
   12ed4:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   12ed8:	464e      	mov	r6, r9
   12eda:	f04f 0c00 	mov.w	ip, #0
   12ede:	4660      	mov	r0, ip
   12ee0:	4661      	mov	r1, ip
   12ee2:	e011      	b.n	12f08 <_strtoull_l.constprop.0+0xa8>
   12ee4:	4541      	cmp	r1, r8
   12ee6:	bf08      	it	eq
   12ee8:	42b8      	cmpeq	r0, r7
   12eea:	d03e      	beq.n	12f6a <_strtoull_l.constprop.0+0x10a>
   12eec:	fb00 f40a 	mul.w	r4, r0, sl
   12ef0:	fb09 4101 	mla	r1, r9, r1, r4
   12ef4:	fba0 0409 	umull	r0, r4, r0, r9
   12ef8:	4421      	add	r1, r4
   12efa:	1818      	adds	r0, r3, r0
   12efc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   12f00:	f04f 0c01 	mov.w	ip, #1
   12f04:	f815 4b01 	ldrb.w	r4, [r5], #1
   12f08:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   12f0c:	2b09      	cmp	r3, #9
   12f0e:	d905      	bls.n	12f1c <_strtoull_l.constprop.0+0xbc>
   12f10:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   12f14:	2b19      	cmp	r3, #25
   12f16:	d80d      	bhi.n	12f34 <_strtoull_l.constprop.0+0xd4>
   12f18:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   12f1c:	429e      	cmp	r6, r3
   12f1e:	dd11      	ble.n	12f44 <_strtoull_l.constprop.0+0xe4>
   12f20:	f1bc 3fff 	cmp.w	ip, #4294967295
   12f24:	d0ee      	beq.n	12f04 <_strtoull_l.constprop.0+0xa4>
   12f26:	4287      	cmp	r7, r0
   12f28:	eb78 0401 	sbcs.w	r4, r8, r1
   12f2c:	d2da      	bcs.n	12ee4 <_strtoull_l.constprop.0+0x84>
   12f2e:	f04f 3cff 	mov.w	ip, #4294967295
   12f32:	e7e7      	b.n	12f04 <_strtoull_l.constprop.0+0xa4>
   12f34:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   12f38:	2b19      	cmp	r3, #25
   12f3a:	d803      	bhi.n	12f44 <_strtoull_l.constprop.0+0xe4>
   12f3c:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   12f40:	429e      	cmp	r6, r3
   12f42:	dced      	bgt.n	12f20 <_strtoull_l.constprop.0+0xc0>
   12f44:	f1bc 3fff 	cmp.w	ip, #4294967295
   12f48:	d014      	beq.n	12f74 <_strtoull_l.constprop.0+0x114>
   12f4a:	9b02      	ldr	r3, [sp, #8]
   12f4c:	b113      	cbz	r3, 12f54 <_strtoull_l.constprop.0+0xf4>
   12f4e:	4240      	negs	r0, r0
   12f50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12f54:	9b01      	ldr	r3, [sp, #4]
   12f56:	b12b      	cbz	r3, 12f64 <_strtoull_l.constprop.0+0x104>
   12f58:	f1bc 0f00 	cmp.w	ip, #0
   12f5c:	d112      	bne.n	12f84 <_strtoull_l.constprop.0+0x124>
   12f5e:	9b01      	ldr	r3, [sp, #4]
   12f60:	f8c3 b000 	str.w	fp, [r3]
   12f64:	b005      	add	sp, #20
   12f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f6a:	4293      	cmp	r3, r2
   12f6c:	ddbe      	ble.n	12eec <_strtoull_l.constprop.0+0x8c>
   12f6e:	f04f 3cff 	mov.w	ip, #4294967295
   12f72:	e7c7      	b.n	12f04 <_strtoull_l.constprop.0+0xa4>
   12f74:	9a03      	ldr	r2, [sp, #12]
   12f76:	2322      	movs	r3, #34	; 0x22
   12f78:	6013      	str	r3, [r2, #0]
   12f7a:	9b01      	ldr	r3, [sp, #4]
   12f7c:	4660      	mov	r0, ip
   12f7e:	4661      	mov	r1, ip
   12f80:	2b00      	cmp	r3, #0
   12f82:	d0ef      	beq.n	12f64 <_strtoull_l.constprop.0+0x104>
   12f84:	f105 3bff 	add.w	fp, r5, #4294967295
   12f88:	e7e9      	b.n	12f5e <_strtoull_l.constprop.0+0xfe>
   12f8a:	2301      	movs	r3, #1
   12f8c:	782c      	ldrb	r4, [r5, #0]
   12f8e:	9302      	str	r3, [sp, #8]
   12f90:	1c8d      	adds	r5, r1, #2
   12f92:	e77e      	b.n	12e92 <_strtoull_l.constprop.0+0x32>
   12f94:	2c30      	cmp	r4, #48	; 0x30
   12f96:	d123      	bne.n	12fe0 <_strtoull_l.constprop.0+0x180>
   12f98:	782b      	ldrb	r3, [r5, #0]
   12f9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12f9e:	2b58      	cmp	r3, #88	; 0x58
   12fa0:	d11b      	bne.n	12fda <_strtoull_l.constprop.0+0x17a>
   12fa2:	f04f 0910 	mov.w	r9, #16
   12fa6:	786c      	ldrb	r4, [r5, #1]
   12fa8:	220f      	movs	r2, #15
   12faa:	3502      	adds	r5, #2
   12fac:	f04f 37ff 	mov.w	r7, #4294967295
   12fb0:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   12fb4:	f04f 0a00 	mov.w	sl, #0
   12fb8:	464e      	mov	r6, r9
   12fba:	e78e      	b.n	12eda <_strtoull_l.constprop.0+0x7a>
   12fbc:	782b      	ldrb	r3, [r5, #0]
   12fbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12fc2:	2b58      	cmp	r3, #88	; 0x58
   12fc4:	d0ed      	beq.n	12fa2 <_strtoull_l.constprop.0+0x142>
   12fc6:	f04f 0908 	mov.w	r9, #8
   12fca:	46b2      	mov	sl, r6
   12fcc:	2207      	movs	r2, #7
   12fce:	f04f 37ff 	mov.w	r7, #4294967295
   12fd2:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   12fd6:	464e      	mov	r6, r9
   12fd8:	e77f      	b.n	12eda <_strtoull_l.constprop.0+0x7a>
   12fda:	f04f 0a00 	mov.w	sl, #0
   12fde:	e75d      	b.n	12e9c <_strtoull_l.constprop.0+0x3c>
   12fe0:	220f      	movs	r2, #15
   12fe2:	f04f 37ff 	mov.w	r7, #4294967295
   12fe6:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   12fea:	46b1      	mov	r9, r6
   12fec:	f04f 0a00 	mov.w	sl, #0
   12ff0:	e773      	b.n	12eda <_strtoull_l.constprop.0+0x7a>
   12ff2:	bf00      	nop
   12ff4:	20000d59 	.word	0x20000d59
   12ff8:	19999999 	.word	0x19999999

00012ffc <_strtoull_r>:
   12ffc:	f7ff bf30 	b.w	12e60 <_strtoull_l.constprop.0>

00013000 <_mbrtowc_r>:
   13000:	b570      	push	{r4, r5, r6, lr}
   13002:	b082      	sub	sp, #8
   13004:	4604      	mov	r4, r0
   13006:	9d06      	ldr	r5, [sp, #24]
   13008:	b155      	cbz	r5, 13020 <_mbrtowc_r+0x20>
   1300a:	b16a      	cbz	r2, 13028 <_mbrtowc_r+0x28>
   1300c:	480f      	ldr	r0, [pc, #60]	; (1304c <_mbrtowc_r+0x4c>)
   1300e:	9500      	str	r5, [sp, #0]
   13010:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   13014:	4620      	mov	r0, r4
   13016:	47b0      	blx	r6
   13018:	1c43      	adds	r3, r0, #1
   1301a:	d010      	beq.n	1303e <_mbrtowc_r+0x3e>
   1301c:	b002      	add	sp, #8
   1301e:	bd70      	pop	{r4, r5, r6, pc}
   13020:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   13024:	2a00      	cmp	r2, #0
   13026:	d1f1      	bne.n	1300c <_mbrtowc_r+0xc>
   13028:	4b08      	ldr	r3, [pc, #32]	; (1304c <_mbrtowc_r+0x4c>)
   1302a:	9500      	str	r5, [sp, #0]
   1302c:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   13030:	4611      	mov	r1, r2
   13032:	2301      	movs	r3, #1
   13034:	4a06      	ldr	r2, [pc, #24]	; (13050 <_mbrtowc_r+0x50>)
   13036:	4620      	mov	r0, r4
   13038:	47b0      	blx	r6
   1303a:	1c43      	adds	r3, r0, #1
   1303c:	d1ee      	bne.n	1301c <_mbrtowc_r+0x1c>
   1303e:	2200      	movs	r2, #0
   13040:	238a      	movs	r3, #138	; 0x8a
   13042:	602a      	str	r2, [r5, #0]
   13044:	6023      	str	r3, [r4, #0]
   13046:	b002      	add	sp, #8
   13048:	bd70      	pop	{r4, r5, r6, pc}
   1304a:	bf00      	nop
   1304c:	2000889c 	.word	0x2000889c
   13050:	200082d8 	.word	0x200082d8

00013054 <_wcrtomb_r>:
   13054:	b570      	push	{r4, r5, r6, lr}
   13056:	4605      	mov	r5, r0
   13058:	b084      	sub	sp, #16
   1305a:	b15b      	cbz	r3, 13074 <_wcrtomb_r+0x20>
   1305c:	461c      	mov	r4, r3
   1305e:	b169      	cbz	r1, 1307c <_wcrtomb_r+0x28>
   13060:	4b0e      	ldr	r3, [pc, #56]	; (1309c <_wcrtomb_r+0x48>)
   13062:	4628      	mov	r0, r5
   13064:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   13068:	4623      	mov	r3, r4
   1306a:	47b0      	blx	r6
   1306c:	1c43      	adds	r3, r0, #1
   1306e:	d00f      	beq.n	13090 <_wcrtomb_r+0x3c>
   13070:	b004      	add	sp, #16
   13072:	bd70      	pop	{r4, r5, r6, pc}
   13074:	f500 7482 	add.w	r4, r0, #260	; 0x104
   13078:	2900      	cmp	r1, #0
   1307a:	d1f1      	bne.n	13060 <_wcrtomb_r+0xc>
   1307c:	4a07      	ldr	r2, [pc, #28]	; (1309c <_wcrtomb_r+0x48>)
   1307e:	4623      	mov	r3, r4
   13080:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   13084:	4628      	mov	r0, r5
   13086:	460a      	mov	r2, r1
   13088:	a901      	add	r1, sp, #4
   1308a:	47b0      	blx	r6
   1308c:	1c43      	adds	r3, r0, #1
   1308e:	d1ef      	bne.n	13070 <_wcrtomb_r+0x1c>
   13090:	2200      	movs	r2, #0
   13092:	238a      	movs	r3, #138	; 0x8a
   13094:	6022      	str	r2, [r4, #0]
   13096:	602b      	str	r3, [r5, #0]
   13098:	b004      	add	sp, #16
   1309a:	bd70      	pop	{r4, r5, r6, pc}
   1309c:	2000889c 	.word	0x2000889c

000130a0 <_wcsrtombs_r>:
   130a0:	b510      	push	{r4, lr}
   130a2:	b082      	sub	sp, #8
   130a4:	9c04      	ldr	r4, [sp, #16]
   130a6:	e9cd 3400 	strd	r3, r4, [sp]
   130aa:	f04f 33ff 	mov.w	r3, #4294967295
   130ae:	f001 fd9f 	bl	14bf0 <_wcsnrtombs_r>
   130b2:	b002      	add	sp, #8
   130b4:	bd10      	pop	{r4, pc}
   130b6:	bf00      	nop

000130b8 <iswspace>:
   130b8:	2100      	movs	r1, #0
   130ba:	f000 b801 	b.w	130c0 <iswspace_l>
   130be:	bf00      	nop

000130c0 <iswspace_l>:
   130c0:	b510      	push	{r4, lr}
   130c2:	f000 f8ab 	bl	1321c <_jp2uc_l>
   130c6:	4604      	mov	r4, r0
   130c8:	f001 fda4 	bl	14c14 <category>
   130cc:	f1a0 031a 	sub.w	r3, r0, #26
   130d0:	b2db      	uxtb	r3, r3
   130d2:	2b02      	cmp	r3, #2
   130d4:	d906      	bls.n	130e4 <iswspace_l+0x24>
   130d6:	f1a4 0009 	sub.w	r0, r4, #9
   130da:	2804      	cmp	r0, #4
   130dc:	bf8c      	ite	hi
   130de:	2000      	movhi	r0, #0
   130e0:	2001      	movls	r0, #1
   130e2:	bd10      	pop	{r4, pc}
   130e4:	2001      	movs	r0, #1
   130e6:	bd10      	pop	{r4, pc}

000130e8 <__jp2uc>:
   130e8:	2902      	cmp	r1, #2
   130ea:	d032      	beq.n	13152 <__jp2uc+0x6a>
   130ec:	2903      	cmp	r1, #3
   130ee:	f3c0 2307 	ubfx	r3, r0, #8, #8
   130f2:	bf1d      	ittte	ne
   130f4:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   130f8:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   130fc:	b2d2      	uxtbne	r2, r2
   130fe:	b2c2      	uxtbeq	r2, r0
   13100:	f103 0150 	add.w	r1, r3, #80	; 0x50
   13104:	b2c9      	uxtb	r1, r1
   13106:	291f      	cmp	r1, #31
   13108:	d806      	bhi.n	13118 <__jp2uc+0x30>
   1310a:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   1310e:	4288      	cmp	r0, r1
   13110:	d969      	bls.n	131e6 <__jp2uc+0xfe>
   13112:	f04f 30ff 	mov.w	r0, #4294967295
   13116:	4770      	bx	lr
   13118:	f103 0130 	add.w	r1, r3, #48	; 0x30
   1311c:	b2c9      	uxtb	r1, r1
   1311e:	2924      	cmp	r1, #36	; 0x24
   13120:	d80e      	bhi.n	13140 <__jp2uc+0x58>
   13122:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   13126:	4288      	cmp	r0, r1
   13128:	d8f3      	bhi.n	13112 <__jp2uc+0x2a>
   1312a:	3bd0      	subs	r3, #208	; 0xd0
   1312c:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   13130:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   13134:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   13138:	4a30      	ldr	r2, [pc, #192]	; (131fc <__jp2uc+0x114>)
   1313a:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1313e:	4770      	bx	lr
   13140:	3ba1      	subs	r3, #161	; 0xa1
   13142:	2b07      	cmp	r3, #7
   13144:	d8e5      	bhi.n	13112 <__jp2uc+0x2a>
   13146:	e8df f003 	tbb	[pc, r3]
   1314a:	3e48      	.short	0x3e48
   1314c:	25292e34 	.word	0x25292e34
   13150:	1921      	.short	0x1921
   13152:	b2c2      	uxtb	r2, r0
   13154:	2a9e      	cmp	r2, #158	; 0x9e
   13156:	f3c0 2107 	ubfx	r1, r0, #8, #8
   1315a:	d90b      	bls.n	13174 <__jp2uc+0x8c>
   1315c:	3223      	adds	r2, #35	; 0x23
   1315e:	b2d2      	uxtb	r2, r2
   13160:	2380      	movs	r3, #128	; 0x80
   13162:	299f      	cmp	r1, #159	; 0x9f
   13164:	bf94      	ite	ls
   13166:	3970      	subls	r1, #112	; 0x70
   13168:	3150      	addhi	r1, #80	; 0x50
   1316a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   1316e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   13172:	e7c5      	b.n	13100 <__jp2uc+0x18>
   13174:	3a7e      	subs	r2, #126	; 0x7e
   13176:	b2d2      	uxtb	r2, r2
   13178:	237f      	movs	r3, #127	; 0x7f
   1317a:	e7f2      	b.n	13162 <__jp2uc+0x7a>
   1317c:	2ac0      	cmp	r2, #192	; 0xc0
   1317e:	d8c8      	bhi.n	13112 <__jp2uc+0x2a>
   13180:	4b1f      	ldr	r3, [pc, #124]	; (13200 <__jp2uc+0x118>)
   13182:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   13186:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1318a:	4770      	bx	lr
   1318c:	2af1      	cmp	r2, #241	; 0xf1
   1318e:	d8c0      	bhi.n	13112 <__jp2uc+0x2a>
   13190:	4b1c      	ldr	r3, [pc, #112]	; (13204 <__jp2uc+0x11c>)
   13192:	e019      	b.n	131c8 <__jp2uc+0xe0>
   13194:	2ad8      	cmp	r2, #216	; 0xd8
   13196:	d8bc      	bhi.n	13112 <__jp2uc+0x2a>
   13198:	4b1b      	ldr	r3, [pc, #108]	; (13208 <__jp2uc+0x120>)
   1319a:	e015      	b.n	131c8 <__jp2uc+0xe0>
   1319c:	2af6      	cmp	r2, #246	; 0xf6
   1319e:	d8b8      	bhi.n	13112 <__jp2uc+0x2a>
   131a0:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   131a4:	4770      	bx	lr
   131a6:	2af3      	cmp	r2, #243	; 0xf3
   131a8:	d8b3      	bhi.n	13112 <__jp2uc+0x2a>
   131aa:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   131ae:	3020      	adds	r0, #32
   131b0:	4770      	bx	lr
   131b2:	4b16      	ldr	r3, [pc, #88]	; (1320c <__jp2uc+0x124>)
   131b4:	4413      	add	r3, r2
   131b6:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   131ba:	2b00      	cmp	r3, #0
   131bc:	d0a9      	beq.n	13112 <__jp2uc+0x2a>
   131be:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   131c2:	3060      	adds	r0, #96	; 0x60
   131c4:	4770      	bx	lr
   131c6:	4b12      	ldr	r3, [pc, #72]	; (13210 <__jp2uc+0x128>)
   131c8:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   131cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   131d0:	2800      	cmp	r0, #0
   131d2:	bf08      	it	eq
   131d4:	f04f 30ff 	moveq.w	r0, #4294967295
   131d8:	4770      	bx	lr
   131da:	4b0e      	ldr	r3, [pc, #56]	; (13214 <__jp2uc+0x12c>)
   131dc:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   131e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   131e4:	4770      	bx	lr
   131e6:	3bb0      	subs	r3, #176	; 0xb0
   131e8:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   131ec:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   131f0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   131f4:	4a08      	ldr	r2, [pc, #32]	; (13218 <__jp2uc+0x130>)
   131f6:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   131fa:	4770      	bx	lr
   131fc:	20005ee8 	.word	0x20005ee8
   13200:	20001210 	.word	0x20001210
   13204:	2000116c 	.word	0x2000116c
   13208:	200010fc 	.word	0x200010fc
   1320c:	200010a0 	.word	0x200010a0
   13210:	20000fe4 	.word	0x20000fe4
   13214:	20000f28 	.word	0x20000f28
   13218:	20001250 	.word	0x20001250

0001321c <_jp2uc_l>:
   1321c:	b538      	push	{r3, r4, r5, lr}
   1321e:	4605      	mov	r5, r0
   13220:	b1b9      	cbz	r1, 13252 <_jp2uc_l+0x36>
   13222:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   13226:	4912      	ldr	r1, [pc, #72]	; (13270 <_jp2uc_l+0x54>)
   13228:	4620      	mov	r0, r4
   1322a:	f7f9 fc5d 	bl	cae8 <strcmp>
   1322e:	b928      	cbnz	r0, 1323c <_jp2uc_l+0x20>
   13230:	4628      	mov	r0, r5
   13232:	2101      	movs	r1, #1
   13234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13238:	f7ff bf56 	b.w	130e8 <__jp2uc>
   1323c:	490d      	ldr	r1, [pc, #52]	; (13274 <_jp2uc_l+0x58>)
   1323e:	4620      	mov	r0, r4
   13240:	f7f9 fc52 	bl	cae8 <strcmp>
   13244:	b938      	cbnz	r0, 13256 <_jp2uc_l+0x3a>
   13246:	4628      	mov	r0, r5
   13248:	2102      	movs	r1, #2
   1324a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1324e:	f7ff bf4b 	b.w	130e8 <__jp2uc>
   13252:	4c09      	ldr	r4, [pc, #36]	; (13278 <_jp2uc_l+0x5c>)
   13254:	e7e7      	b.n	13226 <_jp2uc_l+0xa>
   13256:	4909      	ldr	r1, [pc, #36]	; (1327c <_jp2uc_l+0x60>)
   13258:	4620      	mov	r0, r4
   1325a:	f7f9 fc45 	bl	cae8 <strcmp>
   1325e:	b928      	cbnz	r0, 1326c <_jp2uc_l+0x50>
   13260:	4628      	mov	r0, r5
   13262:	2103      	movs	r1, #3
   13264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13268:	f7ff bf3e 	b.w	130e8 <__jp2uc>
   1326c:	4628      	mov	r0, r5
   1326e:	bd38      	pop	{r3, r4, r5, pc}
   13270:	20000ec8 	.word	0x20000ec8
   13274:	20000ecc 	.word	0x20000ecc
   13278:	200089c6 	.word	0x200089c6
   1327c:	20000ed4 	.word	0x20000ed4

00013280 <fiprintf>:
   13280:	b40e      	push	{r1, r2, r3}
   13282:	b510      	push	{r4, lr}
   13284:	b083      	sub	sp, #12
   13286:	ab05      	add	r3, sp, #20
   13288:	4c06      	ldr	r4, [pc, #24]	; (132a4 <fiprintf+0x24>)
   1328a:	f853 2b04 	ldr.w	r2, [r3], #4
   1328e:	9301      	str	r3, [sp, #4]
   13290:	4601      	mov	r1, r0
   13292:	6820      	ldr	r0, [r4, #0]
   13294:	f000 f97c 	bl	13590 <_vfiprintf_r>
   13298:	b003      	add	sp, #12
   1329a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1329e:	b003      	add	sp, #12
   132a0:	4770      	bx	lr
   132a2:	bf00      	nop
   132a4:	20008e24 	.word	0x20008e24

000132a8 <__ssprint_r>:
   132a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132ac:	6893      	ldr	r3, [r2, #8]
   132ae:	6817      	ldr	r7, [r2, #0]
   132b0:	b083      	sub	sp, #12
   132b2:	4692      	mov	sl, r2
   132b4:	2b00      	cmp	r3, #0
   132b6:	d070      	beq.n	1339a <__ssprint_r+0xf2>
   132b8:	4681      	mov	r9, r0
   132ba:	688a      	ldr	r2, [r1, #8]
   132bc:	6808      	ldr	r0, [r1, #0]
   132be:	460c      	mov	r4, r1
   132c0:	3708      	adds	r7, #8
   132c2:	e043      	b.n	1334c <__ssprint_r+0xa4>
   132c4:	89a3      	ldrh	r3, [r4, #12]
   132c6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   132ca:	d02e      	beq.n	1332a <__ssprint_r+0x82>
   132cc:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   132d0:	eba0 0801 	sub.w	r8, r0, r1
   132d4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   132d8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   132dc:	f108 0001 	add.w	r0, r8, #1
   132e0:	1076      	asrs	r6, r6, #1
   132e2:	4428      	add	r0, r5
   132e4:	42b0      	cmp	r0, r6
   132e6:	4632      	mov	r2, r6
   132e8:	bf84      	itt	hi
   132ea:	4606      	movhi	r6, r0
   132ec:	4632      	movhi	r2, r6
   132ee:	055b      	lsls	r3, r3, #21
   132f0:	d537      	bpl.n	13362 <__ssprint_r+0xba>
   132f2:	4611      	mov	r1, r2
   132f4:	4648      	mov	r0, r9
   132f6:	f7f7 fb59 	bl	a9ac <_malloc_r>
   132fa:	9001      	str	r0, [sp, #4]
   132fc:	2800      	cmp	r0, #0
   132fe:	d03a      	beq.n	13376 <__ssprint_r+0xce>
   13300:	4642      	mov	r2, r8
   13302:	6921      	ldr	r1, [r4, #16]
   13304:	f7f4 ffe2 	bl	82cc <memcpy>
   13308:	89a2      	ldrh	r2, [r4, #12]
   1330a:	9b01      	ldr	r3, [sp, #4]
   1330c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   13310:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   13314:	81a2      	strh	r2, [r4, #12]
   13316:	eba6 0208 	sub.w	r2, r6, r8
   1331a:	eb03 0008 	add.w	r0, r3, r8
   1331e:	6166      	str	r6, [r4, #20]
   13320:	60a2      	str	r2, [r4, #8]
   13322:	6123      	str	r3, [r4, #16]
   13324:	6020      	str	r0, [r4, #0]
   13326:	462e      	mov	r6, r5
   13328:	46a8      	mov	r8, r5
   1332a:	4642      	mov	r2, r8
   1332c:	4659      	mov	r1, fp
   1332e:	f7f9 f9e9 	bl	c704 <memmove>
   13332:	f8da 3008 	ldr.w	r3, [sl, #8]
   13336:	68a2      	ldr	r2, [r4, #8]
   13338:	6820      	ldr	r0, [r4, #0]
   1333a:	1b92      	subs	r2, r2, r6
   1333c:	4440      	add	r0, r8
   1333e:	1b5b      	subs	r3, r3, r5
   13340:	60a2      	str	r2, [r4, #8]
   13342:	6020      	str	r0, [r4, #0]
   13344:	f8ca 3008 	str.w	r3, [sl, #8]
   13348:	b33b      	cbz	r3, 1339a <__ssprint_r+0xf2>
   1334a:	3708      	adds	r7, #8
   1334c:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   13350:	2d00      	cmp	r5, #0
   13352:	d0fa      	beq.n	1334a <__ssprint_r+0xa2>
   13354:	42aa      	cmp	r2, r5
   13356:	4616      	mov	r6, r2
   13358:	4690      	mov	r8, r2
   1335a:	d9b3      	bls.n	132c4 <__ssprint_r+0x1c>
   1335c:	462e      	mov	r6, r5
   1335e:	46a8      	mov	r8, r5
   13360:	e7e3      	b.n	1332a <__ssprint_r+0x82>
   13362:	4648      	mov	r0, r9
   13364:	f7f7 fdea 	bl	af3c <_realloc_r>
   13368:	4603      	mov	r3, r0
   1336a:	2800      	cmp	r0, #0
   1336c:	d1d3      	bne.n	13316 <__ssprint_r+0x6e>
   1336e:	6921      	ldr	r1, [r4, #16]
   13370:	4648      	mov	r0, r9
   13372:	f7f9 fe97 	bl	d0a4 <_free_r>
   13376:	89a3      	ldrh	r3, [r4, #12]
   13378:	220c      	movs	r2, #12
   1337a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1337e:	f8c9 2000 	str.w	r2, [r9]
   13382:	f04f 30ff 	mov.w	r0, #4294967295
   13386:	81a3      	strh	r3, [r4, #12]
   13388:	2200      	movs	r2, #0
   1338a:	2300      	movs	r3, #0
   1338c:	f8ca 2008 	str.w	r2, [sl, #8]
   13390:	f8ca 3004 	str.w	r3, [sl, #4]
   13394:	b003      	add	sp, #12
   13396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1339a:	2000      	movs	r0, #0
   1339c:	2300      	movs	r3, #0
   1339e:	f8ca 3004 	str.w	r3, [sl, #4]
   133a2:	b003      	add	sp, #12
   133a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000133a8 <_sungetc_r>:
   133a8:	b538      	push	{r3, r4, r5, lr}
   133aa:	1c4b      	adds	r3, r1, #1
   133ac:	d01a      	beq.n	133e4 <_sungetc_r+0x3c>
   133ae:	8993      	ldrh	r3, [r2, #12]
   133b0:	4614      	mov	r4, r2
   133b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
   133b4:	f023 0320 	bic.w	r3, r3, #32
   133b8:	81a3      	strh	r3, [r4, #12]
   133ba:	b2cd      	uxtb	r5, r1
   133bc:	b1aa      	cbz	r2, 133ea <_sungetc_r+0x42>
   133be:	6862      	ldr	r2, [r4, #4]
   133c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   133c2:	429a      	cmp	r2, r3
   133c4:	da09      	bge.n	133da <_sungetc_r+0x32>
   133c6:	6823      	ldr	r3, [r4, #0]
   133c8:	1e5a      	subs	r2, r3, #1
   133ca:	6022      	str	r2, [r4, #0]
   133cc:	f803 5c01 	strb.w	r5, [r3, #-1]
   133d0:	6863      	ldr	r3, [r4, #4]
   133d2:	3301      	adds	r3, #1
   133d4:	6063      	str	r3, [r4, #4]
   133d6:	4628      	mov	r0, r5
   133d8:	bd38      	pop	{r3, r4, r5, pc}
   133da:	4621      	mov	r1, r4
   133dc:	f001 fa58 	bl	14890 <__submore>
   133e0:	2800      	cmp	r0, #0
   133e2:	d0f0      	beq.n	133c6 <_sungetc_r+0x1e>
   133e4:	f04f 35ff 	mov.w	r5, #4294967295
   133e8:	e7f5      	b.n	133d6 <_sungetc_r+0x2e>
   133ea:	6923      	ldr	r3, [r4, #16]
   133ec:	6822      	ldr	r2, [r4, #0]
   133ee:	b12b      	cbz	r3, 133fc <_sungetc_r+0x54>
   133f0:	4293      	cmp	r3, r2
   133f2:	d203      	bcs.n	133fc <_sungetc_r+0x54>
   133f4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   133f8:	42ab      	cmp	r3, r5
   133fa:	d00f      	beq.n	1341c <_sungetc_r+0x74>
   133fc:	6861      	ldr	r1, [r4, #4]
   133fe:	63e1      	str	r1, [r4, #60]	; 0x3c
   13400:	4623      	mov	r3, r4
   13402:	63a2      	str	r2, [r4, #56]	; 0x38
   13404:	f104 0140 	add.w	r1, r4, #64	; 0x40
   13408:	2203      	movs	r2, #3
   1340a:	6362      	str	r2, [r4, #52]	; 0x34
   1340c:	6321      	str	r1, [r4, #48]	; 0x30
   1340e:	f803 5f42 	strb.w	r5, [r3, #66]!
   13412:	2201      	movs	r2, #1
   13414:	e9c4 3200 	strd	r3, r2, [r4]
   13418:	4628      	mov	r0, r5
   1341a:	bd38      	pop	{r3, r4, r5, pc}
   1341c:	6863      	ldr	r3, [r4, #4]
   1341e:	3a01      	subs	r2, #1
   13420:	3301      	adds	r3, #1
   13422:	e9c4 2300 	strd	r2, r3, [r4]
   13426:	e7d6      	b.n	133d6 <_sungetc_r+0x2e>

00013428 <__ssrefill_r>:
   13428:	b510      	push	{r4, lr}
   1342a:	460c      	mov	r4, r1
   1342c:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1342e:	b169      	cbz	r1, 1344c <__ssrefill_r+0x24>
   13430:	f104 0340 	add.w	r3, r4, #64	; 0x40
   13434:	4299      	cmp	r1, r3
   13436:	d001      	beq.n	1343c <__ssrefill_r+0x14>
   13438:	f7f9 fe34 	bl	d0a4 <_free_r>
   1343c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1343e:	6063      	str	r3, [r4, #4]
   13440:	2000      	movs	r0, #0
   13442:	6320      	str	r0, [r4, #48]	; 0x30
   13444:	b113      	cbz	r3, 1344c <__ssrefill_r+0x24>
   13446:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13448:	6023      	str	r3, [r4, #0]
   1344a:	bd10      	pop	{r4, pc}
   1344c:	89a3      	ldrh	r3, [r4, #12]
   1344e:	6921      	ldr	r1, [r4, #16]
   13450:	2200      	movs	r2, #0
   13452:	f043 0320 	orr.w	r3, r3, #32
   13456:	e9c4 1200 	strd	r1, r2, [r4]
   1345a:	81a3      	strh	r3, [r4, #12]
   1345c:	f04f 30ff 	mov.w	r0, #4294967295
   13460:	bd10      	pop	{r4, pc}
   13462:	bf00      	nop

00013464 <_sfread_r>:
   13464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13468:	b085      	sub	sp, #20
   1346a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1346e:	fb02 f303 	mul.w	r3, r2, r3
   13472:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   13474:	9301      	str	r3, [sp, #4]
   13476:	b3a3      	cbz	r3, 134e2 <_sfread_r+0x7e>
   13478:	f8d4 a004 	ldr.w	sl, [r4, #4]
   1347c:	9b01      	ldr	r3, [sp, #4]
   1347e:	4553      	cmp	r3, sl
   13480:	468b      	mov	fp, r1
   13482:	d946      	bls.n	13512 <_sfread_r+0xae>
   13484:	46a0      	mov	r8, r4
   13486:	9d01      	ldr	r5, [sp, #4]
   13488:	f858 1b40 	ldr.w	r1, [r8], #64
   1348c:	4607      	mov	r7, r0
   1348e:	2600      	movs	r6, #0
   13490:	4652      	mov	r2, sl
   13492:	4658      	mov	r0, fp
   13494:	f7f4 ff1a 	bl	82cc <memcpy>
   13498:	6823      	ldr	r3, [r4, #0]
   1349a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1349c:	4453      	add	r3, sl
   1349e:	46a9      	mov	r9, r5
   134a0:	e9c4 3600 	strd	r3, r6, [r4]
   134a4:	4611      	mov	r1, r2
   134a6:	4638      	mov	r0, r7
   134a8:	44d3      	add	fp, sl
   134aa:	eba5 050a 	sub.w	r5, r5, sl
   134ae:	b1e2      	cbz	r2, 134ea <_sfread_r+0x86>
   134b0:	4542      	cmp	r2, r8
   134b2:	d001      	beq.n	134b8 <_sfread_r+0x54>
   134b4:	f7f9 fdf6 	bl	d0a4 <_free_r>
   134b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   134ba:	6326      	str	r6, [r4, #48]	; 0x30
   134bc:	6063      	str	r3, [r4, #4]
   134be:	b1a3      	cbz	r3, 134ea <_sfread_r+0x86>
   134c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   134c2:	6021      	str	r1, [r4, #0]
   134c4:	42ab      	cmp	r3, r5
   134c6:	469a      	mov	sl, r3
   134c8:	d3e2      	bcc.n	13490 <_sfread_r+0x2c>
   134ca:	9b02      	ldr	r3, [sp, #8]
   134cc:	9301      	str	r3, [sp, #4]
   134ce:	462a      	mov	r2, r5
   134d0:	4658      	mov	r0, fp
   134d2:	f7f4 fefb 	bl	82cc <memcpy>
   134d6:	e9d4 3200 	ldrd	r3, r2, [r4]
   134da:	1b52      	subs	r2, r2, r5
   134dc:	442b      	add	r3, r5
   134de:	e9c4 3200 	strd	r3, r2, [r4]
   134e2:	9801      	ldr	r0, [sp, #4]
   134e4:	b005      	add	sp, #20
   134e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134ea:	9a01      	ldr	r2, [sp, #4]
   134ec:	9b03      	ldr	r3, [sp, #12]
   134ee:	4452      	add	r2, sl
   134f0:	eba2 0209 	sub.w	r2, r2, r9
   134f4:	fbb2 f3f3 	udiv	r3, r2, r3
   134f8:	9301      	str	r3, [sp, #4]
   134fa:	89a3      	ldrh	r3, [r4, #12]
   134fc:	6922      	ldr	r2, [r4, #16]
   134fe:	9801      	ldr	r0, [sp, #4]
   13500:	f043 0320 	orr.w	r3, r3, #32
   13504:	81a3      	strh	r3, [r4, #12]
   13506:	2300      	movs	r3, #0
   13508:	e9c4 2300 	strd	r2, r3, [r4]
   1350c:	b005      	add	sp, #20
   1350e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13512:	6821      	ldr	r1, [r4, #0]
   13514:	461d      	mov	r5, r3
   13516:	e7d8      	b.n	134ca <_sfread_r+0x66>

00013518 <__sprint_r.part.0>:
   13518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1351c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1351e:	049c      	lsls	r4, r3, #18
   13520:	4690      	mov	r8, r2
   13522:	d52d      	bpl.n	13580 <__sprint_r.part.0+0x68>
   13524:	6893      	ldr	r3, [r2, #8]
   13526:	6812      	ldr	r2, [r2, #0]
   13528:	b343      	cbz	r3, 1357c <__sprint_r.part.0+0x64>
   1352a:	468b      	mov	fp, r1
   1352c:	4606      	mov	r6, r0
   1352e:	f102 0908 	add.w	r9, r2, #8
   13532:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   13536:	ea5f 079a 	movs.w	r7, sl, lsr #2
   1353a:	d015      	beq.n	13568 <__sprint_r.part.0+0x50>
   1353c:	3d04      	subs	r5, #4
   1353e:	2400      	movs	r4, #0
   13540:	e001      	b.n	13546 <__sprint_r.part.0+0x2e>
   13542:	42a7      	cmp	r7, r4
   13544:	d00e      	beq.n	13564 <__sprint_r.part.0+0x4c>
   13546:	f855 1f04 	ldr.w	r1, [r5, #4]!
   1354a:	465a      	mov	r2, fp
   1354c:	4630      	mov	r0, r6
   1354e:	f001 fa97 	bl	14a80 <_fputwc_r>
   13552:	1c43      	adds	r3, r0, #1
   13554:	f104 0401 	add.w	r4, r4, #1
   13558:	d1f3      	bne.n	13542 <__sprint_r.part.0+0x2a>
   1355a:	2300      	movs	r3, #0
   1355c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   13560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13564:	f8d8 3008 	ldr.w	r3, [r8, #8]
   13568:	f02a 0a03 	bic.w	sl, sl, #3
   1356c:	eba3 030a 	sub.w	r3, r3, sl
   13570:	f8c8 3008 	str.w	r3, [r8, #8]
   13574:	f109 0908 	add.w	r9, r9, #8
   13578:	2b00      	cmp	r3, #0
   1357a:	d1da      	bne.n	13532 <__sprint_r.part.0+0x1a>
   1357c:	2000      	movs	r0, #0
   1357e:	e7ec      	b.n	1355a <__sprint_r.part.0+0x42>
   13580:	f001 f80c 	bl	1459c <__sfvwrite_r>
   13584:	2300      	movs	r3, #0
   13586:	e9c8 3301 	strd	r3, r3, [r8, #4]
   1358a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1358e:	bf00      	nop

00013590 <_vfiprintf_r>:
   13590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13594:	ed2d 8b02 	vpush	{d8}
   13598:	b0c5      	sub	sp, #276	; 0x114
   1359a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   1359e:	4683      	mov	fp, r0
   135a0:	ee08 1a10 	vmov	s16, r1
   135a4:	4616      	mov	r6, r2
   135a6:	2100      	movs	r1, #0
   135a8:	2208      	movs	r2, #8
   135aa:	4650      	mov	r0, sl
   135ac:	461c      	mov	r4, r3
   135ae:	9307      	str	r3, [sp, #28]
   135b0:	f7f9 f924 	bl	c7fc <memset>
   135b4:	f1bb 0f00 	cmp.w	fp, #0
   135b8:	d004      	beq.n	135c4 <_vfiprintf_r+0x34>
   135ba:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   135be:	2b00      	cmp	r3, #0
   135c0:	f000 86a0 	beq.w	14304 <_vfiprintf_r+0xd74>
   135c4:	ee18 2a10 	vmov	r2, s16
   135c8:	6e53      	ldr	r3, [r2, #100]	; 0x64
   135ca:	07db      	lsls	r3, r3, #31
   135cc:	f140 8513 	bpl.w	13ff6 <_vfiprintf_r+0xa66>
   135d0:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   135d4:	b28a      	uxth	r2, r1
   135d6:	0495      	lsls	r5, r2, #18
   135d8:	d40b      	bmi.n	135f2 <_vfiprintf_r+0x62>
   135da:	ee18 3a10 	vmov	r3, s16
   135de:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   135e2:	8199      	strh	r1, [r3, #12]
   135e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   135e6:	b28a      	uxth	r2, r1
   135e8:	ee18 1a10 	vmov	r1, s16
   135ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   135f0:	664b      	str	r3, [r1, #100]	; 0x64
   135f2:	0710      	lsls	r0, r2, #28
   135f4:	f140 8105 	bpl.w	13802 <_vfiprintf_r+0x272>
   135f8:	ee18 3a10 	vmov	r3, s16
   135fc:	691b      	ldr	r3, [r3, #16]
   135fe:	2b00      	cmp	r3, #0
   13600:	f000 80ff 	beq.w	13802 <_vfiprintf_r+0x272>
   13604:	f002 031a 	and.w	r3, r2, #26
   13608:	2b0a      	cmp	r3, #10
   1360a:	f000 810a 	beq.w	13822 <_vfiprintf_r+0x292>
   1360e:	2300      	movs	r3, #0
   13610:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   13614:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   13618:	aa1b      	add	r2, sp, #108	; 0x6c
   1361a:	930c      	str	r3, [sp, #48]	; 0x30
   1361c:	9218      	str	r2, [sp, #96]	; 0x60
   1361e:	4691      	mov	r9, r2
   13620:	930b      	str	r3, [sp, #44]	; 0x2c
   13622:	9305      	str	r3, [sp, #20]
   13624:	46b0      	mov	r8, r6
   13626:	4644      	mov	r4, r8
   13628:	4ba8      	ldr	r3, [pc, #672]	; (138cc <_vfiprintf_r+0x33c>)
   1362a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1362e:	f7f9 f9af 	bl	c990 <__locale_mb_cur_max>
   13632:	4622      	mov	r2, r4
   13634:	4603      	mov	r3, r0
   13636:	a912      	add	r1, sp, #72	; 0x48
   13638:	f8cd a000 	str.w	sl, [sp]
   1363c:	4658      	mov	r0, fp
   1363e:	47a8      	blx	r5
   13640:	2800      	cmp	r0, #0
   13642:	f000 8145 	beq.w	138d0 <_vfiprintf_r+0x340>
   13646:	f2c0 8139 	blt.w	138bc <_vfiprintf_r+0x32c>
   1364a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1364c:	2a25      	cmp	r2, #37	; 0x25
   1364e:	4603      	mov	r3, r0
   13650:	d001      	beq.n	13656 <_vfiprintf_r+0xc6>
   13652:	441c      	add	r4, r3
   13654:	e7e8      	b.n	13628 <_vfiprintf_r+0x98>
   13656:	ebb4 0608 	subs.w	r6, r4, r8
   1365a:	4605      	mov	r5, r0
   1365c:	f040 813c 	bne.w	138d8 <_vfiprintf_r+0x348>
   13660:	2300      	movs	r3, #0
   13662:	7861      	ldrb	r1, [r4, #1]
   13664:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13668:	f104 0801 	add.w	r8, r4, #1
   1366c:	9306      	str	r3, [sp, #24]
   1366e:	f04f 37ff 	mov.w	r7, #4294967295
   13672:	461e      	mov	r6, r3
   13674:	242b      	movs	r4, #43	; 0x2b
   13676:	f108 0801 	add.w	r8, r8, #1
   1367a:	f1a1 0320 	sub.w	r3, r1, #32
   1367e:	2b5a      	cmp	r3, #90	; 0x5a
   13680:	f200 8178 	bhi.w	13974 <_vfiprintf_r+0x3e4>
   13684:	e8df f013 	tbh	[pc, r3, lsl #1]
   13688:	017602b5 	.word	0x017602b5
   1368c:	02b00176 	.word	0x02b00176
   13690:	01760176 	.word	0x01760176
   13694:	006a0176 	.word	0x006a0176
   13698:	01760176 	.word	0x01760176
   1369c:	028d027d 	.word	0x028d027d
   136a0:	02880176 	.word	0x02880176
   136a4:	01760297 	.word	0x01760297
   136a8:	005b0292 	.word	0x005b0292
   136ac:	005b005b 	.word	0x005b005b
   136b0:	005b005b 	.word	0x005b005b
   136b4:	005b005b 	.word	0x005b005b
   136b8:	005b005b 	.word	0x005b005b
   136bc:	01760176 	.word	0x01760176
   136c0:	01760176 	.word	0x01760176
   136c4:	01760176 	.word	0x01760176
   136c8:	01760176 	.word	0x01760176
   136cc:	025c0176 	.word	0x025c0176
   136d0:	01760084 	.word	0x01760084
   136d4:	01760176 	.word	0x01760176
   136d8:	01760176 	.word	0x01760176
   136dc:	01760176 	.word	0x01760176
   136e0:	01760176 	.word	0x01760176
   136e4:	00e80176 	.word	0x00e80176
   136e8:	01760176 	.word	0x01760176
   136ec:	02330176 	.word	0x02330176
   136f0:	02da0176 	.word	0x02da0176
   136f4:	01760176 	.word	0x01760176
   136f8:	0176058b 	.word	0x0176058b
   136fc:	01760176 	.word	0x01760176
   13700:	01760176 	.word	0x01760176
   13704:	01760176 	.word	0x01760176
   13708:	01760176 	.word	0x01760176
   1370c:	025c0176 	.word	0x025c0176
   13710:	01760086 	.word	0x01760086
   13714:	01760176 	.word	0x01760176
   13718:	008602cd 	.word	0x008602cd
   1371c:	0176007f 	.word	0x0176007f
   13720:	017602c0 	.word	0x017602c0
   13724:	00ea02fd 	.word	0x00ea02fd
   13728:	007f02ed 	.word	0x007f02ed
   1372c:	02330176 	.word	0x02330176
   13730:	0569007c 	.word	0x0569007c
   13734:	01760176 	.word	0x01760176
   13738:	0176056b 	.word	0x0176056b
   1373c:	007c      	.short	0x007c
   1373e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13742:	2200      	movs	r2, #0
   13744:	f818 1b01 	ldrb.w	r1, [r8], #1
   13748:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1374c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   13750:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13754:	2b09      	cmp	r3, #9
   13756:	d9f5      	bls.n	13744 <_vfiprintf_r+0x1b4>
   13758:	9206      	str	r2, [sp, #24]
   1375a:	e78e      	b.n	1367a <_vfiprintf_r+0xea>
   1375c:	4658      	mov	r0, fp
   1375e:	f7fe fa7d 	bl	11c5c <_localeconv_r>
   13762:	6843      	ldr	r3, [r0, #4]
   13764:	930d      	str	r3, [sp, #52]	; 0x34
   13766:	4618      	mov	r0, r3
   13768:	f7f9 fb8a 	bl	ce80 <strlen>
   1376c:	900e      	str	r0, [sp, #56]	; 0x38
   1376e:	4605      	mov	r5, r0
   13770:	4658      	mov	r0, fp
   13772:	f7fe fa73 	bl	11c5c <_localeconv_r>
   13776:	6883      	ldr	r3, [r0, #8]
   13778:	930b      	str	r3, [sp, #44]	; 0x2c
   1377a:	2d00      	cmp	r5, #0
   1377c:	f040 84d6 	bne.w	1412c <_vfiprintf_r+0xb9c>
   13780:	f898 1000 	ldrb.w	r1, [r8]
   13784:	e777      	b.n	13676 <_vfiprintf_r+0xe6>
   13786:	f898 1000 	ldrb.w	r1, [r8]
   1378a:	f046 0620 	orr.w	r6, r6, #32
   1378e:	e772      	b.n	13676 <_vfiprintf_r+0xe6>
   13790:	f046 0610 	orr.w	r6, r6, #16
   13794:	06b4      	lsls	r4, r6, #26
   13796:	f140 818e 	bpl.w	13ab6 <_vfiprintf_r+0x526>
   1379a:	9b07      	ldr	r3, [sp, #28]
   1379c:	3307      	adds	r3, #7
   1379e:	f023 0307 	bic.w	r3, r3, #7
   137a2:	461a      	mov	r2, r3
   137a4:	6859      	ldr	r1, [r3, #4]
   137a6:	f852 3b08 	ldr.w	r3, [r2], #8
   137aa:	9207      	str	r2, [sp, #28]
   137ac:	460a      	mov	r2, r1
   137ae:	2900      	cmp	r1, #0
   137b0:	f2c0 8470 	blt.w	14094 <_vfiprintf_r+0xb04>
   137b4:	1c79      	adds	r1, r7, #1
   137b6:	f000 85a2 	beq.w	142fe <_vfiprintf_r+0xd6e>
   137ba:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   137be:	9103      	str	r1, [sp, #12]
   137c0:	ea53 0102 	orrs.w	r1, r3, r2
   137c4:	f000 843f 	beq.w	14046 <_vfiprintf_r+0xab6>
   137c8:	2b0a      	cmp	r3, #10
   137ca:	f172 0100 	sbcs.w	r1, r2, #0
   137ce:	f080 8541 	bcs.w	14254 <_vfiprintf_r+0xcc4>
   137d2:	3330      	adds	r3, #48	; 0x30
   137d4:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   137d8:	9e03      	ldr	r6, [sp, #12]
   137da:	2301      	movs	r3, #1
   137dc:	9304      	str	r3, [sp, #16]
   137de:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   137e2:	9b04      	ldr	r3, [sp, #16]
   137e4:	42bb      	cmp	r3, r7
   137e6:	bfb8      	it	lt
   137e8:	463b      	movlt	r3, r7
   137ea:	9303      	str	r3, [sp, #12]
   137ec:	2300      	movs	r3, #0
   137ee:	9308      	str	r3, [sp, #32]
   137f0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   137f4:	2b00      	cmp	r3, #0
   137f6:	f000 80cb 	beq.w	13990 <_vfiprintf_r+0x400>
   137fa:	9b03      	ldr	r3, [sp, #12]
   137fc:	3301      	adds	r3, #1
   137fe:	9303      	str	r3, [sp, #12]
   13800:	e0c6      	b.n	13990 <_vfiprintf_r+0x400>
   13802:	ee18 1a10 	vmov	r1, s16
   13806:	4658      	mov	r0, fp
   13808:	ee18 5a10 	vmov	r5, s16
   1380c:	f001 f87c 	bl	14908 <__swsetup_r>
   13810:	2800      	cmp	r0, #0
   13812:	f040 8652 	bne.w	144ba <_vfiprintf_r+0xf2a>
   13816:	89aa      	ldrh	r2, [r5, #12]
   13818:	f002 031a 	and.w	r3, r2, #26
   1381c:	2b0a      	cmp	r3, #10
   1381e:	f47f aef6 	bne.w	1360e <_vfiprintf_r+0x7e>
   13822:	ee18 1a10 	vmov	r1, s16
   13826:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   1382a:	2b00      	cmp	r3, #0
   1382c:	f6ff aeef 	blt.w	1360e <_vfiprintf_r+0x7e>
   13830:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   13832:	07db      	lsls	r3, r3, #31
   13834:	d402      	bmi.n	1383c <_vfiprintf_r+0x2ac>
   13836:	0597      	lsls	r7, r2, #22
   13838:	f140 8612 	bpl.w	14460 <_vfiprintf_r+0xed0>
   1383c:	ee18 1a10 	vmov	r1, s16
   13840:	4623      	mov	r3, r4
   13842:	4632      	mov	r2, r6
   13844:	4658      	mov	r0, fp
   13846:	f000 fe69 	bl	1451c <__sbprintf>
   1384a:	9005      	str	r0, [sp, #20]
   1384c:	9805      	ldr	r0, [sp, #20]
   1384e:	b045      	add	sp, #276	; 0x114
   13850:	ecbd 8b02 	vpop	{d8}
   13854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13858:	f046 0610 	orr.w	r6, r6, #16
   1385c:	f016 0220 	ands.w	r2, r6, #32
   13860:	f000 8136 	beq.w	13ad0 <_vfiprintf_r+0x540>
   13864:	9b07      	ldr	r3, [sp, #28]
   13866:	3307      	adds	r3, #7
   13868:	f023 0307 	bic.w	r3, r3, #7
   1386c:	4619      	mov	r1, r3
   1386e:	685a      	ldr	r2, [r3, #4]
   13870:	f851 3b08 	ldr.w	r3, [r1], #8
   13874:	9107      	str	r1, [sp, #28]
   13876:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   1387a:	9103      	str	r1, [sp, #12]
   1387c:	2100      	movs	r1, #0
   1387e:	2000      	movs	r0, #0
   13880:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   13884:	1c78      	adds	r0, r7, #1
   13886:	f000 8210 	beq.w	13caa <_vfiprintf_r+0x71a>
   1388a:	9803      	ldr	r0, [sp, #12]
   1388c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   13890:	ea53 0002 	orrs.w	r0, r3, r2
   13894:	f040 8208 	bne.w	13ca8 <_vfiprintf_r+0x718>
   13898:	2f00      	cmp	r7, #0
   1389a:	f040 8538 	bne.w	1430e <_vfiprintf_r+0xd7e>
   1389e:	2900      	cmp	r1, #0
   138a0:	f040 83d5 	bne.w	1404e <_vfiprintf_r+0xabe>
   138a4:	9b03      	ldr	r3, [sp, #12]
   138a6:	f013 0301 	ands.w	r3, r3, #1
   138aa:	9304      	str	r3, [sp, #16]
   138ac:	f000 8411 	beq.w	140d2 <_vfiprintf_r+0xb42>
   138b0:	2330      	movs	r3, #48	; 0x30
   138b2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   138b6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   138ba:	e792      	b.n	137e2 <_vfiprintf_r+0x252>
   138bc:	2208      	movs	r2, #8
   138be:	2100      	movs	r1, #0
   138c0:	4650      	mov	r0, sl
   138c2:	f7f8 ff9b 	bl	c7fc <memset>
   138c6:	2301      	movs	r3, #1
   138c8:	441c      	add	r4, r3
   138ca:	e6ad      	b.n	13628 <_vfiprintf_r+0x98>
   138cc:	2000889c 	.word	0x2000889c
   138d0:	ebb4 0608 	subs.w	r6, r4, r8
   138d4:	4605      	mov	r5, r0
   138d6:	d01b      	beq.n	13910 <_vfiprintf_r+0x380>
   138d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   138da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   138dc:	3301      	adds	r3, #1
   138de:	4432      	add	r2, r6
   138e0:	2b07      	cmp	r3, #7
   138e2:	e9c9 8600 	strd	r8, r6, [r9]
   138e6:	921a      	str	r2, [sp, #104]	; 0x68
   138e8:	9319      	str	r3, [sp, #100]	; 0x64
   138ea:	dd1c      	ble.n	13926 <_vfiprintf_r+0x396>
   138ec:	2a00      	cmp	r2, #0
   138ee:	f000 83a6 	beq.w	1403e <_vfiprintf_r+0xaae>
   138f2:	ee18 1a10 	vmov	r1, s16
   138f6:	aa18      	add	r2, sp, #96	; 0x60
   138f8:	4658      	mov	r0, fp
   138fa:	f7ff fe0d 	bl	13518 <__sprint_r.part.0>
   138fe:	bb20      	cbnz	r0, 1394a <_vfiprintf_r+0x3ba>
   13900:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13904:	9b05      	ldr	r3, [sp, #20]
   13906:	4433      	add	r3, r6
   13908:	9305      	str	r3, [sp, #20]
   1390a:	2d00      	cmp	r5, #0
   1390c:	f47f aea8 	bne.w	13660 <_vfiprintf_r+0xd0>
   13910:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13912:	2b00      	cmp	r3, #0
   13914:	f040 85c1 	bne.w	1449a <_vfiprintf_r+0xf0a>
   13918:	ee18 3a10 	vmov	r3, s16
   1391c:	2200      	movs	r2, #0
   1391e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   13922:	9219      	str	r2, [sp, #100]	; 0x64
   13924:	e015      	b.n	13952 <_vfiprintf_r+0x3c2>
   13926:	f109 0908 	add.w	r9, r9, #8
   1392a:	e7eb      	b.n	13904 <_vfiprintf_r+0x374>
   1392c:	ee18 1a10 	vmov	r1, s16
   13930:	aa18      	add	r2, sp, #96	; 0x60
   13932:	4658      	mov	r0, fp
   13934:	f7ff fdf0 	bl	13518 <__sprint_r.part.0>
   13938:	2800      	cmp	r0, #0
   1393a:	f000 80a6 	beq.w	13a8a <_vfiprintf_r+0x4fa>
   1393e:	9b08      	ldr	r3, [sp, #32]
   13940:	b11b      	cbz	r3, 1394a <_vfiprintf_r+0x3ba>
   13942:	9908      	ldr	r1, [sp, #32]
   13944:	4658      	mov	r0, fp
   13946:	f7f9 fbad 	bl	d0a4 <_free_r>
   1394a:	ee18 3a10 	vmov	r3, s16
   1394e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   13952:	ee18 2a10 	vmov	r2, s16
   13956:	6e52      	ldr	r2, [r2, #100]	; 0x64
   13958:	f012 0f01 	tst.w	r2, #1
   1395c:	b29a      	uxth	r2, r3
   1395e:	f000 80a0 	beq.w	13aa2 <_vfiprintf_r+0x512>
   13962:	0650      	lsls	r0, r2, #25
   13964:	f100 85b2 	bmi.w	144cc <_vfiprintf_r+0xf3c>
   13968:	9805      	ldr	r0, [sp, #20]
   1396a:	b045      	add	sp, #276	; 0x114
   1396c:	ecbd 8b02 	vpop	{d8}
   13970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13974:	2900      	cmp	r1, #0
   13976:	d0cb      	beq.n	13910 <_vfiprintf_r+0x380>
   13978:	2300      	movs	r3, #0
   1397a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1397e:	2301      	movs	r3, #1
   13980:	e9cd 3303 	strd	r3, r3, [sp, #12]
   13984:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   13988:	ac2b      	add	r4, sp, #172	; 0xac
   1398a:	2300      	movs	r3, #0
   1398c:	9308      	str	r3, [sp, #32]
   1398e:	461f      	mov	r7, r3
   13990:	f016 0302 	ands.w	r3, r6, #2
   13994:	9309      	str	r3, [sp, #36]	; 0x24
   13996:	d002      	beq.n	1399e <_vfiprintf_r+0x40e>
   13998:	9b03      	ldr	r3, [sp, #12]
   1399a:	3302      	adds	r3, #2
   1399c:	9303      	str	r3, [sp, #12]
   1399e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   139a2:	930a      	str	r3, [sp, #40]	; 0x28
   139a4:	d105      	bne.n	139b2 <_vfiprintf_r+0x422>
   139a6:	9b06      	ldr	r3, [sp, #24]
   139a8:	9a03      	ldr	r2, [sp, #12]
   139aa:	1a9d      	subs	r5, r3, r2
   139ac:	2d00      	cmp	r5, #0
   139ae:	f300 827b 	bgt.w	13ea8 <_vfiprintf_r+0x918>
   139b2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   139b6:	1c41      	adds	r1, r0, #1
   139b8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   139bc:	b182      	cbz	r2, 139e0 <_vfiprintf_r+0x450>
   139be:	2201      	movs	r2, #1
   139c0:	3301      	adds	r3, #1
   139c2:	f8c9 2004 	str.w	r2, [r9, #4]
   139c6:	2907      	cmp	r1, #7
   139c8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   139cc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   139d0:	f8c9 2000 	str.w	r2, [r9]
   139d4:	f300 824a 	bgt.w	13e6c <_vfiprintf_r+0x8dc>
   139d8:	4608      	mov	r0, r1
   139da:	f109 0908 	add.w	r9, r9, #8
   139de:	3101      	adds	r1, #1
   139e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   139e2:	b1e2      	cbz	r2, 13a1e <_vfiprintf_r+0x48e>
   139e4:	aa11      	add	r2, sp, #68	; 0x44
   139e6:	3302      	adds	r3, #2
   139e8:	f8c9 2000 	str.w	r2, [r9]
   139ec:	2907      	cmp	r1, #7
   139ee:	f04f 0202 	mov.w	r2, #2
   139f2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   139f6:	f8c9 2004 	str.w	r2, [r9, #4]
   139fa:	f340 8250 	ble.w	13e9e <_vfiprintf_r+0x90e>
   139fe:	2b00      	cmp	r3, #0
   13a00:	f000 8343 	beq.w	1408a <_vfiprintf_r+0xafa>
   13a04:	ee18 1a10 	vmov	r1, s16
   13a08:	aa18      	add	r2, sp, #96	; 0x60
   13a0a:	4658      	mov	r0, fp
   13a0c:	f7ff fd84 	bl	13518 <__sprint_r.part.0>
   13a10:	2800      	cmp	r0, #0
   13a12:	d194      	bne.n	1393e <_vfiprintf_r+0x3ae>
   13a14:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13a18:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13a1c:	1c41      	adds	r1, r0, #1
   13a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13a20:	2a80      	cmp	r2, #128	; 0x80
   13a22:	f000 8184 	beq.w	13d2e <_vfiprintf_r+0x79e>
   13a26:	9a04      	ldr	r2, [sp, #16]
   13a28:	1abd      	subs	r5, r7, r2
   13a2a:	2d00      	cmp	r5, #0
   13a2c:	f300 81d7 	bgt.w	13dde <_vfiprintf_r+0x84e>
   13a30:	9a04      	ldr	r2, [sp, #16]
   13a32:	f8c9 4000 	str.w	r4, [r9]
   13a36:	4413      	add	r3, r2
   13a38:	2907      	cmp	r1, #7
   13a3a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13a3e:	f8c9 2004 	str.w	r2, [r9, #4]
   13a42:	f340 816e 	ble.w	13d22 <_vfiprintf_r+0x792>
   13a46:	2b00      	cmp	r3, #0
   13a48:	f000 8275 	beq.w	13f36 <_vfiprintf_r+0x9a6>
   13a4c:	ee18 1a10 	vmov	r1, s16
   13a50:	aa18      	add	r2, sp, #96	; 0x60
   13a52:	4658      	mov	r0, fp
   13a54:	f7ff fd60 	bl	13518 <__sprint_r.part.0>
   13a58:	2800      	cmp	r0, #0
   13a5a:	f47f af70 	bne.w	1393e <_vfiprintf_r+0x3ae>
   13a5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13a60:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13a64:	0775      	lsls	r5, r6, #29
   13a66:	d505      	bpl.n	13a74 <_vfiprintf_r+0x4e4>
   13a68:	9a06      	ldr	r2, [sp, #24]
   13a6a:	9903      	ldr	r1, [sp, #12]
   13a6c:	1a54      	subs	r4, r2, r1
   13a6e:	2c00      	cmp	r4, #0
   13a70:	f300 826b 	bgt.w	13f4a <_vfiprintf_r+0x9ba>
   13a74:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   13a78:	9803      	ldr	r0, [sp, #12]
   13a7a:	4281      	cmp	r1, r0
   13a7c:	bfac      	ite	ge
   13a7e:	1852      	addge	r2, r2, r1
   13a80:	1812      	addlt	r2, r2, r0
   13a82:	9205      	str	r2, [sp, #20]
   13a84:	2b00      	cmp	r3, #0
   13a86:	f47f af51 	bne.w	1392c <_vfiprintf_r+0x39c>
   13a8a:	9908      	ldr	r1, [sp, #32]
   13a8c:	2300      	movs	r3, #0
   13a8e:	9319      	str	r3, [sp, #100]	; 0x64
   13a90:	2900      	cmp	r1, #0
   13a92:	f000 8149 	beq.w	13d28 <_vfiprintf_r+0x798>
   13a96:	4658      	mov	r0, fp
   13a98:	f7f9 fb04 	bl	d0a4 <_free_r>
   13a9c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13aa0:	e5c1      	b.n	13626 <_vfiprintf_r+0x96>
   13aa2:	059c      	lsls	r4, r3, #22
   13aa4:	f53f af5d 	bmi.w	13962 <_vfiprintf_r+0x3d2>
   13aa8:	ee18 4a10 	vmov	r4, s16
   13aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13aae:	f7f9 f80b 	bl	cac8 <__retarget_lock_release_recursive>
   13ab2:	89a2      	ldrh	r2, [r4, #12]
   13ab4:	e755      	b.n	13962 <_vfiprintf_r+0x3d2>
   13ab6:	06f0      	lsls	r0, r6, #27
   13ab8:	9a07      	ldr	r2, [sp, #28]
   13aba:	f100 831f 	bmi.w	140fc <_vfiprintf_r+0xb6c>
   13abe:	0671      	lsls	r1, r6, #25
   13ac0:	f140 8319 	bpl.w	140f6 <_vfiprintf_r+0xb66>
   13ac4:	f932 3b04 	ldrsh.w	r3, [r2], #4
   13ac8:	9207      	str	r2, [sp, #28]
   13aca:	17da      	asrs	r2, r3, #31
   13acc:	4611      	mov	r1, r2
   13ace:	e66e      	b.n	137ae <_vfiprintf_r+0x21e>
   13ad0:	f016 0310 	ands.w	r3, r6, #16
   13ad4:	9907      	ldr	r1, [sp, #28]
   13ad6:	f040 8309 	bne.w	140ec <_vfiprintf_r+0xb5c>
   13ada:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   13ade:	f000 8301 	beq.w	140e4 <_vfiprintf_r+0xb54>
   13ae2:	461a      	mov	r2, r3
   13ae4:	f851 3b04 	ldr.w	r3, [r1], #4
   13ae8:	9107      	str	r1, [sp, #28]
   13aea:	b29b      	uxth	r3, r3
   13aec:	e6c3      	b.n	13876 <_vfiprintf_r+0x2e6>
   13aee:	9b07      	ldr	r3, [sp, #28]
   13af0:	461a      	mov	r2, r3
   13af2:	2300      	movs	r3, #0
   13af4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13af8:	4613      	mov	r3, r2
   13afa:	f853 4b04 	ldr.w	r4, [r3], #4
   13afe:	9303      	str	r3, [sp, #12]
   13b00:	2c00      	cmp	r4, #0
   13b02:	f000 8412 	beq.w	1432a <_vfiprintf_r+0xd9a>
   13b06:	2953      	cmp	r1, #83	; 0x53
   13b08:	f000 8365 	beq.w	141d6 <_vfiprintf_r+0xc46>
   13b0c:	f016 0510 	ands.w	r5, r6, #16
   13b10:	f040 8361 	bne.w	141d6 <_vfiprintf_r+0xc46>
   13b14:	1c7b      	adds	r3, r7, #1
   13b16:	f000 84b3 	beq.w	14480 <_vfiprintf_r+0xef0>
   13b1a:	463a      	mov	r2, r7
   13b1c:	4629      	mov	r1, r5
   13b1e:	4620      	mov	r0, r4
   13b20:	f7f9 f94e 	bl	cdc0 <memchr>
   13b24:	9008      	str	r0, [sp, #32]
   13b26:	2800      	cmp	r0, #0
   13b28:	f000 849f 	beq.w	1446a <_vfiprintf_r+0xeda>
   13b2c:	1b03      	subs	r3, r0, r4
   13b2e:	9a03      	ldr	r2, [sp, #12]
   13b30:	9304      	str	r3, [sp, #16]
   13b32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13b36:	462f      	mov	r7, r5
   13b38:	9207      	str	r2, [sp, #28]
   13b3a:	9303      	str	r3, [sp, #12]
   13b3c:	9508      	str	r5, [sp, #32]
   13b3e:	e657      	b.n	137f0 <_vfiprintf_r+0x260>
   13b40:	2943      	cmp	r1, #67	; 0x43
   13b42:	d002      	beq.n	13b4a <_vfiprintf_r+0x5ba>
   13b44:	06f5      	lsls	r5, r6, #27
   13b46:	f140 832d 	bpl.w	141a4 <_vfiprintf_r+0xc14>
   13b4a:	9d07      	ldr	r5, [sp, #28]
   13b4c:	2208      	movs	r2, #8
   13b4e:	2100      	movs	r1, #0
   13b50:	a816      	add	r0, sp, #88	; 0x58
   13b52:	ac2b      	add	r4, sp, #172	; 0xac
   13b54:	f7f8 fe52 	bl	c7fc <memset>
   13b58:	ab16      	add	r3, sp, #88	; 0x58
   13b5a:	f855 2b04 	ldr.w	r2, [r5], #4
   13b5e:	4621      	mov	r1, r4
   13b60:	4658      	mov	r0, fp
   13b62:	f7ff fa77 	bl	13054 <_wcrtomb_r>
   13b66:	4603      	mov	r3, r0
   13b68:	3301      	adds	r3, #1
   13b6a:	9004      	str	r0, [sp, #16]
   13b6c:	f000 84b3 	beq.w	144d6 <_vfiprintf_r+0xf46>
   13b70:	9b04      	ldr	r3, [sp, #16]
   13b72:	9507      	str	r5, [sp, #28]
   13b74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13b78:	9303      	str	r3, [sp, #12]
   13b7a:	2300      	movs	r3, #0
   13b7c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13b80:	e703      	b.n	1398a <_vfiprintf_r+0x3fa>
   13b82:	9b07      	ldr	r3, [sp, #28]
   13b84:	f853 2b04 	ldr.w	r2, [r3], #4
   13b88:	9206      	str	r2, [sp, #24]
   13b8a:	2a00      	cmp	r2, #0
   13b8c:	f280 829c 	bge.w	140c8 <_vfiprintf_r+0xb38>
   13b90:	9a06      	ldr	r2, [sp, #24]
   13b92:	4252      	negs	r2, r2
   13b94:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13b98:	f898 1000 	ldrb.w	r1, [r8]
   13b9c:	f046 0604 	orr.w	r6, r6, #4
   13ba0:	e569      	b.n	13676 <_vfiprintf_r+0xe6>
   13ba2:	f898 1000 	ldrb.w	r1, [r8]
   13ba6:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   13baa:	e564      	b.n	13676 <_vfiprintf_r+0xe6>
   13bac:	f898 1000 	ldrb.w	r1, [r8]
   13bb0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   13bb4:	e55f      	b.n	13676 <_vfiprintf_r+0xe6>
   13bb6:	4642      	mov	r2, r8
   13bb8:	f812 1b01 	ldrb.w	r1, [r2], #1
   13bbc:	292a      	cmp	r1, #42	; 0x2a
   13bbe:	f000 8496 	beq.w	144ee <_vfiprintf_r+0xf5e>
   13bc2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13bc6:	2b09      	cmp	r3, #9
   13bc8:	4690      	mov	r8, r2
   13bca:	f04f 0700 	mov.w	r7, #0
   13bce:	f63f ad54 	bhi.w	1367a <_vfiprintf_r+0xea>
   13bd2:	f818 1b01 	ldrb.w	r1, [r8], #1
   13bd6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   13bda:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   13bde:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13be2:	2b09      	cmp	r3, #9
   13be4:	d9f5      	bls.n	13bd2 <_vfiprintf_r+0x642>
   13be6:	e548      	b.n	1367a <_vfiprintf_r+0xea>
   13be8:	f898 1000 	ldrb.w	r1, [r8]
   13bec:	f046 0601 	orr.w	r6, r6, #1
   13bf0:	e541      	b.n	13676 <_vfiprintf_r+0xe6>
   13bf2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   13bf6:	2b00      	cmp	r3, #0
   13bf8:	f47f adc2 	bne.w	13780 <_vfiprintf_r+0x1f0>
   13bfc:	2320      	movs	r3, #32
   13bfe:	f898 1000 	ldrb.w	r1, [r8]
   13c02:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13c06:	e536      	b.n	13676 <_vfiprintf_r+0xe6>
   13c08:	f898 1000 	ldrb.w	r1, [r8]
   13c0c:	296c      	cmp	r1, #108	; 0x6c
   13c0e:	bf03      	ittte	eq
   13c10:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   13c14:	f046 0620 	orreq.w	r6, r6, #32
   13c18:	f108 0801 	addeq.w	r8, r8, #1
   13c1c:	f046 0610 	orrne.w	r6, r6, #16
   13c20:	e529      	b.n	13676 <_vfiprintf_r+0xe6>
   13c22:	f898 1000 	ldrb.w	r1, [r8]
   13c26:	2968      	cmp	r1, #104	; 0x68
   13c28:	bf03      	ittte	eq
   13c2a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   13c2e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   13c32:	f108 0801 	addeq.w	r8, r8, #1
   13c36:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   13c3a:	e51c      	b.n	13676 <_vfiprintf_r+0xe6>
   13c3c:	f046 0310 	orr.w	r3, r6, #16
   13c40:	9303      	str	r3, [sp, #12]
   13c42:	9b03      	ldr	r3, [sp, #12]
   13c44:	f013 0220 	ands.w	r2, r3, #32
   13c48:	f000 8206 	beq.w	14058 <_vfiprintf_r+0xac8>
   13c4c:	9b07      	ldr	r3, [sp, #28]
   13c4e:	3307      	adds	r3, #7
   13c50:	f023 0307 	bic.w	r3, r3, #7
   13c54:	4619      	mov	r1, r3
   13c56:	685a      	ldr	r2, [r3, #4]
   13c58:	f851 3b08 	ldr.w	r3, [r1], #8
   13c5c:	9107      	str	r1, [sp, #28]
   13c5e:	2101      	movs	r1, #1
   13c60:	e60d      	b.n	1387e <_vfiprintf_r+0x2ee>
   13c62:	9a07      	ldr	r2, [sp, #28]
   13c64:	f046 0302 	orr.w	r3, r6, #2
   13c68:	9303      	str	r3, [sp, #12]
   13c6a:	f852 3b04 	ldr.w	r3, [r2], #4
   13c6e:	9207      	str	r2, [sp, #28]
   13c70:	f647 0230 	movw	r2, #30768	; 0x7830
   13c74:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   13c78:	4ab8      	ldr	r2, [pc, #736]	; (13f5c <_vfiprintf_r+0x9cc>)
   13c7a:	920c      	str	r2, [sp, #48]	; 0x30
   13c7c:	2102      	movs	r1, #2
   13c7e:	2200      	movs	r2, #0
   13c80:	e5fd      	b.n	1387e <_vfiprintf_r+0x2ee>
   13c82:	06b7      	lsls	r7, r6, #26
   13c84:	f100 8248 	bmi.w	14118 <_vfiprintf_r+0xb88>
   13c88:	06f5      	lsls	r5, r6, #27
   13c8a:	f100 8346 	bmi.w	1431a <_vfiprintf_r+0xd8a>
   13c8e:	0674      	lsls	r4, r6, #25
   13c90:	f100 83d5 	bmi.w	1443e <_vfiprintf_r+0xeae>
   13c94:	05b0      	lsls	r0, r6, #22
   13c96:	f140 8340 	bpl.w	1431a <_vfiprintf_r+0xd8a>
   13c9a:	9b07      	ldr	r3, [sp, #28]
   13c9c:	9905      	ldr	r1, [sp, #20]
   13c9e:	f853 2b04 	ldr.w	r2, [r3], #4
   13ca2:	9307      	str	r3, [sp, #28]
   13ca4:	7011      	strb	r1, [r2, #0]
   13ca6:	e4be      	b.n	13626 <_vfiprintf_r+0x96>
   13ca8:	9603      	str	r6, [sp, #12]
   13caa:	2901      	cmp	r1, #1
   13cac:	f43f ad8c 	beq.w	137c8 <_vfiprintf_r+0x238>
   13cb0:	2902      	cmp	r1, #2
   13cb2:	ac44      	add	r4, sp, #272	; 0x110
   13cb4:	d111      	bne.n	13cda <_vfiprintf_r+0x74a>
   13cb6:	980c      	ldr	r0, [sp, #48]	; 0x30
   13cb8:	f003 010f 	and.w	r1, r3, #15
   13cbc:	091b      	lsrs	r3, r3, #4
   13cbe:	5c41      	ldrb	r1, [r0, r1]
   13cc0:	f804 1d01 	strb.w	r1, [r4, #-1]!
   13cc4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   13cc8:	0912      	lsrs	r2, r2, #4
   13cca:	ea53 0102 	orrs.w	r1, r3, r2
   13cce:	d1f3      	bne.n	13cb8 <_vfiprintf_r+0x728>
   13cd0:	9e03      	ldr	r6, [sp, #12]
   13cd2:	ab44      	add	r3, sp, #272	; 0x110
   13cd4:	1b1b      	subs	r3, r3, r4
   13cd6:	9304      	str	r3, [sp, #16]
   13cd8:	e583      	b.n	137e2 <_vfiprintf_r+0x252>
   13cda:	f003 0107 	and.w	r1, r3, #7
   13cde:	08db      	lsrs	r3, r3, #3
   13ce0:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   13ce4:	08d2      	lsrs	r2, r2, #3
   13ce6:	3130      	adds	r1, #48	; 0x30
   13ce8:	ea53 0502 	orrs.w	r5, r3, r2
   13cec:	4620      	mov	r0, r4
   13cee:	f804 1d01 	strb.w	r1, [r4, #-1]!
   13cf2:	d1f2      	bne.n	13cda <_vfiprintf_r+0x74a>
   13cf4:	9e03      	ldr	r6, [sp, #12]
   13cf6:	07f3      	lsls	r3, r6, #31
   13cf8:	d5eb      	bpl.n	13cd2 <_vfiprintf_r+0x742>
   13cfa:	2930      	cmp	r1, #48	; 0x30
   13cfc:	d0e8      	beq.n	13cd0 <_vfiprintf_r+0x740>
   13cfe:	2330      	movs	r3, #48	; 0x30
   13d00:	3802      	subs	r0, #2
   13d02:	f804 3c01 	strb.w	r3, [r4, #-1]
   13d06:	ab44      	add	r3, sp, #272	; 0x110
   13d08:	1a1b      	subs	r3, r3, r0
   13d0a:	9e03      	ldr	r6, [sp, #12]
   13d0c:	9304      	str	r3, [sp, #16]
   13d0e:	4604      	mov	r4, r0
   13d10:	e567      	b.n	137e2 <_vfiprintf_r+0x252>
   13d12:	9b04      	ldr	r3, [sp, #16]
   13d14:	941b      	str	r4, [sp, #108]	; 0x6c
   13d16:	2201      	movs	r2, #1
   13d18:	931c      	str	r3, [sp, #112]	; 0x70
   13d1a:	931a      	str	r3, [sp, #104]	; 0x68
   13d1c:	9219      	str	r2, [sp, #100]	; 0x64
   13d1e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13d22:	f109 0908 	add.w	r9, r9, #8
   13d26:	e69d      	b.n	13a64 <_vfiprintf_r+0x4d4>
   13d28:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13d2c:	e47b      	b.n	13626 <_vfiprintf_r+0x96>
   13d2e:	9a06      	ldr	r2, [sp, #24]
   13d30:	9d03      	ldr	r5, [sp, #12]
   13d32:	1b55      	subs	r5, r2, r5
   13d34:	2d00      	cmp	r5, #0
   13d36:	f77f ae76 	ble.w	13a26 <_vfiprintf_r+0x496>
   13d3a:	2d10      	cmp	r5, #16
   13d3c:	f340 83bb 	ble.w	144b6 <_vfiprintf_r+0xf26>
   13d40:	9409      	str	r4, [sp, #36]	; 0x24
   13d42:	ee18 4a10 	vmov	r4, s16
   13d46:	e007      	b.n	13d58 <_vfiprintf_r+0x7c8>
   13d48:	f100 0c02 	add.w	ip, r0, #2
   13d4c:	f109 0908 	add.w	r9, r9, #8
   13d50:	4610      	mov	r0, r2
   13d52:	3d10      	subs	r5, #16
   13d54:	2d10      	cmp	r5, #16
   13d56:	dd1e      	ble.n	13d96 <_vfiprintf_r+0x806>
   13d58:	4981      	ldr	r1, [pc, #516]	; (13f60 <_vfiprintf_r+0x9d0>)
   13d5a:	f8c9 1000 	str.w	r1, [r9]
   13d5e:	1c42      	adds	r2, r0, #1
   13d60:	3310      	adds	r3, #16
   13d62:	2110      	movs	r1, #16
   13d64:	2a07      	cmp	r2, #7
   13d66:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   13d6a:	f8c9 1004 	str.w	r1, [r9, #4]
   13d6e:	ddeb      	ble.n	13d48 <_vfiprintf_r+0x7b8>
   13d70:	aa18      	add	r2, sp, #96	; 0x60
   13d72:	2b00      	cmp	r3, #0
   13d74:	d074      	beq.n	13e60 <_vfiprintf_r+0x8d0>
   13d76:	4621      	mov	r1, r4
   13d78:	4658      	mov	r0, fp
   13d7a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13d7e:	f7ff fbcb 	bl	13518 <__sprint_r.part.0>
   13d82:	2800      	cmp	r0, #0
   13d84:	f47f addb 	bne.w	1393e <_vfiprintf_r+0x3ae>
   13d88:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13d8c:	3d10      	subs	r5, #16
   13d8e:	2d10      	cmp	r5, #16
   13d90:	f100 0c01 	add.w	ip, r0, #1
   13d94:	dce0      	bgt.n	13d58 <_vfiprintf_r+0x7c8>
   13d96:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13d98:	4a71      	ldr	r2, [pc, #452]	; (13f60 <_vfiprintf_r+0x9d0>)
   13d9a:	f8c9 5004 	str.w	r5, [r9, #4]
   13d9e:	442b      	add	r3, r5
   13da0:	f1bc 0f07 	cmp.w	ip, #7
   13da4:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   13da8:	f8c9 2000 	str.w	r2, [r9]
   13dac:	f340 8194 	ble.w	140d8 <_vfiprintf_r+0xb48>
   13db0:	2b00      	cmp	r3, #0
   13db2:	f000 831f 	beq.w	143f4 <_vfiprintf_r+0xe64>
   13db6:	ee18 1a10 	vmov	r1, s16
   13dba:	aa18      	add	r2, sp, #96	; 0x60
   13dbc:	4658      	mov	r0, fp
   13dbe:	f7ff fbab 	bl	13518 <__sprint_r.part.0>
   13dc2:	2800      	cmp	r0, #0
   13dc4:	f47f adbb 	bne.w	1393e <_vfiprintf_r+0x3ae>
   13dc8:	9a04      	ldr	r2, [sp, #16]
   13dca:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13dce:	1abd      	subs	r5, r7, r2
   13dd0:	2d00      	cmp	r5, #0
   13dd2:	f100 0101 	add.w	r1, r0, #1
   13dd6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13dda:	f77f ae29 	ble.w	13a30 <_vfiprintf_r+0x4a0>
   13dde:	2d10      	cmp	r5, #16
   13de0:	dd29      	ble.n	13e36 <_vfiprintf_r+0x8a6>
   13de2:	9409      	str	r4, [sp, #36]	; 0x24
   13de4:	2710      	movs	r7, #16
   13de6:	ee18 4a10 	vmov	r4, s16
   13dea:	e007      	b.n	13dfc <_vfiprintf_r+0x86c>
   13dec:	f100 0c02 	add.w	ip, r0, #2
   13df0:	f109 0908 	add.w	r9, r9, #8
   13df4:	4610      	mov	r0, r2
   13df6:	3d10      	subs	r5, #16
   13df8:	2d10      	cmp	r5, #16
   13dfa:	dd1a      	ble.n	13e32 <_vfiprintf_r+0x8a2>
   13dfc:	1c42      	adds	r2, r0, #1
   13dfe:	4958      	ldr	r1, [pc, #352]	; (13f60 <_vfiprintf_r+0x9d0>)
   13e00:	3310      	adds	r3, #16
   13e02:	2a07      	cmp	r2, #7
   13e04:	e9c9 1700 	strd	r1, r7, [r9]
   13e08:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   13e0c:	ddee      	ble.n	13dec <_vfiprintf_r+0x85c>
   13e0e:	aa18      	add	r2, sp, #96	; 0x60
   13e10:	b303      	cbz	r3, 13e54 <_vfiprintf_r+0x8c4>
   13e12:	4621      	mov	r1, r4
   13e14:	4658      	mov	r0, fp
   13e16:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13e1a:	f7ff fb7d 	bl	13518 <__sprint_r.part.0>
   13e1e:	2800      	cmp	r0, #0
   13e20:	f47f ad8d 	bne.w	1393e <_vfiprintf_r+0x3ae>
   13e24:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13e28:	3d10      	subs	r5, #16
   13e2a:	2d10      	cmp	r5, #16
   13e2c:	f100 0c01 	add.w	ip, r0, #1
   13e30:	dce4      	bgt.n	13dfc <_vfiprintf_r+0x86c>
   13e32:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13e34:	4661      	mov	r1, ip
   13e36:	4a4a      	ldr	r2, [pc, #296]	; (13f60 <_vfiprintf_r+0x9d0>)
   13e38:	f8c9 5004 	str.w	r5, [r9, #4]
   13e3c:	442b      	add	r3, r5
   13e3e:	2907      	cmp	r1, #7
   13e40:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13e44:	f8c9 2000 	str.w	r2, [r9]
   13e48:	f300 80e7 	bgt.w	1401a <_vfiprintf_r+0xa8a>
   13e4c:	f109 0908 	add.w	r9, r9, #8
   13e50:	3101      	adds	r1, #1
   13e52:	e5ed      	b.n	13a30 <_vfiprintf_r+0x4a0>
   13e54:	f04f 0c01 	mov.w	ip, #1
   13e58:	4618      	mov	r0, r3
   13e5a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13e5e:	e7ca      	b.n	13df6 <_vfiprintf_r+0x866>
   13e60:	f04f 0c01 	mov.w	ip, #1
   13e64:	4618      	mov	r0, r3
   13e66:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13e6a:	e772      	b.n	13d52 <_vfiprintf_r+0x7c2>
   13e6c:	2b00      	cmp	r3, #0
   13e6e:	f000 8104 	beq.w	1407a <_vfiprintf_r+0xaea>
   13e72:	ee18 1a10 	vmov	r1, s16
   13e76:	aa18      	add	r2, sp, #96	; 0x60
   13e78:	4658      	mov	r0, fp
   13e7a:	f7ff fb4d 	bl	13518 <__sprint_r.part.0>
   13e7e:	2800      	cmp	r0, #0
   13e80:	f47f ad5d 	bne.w	1393e <_vfiprintf_r+0x3ae>
   13e84:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13e88:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13e8c:	1c41      	adds	r1, r0, #1
   13e8e:	e5a7      	b.n	139e0 <_vfiprintf_r+0x450>
   13e90:	2302      	movs	r3, #2
   13e92:	aa11      	add	r2, sp, #68	; 0x44
   13e94:	931c      	str	r3, [sp, #112]	; 0x70
   13e96:	921b      	str	r2, [sp, #108]	; 0x6c
   13e98:	2101      	movs	r1, #1
   13e9a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13e9e:	4608      	mov	r0, r1
   13ea0:	f109 0908 	add.w	r9, r9, #8
   13ea4:	1c41      	adds	r1, r0, #1
   13ea6:	e5ba      	b.n	13a1e <_vfiprintf_r+0x48e>
   13ea8:	2d10      	cmp	r5, #16
   13eaa:	f340 82e5 	ble.w	14478 <_vfiprintf_r+0xee8>
   13eae:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   13eb2:	940f      	str	r4, [sp, #60]	; 0x3c
   13eb4:	4608      	mov	r0, r1
   13eb6:	ee18 4a10 	vmov	r4, s16
   13eba:	e007      	b.n	13ecc <_vfiprintf_r+0x93c>
   13ebc:	f100 0c02 	add.w	ip, r0, #2
   13ec0:	f109 0908 	add.w	r9, r9, #8
   13ec4:	4610      	mov	r0, r2
   13ec6:	3d10      	subs	r5, #16
   13ec8:	2d10      	cmp	r5, #16
   13eca:	dd1d      	ble.n	13f08 <_vfiprintf_r+0x978>
   13ecc:	4925      	ldr	r1, [pc, #148]	; (13f64 <_vfiprintf_r+0x9d4>)
   13ece:	f8c9 1000 	str.w	r1, [r9]
   13ed2:	1c42      	adds	r2, r0, #1
   13ed4:	3310      	adds	r3, #16
   13ed6:	2110      	movs	r1, #16
   13ed8:	2a07      	cmp	r2, #7
   13eda:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   13ede:	f8c9 1004 	str.w	r1, [r9, #4]
   13ee2:	ddeb      	ble.n	13ebc <_vfiprintf_r+0x92c>
   13ee4:	aa18      	add	r2, sp, #96	; 0x60
   13ee6:	b303      	cbz	r3, 13f2a <_vfiprintf_r+0x99a>
   13ee8:	4621      	mov	r1, r4
   13eea:	4658      	mov	r0, fp
   13eec:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13ef0:	f7ff fb12 	bl	13518 <__sprint_r.part.0>
   13ef4:	2800      	cmp	r0, #0
   13ef6:	f47f ad22 	bne.w	1393e <_vfiprintf_r+0x3ae>
   13efa:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13efe:	3d10      	subs	r5, #16
   13f00:	2d10      	cmp	r5, #16
   13f02:	f100 0c01 	add.w	ip, r0, #1
   13f06:	dce1      	bgt.n	13ecc <_vfiprintf_r+0x93c>
   13f08:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   13f0a:	4660      	mov	r0, ip
   13f0c:	4a15      	ldr	r2, [pc, #84]	; (13f64 <_vfiprintf_r+0x9d4>)
   13f0e:	f8c9 5004 	str.w	r5, [r9, #4]
   13f12:	442b      	add	r3, r5
   13f14:	2807      	cmp	r0, #7
   13f16:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   13f1a:	f8c9 2000 	str.w	r2, [r9]
   13f1e:	f300 80c1 	bgt.w	140a4 <_vfiprintf_r+0xb14>
   13f22:	f109 0908 	add.w	r9, r9, #8
   13f26:	1c41      	adds	r1, r0, #1
   13f28:	e546      	b.n	139b8 <_vfiprintf_r+0x428>
   13f2a:	4618      	mov	r0, r3
   13f2c:	f04f 0c01 	mov.w	ip, #1
   13f30:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13f34:	e7c7      	b.n	13ec6 <_vfiprintf_r+0x936>
   13f36:	0776      	lsls	r6, r6, #29
   13f38:	9319      	str	r3, [sp, #100]	; 0x64
   13f3a:	d553      	bpl.n	13fe4 <_vfiprintf_r+0xa54>
   13f3c:	9a06      	ldr	r2, [sp, #24]
   13f3e:	9903      	ldr	r1, [sp, #12]
   13f40:	1a54      	subs	r4, r2, r1
   13f42:	2c00      	cmp	r4, #0
   13f44:	dd4e      	ble.n	13fe4 <_vfiprintf_r+0xa54>
   13f46:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13f4a:	2c10      	cmp	r4, #16
   13f4c:	f340 82b0 	ble.w	144b0 <_vfiprintf_r+0xf20>
   13f50:	9919      	ldr	r1, [sp, #100]	; 0x64
   13f52:	ee18 6a10 	vmov	r6, s16
   13f56:	2510      	movs	r5, #16
   13f58:	e00d      	b.n	13f76 <_vfiprintf_r+0x9e6>
   13f5a:	bf00      	nop
   13f5c:	20000ef4 	.word	0x20000ef4
   13f60:	20008730 	.word	0x20008730
   13f64:	200029b0 	.word	0x200029b0
   13f68:	1c88      	adds	r0, r1, #2
   13f6a:	f109 0908 	add.w	r9, r9, #8
   13f6e:	4611      	mov	r1, r2
   13f70:	3c10      	subs	r4, #16
   13f72:	2c10      	cmp	r4, #16
   13f74:	dd1a      	ble.n	13fac <_vfiprintf_r+0xa1c>
   13f76:	1c4a      	adds	r2, r1, #1
   13f78:	48b3      	ldr	r0, [pc, #716]	; (14248 <_vfiprintf_r+0xcb8>)
   13f7a:	3310      	adds	r3, #16
   13f7c:	2a07      	cmp	r2, #7
   13f7e:	e9c9 0500 	strd	r0, r5, [r9]
   13f82:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   13f86:	ddef      	ble.n	13f68 <_vfiprintf_r+0x9d8>
   13f88:	aa18      	add	r2, sp, #96	; 0x60
   13f8a:	b333      	cbz	r3, 13fda <_vfiprintf_r+0xa4a>
   13f8c:	4631      	mov	r1, r6
   13f8e:	4658      	mov	r0, fp
   13f90:	f7ff fac2 	bl	13518 <__sprint_r.part.0>
   13f94:	2800      	cmp	r0, #0
   13f96:	f47f acd2 	bne.w	1393e <_vfiprintf_r+0x3ae>
   13f9a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   13f9e:	3c10      	subs	r4, #16
   13fa0:	2c10      	cmp	r4, #16
   13fa2:	f101 0001 	add.w	r0, r1, #1
   13fa6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13faa:	dce4      	bgt.n	13f76 <_vfiprintf_r+0x9e6>
   13fac:	4aa6      	ldr	r2, [pc, #664]	; (14248 <_vfiprintf_r+0xcb8>)
   13fae:	f8c9 4004 	str.w	r4, [r9, #4]
   13fb2:	4423      	add	r3, r4
   13fb4:	2807      	cmp	r0, #7
   13fb6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   13fba:	f8c9 2000 	str.w	r2, [r9]
   13fbe:	f77f ad59 	ble.w	13a74 <_vfiprintf_r+0x4e4>
   13fc2:	b17b      	cbz	r3, 13fe4 <_vfiprintf_r+0xa54>
   13fc4:	ee18 1a10 	vmov	r1, s16
   13fc8:	aa18      	add	r2, sp, #96	; 0x60
   13fca:	4658      	mov	r0, fp
   13fcc:	f7ff faa4 	bl	13518 <__sprint_r.part.0>
   13fd0:	2800      	cmp	r0, #0
   13fd2:	f47f acb4 	bne.w	1393e <_vfiprintf_r+0x3ae>
   13fd6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13fd8:	e54c      	b.n	13a74 <_vfiprintf_r+0x4e4>
   13fda:	2001      	movs	r0, #1
   13fdc:	4619      	mov	r1, r3
   13fde:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13fe2:	e7c5      	b.n	13f70 <_vfiprintf_r+0x9e0>
   13fe4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   13fe8:	9903      	ldr	r1, [sp, #12]
   13fea:	428a      	cmp	r2, r1
   13fec:	bfac      	ite	ge
   13fee:	189b      	addge	r3, r3, r2
   13ff0:	185b      	addlt	r3, r3, r1
   13ff2:	9305      	str	r3, [sp, #20]
   13ff4:	e549      	b.n	13a8a <_vfiprintf_r+0x4fa>
   13ff6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   13ffa:	058f      	lsls	r7, r1, #22
   13ffc:	ee18 3a10 	vmov	r3, s16
   14000:	b28a      	uxth	r2, r1
   14002:	f53f aae8 	bmi.w	135d6 <_vfiprintf_r+0x46>
   14006:	ee18 5a10 	vmov	r5, s16
   1400a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1400c:	f7f8 fd5a 	bl	cac4 <__retarget_lock_acquire_recursive>
   14010:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   14014:	b28a      	uxth	r2, r1
   14016:	f7ff bade 	b.w	135d6 <_vfiprintf_r+0x46>
   1401a:	2b00      	cmp	r3, #0
   1401c:	f43f ae79 	beq.w	13d12 <_vfiprintf_r+0x782>
   14020:	ee18 1a10 	vmov	r1, s16
   14024:	aa18      	add	r2, sp, #96	; 0x60
   14026:	4658      	mov	r0, fp
   14028:	f7ff fa76 	bl	13518 <__sprint_r.part.0>
   1402c:	2800      	cmp	r0, #0
   1402e:	f47f ac86 	bne.w	1393e <_vfiprintf_r+0x3ae>
   14032:	9919      	ldr	r1, [sp, #100]	; 0x64
   14034:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   14036:	3101      	adds	r1, #1
   14038:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1403c:	e4f8      	b.n	13a30 <_vfiprintf_r+0x4a0>
   1403e:	9219      	str	r2, [sp, #100]	; 0x64
   14040:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14044:	e45e      	b.n	13904 <_vfiprintf_r+0x374>
   14046:	2f00      	cmp	r7, #0
   14048:	f47f abc3 	bne.w	137d2 <_vfiprintf_r+0x242>
   1404c:	9e03      	ldr	r6, [sp, #12]
   1404e:	2700      	movs	r7, #0
   14050:	9704      	str	r7, [sp, #16]
   14052:	ac44      	add	r4, sp, #272	; 0x110
   14054:	f7ff bbc5 	b.w	137e2 <_vfiprintf_r+0x252>
   14058:	9b03      	ldr	r3, [sp, #12]
   1405a:	f013 0310 	ands.w	r3, r3, #16
   1405e:	d154      	bne.n	1410a <_vfiprintf_r+0xb7a>
   14060:	9a03      	ldr	r2, [sp, #12]
   14062:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   14066:	f000 816b 	beq.w	14340 <_vfiprintf_r+0xdb0>
   1406a:	9907      	ldr	r1, [sp, #28]
   1406c:	461a      	mov	r2, r3
   1406e:	f851 3b04 	ldr.w	r3, [r1], #4
   14072:	9107      	str	r1, [sp, #28]
   14074:	b29b      	uxth	r3, r3
   14076:	2101      	movs	r1, #1
   14078:	e401      	b.n	1387e <_vfiprintf_r+0x2ee>
   1407a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1407c:	2a00      	cmp	r2, #0
   1407e:	d164      	bne.n	1414a <_vfiprintf_r+0xbba>
   14080:	4618      	mov	r0, r3
   14082:	2101      	movs	r1, #1
   14084:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14088:	e4c9      	b.n	13a1e <_vfiprintf_r+0x48e>
   1408a:	2101      	movs	r1, #1
   1408c:	4618      	mov	r0, r3
   1408e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14092:	e4c4      	b.n	13a1e <_vfiprintf_r+0x48e>
   14094:	425b      	negs	r3, r3
   14096:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   1409a:	9603      	str	r6, [sp, #12]
   1409c:	202d      	movs	r0, #45	; 0x2d
   1409e:	2101      	movs	r1, #1
   140a0:	f7ff bbee 	b.w	13880 <_vfiprintf_r+0x2f0>
   140a4:	2b00      	cmp	r3, #0
   140a6:	f000 8088 	beq.w	141ba <_vfiprintf_r+0xc2a>
   140aa:	ee18 1a10 	vmov	r1, s16
   140ae:	aa18      	add	r2, sp, #96	; 0x60
   140b0:	4658      	mov	r0, fp
   140b2:	f7ff fa31 	bl	13518 <__sprint_r.part.0>
   140b6:	2800      	cmp	r0, #0
   140b8:	f47f ac41 	bne.w	1393e <_vfiprintf_r+0x3ae>
   140bc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   140c0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   140c4:	1c41      	adds	r1, r0, #1
   140c6:	e477      	b.n	139b8 <_vfiprintf_r+0x428>
   140c8:	f898 1000 	ldrb.w	r1, [r8]
   140cc:	9307      	str	r3, [sp, #28]
   140ce:	f7ff bad2 	b.w	13676 <_vfiprintf_r+0xe6>
   140d2:	ac44      	add	r4, sp, #272	; 0x110
   140d4:	f7ff bb85 	b.w	137e2 <_vfiprintf_r+0x252>
   140d8:	f109 0908 	add.w	r9, r9, #8
   140dc:	f10c 0101 	add.w	r1, ip, #1
   140e0:	4660      	mov	r0, ip
   140e2:	e4a0      	b.n	13a26 <_vfiprintf_r+0x496>
   140e4:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   140e8:	f040 8197 	bne.w	1441a <_vfiprintf_r+0xe8a>
   140ec:	f851 3b04 	ldr.w	r3, [r1], #4
   140f0:	9107      	str	r1, [sp, #28]
   140f2:	f7ff bbc0 	b.w	13876 <_vfiprintf_r+0x2e6>
   140f6:	05b3      	lsls	r3, r6, #22
   140f8:	f100 8188 	bmi.w	1440c <_vfiprintf_r+0xe7c>
   140fc:	f852 3b04 	ldr.w	r3, [r2], #4
   14100:	9207      	str	r2, [sp, #28]
   14102:	17da      	asrs	r2, r3, #31
   14104:	4611      	mov	r1, r2
   14106:	f7ff bb52 	b.w	137ae <_vfiprintf_r+0x21e>
   1410a:	9907      	ldr	r1, [sp, #28]
   1410c:	f851 3b04 	ldr.w	r3, [r1], #4
   14110:	9107      	str	r1, [sp, #28]
   14112:	2101      	movs	r1, #1
   14114:	f7ff bbb3 	b.w	1387e <_vfiprintf_r+0x2ee>
   14118:	9b07      	ldr	r3, [sp, #28]
   1411a:	9805      	ldr	r0, [sp, #20]
   1411c:	f853 1b04 	ldr.w	r1, [r3], #4
   14120:	9307      	str	r3, [sp, #28]
   14122:	17c2      	asrs	r2, r0, #31
   14124:	e9c1 0200 	strd	r0, r2, [r1]
   14128:	f7ff ba7d 	b.w	13626 <_vfiprintf_r+0x96>
   1412c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1412e:	2b00      	cmp	r3, #0
   14130:	f43f ab26 	beq.w	13780 <_vfiprintf_r+0x1f0>
   14134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14136:	781b      	ldrb	r3, [r3, #0]
   14138:	2b00      	cmp	r3, #0
   1413a:	f43f ab21 	beq.w	13780 <_vfiprintf_r+0x1f0>
   1413e:	f898 1000 	ldrb.w	r1, [r8]
   14142:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   14146:	f7ff ba96 	b.w	13676 <_vfiprintf_r+0xe6>
   1414a:	2302      	movs	r3, #2
   1414c:	aa11      	add	r2, sp, #68	; 0x44
   1414e:	931c      	str	r3, [sp, #112]	; 0x70
   14150:	921b      	str	r2, [sp, #108]	; 0x6c
   14152:	2001      	movs	r0, #1
   14154:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14158:	e6a2      	b.n	13ea0 <_vfiprintf_r+0x910>
   1415a:	9603      	str	r6, [sp, #12]
   1415c:	e571      	b.n	13c42 <_vfiprintf_r+0x6b2>
   1415e:	4b3b      	ldr	r3, [pc, #236]	; (1424c <_vfiprintf_r+0xcbc>)
   14160:	930c      	str	r3, [sp, #48]	; 0x30
   14162:	f016 0220 	ands.w	r2, r6, #32
   14166:	d059      	beq.n	1421c <_vfiprintf_r+0xc8c>
   14168:	9b07      	ldr	r3, [sp, #28]
   1416a:	3307      	adds	r3, #7
   1416c:	f023 0307 	bic.w	r3, r3, #7
   14170:	4618      	mov	r0, r3
   14172:	685a      	ldr	r2, [r3, #4]
   14174:	f850 3b08 	ldr.w	r3, [r0], #8
   14178:	9007      	str	r0, [sp, #28]
   1417a:	07f4      	lsls	r4, r6, #31
   1417c:	d509      	bpl.n	14192 <_vfiprintf_r+0xc02>
   1417e:	ea53 0002 	orrs.w	r0, r3, r2
   14182:	d006      	beq.n	14192 <_vfiprintf_r+0xc02>
   14184:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   14188:	2130      	movs	r1, #48	; 0x30
   1418a:	f046 0602 	orr.w	r6, r6, #2
   1418e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   14192:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   14196:	9103      	str	r1, [sp, #12]
   14198:	2102      	movs	r1, #2
   1419a:	f7ff bb70 	b.w	1387e <_vfiprintf_r+0x2ee>
   1419e:	4b2c      	ldr	r3, [pc, #176]	; (14250 <_vfiprintf_r+0xcc0>)
   141a0:	930c      	str	r3, [sp, #48]	; 0x30
   141a2:	e7de      	b.n	14162 <_vfiprintf_r+0xbd2>
   141a4:	9b07      	ldr	r3, [sp, #28]
   141a6:	2101      	movs	r1, #1
   141a8:	f853 2b04 	ldr.w	r2, [r3], #4
   141ac:	9103      	str	r1, [sp, #12]
   141ae:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   141b2:	9307      	str	r3, [sp, #28]
   141b4:	9104      	str	r1, [sp, #16]
   141b6:	ac2b      	add	r4, sp, #172	; 0xac
   141b8:	e4df      	b.n	13b7a <_vfiprintf_r+0x5ea>
   141ba:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   141be:	2a00      	cmp	r2, #0
   141c0:	f040 8132 	bne.w	14428 <_vfiprintf_r+0xe98>
   141c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   141c6:	2a00      	cmp	r2, #0
   141c8:	f47f ae62 	bne.w	13e90 <_vfiprintf_r+0x900>
   141cc:	4618      	mov	r0, r3
   141ce:	2101      	movs	r1, #1
   141d0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   141d4:	e427      	b.n	13a26 <_vfiprintf_r+0x496>
   141d6:	2100      	movs	r1, #0
   141d8:	2208      	movs	r2, #8
   141da:	a816      	add	r0, sp, #88	; 0x58
   141dc:	9413      	str	r4, [sp, #76]	; 0x4c
   141de:	f7f8 fb0d 	bl	c7fc <memset>
   141e2:	1c79      	adds	r1, r7, #1
   141e4:	f000 80bc 	beq.w	14360 <_vfiprintf_r+0xdd0>
   141e8:	2500      	movs	r5, #0
   141ea:	9407      	str	r4, [sp, #28]
   141ec:	462c      	mov	r4, r5
   141ee:	e00c      	b.n	1420a <_vfiprintf_r+0xc7a>
   141f0:	a92b      	add	r1, sp, #172	; 0xac
   141f2:	4658      	mov	r0, fp
   141f4:	f7fe ff2e 	bl	13054 <_wcrtomb_r>
   141f8:	1c42      	adds	r2, r0, #1
   141fa:	4420      	add	r0, r4
   141fc:	f000 816b 	beq.w	144d6 <_vfiprintf_r+0xf46>
   14200:	42b8      	cmp	r0, r7
   14202:	dc08      	bgt.n	14216 <_vfiprintf_r+0xc86>
   14204:	f000 8170 	beq.w	144e8 <_vfiprintf_r+0xf58>
   14208:	4604      	mov	r4, r0
   1420a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1420c:	5952      	ldr	r2, [r2, r5]
   1420e:	ab16      	add	r3, sp, #88	; 0x58
   14210:	3504      	adds	r5, #4
   14212:	2a00      	cmp	r2, #0
   14214:	d1ec      	bne.n	141f0 <_vfiprintf_r+0xc60>
   14216:	9404      	str	r4, [sp, #16]
   14218:	9c07      	ldr	r4, [sp, #28]
   1421a:	e0af      	b.n	1437c <_vfiprintf_r+0xdec>
   1421c:	f016 0310 	ands.w	r3, r6, #16
   14220:	9807      	ldr	r0, [sp, #28]
   14222:	d10c      	bne.n	1423e <_vfiprintf_r+0xcae>
   14224:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   14228:	d005      	beq.n	14236 <_vfiprintf_r+0xca6>
   1422a:	461a      	mov	r2, r3
   1422c:	f850 3b04 	ldr.w	r3, [r0], #4
   14230:	9007      	str	r0, [sp, #28]
   14232:	b29b      	uxth	r3, r3
   14234:	e7a1      	b.n	1417a <_vfiprintf_r+0xbea>
   14236:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   1423a:	f040 80e1 	bne.w	14400 <_vfiprintf_r+0xe70>
   1423e:	f850 3b04 	ldr.w	r3, [r0], #4
   14242:	9007      	str	r0, [sp, #28]
   14244:	e799      	b.n	1417a <_vfiprintf_r+0xbea>
   14246:	bf00      	nop
   14248:	200029b0 	.word	0x200029b0
   1424c:	20000ef4 	.word	0x20000ef4
   14250:	20000f08 	.word	0x20000f08
   14254:	9903      	ldr	r1, [sp, #12]
   14256:	9704      	str	r7, [sp, #16]
   14258:	ac44      	add	r4, sp, #272	; 0x110
   1425a:	469e      	mov	lr, r3
   1425c:	ee08 ba90 	vmov	s17, fp
   14260:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   14264:	f04f 0c00 	mov.w	ip, #0
   14268:	4623      	mov	r3, r4
   1426a:	e006      	b.n	1427a <_vfiprintf_r+0xcea>
   1426c:	f1be 0f0a 	cmp.w	lr, #10
   14270:	f172 0200 	sbcs.w	r2, r2, #0
   14274:	d339      	bcc.n	142ea <_vfiprintf_r+0xd5a>
   14276:	46a6      	mov	lr, r4
   14278:	462a      	mov	r2, r5
   1427a:	49a6      	ldr	r1, [pc, #664]	; (14514 <_vfiprintf_r+0xf84>)
   1427c:	eb1e 0002 	adds.w	r0, lr, r2
   14280:	f140 0000 	adc.w	r0, r0, #0
   14284:	460f      	mov	r7, r1
   14286:	fba1 1400 	umull	r1, r4, r1, r0
   1428a:	f024 0103 	bic.w	r1, r4, #3
   1428e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   14292:	1a40      	subs	r0, r0, r1
   14294:	ebbe 0100 	subs.w	r1, lr, r0
   14298:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   1429c:	f162 0400 	sbc.w	r4, r2, #0
   142a0:	fb05 f501 	mul.w	r5, r5, r1
   142a4:	fb07 5504 	mla	r5, r7, r4, r5
   142a8:	fba1 4107 	umull	r4, r1, r1, r7
   142ac:	440d      	add	r5, r1
   142ae:	2705      	movs	r7, #5
   142b0:	f004 0101 	and.w	r1, r4, #1
   142b4:	fba1 1b07 	umull	r1, fp, r1, r7
   142b8:	1809      	adds	r1, r1, r0
   142ba:	0864      	lsrs	r4, r4, #1
   142bc:	3130      	adds	r1, #48	; 0x30
   142be:	f803 1c01 	strb.w	r1, [r3, #-1]
   142c2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   142c6:	f10c 0c01 	add.w	ip, ip, #1
   142ca:	3b01      	subs	r3, #1
   142cc:	086d      	lsrs	r5, r5, #1
   142ce:	2e00      	cmp	r6, #0
   142d0:	d0cc      	beq.n	1426c <_vfiprintf_r+0xcdc>
   142d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   142d4:	7809      	ldrb	r1, [r1, #0]
   142d6:	4561      	cmp	r1, ip
   142d8:	d1c8      	bne.n	1426c <_vfiprintf_r+0xcdc>
   142da:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   142de:	d0c5      	beq.n	1426c <_vfiprintf_r+0xcdc>
   142e0:	f1be 0f0a 	cmp.w	lr, #10
   142e4:	f172 0200 	sbcs.w	r2, r2, #0
   142e8:	d26c      	bcs.n	143c4 <_vfiprintf_r+0xe34>
   142ea:	461c      	mov	r4, r3
   142ec:	ab44      	add	r3, sp, #272	; 0x110
   142ee:	1b1b      	subs	r3, r3, r4
   142f0:	9f04      	ldr	r7, [sp, #16]
   142f2:	9e03      	ldr	r6, [sp, #12]
   142f4:	9304      	str	r3, [sp, #16]
   142f6:	ee18 ba90 	vmov	fp, s17
   142fa:	f7ff ba72 	b.w	137e2 <_vfiprintf_r+0x252>
   142fe:	9603      	str	r6, [sp, #12]
   14300:	f7ff ba62 	b.w	137c8 <_vfiprintf_r+0x238>
   14304:	4658      	mov	r0, fp
   14306:	f7f8 f885 	bl	c414 <__sinit>
   1430a:	f7ff b95b 	b.w	135c4 <_vfiprintf_r+0x34>
   1430e:	2901      	cmp	r1, #1
   14310:	9603      	str	r6, [sp, #12]
   14312:	f47f accd 	bne.w	13cb0 <_vfiprintf_r+0x720>
   14316:	f7ff ba5c 	b.w	137d2 <_vfiprintf_r+0x242>
   1431a:	9b07      	ldr	r3, [sp, #28]
   1431c:	9905      	ldr	r1, [sp, #20]
   1431e:	f853 2b04 	ldr.w	r2, [r3], #4
   14322:	6011      	str	r1, [r2, #0]
   14324:	9307      	str	r3, [sp, #28]
   14326:	f7ff b97e 	b.w	13626 <_vfiprintf_r+0x96>
   1432a:	2f06      	cmp	r7, #6
   1432c:	463b      	mov	r3, r7
   1432e:	9a03      	ldr	r2, [sp, #12]
   14330:	4c79      	ldr	r4, [pc, #484]	; (14518 <_vfiprintf_r+0xf88>)
   14332:	9207      	str	r2, [sp, #28]
   14334:	bf28      	it	cs
   14336:	2306      	movcs	r3, #6
   14338:	9304      	str	r3, [sp, #16]
   1433a:	9303      	str	r3, [sp, #12]
   1433c:	f7ff bb25 	b.w	1398a <_vfiprintf_r+0x3fa>
   14340:	9b03      	ldr	r3, [sp, #12]
   14342:	9907      	ldr	r1, [sp, #28]
   14344:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   14348:	bf14      	ite	ne
   1434a:	f851 3b04 	ldrne.w	r3, [r1], #4
   1434e:	f851 3b04 	ldreq.w	r3, [r1], #4
   14352:	9107      	str	r1, [sp, #28]
   14354:	bf1c      	itt	ne
   14356:	4602      	movne	r2, r0
   14358:	b2db      	uxtbne	r3, r3
   1435a:	2101      	movs	r1, #1
   1435c:	f7ff ba8f 	b.w	1387e <_vfiprintf_r+0x2ee>
   14360:	ab16      	add	r3, sp, #88	; 0x58
   14362:	9300      	str	r3, [sp, #0]
   14364:	2300      	movs	r3, #0
   14366:	4619      	mov	r1, r3
   14368:	aa13      	add	r2, sp, #76	; 0x4c
   1436a:	4658      	mov	r0, fp
   1436c:	f7fe fe98 	bl	130a0 <_wcsrtombs_r>
   14370:	4603      	mov	r3, r0
   14372:	3301      	adds	r3, #1
   14374:	9004      	str	r0, [sp, #16]
   14376:	f000 80ae 	beq.w	144d6 <_vfiprintf_r+0xf46>
   1437a:	9413      	str	r4, [sp, #76]	; 0x4c
   1437c:	9b04      	ldr	r3, [sp, #16]
   1437e:	2b00      	cmp	r3, #0
   14380:	d030      	beq.n	143e4 <_vfiprintf_r+0xe54>
   14382:	2b63      	cmp	r3, #99	; 0x63
   14384:	dc63      	bgt.n	1444e <_vfiprintf_r+0xebe>
   14386:	2300      	movs	r3, #0
   14388:	9308      	str	r3, [sp, #32]
   1438a:	ac2b      	add	r4, sp, #172	; 0xac
   1438c:	2208      	movs	r2, #8
   1438e:	2100      	movs	r1, #0
   14390:	a816      	add	r0, sp, #88	; 0x58
   14392:	f7f8 fa33 	bl	c7fc <memset>
   14396:	9d04      	ldr	r5, [sp, #16]
   14398:	ab16      	add	r3, sp, #88	; 0x58
   1439a:	9300      	str	r3, [sp, #0]
   1439c:	aa13      	add	r2, sp, #76	; 0x4c
   1439e:	462b      	mov	r3, r5
   143a0:	4621      	mov	r1, r4
   143a2:	4658      	mov	r0, fp
   143a4:	f7fe fe7c 	bl	130a0 <_wcsrtombs_r>
   143a8:	4285      	cmp	r5, r0
   143aa:	f040 80ab 	bne.w	14504 <_vfiprintf_r+0xf74>
   143ae:	9b03      	ldr	r3, [sp, #12]
   143b0:	9a04      	ldr	r2, [sp, #16]
   143b2:	9307      	str	r3, [sp, #28]
   143b4:	2300      	movs	r3, #0
   143b6:	54a3      	strb	r3, [r4, r2]
   143b8:	461f      	mov	r7, r3
   143ba:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   143be:	9303      	str	r3, [sp, #12]
   143c0:	f7ff ba16 	b.w	137f0 <_vfiprintf_r+0x260>
   143c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   143c6:	990d      	ldr	r1, [sp, #52]	; 0x34
   143c8:	1a9b      	subs	r3, r3, r2
   143ca:	4618      	mov	r0, r3
   143cc:	9308      	str	r3, [sp, #32]
   143ce:	f7f8 faad 	bl	c92c <strncpy>
   143d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   143d4:	9b08      	ldr	r3, [sp, #32]
   143d6:	784a      	ldrb	r2, [r1, #1]
   143d8:	b10a      	cbz	r2, 143de <_vfiprintf_r+0xe4e>
   143da:	3101      	adds	r1, #1
   143dc:	910b      	str	r1, [sp, #44]	; 0x2c
   143de:	f04f 0c00 	mov.w	ip, #0
   143e2:	e748      	b.n	14276 <_vfiprintf_r+0xce6>
   143e4:	9b03      	ldr	r3, [sp, #12]
   143e6:	9307      	str	r3, [sp, #28]
   143e8:	9b04      	ldr	r3, [sp, #16]
   143ea:	9303      	str	r3, [sp, #12]
   143ec:	461f      	mov	r7, r3
   143ee:	9308      	str	r3, [sp, #32]
   143f0:	f7ff b9fe 	b.w	137f0 <_vfiprintf_r+0x260>
   143f4:	2101      	movs	r1, #1
   143f6:	4618      	mov	r0, r3
   143f8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   143fc:	f7ff bb13 	b.w	13a26 <_vfiprintf_r+0x496>
   14400:	f850 3b04 	ldr.w	r3, [r0], #4
   14404:	9007      	str	r0, [sp, #28]
   14406:	4622      	mov	r2, r4
   14408:	b2db      	uxtb	r3, r3
   1440a:	e6b6      	b.n	1417a <_vfiprintf_r+0xbea>
   1440c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   14410:	9207      	str	r2, [sp, #28]
   14412:	17da      	asrs	r2, r3, #31
   14414:	4611      	mov	r1, r2
   14416:	f7ff b9ca 	b.w	137ae <_vfiprintf_r+0x21e>
   1441a:	f851 3b04 	ldr.w	r3, [r1], #4
   1441e:	9107      	str	r1, [sp, #28]
   14420:	4602      	mov	r2, r0
   14422:	b2db      	uxtb	r3, r3
   14424:	f7ff ba27 	b.w	13876 <_vfiprintf_r+0x2e6>
   14428:	2301      	movs	r3, #1
   1442a:	931c      	str	r3, [sp, #112]	; 0x70
   1442c:	2101      	movs	r1, #1
   1442e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   14432:	931b      	str	r3, [sp, #108]	; 0x6c
   14434:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   14438:	460b      	mov	r3, r1
   1443a:	f7ff bacd 	b.w	139d8 <_vfiprintf_r+0x448>
   1443e:	9b07      	ldr	r3, [sp, #28]
   14440:	9905      	ldr	r1, [sp, #20]
   14442:	f853 2b04 	ldr.w	r2, [r3], #4
   14446:	9307      	str	r3, [sp, #28]
   14448:	8011      	strh	r1, [r2, #0]
   1444a:	f7ff b8ec 	b.w	13626 <_vfiprintf_r+0x96>
   1444e:	1c59      	adds	r1, r3, #1
   14450:	4658      	mov	r0, fp
   14452:	f7f6 faab 	bl	a9ac <_malloc_r>
   14456:	4604      	mov	r4, r0
   14458:	2800      	cmp	r0, #0
   1445a:	d03c      	beq.n	144d6 <_vfiprintf_r+0xf46>
   1445c:	9008      	str	r0, [sp, #32]
   1445e:	e795      	b.n	1438c <_vfiprintf_r+0xdfc>
   14460:	6d88      	ldr	r0, [r1, #88]	; 0x58
   14462:	f7f8 fb31 	bl	cac8 <__retarget_lock_release_recursive>
   14466:	f7ff b9e9 	b.w	1383c <_vfiprintf_r+0x2ac>
   1446a:	9b03      	ldr	r3, [sp, #12]
   1446c:	9307      	str	r3, [sp, #28]
   1446e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   14472:	9f08      	ldr	r7, [sp, #32]
   14474:	f7ff b9bc 	b.w	137f0 <_vfiprintf_r+0x260>
   14478:	9819      	ldr	r0, [sp, #100]	; 0x64
   1447a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1447c:	3001      	adds	r0, #1
   1447e:	e545      	b.n	13f0c <_vfiprintf_r+0x97c>
   14480:	9b03      	ldr	r3, [sp, #12]
   14482:	9307      	str	r3, [sp, #28]
   14484:	4620      	mov	r0, r4
   14486:	f7f8 fcfb 	bl	ce80 <strlen>
   1448a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1448e:	462f      	mov	r7, r5
   14490:	9004      	str	r0, [sp, #16]
   14492:	9303      	str	r3, [sp, #12]
   14494:	9508      	str	r5, [sp, #32]
   14496:	f7ff b9ab 	b.w	137f0 <_vfiprintf_r+0x260>
   1449a:	ee18 1a10 	vmov	r1, s16
   1449e:	aa18      	add	r2, sp, #96	; 0x60
   144a0:	4658      	mov	r0, fp
   144a2:	f7ff f839 	bl	13518 <__sprint_r.part.0>
   144a6:	2800      	cmp	r0, #0
   144a8:	f43f aa36 	beq.w	13918 <_vfiprintf_r+0x388>
   144ac:	f7ff ba4d 	b.w	1394a <_vfiprintf_r+0x3ba>
   144b0:	9819      	ldr	r0, [sp, #100]	; 0x64
   144b2:	3001      	adds	r0, #1
   144b4:	e57a      	b.n	13fac <_vfiprintf_r+0xa1c>
   144b6:	468c      	mov	ip, r1
   144b8:	e46e      	b.n	13d98 <_vfiprintf_r+0x808>
   144ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   144bc:	07d9      	lsls	r1, r3, #31
   144be:	d405      	bmi.n	144cc <_vfiprintf_r+0xf3c>
   144c0:	89ab      	ldrh	r3, [r5, #12]
   144c2:	059a      	lsls	r2, r3, #22
   144c4:	d402      	bmi.n	144cc <_vfiprintf_r+0xf3c>
   144c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   144c8:	f7f8 fafe 	bl	cac8 <__retarget_lock_release_recursive>
   144cc:	f04f 33ff 	mov.w	r3, #4294967295
   144d0:	9305      	str	r3, [sp, #20]
   144d2:	f7ff ba49 	b.w	13968 <_vfiprintf_r+0x3d8>
   144d6:	ee18 2a10 	vmov	r2, s16
   144da:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   144de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   144e2:	8193      	strh	r3, [r2, #12]
   144e4:	f7ff ba35 	b.w	13952 <_vfiprintf_r+0x3c2>
   144e8:	9c07      	ldr	r4, [sp, #28]
   144ea:	9704      	str	r7, [sp, #16]
   144ec:	e746      	b.n	1437c <_vfiprintf_r+0xdec>
   144ee:	9b07      	ldr	r3, [sp, #28]
   144f0:	f898 1001 	ldrb.w	r1, [r8, #1]
   144f4:	f853 7b04 	ldr.w	r7, [r3], #4
   144f8:	9307      	str	r3, [sp, #28]
   144fa:	4690      	mov	r8, r2
   144fc:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   14500:	f7ff b8b9 	b.w	13676 <_vfiprintf_r+0xe6>
   14504:	ee18 2a10 	vmov	r2, s16
   14508:	8993      	ldrh	r3, [r2, #12]
   1450a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1450e:	8193      	strh	r3, [r2, #12]
   14510:	f7ff ba15 	b.w	1393e <_vfiprintf_r+0x3ae>
   14514:	cccccccd 	.word	0xcccccccd
   14518:	20000f1c 	.word	0x20000f1c

0001451c <__sbprintf>:
   1451c:	b570      	push	{r4, r5, r6, lr}
   1451e:	460c      	mov	r4, r1
   14520:	8989      	ldrh	r1, [r1, #12]
   14522:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   14526:	f021 0102 	bic.w	r1, r1, #2
   1452a:	f8ad 1014 	strh.w	r1, [sp, #20]
   1452e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   14530:	911b      	str	r1, [sp, #108]	; 0x6c
   14532:	89e1      	ldrh	r1, [r4, #14]
   14534:	f8ad 1016 	strh.w	r1, [sp, #22]
   14538:	69e1      	ldr	r1, [r4, #28]
   1453a:	9109      	str	r1, [sp, #36]	; 0x24
   1453c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1453e:	910b      	str	r1, [sp, #44]	; 0x2c
   14540:	a91c      	add	r1, sp, #112	; 0x70
   14542:	9102      	str	r1, [sp, #8]
   14544:	9106      	str	r1, [sp, #24]
   14546:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1454a:	4606      	mov	r6, r0
   1454c:	9104      	str	r1, [sp, #16]
   1454e:	9107      	str	r1, [sp, #28]
   14550:	a818      	add	r0, sp, #96	; 0x60
   14552:	2100      	movs	r1, #0
   14554:	e9cd 3200 	strd	r3, r2, [sp]
   14558:	9108      	str	r1, [sp, #32]
   1455a:	f7f8 faaf 	bl	cabc <__retarget_lock_init_recursive>
   1455e:	e9dd 3200 	ldrd	r3, r2, [sp]
   14562:	a902      	add	r1, sp, #8
   14564:	4630      	mov	r0, r6
   14566:	f7ff f813 	bl	13590 <_vfiprintf_r>
   1456a:	1e05      	subs	r5, r0, #0
   1456c:	db07      	blt.n	1457e <__sbprintf+0x62>
   1456e:	a902      	add	r1, sp, #8
   14570:	4630      	mov	r0, r6
   14572:	f7fd fad3 	bl	11b1c <_fflush_r>
   14576:	2800      	cmp	r0, #0
   14578:	bf18      	it	ne
   1457a:	f04f 35ff 	movne.w	r5, #4294967295
   1457e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   14582:	065b      	lsls	r3, r3, #25
   14584:	d503      	bpl.n	1458e <__sbprintf+0x72>
   14586:	89a3      	ldrh	r3, [r4, #12]
   14588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1458c:	81a3      	strh	r3, [r4, #12]
   1458e:	9818      	ldr	r0, [sp, #96]	; 0x60
   14590:	f7f8 fa96 	bl	cac0 <__retarget_lock_close_recursive>
   14594:	4628      	mov	r0, r5
   14596:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   1459a:	bd70      	pop	{r4, r5, r6, pc}

0001459c <__sfvwrite_r>:
   1459c:	6893      	ldr	r3, [r2, #8]
   1459e:	2b00      	cmp	r3, #0
   145a0:	f000 8085 	beq.w	146ae <__sfvwrite_r+0x112>
   145a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145a8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   145ac:	460c      	mov	r4, r1
   145ae:	0719      	lsls	r1, r3, #28
   145b0:	4680      	mov	r8, r0
   145b2:	b083      	sub	sp, #12
   145b4:	4617      	mov	r7, r2
   145b6:	b298      	uxth	r0, r3
   145b8:	d525      	bpl.n	14606 <__sfvwrite_r+0x6a>
   145ba:	6923      	ldr	r3, [r4, #16]
   145bc:	b31b      	cbz	r3, 14606 <__sfvwrite_r+0x6a>
   145be:	f010 0302 	ands.w	r3, r0, #2
   145c2:	683d      	ldr	r5, [r7, #0]
   145c4:	d02d      	beq.n	14622 <__sfvwrite_r+0x86>
   145c6:	f04f 0a00 	mov.w	sl, #0
   145ca:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 1488c <__sfvwrite_r+0x2f0>
   145ce:	4656      	mov	r6, sl
   145d0:	46b9      	mov	r9, r7
   145d2:	455e      	cmp	r6, fp
   145d4:	4633      	mov	r3, r6
   145d6:	4652      	mov	r2, sl
   145d8:	bf28      	it	cs
   145da:	465b      	movcs	r3, fp
   145dc:	4640      	mov	r0, r8
   145de:	2e00      	cmp	r6, #0
   145e0:	d052      	beq.n	14688 <__sfvwrite_r+0xec>
   145e2:	69e1      	ldr	r1, [r4, #28]
   145e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   145e6:	47b8      	blx	r7
   145e8:	2800      	cmp	r0, #0
   145ea:	dd56      	ble.n	1469a <__sfvwrite_r+0xfe>
   145ec:	f8d9 3008 	ldr.w	r3, [r9, #8]
   145f0:	1a1b      	subs	r3, r3, r0
   145f2:	4482      	add	sl, r0
   145f4:	1a36      	subs	r6, r6, r0
   145f6:	f8c9 3008 	str.w	r3, [r9, #8]
   145fa:	2b00      	cmp	r3, #0
   145fc:	d1e9      	bne.n	145d2 <__sfvwrite_r+0x36>
   145fe:	2000      	movs	r0, #0
   14600:	b003      	add	sp, #12
   14602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14606:	4621      	mov	r1, r4
   14608:	4640      	mov	r0, r8
   1460a:	f000 f97d 	bl	14908 <__swsetup_r>
   1460e:	2800      	cmp	r0, #0
   14610:	f040 8138 	bne.w	14884 <__sfvwrite_r+0x2e8>
   14614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14618:	683d      	ldr	r5, [r7, #0]
   1461a:	b298      	uxth	r0, r3
   1461c:	f010 0302 	ands.w	r3, r0, #2
   14620:	d1d1      	bne.n	145c6 <__sfvwrite_r+0x2a>
   14622:	f010 0901 	ands.w	r9, r0, #1
   14626:	d144      	bne.n	146b2 <__sfvwrite_r+0x116>
   14628:	464e      	mov	r6, r9
   1462a:	9700      	str	r7, [sp, #0]
   1462c:	b346      	cbz	r6, 14680 <__sfvwrite_r+0xe4>
   1462e:	0582      	lsls	r2, r0, #22
   14630:	f8d4 b008 	ldr.w	fp, [r4, #8]
   14634:	f140 8085 	bpl.w	14742 <__sfvwrite_r+0x1a6>
   14638:	45b3      	cmp	fp, r6
   1463a:	465a      	mov	r2, fp
   1463c:	f200 80b4 	bhi.w	147a8 <__sfvwrite_r+0x20c>
   14640:	f410 6f90 	tst.w	r0, #1152	; 0x480
   14644:	f040 80c1 	bne.w	147ca <__sfvwrite_r+0x22e>
   14648:	6820      	ldr	r0, [r4, #0]
   1464a:	9201      	str	r2, [sp, #4]
   1464c:	4649      	mov	r1, r9
   1464e:	f7f8 f859 	bl	c704 <memmove>
   14652:	68a3      	ldr	r3, [r4, #8]
   14654:	9a01      	ldr	r2, [sp, #4]
   14656:	eba3 010b 	sub.w	r1, r3, fp
   1465a:	6823      	ldr	r3, [r4, #0]
   1465c:	60a1      	str	r1, [r4, #8]
   1465e:	4413      	add	r3, r2
   14660:	46b2      	mov	sl, r6
   14662:	6023      	str	r3, [r4, #0]
   14664:	2600      	movs	r6, #0
   14666:	9a00      	ldr	r2, [sp, #0]
   14668:	6893      	ldr	r3, [r2, #8]
   1466a:	eba3 030a 	sub.w	r3, r3, sl
   1466e:	44d1      	add	r9, sl
   14670:	6093      	str	r3, [r2, #8]
   14672:	2b00      	cmp	r3, #0
   14674:	d0c3      	beq.n	145fe <__sfvwrite_r+0x62>
   14676:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   1467a:	b280      	uxth	r0, r0
   1467c:	2e00      	cmp	r6, #0
   1467e:	d1d6      	bne.n	1462e <__sfvwrite_r+0x92>
   14680:	e9d5 9600 	ldrd	r9, r6, [r5]
   14684:	3508      	adds	r5, #8
   14686:	e7d1      	b.n	1462c <__sfvwrite_r+0x90>
   14688:	e9d5 a600 	ldrd	sl, r6, [r5]
   1468c:	3508      	adds	r5, #8
   1468e:	e7a0      	b.n	145d2 <__sfvwrite_r+0x36>
   14690:	4621      	mov	r1, r4
   14692:	4640      	mov	r0, r8
   14694:	f7fd fa42 	bl	11b1c <_fflush_r>
   14698:	b388      	cbz	r0, 146fe <__sfvwrite_r+0x162>
   1469a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1469e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   146a2:	f04f 30ff 	mov.w	r0, #4294967295
   146a6:	81a3      	strh	r3, [r4, #12]
   146a8:	b003      	add	sp, #12
   146aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146ae:	2000      	movs	r0, #0
   146b0:	4770      	bx	lr
   146b2:	461e      	mov	r6, r3
   146b4:	46ba      	mov	sl, r7
   146b6:	4699      	mov	r9, r3
   146b8:	4618      	mov	r0, r3
   146ba:	9500      	str	r5, [sp, #0]
   146bc:	461f      	mov	r7, r3
   146be:	b366      	cbz	r6, 1471a <__sfvwrite_r+0x17e>
   146c0:	2800      	cmp	r0, #0
   146c2:	d032      	beq.n	1472a <__sfvwrite_r+0x18e>
   146c4:	464a      	mov	r2, r9
   146c6:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   146ca:	6820      	ldr	r0, [r4, #0]
   146cc:	68a5      	ldr	r5, [r4, #8]
   146ce:	42b2      	cmp	r2, r6
   146d0:	bf28      	it	cs
   146d2:	4632      	movcs	r2, r6
   146d4:	4288      	cmp	r0, r1
   146d6:	d904      	bls.n	146e2 <__sfvwrite_r+0x146>
   146d8:	eb05 0b03 	add.w	fp, r5, r3
   146dc:	455a      	cmp	r2, fp
   146de:	f300 80a7 	bgt.w	14830 <__sfvwrite_r+0x294>
   146e2:	4293      	cmp	r3, r2
   146e4:	dc64      	bgt.n	147b0 <__sfvwrite_r+0x214>
   146e6:	69e1      	ldr	r1, [r4, #28]
   146e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   146ea:	463a      	mov	r2, r7
   146ec:	4640      	mov	r0, r8
   146ee:	47a8      	blx	r5
   146f0:	f1b0 0b00 	subs.w	fp, r0, #0
   146f4:	ddd1      	ble.n	1469a <__sfvwrite_r+0xfe>
   146f6:	ebb9 090b 	subs.w	r9, r9, fp
   146fa:	d0c9      	beq.n	14690 <__sfvwrite_r+0xf4>
   146fc:	2001      	movs	r0, #1
   146fe:	f8da 3008 	ldr.w	r3, [sl, #8]
   14702:	eba3 030b 	sub.w	r3, r3, fp
   14706:	445f      	add	r7, fp
   14708:	eba6 060b 	sub.w	r6, r6, fp
   1470c:	f8ca 3008 	str.w	r3, [sl, #8]
   14710:	2b00      	cmp	r3, #0
   14712:	f43f af74 	beq.w	145fe <__sfvwrite_r+0x62>
   14716:	2e00      	cmp	r6, #0
   14718:	d1d2      	bne.n	146c0 <__sfvwrite_r+0x124>
   1471a:	9a00      	ldr	r2, [sp, #0]
   1471c:	6856      	ldr	r6, [r2, #4]
   1471e:	4613      	mov	r3, r2
   14720:	3208      	adds	r2, #8
   14722:	9200      	str	r2, [sp, #0]
   14724:	2e00      	cmp	r6, #0
   14726:	d0f8      	beq.n	1471a <__sfvwrite_r+0x17e>
   14728:	681f      	ldr	r7, [r3, #0]
   1472a:	4632      	mov	r2, r6
   1472c:	210a      	movs	r1, #10
   1472e:	4638      	mov	r0, r7
   14730:	f7f8 fb46 	bl	cdc0 <memchr>
   14734:	2800      	cmp	r0, #0
   14736:	f000 809c 	beq.w	14872 <__sfvwrite_r+0x2d6>
   1473a:	3001      	adds	r0, #1
   1473c:	eba0 0907 	sub.w	r9, r0, r7
   14740:	e7c0      	b.n	146c4 <__sfvwrite_r+0x128>
   14742:	6820      	ldr	r0, [r4, #0]
   14744:	6923      	ldr	r3, [r4, #16]
   14746:	4298      	cmp	r0, r3
   14748:	d816      	bhi.n	14778 <__sfvwrite_r+0x1dc>
   1474a:	6962      	ldr	r2, [r4, #20]
   1474c:	42b2      	cmp	r2, r6
   1474e:	d813      	bhi.n	14778 <__sfvwrite_r+0x1dc>
   14750:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   14754:	42b3      	cmp	r3, r6
   14756:	bf28      	it	cs
   14758:	4633      	movcs	r3, r6
   1475a:	69e1      	ldr	r1, [r4, #28]
   1475c:	fb93 f3f2 	sdiv	r3, r3, r2
   14760:	6a67      	ldr	r7, [r4, #36]	; 0x24
   14762:	fb02 f303 	mul.w	r3, r2, r3
   14766:	4640      	mov	r0, r8
   14768:	464a      	mov	r2, r9
   1476a:	47b8      	blx	r7
   1476c:	f1b0 0a00 	subs.w	sl, r0, #0
   14770:	dd93      	ble.n	1469a <__sfvwrite_r+0xfe>
   14772:	eba6 060a 	sub.w	r6, r6, sl
   14776:	e776      	b.n	14666 <__sfvwrite_r+0xca>
   14778:	45b3      	cmp	fp, r6
   1477a:	46da      	mov	sl, fp
   1477c:	bf28      	it	cs
   1477e:	46b2      	movcs	sl, r6
   14780:	4652      	mov	r2, sl
   14782:	4649      	mov	r1, r9
   14784:	f7f7 ffbe 	bl	c704 <memmove>
   14788:	68a3      	ldr	r3, [r4, #8]
   1478a:	6822      	ldr	r2, [r4, #0]
   1478c:	eba3 030a 	sub.w	r3, r3, sl
   14790:	4452      	add	r2, sl
   14792:	60a3      	str	r3, [r4, #8]
   14794:	6022      	str	r2, [r4, #0]
   14796:	2b00      	cmp	r3, #0
   14798:	d1eb      	bne.n	14772 <__sfvwrite_r+0x1d6>
   1479a:	4621      	mov	r1, r4
   1479c:	4640      	mov	r0, r8
   1479e:	f7fd f9bd 	bl	11b1c <_fflush_r>
   147a2:	2800      	cmp	r0, #0
   147a4:	d0e5      	beq.n	14772 <__sfvwrite_r+0x1d6>
   147a6:	e778      	b.n	1469a <__sfvwrite_r+0xfe>
   147a8:	6820      	ldr	r0, [r4, #0]
   147aa:	46b3      	mov	fp, r6
   147ac:	4632      	mov	r2, r6
   147ae:	e74c      	b.n	1464a <__sfvwrite_r+0xae>
   147b0:	4639      	mov	r1, r7
   147b2:	9201      	str	r2, [sp, #4]
   147b4:	f7f7 ffa6 	bl	c704 <memmove>
   147b8:	9a01      	ldr	r2, [sp, #4]
   147ba:	68a3      	ldr	r3, [r4, #8]
   147bc:	1a9b      	subs	r3, r3, r2
   147be:	60a3      	str	r3, [r4, #8]
   147c0:	6823      	ldr	r3, [r4, #0]
   147c2:	4413      	add	r3, r2
   147c4:	6023      	str	r3, [r4, #0]
   147c6:	4693      	mov	fp, r2
   147c8:	e795      	b.n	146f6 <__sfvwrite_r+0x15a>
   147ca:	6823      	ldr	r3, [r4, #0]
   147cc:	6921      	ldr	r1, [r4, #16]
   147ce:	eba3 0b01 	sub.w	fp, r3, r1
   147d2:	6963      	ldr	r3, [r4, #20]
   147d4:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   147d8:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   147dc:	f10b 0301 	add.w	r3, fp, #1
   147e0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   147e4:	4433      	add	r3, r6
   147e6:	4553      	cmp	r3, sl
   147e8:	4652      	mov	r2, sl
   147ea:	bf84      	itt	hi
   147ec:	469a      	movhi	sl, r3
   147ee:	4652      	movhi	r2, sl
   147f0:	0543      	lsls	r3, r0, #21
   147f2:	d52c      	bpl.n	1484e <__sfvwrite_r+0x2b2>
   147f4:	4611      	mov	r1, r2
   147f6:	4640      	mov	r0, r8
   147f8:	f7f6 f8d8 	bl	a9ac <_malloc_r>
   147fc:	2800      	cmp	r0, #0
   147fe:	d03b      	beq.n	14878 <__sfvwrite_r+0x2dc>
   14800:	465a      	mov	r2, fp
   14802:	6921      	ldr	r1, [r4, #16]
   14804:	9001      	str	r0, [sp, #4]
   14806:	f7f3 fd61 	bl	82cc <memcpy>
   1480a:	89a2      	ldrh	r2, [r4, #12]
   1480c:	9b01      	ldr	r3, [sp, #4]
   1480e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   14812:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   14816:	81a2      	strh	r2, [r4, #12]
   14818:	eb03 000b 	add.w	r0, r3, fp
   1481c:	6123      	str	r3, [r4, #16]
   1481e:	ebaa 030b 	sub.w	r3, sl, fp
   14822:	f8c4 a014 	str.w	sl, [r4, #20]
   14826:	60a3      	str	r3, [r4, #8]
   14828:	6020      	str	r0, [r4, #0]
   1482a:	46b3      	mov	fp, r6
   1482c:	4632      	mov	r2, r6
   1482e:	e70c      	b.n	1464a <__sfvwrite_r+0xae>
   14830:	4639      	mov	r1, r7
   14832:	465a      	mov	r2, fp
   14834:	f7f7 ff66 	bl	c704 <memmove>
   14838:	6823      	ldr	r3, [r4, #0]
   1483a:	445b      	add	r3, fp
   1483c:	6023      	str	r3, [r4, #0]
   1483e:	4621      	mov	r1, r4
   14840:	4640      	mov	r0, r8
   14842:	f7fd f96b 	bl	11b1c <_fflush_r>
   14846:	2800      	cmp	r0, #0
   14848:	f43f af55 	beq.w	146f6 <__sfvwrite_r+0x15a>
   1484c:	e725      	b.n	1469a <__sfvwrite_r+0xfe>
   1484e:	4640      	mov	r0, r8
   14850:	f7f6 fb74 	bl	af3c <_realloc_r>
   14854:	4603      	mov	r3, r0
   14856:	2800      	cmp	r0, #0
   14858:	d1de      	bne.n	14818 <__sfvwrite_r+0x27c>
   1485a:	6921      	ldr	r1, [r4, #16]
   1485c:	4640      	mov	r0, r8
   1485e:	f7f8 fc21 	bl	d0a4 <_free_r>
   14862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14866:	220c      	movs	r2, #12
   14868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1486c:	f8c8 2000 	str.w	r2, [r8]
   14870:	e715      	b.n	1469e <__sfvwrite_r+0x102>
   14872:	1c72      	adds	r2, r6, #1
   14874:	4691      	mov	r9, r2
   14876:	e726      	b.n	146c6 <__sfvwrite_r+0x12a>
   14878:	220c      	movs	r2, #12
   1487a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1487e:	f8c8 2000 	str.w	r2, [r8]
   14882:	e70c      	b.n	1469e <__sfvwrite_r+0x102>
   14884:	f04f 30ff 	mov.w	r0, #4294967295
   14888:	e6ba      	b.n	14600 <__sfvwrite_r+0x64>
   1488a:	bf00      	nop
   1488c:	7ffffc00 	.word	0x7ffffc00

00014890 <__submore>:
   14890:	f101 0340 	add.w	r3, r1, #64	; 0x40
   14894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14898:	460c      	mov	r4, r1
   1489a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1489c:	4299      	cmp	r1, r3
   1489e:	d014      	beq.n	148ca <__submore+0x3a>
   148a0:	6b66      	ldr	r6, [r4, #52]	; 0x34
   148a2:	0077      	lsls	r7, r6, #1
   148a4:	463a      	mov	r2, r7
   148a6:	f7f6 fb49 	bl	af3c <_realloc_r>
   148aa:	4605      	mov	r5, r0
   148ac:	b340      	cbz	r0, 14900 <__submore+0x70>
   148ae:	eb00 0806 	add.w	r8, r0, r6
   148b2:	4601      	mov	r1, r0
   148b4:	4632      	mov	r2, r6
   148b6:	4640      	mov	r0, r8
   148b8:	f7f3 fd08 	bl	82cc <memcpy>
   148bc:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   148c0:	f8c4 8000 	str.w	r8, [r4]
   148c4:	2000      	movs	r0, #0
   148c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   148ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
   148ce:	f7f6 f86d 	bl	a9ac <_malloc_r>
   148d2:	b1a8      	cbz	r0, 14900 <__submore+0x70>
   148d4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   148d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   148dc:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   148e0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   148e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   148e8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   148ec:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   148f0:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   148f4:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   148f8:	6023      	str	r3, [r4, #0]
   148fa:	2000      	movs	r0, #0
   148fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14900:	f04f 30ff 	mov.w	r0, #4294967295
   14904:	e7df      	b.n	148c6 <__submore+0x36>
   14906:	bf00      	nop

00014908 <__swsetup_r>:
   14908:	b538      	push	{r3, r4, r5, lr}
   1490a:	4b31      	ldr	r3, [pc, #196]	; (149d0 <__swsetup_r+0xc8>)
   1490c:	681b      	ldr	r3, [r3, #0]
   1490e:	4605      	mov	r5, r0
   14910:	460c      	mov	r4, r1
   14912:	b113      	cbz	r3, 1491a <__swsetup_r+0x12>
   14914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   14916:	2a00      	cmp	r2, #0
   14918:	d04e      	beq.n	149b8 <__swsetup_r+0xb0>
   1491a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1491e:	0718      	lsls	r0, r3, #28
   14920:	b29a      	uxth	r2, r3
   14922:	d51c      	bpl.n	1495e <__swsetup_r+0x56>
   14924:	6921      	ldr	r1, [r4, #16]
   14926:	b329      	cbz	r1, 14974 <__swsetup_r+0x6c>
   14928:	f012 0001 	ands.w	r0, r2, #1
   1492c:	d007      	beq.n	1493e <__swsetup_r+0x36>
   1492e:	2000      	movs	r0, #0
   14930:	60a0      	str	r0, [r4, #8]
   14932:	6960      	ldr	r0, [r4, #20]
   14934:	4240      	negs	r0, r0
   14936:	61a0      	str	r0, [r4, #24]
   14938:	b139      	cbz	r1, 1494a <__swsetup_r+0x42>
   1493a:	2000      	movs	r0, #0
   1493c:	bd38      	pop	{r3, r4, r5, pc}
   1493e:	0795      	lsls	r5, r2, #30
   14940:	bf58      	it	pl
   14942:	6960      	ldrpl	r0, [r4, #20]
   14944:	60a0      	str	r0, [r4, #8]
   14946:	2900      	cmp	r1, #0
   14948:	d1f7      	bne.n	1493a <__swsetup_r+0x32>
   1494a:	0612      	lsls	r2, r2, #24
   1494c:	bf58      	it	pl
   1494e:	4608      	movpl	r0, r1
   14950:	d5f4      	bpl.n	1493c <__swsetup_r+0x34>
   14952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14956:	81a3      	strh	r3, [r4, #12]
   14958:	f04f 30ff 	mov.w	r0, #4294967295
   1495c:	bd38      	pop	{r3, r4, r5, pc}
   1495e:	06d1      	lsls	r1, r2, #27
   14960:	d52e      	bpl.n	149c0 <__swsetup_r+0xb8>
   14962:	0752      	lsls	r2, r2, #29
   14964:	d414      	bmi.n	14990 <__swsetup_r+0x88>
   14966:	6921      	ldr	r1, [r4, #16]
   14968:	f043 0308 	orr.w	r3, r3, #8
   1496c:	81a3      	strh	r3, [r4, #12]
   1496e:	b29a      	uxth	r2, r3
   14970:	2900      	cmp	r1, #0
   14972:	d1d9      	bne.n	14928 <__swsetup_r+0x20>
   14974:	f402 7020 	and.w	r0, r2, #640	; 0x280
   14978:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1497c:	d0d4      	beq.n	14928 <__swsetup_r+0x20>
   1497e:	4621      	mov	r1, r4
   14980:	4628      	mov	r0, r5
   14982:	f000 f977 	bl	14c74 <__smakebuf_r>
   14986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1498a:	6921      	ldr	r1, [r4, #16]
   1498c:	b29a      	uxth	r2, r3
   1498e:	e7cb      	b.n	14928 <__swsetup_r+0x20>
   14990:	6b21      	ldr	r1, [r4, #48]	; 0x30
   14992:	b151      	cbz	r1, 149aa <__swsetup_r+0xa2>
   14994:	f104 0240 	add.w	r2, r4, #64	; 0x40
   14998:	4291      	cmp	r1, r2
   1499a:	d004      	beq.n	149a6 <__swsetup_r+0x9e>
   1499c:	4628      	mov	r0, r5
   1499e:	f7f8 fb81 	bl	d0a4 <_free_r>
   149a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   149a6:	2200      	movs	r2, #0
   149a8:	6322      	str	r2, [r4, #48]	; 0x30
   149aa:	6921      	ldr	r1, [r4, #16]
   149ac:	2200      	movs	r2, #0
   149ae:	e9c4 1200 	strd	r1, r2, [r4]
   149b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   149b6:	e7d7      	b.n	14968 <__swsetup_r+0x60>
   149b8:	4618      	mov	r0, r3
   149ba:	f7f7 fd2b 	bl	c414 <__sinit>
   149be:	e7ac      	b.n	1491a <__swsetup_r+0x12>
   149c0:	2209      	movs	r2, #9
   149c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   149c6:	602a      	str	r2, [r5, #0]
   149c8:	f04f 30ff 	mov.w	r0, #4294967295
   149cc:	81a3      	strh	r3, [r4, #12]
   149ce:	bd38      	pop	{r3, r4, r5, pc}
   149d0:	20008e24 	.word	0x20008e24

000149d4 <__fputwc>:
   149d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   149d8:	b082      	sub	sp, #8
   149da:	4682      	mov	sl, r0
   149dc:	4688      	mov	r8, r1
   149de:	4614      	mov	r4, r2
   149e0:	f7f7 ffd6 	bl	c990 <__locale_mb_cur_max>
   149e4:	2801      	cmp	r0, #1
   149e6:	d103      	bne.n	149f0 <__fputwc+0x1c>
   149e8:	f108 33ff 	add.w	r3, r8, #4294967295
   149ec:	2bfe      	cmp	r3, #254	; 0xfe
   149ee:	d936      	bls.n	14a5e <__fputwc+0x8a>
   149f0:	f10d 0904 	add.w	r9, sp, #4
   149f4:	4642      	mov	r2, r8
   149f6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   149fa:	4649      	mov	r1, r9
   149fc:	4650      	mov	r0, sl
   149fe:	f7fe fb29 	bl	13054 <_wcrtomb_r>
   14a02:	1c42      	adds	r2, r0, #1
   14a04:	4606      	mov	r6, r0
   14a06:	d032      	beq.n	14a6e <__fputwc+0x9a>
   14a08:	b320      	cbz	r0, 14a54 <__fputwc+0x80>
   14a0a:	f89d c004 	ldrb.w	ip, [sp, #4]
   14a0e:	2500      	movs	r5, #0
   14a10:	e009      	b.n	14a26 <__fputwc+0x52>
   14a12:	6823      	ldr	r3, [r4, #0]
   14a14:	1c5a      	adds	r2, r3, #1
   14a16:	6022      	str	r2, [r4, #0]
   14a18:	f883 c000 	strb.w	ip, [r3]
   14a1c:	3501      	adds	r5, #1
   14a1e:	42b5      	cmp	r5, r6
   14a20:	d218      	bcs.n	14a54 <__fputwc+0x80>
   14a22:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   14a26:	68a3      	ldr	r3, [r4, #8]
   14a28:	3b01      	subs	r3, #1
   14a2a:	2b00      	cmp	r3, #0
   14a2c:	60a3      	str	r3, [r4, #8]
   14a2e:	daf0      	bge.n	14a12 <__fputwc+0x3e>
   14a30:	69a7      	ldr	r7, [r4, #24]
   14a32:	42bb      	cmp	r3, r7
   14a34:	4661      	mov	r1, ip
   14a36:	4622      	mov	r2, r4
   14a38:	4650      	mov	r0, sl
   14a3a:	db02      	blt.n	14a42 <__fputwc+0x6e>
   14a3c:	f1bc 0f0a 	cmp.w	ip, #10
   14a40:	d1e7      	bne.n	14a12 <__fputwc+0x3e>
   14a42:	f000 f983 	bl	14d4c <__swbuf_r>
   14a46:	1c43      	adds	r3, r0, #1
   14a48:	d1e8      	bne.n	14a1c <__fputwc+0x48>
   14a4a:	4606      	mov	r6, r0
   14a4c:	4630      	mov	r0, r6
   14a4e:	b002      	add	sp, #8
   14a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14a54:	4646      	mov	r6, r8
   14a56:	4630      	mov	r0, r6
   14a58:	b002      	add	sp, #8
   14a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14a5e:	fa5f fc88 	uxtb.w	ip, r8
   14a62:	f88d c004 	strb.w	ip, [sp, #4]
   14a66:	4606      	mov	r6, r0
   14a68:	f10d 0904 	add.w	r9, sp, #4
   14a6c:	e7cf      	b.n	14a0e <__fputwc+0x3a>
   14a6e:	89a3      	ldrh	r3, [r4, #12]
   14a70:	4630      	mov	r0, r6
   14a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14a76:	81a3      	strh	r3, [r4, #12]
   14a78:	b002      	add	sp, #8
   14a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14a7e:	bf00      	nop

00014a80 <_fputwc_r>:
   14a80:	b530      	push	{r4, r5, lr}
   14a82:	6e53      	ldr	r3, [r2, #100]	; 0x64
   14a84:	f013 0f01 	tst.w	r3, #1
   14a88:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   14a8c:	4614      	mov	r4, r2
   14a8e:	b083      	sub	sp, #12
   14a90:	4605      	mov	r5, r0
   14a92:	b29a      	uxth	r2, r3
   14a94:	d101      	bne.n	14a9a <_fputwc_r+0x1a>
   14a96:	0598      	lsls	r0, r3, #22
   14a98:	d51c      	bpl.n	14ad4 <_fputwc_r+0x54>
   14a9a:	0490      	lsls	r0, r2, #18
   14a9c:	d406      	bmi.n	14aac <_fputwc_r+0x2c>
   14a9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14aa0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   14aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   14aa8:	81a3      	strh	r3, [r4, #12]
   14aaa:	6662      	str	r2, [r4, #100]	; 0x64
   14aac:	4622      	mov	r2, r4
   14aae:	4628      	mov	r0, r5
   14ab0:	f7ff ff90 	bl	149d4 <__fputwc>
   14ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14ab6:	07da      	lsls	r2, r3, #31
   14ab8:	4605      	mov	r5, r0
   14aba:	d402      	bmi.n	14ac2 <_fputwc_r+0x42>
   14abc:	89a3      	ldrh	r3, [r4, #12]
   14abe:	059b      	lsls	r3, r3, #22
   14ac0:	d502      	bpl.n	14ac8 <_fputwc_r+0x48>
   14ac2:	4628      	mov	r0, r5
   14ac4:	b003      	add	sp, #12
   14ac6:	bd30      	pop	{r4, r5, pc}
   14ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14aca:	f7f7 fffd 	bl	cac8 <__retarget_lock_release_recursive>
   14ace:	4628      	mov	r0, r5
   14ad0:	b003      	add	sp, #12
   14ad2:	bd30      	pop	{r4, r5, pc}
   14ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14ad6:	9101      	str	r1, [sp, #4]
   14ad8:	f7f7 fff4 	bl	cac4 <__retarget_lock_acquire_recursive>
   14adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14ae0:	9901      	ldr	r1, [sp, #4]
   14ae2:	b29a      	uxth	r2, r3
   14ae4:	e7d9      	b.n	14a9a <_fputwc_r+0x1a>
   14ae6:	bf00      	nop

00014ae8 <_wcsnrtombs_l>:
   14ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14aec:	b08b      	sub	sp, #44	; 0x2c
   14aee:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   14af2:	9f14      	ldr	r7, [sp, #80]	; 0x50
   14af4:	9103      	str	r1, [sp, #12]
   14af6:	4681      	mov	r9, r0
   14af8:	9205      	str	r2, [sp, #20]
   14afa:	461e      	mov	r6, r3
   14afc:	f1b8 0f00 	cmp.w	r8, #0
   14b00:	d05c      	beq.n	14bbc <_wcsnrtombs_l+0xd4>
   14b02:	9b03      	ldr	r3, [sp, #12]
   14b04:	2b00      	cmp	r3, #0
   14b06:	d05e      	beq.n	14bc6 <_wcsnrtombs_l+0xde>
   14b08:	9b05      	ldr	r3, [sp, #20]
   14b0a:	681d      	ldr	r5, [r3, #0]
   14b0c:	2f00      	cmp	r7, #0
   14b0e:	d06a      	beq.n	14be6 <_wcsnrtombs_l+0xfe>
   14b10:	1e74      	subs	r4, r6, #1
   14b12:	b34e      	cbz	r6, 14b68 <_wcsnrtombs_l+0x80>
   14b14:	9b03      	ldr	r3, [sp, #12]
   14b16:	9304      	str	r3, [sp, #16]
   14b18:	3d04      	subs	r5, #4
   14b1a:	2600      	movs	r6, #0
   14b1c:	9501      	str	r5, [sp, #4]
   14b1e:	e00b      	b.n	14b38 <_wcsnrtombs_l+0x50>
   14b20:	9b03      	ldr	r3, [sp, #12]
   14b22:	bb2b      	cbnz	r3, 14b70 <_wcsnrtombs_l+0x88>
   14b24:	9b01      	ldr	r3, [sp, #4]
   14b26:	681a      	ldr	r2, [r3, #0]
   14b28:	2a00      	cmp	r2, #0
   14b2a:	d03a      	beq.n	14ba2 <_wcsnrtombs_l+0xba>
   14b2c:	45bc      	cmp	ip, r7
   14b2e:	d25c      	bcs.n	14bea <_wcsnrtombs_l+0x102>
   14b30:	3c01      	subs	r4, #1
   14b32:	1c63      	adds	r3, r4, #1
   14b34:	4666      	mov	r6, ip
   14b36:	d017      	beq.n	14b68 <_wcsnrtombs_l+0x80>
   14b38:	f8d8 3000 	ldr.w	r3, [r8]
   14b3c:	9302      	str	r3, [sp, #8]
   14b3e:	9b01      	ldr	r3, [sp, #4]
   14b40:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   14b44:	f853 2f04 	ldr.w	r2, [r3, #4]!
   14b48:	9301      	str	r3, [sp, #4]
   14b4a:	a907      	add	r1, sp, #28
   14b4c:	4643      	mov	r3, r8
   14b4e:	4648      	mov	r0, r9
   14b50:	f8d8 b004 	ldr.w	fp, [r8, #4]
   14b54:	47a8      	blx	r5
   14b56:	1c42      	adds	r2, r0, #1
   14b58:	d03a      	beq.n	14bd0 <_wcsnrtombs_l+0xe8>
   14b5a:	eb00 0c06 	add.w	ip, r0, r6
   14b5e:	45bc      	cmp	ip, r7
   14b60:	d9de      	bls.n	14b20 <_wcsnrtombs_l+0x38>
   14b62:	9b02      	ldr	r3, [sp, #8]
   14b64:	e9c8 3b00 	strd	r3, fp, [r8]
   14b68:	4630      	mov	r0, r6
   14b6a:	b00b      	add	sp, #44	; 0x2c
   14b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b70:	2800      	cmp	r0, #0
   14b72:	dd0e      	ble.n	14b92 <_wcsnrtombs_l+0xaa>
   14b74:	9b04      	ldr	r3, [sp, #16]
   14b76:	9d01      	ldr	r5, [sp, #4]
   14b78:	4418      	add	r0, r3
   14b7a:	1e5a      	subs	r2, r3, #1
   14b7c:	a907      	add	r1, sp, #28
   14b7e:	f100 3eff 	add.w	lr, r0, #4294967295
   14b82:	f811 3b01 	ldrb.w	r3, [r1], #1
   14b86:	f802 3f01 	strb.w	r3, [r2, #1]!
   14b8a:	4572      	cmp	r2, lr
   14b8c:	d1f9      	bne.n	14b82 <_wcsnrtombs_l+0x9a>
   14b8e:	9501      	str	r5, [sp, #4]
   14b90:	9004      	str	r0, [sp, #16]
   14b92:	9b05      	ldr	r3, [sp, #20]
   14b94:	681a      	ldr	r2, [r3, #0]
   14b96:	3204      	adds	r2, #4
   14b98:	601a      	str	r2, [r3, #0]
   14b9a:	9b01      	ldr	r3, [sp, #4]
   14b9c:	681a      	ldr	r2, [r3, #0]
   14b9e:	2a00      	cmp	r2, #0
   14ba0:	d1c4      	bne.n	14b2c <_wcsnrtombs_l+0x44>
   14ba2:	9b03      	ldr	r3, [sp, #12]
   14ba4:	b10b      	cbz	r3, 14baa <_wcsnrtombs_l+0xc2>
   14ba6:	9b05      	ldr	r3, [sp, #20]
   14ba8:	601a      	str	r2, [r3, #0]
   14baa:	f10c 36ff 	add.w	r6, ip, #4294967295
   14bae:	2200      	movs	r2, #0
   14bb0:	4630      	mov	r0, r6
   14bb2:	f8c8 2000 	str.w	r2, [r8]
   14bb6:	b00b      	add	sp, #44	; 0x2c
   14bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bbc:	9b03      	ldr	r3, [sp, #12]
   14bbe:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   14bc2:	2b00      	cmp	r3, #0
   14bc4:	d1a0      	bne.n	14b08 <_wcsnrtombs_l+0x20>
   14bc6:	9b05      	ldr	r3, [sp, #20]
   14bc8:	f04f 37ff 	mov.w	r7, #4294967295
   14bcc:	681d      	ldr	r5, [r3, #0]
   14bce:	e79f      	b.n	14b10 <_wcsnrtombs_l+0x28>
   14bd0:	4606      	mov	r6, r0
   14bd2:	218a      	movs	r1, #138	; 0x8a
   14bd4:	2200      	movs	r2, #0
   14bd6:	4630      	mov	r0, r6
   14bd8:	f8c9 1000 	str.w	r1, [r9]
   14bdc:	f8c8 2000 	str.w	r2, [r8]
   14be0:	b00b      	add	sp, #44	; 0x2c
   14be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14be6:	463e      	mov	r6, r7
   14be8:	e7be      	b.n	14b68 <_wcsnrtombs_l+0x80>
   14bea:	4666      	mov	r6, ip
   14bec:	e7bc      	b.n	14b68 <_wcsnrtombs_l+0x80>
   14bee:	bf00      	nop

00014bf0 <_wcsnrtombs_r>:
   14bf0:	b510      	push	{r4, lr}
   14bf2:	b084      	sub	sp, #16
   14bf4:	4c05      	ldr	r4, [pc, #20]	; (14c0c <_wcsnrtombs_r+0x1c>)
   14bf6:	9806      	ldr	r0, [sp, #24]
   14bf8:	9000      	str	r0, [sp, #0]
   14bfa:	9807      	ldr	r0, [sp, #28]
   14bfc:	9001      	str	r0, [sp, #4]
   14bfe:	4804      	ldr	r0, [pc, #16]	; (14c10 <_wcsnrtombs_r+0x20>)
   14c00:	6800      	ldr	r0, [r0, #0]
   14c02:	9402      	str	r4, [sp, #8]
   14c04:	f7ff ff70 	bl	14ae8 <_wcsnrtombs_l>
   14c08:	b004      	add	sp, #16
   14c0a:	bd10      	pop	{r4, pc}
   14c0c:	2000889c 	.word	0x2000889c
   14c10:	20008e24 	.word	0x20008e24

00014c14 <category>:
   14c14:	4b15      	ldr	r3, [pc, #84]	; (14c6c <category+0x58>)
   14c16:	4298      	cmp	r0, r3
   14c18:	d823      	bhi.n	14c62 <category+0x4e>
   14c1a:	b570      	push	{r4, r5, r6, lr}
   14c1c:	4e14      	ldr	r6, [pc, #80]	; (14c70 <category+0x5c>)
   14c1e:	f04f 0e00 	mov.w	lr, #0
   14c22:	f640 04db 	movw	r4, #2267	; 0x8db
   14c26:	e003      	b.n	14c30 <category+0x1c>
   14c28:	f102 0e01 	add.w	lr, r2, #1
   14c2c:	45a6      	cmp	lr, r4
   14c2e:	dc16      	bgt.n	14c5e <category+0x4a>
   14c30:	eb04 020e 	add.w	r2, r4, lr
   14c34:	f022 0301 	bic.w	r3, r2, #1
   14c38:	eb03 0362 	add.w	r3, r3, r2, asr #1
   14c3c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   14c40:	1052      	asrs	r2, r2, #1
   14c42:	7859      	ldrb	r1, [r3, #1]
   14c44:	885d      	ldrh	r5, [r3, #2]
   14c46:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   14c4a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   14c4e:	448c      	add	ip, r1
   14c50:	4560      	cmp	r0, ip
   14c52:	d8e9      	bhi.n	14c28 <category+0x14>
   14c54:	4288      	cmp	r0, r1
   14c56:	d206      	bcs.n	14c66 <category+0x52>
   14c58:	1e54      	subs	r4, r2, #1
   14c5a:	45a6      	cmp	lr, r4
   14c5c:	dde8      	ble.n	14c30 <category+0x1c>
   14c5e:	20ff      	movs	r0, #255	; 0xff
   14c60:	bd70      	pop	{r4, r5, r6, pc}
   14c62:	20ff      	movs	r0, #255	; 0xff
   14c64:	4770      	bx	lr
   14c66:	7818      	ldrb	r0, [r3, #0]
   14c68:	bd70      	pop	{r4, r5, r6, pc}
   14c6a:	bf00      	nop
   14c6c:	000e01ef 	.word	0x000e01ef
   14c70:	200029c0 	.word	0x200029c0

00014c74 <__smakebuf_r>:
   14c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c78:	898b      	ldrh	r3, [r1, #12]
   14c7a:	460c      	mov	r4, r1
   14c7c:	0799      	lsls	r1, r3, #30
   14c7e:	b096      	sub	sp, #88	; 0x58
   14c80:	d508      	bpl.n	14c94 <__smakebuf_r+0x20>
   14c82:	f104 0343 	add.w	r3, r4, #67	; 0x43
   14c86:	2201      	movs	r2, #1
   14c88:	e9c4 3204 	strd	r3, r2, [r4, #16]
   14c8c:	6023      	str	r3, [r4, #0]
   14c8e:	b016      	add	sp, #88	; 0x58
   14c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   14c98:	2900      	cmp	r1, #0
   14c9a:	4606      	mov	r6, r0
   14c9c:	db25      	blt.n	14cea <__smakebuf_r+0x76>
   14c9e:	466a      	mov	r2, sp
   14ca0:	f000 f8ac 	bl	14dfc <_fstat_r>
   14ca4:	2800      	cmp	r0, #0
   14ca6:	db1f      	blt.n	14ce8 <__smakebuf_r+0x74>
   14ca8:	9d01      	ldr	r5, [sp, #4]
   14caa:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   14cae:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   14cb2:	fab5 f585 	clz	r5, r5
   14cb6:	f44f 6880 	mov.w	r8, #1024	; 0x400
   14cba:	096d      	lsrs	r5, r5, #5
   14cbc:	f44f 6700 	mov.w	r7, #2048	; 0x800
   14cc0:	4641      	mov	r1, r8
   14cc2:	4630      	mov	r0, r6
   14cc4:	f7f5 fe72 	bl	a9ac <_malloc_r>
   14cc8:	b1e0      	cbz	r0, 14d04 <__smakebuf_r+0x90>
   14cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14cce:	f8c4 8014 	str.w	r8, [r4, #20]
   14cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14cd6:	6020      	str	r0, [r4, #0]
   14cd8:	6120      	str	r0, [r4, #16]
   14cda:	81a3      	strh	r3, [r4, #12]
   14cdc:	bb35      	cbnz	r5, 14d2c <__smakebuf_r+0xb8>
   14cde:	433b      	orrs	r3, r7
   14ce0:	81a3      	strh	r3, [r4, #12]
   14ce2:	b016      	add	sp, #88	; 0x58
   14ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ce8:	89a3      	ldrh	r3, [r4, #12]
   14cea:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   14cee:	d019      	beq.n	14d24 <__smakebuf_r+0xb0>
   14cf0:	f04f 0840 	mov.w	r8, #64	; 0x40
   14cf4:	2500      	movs	r5, #0
   14cf6:	4641      	mov	r1, r8
   14cf8:	4630      	mov	r0, r6
   14cfa:	462f      	mov	r7, r5
   14cfc:	f7f5 fe56 	bl	a9ac <_malloc_r>
   14d00:	2800      	cmp	r0, #0
   14d02:	d1e2      	bne.n	14cca <__smakebuf_r+0x56>
   14d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14d08:	059a      	lsls	r2, r3, #22
   14d0a:	d4c0      	bmi.n	14c8e <__smakebuf_r+0x1a>
   14d0c:	f023 0303 	bic.w	r3, r3, #3
   14d10:	f104 0243 	add.w	r2, r4, #67	; 0x43
   14d14:	f043 0302 	orr.w	r3, r3, #2
   14d18:	2101      	movs	r1, #1
   14d1a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   14d1e:	81a3      	strh	r3, [r4, #12]
   14d20:	6022      	str	r2, [r4, #0]
   14d22:	e7b4      	b.n	14c8e <__smakebuf_r+0x1a>
   14d24:	f44f 6880 	mov.w	r8, #1024	; 0x400
   14d28:	462f      	mov	r7, r5
   14d2a:	e7c9      	b.n	14cc0 <__smakebuf_r+0x4c>
   14d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   14d30:	4630      	mov	r0, r6
   14d32:	f000 f879 	bl	14e28 <_isatty_r>
   14d36:	b910      	cbnz	r0, 14d3e <__smakebuf_r+0xca>
   14d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14d3c:	e7cf      	b.n	14cde <__smakebuf_r+0x6a>
   14d3e:	89a3      	ldrh	r3, [r4, #12]
   14d40:	f023 0303 	bic.w	r3, r3, #3
   14d44:	f043 0301 	orr.w	r3, r3, #1
   14d48:	b21b      	sxth	r3, r3
   14d4a:	e7c8      	b.n	14cde <__smakebuf_r+0x6a>

00014d4c <__swbuf_r>:
   14d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d4e:	460d      	mov	r5, r1
   14d50:	4614      	mov	r4, r2
   14d52:	4606      	mov	r6, r0
   14d54:	b110      	cbz	r0, 14d5c <__swbuf_r+0x10>
   14d56:	6b43      	ldr	r3, [r0, #52]	; 0x34
   14d58:	2b00      	cmp	r3, #0
   14d5a:	d04c      	beq.n	14df6 <__swbuf_r+0xaa>
   14d5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   14d60:	69a3      	ldr	r3, [r4, #24]
   14d62:	60a3      	str	r3, [r4, #8]
   14d64:	0717      	lsls	r7, r2, #28
   14d66:	b290      	uxth	r0, r2
   14d68:	d51b      	bpl.n	14da2 <__swbuf_r+0x56>
   14d6a:	6923      	ldr	r3, [r4, #16]
   14d6c:	b1cb      	cbz	r3, 14da2 <__swbuf_r+0x56>
   14d6e:	b2ed      	uxtb	r5, r5
   14d70:	0481      	lsls	r1, r0, #18
   14d72:	462f      	mov	r7, r5
   14d74:	d522      	bpl.n	14dbc <__swbuf_r+0x70>
   14d76:	6822      	ldr	r2, [r4, #0]
   14d78:	6961      	ldr	r1, [r4, #20]
   14d7a:	1ad3      	subs	r3, r2, r3
   14d7c:	4299      	cmp	r1, r3
   14d7e:	dd29      	ble.n	14dd4 <__swbuf_r+0x88>
   14d80:	3301      	adds	r3, #1
   14d82:	68a1      	ldr	r1, [r4, #8]
   14d84:	3901      	subs	r1, #1
   14d86:	60a1      	str	r1, [r4, #8]
   14d88:	1c51      	adds	r1, r2, #1
   14d8a:	6021      	str	r1, [r4, #0]
   14d8c:	7015      	strb	r5, [r2, #0]
   14d8e:	6962      	ldr	r2, [r4, #20]
   14d90:	429a      	cmp	r2, r3
   14d92:	d027      	beq.n	14de4 <__swbuf_r+0x98>
   14d94:	89a3      	ldrh	r3, [r4, #12]
   14d96:	07db      	lsls	r3, r3, #31
   14d98:	d501      	bpl.n	14d9e <__swbuf_r+0x52>
   14d9a:	2d0a      	cmp	r5, #10
   14d9c:	d022      	beq.n	14de4 <__swbuf_r+0x98>
   14d9e:	4638      	mov	r0, r7
   14da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14da2:	4621      	mov	r1, r4
   14da4:	4630      	mov	r0, r6
   14da6:	f7ff fdaf 	bl	14908 <__swsetup_r>
   14daa:	bb08      	cbnz	r0, 14df0 <__swbuf_r+0xa4>
   14dac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   14db0:	6923      	ldr	r3, [r4, #16]
   14db2:	b290      	uxth	r0, r2
   14db4:	b2ed      	uxtb	r5, r5
   14db6:	0481      	lsls	r1, r0, #18
   14db8:	462f      	mov	r7, r5
   14dba:	d4dc      	bmi.n	14d76 <__swbuf_r+0x2a>
   14dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   14dc0:	81a2      	strh	r2, [r4, #12]
   14dc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14dc4:	6961      	ldr	r1, [r4, #20]
   14dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   14dca:	6662      	str	r2, [r4, #100]	; 0x64
   14dcc:	6822      	ldr	r2, [r4, #0]
   14dce:	1ad3      	subs	r3, r2, r3
   14dd0:	4299      	cmp	r1, r3
   14dd2:	dcd5      	bgt.n	14d80 <__swbuf_r+0x34>
   14dd4:	4621      	mov	r1, r4
   14dd6:	4630      	mov	r0, r6
   14dd8:	f7fc fea0 	bl	11b1c <_fflush_r>
   14ddc:	b940      	cbnz	r0, 14df0 <__swbuf_r+0xa4>
   14dde:	6822      	ldr	r2, [r4, #0]
   14de0:	2301      	movs	r3, #1
   14de2:	e7ce      	b.n	14d82 <__swbuf_r+0x36>
   14de4:	4621      	mov	r1, r4
   14de6:	4630      	mov	r0, r6
   14de8:	f7fc fe98 	bl	11b1c <_fflush_r>
   14dec:	2800      	cmp	r0, #0
   14dee:	d0d6      	beq.n	14d9e <__swbuf_r+0x52>
   14df0:	f04f 37ff 	mov.w	r7, #4294967295
   14df4:	e7d3      	b.n	14d9e <__swbuf_r+0x52>
   14df6:	f7f7 fb0d 	bl	c414 <__sinit>
   14dfa:	e7af      	b.n	14d5c <__swbuf_r+0x10>

00014dfc <_fstat_r>:
   14dfc:	b570      	push	{r4, r5, r6, lr}
   14dfe:	460c      	mov	r4, r1
   14e00:	4d08      	ldr	r5, [pc, #32]	; (14e24 <_fstat_r+0x28>)
   14e02:	4603      	mov	r3, r0
   14e04:	2600      	movs	r6, #0
   14e06:	4620      	mov	r0, r4
   14e08:	4611      	mov	r1, r2
   14e0a:	461c      	mov	r4, r3
   14e0c:	602e      	str	r6, [r5, #0]
   14e0e:	f7f3 fc43 	bl	8698 <_fstat>
   14e12:	1c43      	adds	r3, r0, #1
   14e14:	d000      	beq.n	14e18 <_fstat_r+0x1c>
   14e16:	bd70      	pop	{r4, r5, r6, pc}
   14e18:	682b      	ldr	r3, [r5, #0]
   14e1a:	2b00      	cmp	r3, #0
   14e1c:	d0fb      	beq.n	14e16 <_fstat_r+0x1a>
   14e1e:	6023      	str	r3, [r4, #0]
   14e20:	bd70      	pop	{r4, r5, r6, pc}
   14e22:	bf00      	nop
   14e24:	200216d4 	.word	0x200216d4

00014e28 <_isatty_r>:
   14e28:	b538      	push	{r3, r4, r5, lr}
   14e2a:	4d07      	ldr	r5, [pc, #28]	; (14e48 <_isatty_r+0x20>)
   14e2c:	2200      	movs	r2, #0
   14e2e:	4604      	mov	r4, r0
   14e30:	4608      	mov	r0, r1
   14e32:	602a      	str	r2, [r5, #0]
   14e34:	f7f3 fc36 	bl	86a4 <_isatty>
   14e38:	1c43      	adds	r3, r0, #1
   14e3a:	d000      	beq.n	14e3e <_isatty_r+0x16>
   14e3c:	bd38      	pop	{r3, r4, r5, pc}
   14e3e:	682b      	ldr	r3, [r5, #0]
   14e40:	2b00      	cmp	r3, #0
   14e42:	d0fb      	beq.n	14e3c <_isatty_r+0x14>
   14e44:	6023      	str	r3, [r4, #0]
   14e46:	bd38      	pop	{r3, r4, r5, pc}
   14e48:	200216d4 	.word	0x200216d4

00014e4c <__aeabi_drsub>:
   14e4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   14e50:	e002      	b.n	14e58 <__adddf3>
   14e52:	bf00      	nop

00014e54 <__aeabi_dsub>:
   14e54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00014e58 <__adddf3>:
   14e58:	b530      	push	{r4, r5, lr}
   14e5a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   14e5e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   14e62:	ea94 0f05 	teq	r4, r5
   14e66:	bf08      	it	eq
   14e68:	ea90 0f02 	teqeq	r0, r2
   14e6c:	bf1f      	itttt	ne
   14e6e:	ea54 0c00 	orrsne.w	ip, r4, r0
   14e72:	ea55 0c02 	orrsne.w	ip, r5, r2
   14e76:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   14e7a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   14e7e:	f000 80e2 	beq.w	15046 <__adddf3+0x1ee>
   14e82:	ea4f 5454 	mov.w	r4, r4, lsr #21
   14e86:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   14e8a:	bfb8      	it	lt
   14e8c:	426d      	neglt	r5, r5
   14e8e:	dd0c      	ble.n	14eaa <__adddf3+0x52>
   14e90:	442c      	add	r4, r5
   14e92:	ea80 0202 	eor.w	r2, r0, r2
   14e96:	ea81 0303 	eor.w	r3, r1, r3
   14e9a:	ea82 0000 	eor.w	r0, r2, r0
   14e9e:	ea83 0101 	eor.w	r1, r3, r1
   14ea2:	ea80 0202 	eor.w	r2, r0, r2
   14ea6:	ea81 0303 	eor.w	r3, r1, r3
   14eaa:	2d36      	cmp	r5, #54	; 0x36
   14eac:	bf88      	it	hi
   14eae:	bd30      	pophi	{r4, r5, pc}
   14eb0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   14eb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   14eb8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   14ebc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   14ec0:	d002      	beq.n	14ec8 <__adddf3+0x70>
   14ec2:	4240      	negs	r0, r0
   14ec4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14ec8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   14ecc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   14ed0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   14ed4:	d002      	beq.n	14edc <__adddf3+0x84>
   14ed6:	4252      	negs	r2, r2
   14ed8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   14edc:	ea94 0f05 	teq	r4, r5
   14ee0:	f000 80a7 	beq.w	15032 <__adddf3+0x1da>
   14ee4:	f1a4 0401 	sub.w	r4, r4, #1
   14ee8:	f1d5 0e20 	rsbs	lr, r5, #32
   14eec:	db0d      	blt.n	14f0a <__adddf3+0xb2>
   14eee:	fa02 fc0e 	lsl.w	ip, r2, lr
   14ef2:	fa22 f205 	lsr.w	r2, r2, r5
   14ef6:	1880      	adds	r0, r0, r2
   14ef8:	f141 0100 	adc.w	r1, r1, #0
   14efc:	fa03 f20e 	lsl.w	r2, r3, lr
   14f00:	1880      	adds	r0, r0, r2
   14f02:	fa43 f305 	asr.w	r3, r3, r5
   14f06:	4159      	adcs	r1, r3
   14f08:	e00e      	b.n	14f28 <__adddf3+0xd0>
   14f0a:	f1a5 0520 	sub.w	r5, r5, #32
   14f0e:	f10e 0e20 	add.w	lr, lr, #32
   14f12:	2a01      	cmp	r2, #1
   14f14:	fa03 fc0e 	lsl.w	ip, r3, lr
   14f18:	bf28      	it	cs
   14f1a:	f04c 0c02 	orrcs.w	ip, ip, #2
   14f1e:	fa43 f305 	asr.w	r3, r3, r5
   14f22:	18c0      	adds	r0, r0, r3
   14f24:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   14f28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   14f2c:	d507      	bpl.n	14f3e <__adddf3+0xe6>
   14f2e:	f04f 0e00 	mov.w	lr, #0
   14f32:	f1dc 0c00 	rsbs	ip, ip, #0
   14f36:	eb7e 0000 	sbcs.w	r0, lr, r0
   14f3a:	eb6e 0101 	sbc.w	r1, lr, r1
   14f3e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   14f42:	d31b      	bcc.n	14f7c <__adddf3+0x124>
   14f44:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   14f48:	d30c      	bcc.n	14f64 <__adddf3+0x10c>
   14f4a:	0849      	lsrs	r1, r1, #1
   14f4c:	ea5f 0030 	movs.w	r0, r0, rrx
   14f50:	ea4f 0c3c 	mov.w	ip, ip, rrx
   14f54:	f104 0401 	add.w	r4, r4, #1
   14f58:	ea4f 5244 	mov.w	r2, r4, lsl #21
   14f5c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   14f60:	f080 809a 	bcs.w	15098 <__adddf3+0x240>
   14f64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   14f68:	bf08      	it	eq
   14f6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   14f6e:	f150 0000 	adcs.w	r0, r0, #0
   14f72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   14f76:	ea41 0105 	orr.w	r1, r1, r5
   14f7a:	bd30      	pop	{r4, r5, pc}
   14f7c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   14f80:	4140      	adcs	r0, r0
   14f82:	eb41 0101 	adc.w	r1, r1, r1
   14f86:	3c01      	subs	r4, #1
   14f88:	bf28      	it	cs
   14f8a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   14f8e:	d2e9      	bcs.n	14f64 <__adddf3+0x10c>
   14f90:	f091 0f00 	teq	r1, #0
   14f94:	bf04      	itt	eq
   14f96:	4601      	moveq	r1, r0
   14f98:	2000      	moveq	r0, #0
   14f9a:	fab1 f381 	clz	r3, r1
   14f9e:	bf08      	it	eq
   14fa0:	3320      	addeq	r3, #32
   14fa2:	f1a3 030b 	sub.w	r3, r3, #11
   14fa6:	f1b3 0220 	subs.w	r2, r3, #32
   14faa:	da0c      	bge.n	14fc6 <__adddf3+0x16e>
   14fac:	320c      	adds	r2, #12
   14fae:	dd08      	ble.n	14fc2 <__adddf3+0x16a>
   14fb0:	f102 0c14 	add.w	ip, r2, #20
   14fb4:	f1c2 020c 	rsb	r2, r2, #12
   14fb8:	fa01 f00c 	lsl.w	r0, r1, ip
   14fbc:	fa21 f102 	lsr.w	r1, r1, r2
   14fc0:	e00c      	b.n	14fdc <__adddf3+0x184>
   14fc2:	f102 0214 	add.w	r2, r2, #20
   14fc6:	bfd8      	it	le
   14fc8:	f1c2 0c20 	rsble	ip, r2, #32
   14fcc:	fa01 f102 	lsl.w	r1, r1, r2
   14fd0:	fa20 fc0c 	lsr.w	ip, r0, ip
   14fd4:	bfdc      	itt	le
   14fd6:	ea41 010c 	orrle.w	r1, r1, ip
   14fda:	4090      	lslle	r0, r2
   14fdc:	1ae4      	subs	r4, r4, r3
   14fde:	bfa2      	ittt	ge
   14fe0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   14fe4:	4329      	orrge	r1, r5
   14fe6:	bd30      	popge	{r4, r5, pc}
   14fe8:	ea6f 0404 	mvn.w	r4, r4
   14fec:	3c1f      	subs	r4, #31
   14fee:	da1c      	bge.n	1502a <__adddf3+0x1d2>
   14ff0:	340c      	adds	r4, #12
   14ff2:	dc0e      	bgt.n	15012 <__adddf3+0x1ba>
   14ff4:	f104 0414 	add.w	r4, r4, #20
   14ff8:	f1c4 0220 	rsb	r2, r4, #32
   14ffc:	fa20 f004 	lsr.w	r0, r0, r4
   15000:	fa01 f302 	lsl.w	r3, r1, r2
   15004:	ea40 0003 	orr.w	r0, r0, r3
   15008:	fa21 f304 	lsr.w	r3, r1, r4
   1500c:	ea45 0103 	orr.w	r1, r5, r3
   15010:	bd30      	pop	{r4, r5, pc}
   15012:	f1c4 040c 	rsb	r4, r4, #12
   15016:	f1c4 0220 	rsb	r2, r4, #32
   1501a:	fa20 f002 	lsr.w	r0, r0, r2
   1501e:	fa01 f304 	lsl.w	r3, r1, r4
   15022:	ea40 0003 	orr.w	r0, r0, r3
   15026:	4629      	mov	r1, r5
   15028:	bd30      	pop	{r4, r5, pc}
   1502a:	fa21 f004 	lsr.w	r0, r1, r4
   1502e:	4629      	mov	r1, r5
   15030:	bd30      	pop	{r4, r5, pc}
   15032:	f094 0f00 	teq	r4, #0
   15036:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1503a:	bf06      	itte	eq
   1503c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   15040:	3401      	addeq	r4, #1
   15042:	3d01      	subne	r5, #1
   15044:	e74e      	b.n	14ee4 <__adddf3+0x8c>
   15046:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1504a:	bf18      	it	ne
   1504c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   15050:	d029      	beq.n	150a6 <__adddf3+0x24e>
   15052:	ea94 0f05 	teq	r4, r5
   15056:	bf08      	it	eq
   15058:	ea90 0f02 	teqeq	r0, r2
   1505c:	d005      	beq.n	1506a <__adddf3+0x212>
   1505e:	ea54 0c00 	orrs.w	ip, r4, r0
   15062:	bf04      	itt	eq
   15064:	4619      	moveq	r1, r3
   15066:	4610      	moveq	r0, r2
   15068:	bd30      	pop	{r4, r5, pc}
   1506a:	ea91 0f03 	teq	r1, r3
   1506e:	bf1e      	ittt	ne
   15070:	2100      	movne	r1, #0
   15072:	2000      	movne	r0, #0
   15074:	bd30      	popne	{r4, r5, pc}
   15076:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1507a:	d105      	bne.n	15088 <__adddf3+0x230>
   1507c:	0040      	lsls	r0, r0, #1
   1507e:	4149      	adcs	r1, r1
   15080:	bf28      	it	cs
   15082:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   15086:	bd30      	pop	{r4, r5, pc}
   15088:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1508c:	bf3c      	itt	cc
   1508e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   15092:	bd30      	popcc	{r4, r5, pc}
   15094:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15098:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1509c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   150a0:	f04f 0000 	mov.w	r0, #0
   150a4:	bd30      	pop	{r4, r5, pc}
   150a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   150aa:	bf1a      	itte	ne
   150ac:	4619      	movne	r1, r3
   150ae:	4610      	movne	r0, r2
   150b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   150b4:	bf1c      	itt	ne
   150b6:	460b      	movne	r3, r1
   150b8:	4602      	movne	r2, r0
   150ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   150be:	bf06      	itte	eq
   150c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   150c4:	ea91 0f03 	teqeq	r1, r3
   150c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   150cc:	bd30      	pop	{r4, r5, pc}
   150ce:	bf00      	nop

000150d0 <__aeabi_ui2d>:
   150d0:	f090 0f00 	teq	r0, #0
   150d4:	bf04      	itt	eq
   150d6:	2100      	moveq	r1, #0
   150d8:	4770      	bxeq	lr
   150da:	b530      	push	{r4, r5, lr}
   150dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   150e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   150e4:	f04f 0500 	mov.w	r5, #0
   150e8:	f04f 0100 	mov.w	r1, #0
   150ec:	e750      	b.n	14f90 <__adddf3+0x138>
   150ee:	bf00      	nop

000150f0 <__aeabi_i2d>:
   150f0:	f090 0f00 	teq	r0, #0
   150f4:	bf04      	itt	eq
   150f6:	2100      	moveq	r1, #0
   150f8:	4770      	bxeq	lr
   150fa:	b530      	push	{r4, r5, lr}
   150fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15100:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15104:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   15108:	bf48      	it	mi
   1510a:	4240      	negmi	r0, r0
   1510c:	f04f 0100 	mov.w	r1, #0
   15110:	e73e      	b.n	14f90 <__adddf3+0x138>
   15112:	bf00      	nop

00015114 <__aeabi_f2d>:
   15114:	0042      	lsls	r2, r0, #1
   15116:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1511a:	ea4f 0131 	mov.w	r1, r1, rrx
   1511e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   15122:	bf1f      	itttt	ne
   15124:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   15128:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1512c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   15130:	4770      	bxne	lr
   15132:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   15136:	bf08      	it	eq
   15138:	4770      	bxeq	lr
   1513a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1513e:	bf04      	itt	eq
   15140:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   15144:	4770      	bxeq	lr
   15146:	b530      	push	{r4, r5, lr}
   15148:	f44f 7460 	mov.w	r4, #896	; 0x380
   1514c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15150:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   15154:	e71c      	b.n	14f90 <__adddf3+0x138>
   15156:	bf00      	nop

00015158 <__aeabi_ul2d>:
   15158:	ea50 0201 	orrs.w	r2, r0, r1
   1515c:	bf08      	it	eq
   1515e:	4770      	bxeq	lr
   15160:	b530      	push	{r4, r5, lr}
   15162:	f04f 0500 	mov.w	r5, #0
   15166:	e00a      	b.n	1517e <__aeabi_l2d+0x16>

00015168 <__aeabi_l2d>:
   15168:	ea50 0201 	orrs.w	r2, r0, r1
   1516c:	bf08      	it	eq
   1516e:	4770      	bxeq	lr
   15170:	b530      	push	{r4, r5, lr}
   15172:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   15176:	d502      	bpl.n	1517e <__aeabi_l2d+0x16>
   15178:	4240      	negs	r0, r0
   1517a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1517e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15182:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15186:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1518a:	f43f aed8 	beq.w	14f3e <__adddf3+0xe6>
   1518e:	f04f 0203 	mov.w	r2, #3
   15192:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   15196:	bf18      	it	ne
   15198:	3203      	addne	r2, #3
   1519a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1519e:	bf18      	it	ne
   151a0:	3203      	addne	r2, #3
   151a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   151a6:	f1c2 0320 	rsb	r3, r2, #32
   151aa:	fa00 fc03 	lsl.w	ip, r0, r3
   151ae:	fa20 f002 	lsr.w	r0, r0, r2
   151b2:	fa01 fe03 	lsl.w	lr, r1, r3
   151b6:	ea40 000e 	orr.w	r0, r0, lr
   151ba:	fa21 f102 	lsr.w	r1, r1, r2
   151be:	4414      	add	r4, r2
   151c0:	e6bd      	b.n	14f3e <__adddf3+0xe6>
   151c2:	bf00      	nop

000151c4 <__aeabi_d2lz>:
   151c4:	b508      	push	{r3, lr}
   151c6:	4602      	mov	r2, r0
   151c8:	460b      	mov	r3, r1
   151ca:	ec43 2b17 	vmov	d7, r2, r3
   151ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   151d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   151d6:	d403      	bmi.n	151e0 <__aeabi_d2lz+0x1c>
   151d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   151dc:	f000 b80c 	b.w	151f8 <__aeabi_d2ulz>
   151e0:	eeb1 7b47 	vneg.f64	d7, d7
   151e4:	ec51 0b17 	vmov	r0, r1, d7
   151e8:	f000 f806 	bl	151f8 <__aeabi_d2ulz>
   151ec:	4240      	negs	r0, r0
   151ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   151f2:	bd08      	pop	{r3, pc}
   151f4:	0000      	movs	r0, r0
	...

000151f8 <__aeabi_d2ulz>:
   151f8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 15228 <__aeabi_d2ulz+0x30>
   151fc:	ec41 0b17 	vmov	d7, r0, r1
   15200:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 15230 <__aeabi_d2ulz+0x38>
   15204:	ee27 6b06 	vmul.f64	d6, d7, d6
   15208:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   1520c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   15210:	eea4 7b45 	vfms.f64	d7, d4, d5
   15214:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   15218:	ee16 1a10 	vmov	r1, s12
   1521c:	ee17 0a90 	vmov	r0, s15
   15220:	4770      	bx	lr
   15222:	bf00      	nop
   15224:	f3af 8000 	nop.w
   15228:	00000000 	.word	0x00000000
   1522c:	3df00000 	.word	0x3df00000
   15230:	00000000 	.word	0x00000000
   15234:	41f00000 	.word	0x41f00000

00015238 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   15238:	f85f f000 	ldr.w	pc, [pc]	; 1523c <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   1523c:	6000171d 	.word	0x6000171d

00015240 <___reboot_Teensyduino__veneer>:
   15240:	f85f f000 	ldr.w	pc, [pc]	; 15244 <___reboot_Teensyduino__veneer+0x4>
   15244:	60002611 	.word	0x60002611

00015248 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   15248:	f85f f000 	ldr.w	pc, [pc]	; 1524c <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   1524c:	60001655 	.word	0x60001655

00015250 <___init_veneer>:
   15250:	f85f f000 	ldr.w	pc, [pc]	; 15254 <___init_veneer+0x4>
   15254:	600026b9 	.word	0x600026b9

00015258 <___ZN16CrashReportClasscvbEv_veneer>:
   15258:	f85f f000 	ldr.w	pc, [pc]	; 1525c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   1525c:	60001eb5 	.word	0x60001eb5

Disassembly of section .fini:

00015260 <_fini>:
   15260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15262:	bf00      	nop
